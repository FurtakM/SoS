// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// debugMode = 0 ;
 182: LD_ADDR_EXP 45
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// PrepareDifficulty ;
 190: CALL 7587 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 194: LD_INT 43
 196: PPUSH
 197: LD_INT 22
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: LD_INT 333
 205: NEG
 206: PPUSH
 207: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 211: LD_INT 43
 213: PPUSH
 214: LD_INT 22
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 331
// PrepareGammaBase ;
 224: CALL 2635 0 0
// PrepareHeroes ;
 228: CALL 571 0 0
// PrepareRussianCommander ;
 232: CALL 6443 0 0
// PrepareRussians ;
 236: CALL 6761 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 240: LD_INT 22
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 25
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 90
 274: PPUSH
 275: LD_INT 86
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 285: LD_INT 3
 287: PPUSH
 288: LD_INT 24
 290: PPUSH
 291: LD_INT 3
 293: PPUSH
 294: LD_EXP 25
 298: PPUSH
 299: LD_EXP 26
 303: PPUSH
 304: CALL_OW 12
 308: PPUSH
 309: LD_INT 6
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL 8997 0 6
// PrepareCutsceneAttack ;
 319: CALL 6495 0 0
// end ;
 323: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 324: LD_INT 22
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 6
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: PUSH
 353: LD_INT 6
 355: GREATEREQUAL
 356: IFFALSE 368
 358: GO 360
 360: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 361: LD_STRING ACH_ARMOR
 363: PPUSH
 364: CALL_OW 543
 368: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 369: LD_EXP 45
 373: PUSH
 374: LD_INT 1
 376: EQUAL
 377: IFFALSE 568
 379: GO 381
 381: DISABLE
 382: LD_INT 0
 384: PPUSH
// begin enable ;
 385: ENABLE
// fogoff ( true ) ;
 386: LD_INT 1
 388: PPUSH
 389: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 393: LD_ADDR_VAR 0 1
 397: PUSH
 398: LD_INT 22
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 21
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PPUSH
 422: CALL_OW 69
 426: PUSH
 427: FOR_IN
 428: IFFALSE 444
// SetLives ( i , 1000 ) ;
 430: LD_VAR 0 1
 434: PPUSH
 435: LD_INT 1000
 437: PPUSH
 438: CALL_OW 234
 442: GO 427
 444: POP
 445: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 446: LD_ADDR_VAR 0 1
 450: PUSH
 451: LD_INT 22
 453: PUSH
 454: LD_INT 1
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PPUSH
 475: CALL_OW 69
 479: PUSH
 480: FOR_IN
 481: IFFALSE 505
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 483: LD_VAR 0 1
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: LD_INT 9999
 498: PPUSH
 499: CALL_OW 277
 503: GO 480
 505: POP
 506: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 507: LD_ADDR_VAR 0 1
 511: PUSH
 512: LD_INT 22
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 1
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PPUSH
 536: CALL_OW 69
 540: PUSH
 541: FOR_IN
 542: IFFALSE 566
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 544: LD_VAR 0 1
 548: PPUSH
 549: CALL_OW 274
 553: PPUSH
 554: LD_INT 2
 556: PPUSH
 557: LD_INT 9999
 559: PPUSH
 560: CALL_OW 277
 564: GO 541
 566: POP
 567: POP
// end ; end_of_file
 568: PPOPN 1
 570: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side = 1 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// uc_nation = 1 ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if gammaCommander = 1 then
 604: LD_EXP 12
 608: PUSH
 609: LD_INT 1
 611: EQUAL
 612: IFFALSE 663
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 614: LD_ADDR_EXP 3
 618: PUSH
 619: LD_STRING Donaldson
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_STRING 04_
 627: PPUSH
 628: CALL 44122 0 3
 632: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 633: LD_EXP 3
 637: PPUSH
 638: LD_INT 54
 640: PPUSH
 641: LD_INT 25
 643: PPUSH
 644: LD_INT 8
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 50
// ComHold ( Donaldson ) ;
 654: LD_EXP 3
 658: PPUSH
 659: CALL_OW 140
// end ; if gammaCommander = 2 then
 663: LD_EXP 12
 667: PUSH
 668: LD_INT 2
 670: EQUAL
 671: IFFALSE 722
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 673: LD_ADDR_EXP 2
 677: PUSH
 678: LD_STRING Brown
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_STRING 04_
 686: PPUSH
 687: CALL 44122 0 3
 691: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 54
 699: PPUSH
 700: LD_INT 25
 702: PPUSH
 703: LD_INT 8
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 50
// ComHold ( Brown ) ;
 713: LD_EXP 2
 717: PPUSH
 718: CALL_OW 140
// end ; if gammaCommander = 3 then
 722: LD_EXP 12
 726: PUSH
 727: LD_INT 3
 729: EQUAL
 730: IFFALSE 781
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 732: LD_ADDR_EXP 13
 736: PUSH
 737: LD_STRING VanHouten
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: LD_STRING 
 745: PPUSH
 746: CALL 44122 0 3
 750: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_INT 54
 758: PPUSH
 759: LD_INT 25
 761: PPUSH
 762: LD_INT 8
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 50
// ComHold ( Houten ) ;
 772: LD_EXP 13
 776: PPUSH
 777: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 781: LD_ADDR_EXP 22
 785: PUSH
 786: LD_STRING Harisson
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 44122 0 3
 799: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 23
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 44122 0 3
 818: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 819: LD_STRING 04_Lisa
 821: PUSH
 822: EMPTY
 823: LIST
 824: PPUSH
 825: CALL_OW 28
 829: PUSH
 830: LD_STRING LisaInDelta
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: PUSH
 843: LD_STRING 07_Lisa
 845: PUSH
 846: EMPTY
 847: LIST
 848: PPUSH
 849: CALL_OW 28
 853: NOT
 854: AND
 855: IFFALSE 894
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 857: LD_ADDR_EXP 6
 861: PUSH
 862: LD_STRING Lisa
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_STRING 04_
 870: PPUSH
 871: CALL 44122 0 3
 875: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 876: LD_ADDR_VAR 0 15
 880: PUSH
 881: LD_VAR 0 15
 885: PUSH
 886: LD_EXP 6
 890: ADD
 891: ST_TO_ADDR
// end else
 892: GO 949
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 894: LD_EXP 6
 898: NOT
 899: PUSH
 900: LD_STRING LisaIn07
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: NOT
 911: AND
 912: IFFALSE 949
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 914: LD_ADDR_EXP 6
 918: PUSH
 919: LD_STRING Lisa
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: LD_STRING 07_
 927: PPUSH
 928: CALL 44122 0 3
 932: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 933: LD_ADDR_VAR 0 15
 937: PUSH
 938: LD_VAR 0 15
 942: PUSH
 943: LD_EXP 6
 947: ADD
 948: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 949: LD_STRING 04_Bobby
 951: PUSH
 952: EMPTY
 953: LIST
 954: PPUSH
 955: CALL_OW 28
 959: PUSH
 960: LD_STRING BobbyInDelta
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 30
 970: NOT
 971: AND
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PUSH
 976: EMPTY
 977: LIST
 978: PPUSH
 979: CALL_OW 28
 983: NOT
 984: AND
 985: IFFALSE 1024
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 987: LD_ADDR_EXP 4
 991: PUSH
 992: LD_STRING Bobby
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_STRING 04_
1000: PPUSH
1001: CALL 44122 0 3
1005: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1006: LD_ADDR_VAR 0 15
1010: PUSH
1011: LD_VAR 0 15
1015: PUSH
1016: LD_EXP 4
1020: ADD
1021: ST_TO_ADDR
// end else
1022: GO 1079
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1024: LD_EXP 4
1028: NOT
1029: PUSH
1030: LD_STRING BobbyIn07
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: CALL_OW 30
1040: NOT
1041: AND
1042: IFFALSE 1079
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1044: LD_ADDR_EXP 4
1048: PUSH
1049: LD_STRING Bobby
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_STRING 07_
1057: PPUSH
1058: CALL 44122 0 3
1062: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1063: LD_ADDR_VAR 0 15
1067: PUSH
1068: LD_VAR 0 15
1072: PUSH
1073: LD_EXP 4
1077: ADD
1078: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1079: LD_STRING 04_Cyrus
1081: PUSH
1082: EMPTY
1083: LIST
1084: PPUSH
1085: CALL_OW 28
1089: PUSH
1090: LD_STRING CyrusInDelta
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL_OW 30
1100: NOT
1101: AND
1102: PUSH
1103: LD_STRING 07_Cyrus
1105: PUSH
1106: EMPTY
1107: LIST
1108: PPUSH
1109: CALL_OW 28
1113: NOT
1114: AND
1115: IFFALSE 1154
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1117: LD_ADDR_EXP 5
1121: PUSH
1122: LD_STRING Cyrus
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: LD_STRING 04_
1130: PPUSH
1131: CALL 44122 0 3
1135: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1136: LD_ADDR_VAR 0 15
1140: PUSH
1141: LD_VAR 0 15
1145: PUSH
1146: LD_EXP 5
1150: ADD
1151: ST_TO_ADDR
// end else
1152: GO 1209
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1154: LD_EXP 5
1158: NOT
1159: PUSH
1160: LD_STRING CyrusIn07
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: NOT
1171: AND
1172: IFFALSE 1209
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1174: LD_ADDR_EXP 5
1178: PUSH
1179: LD_STRING Cyrus
1181: PPUSH
1182: LD_INT 1
1184: PPUSH
1185: LD_STRING 07_
1187: PPUSH
1188: CALL 44122 0 3
1192: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1193: LD_ADDR_VAR 0 15
1197: PUSH
1198: LD_VAR 0 15
1202: PUSH
1203: LD_EXP 5
1207: ADD
1208: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1209: LD_STRING 04_Brown
1211: PUSH
1212: EMPTY
1213: LIST
1214: PPUSH
1215: CALL_OW 28
1219: PUSH
1220: LD_STRING BrownInDelta
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 30
1230: NOT
1231: AND
1232: PUSH
1233: LD_STRING 07_Brown
1235: PUSH
1236: EMPTY
1237: LIST
1238: PPUSH
1239: CALL_OW 28
1243: NOT
1244: AND
1245: PUSH
1246: LD_EXP 12
1250: PUSH
1251: LD_INT 2
1253: NONEQUAL
1254: AND
1255: IFFALSE 1294
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1257: LD_ADDR_EXP 2
1261: PUSH
1262: LD_STRING Brown
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_STRING 04_
1270: PPUSH
1271: CALL 44122 0 3
1275: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1276: LD_ADDR_VAR 0 15
1280: PUSH
1281: LD_VAR 0 15
1285: PUSH
1286: LD_EXP 2
1290: ADD
1291: ST_TO_ADDR
// end else
1292: GO 1359
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1294: LD_EXP 2
1298: NOT
1299: PUSH
1300: LD_STRING BrownIn07
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 30
1310: NOT
1311: AND
1312: PUSH
1313: LD_EXP 12
1317: PUSH
1318: LD_INT 2
1320: NONEQUAL
1321: AND
1322: IFFALSE 1359
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1324: LD_ADDR_EXP 2
1328: PUSH
1329: LD_STRING Brown
1331: PPUSH
1332: LD_INT 1
1334: PPUSH
1335: LD_STRING 07_
1337: PPUSH
1338: CALL 44122 0 3
1342: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1343: LD_ADDR_VAR 0 15
1347: PUSH
1348: LD_VAR 0 15
1352: PUSH
1353: LD_EXP 2
1357: ADD
1358: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1359: LD_STRING 04_Donaldson
1361: PUSH
1362: EMPTY
1363: LIST
1364: PPUSH
1365: CALL_OW 28
1369: PUSH
1370: LD_STRING DonaldsonInDelta
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 30
1380: NOT
1381: AND
1382: PUSH
1383: LD_STRING 07_Donaldson
1385: PUSH
1386: EMPTY
1387: LIST
1388: PPUSH
1389: CALL_OW 28
1393: NOT
1394: AND
1395: PUSH
1396: LD_EXP 12
1400: PUSH
1401: LD_INT 1
1403: NONEQUAL
1404: AND
1405: IFFALSE 1444
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1407: LD_ADDR_EXP 3
1411: PUSH
1412: LD_STRING Donaldson
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_STRING 04_
1420: PPUSH
1421: CALL 44122 0 3
1425: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1426: LD_ADDR_VAR 0 15
1430: PUSH
1431: LD_VAR 0 15
1435: PUSH
1436: LD_EXP 3
1440: ADD
1441: ST_TO_ADDR
// end else
1442: GO 1509
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1444: LD_EXP 3
1448: NOT
1449: PUSH
1450: LD_STRING DonaldsonIn07
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL_OW 30
1460: NOT
1461: AND
1462: PUSH
1463: LD_EXP 12
1467: PUSH
1468: LD_INT 1
1470: NONEQUAL
1471: AND
1472: IFFALSE 1509
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1474: LD_ADDR_EXP 3
1478: PUSH
1479: LD_STRING Donaldson
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: LD_STRING 07_
1487: PPUSH
1488: CALL 44122 0 3
1492: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1493: LD_ADDR_VAR 0 15
1497: PUSH
1498: LD_VAR 0 15
1502: PUSH
1503: LD_EXP 3
1507: ADD
1508: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1509: LD_STRING KhatamIn07
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 30
1519: NOT
1520: IFFALSE 1557
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1522: LD_ADDR_EXP 10
1526: PUSH
1527: LD_STRING Khatam
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_STRING 07_
1535: PPUSH
1536: CALL 44122 0 3
1540: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1541: LD_ADDR_VAR 0 15
1545: PUSH
1546: LD_VAR 0 15
1550: PUSH
1551: LD_EXP 10
1555: ADD
1556: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1557: LD_ADDR_EXP 11
1561: PUSH
1562: LD_STRING 07_othersGamma
1564: PPUSH
1565: CALL_OW 31
1569: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1570: LD_ADDR_VAR 0 14
1574: PUSH
1575: LD_INT 8
1577: PUSH
1578: LD_EXP 11
1582: MINUS
1583: ST_TO_ADDR
// if tmp then
1584: LD_VAR 0 14
1588: IFFALSE 1641
// for i = 1 to tmp do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_VAR 0 14
1604: PUSH
1605: FOR_TO
1606: IFFALSE 1639
// begin PrepareHuman ( false , 1 , 5 ) ;
1608: LD_INT 0
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 5
1616: PPUSH
1617: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1621: LD_ADDR_EXP 11
1625: PUSH
1626: LD_EXP 11
1630: PUSH
1631: CALL_OW 44
1635: ADD
1636: ST_TO_ADDR
// end ;
1637: GO 1605
1639: POP
1640: POP
// if HexInfo ( 61 , 29 ) = 0 then
1641: LD_INT 61
1643: PPUSH
1644: LD_INT 29
1646: PPUSH
1647: CALL_OW 428
1651: PUSH
1652: LD_INT 0
1654: EQUAL
1655: IFFALSE 1686
// begin bc_type := b_barracks ;
1657: LD_ADDR_OWVAR 42
1661: PUSH
1662: LD_INT 5
1664: ST_TO_ADDR
// bc_level := 6 ;
1665: LD_ADDR_OWVAR 43
1669: PUSH
1670: LD_INT 6
1672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1673: LD_INT 61
1675: PPUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_INT 5
1681: PPUSH
1682: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1686: LD_ADDR_VAR 0 13
1690: PUSH
1691: LD_INT 22
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 30
1703: PUSH
1704: LD_INT 31
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PPUSH
1715: CALL_OW 69
1719: ST_TO_ADDR
// for i in bun do
1720: LD_ADDR_VAR 0 2
1724: PUSH
1725: LD_VAR 0 13
1729: PUSH
1730: FOR_IN
1731: IFFALSE 1863
// begin x := GetX ( i ) ;
1733: LD_ADDR_VAR 0 3
1737: PUSH
1738: LD_VAR 0 2
1742: PPUSH
1743: CALL_OW 250
1747: ST_TO_ADDR
// y := GetY ( i ) ;
1748: LD_ADDR_VAR 0 4
1752: PUSH
1753: LD_VAR 0 2
1757: PPUSH
1758: CALL_OW 251
1762: ST_TO_ADDR
// d := GetDir ( i ) ;
1763: LD_ADDR_VAR 0 5
1767: PUSH
1768: LD_VAR 0 2
1772: PPUSH
1773: CALL_OW 254
1777: ST_TO_ADDR
// RemoveUnit ( i ) ;
1778: LD_VAR 0 2
1782: PPUSH
1783: CALL_OW 64
// bc_type := b_bunker ;
1787: LD_ADDR_OWVAR 42
1791: PUSH
1792: LD_INT 32
1794: ST_TO_ADDR
// bc_level := 6 ;
1795: LD_ADDR_OWVAR 43
1799: PUSH
1800: LD_INT 6
1802: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1803: LD_ADDR_VAR 0 6
1807: PUSH
1808: LD_VAR 0 3
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: LD_VAR 0 5
1822: PPUSH
1823: CALL_OW 47
1827: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1828: LD_VAR 0 6
1832: PPUSH
1833: LD_INT 5
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_VAR 0 2
1847: PUSH
1848: LD_INT 2
1850: MOD
1851: PUSH
1852: LD_INT 1
1854: PLUS
1855: ARRAY
1856: PPUSH
1857: CALL_OW 431
// end ;
1861: GO 1730
1863: POP
1864: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1865: LD_ADDR_VAR 0 9
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 30
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL_OW 69
1898: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1899: LD_ADDR_VAR 0 8
1903: PUSH
1904: LD_INT 22
1906: PUSH
1907: LD_INT 1
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 6
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 30
1929: PUSH
1930: LD_INT 7
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 30
1939: PUSH
1940: LD_INT 8
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PPUSH
1957: CALL_OW 69
1961: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1962: LD_ADDR_VAR 0 7
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 30
1979: PUSH
1980: LD_INT 3
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1996: LD_ADDR_VAR 0 12
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 30
2013: PUSH
2014: LD_INT 36
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 69
2029: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2030: LD_ADDR_VAR 0 13
2034: PUSH
2035: LD_INT 22
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 2
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 30
2060: PUSH
2061: LD_INT 32
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PPUSH
2077: CALL_OW 69
2081: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: LD_EXP 11
2091: PUSH
2092: LD_VAR 0 15
2096: ADD
2097: PUSH
2098: FOR_IN
2099: IFFALSE 2520
// begin placed := false ;
2101: LD_ADDR_VAR 0 11
2105: PUSH
2106: LD_INT 0
2108: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 257
2118: PUSH
2119: LD_INT 1
2121: EQUAL
2122: IFFALSE 2247
// begin if UnitFilter ( bun , [ f_empty ] ) then
2124: LD_VAR 0 13
2128: PPUSH
2129: LD_INT 58
2131: PUSH
2132: EMPTY
2133: LIST
2134: PPUSH
2135: CALL_OW 72
2139: IFFALSE 2178
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2141: LD_VAR 0 2
2145: PPUSH
2146: LD_VAR 0 13
2150: PPUSH
2151: LD_INT 58
2153: PUSH
2154: EMPTY
2155: LIST
2156: PPUSH
2157: CALL_OW 72
2161: PUSH
2162: LD_INT 1
2164: ARRAY
2165: PPUSH
2166: CALL_OW 52
// placed := true ;
2170: LD_ADDR_VAR 0 11
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// end ; if arm and not placed then
2178: LD_VAR 0 9
2182: PUSH
2183: LD_VAR 0 11
2187: NOT
2188: AND
2189: IFFALSE 2247
// begin for j in arm do
2191: LD_ADDR_VAR 0 10
2195: PUSH
2196: LD_VAR 0 9
2200: PUSH
2201: FOR_IN
2202: IFFALSE 2245
// if UnitsInside ( j ) < 6 then
2204: LD_VAR 0 10
2208: PPUSH
2209: CALL_OW 313
2213: PUSH
2214: LD_INT 6
2216: LESS
2217: IFFALSE 2243
// begin PlaceHumanInUnit ( i , j ) ;
2219: LD_VAR 0 2
2223: PPUSH
2224: LD_VAR 0 10
2228: PPUSH
2229: CALL_OW 52
// placed := true ;
2233: LD_ADDR_VAR 0 11
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// break ;
2241: GO 2245
// end ;
2243: GO 2201
2245: POP
2246: POP
// end ; end ; if GetClass ( i ) = 2 then
2247: LD_VAR 0 2
2251: PPUSH
2252: CALL_OW 257
2256: PUSH
2257: LD_INT 2
2259: EQUAL
2260: IFFALSE 2293
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 52
2269: PPUSH
2270: LD_INT 20
2272: PPUSH
2273: LD_INT 6
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 50
// placed := true ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// continue ;
2291: GO 2098
// end ; if GetClass ( i ) = 3 then
2293: LD_VAR 0 2
2297: PPUSH
2298: CALL_OW 257
2302: PUSH
2303: LD_INT 3
2305: EQUAL
2306: IFFALSE 2410
// if fac then
2308: LD_VAR 0 7
2312: IFFALSE 2410
// begin if ct then
2314: LD_VAR 0 12
2318: IFFALSE 2346
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: LD_VAR 0 12
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: CALL_OW 52
// placed := true ;
2338: LD_ADDR_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ST_TO_ADDR
// end ; if placed then
2346: LD_VAR 0 11
2350: IFFALSE 2354
// continue ;
2352: GO 2098
// for j in fac do
2354: LD_ADDR_VAR 0 10
2358: PUSH
2359: LD_VAR 0 7
2363: PUSH
2364: FOR_IN
2365: IFFALSE 2408
// if UnitsInside ( j ) < 6 then
2367: LD_VAR 0 10
2371: PPUSH
2372: CALL_OW 313
2376: PUSH
2377: LD_INT 6
2379: LESS
2380: IFFALSE 2406
// begin PlaceHumanInUnit ( i , j ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_VAR 0 10
2391: PPUSH
2392: CALL_OW 52
// placed := true ;
2396: LD_ADDR_VAR 0 11
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// break ;
2404: GO 2408
// end ;
2406: GO 2364
2408: POP
2409: POP
// end ; if GetClass ( i ) = 4 then
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL_OW 257
2419: PUSH
2420: LD_INT 4
2422: EQUAL
2423: IFFALSE 2487
// if lab then
2425: LD_VAR 0 8
2429: IFFALSE 2487
// begin for j in lab do
2431: LD_ADDR_VAR 0 10
2435: PUSH
2436: LD_VAR 0 8
2440: PUSH
2441: FOR_IN
2442: IFFALSE 2485
// if UnitsInside ( j ) < 6 then
2444: LD_VAR 0 10
2448: PPUSH
2449: CALL_OW 313
2453: PUSH
2454: LD_INT 6
2456: LESS
2457: IFFALSE 2483
// begin PlaceHumanInUnit ( i , j ) ;
2459: LD_VAR 0 2
2463: PPUSH
2464: LD_VAR 0 10
2468: PPUSH
2469: CALL_OW 52
// placed := true ;
2473: LD_ADDR_VAR 0 11
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// break ;
2481: GO 2485
// end ;
2483: GO 2441
2485: POP
2486: POP
// end ; if not placed then
2487: LD_VAR 0 11
2491: NOT
2492: IFFALSE 2518
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_INT 5
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: CALL_OW 49
// ComHold ( i ) ;
2509: LD_VAR 0 2
2513: PPUSH
2514: CALL_OW 140
// end ; end ;
2518: GO 2098
2520: POP
2521: POP
// if ct then
2522: LD_VAR 0 12
2526: IFFALSE 2630
// if UnitsInside ( ct [ 1 ] ) then
2528: LD_VAR 0 12
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: CALL_OW 313
2541: IFFALSE 2630
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2543: LD_ADDR_VAR 0 2
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_INT 1
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 33
2560: PUSH
2561: LD_INT 2
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL_OW 69
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2628
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2580: LD_VAR 0 2
2584: PPUSH
2585: LD_VAR 0 12
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: CALL_OW 313
2598: PUSH
2599: LD_INT 1
2601: PPUSH
2602: LD_VAR 0 12
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 313
2615: PPUSH
2616: CALL_OW 12
2620: ARRAY
2621: PPUSH
2622: CALL_OW 135
2626: GO 2577
2628: POP
2629: POP
// end ; end ;
2630: LD_VAR 0 1
2634: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2635: LD_INT 0
2637: PPUSH
2638: PPUSH
2639: PPUSH
2640: PPUSH
2641: PPUSH
2642: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2643: LD_INT 71
2645: PPUSH
2646: LD_INT 5
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2656: LD_ADDR_VAR 0 2
2660: PUSH
2661: LD_STRING GammaBase
2663: PPUSH
2664: EMPTY
2665: PPUSH
2666: CALL_OW 30
2670: ST_TO_ADDR
// if not blist then
2671: LD_VAR 0 2
2675: NOT
2676: IFFALSE 2716
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 1
2685: PUSH
2686: LD_INT 52
2688: PUSH
2689: LD_INT 12
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: LD_INT 0
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: ST_TO_ADDR
// uc_side := 1 ;
2716: LD_ADDR_OWVAR 20
2720: PUSH
2721: LD_INT 1
2723: ST_TO_ADDR
// uc_nation := 1 ;
2724: LD_ADDR_OWVAR 21
2728: PUSH
2729: LD_INT 1
2731: ST_TO_ADDR
// bc_kind1 := - 1 ;
2732: LD_ADDR_OWVAR 44
2736: PUSH
2737: LD_INT 1
2739: NEG
2740: ST_TO_ADDR
// bc_kind2 := - 1 ;
2741: LD_ADDR_OWVAR 45
2745: PUSH
2746: LD_INT 1
2748: NEG
2749: ST_TO_ADDR
// for i in blist do
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_VAR 0 2
2759: PUSH
2760: FOR_IN
2761: IFFALSE 3037
// begin bc_type := i [ 1 ] ;
2763: LD_ADDR_OWVAR 42
2767: PUSH
2768: LD_VAR 0 3
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2777: LD_ADDR_OWVAR 43
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 5
2789: ARRAY
2790: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2791: LD_OWVAR 42
2795: PUSH
2796: LD_INT 6
2798: PUSH
2799: LD_INT 7
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: IN
2806: IFFALSE 2872
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2808: LD_STRING 06_remoteVehs_1
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 30
2818: NOT
2819: IFFALSE 2847
// begin bc_type := b_lab_full ;
2821: LD_ADDR_OWVAR 42
2825: PUSH
2826: LD_INT 8
2828: ST_TO_ADDR
// bc_kind1 := 10 ;
2829: LD_ADDR_OWVAR 44
2833: PUSH
2834: LD_INT 10
2836: ST_TO_ADDR
// bc_kind2 := 15 ;
2837: LD_ADDR_OWVAR 45
2841: PUSH
2842: LD_INT 15
2844: ST_TO_ADDR
// end else
2845: GO 2872
// begin bc_type := b_lab_half ;
2847: LD_ADDR_OWVAR 42
2851: PUSH
2852: LD_INT 7
2854: ST_TO_ADDR
// bc_kind1 := 10 ;
2855: LD_ADDR_OWVAR 44
2859: PUSH
2860: LD_INT 10
2862: ST_TO_ADDR
// bc_kind2 := - 1 ;
2863: LD_ADDR_OWVAR 45
2867: PUSH
2868: LD_INT 1
2870: NEG
2871: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2872: LD_OWVAR 42
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: IFFALSE 2890
// bc_type := b_factory ;
2882: LD_ADDR_OWVAR 42
2886: PUSH
2887: LD_INT 3
2889: ST_TO_ADDR
// if bc_type = b_depot then
2890: LD_OWVAR 42
2894: PUSH
2895: LD_INT 0
2897: EQUAL
2898: IFFALSE 2947
// begin bc_type := b_warehouse ;
2900: LD_ADDR_OWVAR 42
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2908: LD_ADDR_EXP 37
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PUSH
2927: LD_INT 3
2929: ARRAY
2930: PPUSH
2931: LD_VAR 0 3
2935: PUSH
2936: LD_INT 4
2938: ARRAY
2939: PPUSH
2940: CALL_OW 47
2944: ST_TO_ADDR
// continue ;
2945: GO 2760
// end ; if bc_type = b_armoury then
2947: LD_OWVAR 42
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2965
// bc_type = b_barracks ;
2957: LD_ADDR_OWVAR 42
2961: PUSH
2962: LD_INT 5
2964: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2965: LD_ADDR_VAR 0 4
2969: PUSH
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 3
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 4
2995: ARRAY
2996: PPUSH
2997: CALL_OW 47
3001: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3002: LD_VAR 0 4
3006: PPUSH
3007: CALL_OW 266
3011: PUSH
3012: LD_INT 32
3014: EQUAL
3015: IFFALSE 3035
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3017: LD_VAR 0 4
3021: PPUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_INT 7
3029: ARRAY
3030: PPUSH
3031: CALL_OW 431
// end ;
3035: GO 2760
3037: POP
3038: POP
// if not amDepot then
3039: LD_EXP 37
3043: NOT
3044: IFFALSE 3081
// begin bc_type := b_warehouse ;
3046: LD_ADDR_OWVAR 42
3050: PUSH
3051: LD_INT 1
3053: ST_TO_ADDR
// bc_level := 6 ;
3054: LD_ADDR_OWVAR 43
3058: PUSH
3059: LD_INT 6
3061: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3062: LD_ADDR_EXP 37
3066: PUSH
3067: LD_INT 52
3069: PPUSH
3070: LD_INT 12
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: CALL_OW 47
3080: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3081: LD_EXP 37
3085: PPUSH
3086: LD_STRING gamma
3088: PPUSH
3089: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3093: LD_EXP 37
3097: PPUSH
3098: CALL_OW 274
3102: PPUSH
3103: LD_INT 1
3105: PPUSH
3106: LD_INT 500
3108: PUSH
3109: LD_INT 420
3111: PUSH
3112: LD_INT 350
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_OWVAR 67
3124: ARRAY
3125: PPUSH
3126: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3130: LD_EXP 37
3134: PPUSH
3135: CALL_OW 274
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: LD_INT 200
3145: PPUSH
3146: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3150: LD_INT 22
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: IFFALSE 3426
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3180: LD_ADDR_VAR 0 4
3184: PUSH
3185: LD_INT 22
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 30
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 1
3216: ARRAY
3217: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3218: LD_ADDR_VAR 0 6
3222: PUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: CALL_OW 250
3232: PPUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: CALL_OW 251
3242: PPUSH
3243: LD_VAR 0 4
3247: PPUSH
3248: CALL_OW 254
3252: PPUSH
3253: CALL 77747 0 3
3257: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3258: LD_ADDR_VAR 0 2
3262: PUSH
3263: LD_INT 19
3265: PUSH
3266: LD_INT 17
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3273: LD_STRING 06_remoteVehs_1
3275: PPUSH
3276: LD_INT 0
3278: PPUSH
3279: CALL_OW 30
3283: IFFALSE 3306
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3285: LD_ADDR_VAR 0 2
3289: PUSH
3290: LD_VAR 0 2
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 22
3300: PPUSH
3301: CALL_OW 2
3305: ST_TO_ADDR
// for i in tmp do
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_VAR 0 6
3315: PUSH
3316: FOR_IN
3317: IFFALSE 3424
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3319: LD_VAR 0 3
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: LD_VAR 0 3
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: CALL_OW 428
3341: PUSH
3342: LD_INT 0
3344: EQUAL
3345: IFFALSE 3422
// begin bc_type := blist [ 1 ] ;
3347: LD_ADDR_OWVAR 42
3351: PUSH
3352: LD_VAR 0 2
3356: PUSH
3357: LD_INT 1
3359: ARRAY
3360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3361: LD_VAR 0 3
3365: PUSH
3366: LD_INT 1
3368: ARRAY
3369: PPUSH
3370: LD_VAR 0 3
3374: PUSH
3375: LD_INT 2
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 3
3383: PUSH
3384: LD_INT 3
3386: ARRAY
3387: PPUSH
3388: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3392: LD_ADDR_VAR 0 2
3396: PUSH
3397: LD_VAR 0 2
3401: PPUSH
3402: LD_INT 1
3404: PPUSH
3405: CALL_OW 3
3409: ST_TO_ADDR
// if blist = 0 then
3410: LD_VAR 0 2
3414: PUSH
3415: LD_INT 0
3417: EQUAL
3418: IFFALSE 3422
// break ;
3420: GO 3424
// end ;
3422: GO 3316
3424: POP
3425: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3426: LD_STRING 06_remoteVehs_1
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 30
3436: IFFALSE 3895
// begin bc_type = 36 ;
3438: LD_ADDR_OWVAR 42
3442: PUSH
3443: LD_INT 36
3445: ST_TO_ADDR
// bc_level = 4 ;
3446: LD_ADDR_OWVAR 43
3450: PUSH
3451: LD_INT 4
3453: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3454: LD_EXP 37
3458: PPUSH
3459: LD_INT 36
3461: PPUSH
3462: LD_INT 62
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 3
3470: PPUSH
3471: LD_INT 0
3473: PPUSH
3474: CALL 16964 0 6
3478: PUSH
3479: LD_INT 92
3481: PUSH
3482: LD_INT 62
3484: PUSH
3485: LD_INT 12
3487: PUSH
3488: LD_INT 3
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PPUSH
3497: CALL_OW 69
3501: NOT
3502: AND
3503: IFFALSE 3520
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3505: LD_INT 62
3507: PPUSH
3508: LD_INT 12
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: CALL_OW 47
3518: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3520: LD_EXP 37
3524: PPUSH
3525: LD_INT 36
3527: PPUSH
3528: LD_INT 37
3530: PPUSH
3531: LD_INT 18
3533: PPUSH
3534: LD_INT 2
3536: PPUSH
3537: LD_INT 0
3539: PPUSH
3540: CALL 16964 0 6
3544: PUSH
3545: LD_INT 92
3547: PUSH
3548: LD_INT 37
3550: PUSH
3551: LD_INT 18
3553: PUSH
3554: LD_INT 3
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PPUSH
3563: CALL_OW 69
3567: NOT
3568: AND
3569: IFFALSE 3586
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3571: LD_INT 37
3573: PPUSH
3574: LD_INT 18
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 47
3584: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3586: LD_EXP 37
3590: PPUSH
3591: LD_INT 36
3593: PPUSH
3594: LD_INT 66
3596: PPUSH
3597: LD_INT 14
3599: PPUSH
3600: LD_INT 4
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 16964 0 6
3610: PUSH
3611: LD_INT 92
3613: PUSH
3614: LD_INT 66
3616: PUSH
3617: LD_INT 14
3619: PUSH
3620: LD_INT 3
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: CALL_OW 69
3633: NOT
3634: AND
3635: IFFALSE 3652
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3637: LD_INT 66
3639: PPUSH
3640: LD_INT 14
3642: PPUSH
3643: LD_INT 4
3645: PPUSH
3646: CALL_OW 47
3650: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3652: LD_EXP 37
3656: PPUSH
3657: LD_INT 36
3659: PPUSH
3660: LD_INT 74
3662: PPUSH
3663: LD_INT 26
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: LD_INT 0
3671: PPUSH
3672: CALL 16964 0 6
3676: IFFALSE 3691
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3678: LD_INT 74
3680: PPUSH
3681: LD_INT 26
3683: PPUSH
3684: LD_INT 4
3686: PPUSH
3687: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3691: LD_INT 22
3693: PUSH
3694: LD_INT 1
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 30
3703: PUSH
3704: LD_INT 36
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: NOT
3720: IFFALSE 3724
// exit ;
3722: GO 3895
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: DOUBLE
3730: LD_INT 1
3732: DEC
3733: ST_TO_ADDR
3734: LD_INT 3
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: PUSH
3748: LD_OWVAR 67
3752: ARRAY
3753: PUSH
3754: FOR_TO
3755: IFFALSE 3893
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3757: LD_ADDR_OWVAR 37
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 3
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 1
3777: PPUSH
3778: LD_INT 2
3780: PPUSH
3781: CALL_OW 12
3785: ARRAY
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_OWVAR 67
3799: ARRAY
3800: ST_TO_ADDR
// vc_engine = 1 ;
3801: LD_ADDR_OWVAR 39
3805: PUSH
3806: LD_INT 1
3808: ST_TO_ADDR
// vc_control = 2 ;
3809: LD_ADDR_OWVAR 38
3813: PUSH
3814: LD_INT 2
3816: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3817: LD_ADDR_OWVAR 40
3821: PUSH
3822: LD_INT 3
3824: PUSH
3825: LD_INT 4
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 3
3841: PPUSH
3842: CALL_OW 12
3846: ARRAY
3847: ST_TO_ADDR
// veh = CreateVehicle ;
3848: LD_ADDR_VAR 0 5
3852: PUSH
3853: CALL_OW 45
3857: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_INT 4
3865: PPUSH
3866: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_INT 56
3877: PPUSH
3878: LD_INT 17
3880: PPUSH
3881: LD_INT 9
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 50
// end ;
3891: GO 3754
3893: POP
3894: POP
// end ; end ;
3895: LD_VAR 0 1
3899: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3900: LD_INT 0
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
// uc_side = 1 ;
3906: LD_ADDR_OWVAR 20
3910: PUSH
3911: LD_INT 1
3913: ST_TO_ADDR
// uc_nation = 1 ;
3914: LD_ADDR_OWVAR 21
3918: PUSH
3919: LD_INT 1
3921: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3922: LD_ADDR_EXP 14
3926: PUSH
3927: LD_STRING Denis
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_STRING 06c_
3935: PPUSH
3936: CALL 44122 0 3
3940: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3941: LD_EXP 14
3945: PPUSH
3946: LD_INT 4
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3956: LD_ADDR_EXP 15
3960: PUSH
3961: LD_STRING Joan
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: LD_STRING 06c_
3969: PPUSH
3970: CALL 44122 0 3
3974: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3975: LD_EXP 15
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: LD_INT 0
3985: PPUSH
3986: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3990: LD_STRING GladstoneIn07
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: CALL_OW 30
4000: NOT
4001: IFFALSE 4075
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4003: LD_ADDR_EXP 8
4007: PUSH
4008: LD_STRING Gladstone
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING 06c_
4016: PPUSH
4017: CALL 44122 0 3
4021: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4022: LD_EXP 8
4026: NOT
4027: PUSH
4028: LD_STRING GladstoneStayInDelta
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 30
4038: AND
4039: IFFALSE 4060
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4041: LD_ADDR_EXP 8
4045: PUSH
4046: LD_STRING Gladstone
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: LD_STRING 05_
4054: PPUSH
4055: CALL 44122 0 3
4059: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4060: LD_EXP 8
4064: PPUSH
4065: LD_INT 4
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4075: LD_STRING LisaStayInDelta
4077: PPUSH
4078: LD_INT 0
4080: PPUSH
4081: CALL_OW 30
4085: IFFALSE 4121
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4087: LD_ADDR_EXP 6
4091: PUSH
4092: LD_STRING Lisa
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: LD_STRING 05_
4100: PPUSH
4101: CALL 44122 0 3
4105: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4106: LD_EXP 6
4110: PPUSH
4111: LD_INT 4
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4121: LD_STRING BobbyStayInDelta
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 30
4131: IFFALSE 4167
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_STRING Bobby
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_STRING 05_
4146: PPUSH
4147: CALL 44122 0 3
4151: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4152: LD_EXP 4
4156: PPUSH
4157: LD_INT 4
4159: PPUSH
4160: LD_INT 0
4162: PPUSH
4163: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4167: LD_STRING CyrusStayInDelta
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL_OW 30
4177: IFFALSE 4213
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4179: LD_ADDR_EXP 5
4183: PUSH
4184: LD_STRING Cyrus
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: LD_STRING 05_
4192: PPUSH
4193: CALL 44122 0 3
4197: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4198: LD_EXP 5
4202: PPUSH
4203: LD_INT 4
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4213: LD_STRING BrownStayInDelta
4215: PPUSH
4216: LD_INT 0
4218: PPUSH
4219: CALL_OW 30
4223: IFFALSE 4259
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4225: LD_ADDR_EXP 2
4229: PUSH
4230: LD_STRING Brown
4232: PPUSH
4233: LD_INT 1
4235: PPUSH
4236: LD_STRING 05_
4238: PPUSH
4239: CALL 44122 0 3
4243: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4244: LD_EXP 2
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_INT 0
4254: PPUSH
4255: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4259: LD_STRING DonaldsonStayInDelta
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL_OW 30
4269: IFFALSE 4305
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4271: LD_ADDR_EXP 3
4275: PUSH
4276: LD_STRING Donaldson
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_STRING 05_
4284: PPUSH
4285: CALL 44122 0 3
4289: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4290: LD_EXP 3
4294: PPUSH
4295: LD_INT 4
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4305: LD_ADDR_VAR 0 4
4309: PUSH
4310: LD_STRING OthersStayInDelta
4312: PPUSH
4313: CALL_OW 31
4317: ST_TO_ADDR
// if other > 2 then
4318: LD_VAR 0 4
4322: PUSH
4323: LD_INT 2
4325: GREATER
4326: IFFALSE 4371
// begin for j = 1 to 2 do
4328: LD_ADDR_VAR 0 3
4332: PUSH
4333: DOUBLE
4334: LD_INT 1
4336: DEC
4337: ST_TO_ADDR
4338: LD_INT 2
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4367
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4344: LD_VAR 0 4
4348: PUSH
4349: LD_VAR 0 3
4353: ARRAY
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
4365: GO 4341
4367: POP
4368: POP
// end else
4369: GO 4414
// begin for j = 1 to other do
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: DOUBLE
4377: LD_INT 1
4379: DEC
4380: ST_TO_ADDR
4381: LD_VAR 0 4
4385: PUSH
4386: FOR_TO
4387: IFFALSE 4412
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4389: LD_VAR 0 4
4393: PUSH
4394: LD_VAR 0 3
4398: ARRAY
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 49
4410: GO 4386
4412: POP
4413: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4414: LD_ADDR_VAR 0 4
4418: PUSH
4419: LD_STRING 06_other_apemans
4421: PPUSH
4422: CALL_OW 31
4426: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4427: LD_VAR 0 4
4431: PUSH
4432: LD_INT 5
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_OWVAR 67
4450: ARRAY
4451: GREATEREQUAL
4452: IFFALSE 4481
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 5
4461: PUSH
4462: LD_INT 4
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: ST_TO_ADDR
4479: GO 4491
// j := other ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: LD_VAR 0 4
4490: ST_TO_ADDR
// for i = 1 to j do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 3
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4532
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4509: LD_VAR 0 4
4513: PUSH
4514: LD_VAR 0 2
4518: ARRAY
4519: PPUSH
4520: LD_INT 4
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
4530: GO 4506
4532: POP
4533: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 22
4539: PUSH
4540: LD_INT 1
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 21
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 70
4565: PPUSH
4566: LD_INT 53
4568: PPUSH
4569: LD_INT 19
4571: PPUSH
4572: CALL_OW 111
// firstAttack = 1 ;
4576: LD_ADDR_EXP 33
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// end ;
4584: LD_VAR 0 1
4588: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4589: LD_INT 0
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4600: LD_ADDR_VAR 0 8
4604: PUSH
4605: LD_STRING 07_vehicles
4607: PPUSH
4608: EMPTY
4609: PPUSH
4610: CALL_OW 30
4614: ST_TO_ADDR
// macmilan_squad := [ ] ;
4615: LD_ADDR_EXP 42
4619: PUSH
4620: EMPTY
4621: ST_TO_ADDR
// tmp_vehs := [ ] ;
4622: LD_ADDR_VAR 0 7
4626: PUSH
4627: EMPTY
4628: ST_TO_ADDR
// uc_side := 1 ;
4629: LD_ADDR_OWVAR 20
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// uc_nation := 1 ;
4637: LD_ADDR_OWVAR 21
4641: PUSH
4642: LD_INT 1
4644: ST_TO_ADDR
// if vehicles then
4645: LD_VAR 0 8
4649: IFFALSE 4808
// begin k := 1 ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_VAR 0 8
4673: PUSH
4674: LD_INT 4
4676: DIV
4677: PUSH
4678: FOR_TO
4679: IFFALSE 4806
// begin vc_chassis = vehicles [ k ] ;
4681: LD_ADDR_OWVAR 37
4685: PUSH
4686: LD_VAR 0 8
4690: PUSH
4691: LD_VAR 0 3
4695: ARRAY
4696: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4697: LD_ADDR_OWVAR 39
4701: PUSH
4702: LD_VAR 0 8
4706: PUSH
4707: LD_VAR 0 3
4711: PUSH
4712: LD_INT 1
4714: PLUS
4715: ARRAY
4716: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4717: LD_ADDR_OWVAR 38
4721: PUSH
4722: LD_VAR 0 8
4726: PUSH
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 2
4734: PLUS
4735: ARRAY
4736: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4737: LD_ADDR_OWVAR 40
4741: PUSH
4742: LD_VAR 0 8
4746: PUSH
4747: LD_VAR 0 3
4751: PUSH
4752: LD_INT 3
4754: PLUS
4755: ARRAY
4756: ST_TO_ADDR
// k := k + 4 ;
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 4
4769: PLUS
4770: ST_TO_ADDR
// veh := CreateVehicle ;
4771: LD_ADDR_VAR 0 9
4775: PUSH
4776: CALL_OW 45
4780: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4781: LD_ADDR_VAR 0 7
4785: PUSH
4786: LD_VAR 0 7
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: LD_VAR 0 9
4798: PPUSH
4799: CALL_OW 2
4803: ST_TO_ADDR
// end ;
4804: GO 4678
4806: POP
4807: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4808: LD_ADDR_EXP 1
4812: PUSH
4813: LD_STRING JMM
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: LD_EXP 44
4823: PPUSH
4824: CALL 44122 0 3
4828: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4829: LD_EXP 12
4833: PUSH
4834: LD_INT 1
4836: EQUAL
4837: PUSH
4838: LD_EXP 12
4842: PUSH
4843: LD_INT 3
4845: EQUAL
4846: OR
4847: PUSH
4848: LD_EXP 2
4852: NOT
4853: AND
4854: IFFALSE 4906
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4856: LD_ADDR_EXP 2
4860: PUSH
4861: LD_STRING Brown
4863: PPUSH
4864: LD_INT 1
4866: PPUSH
4867: LD_EXP 44
4871: PPUSH
4872: CALL 44122 0 3
4876: ST_TO_ADDR
// if Brown then
4877: LD_EXP 2
4881: IFFALSE 4906
// tmp := Insert ( tmp , 1 , Brown ) ;
4883: LD_ADDR_VAR 0 6
4887: PUSH
4888: LD_VAR 0 6
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_EXP 2
4900: PPUSH
4901: CALL_OW 2
4905: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4906: LD_EXP 12
4910: PUSH
4911: LD_INT 2
4913: EQUAL
4914: PUSH
4915: LD_EXP 12
4919: PUSH
4920: LD_INT 3
4922: EQUAL
4923: OR
4924: PUSH
4925: LD_EXP 3
4929: NOT
4930: AND
4931: IFFALSE 4983
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4933: LD_ADDR_EXP 3
4937: PUSH
4938: LD_STRING Donaldson
4940: PPUSH
4941: LD_INT 1
4943: PPUSH
4944: LD_EXP 44
4948: PPUSH
4949: CALL 44122 0 3
4953: ST_TO_ADDR
// if Donaldson then
4954: LD_EXP 3
4958: IFFALSE 4983
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4960: LD_ADDR_VAR 0 6
4964: PUSH
4965: LD_VAR 0 6
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_EXP 3
4977: PPUSH
4978: CALL_OW 2
4982: ST_TO_ADDR
// end ; if not Bobby then
4983: LD_EXP 4
4987: NOT
4988: IFFALSE 5040
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
4990: LD_ADDR_EXP 4
4994: PUSH
4995: LD_STRING Bobby
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: LD_EXP 44
5005: PPUSH
5006: CALL 44122 0 3
5010: ST_TO_ADDR
// if Bobby then
5011: LD_EXP 4
5015: IFFALSE 5040
// tmp := Insert ( tmp , 1 , Bobby ) ;
5017: LD_ADDR_VAR 0 6
5021: PUSH
5022: LD_VAR 0 6
5026: PPUSH
5027: LD_INT 1
5029: PPUSH
5030: LD_EXP 4
5034: PPUSH
5035: CALL_OW 2
5039: ST_TO_ADDR
// end ; if not Cyrus then
5040: LD_EXP 5
5044: NOT
5045: IFFALSE 5097
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5047: LD_ADDR_EXP 5
5051: PUSH
5052: LD_STRING Cyrus
5054: PPUSH
5055: LD_INT 1
5057: PPUSH
5058: LD_EXP 44
5062: PPUSH
5063: CALL 44122 0 3
5067: ST_TO_ADDR
// if Cyrus then
5068: LD_EXP 5
5072: IFFALSE 5097
// tmp := Insert ( tmp , 1 , Cyrus ) ;
5074: LD_ADDR_VAR 0 6
5078: PUSH
5079: LD_VAR 0 6
5083: PPUSH
5084: LD_INT 1
5086: PPUSH
5087: LD_EXP 5
5091: PPUSH
5092: CALL_OW 2
5096: ST_TO_ADDR
// end ; if not Lisa then
5097: LD_EXP 6
5101: NOT
5102: IFFALSE 5154
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5104: LD_ADDR_EXP 6
5108: PUSH
5109: LD_STRING Lisa
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: LD_EXP 44
5119: PPUSH
5120: CALL 44122 0 3
5124: ST_TO_ADDR
// if Lisa then
5125: LD_EXP 6
5129: IFFALSE 5154
// tmp := Insert ( tmp , 1 , Lisa ) ;
5131: LD_ADDR_VAR 0 6
5135: PUSH
5136: LD_VAR 0 6
5140: PPUSH
5141: LD_INT 1
5143: PPUSH
5144: LD_EXP 6
5148: PPUSH
5149: CALL_OW 2
5153: ST_TO_ADDR
// end ; if not Frank then
5154: LD_EXP 7
5158: NOT
5159: IFFALSE 5211
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5161: LD_ADDR_EXP 7
5165: PUSH
5166: LD_STRING Frank
5168: PPUSH
5169: LD_INT 1
5171: PPUSH
5172: LD_EXP 44
5176: PPUSH
5177: CALL 44122 0 3
5181: ST_TO_ADDR
// if Frank then
5182: LD_EXP 7
5186: IFFALSE 5211
// tmp := Insert ( tmp , 1 , Frank ) ;
5188: LD_ADDR_VAR 0 6
5192: PUSH
5193: LD_VAR 0 6
5197: PPUSH
5198: LD_INT 1
5200: PPUSH
5201: LD_EXP 7
5205: PPUSH
5206: CALL_OW 2
5210: ST_TO_ADDR
// end ; if not Kikuchi then
5211: LD_EXP 9
5215: NOT
5216: IFFALSE 5268
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5218: LD_ADDR_EXP 9
5222: PUSH
5223: LD_STRING Kikuchi
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: LD_EXP 44
5233: PPUSH
5234: CALL 44122 0 3
5238: ST_TO_ADDR
// if Kikuchi then
5239: LD_EXP 9
5243: IFFALSE 5268
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5245: LD_ADDR_VAR 0 6
5249: PUSH
5250: LD_VAR 0 6
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: LD_EXP 9
5262: PPUSH
5263: CALL_OW 2
5267: ST_TO_ADDR
// end ; if not Gladstone then
5268: LD_EXP 8
5272: NOT
5273: IFFALSE 5325
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5275: LD_ADDR_EXP 8
5279: PUSH
5280: LD_STRING Gladstone
5282: PPUSH
5283: LD_INT 1
5285: PPUSH
5286: LD_EXP 44
5290: PPUSH
5291: CALL 44122 0 3
5295: ST_TO_ADDR
// if Gladstone then
5296: LD_EXP 8
5300: IFFALSE 5325
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5302: LD_ADDR_VAR 0 6
5306: PUSH
5307: LD_VAR 0 6
5311: PPUSH
5312: LD_INT 1
5314: PPUSH
5315: LD_EXP 8
5319: PPUSH
5320: CALL_OW 2
5324: ST_TO_ADDR
// end ; if not Khatam then
5325: LD_EXP 10
5329: NOT
5330: IFFALSE 5382
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5332: LD_ADDR_EXP 10
5336: PUSH
5337: LD_STRING Khatam
5339: PPUSH
5340: LD_INT 1
5342: PPUSH
5343: LD_EXP 44
5347: PPUSH
5348: CALL 44122 0 3
5352: ST_TO_ADDR
// if Khatam then
5353: LD_EXP 10
5357: IFFALSE 5382
// tmp := Insert ( tmp , 1 , Khatam ) ;
5359: LD_ADDR_VAR 0 6
5363: PUSH
5364: LD_VAR 0 6
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_EXP 10
5376: PPUSH
5377: CALL_OW 2
5381: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_STRING 07c_others
5389: PPUSH
5390: CALL_OW 31
5394: ST_TO_ADDR
// macmilan_squad := others ;
5395: LD_ADDR_EXP 42
5399: PUSH
5400: LD_VAR 0 5
5404: ST_TO_ADDR
// if others then
5405: LD_VAR 0 5
5409: IFFALSE 5497
// for i in others do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 5
5420: PUSH
5421: FOR_IN
5422: IFFALSE 5495
// if GetClass ( i ) = 3 then
5424: LD_VAR 0 2
5428: PPUSH
5429: CALL_OW 257
5433: PUSH
5434: LD_INT 3
5436: EQUAL
5437: IFFALSE 5464
// tmp := Insert ( tmp , 1 , i ) else
5439: LD_ADDR_VAR 0 6
5443: PUSH
5444: LD_VAR 0 6
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_VAR 0 2
5456: PPUSH
5457: CALL_OW 2
5461: ST_TO_ADDR
5462: GO 5493
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_VAR 0 6
5473: PPUSH
5474: LD_VAR 0 6
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: PPUSH
5483: LD_VAR 0 2
5487: PPUSH
5488: CALL_OW 2
5492: ST_TO_ADDR
5493: GO 5421
5495: POP
5496: POP
// wait ( 0 0$1 ) ;
5497: LD_INT 35
5499: PPUSH
5500: CALL_OW 67
// for i in tmp do
5504: LD_ADDR_VAR 0 2
5508: PUSH
5509: LD_VAR 0 6
5513: PUSH
5514: FOR_IN
5515: IFFALSE 5667
// begin SetDir ( i , 3 ) ;
5517: LD_VAR 0 2
5521: PPUSH
5522: LD_INT 3
5524: PPUSH
5525: CALL_OW 233
// if tmp_vehs then
5529: LD_VAR 0 7
5533: IFFALSE 5608
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5535: LD_VAR 0 7
5539: PUSH
5540: LD_INT 1
5542: ARRAY
5543: PPUSH
5544: LD_INT 3
5546: PPUSH
5547: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5551: LD_VAR 0 7
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: LD_INT 4
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5570: LD_VAR 0 2
5574: PPUSH
5575: LD_VAR 0 7
5579: PUSH
5580: LD_INT 1
5582: ARRAY
5583: PPUSH
5584: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5588: LD_ADDR_VAR 0 7
5592: PUSH
5593: LD_VAR 0 7
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: CALL_OW 3
5605: ST_TO_ADDR
// end else
5606: GO 5623
// PlaceUnitArea ( i , GammaSupport , false ) ;
5608: LD_VAR 0 2
5612: PPUSH
5613: LD_INT 4
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5623: LD_VAR 0 2
5627: PPUSH
5628: LD_INT 77
5630: PPUSH
5631: LD_INT 16
5633: PPUSH
5634: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5638: LD_INT 35
5640: PPUSH
5641: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5645: LD_INT 4
5647: PPUSH
5648: LD_INT 22
5650: PUSH
5651: LD_INT 1
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 70
5662: NOT
5663: IFFALSE 5638
// end ;
5665: GO 5514
5667: POP
5668: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5669: LD_EXP 1
5673: PPUSH
5674: LD_INT 4
5676: PPUSH
5677: LD_INT 0
5679: PPUSH
5680: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5684: LD_EXP 1
5688: PPUSH
5689: LD_INT 77
5691: PPUSH
5692: LD_INT 16
5694: PPUSH
5695: CALL_OW 111
// end ;
5699: LD_VAR 0 1
5703: RET
// export function PrepareSikorsky ; begin
5704: LD_INT 0
5706: PPUSH
// uc_side = 4 ;
5707: LD_ADDR_OWVAR 20
5711: PUSH
5712: LD_INT 4
5714: ST_TO_ADDR
// uc_nation = 1 ;
5715: LD_ADDR_OWVAR 21
5719: PUSH
5720: LD_INT 1
5722: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5723: LD_ADDR_EXP 16
5727: PUSH
5728: LD_STRING Sikorski
5730: PPUSH
5731: LD_INT 0
5733: PPUSH
5734: LD_STRING 
5736: PPUSH
5737: CALL 44122 0 3
5741: ST_TO_ADDR
// vc_engine = 1 ;
5742: LD_ADDR_OWVAR 39
5746: PUSH
5747: LD_INT 1
5749: ST_TO_ADDR
// vc_control = 1 ;
5750: LD_ADDR_OWVAR 38
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5758: LD_ADDR_OWVAR 40
5762: PUSH
5763: LD_INT 5
5765: PUSH
5766: LD_INT 3
5768: PUSH
5769: LD_INT 4
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: LIST
5776: PUSH
5777: LD_OWVAR 67
5781: ARRAY
5782: ST_TO_ADDR
// vc_chassis = 4 ;
5783: LD_ADDR_OWVAR 37
5787: PUSH
5788: LD_INT 4
5790: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5791: LD_ADDR_EXP 17
5795: PUSH
5796: CALL_OW 45
5800: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5801: LD_EXP 17
5805: PPUSH
5806: LD_INT 3
5808: PPUSH
5809: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5813: LD_INT 35
5815: PPUSH
5816: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5820: LD_EXP 17
5824: PPUSH
5825: LD_INT 18
5827: PPUSH
5828: LD_INT 5
5830: PPUSH
5831: LD_INT 0
5833: PPUSH
5834: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5838: LD_EXP 17
5842: PPUSH
5843: CALL_OW 305
5847: IFFALSE 5813
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5849: LD_EXP 16
5853: PPUSH
5854: LD_EXP 17
5858: PPUSH
5859: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5863: LD_EXP 17
5867: PPUSH
5868: LD_INT 5
5870: PPUSH
5871: CALL_OW 113
// end ;
5875: LD_VAR 0 1
5879: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// InitHc ;
5886: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 ] [ Difficulty ] do
5890: LD_ADDR_VAR 0 2
5894: PUSH
5895: DOUBLE
5896: LD_INT 1
5898: DEC
5899: ST_TO_ADDR
5900: LD_INT 5
5902: PUSH
5903: LD_INT 4
5905: PUSH
5906: LD_INT 4
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: PUSH
5914: LD_OWVAR 67
5918: ARRAY
5919: PUSH
5920: FOR_TO
5921: IFFALSE 6037
// begin uc_side = 4 ;
5923: LD_ADDR_OWVAR 20
5927: PUSH
5928: LD_INT 4
5930: ST_TO_ADDR
// uc_nation = 1 ;
5931: LD_ADDR_OWVAR 21
5935: PUSH
5936: LD_INT 1
5938: ST_TO_ADDR
// hc_name =  ;
5939: LD_ADDR_OWVAR 26
5943: PUSH
5944: LD_STRING 
5946: ST_TO_ADDR
// hc_gallery =  ;
5947: LD_ADDR_OWVAR 33
5951: PUSH
5952: LD_STRING 
5954: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5955: LD_INT 0
5957: PPUSH
5958: LD_INT 1
5960: PPUSH
5961: LD_INT 5
5963: PPUSH
5964: LD_INT 8
5966: PPUSH
5967: CALL_OW 12
5971: PPUSH
5972: CALL_OW 380
// un = CreateHuman ;
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: CALL_OW 44
5985: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5986: LD_VAR 0 3
5990: PPUSH
5991: LD_INT 3
5993: PPUSH
5994: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5998: LD_VAR 0 3
6002: PPUSH
6003: LD_INT 9
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6013: LD_VAR 0 3
6017: PPUSH
6018: LD_INT 53
6020: PPUSH
6021: LD_INT 23
6023: PPUSH
6024: CALL_OW 111
// wait ( 0 0$1 ) ;
6028: LD_INT 35
6030: PPUSH
6031: CALL_OW 67
// end ;
6035: GO 5920
6037: POP
6038: POP
// for i = 1 to 2 do
6039: LD_ADDR_VAR 0 2
6043: PUSH
6044: DOUBLE
6045: LD_INT 1
6047: DEC
6048: ST_TO_ADDR
6049: LD_INT 2
6051: PUSH
6052: FOR_TO
6053: IFFALSE 6169
// begin uc_side = 4 ;
6055: LD_ADDR_OWVAR 20
6059: PUSH
6060: LD_INT 4
6062: ST_TO_ADDR
// uc_nation = 1 ;
6063: LD_ADDR_OWVAR 21
6067: PUSH
6068: LD_INT 1
6070: ST_TO_ADDR
// hc_name =  ;
6071: LD_ADDR_OWVAR 26
6075: PUSH
6076: LD_STRING 
6078: ST_TO_ADDR
// hc_gallery =  ;
6079: LD_ADDR_OWVAR 33
6083: PUSH
6084: LD_STRING 
6086: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6087: LD_INT 0
6089: PPUSH
6090: LD_INT 4
6092: PPUSH
6093: LD_INT 5
6095: PPUSH
6096: LD_INT 8
6098: PPUSH
6099: CALL_OW 12
6103: PPUSH
6104: CALL_OW 380
// un = CreateHuman ;
6108: LD_ADDR_VAR 0 3
6112: PUSH
6113: CALL_OW 44
6117: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6118: LD_VAR 0 3
6122: PPUSH
6123: LD_INT 3
6125: PPUSH
6126: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6130: LD_VAR 0 3
6134: PPUSH
6135: LD_INT 9
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6145: LD_VAR 0 3
6149: PPUSH
6150: LD_INT 53
6152: PPUSH
6153: LD_INT 23
6155: PPUSH
6156: CALL_OW 111
// wait ( 0 0$1 ) ;
6160: LD_INT 35
6162: PPUSH
6163: CALL_OW 67
// end ;
6167: GO 6052
6169: POP
6170: POP
// for i = 1 to [ 5 , 5 , 4 ] [ Difficulty ] do
6171: LD_ADDR_VAR 0 2
6175: PUSH
6176: DOUBLE
6177: LD_INT 1
6179: DEC
6180: ST_TO_ADDR
6181: LD_INT 5
6183: PUSH
6184: LD_INT 5
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: PUSH
6195: LD_OWVAR 67
6199: ARRAY
6200: PUSH
6201: FOR_TO
6202: IFFALSE 6436
// begin uc_side = 4 ;
6204: LD_ADDR_OWVAR 20
6208: PUSH
6209: LD_INT 4
6211: ST_TO_ADDR
// uc_nation = 1 ;
6212: LD_ADDR_OWVAR 21
6216: PUSH
6217: LD_INT 1
6219: ST_TO_ADDR
// vc_engine = 1 ;
6220: LD_ADDR_OWVAR 39
6224: PUSH
6225: LD_INT 1
6227: ST_TO_ADDR
// vc_control = 1 ;
6228: LD_ADDR_OWVAR 38
6232: PUSH
6233: LD_INT 1
6235: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6236: LD_ADDR_OWVAR 40
6240: PUSH
6241: LD_INT 7
6243: PUSH
6244: LD_INT 4
6246: PUSH
6247: LD_INT 5
6249: PUSH
6250: LD_INT 6
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_VAR 0 2
6263: PUSH
6264: LD_INT 4
6266: MOD
6267: PUSH
6268: LD_INT 1
6270: PLUS
6271: ARRAY
6272: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6273: LD_ADDR_OWVAR 37
6277: PUSH
6278: LD_INT 3
6280: PUSH
6281: LD_INT 3
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: LD_INT 4
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: LD_VAR 0 2
6300: PUSH
6301: LD_INT 4
6303: MOD
6304: PUSH
6305: LD_INT 1
6307: PLUS
6308: ARRAY
6309: ST_TO_ADDR
// veh = CreateVehicle ;
6310: LD_ADDR_VAR 0 4
6314: PUSH
6315: CALL_OW 45
6319: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6320: LD_VAR 0 4
6324: PPUSH
6325: LD_INT 3
6327: PPUSH
6328: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6332: LD_VAR 0 4
6336: PPUSH
6337: LD_INT 9
6339: PPUSH
6340: LD_INT 0
6342: PPUSH
6343: CALL_OW 49
// InitHc ;
6347: CALL_OW 19
// hc_name =  ;
6351: LD_ADDR_OWVAR 26
6355: PUSH
6356: LD_STRING 
6358: ST_TO_ADDR
// hc_gallery =  ;
6359: LD_ADDR_OWVAR 33
6363: PUSH
6364: LD_STRING 
6366: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6367: LD_INT 0
6369: PPUSH
6370: LD_INT 3
6372: PPUSH
6373: LD_INT 5
6375: PPUSH
6376: LD_INT 8
6378: PPUSH
6379: CALL_OW 12
6383: PPUSH
6384: CALL_OW 380
// un = CreateHuman ;
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: CALL_OW 44
6397: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6398: LD_VAR 0 3
6402: PPUSH
6403: LD_VAR 0 4
6407: PPUSH
6408: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6412: LD_VAR 0 3
6416: PPUSH
6417: LD_INT 53
6419: PPUSH
6420: LD_INT 23
6422: PPUSH
6423: CALL_OW 111
// wait ( 0 0$5 ) ;
6427: LD_INT 175
6429: PPUSH
6430: CALL_OW 67
// end ;
6434: GO 6201
6436: POP
6437: POP
// end ; end_of_file
6438: LD_VAR 0 1
6442: RET
// export function PrepareRussianCommander ; begin
6443: LD_INT 0
6445: PPUSH
// uc_side = 3 ;
6446: LD_ADDR_OWVAR 20
6450: PUSH
6451: LD_INT 3
6453: ST_TO_ADDR
// uc_nation = 3 ;
6454: LD_ADDR_OWVAR 21
6458: PUSH
6459: LD_INT 3
6461: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6462: LD_ADDR_EXP 24
6466: PUSH
6467: LD_STRING Borodin
6469: PPUSH
6470: CALL_OW 25
6474: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6475: LD_EXP 24
6479: PPUSH
6480: LD_INT 25
6482: PPUSH
6483: LD_INT 0
6485: PPUSH
6486: CALL_OW 49
// end ;
6490: LD_VAR 0 1
6494: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6495: LD_INT 0
6497: PPUSH
6498: PPUSH
6499: PPUSH
6500: PPUSH
// for i = 1 to 10 do
6501: LD_ADDR_VAR 0 2
6505: PUSH
6506: DOUBLE
6507: LD_INT 1
6509: DEC
6510: ST_TO_ADDR
6511: LD_INT 10
6513: PUSH
6514: FOR_TO
6515: IFFALSE 6589
// begin uc_side = 6 ;
6517: LD_ADDR_OWVAR 20
6521: PUSH
6522: LD_INT 6
6524: ST_TO_ADDR
// uc_nation = 3 ;
6525: LD_ADDR_OWVAR 21
6529: PUSH
6530: LD_INT 3
6532: ST_TO_ADDR
// hc_gallery =  ;
6533: LD_ADDR_OWVAR 33
6537: PUSH
6538: LD_STRING 
6540: ST_TO_ADDR
// hc_name =  ;
6541: LD_ADDR_OWVAR 26
6545: PUSH
6546: LD_STRING 
6548: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6549: LD_INT 0
6551: PPUSH
6552: LD_INT 1
6554: PPUSH
6555: LD_INT 3
6557: PPUSH
6558: CALL_OW 380
// un = CreateHuman ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: CALL_OW 44
6571: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6572: LD_VAR 0 3
6576: PPUSH
6577: LD_INT 1
6579: PPUSH
6580: LD_INT 0
6582: PPUSH
6583: CALL_OW 49
// end ;
6587: GO 6514
6589: POP
6590: POP
// for i = 1 to 3 do
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: DOUBLE
6597: LD_INT 1
6599: DEC
6600: ST_TO_ADDR
6601: LD_INT 3
6603: PUSH
6604: FOR_TO
6605: IFFALSE 6754
// begin uc_side = 6 ;
6607: LD_ADDR_OWVAR 20
6611: PUSH
6612: LD_INT 6
6614: ST_TO_ADDR
// uc_nation = 3 ;
6615: LD_ADDR_OWVAR 21
6619: PUSH
6620: LD_INT 3
6622: ST_TO_ADDR
// vc_engine = 1 ;
6623: LD_ADDR_OWVAR 39
6627: PUSH
6628: LD_INT 1
6630: ST_TO_ADDR
// vc_control = 1 ;
6631: LD_ADDR_OWVAR 38
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6639: LD_ADDR_OWVAR 40
6643: PUSH
6644: LD_INT 43
6646: PUSH
6647: LD_INT 44
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 1
6656: PPUSH
6657: LD_INT 2
6659: PPUSH
6660: CALL_OW 12
6664: ARRAY
6665: ST_TO_ADDR
// vc_chassis = 22 ;
6666: LD_ADDR_OWVAR 37
6670: PUSH
6671: LD_INT 22
6673: ST_TO_ADDR
// veh = CreateVehicle ;
6674: LD_ADDR_VAR 0 4
6678: PUSH
6679: CALL_OW 45
6683: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6684: LD_VAR 0 4
6688: PPUSH
6689: LD_INT 2
6691: PPUSH
6692: LD_INT 0
6694: PPUSH
6695: CALL_OW 49
// hc_gallery =  ;
6699: LD_ADDR_OWVAR 33
6703: PUSH
6704: LD_STRING 
6706: ST_TO_ADDR
// hc_name =  ;
6707: LD_ADDR_OWVAR 26
6711: PUSH
6712: LD_STRING 
6714: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6715: LD_INT 0
6717: PPUSH
6718: LD_INT 3
6720: PPUSH
6721: LD_INT 4
6723: PPUSH
6724: CALL_OW 380
// un = CreateHuman ;
6728: LD_ADDR_VAR 0 3
6732: PUSH
6733: CALL_OW 44
6737: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6738: LD_VAR 0 3
6742: PPUSH
6743: LD_VAR 0 4
6747: PPUSH
6748: CALL_OW 52
// end ;
6752: GO 6604
6754: POP
6755: POP
// end ;
6756: LD_VAR 0 1
6760: RET
// export function PrepareRussians ; var i , un ; begin
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
6765: PPUSH
// for i = 1 to 8 do
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: DOUBLE
6772: LD_INT 1
6774: DEC
6775: ST_TO_ADDR
6776: LD_INT 8
6778: PUSH
6779: FOR_TO
6780: IFFALSE 6866
// begin uc_side = 3 ;
6782: LD_ADDR_OWVAR 20
6786: PUSH
6787: LD_INT 3
6789: ST_TO_ADDR
// uc_nation = 3 ;
6790: LD_ADDR_OWVAR 21
6794: PUSH
6795: LD_INT 3
6797: ST_TO_ADDR
// hc_gallery =  ;
6798: LD_ADDR_OWVAR 33
6802: PUSH
6803: LD_STRING 
6805: ST_TO_ADDR
// hc_name =  ;
6806: LD_ADDR_OWVAR 26
6810: PUSH
6811: LD_STRING 
6813: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6814: LD_INT 0
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: LD_EXP 25
6824: PPUSH
6825: LD_EXP 26
6829: PPUSH
6830: CALL_OW 12
6834: PPUSH
6835: CALL_OW 380
// un = CreateHuman ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: CALL_OW 44
6848: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6849: LD_VAR 0 3
6853: PPUSH
6854: LD_INT 3
6856: PPUSH
6857: LD_INT 0
6859: PPUSH
6860: CALL_OW 49
// end ;
6864: GO 6779
6866: POP
6867: POP
// for i = 1 to 4 do
6868: LD_ADDR_VAR 0 2
6872: PUSH
6873: DOUBLE
6874: LD_INT 1
6876: DEC
6877: ST_TO_ADDR
6878: LD_INT 4
6880: PUSH
6881: FOR_TO
6882: IFFALSE 6968
// begin uc_side = 3 ;
6884: LD_ADDR_OWVAR 20
6888: PUSH
6889: LD_INT 3
6891: ST_TO_ADDR
// uc_nation = 3 ;
6892: LD_ADDR_OWVAR 21
6896: PUSH
6897: LD_INT 3
6899: ST_TO_ADDR
// hc_gallery =  ;
6900: LD_ADDR_OWVAR 33
6904: PUSH
6905: LD_STRING 
6907: ST_TO_ADDR
// hc_name =  ;
6908: LD_ADDR_OWVAR 26
6912: PUSH
6913: LD_STRING 
6915: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6916: LD_INT 0
6918: PPUSH
6919: LD_INT 2
6921: PPUSH
6922: LD_EXP 25
6926: PPUSH
6927: LD_EXP 26
6931: PPUSH
6932: CALL_OW 12
6936: PPUSH
6937: CALL_OW 380
// un = CreateHuman ;
6941: LD_ADDR_VAR 0 3
6945: PUSH
6946: CALL_OW 44
6950: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6951: LD_VAR 0 3
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: LD_INT 0
6961: PPUSH
6962: CALL_OW 49
// end ;
6966: GO 6881
6968: POP
6969: POP
// for i = 1 to 3 do
6970: LD_ADDR_VAR 0 2
6974: PUSH
6975: DOUBLE
6976: LD_INT 1
6978: DEC
6979: ST_TO_ADDR
6980: LD_INT 3
6982: PUSH
6983: FOR_TO
6984: IFFALSE 7070
// begin uc_side = 3 ;
6986: LD_ADDR_OWVAR 20
6990: PUSH
6991: LD_INT 3
6993: ST_TO_ADDR
// uc_nation = 3 ;
6994: LD_ADDR_OWVAR 21
6998: PUSH
6999: LD_INT 3
7001: ST_TO_ADDR
// hc_gallery =  ;
7002: LD_ADDR_OWVAR 33
7006: PUSH
7007: LD_STRING 
7009: ST_TO_ADDR
// hc_name =  ;
7010: LD_ADDR_OWVAR 26
7014: PUSH
7015: LD_STRING 
7017: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7018: LD_INT 0
7020: PPUSH
7021: LD_INT 3
7023: PPUSH
7024: LD_EXP 25
7028: PPUSH
7029: LD_EXP 26
7033: PPUSH
7034: CALL_OW 12
7038: PPUSH
7039: CALL_OW 380
// un = CreateHuman ;
7043: LD_ADDR_VAR 0 3
7047: PUSH
7048: CALL_OW 44
7052: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7053: LD_VAR 0 3
7057: PPUSH
7058: LD_INT 3
7060: PPUSH
7061: LD_INT 0
7063: PPUSH
7064: CALL_OW 49
// end ;
7068: GO 6983
7070: POP
7071: POP
// for i = 1 to 2 do
7072: LD_ADDR_VAR 0 2
7076: PUSH
7077: DOUBLE
7078: LD_INT 1
7080: DEC
7081: ST_TO_ADDR
7082: LD_INT 2
7084: PUSH
7085: FOR_TO
7086: IFFALSE 7172
// begin uc_side = 3 ;
7088: LD_ADDR_OWVAR 20
7092: PUSH
7093: LD_INT 3
7095: ST_TO_ADDR
// uc_nation = 3 ;
7096: LD_ADDR_OWVAR 21
7100: PUSH
7101: LD_INT 3
7103: ST_TO_ADDR
// hc_gallery =  ;
7104: LD_ADDR_OWVAR 33
7108: PUSH
7109: LD_STRING 
7111: ST_TO_ADDR
// hc_name =  ;
7112: LD_ADDR_OWVAR 26
7116: PUSH
7117: LD_STRING 
7119: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7120: LD_INT 0
7122: PPUSH
7123: LD_INT 4
7125: PPUSH
7126: LD_EXP 25
7130: PPUSH
7131: LD_EXP 26
7135: PPUSH
7136: CALL_OW 12
7140: PPUSH
7141: CALL_OW 380
// un = CreateHuman ;
7145: LD_ADDR_VAR 0 3
7149: PUSH
7150: CALL_OW 44
7154: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7155: LD_VAR 0 3
7159: PPUSH
7160: LD_INT 3
7162: PPUSH
7163: LD_INT 0
7165: PPUSH
7166: CALL_OW 49
// end ;
7170: GO 7085
7172: POP
7173: POP
// end ; end_of_file
7174: LD_VAR 0 1
7178: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7179: LD_INT 0
7181: PPUSH
7182: PPUSH
7183: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7184: LD_ADDR_VAR 0 1
7188: PUSH
7189: LD_VAR 0 1
7193: PUSH
7194: LD_EXP 1
7198: PUSH
7199: LD_EXP 2
7203: PUSH
7204: LD_EXP 3
7208: PUSH
7209: LD_EXP 4
7213: PUSH
7214: LD_EXP 5
7218: PUSH
7219: LD_EXP 6
7223: PUSH
7224: LD_EXP 7
7228: PUSH
7229: LD_EXP 8
7233: PUSH
7234: LD_EXP 9
7238: PUSH
7239: LD_EXP 10
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: DIFF
7256: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7257: LD_ADDR_VAR 0 6
7261: PUSH
7262: LD_VAR 0 1
7266: PUSH
7267: LD_INT 1
7269: PPUSH
7270: LD_VAR 0 1
7274: PPUSH
7275: CALL_OW 12
7279: ARRAY
7280: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7281: LD_VAR 0 6
7285: PPUSH
7286: CALL_OW 258
7290: PUSH
7291: LD_INT 1
7293: EQUAL
7294: IFFALSE 7312
// Say ( speaker , dialogMID ) else
7296: LD_VAR 0 6
7300: PPUSH
7301: LD_VAR 0 2
7305: PPUSH
7306: CALL_OW 88
7310: GO 7326
// Say ( speaker , dialogFID ) ;
7312: LD_VAR 0 6
7316: PPUSH
7317: LD_VAR 0 3
7321: PPUSH
7322: CALL_OW 88
// result := speaker ;
7326: LD_ADDR_VAR 0 4
7330: PUSH
7331: LD_VAR 0 6
7335: ST_TO_ADDR
// end ;
7336: LD_VAR 0 4
7340: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7341: LD_INT 0
7343: PPUSH
7344: PPUSH
7345: PPUSH
// uc_side := GetSide ( b ) ;
7346: LD_ADDR_OWVAR 20
7350: PUSH
7351: LD_VAR 0 2
7355: PPUSH
7356: CALL_OW 255
7360: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7361: LD_ADDR_OWVAR 21
7365: PUSH
7366: LD_VAR 0 2
7370: PPUSH
7371: CALL_OW 248
7375: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7376: LD_INT 0
7378: PPUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_VAR 0 1
7386: PPUSH
7387: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7391: LD_ADDR_VAR 0 5
7395: PUSH
7396: LD_VAR 0 2
7400: PPUSH
7401: CALL_OW 254
7405: PUSH
7406: LD_INT 3
7408: MINUS
7409: ST_TO_ADDR
// if dir < 0 then
7410: LD_VAR 0 5
7414: PUSH
7415: LD_INT 0
7417: LESS
7418: IFFALSE 7434
// dir := 6 + dir ;
7420: LD_ADDR_VAR 0 5
7424: PUSH
7425: LD_INT 6
7427: PUSH
7428: LD_VAR 0 5
7432: PLUS
7433: ST_TO_ADDR
// un := CreateHuman ;
7434: LD_ADDR_VAR 0 4
7438: PUSH
7439: CALL_OW 44
7443: ST_TO_ADDR
// SetDir ( un , dir ) ;
7444: LD_VAR 0 4
7448: PPUSH
7449: LD_VAR 0 5
7453: PPUSH
7454: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7458: LD_VAR 0 4
7462: PPUSH
7463: LD_VAR 0 2
7467: PPUSH
7468: CALL_OW 52
// end ;
7472: LD_VAR 0 3
7476: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7477: LD_INT 0
7479: PPUSH
7480: PPUSH
7481: PPUSH
7482: PPUSH
// for i = 1 to count do
7483: LD_ADDR_VAR 0 8
7487: PUSH
7488: DOUBLE
7489: LD_INT 1
7491: DEC
7492: ST_TO_ADDR
7493: LD_VAR 0 6
7497: PUSH
7498: FOR_TO
7499: IFFALSE 7580
// begin uc_side = side ;
7501: LD_ADDR_OWVAR 20
7505: PUSH
7506: LD_VAR 0 1
7510: ST_TO_ADDR
// uc_nation = nation ;
7511: LD_ADDR_OWVAR 21
7515: PUSH
7516: LD_VAR 0 2
7520: ST_TO_ADDR
// hc_gallery =  ;
7521: LD_ADDR_OWVAR 33
7525: PUSH
7526: LD_STRING 
7528: ST_TO_ADDR
// hc_name =  ;
7529: LD_ADDR_OWVAR 26
7533: PUSH
7534: LD_STRING 
7536: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7537: LD_INT 0
7539: PPUSH
7540: LD_VAR 0 5
7544: PPUSH
7545: LD_VAR 0 4
7549: PPUSH
7550: CALL_OW 380
// un = CreateHuman ;
7554: LD_ADDR_VAR 0 10
7558: PUSH
7559: CALL_OW 44
7563: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7564: LD_VAR 0 10
7568: PPUSH
7569: LD_VAR 0 3
7573: PPUSH
7574: CALL_OW 52
// end ;
7578: GO 7498
7580: POP
7581: POP
// end ;
7582: LD_VAR 0 7
7586: RET
// export function PrepareDifficulty ; begin
7587: LD_INT 0
7589: PPUSH
// if Difficulty = 1 then
7590: LD_OWVAR 67
7594: PUSH
7595: LD_INT 1
7597: EQUAL
7598: IFFALSE 7616
// begin RuSolMinLevel = 3 ;
7600: LD_ADDR_EXP 25
7604: PUSH
7605: LD_INT 3
7607: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7608: LD_ADDR_EXP 26
7612: PUSH
7613: LD_INT 5
7615: ST_TO_ADDR
// end ; if Difficulty = 2 then
7616: LD_OWVAR 67
7620: PUSH
7621: LD_INT 2
7623: EQUAL
7624: IFFALSE 7694
// begin RuSolMinLevel = 5 ;
7626: LD_ADDR_EXP 25
7630: PUSH
7631: LD_INT 5
7633: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7634: LD_ADDR_EXP 26
7638: PUSH
7639: LD_INT 6
7641: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7642: LD_INT 51
7644: PPUSH
7645: LD_INT 3
7647: PPUSH
7648: LD_INT 1
7650: PPUSH
7651: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7655: LD_INT 57
7657: PPUSH
7658: LD_INT 3
7660: PPUSH
7661: LD_INT 1
7663: PPUSH
7664: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7668: LD_INT 57
7670: PPUSH
7671: LD_INT 6
7673: PPUSH
7674: LD_INT 2
7676: PPUSH
7677: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7681: LD_INT 51
7683: PPUSH
7684: LD_INT 6
7686: PPUSH
7687: LD_INT 2
7689: PPUSH
7690: CALL_OW 322
// end ; if Difficulty = 3 then
7694: LD_OWVAR 67
7698: PUSH
7699: LD_INT 3
7701: EQUAL
7702: IFFALSE 7785
// begin RuSolMinLevel = 5 ;
7704: LD_ADDR_EXP 25
7708: PUSH
7709: LD_INT 5
7711: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7712: LD_ADDR_EXP 26
7716: PUSH
7717: LD_INT 6
7719: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7720: LD_INT 57
7722: PPUSH
7723: LD_INT 3
7725: PPUSH
7726: LD_INT 1
7728: PPUSH
7729: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7733: LD_INT 51
7735: PPUSH
7736: LD_INT 3
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7746: LD_INT 52
7748: PPUSH
7749: LD_INT 3
7751: PPUSH
7752: LD_INT 1
7754: PPUSH
7755: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7759: LD_INT 57
7761: PPUSH
7762: LD_INT 6
7764: PPUSH
7765: LD_INT 2
7767: PPUSH
7768: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7772: LD_INT 52
7774: PPUSH
7775: LD_INT 6
7777: PPUSH
7778: LD_INT 2
7780: PPUSH
7781: CALL_OW 322
// end ; end ;
7785: LD_VAR 0 1
7789: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7790: LD_INT 0
7792: PPUSH
7793: PPUSH
7794: PPUSH
7795: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7796: LD_ADDR_VAR 0 3
7800: PUSH
7801: LD_INT 22
7803: PUSH
7804: LD_INT 3
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 25
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 69
7829: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7830: LD_ADDR_VAR 0 4
7834: PUSH
7835: LD_INT 4
7837: PUSH
7838: LD_INT 75
7840: PUSH
7841: LD_INT 79
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 4
7855: PUSH
7856: LD_INT 113
7858: PUSH
7859: LD_INT 94
7861: PUSH
7862: LD_INT 4
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 29
7873: PUSH
7874: LD_INT 106
7876: PUSH
7877: LD_INT 97
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 26
7891: PUSH
7892: LD_INT 93
7894: PUSH
7895: LD_INT 97
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: LD_INT 100
7912: PUSH
7913: LD_INT 89
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 17
7927: PUSH
7928: LD_INT 96
7930: PUSH
7931: LD_INT 89
7933: PUSH
7934: LD_INT 1
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 32
7945: PUSH
7946: LD_INT 78
7948: PUSH
7949: LD_INT 94
7951: PUSH
7952: LD_INT 1
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 32
7963: PUSH
7964: LD_INT 95
7966: PUSH
7967: LD_INT 82
7969: PUSH
7970: LD_INT 3
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 32
7981: PUSH
7982: LD_INT 104
7984: PUSH
7985: LD_INT 85
7987: PUSH
7988: LD_INT 2
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 32
7999: PUSH
8000: LD_INT 81
8002: PUSH
8003: LD_INT 78
8005: PUSH
8006: LD_INT 2
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 33
8017: PUSH
8018: LD_INT 109
8020: PUSH
8021: LD_INT 90
8023: PUSH
8024: LD_INT 3
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 33
8035: PUSH
8036: LD_INT 88
8038: PUSH
8039: LD_INT 79
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 33
8053: PUSH
8054: LD_INT 76
8056: PUSH
8057: LD_INT 87
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 26
8071: PUSH
8072: LD_INT 96
8074: PUSH
8075: LD_INT 97
8077: PUSH
8078: LD_INT 5
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 26
8089: PUSH
8090: LD_INT 85
8092: PUSH
8093: LD_INT 84
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: PUSH
8105: LD_INT 6
8107: PUSH
8108: LD_INT 88
8110: PUSH
8111: LD_INT 95
8113: PUSH
8114: LD_INT 0
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 19
8125: PUSH
8126: LD_INT 103
8128: PUSH
8129: LD_INT 89
8131: PUSH
8132: LD_INT 4
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 16
8143: PUSH
8144: LD_INT 97
8146: PUSH
8147: LD_INT 86
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PUSH
8159: LD_INT 24
8161: PUSH
8162: LD_INT 100
8164: PUSH
8165: LD_INT 85
8167: PUSH
8168: LD_INT 3
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: ST_TO_ADDR
// for i := 1 to buildingsTab do
8198: LD_ADDR_VAR 0 2
8202: PUSH
8203: DOUBLE
8204: LD_INT 1
8206: DEC
8207: ST_TO_ADDR
8208: LD_VAR 0 4
8212: PUSH
8213: FOR_TO
8214: IFFALSE 8287
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8216: LD_VAR 0 3
8220: PPUSH
8221: LD_VAR 0 4
8225: PUSH
8226: LD_VAR 0 2
8230: ARRAY
8231: PUSH
8232: LD_INT 1
8234: ARRAY
8235: PPUSH
8236: LD_VAR 0 4
8240: PUSH
8241: LD_VAR 0 2
8245: ARRAY
8246: PUSH
8247: LD_INT 2
8249: ARRAY
8250: PPUSH
8251: LD_VAR 0 4
8255: PUSH
8256: LD_VAR 0 2
8260: ARRAY
8261: PUSH
8262: LD_INT 3
8264: ARRAY
8265: PPUSH
8266: LD_VAR 0 4
8270: PUSH
8271: LD_VAR 0 2
8275: ARRAY
8276: PUSH
8277: LD_INT 4
8279: ARRAY
8280: PPUSH
8281: CALL_OW 205
8285: GO 8213
8287: POP
8288: POP
// end ;
8289: LD_VAR 0 1
8293: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8294: LD_INT 0
8296: PPUSH
8297: PPUSH
// for i in charactersList do
8298: LD_ADDR_VAR 0 4
8302: PUSH
8303: LD_VAR 0 1
8307: PUSH
8308: FOR_IN
8309: IFFALSE 8327
// SaveCharacters ( i , ident ) ;
8311: LD_VAR 0 4
8315: PPUSH
8316: LD_VAR 0 2
8320: PPUSH
8321: CALL_OW 38
8325: GO 8308
8327: POP
8328: POP
// end ;
8329: LD_VAR 0 3
8333: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8334: LD_INT 0
8336: PPUSH
8337: PPUSH
8338: PPUSH
8339: PPUSH
8340: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8341: LD_ADDR_VAR 0 8
8345: PUSH
8346: LD_INT 48
8348: PUSH
8349: LD_INT 49
8351: PUSH
8352: LD_INT 50
8354: PUSH
8355: LD_INT 20
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: LD_INT 51
8363: PUSH
8364: LD_INT 52
8366: PUSH
8367: LD_INT 69
8369: PUSH
8370: LD_INT 39
8372: PUSH
8373: LD_INT 34
8375: PUSH
8376: LD_INT 40
8378: PUSH
8379: LD_INT 53
8381: PUSH
8382: LD_INT 71
8384: PUSH
8385: LD_INT 57
8387: PUSH
8388: LD_INT 58
8390: PUSH
8391: LD_INT 44
8393: PUSH
8394: LD_INT 32
8396: PUSH
8397: LD_INT 27
8399: PUSH
8400: LD_INT 23
8402: PUSH
8403: LD_INT 33
8405: PUSH
8406: LD_INT 59
8408: PUSH
8409: LD_INT 54
8411: PUSH
8412: LD_INT 55
8414: PUSH
8415: LD_INT 56
8417: PUSH
8418: LD_INT 63
8420: PUSH
8421: LD_INT 64
8423: PUSH
8424: LD_INT 65
8426: PUSH
8427: LD_INT 30
8429: PUSH
8430: LD_INT 31
8432: PUSH
8433: LD_INT 21
8435: PUSH
8436: LD_INT 22
8438: PUSH
8439: LD_INT 25
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8476: LD_ADDR_VAR 0 5
8480: PUSH
8481: DOUBLE
8482: LD_INT 1
8484: DEC
8485: ST_TO_ADDR
8486: LD_VAR 0 8
8490: PUSH
8491: FOR_TO
8492: IFFALSE 8568
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8494: LD_VAR 0 8
8498: PUSH
8499: LD_VAR 0 5
8503: ARRAY
8504: PPUSH
8505: LD_VAR 0 1
8509: PPUSH
8510: CALL_OW 321
8514: PUSH
8515: LD_INT 1
8517: EQUAL
8518: PUSH
8519: LD_VAR 0 8
8523: PUSH
8524: LD_VAR 0 5
8528: ARRAY
8529: PPUSH
8530: LD_VAR 0 3
8534: PPUSH
8535: CALL_OW 482
8539: PUSH
8540: LD_INT 1
8542: EQUAL
8543: AND
8544: IFFALSE 8566
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_VAR 0 8
8555: PUSH
8556: LD_VAR 0 5
8560: ARRAY
8561: PPUSH
8562: CALL_OW 184
8566: GO 8491
8568: POP
8569: POP
// end ;
8570: LD_VAR 0 4
8574: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8575: LD_INT 0
8577: PPUSH
8578: PPUSH
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
8583: PPUSH
8584: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8585: LD_ADDR_VAR 0 6
8589: PUSH
8590: LD_VAR 0 2
8594: PPUSH
8595: LD_INT 22
8597: PUSH
8598: LD_VAR 0 1
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 56
8609: PUSH
8610: EMPTY
8611: LIST
8612: PUSH
8613: LD_INT 24
8615: PUSH
8616: LD_INT 700
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 3
8625: PUSH
8626: LD_INT 60
8628: PUSH
8629: EMPTY
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 2
8638: PUSH
8639: LD_INT 25
8641: PUSH
8642: LD_INT 1
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 25
8651: PUSH
8652: LD_INT 5
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 25
8661: PUSH
8662: LD_INT 8
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 25
8671: PUSH
8672: LD_INT 9
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: PPUSH
8693: CALL_OW 70
8697: PUSH
8698: LD_EXP 24
8702: PUSH
8703: EMPTY
8704: LIST
8705: DIFF
8706: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8707: LD_ADDR_VAR 0 7
8711: PUSH
8712: LD_VAR 0 2
8716: PPUSH
8717: LD_INT 22
8719: PUSH
8720: LD_VAR 0 1
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: LD_INT 30
8731: PUSH
8732: LD_INT 32
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 58
8741: PUSH
8742: EMPTY
8743: LIST
8744: PUSH
8745: LD_INT 24
8747: PUSH
8748: LD_INT 251
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 70
8765: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8766: LD_ADDR_VAR 0 9
8770: PUSH
8771: LD_VAR 0 2
8775: PPUSH
8776: LD_INT 22
8778: PUSH
8779: LD_VAR 0 1
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 2
8790: PUSH
8791: LD_INT 30
8793: PUSH
8794: LD_INT 4
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 30
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 24
8818: PUSH
8819: LD_INT 251
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 70
8835: ST_TO_ADDR
// if barrackList > 0 then
8836: LD_VAR 0 9
8840: PUSH
8841: LD_INT 0
8843: GREATER
8844: IFFALSE 8992
// begin if turretList = 0 then
8846: LD_VAR 0 7
8850: PUSH
8851: LD_INT 0
8853: EQUAL
8854: IFFALSE 8896
// begin if soldiers_list > 0 then
8856: LD_VAR 0 6
8860: PUSH
8861: LD_INT 0
8863: GREATER
8864: IFFALSE 8894
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8866: LD_VAR 0 6
8870: PPUSH
8871: LD_VAR 0 9
8875: PUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 9
8883: PPUSH
8884: CALL_OW 12
8888: ARRAY
8889: PPUSH
8890: CALL_OW 120
// end else
8894: GO 8992
// begin for i in barrackList do
8896: LD_ADDR_VAR 0 4
8900: PUSH
8901: LD_VAR 0 9
8905: PUSH
8906: FOR_IN
8907: IFFALSE 8990
// begin insideUnits = UnitsInside ( i ) ;
8909: LD_ADDR_VAR 0 10
8913: PUSH
8914: LD_VAR 0 4
8918: PPUSH
8919: CALL_OW 313
8923: ST_TO_ADDR
// if insideUnits > 0 then
8924: LD_VAR 0 10
8928: PUSH
8929: LD_INT 0
8931: GREATER
8932: IFFALSE 8956
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8934: LD_VAR 0 10
8938: PUSH
8939: LD_INT 1
8941: ARRAY
8942: PPUSH
8943: LD_VAR 0 7
8947: PUSH
8948: LD_INT 1
8950: ARRAY
8951: PPUSH
8952: CALL_OW 120
// if soldiers_list > 0 then
8956: LD_VAR 0 6
8960: PUSH
8961: LD_INT 0
8963: GREATER
8964: IFFALSE 8988
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8966: LD_VAR 0 6
8970: PUSH
8971: LD_INT 1
8973: ARRAY
8974: PPUSH
8975: LD_VAR 0 7
8979: PUSH
8980: LD_INT 1
8982: ARRAY
8983: PPUSH
8984: CALL_OW 120
// end ;
8988: GO 8906
8990: POP
8991: POP
// end ; end ; end ;
8992: LD_VAR 0 3
8996: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8997: LD_INT 0
8999: PPUSH
9000: PPUSH
9001: PPUSH
9002: PPUSH
9003: PPUSH
9004: PPUSH
// for i = 1 to vehCount do
9005: LD_ADDR_VAR 0 8
9009: PUSH
9010: DOUBLE
9011: LD_INT 1
9013: DEC
9014: ST_TO_ADDR
9015: LD_VAR 0 6
9019: PUSH
9020: FOR_TO
9021: IFFALSE 9228
// begin uc_side = side ;
9023: LD_ADDR_OWVAR 20
9027: PUSH
9028: LD_VAR 0 1
9032: ST_TO_ADDR
// uc_nation = nation ;
9033: LD_ADDR_OWVAR 21
9037: PUSH
9038: LD_VAR 0 3
9042: ST_TO_ADDR
// vc_Chassis = 22 ;
9043: LD_ADDR_OWVAR 37
9047: PUSH
9048: LD_INT 22
9050: ST_TO_ADDR
// vc_engine = 1 ;
9051: LD_ADDR_OWVAR 39
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// vc_control = 1 ;
9059: LD_ADDR_OWVAR 38
9063: PUSH
9064: LD_INT 1
9066: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9067: LD_ADDR_OWVAR 40
9071: PUSH
9072: LD_INT 43
9074: PUSH
9075: LD_INT 44
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 1
9084: PPUSH
9085: LD_INT 2
9087: PPUSH
9088: CALL_OW 12
9092: ARRAY
9093: ST_TO_ADDR
// veh = CreateVehicle ;
9094: LD_ADDR_VAR 0 12
9098: PUSH
9099: CALL_OW 45
9103: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9104: LD_VAR 0 12
9108: PPUSH
9109: LD_VAR 0 2
9113: PPUSH
9114: LD_INT 0
9116: PPUSH
9117: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9121: LD_ADDR_EXP 32
9125: PUSH
9126: LD_EXP 32
9130: PUSH
9131: LD_VAR 0 12
9135: ADD
9136: ST_TO_ADDR
// hc_class = 3 ;
9137: LD_ADDR_OWVAR 28
9141: PUSH
9142: LD_INT 3
9144: ST_TO_ADDR
// hc_name =  ;
9145: LD_ADDR_OWVAR 26
9149: PUSH
9150: LD_STRING 
9152: ST_TO_ADDR
// hc_gallery =  ;
9153: LD_ADDR_OWVAR 33
9157: PUSH
9158: LD_STRING 
9160: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9161: LD_INT 0
9163: PPUSH
9164: LD_INT 3
9166: PPUSH
9167: LD_EXP 25
9171: PPUSH
9172: LD_EXP 26
9176: PPUSH
9177: CALL_OW 12
9181: PPUSH
9182: CALL_OW 380
// un = CreateHuman ;
9186: LD_ADDR_VAR 0 10
9190: PUSH
9191: CALL_OW 44
9195: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9196: LD_VAR 0 10
9200: PPUSH
9201: LD_VAR 0 12
9205: PPUSH
9206: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9210: LD_ADDR_EXP 32
9214: PUSH
9215: LD_EXP 32
9219: PUSH
9220: LD_VAR 0 10
9224: ADD
9225: ST_TO_ADDR
// end ;
9226: GO 9020
9228: POP
9229: POP
// end ;
9230: LD_VAR 0 7
9234: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9235: LD_INT 0
9237: PPUSH
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
9242: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9243: LD_VAR 0 2
9247: PPUSH
9248: LD_INT 22
9250: PUSH
9251: LD_VAR 0 1
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: PPUSH
9263: CALL_OW 70
9267: PUSH
9268: LD_INT 0
9270: EQUAL
9271: PUSH
9272: LD_EXP 32
9276: AND
9277: IFFALSE 9564
// begin for i in defenders_list do
9279: LD_ADDR_VAR 0 4
9283: PUSH
9284: LD_EXP 32
9288: PUSH
9289: FOR_IN
9290: IFFALSE 9562
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9292: LD_VAR 0 4
9296: PPUSH
9297: LD_INT 63
9299: PPUSH
9300: LD_INT 75
9302: PPUSH
9303: CALL_OW 297
9307: PUSH
9308: LD_INT 8
9310: GREATER
9311: PUSH
9312: LD_VAR 0 4
9316: PPUSH
9317: CALL_OW 314
9321: NOT
9322: AND
9323: IFFALSE 9342
// ComMoveXY ( i , 63 , 75 ) else
9325: LD_VAR 0 4
9329: PPUSH
9330: LD_INT 63
9332: PPUSH
9333: LD_INT 75
9335: PPUSH
9336: CALL_OW 111
9340: GO 9560
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9342: LD_VAR 0 4
9346: PPUSH
9347: CALL_OW 257
9351: PUSH
9352: LD_INT 3
9354: EQUAL
9355: PUSH
9356: LD_VAR 0 4
9360: PPUSH
9361: CALL_OW 310
9365: NOT
9366: AND
9367: PUSH
9368: LD_VAR 0 4
9372: PPUSH
9373: CALL_OW 314
9377: NOT
9378: AND
9379: IFFALSE 9432
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9381: LD_VAR 0 4
9385: PPUSH
9386: LD_EXP 32
9390: PPUSH
9391: LD_INT 58
9393: PUSH
9394: EMPTY
9395: LIST
9396: PUSH
9397: LD_INT 24
9399: PUSH
9400: LD_INT 1000
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PPUSH
9411: CALL_OW 72
9415: PPUSH
9416: LD_VAR 0 4
9420: PPUSH
9421: CALL_OW 74
9425: PPUSH
9426: CALL_OW 120
9430: GO 9560
// if GetFuel ( i ) < 100 then
9432: LD_VAR 0 4
9436: PPUSH
9437: CALL_OW 261
9441: PUSH
9442: LD_INT 100
9444: LESS
9445: IFFALSE 9461
// SetFuel ( defenders_list , 100 ) else
9447: LD_EXP 32
9451: PPUSH
9452: LD_INT 100
9454: PPUSH
9455: CALL_OW 240
9459: GO 9560
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9461: LD_VAR 0 4
9465: PPUSH
9466: CALL_OW 263
9470: PUSH
9471: LD_INT 1
9473: EQUAL
9474: PUSH
9475: LD_VAR 0 4
9479: PPUSH
9480: CALL_OW 256
9484: PUSH
9485: LD_INT 990
9487: LESS
9488: AND
9489: IFFALSE 9560
// begin veh := i ;
9491: LD_ADDR_VAR 0 7
9495: PUSH
9496: LD_VAR 0 4
9500: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9501: LD_ADDR_VAR 0 8
9505: PUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 311
9515: ST_TO_ADDR
// if veh then
9516: LD_VAR 0 7
9520: IFFALSE 9560
// begin ComMoveXY ( i , 63 , 75 ) ;
9522: LD_VAR 0 4
9526: PPUSH
9527: LD_INT 63
9529: PPUSH
9530: LD_INT 75
9532: PPUSH
9533: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9537: LD_VAR 0 7
9541: PPUSH
9542: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9546: LD_VAR 0 8
9550: PPUSH
9551: LD_VAR 0 7
9555: PPUSH
9556: CALL_OW 189
// end ; end ; end ;
9560: GO 9289
9562: POP
9563: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9564: LD_ADDR_VAR 0 6
9568: PUSH
9569: LD_VAR 0 2
9573: PPUSH
9574: LD_INT 22
9576: PUSH
9577: LD_VAR 0 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: PPUSH
9589: CALL_OW 70
9593: ST_TO_ADDR
// if tmp and defenders_list then
9594: LD_VAR 0 6
9598: PUSH
9599: LD_EXP 32
9603: AND
9604: IFFALSE 9773
// for i in defenders_list do
9606: LD_ADDR_VAR 0 4
9610: PUSH
9611: LD_EXP 32
9615: PUSH
9616: FOR_IN
9617: IFFALSE 9771
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9619: LD_VAR 0 4
9623: PPUSH
9624: CALL_OW 257
9628: PUSH
9629: LD_INT 3
9631: EQUAL
9632: PUSH
9633: LD_VAR 0 4
9637: PPUSH
9638: CALL_OW 310
9642: NOT
9643: AND
9644: IFFALSE 9683
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9646: LD_VAR 0 4
9650: PPUSH
9651: LD_EXP 32
9655: PPUSH
9656: LD_INT 58
9658: PUSH
9659: EMPTY
9660: LIST
9661: PPUSH
9662: CALL_OW 72
9666: PPUSH
9667: LD_VAR 0 4
9671: PPUSH
9672: CALL_OW 74
9676: PPUSH
9677: CALL_OW 120
9681: GO 9769
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9683: LD_VAR 0 4
9687: PPUSH
9688: CALL_OW 314
9692: NOT
9693: PUSH
9694: LD_VAR 0 4
9698: PPUSH
9699: LD_VAR 0 2
9703: PPUSH
9704: CALL_OW 308
9708: AND
9709: IFFALSE 9737
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9711: LD_VAR 0 4
9715: PPUSH
9716: LD_VAR 0 6
9720: PPUSH
9721: LD_VAR 0 4
9725: PPUSH
9726: CALL_OW 74
9730: PPUSH
9731: CALL_OW 115
9735: GO 9769
// if not IsInArea ( i , defenseArea ) then
9737: LD_VAR 0 4
9741: PPUSH
9742: LD_VAR 0 2
9746: PPUSH
9747: CALL_OW 308
9751: NOT
9752: IFFALSE 9769
// ComMoveXY ( i , 63 , 75 ) ;
9754: LD_VAR 0 4
9758: PPUSH
9759: LD_INT 63
9761: PPUSH
9762: LD_INT 75
9764: PPUSH
9765: CALL_OW 111
// end ;
9769: GO 9616
9771: POP
9772: POP
// end ;
9773: LD_VAR 0 3
9777: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9778: LD_INT 0
9780: PPUSH
9781: PPUSH
9782: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9783: LD_INT 22
9785: PUSH
9786: LD_VAR 0 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 21
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PPUSH
9809: CALL_OW 69
9813: PUSH
9814: LD_VAR 0 3
9818: LESSEQUAL
9819: IFFALSE 9927
// begin for i = 1 to vehCount do
9821: LD_ADDR_VAR 0 9
9825: PUSH
9826: DOUBLE
9827: LD_INT 1
9829: DEC
9830: ST_TO_ADDR
9831: LD_VAR 0 3
9835: PUSH
9836: FOR_TO
9837: IFFALSE 9925
// begin weapon = weaponTab [ i ] ;
9839: LD_ADDR_VAR 0 10
9843: PUSH
9844: LD_VAR 0 4
9848: PUSH
9849: LD_VAR 0 9
9853: ARRAY
9854: ST_TO_ADDR
// if weapon = 46 then
9855: LD_VAR 0 10
9859: PUSH
9860: LD_INT 46
9862: EQUAL
9863: IFFALSE 9894
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9865: LD_VAR 0 2
9869: PPUSH
9870: LD_INT 24
9872: PPUSH
9873: LD_VAR 0 5
9877: PPUSH
9878: LD_VAR 0 6
9882: PPUSH
9883: LD_VAR 0 10
9887: PPUSH
9888: CALL_OW 185
// end else
9892: GO 9923
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9894: LD_VAR 0 2
9898: PPUSH
9899: LD_VAR 0 7
9903: PPUSH
9904: LD_VAR 0 5
9908: PPUSH
9909: LD_VAR 0 6
9913: PPUSH
9914: LD_VAR 0 10
9918: PPUSH
9919: CALL_OW 185
// end ; end ;
9923: GO 9836
9925: POP
9926: POP
// end ; end ;
9927: LD_VAR 0 8
9931: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9932: LD_INT 0
9934: PPUSH
9935: PPUSH
9936: PPUSH
9937: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9938: LD_ADDR_VAR 0 8
9942: PUSH
9943: LD_INT 22
9945: PUSH
9946: LD_VAR 0 1
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 21
9957: PUSH
9958: LD_INT 2
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: LD_INT 24
9970: PUSH
9971: LD_INT 650
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: ST_TO_ADDR
// if damageVehicles > 0 then
9992: LD_VAR 0 8
9996: PUSH
9997: LD_INT 0
9999: GREATER
10000: IFFALSE 10021
// ComMoveXY ( damageVehicles , repX , repY ) ;
10002: LD_VAR 0 8
10006: PPUSH
10007: LD_VAR 0 3
10011: PPUSH
10012: LD_VAR 0 4
10016: PPUSH
10017: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10021: LD_VAR 0 8
10025: PPUSH
10026: LD_INT 95
10028: PUSH
10029: LD_VAR 0 2
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 3
10040: PUSH
10041: LD_INT 58
10043: PUSH
10044: EMPTY
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 72
10059: PUSH
10060: LD_INT 0
10062: GREATER
10063: IFFALSE 10130
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10065: LD_ADDR_VAR 0 6
10069: PUSH
10070: LD_VAR 0 8
10074: PPUSH
10075: LD_INT 95
10077: PUSH
10078: LD_VAR 0 2
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 3
10089: PUSH
10090: LD_INT 58
10092: PUSH
10093: EMPTY
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PPUSH
10104: CALL_OW 72
10108: PUSH
10109: FOR_IN
10110: IFFALSE 10128
// ComExitVehicle ( UnitsInside ( i ) ) ;
10112: LD_VAR 0 6
10116: PPUSH
10117: CALL_OW 313
10121: PPUSH
10122: CALL_OW 121
10126: GO 10109
10128: POP
10129: POP
// end ;
10130: LD_VAR 0 5
10134: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10135: LD_INT 0
10137: PPUSH
10138: PPUSH
10139: PPUSH
10140: PPUSH
10141: PPUSH
10142: PPUSH
10143: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10144: LD_ADDR_VAR 0 8
10148: PUSH
10149: LD_INT 22
10151: PUSH
10152: LD_VAR 0 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 21
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 24
10173: PUSH
10174: LD_INT 250
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 3
10183: PUSH
10184: LD_INT 58
10186: PUSH
10187: EMPTY
10188: LIST
10189: PUSH
10190: LD_INT 2
10192: PUSH
10193: LD_INT 34
10195: PUSH
10196: LD_INT 43
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: LD_INT 34
10205: PUSH
10206: LD_INT 44
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 34
10215: PUSH
10216: LD_INT 46
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: PPUSH
10240: CALL_OW 69
10244: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10245: LD_INT 22
10247: PUSH
10248: LD_VAR 0 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 21
10259: PUSH
10260: LD_INT 2
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 24
10269: PUSH
10270: LD_INT 1000
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 3
10279: PUSH
10280: LD_INT 58
10282: PUSH
10283: EMPTY
10284: LIST
10285: PUSH
10286: LD_INT 2
10288: PUSH
10289: LD_INT 34
10291: PUSH
10292: LD_INT 43
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 34
10301: PUSH
10302: LD_INT 44
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 34
10311: PUSH
10312: LD_INT 46
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PPUSH
10336: CALL_OW 69
10340: PUSH
10341: LD_INT 5
10343: PUSH
10344: LD_INT 6
10346: PUSH
10347: LD_INT 7
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: PUSH
10355: LD_OWVAR 67
10359: ARRAY
10360: GREATEREQUAL
10361: IFFALSE 10926
// repeat wait ( 0 0$1 ) ;
10363: LD_INT 35
10365: PPUSH
10366: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10370: LD_ADDR_VAR 0 8
10374: PUSH
10375: LD_INT 22
10377: PUSH
10378: LD_VAR 0 1
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 21
10389: PUSH
10390: LD_INT 2
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 24
10399: PUSH
10400: LD_INT 250
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 2
10409: PUSH
10410: LD_INT 34
10412: PUSH
10413: LD_INT 43
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 34
10422: PUSH
10423: LD_INT 44
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 34
10432: PUSH
10433: LD_INT 46
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 3
10448: PUSH
10449: LD_INT 58
10451: PUSH
10452: EMPTY
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 69
10470: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10471: LD_INT 22
10473: PUSH
10474: LD_VAR 0 1
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 95
10485: PUSH
10486: LD_VAR 0 2
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 69
10503: NOT
10504: PUSH
10505: LD_VAR 0 11
10509: PUSH
10510: LD_INT 0
10512: EQUAL
10513: AND
10514: IFFALSE 10569
// for i := 1 to wayX do
10516: LD_ADDR_VAR 0 6
10520: PUSH
10521: DOUBLE
10522: LD_INT 1
10524: DEC
10525: ST_TO_ADDR
10526: LD_VAR 0 3
10530: PUSH
10531: FOR_TO
10532: IFFALSE 10567
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10534: LD_VAR 0 8
10538: PPUSH
10539: LD_VAR 0 3
10543: PUSH
10544: LD_VAR 0 6
10548: ARRAY
10549: PPUSH
10550: LD_VAR 0 4
10554: PUSH
10555: LD_VAR 0 6
10559: ARRAY
10560: PPUSH
10561: CALL_OW 114
10565: GO 10531
10567: POP
10568: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10569: LD_INT 22
10571: PUSH
10572: LD_VAR 0 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 95
10583: PUSH
10584: LD_VAR 0 2
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: IFFALSE 10825
// begin seeEnemy = 1 ;
10603: LD_ADDR_VAR 0 11
10607: PUSH
10608: LD_INT 1
10610: ST_TO_ADDR
// for j in vehiclesOK do
10611: LD_ADDR_VAR 0 7
10615: PUSH
10616: LD_VAR 0 8
10620: PUSH
10621: FOR_IN
10622: IFFALSE 10823
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10624: LD_ADDR_VAR 0 9
10628: PUSH
10629: LD_INT 81
10631: PUSH
10632: LD_VAR 0 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 101
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PPUSH
10655: CALL_OW 69
10659: PPUSH
10660: LD_VAR 0 7
10664: PPUSH
10665: CALL_OW 74
10669: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10670: LD_ADDR_VAR 0 10
10674: PUSH
10675: LD_INT 81
10677: PUSH
10678: LD_VAR 0 1
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 101
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 59
10702: PUSH
10703: EMPTY
10704: LIST
10705: PUSH
10706: LD_INT 21
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 21
10718: PUSH
10719: LD_INT 2
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: PUSH
10737: EMPTY
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: PPUSH
10745: LD_VAR 0 7
10749: PPUSH
10750: CALL_OW 74
10754: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10755: LD_VAR 0 7
10759: PPUSH
10760: LD_VAR 0 9
10764: PPUSH
10765: CALL_OW 296
10769: PUSH
10770: LD_INT 8
10772: PLUS
10773: PUSH
10774: LD_VAR 0 7
10778: PPUSH
10779: LD_VAR 0 10
10783: PPUSH
10784: CALL_OW 296
10788: LESS
10789: IFFALSE 10807
// ComAttackUnit ( j , target1 ) else
10791: LD_VAR 0 7
10795: PPUSH
10796: LD_VAR 0 9
10800: PPUSH
10801: CALL_OW 115
10805: GO 10821
// ComAttackUnit ( j , target2 ) ;
10807: LD_VAR 0 7
10811: PPUSH
10812: LD_VAR 0 10
10816: PPUSH
10817: CALL_OW 115
// end ;
10821: GO 10621
10823: POP
10824: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10825: LD_INT 22
10827: PUSH
10828: LD_VAR 0 1
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 21
10839: PUSH
10840: LD_INT 2
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 24
10849: PUSH
10850: LD_INT 250
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: LD_INT 34
10862: PUSH
10863: LD_INT 43
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 34
10872: PUSH
10873: LD_INT 44
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 34
10882: PUSH
10883: LD_INT 46
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 3
10898: PUSH
10899: LD_INT 58
10901: PUSH
10902: EMPTY
10903: LIST
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: PPUSH
10916: CALL_OW 69
10920: PUSH
10921: LD_INT 0
10923: EQUAL
10924: IFFALSE 10363
// seeEnemy = 0 ;
10926: LD_ADDR_VAR 0 11
10930: PUSH
10931: LD_INT 0
10933: ST_TO_ADDR
// end ;
10934: LD_VAR 0 5
10938: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10939: LD_INT 0
10941: PPUSH
10942: PPUSH
10943: PPUSH
10944: PPUSH
10945: PPUSH
10946: PPUSH
// repeat wait ( 0 0$1 ) ;
10947: LD_INT 35
10949: PPUSH
10950: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: LD_INT 22
10961: PUSH
10962: LD_VAR 0 1
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 21
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 24
10983: PUSH
10984: LD_INT 651
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 69
11000: ST_TO_ADDR
// for j in vehiclesOK do
11001: LD_ADDR_VAR 0 4
11005: PUSH
11006: LD_VAR 0 7
11010: PUSH
11011: FOR_IN
11012: IFFALSE 11213
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11014: LD_ADDR_VAR 0 5
11018: PUSH
11019: LD_INT 81
11021: PUSH
11022: LD_VAR 0 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 69
11049: PPUSH
11050: LD_VAR 0 4
11054: PPUSH
11055: CALL_OW 74
11059: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11060: LD_ADDR_VAR 0 6
11064: PUSH
11065: LD_INT 81
11067: PUSH
11068: LD_VAR 0 1
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 101
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 2
11089: PUSH
11090: LD_INT 59
11092: PUSH
11093: EMPTY
11094: LIST
11095: PUSH
11096: LD_INT 21
11098: PUSH
11099: LD_INT 1
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 21
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: PPUSH
11130: CALL_OW 69
11134: PPUSH
11135: LD_VAR 0 4
11139: PPUSH
11140: CALL_OW 74
11144: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11145: LD_VAR 0 4
11149: PPUSH
11150: LD_VAR 0 5
11154: PPUSH
11155: CALL_OW 296
11159: PUSH
11160: LD_INT 8
11162: PLUS
11163: PUSH
11164: LD_VAR 0 4
11168: PPUSH
11169: LD_VAR 0 6
11173: PPUSH
11174: CALL_OW 296
11178: LESS
11179: IFFALSE 11197
// ComAttackUnit ( j , target1 ) else
11181: LD_VAR 0 4
11185: PPUSH
11186: LD_VAR 0 5
11190: PPUSH
11191: CALL_OW 115
11195: GO 11211
// ComAttackUnit ( j , target2 ) ;
11197: LD_VAR 0 4
11201: PPUSH
11202: LD_VAR 0 6
11206: PPUSH
11207: CALL_OW 115
// end ;
11211: GO 11011
11213: POP
11214: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11215: LD_INT 22
11217: PUSH
11218: LD_VAR 0 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 21
11229: PUSH
11230: LD_INT 2
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 24
11239: PUSH
11240: LD_INT 250
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: PUSH
11257: LD_INT 0
11259: EQUAL
11260: IFFALSE 10947
// end ;
11262: LD_VAR 0 2
11266: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11267: LD_INT 0
11269: PPUSH
11270: PPUSH
11271: PPUSH
11272: PPUSH
11273: PPUSH
11274: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11275: LD_ADDR_VAR 0 8
11279: PUSH
11280: LD_VAR 0 2
11284: PPUSH
11285: CALL_OW 313
11289: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11290: LD_ADDR_VAR 0 9
11294: PUSH
11295: LD_VAR 0 3
11299: PPUSH
11300: LD_INT 22
11302: PUSH
11303: LD_VAR 0 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 25
11314: PUSH
11315: LD_INT 2
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 24
11324: PUSH
11325: LD_INT 750
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 3
11334: PUSH
11335: LD_INT 54
11337: PUSH
11338: EMPTY
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 70
11355: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11356: LD_ADDR_VAR 0 6
11360: PUSH
11361: LD_VAR 0 3
11365: PPUSH
11366: LD_INT 22
11368: PUSH
11369: LD_VAR 0 1
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 21
11380: PUSH
11381: LD_INT 3
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 3
11390: PUSH
11391: LD_INT 24
11393: PUSH
11394: LD_INT 1000
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: PPUSH
11413: CALL_OW 70
11417: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11418: LD_VAR 0 6
11422: NOT
11423: PUSH
11424: LD_INT 22
11426: PUSH
11427: LD_VAR 0 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 25
11438: PUSH
11439: LD_INT 2
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 24
11448: PUSH
11449: LD_INT 250
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: PPUSH
11461: CALL_OW 69
11465: NOT
11466: AND
11467: IFFALSE 11471
// exit ;
11469: GO 11668
// if buildings_list > 0 and engineerOkInside then
11471: LD_VAR 0 6
11475: PUSH
11476: LD_INT 0
11478: GREATER
11479: PUSH
11480: LD_VAR 0 8
11484: AND
11485: IFFALSE 11511
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11487: LD_VAR 0 8
11491: PPUSH
11492: LD_INT 25
11494: PUSH
11495: LD_INT 2
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 72
11506: PPUSH
11507: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11511: LD_VAR 0 6
11515: PUSH
11516: LD_INT 0
11518: GREATER
11519: PUSH
11520: LD_VAR 0 9
11524: PUSH
11525: LD_INT 0
11527: GREATER
11528: AND
11529: IFFALSE 11549
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11531: LD_VAR 0 9
11535: PPUSH
11536: LD_VAR 0 6
11540: PUSH
11541: LD_INT 1
11543: ARRAY
11544: PPUSH
11545: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11549: LD_VAR 0 6
11553: PUSH
11554: LD_INT 0
11556: EQUAL
11557: PUSH
11558: LD_VAR 0 4
11562: PUSH
11563: LD_INT 0
11565: EQUAL
11566: AND
11567: PUSH
11568: LD_VAR 0 9
11572: PUSH
11573: LD_INT 0
11575: GREATER
11576: AND
11577: IFFALSE 11593
// ComEnterUnit ( engineerOkOutside , building ) ;
11579: LD_VAR 0 9
11583: PPUSH
11584: LD_VAR 0 2
11588: PPUSH
11589: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11593: LD_VAR 0 9
11597: PUSH
11598: LD_INT 0
11600: GREATER
11601: PUSH
11602: LD_VAR 0 6
11606: PUSH
11607: LD_INT 0
11609: EQUAL
11610: AND
11611: PUSH
11612: LD_VAR 0 4
11616: PUSH
11617: LD_INT 0
11619: GREATER
11620: AND
11621: IFFALSE 11668
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11623: LD_VAR 0 9
11627: PPUSH
11628: LD_VAR 0 4
11632: PUSH
11633: LD_INT 1
11635: ARRAY
11636: PPUSH
11637: LD_VAR 0 4
11641: PUSH
11642: LD_INT 2
11644: ARRAY
11645: PPUSH
11646: LD_VAR 0 4
11650: PUSH
11651: LD_INT 3
11653: ARRAY
11654: PPUSH
11655: LD_VAR 0 4
11659: PUSH
11660: LD_INT 4
11662: ARRAY
11663: PPUSH
11664: CALL_OW 145
// end ;
11668: LD_VAR 0 5
11672: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11673: LD_INT 0
11675: PPUSH
11676: PPUSH
11677: PPUSH
11678: PPUSH
11679: PPUSH
11680: PPUSH
11681: PPUSH
11682: PPUSH
11683: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11684: LD_ADDR_VAR 0 6
11688: PUSH
11689: LD_INT 22
11691: PUSH
11692: LD_VAR 0 1
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 4
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 23
11713: PUSH
11714: LD_INT 2
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 24
11723: PUSH
11724: LD_INT 251
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: PPUSH
11737: CALL_OW 69
11741: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11742: LD_ADDR_VAR 0 7
11746: PUSH
11747: LD_VAR 0 3
11751: PPUSH
11752: LD_INT 22
11754: PUSH
11755: LD_VAR 0 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 23
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 4
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 50
11786: PUSH
11787: EMPTY
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: PPUSH
11796: CALL_OW 70
11800: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11801: LD_ADDR_VAR 0 10
11805: PUSH
11806: LD_VAR 0 3
11810: PPUSH
11811: LD_INT 22
11813: PUSH
11814: LD_VAR 0 1
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 21
11825: PUSH
11826: LD_INT 1
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 3
11835: PUSH
11836: LD_INT 25
11838: PUSH
11839: LD_INT 3
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 3
11852: PUSH
11853: LD_INT 24
11855: PUSH
11856: LD_INT 750
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: PPUSH
11873: CALL_OW 70
11877: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11878: LD_ADDR_VAR 0 11
11882: PUSH
11883: LD_VAR 0 2
11887: PPUSH
11888: LD_INT 22
11890: PUSH
11891: LD_VAR 0 1
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 21
11902: PUSH
11903: LD_INT 1
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 3
11912: PUSH
11913: LD_INT 25
11915: PUSH
11916: LD_INT 3
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 3
11929: PUSH
11930: LD_INT 24
11932: PUSH
11933: LD_INT 1000
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 70
11954: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11955: LD_VAR 0 10
11959: NOT
11960: PUSH
11961: LD_VAR 0 11
11965: NOT
11966: AND
11967: PUSH
11968: LD_VAR 0 6
11972: NOT
11973: AND
11974: IFFALSE 11978
// exit ;
11976: GO 12212
// if damageUnits > 0 and sci_list > 0 then
11978: LD_VAR 0 10
11982: PUSH
11983: LD_INT 0
11985: GREATER
11986: PUSH
11987: LD_VAR 0 6
11991: PUSH
11992: LD_INT 0
11994: GREATER
11995: AND
11996: IFFALSE 12012
// ComMoveToArea ( damageUnits , healArea ) ;
11998: LD_VAR 0 10
12002: PPUSH
12003: LD_VAR 0 2
12007: PPUSH
12008: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12012: LD_VAR 0 11
12016: PUSH
12017: LD_INT 0
12019: GREATER
12020: PUSH
12021: LD_VAR 0 6
12025: PUSH
12026: LD_INT 0
12028: GREATER
12029: AND
12030: IFFALSE 12041
// ComExitBuilding ( sci_list ) ;
12032: LD_VAR 0 6
12036: PPUSH
12037: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12041: LD_VAR 0 11
12045: PUSH
12046: LD_INT 0
12048: GREATER
12049: PUSH
12050: LD_VAR 0 7
12054: PUSH
12055: LD_INT 0
12057: GREATER
12058: AND
12059: IFFALSE 12079
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12061: LD_VAR 0 7
12065: PPUSH
12066: LD_VAR 0 11
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: PPUSH
12075: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12079: LD_VAR 0 10
12083: PUSH
12084: LD_INT 0
12086: EQUAL
12087: PUSH
12088: LD_VAR 0 11
12092: PUSH
12093: LD_INT 0
12095: EQUAL
12096: AND
12097: PUSH
12098: LD_VAR 0 7
12102: PUSH
12103: LD_INT 0
12105: GREATER
12106: AND
12107: IFFALSE 12212
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12109: LD_ADDR_VAR 0 12
12113: PUSH
12114: LD_INT 22
12116: PUSH
12117: LD_VAR 0 1
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 3
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 30
12138: PUSH
12139: LD_INT 8
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: PPUSH
12151: CALL_OW 69
12155: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12156: LD_ADDR_VAR 0 13
12160: PUSH
12161: LD_INT 1
12163: PPUSH
12164: LD_VAR 0 12
12168: PPUSH
12169: CALL_OW 12
12173: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12174: LD_VAR 0 7
12178: PPUSH
12179: LD_INT 3
12181: PUSH
12182: LD_INT 60
12184: PUSH
12185: EMPTY
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 72
12196: PPUSH
12197: LD_VAR 0 12
12201: PUSH
12202: LD_VAR 0 13
12206: ARRAY
12207: PPUSH
12208: CALL_OW 120
// end ; end ;
12212: LD_VAR 0 5
12216: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12217: LD_INT 0
12219: PPUSH
12220: PPUSH
12221: PPUSH
12222: PPUSH
12223: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12224: LD_ADDR_VAR 0 6
12228: PUSH
12229: LD_INT 22
12231: PUSH
12232: LD_VAR 0 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 2
12243: PUSH
12244: LD_INT 30
12246: PUSH
12247: LD_INT 31
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 30
12256: PUSH
12257: LD_INT 32
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 30
12266: PUSH
12267: LD_INT 33
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 30
12276: PUSH
12277: LD_INT 4
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 30
12286: PUSH
12287: LD_INT 5
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PPUSH
12306: CALL_OW 69
12310: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12311: LD_ADDR_VAR 0 7
12315: PUSH
12316: LD_INT 22
12318: PUSH
12319: LD_VAR 0 2
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 21
12330: PUSH
12331: LD_INT 3
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 58
12340: PUSH
12341: EMPTY
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12354: LD_VAR 0 6
12358: PUSH
12359: LD_INT 0
12361: GREATER
12362: PUSH
12363: LD_VAR 0 7
12367: PUSH
12368: LD_INT 0
12370: GREATER
12371: AND
12372: IFFALSE 12442
// begin for i in turretsList do
12374: LD_ADDR_VAR 0 4
12378: PUSH
12379: LD_VAR 0 6
12383: PUSH
12384: FOR_IN
12385: IFFALSE 12440
// begin for j in enemyBuildings do
12387: LD_ADDR_VAR 0 5
12391: PUSH
12392: LD_VAR 0 7
12396: PUSH
12397: FOR_IN
12398: IFFALSE 12436
// begin if GetDistUnits ( i , j ) < 20 then
12400: LD_VAR 0 4
12404: PPUSH
12405: LD_VAR 0 5
12409: PPUSH
12410: CALL_OW 296
12414: PUSH
12415: LD_INT 20
12417: LESS
12418: IFFALSE 12434
// begin ComAttackUnit ( i , j ) ;
12420: LD_VAR 0 4
12424: PPUSH
12425: LD_VAR 0 5
12429: PPUSH
12430: CALL_OW 115
// end ; end ;
12434: GO 12397
12436: POP
12437: POP
// end ;
12438: GO 12384
12440: POP
12441: POP
// end ; end ;
12442: LD_VAR 0 3
12446: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12447: LD_INT 0
12449: PPUSH
12450: PPUSH
12451: PPUSH
12452: PPUSH
12453: PPUSH
12454: PPUSH
12455: PPUSH
12456: PPUSH
12457: PPUSH
12458: PPUSH
12459: PPUSH
// for i = 1 to medicCount do
12460: LD_ADDR_VAR 0 14
12464: PUSH
12465: DOUBLE
12466: LD_INT 1
12468: DEC
12469: ST_TO_ADDR
12470: LD_VAR 0 7
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12558
// begin uc_side = side ;
12478: LD_ADDR_OWVAR 20
12482: PUSH
12483: LD_VAR 0 1
12487: ST_TO_ADDR
// uc_nation = nation ;
12488: LD_ADDR_OWVAR 21
12492: PUSH
12493: LD_VAR 0 2
12497: ST_TO_ADDR
// hc_name =  ;
12498: LD_ADDR_OWVAR 26
12502: PUSH
12503: LD_STRING 
12505: ST_TO_ADDR
// hc_gallery =  ;
12506: LD_ADDR_OWVAR 33
12510: PUSH
12511: LD_STRING 
12513: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12514: LD_INT 0
12516: PPUSH
12517: LD_INT 4
12519: PPUSH
12520: LD_VAR 0 8
12524: PPUSH
12525: CALL_OW 380
// un = CreateHuman ;
12529: LD_ADDR_VAR 0 16
12533: PUSH
12534: CALL_OW 44
12538: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12539: LD_VAR 0 16
12543: PPUSH
12544: LD_VAR 0 9
12548: PPUSH
12549: LD_INT 0
12551: PPUSH
12552: CALL_OW 49
// end ;
12556: GO 12475
12558: POP
12559: POP
// for i = 1 to soldierCount do
12560: LD_ADDR_VAR 0 14
12564: PUSH
12565: DOUBLE
12566: LD_INT 1
12568: DEC
12569: ST_TO_ADDR
12570: LD_VAR 0 3
12574: PUSH
12575: FOR_TO
12576: IFFALSE 12658
// begin uc_side = side ;
12578: LD_ADDR_OWVAR 20
12582: PUSH
12583: LD_VAR 0 1
12587: ST_TO_ADDR
// uc_nation = nation ;
12588: LD_ADDR_OWVAR 21
12592: PUSH
12593: LD_VAR 0 2
12597: ST_TO_ADDR
// hc_name =  ;
12598: LD_ADDR_OWVAR 26
12602: PUSH
12603: LD_STRING 
12605: ST_TO_ADDR
// hc_gallery =  ;
12606: LD_ADDR_OWVAR 33
12610: PUSH
12611: LD_STRING 
12613: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12614: LD_INT 0
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: LD_VAR 0 8
12624: PPUSH
12625: CALL_OW 380
// un = CreateHuman ;
12629: LD_ADDR_VAR 0 16
12633: PUSH
12634: CALL_OW 44
12638: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12639: LD_VAR 0 16
12643: PPUSH
12644: LD_VAR 0 9
12648: PPUSH
12649: LD_INT 0
12651: PPUSH
12652: CALL_OW 49
// end ;
12656: GO 12575
12658: POP
12659: POP
// for i = 1 to sniperCount do
12660: LD_ADDR_VAR 0 14
12664: PUSH
12665: DOUBLE
12666: LD_INT 1
12668: DEC
12669: ST_TO_ADDR
12670: LD_VAR 0 4
12674: PUSH
12675: FOR_TO
12676: IFFALSE 12758
// begin uc_side = side ;
12678: LD_ADDR_OWVAR 20
12682: PUSH
12683: LD_VAR 0 1
12687: ST_TO_ADDR
// uc_nation = nation ;
12688: LD_ADDR_OWVAR 21
12692: PUSH
12693: LD_VAR 0 2
12697: ST_TO_ADDR
// hc_name =  ;
12698: LD_ADDR_OWVAR 26
12702: PUSH
12703: LD_STRING 
12705: ST_TO_ADDR
// hc_gallery =  ;
12706: LD_ADDR_OWVAR 33
12710: PUSH
12711: LD_STRING 
12713: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12714: LD_INT 0
12716: PPUSH
12717: LD_INT 5
12719: PPUSH
12720: LD_VAR 0 8
12724: PPUSH
12725: CALL_OW 380
// un = CreateHuman ;
12729: LD_ADDR_VAR 0 16
12733: PUSH
12734: CALL_OW 44
12738: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12739: LD_VAR 0 16
12743: PPUSH
12744: LD_VAR 0 9
12748: PPUSH
12749: LD_INT 0
12751: PPUSH
12752: CALL_OW 49
// end ;
12756: GO 12675
12758: POP
12759: POP
// for i = 1 to bazookCount do
12760: LD_ADDR_VAR 0 14
12764: PUSH
12765: DOUBLE
12766: LD_INT 1
12768: DEC
12769: ST_TO_ADDR
12770: LD_VAR 0 5
12774: PUSH
12775: FOR_TO
12776: IFFALSE 12858
// begin uc_side = side ;
12778: LD_ADDR_OWVAR 20
12782: PUSH
12783: LD_VAR 0 1
12787: ST_TO_ADDR
// uc_nation = nation ;
12788: LD_ADDR_OWVAR 21
12792: PUSH
12793: LD_VAR 0 2
12797: ST_TO_ADDR
// hc_name =  ;
12798: LD_ADDR_OWVAR 26
12802: PUSH
12803: LD_STRING 
12805: ST_TO_ADDR
// hc_gallery =  ;
12806: LD_ADDR_OWVAR 33
12810: PUSH
12811: LD_STRING 
12813: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12814: LD_INT 0
12816: PPUSH
12817: LD_INT 9
12819: PPUSH
12820: LD_VAR 0 8
12824: PPUSH
12825: CALL_OW 380
// un = CreateHuman ;
12829: LD_ADDR_VAR 0 16
12833: PUSH
12834: CALL_OW 44
12838: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12839: LD_VAR 0 16
12843: PPUSH
12844: LD_VAR 0 9
12848: PPUSH
12849: LD_INT 0
12851: PPUSH
12852: CALL_OW 49
// end ;
12856: GO 12775
12858: POP
12859: POP
// for i = 1 to mortalCount do
12860: LD_ADDR_VAR 0 14
12864: PUSH
12865: DOUBLE
12866: LD_INT 1
12868: DEC
12869: ST_TO_ADDR
12870: LD_VAR 0 6
12874: PUSH
12875: FOR_TO
12876: IFFALSE 12958
// begin uc_side = side ;
12878: LD_ADDR_OWVAR 20
12882: PUSH
12883: LD_VAR 0 1
12887: ST_TO_ADDR
// uc_nation = nation ;
12888: LD_ADDR_OWVAR 21
12892: PUSH
12893: LD_VAR 0 2
12897: ST_TO_ADDR
// hc_name =  ;
12898: LD_ADDR_OWVAR 26
12902: PUSH
12903: LD_STRING 
12905: ST_TO_ADDR
// hc_gallery =  ;
12906: LD_ADDR_OWVAR 33
12910: PUSH
12911: LD_STRING 
12913: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12914: LD_INT 0
12916: PPUSH
12917: LD_INT 8
12919: PPUSH
12920: LD_VAR 0 8
12924: PPUSH
12925: CALL_OW 380
// un = CreateHuman ;
12929: LD_ADDR_VAR 0 16
12933: PUSH
12934: CALL_OW 44
12938: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12939: LD_VAR 0 16
12943: PPUSH
12944: LD_VAR 0 9
12948: PPUSH
12949: LD_INT 0
12951: PPUSH
12952: CALL_OW 49
// end ;
12956: GO 12875
12958: POP
12959: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12960: LD_ADDR_VAR 0 19
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_VAR 0 1
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 2
12979: PUSH
12980: LD_INT 25
12982: PUSH
12983: LD_INT 1
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 25
12992: PUSH
12993: LD_INT 5
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 25
13002: PUSH
13003: LD_INT 8
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 25
13012: PUSH
13013: LD_INT 9
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13036: LD_ADDR_VAR 0 18
13040: PUSH
13041: LD_INT 22
13043: PUSH
13044: LD_VAR 0 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 25
13055: PUSH
13056: LD_INT 4
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PPUSH
13067: CALL_OW 69
13071: ST_TO_ADDR
// for i in medic_list do
13072: LD_ADDR_VAR 0 14
13076: PUSH
13077: LD_VAR 0 18
13081: PUSH
13082: FOR_IN
13083: IFFALSE 13101
// ComMoveToArea ( i , healArea ) ;
13085: LD_VAR 0 14
13089: PPUSH
13090: LD_VAR 0 10
13094: PPUSH
13095: CALL_OW 113
13099: GO 13082
13101: POP
13102: POP
// if strategy = 1 then
13103: LD_VAR 0 12
13107: PUSH
13108: LD_INT 1
13110: EQUAL
13111: IFFALSE 13657
// begin repeat wait ( 0 0$3 ) ;
13113: LD_INT 105
13115: PPUSH
13116: CALL_OW 67
// for i in soldiersOK_list do
13120: LD_ADDR_VAR 0 14
13124: PUSH
13125: LD_VAR 0 19
13129: PUSH
13130: FOR_IN
13131: IFFALSE 13195
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13133: LD_VAR 0 14
13137: PPUSH
13138: LD_INT 91
13140: PPUSH
13141: LD_INT 63
13143: PPUSH
13144: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13148: LD_VAR 0 14
13152: PPUSH
13153: LD_INT 101
13155: PPUSH
13156: LD_INT 53
13158: PPUSH
13159: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13163: LD_VAR 0 14
13167: PPUSH
13168: LD_INT 75
13170: PPUSH
13171: LD_INT 23
13173: PPUSH
13174: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13178: LD_VAR 0 14
13182: PPUSH
13183: LD_INT 78
13185: PPUSH
13186: LD_INT 8
13188: PPUSH
13189: CALL_OW 174
// end ;
13193: GO 13130
13195: POP
13196: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13197: LD_INT 12
13199: PPUSH
13200: LD_INT 22
13202: PUSH
13203: LD_VAR 0 1
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PPUSH
13212: CALL_OW 70
13216: PUSH
13217: LD_INT 2
13219: GREATER
13220: IFFALSE 13113
// repeat wait ( 0 0$1 ) ;
13222: LD_INT 35
13224: PPUSH
13225: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13229: LD_ADDR_VAR 0 17
13233: PUSH
13234: LD_INT 22
13236: PUSH
13237: LD_VAR 0 1
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 1
13248: PUSH
13249: LD_INT 3
13251: PUSH
13252: LD_INT 24
13254: PUSH
13255: LD_INT 550
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 24
13268: PUSH
13269: LD_INT 250
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PPUSH
13285: CALL_OW 69
13289: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13290: LD_ADDR_VAR 0 19
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_VAR 0 1
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: LD_INT 25
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 25
13322: PUSH
13323: LD_INT 5
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 25
13332: PUSH
13333: LD_INT 8
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 25
13342: PUSH
13343: LD_INT 9
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 24
13359: PUSH
13360: LD_INT 1000
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: PPUSH
13372: CALL_OW 69
13376: ST_TO_ADDR
// if medicCount > 0 then
13377: LD_VAR 0 7
13381: PUSH
13382: LD_INT 0
13384: GREATER
13385: IFFALSE 13459
// begin if damageUnit_list > 0 then
13387: LD_VAR 0 17
13391: PUSH
13392: LD_INT 0
13394: GREATER
13395: IFFALSE 13459
// begin for i in damageUnit_list do
13397: LD_ADDR_VAR 0 14
13401: PUSH
13402: LD_VAR 0 17
13406: PUSH
13407: FOR_IN
13408: IFFALSE 13457
// begin ComMoveToArea ( i , healArea ) ;
13410: LD_VAR 0 14
13414: PPUSH
13415: LD_VAR 0 10
13419: PPUSH
13420: CALL_OW 113
// for j in medic_list do
13424: LD_ADDR_VAR 0 15
13428: PUSH
13429: LD_VAR 0 18
13433: PUSH
13434: FOR_IN
13435: IFFALSE 13453
// AddComHeal ( j , i ) ;
13437: LD_VAR 0 15
13441: PPUSH
13442: LD_VAR 0 14
13446: PPUSH
13447: CALL_OW 188
13451: GO 13434
13453: POP
13454: POP
// end ;
13455: GO 13407
13457: POP
13458: POP
// end ; end ; for i in soldiersOK_list do
13459: LD_ADDR_VAR 0 14
13463: PUSH
13464: LD_VAR 0 19
13468: PUSH
13469: FOR_IN
13470: IFFALSE 13646
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13472: LD_ADDR_VAR 0 22
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_VAR 0 11
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: PPUSH
13494: LD_VAR 0 14
13498: PPUSH
13499: CALL_OW 74
13503: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13504: LD_ADDR_VAR 0 23
13508: PUSH
13509: LD_INT 22
13511: PUSH
13512: LD_VAR 0 11
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 2
13523: PUSH
13524: LD_INT 59
13526: PUSH
13527: EMPTY
13528: LIST
13529: PUSH
13530: LD_INT 21
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 21
13542: PUSH
13543: LD_INT 2
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: EMPTY
13561: LIST
13562: PPUSH
13563: CALL_OW 69
13567: PPUSH
13568: LD_VAR 0 14
13572: PPUSH
13573: CALL_OW 74
13577: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13578: LD_VAR 0 14
13582: PPUSH
13583: LD_VAR 0 22
13587: PPUSH
13588: CALL_OW 296
13592: PUSH
13593: LD_INT 6
13595: PLUS
13596: PUSH
13597: LD_VAR 0 14
13601: PPUSH
13602: LD_VAR 0 23
13606: PPUSH
13607: CALL_OW 296
13611: LESS
13612: IFFALSE 13630
// begin ComAttackUnit ( i , target1 ) ;
13614: LD_VAR 0 14
13618: PPUSH
13619: LD_VAR 0 22
13623: PPUSH
13624: CALL_OW 115
// end else
13628: GO 13644
// begin ComAttackUnit ( i , target2 ) ;
13630: LD_VAR 0 14
13634: PPUSH
13635: LD_VAR 0 23
13639: PPUSH
13640: CALL_OW 115
// end ; end ;
13644: GO 13469
13646: POP
13647: POP
// until soldiersOK_list = [ ] ;
13648: LD_VAR 0 19
13652: PUSH
13653: EMPTY
13654: EQUAL
13655: IFFALSE 13222
// end ; if strategy = 2 then
13657: LD_VAR 0 12
13661: PUSH
13662: LD_INT 2
13664: EQUAL
13665: IFFALSE 14181
// begin repeat wait ( 0 0$1 ) ;
13667: LD_INT 35
13669: PPUSH
13670: CALL_OW 67
// for i in soldiersOK_list do
13674: LD_ADDR_VAR 0 14
13678: PUSH
13679: LD_VAR 0 19
13683: PUSH
13684: FOR_IN
13685: IFFALSE 13719
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13687: LD_VAR 0 14
13691: PPUSH
13692: LD_INT 91
13694: PPUSH
13695: LD_INT 63
13697: PPUSH
13698: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13702: LD_VAR 0 14
13706: PPUSH
13707: LD_INT 75
13709: PPUSH
13710: LD_INT 33
13712: PPUSH
13713: CALL_OW 174
// end ;
13717: GO 13684
13719: POP
13720: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13721: LD_INT 13
13723: PPUSH
13724: LD_INT 22
13726: PUSH
13727: LD_VAR 0 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PPUSH
13736: CALL_OW 70
13740: PUSH
13741: LD_INT 2
13743: GREATER
13744: IFFALSE 13667
// repeat wait ( 0 0$3 ) ;
13746: LD_INT 105
13748: PPUSH
13749: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13753: LD_ADDR_VAR 0 17
13757: PUSH
13758: LD_INT 22
13760: PUSH
13761: LD_VAR 0 1
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 1
13772: PUSH
13773: LD_INT 3
13775: PUSH
13776: LD_INT 24
13778: PUSH
13779: LD_INT 550
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 24
13792: PUSH
13793: LD_INT 250
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PPUSH
13809: CALL_OW 69
13813: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13814: LD_ADDR_VAR 0 19
13818: PUSH
13819: LD_INT 22
13821: PUSH
13822: LD_VAR 0 1
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 2
13833: PUSH
13834: LD_INT 25
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 25
13846: PUSH
13847: LD_INT 5
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 25
13856: PUSH
13857: LD_INT 8
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 25
13866: PUSH
13867: LD_INT 9
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 24
13883: PUSH
13884: LD_INT 1000
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: LIST
13895: PPUSH
13896: CALL_OW 69
13900: ST_TO_ADDR
// if medicCount > 0 then
13901: LD_VAR 0 7
13905: PUSH
13906: LD_INT 0
13908: GREATER
13909: IFFALSE 13983
// begin if damageUnit_list > 0 then
13911: LD_VAR 0 17
13915: PUSH
13916: LD_INT 0
13918: GREATER
13919: IFFALSE 13983
// begin for i in damageUnit_list do
13921: LD_ADDR_VAR 0 14
13925: PUSH
13926: LD_VAR 0 17
13930: PUSH
13931: FOR_IN
13932: IFFALSE 13981
// begin ComMoveToArea ( i , healArea ) ;
13934: LD_VAR 0 14
13938: PPUSH
13939: LD_VAR 0 10
13943: PPUSH
13944: CALL_OW 113
// for j in medic_list do
13948: LD_ADDR_VAR 0 15
13952: PUSH
13953: LD_VAR 0 18
13957: PUSH
13958: FOR_IN
13959: IFFALSE 13977
// AddComHeal ( j , i ) ;
13961: LD_VAR 0 15
13965: PPUSH
13966: LD_VAR 0 14
13970: PPUSH
13971: CALL_OW 188
13975: GO 13958
13977: POP
13978: POP
// end ;
13979: GO 13931
13981: POP
13982: POP
// end ; end ; for i in soldiersOK_list do
13983: LD_ADDR_VAR 0 14
13987: PUSH
13988: LD_VAR 0 19
13992: PUSH
13993: FOR_IN
13994: IFFALSE 14170
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13996: LD_ADDR_VAR 0 22
14000: PUSH
14001: LD_INT 22
14003: PUSH
14004: LD_VAR 0 11
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 69
14017: PPUSH
14018: LD_VAR 0 14
14022: PPUSH
14023: CALL_OW 74
14027: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14028: LD_ADDR_VAR 0 23
14032: PUSH
14033: LD_INT 22
14035: PUSH
14036: LD_VAR 0 11
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 2
14047: PUSH
14048: LD_INT 59
14050: PUSH
14051: EMPTY
14052: LIST
14053: PUSH
14054: LD_INT 21
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 21
14066: PUSH
14067: LD_INT 2
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: PPUSH
14087: CALL_OW 69
14091: PPUSH
14092: LD_VAR 0 14
14096: PPUSH
14097: CALL_OW 74
14101: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14102: LD_VAR 0 14
14106: PPUSH
14107: LD_VAR 0 22
14111: PPUSH
14112: CALL_OW 296
14116: PUSH
14117: LD_INT 6
14119: PLUS
14120: PUSH
14121: LD_VAR 0 14
14125: PPUSH
14126: LD_VAR 0 23
14130: PPUSH
14131: CALL_OW 296
14135: LESS
14136: IFFALSE 14154
// begin ComAttackUnit ( i , target1 ) ;
14138: LD_VAR 0 14
14142: PPUSH
14143: LD_VAR 0 22
14147: PPUSH
14148: CALL_OW 115
// end else
14152: GO 14168
// begin ComAttackUnit ( i , target2 ) ;
14154: LD_VAR 0 14
14158: PPUSH
14159: LD_VAR 0 23
14163: PPUSH
14164: CALL_OW 115
// end ; end ;
14168: GO 13993
14170: POP
14171: POP
// until soldiersOK_list = [ ] ;
14172: LD_VAR 0 19
14176: PUSH
14177: EMPTY
14178: EQUAL
14179: IFFALSE 13746
// end ; if strategy = 3 then
14181: LD_VAR 0 12
14185: PUSH
14186: LD_INT 3
14188: EQUAL
14189: IFFALSE 14735
// begin repeat wait ( 0 0$3 ) ;
14191: LD_INT 105
14193: PPUSH
14194: CALL_OW 67
// for i in soldiersOK_list do
14198: LD_ADDR_VAR 0 14
14202: PUSH
14203: LD_VAR 0 19
14207: PUSH
14208: FOR_IN
14209: IFFALSE 14273
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14211: LD_VAR 0 14
14215: PPUSH
14216: LD_INT 63
14218: PPUSH
14219: LD_INT 71
14221: PPUSH
14222: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14226: LD_VAR 0 14
14230: PPUSH
14231: LD_INT 35
14233: PPUSH
14234: LD_INT 44
14236: PPUSH
14237: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14241: LD_VAR 0 14
14245: PPUSH
14246: LD_INT 23
14248: PPUSH
14249: LD_INT 18
14251: PPUSH
14252: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14256: LD_VAR 0 14
14260: PPUSH
14261: LD_INT 26
14263: PPUSH
14264: LD_INT 12
14266: PPUSH
14267: CALL_OW 174
// end ;
14271: GO 14208
14273: POP
14274: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14275: LD_INT 14
14277: PPUSH
14278: LD_INT 22
14280: PUSH
14281: LD_VAR 0 1
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PPUSH
14290: CALL_OW 70
14294: PUSH
14295: LD_INT 2
14297: GREATER
14298: IFFALSE 14191
// repeat wait ( 0 0$1 ) ;
14300: LD_INT 35
14302: PPUSH
14303: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14307: LD_ADDR_VAR 0 17
14311: PUSH
14312: LD_INT 22
14314: PUSH
14315: LD_VAR 0 1
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 1
14326: PUSH
14327: LD_INT 3
14329: PUSH
14330: LD_INT 24
14332: PUSH
14333: LD_INT 550
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 24
14346: PUSH
14347: LD_INT 250
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PPUSH
14363: CALL_OW 69
14367: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14368: LD_ADDR_VAR 0 19
14372: PUSH
14373: LD_INT 22
14375: PUSH
14376: LD_VAR 0 1
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: LD_INT 25
14390: PUSH
14391: LD_INT 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 25
14400: PUSH
14401: LD_INT 5
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 25
14410: PUSH
14411: LD_INT 8
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 25
14420: PUSH
14421: LD_INT 9
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 24
14437: PUSH
14438: LD_INT 1000
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: PPUSH
14450: CALL_OW 69
14454: ST_TO_ADDR
// if medicCount > 0 then
14455: LD_VAR 0 7
14459: PUSH
14460: LD_INT 0
14462: GREATER
14463: IFFALSE 14537
// begin if damageUnit_list > 0 then
14465: LD_VAR 0 17
14469: PUSH
14470: LD_INT 0
14472: GREATER
14473: IFFALSE 14537
// begin for i in damageUnit_list do
14475: LD_ADDR_VAR 0 14
14479: PUSH
14480: LD_VAR 0 17
14484: PUSH
14485: FOR_IN
14486: IFFALSE 14535
// begin ComMoveToArea ( i , healArea ) ;
14488: LD_VAR 0 14
14492: PPUSH
14493: LD_VAR 0 10
14497: PPUSH
14498: CALL_OW 113
// for j in medic_list do
14502: LD_ADDR_VAR 0 15
14506: PUSH
14507: LD_VAR 0 18
14511: PUSH
14512: FOR_IN
14513: IFFALSE 14531
// AddComHeal ( j , i ) ;
14515: LD_VAR 0 15
14519: PPUSH
14520: LD_VAR 0 14
14524: PPUSH
14525: CALL_OW 188
14529: GO 14512
14531: POP
14532: POP
// end ;
14533: GO 14485
14535: POP
14536: POP
// end ; end ; for i in soldiersOK_list do
14537: LD_ADDR_VAR 0 14
14541: PUSH
14542: LD_VAR 0 19
14546: PUSH
14547: FOR_IN
14548: IFFALSE 14724
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14550: LD_ADDR_VAR 0 22
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_VAR 0 11
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 69
14571: PPUSH
14572: LD_VAR 0 14
14576: PPUSH
14577: CALL_OW 74
14581: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14582: LD_ADDR_VAR 0 23
14586: PUSH
14587: LD_INT 22
14589: PUSH
14590: LD_VAR 0 11
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 2
14601: PUSH
14602: LD_INT 59
14604: PUSH
14605: EMPTY
14606: LIST
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 1
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 21
14620: PUSH
14621: LD_INT 2
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: PPUSH
14641: CALL_OW 69
14645: PPUSH
14646: LD_VAR 0 14
14650: PPUSH
14651: CALL_OW 74
14655: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14656: LD_VAR 0 14
14660: PPUSH
14661: LD_VAR 0 22
14665: PPUSH
14666: CALL_OW 296
14670: PUSH
14671: LD_INT 6
14673: PLUS
14674: PUSH
14675: LD_VAR 0 14
14679: PPUSH
14680: LD_VAR 0 23
14684: PPUSH
14685: CALL_OW 296
14689: LESS
14690: IFFALSE 14708
// begin ComAttackUnit ( i , target1 ) ;
14692: LD_VAR 0 14
14696: PPUSH
14697: LD_VAR 0 22
14701: PPUSH
14702: CALL_OW 115
// end else
14706: GO 14722
// begin ComAttackUnit ( i , target2 ) ;
14708: LD_VAR 0 14
14712: PPUSH
14713: LD_VAR 0 23
14717: PPUSH
14718: CALL_OW 115
// end ; end ;
14722: GO 14547
14724: POP
14725: POP
// until soldiersOK_list = [ ] ;
14726: LD_VAR 0 19
14730: PUSH
14731: EMPTY
14732: EQUAL
14733: IFFALSE 14300
// end ; end ;
14735: LD_VAR 0 13
14739: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14740: LD_INT 0
14742: PPUSH
14743: PPUSH
14744: PPUSH
14745: PPUSH
14746: PPUSH
14747: PPUSH
14748: PPUSH
14749: PPUSH
14750: PPUSH
14751: PPUSH
14752: PPUSH
// amChassisTab = [ ] ;
14753: LD_ADDR_VAR 0 19
14757: PUSH
14758: EMPTY
14759: ST_TO_ADDR
// arChassisTab = [ ] ;
14760: LD_ADDR_VAR 0 18
14764: PUSH
14765: EMPTY
14766: ST_TO_ADDR
// ruChassisTab = [ ] ;
14767: LD_ADDR_VAR 0 17
14771: PUSH
14772: EMPTY
14773: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14774: LD_INT 35
14776: PPUSH
14777: CALL_OW 67
// if nation = 1 then
14781: LD_VAR 0 5
14785: PUSH
14786: LD_INT 1
14788: EQUAL
14789: IFFALSE 15280
// begin uc_side = side ;
14791: LD_ADDR_OWVAR 20
14795: PUSH
14796: LD_VAR 0 2
14800: ST_TO_ADDR
// uc_nation = nation ;
14801: LD_ADDR_OWVAR 21
14805: PUSH
14806: LD_VAR 0 5
14810: ST_TO_ADDR
// vc_engine = vehengine ;
14811: LD_ADDR_OWVAR 39
14815: PUSH
14816: LD_VAR 0 6
14820: ST_TO_ADDR
// vc_control = vehcontrol ;
14821: LD_ADDR_OWVAR 38
14825: PUSH
14826: LD_VAR 0 7
14830: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14831: LD_ADDR_OWVAR 40
14835: PUSH
14836: LD_VAR 0 10
14840: PUSH
14841: LD_INT 1
14843: PPUSH
14844: LD_VAR 0 10
14848: PPUSH
14849: CALL_OW 12
14853: ARRAY
14854: ST_TO_ADDR
// for j = 1 to AMWeapon do
14855: LD_ADDR_VAR 0 14
14859: PUSH
14860: DOUBLE
14861: LD_INT 1
14863: DEC
14864: ST_TO_ADDR
14865: LD_VAR 0 10
14869: PUSH
14870: FOR_TO
14871: IFFALSE 15172
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14873: LD_VAR 0 10
14877: PUSH
14878: LD_VAR 0 14
14882: ARRAY
14883: PUSH
14884: LD_INT 2
14886: EQUAL
14887: PUSH
14888: LD_VAR 0 10
14892: PUSH
14893: LD_VAR 0 14
14897: ARRAY
14898: PUSH
14899: LD_INT 3
14901: EQUAL
14902: OR
14903: IFFALSE 14956
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14905: LD_ADDR_VAR 0 19
14909: PUSH
14910: LD_INT 1
14912: PUSH
14913: LD_INT 2
14915: PUSH
14916: LD_INT 3
14918: PUSH
14919: LD_INT 4
14921: PUSH
14922: LD_INT 5
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14932: LD_ADDR_OWVAR 37
14936: PUSH
14937: LD_VAR 0 19
14941: PUSH
14942: LD_INT 1
14944: PPUSH
14945: LD_VAR 0 19
14949: PPUSH
14950: CALL_OW 12
14954: ARRAY
14955: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14956: LD_VAR 0 10
14960: PUSH
14961: LD_VAR 0 14
14965: ARRAY
14966: PUSH
14967: LD_INT 4
14969: EQUAL
14970: PUSH
14971: LD_VAR 0 10
14975: PUSH
14976: LD_VAR 0 14
14980: ARRAY
14981: PUSH
14982: LD_INT 5
14984: EQUAL
14985: OR
14986: PUSH
14987: LD_VAR 0 10
14991: PUSH
14992: LD_VAR 0 14
14996: ARRAY
14997: PUSH
14998: LD_INT 9
15000: EQUAL
15001: OR
15002: PUSH
15003: LD_VAR 0 10
15007: PUSH
15008: LD_VAR 0 14
15012: ARRAY
15013: PUSH
15014: LD_INT 11
15016: EQUAL
15017: OR
15018: PUSH
15019: LD_VAR 0 10
15023: PUSH
15024: LD_VAR 0 14
15028: ARRAY
15029: PUSH
15030: LD_INT 7
15032: EQUAL
15033: OR
15034: IFFALSE 15083
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15036: LD_ADDR_VAR 0 19
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: LD_INT 3
15046: PUSH
15047: LD_INT 4
15049: PUSH
15050: LD_INT 5
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15059: LD_ADDR_OWVAR 37
15063: PUSH
15064: LD_VAR 0 19
15068: PUSH
15069: LD_INT 1
15071: PPUSH
15072: LD_VAR 0 19
15076: PPUSH
15077: CALL_OW 12
15081: ARRAY
15082: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15083: LD_VAR 0 10
15087: PUSH
15088: LD_VAR 0 14
15092: ARRAY
15093: PUSH
15094: LD_INT 8
15096: EQUAL
15097: PUSH
15098: LD_VAR 0 10
15102: PUSH
15103: LD_VAR 0 14
15107: ARRAY
15108: PUSH
15109: LD_INT 6
15111: EQUAL
15112: OR
15113: PUSH
15114: LD_VAR 0 10
15118: PUSH
15119: LD_VAR 0 14
15123: ARRAY
15124: PUSH
15125: LD_INT 10
15127: EQUAL
15128: OR
15129: IFFALSE 15170
// begin amChassisTab = [ 4 , 5 ] ;
15131: LD_ADDR_VAR 0 19
15135: PUSH
15136: LD_INT 4
15138: PUSH
15139: LD_INT 5
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15146: LD_ADDR_OWVAR 37
15150: PUSH
15151: LD_VAR 0 19
15155: PUSH
15156: LD_INT 1
15158: PPUSH
15159: LD_VAR 0 19
15163: PPUSH
15164: CALL_OW 12
15168: ARRAY
15169: ST_TO_ADDR
// end ; end ;
15170: GO 14870
15172: POP
15173: POP
// veh = CreateVehicle ;
15174: LD_ADDR_VAR 0 16
15178: PUSH
15179: CALL_OW 45
15183: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15184: LD_VAR 0 16
15188: PPUSH
15189: LD_VAR 0 1
15193: PPUSH
15194: LD_INT 0
15196: PPUSH
15197: CALL_OW 49
// if vehControl = 1 then
15201: LD_VAR 0 7
15205: PUSH
15206: LD_INT 1
15208: EQUAL
15209: IFFALSE 15266
// begin hc_gallery =  ;
15211: LD_ADDR_OWVAR 33
15215: PUSH
15216: LD_STRING 
15218: ST_TO_ADDR
// hc_name =  ;
15219: LD_ADDR_OWVAR 26
15223: PUSH
15224: LD_STRING 
15226: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15227: LD_INT 0
15229: PPUSH
15230: LD_INT 3
15232: PPUSH
15233: LD_VAR 0 4
15237: PPUSH
15238: CALL_OW 380
// un = CreateHuman ;
15242: LD_ADDR_VAR 0 15
15246: PUSH
15247: CALL_OW 44
15251: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15252: LD_VAR 0 15
15256: PPUSH
15257: LD_VAR 0 16
15261: PPUSH
15262: CALL_OW 52
// end ; i = i + 1 ;
15266: LD_ADDR_VAR 0 13
15270: PUSH
15271: LD_VAR 0 13
15275: PUSH
15276: LD_INT 1
15278: PLUS
15279: ST_TO_ADDR
// end ; if nation = 2 then
15280: LD_VAR 0 5
15284: PUSH
15285: LD_INT 2
15287: EQUAL
15288: IFFALSE 15712
// begin uc_side = side ;
15290: LD_ADDR_OWVAR 20
15294: PUSH
15295: LD_VAR 0 2
15299: ST_TO_ADDR
// uc_nation = nation ;
15300: LD_ADDR_OWVAR 21
15304: PUSH
15305: LD_VAR 0 5
15309: ST_TO_ADDR
// vc_engine = vehengine ;
15310: LD_ADDR_OWVAR 39
15314: PUSH
15315: LD_VAR 0 6
15319: ST_TO_ADDR
// vc_control = vehcontrol ;
15320: LD_ADDR_OWVAR 38
15324: PUSH
15325: LD_VAR 0 7
15329: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15330: LD_ADDR_OWVAR 40
15334: PUSH
15335: LD_VAR 0 9
15339: PUSH
15340: LD_INT 1
15342: PPUSH
15343: LD_VAR 0 9
15347: PPUSH
15348: CALL_OW 12
15352: ARRAY
15353: ST_TO_ADDR
// for j = 1 to ARWeapons do
15354: LD_ADDR_VAR 0 14
15358: PUSH
15359: DOUBLE
15360: LD_INT 1
15362: DEC
15363: ST_TO_ADDR
15364: LD_VAR 0 9
15368: PUSH
15369: FOR_TO
15370: IFFALSE 15604
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15372: LD_VAR 0 9
15376: PUSH
15377: LD_VAR 0 14
15381: ARRAY
15382: PUSH
15383: LD_INT 24
15385: EQUAL
15386: PUSH
15387: LD_VAR 0 9
15391: PUSH
15392: LD_VAR 0 14
15396: ARRAY
15397: PUSH
15398: LD_INT 22
15400: EQUAL
15401: OR
15402: PUSH
15403: LD_VAR 0 9
15407: PUSH
15408: LD_VAR 0 14
15412: ARRAY
15413: PUSH
15414: LD_INT 23
15416: EQUAL
15417: OR
15418: PUSH
15419: LD_VAR 0 9
15423: PUSH
15424: LD_VAR 0 14
15428: ARRAY
15429: PUSH
15430: LD_INT 30
15432: EQUAL
15433: OR
15434: IFFALSE 15483
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15436: LD_ADDR_VAR 0 18
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: LD_INT 12
15446: PUSH
15447: LD_INT 13
15449: PUSH
15450: LD_INT 14
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15459: LD_ADDR_OWVAR 37
15463: PUSH
15464: LD_VAR 0 18
15468: PUSH
15469: LD_INT 1
15471: PPUSH
15472: LD_VAR 0 18
15476: PPUSH
15477: CALL_OW 12
15481: ARRAY
15482: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15483: LD_VAR 0 9
15487: PUSH
15488: LD_VAR 0 14
15492: ARRAY
15493: PUSH
15494: LD_INT 29
15496: EQUAL
15497: PUSH
15498: LD_VAR 0 9
15502: PUSH
15503: LD_VAR 0 14
15507: ARRAY
15508: PUSH
15509: LD_INT 28
15511: EQUAL
15512: OR
15513: PUSH
15514: LD_VAR 0 9
15518: PUSH
15519: LD_VAR 0 14
15523: ARRAY
15524: PUSH
15525: LD_INT 27
15527: EQUAL
15528: OR
15529: PUSH
15530: LD_VAR 0 9
15534: PUSH
15535: LD_VAR 0 14
15539: ARRAY
15540: PUSH
15541: LD_INT 26
15543: EQUAL
15544: OR
15545: PUSH
15546: LD_VAR 0 9
15550: PUSH
15551: LD_VAR 0 14
15555: ARRAY
15556: PUSH
15557: LD_INT 25
15559: EQUAL
15560: OR
15561: IFFALSE 15602
// begin arChassisTab = [ 13 , 14 ] ;
15563: LD_ADDR_VAR 0 18
15567: PUSH
15568: LD_INT 13
15570: PUSH
15571: LD_INT 14
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15578: LD_ADDR_OWVAR 37
15582: PUSH
15583: LD_VAR 0 18
15587: PUSH
15588: LD_INT 1
15590: PPUSH
15591: LD_VAR 0 18
15595: PPUSH
15596: CALL_OW 12
15600: ARRAY
15601: ST_TO_ADDR
// end ; end ;
15602: GO 15369
15604: POP
15605: POP
// veh = CreateVehicle ;
15606: LD_ADDR_VAR 0 16
15610: PUSH
15611: CALL_OW 45
15615: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15616: LD_VAR 0 16
15620: PPUSH
15621: LD_VAR 0 1
15625: PPUSH
15626: LD_INT 0
15628: PPUSH
15629: CALL_OW 49
// if vehcontrol = 1 then
15633: LD_VAR 0 7
15637: PUSH
15638: LD_INT 1
15640: EQUAL
15641: IFFALSE 15698
// begin hc_gallery =  ;
15643: LD_ADDR_OWVAR 33
15647: PUSH
15648: LD_STRING 
15650: ST_TO_ADDR
// hc_name =  ;
15651: LD_ADDR_OWVAR 26
15655: PUSH
15656: LD_STRING 
15658: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15659: LD_INT 0
15661: PPUSH
15662: LD_INT 3
15664: PPUSH
15665: LD_VAR 0 4
15669: PPUSH
15670: CALL_OW 380
// un = CreateHuman ;
15674: LD_ADDR_VAR 0 15
15678: PUSH
15679: CALL_OW 44
15683: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15684: LD_VAR 0 15
15688: PPUSH
15689: LD_VAR 0 16
15693: PPUSH
15694: CALL_OW 52
// end ; i = i + 1 ;
15698: LD_ADDR_VAR 0 13
15702: PUSH
15703: LD_VAR 0 13
15707: PUSH
15708: LD_INT 1
15710: PLUS
15711: ST_TO_ADDR
// end ; if nation = 3 then
15712: LD_VAR 0 5
15716: PUSH
15717: LD_INT 3
15719: EQUAL
15720: IFFALSE 16112
// begin uc_side = side ;
15722: LD_ADDR_OWVAR 20
15726: PUSH
15727: LD_VAR 0 2
15731: ST_TO_ADDR
// uc_nation = nation ;
15732: LD_ADDR_OWVAR 21
15736: PUSH
15737: LD_VAR 0 5
15741: ST_TO_ADDR
// vc_engine = vehengine ;
15742: LD_ADDR_OWVAR 39
15746: PUSH
15747: LD_VAR 0 6
15751: ST_TO_ADDR
// vc_control = vehcontrol ;
15752: LD_ADDR_OWVAR 38
15756: PUSH
15757: LD_VAR 0 7
15761: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15762: LD_ADDR_OWVAR 40
15766: PUSH
15767: LD_VAR 0 8
15771: PUSH
15772: LD_INT 1
15774: PPUSH
15775: LD_VAR 0 8
15779: PPUSH
15780: CALL_OW 12
15784: ARRAY
15785: ST_TO_ADDR
// for j = 1 to RuWeapons do
15786: LD_ADDR_VAR 0 14
15790: PUSH
15791: DOUBLE
15792: LD_INT 1
15794: DEC
15795: ST_TO_ADDR
15796: LD_VAR 0 8
15800: PUSH
15801: FOR_TO
15802: IFFALSE 16004
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15804: LD_VAR 0 8
15808: PUSH
15809: LD_VAR 0 14
15813: ARRAY
15814: PUSH
15815: LD_INT 42
15817: EQUAL
15818: PUSH
15819: LD_VAR 0 8
15823: PUSH
15824: LD_VAR 0 14
15828: ARRAY
15829: PUSH
15830: LD_INT 43
15832: EQUAL
15833: OR
15834: PUSH
15835: LD_VAR 0 8
15839: PUSH
15840: LD_VAR 0 14
15844: ARRAY
15845: PUSH
15846: LD_INT 44
15848: EQUAL
15849: OR
15850: PUSH
15851: LD_VAR 0 8
15855: PUSH
15856: LD_VAR 0 14
15860: ARRAY
15861: PUSH
15862: LD_INT 45
15864: EQUAL
15865: OR
15866: PUSH
15867: LD_VAR 0 8
15871: PUSH
15872: LD_VAR 0 14
15876: ARRAY
15877: PUSH
15878: LD_INT 49
15880: EQUAL
15881: OR
15882: IFFALSE 15931
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15884: LD_ADDR_VAR 0 17
15888: PUSH
15889: LD_INT 21
15891: PUSH
15892: LD_INT 22
15894: PUSH
15895: LD_INT 23
15897: PUSH
15898: LD_INT 24
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15907: LD_ADDR_OWVAR 37
15911: PUSH
15912: LD_VAR 0 17
15916: PUSH
15917: LD_INT 1
15919: PPUSH
15920: LD_VAR 0 17
15924: PPUSH
15925: CALL_OW 12
15929: ARRAY
15930: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15931: LD_VAR 0 8
15935: PUSH
15936: LD_VAR 0 14
15940: ARRAY
15941: PUSH
15942: LD_INT 46
15944: EQUAL
15945: PUSH
15946: LD_VAR 0 8
15950: PUSH
15951: LD_VAR 0 14
15955: ARRAY
15956: PUSH
15957: LD_INT 47
15959: EQUAL
15960: OR
15961: IFFALSE 16002
// begin ruChassisTab = [ 23 , 24 ] ;
15963: LD_ADDR_VAR 0 17
15967: PUSH
15968: LD_INT 23
15970: PUSH
15971: LD_INT 24
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15978: LD_ADDR_OWVAR 37
15982: PUSH
15983: LD_VAR 0 17
15987: PUSH
15988: LD_INT 1
15990: PPUSH
15991: LD_VAR 0 17
15995: PPUSH
15996: CALL_OW 12
16000: ARRAY
16001: ST_TO_ADDR
// end ; end ;
16002: GO 15801
16004: POP
16005: POP
// veh = CreateVehicle ;
16006: LD_ADDR_VAR 0 16
16010: PUSH
16011: CALL_OW 45
16015: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16016: LD_VAR 0 16
16020: PPUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: LD_INT 0
16028: PPUSH
16029: CALL_OW 49
// if vehcontrol = 1 then
16033: LD_VAR 0 7
16037: PUSH
16038: LD_INT 1
16040: EQUAL
16041: IFFALSE 16098
// begin hc_gallery =  ;
16043: LD_ADDR_OWVAR 33
16047: PUSH
16048: LD_STRING 
16050: ST_TO_ADDR
// hc_name =  ;
16051: LD_ADDR_OWVAR 26
16055: PUSH
16056: LD_STRING 
16058: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16059: LD_INT 0
16061: PPUSH
16062: LD_INT 3
16064: PPUSH
16065: LD_VAR 0 4
16069: PPUSH
16070: CALL_OW 380
// un = CreateHuman ;
16074: LD_ADDR_VAR 0 15
16078: PUSH
16079: CALL_OW 44
16083: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16084: LD_VAR 0 15
16088: PPUSH
16089: LD_VAR 0 16
16093: PPUSH
16094: CALL_OW 52
// end ; i = i + 1 ;
16098: LD_ADDR_VAR 0 13
16102: PUSH
16103: LD_VAR 0 13
16107: PUSH
16108: LD_INT 1
16110: PLUS
16111: ST_TO_ADDR
// end ; until i = vehCount ;
16112: LD_VAR 0 13
16116: PUSH
16117: LD_VAR 0 3
16121: EQUAL
16122: IFFALSE 14774
// repeat wait ( 0 0$1 ) ;
16124: LD_INT 35
16126: PPUSH
16127: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16131: LD_ADDR_VAR 0 20
16135: PUSH
16136: LD_INT 22
16138: PUSH
16139: LD_VAR 0 2
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 21
16150: PUSH
16151: LD_INT 2
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 24
16160: PUSH
16161: LD_INT 250
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: PPUSH
16173: CALL_OW 69
16177: ST_TO_ADDR
// if vehicleOK_list > 0 then
16178: LD_VAR 0 20
16182: PUSH
16183: LD_INT 0
16185: GREATER
16186: IFFALSE 16377
// begin for i in vehicleOK_list do
16188: LD_ADDR_VAR 0 13
16192: PUSH
16193: LD_VAR 0 20
16197: PUSH
16198: FOR_IN
16199: IFFALSE 16375
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16201: LD_ADDR_VAR 0 21
16205: PUSH
16206: LD_INT 22
16208: PUSH
16209: LD_VAR 0 11
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PPUSH
16218: CALL_OW 69
16222: PPUSH
16223: LD_VAR 0 13
16227: PPUSH
16228: CALL_OW 74
16232: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16233: LD_ADDR_VAR 0 22
16237: PUSH
16238: LD_INT 22
16240: PUSH
16241: LD_VAR 0 11
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 2
16252: PUSH
16253: LD_INT 59
16255: PUSH
16256: EMPTY
16257: LIST
16258: PUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 1
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 21
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: EMPTY
16290: LIST
16291: PPUSH
16292: CALL_OW 69
16296: PPUSH
16297: LD_VAR 0 13
16301: PPUSH
16302: CALL_OW 74
16306: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16307: LD_VAR 0 13
16311: PPUSH
16312: LD_VAR 0 21
16316: PPUSH
16317: CALL_OW 296
16321: PUSH
16322: LD_INT 6
16324: PLUS
16325: PUSH
16326: LD_VAR 0 13
16330: PPUSH
16331: LD_VAR 0 22
16335: PPUSH
16336: CALL_OW 296
16340: LESS
16341: IFFALSE 16359
// begin ComAttackUnit ( i , target1 ) ;
16343: LD_VAR 0 13
16347: PPUSH
16348: LD_VAR 0 21
16352: PPUSH
16353: CALL_OW 115
// end else
16357: GO 16373
// begin ComAttackUnit ( i , target2 ) ;
16359: LD_VAR 0 13
16363: PPUSH
16364: LD_VAR 0 22
16368: PPUSH
16369: CALL_OW 115
// end ; end ;
16373: GO 16198
16375: POP
16376: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16377: LD_INT 22
16379: PUSH
16380: LD_VAR 0 2
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 21
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 24
16401: PUSH
16402: LD_INT 250
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: PPUSH
16414: CALL_OW 69
16418: PUSH
16419: LD_INT 0
16421: EQUAL
16422: IFFALSE 16124
// end ;
16424: LD_VAR 0 12
16428: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16429: LD_INT 0
16431: PPUSH
16432: PPUSH
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
16437: PPUSH
16438: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16439: LD_ADDR_VAR 0 7
16443: PUSH
16444: LD_INT 22
16446: PUSH
16447: LD_VAR 0 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: LD_INT 3
16461: PUSH
16462: LD_INT 24
16464: PUSH
16465: LD_INT 550
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 24
16478: PUSH
16479: LD_INT 250
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PPUSH
16495: CALL_OW 69
16499: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16500: LD_ADDR_VAR 0 8
16504: PUSH
16505: LD_INT 22
16507: PUSH
16508: LD_VAR 0 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 25
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 25
16532: PUSH
16533: LD_INT 5
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 25
16542: PUSH
16543: LD_INT 8
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 25
16552: PUSH
16553: LD_INT 9
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 24
16569: PUSH
16570: LD_INT 1000
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: PPUSH
16582: CALL_OW 69
16586: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16587: LD_ADDR_VAR 0 9
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_VAR 0 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 25
16606: PUSH
16607: LD_INT 4
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: ST_TO_ADDR
// if medicCount > 0 then
16623: LD_VAR 0 9
16627: PUSH
16628: LD_INT 0
16630: GREATER
16631: IFFALSE 16705
// begin if damageUnit_list > 0 then
16633: LD_VAR 0 7
16637: PUSH
16638: LD_INT 0
16640: GREATER
16641: IFFALSE 16705
// begin for i in damageUnit_list do
16643: LD_ADDR_VAR 0 5
16647: PUSH
16648: LD_VAR 0 7
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16703
// begin ComMoveToArea ( i , healArea ) ;
16656: LD_VAR 0 5
16660: PPUSH
16661: LD_VAR 0 2
16665: PPUSH
16666: CALL_OW 113
// for j in medicCount do
16670: LD_ADDR_VAR 0 6
16674: PUSH
16675: LD_VAR 0 9
16679: PUSH
16680: FOR_IN
16681: IFFALSE 16699
// AddComHeal ( j , i ) ;
16683: LD_VAR 0 6
16687: PPUSH
16688: LD_VAR 0 5
16692: PPUSH
16693: CALL_OW 188
16697: GO 16680
16699: POP
16700: POP
// end ;
16701: GO 16653
16703: POP
16704: POP
// end ; end ; if soldiersOK_list > 0 then
16705: LD_VAR 0 8
16709: PUSH
16710: LD_INT 0
16712: GREATER
16713: IFFALSE 16904
// begin for i in soldiersOK_list do
16715: LD_ADDR_VAR 0 5
16719: PUSH
16720: LD_VAR 0 8
16724: PUSH
16725: FOR_IN
16726: IFFALSE 16902
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16728: LD_ADDR_VAR 0 10
16732: PUSH
16733: LD_INT 22
16735: PUSH
16736: LD_VAR 0 3
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 69
16749: PPUSH
16750: LD_VAR 0 5
16754: PPUSH
16755: CALL_OW 74
16759: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16760: LD_ADDR_VAR 0 11
16764: PUSH
16765: LD_INT 22
16767: PUSH
16768: LD_VAR 0 3
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 2
16779: PUSH
16780: LD_INT 59
16782: PUSH
16783: EMPTY
16784: LIST
16785: PUSH
16786: LD_INT 21
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 21
16798: PUSH
16799: LD_INT 2
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: PPUSH
16819: CALL_OW 69
16823: PPUSH
16824: LD_VAR 0 5
16828: PPUSH
16829: CALL_OW 74
16833: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16834: LD_VAR 0 5
16838: PPUSH
16839: LD_VAR 0 10
16843: PPUSH
16844: CALL_OW 296
16848: PUSH
16849: LD_INT 8
16851: PLUS
16852: PUSH
16853: LD_VAR 0 5
16857: PPUSH
16858: LD_VAR 0 11
16862: PPUSH
16863: CALL_OW 296
16867: LESS
16868: IFFALSE 16886
// begin ComAttackUnit ( i , target1 ) ;
16870: LD_VAR 0 5
16874: PPUSH
16875: LD_VAR 0 10
16879: PPUSH
16880: CALL_OW 115
// end else
16884: GO 16900
// begin ComAttackUnit ( i , target2 ) ;
16886: LD_VAR 0 5
16890: PPUSH
16891: LD_VAR 0 11
16895: PPUSH
16896: CALL_OW 115
// end ; end ;
16900: GO 16725
16902: POP
16903: POP
// end ; end ;
16904: LD_VAR 0 4
16908: RET
// export function GetDriverVehicle ( unit ) ; begin
16909: LD_INT 0
16911: PPUSH
// if not unit then
16912: LD_VAR 0 1
16916: NOT
16917: IFFALSE 16921
// exit ;
16919: GO 16959
// result := IsInUnit ( unit ) ;
16921: LD_ADDR_VAR 0 2
16925: PUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 310
16935: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
16936: LD_VAR 0 2
16940: PPUSH
16941: CALL_OW 247
16945: PUSH
16946: LD_INT 2
16948: NONEQUAL
16949: IFFALSE 16959
// result := 0 ;
16951: LD_ADDR_VAR 0 2
16955: PUSH
16956: LD_INT 0
16958: ST_TO_ADDR
// end ;
16959: LD_VAR 0 2
16963: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
16964: LD_INT 0
16966: PPUSH
16967: PPUSH
16968: PPUSH
16969: PPUSH
16970: PPUSH
16971: PPUSH
16972: PPUSH
16973: PPUSH
16974: PPUSH
// result := false ;
16975: LD_ADDR_VAR 0 7
16979: PUSH
16980: LD_INT 0
16982: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16983: LD_VAR 0 1
16987: NOT
16988: PUSH
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 266
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: IN
17009: NOT
17010: OR
17011: PUSH
17012: LD_VAR 0 2
17016: NOT
17017: OR
17018: PUSH
17019: LD_VAR 0 5
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: LD_INT 3
17035: PUSH
17036: LD_INT 4
17038: PUSH
17039: LD_INT 5
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: IN
17050: NOT
17051: OR
17052: PUSH
17053: LD_VAR 0 3
17057: PPUSH
17058: LD_VAR 0 4
17062: PPUSH
17063: CALL_OW 488
17067: NOT
17068: OR
17069: IFFALSE 17073
// exit ;
17071: GO 17754
// pom := GetBase ( bdepot ) ;
17073: LD_ADDR_VAR 0 10
17077: PUSH
17078: LD_VAR 0 1
17082: PPUSH
17083: CALL_OW 274
17087: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17088: LD_ADDR_VAR 0 11
17092: PUSH
17093: LD_VAR 0 2
17097: PPUSH
17098: LD_VAR 0 1
17102: PPUSH
17103: CALL_OW 248
17107: PPUSH
17108: CALL_OW 450
17112: ST_TO_ADDR
// if check_cost then
17113: LD_VAR 0 6
17117: IFFALSE 17194
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17119: LD_VAR 0 10
17123: PPUSH
17124: LD_INT 1
17126: PPUSH
17127: CALL_OW 275
17131: PUSH
17132: LD_VAR 0 11
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: GREATEREQUAL
17141: PUSH
17142: LD_VAR 0 10
17146: PPUSH
17147: LD_INT 2
17149: PPUSH
17150: CALL_OW 275
17154: PUSH
17155: LD_VAR 0 11
17159: PUSH
17160: LD_INT 2
17162: ARRAY
17163: GREATEREQUAL
17164: AND
17165: PUSH
17166: LD_VAR 0 10
17170: PPUSH
17171: LD_INT 3
17173: PPUSH
17174: CALL_OW 275
17178: PUSH
17179: LD_VAR 0 11
17183: PUSH
17184: LD_INT 3
17186: ARRAY
17187: GREATEREQUAL
17188: AND
17189: NOT
17190: IFFALSE 17194
// exit ;
17192: GO 17754
// if GetBType ( bdepot ) = b_depot then
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 266
17203: PUSH
17204: LD_INT 0
17206: EQUAL
17207: IFFALSE 17219
// dist := 28 else
17209: LD_ADDR_VAR 0 14
17213: PUSH
17214: LD_INT 28
17216: ST_TO_ADDR
17217: GO 17227
// dist := 36 ;
17219: LD_ADDR_VAR 0 14
17223: PUSH
17224: LD_INT 36
17226: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17227: LD_VAR 0 1
17231: PPUSH
17232: LD_VAR 0 3
17236: PPUSH
17237: LD_VAR 0 4
17241: PPUSH
17242: CALL_OW 297
17246: PUSH
17247: LD_VAR 0 14
17251: GREATER
17252: IFFALSE 17256
// exit ;
17254: GO 17754
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17256: LD_ADDR_VAR 0 12
17260: PUSH
17261: LD_VAR 0 2
17265: PPUSH
17266: LD_VAR 0 3
17270: PPUSH
17271: LD_VAR 0 4
17275: PPUSH
17276: LD_VAR 0 5
17280: PPUSH
17281: LD_VAR 0 1
17285: PPUSH
17286: CALL_OW 248
17290: PPUSH
17291: LD_INT 0
17293: PPUSH
17294: CALL 57315 0 6
17298: ST_TO_ADDR
// if not hexes then
17299: LD_VAR 0 12
17303: NOT
17304: IFFALSE 17308
// exit ;
17306: GO 17754
// hex := GetHexInfo ( x , y ) ;
17308: LD_ADDR_VAR 0 15
17312: PUSH
17313: LD_VAR 0 3
17317: PPUSH
17318: LD_VAR 0 4
17322: PPUSH
17323: CALL_OW 546
17327: ST_TO_ADDR
// if hex [ 1 ] then
17328: LD_VAR 0 15
17332: PUSH
17333: LD_INT 1
17335: ARRAY
17336: IFFALSE 17340
// exit ;
17338: GO 17754
// height := hex [ 2 ] ;
17340: LD_ADDR_VAR 0 13
17344: PUSH
17345: LD_VAR 0 15
17349: PUSH
17350: LD_INT 2
17352: ARRAY
17353: ST_TO_ADDR
// for i = 1 to hexes do
17354: LD_ADDR_VAR 0 8
17358: PUSH
17359: DOUBLE
17360: LD_INT 1
17362: DEC
17363: ST_TO_ADDR
17364: LD_VAR 0 12
17368: PUSH
17369: FOR_TO
17370: IFFALSE 17698
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17372: LD_VAR 0 12
17376: PUSH
17377: LD_VAR 0 8
17381: ARRAY
17382: PUSH
17383: LD_INT 1
17385: ARRAY
17386: PPUSH
17387: LD_VAR 0 12
17391: PUSH
17392: LD_VAR 0 8
17396: ARRAY
17397: PUSH
17398: LD_INT 2
17400: ARRAY
17401: PPUSH
17402: CALL_OW 488
17406: NOT
17407: IFFALSE 17411
// continue ;
17409: GO 17369
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17411: LD_ADDR_VAR 0 9
17415: PUSH
17416: LD_VAR 0 12
17420: PUSH
17421: LD_VAR 0 8
17425: ARRAY
17426: PUSH
17427: LD_INT 1
17429: ARRAY
17430: PPUSH
17431: LD_VAR 0 12
17435: PUSH
17436: LD_VAR 0 8
17440: ARRAY
17441: PUSH
17442: LD_INT 2
17444: ARRAY
17445: PPUSH
17446: CALL_OW 546
17450: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17451: LD_VAR 0 9
17455: PUSH
17456: LD_INT 1
17458: ARRAY
17459: PUSH
17460: LD_VAR 0 9
17464: PUSH
17465: LD_INT 2
17467: ARRAY
17468: PUSH
17469: LD_VAR 0 13
17473: PUSH
17474: LD_INT 2
17476: PLUS
17477: GREATER
17478: OR
17479: PUSH
17480: LD_VAR 0 9
17484: PUSH
17485: LD_INT 2
17487: ARRAY
17488: PUSH
17489: LD_VAR 0 13
17493: PUSH
17494: LD_INT 2
17496: MINUS
17497: LESS
17498: OR
17499: PUSH
17500: LD_VAR 0 9
17504: PUSH
17505: LD_INT 3
17507: ARRAY
17508: PUSH
17509: LD_INT 0
17511: PUSH
17512: LD_INT 8
17514: PUSH
17515: LD_INT 9
17517: PUSH
17518: LD_INT 10
17520: PUSH
17521: LD_INT 11
17523: PUSH
17524: LD_INT 12
17526: PUSH
17527: LD_INT 13
17529: PUSH
17530: LD_INT 16
17532: PUSH
17533: LD_INT 17
17535: PUSH
17536: LD_INT 18
17538: PUSH
17539: LD_INT 19
17541: PUSH
17542: LD_INT 20
17544: PUSH
17545: LD_INT 21
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: IN
17563: NOT
17564: OR
17565: PUSH
17566: LD_VAR 0 9
17570: PUSH
17571: LD_INT 5
17573: ARRAY
17574: NOT
17575: OR
17576: PUSH
17577: LD_VAR 0 9
17581: PUSH
17582: LD_INT 6
17584: ARRAY
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 7
17594: PUSH
17595: LD_INT 9
17597: PUSH
17598: LD_INT 10
17600: PUSH
17601: LD_INT 11
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: IN
17612: NOT
17613: OR
17614: PUSH
17615: LD_VAR 0 12
17619: PUSH
17620: LD_VAR 0 8
17624: ARRAY
17625: PUSH
17626: LD_INT 1
17628: ARRAY
17629: PPUSH
17630: LD_VAR 0 12
17634: PUSH
17635: LD_VAR 0 8
17639: ARRAY
17640: PUSH
17641: LD_INT 2
17643: ARRAY
17644: PPUSH
17645: CALL_OW 428
17649: PUSH
17650: LD_INT 0
17652: GREATER
17653: OR
17654: PUSH
17655: LD_VAR 0 12
17659: PUSH
17660: LD_VAR 0 8
17664: ARRAY
17665: PUSH
17666: LD_INT 1
17668: ARRAY
17669: PPUSH
17670: LD_VAR 0 12
17674: PUSH
17675: LD_VAR 0 8
17679: ARRAY
17680: PUSH
17681: LD_INT 2
17683: ARRAY
17684: PPUSH
17685: CALL_OW 351
17689: OR
17690: IFFALSE 17696
// exit ;
17692: POP
17693: POP
17694: GO 17754
// end ;
17696: GO 17369
17698: POP
17699: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17700: LD_VAR 0 2
17704: PUSH
17705: LD_INT 29
17707: PUSH
17708: LD_INT 30
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: IN
17715: PUSH
17716: LD_VAR 0 3
17720: PPUSH
17721: LD_VAR 0 4
17725: PPUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 255
17735: PPUSH
17736: CALL_OW 440
17740: NOT
17741: AND
17742: IFFALSE 17746
// exit ;
17744: GO 17754
// result := true ;
17746: LD_ADDR_VAR 0 7
17750: PUSH
17751: LD_INT 1
17753: ST_TO_ADDR
// end ; end_of_file
17754: LD_VAR 0 7
17758: RET
// every 1 do var i ;
17759: GO 17761
17761: DISABLE
17762: LD_INT 0
17764: PPUSH
// begin Video ( true ) ;
17765: LD_INT 1
17767: PPUSH
17768: CALL 80083 0 1
// CenterOnXY ( 53 , 40 ) ;
17772: LD_INT 53
17774: PPUSH
17775: LD_INT 40
17777: PPUSH
17778: CALL_OW 84
// wait ( 0 0$5 ) ;
17782: LD_INT 175
17784: PPUSH
17785: CALL_OW 67
// if gammaCommander = 1 then
17789: LD_EXP 12
17793: PUSH
17794: LD_INT 1
17796: EQUAL
17797: IFFALSE 17811
// Say ( Donaldson , D1-Don-1 ) ;
17799: LD_EXP 3
17803: PPUSH
17804: LD_STRING D1-Don-1
17806: PPUSH
17807: CALL_OW 88
// if gammaCommander = 2 then
17811: LD_EXP 12
17815: PUSH
17816: LD_INT 2
17818: EQUAL
17819: IFFALSE 17833
// Say ( Brown , D1-Brown-1 ) ;
17821: LD_EXP 2
17825: PPUSH
17826: LD_STRING D1-Brown-1
17828: PPUSH
17829: CALL_OW 88
// if gammaCommander = 3 then
17833: LD_EXP 12
17837: PUSH
17838: LD_INT 3
17840: EQUAL
17841: IFFALSE 17855
// Say ( Houten , D1-VanH-1 ) ;
17843: LD_EXP 13
17847: PPUSH
17848: LD_STRING D1-VanH-1
17850: PPUSH
17851: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17855: LD_EXP 22
17859: PPUSH
17860: LD_STRING D1-Har-1
17862: PPUSH
17863: CALL_OW 94
// if gammaCommander = 1 then
17867: LD_EXP 12
17871: PUSH
17872: LD_INT 1
17874: EQUAL
17875: IFFALSE 17889
// Say ( Donaldson , D1-Don-2 ) ;
17877: LD_EXP 3
17881: PPUSH
17882: LD_STRING D1-Don-2
17884: PPUSH
17885: CALL_OW 88
// if gammaCommander = 2 then
17889: LD_EXP 12
17893: PUSH
17894: LD_INT 2
17896: EQUAL
17897: IFFALSE 17911
// Say ( Brown , D1-Brown-2 ) ;
17899: LD_EXP 2
17903: PPUSH
17904: LD_STRING D1-Brown-2
17906: PPUSH
17907: CALL_OW 88
// if gammaCommander = 3 then
17911: LD_EXP 12
17915: PUSH
17916: LD_INT 3
17918: EQUAL
17919: IFFALSE 17933
// Say ( Houten , D1-VanH-2 ) ;
17921: LD_EXP 13
17925: PPUSH
17926: LD_STRING D1-VanH-2
17928: PPUSH
17929: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
17933: LD_EXP 22
17937: PPUSH
17938: LD_STRING D1-Har-2
17940: PPUSH
17941: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
17945: LD_INT 22
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 33
17957: PUSH
17958: LD_INT 2
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 61
17967: PUSH
17968: EMPTY
17969: LIST
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 69
17980: IFFALSE 18045
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
17982: LD_ADDR_VAR 0 1
17986: PUSH
17987: LD_INT 22
17989: PUSH
17990: LD_INT 1
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 33
17999: PUSH
18000: LD_INT 2
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 61
18009: PUSH
18010: EMPTY
18011: LIST
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: PPUSH
18018: CALL_OW 69
18022: PUSH
18023: FOR_IN
18024: IFFALSE 18043
// ComAgressiveMove ( i , 70 , 41 ) ;
18026: LD_VAR 0 1
18030: PPUSH
18031: LD_INT 70
18033: PPUSH
18034: LD_INT 41
18036: PPUSH
18037: CALL_OW 114
18041: GO 18023
18043: POP
18044: POP
// repeat wait ( 0 0$1 ) ;
18045: LD_INT 35
18047: PPUSH
18048: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18052: LD_ADDR_VAR 0 1
18056: PUSH
18057: LD_INT 22
18059: PUSH
18060: LD_INT 6
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: EMPTY
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18095
// ComAgressiveMove ( i , 54 , 20 ) ;
18078: LD_VAR 0 1
18082: PPUSH
18083: LD_INT 54
18085: PPUSH
18086: LD_INT 20
18088: PPUSH
18089: CALL_OW 114
18093: GO 18075
18095: POP
18096: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18097: LD_ADDR_VAR 0 1
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_INT 1
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 25
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 3
18124: PUSH
18125: LD_INT 54
18127: PUSH
18128: EMPTY
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 69
18144: PUSH
18145: FOR_IN
18146: IFFALSE 18180
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18148: LD_VAR 0 1
18152: PPUSH
18153: LD_INT 70
18155: PPUSH
18156: LD_INT 41
18158: PPUSH
18159: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18163: LD_VAR 0 1
18167: PPUSH
18168: LD_INT 46
18170: PPUSH
18171: LD_INT 39
18173: PPUSH
18174: CALL_OW 174
// end ;
18178: GO 18145
18180: POP
18181: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18182: LD_ADDR_VAR 0 1
18186: PUSH
18187: LD_INT 22
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 21
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: LD_INT 24
18212: PUSH
18213: LD_INT 500
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: LIST
18228: PPUSH
18229: CALL_OW 69
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18268
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18237: LD_VAR 0 1
18241: PPUSH
18242: LD_EXP 37
18246: PPUSH
18247: CALL_OW 250
18251: PPUSH
18252: LD_EXP 37
18256: PPUSH
18257: CALL_OW 251
18261: PPUSH
18262: CALL_OW 111
18266: GO 18234
18268: POP
18269: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18270: LD_INT 22
18272: PUSH
18273: LD_INT 6
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 21
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 24
18292: PUSH
18293: LD_INT 250
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: PUSH
18310: LD_INT 5
18312: LESS
18313: IFFALSE 18045
// Video ( false ) ;
18315: LD_INT 0
18317: PPUSH
18318: CALL 80083 0 1
// ChangeMissionObjectives ( M1 ) ;
18322: LD_STRING M1
18324: PPUSH
18325: CALL_OW 337
// wait ( 0 0$2 ) ;
18329: LD_INT 70
18331: PPUSH
18332: CALL_OW 67
// SaveForQuickRestart ;
18336: CALL_OW 22
// startCutscene = 0 ;
18340: LD_ADDR_EXP 38
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// end ;
18348: PPOPN 1
18350: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18351: LD_EXP 38
18355: IFFALSE 18446
18357: GO 18359
18359: DISABLE
18360: LD_INT 0
18362: PPUSH
18363: PPUSH
// begin enable ;
18364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18365: LD_ADDR_VAR 0 1
18369: PUSH
18370: LD_INT 22
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 21
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 3
18392: PUSH
18393: LD_INT 24
18395: PUSH
18396: LD_INT 700
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: LIST
18411: PPUSH
18412: CALL_OW 69
18416: ST_TO_ADDR
// for i in tmp do
18417: LD_ADDR_VAR 0 2
18421: PUSH
18422: LD_VAR 0 1
18426: PUSH
18427: FOR_IN
18428: IFFALSE 18444
// SetLives ( i , 700 ) ;
18430: LD_VAR 0 2
18434: PPUSH
18435: LD_INT 700
18437: PPUSH
18438: CALL_OW 234
18442: GO 18427
18444: POP
18445: POP
// end ;
18446: PPOPN 2
18448: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18449: LD_INT 22
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 101
18461: PUSH
18462: LD_INT 6
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: PUSH
18478: LD_INT 0
18480: EQUAL
18481: PUSH
18482: LD_OWVAR 1
18486: PUSH
18487: LD_INT 6300
18489: GREATER
18490: OR
18491: IFFALSE 18740
18493: GO 18495
18495: DISABLE
// begin PrepareSupportFromDelta ;
18496: CALL 3900 0 0
// firstAttack = 1 ;
18500: LD_ADDR_EXP 33
18504: PUSH
18505: LD_INT 1
18507: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18508: LD_EXP 8
18512: PPUSH
18513: CALL_OW 302
18517: IFFALSE 18533
// Say ( Gladstone , D2-Glad-1 ) else
18519: LD_EXP 8
18523: PPUSH
18524: LD_STRING D2-Glad-1
18526: PPUSH
18527: CALL_OW 88
18531: GO 18641
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18533: LD_INT 4
18535: PPUSH
18536: LD_INT 22
18538: PUSH
18539: LD_INT 1
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 21
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 25
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 25
18571: PUSH
18572: LD_INT 2
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 25
18581: PUSH
18582: LD_INT 3
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 25
18591: PUSH
18592: LD_INT 4
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: PPUSH
18611: CALL_OW 70
18615: PUSH
18616: LD_EXP 15
18620: PUSH
18621: LD_EXP 14
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: DIFF
18630: PPUSH
18631: LD_STRING D2-Sol1-1
18633: PPUSH
18634: LD_STRING D2-FSol1-1
18636: PPUSH
18637: CALL 7179 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18641: LD_EXP 3
18645: PPUSH
18646: CALL_OW 302
18650: PUSH
18651: LD_EXP 12
18655: PUSH
18656: LD_INT 1
18658: EQUAL
18659: AND
18660: IFFALSE 18674
// Say ( Donaldson , D2-Don-1 ) ;
18662: LD_EXP 3
18666: PPUSH
18667: LD_STRING D2-Don-1
18669: PPUSH
18670: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18674: LD_EXP 2
18678: PPUSH
18679: CALL_OW 302
18683: PUSH
18684: LD_EXP 12
18688: PUSH
18689: LD_INT 2
18691: EQUAL
18692: AND
18693: IFFALSE 18707
// Say ( Brown , D2-Brown-1 ) ;
18695: LD_EXP 2
18699: PPUSH
18700: LD_STRING D2-Brown-1
18702: PPUSH
18703: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18707: LD_EXP 13
18711: PPUSH
18712: CALL_OW 302
18716: PUSH
18717: LD_EXP 12
18721: PUSH
18722: LD_INT 3
18724: EQUAL
18725: AND
18726: IFFALSE 18740
// Say ( Houten , D2-VanH-1 ) ;
18728: LD_EXP 13
18732: PPUSH
18733: LD_STRING D2-VanH-1
18735: PPUSH
18736: CALL_OW 88
// end ;
18740: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18741: LD_OWVAR 1
18745: PUSH
18746: LD_INT 6300
18748: GREATER
18749: IFFALSE 19803
18751: GO 18753
18753: DISABLE
18754: LD_INT 0
18756: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18757: LD_STRING 07_time
18759: PPUSH
18760: LD_INT 12600
18762: PPUSH
18763: CALL_OW 30
18767: PUSH
18768: LD_INT 3
18770: DIV
18771: PPUSH
18772: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18776: LD_INT 34
18778: PPUSH
18779: LD_INT 1
18781: PPUSH
18782: CALL_OW 321
18786: PUSH
18787: LD_INT 2
18789: EQUAL
18790: IFFALSE 18799
// SetAchievement ( ACH_HEAVYGUN ) ;
18792: LD_STRING ACH_HEAVYGUN
18794: PPUSH
18795: CALL_OW 543
// PrepareMacmillanSquad ;
18799: CALL 4589 0 0
// CenterNowOnUnits ( JMM ) ;
18803: LD_EXP 1
18807: PPUSH
18808: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
18812: LD_EXP 1
18816: PPUSH
18817: LD_STRING D3-JMM-1
18819: PPUSH
18820: CALL_OW 88
// JMMArrive = 1 ;
18824: LD_ADDR_EXP 39
18828: PUSH
18829: LD_INT 1
18831: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18832: LD_EXP 3
18836: PPUSH
18837: CALL_OW 302
18841: PUSH
18842: LD_EXP 12
18846: PUSH
18847: LD_INT 1
18849: EQUAL
18850: AND
18851: IFFALSE 18867
// begin Say ( Donaldson , D3-Don-1 ) ;
18853: LD_EXP 3
18857: PPUSH
18858: LD_STRING D3-Don-1
18860: PPUSH
18861: CALL_OW 88
// end else
18865: GO 18919
// begin if gammaCommander = 1 then
18867: LD_EXP 12
18871: PUSH
18872: LD_INT 1
18874: EQUAL
18875: IFFALSE 18919
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
18877: LD_EXP 11
18881: PPUSH
18882: LD_INT 26
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PPUSH
18892: CALL_OW 72
18896: PPUSH
18897: LD_STRING D3-Sol1-1
18899: PPUSH
18900: LD_STRING D3-Sol1-1
18902: PPUSH
18903: CALL 7179 0 3
// Say ( JMM , D3-JMM-2 ) ;
18907: LD_EXP 1
18911: PPUSH
18912: LD_STRING D3-JMM-2
18914: PPUSH
18915: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
18919: LD_EXP 2
18923: PPUSH
18924: CALL_OW 302
18928: PUSH
18929: LD_EXP 12
18933: PUSH
18934: LD_INT 2
18936: EQUAL
18937: AND
18938: IFFALSE 18954
// begin Say ( Brown , D3-Brown-1 ) ;
18940: LD_EXP 2
18944: PPUSH
18945: LD_STRING D3-Brown-1
18947: PPUSH
18948: CALL_OW 88
// end else
18952: GO 19006
// begin if gammaCommander = 2 then
18954: LD_EXP 12
18958: PUSH
18959: LD_INT 2
18961: EQUAL
18962: IFFALSE 19006
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
18964: LD_EXP 11
18968: PPUSH
18969: LD_INT 26
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PPUSH
18979: CALL_OW 72
18983: PPUSH
18984: LD_STRING D3-Sol1-1a
18986: PPUSH
18987: LD_STRING D3-Sol1-1a
18989: PPUSH
18990: CALL 7179 0 3
// Say ( JMM , D3-JMM-2 ) ;
18994: LD_EXP 1
18998: PPUSH
18999: LD_STRING D3-JMM-2
19001: PPUSH
19002: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19006: LD_EXP 13
19010: PPUSH
19011: CALL_OW 302
19015: PUSH
19016: LD_EXP 12
19020: PUSH
19021: LD_INT 3
19023: EQUAL
19024: AND
19025: IFFALSE 19041
// begin Say ( Houten , D3-VanH-1 ) ;
19027: LD_EXP 13
19031: PPUSH
19032: LD_STRING D3-VanH-1
19034: PPUSH
19035: CALL_OW 88
// end else
19039: GO 19093
// begin if gammaCommander = 3 then
19041: LD_EXP 12
19045: PUSH
19046: LD_INT 3
19048: EQUAL
19049: IFFALSE 19093
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19051: LD_EXP 11
19055: PPUSH
19056: LD_INT 26
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 72
19070: PPUSH
19071: LD_STRING D3-Sol1-1b
19073: PPUSH
19074: LD_STRING D3-Sol1-1b
19076: PPUSH
19077: CALL 7179 0 3
// Say ( JMM , D3-JMM-2 ) ;
19081: LD_EXP 1
19085: PPUSH
19086: LD_STRING D3-JMM-2
19088: PPUSH
19089: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19093: LD_EXP 15
19097: PPUSH
19098: CALL_OW 302
19102: IFFALSE 19130
// begin Say ( Joan , D3a-Joan-1 ) ;
19104: LD_EXP 15
19108: PPUSH
19109: LD_STRING D3a-Joan-1
19111: PPUSH
19112: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19116: LD_EXP 1
19120: PPUSH
19121: LD_STRING D3a-JMM-1
19123: PPUSH
19124: CALL_OW 88
// end else
19128: GO 19472
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19130: LD_STRING 06_JoanStatus_1
19132: PPUSH
19133: LD_INT 0
19135: PPUSH
19136: CALL_OW 30
19140: PUSH
19141: LD_INT 1
19143: EQUAL
19144: IFFALSE 19472
// begin Say ( JMM , D3b-JMM-1 ) ;
19146: LD_EXP 1
19150: PPUSH
19151: LD_STRING D3b-JMM-1
19153: PPUSH
19154: CALL_OW 88
// if gammaCommander = 1 then
19158: LD_EXP 12
19162: PUSH
19163: LD_INT 1
19165: EQUAL
19166: IFFALSE 19223
// if IsOK ( Donaldson ) then
19168: LD_EXP 3
19172: PPUSH
19173: CALL_OW 302
19177: IFFALSE 19193
// Say ( Donaldson , D3b-Don-1 ) else
19179: LD_EXP 3
19183: PPUSH
19184: LD_STRING D3b-Don-1
19186: PPUSH
19187: CALL_OW 88
19191: GO 19223
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19193: LD_EXP 11
19197: PPUSH
19198: LD_INT 26
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 72
19212: PPUSH
19213: LD_STRING D3b-Sol1-1
19215: PPUSH
19216: LD_STRING D3b-Sol1-1
19218: PPUSH
19219: CALL 7179 0 3
// if gammaCommander = 2 then
19223: LD_EXP 12
19227: PUSH
19228: LD_INT 2
19230: EQUAL
19231: IFFALSE 19288
// if IsOk ( Brown ) then
19233: LD_EXP 2
19237: PPUSH
19238: CALL_OW 302
19242: IFFALSE 19258
// Say ( Brown , D3b-Brown-1 ) else
19244: LD_EXP 2
19248: PPUSH
19249: LD_STRING D3b-Brown-1
19251: PPUSH
19252: CALL_OW 88
19256: GO 19288
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19258: LD_EXP 11
19262: PPUSH
19263: LD_INT 26
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PPUSH
19273: CALL_OW 72
19277: PPUSH
19278: LD_STRING D3b-Sol1-1
19280: PPUSH
19281: LD_STRING D3b-Sol1-1
19283: PPUSH
19284: CALL 7179 0 3
// if gammaCommander = 3 then
19288: LD_EXP 12
19292: PUSH
19293: LD_INT 3
19295: EQUAL
19296: IFFALSE 19353
// if IsOk ( Houten ) then
19298: LD_EXP 13
19302: PPUSH
19303: CALL_OW 302
19307: IFFALSE 19323
// Say ( Houten , D3b-VanH-1 ) else
19309: LD_EXP 13
19313: PPUSH
19314: LD_STRING D3b-VanH-1
19316: PPUSH
19317: CALL_OW 88
19321: GO 19353
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19323: LD_EXP 11
19327: PPUSH
19328: LD_INT 26
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 72
19342: PPUSH
19343: LD_STRING D3b-Sol1-1
19345: PPUSH
19346: LD_STRING D3b-Sol1-1
19348: PPUSH
19349: CALL 7179 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19353: LD_EXP 11
19357: PPUSH
19358: LD_INT 26
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PPUSH
19368: CALL_OW 72
19372: PUSH
19373: LD_EXP 12
19377: PUSH
19378: LD_INT 1
19380: EQUAL
19381: PUSH
19382: LD_EXP 3
19386: PPUSH
19387: CALL_OW 302
19391: AND
19392: OR
19393: PUSH
19394: LD_EXP 12
19398: PUSH
19399: LD_INT 2
19401: EQUAL
19402: PUSH
19403: LD_EXP 2
19407: PPUSH
19408: CALL_OW 302
19412: AND
19413: OR
19414: PUSH
19415: LD_EXP 12
19419: PUSH
19420: LD_INT 3
19422: EQUAL
19423: PUSH
19424: LD_EXP 13
19428: PPUSH
19429: CALL_OW 302
19433: AND
19434: OR
19435: IFFALSE 19449
// Say ( JMM , D3b-JMM-2 ) ;
19437: LD_EXP 1
19441: PPUSH
19442: LD_STRING D3b-JMM-2
19444: PPUSH
19445: CALL_OW 88
// if IsOK ( Lisa ) then
19449: LD_EXP 6
19453: PPUSH
19454: CALL_OW 302
19458: IFFALSE 19472
// Say ( Lisa , D3b-Lisa-2 ) ;
19460: LD_EXP 6
19464: PPUSH
19465: LD_STRING D3b-Lisa-2
19467: PPUSH
19468: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19472: LD_ADDR_VAR 0 1
19476: PUSH
19477: LD_EXP 1
19481: PUSH
19482: LD_EXP 2
19486: PUSH
19487: LD_EXP 3
19491: PUSH
19492: LD_EXP 4
19496: PUSH
19497: LD_EXP 5
19501: PUSH
19502: LD_EXP 6
19506: PUSH
19507: LD_EXP 7
19511: PUSH
19512: LD_EXP 8
19516: PUSH
19517: LD_EXP 9
19521: PUSH
19522: LD_EXP 10
19526: PUSH
19527: LD_EXP 15
19531: PUSH
19532: LD_EXP 14
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: PUSH
19551: LD_EXP 42
19555: ADD
19556: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19557: LD_INT 22
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 21
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 26
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: LD_INT 25
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 25
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 25
19612: PUSH
19613: LD_INT 3
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 25
19622: PUSH
19623: LD_INT 4
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: PPUSH
19643: CALL_OW 69
19647: PUSH
19648: LD_VAR 0 1
19652: DIFF
19653: PPUSH
19654: LD_STRING DCa-Sol1-1
19656: PPUSH
19657: LD_STRING DCa-Sol1-1
19659: PPUSH
19660: CALL 7179 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19664: LD_EXP 1
19668: PPUSH
19669: LD_STRING DCb-JMM-1
19671: PPUSH
19672: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19676: LD_INT 22
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 21
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 26
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: LD_INT 25
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 25
19721: PUSH
19722: LD_INT 2
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 25
19731: PUSH
19732: LD_INT 3
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 25
19741: PUSH
19742: LD_INT 4
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: PPUSH
19762: CALL_OW 69
19766: PUSH
19767: LD_VAR 0 1
19771: DIFF
19772: PPUSH
19773: LD_STRING DCb-Sol1-1
19775: PPUSH
19776: LD_STRING DCb-Sol1-1
19778: PPUSH
19779: CALL 7179 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19783: LD_EXP 1
19787: PPUSH
19788: LD_STRING DCb-JMM-2
19790: PPUSH
19791: CALL_OW 88
// secondAttack = 1 ;
19795: LD_ADDR_EXP 34
19799: PUSH
19800: LD_INT 1
19802: ST_TO_ADDR
// end ;
19803: PPOPN 1
19805: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
19806: LD_EXP 39
19810: PUSH
19811: LD_INT 1
19813: EQUAL
19814: PUSH
19815: LD_OWVAR 1
19819: PUSH
19820: LD_INT 37800
19822: GREATEREQUAL
19823: AND
19824: IFFALSE 19897
19826: GO 19828
19828: DISABLE
// begin DialogueOn ;
19829: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
19833: LD_EXP 23
19837: PPUSH
19838: LD_STRING D4-Pow-1
19840: PPUSH
19841: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
19845: LD_EXP 1
19849: PPUSH
19850: LD_STRING D4-JMM-1
19852: PPUSH
19853: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
19857: LD_EXP 23
19861: PPUSH
19862: LD_STRING D4-Pow-2
19864: PPUSH
19865: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
19869: LD_EXP 1
19873: PPUSH
19874: LD_STRING D4-JMM-2
19876: PPUSH
19877: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
19881: LD_EXP 23
19885: PPUSH
19886: LD_STRING D4-Pow-3
19888: PPUSH
19889: CALL_OW 94
// DialogueOff ;
19893: CALL_OW 7
// end ;
19897: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
19898: LD_EXP 39
19902: PUSH
19903: LD_INT 1
19905: EQUAL
19906: PUSH
19907: LD_OWVAR 1
19911: PUSH
19912: LD_INT 50400
19914: GREATEREQUAL
19915: AND
19916: IFFALSE 19941
19918: GO 19920
19920: DISABLE
// begin DialogueOn ;
19921: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
19925: LD_EXP 23
19929: PPUSH
19930: LD_STRING D4a-Pow-1
19932: PPUSH
19933: CALL_OW 94
// DialogueOff ;
19937: CALL_OW 7
// end ;
19941: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
19942: LD_EXP 39
19946: PUSH
19947: LD_INT 1
19949: EQUAL
19950: PUSH
19951: LD_OWVAR 1
19955: PUSH
19956: LD_INT 73500
19958: GREATEREQUAL
19959: AND
19960: IFFALSE 19981
19962: GO 19964
19964: DISABLE
// begin PrepareSikorsky ;
19965: CALL 5704 0 0
// SikorskyArrive = 1 ;
19969: LD_ADDR_EXP 18
19973: PUSH
19974: LD_INT 1
19976: ST_TO_ADDR
// PrepareSikorskyArmy ;
19977: CALL 5880 0 0
// end ;
19981: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
19982: LD_EXP 17
19986: PPUSH
19987: LD_INT 5
19989: PPUSH
19990: CALL_OW 308
19994: IFFALSE 20186
19996: GO 19998
19998: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
19999: LD_EXP 17
20003: PPUSH
20004: CALL_OW 87
// DialogueOn ;
20008: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20012: LD_EXP 16
20016: PPUSH
20017: LD_STRING D5-Sik-1
20019: PPUSH
20020: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20024: LD_EXP 1
20028: PPUSH
20029: LD_STRING D5-JMM-1a
20031: PPUSH
20032: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20036: LD_EXP 16
20040: PPUSH
20041: LD_STRING D5-Sik-2
20043: PPUSH
20044: CALL_OW 88
// case query ( QSikorski ) of 1 :
20048: LD_STRING QSikorski
20050: PPUSH
20051: CALL_OW 97
20055: PUSH
20056: LD_INT 1
20058: DOUBLE
20059: EQUAL
20060: IFTRUE 20064
20062: GO 20087
20064: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20065: LD_EXP 16
20069: PPUSH
20070: LD_STRING D5a-Sik-1
20072: PPUSH
20073: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20077: LD_ADDR_EXP 19
20081: PUSH
20082: LD_INT 2100
20084: ST_TO_ADDR
// end ; 2 :
20085: GO 20174
20087: LD_INT 2
20089: DOUBLE
20090: EQUAL
20091: IFTRUE 20095
20093: GO 20118
20095: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20096: LD_EXP 16
20100: PPUSH
20101: LD_STRING D5b-Sik-1
20103: PPUSH
20104: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20108: LD_ADDR_EXP 19
20112: PUSH
20113: LD_INT 10500
20115: ST_TO_ADDR
// end ; 3 :
20116: GO 20174
20118: LD_INT 3
20120: DOUBLE
20121: EQUAL
20122: IFTRUE 20126
20124: GO 20173
20126: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20127: LD_EXP 16
20131: PPUSH
20132: LD_STRING D5c-Sik-1
20134: PPUSH
20135: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20139: LD_EXP 1
20143: PPUSH
20144: LD_STRING D5c-JMM-1
20146: PPUSH
20147: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20151: LD_EXP 16
20155: PPUSH
20156: LD_STRING D5c-Sik-2
20158: PPUSH
20159: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20163: LD_ADDR_EXP 19
20167: PUSH
20168: LD_INT 10500
20170: ST_TO_ADDR
// end ; end ;
20171: GO 20174
20173: POP
// DialogueOff ;
20174: CALL_OW 7
// timerStatus = 1 ;
20178: LD_ADDR_EXP 35
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// end ;
20186: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20187: LD_EXP 19
20191: PUSH
20192: LD_INT 35
20194: LESS
20195: IFFALSE 20243
20197: GO 20199
20199: DISABLE
// begin timerStatus = 0 ;
20200: LD_ADDR_EXP 35
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// DialogueOn ;
20208: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20212: LD_EXP 16
20216: PPUSH
20217: LD_STRING D6-Sik-1
20219: PPUSH
20220: CALL_OW 88
// DialogueOff ;
20224: CALL_OW 7
// SikorskyAI = 1 ;
20228: LD_ADDR_EXP 20
20232: PUSH
20233: LD_INT 1
20235: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20236: LD_STRING M2
20238: PPUSH
20239: CALL_OW 337
// end ;
20243: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20244: LD_EXP 17
20248: PPUSH
20249: LD_INT 18
20251: PPUSH
20252: CALL_OW 308
20256: IFFALSE 20366
20258: GO 20260
20260: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20261: LD_EXP 16
20265: PPUSH
20266: LD_STRING D7-Sik-1
20268: PPUSH
20269: CALL_OW 88
// wait ( 0 0$10 ) ;
20273: LD_INT 350
20275: PPUSH
20276: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20280: LD_EXP 1
20284: PPUSH
20285: LD_INT 24
20287: PPUSH
20288: CALL_OW 308
20292: PUSH
20293: LD_EXP 1
20297: PPUSH
20298: CALL 16909 0 1
20302: PUSH
20303: LD_EXP 1
20307: PPUSH
20308: CALL 16909 0 1
20312: PPUSH
20313: LD_INT 24
20315: PPUSH
20316: CALL_OW 308
20320: AND
20321: OR
20322: IFFALSE 20346
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20324: LD_EXP 16
20328: PPUSH
20329: LD_STRING D7a-Sik-1
20331: PPUSH
20332: CALL_OW 88
// SikorskyStatus = 1 ;
20336: LD_ADDR_EXP 21
20340: PUSH
20341: LD_INT 1
20343: ST_TO_ADDR
// end else
20344: GO 20366
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20346: LD_EXP 16
20350: PPUSH
20351: LD_STRING D7b-Sik-1
20353: PPUSH
20354: CALL_OW 88
// SikorskyStatus = 2 ;
20358: LD_ADDR_EXP 21
20362: PUSH
20363: LD_INT 2
20365: ST_TO_ADDR
// end ; end ; end_of_file
20366: END
// on BuildingComplete ( building ) do var tmp , un ;
20367: LD_INT 0
20369: PPUSH
20370: PPUSH
// begin if GetSide ( building ) = 3 then
20371: LD_VAR 0 1
20375: PPUSH
20376: CALL_OW 255
20380: PUSH
20381: LD_INT 3
20383: EQUAL
20384: IFFALSE 20921
// begin if GetBType ( building ) = b_depot then
20386: LD_VAR 0 1
20390: PPUSH
20391: CALL_OW 266
20395: PUSH
20396: LD_INT 0
20398: EQUAL
20399: IFFALSE 20467
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20401: LD_VAR 0 1
20405: PPUSH
20406: CALL_OW 274
20410: PPUSH
20411: LD_INT 1
20413: PPUSH
20414: LD_INT 5000
20416: PPUSH
20417: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20421: LD_VAR 0 1
20425: PPUSH
20426: CALL_OW 274
20430: PPUSH
20431: LD_INT 2
20433: PPUSH
20434: LD_INT 5000
20436: PPUSH
20437: CALL_OW 277
// SetBName ( building , konev ) ;
20441: LD_VAR 0 1
20445: PPUSH
20446: LD_STRING konev
20448: PPUSH
20449: CALL_OW 500
// ruDepot = building ;
20453: LD_ADDR_EXP 28
20457: PUSH
20458: LD_VAR 0 1
20462: ST_TO_ADDR
// BuildRussianBase ;
20463: CALL 7790 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20467: LD_VAR 0 1
20471: PPUSH
20472: CALL_OW 266
20476: PUSH
20477: LD_INT 0
20479: EQUAL
20480: PUSH
20481: LD_VAR 0 1
20485: PPUSH
20486: CALL_OW 266
20490: PUSH
20491: LD_INT 2
20493: EQUAL
20494: OR
20495: PUSH
20496: LD_VAR 0 1
20500: PPUSH
20501: CALL_OW 266
20505: PUSH
20506: LD_INT 4
20508: EQUAL
20509: OR
20510: IFFALSE 20521
// ComUpgrade ( building ) ;
20512: LD_VAR 0 1
20516: PPUSH
20517: CALL_OW 146
// if GetBType ( building ) = b_lab then
20521: LD_VAR 0 1
20525: PPUSH
20526: CALL_OW 266
20530: PUSH
20531: LD_INT 6
20533: EQUAL
20534: IFFALSE 20585
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20536: LD_VAR 0 1
20540: PPUSH
20541: LD_INT 10
20543: PPUSH
20544: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20548: LD_VAR 0 1
20552: PPUSH
20553: LD_INT 12
20555: PPUSH
20556: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20560: LD_INT 3
20562: PPUSH
20563: LD_VAR 0 1
20567: PPUSH
20568: LD_INT 3
20570: PPUSH
20571: CALL 8334 0 3
// ruLab = building ;
20575: LD_ADDR_EXP 29
20579: PUSH
20580: LD_VAR 0 1
20584: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20585: LD_VAR 0 1
20589: PPUSH
20590: CALL_OW 266
20594: PUSH
20595: LD_INT 32
20597: EQUAL
20598: IFFALSE 20716
// begin uc_side = 3 ;
20600: LD_ADDR_OWVAR 20
20604: PUSH
20605: LD_INT 3
20607: ST_TO_ADDR
// uc_nation = 3 ;
20608: LD_ADDR_OWVAR 21
20612: PUSH
20613: LD_INT 3
20615: ST_TO_ADDR
// hc_gallery =  ;
20616: LD_ADDR_OWVAR 33
20620: PUSH
20621: LD_STRING 
20623: ST_TO_ADDR
// hc_name =  ;
20624: LD_ADDR_OWVAR 26
20628: PUSH
20629: LD_STRING 
20631: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20632: LD_INT 0
20634: PPUSH
20635: LD_INT 1
20637: PPUSH
20638: LD_EXP 25
20642: PPUSH
20643: LD_EXP 26
20647: PPUSH
20648: CALL_OW 12
20652: PPUSH
20653: CALL_OW 380
// un = CreateHuman ;
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: CALL_OW 44
20666: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20667: LD_VAR 0 3
20671: PPUSH
20672: LD_VAR 0 1
20676: PPUSH
20677: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20681: LD_VAR 0 1
20685: PPUSH
20686: LD_INT 43
20688: PUSH
20689: LD_INT 44
20691: PUSH
20692: LD_INT 46
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: PPUSH
20703: LD_INT 3
20705: PPUSH
20706: CALL_OW 12
20710: ARRAY
20711: PPUSH
20712: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 266
20725: PUSH
20726: LD_INT 33
20728: EQUAL
20729: IFFALSE 20766
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20731: LD_VAR 0 1
20735: PPUSH
20736: LD_INT 43
20738: PUSH
20739: LD_INT 44
20741: PUSH
20742: LD_INT 46
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: PPUSH
20753: LD_INT 3
20755: PPUSH
20756: CALL_OW 12
20760: ARRAY
20761: PPUSH
20762: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20766: LD_VAR 0 1
20770: PPUSH
20771: CALL_OW 266
20775: PUSH
20776: LD_INT 32
20778: EQUAL
20779: IFFALSE 20816
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_INT 43
20788: PUSH
20789: LD_INT 44
20791: PUSH
20792: LD_INT 46
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: PPUSH
20803: LD_INT 3
20805: PPUSH
20806: CALL_OW 12
20810: ARRAY
20811: PPUSH
20812: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
20816: LD_VAR 0 1
20820: PPUSH
20821: CALL_OW 266
20825: PUSH
20826: LD_INT 24
20828: EQUAL
20829: IFFALSE 20839
// russianAI = 1 ;
20831: LD_ADDR_EXP 27
20835: PUSH
20836: LD_INT 1
20838: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
20839: LD_EXP 31
20843: PUSH
20844: LD_INT 0
20846: GREATER
20847: IFFALSE 20921
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20849: LD_ADDR_EXP 31
20853: PUSH
20854: LD_EXP 31
20858: PPUSH
20859: LD_INT 1
20861: PPUSH
20862: CALL_OW 3
20866: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20867: LD_ADDR_EXP 31
20871: PUSH
20872: LD_EXP 31
20876: PPUSH
20877: LD_INT 1
20879: PPUSH
20880: CALL_OW 3
20884: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20885: LD_ADDR_EXP 31
20889: PUSH
20890: LD_EXP 31
20894: PPUSH
20895: LD_INT 1
20897: PPUSH
20898: CALL_OW 3
20902: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20903: LD_ADDR_EXP 31
20907: PUSH
20908: LD_EXP 31
20912: PPUSH
20913: LD_INT 1
20915: PPUSH
20916: CALL_OW 3
20920: ST_TO_ADDR
// end ; end ; end ;
20921: PPOPN 3
20923: END
// on UpgradeComplete ( building ) do var i ;
20924: LD_INT 0
20926: PPUSH
// begin if GetSide ( building ) = 3 then
20927: LD_VAR 0 1
20931: PPUSH
20932: CALL_OW 255
20936: PUSH
20937: LD_INT 3
20939: EQUAL
20940: IFFALSE 21121
// begin if GetBType ( building ) = b_factory then
20942: LD_VAR 0 1
20946: PPUSH
20947: CALL_OW 266
20951: PUSH
20952: LD_INT 3
20954: EQUAL
20955: IFFALSE 21022
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
20957: LD_ADDR_VAR 0 2
20961: PUSH
20962: LD_INT 22
20964: PUSH
20965: LD_INT 3
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 25
20974: PUSH
20975: LD_INT 3
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PPUSH
20986: CALL_OW 69
20990: PUSH
20991: FOR_IN
20992: IFFALSE 21010
// ComEnterUnit ( i , building ) ;
20994: LD_VAR 0 2
20998: PPUSH
20999: LD_VAR 0 1
21003: PPUSH
21004: CALL_OW 120
21008: GO 20991
21010: POP
21011: POP
// ruFab = building ;
21012: LD_ADDR_EXP 30
21016: PUSH
21017: LD_VAR 0 1
21021: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21022: LD_VAR 0 1
21026: PPUSH
21027: CALL_OW 266
21031: PUSH
21032: LD_INT 8
21034: EQUAL
21035: IFFALSE 21092
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21037: LD_ADDR_VAR 0 2
21041: PUSH
21042: LD_INT 22
21044: PUSH
21045: LD_INT 3
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 25
21054: PUSH
21055: LD_INT 4
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PPUSH
21066: CALL_OW 69
21070: PUSH
21071: FOR_IN
21072: IFFALSE 21090
// ComEnterUnit ( i , building ) ;
21074: LD_VAR 0 2
21078: PPUSH
21079: LD_VAR 0 1
21083: PPUSH
21084: CALL_OW 120
21088: GO 21071
21090: POP
21091: POP
// if GetBType ( building ) = b_warehouse then
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 266
21101: PUSH
21102: LD_INT 1
21104: EQUAL
21105: IFFALSE 21121
// begin ComEnterUnit ( Borodin , building ) ;
21107: LD_EXP 24
21111: PPUSH
21112: LD_VAR 0 1
21116: PPUSH
21117: CALL_OW 120
// end ; end ; end ;
21121: PPOPN 2
21123: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21124: LD_VAR 0 1
21128: PPUSH
21129: CALL_OW 247
21133: PUSH
21134: LD_INT 2
21136: EQUAL
21137: PUSH
21138: LD_VAR 0 1
21142: PPUSH
21143: CALL_OW 263
21147: PUSH
21148: LD_INT 3
21150: EQUAL
21151: AND
21152: PUSH
21153: LD_EXP 41
21157: PUSH
21158: LD_INT 0
21160: EQUAL
21161: AND
21162: IFFALSE 21280
// begin varEvent1 = 1 ;
21164: LD_ADDR_EXP 41
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21181: LD_INT 22
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 21
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: LD_INT 25
21206: PUSH
21207: LD_INT 1
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 25
21216: PUSH
21217: LD_INT 2
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 25
21226: PUSH
21227: LD_INT 3
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 25
21236: PUSH
21237: LD_INT 4
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: PPUSH
21256: CALL_OW 69
21260: PUSH
21261: LD_EXP 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: DIFF
21269: PPUSH
21270: LD_STRING DC-Sol1-1
21272: PPUSH
21273: LD_STRING DC-FSol1-1
21275: PPUSH
21276: CALL 7179 0 3
// end ; end ;
21280: PPOPN 1
21282: END
// on UnitDestroyed ( unit ) do var i ;
21283: LD_INT 0
21285: PPUSH
// begin if unit = Joan then
21286: LD_VAR 0 1
21290: PUSH
21291: LD_EXP 15
21295: EQUAL
21296: IFFALSE 21305
// DeleteCharacters ( Joan ) ;
21298: LD_STRING Joan
21300: PPUSH
21301: CALL_OW 40
// if GetSide ( unit ) = 3 then
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 255
21314: PUSH
21315: LD_INT 3
21317: EQUAL
21318: IFFALSE 22088
// begin if GetType ( unit ) = unit_building then
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 247
21329: PUSH
21330: LD_INT 3
21332: EQUAL
21333: IFFALSE 22025
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21335: LD_VAR 0 1
21339: PPUSH
21340: CALL_OW 266
21344: PUSH
21345: LD_INT 31
21347: EQUAL
21348: PUSH
21349: LD_VAR 0 1
21353: PPUSH
21354: CALL_OW 266
21358: PUSH
21359: LD_INT 32
21361: EQUAL
21362: OR
21363: PUSH
21364: LD_VAR 0 1
21368: PPUSH
21369: CALL_OW 266
21373: PUSH
21374: LD_INT 36
21376: EQUAL
21377: OR
21378: PUSH
21379: LD_VAR 0 1
21383: PPUSH
21384: CALL_OW 266
21388: PUSH
21389: LD_INT 0
21391: EQUAL
21392: OR
21393: PUSH
21394: LD_VAR 0 1
21398: PPUSH
21399: CALL_OW 266
21403: PUSH
21404: LD_INT 24
21406: EQUAL
21407: OR
21408: PUSH
21409: LD_VAR 0 1
21413: PPUSH
21414: CALL_OW 266
21418: PUSH
21419: LD_INT 17
21421: EQUAL
21422: OR
21423: PUSH
21424: LD_VAR 0 1
21428: PPUSH
21429: CALL_OW 266
21433: PUSH
21434: LD_INT 25
21436: EQUAL
21437: OR
21438: PUSH
21439: LD_VAR 0 1
21443: PPUSH
21444: CALL_OW 266
21448: PUSH
21449: LD_INT 19
21451: EQUAL
21452: OR
21453: PUSH
21454: LD_VAR 0 1
21458: PPUSH
21459: CALL_OW 266
21463: PUSH
21464: LD_INT 20
21466: EQUAL
21467: OR
21468: PUSH
21469: LD_VAR 0 1
21473: PPUSH
21474: CALL_OW 266
21478: PUSH
21479: LD_INT 18
21481: EQUAL
21482: OR
21483: PUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL_OW 266
21493: PUSH
21494: LD_INT 21
21496: EQUAL
21497: OR
21498: PUSH
21499: LD_VAR 0 1
21503: PPUSH
21504: CALL_OW 266
21508: PUSH
21509: LD_INT 23
21511: EQUAL
21512: OR
21513: PUSH
21514: LD_VAR 0 1
21518: PPUSH
21519: CALL_OW 266
21523: PUSH
21524: LD_INT 16
21526: EQUAL
21527: OR
21528: PUSH
21529: LD_VAR 0 1
21533: PPUSH
21534: CALL_OW 266
21538: PUSH
21539: LD_INT 6
21541: EQUAL
21542: OR
21543: PUSH
21544: LD_VAR 0 1
21548: PPUSH
21549: CALL_OW 266
21553: PUSH
21554: LD_INT 29
21556: EQUAL
21557: OR
21558: PUSH
21559: LD_VAR 0 1
21563: PPUSH
21564: CALL_OW 266
21568: PUSH
21569: LD_INT 26
21571: EQUAL
21572: OR
21573: PUSH
21574: LD_VAR 0 1
21578: PPUSH
21579: CALL_OW 266
21583: PUSH
21584: LD_INT 30
21586: EQUAL
21587: OR
21588: PUSH
21589: LD_VAR 0 1
21593: PPUSH
21594: CALL_OW 266
21598: PUSH
21599: LD_INT 28
21601: EQUAL
21602: OR
21603: PUSH
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 266
21613: PUSH
21614: LD_INT 27
21616: EQUAL
21617: OR
21618: PUSH
21619: LD_VAR 0 1
21623: PPUSH
21624: CALL_OW 266
21628: PUSH
21629: LD_INT 33
21631: EQUAL
21632: OR
21633: PUSH
21634: LD_VAR 0 1
21638: PPUSH
21639: CALL_OW 266
21643: PUSH
21644: LD_INT 2
21646: EQUAL
21647: OR
21648: PUSH
21649: LD_VAR 0 1
21653: PPUSH
21654: CALL_OW 266
21658: PUSH
21659: LD_INT 4
21661: EQUAL
21662: OR
21663: IFFALSE 21749
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21665: LD_ADDR_EXP 31
21669: PUSH
21670: LD_EXP 31
21674: PUSH
21675: LD_VAR 0 1
21679: PPUSH
21680: CALL_OW 266
21684: ADD
21685: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21686: LD_ADDR_EXP 31
21690: PUSH
21691: LD_EXP 31
21695: PUSH
21696: LD_VAR 0 1
21700: PPUSH
21701: CALL_OW 250
21705: ADD
21706: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21707: LD_ADDR_EXP 31
21711: PUSH
21712: LD_EXP 31
21716: PUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 251
21726: ADD
21727: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21728: LD_ADDR_EXP 31
21732: PUSH
21733: LD_EXP 31
21737: PUSH
21738: LD_VAR 0 1
21742: PPUSH
21743: CALL_OW 254
21747: ADD
21748: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21749: LD_VAR 0 1
21753: PPUSH
21754: CALL_OW 266
21758: PUSH
21759: LD_INT 1
21761: EQUAL
21762: IFFALSE 21841
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21764: LD_ADDR_EXP 31
21768: PUSH
21769: LD_EXP 31
21773: PUSH
21774: LD_INT 0
21776: ADD
21777: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21778: LD_ADDR_EXP 31
21782: PUSH
21783: LD_EXP 31
21787: PUSH
21788: LD_VAR 0 1
21792: PPUSH
21793: CALL_OW 250
21797: ADD
21798: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21799: LD_ADDR_EXP 31
21803: PUSH
21804: LD_EXP 31
21808: PUSH
21809: LD_VAR 0 1
21813: PPUSH
21814: CALL_OW 251
21818: ADD
21819: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21820: LD_ADDR_EXP 31
21824: PUSH
21825: LD_EXP 31
21829: PUSH
21830: LD_VAR 0 1
21834: PPUSH
21835: CALL_OW 254
21839: ADD
21840: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
21841: LD_VAR 0 1
21845: PPUSH
21846: CALL_OW 266
21850: PUSH
21851: LD_INT 3
21853: EQUAL
21854: IFFALSE 21933
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
21856: LD_ADDR_EXP 31
21860: PUSH
21861: LD_EXP 31
21865: PUSH
21866: LD_INT 2
21868: ADD
21869: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21870: LD_ADDR_EXP 31
21874: PUSH
21875: LD_EXP 31
21879: PUSH
21880: LD_VAR 0 1
21884: PPUSH
21885: CALL_OW 250
21889: ADD
21890: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21891: LD_ADDR_EXP 31
21895: PUSH
21896: LD_EXP 31
21900: PUSH
21901: LD_VAR 0 1
21905: PPUSH
21906: CALL_OW 251
21910: ADD
21911: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21912: LD_ADDR_EXP 31
21916: PUSH
21917: LD_EXP 31
21921: PUSH
21922: LD_VAR 0 1
21926: PPUSH
21927: CALL_OW 254
21931: ADD
21932: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 266
21942: PUSH
21943: LD_INT 5
21945: EQUAL
21946: IFFALSE 22025
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
21948: LD_ADDR_EXP 31
21952: PUSH
21953: LD_EXP 31
21957: PUSH
21958: LD_INT 4
21960: ADD
21961: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21962: LD_ADDR_EXP 31
21966: PUSH
21967: LD_EXP 31
21971: PUSH
21972: LD_VAR 0 1
21976: PPUSH
21977: CALL_OW 250
21981: ADD
21982: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21983: LD_ADDR_EXP 31
21987: PUSH
21988: LD_EXP 31
21992: PUSH
21993: LD_VAR 0 1
21997: PPUSH
21998: CALL_OW 251
22002: ADD
22003: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22004: LD_ADDR_EXP 31
22008: PUSH
22009: LD_EXP 31
22013: PUSH
22014: LD_VAR 0 1
22018: PPUSH
22019: CALL_OW 254
22023: ADD
22024: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22025: LD_VAR 0 1
22029: PPUSH
22030: CALL_OW 247
22034: PUSH
22035: LD_INT 1
22037: EQUAL
22038: IFFALSE 22088
// begin for i in defenders_list do
22040: LD_ADDR_VAR 0 2
22044: PUSH
22045: LD_EXP 32
22049: PUSH
22050: FOR_IN
22051: IFFALSE 22086
// if i = unit then
22053: LD_VAR 0 2
22057: PUSH
22058: LD_VAR 0 1
22062: EQUAL
22063: IFFALSE 22084
// defenders_list = defenders_list diff [ unit ] ;
22065: LD_ADDR_EXP 32
22069: PUSH
22070: LD_EXP 32
22074: PUSH
22075: LD_VAR 0 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: DIFF
22083: ST_TO_ADDR
22084: GO 22050
22086: POP
22087: POP
// end ; end ; end ;
22088: PPOPN 2
22090: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22091: LD_VAR 0 1
22095: PPUSH
22096: CALL 40239 0 1
// end ; end_of_file
22100: PPOPN 1
22102: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22103: GO 22105
22105: DISABLE
22106: LD_INT 0
22108: PPUSH
// begin enemyWayX = [ ] ;
22109: LD_ADDR_EXP 46
22113: PUSH
22114: EMPTY
22115: ST_TO_ADDR
// enemyWayY = [ ] ;
22116: LD_ADDR_EXP 47
22120: PUSH
22121: EMPTY
22122: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22123: LD_ADDR_VAR 0 1
22127: PUSH
22128: LD_INT 1
22130: PPUSH
22131: LD_INT 3
22133: PPUSH
22134: CALL_OW 12
22138: ST_TO_ADDR
// if rnd = 1 then
22139: LD_VAR 0 1
22143: PUSH
22144: LD_INT 1
22146: EQUAL
22147: IFFALSE 22187
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22149: LD_ADDR_EXP 46
22153: PUSH
22154: LD_INT 73
22156: PUSH
22157: LD_INT 46
22159: PUSH
22160: LD_INT 29
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22168: LD_ADDR_EXP 47
22172: PUSH
22173: LD_INT 71
22175: PUSH
22176: LD_INT 43
22178: PUSH
22179: LD_INT 29
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: LIST
22186: ST_TO_ADDR
// end ; if rnd = 2 then
22187: LD_VAR 0 1
22191: PUSH
22192: LD_INT 2
22194: EQUAL
22195: IFFALSE 22219
// begin enemyWayX = [ 64 ] ;
22197: LD_ADDR_EXP 46
22201: PUSH
22202: LD_INT 64
22204: PUSH
22205: EMPTY
22206: LIST
22207: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22208: LD_ADDR_EXP 47
22212: PUSH
22213: LD_INT 43
22215: PUSH
22216: EMPTY
22217: LIST
22218: ST_TO_ADDR
// end ; if rnd = 3 then
22219: LD_VAR 0 1
22223: PUSH
22224: LD_INT 3
22226: EQUAL
22227: IFFALSE 22251
// begin enemyWayX = [ 80 ] ;
22229: LD_ADDR_EXP 46
22233: PUSH
22234: LD_INT 80
22236: PUSH
22237: EMPTY
22238: LIST
22239: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22240: LD_ADDR_EXP 47
22244: PUSH
22245: LD_INT 28
22247: PUSH
22248: EMPTY
22249: LIST
22250: ST_TO_ADDR
// end ; enable ;
22251: ENABLE
// end ;
22252: PPOPN 1
22254: END
// every 0 0$1 do
22255: GO 22257
22257: DISABLE
// begin enable ;
22258: ENABLE
// if escapeAvalaible = 0 then
22259: LD_EXP 36
22263: PUSH
22264: LD_INT 0
22266: EQUAL
22267: IFFALSE 22279
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22269: LD_INT 3
22271: PPUSH
22272: LD_INT 6
22274: PPUSH
22275: CALL 8575 0 2
// if escapeAvalaible = 0 then
22279: LD_EXP 36
22283: PUSH
22284: LD_INT 0
22286: EQUAL
22287: IFFALSE 22299
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22289: LD_INT 1
22291: PPUSH
22292: LD_INT 24
22294: PPUSH
22295: CALL 9235 0 2
// if russianAI = 1 then
22299: LD_EXP 27
22303: PUSH
22304: LD_INT 1
22306: EQUAL
22307: IFFALSE 22377
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22309: LD_INT 3
22311: PPUSH
22312: LD_INT 7
22314: PPUSH
22315: LD_INT 6
22317: PPUSH
22318: LD_EXP 29
22322: PPUSH
22323: CALL 11673 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22327: LD_INT 3
22329: PPUSH
22330: LD_EXP 28
22334: PPUSH
22335: LD_INT 6
22337: PPUSH
22338: LD_EXP 31
22342: PPUSH
22343: CALL 11267 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22347: LD_INT 3
22349: PPUSH
22350: LD_INT 26
22352: PPUSH
22353: LD_EXP 46
22357: PPUSH
22358: LD_EXP 47
22362: PPUSH
22363: CALL 10135 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22367: LD_INT 3
22369: PPUSH
22370: LD_INT 1
22372: PPUSH
22373: CALL 12217 0 2
// end ; if SikorskyArrive = 1 then
22377: LD_EXP 18
22381: PUSH
22382: LD_INT 1
22384: EQUAL
22385: IFFALSE 22403
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22387: LD_INT 3
22389: PPUSH
22390: LD_INT 10
22392: PPUSH
22393: LD_INT 53
22395: PPUSH
22396: LD_INT 59
22398: PPUSH
22399: CALL 9932 0 4
// end ;
22403: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22404: LD_EXP 27
22408: PUSH
22409: LD_INT 1
22411: EQUAL
22412: IFFALSE 22688
22414: GO 22416
22416: DISABLE
22417: LD_INT 0
22419: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22420: LD_ADDR_VAR 0 1
22424: PUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 3
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 21
22437: PUSH
22438: LD_INT 3
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 30
22447: PUSH
22448: LD_INT 32
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 3
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: LD_INT 35
22463: PUSH
22464: LD_INT 43
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 35
22473: PUSH
22474: LD_INT 44
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 35
22483: PUSH
22484: LD_INT 46
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: PPUSH
22507: CALL_OW 69
22511: PUSH
22512: FOR_IN
22513: IFFALSE 22552
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22515: LD_VAR 0 1
22519: PPUSH
22520: LD_INT 43
22522: PUSH
22523: LD_INT 44
22525: PUSH
22526: LD_INT 46
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 1
22536: PPUSH
22537: LD_INT 3
22539: PPUSH
22540: CALL_OW 12
22544: ARRAY
22545: PPUSH
22546: CALL_OW 431
22550: GO 22512
22552: POP
22553: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22554: LD_ADDR_VAR 0 1
22558: PUSH
22559: LD_INT 22
22561: PUSH
22562: LD_INT 3
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 21
22571: PUSH
22572: LD_INT 3
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 30
22581: PUSH
22582: LD_INT 33
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: LD_INT 35
22597: PUSH
22598: LD_INT 43
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 35
22607: PUSH
22608: LD_INT 44
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 35
22617: PUSH
22618: LD_INT 46
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 69
22645: PUSH
22646: FOR_IN
22647: IFFALSE 22686
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22649: LD_VAR 0 1
22653: PPUSH
22654: LD_INT 43
22656: PUSH
22657: LD_INT 44
22659: PUSH
22660: LD_INT 46
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 1
22670: PPUSH
22671: LD_INT 3
22673: PPUSH
22674: CALL_OW 12
22678: ARRAY
22679: PPUSH
22680: CALL_OW 431
22684: GO 22646
22686: POP
22687: POP
// end ;
22688: PPOPN 1
22690: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22691: LD_EXP 24
22695: PPUSH
22696: CALL_OW 310
22700: NOT
22701: PUSH
22702: LD_EXP 28
22706: PPUSH
22707: CALL_OW 302
22711: AND
22712: PUSH
22713: LD_EXP 28
22717: PPUSH
22718: CALL_OW 255
22722: PUSH
22723: LD_INT 3
22725: EQUAL
22726: AND
22727: IFFALSE 22747
22729: GO 22731
22731: DISABLE
// begin enable ;
22732: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22733: LD_EXP 24
22737: PPUSH
22738: LD_EXP 28
22742: PPUSH
22743: CALL_OW 120
// end ;
22747: END
// every 0 0$1 trigger SikorskyAI = 1 do
22748: LD_EXP 20
22752: PUSH
22753: LD_INT 1
22755: EQUAL
22756: IFFALSE 22791
22758: GO 22760
22760: DISABLE
// begin enable ;
22761: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22762: LD_INT 4
22764: PPUSH
22765: LD_INT 10
22767: PPUSH
22768: LD_INT 93
22770: PPUSH
22771: LD_INT 93
22773: PPUSH
22774: CALL 9932 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22778: LD_INT 4
22780: PPUSH
22781: LD_INT 11
22783: PPUSH
22784: LD_INT 3
22786: PPUSH
22787: CALL 16429 0 3
// end ;
22791: END
// every 0 0$1 trigger SikorskyAI = 1 do
22792: LD_EXP 20
22796: PUSH
22797: LD_INT 1
22799: EQUAL
22800: IFFALSE 22812
22802: GO 22804
22804: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
22805: LD_INT 4
22807: PPUSH
22808: CALL 10939 0 1
22812: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22813: LD_EXP 27
22817: PUSH
22818: LD_INT 1
22820: EQUAL
22821: PUSH
22822: LD_EXP 30
22826: PPUSH
22827: CALL_OW 302
22831: AND
22832: PUSH
22833: LD_EXP 30
22837: PPUSH
22838: CALL_OW 255
22842: PUSH
22843: LD_INT 3
22845: EQUAL
22846: AND
22847: PUSH
22848: LD_INT 22
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 21
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 33
22870: PUSH
22871: LD_INT 3
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 69
22887: PUSH
22888: LD_INT 0
22890: EQUAL
22891: AND
22892: IFFALSE 23126
22894: GO 22896
22896: DISABLE
// begin enable ;
22897: ENABLE
// if Difficulty = 1 then
22898: LD_OWVAR 67
22902: PUSH
22903: LD_INT 1
22905: EQUAL
22906: IFFALSE 22974
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
22908: LD_INT 3
22910: PPUSH
22911: LD_EXP 30
22915: PPUSH
22916: LD_INT 5
22918: PPUSH
22919: LD_INT 8
22921: PPUSH
22922: CALL_OW 12
22926: PPUSH
22927: LD_INT 43
22929: PUSH
22930: LD_INT 43
22932: PUSH
22933: LD_INT 43
22935: PUSH
22936: LD_INT 43
22938: PUSH
22939: LD_INT 44
22941: PUSH
22942: LD_INT 44
22944: PUSH
22945: LD_INT 44
22947: PUSH
22948: LD_INT 46
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: PPUSH
22961: LD_INT 1
22963: PPUSH
22964: LD_INT 3
22966: PPUSH
22967: LD_INT 24
22969: PPUSH
22970: CALL 9778 0 7
// if Difficulty = 2 then
22974: LD_OWVAR 67
22978: PUSH
22979: LD_INT 2
22981: EQUAL
22982: IFFALSE 23050
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
22984: LD_INT 3
22986: PPUSH
22987: LD_EXP 30
22991: PPUSH
22992: LD_INT 6
22994: PPUSH
22995: LD_INT 8
22997: PPUSH
22998: CALL_OW 12
23002: PPUSH
23003: LD_INT 43
23005: PUSH
23006: LD_INT 43
23008: PUSH
23009: LD_INT 44
23011: PUSH
23012: LD_INT 44
23014: PUSH
23015: LD_INT 44
23017: PUSH
23018: LD_INT 44
23020: PUSH
23021: LD_INT 46
23023: PUSH
23024: LD_INT 46
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: LD_INT 3
23042: PPUSH
23043: LD_INT 24
23045: PPUSH
23046: CALL 9778 0 7
// if Difficulty = 3 then
23050: LD_OWVAR 67
23054: PUSH
23055: LD_INT 3
23057: EQUAL
23058: IFFALSE 23126
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23060: LD_INT 3
23062: PPUSH
23063: LD_EXP 30
23067: PPUSH
23068: LD_INT 7
23070: PPUSH
23071: LD_INT 8
23073: PPUSH
23074: CALL_OW 12
23078: PPUSH
23079: LD_INT 43
23081: PUSH
23082: LD_INT 43
23084: PUSH
23085: LD_INT 44
23087: PUSH
23088: LD_INT 44
23090: PUSH
23091: LD_INT 44
23093: PUSH
23094: LD_INT 46
23096: PUSH
23097: LD_INT 46
23099: PUSH
23100: LD_INT 46
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: PPUSH
23113: LD_INT 1
23115: PPUSH
23116: LD_INT 3
23118: PPUSH
23119: LD_INT 24
23121: PPUSH
23122: CALL 9778 0 7
// end ;
23126: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23127: LD_EXP 38
23131: PUSH
23132: LD_INT 1
23134: EQUAL
23135: IFFALSE 23217
23137: GO 23139
23139: DISABLE
23140: LD_INT 0
23142: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23143: LD_ADDR_VAR 0 1
23147: PUSH
23148: LD_INT 22
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 21
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 3
23170: PUSH
23171: LD_INT 24
23173: PUSH
23174: LD_INT 650
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: PPUSH
23190: CALL_OW 69
23194: PUSH
23195: FOR_IN
23196: IFFALSE 23215
// ComMoveXY ( i , 51 , 12 ) ;
23198: LD_VAR 0 1
23202: PPUSH
23203: LD_INT 51
23205: PPUSH
23206: LD_INT 12
23208: PPUSH
23209: CALL_OW 111
23213: GO 23195
23215: POP
23216: POP
// end ; end_of_file
23217: PPOPN 1
23219: END
// every 1 1$20 trigger firstAttack = 1 do
23220: LD_EXP 33
23224: PUSH
23225: LD_INT 1
23227: EQUAL
23228: IFFALSE 23334
23230: GO 23232
23232: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23233: LD_INT 6
23235: PPUSH
23236: LD_INT 3
23238: PPUSH
23239: LD_INT 3
23241: PPUSH
23242: LD_INT 4
23244: PPUSH
23245: CALL_OW 12
23249: PUSH
23250: LD_INT 4
23252: PPUSH
23253: LD_INT 6
23255: PPUSH
23256: CALL_OW 12
23260: PUSH
23261: LD_INT 5
23263: PPUSH
23264: LD_INT 6
23266: PPUSH
23267: CALL_OW 12
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: LD_OWVAR 67
23281: ARRAY
23282: PPUSH
23283: LD_INT 0
23285: PPUSH
23286: LD_INT 0
23288: PPUSH
23289: LD_INT 0
23291: PPUSH
23292: LD_INT 0
23294: PPUSH
23295: LD_EXP 25
23299: PPUSH
23300: LD_EXP 26
23304: PPUSH
23305: CALL_OW 12
23309: PPUSH
23310: LD_INT 16
23312: PPUSH
23313: LD_INT 7
23315: PPUSH
23316: LD_INT 1
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: LD_INT 3
23324: PPUSH
23325: CALL_OW 12
23329: PPUSH
23330: CALL 12447 0 12
23334: END
// every 1 1$40 trigger firstAttack = 1 do
23335: LD_EXP 33
23339: PUSH
23340: LD_INT 1
23342: EQUAL
23343: IFFALSE 23435
23345: GO 23347
23347: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23348: LD_INT 16
23350: PPUSH
23351: LD_INT 6
23353: PPUSH
23354: LD_INT 3
23356: PPUSH
23357: LD_INT 4
23359: PPUSH
23360: CALL_OW 12
23364: PUSH
23365: LD_INT 4
23367: PPUSH
23368: LD_INT 5
23370: PPUSH
23371: CALL_OW 12
23375: PUSH
23376: LD_INT 5
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: LIST
23383: PUSH
23384: LD_OWVAR 67
23388: ARRAY
23389: PPUSH
23390: LD_EXP 25
23394: PPUSH
23395: LD_EXP 26
23399: PPUSH
23400: CALL_OW 12
23404: PPUSH
23405: LD_INT 3
23407: PPUSH
23408: LD_INT 1
23410: PPUSH
23411: LD_INT 3
23413: PPUSH
23414: LD_INT 44
23416: PUSH
23417: LD_INT 46
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PPUSH
23424: EMPTY
23425: PPUSH
23426: EMPTY
23427: PPUSH
23428: LD_INT 1
23430: PPUSH
23431: CALL 14740 0 11
23435: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23436: LD_EXP 33
23440: PUSH
23441: LD_INT 1
23443: EQUAL
23444: PUSH
23445: LD_EXP 39
23449: PUSH
23450: LD_INT 0
23452: EQUAL
23453: AND
23454: IFFALSE 23560
23456: GO 23458
23458: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23459: LD_INT 6
23461: PPUSH
23462: LD_INT 3
23464: PPUSH
23465: LD_INT 4
23467: PPUSH
23468: LD_INT 5
23470: PPUSH
23471: CALL_OW 12
23475: PUSH
23476: LD_INT 5
23478: PPUSH
23479: LD_INT 6
23481: PPUSH
23482: CALL_OW 12
23486: PUSH
23487: LD_INT 5
23489: PPUSH
23490: LD_INT 6
23492: PPUSH
23493: CALL_OW 12
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: PUSH
23503: LD_OWVAR 67
23507: ARRAY
23508: PPUSH
23509: LD_INT 0
23511: PPUSH
23512: LD_INT 0
23514: PPUSH
23515: LD_INT 0
23517: PPUSH
23518: LD_INT 0
23520: PPUSH
23521: LD_EXP 25
23525: PPUSH
23526: LD_EXP 26
23530: PPUSH
23531: CALL_OW 12
23535: PPUSH
23536: LD_INT 16
23538: PPUSH
23539: LD_INT 7
23541: PPUSH
23542: LD_INT 1
23544: PPUSH
23545: LD_INT 1
23547: PPUSH
23548: LD_INT 3
23550: PPUSH
23551: CALL_OW 12
23555: PPUSH
23556: CALL 12447 0 12
23560: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23561: LD_EXP 33
23565: PUSH
23566: LD_INT 1
23568: EQUAL
23569: PUSH
23570: LD_EXP 39
23574: PUSH
23575: LD_INT 0
23577: EQUAL
23578: AND
23579: IFFALSE 23675
23581: GO 23583
23583: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23584: LD_INT 16
23586: PPUSH
23587: LD_INT 6
23589: PPUSH
23590: LD_INT 4
23592: PPUSH
23593: LD_INT 5
23595: PPUSH
23596: CALL_OW 12
23600: PUSH
23601: LD_INT 6
23603: PPUSH
23604: LD_INT 7
23606: PPUSH
23607: CALL_OW 12
23611: PUSH
23612: LD_INT 7
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: LD_OWVAR 67
23624: ARRAY
23625: PPUSH
23626: LD_EXP 25
23630: PPUSH
23631: LD_EXP 26
23635: PPUSH
23636: CALL_OW 12
23640: PPUSH
23641: LD_INT 3
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: LD_INT 3
23649: PPUSH
23650: LD_INT 43
23652: PUSH
23653: LD_INT 44
23655: PUSH
23656: LD_INT 46
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: PPUSH
23664: EMPTY
23665: PPUSH
23666: EMPTY
23667: PPUSH
23668: LD_INT 1
23670: PPUSH
23671: CALL 14740 0 11
23675: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23676: LD_EXP 33
23680: PUSH
23681: LD_INT 1
23683: EQUAL
23684: PUSH
23685: LD_EXP 39
23689: PUSH
23690: LD_INT 0
23692: EQUAL
23693: AND
23694: IFFALSE 23790
23696: GO 23698
23698: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23699: LD_INT 16
23701: PPUSH
23702: LD_INT 6
23704: PPUSH
23705: LD_INT 4
23707: PPUSH
23708: LD_INT 5
23710: PPUSH
23711: CALL_OW 12
23715: PUSH
23716: LD_INT 6
23718: PPUSH
23719: LD_INT 7
23721: PPUSH
23722: CALL_OW 12
23726: PUSH
23727: LD_INT 7
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: PUSH
23735: LD_OWVAR 67
23739: ARRAY
23740: PPUSH
23741: LD_EXP 25
23745: PPUSH
23746: LD_EXP 26
23750: PPUSH
23751: CALL_OW 12
23755: PPUSH
23756: LD_INT 3
23758: PPUSH
23759: LD_INT 1
23761: PPUSH
23762: LD_INT 3
23764: PPUSH
23765: LD_INT 43
23767: PUSH
23768: LD_INT 44
23770: PUSH
23771: LD_INT 46
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: LIST
23778: PPUSH
23779: EMPTY
23780: PPUSH
23781: EMPTY
23782: PPUSH
23783: LD_INT 1
23785: PPUSH
23786: CALL 14740 0 11
23790: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
23791: LD_EXP 33
23795: PUSH
23796: LD_INT 1
23798: EQUAL
23799: PUSH
23800: LD_EXP 39
23804: PUSH
23805: LD_INT 0
23807: EQUAL
23808: AND
23809: IFFALSE 23885
23811: GO 23813
23813: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23814: LD_INT 16
23816: PPUSH
23817: LD_INT 6
23819: PPUSH
23820: LD_INT 4
23822: PUSH
23823: LD_INT 6
23825: PUSH
23826: LD_INT 7
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: PUSH
23834: LD_OWVAR 67
23838: ARRAY
23839: PPUSH
23840: LD_EXP 25
23844: PPUSH
23845: LD_EXP 26
23849: PPUSH
23850: CALL_OW 12
23854: PPUSH
23855: LD_INT 3
23857: PPUSH
23858: LD_INT 1
23860: PPUSH
23861: LD_INT 3
23863: PPUSH
23864: LD_INT 44
23866: PUSH
23867: LD_INT 46
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PPUSH
23874: EMPTY
23875: PPUSH
23876: EMPTY
23877: PPUSH
23878: LD_INT 1
23880: PPUSH
23881: CALL 14740 0 11
23885: END
// every 1 1$00 trigger secondAttack = 1 do
23886: LD_EXP 34
23890: PUSH
23891: LD_INT 1
23893: EQUAL
23894: IFFALSE 23976
23896: GO 23898
23898: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23899: LD_INT 6
23901: PPUSH
23902: LD_INT 3
23904: PPUSH
23905: LD_INT 3
23907: PUSH
23908: LD_INT 4
23910: PUSH
23911: LD_INT 5
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: PUSH
23919: LD_OWVAR 67
23923: ARRAY
23924: PPUSH
23925: LD_INT 0
23927: PPUSH
23928: LD_INT 0
23930: PPUSH
23931: LD_INT 0
23933: PPUSH
23934: LD_INT 0
23936: PPUSH
23937: LD_EXP 25
23941: PPUSH
23942: LD_EXP 26
23946: PPUSH
23947: CALL_OW 12
23951: PPUSH
23952: LD_INT 16
23954: PPUSH
23955: LD_INT 7
23957: PPUSH
23958: LD_INT 1
23960: PPUSH
23961: LD_INT 1
23963: PPUSH
23964: LD_INT 3
23966: PPUSH
23967: CALL_OW 12
23971: PPUSH
23972: CALL 12447 0 12
23976: END
// every 1 1$00 trigger secondAttack = 1 do
23977: LD_EXP 34
23981: PUSH
23982: LD_INT 1
23984: EQUAL
23985: IFFALSE 24089
23987: GO 23989
23989: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23990: LD_INT 16
23992: PPUSH
23993: LD_INT 6
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: LD_INT 6
24001: PPUSH
24002: CALL_OW 12
24006: PUSH
24007: LD_INT 6
24009: PPUSH
24010: LD_INT 9
24012: PPUSH
24013: CALL_OW 12
24017: PUSH
24018: LD_INT 7
24020: PPUSH
24021: LD_INT 9
24023: PPUSH
24024: CALL_OW 12
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: PUSH
24034: LD_OWVAR 67
24038: ARRAY
24039: PPUSH
24040: LD_EXP 25
24044: PPUSH
24045: LD_EXP 26
24049: PPUSH
24050: CALL_OW 12
24054: PPUSH
24055: LD_INT 3
24057: PPUSH
24058: LD_INT 1
24060: PPUSH
24061: LD_INT 3
24063: PPUSH
24064: LD_INT 43
24066: PUSH
24067: LD_INT 44
24069: PUSH
24070: LD_INT 46
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: LIST
24077: PPUSH
24078: EMPTY
24079: PPUSH
24080: EMPTY
24081: PPUSH
24082: LD_INT 1
24084: PPUSH
24085: CALL 14740 0 11
24089: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24090: LD_EXP 18
24094: PUSH
24095: LD_INT 0
24097: EQUAL
24098: IFFALSE 24180
24100: GO 24102
24102: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24103: LD_INT 6
24105: PPUSH
24106: LD_INT 3
24108: PPUSH
24109: LD_INT 3
24111: PUSH
24112: LD_INT 4
24114: PUSH
24115: LD_INT 5
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: LIST
24122: PUSH
24123: LD_OWVAR 67
24127: ARRAY
24128: PPUSH
24129: LD_INT 0
24131: PPUSH
24132: LD_INT 0
24134: PPUSH
24135: LD_INT 0
24137: PPUSH
24138: LD_INT 0
24140: PPUSH
24141: LD_EXP 25
24145: PPUSH
24146: LD_EXP 26
24150: PPUSH
24151: CALL_OW 12
24155: PPUSH
24156: LD_INT 16
24158: PPUSH
24159: LD_INT 7
24161: PPUSH
24162: LD_INT 1
24164: PPUSH
24165: LD_INT 1
24167: PPUSH
24168: LD_INT 3
24170: PPUSH
24171: CALL_OW 12
24175: PPUSH
24176: CALL 12447 0 12
24180: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24181: LD_EXP 18
24185: PUSH
24186: LD_INT 0
24188: EQUAL
24189: IFFALSE 24289
24191: GO 24193
24193: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24194: LD_INT 16
24196: PPUSH
24197: LD_INT 6
24199: PPUSH
24200: LD_INT 5
24202: PPUSH
24203: LD_INT 6
24205: PPUSH
24206: CALL_OW 12
24210: PUSH
24211: LD_INT 6
24213: PPUSH
24214: LD_INT 9
24216: PPUSH
24217: CALL_OW 12
24221: PUSH
24222: LD_INT 7
24224: PPUSH
24225: LD_INT 9
24227: PPUSH
24228: CALL_OW 12
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: LIST
24237: PUSH
24238: LD_OWVAR 67
24242: ARRAY
24243: PPUSH
24244: LD_EXP 25
24248: PPUSH
24249: LD_EXP 26
24253: PPUSH
24254: CALL_OW 12
24258: PPUSH
24259: LD_INT 3
24261: PPUSH
24262: LD_INT 1
24264: PPUSH
24265: LD_INT 3
24267: PPUSH
24268: LD_INT 44
24270: PUSH
24271: LD_INT 46
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PPUSH
24278: EMPTY
24279: PPUSH
24280: EMPTY
24281: PPUSH
24282: LD_INT 1
24284: PPUSH
24285: CALL 14740 0 11
24289: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24290: LD_EXP 18
24294: PUSH
24295: LD_INT 0
24297: EQUAL
24298: IFFALSE 24380
24300: GO 24302
24302: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24303: LD_INT 6
24305: PPUSH
24306: LD_INT 3
24308: PPUSH
24309: LD_INT 3
24311: PUSH
24312: LD_INT 4
24314: PUSH
24315: LD_INT 5
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: PUSH
24323: LD_OWVAR 67
24327: ARRAY
24328: PPUSH
24329: LD_INT 0
24331: PPUSH
24332: LD_INT 0
24334: PPUSH
24335: LD_INT 0
24337: PPUSH
24338: LD_INT 0
24340: PPUSH
24341: LD_EXP 25
24345: PPUSH
24346: LD_EXP 26
24350: PPUSH
24351: CALL_OW 12
24355: PPUSH
24356: LD_INT 16
24358: PPUSH
24359: LD_INT 7
24361: PPUSH
24362: LD_INT 1
24364: PPUSH
24365: LD_INT 1
24367: PPUSH
24368: LD_INT 3
24370: PPUSH
24371: CALL_OW 12
24375: PPUSH
24376: CALL 12447 0 12
24380: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24381: LD_EXP 18
24385: PUSH
24386: LD_INT 0
24388: EQUAL
24389: IFFALSE 24489
24391: GO 24393
24393: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24394: LD_INT 16
24396: PPUSH
24397: LD_INT 6
24399: PPUSH
24400: LD_INT 5
24402: PPUSH
24403: LD_INT 6
24405: PPUSH
24406: CALL_OW 12
24410: PUSH
24411: LD_INT 6
24413: PPUSH
24414: LD_INT 9
24416: PPUSH
24417: CALL_OW 12
24421: PUSH
24422: LD_INT 7
24424: PPUSH
24425: LD_INT 9
24427: PPUSH
24428: CALL_OW 12
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: LIST
24437: PUSH
24438: LD_OWVAR 67
24442: ARRAY
24443: PPUSH
24444: LD_EXP 25
24448: PPUSH
24449: LD_EXP 26
24453: PPUSH
24454: CALL_OW 12
24458: PPUSH
24459: LD_INT 3
24461: PPUSH
24462: LD_INT 1
24464: PPUSH
24465: LD_INT 3
24467: PPUSH
24468: LD_INT 44
24470: PUSH
24471: LD_INT 46
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PPUSH
24478: EMPTY
24479: PPUSH
24480: EMPTY
24481: PPUSH
24482: LD_INT 1
24484: PPUSH
24485: CALL 14740 0 11
24489: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24490: LD_EXP 18
24494: PUSH
24495: LD_INT 0
24497: EQUAL
24498: IFFALSE 24580
24500: GO 24502
24502: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24503: LD_INT 6
24505: PPUSH
24506: LD_INT 3
24508: PPUSH
24509: LD_INT 3
24511: PUSH
24512: LD_INT 4
24514: PUSH
24515: LD_INT 5
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: PUSH
24523: LD_OWVAR 67
24527: ARRAY
24528: PPUSH
24529: LD_INT 0
24531: PPUSH
24532: LD_INT 0
24534: PPUSH
24535: LD_INT 0
24537: PPUSH
24538: LD_INT 0
24540: PPUSH
24541: LD_EXP 25
24545: PPUSH
24546: LD_EXP 26
24550: PPUSH
24551: CALL_OW 12
24555: PPUSH
24556: LD_INT 16
24558: PPUSH
24559: LD_INT 7
24561: PPUSH
24562: LD_INT 1
24564: PPUSH
24565: LD_INT 1
24567: PPUSH
24568: LD_INT 3
24570: PPUSH
24571: CALL_OW 12
24575: PPUSH
24576: CALL 12447 0 12
24580: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24581: LD_EXP 18
24585: PUSH
24586: LD_INT 0
24588: EQUAL
24589: IFFALSE 24665
24591: GO 24593
24593: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24594: LD_INT 16
24596: PPUSH
24597: LD_INT 6
24599: PPUSH
24600: LD_INT 7
24602: PUSH
24603: LD_INT 8
24605: PUSH
24606: LD_INT 9
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: LIST
24613: PUSH
24614: LD_OWVAR 67
24618: ARRAY
24619: PPUSH
24620: LD_EXP 25
24624: PPUSH
24625: LD_EXP 26
24629: PPUSH
24630: CALL_OW 12
24634: PPUSH
24635: LD_INT 3
24637: PPUSH
24638: LD_INT 1
24640: PPUSH
24641: LD_INT 3
24643: PPUSH
24644: LD_INT 44
24646: PUSH
24647: LD_INT 46
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PPUSH
24654: EMPTY
24655: PPUSH
24656: EMPTY
24657: PPUSH
24658: LD_INT 1
24660: PPUSH
24661: CALL 14740 0 11
24665: END
// every 0 0$1 trigger timerStatus = 1 do
24666: LD_EXP 35
24670: PUSH
24671: LD_INT 1
24673: EQUAL
24674: IFFALSE 24734
24676: GO 24678
24678: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24679: LD_INT 35
24681: PPUSH
24682: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24686: LD_ADDR_OWVAR 47
24690: PUSH
24691: LD_STRING #Am08-1
24693: PUSH
24694: LD_EXP 19
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24703: LD_ADDR_EXP 19
24707: PUSH
24708: LD_EXP 19
24712: PUSH
24713: LD_INT 35
24715: MINUS
24716: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24717: LD_EXP 19
24721: PUSH
24722: LD_INT 0
24724: EQUAL
24725: IFFALSE 24679
// display_strings := [ ] ;
24727: LD_ADDR_OWVAR 47
24731: PUSH
24732: EMPTY
24733: ST_TO_ADDR
// end ; end_of_file
24734: END
// every 1 1$0 do
24735: GO 24737
24737: DISABLE
// begin if supply <= 13 and supply > 7 then
24738: LD_EXP 40
24742: PUSH
24743: LD_INT 13
24745: LESSEQUAL
24746: PUSH
24747: LD_EXP 40
24751: PUSH
24752: LD_INT 7
24754: GREATER
24755: AND
24756: IFFALSE 24779
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
24758: LD_INT 3
24760: PPUSH
24761: LD_INT 5
24763: PPUSH
24764: CALL_OW 12
24768: PPUSH
24769: LD_INT 5
24771: PPUSH
24772: LD_INT 1
24774: PPUSH
24775: CALL_OW 55
// if supply <= 7 and supply > 4 then
24779: LD_EXP 40
24783: PUSH
24784: LD_INT 7
24786: LESSEQUAL
24787: PUSH
24788: LD_EXP 40
24792: PUSH
24793: LD_INT 4
24795: GREATER
24796: AND
24797: IFFALSE 24820
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
24799: LD_INT 3
24801: PPUSH
24802: LD_INT 5
24804: PPUSH
24805: CALL_OW 12
24809: PPUSH
24810: LD_INT 20
24812: PPUSH
24813: LD_INT 1
24815: PPUSH
24816: CALL_OW 55
// if supply <= 4 and supply > 0 then
24820: LD_EXP 40
24824: PUSH
24825: LD_INT 4
24827: LESSEQUAL
24828: PUSH
24829: LD_EXP 40
24833: PUSH
24834: LD_INT 0
24836: GREATER
24837: AND
24838: IFFALSE 24861
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
24840: LD_INT 3
24842: PPUSH
24843: LD_INT 5
24845: PPUSH
24846: CALL_OW 12
24850: PPUSH
24851: LD_INT 21
24853: PPUSH
24854: LD_INT 1
24856: PPUSH
24857: CALL_OW 55
// if supply > 0 then
24861: LD_EXP 40
24865: PUSH
24866: LD_INT 0
24868: GREATER
24869: IFFALSE 24886
// begin supply = supply - 1 ;
24871: LD_ADDR_EXP 40
24875: PUSH
24876: LD_EXP 40
24880: PUSH
24881: LD_INT 1
24883: MINUS
24884: ST_TO_ADDR
// enable ;
24885: ENABLE
// end ; end ; end_of_file
24886: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
24887: LD_EXP 39
24891: PUSH
24892: LD_INT 1
24894: EQUAL
24895: PUSH
24896: LD_EXP 1
24900: PPUSH
24901: CALL_OW 301
24905: AND
24906: IFFALSE 24918
24908: GO 24910
24910: DISABLE
// YouLost ( JMM ) ;
24911: LD_STRING JMM
24913: PPUSH
24914: CALL_OW 104
24918: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
24919: LD_EXP 18
24923: PUSH
24924: LD_INT 1
24926: EQUAL
24927: PUSH
24928: LD_EXP 16
24932: PPUSH
24933: CALL_OW 301
24937: AND
24938: IFFALSE 24970
24940: GO 24942
24942: DISABLE
// begin DialogueOn ;
24943: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
24947: LD_EXP 23
24951: PPUSH
24952: LD_STRING D8a-Pow-1
24954: PPUSH
24955: CALL_OW 94
// DialogueOff ;
24959: CALL_OW 7
// YouLost ( Dismissed ) ;
24963: LD_STRING Dismissed
24965: PPUSH
24966: CALL_OW 104
// end ;
24970: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
24971: LD_INT 22
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: LD_INT 30
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 30
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PPUSH
25013: CALL_OW 69
25017: PUSH
25018: LD_INT 0
25020: EQUAL
25021: IFFALSE 25033
25023: GO 25025
25025: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25026: LD_STRING Destroyed
25028: PPUSH
25029: CALL_OW 104
25033: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25034: LD_EXP 24
25038: PPUSH
25039: CALL_OW 301
25043: PUSH
25044: LD_INT 22
25046: PUSH
25047: LD_INT 3
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 21
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PPUSH
25068: CALL_OW 69
25072: PUSH
25073: LD_INT 7
25075: PUSH
25076: LD_INT 6
25078: PUSH
25079: LD_INT 5
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: PUSH
25087: LD_OWVAR 67
25091: ARRAY
25092: LESS
25093: AND
25094: PUSH
25095: LD_EXP 1
25099: PPUSH
25100: CALL_OW 305
25104: AND
25105: IFFALSE 25661
25107: GO 25109
25109: DISABLE
25110: LD_INT 0
25112: PPUSH
25113: PPUSH
25114: PPUSH
// begin russianAI = 0 ;
25115: LD_ADDR_EXP 27
25119: PUSH
25120: LD_INT 0
25122: ST_TO_ADDR
// escapeAvalaible = 1 ;
25123: LD_ADDR_EXP 36
25127: PUSH
25128: LD_INT 1
25130: ST_TO_ADDR
// Video ( true ) ;
25131: LD_INT 1
25133: PPUSH
25134: CALL 80083 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25138: LD_INT 3
25140: PPUSH
25141: LD_INT 1
25143: PPUSH
25144: LD_INT 1
25146: PPUSH
25147: LD_INT 0
25149: PPUSH
25150: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25154: LD_INT 6
25156: PPUSH
25157: LD_INT 1
25159: PPUSH
25160: LD_INT 1
25162: PPUSH
25163: LD_INT 0
25165: PPUSH
25166: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25170: LD_INT 3
25172: PPUSH
25173: LD_INT 1
25175: PPUSH
25176: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25180: LD_INT 97
25182: PPUSH
25183: LD_INT 91
25185: PPUSH
25186: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25190: LD_INT 22
25192: PUSH
25193: LD_INT 3
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 21
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PPUSH
25214: CALL_OW 69
25218: PPUSH
25219: CALL_OW 121
// wait ( 0 0$01 ) ;
25223: LD_INT 35
25225: PPUSH
25226: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25230: LD_INT 22
25232: PUSH
25233: LD_INT 3
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 21
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PPUSH
25254: CALL_OW 69
25258: PPUSH
25259: LD_INT 124
25261: PPUSH
25262: LD_INT 98
25264: PPUSH
25265: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25269: LD_INT 22
25271: PUSH
25272: LD_INT 6
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 21
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PPUSH
25293: CALL_OW 69
25297: PPUSH
25298: CALL_OW 121
// wait ( 0 0$01 ) ;
25302: LD_INT 35
25304: PPUSH
25305: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25309: LD_INT 22
25311: PUSH
25312: LD_INT 6
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 21
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PPUSH
25333: CALL_OW 69
25337: PPUSH
25338: LD_INT 124
25340: PPUSH
25341: LD_INT 98
25343: PPUSH
25344: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25348: LD_INT 22
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 21
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: LD_INT 54
25373: PUSH
25374: EMPTY
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: PPUSH
25386: CALL_OW 69
25390: PPUSH
25391: LD_INT 124
25393: PPUSH
25394: LD_INT 98
25396: PPUSH
25397: CALL_OW 114
// wait ( 0 0$4 ) ;
25401: LD_INT 140
25403: PPUSH
25404: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25408: LD_INT 124
25410: PPUSH
25411: LD_INT 98
25413: PPUSH
25414: CALL_OW 84
// if SikorskyStatus = 1 then
25418: LD_EXP 21
25422: PUSH
25423: LD_INT 1
25425: EQUAL
25426: IFFALSE 25440
// Say ( Sikorski , D9-Sik-1 ) ;
25428: LD_EXP 16
25432: PPUSH
25433: LD_STRING D9-Sik-1
25435: PPUSH
25436: CALL_OW 88
// if SikorskyStatus = 2 then
25440: LD_EXP 21
25444: PUSH
25445: LD_INT 2
25447: EQUAL
25448: IFFALSE 25469
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25450: LD_EXP 23
25454: PPUSH
25455: LD_STRING D8b-Pow-1
25457: PPUSH
25458: CALL_OW 94
// YouLost ( Dismissed ) ;
25462: LD_STRING Dismissed
25464: PPUSH
25465: CALL_OW 104
// end ; p := 0 0$0 ;
25469: LD_ADDR_VAR 0 3
25473: PUSH
25474: LD_INT 0
25476: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25477: LD_ADDR_VAR 0 2
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: LD_INT 22
25487: PUSH
25488: LD_INT 3
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 22
25497: PUSH
25498: LD_INT 6
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 21
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 69
25528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25529: LD_INT 35
25531: PPUSH
25532: CALL_OW 67
// p := p + 0 0$1 ;
25536: LD_ADDR_VAR 0 3
25540: PUSH
25541: LD_VAR 0 3
25545: PUSH
25546: LD_INT 35
25548: PLUS
25549: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25550: LD_VAR 0 2
25554: PPUSH
25555: LD_INT 22
25557: PPUSH
25558: CALL_OW 113
// for i in tmp do
25562: LD_ADDR_VAR 0 1
25566: PUSH
25567: LD_VAR 0 2
25571: PUSH
25572: FOR_IN
25573: IFFALSE 25600
// if IsInArea ( i , RussianEscape ) then
25575: LD_VAR 0 1
25579: PPUSH
25580: LD_INT 22
25582: PPUSH
25583: CALL_OW 308
25587: IFFALSE 25598
// RemoveUnit ( i ) ;
25589: LD_VAR 0 1
25593: PPUSH
25594: CALL_OW 64
25598: GO 25572
25600: POP
25601: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25602: LD_INT 23
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 21
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 24
25624: PUSH
25625: LD_INT 250
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: PPUSH
25637: CALL_OW 69
25641: PUSH
25642: LD_INT 0
25644: EQUAL
25645: PUSH
25646: LD_VAR 0 3
25650: PUSH
25651: LD_INT 245
25653: GREATEREQUAL
25654: OR
25655: IFFALSE 25529
// FinishMission ;
25657: CALL 25664 0 0
// end ;
25661: PPOPN 3
25663: END
// export function FinishMission ; var tmp ; begin
25664: LD_INT 0
25666: PPUSH
25667: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25668: LD_INT 22
25670: PUSH
25671: LD_INT 4
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PPUSH
25678: CALL_OW 69
25682: PUSH
25683: LD_INT 0
25685: EQUAL
25686: IFFALSE 25695
// SetAchievement ( ACH_BLITZKRIEG ) ;
25688: LD_STRING ACH_BLITZKRIEG
25690: PPUSH
25691: CALL_OW 543
// if tick <= 25 25$00 then
25695: LD_OWVAR 1
25699: PUSH
25700: LD_INT 52500
25702: LESSEQUAL
25703: IFFALSE 25719
// begin wait ( 3 ) ;
25705: LD_INT 3
25707: PPUSH
25708: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25712: LD_STRING ACH_ASPEED_8
25714: PPUSH
25715: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25719: LD_STRING med1
25721: PPUSH
25722: LD_INT 1
25724: PPUSH
25725: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
25729: LD_STRING med2
25731: PPUSH
25732: LD_INT 1
25734: PPUSH
25735: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
25739: LD_STRING perfect
25741: PPUSH
25742: LD_INT 1
25744: PPUSH
25745: CALL_OW 101
// if Difficulty = 3 then
25749: LD_OWVAR 67
25753: PUSH
25754: LD_INT 3
25756: EQUAL
25757: IFFALSE 25769
// SetAchievementEX ( ACH_AMER , 8 ) ;
25759: LD_STRING ACH_AMER
25761: PPUSH
25762: LD_INT 8
25764: PPUSH
25765: CALL_OW 564
// GiveMedals ( Main ) ;
25769: LD_STRING Main
25771: PPUSH
25772: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
25776: LD_INT 22
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 23
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 21
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: LD_INT 25
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 25
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 25
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 25
25841: PUSH
25842: LD_INT 4
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: PPUSH
25862: CALL_OW 69
25866: PPUSH
25867: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
25871: LD_EXP 1
25875: PPUSH
25876: LD_EXP 43
25880: PUSH
25881: LD_STRING JMM
25883: STR
25884: PPUSH
25885: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
25889: LD_EXP 2
25893: PPUSH
25894: LD_EXP 43
25898: PUSH
25899: LD_STRING Brown
25901: STR
25902: PPUSH
25903: CALL 8294 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
25907: LD_EXP 3
25911: PPUSH
25912: LD_EXP 43
25916: PUSH
25917: LD_STRING Donaldson
25919: STR
25920: PPUSH
25921: CALL 8294 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
25925: LD_EXP 4
25929: PPUSH
25930: LD_EXP 43
25934: PUSH
25935: LD_STRING Bobby
25937: STR
25938: PPUSH
25939: CALL 8294 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
25943: LD_EXP 5
25947: PPUSH
25948: LD_EXP 43
25952: PUSH
25953: LD_STRING Cyrus
25955: STR
25956: PPUSH
25957: CALL 8294 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
25961: LD_EXP 6
25965: PPUSH
25966: LD_EXP 43
25970: PUSH
25971: LD_STRING Lisa
25973: STR
25974: PPUSH
25975: CALL 8294 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
25979: LD_EXP 7
25983: PPUSH
25984: LD_EXP 43
25988: PUSH
25989: LD_STRING Frank
25991: STR
25992: PPUSH
25993: CALL 8294 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
25997: LD_EXP 8
26001: PPUSH
26002: LD_EXP 43
26006: PUSH
26007: LD_STRING Gladstone
26009: STR
26010: PPUSH
26011: CALL 8294 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26015: LD_EXP 9
26019: PPUSH
26020: LD_EXP 43
26024: PUSH
26025: LD_STRING Kikuchi
26027: STR
26028: PPUSH
26029: CALL 8294 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26033: LD_EXP 14
26037: PPUSH
26038: LD_EXP 43
26042: PUSH
26043: LD_STRING Denis
26045: STR
26046: PPUSH
26047: CALL 8294 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26051: LD_EXP 15
26055: PPUSH
26056: LD_EXP 43
26060: PUSH
26061: LD_STRING Joan
26063: STR
26064: PPUSH
26065: CALL 8294 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26069: LD_EXP 10
26073: PPUSH
26074: LD_EXP 43
26078: PUSH
26079: LD_STRING Khatam
26081: STR
26082: PPUSH
26083: CALL 8294 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26087: LD_EXP 13
26091: PPUSH
26092: LD_EXP 43
26096: PUSH
26097: LD_STRING Houten
26099: STR
26100: PPUSH
26101: CALL 8294 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26105: LD_INT 50
26107: PUSH
26108: EMPTY
26109: LIST
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 21
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: LD_INT 25
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 25
26146: PUSH
26147: LD_INT 2
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 25
26156: PUSH
26157: LD_INT 3
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 25
26166: PUSH
26167: LD_INT 4
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: PPUSH
26187: CALL_OW 69
26191: PUSH
26192: LD_EXP 1
26196: PUSH
26197: LD_EXP 2
26201: PUSH
26202: LD_EXP 3
26206: PUSH
26207: LD_EXP 4
26211: PUSH
26212: LD_EXP 5
26216: PUSH
26217: LD_EXP 6
26221: PUSH
26222: LD_EXP 7
26226: PUSH
26227: LD_EXP 8
26231: PUSH
26232: LD_EXP 9
26236: PUSH
26237: LD_EXP 14
26241: PUSH
26242: LD_EXP 15
26246: PUSH
26247: LD_EXP 13
26251: PUSH
26252: LD_EXP 10
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: DIFF
26272: PPUSH
26273: LD_STRING 08_other_survivors
26275: PPUSH
26276: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26280: LD_INT 23
26282: PPUSH
26283: CALL 26296 0 1
// YouWin ;
26287: CALL_OW 103
// end ;
26291: LD_VAR 0 1
26295: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26296: LD_INT 0
26298: PPUSH
26299: PPUSH
26300: PPUSH
26301: PPUSH
// gammaBase = [ ] ;
26302: LD_ADDR_VAR 0 4
26306: PUSH
26307: EMPTY
26308: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26309: LD_ADDR_VAR 0 5
26313: PUSH
26314: LD_VAR 0 1
26318: PPUSH
26319: LD_INT 22
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 21
26331: PUSH
26332: LD_INT 3
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 50
26341: PUSH
26342: EMPTY
26343: LIST
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: LIST
26349: PPUSH
26350: CALL_OW 70
26354: ST_TO_ADDR
// for i in buildings do
26355: LD_ADDR_VAR 0 3
26359: PUSH
26360: LD_VAR 0 5
26364: PUSH
26365: FOR_IN
26366: IFFALSE 26803
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26368: LD_VAR 0 3
26372: PPUSH
26373: CALL_OW 266
26377: PUSH
26378: LD_INT 6
26380: PUSH
26381: LD_INT 7
26383: PUSH
26384: LD_INT 8
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: IN
26392: IFFALSE 26506
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26394: LD_ADDR_VAR 0 4
26398: PUSH
26399: LD_VAR 0 4
26403: PUSH
26404: LD_VAR 0 3
26408: PPUSH
26409: CALL_OW 266
26413: PUSH
26414: LD_VAR 0 3
26418: PPUSH
26419: CALL_OW 250
26423: PUSH
26424: LD_VAR 0 3
26428: PPUSH
26429: CALL_OW 251
26433: PUSH
26434: LD_VAR 0 3
26438: PPUSH
26439: CALL_OW 254
26443: PUSH
26444: LD_VAR 0 3
26448: PPUSH
26449: CALL_OW 267
26453: PUSH
26454: LD_VAR 0 3
26458: PPUSH
26459: CALL_OW 248
26463: PUSH
26464: LD_VAR 0 3
26468: PPUSH
26469: LD_INT 1
26471: PPUSH
26472: CALL_OW 268
26476: PUSH
26477: LD_VAR 0 3
26481: PPUSH
26482: LD_INT 2
26484: PPUSH
26485: CALL_OW 268
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: ADD
26503: ST_TO_ADDR
26504: GO 26801
// if GetBType ( i ) = b_bunker then
26506: LD_VAR 0 3
26510: PPUSH
26511: CALL_OW 266
26515: PUSH
26516: LD_INT 32
26518: EQUAL
26519: IFFALSE 26616
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26521: LD_ADDR_VAR 0 4
26525: PUSH
26526: LD_VAR 0 4
26530: PUSH
26531: LD_VAR 0 3
26535: PPUSH
26536: CALL_OW 266
26540: PUSH
26541: LD_VAR 0 3
26545: PPUSH
26546: CALL_OW 250
26550: PUSH
26551: LD_VAR 0 3
26555: PPUSH
26556: CALL_OW 251
26560: PUSH
26561: LD_VAR 0 3
26565: PPUSH
26566: CALL_OW 254
26570: PUSH
26571: LD_VAR 0 3
26575: PPUSH
26576: CALL_OW 267
26580: PUSH
26581: LD_VAR 0 3
26585: PPUSH
26586: CALL_OW 248
26590: PUSH
26591: LD_VAR 0 3
26595: PPUSH
26596: CALL_OW 269
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: PUSH
26610: EMPTY
26611: LIST
26612: ADD
26613: ST_TO_ADDR
26614: GO 26801
// if GetBType ( i ) = b_factory then
26616: LD_VAR 0 3
26620: PPUSH
26621: CALL_OW 266
26625: PUSH
26626: LD_INT 3
26628: EQUAL
26629: IFFALSE 26719
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26631: LD_ADDR_VAR 0 4
26635: PUSH
26636: LD_VAR 0 4
26640: PPUSH
26641: LD_INT 1
26643: PPUSH
26644: LD_VAR 0 3
26648: PPUSH
26649: CALL_OW 266
26653: PUSH
26654: LD_VAR 0 3
26658: PPUSH
26659: CALL_OW 250
26663: PUSH
26664: LD_VAR 0 3
26668: PPUSH
26669: CALL_OW 251
26673: PUSH
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 254
26683: PUSH
26684: LD_VAR 0 3
26688: PPUSH
26689: CALL_OW 267
26693: PUSH
26694: LD_VAR 0 3
26698: PPUSH
26699: CALL_OW 248
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: PPUSH
26712: CALL_OW 2
26716: ST_TO_ADDR
26717: GO 26801
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26719: LD_ADDR_VAR 0 4
26723: PUSH
26724: LD_VAR 0 4
26728: PUSH
26729: LD_VAR 0 3
26733: PPUSH
26734: CALL_OW 266
26738: PUSH
26739: LD_VAR 0 3
26743: PPUSH
26744: CALL_OW 250
26748: PUSH
26749: LD_VAR 0 3
26753: PPUSH
26754: CALL_OW 251
26758: PUSH
26759: LD_VAR 0 3
26763: PPUSH
26764: CALL_OW 254
26768: PUSH
26769: LD_VAR 0 3
26773: PPUSH
26774: CALL_OW 267
26778: PUSH
26779: LD_VAR 0 3
26783: PPUSH
26784: CALL_OW 248
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: PUSH
26797: EMPTY
26798: LIST
26799: ADD
26800: ST_TO_ADDR
// end ;
26801: GO 26365
26803: POP
26804: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
26805: LD_VAR 0 4
26809: PPUSH
26810: LD_STRING 08_GammaBase
26812: PPUSH
26813: CALL_OW 39
// end ; end_of_file
26817: LD_VAR 0 2
26821: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
26822: LD_INT 0
26824: PPUSH
// ar_miner := 81 ;
26825: LD_ADDR_EXP 55
26829: PUSH
26830: LD_INT 81
26832: ST_TO_ADDR
// ar_crane := 88 ;
26833: LD_ADDR_EXP 54
26837: PUSH
26838: LD_INT 88
26840: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
26841: LD_ADDR_EXP 49
26845: PUSH
26846: LD_INT 89
26848: ST_TO_ADDR
// us_hack := 99 ;
26849: LD_ADDR_EXP 50
26853: PUSH
26854: LD_INT 99
26856: ST_TO_ADDR
// us_artillery := 97 ;
26857: LD_ADDR_EXP 51
26861: PUSH
26862: LD_INT 97
26864: ST_TO_ADDR
// ar_bio_bomb := 91 ;
26865: LD_ADDR_EXP 52
26869: PUSH
26870: LD_INT 91
26872: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
26873: LD_ADDR_EXP 53
26877: PUSH
26878: LD_INT 92
26880: ST_TO_ADDR
// ru_radar := 98 ;
26881: LD_ADDR_EXP 48
26885: PUSH
26886: LD_INT 98
26888: ST_TO_ADDR
// tech_Artillery := 80 ;
26889: LD_ADDR_EXP 56
26893: PUSH
26894: LD_INT 80
26896: ST_TO_ADDR
// tech_RadMat := 81 ;
26897: LD_ADDR_EXP 57
26901: PUSH
26902: LD_INT 81
26904: ST_TO_ADDR
// tech_BasicTools := 82 ;
26905: LD_ADDR_EXP 58
26909: PUSH
26910: LD_INT 82
26912: ST_TO_ADDR
// tech_Cargo := 83 ;
26913: LD_ADDR_EXP 59
26917: PUSH
26918: LD_INT 83
26920: ST_TO_ADDR
// tech_Track := 84 ;
26921: LD_ADDR_EXP 60
26925: PUSH
26926: LD_INT 84
26928: ST_TO_ADDR
// tech_Crane := 85 ;
26929: LD_ADDR_EXP 61
26933: PUSH
26934: LD_INT 85
26936: ST_TO_ADDR
// tech_Bulldozer := 86 ;
26937: LD_ADDR_EXP 62
26941: PUSH
26942: LD_INT 86
26944: ST_TO_ADDR
// tech_Hovercraft := 87 ;
26945: LD_ADDR_EXP 63
26949: PUSH
26950: LD_INT 87
26952: ST_TO_ADDR
// end ;
26953: LD_VAR 0 1
26957: RET
// every 1 do
26958: GO 26960
26960: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
26961: CALL 26822 0 0
26965: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
26966: LD_VAR 0 2
26970: PUSH
26971: LD_INT 100
26973: EQUAL
26974: IFFALSE 27923
// begin if not StreamModeActive then
26976: LD_EXP 64
26980: NOT
26981: IFFALSE 26991
// StreamModeActive := true ;
26983: LD_ADDR_EXP 64
26987: PUSH
26988: LD_INT 1
26990: ST_TO_ADDR
// if p3 = 0 then
26991: LD_VAR 0 3
26995: PUSH
26996: LD_INT 0
26998: EQUAL
26999: IFFALSE 27005
// InitStreamMode ;
27001: CALL 28081 0 0
// if p3 = 1 then
27005: LD_VAR 0 3
27009: PUSH
27010: LD_INT 1
27012: EQUAL
27013: IFFALSE 27023
// sRocket := true ;
27015: LD_ADDR_EXP 69
27019: PUSH
27020: LD_INT 1
27022: ST_TO_ADDR
// if p3 = 2 then
27023: LD_VAR 0 3
27027: PUSH
27028: LD_INT 2
27030: EQUAL
27031: IFFALSE 27041
// sSpeed := true ;
27033: LD_ADDR_EXP 68
27037: PUSH
27038: LD_INT 1
27040: ST_TO_ADDR
// if p3 = 3 then
27041: LD_VAR 0 3
27045: PUSH
27046: LD_INT 3
27048: EQUAL
27049: IFFALSE 27059
// sEngine := true ;
27051: LD_ADDR_EXP 70
27055: PUSH
27056: LD_INT 1
27058: ST_TO_ADDR
// if p3 = 4 then
27059: LD_VAR 0 3
27063: PUSH
27064: LD_INT 4
27066: EQUAL
27067: IFFALSE 27077
// sSpec := true ;
27069: LD_ADDR_EXP 67
27073: PUSH
27074: LD_INT 1
27076: ST_TO_ADDR
// if p3 = 5 then
27077: LD_VAR 0 3
27081: PUSH
27082: LD_INT 5
27084: EQUAL
27085: IFFALSE 27095
// sLevel := true ;
27087: LD_ADDR_EXP 71
27091: PUSH
27092: LD_INT 1
27094: ST_TO_ADDR
// if p3 = 6 then
27095: LD_VAR 0 3
27099: PUSH
27100: LD_INT 6
27102: EQUAL
27103: IFFALSE 27113
// sArmoury := true ;
27105: LD_ADDR_EXP 72
27109: PUSH
27110: LD_INT 1
27112: ST_TO_ADDR
// if p3 = 7 then
27113: LD_VAR 0 3
27117: PUSH
27118: LD_INT 7
27120: EQUAL
27121: IFFALSE 27131
// sRadar := true ;
27123: LD_ADDR_EXP 73
27127: PUSH
27128: LD_INT 1
27130: ST_TO_ADDR
// if p3 = 8 then
27131: LD_VAR 0 3
27135: PUSH
27136: LD_INT 8
27138: EQUAL
27139: IFFALSE 27149
// sBunker := true ;
27141: LD_ADDR_EXP 74
27145: PUSH
27146: LD_INT 1
27148: ST_TO_ADDR
// if p3 = 9 then
27149: LD_VAR 0 3
27153: PUSH
27154: LD_INT 9
27156: EQUAL
27157: IFFALSE 27167
// sHack := true ;
27159: LD_ADDR_EXP 75
27163: PUSH
27164: LD_INT 1
27166: ST_TO_ADDR
// if p3 = 10 then
27167: LD_VAR 0 3
27171: PUSH
27172: LD_INT 10
27174: EQUAL
27175: IFFALSE 27185
// sFire := true ;
27177: LD_ADDR_EXP 76
27181: PUSH
27182: LD_INT 1
27184: ST_TO_ADDR
// if p3 = 11 then
27185: LD_VAR 0 3
27189: PUSH
27190: LD_INT 11
27192: EQUAL
27193: IFFALSE 27203
// sRefresh := true ;
27195: LD_ADDR_EXP 77
27199: PUSH
27200: LD_INT 1
27202: ST_TO_ADDR
// if p3 = 12 then
27203: LD_VAR 0 3
27207: PUSH
27208: LD_INT 12
27210: EQUAL
27211: IFFALSE 27221
// sExp := true ;
27213: LD_ADDR_EXP 78
27217: PUSH
27218: LD_INT 1
27220: ST_TO_ADDR
// if p3 = 13 then
27221: LD_VAR 0 3
27225: PUSH
27226: LD_INT 13
27228: EQUAL
27229: IFFALSE 27239
// sDepot := true ;
27231: LD_ADDR_EXP 79
27235: PUSH
27236: LD_INT 1
27238: ST_TO_ADDR
// if p3 = 14 then
27239: LD_VAR 0 3
27243: PUSH
27244: LD_INT 14
27246: EQUAL
27247: IFFALSE 27257
// sFlag := true ;
27249: LD_ADDR_EXP 80
27253: PUSH
27254: LD_INT 1
27256: ST_TO_ADDR
// if p3 = 15 then
27257: LD_VAR 0 3
27261: PUSH
27262: LD_INT 15
27264: EQUAL
27265: IFFALSE 27275
// sKamikadze := true ;
27267: LD_ADDR_EXP 88
27271: PUSH
27272: LD_INT 1
27274: ST_TO_ADDR
// if p3 = 16 then
27275: LD_VAR 0 3
27279: PUSH
27280: LD_INT 16
27282: EQUAL
27283: IFFALSE 27293
// sTroll := true ;
27285: LD_ADDR_EXP 89
27289: PUSH
27290: LD_INT 1
27292: ST_TO_ADDR
// if p3 = 17 then
27293: LD_VAR 0 3
27297: PUSH
27298: LD_INT 17
27300: EQUAL
27301: IFFALSE 27311
// sSlow := true ;
27303: LD_ADDR_EXP 90
27307: PUSH
27308: LD_INT 1
27310: ST_TO_ADDR
// if p3 = 18 then
27311: LD_VAR 0 3
27315: PUSH
27316: LD_INT 18
27318: EQUAL
27319: IFFALSE 27329
// sLack := true ;
27321: LD_ADDR_EXP 91
27325: PUSH
27326: LD_INT 1
27328: ST_TO_ADDR
// if p3 = 19 then
27329: LD_VAR 0 3
27333: PUSH
27334: LD_INT 19
27336: EQUAL
27337: IFFALSE 27347
// sTank := true ;
27339: LD_ADDR_EXP 93
27343: PUSH
27344: LD_INT 1
27346: ST_TO_ADDR
// if p3 = 20 then
27347: LD_VAR 0 3
27351: PUSH
27352: LD_INT 20
27354: EQUAL
27355: IFFALSE 27365
// sRemote := true ;
27357: LD_ADDR_EXP 94
27361: PUSH
27362: LD_INT 1
27364: ST_TO_ADDR
// if p3 = 21 then
27365: LD_VAR 0 3
27369: PUSH
27370: LD_INT 21
27372: EQUAL
27373: IFFALSE 27383
// sPowell := true ;
27375: LD_ADDR_EXP 95
27379: PUSH
27380: LD_INT 1
27382: ST_TO_ADDR
// if p3 = 22 then
27383: LD_VAR 0 3
27387: PUSH
27388: LD_INT 22
27390: EQUAL
27391: IFFALSE 27401
// sTeleport := true ;
27393: LD_ADDR_EXP 98
27397: PUSH
27398: LD_INT 1
27400: ST_TO_ADDR
// if p3 = 23 then
27401: LD_VAR 0 3
27405: PUSH
27406: LD_INT 23
27408: EQUAL
27409: IFFALSE 27419
// sOilTower := true ;
27411: LD_ADDR_EXP 100
27415: PUSH
27416: LD_INT 1
27418: ST_TO_ADDR
// if p3 = 24 then
27419: LD_VAR 0 3
27423: PUSH
27424: LD_INT 24
27426: EQUAL
27427: IFFALSE 27437
// sShovel := true ;
27429: LD_ADDR_EXP 101
27433: PUSH
27434: LD_INT 1
27436: ST_TO_ADDR
// if p3 = 25 then
27437: LD_VAR 0 3
27441: PUSH
27442: LD_INT 25
27444: EQUAL
27445: IFFALSE 27455
// sSheik := true ;
27447: LD_ADDR_EXP 102
27451: PUSH
27452: LD_INT 1
27454: ST_TO_ADDR
// if p3 = 26 then
27455: LD_VAR 0 3
27459: PUSH
27460: LD_INT 26
27462: EQUAL
27463: IFFALSE 27473
// sEarthquake := true ;
27465: LD_ADDR_EXP 104
27469: PUSH
27470: LD_INT 1
27472: ST_TO_ADDR
// if p3 = 27 then
27473: LD_VAR 0 3
27477: PUSH
27478: LD_INT 27
27480: EQUAL
27481: IFFALSE 27491
// sAI := true ;
27483: LD_ADDR_EXP 105
27487: PUSH
27488: LD_INT 1
27490: ST_TO_ADDR
// if p3 = 28 then
27491: LD_VAR 0 3
27495: PUSH
27496: LD_INT 28
27498: EQUAL
27499: IFFALSE 27509
// sCargo := true ;
27501: LD_ADDR_EXP 108
27505: PUSH
27506: LD_INT 1
27508: ST_TO_ADDR
// if p3 = 29 then
27509: LD_VAR 0 3
27513: PUSH
27514: LD_INT 29
27516: EQUAL
27517: IFFALSE 27527
// sDLaser := true ;
27519: LD_ADDR_EXP 109
27523: PUSH
27524: LD_INT 1
27526: ST_TO_ADDR
// if p3 = 30 then
27527: LD_VAR 0 3
27531: PUSH
27532: LD_INT 30
27534: EQUAL
27535: IFFALSE 27545
// sExchange := true ;
27537: LD_ADDR_EXP 110
27541: PUSH
27542: LD_INT 1
27544: ST_TO_ADDR
// if p3 = 31 then
27545: LD_VAR 0 3
27549: PUSH
27550: LD_INT 31
27552: EQUAL
27553: IFFALSE 27563
// sFac := true ;
27555: LD_ADDR_EXP 111
27559: PUSH
27560: LD_INT 1
27562: ST_TO_ADDR
// if p3 = 32 then
27563: LD_VAR 0 3
27567: PUSH
27568: LD_INT 32
27570: EQUAL
27571: IFFALSE 27581
// sPower := true ;
27573: LD_ADDR_EXP 112
27577: PUSH
27578: LD_INT 1
27580: ST_TO_ADDR
// if p3 = 33 then
27581: LD_VAR 0 3
27585: PUSH
27586: LD_INT 33
27588: EQUAL
27589: IFFALSE 27599
// sRandom := true ;
27591: LD_ADDR_EXP 113
27595: PUSH
27596: LD_INT 1
27598: ST_TO_ADDR
// if p3 = 34 then
27599: LD_VAR 0 3
27603: PUSH
27604: LD_INT 34
27606: EQUAL
27607: IFFALSE 27617
// sShield := true ;
27609: LD_ADDR_EXP 114
27613: PUSH
27614: LD_INT 1
27616: ST_TO_ADDR
// if p3 = 35 then
27617: LD_VAR 0 3
27621: PUSH
27622: LD_INT 35
27624: EQUAL
27625: IFFALSE 27635
// sTime := true ;
27627: LD_ADDR_EXP 115
27631: PUSH
27632: LD_INT 1
27634: ST_TO_ADDR
// if p3 = 36 then
27635: LD_VAR 0 3
27639: PUSH
27640: LD_INT 36
27642: EQUAL
27643: IFFALSE 27653
// sTools := true ;
27645: LD_ADDR_EXP 116
27649: PUSH
27650: LD_INT 1
27652: ST_TO_ADDR
// if p3 = 101 then
27653: LD_VAR 0 3
27657: PUSH
27658: LD_INT 101
27660: EQUAL
27661: IFFALSE 27671
// sSold := true ;
27663: LD_ADDR_EXP 81
27667: PUSH
27668: LD_INT 1
27670: ST_TO_ADDR
// if p3 = 102 then
27671: LD_VAR 0 3
27675: PUSH
27676: LD_INT 102
27678: EQUAL
27679: IFFALSE 27689
// sDiff := true ;
27681: LD_ADDR_EXP 82
27685: PUSH
27686: LD_INT 1
27688: ST_TO_ADDR
// if p3 = 103 then
27689: LD_VAR 0 3
27693: PUSH
27694: LD_INT 103
27696: EQUAL
27697: IFFALSE 27707
// sFog := true ;
27699: LD_ADDR_EXP 85
27703: PUSH
27704: LD_INT 1
27706: ST_TO_ADDR
// if p3 = 104 then
27707: LD_VAR 0 3
27711: PUSH
27712: LD_INT 104
27714: EQUAL
27715: IFFALSE 27725
// sReset := true ;
27717: LD_ADDR_EXP 86
27721: PUSH
27722: LD_INT 1
27724: ST_TO_ADDR
// if p3 = 105 then
27725: LD_VAR 0 3
27729: PUSH
27730: LD_INT 105
27732: EQUAL
27733: IFFALSE 27743
// sSun := true ;
27735: LD_ADDR_EXP 87
27739: PUSH
27740: LD_INT 1
27742: ST_TO_ADDR
// if p3 = 106 then
27743: LD_VAR 0 3
27747: PUSH
27748: LD_INT 106
27750: EQUAL
27751: IFFALSE 27761
// sTiger := true ;
27753: LD_ADDR_EXP 83
27757: PUSH
27758: LD_INT 1
27760: ST_TO_ADDR
// if p3 = 107 then
27761: LD_VAR 0 3
27765: PUSH
27766: LD_INT 107
27768: EQUAL
27769: IFFALSE 27779
// sBomb := true ;
27771: LD_ADDR_EXP 84
27775: PUSH
27776: LD_INT 1
27778: ST_TO_ADDR
// if p3 = 108 then
27779: LD_VAR 0 3
27783: PUSH
27784: LD_INT 108
27786: EQUAL
27787: IFFALSE 27797
// sWound := true ;
27789: LD_ADDR_EXP 92
27793: PUSH
27794: LD_INT 1
27796: ST_TO_ADDR
// if p3 = 109 then
27797: LD_VAR 0 3
27801: PUSH
27802: LD_INT 109
27804: EQUAL
27805: IFFALSE 27815
// sBetray := true ;
27807: LD_ADDR_EXP 96
27811: PUSH
27812: LD_INT 1
27814: ST_TO_ADDR
// if p3 = 110 then
27815: LD_VAR 0 3
27819: PUSH
27820: LD_INT 110
27822: EQUAL
27823: IFFALSE 27833
// sContamin := true ;
27825: LD_ADDR_EXP 97
27829: PUSH
27830: LD_INT 1
27832: ST_TO_ADDR
// if p3 = 111 then
27833: LD_VAR 0 3
27837: PUSH
27838: LD_INT 111
27840: EQUAL
27841: IFFALSE 27851
// sOil := true ;
27843: LD_ADDR_EXP 99
27847: PUSH
27848: LD_INT 1
27850: ST_TO_ADDR
// if p3 = 112 then
27851: LD_VAR 0 3
27855: PUSH
27856: LD_INT 112
27858: EQUAL
27859: IFFALSE 27869
// sStu := true ;
27861: LD_ADDR_EXP 103
27865: PUSH
27866: LD_INT 1
27868: ST_TO_ADDR
// if p3 = 113 then
27869: LD_VAR 0 3
27873: PUSH
27874: LD_INT 113
27876: EQUAL
27877: IFFALSE 27887
// sBazooka := true ;
27879: LD_ADDR_EXP 106
27883: PUSH
27884: LD_INT 1
27886: ST_TO_ADDR
// if p3 = 114 then
27887: LD_VAR 0 3
27891: PUSH
27892: LD_INT 114
27894: EQUAL
27895: IFFALSE 27905
// sMortar := true ;
27897: LD_ADDR_EXP 107
27901: PUSH
27902: LD_INT 1
27904: ST_TO_ADDR
// if p3 = 115 then
27905: LD_VAR 0 3
27909: PUSH
27910: LD_INT 115
27912: EQUAL
27913: IFFALSE 27923
// sRanger := true ;
27915: LD_ADDR_EXP 117
27919: PUSH
27920: LD_INT 1
27922: ST_TO_ADDR
// end ; if p2 = 101 then
27923: LD_VAR 0 2
27927: PUSH
27928: LD_INT 101
27930: EQUAL
27931: IFFALSE 28059
// begin case p3 of 1 :
27933: LD_VAR 0 3
27937: PUSH
27938: LD_INT 1
27940: DOUBLE
27941: EQUAL
27942: IFTRUE 27946
27944: GO 27953
27946: POP
// hHackUnlimitedResources ; 2 :
27947: CALL 39094 0 0
27951: GO 28059
27953: LD_INT 2
27955: DOUBLE
27956: EQUAL
27957: IFTRUE 27961
27959: GO 27968
27961: POP
// hHackSetLevel10 ; 3 :
27962: CALL 39227 0 0
27966: GO 28059
27968: LD_INT 3
27970: DOUBLE
27971: EQUAL
27972: IFTRUE 27976
27974: GO 27983
27976: POP
// hHackSetLevel10YourUnits ; 4 :
27977: CALL 39312 0 0
27981: GO 28059
27983: LD_INT 4
27985: DOUBLE
27986: EQUAL
27987: IFTRUE 27991
27989: GO 27998
27991: POP
// hHackInvincible ; 5 :
27992: CALL 39760 0 0
27996: GO 28059
27998: LD_INT 5
28000: DOUBLE
28001: EQUAL
28002: IFTRUE 28006
28004: GO 28013
28006: POP
// hHackInvisible ; 6 :
28007: CALL 39871 0 0
28011: GO 28059
28013: LD_INT 6
28015: DOUBLE
28016: EQUAL
28017: IFTRUE 28021
28019: GO 28028
28021: POP
// hHackChangeYourSide ; 7 :
28022: CALL 39928 0 0
28026: GO 28059
28028: LD_INT 7
28030: DOUBLE
28031: EQUAL
28032: IFTRUE 28036
28034: GO 28043
28036: POP
// hHackChangeUnitSide ; 8 :
28037: CALL 39970 0 0
28041: GO 28059
28043: LD_INT 8
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28058
28051: POP
// hHackFog ; end ;
28052: CALL 40071 0 0
28056: GO 28059
28058: POP
// end ; end ;
28059: PPOPN 6
28061: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
28062: GO 28064
28064: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28065: LD_STRING initStreamRollete();
28067: PPUSH
28068: CALL_OW 559
// InitStreamMode ;
28072: CALL 28081 0 0
// DefineStreamItems ( ) ;
28076: CALL 28521 0 0
// end ;
28080: END
// function InitStreamMode ; begin
28081: LD_INT 0
28083: PPUSH
// streamModeActive := false ;
28084: LD_ADDR_EXP 64
28088: PUSH
28089: LD_INT 0
28091: ST_TO_ADDR
// normalCounter := 36 ;
28092: LD_ADDR_EXP 65
28096: PUSH
28097: LD_INT 36
28099: ST_TO_ADDR
// hardcoreCounter := 16 ;
28100: LD_ADDR_EXP 66
28104: PUSH
28105: LD_INT 16
28107: ST_TO_ADDR
// sRocket := false ;
28108: LD_ADDR_EXP 69
28112: PUSH
28113: LD_INT 0
28115: ST_TO_ADDR
// sSpeed := false ;
28116: LD_ADDR_EXP 68
28120: PUSH
28121: LD_INT 0
28123: ST_TO_ADDR
// sEngine := false ;
28124: LD_ADDR_EXP 70
28128: PUSH
28129: LD_INT 0
28131: ST_TO_ADDR
// sSpec := false ;
28132: LD_ADDR_EXP 67
28136: PUSH
28137: LD_INT 0
28139: ST_TO_ADDR
// sLevel := false ;
28140: LD_ADDR_EXP 71
28144: PUSH
28145: LD_INT 0
28147: ST_TO_ADDR
// sArmoury := false ;
28148: LD_ADDR_EXP 72
28152: PUSH
28153: LD_INT 0
28155: ST_TO_ADDR
// sRadar := false ;
28156: LD_ADDR_EXP 73
28160: PUSH
28161: LD_INT 0
28163: ST_TO_ADDR
// sBunker := false ;
28164: LD_ADDR_EXP 74
28168: PUSH
28169: LD_INT 0
28171: ST_TO_ADDR
// sHack := false ;
28172: LD_ADDR_EXP 75
28176: PUSH
28177: LD_INT 0
28179: ST_TO_ADDR
// sFire := false ;
28180: LD_ADDR_EXP 76
28184: PUSH
28185: LD_INT 0
28187: ST_TO_ADDR
// sRefresh := false ;
28188: LD_ADDR_EXP 77
28192: PUSH
28193: LD_INT 0
28195: ST_TO_ADDR
// sExp := false ;
28196: LD_ADDR_EXP 78
28200: PUSH
28201: LD_INT 0
28203: ST_TO_ADDR
// sDepot := false ;
28204: LD_ADDR_EXP 79
28208: PUSH
28209: LD_INT 0
28211: ST_TO_ADDR
// sFlag := false ;
28212: LD_ADDR_EXP 80
28216: PUSH
28217: LD_INT 0
28219: ST_TO_ADDR
// sKamikadze := false ;
28220: LD_ADDR_EXP 88
28224: PUSH
28225: LD_INT 0
28227: ST_TO_ADDR
// sTroll := false ;
28228: LD_ADDR_EXP 89
28232: PUSH
28233: LD_INT 0
28235: ST_TO_ADDR
// sSlow := false ;
28236: LD_ADDR_EXP 90
28240: PUSH
28241: LD_INT 0
28243: ST_TO_ADDR
// sLack := false ;
28244: LD_ADDR_EXP 91
28248: PUSH
28249: LD_INT 0
28251: ST_TO_ADDR
// sTank := false ;
28252: LD_ADDR_EXP 93
28256: PUSH
28257: LD_INT 0
28259: ST_TO_ADDR
// sRemote := false ;
28260: LD_ADDR_EXP 94
28264: PUSH
28265: LD_INT 0
28267: ST_TO_ADDR
// sPowell := false ;
28268: LD_ADDR_EXP 95
28272: PUSH
28273: LD_INT 0
28275: ST_TO_ADDR
// sTeleport := false ;
28276: LD_ADDR_EXP 98
28280: PUSH
28281: LD_INT 0
28283: ST_TO_ADDR
// sOilTower := false ;
28284: LD_ADDR_EXP 100
28288: PUSH
28289: LD_INT 0
28291: ST_TO_ADDR
// sShovel := false ;
28292: LD_ADDR_EXP 101
28296: PUSH
28297: LD_INT 0
28299: ST_TO_ADDR
// sSheik := false ;
28300: LD_ADDR_EXP 102
28304: PUSH
28305: LD_INT 0
28307: ST_TO_ADDR
// sEarthquake := false ;
28308: LD_ADDR_EXP 104
28312: PUSH
28313: LD_INT 0
28315: ST_TO_ADDR
// sAI := false ;
28316: LD_ADDR_EXP 105
28320: PUSH
28321: LD_INT 0
28323: ST_TO_ADDR
// sCargo := false ;
28324: LD_ADDR_EXP 108
28328: PUSH
28329: LD_INT 0
28331: ST_TO_ADDR
// sDLaser := false ;
28332: LD_ADDR_EXP 109
28336: PUSH
28337: LD_INT 0
28339: ST_TO_ADDR
// sExchange := false ;
28340: LD_ADDR_EXP 110
28344: PUSH
28345: LD_INT 0
28347: ST_TO_ADDR
// sFac := false ;
28348: LD_ADDR_EXP 111
28352: PUSH
28353: LD_INT 0
28355: ST_TO_ADDR
// sPower := false ;
28356: LD_ADDR_EXP 112
28360: PUSH
28361: LD_INT 0
28363: ST_TO_ADDR
// sRandom := false ;
28364: LD_ADDR_EXP 113
28368: PUSH
28369: LD_INT 0
28371: ST_TO_ADDR
// sShield := false ;
28372: LD_ADDR_EXP 114
28376: PUSH
28377: LD_INT 0
28379: ST_TO_ADDR
// sTime := false ;
28380: LD_ADDR_EXP 115
28384: PUSH
28385: LD_INT 0
28387: ST_TO_ADDR
// sTools := false ;
28388: LD_ADDR_EXP 116
28392: PUSH
28393: LD_INT 0
28395: ST_TO_ADDR
// sSold := false ;
28396: LD_ADDR_EXP 81
28400: PUSH
28401: LD_INT 0
28403: ST_TO_ADDR
// sDiff := false ;
28404: LD_ADDR_EXP 82
28408: PUSH
28409: LD_INT 0
28411: ST_TO_ADDR
// sFog := false ;
28412: LD_ADDR_EXP 85
28416: PUSH
28417: LD_INT 0
28419: ST_TO_ADDR
// sReset := false ;
28420: LD_ADDR_EXP 86
28424: PUSH
28425: LD_INT 0
28427: ST_TO_ADDR
// sSun := false ;
28428: LD_ADDR_EXP 87
28432: PUSH
28433: LD_INT 0
28435: ST_TO_ADDR
// sTiger := false ;
28436: LD_ADDR_EXP 83
28440: PUSH
28441: LD_INT 0
28443: ST_TO_ADDR
// sBomb := false ;
28444: LD_ADDR_EXP 84
28448: PUSH
28449: LD_INT 0
28451: ST_TO_ADDR
// sWound := false ;
28452: LD_ADDR_EXP 92
28456: PUSH
28457: LD_INT 0
28459: ST_TO_ADDR
// sBetray := false ;
28460: LD_ADDR_EXP 96
28464: PUSH
28465: LD_INT 0
28467: ST_TO_ADDR
// sContamin := false ;
28468: LD_ADDR_EXP 97
28472: PUSH
28473: LD_INT 0
28475: ST_TO_ADDR
// sOil := false ;
28476: LD_ADDR_EXP 99
28480: PUSH
28481: LD_INT 0
28483: ST_TO_ADDR
// sStu := false ;
28484: LD_ADDR_EXP 103
28488: PUSH
28489: LD_INT 0
28491: ST_TO_ADDR
// sBazooka := false ;
28492: LD_ADDR_EXP 106
28496: PUSH
28497: LD_INT 0
28499: ST_TO_ADDR
// sMortar := false ;
28500: LD_ADDR_EXP 107
28504: PUSH
28505: LD_INT 0
28507: ST_TO_ADDR
// sRanger := false ;
28508: LD_ADDR_EXP 117
28512: PUSH
28513: LD_INT 0
28515: ST_TO_ADDR
// end ;
28516: LD_VAR 0 1
28520: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
28521: LD_INT 0
28523: PPUSH
28524: PPUSH
28525: PPUSH
28526: PPUSH
28527: PPUSH
// result := [ ] ;
28528: LD_ADDR_VAR 0 1
28532: PUSH
28533: EMPTY
28534: ST_TO_ADDR
// if campaign_id = 1 then
28535: LD_OWVAR 69
28539: PUSH
28540: LD_INT 1
28542: EQUAL
28543: IFFALSE 31481
// begin case mission_number of 1 :
28545: LD_OWVAR 70
28549: PUSH
28550: LD_INT 1
28552: DOUBLE
28553: EQUAL
28554: IFTRUE 28558
28556: GO 28622
28558: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
28559: LD_ADDR_VAR 0 1
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: LD_INT 4
28569: PUSH
28570: LD_INT 11
28572: PUSH
28573: LD_INT 12
28575: PUSH
28576: LD_INT 15
28578: PUSH
28579: LD_INT 16
28581: PUSH
28582: LD_INT 22
28584: PUSH
28585: LD_INT 23
28587: PUSH
28588: LD_INT 26
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 101
28604: PUSH
28605: LD_INT 102
28607: PUSH
28608: LD_INT 106
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: ST_TO_ADDR
28620: GO 31479
28622: LD_INT 2
28624: DOUBLE
28625: EQUAL
28626: IFTRUE 28630
28628: GO 28702
28630: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
28631: LD_ADDR_VAR 0 1
28635: PUSH
28636: LD_INT 2
28638: PUSH
28639: LD_INT 4
28641: PUSH
28642: LD_INT 11
28644: PUSH
28645: LD_INT 12
28647: PUSH
28648: LD_INT 15
28650: PUSH
28651: LD_INT 16
28653: PUSH
28654: LD_INT 22
28656: PUSH
28657: LD_INT 23
28659: PUSH
28660: LD_INT 26
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 101
28676: PUSH
28677: LD_INT 102
28679: PUSH
28680: LD_INT 105
28682: PUSH
28683: LD_INT 106
28685: PUSH
28686: LD_INT 108
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: ST_TO_ADDR
28700: GO 31479
28702: LD_INT 3
28704: DOUBLE
28705: EQUAL
28706: IFTRUE 28710
28708: GO 28786
28710: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
28711: LD_ADDR_VAR 0 1
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: LD_INT 4
28721: PUSH
28722: LD_INT 5
28724: PUSH
28725: LD_INT 11
28727: PUSH
28728: LD_INT 12
28730: PUSH
28731: LD_INT 15
28733: PUSH
28734: LD_INT 16
28736: PUSH
28737: LD_INT 22
28739: PUSH
28740: LD_INT 26
28742: PUSH
28743: LD_INT 36
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 101
28760: PUSH
28761: LD_INT 102
28763: PUSH
28764: LD_INT 105
28766: PUSH
28767: LD_INT 106
28769: PUSH
28770: LD_INT 108
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: ST_TO_ADDR
28784: GO 31479
28786: LD_INT 4
28788: DOUBLE
28789: EQUAL
28790: IFTRUE 28794
28792: GO 28878
28794: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
28795: LD_ADDR_VAR 0 1
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: LD_INT 4
28805: PUSH
28806: LD_INT 5
28808: PUSH
28809: LD_INT 8
28811: PUSH
28812: LD_INT 11
28814: PUSH
28815: LD_INT 12
28817: PUSH
28818: LD_INT 15
28820: PUSH
28821: LD_INT 16
28823: PUSH
28824: LD_INT 22
28826: PUSH
28827: LD_INT 23
28829: PUSH
28830: LD_INT 26
28832: PUSH
28833: LD_INT 36
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 101
28852: PUSH
28853: LD_INT 102
28855: PUSH
28856: LD_INT 105
28858: PUSH
28859: LD_INT 106
28861: PUSH
28862: LD_INT 108
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: ST_TO_ADDR
28876: GO 31479
28878: LD_INT 5
28880: DOUBLE
28881: EQUAL
28882: IFTRUE 28886
28884: GO 28986
28886: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
28887: LD_ADDR_VAR 0 1
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: LD_INT 4
28897: PUSH
28898: LD_INT 5
28900: PUSH
28901: LD_INT 6
28903: PUSH
28904: LD_INT 8
28906: PUSH
28907: LD_INT 11
28909: PUSH
28910: LD_INT 12
28912: PUSH
28913: LD_INT 15
28915: PUSH
28916: LD_INT 16
28918: PUSH
28919: LD_INT 22
28921: PUSH
28922: LD_INT 23
28924: PUSH
28925: LD_INT 25
28927: PUSH
28928: LD_INT 26
28930: PUSH
28931: LD_INT 36
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 101
28952: PUSH
28953: LD_INT 102
28955: PUSH
28956: LD_INT 105
28958: PUSH
28959: LD_INT 106
28961: PUSH
28962: LD_INT 108
28964: PUSH
28965: LD_INT 109
28967: PUSH
28968: LD_INT 112
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: ST_TO_ADDR
28984: GO 31479
28986: LD_INT 6
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 28994
28992: GO 29114
28994: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
28995: LD_ADDR_VAR 0 1
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: LD_INT 4
29005: PUSH
29006: LD_INT 5
29008: PUSH
29009: LD_INT 6
29011: PUSH
29012: LD_INT 8
29014: PUSH
29015: LD_INT 11
29017: PUSH
29018: LD_INT 12
29020: PUSH
29021: LD_INT 15
29023: PUSH
29024: LD_INT 16
29026: PUSH
29027: LD_INT 20
29029: PUSH
29030: LD_INT 21
29032: PUSH
29033: LD_INT 22
29035: PUSH
29036: LD_INT 23
29038: PUSH
29039: LD_INT 25
29041: PUSH
29042: LD_INT 26
29044: PUSH
29045: LD_INT 30
29047: PUSH
29048: LD_INT 31
29050: PUSH
29051: LD_INT 32
29053: PUSH
29054: LD_INT 36
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 101
29080: PUSH
29081: LD_INT 102
29083: PUSH
29084: LD_INT 105
29086: PUSH
29087: LD_INT 106
29089: PUSH
29090: LD_INT 108
29092: PUSH
29093: LD_INT 109
29095: PUSH
29096: LD_INT 112
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: ST_TO_ADDR
29112: GO 31479
29114: LD_INT 7
29116: DOUBLE
29117: EQUAL
29118: IFTRUE 29122
29120: GO 29222
29122: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
29123: LD_ADDR_VAR 0 1
29127: PUSH
29128: LD_INT 2
29130: PUSH
29131: LD_INT 4
29133: PUSH
29134: LD_INT 5
29136: PUSH
29137: LD_INT 7
29139: PUSH
29140: LD_INT 11
29142: PUSH
29143: LD_INT 12
29145: PUSH
29146: LD_INT 15
29148: PUSH
29149: LD_INT 16
29151: PUSH
29152: LD_INT 20
29154: PUSH
29155: LD_INT 21
29157: PUSH
29158: LD_INT 22
29160: PUSH
29161: LD_INT 23
29163: PUSH
29164: LD_INT 25
29166: PUSH
29167: LD_INT 26
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 101
29188: PUSH
29189: LD_INT 102
29191: PUSH
29192: LD_INT 103
29194: PUSH
29195: LD_INT 105
29197: PUSH
29198: LD_INT 106
29200: PUSH
29201: LD_INT 108
29203: PUSH
29204: LD_INT 112
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: ST_TO_ADDR
29220: GO 31479
29222: LD_INT 8
29224: DOUBLE
29225: EQUAL
29226: IFTRUE 29230
29228: GO 29358
29230: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
29231: LD_ADDR_VAR 0 1
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: LD_INT 4
29241: PUSH
29242: LD_INT 5
29244: PUSH
29245: LD_INT 6
29247: PUSH
29248: LD_INT 7
29250: PUSH
29251: LD_INT 8
29253: PUSH
29254: LD_INT 11
29256: PUSH
29257: LD_INT 12
29259: PUSH
29260: LD_INT 15
29262: PUSH
29263: LD_INT 16
29265: PUSH
29266: LD_INT 20
29268: PUSH
29269: LD_INT 21
29271: PUSH
29272: LD_INT 22
29274: PUSH
29275: LD_INT 23
29277: PUSH
29278: LD_INT 25
29280: PUSH
29281: LD_INT 26
29283: PUSH
29284: LD_INT 30
29286: PUSH
29287: LD_INT 31
29289: PUSH
29290: LD_INT 32
29292: PUSH
29293: LD_INT 36
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 101
29320: PUSH
29321: LD_INT 102
29323: PUSH
29324: LD_INT 103
29326: PUSH
29327: LD_INT 105
29329: PUSH
29330: LD_INT 106
29332: PUSH
29333: LD_INT 108
29335: PUSH
29336: LD_INT 109
29338: PUSH
29339: LD_INT 112
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: ST_TO_ADDR
29356: GO 31479
29358: LD_INT 9
29360: DOUBLE
29361: EQUAL
29362: IFTRUE 29366
29364: GO 29502
29366: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
29367: LD_ADDR_VAR 0 1
29371: PUSH
29372: LD_INT 2
29374: PUSH
29375: LD_INT 4
29377: PUSH
29378: LD_INT 5
29380: PUSH
29381: LD_INT 6
29383: PUSH
29384: LD_INT 7
29386: PUSH
29387: LD_INT 8
29389: PUSH
29390: LD_INT 11
29392: PUSH
29393: LD_INT 12
29395: PUSH
29396: LD_INT 15
29398: PUSH
29399: LD_INT 16
29401: PUSH
29402: LD_INT 20
29404: PUSH
29405: LD_INT 21
29407: PUSH
29408: LD_INT 22
29410: PUSH
29411: LD_INT 23
29413: PUSH
29414: LD_INT 25
29416: PUSH
29417: LD_INT 26
29419: PUSH
29420: LD_INT 28
29422: PUSH
29423: LD_INT 30
29425: PUSH
29426: LD_INT 31
29428: PUSH
29429: LD_INT 32
29431: PUSH
29432: LD_INT 36
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 101
29460: PUSH
29461: LD_INT 102
29463: PUSH
29464: LD_INT 103
29466: PUSH
29467: LD_INT 105
29469: PUSH
29470: LD_INT 106
29472: PUSH
29473: LD_INT 108
29475: PUSH
29476: LD_INT 109
29478: PUSH
29479: LD_INT 112
29481: PUSH
29482: LD_INT 114
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: ST_TO_ADDR
29500: GO 31479
29502: LD_INT 10
29504: DOUBLE
29505: EQUAL
29506: IFTRUE 29510
29508: GO 29694
29510: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
29511: LD_ADDR_VAR 0 1
29515: PUSH
29516: LD_INT 2
29518: PUSH
29519: LD_INT 4
29521: PUSH
29522: LD_INT 5
29524: PUSH
29525: LD_INT 6
29527: PUSH
29528: LD_INT 7
29530: PUSH
29531: LD_INT 8
29533: PUSH
29534: LD_INT 9
29536: PUSH
29537: LD_INT 10
29539: PUSH
29540: LD_INT 11
29542: PUSH
29543: LD_INT 12
29545: PUSH
29546: LD_INT 13
29548: PUSH
29549: LD_INT 14
29551: PUSH
29552: LD_INT 15
29554: PUSH
29555: LD_INT 16
29557: PUSH
29558: LD_INT 17
29560: PUSH
29561: LD_INT 18
29563: PUSH
29564: LD_INT 19
29566: PUSH
29567: LD_INT 20
29569: PUSH
29570: LD_INT 21
29572: PUSH
29573: LD_INT 22
29575: PUSH
29576: LD_INT 23
29578: PUSH
29579: LD_INT 24
29581: PUSH
29582: LD_INT 25
29584: PUSH
29585: LD_INT 26
29587: PUSH
29588: LD_INT 28
29590: PUSH
29591: LD_INT 30
29593: PUSH
29594: LD_INT 31
29596: PUSH
29597: LD_INT 32
29599: PUSH
29600: LD_INT 36
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 101
29636: PUSH
29637: LD_INT 102
29639: PUSH
29640: LD_INT 103
29642: PUSH
29643: LD_INT 104
29645: PUSH
29646: LD_INT 105
29648: PUSH
29649: LD_INT 106
29651: PUSH
29652: LD_INT 107
29654: PUSH
29655: LD_INT 108
29657: PUSH
29658: LD_INT 109
29660: PUSH
29661: LD_INT 110
29663: PUSH
29664: LD_INT 111
29666: PUSH
29667: LD_INT 112
29669: PUSH
29670: LD_INT 114
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: ST_TO_ADDR
29692: GO 31479
29694: LD_INT 11
29696: DOUBLE
29697: EQUAL
29698: IFTRUE 29702
29700: GO 29894
29702: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
29703: LD_ADDR_VAR 0 1
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: LD_INT 4
29716: PUSH
29717: LD_INT 5
29719: PUSH
29720: LD_INT 6
29722: PUSH
29723: LD_INT 7
29725: PUSH
29726: LD_INT 8
29728: PUSH
29729: LD_INT 9
29731: PUSH
29732: LD_INT 10
29734: PUSH
29735: LD_INT 11
29737: PUSH
29738: LD_INT 12
29740: PUSH
29741: LD_INT 13
29743: PUSH
29744: LD_INT 14
29746: PUSH
29747: LD_INT 15
29749: PUSH
29750: LD_INT 16
29752: PUSH
29753: LD_INT 17
29755: PUSH
29756: LD_INT 18
29758: PUSH
29759: LD_INT 19
29761: PUSH
29762: LD_INT 20
29764: PUSH
29765: LD_INT 21
29767: PUSH
29768: LD_INT 22
29770: PUSH
29771: LD_INT 23
29773: PUSH
29774: LD_INT 24
29776: PUSH
29777: LD_INT 25
29779: PUSH
29780: LD_INT 26
29782: PUSH
29783: LD_INT 28
29785: PUSH
29786: LD_INT 30
29788: PUSH
29789: LD_INT 31
29791: PUSH
29792: LD_INT 32
29794: PUSH
29795: LD_INT 34
29797: PUSH
29798: LD_INT 36
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 101
29836: PUSH
29837: LD_INT 102
29839: PUSH
29840: LD_INT 103
29842: PUSH
29843: LD_INT 104
29845: PUSH
29846: LD_INT 105
29848: PUSH
29849: LD_INT 106
29851: PUSH
29852: LD_INT 107
29854: PUSH
29855: LD_INT 108
29857: PUSH
29858: LD_INT 109
29860: PUSH
29861: LD_INT 110
29863: PUSH
29864: LD_INT 111
29866: PUSH
29867: LD_INT 112
29869: PUSH
29870: LD_INT 114
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: ST_TO_ADDR
29892: GO 31479
29894: LD_INT 12
29896: DOUBLE
29897: EQUAL
29898: IFTRUE 29902
29900: GO 30110
29902: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
29903: LD_ADDR_VAR 0 1
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: LD_INT 3
29916: PUSH
29917: LD_INT 4
29919: PUSH
29920: LD_INT 5
29922: PUSH
29923: LD_INT 6
29925: PUSH
29926: LD_INT 7
29928: PUSH
29929: LD_INT 8
29931: PUSH
29932: LD_INT 9
29934: PUSH
29935: LD_INT 10
29937: PUSH
29938: LD_INT 11
29940: PUSH
29941: LD_INT 12
29943: PUSH
29944: LD_INT 13
29946: PUSH
29947: LD_INT 14
29949: PUSH
29950: LD_INT 15
29952: PUSH
29953: LD_INT 16
29955: PUSH
29956: LD_INT 17
29958: PUSH
29959: LD_INT 18
29961: PUSH
29962: LD_INT 19
29964: PUSH
29965: LD_INT 20
29967: PUSH
29968: LD_INT 21
29970: PUSH
29971: LD_INT 22
29973: PUSH
29974: LD_INT 23
29976: PUSH
29977: LD_INT 24
29979: PUSH
29980: LD_INT 25
29982: PUSH
29983: LD_INT 26
29985: PUSH
29986: LD_INT 27
29988: PUSH
29989: LD_INT 28
29991: PUSH
29992: LD_INT 30
29994: PUSH
29995: LD_INT 31
29997: PUSH
29998: LD_INT 32
30000: PUSH
30001: LD_INT 33
30003: PUSH
30004: LD_INT 34
30006: PUSH
30007: LD_INT 36
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 101
30048: PUSH
30049: LD_INT 102
30051: PUSH
30052: LD_INT 103
30054: PUSH
30055: LD_INT 104
30057: PUSH
30058: LD_INT 105
30060: PUSH
30061: LD_INT 106
30063: PUSH
30064: LD_INT 107
30066: PUSH
30067: LD_INT 108
30069: PUSH
30070: LD_INT 109
30072: PUSH
30073: LD_INT 110
30075: PUSH
30076: LD_INT 111
30078: PUSH
30079: LD_INT 112
30081: PUSH
30082: LD_INT 113
30084: PUSH
30085: LD_INT 114
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: ST_TO_ADDR
30108: GO 31479
30110: LD_INT 13
30112: DOUBLE
30113: EQUAL
30114: IFTRUE 30118
30116: GO 30314
30118: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
30119: LD_ADDR_VAR 0 1
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 3
30132: PUSH
30133: LD_INT 4
30135: PUSH
30136: LD_INT 5
30138: PUSH
30139: LD_INT 8
30141: PUSH
30142: LD_INT 9
30144: PUSH
30145: LD_INT 10
30147: PUSH
30148: LD_INT 11
30150: PUSH
30151: LD_INT 12
30153: PUSH
30154: LD_INT 14
30156: PUSH
30157: LD_INT 15
30159: PUSH
30160: LD_INT 16
30162: PUSH
30163: LD_INT 17
30165: PUSH
30166: LD_INT 18
30168: PUSH
30169: LD_INT 19
30171: PUSH
30172: LD_INT 20
30174: PUSH
30175: LD_INT 21
30177: PUSH
30178: LD_INT 22
30180: PUSH
30181: LD_INT 23
30183: PUSH
30184: LD_INT 24
30186: PUSH
30187: LD_INT 25
30189: PUSH
30190: LD_INT 26
30192: PUSH
30193: LD_INT 27
30195: PUSH
30196: LD_INT 28
30198: PUSH
30199: LD_INT 30
30201: PUSH
30202: LD_INT 31
30204: PUSH
30205: LD_INT 32
30207: PUSH
30208: LD_INT 33
30210: PUSH
30211: LD_INT 34
30213: PUSH
30214: LD_INT 36
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 101
30252: PUSH
30253: LD_INT 102
30255: PUSH
30256: LD_INT 103
30258: PUSH
30259: LD_INT 104
30261: PUSH
30262: LD_INT 105
30264: PUSH
30265: LD_INT 106
30267: PUSH
30268: LD_INT 107
30270: PUSH
30271: LD_INT 108
30273: PUSH
30274: LD_INT 109
30276: PUSH
30277: LD_INT 110
30279: PUSH
30280: LD_INT 111
30282: PUSH
30283: LD_INT 112
30285: PUSH
30286: LD_INT 113
30288: PUSH
30289: LD_INT 114
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: ST_TO_ADDR
30312: GO 31479
30314: LD_INT 14
30316: DOUBLE
30317: EQUAL
30318: IFTRUE 30322
30320: GO 30534
30322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
30323: LD_ADDR_VAR 0 1
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: LD_INT 3
30336: PUSH
30337: LD_INT 4
30339: PUSH
30340: LD_INT 5
30342: PUSH
30343: LD_INT 6
30345: PUSH
30346: LD_INT 7
30348: PUSH
30349: LD_INT 8
30351: PUSH
30352: LD_INT 9
30354: PUSH
30355: LD_INT 10
30357: PUSH
30358: LD_INT 11
30360: PUSH
30361: LD_INT 12
30363: PUSH
30364: LD_INT 13
30366: PUSH
30367: LD_INT 14
30369: PUSH
30370: LD_INT 15
30372: PUSH
30373: LD_INT 16
30375: PUSH
30376: LD_INT 17
30378: PUSH
30379: LD_INT 18
30381: PUSH
30382: LD_INT 19
30384: PUSH
30385: LD_INT 20
30387: PUSH
30388: LD_INT 21
30390: PUSH
30391: LD_INT 22
30393: PUSH
30394: LD_INT 23
30396: PUSH
30397: LD_INT 24
30399: PUSH
30400: LD_INT 25
30402: PUSH
30403: LD_INT 26
30405: PUSH
30406: LD_INT 27
30408: PUSH
30409: LD_INT 28
30411: PUSH
30412: LD_INT 29
30414: PUSH
30415: LD_INT 30
30417: PUSH
30418: LD_INT 31
30420: PUSH
30421: LD_INT 32
30423: PUSH
30424: LD_INT 33
30426: PUSH
30427: LD_INT 34
30429: PUSH
30430: LD_INT 36
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 101
30472: PUSH
30473: LD_INT 102
30475: PUSH
30476: LD_INT 103
30478: PUSH
30479: LD_INT 104
30481: PUSH
30482: LD_INT 105
30484: PUSH
30485: LD_INT 106
30487: PUSH
30488: LD_INT 107
30490: PUSH
30491: LD_INT 108
30493: PUSH
30494: LD_INT 109
30496: PUSH
30497: LD_INT 110
30499: PUSH
30500: LD_INT 111
30502: PUSH
30503: LD_INT 112
30505: PUSH
30506: LD_INT 113
30508: PUSH
30509: LD_INT 114
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: ST_TO_ADDR
30532: GO 31479
30534: LD_INT 15
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30754
30542: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
30543: LD_ADDR_VAR 0 1
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 2
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: LD_INT 4
30559: PUSH
30560: LD_INT 5
30562: PUSH
30563: LD_INT 6
30565: PUSH
30566: LD_INT 7
30568: PUSH
30569: LD_INT 8
30571: PUSH
30572: LD_INT 9
30574: PUSH
30575: LD_INT 10
30577: PUSH
30578: LD_INT 11
30580: PUSH
30581: LD_INT 12
30583: PUSH
30584: LD_INT 13
30586: PUSH
30587: LD_INT 14
30589: PUSH
30590: LD_INT 15
30592: PUSH
30593: LD_INT 16
30595: PUSH
30596: LD_INT 17
30598: PUSH
30599: LD_INT 18
30601: PUSH
30602: LD_INT 19
30604: PUSH
30605: LD_INT 20
30607: PUSH
30608: LD_INT 21
30610: PUSH
30611: LD_INT 22
30613: PUSH
30614: LD_INT 23
30616: PUSH
30617: LD_INT 24
30619: PUSH
30620: LD_INT 25
30622: PUSH
30623: LD_INT 26
30625: PUSH
30626: LD_INT 27
30628: PUSH
30629: LD_INT 28
30631: PUSH
30632: LD_INT 29
30634: PUSH
30635: LD_INT 30
30637: PUSH
30638: LD_INT 31
30640: PUSH
30641: LD_INT 32
30643: PUSH
30644: LD_INT 33
30646: PUSH
30647: LD_INT 34
30649: PUSH
30650: LD_INT 36
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 101
30692: PUSH
30693: LD_INT 102
30695: PUSH
30696: LD_INT 103
30698: PUSH
30699: LD_INT 104
30701: PUSH
30702: LD_INT 105
30704: PUSH
30705: LD_INT 106
30707: PUSH
30708: LD_INT 107
30710: PUSH
30711: LD_INT 108
30713: PUSH
30714: LD_INT 109
30716: PUSH
30717: LD_INT 110
30719: PUSH
30720: LD_INT 111
30722: PUSH
30723: LD_INT 112
30725: PUSH
30726: LD_INT 113
30728: PUSH
30729: LD_INT 114
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: ST_TO_ADDR
30752: GO 31479
30754: LD_INT 16
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30886
30762: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
30763: LD_ADDR_VAR 0 1
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: LD_INT 4
30773: PUSH
30774: LD_INT 5
30776: PUSH
30777: LD_INT 7
30779: PUSH
30780: LD_INT 11
30782: PUSH
30783: LD_INT 12
30785: PUSH
30786: LD_INT 15
30788: PUSH
30789: LD_INT 16
30791: PUSH
30792: LD_INT 20
30794: PUSH
30795: LD_INT 21
30797: PUSH
30798: LD_INT 22
30800: PUSH
30801: LD_INT 23
30803: PUSH
30804: LD_INT 25
30806: PUSH
30807: LD_INT 26
30809: PUSH
30810: LD_INT 30
30812: PUSH
30813: LD_INT 31
30815: PUSH
30816: LD_INT 32
30818: PUSH
30819: LD_INT 33
30821: PUSH
30822: LD_INT 34
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 101
30848: PUSH
30849: LD_INT 102
30851: PUSH
30852: LD_INT 103
30854: PUSH
30855: LD_INT 106
30857: PUSH
30858: LD_INT 108
30860: PUSH
30861: LD_INT 112
30863: PUSH
30864: LD_INT 113
30866: PUSH
30867: LD_INT 114
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: ST_TO_ADDR
30884: GO 31479
30886: LD_INT 17
30888: DOUBLE
30889: EQUAL
30890: IFTRUE 30894
30892: GO 31106
30894: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
30895: LD_ADDR_VAR 0 1
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: LD_INT 2
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: LD_INT 4
30911: PUSH
30912: LD_INT 5
30914: PUSH
30915: LD_INT 6
30917: PUSH
30918: LD_INT 7
30920: PUSH
30921: LD_INT 8
30923: PUSH
30924: LD_INT 9
30926: PUSH
30927: LD_INT 10
30929: PUSH
30930: LD_INT 11
30932: PUSH
30933: LD_INT 12
30935: PUSH
30936: LD_INT 13
30938: PUSH
30939: LD_INT 14
30941: PUSH
30942: LD_INT 15
30944: PUSH
30945: LD_INT 16
30947: PUSH
30948: LD_INT 17
30950: PUSH
30951: LD_INT 18
30953: PUSH
30954: LD_INT 19
30956: PUSH
30957: LD_INT 20
30959: PUSH
30960: LD_INT 21
30962: PUSH
30963: LD_INT 22
30965: PUSH
30966: LD_INT 23
30968: PUSH
30969: LD_INT 24
30971: PUSH
30972: LD_INT 25
30974: PUSH
30975: LD_INT 26
30977: PUSH
30978: LD_INT 27
30980: PUSH
30981: LD_INT 28
30983: PUSH
30984: LD_INT 29
30986: PUSH
30987: LD_INT 30
30989: PUSH
30990: LD_INT 31
30992: PUSH
30993: LD_INT 32
30995: PUSH
30996: LD_INT 33
30998: PUSH
30999: LD_INT 34
31001: PUSH
31002: LD_INT 36
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 101
31044: PUSH
31045: LD_INT 102
31047: PUSH
31048: LD_INT 103
31050: PUSH
31051: LD_INT 104
31053: PUSH
31054: LD_INT 105
31056: PUSH
31057: LD_INT 106
31059: PUSH
31060: LD_INT 107
31062: PUSH
31063: LD_INT 108
31065: PUSH
31066: LD_INT 109
31068: PUSH
31069: LD_INT 110
31071: PUSH
31072: LD_INT 111
31074: PUSH
31075: LD_INT 112
31077: PUSH
31078: LD_INT 113
31080: PUSH
31081: LD_INT 114
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: ST_TO_ADDR
31104: GO 31479
31106: LD_INT 18
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31250
31114: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
31115: LD_ADDR_VAR 0 1
31119: PUSH
31120: LD_INT 2
31122: PUSH
31123: LD_INT 4
31125: PUSH
31126: LD_INT 5
31128: PUSH
31129: LD_INT 7
31131: PUSH
31132: LD_INT 11
31134: PUSH
31135: LD_INT 12
31137: PUSH
31138: LD_INT 15
31140: PUSH
31141: LD_INT 16
31143: PUSH
31144: LD_INT 20
31146: PUSH
31147: LD_INT 21
31149: PUSH
31150: LD_INT 22
31152: PUSH
31153: LD_INT 23
31155: PUSH
31156: LD_INT 25
31158: PUSH
31159: LD_INT 26
31161: PUSH
31162: LD_INT 30
31164: PUSH
31165: LD_INT 31
31167: PUSH
31168: LD_INT 32
31170: PUSH
31171: LD_INT 33
31173: PUSH
31174: LD_INT 34
31176: PUSH
31177: LD_INT 35
31179: PUSH
31180: LD_INT 36
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 101
31208: PUSH
31209: LD_INT 102
31211: PUSH
31212: LD_INT 103
31214: PUSH
31215: LD_INT 106
31217: PUSH
31218: LD_INT 108
31220: PUSH
31221: LD_INT 112
31223: PUSH
31224: LD_INT 113
31226: PUSH
31227: LD_INT 114
31229: PUSH
31230: LD_INT 115
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: ST_TO_ADDR
31248: GO 31479
31250: LD_INT 19
31252: DOUBLE
31253: EQUAL
31254: IFTRUE 31258
31256: GO 31478
31258: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
31259: LD_ADDR_VAR 0 1
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: LD_INT 2
31269: PUSH
31270: LD_INT 3
31272: PUSH
31273: LD_INT 4
31275: PUSH
31276: LD_INT 5
31278: PUSH
31279: LD_INT 6
31281: PUSH
31282: LD_INT 7
31284: PUSH
31285: LD_INT 8
31287: PUSH
31288: LD_INT 9
31290: PUSH
31291: LD_INT 10
31293: PUSH
31294: LD_INT 11
31296: PUSH
31297: LD_INT 12
31299: PUSH
31300: LD_INT 13
31302: PUSH
31303: LD_INT 14
31305: PUSH
31306: LD_INT 15
31308: PUSH
31309: LD_INT 16
31311: PUSH
31312: LD_INT 17
31314: PUSH
31315: LD_INT 18
31317: PUSH
31318: LD_INT 19
31320: PUSH
31321: LD_INT 20
31323: PUSH
31324: LD_INT 21
31326: PUSH
31327: LD_INT 22
31329: PUSH
31330: LD_INT 23
31332: PUSH
31333: LD_INT 24
31335: PUSH
31336: LD_INT 25
31338: PUSH
31339: LD_INT 26
31341: PUSH
31342: LD_INT 27
31344: PUSH
31345: LD_INT 28
31347: PUSH
31348: LD_INT 29
31350: PUSH
31351: LD_INT 30
31353: PUSH
31354: LD_INT 31
31356: PUSH
31357: LD_INT 32
31359: PUSH
31360: LD_INT 33
31362: PUSH
31363: LD_INT 34
31365: PUSH
31366: LD_INT 35
31368: PUSH
31369: LD_INT 36
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 101
31412: PUSH
31413: LD_INT 102
31415: PUSH
31416: LD_INT 103
31418: PUSH
31419: LD_INT 104
31421: PUSH
31422: LD_INT 105
31424: PUSH
31425: LD_INT 106
31427: PUSH
31428: LD_INT 107
31430: PUSH
31431: LD_INT 108
31433: PUSH
31434: LD_INT 109
31436: PUSH
31437: LD_INT 110
31439: PUSH
31440: LD_INT 111
31442: PUSH
31443: LD_INT 112
31445: PUSH
31446: LD_INT 113
31448: PUSH
31449: LD_INT 114
31451: PUSH
31452: LD_INT 115
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: ST_TO_ADDR
31476: GO 31479
31478: POP
// end else
31479: GO 31698
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
31481: LD_ADDR_VAR 0 1
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: LD_INT 4
31497: PUSH
31498: LD_INT 5
31500: PUSH
31501: LD_INT 6
31503: PUSH
31504: LD_INT 7
31506: PUSH
31507: LD_INT 8
31509: PUSH
31510: LD_INT 9
31512: PUSH
31513: LD_INT 10
31515: PUSH
31516: LD_INT 11
31518: PUSH
31519: LD_INT 12
31521: PUSH
31522: LD_INT 13
31524: PUSH
31525: LD_INT 14
31527: PUSH
31528: LD_INT 15
31530: PUSH
31531: LD_INT 16
31533: PUSH
31534: LD_INT 17
31536: PUSH
31537: LD_INT 18
31539: PUSH
31540: LD_INT 19
31542: PUSH
31543: LD_INT 20
31545: PUSH
31546: LD_INT 21
31548: PUSH
31549: LD_INT 22
31551: PUSH
31552: LD_INT 23
31554: PUSH
31555: LD_INT 24
31557: PUSH
31558: LD_INT 25
31560: PUSH
31561: LD_INT 26
31563: PUSH
31564: LD_INT 27
31566: PUSH
31567: LD_INT 28
31569: PUSH
31570: LD_INT 29
31572: PUSH
31573: LD_INT 30
31575: PUSH
31576: LD_INT 31
31578: PUSH
31579: LD_INT 32
31581: PUSH
31582: LD_INT 33
31584: PUSH
31585: LD_INT 34
31587: PUSH
31588: LD_INT 35
31590: PUSH
31591: LD_INT 36
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 101
31634: PUSH
31635: LD_INT 102
31637: PUSH
31638: LD_INT 103
31640: PUSH
31641: LD_INT 104
31643: PUSH
31644: LD_INT 105
31646: PUSH
31647: LD_INT 106
31649: PUSH
31650: LD_INT 107
31652: PUSH
31653: LD_INT 108
31655: PUSH
31656: LD_INT 109
31658: PUSH
31659: LD_INT 110
31661: PUSH
31662: LD_INT 111
31664: PUSH
31665: LD_INT 112
31667: PUSH
31668: LD_INT 113
31670: PUSH
31671: LD_INT 114
31673: PUSH
31674: LD_INT 115
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: ST_TO_ADDR
// if result then
31698: LD_VAR 0 1
31702: IFFALSE 31991
// begin normal :=  ;
31704: LD_ADDR_VAR 0 3
31708: PUSH
31709: LD_STRING 
31711: ST_TO_ADDR
// hardcore :=  ;
31712: LD_ADDR_VAR 0 4
31716: PUSH
31717: LD_STRING 
31719: ST_TO_ADDR
// for i = 1 to normalCounter do
31720: LD_ADDR_VAR 0 5
31724: PUSH
31725: DOUBLE
31726: LD_INT 1
31728: DEC
31729: ST_TO_ADDR
31730: LD_EXP 65
31734: PUSH
31735: FOR_TO
31736: IFFALSE 31837
// begin tmp := 0 ;
31738: LD_ADDR_VAR 0 2
31742: PUSH
31743: LD_STRING 0
31745: ST_TO_ADDR
// if result [ 1 ] then
31746: LD_VAR 0 1
31750: PUSH
31751: LD_INT 1
31753: ARRAY
31754: IFFALSE 31819
// if result [ 1 ] [ 1 ] = i then
31756: LD_VAR 0 1
31760: PUSH
31761: LD_INT 1
31763: ARRAY
31764: PUSH
31765: LD_INT 1
31767: ARRAY
31768: PUSH
31769: LD_VAR 0 5
31773: EQUAL
31774: IFFALSE 31819
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
31776: LD_ADDR_VAR 0 1
31780: PUSH
31781: LD_VAR 0 1
31785: PPUSH
31786: LD_INT 1
31788: PPUSH
31789: LD_VAR 0 1
31793: PUSH
31794: LD_INT 1
31796: ARRAY
31797: PPUSH
31798: LD_INT 1
31800: PPUSH
31801: CALL_OW 3
31805: PPUSH
31806: CALL_OW 1
31810: ST_TO_ADDR
// tmp := 1 ;
31811: LD_ADDR_VAR 0 2
31815: PUSH
31816: LD_STRING 1
31818: ST_TO_ADDR
// end ; normal := normal & tmp ;
31819: LD_ADDR_VAR 0 3
31823: PUSH
31824: LD_VAR 0 3
31828: PUSH
31829: LD_VAR 0 2
31833: STR
31834: ST_TO_ADDR
// end ;
31835: GO 31735
31837: POP
31838: POP
// for i = 1 to hardcoreCounter do
31839: LD_ADDR_VAR 0 5
31843: PUSH
31844: DOUBLE
31845: LD_INT 1
31847: DEC
31848: ST_TO_ADDR
31849: LD_EXP 66
31853: PUSH
31854: FOR_TO
31855: IFFALSE 31960
// begin tmp := 0 ;
31857: LD_ADDR_VAR 0 2
31861: PUSH
31862: LD_STRING 0
31864: ST_TO_ADDR
// if result [ 2 ] then
31865: LD_VAR 0 1
31869: PUSH
31870: LD_INT 2
31872: ARRAY
31873: IFFALSE 31942
// if result [ 2 ] [ 1 ] = 100 + i then
31875: LD_VAR 0 1
31879: PUSH
31880: LD_INT 2
31882: ARRAY
31883: PUSH
31884: LD_INT 1
31886: ARRAY
31887: PUSH
31888: LD_INT 100
31890: PUSH
31891: LD_VAR 0 5
31895: PLUS
31896: EQUAL
31897: IFFALSE 31942
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
31899: LD_ADDR_VAR 0 1
31903: PUSH
31904: LD_VAR 0 1
31908: PPUSH
31909: LD_INT 2
31911: PPUSH
31912: LD_VAR 0 1
31916: PUSH
31917: LD_INT 2
31919: ARRAY
31920: PPUSH
31921: LD_INT 1
31923: PPUSH
31924: CALL_OW 3
31928: PPUSH
31929: CALL_OW 1
31933: ST_TO_ADDR
// tmp := 1 ;
31934: LD_ADDR_VAR 0 2
31938: PUSH
31939: LD_STRING 1
31941: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
31942: LD_ADDR_VAR 0 4
31946: PUSH
31947: LD_VAR 0 4
31951: PUSH
31952: LD_VAR 0 2
31956: STR
31957: ST_TO_ADDR
// end ;
31958: GO 31854
31960: POP
31961: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
31962: LD_STRING getStreamItemsFromMission("
31964: PUSH
31965: LD_VAR 0 3
31969: STR
31970: PUSH
31971: LD_STRING ","
31973: STR
31974: PUSH
31975: LD_VAR 0 4
31979: STR
31980: PUSH
31981: LD_STRING ")
31983: STR
31984: PPUSH
31985: CALL_OW 559
// end else
31989: GO 31998
// ToLua ( getStreamItemsFromMission("","") ) ;
31991: LD_STRING getStreamItemsFromMission("","")
31993: PPUSH
31994: CALL_OW 559
// end ;
31998: LD_VAR 0 1
32002: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32003: LD_EXP 64
32007: PUSH
32008: LD_EXP 69
32012: AND
32013: IFFALSE 32137
32015: GO 32017
32017: DISABLE
32018: LD_INT 0
32020: PPUSH
32021: PPUSH
// begin enable ;
32022: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32023: LD_ADDR_VAR 0 2
32027: PUSH
32028: LD_INT 22
32030: PUSH
32031: LD_OWVAR 2
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 34
32045: PUSH
32046: LD_INT 7
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 34
32055: PUSH
32056: LD_INT 45
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 34
32065: PUSH
32066: LD_INT 28
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 34
32075: PUSH
32076: LD_INT 47
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PPUSH
32094: CALL_OW 69
32098: ST_TO_ADDR
// if not tmp then
32099: LD_VAR 0 2
32103: NOT
32104: IFFALSE 32108
// exit ;
32106: GO 32137
// for i in tmp do
32108: LD_ADDR_VAR 0 1
32112: PUSH
32113: LD_VAR 0 2
32117: PUSH
32118: FOR_IN
32119: IFFALSE 32135
// begin SetLives ( i , 0 ) ;
32121: LD_VAR 0 1
32125: PPUSH
32126: LD_INT 0
32128: PPUSH
32129: CALL_OW 234
// end ;
32133: GO 32118
32135: POP
32136: POP
// end ;
32137: PPOPN 2
32139: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
32140: LD_EXP 64
32144: PUSH
32145: LD_EXP 70
32149: AND
32150: IFFALSE 32234
32152: GO 32154
32154: DISABLE
32155: LD_INT 0
32157: PPUSH
32158: PPUSH
// begin enable ;
32159: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
32160: LD_ADDR_VAR 0 2
32164: PUSH
32165: LD_INT 22
32167: PUSH
32168: LD_OWVAR 2
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 32
32179: PUSH
32180: LD_INT 3
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PPUSH
32191: CALL_OW 69
32195: ST_TO_ADDR
// if not tmp then
32196: LD_VAR 0 2
32200: NOT
32201: IFFALSE 32205
// exit ;
32203: GO 32234
// for i in tmp do
32205: LD_ADDR_VAR 0 1
32209: PUSH
32210: LD_VAR 0 2
32214: PUSH
32215: FOR_IN
32216: IFFALSE 32232
// begin SetLives ( i , 0 ) ;
32218: LD_VAR 0 1
32222: PPUSH
32223: LD_INT 0
32225: PPUSH
32226: CALL_OW 234
// end ;
32230: GO 32215
32232: POP
32233: POP
// end ;
32234: PPOPN 2
32236: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
32237: LD_EXP 64
32241: PUSH
32242: LD_EXP 67
32246: AND
32247: IFFALSE 32340
32249: GO 32251
32251: DISABLE
32252: LD_INT 0
32254: PPUSH
// begin enable ;
32255: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
32256: LD_ADDR_VAR 0 1
32260: PUSH
32261: LD_INT 22
32263: PUSH
32264: LD_OWVAR 2
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 25
32278: PUSH
32279: LD_INT 5
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 25
32288: PUSH
32289: LD_INT 9
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 25
32298: PUSH
32299: LD_INT 8
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PPUSH
32316: CALL_OW 69
32320: PUSH
32321: FOR_IN
32322: IFFALSE 32338
// begin SetClass ( i , 1 ) ;
32324: LD_VAR 0 1
32328: PPUSH
32329: LD_INT 1
32331: PPUSH
32332: CALL_OW 336
// end ;
32336: GO 32321
32338: POP
32339: POP
// end ;
32340: PPOPN 1
32342: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
32343: LD_EXP 64
32347: PUSH
32348: LD_EXP 68
32352: AND
32353: PUSH
32354: LD_OWVAR 65
32358: PUSH
32359: LD_INT 7
32361: LESS
32362: AND
32363: IFFALSE 32377
32365: GO 32367
32367: DISABLE
// begin enable ;
32368: ENABLE
// game_speed := 7 ;
32369: LD_ADDR_OWVAR 65
32373: PUSH
32374: LD_INT 7
32376: ST_TO_ADDR
// end ;
32377: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
32378: LD_EXP 64
32382: PUSH
32383: LD_EXP 71
32387: AND
32388: IFFALSE 32590
32390: GO 32392
32392: DISABLE
32393: LD_INT 0
32395: PPUSH
32396: PPUSH
32397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32398: LD_ADDR_VAR 0 3
32402: PUSH
32403: LD_INT 81
32405: PUSH
32406: LD_OWVAR 2
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 21
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PPUSH
32429: CALL_OW 69
32433: ST_TO_ADDR
// if not tmp then
32434: LD_VAR 0 3
32438: NOT
32439: IFFALSE 32443
// exit ;
32441: GO 32590
// if tmp > 5 then
32443: LD_VAR 0 3
32447: PUSH
32448: LD_INT 5
32450: GREATER
32451: IFFALSE 32463
// k := 5 else
32453: LD_ADDR_VAR 0 2
32457: PUSH
32458: LD_INT 5
32460: ST_TO_ADDR
32461: GO 32473
// k := tmp ;
32463: LD_ADDR_VAR 0 2
32467: PUSH
32468: LD_VAR 0 3
32472: ST_TO_ADDR
// for i := 1 to k do
32473: LD_ADDR_VAR 0 1
32477: PUSH
32478: DOUBLE
32479: LD_INT 1
32481: DEC
32482: ST_TO_ADDR
32483: LD_VAR 0 2
32487: PUSH
32488: FOR_TO
32489: IFFALSE 32588
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
32491: LD_VAR 0 3
32495: PUSH
32496: LD_VAR 0 1
32500: ARRAY
32501: PPUSH
32502: LD_VAR 0 1
32506: PUSH
32507: LD_INT 4
32509: MOD
32510: PUSH
32511: LD_INT 1
32513: PLUS
32514: PPUSH
32515: CALL_OW 259
32519: PUSH
32520: LD_INT 10
32522: LESS
32523: IFFALSE 32586
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
32525: LD_VAR 0 3
32529: PUSH
32530: LD_VAR 0 1
32534: ARRAY
32535: PPUSH
32536: LD_VAR 0 1
32540: PUSH
32541: LD_INT 4
32543: MOD
32544: PUSH
32545: LD_INT 1
32547: PLUS
32548: PPUSH
32549: LD_VAR 0 3
32553: PUSH
32554: LD_VAR 0 1
32558: ARRAY
32559: PPUSH
32560: LD_VAR 0 1
32564: PUSH
32565: LD_INT 4
32567: MOD
32568: PUSH
32569: LD_INT 1
32571: PLUS
32572: PPUSH
32573: CALL_OW 259
32577: PUSH
32578: LD_INT 1
32580: PLUS
32581: PPUSH
32582: CALL_OW 237
32586: GO 32488
32588: POP
32589: POP
// end ;
32590: PPOPN 3
32592: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
32593: LD_EXP 64
32597: PUSH
32598: LD_EXP 72
32602: AND
32603: IFFALSE 32623
32605: GO 32607
32607: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
32608: LD_INT 4
32610: PPUSH
32611: LD_OWVAR 2
32615: PPUSH
32616: LD_INT 0
32618: PPUSH
32619: CALL_OW 324
32623: END
// every 0 0$1 trigger StreamModeActive and sShovel do
32624: LD_EXP 64
32628: PUSH
32629: LD_EXP 101
32633: AND
32634: IFFALSE 32654
32636: GO 32638
32638: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
32639: LD_INT 19
32641: PPUSH
32642: LD_OWVAR 2
32646: PPUSH
32647: LD_INT 0
32649: PPUSH
32650: CALL_OW 324
32654: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
32655: LD_EXP 64
32659: PUSH
32660: LD_EXP 73
32664: AND
32665: IFFALSE 32767
32667: GO 32669
32669: DISABLE
32670: LD_INT 0
32672: PPUSH
32673: PPUSH
// begin enable ;
32674: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
32675: LD_ADDR_VAR 0 2
32679: PUSH
32680: LD_INT 22
32682: PUSH
32683: LD_OWVAR 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 34
32697: PUSH
32698: LD_INT 11
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 34
32707: PUSH
32708: LD_INT 30
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PPUSH
32724: CALL_OW 69
32728: ST_TO_ADDR
// if not tmp then
32729: LD_VAR 0 2
32733: NOT
32734: IFFALSE 32738
// exit ;
32736: GO 32767
// for i in tmp do
32738: LD_ADDR_VAR 0 1
32742: PUSH
32743: LD_VAR 0 2
32747: PUSH
32748: FOR_IN
32749: IFFALSE 32765
// begin SetLives ( i , 0 ) ;
32751: LD_VAR 0 1
32755: PPUSH
32756: LD_INT 0
32758: PPUSH
32759: CALL_OW 234
// end ;
32763: GO 32748
32765: POP
32766: POP
// end ;
32767: PPOPN 2
32769: END
// every 0 0$1 trigger StreamModeActive and sBunker do
32770: LD_EXP 64
32774: PUSH
32775: LD_EXP 74
32779: AND
32780: IFFALSE 32800
32782: GO 32784
32784: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
32785: LD_INT 32
32787: PPUSH
32788: LD_OWVAR 2
32792: PPUSH
32793: LD_INT 0
32795: PPUSH
32796: CALL_OW 324
32800: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
32801: LD_EXP 64
32805: PUSH
32806: LD_EXP 75
32810: AND
32811: IFFALSE 32992
32813: GO 32815
32815: DISABLE
32816: LD_INT 0
32818: PPUSH
32819: PPUSH
32820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
32821: LD_ADDR_VAR 0 2
32825: PUSH
32826: LD_INT 22
32828: PUSH
32829: LD_OWVAR 2
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 33
32840: PUSH
32841: LD_INT 3
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PPUSH
32852: CALL_OW 69
32856: ST_TO_ADDR
// if not tmp then
32857: LD_VAR 0 2
32861: NOT
32862: IFFALSE 32866
// exit ;
32864: GO 32992
// side := 0 ;
32866: LD_ADDR_VAR 0 3
32870: PUSH
32871: LD_INT 0
32873: ST_TO_ADDR
// for i := 1 to 8 do
32874: LD_ADDR_VAR 0 1
32878: PUSH
32879: DOUBLE
32880: LD_INT 1
32882: DEC
32883: ST_TO_ADDR
32884: LD_INT 8
32886: PUSH
32887: FOR_TO
32888: IFFALSE 32936
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
32890: LD_OWVAR 2
32894: PUSH
32895: LD_VAR 0 1
32899: NONEQUAL
32900: PUSH
32901: LD_OWVAR 2
32905: PPUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 81
32915: PUSH
32916: LD_INT 2
32918: EQUAL
32919: AND
32920: IFFALSE 32934
// begin side := i ;
32922: LD_ADDR_VAR 0 3
32926: PUSH
32927: LD_VAR 0 1
32931: ST_TO_ADDR
// break ;
32932: GO 32936
// end ;
32934: GO 32887
32936: POP
32937: POP
// if not side then
32938: LD_VAR 0 3
32942: NOT
32943: IFFALSE 32947
// exit ;
32945: GO 32992
// for i := 1 to tmp do
32947: LD_ADDR_VAR 0 1
32951: PUSH
32952: DOUBLE
32953: LD_INT 1
32955: DEC
32956: ST_TO_ADDR
32957: LD_VAR 0 2
32961: PUSH
32962: FOR_TO
32963: IFFALSE 32990
// if Prob ( 60 ) then
32965: LD_INT 60
32967: PPUSH
32968: CALL_OW 13
32972: IFFALSE 32988
// SetSide ( i , side ) ;
32974: LD_VAR 0 1
32978: PPUSH
32979: LD_VAR 0 3
32983: PPUSH
32984: CALL_OW 235
32988: GO 32962
32990: POP
32991: POP
// end ;
32992: PPOPN 3
32994: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
32995: LD_EXP 64
32999: PUSH
33000: LD_EXP 77
33004: AND
33005: IFFALSE 33124
33007: GO 33009
33009: DISABLE
33010: LD_INT 0
33012: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33013: LD_ADDR_VAR 0 1
33017: PUSH
33018: LD_INT 22
33020: PUSH
33021: LD_OWVAR 2
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 21
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: LD_INT 23
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: PPUSH
33062: CALL_OW 69
33066: PUSH
33067: FOR_IN
33068: IFFALSE 33122
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33070: LD_VAR 0 1
33074: PPUSH
33075: CALL_OW 257
33079: PUSH
33080: LD_INT 1
33082: PUSH
33083: LD_INT 2
33085: PUSH
33086: LD_INT 3
33088: PUSH
33089: LD_INT 4
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: IN
33098: IFFALSE 33120
// SetClass ( un , rand ( 1 , 4 ) ) ;
33100: LD_VAR 0 1
33104: PPUSH
33105: LD_INT 1
33107: PPUSH
33108: LD_INT 4
33110: PPUSH
33111: CALL_OW 12
33115: PPUSH
33116: CALL_OW 336
33120: GO 33067
33122: POP
33123: POP
// end ;
33124: PPOPN 1
33126: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
33127: LD_EXP 64
33131: PUSH
33132: LD_EXP 76
33136: AND
33137: IFFALSE 33216
33139: GO 33141
33141: DISABLE
33142: LD_INT 0
33144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33145: LD_ADDR_VAR 0 1
33149: PUSH
33150: LD_INT 22
33152: PUSH
33153: LD_OWVAR 2
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 21
33164: PUSH
33165: LD_INT 3
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PPUSH
33176: CALL_OW 69
33180: ST_TO_ADDR
// if not tmp then
33181: LD_VAR 0 1
33185: NOT
33186: IFFALSE 33190
// exit ;
33188: GO 33216
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
33190: LD_VAR 0 1
33194: PUSH
33195: LD_INT 1
33197: PPUSH
33198: LD_VAR 0 1
33202: PPUSH
33203: CALL_OW 12
33207: ARRAY
33208: PPUSH
33209: LD_INT 100
33211: PPUSH
33212: CALL_OW 234
// end ;
33216: PPOPN 1
33218: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
33219: LD_EXP 64
33223: PUSH
33224: LD_EXP 78
33228: AND
33229: IFFALSE 33327
33231: GO 33233
33233: DISABLE
33234: LD_INT 0
33236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33237: LD_ADDR_VAR 0 1
33241: PUSH
33242: LD_INT 22
33244: PUSH
33245: LD_OWVAR 2
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 21
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PPUSH
33268: CALL_OW 69
33272: ST_TO_ADDR
// if not tmp then
33273: LD_VAR 0 1
33277: NOT
33278: IFFALSE 33282
// exit ;
33280: GO 33327
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
33282: LD_VAR 0 1
33286: PUSH
33287: LD_INT 1
33289: PPUSH
33290: LD_VAR 0 1
33294: PPUSH
33295: CALL_OW 12
33299: ARRAY
33300: PPUSH
33301: LD_INT 1
33303: PPUSH
33304: LD_INT 4
33306: PPUSH
33307: CALL_OW 12
33311: PPUSH
33312: LD_INT 3000
33314: PPUSH
33315: LD_INT 9000
33317: PPUSH
33318: CALL_OW 12
33322: PPUSH
33323: CALL_OW 492
// end ;
33327: PPOPN 1
33329: END
// every 0 0$1 trigger StreamModeActive and sDepot do
33330: LD_EXP 64
33334: PUSH
33335: LD_EXP 79
33339: AND
33340: IFFALSE 33360
33342: GO 33344
33344: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
33345: LD_INT 1
33347: PPUSH
33348: LD_OWVAR 2
33352: PPUSH
33353: LD_INT 0
33355: PPUSH
33356: CALL_OW 324
33360: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
33361: LD_EXP 64
33365: PUSH
33366: LD_EXP 80
33370: AND
33371: IFFALSE 33454
33373: GO 33375
33375: DISABLE
33376: LD_INT 0
33378: PPUSH
33379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33380: LD_ADDR_VAR 0 2
33384: PUSH
33385: LD_INT 22
33387: PUSH
33388: LD_OWVAR 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 21
33399: PUSH
33400: LD_INT 3
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PPUSH
33411: CALL_OW 69
33415: ST_TO_ADDR
// if not tmp then
33416: LD_VAR 0 2
33420: NOT
33421: IFFALSE 33425
// exit ;
33423: GO 33454
// for i in tmp do
33425: LD_ADDR_VAR 0 1
33429: PUSH
33430: LD_VAR 0 2
33434: PUSH
33435: FOR_IN
33436: IFFALSE 33452
// SetBLevel ( i , 10 ) ;
33438: LD_VAR 0 1
33442: PPUSH
33443: LD_INT 10
33445: PPUSH
33446: CALL_OW 241
33450: GO 33435
33452: POP
33453: POP
// end ;
33454: PPOPN 2
33456: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
33457: LD_EXP 64
33461: PUSH
33462: LD_EXP 81
33466: AND
33467: IFFALSE 33578
33469: GO 33471
33471: DISABLE
33472: LD_INT 0
33474: PPUSH
33475: PPUSH
33476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33477: LD_ADDR_VAR 0 3
33481: PUSH
33482: LD_INT 22
33484: PUSH
33485: LD_OWVAR 2
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 25
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PPUSH
33508: CALL_OW 69
33512: ST_TO_ADDR
// if not tmp then
33513: LD_VAR 0 3
33517: NOT
33518: IFFALSE 33522
// exit ;
33520: GO 33578
// un := tmp [ rand ( 1 , tmp ) ] ;
33522: LD_ADDR_VAR 0 2
33526: PUSH
33527: LD_VAR 0 3
33531: PUSH
33532: LD_INT 1
33534: PPUSH
33535: LD_VAR 0 3
33539: PPUSH
33540: CALL_OW 12
33544: ARRAY
33545: ST_TO_ADDR
// if Crawls ( un ) then
33546: LD_VAR 0 2
33550: PPUSH
33551: CALL_OW 318
33555: IFFALSE 33566
// ComWalk ( un ) ;
33557: LD_VAR 0 2
33561: PPUSH
33562: CALL_OW 138
// SetClass ( un , class_sniper ) ;
33566: LD_VAR 0 2
33570: PPUSH
33571: LD_INT 5
33573: PPUSH
33574: CALL_OW 336
// end ;
33578: PPOPN 3
33580: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
33581: LD_EXP 64
33585: PUSH
33586: LD_EXP 82
33590: AND
33591: PUSH
33592: LD_OWVAR 67
33596: PUSH
33597: LD_INT 3
33599: LESS
33600: AND
33601: IFFALSE 33620
33603: GO 33605
33605: DISABLE
// Difficulty := Difficulty + 1 ;
33606: LD_ADDR_OWVAR 67
33610: PUSH
33611: LD_OWVAR 67
33615: PUSH
33616: LD_INT 1
33618: PLUS
33619: ST_TO_ADDR
33620: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
33621: LD_EXP 64
33625: PUSH
33626: LD_EXP 83
33630: AND
33631: IFFALSE 33734
33633: GO 33635
33635: DISABLE
33636: LD_INT 0
33638: PPUSH
// begin for i := 1 to 5 do
33639: LD_ADDR_VAR 0 1
33643: PUSH
33644: DOUBLE
33645: LD_INT 1
33647: DEC
33648: ST_TO_ADDR
33649: LD_INT 5
33651: PUSH
33652: FOR_TO
33653: IFFALSE 33732
// begin uc_nation := nation_nature ;
33655: LD_ADDR_OWVAR 21
33659: PUSH
33660: LD_INT 0
33662: ST_TO_ADDR
// uc_side := 0 ;
33663: LD_ADDR_OWVAR 20
33667: PUSH
33668: LD_INT 0
33670: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
33671: LD_ADDR_OWVAR 29
33675: PUSH
33676: LD_INT 12
33678: PUSH
33679: LD_INT 12
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: ST_TO_ADDR
// hc_agressivity := 20 ;
33686: LD_ADDR_OWVAR 35
33690: PUSH
33691: LD_INT 20
33693: ST_TO_ADDR
// hc_class := class_tiger ;
33694: LD_ADDR_OWVAR 28
33698: PUSH
33699: LD_INT 14
33701: ST_TO_ADDR
// hc_gallery :=  ;
33702: LD_ADDR_OWVAR 33
33706: PUSH
33707: LD_STRING 
33709: ST_TO_ADDR
// hc_name :=  ;
33710: LD_ADDR_OWVAR 26
33714: PUSH
33715: LD_STRING 
33717: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
33718: CALL_OW 44
33722: PPUSH
33723: LD_INT 0
33725: PPUSH
33726: CALL_OW 51
// end ;
33730: GO 33652
33732: POP
33733: POP
// end ;
33734: PPOPN 1
33736: END
// every 0 0$1 trigger StreamModeActive and sBomb do
33737: LD_EXP 64
33741: PUSH
33742: LD_EXP 84
33746: AND
33747: IFFALSE 33756
33749: GO 33751
33751: DISABLE
// StreamSibBomb ;
33752: CALL 33757 0 0
33756: END
// export function StreamSibBomb ; var i , x , y ; begin
33757: LD_INT 0
33759: PPUSH
33760: PPUSH
33761: PPUSH
33762: PPUSH
// result := false ;
33763: LD_ADDR_VAR 0 1
33767: PUSH
33768: LD_INT 0
33770: ST_TO_ADDR
// for i := 1 to 16 do
33771: LD_ADDR_VAR 0 2
33775: PUSH
33776: DOUBLE
33777: LD_INT 1
33779: DEC
33780: ST_TO_ADDR
33781: LD_INT 16
33783: PUSH
33784: FOR_TO
33785: IFFALSE 33984
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33787: LD_ADDR_VAR 0 3
33791: PUSH
33792: LD_INT 10
33794: PUSH
33795: LD_INT 20
33797: PUSH
33798: LD_INT 30
33800: PUSH
33801: LD_INT 40
33803: PUSH
33804: LD_INT 50
33806: PUSH
33807: LD_INT 60
33809: PUSH
33810: LD_INT 70
33812: PUSH
33813: LD_INT 80
33815: PUSH
33816: LD_INT 90
33818: PUSH
33819: LD_INT 100
33821: PUSH
33822: LD_INT 110
33824: PUSH
33825: LD_INT 120
33827: PUSH
33828: LD_INT 130
33830: PUSH
33831: LD_INT 140
33833: PUSH
33834: LD_INT 150
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: PPUSH
33857: LD_INT 15
33859: PPUSH
33860: CALL_OW 12
33864: ARRAY
33865: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33866: LD_ADDR_VAR 0 4
33870: PUSH
33871: LD_INT 10
33873: PUSH
33874: LD_INT 20
33876: PUSH
33877: LD_INT 30
33879: PUSH
33880: LD_INT 40
33882: PUSH
33883: LD_INT 50
33885: PUSH
33886: LD_INT 60
33888: PUSH
33889: LD_INT 70
33891: PUSH
33892: LD_INT 80
33894: PUSH
33895: LD_INT 90
33897: PUSH
33898: LD_INT 100
33900: PUSH
33901: LD_INT 110
33903: PUSH
33904: LD_INT 120
33906: PUSH
33907: LD_INT 130
33909: PUSH
33910: LD_INT 140
33912: PUSH
33913: LD_INT 150
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: PPUSH
33936: LD_INT 15
33938: PPUSH
33939: CALL_OW 12
33943: ARRAY
33944: ST_TO_ADDR
// if ValidHex ( x , y ) then
33945: LD_VAR 0 3
33949: PPUSH
33950: LD_VAR 0 4
33954: PPUSH
33955: CALL_OW 488
33959: IFFALSE 33982
// begin result := [ x , y ] ;
33961: LD_ADDR_VAR 0 1
33965: PUSH
33966: LD_VAR 0 3
33970: PUSH
33971: LD_VAR 0 4
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: ST_TO_ADDR
// break ;
33980: GO 33984
// end ; end ;
33982: GO 33784
33984: POP
33985: POP
// if result then
33986: LD_VAR 0 1
33990: IFFALSE 34050
// begin ToLua ( playSibBomb() ) ;
33992: LD_STRING playSibBomb()
33994: PPUSH
33995: CALL_OW 559
// wait ( 0 0$14 ) ;
33999: LD_INT 490
34001: PPUSH
34002: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34006: LD_VAR 0 1
34010: PUSH
34011: LD_INT 1
34013: ARRAY
34014: PPUSH
34015: LD_VAR 0 1
34019: PUSH
34020: LD_INT 2
34022: ARRAY
34023: PPUSH
34024: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34028: LD_VAR 0 1
34032: PUSH
34033: LD_INT 1
34035: ARRAY
34036: PPUSH
34037: LD_VAR 0 1
34041: PUSH
34042: LD_INT 2
34044: ARRAY
34045: PPUSH
34046: CALL_OW 429
// end ; end ;
34050: LD_VAR 0 1
34054: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34055: LD_EXP 64
34059: PUSH
34060: LD_EXP 86
34064: AND
34065: IFFALSE 34077
34067: GO 34069
34069: DISABLE
// YouLost (  ) ;
34070: LD_STRING 
34072: PPUSH
34073: CALL_OW 104
34077: END
// every 0 0$1 trigger StreamModeActive and sFog do
34078: LD_EXP 64
34082: PUSH
34083: LD_EXP 85
34087: AND
34088: IFFALSE 34102
34090: GO 34092
34092: DISABLE
// FogOff ( your_side ) ;
34093: LD_OWVAR 2
34097: PPUSH
34098: CALL_OW 344
34102: END
// every 0 0$1 trigger StreamModeActive and sSun do
34103: LD_EXP 64
34107: PUSH
34108: LD_EXP 87
34112: AND
34113: IFFALSE 34141
34115: GO 34117
34117: DISABLE
// begin solar_recharge_percent := 0 ;
34118: LD_ADDR_OWVAR 79
34122: PUSH
34123: LD_INT 0
34125: ST_TO_ADDR
// wait ( 5 5$00 ) ;
34126: LD_INT 10500
34128: PPUSH
34129: CALL_OW 67
// solar_recharge_percent := 100 ;
34133: LD_ADDR_OWVAR 79
34137: PUSH
34138: LD_INT 100
34140: ST_TO_ADDR
// end ;
34141: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
34142: LD_EXP 64
34146: PUSH
34147: LD_EXP 88
34151: AND
34152: IFFALSE 34391
34154: GO 34156
34156: DISABLE
34157: LD_INT 0
34159: PPUSH
34160: PPUSH
34161: PPUSH
// begin tmp := [ ] ;
34162: LD_ADDR_VAR 0 3
34166: PUSH
34167: EMPTY
34168: ST_TO_ADDR
// for i := 1 to 6 do
34169: LD_ADDR_VAR 0 1
34173: PUSH
34174: DOUBLE
34175: LD_INT 1
34177: DEC
34178: ST_TO_ADDR
34179: LD_INT 6
34181: PUSH
34182: FOR_TO
34183: IFFALSE 34288
// begin uc_nation := nation_nature ;
34185: LD_ADDR_OWVAR 21
34189: PUSH
34190: LD_INT 0
34192: ST_TO_ADDR
// uc_side := 0 ;
34193: LD_ADDR_OWVAR 20
34197: PUSH
34198: LD_INT 0
34200: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34201: LD_ADDR_OWVAR 29
34205: PUSH
34206: LD_INT 12
34208: PUSH
34209: LD_INT 12
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: ST_TO_ADDR
// hc_agressivity := 20 ;
34216: LD_ADDR_OWVAR 35
34220: PUSH
34221: LD_INT 20
34223: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
34224: LD_ADDR_OWVAR 28
34228: PUSH
34229: LD_INT 17
34231: ST_TO_ADDR
// hc_gallery :=  ;
34232: LD_ADDR_OWVAR 33
34236: PUSH
34237: LD_STRING 
34239: ST_TO_ADDR
// hc_name :=  ;
34240: LD_ADDR_OWVAR 26
34244: PUSH
34245: LD_STRING 
34247: ST_TO_ADDR
// un := CreateHuman ;
34248: LD_ADDR_VAR 0 2
34252: PUSH
34253: CALL_OW 44
34257: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
34258: LD_VAR 0 2
34262: PPUSH
34263: LD_INT 1
34265: PPUSH
34266: CALL_OW 51
// tmp := tmp ^ un ;
34270: LD_ADDR_VAR 0 3
34274: PUSH
34275: LD_VAR 0 3
34279: PUSH
34280: LD_VAR 0 2
34284: ADD
34285: ST_TO_ADDR
// end ;
34286: GO 34182
34288: POP
34289: POP
// repeat wait ( 0 0$1 ) ;
34290: LD_INT 35
34292: PPUSH
34293: CALL_OW 67
// for un in tmp do
34297: LD_ADDR_VAR 0 2
34301: PUSH
34302: LD_VAR 0 3
34306: PUSH
34307: FOR_IN
34308: IFFALSE 34382
// begin if IsDead ( un ) then
34310: LD_VAR 0 2
34314: PPUSH
34315: CALL_OW 301
34319: IFFALSE 34339
// begin tmp := tmp diff un ;
34321: LD_ADDR_VAR 0 3
34325: PUSH
34326: LD_VAR 0 3
34330: PUSH
34331: LD_VAR 0 2
34335: DIFF
34336: ST_TO_ADDR
// continue ;
34337: GO 34307
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
34339: LD_VAR 0 2
34343: PPUSH
34344: LD_INT 3
34346: PUSH
34347: LD_INT 22
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PPUSH
34361: CALL_OW 69
34365: PPUSH
34366: LD_VAR 0 2
34370: PPUSH
34371: CALL_OW 74
34375: PPUSH
34376: CALL_OW 115
// end ;
34380: GO 34307
34382: POP
34383: POP
// until not tmp ;
34384: LD_VAR 0 3
34388: NOT
34389: IFFALSE 34290
// end ;
34391: PPOPN 3
34393: END
// every 0 0$1 trigger StreamModeActive and sTroll do
34394: LD_EXP 64
34398: PUSH
34399: LD_EXP 89
34403: AND
34404: IFFALSE 34458
34406: GO 34408
34408: DISABLE
// begin ToLua ( displayTroll(); ) ;
34409: LD_STRING displayTroll();
34411: PPUSH
34412: CALL_OW 559
// wait ( 3 3$00 ) ;
34416: LD_INT 6300
34418: PPUSH
34419: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34423: LD_STRING hideTroll();
34425: PPUSH
34426: CALL_OW 559
// wait ( 1 1$00 ) ;
34430: LD_INT 2100
34432: PPUSH
34433: CALL_OW 67
// ToLua ( displayTroll(); ) ;
34437: LD_STRING displayTroll();
34439: PPUSH
34440: CALL_OW 559
// wait ( 1 1$00 ) ;
34444: LD_INT 2100
34446: PPUSH
34447: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34451: LD_STRING hideTroll();
34453: PPUSH
34454: CALL_OW 559
// end ;
34458: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
34459: LD_EXP 64
34463: PUSH
34464: LD_EXP 90
34468: AND
34469: IFFALSE 34532
34471: GO 34473
34473: DISABLE
34474: LD_INT 0
34476: PPUSH
// begin p := 0 ;
34477: LD_ADDR_VAR 0 1
34481: PUSH
34482: LD_INT 0
34484: ST_TO_ADDR
// repeat game_speed := 1 ;
34485: LD_ADDR_OWVAR 65
34489: PUSH
34490: LD_INT 1
34492: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34493: LD_INT 35
34495: PPUSH
34496: CALL_OW 67
// p := p + 1 ;
34500: LD_ADDR_VAR 0 1
34504: PUSH
34505: LD_VAR 0 1
34509: PUSH
34510: LD_INT 1
34512: PLUS
34513: ST_TO_ADDR
// until p >= 60 ;
34514: LD_VAR 0 1
34518: PUSH
34519: LD_INT 60
34521: GREATEREQUAL
34522: IFFALSE 34485
// game_speed := 4 ;
34524: LD_ADDR_OWVAR 65
34528: PUSH
34529: LD_INT 4
34531: ST_TO_ADDR
// end ;
34532: PPOPN 1
34534: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
34535: LD_EXP 64
34539: PUSH
34540: LD_EXP 91
34544: AND
34545: IFFALSE 34691
34547: GO 34549
34549: DISABLE
34550: LD_INT 0
34552: PPUSH
34553: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34554: LD_ADDR_VAR 0 1
34558: PUSH
34559: LD_INT 22
34561: PUSH
34562: LD_OWVAR 2
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 2
34573: PUSH
34574: LD_INT 30
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 30
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PPUSH
34603: CALL_OW 69
34607: ST_TO_ADDR
// if not depot then
34608: LD_VAR 0 1
34612: NOT
34613: IFFALSE 34617
// exit ;
34615: GO 34691
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
34617: LD_ADDR_VAR 0 2
34621: PUSH
34622: LD_VAR 0 1
34626: PUSH
34627: LD_INT 1
34629: PPUSH
34630: LD_VAR 0 1
34634: PPUSH
34635: CALL_OW 12
34639: ARRAY
34640: PPUSH
34641: CALL_OW 274
34645: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
34646: LD_VAR 0 2
34650: PPUSH
34651: LD_INT 1
34653: PPUSH
34654: LD_INT 0
34656: PPUSH
34657: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
34661: LD_VAR 0 2
34665: PPUSH
34666: LD_INT 2
34668: PPUSH
34669: LD_INT 0
34671: PPUSH
34672: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
34676: LD_VAR 0 2
34680: PPUSH
34681: LD_INT 3
34683: PPUSH
34684: LD_INT 0
34686: PPUSH
34687: CALL_OW 277
// end ;
34691: PPOPN 2
34693: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
34694: LD_EXP 64
34698: PUSH
34699: LD_EXP 92
34703: AND
34704: IFFALSE 34801
34706: GO 34708
34708: DISABLE
34709: LD_INT 0
34711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34712: LD_ADDR_VAR 0 1
34716: PUSH
34717: LD_INT 22
34719: PUSH
34720: LD_OWVAR 2
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 21
34731: PUSH
34732: LD_INT 1
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 3
34741: PUSH
34742: LD_INT 23
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: PPUSH
34761: CALL_OW 69
34765: ST_TO_ADDR
// if not tmp then
34766: LD_VAR 0 1
34770: NOT
34771: IFFALSE 34775
// exit ;
34773: GO 34801
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
34775: LD_VAR 0 1
34779: PUSH
34780: LD_INT 1
34782: PPUSH
34783: LD_VAR 0 1
34787: PPUSH
34788: CALL_OW 12
34792: ARRAY
34793: PPUSH
34794: LD_INT 200
34796: PPUSH
34797: CALL_OW 234
// end ;
34801: PPOPN 1
34803: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
34804: LD_EXP 64
34808: PUSH
34809: LD_EXP 93
34813: AND
34814: IFFALSE 34893
34816: GO 34818
34818: DISABLE
34819: LD_INT 0
34821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
34822: LD_ADDR_VAR 0 1
34826: PUSH
34827: LD_INT 22
34829: PUSH
34830: LD_OWVAR 2
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 21
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PPUSH
34853: CALL_OW 69
34857: ST_TO_ADDR
// if not tmp then
34858: LD_VAR 0 1
34862: NOT
34863: IFFALSE 34867
// exit ;
34865: GO 34893
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
34867: LD_VAR 0 1
34871: PUSH
34872: LD_INT 1
34874: PPUSH
34875: LD_VAR 0 1
34879: PPUSH
34880: CALL_OW 12
34884: ARRAY
34885: PPUSH
34886: LD_INT 60
34888: PPUSH
34889: CALL_OW 234
// end ;
34893: PPOPN 1
34895: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
34896: LD_EXP 64
34900: PUSH
34901: LD_EXP 94
34905: AND
34906: IFFALSE 35005
34908: GO 34910
34910: DISABLE
34911: LD_INT 0
34913: PPUSH
34914: PPUSH
// begin enable ;
34915: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
34916: LD_ADDR_VAR 0 1
34920: PUSH
34921: LD_INT 22
34923: PUSH
34924: LD_OWVAR 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 61
34935: PUSH
34936: EMPTY
34937: LIST
34938: PUSH
34939: LD_INT 33
34941: PUSH
34942: LD_INT 2
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: PPUSH
34954: CALL_OW 69
34958: ST_TO_ADDR
// if not tmp then
34959: LD_VAR 0 1
34963: NOT
34964: IFFALSE 34968
// exit ;
34966: GO 35005
// for i in tmp do
34968: LD_ADDR_VAR 0 2
34972: PUSH
34973: LD_VAR 0 1
34977: PUSH
34978: FOR_IN
34979: IFFALSE 35003
// if IsControledBy ( i ) then
34981: LD_VAR 0 2
34985: PPUSH
34986: CALL_OW 312
34990: IFFALSE 35001
// ComUnlink ( i ) ;
34992: LD_VAR 0 2
34996: PPUSH
34997: CALL_OW 136
35001: GO 34978
35003: POP
35004: POP
// end ;
35005: PPOPN 2
35007: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35008: LD_EXP 64
35012: PUSH
35013: LD_EXP 95
35017: AND
35018: IFFALSE 35158
35020: GO 35022
35022: DISABLE
35023: LD_INT 0
35025: PPUSH
35026: PPUSH
// begin ToLua ( displayPowell(); ) ;
35027: LD_STRING displayPowell();
35029: PPUSH
35030: CALL_OW 559
// uc_side := 0 ;
35034: LD_ADDR_OWVAR 20
35038: PUSH
35039: LD_INT 0
35041: ST_TO_ADDR
// uc_nation := 2 ;
35042: LD_ADDR_OWVAR 21
35046: PUSH
35047: LD_INT 2
35049: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35050: LD_ADDR_OWVAR 37
35054: PUSH
35055: LD_INT 14
35057: ST_TO_ADDR
// vc_engine := engine_siberite ;
35058: LD_ADDR_OWVAR 39
35062: PUSH
35063: LD_INT 3
35065: ST_TO_ADDR
// vc_control := control_apeman ;
35066: LD_ADDR_OWVAR 38
35070: PUSH
35071: LD_INT 5
35073: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
35074: LD_ADDR_OWVAR 40
35078: PUSH
35079: LD_INT 29
35081: ST_TO_ADDR
// un := CreateVehicle ;
35082: LD_ADDR_VAR 0 2
35086: PUSH
35087: CALL_OW 45
35091: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35092: LD_VAR 0 2
35096: PPUSH
35097: LD_INT 1
35099: PPUSH
35100: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35104: LD_INT 35
35106: PPUSH
35107: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35111: LD_VAR 0 2
35115: PPUSH
35116: LD_INT 22
35118: PUSH
35119: LD_OWVAR 2
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PPUSH
35128: CALL_OW 69
35132: PPUSH
35133: LD_VAR 0 2
35137: PPUSH
35138: CALL_OW 74
35142: PPUSH
35143: CALL_OW 115
// until IsDead ( un ) ;
35147: LD_VAR 0 2
35151: PPUSH
35152: CALL_OW 301
35156: IFFALSE 35104
// end ;
35158: PPOPN 2
35160: END
// every 0 0$1 trigger StreamModeActive and sStu do
35161: LD_EXP 64
35165: PUSH
35166: LD_EXP 103
35170: AND
35171: IFFALSE 35187
35173: GO 35175
35175: DISABLE
// begin ToLua ( displayStucuk(); ) ;
35176: LD_STRING displayStucuk();
35178: PPUSH
35179: CALL_OW 559
// ResetFog ;
35183: CALL_OW 335
// end ;
35187: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
35188: LD_EXP 64
35192: PUSH
35193: LD_EXP 96
35197: AND
35198: IFFALSE 35339
35200: GO 35202
35202: DISABLE
35203: LD_INT 0
35205: PPUSH
35206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35207: LD_ADDR_VAR 0 2
35211: PUSH
35212: LD_INT 22
35214: PUSH
35215: LD_OWVAR 2
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 21
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PPUSH
35238: CALL_OW 69
35242: ST_TO_ADDR
// if not tmp then
35243: LD_VAR 0 2
35247: NOT
35248: IFFALSE 35252
// exit ;
35250: GO 35339
// un := tmp [ rand ( 1 , tmp ) ] ;
35252: LD_ADDR_VAR 0 1
35256: PUSH
35257: LD_VAR 0 2
35261: PUSH
35262: LD_INT 1
35264: PPUSH
35265: LD_VAR 0 2
35269: PPUSH
35270: CALL_OW 12
35274: ARRAY
35275: ST_TO_ADDR
// SetSide ( un , 0 ) ;
35276: LD_VAR 0 1
35280: PPUSH
35281: LD_INT 0
35283: PPUSH
35284: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
35288: LD_VAR 0 1
35292: PPUSH
35293: LD_OWVAR 3
35297: PUSH
35298: LD_VAR 0 1
35302: DIFF
35303: PPUSH
35304: LD_VAR 0 1
35308: PPUSH
35309: CALL_OW 74
35313: PPUSH
35314: CALL_OW 115
// wait ( 0 0$20 ) ;
35318: LD_INT 700
35320: PPUSH
35321: CALL_OW 67
// SetSide ( un , your_side ) ;
35325: LD_VAR 0 1
35329: PPUSH
35330: LD_OWVAR 2
35334: PPUSH
35335: CALL_OW 235
// end ;
35339: PPOPN 2
35341: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
35342: LD_EXP 64
35346: PUSH
35347: LD_EXP 97
35351: AND
35352: IFFALSE 35458
35354: GO 35356
35356: DISABLE
35357: LD_INT 0
35359: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35360: LD_ADDR_VAR 0 1
35364: PUSH
35365: LD_INT 22
35367: PUSH
35368: LD_OWVAR 2
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: LD_INT 30
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 30
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PPUSH
35409: CALL_OW 69
35413: ST_TO_ADDR
// if not depot then
35414: LD_VAR 0 1
35418: NOT
35419: IFFALSE 35423
// exit ;
35421: GO 35458
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
35423: LD_VAR 0 1
35427: PUSH
35428: LD_INT 1
35430: ARRAY
35431: PPUSH
35432: CALL_OW 250
35436: PPUSH
35437: LD_VAR 0 1
35441: PUSH
35442: LD_INT 1
35444: ARRAY
35445: PPUSH
35446: CALL_OW 251
35450: PPUSH
35451: LD_INT 70
35453: PPUSH
35454: CALL_OW 495
// end ;
35458: PPOPN 1
35460: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
35461: LD_EXP 64
35465: PUSH
35466: LD_EXP 98
35470: AND
35471: IFFALSE 35682
35473: GO 35475
35475: DISABLE
35476: LD_INT 0
35478: PPUSH
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35483: LD_ADDR_VAR 0 5
35487: PUSH
35488: LD_INT 22
35490: PUSH
35491: LD_OWVAR 2
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 21
35502: PUSH
35503: LD_INT 1
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PPUSH
35514: CALL_OW 69
35518: ST_TO_ADDR
// if not tmp then
35519: LD_VAR 0 5
35523: NOT
35524: IFFALSE 35528
// exit ;
35526: GO 35682
// for i in tmp do
35528: LD_ADDR_VAR 0 1
35532: PUSH
35533: LD_VAR 0 5
35537: PUSH
35538: FOR_IN
35539: IFFALSE 35680
// begin d := rand ( 0 , 5 ) ;
35541: LD_ADDR_VAR 0 4
35545: PUSH
35546: LD_INT 0
35548: PPUSH
35549: LD_INT 5
35551: PPUSH
35552: CALL_OW 12
35556: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
35557: LD_ADDR_VAR 0 2
35561: PUSH
35562: LD_VAR 0 1
35566: PPUSH
35567: CALL_OW 250
35571: PPUSH
35572: LD_VAR 0 4
35576: PPUSH
35577: LD_INT 3
35579: PPUSH
35580: LD_INT 12
35582: PPUSH
35583: CALL_OW 12
35587: PPUSH
35588: CALL_OW 272
35592: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
35593: LD_ADDR_VAR 0 3
35597: PUSH
35598: LD_VAR 0 1
35602: PPUSH
35603: CALL_OW 251
35607: PPUSH
35608: LD_VAR 0 4
35612: PPUSH
35613: LD_INT 3
35615: PPUSH
35616: LD_INT 12
35618: PPUSH
35619: CALL_OW 12
35623: PPUSH
35624: CALL_OW 273
35628: ST_TO_ADDR
// if ValidHex ( x , y ) then
35629: LD_VAR 0 2
35633: PPUSH
35634: LD_VAR 0 3
35638: PPUSH
35639: CALL_OW 488
35643: IFFALSE 35678
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
35645: LD_VAR 0 1
35649: PPUSH
35650: LD_VAR 0 2
35654: PPUSH
35655: LD_VAR 0 3
35659: PPUSH
35660: LD_INT 3
35662: PPUSH
35663: LD_INT 6
35665: PPUSH
35666: CALL_OW 12
35670: PPUSH
35671: LD_INT 1
35673: PPUSH
35674: CALL_OW 483
// end ;
35678: GO 35538
35680: POP
35681: POP
// end ;
35682: PPOPN 5
35684: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
35685: LD_EXP 64
35689: PUSH
35690: LD_EXP 99
35694: AND
35695: IFFALSE 35789
35697: GO 35699
35699: DISABLE
35700: LD_INT 0
35702: PPUSH
35703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
35704: LD_ADDR_VAR 0 2
35708: PUSH
35709: LD_INT 22
35711: PUSH
35712: LD_OWVAR 2
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 32
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 21
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: PPUSH
35746: CALL_OW 69
35750: ST_TO_ADDR
// if not tmp then
35751: LD_VAR 0 2
35755: NOT
35756: IFFALSE 35760
// exit ;
35758: GO 35789
// for i in tmp do
35760: LD_ADDR_VAR 0 1
35764: PUSH
35765: LD_VAR 0 2
35769: PUSH
35770: FOR_IN
35771: IFFALSE 35787
// SetFuel ( i , 0 ) ;
35773: LD_VAR 0 1
35777: PPUSH
35778: LD_INT 0
35780: PPUSH
35781: CALL_OW 240
35785: GO 35770
35787: POP
35788: POP
// end ;
35789: PPOPN 2
35791: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
35792: LD_EXP 64
35796: PUSH
35797: LD_EXP 100
35801: AND
35802: IFFALSE 35868
35804: GO 35806
35806: DISABLE
35807: LD_INT 0
35809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35810: LD_ADDR_VAR 0 1
35814: PUSH
35815: LD_INT 22
35817: PUSH
35818: LD_OWVAR 2
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 30
35829: PUSH
35830: LD_INT 29
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PPUSH
35841: CALL_OW 69
35845: ST_TO_ADDR
// if not tmp then
35846: LD_VAR 0 1
35850: NOT
35851: IFFALSE 35855
// exit ;
35853: GO 35868
// DestroyUnit ( tmp [ 1 ] ) ;
35855: LD_VAR 0 1
35859: PUSH
35860: LD_INT 1
35862: ARRAY
35863: PPUSH
35864: CALL_OW 65
// end ;
35868: PPOPN 1
35870: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
35871: LD_EXP 64
35875: PUSH
35876: LD_EXP 102
35880: AND
35881: IFFALSE 36010
35883: GO 35885
35885: DISABLE
35886: LD_INT 0
35888: PPUSH
// begin uc_side := 0 ;
35889: LD_ADDR_OWVAR 20
35893: PUSH
35894: LD_INT 0
35896: ST_TO_ADDR
// uc_nation := nation_arabian ;
35897: LD_ADDR_OWVAR 21
35901: PUSH
35902: LD_INT 2
35904: ST_TO_ADDR
// hc_gallery :=  ;
35905: LD_ADDR_OWVAR 33
35909: PUSH
35910: LD_STRING 
35912: ST_TO_ADDR
// hc_name :=  ;
35913: LD_ADDR_OWVAR 26
35917: PUSH
35918: LD_STRING 
35920: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
35921: LD_INT 1
35923: PPUSH
35924: LD_INT 11
35926: PPUSH
35927: LD_INT 10
35929: PPUSH
35930: CALL_OW 380
// un := CreateHuman ;
35934: LD_ADDR_VAR 0 1
35938: PUSH
35939: CALL_OW 44
35943: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35944: LD_VAR 0 1
35948: PPUSH
35949: LD_INT 1
35951: PPUSH
35952: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35956: LD_INT 35
35958: PPUSH
35959: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35963: LD_VAR 0 1
35967: PPUSH
35968: LD_INT 22
35970: PUSH
35971: LD_OWVAR 2
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PPUSH
35980: CALL_OW 69
35984: PPUSH
35985: LD_VAR 0 1
35989: PPUSH
35990: CALL_OW 74
35994: PPUSH
35995: CALL_OW 115
// until IsDead ( un ) ;
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 301
36008: IFFALSE 35956
// end ;
36010: PPOPN 1
36012: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36013: LD_EXP 64
36017: PUSH
36018: LD_EXP 104
36022: AND
36023: IFFALSE 36035
36025: GO 36027
36027: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36028: LD_STRING earthquake(getX(game), 0, 32)
36030: PPUSH
36031: CALL_OW 559
36035: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36036: LD_EXP 64
36040: PUSH
36041: LD_EXP 105
36045: AND
36046: IFFALSE 36137
36048: GO 36050
36050: DISABLE
36051: LD_INT 0
36053: PPUSH
// begin enable ;
36054: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36055: LD_ADDR_VAR 0 1
36059: PUSH
36060: LD_INT 22
36062: PUSH
36063: LD_OWVAR 2
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 21
36074: PUSH
36075: LD_INT 2
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 33
36084: PUSH
36085: LD_INT 3
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: PPUSH
36097: CALL_OW 69
36101: ST_TO_ADDR
// if not tmp then
36102: LD_VAR 0 1
36106: NOT
36107: IFFALSE 36111
// exit ;
36109: GO 36137
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
36111: LD_VAR 0 1
36115: PUSH
36116: LD_INT 1
36118: PPUSH
36119: LD_VAR 0 1
36123: PPUSH
36124: CALL_OW 12
36128: ARRAY
36129: PPUSH
36130: LD_INT 1
36132: PPUSH
36133: CALL_OW 234
// end ;
36137: PPOPN 1
36139: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
36140: LD_EXP 64
36144: PUSH
36145: LD_EXP 106
36149: AND
36150: IFFALSE 36291
36152: GO 36154
36154: DISABLE
36155: LD_INT 0
36157: PPUSH
36158: PPUSH
36159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36160: LD_ADDR_VAR 0 3
36164: PUSH
36165: LD_INT 22
36167: PUSH
36168: LD_OWVAR 2
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 25
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PPUSH
36191: CALL_OW 69
36195: ST_TO_ADDR
// if not tmp then
36196: LD_VAR 0 3
36200: NOT
36201: IFFALSE 36205
// exit ;
36203: GO 36291
// un := tmp [ rand ( 1 , tmp ) ] ;
36205: LD_ADDR_VAR 0 2
36209: PUSH
36210: LD_VAR 0 3
36214: PUSH
36215: LD_INT 1
36217: PPUSH
36218: LD_VAR 0 3
36222: PPUSH
36223: CALL_OW 12
36227: ARRAY
36228: ST_TO_ADDR
// if Crawls ( un ) then
36229: LD_VAR 0 2
36233: PPUSH
36234: CALL_OW 318
36238: IFFALSE 36249
// ComWalk ( un ) ;
36240: LD_VAR 0 2
36244: PPUSH
36245: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
36249: LD_VAR 0 2
36253: PPUSH
36254: LD_INT 9
36256: PPUSH
36257: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
36261: LD_INT 28
36263: PPUSH
36264: LD_OWVAR 2
36268: PPUSH
36269: LD_INT 2
36271: PPUSH
36272: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
36276: LD_INT 29
36278: PPUSH
36279: LD_OWVAR 2
36283: PPUSH
36284: LD_INT 2
36286: PPUSH
36287: CALL_OW 322
// end ;
36291: PPOPN 3
36293: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
36294: LD_EXP 64
36298: PUSH
36299: LD_EXP 107
36303: AND
36304: IFFALSE 36415
36306: GO 36308
36308: DISABLE
36309: LD_INT 0
36311: PPUSH
36312: PPUSH
36313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36314: LD_ADDR_VAR 0 3
36318: PUSH
36319: LD_INT 22
36321: PUSH
36322: LD_OWVAR 2
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 25
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PPUSH
36345: CALL_OW 69
36349: ST_TO_ADDR
// if not tmp then
36350: LD_VAR 0 3
36354: NOT
36355: IFFALSE 36359
// exit ;
36357: GO 36415
// un := tmp [ rand ( 1 , tmp ) ] ;
36359: LD_ADDR_VAR 0 2
36363: PUSH
36364: LD_VAR 0 3
36368: PUSH
36369: LD_INT 1
36371: PPUSH
36372: LD_VAR 0 3
36376: PPUSH
36377: CALL_OW 12
36381: ARRAY
36382: ST_TO_ADDR
// if Crawls ( un ) then
36383: LD_VAR 0 2
36387: PPUSH
36388: CALL_OW 318
36392: IFFALSE 36403
// ComWalk ( un ) ;
36394: LD_VAR 0 2
36398: PPUSH
36399: CALL_OW 138
// SetClass ( un , class_mortar ) ;
36403: LD_VAR 0 2
36407: PPUSH
36408: LD_INT 8
36410: PPUSH
36411: CALL_OW 336
// end ;
36415: PPOPN 3
36417: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
36418: LD_EXP 64
36422: PUSH
36423: LD_EXP 108
36427: AND
36428: IFFALSE 36572
36430: GO 36432
36432: DISABLE
36433: LD_INT 0
36435: PPUSH
36436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
36437: LD_ADDR_VAR 0 2
36441: PUSH
36442: LD_INT 22
36444: PUSH
36445: LD_OWVAR 2
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 21
36456: PUSH
36457: LD_INT 2
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 2
36466: PUSH
36467: LD_INT 34
36469: PUSH
36470: LD_INT 12
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 34
36479: PUSH
36480: LD_INT 51
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 34
36489: PUSH
36490: LD_INT 32
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: PPUSH
36508: CALL_OW 69
36512: ST_TO_ADDR
// if not tmp then
36513: LD_VAR 0 2
36517: NOT
36518: IFFALSE 36522
// exit ;
36520: GO 36572
// for i in tmp do
36522: LD_ADDR_VAR 0 1
36526: PUSH
36527: LD_VAR 0 2
36531: PUSH
36532: FOR_IN
36533: IFFALSE 36570
// if GetCargo ( i , mat_artifact ) = 0 then
36535: LD_VAR 0 1
36539: PPUSH
36540: LD_INT 4
36542: PPUSH
36543: CALL_OW 289
36547: PUSH
36548: LD_INT 0
36550: EQUAL
36551: IFFALSE 36568
// SetCargo ( i , mat_siberit , 100 ) ;
36553: LD_VAR 0 1
36557: PPUSH
36558: LD_INT 3
36560: PPUSH
36561: LD_INT 100
36563: PPUSH
36564: CALL_OW 290
36568: GO 36532
36570: POP
36571: POP
// end ;
36572: PPOPN 2
36574: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
36575: LD_EXP 64
36579: PUSH
36580: LD_EXP 109
36584: AND
36585: IFFALSE 36768
36587: GO 36589
36589: DISABLE
36590: LD_INT 0
36592: PPUSH
36593: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36594: LD_ADDR_VAR 0 2
36598: PUSH
36599: LD_INT 22
36601: PUSH
36602: LD_OWVAR 2
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PPUSH
36611: CALL_OW 69
36615: ST_TO_ADDR
// if not tmp then
36616: LD_VAR 0 2
36620: NOT
36621: IFFALSE 36625
// exit ;
36623: GO 36768
// for i := 1 to 2 do
36625: LD_ADDR_VAR 0 1
36629: PUSH
36630: DOUBLE
36631: LD_INT 1
36633: DEC
36634: ST_TO_ADDR
36635: LD_INT 2
36637: PUSH
36638: FOR_TO
36639: IFFALSE 36766
// begin uc_side := your_side ;
36641: LD_ADDR_OWVAR 20
36645: PUSH
36646: LD_OWVAR 2
36650: ST_TO_ADDR
// uc_nation := nation_american ;
36651: LD_ADDR_OWVAR 21
36655: PUSH
36656: LD_INT 1
36658: ST_TO_ADDR
// vc_chassis := us_morphling ;
36659: LD_ADDR_OWVAR 37
36663: PUSH
36664: LD_INT 5
36666: ST_TO_ADDR
// vc_engine := engine_siberite ;
36667: LD_ADDR_OWVAR 39
36671: PUSH
36672: LD_INT 3
36674: ST_TO_ADDR
// vc_control := control_computer ;
36675: LD_ADDR_OWVAR 38
36679: PUSH
36680: LD_INT 3
36682: ST_TO_ADDR
// vc_weapon := us_double_laser ;
36683: LD_ADDR_OWVAR 40
36687: PUSH
36688: LD_INT 10
36690: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
36691: LD_VAR 0 2
36695: PUSH
36696: LD_INT 1
36698: ARRAY
36699: PPUSH
36700: CALL_OW 310
36704: NOT
36705: IFFALSE 36752
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
36707: CALL_OW 45
36711: PPUSH
36712: LD_VAR 0 2
36716: PUSH
36717: LD_INT 1
36719: ARRAY
36720: PPUSH
36721: CALL_OW 250
36725: PPUSH
36726: LD_VAR 0 2
36730: PUSH
36731: LD_INT 1
36733: ARRAY
36734: PPUSH
36735: CALL_OW 251
36739: PPUSH
36740: LD_INT 12
36742: PPUSH
36743: LD_INT 1
36745: PPUSH
36746: CALL_OW 50
36750: GO 36764
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
36752: CALL_OW 45
36756: PPUSH
36757: LD_INT 1
36759: PPUSH
36760: CALL_OW 51
// end ;
36764: GO 36638
36766: POP
36767: POP
// end ;
36768: PPOPN 2
36770: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
36771: LD_EXP 64
36775: PUSH
36776: LD_EXP 110
36780: AND
36781: IFFALSE 37003
36783: GO 36785
36785: DISABLE
36786: LD_INT 0
36788: PPUSH
36789: PPUSH
36790: PPUSH
36791: PPUSH
36792: PPUSH
36793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36794: LD_ADDR_VAR 0 6
36798: PUSH
36799: LD_INT 22
36801: PUSH
36802: LD_OWVAR 2
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 21
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: LD_INT 23
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: PPUSH
36843: CALL_OW 69
36847: ST_TO_ADDR
// if not tmp then
36848: LD_VAR 0 6
36852: NOT
36853: IFFALSE 36857
// exit ;
36855: GO 37003
// s1 := rand ( 1 , 4 ) ;
36857: LD_ADDR_VAR 0 2
36861: PUSH
36862: LD_INT 1
36864: PPUSH
36865: LD_INT 4
36867: PPUSH
36868: CALL_OW 12
36872: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
36873: LD_ADDR_VAR 0 4
36877: PUSH
36878: LD_VAR 0 6
36882: PUSH
36883: LD_INT 1
36885: ARRAY
36886: PPUSH
36887: LD_VAR 0 2
36891: PPUSH
36892: CALL_OW 259
36896: ST_TO_ADDR
// if s1 = 1 then
36897: LD_VAR 0 2
36901: PUSH
36902: LD_INT 1
36904: EQUAL
36905: IFFALSE 36925
// s2 := rand ( 2 , 4 ) else
36907: LD_ADDR_VAR 0 3
36911: PUSH
36912: LD_INT 2
36914: PPUSH
36915: LD_INT 4
36917: PPUSH
36918: CALL_OW 12
36922: ST_TO_ADDR
36923: GO 36933
// s2 := 1 ;
36925: LD_ADDR_VAR 0 3
36929: PUSH
36930: LD_INT 1
36932: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
36933: LD_ADDR_VAR 0 5
36937: PUSH
36938: LD_VAR 0 6
36942: PUSH
36943: LD_INT 1
36945: ARRAY
36946: PPUSH
36947: LD_VAR 0 3
36951: PPUSH
36952: CALL_OW 259
36956: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
36957: LD_VAR 0 6
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: LD_VAR 0 2
36970: PPUSH
36971: LD_VAR 0 5
36975: PPUSH
36976: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
36980: LD_VAR 0 6
36984: PUSH
36985: LD_INT 1
36987: ARRAY
36988: PPUSH
36989: LD_VAR 0 3
36993: PPUSH
36994: LD_VAR 0 4
36998: PPUSH
36999: CALL_OW 237
// end ;
37003: PPOPN 6
37005: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37006: LD_EXP 64
37010: PUSH
37011: LD_EXP 111
37015: AND
37016: IFFALSE 37095
37018: GO 37020
37020: DISABLE
37021: LD_INT 0
37023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37024: LD_ADDR_VAR 0 1
37028: PUSH
37029: LD_INT 22
37031: PUSH
37032: LD_OWVAR 2
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 30
37043: PUSH
37044: LD_INT 3
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PPUSH
37055: CALL_OW 69
37059: ST_TO_ADDR
// if not tmp then
37060: LD_VAR 0 1
37064: NOT
37065: IFFALSE 37069
// exit ;
37067: GO 37095
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37069: LD_VAR 0 1
37073: PUSH
37074: LD_INT 1
37076: PPUSH
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 12
37086: ARRAY
37087: PPUSH
37088: LD_INT 1
37090: PPUSH
37091: CALL_OW 234
// end ;
37095: PPOPN 1
37097: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
37098: LD_EXP 64
37102: PUSH
37103: LD_EXP 112
37107: AND
37108: IFFALSE 37220
37110: GO 37112
37112: DISABLE
37113: LD_INT 0
37115: PPUSH
37116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
37117: LD_ADDR_VAR 0 2
37121: PUSH
37122: LD_INT 22
37124: PUSH
37125: LD_OWVAR 2
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: LD_INT 30
37139: PUSH
37140: LD_INT 27
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 30
37149: PUSH
37150: LD_INT 26
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 30
37159: PUSH
37160: LD_INT 28
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PPUSH
37177: CALL_OW 69
37181: ST_TO_ADDR
// if not tmp then
37182: LD_VAR 0 2
37186: NOT
37187: IFFALSE 37191
// exit ;
37189: GO 37220
// for i in tmp do
37191: LD_ADDR_VAR 0 1
37195: PUSH
37196: LD_VAR 0 2
37200: PUSH
37201: FOR_IN
37202: IFFALSE 37218
// SetLives ( i , 1 ) ;
37204: LD_VAR 0 1
37208: PPUSH
37209: LD_INT 1
37211: PPUSH
37212: CALL_OW 234
37216: GO 37201
37218: POP
37219: POP
// end ;
37220: PPOPN 2
37222: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
37223: LD_EXP 64
37227: PUSH
37228: LD_EXP 113
37232: AND
37233: IFFALSE 37507
37235: GO 37237
37237: DISABLE
37238: LD_INT 0
37240: PPUSH
37241: PPUSH
37242: PPUSH
// begin i := rand ( 1 , 7 ) ;
37243: LD_ADDR_VAR 0 1
37247: PUSH
37248: LD_INT 1
37250: PPUSH
37251: LD_INT 7
37253: PPUSH
37254: CALL_OW 12
37258: ST_TO_ADDR
// case i of 1 :
37259: LD_VAR 0 1
37263: PUSH
37264: LD_INT 1
37266: DOUBLE
37267: EQUAL
37268: IFTRUE 37272
37270: GO 37282
37272: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
37273: LD_STRING earthquake(getX(game), 0, 32)
37275: PPUSH
37276: CALL_OW 559
37280: GO 37507
37282: LD_INT 2
37284: DOUBLE
37285: EQUAL
37286: IFTRUE 37290
37288: GO 37304
37290: POP
// begin ToLua ( displayStucuk(); ) ;
37291: LD_STRING displayStucuk();
37293: PPUSH
37294: CALL_OW 559
// ResetFog ;
37298: CALL_OW 335
// end ; 3 :
37302: GO 37507
37304: LD_INT 3
37306: DOUBLE
37307: EQUAL
37308: IFTRUE 37312
37310: GO 37416
37312: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37313: LD_ADDR_VAR 0 2
37317: PUSH
37318: LD_INT 22
37320: PUSH
37321: LD_OWVAR 2
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 25
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PPUSH
37344: CALL_OW 69
37348: ST_TO_ADDR
// if not tmp then
37349: LD_VAR 0 2
37353: NOT
37354: IFFALSE 37358
// exit ;
37356: GO 37507
// un := tmp [ rand ( 1 , tmp ) ] ;
37358: LD_ADDR_VAR 0 3
37362: PUSH
37363: LD_VAR 0 2
37367: PUSH
37368: LD_INT 1
37370: PPUSH
37371: LD_VAR 0 2
37375: PPUSH
37376: CALL_OW 12
37380: ARRAY
37381: ST_TO_ADDR
// if Crawls ( un ) then
37382: LD_VAR 0 3
37386: PPUSH
37387: CALL_OW 318
37391: IFFALSE 37402
// ComWalk ( un ) ;
37393: LD_VAR 0 3
37397: PPUSH
37398: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37402: LD_VAR 0 3
37406: PPUSH
37407: LD_INT 8
37409: PPUSH
37410: CALL_OW 336
// end ; 4 :
37414: GO 37507
37416: LD_INT 4
37418: DOUBLE
37419: EQUAL
37420: IFTRUE 37424
37422: GO 37485
37424: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37425: LD_ADDR_VAR 0 2
37429: PUSH
37430: LD_INT 22
37432: PUSH
37433: LD_OWVAR 2
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 30
37444: PUSH
37445: LD_INT 29
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PPUSH
37456: CALL_OW 69
37460: ST_TO_ADDR
// if not tmp then
37461: LD_VAR 0 2
37465: NOT
37466: IFFALSE 37470
// exit ;
37468: GO 37507
// DestroyUnit ( tmp [ 1 ] ) ;
37470: LD_VAR 0 2
37474: PUSH
37475: LD_INT 1
37477: ARRAY
37478: PPUSH
37479: CALL_OW 65
// end ; 5 .. 7 :
37483: GO 37507
37485: LD_INT 5
37487: DOUBLE
37488: GREATEREQUAL
37489: IFFALSE 37497
37491: LD_INT 7
37493: DOUBLE
37494: LESSEQUAL
37495: IFTRUE 37499
37497: GO 37506
37499: POP
// StreamSibBomb ; end ;
37500: CALL 33757 0 0
37504: GO 37507
37506: POP
// end ;
37507: PPOPN 3
37509: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
37510: LD_EXP 64
37514: PUSH
37515: LD_EXP 114
37519: AND
37520: IFFALSE 37676
37522: GO 37524
37524: DISABLE
37525: LD_INT 0
37527: PPUSH
37528: PPUSH
37529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
37530: LD_ADDR_VAR 0 2
37534: PUSH
37535: LD_INT 81
37537: PUSH
37538: LD_OWVAR 2
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: LD_INT 21
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 21
37562: PUSH
37563: LD_INT 2
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PPUSH
37579: CALL_OW 69
37583: ST_TO_ADDR
// if not tmp then
37584: LD_VAR 0 2
37588: NOT
37589: IFFALSE 37593
// exit ;
37591: GO 37676
// p := 0 ;
37593: LD_ADDR_VAR 0 3
37597: PUSH
37598: LD_INT 0
37600: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37601: LD_INT 35
37603: PPUSH
37604: CALL_OW 67
// p := p + 1 ;
37608: LD_ADDR_VAR 0 3
37612: PUSH
37613: LD_VAR 0 3
37617: PUSH
37618: LD_INT 1
37620: PLUS
37621: ST_TO_ADDR
// for i in tmp do
37622: LD_ADDR_VAR 0 1
37626: PUSH
37627: LD_VAR 0 2
37631: PUSH
37632: FOR_IN
37633: IFFALSE 37664
// if GetLives ( i ) < 1000 then
37635: LD_VAR 0 1
37639: PPUSH
37640: CALL_OW 256
37644: PUSH
37645: LD_INT 1000
37647: LESS
37648: IFFALSE 37662
// SetLives ( i , 1000 ) ;
37650: LD_VAR 0 1
37654: PPUSH
37655: LD_INT 1000
37657: PPUSH
37658: CALL_OW 234
37662: GO 37632
37664: POP
37665: POP
// until p > 20 ;
37666: LD_VAR 0 3
37670: PUSH
37671: LD_INT 20
37673: GREATER
37674: IFFALSE 37601
// end ;
37676: PPOPN 3
37678: END
// every 0 0$1 trigger StreamModeActive and sTime do
37679: LD_EXP 64
37683: PUSH
37684: LD_EXP 115
37688: AND
37689: IFFALSE 37724
37691: GO 37693
37693: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
37694: LD_INT 28
37696: PPUSH
37697: LD_OWVAR 2
37701: PPUSH
37702: LD_INT 2
37704: PPUSH
37705: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
37709: LD_INT 30
37711: PPUSH
37712: LD_OWVAR 2
37716: PPUSH
37717: LD_INT 2
37719: PPUSH
37720: CALL_OW 322
// end ;
37724: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
37725: LD_EXP 64
37729: PUSH
37730: LD_EXP 116
37734: AND
37735: IFFALSE 37856
37737: GO 37739
37739: DISABLE
37740: LD_INT 0
37742: PPUSH
37743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37744: LD_ADDR_VAR 0 2
37748: PUSH
37749: LD_INT 22
37751: PUSH
37752: LD_OWVAR 2
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 21
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 3
37773: PUSH
37774: LD_INT 23
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: PPUSH
37793: CALL_OW 69
37797: ST_TO_ADDR
// if not tmp then
37798: LD_VAR 0 2
37802: NOT
37803: IFFALSE 37807
// exit ;
37805: GO 37856
// for i in tmp do
37807: LD_ADDR_VAR 0 1
37811: PUSH
37812: LD_VAR 0 2
37816: PUSH
37817: FOR_IN
37818: IFFALSE 37854
// begin if Crawls ( i ) then
37820: LD_VAR 0 1
37824: PPUSH
37825: CALL_OW 318
37829: IFFALSE 37840
// ComWalk ( i ) ;
37831: LD_VAR 0 1
37835: PPUSH
37836: CALL_OW 138
// SetClass ( i , 2 ) ;
37840: LD_VAR 0 1
37844: PPUSH
37845: LD_INT 2
37847: PPUSH
37848: CALL_OW 336
// end ;
37852: GO 37817
37854: POP
37855: POP
// end ;
37856: PPOPN 2
37858: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
37859: LD_EXP 64
37863: PUSH
37864: LD_EXP 117
37868: AND
37869: IFFALSE 38150
37871: GO 37873
37873: DISABLE
37874: LD_INT 0
37876: PPUSH
37877: PPUSH
37878: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
37879: LD_OWVAR 2
37883: PPUSH
37884: LD_INT 9
37886: PPUSH
37887: LD_INT 1
37889: PPUSH
37890: LD_INT 1
37892: PPUSH
37893: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
37897: LD_INT 9
37899: PPUSH
37900: LD_OWVAR 2
37904: PPUSH
37905: CALL_OW 343
// uc_side := 9 ;
37909: LD_ADDR_OWVAR 20
37913: PUSH
37914: LD_INT 9
37916: ST_TO_ADDR
// uc_nation := 2 ;
37917: LD_ADDR_OWVAR 21
37921: PUSH
37922: LD_INT 2
37924: ST_TO_ADDR
// hc_name := Dark Warrior ;
37925: LD_ADDR_OWVAR 26
37929: PUSH
37930: LD_STRING Dark Warrior
37932: ST_TO_ADDR
// hc_gallery :=  ;
37933: LD_ADDR_OWVAR 33
37937: PUSH
37938: LD_STRING 
37940: ST_TO_ADDR
// hc_noskilllimit := true ;
37941: LD_ADDR_OWVAR 76
37945: PUSH
37946: LD_INT 1
37948: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
37949: LD_ADDR_OWVAR 31
37953: PUSH
37954: LD_INT 30
37956: PUSH
37957: LD_INT 30
37959: PUSH
37960: LD_INT 30
37962: PUSH
37963: LD_INT 30
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: ST_TO_ADDR
// un := CreateHuman ;
37972: LD_ADDR_VAR 0 3
37976: PUSH
37977: CALL_OW 44
37981: ST_TO_ADDR
// hc_noskilllimit := false ;
37982: LD_ADDR_OWVAR 76
37986: PUSH
37987: LD_INT 0
37989: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37990: LD_VAR 0 3
37994: PPUSH
37995: LD_INT 1
37997: PPUSH
37998: CALL_OW 51
// p := 0 ;
38002: LD_ADDR_VAR 0 2
38006: PUSH
38007: LD_INT 0
38009: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38010: LD_INT 35
38012: PPUSH
38013: CALL_OW 67
// p := p + 1 ;
38017: LD_ADDR_VAR 0 2
38021: PUSH
38022: LD_VAR 0 2
38026: PUSH
38027: LD_INT 1
38029: PLUS
38030: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38031: LD_VAR 0 3
38035: PPUSH
38036: CALL_OW 256
38040: PUSH
38041: LD_INT 1000
38043: LESS
38044: IFFALSE 38058
// SetLives ( un , 1000 ) ;
38046: LD_VAR 0 3
38050: PPUSH
38051: LD_INT 1000
38053: PPUSH
38054: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38058: LD_VAR 0 3
38062: PPUSH
38063: LD_INT 81
38065: PUSH
38066: LD_OWVAR 2
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 91
38077: PUSH
38078: LD_VAR 0 3
38082: PUSH
38083: LD_INT 30
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: LIST
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PPUSH
38095: CALL_OW 69
38099: PPUSH
38100: LD_VAR 0 3
38104: PPUSH
38105: CALL_OW 74
38109: PPUSH
38110: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
38114: LD_VAR 0 2
38118: PUSH
38119: LD_INT 60
38121: GREATER
38122: PUSH
38123: LD_VAR 0 3
38127: PPUSH
38128: CALL_OW 301
38132: OR
38133: IFFALSE 38010
// if un then
38135: LD_VAR 0 3
38139: IFFALSE 38150
// RemoveUnit ( un ) ;
38141: LD_VAR 0 3
38145: PPUSH
38146: CALL_OW 64
// end ;
38150: PPOPN 3
38152: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
38153: LD_INT 0
38155: PPUSH
// case cmd of 301 :
38156: LD_VAR 0 1
38160: PUSH
38161: LD_INT 301
38163: DOUBLE
38164: EQUAL
38165: IFTRUE 38169
38167: GO 38201
38169: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
38170: LD_VAR 0 6
38174: PPUSH
38175: LD_VAR 0 7
38179: PPUSH
38180: LD_VAR 0 8
38184: PPUSH
38185: LD_VAR 0 4
38189: PPUSH
38190: LD_VAR 0 5
38194: PPUSH
38195: CALL 39402 0 5
38199: GO 38322
38201: LD_INT 302
38203: DOUBLE
38204: EQUAL
38205: IFTRUE 38209
38207: GO 38246
38209: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
38210: LD_VAR 0 6
38214: PPUSH
38215: LD_VAR 0 7
38219: PPUSH
38220: LD_VAR 0 8
38224: PPUSH
38225: LD_VAR 0 9
38229: PPUSH
38230: LD_VAR 0 4
38234: PPUSH
38235: LD_VAR 0 5
38239: PPUSH
38240: CALL 39493 0 6
38244: GO 38322
38246: LD_INT 303
38248: DOUBLE
38249: EQUAL
38250: IFTRUE 38254
38252: GO 38291
38254: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
38255: LD_VAR 0 6
38259: PPUSH
38260: LD_VAR 0 7
38264: PPUSH
38265: LD_VAR 0 8
38269: PPUSH
38270: LD_VAR 0 9
38274: PPUSH
38275: LD_VAR 0 4
38279: PPUSH
38280: LD_VAR 0 5
38284: PPUSH
38285: CALL 38327 0 6
38289: GO 38322
38291: LD_INT 304
38293: DOUBLE
38294: EQUAL
38295: IFTRUE 38299
38297: GO 38321
38299: POP
// hHackTeleport ( unit , x , y ) ; end ;
38300: LD_VAR 0 2
38304: PPUSH
38305: LD_VAR 0 4
38309: PPUSH
38310: LD_VAR 0 5
38314: PPUSH
38315: CALL 40086 0 3
38319: GO 38322
38321: POP
// end ;
38322: LD_VAR 0 12
38326: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
38327: LD_INT 0
38329: PPUSH
38330: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
38331: LD_VAR 0 1
38335: PUSH
38336: LD_INT 1
38338: LESS
38339: PUSH
38340: LD_VAR 0 1
38344: PUSH
38345: LD_INT 3
38347: GREATER
38348: OR
38349: PUSH
38350: LD_VAR 0 5
38354: PPUSH
38355: LD_VAR 0 6
38359: PPUSH
38360: CALL_OW 428
38364: OR
38365: IFFALSE 38369
// exit ;
38367: GO 39089
// uc_side := your_side ;
38369: LD_ADDR_OWVAR 20
38373: PUSH
38374: LD_OWVAR 2
38378: ST_TO_ADDR
// uc_nation := nation ;
38379: LD_ADDR_OWVAR 21
38383: PUSH
38384: LD_VAR 0 1
38388: ST_TO_ADDR
// bc_level = 1 ;
38389: LD_ADDR_OWVAR 43
38393: PUSH
38394: LD_INT 1
38396: ST_TO_ADDR
// case btype of 1 :
38397: LD_VAR 0 2
38401: PUSH
38402: LD_INT 1
38404: DOUBLE
38405: EQUAL
38406: IFTRUE 38410
38408: GO 38421
38410: POP
// bc_type := b_depot ; 2 :
38411: LD_ADDR_OWVAR 42
38415: PUSH
38416: LD_INT 0
38418: ST_TO_ADDR
38419: GO 39033
38421: LD_INT 2
38423: DOUBLE
38424: EQUAL
38425: IFTRUE 38429
38427: GO 38440
38429: POP
// bc_type := b_warehouse ; 3 :
38430: LD_ADDR_OWVAR 42
38434: PUSH
38435: LD_INT 1
38437: ST_TO_ADDR
38438: GO 39033
38440: LD_INT 3
38442: DOUBLE
38443: EQUAL
38444: IFTRUE 38448
38446: GO 38459
38448: POP
// bc_type := b_lab ; 4 .. 9 :
38449: LD_ADDR_OWVAR 42
38453: PUSH
38454: LD_INT 6
38456: ST_TO_ADDR
38457: GO 39033
38459: LD_INT 4
38461: DOUBLE
38462: GREATEREQUAL
38463: IFFALSE 38471
38465: LD_INT 9
38467: DOUBLE
38468: LESSEQUAL
38469: IFTRUE 38473
38471: GO 38525
38473: POP
// begin bc_type := b_lab_half ;
38474: LD_ADDR_OWVAR 42
38478: PUSH
38479: LD_INT 7
38481: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
38482: LD_ADDR_OWVAR 44
38486: PUSH
38487: LD_INT 10
38489: PUSH
38490: LD_INT 11
38492: PUSH
38493: LD_INT 12
38495: PUSH
38496: LD_INT 15
38498: PUSH
38499: LD_INT 14
38501: PUSH
38502: LD_INT 13
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: PUSH
38513: LD_VAR 0 2
38517: PUSH
38518: LD_INT 3
38520: MINUS
38521: ARRAY
38522: ST_TO_ADDR
// end ; 10 .. 13 :
38523: GO 39033
38525: LD_INT 10
38527: DOUBLE
38528: GREATEREQUAL
38529: IFFALSE 38537
38531: LD_INT 13
38533: DOUBLE
38534: LESSEQUAL
38535: IFTRUE 38539
38537: GO 38616
38539: POP
// begin bc_type := b_lab_full ;
38540: LD_ADDR_OWVAR 42
38544: PUSH
38545: LD_INT 8
38547: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
38548: LD_ADDR_OWVAR 44
38552: PUSH
38553: LD_INT 10
38555: PUSH
38556: LD_INT 12
38558: PUSH
38559: LD_INT 14
38561: PUSH
38562: LD_INT 13
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: PUSH
38571: LD_VAR 0 2
38575: PUSH
38576: LD_INT 9
38578: MINUS
38579: ARRAY
38580: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
38581: LD_ADDR_OWVAR 45
38585: PUSH
38586: LD_INT 11
38588: PUSH
38589: LD_INT 15
38591: PUSH
38592: LD_INT 12
38594: PUSH
38595: LD_INT 15
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: PUSH
38604: LD_VAR 0 2
38608: PUSH
38609: LD_INT 9
38611: MINUS
38612: ARRAY
38613: ST_TO_ADDR
// end ; 14 :
38614: GO 39033
38616: LD_INT 14
38618: DOUBLE
38619: EQUAL
38620: IFTRUE 38624
38622: GO 38635
38624: POP
// bc_type := b_workshop ; 15 :
38625: LD_ADDR_OWVAR 42
38629: PUSH
38630: LD_INT 2
38632: ST_TO_ADDR
38633: GO 39033
38635: LD_INT 15
38637: DOUBLE
38638: EQUAL
38639: IFTRUE 38643
38641: GO 38654
38643: POP
// bc_type := b_factory ; 16 :
38644: LD_ADDR_OWVAR 42
38648: PUSH
38649: LD_INT 3
38651: ST_TO_ADDR
38652: GO 39033
38654: LD_INT 16
38656: DOUBLE
38657: EQUAL
38658: IFTRUE 38662
38660: GO 38673
38662: POP
// bc_type := b_ext_gun ; 17 :
38663: LD_ADDR_OWVAR 42
38667: PUSH
38668: LD_INT 17
38670: ST_TO_ADDR
38671: GO 39033
38673: LD_INT 17
38675: DOUBLE
38676: EQUAL
38677: IFTRUE 38681
38679: GO 38709
38681: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
38682: LD_ADDR_OWVAR 42
38686: PUSH
38687: LD_INT 19
38689: PUSH
38690: LD_INT 23
38692: PUSH
38693: LD_INT 19
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: LIST
38700: PUSH
38701: LD_VAR 0 1
38705: ARRAY
38706: ST_TO_ADDR
38707: GO 39033
38709: LD_INT 18
38711: DOUBLE
38712: EQUAL
38713: IFTRUE 38717
38715: GO 38728
38717: POP
// bc_type := b_ext_radar ; 19 :
38718: LD_ADDR_OWVAR 42
38722: PUSH
38723: LD_INT 20
38725: ST_TO_ADDR
38726: GO 39033
38728: LD_INT 19
38730: DOUBLE
38731: EQUAL
38732: IFTRUE 38736
38734: GO 38747
38736: POP
// bc_type := b_ext_radio ; 20 :
38737: LD_ADDR_OWVAR 42
38741: PUSH
38742: LD_INT 22
38744: ST_TO_ADDR
38745: GO 39033
38747: LD_INT 20
38749: DOUBLE
38750: EQUAL
38751: IFTRUE 38755
38753: GO 38766
38755: POP
// bc_type := b_ext_siberium ; 21 :
38756: LD_ADDR_OWVAR 42
38760: PUSH
38761: LD_INT 21
38763: ST_TO_ADDR
38764: GO 39033
38766: LD_INT 21
38768: DOUBLE
38769: EQUAL
38770: IFTRUE 38774
38772: GO 38785
38774: POP
// bc_type := b_ext_computer ; 22 :
38775: LD_ADDR_OWVAR 42
38779: PUSH
38780: LD_INT 24
38782: ST_TO_ADDR
38783: GO 39033
38785: LD_INT 22
38787: DOUBLE
38788: EQUAL
38789: IFTRUE 38793
38791: GO 38804
38793: POP
// bc_type := b_ext_track ; 23 :
38794: LD_ADDR_OWVAR 42
38798: PUSH
38799: LD_INT 16
38801: ST_TO_ADDR
38802: GO 39033
38804: LD_INT 23
38806: DOUBLE
38807: EQUAL
38808: IFTRUE 38812
38810: GO 38823
38812: POP
// bc_type := b_ext_laser ; 24 :
38813: LD_ADDR_OWVAR 42
38817: PUSH
38818: LD_INT 25
38820: ST_TO_ADDR
38821: GO 39033
38823: LD_INT 24
38825: DOUBLE
38826: EQUAL
38827: IFTRUE 38831
38829: GO 38842
38831: POP
// bc_type := b_control_tower ; 25 :
38832: LD_ADDR_OWVAR 42
38836: PUSH
38837: LD_INT 36
38839: ST_TO_ADDR
38840: GO 39033
38842: LD_INT 25
38844: DOUBLE
38845: EQUAL
38846: IFTRUE 38850
38848: GO 38861
38850: POP
// bc_type := b_breastwork ; 26 :
38851: LD_ADDR_OWVAR 42
38855: PUSH
38856: LD_INT 31
38858: ST_TO_ADDR
38859: GO 39033
38861: LD_INT 26
38863: DOUBLE
38864: EQUAL
38865: IFTRUE 38869
38867: GO 38880
38869: POP
// bc_type := b_bunker ; 27 :
38870: LD_ADDR_OWVAR 42
38874: PUSH
38875: LD_INT 32
38877: ST_TO_ADDR
38878: GO 39033
38880: LD_INT 27
38882: DOUBLE
38883: EQUAL
38884: IFTRUE 38888
38886: GO 38899
38888: POP
// bc_type := b_turret ; 28 :
38889: LD_ADDR_OWVAR 42
38893: PUSH
38894: LD_INT 33
38896: ST_TO_ADDR
38897: GO 39033
38899: LD_INT 28
38901: DOUBLE
38902: EQUAL
38903: IFTRUE 38907
38905: GO 38918
38907: POP
// bc_type := b_armoury ; 29 :
38908: LD_ADDR_OWVAR 42
38912: PUSH
38913: LD_INT 4
38915: ST_TO_ADDR
38916: GO 39033
38918: LD_INT 29
38920: DOUBLE
38921: EQUAL
38922: IFTRUE 38926
38924: GO 38937
38926: POP
// bc_type := b_barracks ; 30 :
38927: LD_ADDR_OWVAR 42
38931: PUSH
38932: LD_INT 5
38934: ST_TO_ADDR
38935: GO 39033
38937: LD_INT 30
38939: DOUBLE
38940: EQUAL
38941: IFTRUE 38945
38943: GO 38956
38945: POP
// bc_type := b_solar_power ; 31 :
38946: LD_ADDR_OWVAR 42
38950: PUSH
38951: LD_INT 27
38953: ST_TO_ADDR
38954: GO 39033
38956: LD_INT 31
38958: DOUBLE
38959: EQUAL
38960: IFTRUE 38964
38962: GO 38975
38964: POP
// bc_type := b_oil_power ; 32 :
38965: LD_ADDR_OWVAR 42
38969: PUSH
38970: LD_INT 26
38972: ST_TO_ADDR
38973: GO 39033
38975: LD_INT 32
38977: DOUBLE
38978: EQUAL
38979: IFTRUE 38983
38981: GO 38994
38983: POP
// bc_type := b_siberite_power ; 33 :
38984: LD_ADDR_OWVAR 42
38988: PUSH
38989: LD_INT 28
38991: ST_TO_ADDR
38992: GO 39033
38994: LD_INT 33
38996: DOUBLE
38997: EQUAL
38998: IFTRUE 39002
39000: GO 39013
39002: POP
// bc_type := b_oil_mine ; 34 :
39003: LD_ADDR_OWVAR 42
39007: PUSH
39008: LD_INT 29
39010: ST_TO_ADDR
39011: GO 39033
39013: LD_INT 34
39015: DOUBLE
39016: EQUAL
39017: IFTRUE 39021
39019: GO 39032
39021: POP
// bc_type := b_siberite_mine ; end ;
39022: LD_ADDR_OWVAR 42
39026: PUSH
39027: LD_INT 30
39029: ST_TO_ADDR
39030: GO 39033
39032: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39033: LD_ADDR_VAR 0 8
39037: PUSH
39038: LD_VAR 0 5
39042: PPUSH
39043: LD_VAR 0 6
39047: PPUSH
39048: LD_VAR 0 3
39052: PPUSH
39053: CALL_OW 47
39057: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39058: LD_OWVAR 42
39062: PUSH
39063: LD_INT 32
39065: PUSH
39066: LD_INT 33
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: IN
39073: IFFALSE 39089
// PlaceWeaponTurret ( b , weapon ) ;
39075: LD_VAR 0 8
39079: PPUSH
39080: LD_VAR 0 4
39084: PPUSH
39085: CALL_OW 431
// end ;
39089: LD_VAR 0 7
39093: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
39094: LD_INT 0
39096: PPUSH
39097: PPUSH
39098: PPUSH
39099: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39100: LD_ADDR_VAR 0 4
39104: PUSH
39105: LD_INT 22
39107: PUSH
39108: LD_OWVAR 2
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 2
39119: PUSH
39120: LD_INT 30
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 30
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PPUSH
39149: CALL_OW 69
39153: ST_TO_ADDR
// if not tmp then
39154: LD_VAR 0 4
39158: NOT
39159: IFFALSE 39163
// exit ;
39161: GO 39222
// for i in tmp do
39163: LD_ADDR_VAR 0 2
39167: PUSH
39168: LD_VAR 0 4
39172: PUSH
39173: FOR_IN
39174: IFFALSE 39220
// for j = 1 to 3 do
39176: LD_ADDR_VAR 0 3
39180: PUSH
39181: DOUBLE
39182: LD_INT 1
39184: DEC
39185: ST_TO_ADDR
39186: LD_INT 3
39188: PUSH
39189: FOR_TO
39190: IFFALSE 39216
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
39192: LD_VAR 0 2
39196: PPUSH
39197: CALL_OW 274
39201: PPUSH
39202: LD_VAR 0 3
39206: PPUSH
39207: LD_INT 99999
39209: PPUSH
39210: CALL_OW 277
39214: GO 39189
39216: POP
39217: POP
39218: GO 39173
39220: POP
39221: POP
// end ;
39222: LD_VAR 0 1
39226: RET
// export function hHackSetLevel10 ; var i , j ; begin
39227: LD_INT 0
39229: PPUSH
39230: PPUSH
39231: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39232: LD_ADDR_VAR 0 2
39236: PUSH
39237: LD_INT 21
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PPUSH
39247: CALL_OW 69
39251: PUSH
39252: FOR_IN
39253: IFFALSE 39305
// if IsSelected ( i ) then
39255: LD_VAR 0 2
39259: PPUSH
39260: CALL_OW 306
39264: IFFALSE 39303
// begin for j := 1 to 4 do
39266: LD_ADDR_VAR 0 3
39270: PUSH
39271: DOUBLE
39272: LD_INT 1
39274: DEC
39275: ST_TO_ADDR
39276: LD_INT 4
39278: PUSH
39279: FOR_TO
39280: IFFALSE 39301
// SetSkill ( i , j , 10 ) ;
39282: LD_VAR 0 2
39286: PPUSH
39287: LD_VAR 0 3
39291: PPUSH
39292: LD_INT 10
39294: PPUSH
39295: CALL_OW 237
39299: GO 39279
39301: POP
39302: POP
// end ;
39303: GO 39252
39305: POP
39306: POP
// end ;
39307: LD_VAR 0 1
39311: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
39312: LD_INT 0
39314: PPUSH
39315: PPUSH
39316: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
39317: LD_ADDR_VAR 0 2
39321: PUSH
39322: LD_INT 22
39324: PUSH
39325: LD_OWVAR 2
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 21
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PPUSH
39348: CALL_OW 69
39352: PUSH
39353: FOR_IN
39354: IFFALSE 39395
// begin for j := 1 to 4 do
39356: LD_ADDR_VAR 0 3
39360: PUSH
39361: DOUBLE
39362: LD_INT 1
39364: DEC
39365: ST_TO_ADDR
39366: LD_INT 4
39368: PUSH
39369: FOR_TO
39370: IFFALSE 39391
// SetSkill ( i , j , 10 ) ;
39372: LD_VAR 0 2
39376: PPUSH
39377: LD_VAR 0 3
39381: PPUSH
39382: LD_INT 10
39384: PPUSH
39385: CALL_OW 237
39389: GO 39369
39391: POP
39392: POP
// end ;
39393: GO 39353
39395: POP
39396: POP
// end ;
39397: LD_VAR 0 1
39401: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
39402: LD_INT 0
39404: PPUSH
// uc_side := your_side ;
39405: LD_ADDR_OWVAR 20
39409: PUSH
39410: LD_OWVAR 2
39414: ST_TO_ADDR
// uc_nation := nation ;
39415: LD_ADDR_OWVAR 21
39419: PUSH
39420: LD_VAR 0 1
39424: ST_TO_ADDR
// InitHc ;
39425: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
39429: LD_INT 0
39431: PPUSH
39432: LD_VAR 0 2
39436: PPUSH
39437: LD_VAR 0 3
39441: PPUSH
39442: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
39446: LD_VAR 0 4
39450: PPUSH
39451: LD_VAR 0 5
39455: PPUSH
39456: CALL_OW 428
39460: PUSH
39461: LD_INT 0
39463: EQUAL
39464: IFFALSE 39488
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
39466: CALL_OW 44
39470: PPUSH
39471: LD_VAR 0 4
39475: PPUSH
39476: LD_VAR 0 5
39480: PPUSH
39481: LD_INT 1
39483: PPUSH
39484: CALL_OW 48
// end ;
39488: LD_VAR 0 6
39492: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
39493: LD_INT 0
39495: PPUSH
39496: PPUSH
// uc_side := your_side ;
39497: LD_ADDR_OWVAR 20
39501: PUSH
39502: LD_OWVAR 2
39506: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
39507: LD_VAR 0 1
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 2
39517: PUSH
39518: LD_INT 3
39520: PUSH
39521: LD_INT 4
39523: PUSH
39524: LD_INT 5
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: IN
39534: IFFALSE 39546
// uc_nation := nation_american else
39536: LD_ADDR_OWVAR 21
39540: PUSH
39541: LD_INT 1
39543: ST_TO_ADDR
39544: GO 39589
// if chassis in [ 11 , 12 , 13 , 14 ] then
39546: LD_VAR 0 1
39550: PUSH
39551: LD_INT 11
39553: PUSH
39554: LD_INT 12
39556: PUSH
39557: LD_INT 13
39559: PUSH
39560: LD_INT 14
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: IN
39569: IFFALSE 39581
// uc_nation := nation_arabian else
39571: LD_ADDR_OWVAR 21
39575: PUSH
39576: LD_INT 2
39578: ST_TO_ADDR
39579: GO 39589
// uc_nation := nation_russian ;
39581: LD_ADDR_OWVAR 21
39585: PUSH
39586: LD_INT 3
39588: ST_TO_ADDR
// vc_chassis := chassis ;
39589: LD_ADDR_OWVAR 37
39593: PUSH
39594: LD_VAR 0 1
39598: ST_TO_ADDR
// vc_engine := engine ;
39599: LD_ADDR_OWVAR 39
39603: PUSH
39604: LD_VAR 0 2
39608: ST_TO_ADDR
// vc_control := control ;
39609: LD_ADDR_OWVAR 38
39613: PUSH
39614: LD_VAR 0 3
39618: ST_TO_ADDR
// vc_weapon := weapon ;
39619: LD_ADDR_OWVAR 40
39623: PUSH
39624: LD_VAR 0 4
39628: ST_TO_ADDR
// un := CreateVehicle ;
39629: LD_ADDR_VAR 0 8
39633: PUSH
39634: CALL_OW 45
39638: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
39639: LD_VAR 0 8
39643: PPUSH
39644: LD_INT 0
39646: PPUSH
39647: LD_INT 5
39649: PPUSH
39650: CALL_OW 12
39654: PPUSH
39655: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
39659: LD_VAR 0 8
39663: PPUSH
39664: LD_VAR 0 5
39668: PPUSH
39669: LD_VAR 0 6
39673: PPUSH
39674: LD_INT 1
39676: PPUSH
39677: CALL_OW 48
// end ;
39681: LD_VAR 0 7
39685: RET
// export hInvincible ; every 1 do
39686: GO 39688
39688: DISABLE
// hInvincible := [ ] ;
39689: LD_ADDR_EXP 118
39693: PUSH
39694: EMPTY
39695: ST_TO_ADDR
39696: END
// every 10 do var i ;
39697: GO 39699
39699: DISABLE
39700: LD_INT 0
39702: PPUSH
// begin enable ;
39703: ENABLE
// if not hInvincible then
39704: LD_EXP 118
39708: NOT
39709: IFFALSE 39713
// exit ;
39711: GO 39757
// for i in hInvincible do
39713: LD_ADDR_VAR 0 1
39717: PUSH
39718: LD_EXP 118
39722: PUSH
39723: FOR_IN
39724: IFFALSE 39755
// if GetLives ( i ) < 1000 then
39726: LD_VAR 0 1
39730: PPUSH
39731: CALL_OW 256
39735: PUSH
39736: LD_INT 1000
39738: LESS
39739: IFFALSE 39753
// SetLives ( i , 1000 ) ;
39741: LD_VAR 0 1
39745: PPUSH
39746: LD_INT 1000
39748: PPUSH
39749: CALL_OW 234
39753: GO 39723
39755: POP
39756: POP
// end ;
39757: PPOPN 1
39759: END
// export function hHackInvincible ; var i ; begin
39760: LD_INT 0
39762: PPUSH
39763: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
39764: LD_ADDR_VAR 0 2
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: LD_INT 21
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 21
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: PPUSH
39797: CALL_OW 69
39801: PUSH
39802: FOR_IN
39803: IFFALSE 39864
// if IsSelected ( i ) then
39805: LD_VAR 0 2
39809: PPUSH
39810: CALL_OW 306
39814: IFFALSE 39862
// begin if i in hInvincible then
39816: LD_VAR 0 2
39820: PUSH
39821: LD_EXP 118
39825: IN
39826: IFFALSE 39846
// hInvincible := hInvincible diff i else
39828: LD_ADDR_EXP 118
39832: PUSH
39833: LD_EXP 118
39837: PUSH
39838: LD_VAR 0 2
39842: DIFF
39843: ST_TO_ADDR
39844: GO 39862
// hInvincible := hInvincible union i ;
39846: LD_ADDR_EXP 118
39850: PUSH
39851: LD_EXP 118
39855: PUSH
39856: LD_VAR 0 2
39860: UNION
39861: ST_TO_ADDR
// end ;
39862: GO 39802
39864: POP
39865: POP
// end ;
39866: LD_VAR 0 1
39870: RET
// export function hHackInvisible ; var i , j ; begin
39871: LD_INT 0
39873: PPUSH
39874: PPUSH
39875: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39876: LD_ADDR_VAR 0 2
39880: PUSH
39881: LD_INT 21
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PPUSH
39891: CALL_OW 69
39895: PUSH
39896: FOR_IN
39897: IFFALSE 39921
// if IsSelected ( i ) then
39899: LD_VAR 0 2
39903: PPUSH
39904: CALL_OW 306
39908: IFFALSE 39919
// ComForceInvisible ( i ) ;
39910: LD_VAR 0 2
39914: PPUSH
39915: CALL_OW 496
39919: GO 39896
39921: POP
39922: POP
// end ;
39923: LD_VAR 0 1
39927: RET
// export function hHackChangeYourSide ; begin
39928: LD_INT 0
39930: PPUSH
// if your_side = 8 then
39931: LD_OWVAR 2
39935: PUSH
39936: LD_INT 8
39938: EQUAL
39939: IFFALSE 39951
// your_side := 0 else
39941: LD_ADDR_OWVAR 2
39945: PUSH
39946: LD_INT 0
39948: ST_TO_ADDR
39949: GO 39965
// your_side := your_side + 1 ;
39951: LD_ADDR_OWVAR 2
39955: PUSH
39956: LD_OWVAR 2
39960: PUSH
39961: LD_INT 1
39963: PLUS
39964: ST_TO_ADDR
// end ;
39965: LD_VAR 0 1
39969: RET
// export function hHackChangeUnitSide ; var i , j ; begin
39970: LD_INT 0
39972: PPUSH
39973: PPUSH
39974: PPUSH
// for i in all_units do
39975: LD_ADDR_VAR 0 2
39979: PUSH
39980: LD_OWVAR 3
39984: PUSH
39985: FOR_IN
39986: IFFALSE 40064
// if IsSelected ( i ) then
39988: LD_VAR 0 2
39992: PPUSH
39993: CALL_OW 306
39997: IFFALSE 40062
// begin j := GetSide ( i ) ;
39999: LD_ADDR_VAR 0 3
40003: PUSH
40004: LD_VAR 0 2
40008: PPUSH
40009: CALL_OW 255
40013: ST_TO_ADDR
// if j = 8 then
40014: LD_VAR 0 3
40018: PUSH
40019: LD_INT 8
40021: EQUAL
40022: IFFALSE 40034
// j := 0 else
40024: LD_ADDR_VAR 0 3
40028: PUSH
40029: LD_INT 0
40031: ST_TO_ADDR
40032: GO 40048
// j := j + 1 ;
40034: LD_ADDR_VAR 0 3
40038: PUSH
40039: LD_VAR 0 3
40043: PUSH
40044: LD_INT 1
40046: PLUS
40047: ST_TO_ADDR
// SetSide ( i , j ) ;
40048: LD_VAR 0 2
40052: PPUSH
40053: LD_VAR 0 3
40057: PPUSH
40058: CALL_OW 235
// end ;
40062: GO 39985
40064: POP
40065: POP
// end ;
40066: LD_VAR 0 1
40070: RET
// export function hHackFog ; begin
40071: LD_INT 0
40073: PPUSH
// FogOff ( true ) ;
40074: LD_INT 1
40076: PPUSH
40077: CALL_OW 344
// end ;
40081: LD_VAR 0 1
40085: RET
// export function hHackTeleport ( unit , x , y ) ; begin
40086: LD_INT 0
40088: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
40089: LD_VAR 0 1
40093: PPUSH
40094: LD_VAR 0 2
40098: PPUSH
40099: LD_VAR 0 3
40103: PPUSH
40104: LD_INT 1
40106: PPUSH
40107: LD_INT 1
40109: PPUSH
40110: CALL_OW 483
// CenterOnXY ( x , y ) ;
40114: LD_VAR 0 2
40118: PPUSH
40119: LD_VAR 0 3
40123: PPUSH
40124: CALL_OW 84
// end ; end_of_file
40128: LD_VAR 0 4
40132: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
40133: LD_INT 0
40135: PPUSH
40136: PPUSH
40137: PPUSH
40138: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
40139: LD_VAR 0 1
40143: PPUSH
40144: CALL_OW 264
40148: PUSH
40149: LD_EXP 52
40153: EQUAL
40154: IFFALSE 40226
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
40156: LD_INT 68
40158: PPUSH
40159: LD_VAR 0 1
40163: PPUSH
40164: CALL_OW 255
40168: PPUSH
40169: CALL_OW 321
40173: PUSH
40174: LD_INT 2
40176: EQUAL
40177: IFFALSE 40189
// eff := 70 else
40179: LD_ADDR_VAR 0 4
40183: PUSH
40184: LD_INT 70
40186: ST_TO_ADDR
40187: GO 40197
// eff := 30 ;
40189: LD_ADDR_VAR 0 4
40193: PUSH
40194: LD_INT 30
40196: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40197: LD_VAR 0 1
40201: PPUSH
40202: CALL_OW 250
40206: PPUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 251
40216: PPUSH
40217: LD_VAR 0 4
40221: PPUSH
40222: CALL_OW 495
// end ; end ;
40226: LD_VAR 0 2
40230: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40231: LD_INT 0
40233: PPUSH
// end ;
40234: LD_VAR 0 4
40238: RET
// export function SOS_Command ( cmd ) ; begin
40239: LD_INT 0
40241: PPUSH
// end ;
40242: LD_VAR 0 2
40246: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40247: LD_INT 0
40249: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40250: LD_VAR 0 1
40254: PUSH
40255: LD_INT 250
40257: EQUAL
40258: PUSH
40259: LD_VAR 0 2
40263: PPUSH
40264: CALL_OW 264
40268: PUSH
40269: LD_EXP 55
40273: EQUAL
40274: AND
40275: IFFALSE 40296
// MinerPlaceMine ( unit , x , y ) ;
40277: LD_VAR 0 2
40281: PPUSH
40282: LD_VAR 0 4
40286: PPUSH
40287: LD_VAR 0 5
40291: PPUSH
40292: CALL 42637 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40296: LD_VAR 0 1
40300: PUSH
40301: LD_INT 251
40303: EQUAL
40304: PUSH
40305: LD_VAR 0 2
40309: PPUSH
40310: CALL_OW 264
40314: PUSH
40315: LD_EXP 55
40319: EQUAL
40320: AND
40321: IFFALSE 40342
// MinerDetonateMine ( unit , x , y ) ;
40323: LD_VAR 0 2
40327: PPUSH
40328: LD_VAR 0 4
40332: PPUSH
40333: LD_VAR 0 5
40337: PPUSH
40338: CALL 42914 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40342: LD_VAR 0 1
40346: PUSH
40347: LD_INT 252
40349: EQUAL
40350: PUSH
40351: LD_VAR 0 2
40355: PPUSH
40356: CALL_OW 264
40360: PUSH
40361: LD_EXP 55
40365: EQUAL
40366: AND
40367: IFFALSE 40388
// MinerCreateMinefield ( unit , x , y ) ;
40369: LD_VAR 0 2
40373: PPUSH
40374: LD_VAR 0 4
40378: PPUSH
40379: LD_VAR 0 5
40383: PPUSH
40384: CALL 43331 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40388: LD_VAR 0 1
40392: PUSH
40393: LD_INT 253
40395: EQUAL
40396: PUSH
40397: LD_VAR 0 2
40401: PPUSH
40402: CALL_OW 257
40406: PUSH
40407: LD_INT 5
40409: EQUAL
40410: AND
40411: IFFALSE 40432
// ComBinocular ( unit , x , y ) ;
40413: LD_VAR 0 2
40417: PPUSH
40418: LD_VAR 0 4
40422: PPUSH
40423: LD_VAR 0 5
40427: PPUSH
40428: CALL 43702 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40432: LD_VAR 0 1
40436: PUSH
40437: LD_INT 254
40439: EQUAL
40440: PUSH
40441: LD_VAR 0 2
40445: PPUSH
40446: CALL_OW 264
40450: PUSH
40451: LD_EXP 50
40455: EQUAL
40456: AND
40457: PUSH
40458: LD_VAR 0 3
40462: PPUSH
40463: CALL_OW 263
40467: PUSH
40468: LD_INT 3
40470: EQUAL
40471: AND
40472: IFFALSE 40488
// HackDestroyVehicle ( unit , selectedUnit ) ;
40474: LD_VAR 0 2
40478: PPUSH
40479: LD_VAR 0 3
40483: PPUSH
40484: CALL 41997 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40488: LD_VAR 0 1
40492: PUSH
40493: LD_INT 255
40495: EQUAL
40496: PUSH
40497: LD_VAR 0 2
40501: PPUSH
40502: CALL_OW 264
40506: PUSH
40507: LD_INT 14
40509: PUSH
40510: LD_INT 53
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: IN
40517: AND
40518: PUSH
40519: LD_VAR 0 4
40523: PPUSH
40524: LD_VAR 0 5
40528: PPUSH
40529: CALL_OW 488
40533: AND
40534: IFFALSE 40558
// CutTreeXYR ( unit , x , y , 12 ) ;
40536: LD_VAR 0 2
40540: PPUSH
40541: LD_VAR 0 4
40545: PPUSH
40546: LD_VAR 0 5
40550: PPUSH
40551: LD_INT 12
40553: PPUSH
40554: CALL 40563 0 4
// end ;
40558: LD_VAR 0 6
40562: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40563: LD_INT 0
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40574: LD_VAR 0 1
40578: NOT
40579: PUSH
40580: LD_VAR 0 2
40584: PPUSH
40585: LD_VAR 0 3
40589: PPUSH
40590: CALL_OW 488
40594: NOT
40595: OR
40596: PUSH
40597: LD_VAR 0 4
40601: NOT
40602: OR
40603: IFFALSE 40607
// exit ;
40605: GO 40947
// list := [ ] ;
40607: LD_ADDR_VAR 0 13
40611: PUSH
40612: EMPTY
40613: ST_TO_ADDR
// if x - r < 0 then
40614: LD_VAR 0 2
40618: PUSH
40619: LD_VAR 0 4
40623: MINUS
40624: PUSH
40625: LD_INT 0
40627: LESS
40628: IFFALSE 40640
// min_x := 0 else
40630: LD_ADDR_VAR 0 7
40634: PUSH
40635: LD_INT 0
40637: ST_TO_ADDR
40638: GO 40656
// min_x := x - r ;
40640: LD_ADDR_VAR 0 7
40644: PUSH
40645: LD_VAR 0 2
40649: PUSH
40650: LD_VAR 0 4
40654: MINUS
40655: ST_TO_ADDR
// if y - r < 0 then
40656: LD_VAR 0 3
40660: PUSH
40661: LD_VAR 0 4
40665: MINUS
40666: PUSH
40667: LD_INT 0
40669: LESS
40670: IFFALSE 40682
// min_y := 0 else
40672: LD_ADDR_VAR 0 8
40676: PUSH
40677: LD_INT 0
40679: ST_TO_ADDR
40680: GO 40698
// min_y := y - r ;
40682: LD_ADDR_VAR 0 8
40686: PUSH
40687: LD_VAR 0 3
40691: PUSH
40692: LD_VAR 0 4
40696: MINUS
40697: ST_TO_ADDR
// max_x := x + r ;
40698: LD_ADDR_VAR 0 9
40702: PUSH
40703: LD_VAR 0 2
40707: PUSH
40708: LD_VAR 0 4
40712: PLUS
40713: ST_TO_ADDR
// max_y := y + r ;
40714: LD_ADDR_VAR 0 10
40718: PUSH
40719: LD_VAR 0 3
40723: PUSH
40724: LD_VAR 0 4
40728: PLUS
40729: ST_TO_ADDR
// for _x = min_x to max_x do
40730: LD_ADDR_VAR 0 11
40734: PUSH
40735: DOUBLE
40736: LD_VAR 0 7
40740: DEC
40741: ST_TO_ADDR
40742: LD_VAR 0 9
40746: PUSH
40747: FOR_TO
40748: IFFALSE 40865
// for _y = min_y to max_y do
40750: LD_ADDR_VAR 0 12
40754: PUSH
40755: DOUBLE
40756: LD_VAR 0 8
40760: DEC
40761: ST_TO_ADDR
40762: LD_VAR 0 10
40766: PUSH
40767: FOR_TO
40768: IFFALSE 40861
// begin if not ValidHex ( _x , _y ) then
40770: LD_VAR 0 11
40774: PPUSH
40775: LD_VAR 0 12
40779: PPUSH
40780: CALL_OW 488
40784: NOT
40785: IFFALSE 40789
// continue ;
40787: GO 40767
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40789: LD_VAR 0 11
40793: PPUSH
40794: LD_VAR 0 12
40798: PPUSH
40799: CALL_OW 351
40803: PUSH
40804: LD_VAR 0 11
40808: PPUSH
40809: LD_VAR 0 12
40813: PPUSH
40814: CALL_OW 554
40818: AND
40819: IFFALSE 40859
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
40821: LD_ADDR_VAR 0 13
40825: PUSH
40826: LD_VAR 0 13
40830: PPUSH
40831: LD_VAR 0 13
40835: PUSH
40836: LD_INT 1
40838: PLUS
40839: PPUSH
40840: LD_VAR 0 11
40844: PUSH
40845: LD_VAR 0 12
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PPUSH
40854: CALL_OW 2
40858: ST_TO_ADDR
// end ;
40859: GO 40767
40861: POP
40862: POP
40863: GO 40747
40865: POP
40866: POP
// if not list then
40867: LD_VAR 0 13
40871: NOT
40872: IFFALSE 40876
// exit ;
40874: GO 40947
// for i in list do
40876: LD_ADDR_VAR 0 6
40880: PUSH
40881: LD_VAR 0 13
40885: PUSH
40886: FOR_IN
40887: IFFALSE 40945
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
40889: LD_VAR 0 1
40893: PPUSH
40894: LD_STRING M
40896: PUSH
40897: LD_VAR 0 6
40901: PUSH
40902: LD_INT 1
40904: ARRAY
40905: PUSH
40906: LD_VAR 0 6
40910: PUSH
40911: LD_INT 2
40913: ARRAY
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: PUSH
40936: EMPTY
40937: LIST
40938: PPUSH
40939: CALL_OW 447
40943: GO 40886
40945: POP
40946: POP
// end ;
40947: LD_VAR 0 5
40951: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40952: LD_EXP 119
40956: NOT
40957: IFFALSE 41007
40959: GO 40961
40961: DISABLE
// begin initHack := true ;
40962: LD_ADDR_EXP 119
40966: PUSH
40967: LD_INT 1
40969: ST_TO_ADDR
// hackTanks := [ ] ;
40970: LD_ADDR_EXP 120
40974: PUSH
40975: EMPTY
40976: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40977: LD_ADDR_EXP 121
40981: PUSH
40982: EMPTY
40983: ST_TO_ADDR
// hackLimit := 3 ;
40984: LD_ADDR_EXP 122
40988: PUSH
40989: LD_INT 3
40991: ST_TO_ADDR
// hackDist := 12 ;
40992: LD_ADDR_EXP 123
40996: PUSH
40997: LD_INT 12
40999: ST_TO_ADDR
// hackCounter := [ ] ;
41000: LD_ADDR_EXP 124
41004: PUSH
41005: EMPTY
41006: ST_TO_ADDR
// end ;
41007: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41008: LD_EXP 119
41012: PUSH
41013: LD_INT 34
41015: PUSH
41016: LD_EXP 50
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PPUSH
41025: CALL_OW 69
41029: AND
41030: IFFALSE 41285
41032: GO 41034
41034: DISABLE
41035: LD_INT 0
41037: PPUSH
41038: PPUSH
// begin enable ;
41039: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41040: LD_ADDR_VAR 0 1
41044: PUSH
41045: LD_INT 34
41047: PUSH
41048: LD_EXP 50
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PPUSH
41057: CALL_OW 69
41061: PUSH
41062: FOR_IN
41063: IFFALSE 41283
// begin if not i in hackTanks then
41065: LD_VAR 0 1
41069: PUSH
41070: LD_EXP 120
41074: IN
41075: NOT
41076: IFFALSE 41159
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41078: LD_ADDR_EXP 120
41082: PUSH
41083: LD_EXP 120
41087: PPUSH
41088: LD_EXP 120
41092: PUSH
41093: LD_INT 1
41095: PLUS
41096: PPUSH
41097: LD_VAR 0 1
41101: PPUSH
41102: CALL_OW 1
41106: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41107: LD_ADDR_EXP 121
41111: PUSH
41112: LD_EXP 121
41116: PPUSH
41117: LD_EXP 121
41121: PUSH
41122: LD_INT 1
41124: PLUS
41125: PPUSH
41126: EMPTY
41127: PPUSH
41128: CALL_OW 1
41132: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41133: LD_ADDR_EXP 124
41137: PUSH
41138: LD_EXP 124
41142: PPUSH
41143: LD_EXP 124
41147: PUSH
41148: LD_INT 1
41150: PLUS
41151: PPUSH
41152: EMPTY
41153: PPUSH
41154: CALL_OW 1
41158: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41159: LD_VAR 0 1
41163: PPUSH
41164: CALL_OW 302
41168: NOT
41169: IFFALSE 41182
// begin HackUnlinkAll ( i ) ;
41171: LD_VAR 0 1
41175: PPUSH
41176: CALL 41288 0 1
// continue ;
41180: GO 41062
// end ; HackCheckCapturedStatus ( i ) ;
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL 41731 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41191: LD_ADDR_VAR 0 2
41195: PUSH
41196: LD_INT 81
41198: PUSH
41199: LD_VAR 0 1
41203: PPUSH
41204: CALL_OW 255
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 33
41215: PUSH
41216: LD_INT 3
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 91
41225: PUSH
41226: LD_VAR 0 1
41230: PUSH
41231: LD_EXP 123
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 50
41243: PUSH
41244: EMPTY
41245: LIST
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: PPUSH
41253: CALL_OW 69
41257: ST_TO_ADDR
// if not tmp then
41258: LD_VAR 0 2
41262: NOT
41263: IFFALSE 41267
// continue ;
41265: GO 41062
// HackLink ( i , tmp ) ;
41267: LD_VAR 0 1
41271: PPUSH
41272: LD_VAR 0 2
41276: PPUSH
41277: CALL 41424 0 2
// end ;
41281: GO 41062
41283: POP
41284: POP
// end ;
41285: PPOPN 2
41287: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41288: LD_INT 0
41290: PPUSH
41291: PPUSH
41292: PPUSH
// if not hack in hackTanks then
41293: LD_VAR 0 1
41297: PUSH
41298: LD_EXP 120
41302: IN
41303: NOT
41304: IFFALSE 41308
// exit ;
41306: GO 41419
// index := GetElementIndex ( hackTanks , hack ) ;
41308: LD_ADDR_VAR 0 4
41312: PUSH
41313: LD_EXP 120
41317: PPUSH
41318: LD_VAR 0 1
41322: PPUSH
41323: CALL 48853 0 2
41327: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41328: LD_EXP 121
41332: PUSH
41333: LD_VAR 0 4
41337: ARRAY
41338: IFFALSE 41419
// begin for i in hackTanksCaptured [ index ] do
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: LD_EXP 121
41349: PUSH
41350: LD_VAR 0 4
41354: ARRAY
41355: PUSH
41356: FOR_IN
41357: IFFALSE 41383
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41359: LD_VAR 0 3
41363: PUSH
41364: LD_INT 1
41366: ARRAY
41367: PPUSH
41368: LD_VAR 0 3
41372: PUSH
41373: LD_INT 2
41375: ARRAY
41376: PPUSH
41377: CALL_OW 235
41381: GO 41356
41383: POP
41384: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41385: LD_ADDR_EXP 121
41389: PUSH
41390: LD_EXP 121
41394: PPUSH
41395: LD_VAR 0 4
41399: PPUSH
41400: EMPTY
41401: PPUSH
41402: CALL_OW 1
41406: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41407: LD_VAR 0 1
41411: PPUSH
41412: LD_INT 0
41414: PPUSH
41415: CALL_OW 505
// end ; end ;
41419: LD_VAR 0 2
41423: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41424: LD_INT 0
41426: PPUSH
41427: PPUSH
41428: PPUSH
// if not hack in hackTanks or not vehicles then
41429: LD_VAR 0 1
41433: PUSH
41434: LD_EXP 120
41438: IN
41439: NOT
41440: PUSH
41441: LD_VAR 0 2
41445: NOT
41446: OR
41447: IFFALSE 41451
// exit ;
41449: GO 41726
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41451: LD_ADDR_VAR 0 2
41455: PUSH
41456: LD_VAR 0 1
41460: PPUSH
41461: LD_VAR 0 2
41465: PPUSH
41466: LD_INT 1
41468: PPUSH
41469: LD_INT 1
41471: PPUSH
41472: CALL 49503 0 4
41476: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41477: LD_ADDR_VAR 0 5
41481: PUSH
41482: LD_EXP 120
41486: PPUSH
41487: LD_VAR 0 1
41491: PPUSH
41492: CALL 48853 0 2
41496: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41497: LD_EXP 121
41501: PUSH
41502: LD_VAR 0 5
41506: ARRAY
41507: PUSH
41508: LD_EXP 122
41512: LESS
41513: IFFALSE 41702
// begin for i := 1 to vehicles do
41515: LD_ADDR_VAR 0 4
41519: PUSH
41520: DOUBLE
41521: LD_INT 1
41523: DEC
41524: ST_TO_ADDR
41525: LD_VAR 0 2
41529: PUSH
41530: FOR_TO
41531: IFFALSE 41700
// begin if hackTanksCaptured [ index ] = hackLimit then
41533: LD_EXP 121
41537: PUSH
41538: LD_VAR 0 5
41542: ARRAY
41543: PUSH
41544: LD_EXP 122
41548: EQUAL
41549: IFFALSE 41553
// break ;
41551: GO 41700
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41553: LD_ADDR_EXP 124
41557: PUSH
41558: LD_EXP 124
41562: PPUSH
41563: LD_VAR 0 5
41567: PPUSH
41568: LD_EXP 124
41572: PUSH
41573: LD_VAR 0 5
41577: ARRAY
41578: PUSH
41579: LD_INT 1
41581: PLUS
41582: PPUSH
41583: CALL_OW 1
41587: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41588: LD_ADDR_EXP 121
41592: PUSH
41593: LD_EXP 121
41597: PPUSH
41598: LD_VAR 0 5
41602: PUSH
41603: LD_EXP 121
41607: PUSH
41608: LD_VAR 0 5
41612: ARRAY
41613: PUSH
41614: LD_INT 1
41616: PLUS
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PPUSH
41622: LD_VAR 0 2
41626: PUSH
41627: LD_VAR 0 4
41631: ARRAY
41632: PUSH
41633: LD_VAR 0 2
41637: PUSH
41638: LD_VAR 0 4
41642: ARRAY
41643: PPUSH
41644: CALL_OW 255
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PPUSH
41653: CALL 49068 0 3
41657: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41658: LD_VAR 0 2
41662: PUSH
41663: LD_VAR 0 4
41667: ARRAY
41668: PPUSH
41669: LD_VAR 0 1
41673: PPUSH
41674: CALL_OW 255
41678: PPUSH
41679: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41683: LD_VAR 0 2
41687: PUSH
41688: LD_VAR 0 4
41692: ARRAY
41693: PPUSH
41694: CALL_OW 141
// end ;
41698: GO 41530
41700: POP
41701: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41702: LD_VAR 0 1
41706: PPUSH
41707: LD_EXP 121
41711: PUSH
41712: LD_VAR 0 5
41716: ARRAY
41717: PUSH
41718: LD_INT 0
41720: PLUS
41721: PPUSH
41722: CALL_OW 505
// end ;
41726: LD_VAR 0 3
41730: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
// if not hack in hackTanks then
41737: LD_VAR 0 1
41741: PUSH
41742: LD_EXP 120
41746: IN
41747: NOT
41748: IFFALSE 41752
// exit ;
41750: GO 41992
// index := GetElementIndex ( hackTanks , hack ) ;
41752: LD_ADDR_VAR 0 4
41756: PUSH
41757: LD_EXP 120
41761: PPUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL 48853 0 2
41771: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41772: LD_ADDR_VAR 0 3
41776: PUSH
41777: DOUBLE
41778: LD_EXP 121
41782: PUSH
41783: LD_VAR 0 4
41787: ARRAY
41788: INC
41789: ST_TO_ADDR
41790: LD_INT 1
41792: PUSH
41793: FOR_DOWNTO
41794: IFFALSE 41966
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41796: LD_ADDR_VAR 0 5
41800: PUSH
41801: LD_EXP 121
41805: PUSH
41806: LD_VAR 0 4
41810: ARRAY
41811: PUSH
41812: LD_VAR 0 3
41816: ARRAY
41817: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
41818: LD_VAR 0 5
41822: PUSH
41823: LD_INT 1
41825: ARRAY
41826: PPUSH
41827: CALL_OW 302
41831: NOT
41832: PUSH
41833: LD_VAR 0 5
41837: PUSH
41838: LD_INT 1
41840: ARRAY
41841: PPUSH
41842: CALL_OW 255
41846: PUSH
41847: LD_VAR 0 1
41851: PPUSH
41852: CALL_OW 255
41856: NONEQUAL
41857: OR
41858: IFFALSE 41964
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
41860: LD_VAR 0 5
41864: PUSH
41865: LD_INT 1
41867: ARRAY
41868: PPUSH
41869: CALL_OW 305
41873: PUSH
41874: LD_VAR 0 5
41878: PUSH
41879: LD_INT 1
41881: ARRAY
41882: PPUSH
41883: CALL_OW 255
41887: PUSH
41888: LD_VAR 0 1
41892: PPUSH
41893: CALL_OW 255
41897: EQUAL
41898: AND
41899: IFFALSE 41923
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
41901: LD_VAR 0 5
41905: PUSH
41906: LD_INT 1
41908: ARRAY
41909: PPUSH
41910: LD_VAR 0 5
41914: PUSH
41915: LD_INT 2
41917: ARRAY
41918: PPUSH
41919: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41923: LD_ADDR_EXP 121
41927: PUSH
41928: LD_EXP 121
41932: PPUSH
41933: LD_VAR 0 4
41937: PPUSH
41938: LD_EXP 121
41942: PUSH
41943: LD_VAR 0 4
41947: ARRAY
41948: PPUSH
41949: LD_VAR 0 3
41953: PPUSH
41954: CALL_OW 3
41958: PPUSH
41959: CALL_OW 1
41963: ST_TO_ADDR
// end ; end ;
41964: GO 41793
41966: POP
41967: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41968: LD_VAR 0 1
41972: PPUSH
41973: LD_EXP 121
41977: PUSH
41978: LD_VAR 0 4
41982: ARRAY
41983: PUSH
41984: LD_INT 0
41986: PLUS
41987: PPUSH
41988: CALL_OW 505
// end ;
41992: LD_VAR 0 2
41996: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
41997: LD_INT 0
41999: PPUSH
42000: PPUSH
42001: PPUSH
42002: PPUSH
// if not hack in hackTanks then
42003: LD_VAR 0 1
42007: PUSH
42008: LD_EXP 120
42012: IN
42013: NOT
42014: IFFALSE 42018
// exit ;
42016: GO 42103
// index := GetElementIndex ( hackTanks , hack ) ;
42018: LD_ADDR_VAR 0 5
42022: PUSH
42023: LD_EXP 120
42027: PPUSH
42028: LD_VAR 0 1
42032: PPUSH
42033: CALL 48853 0 2
42037: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42038: LD_ADDR_VAR 0 4
42042: PUSH
42043: DOUBLE
42044: LD_INT 1
42046: DEC
42047: ST_TO_ADDR
42048: LD_EXP 121
42052: PUSH
42053: LD_VAR 0 5
42057: ARRAY
42058: PUSH
42059: FOR_TO
42060: IFFALSE 42101
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42062: LD_EXP 121
42066: PUSH
42067: LD_VAR 0 5
42071: ARRAY
42072: PUSH
42073: LD_VAR 0 4
42077: ARRAY
42078: PUSH
42079: LD_INT 1
42081: ARRAY
42082: PUSH
42083: LD_VAR 0 2
42087: EQUAL
42088: IFFALSE 42099
// KillUnit ( vehicle ) ;
42090: LD_VAR 0 2
42094: PPUSH
42095: CALL_OW 66
42099: GO 42059
42101: POP
42102: POP
// end ;
42103: LD_VAR 0 3
42107: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42108: LD_EXP 125
42112: NOT
42113: IFFALSE 42148
42115: GO 42117
42117: DISABLE
// begin initMiner := true ;
42118: LD_ADDR_EXP 125
42122: PUSH
42123: LD_INT 1
42125: ST_TO_ADDR
// minersList := [ ] ;
42126: LD_ADDR_EXP 126
42130: PUSH
42131: EMPTY
42132: ST_TO_ADDR
// minerMinesList := [ ] ;
42133: LD_ADDR_EXP 127
42137: PUSH
42138: EMPTY
42139: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42140: LD_ADDR_EXP 128
42144: PUSH
42145: LD_INT 5
42147: ST_TO_ADDR
// end ;
42148: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42149: LD_EXP 125
42153: PUSH
42154: LD_INT 34
42156: PUSH
42157: LD_EXP 55
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PPUSH
42166: CALL_OW 69
42170: AND
42171: IFFALSE 42634
42173: GO 42175
42175: DISABLE
42176: LD_INT 0
42178: PPUSH
42179: PPUSH
42180: PPUSH
42181: PPUSH
// begin enable ;
42182: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42183: LD_ADDR_VAR 0 1
42187: PUSH
42188: LD_INT 34
42190: PUSH
42191: LD_EXP 55
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PPUSH
42200: CALL_OW 69
42204: PUSH
42205: FOR_IN
42206: IFFALSE 42278
// begin if not i in minersList then
42208: LD_VAR 0 1
42212: PUSH
42213: LD_EXP 126
42217: IN
42218: NOT
42219: IFFALSE 42276
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42221: LD_ADDR_EXP 126
42225: PUSH
42226: LD_EXP 126
42230: PPUSH
42231: LD_EXP 126
42235: PUSH
42236: LD_INT 1
42238: PLUS
42239: PPUSH
42240: LD_VAR 0 1
42244: PPUSH
42245: CALL_OW 1
42249: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42250: LD_ADDR_EXP 127
42254: PUSH
42255: LD_EXP 127
42259: PPUSH
42260: LD_EXP 127
42264: PUSH
42265: LD_INT 1
42267: PLUS
42268: PPUSH
42269: EMPTY
42270: PPUSH
42271: CALL_OW 1
42275: ST_TO_ADDR
// end end ;
42276: GO 42205
42278: POP
42279: POP
// for i := minerMinesList downto 1 do
42280: LD_ADDR_VAR 0 1
42284: PUSH
42285: DOUBLE
42286: LD_EXP 127
42290: INC
42291: ST_TO_ADDR
42292: LD_INT 1
42294: PUSH
42295: FOR_DOWNTO
42296: IFFALSE 42632
// begin if IsLive ( minersList [ i ] ) then
42298: LD_EXP 126
42302: PUSH
42303: LD_VAR 0 1
42307: ARRAY
42308: PPUSH
42309: CALL_OW 300
42313: IFFALSE 42341
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42315: LD_EXP 126
42319: PUSH
42320: LD_VAR 0 1
42324: ARRAY
42325: PPUSH
42326: LD_EXP 127
42330: PUSH
42331: LD_VAR 0 1
42335: ARRAY
42336: PPUSH
42337: CALL_OW 505
// if not minerMinesList [ i ] then
42341: LD_EXP 127
42345: PUSH
42346: LD_VAR 0 1
42350: ARRAY
42351: NOT
42352: IFFALSE 42356
// continue ;
42354: GO 42295
// for j := minerMinesList [ i ] downto 1 do
42356: LD_ADDR_VAR 0 2
42360: PUSH
42361: DOUBLE
42362: LD_EXP 127
42366: PUSH
42367: LD_VAR 0 1
42371: ARRAY
42372: INC
42373: ST_TO_ADDR
42374: LD_INT 1
42376: PUSH
42377: FOR_DOWNTO
42378: IFFALSE 42628
// begin side := GetSide ( minersList [ i ] ) ;
42380: LD_ADDR_VAR 0 3
42384: PUSH
42385: LD_EXP 126
42389: PUSH
42390: LD_VAR 0 1
42394: ARRAY
42395: PPUSH
42396: CALL_OW 255
42400: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42401: LD_ADDR_VAR 0 4
42405: PUSH
42406: LD_EXP 127
42410: PUSH
42411: LD_VAR 0 1
42415: ARRAY
42416: PUSH
42417: LD_VAR 0 2
42421: ARRAY
42422: PUSH
42423: LD_INT 1
42425: ARRAY
42426: PPUSH
42427: LD_EXP 127
42431: PUSH
42432: LD_VAR 0 1
42436: ARRAY
42437: PUSH
42438: LD_VAR 0 2
42442: ARRAY
42443: PUSH
42444: LD_INT 2
42446: ARRAY
42447: PPUSH
42448: CALL_OW 428
42452: ST_TO_ADDR
// if not tmp then
42453: LD_VAR 0 4
42457: NOT
42458: IFFALSE 42462
// continue ;
42460: GO 42377
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42462: LD_VAR 0 4
42466: PUSH
42467: LD_INT 81
42469: PUSH
42470: LD_VAR 0 3
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PPUSH
42479: CALL_OW 69
42483: IN
42484: PUSH
42485: LD_EXP 127
42489: PUSH
42490: LD_VAR 0 1
42494: ARRAY
42495: PUSH
42496: LD_VAR 0 2
42500: ARRAY
42501: PUSH
42502: LD_INT 1
42504: ARRAY
42505: PPUSH
42506: LD_EXP 127
42510: PUSH
42511: LD_VAR 0 1
42515: ARRAY
42516: PUSH
42517: LD_VAR 0 2
42521: ARRAY
42522: PUSH
42523: LD_INT 2
42525: ARRAY
42526: PPUSH
42527: CALL_OW 458
42531: AND
42532: IFFALSE 42626
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42534: LD_EXP 127
42538: PUSH
42539: LD_VAR 0 1
42543: ARRAY
42544: PUSH
42545: LD_VAR 0 2
42549: ARRAY
42550: PUSH
42551: LD_INT 1
42553: ARRAY
42554: PPUSH
42555: LD_EXP 127
42559: PUSH
42560: LD_VAR 0 1
42564: ARRAY
42565: PUSH
42566: LD_VAR 0 2
42570: ARRAY
42571: PUSH
42572: LD_INT 2
42574: ARRAY
42575: PPUSH
42576: LD_VAR 0 3
42580: PPUSH
42581: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42585: LD_ADDR_EXP 127
42589: PUSH
42590: LD_EXP 127
42594: PPUSH
42595: LD_VAR 0 1
42599: PPUSH
42600: LD_EXP 127
42604: PUSH
42605: LD_VAR 0 1
42609: ARRAY
42610: PPUSH
42611: LD_VAR 0 2
42615: PPUSH
42616: CALL_OW 3
42620: PPUSH
42621: CALL_OW 1
42625: ST_TO_ADDR
// end ; end ;
42626: GO 42377
42628: POP
42629: POP
// end ;
42630: GO 42295
42632: POP
42633: POP
// end ;
42634: PPOPN 4
42636: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
42637: LD_INT 0
42639: PPUSH
42640: PPUSH
// result := false ;
42641: LD_ADDR_VAR 0 4
42645: PUSH
42646: LD_INT 0
42648: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42649: LD_VAR 0 1
42653: PPUSH
42654: CALL_OW 264
42658: PUSH
42659: LD_EXP 55
42663: EQUAL
42664: NOT
42665: IFFALSE 42669
// exit ;
42667: GO 42909
// index := GetElementIndex ( minersList , unit ) ;
42669: LD_ADDR_VAR 0 5
42673: PUSH
42674: LD_EXP 126
42678: PPUSH
42679: LD_VAR 0 1
42683: PPUSH
42684: CALL 48853 0 2
42688: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42689: LD_EXP 127
42693: PUSH
42694: LD_VAR 0 5
42698: ARRAY
42699: PUSH
42700: LD_EXP 128
42704: GREATEREQUAL
42705: IFFALSE 42709
// exit ;
42707: GO 42909
// ComMoveXY ( unit , x , y ) ;
42709: LD_VAR 0 1
42713: PPUSH
42714: LD_VAR 0 2
42718: PPUSH
42719: LD_VAR 0 3
42723: PPUSH
42724: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42728: LD_INT 35
42730: PPUSH
42731: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42735: LD_VAR 0 1
42739: PPUSH
42740: LD_VAR 0 2
42744: PPUSH
42745: LD_VAR 0 3
42749: PPUSH
42750: CALL 78917 0 3
42754: NOT
42755: PUSH
42756: LD_VAR 0 1
42760: PPUSH
42761: CALL_OW 314
42765: AND
42766: IFFALSE 42770
// exit ;
42768: GO 42909
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42770: LD_VAR 0 2
42774: PPUSH
42775: LD_VAR 0 3
42779: PPUSH
42780: CALL_OW 428
42784: PUSH
42785: LD_VAR 0 1
42789: EQUAL
42790: PUSH
42791: LD_VAR 0 1
42795: PPUSH
42796: CALL_OW 314
42800: NOT
42801: AND
42802: IFFALSE 42728
// PlaySoundXY ( x , y , PlantMine ) ;
42804: LD_VAR 0 2
42808: PPUSH
42809: LD_VAR 0 3
42813: PPUSH
42814: LD_STRING PlantMine
42816: PPUSH
42817: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
42821: LD_VAR 0 2
42825: PPUSH
42826: LD_VAR 0 3
42830: PPUSH
42831: LD_VAR 0 1
42835: PPUSH
42836: CALL_OW 255
42840: PPUSH
42841: LD_INT 0
42843: PPUSH
42844: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
42848: LD_ADDR_EXP 127
42852: PUSH
42853: LD_EXP 127
42857: PPUSH
42858: LD_VAR 0 5
42862: PUSH
42863: LD_EXP 127
42867: PUSH
42868: LD_VAR 0 5
42872: ARRAY
42873: PUSH
42874: LD_INT 1
42876: PLUS
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PPUSH
42882: LD_VAR 0 2
42886: PUSH
42887: LD_VAR 0 3
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PPUSH
42896: CALL 49068 0 3
42900: ST_TO_ADDR
// result := true ;
42901: LD_ADDR_VAR 0 4
42905: PUSH
42906: LD_INT 1
42908: ST_TO_ADDR
// end ;
42909: LD_VAR 0 4
42913: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
42914: LD_INT 0
42916: PPUSH
42917: PPUSH
42918: PPUSH
// if not unit in minersList then
42919: LD_VAR 0 1
42923: PUSH
42924: LD_EXP 126
42928: IN
42929: NOT
42930: IFFALSE 42934
// exit ;
42932: GO 43326
// index := GetElementIndex ( minersList , unit ) ;
42934: LD_ADDR_VAR 0 6
42938: PUSH
42939: LD_EXP 126
42943: PPUSH
42944: LD_VAR 0 1
42948: PPUSH
42949: CALL 48853 0 2
42953: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
42954: LD_ADDR_VAR 0 5
42958: PUSH
42959: DOUBLE
42960: LD_EXP 127
42964: PUSH
42965: LD_VAR 0 6
42969: ARRAY
42970: INC
42971: ST_TO_ADDR
42972: LD_INT 1
42974: PUSH
42975: FOR_DOWNTO
42976: IFFALSE 43137
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
42978: LD_EXP 127
42982: PUSH
42983: LD_VAR 0 6
42987: ARRAY
42988: PUSH
42989: LD_VAR 0 5
42993: ARRAY
42994: PUSH
42995: LD_INT 1
42997: ARRAY
42998: PUSH
42999: LD_VAR 0 2
43003: EQUAL
43004: PUSH
43005: LD_EXP 127
43009: PUSH
43010: LD_VAR 0 6
43014: ARRAY
43015: PUSH
43016: LD_VAR 0 5
43020: ARRAY
43021: PUSH
43022: LD_INT 2
43024: ARRAY
43025: PUSH
43026: LD_VAR 0 3
43030: EQUAL
43031: AND
43032: IFFALSE 43135
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43034: LD_EXP 127
43038: PUSH
43039: LD_VAR 0 6
43043: ARRAY
43044: PUSH
43045: LD_VAR 0 5
43049: ARRAY
43050: PUSH
43051: LD_INT 1
43053: ARRAY
43054: PPUSH
43055: LD_EXP 127
43059: PUSH
43060: LD_VAR 0 6
43064: ARRAY
43065: PUSH
43066: LD_VAR 0 5
43070: ARRAY
43071: PUSH
43072: LD_INT 2
43074: ARRAY
43075: PPUSH
43076: LD_VAR 0 1
43080: PPUSH
43081: CALL_OW 255
43085: PPUSH
43086: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43090: LD_ADDR_EXP 127
43094: PUSH
43095: LD_EXP 127
43099: PPUSH
43100: LD_VAR 0 6
43104: PPUSH
43105: LD_EXP 127
43109: PUSH
43110: LD_VAR 0 6
43114: ARRAY
43115: PPUSH
43116: LD_VAR 0 5
43120: PPUSH
43121: CALL_OW 3
43125: PPUSH
43126: CALL_OW 1
43130: ST_TO_ADDR
// exit ;
43131: POP
43132: POP
43133: GO 43326
// end ; end ;
43135: GO 42975
43137: POP
43138: POP
// for i := minerMinesList [ index ] downto 1 do
43139: LD_ADDR_VAR 0 5
43143: PUSH
43144: DOUBLE
43145: LD_EXP 127
43149: PUSH
43150: LD_VAR 0 6
43154: ARRAY
43155: INC
43156: ST_TO_ADDR
43157: LD_INT 1
43159: PUSH
43160: FOR_DOWNTO
43161: IFFALSE 43324
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43163: LD_EXP 127
43167: PUSH
43168: LD_VAR 0 6
43172: ARRAY
43173: PUSH
43174: LD_VAR 0 5
43178: ARRAY
43179: PUSH
43180: LD_INT 1
43182: ARRAY
43183: PPUSH
43184: LD_EXP 127
43188: PUSH
43189: LD_VAR 0 6
43193: ARRAY
43194: PUSH
43195: LD_VAR 0 5
43199: ARRAY
43200: PUSH
43201: LD_INT 2
43203: ARRAY
43204: PPUSH
43205: LD_VAR 0 2
43209: PPUSH
43210: LD_VAR 0 3
43214: PPUSH
43215: CALL_OW 298
43219: PUSH
43220: LD_INT 6
43222: LESS
43223: IFFALSE 43322
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43225: LD_EXP 127
43229: PUSH
43230: LD_VAR 0 6
43234: ARRAY
43235: PUSH
43236: LD_VAR 0 5
43240: ARRAY
43241: PUSH
43242: LD_INT 1
43244: ARRAY
43245: PPUSH
43246: LD_EXP 127
43250: PUSH
43251: LD_VAR 0 6
43255: ARRAY
43256: PUSH
43257: LD_VAR 0 5
43261: ARRAY
43262: PUSH
43263: LD_INT 2
43265: ARRAY
43266: PPUSH
43267: LD_VAR 0 1
43271: PPUSH
43272: CALL_OW 255
43276: PPUSH
43277: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43281: LD_ADDR_EXP 127
43285: PUSH
43286: LD_EXP 127
43290: PPUSH
43291: LD_VAR 0 6
43295: PPUSH
43296: LD_EXP 127
43300: PUSH
43301: LD_VAR 0 6
43305: ARRAY
43306: PPUSH
43307: LD_VAR 0 5
43311: PPUSH
43312: CALL_OW 3
43316: PPUSH
43317: CALL_OW 1
43321: ST_TO_ADDR
// end ; end ;
43322: GO 43160
43324: POP
43325: POP
// end ;
43326: LD_VAR 0 4
43330: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43331: LD_INT 0
43333: PPUSH
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43342: LD_VAR 0 1
43346: PPUSH
43347: CALL_OW 264
43351: PUSH
43352: LD_EXP 55
43356: EQUAL
43357: NOT
43358: PUSH
43359: LD_VAR 0 1
43363: PUSH
43364: LD_EXP 126
43368: IN
43369: NOT
43370: OR
43371: IFFALSE 43375
// exit ;
43373: GO 43697
// index := GetElementIndex ( minersList , unit ) ;
43375: LD_ADDR_VAR 0 6
43379: PUSH
43380: LD_EXP 126
43384: PPUSH
43385: LD_VAR 0 1
43389: PPUSH
43390: CALL 48853 0 2
43394: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43395: LD_ADDR_VAR 0 8
43399: PUSH
43400: LD_EXP 128
43404: PUSH
43405: LD_EXP 127
43409: PUSH
43410: LD_VAR 0 6
43414: ARRAY
43415: MINUS
43416: ST_TO_ADDR
// if not minesFreeAmount then
43417: LD_VAR 0 8
43421: NOT
43422: IFFALSE 43426
// exit ;
43424: GO 43697
// tmp := [ ] ;
43426: LD_ADDR_VAR 0 7
43430: PUSH
43431: EMPTY
43432: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43433: LD_ADDR_VAR 0 5
43437: PUSH
43438: DOUBLE
43439: LD_INT 1
43441: DEC
43442: ST_TO_ADDR
43443: LD_VAR 0 8
43447: PUSH
43448: FOR_TO
43449: IFFALSE 43644
// begin _d := rand ( 0 , 5 ) ;
43451: LD_ADDR_VAR 0 11
43455: PUSH
43456: LD_INT 0
43458: PPUSH
43459: LD_INT 5
43461: PPUSH
43462: CALL_OW 12
43466: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43467: LD_ADDR_VAR 0 12
43471: PUSH
43472: LD_INT 2
43474: PPUSH
43475: LD_INT 6
43477: PPUSH
43478: CALL_OW 12
43482: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43483: LD_ADDR_VAR 0 9
43487: PUSH
43488: LD_VAR 0 2
43492: PPUSH
43493: LD_VAR 0 11
43497: PPUSH
43498: LD_VAR 0 12
43502: PPUSH
43503: CALL_OW 272
43507: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43508: LD_ADDR_VAR 0 10
43512: PUSH
43513: LD_VAR 0 3
43517: PPUSH
43518: LD_VAR 0 11
43522: PPUSH
43523: LD_VAR 0 12
43527: PPUSH
43528: CALL_OW 273
43532: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43533: LD_VAR 0 9
43537: PPUSH
43538: LD_VAR 0 10
43542: PPUSH
43543: CALL_OW 488
43547: PUSH
43548: LD_VAR 0 9
43552: PUSH
43553: LD_VAR 0 10
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_VAR 0 7
43566: IN
43567: NOT
43568: AND
43569: PUSH
43570: LD_VAR 0 9
43574: PPUSH
43575: LD_VAR 0 10
43579: PPUSH
43580: CALL_OW 458
43584: NOT
43585: AND
43586: IFFALSE 43628
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43588: LD_ADDR_VAR 0 7
43592: PUSH
43593: LD_VAR 0 7
43597: PPUSH
43598: LD_VAR 0 7
43602: PUSH
43603: LD_INT 1
43605: PLUS
43606: PPUSH
43607: LD_VAR 0 9
43611: PUSH
43612: LD_VAR 0 10
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PPUSH
43621: CALL_OW 1
43625: ST_TO_ADDR
43626: GO 43642
// i := i - 1 ;
43628: LD_ADDR_VAR 0 5
43632: PUSH
43633: LD_VAR 0 5
43637: PUSH
43638: LD_INT 1
43640: MINUS
43641: ST_TO_ADDR
// end ;
43642: GO 43448
43644: POP
43645: POP
// for i in tmp do
43646: LD_ADDR_VAR 0 5
43650: PUSH
43651: LD_VAR 0 7
43655: PUSH
43656: FOR_IN
43657: IFFALSE 43695
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43659: LD_VAR 0 1
43663: PPUSH
43664: LD_VAR 0 5
43668: PUSH
43669: LD_INT 1
43671: ARRAY
43672: PPUSH
43673: LD_VAR 0 5
43677: PUSH
43678: LD_INT 2
43680: ARRAY
43681: PPUSH
43682: CALL 42637 0 3
43686: NOT
43687: IFFALSE 43693
// exit ;
43689: POP
43690: POP
43691: GO 43697
43693: GO 43656
43695: POP
43696: POP
// end ;
43697: LD_VAR 0 4
43701: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
43702: LD_INT 0
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
43709: PPUSH
43710: PPUSH
// if not GetClass ( unit ) = class_sniper then
43711: LD_VAR 0 1
43715: PPUSH
43716: CALL_OW 257
43720: PUSH
43721: LD_INT 5
43723: EQUAL
43724: NOT
43725: IFFALSE 43729
// exit ;
43727: GO 44117
// dist := 8 ;
43729: LD_ADDR_VAR 0 5
43733: PUSH
43734: LD_INT 8
43736: ST_TO_ADDR
// viewRange := 12 ;
43737: LD_ADDR_VAR 0 7
43741: PUSH
43742: LD_INT 12
43744: ST_TO_ADDR
// side := GetSide ( unit ) ;
43745: LD_ADDR_VAR 0 6
43749: PUSH
43750: LD_VAR 0 1
43754: PPUSH
43755: CALL_OW 255
43759: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43760: LD_INT 61
43762: PPUSH
43763: LD_VAR 0 6
43767: PPUSH
43768: CALL_OW 321
43772: PUSH
43773: LD_INT 2
43775: EQUAL
43776: IFFALSE 43786
// viewRange := 16 ;
43778: LD_ADDR_VAR 0 7
43782: PUSH
43783: LD_INT 16
43785: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43786: LD_VAR 0 1
43790: PPUSH
43791: LD_VAR 0 2
43795: PPUSH
43796: LD_VAR 0 3
43800: PPUSH
43801: CALL_OW 297
43805: PUSH
43806: LD_VAR 0 5
43810: GREATER
43811: IFFALSE 43890
// begin ComMoveXY ( unit , x , y ) ;
43813: LD_VAR 0 1
43817: PPUSH
43818: LD_VAR 0 2
43822: PPUSH
43823: LD_VAR 0 3
43827: PPUSH
43828: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43832: LD_INT 35
43834: PPUSH
43835: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
43839: LD_VAR 0 1
43843: PPUSH
43844: LD_VAR 0 2
43848: PPUSH
43849: LD_VAR 0 3
43853: PPUSH
43854: CALL 78917 0 3
43858: NOT
43859: IFFALSE 43863
// exit ;
43861: GO 44117
// until GetDistUnitXY ( unit , x , y ) < dist ;
43863: LD_VAR 0 1
43867: PPUSH
43868: LD_VAR 0 2
43872: PPUSH
43873: LD_VAR 0 3
43877: PPUSH
43878: CALL_OW 297
43882: PUSH
43883: LD_VAR 0 5
43887: LESS
43888: IFFALSE 43832
// end ; ComTurnXY ( unit , x , y ) ;
43890: LD_VAR 0 1
43894: PPUSH
43895: LD_VAR 0 2
43899: PPUSH
43900: LD_VAR 0 3
43904: PPUSH
43905: CALL_OW 118
// wait ( 5 ) ;
43909: LD_INT 5
43911: PPUSH
43912: CALL_OW 67
// _d := GetDir ( unit ) ;
43916: LD_ADDR_VAR 0 10
43920: PUSH
43921: LD_VAR 0 1
43925: PPUSH
43926: CALL_OW 254
43930: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
43931: LD_ADDR_VAR 0 8
43935: PUSH
43936: LD_VAR 0 1
43940: PPUSH
43941: CALL_OW 250
43945: PPUSH
43946: LD_VAR 0 10
43950: PPUSH
43951: LD_VAR 0 5
43955: PPUSH
43956: CALL_OW 272
43960: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
43961: LD_ADDR_VAR 0 9
43965: PUSH
43966: LD_VAR 0 1
43970: PPUSH
43971: CALL_OW 251
43975: PPUSH
43976: LD_VAR 0 10
43980: PPUSH
43981: LD_VAR 0 5
43985: PPUSH
43986: CALL_OW 273
43990: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43991: LD_VAR 0 8
43995: PPUSH
43996: LD_VAR 0 9
44000: PPUSH
44001: CALL_OW 488
44005: NOT
44006: IFFALSE 44010
// exit ;
44008: GO 44117
// ComAnimCustom ( unit , 1 ) ;
44010: LD_VAR 0 1
44014: PPUSH
44015: LD_INT 1
44017: PPUSH
44018: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44022: LD_VAR 0 8
44026: PPUSH
44027: LD_VAR 0 9
44031: PPUSH
44032: LD_VAR 0 6
44036: PPUSH
44037: LD_VAR 0 7
44041: PPUSH
44042: CALL_OW 330
// repeat wait ( 1 ) ;
44046: LD_INT 1
44048: PPUSH
44049: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44053: LD_VAR 0 1
44057: PPUSH
44058: CALL_OW 316
44062: PUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: CALL_OW 314
44072: OR
44073: PUSH
44074: LD_VAR 0 1
44078: PPUSH
44079: CALL_OW 302
44083: NOT
44084: OR
44085: PUSH
44086: LD_VAR 0 1
44090: PPUSH
44091: CALL_OW 301
44095: OR
44096: IFFALSE 44046
// RemoveSeeing ( _x , _y , side ) ;
44098: LD_VAR 0 8
44102: PPUSH
44103: LD_VAR 0 9
44107: PPUSH
44108: LD_VAR 0 6
44112: PPUSH
44113: CALL_OW 331
// end ; end_of_file
44117: LD_VAR 0 4
44121: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44122: LD_INT 0
44124: PPUSH
44125: PPUSH
// if exist_mode then
44126: LD_VAR 0 2
44130: IFFALSE 44155
// unit := CreateCharacter ( prefix & ident ) else
44132: LD_ADDR_VAR 0 5
44136: PUSH
44137: LD_VAR 0 3
44141: PUSH
44142: LD_VAR 0 1
44146: STR
44147: PPUSH
44148: CALL_OW 34
44152: ST_TO_ADDR
44153: GO 44170
// unit := NewCharacter ( ident ) ;
44155: LD_ADDR_VAR 0 5
44159: PUSH
44160: LD_VAR 0 1
44164: PPUSH
44165: CALL_OW 25
44169: ST_TO_ADDR
// result := unit ;
44170: LD_ADDR_VAR 0 4
44174: PUSH
44175: LD_VAR 0 5
44179: ST_TO_ADDR
// end ;
44180: LD_VAR 0 4
44184: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44185: LD_INT 0
44187: PPUSH
44188: PPUSH
// if not side or not nation then
44189: LD_VAR 0 1
44193: NOT
44194: PUSH
44195: LD_VAR 0 2
44199: NOT
44200: OR
44201: IFFALSE 44205
// exit ;
44203: GO 44969
// case nation of nation_american :
44205: LD_VAR 0 2
44209: PUSH
44210: LD_INT 1
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44218
44216: GO 44432
44218: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
44219: LD_ADDR_VAR 0 4
44223: PUSH
44224: LD_INT 35
44226: PUSH
44227: LD_INT 45
44229: PUSH
44230: LD_INT 46
44232: PUSH
44233: LD_INT 47
44235: PUSH
44236: LD_INT 82
44238: PUSH
44239: LD_INT 83
44241: PUSH
44242: LD_INT 84
44244: PUSH
44245: LD_INT 85
44247: PUSH
44248: LD_INT 86
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: LD_INT 6
44259: PUSH
44260: LD_INT 15
44262: PUSH
44263: LD_INT 16
44265: PUSH
44266: LD_INT 7
44268: PUSH
44269: LD_INT 12
44271: PUSH
44272: LD_INT 13
44274: PUSH
44275: LD_INT 10
44277: PUSH
44278: LD_INT 14
44280: PUSH
44281: LD_INT 20
44283: PUSH
44284: LD_INT 21
44286: PUSH
44287: LD_INT 22
44289: PUSH
44290: LD_INT 25
44292: PUSH
44293: LD_INT 32
44295: PUSH
44296: LD_INT 27
44298: PUSH
44299: LD_INT 36
44301: PUSH
44302: LD_INT 69
44304: PUSH
44305: LD_INT 39
44307: PUSH
44308: LD_INT 34
44310: PUSH
44311: LD_INT 40
44313: PUSH
44314: LD_INT 48
44316: PUSH
44317: LD_INT 49
44319: PUSH
44320: LD_INT 50
44322: PUSH
44323: LD_INT 51
44325: PUSH
44326: LD_INT 52
44328: PUSH
44329: LD_INT 53
44331: PUSH
44332: LD_INT 54
44334: PUSH
44335: LD_INT 55
44337: PUSH
44338: LD_INT 56
44340: PUSH
44341: LD_INT 57
44343: PUSH
44344: LD_INT 58
44346: PUSH
44347: LD_INT 59
44349: PUSH
44350: LD_INT 60
44352: PUSH
44353: LD_INT 61
44355: PUSH
44356: LD_INT 62
44358: PUSH
44359: LD_INT 80
44361: PUSH
44362: LD_INT 82
44364: PUSH
44365: LD_INT 83
44367: PUSH
44368: LD_INT 84
44370: PUSH
44371: LD_INT 85
44373: PUSH
44374: LD_INT 86
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: ST_TO_ADDR
44430: GO 44893
44432: LD_INT 2
44434: DOUBLE
44435: EQUAL
44436: IFTRUE 44440
44438: GO 44662
44440: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
44441: LD_ADDR_VAR 0 4
44445: PUSH
44446: LD_INT 35
44448: PUSH
44449: LD_INT 45
44451: PUSH
44452: LD_INT 46
44454: PUSH
44455: LD_INT 47
44457: PUSH
44458: LD_INT 82
44460: PUSH
44461: LD_INT 83
44463: PUSH
44464: LD_INT 84
44466: PUSH
44467: LD_INT 85
44469: PUSH
44470: LD_INT 87
44472: PUSH
44473: LD_INT 70
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 11
44481: PUSH
44482: LD_INT 3
44484: PUSH
44485: LD_INT 4
44487: PUSH
44488: LD_INT 5
44490: PUSH
44491: LD_INT 6
44493: PUSH
44494: LD_INT 15
44496: PUSH
44497: LD_INT 18
44499: PUSH
44500: LD_INT 7
44502: PUSH
44503: LD_INT 17
44505: PUSH
44506: LD_INT 8
44508: PUSH
44509: LD_INT 20
44511: PUSH
44512: LD_INT 21
44514: PUSH
44515: LD_INT 22
44517: PUSH
44518: LD_INT 72
44520: PUSH
44521: LD_INT 26
44523: PUSH
44524: LD_INT 69
44526: PUSH
44527: LD_INT 39
44529: PUSH
44530: LD_INT 40
44532: PUSH
44533: LD_INT 41
44535: PUSH
44536: LD_INT 42
44538: PUSH
44539: LD_INT 43
44541: PUSH
44542: LD_INT 48
44544: PUSH
44545: LD_INT 49
44547: PUSH
44548: LD_INT 50
44550: PUSH
44551: LD_INT 51
44553: PUSH
44554: LD_INT 52
44556: PUSH
44557: LD_INT 53
44559: PUSH
44560: LD_INT 54
44562: PUSH
44563: LD_INT 55
44565: PUSH
44566: LD_INT 56
44568: PUSH
44569: LD_INT 60
44571: PUSH
44572: LD_INT 61
44574: PUSH
44575: LD_INT 62
44577: PUSH
44578: LD_INT 66
44580: PUSH
44581: LD_INT 67
44583: PUSH
44584: LD_INT 68
44586: PUSH
44587: LD_INT 81
44589: PUSH
44590: LD_INT 82
44592: PUSH
44593: LD_INT 83
44595: PUSH
44596: LD_INT 84
44598: PUSH
44599: LD_INT 85
44601: PUSH
44602: LD_INT 87
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: ST_TO_ADDR
44660: GO 44893
44662: LD_INT 3
44664: DOUBLE
44665: EQUAL
44666: IFTRUE 44670
44668: GO 44892
44670: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44671: LD_ADDR_VAR 0 4
44675: PUSH
44676: LD_INT 46
44678: PUSH
44679: LD_INT 47
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 82
44690: PUSH
44691: LD_INT 83
44693: PUSH
44694: LD_INT 84
44696: PUSH
44697: LD_INT 85
44699: PUSH
44700: LD_INT 86
44702: PUSH
44703: LD_INT 11
44705: PUSH
44706: LD_INT 9
44708: PUSH
44709: LD_INT 20
44711: PUSH
44712: LD_INT 19
44714: PUSH
44715: LD_INT 21
44717: PUSH
44718: LD_INT 24
44720: PUSH
44721: LD_INT 22
44723: PUSH
44724: LD_INT 25
44726: PUSH
44727: LD_INT 28
44729: PUSH
44730: LD_INT 29
44732: PUSH
44733: LD_INT 30
44735: PUSH
44736: LD_INT 31
44738: PUSH
44739: LD_INT 37
44741: PUSH
44742: LD_INT 38
44744: PUSH
44745: LD_INT 32
44747: PUSH
44748: LD_INT 27
44750: PUSH
44751: LD_INT 33
44753: PUSH
44754: LD_INT 69
44756: PUSH
44757: LD_INT 39
44759: PUSH
44760: LD_INT 34
44762: PUSH
44763: LD_INT 40
44765: PUSH
44766: LD_INT 71
44768: PUSH
44769: LD_INT 23
44771: PUSH
44772: LD_INT 44
44774: PUSH
44775: LD_INT 48
44777: PUSH
44778: LD_INT 49
44780: PUSH
44781: LD_INT 50
44783: PUSH
44784: LD_INT 51
44786: PUSH
44787: LD_INT 52
44789: PUSH
44790: LD_INT 53
44792: PUSH
44793: LD_INT 54
44795: PUSH
44796: LD_INT 55
44798: PUSH
44799: LD_INT 56
44801: PUSH
44802: LD_INT 57
44804: PUSH
44805: LD_INT 58
44807: PUSH
44808: LD_INT 59
44810: PUSH
44811: LD_INT 63
44813: PUSH
44814: LD_INT 64
44816: PUSH
44817: LD_INT 65
44819: PUSH
44820: LD_INT 82
44822: PUSH
44823: LD_INT 83
44825: PUSH
44826: LD_INT 84
44828: PUSH
44829: LD_INT 85
44831: PUSH
44832: LD_INT 86
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: ST_TO_ADDR
44890: GO 44893
44892: POP
// if state > - 1 and state < 3 then
44893: LD_VAR 0 3
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: GREATER
44902: PUSH
44903: LD_VAR 0 3
44907: PUSH
44908: LD_INT 3
44910: LESS
44911: AND
44912: IFFALSE 44969
// for i in result do
44914: LD_ADDR_VAR 0 5
44918: PUSH
44919: LD_VAR 0 4
44923: PUSH
44924: FOR_IN
44925: IFFALSE 44967
// if GetTech ( i , side ) <> state then
44927: LD_VAR 0 5
44931: PPUSH
44932: LD_VAR 0 1
44936: PPUSH
44937: CALL_OW 321
44941: PUSH
44942: LD_VAR 0 3
44946: NONEQUAL
44947: IFFALSE 44965
// result := result diff i ;
44949: LD_ADDR_VAR 0 4
44953: PUSH
44954: LD_VAR 0 4
44958: PUSH
44959: LD_VAR 0 5
44963: DIFF
44964: ST_TO_ADDR
44965: GO 44924
44967: POP
44968: POP
// end ;
44969: LD_VAR 0 4
44973: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44974: LD_INT 0
44976: PPUSH
44977: PPUSH
44978: PPUSH
// result := true ;
44979: LD_ADDR_VAR 0 3
44983: PUSH
44984: LD_INT 1
44986: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44987: LD_ADDR_VAR 0 5
44991: PUSH
44992: LD_VAR 0 2
44996: PPUSH
44997: CALL_OW 480
45001: ST_TO_ADDR
// if not tmp then
45002: LD_VAR 0 5
45006: NOT
45007: IFFALSE 45011
// exit ;
45009: GO 45060
// for i in tmp do
45011: LD_ADDR_VAR 0 4
45015: PUSH
45016: LD_VAR 0 5
45020: PUSH
45021: FOR_IN
45022: IFFALSE 45058
// if GetTech ( i , side ) <> state_researched then
45024: LD_VAR 0 4
45028: PPUSH
45029: LD_VAR 0 1
45033: PPUSH
45034: CALL_OW 321
45038: PUSH
45039: LD_INT 2
45041: NONEQUAL
45042: IFFALSE 45056
// begin result := false ;
45044: LD_ADDR_VAR 0 3
45048: PUSH
45049: LD_INT 0
45051: ST_TO_ADDR
// exit ;
45052: POP
45053: POP
45054: GO 45060
// end ;
45056: GO 45021
45058: POP
45059: POP
// end ;
45060: LD_VAR 0 3
45064: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45065: LD_INT 0
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
45077: PPUSH
45078: PPUSH
45079: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45080: LD_VAR 0 1
45084: NOT
45085: PUSH
45086: LD_VAR 0 1
45090: PPUSH
45091: CALL_OW 257
45095: PUSH
45096: LD_INT 9
45098: NONEQUAL
45099: OR
45100: IFFALSE 45104
// exit ;
45102: GO 45677
// side := GetSide ( unit ) ;
45104: LD_ADDR_VAR 0 9
45108: PUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 255
45118: ST_TO_ADDR
// tech_space := tech_spacanom ;
45119: LD_ADDR_VAR 0 12
45123: PUSH
45124: LD_INT 29
45126: ST_TO_ADDR
// tech_time := tech_taurad ;
45127: LD_ADDR_VAR 0 13
45131: PUSH
45132: LD_INT 28
45134: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45135: LD_ADDR_VAR 0 11
45139: PUSH
45140: LD_VAR 0 1
45144: PPUSH
45145: CALL_OW 310
45149: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45150: LD_VAR 0 11
45154: PPUSH
45155: CALL_OW 247
45159: PUSH
45160: LD_INT 2
45162: EQUAL
45163: IFFALSE 45167
// exit ;
45165: GO 45677
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45167: LD_ADDR_VAR 0 8
45171: PUSH
45172: LD_INT 81
45174: PUSH
45175: LD_VAR 0 9
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 3
45186: PUSH
45187: LD_INT 21
45189: PUSH
45190: LD_INT 3
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PPUSH
45205: CALL_OW 69
45209: ST_TO_ADDR
// if not tmp then
45210: LD_VAR 0 8
45214: NOT
45215: IFFALSE 45219
// exit ;
45217: GO 45677
// if in_unit then
45219: LD_VAR 0 11
45223: IFFALSE 45247
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45225: LD_ADDR_VAR 0 10
45229: PUSH
45230: LD_VAR 0 8
45234: PPUSH
45235: LD_VAR 0 11
45239: PPUSH
45240: CALL_OW 74
45244: ST_TO_ADDR
45245: GO 45267
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45247: LD_ADDR_VAR 0 10
45251: PUSH
45252: LD_VAR 0 8
45256: PPUSH
45257: LD_VAR 0 1
45261: PPUSH
45262: CALL_OW 74
45266: ST_TO_ADDR
// if not enemy then
45267: LD_VAR 0 10
45271: NOT
45272: IFFALSE 45276
// exit ;
45274: GO 45677
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45276: LD_VAR 0 11
45280: PUSH
45281: LD_VAR 0 11
45285: PPUSH
45286: LD_VAR 0 10
45290: PPUSH
45291: CALL_OW 296
45295: PUSH
45296: LD_INT 13
45298: GREATER
45299: AND
45300: PUSH
45301: LD_VAR 0 1
45305: PPUSH
45306: LD_VAR 0 10
45310: PPUSH
45311: CALL_OW 296
45315: PUSH
45316: LD_INT 12
45318: GREATER
45319: OR
45320: IFFALSE 45324
// exit ;
45322: GO 45677
// missile := [ 1 ] ;
45324: LD_ADDR_VAR 0 14
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45335: LD_VAR 0 9
45339: PPUSH
45340: LD_VAR 0 12
45344: PPUSH
45345: CALL_OW 325
45349: IFFALSE 45378
// missile := Insert ( missile , missile + 1 , 2 ) ;
45351: LD_ADDR_VAR 0 14
45355: PUSH
45356: LD_VAR 0 14
45360: PPUSH
45361: LD_VAR 0 14
45365: PUSH
45366: LD_INT 1
45368: PLUS
45369: PPUSH
45370: LD_INT 2
45372: PPUSH
45373: CALL_OW 2
45377: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45378: LD_VAR 0 9
45382: PPUSH
45383: LD_VAR 0 13
45387: PPUSH
45388: CALL_OW 325
45392: PUSH
45393: LD_VAR 0 10
45397: PPUSH
45398: CALL_OW 255
45402: PPUSH
45403: LD_VAR 0 13
45407: PPUSH
45408: CALL_OW 325
45412: NOT
45413: AND
45414: IFFALSE 45443
// missile := Insert ( missile , missile + 1 , 3 ) ;
45416: LD_ADDR_VAR 0 14
45420: PUSH
45421: LD_VAR 0 14
45425: PPUSH
45426: LD_VAR 0 14
45430: PUSH
45431: LD_INT 1
45433: PLUS
45434: PPUSH
45435: LD_INT 3
45437: PPUSH
45438: CALL_OW 2
45442: ST_TO_ADDR
// if missile < 2 then
45443: LD_VAR 0 14
45447: PUSH
45448: LD_INT 2
45450: LESS
45451: IFFALSE 45455
// exit ;
45453: GO 45677
// x := GetX ( enemy ) ;
45455: LD_ADDR_VAR 0 4
45459: PUSH
45460: LD_VAR 0 10
45464: PPUSH
45465: CALL_OW 250
45469: ST_TO_ADDR
// y := GetY ( enemy ) ;
45470: LD_ADDR_VAR 0 5
45474: PUSH
45475: LD_VAR 0 10
45479: PPUSH
45480: CALL_OW 251
45484: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45485: LD_ADDR_VAR 0 6
45489: PUSH
45490: LD_VAR 0 4
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PPUSH
45499: LD_INT 1
45501: PPUSH
45502: CALL_OW 12
45506: PLUS
45507: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45508: LD_ADDR_VAR 0 7
45512: PUSH
45513: LD_VAR 0 5
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PPUSH
45522: LD_INT 1
45524: PPUSH
45525: CALL_OW 12
45529: PLUS
45530: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45531: LD_VAR 0 6
45535: PPUSH
45536: LD_VAR 0 7
45540: PPUSH
45541: CALL_OW 488
45545: NOT
45546: IFFALSE 45568
// begin _x := x ;
45548: LD_ADDR_VAR 0 6
45552: PUSH
45553: LD_VAR 0 4
45557: ST_TO_ADDR
// _y := y ;
45558: LD_ADDR_VAR 0 7
45562: PUSH
45563: LD_VAR 0 5
45567: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45568: LD_ADDR_VAR 0 3
45572: PUSH
45573: LD_INT 1
45575: PPUSH
45576: LD_VAR 0 14
45580: PPUSH
45581: CALL_OW 12
45585: ST_TO_ADDR
// case i of 1 :
45586: LD_VAR 0 3
45590: PUSH
45591: LD_INT 1
45593: DOUBLE
45594: EQUAL
45595: IFTRUE 45599
45597: GO 45616
45599: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45600: LD_VAR 0 1
45604: PPUSH
45605: LD_VAR 0 10
45609: PPUSH
45610: CALL_OW 115
45614: GO 45677
45616: LD_INT 2
45618: DOUBLE
45619: EQUAL
45620: IFTRUE 45624
45622: GO 45646
45624: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45625: LD_VAR 0 1
45629: PPUSH
45630: LD_VAR 0 6
45634: PPUSH
45635: LD_VAR 0 7
45639: PPUSH
45640: CALL_OW 153
45644: GO 45677
45646: LD_INT 3
45648: DOUBLE
45649: EQUAL
45650: IFTRUE 45654
45652: GO 45676
45654: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45655: LD_VAR 0 1
45659: PPUSH
45660: LD_VAR 0 6
45664: PPUSH
45665: LD_VAR 0 7
45669: PPUSH
45670: CALL_OW 154
45674: GO 45677
45676: POP
// end ;
45677: LD_VAR 0 2
45681: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45682: LD_INT 0
45684: PPUSH
45685: PPUSH
45686: PPUSH
45687: PPUSH
45688: PPUSH
45689: PPUSH
// if not unit or not building then
45690: LD_VAR 0 1
45694: NOT
45695: PUSH
45696: LD_VAR 0 2
45700: NOT
45701: OR
45702: IFFALSE 45706
// exit ;
45704: GO 45864
// x := GetX ( building ) ;
45706: LD_ADDR_VAR 0 5
45710: PUSH
45711: LD_VAR 0 2
45715: PPUSH
45716: CALL_OW 250
45720: ST_TO_ADDR
// y := GetY ( building ) ;
45721: LD_ADDR_VAR 0 6
45725: PUSH
45726: LD_VAR 0 2
45730: PPUSH
45731: CALL_OW 251
45735: ST_TO_ADDR
// for i = 0 to 5 do
45736: LD_ADDR_VAR 0 4
45740: PUSH
45741: DOUBLE
45742: LD_INT 0
45744: DEC
45745: ST_TO_ADDR
45746: LD_INT 5
45748: PUSH
45749: FOR_TO
45750: IFFALSE 45862
// begin _x := ShiftX ( x , i , 3 ) ;
45752: LD_ADDR_VAR 0 7
45756: PUSH
45757: LD_VAR 0 5
45761: PPUSH
45762: LD_VAR 0 4
45766: PPUSH
45767: LD_INT 3
45769: PPUSH
45770: CALL_OW 272
45774: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45775: LD_ADDR_VAR 0 8
45779: PUSH
45780: LD_VAR 0 6
45784: PPUSH
45785: LD_VAR 0 4
45789: PPUSH
45790: LD_INT 3
45792: PPUSH
45793: CALL_OW 273
45797: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45798: LD_VAR 0 7
45802: PPUSH
45803: LD_VAR 0 8
45807: PPUSH
45808: CALL_OW 488
45812: NOT
45813: IFFALSE 45817
// continue ;
45815: GO 45749
// if HexInfo ( _x , _y ) = 0 then
45817: LD_VAR 0 7
45821: PPUSH
45822: LD_VAR 0 8
45826: PPUSH
45827: CALL_OW 428
45831: PUSH
45832: LD_INT 0
45834: EQUAL
45835: IFFALSE 45860
// begin ComMoveXY ( unit , _x , _y ) ;
45837: LD_VAR 0 1
45841: PPUSH
45842: LD_VAR 0 7
45846: PPUSH
45847: LD_VAR 0 8
45851: PPUSH
45852: CALL_OW 111
// exit ;
45856: POP
45857: POP
45858: GO 45864
// end ; end ;
45860: GO 45749
45862: POP
45863: POP
// end ;
45864: LD_VAR 0 3
45868: RET
// export function ScanBase ( side , base_area ) ; begin
45869: LD_INT 0
45871: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45872: LD_ADDR_VAR 0 3
45876: PUSH
45877: LD_VAR 0 2
45881: PPUSH
45882: LD_INT 81
45884: PUSH
45885: LD_VAR 0 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PPUSH
45894: CALL_OW 70
45898: ST_TO_ADDR
// end ;
45899: LD_VAR 0 3
45903: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45904: LD_INT 0
45906: PPUSH
45907: PPUSH
45908: PPUSH
45909: PPUSH
// result := false ;
45910: LD_ADDR_VAR 0 2
45914: PUSH
45915: LD_INT 0
45917: ST_TO_ADDR
// side := GetSide ( unit ) ;
45918: LD_ADDR_VAR 0 3
45922: PUSH
45923: LD_VAR 0 1
45927: PPUSH
45928: CALL_OW 255
45932: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45933: LD_ADDR_VAR 0 4
45937: PUSH
45938: LD_VAR 0 1
45942: PPUSH
45943: CALL_OW 248
45947: ST_TO_ADDR
// case nat of 1 :
45948: LD_VAR 0 4
45952: PUSH
45953: LD_INT 1
45955: DOUBLE
45956: EQUAL
45957: IFTRUE 45961
45959: GO 45972
45961: POP
// tech := tech_lassight ; 2 :
45962: LD_ADDR_VAR 0 5
45966: PUSH
45967: LD_INT 12
45969: ST_TO_ADDR
45970: GO 46011
45972: LD_INT 2
45974: DOUBLE
45975: EQUAL
45976: IFTRUE 45980
45978: GO 45991
45980: POP
// tech := tech_mortar ; 3 :
45981: LD_ADDR_VAR 0 5
45985: PUSH
45986: LD_INT 41
45988: ST_TO_ADDR
45989: GO 46011
45991: LD_INT 3
45993: DOUBLE
45994: EQUAL
45995: IFTRUE 45999
45997: GO 46010
45999: POP
// tech := tech_bazooka ; end ;
46000: LD_ADDR_VAR 0 5
46004: PUSH
46005: LD_INT 44
46007: ST_TO_ADDR
46008: GO 46011
46010: POP
// if Researched ( side , tech ) then
46011: LD_VAR 0 3
46015: PPUSH
46016: LD_VAR 0 5
46020: PPUSH
46021: CALL_OW 325
46025: IFFALSE 46052
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46027: LD_ADDR_VAR 0 2
46031: PUSH
46032: LD_INT 5
46034: PUSH
46035: LD_INT 8
46037: PUSH
46038: LD_INT 9
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: PUSH
46046: LD_VAR 0 4
46050: ARRAY
46051: ST_TO_ADDR
// end ;
46052: LD_VAR 0 2
46056: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46057: LD_INT 0
46059: PPUSH
46060: PPUSH
46061: PPUSH
// if not mines then
46062: LD_VAR 0 2
46066: NOT
46067: IFFALSE 46071
// exit ;
46069: GO 46215
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46071: LD_ADDR_VAR 0 5
46075: PUSH
46076: LD_INT 81
46078: PUSH
46079: LD_VAR 0 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 3
46090: PUSH
46091: LD_INT 21
46093: PUSH
46094: LD_INT 3
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PPUSH
46109: CALL_OW 69
46113: ST_TO_ADDR
// for i in mines do
46114: LD_ADDR_VAR 0 4
46118: PUSH
46119: LD_VAR 0 2
46123: PUSH
46124: FOR_IN
46125: IFFALSE 46213
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46127: LD_VAR 0 4
46131: PUSH
46132: LD_INT 1
46134: ARRAY
46135: PPUSH
46136: LD_VAR 0 4
46140: PUSH
46141: LD_INT 2
46143: ARRAY
46144: PPUSH
46145: CALL_OW 458
46149: NOT
46150: IFFALSE 46154
// continue ;
46152: GO 46124
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46154: LD_VAR 0 4
46158: PUSH
46159: LD_INT 1
46161: ARRAY
46162: PPUSH
46163: LD_VAR 0 4
46167: PUSH
46168: LD_INT 2
46170: ARRAY
46171: PPUSH
46172: CALL_OW 428
46176: PUSH
46177: LD_VAR 0 5
46181: IN
46182: IFFALSE 46211
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46184: LD_VAR 0 4
46188: PUSH
46189: LD_INT 1
46191: ARRAY
46192: PPUSH
46193: LD_VAR 0 4
46197: PUSH
46198: LD_INT 2
46200: ARRAY
46201: PPUSH
46202: LD_VAR 0 1
46206: PPUSH
46207: CALL_OW 456
// end ;
46211: GO 46124
46213: POP
46214: POP
// end ;
46215: LD_VAR 0 3
46219: RET
// export function Count ( array ) ; var i ; begin
46220: LD_INT 0
46222: PPUSH
46223: PPUSH
// result := 0 ;
46224: LD_ADDR_VAR 0 2
46228: PUSH
46229: LD_INT 0
46231: ST_TO_ADDR
// for i in array do
46232: LD_ADDR_VAR 0 3
46236: PUSH
46237: LD_VAR 0 1
46241: PUSH
46242: FOR_IN
46243: IFFALSE 46267
// if i then
46245: LD_VAR 0 3
46249: IFFALSE 46265
// result := result + 1 ;
46251: LD_ADDR_VAR 0 2
46255: PUSH
46256: LD_VAR 0 2
46260: PUSH
46261: LD_INT 1
46263: PLUS
46264: ST_TO_ADDR
46265: GO 46242
46267: POP
46268: POP
// end ;
46269: LD_VAR 0 2
46273: RET
// export function IsEmpty ( building ) ; begin
46274: LD_INT 0
46276: PPUSH
// if not building then
46277: LD_VAR 0 1
46281: NOT
46282: IFFALSE 46286
// exit ;
46284: GO 46329
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46286: LD_ADDR_VAR 0 2
46290: PUSH
46291: LD_VAR 0 1
46295: PUSH
46296: LD_INT 22
46298: PUSH
46299: LD_VAR 0 1
46303: PPUSH
46304: CALL_OW 255
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 58
46315: PUSH
46316: EMPTY
46317: LIST
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PPUSH
46323: CALL_OW 69
46327: IN
46328: ST_TO_ADDR
// end ;
46329: LD_VAR 0 2
46333: RET
// export function IsNotFull ( building ) ; begin
46334: LD_INT 0
46336: PPUSH
// if not building then
46337: LD_VAR 0 1
46341: NOT
46342: IFFALSE 46346
// exit ;
46344: GO 46365
// result := UnitsInside ( building ) < 6 ;
46346: LD_ADDR_VAR 0 2
46350: PUSH
46351: LD_VAR 0 1
46355: PPUSH
46356: CALL_OW 313
46360: PUSH
46361: LD_INT 6
46363: LESS
46364: ST_TO_ADDR
// end ;
46365: LD_VAR 0 2
46369: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46370: LD_INT 0
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
// tmp := [ ] ;
46376: LD_ADDR_VAR 0 3
46380: PUSH
46381: EMPTY
46382: ST_TO_ADDR
// list := [ ] ;
46383: LD_ADDR_VAR 0 5
46387: PUSH
46388: EMPTY
46389: ST_TO_ADDR
// for i = 16 to 25 do
46390: LD_ADDR_VAR 0 4
46394: PUSH
46395: DOUBLE
46396: LD_INT 16
46398: DEC
46399: ST_TO_ADDR
46400: LD_INT 25
46402: PUSH
46403: FOR_TO
46404: IFFALSE 46477
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46406: LD_ADDR_VAR 0 3
46410: PUSH
46411: LD_VAR 0 3
46415: PUSH
46416: LD_INT 22
46418: PUSH
46419: LD_VAR 0 1
46423: PPUSH
46424: CALL_OW 255
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 91
46435: PUSH
46436: LD_VAR 0 1
46440: PUSH
46441: LD_INT 6
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 30
46451: PUSH
46452: LD_VAR 0 4
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: PUSH
46466: EMPTY
46467: LIST
46468: PPUSH
46469: CALL_OW 69
46473: ADD
46474: ST_TO_ADDR
46475: GO 46403
46477: POP
46478: POP
// for i = 1 to tmp do
46479: LD_ADDR_VAR 0 4
46483: PUSH
46484: DOUBLE
46485: LD_INT 1
46487: DEC
46488: ST_TO_ADDR
46489: LD_VAR 0 3
46493: PUSH
46494: FOR_TO
46495: IFFALSE 46583
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46497: LD_ADDR_VAR 0 5
46501: PUSH
46502: LD_VAR 0 5
46506: PUSH
46507: LD_VAR 0 3
46511: PUSH
46512: LD_VAR 0 4
46516: ARRAY
46517: PPUSH
46518: CALL_OW 266
46522: PUSH
46523: LD_VAR 0 3
46527: PUSH
46528: LD_VAR 0 4
46532: ARRAY
46533: PPUSH
46534: CALL_OW 250
46538: PUSH
46539: LD_VAR 0 3
46543: PUSH
46544: LD_VAR 0 4
46548: ARRAY
46549: PPUSH
46550: CALL_OW 251
46554: PUSH
46555: LD_VAR 0 3
46559: PUSH
46560: LD_VAR 0 4
46564: ARRAY
46565: PPUSH
46566: CALL_OW 254
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: PUSH
46577: EMPTY
46578: LIST
46579: ADD
46580: ST_TO_ADDR
46581: GO 46494
46583: POP
46584: POP
// result := list ;
46585: LD_ADDR_VAR 0 2
46589: PUSH
46590: LD_VAR 0 5
46594: ST_TO_ADDR
// end ;
46595: LD_VAR 0 2
46599: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46600: LD_INT 0
46602: PPUSH
46603: PPUSH
46604: PPUSH
46605: PPUSH
46606: PPUSH
46607: PPUSH
46608: PPUSH
// if not factory then
46609: LD_VAR 0 1
46613: NOT
46614: IFFALSE 46618
// exit ;
46616: GO 47211
// if control = control_apeman then
46618: LD_VAR 0 4
46622: PUSH
46623: LD_INT 5
46625: EQUAL
46626: IFFALSE 46735
// begin tmp := UnitsInside ( factory ) ;
46628: LD_ADDR_VAR 0 8
46632: PUSH
46633: LD_VAR 0 1
46637: PPUSH
46638: CALL_OW 313
46642: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46643: LD_VAR 0 8
46647: PPUSH
46648: LD_INT 25
46650: PUSH
46651: LD_INT 12
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PPUSH
46658: CALL_OW 72
46662: NOT
46663: IFFALSE 46673
// control := control_manual ;
46665: LD_ADDR_VAR 0 4
46669: PUSH
46670: LD_INT 1
46672: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46673: LD_ADDR_VAR 0 8
46677: PUSH
46678: LD_VAR 0 1
46682: PPUSH
46683: CALL 46370 0 1
46687: ST_TO_ADDR
// if tmp then
46688: LD_VAR 0 8
46692: IFFALSE 46735
// begin for i in tmp do
46694: LD_ADDR_VAR 0 7
46698: PUSH
46699: LD_VAR 0 8
46703: PUSH
46704: FOR_IN
46705: IFFALSE 46733
// if i [ 1 ] = b_ext_radio then
46707: LD_VAR 0 7
46711: PUSH
46712: LD_INT 1
46714: ARRAY
46715: PUSH
46716: LD_INT 22
46718: EQUAL
46719: IFFALSE 46731
// begin control := control_remote ;
46721: LD_ADDR_VAR 0 4
46725: PUSH
46726: LD_INT 2
46728: ST_TO_ADDR
// break ;
46729: GO 46733
// end ;
46731: GO 46704
46733: POP
46734: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46735: LD_VAR 0 1
46739: PPUSH
46740: LD_VAR 0 2
46744: PPUSH
46745: LD_VAR 0 3
46749: PPUSH
46750: LD_VAR 0 4
46754: PPUSH
46755: LD_VAR 0 5
46759: PPUSH
46760: CALL_OW 448
46764: IFFALSE 46799
// begin result := [ chassis , engine , control , weapon ] ;
46766: LD_ADDR_VAR 0 6
46770: PUSH
46771: LD_VAR 0 2
46775: PUSH
46776: LD_VAR 0 3
46780: PUSH
46781: LD_VAR 0 4
46785: PUSH
46786: LD_VAR 0 5
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: ST_TO_ADDR
// exit ;
46797: GO 47211
// end ; _chassis := AvailableChassisList ( factory ) ;
46799: LD_ADDR_VAR 0 9
46803: PUSH
46804: LD_VAR 0 1
46808: PPUSH
46809: CALL_OW 475
46813: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46814: LD_ADDR_VAR 0 11
46818: PUSH
46819: LD_VAR 0 1
46823: PPUSH
46824: CALL_OW 476
46828: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46829: LD_ADDR_VAR 0 12
46833: PUSH
46834: LD_VAR 0 1
46838: PPUSH
46839: CALL_OW 477
46843: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46844: LD_ADDR_VAR 0 10
46848: PUSH
46849: LD_VAR 0 1
46853: PPUSH
46854: CALL_OW 478
46858: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46859: LD_VAR 0 9
46863: NOT
46864: PUSH
46865: LD_VAR 0 11
46869: NOT
46870: OR
46871: PUSH
46872: LD_VAR 0 12
46876: NOT
46877: OR
46878: PUSH
46879: LD_VAR 0 10
46883: NOT
46884: OR
46885: IFFALSE 46920
// begin result := [ chassis , engine , control , weapon ] ;
46887: LD_ADDR_VAR 0 6
46891: PUSH
46892: LD_VAR 0 2
46896: PUSH
46897: LD_VAR 0 3
46901: PUSH
46902: LD_VAR 0 4
46906: PUSH
46907: LD_VAR 0 5
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: ST_TO_ADDR
// exit ;
46918: GO 47211
// end ; if not chassis in _chassis then
46920: LD_VAR 0 2
46924: PUSH
46925: LD_VAR 0 9
46929: IN
46930: NOT
46931: IFFALSE 46957
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46933: LD_ADDR_VAR 0 2
46937: PUSH
46938: LD_VAR 0 9
46942: PUSH
46943: LD_INT 1
46945: PPUSH
46946: LD_VAR 0 9
46950: PPUSH
46951: CALL_OW 12
46955: ARRAY
46956: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46957: LD_VAR 0 2
46961: PPUSH
46962: LD_VAR 0 3
46966: PPUSH
46967: CALL 47216 0 2
46971: NOT
46972: IFFALSE 47031
// repeat engine := _engine [ 1 ] ;
46974: LD_ADDR_VAR 0 3
46978: PUSH
46979: LD_VAR 0 11
46983: PUSH
46984: LD_INT 1
46986: ARRAY
46987: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46988: LD_ADDR_VAR 0 11
46992: PUSH
46993: LD_VAR 0 11
46997: PPUSH
46998: LD_INT 1
47000: PPUSH
47001: CALL_OW 3
47005: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47006: LD_VAR 0 2
47010: PPUSH
47011: LD_VAR 0 3
47015: PPUSH
47016: CALL 47216 0 2
47020: PUSH
47021: LD_VAR 0 11
47025: PUSH
47026: EMPTY
47027: EQUAL
47028: OR
47029: IFFALSE 46974
// if not control in _control then
47031: LD_VAR 0 4
47035: PUSH
47036: LD_VAR 0 12
47040: IN
47041: NOT
47042: IFFALSE 47068
// control := _control [ rand ( 1 , _control ) ] ;
47044: LD_ADDR_VAR 0 4
47048: PUSH
47049: LD_VAR 0 12
47053: PUSH
47054: LD_INT 1
47056: PPUSH
47057: LD_VAR 0 12
47061: PPUSH
47062: CALL_OW 12
47066: ARRAY
47067: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47068: LD_VAR 0 2
47072: PPUSH
47073: LD_VAR 0 5
47077: PPUSH
47078: CALL 47436 0 2
47082: NOT
47083: IFFALSE 47142
// repeat weapon := _weapon [ 1 ] ;
47085: LD_ADDR_VAR 0 5
47089: PUSH
47090: LD_VAR 0 10
47094: PUSH
47095: LD_INT 1
47097: ARRAY
47098: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47099: LD_ADDR_VAR 0 10
47103: PUSH
47104: LD_VAR 0 10
47108: PPUSH
47109: LD_INT 1
47111: PPUSH
47112: CALL_OW 3
47116: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47117: LD_VAR 0 2
47121: PPUSH
47122: LD_VAR 0 5
47126: PPUSH
47127: CALL 47436 0 2
47131: PUSH
47132: LD_VAR 0 10
47136: PUSH
47137: EMPTY
47138: EQUAL
47139: OR
47140: IFFALSE 47085
// result := [ ] ;
47142: LD_ADDR_VAR 0 6
47146: PUSH
47147: EMPTY
47148: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47149: LD_VAR 0 1
47153: PPUSH
47154: LD_VAR 0 2
47158: PPUSH
47159: LD_VAR 0 3
47163: PPUSH
47164: LD_VAR 0 4
47168: PPUSH
47169: LD_VAR 0 5
47173: PPUSH
47174: CALL_OW 448
47178: IFFALSE 47211
// result := [ chassis , engine , control , weapon ] ;
47180: LD_ADDR_VAR 0 6
47184: PUSH
47185: LD_VAR 0 2
47189: PUSH
47190: LD_VAR 0 3
47194: PUSH
47195: LD_VAR 0 4
47199: PUSH
47200: LD_VAR 0 5
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// end ;
47211: LD_VAR 0 6
47215: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47216: LD_INT 0
47218: PPUSH
// if not chassis or not engine then
47219: LD_VAR 0 1
47223: NOT
47224: PUSH
47225: LD_VAR 0 2
47229: NOT
47230: OR
47231: IFFALSE 47235
// exit ;
47233: GO 47431
// case engine of engine_solar :
47235: LD_VAR 0 2
47239: PUSH
47240: LD_INT 2
47242: DOUBLE
47243: EQUAL
47244: IFTRUE 47248
47246: GO 47286
47248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47249: LD_ADDR_VAR 0 3
47253: PUSH
47254: LD_INT 11
47256: PUSH
47257: LD_INT 12
47259: PUSH
47260: LD_INT 13
47262: PUSH
47263: LD_INT 14
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: LD_INT 3
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
47284: GO 47415
47286: LD_INT 1
47288: DOUBLE
47289: EQUAL
47290: IFTRUE 47294
47292: GO 47356
47294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47295: LD_ADDR_VAR 0 3
47299: PUSH
47300: LD_INT 11
47302: PUSH
47303: LD_INT 12
47305: PUSH
47306: LD_INT 13
47308: PUSH
47309: LD_INT 14
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: LD_INT 3
47320: PUSH
47321: LD_INT 4
47323: PUSH
47324: LD_INT 5
47326: PUSH
47327: LD_INT 21
47329: PUSH
47330: LD_INT 23
47332: PUSH
47333: LD_INT 22
47335: PUSH
47336: LD_INT 24
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: ST_TO_ADDR
47354: GO 47415
47356: LD_INT 3
47358: DOUBLE
47359: EQUAL
47360: IFTRUE 47364
47362: GO 47414
47364: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47365: LD_ADDR_VAR 0 3
47369: PUSH
47370: LD_INT 13
47372: PUSH
47373: LD_INT 14
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: LD_INT 4
47384: PUSH
47385: LD_INT 5
47387: PUSH
47388: LD_INT 21
47390: PUSH
47391: LD_INT 22
47393: PUSH
47394: LD_INT 23
47396: PUSH
47397: LD_INT 24
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: ST_TO_ADDR
47412: GO 47415
47414: POP
// result := ( chassis in result ) ;
47415: LD_ADDR_VAR 0 3
47419: PUSH
47420: LD_VAR 0 1
47424: PUSH
47425: LD_VAR 0 3
47429: IN
47430: ST_TO_ADDR
// end ;
47431: LD_VAR 0 3
47435: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47436: LD_INT 0
47438: PPUSH
// if not chassis or not weapon then
47439: LD_VAR 0 1
47443: NOT
47444: PUSH
47445: LD_VAR 0 2
47449: NOT
47450: OR
47451: IFFALSE 47455
// exit ;
47453: GO 48481
// case weapon of us_machine_gun :
47455: LD_VAR 0 2
47459: PUSH
47460: LD_INT 2
47462: DOUBLE
47463: EQUAL
47464: IFTRUE 47468
47466: GO 47498
47468: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47469: LD_ADDR_VAR 0 3
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 3
47482: PUSH
47483: LD_INT 4
47485: PUSH
47486: LD_INT 5
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: ST_TO_ADDR
47496: GO 48465
47498: LD_INT 3
47500: DOUBLE
47501: EQUAL
47502: IFTRUE 47506
47504: GO 47536
47506: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47507: LD_ADDR_VAR 0 3
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: LD_INT 4
47523: PUSH
47524: LD_INT 5
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
47534: GO 48465
47536: LD_INT 11
47538: DOUBLE
47539: EQUAL
47540: IFTRUE 47544
47542: GO 47574
47544: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47545: LD_ADDR_VAR 0 3
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: LD_INT 4
47561: PUSH
47562: LD_INT 5
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: ST_TO_ADDR
47572: GO 48465
47574: LD_INT 4
47576: DOUBLE
47577: EQUAL
47578: IFTRUE 47582
47580: GO 47608
47582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47583: LD_ADDR_VAR 0 3
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 3
47593: PUSH
47594: LD_INT 4
47596: PUSH
47597: LD_INT 5
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: ST_TO_ADDR
47606: GO 48465
47608: LD_INT 5
47610: DOUBLE
47611: EQUAL
47612: IFTRUE 47616
47614: GO 47642
47616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47617: LD_ADDR_VAR 0 3
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 3
47627: PUSH
47628: LD_INT 4
47630: PUSH
47631: LD_INT 5
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: ST_TO_ADDR
47640: GO 48465
47642: LD_INT 9
47644: DOUBLE
47645: EQUAL
47646: IFTRUE 47650
47648: GO 47676
47650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47651: LD_ADDR_VAR 0 3
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: LD_INT 4
47664: PUSH
47665: LD_INT 5
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: ST_TO_ADDR
47674: GO 48465
47676: LD_INT 7
47678: DOUBLE
47679: EQUAL
47680: IFTRUE 47684
47682: GO 47710
47684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47685: LD_ADDR_VAR 0 3
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 3
47695: PUSH
47696: LD_INT 4
47698: PUSH
47699: LD_INT 5
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: ST_TO_ADDR
47708: GO 48465
47710: LD_INT 12
47712: DOUBLE
47713: EQUAL
47714: IFTRUE 47718
47716: GO 47744
47718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47719: LD_ADDR_VAR 0 3
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: LD_INT 4
47732: PUSH
47733: LD_INT 5
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: ST_TO_ADDR
47742: GO 48465
47744: LD_INT 13
47746: DOUBLE
47747: EQUAL
47748: IFTRUE 47752
47750: GO 47778
47752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47753: LD_ADDR_VAR 0 3
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 3
47763: PUSH
47764: LD_INT 4
47766: PUSH
47767: LD_INT 5
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
47776: GO 48465
47778: LD_INT 14
47780: DOUBLE
47781: EQUAL
47782: IFTRUE 47786
47784: GO 47804
47786: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47787: LD_ADDR_VAR 0 3
47791: PUSH
47792: LD_INT 4
47794: PUSH
47795: LD_INT 5
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: ST_TO_ADDR
47802: GO 48465
47804: LD_INT 6
47806: DOUBLE
47807: EQUAL
47808: IFTRUE 47812
47810: GO 47830
47812: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47813: LD_ADDR_VAR 0 3
47817: PUSH
47818: LD_INT 4
47820: PUSH
47821: LD_INT 5
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: ST_TO_ADDR
47828: GO 48465
47830: LD_INT 10
47832: DOUBLE
47833: EQUAL
47834: IFTRUE 47838
47836: GO 47856
47838: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47839: LD_ADDR_VAR 0 3
47843: PUSH
47844: LD_INT 4
47846: PUSH
47847: LD_INT 5
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: ST_TO_ADDR
47854: GO 48465
47856: LD_INT 22
47858: DOUBLE
47859: EQUAL
47860: IFTRUE 47864
47862: GO 47890
47864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47865: LD_ADDR_VAR 0 3
47869: PUSH
47870: LD_INT 11
47872: PUSH
47873: LD_INT 12
47875: PUSH
47876: LD_INT 13
47878: PUSH
47879: LD_INT 14
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: ST_TO_ADDR
47888: GO 48465
47890: LD_INT 23
47892: DOUBLE
47893: EQUAL
47894: IFTRUE 47898
47896: GO 47924
47898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47899: LD_ADDR_VAR 0 3
47903: PUSH
47904: LD_INT 11
47906: PUSH
47907: LD_INT 12
47909: PUSH
47910: LD_INT 13
47912: PUSH
47913: LD_INT 14
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: ST_TO_ADDR
47922: GO 48465
47924: LD_INT 24
47926: DOUBLE
47927: EQUAL
47928: IFTRUE 47932
47930: GO 47958
47932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47933: LD_ADDR_VAR 0 3
47937: PUSH
47938: LD_INT 11
47940: PUSH
47941: LD_INT 12
47943: PUSH
47944: LD_INT 13
47946: PUSH
47947: LD_INT 14
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: ST_TO_ADDR
47956: GO 48465
47958: LD_INT 30
47960: DOUBLE
47961: EQUAL
47962: IFTRUE 47966
47964: GO 47992
47966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47967: LD_ADDR_VAR 0 3
47971: PUSH
47972: LD_INT 11
47974: PUSH
47975: LD_INT 12
47977: PUSH
47978: LD_INT 13
47980: PUSH
47981: LD_INT 14
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
47990: GO 48465
47992: LD_INT 25
47994: DOUBLE
47995: EQUAL
47996: IFTRUE 48000
47998: GO 48018
48000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48001: LD_ADDR_VAR 0 3
48005: PUSH
48006: LD_INT 13
48008: PUSH
48009: LD_INT 14
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: ST_TO_ADDR
48016: GO 48465
48018: LD_INT 27
48020: DOUBLE
48021: EQUAL
48022: IFTRUE 48026
48024: GO 48044
48026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48027: LD_ADDR_VAR 0 3
48031: PUSH
48032: LD_INT 13
48034: PUSH
48035: LD_INT 14
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: ST_TO_ADDR
48042: GO 48465
48044: LD_INT 28
48046: DOUBLE
48047: EQUAL
48048: IFTRUE 48052
48050: GO 48070
48052: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48053: LD_ADDR_VAR 0 3
48057: PUSH
48058: LD_INT 13
48060: PUSH
48061: LD_INT 14
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: ST_TO_ADDR
48068: GO 48465
48070: LD_INT 29
48072: DOUBLE
48073: EQUAL
48074: IFTRUE 48078
48076: GO 48096
48078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48079: LD_ADDR_VAR 0 3
48083: PUSH
48084: LD_INT 13
48086: PUSH
48087: LD_INT 14
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: ST_TO_ADDR
48094: GO 48465
48096: LD_INT 31
48098: DOUBLE
48099: EQUAL
48100: IFTRUE 48104
48102: GO 48122
48104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48105: LD_ADDR_VAR 0 3
48109: PUSH
48110: LD_INT 13
48112: PUSH
48113: LD_INT 14
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: ST_TO_ADDR
48120: GO 48465
48122: LD_INT 26
48124: DOUBLE
48125: EQUAL
48126: IFTRUE 48130
48128: GO 48148
48130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48131: LD_ADDR_VAR 0 3
48135: PUSH
48136: LD_INT 13
48138: PUSH
48139: LD_INT 14
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: ST_TO_ADDR
48146: GO 48465
48148: LD_INT 42
48150: DOUBLE
48151: EQUAL
48152: IFTRUE 48156
48154: GO 48182
48156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48157: LD_ADDR_VAR 0 3
48161: PUSH
48162: LD_INT 21
48164: PUSH
48165: LD_INT 22
48167: PUSH
48168: LD_INT 23
48170: PUSH
48171: LD_INT 24
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
48180: GO 48465
48182: LD_INT 43
48184: DOUBLE
48185: EQUAL
48186: IFTRUE 48190
48188: GO 48216
48190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48191: LD_ADDR_VAR 0 3
48195: PUSH
48196: LD_INT 21
48198: PUSH
48199: LD_INT 22
48201: PUSH
48202: LD_INT 23
48204: PUSH
48205: LD_INT 24
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: ST_TO_ADDR
48214: GO 48465
48216: LD_INT 44
48218: DOUBLE
48219: EQUAL
48220: IFTRUE 48224
48222: GO 48250
48224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48225: LD_ADDR_VAR 0 3
48229: PUSH
48230: LD_INT 21
48232: PUSH
48233: LD_INT 22
48235: PUSH
48236: LD_INT 23
48238: PUSH
48239: LD_INT 24
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: ST_TO_ADDR
48248: GO 48465
48250: LD_INT 45
48252: DOUBLE
48253: EQUAL
48254: IFTRUE 48258
48256: GO 48284
48258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48259: LD_ADDR_VAR 0 3
48263: PUSH
48264: LD_INT 21
48266: PUSH
48267: LD_INT 22
48269: PUSH
48270: LD_INT 23
48272: PUSH
48273: LD_INT 24
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: ST_TO_ADDR
48282: GO 48465
48284: LD_INT 49
48286: DOUBLE
48287: EQUAL
48288: IFTRUE 48292
48290: GO 48318
48292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48293: LD_ADDR_VAR 0 3
48297: PUSH
48298: LD_INT 21
48300: PUSH
48301: LD_INT 22
48303: PUSH
48304: LD_INT 23
48306: PUSH
48307: LD_INT 24
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: ST_TO_ADDR
48316: GO 48465
48318: LD_INT 51
48320: DOUBLE
48321: EQUAL
48322: IFTRUE 48326
48324: GO 48352
48326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48327: LD_ADDR_VAR 0 3
48331: PUSH
48332: LD_INT 21
48334: PUSH
48335: LD_INT 22
48337: PUSH
48338: LD_INT 23
48340: PUSH
48341: LD_INT 24
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: ST_TO_ADDR
48350: GO 48465
48352: LD_INT 52
48354: DOUBLE
48355: EQUAL
48356: IFTRUE 48360
48358: GO 48386
48360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48361: LD_ADDR_VAR 0 3
48365: PUSH
48366: LD_INT 21
48368: PUSH
48369: LD_INT 22
48371: PUSH
48372: LD_INT 23
48374: PUSH
48375: LD_INT 24
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: ST_TO_ADDR
48384: GO 48465
48386: LD_INT 53
48388: DOUBLE
48389: EQUAL
48390: IFTRUE 48394
48392: GO 48412
48394: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48395: LD_ADDR_VAR 0 3
48399: PUSH
48400: LD_INT 23
48402: PUSH
48403: LD_INT 24
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: ST_TO_ADDR
48410: GO 48465
48412: LD_INT 46
48414: DOUBLE
48415: EQUAL
48416: IFTRUE 48420
48418: GO 48438
48420: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48421: LD_ADDR_VAR 0 3
48425: PUSH
48426: LD_INT 23
48428: PUSH
48429: LD_INT 24
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: ST_TO_ADDR
48436: GO 48465
48438: LD_INT 47
48440: DOUBLE
48441: EQUAL
48442: IFTRUE 48446
48444: GO 48464
48446: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48447: LD_ADDR_VAR 0 3
48451: PUSH
48452: LD_INT 23
48454: PUSH
48455: LD_INT 24
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: ST_TO_ADDR
48462: GO 48465
48464: POP
// result := ( chassis in result ) ;
48465: LD_ADDR_VAR 0 3
48469: PUSH
48470: LD_VAR 0 1
48474: PUSH
48475: LD_VAR 0 3
48479: IN
48480: ST_TO_ADDR
// end ;
48481: LD_VAR 0 3
48485: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48486: LD_INT 0
48488: PPUSH
48489: PPUSH
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
48494: PPUSH
// result := array ;
48495: LD_ADDR_VAR 0 5
48499: PUSH
48500: LD_VAR 0 1
48504: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48505: LD_VAR 0 1
48509: NOT
48510: PUSH
48511: LD_VAR 0 2
48515: NOT
48516: OR
48517: PUSH
48518: LD_VAR 0 3
48522: NOT
48523: OR
48524: PUSH
48525: LD_VAR 0 2
48529: PUSH
48530: LD_VAR 0 1
48534: GREATER
48535: OR
48536: PUSH
48537: LD_VAR 0 3
48541: PUSH
48542: LD_VAR 0 1
48546: GREATER
48547: OR
48548: IFFALSE 48552
// exit ;
48550: GO 48848
// if direction then
48552: LD_VAR 0 4
48556: IFFALSE 48620
// begin d := 1 ;
48558: LD_ADDR_VAR 0 9
48562: PUSH
48563: LD_INT 1
48565: ST_TO_ADDR
// if i_from > i_to then
48566: LD_VAR 0 2
48570: PUSH
48571: LD_VAR 0 3
48575: GREATER
48576: IFFALSE 48602
// length := ( array - i_from ) + i_to else
48578: LD_ADDR_VAR 0 11
48582: PUSH
48583: LD_VAR 0 1
48587: PUSH
48588: LD_VAR 0 2
48592: MINUS
48593: PUSH
48594: LD_VAR 0 3
48598: PLUS
48599: ST_TO_ADDR
48600: GO 48618
// length := i_to - i_from ;
48602: LD_ADDR_VAR 0 11
48606: PUSH
48607: LD_VAR 0 3
48611: PUSH
48612: LD_VAR 0 2
48616: MINUS
48617: ST_TO_ADDR
// end else
48618: GO 48681
// begin d := - 1 ;
48620: LD_ADDR_VAR 0 9
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: ST_TO_ADDR
// if i_from > i_to then
48629: LD_VAR 0 2
48633: PUSH
48634: LD_VAR 0 3
48638: GREATER
48639: IFFALSE 48659
// length := i_from - i_to else
48641: LD_ADDR_VAR 0 11
48645: PUSH
48646: LD_VAR 0 2
48650: PUSH
48651: LD_VAR 0 3
48655: MINUS
48656: ST_TO_ADDR
48657: GO 48681
// length := ( array - i_to ) + i_from ;
48659: LD_ADDR_VAR 0 11
48663: PUSH
48664: LD_VAR 0 1
48668: PUSH
48669: LD_VAR 0 3
48673: MINUS
48674: PUSH
48675: LD_VAR 0 2
48679: PLUS
48680: ST_TO_ADDR
// end ; if not length then
48681: LD_VAR 0 11
48685: NOT
48686: IFFALSE 48690
// exit ;
48688: GO 48848
// tmp := array ;
48690: LD_ADDR_VAR 0 10
48694: PUSH
48695: LD_VAR 0 1
48699: ST_TO_ADDR
// for i = 1 to length do
48700: LD_ADDR_VAR 0 6
48704: PUSH
48705: DOUBLE
48706: LD_INT 1
48708: DEC
48709: ST_TO_ADDR
48710: LD_VAR 0 11
48714: PUSH
48715: FOR_TO
48716: IFFALSE 48836
// begin for j = 1 to array do
48718: LD_ADDR_VAR 0 7
48722: PUSH
48723: DOUBLE
48724: LD_INT 1
48726: DEC
48727: ST_TO_ADDR
48728: LD_VAR 0 1
48732: PUSH
48733: FOR_TO
48734: IFFALSE 48822
// begin k := j + d ;
48736: LD_ADDR_VAR 0 8
48740: PUSH
48741: LD_VAR 0 7
48745: PUSH
48746: LD_VAR 0 9
48750: PLUS
48751: ST_TO_ADDR
// if k > array then
48752: LD_VAR 0 8
48756: PUSH
48757: LD_VAR 0 1
48761: GREATER
48762: IFFALSE 48772
// k := 1 ;
48764: LD_ADDR_VAR 0 8
48768: PUSH
48769: LD_INT 1
48771: ST_TO_ADDR
// if not k then
48772: LD_VAR 0 8
48776: NOT
48777: IFFALSE 48789
// k := array ;
48779: LD_ADDR_VAR 0 8
48783: PUSH
48784: LD_VAR 0 1
48788: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48789: LD_ADDR_VAR 0 10
48793: PUSH
48794: LD_VAR 0 10
48798: PPUSH
48799: LD_VAR 0 8
48803: PPUSH
48804: LD_VAR 0 1
48808: PUSH
48809: LD_VAR 0 7
48813: ARRAY
48814: PPUSH
48815: CALL_OW 1
48819: ST_TO_ADDR
// end ;
48820: GO 48733
48822: POP
48823: POP
// array := tmp ;
48824: LD_ADDR_VAR 0 1
48828: PUSH
48829: LD_VAR 0 10
48833: ST_TO_ADDR
// end ;
48834: GO 48715
48836: POP
48837: POP
// result := array ;
48838: LD_ADDR_VAR 0 5
48842: PUSH
48843: LD_VAR 0 1
48847: ST_TO_ADDR
// end ;
48848: LD_VAR 0 5
48852: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48853: LD_INT 0
48855: PPUSH
48856: PPUSH
// result := 0 ;
48857: LD_ADDR_VAR 0 3
48861: PUSH
48862: LD_INT 0
48864: ST_TO_ADDR
// if not array or not value in array then
48865: LD_VAR 0 1
48869: NOT
48870: PUSH
48871: LD_VAR 0 2
48875: PUSH
48876: LD_VAR 0 1
48880: IN
48881: NOT
48882: OR
48883: IFFALSE 48887
// exit ;
48885: GO 48941
// for i = 1 to array do
48887: LD_ADDR_VAR 0 4
48891: PUSH
48892: DOUBLE
48893: LD_INT 1
48895: DEC
48896: ST_TO_ADDR
48897: LD_VAR 0 1
48901: PUSH
48902: FOR_TO
48903: IFFALSE 48939
// if value = array [ i ] then
48905: LD_VAR 0 2
48909: PUSH
48910: LD_VAR 0 1
48914: PUSH
48915: LD_VAR 0 4
48919: ARRAY
48920: EQUAL
48921: IFFALSE 48937
// begin result := i ;
48923: LD_ADDR_VAR 0 3
48927: PUSH
48928: LD_VAR 0 4
48932: ST_TO_ADDR
// exit ;
48933: POP
48934: POP
48935: GO 48941
// end ;
48937: GO 48902
48939: POP
48940: POP
// end ;
48941: LD_VAR 0 3
48945: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48946: LD_INT 0
48948: PPUSH
// vc_chassis := chassis ;
48949: LD_ADDR_OWVAR 37
48953: PUSH
48954: LD_VAR 0 1
48958: ST_TO_ADDR
// vc_engine := engine ;
48959: LD_ADDR_OWVAR 39
48963: PUSH
48964: LD_VAR 0 2
48968: ST_TO_ADDR
// vc_control := control ;
48969: LD_ADDR_OWVAR 38
48973: PUSH
48974: LD_VAR 0 3
48978: ST_TO_ADDR
// vc_weapon := weapon ;
48979: LD_ADDR_OWVAR 40
48983: PUSH
48984: LD_VAR 0 4
48988: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48989: LD_ADDR_OWVAR 41
48993: PUSH
48994: LD_VAR 0 5
48998: ST_TO_ADDR
// end ;
48999: LD_VAR 0 6
49003: RET
// export function WantPlant ( unit ) ; var task ; begin
49004: LD_INT 0
49006: PPUSH
49007: PPUSH
// result := false ;
49008: LD_ADDR_VAR 0 2
49012: PUSH
49013: LD_INT 0
49015: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49016: LD_ADDR_VAR 0 3
49020: PUSH
49021: LD_VAR 0 1
49025: PPUSH
49026: CALL_OW 437
49030: ST_TO_ADDR
// if task then
49031: LD_VAR 0 3
49035: IFFALSE 49063
// if task [ 1 ] [ 1 ] = p then
49037: LD_VAR 0 3
49041: PUSH
49042: LD_INT 1
49044: ARRAY
49045: PUSH
49046: LD_INT 1
49048: ARRAY
49049: PUSH
49050: LD_STRING p
49052: EQUAL
49053: IFFALSE 49063
// result := true ;
49055: LD_ADDR_VAR 0 2
49059: PUSH
49060: LD_INT 1
49062: ST_TO_ADDR
// end ;
49063: LD_VAR 0 2
49067: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49068: LD_INT 0
49070: PPUSH
49071: PPUSH
49072: PPUSH
49073: PPUSH
// if pos < 1 then
49074: LD_VAR 0 2
49078: PUSH
49079: LD_INT 1
49081: LESS
49082: IFFALSE 49086
// exit ;
49084: GO 49389
// if pos = 1 then
49086: LD_VAR 0 2
49090: PUSH
49091: LD_INT 1
49093: EQUAL
49094: IFFALSE 49127
// result := Replace ( arr , pos [ 1 ] , value ) else
49096: LD_ADDR_VAR 0 4
49100: PUSH
49101: LD_VAR 0 1
49105: PPUSH
49106: LD_VAR 0 2
49110: PUSH
49111: LD_INT 1
49113: ARRAY
49114: PPUSH
49115: LD_VAR 0 3
49119: PPUSH
49120: CALL_OW 1
49124: ST_TO_ADDR
49125: GO 49389
// begin tmp := arr ;
49127: LD_ADDR_VAR 0 6
49131: PUSH
49132: LD_VAR 0 1
49136: ST_TO_ADDR
// s_arr := [ tmp ] ;
49137: LD_ADDR_VAR 0 7
49141: PUSH
49142: LD_VAR 0 6
49146: PUSH
49147: EMPTY
49148: LIST
49149: ST_TO_ADDR
// for i = 1 to pos - 1 do
49150: LD_ADDR_VAR 0 5
49154: PUSH
49155: DOUBLE
49156: LD_INT 1
49158: DEC
49159: ST_TO_ADDR
49160: LD_VAR 0 2
49164: PUSH
49165: LD_INT 1
49167: MINUS
49168: PUSH
49169: FOR_TO
49170: IFFALSE 49215
// begin tmp := tmp [ pos [ i ] ] ;
49172: LD_ADDR_VAR 0 6
49176: PUSH
49177: LD_VAR 0 6
49181: PUSH
49182: LD_VAR 0 2
49186: PUSH
49187: LD_VAR 0 5
49191: ARRAY
49192: ARRAY
49193: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49194: LD_ADDR_VAR 0 7
49198: PUSH
49199: LD_VAR 0 7
49203: PUSH
49204: LD_VAR 0 6
49208: PUSH
49209: EMPTY
49210: LIST
49211: ADD
49212: ST_TO_ADDR
// end ;
49213: GO 49169
49215: POP
49216: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49217: LD_ADDR_VAR 0 6
49221: PUSH
49222: LD_VAR 0 6
49226: PPUSH
49227: LD_VAR 0 2
49231: PUSH
49232: LD_VAR 0 2
49236: ARRAY
49237: PPUSH
49238: LD_VAR 0 3
49242: PPUSH
49243: CALL_OW 1
49247: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49248: LD_ADDR_VAR 0 7
49252: PUSH
49253: LD_VAR 0 7
49257: PPUSH
49258: LD_VAR 0 7
49262: PPUSH
49263: LD_VAR 0 6
49267: PPUSH
49268: CALL_OW 1
49272: ST_TO_ADDR
// for i = s_arr downto 2 do
49273: LD_ADDR_VAR 0 5
49277: PUSH
49278: DOUBLE
49279: LD_VAR 0 7
49283: INC
49284: ST_TO_ADDR
49285: LD_INT 2
49287: PUSH
49288: FOR_DOWNTO
49289: IFFALSE 49373
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49291: LD_ADDR_VAR 0 6
49295: PUSH
49296: LD_VAR 0 7
49300: PUSH
49301: LD_VAR 0 5
49305: PUSH
49306: LD_INT 1
49308: MINUS
49309: ARRAY
49310: PPUSH
49311: LD_VAR 0 2
49315: PUSH
49316: LD_VAR 0 5
49320: PUSH
49321: LD_INT 1
49323: MINUS
49324: ARRAY
49325: PPUSH
49326: LD_VAR 0 7
49330: PUSH
49331: LD_VAR 0 5
49335: ARRAY
49336: PPUSH
49337: CALL_OW 1
49341: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49342: LD_ADDR_VAR 0 7
49346: PUSH
49347: LD_VAR 0 7
49351: PPUSH
49352: LD_VAR 0 5
49356: PUSH
49357: LD_INT 1
49359: MINUS
49360: PPUSH
49361: LD_VAR 0 6
49365: PPUSH
49366: CALL_OW 1
49370: ST_TO_ADDR
// end ;
49371: GO 49288
49373: POP
49374: POP
// result := s_arr [ 1 ] ;
49375: LD_ADDR_VAR 0 4
49379: PUSH
49380: LD_VAR 0 7
49384: PUSH
49385: LD_INT 1
49387: ARRAY
49388: ST_TO_ADDR
// end ; end ;
49389: LD_VAR 0 4
49393: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49394: LD_INT 0
49396: PPUSH
49397: PPUSH
// if not list then
49398: LD_VAR 0 1
49402: NOT
49403: IFFALSE 49407
// exit ;
49405: GO 49498
// i := list [ pos1 ] ;
49407: LD_ADDR_VAR 0 5
49411: PUSH
49412: LD_VAR 0 1
49416: PUSH
49417: LD_VAR 0 2
49421: ARRAY
49422: ST_TO_ADDR
// if not i then
49423: LD_VAR 0 5
49427: NOT
49428: IFFALSE 49432
// exit ;
49430: GO 49498
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49432: LD_ADDR_VAR 0 1
49436: PUSH
49437: LD_VAR 0 1
49441: PPUSH
49442: LD_VAR 0 2
49446: PPUSH
49447: LD_VAR 0 1
49451: PUSH
49452: LD_VAR 0 3
49456: ARRAY
49457: PPUSH
49458: CALL_OW 1
49462: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49463: LD_ADDR_VAR 0 1
49467: PUSH
49468: LD_VAR 0 1
49472: PPUSH
49473: LD_VAR 0 3
49477: PPUSH
49478: LD_VAR 0 5
49482: PPUSH
49483: CALL_OW 1
49487: ST_TO_ADDR
// result := list ;
49488: LD_ADDR_VAR 0 4
49492: PUSH
49493: LD_VAR 0 1
49497: ST_TO_ADDR
// end ;
49498: LD_VAR 0 4
49502: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49503: LD_INT 0
49505: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49506: LD_ADDR_VAR 0 5
49510: PUSH
49511: LD_VAR 0 1
49515: PPUSH
49516: CALL_OW 250
49520: PPUSH
49521: LD_VAR 0 1
49525: PPUSH
49526: CALL_OW 251
49530: PPUSH
49531: LD_VAR 0 2
49535: PPUSH
49536: LD_VAR 0 3
49540: PPUSH
49541: LD_VAR 0 4
49545: PPUSH
49546: CALL 49556 0 5
49550: ST_TO_ADDR
// end ;
49551: LD_VAR 0 5
49555: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49556: LD_INT 0
49558: PPUSH
49559: PPUSH
49560: PPUSH
49561: PPUSH
// if not list then
49562: LD_VAR 0 3
49566: NOT
49567: IFFALSE 49571
// exit ;
49569: GO 49959
// result := [ ] ;
49571: LD_ADDR_VAR 0 6
49575: PUSH
49576: EMPTY
49577: ST_TO_ADDR
// for i in list do
49578: LD_ADDR_VAR 0 7
49582: PUSH
49583: LD_VAR 0 3
49587: PUSH
49588: FOR_IN
49589: IFFALSE 49791
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49591: LD_ADDR_VAR 0 9
49595: PUSH
49596: LD_VAR 0 7
49600: PPUSH
49601: LD_VAR 0 1
49605: PPUSH
49606: LD_VAR 0 2
49610: PPUSH
49611: CALL_OW 297
49615: ST_TO_ADDR
// if not result then
49616: LD_VAR 0 6
49620: NOT
49621: IFFALSE 49647
// result := [ [ i , tmp ] ] else
49623: LD_ADDR_VAR 0 6
49627: PUSH
49628: LD_VAR 0 7
49632: PUSH
49633: LD_VAR 0 9
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: ST_TO_ADDR
49645: GO 49789
// begin if result [ result ] [ 2 ] < tmp then
49647: LD_VAR 0 6
49651: PUSH
49652: LD_VAR 0 6
49656: ARRAY
49657: PUSH
49658: LD_INT 2
49660: ARRAY
49661: PUSH
49662: LD_VAR 0 9
49666: LESS
49667: IFFALSE 49709
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49669: LD_ADDR_VAR 0 6
49673: PUSH
49674: LD_VAR 0 6
49678: PPUSH
49679: LD_VAR 0 6
49683: PUSH
49684: LD_INT 1
49686: PLUS
49687: PPUSH
49688: LD_VAR 0 7
49692: PUSH
49693: LD_VAR 0 9
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PPUSH
49702: CALL_OW 2
49706: ST_TO_ADDR
49707: GO 49789
// for j = 1 to result do
49709: LD_ADDR_VAR 0 8
49713: PUSH
49714: DOUBLE
49715: LD_INT 1
49717: DEC
49718: ST_TO_ADDR
49719: LD_VAR 0 6
49723: PUSH
49724: FOR_TO
49725: IFFALSE 49787
// begin if tmp < result [ j ] [ 2 ] then
49727: LD_VAR 0 9
49731: PUSH
49732: LD_VAR 0 6
49736: PUSH
49737: LD_VAR 0 8
49741: ARRAY
49742: PUSH
49743: LD_INT 2
49745: ARRAY
49746: LESS
49747: IFFALSE 49785
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49749: LD_ADDR_VAR 0 6
49753: PUSH
49754: LD_VAR 0 6
49758: PPUSH
49759: LD_VAR 0 8
49763: PPUSH
49764: LD_VAR 0 7
49768: PUSH
49769: LD_VAR 0 9
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PPUSH
49778: CALL_OW 2
49782: ST_TO_ADDR
// break ;
49783: GO 49787
// end ; end ;
49785: GO 49724
49787: POP
49788: POP
// end ; end ;
49789: GO 49588
49791: POP
49792: POP
// if result and not asc then
49793: LD_VAR 0 6
49797: PUSH
49798: LD_VAR 0 4
49802: NOT
49803: AND
49804: IFFALSE 49879
// begin tmp := result ;
49806: LD_ADDR_VAR 0 9
49810: PUSH
49811: LD_VAR 0 6
49815: ST_TO_ADDR
// for i = tmp downto 1 do
49816: LD_ADDR_VAR 0 7
49820: PUSH
49821: DOUBLE
49822: LD_VAR 0 9
49826: INC
49827: ST_TO_ADDR
49828: LD_INT 1
49830: PUSH
49831: FOR_DOWNTO
49832: IFFALSE 49877
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49834: LD_ADDR_VAR 0 6
49838: PUSH
49839: LD_VAR 0 6
49843: PPUSH
49844: LD_VAR 0 9
49848: PUSH
49849: LD_VAR 0 7
49853: MINUS
49854: PUSH
49855: LD_INT 1
49857: PLUS
49858: PPUSH
49859: LD_VAR 0 9
49863: PUSH
49864: LD_VAR 0 7
49868: ARRAY
49869: PPUSH
49870: CALL_OW 1
49874: ST_TO_ADDR
49875: GO 49831
49877: POP
49878: POP
// end ; tmp := [ ] ;
49879: LD_ADDR_VAR 0 9
49883: PUSH
49884: EMPTY
49885: ST_TO_ADDR
// if mode then
49886: LD_VAR 0 5
49890: IFFALSE 49959
// begin for i = 1 to result do
49892: LD_ADDR_VAR 0 7
49896: PUSH
49897: DOUBLE
49898: LD_INT 1
49900: DEC
49901: ST_TO_ADDR
49902: LD_VAR 0 6
49906: PUSH
49907: FOR_TO
49908: IFFALSE 49947
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49910: LD_ADDR_VAR 0 9
49914: PUSH
49915: LD_VAR 0 9
49919: PPUSH
49920: LD_VAR 0 7
49924: PPUSH
49925: LD_VAR 0 6
49929: PUSH
49930: LD_VAR 0 7
49934: ARRAY
49935: PUSH
49936: LD_INT 1
49938: ARRAY
49939: PPUSH
49940: CALL_OW 1
49944: ST_TO_ADDR
49945: GO 49907
49947: POP
49948: POP
// result := tmp ;
49949: LD_ADDR_VAR 0 6
49953: PUSH
49954: LD_VAR 0 9
49958: ST_TO_ADDR
// end ; end ;
49959: LD_VAR 0 6
49963: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49964: LD_INT 0
49966: PPUSH
49967: PPUSH
49968: PPUSH
49969: PPUSH
49970: PPUSH
49971: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49972: LD_ADDR_VAR 0 5
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: ST_TO_ADDR
// if not x or not y then
49994: LD_VAR 0 2
49998: NOT
49999: PUSH
50000: LD_VAR 0 3
50004: NOT
50005: OR
50006: IFFALSE 50010
// exit ;
50008: GO 51656
// if not range then
50010: LD_VAR 0 4
50014: NOT
50015: IFFALSE 50025
// range := 10 ;
50017: LD_ADDR_VAR 0 4
50021: PUSH
50022: LD_INT 10
50024: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50025: LD_ADDR_VAR 0 8
50029: PUSH
50030: LD_INT 81
50032: PUSH
50033: LD_VAR 0 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 92
50044: PUSH
50045: LD_VAR 0 2
50049: PUSH
50050: LD_VAR 0 3
50054: PUSH
50055: LD_VAR 0 4
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 3
50068: PUSH
50069: LD_INT 21
50071: PUSH
50072: LD_INT 3
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: LIST
50087: PPUSH
50088: CALL_OW 69
50092: ST_TO_ADDR
// if not tmp then
50093: LD_VAR 0 8
50097: NOT
50098: IFFALSE 50102
// exit ;
50100: GO 51656
// for i in tmp do
50102: LD_ADDR_VAR 0 6
50106: PUSH
50107: LD_VAR 0 8
50111: PUSH
50112: FOR_IN
50113: IFFALSE 51631
// begin points := [ 0 , 0 , 0 ] ;
50115: LD_ADDR_VAR 0 9
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: LIST
50133: ST_TO_ADDR
// bpoints := 1 ;
50134: LD_ADDR_VAR 0 10
50138: PUSH
50139: LD_INT 1
50141: ST_TO_ADDR
// case GetType ( i ) of unit_human :
50142: LD_VAR 0 6
50146: PPUSH
50147: CALL_OW 247
50151: PUSH
50152: LD_INT 1
50154: DOUBLE
50155: EQUAL
50156: IFTRUE 50160
50158: GO 50738
50160: POP
// begin if GetClass ( i ) = 1 then
50161: LD_VAR 0 6
50165: PPUSH
50166: CALL_OW 257
50170: PUSH
50171: LD_INT 1
50173: EQUAL
50174: IFFALSE 50195
// points := [ 10 , 5 , 3 ] ;
50176: LD_ADDR_VAR 0 9
50180: PUSH
50181: LD_INT 10
50183: PUSH
50184: LD_INT 5
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
50195: LD_VAR 0 6
50199: PPUSH
50200: CALL_OW 257
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: LD_INT 3
50210: PUSH
50211: LD_INT 4
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: LIST
50218: IN
50219: IFFALSE 50240
// points := [ 3 , 2 , 1 ] ;
50221: LD_ADDR_VAR 0 9
50225: PUSH
50226: LD_INT 3
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50240: LD_VAR 0 6
50244: PPUSH
50245: CALL_OW 257
50249: PUSH
50250: LD_INT 5
50252: EQUAL
50253: IFFALSE 50274
// points := [ 130 , 5 , 2 ] ;
50255: LD_ADDR_VAR 0 9
50259: PUSH
50260: LD_INT 130
50262: PUSH
50263: LD_INT 5
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: LIST
50273: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50274: LD_VAR 0 6
50278: PPUSH
50279: CALL_OW 257
50283: PUSH
50284: LD_INT 8
50286: EQUAL
50287: IFFALSE 50308
// points := [ 35 , 35 , 30 ] ;
50289: LD_ADDR_VAR 0 9
50293: PUSH
50294: LD_INT 35
50296: PUSH
50297: LD_INT 35
50299: PUSH
50300: LD_INT 30
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: LIST
50307: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50308: LD_VAR 0 6
50312: PPUSH
50313: CALL_OW 257
50317: PUSH
50318: LD_INT 9
50320: EQUAL
50321: IFFALSE 50342
// points := [ 20 , 55 , 40 ] ;
50323: LD_ADDR_VAR 0 9
50327: PUSH
50328: LD_INT 20
50330: PUSH
50331: LD_INT 55
50333: PUSH
50334: LD_INT 40
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50342: LD_VAR 0 6
50346: PPUSH
50347: CALL_OW 257
50351: PUSH
50352: LD_INT 12
50354: PUSH
50355: LD_INT 16
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: IN
50362: IFFALSE 50383
// points := [ 5 , 3 , 2 ] ;
50364: LD_ADDR_VAR 0 9
50368: PUSH
50369: LD_INT 5
50371: PUSH
50372: LD_INT 3
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: LIST
50382: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50383: LD_VAR 0 6
50387: PPUSH
50388: CALL_OW 257
50392: PUSH
50393: LD_INT 17
50395: EQUAL
50396: IFFALSE 50417
// points := [ 100 , 50 , 75 ] ;
50398: LD_ADDR_VAR 0 9
50402: PUSH
50403: LD_INT 100
50405: PUSH
50406: LD_INT 50
50408: PUSH
50409: LD_INT 75
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50417: LD_VAR 0 6
50421: PPUSH
50422: CALL_OW 257
50426: PUSH
50427: LD_INT 15
50429: EQUAL
50430: IFFALSE 50451
// points := [ 10 , 5 , 3 ] ;
50432: LD_ADDR_VAR 0 9
50436: PUSH
50437: LD_INT 10
50439: PUSH
50440: LD_INT 5
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50451: LD_VAR 0 6
50455: PPUSH
50456: CALL_OW 257
50460: PUSH
50461: LD_INT 14
50463: EQUAL
50464: IFFALSE 50485
// points := [ 10 , 0 , 0 ] ;
50466: LD_ADDR_VAR 0 9
50470: PUSH
50471: LD_INT 10
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: LIST
50484: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50485: LD_VAR 0 6
50489: PPUSH
50490: CALL_OW 257
50494: PUSH
50495: LD_INT 11
50497: EQUAL
50498: IFFALSE 50519
// points := [ 30 , 10 , 5 ] ;
50500: LD_ADDR_VAR 0 9
50504: PUSH
50505: LD_INT 30
50507: PUSH
50508: LD_INT 10
50510: PUSH
50511: LD_INT 5
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: LIST
50518: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50519: LD_VAR 0 1
50523: PPUSH
50524: LD_INT 5
50526: PPUSH
50527: CALL_OW 321
50531: PUSH
50532: LD_INT 2
50534: EQUAL
50535: IFFALSE 50552
// bpoints := bpoints * 1.8 ;
50537: LD_ADDR_VAR 0 10
50541: PUSH
50542: LD_VAR 0 10
50546: PUSH
50547: LD_REAL  1.80000000000000E+0000
50550: MUL
50551: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50552: LD_VAR 0 6
50556: PPUSH
50557: CALL_OW 257
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: LD_INT 3
50570: PUSH
50571: LD_INT 4
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: IN
50580: PUSH
50581: LD_VAR 0 1
50585: PPUSH
50586: LD_INT 51
50588: PPUSH
50589: CALL_OW 321
50593: PUSH
50594: LD_INT 2
50596: EQUAL
50597: AND
50598: IFFALSE 50615
// bpoints := bpoints * 1.2 ;
50600: LD_ADDR_VAR 0 10
50604: PUSH
50605: LD_VAR 0 10
50609: PUSH
50610: LD_REAL  1.20000000000000E+0000
50613: MUL
50614: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50615: LD_VAR 0 6
50619: PPUSH
50620: CALL_OW 257
50624: PUSH
50625: LD_INT 5
50627: PUSH
50628: LD_INT 7
50630: PUSH
50631: LD_INT 9
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: IN
50639: PUSH
50640: LD_VAR 0 1
50644: PPUSH
50645: LD_INT 52
50647: PPUSH
50648: CALL_OW 321
50652: PUSH
50653: LD_INT 2
50655: EQUAL
50656: AND
50657: IFFALSE 50674
// bpoints := bpoints * 1.5 ;
50659: LD_ADDR_VAR 0 10
50663: PUSH
50664: LD_VAR 0 10
50668: PUSH
50669: LD_REAL  1.50000000000000E+0000
50672: MUL
50673: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50674: LD_VAR 0 1
50678: PPUSH
50679: LD_INT 66
50681: PPUSH
50682: CALL_OW 321
50686: PUSH
50687: LD_INT 2
50689: EQUAL
50690: IFFALSE 50707
// bpoints := bpoints * 1.1 ;
50692: LD_ADDR_VAR 0 10
50696: PUSH
50697: LD_VAR 0 10
50701: PUSH
50702: LD_REAL  1.10000000000000E+0000
50705: MUL
50706: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50707: LD_ADDR_VAR 0 10
50711: PUSH
50712: LD_VAR 0 10
50716: PUSH
50717: LD_VAR 0 6
50721: PPUSH
50722: LD_INT 1
50724: PPUSH
50725: CALL_OW 259
50729: PUSH
50730: LD_REAL  1.15000000000000E+0000
50733: MUL
50734: MUL
50735: ST_TO_ADDR
// end ; unit_vehicle :
50736: GO 51560
50738: LD_INT 2
50740: DOUBLE
50741: EQUAL
50742: IFTRUE 50746
50744: GO 51548
50746: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50747: LD_VAR 0 6
50751: PPUSH
50752: CALL_OW 264
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 42
50762: PUSH
50763: LD_INT 24
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: IN
50771: IFFALSE 50792
// points := [ 25 , 5 , 3 ] ;
50773: LD_ADDR_VAR 0 9
50777: PUSH
50778: LD_INT 25
50780: PUSH
50781: LD_INT 5
50783: PUSH
50784: LD_INT 3
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50792: LD_VAR 0 6
50796: PPUSH
50797: CALL_OW 264
50801: PUSH
50802: LD_INT 4
50804: PUSH
50805: LD_INT 43
50807: PUSH
50808: LD_INT 25
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: IN
50816: IFFALSE 50837
// points := [ 40 , 15 , 5 ] ;
50818: LD_ADDR_VAR 0 9
50822: PUSH
50823: LD_INT 40
50825: PUSH
50826: LD_INT 15
50828: PUSH
50829: LD_INT 5
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: LIST
50836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50837: LD_VAR 0 6
50841: PPUSH
50842: CALL_OW 264
50846: PUSH
50847: LD_INT 3
50849: PUSH
50850: LD_INT 23
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: IN
50857: IFFALSE 50878
// points := [ 7 , 25 , 8 ] ;
50859: LD_ADDR_VAR 0 9
50863: PUSH
50864: LD_INT 7
50866: PUSH
50867: LD_INT 25
50869: PUSH
50870: LD_INT 8
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: LIST
50877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50878: LD_VAR 0 6
50882: PPUSH
50883: CALL_OW 264
50887: PUSH
50888: LD_INT 5
50890: PUSH
50891: LD_INT 27
50893: PUSH
50894: LD_INT 44
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: LIST
50901: IN
50902: IFFALSE 50923
// points := [ 14 , 50 , 16 ] ;
50904: LD_ADDR_VAR 0 9
50908: PUSH
50909: LD_INT 14
50911: PUSH
50912: LD_INT 50
50914: PUSH
50915: LD_INT 16
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50923: LD_VAR 0 6
50927: PPUSH
50928: CALL_OW 264
50932: PUSH
50933: LD_INT 6
50935: PUSH
50936: LD_INT 46
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: IN
50943: IFFALSE 50964
// points := [ 32 , 120 , 70 ] ;
50945: LD_ADDR_VAR 0 9
50949: PUSH
50950: LD_INT 32
50952: PUSH
50953: LD_INT 120
50955: PUSH
50956: LD_INT 70
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
50964: LD_VAR 0 6
50968: PPUSH
50969: CALL_OW 264
50973: PUSH
50974: LD_INT 7
50976: PUSH
50977: LD_INT 28
50979: PUSH
50980: LD_INT 45
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: IN
50988: IFFALSE 51009
// points := [ 35 , 20 , 45 ] ;
50990: LD_ADDR_VAR 0 9
50994: PUSH
50995: LD_INT 35
50997: PUSH
50998: LD_INT 20
51000: PUSH
51001: LD_INT 45
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51009: LD_VAR 0 6
51013: PPUSH
51014: CALL_OW 264
51018: PUSH
51019: LD_INT 47
51021: PUSH
51022: EMPTY
51023: LIST
51024: IN
51025: IFFALSE 51046
// points := [ 67 , 45 , 75 ] ;
51027: LD_ADDR_VAR 0 9
51031: PUSH
51032: LD_INT 67
51034: PUSH
51035: LD_INT 45
51037: PUSH
51038: LD_INT 75
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
51046: LD_VAR 0 6
51050: PPUSH
51051: CALL_OW 264
51055: PUSH
51056: LD_INT 26
51058: PUSH
51059: EMPTY
51060: LIST
51061: IN
51062: IFFALSE 51083
// points := [ 120 , 30 , 80 ] ;
51064: LD_ADDR_VAR 0 9
51068: PUSH
51069: LD_INT 120
51071: PUSH
51072: LD_INT 30
51074: PUSH
51075: LD_INT 80
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
51083: LD_VAR 0 6
51087: PPUSH
51088: CALL_OW 264
51092: PUSH
51093: LD_INT 22
51095: PUSH
51096: EMPTY
51097: LIST
51098: IN
51099: IFFALSE 51120
// points := [ 40 , 1 , 1 ] ;
51101: LD_ADDR_VAR 0 9
51105: PUSH
51106: LD_INT 40
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
51120: LD_VAR 0 6
51124: PPUSH
51125: CALL_OW 264
51129: PUSH
51130: LD_INT 29
51132: PUSH
51133: EMPTY
51134: LIST
51135: IN
51136: IFFALSE 51157
// points := [ 70 , 200 , 400 ] ;
51138: LD_ADDR_VAR 0 9
51142: PUSH
51143: LD_INT 70
51145: PUSH
51146: LD_INT 200
51148: PUSH
51149: LD_INT 400
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
51157: LD_VAR 0 6
51161: PPUSH
51162: CALL_OW 264
51166: PUSH
51167: LD_INT 14
51169: PUSH
51170: LD_INT 53
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: IN
51177: IFFALSE 51198
// points := [ 40 , 10 , 20 ] ;
51179: LD_ADDR_VAR 0 9
51183: PUSH
51184: LD_INT 40
51186: PUSH
51187: LD_INT 10
51189: PUSH
51190: LD_INT 20
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51198: LD_VAR 0 6
51202: PPUSH
51203: CALL_OW 264
51207: PUSH
51208: LD_INT 9
51210: PUSH
51211: EMPTY
51212: LIST
51213: IN
51214: IFFALSE 51235
// points := [ 5 , 70 , 20 ] ;
51216: LD_ADDR_VAR 0 9
51220: PUSH
51221: LD_INT 5
51223: PUSH
51224: LD_INT 70
51226: PUSH
51227: LD_INT 20
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51235: LD_VAR 0 6
51239: PPUSH
51240: CALL_OW 264
51244: PUSH
51245: LD_INT 10
51247: PUSH
51248: EMPTY
51249: LIST
51250: IN
51251: IFFALSE 51272
// points := [ 35 , 110 , 70 ] ;
51253: LD_ADDR_VAR 0 9
51257: PUSH
51258: LD_INT 35
51260: PUSH
51261: LD_INT 110
51263: PUSH
51264: LD_INT 70
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: LIST
51271: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51272: LD_VAR 0 6
51276: PPUSH
51277: CALL_OW 265
51281: PUSH
51282: LD_INT 25
51284: EQUAL
51285: IFFALSE 51306
// points := [ 80 , 65 , 100 ] ;
51287: LD_ADDR_VAR 0 9
51291: PUSH
51292: LD_INT 80
51294: PUSH
51295: LD_INT 65
51297: PUSH
51298: LD_INT 100
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: LIST
51305: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51306: LD_VAR 0 6
51310: PPUSH
51311: CALL_OW 263
51315: PUSH
51316: LD_INT 1
51318: EQUAL
51319: IFFALSE 51354
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51321: LD_ADDR_VAR 0 10
51325: PUSH
51326: LD_VAR 0 10
51330: PUSH
51331: LD_VAR 0 6
51335: PPUSH
51336: CALL_OW 311
51340: PPUSH
51341: LD_INT 3
51343: PPUSH
51344: CALL_OW 259
51348: PUSH
51349: LD_INT 4
51351: MUL
51352: MUL
51353: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51354: LD_VAR 0 6
51358: PPUSH
51359: CALL_OW 263
51363: PUSH
51364: LD_INT 2
51366: EQUAL
51367: IFFALSE 51418
// begin j := IsControledBy ( i ) ;
51369: LD_ADDR_VAR 0 7
51373: PUSH
51374: LD_VAR 0 6
51378: PPUSH
51379: CALL_OW 312
51383: ST_TO_ADDR
// if j then
51384: LD_VAR 0 7
51388: IFFALSE 51418
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51390: LD_ADDR_VAR 0 10
51394: PUSH
51395: LD_VAR 0 10
51399: PUSH
51400: LD_VAR 0 7
51404: PPUSH
51405: LD_INT 3
51407: PPUSH
51408: CALL_OW 259
51412: PUSH
51413: LD_INT 3
51415: MUL
51416: MUL
51417: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51418: LD_VAR 0 6
51422: PPUSH
51423: CALL_OW 264
51427: PUSH
51428: LD_INT 5
51430: PUSH
51431: LD_INT 6
51433: PUSH
51434: LD_INT 46
51436: PUSH
51437: LD_INT 44
51439: PUSH
51440: LD_INT 47
51442: PUSH
51443: LD_INT 45
51445: PUSH
51446: LD_INT 28
51448: PUSH
51449: LD_INT 7
51451: PUSH
51452: LD_INT 27
51454: PUSH
51455: LD_INT 29
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: IN
51470: PUSH
51471: LD_VAR 0 1
51475: PPUSH
51476: LD_INT 52
51478: PPUSH
51479: CALL_OW 321
51483: PUSH
51484: LD_INT 2
51486: EQUAL
51487: AND
51488: IFFALSE 51505
// bpoints := bpoints * 1.2 ;
51490: LD_ADDR_VAR 0 10
51494: PUSH
51495: LD_VAR 0 10
51499: PUSH
51500: LD_REAL  1.20000000000000E+0000
51503: MUL
51504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51505: LD_VAR 0 6
51509: PPUSH
51510: CALL_OW 264
51514: PUSH
51515: LD_INT 6
51517: PUSH
51518: LD_INT 46
51520: PUSH
51521: LD_INT 47
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: LIST
51528: IN
51529: IFFALSE 51546
// bpoints := bpoints * 1.2 ;
51531: LD_ADDR_VAR 0 10
51535: PUSH
51536: LD_VAR 0 10
51540: PUSH
51541: LD_REAL  1.20000000000000E+0000
51544: MUL
51545: ST_TO_ADDR
// end ; unit_building :
51546: GO 51560
51548: LD_INT 3
51550: DOUBLE
51551: EQUAL
51552: IFTRUE 51556
51554: GO 51559
51556: POP
// ; end ;
51557: GO 51560
51559: POP
// for j = 1 to 3 do
51560: LD_ADDR_VAR 0 7
51564: PUSH
51565: DOUBLE
51566: LD_INT 1
51568: DEC
51569: ST_TO_ADDR
51570: LD_INT 3
51572: PUSH
51573: FOR_TO
51574: IFFALSE 51627
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51576: LD_ADDR_VAR 0 5
51580: PUSH
51581: LD_VAR 0 5
51585: PPUSH
51586: LD_VAR 0 7
51590: PPUSH
51591: LD_VAR 0 5
51595: PUSH
51596: LD_VAR 0 7
51600: ARRAY
51601: PUSH
51602: LD_VAR 0 9
51606: PUSH
51607: LD_VAR 0 7
51611: ARRAY
51612: PUSH
51613: LD_VAR 0 10
51617: MUL
51618: PLUS
51619: PPUSH
51620: CALL_OW 1
51624: ST_TO_ADDR
51625: GO 51573
51627: POP
51628: POP
// end ;
51629: GO 50112
51631: POP
51632: POP
// result := Replace ( result , 4 , tmp ) ;
51633: LD_ADDR_VAR 0 5
51637: PUSH
51638: LD_VAR 0 5
51642: PPUSH
51643: LD_INT 4
51645: PPUSH
51646: LD_VAR 0 8
51650: PPUSH
51651: CALL_OW 1
51655: ST_TO_ADDR
// end ;
51656: LD_VAR 0 5
51660: RET
// export function DangerAtRange ( unit , range ) ; begin
51661: LD_INT 0
51663: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51664: LD_ADDR_VAR 0 3
51668: PUSH
51669: LD_VAR 0 1
51673: PPUSH
51674: CALL_OW 255
51678: PPUSH
51679: LD_VAR 0 1
51683: PPUSH
51684: CALL_OW 250
51688: PPUSH
51689: LD_VAR 0 1
51693: PPUSH
51694: CALL_OW 251
51698: PPUSH
51699: LD_VAR 0 2
51703: PPUSH
51704: CALL 49964 0 4
51708: ST_TO_ADDR
// end ;
51709: LD_VAR 0 3
51713: RET
// export function DangerInArea ( side , area ) ; begin
51714: LD_INT 0
51716: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51717: LD_ADDR_VAR 0 3
51721: PUSH
51722: LD_VAR 0 2
51726: PPUSH
51727: LD_INT 81
51729: PUSH
51730: LD_VAR 0 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PPUSH
51739: CALL_OW 70
51743: ST_TO_ADDR
// end ;
51744: LD_VAR 0 3
51748: RET
// export function IsExtension ( b ) ; begin
51749: LD_INT 0
51751: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51752: LD_ADDR_VAR 0 2
51756: PUSH
51757: LD_VAR 0 1
51761: PUSH
51762: LD_INT 23
51764: PUSH
51765: LD_INT 20
51767: PUSH
51768: LD_INT 22
51770: PUSH
51771: LD_INT 17
51773: PUSH
51774: LD_INT 24
51776: PUSH
51777: LD_INT 21
51779: PUSH
51780: LD_INT 19
51782: PUSH
51783: LD_INT 16
51785: PUSH
51786: LD_INT 25
51788: PUSH
51789: LD_INT 18
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: IN
51804: ST_TO_ADDR
// end ;
51805: LD_VAR 0 2
51809: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
51810: LD_INT 0
51812: PPUSH
51813: PPUSH
51814: PPUSH
// result := [ ] ;
51815: LD_ADDR_VAR 0 3
51819: PUSH
51820: EMPTY
51821: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51822: LD_ADDR_VAR 0 4
51826: PUSH
51827: LD_VAR 0 2
51831: PPUSH
51832: LD_INT 21
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PPUSH
51842: CALL_OW 70
51846: ST_TO_ADDR
// if not tmp then
51847: LD_VAR 0 4
51851: NOT
51852: IFFALSE 51856
// exit ;
51854: GO 51914
// for i in tmp do
51856: LD_ADDR_VAR 0 5
51860: PUSH
51861: LD_VAR 0 4
51865: PUSH
51866: FOR_IN
51867: IFFALSE 51902
// if GetBase ( i ) <> base then
51869: LD_VAR 0 5
51873: PPUSH
51874: CALL_OW 274
51878: PUSH
51879: LD_VAR 0 1
51883: NONEQUAL
51884: IFFALSE 51900
// ComLinkToBase ( base , i ) ;
51886: LD_VAR 0 1
51890: PPUSH
51891: LD_VAR 0 5
51895: PPUSH
51896: CALL_OW 169
51900: GO 51866
51902: POP
51903: POP
// result := tmp ;
51904: LD_ADDR_VAR 0 3
51908: PUSH
51909: LD_VAR 0 4
51913: ST_TO_ADDR
// end ;
51914: LD_VAR 0 3
51918: RET
// export function ComComplete ( unit , b ) ; var i ; begin
51919: LD_INT 0
51921: PPUSH
51922: PPUSH
// if BuildingStatus ( b ) = bs_build then
51923: LD_VAR 0 2
51927: PPUSH
51928: CALL_OW 461
51932: PUSH
51933: LD_INT 1
51935: EQUAL
51936: IFFALSE 51996
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51938: LD_VAR 0 1
51942: PPUSH
51943: LD_STRING h
51945: PUSH
51946: LD_VAR 0 2
51950: PPUSH
51951: CALL_OW 250
51955: PUSH
51956: LD_VAR 0 2
51960: PPUSH
51961: CALL_OW 251
51965: PUSH
51966: LD_VAR 0 2
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: PUSH
51989: EMPTY
51990: LIST
51991: PPUSH
51992: CALL_OW 446
// end ;
51996: LD_VAR 0 3
52000: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
52001: LD_INT 0
52003: PPUSH
52004: PPUSH
52005: PPUSH
52006: PPUSH
52007: PPUSH
52008: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
52009: LD_VAR 0 1
52013: NOT
52014: PUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 263
52024: PUSH
52025: LD_INT 2
52027: EQUAL
52028: NOT
52029: OR
52030: IFFALSE 52034
// exit ;
52032: GO 52350
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
52034: LD_ADDR_VAR 0 6
52038: PUSH
52039: LD_INT 22
52041: PUSH
52042: LD_VAR 0 1
52046: PPUSH
52047: CALL_OW 255
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 30
52061: PUSH
52062: LD_INT 36
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 34
52071: PUSH
52072: LD_INT 31
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PPUSH
52088: CALL_OW 69
52092: ST_TO_ADDR
// if not tmp then
52093: LD_VAR 0 6
52097: NOT
52098: IFFALSE 52102
// exit ;
52100: GO 52350
// result := [ ] ;
52102: LD_ADDR_VAR 0 2
52106: PUSH
52107: EMPTY
52108: ST_TO_ADDR
// for i in tmp do
52109: LD_ADDR_VAR 0 3
52113: PUSH
52114: LD_VAR 0 6
52118: PUSH
52119: FOR_IN
52120: IFFALSE 52191
// begin t := UnitsInside ( i ) ;
52122: LD_ADDR_VAR 0 4
52126: PUSH
52127: LD_VAR 0 3
52131: PPUSH
52132: CALL_OW 313
52136: ST_TO_ADDR
// if t then
52137: LD_VAR 0 4
52141: IFFALSE 52189
// for j in t do
52143: LD_ADDR_VAR 0 7
52147: PUSH
52148: LD_VAR 0 4
52152: PUSH
52153: FOR_IN
52154: IFFALSE 52187
// result := Insert ( result , result + 1 , j ) ;
52156: LD_ADDR_VAR 0 2
52160: PUSH
52161: LD_VAR 0 2
52165: PPUSH
52166: LD_VAR 0 2
52170: PUSH
52171: LD_INT 1
52173: PLUS
52174: PPUSH
52175: LD_VAR 0 7
52179: PPUSH
52180: CALL_OW 2
52184: ST_TO_ADDR
52185: GO 52153
52187: POP
52188: POP
// end ;
52189: GO 52119
52191: POP
52192: POP
// if not result then
52193: LD_VAR 0 2
52197: NOT
52198: IFFALSE 52202
// exit ;
52200: GO 52350
// mech := result [ 1 ] ;
52202: LD_ADDR_VAR 0 5
52206: PUSH
52207: LD_VAR 0 2
52211: PUSH
52212: LD_INT 1
52214: ARRAY
52215: ST_TO_ADDR
// if result > 1 then
52216: LD_VAR 0 2
52220: PUSH
52221: LD_INT 1
52223: GREATER
52224: IFFALSE 52336
// for i = 2 to result do
52226: LD_ADDR_VAR 0 3
52230: PUSH
52231: DOUBLE
52232: LD_INT 2
52234: DEC
52235: ST_TO_ADDR
52236: LD_VAR 0 2
52240: PUSH
52241: FOR_TO
52242: IFFALSE 52334
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52244: LD_ADDR_VAR 0 4
52248: PUSH
52249: LD_VAR 0 2
52253: PUSH
52254: LD_VAR 0 3
52258: ARRAY
52259: PPUSH
52260: LD_INT 3
52262: PPUSH
52263: CALL_OW 259
52267: PUSH
52268: LD_VAR 0 2
52272: PUSH
52273: LD_VAR 0 3
52277: ARRAY
52278: PPUSH
52279: CALL_OW 432
52283: MINUS
52284: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52285: LD_VAR 0 4
52289: PUSH
52290: LD_VAR 0 5
52294: PPUSH
52295: LD_INT 3
52297: PPUSH
52298: CALL_OW 259
52302: PUSH
52303: LD_VAR 0 5
52307: PPUSH
52308: CALL_OW 432
52312: MINUS
52313: GREATEREQUAL
52314: IFFALSE 52332
// mech := result [ i ] ;
52316: LD_ADDR_VAR 0 5
52320: PUSH
52321: LD_VAR 0 2
52325: PUSH
52326: LD_VAR 0 3
52330: ARRAY
52331: ST_TO_ADDR
// end ;
52332: GO 52241
52334: POP
52335: POP
// ComLinkTo ( vehicle , mech ) ;
52336: LD_VAR 0 1
52340: PPUSH
52341: LD_VAR 0 5
52345: PPUSH
52346: CALL_OW 135
// end ;
52350: LD_VAR 0 2
52354: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52355: LD_INT 0
52357: PPUSH
52358: PPUSH
52359: PPUSH
52360: PPUSH
52361: PPUSH
52362: PPUSH
52363: PPUSH
52364: PPUSH
52365: PPUSH
52366: PPUSH
52367: PPUSH
52368: PPUSH
52369: PPUSH
// result := [ ] ;
52370: LD_ADDR_VAR 0 7
52374: PUSH
52375: EMPTY
52376: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52377: LD_VAR 0 1
52381: PPUSH
52382: CALL_OW 266
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: IN
52397: NOT
52398: IFFALSE 52402
// exit ;
52400: GO 54033
// if name then
52402: LD_VAR 0 3
52406: IFFALSE 52422
// SetBName ( base_dep , name ) ;
52408: LD_VAR 0 1
52412: PPUSH
52413: LD_VAR 0 3
52417: PPUSH
52418: CALL_OW 500
// base := GetBase ( base_dep ) ;
52422: LD_ADDR_VAR 0 15
52426: PUSH
52427: LD_VAR 0 1
52431: PPUSH
52432: CALL_OW 274
52436: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52437: LD_ADDR_VAR 0 16
52441: PUSH
52442: LD_VAR 0 1
52446: PPUSH
52447: CALL_OW 255
52451: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52452: LD_ADDR_VAR 0 17
52456: PUSH
52457: LD_VAR 0 1
52461: PPUSH
52462: CALL_OW 248
52466: ST_TO_ADDR
// if sources then
52467: LD_VAR 0 5
52471: IFFALSE 52518
// for i = 1 to 3 do
52473: LD_ADDR_VAR 0 8
52477: PUSH
52478: DOUBLE
52479: LD_INT 1
52481: DEC
52482: ST_TO_ADDR
52483: LD_INT 3
52485: PUSH
52486: FOR_TO
52487: IFFALSE 52516
// AddResourceType ( base , i , sources [ i ] ) ;
52489: LD_VAR 0 15
52493: PPUSH
52494: LD_VAR 0 8
52498: PPUSH
52499: LD_VAR 0 5
52503: PUSH
52504: LD_VAR 0 8
52508: ARRAY
52509: PPUSH
52510: CALL_OW 276
52514: GO 52486
52516: POP
52517: POP
// buildings := GetBaseBuildings ( base , area ) ;
52518: LD_ADDR_VAR 0 18
52522: PUSH
52523: LD_VAR 0 15
52527: PPUSH
52528: LD_VAR 0 2
52532: PPUSH
52533: CALL 51810 0 2
52537: ST_TO_ADDR
// InitHc ;
52538: CALL_OW 19
// InitUc ;
52542: CALL_OW 18
// uc_side := side ;
52546: LD_ADDR_OWVAR 20
52550: PUSH
52551: LD_VAR 0 16
52555: ST_TO_ADDR
// uc_nation := nation ;
52556: LD_ADDR_OWVAR 21
52560: PUSH
52561: LD_VAR 0 17
52565: ST_TO_ADDR
// if buildings then
52566: LD_VAR 0 18
52570: IFFALSE 53892
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52572: LD_ADDR_VAR 0 19
52576: PUSH
52577: LD_VAR 0 18
52581: PPUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 30
52587: PUSH
52588: LD_INT 29
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 30
52597: PUSH
52598: LD_INT 30
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: LIST
52609: PPUSH
52610: CALL_OW 72
52614: ST_TO_ADDR
// if tmp then
52615: LD_VAR 0 19
52619: IFFALSE 52667
// for i in tmp do
52621: LD_ADDR_VAR 0 8
52625: PUSH
52626: LD_VAR 0 19
52630: PUSH
52631: FOR_IN
52632: IFFALSE 52665
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52634: LD_VAR 0 8
52638: PPUSH
52639: CALL_OW 250
52643: PPUSH
52644: LD_VAR 0 8
52648: PPUSH
52649: CALL_OW 251
52653: PPUSH
52654: LD_VAR 0 16
52658: PPUSH
52659: CALL_OW 441
52663: GO 52631
52665: POP
52666: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52667: LD_VAR 0 18
52671: PPUSH
52672: LD_INT 2
52674: PUSH
52675: LD_INT 30
52677: PUSH
52678: LD_INT 32
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 30
52687: PUSH
52688: LD_INT 33
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: PPUSH
52700: CALL_OW 72
52704: IFFALSE 52792
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52706: LD_ADDR_VAR 0 8
52710: PUSH
52711: LD_VAR 0 18
52715: PPUSH
52716: LD_INT 2
52718: PUSH
52719: LD_INT 30
52721: PUSH
52722: LD_INT 32
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 30
52731: PUSH
52732: LD_INT 33
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: PPUSH
52744: CALL_OW 72
52748: PUSH
52749: FOR_IN
52750: IFFALSE 52790
// begin if not GetBWeapon ( i ) then
52752: LD_VAR 0 8
52756: PPUSH
52757: CALL_OW 269
52761: NOT
52762: IFFALSE 52788
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52764: LD_VAR 0 8
52768: PPUSH
52769: LD_VAR 0 8
52773: PPUSH
52774: LD_VAR 0 2
52778: PPUSH
52779: CALL 54038 0 2
52783: PPUSH
52784: CALL_OW 431
// end ;
52788: GO 52749
52790: POP
52791: POP
// end ; for i = 1 to personel do
52792: LD_ADDR_VAR 0 8
52796: PUSH
52797: DOUBLE
52798: LD_INT 1
52800: DEC
52801: ST_TO_ADDR
52802: LD_VAR 0 6
52806: PUSH
52807: FOR_TO
52808: IFFALSE 53872
// begin if i > 4 then
52810: LD_VAR 0 8
52814: PUSH
52815: LD_INT 4
52817: GREATER
52818: IFFALSE 52822
// break ;
52820: GO 53872
// case i of 1 :
52822: LD_VAR 0 8
52826: PUSH
52827: LD_INT 1
52829: DOUBLE
52830: EQUAL
52831: IFTRUE 52835
52833: GO 52915
52835: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52836: LD_ADDR_VAR 0 12
52840: PUSH
52841: LD_VAR 0 18
52845: PPUSH
52846: LD_INT 22
52848: PUSH
52849: LD_VAR 0 16
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 58
52860: PUSH
52861: EMPTY
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: LD_INT 30
52869: PUSH
52870: LD_INT 32
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 30
52879: PUSH
52880: LD_INT 4
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 30
52889: PUSH
52890: LD_INT 5
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: PPUSH
52908: CALL_OW 72
52912: ST_TO_ADDR
52913: GO 53137
52915: LD_INT 2
52917: DOUBLE
52918: EQUAL
52919: IFTRUE 52923
52921: GO 52985
52923: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52924: LD_ADDR_VAR 0 12
52928: PUSH
52929: LD_VAR 0 18
52933: PPUSH
52934: LD_INT 22
52936: PUSH
52937: LD_VAR 0 16
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: LD_INT 30
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 30
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PPUSH
52978: CALL_OW 72
52982: ST_TO_ADDR
52983: GO 53137
52985: LD_INT 3
52987: DOUBLE
52988: EQUAL
52989: IFTRUE 52993
52991: GO 53055
52993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52994: LD_ADDR_VAR 0 12
52998: PUSH
52999: LD_VAR 0 18
53003: PPUSH
53004: LD_INT 22
53006: PUSH
53007: LD_VAR 0 16
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: LD_INT 30
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 30
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PPUSH
53048: CALL_OW 72
53052: ST_TO_ADDR
53053: GO 53137
53055: LD_INT 4
53057: DOUBLE
53058: EQUAL
53059: IFTRUE 53063
53061: GO 53136
53063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
53064: LD_ADDR_VAR 0 12
53068: PUSH
53069: LD_VAR 0 18
53073: PPUSH
53074: LD_INT 22
53076: PUSH
53077: LD_VAR 0 16
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: LD_INT 30
53091: PUSH
53092: LD_INT 6
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 30
53101: PUSH
53102: LD_INT 7
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 30
53111: PUSH
53112: LD_INT 8
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PPUSH
53129: CALL_OW 72
53133: ST_TO_ADDR
53134: GO 53137
53136: POP
// if i = 1 then
53137: LD_VAR 0 8
53141: PUSH
53142: LD_INT 1
53144: EQUAL
53145: IFFALSE 53256
// begin tmp := [ ] ;
53147: LD_ADDR_VAR 0 19
53151: PUSH
53152: EMPTY
53153: ST_TO_ADDR
// for j in f do
53154: LD_ADDR_VAR 0 9
53158: PUSH
53159: LD_VAR 0 12
53163: PUSH
53164: FOR_IN
53165: IFFALSE 53238
// if GetBType ( j ) = b_bunker then
53167: LD_VAR 0 9
53171: PPUSH
53172: CALL_OW 266
53176: PUSH
53177: LD_INT 32
53179: EQUAL
53180: IFFALSE 53207
// tmp := Insert ( tmp , 1 , j ) else
53182: LD_ADDR_VAR 0 19
53186: PUSH
53187: LD_VAR 0 19
53191: PPUSH
53192: LD_INT 1
53194: PPUSH
53195: LD_VAR 0 9
53199: PPUSH
53200: CALL_OW 2
53204: ST_TO_ADDR
53205: GO 53236
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53207: LD_ADDR_VAR 0 19
53211: PUSH
53212: LD_VAR 0 19
53216: PPUSH
53217: LD_VAR 0 19
53221: PUSH
53222: LD_INT 1
53224: PLUS
53225: PPUSH
53226: LD_VAR 0 9
53230: PPUSH
53231: CALL_OW 2
53235: ST_TO_ADDR
53236: GO 53164
53238: POP
53239: POP
// if tmp then
53240: LD_VAR 0 19
53244: IFFALSE 53256
// f := tmp ;
53246: LD_ADDR_VAR 0 12
53250: PUSH
53251: LD_VAR 0 19
53255: ST_TO_ADDR
// end ; x := personel [ i ] ;
53256: LD_ADDR_VAR 0 13
53260: PUSH
53261: LD_VAR 0 6
53265: PUSH
53266: LD_VAR 0 8
53270: ARRAY
53271: ST_TO_ADDR
// if x = - 1 then
53272: LD_VAR 0 13
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: EQUAL
53281: IFFALSE 53490
// begin for j in f do
53283: LD_ADDR_VAR 0 9
53287: PUSH
53288: LD_VAR 0 12
53292: PUSH
53293: FOR_IN
53294: IFFALSE 53486
// repeat InitHc ;
53296: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53300: LD_VAR 0 9
53304: PPUSH
53305: CALL_OW 266
53309: PUSH
53310: LD_INT 5
53312: EQUAL
53313: IFFALSE 53383
// begin if UnitsInside ( j ) < 3 then
53315: LD_VAR 0 9
53319: PPUSH
53320: CALL_OW 313
53324: PUSH
53325: LD_INT 3
53327: LESS
53328: IFFALSE 53364
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53330: LD_INT 0
53332: PPUSH
53333: LD_INT 5
53335: PUSH
53336: LD_INT 8
53338: PUSH
53339: LD_INT 9
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: LIST
53346: PUSH
53347: LD_VAR 0 17
53351: ARRAY
53352: PPUSH
53353: LD_VAR 0 4
53357: PPUSH
53358: CALL_OW 380
53362: GO 53381
// PrepareHuman ( false , i , skill ) ;
53364: LD_INT 0
53366: PPUSH
53367: LD_VAR 0 8
53371: PPUSH
53372: LD_VAR 0 4
53376: PPUSH
53377: CALL_OW 380
// end else
53381: GO 53400
// PrepareHuman ( false , i , skill ) ;
53383: LD_INT 0
53385: PPUSH
53386: LD_VAR 0 8
53390: PPUSH
53391: LD_VAR 0 4
53395: PPUSH
53396: CALL_OW 380
// un := CreateHuman ;
53400: LD_ADDR_VAR 0 14
53404: PUSH
53405: CALL_OW 44
53409: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53410: LD_ADDR_VAR 0 7
53414: PUSH
53415: LD_VAR 0 7
53419: PPUSH
53420: LD_INT 1
53422: PPUSH
53423: LD_VAR 0 14
53427: PPUSH
53428: CALL_OW 2
53432: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53433: LD_VAR 0 14
53437: PPUSH
53438: LD_VAR 0 9
53442: PPUSH
53443: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53447: LD_VAR 0 9
53451: PPUSH
53452: CALL_OW 313
53456: PUSH
53457: LD_INT 6
53459: EQUAL
53460: PUSH
53461: LD_VAR 0 9
53465: PPUSH
53466: CALL_OW 266
53470: PUSH
53471: LD_INT 32
53473: PUSH
53474: LD_INT 31
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: IN
53481: OR
53482: IFFALSE 53296
53484: GO 53293
53486: POP
53487: POP
// end else
53488: GO 53870
// for j = 1 to x do
53490: LD_ADDR_VAR 0 9
53494: PUSH
53495: DOUBLE
53496: LD_INT 1
53498: DEC
53499: ST_TO_ADDR
53500: LD_VAR 0 13
53504: PUSH
53505: FOR_TO
53506: IFFALSE 53868
// begin InitHc ;
53508: CALL_OW 19
// if not f then
53512: LD_VAR 0 12
53516: NOT
53517: IFFALSE 53606
// begin PrepareHuman ( false , i , skill ) ;
53519: LD_INT 0
53521: PPUSH
53522: LD_VAR 0 8
53526: PPUSH
53527: LD_VAR 0 4
53531: PPUSH
53532: CALL_OW 380
// un := CreateHuman ;
53536: LD_ADDR_VAR 0 14
53540: PUSH
53541: CALL_OW 44
53545: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53546: LD_ADDR_VAR 0 7
53550: PUSH
53551: LD_VAR 0 7
53555: PPUSH
53556: LD_INT 1
53558: PPUSH
53559: LD_VAR 0 14
53563: PPUSH
53564: CALL_OW 2
53568: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53569: LD_VAR 0 14
53573: PPUSH
53574: LD_VAR 0 1
53578: PPUSH
53579: CALL_OW 250
53583: PPUSH
53584: LD_VAR 0 1
53588: PPUSH
53589: CALL_OW 251
53593: PPUSH
53594: LD_INT 10
53596: PPUSH
53597: LD_INT 0
53599: PPUSH
53600: CALL_OW 50
// continue ;
53604: GO 53505
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53606: LD_VAR 0 12
53610: PUSH
53611: LD_INT 1
53613: ARRAY
53614: PPUSH
53615: CALL_OW 313
53619: PUSH
53620: LD_VAR 0 12
53624: PUSH
53625: LD_INT 1
53627: ARRAY
53628: PPUSH
53629: CALL_OW 266
53633: PUSH
53634: LD_INT 32
53636: PUSH
53637: LD_INT 31
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: IN
53644: AND
53645: PUSH
53646: LD_VAR 0 12
53650: PUSH
53651: LD_INT 1
53653: ARRAY
53654: PPUSH
53655: CALL_OW 313
53659: PUSH
53660: LD_INT 6
53662: EQUAL
53663: OR
53664: IFFALSE 53684
// f := Delete ( f , 1 ) ;
53666: LD_ADDR_VAR 0 12
53670: PUSH
53671: LD_VAR 0 12
53675: PPUSH
53676: LD_INT 1
53678: PPUSH
53679: CALL_OW 3
53683: ST_TO_ADDR
// if not f then
53684: LD_VAR 0 12
53688: NOT
53689: IFFALSE 53707
// begin x := x + 2 ;
53691: LD_ADDR_VAR 0 13
53695: PUSH
53696: LD_VAR 0 13
53700: PUSH
53701: LD_INT 2
53703: PLUS
53704: ST_TO_ADDR
// continue ;
53705: GO 53505
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53707: LD_VAR 0 12
53711: PUSH
53712: LD_INT 1
53714: ARRAY
53715: PPUSH
53716: CALL_OW 266
53720: PUSH
53721: LD_INT 5
53723: EQUAL
53724: IFFALSE 53798
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53726: LD_VAR 0 12
53730: PUSH
53731: LD_INT 1
53733: ARRAY
53734: PPUSH
53735: CALL_OW 313
53739: PUSH
53740: LD_INT 3
53742: LESS
53743: IFFALSE 53779
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53745: LD_INT 0
53747: PPUSH
53748: LD_INT 5
53750: PUSH
53751: LD_INT 8
53753: PUSH
53754: LD_INT 9
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: LIST
53761: PUSH
53762: LD_VAR 0 17
53766: ARRAY
53767: PPUSH
53768: LD_VAR 0 4
53772: PPUSH
53773: CALL_OW 380
53777: GO 53796
// PrepareHuman ( false , i , skill ) ;
53779: LD_INT 0
53781: PPUSH
53782: LD_VAR 0 8
53786: PPUSH
53787: LD_VAR 0 4
53791: PPUSH
53792: CALL_OW 380
// end else
53796: GO 53815
// PrepareHuman ( false , i , skill ) ;
53798: LD_INT 0
53800: PPUSH
53801: LD_VAR 0 8
53805: PPUSH
53806: LD_VAR 0 4
53810: PPUSH
53811: CALL_OW 380
// un := CreateHuman ;
53815: LD_ADDR_VAR 0 14
53819: PUSH
53820: CALL_OW 44
53824: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53825: LD_ADDR_VAR 0 7
53829: PUSH
53830: LD_VAR 0 7
53834: PPUSH
53835: LD_INT 1
53837: PPUSH
53838: LD_VAR 0 14
53842: PPUSH
53843: CALL_OW 2
53847: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53848: LD_VAR 0 14
53852: PPUSH
53853: LD_VAR 0 12
53857: PUSH
53858: LD_INT 1
53860: ARRAY
53861: PPUSH
53862: CALL_OW 52
// end ;
53866: GO 53505
53868: POP
53869: POP
// end ;
53870: GO 52807
53872: POP
53873: POP
// result := result ^ buildings ;
53874: LD_ADDR_VAR 0 7
53878: PUSH
53879: LD_VAR 0 7
53883: PUSH
53884: LD_VAR 0 18
53888: ADD
53889: ST_TO_ADDR
// end else
53890: GO 54033
// begin for i = 1 to personel do
53892: LD_ADDR_VAR 0 8
53896: PUSH
53897: DOUBLE
53898: LD_INT 1
53900: DEC
53901: ST_TO_ADDR
53902: LD_VAR 0 6
53906: PUSH
53907: FOR_TO
53908: IFFALSE 54031
// begin if i > 4 then
53910: LD_VAR 0 8
53914: PUSH
53915: LD_INT 4
53917: GREATER
53918: IFFALSE 53922
// break ;
53920: GO 54031
// x := personel [ i ] ;
53922: LD_ADDR_VAR 0 13
53926: PUSH
53927: LD_VAR 0 6
53931: PUSH
53932: LD_VAR 0 8
53936: ARRAY
53937: ST_TO_ADDR
// if x = - 1 then
53938: LD_VAR 0 13
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: EQUAL
53947: IFFALSE 53951
// continue ;
53949: GO 53907
// PrepareHuman ( false , i , skill ) ;
53951: LD_INT 0
53953: PPUSH
53954: LD_VAR 0 8
53958: PPUSH
53959: LD_VAR 0 4
53963: PPUSH
53964: CALL_OW 380
// un := CreateHuman ;
53968: LD_ADDR_VAR 0 14
53972: PUSH
53973: CALL_OW 44
53977: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53978: LD_VAR 0 14
53982: PPUSH
53983: LD_VAR 0 1
53987: PPUSH
53988: CALL_OW 250
53992: PPUSH
53993: LD_VAR 0 1
53997: PPUSH
53998: CALL_OW 251
54002: PPUSH
54003: LD_INT 10
54005: PPUSH
54006: LD_INT 0
54008: PPUSH
54009: CALL_OW 50
// result := result ^ un ;
54013: LD_ADDR_VAR 0 7
54017: PUSH
54018: LD_VAR 0 7
54022: PUSH
54023: LD_VAR 0 14
54027: ADD
54028: ST_TO_ADDR
// end ;
54029: GO 53907
54031: POP
54032: POP
// end ; end ;
54033: LD_VAR 0 7
54037: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
54038: LD_INT 0
54040: PPUSH
54041: PPUSH
54042: PPUSH
54043: PPUSH
54044: PPUSH
54045: PPUSH
54046: PPUSH
54047: PPUSH
54048: PPUSH
54049: PPUSH
54050: PPUSH
54051: PPUSH
54052: PPUSH
54053: PPUSH
54054: PPUSH
54055: PPUSH
// result := false ;
54056: LD_ADDR_VAR 0 3
54060: PUSH
54061: LD_INT 0
54063: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
54064: LD_VAR 0 1
54068: NOT
54069: PUSH
54070: LD_VAR 0 1
54074: PPUSH
54075: CALL_OW 266
54079: PUSH
54080: LD_INT 32
54082: PUSH
54083: LD_INT 33
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: IN
54090: NOT
54091: OR
54092: IFFALSE 54096
// exit ;
54094: GO 55232
// nat := GetNation ( tower ) ;
54096: LD_ADDR_VAR 0 12
54100: PUSH
54101: LD_VAR 0 1
54105: PPUSH
54106: CALL_OW 248
54110: ST_TO_ADDR
// side := GetSide ( tower ) ;
54111: LD_ADDR_VAR 0 16
54115: PUSH
54116: LD_VAR 0 1
54120: PPUSH
54121: CALL_OW 255
54125: ST_TO_ADDR
// x := GetX ( tower ) ;
54126: LD_ADDR_VAR 0 10
54130: PUSH
54131: LD_VAR 0 1
54135: PPUSH
54136: CALL_OW 250
54140: ST_TO_ADDR
// y := GetY ( tower ) ;
54141: LD_ADDR_VAR 0 11
54145: PUSH
54146: LD_VAR 0 1
54150: PPUSH
54151: CALL_OW 251
54155: ST_TO_ADDR
// if not x or not y then
54156: LD_VAR 0 10
54160: NOT
54161: PUSH
54162: LD_VAR 0 11
54166: NOT
54167: OR
54168: IFFALSE 54172
// exit ;
54170: GO 55232
// weapon := 0 ;
54172: LD_ADDR_VAR 0 18
54176: PUSH
54177: LD_INT 0
54179: ST_TO_ADDR
// fac_list := [ ] ;
54180: LD_ADDR_VAR 0 17
54184: PUSH
54185: EMPTY
54186: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
54187: LD_ADDR_VAR 0 6
54191: PUSH
54192: LD_VAR 0 1
54196: PPUSH
54197: CALL_OW 274
54201: PPUSH
54202: LD_VAR 0 2
54206: PPUSH
54207: CALL 51810 0 2
54211: PPUSH
54212: LD_INT 30
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PPUSH
54222: CALL_OW 72
54226: ST_TO_ADDR
// if not factories then
54227: LD_VAR 0 6
54231: NOT
54232: IFFALSE 54236
// exit ;
54234: GO 55232
// for i in factories do
54236: LD_ADDR_VAR 0 8
54240: PUSH
54241: LD_VAR 0 6
54245: PUSH
54246: FOR_IN
54247: IFFALSE 54272
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54249: LD_ADDR_VAR 0 17
54253: PUSH
54254: LD_VAR 0 17
54258: PUSH
54259: LD_VAR 0 8
54263: PPUSH
54264: CALL_OW 478
54268: UNION
54269: ST_TO_ADDR
54270: GO 54246
54272: POP
54273: POP
// if not fac_list then
54274: LD_VAR 0 17
54278: NOT
54279: IFFALSE 54283
// exit ;
54281: GO 55232
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54283: LD_ADDR_VAR 0 5
54287: PUSH
54288: LD_INT 4
54290: PUSH
54291: LD_INT 5
54293: PUSH
54294: LD_INT 9
54296: PUSH
54297: LD_INT 10
54299: PUSH
54300: LD_INT 6
54302: PUSH
54303: LD_INT 7
54305: PUSH
54306: LD_INT 11
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 27
54320: PUSH
54321: LD_INT 28
54323: PUSH
54324: LD_INT 26
54326: PUSH
54327: LD_INT 30
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 43
54338: PUSH
54339: LD_INT 44
54341: PUSH
54342: LD_INT 46
54344: PUSH
54345: LD_INT 45
54347: PUSH
54348: LD_INT 47
54350: PUSH
54351: LD_INT 49
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: PUSH
54367: LD_VAR 0 12
54371: ARRAY
54372: ST_TO_ADDR
// for i in list do
54373: LD_ADDR_VAR 0 8
54377: PUSH
54378: LD_VAR 0 5
54382: PUSH
54383: FOR_IN
54384: IFFALSE 54417
// if not i in fac_list then
54386: LD_VAR 0 8
54390: PUSH
54391: LD_VAR 0 17
54395: IN
54396: NOT
54397: IFFALSE 54415
// list := list diff i ;
54399: LD_ADDR_VAR 0 5
54403: PUSH
54404: LD_VAR 0 5
54408: PUSH
54409: LD_VAR 0 8
54413: DIFF
54414: ST_TO_ADDR
54415: GO 54383
54417: POP
54418: POP
// if not list then
54419: LD_VAR 0 5
54423: NOT
54424: IFFALSE 54428
// exit ;
54426: GO 55232
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54428: LD_VAR 0 12
54432: PUSH
54433: LD_INT 3
54435: EQUAL
54436: PUSH
54437: LD_INT 49
54439: PUSH
54440: LD_VAR 0 5
54444: IN
54445: AND
54446: PUSH
54447: LD_INT 31
54449: PPUSH
54450: LD_VAR 0 16
54454: PPUSH
54455: CALL_OW 321
54459: PUSH
54460: LD_INT 2
54462: EQUAL
54463: AND
54464: IFFALSE 54524
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54466: LD_INT 22
54468: PUSH
54469: LD_VAR 0 16
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 35
54480: PUSH
54481: LD_INT 49
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 91
54490: PUSH
54491: LD_VAR 0 1
54495: PUSH
54496: LD_INT 10
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: PPUSH
54509: CALL_OW 69
54513: NOT
54514: IFFALSE 54524
// weapon := ru_time_lapser ;
54516: LD_ADDR_VAR 0 18
54520: PUSH
54521: LD_INT 49
54523: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54524: LD_VAR 0 12
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: IN
54539: PUSH
54540: LD_INT 11
54542: PUSH
54543: LD_VAR 0 5
54547: IN
54548: PUSH
54549: LD_INT 30
54551: PUSH
54552: LD_VAR 0 5
54556: IN
54557: OR
54558: AND
54559: PUSH
54560: LD_INT 6
54562: PPUSH
54563: LD_VAR 0 16
54567: PPUSH
54568: CALL_OW 321
54572: PUSH
54573: LD_INT 2
54575: EQUAL
54576: AND
54577: IFFALSE 54742
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54579: LD_INT 22
54581: PUSH
54582: LD_VAR 0 16
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: LD_INT 35
54596: PUSH
54597: LD_INT 11
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 35
54606: PUSH
54607: LD_INT 30
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 91
54621: PUSH
54622: LD_VAR 0 1
54626: PUSH
54627: LD_INT 18
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: LIST
54639: PPUSH
54640: CALL_OW 69
54644: NOT
54645: PUSH
54646: LD_INT 22
54648: PUSH
54649: LD_VAR 0 16
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: LD_INT 30
54663: PUSH
54664: LD_INT 32
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 30
54673: PUSH
54674: LD_INT 33
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 91
54688: PUSH
54689: LD_VAR 0 1
54693: PUSH
54694: LD_INT 12
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: PPUSH
54710: CALL_OW 69
54714: PUSH
54715: LD_INT 2
54717: GREATER
54718: AND
54719: IFFALSE 54742
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54721: LD_ADDR_VAR 0 18
54725: PUSH
54726: LD_INT 11
54728: PUSH
54729: LD_INT 30
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_VAR 0 12
54740: ARRAY
54741: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54742: LD_VAR 0 18
54746: NOT
54747: PUSH
54748: LD_INT 40
54750: PPUSH
54751: LD_VAR 0 16
54755: PPUSH
54756: CALL_OW 321
54760: PUSH
54761: LD_INT 2
54763: EQUAL
54764: AND
54765: PUSH
54766: LD_INT 7
54768: PUSH
54769: LD_VAR 0 5
54773: IN
54774: PUSH
54775: LD_INT 28
54777: PUSH
54778: LD_VAR 0 5
54782: IN
54783: OR
54784: PUSH
54785: LD_INT 45
54787: PUSH
54788: LD_VAR 0 5
54792: IN
54793: OR
54794: AND
54795: IFFALSE 55049
// begin hex := GetHexInfo ( x , y ) ;
54797: LD_ADDR_VAR 0 4
54801: PUSH
54802: LD_VAR 0 10
54806: PPUSH
54807: LD_VAR 0 11
54811: PPUSH
54812: CALL_OW 546
54816: ST_TO_ADDR
// if hex [ 1 ] then
54817: LD_VAR 0 4
54821: PUSH
54822: LD_INT 1
54824: ARRAY
54825: IFFALSE 54829
// exit ;
54827: GO 55232
// height := hex [ 2 ] ;
54829: LD_ADDR_VAR 0 15
54833: PUSH
54834: LD_VAR 0 4
54838: PUSH
54839: LD_INT 2
54841: ARRAY
54842: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54843: LD_ADDR_VAR 0 14
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: LD_INT 3
54856: PUSH
54857: LD_INT 5
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: ST_TO_ADDR
// for i in tmp do
54866: LD_ADDR_VAR 0 8
54870: PUSH
54871: LD_VAR 0 14
54875: PUSH
54876: FOR_IN
54877: IFFALSE 55047
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54879: LD_ADDR_VAR 0 9
54883: PUSH
54884: LD_VAR 0 10
54888: PPUSH
54889: LD_VAR 0 8
54893: PPUSH
54894: LD_INT 5
54896: PPUSH
54897: CALL_OW 272
54901: PUSH
54902: LD_VAR 0 11
54906: PPUSH
54907: LD_VAR 0 8
54911: PPUSH
54912: LD_INT 5
54914: PPUSH
54915: CALL_OW 273
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54924: LD_VAR 0 9
54928: PUSH
54929: LD_INT 1
54931: ARRAY
54932: PPUSH
54933: LD_VAR 0 9
54937: PUSH
54938: LD_INT 2
54940: ARRAY
54941: PPUSH
54942: CALL_OW 488
54946: IFFALSE 55045
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54948: LD_ADDR_VAR 0 4
54952: PUSH
54953: LD_VAR 0 9
54957: PUSH
54958: LD_INT 1
54960: ARRAY
54961: PPUSH
54962: LD_VAR 0 9
54966: PUSH
54967: LD_INT 2
54969: ARRAY
54970: PPUSH
54971: CALL_OW 546
54975: ST_TO_ADDR
// if hex [ 1 ] then
54976: LD_VAR 0 4
54980: PUSH
54981: LD_INT 1
54983: ARRAY
54984: IFFALSE 54988
// continue ;
54986: GO 54876
// h := hex [ 2 ] ;
54988: LD_ADDR_VAR 0 13
54992: PUSH
54993: LD_VAR 0 4
54997: PUSH
54998: LD_INT 2
55000: ARRAY
55001: ST_TO_ADDR
// if h + 7 < height then
55002: LD_VAR 0 13
55006: PUSH
55007: LD_INT 7
55009: PLUS
55010: PUSH
55011: LD_VAR 0 15
55015: LESS
55016: IFFALSE 55045
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
55018: LD_ADDR_VAR 0 18
55022: PUSH
55023: LD_INT 7
55025: PUSH
55026: LD_INT 28
55028: PUSH
55029: LD_INT 45
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: PUSH
55037: LD_VAR 0 12
55041: ARRAY
55042: ST_TO_ADDR
// break ;
55043: GO 55047
// end ; end ; end ;
55045: GO 54876
55047: POP
55048: POP
// end ; if not weapon then
55049: LD_VAR 0 18
55053: NOT
55054: IFFALSE 55114
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
55056: LD_ADDR_VAR 0 5
55060: PUSH
55061: LD_VAR 0 5
55065: PUSH
55066: LD_INT 11
55068: PUSH
55069: LD_INT 30
55071: PUSH
55072: LD_INT 49
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: LIST
55079: DIFF
55080: ST_TO_ADDR
// if not list then
55081: LD_VAR 0 5
55085: NOT
55086: IFFALSE 55090
// exit ;
55088: GO 55232
// weapon := list [ rand ( 1 , list ) ] ;
55090: LD_ADDR_VAR 0 18
55094: PUSH
55095: LD_VAR 0 5
55099: PUSH
55100: LD_INT 1
55102: PPUSH
55103: LD_VAR 0 5
55107: PPUSH
55108: CALL_OW 12
55112: ARRAY
55113: ST_TO_ADDR
// end ; if weapon then
55114: LD_VAR 0 18
55118: IFFALSE 55232
// begin tmp := CostOfWeapon ( weapon ) ;
55120: LD_ADDR_VAR 0 14
55124: PUSH
55125: LD_VAR 0 18
55129: PPUSH
55130: CALL_OW 451
55134: ST_TO_ADDR
// j := GetBase ( tower ) ;
55135: LD_ADDR_VAR 0 9
55139: PUSH
55140: LD_VAR 0 1
55144: PPUSH
55145: CALL_OW 274
55149: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
55150: LD_VAR 0 9
55154: PPUSH
55155: LD_INT 1
55157: PPUSH
55158: CALL_OW 275
55162: PUSH
55163: LD_VAR 0 14
55167: PUSH
55168: LD_INT 1
55170: ARRAY
55171: GREATEREQUAL
55172: PUSH
55173: LD_VAR 0 9
55177: PPUSH
55178: LD_INT 2
55180: PPUSH
55181: CALL_OW 275
55185: PUSH
55186: LD_VAR 0 14
55190: PUSH
55191: LD_INT 2
55193: ARRAY
55194: GREATEREQUAL
55195: AND
55196: PUSH
55197: LD_VAR 0 9
55201: PPUSH
55202: LD_INT 3
55204: PPUSH
55205: CALL_OW 275
55209: PUSH
55210: LD_VAR 0 14
55214: PUSH
55215: LD_INT 3
55217: ARRAY
55218: GREATEREQUAL
55219: AND
55220: IFFALSE 55232
// result := weapon ;
55222: LD_ADDR_VAR 0 3
55226: PUSH
55227: LD_VAR 0 18
55231: ST_TO_ADDR
// end ; end ;
55232: LD_VAR 0 3
55236: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55237: LD_INT 0
55239: PPUSH
55240: PPUSH
// result := true ;
55241: LD_ADDR_VAR 0 3
55245: PUSH
55246: LD_INT 1
55248: ST_TO_ADDR
// if array1 = array2 then
55249: LD_VAR 0 1
55253: PUSH
55254: LD_VAR 0 2
55258: EQUAL
55259: IFFALSE 55319
// begin for i = 1 to array1 do
55261: LD_ADDR_VAR 0 4
55265: PUSH
55266: DOUBLE
55267: LD_INT 1
55269: DEC
55270: ST_TO_ADDR
55271: LD_VAR 0 1
55275: PUSH
55276: FOR_TO
55277: IFFALSE 55315
// if array1 [ i ] <> array2 [ i ] then
55279: LD_VAR 0 1
55283: PUSH
55284: LD_VAR 0 4
55288: ARRAY
55289: PUSH
55290: LD_VAR 0 2
55294: PUSH
55295: LD_VAR 0 4
55299: ARRAY
55300: NONEQUAL
55301: IFFALSE 55313
// begin result := false ;
55303: LD_ADDR_VAR 0 3
55307: PUSH
55308: LD_INT 0
55310: ST_TO_ADDR
// break ;
55311: GO 55315
// end ;
55313: GO 55276
55315: POP
55316: POP
// end else
55317: GO 55327
// result := false ;
55319: LD_ADDR_VAR 0 3
55323: PUSH
55324: LD_INT 0
55326: ST_TO_ADDR
// end ;
55327: LD_VAR 0 3
55331: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55332: LD_INT 0
55334: PPUSH
55335: PPUSH
55336: PPUSH
// pom := GetBase ( fac ) ;
55337: LD_ADDR_VAR 0 5
55341: PUSH
55342: LD_VAR 0 1
55346: PPUSH
55347: CALL_OW 274
55351: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55352: LD_ADDR_VAR 0 4
55356: PUSH
55357: LD_VAR 0 2
55361: PUSH
55362: LD_INT 1
55364: ARRAY
55365: PPUSH
55366: LD_VAR 0 2
55370: PUSH
55371: LD_INT 2
55373: ARRAY
55374: PPUSH
55375: LD_VAR 0 2
55379: PUSH
55380: LD_INT 3
55382: ARRAY
55383: PPUSH
55384: LD_VAR 0 2
55388: PUSH
55389: LD_INT 4
55391: ARRAY
55392: PPUSH
55393: CALL_OW 449
55397: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55398: LD_ADDR_VAR 0 3
55402: PUSH
55403: LD_VAR 0 5
55407: PPUSH
55408: LD_INT 1
55410: PPUSH
55411: CALL_OW 275
55415: PUSH
55416: LD_VAR 0 4
55420: PUSH
55421: LD_INT 1
55423: ARRAY
55424: GREATEREQUAL
55425: PUSH
55426: LD_VAR 0 5
55430: PPUSH
55431: LD_INT 2
55433: PPUSH
55434: CALL_OW 275
55438: PUSH
55439: LD_VAR 0 4
55443: PUSH
55444: LD_INT 2
55446: ARRAY
55447: GREATEREQUAL
55448: AND
55449: PUSH
55450: LD_VAR 0 5
55454: PPUSH
55455: LD_INT 3
55457: PPUSH
55458: CALL_OW 275
55462: PUSH
55463: LD_VAR 0 4
55467: PUSH
55468: LD_INT 3
55470: ARRAY
55471: GREATEREQUAL
55472: AND
55473: ST_TO_ADDR
// end ;
55474: LD_VAR 0 3
55478: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55479: LD_INT 0
55481: PPUSH
55482: PPUSH
55483: PPUSH
55484: PPUSH
// pom := GetBase ( building ) ;
55485: LD_ADDR_VAR 0 3
55489: PUSH
55490: LD_VAR 0 1
55494: PPUSH
55495: CALL_OW 274
55499: ST_TO_ADDR
// if not pom then
55500: LD_VAR 0 3
55504: NOT
55505: IFFALSE 55509
// exit ;
55507: GO 55679
// btype := GetBType ( building ) ;
55509: LD_ADDR_VAR 0 5
55513: PUSH
55514: LD_VAR 0 1
55518: PPUSH
55519: CALL_OW 266
55523: ST_TO_ADDR
// if btype = b_armoury then
55524: LD_VAR 0 5
55528: PUSH
55529: LD_INT 4
55531: EQUAL
55532: IFFALSE 55542
// btype := b_barracks ;
55534: LD_ADDR_VAR 0 5
55538: PUSH
55539: LD_INT 5
55541: ST_TO_ADDR
// if btype = b_depot then
55542: LD_VAR 0 5
55546: PUSH
55547: LD_INT 0
55549: EQUAL
55550: IFFALSE 55560
// btype := b_warehouse ;
55552: LD_ADDR_VAR 0 5
55556: PUSH
55557: LD_INT 1
55559: ST_TO_ADDR
// if btype = b_workshop then
55560: LD_VAR 0 5
55564: PUSH
55565: LD_INT 2
55567: EQUAL
55568: IFFALSE 55578
// btype := b_factory ;
55570: LD_ADDR_VAR 0 5
55574: PUSH
55575: LD_INT 3
55577: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55578: LD_ADDR_VAR 0 4
55582: PUSH
55583: LD_VAR 0 5
55587: PPUSH
55588: LD_VAR 0 1
55592: PPUSH
55593: CALL_OW 248
55597: PPUSH
55598: CALL_OW 450
55602: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55603: LD_ADDR_VAR 0 2
55607: PUSH
55608: LD_VAR 0 3
55612: PPUSH
55613: LD_INT 1
55615: PPUSH
55616: CALL_OW 275
55620: PUSH
55621: LD_VAR 0 4
55625: PUSH
55626: LD_INT 1
55628: ARRAY
55629: GREATEREQUAL
55630: PUSH
55631: LD_VAR 0 3
55635: PPUSH
55636: LD_INT 2
55638: PPUSH
55639: CALL_OW 275
55643: PUSH
55644: LD_VAR 0 4
55648: PUSH
55649: LD_INT 2
55651: ARRAY
55652: GREATEREQUAL
55653: AND
55654: PUSH
55655: LD_VAR 0 3
55659: PPUSH
55660: LD_INT 3
55662: PPUSH
55663: CALL_OW 275
55667: PUSH
55668: LD_VAR 0 4
55672: PUSH
55673: LD_INT 3
55675: ARRAY
55676: GREATEREQUAL
55677: AND
55678: ST_TO_ADDR
// end ;
55679: LD_VAR 0 2
55683: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55684: LD_INT 0
55686: PPUSH
55687: PPUSH
55688: PPUSH
// pom := GetBase ( building ) ;
55689: LD_ADDR_VAR 0 4
55693: PUSH
55694: LD_VAR 0 1
55698: PPUSH
55699: CALL_OW 274
55703: ST_TO_ADDR
// if not pom then
55704: LD_VAR 0 4
55708: NOT
55709: IFFALSE 55713
// exit ;
55711: GO 55814
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55713: LD_ADDR_VAR 0 5
55717: PUSH
55718: LD_VAR 0 2
55722: PPUSH
55723: LD_VAR 0 1
55727: PPUSH
55728: CALL_OW 248
55732: PPUSH
55733: CALL_OW 450
55737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55738: LD_ADDR_VAR 0 3
55742: PUSH
55743: LD_VAR 0 4
55747: PPUSH
55748: LD_INT 1
55750: PPUSH
55751: CALL_OW 275
55755: PUSH
55756: LD_VAR 0 5
55760: PUSH
55761: LD_INT 1
55763: ARRAY
55764: GREATEREQUAL
55765: PUSH
55766: LD_VAR 0 4
55770: PPUSH
55771: LD_INT 2
55773: PPUSH
55774: CALL_OW 275
55778: PUSH
55779: LD_VAR 0 5
55783: PUSH
55784: LD_INT 2
55786: ARRAY
55787: GREATEREQUAL
55788: AND
55789: PUSH
55790: LD_VAR 0 4
55794: PPUSH
55795: LD_INT 3
55797: PPUSH
55798: CALL_OW 275
55802: PUSH
55803: LD_VAR 0 5
55807: PUSH
55808: LD_INT 3
55810: ARRAY
55811: GREATEREQUAL
55812: AND
55813: ST_TO_ADDR
// end ;
55814: LD_VAR 0 3
55818: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
55819: LD_INT 0
55821: PPUSH
55822: PPUSH
55823: PPUSH
55824: PPUSH
55825: PPUSH
55826: PPUSH
55827: PPUSH
55828: PPUSH
55829: PPUSH
55830: PPUSH
// result := false ;
55831: LD_ADDR_VAR 0 6
55835: PUSH
55836: LD_INT 0
55838: ST_TO_ADDR
// if not base or not btype or not x or not y then
55839: LD_VAR 0 1
55843: NOT
55844: PUSH
55845: LD_VAR 0 2
55849: NOT
55850: OR
55851: PUSH
55852: LD_VAR 0 3
55856: NOT
55857: OR
55858: PUSH
55859: LD_VAR 0 4
55863: NOT
55864: OR
55865: IFFALSE 55869
// exit ;
55867: GO 56478
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
55869: LD_ADDR_VAR 0 12
55873: PUSH
55874: LD_VAR 0 2
55878: PPUSH
55879: LD_VAR 0 3
55883: PPUSH
55884: LD_VAR 0 4
55888: PPUSH
55889: LD_VAR 0 5
55893: PPUSH
55894: LD_VAR 0 1
55898: PUSH
55899: LD_INT 1
55901: ARRAY
55902: PPUSH
55903: CALL_OW 248
55907: PPUSH
55908: LD_INT 0
55910: PPUSH
55911: CALL 57315 0 6
55915: ST_TO_ADDR
// if not hexes then
55916: LD_VAR 0 12
55920: NOT
55921: IFFALSE 55925
// exit ;
55923: GO 56478
// for i = 1 to hexes do
55925: LD_ADDR_VAR 0 7
55929: PUSH
55930: DOUBLE
55931: LD_INT 1
55933: DEC
55934: ST_TO_ADDR
55935: LD_VAR 0 12
55939: PUSH
55940: FOR_TO
55941: IFFALSE 56476
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55943: LD_ADDR_VAR 0 11
55947: PUSH
55948: LD_VAR 0 12
55952: PUSH
55953: LD_VAR 0 7
55957: ARRAY
55958: PUSH
55959: LD_INT 1
55961: ARRAY
55962: PPUSH
55963: LD_VAR 0 12
55967: PUSH
55968: LD_VAR 0 7
55972: ARRAY
55973: PUSH
55974: LD_INT 2
55976: ARRAY
55977: PPUSH
55978: CALL_OW 428
55982: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55983: LD_VAR 0 12
55987: PUSH
55988: LD_VAR 0 7
55992: ARRAY
55993: PUSH
55994: LD_INT 1
55996: ARRAY
55997: PPUSH
55998: LD_VAR 0 12
56002: PUSH
56003: LD_VAR 0 7
56007: ARRAY
56008: PUSH
56009: LD_INT 2
56011: ARRAY
56012: PPUSH
56013: CALL_OW 351
56017: PUSH
56018: LD_VAR 0 12
56022: PUSH
56023: LD_VAR 0 7
56027: ARRAY
56028: PUSH
56029: LD_INT 1
56031: ARRAY
56032: PPUSH
56033: LD_VAR 0 12
56037: PUSH
56038: LD_VAR 0 7
56042: ARRAY
56043: PUSH
56044: LD_INT 2
56046: ARRAY
56047: PPUSH
56048: CALL_OW 488
56052: NOT
56053: OR
56054: PUSH
56055: LD_VAR 0 11
56059: PPUSH
56060: CALL_OW 247
56064: PUSH
56065: LD_INT 3
56067: EQUAL
56068: OR
56069: IFFALSE 56075
// exit ;
56071: POP
56072: POP
56073: GO 56478
// if not tmp or not tmp in base then
56075: LD_VAR 0 11
56079: NOT
56080: PUSH
56081: LD_VAR 0 11
56085: PUSH
56086: LD_VAR 0 1
56090: IN
56091: NOT
56092: OR
56093: IFFALSE 56097
// continue ;
56095: GO 55940
// result := true ;
56097: LD_ADDR_VAR 0 6
56101: PUSH
56102: LD_INT 1
56104: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56105: LD_ADDR_VAR 0 15
56109: PUSH
56110: LD_VAR 0 1
56114: PPUSH
56115: LD_INT 22
56117: PUSH
56118: LD_VAR 0 11
56122: PPUSH
56123: CALL_OW 255
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 30
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 30
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: LIST
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PPUSH
56164: CALL_OW 72
56168: ST_TO_ADDR
// if dep then
56169: LD_VAR 0 15
56173: IFFALSE 56309
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56175: LD_ADDR_VAR 0 14
56179: PUSH
56180: LD_VAR 0 15
56184: PUSH
56185: LD_INT 1
56187: ARRAY
56188: PPUSH
56189: CALL_OW 250
56193: PPUSH
56194: LD_VAR 0 15
56198: PUSH
56199: LD_INT 1
56201: ARRAY
56202: PPUSH
56203: CALL_OW 254
56207: PPUSH
56208: LD_INT 5
56210: PPUSH
56211: CALL_OW 272
56215: PUSH
56216: LD_VAR 0 15
56220: PUSH
56221: LD_INT 1
56223: ARRAY
56224: PPUSH
56225: CALL_OW 251
56229: PPUSH
56230: LD_VAR 0 15
56234: PUSH
56235: LD_INT 1
56237: ARRAY
56238: PPUSH
56239: CALL_OW 254
56243: PPUSH
56244: LD_INT 5
56246: PPUSH
56247: CALL_OW 273
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56256: LD_VAR 0 14
56260: PUSH
56261: LD_INT 1
56263: ARRAY
56264: PPUSH
56265: LD_VAR 0 14
56269: PUSH
56270: LD_INT 2
56272: ARRAY
56273: PPUSH
56274: CALL_OW 488
56278: IFFALSE 56309
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56280: LD_VAR 0 11
56284: PPUSH
56285: LD_VAR 0 14
56289: PUSH
56290: LD_INT 1
56292: ARRAY
56293: PPUSH
56294: LD_VAR 0 14
56298: PUSH
56299: LD_INT 2
56301: ARRAY
56302: PPUSH
56303: CALL_OW 111
// continue ;
56307: GO 55940
// end ; end ; r := GetDir ( tmp ) ;
56309: LD_ADDR_VAR 0 13
56313: PUSH
56314: LD_VAR 0 11
56318: PPUSH
56319: CALL_OW 254
56323: ST_TO_ADDR
// if r = 5 then
56324: LD_VAR 0 13
56328: PUSH
56329: LD_INT 5
56331: EQUAL
56332: IFFALSE 56342
// r := 0 ;
56334: LD_ADDR_VAR 0 13
56338: PUSH
56339: LD_INT 0
56341: ST_TO_ADDR
// for j = r to 5 do
56342: LD_ADDR_VAR 0 8
56346: PUSH
56347: DOUBLE
56348: LD_VAR 0 13
56352: DEC
56353: ST_TO_ADDR
56354: LD_INT 5
56356: PUSH
56357: FOR_TO
56358: IFFALSE 56472
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56360: LD_ADDR_VAR 0 9
56364: PUSH
56365: LD_VAR 0 11
56369: PPUSH
56370: CALL_OW 250
56374: PPUSH
56375: LD_VAR 0 8
56379: PPUSH
56380: LD_INT 2
56382: PPUSH
56383: CALL_OW 272
56387: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56388: LD_ADDR_VAR 0 10
56392: PUSH
56393: LD_VAR 0 11
56397: PPUSH
56398: CALL_OW 251
56402: PPUSH
56403: LD_VAR 0 8
56407: PPUSH
56408: LD_INT 2
56410: PPUSH
56411: CALL_OW 273
56415: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56416: LD_VAR 0 9
56420: PPUSH
56421: LD_VAR 0 10
56425: PPUSH
56426: CALL_OW 488
56430: PUSH
56431: LD_VAR 0 9
56435: PPUSH
56436: LD_VAR 0 10
56440: PPUSH
56441: CALL_OW 428
56445: NOT
56446: AND
56447: IFFALSE 56470
// begin ComMoveXY ( tmp , _x , _y ) ;
56449: LD_VAR 0 11
56453: PPUSH
56454: LD_VAR 0 9
56458: PPUSH
56459: LD_VAR 0 10
56463: PPUSH
56464: CALL_OW 111
// break ;
56468: GO 56472
// end ; end ;
56470: GO 56357
56472: POP
56473: POP
// end ;
56474: GO 55940
56476: POP
56477: POP
// end ;
56478: LD_VAR 0 6
56482: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
56483: LD_INT 0
56485: PPUSH
56486: PPUSH
56487: PPUSH
56488: PPUSH
56489: PPUSH
56490: PPUSH
56491: PPUSH
56492: PPUSH
56493: PPUSH
56494: PPUSH
// result := false ;
56495: LD_ADDR_VAR 0 6
56499: PUSH
56500: LD_INT 0
56502: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56503: LD_VAR 0 1
56507: NOT
56508: PUSH
56509: LD_VAR 0 1
56513: PPUSH
56514: CALL_OW 266
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: IN
56529: NOT
56530: OR
56531: PUSH
56532: LD_VAR 0 2
56536: NOT
56537: OR
56538: PUSH
56539: LD_VAR 0 5
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: LD_INT 4
56558: PUSH
56559: LD_INT 5
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: IN
56570: NOT
56571: OR
56572: PUSH
56573: LD_VAR 0 3
56577: PPUSH
56578: LD_VAR 0 4
56582: PPUSH
56583: CALL_OW 488
56587: NOT
56588: OR
56589: IFFALSE 56593
// exit ;
56591: GO 57310
// pom := GetBase ( depot ) ;
56593: LD_ADDR_VAR 0 10
56597: PUSH
56598: LD_VAR 0 1
56602: PPUSH
56603: CALL_OW 274
56607: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56608: LD_ADDR_VAR 0 11
56612: PUSH
56613: LD_VAR 0 2
56617: PPUSH
56618: LD_VAR 0 1
56622: PPUSH
56623: CALL_OW 248
56627: PPUSH
56628: CALL_OW 450
56632: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56633: LD_VAR 0 10
56637: PPUSH
56638: LD_INT 1
56640: PPUSH
56641: CALL_OW 275
56645: PUSH
56646: LD_VAR 0 11
56650: PUSH
56651: LD_INT 1
56653: ARRAY
56654: GREATEREQUAL
56655: PUSH
56656: LD_VAR 0 10
56660: PPUSH
56661: LD_INT 2
56663: PPUSH
56664: CALL_OW 275
56668: PUSH
56669: LD_VAR 0 11
56673: PUSH
56674: LD_INT 2
56676: ARRAY
56677: GREATEREQUAL
56678: AND
56679: PUSH
56680: LD_VAR 0 10
56684: PPUSH
56685: LD_INT 3
56687: PPUSH
56688: CALL_OW 275
56692: PUSH
56693: LD_VAR 0 11
56697: PUSH
56698: LD_INT 3
56700: ARRAY
56701: GREATEREQUAL
56702: AND
56703: NOT
56704: IFFALSE 56708
// exit ;
56706: GO 57310
// if GetBType ( depot ) = b_depot then
56708: LD_VAR 0 1
56712: PPUSH
56713: CALL_OW 266
56717: PUSH
56718: LD_INT 0
56720: EQUAL
56721: IFFALSE 56733
// dist := 28 else
56723: LD_ADDR_VAR 0 14
56727: PUSH
56728: LD_INT 28
56730: ST_TO_ADDR
56731: GO 56741
// dist := 36 ;
56733: LD_ADDR_VAR 0 14
56737: PUSH
56738: LD_INT 36
56740: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56741: LD_VAR 0 1
56745: PPUSH
56746: LD_VAR 0 3
56750: PPUSH
56751: LD_VAR 0 4
56755: PPUSH
56756: CALL_OW 297
56760: PUSH
56761: LD_VAR 0 14
56765: GREATER
56766: IFFALSE 56770
// exit ;
56768: GO 57310
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56770: LD_ADDR_VAR 0 12
56774: PUSH
56775: LD_VAR 0 2
56779: PPUSH
56780: LD_VAR 0 3
56784: PPUSH
56785: LD_VAR 0 4
56789: PPUSH
56790: LD_VAR 0 5
56794: PPUSH
56795: LD_VAR 0 1
56799: PPUSH
56800: CALL_OW 248
56804: PPUSH
56805: LD_INT 0
56807: PPUSH
56808: CALL 57315 0 6
56812: ST_TO_ADDR
// if not hexes then
56813: LD_VAR 0 12
56817: NOT
56818: IFFALSE 56822
// exit ;
56820: GO 57310
// hex := GetHexInfo ( x , y ) ;
56822: LD_ADDR_VAR 0 15
56826: PUSH
56827: LD_VAR 0 3
56831: PPUSH
56832: LD_VAR 0 4
56836: PPUSH
56837: CALL_OW 546
56841: ST_TO_ADDR
// if hex [ 1 ] then
56842: LD_VAR 0 15
56846: PUSH
56847: LD_INT 1
56849: ARRAY
56850: IFFALSE 56854
// exit ;
56852: GO 57310
// height := hex [ 2 ] ;
56854: LD_ADDR_VAR 0 13
56858: PUSH
56859: LD_VAR 0 15
56863: PUSH
56864: LD_INT 2
56866: ARRAY
56867: ST_TO_ADDR
// for i = 1 to hexes do
56868: LD_ADDR_VAR 0 7
56872: PUSH
56873: DOUBLE
56874: LD_INT 1
56876: DEC
56877: ST_TO_ADDR
56878: LD_VAR 0 12
56882: PUSH
56883: FOR_TO
56884: IFFALSE 57214
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56886: LD_VAR 0 12
56890: PUSH
56891: LD_VAR 0 7
56895: ARRAY
56896: PUSH
56897: LD_INT 1
56899: ARRAY
56900: PPUSH
56901: LD_VAR 0 12
56905: PUSH
56906: LD_VAR 0 7
56910: ARRAY
56911: PUSH
56912: LD_INT 2
56914: ARRAY
56915: PPUSH
56916: CALL_OW 488
56920: NOT
56921: PUSH
56922: LD_VAR 0 12
56926: PUSH
56927: LD_VAR 0 7
56931: ARRAY
56932: PUSH
56933: LD_INT 1
56935: ARRAY
56936: PPUSH
56937: LD_VAR 0 12
56941: PUSH
56942: LD_VAR 0 7
56946: ARRAY
56947: PUSH
56948: LD_INT 2
56950: ARRAY
56951: PPUSH
56952: CALL_OW 428
56956: PUSH
56957: LD_INT 0
56959: GREATER
56960: OR
56961: PUSH
56962: LD_VAR 0 12
56966: PUSH
56967: LD_VAR 0 7
56971: ARRAY
56972: PUSH
56973: LD_INT 1
56975: ARRAY
56976: PPUSH
56977: LD_VAR 0 12
56981: PUSH
56982: LD_VAR 0 7
56986: ARRAY
56987: PUSH
56988: LD_INT 2
56990: ARRAY
56991: PPUSH
56992: CALL_OW 351
56996: OR
56997: IFFALSE 57003
// exit ;
56999: POP
57000: POP
57001: GO 57310
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57003: LD_ADDR_VAR 0 8
57007: PUSH
57008: LD_VAR 0 12
57012: PUSH
57013: LD_VAR 0 7
57017: ARRAY
57018: PUSH
57019: LD_INT 1
57021: ARRAY
57022: PPUSH
57023: LD_VAR 0 12
57027: PUSH
57028: LD_VAR 0 7
57032: ARRAY
57033: PUSH
57034: LD_INT 2
57036: ARRAY
57037: PPUSH
57038: CALL_OW 546
57042: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57043: LD_VAR 0 8
57047: PUSH
57048: LD_INT 1
57050: ARRAY
57051: PUSH
57052: LD_VAR 0 8
57056: PUSH
57057: LD_INT 2
57059: ARRAY
57060: PUSH
57061: LD_VAR 0 13
57065: PUSH
57066: LD_INT 2
57068: PLUS
57069: GREATER
57070: OR
57071: PUSH
57072: LD_VAR 0 8
57076: PUSH
57077: LD_INT 2
57079: ARRAY
57080: PUSH
57081: LD_VAR 0 13
57085: PUSH
57086: LD_INT 2
57088: MINUS
57089: LESS
57090: OR
57091: PUSH
57092: LD_VAR 0 8
57096: PUSH
57097: LD_INT 3
57099: ARRAY
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 8
57106: PUSH
57107: LD_INT 9
57109: PUSH
57110: LD_INT 10
57112: PUSH
57113: LD_INT 11
57115: PUSH
57116: LD_INT 12
57118: PUSH
57119: LD_INT 13
57121: PUSH
57122: LD_INT 16
57124: PUSH
57125: LD_INT 17
57127: PUSH
57128: LD_INT 18
57130: PUSH
57131: LD_INT 19
57133: PUSH
57134: LD_INT 20
57136: PUSH
57137: LD_INT 21
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: IN
57155: NOT
57156: OR
57157: PUSH
57158: LD_VAR 0 8
57162: PUSH
57163: LD_INT 5
57165: ARRAY
57166: NOT
57167: OR
57168: PUSH
57169: LD_VAR 0 8
57173: PUSH
57174: LD_INT 6
57176: ARRAY
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 7
57186: PUSH
57187: LD_INT 9
57189: PUSH
57190: LD_INT 10
57192: PUSH
57193: LD_INT 11
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: IN
57204: NOT
57205: OR
57206: IFFALSE 57212
// exit ;
57208: POP
57209: POP
57210: GO 57310
// end ;
57212: GO 56883
57214: POP
57215: POP
// side := GetSide ( depot ) ;
57216: LD_ADDR_VAR 0 9
57220: PUSH
57221: LD_VAR 0 1
57225: PPUSH
57226: CALL_OW 255
57230: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57231: LD_VAR 0 9
57235: PPUSH
57236: LD_VAR 0 3
57240: PPUSH
57241: LD_VAR 0 4
57245: PPUSH
57246: LD_INT 20
57248: PPUSH
57249: CALL 49964 0 4
57253: PUSH
57254: LD_INT 4
57256: ARRAY
57257: IFFALSE 57261
// exit ;
57259: GO 57310
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57261: LD_VAR 0 2
57265: PUSH
57266: LD_INT 29
57268: PUSH
57269: LD_INT 30
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: IN
57276: PUSH
57277: LD_VAR 0 3
57281: PPUSH
57282: LD_VAR 0 4
57286: PPUSH
57287: LD_VAR 0 9
57291: PPUSH
57292: CALL_OW 440
57296: NOT
57297: AND
57298: IFFALSE 57302
// exit ;
57300: GO 57310
// result := true ;
57302: LD_ADDR_VAR 0 6
57306: PUSH
57307: LD_INT 1
57309: ST_TO_ADDR
// end ;
57310: LD_VAR 0 6
57314: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57315: LD_INT 0
57317: PPUSH
57318: PPUSH
57319: PPUSH
57320: PPUSH
57321: PPUSH
57322: PPUSH
57323: PPUSH
57324: PPUSH
57325: PPUSH
57326: PPUSH
57327: PPUSH
57328: PPUSH
57329: PPUSH
57330: PPUSH
57331: PPUSH
57332: PPUSH
57333: PPUSH
57334: PPUSH
57335: PPUSH
57336: PPUSH
57337: PPUSH
57338: PPUSH
57339: PPUSH
57340: PPUSH
57341: PPUSH
57342: PPUSH
57343: PPUSH
57344: PPUSH
57345: PPUSH
57346: PPUSH
57347: PPUSH
57348: PPUSH
57349: PPUSH
57350: PPUSH
57351: PPUSH
57352: PPUSH
57353: PPUSH
57354: PPUSH
57355: PPUSH
57356: PPUSH
57357: PPUSH
57358: PPUSH
57359: PPUSH
57360: PPUSH
57361: PPUSH
57362: PPUSH
57363: PPUSH
57364: PPUSH
57365: PPUSH
57366: PPUSH
57367: PPUSH
57368: PPUSH
57369: PPUSH
57370: PPUSH
57371: PPUSH
57372: PPUSH
57373: PPUSH
57374: PPUSH
// result = [ ] ;
57375: LD_ADDR_VAR 0 7
57379: PUSH
57380: EMPTY
57381: ST_TO_ADDR
// temp_list = [ ] ;
57382: LD_ADDR_VAR 0 9
57386: PUSH
57387: EMPTY
57388: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57389: LD_VAR 0 4
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: LD_INT 4
57408: PUSH
57409: LD_INT 5
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: IN
57420: NOT
57421: PUSH
57422: LD_VAR 0 1
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: IN
57437: PUSH
57438: LD_VAR 0 5
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: LIST
57456: IN
57457: NOT
57458: AND
57459: OR
57460: IFFALSE 57464
// exit ;
57462: GO 75855
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57464: LD_VAR 0 1
57468: PUSH
57469: LD_INT 6
57471: PUSH
57472: LD_INT 7
57474: PUSH
57475: LD_INT 8
57477: PUSH
57478: LD_INT 13
57480: PUSH
57481: LD_INT 12
57483: PUSH
57484: LD_INT 15
57486: PUSH
57487: LD_INT 11
57489: PUSH
57490: LD_INT 14
57492: PUSH
57493: LD_INT 10
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: IN
57507: IFFALSE 57517
// btype = b_lab ;
57509: LD_ADDR_VAR 0 1
57513: PUSH
57514: LD_INT 6
57516: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57517: LD_VAR 0 6
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: IN
57536: NOT
57537: PUSH
57538: LD_VAR 0 1
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: LD_INT 6
57557: PUSH
57558: LD_INT 36
57560: PUSH
57561: LD_INT 4
57563: PUSH
57564: LD_INT 5
57566: PUSH
57567: LD_INT 31
57569: PUSH
57570: LD_INT 32
57572: PUSH
57573: LD_INT 33
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: IN
57589: NOT
57590: PUSH
57591: LD_VAR 0 6
57595: PUSH
57596: LD_INT 1
57598: EQUAL
57599: AND
57600: OR
57601: PUSH
57602: LD_VAR 0 1
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 3
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: IN
57617: NOT
57618: PUSH
57619: LD_VAR 0 6
57623: PUSH
57624: LD_INT 2
57626: EQUAL
57627: AND
57628: OR
57629: IFFALSE 57639
// mode = 0 ;
57631: LD_ADDR_VAR 0 6
57635: PUSH
57636: LD_INT 0
57638: ST_TO_ADDR
// case mode of 0 :
57639: LD_VAR 0 6
57643: PUSH
57644: LD_INT 0
57646: DOUBLE
57647: EQUAL
57648: IFTRUE 57652
57650: GO 69105
57652: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57653: LD_ADDR_VAR 0 11
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: LD_INT 2
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57846: LD_ADDR_VAR 0 12
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 3
58003: NEG
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 3
58014: NEG
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58042: LD_ADDR_VAR 0 13
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: LD_INT 3
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: LD_INT 3
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58241: LD_ADDR_VAR 0 14
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: LD_INT 3
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58437: LD_ADDR_VAR 0 15
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 3
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58630: LD_ADDR_VAR 0 16
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 2
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: LD_INT 2
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58823: LD_ADDR_VAR 0 17
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59053: LD_ADDR_VAR 0 18
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59283: LD_ADDR_VAR 0 19
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59513: LD_ADDR_VAR 0 20
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: LD_INT 2
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59743: LD_ADDR_VAR 0 21
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59973: LD_ADDR_VAR 0 22
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: LD_INT 2
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: NEG
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60203: LD_ADDR_VAR 0 23
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: LD_INT 3
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 3
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60483: LD_ADDR_VAR 0 24
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 2
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: LD_INT 2
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: LD_INT 2
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: LD_INT 2
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: LD_INT 2
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 3
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60759: LD_ADDR_VAR 0 25
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 2
60946: NEG
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61033: LD_ADDR_VAR 0 26
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 2
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: LD_INT 3
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 3
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61309: LD_ADDR_VAR 0 27
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: LD_INT 1
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: LD_INT 2
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 2
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: LD_INT 1
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 3
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61589: LD_ADDR_VAR 0 28
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 2
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 2
61765: NEG
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 2
61800: NEG
61801: PUSH
61802: LD_INT 3
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 3
61824: NEG
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 3
61836: NEG
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61871: LD_ADDR_VAR 0 29
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 2
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 2
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: LD_INT 2
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: LD_INT 3
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 3
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 3
62115: NEG
62116: PUSH
62117: LD_INT 2
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62150: LD_ADDR_VAR 0 30
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 2
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 2
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 2
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 2
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 2
62285: PUSH
62286: LD_INT 2
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: NEG
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 3
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: LD_INT 2
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 3
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: LD_INT 3
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 2
62382: NEG
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 3
62393: NEG
62394: PUSH
62395: LD_INT 1
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62428: LD_ADDR_VAR 0 31
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: LD_INT 2
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 2
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: LD_INT 2
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: NEG
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: LD_INT 2
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: NEG
62618: PUSH
62619: LD_INT 3
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 3
62640: PUSH
62641: LD_INT 1
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: LD_INT 3
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: LD_INT 2
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 3
62671: NEG
62672: PUSH
62673: LD_INT 2
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62706: LD_ADDR_VAR 0 32
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 2
62872: NEG
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 3
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 3
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 2
62928: PUSH
62929: LD_INT 3
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 3
62949: NEG
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62984: LD_ADDR_VAR 0 33
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: PUSH
63067: LD_INT 2
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 2
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: LD_INT 2
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 2
63150: NEG
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: LD_INT 2
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: LD_INT 3
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 3
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: LD_INT 3
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: PUSH
63219: LD_INT 2
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63263: LD_ADDR_VAR 0 34
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 2
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 2
63378: PUSH
63379: LD_INT 1
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: LD_INT 2
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: LD_INT 2
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 2
63430: NEG
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 2
63442: NEG
63443: PUSH
63444: LD_INT 2
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: LD_INT 3
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: PUSH
63467: LD_INT 2
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 3
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: LD_INT 3
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 3
63508: NEG
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63543: LD_ADDR_VAR 0 35
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: NEG
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63655: LD_ADDR_VAR 0 36
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: LD_INT 1
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 2
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63767: LD_ADDR_VAR 0 37
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 1
63836: NEG
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63879: LD_ADDR_VAR 0 38
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 2
63970: NEG
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63991: LD_ADDR_VAR 0 39
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: LD_INT 2
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64103: LD_ADDR_VAR 0 40
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: NEG
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: LD_INT 1
64187: NEG
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64215: LD_ADDR_VAR 0 41
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: LD_INT 2
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 2
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 2
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: LD_INT 2
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 2
64370: NEG
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 2
64381: NEG
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: NEG
64406: PUSH
64407: LD_INT 3
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 3
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 3
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 3
64448: PUSH
64449: LD_INT 2
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 3
64458: PUSH
64459: LD_INT 3
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: LD_INT 3
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: LD_INT 1
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 3
64489: NEG
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 3
64500: NEG
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 3
64512: NEG
64513: PUSH
64514: LD_INT 2
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 3
64524: NEG
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64565: LD_ADDR_VAR 0 42
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: LD_INT 1
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: LD_INT 1
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: LD_INT 2
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 2
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 2
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 2
64690: PUSH
64691: LD_INT 2
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: LD_INT 2
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 2
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 2
64731: NEG
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: NEG
64744: PUSH
64745: LD_INT 2
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 2
64755: NEG
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: PUSH
64769: LD_INT 3
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 3
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 3
64801: PUSH
64802: LD_INT 2
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 3
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: LD_INT 3
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: LD_INT 3
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 3
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: NEG
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 3
64862: NEG
64863: PUSH
64864: LD_INT 2
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 3
64874: NEG
64875: PUSH
64876: LD_INT 3
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64915: LD_ADDR_VAR 0 43
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: LD_INT 2
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: LD_INT 2
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: PUSH
65041: LD_INT 1
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: LD_INT 2
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: LD_INT 2
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 2
65081: NEG
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 2
65092: NEG
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: PUSH
65106: LD_INT 3
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 3
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: LD_INT 2
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: LD_INT 1
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 3
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 3
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: LD_INT 3
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 3
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 1
65189: NEG
65190: PUSH
65191: LD_INT 2
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 2
65200: NEG
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 3
65211: NEG
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 3
65222: NEG
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65263: LD_ADDR_VAR 0 44
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 0
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: LD_INT 1
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: LD_INT 1
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: LD_INT 2
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 2
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 2
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 2
65418: NEG
65419: PUSH
65420: LD_INT 0
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 2
65429: NEG
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 2
65441: NEG
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 2
65453: NEG
65454: PUSH
65455: LD_INT 3
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 2
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 3
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 3
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 3
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 3
65506: PUSH
65507: LD_INT 3
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 2
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 2
65526: NEG
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 3
65537: NEG
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 3
65548: NEG
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 3
65560: NEG
65561: PUSH
65562: LD_INT 2
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 3
65572: NEG
65573: PUSH
65574: LD_INT 3
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65613: LD_ADDR_VAR 0 45
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: LD_INT 2
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: LD_INT 2
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: LD_INT 2
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: LD_INT 2
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: LD_INT 2
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: LD_INT 1
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 2
65779: NEG
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 2
65791: NEG
65792: PUSH
65793: LD_INT 2
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 2
65803: NEG
65804: PUSH
65805: LD_INT 3
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: PUSH
65817: LD_INT 3
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: LD_INT 3
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: LD_INT 2
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 3
65849: PUSH
65850: LD_INT 2
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 3
65859: PUSH
65860: LD_INT 3
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 2
65869: PUSH
65870: LD_INT 3
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 1
65879: PUSH
65880: LD_INT 3
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: LD_INT 3
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 1
65899: NEG
65900: PUSH
65901: LD_INT 2
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 3
65910: NEG
65911: PUSH
65912: LD_INT 2
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 3
65922: NEG
65923: PUSH
65924: LD_INT 3
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65963: LD_ADDR_VAR 0 46
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: LD_INT 1
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 1
66021: NEG
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 1
66032: NEG
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: LD_INT 2
66059: NEG
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: LD_INT 1
66070: NEG
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 2
66078: PUSH
66079: LD_INT 0
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 2
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 1
66098: PUSH
66099: LD_INT 2
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: LD_INT 2
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 1
66118: NEG
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 2
66129: NEG
66130: PUSH
66131: LD_INT 0
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 2
66140: NEG
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: NEG
66153: PUSH
66154: LD_INT 3
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: LD_INT 3
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: LD_INT 2
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 2
66186: PUSH
66187: LD_INT 1
66189: NEG
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 3
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: PUSH
66218: LD_INT 3
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: LD_INT 3
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: LD_INT 2
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 2
66248: NEG
66249: PUSH
66250: LD_INT 1
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 3
66259: NEG
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 3
66270: NEG
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66311: LD_ADDR_VAR 0 47
66315: PUSH
66316: LD_INT 0
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: LD_INT 1
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 1
66349: PUSH
66350: LD_INT 1
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 1
66380: NEG
66381: PUSH
66382: LD_INT 1
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 1
66392: NEG
66393: PUSH
66394: LD_INT 2
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: LD_INT 2
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: LD_INT 1
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 2
66426: NEG
66427: PUSH
66428: LD_INT 1
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 2
66438: NEG
66439: PUSH
66440: LD_INT 2
66442: NEG
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66462: LD_ADDR_VAR 0 48
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: LD_INT 0
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 1
66500: PUSH
66501: LD_INT 1
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 0
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 1
66520: NEG
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: LD_INT 2
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: LD_INT 2
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: LD_INT 1
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 2
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 2
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66609: LD_ADDR_VAR 0 49
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 1
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 1
66647: PUSH
66648: LD_INT 1
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 2
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 2
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 2
66721: PUSH
66722: LD_INT 2
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: LD_INT 2
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66753: LD_ADDR_VAR 0 50
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: LD_INT 1
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: LD_INT 1
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: LD_INT 1
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 2
66844: PUSH
66845: LD_INT 2
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: LD_INT 2
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 2
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: LD_INT 1
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66897: LD_ADDR_VAR 0 51
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: LD_INT 0
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: LD_INT 0
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: PUSH
66936: LD_INT 1
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: LD_INT 1
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 1
66955: NEG
66956: PUSH
66957: LD_INT 0
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 1
66966: NEG
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 1
66978: PUSH
66979: LD_INT 2
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: LD_INT 2
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 1
66998: NEG
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 2
67009: NEG
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 2
67020: NEG
67021: PUSH
67022: LD_INT 1
67024: NEG
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67044: LD_ADDR_VAR 0 52
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 0
67061: PUSH
67062: LD_INT 1
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 1
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: LD_INT 1
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 0
67092: PUSH
67093: LD_INT 1
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 1
67102: NEG
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: LD_INT 1
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 1
67125: NEG
67126: PUSH
67127: LD_INT 2
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: NEG
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 2
67159: NEG
67160: PUSH
67161: LD_INT 1
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 2
67171: NEG
67172: PUSH
67173: LD_INT 2
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67195: LD_ADDR_VAR 0 53
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: LD_INT 1
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 1
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: LD_INT 1
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 1
67253: NEG
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 1
67264: NEG
67265: PUSH
67266: LD_INT 1
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 1
67276: NEG
67277: PUSH
67278: LD_INT 2
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: LD_INT 2
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 1
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 2
67310: PUSH
67311: LD_INT 0
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 2
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 2
67330: PUSH
67331: LD_INT 2
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: LD_INT 2
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 1
67360: NEG
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 2
67371: NEG
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: LD_INT 1
67386: NEG
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 2
67394: NEG
67395: PUSH
67396: LD_INT 2
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67425: LD_ADDR_VAR 0 54
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 0
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 1
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 1
67463: PUSH
67464: LD_INT 1
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: LD_INT 1
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: LD_INT 0
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 1
67494: NEG
67495: PUSH
67496: LD_INT 1
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 1
67506: NEG
67507: PUSH
67508: LD_INT 2
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: LD_INT 2
67521: NEG
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 1
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 2
67540: PUSH
67541: LD_INT 0
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 2
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 2
67560: PUSH
67561: LD_INT 2
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 1
67570: PUSH
67571: LD_INT 2
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: LD_INT 2
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 1
67590: NEG
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 2
67612: NEG
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 2
67624: NEG
67625: PUSH
67626: LD_INT 2
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67655: LD_ADDR_VAR 0 55
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 0
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: LD_INT 1
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 1
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 1
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 0
67703: PUSH
67704: LD_INT 1
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 1
67713: NEG
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: NEG
67725: PUSH
67726: LD_INT 1
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 2
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: LD_INT 1
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 2
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 2
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 2
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: LD_INT 2
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: LD_INT 2
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 1
67820: NEG
67821: PUSH
67822: LD_INT 1
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 2
67831: NEG
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 2
67842: NEG
67843: PUSH
67844: LD_INT 1
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 2
67854: NEG
67855: PUSH
67856: LD_INT 2
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67885: LD_ADDR_VAR 0 56
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 0
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 1
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 1
67923: PUSH
67924: LD_INT 1
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: LD_INT 1
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 1
67943: NEG
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 1
67954: NEG
67955: PUSH
67956: LD_INT 1
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 1
67966: NEG
67967: PUSH
67968: LD_INT 2
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 1
67989: PUSH
67990: LD_INT 1
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 2
68000: PUSH
68001: LD_INT 0
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 2
68010: PUSH
68011: LD_INT 1
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 2
68020: PUSH
68021: LD_INT 2
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: LD_INT 2
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: LD_INT 2
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 1
68050: NEG
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 2
68061: NEG
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 2
68072: NEG
68073: PUSH
68074: LD_INT 1
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 2
68084: NEG
68085: PUSH
68086: LD_INT 2
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68115: LD_ADDR_VAR 0 57
68119: PUSH
68120: LD_INT 0
68122: PUSH
68123: LD_INT 0
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: LD_INT 1
68135: NEG
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 1
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: LD_INT 1
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: NEG
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: LD_INT 1
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 1
68196: NEG
68197: PUSH
68198: LD_INT 2
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: LD_INT 2
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 1
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 2
68230: PUSH
68231: LD_INT 0
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: LD_INT 1
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 2
68250: PUSH
68251: LD_INT 2
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 1
68260: PUSH
68261: LD_INT 2
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 0
68270: PUSH
68271: LD_INT 2
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 1
68280: NEG
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 2
68291: NEG
68292: PUSH
68293: LD_INT 0
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 2
68302: NEG
68303: PUSH
68304: LD_INT 1
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 2
68314: NEG
68315: PUSH
68316: LD_INT 2
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68345: LD_ADDR_VAR 0 58
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: LD_INT 0
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 0
68362: PUSH
68363: LD_INT 1
68365: NEG
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 1
68373: PUSH
68374: LD_INT 0
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 1
68383: PUSH
68384: LD_INT 1
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 0
68393: PUSH
68394: LD_INT 1
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: NEG
68415: PUSH
68416: LD_INT 1
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 1
68426: NEG
68427: PUSH
68428: LD_INT 2
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: LD_INT 2
68441: NEG
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 1
68449: PUSH
68450: LD_INT 1
68452: NEG
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 2
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 2
68470: PUSH
68471: LD_INT 1
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 2
68480: PUSH
68481: LD_INT 2
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 1
68490: PUSH
68491: LD_INT 2
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 0
68500: PUSH
68501: LD_INT 2
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 1
68510: NEG
68511: PUSH
68512: LD_INT 1
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 2
68521: NEG
68522: PUSH
68523: LD_INT 0
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 2
68532: NEG
68533: PUSH
68534: LD_INT 1
68536: NEG
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 2
68544: NEG
68545: PUSH
68546: LD_INT 2
68548: NEG
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68575: LD_ADDR_VAR 0 59
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: LD_INT 1
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: PUSH
68604: LD_INT 0
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 1
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 0
68623: PUSH
68624: LD_INT 1
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 1
68633: NEG
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: LD_INT 1
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68663: LD_ADDR_VAR 0 60
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: LD_INT 1
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 1
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 1
68701: PUSH
68702: LD_INT 1
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 0
68711: PUSH
68712: LD_INT 1
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: LD_INT 0
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 1
68732: NEG
68733: PUSH
68734: LD_INT 1
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68751: LD_ADDR_VAR 0 61
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 0
68768: PUSH
68769: LD_INT 1
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 1
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 1
68789: PUSH
68790: LD_INT 1
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 0
68799: PUSH
68800: LD_INT 1
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 1
68809: NEG
68810: PUSH
68811: LD_INT 0
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 1
68820: NEG
68821: PUSH
68822: LD_INT 1
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68839: LD_ADDR_VAR 0 62
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 1
68867: PUSH
68868: LD_INT 0
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 1
68877: PUSH
68878: LD_INT 1
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 0
68887: PUSH
68888: LD_INT 1
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 1
68908: NEG
68909: PUSH
68910: LD_INT 1
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68927: LD_ADDR_VAR 0 63
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: LD_INT 0
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: LD_INT 1
68947: NEG
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 1
68955: PUSH
68956: LD_INT 0
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 1
68965: PUSH
68966: LD_INT 1
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 0
68975: PUSH
68976: LD_INT 1
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 1
68985: NEG
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 1
68996: NEG
68997: PUSH
68998: LD_INT 1
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69015: LD_ADDR_VAR 0 64
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: LD_INT 0
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: LD_INT 1
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 1
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 1
69053: PUSH
69054: LD_INT 1
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 0
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: NEG
69074: PUSH
69075: LD_INT 0
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 1
69084: NEG
69085: PUSH
69086: LD_INT 1
69088: NEG
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: ST_TO_ADDR
// end ; 1 :
69103: GO 75000
69105: LD_INT 1
69107: DOUBLE
69108: EQUAL
69109: IFTRUE 69113
69111: GO 71736
69113: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69114: LD_ADDR_VAR 0 11
69118: PUSH
69119: LD_INT 1
69121: NEG
69122: PUSH
69123: LD_INT 3
69125: NEG
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: LD_INT 3
69136: NEG
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 1
69144: PUSH
69145: LD_INT 2
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: LIST
69157: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69158: LD_ADDR_VAR 0 12
69162: PUSH
69163: LD_INT 2
69165: PUSH
69166: LD_INT 1
69168: NEG
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 3
69176: PUSH
69177: LD_INT 0
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 3
69186: PUSH
69187: LD_INT 1
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: LIST
69198: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69199: LD_ADDR_VAR 0 13
69203: PUSH
69204: LD_INT 3
69206: PUSH
69207: LD_INT 2
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 3
69216: PUSH
69217: LD_INT 3
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 2
69226: PUSH
69227: LD_INT 3
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: LIST
69238: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69239: LD_ADDR_VAR 0 14
69243: PUSH
69244: LD_INT 1
69246: PUSH
69247: LD_INT 3
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: LD_INT 3
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 1
69266: NEG
69267: PUSH
69268: LD_INT 2
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: LIST
69279: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69280: LD_ADDR_VAR 0 15
69284: PUSH
69285: LD_INT 2
69287: NEG
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 3
69298: NEG
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 3
69309: NEG
69310: PUSH
69311: LD_INT 1
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: LIST
69323: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69324: LD_ADDR_VAR 0 16
69328: PUSH
69329: LD_INT 2
69331: NEG
69332: PUSH
69333: LD_INT 3
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 3
69343: NEG
69344: PUSH
69345: LD_INT 2
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 3
69355: NEG
69356: PUSH
69357: LD_INT 3
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: LIST
69369: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69370: LD_ADDR_VAR 0 17
69374: PUSH
69375: LD_INT 1
69377: NEG
69378: PUSH
69379: LD_INT 3
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 0
69389: PUSH
69390: LD_INT 3
69392: NEG
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 1
69400: PUSH
69401: LD_INT 2
69403: NEG
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: LIST
69413: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69414: LD_ADDR_VAR 0 18
69418: PUSH
69419: LD_INT 2
69421: PUSH
69422: LD_INT 1
69424: NEG
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 3
69432: PUSH
69433: LD_INT 0
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 3
69442: PUSH
69443: LD_INT 1
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: LIST
69454: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69455: LD_ADDR_VAR 0 19
69459: PUSH
69460: LD_INT 3
69462: PUSH
69463: LD_INT 2
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 3
69472: PUSH
69473: LD_INT 3
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 2
69482: PUSH
69483: LD_INT 3
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: LIST
69494: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69495: LD_ADDR_VAR 0 20
69499: PUSH
69500: LD_INT 1
69502: PUSH
69503: LD_INT 3
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 0
69512: PUSH
69513: LD_INT 3
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 1
69522: NEG
69523: PUSH
69524: LD_INT 2
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: LIST
69535: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69536: LD_ADDR_VAR 0 21
69540: PUSH
69541: LD_INT 2
69543: NEG
69544: PUSH
69545: LD_INT 1
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 3
69554: NEG
69555: PUSH
69556: LD_INT 0
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 3
69565: NEG
69566: PUSH
69567: LD_INT 1
69569: NEG
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: LIST
69579: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69580: LD_ADDR_VAR 0 22
69584: PUSH
69585: LD_INT 2
69587: NEG
69588: PUSH
69589: LD_INT 3
69591: NEG
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 3
69599: NEG
69600: PUSH
69601: LD_INT 2
69603: NEG
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 3
69611: NEG
69612: PUSH
69613: LD_INT 3
69615: NEG
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: LIST
69625: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69626: LD_ADDR_VAR 0 23
69630: PUSH
69631: LD_INT 0
69633: PUSH
69634: LD_INT 3
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 1
69644: NEG
69645: PUSH
69646: LD_INT 4
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 1
69656: PUSH
69657: LD_INT 3
69659: NEG
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: LIST
69669: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69670: LD_ADDR_VAR 0 24
69674: PUSH
69675: LD_INT 3
69677: PUSH
69678: LD_INT 0
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 3
69687: PUSH
69688: LD_INT 1
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 4
69698: PUSH
69699: LD_INT 1
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: LIST
69710: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69711: LD_ADDR_VAR 0 25
69715: PUSH
69716: LD_INT 3
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 4
69728: PUSH
69729: LD_INT 3
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 3
69738: PUSH
69739: LD_INT 4
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: LIST
69750: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69751: LD_ADDR_VAR 0 26
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: LD_INT 3
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 1
69768: PUSH
69769: LD_INT 4
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 1
69778: NEG
69779: PUSH
69780: LD_INT 3
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: LIST
69791: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69792: LD_ADDR_VAR 0 27
69796: PUSH
69797: LD_INT 3
69799: NEG
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 3
69810: NEG
69811: PUSH
69812: LD_INT 1
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 4
69821: NEG
69822: PUSH
69823: LD_INT 1
69825: NEG
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: LIST
69835: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69836: LD_ADDR_VAR 0 28
69840: PUSH
69841: LD_INT 3
69843: NEG
69844: PUSH
69845: LD_INT 3
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 3
69855: NEG
69856: PUSH
69857: LD_INT 4
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 4
69867: NEG
69868: PUSH
69869: LD_INT 3
69871: NEG
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: LIST
69881: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69882: LD_ADDR_VAR 0 29
69886: PUSH
69887: LD_INT 1
69889: NEG
69890: PUSH
69891: LD_INT 3
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 0
69901: PUSH
69902: LD_INT 3
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 1
69912: PUSH
69913: LD_INT 2
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 1
69923: NEG
69924: PUSH
69925: LD_INT 4
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 0
69935: PUSH
69936: LD_INT 4
69938: NEG
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 1
69946: PUSH
69947: LD_INT 3
69949: NEG
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 1
69957: NEG
69958: PUSH
69959: LD_INT 5
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 0
69969: PUSH
69970: LD_INT 5
69972: NEG
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: LD_INT 4
69983: NEG
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 1
69991: NEG
69992: PUSH
69993: LD_INT 6
69995: NEG
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 0
70003: PUSH
70004: LD_INT 6
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 1
70014: PUSH
70015: LD_INT 5
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70037: LD_ADDR_VAR 0 30
70041: PUSH
70042: LD_INT 2
70044: PUSH
70045: LD_INT 1
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 3
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 3
70065: PUSH
70066: LD_INT 1
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 3
70075: PUSH
70076: LD_INT 1
70078: NEG
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 4
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 4
70096: PUSH
70097: LD_INT 1
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 4
70106: PUSH
70107: LD_INT 1
70109: NEG
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 5
70117: PUSH
70118: LD_INT 0
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 5
70127: PUSH
70128: LD_INT 1
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 5
70137: PUSH
70138: LD_INT 1
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 6
70148: PUSH
70149: LD_INT 0
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 6
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70180: LD_ADDR_VAR 0 31
70184: PUSH
70185: LD_INT 3
70187: PUSH
70188: LD_INT 2
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 3
70197: PUSH
70198: LD_INT 3
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 2
70207: PUSH
70208: LD_INT 3
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 4
70217: PUSH
70218: LD_INT 3
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 4
70227: PUSH
70228: LD_INT 4
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 3
70237: PUSH
70238: LD_INT 4
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 5
70247: PUSH
70248: LD_INT 4
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 5
70257: PUSH
70258: LD_INT 5
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 4
70267: PUSH
70268: LD_INT 5
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 6
70277: PUSH
70278: LD_INT 5
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 6
70287: PUSH
70288: LD_INT 6
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 5
70297: PUSH
70298: LD_INT 6
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70319: LD_ADDR_VAR 0 32
70323: PUSH
70324: LD_INT 1
70326: PUSH
70327: LD_INT 3
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: LD_INT 3
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 1
70346: NEG
70347: PUSH
70348: LD_INT 2
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 1
70357: PUSH
70358: LD_INT 4
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: LD_INT 4
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 1
70377: NEG
70378: PUSH
70379: LD_INT 3
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 1
70388: PUSH
70389: LD_INT 5
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: LD_INT 5
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 1
70408: NEG
70409: PUSH
70410: LD_INT 4
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 1
70419: PUSH
70420: LD_INT 6
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 0
70429: PUSH
70430: LD_INT 6
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 1
70439: NEG
70440: PUSH
70441: LD_INT 5
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70462: LD_ADDR_VAR 0 33
70466: PUSH
70467: LD_INT 2
70469: NEG
70470: PUSH
70471: LD_INT 1
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 3
70480: NEG
70481: PUSH
70482: LD_INT 0
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 3
70491: NEG
70492: PUSH
70493: LD_INT 1
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 3
70503: NEG
70504: PUSH
70505: LD_INT 1
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 4
70514: NEG
70515: PUSH
70516: LD_INT 0
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 4
70525: NEG
70526: PUSH
70527: LD_INT 1
70529: NEG
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 4
70537: NEG
70538: PUSH
70539: LD_INT 1
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 5
70548: NEG
70549: PUSH
70550: LD_INT 0
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 5
70559: NEG
70560: PUSH
70561: LD_INT 1
70563: NEG
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 5
70571: NEG
70572: PUSH
70573: LD_INT 1
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 6
70582: NEG
70583: PUSH
70584: LD_INT 0
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 6
70593: NEG
70594: PUSH
70595: LD_INT 1
70597: NEG
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70617: LD_ADDR_VAR 0 34
70621: PUSH
70622: LD_INT 2
70624: NEG
70625: PUSH
70626: LD_INT 3
70628: NEG
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 3
70636: NEG
70637: PUSH
70638: LD_INT 2
70640: NEG
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 3
70648: NEG
70649: PUSH
70650: LD_INT 3
70652: NEG
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 3
70660: NEG
70661: PUSH
70662: LD_INT 4
70664: NEG
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 4
70672: NEG
70673: PUSH
70674: LD_INT 3
70676: NEG
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 4
70684: NEG
70685: PUSH
70686: LD_INT 4
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 4
70696: NEG
70697: PUSH
70698: LD_INT 5
70700: NEG
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 5
70708: NEG
70709: PUSH
70710: LD_INT 4
70712: NEG
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 5
70720: NEG
70721: PUSH
70722: LD_INT 5
70724: NEG
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 5
70732: NEG
70733: PUSH
70734: LD_INT 6
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 6
70744: NEG
70745: PUSH
70746: LD_INT 5
70748: NEG
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 6
70756: NEG
70757: PUSH
70758: LD_INT 6
70760: NEG
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70780: LD_ADDR_VAR 0 41
70784: PUSH
70785: LD_INT 0
70787: PUSH
70788: LD_INT 2
70790: NEG
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 1
70798: NEG
70799: PUSH
70800: LD_INT 3
70802: NEG
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 1
70810: PUSH
70811: LD_INT 2
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: LIST
70823: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70824: LD_ADDR_VAR 0 42
70828: PUSH
70829: LD_INT 2
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 2
70841: PUSH
70842: LD_INT 1
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 3
70852: PUSH
70853: LD_INT 1
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: LIST
70864: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70865: LD_ADDR_VAR 0 43
70869: PUSH
70870: LD_INT 2
70872: PUSH
70873: LD_INT 2
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 3
70882: PUSH
70883: LD_INT 2
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 2
70892: PUSH
70893: LD_INT 3
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: LIST
70904: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70905: LD_ADDR_VAR 0 44
70909: PUSH
70910: LD_INT 0
70912: PUSH
70913: LD_INT 2
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 1
70922: PUSH
70923: LD_INT 3
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 1
70932: NEG
70933: PUSH
70934: LD_INT 2
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: LIST
70945: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70946: LD_ADDR_VAR 0 45
70950: PUSH
70951: LD_INT 2
70953: NEG
70954: PUSH
70955: LD_INT 0
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 2
70964: NEG
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 3
70975: NEG
70976: PUSH
70977: LD_INT 1
70979: NEG
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: LIST
70989: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70990: LD_ADDR_VAR 0 46
70994: PUSH
70995: LD_INT 2
70997: NEG
70998: PUSH
70999: LD_INT 2
71001: NEG
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 2
71009: NEG
71010: PUSH
71011: LD_INT 3
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 3
71021: NEG
71022: PUSH
71023: LD_INT 2
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: LIST
71035: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71036: LD_ADDR_VAR 0 47
71040: PUSH
71041: LD_INT 2
71043: NEG
71044: PUSH
71045: LD_INT 3
71047: NEG
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 1
71055: NEG
71056: PUSH
71057: LD_INT 3
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71069: LD_ADDR_VAR 0 48
71073: PUSH
71074: LD_INT 1
71076: PUSH
71077: LD_INT 2
71079: NEG
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 2
71087: PUSH
71088: LD_INT 1
71090: NEG
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71100: LD_ADDR_VAR 0 49
71104: PUSH
71105: LD_INT 3
71107: PUSH
71108: LD_INT 1
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 3
71117: PUSH
71118: LD_INT 2
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71129: LD_ADDR_VAR 0 50
71133: PUSH
71134: LD_INT 2
71136: PUSH
71137: LD_INT 3
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 1
71146: PUSH
71147: LD_INT 3
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71158: LD_ADDR_VAR 0 51
71162: PUSH
71163: LD_INT 1
71165: NEG
71166: PUSH
71167: LD_INT 2
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 2
71176: NEG
71177: PUSH
71178: LD_INT 1
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71189: LD_ADDR_VAR 0 52
71193: PUSH
71194: LD_INT 3
71196: NEG
71197: PUSH
71198: LD_INT 1
71200: NEG
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 3
71208: NEG
71209: PUSH
71210: LD_INT 2
71212: NEG
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71222: LD_ADDR_VAR 0 53
71226: PUSH
71227: LD_INT 1
71229: NEG
71230: PUSH
71231: LD_INT 3
71233: NEG
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: LD_INT 3
71244: NEG
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 1
71252: PUSH
71253: LD_INT 2
71255: NEG
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: LIST
71265: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71266: LD_ADDR_VAR 0 54
71270: PUSH
71271: LD_INT 2
71273: PUSH
71274: LD_INT 1
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 3
71284: PUSH
71285: LD_INT 0
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 3
71294: PUSH
71295: LD_INT 1
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: LIST
71306: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71307: LD_ADDR_VAR 0 55
71311: PUSH
71312: LD_INT 3
71314: PUSH
71315: LD_INT 2
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 3
71324: PUSH
71325: LD_INT 3
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 2
71334: PUSH
71335: LD_INT 3
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: LIST
71346: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71347: LD_ADDR_VAR 0 56
71351: PUSH
71352: LD_INT 1
71354: PUSH
71355: LD_INT 3
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 0
71364: PUSH
71365: LD_INT 3
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 1
71374: NEG
71375: PUSH
71376: LD_INT 2
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: LIST
71387: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71388: LD_ADDR_VAR 0 57
71392: PUSH
71393: LD_INT 2
71395: NEG
71396: PUSH
71397: LD_INT 1
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 3
71406: NEG
71407: PUSH
71408: LD_INT 0
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 3
71417: NEG
71418: PUSH
71419: LD_INT 1
71421: NEG
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: LIST
71431: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71432: LD_ADDR_VAR 0 58
71436: PUSH
71437: LD_INT 2
71439: NEG
71440: PUSH
71441: LD_INT 3
71443: NEG
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 3
71451: NEG
71452: PUSH
71453: LD_INT 2
71455: NEG
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 3
71463: NEG
71464: PUSH
71465: LD_INT 3
71467: NEG
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: LIST
71477: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71478: LD_ADDR_VAR 0 59
71482: PUSH
71483: LD_INT 1
71485: NEG
71486: PUSH
71487: LD_INT 2
71489: NEG
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 0
71497: PUSH
71498: LD_INT 2
71500: NEG
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 1
71508: PUSH
71509: LD_INT 1
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: LIST
71521: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71522: LD_ADDR_VAR 0 60
71526: PUSH
71527: LD_INT 1
71529: PUSH
71530: LD_INT 1
71532: NEG
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 2
71540: PUSH
71541: LD_INT 0
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 2
71550: PUSH
71551: LD_INT 1
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: LIST
71562: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71563: LD_ADDR_VAR 0 61
71567: PUSH
71568: LD_INT 2
71570: PUSH
71571: LD_INT 1
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: LD_INT 2
71580: PUSH
71581: LD_INT 2
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 1
71590: PUSH
71591: LD_INT 2
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: LIST
71602: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71603: LD_ADDR_VAR 0 62
71607: PUSH
71608: LD_INT 1
71610: PUSH
71611: LD_INT 2
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 0
71620: PUSH
71621: LD_INT 2
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 1
71630: NEG
71631: PUSH
71632: LD_INT 1
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: LIST
71643: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71644: LD_ADDR_VAR 0 63
71648: PUSH
71649: LD_INT 1
71651: NEG
71652: PUSH
71653: LD_INT 1
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 2
71662: NEG
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 2
71673: NEG
71674: PUSH
71675: LD_INT 1
71677: NEG
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: LIST
71687: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71688: LD_ADDR_VAR 0 64
71692: PUSH
71693: LD_INT 1
71695: NEG
71696: PUSH
71697: LD_INT 2
71699: NEG
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 2
71707: NEG
71708: PUSH
71709: LD_INT 1
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 2
71719: NEG
71720: PUSH
71721: LD_INT 2
71723: NEG
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: LIST
71733: ST_TO_ADDR
// end ; 2 :
71734: GO 75000
71736: LD_INT 2
71738: DOUBLE
71739: EQUAL
71740: IFTRUE 71744
71742: GO 74999
71744: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71745: LD_ADDR_VAR 0 29
71749: PUSH
71750: LD_INT 4
71752: PUSH
71753: LD_INT 0
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 4
71762: PUSH
71763: LD_INT 1
71765: NEG
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 5
71773: PUSH
71774: LD_INT 0
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 5
71783: PUSH
71784: LD_INT 1
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 4
71793: PUSH
71794: LD_INT 1
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 3
71803: PUSH
71804: LD_INT 0
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 3
71813: PUSH
71814: LD_INT 1
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 3
71824: PUSH
71825: LD_INT 2
71827: NEG
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: LD_INT 5
71835: PUSH
71836: LD_INT 2
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 3
71845: PUSH
71846: LD_INT 3
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 3
71855: PUSH
71856: LD_INT 2
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 4
71865: PUSH
71866: LD_INT 3
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 4
71875: PUSH
71876: LD_INT 4
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 3
71885: PUSH
71886: LD_INT 4
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 2
71895: PUSH
71896: LD_INT 3
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 2
71905: PUSH
71906: LD_INT 2
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 4
71915: PUSH
71916: LD_INT 2
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_INT 2
71925: PUSH
71926: LD_INT 4
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 0
71935: PUSH
71936: LD_INT 4
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 0
71945: PUSH
71946: LD_INT 3
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 1
71955: PUSH
71956: LD_INT 4
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 1
71965: PUSH
71966: LD_INT 5
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 0
71975: PUSH
71976: LD_INT 5
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 1
71985: NEG
71986: PUSH
71987: LD_INT 4
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 1
71996: NEG
71997: PUSH
71998: LD_INT 3
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 2
72007: PUSH
72008: LD_INT 5
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 2
72017: NEG
72018: PUSH
72019: LD_INT 3
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 3
72028: NEG
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 3
72039: NEG
72040: PUSH
72041: LD_INT 1
72043: NEG
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 2
72051: NEG
72052: PUSH
72053: LD_INT 0
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_INT 2
72062: NEG
72063: PUSH
72064: LD_INT 1
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 3
72073: NEG
72074: PUSH
72075: LD_INT 1
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 4
72084: NEG
72085: PUSH
72086: LD_INT 0
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 4
72095: NEG
72096: PUSH
72097: LD_INT 1
72099: NEG
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 4
72107: NEG
72108: PUSH
72109: LD_INT 2
72111: NEG
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 2
72119: NEG
72120: PUSH
72121: LD_INT 2
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 4
72130: NEG
72131: PUSH
72132: LD_INT 4
72134: NEG
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 4
72142: NEG
72143: PUSH
72144: LD_INT 5
72146: NEG
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 3
72154: NEG
72155: PUSH
72156: LD_INT 4
72158: NEG
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 3
72166: NEG
72167: PUSH
72168: LD_INT 3
72170: NEG
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 4
72178: NEG
72179: PUSH
72180: LD_INT 3
72182: NEG
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 5
72190: NEG
72191: PUSH
72192: LD_INT 4
72194: NEG
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 5
72202: NEG
72203: PUSH
72204: LD_INT 5
72206: NEG
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 3
72214: NEG
72215: PUSH
72216: LD_INT 5
72218: NEG
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 5
72226: NEG
72227: PUSH
72228: LD_INT 3
72230: NEG
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72283: LD_ADDR_VAR 0 30
72287: PUSH
72288: LD_INT 4
72290: PUSH
72291: LD_INT 4
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 4
72300: PUSH
72301: LD_INT 3
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 5
72310: PUSH
72311: LD_INT 4
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: LD_INT 5
72320: PUSH
72321: LD_INT 5
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 4
72330: PUSH
72331: LD_INT 5
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 3
72340: PUSH
72341: LD_INT 4
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 3
72350: PUSH
72351: LD_INT 3
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 5
72360: PUSH
72361: LD_INT 3
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 3
72370: PUSH
72371: LD_INT 5
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 0
72380: PUSH
72381: LD_INT 3
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 0
72390: PUSH
72391: LD_INT 2
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: LD_INT 3
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 1
72410: PUSH
72411: LD_INT 4
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 0
72420: PUSH
72421: LD_INT 4
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PUSH
72428: LD_INT 1
72430: NEG
72431: PUSH
72432: LD_INT 3
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 1
72441: NEG
72442: PUSH
72443: LD_INT 2
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 2
72452: PUSH
72453: LD_INT 4
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 2
72462: NEG
72463: PUSH
72464: LD_INT 2
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 4
72473: NEG
72474: PUSH
72475: LD_INT 0
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 4
72484: NEG
72485: PUSH
72486: LD_INT 1
72488: NEG
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 3
72496: NEG
72497: PUSH
72498: LD_INT 0
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: LD_INT 3
72507: NEG
72508: PUSH
72509: LD_INT 1
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 4
72518: NEG
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 5
72529: NEG
72530: PUSH
72531: LD_INT 0
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 5
72540: NEG
72541: PUSH
72542: LD_INT 1
72544: NEG
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 5
72552: NEG
72553: PUSH
72554: LD_INT 2
72556: NEG
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 3
72564: NEG
72565: PUSH
72566: LD_INT 2
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 3
72575: NEG
72576: PUSH
72577: LD_INT 3
72579: NEG
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 3
72587: NEG
72588: PUSH
72589: LD_INT 4
72591: NEG
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 2
72599: NEG
72600: PUSH
72601: LD_INT 3
72603: NEG
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 2
72611: NEG
72612: PUSH
72613: LD_INT 2
72615: NEG
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 3
72623: NEG
72624: PUSH
72625: LD_INT 2
72627: NEG
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 4
72635: NEG
72636: PUSH
72637: LD_INT 3
72639: NEG
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 4
72647: NEG
72648: PUSH
72649: LD_INT 4
72651: NEG
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 2
72659: NEG
72660: PUSH
72661: LD_INT 4
72663: NEG
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 4
72671: NEG
72672: PUSH
72673: LD_INT 2
72675: NEG
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 0
72683: PUSH
72684: LD_INT 4
72686: NEG
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: PUSH
72692: LD_INT 0
72694: PUSH
72695: LD_INT 5
72697: NEG
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 1
72705: PUSH
72706: LD_INT 4
72708: NEG
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 1
72716: PUSH
72717: LD_INT 3
72719: NEG
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 0
72727: PUSH
72728: LD_INT 3
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 1
72738: NEG
72739: PUSH
72740: LD_INT 4
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 1
72750: NEG
72751: PUSH
72752: LD_INT 5
72754: NEG
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 2
72762: PUSH
72763: LD_INT 3
72765: NEG
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 2
72773: NEG
72774: PUSH
72775: LD_INT 5
72777: NEG
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72830: LD_ADDR_VAR 0 31
72834: PUSH
72835: LD_INT 0
72837: PUSH
72838: LD_INT 4
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 0
72847: PUSH
72848: LD_INT 3
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 1
72857: PUSH
72858: LD_INT 4
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 1
72867: PUSH
72868: LD_INT 5
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 0
72877: PUSH
72878: LD_INT 5
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 1
72887: NEG
72888: PUSH
72889: LD_INT 4
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: LD_INT 1
72898: NEG
72899: PUSH
72900: LD_INT 3
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 2
72909: PUSH
72910: LD_INT 5
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 2
72919: NEG
72920: PUSH
72921: LD_INT 3
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 3
72930: NEG
72931: PUSH
72932: LD_INT 0
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 3
72941: NEG
72942: PUSH
72943: LD_INT 1
72945: NEG
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 2
72953: NEG
72954: PUSH
72955: LD_INT 0
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: PUSH
72962: LD_INT 2
72964: NEG
72965: PUSH
72966: LD_INT 1
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 3
72975: NEG
72976: PUSH
72977: LD_INT 1
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 4
72986: NEG
72987: PUSH
72988: LD_INT 0
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 4
72997: NEG
72998: PUSH
72999: LD_INT 1
73001: NEG
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 4
73009: NEG
73010: PUSH
73011: LD_INT 2
73013: NEG
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 2
73021: NEG
73022: PUSH
73023: LD_INT 2
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 4
73032: NEG
73033: PUSH
73034: LD_INT 4
73036: NEG
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PUSH
73042: LD_INT 4
73044: NEG
73045: PUSH
73046: LD_INT 5
73048: NEG
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 3
73056: NEG
73057: PUSH
73058: LD_INT 4
73060: NEG
73061: PUSH
73062: EMPTY
73063: LIST
73064: LIST
73065: PUSH
73066: LD_INT 3
73068: NEG
73069: PUSH
73070: LD_INT 3
73072: NEG
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 4
73080: NEG
73081: PUSH
73082: LD_INT 3
73084: NEG
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 5
73092: NEG
73093: PUSH
73094: LD_INT 4
73096: NEG
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 5
73104: NEG
73105: PUSH
73106: LD_INT 5
73108: NEG
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 3
73116: NEG
73117: PUSH
73118: LD_INT 5
73120: NEG
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: PUSH
73126: LD_INT 5
73128: NEG
73129: PUSH
73130: LD_INT 3
73132: NEG
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 0
73140: PUSH
73141: LD_INT 3
73143: NEG
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: PUSH
73149: LD_INT 0
73151: PUSH
73152: LD_INT 4
73154: NEG
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: LD_INT 1
73162: PUSH
73163: LD_INT 3
73165: NEG
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 1
73173: PUSH
73174: LD_INT 2
73176: NEG
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 0
73184: PUSH
73185: LD_INT 2
73187: NEG
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 1
73195: NEG
73196: PUSH
73197: LD_INT 3
73199: NEG
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: PUSH
73205: LD_INT 1
73207: NEG
73208: PUSH
73209: LD_INT 4
73211: NEG
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 2
73219: PUSH
73220: LD_INT 2
73222: NEG
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 2
73230: NEG
73231: PUSH
73232: LD_INT 4
73234: NEG
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PUSH
73240: LD_INT 4
73242: PUSH
73243: LD_INT 0
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_INT 4
73252: PUSH
73253: LD_INT 1
73255: NEG
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: LD_INT 5
73263: PUSH
73264: LD_INT 0
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 5
73273: PUSH
73274: LD_INT 1
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 4
73283: PUSH
73284: LD_INT 1
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 3
73293: PUSH
73294: LD_INT 0
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 3
73303: PUSH
73304: LD_INT 1
73306: NEG
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: PUSH
73312: LD_INT 3
73314: PUSH
73315: LD_INT 2
73317: NEG
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 5
73325: PUSH
73326: LD_INT 2
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73380: LD_ADDR_VAR 0 32
73384: PUSH
73385: LD_INT 4
73387: NEG
73388: PUSH
73389: LD_INT 0
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 4
73398: NEG
73399: PUSH
73400: LD_INT 1
73402: NEG
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: PUSH
73408: LD_INT 3
73410: NEG
73411: PUSH
73412: LD_INT 0
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: LD_INT 3
73421: NEG
73422: PUSH
73423: LD_INT 1
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_INT 4
73432: NEG
73433: PUSH
73434: LD_INT 1
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 5
73443: NEG
73444: PUSH
73445: LD_INT 0
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 5
73454: NEG
73455: PUSH
73456: LD_INT 1
73458: NEG
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 5
73466: NEG
73467: PUSH
73468: LD_INT 2
73470: NEG
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 3
73478: NEG
73479: PUSH
73480: LD_INT 2
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PUSH
73487: LD_INT 3
73489: NEG
73490: PUSH
73491: LD_INT 3
73493: NEG
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: PUSH
73499: LD_INT 3
73501: NEG
73502: PUSH
73503: LD_INT 4
73505: NEG
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 2
73513: NEG
73514: PUSH
73515: LD_INT 3
73517: NEG
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 2
73525: NEG
73526: PUSH
73527: LD_INT 2
73529: NEG
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 3
73537: NEG
73538: PUSH
73539: LD_INT 2
73541: NEG
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 4
73549: NEG
73550: PUSH
73551: LD_INT 3
73553: NEG
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: PUSH
73559: LD_INT 4
73561: NEG
73562: PUSH
73563: LD_INT 4
73565: NEG
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PUSH
73571: LD_INT 2
73573: NEG
73574: PUSH
73575: LD_INT 4
73577: NEG
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 4
73585: NEG
73586: PUSH
73587: LD_INT 2
73589: NEG
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 0
73597: PUSH
73598: LD_INT 4
73600: NEG
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: PUSH
73606: LD_INT 0
73608: PUSH
73609: LD_INT 5
73611: NEG
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: LD_INT 1
73619: PUSH
73620: LD_INT 4
73622: NEG
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 1
73630: PUSH
73631: LD_INT 3
73633: NEG
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PUSH
73639: LD_INT 0
73641: PUSH
73642: LD_INT 3
73644: NEG
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 1
73652: NEG
73653: PUSH
73654: LD_INT 4
73656: NEG
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 1
73664: NEG
73665: PUSH
73666: LD_INT 5
73668: NEG
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 2
73676: PUSH
73677: LD_INT 3
73679: NEG
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 2
73687: NEG
73688: PUSH
73689: LD_INT 5
73691: NEG
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 3
73699: PUSH
73700: LD_INT 0
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 3
73709: PUSH
73710: LD_INT 1
73712: NEG
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 4
73720: PUSH
73721: LD_INT 0
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: LD_INT 4
73730: PUSH
73731: LD_INT 1
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 3
73740: PUSH
73741: LD_INT 1
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: LD_INT 2
73750: PUSH
73751: LD_INT 0
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: LD_INT 2
73760: PUSH
73761: LD_INT 1
73763: NEG
73764: PUSH
73765: EMPTY
73766: LIST
73767: LIST
73768: PUSH
73769: LD_INT 2
73771: PUSH
73772: LD_INT 2
73774: NEG
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PUSH
73780: LD_INT 4
73782: PUSH
73783: LD_INT 2
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: PUSH
73790: LD_INT 4
73792: PUSH
73793: LD_INT 4
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: PUSH
73800: LD_INT 4
73802: PUSH
73803: LD_INT 3
73805: PUSH
73806: EMPTY
73807: LIST
73808: LIST
73809: PUSH
73810: LD_INT 5
73812: PUSH
73813: LD_INT 4
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: LD_INT 5
73822: PUSH
73823: LD_INT 5
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: PUSH
73830: LD_INT 4
73832: PUSH
73833: LD_INT 5
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: PUSH
73840: LD_INT 3
73842: PUSH
73843: LD_INT 4
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: PUSH
73850: LD_INT 3
73852: PUSH
73853: LD_INT 3
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 5
73862: PUSH
73863: LD_INT 3
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: PUSH
73870: LD_INT 3
73872: PUSH
73873: LD_INT 5
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73927: LD_ADDR_VAR 0 33
73931: PUSH
73932: LD_INT 4
73934: NEG
73935: PUSH
73936: LD_INT 4
73938: NEG
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 4
73946: NEG
73947: PUSH
73948: LD_INT 5
73950: NEG
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 3
73958: NEG
73959: PUSH
73960: LD_INT 4
73962: NEG
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 3
73970: NEG
73971: PUSH
73972: LD_INT 3
73974: NEG
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: PUSH
73980: LD_INT 4
73982: NEG
73983: PUSH
73984: LD_INT 3
73986: NEG
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 5
73994: NEG
73995: PUSH
73996: LD_INT 4
73998: NEG
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PUSH
74004: LD_INT 5
74006: NEG
74007: PUSH
74008: LD_INT 5
74010: NEG
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: PUSH
74016: LD_INT 3
74018: NEG
74019: PUSH
74020: LD_INT 5
74022: NEG
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: LD_INT 5
74030: NEG
74031: PUSH
74032: LD_INT 3
74034: NEG
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 0
74042: PUSH
74043: LD_INT 3
74045: NEG
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: PUSH
74051: LD_INT 0
74053: PUSH
74054: LD_INT 4
74056: NEG
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 1
74064: PUSH
74065: LD_INT 3
74067: NEG
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 1
74075: PUSH
74076: LD_INT 2
74078: NEG
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 0
74086: PUSH
74087: LD_INT 2
74089: NEG
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 1
74097: NEG
74098: PUSH
74099: LD_INT 3
74101: NEG
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 1
74109: NEG
74110: PUSH
74111: LD_INT 4
74113: NEG
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PUSH
74119: LD_INT 2
74121: PUSH
74122: LD_INT 2
74124: NEG
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: PUSH
74130: LD_INT 2
74132: NEG
74133: PUSH
74134: LD_INT 4
74136: NEG
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: PUSH
74142: LD_INT 4
74144: PUSH
74145: LD_INT 0
74147: PUSH
74148: EMPTY
74149: LIST
74150: LIST
74151: PUSH
74152: LD_INT 4
74154: PUSH
74155: LD_INT 1
74157: NEG
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: LD_INT 5
74165: PUSH
74166: LD_INT 0
74168: PUSH
74169: EMPTY
74170: LIST
74171: LIST
74172: PUSH
74173: LD_INT 5
74175: PUSH
74176: LD_INT 1
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: PUSH
74183: LD_INT 4
74185: PUSH
74186: LD_INT 1
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: PUSH
74193: LD_INT 3
74195: PUSH
74196: LD_INT 0
74198: PUSH
74199: EMPTY
74200: LIST
74201: LIST
74202: PUSH
74203: LD_INT 3
74205: PUSH
74206: LD_INT 1
74208: NEG
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: LD_INT 3
74216: PUSH
74217: LD_INT 2
74219: NEG
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 5
74227: PUSH
74228: LD_INT 2
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PUSH
74235: LD_INT 3
74237: PUSH
74238: LD_INT 3
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: LD_INT 3
74247: PUSH
74248: LD_INT 2
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PUSH
74255: LD_INT 4
74257: PUSH
74258: LD_INT 3
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: LD_INT 4
74267: PUSH
74268: LD_INT 4
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: PUSH
74275: LD_INT 3
74277: PUSH
74278: LD_INT 4
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: LD_INT 2
74287: PUSH
74288: LD_INT 3
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: LD_INT 2
74297: PUSH
74298: LD_INT 2
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PUSH
74305: LD_INT 4
74307: PUSH
74308: LD_INT 2
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: LD_INT 2
74317: PUSH
74318: LD_INT 4
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 0
74327: PUSH
74328: LD_INT 4
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: LD_INT 0
74337: PUSH
74338: LD_INT 3
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PUSH
74345: LD_INT 1
74347: PUSH
74348: LD_INT 4
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: LD_INT 1
74357: PUSH
74358: LD_INT 5
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: PUSH
74365: LD_INT 0
74367: PUSH
74368: LD_INT 5
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 1
74377: NEG
74378: PUSH
74379: LD_INT 4
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: PUSH
74386: LD_INT 1
74388: NEG
74389: PUSH
74390: LD_INT 3
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PUSH
74397: LD_INT 2
74399: PUSH
74400: LD_INT 5
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PUSH
74407: LD_INT 2
74409: NEG
74410: PUSH
74411: LD_INT 3
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74465: LD_ADDR_VAR 0 34
74469: PUSH
74470: LD_INT 0
74472: PUSH
74473: LD_INT 4
74475: NEG
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: LD_INT 0
74483: PUSH
74484: LD_INT 5
74486: NEG
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 1
74494: PUSH
74495: LD_INT 4
74497: NEG
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: LD_INT 1
74505: PUSH
74506: LD_INT 3
74508: NEG
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: LD_INT 0
74516: PUSH
74517: LD_INT 3
74519: NEG
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 1
74527: NEG
74528: PUSH
74529: LD_INT 4
74531: NEG
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 1
74539: NEG
74540: PUSH
74541: LD_INT 5
74543: NEG
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 2
74551: PUSH
74552: LD_INT 3
74554: NEG
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: PUSH
74560: LD_INT 2
74562: NEG
74563: PUSH
74564: LD_INT 5
74566: NEG
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: PUSH
74572: LD_INT 3
74574: PUSH
74575: LD_INT 0
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: PUSH
74582: LD_INT 3
74584: PUSH
74585: LD_INT 1
74587: NEG
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: PUSH
74593: LD_INT 4
74595: PUSH
74596: LD_INT 0
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: PUSH
74603: LD_INT 4
74605: PUSH
74606: LD_INT 1
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: LD_INT 3
74615: PUSH
74616: LD_INT 1
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PUSH
74623: LD_INT 2
74625: PUSH
74626: LD_INT 0
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: PUSH
74633: LD_INT 2
74635: PUSH
74636: LD_INT 1
74638: NEG
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: PUSH
74644: LD_INT 2
74646: PUSH
74647: LD_INT 2
74649: NEG
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PUSH
74655: LD_INT 4
74657: PUSH
74658: LD_INT 2
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: PUSH
74665: LD_INT 4
74667: PUSH
74668: LD_INT 4
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: PUSH
74675: LD_INT 4
74677: PUSH
74678: LD_INT 3
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: PUSH
74685: LD_INT 5
74687: PUSH
74688: LD_INT 4
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PUSH
74695: LD_INT 5
74697: PUSH
74698: LD_INT 5
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: LD_INT 4
74707: PUSH
74708: LD_INT 5
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 3
74717: PUSH
74718: LD_INT 4
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: LD_INT 3
74727: PUSH
74728: LD_INT 3
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: PUSH
74735: LD_INT 5
74737: PUSH
74738: LD_INT 3
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: PUSH
74745: LD_INT 3
74747: PUSH
74748: LD_INT 5
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: PUSH
74755: LD_INT 0
74757: PUSH
74758: LD_INT 3
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: PUSH
74765: LD_INT 0
74767: PUSH
74768: LD_INT 2
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: PUSH
74775: LD_INT 1
74777: PUSH
74778: LD_INT 3
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: PUSH
74785: LD_INT 1
74787: PUSH
74788: LD_INT 4
74790: PUSH
74791: EMPTY
74792: LIST
74793: LIST
74794: PUSH
74795: LD_INT 0
74797: PUSH
74798: LD_INT 4
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 1
74807: NEG
74808: PUSH
74809: LD_INT 3
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: LD_INT 1
74818: NEG
74819: PUSH
74820: LD_INT 2
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PUSH
74827: LD_INT 2
74829: PUSH
74830: LD_INT 4
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: PUSH
74837: LD_INT 2
74839: NEG
74840: PUSH
74841: LD_INT 2
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 4
74850: NEG
74851: PUSH
74852: LD_INT 0
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PUSH
74859: LD_INT 4
74861: NEG
74862: PUSH
74863: LD_INT 1
74865: NEG
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 3
74873: NEG
74874: PUSH
74875: LD_INT 0
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: PUSH
74882: LD_INT 3
74884: NEG
74885: PUSH
74886: LD_INT 1
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 4
74895: NEG
74896: PUSH
74897: LD_INT 1
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: PUSH
74904: LD_INT 5
74906: NEG
74907: PUSH
74908: LD_INT 0
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_INT 5
74917: NEG
74918: PUSH
74919: LD_INT 1
74921: NEG
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 5
74929: NEG
74930: PUSH
74931: LD_INT 2
74933: NEG
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: PUSH
74939: LD_INT 3
74941: NEG
74942: PUSH
74943: LD_INT 2
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: ST_TO_ADDR
// end ; end ;
74997: GO 75000
74999: POP
// case btype of b_depot , b_warehouse :
75000: LD_VAR 0 1
75004: PUSH
75005: LD_INT 0
75007: DOUBLE
75008: EQUAL
75009: IFTRUE 75019
75011: LD_INT 1
75013: DOUBLE
75014: EQUAL
75015: IFTRUE 75019
75017: GO 75220
75019: POP
// case nation of nation_american :
75020: LD_VAR 0 5
75024: PUSH
75025: LD_INT 1
75027: DOUBLE
75028: EQUAL
75029: IFTRUE 75033
75031: GO 75089
75033: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75034: LD_ADDR_VAR 0 9
75038: PUSH
75039: LD_VAR 0 11
75043: PUSH
75044: LD_VAR 0 12
75048: PUSH
75049: LD_VAR 0 13
75053: PUSH
75054: LD_VAR 0 14
75058: PUSH
75059: LD_VAR 0 15
75063: PUSH
75064: LD_VAR 0 16
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: PUSH
75077: LD_VAR 0 4
75081: PUSH
75082: LD_INT 1
75084: PLUS
75085: ARRAY
75086: ST_TO_ADDR
75087: GO 75218
75089: LD_INT 2
75091: DOUBLE
75092: EQUAL
75093: IFTRUE 75097
75095: GO 75153
75097: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75098: LD_ADDR_VAR 0 9
75102: PUSH
75103: LD_VAR 0 17
75107: PUSH
75108: LD_VAR 0 18
75112: PUSH
75113: LD_VAR 0 19
75117: PUSH
75118: LD_VAR 0 20
75122: PUSH
75123: LD_VAR 0 21
75127: PUSH
75128: LD_VAR 0 22
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: PUSH
75141: LD_VAR 0 4
75145: PUSH
75146: LD_INT 1
75148: PLUS
75149: ARRAY
75150: ST_TO_ADDR
75151: GO 75218
75153: LD_INT 3
75155: DOUBLE
75156: EQUAL
75157: IFTRUE 75161
75159: GO 75217
75161: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75162: LD_ADDR_VAR 0 9
75166: PUSH
75167: LD_VAR 0 23
75171: PUSH
75172: LD_VAR 0 24
75176: PUSH
75177: LD_VAR 0 25
75181: PUSH
75182: LD_VAR 0 26
75186: PUSH
75187: LD_VAR 0 27
75191: PUSH
75192: LD_VAR 0 28
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: PUSH
75205: LD_VAR 0 4
75209: PUSH
75210: LD_INT 1
75212: PLUS
75213: ARRAY
75214: ST_TO_ADDR
75215: GO 75218
75217: POP
75218: GO 75773
75220: LD_INT 2
75222: DOUBLE
75223: EQUAL
75224: IFTRUE 75234
75226: LD_INT 3
75228: DOUBLE
75229: EQUAL
75230: IFTRUE 75234
75232: GO 75290
75234: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75235: LD_ADDR_VAR 0 9
75239: PUSH
75240: LD_VAR 0 29
75244: PUSH
75245: LD_VAR 0 30
75249: PUSH
75250: LD_VAR 0 31
75254: PUSH
75255: LD_VAR 0 32
75259: PUSH
75260: LD_VAR 0 33
75264: PUSH
75265: LD_VAR 0 34
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: LIST
75274: LIST
75275: LIST
75276: LIST
75277: PUSH
75278: LD_VAR 0 4
75282: PUSH
75283: LD_INT 1
75285: PLUS
75286: ARRAY
75287: ST_TO_ADDR
75288: GO 75773
75290: LD_INT 16
75292: DOUBLE
75293: EQUAL
75294: IFTRUE 75352
75296: LD_INT 17
75298: DOUBLE
75299: EQUAL
75300: IFTRUE 75352
75302: LD_INT 18
75304: DOUBLE
75305: EQUAL
75306: IFTRUE 75352
75308: LD_INT 19
75310: DOUBLE
75311: EQUAL
75312: IFTRUE 75352
75314: LD_INT 22
75316: DOUBLE
75317: EQUAL
75318: IFTRUE 75352
75320: LD_INT 20
75322: DOUBLE
75323: EQUAL
75324: IFTRUE 75352
75326: LD_INT 21
75328: DOUBLE
75329: EQUAL
75330: IFTRUE 75352
75332: LD_INT 23
75334: DOUBLE
75335: EQUAL
75336: IFTRUE 75352
75338: LD_INT 24
75340: DOUBLE
75341: EQUAL
75342: IFTRUE 75352
75344: LD_INT 25
75346: DOUBLE
75347: EQUAL
75348: IFTRUE 75352
75350: GO 75408
75352: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75353: LD_ADDR_VAR 0 9
75357: PUSH
75358: LD_VAR 0 35
75362: PUSH
75363: LD_VAR 0 36
75367: PUSH
75368: LD_VAR 0 37
75372: PUSH
75373: LD_VAR 0 38
75377: PUSH
75378: LD_VAR 0 39
75382: PUSH
75383: LD_VAR 0 40
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: PUSH
75396: LD_VAR 0 4
75400: PUSH
75401: LD_INT 1
75403: PLUS
75404: ARRAY
75405: ST_TO_ADDR
75406: GO 75773
75408: LD_INT 6
75410: DOUBLE
75411: EQUAL
75412: IFTRUE 75464
75414: LD_INT 7
75416: DOUBLE
75417: EQUAL
75418: IFTRUE 75464
75420: LD_INT 8
75422: DOUBLE
75423: EQUAL
75424: IFTRUE 75464
75426: LD_INT 13
75428: DOUBLE
75429: EQUAL
75430: IFTRUE 75464
75432: LD_INT 12
75434: DOUBLE
75435: EQUAL
75436: IFTRUE 75464
75438: LD_INT 15
75440: DOUBLE
75441: EQUAL
75442: IFTRUE 75464
75444: LD_INT 11
75446: DOUBLE
75447: EQUAL
75448: IFTRUE 75464
75450: LD_INT 14
75452: DOUBLE
75453: EQUAL
75454: IFTRUE 75464
75456: LD_INT 10
75458: DOUBLE
75459: EQUAL
75460: IFTRUE 75464
75462: GO 75520
75464: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75465: LD_ADDR_VAR 0 9
75469: PUSH
75470: LD_VAR 0 41
75474: PUSH
75475: LD_VAR 0 42
75479: PUSH
75480: LD_VAR 0 43
75484: PUSH
75485: LD_VAR 0 44
75489: PUSH
75490: LD_VAR 0 45
75494: PUSH
75495: LD_VAR 0 46
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: PUSH
75508: LD_VAR 0 4
75512: PUSH
75513: LD_INT 1
75515: PLUS
75516: ARRAY
75517: ST_TO_ADDR
75518: GO 75773
75520: LD_INT 36
75522: DOUBLE
75523: EQUAL
75524: IFTRUE 75528
75526: GO 75584
75528: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75529: LD_ADDR_VAR 0 9
75533: PUSH
75534: LD_VAR 0 47
75538: PUSH
75539: LD_VAR 0 48
75543: PUSH
75544: LD_VAR 0 49
75548: PUSH
75549: LD_VAR 0 50
75553: PUSH
75554: LD_VAR 0 51
75558: PUSH
75559: LD_VAR 0 52
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: PUSH
75572: LD_VAR 0 4
75576: PUSH
75577: LD_INT 1
75579: PLUS
75580: ARRAY
75581: ST_TO_ADDR
75582: GO 75773
75584: LD_INT 4
75586: DOUBLE
75587: EQUAL
75588: IFTRUE 75610
75590: LD_INT 5
75592: DOUBLE
75593: EQUAL
75594: IFTRUE 75610
75596: LD_INT 34
75598: DOUBLE
75599: EQUAL
75600: IFTRUE 75610
75602: LD_INT 37
75604: DOUBLE
75605: EQUAL
75606: IFTRUE 75610
75608: GO 75666
75610: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75611: LD_ADDR_VAR 0 9
75615: PUSH
75616: LD_VAR 0 53
75620: PUSH
75621: LD_VAR 0 54
75625: PUSH
75626: LD_VAR 0 55
75630: PUSH
75631: LD_VAR 0 56
75635: PUSH
75636: LD_VAR 0 57
75640: PUSH
75641: LD_VAR 0 58
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: PUSH
75654: LD_VAR 0 4
75658: PUSH
75659: LD_INT 1
75661: PLUS
75662: ARRAY
75663: ST_TO_ADDR
75664: GO 75773
75666: LD_INT 31
75668: DOUBLE
75669: EQUAL
75670: IFTRUE 75716
75672: LD_INT 32
75674: DOUBLE
75675: EQUAL
75676: IFTRUE 75716
75678: LD_INT 33
75680: DOUBLE
75681: EQUAL
75682: IFTRUE 75716
75684: LD_INT 27
75686: DOUBLE
75687: EQUAL
75688: IFTRUE 75716
75690: LD_INT 26
75692: DOUBLE
75693: EQUAL
75694: IFTRUE 75716
75696: LD_INT 28
75698: DOUBLE
75699: EQUAL
75700: IFTRUE 75716
75702: LD_INT 29
75704: DOUBLE
75705: EQUAL
75706: IFTRUE 75716
75708: LD_INT 30
75710: DOUBLE
75711: EQUAL
75712: IFTRUE 75716
75714: GO 75772
75716: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75717: LD_ADDR_VAR 0 9
75721: PUSH
75722: LD_VAR 0 59
75726: PUSH
75727: LD_VAR 0 60
75731: PUSH
75732: LD_VAR 0 61
75736: PUSH
75737: LD_VAR 0 62
75741: PUSH
75742: LD_VAR 0 63
75746: PUSH
75747: LD_VAR 0 64
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: LIST
75759: PUSH
75760: LD_VAR 0 4
75764: PUSH
75765: LD_INT 1
75767: PLUS
75768: ARRAY
75769: ST_TO_ADDR
75770: GO 75773
75772: POP
// temp_list2 = [ ] ;
75773: LD_ADDR_VAR 0 10
75777: PUSH
75778: EMPTY
75779: ST_TO_ADDR
// for i in temp_list do
75780: LD_ADDR_VAR 0 8
75784: PUSH
75785: LD_VAR 0 9
75789: PUSH
75790: FOR_IN
75791: IFFALSE 75843
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75793: LD_ADDR_VAR 0 10
75797: PUSH
75798: LD_VAR 0 10
75802: PUSH
75803: LD_VAR 0 8
75807: PUSH
75808: LD_INT 1
75810: ARRAY
75811: PUSH
75812: LD_VAR 0 2
75816: PLUS
75817: PUSH
75818: LD_VAR 0 8
75822: PUSH
75823: LD_INT 2
75825: ARRAY
75826: PUSH
75827: LD_VAR 0 3
75831: PLUS
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: PUSH
75837: EMPTY
75838: LIST
75839: ADD
75840: ST_TO_ADDR
75841: GO 75790
75843: POP
75844: POP
// result = temp_list2 ;
75845: LD_ADDR_VAR 0 7
75849: PUSH
75850: LD_VAR 0 10
75854: ST_TO_ADDR
// end ;
75855: LD_VAR 0 7
75859: RET
// export function EnemyInRange ( unit , dist ) ; begin
75860: LD_INT 0
75862: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75863: LD_ADDR_VAR 0 3
75867: PUSH
75868: LD_VAR 0 1
75872: PPUSH
75873: CALL_OW 255
75877: PPUSH
75878: LD_VAR 0 1
75882: PPUSH
75883: CALL_OW 250
75887: PPUSH
75888: LD_VAR 0 1
75892: PPUSH
75893: CALL_OW 251
75897: PPUSH
75898: LD_VAR 0 2
75902: PPUSH
75903: CALL 49964 0 4
75907: PUSH
75908: LD_INT 4
75910: ARRAY
75911: ST_TO_ADDR
// end ;
75912: LD_VAR 0 3
75916: RET
// export function PlayerSeeMe ( unit ) ; begin
75917: LD_INT 0
75919: PPUSH
// result := See ( your_side , unit ) ;
75920: LD_ADDR_VAR 0 2
75924: PUSH
75925: LD_OWVAR 2
75929: PPUSH
75930: LD_VAR 0 1
75934: PPUSH
75935: CALL_OW 292
75939: ST_TO_ADDR
// end ;
75940: LD_VAR 0 2
75944: RET
// export function ReverseDir ( unit ) ; begin
75945: LD_INT 0
75947: PPUSH
// if not unit then
75948: LD_VAR 0 1
75952: NOT
75953: IFFALSE 75957
// exit ;
75955: GO 75980
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75957: LD_ADDR_VAR 0 2
75961: PUSH
75962: LD_VAR 0 1
75966: PPUSH
75967: CALL_OW 254
75971: PUSH
75972: LD_INT 3
75974: PLUS
75975: PUSH
75976: LD_INT 6
75978: MOD
75979: ST_TO_ADDR
// end ;
75980: LD_VAR 0 2
75984: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
75985: LD_INT 0
75987: PPUSH
75988: PPUSH
75989: PPUSH
75990: PPUSH
75991: PPUSH
// if not hexes then
75992: LD_VAR 0 2
75996: NOT
75997: IFFALSE 76001
// exit ;
75999: GO 76149
// dist := 9999 ;
76001: LD_ADDR_VAR 0 5
76005: PUSH
76006: LD_INT 9999
76008: ST_TO_ADDR
// for i = 1 to hexes do
76009: LD_ADDR_VAR 0 4
76013: PUSH
76014: DOUBLE
76015: LD_INT 1
76017: DEC
76018: ST_TO_ADDR
76019: LD_VAR 0 2
76023: PUSH
76024: FOR_TO
76025: IFFALSE 76137
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
76027: LD_VAR 0 1
76031: PPUSH
76032: LD_VAR 0 2
76036: PUSH
76037: LD_VAR 0 4
76041: ARRAY
76042: PUSH
76043: LD_INT 1
76045: ARRAY
76046: PPUSH
76047: LD_VAR 0 2
76051: PUSH
76052: LD_VAR 0 4
76056: ARRAY
76057: PUSH
76058: LD_INT 2
76060: ARRAY
76061: PPUSH
76062: CALL_OW 297
76066: PUSH
76067: LD_VAR 0 5
76071: LESS
76072: IFFALSE 76135
// begin hex := hexes [ i ] ;
76074: LD_ADDR_VAR 0 7
76078: PUSH
76079: LD_VAR 0 2
76083: PUSH
76084: LD_VAR 0 4
76088: ARRAY
76089: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76090: LD_ADDR_VAR 0 5
76094: PUSH
76095: LD_VAR 0 1
76099: PPUSH
76100: LD_VAR 0 2
76104: PUSH
76105: LD_VAR 0 4
76109: ARRAY
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PPUSH
76115: LD_VAR 0 2
76119: PUSH
76120: LD_VAR 0 4
76124: ARRAY
76125: PUSH
76126: LD_INT 2
76128: ARRAY
76129: PPUSH
76130: CALL_OW 297
76134: ST_TO_ADDR
// end ; end ;
76135: GO 76024
76137: POP
76138: POP
// result := hex ;
76139: LD_ADDR_VAR 0 3
76143: PUSH
76144: LD_VAR 0 7
76148: ST_TO_ADDR
// end ;
76149: LD_VAR 0 3
76153: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76154: LD_INT 0
76156: PPUSH
76157: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76158: LD_VAR 0 1
76162: NOT
76163: PUSH
76164: LD_VAR 0 1
76168: PUSH
76169: LD_INT 21
76171: PUSH
76172: LD_INT 2
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: PUSH
76179: LD_INT 23
76181: PUSH
76182: LD_INT 2
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PPUSH
76193: CALL_OW 69
76197: IN
76198: NOT
76199: OR
76200: IFFALSE 76204
// exit ;
76202: GO 76251
// for i = 1 to 3 do
76204: LD_ADDR_VAR 0 3
76208: PUSH
76209: DOUBLE
76210: LD_INT 1
76212: DEC
76213: ST_TO_ADDR
76214: LD_INT 3
76216: PUSH
76217: FOR_TO
76218: IFFALSE 76249
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76220: LD_VAR 0 1
76224: PPUSH
76225: CALL_OW 250
76229: PPUSH
76230: LD_VAR 0 1
76234: PPUSH
76235: CALL_OW 251
76239: PPUSH
76240: LD_INT 1
76242: PPUSH
76243: CALL_OW 453
76247: GO 76217
76249: POP
76250: POP
// end ;
76251: LD_VAR 0 2
76255: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76256: LD_INT 0
76258: PPUSH
76259: PPUSH
76260: PPUSH
76261: PPUSH
76262: PPUSH
76263: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
76264: LD_VAR 0 1
76268: NOT
76269: PUSH
76270: LD_VAR 0 2
76274: NOT
76275: OR
76276: PUSH
76277: LD_VAR 0 1
76281: PPUSH
76282: CALL_OW 314
76286: OR
76287: IFFALSE 76291
// exit ;
76289: GO 76732
// x := GetX ( enemy_unit ) ;
76291: LD_ADDR_VAR 0 7
76295: PUSH
76296: LD_VAR 0 2
76300: PPUSH
76301: CALL_OW 250
76305: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76306: LD_ADDR_VAR 0 8
76310: PUSH
76311: LD_VAR 0 2
76315: PPUSH
76316: CALL_OW 251
76320: ST_TO_ADDR
// if not x or not y then
76321: LD_VAR 0 7
76325: NOT
76326: PUSH
76327: LD_VAR 0 8
76331: NOT
76332: OR
76333: IFFALSE 76337
// exit ;
76335: GO 76732
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76337: LD_ADDR_VAR 0 6
76341: PUSH
76342: LD_VAR 0 7
76346: PPUSH
76347: LD_INT 0
76349: PPUSH
76350: LD_INT 4
76352: PPUSH
76353: CALL_OW 272
76357: PUSH
76358: LD_VAR 0 8
76362: PPUSH
76363: LD_INT 0
76365: PPUSH
76366: LD_INT 4
76368: PPUSH
76369: CALL_OW 273
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: PUSH
76378: LD_VAR 0 7
76382: PPUSH
76383: LD_INT 1
76385: PPUSH
76386: LD_INT 4
76388: PPUSH
76389: CALL_OW 272
76393: PUSH
76394: LD_VAR 0 8
76398: PPUSH
76399: LD_INT 1
76401: PPUSH
76402: LD_INT 4
76404: PPUSH
76405: CALL_OW 273
76409: PUSH
76410: EMPTY
76411: LIST
76412: LIST
76413: PUSH
76414: LD_VAR 0 7
76418: PPUSH
76419: LD_INT 2
76421: PPUSH
76422: LD_INT 4
76424: PPUSH
76425: CALL_OW 272
76429: PUSH
76430: LD_VAR 0 8
76434: PPUSH
76435: LD_INT 2
76437: PPUSH
76438: LD_INT 4
76440: PPUSH
76441: CALL_OW 273
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: PUSH
76450: LD_VAR 0 7
76454: PPUSH
76455: LD_INT 3
76457: PPUSH
76458: LD_INT 4
76460: PPUSH
76461: CALL_OW 272
76465: PUSH
76466: LD_VAR 0 8
76470: PPUSH
76471: LD_INT 3
76473: PPUSH
76474: LD_INT 4
76476: PPUSH
76477: CALL_OW 273
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: PUSH
76486: LD_VAR 0 7
76490: PPUSH
76491: LD_INT 4
76493: PPUSH
76494: LD_INT 4
76496: PPUSH
76497: CALL_OW 272
76501: PUSH
76502: LD_VAR 0 8
76506: PPUSH
76507: LD_INT 4
76509: PPUSH
76510: LD_INT 4
76512: PPUSH
76513: CALL_OW 273
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: PUSH
76522: LD_VAR 0 7
76526: PPUSH
76527: LD_INT 5
76529: PPUSH
76530: LD_INT 4
76532: PPUSH
76533: CALL_OW 272
76537: PUSH
76538: LD_VAR 0 8
76542: PPUSH
76543: LD_INT 5
76545: PPUSH
76546: LD_INT 4
76548: PPUSH
76549: CALL_OW 273
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: LIST
76562: LIST
76563: LIST
76564: LIST
76565: ST_TO_ADDR
// for i = tmp downto 1 do
76566: LD_ADDR_VAR 0 4
76570: PUSH
76571: DOUBLE
76572: LD_VAR 0 6
76576: INC
76577: ST_TO_ADDR
76578: LD_INT 1
76580: PUSH
76581: FOR_DOWNTO
76582: IFFALSE 76683
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76584: LD_VAR 0 6
76588: PUSH
76589: LD_VAR 0 4
76593: ARRAY
76594: PUSH
76595: LD_INT 1
76597: ARRAY
76598: PPUSH
76599: LD_VAR 0 6
76603: PUSH
76604: LD_VAR 0 4
76608: ARRAY
76609: PUSH
76610: LD_INT 2
76612: ARRAY
76613: PPUSH
76614: CALL_OW 488
76618: NOT
76619: PUSH
76620: LD_VAR 0 6
76624: PUSH
76625: LD_VAR 0 4
76629: ARRAY
76630: PUSH
76631: LD_INT 1
76633: ARRAY
76634: PPUSH
76635: LD_VAR 0 6
76639: PUSH
76640: LD_VAR 0 4
76644: ARRAY
76645: PUSH
76646: LD_INT 2
76648: ARRAY
76649: PPUSH
76650: CALL_OW 428
76654: PUSH
76655: LD_INT 0
76657: NONEQUAL
76658: OR
76659: IFFALSE 76681
// tmp := Delete ( tmp , i ) ;
76661: LD_ADDR_VAR 0 6
76665: PUSH
76666: LD_VAR 0 6
76670: PPUSH
76671: LD_VAR 0 4
76675: PPUSH
76676: CALL_OW 3
76680: ST_TO_ADDR
76681: GO 76581
76683: POP
76684: POP
// j := GetClosestHex ( unit , tmp ) ;
76685: LD_ADDR_VAR 0 5
76689: PUSH
76690: LD_VAR 0 1
76694: PPUSH
76695: LD_VAR 0 6
76699: PPUSH
76700: CALL 75985 0 2
76704: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76705: LD_VAR 0 1
76709: PPUSH
76710: LD_VAR 0 5
76714: PUSH
76715: LD_INT 1
76717: ARRAY
76718: PPUSH
76719: LD_VAR 0 5
76723: PUSH
76724: LD_INT 2
76726: ARRAY
76727: PPUSH
76728: CALL_OW 111
// end ;
76732: LD_VAR 0 3
76736: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76737: LD_INT 0
76739: PPUSH
76740: PPUSH
76741: PPUSH
// uc_side = 0 ;
76742: LD_ADDR_OWVAR 20
76746: PUSH
76747: LD_INT 0
76749: ST_TO_ADDR
// uc_nation = 0 ;
76750: LD_ADDR_OWVAR 21
76754: PUSH
76755: LD_INT 0
76757: ST_TO_ADDR
// InitHc ;
76758: CALL_OW 19
// InitVc ;
76762: CALL_OW 20
// if mastodonts then
76766: LD_VAR 0 6
76770: IFFALSE 76837
// for i = 1 to mastodonts do
76772: LD_ADDR_VAR 0 11
76776: PUSH
76777: DOUBLE
76778: LD_INT 1
76780: DEC
76781: ST_TO_ADDR
76782: LD_VAR 0 6
76786: PUSH
76787: FOR_TO
76788: IFFALSE 76835
// begin vc_chassis := 31 ;
76790: LD_ADDR_OWVAR 37
76794: PUSH
76795: LD_INT 31
76797: ST_TO_ADDR
// vc_control := control_rider ;
76798: LD_ADDR_OWVAR 38
76802: PUSH
76803: LD_INT 4
76805: ST_TO_ADDR
// animal := CreateVehicle ;
76806: LD_ADDR_VAR 0 12
76810: PUSH
76811: CALL_OW 45
76815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76816: LD_VAR 0 12
76820: PPUSH
76821: LD_VAR 0 8
76825: PPUSH
76826: LD_INT 0
76828: PPUSH
76829: CALL 79025 0 3
// end ;
76833: GO 76787
76835: POP
76836: POP
// if horses then
76837: LD_VAR 0 5
76841: IFFALSE 76908
// for i = 1 to horses do
76843: LD_ADDR_VAR 0 11
76847: PUSH
76848: DOUBLE
76849: LD_INT 1
76851: DEC
76852: ST_TO_ADDR
76853: LD_VAR 0 5
76857: PUSH
76858: FOR_TO
76859: IFFALSE 76906
// begin hc_class := 21 ;
76861: LD_ADDR_OWVAR 28
76865: PUSH
76866: LD_INT 21
76868: ST_TO_ADDR
// hc_gallery :=  ;
76869: LD_ADDR_OWVAR 33
76873: PUSH
76874: LD_STRING 
76876: ST_TO_ADDR
// animal := CreateHuman ;
76877: LD_ADDR_VAR 0 12
76881: PUSH
76882: CALL_OW 44
76886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76887: LD_VAR 0 12
76891: PPUSH
76892: LD_VAR 0 8
76896: PPUSH
76897: LD_INT 0
76899: PPUSH
76900: CALL 79025 0 3
// end ;
76904: GO 76858
76906: POP
76907: POP
// if birds then
76908: LD_VAR 0 1
76912: IFFALSE 76979
// for i = 1 to birds do
76914: LD_ADDR_VAR 0 11
76918: PUSH
76919: DOUBLE
76920: LD_INT 1
76922: DEC
76923: ST_TO_ADDR
76924: LD_VAR 0 1
76928: PUSH
76929: FOR_TO
76930: IFFALSE 76977
// begin hc_class = 18 ;
76932: LD_ADDR_OWVAR 28
76936: PUSH
76937: LD_INT 18
76939: ST_TO_ADDR
// hc_gallery =  ;
76940: LD_ADDR_OWVAR 33
76944: PUSH
76945: LD_STRING 
76947: ST_TO_ADDR
// animal := CreateHuman ;
76948: LD_ADDR_VAR 0 12
76952: PUSH
76953: CALL_OW 44
76957: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76958: LD_VAR 0 12
76962: PPUSH
76963: LD_VAR 0 8
76967: PPUSH
76968: LD_INT 0
76970: PPUSH
76971: CALL 79025 0 3
// end ;
76975: GO 76929
76977: POP
76978: POP
// if tigers then
76979: LD_VAR 0 2
76983: IFFALSE 77067
// for i = 1 to tigers do
76985: LD_ADDR_VAR 0 11
76989: PUSH
76990: DOUBLE
76991: LD_INT 1
76993: DEC
76994: ST_TO_ADDR
76995: LD_VAR 0 2
76999: PUSH
77000: FOR_TO
77001: IFFALSE 77065
// begin hc_class = class_tiger ;
77003: LD_ADDR_OWVAR 28
77007: PUSH
77008: LD_INT 14
77010: ST_TO_ADDR
// hc_gallery =  ;
77011: LD_ADDR_OWVAR 33
77015: PUSH
77016: LD_STRING 
77018: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77019: LD_ADDR_OWVAR 35
77023: PUSH
77024: LD_INT 7
77026: NEG
77027: PPUSH
77028: LD_INT 7
77030: PPUSH
77031: CALL_OW 12
77035: ST_TO_ADDR
// animal := CreateHuman ;
77036: LD_ADDR_VAR 0 12
77040: PUSH
77041: CALL_OW 44
77045: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77046: LD_VAR 0 12
77050: PPUSH
77051: LD_VAR 0 8
77055: PPUSH
77056: LD_INT 0
77058: PPUSH
77059: CALL 79025 0 3
// end ;
77063: GO 77000
77065: POP
77066: POP
// if apemans then
77067: LD_VAR 0 3
77071: IFFALSE 77194
// for i = 1 to apemans do
77073: LD_ADDR_VAR 0 11
77077: PUSH
77078: DOUBLE
77079: LD_INT 1
77081: DEC
77082: ST_TO_ADDR
77083: LD_VAR 0 3
77087: PUSH
77088: FOR_TO
77089: IFFALSE 77192
// begin hc_class = class_apeman ;
77091: LD_ADDR_OWVAR 28
77095: PUSH
77096: LD_INT 12
77098: ST_TO_ADDR
// hc_gallery =  ;
77099: LD_ADDR_OWVAR 33
77103: PUSH
77104: LD_STRING 
77106: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
77107: LD_ADDR_OWVAR 35
77111: PUSH
77112: LD_INT 5
77114: NEG
77115: PPUSH
77116: LD_INT 5
77118: PPUSH
77119: CALL_OW 12
77123: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77124: LD_ADDR_OWVAR 31
77128: PUSH
77129: LD_INT 1
77131: PPUSH
77132: LD_INT 3
77134: PPUSH
77135: CALL_OW 12
77139: PUSH
77140: LD_INT 1
77142: PPUSH
77143: LD_INT 3
77145: PPUSH
77146: CALL_OW 12
77150: PUSH
77151: LD_INT 0
77153: PUSH
77154: LD_INT 0
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: LIST
77161: LIST
77162: ST_TO_ADDR
// animal := CreateHuman ;
77163: LD_ADDR_VAR 0 12
77167: PUSH
77168: CALL_OW 44
77172: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77173: LD_VAR 0 12
77177: PPUSH
77178: LD_VAR 0 8
77182: PPUSH
77183: LD_INT 0
77185: PPUSH
77186: CALL 79025 0 3
// end ;
77190: GO 77088
77192: POP
77193: POP
// if enchidnas then
77194: LD_VAR 0 4
77198: IFFALSE 77265
// for i = 1 to enchidnas do
77200: LD_ADDR_VAR 0 11
77204: PUSH
77205: DOUBLE
77206: LD_INT 1
77208: DEC
77209: ST_TO_ADDR
77210: LD_VAR 0 4
77214: PUSH
77215: FOR_TO
77216: IFFALSE 77263
// begin hc_class = 13 ;
77218: LD_ADDR_OWVAR 28
77222: PUSH
77223: LD_INT 13
77225: ST_TO_ADDR
// hc_gallery =  ;
77226: LD_ADDR_OWVAR 33
77230: PUSH
77231: LD_STRING 
77233: ST_TO_ADDR
// animal := CreateHuman ;
77234: LD_ADDR_VAR 0 12
77238: PUSH
77239: CALL_OW 44
77243: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77244: LD_VAR 0 12
77248: PPUSH
77249: LD_VAR 0 8
77253: PPUSH
77254: LD_INT 0
77256: PPUSH
77257: CALL 79025 0 3
// end ;
77261: GO 77215
77263: POP
77264: POP
// if fishes then
77265: LD_VAR 0 7
77269: IFFALSE 77336
// for i = 1 to fishes do
77271: LD_ADDR_VAR 0 11
77275: PUSH
77276: DOUBLE
77277: LD_INT 1
77279: DEC
77280: ST_TO_ADDR
77281: LD_VAR 0 7
77285: PUSH
77286: FOR_TO
77287: IFFALSE 77334
// begin hc_class = 20 ;
77289: LD_ADDR_OWVAR 28
77293: PUSH
77294: LD_INT 20
77296: ST_TO_ADDR
// hc_gallery =  ;
77297: LD_ADDR_OWVAR 33
77301: PUSH
77302: LD_STRING 
77304: ST_TO_ADDR
// animal := CreateHuman ;
77305: LD_ADDR_VAR 0 12
77309: PUSH
77310: CALL_OW 44
77314: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77315: LD_VAR 0 12
77319: PPUSH
77320: LD_VAR 0 9
77324: PPUSH
77325: LD_INT 0
77327: PPUSH
77328: CALL 79025 0 3
// end ;
77332: GO 77286
77334: POP
77335: POP
// end ;
77336: LD_VAR 0 10
77340: RET
// export function WantHeal ( sci , unit ) ; begin
77341: LD_INT 0
77343: PPUSH
// if GetTaskList ( sci ) > 0 then
77344: LD_VAR 0 1
77348: PPUSH
77349: CALL_OW 437
77353: PUSH
77354: LD_INT 0
77356: GREATER
77357: IFFALSE 77427
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77359: LD_VAR 0 1
77363: PPUSH
77364: CALL_OW 437
77368: PUSH
77369: LD_INT 1
77371: ARRAY
77372: PUSH
77373: LD_INT 1
77375: ARRAY
77376: PUSH
77377: LD_STRING l
77379: EQUAL
77380: PUSH
77381: LD_VAR 0 1
77385: PPUSH
77386: CALL_OW 437
77390: PUSH
77391: LD_INT 1
77393: ARRAY
77394: PUSH
77395: LD_INT 4
77397: ARRAY
77398: PUSH
77399: LD_VAR 0 2
77403: EQUAL
77404: AND
77405: IFFALSE 77417
// result := true else
77407: LD_ADDR_VAR 0 3
77411: PUSH
77412: LD_INT 1
77414: ST_TO_ADDR
77415: GO 77425
// result := false ;
77417: LD_ADDR_VAR 0 3
77421: PUSH
77422: LD_INT 0
77424: ST_TO_ADDR
// end else
77425: GO 77435
// result := false ;
77427: LD_ADDR_VAR 0 3
77431: PUSH
77432: LD_INT 0
77434: ST_TO_ADDR
// end ;
77435: LD_VAR 0 3
77439: RET
// export function HealTarget ( sci ) ; begin
77440: LD_INT 0
77442: PPUSH
// if not sci then
77443: LD_VAR 0 1
77447: NOT
77448: IFFALSE 77452
// exit ;
77450: GO 77517
// result := 0 ;
77452: LD_ADDR_VAR 0 2
77456: PUSH
77457: LD_INT 0
77459: ST_TO_ADDR
// if GetTaskList ( sci ) then
77460: LD_VAR 0 1
77464: PPUSH
77465: CALL_OW 437
77469: IFFALSE 77517
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77471: LD_VAR 0 1
77475: PPUSH
77476: CALL_OW 437
77480: PUSH
77481: LD_INT 1
77483: ARRAY
77484: PUSH
77485: LD_INT 1
77487: ARRAY
77488: PUSH
77489: LD_STRING l
77491: EQUAL
77492: IFFALSE 77517
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77494: LD_ADDR_VAR 0 2
77498: PUSH
77499: LD_VAR 0 1
77503: PPUSH
77504: CALL_OW 437
77508: PUSH
77509: LD_INT 1
77511: ARRAY
77512: PUSH
77513: LD_INT 4
77515: ARRAY
77516: ST_TO_ADDR
// end ;
77517: LD_VAR 0 2
77521: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77522: LD_INT 0
77524: PPUSH
77525: PPUSH
77526: PPUSH
77527: PPUSH
// if not base_units then
77528: LD_VAR 0 1
77532: NOT
77533: IFFALSE 77537
// exit ;
77535: GO 77624
// result := false ;
77537: LD_ADDR_VAR 0 2
77541: PUSH
77542: LD_INT 0
77544: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77545: LD_ADDR_VAR 0 5
77549: PUSH
77550: LD_VAR 0 1
77554: PPUSH
77555: LD_INT 21
77557: PUSH
77558: LD_INT 3
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: PPUSH
77565: CALL_OW 72
77569: ST_TO_ADDR
// if not tmp then
77570: LD_VAR 0 5
77574: NOT
77575: IFFALSE 77579
// exit ;
77577: GO 77624
// for i in tmp do
77579: LD_ADDR_VAR 0 3
77583: PUSH
77584: LD_VAR 0 5
77588: PUSH
77589: FOR_IN
77590: IFFALSE 77622
// begin result := EnemyInRange ( i , 22 ) ;
77592: LD_ADDR_VAR 0 2
77596: PUSH
77597: LD_VAR 0 3
77601: PPUSH
77602: LD_INT 22
77604: PPUSH
77605: CALL 75860 0 2
77609: ST_TO_ADDR
// if result then
77610: LD_VAR 0 2
77614: IFFALSE 77620
// exit ;
77616: POP
77617: POP
77618: GO 77624
// end ;
77620: GO 77589
77622: POP
77623: POP
// end ;
77624: LD_VAR 0 2
77628: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
77629: LD_INT 0
77631: PPUSH
77632: PPUSH
// if not units then
77633: LD_VAR 0 1
77637: NOT
77638: IFFALSE 77642
// exit ;
77640: GO 77712
// result := [ ] ;
77642: LD_ADDR_VAR 0 3
77646: PUSH
77647: EMPTY
77648: ST_TO_ADDR
// for i in units do
77649: LD_ADDR_VAR 0 4
77653: PUSH
77654: LD_VAR 0 1
77658: PUSH
77659: FOR_IN
77660: IFFALSE 77710
// if GetTag ( i ) = tag then
77662: LD_VAR 0 4
77666: PPUSH
77667: CALL_OW 110
77671: PUSH
77672: LD_VAR 0 2
77676: EQUAL
77677: IFFALSE 77708
// result := Insert ( result , result + 1 , i ) ;
77679: LD_ADDR_VAR 0 3
77683: PUSH
77684: LD_VAR 0 3
77688: PPUSH
77689: LD_VAR 0 3
77693: PUSH
77694: LD_INT 1
77696: PLUS
77697: PPUSH
77698: LD_VAR 0 4
77702: PPUSH
77703: CALL_OW 2
77707: ST_TO_ADDR
77708: GO 77659
77710: POP
77711: POP
// end ;
77712: LD_VAR 0 3
77716: RET
// export function IsDriver ( un ) ; begin
77717: LD_INT 0
77719: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77720: LD_ADDR_VAR 0 2
77724: PUSH
77725: LD_VAR 0 1
77729: PUSH
77730: LD_INT 55
77732: PUSH
77733: EMPTY
77734: LIST
77735: PPUSH
77736: CALL_OW 69
77740: IN
77741: ST_TO_ADDR
// end ;
77742: LD_VAR 0 2
77746: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77747: LD_INT 0
77749: PPUSH
77750: PPUSH
// list := [ ] ;
77751: LD_ADDR_VAR 0 5
77755: PUSH
77756: EMPTY
77757: ST_TO_ADDR
// case d of 0 :
77758: LD_VAR 0 3
77762: PUSH
77763: LD_INT 0
77765: DOUBLE
77766: EQUAL
77767: IFTRUE 77771
77769: GO 77904
77771: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77772: LD_ADDR_VAR 0 5
77776: PUSH
77777: LD_VAR 0 1
77781: PUSH
77782: LD_INT 4
77784: MINUS
77785: PUSH
77786: LD_VAR 0 2
77790: PUSH
77791: LD_INT 4
77793: MINUS
77794: PUSH
77795: LD_INT 2
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: LIST
77802: PUSH
77803: LD_VAR 0 1
77807: PUSH
77808: LD_INT 3
77810: MINUS
77811: PUSH
77812: LD_VAR 0 2
77816: PUSH
77817: LD_INT 1
77819: PUSH
77820: EMPTY
77821: LIST
77822: LIST
77823: LIST
77824: PUSH
77825: LD_VAR 0 1
77829: PUSH
77830: LD_INT 4
77832: PLUS
77833: PUSH
77834: LD_VAR 0 2
77838: PUSH
77839: LD_INT 4
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: LIST
77846: PUSH
77847: LD_VAR 0 1
77851: PUSH
77852: LD_INT 3
77854: PLUS
77855: PUSH
77856: LD_VAR 0 2
77860: PUSH
77861: LD_INT 3
77863: PLUS
77864: PUSH
77865: LD_INT 5
77867: PUSH
77868: EMPTY
77869: LIST
77870: LIST
77871: LIST
77872: PUSH
77873: LD_VAR 0 1
77877: PUSH
77878: LD_VAR 0 2
77882: PUSH
77883: LD_INT 4
77885: PLUS
77886: PUSH
77887: LD_INT 0
77889: PUSH
77890: EMPTY
77891: LIST
77892: LIST
77893: LIST
77894: PUSH
77895: EMPTY
77896: LIST
77897: LIST
77898: LIST
77899: LIST
77900: LIST
77901: ST_TO_ADDR
// end ; 1 :
77902: GO 78602
77904: LD_INT 1
77906: DOUBLE
77907: EQUAL
77908: IFTRUE 77912
77910: GO 78045
77912: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77913: LD_ADDR_VAR 0 5
77917: PUSH
77918: LD_VAR 0 1
77922: PUSH
77923: LD_VAR 0 2
77927: PUSH
77928: LD_INT 4
77930: MINUS
77931: PUSH
77932: LD_INT 3
77934: PUSH
77935: EMPTY
77936: LIST
77937: LIST
77938: LIST
77939: PUSH
77940: LD_VAR 0 1
77944: PUSH
77945: LD_INT 3
77947: MINUS
77948: PUSH
77949: LD_VAR 0 2
77953: PUSH
77954: LD_INT 3
77956: MINUS
77957: PUSH
77958: LD_INT 2
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: LIST
77965: PUSH
77966: LD_VAR 0 1
77970: PUSH
77971: LD_INT 4
77973: MINUS
77974: PUSH
77975: LD_VAR 0 2
77979: PUSH
77980: LD_INT 1
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: LIST
77987: PUSH
77988: LD_VAR 0 1
77992: PUSH
77993: LD_VAR 0 2
77997: PUSH
77998: LD_INT 3
78000: PLUS
78001: PUSH
78002: LD_INT 0
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: LIST
78009: PUSH
78010: LD_VAR 0 1
78014: PUSH
78015: LD_INT 4
78017: PLUS
78018: PUSH
78019: LD_VAR 0 2
78023: PUSH
78024: LD_INT 4
78026: PLUS
78027: PUSH
78028: LD_INT 5
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: LIST
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: LIST
78040: LIST
78041: LIST
78042: ST_TO_ADDR
// end ; 2 :
78043: GO 78602
78045: LD_INT 2
78047: DOUBLE
78048: EQUAL
78049: IFTRUE 78053
78051: GO 78182
78053: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78054: LD_ADDR_VAR 0 5
78058: PUSH
78059: LD_VAR 0 1
78063: PUSH
78064: LD_VAR 0 2
78068: PUSH
78069: LD_INT 3
78071: MINUS
78072: PUSH
78073: LD_INT 3
78075: PUSH
78076: EMPTY
78077: LIST
78078: LIST
78079: LIST
78080: PUSH
78081: LD_VAR 0 1
78085: PUSH
78086: LD_INT 4
78088: PLUS
78089: PUSH
78090: LD_VAR 0 2
78094: PUSH
78095: LD_INT 4
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: LIST
78102: PUSH
78103: LD_VAR 0 1
78107: PUSH
78108: LD_VAR 0 2
78112: PUSH
78113: LD_INT 4
78115: PLUS
78116: PUSH
78117: LD_INT 0
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: LIST
78124: PUSH
78125: LD_VAR 0 1
78129: PUSH
78130: LD_INT 3
78132: MINUS
78133: PUSH
78134: LD_VAR 0 2
78138: PUSH
78139: LD_INT 1
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: LIST
78146: PUSH
78147: LD_VAR 0 1
78151: PUSH
78152: LD_INT 4
78154: MINUS
78155: PUSH
78156: LD_VAR 0 2
78160: PUSH
78161: LD_INT 4
78163: MINUS
78164: PUSH
78165: LD_INT 2
78167: PUSH
78168: EMPTY
78169: LIST
78170: LIST
78171: LIST
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: LIST
78177: LIST
78178: LIST
78179: ST_TO_ADDR
// end ; 3 :
78180: GO 78602
78182: LD_INT 3
78184: DOUBLE
78185: EQUAL
78186: IFTRUE 78190
78188: GO 78323
78190: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78191: LD_ADDR_VAR 0 5
78195: PUSH
78196: LD_VAR 0 1
78200: PUSH
78201: LD_INT 3
78203: PLUS
78204: PUSH
78205: LD_VAR 0 2
78209: PUSH
78210: LD_INT 4
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: LIST
78217: PUSH
78218: LD_VAR 0 1
78222: PUSH
78223: LD_INT 4
78225: PLUS
78226: PUSH
78227: LD_VAR 0 2
78231: PUSH
78232: LD_INT 4
78234: PLUS
78235: PUSH
78236: LD_INT 5
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: LIST
78243: PUSH
78244: LD_VAR 0 1
78248: PUSH
78249: LD_INT 4
78251: MINUS
78252: PUSH
78253: LD_VAR 0 2
78257: PUSH
78258: LD_INT 1
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: LIST
78265: PUSH
78266: LD_VAR 0 1
78270: PUSH
78271: LD_VAR 0 2
78275: PUSH
78276: LD_INT 4
78278: MINUS
78279: PUSH
78280: LD_INT 3
78282: PUSH
78283: EMPTY
78284: LIST
78285: LIST
78286: LIST
78287: PUSH
78288: LD_VAR 0 1
78292: PUSH
78293: LD_INT 3
78295: MINUS
78296: PUSH
78297: LD_VAR 0 2
78301: PUSH
78302: LD_INT 3
78304: MINUS
78305: PUSH
78306: LD_INT 2
78308: PUSH
78309: EMPTY
78310: LIST
78311: LIST
78312: LIST
78313: PUSH
78314: EMPTY
78315: LIST
78316: LIST
78317: LIST
78318: LIST
78319: LIST
78320: ST_TO_ADDR
// end ; 4 :
78321: GO 78602
78323: LD_INT 4
78325: DOUBLE
78326: EQUAL
78327: IFTRUE 78331
78329: GO 78464
78331: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78332: LD_ADDR_VAR 0 5
78336: PUSH
78337: LD_VAR 0 1
78341: PUSH
78342: LD_VAR 0 2
78346: PUSH
78347: LD_INT 4
78349: PLUS
78350: PUSH
78351: LD_INT 0
78353: PUSH
78354: EMPTY
78355: LIST
78356: LIST
78357: LIST
78358: PUSH
78359: LD_VAR 0 1
78363: PUSH
78364: LD_INT 3
78366: PLUS
78367: PUSH
78368: LD_VAR 0 2
78372: PUSH
78373: LD_INT 3
78375: PLUS
78376: PUSH
78377: LD_INT 5
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: LIST
78384: PUSH
78385: LD_VAR 0 1
78389: PUSH
78390: LD_INT 4
78392: PLUS
78393: PUSH
78394: LD_VAR 0 2
78398: PUSH
78399: LD_INT 4
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: LIST
78406: PUSH
78407: LD_VAR 0 1
78411: PUSH
78412: LD_VAR 0 2
78416: PUSH
78417: LD_INT 3
78419: MINUS
78420: PUSH
78421: LD_INT 3
78423: PUSH
78424: EMPTY
78425: LIST
78426: LIST
78427: LIST
78428: PUSH
78429: LD_VAR 0 1
78433: PUSH
78434: LD_INT 4
78436: MINUS
78437: PUSH
78438: LD_VAR 0 2
78442: PUSH
78443: LD_INT 4
78445: MINUS
78446: PUSH
78447: LD_INT 2
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: LIST
78454: PUSH
78455: EMPTY
78456: LIST
78457: LIST
78458: LIST
78459: LIST
78460: LIST
78461: ST_TO_ADDR
// end ; 5 :
78462: GO 78602
78464: LD_INT 5
78466: DOUBLE
78467: EQUAL
78468: IFTRUE 78472
78470: GO 78601
78472: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78473: LD_ADDR_VAR 0 5
78477: PUSH
78478: LD_VAR 0 1
78482: PUSH
78483: LD_INT 4
78485: MINUS
78486: PUSH
78487: LD_VAR 0 2
78491: PUSH
78492: LD_INT 1
78494: PUSH
78495: EMPTY
78496: LIST
78497: LIST
78498: LIST
78499: PUSH
78500: LD_VAR 0 1
78504: PUSH
78505: LD_VAR 0 2
78509: PUSH
78510: LD_INT 4
78512: MINUS
78513: PUSH
78514: LD_INT 3
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: LIST
78521: PUSH
78522: LD_VAR 0 1
78526: PUSH
78527: LD_INT 4
78529: PLUS
78530: PUSH
78531: LD_VAR 0 2
78535: PUSH
78536: LD_INT 4
78538: PLUS
78539: PUSH
78540: LD_INT 5
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: LIST
78547: PUSH
78548: LD_VAR 0 1
78552: PUSH
78553: LD_INT 3
78555: PLUS
78556: PUSH
78557: LD_VAR 0 2
78561: PUSH
78562: LD_INT 4
78564: PUSH
78565: EMPTY
78566: LIST
78567: LIST
78568: LIST
78569: PUSH
78570: LD_VAR 0 1
78574: PUSH
78575: LD_VAR 0 2
78579: PUSH
78580: LD_INT 3
78582: PLUS
78583: PUSH
78584: LD_INT 0
78586: PUSH
78587: EMPTY
78588: LIST
78589: LIST
78590: LIST
78591: PUSH
78592: EMPTY
78593: LIST
78594: LIST
78595: LIST
78596: LIST
78597: LIST
78598: ST_TO_ADDR
// end ; end ;
78599: GO 78602
78601: POP
// result := list ;
78602: LD_ADDR_VAR 0 4
78606: PUSH
78607: LD_VAR 0 5
78611: ST_TO_ADDR
// end ;
78612: LD_VAR 0 4
78616: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78617: LD_INT 0
78619: PPUSH
78620: PPUSH
78621: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78622: LD_VAR 0 1
78626: NOT
78627: PUSH
78628: LD_VAR 0 2
78632: PUSH
78633: LD_INT 1
78635: PUSH
78636: LD_INT 2
78638: PUSH
78639: LD_INT 3
78641: PUSH
78642: LD_INT 4
78644: PUSH
78645: EMPTY
78646: LIST
78647: LIST
78648: LIST
78649: LIST
78650: IN
78651: NOT
78652: OR
78653: IFFALSE 78657
// exit ;
78655: GO 78749
// tmp := [ ] ;
78657: LD_ADDR_VAR 0 5
78661: PUSH
78662: EMPTY
78663: ST_TO_ADDR
// for i in units do
78664: LD_ADDR_VAR 0 4
78668: PUSH
78669: LD_VAR 0 1
78673: PUSH
78674: FOR_IN
78675: IFFALSE 78718
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
78677: LD_ADDR_VAR 0 5
78681: PUSH
78682: LD_VAR 0 5
78686: PPUSH
78687: LD_VAR 0 5
78691: PUSH
78692: LD_INT 1
78694: PLUS
78695: PPUSH
78696: LD_VAR 0 4
78700: PPUSH
78701: LD_VAR 0 2
78705: PPUSH
78706: CALL_OW 259
78710: PPUSH
78711: CALL_OW 2
78715: ST_TO_ADDR
78716: GO 78674
78718: POP
78719: POP
// if not tmp then
78720: LD_VAR 0 5
78724: NOT
78725: IFFALSE 78729
// exit ;
78727: GO 78749
// result := SortListByListDesc ( units , tmp ) ;
78729: LD_ADDR_VAR 0 3
78733: PUSH
78734: LD_VAR 0 1
78738: PPUSH
78739: LD_VAR 0 5
78743: PPUSH
78744: CALL_OW 77
78748: ST_TO_ADDR
// end ;
78749: LD_VAR 0 3
78753: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78754: LD_INT 0
78756: PPUSH
78757: PPUSH
78758: PPUSH
// result := false ;
78759: LD_ADDR_VAR 0 3
78763: PUSH
78764: LD_INT 0
78766: ST_TO_ADDR
// x := GetX ( building ) ;
78767: LD_ADDR_VAR 0 4
78771: PUSH
78772: LD_VAR 0 2
78776: PPUSH
78777: CALL_OW 250
78781: ST_TO_ADDR
// y := GetY ( building ) ;
78782: LD_ADDR_VAR 0 5
78786: PUSH
78787: LD_VAR 0 2
78791: PPUSH
78792: CALL_OW 251
78796: ST_TO_ADDR
// if not building or not x or not y then
78797: LD_VAR 0 2
78801: NOT
78802: PUSH
78803: LD_VAR 0 4
78807: NOT
78808: OR
78809: PUSH
78810: LD_VAR 0 5
78814: NOT
78815: OR
78816: IFFALSE 78820
// exit ;
78818: GO 78912
// if GetTaskList ( unit ) then
78820: LD_VAR 0 1
78824: PPUSH
78825: CALL_OW 437
78829: IFFALSE 78912
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78831: LD_STRING e
78833: PUSH
78834: LD_VAR 0 1
78838: PPUSH
78839: CALL_OW 437
78843: PUSH
78844: LD_INT 1
78846: ARRAY
78847: PUSH
78848: LD_INT 1
78850: ARRAY
78851: EQUAL
78852: PUSH
78853: LD_VAR 0 4
78857: PUSH
78858: LD_VAR 0 1
78862: PPUSH
78863: CALL_OW 437
78867: PUSH
78868: LD_INT 1
78870: ARRAY
78871: PUSH
78872: LD_INT 2
78874: ARRAY
78875: EQUAL
78876: AND
78877: PUSH
78878: LD_VAR 0 5
78882: PUSH
78883: LD_VAR 0 1
78887: PPUSH
78888: CALL_OW 437
78892: PUSH
78893: LD_INT 1
78895: ARRAY
78896: PUSH
78897: LD_INT 3
78899: ARRAY
78900: EQUAL
78901: AND
78902: IFFALSE 78912
// result := true end ;
78904: LD_ADDR_VAR 0 3
78908: PUSH
78909: LD_INT 1
78911: ST_TO_ADDR
// end ;
78912: LD_VAR 0 3
78916: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78917: LD_INT 0
78919: PPUSH
// result := false ;
78920: LD_ADDR_VAR 0 4
78924: PUSH
78925: LD_INT 0
78927: ST_TO_ADDR
// if GetTaskList ( unit ) then
78928: LD_VAR 0 1
78932: PPUSH
78933: CALL_OW 437
78937: IFFALSE 79020
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78939: LD_STRING M
78941: PUSH
78942: LD_VAR 0 1
78946: PPUSH
78947: CALL_OW 437
78951: PUSH
78952: LD_INT 1
78954: ARRAY
78955: PUSH
78956: LD_INT 1
78958: ARRAY
78959: EQUAL
78960: PUSH
78961: LD_VAR 0 2
78965: PUSH
78966: LD_VAR 0 1
78970: PPUSH
78971: CALL_OW 437
78975: PUSH
78976: LD_INT 1
78978: ARRAY
78979: PUSH
78980: LD_INT 2
78982: ARRAY
78983: EQUAL
78984: AND
78985: PUSH
78986: LD_VAR 0 3
78990: PUSH
78991: LD_VAR 0 1
78995: PPUSH
78996: CALL_OW 437
79000: PUSH
79001: LD_INT 1
79003: ARRAY
79004: PUSH
79005: LD_INT 3
79007: ARRAY
79008: EQUAL
79009: AND
79010: IFFALSE 79020
// result := true ;
79012: LD_ADDR_VAR 0 4
79016: PUSH
79017: LD_INT 1
79019: ST_TO_ADDR
// end ; end ;
79020: LD_VAR 0 4
79024: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79025: LD_INT 0
79027: PPUSH
79028: PPUSH
79029: PPUSH
79030: PPUSH
// if not unit or not area then
79031: LD_VAR 0 1
79035: NOT
79036: PUSH
79037: LD_VAR 0 2
79041: NOT
79042: OR
79043: IFFALSE 79047
// exit ;
79045: GO 79211
// tmp := AreaToList ( area , i ) ;
79047: LD_ADDR_VAR 0 6
79051: PUSH
79052: LD_VAR 0 2
79056: PPUSH
79057: LD_VAR 0 5
79061: PPUSH
79062: CALL_OW 517
79066: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79067: LD_ADDR_VAR 0 5
79071: PUSH
79072: DOUBLE
79073: LD_INT 1
79075: DEC
79076: ST_TO_ADDR
79077: LD_VAR 0 6
79081: PUSH
79082: LD_INT 1
79084: ARRAY
79085: PUSH
79086: FOR_TO
79087: IFFALSE 79209
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79089: LD_ADDR_VAR 0 7
79093: PUSH
79094: LD_VAR 0 6
79098: PUSH
79099: LD_INT 1
79101: ARRAY
79102: PUSH
79103: LD_VAR 0 5
79107: ARRAY
79108: PUSH
79109: LD_VAR 0 6
79113: PUSH
79114: LD_INT 2
79116: ARRAY
79117: PUSH
79118: LD_VAR 0 5
79122: ARRAY
79123: PUSH
79124: EMPTY
79125: LIST
79126: LIST
79127: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
79128: LD_VAR 0 7
79132: PUSH
79133: LD_INT 1
79135: ARRAY
79136: PPUSH
79137: LD_VAR 0 7
79141: PUSH
79142: LD_INT 2
79144: ARRAY
79145: PPUSH
79146: CALL_OW 428
79150: PUSH
79151: LD_INT 0
79153: EQUAL
79154: IFFALSE 79207
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79156: LD_VAR 0 1
79160: PPUSH
79161: LD_VAR 0 7
79165: PUSH
79166: LD_INT 1
79168: ARRAY
79169: PPUSH
79170: LD_VAR 0 7
79174: PUSH
79175: LD_INT 2
79177: ARRAY
79178: PPUSH
79179: LD_VAR 0 3
79183: PPUSH
79184: CALL_OW 48
// result := IsPlaced ( unit ) ;
79188: LD_ADDR_VAR 0 4
79192: PUSH
79193: LD_VAR 0 1
79197: PPUSH
79198: CALL_OW 305
79202: ST_TO_ADDR
// exit ;
79203: POP
79204: POP
79205: GO 79211
// end ; end ;
79207: GO 79086
79209: POP
79210: POP
// end ;
79211: LD_VAR 0 4
79215: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79216: LD_INT 0
79218: PPUSH
79219: PPUSH
79220: PPUSH
// if not side or side > 8 then
79221: LD_VAR 0 1
79225: NOT
79226: PUSH
79227: LD_VAR 0 1
79231: PUSH
79232: LD_INT 8
79234: GREATER
79235: OR
79236: IFFALSE 79240
// exit ;
79238: GO 79427
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79240: LD_ADDR_VAR 0 4
79244: PUSH
79245: LD_INT 22
79247: PUSH
79248: LD_VAR 0 1
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: LD_INT 21
79259: PUSH
79260: LD_INT 3
79262: PUSH
79263: EMPTY
79264: LIST
79265: LIST
79266: PUSH
79267: EMPTY
79268: LIST
79269: LIST
79270: PPUSH
79271: CALL_OW 69
79275: ST_TO_ADDR
// if not tmp then
79276: LD_VAR 0 4
79280: NOT
79281: IFFALSE 79285
// exit ;
79283: GO 79427
// enable_addtolog := true ;
79285: LD_ADDR_OWVAR 81
79289: PUSH
79290: LD_INT 1
79292: ST_TO_ADDR
// AddToLog ( [ ) ;
79293: LD_STRING [
79295: PPUSH
79296: CALL_OW 561
// for i in tmp do
79300: LD_ADDR_VAR 0 3
79304: PUSH
79305: LD_VAR 0 4
79309: PUSH
79310: FOR_IN
79311: IFFALSE 79418
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79313: LD_STRING [
79315: PUSH
79316: LD_VAR 0 3
79320: PPUSH
79321: CALL_OW 266
79325: STR
79326: PUSH
79327: LD_STRING , 
79329: STR
79330: PUSH
79331: LD_VAR 0 3
79335: PPUSH
79336: CALL_OW 250
79340: STR
79341: PUSH
79342: LD_STRING , 
79344: STR
79345: PUSH
79346: LD_VAR 0 3
79350: PPUSH
79351: CALL_OW 251
79355: STR
79356: PUSH
79357: LD_STRING , 
79359: STR
79360: PUSH
79361: LD_VAR 0 3
79365: PPUSH
79366: CALL_OW 254
79370: STR
79371: PUSH
79372: LD_STRING , 
79374: STR
79375: PUSH
79376: LD_VAR 0 3
79380: PPUSH
79381: LD_INT 1
79383: PPUSH
79384: CALL_OW 268
79388: STR
79389: PUSH
79390: LD_STRING , 
79392: STR
79393: PUSH
79394: LD_VAR 0 3
79398: PPUSH
79399: LD_INT 2
79401: PPUSH
79402: CALL_OW 268
79406: STR
79407: PUSH
79408: LD_STRING ],
79410: STR
79411: PPUSH
79412: CALL_OW 561
// end ;
79416: GO 79310
79418: POP
79419: POP
// AddToLog ( ]; ) ;
79420: LD_STRING ];
79422: PPUSH
79423: CALL_OW 561
// end ;
79427: LD_VAR 0 2
79431: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79432: LD_INT 0
79434: PPUSH
79435: PPUSH
79436: PPUSH
79437: PPUSH
79438: PPUSH
// if not area or not rate or not max then
79439: LD_VAR 0 1
79443: NOT
79444: PUSH
79445: LD_VAR 0 2
79449: NOT
79450: OR
79451: PUSH
79452: LD_VAR 0 4
79456: NOT
79457: OR
79458: IFFALSE 79462
// exit ;
79460: GO 79654
// while 1 do
79462: LD_INT 1
79464: IFFALSE 79654
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79466: LD_ADDR_VAR 0 9
79470: PUSH
79471: LD_VAR 0 1
79475: PPUSH
79476: LD_INT 1
79478: PPUSH
79479: CALL_OW 287
79483: PUSH
79484: LD_INT 10
79486: MUL
79487: ST_TO_ADDR
// r := rate / 10 ;
79488: LD_ADDR_VAR 0 7
79492: PUSH
79493: LD_VAR 0 2
79497: PUSH
79498: LD_INT 10
79500: DIVREAL
79501: ST_TO_ADDR
// time := 1 1$00 ;
79502: LD_ADDR_VAR 0 8
79506: PUSH
79507: LD_INT 2100
79509: ST_TO_ADDR
// if amount < min then
79510: LD_VAR 0 9
79514: PUSH
79515: LD_VAR 0 3
79519: LESS
79520: IFFALSE 79538
// r := r * 2 else
79522: LD_ADDR_VAR 0 7
79526: PUSH
79527: LD_VAR 0 7
79531: PUSH
79532: LD_INT 2
79534: MUL
79535: ST_TO_ADDR
79536: GO 79564
// if amount > max then
79538: LD_VAR 0 9
79542: PUSH
79543: LD_VAR 0 4
79547: GREATER
79548: IFFALSE 79564
// r := r / 2 ;
79550: LD_ADDR_VAR 0 7
79554: PUSH
79555: LD_VAR 0 7
79559: PUSH
79560: LD_INT 2
79562: DIVREAL
79563: ST_TO_ADDR
// time := time / r ;
79564: LD_ADDR_VAR 0 8
79568: PUSH
79569: LD_VAR 0 8
79573: PUSH
79574: LD_VAR 0 7
79578: DIVREAL
79579: ST_TO_ADDR
// if time < 0 then
79580: LD_VAR 0 8
79584: PUSH
79585: LD_INT 0
79587: LESS
79588: IFFALSE 79605
// time := time * - 1 ;
79590: LD_ADDR_VAR 0 8
79594: PUSH
79595: LD_VAR 0 8
79599: PUSH
79600: LD_INT 1
79602: NEG
79603: MUL
79604: ST_TO_ADDR
// wait ( time ) ;
79605: LD_VAR 0 8
79609: PPUSH
79610: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
79614: LD_INT 35
79616: PPUSH
79617: LD_INT 875
79619: PPUSH
79620: CALL_OW 12
79624: PPUSH
79625: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79629: LD_INT 1
79631: PPUSH
79632: LD_INT 5
79634: PPUSH
79635: CALL_OW 12
79639: PPUSH
79640: LD_VAR 0 1
79644: PPUSH
79645: LD_INT 1
79647: PPUSH
79648: CALL_OW 55
// end ;
79652: GO 79462
// end ;
79654: LD_VAR 0 5
79658: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79659: LD_INT 0
79661: PPUSH
79662: PPUSH
79663: PPUSH
79664: PPUSH
79665: PPUSH
79666: PPUSH
79667: PPUSH
79668: PPUSH
// if not turrets or not factories then
79669: LD_VAR 0 1
79673: NOT
79674: PUSH
79675: LD_VAR 0 2
79679: NOT
79680: OR
79681: IFFALSE 79685
// exit ;
79683: GO 79992
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79685: LD_ADDR_VAR 0 10
79689: PUSH
79690: LD_INT 5
79692: PUSH
79693: LD_INT 6
79695: PUSH
79696: EMPTY
79697: LIST
79698: LIST
79699: PUSH
79700: LD_INT 2
79702: PUSH
79703: LD_INT 4
79705: PUSH
79706: EMPTY
79707: LIST
79708: LIST
79709: PUSH
79710: LD_INT 3
79712: PUSH
79713: LD_INT 5
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: PUSH
79720: EMPTY
79721: LIST
79722: LIST
79723: LIST
79724: PUSH
79725: LD_INT 24
79727: PUSH
79728: LD_INT 25
79730: PUSH
79731: EMPTY
79732: LIST
79733: LIST
79734: PUSH
79735: LD_INT 23
79737: PUSH
79738: LD_INT 27
79740: PUSH
79741: EMPTY
79742: LIST
79743: LIST
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: PUSH
79749: LD_INT 42
79751: PUSH
79752: LD_INT 43
79754: PUSH
79755: EMPTY
79756: LIST
79757: LIST
79758: PUSH
79759: LD_INT 44
79761: PUSH
79762: LD_INT 46
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: PUSH
79769: LD_INT 45
79771: PUSH
79772: LD_INT 47
79774: PUSH
79775: EMPTY
79776: LIST
79777: LIST
79778: PUSH
79779: EMPTY
79780: LIST
79781: LIST
79782: LIST
79783: PUSH
79784: EMPTY
79785: LIST
79786: LIST
79787: LIST
79788: ST_TO_ADDR
// result := [ ] ;
79789: LD_ADDR_VAR 0 3
79793: PUSH
79794: EMPTY
79795: ST_TO_ADDR
// for i in turrets do
79796: LD_ADDR_VAR 0 4
79800: PUSH
79801: LD_VAR 0 1
79805: PUSH
79806: FOR_IN
79807: IFFALSE 79990
// begin nat := GetNation ( i ) ;
79809: LD_ADDR_VAR 0 7
79813: PUSH
79814: LD_VAR 0 4
79818: PPUSH
79819: CALL_OW 248
79823: ST_TO_ADDR
// weapon := 0 ;
79824: LD_ADDR_VAR 0 8
79828: PUSH
79829: LD_INT 0
79831: ST_TO_ADDR
// if not nat then
79832: LD_VAR 0 7
79836: NOT
79837: IFFALSE 79841
// continue ;
79839: GO 79806
// for j in list [ nat ] do
79841: LD_ADDR_VAR 0 5
79845: PUSH
79846: LD_VAR 0 10
79850: PUSH
79851: LD_VAR 0 7
79855: ARRAY
79856: PUSH
79857: FOR_IN
79858: IFFALSE 79899
// if GetBWeapon ( i ) = j [ 1 ] then
79860: LD_VAR 0 4
79864: PPUSH
79865: CALL_OW 269
79869: PUSH
79870: LD_VAR 0 5
79874: PUSH
79875: LD_INT 1
79877: ARRAY
79878: EQUAL
79879: IFFALSE 79897
// begin weapon := j [ 2 ] ;
79881: LD_ADDR_VAR 0 8
79885: PUSH
79886: LD_VAR 0 5
79890: PUSH
79891: LD_INT 2
79893: ARRAY
79894: ST_TO_ADDR
// break ;
79895: GO 79899
// end ;
79897: GO 79857
79899: POP
79900: POP
// if not weapon then
79901: LD_VAR 0 8
79905: NOT
79906: IFFALSE 79910
// continue ;
79908: GO 79806
// for k in factories do
79910: LD_ADDR_VAR 0 6
79914: PUSH
79915: LD_VAR 0 2
79919: PUSH
79920: FOR_IN
79921: IFFALSE 79986
// begin weapons := AvailableWeaponList ( k ) ;
79923: LD_ADDR_VAR 0 9
79927: PUSH
79928: LD_VAR 0 6
79932: PPUSH
79933: CALL_OW 478
79937: ST_TO_ADDR
// if not weapons then
79938: LD_VAR 0 9
79942: NOT
79943: IFFALSE 79947
// continue ;
79945: GO 79920
// if weapon in weapons then
79947: LD_VAR 0 8
79951: PUSH
79952: LD_VAR 0 9
79956: IN
79957: IFFALSE 79984
// begin result := [ i , weapon ] ;
79959: LD_ADDR_VAR 0 3
79963: PUSH
79964: LD_VAR 0 4
79968: PUSH
79969: LD_VAR 0 8
79973: PUSH
79974: EMPTY
79975: LIST
79976: LIST
79977: ST_TO_ADDR
// exit ;
79978: POP
79979: POP
79980: POP
79981: POP
79982: GO 79992
// end ; end ;
79984: GO 79920
79986: POP
79987: POP
// end ;
79988: GO 79806
79990: POP
79991: POP
// end ;
79992: LD_VAR 0 3
79996: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79997: LD_INT 0
79999: PPUSH
// if not side or side > 8 then
80000: LD_VAR 0 3
80004: NOT
80005: PUSH
80006: LD_VAR 0 3
80010: PUSH
80011: LD_INT 8
80013: GREATER
80014: OR
80015: IFFALSE 80019
// exit ;
80017: GO 80078
// if not range then
80019: LD_VAR 0 4
80023: NOT
80024: IFFALSE 80035
// range := - 12 ;
80026: LD_ADDR_VAR 0 4
80030: PUSH
80031: LD_INT 12
80033: NEG
80034: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80035: LD_VAR 0 1
80039: PPUSH
80040: LD_VAR 0 2
80044: PPUSH
80045: LD_VAR 0 3
80049: PPUSH
80050: LD_VAR 0 4
80054: PPUSH
80055: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80059: LD_VAR 0 1
80063: PPUSH
80064: LD_VAR 0 2
80068: PPUSH
80069: LD_VAR 0 3
80073: PPUSH
80074: CALL_OW 331
// end ;
80078: LD_VAR 0 5
80082: RET
// export function Video ( mode ) ; begin
80083: LD_INT 0
80085: PPUSH
// ingame_video = mode ;
80086: LD_ADDR_OWVAR 52
80090: PUSH
80091: LD_VAR 0 1
80095: ST_TO_ADDR
// interface_hidden = mode ;
80096: LD_ADDR_OWVAR 54
80100: PUSH
80101: LD_VAR 0 1
80105: ST_TO_ADDR
// end ;
80106: LD_VAR 0 2
80110: RET
// export function Join ( array , element ) ; begin
80111: LD_INT 0
80113: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80114: LD_ADDR_VAR 0 3
80118: PUSH
80119: LD_VAR 0 1
80123: PPUSH
80124: LD_VAR 0 1
80128: PUSH
80129: LD_INT 1
80131: PLUS
80132: PPUSH
80133: LD_VAR 0 2
80137: PPUSH
80138: CALL_OW 1
80142: ST_TO_ADDR
// end ;
80143: LD_VAR 0 3
80147: RET
// export function JoinUnion ( array , element ) ; begin
80148: LD_INT 0
80150: PPUSH
// result := array union element ;
80151: LD_ADDR_VAR 0 3
80155: PUSH
80156: LD_VAR 0 1
80160: PUSH
80161: LD_VAR 0 2
80165: UNION
80166: ST_TO_ADDR
// end ;
80167: LD_VAR 0 3
80171: RET
// export function GetBehemoths ( side ) ; begin
80172: LD_INT 0
80174: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
80175: LD_ADDR_VAR 0 2
80179: PUSH
80180: LD_INT 22
80182: PUSH
80183: LD_VAR 0 1
80187: PUSH
80188: EMPTY
80189: LIST
80190: LIST
80191: PUSH
80192: LD_INT 31
80194: PUSH
80195: LD_INT 25
80197: PUSH
80198: EMPTY
80199: LIST
80200: LIST
80201: PUSH
80202: EMPTY
80203: LIST
80204: LIST
80205: PPUSH
80206: CALL_OW 69
80210: ST_TO_ADDR
// end ;
80211: LD_VAR 0 2
80215: RET
// export function Shuffle ( array ) ; var i , index ; begin
80216: LD_INT 0
80218: PPUSH
80219: PPUSH
80220: PPUSH
// result := [ ] ;
80221: LD_ADDR_VAR 0 2
80225: PUSH
80226: EMPTY
80227: ST_TO_ADDR
// if not array then
80228: LD_VAR 0 1
80232: NOT
80233: IFFALSE 80237
// exit ;
80235: GO 80336
// Randomize ;
80237: CALL_OW 10
// for i = array downto 1 do
80241: LD_ADDR_VAR 0 3
80245: PUSH
80246: DOUBLE
80247: LD_VAR 0 1
80251: INC
80252: ST_TO_ADDR
80253: LD_INT 1
80255: PUSH
80256: FOR_DOWNTO
80257: IFFALSE 80334
// begin index := rand ( 1 , array ) ;
80259: LD_ADDR_VAR 0 4
80263: PUSH
80264: LD_INT 1
80266: PPUSH
80267: LD_VAR 0 1
80271: PPUSH
80272: CALL_OW 12
80276: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80277: LD_ADDR_VAR 0 2
80281: PUSH
80282: LD_VAR 0 2
80286: PPUSH
80287: LD_VAR 0 2
80291: PUSH
80292: LD_INT 1
80294: PLUS
80295: PPUSH
80296: LD_VAR 0 1
80300: PUSH
80301: LD_VAR 0 4
80305: ARRAY
80306: PPUSH
80307: CALL_OW 2
80311: ST_TO_ADDR
// array := Delete ( array , index ) ;
80312: LD_ADDR_VAR 0 1
80316: PUSH
80317: LD_VAR 0 1
80321: PPUSH
80322: LD_VAR 0 4
80326: PPUSH
80327: CALL_OW 3
80331: ST_TO_ADDR
// end ;
80332: GO 80256
80334: POP
80335: POP
// end ;
80336: LD_VAR 0 2
80340: RET
// export function GetBaseMaterials ( base ) ; begin
80341: LD_INT 0
80343: PPUSH
// result := [ 0 , 0 , 0 ] ;
80344: LD_ADDR_VAR 0 2
80348: PUSH
80349: LD_INT 0
80351: PUSH
80352: LD_INT 0
80354: PUSH
80355: LD_INT 0
80357: PUSH
80358: EMPTY
80359: LIST
80360: LIST
80361: LIST
80362: ST_TO_ADDR
// if not base then
80363: LD_VAR 0 1
80367: NOT
80368: IFFALSE 80372
// exit ;
80370: GO 80421
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80372: LD_ADDR_VAR 0 2
80376: PUSH
80377: LD_VAR 0 1
80381: PPUSH
80382: LD_INT 1
80384: PPUSH
80385: CALL_OW 275
80389: PUSH
80390: LD_VAR 0 1
80394: PPUSH
80395: LD_INT 2
80397: PPUSH
80398: CALL_OW 275
80402: PUSH
80403: LD_VAR 0 1
80407: PPUSH
80408: LD_INT 3
80410: PPUSH
80411: CALL_OW 275
80415: PUSH
80416: EMPTY
80417: LIST
80418: LIST
80419: LIST
80420: ST_TO_ADDR
// end ;
80421: LD_VAR 0 2
80425: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80426: LD_INT 0
80428: PPUSH
80429: PPUSH
// result := array ;
80430: LD_ADDR_VAR 0 3
80434: PUSH
80435: LD_VAR 0 1
80439: ST_TO_ADDR
// if size > 0 then
80440: LD_VAR 0 2
80444: PUSH
80445: LD_INT 0
80447: GREATER
80448: IFFALSE 80494
// for i := array downto size do
80450: LD_ADDR_VAR 0 4
80454: PUSH
80455: DOUBLE
80456: LD_VAR 0 1
80460: INC
80461: ST_TO_ADDR
80462: LD_VAR 0 2
80466: PUSH
80467: FOR_DOWNTO
80468: IFFALSE 80492
// result := Delete ( result , result ) ;
80470: LD_ADDR_VAR 0 3
80474: PUSH
80475: LD_VAR 0 3
80479: PPUSH
80480: LD_VAR 0 3
80484: PPUSH
80485: CALL_OW 3
80489: ST_TO_ADDR
80490: GO 80467
80492: POP
80493: POP
// end ;
80494: LD_VAR 0 3
80498: RET
// export function ComExit ( unit ) ; var tmp ; begin
80499: LD_INT 0
80501: PPUSH
80502: PPUSH
// if not IsInUnit ( unit ) then
80503: LD_VAR 0 1
80507: PPUSH
80508: CALL_OW 310
80512: NOT
80513: IFFALSE 80517
// exit ;
80515: GO 80577
// tmp := IsInUnit ( unit ) ;
80517: LD_ADDR_VAR 0 3
80521: PUSH
80522: LD_VAR 0 1
80526: PPUSH
80527: CALL_OW 310
80531: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80532: LD_VAR 0 3
80536: PPUSH
80537: CALL_OW 247
80541: PUSH
80542: LD_INT 2
80544: EQUAL
80545: IFFALSE 80558
// ComExitVehicle ( unit ) else
80547: LD_VAR 0 1
80551: PPUSH
80552: CALL_OW 121
80556: GO 80567
// ComExitBuilding ( unit ) ;
80558: LD_VAR 0 1
80562: PPUSH
80563: CALL_OW 122
// result := tmp ;
80567: LD_ADDR_VAR 0 2
80571: PUSH
80572: LD_VAR 0 3
80576: ST_TO_ADDR
// end ;
80577: LD_VAR 0 2
80581: RET
// export function ResetHc ; begin
80582: LD_INT 0
80584: PPUSH
// InitHc ;
80585: CALL_OW 19
// hc_importance := 0 ;
80589: LD_ADDR_OWVAR 32
80593: PUSH
80594: LD_INT 0
80596: ST_TO_ADDR
// end ;
80597: LD_VAR 0 1
80601: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80602: LD_INT 0
80604: PPUSH
80605: PPUSH
80606: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80607: LD_ADDR_VAR 0 6
80611: PUSH
80612: LD_VAR 0 1
80616: PUSH
80617: LD_VAR 0 3
80621: PLUS
80622: PUSH
80623: LD_INT 2
80625: DIV
80626: ST_TO_ADDR
// if _x < 0 then
80627: LD_VAR 0 6
80631: PUSH
80632: LD_INT 0
80634: LESS
80635: IFFALSE 80652
// _x := _x * - 1 ;
80637: LD_ADDR_VAR 0 6
80641: PUSH
80642: LD_VAR 0 6
80646: PUSH
80647: LD_INT 1
80649: NEG
80650: MUL
80651: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80652: LD_ADDR_VAR 0 7
80656: PUSH
80657: LD_VAR 0 2
80661: PUSH
80662: LD_VAR 0 4
80666: PLUS
80667: PUSH
80668: LD_INT 2
80670: DIV
80671: ST_TO_ADDR
// if _y < 0 then
80672: LD_VAR 0 7
80676: PUSH
80677: LD_INT 0
80679: LESS
80680: IFFALSE 80697
// _y := _y * - 1 ;
80682: LD_ADDR_VAR 0 7
80686: PUSH
80687: LD_VAR 0 7
80691: PUSH
80692: LD_INT 1
80694: NEG
80695: MUL
80696: ST_TO_ADDR
// result := [ _x , _y ] ;
80697: LD_ADDR_VAR 0 5
80701: PUSH
80702: LD_VAR 0 6
80706: PUSH
80707: LD_VAR 0 7
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: ST_TO_ADDR
// end ;
80716: LD_VAR 0 5
80720: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80721: LD_INT 0
80723: PPUSH
80724: PPUSH
80725: PPUSH
80726: PPUSH
// task := GetTaskList ( unit ) ;
80727: LD_ADDR_VAR 0 7
80731: PUSH
80732: LD_VAR 0 1
80736: PPUSH
80737: CALL_OW 437
80741: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80742: LD_VAR 0 7
80746: NOT
80747: PUSH
80748: LD_VAR 0 1
80752: PPUSH
80753: LD_VAR 0 2
80757: PPUSH
80758: CALL_OW 308
80762: NOT
80763: AND
80764: IFFALSE 80768
// exit ;
80766: GO 80886
// if IsInArea ( unit , area ) then
80768: LD_VAR 0 1
80772: PPUSH
80773: LD_VAR 0 2
80777: PPUSH
80778: CALL_OW 308
80782: IFFALSE 80800
// begin ComMoveToArea ( unit , goAway ) ;
80784: LD_VAR 0 1
80788: PPUSH
80789: LD_VAR 0 3
80793: PPUSH
80794: CALL_OW 113
// exit ;
80798: GO 80886
// end ; if task [ 1 ] [ 1 ] <> M then
80800: LD_VAR 0 7
80804: PUSH
80805: LD_INT 1
80807: ARRAY
80808: PUSH
80809: LD_INT 1
80811: ARRAY
80812: PUSH
80813: LD_STRING M
80815: NONEQUAL
80816: IFFALSE 80820
// exit ;
80818: GO 80886
// x := task [ 1 ] [ 2 ] ;
80820: LD_ADDR_VAR 0 5
80824: PUSH
80825: LD_VAR 0 7
80829: PUSH
80830: LD_INT 1
80832: ARRAY
80833: PUSH
80834: LD_INT 2
80836: ARRAY
80837: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80838: LD_ADDR_VAR 0 6
80842: PUSH
80843: LD_VAR 0 7
80847: PUSH
80848: LD_INT 1
80850: ARRAY
80851: PUSH
80852: LD_INT 3
80854: ARRAY
80855: ST_TO_ADDR
// if InArea ( x , y , area ) then
80856: LD_VAR 0 5
80860: PPUSH
80861: LD_VAR 0 6
80865: PPUSH
80866: LD_VAR 0 2
80870: PPUSH
80871: CALL_OW 309
80875: IFFALSE 80886
// ComStop ( unit ) ;
80877: LD_VAR 0 1
80881: PPUSH
80882: CALL_OW 141
// end ;
80886: LD_VAR 0 4
80890: RET
// export function Abs ( value ) ; begin
80891: LD_INT 0
80893: PPUSH
// result := value ;
80894: LD_ADDR_VAR 0 2
80898: PUSH
80899: LD_VAR 0 1
80903: ST_TO_ADDR
// if value < 0 then
80904: LD_VAR 0 1
80908: PUSH
80909: LD_INT 0
80911: LESS
80912: IFFALSE 80929
// result := value * - 1 ;
80914: LD_ADDR_VAR 0 2
80918: PUSH
80919: LD_VAR 0 1
80923: PUSH
80924: LD_INT 1
80926: NEG
80927: MUL
80928: ST_TO_ADDR
// end ;
80929: LD_VAR 0 2
80933: RET
