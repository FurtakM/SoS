// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9069 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 74357 0 9
// Action ;
  79: CALL 15289 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 40200 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 40200 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 40200 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 40200 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 40200 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 40200 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 40200 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 77668 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 40200 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 40200 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 77668 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 40200 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 40200 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 77668 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 40200 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 77668 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 40200 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 77668 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 40200 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 77668 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 40200 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 77668 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 40200 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 77668 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 77668 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 48306 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 75314 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 53434 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 53434 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 53434 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 53434 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 40200 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 40200 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 40200 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 40200 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 40200 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 40200 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 40200 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 40200 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 40200 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 40200 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; squad := [ ] ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: EMPTY
5018: ST_TO_ADDR
// tmp := [ ] ;
5019: LD_ADDR_VAR 0 6
5023: PUSH
5024: EMPTY
5025: ST_TO_ADDR
// tmpVehs := [ ] ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: EMPTY
5032: ST_TO_ADDR
// uc_side := 1 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// uc_nation := 1 ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if vehicles then
5049: LD_VAR 0 8
5053: IFFALSE 5187
// begin for i := 1 to vehicles do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_VAR 0 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5185
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5073: LD_ADDR_OWVAR 37
5077: PUSH
5078: LD_VAR 0 8
5082: PUSH
5083: LD_VAR 0 2
5087: ARRAY
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5093: LD_ADDR_OWVAR 39
5097: PUSH
5098: LD_VAR 0 8
5102: PUSH
5103: LD_VAR 0 2
5107: ARRAY
5108: PUSH
5109: LD_INT 2
5111: ARRAY
5112: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5113: LD_ADDR_OWVAR 38
5117: PUSH
5118: LD_VAR 0 8
5122: PUSH
5123: LD_VAR 0 2
5127: ARRAY
5128: PUSH
5129: LD_INT 3
5131: ARRAY
5132: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5133: LD_ADDR_OWVAR 40
5137: PUSH
5138: LD_VAR 0 8
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_INT 4
5151: ARRAY
5152: ST_TO_ADDR
// veh := CreateVehicle ;
5153: LD_ADDR_VAR 0 9
5157: PUSH
5158: CALL_OW 45
5162: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5163: LD_ADDR_VAR 0 7
5167: PUSH
5168: LD_VAR 0 7
5172: PPUSH
5173: LD_VAR 0 9
5177: PPUSH
5178: CALL 77668 0 2
5182: ST_TO_ADDR
// end ;
5183: GO 5070
5185: POP
5186: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5187: LD_ADDR_EXP 14
5191: PUSH
5192: LD_STRING JMM
5194: PPUSH
5195: LD_EXP 1
5199: NOT
5200: PPUSH
5201: LD_VAR 0 10
5205: PPUSH
5206: CALL 40200 0 3
5210: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5211: LD_EXP 13
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: IN
5226: PUSH
5227: LD_EXP 15
5231: NOT
5232: AND
5233: IFFALSE 5294
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5235: LD_ADDR_EXP 15
5239: PUSH
5240: LD_STRING Brown
5242: PPUSH
5243: LD_EXP 1
5247: NOT
5248: PPUSH
5249: LD_VAR 0 10
5253: PPUSH
5254: CALL 40200 0 3
5258: ST_TO_ADDR
// if Brown then
5259: LD_EXP 15
5263: IFFALSE 5294
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_VAR 0 6
5274: PPUSH
5275: LD_VAR 0 6
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: PPUSH
5284: LD_EXP 15
5288: PPUSH
5289: CALL_OW 1
5293: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5294: LD_EXP 13
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: IN
5309: PUSH
5310: LD_EXP 16
5314: NOT
5315: AND
5316: IFFALSE 5377
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5318: LD_ADDR_EXP 16
5322: PUSH
5323: LD_STRING Donaldson
5325: PPUSH
5326: LD_EXP 1
5330: NOT
5331: PPUSH
5332: LD_VAR 0 10
5336: PPUSH
5337: CALL 40200 0 3
5341: ST_TO_ADDR
// if Donaldson then
5342: LD_EXP 16
5346: IFFALSE 5377
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_VAR 0 6
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: PPUSH
5367: LD_EXP 16
5371: PPUSH
5372: CALL_OW 1
5376: ST_TO_ADDR
// end ; if not Bobby then
5377: LD_EXP 17
5381: NOT
5382: IFFALSE 5440
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5384: LD_ADDR_EXP 17
5388: PUSH
5389: LD_STRING Bobby
5391: PPUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_VAR 0 10
5399: PPUSH
5400: CALL 40200 0 3
5404: ST_TO_ADDR
// if Bobby then
5405: LD_EXP 17
5409: IFFALSE 5440
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: LD_VAR 0 6
5420: PPUSH
5421: LD_VAR 0 6
5425: PUSH
5426: LD_INT 1
5428: PLUS
5429: PPUSH
5430: LD_EXP 17
5434: PPUSH
5435: CALL_OW 1
5439: ST_TO_ADDR
// end ; if not Cyrus then
5440: LD_EXP 18
5444: NOT
5445: IFFALSE 5503
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5447: LD_ADDR_EXP 18
5451: PUSH
5452: LD_STRING Cyrus
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: LD_VAR 0 10
5462: PPUSH
5463: CALL 40200 0 3
5467: ST_TO_ADDR
// if Cyrus then
5468: LD_EXP 18
5472: IFFALSE 5503
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5474: LD_ADDR_VAR 0 6
5478: PUSH
5479: LD_VAR 0 6
5483: PPUSH
5484: LD_VAR 0 6
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: PPUSH
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 1
5502: ST_TO_ADDR
// end ; if not Lisa then
5503: LD_EXP 19
5507: NOT
5508: IFFALSE 5569
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5510: LD_ADDR_EXP 19
5514: PUSH
5515: LD_STRING Lisa
5517: PPUSH
5518: LD_EXP 1
5522: NOT
5523: PPUSH
5524: LD_VAR 0 10
5528: PPUSH
5529: CALL 40200 0 3
5533: ST_TO_ADDR
// if Lisa then
5534: LD_EXP 19
5538: IFFALSE 5569
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5540: LD_ADDR_VAR 0 6
5544: PUSH
5545: LD_VAR 0 6
5549: PPUSH
5550: LD_VAR 0 6
5554: PUSH
5555: LD_INT 1
5557: PLUS
5558: PPUSH
5559: LD_EXP 19
5563: PPUSH
5564: CALL_OW 1
5568: ST_TO_ADDR
// end ; if not Frank then
5569: LD_EXP 20
5573: NOT
5574: IFFALSE 5635
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5576: LD_ADDR_EXP 20
5580: PUSH
5581: LD_STRING Frank
5583: PPUSH
5584: LD_EXP 1
5588: NOT
5589: PPUSH
5590: LD_VAR 0 10
5594: PPUSH
5595: CALL 40200 0 3
5599: ST_TO_ADDR
// if Frank then
5600: LD_EXP 20
5604: IFFALSE 5635
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 6
5615: PPUSH
5616: LD_VAR 0 6
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PPUSH
5625: LD_EXP 20
5629: PPUSH
5630: CALL_OW 1
5634: ST_TO_ADDR
// end ; if not Kikuchi then
5635: LD_EXP 22
5639: NOT
5640: IFFALSE 5698
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5642: LD_ADDR_EXP 22
5646: PUSH
5647: LD_STRING Kikuchi
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_VAR 0 10
5657: PPUSH
5658: CALL 40200 0 3
5662: ST_TO_ADDR
// if Kikuchi then
5663: LD_EXP 22
5667: IFFALSE 5698
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 1
5686: PLUS
5687: PPUSH
5688: LD_EXP 22
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; if not Gladstone then
5698: LD_EXP 21
5702: NOT
5703: IFFALSE 5764
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5705: LD_ADDR_EXP 21
5709: PUSH
5710: LD_STRING Gladstone
5712: PPUSH
5713: LD_EXP 1
5717: NOT
5718: PPUSH
5719: LD_VAR 0 10
5723: PPUSH
5724: CALL 40200 0 3
5728: ST_TO_ADDR
// if Gladstone then
5729: LD_EXP 21
5733: IFFALSE 5764
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_VAR 0 6
5744: PPUSH
5745: LD_VAR 0 6
5749: PUSH
5750: LD_INT 1
5752: PLUS
5753: PPUSH
5754: LD_EXP 21
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// end ; if not Khatam then
5764: LD_EXP 23
5768: NOT
5769: IFFALSE 5827
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5771: LD_ADDR_EXP 23
5775: PUSH
5776: LD_STRING Khatam
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_VAR 0 10
5786: PPUSH
5787: CALL 40200 0 3
5791: ST_TO_ADDR
// if Khatam then
5792: LD_EXP 23
5796: IFFALSE 5827
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5798: LD_ADDR_VAR 0 6
5802: PUSH
5803: LD_VAR 0 6
5807: PPUSH
5808: LD_VAR 0 6
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_EXP 23
5821: PPUSH
5822: CALL_OW 1
5826: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: LD_STRING 07c_others
5834: PPUSH
5835: CALL_OW 31
5839: ST_TO_ADDR
// squad := others ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: ST_TO_ADDR
// if others then
5850: LD_VAR 0 4
5854: IFFALSE 5905
// for i in others do
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_VAR 0 4
5865: PUSH
5866: FOR_IN
5867: IFFALSE 5903
// begin SetTag ( i , 108 ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_INT 108
5876: PPUSH
5877: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: PPUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: CALL 77668 0 2
5900: ST_TO_ADDR
// end ;
5901: GO 5866
5903: POP
5904: POP
// if tmp then
5905: LD_VAR 0 6
5909: IFFALSE 6144
// begin tmp := Join ( tmp , JMM ) ;
5911: LD_ADDR_VAR 0 6
5915: PUSH
5916: LD_VAR 0 6
5920: PPUSH
5921: LD_EXP 14
5925: PPUSH
5926: CALL 77668 0 2
5930: ST_TO_ADDR
// for i in tmp do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 6
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6142
// begin SetDir ( i , dir ) ;
5944: LD_VAR 0 2
5948: PPUSH
5949: LD_VAR 0 12
5953: PPUSH
5954: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 257
5967: PUSH
5968: LD_INT 3
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 7
5976: AND
5977: IFFALSE 6067
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5979: LD_VAR 0 7
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5995: LD_VAR 0 7
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 14
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_VAR 0 14
6017: PUSH
6018: LD_INT 2
6020: ARRAY
6021: PPUSH
6022: LD_INT 0
6024: PPUSH
6025: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_VAR 0 7
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6047: LD_ADDR_VAR 0 7
6051: PUSH
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 3
6064: ST_TO_ADDR
// end else
6065: GO 6084
// PlaceUnitArea ( i , area , false ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 11
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6084: LD_VAR 0 2
6088: PPUSH
6089: LD_VAR 0 13
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: PPUSH
6098: LD_VAR 0 13
6102: PUSH
6103: LD_INT 2
6105: ARRAY
6106: PPUSH
6107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6118: LD_VAR 0 11
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: NOT
6138: IFFALSE 6111
// end ;
6140: GO 5941
6142: POP
6143: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 305
6153: NOT
6154: PUSH
6155: LD_EXP 14
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: OR
6166: IFFALSE 6198
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6168: LD_EXP 14
6172: PPUSH
6173: LD_VAR 0 14
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 14
6186: PUSH
6187: LD_INT 2
6189: ARRAY
6190: PPUSH
6191: LD_INT 0
6193: PPUSH
6194: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_VAR 0 13
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: PPUSH
6212: LD_VAR 0 13
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: PPUSH
6221: CALL_OW 111
// jmmArrival := true ;
6225: LD_ADDR_EXP 8
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 1
6237: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6245: LD_INT 1
6247: PPUSH
6248: LD_INT 17
6250: PPUSH
6251: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6255: LD_INT 2
6257: PPUSH
6258: LD_INT 17
6260: PPUSH
6261: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: LD_INT 6
6272: PPUSH
6273: LD_INT 58
6275: PUSH
6276: EMPTY
6277: LIST
6278: PPUSH
6279: CALL_OW 70
6283: ST_TO_ADDR
// if tmp then
6284: LD_VAR 0 5
6288: IFFALSE 6316
// for i in tmp do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 5
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6314
// RemoveUnit ( i ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: CALL_OW 64
6312: GO 6300
6314: POP
6315: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6316: LD_ADDR_VAR 0 5
6320: PUSH
6321: LD_INT 6
6323: PPUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 3
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 70
6345: ST_TO_ADDR
// if tmp then
6346: LD_VAR 0 5
6350: IFFALSE 6374
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6352: LD_VAR 0 5
6356: PPUSH
6357: LD_INT 33
6359: PPUSH
6360: LD_INT 39
6362: PPUSH
6363: CALL_OW 111
// wait ( 0 0$3 ) ;
6367: LD_INT 105
6369: PPUSH
6370: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6374: LD_INT 70
6376: PPUSH
6377: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6381: LD_INT 6
6383: PPUSH
6384: LD_INT 50
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 70
6394: NOT
6395: IFFALSE 6374
// uc_side := 4 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 4
6404: ST_TO_ADDR
// uc_nation := 1 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6413: LD_ADDR_EXP 28
6417: PUSH
6418: LD_STRING Sikorski
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_STRING 
6426: PPUSH
6427: CALL 40200 0 3
6431: ST_TO_ADDR
// vc_engine := engine_combustion ;
6432: LD_ADDR_OWVAR 39
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// vc_control := control_manual ;
6440: LD_ADDR_OWVAR 38
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6448: LD_ADDR_OWVAR 40
6452: PUSH
6453: LD_INT 6
6455: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6456: LD_ADDR_OWVAR 37
6460: PUSH
6461: LD_INT 4
6463: ST_TO_ADDR
// veh := CreateVehicle ;
6464: LD_ADDR_VAR 0 4
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6474: LD_VAR 0 4
6478: PPUSH
6479: LD_INT 3
6481: PPUSH
6482: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6486: LD_VAR 0 4
6490: PPUSH
6491: LD_INT 4
6493: NEG
6494: PPUSH
6495: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 70
6506: PPUSH
6507: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 6
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6526: LD_EXP 28
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6540: LD_EXP 28
6544: PPUSH
6545: LD_INT 37
6547: PPUSH
6548: LD_INT 30
6550: PPUSH
6551: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6555: LD_INT 10
6557: PPUSH
6558: CALL_OW 67
// InitHc_All ( ) ;
6562: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 3
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_OWVAR 67
6598: ARRAY
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6736
// begin repeat wait ( 0 0$2 ) ;
6603: LD_INT 70
6605: PPUSH
6606: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6610: LD_INT 6
6612: PPUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: NOT
6624: IFFALSE 6603
// uc_side := 4 ;
6626: LD_ADDR_OWVAR 20
6630: PUSH
6631: LD_INT 4
6633: ST_TO_ADDR
// uc_nation := 1 ;
6634: LD_ADDR_OWVAR 21
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 4
6650: PPUSH
6651: LD_INT 7
6653: PPUSH
6654: CALL_OW 12
6658: PPUSH
6659: CALL_OW 380
// un := CreateHuman ;
6663: LD_ADDR_VAR 0 3
6667: PUSH
6668: CALL_OW 44
6672: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 233
// SetTag ( un , 101 ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 101
6692: PPUSH
6693: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6697: LD_VAR 0 3
6701: PPUSH
6702: LD_INT 6
6704: PPUSH
6705: LD_INT 0
6707: PPUSH
6708: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6712: LD_VAR 0 3
6716: PPUSH
6717: LD_INT 25
6719: PPUSH
6720: LD_INT 27
6722: PPUSH
6723: CALL_OW 111
// wait ( 0 0$1 ) ;
6727: LD_INT 35
6729: PPUSH
6730: CALL_OW 67
// end ;
6734: GO 6600
6736: POP
6737: POP
// repeat wait ( 0 0$2 ) ;
6738: LD_INT 70
6740: PPUSH
6741: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PUSH
6779: FOR_IN
6780: IFFALSE 6843
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_INT 17
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 58
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: LD_INT 33
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PPUSH
6837: CALL_OW 115
6841: GO 6779
6843: POP
6844: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6845: LD_INT 17
6847: PPUSH
6848: LD_INT 22
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: LD_INT 58
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: LD_INT 33
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 70
6890: NOT
6891: IFFALSE 6738
// for i := 1 to 2 do
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_INT 2
6905: PUSH
6906: FOR_TO
6907: IFFALSE 7019
// begin uc_side := 4 ;
6909: LD_ADDR_OWVAR 20
6913: PUSH
6914: LD_INT 4
6916: ST_TO_ADDR
// uc_nation := 1 ;
6917: LD_ADDR_OWVAR 21
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 4
6930: PPUSH
6931: LD_INT 3
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 380
// un := CreateHuman ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: CALL_OW 44
6955: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 233
// SetTag ( un , 101 ) ;
6968: LD_VAR 0 3
6972: PPUSH
6973: LD_INT 101
6975: PPUSH
6976: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_INT 6
6987: PPUSH
6988: LD_INT 0
6990: PPUSH
6991: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_INT 25
7002: PPUSH
7003: LD_INT 27
7005: PPUSH
7006: CALL_OW 111
// wait ( 0 0$1 ) ;
7010: LD_INT 35
7012: PPUSH
7013: CALL_OW 67
// end ;
7017: GO 6906
7019: POP
7020: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: DOUBLE
7027: LD_INT 1
7029: DEC
7030: ST_TO_ADDR
7031: LD_INT 5
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7321
// begin repeat wait ( 0 0$2 ) ;
7058: LD_INT 70
7060: PPUSH
7061: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7065: LD_INT 6
7067: PPUSH
7068: LD_INT 50
7070: PUSH
7071: EMPTY
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: NOT
7079: IFFALSE 7058
// uc_side := 4 ;
7081: LD_ADDR_OWVAR 20
7085: PUSH
7086: LD_INT 4
7088: ST_TO_ADDR
// uc_nation := 1 ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// vc_engine := engine_combustion ;
7097: LD_ADDR_OWVAR 39
7101: PUSH
7102: LD_INT 1
7104: ST_TO_ADDR
// vc_control := control_manual ;
7105: LD_ADDR_OWVAR 38
7109: PUSH
7110: LD_INT 1
7112: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7113: LD_ADDR_OWVAR 40
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 7
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 4
7143: MOD
7144: PUSH
7145: LD_INT 1
7147: PLUS
7148: ARRAY
7149: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7150: LD_ADDR_OWVAR 37
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: LD_INT 4
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_VAR 0 2
7177: PUSH
7178: LD_INT 4
7180: MOD
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: ST_TO_ADDR
// veh := CreateVehicle ;
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: CALL_OW 45
7196: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7197: LD_VAR 0 4
7201: PPUSH
7202: LD_INT 3
7204: PPUSH
7205: CALL_OW 233
// SetTag ( veh , 0 ) ;
7209: LD_VAR 0 4
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 70
7228: PPUSH
7229: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7233: LD_VAR 0 4
7237: PPUSH
7238: LD_INT 6
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// InitHc ;
7248: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 4
7260: PPUSH
7261: LD_INT 7
7263: PPUSH
7264: CALL_OW 12
7268: PPUSH
7269: CALL_OW 380
// un := CreateHuman ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: CALL_OW 44
7282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7283: LD_VAR 0 3
7287: PPUSH
7288: LD_VAR 0 4
7292: PPUSH
7293: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_INT 30
7304: PPUSH
7305: LD_INT 22
7307: PPUSH
7308: CALL_OW 111
// wait ( 0 0$3 ) ;
7312: LD_INT 105
7314: PPUSH
7315: CALL_OW 67
// end ;
7319: GO 7055
7321: POP
7322: POP
// wait ( 0 0$10 ) ;
7323: LD_INT 350
7325: PPUSH
7326: CALL_OW 67
// end ;
7330: LD_VAR 0 1
7334: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// gammaBase := [ ] ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: EMPTY
7347: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 50
7380: PUSH
7381: EMPTY
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 70
7393: ST_TO_ADDR
// for i in buildings do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 5
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7842
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 266
7416: PUSH
7417: LD_INT 6
7419: PUSH
7420: LD_INT 7
7422: PUSH
7423: LD_INT 8
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: IN
7431: IFFALSE 7545
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7433: LD_ADDR_VAR 0 4
7437: PUSH
7438: LD_VAR 0 4
7442: PUSH
7443: LD_VAR 0 3
7447: PPUSH
7448: CALL_OW 266
7452: PUSH
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 250
7462: PUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: CALL_OW 251
7472: PUSH
7473: LD_VAR 0 3
7477: PPUSH
7478: CALL_OW 254
7482: PUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: CALL_OW 267
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 248
7502: PUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 268
7515: PUSH
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: CALL_OW 268
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: ADD
7542: ST_TO_ADDR
7543: GO 7840
// if GetBType ( i ) = b_bunker then
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 266
7554: PUSH
7555: LD_INT 32
7557: EQUAL
7558: IFFALSE 7655
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7560: LD_ADDR_VAR 0 4
7564: PUSH
7565: LD_VAR 0 4
7569: PUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: CALL_OW 266
7579: PUSH
7580: LD_VAR 0 3
7584: PPUSH
7585: CALL_OW 250
7589: PUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 251
7599: PUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL_OW 254
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: CALL_OW 267
7619: PUSH
7620: LD_VAR 0 3
7624: PPUSH
7625: CALL_OW 248
7629: PUSH
7630: LD_VAR 0 3
7634: PPUSH
7635: CALL_OW 269
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: ADD
7652: ST_TO_ADDR
7653: GO 7840
// if GetBType ( i ) = b_factory then
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 266
7664: PUSH
7665: LD_INT 3
7667: EQUAL
7668: IFFALSE 7758
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_VAR 0 3
7697: PPUSH
7698: CALL_OW 250
7702: PUSH
7703: LD_VAR 0 3
7707: PPUSH
7708: CALL_OW 251
7712: PUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 254
7722: PUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 267
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 248
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 2
7755: ST_TO_ADDR
7756: GO 7840
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 266
7777: PUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 250
7787: PUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: CALL_OW 251
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 254
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 267
7817: PUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 248
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: ADD
7839: ST_TO_ADDR
// end ;
7840: GO 7404
7842: POP
7843: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7844: LD_VAR 0 4
7848: PPUSH
7849: LD_STRING 08_GammaBase
7851: PPUSH
7852: CALL_OW 39
// end ;
7856: LD_VAR 0 2
7860: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 17
7877: PPUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 70
7931: ST_TO_ADDR
// if tmp then
7932: LD_VAR 0 3
7936: IFFALSE 8055
// begin for i in tmp do
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_VAR 0 3
7947: PUSH
7948: FOR_IN
7949: IFFALSE 7980
// begin SetSide ( i , 4 ) ;
7951: LD_VAR 0 2
7955: PPUSH
7956: LD_INT 4
7958: PPUSH
7959: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_INT 42
7970: PPUSH
7971: LD_INT 22
7973: PPUSH
7974: CALL_OW 111
// end ;
7978: GO 7948
7980: POP
7981: POP
// repeat wait ( 0 0$3 ) ;
7982: LD_INT 105
7984: PPUSH
7985: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 51
7996: PPUSH
7997: LD_INT 16
7999: PPUSH
8000: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_INT 95
8011: PUSH
8012: LD_INT 17
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 72
8023: NOT
8024: IFFALSE 7982
// for i in tmp do
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8053
// SetSide ( i , 1 ) ;
8039: LD_VAR 0 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 235
8051: GO 8036
8053: POP
8054: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 17
8062: PPUSH
8063: LD_INT 22
8065: PUSH
8066: LD_INT 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: ST_TO_ADDR
// if tmp then
8092: LD_VAR 0 3
8096: IFFALSE 8120
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_INT 40
8105: PPUSH
8106: LD_INT 32
8108: PPUSH
8109: CALL_OW 111
// wait ( 0 0$3 ) ;
8113: LD_INT 105
8115: PPUSH
8116: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8120: LD_ADDR_VAR 0 3
8124: PUSH
8125: LD_INT 17
8127: PPUSH
8128: LD_INT 22
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// if tmp then
8175: LD_VAR 0 3
8179: IFFALSE 8327
// begin repeat wait ( 0 0$1 ) ;
8181: LD_INT 35
8183: PPUSH
8184: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 17
8195: PPUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: FOR_IN
8296: IFFALSE 8318
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 115
8316: GO 8295
8318: POP
8319: POP
// until not tmp ;
8320: LD_VAR 0 3
8324: NOT
8325: IFFALSE 8181
// end ; wait ( 0 0$2 ) ;
8327: LD_INT 70
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8334: LD_ADDR_VAR 0 3
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 4
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8354: LD_VAR 0 3
8358: PPUSH
8359: LD_INT 52
8361: PPUSH
8362: LD_INT 54
8364: PPUSH
8365: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8369: LD_VAR 0 3
8373: PPUSH
8374: LD_INT 175
8376: PPUSH
8377: CALL_OW 202
// wait ( 0 0$5 ) ;
8381: LD_INT 175
8383: PPUSH
8384: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 66 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_INT 120
8395: PUSH
8396: LD_INT 101
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 72
8407: PPUSH
8408: LD_INT 42
8410: PPUSH
8411: LD_INT 66
8413: PPUSH
8414: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_INT 120
8425: PUSH
8426: LD_INT 101
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 72
8437: PPUSH
8438: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 120
8449: PUSH
8450: LD_INT 101
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 72
8475: PPUSH
8476: LD_INT 52
8478: PPUSH
8479: LD_INT 93
8481: PPUSH
8482: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8486: LD_VAR 0 3
8490: PPUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 101
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 4
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 72
8519: PPUSH
8520: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8524: LD_ADDR_VAR 0 7
8528: PUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8549: LD_ADDR_VAR 0 4
8553: PUSH
8554: LD_INT 81
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_INT 57
8576: PUSH
8577: LD_INT 66
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 62
8586: PUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8598: LD_INT 35
8600: PPUSH
8601: CALL_OW 67
// for i in filter do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 7
8614: PUSH
8615: FOR_IN
8616: IFFALSE 9055
// begin if IsDead ( i ) then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 301
8627: IFFALSE 8647
// begin filter := filter diff i ;
8629: LD_ADDR_VAR 0 7
8633: PUSH
8634: LD_VAR 0 7
8638: PUSH
8639: LD_VAR 0 2
8643: DIFF
8644: ST_TO_ADDR
// continue ;
8645: GO 8615
// end ; tmp := IsDrivenBy ( i ) ;
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 311
8661: ST_TO_ADDR
// if not tmp then
8662: LD_VAR 0 3
8666: NOT
8667: IFFALSE 8671
// continue ;
8669: GO 8615
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 261
8680: PUSH
8681: LD_INT 30
8683: GREATER
8684: PUSH
8685: LD_VAR 0 2
8689: PPUSH
8690: CALL_OW 110
8694: PUSH
8695: LD_INT 2
8697: EQUAL
8698: AND
8699: IFFALSE 8715
// SetTag ( i , 0 ) else
8701: LD_VAR 0 2
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 109
8713: GO 8759
// if GetTag ( i ) = 2 then
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 110
8724: PUSH
8725: LD_INT 2
8727: EQUAL
8728: IFFALSE 8759
// begin ComMoveXY ( i , 52 , 50 ) ;
8730: LD_VAR 0 2
8734: PPUSH
8735: LD_INT 52
8737: PPUSH
8738: LD_INT 50
8740: PPUSH
8741: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8745: LD_VAR 0 2
8749: PPUSH
8750: LD_EXP 31
8754: PPUSH
8755: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 256
8768: PUSH
8769: LD_INT 600
8771: GREATEREQUAL
8772: PUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 110
8782: NOT
8783: AND
8784: IFFALSE 8810
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8786: LD_VAR 0 2
8790: PPUSH
8791: LD_VAR 0 4
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 74
8805: PPUSH
8806: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8810: LD_VAR 0 2
8814: PPUSH
8815: CALL_OW 256
8819: PUSH
8820: LD_INT 600
8822: LESS
8823: PUSH
8824: LD_VAR 0 2
8828: PPUSH
8829: CALL_OW 110
8833: NOT
8834: AND
8835: IFFALSE 8911
// begin SetTag ( i , 1 ) ;
8837: LD_VAR 0 2
8841: PPUSH
8842: LD_INT 1
8844: PPUSH
8845: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8849: LD_ADDR_VAR 0 6
8853: PUSH
8854: LD_VAR 0 2
8858: PPUSH
8859: LD_VAR 0 5
8863: PPUSH
8864: CALL 81012 0 2
8868: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8869: LD_VAR 0 2
8873: PPUSH
8874: LD_VAR 0 6
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_INT 40
8903: PPUSH
8904: LD_INT 49
8906: PPUSH
8907: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8911: LD_VAR 0 2
8915: PPUSH
8916: CALL_OW 110
8920: PUSH
8921: LD_INT 1
8923: EQUAL
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 40
8932: PPUSH
8933: LD_INT 49
8935: PPUSH
8936: CALL_OW 297
8940: PUSH
8941: LD_INT 9
8943: LESS
8944: AND
8945: PUSH
8946: LD_VAR 0 3
8950: AND
8951: IFFALSE 9053
// begin ComExitVehicle ( tmp ) ;
8953: LD_VAR 0 3
8957: PPUSH
8958: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_VAR 0 2
8971: PPUSH
8972: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8976: LD_INT 35
8978: PPUSH
8979: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 256
8992: PUSH
8993: LD_INT 1000
8995: EQUAL
8996: IFFALSE 8976
// ComEnterUnit ( tmp , i ) ;
8998: LD_VAR 0 3
9002: PPUSH
9003: LD_VAR 0 2
9007: PPUSH
9008: CALL_OW 120
// if GetFuel ( i ) <= 40 then
9012: LD_VAR 0 2
9016: PPUSH
9017: CALL_OW 261
9021: PUSH
9022: LD_INT 40
9024: LESSEQUAL
9025: IFFALSE 9041
// SetTag ( i , 2 ) else
9027: LD_VAR 0 2
9031: PPUSH
9032: LD_INT 2
9034: PPUSH
9035: CALL_OW 109
9039: GO 9053
// SetTag ( i , 0 ) ;
9041: LD_VAR 0 2
9045: PPUSH
9046: LD_INT 0
9048: PPUSH
9049: CALL_OW 109
// end ; end ;
9053: GO 8615
9055: POP
9056: POP
// until not filter ;
9057: LD_VAR 0 7
9061: NOT
9062: IFFALSE 8598
// end ; end_of_file
9064: LD_VAR 0 1
9068: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
9073: PPUSH
9074: PPUSH
9075: PPUSH
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9092: LD_ADDR_EXP 33
9096: PUSH
9097: LD_INT 8
9099: PUSH
9100: LD_INT 11
9102: PUSH
9103: LD_INT 14
9105: PUSH
9106: LD_INT 17
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PUSH
9115: LD_OWVAR 67
9119: ARRAY
9120: ST_TO_ADDR
// ruMobile := [ ] ;
9121: LD_ADDR_EXP 34
9125: PUSH
9126: EMPTY
9127: ST_TO_ADDR
// ruBuildList := [ ] ;
9128: LD_ADDR_EXP 35
9132: PUSH
9133: EMPTY
9134: ST_TO_ADDR
// russianAttackers := [ ] ;
9135: LD_ADDR_EXP 36
9139: PUSH
9140: EMPTY
9141: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9142: LD_ADDR_VAR 0 5
9146: PUSH
9147: LD_INT 43
9149: PUSH
9150: LD_INT 44
9152: PUSH
9153: LD_INT 46
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: ST_TO_ADDR
// if Difficulty > 2 then
9161: LD_OWVAR 67
9165: PUSH
9166: LD_INT 2
9168: GREATER
9169: IFFALSE 9192
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9171: LD_ADDR_VAR 0 5
9175: PUSH
9176: LD_VAR 0 5
9180: PUSH
9181: LD_INT 45
9183: PUSH
9184: LD_INT 46
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: ADD
9191: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9192: LD_ADDR_EXP 32
9196: PUSH
9197: LD_STRING Borodin
9199: PPUSH
9200: CALL_OW 25
9204: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9205: LD_EXP 32
9209: PPUSH
9210: LD_INT 28
9212: PPUSH
9213: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9217: LD_INT 28
9219: PPUSH
9220: CALL_OW 274
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_INT 3000
9230: PUSH
9231: LD_INT 4000
9233: PUSH
9234: LD_INT 5000
9236: PUSH
9237: LD_INT 6000
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: LD_OWVAR 67
9250: ARRAY
9251: PPUSH
9252: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9256: LD_INT 28
9258: PPUSH
9259: CALL_OW 274
9263: PPUSH
9264: LD_INT 2
9266: PPUSH
9267: LD_INT 1000
9269: PPUSH
9270: CALL_OW 277
// if Difficulty > 2 then
9274: LD_OWVAR 67
9278: PUSH
9279: LD_INT 2
9281: GREATER
9282: IFFALSE 9406
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9284: LD_ADDR_VAR 0 4
9288: PUSH
9289: LD_INT 99
9291: PUSH
9292: LD_INT 130
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 121
9305: PUSH
9306: LD_INT 127
9308: PUSH
9309: LD_INT 4
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 117
9319: PUSH
9320: LD_INT 121
9322: PUSH
9323: LD_INT 4
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: ST_TO_ADDR
// for i in tmp do
9336: LD_ADDR_VAR 0 2
9340: PUSH
9341: LD_VAR 0 4
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9404
// begin bc_type := b_turret ;
9349: LD_ADDR_OWVAR 42
9353: PUSH
9354: LD_INT 33
9356: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9357: LD_ADDR_OWVAR 43
9361: PUSH
9362: LD_INT 2
9364: PUSH
9365: LD_OWVAR 67
9369: PLUS
9370: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9371: LD_VAR 0 2
9375: PUSH
9376: LD_INT 1
9378: ARRAY
9379: PPUSH
9380: LD_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ARRAY
9388: PPUSH
9389: LD_VAR 0 2
9393: PUSH
9394: LD_INT 3
9396: ARRAY
9397: PPUSH
9398: CALL_OW 47
// end ;
9402: GO 9346
9404: POP
9405: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 22
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 21
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 69
9439: PUSH
9440: FOR_IN
9441: IFFALSE 9463
// SetBLevel ( i , 2 + Difficulty ) ;
9443: LD_VAR 0 2
9447: PPUSH
9448: LD_INT 2
9450: PUSH
9451: LD_OWVAR 67
9455: PLUS
9456: PPUSH
9457: CALL_OW 241
9461: GO 9440
9463: POP
9464: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9465: LD_ADDR_VAR 0 4
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: LD_INT 30
9485: PUSH
9486: LD_INT 32
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 30
9495: PUSH
9496: LD_INT 33
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PPUSH
9512: CALL_OW 69
9516: ST_TO_ADDR
// for i in tmp do
9517: LD_ADDR_VAR 0 2
9521: PUSH
9522: LD_VAR 0 4
9526: PUSH
9527: FOR_IN
9528: IFFALSE 9560
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9530: LD_VAR 0 2
9534: PPUSH
9535: LD_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 5
9547: PPUSH
9548: CALL_OW 12
9552: ARRAY
9553: PPUSH
9554: CALL_OW 431
9558: GO 9527
9560: POP
9561: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9562: LD_ADDR_VAR 0 2
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_INT 3
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 30
9579: PUSH
9580: LD_INT 32
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: CALL_OW 69
9595: PUSH
9596: FOR_IN
9597: IFFALSE 9646
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9599: LD_INT 0
9601: PPUSH
9602: LD_INT 5
9604: PUSH
9605: LD_INT 6
9607: PUSH
9608: LD_INT 7
9610: PUSH
9611: LD_INT 8
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_OWVAR 67
9624: ARRAY
9625: PPUSH
9626: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9630: CALL_OW 44
9634: PPUSH
9635: LD_VAR 0 2
9639: PPUSH
9640: CALL_OW 52
// end ;
9644: GO 9596
9646: POP
9647: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9648: LD_ADDR_VAR 0 2
9652: PUSH
9653: LD_INT 22
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 30
9665: PUSH
9666: LD_INT 5
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 69
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9773
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9685: LD_ADDR_VAR 0 3
9689: PUSH
9690: DOUBLE
9691: LD_INT 1
9693: DEC
9694: ST_TO_ADDR
9695: LD_INT 2
9697: PUSH
9698: LD_INT 3
9700: PUSH
9701: LD_INT 4
9703: PUSH
9704: LD_INT 5
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: PUSH
9713: LD_OWVAR 67
9717: ARRAY
9718: PUSH
9719: FOR_TO
9720: IFFALSE 9769
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9722: LD_INT 0
9724: PPUSH
9725: LD_INT 5
9727: PUSH
9728: LD_INT 6
9730: PUSH
9731: LD_INT 7
9733: PUSH
9734: LD_INT 8
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: LD_OWVAR 67
9747: ARRAY
9748: PPUSH
9749: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9753: CALL_OW 44
9757: PPUSH
9758: LD_VAR 0 2
9762: PPUSH
9763: CALL_OW 52
// end ;
9767: GO 9719
9769: POP
9770: POP
// end ;
9771: GO 9682
9773: POP
9774: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9775: LD_ADDR_VAR 0 2
9779: PUSH
9780: DOUBLE
9781: LD_INT 1
9783: DEC
9784: ST_TO_ADDR
9785: LD_INT 3
9787: PUSH
9788: LD_INT 4
9790: PUSH
9791: LD_INT 5
9793: PUSH
9794: LD_INT 5
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: LD_OWVAR 67
9807: ARRAY
9808: PUSH
9809: FOR_TO
9810: IFFALSE 9857
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9812: LD_INT 0
9814: PPUSH
9815: LD_INT 4
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: LD_INT 5
9823: PUSH
9824: LD_INT 6
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_OWVAR 67
9837: ARRAY
9838: PPUSH
9839: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9843: CALL_OW 44
9847: PPUSH
9848: LD_INT 28
9850: PPUSH
9851: CALL_OW 52
// end ;
9855: GO 9809
9857: POP
9858: POP
// for i := 1 to 2 do
9859: LD_ADDR_VAR 0 2
9863: PUSH
9864: DOUBLE
9865: LD_INT 1
9867: DEC
9868: ST_TO_ADDR
9869: LD_INT 2
9871: PUSH
9872: FOR_TO
9873: IFFALSE 9907
// begin PrepareScientist ( false , 6 ) ;
9875: LD_INT 0
9877: PPUSH
9878: LD_INT 6
9880: PPUSH
9881: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9885: CALL_OW 44
9889: PPUSH
9890: LD_INT 81
9892: PPUSH
9893: LD_INT 93
9895: PPUSH
9896: CALL_OW 428
9900: PPUSH
9901: CALL_OW 52
// end ;
9905: GO 9872
9907: POP
9908: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9909: LD_INT 22
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 51
9920: PPUSH
9921: LD_INT 100
9923: PPUSH
9924: CALL 45215 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9928: CALL_OW 45
9932: PPUSH
9933: LD_INT 91
9935: PPUSH
9936: LD_INT 94
9938: PPUSH
9939: LD_INT 3
9941: PPUSH
9942: LD_INT 0
9944: PPUSH
9945: CALL_OW 50
// for i := 1 to 2 do
9949: LD_ADDR_VAR 0 2
9953: PUSH
9954: DOUBLE
9955: LD_INT 1
9957: DEC
9958: ST_TO_ADDR
9959: LD_INT 2
9961: PUSH
9962: FOR_TO
9963: IFFALSE 10007
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9965: LD_INT 22
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: LD_INT 3
9973: PPUSH
9974: LD_INT 52
9976: PPUSH
9977: LD_INT 100
9979: PPUSH
9980: CALL 45215 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9984: CALL_OW 45
9988: PPUSH
9989: LD_INT 91
9991: PPUSH
9992: LD_INT 94
9994: PPUSH
9995: LD_INT 4
9997: PPUSH
9998: LD_INT 0
10000: PPUSH
10001: CALL_OW 50
// end ;
10005: GO 9962
10007: POP
10008: POP
// end ;
10009: LD_VAR 0 1
10013: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10014: LD_INT 0
10016: PPUSH
10017: PPUSH
10018: PPUSH
10019: PPUSH
10020: PPUSH
// uc_side := 3 ;
10021: LD_ADDR_OWVAR 20
10025: PUSH
10026: LD_INT 3
10028: ST_TO_ADDR
// uc_nation := 3 ;
10029: LD_ADDR_OWVAR 21
10033: PUSH
10034: LD_INT 3
10036: ST_TO_ADDR
// for i := 1 to 4 do
10037: LD_ADDR_VAR 0 2
10041: PUSH
10042: DOUBLE
10043: LD_INT 1
10045: DEC
10046: ST_TO_ADDR
10047: LD_INT 4
10049: PUSH
10050: FOR_TO
10051: IFFALSE 10178
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10053: LD_INT 22
10055: PPUSH
10056: LD_INT 1
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: LD_INT 42
10064: PUSH
10065: LD_INT 43
10067: PUSH
10068: LD_INT 44
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 1
10078: PPUSH
10079: LD_INT 3
10081: PPUSH
10082: CALL_OW 12
10086: ARRAY
10087: PPUSH
10088: LD_INT 40
10090: PPUSH
10091: CALL 45215 0 5
// veh := CreateVehicle ;
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: CALL_OW 45
10104: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10105: LD_VAR 0 4
10109: PPUSH
10110: LD_INT 5
10112: PPUSH
10113: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10117: LD_VAR 0 4
10121: PPUSH
10122: LD_INT 7
10124: PPUSH
10125: LD_INT 0
10127: PPUSH
10128: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10132: LD_INT 0
10134: PPUSH
10135: LD_INT 5
10137: PPUSH
10138: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10142: CALL_OW 44
10146: PPUSH
10147: LD_VAR 0 4
10151: PPUSH
10152: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10156: LD_ADDR_VAR 0 5
10160: PUSH
10161: LD_VAR 0 5
10165: PPUSH
10166: LD_VAR 0 4
10170: PPUSH
10171: CALL 77668 0 2
10175: ST_TO_ADDR
// end ;
10176: GO 10050
10178: POP
10179: POP
// for i := 1 to 3 do
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: DOUBLE
10186: LD_INT 1
10188: DEC
10189: ST_TO_ADDR
10190: LD_INT 3
10192: PUSH
10193: FOR_TO
10194: IFFALSE 10321
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10196: LD_INT 22
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: LD_INT 42
10207: PUSH
10208: LD_INT 43
10210: PUSH
10211: LD_INT 44
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 1
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: CALL_OW 12
10229: ARRAY
10230: PPUSH
10231: LD_INT 40
10233: PPUSH
10234: CALL 45215 0 5
// veh := CreateVehicle ;
10238: LD_ADDR_VAR 0 4
10242: PUSH
10243: CALL_OW 45
10247: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10248: LD_VAR 0 4
10252: PPUSH
10253: LD_INT 5
10255: PPUSH
10256: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10260: LD_VAR 0 4
10264: PPUSH
10265: LD_INT 8
10267: PPUSH
10268: LD_INT 0
10270: PPUSH
10271: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10275: LD_INT 0
10277: PPUSH
10278: LD_INT 5
10280: PPUSH
10281: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10285: CALL_OW 44
10289: PPUSH
10290: LD_VAR 0 4
10294: PPUSH
10295: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10299: LD_ADDR_VAR 0 5
10303: PUSH
10304: LD_VAR 0 5
10308: PPUSH
10309: LD_VAR 0 4
10313: PPUSH
10314: CALL 77668 0 2
10318: ST_TO_ADDR
// end ;
10319: GO 10193
10321: POP
10322: POP
// for i := 1 to 2 do
10323: LD_ADDR_VAR 0 2
10327: PUSH
10328: DOUBLE
10329: LD_INT 1
10331: DEC
10332: ST_TO_ADDR
10333: LD_INT 2
10335: PUSH
10336: FOR_TO
10337: IFFALSE 10396
// begin PrepareSoldier ( false , 5 ) ;
10339: LD_INT 0
10341: PPUSH
10342: LD_INT 5
10344: PPUSH
10345: CALL_OW 381
// un := CreateHuman ;
10349: LD_ADDR_VAR 0 3
10353: PUSH
10354: CALL_OW 44
10358: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_INT 8
10366: PPUSH
10367: LD_INT 0
10369: PPUSH
10370: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10374: LD_ADDR_VAR 0 5
10378: PUSH
10379: LD_VAR 0 5
10383: PPUSH
10384: LD_VAR 0 3
10388: PPUSH
10389: CALL 77668 0 2
10393: ST_TO_ADDR
// end ;
10394: GO 10336
10396: POP
10397: POP
// for i in tmp do
10398: LD_ADDR_VAR 0 2
10402: PUSH
10403: LD_VAR 0 5
10407: PUSH
10408: FOR_IN
10409: IFFALSE 10428
// ComAgressiveMove ( i , 51 , 16 ) ;
10411: LD_VAR 0 2
10415: PPUSH
10416: LD_INT 51
10418: PPUSH
10419: LD_INT 16
10421: PPUSH
10422: CALL_OW 114
10426: GO 10408
10428: POP
10429: POP
// end ;
10430: LD_VAR 0 1
10434: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10435: LD_EXP 34
10439: IFFALSE 11014
10441: GO 10443
10443: DISABLE
10444: LD_INT 0
10446: PPUSH
10447: PPUSH
10448: PPUSH
// begin enable ;
10449: ENABLE
// if not ruMobile then
10450: LD_EXP 34
10454: NOT
10455: IFFALSE 10459
// exit ;
10457: GO 11014
// for i in ruMobile do
10459: LD_ADDR_VAR 0 1
10463: PUSH
10464: LD_EXP 34
10468: PUSH
10469: FOR_IN
10470: IFFALSE 11012
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10472: LD_VAR 0 1
10476: PPUSH
10477: CALL_OW 302
10481: NOT
10482: PUSH
10483: LD_VAR 0 1
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 3
10495: NONEQUAL
10496: OR
10497: IFFALSE 10517
// begin ruMobile := ruMobile diff i ;
10499: LD_ADDR_EXP 34
10503: PUSH
10504: LD_EXP 34
10508: PUSH
10509: LD_VAR 0 1
10513: DIFF
10514: ST_TO_ADDR
// continue ;
10515: GO 10469
// end ; if GetTag ( i ) = 300 then
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 110
10526: PUSH
10527: LD_INT 300
10529: EQUAL
10530: IFFALSE 10645
// begin if GetFuel ( i ) < 50 then
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 261
10541: PUSH
10542: LD_INT 50
10544: LESS
10545: IFFALSE 10604
// begin ComMoveXY ( i , 93 , 100 ) ;
10547: LD_VAR 0 1
10551: PPUSH
10552: LD_INT 93
10554: PPUSH
10555: LD_INT 100
10557: PPUSH
10558: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10562: LD_INT 35
10564: PPUSH
10565: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10569: LD_VAR 0 1
10573: PPUSH
10574: LD_INT 93
10576: PPUSH
10577: LD_INT 100
10579: PPUSH
10580: CALL_OW 297
10584: PUSH
10585: LD_INT 4
10587: LESS
10588: IFFALSE 10562
// SetFuel ( i , 100 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 100
10597: PPUSH
10598: CALL_OW 240
// end else
10602: GO 10645
// if not IsInArea ( i , ruParkingArea ) then
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 10
10611: PPUSH
10612: CALL_OW 308
10616: NOT
10617: IFFALSE 10633
// ComMoveToArea ( i , ruParkingArea ) else
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 10
10626: PPUSH
10627: CALL_OW 113
10631: GO 10645
// SetTag ( i , 301 ) ;
10633: LD_VAR 0 1
10637: PPUSH
10638: LD_INT 301
10640: PPUSH
10641: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 110
10654: PUSH
10655: LD_INT 301
10657: EQUAL
10658: IFFALSE 10788
// begin if GetLives ( i ) < 1000 then
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL_OW 256
10669: PUSH
10670: LD_INT 1000
10672: LESS
10673: IFFALSE 10765
// begin if not IsDrivenBy ( i ) then
10675: LD_VAR 0 1
10679: PPUSH
10680: CALL_OW 311
10684: NOT
10685: IFFALSE 10689
// continue ;
10687: GO 10469
// mech := IsDrivenBy ( i ) ;
10689: LD_ADDR_VAR 0 2
10693: PUSH
10694: LD_VAR 0 1
10698: PPUSH
10699: CALL_OW 311
10703: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10704: LD_VAR 0 2
10708: PPUSH
10709: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10713: LD_VAR 0 2
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10727: LD_INT 35
10729: PPUSH
10730: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 256
10743: PUSH
10744: LD_INT 1000
10746: EQUAL
10747: IFFALSE 10727
// ComEnterUnit ( mech , i ) ;
10749: LD_VAR 0 2
10753: PPUSH
10754: LD_VAR 0 1
10758: PPUSH
10759: CALL_OW 120
// end else
10763: GO 10788
// if IsDrivenBy ( i ) then
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 311
10774: IFFALSE 10788
// SetTag ( i , 0 ) ;
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_INT 0
10783: PPUSH
10784: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10788: LD_VAR 0 1
10792: PPUSH
10793: CALL_OW 110
10797: PUSH
10798: LD_INT 300
10800: LESS
10801: IFFALSE 11010
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10803: LD_ADDR_VAR 0 3
10807: PUSH
10808: LD_INT 11
10810: PPUSH
10811: LD_INT 81
10813: PUSH
10814: LD_INT 3
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 70
10825: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 256
10835: PUSH
10836: LD_INT 650
10838: LESS
10839: IFFALSE 10864
// begin ComStop ( i ) ;
10841: LD_VAR 0 1
10845: PPUSH
10846: CALL_OW 141
// SetTag ( i , 300 ) ;
10850: LD_VAR 0 1
10854: PPUSH
10855: LD_INT 300
10857: PPUSH
10858: CALL_OW 109
// continue ;
10862: GO 10469
// end ; if enemy then
10864: LD_VAR 0 3
10868: IFFALSE 10908
// begin if not HasTask ( i ) then
10870: LD_VAR 0 1
10874: PPUSH
10875: CALL_OW 314
10879: NOT
10880: IFFALSE 10906
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_VAR 0 3
10891: PPUSH
10892: LD_VAR 0 1
10896: PPUSH
10897: CALL_OW 74
10901: PPUSH
10902: CALL_OW 115
// end else
10906: GO 11010
// if ruMobile > 2 then
10908: LD_EXP 34
10912: PUSH
10913: LD_INT 2
10915: GREATER
10916: IFFALSE 11010
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_INT 81
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PPUSH
10933: CALL_OW 69
10937: ST_TO_ADDR
// if enemy then
10938: LD_VAR 0 3
10942: IFFALSE 11010
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: LD_INT 116
10951: PUSH
10952: LD_INT 95
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 84
10961: PUSH
10962: LD_INT 68
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 58
10971: PUSH
10972: LD_INT 53
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 44
10981: PUSH
10982: LD_INT 35
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 45
10991: PUSH
10992: LD_INT 23
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL 80272 0 2
// end ; end ; end ;
11010: GO 10469
11012: POP
11013: POP
// end ;
11014: PPOPN 3
11016: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11017: LD_INT 3
11019: PUSH
11020: LD_INT 22
11022: PUSH
11023: LD_INT 1
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 32
11036: PUSH
11037: LD_INT 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PPUSH
11048: CALL_OW 69
11052: IFFALSE 11136
11054: GO 11056
11056: DISABLE
11057: LD_INT 0
11059: PPUSH
// begin enable ;
11060: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 3
11068: PUSH
11069: LD_INT 22
11071: PUSH
11072: LD_INT 1
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 32
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PPUSH
11097: CALL_OW 69
11101: PUSH
11102: FOR_IN
11103: IFFALSE 11134
// if GetFuel ( i ) < 3 then
11105: LD_VAR 0 1
11109: PPUSH
11110: CALL_OW 261
11114: PUSH
11115: LD_INT 3
11117: LESS
11118: IFFALSE 11132
// SetFuel ( i , 3 ) ;
11120: LD_VAR 0 1
11124: PPUSH
11125: LD_INT 3
11127: PPUSH
11128: CALL_OW 240
11132: GO 11102
11134: POP
11135: POP
// end ;
11136: PPOPN 1
11138: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11139: LD_INT 29
11141: PPUSH
11142: CALL_OW 302
11146: PUSH
11147: LD_INT 29
11149: PPUSH
11150: CALL_OW 461
11154: PUSH
11155: LD_INT 2
11157: EQUAL
11158: AND
11159: IFFALSE 11392
11161: GO 11163
11163: DISABLE
11164: LD_INT 0
11166: PPUSH
11167: PPUSH
// begin enable ;
11168: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11169: LD_ADDR_VAR 0 1
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_INT 23
11182: PUSH
11183: LD_INT 24
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_INT 4
11197: PPUSH
11198: CALL_OW 12
11202: ARRAY
11203: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11204: LD_ADDR_VAR 0 2
11208: PUSH
11209: LD_INT 42
11211: PUSH
11212: LD_INT 44
11214: PUSH
11215: LD_INT 43
11217: PUSH
11218: LD_INT 46
11220: PUSH
11221: LD_INT 45
11223: PUSH
11224: LD_INT 46
11226: PUSH
11227: LD_INT 45
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: LD_OWVAR 67
11243: PUSH
11244: LD_INT 0
11246: PPUSH
11247: LD_INT 3
11249: PPUSH
11250: CALL_OW 12
11254: PLUS
11255: ARRAY
11256: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11257: LD_VAR 0 1
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 22
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: IN
11272: PUSH
11273: LD_VAR 0 2
11277: PUSH
11278: LD_INT 46
11280: EQUAL
11281: AND
11282: IFFALSE 11311
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11284: LD_ADDR_VAR 0 2
11288: PUSH
11289: LD_INT 44
11291: PUSH
11292: LD_INT 45
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 1
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: CALL_OW 12
11309: ARRAY
11310: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11311: LD_OWVAR 1
11315: PUSH
11316: LD_INT 25200
11318: PUSH
11319: LD_INT 23100
11321: PUSH
11322: LD_INT 21000
11324: PUSH
11325: LD_INT 18900
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: LD_OWVAR 67
11338: ARRAY
11339: LESS
11340: IFFALSE 11369
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11342: LD_ADDR_VAR 0 2
11346: PUSH
11347: LD_INT 44
11349: PUSH
11350: LD_INT 43
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 1
11359: PPUSH
11360: LD_INT 2
11362: PPUSH
11363: CALL_OW 12
11367: ARRAY
11368: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11369: LD_INT 29
11371: PPUSH
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: LD_VAR 0 2
11387: PPUSH
11388: CALL_OW 185
// end ;
11392: PPOPN 2
11394: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11395: LD_INT 28
11397: PPUSH
11398: CALL_OW 302
11402: IFFALSE 12994
11404: GO 11406
11406: DISABLE
11407: LD_INT 0
11409: PPUSH
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
11417: PPUSH
11418: PPUSH
11419: PPUSH
11420: PPUSH
11421: PPUSH
// begin enable ;
11422: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11423: LD_ADDR_VAR 0 4
11427: PUSH
11428: LD_INT 12
11430: PPUSH
11431: LD_INT 3
11433: PUSH
11434: LD_INT 24
11436: PUSH
11437: LD_INT 1000
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 21
11450: PUSH
11451: LD_INT 3
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PPUSH
11462: CALL_OW 70
11466: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11467: LD_ADDR_VAR 0 5
11471: PUSH
11472: LD_INT 22
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 25
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PPUSH
11496: CALL_OW 69
11500: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11501: LD_ADDR_VAR 0 6
11505: PUSH
11506: LD_INT 22
11508: PUSH
11509: LD_INT 3
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 34
11518: PUSH
11519: LD_INT 52
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11535: LD_ADDR_VAR 0 8
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 4
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PPUSH
11564: CALL_OW 69
11568: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11569: LD_ADDR_VAR 0 9
11573: PUSH
11574: LD_INT 81
11576: PPUSH
11577: LD_INT 93
11579: PPUSH
11580: CALL_OW 428
11584: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11585: LD_ADDR_VAR 0 10
11589: PUSH
11590: LD_INT 22
11592: PUSH
11593: LD_INT 3
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 30
11602: PUSH
11603: LD_INT 32
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 50
11612: PUSH
11613: EMPTY
11614: LIST
11615: PUSH
11616: LD_INT 58
11618: PUSH
11619: EMPTY
11620: LIST
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: LD_INT 120
11627: PUSH
11628: LD_INT 701
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11651: LD_ADDR_VAR 0 12
11655: PUSH
11656: LD_INT 22
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 30
11668: PUSH
11669: LD_INT 5
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 50
11678: PUSH
11679: EMPTY
11680: LIST
11681: PUSH
11682: LD_INT 3
11684: PUSH
11685: LD_INT 62
11687: PUSH
11688: EMPTY
11689: LIST
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 69
11705: ST_TO_ADDR
// if emptyTowers then
11706: LD_VAR 0 10
11710: IFFALSE 11971
// begin for i in emptyTowers do
11712: LD_ADDR_VAR 0 1
11716: PUSH
11717: LD_VAR 0 10
11721: PUSH
11722: FOR_IN
11723: IFFALSE 11967
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11725: LD_ADDR_VAR 0 11
11729: PUSH
11730: LD_INT 22
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 2
11742: PUSH
11743: LD_INT 54
11745: PUSH
11746: EMPTY
11747: LIST
11748: PUSH
11749: LD_INT 95
11751: PUSH
11752: LD_INT 12
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 50
11776: PUSH
11777: EMPTY
11778: LIST
11779: PUSH
11780: LD_INT 3
11782: PUSH
11783: LD_INT 120
11785: PUSH
11786: LD_INT 701
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: ST_TO_ADDR
// if not sol then
11809: LD_VAR 0 11
11813: NOT
11814: IFFALSE 11818
// break ;
11816: GO 11967
// for j in sol do
11818: LD_ADDR_VAR 0 2
11822: PUSH
11823: LD_VAR 0 11
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11880
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11831: LD_VAR 0 2
11835: PPUSH
11836: CALL_OW 310
11840: PUSH
11841: LD_VAR 0 2
11845: PPUSH
11846: CALL_OW 310
11850: PPUSH
11851: CALL_OW 266
11855: PUSH
11856: LD_INT 32
11858: EQUAL
11859: AND
11860: IFFALSE 11878
// sol := sol diff j ;
11862: LD_ADDR_VAR 0 11
11866: PUSH
11867: LD_VAR 0 11
11871: PUSH
11872: LD_VAR 0 2
11876: DIFF
11877: ST_TO_ADDR
11878: GO 11828
11880: POP
11881: POP
// if not sol then
11882: LD_VAR 0 11
11886: NOT
11887: IFFALSE 11891
// break ;
11889: GO 11967
// if IsInUnit ( sol [ 1 ] ) then
11891: LD_VAR 0 11
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: CALL_OW 310
11904: IFFALSE 11919
// ComExit ( sol [ 1 ] ) ;
11906: LD_VAR 0 11
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: CALL 78066 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11919: LD_VAR 0 11
11923: PUSH
11924: LD_INT 1
11926: ARRAY
11927: PPUSH
11928: LD_INT 701
11930: PPUSH
11931: CALL_OW 109
// SetTag ( i , 701 ) ;
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_INT 701
11942: PPUSH
11943: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
11947: LD_VAR 0 11
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: PPUSH
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 180
// end ;
11965: GO 11722
11967: POP
11968: POP
// end else
11969: GO 12217
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
11971: LD_VAR 0 11
11975: PPUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 54
11981: PUSH
11982: EMPTY
11983: LIST
11984: PUSH
11985: LD_INT 95
11987: PUSH
11988: LD_INT 12
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 72
12004: IFFALSE 12217
// begin if barracks then
12006: LD_VAR 0 12
12010: IFFALSE 12078
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12012: LD_ADDR_VAR 0 1
12016: PUSH
12017: LD_VAR 0 11
12021: PPUSH
12022: LD_INT 3
12024: PUSH
12025: LD_INT 54
12027: PUSH
12028: EMPTY
12029: LIST
12030: PUSH
12031: LD_INT 95
12033: PUSH
12034: LD_INT 12
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 72
12050: PUSH
12051: FOR_IN
12052: IFFALSE 12074
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_VAR 0 12
12063: PUSH
12064: LD_INT 1
12066: ARRAY
12067: PPUSH
12068: CALL_OW 120
12072: GO 12051
12074: POP
12075: POP
// end else
12076: GO 12217
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12078: LD_INT 12
12080: PPUSH
12081: LD_INT 81
12083: PUSH
12084: LD_INT 3
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PPUSH
12091: CALL_OW 70
12095: IFFALSE 12217
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_VAR 0 11
12106: PPUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: LD_INT 95
12118: PUSH
12119: LD_INT 12
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: PPUSH
12131: CALL_OW 72
12135: PUSH
12136: FOR_IN
12137: IFFALSE 12215
// begin SetTag ( i , 702 ) ;
12139: LD_VAR 0 1
12143: PPUSH
12144: LD_INT 702
12146: PPUSH
12147: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12151: LD_ADDR_VAR 0 13
12155: PUSH
12156: LD_INT 12
12158: PPUSH
12159: LD_INT 81
12161: PUSH
12162: LD_INT 3
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PPUSH
12169: CALL_OW 70
12173: PPUSH
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 74
12183: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12184: LD_VAR 0 1
12188: PPUSH
12189: LD_VAR 0 13
12193: PPUSH
12194: CALL_OW 250
12198: PPUSH
12199: LD_VAR 0 13
12203: PPUSH
12204: CALL_OW 251
12208: PPUSH
12209: CALL_OW 114
// end ;
12213: GO 12136
12215: POP
12216: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12217: LD_ADDR_VAR 0 3
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_INT 3
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 95
12234: PUSH
12235: LD_INT 11
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 50
12244: PUSH
12245: EMPTY
12246: LIST
12247: PUSH
12248: LD_INT 25
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 120
12260: PUSH
12261: LD_INT 702
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: ST_TO_ADDR
// if tmp then
12280: LD_VAR 0 3
12284: IFFALSE 12330
// for i in tmp do
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: LD_VAR 0 3
12295: PUSH
12296: FOR_IN
12297: IFFALSE 12328
// begin ComMoveXY ( i , 90 , 94 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 90
12306: PPUSH
12307: LD_INT 94
12309: PPUSH
12310: CALL_OW 111
// SetTag ( i , 0 ) ;
12314: LD_VAR 0 1
12318: PPUSH
12319: LD_INT 0
12321: PPUSH
12322: CALL_OW 109
// end ;
12326: GO 12296
12328: POP
12329: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12330: LD_VAR 0 8
12334: PUSH
12335: LD_VAR 0 5
12339: PPUSH
12340: LD_INT 120
12342: PUSH
12343: LD_INT 2
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: AND
12355: IFFALSE 12368
// ComExitAll ( sci ) else
12357: LD_VAR 0 8
12361: PPUSH
12362: CALL 78149 0 1
12366: GO 12441
// if sci then
12368: LD_VAR 0 8
12372: IFFALSE 12441
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12374: LD_VAR 0 8
12378: PPUSH
12379: LD_INT 3
12381: PUSH
12382: LD_INT 54
12384: PUSH
12385: EMPTY
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 72
12396: PUSH
12397: LD_VAR 0 9
12401: PPUSH
12402: CALL_OW 302
12406: AND
12407: IFFALSE 12441
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12409: LD_VAR 0 8
12413: PPUSH
12414: LD_INT 3
12416: PUSH
12417: LD_INT 54
12419: PUSH
12420: EMPTY
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 72
12431: PPUSH
12432: LD_VAR 0 9
12436: PPUSH
12437: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12441: LD_VAR 0 6
12445: PPUSH
12446: LD_INT 50
12448: PUSH
12449: EMPTY
12450: LIST
12451: PPUSH
12452: CALL_OW 72
12456: PUSH
12457: LD_VAR 0 4
12461: AND
12462: IFFALSE 12493
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12464: LD_VAR 0 6
12468: PPUSH
12469: LD_INT 50
12471: PUSH
12472: EMPTY
12473: LIST
12474: PPUSH
12475: CALL_OW 72
12479: PPUSH
12480: LD_VAR 0 4
12484: PUSH
12485: LD_INT 1
12487: ARRAY
12488: PPUSH
12489: CALL_OW 130
// if eng then
12493: LD_VAR 0 5
12497: IFFALSE 12994
// begin for i in eng do
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_VAR 0 5
12508: PUSH
12509: FOR_IN
12510: IFFALSE 12992
// begin tag := GetTag ( i ) ;
12512: LD_ADDR_VAR 0 7
12516: PUSH
12517: LD_VAR 0 1
12521: PPUSH
12522: CALL_OW 110
12526: ST_TO_ADDR
// case tag of 0 :
12527: LD_VAR 0 7
12531: PUSH
12532: LD_INT 0
12534: DOUBLE
12535: EQUAL
12536: IFTRUE 12540
12538: GO 12751
12540: POP
// begin if b then
12541: LD_VAR 0 4
12545: IFFALSE 12561
// begin SetTag ( i , 1 ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 109
// continue ;
12559: GO 12509
// end ; if not ruBuildList then
12561: LD_EXP 35
12565: NOT
12566: IFFALSE 12582
// ComEnterUnit ( i , ruDep ) else
12568: LD_VAR 0 1
12572: PPUSH
12573: LD_INT 28
12575: PPUSH
12576: CALL_OW 120
12580: GO 12749
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12582: LD_INT 11
12584: PPUSH
12585: LD_INT 81
12587: PUSH
12588: LD_INT 3
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PPUSH
12595: CALL_OW 70
12599: PUSH
12600: LD_INT 0
12602: EQUAL
12603: PUSH
12604: LD_INT 28
12606: PPUSH
12607: LD_EXP 35
12611: PUSH
12612: LD_INT 1
12614: ARRAY
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PPUSH
12620: LD_EXP 35
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PUSH
12629: LD_INT 2
12631: ARRAY
12632: PPUSH
12633: LD_EXP 35
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PUSH
12642: LD_INT 3
12644: ARRAY
12645: PPUSH
12646: LD_EXP 35
12650: PUSH
12651: LD_INT 1
12653: ARRAY
12654: PUSH
12655: LD_INT 4
12657: ARRAY
12658: PPUSH
12659: CALL 53434 0 5
12663: AND
12664: IFFALSE 12749
// begin if IsInUnit ( i ) then
12666: LD_VAR 0 1
12670: PPUSH
12671: CALL_OW 310
12675: IFFALSE 12688
// ComExitBuilding ( i ) else
12677: LD_VAR 0 1
12681: PPUSH
12682: CALL_OW 122
12686: GO 12749
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12688: LD_VAR 0 1
12692: PPUSH
12693: LD_EXP 35
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PUSH
12702: LD_INT 1
12704: ARRAY
12705: PPUSH
12706: LD_EXP 35
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PUSH
12715: LD_INT 2
12717: ARRAY
12718: PPUSH
12719: LD_EXP 35
12723: PUSH
12724: LD_INT 1
12726: ARRAY
12727: PUSH
12728: LD_INT 3
12730: ARRAY
12731: PPUSH
12732: LD_EXP 35
12736: PUSH
12737: LD_INT 1
12739: ARRAY
12740: PUSH
12741: LD_INT 4
12743: ARRAY
12744: PPUSH
12745: CALL_OW 145
// end ; end ; 1 :
12749: GO 12948
12751: LD_INT 1
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12862
12759: POP
// begin if not b then
12760: LD_VAR 0 4
12764: NOT
12765: IFFALSE 12781
// begin SetTag ( i , 0 ) ;
12767: LD_VAR 0 1
12771: PPUSH
12772: LD_INT 0
12774: PPUSH
12775: CALL_OW 109
// continue ;
12779: GO 12509
// end ; if IsInUnit ( i ) then
12781: LD_VAR 0 1
12785: PPUSH
12786: CALL_OW 310
12790: IFFALSE 12801
// ComExitBuilding ( i ) ;
12792: LD_VAR 0 1
12796: PPUSH
12797: CALL_OW 122
// if GetLives ( i ) < 650 then
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 256
12810: PUSH
12811: LD_INT 650
12813: LESS
12814: IFFALSE 12830
// begin SetTag ( i , 2 ) ;
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_INT 2
12823: PPUSH
12824: CALL_OW 109
// continue ;
12828: GO 12509
// end ; if b then
12830: LD_VAR 0 4
12834: IFFALSE 12860
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12836: LD_VAR 0 1
12840: PPUSH
12841: LD_VAR 0 4
12845: PPUSH
12846: LD_VAR 0 1
12850: PPUSH
12851: CALL_OW 74
12855: PPUSH
12856: CALL_OW 130
// end ; 2 :
12860: GO 12948
12862: LD_INT 2
12864: DOUBLE
12865: EQUAL
12866: IFTRUE 12870
12868: GO 12947
12870: POP
// begin if GetLives ( i ) = 1000 then
12871: LD_VAR 0 1
12875: PPUSH
12876: CALL_OW 256
12880: PUSH
12881: LD_INT 1000
12883: EQUAL
12884: IFFALSE 12900
// begin SetTag ( i , 1 ) ;
12886: LD_VAR 0 1
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 109
// continue ;
12898: GO 12509
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12900: LD_VAR 0 1
12904: PPUSH
12905: LD_INT 84
12907: PPUSH
12908: LD_INT 93
12910: PPUSH
12911: CALL_OW 297
12915: PUSH
12916: LD_INT 6
12918: GREATER
12919: IFFALSE 12945
// begin ComMoveXY ( i , 84 , 93 ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: LD_INT 84
12928: PPUSH
12929: LD_INT 93
12931: PPUSH
12932: CALL_OW 111
// AddComHold ( i ) ;
12936: LD_VAR 0 1
12940: PPUSH
12941: CALL_OW 200
// end ; end ; end ;
12945: GO 12948
12947: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12948: LD_VAR 0 1
12952: PPUSH
12953: LD_INT 12
12955: PPUSH
12956: CALL_OW 308
12960: NOT
12961: PUSH
12962: LD_VAR 0 1
12966: PPUSH
12967: CALL_OW 310
12971: NOT
12972: AND
12973: IFFALSE 12990
// ComMoveXY ( i , 91 , 95 ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_INT 91
12982: PPUSH
12983: LD_INT 95
12985: PPUSH
12986: CALL_OW 111
// end ;
12990: GO 12509
12992: POP
12993: POP
// end ; end ;
12994: PPOPN 13
12996: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12997: LD_INT 0
12999: PPUSH
13000: PPUSH
13001: PPUSH
13002: PPUSH
13003: PPUSH
13004: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13005: LD_ADDR_VAR 0 3
13009: PUSH
13010: DOUBLE
13011: LD_INT 1
13013: DEC
13014: ST_TO_ADDR
13015: LD_INT 3
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: LD_INT 5
13023: PUSH
13024: LD_INT 6
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: PUSH
13033: LD_OWVAR 67
13037: ARRAY
13038: PUSH
13039: LD_VAR 0 1
13043: PLUS
13044: PUSH
13045: FOR_TO
13046: IFFALSE 13363
// begin uc_side := 6 ;
13048: LD_ADDR_OWVAR 20
13052: PUSH
13053: LD_INT 6
13055: ST_TO_ADDR
// uc_nation := 3 ;
13056: LD_ADDR_OWVAR 21
13060: PUSH
13061: LD_INT 3
13063: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_INT 21
13071: PUSH
13072: LD_INT 22
13074: PUSH
13075: LD_INT 23
13077: PUSH
13078: LD_INT 24
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 1
13089: PPUSH
13090: LD_INT 4
13092: PPUSH
13093: CALL_OW 12
13097: ARRAY
13098: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13099: LD_ADDR_VAR 0 7
13103: PUSH
13104: LD_INT 42
13106: PUSH
13107: LD_INT 44
13109: PUSH
13110: LD_INT 43
13112: PUSH
13113: LD_INT 46
13115: PUSH
13116: LD_INT 45
13118: PUSH
13119: LD_INT 46
13121: PUSH
13122: LD_INT 45
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_OWVAR 67
13138: PUSH
13139: LD_INT 0
13141: PPUSH
13142: LD_INT 3
13144: PPUSH
13145: CALL_OW 12
13149: PLUS
13150: ARRAY
13151: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13152: LD_VAR 0 6
13156: PUSH
13157: LD_INT 21
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: IN
13167: PUSH
13168: LD_VAR 0 7
13172: PUSH
13173: LD_INT 46
13175: EQUAL
13176: AND
13177: IFFALSE 13206
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13179: LD_ADDR_VAR 0 7
13183: PUSH
13184: LD_INT 44
13186: PUSH
13187: LD_INT 45
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 2
13199: PPUSH
13200: CALL_OW 12
13204: ARRAY
13205: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13206: LD_OWVAR 1
13210: PUSH
13211: LD_INT 31500
13213: PUSH
13214: LD_INT 27300
13216: PUSH
13217: LD_INT 23100
13219: PUSH
13220: LD_INT 18900
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: PUSH
13229: LD_OWVAR 67
13233: ARRAY
13234: LESS
13235: IFFALSE 13268
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13237: LD_ADDR_VAR 0 7
13241: PUSH
13242: LD_INT 44
13244: PUSH
13245: LD_INT 43
13247: PUSH
13248: LD_INT 42
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 1
13258: PPUSH
13259: LD_INT 3
13261: PPUSH
13262: CALL_OW 12
13266: ARRAY
13267: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13268: LD_VAR 0 6
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: LD_INT 3
13278: PPUSH
13279: LD_VAR 0 7
13283: PPUSH
13284: LD_INT 90
13286: PPUSH
13287: CALL 45215 0 5
// un := CreateVehicle ;
13291: LD_ADDR_VAR 0 4
13295: PUSH
13296: CALL_OW 45
13300: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13301: LD_VAR 0 4
13305: PPUSH
13306: LD_INT 140
13308: PPUSH
13309: LD_INT 146
13311: PPUSH
13312: LD_INT 0
13314: PPUSH
13315: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13319: LD_VAR 0 4
13323: PPUSH
13324: LD_INT 131
13326: PPUSH
13327: LD_INT 128
13329: PPUSH
13330: CALL_OW 111
// wait ( 0 0$3 ) ;
13334: LD_INT 105
13336: PPUSH
13337: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13341: LD_ADDR_VAR 0 5
13345: PUSH
13346: LD_VAR 0 5
13350: PPUSH
13351: LD_VAR 0 4
13355: PPUSH
13356: CALL 77668 0 2
13360: ST_TO_ADDR
// end ;
13361: GO 13045
13363: POP
13364: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13365: LD_ADDR_EXP 36
13369: PUSH
13370: LD_EXP 36
13374: PPUSH
13375: LD_VAR 0 5
13379: PPUSH
13380: CALL 77705 0 2
13384: ST_TO_ADDR
// end ;
13385: LD_VAR 0 2
13389: RET
// every 0 0$3 trigger russianAttackers do
13390: LD_EXP 36
13394: IFFALSE 13477
13396: GO 13398
13398: DISABLE
// begin enable ;
13399: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13400: LD_EXP 36
13404: PPUSH
13405: LD_INT 126
13407: PUSH
13408: LD_INT 108
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 107
13417: PUSH
13418: LD_INT 85
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 82
13427: PUSH
13428: LD_INT 62
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 73
13437: PUSH
13438: LD_INT 46
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 62
13447: PUSH
13448: LD_INT 31
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 52
13457: PUSH
13458: LD_INT 17
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL 80272 0 2
// end ; end_of_file
13477: END
// on SailEvent ( event ) do begin if event = 1 then
13478: LD_VAR 0 1
13482: PUSH
13483: LD_INT 1
13485: EQUAL
13486: IFFALSE 13501
// PrepareRussianAttack ( Difficulty + 3 ) ;
13488: LD_OWVAR 67
13492: PUSH
13493: LD_INT 3
13495: PLUS
13496: PPUSH
13497: CALL 12997 0 1
// end ;
13501: PPOPN 1
13503: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13504: LD_INT 0
13506: PPUSH
13507: PPUSH
13508: PPUSH
13509: PPUSH
13510: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL 35911 0 1
// if un = JMM then
13520: LD_VAR 0 1
13524: PUSH
13525: LD_EXP 14
13529: EQUAL
13530: IFFALSE 13539
// YouLost ( JMM ) ;
13532: LD_STRING JMM
13534: PPUSH
13535: CALL_OW 104
// if un = Sikorski then
13539: LD_VAR 0 1
13543: PUSH
13544: LD_EXP 28
13548: EQUAL
13549: IFFALSE 13575
// if sikorskiStatus = 0 then
13551: LD_EXP 9
13555: PUSH
13556: LD_INT 0
13558: EQUAL
13559: IFFALSE 13567
// SikorskiKilledInAction else
13561: CALL 18595 0 0
13565: GO 13575
// sikorskiIsKilled := true ;
13567: LD_ADDR_EXP 10
13571: PUSH
13572: LD_INT 1
13574: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13575: LD_VAR 0 1
13579: PPUSH
13580: CALL_OW 255
13584: PUSH
13585: LD_INT 1
13587: EQUAL
13588: PUSH
13589: LD_VAR 0 1
13593: PPUSH
13594: CALL_OW 248
13598: PUSH
13599: LD_INT 1
13601: EQUAL
13602: AND
13603: PUSH
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 266
13613: PUSH
13614: LD_INT 0
13616: PUSH
13617: LD_INT 1
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: IN
13624: AND
13625: IFFALSE 13634
// YouLost ( Destroyed ) ;
13627: LD_STRING Destroyed
13629: PPUSH
13630: CALL_OW 104
// if un = ruDep then
13634: LD_VAR 0 1
13638: PUSH
13639: LD_INT 28
13641: EQUAL
13642: IFFALSE 13776
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13644: LD_ADDR_VAR 0 2
13648: PUSH
13649: LD_INT 22
13651: PUSH
13652: LD_INT 3
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 25
13661: PUSH
13662: LD_INT 1
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PPUSH
13673: CALL_OW 69
13677: PUSH
13678: FOR_IN
13679: IFFALSE 13774
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13681: LD_ADDR_VAR 0 3
13685: PUSH
13686: LD_INT 11
13688: PPUSH
13689: LD_INT 81
13691: PUSH
13692: LD_INT 3
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PPUSH
13699: CALL_OW 70
13703: PPUSH
13704: LD_VAR 0 2
13708: PPUSH
13709: CALL_OW 74
13713: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13714: LD_VAR 0 2
13718: PPUSH
13719: CALL_OW 310
13723: PPUSH
13724: CALL_OW 266
13728: PUSH
13729: LD_INT 32
13731: EQUAL
13732: IFFALSE 13772
// begin ComExitBuilding ( i ) ;
13734: LD_VAR 0 2
13738: PPUSH
13739: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13743: LD_VAR 0 2
13747: PPUSH
13748: LD_VAR 0 3
13752: PPUSH
13753: CALL_OW 250
13757: PPUSH
13758: LD_VAR 0 3
13762: PPUSH
13763: CALL_OW 251
13767: PPUSH
13768: CALL_OW 174
// end ; end ;
13772: GO 13678
13774: POP
13775: POP
// end ; if un in ruMobile then
13776: LD_VAR 0 1
13780: PUSH
13781: LD_EXP 34
13785: IN
13786: IFFALSE 13804
// ruMobile := ruMobile diff un ;
13788: LD_ADDR_EXP 34
13792: PUSH
13793: LD_EXP 34
13797: PUSH
13798: LD_VAR 0 1
13802: DIFF
13803: ST_TO_ADDR
// if GetSide ( un ) = 3 then
13804: LD_VAR 0 1
13808: PPUSH
13809: CALL_OW 255
13813: PUSH
13814: LD_INT 3
13816: EQUAL
13817: IFFALSE 14452
// begin if GetType ( un ) = unit_building then
13819: LD_VAR 0 1
13823: PPUSH
13824: CALL_OW 247
13828: PUSH
13829: LD_INT 3
13831: EQUAL
13832: IFFALSE 13968
// begin btype := GetBType ( un ) ;
13834: LD_ADDR_VAR 0 6
13838: PUSH
13839: LD_VAR 0 1
13843: PPUSH
13844: CALL_OW 266
13848: ST_TO_ADDR
// if btype = b_warehouse then
13849: LD_VAR 0 6
13853: PUSH
13854: LD_INT 1
13856: EQUAL
13857: IFFALSE 13867
// btype := b_depot ;
13859: LD_ADDR_VAR 0 6
13863: PUSH
13864: LD_INT 0
13866: ST_TO_ADDR
// if btype = b_barracks then
13867: LD_VAR 0 6
13871: PUSH
13872: LD_INT 5
13874: EQUAL
13875: IFFALSE 13885
// btype := b_armoury ;
13877: LD_ADDR_VAR 0 6
13881: PUSH
13882: LD_INT 4
13884: ST_TO_ADDR
// if btype = b_lab_full then
13885: LD_VAR 0 6
13889: PUSH
13890: LD_INT 8
13892: EQUAL
13893: IFFALSE 13903
// btype := b_lab ;
13895: LD_ADDR_VAR 0 6
13899: PUSH
13900: LD_INT 6
13902: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
13903: LD_ADDR_EXP 35
13907: PUSH
13908: LD_EXP 35
13912: PPUSH
13913: LD_EXP 35
13917: PUSH
13918: LD_INT 1
13920: PLUS
13921: PPUSH
13922: LD_VAR 0 6
13926: PUSH
13927: LD_VAR 0 1
13931: PPUSH
13932: CALL_OW 250
13936: PUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 251
13946: PUSH
13947: LD_VAR 0 1
13951: PPUSH
13952: CALL_OW 254
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PPUSH
13963: CALL_OW 1
13967: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 247
13977: PUSH
13978: LD_INT 2
13980: EQUAL
13981: IFFALSE 14256
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
13983: LD_VAR 0 1
13987: PPUSH
13988: CALL_OW 264
13992: PUSH
13993: LD_INT 52
13995: PUSH
13996: LD_INT 51
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: IN
14003: IFFALSE 14033
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14005: LD_INT 29
14007: PPUSH
14008: LD_INT 22
14010: PPUSH
14011: LD_INT 1
14013: PPUSH
14014: LD_INT 3
14016: PPUSH
14017: LD_VAR 0 1
14021: PPUSH
14022: CALL_OW 264
14026: PPUSH
14027: CALL_OW 185
// end else
14031: GO 14256
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14033: LD_ADDR_VAR 0 4
14037: PUSH
14038: LD_INT 21
14040: PUSH
14041: LD_INT 22
14043: PUSH
14044: LD_INT 23
14046: PUSH
14047: LD_INT 24
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: PUSH
14056: LD_INT 1
14058: PPUSH
14059: LD_INT 4
14061: PPUSH
14062: CALL_OW 12
14066: ARRAY
14067: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14068: LD_ADDR_VAR 0 5
14072: PUSH
14073: LD_INT 42
14075: PUSH
14076: LD_INT 44
14078: PUSH
14079: LD_INT 43
14081: PUSH
14082: LD_INT 46
14084: PUSH
14085: LD_INT 45
14087: PUSH
14088: LD_INT 46
14090: PUSH
14091: LD_INT 45
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: PUSH
14103: LD_OWVAR 67
14107: PUSH
14108: LD_INT 0
14110: PPUSH
14111: LD_INT 3
14113: PPUSH
14114: CALL_OW 12
14118: PLUS
14119: ARRAY
14120: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14121: LD_VAR 0 4
14125: PUSH
14126: LD_INT 21
14128: PUSH
14129: LD_INT 22
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: IN
14136: PUSH
14137: LD_VAR 0 5
14141: PUSH
14142: LD_INT 46
14144: EQUAL
14145: AND
14146: IFFALSE 14175
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14148: LD_ADDR_VAR 0 5
14152: PUSH
14153: LD_INT 44
14155: PUSH
14156: LD_INT 45
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 1
14165: PPUSH
14166: LD_INT 2
14168: PPUSH
14169: CALL_OW 12
14173: ARRAY
14174: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14175: LD_OWVAR 1
14179: PUSH
14180: LD_INT 31500
14182: PUSH
14183: LD_INT 27300
14185: PUSH
14186: LD_INT 23100
14188: PUSH
14189: LD_INT 21000
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: PUSH
14198: LD_OWVAR 67
14202: ARRAY
14203: LESS
14204: IFFALSE 14233
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14206: LD_ADDR_VAR 0 5
14210: PUSH
14211: LD_INT 44
14213: PUSH
14214: LD_INT 43
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 1
14223: PPUSH
14224: LD_INT 2
14226: PPUSH
14227: CALL_OW 12
14231: ARRAY
14232: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14233: LD_INT 29
14235: PPUSH
14236: LD_VAR 0 4
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: LD_INT 1
14246: PPUSH
14247: LD_VAR 0 5
14251: PPUSH
14252: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14256: LD_VAR 0 1
14260: PPUSH
14261: CALL_OW 257
14265: PUSH
14266: LD_INT 3
14268: EQUAL
14269: IFFALSE 14452
// begin killMechCounter := Inc ( killMechCounter ) ;
14271: LD_ADDR_EXP 12
14275: PUSH
14276: LD_EXP 12
14280: PPUSH
14281: CALL 79029 0 1
14285: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14286: LD_EXP 33
14290: PUSH
14291: LD_INT 0
14293: EQUAL
14294: PUSH
14295: LD_INT 29
14297: PPUSH
14298: CALL_OW 302
14302: NOT
14303: OR
14304: IFFALSE 14308
// exit ;
14306: GO 14452
// ruMechCounter := Dec ( ruMechCounter ) ;
14308: LD_ADDR_EXP 33
14312: PUSH
14313: LD_EXP 33
14317: PPUSH
14318: CALL 79051 0 1
14322: ST_TO_ADDR
// uc_side := 3 ;
14323: LD_ADDR_OWVAR 20
14327: PUSH
14328: LD_INT 3
14330: ST_TO_ADDR
// uc_nation := 3 ;
14331: LD_ADDR_OWVAR 21
14335: PUSH
14336: LD_INT 3
14338: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14339: LD_INT 0
14341: PPUSH
14342: LD_INT 5
14344: PUSH
14345: LD_INT 6
14347: PUSH
14348: LD_INT 7
14350: PUSH
14351: LD_INT 8
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: PUSH
14360: LD_OWVAR 67
14364: ARRAY
14365: PPUSH
14366: CALL_OW 383
// tmp := CreateHuman ;
14370: LD_ADDR_VAR 0 3
14374: PUSH
14375: CALL_OW 44
14379: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14380: LD_VAR 0 3
14384: PPUSH
14385: LD_INT 145
14387: PPUSH
14388: LD_INT 133
14390: PPUSH
14391: LD_INT 0
14393: PPUSH
14394: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14398: LD_VAR 0 3
14402: PPUSH
14403: LD_INT 29
14405: PPUSH
14406: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14410: LD_INT 35
14412: PPUSH
14413: CALL_OW 67
// if not HasTask ( tmp ) then
14417: LD_VAR 0 3
14421: PPUSH
14422: CALL_OW 314
14426: NOT
14427: IFFALSE 14441
// ComEnterUnit ( tmp , ruFac ) ;
14429: LD_VAR 0 3
14433: PPUSH
14434: LD_INT 29
14436: PPUSH
14437: CALL_OW 120
// until IsInUnit ( tmp ) ;
14441: LD_VAR 0 3
14445: PPUSH
14446: CALL_OW 310
14450: IFFALSE 14410
// end ; end ; end ;
14452: PPOPN 6
14454: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14455: LD_VAR 0 1
14459: PPUSH
14460: CALL_OW 255
14464: PUSH
14465: LD_INT 4
14467: EQUAL
14468: IFFALSE 14485
// ComMoveXY ( driver , 40 , 47 ) ;
14470: LD_VAR 0 1
14474: PPUSH
14475: LD_INT 40
14477: PPUSH
14478: LD_INT 47
14480: PPUSH
14481: CALL_OW 111
// if GetSide ( driver ) = 3 then
14485: LD_VAR 0 1
14489: PPUSH
14490: CALL_OW 255
14494: PUSH
14495: LD_INT 3
14497: EQUAL
14498: IFFALSE 14712
// begin ComMoveXY ( driver , 90 , 97 ) ;
14500: LD_VAR 0 1
14504: PPUSH
14505: LD_INT 90
14507: PPUSH
14508: LD_INT 97
14510: PPUSH
14511: CALL_OW 111
// if IsOk ( ruFac ) then
14515: LD_INT 29
14517: PPUSH
14518: CALL_OW 302
14522: IFFALSE 14636
// begin repeat wait ( 0 0$1 ) ;
14524: LD_INT 35
14526: PPUSH
14527: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14531: LD_INT 29
14533: PPUSH
14534: CALL_OW 313
14538: PUSH
14539: LD_INT 6
14541: LESS
14542: PUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 301
14552: OR
14553: IFFALSE 14524
// if IsDead ( driver ) then
14555: LD_VAR 0 1
14559: PPUSH
14560: CALL_OW 301
14564: IFFALSE 14568
// exit ;
14566: GO 14712
// repeat wait ( 0 0$10 ) ;
14568: LD_INT 350
14570: PPUSH
14571: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14575: LD_VAR 0 1
14579: PPUSH
14580: CALL_OW 314
14584: NOT
14585: PUSH
14586: LD_INT 29
14588: PPUSH
14589: CALL_OW 313
14593: PUSH
14594: LD_INT 6
14596: LESS
14597: AND
14598: IFFALSE 14612
// ComEnterUnit ( driver , ruFac ) ;
14600: LD_VAR 0 1
14604: PPUSH
14605: LD_INT 29
14607: PPUSH
14608: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 301
14621: PUSH
14622: LD_VAR 0 1
14626: PPUSH
14627: CALL_OW 310
14631: OR
14632: IFFALSE 14568
// end else
14634: GO 14712
// begin ComMoveXY ( driver , 142 , 148 ) ;
14636: LD_VAR 0 1
14640: PPUSH
14641: LD_INT 142
14643: PPUSH
14644: LD_INT 148
14646: PPUSH
14647: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14651: LD_INT 35
14653: PPUSH
14654: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14658: LD_VAR 0 1
14662: PPUSH
14663: CALL_OW 301
14667: PUSH
14668: LD_VAR 0 1
14672: PPUSH
14673: LD_INT 142
14675: PPUSH
14676: LD_INT 148
14678: PPUSH
14679: CALL_OW 307
14683: OR
14684: IFFALSE 14651
// if IsAt ( driver , 142 , 148 ) then
14686: LD_VAR 0 1
14690: PPUSH
14691: LD_INT 142
14693: PPUSH
14694: LD_INT 148
14696: PPUSH
14697: CALL_OW 307
14701: IFFALSE 14712
// RemoveUnit ( driver ) ;
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 64
// end ; end ; end ;
14712: PPOPN 4
14714: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14715: LD_VAR 0 2
14719: PPUSH
14720: CALL_OW 257
14724: PUSH
14725: LD_INT 3
14727: EQUAL
14728: PUSH
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 255
14738: PUSH
14739: LD_INT 3
14741: EQUAL
14742: AND
14743: PUSH
14744: LD_VAR 0 1
14748: PUSH
14749: LD_INT 29
14751: EQUAL
14752: AND
14753: IFFALSE 14767
// SetLives ( un , 1000 ) ;
14755: LD_VAR 0 2
14759: PPUSH
14760: LD_INT 1000
14762: PPUSH
14763: CALL_OW 234
// if GetTag ( b ) = 701 then
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 110
14776: PUSH
14777: LD_INT 701
14779: EQUAL
14780: IFFALSE 14806
// begin SetTag ( b , 0 ) ;
14782: LD_VAR 0 1
14786: PPUSH
14787: LD_INT 0
14789: PPUSH
14790: CALL_OW 109
// SetTag ( un , 0 ) ;
14794: LD_VAR 0 2
14798: PPUSH
14799: LD_INT 0
14801: PPUSH
14802: CALL_OW 109
// end ; end ;
14806: PPOPN 2
14808: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14809: LD_VAR 0 1
14813: PPUSH
14814: CALL_OW 255
14818: PUSH
14819: LD_INT 3
14821: PUSH
14822: LD_INT 6
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: IN
14829: PUSH
14830: LD_VAR 0 1
14834: PPUSH
14835: CALL_OW 263
14839: PUSH
14840: LD_INT 3
14842: EQUAL
14843: AND
14844: PUSH
14845: LD_EXP 7
14849: NOT
14850: AND
14851: IFFALSE 14870
// begin seenComputer := true ;
14853: LD_ADDR_EXP 7
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14861: LD_VAR 0 1
14865: PPUSH
14866: CALL 17809 0 1
// end ; end ;
14870: PPOPN 1
14872: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14873: LD_INT 0
14875: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14876: LD_VAR 0 1
14880: PPUSH
14881: LD_VAR 0 2
14885: PPUSH
14886: CALL 36031 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL_OW 255
14899: PUSH
14900: LD_INT 3
14902: EQUAL
14903: PUSH
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL_OW 263
14913: PUSH
14914: LD_INT 1
14916: EQUAL
14917: AND
14918: PUSH
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 264
14928: PUSH
14929: LD_INT 42
14931: PUSH
14932: LD_INT 43
14934: PUSH
14935: LD_INT 44
14937: PUSH
14938: LD_INT 46
14940: PUSH
14941: LD_INT 45
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: IN
14951: AND
14952: IFFALSE 14982
// begin SetTag ( vehicle , 300 ) ;
14954: LD_VAR 0 1
14958: PPUSH
14959: LD_INT 300
14961: PPUSH
14962: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14966: LD_ADDR_EXP 34
14970: PUSH
14971: LD_EXP 34
14975: PUSH
14976: LD_VAR 0 1
14980: UNION
14981: ST_TO_ADDR
// end ; end ;
14982: PPOPN 3
14984: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
14985: LD_INT 0
14987: PPUSH
// begin if InArea ( x , y , ruCrates ) then
14988: LD_VAR 0 2
14992: PPUSH
14993: LD_VAR 0 3
14997: PPUSH
14998: LD_INT 13
15000: PPUSH
15001: CALL_OW 309
15005: IFFALSE 15136
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15007: LD_ADDR_VAR 0 6
15011: PUSH
15012: LD_INT 22
15014: PUSH
15015: LD_INT 3
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 50
15024: PUSH
15025: EMPTY
15026: LIST
15027: PUSH
15028: LD_INT 34
15030: PUSH
15031: LD_INT 51
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: LIST
15042: PPUSH
15043: CALL_OW 69
15047: ST_TO_ADDR
// if not cargo then
15048: LD_VAR 0 6
15052: NOT
15053: IFFALSE 15057
// exit ;
15055: GO 15136
// wait ( 0 0$5 ) ;
15057: LD_INT 175
15059: PPUSH
15060: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15064: LD_VAR 0 6
15068: PUSH
15069: LD_INT 1
15071: ARRAY
15072: PPUSH
15073: LD_INT 28
15075: PPUSH
15076: CALL_OW 296
15080: PUSH
15081: LD_INT 6
15083: LESS
15084: PUSH
15085: LD_VAR 0 6
15089: PUSH
15090: LD_INT 1
15092: ARRAY
15093: PPUSH
15094: CALL_OW 261
15098: PUSH
15099: LD_INT 50
15101: LESS
15102: AND
15103: IFFALSE 15117
// ComMoveUnit ( cargo , ruDep ) ;
15105: LD_VAR 0 6
15109: PPUSH
15110: LD_INT 28
15112: PPUSH
15113: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15117: LD_VAR 0 6
15121: PPUSH
15122: LD_VAR 0 2
15126: PPUSH
15127: LD_VAR 0 3
15131: PPUSH
15132: CALL_OW 177
// end ; end ;
15136: PPOPN 6
15138: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 264
15148: PUSH
15149: LD_INT 45
15151: EQUAL
15152: IFFALSE 15169
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15154: LD_ADDR_EXP 11
15158: PUSH
15159: LD_EXP 11
15163: PPUSH
15164: CALL 79029 0 1
15168: ST_TO_ADDR
// end ;
15169: PPOPN 4
15171: END
// on BuildingComplete ( b ) do var i , tmp ;
15172: LD_INT 0
15174: PPUSH
15175: PPUSH
// begin if GetSide ( b ) = 3 then
15176: LD_VAR 0 1
15180: PPUSH
15181: CALL_OW 255
15185: PUSH
15186: LD_INT 3
15188: EQUAL
15189: IFFALSE 15286
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15191: LD_ADDR_EXP 35
15195: PUSH
15196: LD_EXP 35
15200: PPUSH
15201: LD_INT 1
15203: PPUSH
15204: CALL_OW 3
15208: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 266
15218: PUSH
15219: LD_INT 4
15221: EQUAL
15222: IFFALSE 15233
// ComUpgrade ( b ) ;
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15233: LD_VAR 0 1
15237: PPUSH
15238: CALL_OW 266
15242: PUSH
15243: LD_INT 32
15245: PUSH
15246: LD_INT 33
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: IN
15253: IFFALSE 15286
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_INT 46
15262: PUSH
15263: LD_INT 45
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 1
15272: PPUSH
15273: LD_INT 2
15275: PPUSH
15276: CALL_OW 12
15280: ARRAY
15281: PPUSH
15282: CALL_OW 208
// end ; end ; end_of_file
15286: PPOPN 3
15288: END
// export function Action ; var i , tmp , un , inUnit ; begin
15289: LD_INT 0
15291: PPUSH
15292: PPUSH
15293: PPUSH
15294: PPUSH
15295: PPUSH
// Video ( true ) ;
15296: LD_INT 1
15298: PPUSH
15299: CALL 77640 0 1
// invincibleMode := true ;
15303: LD_ADDR_EXP 5
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15311: LD_INT 50
15313: PPUSH
15314: LD_INT 12
15316: PPUSH
15317: LD_INT 1
15319: PPUSH
15320: LD_INT 56
15322: NEG
15323: PPUSH
15324: CALL 77554 0 4
// CenterOnXY ( 50 , 12 ) ;
15328: LD_INT 50
15330: PPUSH
15331: LD_INT 12
15333: PPUSH
15334: CALL_OW 84
// wait ( 0 0$3 ) ;
15338: LD_INT 105
15340: PPUSH
15341: CALL_OW 67
// PrepareStartRussianAttack ;
15345: CALL 10014 0 0
// CenterOnXY ( 66 , 47 ) ;
15349: LD_INT 66
15351: PPUSH
15352: LD_INT 47
15354: PPUSH
15355: CALL_OW 84
// wait ( 0 0$5 ) ;
15359: LD_INT 175
15361: PPUSH
15362: CALL_OW 67
// case gammaCommander of 1 :
15366: LD_EXP 13
15370: PUSH
15371: LD_INT 1
15373: DOUBLE
15374: EQUAL
15375: IFTRUE 15379
15377: GO 15394
15379: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15380: LD_EXP 16
15384: PPUSH
15385: LD_STRING D1-Don-1
15387: PPUSH
15388: CALL_OW 88
15392: GO 15441
15394: LD_INT 2
15396: DOUBLE
15397: EQUAL
15398: IFTRUE 15402
15400: GO 15417
15402: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15403: LD_EXP 15
15407: PPUSH
15408: LD_STRING D1-Brown-1
15410: PPUSH
15411: CALL_OW 88
15415: GO 15441
15417: LD_INT 3
15419: DOUBLE
15420: EQUAL
15421: IFTRUE 15425
15423: GO 15440
15425: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15426: LD_EXP 25
15430: PPUSH
15431: LD_STRING D1-VanH-1
15433: PPUSH
15434: CALL_OW 88
15438: GO 15441
15440: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15441: LD_ADDR_VAR 0 3
15445: PUSH
15446: LD_INT 22
15448: PUSH
15449: LD_INT 1
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 33
15458: PUSH
15459: LD_INT 2
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 61
15468: PUSH
15469: EMPTY
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: PPUSH
15477: CALL_OW 69
15481: ST_TO_ADDR
// if tmp then
15482: LD_VAR 0 3
15486: IFFALSE 15503
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15488: LD_VAR 0 3
15492: PPUSH
15493: LD_INT 74
15495: PPUSH
15496: LD_INT 44
15498: PPUSH
15499: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15503: LD_ADDR_VAR 0 3
15507: PUSH
15508: LD_INT 22
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 25
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PUSH
15537: LD_EXP 16
15541: PUSH
15542: LD_EXP 15
15546: PUSH
15547: LD_EXP 25
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: DIFF
15557: ST_TO_ADDR
// if tmp then
15558: LD_VAR 0 3
15562: IFFALSE 15640
// for i in tmp do
15564: LD_ADDR_VAR 0 2
15568: PUSH
15569: LD_VAR 0 3
15573: PUSH
15574: FOR_IN
15575: IFFALSE 15638
// begin inUnit := IsInUnit ( i ) ;
15577: LD_ADDR_VAR 0 5
15581: PUSH
15582: LD_VAR 0 2
15586: PPUSH
15587: CALL_OW 310
15591: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15592: LD_VAR 0 5
15596: PUSH
15597: LD_VAR 0 5
15601: PPUSH
15602: CALL_OW 266
15606: PUSH
15607: LD_INT 32
15609: PUSH
15610: LD_INT 31
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: IN
15617: AND
15618: IFFALSE 15636
// tmp := tmp diff i ;
15620: LD_ADDR_VAR 0 3
15624: PUSH
15625: LD_VAR 0 3
15629: PUSH
15630: LD_VAR 0 2
15634: DIFF
15635: ST_TO_ADDR
// end ;
15636: GO 15574
15638: POP
15639: POP
// if tmp then
15640: LD_VAR 0 3
15644: IFFALSE 15734
// begin ComExitAll ( tmp ) ;
15646: LD_VAR 0 3
15650: PPUSH
15651: CALL 78149 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15655: LD_VAR 0 3
15659: PPUSH
15660: LD_INT 74
15662: PPUSH
15663: LD_INT 44
15665: PPUSH
15666: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15670: LD_ADDR_VAR 0 3
15674: PUSH
15675: LD_INT 22
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 25
15687: PUSH
15688: LD_INT 4
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 69
15703: ST_TO_ADDR
// if tmp then
15704: LD_VAR 0 3
15708: IFFALSE 15734
// begin ComExitAll ( tmp ) ;
15710: LD_VAR 0 3
15714: PPUSH
15715: CALL 78149 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15719: LD_VAR 0 3
15723: PPUSH
15724: LD_INT 66
15726: PPUSH
15727: LD_INT 28
15729: PPUSH
15730: CALL_OW 171
// end ; end ; game_speed := 4 ;
15734: LD_ADDR_OWVAR 65
15738: PUSH
15739: LD_INT 4
15741: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15742: LD_INT 70
15744: PPUSH
15745: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15749: LD_EXP 29
15753: PPUSH
15754: LD_STRING D1-Har-1
15756: PPUSH
15757: CALL_OW 94
// case gammaCommander of 1 :
15761: LD_EXP 13
15765: PUSH
15766: LD_INT 1
15768: DOUBLE
15769: EQUAL
15770: IFTRUE 15774
15772: GO 15789
15774: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15775: LD_EXP 16
15779: PPUSH
15780: LD_STRING D1-Don-2
15782: PPUSH
15783: CALL_OW 88
15787: GO 15836
15789: LD_INT 2
15791: DOUBLE
15792: EQUAL
15793: IFTRUE 15797
15795: GO 15812
15797: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15798: LD_EXP 15
15802: PPUSH
15803: LD_STRING D1-Brown-2
15805: PPUSH
15806: CALL_OW 88
15810: GO 15836
15812: LD_INT 3
15814: DOUBLE
15815: EQUAL
15816: IFTRUE 15820
15818: GO 15835
15820: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15821: LD_EXP 25
15825: PPUSH
15826: LD_STRING D1-VanH-2
15828: PPUSH
15829: CALL_OW 88
15833: GO 15836
15835: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15836: LD_EXP 29
15840: PPUSH
15841: LD_STRING D1-Har-2
15843: PPUSH
15844: CALL_OW 94
// invincibleMode := false ;
15848: LD_ADDR_EXP 5
15852: PUSH
15853: LD_INT 0
15855: ST_TO_ADDR
// Video ( false ) ;
15856: LD_INT 0
15858: PPUSH
15859: CALL 77640 0 1
// ChangeMissionObjectives ( M1 ) ;
15863: LD_STRING M1
15865: PPUSH
15866: CALL_OW 337
// SaveForQuickRestart ;
15870: CALL_OW 22
// wait ( 2 2$30 ) ;
15874: LD_INT 5250
15876: PPUSH
15877: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15881: LD_INT 1
15883: PPUSH
15884: CALL 12997 0 1
// wait ( 4 4$30 ) ;
15888: LD_INT 9450
15890: PPUSH
15891: CALL_OW 67
// if Difficulty > 1 then
15895: LD_OWVAR 67
15899: PUSH
15900: LD_INT 1
15902: GREATER
15903: IFFALSE 15912
// PrepareRussianAttack ( 2 ) ;
15905: LD_INT 2
15907: PPUSH
15908: CALL 12997 0 1
// if Difficulty > 2 then
15912: LD_OWVAR 67
15916: PUSH
15917: LD_INT 2
15919: GREATER
15920: IFFALSE 16079
// begin for i := 1 to 4 do
15922: LD_ADDR_VAR 0 2
15926: PUSH
15927: DOUBLE
15928: LD_INT 1
15930: DEC
15931: ST_TO_ADDR
15932: LD_INT 4
15934: PUSH
15935: FOR_TO
15936: IFFALSE 16021
// begin uc_side := 6 ;
15938: LD_ADDR_OWVAR 20
15942: PUSH
15943: LD_INT 6
15945: ST_TO_ADDR
// uc_nation := 3 ;
15946: LD_ADDR_OWVAR 21
15950: PUSH
15951: LD_INT 3
15953: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15954: LD_INT 0
15956: PPUSH
15957: LD_INT 7
15959: PPUSH
15960: CALL_OW 381
// un := CreateHuman ;
15964: LD_ADDR_VAR 0 4
15968: PUSH
15969: CALL_OW 44
15973: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15974: LD_VAR 0 4
15978: PPUSH
15979: LD_INT 122
15981: PPUSH
15982: LD_INT 89
15984: PPUSH
15985: LD_INT 3
15987: PPUSH
15988: LD_INT 0
15990: PPUSH
15991: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
15995: LD_VAR 0 4
15999: PPUSH
16000: LD_INT 88
16002: PPUSH
16003: LD_INT 42
16005: PPUSH
16006: CALL_OW 114
// AddComHold ( un ) ;
16010: LD_VAR 0 4
16014: PPUSH
16015: CALL_OW 200
// end ;
16019: GO 15935
16021: POP
16022: POP
// PrepareScientist ( false , 6 ) ;
16023: LD_INT 0
16025: PPUSH
16026: LD_INT 6
16028: PPUSH
16029: CALL_OW 384
// un := CreateHuman ;
16033: LD_ADDR_VAR 0 4
16037: PUSH
16038: CALL_OW 44
16042: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16043: LD_VAR 0 4
16047: PPUSH
16048: LD_INT 122
16050: PPUSH
16051: LD_INT 89
16053: PPUSH
16054: LD_INT 3
16056: PPUSH
16057: LD_INT 0
16059: PPUSH
16060: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16064: LD_VAR 0 4
16068: PPUSH
16069: LD_INT 91
16071: PPUSH
16072: LD_INT 48
16074: PPUSH
16075: CALL_OW 111
// end ; end ;
16079: LD_VAR 0 1
16083: RET
// every 0 0$1 trigger invincibleMode do var i ;
16084: LD_EXP 5
16088: IFFALSE 16185
16090: GO 16092
16092: DISABLE
16093: LD_INT 0
16095: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16096: LD_ADDR_VAR 0 1
16100: PUSH
16101: LD_INT 22
16103: PUSH
16104: LD_INT 1
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 2
16113: PUSH
16114: LD_INT 21
16116: PUSH
16117: LD_INT 3
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 21
16126: PUSH
16127: LD_INT 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 3
16141: PUSH
16142: LD_INT 24
16144: PUSH
16145: LD_INT 900
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: LIST
16160: PPUSH
16161: CALL_OW 69
16165: PUSH
16166: FOR_IN
16167: IFFALSE 16183
// SetLives ( i , 900 ) ;
16169: LD_VAR 0 1
16173: PPUSH
16174: LD_INT 900
16176: PPUSH
16177: CALL_OW 234
16181: GO 16166
16183: POP
16184: POP
// end ;
16185: PPOPN 1
16187: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16188: LD_OWVAR 1
16192: PUSH
16193: LD_INT 14700
16195: GREATER
16196: IFFALSE 17806
16198: GO 16200
16200: DISABLE
16201: LD_INT 0
16203: PPUSH
16204: PPUSH
// begin PrepareSupportFromDelta ;
16205: CALL 4052 0 0
// deltaSupport := true ;
16209: LD_ADDR_EXP 6
16213: PUSH
16214: LD_INT 1
16216: ST_TO_ADDR
// dialog := false ;
16217: LD_ADDR_VAR 0 1
16221: PUSH
16222: LD_INT 0
16224: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16225: LD_EXP 21
16229: PPUSH
16230: CALL_OW 302
16234: IFFALSE 16256
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16236: LD_ADDR_VAR 0 1
16240: PUSH
16241: LD_EXP 21
16245: PPUSH
16246: LD_STRING D2-Glad-1
16248: PPUSH
16249: CALL_OW 88
16253: ST_TO_ADDR
16254: GO 16338
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16256: LD_ADDR_VAR 0 1
16260: PUSH
16261: LD_INT 22
16263: PUSH
16264: LD_INT 1
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 120
16273: PUSH
16274: LD_INT 107
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 23
16293: PUSH
16294: LD_INT 1
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: PPUSH
16307: CALL_OW 69
16311: PUSH
16312: LD_EXP 27
16316: PUSH
16317: LD_EXP 26
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: DIFF
16326: PPUSH
16327: LD_STRING D2-Sol1-1
16329: PPUSH
16330: LD_STRING D2-FSol1-1
16332: PPUSH
16333: CALL 19974 0 3
16337: ST_TO_ADDR
// if dialog then
16338: LD_VAR 0 1
16342: IFFALSE 16443
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16344: LD_EXP 16
16348: PPUSH
16349: CALL_OW 302
16353: PUSH
16354: LD_EXP 13
16358: PUSH
16359: LD_INT 1
16361: EQUAL
16362: AND
16363: IFFALSE 16377
// Say ( Donaldson , D2-Don-1 ) ;
16365: LD_EXP 16
16369: PPUSH
16370: LD_STRING D2-Don-1
16372: PPUSH
16373: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16377: LD_EXP 15
16381: PPUSH
16382: CALL_OW 302
16386: PUSH
16387: LD_EXP 13
16391: PUSH
16392: LD_INT 2
16394: EQUAL
16395: AND
16396: IFFALSE 16410
// Say ( Brown , D2-Brown-1 ) ;
16398: LD_EXP 15
16402: PPUSH
16403: LD_STRING D2-Brown-1
16405: PPUSH
16406: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16410: LD_EXP 25
16414: PPUSH
16415: CALL_OW 302
16419: PUSH
16420: LD_EXP 13
16424: PUSH
16425: LD_INT 3
16427: EQUAL
16428: AND
16429: IFFALSE 16443
// Say ( Houten , D2-VanH-1 ) ;
16431: LD_EXP 25
16435: PPUSH
16436: LD_STRING D2-VanH-1
16438: PPUSH
16439: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16443: LD_INT 3
16445: PPUSH
16446: CALL 12997 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16450: LD_STRING 07_time
16452: PPUSH
16453: LD_INT 18900
16455: PPUSH
16456: CALL_OW 30
16460: PUSH
16461: LD_INT 3
16463: DIV
16464: PPUSH
16465: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16469: LD_INT 34
16471: PPUSH
16472: LD_INT 1
16474: PPUSH
16475: CALL_OW 321
16479: PUSH
16480: LD_INT 2
16482: EQUAL
16483: IFFALSE 16492
// SetAchievement ( ACH_HEAVYGUN ) ;
16485: LD_STRING ACH_HEAVYGUN
16487: PPUSH
16488: CALL_OW 543
// PrepareMacmillanSquad ;
16492: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16496: LD_INT 35
16498: PPUSH
16499: CALL_OW 67
// DialogueOn ;
16503: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16507: LD_EXP 14
16511: PPUSH
16512: CALL_OW 87
// dwait ( 0 0$2 ) ;
16516: LD_INT 70
16518: PPUSH
16519: CALL_OW 68
// DialogueOff ;
16523: CALL_OW 7
// wait ( 0 0$10 ) ;
16527: LD_INT 350
16529: PPUSH
16530: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16534: LD_INT 1
16536: PPUSH
16537: CALL_OW 427
// p := 0 ;
16541: LD_ADDR_VAR 0 2
16545: PUSH
16546: LD_INT 0
16548: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16549: LD_INT 35
16551: PPUSH
16552: CALL_OW 67
// p := Inc ( p ) ;
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_VAR 0 2
16565: PPUSH
16566: CALL 79029 0 1
16570: ST_TO_ADDR
// if p > 300 then
16571: LD_VAR 0 2
16575: PUSH
16576: LD_INT 300
16578: GREATER
16579: IFFALSE 16583
// exit ;
16581: GO 17806
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16583: LD_EXP 14
16587: PPUSH
16588: LD_INT 15
16590: PPUSH
16591: CALL_OW 308
16595: PUSH
16596: LD_EXP 14
16600: PPUSH
16601: CALL_OW 310
16605: PPUSH
16606: LD_INT 15
16608: PPUSH
16609: CALL_OW 308
16613: OR
16614: PUSH
16615: LD_EXP 14
16619: PPUSH
16620: LD_EXP 27
16624: PPUSH
16625: CALL_OW 296
16629: PUSH
16630: LD_INT 10
16632: LESS
16633: OR
16634: PUSH
16635: LD_INT 22
16637: PUSH
16638: LD_INT 1
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: LD_INT 120
16650: PUSH
16651: LD_INT 106
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 120
16660: PUSH
16661: LD_INT 107
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 91
16675: PUSH
16676: LD_EXP 14
16680: PUSH
16681: LD_INT 12
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: OR
16699: IFFALSE 16549
// DialogueOn ;
16701: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16705: LD_EXP 14
16709: PPUSH
16710: LD_STRING D3-JMM-1
16712: PPUSH
16713: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16717: LD_EXP 16
16721: PPUSH
16722: CALL_OW 302
16726: PUSH
16727: LD_EXP 13
16731: PUSH
16732: LD_INT 1
16734: EQUAL
16735: AND
16736: IFFALSE 16752
// Say ( Donaldson , D3-Don-1 ) else
16738: LD_EXP 16
16742: PPUSH
16743: LD_STRING D3-Don-1
16745: PPUSH
16746: CALL_OW 88
16750: GO 16848
// begin if gammaCommander = 1 then
16752: LD_EXP 13
16756: PUSH
16757: LD_INT 1
16759: EQUAL
16760: IFFALSE 16848
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16762: LD_INT 22
16764: PUSH
16765: LD_INT 1
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 21
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 23
16784: PUSH
16785: LD_INT 1
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 120
16794: PUSH
16795: LD_INT 106
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 26
16804: PUSH
16805: LD_INT 1
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: PPUSH
16819: CALL_OW 69
16823: PPUSH
16824: LD_STRING D3-Sol1-1
16826: PPUSH
16827: LD_STRING 
16829: PPUSH
16830: CALL 19974 0 3
16834: IFFALSE 16848
// Say ( JMM , D3-JMM-2 ) ;
16836: LD_EXP 14
16840: PPUSH
16841: LD_STRING D3-JMM-2
16843: PPUSH
16844: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16848: LD_EXP 15
16852: PPUSH
16853: CALL_OW 302
16857: PUSH
16858: LD_EXP 13
16862: PUSH
16863: LD_INT 2
16865: EQUAL
16866: AND
16867: IFFALSE 16883
// Say ( Brown , D3-Brown-1 ) else
16869: LD_EXP 15
16873: PPUSH
16874: LD_STRING D3-Brown-1
16876: PPUSH
16877: CALL_OW 88
16881: GO 16979
// begin if gammaCommander = 2 then
16883: LD_EXP 13
16887: PUSH
16888: LD_INT 2
16890: EQUAL
16891: IFFALSE 16979
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16893: LD_INT 22
16895: PUSH
16896: LD_INT 1
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 21
16905: PUSH
16906: LD_INT 1
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 23
16915: PUSH
16916: LD_INT 1
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 120
16925: PUSH
16926: LD_INT 106
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 26
16935: PUSH
16936: LD_INT 1
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: PPUSH
16950: CALL_OW 69
16954: PPUSH
16955: LD_STRING D3-Sol1-1a
16957: PPUSH
16958: LD_STRING 
16960: PPUSH
16961: CALL 19974 0 3
16965: IFFALSE 16979
// Say ( JMM , D3-JMM-2 ) ;
16967: LD_EXP 14
16971: PPUSH
16972: LD_STRING D3-JMM-2
16974: PPUSH
16975: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16979: LD_EXP 25
16983: PPUSH
16984: CALL_OW 302
16988: PUSH
16989: LD_EXP 13
16993: PUSH
16994: LD_INT 3
16996: EQUAL
16997: AND
16998: IFFALSE 17014
// Say ( Houten , D3-VanH-1 ) else
17000: LD_EXP 25
17004: PPUSH
17005: LD_STRING D3-VanH-1
17007: PPUSH
17008: CALL_OW 88
17012: GO 17110
// begin if gammaCommander = 3 then
17014: LD_EXP 13
17018: PUSH
17019: LD_INT 3
17021: EQUAL
17022: IFFALSE 17110
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17024: LD_INT 22
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 21
17036: PUSH
17037: LD_INT 1
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 23
17046: PUSH
17047: LD_INT 1
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 120
17056: PUSH
17057: LD_INT 106
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 26
17066: PUSH
17067: LD_INT 1
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: PPUSH
17081: CALL_OW 69
17085: PPUSH
17086: LD_STRING D3-Sol1-1b
17088: PPUSH
17089: LD_STRING 
17091: PPUSH
17092: CALL 19974 0 3
17096: IFFALSE 17110
// Say ( JMM , D3-JMM-2 ) ;
17098: LD_EXP 14
17102: PPUSH
17103: LD_STRING D3-JMM-2
17105: PPUSH
17106: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17110: LD_EXP 27
17114: PPUSH
17115: CALL_OW 302
17119: IFFALSE 17147
// begin Say ( Joan , D3a-Joan-1 ) ;
17121: LD_EXP 27
17125: PPUSH
17126: LD_STRING D3a-Joan-1
17128: PPUSH
17129: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17133: LD_EXP 14
17137: PPUSH
17138: LD_STRING D3a-JMM-1
17140: PPUSH
17141: CALL_OW 88
// end else
17145: GO 17581
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17147: LD_STRING 06_JoanStatus_1
17149: PPUSH
17150: LD_INT 0
17152: PPUSH
17153: CALL_OW 30
17157: PUSH
17158: LD_INT 1
17160: EQUAL
17161: IFFALSE 17581
// begin Say ( JMM , D3b-JMM-1 ) ;
17163: LD_EXP 14
17167: PPUSH
17168: LD_STRING D3b-JMM-1
17170: PPUSH
17171: CALL_OW 88
// dialog := false ;
17175: LD_ADDR_VAR 0 1
17179: PUSH
17180: LD_INT 0
17182: ST_TO_ADDR
// if gammaCommander = 1 then
17183: LD_EXP 13
17187: PUSH
17188: LD_INT 1
17190: EQUAL
17191: IFFALSE 17302
// if IsOK ( Donaldson ) then
17193: LD_EXP 16
17197: PPUSH
17198: CALL_OW 302
17202: IFFALSE 17224
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17204: LD_ADDR_VAR 0 1
17208: PUSH
17209: LD_EXP 16
17213: PPUSH
17214: LD_STRING D3b-Don-1
17216: PPUSH
17217: CALL_OW 88
17221: ST_TO_ADDR
17222: GO 17302
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17224: LD_ADDR_VAR 0 1
17228: PUSH
17229: LD_INT 22
17231: PUSH
17232: LD_INT 1
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 21
17241: PUSH
17242: LD_INT 1
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 23
17251: PUSH
17252: LD_INT 1
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 120
17261: PUSH
17262: LD_INT 106
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 26
17271: PUSH
17272: LD_INT 1
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: PPUSH
17286: CALL_OW 69
17290: PPUSH
17291: LD_STRING D3b-Sol1-1
17293: PPUSH
17294: LD_STRING 
17296: PPUSH
17297: CALL 19974 0 3
17301: ST_TO_ADDR
// if gammaCommander = 2 then
17302: LD_EXP 13
17306: PUSH
17307: LD_INT 2
17309: EQUAL
17310: IFFALSE 17421
// if IsOk ( Brown ) then
17312: LD_EXP 15
17316: PPUSH
17317: CALL_OW 302
17321: IFFALSE 17343
// dialog := Say ( Brown , D3b-Brown-1 ) else
17323: LD_ADDR_VAR 0 1
17327: PUSH
17328: LD_EXP 15
17332: PPUSH
17333: LD_STRING D3b-Brown-1
17335: PPUSH
17336: CALL_OW 88
17340: ST_TO_ADDR
17341: GO 17421
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17343: LD_ADDR_VAR 0 1
17347: PUSH
17348: LD_INT 22
17350: PUSH
17351: LD_INT 1
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 21
17360: PUSH
17361: LD_INT 1
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 23
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 120
17380: PUSH
17381: LD_INT 106
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 26
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: PPUSH
17405: CALL_OW 69
17409: PPUSH
17410: LD_STRING D3b-Sol1-1
17412: PPUSH
17413: LD_STRING 
17415: PPUSH
17416: CALL 19974 0 3
17420: ST_TO_ADDR
// if gammaCommander = 3 then
17421: LD_EXP 13
17425: PUSH
17426: LD_INT 3
17428: EQUAL
17429: IFFALSE 17540
// if IsOk ( Houten ) then
17431: LD_EXP 25
17435: PPUSH
17436: CALL_OW 302
17440: IFFALSE 17462
// dialog := Say ( Houten , D3b-VanH-1 ) else
17442: LD_ADDR_VAR 0 1
17446: PUSH
17447: LD_EXP 25
17451: PPUSH
17452: LD_STRING D3b-VanH-1
17454: PPUSH
17455: CALL_OW 88
17459: ST_TO_ADDR
17460: GO 17540
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17462: LD_ADDR_VAR 0 1
17466: PUSH
17467: LD_INT 22
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 21
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 23
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 120
17499: PUSH
17500: LD_INT 106
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 26
17509: PUSH
17510: LD_INT 1
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: PPUSH
17529: LD_STRING D3b-Sol1-1
17531: PPUSH
17532: LD_STRING 
17534: PPUSH
17535: CALL 19974 0 3
17539: ST_TO_ADDR
// if dialog then
17540: LD_VAR 0 1
17544: IFFALSE 17581
// begin Say ( JMM , D3b-JMM-2 ) ;
17546: LD_EXP 14
17550: PPUSH
17551: LD_STRING D3b-JMM-2
17553: PPUSH
17554: CALL_OW 88
// if IsOK ( Lisa ) then
17558: LD_EXP 19
17562: PPUSH
17563: CALL_OW 302
17567: IFFALSE 17581
// Say ( Lisa , D3b-Lisa-2 ) ;
17569: LD_EXP 19
17573: PPUSH
17574: LD_STRING D3b-Lisa-2
17576: PPUSH
17577: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17581: LD_EXP 7
17585: NOT
17586: IFFALSE 17594
// begin DialogueOff ;
17588: CALL_OW 7
// exit ;
17592: GO 17806
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17594: LD_INT 22
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 21
17606: PUSH
17607: LD_INT 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 23
17616: PUSH
17617: LD_INT 1
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 2
17626: PUSH
17627: LD_INT 120
17629: PUSH
17630: LD_INT 106
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 120
17639: PUSH
17640: LD_INT 107
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 26
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: PPUSH
17669: CALL_OW 69
17673: PPUSH
17674: LD_STRING DCa-Sol1-1
17676: PPUSH
17677: LD_STRING 
17679: PPUSH
17680: CALL 19974 0 3
17684: IFFALSE 17698
// Say ( JMM , DCb-JMM-1 ) ;
17686: LD_EXP 14
17690: PPUSH
17691: LD_STRING DCb-JMM-1
17693: PPUSH
17694: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17698: LD_INT 22
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 21
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 23
17720: PUSH
17721: LD_INT 1
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: LD_INT 120
17733: PUSH
17734: LD_INT 106
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 120
17743: PUSH
17744: LD_INT 107
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 26
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: PPUSH
17773: CALL_OW 69
17777: PPUSH
17778: LD_STRING DCb-Sol1-1
17780: PPUSH
17781: LD_STRING 
17783: PPUSH
17784: CALL 19974 0 3
17788: IFFALSE 17802
// Say ( JMM , DCb-JMM-2 ) ;
17790: LD_EXP 14
17794: PPUSH
17795: LD_STRING DCb-JMM-2
17797: PPUSH
17798: CALL_OW 88
// DialogueOff ;
17802: CALL_OW 7
// end ;
17806: PPOPN 2
17808: END
// export function DialogSeenComputer ( un ) ; begin
17809: LD_INT 0
17811: PPUSH
// if jmmArrival then
17812: LD_EXP 8
17816: IFFALSE 17820
// exit ;
17818: GO 17886
// CenterOnUnits ( un ) ;
17820: LD_VAR 0 1
17824: PPUSH
17825: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17829: LD_INT 22
17831: PUSH
17832: LD_INT 1
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: LD_INT 120
17844: PUSH
17845: LD_INT 106
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 120
17854: PUSH
17855: LD_INT 107
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: LIST
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PPUSH
17871: CALL_OW 69
17875: PPUSH
17876: LD_STRING DC-Sol1-1
17878: PPUSH
17879: LD_STRING DC-FSol1-1
17881: PPUSH
17882: CALL 19974 0 3
// end ;
17886: LD_VAR 0 2
17890: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17891: LD_EXP 8
17895: PUSH
17896: LD_OWVAR 1
17900: PUSH
17901: LD_INT 48300
17903: GREATEREQUAL
17904: AND
17905: PUSH
17906: LD_EXP 14
17910: PPUSH
17911: CALL_OW 302
17915: AND
17916: IFFALSE 18379
17918: GO 17920
17920: DISABLE
// begin wait ( 2 2$00 ) ;
17921: LD_INT 4200
17923: PPUSH
17924: CALL_OW 67
// DialogueOn ;
17928: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17932: LD_EXP 30
17936: PPUSH
17937: LD_STRING D4-Pow-1
17939: PPUSH
17940: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17944: LD_EXP 14
17948: PPUSH
17949: LD_STRING D4-JMM-1
17951: PPUSH
17952: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17956: LD_EXP 30
17960: PPUSH
17961: LD_STRING D4-Pow-2
17963: PPUSH
17964: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17968: LD_EXP 14
17972: PPUSH
17973: LD_STRING D4-JMM-2
17975: PPUSH
17976: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17980: LD_EXP 30
17984: PPUSH
17985: LD_STRING D4-Pow-3
17987: PPUSH
17988: CALL_OW 94
// DialogueOff ;
17992: CALL_OW 7
// wait ( 1 1$00 ) ;
17996: LD_INT 2100
17998: PPUSH
17999: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18003: LD_INT 1
18005: PPUSH
18006: CALL_OW 427
// wait ( 7 7$30 ) ;
18010: LD_INT 15750
18012: PPUSH
18013: CALL_OW 67
// DialogueOn ;
18017: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18021: LD_EXP 30
18025: PPUSH
18026: LD_STRING D4a-Pow-1
18028: PPUSH
18029: CALL_OW 94
// DialogueOff ;
18033: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18037: LD_INT 1
18039: PPUSH
18040: CALL_OW 427
// SikorskiCounter ;
18044: CALL 19758 0 0
// PrepareSikorsky ;
18048: CALL 6238 0 0
// CenterNowOnUnits ( Sikorski ) ;
18052: LD_EXP 28
18056: PPUSH
18057: CALL_OW 87
// DialogueOn ;
18061: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18065: LD_EXP 28
18069: PPUSH
18070: LD_STRING D5-Sik-1
18072: PPUSH
18073: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 then
18077: LD_INT 11
18079: PPUSH
18080: LD_INT 22
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PPUSH
18090: CALL_OW 70
18094: PUSH
18095: LD_INT 1
18097: GREATER
18098: IFFALSE 18150
// begin Say ( JMM , D5-JMM-1 ) ;
18100: LD_EXP 14
18104: PPUSH
18105: LD_STRING D5-JMM-1
18107: PPUSH
18108: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18112: LD_EXP 28
18116: PPUSH
18117: LD_STRING D7a-Sik-1
18119: PPUSH
18120: CALL_OW 88
// DialogueOff ;
18124: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18128: LD_STRING M2
18130: PPUSH
18131: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18135: LD_INT 1
18137: PPUSH
18138: CALL_OW 427
// SikorskiAttack ;
18142: CALL 7861 0 0
// exit ;
18146: GO 18379
// end else
18148: GO 18195
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18150: LD_INT 15
18152: PPUSH
18153: LD_INT 81
18155: PUSH
18156: LD_INT 1
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 70
18167: IFFALSE 18183
// Say ( JMM , D5-JMM-1b ) else
18169: LD_EXP 14
18173: PPUSH
18174: LD_STRING D5-JMM-1b
18176: PPUSH
18177: CALL_OW 88
18181: GO 18195
// Say ( JMM , D5-JMM-1a ) ;
18183: LD_EXP 14
18187: PPUSH
18188: LD_STRING D5-JMM-1a
18190: PPUSH
18191: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18195: LD_EXP 28
18199: PPUSH
18200: LD_STRING D5-Sik-2
18202: PPUSH
18203: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18207: LD_STRING QSikorski
18209: PPUSH
18210: CALL_OW 97
18214: PUSH
18215: LD_INT 1
18217: DOUBLE
18218: EQUAL
18219: IFTRUE 18223
18221: GO 18246
18223: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18224: LD_EXP 28
18228: PPUSH
18229: LD_STRING D5a-Sik-1
18231: PPUSH
18232: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18236: LD_ADDR_EXP 4
18240: PUSH
18241: LD_INT 2100
18243: ST_TO_ADDR
// end ; 2 :
18244: GO 18333
18246: LD_INT 2
18248: DOUBLE
18249: EQUAL
18250: IFTRUE 18254
18252: GO 18277
18254: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18255: LD_EXP 28
18259: PPUSH
18260: LD_STRING D5b-Sik-1
18262: PPUSH
18263: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18267: LD_ADDR_EXP 4
18271: PUSH
18272: LD_INT 10500
18274: ST_TO_ADDR
// end ; 3 :
18275: GO 18333
18277: LD_INT 3
18279: DOUBLE
18280: EQUAL
18281: IFTRUE 18285
18283: GO 18332
18285: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18286: LD_EXP 28
18290: PPUSH
18291: LD_STRING D5c-Sik-1
18293: PPUSH
18294: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18298: LD_EXP 14
18302: PPUSH
18303: LD_STRING D5c-JMM-1
18305: PPUSH
18306: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18310: LD_EXP 28
18314: PPUSH
18315: LD_STRING D5c-Sik-2
18317: PPUSH
18318: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18322: LD_ADDR_EXP 4
18326: PUSH
18327: LD_INT 10500
18329: ST_TO_ADDR
// end ; end ;
18330: GO 18333
18332: POP
// DialogueOff ;
18333: CALL_OW 7
// SikorskiWaitCounter ;
18337: CALL 19821 0 0
// DialogueOn ;
18341: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18345: LD_EXP 28
18349: PPUSH
18350: LD_STRING D6-Sik-1
18352: PPUSH
18353: CALL_OW 88
// DialogueOff ;
18357: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18361: LD_STRING M2
18363: PPUSH
18364: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18368: LD_INT 1
18370: PPUSH
18371: CALL_OW 427
// SikorskiAttack ;
18375: CALL 7861 0 0
// end ;
18379: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18380: LD_INT 11
18382: PPUSH
18383: LD_INT 22
18385: PUSH
18386: LD_INT 4
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 70
18397: PUSH
18398: LD_INT 2
18400: GREATER
18401: IFFALSE 18594
18403: GO 18405
18405: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18406: LD_EXP 28
18410: PPUSH
18411: LD_STRING D7-Sik-1
18413: PPUSH
18414: CALL_OW 88
// wait ( 0 0$10 ) ;
18418: LD_INT 350
18420: PPUSH
18421: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18425: LD_EXP 14
18429: PPUSH
18430: LD_INT 11
18432: PPUSH
18433: CALL_OW 308
18437: PUSH
18438: LD_EXP 14
18442: PPUSH
18443: CALL_OW 310
18447: PPUSH
18448: LD_INT 11
18450: PPUSH
18451: CALL_OW 308
18455: OR
18456: IFFALSE 18480
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18458: LD_EXP 28
18462: PPUSH
18463: LD_STRING D7a-Sik-1
18465: PPUSH
18466: CALL_OW 88
// sikorskiStatus := 1 ;
18470: LD_ADDR_EXP 9
18474: PUSH
18475: LD_INT 1
18477: ST_TO_ADDR
// end else
18478: GO 18500
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18480: LD_EXP 28
18484: PPUSH
18485: LD_STRING D7b-Sik-1
18487: PPUSH
18488: CALL_OW 88
// sikorskiStatus := 0 ;
18492: LD_ADDR_EXP 9
18496: PUSH
18497: LD_INT 0
18499: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18500: LD_INT 1575
18502: PPUSH
18503: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18507: LD_EXP 14
18511: PPUSH
18512: LD_INT 11
18514: PPUSH
18515: CALL_OW 308
18519: PUSH
18520: LD_EXP 14
18524: PPUSH
18525: CALL_OW 310
18529: PPUSH
18530: LD_INT 11
18532: PPUSH
18533: CALL_OW 308
18537: OR
18538: PUSH
18539: LD_EXP 14
18543: PPUSH
18544: CALL_OW 302
18548: NOT
18549: OR
18550: IFFALSE 18574
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18552: LD_EXP 28
18556: PPUSH
18557: LD_STRING D7a-Sik-1
18559: PPUSH
18560: CALL_OW 88
// sikorskiStatus := 1 ;
18564: LD_ADDR_EXP 9
18568: PUSH
18569: LD_INT 1
18571: ST_TO_ADDR
// end else
18572: GO 18594
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18574: LD_EXP 28
18578: PPUSH
18579: LD_STRING D7b-Sik-1
18581: PPUSH
18582: CALL_OW 88
// sikorskiStatus := 0 ;
18586: LD_ADDR_EXP 9
18590: PUSH
18591: LD_INT 0
18593: ST_TO_ADDR
// end ; end ;
18594: END
// export function SikorskiKilledInAction ; begin
18595: LD_INT 0
18597: PPUSH
// wait ( 0 0$2 ) ;
18598: LD_INT 70
18600: PPUSH
18601: CALL_OW 67
// DialogueOn ;
18605: CALL_OW 6
// dwait ( 0 0$1 ) ;
18609: LD_INT 35
18611: PPUSH
18612: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18616: LD_EXP 30
18620: PPUSH
18621: LD_STRING D8b-Pow-1
18623: PPUSH
18624: CALL_OW 94
// YouLost ( Dismissed ) ;
18628: LD_STRING Dismissed
18630: PPUSH
18631: CALL_OW 104
// DialogueOff ;
18635: CALL_OW 7
// end ;
18639: LD_VAR 0 1
18643: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18644: LD_EXP 8
18648: PUSH
18649: LD_INT 28
18651: PPUSH
18652: CALL_OW 301
18656: AND
18657: PUSH
18658: LD_EXP 32
18662: PPUSH
18663: CALL_OW 301
18667: AND
18668: PUSH
18669: LD_INT 22
18671: PUSH
18672: LD_INT 3
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 50
18681: PUSH
18682: EMPTY
18683: LIST
18684: PUSH
18685: LD_INT 30
18687: PUSH
18688: LD_INT 5
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: PPUSH
18700: CALL_OW 69
18704: PUSH
18705: LD_INT 0
18707: EQUAL
18708: AND
18709: IFFALSE 19755
18711: GO 18713
18713: DISABLE
18714: LD_INT 0
18716: PPUSH
18717: PPUSH
18718: PPUSH
// begin Video ( true ) ;
18719: LD_INT 1
18721: PPUSH
18722: CALL 77640 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18726: LD_INT 104
18728: PPUSH
18729: LD_INT 108
18731: PPUSH
18732: LD_INT 1
18734: PPUSH
18735: LD_INT 36
18737: NEG
18738: PPUSH
18739: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18743: LD_INT 104
18745: PPUSH
18746: LD_INT 108
18748: PPUSH
18749: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18753: LD_ADDR_VAR 0 2
18757: PUSH
18758: LD_INT 22
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 21
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 3
18780: PUSH
18781: LD_INT 24
18783: PUSH
18784: LD_INT 249
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: PPUSH
18800: CALL_OW 69
18804: ST_TO_ADDR
// if tmp then
18805: LD_VAR 0 2
18809: IFFALSE 18840
// for i in tmp do
18811: LD_ADDR_VAR 0 1
18815: PUSH
18816: LD_VAR 0 2
18820: PUSH
18821: FOR_IN
18822: IFFALSE 18838
// SetLives ( i , 249 ) ;
18824: LD_VAR 0 1
18828: PPUSH
18829: LD_INT 249
18831: PPUSH
18832: CALL_OW 234
18836: GO 18821
18838: POP
18839: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18840: LD_ADDR_VAR 0 1
18844: PUSH
18845: LD_INT 22
18847: PUSH
18848: LD_INT 3
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 21
18857: PUSH
18858: LD_INT 1
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PPUSH
18869: CALL_OW 69
18873: PUSH
18874: FOR_IN
18875: IFFALSE 18918
// begin ComExit ( i ) ;
18877: LD_VAR 0 1
18881: PPUSH
18882: CALL 78066 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18886: LD_VAR 0 1
18890: PPUSH
18891: LD_INT 131
18893: PPUSH
18894: LD_INT 127
18896: PPUSH
18897: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18901: LD_VAR 0 1
18905: PPUSH
18906: LD_INT 141
18908: PPUSH
18909: LD_INT 147
18911: PPUSH
18912: CALL_OW 171
// end ;
18916: GO 18874
18918: POP
18919: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18920: LD_INT 81
18922: PUSH
18923: LD_INT 3
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 3
18932: PUSH
18933: LD_INT 21
18935: PUSH
18936: LD_INT 3
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PPUSH
18951: CALL_OW 69
18955: PPUSH
18956: LD_INT 131
18958: PPUSH
18959: LD_INT 127
18961: PPUSH
18962: CALL_OW 174
// wait ( 0 0$08 ) ;
18966: LD_INT 280
18968: PPUSH
18969: CALL_OW 67
// DialogueOn ;
18973: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
18977: LD_EXP 9
18981: PUSH
18982: LD_INT 1
18984: EQUAL
18985: PUSH
18986: LD_EXP 28
18990: PPUSH
18991: CALL_OW 302
18995: AND
18996: IFFALSE 19010
// Say ( Sikorski , D9-Sik-1 ) ;
18998: LD_EXP 28
19002: PPUSH
19003: LD_STRING D9-Sik-1
19005: PPUSH
19006: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19010: LD_INT 22
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PPUSH
19020: CALL_OW 69
19024: PUSH
19025: LD_INT 0
19027: EQUAL
19028: PUSH
19029: LD_EXP 3
19033: AND
19034: IFFALSE 19043
// SetAchievement ( ACH_BLITZKRIEG ) ;
19036: LD_STRING ACH_BLITZKRIEG
19038: PPUSH
19039: CALL_OW 543
// if tick <= 45 45$10 then
19043: LD_OWVAR 1
19047: PUSH
19048: LD_INT 94850
19050: LESSEQUAL
19051: IFFALSE 19067
// begin wait ( 3 ) ;
19053: LD_INT 3
19055: PPUSH
19056: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19060: LD_STRING ACH_ASPEED_8
19062: PPUSH
19063: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19067: LD_STRING med1
19069: PPUSH
19070: LD_INT 1
19072: PPUSH
19073: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19077: LD_STRING med2
19079: PPUSH
19080: LD_INT 1
19082: PPUSH
19083: CALL_OW 101
// if sikorskiStatus = 1 then
19087: LD_EXP 9
19091: PUSH
19092: LD_INT 1
19094: EQUAL
19095: IFFALSE 19109
// AddMedal ( perfect , 1 ) else
19097: LD_STRING perfect
19099: PPUSH
19100: LD_INT 1
19102: PPUSH
19103: CALL_OW 101
19107: GO 19120
// AddMedal ( perfect , - 1 ) ;
19109: LD_STRING perfect
19111: PPUSH
19112: LD_INT 1
19114: NEG
19115: PPUSH
19116: CALL_OW 101
// if Difficulty >= 3 then
19120: LD_OWVAR 67
19124: PUSH
19125: LD_INT 3
19127: GREATEREQUAL
19128: IFFALSE 19140
// SetAchievementEX ( ACH_AMER , 8 ) ;
19130: LD_STRING ACH_AMER
19132: PPUSH
19133: LD_INT 8
19135: PPUSH
19136: CALL_OW 564
// GiveMedals ( Main ) ;
19140: LD_STRING Main
19142: PPUSH
19143: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19147: LD_INT 22
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 23
19159: PUSH
19160: LD_INT 1
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 21
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: LIST
19181: PPUSH
19182: CALL_OW 69
19186: PPUSH
19187: CALL_OW 43
// prefix := 08_ ;
19191: LD_ADDR_VAR 0 3
19195: PUSH
19196: LD_STRING 08_
19198: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19199: LD_EXP 14
19203: PPUSH
19204: LD_VAR 0 3
19208: PUSH
19209: LD_STRING JMM
19211: STR
19212: PPUSH
19213: CALL_OW 38
// if IsLive ( Brown ) then
19217: LD_EXP 15
19221: PPUSH
19222: CALL_OW 300
19226: IFFALSE 19246
// SaveCharacters ( Brown , prefix & Brown ) ;
19228: LD_EXP 15
19232: PPUSH
19233: LD_VAR 0 3
19237: PUSH
19238: LD_STRING Brown
19240: STR
19241: PPUSH
19242: CALL_OW 38
// if IsLive ( Donaldson ) then
19246: LD_EXP 16
19250: PPUSH
19251: CALL_OW 300
19255: IFFALSE 19275
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19257: LD_EXP 16
19261: PPUSH
19262: LD_VAR 0 3
19266: PUSH
19267: LD_STRING Donaldson
19269: STR
19270: PPUSH
19271: CALL_OW 38
// if IsLive ( Bobby ) then
19275: LD_EXP 17
19279: PPUSH
19280: CALL_OW 300
19284: IFFALSE 19304
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19286: LD_EXP 17
19290: PPUSH
19291: LD_VAR 0 3
19295: PUSH
19296: LD_STRING Bobby
19298: STR
19299: PPUSH
19300: CALL_OW 38
// if IsLive ( Cyrus ) then
19304: LD_EXP 18
19308: PPUSH
19309: CALL_OW 300
19313: IFFALSE 19333
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19315: LD_EXP 18
19319: PPUSH
19320: LD_VAR 0 3
19324: PUSH
19325: LD_STRING Cyrus
19327: STR
19328: PPUSH
19329: CALL_OW 38
// if IsLive ( Lisa ) then
19333: LD_EXP 19
19337: PPUSH
19338: CALL_OW 300
19342: IFFALSE 19362
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19344: LD_EXP 19
19348: PPUSH
19349: LD_VAR 0 3
19353: PUSH
19354: LD_STRING Lisa
19356: STR
19357: PPUSH
19358: CALL_OW 38
// if IsLive ( Frank ) then
19362: LD_EXP 20
19366: PPUSH
19367: CALL_OW 300
19371: IFFALSE 19391
// SaveCharacters ( Frank , prefix & Frank ) ;
19373: LD_EXP 20
19377: PPUSH
19378: LD_VAR 0 3
19382: PUSH
19383: LD_STRING Frank
19385: STR
19386: PPUSH
19387: CALL_OW 38
// if IsLive ( Gladstone ) then
19391: LD_EXP 21
19395: PPUSH
19396: CALL_OW 300
19400: IFFALSE 19420
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19402: LD_EXP 21
19406: PPUSH
19407: LD_VAR 0 3
19411: PUSH
19412: LD_STRING Gladstone
19414: STR
19415: PPUSH
19416: CALL_OW 38
// if IsLive ( Kikuchi ) then
19420: LD_EXP 22
19424: PPUSH
19425: CALL_OW 300
19429: IFFALSE 19449
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19431: LD_EXP 22
19435: PPUSH
19436: LD_VAR 0 3
19440: PUSH
19441: LD_STRING Kikuchi
19443: STR
19444: PPUSH
19445: CALL_OW 38
// if IsLive ( Denis ) then
19449: LD_EXP 26
19453: PPUSH
19454: CALL_OW 300
19458: IFFALSE 19478
// SaveCharacters ( Denis , prefix & Denis ) ;
19460: LD_EXP 26
19464: PPUSH
19465: LD_VAR 0 3
19469: PUSH
19470: LD_STRING Denis
19472: STR
19473: PPUSH
19474: CALL_OW 38
// if IsLive ( Joan ) then
19478: LD_EXP 27
19482: PPUSH
19483: CALL_OW 300
19487: IFFALSE 19509
// SaveCharacters ( Joan , prefix & Joan ) else
19489: LD_EXP 27
19493: PPUSH
19494: LD_VAR 0 3
19498: PUSH
19499: LD_STRING Joan
19501: STR
19502: PPUSH
19503: CALL_OW 38
19507: GO 19516
// DeleteCharacters ( Joan ) ;
19509: LD_STRING Joan
19511: PPUSH
19512: CALL_OW 40
// if IsLive ( Khatam ) then
19516: LD_EXP 23
19520: PPUSH
19521: CALL_OW 300
19525: IFFALSE 19545
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19527: LD_EXP 23
19531: PPUSH
19532: LD_VAR 0 3
19536: PUSH
19537: LD_STRING Khatam
19539: STR
19540: PPUSH
19541: CALL_OW 38
// if IsLive ( Houten ) then
19545: LD_EXP 25
19549: PPUSH
19550: CALL_OW 300
19554: IFFALSE 19574
// SaveCharacters ( Houten , prefix & Houten ) ;
19556: LD_EXP 25
19560: PPUSH
19561: LD_VAR 0 3
19565: PUSH
19566: LD_STRING Houten
19568: STR
19569: PPUSH
19570: CALL_OW 38
// if IsLive ( Mike ) then
19574: LD_EXP 24
19578: PPUSH
19579: CALL_OW 300
19583: IFFALSE 19603
// SaveCharacters ( Mike , prefix & Mike ) ;
19585: LD_EXP 24
19589: PPUSH
19590: LD_VAR 0 3
19594: PUSH
19595: LD_STRING Mike
19597: STR
19598: PPUSH
19599: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19603: LD_INT 22
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 21
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 23
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: PPUSH
19638: CALL_OW 69
19642: PUSH
19643: LD_EXP 14
19647: PUSH
19648: LD_EXP 15
19652: PUSH
19653: LD_EXP 16
19657: PUSH
19658: LD_EXP 17
19662: PUSH
19663: LD_EXP 18
19667: PUSH
19668: LD_EXP 19
19672: PUSH
19673: LD_EXP 20
19677: PUSH
19678: LD_EXP 21
19682: PUSH
19683: LD_EXP 22
19687: PUSH
19688: LD_EXP 26
19692: PUSH
19693: LD_EXP 27
19697: PUSH
19698: LD_EXP 25
19702: PUSH
19703: LD_EXP 23
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: DIFF
19723: PPUSH
19724: LD_STRING 08_other_survivors
19726: PPUSH
19727: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19731: LD_INT 15
19733: PPUSH
19734: CALL 7335 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19738: LD_EXP 10
19742: NOT
19743: PPUSH
19744: LD_STRING 08_SikorskiStatus
19746: PPUSH
19747: CALL_OW 39
// YouWin ;
19751: CALL_OW 103
// end ; end_of_file
19755: PPOPN 3
19757: END
// export function SikorskiCounter ; begin
19758: LD_INT 0
19760: PPUSH
// repeat wait ( 0 0$1 ) ;
19761: LD_INT 35
19763: PPUSH
19764: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19768: LD_ADDR_OWVAR 47
19772: PUSH
19773: LD_STRING #Am08-2
19775: PUSH
19776: LD_EXP 3
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19785: LD_ADDR_EXP 3
19789: PUSH
19790: LD_EXP 3
19794: PUSH
19795: LD_INT 35
19797: MINUS
19798: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19799: LD_EXP 3
19803: PUSH
19804: LD_INT 0
19806: EQUAL
19807: IFFALSE 19761
// display_strings := [ ] ;
19809: LD_ADDR_OWVAR 47
19813: PUSH
19814: EMPTY
19815: ST_TO_ADDR
// end ;
19816: LD_VAR 0 1
19820: RET
// export function SikorskiWaitCounter ; begin
19821: LD_INT 0
19823: PPUSH
// repeat wait ( 0 0$1 ) ;
19824: LD_INT 35
19826: PPUSH
19827: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19831: LD_ADDR_OWVAR 47
19835: PUSH
19836: LD_STRING #Am08-1
19838: PUSH
19839: LD_EXP 4
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19848: LD_ADDR_EXP 4
19852: PUSH
19853: LD_EXP 4
19857: PUSH
19858: LD_INT 35
19860: MINUS
19861: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19862: LD_EXP 4
19866: PUSH
19867: LD_INT 0
19869: EQUAL
19870: IFFALSE 19824
// display_strings := [ ] ;
19872: LD_ADDR_OWVAR 47
19876: PUSH
19877: EMPTY
19878: ST_TO_ADDR
// end ; end_of_file
19879: LD_VAR 0 1
19883: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19884: LD_EXP 3
19888: IFFALSE 19928
19890: GO 19892
19892: DISABLE
// begin enable ;
19893: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19894: LD_INT 14
19896: PPUSH
19897: CALL_OW 435
19901: PUSH
19902: LD_INT 10
19904: LESS
19905: IFFALSE 19928
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19907: LD_INT 1
19909: PPUSH
19910: LD_INT 5
19912: PPUSH
19913: CALL_OW 12
19917: PPUSH
19918: LD_INT 14
19920: PPUSH
19921: LD_INT 1
19923: PPUSH
19924: CALL_OW 55
// end ;
19928: END
// every 0 0$55 trigger sikorskiArriveCounter do
19929: LD_EXP 3
19933: IFFALSE 19973
19935: GO 19937
19937: DISABLE
// begin enable ;
19938: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
19939: LD_INT 13
19941: PPUSH
19942: CALL_OW 435
19946: PUSH
19947: LD_INT 10
19949: LESS
19950: IFFALSE 19973
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
19952: LD_INT 1
19954: PPUSH
19955: LD_INT 5
19957: PPUSH
19958: CALL_OW 12
19962: PPUSH
19963: LD_INT 13
19965: PPUSH
19966: LD_INT 1
19968: PPUSH
19969: CALL_OW 55
// end ; end_of_file
19973: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
19974: LD_INT 0
19976: PPUSH
19977: PPUSH
// if not units then
19978: LD_VAR 0 1
19982: NOT
19983: IFFALSE 19987
// exit ;
19985: GO 20112
// result := false ;
19987: LD_ADDR_VAR 0 4
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
19995: LD_ADDR_VAR 0 5
19999: PUSH
20000: LD_VAR 0 1
20004: PPUSH
20005: LD_INT 26
20007: PUSH
20008: LD_INT 1
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PPUSH
20015: CALL_OW 72
20019: ST_TO_ADDR
// if tmp then
20020: LD_VAR 0 5
20024: IFFALSE 20050
// result := Say ( tmp [ 1 ] , menDialog ) ;
20026: LD_ADDR_VAR 0 4
20030: PUSH
20031: LD_VAR 0 5
20035: PUSH
20036: LD_INT 1
20038: ARRAY
20039: PPUSH
20040: LD_VAR 0 2
20044: PPUSH
20045: CALL_OW 88
20049: ST_TO_ADDR
// if not result then
20050: LD_VAR 0 4
20054: NOT
20055: IFFALSE 20112
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20057: LD_ADDR_VAR 0 5
20061: PUSH
20062: LD_VAR 0 1
20066: PPUSH
20067: LD_INT 26
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PPUSH
20077: CALL_OW 72
20081: ST_TO_ADDR
// if tmp then
20082: LD_VAR 0 5
20086: IFFALSE 20112
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20088: LD_ADDR_VAR 0 4
20092: PUSH
20093: LD_VAR 0 5
20097: PUSH
20098: LD_INT 1
20100: ARRAY
20101: PPUSH
20102: LD_VAR 0 3
20106: PPUSH
20107: CALL_OW 88
20111: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20112: LD_VAR 0 4
20116: RET
// export globalGameSaveCounter ; every 0 0$1 do
20117: GO 20119
20119: DISABLE
// begin enable ;
20120: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20121: LD_STRING updateTimer(
20123: PUSH
20124: LD_OWVAR 1
20128: STR
20129: PUSH
20130: LD_STRING );
20132: STR
20133: PPUSH
20134: CALL_OW 559
// end ;
20138: END
// every 0 0$1 do
20139: GO 20141
20141: DISABLE
// begin globalGameSaveCounter := 0 ;
20142: LD_ADDR_EXP 37
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20150: LD_STRING setGameSaveCounter(0)
20152: PPUSH
20153: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20157: LD_STRING initStreamRollete();
20159: PPUSH
20160: CALL_OW 559
// InitStreamMode ;
20164: CALL 21490 0 0
// DefineStreamItems ( false ) ;
20168: LD_INT 0
20170: PPUSH
20171: CALL 21954 0 1
// end ;
20175: END
// export function SOS_MapStart ( ) ; begin
20176: LD_INT 0
20178: PPUSH
// if streamModeActive then
20179: LD_EXP 38
20183: IFFALSE 20192
// DefineStreamItems ( true ) ;
20185: LD_INT 1
20187: PPUSH
20188: CALL 21954 0 1
// UpdateLuaVariables ( ) ;
20192: CALL 20209 0 0
// UpdateFactoryWaypoints ( ) ;
20196: CALL 34815 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20200: CALL 35072 0 0
// end ;
20204: LD_VAR 0 1
20208: RET
// function UpdateLuaVariables ( ) ; begin
20209: LD_INT 0
20211: PPUSH
// if globalGameSaveCounter then
20212: LD_EXP 37
20216: IFFALSE 20250
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20218: LD_ADDR_EXP 37
20222: PUSH
20223: LD_EXP 37
20227: PPUSH
20228: CALL 79029 0 1
20232: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20233: LD_STRING setGameSaveCounter(
20235: PUSH
20236: LD_EXP 37
20240: STR
20241: PUSH
20242: LD_STRING )
20244: STR
20245: PPUSH
20246: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20250: LD_STRING setGameDifficulty(
20252: PUSH
20253: LD_OWVAR 67
20257: STR
20258: PUSH
20259: LD_STRING )
20261: STR
20262: PPUSH
20263: CALL_OW 559
// end ;
20267: LD_VAR 0 1
20271: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20272: LD_INT 0
20274: PPUSH
// if p2 = stream_mode then
20275: LD_VAR 0 2
20279: PUSH
20280: LD_INT 100
20282: EQUAL
20283: IFFALSE 21286
// begin if not StreamModeActive then
20285: LD_EXP 38
20289: NOT
20290: IFFALSE 20300
// StreamModeActive := true ;
20292: LD_ADDR_EXP 38
20296: PUSH
20297: LD_INT 1
20299: ST_TO_ADDR
// if p3 = 0 then
20300: LD_VAR 0 3
20304: PUSH
20305: LD_INT 0
20307: EQUAL
20308: IFFALSE 20314
// InitStreamMode ;
20310: CALL 21490 0 0
// if p3 = 1 then
20314: LD_VAR 0 3
20318: PUSH
20319: LD_INT 1
20321: EQUAL
20322: IFFALSE 20332
// sRocket := true ;
20324: LD_ADDR_EXP 43
20328: PUSH
20329: LD_INT 1
20331: ST_TO_ADDR
// if p3 = 2 then
20332: LD_VAR 0 3
20336: PUSH
20337: LD_INT 2
20339: EQUAL
20340: IFFALSE 20350
// sSpeed := true ;
20342: LD_ADDR_EXP 42
20346: PUSH
20347: LD_INT 1
20349: ST_TO_ADDR
// if p3 = 3 then
20350: LD_VAR 0 3
20354: PUSH
20355: LD_INT 3
20357: EQUAL
20358: IFFALSE 20368
// sEngine := true ;
20360: LD_ADDR_EXP 44
20364: PUSH
20365: LD_INT 1
20367: ST_TO_ADDR
// if p3 = 4 then
20368: LD_VAR 0 3
20372: PUSH
20373: LD_INT 4
20375: EQUAL
20376: IFFALSE 20386
// sSpec := true ;
20378: LD_ADDR_EXP 41
20382: PUSH
20383: LD_INT 1
20385: ST_TO_ADDR
// if p3 = 5 then
20386: LD_VAR 0 3
20390: PUSH
20391: LD_INT 5
20393: EQUAL
20394: IFFALSE 20404
// sLevel := true ;
20396: LD_ADDR_EXP 45
20400: PUSH
20401: LD_INT 1
20403: ST_TO_ADDR
// if p3 = 6 then
20404: LD_VAR 0 3
20408: PUSH
20409: LD_INT 6
20411: EQUAL
20412: IFFALSE 20422
// sArmoury := true ;
20414: LD_ADDR_EXP 46
20418: PUSH
20419: LD_INT 1
20421: ST_TO_ADDR
// if p3 = 7 then
20422: LD_VAR 0 3
20426: PUSH
20427: LD_INT 7
20429: EQUAL
20430: IFFALSE 20440
// sRadar := true ;
20432: LD_ADDR_EXP 47
20436: PUSH
20437: LD_INT 1
20439: ST_TO_ADDR
// if p3 = 8 then
20440: LD_VAR 0 3
20444: PUSH
20445: LD_INT 8
20447: EQUAL
20448: IFFALSE 20458
// sBunker := true ;
20450: LD_ADDR_EXP 48
20454: PUSH
20455: LD_INT 1
20457: ST_TO_ADDR
// if p3 = 9 then
20458: LD_VAR 0 3
20462: PUSH
20463: LD_INT 9
20465: EQUAL
20466: IFFALSE 20476
// sHack := true ;
20468: LD_ADDR_EXP 49
20472: PUSH
20473: LD_INT 1
20475: ST_TO_ADDR
// if p3 = 10 then
20476: LD_VAR 0 3
20480: PUSH
20481: LD_INT 10
20483: EQUAL
20484: IFFALSE 20494
// sFire := true ;
20486: LD_ADDR_EXP 50
20490: PUSH
20491: LD_INT 1
20493: ST_TO_ADDR
// if p3 = 11 then
20494: LD_VAR 0 3
20498: PUSH
20499: LD_INT 11
20501: EQUAL
20502: IFFALSE 20512
// sRefresh := true ;
20504: LD_ADDR_EXP 51
20508: PUSH
20509: LD_INT 1
20511: ST_TO_ADDR
// if p3 = 12 then
20512: LD_VAR 0 3
20516: PUSH
20517: LD_INT 12
20519: EQUAL
20520: IFFALSE 20530
// sExp := true ;
20522: LD_ADDR_EXP 52
20526: PUSH
20527: LD_INT 1
20529: ST_TO_ADDR
// if p3 = 13 then
20530: LD_VAR 0 3
20534: PUSH
20535: LD_INT 13
20537: EQUAL
20538: IFFALSE 20548
// sDepot := true ;
20540: LD_ADDR_EXP 53
20544: PUSH
20545: LD_INT 1
20547: ST_TO_ADDR
// if p3 = 14 then
20548: LD_VAR 0 3
20552: PUSH
20553: LD_INT 14
20555: EQUAL
20556: IFFALSE 20566
// sFlag := true ;
20558: LD_ADDR_EXP 54
20562: PUSH
20563: LD_INT 1
20565: ST_TO_ADDR
// if p3 = 15 then
20566: LD_VAR 0 3
20570: PUSH
20571: LD_INT 15
20573: EQUAL
20574: IFFALSE 20584
// sKamikadze := true ;
20576: LD_ADDR_EXP 62
20580: PUSH
20581: LD_INT 1
20583: ST_TO_ADDR
// if p3 = 16 then
20584: LD_VAR 0 3
20588: PUSH
20589: LD_INT 16
20591: EQUAL
20592: IFFALSE 20602
// sTroll := true ;
20594: LD_ADDR_EXP 63
20598: PUSH
20599: LD_INT 1
20601: ST_TO_ADDR
// if p3 = 17 then
20602: LD_VAR 0 3
20606: PUSH
20607: LD_INT 17
20609: EQUAL
20610: IFFALSE 20620
// sSlow := true ;
20612: LD_ADDR_EXP 64
20616: PUSH
20617: LD_INT 1
20619: ST_TO_ADDR
// if p3 = 18 then
20620: LD_VAR 0 3
20624: PUSH
20625: LD_INT 18
20627: EQUAL
20628: IFFALSE 20638
// sLack := true ;
20630: LD_ADDR_EXP 65
20634: PUSH
20635: LD_INT 1
20637: ST_TO_ADDR
// if p3 = 19 then
20638: LD_VAR 0 3
20642: PUSH
20643: LD_INT 19
20645: EQUAL
20646: IFFALSE 20656
// sTank := true ;
20648: LD_ADDR_EXP 67
20652: PUSH
20653: LD_INT 1
20655: ST_TO_ADDR
// if p3 = 20 then
20656: LD_VAR 0 3
20660: PUSH
20661: LD_INT 20
20663: EQUAL
20664: IFFALSE 20674
// sRemote := true ;
20666: LD_ADDR_EXP 68
20670: PUSH
20671: LD_INT 1
20673: ST_TO_ADDR
// if p3 = 21 then
20674: LD_VAR 0 3
20678: PUSH
20679: LD_INT 21
20681: EQUAL
20682: IFFALSE 20692
// sPowell := true ;
20684: LD_ADDR_EXP 69
20688: PUSH
20689: LD_INT 1
20691: ST_TO_ADDR
// if p3 = 22 then
20692: LD_VAR 0 3
20696: PUSH
20697: LD_INT 22
20699: EQUAL
20700: IFFALSE 20710
// sTeleport := true ;
20702: LD_ADDR_EXP 72
20706: PUSH
20707: LD_INT 1
20709: ST_TO_ADDR
// if p3 = 23 then
20710: LD_VAR 0 3
20714: PUSH
20715: LD_INT 23
20717: EQUAL
20718: IFFALSE 20728
// sOilTower := true ;
20720: LD_ADDR_EXP 74
20724: PUSH
20725: LD_INT 1
20727: ST_TO_ADDR
// if p3 = 24 then
20728: LD_VAR 0 3
20732: PUSH
20733: LD_INT 24
20735: EQUAL
20736: IFFALSE 20746
// sShovel := true ;
20738: LD_ADDR_EXP 75
20742: PUSH
20743: LD_INT 1
20745: ST_TO_ADDR
// if p3 = 25 then
20746: LD_VAR 0 3
20750: PUSH
20751: LD_INT 25
20753: EQUAL
20754: IFFALSE 20764
// sSheik := true ;
20756: LD_ADDR_EXP 76
20760: PUSH
20761: LD_INT 1
20763: ST_TO_ADDR
// if p3 = 26 then
20764: LD_VAR 0 3
20768: PUSH
20769: LD_INT 26
20771: EQUAL
20772: IFFALSE 20782
// sEarthquake := true ;
20774: LD_ADDR_EXP 78
20778: PUSH
20779: LD_INT 1
20781: ST_TO_ADDR
// if p3 = 27 then
20782: LD_VAR 0 3
20786: PUSH
20787: LD_INT 27
20789: EQUAL
20790: IFFALSE 20800
// sAI := true ;
20792: LD_ADDR_EXP 79
20796: PUSH
20797: LD_INT 1
20799: ST_TO_ADDR
// if p3 = 28 then
20800: LD_VAR 0 3
20804: PUSH
20805: LD_INT 28
20807: EQUAL
20808: IFFALSE 20818
// sCargo := true ;
20810: LD_ADDR_EXP 82
20814: PUSH
20815: LD_INT 1
20817: ST_TO_ADDR
// if p3 = 29 then
20818: LD_VAR 0 3
20822: PUSH
20823: LD_INT 29
20825: EQUAL
20826: IFFALSE 20836
// sDLaser := true ;
20828: LD_ADDR_EXP 83
20832: PUSH
20833: LD_INT 1
20835: ST_TO_ADDR
// if p3 = 30 then
20836: LD_VAR 0 3
20840: PUSH
20841: LD_INT 30
20843: EQUAL
20844: IFFALSE 20854
// sExchange := true ;
20846: LD_ADDR_EXP 84
20850: PUSH
20851: LD_INT 1
20853: ST_TO_ADDR
// if p3 = 31 then
20854: LD_VAR 0 3
20858: PUSH
20859: LD_INT 31
20861: EQUAL
20862: IFFALSE 20872
// sFac := true ;
20864: LD_ADDR_EXP 85
20868: PUSH
20869: LD_INT 1
20871: ST_TO_ADDR
// if p3 = 32 then
20872: LD_VAR 0 3
20876: PUSH
20877: LD_INT 32
20879: EQUAL
20880: IFFALSE 20890
// sPower := true ;
20882: LD_ADDR_EXP 86
20886: PUSH
20887: LD_INT 1
20889: ST_TO_ADDR
// if p3 = 33 then
20890: LD_VAR 0 3
20894: PUSH
20895: LD_INT 33
20897: EQUAL
20898: IFFALSE 20908
// sRandom := true ;
20900: LD_ADDR_EXP 87
20904: PUSH
20905: LD_INT 1
20907: ST_TO_ADDR
// if p3 = 34 then
20908: LD_VAR 0 3
20912: PUSH
20913: LD_INT 34
20915: EQUAL
20916: IFFALSE 20926
// sShield := true ;
20918: LD_ADDR_EXP 88
20922: PUSH
20923: LD_INT 1
20925: ST_TO_ADDR
// if p3 = 35 then
20926: LD_VAR 0 3
20930: PUSH
20931: LD_INT 35
20933: EQUAL
20934: IFFALSE 20944
// sTime := true ;
20936: LD_ADDR_EXP 89
20940: PUSH
20941: LD_INT 1
20943: ST_TO_ADDR
// if p3 = 36 then
20944: LD_VAR 0 3
20948: PUSH
20949: LD_INT 36
20951: EQUAL
20952: IFFALSE 20962
// sTools := true ;
20954: LD_ADDR_EXP 90
20958: PUSH
20959: LD_INT 1
20961: ST_TO_ADDR
// if p3 = 101 then
20962: LD_VAR 0 3
20966: PUSH
20967: LD_INT 101
20969: EQUAL
20970: IFFALSE 20980
// sSold := true ;
20972: LD_ADDR_EXP 55
20976: PUSH
20977: LD_INT 1
20979: ST_TO_ADDR
// if p3 = 102 then
20980: LD_VAR 0 3
20984: PUSH
20985: LD_INT 102
20987: EQUAL
20988: IFFALSE 20998
// sDiff := true ;
20990: LD_ADDR_EXP 56
20994: PUSH
20995: LD_INT 1
20997: ST_TO_ADDR
// if p3 = 103 then
20998: LD_VAR 0 3
21002: PUSH
21003: LD_INT 103
21005: EQUAL
21006: IFFALSE 21016
// sFog := true ;
21008: LD_ADDR_EXP 59
21012: PUSH
21013: LD_INT 1
21015: ST_TO_ADDR
// if p3 = 104 then
21016: LD_VAR 0 3
21020: PUSH
21021: LD_INT 104
21023: EQUAL
21024: IFFALSE 21034
// sReset := true ;
21026: LD_ADDR_EXP 60
21030: PUSH
21031: LD_INT 1
21033: ST_TO_ADDR
// if p3 = 105 then
21034: LD_VAR 0 3
21038: PUSH
21039: LD_INT 105
21041: EQUAL
21042: IFFALSE 21052
// sSun := true ;
21044: LD_ADDR_EXP 61
21048: PUSH
21049: LD_INT 1
21051: ST_TO_ADDR
// if p3 = 106 then
21052: LD_VAR 0 3
21056: PUSH
21057: LD_INT 106
21059: EQUAL
21060: IFFALSE 21070
// sTiger := true ;
21062: LD_ADDR_EXP 57
21066: PUSH
21067: LD_INT 1
21069: ST_TO_ADDR
// if p3 = 107 then
21070: LD_VAR 0 3
21074: PUSH
21075: LD_INT 107
21077: EQUAL
21078: IFFALSE 21088
// sBomb := true ;
21080: LD_ADDR_EXP 58
21084: PUSH
21085: LD_INT 1
21087: ST_TO_ADDR
// if p3 = 108 then
21088: LD_VAR 0 3
21092: PUSH
21093: LD_INT 108
21095: EQUAL
21096: IFFALSE 21106
// sWound := true ;
21098: LD_ADDR_EXP 66
21102: PUSH
21103: LD_INT 1
21105: ST_TO_ADDR
// if p3 = 109 then
21106: LD_VAR 0 3
21110: PUSH
21111: LD_INT 109
21113: EQUAL
21114: IFFALSE 21124
// sBetray := true ;
21116: LD_ADDR_EXP 70
21120: PUSH
21121: LD_INT 1
21123: ST_TO_ADDR
// if p3 = 110 then
21124: LD_VAR 0 3
21128: PUSH
21129: LD_INT 110
21131: EQUAL
21132: IFFALSE 21142
// sContamin := true ;
21134: LD_ADDR_EXP 71
21138: PUSH
21139: LD_INT 1
21141: ST_TO_ADDR
// if p3 = 111 then
21142: LD_VAR 0 3
21146: PUSH
21147: LD_INT 111
21149: EQUAL
21150: IFFALSE 21160
// sOil := true ;
21152: LD_ADDR_EXP 73
21156: PUSH
21157: LD_INT 1
21159: ST_TO_ADDR
// if p3 = 112 then
21160: LD_VAR 0 3
21164: PUSH
21165: LD_INT 112
21167: EQUAL
21168: IFFALSE 21178
// sStu := true ;
21170: LD_ADDR_EXP 77
21174: PUSH
21175: LD_INT 1
21177: ST_TO_ADDR
// if p3 = 113 then
21178: LD_VAR 0 3
21182: PUSH
21183: LD_INT 113
21185: EQUAL
21186: IFFALSE 21196
// sBazooka := true ;
21188: LD_ADDR_EXP 80
21192: PUSH
21193: LD_INT 1
21195: ST_TO_ADDR
// if p3 = 114 then
21196: LD_VAR 0 3
21200: PUSH
21201: LD_INT 114
21203: EQUAL
21204: IFFALSE 21214
// sMortar := true ;
21206: LD_ADDR_EXP 81
21210: PUSH
21211: LD_INT 1
21213: ST_TO_ADDR
// if p3 = 115 then
21214: LD_VAR 0 3
21218: PUSH
21219: LD_INT 115
21221: EQUAL
21222: IFFALSE 21232
// sRanger := true ;
21224: LD_ADDR_EXP 91
21228: PUSH
21229: LD_INT 1
21231: ST_TO_ADDR
// if p3 = 116 then
21232: LD_VAR 0 3
21236: PUSH
21237: LD_INT 116
21239: EQUAL
21240: IFFALSE 21250
// sComputer := true ;
21242: LD_ADDR_EXP 92
21246: PUSH
21247: LD_INT 1
21249: ST_TO_ADDR
// if p3 = 117 then
21250: LD_VAR 0 3
21254: PUSH
21255: LD_INT 117
21257: EQUAL
21258: IFFALSE 21268
// s30 := true ;
21260: LD_ADDR_EXP 93
21264: PUSH
21265: LD_INT 1
21267: ST_TO_ADDR
// if p3 = 118 then
21268: LD_VAR 0 3
21272: PUSH
21273: LD_INT 118
21275: EQUAL
21276: IFFALSE 21286
// s60 := true ;
21278: LD_ADDR_EXP 94
21282: PUSH
21283: LD_INT 1
21285: ST_TO_ADDR
// end ; if p2 = hack_mode then
21286: LD_VAR 0 2
21290: PUSH
21291: LD_INT 101
21293: EQUAL
21294: IFFALSE 21422
// begin case p3 of 1 :
21296: LD_VAR 0 3
21300: PUSH
21301: LD_INT 1
21303: DOUBLE
21304: EQUAL
21305: IFTRUE 21309
21307: GO 21316
21309: POP
// hHackUnlimitedResources ; 2 :
21310: CALL 33561 0 0
21314: GO 21422
21316: LD_INT 2
21318: DOUBLE
21319: EQUAL
21320: IFTRUE 21324
21322: GO 21331
21324: POP
// hHackSetLevel10 ; 3 :
21325: CALL 33694 0 0
21329: GO 21422
21331: LD_INT 3
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21346
21339: POP
// hHackSetLevel10YourUnits ; 4 :
21340: CALL 33779 0 0
21344: GO 21422
21346: LD_INT 4
21348: DOUBLE
21349: EQUAL
21350: IFTRUE 21354
21352: GO 21361
21354: POP
// hHackInvincible ; 5 :
21355: CALL 34227 0 0
21359: GO 21422
21361: LD_INT 5
21363: DOUBLE
21364: EQUAL
21365: IFTRUE 21369
21367: GO 21376
21369: POP
// hHackInvisible ; 6 :
21370: CALL 34338 0 0
21374: GO 21422
21376: LD_INT 6
21378: DOUBLE
21379: EQUAL
21380: IFTRUE 21384
21382: GO 21391
21384: POP
// hHackChangeYourSide ; 7 :
21385: CALL 34395 0 0
21389: GO 21422
21391: LD_INT 7
21393: DOUBLE
21394: EQUAL
21395: IFTRUE 21399
21397: GO 21406
21399: POP
// hHackChangeUnitSide ; 8 :
21400: CALL 34437 0 0
21404: GO 21422
21406: LD_INT 8
21408: DOUBLE
21409: EQUAL
21410: IFTRUE 21414
21412: GO 21421
21414: POP
// hHackFog ; end ;
21415: CALL 34538 0 0
21419: GO 21422
21421: POP
// end ; if p2 = game_save_mode then
21422: LD_VAR 0 2
21426: PUSH
21427: LD_INT 102
21429: EQUAL
21430: IFFALSE 21485
// begin if p3 = 1 then
21432: LD_VAR 0 3
21436: PUSH
21437: LD_INT 1
21439: EQUAL
21440: IFFALSE 21452
// globalGameSaveCounter := p4 ;
21442: LD_ADDR_EXP 37
21446: PUSH
21447: LD_VAR 0 4
21451: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21452: LD_VAR 0 3
21456: PUSH
21457: LD_INT 2
21459: EQUAL
21460: PUSH
21461: LD_EXP 37
21465: AND
21466: IFFALSE 21485
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21468: LD_STRING setGameSaveCounter(
21470: PUSH
21471: LD_EXP 37
21475: STR
21476: PUSH
21477: LD_STRING )
21479: STR
21480: PPUSH
21481: CALL_OW 559
// end ; end ;
21485: LD_VAR 0 7
21489: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21490: LD_INT 0
21492: PPUSH
// streamModeActive := false ;
21493: LD_ADDR_EXP 38
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// normalCounter := 36 ;
21501: LD_ADDR_EXP 39
21505: PUSH
21506: LD_INT 36
21508: ST_TO_ADDR
// hardcoreCounter := 18 ;
21509: LD_ADDR_EXP 40
21513: PUSH
21514: LD_INT 18
21516: ST_TO_ADDR
// sRocket := false ;
21517: LD_ADDR_EXP 43
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sSpeed := false ;
21525: LD_ADDR_EXP 42
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sEngine := false ;
21533: LD_ADDR_EXP 44
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sSpec := false ;
21541: LD_ADDR_EXP 41
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sLevel := false ;
21549: LD_ADDR_EXP 45
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sArmoury := false ;
21557: LD_ADDR_EXP 46
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sRadar := false ;
21565: LD_ADDR_EXP 47
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sBunker := false ;
21573: LD_ADDR_EXP 48
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sHack := false ;
21581: LD_ADDR_EXP 49
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// sFire := false ;
21589: LD_ADDR_EXP 50
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// sRefresh := false ;
21597: LD_ADDR_EXP 51
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// sExp := false ;
21605: LD_ADDR_EXP 52
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// sDepot := false ;
21613: LD_ADDR_EXP 53
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
// sFlag := false ;
21621: LD_ADDR_EXP 54
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// sKamikadze := false ;
21629: LD_ADDR_EXP 62
21633: PUSH
21634: LD_INT 0
21636: ST_TO_ADDR
// sTroll := false ;
21637: LD_ADDR_EXP 63
21641: PUSH
21642: LD_INT 0
21644: ST_TO_ADDR
// sSlow := false ;
21645: LD_ADDR_EXP 64
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// sLack := false ;
21653: LD_ADDR_EXP 65
21657: PUSH
21658: LD_INT 0
21660: ST_TO_ADDR
// sTank := false ;
21661: LD_ADDR_EXP 67
21665: PUSH
21666: LD_INT 0
21668: ST_TO_ADDR
// sRemote := false ;
21669: LD_ADDR_EXP 68
21673: PUSH
21674: LD_INT 0
21676: ST_TO_ADDR
// sPowell := false ;
21677: LD_ADDR_EXP 69
21681: PUSH
21682: LD_INT 0
21684: ST_TO_ADDR
// sTeleport := false ;
21685: LD_ADDR_EXP 72
21689: PUSH
21690: LD_INT 0
21692: ST_TO_ADDR
// sOilTower := false ;
21693: LD_ADDR_EXP 74
21697: PUSH
21698: LD_INT 0
21700: ST_TO_ADDR
// sShovel := false ;
21701: LD_ADDR_EXP 75
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// sSheik := false ;
21709: LD_ADDR_EXP 76
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
// sEarthquake := false ;
21717: LD_ADDR_EXP 78
21721: PUSH
21722: LD_INT 0
21724: ST_TO_ADDR
// sAI := false ;
21725: LD_ADDR_EXP 79
21729: PUSH
21730: LD_INT 0
21732: ST_TO_ADDR
// sCargo := false ;
21733: LD_ADDR_EXP 82
21737: PUSH
21738: LD_INT 0
21740: ST_TO_ADDR
// sDLaser := false ;
21741: LD_ADDR_EXP 83
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// sExchange := false ;
21749: LD_ADDR_EXP 84
21753: PUSH
21754: LD_INT 0
21756: ST_TO_ADDR
// sFac := false ;
21757: LD_ADDR_EXP 85
21761: PUSH
21762: LD_INT 0
21764: ST_TO_ADDR
// sPower := false ;
21765: LD_ADDR_EXP 86
21769: PUSH
21770: LD_INT 0
21772: ST_TO_ADDR
// sRandom := false ;
21773: LD_ADDR_EXP 87
21777: PUSH
21778: LD_INT 0
21780: ST_TO_ADDR
// sShield := false ;
21781: LD_ADDR_EXP 88
21785: PUSH
21786: LD_INT 0
21788: ST_TO_ADDR
// sTime := false ;
21789: LD_ADDR_EXP 89
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// sTools := false ;
21797: LD_ADDR_EXP 90
21801: PUSH
21802: LD_INT 0
21804: ST_TO_ADDR
// sSold := false ;
21805: LD_ADDR_EXP 55
21809: PUSH
21810: LD_INT 0
21812: ST_TO_ADDR
// sDiff := false ;
21813: LD_ADDR_EXP 56
21817: PUSH
21818: LD_INT 0
21820: ST_TO_ADDR
// sFog := false ;
21821: LD_ADDR_EXP 59
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
// sReset := false ;
21829: LD_ADDR_EXP 60
21833: PUSH
21834: LD_INT 0
21836: ST_TO_ADDR
// sSun := false ;
21837: LD_ADDR_EXP 61
21841: PUSH
21842: LD_INT 0
21844: ST_TO_ADDR
// sTiger := false ;
21845: LD_ADDR_EXP 57
21849: PUSH
21850: LD_INT 0
21852: ST_TO_ADDR
// sBomb := false ;
21853: LD_ADDR_EXP 58
21857: PUSH
21858: LD_INT 0
21860: ST_TO_ADDR
// sWound := false ;
21861: LD_ADDR_EXP 66
21865: PUSH
21866: LD_INT 0
21868: ST_TO_ADDR
// sBetray := false ;
21869: LD_ADDR_EXP 70
21873: PUSH
21874: LD_INT 0
21876: ST_TO_ADDR
// sContamin := false ;
21877: LD_ADDR_EXP 71
21881: PUSH
21882: LD_INT 0
21884: ST_TO_ADDR
// sOil := false ;
21885: LD_ADDR_EXP 73
21889: PUSH
21890: LD_INT 0
21892: ST_TO_ADDR
// sStu := false ;
21893: LD_ADDR_EXP 77
21897: PUSH
21898: LD_INT 0
21900: ST_TO_ADDR
// sBazooka := false ;
21901: LD_ADDR_EXP 80
21905: PUSH
21906: LD_INT 0
21908: ST_TO_ADDR
// sMortar := false ;
21909: LD_ADDR_EXP 81
21913: PUSH
21914: LD_INT 0
21916: ST_TO_ADDR
// sRanger := false ;
21917: LD_ADDR_EXP 91
21921: PUSH
21922: LD_INT 0
21924: ST_TO_ADDR
// sComputer := false ;
21925: LD_ADDR_EXP 92
21929: PUSH
21930: LD_INT 0
21932: ST_TO_ADDR
// s30 := false ;
21933: LD_ADDR_EXP 93
21937: PUSH
21938: LD_INT 0
21940: ST_TO_ADDR
// s60 := false ;
21941: LD_ADDR_EXP 94
21945: PUSH
21946: LD_INT 0
21948: ST_TO_ADDR
// end ;
21949: LD_VAR 0 1
21953: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21954: LD_INT 0
21956: PPUSH
21957: PPUSH
21958: PPUSH
21959: PPUSH
21960: PPUSH
21961: PPUSH
21962: PPUSH
// result := [ ] ;
21963: LD_ADDR_VAR 0 2
21967: PUSH
21968: EMPTY
21969: ST_TO_ADDR
// if campaign_id = 1 then
21970: LD_OWVAR 69
21974: PUSH
21975: LD_INT 1
21977: EQUAL
21978: IFFALSE 25144
// begin case mission_number of 1 :
21980: LD_OWVAR 70
21984: PUSH
21985: LD_INT 1
21987: DOUBLE
21988: EQUAL
21989: IFTRUE 21993
21991: GO 22069
21993: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21994: LD_ADDR_VAR 0 2
21998: PUSH
21999: LD_INT 2
22001: PUSH
22002: LD_INT 4
22004: PUSH
22005: LD_INT 11
22007: PUSH
22008: LD_INT 12
22010: PUSH
22011: LD_INT 15
22013: PUSH
22014: LD_INT 16
22016: PUSH
22017: LD_INT 22
22019: PUSH
22020: LD_INT 23
22022: PUSH
22023: LD_INT 26
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 101
22039: PUSH
22040: LD_INT 102
22042: PUSH
22043: LD_INT 106
22045: PUSH
22046: LD_INT 116
22048: PUSH
22049: LD_INT 117
22051: PUSH
22052: LD_INT 118
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: ST_TO_ADDR
22067: GO 25142
22069: LD_INT 2
22071: DOUBLE
22072: EQUAL
22073: IFTRUE 22077
22075: GO 22161
22077: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22078: LD_ADDR_VAR 0 2
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 4
22088: PUSH
22089: LD_INT 11
22091: PUSH
22092: LD_INT 12
22094: PUSH
22095: LD_INT 15
22097: PUSH
22098: LD_INT 16
22100: PUSH
22101: LD_INT 22
22103: PUSH
22104: LD_INT 23
22106: PUSH
22107: LD_INT 26
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 101
22123: PUSH
22124: LD_INT 102
22126: PUSH
22127: LD_INT 105
22129: PUSH
22130: LD_INT 106
22132: PUSH
22133: LD_INT 108
22135: PUSH
22136: LD_INT 116
22138: PUSH
22139: LD_INT 117
22141: PUSH
22142: LD_INT 118
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: ST_TO_ADDR
22159: GO 25142
22161: LD_INT 3
22163: DOUBLE
22164: EQUAL
22165: IFTRUE 22169
22167: GO 22257
22169: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22170: LD_ADDR_VAR 0 2
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 4
22180: PUSH
22181: LD_INT 5
22183: PUSH
22184: LD_INT 11
22186: PUSH
22187: LD_INT 12
22189: PUSH
22190: LD_INT 15
22192: PUSH
22193: LD_INT 16
22195: PUSH
22196: LD_INT 22
22198: PUSH
22199: LD_INT 26
22201: PUSH
22202: LD_INT 36
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 101
22219: PUSH
22220: LD_INT 102
22222: PUSH
22223: LD_INT 105
22225: PUSH
22226: LD_INT 106
22228: PUSH
22229: LD_INT 108
22231: PUSH
22232: LD_INT 116
22234: PUSH
22235: LD_INT 117
22237: PUSH
22238: LD_INT 118
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: ST_TO_ADDR
22255: GO 25142
22257: LD_INT 4
22259: DOUBLE
22260: EQUAL
22261: IFTRUE 22265
22263: GO 22361
22265: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22266: LD_ADDR_VAR 0 2
22270: PUSH
22271: LD_INT 2
22273: PUSH
22274: LD_INT 4
22276: PUSH
22277: LD_INT 5
22279: PUSH
22280: LD_INT 8
22282: PUSH
22283: LD_INT 11
22285: PUSH
22286: LD_INT 12
22288: PUSH
22289: LD_INT 15
22291: PUSH
22292: LD_INT 16
22294: PUSH
22295: LD_INT 22
22297: PUSH
22298: LD_INT 23
22300: PUSH
22301: LD_INT 26
22303: PUSH
22304: LD_INT 36
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 101
22323: PUSH
22324: LD_INT 102
22326: PUSH
22327: LD_INT 105
22329: PUSH
22330: LD_INT 106
22332: PUSH
22333: LD_INT 108
22335: PUSH
22336: LD_INT 116
22338: PUSH
22339: LD_INT 117
22341: PUSH
22342: LD_INT 118
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: ST_TO_ADDR
22359: GO 25142
22361: LD_INT 5
22363: DOUBLE
22364: EQUAL
22365: IFTRUE 22369
22367: GO 22481
22369: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22370: LD_ADDR_VAR 0 2
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 4
22380: PUSH
22381: LD_INT 5
22383: PUSH
22384: LD_INT 6
22386: PUSH
22387: LD_INT 8
22389: PUSH
22390: LD_INT 11
22392: PUSH
22393: LD_INT 12
22395: PUSH
22396: LD_INT 15
22398: PUSH
22399: LD_INT 16
22401: PUSH
22402: LD_INT 22
22404: PUSH
22405: LD_INT 23
22407: PUSH
22408: LD_INT 25
22410: PUSH
22411: LD_INT 26
22413: PUSH
22414: LD_INT 36
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 101
22435: PUSH
22436: LD_INT 102
22438: PUSH
22439: LD_INT 105
22441: PUSH
22442: LD_INT 106
22444: PUSH
22445: LD_INT 108
22447: PUSH
22448: LD_INT 109
22450: PUSH
22451: LD_INT 112
22453: PUSH
22454: LD_INT 116
22456: PUSH
22457: LD_INT 117
22459: PUSH
22460: LD_INT 118
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: ST_TO_ADDR
22479: GO 25142
22481: LD_INT 6
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22621
22489: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22490: LD_ADDR_VAR 0 2
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: LD_INT 4
22500: PUSH
22501: LD_INT 5
22503: PUSH
22504: LD_INT 6
22506: PUSH
22507: LD_INT 8
22509: PUSH
22510: LD_INT 11
22512: PUSH
22513: LD_INT 12
22515: PUSH
22516: LD_INT 15
22518: PUSH
22519: LD_INT 16
22521: PUSH
22522: LD_INT 20
22524: PUSH
22525: LD_INT 21
22527: PUSH
22528: LD_INT 22
22530: PUSH
22531: LD_INT 23
22533: PUSH
22534: LD_INT 25
22536: PUSH
22537: LD_INT 26
22539: PUSH
22540: LD_INT 30
22542: PUSH
22543: LD_INT 31
22545: PUSH
22546: LD_INT 32
22548: PUSH
22549: LD_INT 36
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 101
22575: PUSH
22576: LD_INT 102
22578: PUSH
22579: LD_INT 105
22581: PUSH
22582: LD_INT 106
22584: PUSH
22585: LD_INT 108
22587: PUSH
22588: LD_INT 109
22590: PUSH
22591: LD_INT 112
22593: PUSH
22594: LD_INT 116
22596: PUSH
22597: LD_INT 117
22599: PUSH
22600: LD_INT 118
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: ST_TO_ADDR
22619: GO 25142
22621: LD_INT 7
22623: DOUBLE
22624: EQUAL
22625: IFTRUE 22629
22627: GO 22741
22629: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22630: LD_ADDR_VAR 0 2
22634: PUSH
22635: LD_INT 2
22637: PUSH
22638: LD_INT 4
22640: PUSH
22641: LD_INT 5
22643: PUSH
22644: LD_INT 7
22646: PUSH
22647: LD_INT 11
22649: PUSH
22650: LD_INT 12
22652: PUSH
22653: LD_INT 15
22655: PUSH
22656: LD_INT 16
22658: PUSH
22659: LD_INT 20
22661: PUSH
22662: LD_INT 21
22664: PUSH
22665: LD_INT 22
22667: PUSH
22668: LD_INT 23
22670: PUSH
22671: LD_INT 25
22673: PUSH
22674: LD_INT 26
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 101
22695: PUSH
22696: LD_INT 102
22698: PUSH
22699: LD_INT 103
22701: PUSH
22702: LD_INT 105
22704: PUSH
22705: LD_INT 106
22707: PUSH
22708: LD_INT 108
22710: PUSH
22711: LD_INT 112
22713: PUSH
22714: LD_INT 116
22716: PUSH
22717: LD_INT 117
22719: PUSH
22720: LD_INT 118
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: ST_TO_ADDR
22739: GO 25142
22741: LD_INT 8
22743: DOUBLE
22744: EQUAL
22745: IFTRUE 22749
22747: GO 22889
22749: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22750: LD_ADDR_VAR 0 2
22754: PUSH
22755: LD_INT 2
22757: PUSH
22758: LD_INT 4
22760: PUSH
22761: LD_INT 5
22763: PUSH
22764: LD_INT 6
22766: PUSH
22767: LD_INT 7
22769: PUSH
22770: LD_INT 8
22772: PUSH
22773: LD_INT 11
22775: PUSH
22776: LD_INT 12
22778: PUSH
22779: LD_INT 15
22781: PUSH
22782: LD_INT 16
22784: PUSH
22785: LD_INT 20
22787: PUSH
22788: LD_INT 21
22790: PUSH
22791: LD_INT 22
22793: PUSH
22794: LD_INT 23
22796: PUSH
22797: LD_INT 25
22799: PUSH
22800: LD_INT 26
22802: PUSH
22803: LD_INT 30
22805: PUSH
22806: LD_INT 31
22808: PUSH
22809: LD_INT 32
22811: PUSH
22812: LD_INT 36
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 101
22839: PUSH
22840: LD_INT 102
22842: PUSH
22843: LD_INT 103
22845: PUSH
22846: LD_INT 105
22848: PUSH
22849: LD_INT 106
22851: PUSH
22852: LD_INT 108
22854: PUSH
22855: LD_INT 109
22857: PUSH
22858: LD_INT 112
22860: PUSH
22861: LD_INT 116
22863: PUSH
22864: LD_INT 117
22866: PUSH
22867: LD_INT 118
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: ST_TO_ADDR
22887: GO 25142
22889: LD_INT 9
22891: DOUBLE
22892: EQUAL
22893: IFTRUE 22897
22895: GO 23045
22897: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22898: LD_ADDR_VAR 0 2
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: LD_INT 4
22908: PUSH
22909: LD_INT 5
22911: PUSH
22912: LD_INT 6
22914: PUSH
22915: LD_INT 7
22917: PUSH
22918: LD_INT 8
22920: PUSH
22921: LD_INT 11
22923: PUSH
22924: LD_INT 12
22926: PUSH
22927: LD_INT 15
22929: PUSH
22930: LD_INT 16
22932: PUSH
22933: LD_INT 20
22935: PUSH
22936: LD_INT 21
22938: PUSH
22939: LD_INT 22
22941: PUSH
22942: LD_INT 23
22944: PUSH
22945: LD_INT 25
22947: PUSH
22948: LD_INT 26
22950: PUSH
22951: LD_INT 28
22953: PUSH
22954: LD_INT 30
22956: PUSH
22957: LD_INT 31
22959: PUSH
22960: LD_INT 32
22962: PUSH
22963: LD_INT 36
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 101
22991: PUSH
22992: LD_INT 102
22994: PUSH
22995: LD_INT 103
22997: PUSH
22998: LD_INT 105
23000: PUSH
23001: LD_INT 106
23003: PUSH
23004: LD_INT 108
23006: PUSH
23007: LD_INT 109
23009: PUSH
23010: LD_INT 112
23012: PUSH
23013: LD_INT 114
23015: PUSH
23016: LD_INT 116
23018: PUSH
23019: LD_INT 117
23021: PUSH
23022: LD_INT 118
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: ST_TO_ADDR
23043: GO 25142
23045: LD_INT 10
23047: DOUBLE
23048: EQUAL
23049: IFTRUE 23053
23051: GO 23249
23053: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23054: LD_ADDR_VAR 0 2
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: LD_INT 4
23064: PUSH
23065: LD_INT 5
23067: PUSH
23068: LD_INT 6
23070: PUSH
23071: LD_INT 7
23073: PUSH
23074: LD_INT 8
23076: PUSH
23077: LD_INT 9
23079: PUSH
23080: LD_INT 10
23082: PUSH
23083: LD_INT 11
23085: PUSH
23086: LD_INT 12
23088: PUSH
23089: LD_INT 13
23091: PUSH
23092: LD_INT 14
23094: PUSH
23095: LD_INT 15
23097: PUSH
23098: LD_INT 16
23100: PUSH
23101: LD_INT 17
23103: PUSH
23104: LD_INT 18
23106: PUSH
23107: LD_INT 19
23109: PUSH
23110: LD_INT 20
23112: PUSH
23113: LD_INT 21
23115: PUSH
23116: LD_INT 22
23118: PUSH
23119: LD_INT 23
23121: PUSH
23122: LD_INT 24
23124: PUSH
23125: LD_INT 25
23127: PUSH
23128: LD_INT 26
23130: PUSH
23131: LD_INT 28
23133: PUSH
23134: LD_INT 30
23136: PUSH
23137: LD_INT 31
23139: PUSH
23140: LD_INT 32
23142: PUSH
23143: LD_INT 36
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 101
23179: PUSH
23180: LD_INT 102
23182: PUSH
23183: LD_INT 103
23185: PUSH
23186: LD_INT 104
23188: PUSH
23189: LD_INT 105
23191: PUSH
23192: LD_INT 106
23194: PUSH
23195: LD_INT 107
23197: PUSH
23198: LD_INT 108
23200: PUSH
23201: LD_INT 109
23203: PUSH
23204: LD_INT 110
23206: PUSH
23207: LD_INT 111
23209: PUSH
23210: LD_INT 112
23212: PUSH
23213: LD_INT 114
23215: PUSH
23216: LD_INT 116
23218: PUSH
23219: LD_INT 117
23221: PUSH
23222: LD_INT 118
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: ST_TO_ADDR
23247: GO 25142
23249: LD_INT 11
23251: DOUBLE
23252: EQUAL
23253: IFTRUE 23257
23255: GO 23461
23257: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23258: LD_ADDR_VAR 0 2
23262: PUSH
23263: LD_INT 2
23265: PUSH
23266: LD_INT 3
23268: PUSH
23269: LD_INT 4
23271: PUSH
23272: LD_INT 5
23274: PUSH
23275: LD_INT 6
23277: PUSH
23278: LD_INT 7
23280: PUSH
23281: LD_INT 8
23283: PUSH
23284: LD_INT 9
23286: PUSH
23287: LD_INT 10
23289: PUSH
23290: LD_INT 11
23292: PUSH
23293: LD_INT 12
23295: PUSH
23296: LD_INT 13
23298: PUSH
23299: LD_INT 14
23301: PUSH
23302: LD_INT 15
23304: PUSH
23305: LD_INT 16
23307: PUSH
23308: LD_INT 17
23310: PUSH
23311: LD_INT 18
23313: PUSH
23314: LD_INT 19
23316: PUSH
23317: LD_INT 20
23319: PUSH
23320: LD_INT 21
23322: PUSH
23323: LD_INT 22
23325: PUSH
23326: LD_INT 23
23328: PUSH
23329: LD_INT 24
23331: PUSH
23332: LD_INT 25
23334: PUSH
23335: LD_INT 26
23337: PUSH
23338: LD_INT 28
23340: PUSH
23341: LD_INT 30
23343: PUSH
23344: LD_INT 31
23346: PUSH
23347: LD_INT 32
23349: PUSH
23350: LD_INT 34
23352: PUSH
23353: LD_INT 36
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 101
23391: PUSH
23392: LD_INT 102
23394: PUSH
23395: LD_INT 103
23397: PUSH
23398: LD_INT 104
23400: PUSH
23401: LD_INT 105
23403: PUSH
23404: LD_INT 106
23406: PUSH
23407: LD_INT 107
23409: PUSH
23410: LD_INT 108
23412: PUSH
23413: LD_INT 109
23415: PUSH
23416: LD_INT 110
23418: PUSH
23419: LD_INT 111
23421: PUSH
23422: LD_INT 112
23424: PUSH
23425: LD_INT 114
23427: PUSH
23428: LD_INT 116
23430: PUSH
23431: LD_INT 117
23433: PUSH
23434: LD_INT 118
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: ST_TO_ADDR
23459: GO 25142
23461: LD_INT 12
23463: DOUBLE
23464: EQUAL
23465: IFTRUE 23469
23467: GO 23689
23469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23470: LD_ADDR_VAR 0 2
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: LD_INT 3
23483: PUSH
23484: LD_INT 4
23486: PUSH
23487: LD_INT 5
23489: PUSH
23490: LD_INT 6
23492: PUSH
23493: LD_INT 7
23495: PUSH
23496: LD_INT 8
23498: PUSH
23499: LD_INT 9
23501: PUSH
23502: LD_INT 10
23504: PUSH
23505: LD_INT 11
23507: PUSH
23508: LD_INT 12
23510: PUSH
23511: LD_INT 13
23513: PUSH
23514: LD_INT 14
23516: PUSH
23517: LD_INT 15
23519: PUSH
23520: LD_INT 16
23522: PUSH
23523: LD_INT 17
23525: PUSH
23526: LD_INT 18
23528: PUSH
23529: LD_INT 19
23531: PUSH
23532: LD_INT 20
23534: PUSH
23535: LD_INT 21
23537: PUSH
23538: LD_INT 22
23540: PUSH
23541: LD_INT 23
23543: PUSH
23544: LD_INT 24
23546: PUSH
23547: LD_INT 25
23549: PUSH
23550: LD_INT 26
23552: PUSH
23553: LD_INT 27
23555: PUSH
23556: LD_INT 28
23558: PUSH
23559: LD_INT 30
23561: PUSH
23562: LD_INT 31
23564: PUSH
23565: LD_INT 32
23567: PUSH
23568: LD_INT 33
23570: PUSH
23571: LD_INT 34
23573: PUSH
23574: LD_INT 36
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 101
23615: PUSH
23616: LD_INT 102
23618: PUSH
23619: LD_INT 103
23621: PUSH
23622: LD_INT 104
23624: PUSH
23625: LD_INT 105
23627: PUSH
23628: LD_INT 106
23630: PUSH
23631: LD_INT 107
23633: PUSH
23634: LD_INT 108
23636: PUSH
23637: LD_INT 109
23639: PUSH
23640: LD_INT 110
23642: PUSH
23643: LD_INT 111
23645: PUSH
23646: LD_INT 112
23648: PUSH
23649: LD_INT 113
23651: PUSH
23652: LD_INT 114
23654: PUSH
23655: LD_INT 116
23657: PUSH
23658: LD_INT 117
23660: PUSH
23661: LD_INT 118
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: ST_TO_ADDR
23687: GO 25142
23689: LD_INT 13
23691: DOUBLE
23692: EQUAL
23693: IFTRUE 23697
23695: GO 23905
23697: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23698: LD_ADDR_VAR 0 2
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: LD_INT 3
23711: PUSH
23712: LD_INT 4
23714: PUSH
23715: LD_INT 5
23717: PUSH
23718: LD_INT 8
23720: PUSH
23721: LD_INT 9
23723: PUSH
23724: LD_INT 10
23726: PUSH
23727: LD_INT 11
23729: PUSH
23730: LD_INT 12
23732: PUSH
23733: LD_INT 14
23735: PUSH
23736: LD_INT 15
23738: PUSH
23739: LD_INT 16
23741: PUSH
23742: LD_INT 17
23744: PUSH
23745: LD_INT 18
23747: PUSH
23748: LD_INT 19
23750: PUSH
23751: LD_INT 20
23753: PUSH
23754: LD_INT 21
23756: PUSH
23757: LD_INT 22
23759: PUSH
23760: LD_INT 23
23762: PUSH
23763: LD_INT 24
23765: PUSH
23766: LD_INT 25
23768: PUSH
23769: LD_INT 26
23771: PUSH
23772: LD_INT 27
23774: PUSH
23775: LD_INT 28
23777: PUSH
23778: LD_INT 30
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: LD_INT 32
23786: PUSH
23787: LD_INT 33
23789: PUSH
23790: LD_INT 34
23792: PUSH
23793: LD_INT 36
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 101
23831: PUSH
23832: LD_INT 102
23834: PUSH
23835: LD_INT 103
23837: PUSH
23838: LD_INT 104
23840: PUSH
23841: LD_INT 105
23843: PUSH
23844: LD_INT 106
23846: PUSH
23847: LD_INT 107
23849: PUSH
23850: LD_INT 108
23852: PUSH
23853: LD_INT 109
23855: PUSH
23856: LD_INT 110
23858: PUSH
23859: LD_INT 111
23861: PUSH
23862: LD_INT 112
23864: PUSH
23865: LD_INT 113
23867: PUSH
23868: LD_INT 114
23870: PUSH
23871: LD_INT 116
23873: PUSH
23874: LD_INT 117
23876: PUSH
23877: LD_INT 118
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: ST_TO_ADDR
23903: GO 25142
23905: LD_INT 14
23907: DOUBLE
23908: EQUAL
23909: IFTRUE 23913
23911: GO 24137
23913: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23914: LD_ADDR_VAR 0 2
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: LD_INT 2
23924: PUSH
23925: LD_INT 3
23927: PUSH
23928: LD_INT 4
23930: PUSH
23931: LD_INT 5
23933: PUSH
23934: LD_INT 6
23936: PUSH
23937: LD_INT 7
23939: PUSH
23940: LD_INT 8
23942: PUSH
23943: LD_INT 9
23945: PUSH
23946: LD_INT 10
23948: PUSH
23949: LD_INT 11
23951: PUSH
23952: LD_INT 12
23954: PUSH
23955: LD_INT 13
23957: PUSH
23958: LD_INT 14
23960: PUSH
23961: LD_INT 15
23963: PUSH
23964: LD_INT 16
23966: PUSH
23967: LD_INT 17
23969: PUSH
23970: LD_INT 18
23972: PUSH
23973: LD_INT 19
23975: PUSH
23976: LD_INT 20
23978: PUSH
23979: LD_INT 21
23981: PUSH
23982: LD_INT 22
23984: PUSH
23985: LD_INT 23
23987: PUSH
23988: LD_INT 24
23990: PUSH
23991: LD_INT 25
23993: PUSH
23994: LD_INT 26
23996: PUSH
23997: LD_INT 27
23999: PUSH
24000: LD_INT 28
24002: PUSH
24003: LD_INT 29
24005: PUSH
24006: LD_INT 30
24008: PUSH
24009: LD_INT 31
24011: PUSH
24012: LD_INT 32
24014: PUSH
24015: LD_INT 33
24017: PUSH
24018: LD_INT 34
24020: PUSH
24021: LD_INT 36
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 101
24063: PUSH
24064: LD_INT 102
24066: PUSH
24067: LD_INT 103
24069: PUSH
24070: LD_INT 104
24072: PUSH
24073: LD_INT 105
24075: PUSH
24076: LD_INT 106
24078: PUSH
24079: LD_INT 107
24081: PUSH
24082: LD_INT 108
24084: PUSH
24085: LD_INT 109
24087: PUSH
24088: LD_INT 110
24090: PUSH
24091: LD_INT 111
24093: PUSH
24094: LD_INT 112
24096: PUSH
24097: LD_INT 113
24099: PUSH
24100: LD_INT 114
24102: PUSH
24103: LD_INT 116
24105: PUSH
24106: LD_INT 117
24108: PUSH
24109: LD_INT 118
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: ST_TO_ADDR
24135: GO 25142
24137: LD_INT 15
24139: DOUBLE
24140: EQUAL
24141: IFTRUE 24145
24143: GO 24369
24145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24146: LD_ADDR_VAR 0 2
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: LD_INT 3
24159: PUSH
24160: LD_INT 4
24162: PUSH
24163: LD_INT 5
24165: PUSH
24166: LD_INT 6
24168: PUSH
24169: LD_INT 7
24171: PUSH
24172: LD_INT 8
24174: PUSH
24175: LD_INT 9
24177: PUSH
24178: LD_INT 10
24180: PUSH
24181: LD_INT 11
24183: PUSH
24184: LD_INT 12
24186: PUSH
24187: LD_INT 13
24189: PUSH
24190: LD_INT 14
24192: PUSH
24193: LD_INT 15
24195: PUSH
24196: LD_INT 16
24198: PUSH
24199: LD_INT 17
24201: PUSH
24202: LD_INT 18
24204: PUSH
24205: LD_INT 19
24207: PUSH
24208: LD_INT 20
24210: PUSH
24211: LD_INT 21
24213: PUSH
24214: LD_INT 22
24216: PUSH
24217: LD_INT 23
24219: PUSH
24220: LD_INT 24
24222: PUSH
24223: LD_INT 25
24225: PUSH
24226: LD_INT 26
24228: PUSH
24229: LD_INT 27
24231: PUSH
24232: LD_INT 28
24234: PUSH
24235: LD_INT 29
24237: PUSH
24238: LD_INT 30
24240: PUSH
24241: LD_INT 31
24243: PUSH
24244: LD_INT 32
24246: PUSH
24247: LD_INT 33
24249: PUSH
24250: LD_INT 34
24252: PUSH
24253: LD_INT 36
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 101
24295: PUSH
24296: LD_INT 102
24298: PUSH
24299: LD_INT 103
24301: PUSH
24302: LD_INT 104
24304: PUSH
24305: LD_INT 105
24307: PUSH
24308: LD_INT 106
24310: PUSH
24311: LD_INT 107
24313: PUSH
24314: LD_INT 108
24316: PUSH
24317: LD_INT 109
24319: PUSH
24320: LD_INT 110
24322: PUSH
24323: LD_INT 111
24325: PUSH
24326: LD_INT 112
24328: PUSH
24329: LD_INT 113
24331: PUSH
24332: LD_INT 114
24334: PUSH
24335: LD_INT 116
24337: PUSH
24338: LD_INT 117
24340: PUSH
24341: LD_INT 118
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: ST_TO_ADDR
24367: GO 25142
24369: LD_INT 16
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24513
24377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24378: LD_ADDR_VAR 0 2
24382: PUSH
24383: LD_INT 2
24385: PUSH
24386: LD_INT 4
24388: PUSH
24389: LD_INT 5
24391: PUSH
24392: LD_INT 7
24394: PUSH
24395: LD_INT 11
24397: PUSH
24398: LD_INT 12
24400: PUSH
24401: LD_INT 15
24403: PUSH
24404: LD_INT 16
24406: PUSH
24407: LD_INT 20
24409: PUSH
24410: LD_INT 21
24412: PUSH
24413: LD_INT 22
24415: PUSH
24416: LD_INT 23
24418: PUSH
24419: LD_INT 25
24421: PUSH
24422: LD_INT 26
24424: PUSH
24425: LD_INT 30
24427: PUSH
24428: LD_INT 31
24430: PUSH
24431: LD_INT 32
24433: PUSH
24434: LD_INT 33
24436: PUSH
24437: LD_INT 34
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 101
24463: PUSH
24464: LD_INT 102
24466: PUSH
24467: LD_INT 103
24469: PUSH
24470: LD_INT 106
24472: PUSH
24473: LD_INT 108
24475: PUSH
24476: LD_INT 112
24478: PUSH
24479: LD_INT 113
24481: PUSH
24482: LD_INT 114
24484: PUSH
24485: LD_INT 116
24487: PUSH
24488: LD_INT 117
24490: PUSH
24491: LD_INT 118
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: ST_TO_ADDR
24511: GO 25142
24513: LD_INT 17
24515: DOUBLE
24516: EQUAL
24517: IFTRUE 24521
24519: GO 24745
24521: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24522: LD_ADDR_VAR 0 2
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: LD_INT 3
24535: PUSH
24536: LD_INT 4
24538: PUSH
24539: LD_INT 5
24541: PUSH
24542: LD_INT 6
24544: PUSH
24545: LD_INT 7
24547: PUSH
24548: LD_INT 8
24550: PUSH
24551: LD_INT 9
24553: PUSH
24554: LD_INT 10
24556: PUSH
24557: LD_INT 11
24559: PUSH
24560: LD_INT 12
24562: PUSH
24563: LD_INT 13
24565: PUSH
24566: LD_INT 14
24568: PUSH
24569: LD_INT 15
24571: PUSH
24572: LD_INT 16
24574: PUSH
24575: LD_INT 17
24577: PUSH
24578: LD_INT 18
24580: PUSH
24581: LD_INT 19
24583: PUSH
24584: LD_INT 20
24586: PUSH
24587: LD_INT 21
24589: PUSH
24590: LD_INT 22
24592: PUSH
24593: LD_INT 23
24595: PUSH
24596: LD_INT 24
24598: PUSH
24599: LD_INT 25
24601: PUSH
24602: LD_INT 26
24604: PUSH
24605: LD_INT 27
24607: PUSH
24608: LD_INT 28
24610: PUSH
24611: LD_INT 29
24613: PUSH
24614: LD_INT 30
24616: PUSH
24617: LD_INT 31
24619: PUSH
24620: LD_INT 32
24622: PUSH
24623: LD_INT 33
24625: PUSH
24626: LD_INT 34
24628: PUSH
24629: LD_INT 36
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 101
24671: PUSH
24672: LD_INT 102
24674: PUSH
24675: LD_INT 103
24677: PUSH
24678: LD_INT 104
24680: PUSH
24681: LD_INT 105
24683: PUSH
24684: LD_INT 106
24686: PUSH
24687: LD_INT 107
24689: PUSH
24690: LD_INT 108
24692: PUSH
24693: LD_INT 109
24695: PUSH
24696: LD_INT 110
24698: PUSH
24699: LD_INT 111
24701: PUSH
24702: LD_INT 112
24704: PUSH
24705: LD_INT 113
24707: PUSH
24708: LD_INT 114
24710: PUSH
24711: LD_INT 116
24713: PUSH
24714: LD_INT 117
24716: PUSH
24717: LD_INT 118
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: ST_TO_ADDR
24743: GO 25142
24745: LD_INT 18
24747: DOUBLE
24748: EQUAL
24749: IFTRUE 24753
24751: GO 24901
24753: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24754: LD_ADDR_VAR 0 2
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: LD_INT 4
24764: PUSH
24765: LD_INT 5
24767: PUSH
24768: LD_INT 7
24770: PUSH
24771: LD_INT 11
24773: PUSH
24774: LD_INT 12
24776: PUSH
24777: LD_INT 15
24779: PUSH
24780: LD_INT 16
24782: PUSH
24783: LD_INT 20
24785: PUSH
24786: LD_INT 21
24788: PUSH
24789: LD_INT 22
24791: PUSH
24792: LD_INT 23
24794: PUSH
24795: LD_INT 25
24797: PUSH
24798: LD_INT 26
24800: PUSH
24801: LD_INT 30
24803: PUSH
24804: LD_INT 31
24806: PUSH
24807: LD_INT 32
24809: PUSH
24810: LD_INT 33
24812: PUSH
24813: LD_INT 34
24815: PUSH
24816: LD_INT 35
24818: PUSH
24819: LD_INT 36
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 101
24847: PUSH
24848: LD_INT 102
24850: PUSH
24851: LD_INT 103
24853: PUSH
24854: LD_INT 106
24856: PUSH
24857: LD_INT 108
24859: PUSH
24860: LD_INT 112
24862: PUSH
24863: LD_INT 113
24865: PUSH
24866: LD_INT 114
24868: PUSH
24869: LD_INT 115
24871: PUSH
24872: LD_INT 116
24874: PUSH
24875: LD_INT 117
24877: PUSH
24878: LD_INT 118
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: ST_TO_ADDR
24899: GO 25142
24901: LD_INT 19
24903: DOUBLE
24904: EQUAL
24905: IFTRUE 24909
24907: GO 25141
24909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24910: LD_ADDR_VAR 0 2
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: LD_INT 3
24923: PUSH
24924: LD_INT 4
24926: PUSH
24927: LD_INT 5
24929: PUSH
24930: LD_INT 6
24932: PUSH
24933: LD_INT 7
24935: PUSH
24936: LD_INT 8
24938: PUSH
24939: LD_INT 9
24941: PUSH
24942: LD_INT 10
24944: PUSH
24945: LD_INT 11
24947: PUSH
24948: LD_INT 12
24950: PUSH
24951: LD_INT 13
24953: PUSH
24954: LD_INT 14
24956: PUSH
24957: LD_INT 15
24959: PUSH
24960: LD_INT 16
24962: PUSH
24963: LD_INT 17
24965: PUSH
24966: LD_INT 18
24968: PUSH
24969: LD_INT 19
24971: PUSH
24972: LD_INT 20
24974: PUSH
24975: LD_INT 21
24977: PUSH
24978: LD_INT 22
24980: PUSH
24981: LD_INT 23
24983: PUSH
24984: LD_INT 24
24986: PUSH
24987: LD_INT 25
24989: PUSH
24990: LD_INT 26
24992: PUSH
24993: LD_INT 27
24995: PUSH
24996: LD_INT 28
24998: PUSH
24999: LD_INT 29
25001: PUSH
25002: LD_INT 30
25004: PUSH
25005: LD_INT 31
25007: PUSH
25008: LD_INT 32
25010: PUSH
25011: LD_INT 33
25013: PUSH
25014: LD_INT 34
25016: PUSH
25017: LD_INT 35
25019: PUSH
25020: LD_INT 36
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 101
25063: PUSH
25064: LD_INT 102
25066: PUSH
25067: LD_INT 103
25069: PUSH
25070: LD_INT 104
25072: PUSH
25073: LD_INT 105
25075: PUSH
25076: LD_INT 106
25078: PUSH
25079: LD_INT 107
25081: PUSH
25082: LD_INT 108
25084: PUSH
25085: LD_INT 109
25087: PUSH
25088: LD_INT 110
25090: PUSH
25091: LD_INT 111
25093: PUSH
25094: LD_INT 112
25096: PUSH
25097: LD_INT 113
25099: PUSH
25100: LD_INT 114
25102: PUSH
25103: LD_INT 115
25105: PUSH
25106: LD_INT 116
25108: PUSH
25109: LD_INT 117
25111: PUSH
25112: LD_INT 118
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: ST_TO_ADDR
25139: GO 25142
25141: POP
// end else
25142: GO 25373
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25144: LD_ADDR_VAR 0 2
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: LD_INT 2
25154: PUSH
25155: LD_INT 3
25157: PUSH
25158: LD_INT 4
25160: PUSH
25161: LD_INT 5
25163: PUSH
25164: LD_INT 6
25166: PUSH
25167: LD_INT 7
25169: PUSH
25170: LD_INT 8
25172: PUSH
25173: LD_INT 9
25175: PUSH
25176: LD_INT 10
25178: PUSH
25179: LD_INT 11
25181: PUSH
25182: LD_INT 12
25184: PUSH
25185: LD_INT 13
25187: PUSH
25188: LD_INT 14
25190: PUSH
25191: LD_INT 15
25193: PUSH
25194: LD_INT 16
25196: PUSH
25197: LD_INT 17
25199: PUSH
25200: LD_INT 18
25202: PUSH
25203: LD_INT 19
25205: PUSH
25206: LD_INT 20
25208: PUSH
25209: LD_INT 21
25211: PUSH
25212: LD_INT 22
25214: PUSH
25215: LD_INT 23
25217: PUSH
25218: LD_INT 24
25220: PUSH
25221: LD_INT 25
25223: PUSH
25224: LD_INT 26
25226: PUSH
25227: LD_INT 27
25229: PUSH
25230: LD_INT 28
25232: PUSH
25233: LD_INT 29
25235: PUSH
25236: LD_INT 30
25238: PUSH
25239: LD_INT 31
25241: PUSH
25242: LD_INT 32
25244: PUSH
25245: LD_INT 33
25247: PUSH
25248: LD_INT 34
25250: PUSH
25251: LD_INT 35
25253: PUSH
25254: LD_INT 36
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 101
25297: PUSH
25298: LD_INT 102
25300: PUSH
25301: LD_INT 103
25303: PUSH
25304: LD_INT 104
25306: PUSH
25307: LD_INT 105
25309: PUSH
25310: LD_INT 106
25312: PUSH
25313: LD_INT 107
25315: PUSH
25316: LD_INT 108
25318: PUSH
25319: LD_INT 109
25321: PUSH
25322: LD_INT 110
25324: PUSH
25325: LD_INT 111
25327: PUSH
25328: LD_INT 112
25330: PUSH
25331: LD_INT 113
25333: PUSH
25334: LD_INT 114
25336: PUSH
25337: LD_INT 115
25339: PUSH
25340: LD_INT 116
25342: PUSH
25343: LD_INT 117
25345: PUSH
25346: LD_INT 118
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: ST_TO_ADDR
// if result then
25373: LD_VAR 0 2
25377: IFFALSE 26163
// begin normal :=  ;
25379: LD_ADDR_VAR 0 5
25383: PUSH
25384: LD_STRING 
25386: ST_TO_ADDR
// hardcore :=  ;
25387: LD_ADDR_VAR 0 6
25391: PUSH
25392: LD_STRING 
25394: ST_TO_ADDR
// active :=  ;
25395: LD_ADDR_VAR 0 7
25399: PUSH
25400: LD_STRING 
25402: ST_TO_ADDR
// for i = 1 to normalCounter do
25403: LD_ADDR_VAR 0 8
25407: PUSH
25408: DOUBLE
25409: LD_INT 1
25411: DEC
25412: ST_TO_ADDR
25413: LD_EXP 39
25417: PUSH
25418: FOR_TO
25419: IFFALSE 25520
// begin tmp := 0 ;
25421: LD_ADDR_VAR 0 3
25425: PUSH
25426: LD_STRING 0
25428: ST_TO_ADDR
// if result [ 1 ] then
25429: LD_VAR 0 2
25433: PUSH
25434: LD_INT 1
25436: ARRAY
25437: IFFALSE 25502
// if result [ 1 ] [ 1 ] = i then
25439: LD_VAR 0 2
25443: PUSH
25444: LD_INT 1
25446: ARRAY
25447: PUSH
25448: LD_INT 1
25450: ARRAY
25451: PUSH
25452: LD_VAR 0 8
25456: EQUAL
25457: IFFALSE 25502
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25459: LD_ADDR_VAR 0 2
25463: PUSH
25464: LD_VAR 0 2
25468: PPUSH
25469: LD_INT 1
25471: PPUSH
25472: LD_VAR 0 2
25476: PUSH
25477: LD_INT 1
25479: ARRAY
25480: PPUSH
25481: LD_INT 1
25483: PPUSH
25484: CALL_OW 3
25488: PPUSH
25489: CALL_OW 1
25493: ST_TO_ADDR
// tmp := 1 ;
25494: LD_ADDR_VAR 0 3
25498: PUSH
25499: LD_STRING 1
25501: ST_TO_ADDR
// end ; normal := normal & tmp ;
25502: LD_ADDR_VAR 0 5
25506: PUSH
25507: LD_VAR 0 5
25511: PUSH
25512: LD_VAR 0 3
25516: STR
25517: ST_TO_ADDR
// end ;
25518: GO 25418
25520: POP
25521: POP
// for i = 1 to hardcoreCounter do
25522: LD_ADDR_VAR 0 8
25526: PUSH
25527: DOUBLE
25528: LD_INT 1
25530: DEC
25531: ST_TO_ADDR
25532: LD_EXP 40
25536: PUSH
25537: FOR_TO
25538: IFFALSE 25643
// begin tmp := 0 ;
25540: LD_ADDR_VAR 0 3
25544: PUSH
25545: LD_STRING 0
25547: ST_TO_ADDR
// if result [ 2 ] then
25548: LD_VAR 0 2
25552: PUSH
25553: LD_INT 2
25555: ARRAY
25556: IFFALSE 25625
// if result [ 2 ] [ 1 ] = 100 + i then
25558: LD_VAR 0 2
25562: PUSH
25563: LD_INT 2
25565: ARRAY
25566: PUSH
25567: LD_INT 1
25569: ARRAY
25570: PUSH
25571: LD_INT 100
25573: PUSH
25574: LD_VAR 0 8
25578: PLUS
25579: EQUAL
25580: IFFALSE 25625
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25582: LD_ADDR_VAR 0 2
25586: PUSH
25587: LD_VAR 0 2
25591: PPUSH
25592: LD_INT 2
25594: PPUSH
25595: LD_VAR 0 2
25599: PUSH
25600: LD_INT 2
25602: ARRAY
25603: PPUSH
25604: LD_INT 1
25606: PPUSH
25607: CALL_OW 3
25611: PPUSH
25612: CALL_OW 1
25616: ST_TO_ADDR
// tmp := 1 ;
25617: LD_ADDR_VAR 0 3
25621: PUSH
25622: LD_STRING 1
25624: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25625: LD_ADDR_VAR 0 6
25629: PUSH
25630: LD_VAR 0 6
25634: PUSH
25635: LD_VAR 0 3
25639: STR
25640: ST_TO_ADDR
// end ;
25641: GO 25537
25643: POP
25644: POP
// if isGameLoad then
25645: LD_VAR 0 1
25649: IFFALSE 26124
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25651: LD_ADDR_VAR 0 4
25655: PUSH
25656: LD_EXP 43
25660: PUSH
25661: LD_EXP 42
25665: PUSH
25666: LD_EXP 44
25670: PUSH
25671: LD_EXP 41
25675: PUSH
25676: LD_EXP 45
25680: PUSH
25681: LD_EXP 46
25685: PUSH
25686: LD_EXP 47
25690: PUSH
25691: LD_EXP 48
25695: PUSH
25696: LD_EXP 49
25700: PUSH
25701: LD_EXP 50
25705: PUSH
25706: LD_EXP 51
25710: PUSH
25711: LD_EXP 52
25715: PUSH
25716: LD_EXP 53
25720: PUSH
25721: LD_EXP 54
25725: PUSH
25726: LD_EXP 62
25730: PUSH
25731: LD_EXP 63
25735: PUSH
25736: LD_EXP 64
25740: PUSH
25741: LD_EXP 65
25745: PUSH
25746: LD_EXP 67
25750: PUSH
25751: LD_EXP 68
25755: PUSH
25756: LD_EXP 69
25760: PUSH
25761: LD_EXP 72
25765: PUSH
25766: LD_EXP 74
25770: PUSH
25771: LD_EXP 75
25775: PUSH
25776: LD_EXP 76
25780: PUSH
25781: LD_EXP 78
25785: PUSH
25786: LD_EXP 79
25790: PUSH
25791: LD_EXP 82
25795: PUSH
25796: LD_EXP 83
25800: PUSH
25801: LD_EXP 84
25805: PUSH
25806: LD_EXP 85
25810: PUSH
25811: LD_EXP 86
25815: PUSH
25816: LD_EXP 87
25820: PUSH
25821: LD_EXP 88
25825: PUSH
25826: LD_EXP 89
25830: PUSH
25831: LD_EXP 90
25835: PUSH
25836: LD_EXP 55
25840: PUSH
25841: LD_EXP 56
25845: PUSH
25846: LD_EXP 59
25850: PUSH
25851: LD_EXP 60
25855: PUSH
25856: LD_EXP 61
25860: PUSH
25861: LD_EXP 57
25865: PUSH
25866: LD_EXP 58
25870: PUSH
25871: LD_EXP 66
25875: PUSH
25876: LD_EXP 70
25880: PUSH
25881: LD_EXP 71
25885: PUSH
25886: LD_EXP 73
25890: PUSH
25891: LD_EXP 77
25895: PUSH
25896: LD_EXP 80
25900: PUSH
25901: LD_EXP 81
25905: PUSH
25906: LD_EXP 91
25910: PUSH
25911: LD_EXP 92
25915: PUSH
25916: LD_EXP 93
25920: PUSH
25921: LD_EXP 94
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: ST_TO_ADDR
// tmp :=  ;
25982: LD_ADDR_VAR 0 3
25986: PUSH
25987: LD_STRING 
25989: ST_TO_ADDR
// for i = 1 to normalCounter do
25990: LD_ADDR_VAR 0 8
25994: PUSH
25995: DOUBLE
25996: LD_INT 1
25998: DEC
25999: ST_TO_ADDR
26000: LD_EXP 39
26004: PUSH
26005: FOR_TO
26006: IFFALSE 26042
// begin if flags [ i ] then
26008: LD_VAR 0 4
26012: PUSH
26013: LD_VAR 0 8
26017: ARRAY
26018: IFFALSE 26040
// tmp := tmp & i & ; ;
26020: LD_ADDR_VAR 0 3
26024: PUSH
26025: LD_VAR 0 3
26029: PUSH
26030: LD_VAR 0 8
26034: STR
26035: PUSH
26036: LD_STRING ;
26038: STR
26039: ST_TO_ADDR
// end ;
26040: GO 26005
26042: POP
26043: POP
// for i = 1 to hardcoreCounter do
26044: LD_ADDR_VAR 0 8
26048: PUSH
26049: DOUBLE
26050: LD_INT 1
26052: DEC
26053: ST_TO_ADDR
26054: LD_EXP 40
26058: PUSH
26059: FOR_TO
26060: IFFALSE 26106
// begin if flags [ normalCounter + i ] then
26062: LD_VAR 0 4
26066: PUSH
26067: LD_EXP 39
26071: PUSH
26072: LD_VAR 0 8
26076: PLUS
26077: ARRAY
26078: IFFALSE 26104
// tmp := tmp & ( 100 + i ) & ; ;
26080: LD_ADDR_VAR 0 3
26084: PUSH
26085: LD_VAR 0 3
26089: PUSH
26090: LD_INT 100
26092: PUSH
26093: LD_VAR 0 8
26097: PLUS
26098: STR
26099: PUSH
26100: LD_STRING ;
26102: STR
26103: ST_TO_ADDR
// end ;
26104: GO 26059
26106: POP
26107: POP
// if tmp then
26108: LD_VAR 0 3
26112: IFFALSE 26124
// active := tmp ;
26114: LD_ADDR_VAR 0 7
26118: PUSH
26119: LD_VAR 0 3
26123: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26124: LD_STRING getStreamItemsFromMission("
26126: PUSH
26127: LD_VAR 0 5
26131: STR
26132: PUSH
26133: LD_STRING ","
26135: STR
26136: PUSH
26137: LD_VAR 0 6
26141: STR
26142: PUSH
26143: LD_STRING ","
26145: STR
26146: PUSH
26147: LD_VAR 0 7
26151: STR
26152: PUSH
26153: LD_STRING ")
26155: STR
26156: PPUSH
26157: CALL_OW 559
// end else
26161: GO 26170
// ToLua ( getStreamItemsFromMission("","","") ) ;
26163: LD_STRING getStreamItemsFromMission("","","")
26165: PPUSH
26166: CALL_OW 559
// end ;
26170: LD_VAR 0 2
26174: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26175: LD_EXP 38
26179: PUSH
26180: LD_EXP 43
26184: AND
26185: IFFALSE 26309
26187: GO 26189
26189: DISABLE
26190: LD_INT 0
26192: PPUSH
26193: PPUSH
// begin enable ;
26194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26195: LD_ADDR_VAR 0 2
26199: PUSH
26200: LD_INT 22
26202: PUSH
26203: LD_OWVAR 2
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 2
26214: PUSH
26215: LD_INT 34
26217: PUSH
26218: LD_INT 7
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 34
26227: PUSH
26228: LD_INT 45
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 34
26237: PUSH
26238: LD_INT 28
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 34
26247: PUSH
26248: LD_INT 47
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PPUSH
26266: CALL_OW 69
26270: ST_TO_ADDR
// if not tmp then
26271: LD_VAR 0 2
26275: NOT
26276: IFFALSE 26280
// exit ;
26278: GO 26309
// for i in tmp do
26280: LD_ADDR_VAR 0 1
26284: PUSH
26285: LD_VAR 0 2
26289: PUSH
26290: FOR_IN
26291: IFFALSE 26307
// begin SetLives ( i , 0 ) ;
26293: LD_VAR 0 1
26297: PPUSH
26298: LD_INT 0
26300: PPUSH
26301: CALL_OW 234
// end ;
26305: GO 26290
26307: POP
26308: POP
// end ;
26309: PPOPN 2
26311: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26312: LD_EXP 38
26316: PUSH
26317: LD_EXP 44
26321: AND
26322: IFFALSE 26406
26324: GO 26326
26326: DISABLE
26327: LD_INT 0
26329: PPUSH
26330: PPUSH
// begin enable ;
26331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26332: LD_ADDR_VAR 0 2
26336: PUSH
26337: LD_INT 22
26339: PUSH
26340: LD_OWVAR 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 32
26351: PUSH
26352: LD_INT 3
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PPUSH
26363: CALL_OW 69
26367: ST_TO_ADDR
// if not tmp then
26368: LD_VAR 0 2
26372: NOT
26373: IFFALSE 26377
// exit ;
26375: GO 26406
// for i in tmp do
26377: LD_ADDR_VAR 0 1
26381: PUSH
26382: LD_VAR 0 2
26386: PUSH
26387: FOR_IN
26388: IFFALSE 26404
// begin SetLives ( i , 0 ) ;
26390: LD_VAR 0 1
26394: PPUSH
26395: LD_INT 0
26397: PPUSH
26398: CALL_OW 234
// end ;
26402: GO 26387
26404: POP
26405: POP
// end ;
26406: PPOPN 2
26408: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26409: LD_EXP 38
26413: PUSH
26414: LD_EXP 41
26418: AND
26419: IFFALSE 26512
26421: GO 26423
26423: DISABLE
26424: LD_INT 0
26426: PPUSH
// begin enable ;
26427: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26428: LD_ADDR_VAR 0 1
26432: PUSH
26433: LD_INT 22
26435: PUSH
26436: LD_OWVAR 2
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: PUSH
26448: LD_INT 25
26450: PUSH
26451: LD_INT 5
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 25
26460: PUSH
26461: LD_INT 9
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 25
26470: PUSH
26471: LD_INT 8
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PPUSH
26488: CALL_OW 69
26492: PUSH
26493: FOR_IN
26494: IFFALSE 26510
// begin SetClass ( i , 1 ) ;
26496: LD_VAR 0 1
26500: PPUSH
26501: LD_INT 1
26503: PPUSH
26504: CALL_OW 336
// end ;
26508: GO 26493
26510: POP
26511: POP
// end ;
26512: PPOPN 1
26514: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26515: LD_EXP 38
26519: PUSH
26520: LD_EXP 42
26524: AND
26525: PUSH
26526: LD_OWVAR 65
26530: PUSH
26531: LD_INT 7
26533: LESS
26534: AND
26535: IFFALSE 26549
26537: GO 26539
26539: DISABLE
// begin enable ;
26540: ENABLE
// game_speed := 7 ;
26541: LD_ADDR_OWVAR 65
26545: PUSH
26546: LD_INT 7
26548: ST_TO_ADDR
// end ;
26549: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26550: LD_EXP 38
26554: PUSH
26555: LD_EXP 45
26559: AND
26560: IFFALSE 26762
26562: GO 26564
26564: DISABLE
26565: LD_INT 0
26567: PPUSH
26568: PPUSH
26569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26570: LD_ADDR_VAR 0 3
26574: PUSH
26575: LD_INT 81
26577: PUSH
26578: LD_OWVAR 2
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 21
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PPUSH
26601: CALL_OW 69
26605: ST_TO_ADDR
// if not tmp then
26606: LD_VAR 0 3
26610: NOT
26611: IFFALSE 26615
// exit ;
26613: GO 26762
// if tmp > 5 then
26615: LD_VAR 0 3
26619: PUSH
26620: LD_INT 5
26622: GREATER
26623: IFFALSE 26635
// k := 5 else
26625: LD_ADDR_VAR 0 2
26629: PUSH
26630: LD_INT 5
26632: ST_TO_ADDR
26633: GO 26645
// k := tmp ;
26635: LD_ADDR_VAR 0 2
26639: PUSH
26640: LD_VAR 0 3
26644: ST_TO_ADDR
// for i := 1 to k do
26645: LD_ADDR_VAR 0 1
26649: PUSH
26650: DOUBLE
26651: LD_INT 1
26653: DEC
26654: ST_TO_ADDR
26655: LD_VAR 0 2
26659: PUSH
26660: FOR_TO
26661: IFFALSE 26760
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26663: LD_VAR 0 3
26667: PUSH
26668: LD_VAR 0 1
26672: ARRAY
26673: PPUSH
26674: LD_VAR 0 1
26678: PUSH
26679: LD_INT 4
26681: MOD
26682: PUSH
26683: LD_INT 1
26685: PLUS
26686: PPUSH
26687: CALL_OW 259
26691: PUSH
26692: LD_INT 10
26694: LESS
26695: IFFALSE 26758
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26697: LD_VAR 0 3
26701: PUSH
26702: LD_VAR 0 1
26706: ARRAY
26707: PPUSH
26708: LD_VAR 0 1
26712: PUSH
26713: LD_INT 4
26715: MOD
26716: PUSH
26717: LD_INT 1
26719: PLUS
26720: PPUSH
26721: LD_VAR 0 3
26725: PUSH
26726: LD_VAR 0 1
26730: ARRAY
26731: PPUSH
26732: LD_VAR 0 1
26736: PUSH
26737: LD_INT 4
26739: MOD
26740: PUSH
26741: LD_INT 1
26743: PLUS
26744: PPUSH
26745: CALL_OW 259
26749: PUSH
26750: LD_INT 1
26752: PLUS
26753: PPUSH
26754: CALL_OW 237
26758: GO 26660
26760: POP
26761: POP
// end ;
26762: PPOPN 3
26764: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26765: LD_EXP 38
26769: PUSH
26770: LD_EXP 46
26774: AND
26775: IFFALSE 26795
26777: GO 26779
26779: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26780: LD_INT 4
26782: PPUSH
26783: LD_OWVAR 2
26787: PPUSH
26788: LD_INT 0
26790: PPUSH
26791: CALL_OW 324
26795: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26796: LD_EXP 38
26800: PUSH
26801: LD_EXP 75
26805: AND
26806: IFFALSE 26826
26808: GO 26810
26810: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26811: LD_INT 19
26813: PPUSH
26814: LD_OWVAR 2
26818: PPUSH
26819: LD_INT 0
26821: PPUSH
26822: CALL_OW 324
26826: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26827: LD_EXP 38
26831: PUSH
26832: LD_EXP 47
26836: AND
26837: IFFALSE 26939
26839: GO 26841
26841: DISABLE
26842: LD_INT 0
26844: PPUSH
26845: PPUSH
// begin enable ;
26846: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26847: LD_ADDR_VAR 0 2
26851: PUSH
26852: LD_INT 22
26854: PUSH
26855: LD_OWVAR 2
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: LD_INT 34
26869: PUSH
26870: LD_INT 11
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 34
26879: PUSH
26880: LD_INT 30
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PPUSH
26896: CALL_OW 69
26900: ST_TO_ADDR
// if not tmp then
26901: LD_VAR 0 2
26905: NOT
26906: IFFALSE 26910
// exit ;
26908: GO 26939
// for i in tmp do
26910: LD_ADDR_VAR 0 1
26914: PUSH
26915: LD_VAR 0 2
26919: PUSH
26920: FOR_IN
26921: IFFALSE 26937
// begin SetLives ( i , 0 ) ;
26923: LD_VAR 0 1
26927: PPUSH
26928: LD_INT 0
26930: PPUSH
26931: CALL_OW 234
// end ;
26935: GO 26920
26937: POP
26938: POP
// end ;
26939: PPOPN 2
26941: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26942: LD_EXP 38
26946: PUSH
26947: LD_EXP 48
26951: AND
26952: IFFALSE 26972
26954: GO 26956
26956: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26957: LD_INT 32
26959: PPUSH
26960: LD_OWVAR 2
26964: PPUSH
26965: LD_INT 0
26967: PPUSH
26968: CALL_OW 324
26972: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26973: LD_EXP 38
26977: PUSH
26978: LD_EXP 49
26982: AND
26983: IFFALSE 27164
26985: GO 26987
26987: DISABLE
26988: LD_INT 0
26990: PPUSH
26991: PPUSH
26992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26993: LD_ADDR_VAR 0 2
26997: PUSH
26998: LD_INT 22
27000: PUSH
27001: LD_OWVAR 2
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 33
27012: PUSH
27013: LD_INT 3
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PPUSH
27024: CALL_OW 69
27028: ST_TO_ADDR
// if not tmp then
27029: LD_VAR 0 2
27033: NOT
27034: IFFALSE 27038
// exit ;
27036: GO 27164
// side := 0 ;
27038: LD_ADDR_VAR 0 3
27042: PUSH
27043: LD_INT 0
27045: ST_TO_ADDR
// for i := 1 to 8 do
27046: LD_ADDR_VAR 0 1
27050: PUSH
27051: DOUBLE
27052: LD_INT 1
27054: DEC
27055: ST_TO_ADDR
27056: LD_INT 8
27058: PUSH
27059: FOR_TO
27060: IFFALSE 27108
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27062: LD_OWVAR 2
27066: PUSH
27067: LD_VAR 0 1
27071: NONEQUAL
27072: PUSH
27073: LD_OWVAR 2
27077: PPUSH
27078: LD_VAR 0 1
27082: PPUSH
27083: CALL_OW 81
27087: PUSH
27088: LD_INT 2
27090: EQUAL
27091: AND
27092: IFFALSE 27106
// begin side := i ;
27094: LD_ADDR_VAR 0 3
27098: PUSH
27099: LD_VAR 0 1
27103: ST_TO_ADDR
// break ;
27104: GO 27108
// end ;
27106: GO 27059
27108: POP
27109: POP
// if not side then
27110: LD_VAR 0 3
27114: NOT
27115: IFFALSE 27119
// exit ;
27117: GO 27164
// for i := 1 to tmp do
27119: LD_ADDR_VAR 0 1
27123: PUSH
27124: DOUBLE
27125: LD_INT 1
27127: DEC
27128: ST_TO_ADDR
27129: LD_VAR 0 2
27133: PUSH
27134: FOR_TO
27135: IFFALSE 27162
// if Prob ( 60 ) then
27137: LD_INT 60
27139: PPUSH
27140: CALL_OW 13
27144: IFFALSE 27160
// SetSide ( i , side ) ;
27146: LD_VAR 0 1
27150: PPUSH
27151: LD_VAR 0 3
27155: PPUSH
27156: CALL_OW 235
27160: GO 27134
27162: POP
27163: POP
// end ;
27164: PPOPN 3
27166: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27167: LD_EXP 38
27171: PUSH
27172: LD_EXP 51
27176: AND
27177: IFFALSE 27296
27179: GO 27181
27181: DISABLE
27182: LD_INT 0
27184: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27185: LD_ADDR_VAR 0 1
27189: PUSH
27190: LD_INT 22
27192: PUSH
27193: LD_OWVAR 2
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 21
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 3
27214: PUSH
27215: LD_INT 23
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: PPUSH
27234: CALL_OW 69
27238: PUSH
27239: FOR_IN
27240: IFFALSE 27294
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27242: LD_VAR 0 1
27246: PPUSH
27247: CALL_OW 257
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: LD_INT 2
27257: PUSH
27258: LD_INT 3
27260: PUSH
27261: LD_INT 4
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: IN
27270: IFFALSE 27292
// SetClass ( un , rand ( 1 , 4 ) ) ;
27272: LD_VAR 0 1
27276: PPUSH
27277: LD_INT 1
27279: PPUSH
27280: LD_INT 4
27282: PPUSH
27283: CALL_OW 12
27287: PPUSH
27288: CALL_OW 336
27292: GO 27239
27294: POP
27295: POP
// end ;
27296: PPOPN 1
27298: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27299: LD_EXP 38
27303: PUSH
27304: LD_EXP 50
27308: AND
27309: IFFALSE 27388
27311: GO 27313
27313: DISABLE
27314: LD_INT 0
27316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27317: LD_ADDR_VAR 0 1
27321: PUSH
27322: LD_INT 22
27324: PUSH
27325: LD_OWVAR 2
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 21
27336: PUSH
27337: LD_INT 3
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PPUSH
27348: CALL_OW 69
27352: ST_TO_ADDR
// if not tmp then
27353: LD_VAR 0 1
27357: NOT
27358: IFFALSE 27362
// exit ;
27360: GO 27388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27362: LD_VAR 0 1
27366: PUSH
27367: LD_INT 1
27369: PPUSH
27370: LD_VAR 0 1
27374: PPUSH
27375: CALL_OW 12
27379: ARRAY
27380: PPUSH
27381: LD_INT 100
27383: PPUSH
27384: CALL_OW 234
// end ;
27388: PPOPN 1
27390: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27391: LD_EXP 38
27395: PUSH
27396: LD_EXP 52
27400: AND
27401: IFFALSE 27499
27403: GO 27405
27405: DISABLE
27406: LD_INT 0
27408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27409: LD_ADDR_VAR 0 1
27413: PUSH
27414: LD_INT 22
27416: PUSH
27417: LD_OWVAR 2
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 21
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PPUSH
27440: CALL_OW 69
27444: ST_TO_ADDR
// if not tmp then
27445: LD_VAR 0 1
27449: NOT
27450: IFFALSE 27454
// exit ;
27452: GO 27499
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27454: LD_VAR 0 1
27458: PUSH
27459: LD_INT 1
27461: PPUSH
27462: LD_VAR 0 1
27466: PPUSH
27467: CALL_OW 12
27471: ARRAY
27472: PPUSH
27473: LD_INT 1
27475: PPUSH
27476: LD_INT 4
27478: PPUSH
27479: CALL_OW 12
27483: PPUSH
27484: LD_INT 3000
27486: PPUSH
27487: LD_INT 9000
27489: PPUSH
27490: CALL_OW 12
27494: PPUSH
27495: CALL_OW 492
// end ;
27499: PPOPN 1
27501: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27502: LD_EXP 38
27506: PUSH
27507: LD_EXP 53
27511: AND
27512: IFFALSE 27532
27514: GO 27516
27516: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27517: LD_INT 1
27519: PPUSH
27520: LD_OWVAR 2
27524: PPUSH
27525: LD_INT 0
27527: PPUSH
27528: CALL_OW 324
27532: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27533: LD_EXP 38
27537: PUSH
27538: LD_EXP 54
27542: AND
27543: IFFALSE 27626
27545: GO 27547
27547: DISABLE
27548: LD_INT 0
27550: PPUSH
27551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27552: LD_ADDR_VAR 0 2
27556: PUSH
27557: LD_INT 22
27559: PUSH
27560: LD_OWVAR 2
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 21
27571: PUSH
27572: LD_INT 3
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PPUSH
27583: CALL_OW 69
27587: ST_TO_ADDR
// if not tmp then
27588: LD_VAR 0 2
27592: NOT
27593: IFFALSE 27597
// exit ;
27595: GO 27626
// for i in tmp do
27597: LD_ADDR_VAR 0 1
27601: PUSH
27602: LD_VAR 0 2
27606: PUSH
27607: FOR_IN
27608: IFFALSE 27624
// SetBLevel ( i , 10 ) ;
27610: LD_VAR 0 1
27614: PPUSH
27615: LD_INT 10
27617: PPUSH
27618: CALL_OW 241
27622: GO 27607
27624: POP
27625: POP
// end ;
27626: PPOPN 2
27628: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27629: LD_EXP 38
27633: PUSH
27634: LD_EXP 55
27638: AND
27639: IFFALSE 27750
27641: GO 27643
27643: DISABLE
27644: LD_INT 0
27646: PPUSH
27647: PPUSH
27648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27649: LD_ADDR_VAR 0 3
27653: PUSH
27654: LD_INT 22
27656: PUSH
27657: LD_OWVAR 2
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 25
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PPUSH
27680: CALL_OW 69
27684: ST_TO_ADDR
// if not tmp then
27685: LD_VAR 0 3
27689: NOT
27690: IFFALSE 27694
// exit ;
27692: GO 27750
// un := tmp [ rand ( 1 , tmp ) ] ;
27694: LD_ADDR_VAR 0 2
27698: PUSH
27699: LD_VAR 0 3
27703: PUSH
27704: LD_INT 1
27706: PPUSH
27707: LD_VAR 0 3
27711: PPUSH
27712: CALL_OW 12
27716: ARRAY
27717: ST_TO_ADDR
// if Crawls ( un ) then
27718: LD_VAR 0 2
27722: PPUSH
27723: CALL_OW 318
27727: IFFALSE 27738
// ComWalk ( un ) ;
27729: LD_VAR 0 2
27733: PPUSH
27734: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27738: LD_VAR 0 2
27742: PPUSH
27743: LD_INT 5
27745: PPUSH
27746: CALL_OW 336
// end ;
27750: PPOPN 3
27752: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27753: LD_EXP 38
27757: PUSH
27758: LD_EXP 56
27762: AND
27763: PUSH
27764: LD_OWVAR 67
27768: PUSH
27769: LD_INT 4
27771: LESS
27772: AND
27773: IFFALSE 27792
27775: GO 27777
27777: DISABLE
// begin Difficulty := Difficulty + 1 ;
27778: LD_ADDR_OWVAR 67
27782: PUSH
27783: LD_OWVAR 67
27787: PUSH
27788: LD_INT 1
27790: PLUS
27791: ST_TO_ADDR
// end ;
27792: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27793: LD_EXP 38
27797: PUSH
27798: LD_EXP 57
27802: AND
27803: IFFALSE 27906
27805: GO 27807
27807: DISABLE
27808: LD_INT 0
27810: PPUSH
// begin for i := 1 to 5 do
27811: LD_ADDR_VAR 0 1
27815: PUSH
27816: DOUBLE
27817: LD_INT 1
27819: DEC
27820: ST_TO_ADDR
27821: LD_INT 5
27823: PUSH
27824: FOR_TO
27825: IFFALSE 27904
// begin uc_nation := nation_nature ;
27827: LD_ADDR_OWVAR 21
27831: PUSH
27832: LD_INT 0
27834: ST_TO_ADDR
// uc_side := 0 ;
27835: LD_ADDR_OWVAR 20
27839: PUSH
27840: LD_INT 0
27842: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27843: LD_ADDR_OWVAR 29
27847: PUSH
27848: LD_INT 12
27850: PUSH
27851: LD_INT 12
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: ST_TO_ADDR
// hc_agressivity := 20 ;
27858: LD_ADDR_OWVAR 35
27862: PUSH
27863: LD_INT 20
27865: ST_TO_ADDR
// hc_class := class_tiger ;
27866: LD_ADDR_OWVAR 28
27870: PUSH
27871: LD_INT 14
27873: ST_TO_ADDR
// hc_gallery :=  ;
27874: LD_ADDR_OWVAR 33
27878: PUSH
27879: LD_STRING 
27881: ST_TO_ADDR
// hc_name :=  ;
27882: LD_ADDR_OWVAR 26
27886: PUSH
27887: LD_STRING 
27889: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27890: CALL_OW 44
27894: PPUSH
27895: LD_INT 0
27897: PPUSH
27898: CALL_OW 51
// end ;
27902: GO 27824
27904: POP
27905: POP
// end ;
27906: PPOPN 1
27908: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27909: LD_EXP 38
27913: PUSH
27914: LD_EXP 58
27918: AND
27919: IFFALSE 27928
27921: GO 27923
27923: DISABLE
// StreamSibBomb ;
27924: CALL 27929 0 0
27928: END
// export function StreamSibBomb ; var i , x , y ; begin
27929: LD_INT 0
27931: PPUSH
27932: PPUSH
27933: PPUSH
27934: PPUSH
// result := false ;
27935: LD_ADDR_VAR 0 1
27939: PUSH
27940: LD_INT 0
27942: ST_TO_ADDR
// for i := 1 to 16 do
27943: LD_ADDR_VAR 0 2
27947: PUSH
27948: DOUBLE
27949: LD_INT 1
27951: DEC
27952: ST_TO_ADDR
27953: LD_INT 16
27955: PUSH
27956: FOR_TO
27957: IFFALSE 28156
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27959: LD_ADDR_VAR 0 3
27963: PUSH
27964: LD_INT 10
27966: PUSH
27967: LD_INT 20
27969: PUSH
27970: LD_INT 30
27972: PUSH
27973: LD_INT 40
27975: PUSH
27976: LD_INT 50
27978: PUSH
27979: LD_INT 60
27981: PUSH
27982: LD_INT 70
27984: PUSH
27985: LD_INT 80
27987: PUSH
27988: LD_INT 90
27990: PUSH
27991: LD_INT 100
27993: PUSH
27994: LD_INT 110
27996: PUSH
27997: LD_INT 120
27999: PUSH
28000: LD_INT 130
28002: PUSH
28003: LD_INT 140
28005: PUSH
28006: LD_INT 150
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PPUSH
28029: LD_INT 15
28031: PPUSH
28032: CALL_OW 12
28036: ARRAY
28037: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28038: LD_ADDR_VAR 0 4
28042: PUSH
28043: LD_INT 10
28045: PUSH
28046: LD_INT 20
28048: PUSH
28049: LD_INT 30
28051: PUSH
28052: LD_INT 40
28054: PUSH
28055: LD_INT 50
28057: PUSH
28058: LD_INT 60
28060: PUSH
28061: LD_INT 70
28063: PUSH
28064: LD_INT 80
28066: PUSH
28067: LD_INT 90
28069: PUSH
28070: LD_INT 100
28072: PUSH
28073: LD_INT 110
28075: PUSH
28076: LD_INT 120
28078: PUSH
28079: LD_INT 130
28081: PUSH
28082: LD_INT 140
28084: PUSH
28085: LD_INT 150
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 1
28107: PPUSH
28108: LD_INT 15
28110: PPUSH
28111: CALL_OW 12
28115: ARRAY
28116: ST_TO_ADDR
// if ValidHex ( x , y ) then
28117: LD_VAR 0 3
28121: PPUSH
28122: LD_VAR 0 4
28126: PPUSH
28127: CALL_OW 488
28131: IFFALSE 28154
// begin result := [ x , y ] ;
28133: LD_ADDR_VAR 0 1
28137: PUSH
28138: LD_VAR 0 3
28142: PUSH
28143: LD_VAR 0 4
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// break ;
28152: GO 28156
// end ; end ;
28154: GO 27956
28156: POP
28157: POP
// if result then
28158: LD_VAR 0 1
28162: IFFALSE 28222
// begin ToLua ( playSibBomb() ) ;
28164: LD_STRING playSibBomb()
28166: PPUSH
28167: CALL_OW 559
// wait ( 0 0$14 ) ;
28171: LD_INT 490
28173: PPUSH
28174: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28178: LD_VAR 0 1
28182: PUSH
28183: LD_INT 1
28185: ARRAY
28186: PPUSH
28187: LD_VAR 0 1
28191: PUSH
28192: LD_INT 2
28194: ARRAY
28195: PPUSH
28196: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28200: LD_VAR 0 1
28204: PUSH
28205: LD_INT 1
28207: ARRAY
28208: PPUSH
28209: LD_VAR 0 1
28213: PUSH
28214: LD_INT 2
28216: ARRAY
28217: PPUSH
28218: CALL_OW 429
// end ; end ;
28222: LD_VAR 0 1
28226: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28227: LD_EXP 38
28231: PUSH
28232: LD_EXP 60
28236: AND
28237: IFFALSE 28249
28239: GO 28241
28241: DISABLE
// YouLost (  ) ;
28242: LD_STRING 
28244: PPUSH
28245: CALL_OW 104
28249: END
// every 0 0$1 trigger StreamModeActive and sFog do
28250: LD_EXP 38
28254: PUSH
28255: LD_EXP 59
28259: AND
28260: IFFALSE 28274
28262: GO 28264
28264: DISABLE
// FogOff ( your_side ) ;
28265: LD_OWVAR 2
28269: PPUSH
28270: CALL_OW 344
28274: END
// every 0 0$1 trigger StreamModeActive and sSun do
28275: LD_EXP 38
28279: PUSH
28280: LD_EXP 61
28284: AND
28285: IFFALSE 28313
28287: GO 28289
28289: DISABLE
// begin solar_recharge_percent := 0 ;
28290: LD_ADDR_OWVAR 79
28294: PUSH
28295: LD_INT 0
28297: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28298: LD_INT 10500
28300: PPUSH
28301: CALL_OW 67
// solar_recharge_percent := 100 ;
28305: LD_ADDR_OWVAR 79
28309: PUSH
28310: LD_INT 100
28312: ST_TO_ADDR
// end ;
28313: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28314: LD_EXP 38
28318: PUSH
28319: LD_EXP 62
28323: AND
28324: IFFALSE 28563
28326: GO 28328
28328: DISABLE
28329: LD_INT 0
28331: PPUSH
28332: PPUSH
28333: PPUSH
// begin tmp := [ ] ;
28334: LD_ADDR_VAR 0 3
28338: PUSH
28339: EMPTY
28340: ST_TO_ADDR
// for i := 1 to 6 do
28341: LD_ADDR_VAR 0 1
28345: PUSH
28346: DOUBLE
28347: LD_INT 1
28349: DEC
28350: ST_TO_ADDR
28351: LD_INT 6
28353: PUSH
28354: FOR_TO
28355: IFFALSE 28460
// begin uc_nation := nation_nature ;
28357: LD_ADDR_OWVAR 21
28361: PUSH
28362: LD_INT 0
28364: ST_TO_ADDR
// uc_side := 0 ;
28365: LD_ADDR_OWVAR 20
28369: PUSH
28370: LD_INT 0
28372: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28373: LD_ADDR_OWVAR 29
28377: PUSH
28378: LD_INT 12
28380: PUSH
28381: LD_INT 12
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: ST_TO_ADDR
// hc_agressivity := 20 ;
28388: LD_ADDR_OWVAR 35
28392: PUSH
28393: LD_INT 20
28395: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28396: LD_ADDR_OWVAR 28
28400: PUSH
28401: LD_INT 17
28403: ST_TO_ADDR
// hc_gallery :=  ;
28404: LD_ADDR_OWVAR 33
28408: PUSH
28409: LD_STRING 
28411: ST_TO_ADDR
// hc_name :=  ;
28412: LD_ADDR_OWVAR 26
28416: PUSH
28417: LD_STRING 
28419: ST_TO_ADDR
// un := CreateHuman ;
28420: LD_ADDR_VAR 0 2
28424: PUSH
28425: CALL_OW 44
28429: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28430: LD_VAR 0 2
28434: PPUSH
28435: LD_INT 1
28437: PPUSH
28438: CALL_OW 51
// tmp := tmp ^ un ;
28442: LD_ADDR_VAR 0 3
28446: PUSH
28447: LD_VAR 0 3
28451: PUSH
28452: LD_VAR 0 2
28456: ADD
28457: ST_TO_ADDR
// end ;
28458: GO 28354
28460: POP
28461: POP
// repeat wait ( 0 0$1 ) ;
28462: LD_INT 35
28464: PPUSH
28465: CALL_OW 67
// for un in tmp do
28469: LD_ADDR_VAR 0 2
28473: PUSH
28474: LD_VAR 0 3
28478: PUSH
28479: FOR_IN
28480: IFFALSE 28554
// begin if IsDead ( un ) then
28482: LD_VAR 0 2
28486: PPUSH
28487: CALL_OW 301
28491: IFFALSE 28511
// begin tmp := tmp diff un ;
28493: LD_ADDR_VAR 0 3
28497: PUSH
28498: LD_VAR 0 3
28502: PUSH
28503: LD_VAR 0 2
28507: DIFF
28508: ST_TO_ADDR
// continue ;
28509: GO 28479
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28511: LD_VAR 0 2
28515: PPUSH
28516: LD_INT 3
28518: PUSH
28519: LD_INT 22
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PPUSH
28533: CALL_OW 69
28537: PPUSH
28538: LD_VAR 0 2
28542: PPUSH
28543: CALL_OW 74
28547: PPUSH
28548: CALL_OW 115
// end ;
28552: GO 28479
28554: POP
28555: POP
// until not tmp ;
28556: LD_VAR 0 3
28560: NOT
28561: IFFALSE 28462
// end ;
28563: PPOPN 3
28565: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28566: LD_EXP 38
28570: PUSH
28571: LD_EXP 63
28575: AND
28576: IFFALSE 28630
28578: GO 28580
28580: DISABLE
// begin ToLua ( displayTroll(); ) ;
28581: LD_STRING displayTroll();
28583: PPUSH
28584: CALL_OW 559
// wait ( 3 3$00 ) ;
28588: LD_INT 6300
28590: PPUSH
28591: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28595: LD_STRING hideTroll();
28597: PPUSH
28598: CALL_OW 559
// wait ( 1 1$00 ) ;
28602: LD_INT 2100
28604: PPUSH
28605: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28609: LD_STRING displayTroll();
28611: PPUSH
28612: CALL_OW 559
// wait ( 1 1$00 ) ;
28616: LD_INT 2100
28618: PPUSH
28619: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28623: LD_STRING hideTroll();
28625: PPUSH
28626: CALL_OW 559
// end ;
28630: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28631: LD_EXP 38
28635: PUSH
28636: LD_EXP 64
28640: AND
28641: IFFALSE 28704
28643: GO 28645
28645: DISABLE
28646: LD_INT 0
28648: PPUSH
// begin p := 0 ;
28649: LD_ADDR_VAR 0 1
28653: PUSH
28654: LD_INT 0
28656: ST_TO_ADDR
// repeat game_speed := 1 ;
28657: LD_ADDR_OWVAR 65
28661: PUSH
28662: LD_INT 1
28664: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28665: LD_INT 35
28667: PPUSH
28668: CALL_OW 67
// p := p + 1 ;
28672: LD_ADDR_VAR 0 1
28676: PUSH
28677: LD_VAR 0 1
28681: PUSH
28682: LD_INT 1
28684: PLUS
28685: ST_TO_ADDR
// until p >= 60 ;
28686: LD_VAR 0 1
28690: PUSH
28691: LD_INT 60
28693: GREATEREQUAL
28694: IFFALSE 28657
// game_speed := 4 ;
28696: LD_ADDR_OWVAR 65
28700: PUSH
28701: LD_INT 4
28703: ST_TO_ADDR
// end ;
28704: PPOPN 1
28706: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28707: LD_EXP 38
28711: PUSH
28712: LD_EXP 65
28716: AND
28717: IFFALSE 28863
28719: GO 28721
28721: DISABLE
28722: LD_INT 0
28724: PPUSH
28725: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28726: LD_ADDR_VAR 0 1
28730: PUSH
28731: LD_INT 22
28733: PUSH
28734: LD_OWVAR 2
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 2
28745: PUSH
28746: LD_INT 30
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 30
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: LIST
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PPUSH
28775: CALL_OW 69
28779: ST_TO_ADDR
// if not depot then
28780: LD_VAR 0 1
28784: NOT
28785: IFFALSE 28789
// exit ;
28787: GO 28863
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28789: LD_ADDR_VAR 0 2
28793: PUSH
28794: LD_VAR 0 1
28798: PUSH
28799: LD_INT 1
28801: PPUSH
28802: LD_VAR 0 1
28806: PPUSH
28807: CALL_OW 12
28811: ARRAY
28812: PPUSH
28813: CALL_OW 274
28817: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28818: LD_VAR 0 2
28822: PPUSH
28823: LD_INT 1
28825: PPUSH
28826: LD_INT 0
28828: PPUSH
28829: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28833: LD_VAR 0 2
28837: PPUSH
28838: LD_INT 2
28840: PPUSH
28841: LD_INT 0
28843: PPUSH
28844: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28848: LD_VAR 0 2
28852: PPUSH
28853: LD_INT 3
28855: PPUSH
28856: LD_INT 0
28858: PPUSH
28859: CALL_OW 277
// end ;
28863: PPOPN 2
28865: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28866: LD_EXP 38
28870: PUSH
28871: LD_EXP 66
28875: AND
28876: IFFALSE 28973
28878: GO 28880
28880: DISABLE
28881: LD_INT 0
28883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28884: LD_ADDR_VAR 0 1
28888: PUSH
28889: LD_INT 22
28891: PUSH
28892: LD_OWVAR 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 21
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 3
28913: PUSH
28914: LD_INT 23
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: LIST
28932: PPUSH
28933: CALL_OW 69
28937: ST_TO_ADDR
// if not tmp then
28938: LD_VAR 0 1
28942: NOT
28943: IFFALSE 28947
// exit ;
28945: GO 28973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28947: LD_VAR 0 1
28951: PUSH
28952: LD_INT 1
28954: PPUSH
28955: LD_VAR 0 1
28959: PPUSH
28960: CALL_OW 12
28964: ARRAY
28965: PPUSH
28966: LD_INT 200
28968: PPUSH
28969: CALL_OW 234
// end ;
28973: PPOPN 1
28975: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28976: LD_EXP 38
28980: PUSH
28981: LD_EXP 67
28985: AND
28986: IFFALSE 29065
28988: GO 28990
28990: DISABLE
28991: LD_INT 0
28993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28994: LD_ADDR_VAR 0 1
28998: PUSH
28999: LD_INT 22
29001: PUSH
29002: LD_OWVAR 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 21
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PPUSH
29025: CALL_OW 69
29029: ST_TO_ADDR
// if not tmp then
29030: LD_VAR 0 1
29034: NOT
29035: IFFALSE 29039
// exit ;
29037: GO 29065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29039: LD_VAR 0 1
29043: PUSH
29044: LD_INT 1
29046: PPUSH
29047: LD_VAR 0 1
29051: PPUSH
29052: CALL_OW 12
29056: ARRAY
29057: PPUSH
29058: LD_INT 60
29060: PPUSH
29061: CALL_OW 234
// end ;
29065: PPOPN 1
29067: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29068: LD_EXP 38
29072: PUSH
29073: LD_EXP 68
29077: AND
29078: IFFALSE 29177
29080: GO 29082
29082: DISABLE
29083: LD_INT 0
29085: PPUSH
29086: PPUSH
// begin enable ;
29087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29088: LD_ADDR_VAR 0 1
29092: PUSH
29093: LD_INT 22
29095: PUSH
29096: LD_OWVAR 2
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 61
29107: PUSH
29108: EMPTY
29109: LIST
29110: PUSH
29111: LD_INT 33
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: LIST
29125: PPUSH
29126: CALL_OW 69
29130: ST_TO_ADDR
// if not tmp then
29131: LD_VAR 0 1
29135: NOT
29136: IFFALSE 29140
// exit ;
29138: GO 29177
// for i in tmp do
29140: LD_ADDR_VAR 0 2
29144: PUSH
29145: LD_VAR 0 1
29149: PUSH
29150: FOR_IN
29151: IFFALSE 29175
// if IsControledBy ( i ) then
29153: LD_VAR 0 2
29157: PPUSH
29158: CALL_OW 312
29162: IFFALSE 29173
// ComUnlink ( i ) ;
29164: LD_VAR 0 2
29168: PPUSH
29169: CALL_OW 136
29173: GO 29150
29175: POP
29176: POP
// end ;
29177: PPOPN 2
29179: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29180: LD_EXP 38
29184: PUSH
29185: LD_EXP 69
29189: AND
29190: IFFALSE 29330
29192: GO 29194
29194: DISABLE
29195: LD_INT 0
29197: PPUSH
29198: PPUSH
// begin ToLua ( displayPowell(); ) ;
29199: LD_STRING displayPowell();
29201: PPUSH
29202: CALL_OW 559
// uc_side := 0 ;
29206: LD_ADDR_OWVAR 20
29210: PUSH
29211: LD_INT 0
29213: ST_TO_ADDR
// uc_nation := 2 ;
29214: LD_ADDR_OWVAR 21
29218: PUSH
29219: LD_INT 2
29221: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29222: LD_ADDR_OWVAR 37
29226: PUSH
29227: LD_INT 14
29229: ST_TO_ADDR
// vc_engine := engine_siberite ;
29230: LD_ADDR_OWVAR 39
29234: PUSH
29235: LD_INT 3
29237: ST_TO_ADDR
// vc_control := control_apeman ;
29238: LD_ADDR_OWVAR 38
29242: PUSH
29243: LD_INT 5
29245: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29246: LD_ADDR_OWVAR 40
29250: PUSH
29251: LD_INT 29
29253: ST_TO_ADDR
// un := CreateVehicle ;
29254: LD_ADDR_VAR 0 2
29258: PUSH
29259: CALL_OW 45
29263: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29264: LD_VAR 0 2
29268: PPUSH
29269: LD_INT 1
29271: PPUSH
29272: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29276: LD_INT 35
29278: PPUSH
29279: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29283: LD_VAR 0 2
29287: PPUSH
29288: LD_INT 22
29290: PUSH
29291: LD_OWVAR 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PPUSH
29300: CALL_OW 69
29304: PPUSH
29305: LD_VAR 0 2
29309: PPUSH
29310: CALL_OW 74
29314: PPUSH
29315: CALL_OW 115
// until IsDead ( un ) ;
29319: LD_VAR 0 2
29323: PPUSH
29324: CALL_OW 301
29328: IFFALSE 29276
// end ;
29330: PPOPN 2
29332: END
// every 0 0$1 trigger StreamModeActive and sStu do
29333: LD_EXP 38
29337: PUSH
29338: LD_EXP 77
29342: AND
29343: IFFALSE 29359
29345: GO 29347
29347: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29348: LD_STRING displayStucuk();
29350: PPUSH
29351: CALL_OW 559
// ResetFog ;
29355: CALL_OW 335
// end ;
29359: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29360: LD_EXP 38
29364: PUSH
29365: LD_EXP 70
29369: AND
29370: IFFALSE 29511
29372: GO 29374
29374: DISABLE
29375: LD_INT 0
29377: PPUSH
29378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29379: LD_ADDR_VAR 0 2
29383: PUSH
29384: LD_INT 22
29386: PUSH
29387: LD_OWVAR 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 21
29398: PUSH
29399: LD_INT 1
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PPUSH
29410: CALL_OW 69
29414: ST_TO_ADDR
// if not tmp then
29415: LD_VAR 0 2
29419: NOT
29420: IFFALSE 29424
// exit ;
29422: GO 29511
// un := tmp [ rand ( 1 , tmp ) ] ;
29424: LD_ADDR_VAR 0 1
29428: PUSH
29429: LD_VAR 0 2
29433: PUSH
29434: LD_INT 1
29436: PPUSH
29437: LD_VAR 0 2
29441: PPUSH
29442: CALL_OW 12
29446: ARRAY
29447: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29448: LD_VAR 0 1
29452: PPUSH
29453: LD_INT 0
29455: PPUSH
29456: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29460: LD_VAR 0 1
29464: PPUSH
29465: LD_OWVAR 3
29469: PUSH
29470: LD_VAR 0 1
29474: DIFF
29475: PPUSH
29476: LD_VAR 0 1
29480: PPUSH
29481: CALL_OW 74
29485: PPUSH
29486: CALL_OW 115
// wait ( 0 0$20 ) ;
29490: LD_INT 700
29492: PPUSH
29493: CALL_OW 67
// SetSide ( un , your_side ) ;
29497: LD_VAR 0 1
29501: PPUSH
29502: LD_OWVAR 2
29506: PPUSH
29507: CALL_OW 235
// end ;
29511: PPOPN 2
29513: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29514: LD_EXP 38
29518: PUSH
29519: LD_EXP 71
29523: AND
29524: IFFALSE 29630
29526: GO 29528
29528: DISABLE
29529: LD_INT 0
29531: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29532: LD_ADDR_VAR 0 1
29536: PUSH
29537: LD_INT 22
29539: PUSH
29540: LD_OWVAR 2
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: LD_INT 30
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 30
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PPUSH
29581: CALL_OW 69
29585: ST_TO_ADDR
// if not depot then
29586: LD_VAR 0 1
29590: NOT
29591: IFFALSE 29595
// exit ;
29593: GO 29630
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29595: LD_VAR 0 1
29599: PUSH
29600: LD_INT 1
29602: ARRAY
29603: PPUSH
29604: CALL_OW 250
29608: PPUSH
29609: LD_VAR 0 1
29613: PUSH
29614: LD_INT 1
29616: ARRAY
29617: PPUSH
29618: CALL_OW 251
29622: PPUSH
29623: LD_INT 70
29625: PPUSH
29626: CALL_OW 495
// end ;
29630: PPOPN 1
29632: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29633: LD_EXP 38
29637: PUSH
29638: LD_EXP 72
29642: AND
29643: IFFALSE 29854
29645: GO 29647
29647: DISABLE
29648: LD_INT 0
29650: PPUSH
29651: PPUSH
29652: PPUSH
29653: PPUSH
29654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29655: LD_ADDR_VAR 0 5
29659: PUSH
29660: LD_INT 22
29662: PUSH
29663: LD_OWVAR 2
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 21
29674: PUSH
29675: LD_INT 1
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PPUSH
29686: CALL_OW 69
29690: ST_TO_ADDR
// if not tmp then
29691: LD_VAR 0 5
29695: NOT
29696: IFFALSE 29700
// exit ;
29698: GO 29854
// for i in tmp do
29700: LD_ADDR_VAR 0 1
29704: PUSH
29705: LD_VAR 0 5
29709: PUSH
29710: FOR_IN
29711: IFFALSE 29852
// begin d := rand ( 0 , 5 ) ;
29713: LD_ADDR_VAR 0 4
29717: PUSH
29718: LD_INT 0
29720: PPUSH
29721: LD_INT 5
29723: PPUSH
29724: CALL_OW 12
29728: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29729: LD_ADDR_VAR 0 2
29733: PUSH
29734: LD_VAR 0 1
29738: PPUSH
29739: CALL_OW 250
29743: PPUSH
29744: LD_VAR 0 4
29748: PPUSH
29749: LD_INT 3
29751: PPUSH
29752: LD_INT 12
29754: PPUSH
29755: CALL_OW 12
29759: PPUSH
29760: CALL_OW 272
29764: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29765: LD_ADDR_VAR 0 3
29769: PUSH
29770: LD_VAR 0 1
29774: PPUSH
29775: CALL_OW 251
29779: PPUSH
29780: LD_VAR 0 4
29784: PPUSH
29785: LD_INT 3
29787: PPUSH
29788: LD_INT 12
29790: PPUSH
29791: CALL_OW 12
29795: PPUSH
29796: CALL_OW 273
29800: ST_TO_ADDR
// if ValidHex ( x , y ) then
29801: LD_VAR 0 2
29805: PPUSH
29806: LD_VAR 0 3
29810: PPUSH
29811: CALL_OW 488
29815: IFFALSE 29850
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29817: LD_VAR 0 1
29821: PPUSH
29822: LD_VAR 0 2
29826: PPUSH
29827: LD_VAR 0 3
29831: PPUSH
29832: LD_INT 3
29834: PPUSH
29835: LD_INT 6
29837: PPUSH
29838: CALL_OW 12
29842: PPUSH
29843: LD_INT 1
29845: PPUSH
29846: CALL_OW 483
// end ;
29850: GO 29710
29852: POP
29853: POP
// end ;
29854: PPOPN 5
29856: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29857: LD_EXP 38
29861: PUSH
29862: LD_EXP 73
29866: AND
29867: IFFALSE 29961
29869: GO 29871
29871: DISABLE
29872: LD_INT 0
29874: PPUSH
29875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29876: LD_ADDR_VAR 0 2
29880: PUSH
29881: LD_INT 22
29883: PUSH
29884: LD_OWVAR 2
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 32
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 21
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: LIST
29917: PPUSH
29918: CALL_OW 69
29922: ST_TO_ADDR
// if not tmp then
29923: LD_VAR 0 2
29927: NOT
29928: IFFALSE 29932
// exit ;
29930: GO 29961
// for i in tmp do
29932: LD_ADDR_VAR 0 1
29936: PUSH
29937: LD_VAR 0 2
29941: PUSH
29942: FOR_IN
29943: IFFALSE 29959
// SetFuel ( i , 0 ) ;
29945: LD_VAR 0 1
29949: PPUSH
29950: LD_INT 0
29952: PPUSH
29953: CALL_OW 240
29957: GO 29942
29959: POP
29960: POP
// end ;
29961: PPOPN 2
29963: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29964: LD_EXP 38
29968: PUSH
29969: LD_EXP 74
29973: AND
29974: IFFALSE 30040
29976: GO 29978
29978: DISABLE
29979: LD_INT 0
29981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29982: LD_ADDR_VAR 0 1
29986: PUSH
29987: LD_INT 22
29989: PUSH
29990: LD_OWVAR 2
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 30
30001: PUSH
30002: LD_INT 29
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PPUSH
30013: CALL_OW 69
30017: ST_TO_ADDR
// if not tmp then
30018: LD_VAR 0 1
30022: NOT
30023: IFFALSE 30027
// exit ;
30025: GO 30040
// DestroyUnit ( tmp [ 1 ] ) ;
30027: LD_VAR 0 1
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: PPUSH
30036: CALL_OW 65
// end ;
30040: PPOPN 1
30042: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30043: LD_EXP 38
30047: PUSH
30048: LD_EXP 76
30052: AND
30053: IFFALSE 30182
30055: GO 30057
30057: DISABLE
30058: LD_INT 0
30060: PPUSH
// begin uc_side := 0 ;
30061: LD_ADDR_OWVAR 20
30065: PUSH
30066: LD_INT 0
30068: ST_TO_ADDR
// uc_nation := nation_arabian ;
30069: LD_ADDR_OWVAR 21
30073: PUSH
30074: LD_INT 2
30076: ST_TO_ADDR
// hc_gallery :=  ;
30077: LD_ADDR_OWVAR 33
30081: PUSH
30082: LD_STRING 
30084: ST_TO_ADDR
// hc_name :=  ;
30085: LD_ADDR_OWVAR 26
30089: PUSH
30090: LD_STRING 
30092: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30093: LD_INT 1
30095: PPUSH
30096: LD_INT 11
30098: PPUSH
30099: LD_INT 10
30101: PPUSH
30102: CALL_OW 380
// un := CreateHuman ;
30106: LD_ADDR_VAR 0 1
30110: PUSH
30111: CALL_OW 44
30115: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30116: LD_VAR 0 1
30120: PPUSH
30121: LD_INT 1
30123: PPUSH
30124: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30128: LD_INT 35
30130: PPUSH
30131: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30135: LD_VAR 0 1
30139: PPUSH
30140: LD_INT 22
30142: PUSH
30143: LD_OWVAR 2
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PPUSH
30152: CALL_OW 69
30156: PPUSH
30157: LD_VAR 0 1
30161: PPUSH
30162: CALL_OW 74
30166: PPUSH
30167: CALL_OW 115
// until IsDead ( un ) ;
30171: LD_VAR 0 1
30175: PPUSH
30176: CALL_OW 301
30180: IFFALSE 30128
// end ;
30182: PPOPN 1
30184: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30185: LD_EXP 38
30189: PUSH
30190: LD_EXP 78
30194: AND
30195: IFFALSE 30207
30197: GO 30199
30199: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30200: LD_STRING earthquake(getX(game), 0, 32)
30202: PPUSH
30203: CALL_OW 559
30207: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30208: LD_EXP 38
30212: PUSH
30213: LD_EXP 79
30217: AND
30218: IFFALSE 30309
30220: GO 30222
30222: DISABLE
30223: LD_INT 0
30225: PPUSH
// begin enable ;
30226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30227: LD_ADDR_VAR 0 1
30231: PUSH
30232: LD_INT 22
30234: PUSH
30235: LD_OWVAR 2
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 21
30246: PUSH
30247: LD_INT 2
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 33
30256: PUSH
30257: LD_INT 3
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: PPUSH
30269: CALL_OW 69
30273: ST_TO_ADDR
// if not tmp then
30274: LD_VAR 0 1
30278: NOT
30279: IFFALSE 30283
// exit ;
30281: GO 30309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30283: LD_VAR 0 1
30287: PUSH
30288: LD_INT 1
30290: PPUSH
30291: LD_VAR 0 1
30295: PPUSH
30296: CALL_OW 12
30300: ARRAY
30301: PPUSH
30302: LD_INT 1
30304: PPUSH
30305: CALL_OW 234
// end ;
30309: PPOPN 1
30311: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30312: LD_EXP 38
30316: PUSH
30317: LD_EXP 80
30321: AND
30322: IFFALSE 30463
30324: GO 30326
30326: DISABLE
30327: LD_INT 0
30329: PPUSH
30330: PPUSH
30331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30332: LD_ADDR_VAR 0 3
30336: PUSH
30337: LD_INT 22
30339: PUSH
30340: LD_OWVAR 2
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 25
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PPUSH
30363: CALL_OW 69
30367: ST_TO_ADDR
// if not tmp then
30368: LD_VAR 0 3
30372: NOT
30373: IFFALSE 30377
// exit ;
30375: GO 30463
// un := tmp [ rand ( 1 , tmp ) ] ;
30377: LD_ADDR_VAR 0 2
30381: PUSH
30382: LD_VAR 0 3
30386: PUSH
30387: LD_INT 1
30389: PPUSH
30390: LD_VAR 0 3
30394: PPUSH
30395: CALL_OW 12
30399: ARRAY
30400: ST_TO_ADDR
// if Crawls ( un ) then
30401: LD_VAR 0 2
30405: PPUSH
30406: CALL_OW 318
30410: IFFALSE 30421
// ComWalk ( un ) ;
30412: LD_VAR 0 2
30416: PPUSH
30417: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30421: LD_VAR 0 2
30425: PPUSH
30426: LD_INT 9
30428: PPUSH
30429: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30433: LD_INT 28
30435: PPUSH
30436: LD_OWVAR 2
30440: PPUSH
30441: LD_INT 2
30443: PPUSH
30444: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30448: LD_INT 29
30450: PPUSH
30451: LD_OWVAR 2
30455: PPUSH
30456: LD_INT 2
30458: PPUSH
30459: CALL_OW 322
// end ;
30463: PPOPN 3
30465: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30466: LD_EXP 38
30470: PUSH
30471: LD_EXP 81
30475: AND
30476: IFFALSE 30587
30478: GO 30480
30480: DISABLE
30481: LD_INT 0
30483: PPUSH
30484: PPUSH
30485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30486: LD_ADDR_VAR 0 3
30490: PUSH
30491: LD_INT 22
30493: PUSH
30494: LD_OWVAR 2
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 25
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PPUSH
30517: CALL_OW 69
30521: ST_TO_ADDR
// if not tmp then
30522: LD_VAR 0 3
30526: NOT
30527: IFFALSE 30531
// exit ;
30529: GO 30587
// un := tmp [ rand ( 1 , tmp ) ] ;
30531: LD_ADDR_VAR 0 2
30535: PUSH
30536: LD_VAR 0 3
30540: PUSH
30541: LD_INT 1
30543: PPUSH
30544: LD_VAR 0 3
30548: PPUSH
30549: CALL_OW 12
30553: ARRAY
30554: ST_TO_ADDR
// if Crawls ( un ) then
30555: LD_VAR 0 2
30559: PPUSH
30560: CALL_OW 318
30564: IFFALSE 30575
// ComWalk ( un ) ;
30566: LD_VAR 0 2
30570: PPUSH
30571: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30575: LD_VAR 0 2
30579: PPUSH
30580: LD_INT 8
30582: PPUSH
30583: CALL_OW 336
// end ;
30587: PPOPN 3
30589: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30590: LD_EXP 38
30594: PUSH
30595: LD_EXP 82
30599: AND
30600: IFFALSE 30744
30602: GO 30604
30604: DISABLE
30605: LD_INT 0
30607: PPUSH
30608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30609: LD_ADDR_VAR 0 2
30613: PUSH
30614: LD_INT 22
30616: PUSH
30617: LD_OWVAR 2
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 21
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 2
30638: PUSH
30639: LD_INT 34
30641: PUSH
30642: LD_INT 12
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 34
30651: PUSH
30652: LD_INT 51
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 34
30661: PUSH
30662: LD_INT 32
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: PPUSH
30680: CALL_OW 69
30684: ST_TO_ADDR
// if not tmp then
30685: LD_VAR 0 2
30689: NOT
30690: IFFALSE 30694
// exit ;
30692: GO 30744
// for i in tmp do
30694: LD_ADDR_VAR 0 1
30698: PUSH
30699: LD_VAR 0 2
30703: PUSH
30704: FOR_IN
30705: IFFALSE 30742
// if GetCargo ( i , mat_artifact ) = 0 then
30707: LD_VAR 0 1
30711: PPUSH
30712: LD_INT 4
30714: PPUSH
30715: CALL_OW 289
30719: PUSH
30720: LD_INT 0
30722: EQUAL
30723: IFFALSE 30740
// SetCargo ( i , mat_siberit , 100 ) ;
30725: LD_VAR 0 1
30729: PPUSH
30730: LD_INT 3
30732: PPUSH
30733: LD_INT 100
30735: PPUSH
30736: CALL_OW 290
30740: GO 30704
30742: POP
30743: POP
// end ;
30744: PPOPN 2
30746: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30747: LD_EXP 38
30751: PUSH
30752: LD_EXP 83
30756: AND
30757: IFFALSE 30940
30759: GO 30761
30761: DISABLE
30762: LD_INT 0
30764: PPUSH
30765: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30766: LD_ADDR_VAR 0 2
30770: PUSH
30771: LD_INT 22
30773: PUSH
30774: LD_OWVAR 2
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PPUSH
30783: CALL_OW 69
30787: ST_TO_ADDR
// if not tmp then
30788: LD_VAR 0 2
30792: NOT
30793: IFFALSE 30797
// exit ;
30795: GO 30940
// for i := 1 to 2 do
30797: LD_ADDR_VAR 0 1
30801: PUSH
30802: DOUBLE
30803: LD_INT 1
30805: DEC
30806: ST_TO_ADDR
30807: LD_INT 2
30809: PUSH
30810: FOR_TO
30811: IFFALSE 30938
// begin uc_side := your_side ;
30813: LD_ADDR_OWVAR 20
30817: PUSH
30818: LD_OWVAR 2
30822: ST_TO_ADDR
// uc_nation := nation_american ;
30823: LD_ADDR_OWVAR 21
30827: PUSH
30828: LD_INT 1
30830: ST_TO_ADDR
// vc_chassis := us_morphling ;
30831: LD_ADDR_OWVAR 37
30835: PUSH
30836: LD_INT 5
30838: ST_TO_ADDR
// vc_engine := engine_siberite ;
30839: LD_ADDR_OWVAR 39
30843: PUSH
30844: LD_INT 3
30846: ST_TO_ADDR
// vc_control := control_computer ;
30847: LD_ADDR_OWVAR 38
30851: PUSH
30852: LD_INT 3
30854: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30855: LD_ADDR_OWVAR 40
30859: PUSH
30860: LD_INT 10
30862: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30863: LD_VAR 0 2
30867: PUSH
30868: LD_INT 1
30870: ARRAY
30871: PPUSH
30872: CALL_OW 310
30876: NOT
30877: IFFALSE 30924
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30879: CALL_OW 45
30883: PPUSH
30884: LD_VAR 0 2
30888: PUSH
30889: LD_INT 1
30891: ARRAY
30892: PPUSH
30893: CALL_OW 250
30897: PPUSH
30898: LD_VAR 0 2
30902: PUSH
30903: LD_INT 1
30905: ARRAY
30906: PPUSH
30907: CALL_OW 251
30911: PPUSH
30912: LD_INT 12
30914: PPUSH
30915: LD_INT 1
30917: PPUSH
30918: CALL_OW 50
30922: GO 30936
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30924: CALL_OW 45
30928: PPUSH
30929: LD_INT 1
30931: PPUSH
30932: CALL_OW 51
// end ;
30936: GO 30810
30938: POP
30939: POP
// end ;
30940: PPOPN 2
30942: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30943: LD_EXP 38
30947: PUSH
30948: LD_EXP 84
30952: AND
30953: IFFALSE 31175
30955: GO 30957
30957: DISABLE
30958: LD_INT 0
30960: PPUSH
30961: PPUSH
30962: PPUSH
30963: PPUSH
30964: PPUSH
30965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30966: LD_ADDR_VAR 0 6
30970: PUSH
30971: LD_INT 22
30973: PUSH
30974: LD_OWVAR 2
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 21
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 3
30995: PUSH
30996: LD_INT 23
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: PPUSH
31015: CALL_OW 69
31019: ST_TO_ADDR
// if not tmp then
31020: LD_VAR 0 6
31024: NOT
31025: IFFALSE 31029
// exit ;
31027: GO 31175
// s1 := rand ( 1 , 4 ) ;
31029: LD_ADDR_VAR 0 2
31033: PUSH
31034: LD_INT 1
31036: PPUSH
31037: LD_INT 4
31039: PPUSH
31040: CALL_OW 12
31044: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31045: LD_ADDR_VAR 0 4
31049: PUSH
31050: LD_VAR 0 6
31054: PUSH
31055: LD_INT 1
31057: ARRAY
31058: PPUSH
31059: LD_VAR 0 2
31063: PPUSH
31064: CALL_OW 259
31068: ST_TO_ADDR
// if s1 = 1 then
31069: LD_VAR 0 2
31073: PUSH
31074: LD_INT 1
31076: EQUAL
31077: IFFALSE 31097
// s2 := rand ( 2 , 4 ) else
31079: LD_ADDR_VAR 0 3
31083: PUSH
31084: LD_INT 2
31086: PPUSH
31087: LD_INT 4
31089: PPUSH
31090: CALL_OW 12
31094: ST_TO_ADDR
31095: GO 31105
// s2 := 1 ;
31097: LD_ADDR_VAR 0 3
31101: PUSH
31102: LD_INT 1
31104: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31105: LD_ADDR_VAR 0 5
31109: PUSH
31110: LD_VAR 0 6
31114: PUSH
31115: LD_INT 1
31117: ARRAY
31118: PPUSH
31119: LD_VAR 0 3
31123: PPUSH
31124: CALL_OW 259
31128: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31129: LD_VAR 0 6
31133: PUSH
31134: LD_INT 1
31136: ARRAY
31137: PPUSH
31138: LD_VAR 0 2
31142: PPUSH
31143: LD_VAR 0 5
31147: PPUSH
31148: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31152: LD_VAR 0 6
31156: PUSH
31157: LD_INT 1
31159: ARRAY
31160: PPUSH
31161: LD_VAR 0 3
31165: PPUSH
31166: LD_VAR 0 4
31170: PPUSH
31171: CALL_OW 237
// end ;
31175: PPOPN 6
31177: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31178: LD_EXP 38
31182: PUSH
31183: LD_EXP 85
31187: AND
31188: IFFALSE 31267
31190: GO 31192
31192: DISABLE
31193: LD_INT 0
31195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31196: LD_ADDR_VAR 0 1
31200: PUSH
31201: LD_INT 22
31203: PUSH
31204: LD_OWVAR 2
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 30
31215: PUSH
31216: LD_INT 3
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PPUSH
31227: CALL_OW 69
31231: ST_TO_ADDR
// if not tmp then
31232: LD_VAR 0 1
31236: NOT
31237: IFFALSE 31241
// exit ;
31239: GO 31267
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31241: LD_VAR 0 1
31245: PUSH
31246: LD_INT 1
31248: PPUSH
31249: LD_VAR 0 1
31253: PPUSH
31254: CALL_OW 12
31258: ARRAY
31259: PPUSH
31260: LD_INT 1
31262: PPUSH
31263: CALL_OW 234
// end ;
31267: PPOPN 1
31269: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31270: LD_EXP 38
31274: PUSH
31275: LD_EXP 86
31279: AND
31280: IFFALSE 31392
31282: GO 31284
31284: DISABLE
31285: LD_INT 0
31287: PPUSH
31288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31289: LD_ADDR_VAR 0 2
31293: PUSH
31294: LD_INT 22
31296: PUSH
31297: LD_OWVAR 2
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 2
31308: PUSH
31309: LD_INT 30
31311: PUSH
31312: LD_INT 27
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 30
31321: PUSH
31322: LD_INT 26
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 30
31331: PUSH
31332: LD_INT 28
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PPUSH
31349: CALL_OW 69
31353: ST_TO_ADDR
// if not tmp then
31354: LD_VAR 0 2
31358: NOT
31359: IFFALSE 31363
// exit ;
31361: GO 31392
// for i in tmp do
31363: LD_ADDR_VAR 0 1
31367: PUSH
31368: LD_VAR 0 2
31372: PUSH
31373: FOR_IN
31374: IFFALSE 31390
// SetLives ( i , 1 ) ;
31376: LD_VAR 0 1
31380: PPUSH
31381: LD_INT 1
31383: PPUSH
31384: CALL_OW 234
31388: GO 31373
31390: POP
31391: POP
// end ;
31392: PPOPN 2
31394: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31395: LD_EXP 38
31399: PUSH
31400: LD_EXP 87
31404: AND
31405: IFFALSE 31692
31407: GO 31409
31409: DISABLE
31410: LD_INT 0
31412: PPUSH
31413: PPUSH
31414: PPUSH
// begin i := rand ( 1 , 7 ) ;
31415: LD_ADDR_VAR 0 1
31419: PUSH
31420: LD_INT 1
31422: PPUSH
31423: LD_INT 7
31425: PPUSH
31426: CALL_OW 12
31430: ST_TO_ADDR
// case i of 1 :
31431: LD_VAR 0 1
31435: PUSH
31436: LD_INT 1
31438: DOUBLE
31439: EQUAL
31440: IFTRUE 31444
31442: GO 31454
31444: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31445: LD_STRING earthquake(getX(game), 0, 32)
31447: PPUSH
31448: CALL_OW 559
31452: GO 31692
31454: LD_INT 2
31456: DOUBLE
31457: EQUAL
31458: IFTRUE 31462
31460: GO 31476
31462: POP
// begin ToLua ( displayStucuk(); ) ;
31463: LD_STRING displayStucuk();
31465: PPUSH
31466: CALL_OW 559
// ResetFog ;
31470: CALL_OW 335
// end ; 3 :
31474: GO 31692
31476: LD_INT 3
31478: DOUBLE
31479: EQUAL
31480: IFTRUE 31484
31482: GO 31588
31484: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31485: LD_ADDR_VAR 0 2
31489: PUSH
31490: LD_INT 22
31492: PUSH
31493: LD_OWVAR 2
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 25
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PPUSH
31516: CALL_OW 69
31520: ST_TO_ADDR
// if not tmp then
31521: LD_VAR 0 2
31525: NOT
31526: IFFALSE 31530
// exit ;
31528: GO 31692
// un := tmp [ rand ( 1 , tmp ) ] ;
31530: LD_ADDR_VAR 0 3
31534: PUSH
31535: LD_VAR 0 2
31539: PUSH
31540: LD_INT 1
31542: PPUSH
31543: LD_VAR 0 2
31547: PPUSH
31548: CALL_OW 12
31552: ARRAY
31553: ST_TO_ADDR
// if Crawls ( un ) then
31554: LD_VAR 0 3
31558: PPUSH
31559: CALL_OW 318
31563: IFFALSE 31574
// ComWalk ( un ) ;
31565: LD_VAR 0 3
31569: PPUSH
31570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31574: LD_VAR 0 3
31578: PPUSH
31579: LD_INT 8
31581: PPUSH
31582: CALL_OW 336
// end ; 4 :
31586: GO 31692
31588: LD_INT 4
31590: DOUBLE
31591: EQUAL
31592: IFTRUE 31596
31594: GO 31670
31596: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31597: LD_ADDR_VAR 0 2
31601: PUSH
31602: LD_INT 22
31604: PUSH
31605: LD_OWVAR 2
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 30
31616: PUSH
31617: LD_INT 29
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PPUSH
31628: CALL_OW 69
31632: ST_TO_ADDR
// if not tmp then
31633: LD_VAR 0 2
31637: NOT
31638: IFFALSE 31642
// exit ;
31640: GO 31692
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31642: LD_VAR 0 2
31646: PUSH
31647: LD_INT 1
31649: ARRAY
31650: PPUSH
31651: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31655: LD_VAR 0 2
31659: PUSH
31660: LD_INT 1
31662: ARRAY
31663: PPUSH
31664: CALL_OW 65
// end ; 5 .. 7 :
31668: GO 31692
31670: LD_INT 5
31672: DOUBLE
31673: GREATEREQUAL
31674: IFFALSE 31682
31676: LD_INT 7
31678: DOUBLE
31679: LESSEQUAL
31680: IFTRUE 31684
31682: GO 31691
31684: POP
// StreamSibBomb ; end ;
31685: CALL 27929 0 0
31689: GO 31692
31691: POP
// end ;
31692: PPOPN 3
31694: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31695: LD_EXP 38
31699: PUSH
31700: LD_EXP 88
31704: AND
31705: IFFALSE 31861
31707: GO 31709
31709: DISABLE
31710: LD_INT 0
31712: PPUSH
31713: PPUSH
31714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31715: LD_ADDR_VAR 0 2
31719: PUSH
31720: LD_INT 81
31722: PUSH
31723: LD_OWVAR 2
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 21
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 21
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PPUSH
31764: CALL_OW 69
31768: ST_TO_ADDR
// if not tmp then
31769: LD_VAR 0 2
31773: NOT
31774: IFFALSE 31778
// exit ;
31776: GO 31861
// p := 0 ;
31778: LD_ADDR_VAR 0 3
31782: PUSH
31783: LD_INT 0
31785: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31786: LD_INT 35
31788: PPUSH
31789: CALL_OW 67
// p := p + 1 ;
31793: LD_ADDR_VAR 0 3
31797: PUSH
31798: LD_VAR 0 3
31802: PUSH
31803: LD_INT 1
31805: PLUS
31806: ST_TO_ADDR
// for i in tmp do
31807: LD_ADDR_VAR 0 1
31811: PUSH
31812: LD_VAR 0 2
31816: PUSH
31817: FOR_IN
31818: IFFALSE 31849
// if GetLives ( i ) < 1000 then
31820: LD_VAR 0 1
31824: PPUSH
31825: CALL_OW 256
31829: PUSH
31830: LD_INT 1000
31832: LESS
31833: IFFALSE 31847
// SetLives ( i , 1000 ) ;
31835: LD_VAR 0 1
31839: PPUSH
31840: LD_INT 1000
31842: PPUSH
31843: CALL_OW 234
31847: GO 31817
31849: POP
31850: POP
// until p > 20 ;
31851: LD_VAR 0 3
31855: PUSH
31856: LD_INT 20
31858: GREATER
31859: IFFALSE 31786
// end ;
31861: PPOPN 3
31863: END
// every 0 0$1 trigger StreamModeActive and sTime do
31864: LD_EXP 38
31868: PUSH
31869: LD_EXP 89
31873: AND
31874: IFFALSE 31909
31876: GO 31878
31878: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31879: LD_INT 28
31881: PPUSH
31882: LD_OWVAR 2
31886: PPUSH
31887: LD_INT 2
31889: PPUSH
31890: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31894: LD_INT 30
31896: PPUSH
31897: LD_OWVAR 2
31901: PPUSH
31902: LD_INT 2
31904: PPUSH
31905: CALL_OW 322
// end ;
31909: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31910: LD_EXP 38
31914: PUSH
31915: LD_EXP 90
31919: AND
31920: IFFALSE 32041
31922: GO 31924
31924: DISABLE
31925: LD_INT 0
31927: PPUSH
31928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31929: LD_ADDR_VAR 0 2
31933: PUSH
31934: LD_INT 22
31936: PUSH
31937: LD_OWVAR 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 21
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 3
31958: PUSH
31959: LD_INT 23
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: PPUSH
31978: CALL_OW 69
31982: ST_TO_ADDR
// if not tmp then
31983: LD_VAR 0 2
31987: NOT
31988: IFFALSE 31992
// exit ;
31990: GO 32041
// for i in tmp do
31992: LD_ADDR_VAR 0 1
31996: PUSH
31997: LD_VAR 0 2
32001: PUSH
32002: FOR_IN
32003: IFFALSE 32039
// begin if Crawls ( i ) then
32005: LD_VAR 0 1
32009: PPUSH
32010: CALL_OW 318
32014: IFFALSE 32025
// ComWalk ( i ) ;
32016: LD_VAR 0 1
32020: PPUSH
32021: CALL_OW 138
// SetClass ( i , 2 ) ;
32025: LD_VAR 0 1
32029: PPUSH
32030: LD_INT 2
32032: PPUSH
32033: CALL_OW 336
// end ;
32037: GO 32002
32039: POP
32040: POP
// end ;
32041: PPOPN 2
32043: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32044: LD_EXP 38
32048: PUSH
32049: LD_EXP 91
32053: AND
32054: IFFALSE 32342
32056: GO 32058
32058: DISABLE
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
32063: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32064: LD_OWVAR 2
32068: PPUSH
32069: LD_INT 9
32071: PPUSH
32072: LD_INT 1
32074: PPUSH
32075: LD_INT 1
32077: PPUSH
32078: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32082: LD_INT 9
32084: PPUSH
32085: LD_OWVAR 2
32089: PPUSH
32090: CALL_OW 343
// uc_side := 9 ;
32094: LD_ADDR_OWVAR 20
32098: PUSH
32099: LD_INT 9
32101: ST_TO_ADDR
// uc_nation := 2 ;
32102: LD_ADDR_OWVAR 21
32106: PUSH
32107: LD_INT 2
32109: ST_TO_ADDR
// hc_name := Dark Warrior ;
32110: LD_ADDR_OWVAR 26
32114: PUSH
32115: LD_STRING Dark Warrior
32117: ST_TO_ADDR
// hc_gallery :=  ;
32118: LD_ADDR_OWVAR 33
32122: PUSH
32123: LD_STRING 
32125: ST_TO_ADDR
// hc_noskilllimit := true ;
32126: LD_ADDR_OWVAR 76
32130: PUSH
32131: LD_INT 1
32133: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32134: LD_ADDR_OWVAR 31
32138: PUSH
32139: LD_INT 30
32141: PUSH
32142: LD_INT 30
32144: PUSH
32145: LD_INT 30
32147: PUSH
32148: LD_INT 30
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: ST_TO_ADDR
// un := CreateHuman ;
32157: LD_ADDR_VAR 0 3
32161: PUSH
32162: CALL_OW 44
32166: ST_TO_ADDR
// hc_noskilllimit := false ;
32167: LD_ADDR_OWVAR 76
32171: PUSH
32172: LD_INT 0
32174: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32175: LD_VAR 0 3
32179: PPUSH
32180: LD_INT 1
32182: PPUSH
32183: CALL_OW 51
// ToLua ( playRanger() ) ;
32187: LD_STRING playRanger()
32189: PPUSH
32190: CALL_OW 559
// p := 0 ;
32194: LD_ADDR_VAR 0 2
32198: PUSH
32199: LD_INT 0
32201: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32202: LD_INT 35
32204: PPUSH
32205: CALL_OW 67
// p := p + 1 ;
32209: LD_ADDR_VAR 0 2
32213: PUSH
32214: LD_VAR 0 2
32218: PUSH
32219: LD_INT 1
32221: PLUS
32222: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32223: LD_VAR 0 3
32227: PPUSH
32228: CALL_OW 256
32232: PUSH
32233: LD_INT 1000
32235: LESS
32236: IFFALSE 32250
// SetLives ( un , 1000 ) ;
32238: LD_VAR 0 3
32242: PPUSH
32243: LD_INT 1000
32245: PPUSH
32246: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32250: LD_VAR 0 3
32254: PPUSH
32255: LD_INT 81
32257: PUSH
32258: LD_OWVAR 2
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 91
32269: PUSH
32270: LD_VAR 0 3
32274: PUSH
32275: LD_INT 30
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PPUSH
32287: CALL_OW 69
32291: PPUSH
32292: LD_VAR 0 3
32296: PPUSH
32297: CALL_OW 74
32301: PPUSH
32302: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32306: LD_VAR 0 2
32310: PUSH
32311: LD_INT 80
32313: GREATER
32314: PUSH
32315: LD_VAR 0 3
32319: PPUSH
32320: CALL_OW 301
32324: OR
32325: IFFALSE 32202
// if un then
32327: LD_VAR 0 3
32331: IFFALSE 32342
// RemoveUnit ( un ) ;
32333: LD_VAR 0 3
32337: PPUSH
32338: CALL_OW 64
// end ;
32342: PPOPN 3
32344: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32345: LD_EXP 92
32349: IFFALSE 32465
32351: GO 32353
32353: DISABLE
32354: LD_INT 0
32356: PPUSH
32357: PPUSH
32358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32359: LD_ADDR_VAR 0 2
32363: PUSH
32364: LD_INT 81
32366: PUSH
32367: LD_OWVAR 2
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 21
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PPUSH
32390: CALL_OW 69
32394: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32395: LD_STRING playComputer()
32397: PPUSH
32398: CALL_OW 559
// if not tmp then
32402: LD_VAR 0 2
32406: NOT
32407: IFFALSE 32411
// exit ;
32409: GO 32465
// for i in tmp do
32411: LD_ADDR_VAR 0 1
32415: PUSH
32416: LD_VAR 0 2
32420: PUSH
32421: FOR_IN
32422: IFFALSE 32463
// for j := 1 to 4 do
32424: LD_ADDR_VAR 0 3
32428: PUSH
32429: DOUBLE
32430: LD_INT 1
32432: DEC
32433: ST_TO_ADDR
32434: LD_INT 4
32436: PUSH
32437: FOR_TO
32438: IFFALSE 32459
// SetSkill ( i , j , 10 ) ;
32440: LD_VAR 0 1
32444: PPUSH
32445: LD_VAR 0 3
32449: PPUSH
32450: LD_INT 10
32452: PPUSH
32453: CALL_OW 237
32457: GO 32437
32459: POP
32460: POP
32461: GO 32421
32463: POP
32464: POP
// end ;
32465: PPOPN 3
32467: END
// every 0 0$1 trigger s30 do var i , tmp ;
32468: LD_EXP 93
32472: IFFALSE 32541
32474: GO 32476
32476: DISABLE
32477: LD_INT 0
32479: PPUSH
32480: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32481: LD_ADDR_VAR 0 2
32485: PUSH
32486: LD_INT 22
32488: PUSH
32489: LD_OWVAR 2
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PPUSH
32498: CALL_OW 69
32502: ST_TO_ADDR
// if not tmp then
32503: LD_VAR 0 2
32507: NOT
32508: IFFALSE 32512
// exit ;
32510: GO 32541
// for i in tmp do
32512: LD_ADDR_VAR 0 1
32516: PUSH
32517: LD_VAR 0 2
32521: PUSH
32522: FOR_IN
32523: IFFALSE 32539
// SetLives ( i , 300 ) ;
32525: LD_VAR 0 1
32529: PPUSH
32530: LD_INT 300
32532: PPUSH
32533: CALL_OW 234
32537: GO 32522
32539: POP
32540: POP
// end ;
32541: PPOPN 2
32543: END
// every 0 0$1 trigger s60 do var i , tmp ;
32544: LD_EXP 94
32548: IFFALSE 32617
32550: GO 32552
32552: DISABLE
32553: LD_INT 0
32555: PPUSH
32556: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32557: LD_ADDR_VAR 0 2
32561: PUSH
32562: LD_INT 22
32564: PUSH
32565: LD_OWVAR 2
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PPUSH
32574: CALL_OW 69
32578: ST_TO_ADDR
// if not tmp then
32579: LD_VAR 0 2
32583: NOT
32584: IFFALSE 32588
// exit ;
32586: GO 32617
// for i in tmp do
32588: LD_ADDR_VAR 0 1
32592: PUSH
32593: LD_VAR 0 2
32597: PUSH
32598: FOR_IN
32599: IFFALSE 32615
// SetLives ( i , 600 ) ;
32601: LD_VAR 0 1
32605: PPUSH
32606: LD_INT 600
32608: PPUSH
32609: CALL_OW 234
32613: GO 32598
32615: POP
32616: POP
// end ;
32617: PPOPN 2
32619: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32620: LD_INT 0
32622: PPUSH
// case cmd of 301 :
32623: LD_VAR 0 1
32627: PUSH
32628: LD_INT 301
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32668
32636: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32637: LD_VAR 0 6
32641: PPUSH
32642: LD_VAR 0 7
32646: PPUSH
32647: LD_VAR 0 8
32651: PPUSH
32652: LD_VAR 0 4
32656: PPUSH
32657: LD_VAR 0 5
32661: PPUSH
32662: CALL 33869 0 5
32666: GO 32789
32668: LD_INT 302
32670: DOUBLE
32671: EQUAL
32672: IFTRUE 32676
32674: GO 32713
32676: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32677: LD_VAR 0 6
32681: PPUSH
32682: LD_VAR 0 7
32686: PPUSH
32687: LD_VAR 0 8
32691: PPUSH
32692: LD_VAR 0 9
32696: PPUSH
32697: LD_VAR 0 4
32701: PPUSH
32702: LD_VAR 0 5
32706: PPUSH
32707: CALL 33960 0 6
32711: GO 32789
32713: LD_INT 303
32715: DOUBLE
32716: EQUAL
32717: IFTRUE 32721
32719: GO 32758
32721: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32722: LD_VAR 0 6
32726: PPUSH
32727: LD_VAR 0 7
32731: PPUSH
32732: LD_VAR 0 8
32736: PPUSH
32737: LD_VAR 0 9
32741: PPUSH
32742: LD_VAR 0 4
32746: PPUSH
32747: LD_VAR 0 5
32751: PPUSH
32752: CALL 32794 0 6
32756: GO 32789
32758: LD_INT 304
32760: DOUBLE
32761: EQUAL
32762: IFTRUE 32766
32764: GO 32788
32766: POP
// hHackTeleport ( unit , x , y ) ; end ;
32767: LD_VAR 0 2
32771: PPUSH
32772: LD_VAR 0 4
32776: PPUSH
32777: LD_VAR 0 5
32781: PPUSH
32782: CALL 34553 0 3
32786: GO 32789
32788: POP
// end ;
32789: LD_VAR 0 12
32793: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32794: LD_INT 0
32796: PPUSH
32797: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32798: LD_VAR 0 1
32802: PUSH
32803: LD_INT 1
32805: LESS
32806: PUSH
32807: LD_VAR 0 1
32811: PUSH
32812: LD_INT 3
32814: GREATER
32815: OR
32816: PUSH
32817: LD_VAR 0 5
32821: PPUSH
32822: LD_VAR 0 6
32826: PPUSH
32827: CALL_OW 428
32831: OR
32832: IFFALSE 32836
// exit ;
32834: GO 33556
// uc_side := your_side ;
32836: LD_ADDR_OWVAR 20
32840: PUSH
32841: LD_OWVAR 2
32845: ST_TO_ADDR
// uc_nation := nation ;
32846: LD_ADDR_OWVAR 21
32850: PUSH
32851: LD_VAR 0 1
32855: ST_TO_ADDR
// bc_level = 1 ;
32856: LD_ADDR_OWVAR 43
32860: PUSH
32861: LD_INT 1
32863: ST_TO_ADDR
// case btype of 1 :
32864: LD_VAR 0 2
32868: PUSH
32869: LD_INT 1
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 32888
32877: POP
// bc_type := b_depot ; 2 :
32878: LD_ADDR_OWVAR 42
32882: PUSH
32883: LD_INT 0
32885: ST_TO_ADDR
32886: GO 33500
32888: LD_INT 2
32890: DOUBLE
32891: EQUAL
32892: IFTRUE 32896
32894: GO 32907
32896: POP
// bc_type := b_warehouse ; 3 :
32897: LD_ADDR_OWVAR 42
32901: PUSH
32902: LD_INT 1
32904: ST_TO_ADDR
32905: GO 33500
32907: LD_INT 3
32909: DOUBLE
32910: EQUAL
32911: IFTRUE 32915
32913: GO 32926
32915: POP
// bc_type := b_lab ; 4 .. 9 :
32916: LD_ADDR_OWVAR 42
32920: PUSH
32921: LD_INT 6
32923: ST_TO_ADDR
32924: GO 33500
32926: LD_INT 4
32928: DOUBLE
32929: GREATEREQUAL
32930: IFFALSE 32938
32932: LD_INT 9
32934: DOUBLE
32935: LESSEQUAL
32936: IFTRUE 32940
32938: GO 32992
32940: POP
// begin bc_type := b_lab_half ;
32941: LD_ADDR_OWVAR 42
32945: PUSH
32946: LD_INT 7
32948: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32949: LD_ADDR_OWVAR 44
32953: PUSH
32954: LD_INT 10
32956: PUSH
32957: LD_INT 11
32959: PUSH
32960: LD_INT 12
32962: PUSH
32963: LD_INT 15
32965: PUSH
32966: LD_INT 14
32968: PUSH
32969: LD_INT 13
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: PUSH
32980: LD_VAR 0 2
32984: PUSH
32985: LD_INT 3
32987: MINUS
32988: ARRAY
32989: ST_TO_ADDR
// end ; 10 .. 13 :
32990: GO 33500
32992: LD_INT 10
32994: DOUBLE
32995: GREATEREQUAL
32996: IFFALSE 33004
32998: LD_INT 13
33000: DOUBLE
33001: LESSEQUAL
33002: IFTRUE 33006
33004: GO 33083
33006: POP
// begin bc_type := b_lab_full ;
33007: LD_ADDR_OWVAR 42
33011: PUSH
33012: LD_INT 8
33014: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33015: LD_ADDR_OWVAR 44
33019: PUSH
33020: LD_INT 10
33022: PUSH
33023: LD_INT 12
33025: PUSH
33026: LD_INT 14
33028: PUSH
33029: LD_INT 13
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: PUSH
33038: LD_VAR 0 2
33042: PUSH
33043: LD_INT 9
33045: MINUS
33046: ARRAY
33047: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33048: LD_ADDR_OWVAR 45
33052: PUSH
33053: LD_INT 11
33055: PUSH
33056: LD_INT 15
33058: PUSH
33059: LD_INT 12
33061: PUSH
33062: LD_INT 15
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: PUSH
33071: LD_VAR 0 2
33075: PUSH
33076: LD_INT 9
33078: MINUS
33079: ARRAY
33080: ST_TO_ADDR
// end ; 14 :
33081: GO 33500
33083: LD_INT 14
33085: DOUBLE
33086: EQUAL
33087: IFTRUE 33091
33089: GO 33102
33091: POP
// bc_type := b_workshop ; 15 :
33092: LD_ADDR_OWVAR 42
33096: PUSH
33097: LD_INT 2
33099: ST_TO_ADDR
33100: GO 33500
33102: LD_INT 15
33104: DOUBLE
33105: EQUAL
33106: IFTRUE 33110
33108: GO 33121
33110: POP
// bc_type := b_factory ; 16 :
33111: LD_ADDR_OWVAR 42
33115: PUSH
33116: LD_INT 3
33118: ST_TO_ADDR
33119: GO 33500
33121: LD_INT 16
33123: DOUBLE
33124: EQUAL
33125: IFTRUE 33129
33127: GO 33140
33129: POP
// bc_type := b_ext_gun ; 17 :
33130: LD_ADDR_OWVAR 42
33134: PUSH
33135: LD_INT 17
33137: ST_TO_ADDR
33138: GO 33500
33140: LD_INT 17
33142: DOUBLE
33143: EQUAL
33144: IFTRUE 33148
33146: GO 33176
33148: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33149: LD_ADDR_OWVAR 42
33153: PUSH
33154: LD_INT 19
33156: PUSH
33157: LD_INT 23
33159: PUSH
33160: LD_INT 19
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: LIST
33167: PUSH
33168: LD_VAR 0 1
33172: ARRAY
33173: ST_TO_ADDR
33174: GO 33500
33176: LD_INT 18
33178: DOUBLE
33179: EQUAL
33180: IFTRUE 33184
33182: GO 33195
33184: POP
// bc_type := b_ext_radar ; 19 :
33185: LD_ADDR_OWVAR 42
33189: PUSH
33190: LD_INT 20
33192: ST_TO_ADDR
33193: GO 33500
33195: LD_INT 19
33197: DOUBLE
33198: EQUAL
33199: IFTRUE 33203
33201: GO 33214
33203: POP
// bc_type := b_ext_radio ; 20 :
33204: LD_ADDR_OWVAR 42
33208: PUSH
33209: LD_INT 22
33211: ST_TO_ADDR
33212: GO 33500
33214: LD_INT 20
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33233
33222: POP
// bc_type := b_ext_siberium ; 21 :
33223: LD_ADDR_OWVAR 42
33227: PUSH
33228: LD_INT 21
33230: ST_TO_ADDR
33231: GO 33500
33233: LD_INT 21
33235: DOUBLE
33236: EQUAL
33237: IFTRUE 33241
33239: GO 33252
33241: POP
// bc_type := b_ext_computer ; 22 :
33242: LD_ADDR_OWVAR 42
33246: PUSH
33247: LD_INT 24
33249: ST_TO_ADDR
33250: GO 33500
33252: LD_INT 22
33254: DOUBLE
33255: EQUAL
33256: IFTRUE 33260
33258: GO 33271
33260: POP
// bc_type := b_ext_track ; 23 :
33261: LD_ADDR_OWVAR 42
33265: PUSH
33266: LD_INT 16
33268: ST_TO_ADDR
33269: GO 33500
33271: LD_INT 23
33273: DOUBLE
33274: EQUAL
33275: IFTRUE 33279
33277: GO 33290
33279: POP
// bc_type := b_ext_laser ; 24 :
33280: LD_ADDR_OWVAR 42
33284: PUSH
33285: LD_INT 25
33287: ST_TO_ADDR
33288: GO 33500
33290: LD_INT 24
33292: DOUBLE
33293: EQUAL
33294: IFTRUE 33298
33296: GO 33309
33298: POP
// bc_type := b_control_tower ; 25 :
33299: LD_ADDR_OWVAR 42
33303: PUSH
33304: LD_INT 36
33306: ST_TO_ADDR
33307: GO 33500
33309: LD_INT 25
33311: DOUBLE
33312: EQUAL
33313: IFTRUE 33317
33315: GO 33328
33317: POP
// bc_type := b_breastwork ; 26 :
33318: LD_ADDR_OWVAR 42
33322: PUSH
33323: LD_INT 31
33325: ST_TO_ADDR
33326: GO 33500
33328: LD_INT 26
33330: DOUBLE
33331: EQUAL
33332: IFTRUE 33336
33334: GO 33347
33336: POP
// bc_type := b_bunker ; 27 :
33337: LD_ADDR_OWVAR 42
33341: PUSH
33342: LD_INT 32
33344: ST_TO_ADDR
33345: GO 33500
33347: LD_INT 27
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33366
33355: POP
// bc_type := b_turret ; 28 :
33356: LD_ADDR_OWVAR 42
33360: PUSH
33361: LD_INT 33
33363: ST_TO_ADDR
33364: GO 33500
33366: LD_INT 28
33368: DOUBLE
33369: EQUAL
33370: IFTRUE 33374
33372: GO 33385
33374: POP
// bc_type := b_armoury ; 29 :
33375: LD_ADDR_OWVAR 42
33379: PUSH
33380: LD_INT 4
33382: ST_TO_ADDR
33383: GO 33500
33385: LD_INT 29
33387: DOUBLE
33388: EQUAL
33389: IFTRUE 33393
33391: GO 33404
33393: POP
// bc_type := b_barracks ; 30 :
33394: LD_ADDR_OWVAR 42
33398: PUSH
33399: LD_INT 5
33401: ST_TO_ADDR
33402: GO 33500
33404: LD_INT 30
33406: DOUBLE
33407: EQUAL
33408: IFTRUE 33412
33410: GO 33423
33412: POP
// bc_type := b_solar_power ; 31 :
33413: LD_ADDR_OWVAR 42
33417: PUSH
33418: LD_INT 27
33420: ST_TO_ADDR
33421: GO 33500
33423: LD_INT 31
33425: DOUBLE
33426: EQUAL
33427: IFTRUE 33431
33429: GO 33442
33431: POP
// bc_type := b_oil_power ; 32 :
33432: LD_ADDR_OWVAR 42
33436: PUSH
33437: LD_INT 26
33439: ST_TO_ADDR
33440: GO 33500
33442: LD_INT 32
33444: DOUBLE
33445: EQUAL
33446: IFTRUE 33450
33448: GO 33461
33450: POP
// bc_type := b_siberite_power ; 33 :
33451: LD_ADDR_OWVAR 42
33455: PUSH
33456: LD_INT 28
33458: ST_TO_ADDR
33459: GO 33500
33461: LD_INT 33
33463: DOUBLE
33464: EQUAL
33465: IFTRUE 33469
33467: GO 33480
33469: POP
// bc_type := b_oil_mine ; 34 :
33470: LD_ADDR_OWVAR 42
33474: PUSH
33475: LD_INT 29
33477: ST_TO_ADDR
33478: GO 33500
33480: LD_INT 34
33482: DOUBLE
33483: EQUAL
33484: IFTRUE 33488
33486: GO 33499
33488: POP
// bc_type := b_siberite_mine ; end ;
33489: LD_ADDR_OWVAR 42
33493: PUSH
33494: LD_INT 30
33496: ST_TO_ADDR
33497: GO 33500
33499: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33500: LD_ADDR_VAR 0 8
33504: PUSH
33505: LD_VAR 0 5
33509: PPUSH
33510: LD_VAR 0 6
33514: PPUSH
33515: LD_VAR 0 3
33519: PPUSH
33520: CALL_OW 47
33524: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33525: LD_OWVAR 42
33529: PUSH
33530: LD_INT 32
33532: PUSH
33533: LD_INT 33
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: IN
33540: IFFALSE 33556
// PlaceWeaponTurret ( b , weapon ) ;
33542: LD_VAR 0 8
33546: PPUSH
33547: LD_VAR 0 4
33551: PPUSH
33552: CALL_OW 431
// end ;
33556: LD_VAR 0 7
33560: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33561: LD_INT 0
33563: PPUSH
33564: PPUSH
33565: PPUSH
33566: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33567: LD_ADDR_VAR 0 4
33571: PUSH
33572: LD_INT 22
33574: PUSH
33575: LD_OWVAR 2
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 2
33586: PUSH
33587: LD_INT 30
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 30
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PPUSH
33616: CALL_OW 69
33620: ST_TO_ADDR
// if not tmp then
33621: LD_VAR 0 4
33625: NOT
33626: IFFALSE 33630
// exit ;
33628: GO 33689
// for i in tmp do
33630: LD_ADDR_VAR 0 2
33634: PUSH
33635: LD_VAR 0 4
33639: PUSH
33640: FOR_IN
33641: IFFALSE 33687
// for j = 1 to 3 do
33643: LD_ADDR_VAR 0 3
33647: PUSH
33648: DOUBLE
33649: LD_INT 1
33651: DEC
33652: ST_TO_ADDR
33653: LD_INT 3
33655: PUSH
33656: FOR_TO
33657: IFFALSE 33683
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33659: LD_VAR 0 2
33663: PPUSH
33664: CALL_OW 274
33668: PPUSH
33669: LD_VAR 0 3
33673: PPUSH
33674: LD_INT 99999
33676: PPUSH
33677: CALL_OW 277
33681: GO 33656
33683: POP
33684: POP
33685: GO 33640
33687: POP
33688: POP
// end ;
33689: LD_VAR 0 1
33693: RET
// export function hHackSetLevel10 ; var i , j ; begin
33694: LD_INT 0
33696: PPUSH
33697: PPUSH
33698: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33699: LD_ADDR_VAR 0 2
33703: PUSH
33704: LD_INT 21
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PPUSH
33714: CALL_OW 69
33718: PUSH
33719: FOR_IN
33720: IFFALSE 33772
// if IsSelected ( i ) then
33722: LD_VAR 0 2
33726: PPUSH
33727: CALL_OW 306
33731: IFFALSE 33770
// begin for j := 1 to 4 do
33733: LD_ADDR_VAR 0 3
33737: PUSH
33738: DOUBLE
33739: LD_INT 1
33741: DEC
33742: ST_TO_ADDR
33743: LD_INT 4
33745: PUSH
33746: FOR_TO
33747: IFFALSE 33768
// SetSkill ( i , j , 10 ) ;
33749: LD_VAR 0 2
33753: PPUSH
33754: LD_VAR 0 3
33758: PPUSH
33759: LD_INT 10
33761: PPUSH
33762: CALL_OW 237
33766: GO 33746
33768: POP
33769: POP
// end ;
33770: GO 33719
33772: POP
33773: POP
// end ;
33774: LD_VAR 0 1
33778: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33779: LD_INT 0
33781: PPUSH
33782: PPUSH
33783: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33784: LD_ADDR_VAR 0 2
33788: PUSH
33789: LD_INT 22
33791: PUSH
33792: LD_OWVAR 2
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 21
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PPUSH
33815: CALL_OW 69
33819: PUSH
33820: FOR_IN
33821: IFFALSE 33862
// begin for j := 1 to 4 do
33823: LD_ADDR_VAR 0 3
33827: PUSH
33828: DOUBLE
33829: LD_INT 1
33831: DEC
33832: ST_TO_ADDR
33833: LD_INT 4
33835: PUSH
33836: FOR_TO
33837: IFFALSE 33858
// SetSkill ( i , j , 10 ) ;
33839: LD_VAR 0 2
33843: PPUSH
33844: LD_VAR 0 3
33848: PPUSH
33849: LD_INT 10
33851: PPUSH
33852: CALL_OW 237
33856: GO 33836
33858: POP
33859: POP
// end ;
33860: GO 33820
33862: POP
33863: POP
// end ;
33864: LD_VAR 0 1
33868: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33869: LD_INT 0
33871: PPUSH
// uc_side := your_side ;
33872: LD_ADDR_OWVAR 20
33876: PUSH
33877: LD_OWVAR 2
33881: ST_TO_ADDR
// uc_nation := nation ;
33882: LD_ADDR_OWVAR 21
33886: PUSH
33887: LD_VAR 0 1
33891: ST_TO_ADDR
// InitHc ;
33892: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33896: LD_INT 0
33898: PPUSH
33899: LD_VAR 0 2
33903: PPUSH
33904: LD_VAR 0 3
33908: PPUSH
33909: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33913: LD_VAR 0 4
33917: PPUSH
33918: LD_VAR 0 5
33922: PPUSH
33923: CALL_OW 428
33927: PUSH
33928: LD_INT 0
33930: EQUAL
33931: IFFALSE 33955
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33933: CALL_OW 44
33937: PPUSH
33938: LD_VAR 0 4
33942: PPUSH
33943: LD_VAR 0 5
33947: PPUSH
33948: LD_INT 1
33950: PPUSH
33951: CALL_OW 48
// end ;
33955: LD_VAR 0 6
33959: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33960: LD_INT 0
33962: PPUSH
33963: PPUSH
// uc_side := your_side ;
33964: LD_ADDR_OWVAR 20
33968: PUSH
33969: LD_OWVAR 2
33973: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33974: LD_VAR 0 1
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: LD_INT 2
33984: PUSH
33985: LD_INT 3
33987: PUSH
33988: LD_INT 4
33990: PUSH
33991: LD_INT 5
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: IN
34001: IFFALSE 34013
// uc_nation := nation_american else
34003: LD_ADDR_OWVAR 21
34007: PUSH
34008: LD_INT 1
34010: ST_TO_ADDR
34011: GO 34056
// if chassis in [ 11 , 12 , 13 , 14 ] then
34013: LD_VAR 0 1
34017: PUSH
34018: LD_INT 11
34020: PUSH
34021: LD_INT 12
34023: PUSH
34024: LD_INT 13
34026: PUSH
34027: LD_INT 14
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: IN
34036: IFFALSE 34048
// uc_nation := nation_arabian else
34038: LD_ADDR_OWVAR 21
34042: PUSH
34043: LD_INT 2
34045: ST_TO_ADDR
34046: GO 34056
// uc_nation := nation_russian ;
34048: LD_ADDR_OWVAR 21
34052: PUSH
34053: LD_INT 3
34055: ST_TO_ADDR
// vc_chassis := chassis ;
34056: LD_ADDR_OWVAR 37
34060: PUSH
34061: LD_VAR 0 1
34065: ST_TO_ADDR
// vc_engine := engine ;
34066: LD_ADDR_OWVAR 39
34070: PUSH
34071: LD_VAR 0 2
34075: ST_TO_ADDR
// vc_control := control ;
34076: LD_ADDR_OWVAR 38
34080: PUSH
34081: LD_VAR 0 3
34085: ST_TO_ADDR
// vc_weapon := weapon ;
34086: LD_ADDR_OWVAR 40
34090: PUSH
34091: LD_VAR 0 4
34095: ST_TO_ADDR
// un := CreateVehicle ;
34096: LD_ADDR_VAR 0 8
34100: PUSH
34101: CALL_OW 45
34105: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34106: LD_VAR 0 8
34110: PPUSH
34111: LD_INT 0
34113: PPUSH
34114: LD_INT 5
34116: PPUSH
34117: CALL_OW 12
34121: PPUSH
34122: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34126: LD_VAR 0 8
34130: PPUSH
34131: LD_VAR 0 5
34135: PPUSH
34136: LD_VAR 0 6
34140: PPUSH
34141: LD_INT 1
34143: PPUSH
34144: CALL_OW 48
// end ;
34148: LD_VAR 0 7
34152: RET
// export hInvincible ; every 1 do
34153: GO 34155
34155: DISABLE
// hInvincible := [ ] ;
34156: LD_ADDR_EXP 95
34160: PUSH
34161: EMPTY
34162: ST_TO_ADDR
34163: END
// every 10 do var i ;
34164: GO 34166
34166: DISABLE
34167: LD_INT 0
34169: PPUSH
// begin enable ;
34170: ENABLE
// if not hInvincible then
34171: LD_EXP 95
34175: NOT
34176: IFFALSE 34180
// exit ;
34178: GO 34224
// for i in hInvincible do
34180: LD_ADDR_VAR 0 1
34184: PUSH
34185: LD_EXP 95
34189: PUSH
34190: FOR_IN
34191: IFFALSE 34222
// if GetLives ( i ) < 1000 then
34193: LD_VAR 0 1
34197: PPUSH
34198: CALL_OW 256
34202: PUSH
34203: LD_INT 1000
34205: LESS
34206: IFFALSE 34220
// SetLives ( i , 1000 ) ;
34208: LD_VAR 0 1
34212: PPUSH
34213: LD_INT 1000
34215: PPUSH
34216: CALL_OW 234
34220: GO 34190
34222: POP
34223: POP
// end ;
34224: PPOPN 1
34226: END
// export function hHackInvincible ; var i ; begin
34227: LD_INT 0
34229: PPUSH
34230: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34231: LD_ADDR_VAR 0 2
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: LD_INT 21
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 21
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: LIST
34263: PPUSH
34264: CALL_OW 69
34268: PUSH
34269: FOR_IN
34270: IFFALSE 34331
// if IsSelected ( i ) then
34272: LD_VAR 0 2
34276: PPUSH
34277: CALL_OW 306
34281: IFFALSE 34329
// begin if i in hInvincible then
34283: LD_VAR 0 2
34287: PUSH
34288: LD_EXP 95
34292: IN
34293: IFFALSE 34313
// hInvincible := hInvincible diff i else
34295: LD_ADDR_EXP 95
34299: PUSH
34300: LD_EXP 95
34304: PUSH
34305: LD_VAR 0 2
34309: DIFF
34310: ST_TO_ADDR
34311: GO 34329
// hInvincible := hInvincible union i ;
34313: LD_ADDR_EXP 95
34317: PUSH
34318: LD_EXP 95
34322: PUSH
34323: LD_VAR 0 2
34327: UNION
34328: ST_TO_ADDR
// end ;
34329: GO 34269
34331: POP
34332: POP
// end ;
34333: LD_VAR 0 1
34337: RET
// export function hHackInvisible ; var i , j ; begin
34338: LD_INT 0
34340: PPUSH
34341: PPUSH
34342: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34343: LD_ADDR_VAR 0 2
34347: PUSH
34348: LD_INT 21
34350: PUSH
34351: LD_INT 1
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PPUSH
34358: CALL_OW 69
34362: PUSH
34363: FOR_IN
34364: IFFALSE 34388
// if IsSelected ( i ) then
34366: LD_VAR 0 2
34370: PPUSH
34371: CALL_OW 306
34375: IFFALSE 34386
// ComForceInvisible ( i ) ;
34377: LD_VAR 0 2
34381: PPUSH
34382: CALL_OW 496
34386: GO 34363
34388: POP
34389: POP
// end ;
34390: LD_VAR 0 1
34394: RET
// export function hHackChangeYourSide ; begin
34395: LD_INT 0
34397: PPUSH
// if your_side = 8 then
34398: LD_OWVAR 2
34402: PUSH
34403: LD_INT 8
34405: EQUAL
34406: IFFALSE 34418
// your_side := 0 else
34408: LD_ADDR_OWVAR 2
34412: PUSH
34413: LD_INT 0
34415: ST_TO_ADDR
34416: GO 34432
// your_side := your_side + 1 ;
34418: LD_ADDR_OWVAR 2
34422: PUSH
34423: LD_OWVAR 2
34427: PUSH
34428: LD_INT 1
34430: PLUS
34431: ST_TO_ADDR
// end ;
34432: LD_VAR 0 1
34436: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34437: LD_INT 0
34439: PPUSH
34440: PPUSH
34441: PPUSH
// for i in all_units do
34442: LD_ADDR_VAR 0 2
34446: PUSH
34447: LD_OWVAR 3
34451: PUSH
34452: FOR_IN
34453: IFFALSE 34531
// if IsSelected ( i ) then
34455: LD_VAR 0 2
34459: PPUSH
34460: CALL_OW 306
34464: IFFALSE 34529
// begin j := GetSide ( i ) ;
34466: LD_ADDR_VAR 0 3
34470: PUSH
34471: LD_VAR 0 2
34475: PPUSH
34476: CALL_OW 255
34480: ST_TO_ADDR
// if j = 8 then
34481: LD_VAR 0 3
34485: PUSH
34486: LD_INT 8
34488: EQUAL
34489: IFFALSE 34501
// j := 0 else
34491: LD_ADDR_VAR 0 3
34495: PUSH
34496: LD_INT 0
34498: ST_TO_ADDR
34499: GO 34515
// j := j + 1 ;
34501: LD_ADDR_VAR 0 3
34505: PUSH
34506: LD_VAR 0 3
34510: PUSH
34511: LD_INT 1
34513: PLUS
34514: ST_TO_ADDR
// SetSide ( i , j ) ;
34515: LD_VAR 0 2
34519: PPUSH
34520: LD_VAR 0 3
34524: PPUSH
34525: CALL_OW 235
// end ;
34529: GO 34452
34531: POP
34532: POP
// end ;
34533: LD_VAR 0 1
34537: RET
// export function hHackFog ; begin
34538: LD_INT 0
34540: PPUSH
// FogOff ( true ) ;
34541: LD_INT 1
34543: PPUSH
34544: CALL_OW 344
// end ;
34548: LD_VAR 0 1
34552: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34553: LD_INT 0
34555: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34556: LD_VAR 0 1
34560: PPUSH
34561: LD_VAR 0 2
34565: PPUSH
34566: LD_VAR 0 3
34570: PPUSH
34571: LD_INT 1
34573: PPUSH
34574: LD_INT 1
34576: PPUSH
34577: CALL_OW 483
// CenterOnXY ( x , y ) ;
34581: LD_VAR 0 2
34585: PPUSH
34586: LD_VAR 0 3
34590: PPUSH
34591: CALL_OW 84
// end ;
34595: LD_VAR 0 4
34599: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34600: LD_INT 0
34602: PPUSH
34603: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34604: LD_VAR 0 1
34608: NOT
34609: PUSH
34610: LD_VAR 0 2
34614: PPUSH
34615: LD_VAR 0 3
34619: PPUSH
34620: CALL_OW 488
34624: NOT
34625: OR
34626: PUSH
34627: LD_VAR 0 1
34631: PPUSH
34632: CALL_OW 266
34636: PUSH
34637: LD_INT 3
34639: NONEQUAL
34640: PUSH
34641: LD_VAR 0 1
34645: PPUSH
34646: CALL_OW 247
34650: PUSH
34651: LD_INT 1
34653: EQUAL
34654: NOT
34655: AND
34656: OR
34657: IFFALSE 34661
// exit ;
34659: GO 34810
// if GetType ( factory ) = unit_human then
34661: LD_VAR 0 1
34665: PPUSH
34666: CALL_OW 247
34670: PUSH
34671: LD_INT 1
34673: EQUAL
34674: IFFALSE 34691
// factory := IsInUnit ( factory ) ;
34676: LD_ADDR_VAR 0 1
34680: PUSH
34681: LD_VAR 0 1
34685: PPUSH
34686: CALL_OW 310
34690: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 266
34700: PUSH
34701: LD_INT 3
34703: NONEQUAL
34704: IFFALSE 34708
// exit ;
34706: GO 34810
// if HexInfo ( x , y ) = factory then
34708: LD_VAR 0 2
34712: PPUSH
34713: LD_VAR 0 3
34717: PPUSH
34718: CALL_OW 428
34722: PUSH
34723: LD_VAR 0 1
34727: EQUAL
34728: IFFALSE 34755
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34730: LD_ADDR_EXP 96
34734: PUSH
34735: LD_EXP 96
34739: PPUSH
34740: LD_VAR 0 1
34744: PPUSH
34745: LD_INT 0
34747: PPUSH
34748: CALL_OW 1
34752: ST_TO_ADDR
34753: GO 34806
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34755: LD_ADDR_EXP 96
34759: PUSH
34760: LD_EXP 96
34764: PPUSH
34765: LD_VAR 0 1
34769: PPUSH
34770: LD_VAR 0 1
34774: PPUSH
34775: CALL_OW 255
34779: PUSH
34780: LD_VAR 0 1
34784: PUSH
34785: LD_VAR 0 2
34789: PUSH
34790: LD_VAR 0 3
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: PPUSH
34801: CALL_OW 1
34805: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34806: CALL 34815 0 0
// end ;
34810: LD_VAR 0 4
34814: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34815: LD_INT 0
34817: PPUSH
34818: PPUSH
34819: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34820: LD_STRING resetFactoryWaypoint();
34822: PPUSH
34823: CALL_OW 559
// if factoryWaypoints then
34827: LD_EXP 96
34831: IFFALSE 34957
// begin list := PrepareArray ( factoryWaypoints ) ;
34833: LD_ADDR_VAR 0 3
34837: PUSH
34838: LD_EXP 96
34842: PPUSH
34843: CALL 81426 0 1
34847: ST_TO_ADDR
// for i := 1 to list do
34848: LD_ADDR_VAR 0 2
34852: PUSH
34853: DOUBLE
34854: LD_INT 1
34856: DEC
34857: ST_TO_ADDR
34858: LD_VAR 0 3
34862: PUSH
34863: FOR_TO
34864: IFFALSE 34955
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34866: LD_STRING setFactoryWaypointXY(
34868: PUSH
34869: LD_VAR 0 3
34873: PUSH
34874: LD_VAR 0 2
34878: ARRAY
34879: PUSH
34880: LD_INT 1
34882: ARRAY
34883: STR
34884: PUSH
34885: LD_STRING ,
34887: STR
34888: PUSH
34889: LD_VAR 0 3
34893: PUSH
34894: LD_VAR 0 2
34898: ARRAY
34899: PUSH
34900: LD_INT 2
34902: ARRAY
34903: STR
34904: PUSH
34905: LD_STRING ,
34907: STR
34908: PUSH
34909: LD_VAR 0 3
34913: PUSH
34914: LD_VAR 0 2
34918: ARRAY
34919: PUSH
34920: LD_INT 3
34922: ARRAY
34923: STR
34924: PUSH
34925: LD_STRING ,
34927: STR
34928: PUSH
34929: LD_VAR 0 3
34933: PUSH
34934: LD_VAR 0 2
34938: ARRAY
34939: PUSH
34940: LD_INT 4
34942: ARRAY
34943: STR
34944: PUSH
34945: LD_STRING )
34947: STR
34948: PPUSH
34949: CALL_OW 559
34953: GO 34863
34955: POP
34956: POP
// end ; end ;
34957: LD_VAR 0 1
34961: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34962: LD_INT 0
34964: PPUSH
// if HexInfo ( x , y ) = warehouse then
34965: LD_VAR 0 2
34969: PPUSH
34970: LD_VAR 0 3
34974: PPUSH
34975: CALL_OW 428
34979: PUSH
34980: LD_VAR 0 1
34984: EQUAL
34985: IFFALSE 35012
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34987: LD_ADDR_EXP 97
34991: PUSH
34992: LD_EXP 97
34996: PPUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: LD_INT 0
35004: PPUSH
35005: CALL_OW 1
35009: ST_TO_ADDR
35010: GO 35063
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35012: LD_ADDR_EXP 97
35016: PUSH
35017: LD_EXP 97
35021: PPUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: LD_VAR 0 1
35031: PPUSH
35032: CALL_OW 255
35036: PUSH
35037: LD_VAR 0 1
35041: PUSH
35042: LD_VAR 0 2
35046: PUSH
35047: LD_VAR 0 3
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: PPUSH
35058: CALL_OW 1
35062: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35063: CALL 35072 0 0
// end ;
35067: LD_VAR 0 4
35071: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35072: LD_INT 0
35074: PPUSH
35075: PPUSH
35076: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35077: LD_STRING resetWarehouseGatheringPoints();
35079: PPUSH
35080: CALL_OW 559
// if warehouseGatheringPoints then
35084: LD_EXP 97
35088: IFFALSE 35214
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35090: LD_ADDR_VAR 0 3
35094: PUSH
35095: LD_EXP 97
35099: PPUSH
35100: CALL 81426 0 1
35104: ST_TO_ADDR
// for i := 1 to list do
35105: LD_ADDR_VAR 0 2
35109: PUSH
35110: DOUBLE
35111: LD_INT 1
35113: DEC
35114: ST_TO_ADDR
35115: LD_VAR 0 3
35119: PUSH
35120: FOR_TO
35121: IFFALSE 35212
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35123: LD_STRING setWarehouseGatheringPointXY(
35125: PUSH
35126: LD_VAR 0 3
35130: PUSH
35131: LD_VAR 0 2
35135: ARRAY
35136: PUSH
35137: LD_INT 1
35139: ARRAY
35140: STR
35141: PUSH
35142: LD_STRING ,
35144: STR
35145: PUSH
35146: LD_VAR 0 3
35150: PUSH
35151: LD_VAR 0 2
35155: ARRAY
35156: PUSH
35157: LD_INT 2
35159: ARRAY
35160: STR
35161: PUSH
35162: LD_STRING ,
35164: STR
35165: PUSH
35166: LD_VAR 0 3
35170: PUSH
35171: LD_VAR 0 2
35175: ARRAY
35176: PUSH
35177: LD_INT 3
35179: ARRAY
35180: STR
35181: PUSH
35182: LD_STRING ,
35184: STR
35185: PUSH
35186: LD_VAR 0 3
35190: PUSH
35191: LD_VAR 0 2
35195: ARRAY
35196: PUSH
35197: LD_INT 4
35199: ARRAY
35200: STR
35201: PUSH
35202: LD_STRING )
35204: STR
35205: PPUSH
35206: CALL_OW 559
35210: GO 35120
35212: POP
35213: POP
// end ; end ;
35214: LD_VAR 0 1
35218: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35219: LD_EXP 97
35223: IFFALSE 35908
35225: GO 35227
35227: DISABLE
35228: LD_INT 0
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
// begin enable ;
35239: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35240: LD_ADDR_VAR 0 3
35244: PUSH
35245: LD_EXP 97
35249: PPUSH
35250: CALL 81426 0 1
35254: ST_TO_ADDR
// if not list then
35255: LD_VAR 0 3
35259: NOT
35260: IFFALSE 35264
// exit ;
35262: GO 35908
// for i := 1 to list do
35264: LD_ADDR_VAR 0 1
35268: PUSH
35269: DOUBLE
35270: LD_INT 1
35272: DEC
35273: ST_TO_ADDR
35274: LD_VAR 0 3
35278: PUSH
35279: FOR_TO
35280: IFFALSE 35906
// begin depot := list [ i ] [ 2 ] ;
35282: LD_ADDR_VAR 0 8
35286: PUSH
35287: LD_VAR 0 3
35291: PUSH
35292: LD_VAR 0 1
35296: ARRAY
35297: PUSH
35298: LD_INT 2
35300: ARRAY
35301: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35302: LD_ADDR_VAR 0 5
35306: PUSH
35307: LD_VAR 0 3
35311: PUSH
35312: LD_VAR 0 1
35316: ARRAY
35317: PUSH
35318: LD_INT 1
35320: ARRAY
35321: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35322: LD_VAR 0 8
35326: PPUSH
35327: CALL_OW 301
35331: PUSH
35332: LD_VAR 0 5
35336: PUSH
35337: LD_VAR 0 8
35341: PPUSH
35342: CALL_OW 255
35346: NONEQUAL
35347: OR
35348: IFFALSE 35377
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35350: LD_ADDR_EXP 97
35354: PUSH
35355: LD_EXP 97
35359: PPUSH
35360: LD_VAR 0 8
35364: PPUSH
35365: LD_INT 0
35367: PPUSH
35368: CALL_OW 1
35372: ST_TO_ADDR
// exit ;
35373: POP
35374: POP
35375: GO 35908
// end ; x := list [ i ] [ 3 ] ;
35377: LD_ADDR_VAR 0 6
35381: PUSH
35382: LD_VAR 0 3
35386: PUSH
35387: LD_VAR 0 1
35391: ARRAY
35392: PUSH
35393: LD_INT 3
35395: ARRAY
35396: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35397: LD_ADDR_VAR 0 7
35401: PUSH
35402: LD_VAR 0 3
35406: PUSH
35407: LD_VAR 0 1
35411: ARRAY
35412: PUSH
35413: LD_INT 4
35415: ARRAY
35416: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35417: LD_ADDR_VAR 0 9
35421: PUSH
35422: LD_VAR 0 6
35426: PPUSH
35427: LD_VAR 0 7
35431: PPUSH
35432: LD_INT 16
35434: PPUSH
35435: CALL 80014 0 3
35439: ST_TO_ADDR
// if not cratesNearbyPoint then
35440: LD_VAR 0 9
35444: NOT
35445: IFFALSE 35451
// exit ;
35447: POP
35448: POP
35449: GO 35908
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35451: LD_ADDR_VAR 0 4
35455: PUSH
35456: LD_INT 22
35458: PUSH
35459: LD_VAR 0 5
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 3
35470: PUSH
35471: LD_INT 60
35473: PUSH
35474: EMPTY
35475: LIST
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 91
35483: PUSH
35484: LD_VAR 0 8
35488: PUSH
35489: LD_INT 6
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 25
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 25
35512: PUSH
35513: LD_INT 16
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: PPUSH
35531: CALL_OW 69
35535: PUSH
35536: LD_VAR 0 8
35540: PPUSH
35541: CALL_OW 313
35545: PPUSH
35546: LD_INT 3
35548: PUSH
35549: LD_INT 60
35551: PUSH
35552: EMPTY
35553: LIST
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 25
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 25
35574: PUSH
35575: LD_INT 16
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: LIST
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PPUSH
35591: CALL_OW 72
35595: UNION
35596: ST_TO_ADDR
// if tmp then
35597: LD_VAR 0 4
35601: IFFALSE 35681
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35603: LD_ADDR_VAR 0 4
35607: PUSH
35608: LD_VAR 0 4
35612: PPUSH
35613: LD_INT 3
35615: PPUSH
35616: CALL 77983 0 2
35620: ST_TO_ADDR
// for j in tmp do
35621: LD_ADDR_VAR 0 2
35625: PUSH
35626: LD_VAR 0 4
35630: PUSH
35631: FOR_IN
35632: IFFALSE 35675
// begin if IsInUnit ( j ) then
35634: LD_VAR 0 2
35638: PPUSH
35639: CALL_OW 310
35643: IFFALSE 35654
// ComExit ( j ) ;
35645: LD_VAR 0 2
35649: PPUSH
35650: CALL 78066 0 1
// AddComCollect ( j , x , y ) ;
35654: LD_VAR 0 2
35658: PPUSH
35659: LD_VAR 0 6
35663: PPUSH
35664: LD_VAR 0 7
35668: PPUSH
35669: CALL_OW 177
// end ;
35673: GO 35631
35675: POP
35676: POP
// exit ;
35677: POP
35678: POP
35679: GO 35908
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35681: LD_ADDR_VAR 0 4
35685: PUSH
35686: LD_INT 22
35688: PUSH
35689: LD_VAR 0 5
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 91
35700: PUSH
35701: LD_VAR 0 8
35705: PUSH
35706: LD_INT 8
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 34
35719: PUSH
35720: LD_INT 12
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 34
35729: PUSH
35730: LD_INT 51
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 34
35739: PUSH
35740: LD_INT 32
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 34
35749: PUSH
35750: LD_INT 89
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: PPUSH
35769: CALL_OW 69
35773: ST_TO_ADDR
// if tmp then
35774: LD_VAR 0 4
35778: IFFALSE 35904
// begin for j in tmp do
35780: LD_ADDR_VAR 0 2
35784: PUSH
35785: LD_VAR 0 4
35789: PUSH
35790: FOR_IN
35791: IFFALSE 35902
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35793: LD_VAR 0 2
35797: PPUSH
35798: CALL_OW 262
35802: PUSH
35803: LD_INT 3
35805: EQUAL
35806: PUSH
35807: LD_VAR 0 2
35811: PPUSH
35812: CALL_OW 261
35816: PUSH
35817: LD_INT 20
35819: GREATER
35820: OR
35821: PUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: CALL_OW 314
35831: NOT
35832: AND
35833: PUSH
35834: LD_VAR 0 2
35838: PPUSH
35839: CALL_OW 263
35843: PUSH
35844: LD_INT 1
35846: NONEQUAL
35847: PUSH
35848: LD_VAR 0 2
35852: PPUSH
35853: CALL_OW 311
35857: OR
35858: AND
35859: IFFALSE 35900
// begin ComCollect ( j , x , y ) ;
35861: LD_VAR 0 2
35865: PPUSH
35866: LD_VAR 0 6
35870: PPUSH
35871: LD_VAR 0 7
35875: PPUSH
35876: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35880: LD_VAR 0 2
35884: PPUSH
35885: LD_VAR 0 8
35889: PPUSH
35890: CALL_OW 172
// exit ;
35894: POP
35895: POP
35896: POP
35897: POP
35898: GO 35908
// end ;
35900: GO 35790
35902: POP
35903: POP
// end ; end ;
35904: GO 35279
35906: POP
35907: POP
// end ; end_of_file
35908: PPOPN 9
35910: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35911: LD_INT 0
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35917: LD_VAR 0 1
35921: PPUSH
35922: CALL_OW 264
35926: PUSH
35927: LD_INT 91
35929: EQUAL
35930: IFFALSE 36002
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35932: LD_INT 68
35934: PPUSH
35935: LD_VAR 0 1
35939: PPUSH
35940: CALL_OW 255
35944: PPUSH
35945: CALL_OW 321
35949: PUSH
35950: LD_INT 2
35952: EQUAL
35953: IFFALSE 35965
// eff := 70 else
35955: LD_ADDR_VAR 0 4
35959: PUSH
35960: LD_INT 70
35962: ST_TO_ADDR
35963: GO 35973
// eff := 30 ;
35965: LD_ADDR_VAR 0 4
35969: PUSH
35970: LD_INT 30
35972: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL_OW 250
35982: PPUSH
35983: LD_VAR 0 1
35987: PPUSH
35988: CALL_OW 251
35992: PPUSH
35993: LD_VAR 0 4
35997: PPUSH
35998: CALL_OW 495
// end ; end ;
36002: LD_VAR 0 2
36006: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36007: LD_INT 0
36009: PPUSH
// end ;
36010: LD_VAR 0 4
36014: RET
// export function SOS_Command ( cmd ) ; begin
36015: LD_INT 0
36017: PPUSH
// end ;
36018: LD_VAR 0 2
36022: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36023: LD_INT 0
36025: PPUSH
// end ;
36026: LD_VAR 0 6
36030: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36031: LD_INT 0
36033: PPUSH
36034: PPUSH
// if not vehicle or not factory then
36035: LD_VAR 0 1
36039: NOT
36040: PUSH
36041: LD_VAR 0 2
36045: NOT
36046: OR
36047: IFFALSE 36051
// exit ;
36049: GO 36282
// if factoryWaypoints >= factory then
36051: LD_EXP 96
36055: PUSH
36056: LD_VAR 0 2
36060: GREATEREQUAL
36061: IFFALSE 36282
// if factoryWaypoints [ factory ] then
36063: LD_EXP 96
36067: PUSH
36068: LD_VAR 0 2
36072: ARRAY
36073: IFFALSE 36282
// begin if GetControl ( vehicle ) = control_manual then
36075: LD_VAR 0 1
36079: PPUSH
36080: CALL_OW 263
36084: PUSH
36085: LD_INT 1
36087: EQUAL
36088: IFFALSE 36169
// begin driver := IsDrivenBy ( vehicle ) ;
36090: LD_ADDR_VAR 0 4
36094: PUSH
36095: LD_VAR 0 1
36099: PPUSH
36100: CALL_OW 311
36104: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36105: LD_VAR 0 4
36109: PPUSH
36110: LD_EXP 96
36114: PUSH
36115: LD_VAR 0 2
36119: ARRAY
36120: PUSH
36121: LD_INT 3
36123: ARRAY
36124: PPUSH
36125: LD_EXP 96
36129: PUSH
36130: LD_VAR 0 2
36134: ARRAY
36135: PUSH
36136: LD_INT 4
36138: ARRAY
36139: PPUSH
36140: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36144: LD_VAR 0 4
36148: PPUSH
36149: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36153: LD_VAR 0 4
36157: PPUSH
36158: LD_VAR 0 2
36162: PPUSH
36163: CALL_OW 180
// end else
36167: GO 36282
// if GetControl ( vehicle ) = control_remote then
36169: LD_VAR 0 1
36173: PPUSH
36174: CALL_OW 263
36178: PUSH
36179: LD_INT 2
36181: EQUAL
36182: IFFALSE 36243
// begin wait ( 0 0$2 ) ;
36184: LD_INT 70
36186: PPUSH
36187: CALL_OW 67
// if Connect ( vehicle ) then
36191: LD_VAR 0 1
36195: PPUSH
36196: CALL 48306 0 1
36200: IFFALSE 36241
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36202: LD_VAR 0 1
36206: PPUSH
36207: LD_EXP 96
36211: PUSH
36212: LD_VAR 0 2
36216: ARRAY
36217: PUSH
36218: LD_INT 3
36220: ARRAY
36221: PPUSH
36222: LD_EXP 96
36226: PUSH
36227: LD_VAR 0 2
36231: ARRAY
36232: PUSH
36233: LD_INT 4
36235: ARRAY
36236: PPUSH
36237: CALL_OW 171
// end else
36241: GO 36282
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36243: LD_VAR 0 1
36247: PPUSH
36248: LD_EXP 96
36252: PUSH
36253: LD_VAR 0 2
36257: ARRAY
36258: PUSH
36259: LD_INT 3
36261: ARRAY
36262: PPUSH
36263: LD_EXP 96
36267: PUSH
36268: LD_VAR 0 2
36272: ARRAY
36273: PUSH
36274: LD_INT 4
36276: ARRAY
36277: PPUSH
36278: CALL_OW 171
// end ; end ;
36282: LD_VAR 0 3
36286: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36287: LD_INT 0
36289: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36290: LD_VAR 0 1
36294: PUSH
36295: LD_INT 250
36297: EQUAL
36298: PUSH
36299: LD_VAR 0 2
36303: PPUSH
36304: CALL_OW 264
36308: PUSH
36309: LD_INT 81
36311: EQUAL
36312: AND
36313: IFFALSE 36334
// MinerPlaceMine ( unit , x , y ) ;
36315: LD_VAR 0 2
36319: PPUSH
36320: LD_VAR 0 4
36324: PPUSH
36325: LD_VAR 0 5
36329: PPUSH
36330: CALL 38719 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36334: LD_VAR 0 1
36338: PUSH
36339: LD_INT 251
36341: EQUAL
36342: PUSH
36343: LD_VAR 0 2
36347: PPUSH
36348: CALL_OW 264
36352: PUSH
36353: LD_INT 81
36355: EQUAL
36356: AND
36357: IFFALSE 36378
// MinerDetonateMine ( unit , x , y ) ;
36359: LD_VAR 0 2
36363: PPUSH
36364: LD_VAR 0 4
36368: PPUSH
36369: LD_VAR 0 5
36373: PPUSH
36374: CALL 38994 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36378: LD_VAR 0 1
36382: PUSH
36383: LD_INT 252
36385: EQUAL
36386: PUSH
36387: LD_VAR 0 2
36391: PPUSH
36392: CALL_OW 264
36396: PUSH
36397: LD_INT 81
36399: EQUAL
36400: AND
36401: IFFALSE 36422
// MinerCreateMinefield ( unit , x , y ) ;
36403: LD_VAR 0 2
36407: PPUSH
36408: LD_VAR 0 4
36412: PPUSH
36413: LD_VAR 0 5
36417: PPUSH
36418: CALL 39411 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36422: LD_VAR 0 1
36426: PUSH
36427: LD_INT 253
36429: EQUAL
36430: PUSH
36431: LD_VAR 0 2
36435: PPUSH
36436: CALL_OW 257
36440: PUSH
36441: LD_INT 5
36443: EQUAL
36444: AND
36445: IFFALSE 36466
// ComBinocular ( unit , x , y ) ;
36447: LD_VAR 0 2
36451: PPUSH
36452: LD_VAR 0 4
36456: PPUSH
36457: LD_VAR 0 5
36461: PPUSH
36462: CALL 39780 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36466: LD_VAR 0 1
36470: PUSH
36471: LD_INT 254
36473: EQUAL
36474: PUSH
36475: LD_VAR 0 2
36479: PPUSH
36480: CALL_OW 264
36484: PUSH
36485: LD_INT 99
36487: EQUAL
36488: AND
36489: PUSH
36490: LD_VAR 0 3
36494: PPUSH
36495: CALL_OW 263
36499: PUSH
36500: LD_INT 3
36502: EQUAL
36503: AND
36504: IFFALSE 36520
// HackDestroyVehicle ( unit , selectedUnit ) ;
36506: LD_VAR 0 2
36510: PPUSH
36511: LD_VAR 0 3
36515: PPUSH
36516: CALL 38083 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36520: LD_VAR 0 1
36524: PUSH
36525: LD_INT 255
36527: EQUAL
36528: PUSH
36529: LD_VAR 0 2
36533: PPUSH
36534: CALL_OW 264
36538: PUSH
36539: LD_INT 14
36541: PUSH
36542: LD_INT 53
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: IN
36549: AND
36550: PUSH
36551: LD_VAR 0 4
36555: PPUSH
36556: LD_VAR 0 5
36560: PPUSH
36561: CALL_OW 488
36565: AND
36566: IFFALSE 36590
// CutTreeXYR ( unit , x , y , 12 ) ;
36568: LD_VAR 0 2
36572: PPUSH
36573: LD_VAR 0 4
36577: PPUSH
36578: LD_VAR 0 5
36582: PPUSH
36583: LD_INT 12
36585: PPUSH
36586: CALL 36653 0 4
// if cmd = 256 then
36590: LD_VAR 0 1
36594: PUSH
36595: LD_INT 256
36597: EQUAL
36598: IFFALSE 36619
// SetFactoryWaypoint ( unit , x , y ) ;
36600: LD_VAR 0 2
36604: PPUSH
36605: LD_VAR 0 4
36609: PPUSH
36610: LD_VAR 0 5
36614: PPUSH
36615: CALL 34600 0 3
// if cmd = 257 then
36619: LD_VAR 0 1
36623: PUSH
36624: LD_INT 257
36626: EQUAL
36627: IFFALSE 36648
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36629: LD_VAR 0 2
36633: PPUSH
36634: LD_VAR 0 4
36638: PPUSH
36639: LD_VAR 0 5
36643: PPUSH
36644: CALL 34962 0 3
// end ;
36648: LD_VAR 0 6
36652: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36653: LD_INT 0
36655: PPUSH
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36664: LD_VAR 0 1
36668: NOT
36669: PUSH
36670: LD_VAR 0 2
36674: PPUSH
36675: LD_VAR 0 3
36679: PPUSH
36680: CALL_OW 488
36684: NOT
36685: OR
36686: PUSH
36687: LD_VAR 0 4
36691: NOT
36692: OR
36693: IFFALSE 36697
// exit ;
36695: GO 37037
// list := [ ] ;
36697: LD_ADDR_VAR 0 13
36701: PUSH
36702: EMPTY
36703: ST_TO_ADDR
// if x - r < 0 then
36704: LD_VAR 0 2
36708: PUSH
36709: LD_VAR 0 4
36713: MINUS
36714: PUSH
36715: LD_INT 0
36717: LESS
36718: IFFALSE 36730
// min_x := 0 else
36720: LD_ADDR_VAR 0 7
36724: PUSH
36725: LD_INT 0
36727: ST_TO_ADDR
36728: GO 36746
// min_x := x - r ;
36730: LD_ADDR_VAR 0 7
36734: PUSH
36735: LD_VAR 0 2
36739: PUSH
36740: LD_VAR 0 4
36744: MINUS
36745: ST_TO_ADDR
// if y - r < 0 then
36746: LD_VAR 0 3
36750: PUSH
36751: LD_VAR 0 4
36755: MINUS
36756: PUSH
36757: LD_INT 0
36759: LESS
36760: IFFALSE 36772
// min_y := 0 else
36762: LD_ADDR_VAR 0 8
36766: PUSH
36767: LD_INT 0
36769: ST_TO_ADDR
36770: GO 36788
// min_y := y - r ;
36772: LD_ADDR_VAR 0 8
36776: PUSH
36777: LD_VAR 0 3
36781: PUSH
36782: LD_VAR 0 4
36786: MINUS
36787: ST_TO_ADDR
// max_x := x + r ;
36788: LD_ADDR_VAR 0 9
36792: PUSH
36793: LD_VAR 0 2
36797: PUSH
36798: LD_VAR 0 4
36802: PLUS
36803: ST_TO_ADDR
// max_y := y + r ;
36804: LD_ADDR_VAR 0 10
36808: PUSH
36809: LD_VAR 0 3
36813: PUSH
36814: LD_VAR 0 4
36818: PLUS
36819: ST_TO_ADDR
// for _x = min_x to max_x do
36820: LD_ADDR_VAR 0 11
36824: PUSH
36825: DOUBLE
36826: LD_VAR 0 7
36830: DEC
36831: ST_TO_ADDR
36832: LD_VAR 0 9
36836: PUSH
36837: FOR_TO
36838: IFFALSE 36955
// for _y = min_y to max_y do
36840: LD_ADDR_VAR 0 12
36844: PUSH
36845: DOUBLE
36846: LD_VAR 0 8
36850: DEC
36851: ST_TO_ADDR
36852: LD_VAR 0 10
36856: PUSH
36857: FOR_TO
36858: IFFALSE 36951
// begin if not ValidHex ( _x , _y ) then
36860: LD_VAR 0 11
36864: PPUSH
36865: LD_VAR 0 12
36869: PPUSH
36870: CALL_OW 488
36874: NOT
36875: IFFALSE 36879
// continue ;
36877: GO 36857
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36879: LD_VAR 0 11
36883: PPUSH
36884: LD_VAR 0 12
36888: PPUSH
36889: CALL_OW 351
36893: PUSH
36894: LD_VAR 0 11
36898: PPUSH
36899: LD_VAR 0 12
36903: PPUSH
36904: CALL_OW 554
36908: AND
36909: IFFALSE 36949
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36911: LD_ADDR_VAR 0 13
36915: PUSH
36916: LD_VAR 0 13
36920: PPUSH
36921: LD_VAR 0 13
36925: PUSH
36926: LD_INT 1
36928: PLUS
36929: PPUSH
36930: LD_VAR 0 11
36934: PUSH
36935: LD_VAR 0 12
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PPUSH
36944: CALL_OW 2
36948: ST_TO_ADDR
// end ;
36949: GO 36857
36951: POP
36952: POP
36953: GO 36837
36955: POP
36956: POP
// if not list then
36957: LD_VAR 0 13
36961: NOT
36962: IFFALSE 36966
// exit ;
36964: GO 37037
// for i in list do
36966: LD_ADDR_VAR 0 6
36970: PUSH
36971: LD_VAR 0 13
36975: PUSH
36976: FOR_IN
36977: IFFALSE 37035
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36979: LD_VAR 0 1
36983: PPUSH
36984: LD_STRING M
36986: PUSH
36987: LD_VAR 0 6
36991: PUSH
36992: LD_INT 1
36994: ARRAY
36995: PUSH
36996: LD_VAR 0 6
37000: PUSH
37001: LD_INT 2
37003: ARRAY
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: PUSH
37026: EMPTY
37027: LIST
37028: PPUSH
37029: CALL_OW 447
37033: GO 36976
37035: POP
37036: POP
// end ;
37037: LD_VAR 0 5
37041: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37042: LD_EXP 99
37046: NOT
37047: IFFALSE 37097
37049: GO 37051
37051: DISABLE
// begin initHack := true ;
37052: LD_ADDR_EXP 99
37056: PUSH
37057: LD_INT 1
37059: ST_TO_ADDR
// hackTanks := [ ] ;
37060: LD_ADDR_EXP 100
37064: PUSH
37065: EMPTY
37066: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37067: LD_ADDR_EXP 101
37071: PUSH
37072: EMPTY
37073: ST_TO_ADDR
// hackLimit := 3 ;
37074: LD_ADDR_EXP 102
37078: PUSH
37079: LD_INT 3
37081: ST_TO_ADDR
// hackDist := 12 ;
37082: LD_ADDR_EXP 103
37086: PUSH
37087: LD_INT 12
37089: ST_TO_ADDR
// hackCounter := [ ] ;
37090: LD_ADDR_EXP 104
37094: PUSH
37095: EMPTY
37096: ST_TO_ADDR
// end ;
37097: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37098: LD_EXP 99
37102: PUSH
37103: LD_INT 34
37105: PUSH
37106: LD_INT 99
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PPUSH
37113: CALL_OW 69
37117: AND
37118: IFFALSE 37371
37120: GO 37122
37122: DISABLE
37123: LD_INT 0
37125: PPUSH
37126: PPUSH
// begin enable ;
37127: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37128: LD_ADDR_VAR 0 1
37132: PUSH
37133: LD_INT 34
37135: PUSH
37136: LD_INT 99
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PPUSH
37143: CALL_OW 69
37147: PUSH
37148: FOR_IN
37149: IFFALSE 37369
// begin if not i in hackTanks then
37151: LD_VAR 0 1
37155: PUSH
37156: LD_EXP 100
37160: IN
37161: NOT
37162: IFFALSE 37245
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37164: LD_ADDR_EXP 100
37168: PUSH
37169: LD_EXP 100
37173: PPUSH
37174: LD_EXP 100
37178: PUSH
37179: LD_INT 1
37181: PLUS
37182: PPUSH
37183: LD_VAR 0 1
37187: PPUSH
37188: CALL_OW 1
37192: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37193: LD_ADDR_EXP 101
37197: PUSH
37198: LD_EXP 101
37202: PPUSH
37203: LD_EXP 101
37207: PUSH
37208: LD_INT 1
37210: PLUS
37211: PPUSH
37212: EMPTY
37213: PPUSH
37214: CALL_OW 1
37218: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37219: LD_ADDR_EXP 104
37223: PUSH
37224: LD_EXP 104
37228: PPUSH
37229: LD_EXP 104
37233: PUSH
37234: LD_INT 1
37236: PLUS
37237: PPUSH
37238: EMPTY
37239: PPUSH
37240: CALL_OW 1
37244: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37245: LD_VAR 0 1
37249: PPUSH
37250: CALL_OW 302
37254: NOT
37255: IFFALSE 37268
// begin HackUnlinkAll ( i ) ;
37257: LD_VAR 0 1
37261: PPUSH
37262: CALL 37374 0 1
// continue ;
37266: GO 37148
// end ; HackCheckCapturedStatus ( i ) ;
37268: LD_VAR 0 1
37272: PPUSH
37273: CALL 37817 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37277: LD_ADDR_VAR 0 2
37281: PUSH
37282: LD_INT 81
37284: PUSH
37285: LD_VAR 0 1
37289: PPUSH
37290: CALL_OW 255
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 33
37301: PUSH
37302: LD_INT 3
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 91
37311: PUSH
37312: LD_VAR 0 1
37316: PUSH
37317: LD_EXP 103
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 50
37329: PUSH
37330: EMPTY
37331: LIST
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: PPUSH
37339: CALL_OW 69
37343: ST_TO_ADDR
// if not tmp then
37344: LD_VAR 0 2
37348: NOT
37349: IFFALSE 37353
// continue ;
37351: GO 37148
// HackLink ( i , tmp ) ;
37353: LD_VAR 0 1
37357: PPUSH
37358: LD_VAR 0 2
37362: PPUSH
37363: CALL 37510 0 2
// end ;
37367: GO 37148
37369: POP
37370: POP
// end ;
37371: PPOPN 2
37373: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37374: LD_INT 0
37376: PPUSH
37377: PPUSH
37378: PPUSH
// if not hack in hackTanks then
37379: LD_VAR 0 1
37383: PUSH
37384: LD_EXP 100
37388: IN
37389: NOT
37390: IFFALSE 37394
// exit ;
37392: GO 37505
// index := GetElementIndex ( hackTanks , hack ) ;
37394: LD_ADDR_VAR 0 4
37398: PUSH
37399: LD_EXP 100
37403: PPUSH
37404: LD_VAR 0 1
37408: PPUSH
37409: CALL 45122 0 2
37413: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37414: LD_EXP 101
37418: PUSH
37419: LD_VAR 0 4
37423: ARRAY
37424: IFFALSE 37505
// begin for i in hackTanksCaptured [ index ] do
37426: LD_ADDR_VAR 0 3
37430: PUSH
37431: LD_EXP 101
37435: PUSH
37436: LD_VAR 0 4
37440: ARRAY
37441: PUSH
37442: FOR_IN
37443: IFFALSE 37469
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37445: LD_VAR 0 3
37449: PUSH
37450: LD_INT 1
37452: ARRAY
37453: PPUSH
37454: LD_VAR 0 3
37458: PUSH
37459: LD_INT 2
37461: ARRAY
37462: PPUSH
37463: CALL_OW 235
37467: GO 37442
37469: POP
37470: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37471: LD_ADDR_EXP 101
37475: PUSH
37476: LD_EXP 101
37480: PPUSH
37481: LD_VAR 0 4
37485: PPUSH
37486: EMPTY
37487: PPUSH
37488: CALL_OW 1
37492: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37493: LD_VAR 0 1
37497: PPUSH
37498: LD_INT 0
37500: PPUSH
37501: CALL_OW 505
// end ; end ;
37505: LD_VAR 0 2
37509: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37510: LD_INT 0
37512: PPUSH
37513: PPUSH
37514: PPUSH
// if not hack in hackTanks or not vehicles then
37515: LD_VAR 0 1
37519: PUSH
37520: LD_EXP 100
37524: IN
37525: NOT
37526: PUSH
37527: LD_VAR 0 2
37531: NOT
37532: OR
37533: IFFALSE 37537
// exit ;
37535: GO 37812
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37537: LD_ADDR_VAR 0 2
37541: PUSH
37542: LD_VAR 0 1
37546: PPUSH
37547: LD_VAR 0 2
37551: PPUSH
37552: LD_INT 1
37554: PPUSH
37555: LD_INT 1
37557: PPUSH
37558: CALL 45772 0 4
37562: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37563: LD_ADDR_VAR 0 5
37567: PUSH
37568: LD_EXP 100
37572: PPUSH
37573: LD_VAR 0 1
37577: PPUSH
37578: CALL 45122 0 2
37582: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37583: LD_EXP 101
37587: PUSH
37588: LD_VAR 0 5
37592: ARRAY
37593: PUSH
37594: LD_EXP 102
37598: LESS
37599: IFFALSE 37788
// begin for i := 1 to vehicles do
37601: LD_ADDR_VAR 0 4
37605: PUSH
37606: DOUBLE
37607: LD_INT 1
37609: DEC
37610: ST_TO_ADDR
37611: LD_VAR 0 2
37615: PUSH
37616: FOR_TO
37617: IFFALSE 37786
// begin if hackTanksCaptured [ index ] = hackLimit then
37619: LD_EXP 101
37623: PUSH
37624: LD_VAR 0 5
37628: ARRAY
37629: PUSH
37630: LD_EXP 102
37634: EQUAL
37635: IFFALSE 37639
// break ;
37637: GO 37786
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37639: LD_ADDR_EXP 104
37643: PUSH
37644: LD_EXP 104
37648: PPUSH
37649: LD_VAR 0 5
37653: PPUSH
37654: LD_EXP 104
37658: PUSH
37659: LD_VAR 0 5
37663: ARRAY
37664: PUSH
37665: LD_INT 1
37667: PLUS
37668: PPUSH
37669: CALL_OW 1
37673: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37674: LD_ADDR_EXP 101
37678: PUSH
37679: LD_EXP 101
37683: PPUSH
37684: LD_VAR 0 5
37688: PUSH
37689: LD_EXP 101
37693: PUSH
37694: LD_VAR 0 5
37698: ARRAY
37699: PUSH
37700: LD_INT 1
37702: PLUS
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PPUSH
37708: LD_VAR 0 2
37712: PUSH
37713: LD_VAR 0 4
37717: ARRAY
37718: PUSH
37719: LD_VAR 0 2
37723: PUSH
37724: LD_VAR 0 4
37728: ARRAY
37729: PPUSH
37730: CALL_OW 255
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PPUSH
37739: CALL 45337 0 3
37743: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37744: LD_VAR 0 2
37748: PUSH
37749: LD_VAR 0 4
37753: ARRAY
37754: PPUSH
37755: LD_VAR 0 1
37759: PPUSH
37760: CALL_OW 255
37764: PPUSH
37765: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37769: LD_VAR 0 2
37773: PUSH
37774: LD_VAR 0 4
37778: ARRAY
37779: PPUSH
37780: CALL_OW 141
// end ;
37784: GO 37616
37786: POP
37787: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37788: LD_VAR 0 1
37792: PPUSH
37793: LD_EXP 101
37797: PUSH
37798: LD_VAR 0 5
37802: ARRAY
37803: PUSH
37804: LD_INT 0
37806: PLUS
37807: PPUSH
37808: CALL_OW 505
// end ;
37812: LD_VAR 0 3
37816: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37817: LD_INT 0
37819: PPUSH
37820: PPUSH
37821: PPUSH
37822: PPUSH
// if not hack in hackTanks then
37823: LD_VAR 0 1
37827: PUSH
37828: LD_EXP 100
37832: IN
37833: NOT
37834: IFFALSE 37838
// exit ;
37836: GO 38078
// index := GetElementIndex ( hackTanks , hack ) ;
37838: LD_ADDR_VAR 0 4
37842: PUSH
37843: LD_EXP 100
37847: PPUSH
37848: LD_VAR 0 1
37852: PPUSH
37853: CALL 45122 0 2
37857: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37858: LD_ADDR_VAR 0 3
37862: PUSH
37863: DOUBLE
37864: LD_EXP 101
37868: PUSH
37869: LD_VAR 0 4
37873: ARRAY
37874: INC
37875: ST_TO_ADDR
37876: LD_INT 1
37878: PUSH
37879: FOR_DOWNTO
37880: IFFALSE 38052
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37882: LD_ADDR_VAR 0 5
37886: PUSH
37887: LD_EXP 101
37891: PUSH
37892: LD_VAR 0 4
37896: ARRAY
37897: PUSH
37898: LD_VAR 0 3
37902: ARRAY
37903: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37904: LD_VAR 0 5
37908: PUSH
37909: LD_INT 1
37911: ARRAY
37912: PPUSH
37913: CALL_OW 302
37917: NOT
37918: PUSH
37919: LD_VAR 0 5
37923: PUSH
37924: LD_INT 1
37926: ARRAY
37927: PPUSH
37928: CALL_OW 255
37932: PUSH
37933: LD_VAR 0 1
37937: PPUSH
37938: CALL_OW 255
37942: NONEQUAL
37943: OR
37944: IFFALSE 38050
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37946: LD_VAR 0 5
37950: PUSH
37951: LD_INT 1
37953: ARRAY
37954: PPUSH
37955: CALL_OW 305
37959: PUSH
37960: LD_VAR 0 5
37964: PUSH
37965: LD_INT 1
37967: ARRAY
37968: PPUSH
37969: CALL_OW 255
37973: PUSH
37974: LD_VAR 0 1
37978: PPUSH
37979: CALL_OW 255
37983: EQUAL
37984: AND
37985: IFFALSE 38009
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37987: LD_VAR 0 5
37991: PUSH
37992: LD_INT 1
37994: ARRAY
37995: PPUSH
37996: LD_VAR 0 5
38000: PUSH
38001: LD_INT 2
38003: ARRAY
38004: PPUSH
38005: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38009: LD_ADDR_EXP 101
38013: PUSH
38014: LD_EXP 101
38018: PPUSH
38019: LD_VAR 0 4
38023: PPUSH
38024: LD_EXP 101
38028: PUSH
38029: LD_VAR 0 4
38033: ARRAY
38034: PPUSH
38035: LD_VAR 0 3
38039: PPUSH
38040: CALL_OW 3
38044: PPUSH
38045: CALL_OW 1
38049: ST_TO_ADDR
// end ; end ;
38050: GO 37879
38052: POP
38053: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38054: LD_VAR 0 1
38058: PPUSH
38059: LD_EXP 101
38063: PUSH
38064: LD_VAR 0 4
38068: ARRAY
38069: PUSH
38070: LD_INT 0
38072: PLUS
38073: PPUSH
38074: CALL_OW 505
// end ;
38078: LD_VAR 0 2
38082: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38083: LD_INT 0
38085: PPUSH
38086: PPUSH
38087: PPUSH
38088: PPUSH
// if not hack in hackTanks then
38089: LD_VAR 0 1
38093: PUSH
38094: LD_EXP 100
38098: IN
38099: NOT
38100: IFFALSE 38104
// exit ;
38102: GO 38189
// index := GetElementIndex ( hackTanks , hack ) ;
38104: LD_ADDR_VAR 0 5
38108: PUSH
38109: LD_EXP 100
38113: PPUSH
38114: LD_VAR 0 1
38118: PPUSH
38119: CALL 45122 0 2
38123: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38124: LD_ADDR_VAR 0 4
38128: PUSH
38129: DOUBLE
38130: LD_INT 1
38132: DEC
38133: ST_TO_ADDR
38134: LD_EXP 101
38138: PUSH
38139: LD_VAR 0 5
38143: ARRAY
38144: PUSH
38145: FOR_TO
38146: IFFALSE 38187
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38148: LD_EXP 101
38152: PUSH
38153: LD_VAR 0 5
38157: ARRAY
38158: PUSH
38159: LD_VAR 0 4
38163: ARRAY
38164: PUSH
38165: LD_INT 1
38167: ARRAY
38168: PUSH
38169: LD_VAR 0 2
38173: EQUAL
38174: IFFALSE 38185
// KillUnit ( vehicle ) ;
38176: LD_VAR 0 2
38180: PPUSH
38181: CALL_OW 66
38185: GO 38145
38187: POP
38188: POP
// end ;
38189: LD_VAR 0 3
38193: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38194: LD_EXP 105
38198: NOT
38199: IFFALSE 38234
38201: GO 38203
38203: DISABLE
// begin initMiner := true ;
38204: LD_ADDR_EXP 105
38208: PUSH
38209: LD_INT 1
38211: ST_TO_ADDR
// minersList := [ ] ;
38212: LD_ADDR_EXP 106
38216: PUSH
38217: EMPTY
38218: ST_TO_ADDR
// minerMinesList := [ ] ;
38219: LD_ADDR_EXP 107
38223: PUSH
38224: EMPTY
38225: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38226: LD_ADDR_EXP 108
38230: PUSH
38231: LD_INT 5
38233: ST_TO_ADDR
// end ;
38234: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38235: LD_EXP 105
38239: PUSH
38240: LD_INT 34
38242: PUSH
38243: LD_INT 81
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PPUSH
38250: CALL_OW 69
38254: AND
38255: IFFALSE 38716
38257: GO 38259
38259: DISABLE
38260: LD_INT 0
38262: PPUSH
38263: PPUSH
38264: PPUSH
38265: PPUSH
// begin enable ;
38266: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38267: LD_ADDR_VAR 0 1
38271: PUSH
38272: LD_INT 34
38274: PUSH
38275: LD_INT 81
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PPUSH
38282: CALL_OW 69
38286: PUSH
38287: FOR_IN
38288: IFFALSE 38360
// begin if not i in minersList then
38290: LD_VAR 0 1
38294: PUSH
38295: LD_EXP 106
38299: IN
38300: NOT
38301: IFFALSE 38358
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38303: LD_ADDR_EXP 106
38307: PUSH
38308: LD_EXP 106
38312: PPUSH
38313: LD_EXP 106
38317: PUSH
38318: LD_INT 1
38320: PLUS
38321: PPUSH
38322: LD_VAR 0 1
38326: PPUSH
38327: CALL_OW 1
38331: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38332: LD_ADDR_EXP 107
38336: PUSH
38337: LD_EXP 107
38341: PPUSH
38342: LD_EXP 107
38346: PUSH
38347: LD_INT 1
38349: PLUS
38350: PPUSH
38351: EMPTY
38352: PPUSH
38353: CALL_OW 1
38357: ST_TO_ADDR
// end end ;
38358: GO 38287
38360: POP
38361: POP
// for i := minerMinesList downto 1 do
38362: LD_ADDR_VAR 0 1
38366: PUSH
38367: DOUBLE
38368: LD_EXP 107
38372: INC
38373: ST_TO_ADDR
38374: LD_INT 1
38376: PUSH
38377: FOR_DOWNTO
38378: IFFALSE 38714
// begin if IsLive ( minersList [ i ] ) then
38380: LD_EXP 106
38384: PUSH
38385: LD_VAR 0 1
38389: ARRAY
38390: PPUSH
38391: CALL_OW 300
38395: IFFALSE 38423
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38397: LD_EXP 106
38401: PUSH
38402: LD_VAR 0 1
38406: ARRAY
38407: PPUSH
38408: LD_EXP 107
38412: PUSH
38413: LD_VAR 0 1
38417: ARRAY
38418: PPUSH
38419: CALL_OW 505
// if not minerMinesList [ i ] then
38423: LD_EXP 107
38427: PUSH
38428: LD_VAR 0 1
38432: ARRAY
38433: NOT
38434: IFFALSE 38438
// continue ;
38436: GO 38377
// for j := minerMinesList [ i ] downto 1 do
38438: LD_ADDR_VAR 0 2
38442: PUSH
38443: DOUBLE
38444: LD_EXP 107
38448: PUSH
38449: LD_VAR 0 1
38453: ARRAY
38454: INC
38455: ST_TO_ADDR
38456: LD_INT 1
38458: PUSH
38459: FOR_DOWNTO
38460: IFFALSE 38710
// begin side := GetSide ( minersList [ i ] ) ;
38462: LD_ADDR_VAR 0 3
38466: PUSH
38467: LD_EXP 106
38471: PUSH
38472: LD_VAR 0 1
38476: ARRAY
38477: PPUSH
38478: CALL_OW 255
38482: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38483: LD_ADDR_VAR 0 4
38487: PUSH
38488: LD_EXP 107
38492: PUSH
38493: LD_VAR 0 1
38497: ARRAY
38498: PUSH
38499: LD_VAR 0 2
38503: ARRAY
38504: PUSH
38505: LD_INT 1
38507: ARRAY
38508: PPUSH
38509: LD_EXP 107
38513: PUSH
38514: LD_VAR 0 1
38518: ARRAY
38519: PUSH
38520: LD_VAR 0 2
38524: ARRAY
38525: PUSH
38526: LD_INT 2
38528: ARRAY
38529: PPUSH
38530: CALL_OW 428
38534: ST_TO_ADDR
// if not tmp then
38535: LD_VAR 0 4
38539: NOT
38540: IFFALSE 38544
// continue ;
38542: GO 38459
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38544: LD_VAR 0 4
38548: PUSH
38549: LD_INT 81
38551: PUSH
38552: LD_VAR 0 3
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PPUSH
38561: CALL_OW 69
38565: IN
38566: PUSH
38567: LD_EXP 107
38571: PUSH
38572: LD_VAR 0 1
38576: ARRAY
38577: PUSH
38578: LD_VAR 0 2
38582: ARRAY
38583: PUSH
38584: LD_INT 1
38586: ARRAY
38587: PPUSH
38588: LD_EXP 107
38592: PUSH
38593: LD_VAR 0 1
38597: ARRAY
38598: PUSH
38599: LD_VAR 0 2
38603: ARRAY
38604: PUSH
38605: LD_INT 2
38607: ARRAY
38608: PPUSH
38609: CALL_OW 458
38613: AND
38614: IFFALSE 38708
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38616: LD_EXP 107
38620: PUSH
38621: LD_VAR 0 1
38625: ARRAY
38626: PUSH
38627: LD_VAR 0 2
38631: ARRAY
38632: PUSH
38633: LD_INT 1
38635: ARRAY
38636: PPUSH
38637: LD_EXP 107
38641: PUSH
38642: LD_VAR 0 1
38646: ARRAY
38647: PUSH
38648: LD_VAR 0 2
38652: ARRAY
38653: PUSH
38654: LD_INT 2
38656: ARRAY
38657: PPUSH
38658: LD_VAR 0 3
38662: PPUSH
38663: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38667: LD_ADDR_EXP 107
38671: PUSH
38672: LD_EXP 107
38676: PPUSH
38677: LD_VAR 0 1
38681: PPUSH
38682: LD_EXP 107
38686: PUSH
38687: LD_VAR 0 1
38691: ARRAY
38692: PPUSH
38693: LD_VAR 0 2
38697: PPUSH
38698: CALL_OW 3
38702: PPUSH
38703: CALL_OW 1
38707: ST_TO_ADDR
// end ; end ;
38708: GO 38459
38710: POP
38711: POP
// end ;
38712: GO 38377
38714: POP
38715: POP
// end ;
38716: PPOPN 4
38718: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38719: LD_INT 0
38721: PPUSH
38722: PPUSH
// result := false ;
38723: LD_ADDR_VAR 0 4
38727: PUSH
38728: LD_INT 0
38730: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38731: LD_VAR 0 1
38735: PPUSH
38736: CALL_OW 264
38740: PUSH
38741: LD_INT 81
38743: EQUAL
38744: NOT
38745: IFFALSE 38749
// exit ;
38747: GO 38989
// index := GetElementIndex ( minersList , unit ) ;
38749: LD_ADDR_VAR 0 5
38753: PUSH
38754: LD_EXP 106
38758: PPUSH
38759: LD_VAR 0 1
38763: PPUSH
38764: CALL 45122 0 2
38768: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38769: LD_EXP 107
38773: PUSH
38774: LD_VAR 0 5
38778: ARRAY
38779: PUSH
38780: LD_EXP 108
38784: GREATEREQUAL
38785: IFFALSE 38789
// exit ;
38787: GO 38989
// ComMoveXY ( unit , x , y ) ;
38789: LD_VAR 0 1
38793: PPUSH
38794: LD_VAR 0 2
38798: PPUSH
38799: LD_VAR 0 3
38803: PPUSH
38804: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38808: LD_INT 35
38810: PPUSH
38811: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38815: LD_VAR 0 1
38819: PPUSH
38820: LD_VAR 0 2
38824: PPUSH
38825: LD_VAR 0 3
38829: PPUSH
38830: CALL 76477 0 3
38834: NOT
38835: PUSH
38836: LD_VAR 0 1
38840: PPUSH
38841: CALL_OW 314
38845: AND
38846: IFFALSE 38850
// exit ;
38848: GO 38989
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38850: LD_VAR 0 2
38854: PPUSH
38855: LD_VAR 0 3
38859: PPUSH
38860: CALL_OW 428
38864: PUSH
38865: LD_VAR 0 1
38869: EQUAL
38870: PUSH
38871: LD_VAR 0 1
38875: PPUSH
38876: CALL_OW 314
38880: NOT
38881: AND
38882: IFFALSE 38808
// PlaySoundXY ( x , y , PlantMine ) ;
38884: LD_VAR 0 2
38888: PPUSH
38889: LD_VAR 0 3
38893: PPUSH
38894: LD_STRING PlantMine
38896: PPUSH
38897: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38901: LD_VAR 0 2
38905: PPUSH
38906: LD_VAR 0 3
38910: PPUSH
38911: LD_VAR 0 1
38915: PPUSH
38916: CALL_OW 255
38920: PPUSH
38921: LD_INT 0
38923: PPUSH
38924: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38928: LD_ADDR_EXP 107
38932: PUSH
38933: LD_EXP 107
38937: PPUSH
38938: LD_VAR 0 5
38942: PUSH
38943: LD_EXP 107
38947: PUSH
38948: LD_VAR 0 5
38952: ARRAY
38953: PUSH
38954: LD_INT 1
38956: PLUS
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PPUSH
38962: LD_VAR 0 2
38966: PUSH
38967: LD_VAR 0 3
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PPUSH
38976: CALL 45337 0 3
38980: ST_TO_ADDR
// result := true ;
38981: LD_ADDR_VAR 0 4
38985: PUSH
38986: LD_INT 1
38988: ST_TO_ADDR
// end ;
38989: LD_VAR 0 4
38993: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38994: LD_INT 0
38996: PPUSH
38997: PPUSH
38998: PPUSH
// if not unit in minersList then
38999: LD_VAR 0 1
39003: PUSH
39004: LD_EXP 106
39008: IN
39009: NOT
39010: IFFALSE 39014
// exit ;
39012: GO 39406
// index := GetElementIndex ( minersList , unit ) ;
39014: LD_ADDR_VAR 0 6
39018: PUSH
39019: LD_EXP 106
39023: PPUSH
39024: LD_VAR 0 1
39028: PPUSH
39029: CALL 45122 0 2
39033: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39034: LD_ADDR_VAR 0 5
39038: PUSH
39039: DOUBLE
39040: LD_EXP 107
39044: PUSH
39045: LD_VAR 0 6
39049: ARRAY
39050: INC
39051: ST_TO_ADDR
39052: LD_INT 1
39054: PUSH
39055: FOR_DOWNTO
39056: IFFALSE 39217
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39058: LD_EXP 107
39062: PUSH
39063: LD_VAR 0 6
39067: ARRAY
39068: PUSH
39069: LD_VAR 0 5
39073: ARRAY
39074: PUSH
39075: LD_INT 1
39077: ARRAY
39078: PUSH
39079: LD_VAR 0 2
39083: EQUAL
39084: PUSH
39085: LD_EXP 107
39089: PUSH
39090: LD_VAR 0 6
39094: ARRAY
39095: PUSH
39096: LD_VAR 0 5
39100: ARRAY
39101: PUSH
39102: LD_INT 2
39104: ARRAY
39105: PUSH
39106: LD_VAR 0 3
39110: EQUAL
39111: AND
39112: IFFALSE 39215
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39114: LD_EXP 107
39118: PUSH
39119: LD_VAR 0 6
39123: ARRAY
39124: PUSH
39125: LD_VAR 0 5
39129: ARRAY
39130: PUSH
39131: LD_INT 1
39133: ARRAY
39134: PPUSH
39135: LD_EXP 107
39139: PUSH
39140: LD_VAR 0 6
39144: ARRAY
39145: PUSH
39146: LD_VAR 0 5
39150: ARRAY
39151: PUSH
39152: LD_INT 2
39154: ARRAY
39155: PPUSH
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 255
39165: PPUSH
39166: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39170: LD_ADDR_EXP 107
39174: PUSH
39175: LD_EXP 107
39179: PPUSH
39180: LD_VAR 0 6
39184: PPUSH
39185: LD_EXP 107
39189: PUSH
39190: LD_VAR 0 6
39194: ARRAY
39195: PPUSH
39196: LD_VAR 0 5
39200: PPUSH
39201: CALL_OW 3
39205: PPUSH
39206: CALL_OW 1
39210: ST_TO_ADDR
// exit ;
39211: POP
39212: POP
39213: GO 39406
// end ; end ;
39215: GO 39055
39217: POP
39218: POP
// for i := minerMinesList [ index ] downto 1 do
39219: LD_ADDR_VAR 0 5
39223: PUSH
39224: DOUBLE
39225: LD_EXP 107
39229: PUSH
39230: LD_VAR 0 6
39234: ARRAY
39235: INC
39236: ST_TO_ADDR
39237: LD_INT 1
39239: PUSH
39240: FOR_DOWNTO
39241: IFFALSE 39404
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39243: LD_EXP 107
39247: PUSH
39248: LD_VAR 0 6
39252: ARRAY
39253: PUSH
39254: LD_VAR 0 5
39258: ARRAY
39259: PUSH
39260: LD_INT 1
39262: ARRAY
39263: PPUSH
39264: LD_EXP 107
39268: PUSH
39269: LD_VAR 0 6
39273: ARRAY
39274: PUSH
39275: LD_VAR 0 5
39279: ARRAY
39280: PUSH
39281: LD_INT 2
39283: ARRAY
39284: PPUSH
39285: LD_VAR 0 2
39289: PPUSH
39290: LD_VAR 0 3
39294: PPUSH
39295: CALL_OW 298
39299: PUSH
39300: LD_INT 6
39302: LESS
39303: IFFALSE 39402
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39305: LD_EXP 107
39309: PUSH
39310: LD_VAR 0 6
39314: ARRAY
39315: PUSH
39316: LD_VAR 0 5
39320: ARRAY
39321: PUSH
39322: LD_INT 1
39324: ARRAY
39325: PPUSH
39326: LD_EXP 107
39330: PUSH
39331: LD_VAR 0 6
39335: ARRAY
39336: PUSH
39337: LD_VAR 0 5
39341: ARRAY
39342: PUSH
39343: LD_INT 2
39345: ARRAY
39346: PPUSH
39347: LD_VAR 0 1
39351: PPUSH
39352: CALL_OW 255
39356: PPUSH
39357: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39361: LD_ADDR_EXP 107
39365: PUSH
39366: LD_EXP 107
39370: PPUSH
39371: LD_VAR 0 6
39375: PPUSH
39376: LD_EXP 107
39380: PUSH
39381: LD_VAR 0 6
39385: ARRAY
39386: PPUSH
39387: LD_VAR 0 5
39391: PPUSH
39392: CALL_OW 3
39396: PPUSH
39397: CALL_OW 1
39401: ST_TO_ADDR
// end ; end ;
39402: GO 39240
39404: POP
39405: POP
// end ;
39406: LD_VAR 0 4
39410: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39411: LD_INT 0
39413: PPUSH
39414: PPUSH
39415: PPUSH
39416: PPUSH
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
39421: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 264
39431: PUSH
39432: LD_INT 81
39434: EQUAL
39435: NOT
39436: PUSH
39437: LD_VAR 0 1
39441: PUSH
39442: LD_EXP 106
39446: IN
39447: NOT
39448: OR
39449: IFFALSE 39453
// exit ;
39451: GO 39775
// index := GetElementIndex ( minersList , unit ) ;
39453: LD_ADDR_VAR 0 6
39457: PUSH
39458: LD_EXP 106
39462: PPUSH
39463: LD_VAR 0 1
39467: PPUSH
39468: CALL 45122 0 2
39472: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39473: LD_ADDR_VAR 0 8
39477: PUSH
39478: LD_EXP 108
39482: PUSH
39483: LD_EXP 107
39487: PUSH
39488: LD_VAR 0 6
39492: ARRAY
39493: MINUS
39494: ST_TO_ADDR
// if not minesFreeAmount then
39495: LD_VAR 0 8
39499: NOT
39500: IFFALSE 39504
// exit ;
39502: GO 39775
// tmp := [ ] ;
39504: LD_ADDR_VAR 0 7
39508: PUSH
39509: EMPTY
39510: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39511: LD_ADDR_VAR 0 5
39515: PUSH
39516: DOUBLE
39517: LD_INT 1
39519: DEC
39520: ST_TO_ADDR
39521: LD_VAR 0 8
39525: PUSH
39526: FOR_TO
39527: IFFALSE 39722
// begin _d := rand ( 0 , 5 ) ;
39529: LD_ADDR_VAR 0 11
39533: PUSH
39534: LD_INT 0
39536: PPUSH
39537: LD_INT 5
39539: PPUSH
39540: CALL_OW 12
39544: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39545: LD_ADDR_VAR 0 12
39549: PUSH
39550: LD_INT 2
39552: PPUSH
39553: LD_INT 6
39555: PPUSH
39556: CALL_OW 12
39560: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39561: LD_ADDR_VAR 0 9
39565: PUSH
39566: LD_VAR 0 2
39570: PPUSH
39571: LD_VAR 0 11
39575: PPUSH
39576: LD_VAR 0 12
39580: PPUSH
39581: CALL_OW 272
39585: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39586: LD_ADDR_VAR 0 10
39590: PUSH
39591: LD_VAR 0 3
39595: PPUSH
39596: LD_VAR 0 11
39600: PPUSH
39601: LD_VAR 0 12
39605: PPUSH
39606: CALL_OW 273
39610: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39611: LD_VAR 0 9
39615: PPUSH
39616: LD_VAR 0 10
39620: PPUSH
39621: CALL_OW 488
39625: PUSH
39626: LD_VAR 0 9
39630: PUSH
39631: LD_VAR 0 10
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_VAR 0 7
39644: IN
39645: NOT
39646: AND
39647: PUSH
39648: LD_VAR 0 9
39652: PPUSH
39653: LD_VAR 0 10
39657: PPUSH
39658: CALL_OW 458
39662: NOT
39663: AND
39664: IFFALSE 39706
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39666: LD_ADDR_VAR 0 7
39670: PUSH
39671: LD_VAR 0 7
39675: PPUSH
39676: LD_VAR 0 7
39680: PUSH
39681: LD_INT 1
39683: PLUS
39684: PPUSH
39685: LD_VAR 0 9
39689: PUSH
39690: LD_VAR 0 10
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PPUSH
39699: CALL_OW 1
39703: ST_TO_ADDR
39704: GO 39720
// i := i - 1 ;
39706: LD_ADDR_VAR 0 5
39710: PUSH
39711: LD_VAR 0 5
39715: PUSH
39716: LD_INT 1
39718: MINUS
39719: ST_TO_ADDR
// end ;
39720: GO 39526
39722: POP
39723: POP
// for i in tmp do
39724: LD_ADDR_VAR 0 5
39728: PUSH
39729: LD_VAR 0 7
39733: PUSH
39734: FOR_IN
39735: IFFALSE 39773
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39737: LD_VAR 0 1
39741: PPUSH
39742: LD_VAR 0 5
39746: PUSH
39747: LD_INT 1
39749: ARRAY
39750: PPUSH
39751: LD_VAR 0 5
39755: PUSH
39756: LD_INT 2
39758: ARRAY
39759: PPUSH
39760: CALL 38719 0 3
39764: NOT
39765: IFFALSE 39771
// exit ;
39767: POP
39768: POP
39769: GO 39775
39771: GO 39734
39773: POP
39774: POP
// end ;
39775: LD_VAR 0 4
39779: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39780: LD_INT 0
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
// if not GetClass ( unit ) = class_sniper then
39789: LD_VAR 0 1
39793: PPUSH
39794: CALL_OW 257
39798: PUSH
39799: LD_INT 5
39801: EQUAL
39802: NOT
39803: IFFALSE 39807
// exit ;
39805: GO 40195
// dist := 8 ;
39807: LD_ADDR_VAR 0 5
39811: PUSH
39812: LD_INT 8
39814: ST_TO_ADDR
// viewRange := 12 ;
39815: LD_ADDR_VAR 0 7
39819: PUSH
39820: LD_INT 12
39822: ST_TO_ADDR
// side := GetSide ( unit ) ;
39823: LD_ADDR_VAR 0 6
39827: PUSH
39828: LD_VAR 0 1
39832: PPUSH
39833: CALL_OW 255
39837: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39838: LD_INT 61
39840: PPUSH
39841: LD_VAR 0 6
39845: PPUSH
39846: CALL_OW 321
39850: PUSH
39851: LD_INT 2
39853: EQUAL
39854: IFFALSE 39864
// viewRange := 16 ;
39856: LD_ADDR_VAR 0 7
39860: PUSH
39861: LD_INT 16
39863: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39864: LD_VAR 0 1
39868: PPUSH
39869: LD_VAR 0 2
39873: PPUSH
39874: LD_VAR 0 3
39878: PPUSH
39879: CALL_OW 297
39883: PUSH
39884: LD_VAR 0 5
39888: GREATER
39889: IFFALSE 39968
// begin ComMoveXY ( unit , x , y ) ;
39891: LD_VAR 0 1
39895: PPUSH
39896: LD_VAR 0 2
39900: PPUSH
39901: LD_VAR 0 3
39905: PPUSH
39906: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39910: LD_INT 35
39912: PPUSH
39913: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39917: LD_VAR 0 1
39921: PPUSH
39922: LD_VAR 0 2
39926: PPUSH
39927: LD_VAR 0 3
39931: PPUSH
39932: CALL 76477 0 3
39936: NOT
39937: IFFALSE 39941
// exit ;
39939: GO 40195
// until GetDistUnitXY ( unit , x , y ) < dist ;
39941: LD_VAR 0 1
39945: PPUSH
39946: LD_VAR 0 2
39950: PPUSH
39951: LD_VAR 0 3
39955: PPUSH
39956: CALL_OW 297
39960: PUSH
39961: LD_VAR 0 5
39965: LESS
39966: IFFALSE 39910
// end ; ComTurnXY ( unit , x , y ) ;
39968: LD_VAR 0 1
39972: PPUSH
39973: LD_VAR 0 2
39977: PPUSH
39978: LD_VAR 0 3
39982: PPUSH
39983: CALL_OW 118
// wait ( 5 ) ;
39987: LD_INT 5
39989: PPUSH
39990: CALL_OW 67
// _d := GetDir ( unit ) ;
39994: LD_ADDR_VAR 0 10
39998: PUSH
39999: LD_VAR 0 1
40003: PPUSH
40004: CALL_OW 254
40008: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40009: LD_ADDR_VAR 0 8
40013: PUSH
40014: LD_VAR 0 1
40018: PPUSH
40019: CALL_OW 250
40023: PPUSH
40024: LD_VAR 0 10
40028: PPUSH
40029: LD_VAR 0 5
40033: PPUSH
40034: CALL_OW 272
40038: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40039: LD_ADDR_VAR 0 9
40043: PUSH
40044: LD_VAR 0 1
40048: PPUSH
40049: CALL_OW 251
40053: PPUSH
40054: LD_VAR 0 10
40058: PPUSH
40059: LD_VAR 0 5
40063: PPUSH
40064: CALL_OW 273
40068: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40069: LD_VAR 0 8
40073: PPUSH
40074: LD_VAR 0 9
40078: PPUSH
40079: CALL_OW 488
40083: NOT
40084: IFFALSE 40088
// exit ;
40086: GO 40195
// ComAnimCustom ( unit , 1 ) ;
40088: LD_VAR 0 1
40092: PPUSH
40093: LD_INT 1
40095: PPUSH
40096: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40100: LD_VAR 0 8
40104: PPUSH
40105: LD_VAR 0 9
40109: PPUSH
40110: LD_VAR 0 6
40114: PPUSH
40115: LD_VAR 0 7
40119: PPUSH
40120: CALL_OW 330
// repeat wait ( 1 ) ;
40124: LD_INT 1
40126: PPUSH
40127: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40131: LD_VAR 0 1
40135: PPUSH
40136: CALL_OW 316
40140: PUSH
40141: LD_VAR 0 1
40145: PPUSH
40146: CALL_OW 314
40150: OR
40151: PUSH
40152: LD_VAR 0 1
40156: PPUSH
40157: CALL_OW 302
40161: NOT
40162: OR
40163: PUSH
40164: LD_VAR 0 1
40168: PPUSH
40169: CALL_OW 301
40173: OR
40174: IFFALSE 40124
// RemoveSeeing ( _x , _y , side ) ;
40176: LD_VAR 0 8
40180: PPUSH
40181: LD_VAR 0 9
40185: PPUSH
40186: LD_VAR 0 6
40190: PPUSH
40191: CALL_OW 331
// end ; end_of_file
40195: LD_VAR 0 4
40199: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40200: LD_INT 0
40202: PPUSH
40203: PPUSH
// if exist_mode then
40204: LD_VAR 0 2
40208: IFFALSE 40233
// unit := CreateCharacter ( prefix & ident ) else
40210: LD_ADDR_VAR 0 5
40214: PUSH
40215: LD_VAR 0 3
40219: PUSH
40220: LD_VAR 0 1
40224: STR
40225: PPUSH
40226: CALL_OW 34
40230: ST_TO_ADDR
40231: GO 40248
// unit := NewCharacter ( ident ) ;
40233: LD_ADDR_VAR 0 5
40237: PUSH
40238: LD_VAR 0 1
40242: PPUSH
40243: CALL_OW 25
40247: ST_TO_ADDR
// result := unit ;
40248: LD_ADDR_VAR 0 4
40252: PUSH
40253: LD_VAR 0 5
40257: ST_TO_ADDR
// end ;
40258: LD_VAR 0 4
40262: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40263: LD_INT 0
40265: PPUSH
40266: PPUSH
// if not side or not nation then
40267: LD_VAR 0 1
40271: NOT
40272: PUSH
40273: LD_VAR 0 2
40277: NOT
40278: OR
40279: IFFALSE 40283
// exit ;
40281: GO 41051
// case nation of nation_american :
40283: LD_VAR 0 2
40287: PUSH
40288: LD_INT 1
40290: DOUBLE
40291: EQUAL
40292: IFTRUE 40296
40294: GO 40510
40296: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40297: LD_ADDR_VAR 0 4
40301: PUSH
40302: LD_INT 35
40304: PUSH
40305: LD_INT 45
40307: PUSH
40308: LD_INT 46
40310: PUSH
40311: LD_INT 47
40313: PUSH
40314: LD_INT 82
40316: PUSH
40317: LD_INT 83
40319: PUSH
40320: LD_INT 84
40322: PUSH
40323: LD_INT 85
40325: PUSH
40326: LD_INT 86
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: LD_INT 6
40337: PUSH
40338: LD_INT 15
40340: PUSH
40341: LD_INT 16
40343: PUSH
40344: LD_INT 7
40346: PUSH
40347: LD_INT 12
40349: PUSH
40350: LD_INT 13
40352: PUSH
40353: LD_INT 10
40355: PUSH
40356: LD_INT 14
40358: PUSH
40359: LD_INT 20
40361: PUSH
40362: LD_INT 21
40364: PUSH
40365: LD_INT 22
40367: PUSH
40368: LD_INT 25
40370: PUSH
40371: LD_INT 32
40373: PUSH
40374: LD_INT 27
40376: PUSH
40377: LD_INT 36
40379: PUSH
40380: LD_INT 69
40382: PUSH
40383: LD_INT 39
40385: PUSH
40386: LD_INT 34
40388: PUSH
40389: LD_INT 40
40391: PUSH
40392: LD_INT 48
40394: PUSH
40395: LD_INT 49
40397: PUSH
40398: LD_INT 50
40400: PUSH
40401: LD_INT 51
40403: PUSH
40404: LD_INT 52
40406: PUSH
40407: LD_INT 53
40409: PUSH
40410: LD_INT 54
40412: PUSH
40413: LD_INT 55
40415: PUSH
40416: LD_INT 56
40418: PUSH
40419: LD_INT 57
40421: PUSH
40422: LD_INT 58
40424: PUSH
40425: LD_INT 59
40427: PUSH
40428: LD_INT 60
40430: PUSH
40431: LD_INT 61
40433: PUSH
40434: LD_INT 62
40436: PUSH
40437: LD_INT 80
40439: PUSH
40440: LD_INT 82
40442: PUSH
40443: LD_INT 83
40445: PUSH
40446: LD_INT 84
40448: PUSH
40449: LD_INT 85
40451: PUSH
40452: LD_INT 86
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: ST_TO_ADDR
40508: GO 40975
40510: LD_INT 2
40512: DOUBLE
40513: EQUAL
40514: IFTRUE 40518
40516: GO 40744
40518: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40519: LD_ADDR_VAR 0 4
40523: PUSH
40524: LD_INT 35
40526: PUSH
40527: LD_INT 45
40529: PUSH
40530: LD_INT 46
40532: PUSH
40533: LD_INT 47
40535: PUSH
40536: LD_INT 82
40538: PUSH
40539: LD_INT 83
40541: PUSH
40542: LD_INT 84
40544: PUSH
40545: LD_INT 85
40547: PUSH
40548: LD_INT 87
40550: PUSH
40551: LD_INT 70
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 11
40559: PUSH
40560: LD_INT 3
40562: PUSH
40563: LD_INT 4
40565: PUSH
40566: LD_INT 5
40568: PUSH
40569: LD_INT 6
40571: PUSH
40572: LD_INT 15
40574: PUSH
40575: LD_INT 18
40577: PUSH
40578: LD_INT 7
40580: PUSH
40581: LD_INT 17
40583: PUSH
40584: LD_INT 8
40586: PUSH
40587: LD_INT 20
40589: PUSH
40590: LD_INT 21
40592: PUSH
40593: LD_INT 22
40595: PUSH
40596: LD_INT 72
40598: PUSH
40599: LD_INT 26
40601: PUSH
40602: LD_INT 69
40604: PUSH
40605: LD_INT 39
40607: PUSH
40608: LD_INT 40
40610: PUSH
40611: LD_INT 41
40613: PUSH
40614: LD_INT 42
40616: PUSH
40617: LD_INT 43
40619: PUSH
40620: LD_INT 48
40622: PUSH
40623: LD_INT 49
40625: PUSH
40626: LD_INT 50
40628: PUSH
40629: LD_INT 51
40631: PUSH
40632: LD_INT 52
40634: PUSH
40635: LD_INT 53
40637: PUSH
40638: LD_INT 54
40640: PUSH
40641: LD_INT 55
40643: PUSH
40644: LD_INT 56
40646: PUSH
40647: LD_INT 60
40649: PUSH
40650: LD_INT 61
40652: PUSH
40653: LD_INT 62
40655: PUSH
40656: LD_INT 66
40658: PUSH
40659: LD_INT 67
40661: PUSH
40662: LD_INT 68
40664: PUSH
40665: LD_INT 81
40667: PUSH
40668: LD_INT 82
40670: PUSH
40671: LD_INT 83
40673: PUSH
40674: LD_INT 84
40676: PUSH
40677: LD_INT 85
40679: PUSH
40680: LD_INT 87
40682: PUSH
40683: LD_INT 88
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: ST_TO_ADDR
40742: GO 40975
40744: LD_INT 3
40746: DOUBLE
40747: EQUAL
40748: IFTRUE 40752
40750: GO 40974
40752: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40753: LD_ADDR_VAR 0 4
40757: PUSH
40758: LD_INT 46
40760: PUSH
40761: LD_INT 47
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 82
40772: PUSH
40773: LD_INT 83
40775: PUSH
40776: LD_INT 84
40778: PUSH
40779: LD_INT 85
40781: PUSH
40782: LD_INT 86
40784: PUSH
40785: LD_INT 11
40787: PUSH
40788: LD_INT 9
40790: PUSH
40791: LD_INT 20
40793: PUSH
40794: LD_INT 19
40796: PUSH
40797: LD_INT 21
40799: PUSH
40800: LD_INT 24
40802: PUSH
40803: LD_INT 22
40805: PUSH
40806: LD_INT 25
40808: PUSH
40809: LD_INT 28
40811: PUSH
40812: LD_INT 29
40814: PUSH
40815: LD_INT 30
40817: PUSH
40818: LD_INT 31
40820: PUSH
40821: LD_INT 37
40823: PUSH
40824: LD_INT 38
40826: PUSH
40827: LD_INT 32
40829: PUSH
40830: LD_INT 27
40832: PUSH
40833: LD_INT 33
40835: PUSH
40836: LD_INT 69
40838: PUSH
40839: LD_INT 39
40841: PUSH
40842: LD_INT 34
40844: PUSH
40845: LD_INT 40
40847: PUSH
40848: LD_INT 71
40850: PUSH
40851: LD_INT 23
40853: PUSH
40854: LD_INT 44
40856: PUSH
40857: LD_INT 48
40859: PUSH
40860: LD_INT 49
40862: PUSH
40863: LD_INT 50
40865: PUSH
40866: LD_INT 51
40868: PUSH
40869: LD_INT 52
40871: PUSH
40872: LD_INT 53
40874: PUSH
40875: LD_INT 54
40877: PUSH
40878: LD_INT 55
40880: PUSH
40881: LD_INT 56
40883: PUSH
40884: LD_INT 57
40886: PUSH
40887: LD_INT 58
40889: PUSH
40890: LD_INT 59
40892: PUSH
40893: LD_INT 63
40895: PUSH
40896: LD_INT 64
40898: PUSH
40899: LD_INT 65
40901: PUSH
40902: LD_INT 82
40904: PUSH
40905: LD_INT 83
40907: PUSH
40908: LD_INT 84
40910: PUSH
40911: LD_INT 85
40913: PUSH
40914: LD_INT 86
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: ST_TO_ADDR
40972: GO 40975
40974: POP
// if state > - 1 and state < 3 then
40975: LD_VAR 0 3
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: GREATER
40984: PUSH
40985: LD_VAR 0 3
40989: PUSH
40990: LD_INT 3
40992: LESS
40993: AND
40994: IFFALSE 41051
// for i in result do
40996: LD_ADDR_VAR 0 5
41000: PUSH
41001: LD_VAR 0 4
41005: PUSH
41006: FOR_IN
41007: IFFALSE 41049
// if GetTech ( i , side ) <> state then
41009: LD_VAR 0 5
41013: PPUSH
41014: LD_VAR 0 1
41018: PPUSH
41019: CALL_OW 321
41023: PUSH
41024: LD_VAR 0 3
41028: NONEQUAL
41029: IFFALSE 41047
// result := result diff i ;
41031: LD_ADDR_VAR 0 4
41035: PUSH
41036: LD_VAR 0 4
41040: PUSH
41041: LD_VAR 0 5
41045: DIFF
41046: ST_TO_ADDR
41047: GO 41006
41049: POP
41050: POP
// end ;
41051: LD_VAR 0 4
41055: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41056: LD_INT 0
41058: PPUSH
41059: PPUSH
41060: PPUSH
// result := true ;
41061: LD_ADDR_VAR 0 3
41065: PUSH
41066: LD_INT 1
41068: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41069: LD_ADDR_VAR 0 5
41073: PUSH
41074: LD_VAR 0 2
41078: PPUSH
41079: CALL_OW 480
41083: ST_TO_ADDR
// if not tmp then
41084: LD_VAR 0 5
41088: NOT
41089: IFFALSE 41093
// exit ;
41091: GO 41142
// for i in tmp do
41093: LD_ADDR_VAR 0 4
41097: PUSH
41098: LD_VAR 0 5
41102: PUSH
41103: FOR_IN
41104: IFFALSE 41140
// if GetTech ( i , side ) <> state_researched then
41106: LD_VAR 0 4
41110: PPUSH
41111: LD_VAR 0 1
41115: PPUSH
41116: CALL_OW 321
41120: PUSH
41121: LD_INT 2
41123: NONEQUAL
41124: IFFALSE 41138
// begin result := false ;
41126: LD_ADDR_VAR 0 3
41130: PUSH
41131: LD_INT 0
41133: ST_TO_ADDR
// exit ;
41134: POP
41135: POP
41136: GO 41142
// end ;
41138: GO 41103
41140: POP
41141: POP
// end ;
41142: LD_VAR 0 3
41146: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41147: LD_INT 0
41149: PPUSH
41150: PPUSH
41151: PPUSH
41152: PPUSH
41153: PPUSH
41154: PPUSH
41155: PPUSH
41156: PPUSH
41157: PPUSH
41158: PPUSH
41159: PPUSH
41160: PPUSH
41161: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41162: LD_VAR 0 1
41166: NOT
41167: PUSH
41168: LD_VAR 0 1
41172: PPUSH
41173: CALL_OW 257
41177: PUSH
41178: LD_INT 9
41180: NONEQUAL
41181: OR
41182: IFFALSE 41186
// exit ;
41184: GO 41759
// side := GetSide ( unit ) ;
41186: LD_ADDR_VAR 0 9
41190: PUSH
41191: LD_VAR 0 1
41195: PPUSH
41196: CALL_OW 255
41200: ST_TO_ADDR
// tech_space := tech_spacanom ;
41201: LD_ADDR_VAR 0 12
41205: PUSH
41206: LD_INT 29
41208: ST_TO_ADDR
// tech_time := tech_taurad ;
41209: LD_ADDR_VAR 0 13
41213: PUSH
41214: LD_INT 28
41216: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41217: LD_ADDR_VAR 0 11
41221: PUSH
41222: LD_VAR 0 1
41226: PPUSH
41227: CALL_OW 310
41231: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41232: LD_VAR 0 11
41236: PPUSH
41237: CALL_OW 247
41241: PUSH
41242: LD_INT 2
41244: EQUAL
41245: IFFALSE 41249
// exit ;
41247: GO 41759
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41249: LD_ADDR_VAR 0 8
41253: PUSH
41254: LD_INT 81
41256: PUSH
41257: LD_VAR 0 9
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 3
41268: PUSH
41269: LD_INT 21
41271: PUSH
41272: LD_INT 3
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PPUSH
41287: CALL_OW 69
41291: ST_TO_ADDR
// if not tmp then
41292: LD_VAR 0 8
41296: NOT
41297: IFFALSE 41301
// exit ;
41299: GO 41759
// if in_unit then
41301: LD_VAR 0 11
41305: IFFALSE 41329
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41307: LD_ADDR_VAR 0 10
41311: PUSH
41312: LD_VAR 0 8
41316: PPUSH
41317: LD_VAR 0 11
41321: PPUSH
41322: CALL_OW 74
41326: ST_TO_ADDR
41327: GO 41349
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41329: LD_ADDR_VAR 0 10
41333: PUSH
41334: LD_VAR 0 8
41338: PPUSH
41339: LD_VAR 0 1
41343: PPUSH
41344: CALL_OW 74
41348: ST_TO_ADDR
// if not enemy then
41349: LD_VAR 0 10
41353: NOT
41354: IFFALSE 41358
// exit ;
41356: GO 41759
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41358: LD_VAR 0 11
41362: PUSH
41363: LD_VAR 0 11
41367: PPUSH
41368: LD_VAR 0 10
41372: PPUSH
41373: CALL_OW 296
41377: PUSH
41378: LD_INT 13
41380: GREATER
41381: AND
41382: PUSH
41383: LD_VAR 0 1
41387: PPUSH
41388: LD_VAR 0 10
41392: PPUSH
41393: CALL_OW 296
41397: PUSH
41398: LD_INT 12
41400: GREATER
41401: OR
41402: IFFALSE 41406
// exit ;
41404: GO 41759
// missile := [ 1 ] ;
41406: LD_ADDR_VAR 0 14
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41417: LD_VAR 0 9
41421: PPUSH
41422: LD_VAR 0 12
41426: PPUSH
41427: CALL_OW 325
41431: IFFALSE 41460
// missile := Replace ( missile , missile + 1 , 2 ) ;
41433: LD_ADDR_VAR 0 14
41437: PUSH
41438: LD_VAR 0 14
41442: PPUSH
41443: LD_VAR 0 14
41447: PUSH
41448: LD_INT 1
41450: PLUS
41451: PPUSH
41452: LD_INT 2
41454: PPUSH
41455: CALL_OW 1
41459: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41460: LD_VAR 0 9
41464: PPUSH
41465: LD_VAR 0 13
41469: PPUSH
41470: CALL_OW 325
41474: PUSH
41475: LD_VAR 0 10
41479: PPUSH
41480: CALL_OW 255
41484: PPUSH
41485: LD_VAR 0 13
41489: PPUSH
41490: CALL_OW 325
41494: NOT
41495: AND
41496: IFFALSE 41525
// missile := Replace ( missile , missile + 1 , 3 ) ;
41498: LD_ADDR_VAR 0 14
41502: PUSH
41503: LD_VAR 0 14
41507: PPUSH
41508: LD_VAR 0 14
41512: PUSH
41513: LD_INT 1
41515: PLUS
41516: PPUSH
41517: LD_INT 3
41519: PPUSH
41520: CALL_OW 1
41524: ST_TO_ADDR
// if missile < 2 then
41525: LD_VAR 0 14
41529: PUSH
41530: LD_INT 2
41532: LESS
41533: IFFALSE 41537
// exit ;
41535: GO 41759
// x := GetX ( enemy ) ;
41537: LD_ADDR_VAR 0 4
41541: PUSH
41542: LD_VAR 0 10
41546: PPUSH
41547: CALL_OW 250
41551: ST_TO_ADDR
// y := GetY ( enemy ) ;
41552: LD_ADDR_VAR 0 5
41556: PUSH
41557: LD_VAR 0 10
41561: PPUSH
41562: CALL_OW 251
41566: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41567: LD_ADDR_VAR 0 6
41571: PUSH
41572: LD_VAR 0 4
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PPUSH
41581: LD_INT 1
41583: PPUSH
41584: CALL_OW 12
41588: PLUS
41589: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41590: LD_ADDR_VAR 0 7
41594: PUSH
41595: LD_VAR 0 5
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PPUSH
41604: LD_INT 1
41606: PPUSH
41607: CALL_OW 12
41611: PLUS
41612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41613: LD_VAR 0 6
41617: PPUSH
41618: LD_VAR 0 7
41622: PPUSH
41623: CALL_OW 488
41627: NOT
41628: IFFALSE 41650
// begin _x := x ;
41630: LD_ADDR_VAR 0 6
41634: PUSH
41635: LD_VAR 0 4
41639: ST_TO_ADDR
// _y := y ;
41640: LD_ADDR_VAR 0 7
41644: PUSH
41645: LD_VAR 0 5
41649: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41650: LD_ADDR_VAR 0 3
41654: PUSH
41655: LD_INT 1
41657: PPUSH
41658: LD_VAR 0 14
41662: PPUSH
41663: CALL_OW 12
41667: ST_TO_ADDR
// case i of 1 :
41668: LD_VAR 0 3
41672: PUSH
41673: LD_INT 1
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41681
41679: GO 41698
41681: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41682: LD_VAR 0 1
41686: PPUSH
41687: LD_VAR 0 10
41691: PPUSH
41692: CALL_OW 115
41696: GO 41759
41698: LD_INT 2
41700: DOUBLE
41701: EQUAL
41702: IFTRUE 41706
41704: GO 41728
41706: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41707: LD_VAR 0 1
41711: PPUSH
41712: LD_VAR 0 6
41716: PPUSH
41717: LD_VAR 0 7
41721: PPUSH
41722: CALL_OW 153
41726: GO 41759
41728: LD_INT 3
41730: DOUBLE
41731: EQUAL
41732: IFTRUE 41736
41734: GO 41758
41736: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41737: LD_VAR 0 1
41741: PPUSH
41742: LD_VAR 0 6
41746: PPUSH
41747: LD_VAR 0 7
41751: PPUSH
41752: CALL_OW 154
41756: GO 41759
41758: POP
// end ;
41759: LD_VAR 0 2
41763: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41764: LD_INT 0
41766: PPUSH
41767: PPUSH
41768: PPUSH
41769: PPUSH
41770: PPUSH
41771: PPUSH
// if not unit or not building then
41772: LD_VAR 0 1
41776: NOT
41777: PUSH
41778: LD_VAR 0 2
41782: NOT
41783: OR
41784: IFFALSE 41788
// exit ;
41786: GO 41946
// x := GetX ( building ) ;
41788: LD_ADDR_VAR 0 5
41792: PUSH
41793: LD_VAR 0 2
41797: PPUSH
41798: CALL_OW 250
41802: ST_TO_ADDR
// y := GetY ( building ) ;
41803: LD_ADDR_VAR 0 6
41807: PUSH
41808: LD_VAR 0 2
41812: PPUSH
41813: CALL_OW 251
41817: ST_TO_ADDR
// for i = 0 to 5 do
41818: LD_ADDR_VAR 0 4
41822: PUSH
41823: DOUBLE
41824: LD_INT 0
41826: DEC
41827: ST_TO_ADDR
41828: LD_INT 5
41830: PUSH
41831: FOR_TO
41832: IFFALSE 41944
// begin _x := ShiftX ( x , i , 3 ) ;
41834: LD_ADDR_VAR 0 7
41838: PUSH
41839: LD_VAR 0 5
41843: PPUSH
41844: LD_VAR 0 4
41848: PPUSH
41849: LD_INT 3
41851: PPUSH
41852: CALL_OW 272
41856: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41857: LD_ADDR_VAR 0 8
41861: PUSH
41862: LD_VAR 0 6
41866: PPUSH
41867: LD_VAR 0 4
41871: PPUSH
41872: LD_INT 3
41874: PPUSH
41875: CALL_OW 273
41879: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41880: LD_VAR 0 7
41884: PPUSH
41885: LD_VAR 0 8
41889: PPUSH
41890: CALL_OW 488
41894: NOT
41895: IFFALSE 41899
// continue ;
41897: GO 41831
// if HexInfo ( _x , _y ) = 0 then
41899: LD_VAR 0 7
41903: PPUSH
41904: LD_VAR 0 8
41908: PPUSH
41909: CALL_OW 428
41913: PUSH
41914: LD_INT 0
41916: EQUAL
41917: IFFALSE 41942
// begin ComMoveXY ( unit , _x , _y ) ;
41919: LD_VAR 0 1
41923: PPUSH
41924: LD_VAR 0 7
41928: PPUSH
41929: LD_VAR 0 8
41933: PPUSH
41934: CALL_OW 111
// exit ;
41938: POP
41939: POP
41940: GO 41946
// end ; end ;
41942: GO 41831
41944: POP
41945: POP
// end ;
41946: LD_VAR 0 3
41950: RET
// export function ScanBase ( side , base_area ) ; begin
41951: LD_INT 0
41953: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41954: LD_ADDR_VAR 0 3
41958: PUSH
41959: LD_VAR 0 2
41963: PPUSH
41964: LD_INT 81
41966: PUSH
41967: LD_VAR 0 1
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PPUSH
41976: CALL_OW 70
41980: ST_TO_ADDR
// end ;
41981: LD_VAR 0 3
41985: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41986: LD_INT 0
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
// result := false ;
41992: LD_ADDR_VAR 0 2
41996: PUSH
41997: LD_INT 0
41999: ST_TO_ADDR
// side := GetSide ( unit ) ;
42000: LD_ADDR_VAR 0 3
42004: PUSH
42005: LD_VAR 0 1
42009: PPUSH
42010: CALL_OW 255
42014: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42015: LD_ADDR_VAR 0 4
42019: PUSH
42020: LD_VAR 0 1
42024: PPUSH
42025: CALL_OW 248
42029: ST_TO_ADDR
// case nat of 1 :
42030: LD_VAR 0 4
42034: PUSH
42035: LD_INT 1
42037: DOUBLE
42038: EQUAL
42039: IFTRUE 42043
42041: GO 42054
42043: POP
// tech := tech_lassight ; 2 :
42044: LD_ADDR_VAR 0 5
42048: PUSH
42049: LD_INT 12
42051: ST_TO_ADDR
42052: GO 42093
42054: LD_INT 2
42056: DOUBLE
42057: EQUAL
42058: IFTRUE 42062
42060: GO 42073
42062: POP
// tech := tech_mortar ; 3 :
42063: LD_ADDR_VAR 0 5
42067: PUSH
42068: LD_INT 41
42070: ST_TO_ADDR
42071: GO 42093
42073: LD_INT 3
42075: DOUBLE
42076: EQUAL
42077: IFTRUE 42081
42079: GO 42092
42081: POP
// tech := tech_bazooka ; end ;
42082: LD_ADDR_VAR 0 5
42086: PUSH
42087: LD_INT 44
42089: ST_TO_ADDR
42090: GO 42093
42092: POP
// if Researched ( side , tech ) then
42093: LD_VAR 0 3
42097: PPUSH
42098: LD_VAR 0 5
42102: PPUSH
42103: CALL_OW 325
42107: IFFALSE 42134
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42109: LD_ADDR_VAR 0 2
42113: PUSH
42114: LD_INT 5
42116: PUSH
42117: LD_INT 8
42119: PUSH
42120: LD_INT 9
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: PUSH
42128: LD_VAR 0 4
42132: ARRAY
42133: ST_TO_ADDR
// end ;
42134: LD_VAR 0 2
42138: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42139: LD_INT 0
42141: PPUSH
42142: PPUSH
42143: PPUSH
// if not mines then
42144: LD_VAR 0 2
42148: NOT
42149: IFFALSE 42153
// exit ;
42151: GO 42297
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42153: LD_ADDR_VAR 0 5
42157: PUSH
42158: LD_INT 81
42160: PUSH
42161: LD_VAR 0 1
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: LD_INT 21
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PPUSH
42191: CALL_OW 69
42195: ST_TO_ADDR
// for i in mines do
42196: LD_ADDR_VAR 0 4
42200: PUSH
42201: LD_VAR 0 2
42205: PUSH
42206: FOR_IN
42207: IFFALSE 42295
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42209: LD_VAR 0 4
42213: PUSH
42214: LD_INT 1
42216: ARRAY
42217: PPUSH
42218: LD_VAR 0 4
42222: PUSH
42223: LD_INT 2
42225: ARRAY
42226: PPUSH
42227: CALL_OW 458
42231: NOT
42232: IFFALSE 42236
// continue ;
42234: GO 42206
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42236: LD_VAR 0 4
42240: PUSH
42241: LD_INT 1
42243: ARRAY
42244: PPUSH
42245: LD_VAR 0 4
42249: PUSH
42250: LD_INT 2
42252: ARRAY
42253: PPUSH
42254: CALL_OW 428
42258: PUSH
42259: LD_VAR 0 5
42263: IN
42264: IFFALSE 42293
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42266: LD_VAR 0 4
42270: PUSH
42271: LD_INT 1
42273: ARRAY
42274: PPUSH
42275: LD_VAR 0 4
42279: PUSH
42280: LD_INT 2
42282: ARRAY
42283: PPUSH
42284: LD_VAR 0 1
42288: PPUSH
42289: CALL_OW 456
// end ;
42293: GO 42206
42295: POP
42296: POP
// end ;
42297: LD_VAR 0 3
42301: RET
// export function Count ( array ) ; var i ; begin
42302: LD_INT 0
42304: PPUSH
42305: PPUSH
// result := 0 ;
42306: LD_ADDR_VAR 0 2
42310: PUSH
42311: LD_INT 0
42313: ST_TO_ADDR
// for i in array do
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_VAR 0 1
42323: PUSH
42324: FOR_IN
42325: IFFALSE 42349
// if i then
42327: LD_VAR 0 3
42331: IFFALSE 42347
// result := result + 1 ;
42333: LD_ADDR_VAR 0 2
42337: PUSH
42338: LD_VAR 0 2
42342: PUSH
42343: LD_INT 1
42345: PLUS
42346: ST_TO_ADDR
42347: GO 42324
42349: POP
42350: POP
// end ;
42351: LD_VAR 0 2
42355: RET
// export function IsEmpty ( building ) ; begin
42356: LD_INT 0
42358: PPUSH
// if not building then
42359: LD_VAR 0 1
42363: NOT
42364: IFFALSE 42368
// exit ;
42366: GO 42411
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42368: LD_ADDR_VAR 0 2
42372: PUSH
42373: LD_VAR 0 1
42377: PUSH
42378: LD_INT 22
42380: PUSH
42381: LD_VAR 0 1
42385: PPUSH
42386: CALL_OW 255
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 58
42397: PUSH
42398: EMPTY
42399: LIST
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PPUSH
42405: CALL_OW 69
42409: IN
42410: ST_TO_ADDR
// end ;
42411: LD_VAR 0 2
42415: RET
// export function IsNotFull ( building ) ; var places ; begin
42416: LD_INT 0
42418: PPUSH
42419: PPUSH
// if not building then
42420: LD_VAR 0 1
42424: NOT
42425: IFFALSE 42429
// exit ;
42427: GO 42600
// result := false ;
42429: LD_ADDR_VAR 0 2
42433: PUSH
42434: LD_INT 0
42436: ST_TO_ADDR
// places := 0 ;
42437: LD_ADDR_VAR 0 3
42441: PUSH
42442: LD_INT 0
42444: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42445: LD_VAR 0 1
42449: PPUSH
42450: CALL_OW 266
42454: PUSH
42455: LD_INT 0
42457: DOUBLE
42458: EQUAL
42459: IFTRUE 42517
42461: LD_INT 1
42463: DOUBLE
42464: EQUAL
42465: IFTRUE 42517
42467: LD_INT 6
42469: DOUBLE
42470: EQUAL
42471: IFTRUE 42517
42473: LD_INT 7
42475: DOUBLE
42476: EQUAL
42477: IFTRUE 42517
42479: LD_INT 8
42481: DOUBLE
42482: EQUAL
42483: IFTRUE 42517
42485: LD_INT 4
42487: DOUBLE
42488: EQUAL
42489: IFTRUE 42517
42491: LD_INT 5
42493: DOUBLE
42494: EQUAL
42495: IFTRUE 42517
42497: LD_INT 2
42499: DOUBLE
42500: EQUAL
42501: IFTRUE 42517
42503: LD_INT 3
42505: DOUBLE
42506: EQUAL
42507: IFTRUE 42517
42509: LD_INT 35
42511: DOUBLE
42512: EQUAL
42513: IFTRUE 42517
42515: GO 42528
42517: POP
// places := 6 ; b_bunker , b_breastwork :
42518: LD_ADDR_VAR 0 3
42522: PUSH
42523: LD_INT 6
42525: ST_TO_ADDR
42526: GO 42573
42528: LD_INT 32
42530: DOUBLE
42531: EQUAL
42532: IFTRUE 42542
42534: LD_INT 31
42536: DOUBLE
42537: EQUAL
42538: IFTRUE 42542
42540: GO 42553
42542: POP
// places := 1 ; b_control_tower :
42543: LD_ADDR_VAR 0 3
42547: PUSH
42548: LD_INT 1
42550: ST_TO_ADDR
42551: GO 42573
42553: LD_INT 36
42555: DOUBLE
42556: EQUAL
42557: IFTRUE 42561
42559: GO 42572
42561: POP
// places := 3 ; end ;
42562: LD_ADDR_VAR 0 3
42566: PUSH
42567: LD_INT 3
42569: ST_TO_ADDR
42570: GO 42573
42572: POP
// if places then
42573: LD_VAR 0 3
42577: IFFALSE 42600
// result := UnitsInside ( building ) < places ;
42579: LD_ADDR_VAR 0 2
42583: PUSH
42584: LD_VAR 0 1
42588: PPUSH
42589: CALL_OW 313
42593: PUSH
42594: LD_VAR 0 3
42598: LESS
42599: ST_TO_ADDR
// end ;
42600: LD_VAR 0 2
42604: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42605: LD_INT 0
42607: PPUSH
42608: PPUSH
42609: PPUSH
42610: PPUSH
// tmp := [ ] ;
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: EMPTY
42617: ST_TO_ADDR
// list := [ ] ;
42618: LD_ADDR_VAR 0 5
42622: PUSH
42623: EMPTY
42624: ST_TO_ADDR
// for i = 16 to 25 do
42625: LD_ADDR_VAR 0 4
42629: PUSH
42630: DOUBLE
42631: LD_INT 16
42633: DEC
42634: ST_TO_ADDR
42635: LD_INT 25
42637: PUSH
42638: FOR_TO
42639: IFFALSE 42712
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42641: LD_ADDR_VAR 0 3
42645: PUSH
42646: LD_VAR 0 3
42650: PUSH
42651: LD_INT 22
42653: PUSH
42654: LD_VAR 0 1
42658: PPUSH
42659: CALL_OW 255
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 91
42670: PUSH
42671: LD_VAR 0 1
42675: PUSH
42676: LD_INT 6
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 30
42686: PUSH
42687: LD_VAR 0 4
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: PUSH
42701: EMPTY
42702: LIST
42703: PPUSH
42704: CALL_OW 69
42708: ADD
42709: ST_TO_ADDR
42710: GO 42638
42712: POP
42713: POP
// for i = 1 to tmp do
42714: LD_ADDR_VAR 0 4
42718: PUSH
42719: DOUBLE
42720: LD_INT 1
42722: DEC
42723: ST_TO_ADDR
42724: LD_VAR 0 3
42728: PUSH
42729: FOR_TO
42730: IFFALSE 42818
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42732: LD_ADDR_VAR 0 5
42736: PUSH
42737: LD_VAR 0 5
42741: PUSH
42742: LD_VAR 0 3
42746: PUSH
42747: LD_VAR 0 4
42751: ARRAY
42752: PPUSH
42753: CALL_OW 266
42757: PUSH
42758: LD_VAR 0 3
42762: PUSH
42763: LD_VAR 0 4
42767: ARRAY
42768: PPUSH
42769: CALL_OW 250
42773: PUSH
42774: LD_VAR 0 3
42778: PUSH
42779: LD_VAR 0 4
42783: ARRAY
42784: PPUSH
42785: CALL_OW 251
42789: PUSH
42790: LD_VAR 0 3
42794: PUSH
42795: LD_VAR 0 4
42799: ARRAY
42800: PPUSH
42801: CALL_OW 254
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: PUSH
42812: EMPTY
42813: LIST
42814: ADD
42815: ST_TO_ADDR
42816: GO 42729
42818: POP
42819: POP
// result := list ;
42820: LD_ADDR_VAR 0 2
42824: PUSH
42825: LD_VAR 0 5
42829: ST_TO_ADDR
// end ;
42830: LD_VAR 0 2
42834: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42835: LD_INT 0
42837: PPUSH
42838: PPUSH
42839: PPUSH
42840: PPUSH
42841: PPUSH
42842: PPUSH
42843: PPUSH
// if not factory then
42844: LD_VAR 0 1
42848: NOT
42849: IFFALSE 42853
// exit ;
42851: GO 43446
// if control = control_apeman then
42853: LD_VAR 0 4
42857: PUSH
42858: LD_INT 5
42860: EQUAL
42861: IFFALSE 42970
// begin tmp := UnitsInside ( factory ) ;
42863: LD_ADDR_VAR 0 8
42867: PUSH
42868: LD_VAR 0 1
42872: PPUSH
42873: CALL_OW 313
42877: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42878: LD_VAR 0 8
42882: PPUSH
42883: LD_INT 25
42885: PUSH
42886: LD_INT 12
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PPUSH
42893: CALL_OW 72
42897: NOT
42898: IFFALSE 42908
// control := control_manual ;
42900: LD_ADDR_VAR 0 4
42904: PUSH
42905: LD_INT 1
42907: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42908: LD_ADDR_VAR 0 8
42912: PUSH
42913: LD_VAR 0 1
42917: PPUSH
42918: CALL 42605 0 1
42922: ST_TO_ADDR
// if tmp then
42923: LD_VAR 0 8
42927: IFFALSE 42970
// begin for i in tmp do
42929: LD_ADDR_VAR 0 7
42933: PUSH
42934: LD_VAR 0 8
42938: PUSH
42939: FOR_IN
42940: IFFALSE 42968
// if i [ 1 ] = b_ext_radio then
42942: LD_VAR 0 7
42946: PUSH
42947: LD_INT 1
42949: ARRAY
42950: PUSH
42951: LD_INT 22
42953: EQUAL
42954: IFFALSE 42966
// begin control := control_remote ;
42956: LD_ADDR_VAR 0 4
42960: PUSH
42961: LD_INT 2
42963: ST_TO_ADDR
// break ;
42964: GO 42968
// end ;
42966: GO 42939
42968: POP
42969: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42970: LD_VAR 0 1
42974: PPUSH
42975: LD_VAR 0 2
42979: PPUSH
42980: LD_VAR 0 3
42984: PPUSH
42985: LD_VAR 0 4
42989: PPUSH
42990: LD_VAR 0 5
42994: PPUSH
42995: CALL_OW 448
42999: IFFALSE 43034
// begin result := [ chassis , engine , control , weapon ] ;
43001: LD_ADDR_VAR 0 6
43005: PUSH
43006: LD_VAR 0 2
43010: PUSH
43011: LD_VAR 0 3
43015: PUSH
43016: LD_VAR 0 4
43020: PUSH
43021: LD_VAR 0 5
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: ST_TO_ADDR
// exit ;
43032: GO 43446
// end ; _chassis := AvailableChassisList ( factory ) ;
43034: LD_ADDR_VAR 0 9
43038: PUSH
43039: LD_VAR 0 1
43043: PPUSH
43044: CALL_OW 475
43048: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43049: LD_ADDR_VAR 0 11
43053: PUSH
43054: LD_VAR 0 1
43058: PPUSH
43059: CALL_OW 476
43063: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43064: LD_ADDR_VAR 0 12
43068: PUSH
43069: LD_VAR 0 1
43073: PPUSH
43074: CALL_OW 477
43078: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43079: LD_ADDR_VAR 0 10
43083: PUSH
43084: LD_VAR 0 1
43088: PPUSH
43089: CALL_OW 478
43093: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43094: LD_VAR 0 9
43098: NOT
43099: PUSH
43100: LD_VAR 0 11
43104: NOT
43105: OR
43106: PUSH
43107: LD_VAR 0 12
43111: NOT
43112: OR
43113: PUSH
43114: LD_VAR 0 10
43118: NOT
43119: OR
43120: IFFALSE 43155
// begin result := [ chassis , engine , control , weapon ] ;
43122: LD_ADDR_VAR 0 6
43126: PUSH
43127: LD_VAR 0 2
43131: PUSH
43132: LD_VAR 0 3
43136: PUSH
43137: LD_VAR 0 4
43141: PUSH
43142: LD_VAR 0 5
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: ST_TO_ADDR
// exit ;
43153: GO 43446
// end ; if not chassis in _chassis then
43155: LD_VAR 0 2
43159: PUSH
43160: LD_VAR 0 9
43164: IN
43165: NOT
43166: IFFALSE 43192
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43168: LD_ADDR_VAR 0 2
43172: PUSH
43173: LD_VAR 0 9
43177: PUSH
43178: LD_INT 1
43180: PPUSH
43181: LD_VAR 0 9
43185: PPUSH
43186: CALL_OW 12
43190: ARRAY
43191: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43192: LD_VAR 0 2
43196: PPUSH
43197: LD_VAR 0 3
43201: PPUSH
43202: CALL 43451 0 2
43206: NOT
43207: IFFALSE 43266
// repeat engine := _engine [ 1 ] ;
43209: LD_ADDR_VAR 0 3
43213: PUSH
43214: LD_VAR 0 11
43218: PUSH
43219: LD_INT 1
43221: ARRAY
43222: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43223: LD_ADDR_VAR 0 11
43227: PUSH
43228: LD_VAR 0 11
43232: PPUSH
43233: LD_INT 1
43235: PPUSH
43236: CALL_OW 3
43240: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43241: LD_VAR 0 2
43245: PPUSH
43246: LD_VAR 0 3
43250: PPUSH
43251: CALL 43451 0 2
43255: PUSH
43256: LD_VAR 0 11
43260: PUSH
43261: EMPTY
43262: EQUAL
43263: OR
43264: IFFALSE 43209
// if not control in _control then
43266: LD_VAR 0 4
43270: PUSH
43271: LD_VAR 0 12
43275: IN
43276: NOT
43277: IFFALSE 43303
// control := _control [ rand ( 1 , _control ) ] ;
43279: LD_ADDR_VAR 0 4
43283: PUSH
43284: LD_VAR 0 12
43288: PUSH
43289: LD_INT 1
43291: PPUSH
43292: LD_VAR 0 12
43296: PPUSH
43297: CALL_OW 12
43301: ARRAY
43302: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43303: LD_VAR 0 2
43307: PPUSH
43308: LD_VAR 0 5
43312: PPUSH
43313: CALL 43671 0 2
43317: NOT
43318: IFFALSE 43377
// repeat weapon := _weapon [ 1 ] ;
43320: LD_ADDR_VAR 0 5
43324: PUSH
43325: LD_VAR 0 10
43329: PUSH
43330: LD_INT 1
43332: ARRAY
43333: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43334: LD_ADDR_VAR 0 10
43338: PUSH
43339: LD_VAR 0 10
43343: PPUSH
43344: LD_INT 1
43346: PPUSH
43347: CALL_OW 3
43351: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43352: LD_VAR 0 2
43356: PPUSH
43357: LD_VAR 0 5
43361: PPUSH
43362: CALL 43671 0 2
43366: PUSH
43367: LD_VAR 0 10
43371: PUSH
43372: EMPTY
43373: EQUAL
43374: OR
43375: IFFALSE 43320
// result := [ ] ;
43377: LD_ADDR_VAR 0 6
43381: PUSH
43382: EMPTY
43383: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43384: LD_VAR 0 1
43388: PPUSH
43389: LD_VAR 0 2
43393: PPUSH
43394: LD_VAR 0 3
43398: PPUSH
43399: LD_VAR 0 4
43403: PPUSH
43404: LD_VAR 0 5
43408: PPUSH
43409: CALL_OW 448
43413: IFFALSE 43446
// result := [ chassis , engine , control , weapon ] ;
43415: LD_ADDR_VAR 0 6
43419: PUSH
43420: LD_VAR 0 2
43424: PUSH
43425: LD_VAR 0 3
43429: PUSH
43430: LD_VAR 0 4
43434: PUSH
43435: LD_VAR 0 5
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: ST_TO_ADDR
// end ;
43446: LD_VAR 0 6
43450: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43451: LD_INT 0
43453: PPUSH
// if not chassis or not engine then
43454: LD_VAR 0 1
43458: NOT
43459: PUSH
43460: LD_VAR 0 2
43464: NOT
43465: OR
43466: IFFALSE 43470
// exit ;
43468: GO 43666
// case engine of engine_solar :
43470: LD_VAR 0 2
43474: PUSH
43475: LD_INT 2
43477: DOUBLE
43478: EQUAL
43479: IFTRUE 43483
43481: GO 43521
43483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43484: LD_ADDR_VAR 0 3
43488: PUSH
43489: LD_INT 11
43491: PUSH
43492: LD_INT 12
43494: PUSH
43495: LD_INT 13
43497: PUSH
43498: LD_INT 14
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: ST_TO_ADDR
43519: GO 43650
43521: LD_INT 1
43523: DOUBLE
43524: EQUAL
43525: IFTRUE 43529
43527: GO 43591
43529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_INT 11
43537: PUSH
43538: LD_INT 12
43540: PUSH
43541: LD_INT 13
43543: PUSH
43544: LD_INT 14
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 3
43555: PUSH
43556: LD_INT 4
43558: PUSH
43559: LD_INT 5
43561: PUSH
43562: LD_INT 21
43564: PUSH
43565: LD_INT 23
43567: PUSH
43568: LD_INT 22
43570: PUSH
43571: LD_INT 24
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: ST_TO_ADDR
43589: GO 43650
43591: LD_INT 3
43593: DOUBLE
43594: EQUAL
43595: IFTRUE 43599
43597: GO 43649
43599: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43600: LD_ADDR_VAR 0 3
43604: PUSH
43605: LD_INT 13
43607: PUSH
43608: LD_INT 14
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 5
43622: PUSH
43623: LD_INT 21
43625: PUSH
43626: LD_INT 22
43628: PUSH
43629: LD_INT 23
43631: PUSH
43632: LD_INT 24
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: ST_TO_ADDR
43647: GO 43650
43649: POP
// result := ( chassis in result ) ;
43650: LD_ADDR_VAR 0 3
43654: PUSH
43655: LD_VAR 0 1
43659: PUSH
43660: LD_VAR 0 3
43664: IN
43665: ST_TO_ADDR
// end ;
43666: LD_VAR 0 3
43670: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43671: LD_INT 0
43673: PPUSH
// if not chassis or not weapon then
43674: LD_VAR 0 1
43678: NOT
43679: PUSH
43680: LD_VAR 0 2
43684: NOT
43685: OR
43686: IFFALSE 43690
// exit ;
43688: GO 44750
// case weapon of us_machine_gun :
43690: LD_VAR 0 2
43694: PUSH
43695: LD_INT 2
43697: DOUBLE
43698: EQUAL
43699: IFTRUE 43703
43701: GO 43733
43703: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: LD_INT 3
43717: PUSH
43718: LD_INT 4
43720: PUSH
43721: LD_INT 5
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: ST_TO_ADDR
43731: GO 44734
43733: LD_INT 3
43735: DOUBLE
43736: EQUAL
43737: IFTRUE 43741
43739: GO 43771
43741: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43742: LD_ADDR_VAR 0 3
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: LD_INT 3
43755: PUSH
43756: LD_INT 4
43758: PUSH
43759: LD_INT 5
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: ST_TO_ADDR
43769: GO 44734
43771: LD_INT 11
43773: DOUBLE
43774: EQUAL
43775: IFTRUE 43779
43777: GO 43809
43779: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43780: LD_ADDR_VAR 0 3
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: LD_INT 4
43796: PUSH
43797: LD_INT 5
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: ST_TO_ADDR
43807: GO 44734
43809: LD_INT 4
43811: DOUBLE
43812: EQUAL
43813: IFTRUE 43817
43815: GO 43843
43817: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43818: LD_ADDR_VAR 0 3
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 3
43828: PUSH
43829: LD_INT 4
43831: PUSH
43832: LD_INT 5
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: ST_TO_ADDR
43841: GO 44734
43843: LD_INT 5
43845: DOUBLE
43846: EQUAL
43847: IFTRUE 43851
43849: GO 43877
43851: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43852: LD_ADDR_VAR 0 3
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: LD_INT 3
43862: PUSH
43863: LD_INT 4
43865: PUSH
43866: LD_INT 5
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: ST_TO_ADDR
43875: GO 44734
43877: LD_INT 9
43879: DOUBLE
43880: EQUAL
43881: IFTRUE 43885
43883: GO 43911
43885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43886: LD_ADDR_VAR 0 3
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: LD_INT 3
43896: PUSH
43897: LD_INT 4
43899: PUSH
43900: LD_INT 5
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: ST_TO_ADDR
43909: GO 44734
43911: LD_INT 7
43913: DOUBLE
43914: EQUAL
43915: IFTRUE 43919
43917: GO 43945
43919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43920: LD_ADDR_VAR 0 3
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: LD_INT 3
43930: PUSH
43931: LD_INT 4
43933: PUSH
43934: LD_INT 5
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: ST_TO_ADDR
43943: GO 44734
43945: LD_INT 12
43947: DOUBLE
43948: EQUAL
43949: IFTRUE 43953
43951: GO 43979
43953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43954: LD_ADDR_VAR 0 3
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: LD_INT 3
43964: PUSH
43965: LD_INT 4
43967: PUSH
43968: LD_INT 5
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
43977: GO 44734
43979: LD_INT 13
43981: DOUBLE
43982: EQUAL
43983: IFTRUE 43987
43985: GO 44013
43987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43988: LD_ADDR_VAR 0 3
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: LD_INT 3
43998: PUSH
43999: LD_INT 4
44001: PUSH
44002: LD_INT 5
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: ST_TO_ADDR
44011: GO 44734
44013: LD_INT 14
44015: DOUBLE
44016: EQUAL
44017: IFTRUE 44021
44019: GO 44039
44021: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44022: LD_ADDR_VAR 0 3
44026: PUSH
44027: LD_INT 4
44029: PUSH
44030: LD_INT 5
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: ST_TO_ADDR
44037: GO 44734
44039: LD_INT 6
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44047
44045: GO 44065
44047: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44048: LD_ADDR_VAR 0 3
44052: PUSH
44053: LD_INT 4
44055: PUSH
44056: LD_INT 5
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: ST_TO_ADDR
44063: GO 44734
44065: LD_INT 10
44067: DOUBLE
44068: EQUAL
44069: IFTRUE 44073
44071: GO 44091
44073: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44074: LD_ADDR_VAR 0 3
44078: PUSH
44079: LD_INT 4
44081: PUSH
44082: LD_INT 5
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: ST_TO_ADDR
44089: GO 44734
44091: LD_INT 22
44093: DOUBLE
44094: EQUAL
44095: IFTRUE 44099
44097: GO 44125
44099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44100: LD_ADDR_VAR 0 3
44104: PUSH
44105: LD_INT 11
44107: PUSH
44108: LD_INT 12
44110: PUSH
44111: LD_INT 13
44113: PUSH
44114: LD_INT 14
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: ST_TO_ADDR
44123: GO 44734
44125: LD_INT 23
44127: DOUBLE
44128: EQUAL
44129: IFTRUE 44133
44131: GO 44159
44133: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44134: LD_ADDR_VAR 0 3
44138: PUSH
44139: LD_INT 11
44141: PUSH
44142: LD_INT 12
44144: PUSH
44145: LD_INT 13
44147: PUSH
44148: LD_INT 14
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: ST_TO_ADDR
44157: GO 44734
44159: LD_INT 24
44161: DOUBLE
44162: EQUAL
44163: IFTRUE 44167
44165: GO 44193
44167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44168: LD_ADDR_VAR 0 3
44172: PUSH
44173: LD_INT 11
44175: PUSH
44176: LD_INT 12
44178: PUSH
44179: LD_INT 13
44181: PUSH
44182: LD_INT 14
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: ST_TO_ADDR
44191: GO 44734
44193: LD_INT 30
44195: DOUBLE
44196: EQUAL
44197: IFTRUE 44201
44199: GO 44227
44201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44202: LD_ADDR_VAR 0 3
44206: PUSH
44207: LD_INT 11
44209: PUSH
44210: LD_INT 12
44212: PUSH
44213: LD_INT 13
44215: PUSH
44216: LD_INT 14
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: ST_TO_ADDR
44225: GO 44734
44227: LD_INT 25
44229: DOUBLE
44230: EQUAL
44231: IFTRUE 44235
44233: GO 44253
44235: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44236: LD_ADDR_VAR 0 3
44240: PUSH
44241: LD_INT 13
44243: PUSH
44244: LD_INT 14
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: ST_TO_ADDR
44251: GO 44734
44253: LD_INT 27
44255: DOUBLE
44256: EQUAL
44257: IFTRUE 44261
44259: GO 44279
44261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44262: LD_ADDR_VAR 0 3
44266: PUSH
44267: LD_INT 13
44269: PUSH
44270: LD_INT 14
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: ST_TO_ADDR
44277: GO 44734
44279: LD_INT 92
44281: DOUBLE
44282: EQUAL
44283: IFTRUE 44287
44285: GO 44313
44287: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 11
44295: PUSH
44296: LD_INT 12
44298: PUSH
44299: LD_INT 13
44301: PUSH
44302: LD_INT 14
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: ST_TO_ADDR
44311: GO 44734
44313: LD_INT 28
44315: DOUBLE
44316: EQUAL
44317: IFTRUE 44321
44319: GO 44339
44321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44322: LD_ADDR_VAR 0 3
44326: PUSH
44327: LD_INT 13
44329: PUSH
44330: LD_INT 14
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: ST_TO_ADDR
44337: GO 44734
44339: LD_INT 29
44341: DOUBLE
44342: EQUAL
44343: IFTRUE 44347
44345: GO 44365
44347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44348: LD_ADDR_VAR 0 3
44352: PUSH
44353: LD_INT 13
44355: PUSH
44356: LD_INT 14
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: ST_TO_ADDR
44363: GO 44734
44365: LD_INT 31
44367: DOUBLE
44368: EQUAL
44369: IFTRUE 44373
44371: GO 44391
44373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44374: LD_ADDR_VAR 0 3
44378: PUSH
44379: LD_INT 13
44381: PUSH
44382: LD_INT 14
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: ST_TO_ADDR
44389: GO 44734
44391: LD_INT 26
44393: DOUBLE
44394: EQUAL
44395: IFTRUE 44399
44397: GO 44417
44399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44400: LD_ADDR_VAR 0 3
44404: PUSH
44405: LD_INT 13
44407: PUSH
44408: LD_INT 14
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: ST_TO_ADDR
44415: GO 44734
44417: LD_INT 42
44419: DOUBLE
44420: EQUAL
44421: IFTRUE 44425
44423: GO 44451
44425: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44426: LD_ADDR_VAR 0 3
44430: PUSH
44431: LD_INT 21
44433: PUSH
44434: LD_INT 22
44436: PUSH
44437: LD_INT 23
44439: PUSH
44440: LD_INT 24
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: ST_TO_ADDR
44449: GO 44734
44451: LD_INT 43
44453: DOUBLE
44454: EQUAL
44455: IFTRUE 44459
44457: GO 44485
44459: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44460: LD_ADDR_VAR 0 3
44464: PUSH
44465: LD_INT 21
44467: PUSH
44468: LD_INT 22
44470: PUSH
44471: LD_INT 23
44473: PUSH
44474: LD_INT 24
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: ST_TO_ADDR
44483: GO 44734
44485: LD_INT 44
44487: DOUBLE
44488: EQUAL
44489: IFTRUE 44493
44491: GO 44519
44493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44494: LD_ADDR_VAR 0 3
44498: PUSH
44499: LD_INT 21
44501: PUSH
44502: LD_INT 22
44504: PUSH
44505: LD_INT 23
44507: PUSH
44508: LD_INT 24
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
44517: GO 44734
44519: LD_INT 45
44521: DOUBLE
44522: EQUAL
44523: IFTRUE 44527
44525: GO 44553
44527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44528: LD_ADDR_VAR 0 3
44532: PUSH
44533: LD_INT 21
44535: PUSH
44536: LD_INT 22
44538: PUSH
44539: LD_INT 23
44541: PUSH
44542: LD_INT 24
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: ST_TO_ADDR
44551: GO 44734
44553: LD_INT 49
44555: DOUBLE
44556: EQUAL
44557: IFTRUE 44561
44559: GO 44587
44561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44562: LD_ADDR_VAR 0 3
44566: PUSH
44567: LD_INT 21
44569: PUSH
44570: LD_INT 22
44572: PUSH
44573: LD_INT 23
44575: PUSH
44576: LD_INT 24
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: ST_TO_ADDR
44585: GO 44734
44587: LD_INT 51
44589: DOUBLE
44590: EQUAL
44591: IFTRUE 44595
44593: GO 44621
44595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44596: LD_ADDR_VAR 0 3
44600: PUSH
44601: LD_INT 21
44603: PUSH
44604: LD_INT 22
44606: PUSH
44607: LD_INT 23
44609: PUSH
44610: LD_INT 24
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: ST_TO_ADDR
44619: GO 44734
44621: LD_INT 52
44623: DOUBLE
44624: EQUAL
44625: IFTRUE 44629
44627: GO 44655
44629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44630: LD_ADDR_VAR 0 3
44634: PUSH
44635: LD_INT 21
44637: PUSH
44638: LD_INT 22
44640: PUSH
44641: LD_INT 23
44643: PUSH
44644: LD_INT 24
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: ST_TO_ADDR
44653: GO 44734
44655: LD_INT 53
44657: DOUBLE
44658: EQUAL
44659: IFTRUE 44663
44661: GO 44681
44663: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44664: LD_ADDR_VAR 0 3
44668: PUSH
44669: LD_INT 23
44671: PUSH
44672: LD_INT 24
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: ST_TO_ADDR
44679: GO 44734
44681: LD_INT 46
44683: DOUBLE
44684: EQUAL
44685: IFTRUE 44689
44687: GO 44707
44689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44690: LD_ADDR_VAR 0 3
44694: PUSH
44695: LD_INT 23
44697: PUSH
44698: LD_INT 24
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: ST_TO_ADDR
44705: GO 44734
44707: LD_INT 47
44709: DOUBLE
44710: EQUAL
44711: IFTRUE 44715
44713: GO 44733
44715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44716: LD_ADDR_VAR 0 3
44720: PUSH
44721: LD_INT 23
44723: PUSH
44724: LD_INT 24
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: ST_TO_ADDR
44731: GO 44734
44733: POP
// result := ( chassis in result ) ;
44734: LD_ADDR_VAR 0 3
44738: PUSH
44739: LD_VAR 0 1
44743: PUSH
44744: LD_VAR 0 3
44748: IN
44749: ST_TO_ADDR
// end ;
44750: LD_VAR 0 3
44754: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44755: LD_INT 0
44757: PPUSH
44758: PPUSH
44759: PPUSH
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
// result := array ;
44764: LD_ADDR_VAR 0 5
44768: PUSH
44769: LD_VAR 0 1
44773: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44774: LD_VAR 0 1
44778: NOT
44779: PUSH
44780: LD_VAR 0 2
44784: NOT
44785: OR
44786: PUSH
44787: LD_VAR 0 3
44791: NOT
44792: OR
44793: PUSH
44794: LD_VAR 0 2
44798: PUSH
44799: LD_VAR 0 1
44803: GREATER
44804: OR
44805: PUSH
44806: LD_VAR 0 3
44810: PUSH
44811: LD_VAR 0 1
44815: GREATER
44816: OR
44817: IFFALSE 44821
// exit ;
44819: GO 45117
// if direction then
44821: LD_VAR 0 4
44825: IFFALSE 44889
// begin d := 1 ;
44827: LD_ADDR_VAR 0 9
44831: PUSH
44832: LD_INT 1
44834: ST_TO_ADDR
// if i_from > i_to then
44835: LD_VAR 0 2
44839: PUSH
44840: LD_VAR 0 3
44844: GREATER
44845: IFFALSE 44871
// length := ( array - i_from ) + i_to else
44847: LD_ADDR_VAR 0 11
44851: PUSH
44852: LD_VAR 0 1
44856: PUSH
44857: LD_VAR 0 2
44861: MINUS
44862: PUSH
44863: LD_VAR 0 3
44867: PLUS
44868: ST_TO_ADDR
44869: GO 44887
// length := i_to - i_from ;
44871: LD_ADDR_VAR 0 11
44875: PUSH
44876: LD_VAR 0 3
44880: PUSH
44881: LD_VAR 0 2
44885: MINUS
44886: ST_TO_ADDR
// end else
44887: GO 44950
// begin d := - 1 ;
44889: LD_ADDR_VAR 0 9
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: ST_TO_ADDR
// if i_from > i_to then
44898: LD_VAR 0 2
44902: PUSH
44903: LD_VAR 0 3
44907: GREATER
44908: IFFALSE 44928
// length := i_from - i_to else
44910: LD_ADDR_VAR 0 11
44914: PUSH
44915: LD_VAR 0 2
44919: PUSH
44920: LD_VAR 0 3
44924: MINUS
44925: ST_TO_ADDR
44926: GO 44950
// length := ( array - i_to ) + i_from ;
44928: LD_ADDR_VAR 0 11
44932: PUSH
44933: LD_VAR 0 1
44937: PUSH
44938: LD_VAR 0 3
44942: MINUS
44943: PUSH
44944: LD_VAR 0 2
44948: PLUS
44949: ST_TO_ADDR
// end ; if not length then
44950: LD_VAR 0 11
44954: NOT
44955: IFFALSE 44959
// exit ;
44957: GO 45117
// tmp := array ;
44959: LD_ADDR_VAR 0 10
44963: PUSH
44964: LD_VAR 0 1
44968: ST_TO_ADDR
// for i = 1 to length do
44969: LD_ADDR_VAR 0 6
44973: PUSH
44974: DOUBLE
44975: LD_INT 1
44977: DEC
44978: ST_TO_ADDR
44979: LD_VAR 0 11
44983: PUSH
44984: FOR_TO
44985: IFFALSE 45105
// begin for j = 1 to array do
44987: LD_ADDR_VAR 0 7
44991: PUSH
44992: DOUBLE
44993: LD_INT 1
44995: DEC
44996: ST_TO_ADDR
44997: LD_VAR 0 1
45001: PUSH
45002: FOR_TO
45003: IFFALSE 45091
// begin k := j + d ;
45005: LD_ADDR_VAR 0 8
45009: PUSH
45010: LD_VAR 0 7
45014: PUSH
45015: LD_VAR 0 9
45019: PLUS
45020: ST_TO_ADDR
// if k > array then
45021: LD_VAR 0 8
45025: PUSH
45026: LD_VAR 0 1
45030: GREATER
45031: IFFALSE 45041
// k := 1 ;
45033: LD_ADDR_VAR 0 8
45037: PUSH
45038: LD_INT 1
45040: ST_TO_ADDR
// if not k then
45041: LD_VAR 0 8
45045: NOT
45046: IFFALSE 45058
// k := array ;
45048: LD_ADDR_VAR 0 8
45052: PUSH
45053: LD_VAR 0 1
45057: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45058: LD_ADDR_VAR 0 10
45062: PUSH
45063: LD_VAR 0 10
45067: PPUSH
45068: LD_VAR 0 8
45072: PPUSH
45073: LD_VAR 0 1
45077: PUSH
45078: LD_VAR 0 7
45082: ARRAY
45083: PPUSH
45084: CALL_OW 1
45088: ST_TO_ADDR
// end ;
45089: GO 45002
45091: POP
45092: POP
// array := tmp ;
45093: LD_ADDR_VAR 0 1
45097: PUSH
45098: LD_VAR 0 10
45102: ST_TO_ADDR
// end ;
45103: GO 44984
45105: POP
45106: POP
// result := array ;
45107: LD_ADDR_VAR 0 5
45111: PUSH
45112: LD_VAR 0 1
45116: ST_TO_ADDR
// end ;
45117: LD_VAR 0 5
45121: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45122: LD_INT 0
45124: PPUSH
45125: PPUSH
// result := 0 ;
45126: LD_ADDR_VAR 0 3
45130: PUSH
45131: LD_INT 0
45133: ST_TO_ADDR
// if not array or not value in array then
45134: LD_VAR 0 1
45138: NOT
45139: PUSH
45140: LD_VAR 0 2
45144: PUSH
45145: LD_VAR 0 1
45149: IN
45150: NOT
45151: OR
45152: IFFALSE 45156
// exit ;
45154: GO 45210
// for i = 1 to array do
45156: LD_ADDR_VAR 0 4
45160: PUSH
45161: DOUBLE
45162: LD_INT 1
45164: DEC
45165: ST_TO_ADDR
45166: LD_VAR 0 1
45170: PUSH
45171: FOR_TO
45172: IFFALSE 45208
// if value = array [ i ] then
45174: LD_VAR 0 2
45178: PUSH
45179: LD_VAR 0 1
45183: PUSH
45184: LD_VAR 0 4
45188: ARRAY
45189: EQUAL
45190: IFFALSE 45206
// begin result := i ;
45192: LD_ADDR_VAR 0 3
45196: PUSH
45197: LD_VAR 0 4
45201: ST_TO_ADDR
// exit ;
45202: POP
45203: POP
45204: GO 45210
// end ;
45206: GO 45171
45208: POP
45209: POP
// end ;
45210: LD_VAR 0 3
45214: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45215: LD_INT 0
45217: PPUSH
// vc_chassis := chassis ;
45218: LD_ADDR_OWVAR 37
45222: PUSH
45223: LD_VAR 0 1
45227: ST_TO_ADDR
// vc_engine := engine ;
45228: LD_ADDR_OWVAR 39
45232: PUSH
45233: LD_VAR 0 2
45237: ST_TO_ADDR
// vc_control := control ;
45238: LD_ADDR_OWVAR 38
45242: PUSH
45243: LD_VAR 0 3
45247: ST_TO_ADDR
// vc_weapon := weapon ;
45248: LD_ADDR_OWVAR 40
45252: PUSH
45253: LD_VAR 0 4
45257: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45258: LD_ADDR_OWVAR 41
45262: PUSH
45263: LD_VAR 0 5
45267: ST_TO_ADDR
// end ;
45268: LD_VAR 0 6
45272: RET
// export function WantPlant ( unit ) ; var task ; begin
45273: LD_INT 0
45275: PPUSH
45276: PPUSH
// result := false ;
45277: LD_ADDR_VAR 0 2
45281: PUSH
45282: LD_INT 0
45284: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45285: LD_ADDR_VAR 0 3
45289: PUSH
45290: LD_VAR 0 1
45294: PPUSH
45295: CALL_OW 437
45299: ST_TO_ADDR
// if task then
45300: LD_VAR 0 3
45304: IFFALSE 45332
// if task [ 1 ] [ 1 ] = p then
45306: LD_VAR 0 3
45310: PUSH
45311: LD_INT 1
45313: ARRAY
45314: PUSH
45315: LD_INT 1
45317: ARRAY
45318: PUSH
45319: LD_STRING p
45321: EQUAL
45322: IFFALSE 45332
// result := true ;
45324: LD_ADDR_VAR 0 2
45328: PUSH
45329: LD_INT 1
45331: ST_TO_ADDR
// end ;
45332: LD_VAR 0 2
45336: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45337: LD_INT 0
45339: PPUSH
45340: PPUSH
45341: PPUSH
45342: PPUSH
// if pos < 1 then
45343: LD_VAR 0 2
45347: PUSH
45348: LD_INT 1
45350: LESS
45351: IFFALSE 45355
// exit ;
45353: GO 45658
// if pos = 1 then
45355: LD_VAR 0 2
45359: PUSH
45360: LD_INT 1
45362: EQUAL
45363: IFFALSE 45396
// result := Replace ( arr , pos [ 1 ] , value ) else
45365: LD_ADDR_VAR 0 4
45369: PUSH
45370: LD_VAR 0 1
45374: PPUSH
45375: LD_VAR 0 2
45379: PUSH
45380: LD_INT 1
45382: ARRAY
45383: PPUSH
45384: LD_VAR 0 3
45388: PPUSH
45389: CALL_OW 1
45393: ST_TO_ADDR
45394: GO 45658
// begin tmp := arr ;
45396: LD_ADDR_VAR 0 6
45400: PUSH
45401: LD_VAR 0 1
45405: ST_TO_ADDR
// s_arr := [ tmp ] ;
45406: LD_ADDR_VAR 0 7
45410: PUSH
45411: LD_VAR 0 6
45415: PUSH
45416: EMPTY
45417: LIST
45418: ST_TO_ADDR
// for i = 1 to pos - 1 do
45419: LD_ADDR_VAR 0 5
45423: PUSH
45424: DOUBLE
45425: LD_INT 1
45427: DEC
45428: ST_TO_ADDR
45429: LD_VAR 0 2
45433: PUSH
45434: LD_INT 1
45436: MINUS
45437: PUSH
45438: FOR_TO
45439: IFFALSE 45484
// begin tmp := tmp [ pos [ i ] ] ;
45441: LD_ADDR_VAR 0 6
45445: PUSH
45446: LD_VAR 0 6
45450: PUSH
45451: LD_VAR 0 2
45455: PUSH
45456: LD_VAR 0 5
45460: ARRAY
45461: ARRAY
45462: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45463: LD_ADDR_VAR 0 7
45467: PUSH
45468: LD_VAR 0 7
45472: PUSH
45473: LD_VAR 0 6
45477: PUSH
45478: EMPTY
45479: LIST
45480: ADD
45481: ST_TO_ADDR
// end ;
45482: GO 45438
45484: POP
45485: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45486: LD_ADDR_VAR 0 6
45490: PUSH
45491: LD_VAR 0 6
45495: PPUSH
45496: LD_VAR 0 2
45500: PUSH
45501: LD_VAR 0 2
45505: ARRAY
45506: PPUSH
45507: LD_VAR 0 3
45511: PPUSH
45512: CALL_OW 1
45516: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45517: LD_ADDR_VAR 0 7
45521: PUSH
45522: LD_VAR 0 7
45526: PPUSH
45527: LD_VAR 0 7
45531: PPUSH
45532: LD_VAR 0 6
45536: PPUSH
45537: CALL_OW 1
45541: ST_TO_ADDR
// for i = s_arr downto 2 do
45542: LD_ADDR_VAR 0 5
45546: PUSH
45547: DOUBLE
45548: LD_VAR 0 7
45552: INC
45553: ST_TO_ADDR
45554: LD_INT 2
45556: PUSH
45557: FOR_DOWNTO
45558: IFFALSE 45642
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45560: LD_ADDR_VAR 0 6
45564: PUSH
45565: LD_VAR 0 7
45569: PUSH
45570: LD_VAR 0 5
45574: PUSH
45575: LD_INT 1
45577: MINUS
45578: ARRAY
45579: PPUSH
45580: LD_VAR 0 2
45584: PUSH
45585: LD_VAR 0 5
45589: PUSH
45590: LD_INT 1
45592: MINUS
45593: ARRAY
45594: PPUSH
45595: LD_VAR 0 7
45599: PUSH
45600: LD_VAR 0 5
45604: ARRAY
45605: PPUSH
45606: CALL_OW 1
45610: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45611: LD_ADDR_VAR 0 7
45615: PUSH
45616: LD_VAR 0 7
45620: PPUSH
45621: LD_VAR 0 5
45625: PUSH
45626: LD_INT 1
45628: MINUS
45629: PPUSH
45630: LD_VAR 0 6
45634: PPUSH
45635: CALL_OW 1
45639: ST_TO_ADDR
// end ;
45640: GO 45557
45642: POP
45643: POP
// result := s_arr [ 1 ] ;
45644: LD_ADDR_VAR 0 4
45648: PUSH
45649: LD_VAR 0 7
45653: PUSH
45654: LD_INT 1
45656: ARRAY
45657: ST_TO_ADDR
// end ; end ;
45658: LD_VAR 0 4
45662: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45663: LD_INT 0
45665: PPUSH
45666: PPUSH
// if not list then
45667: LD_VAR 0 1
45671: NOT
45672: IFFALSE 45676
// exit ;
45674: GO 45767
// i := list [ pos1 ] ;
45676: LD_ADDR_VAR 0 5
45680: PUSH
45681: LD_VAR 0 1
45685: PUSH
45686: LD_VAR 0 2
45690: ARRAY
45691: ST_TO_ADDR
// if not i then
45692: LD_VAR 0 5
45696: NOT
45697: IFFALSE 45701
// exit ;
45699: GO 45767
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45701: LD_ADDR_VAR 0 1
45705: PUSH
45706: LD_VAR 0 1
45710: PPUSH
45711: LD_VAR 0 2
45715: PPUSH
45716: LD_VAR 0 1
45720: PUSH
45721: LD_VAR 0 3
45725: ARRAY
45726: PPUSH
45727: CALL_OW 1
45731: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45732: LD_ADDR_VAR 0 1
45736: PUSH
45737: LD_VAR 0 1
45741: PPUSH
45742: LD_VAR 0 3
45746: PPUSH
45747: LD_VAR 0 5
45751: PPUSH
45752: CALL_OW 1
45756: ST_TO_ADDR
// result := list ;
45757: LD_ADDR_VAR 0 4
45761: PUSH
45762: LD_VAR 0 1
45766: ST_TO_ADDR
// end ;
45767: LD_VAR 0 4
45771: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45772: LD_INT 0
45774: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45775: LD_ADDR_VAR 0 5
45779: PUSH
45780: LD_VAR 0 1
45784: PPUSH
45785: CALL_OW 250
45789: PPUSH
45790: LD_VAR 0 1
45794: PPUSH
45795: CALL_OW 251
45799: PPUSH
45800: LD_VAR 0 2
45804: PPUSH
45805: LD_VAR 0 3
45809: PPUSH
45810: LD_VAR 0 4
45814: PPUSH
45815: CALL 45825 0 5
45819: ST_TO_ADDR
// end ;
45820: LD_VAR 0 5
45824: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45825: LD_INT 0
45827: PPUSH
45828: PPUSH
45829: PPUSH
45830: PPUSH
// if not list then
45831: LD_VAR 0 3
45835: NOT
45836: IFFALSE 45840
// exit ;
45838: GO 46228
// result := [ ] ;
45840: LD_ADDR_VAR 0 6
45844: PUSH
45845: EMPTY
45846: ST_TO_ADDR
// for i in list do
45847: LD_ADDR_VAR 0 7
45851: PUSH
45852: LD_VAR 0 3
45856: PUSH
45857: FOR_IN
45858: IFFALSE 46060
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45860: LD_ADDR_VAR 0 9
45864: PUSH
45865: LD_VAR 0 7
45869: PPUSH
45870: LD_VAR 0 1
45874: PPUSH
45875: LD_VAR 0 2
45879: PPUSH
45880: CALL_OW 297
45884: ST_TO_ADDR
// if not result then
45885: LD_VAR 0 6
45889: NOT
45890: IFFALSE 45916
// result := [ [ i , tmp ] ] else
45892: LD_ADDR_VAR 0 6
45896: PUSH
45897: LD_VAR 0 7
45901: PUSH
45902: LD_VAR 0 9
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: EMPTY
45912: LIST
45913: ST_TO_ADDR
45914: GO 46058
// begin if result [ result ] [ 2 ] < tmp then
45916: LD_VAR 0 6
45920: PUSH
45921: LD_VAR 0 6
45925: ARRAY
45926: PUSH
45927: LD_INT 2
45929: ARRAY
45930: PUSH
45931: LD_VAR 0 9
45935: LESS
45936: IFFALSE 45978
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45938: LD_ADDR_VAR 0 6
45942: PUSH
45943: LD_VAR 0 6
45947: PPUSH
45948: LD_VAR 0 6
45952: PUSH
45953: LD_INT 1
45955: PLUS
45956: PPUSH
45957: LD_VAR 0 7
45961: PUSH
45962: LD_VAR 0 9
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PPUSH
45971: CALL_OW 2
45975: ST_TO_ADDR
45976: GO 46058
// for j = 1 to result do
45978: LD_ADDR_VAR 0 8
45982: PUSH
45983: DOUBLE
45984: LD_INT 1
45986: DEC
45987: ST_TO_ADDR
45988: LD_VAR 0 6
45992: PUSH
45993: FOR_TO
45994: IFFALSE 46056
// begin if tmp < result [ j ] [ 2 ] then
45996: LD_VAR 0 9
46000: PUSH
46001: LD_VAR 0 6
46005: PUSH
46006: LD_VAR 0 8
46010: ARRAY
46011: PUSH
46012: LD_INT 2
46014: ARRAY
46015: LESS
46016: IFFALSE 46054
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46018: LD_ADDR_VAR 0 6
46022: PUSH
46023: LD_VAR 0 6
46027: PPUSH
46028: LD_VAR 0 8
46032: PPUSH
46033: LD_VAR 0 7
46037: PUSH
46038: LD_VAR 0 9
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PPUSH
46047: CALL_OW 2
46051: ST_TO_ADDR
// break ;
46052: GO 46056
// end ; end ;
46054: GO 45993
46056: POP
46057: POP
// end ; end ;
46058: GO 45857
46060: POP
46061: POP
// if result and not asc then
46062: LD_VAR 0 6
46066: PUSH
46067: LD_VAR 0 4
46071: NOT
46072: AND
46073: IFFALSE 46148
// begin tmp := result ;
46075: LD_ADDR_VAR 0 9
46079: PUSH
46080: LD_VAR 0 6
46084: ST_TO_ADDR
// for i = tmp downto 1 do
46085: LD_ADDR_VAR 0 7
46089: PUSH
46090: DOUBLE
46091: LD_VAR 0 9
46095: INC
46096: ST_TO_ADDR
46097: LD_INT 1
46099: PUSH
46100: FOR_DOWNTO
46101: IFFALSE 46146
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46103: LD_ADDR_VAR 0 6
46107: PUSH
46108: LD_VAR 0 6
46112: PPUSH
46113: LD_VAR 0 9
46117: PUSH
46118: LD_VAR 0 7
46122: MINUS
46123: PUSH
46124: LD_INT 1
46126: PLUS
46127: PPUSH
46128: LD_VAR 0 9
46132: PUSH
46133: LD_VAR 0 7
46137: ARRAY
46138: PPUSH
46139: CALL_OW 1
46143: ST_TO_ADDR
46144: GO 46100
46146: POP
46147: POP
// end ; tmp := [ ] ;
46148: LD_ADDR_VAR 0 9
46152: PUSH
46153: EMPTY
46154: ST_TO_ADDR
// if mode then
46155: LD_VAR 0 5
46159: IFFALSE 46228
// begin for i = 1 to result do
46161: LD_ADDR_VAR 0 7
46165: PUSH
46166: DOUBLE
46167: LD_INT 1
46169: DEC
46170: ST_TO_ADDR
46171: LD_VAR 0 6
46175: PUSH
46176: FOR_TO
46177: IFFALSE 46216
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46179: LD_ADDR_VAR 0 9
46183: PUSH
46184: LD_VAR 0 9
46188: PPUSH
46189: LD_VAR 0 7
46193: PPUSH
46194: LD_VAR 0 6
46198: PUSH
46199: LD_VAR 0 7
46203: ARRAY
46204: PUSH
46205: LD_INT 1
46207: ARRAY
46208: PPUSH
46209: CALL_OW 1
46213: ST_TO_ADDR
46214: GO 46176
46216: POP
46217: POP
// result := tmp ;
46218: LD_ADDR_VAR 0 6
46222: PUSH
46223: LD_VAR 0 9
46227: ST_TO_ADDR
// end ; end ;
46228: LD_VAR 0 6
46232: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46233: LD_INT 0
46235: PPUSH
46236: PPUSH
46237: PPUSH
46238: PPUSH
46239: PPUSH
46240: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46241: LD_ADDR_VAR 0 5
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// if not x or not y then
46263: LD_VAR 0 2
46267: NOT
46268: PUSH
46269: LD_VAR 0 3
46273: NOT
46274: OR
46275: IFFALSE 46279
// exit ;
46277: GO 47929
// if not range then
46279: LD_VAR 0 4
46283: NOT
46284: IFFALSE 46294
// range := 10 ;
46286: LD_ADDR_VAR 0 4
46290: PUSH
46291: LD_INT 10
46293: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46294: LD_ADDR_VAR 0 8
46298: PUSH
46299: LD_INT 81
46301: PUSH
46302: LD_VAR 0 1
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 92
46313: PUSH
46314: LD_VAR 0 2
46318: PUSH
46319: LD_VAR 0 3
46323: PUSH
46324: LD_VAR 0 4
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: LD_INT 21
46340: PUSH
46341: LD_INT 3
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: PPUSH
46357: CALL_OW 69
46361: ST_TO_ADDR
// if not tmp then
46362: LD_VAR 0 8
46366: NOT
46367: IFFALSE 46371
// exit ;
46369: GO 47929
// for i in tmp do
46371: LD_ADDR_VAR 0 6
46375: PUSH
46376: LD_VAR 0 8
46380: PUSH
46381: FOR_IN
46382: IFFALSE 47904
// begin points := [ 0 , 0 , 0 ] ;
46384: LD_ADDR_VAR 0 9
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: ST_TO_ADDR
// bpoints := 1 ;
46403: LD_ADDR_VAR 0 10
46407: PUSH
46408: LD_INT 1
46410: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46411: LD_VAR 0 6
46415: PPUSH
46416: CALL_OW 247
46420: PUSH
46421: LD_INT 1
46423: DOUBLE
46424: EQUAL
46425: IFTRUE 46429
46427: GO 47007
46429: POP
// begin if GetClass ( i ) = 1 then
46430: LD_VAR 0 6
46434: PPUSH
46435: CALL_OW 257
46439: PUSH
46440: LD_INT 1
46442: EQUAL
46443: IFFALSE 46464
// points := [ 10 , 5 , 3 ] ;
46445: LD_ADDR_VAR 0 9
46449: PUSH
46450: LD_INT 10
46452: PUSH
46453: LD_INT 5
46455: PUSH
46456: LD_INT 3
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46464: LD_VAR 0 6
46468: PPUSH
46469: CALL_OW 257
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: LD_INT 4
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: LIST
46487: IN
46488: IFFALSE 46509
// points := [ 3 , 2 , 1 ] ;
46490: LD_ADDR_VAR 0 9
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46509: LD_VAR 0 6
46513: PPUSH
46514: CALL_OW 257
46518: PUSH
46519: LD_INT 5
46521: EQUAL
46522: IFFALSE 46543
// points := [ 130 , 5 , 2 ] ;
46524: LD_ADDR_VAR 0 9
46528: PUSH
46529: LD_INT 130
46531: PUSH
46532: LD_INT 5
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46543: LD_VAR 0 6
46547: PPUSH
46548: CALL_OW 257
46552: PUSH
46553: LD_INT 8
46555: EQUAL
46556: IFFALSE 46577
// points := [ 35 , 35 , 30 ] ;
46558: LD_ADDR_VAR 0 9
46562: PUSH
46563: LD_INT 35
46565: PUSH
46566: LD_INT 35
46568: PUSH
46569: LD_INT 30
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46577: LD_VAR 0 6
46581: PPUSH
46582: CALL_OW 257
46586: PUSH
46587: LD_INT 9
46589: EQUAL
46590: IFFALSE 46611
// points := [ 20 , 55 , 40 ] ;
46592: LD_ADDR_VAR 0 9
46596: PUSH
46597: LD_INT 20
46599: PUSH
46600: LD_INT 55
46602: PUSH
46603: LD_INT 40
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46611: LD_VAR 0 6
46615: PPUSH
46616: CALL_OW 257
46620: PUSH
46621: LD_INT 12
46623: PUSH
46624: LD_INT 16
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: IN
46631: IFFALSE 46652
// points := [ 5 , 3 , 2 ] ;
46633: LD_ADDR_VAR 0 9
46637: PUSH
46638: LD_INT 5
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: LIST
46651: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46652: LD_VAR 0 6
46656: PPUSH
46657: CALL_OW 257
46661: PUSH
46662: LD_INT 17
46664: EQUAL
46665: IFFALSE 46686
// points := [ 100 , 50 , 75 ] ;
46667: LD_ADDR_VAR 0 9
46671: PUSH
46672: LD_INT 100
46674: PUSH
46675: LD_INT 50
46677: PUSH
46678: LD_INT 75
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: LIST
46685: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46686: LD_VAR 0 6
46690: PPUSH
46691: CALL_OW 257
46695: PUSH
46696: LD_INT 15
46698: EQUAL
46699: IFFALSE 46720
// points := [ 10 , 5 , 3 ] ;
46701: LD_ADDR_VAR 0 9
46705: PUSH
46706: LD_INT 10
46708: PUSH
46709: LD_INT 5
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46720: LD_VAR 0 6
46724: PPUSH
46725: CALL_OW 257
46729: PUSH
46730: LD_INT 14
46732: EQUAL
46733: IFFALSE 46754
// points := [ 10 , 0 , 0 ] ;
46735: LD_ADDR_VAR 0 9
46739: PUSH
46740: LD_INT 10
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46754: LD_VAR 0 6
46758: PPUSH
46759: CALL_OW 257
46763: PUSH
46764: LD_INT 11
46766: EQUAL
46767: IFFALSE 46788
// points := [ 30 , 10 , 5 ] ;
46769: LD_ADDR_VAR 0 9
46773: PUSH
46774: LD_INT 30
46776: PUSH
46777: LD_INT 10
46779: PUSH
46780: LD_INT 5
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46788: LD_VAR 0 1
46792: PPUSH
46793: LD_INT 5
46795: PPUSH
46796: CALL_OW 321
46800: PUSH
46801: LD_INT 2
46803: EQUAL
46804: IFFALSE 46821
// bpoints := bpoints * 1.8 ;
46806: LD_ADDR_VAR 0 10
46810: PUSH
46811: LD_VAR 0 10
46815: PUSH
46816: LD_REAL  1.80000000000000E+0000
46819: MUL
46820: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46821: LD_VAR 0 6
46825: PPUSH
46826: CALL_OW 257
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: LD_INT 3
46839: PUSH
46840: LD_INT 4
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: IN
46849: PUSH
46850: LD_VAR 0 1
46854: PPUSH
46855: LD_INT 51
46857: PPUSH
46858: CALL_OW 321
46862: PUSH
46863: LD_INT 2
46865: EQUAL
46866: AND
46867: IFFALSE 46884
// bpoints := bpoints * 1.2 ;
46869: LD_ADDR_VAR 0 10
46873: PUSH
46874: LD_VAR 0 10
46878: PUSH
46879: LD_REAL  1.20000000000000E+0000
46882: MUL
46883: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46884: LD_VAR 0 6
46888: PPUSH
46889: CALL_OW 257
46893: PUSH
46894: LD_INT 5
46896: PUSH
46897: LD_INT 7
46899: PUSH
46900: LD_INT 9
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: IN
46908: PUSH
46909: LD_VAR 0 1
46913: PPUSH
46914: LD_INT 52
46916: PPUSH
46917: CALL_OW 321
46921: PUSH
46922: LD_INT 2
46924: EQUAL
46925: AND
46926: IFFALSE 46943
// bpoints := bpoints * 1.5 ;
46928: LD_ADDR_VAR 0 10
46932: PUSH
46933: LD_VAR 0 10
46937: PUSH
46938: LD_REAL  1.50000000000000E+0000
46941: MUL
46942: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46943: LD_VAR 0 1
46947: PPUSH
46948: LD_INT 66
46950: PPUSH
46951: CALL_OW 321
46955: PUSH
46956: LD_INT 2
46958: EQUAL
46959: IFFALSE 46976
// bpoints := bpoints * 1.1 ;
46961: LD_ADDR_VAR 0 10
46965: PUSH
46966: LD_VAR 0 10
46970: PUSH
46971: LD_REAL  1.10000000000000E+0000
46974: MUL
46975: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46976: LD_ADDR_VAR 0 10
46980: PUSH
46981: LD_VAR 0 10
46985: PUSH
46986: LD_VAR 0 6
46990: PPUSH
46991: LD_INT 1
46993: PPUSH
46994: CALL_OW 259
46998: PUSH
46999: LD_REAL  1.15000000000000E+0000
47002: MUL
47003: MUL
47004: ST_TO_ADDR
// end ; unit_vehicle :
47005: GO 47833
47007: LD_INT 2
47009: DOUBLE
47010: EQUAL
47011: IFTRUE 47015
47013: GO 47821
47015: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47016: LD_VAR 0 6
47020: PPUSH
47021: CALL_OW 264
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 42
47031: PUSH
47032: LD_INT 24
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: IN
47040: IFFALSE 47061
// points := [ 25 , 5 , 3 ] ;
47042: LD_ADDR_VAR 0 9
47046: PUSH
47047: LD_INT 25
47049: PUSH
47050: LD_INT 5
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47061: LD_VAR 0 6
47065: PPUSH
47066: CALL_OW 264
47070: PUSH
47071: LD_INT 4
47073: PUSH
47074: LD_INT 43
47076: PUSH
47077: LD_INT 25
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: LIST
47084: IN
47085: IFFALSE 47106
// points := [ 40 , 15 , 5 ] ;
47087: LD_ADDR_VAR 0 9
47091: PUSH
47092: LD_INT 40
47094: PUSH
47095: LD_INT 15
47097: PUSH
47098: LD_INT 5
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47106: LD_VAR 0 6
47110: PPUSH
47111: CALL_OW 264
47115: PUSH
47116: LD_INT 3
47118: PUSH
47119: LD_INT 23
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: IN
47126: IFFALSE 47147
// points := [ 7 , 25 , 8 ] ;
47128: LD_ADDR_VAR 0 9
47132: PUSH
47133: LD_INT 7
47135: PUSH
47136: LD_INT 25
47138: PUSH
47139: LD_INT 8
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47147: LD_VAR 0 6
47151: PPUSH
47152: CALL_OW 264
47156: PUSH
47157: LD_INT 5
47159: PUSH
47160: LD_INT 27
47162: PUSH
47163: LD_INT 44
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: IN
47171: IFFALSE 47192
// points := [ 14 , 50 , 16 ] ;
47173: LD_ADDR_VAR 0 9
47177: PUSH
47178: LD_INT 14
47180: PUSH
47181: LD_INT 50
47183: PUSH
47184: LD_INT 16
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: LIST
47191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47192: LD_VAR 0 6
47196: PPUSH
47197: CALL_OW 264
47201: PUSH
47202: LD_INT 6
47204: PUSH
47205: LD_INT 46
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: IN
47212: IFFALSE 47233
// points := [ 32 , 120 , 70 ] ;
47214: LD_ADDR_VAR 0 9
47218: PUSH
47219: LD_INT 32
47221: PUSH
47222: LD_INT 120
47224: PUSH
47225: LD_INT 70
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: LIST
47232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47233: LD_VAR 0 6
47237: PPUSH
47238: CALL_OW 264
47242: PUSH
47243: LD_INT 7
47245: PUSH
47246: LD_INT 28
47248: PUSH
47249: LD_INT 45
47251: PUSH
47252: LD_INT 92
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: IN
47261: IFFALSE 47282
// points := [ 35 , 20 , 45 ] ;
47263: LD_ADDR_VAR 0 9
47267: PUSH
47268: LD_INT 35
47270: PUSH
47271: LD_INT 20
47273: PUSH
47274: LD_INT 45
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47282: LD_VAR 0 6
47286: PPUSH
47287: CALL_OW 264
47291: PUSH
47292: LD_INT 47
47294: PUSH
47295: EMPTY
47296: LIST
47297: IN
47298: IFFALSE 47319
// points := [ 67 , 45 , 75 ] ;
47300: LD_ADDR_VAR 0 9
47304: PUSH
47305: LD_INT 67
47307: PUSH
47308: LD_INT 45
47310: PUSH
47311: LD_INT 75
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: LIST
47318: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47319: LD_VAR 0 6
47323: PPUSH
47324: CALL_OW 264
47328: PUSH
47329: LD_INT 26
47331: PUSH
47332: EMPTY
47333: LIST
47334: IN
47335: IFFALSE 47356
// points := [ 120 , 30 , 80 ] ;
47337: LD_ADDR_VAR 0 9
47341: PUSH
47342: LD_INT 120
47344: PUSH
47345: LD_INT 30
47347: PUSH
47348: LD_INT 80
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47356: LD_VAR 0 6
47360: PPUSH
47361: CALL_OW 264
47365: PUSH
47366: LD_INT 22
47368: PUSH
47369: EMPTY
47370: LIST
47371: IN
47372: IFFALSE 47393
// points := [ 40 , 1 , 1 ] ;
47374: LD_ADDR_VAR 0 9
47378: PUSH
47379: LD_INT 40
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47393: LD_VAR 0 6
47397: PPUSH
47398: CALL_OW 264
47402: PUSH
47403: LD_INT 29
47405: PUSH
47406: EMPTY
47407: LIST
47408: IN
47409: IFFALSE 47430
// points := [ 70 , 200 , 400 ] ;
47411: LD_ADDR_VAR 0 9
47415: PUSH
47416: LD_INT 70
47418: PUSH
47419: LD_INT 200
47421: PUSH
47422: LD_INT 400
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: LIST
47429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47430: LD_VAR 0 6
47434: PPUSH
47435: CALL_OW 264
47439: PUSH
47440: LD_INT 14
47442: PUSH
47443: LD_INT 53
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: IN
47450: IFFALSE 47471
// points := [ 40 , 10 , 20 ] ;
47452: LD_ADDR_VAR 0 9
47456: PUSH
47457: LD_INT 40
47459: PUSH
47460: LD_INT 10
47462: PUSH
47463: LD_INT 20
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47471: LD_VAR 0 6
47475: PPUSH
47476: CALL_OW 264
47480: PUSH
47481: LD_INT 9
47483: PUSH
47484: EMPTY
47485: LIST
47486: IN
47487: IFFALSE 47508
// points := [ 5 , 70 , 20 ] ;
47489: LD_ADDR_VAR 0 9
47493: PUSH
47494: LD_INT 5
47496: PUSH
47497: LD_INT 70
47499: PUSH
47500: LD_INT 20
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47508: LD_VAR 0 6
47512: PPUSH
47513: CALL_OW 264
47517: PUSH
47518: LD_INT 10
47520: PUSH
47521: EMPTY
47522: LIST
47523: IN
47524: IFFALSE 47545
// points := [ 35 , 110 , 70 ] ;
47526: LD_ADDR_VAR 0 9
47530: PUSH
47531: LD_INT 35
47533: PUSH
47534: LD_INT 110
47536: PUSH
47537: LD_INT 70
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47545: LD_VAR 0 6
47549: PPUSH
47550: CALL_OW 265
47554: PUSH
47555: LD_INT 25
47557: EQUAL
47558: IFFALSE 47579
// points := [ 80 , 65 , 100 ] ;
47560: LD_ADDR_VAR 0 9
47564: PUSH
47565: LD_INT 80
47567: PUSH
47568: LD_INT 65
47570: PUSH
47571: LD_INT 100
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47579: LD_VAR 0 6
47583: PPUSH
47584: CALL_OW 263
47588: PUSH
47589: LD_INT 1
47591: EQUAL
47592: IFFALSE 47627
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47594: LD_ADDR_VAR 0 10
47598: PUSH
47599: LD_VAR 0 10
47603: PUSH
47604: LD_VAR 0 6
47608: PPUSH
47609: CALL_OW 311
47613: PPUSH
47614: LD_INT 3
47616: PPUSH
47617: CALL_OW 259
47621: PUSH
47622: LD_INT 4
47624: MUL
47625: MUL
47626: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47627: LD_VAR 0 6
47631: PPUSH
47632: CALL_OW 263
47636: PUSH
47637: LD_INT 2
47639: EQUAL
47640: IFFALSE 47691
// begin j := IsControledBy ( i ) ;
47642: LD_ADDR_VAR 0 7
47646: PUSH
47647: LD_VAR 0 6
47651: PPUSH
47652: CALL_OW 312
47656: ST_TO_ADDR
// if j then
47657: LD_VAR 0 7
47661: IFFALSE 47691
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47663: LD_ADDR_VAR 0 10
47667: PUSH
47668: LD_VAR 0 10
47672: PUSH
47673: LD_VAR 0 7
47677: PPUSH
47678: LD_INT 3
47680: PPUSH
47681: CALL_OW 259
47685: PUSH
47686: LD_INT 3
47688: MUL
47689: MUL
47690: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47691: LD_VAR 0 6
47695: PPUSH
47696: CALL_OW 264
47700: PUSH
47701: LD_INT 5
47703: PUSH
47704: LD_INT 6
47706: PUSH
47707: LD_INT 46
47709: PUSH
47710: LD_INT 44
47712: PUSH
47713: LD_INT 47
47715: PUSH
47716: LD_INT 45
47718: PUSH
47719: LD_INT 28
47721: PUSH
47722: LD_INT 7
47724: PUSH
47725: LD_INT 27
47727: PUSH
47728: LD_INT 29
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: IN
47743: PUSH
47744: LD_VAR 0 1
47748: PPUSH
47749: LD_INT 52
47751: PPUSH
47752: CALL_OW 321
47756: PUSH
47757: LD_INT 2
47759: EQUAL
47760: AND
47761: IFFALSE 47778
// bpoints := bpoints * 1.2 ;
47763: LD_ADDR_VAR 0 10
47767: PUSH
47768: LD_VAR 0 10
47772: PUSH
47773: LD_REAL  1.20000000000000E+0000
47776: MUL
47777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47778: LD_VAR 0 6
47782: PPUSH
47783: CALL_OW 264
47787: PUSH
47788: LD_INT 6
47790: PUSH
47791: LD_INT 46
47793: PUSH
47794: LD_INT 47
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: LIST
47801: IN
47802: IFFALSE 47819
// bpoints := bpoints * 1.2 ;
47804: LD_ADDR_VAR 0 10
47808: PUSH
47809: LD_VAR 0 10
47813: PUSH
47814: LD_REAL  1.20000000000000E+0000
47817: MUL
47818: ST_TO_ADDR
// end ; unit_building :
47819: GO 47833
47821: LD_INT 3
47823: DOUBLE
47824: EQUAL
47825: IFTRUE 47829
47827: GO 47832
47829: POP
// ; end ;
47830: GO 47833
47832: POP
// for j = 1 to 3 do
47833: LD_ADDR_VAR 0 7
47837: PUSH
47838: DOUBLE
47839: LD_INT 1
47841: DEC
47842: ST_TO_ADDR
47843: LD_INT 3
47845: PUSH
47846: FOR_TO
47847: IFFALSE 47900
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47849: LD_ADDR_VAR 0 5
47853: PUSH
47854: LD_VAR 0 5
47858: PPUSH
47859: LD_VAR 0 7
47863: PPUSH
47864: LD_VAR 0 5
47868: PUSH
47869: LD_VAR 0 7
47873: ARRAY
47874: PUSH
47875: LD_VAR 0 9
47879: PUSH
47880: LD_VAR 0 7
47884: ARRAY
47885: PUSH
47886: LD_VAR 0 10
47890: MUL
47891: PLUS
47892: PPUSH
47893: CALL_OW 1
47897: ST_TO_ADDR
47898: GO 47846
47900: POP
47901: POP
// end ;
47902: GO 46381
47904: POP
47905: POP
// result := Replace ( result , 4 , tmp ) ;
47906: LD_ADDR_VAR 0 5
47910: PUSH
47911: LD_VAR 0 5
47915: PPUSH
47916: LD_INT 4
47918: PPUSH
47919: LD_VAR 0 8
47923: PPUSH
47924: CALL_OW 1
47928: ST_TO_ADDR
// end ;
47929: LD_VAR 0 5
47933: RET
// export function DangerAtRange ( unit , range ) ; begin
47934: LD_INT 0
47936: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47937: LD_ADDR_VAR 0 3
47941: PUSH
47942: LD_VAR 0 1
47946: PPUSH
47947: CALL_OW 255
47951: PPUSH
47952: LD_VAR 0 1
47956: PPUSH
47957: CALL_OW 250
47961: PPUSH
47962: LD_VAR 0 1
47966: PPUSH
47967: CALL_OW 251
47971: PPUSH
47972: LD_VAR 0 2
47976: PPUSH
47977: CALL 46233 0 4
47981: ST_TO_ADDR
// end ;
47982: LD_VAR 0 3
47986: RET
// export function DangerInArea ( side , area ) ; begin
47987: LD_INT 0
47989: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47990: LD_ADDR_VAR 0 3
47994: PUSH
47995: LD_VAR 0 2
47999: PPUSH
48000: LD_INT 81
48002: PUSH
48003: LD_VAR 0 1
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PPUSH
48012: CALL_OW 70
48016: ST_TO_ADDR
// end ;
48017: LD_VAR 0 3
48021: RET
// export function IsExtension ( b ) ; begin
48022: LD_INT 0
48024: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48025: LD_ADDR_VAR 0 2
48029: PUSH
48030: LD_VAR 0 1
48034: PUSH
48035: LD_INT 23
48037: PUSH
48038: LD_INT 20
48040: PUSH
48041: LD_INT 22
48043: PUSH
48044: LD_INT 17
48046: PUSH
48047: LD_INT 24
48049: PUSH
48050: LD_INT 21
48052: PUSH
48053: LD_INT 19
48055: PUSH
48056: LD_INT 16
48058: PUSH
48059: LD_INT 25
48061: PUSH
48062: LD_INT 18
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: IN
48077: ST_TO_ADDR
// end ;
48078: LD_VAR 0 2
48082: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48083: LD_INT 0
48085: PPUSH
48086: PPUSH
48087: PPUSH
// result := [ ] ;
48088: LD_ADDR_VAR 0 4
48092: PUSH
48093: EMPTY
48094: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48095: LD_ADDR_VAR 0 5
48099: PUSH
48100: LD_VAR 0 2
48104: PPUSH
48105: LD_INT 21
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PPUSH
48115: CALL_OW 70
48119: ST_TO_ADDR
// if not tmp then
48120: LD_VAR 0 5
48124: NOT
48125: IFFALSE 48129
// exit ;
48127: GO 48193
// if checkLink then
48129: LD_VAR 0 3
48133: IFFALSE 48183
// begin for i in tmp do
48135: LD_ADDR_VAR 0 6
48139: PUSH
48140: LD_VAR 0 5
48144: PUSH
48145: FOR_IN
48146: IFFALSE 48181
// if GetBase ( i ) <> base then
48148: LD_VAR 0 6
48152: PPUSH
48153: CALL_OW 274
48157: PUSH
48158: LD_VAR 0 1
48162: NONEQUAL
48163: IFFALSE 48179
// ComLinkToBase ( base , i ) ;
48165: LD_VAR 0 1
48169: PPUSH
48170: LD_VAR 0 6
48174: PPUSH
48175: CALL_OW 169
48179: GO 48145
48181: POP
48182: POP
// end ; result := tmp ;
48183: LD_ADDR_VAR 0 4
48187: PUSH
48188: LD_VAR 0 5
48192: ST_TO_ADDR
// end ;
48193: LD_VAR 0 4
48197: RET
// export function ComComplete ( units , b ) ; var i ; begin
48198: LD_INT 0
48200: PPUSH
48201: PPUSH
// if not units then
48202: LD_VAR 0 1
48206: NOT
48207: IFFALSE 48211
// exit ;
48209: GO 48301
// for i in units do
48211: LD_ADDR_VAR 0 4
48215: PUSH
48216: LD_VAR 0 1
48220: PUSH
48221: FOR_IN
48222: IFFALSE 48299
// if BuildingStatus ( b ) = bs_build then
48224: LD_VAR 0 2
48228: PPUSH
48229: CALL_OW 461
48233: PUSH
48234: LD_INT 1
48236: EQUAL
48237: IFFALSE 48297
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48239: LD_VAR 0 4
48243: PPUSH
48244: LD_STRING h
48246: PUSH
48247: LD_VAR 0 2
48251: PPUSH
48252: CALL_OW 250
48256: PUSH
48257: LD_VAR 0 2
48261: PPUSH
48262: CALL_OW 251
48266: PUSH
48267: LD_VAR 0 2
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: PPUSH
48293: CALL_OW 446
48297: GO 48221
48299: POP
48300: POP
// end ;
48301: LD_VAR 0 3
48305: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48306: LD_INT 0
48308: PPUSH
48309: PPUSH
48310: PPUSH
48311: PPUSH
48312: PPUSH
48313: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48314: LD_VAR 0 1
48318: NOT
48319: PUSH
48320: LD_VAR 0 1
48324: PPUSH
48325: CALL_OW 263
48329: PUSH
48330: LD_INT 2
48332: NONEQUAL
48333: OR
48334: IFFALSE 48338
// exit ;
48336: GO 48654
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48338: LD_ADDR_VAR 0 6
48342: PUSH
48343: LD_INT 22
48345: PUSH
48346: LD_VAR 0 1
48350: PPUSH
48351: CALL_OW 255
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 30
48365: PUSH
48366: LD_INT 36
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 34
48375: PUSH
48376: LD_INT 31
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PPUSH
48392: CALL_OW 69
48396: ST_TO_ADDR
// if not tmp then
48397: LD_VAR 0 6
48401: NOT
48402: IFFALSE 48406
// exit ;
48404: GO 48654
// result := [ ] ;
48406: LD_ADDR_VAR 0 2
48410: PUSH
48411: EMPTY
48412: ST_TO_ADDR
// for i in tmp do
48413: LD_ADDR_VAR 0 3
48417: PUSH
48418: LD_VAR 0 6
48422: PUSH
48423: FOR_IN
48424: IFFALSE 48495
// begin t := UnitsInside ( i ) ;
48426: LD_ADDR_VAR 0 4
48430: PUSH
48431: LD_VAR 0 3
48435: PPUSH
48436: CALL_OW 313
48440: ST_TO_ADDR
// if t then
48441: LD_VAR 0 4
48445: IFFALSE 48493
// for j in t do
48447: LD_ADDR_VAR 0 7
48451: PUSH
48452: LD_VAR 0 4
48456: PUSH
48457: FOR_IN
48458: IFFALSE 48491
// result := Replace ( result , result + 1 , j ) ;
48460: LD_ADDR_VAR 0 2
48464: PUSH
48465: LD_VAR 0 2
48469: PPUSH
48470: LD_VAR 0 2
48474: PUSH
48475: LD_INT 1
48477: PLUS
48478: PPUSH
48479: LD_VAR 0 7
48483: PPUSH
48484: CALL_OW 1
48488: ST_TO_ADDR
48489: GO 48457
48491: POP
48492: POP
// end ;
48493: GO 48423
48495: POP
48496: POP
// if not result then
48497: LD_VAR 0 2
48501: NOT
48502: IFFALSE 48506
// exit ;
48504: GO 48654
// mech := result [ 1 ] ;
48506: LD_ADDR_VAR 0 5
48510: PUSH
48511: LD_VAR 0 2
48515: PUSH
48516: LD_INT 1
48518: ARRAY
48519: ST_TO_ADDR
// if result > 1 then
48520: LD_VAR 0 2
48524: PUSH
48525: LD_INT 1
48527: GREATER
48528: IFFALSE 48640
// begin for i = 2 to result do
48530: LD_ADDR_VAR 0 3
48534: PUSH
48535: DOUBLE
48536: LD_INT 2
48538: DEC
48539: ST_TO_ADDR
48540: LD_VAR 0 2
48544: PUSH
48545: FOR_TO
48546: IFFALSE 48638
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48548: LD_ADDR_VAR 0 4
48552: PUSH
48553: LD_VAR 0 2
48557: PUSH
48558: LD_VAR 0 3
48562: ARRAY
48563: PPUSH
48564: LD_INT 3
48566: PPUSH
48567: CALL_OW 259
48571: PUSH
48572: LD_VAR 0 2
48576: PUSH
48577: LD_VAR 0 3
48581: ARRAY
48582: PPUSH
48583: CALL_OW 432
48587: MINUS
48588: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48589: LD_VAR 0 4
48593: PUSH
48594: LD_VAR 0 5
48598: PPUSH
48599: LD_INT 3
48601: PPUSH
48602: CALL_OW 259
48606: PUSH
48607: LD_VAR 0 5
48611: PPUSH
48612: CALL_OW 432
48616: MINUS
48617: GREATEREQUAL
48618: IFFALSE 48636
// mech := result [ i ] ;
48620: LD_ADDR_VAR 0 5
48624: PUSH
48625: LD_VAR 0 2
48629: PUSH
48630: LD_VAR 0 3
48634: ARRAY
48635: ST_TO_ADDR
// end ;
48636: GO 48545
48638: POP
48639: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48640: LD_VAR 0 1
48644: PPUSH
48645: LD_VAR 0 5
48649: PPUSH
48650: CALL_OW 135
// end ;
48654: LD_VAR 0 2
48658: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48659: LD_INT 0
48661: PPUSH
48662: PPUSH
48663: PPUSH
48664: PPUSH
48665: PPUSH
48666: PPUSH
48667: PPUSH
48668: PPUSH
48669: PPUSH
48670: PPUSH
48671: PPUSH
48672: PPUSH
48673: PPUSH
// result := [ ] ;
48674: LD_ADDR_VAR 0 7
48678: PUSH
48679: EMPTY
48680: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48681: LD_VAR 0 1
48685: PPUSH
48686: CALL_OW 266
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: IN
48701: NOT
48702: IFFALSE 48706
// exit ;
48704: GO 50340
// if name then
48706: LD_VAR 0 3
48710: IFFALSE 48726
// SetBName ( base_dep , name ) ;
48712: LD_VAR 0 1
48716: PPUSH
48717: LD_VAR 0 3
48721: PPUSH
48722: CALL_OW 500
// base := GetBase ( base_dep ) ;
48726: LD_ADDR_VAR 0 15
48730: PUSH
48731: LD_VAR 0 1
48735: PPUSH
48736: CALL_OW 274
48740: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48741: LD_ADDR_VAR 0 16
48745: PUSH
48746: LD_VAR 0 1
48750: PPUSH
48751: CALL_OW 255
48755: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48756: LD_ADDR_VAR 0 17
48760: PUSH
48761: LD_VAR 0 1
48765: PPUSH
48766: CALL_OW 248
48770: ST_TO_ADDR
// if sources then
48771: LD_VAR 0 5
48775: IFFALSE 48822
// for i = 1 to 3 do
48777: LD_ADDR_VAR 0 8
48781: PUSH
48782: DOUBLE
48783: LD_INT 1
48785: DEC
48786: ST_TO_ADDR
48787: LD_INT 3
48789: PUSH
48790: FOR_TO
48791: IFFALSE 48820
// AddResourceType ( base , i , sources [ i ] ) ;
48793: LD_VAR 0 15
48797: PPUSH
48798: LD_VAR 0 8
48802: PPUSH
48803: LD_VAR 0 5
48807: PUSH
48808: LD_VAR 0 8
48812: ARRAY
48813: PPUSH
48814: CALL_OW 276
48818: GO 48790
48820: POP
48821: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48822: LD_ADDR_VAR 0 18
48826: PUSH
48827: LD_VAR 0 15
48831: PPUSH
48832: LD_VAR 0 2
48836: PPUSH
48837: LD_INT 1
48839: PPUSH
48840: CALL 48083 0 3
48844: ST_TO_ADDR
// InitHc ;
48845: CALL_OW 19
// InitUc ;
48849: CALL_OW 18
// uc_side := side ;
48853: LD_ADDR_OWVAR 20
48857: PUSH
48858: LD_VAR 0 16
48862: ST_TO_ADDR
// uc_nation := nation ;
48863: LD_ADDR_OWVAR 21
48867: PUSH
48868: LD_VAR 0 17
48872: ST_TO_ADDR
// if buildings then
48873: LD_VAR 0 18
48877: IFFALSE 50199
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48879: LD_ADDR_VAR 0 19
48883: PUSH
48884: LD_VAR 0 18
48888: PPUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 30
48894: PUSH
48895: LD_INT 29
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 30
48904: PUSH
48905: LD_INT 30
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: LIST
48916: PPUSH
48917: CALL_OW 72
48921: ST_TO_ADDR
// if tmp then
48922: LD_VAR 0 19
48926: IFFALSE 48974
// for i in tmp do
48928: LD_ADDR_VAR 0 8
48932: PUSH
48933: LD_VAR 0 19
48937: PUSH
48938: FOR_IN
48939: IFFALSE 48972
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48941: LD_VAR 0 8
48945: PPUSH
48946: CALL_OW 250
48950: PPUSH
48951: LD_VAR 0 8
48955: PPUSH
48956: CALL_OW 251
48960: PPUSH
48961: LD_VAR 0 16
48965: PPUSH
48966: CALL_OW 441
48970: GO 48938
48972: POP
48973: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48974: LD_VAR 0 18
48978: PPUSH
48979: LD_INT 2
48981: PUSH
48982: LD_INT 30
48984: PUSH
48985: LD_INT 32
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 30
48994: PUSH
48995: LD_INT 33
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: PPUSH
49007: CALL_OW 72
49011: IFFALSE 49099
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49013: LD_ADDR_VAR 0 8
49017: PUSH
49018: LD_VAR 0 18
49022: PPUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 30
49028: PUSH
49029: LD_INT 32
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 30
49038: PUSH
49039: LD_INT 33
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: PPUSH
49051: CALL_OW 72
49055: PUSH
49056: FOR_IN
49057: IFFALSE 49097
// begin if not GetBWeapon ( i ) then
49059: LD_VAR 0 8
49063: PPUSH
49064: CALL_OW 269
49068: NOT
49069: IFFALSE 49095
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49071: LD_VAR 0 8
49075: PPUSH
49076: LD_VAR 0 8
49080: PPUSH
49081: LD_VAR 0 2
49085: PPUSH
49086: CALL 50345 0 2
49090: PPUSH
49091: CALL_OW 431
// end ;
49095: GO 49056
49097: POP
49098: POP
// end ; for i = 1 to personel do
49099: LD_ADDR_VAR 0 8
49103: PUSH
49104: DOUBLE
49105: LD_INT 1
49107: DEC
49108: ST_TO_ADDR
49109: LD_VAR 0 6
49113: PUSH
49114: FOR_TO
49115: IFFALSE 50179
// begin if i > 4 then
49117: LD_VAR 0 8
49121: PUSH
49122: LD_INT 4
49124: GREATER
49125: IFFALSE 49129
// break ;
49127: GO 50179
// case i of 1 :
49129: LD_VAR 0 8
49133: PUSH
49134: LD_INT 1
49136: DOUBLE
49137: EQUAL
49138: IFTRUE 49142
49140: GO 49222
49142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49143: LD_ADDR_VAR 0 12
49147: PUSH
49148: LD_VAR 0 18
49152: PPUSH
49153: LD_INT 22
49155: PUSH
49156: LD_VAR 0 16
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 58
49167: PUSH
49168: EMPTY
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: LD_INT 30
49176: PUSH
49177: LD_INT 32
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 30
49186: PUSH
49187: LD_INT 4
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 30
49196: PUSH
49197: LD_INT 5
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: PPUSH
49215: CALL_OW 72
49219: ST_TO_ADDR
49220: GO 49444
49222: LD_INT 2
49224: DOUBLE
49225: EQUAL
49226: IFTRUE 49230
49228: GO 49292
49230: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49231: LD_ADDR_VAR 0 12
49235: PUSH
49236: LD_VAR 0 18
49240: PPUSH
49241: LD_INT 22
49243: PUSH
49244: LD_VAR 0 16
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 30
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 30
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PPUSH
49285: CALL_OW 72
49289: ST_TO_ADDR
49290: GO 49444
49292: LD_INT 3
49294: DOUBLE
49295: EQUAL
49296: IFTRUE 49300
49298: GO 49362
49300: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49301: LD_ADDR_VAR 0 12
49305: PUSH
49306: LD_VAR 0 18
49310: PPUSH
49311: LD_INT 22
49313: PUSH
49314: LD_VAR 0 16
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: LD_INT 30
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 30
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PPUSH
49355: CALL_OW 72
49359: ST_TO_ADDR
49360: GO 49444
49362: LD_INT 4
49364: DOUBLE
49365: EQUAL
49366: IFTRUE 49370
49368: GO 49443
49370: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49371: LD_ADDR_VAR 0 12
49375: PUSH
49376: LD_VAR 0 18
49380: PPUSH
49381: LD_INT 22
49383: PUSH
49384: LD_VAR 0 16
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: LD_INT 30
49398: PUSH
49399: LD_INT 6
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 30
49408: PUSH
49409: LD_INT 7
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 30
49418: PUSH
49419: LD_INT 8
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PPUSH
49436: CALL_OW 72
49440: ST_TO_ADDR
49441: GO 49444
49443: POP
// if i = 1 then
49444: LD_VAR 0 8
49448: PUSH
49449: LD_INT 1
49451: EQUAL
49452: IFFALSE 49563
// begin tmp := [ ] ;
49454: LD_ADDR_VAR 0 19
49458: PUSH
49459: EMPTY
49460: ST_TO_ADDR
// for j in f do
49461: LD_ADDR_VAR 0 9
49465: PUSH
49466: LD_VAR 0 12
49470: PUSH
49471: FOR_IN
49472: IFFALSE 49545
// if GetBType ( j ) = b_bunker then
49474: LD_VAR 0 9
49478: PPUSH
49479: CALL_OW 266
49483: PUSH
49484: LD_INT 32
49486: EQUAL
49487: IFFALSE 49514
// tmp := Insert ( tmp , 1 , j ) else
49489: LD_ADDR_VAR 0 19
49493: PUSH
49494: LD_VAR 0 19
49498: PPUSH
49499: LD_INT 1
49501: PPUSH
49502: LD_VAR 0 9
49506: PPUSH
49507: CALL_OW 2
49511: ST_TO_ADDR
49512: GO 49543
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49514: LD_ADDR_VAR 0 19
49518: PUSH
49519: LD_VAR 0 19
49523: PPUSH
49524: LD_VAR 0 19
49528: PUSH
49529: LD_INT 1
49531: PLUS
49532: PPUSH
49533: LD_VAR 0 9
49537: PPUSH
49538: CALL_OW 2
49542: ST_TO_ADDR
49543: GO 49471
49545: POP
49546: POP
// if tmp then
49547: LD_VAR 0 19
49551: IFFALSE 49563
// f := tmp ;
49553: LD_ADDR_VAR 0 12
49557: PUSH
49558: LD_VAR 0 19
49562: ST_TO_ADDR
// end ; x := personel [ i ] ;
49563: LD_ADDR_VAR 0 13
49567: PUSH
49568: LD_VAR 0 6
49572: PUSH
49573: LD_VAR 0 8
49577: ARRAY
49578: ST_TO_ADDR
// if x = - 1 then
49579: LD_VAR 0 13
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: EQUAL
49588: IFFALSE 49797
// begin for j in f do
49590: LD_ADDR_VAR 0 9
49594: PUSH
49595: LD_VAR 0 12
49599: PUSH
49600: FOR_IN
49601: IFFALSE 49793
// repeat InitHc ;
49603: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49607: LD_VAR 0 9
49611: PPUSH
49612: CALL_OW 266
49616: PUSH
49617: LD_INT 5
49619: EQUAL
49620: IFFALSE 49690
// begin if UnitsInside ( j ) < 3 then
49622: LD_VAR 0 9
49626: PPUSH
49627: CALL_OW 313
49631: PUSH
49632: LD_INT 3
49634: LESS
49635: IFFALSE 49671
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49637: LD_INT 0
49639: PPUSH
49640: LD_INT 5
49642: PUSH
49643: LD_INT 8
49645: PUSH
49646: LD_INT 9
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: PUSH
49654: LD_VAR 0 17
49658: ARRAY
49659: PPUSH
49660: LD_VAR 0 4
49664: PPUSH
49665: CALL_OW 380
49669: GO 49688
// PrepareHuman ( false , i , skill ) ;
49671: LD_INT 0
49673: PPUSH
49674: LD_VAR 0 8
49678: PPUSH
49679: LD_VAR 0 4
49683: PPUSH
49684: CALL_OW 380
// end else
49688: GO 49707
// PrepareHuman ( false , i , skill ) ;
49690: LD_INT 0
49692: PPUSH
49693: LD_VAR 0 8
49697: PPUSH
49698: LD_VAR 0 4
49702: PPUSH
49703: CALL_OW 380
// un := CreateHuman ;
49707: LD_ADDR_VAR 0 14
49711: PUSH
49712: CALL_OW 44
49716: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49717: LD_ADDR_VAR 0 7
49721: PUSH
49722: LD_VAR 0 7
49726: PPUSH
49727: LD_INT 1
49729: PPUSH
49730: LD_VAR 0 14
49734: PPUSH
49735: CALL_OW 2
49739: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49740: LD_VAR 0 14
49744: PPUSH
49745: LD_VAR 0 9
49749: PPUSH
49750: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49754: LD_VAR 0 9
49758: PPUSH
49759: CALL_OW 313
49763: PUSH
49764: LD_INT 6
49766: EQUAL
49767: PUSH
49768: LD_VAR 0 9
49772: PPUSH
49773: CALL_OW 266
49777: PUSH
49778: LD_INT 32
49780: PUSH
49781: LD_INT 31
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: IN
49788: OR
49789: IFFALSE 49603
49791: GO 49600
49793: POP
49794: POP
// end else
49795: GO 50177
// for j = 1 to x do
49797: LD_ADDR_VAR 0 9
49801: PUSH
49802: DOUBLE
49803: LD_INT 1
49805: DEC
49806: ST_TO_ADDR
49807: LD_VAR 0 13
49811: PUSH
49812: FOR_TO
49813: IFFALSE 50175
// begin InitHc ;
49815: CALL_OW 19
// if not f then
49819: LD_VAR 0 12
49823: NOT
49824: IFFALSE 49913
// begin PrepareHuman ( false , i , skill ) ;
49826: LD_INT 0
49828: PPUSH
49829: LD_VAR 0 8
49833: PPUSH
49834: LD_VAR 0 4
49838: PPUSH
49839: CALL_OW 380
// un := CreateHuman ;
49843: LD_ADDR_VAR 0 14
49847: PUSH
49848: CALL_OW 44
49852: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49853: LD_ADDR_VAR 0 7
49857: PUSH
49858: LD_VAR 0 7
49862: PPUSH
49863: LD_INT 1
49865: PPUSH
49866: LD_VAR 0 14
49870: PPUSH
49871: CALL_OW 2
49875: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49876: LD_VAR 0 14
49880: PPUSH
49881: LD_VAR 0 1
49885: PPUSH
49886: CALL_OW 250
49890: PPUSH
49891: LD_VAR 0 1
49895: PPUSH
49896: CALL_OW 251
49900: PPUSH
49901: LD_INT 10
49903: PPUSH
49904: LD_INT 0
49906: PPUSH
49907: CALL_OW 50
// continue ;
49911: GO 49812
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49913: LD_VAR 0 12
49917: PUSH
49918: LD_INT 1
49920: ARRAY
49921: PPUSH
49922: CALL_OW 313
49926: PUSH
49927: LD_VAR 0 12
49931: PUSH
49932: LD_INT 1
49934: ARRAY
49935: PPUSH
49936: CALL_OW 266
49940: PUSH
49941: LD_INT 32
49943: PUSH
49944: LD_INT 31
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: IN
49951: AND
49952: PUSH
49953: LD_VAR 0 12
49957: PUSH
49958: LD_INT 1
49960: ARRAY
49961: PPUSH
49962: CALL_OW 313
49966: PUSH
49967: LD_INT 6
49969: EQUAL
49970: OR
49971: IFFALSE 49991
// f := Delete ( f , 1 ) ;
49973: LD_ADDR_VAR 0 12
49977: PUSH
49978: LD_VAR 0 12
49982: PPUSH
49983: LD_INT 1
49985: PPUSH
49986: CALL_OW 3
49990: ST_TO_ADDR
// if not f then
49991: LD_VAR 0 12
49995: NOT
49996: IFFALSE 50014
// begin x := x + 2 ;
49998: LD_ADDR_VAR 0 13
50002: PUSH
50003: LD_VAR 0 13
50007: PUSH
50008: LD_INT 2
50010: PLUS
50011: ST_TO_ADDR
// continue ;
50012: GO 49812
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50014: LD_VAR 0 12
50018: PUSH
50019: LD_INT 1
50021: ARRAY
50022: PPUSH
50023: CALL_OW 266
50027: PUSH
50028: LD_INT 5
50030: EQUAL
50031: IFFALSE 50105
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50033: LD_VAR 0 12
50037: PUSH
50038: LD_INT 1
50040: ARRAY
50041: PPUSH
50042: CALL_OW 313
50046: PUSH
50047: LD_INT 3
50049: LESS
50050: IFFALSE 50086
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50052: LD_INT 0
50054: PPUSH
50055: LD_INT 5
50057: PUSH
50058: LD_INT 8
50060: PUSH
50061: LD_INT 9
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: PUSH
50069: LD_VAR 0 17
50073: ARRAY
50074: PPUSH
50075: LD_VAR 0 4
50079: PPUSH
50080: CALL_OW 380
50084: GO 50103
// PrepareHuman ( false , i , skill ) ;
50086: LD_INT 0
50088: PPUSH
50089: LD_VAR 0 8
50093: PPUSH
50094: LD_VAR 0 4
50098: PPUSH
50099: CALL_OW 380
// end else
50103: GO 50122
// PrepareHuman ( false , i , skill ) ;
50105: LD_INT 0
50107: PPUSH
50108: LD_VAR 0 8
50112: PPUSH
50113: LD_VAR 0 4
50117: PPUSH
50118: CALL_OW 380
// un := CreateHuman ;
50122: LD_ADDR_VAR 0 14
50126: PUSH
50127: CALL_OW 44
50131: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50132: LD_ADDR_VAR 0 7
50136: PUSH
50137: LD_VAR 0 7
50141: PPUSH
50142: LD_INT 1
50144: PPUSH
50145: LD_VAR 0 14
50149: PPUSH
50150: CALL_OW 2
50154: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50155: LD_VAR 0 14
50159: PPUSH
50160: LD_VAR 0 12
50164: PUSH
50165: LD_INT 1
50167: ARRAY
50168: PPUSH
50169: CALL_OW 52
// end ;
50173: GO 49812
50175: POP
50176: POP
// end ;
50177: GO 49114
50179: POP
50180: POP
// result := result ^ buildings ;
50181: LD_ADDR_VAR 0 7
50185: PUSH
50186: LD_VAR 0 7
50190: PUSH
50191: LD_VAR 0 18
50195: ADD
50196: ST_TO_ADDR
// end else
50197: GO 50340
// begin for i = 1 to personel do
50199: LD_ADDR_VAR 0 8
50203: PUSH
50204: DOUBLE
50205: LD_INT 1
50207: DEC
50208: ST_TO_ADDR
50209: LD_VAR 0 6
50213: PUSH
50214: FOR_TO
50215: IFFALSE 50338
// begin if i > 4 then
50217: LD_VAR 0 8
50221: PUSH
50222: LD_INT 4
50224: GREATER
50225: IFFALSE 50229
// break ;
50227: GO 50338
// x := personel [ i ] ;
50229: LD_ADDR_VAR 0 13
50233: PUSH
50234: LD_VAR 0 6
50238: PUSH
50239: LD_VAR 0 8
50243: ARRAY
50244: ST_TO_ADDR
// if x = - 1 then
50245: LD_VAR 0 13
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: EQUAL
50254: IFFALSE 50258
// continue ;
50256: GO 50214
// PrepareHuman ( false , i , skill ) ;
50258: LD_INT 0
50260: PPUSH
50261: LD_VAR 0 8
50265: PPUSH
50266: LD_VAR 0 4
50270: PPUSH
50271: CALL_OW 380
// un := CreateHuman ;
50275: LD_ADDR_VAR 0 14
50279: PUSH
50280: CALL_OW 44
50284: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50285: LD_VAR 0 14
50289: PPUSH
50290: LD_VAR 0 1
50294: PPUSH
50295: CALL_OW 250
50299: PPUSH
50300: LD_VAR 0 1
50304: PPUSH
50305: CALL_OW 251
50309: PPUSH
50310: LD_INT 10
50312: PPUSH
50313: LD_INT 0
50315: PPUSH
50316: CALL_OW 50
// result := result ^ un ;
50320: LD_ADDR_VAR 0 7
50324: PUSH
50325: LD_VAR 0 7
50329: PUSH
50330: LD_VAR 0 14
50334: ADD
50335: ST_TO_ADDR
// end ;
50336: GO 50214
50338: POP
50339: POP
// end ; end ;
50340: LD_VAR 0 7
50344: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50345: LD_INT 0
50347: PPUSH
50348: PPUSH
50349: PPUSH
50350: PPUSH
50351: PPUSH
50352: PPUSH
50353: PPUSH
50354: PPUSH
50355: PPUSH
50356: PPUSH
50357: PPUSH
50358: PPUSH
50359: PPUSH
50360: PPUSH
50361: PPUSH
50362: PPUSH
// result := false ;
50363: LD_ADDR_VAR 0 3
50367: PUSH
50368: LD_INT 0
50370: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50371: LD_VAR 0 1
50375: NOT
50376: PUSH
50377: LD_VAR 0 1
50381: PPUSH
50382: CALL_OW 266
50386: PUSH
50387: LD_INT 32
50389: PUSH
50390: LD_INT 33
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: IN
50397: NOT
50398: OR
50399: IFFALSE 50403
// exit ;
50401: GO 51512
// nat := GetNation ( tower ) ;
50403: LD_ADDR_VAR 0 12
50407: PUSH
50408: LD_VAR 0 1
50412: PPUSH
50413: CALL_OW 248
50417: ST_TO_ADDR
// side := GetSide ( tower ) ;
50418: LD_ADDR_VAR 0 16
50422: PUSH
50423: LD_VAR 0 1
50427: PPUSH
50428: CALL_OW 255
50432: ST_TO_ADDR
// x := GetX ( tower ) ;
50433: LD_ADDR_VAR 0 10
50437: PUSH
50438: LD_VAR 0 1
50442: PPUSH
50443: CALL_OW 250
50447: ST_TO_ADDR
// y := GetY ( tower ) ;
50448: LD_ADDR_VAR 0 11
50452: PUSH
50453: LD_VAR 0 1
50457: PPUSH
50458: CALL_OW 251
50462: ST_TO_ADDR
// if not x or not y then
50463: LD_VAR 0 10
50467: NOT
50468: PUSH
50469: LD_VAR 0 11
50473: NOT
50474: OR
50475: IFFALSE 50479
// exit ;
50477: GO 51512
// weapon := 0 ;
50479: LD_ADDR_VAR 0 18
50483: PUSH
50484: LD_INT 0
50486: ST_TO_ADDR
// fac_list := [ ] ;
50487: LD_ADDR_VAR 0 17
50491: PUSH
50492: EMPTY
50493: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50494: LD_ADDR_VAR 0 6
50498: PUSH
50499: LD_VAR 0 1
50503: PPUSH
50504: CALL_OW 274
50508: PPUSH
50509: LD_VAR 0 2
50513: PPUSH
50514: LD_INT 0
50516: PPUSH
50517: CALL 48083 0 3
50521: PPUSH
50522: LD_INT 30
50524: PUSH
50525: LD_INT 3
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PPUSH
50532: CALL_OW 72
50536: ST_TO_ADDR
// if not factories then
50537: LD_VAR 0 6
50541: NOT
50542: IFFALSE 50546
// exit ;
50544: GO 51512
// for i in factories do
50546: LD_ADDR_VAR 0 8
50550: PUSH
50551: LD_VAR 0 6
50555: PUSH
50556: FOR_IN
50557: IFFALSE 50582
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50559: LD_ADDR_VAR 0 17
50563: PUSH
50564: LD_VAR 0 17
50568: PUSH
50569: LD_VAR 0 8
50573: PPUSH
50574: CALL_OW 478
50578: UNION
50579: ST_TO_ADDR
50580: GO 50556
50582: POP
50583: POP
// if not fac_list then
50584: LD_VAR 0 17
50588: NOT
50589: IFFALSE 50593
// exit ;
50591: GO 51512
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50593: LD_ADDR_VAR 0 5
50597: PUSH
50598: LD_INT 4
50600: PUSH
50601: LD_INT 5
50603: PUSH
50604: LD_INT 9
50606: PUSH
50607: LD_INT 10
50609: PUSH
50610: LD_INT 6
50612: PUSH
50613: LD_INT 7
50615: PUSH
50616: LD_INT 11
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 27
50630: PUSH
50631: LD_INT 28
50633: PUSH
50634: LD_INT 26
50636: PUSH
50637: LD_INT 30
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 43
50648: PUSH
50649: LD_INT 44
50651: PUSH
50652: LD_INT 46
50654: PUSH
50655: LD_INT 45
50657: PUSH
50658: LD_INT 47
50660: PUSH
50661: LD_INT 49
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: PUSH
50677: LD_VAR 0 12
50681: ARRAY
50682: ST_TO_ADDR
// list := list isect fac_list ;
50683: LD_ADDR_VAR 0 5
50687: PUSH
50688: LD_VAR 0 5
50692: PUSH
50693: LD_VAR 0 17
50697: ISECT
50698: ST_TO_ADDR
// if not list then
50699: LD_VAR 0 5
50703: NOT
50704: IFFALSE 50708
// exit ;
50706: GO 51512
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50708: LD_VAR 0 12
50712: PUSH
50713: LD_INT 3
50715: EQUAL
50716: PUSH
50717: LD_INT 49
50719: PUSH
50720: LD_VAR 0 5
50724: IN
50725: AND
50726: PUSH
50727: LD_INT 31
50729: PPUSH
50730: LD_VAR 0 16
50734: PPUSH
50735: CALL_OW 321
50739: PUSH
50740: LD_INT 2
50742: EQUAL
50743: AND
50744: IFFALSE 50804
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50746: LD_INT 22
50748: PUSH
50749: LD_VAR 0 16
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 35
50760: PUSH
50761: LD_INT 49
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 91
50770: PUSH
50771: LD_VAR 0 1
50775: PUSH
50776: LD_INT 10
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: PPUSH
50789: CALL_OW 69
50793: NOT
50794: IFFALSE 50804
// weapon := ru_time_lapser ;
50796: LD_ADDR_VAR 0 18
50800: PUSH
50801: LD_INT 49
50803: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50804: LD_VAR 0 12
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: IN
50819: PUSH
50820: LD_INT 11
50822: PUSH
50823: LD_VAR 0 5
50827: IN
50828: PUSH
50829: LD_INT 30
50831: PUSH
50832: LD_VAR 0 5
50836: IN
50837: OR
50838: AND
50839: PUSH
50840: LD_INT 6
50842: PPUSH
50843: LD_VAR 0 16
50847: PPUSH
50848: CALL_OW 321
50852: PUSH
50853: LD_INT 2
50855: EQUAL
50856: AND
50857: IFFALSE 51022
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50859: LD_INT 22
50861: PUSH
50862: LD_VAR 0 16
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 35
50876: PUSH
50877: LD_INT 11
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 35
50886: PUSH
50887: LD_INT 30
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 91
50901: PUSH
50902: LD_VAR 0 1
50906: PUSH
50907: LD_INT 18
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: LIST
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: PPUSH
50920: CALL_OW 69
50924: NOT
50925: PUSH
50926: LD_INT 22
50928: PUSH
50929: LD_VAR 0 16
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 30
50943: PUSH
50944: LD_INT 32
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 30
50953: PUSH
50954: LD_INT 33
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 91
50968: PUSH
50969: LD_VAR 0 1
50973: PUSH
50974: LD_INT 12
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: LIST
50986: PUSH
50987: EMPTY
50988: LIST
50989: PPUSH
50990: CALL_OW 69
50994: PUSH
50995: LD_INT 2
50997: GREATER
50998: AND
50999: IFFALSE 51022
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51001: LD_ADDR_VAR 0 18
51005: PUSH
51006: LD_INT 11
51008: PUSH
51009: LD_INT 30
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_VAR 0 12
51020: ARRAY
51021: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51022: LD_VAR 0 18
51026: NOT
51027: PUSH
51028: LD_INT 40
51030: PPUSH
51031: LD_VAR 0 16
51035: PPUSH
51036: CALL_OW 321
51040: PUSH
51041: LD_INT 2
51043: EQUAL
51044: AND
51045: PUSH
51046: LD_INT 7
51048: PUSH
51049: LD_VAR 0 5
51053: IN
51054: PUSH
51055: LD_INT 28
51057: PUSH
51058: LD_VAR 0 5
51062: IN
51063: OR
51064: PUSH
51065: LD_INT 45
51067: PUSH
51068: LD_VAR 0 5
51072: IN
51073: OR
51074: AND
51075: IFFALSE 51329
// begin hex := GetHexInfo ( x , y ) ;
51077: LD_ADDR_VAR 0 4
51081: PUSH
51082: LD_VAR 0 10
51086: PPUSH
51087: LD_VAR 0 11
51091: PPUSH
51092: CALL_OW 546
51096: ST_TO_ADDR
// if hex [ 1 ] then
51097: LD_VAR 0 4
51101: PUSH
51102: LD_INT 1
51104: ARRAY
51105: IFFALSE 51109
// exit ;
51107: GO 51512
// height := hex [ 2 ] ;
51109: LD_ADDR_VAR 0 15
51113: PUSH
51114: LD_VAR 0 4
51118: PUSH
51119: LD_INT 2
51121: ARRAY
51122: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51123: LD_ADDR_VAR 0 14
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: LD_INT 5
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: ST_TO_ADDR
// for i in tmp do
51146: LD_ADDR_VAR 0 8
51150: PUSH
51151: LD_VAR 0 14
51155: PUSH
51156: FOR_IN
51157: IFFALSE 51327
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51159: LD_ADDR_VAR 0 9
51163: PUSH
51164: LD_VAR 0 10
51168: PPUSH
51169: LD_VAR 0 8
51173: PPUSH
51174: LD_INT 5
51176: PPUSH
51177: CALL_OW 272
51181: PUSH
51182: LD_VAR 0 11
51186: PPUSH
51187: LD_VAR 0 8
51191: PPUSH
51192: LD_INT 5
51194: PPUSH
51195: CALL_OW 273
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51204: LD_VAR 0 9
51208: PUSH
51209: LD_INT 1
51211: ARRAY
51212: PPUSH
51213: LD_VAR 0 9
51217: PUSH
51218: LD_INT 2
51220: ARRAY
51221: PPUSH
51222: CALL_OW 488
51226: IFFALSE 51325
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51228: LD_ADDR_VAR 0 4
51232: PUSH
51233: LD_VAR 0 9
51237: PUSH
51238: LD_INT 1
51240: ARRAY
51241: PPUSH
51242: LD_VAR 0 9
51246: PUSH
51247: LD_INT 2
51249: ARRAY
51250: PPUSH
51251: CALL_OW 546
51255: ST_TO_ADDR
// if hex [ 1 ] then
51256: LD_VAR 0 4
51260: PUSH
51261: LD_INT 1
51263: ARRAY
51264: IFFALSE 51268
// continue ;
51266: GO 51156
// h := hex [ 2 ] ;
51268: LD_ADDR_VAR 0 13
51272: PUSH
51273: LD_VAR 0 4
51277: PUSH
51278: LD_INT 2
51280: ARRAY
51281: ST_TO_ADDR
// if h + 7 < height then
51282: LD_VAR 0 13
51286: PUSH
51287: LD_INT 7
51289: PLUS
51290: PUSH
51291: LD_VAR 0 15
51295: LESS
51296: IFFALSE 51325
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51298: LD_ADDR_VAR 0 18
51302: PUSH
51303: LD_INT 7
51305: PUSH
51306: LD_INT 28
51308: PUSH
51309: LD_INT 45
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: PUSH
51317: LD_VAR 0 12
51321: ARRAY
51322: ST_TO_ADDR
// break ;
51323: GO 51327
// end ; end ; end ;
51325: GO 51156
51327: POP
51328: POP
// end ; if not weapon then
51329: LD_VAR 0 18
51333: NOT
51334: IFFALSE 51394
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51336: LD_ADDR_VAR 0 5
51340: PUSH
51341: LD_VAR 0 5
51345: PUSH
51346: LD_INT 11
51348: PUSH
51349: LD_INT 30
51351: PUSH
51352: LD_INT 49
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: DIFF
51360: ST_TO_ADDR
// if not list then
51361: LD_VAR 0 5
51365: NOT
51366: IFFALSE 51370
// exit ;
51368: GO 51512
// weapon := list [ rand ( 1 , list ) ] ;
51370: LD_ADDR_VAR 0 18
51374: PUSH
51375: LD_VAR 0 5
51379: PUSH
51380: LD_INT 1
51382: PPUSH
51383: LD_VAR 0 5
51387: PPUSH
51388: CALL_OW 12
51392: ARRAY
51393: ST_TO_ADDR
// end ; if weapon then
51394: LD_VAR 0 18
51398: IFFALSE 51512
// begin tmp := CostOfWeapon ( weapon ) ;
51400: LD_ADDR_VAR 0 14
51404: PUSH
51405: LD_VAR 0 18
51409: PPUSH
51410: CALL_OW 451
51414: ST_TO_ADDR
// j := GetBase ( tower ) ;
51415: LD_ADDR_VAR 0 9
51419: PUSH
51420: LD_VAR 0 1
51424: PPUSH
51425: CALL_OW 274
51429: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51430: LD_VAR 0 9
51434: PPUSH
51435: LD_INT 1
51437: PPUSH
51438: CALL_OW 275
51442: PUSH
51443: LD_VAR 0 14
51447: PUSH
51448: LD_INT 1
51450: ARRAY
51451: GREATEREQUAL
51452: PUSH
51453: LD_VAR 0 9
51457: PPUSH
51458: LD_INT 2
51460: PPUSH
51461: CALL_OW 275
51465: PUSH
51466: LD_VAR 0 14
51470: PUSH
51471: LD_INT 2
51473: ARRAY
51474: GREATEREQUAL
51475: AND
51476: PUSH
51477: LD_VAR 0 9
51481: PPUSH
51482: LD_INT 3
51484: PPUSH
51485: CALL_OW 275
51489: PUSH
51490: LD_VAR 0 14
51494: PUSH
51495: LD_INT 3
51497: ARRAY
51498: GREATEREQUAL
51499: AND
51500: IFFALSE 51512
// result := weapon ;
51502: LD_ADDR_VAR 0 3
51506: PUSH
51507: LD_VAR 0 18
51511: ST_TO_ADDR
// end ; end ;
51512: LD_VAR 0 3
51516: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51517: LD_INT 0
51519: PPUSH
51520: PPUSH
// result := true ;
51521: LD_ADDR_VAR 0 3
51525: PUSH
51526: LD_INT 1
51528: ST_TO_ADDR
// if array1 = array2 then
51529: LD_VAR 0 1
51533: PUSH
51534: LD_VAR 0 2
51538: EQUAL
51539: IFFALSE 51599
// begin for i = 1 to array1 do
51541: LD_ADDR_VAR 0 4
51545: PUSH
51546: DOUBLE
51547: LD_INT 1
51549: DEC
51550: ST_TO_ADDR
51551: LD_VAR 0 1
51555: PUSH
51556: FOR_TO
51557: IFFALSE 51595
// if array1 [ i ] <> array2 [ i ] then
51559: LD_VAR 0 1
51563: PUSH
51564: LD_VAR 0 4
51568: ARRAY
51569: PUSH
51570: LD_VAR 0 2
51574: PUSH
51575: LD_VAR 0 4
51579: ARRAY
51580: NONEQUAL
51581: IFFALSE 51593
// begin result := false ;
51583: LD_ADDR_VAR 0 3
51587: PUSH
51588: LD_INT 0
51590: ST_TO_ADDR
// break ;
51591: GO 51595
// end ;
51593: GO 51556
51595: POP
51596: POP
// end else
51597: GO 51607
// result := false ;
51599: LD_ADDR_VAR 0 3
51603: PUSH
51604: LD_INT 0
51606: ST_TO_ADDR
// end ;
51607: LD_VAR 0 3
51611: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51612: LD_INT 0
51614: PPUSH
51615: PPUSH
// if not array1 or not array2 then
51616: LD_VAR 0 1
51620: NOT
51621: PUSH
51622: LD_VAR 0 2
51626: NOT
51627: OR
51628: IFFALSE 51632
// exit ;
51630: GO 51696
// result := true ;
51632: LD_ADDR_VAR 0 3
51636: PUSH
51637: LD_INT 1
51639: ST_TO_ADDR
// for i = 1 to array1 do
51640: LD_ADDR_VAR 0 4
51644: PUSH
51645: DOUBLE
51646: LD_INT 1
51648: DEC
51649: ST_TO_ADDR
51650: LD_VAR 0 1
51654: PUSH
51655: FOR_TO
51656: IFFALSE 51694
// if array1 [ i ] <> array2 [ i ] then
51658: LD_VAR 0 1
51662: PUSH
51663: LD_VAR 0 4
51667: ARRAY
51668: PUSH
51669: LD_VAR 0 2
51673: PUSH
51674: LD_VAR 0 4
51678: ARRAY
51679: NONEQUAL
51680: IFFALSE 51692
// begin result := false ;
51682: LD_ADDR_VAR 0 3
51686: PUSH
51687: LD_INT 0
51689: ST_TO_ADDR
// break ;
51690: GO 51694
// end ;
51692: GO 51655
51694: POP
51695: POP
// end ;
51696: LD_VAR 0 3
51700: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51701: LD_INT 0
51703: PPUSH
51704: PPUSH
51705: PPUSH
// pom := GetBase ( fac ) ;
51706: LD_ADDR_VAR 0 5
51710: PUSH
51711: LD_VAR 0 1
51715: PPUSH
51716: CALL_OW 274
51720: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51721: LD_ADDR_VAR 0 4
51725: PUSH
51726: LD_VAR 0 2
51730: PUSH
51731: LD_INT 1
51733: ARRAY
51734: PPUSH
51735: LD_VAR 0 2
51739: PUSH
51740: LD_INT 2
51742: ARRAY
51743: PPUSH
51744: LD_VAR 0 2
51748: PUSH
51749: LD_INT 3
51751: ARRAY
51752: PPUSH
51753: LD_VAR 0 2
51757: PUSH
51758: LD_INT 4
51760: ARRAY
51761: PPUSH
51762: CALL_OW 449
51766: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51767: LD_ADDR_VAR 0 3
51771: PUSH
51772: LD_VAR 0 5
51776: PPUSH
51777: LD_INT 1
51779: PPUSH
51780: CALL_OW 275
51784: PUSH
51785: LD_VAR 0 4
51789: PUSH
51790: LD_INT 1
51792: ARRAY
51793: GREATEREQUAL
51794: PUSH
51795: LD_VAR 0 5
51799: PPUSH
51800: LD_INT 2
51802: PPUSH
51803: CALL_OW 275
51807: PUSH
51808: LD_VAR 0 4
51812: PUSH
51813: LD_INT 2
51815: ARRAY
51816: GREATEREQUAL
51817: AND
51818: PUSH
51819: LD_VAR 0 5
51823: PPUSH
51824: LD_INT 3
51826: PPUSH
51827: CALL_OW 275
51831: PUSH
51832: LD_VAR 0 4
51836: PUSH
51837: LD_INT 3
51839: ARRAY
51840: GREATEREQUAL
51841: AND
51842: ST_TO_ADDR
// end ;
51843: LD_VAR 0 3
51847: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51848: LD_INT 0
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
// pom := GetBase ( building ) ;
51854: LD_ADDR_VAR 0 3
51858: PUSH
51859: LD_VAR 0 1
51863: PPUSH
51864: CALL_OW 274
51868: ST_TO_ADDR
// if not pom then
51869: LD_VAR 0 3
51873: NOT
51874: IFFALSE 51878
// exit ;
51876: GO 52048
// btype := GetBType ( building ) ;
51878: LD_ADDR_VAR 0 5
51882: PUSH
51883: LD_VAR 0 1
51887: PPUSH
51888: CALL_OW 266
51892: ST_TO_ADDR
// if btype = b_armoury then
51893: LD_VAR 0 5
51897: PUSH
51898: LD_INT 4
51900: EQUAL
51901: IFFALSE 51911
// btype := b_barracks ;
51903: LD_ADDR_VAR 0 5
51907: PUSH
51908: LD_INT 5
51910: ST_TO_ADDR
// if btype = b_depot then
51911: LD_VAR 0 5
51915: PUSH
51916: LD_INT 0
51918: EQUAL
51919: IFFALSE 51929
// btype := b_warehouse ;
51921: LD_ADDR_VAR 0 5
51925: PUSH
51926: LD_INT 1
51928: ST_TO_ADDR
// if btype = b_workshop then
51929: LD_VAR 0 5
51933: PUSH
51934: LD_INT 2
51936: EQUAL
51937: IFFALSE 51947
// btype := b_factory ;
51939: LD_ADDR_VAR 0 5
51943: PUSH
51944: LD_INT 3
51946: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51947: LD_ADDR_VAR 0 4
51951: PUSH
51952: LD_VAR 0 5
51956: PPUSH
51957: LD_VAR 0 1
51961: PPUSH
51962: CALL_OW 248
51966: PPUSH
51967: CALL_OW 450
51971: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51972: LD_ADDR_VAR 0 2
51976: PUSH
51977: LD_VAR 0 3
51981: PPUSH
51982: LD_INT 1
51984: PPUSH
51985: CALL_OW 275
51989: PUSH
51990: LD_VAR 0 4
51994: PUSH
51995: LD_INT 1
51997: ARRAY
51998: GREATEREQUAL
51999: PUSH
52000: LD_VAR 0 3
52004: PPUSH
52005: LD_INT 2
52007: PPUSH
52008: CALL_OW 275
52012: PUSH
52013: LD_VAR 0 4
52017: PUSH
52018: LD_INT 2
52020: ARRAY
52021: GREATEREQUAL
52022: AND
52023: PUSH
52024: LD_VAR 0 3
52028: PPUSH
52029: LD_INT 3
52031: PPUSH
52032: CALL_OW 275
52036: PUSH
52037: LD_VAR 0 4
52041: PUSH
52042: LD_INT 3
52044: ARRAY
52045: GREATEREQUAL
52046: AND
52047: ST_TO_ADDR
// end ;
52048: LD_VAR 0 2
52052: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52053: LD_INT 0
52055: PPUSH
52056: PPUSH
52057: PPUSH
// pom := GetBase ( building ) ;
52058: LD_ADDR_VAR 0 4
52062: PUSH
52063: LD_VAR 0 1
52067: PPUSH
52068: CALL_OW 274
52072: ST_TO_ADDR
// if not pom then
52073: LD_VAR 0 4
52077: NOT
52078: IFFALSE 52082
// exit ;
52080: GO 52183
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52082: LD_ADDR_VAR 0 5
52086: PUSH
52087: LD_VAR 0 2
52091: PPUSH
52092: LD_VAR 0 1
52096: PPUSH
52097: CALL_OW 248
52101: PPUSH
52102: CALL_OW 450
52106: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52107: LD_ADDR_VAR 0 3
52111: PUSH
52112: LD_VAR 0 4
52116: PPUSH
52117: LD_INT 1
52119: PPUSH
52120: CALL_OW 275
52124: PUSH
52125: LD_VAR 0 5
52129: PUSH
52130: LD_INT 1
52132: ARRAY
52133: GREATEREQUAL
52134: PUSH
52135: LD_VAR 0 4
52139: PPUSH
52140: LD_INT 2
52142: PPUSH
52143: CALL_OW 275
52147: PUSH
52148: LD_VAR 0 5
52152: PUSH
52153: LD_INT 2
52155: ARRAY
52156: GREATEREQUAL
52157: AND
52158: PUSH
52159: LD_VAR 0 4
52163: PPUSH
52164: LD_INT 3
52166: PPUSH
52167: CALL_OW 275
52171: PUSH
52172: LD_VAR 0 5
52176: PUSH
52177: LD_INT 3
52179: ARRAY
52180: GREATEREQUAL
52181: AND
52182: ST_TO_ADDR
// end ;
52183: LD_VAR 0 3
52187: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52188: LD_INT 0
52190: PPUSH
52191: PPUSH
52192: PPUSH
52193: PPUSH
52194: PPUSH
52195: PPUSH
52196: PPUSH
52197: PPUSH
52198: PPUSH
52199: PPUSH
52200: PPUSH
// result := false ;
52201: LD_ADDR_VAR 0 8
52205: PUSH
52206: LD_INT 0
52208: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52209: LD_VAR 0 5
52213: NOT
52214: PUSH
52215: LD_VAR 0 1
52219: NOT
52220: OR
52221: PUSH
52222: LD_VAR 0 2
52226: NOT
52227: OR
52228: PUSH
52229: LD_VAR 0 3
52233: NOT
52234: OR
52235: IFFALSE 52239
// exit ;
52237: GO 53053
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52239: LD_ADDR_VAR 0 14
52243: PUSH
52244: LD_VAR 0 1
52248: PPUSH
52249: LD_VAR 0 2
52253: PPUSH
52254: LD_VAR 0 3
52258: PPUSH
52259: LD_VAR 0 4
52263: PPUSH
52264: LD_VAR 0 5
52268: PUSH
52269: LD_INT 1
52271: ARRAY
52272: PPUSH
52273: CALL_OW 248
52277: PPUSH
52278: LD_INT 0
52280: PPUSH
52281: CALL 54286 0 6
52285: ST_TO_ADDR
// if not hexes then
52286: LD_VAR 0 14
52290: NOT
52291: IFFALSE 52295
// exit ;
52293: GO 53053
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52295: LD_ADDR_VAR 0 17
52299: PUSH
52300: LD_VAR 0 5
52304: PPUSH
52305: LD_INT 22
52307: PUSH
52308: LD_VAR 0 13
52312: PPUSH
52313: CALL_OW 255
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 30
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 30
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PPUSH
52354: CALL_OW 72
52358: ST_TO_ADDR
// for i = 1 to hexes do
52359: LD_ADDR_VAR 0 9
52363: PUSH
52364: DOUBLE
52365: LD_INT 1
52367: DEC
52368: ST_TO_ADDR
52369: LD_VAR 0 14
52373: PUSH
52374: FOR_TO
52375: IFFALSE 53051
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52377: LD_ADDR_VAR 0 13
52381: PUSH
52382: LD_VAR 0 14
52386: PUSH
52387: LD_VAR 0 9
52391: ARRAY
52392: PUSH
52393: LD_INT 1
52395: ARRAY
52396: PPUSH
52397: LD_VAR 0 14
52401: PUSH
52402: LD_VAR 0 9
52406: ARRAY
52407: PUSH
52408: LD_INT 2
52410: ARRAY
52411: PPUSH
52412: CALL_OW 428
52416: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52417: LD_VAR 0 14
52421: PUSH
52422: LD_VAR 0 9
52426: ARRAY
52427: PUSH
52428: LD_INT 1
52430: ARRAY
52431: PPUSH
52432: LD_VAR 0 14
52436: PUSH
52437: LD_VAR 0 9
52441: ARRAY
52442: PUSH
52443: LD_INT 2
52445: ARRAY
52446: PPUSH
52447: CALL_OW 351
52451: PUSH
52452: LD_VAR 0 14
52456: PUSH
52457: LD_VAR 0 9
52461: ARRAY
52462: PUSH
52463: LD_INT 1
52465: ARRAY
52466: PPUSH
52467: LD_VAR 0 14
52471: PUSH
52472: LD_VAR 0 9
52476: ARRAY
52477: PUSH
52478: LD_INT 2
52480: ARRAY
52481: PPUSH
52482: CALL_OW 488
52486: NOT
52487: OR
52488: PUSH
52489: LD_VAR 0 13
52493: PPUSH
52494: CALL_OW 247
52498: PUSH
52499: LD_INT 3
52501: EQUAL
52502: OR
52503: IFFALSE 52509
// exit ;
52505: POP
52506: POP
52507: GO 53053
// if not tmp then
52509: LD_VAR 0 13
52513: NOT
52514: IFFALSE 52518
// continue ;
52516: GO 52374
// result := true ;
52518: LD_ADDR_VAR 0 8
52522: PUSH
52523: LD_INT 1
52525: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52526: LD_VAR 0 6
52530: PUSH
52531: LD_VAR 0 13
52535: PPUSH
52536: CALL_OW 247
52540: PUSH
52541: LD_INT 2
52543: EQUAL
52544: AND
52545: PUSH
52546: LD_VAR 0 13
52550: PPUSH
52551: CALL_OW 263
52555: PUSH
52556: LD_INT 1
52558: EQUAL
52559: AND
52560: IFFALSE 52724
// begin if IsDrivenBy ( tmp ) then
52562: LD_VAR 0 13
52566: PPUSH
52567: CALL_OW 311
52571: IFFALSE 52575
// continue ;
52573: GO 52374
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52575: LD_VAR 0 6
52579: PPUSH
52580: LD_INT 3
52582: PUSH
52583: LD_INT 60
52585: PUSH
52586: EMPTY
52587: LIST
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: LD_INT 55
52598: PUSH
52599: EMPTY
52600: LIST
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PPUSH
52610: CALL_OW 72
52614: IFFALSE 52722
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52616: LD_ADDR_VAR 0 18
52620: PUSH
52621: LD_VAR 0 6
52625: PPUSH
52626: LD_INT 3
52628: PUSH
52629: LD_INT 60
52631: PUSH
52632: EMPTY
52633: LIST
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 3
52641: PUSH
52642: LD_INT 55
52644: PUSH
52645: EMPTY
52646: LIST
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PPUSH
52656: CALL_OW 72
52660: PUSH
52661: LD_INT 1
52663: ARRAY
52664: ST_TO_ADDR
// if IsInUnit ( driver ) then
52665: LD_VAR 0 18
52669: PPUSH
52670: CALL_OW 310
52674: IFFALSE 52685
// ComExit ( driver ) ;
52676: LD_VAR 0 18
52680: PPUSH
52681: CALL 78066 0 1
// AddComEnterUnit ( driver , tmp ) ;
52685: LD_VAR 0 18
52689: PPUSH
52690: LD_VAR 0 13
52694: PPUSH
52695: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52699: LD_VAR 0 18
52703: PPUSH
52704: LD_VAR 0 7
52708: PPUSH
52709: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52713: LD_VAR 0 18
52717: PPUSH
52718: CALL_OW 181
// end ; continue ;
52722: GO 52374
// end ; if not cleaners or not tmp in cleaners then
52724: LD_VAR 0 6
52728: NOT
52729: PUSH
52730: LD_VAR 0 13
52734: PUSH
52735: LD_VAR 0 6
52739: IN
52740: NOT
52741: OR
52742: IFFALSE 53049
// begin if dep then
52744: LD_VAR 0 17
52748: IFFALSE 52884
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52750: LD_ADDR_VAR 0 16
52754: PUSH
52755: LD_VAR 0 17
52759: PUSH
52760: LD_INT 1
52762: ARRAY
52763: PPUSH
52764: CALL_OW 250
52768: PPUSH
52769: LD_VAR 0 17
52773: PUSH
52774: LD_INT 1
52776: ARRAY
52777: PPUSH
52778: CALL_OW 254
52782: PPUSH
52783: LD_INT 5
52785: PPUSH
52786: CALL_OW 272
52790: PUSH
52791: LD_VAR 0 17
52795: PUSH
52796: LD_INT 1
52798: ARRAY
52799: PPUSH
52800: CALL_OW 251
52804: PPUSH
52805: LD_VAR 0 17
52809: PUSH
52810: LD_INT 1
52812: ARRAY
52813: PPUSH
52814: CALL_OW 254
52818: PPUSH
52819: LD_INT 5
52821: PPUSH
52822: CALL_OW 273
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52831: LD_VAR 0 16
52835: PUSH
52836: LD_INT 1
52838: ARRAY
52839: PPUSH
52840: LD_VAR 0 16
52844: PUSH
52845: LD_INT 2
52847: ARRAY
52848: PPUSH
52849: CALL_OW 488
52853: IFFALSE 52884
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52855: LD_VAR 0 13
52859: PPUSH
52860: LD_VAR 0 16
52864: PUSH
52865: LD_INT 1
52867: ARRAY
52868: PPUSH
52869: LD_VAR 0 16
52873: PUSH
52874: LD_INT 2
52876: ARRAY
52877: PPUSH
52878: CALL_OW 111
// continue ;
52882: GO 52374
// end ; end ; r := GetDir ( tmp ) ;
52884: LD_ADDR_VAR 0 15
52888: PUSH
52889: LD_VAR 0 13
52893: PPUSH
52894: CALL_OW 254
52898: ST_TO_ADDR
// if r = 5 then
52899: LD_VAR 0 15
52903: PUSH
52904: LD_INT 5
52906: EQUAL
52907: IFFALSE 52917
// r := 0 ;
52909: LD_ADDR_VAR 0 15
52913: PUSH
52914: LD_INT 0
52916: ST_TO_ADDR
// for j = r to 5 do
52917: LD_ADDR_VAR 0 10
52921: PUSH
52922: DOUBLE
52923: LD_VAR 0 15
52927: DEC
52928: ST_TO_ADDR
52929: LD_INT 5
52931: PUSH
52932: FOR_TO
52933: IFFALSE 53047
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52935: LD_ADDR_VAR 0 11
52939: PUSH
52940: LD_VAR 0 13
52944: PPUSH
52945: CALL_OW 250
52949: PPUSH
52950: LD_VAR 0 10
52954: PPUSH
52955: LD_INT 2
52957: PPUSH
52958: CALL_OW 272
52962: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52963: LD_ADDR_VAR 0 12
52967: PUSH
52968: LD_VAR 0 13
52972: PPUSH
52973: CALL_OW 251
52977: PPUSH
52978: LD_VAR 0 10
52982: PPUSH
52983: LD_INT 2
52985: PPUSH
52986: CALL_OW 273
52990: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52991: LD_VAR 0 11
52995: PPUSH
52996: LD_VAR 0 12
53000: PPUSH
53001: CALL_OW 488
53005: PUSH
53006: LD_VAR 0 11
53010: PPUSH
53011: LD_VAR 0 12
53015: PPUSH
53016: CALL_OW 428
53020: NOT
53021: AND
53022: IFFALSE 53045
// begin ComMoveXY ( tmp , _x , _y ) ;
53024: LD_VAR 0 13
53028: PPUSH
53029: LD_VAR 0 11
53033: PPUSH
53034: LD_VAR 0 12
53038: PPUSH
53039: CALL_OW 111
// break ;
53043: GO 53047
// end ; end ;
53045: GO 52932
53047: POP
53048: POP
// end ; end ;
53049: GO 52374
53051: POP
53052: POP
// end ;
53053: LD_VAR 0 8
53057: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53058: LD_INT 0
53060: PPUSH
// result := true ;
53061: LD_ADDR_VAR 0 3
53065: PUSH
53066: LD_INT 1
53068: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53069: LD_VAR 0 2
53073: PUSH
53074: LD_INT 24
53076: DOUBLE
53077: EQUAL
53078: IFTRUE 53088
53080: LD_INT 33
53082: DOUBLE
53083: EQUAL
53084: IFTRUE 53088
53086: GO 53113
53088: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53089: LD_ADDR_VAR 0 3
53093: PUSH
53094: LD_INT 32
53096: PPUSH
53097: LD_VAR 0 1
53101: PPUSH
53102: CALL_OW 321
53106: PUSH
53107: LD_INT 2
53109: EQUAL
53110: ST_TO_ADDR
53111: GO 53429
53113: LD_INT 20
53115: DOUBLE
53116: EQUAL
53117: IFTRUE 53121
53119: GO 53146
53121: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53122: LD_ADDR_VAR 0 3
53126: PUSH
53127: LD_INT 6
53129: PPUSH
53130: LD_VAR 0 1
53134: PPUSH
53135: CALL_OW 321
53139: PUSH
53140: LD_INT 2
53142: EQUAL
53143: ST_TO_ADDR
53144: GO 53429
53146: LD_INT 22
53148: DOUBLE
53149: EQUAL
53150: IFTRUE 53160
53152: LD_INT 36
53154: DOUBLE
53155: EQUAL
53156: IFTRUE 53160
53158: GO 53185
53160: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53161: LD_ADDR_VAR 0 3
53165: PUSH
53166: LD_INT 15
53168: PPUSH
53169: LD_VAR 0 1
53173: PPUSH
53174: CALL_OW 321
53178: PUSH
53179: LD_INT 2
53181: EQUAL
53182: ST_TO_ADDR
53183: GO 53429
53185: LD_INT 30
53187: DOUBLE
53188: EQUAL
53189: IFTRUE 53193
53191: GO 53218
53193: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53194: LD_ADDR_VAR 0 3
53198: PUSH
53199: LD_INT 20
53201: PPUSH
53202: LD_VAR 0 1
53206: PPUSH
53207: CALL_OW 321
53211: PUSH
53212: LD_INT 2
53214: EQUAL
53215: ST_TO_ADDR
53216: GO 53429
53218: LD_INT 28
53220: DOUBLE
53221: EQUAL
53222: IFTRUE 53232
53224: LD_INT 21
53226: DOUBLE
53227: EQUAL
53228: IFTRUE 53232
53230: GO 53257
53232: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53233: LD_ADDR_VAR 0 3
53237: PUSH
53238: LD_INT 21
53240: PPUSH
53241: LD_VAR 0 1
53245: PPUSH
53246: CALL_OW 321
53250: PUSH
53251: LD_INT 2
53253: EQUAL
53254: ST_TO_ADDR
53255: GO 53429
53257: LD_INT 16
53259: DOUBLE
53260: EQUAL
53261: IFTRUE 53265
53263: GO 53290
53265: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53266: LD_ADDR_VAR 0 3
53270: PUSH
53271: LD_INT 84
53273: PPUSH
53274: LD_VAR 0 1
53278: PPUSH
53279: CALL_OW 321
53283: PUSH
53284: LD_INT 2
53286: EQUAL
53287: ST_TO_ADDR
53288: GO 53429
53290: LD_INT 19
53292: DOUBLE
53293: EQUAL
53294: IFTRUE 53304
53296: LD_INT 23
53298: DOUBLE
53299: EQUAL
53300: IFTRUE 53304
53302: GO 53329
53304: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53305: LD_ADDR_VAR 0 3
53309: PUSH
53310: LD_INT 83
53312: PPUSH
53313: LD_VAR 0 1
53317: PPUSH
53318: CALL_OW 321
53322: PUSH
53323: LD_INT 2
53325: EQUAL
53326: ST_TO_ADDR
53327: GO 53429
53329: LD_INT 17
53331: DOUBLE
53332: EQUAL
53333: IFTRUE 53337
53335: GO 53362
53337: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53338: LD_ADDR_VAR 0 3
53342: PUSH
53343: LD_INT 39
53345: PPUSH
53346: LD_VAR 0 1
53350: PPUSH
53351: CALL_OW 321
53355: PUSH
53356: LD_INT 2
53358: EQUAL
53359: ST_TO_ADDR
53360: GO 53429
53362: LD_INT 18
53364: DOUBLE
53365: EQUAL
53366: IFTRUE 53370
53368: GO 53395
53370: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53371: LD_ADDR_VAR 0 3
53375: PUSH
53376: LD_INT 40
53378: PPUSH
53379: LD_VAR 0 1
53383: PPUSH
53384: CALL_OW 321
53388: PUSH
53389: LD_INT 2
53391: EQUAL
53392: ST_TO_ADDR
53393: GO 53429
53395: LD_INT 27
53397: DOUBLE
53398: EQUAL
53399: IFTRUE 53403
53401: GO 53428
53403: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53404: LD_ADDR_VAR 0 3
53408: PUSH
53409: LD_INT 35
53411: PPUSH
53412: LD_VAR 0 1
53416: PPUSH
53417: CALL_OW 321
53421: PUSH
53422: LD_INT 2
53424: EQUAL
53425: ST_TO_ADDR
53426: GO 53429
53428: POP
// end ;
53429: LD_VAR 0 3
53433: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53434: LD_INT 0
53436: PPUSH
53437: PPUSH
53438: PPUSH
53439: PPUSH
53440: PPUSH
53441: PPUSH
53442: PPUSH
53443: PPUSH
53444: PPUSH
53445: PPUSH
53446: PPUSH
// result := false ;
53447: LD_ADDR_VAR 0 6
53451: PUSH
53452: LD_INT 0
53454: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53455: LD_VAR 0 1
53459: NOT
53460: PUSH
53461: LD_VAR 0 1
53465: PPUSH
53466: CALL_OW 266
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: IN
53481: NOT
53482: OR
53483: PUSH
53484: LD_VAR 0 2
53488: NOT
53489: OR
53490: PUSH
53491: LD_VAR 0 5
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: LD_INT 4
53510: PUSH
53511: LD_INT 5
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: IN
53522: NOT
53523: OR
53524: PUSH
53525: LD_VAR 0 3
53529: PPUSH
53530: LD_VAR 0 4
53534: PPUSH
53535: CALL_OW 488
53539: NOT
53540: OR
53541: IFFALSE 53545
// exit ;
53543: GO 54281
// side := GetSide ( depot ) ;
53545: LD_ADDR_VAR 0 9
53549: PUSH
53550: LD_VAR 0 1
53554: PPUSH
53555: CALL_OW 255
53559: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53560: LD_VAR 0 9
53564: PPUSH
53565: LD_VAR 0 2
53569: PPUSH
53570: CALL 53058 0 2
53574: NOT
53575: IFFALSE 53579
// exit ;
53577: GO 54281
// pom := GetBase ( depot ) ;
53579: LD_ADDR_VAR 0 10
53583: PUSH
53584: LD_VAR 0 1
53588: PPUSH
53589: CALL_OW 274
53593: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53594: LD_ADDR_VAR 0 11
53598: PUSH
53599: LD_VAR 0 2
53603: PPUSH
53604: LD_VAR 0 1
53608: PPUSH
53609: CALL_OW 248
53613: PPUSH
53614: CALL_OW 450
53618: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53619: LD_VAR 0 10
53623: PPUSH
53624: LD_INT 1
53626: PPUSH
53627: CALL_OW 275
53631: PUSH
53632: LD_VAR 0 11
53636: PUSH
53637: LD_INT 1
53639: ARRAY
53640: GREATEREQUAL
53641: PUSH
53642: LD_VAR 0 10
53646: PPUSH
53647: LD_INT 2
53649: PPUSH
53650: CALL_OW 275
53654: PUSH
53655: LD_VAR 0 11
53659: PUSH
53660: LD_INT 2
53662: ARRAY
53663: GREATEREQUAL
53664: AND
53665: PUSH
53666: LD_VAR 0 10
53670: PPUSH
53671: LD_INT 3
53673: PPUSH
53674: CALL_OW 275
53678: PUSH
53679: LD_VAR 0 11
53683: PUSH
53684: LD_INT 3
53686: ARRAY
53687: GREATEREQUAL
53688: AND
53689: NOT
53690: IFFALSE 53694
// exit ;
53692: GO 54281
// if GetBType ( depot ) = b_depot then
53694: LD_VAR 0 1
53698: PPUSH
53699: CALL_OW 266
53703: PUSH
53704: LD_INT 0
53706: EQUAL
53707: IFFALSE 53719
// dist := 28 else
53709: LD_ADDR_VAR 0 14
53713: PUSH
53714: LD_INT 28
53716: ST_TO_ADDR
53717: GO 53727
// dist := 36 ;
53719: LD_ADDR_VAR 0 14
53723: PUSH
53724: LD_INT 36
53726: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53727: LD_VAR 0 1
53731: PPUSH
53732: LD_VAR 0 3
53736: PPUSH
53737: LD_VAR 0 4
53741: PPUSH
53742: CALL_OW 297
53746: PUSH
53747: LD_VAR 0 14
53751: GREATER
53752: IFFALSE 53756
// exit ;
53754: GO 54281
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53756: LD_ADDR_VAR 0 12
53760: PUSH
53761: LD_VAR 0 2
53765: PPUSH
53766: LD_VAR 0 3
53770: PPUSH
53771: LD_VAR 0 4
53775: PPUSH
53776: LD_VAR 0 5
53780: PPUSH
53781: LD_VAR 0 1
53785: PPUSH
53786: CALL_OW 248
53790: PPUSH
53791: LD_INT 0
53793: PPUSH
53794: CALL 54286 0 6
53798: ST_TO_ADDR
// if not hexes then
53799: LD_VAR 0 12
53803: NOT
53804: IFFALSE 53808
// exit ;
53806: GO 54281
// hex := GetHexInfo ( x , y ) ;
53808: LD_ADDR_VAR 0 15
53812: PUSH
53813: LD_VAR 0 3
53817: PPUSH
53818: LD_VAR 0 4
53822: PPUSH
53823: CALL_OW 546
53827: ST_TO_ADDR
// if hex [ 1 ] then
53828: LD_VAR 0 15
53832: PUSH
53833: LD_INT 1
53835: ARRAY
53836: IFFALSE 53840
// exit ;
53838: GO 54281
// height := hex [ 2 ] ;
53840: LD_ADDR_VAR 0 13
53844: PUSH
53845: LD_VAR 0 15
53849: PUSH
53850: LD_INT 2
53852: ARRAY
53853: ST_TO_ADDR
// for i = 1 to hexes do
53854: LD_ADDR_VAR 0 7
53858: PUSH
53859: DOUBLE
53860: LD_INT 1
53862: DEC
53863: ST_TO_ADDR
53864: LD_VAR 0 12
53868: PUSH
53869: FOR_TO
53870: IFFALSE 54200
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53872: LD_VAR 0 12
53876: PUSH
53877: LD_VAR 0 7
53881: ARRAY
53882: PUSH
53883: LD_INT 1
53885: ARRAY
53886: PPUSH
53887: LD_VAR 0 12
53891: PUSH
53892: LD_VAR 0 7
53896: ARRAY
53897: PUSH
53898: LD_INT 2
53900: ARRAY
53901: PPUSH
53902: CALL_OW 488
53906: NOT
53907: PUSH
53908: LD_VAR 0 12
53912: PUSH
53913: LD_VAR 0 7
53917: ARRAY
53918: PUSH
53919: LD_INT 1
53921: ARRAY
53922: PPUSH
53923: LD_VAR 0 12
53927: PUSH
53928: LD_VAR 0 7
53932: ARRAY
53933: PUSH
53934: LD_INT 2
53936: ARRAY
53937: PPUSH
53938: CALL_OW 428
53942: PUSH
53943: LD_INT 0
53945: GREATER
53946: OR
53947: PUSH
53948: LD_VAR 0 12
53952: PUSH
53953: LD_VAR 0 7
53957: ARRAY
53958: PUSH
53959: LD_INT 1
53961: ARRAY
53962: PPUSH
53963: LD_VAR 0 12
53967: PUSH
53968: LD_VAR 0 7
53972: ARRAY
53973: PUSH
53974: LD_INT 2
53976: ARRAY
53977: PPUSH
53978: CALL_OW 351
53982: OR
53983: IFFALSE 53989
// exit ;
53985: POP
53986: POP
53987: GO 54281
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53989: LD_ADDR_VAR 0 8
53993: PUSH
53994: LD_VAR 0 12
53998: PUSH
53999: LD_VAR 0 7
54003: ARRAY
54004: PUSH
54005: LD_INT 1
54007: ARRAY
54008: PPUSH
54009: LD_VAR 0 12
54013: PUSH
54014: LD_VAR 0 7
54018: ARRAY
54019: PUSH
54020: LD_INT 2
54022: ARRAY
54023: PPUSH
54024: CALL_OW 546
54028: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54029: LD_VAR 0 8
54033: PUSH
54034: LD_INT 1
54036: ARRAY
54037: PUSH
54038: LD_VAR 0 8
54042: PUSH
54043: LD_INT 2
54045: ARRAY
54046: PUSH
54047: LD_VAR 0 13
54051: PUSH
54052: LD_INT 2
54054: PLUS
54055: GREATER
54056: OR
54057: PUSH
54058: LD_VAR 0 8
54062: PUSH
54063: LD_INT 2
54065: ARRAY
54066: PUSH
54067: LD_VAR 0 13
54071: PUSH
54072: LD_INT 2
54074: MINUS
54075: LESS
54076: OR
54077: PUSH
54078: LD_VAR 0 8
54082: PUSH
54083: LD_INT 3
54085: ARRAY
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 8
54092: PUSH
54093: LD_INT 9
54095: PUSH
54096: LD_INT 10
54098: PUSH
54099: LD_INT 11
54101: PUSH
54102: LD_INT 12
54104: PUSH
54105: LD_INT 13
54107: PUSH
54108: LD_INT 16
54110: PUSH
54111: LD_INT 17
54113: PUSH
54114: LD_INT 18
54116: PUSH
54117: LD_INT 19
54119: PUSH
54120: LD_INT 20
54122: PUSH
54123: LD_INT 21
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: IN
54141: NOT
54142: OR
54143: PUSH
54144: LD_VAR 0 8
54148: PUSH
54149: LD_INT 5
54151: ARRAY
54152: NOT
54153: OR
54154: PUSH
54155: LD_VAR 0 8
54159: PUSH
54160: LD_INT 6
54162: ARRAY
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: LD_INT 7
54172: PUSH
54173: LD_INT 9
54175: PUSH
54176: LD_INT 10
54178: PUSH
54179: LD_INT 11
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: IN
54190: NOT
54191: OR
54192: IFFALSE 54198
// exit ;
54194: POP
54195: POP
54196: GO 54281
// end ;
54198: GO 53869
54200: POP
54201: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54202: LD_VAR 0 9
54206: PPUSH
54207: LD_VAR 0 3
54211: PPUSH
54212: LD_VAR 0 4
54216: PPUSH
54217: LD_INT 20
54219: PPUSH
54220: CALL 46233 0 4
54224: PUSH
54225: LD_INT 4
54227: ARRAY
54228: IFFALSE 54232
// exit ;
54230: GO 54281
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54232: LD_VAR 0 2
54236: PUSH
54237: LD_INT 29
54239: PUSH
54240: LD_INT 30
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: IN
54247: PUSH
54248: LD_VAR 0 3
54252: PPUSH
54253: LD_VAR 0 4
54257: PPUSH
54258: LD_VAR 0 9
54262: PPUSH
54263: CALL_OW 440
54267: NOT
54268: AND
54269: IFFALSE 54273
// exit ;
54271: GO 54281
// result := true ;
54273: LD_ADDR_VAR 0 6
54277: PUSH
54278: LD_INT 1
54280: ST_TO_ADDR
// end ;
54281: LD_VAR 0 6
54285: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54286: LD_INT 0
54288: PPUSH
54289: PPUSH
54290: PPUSH
54291: PPUSH
54292: PPUSH
54293: PPUSH
54294: PPUSH
54295: PPUSH
54296: PPUSH
54297: PPUSH
54298: PPUSH
54299: PPUSH
54300: PPUSH
54301: PPUSH
54302: PPUSH
54303: PPUSH
54304: PPUSH
54305: PPUSH
54306: PPUSH
54307: PPUSH
54308: PPUSH
54309: PPUSH
54310: PPUSH
54311: PPUSH
54312: PPUSH
54313: PPUSH
54314: PPUSH
54315: PPUSH
54316: PPUSH
54317: PPUSH
54318: PPUSH
54319: PPUSH
54320: PPUSH
54321: PPUSH
54322: PPUSH
54323: PPUSH
54324: PPUSH
54325: PPUSH
54326: PPUSH
54327: PPUSH
54328: PPUSH
54329: PPUSH
54330: PPUSH
54331: PPUSH
54332: PPUSH
54333: PPUSH
54334: PPUSH
54335: PPUSH
54336: PPUSH
54337: PPUSH
54338: PPUSH
54339: PPUSH
54340: PPUSH
54341: PPUSH
54342: PPUSH
54343: PPUSH
54344: PPUSH
54345: PPUSH
// result = [ ] ;
54346: LD_ADDR_VAR 0 7
54350: PUSH
54351: EMPTY
54352: ST_TO_ADDR
// temp_list = [ ] ;
54353: LD_ADDR_VAR 0 9
54357: PUSH
54358: EMPTY
54359: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54360: LD_VAR 0 4
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: LD_INT 4
54379: PUSH
54380: LD_INT 5
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: IN
54391: NOT
54392: PUSH
54393: LD_VAR 0 1
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: IN
54408: PUSH
54409: LD_VAR 0 5
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: IN
54428: NOT
54429: AND
54430: OR
54431: IFFALSE 54435
// exit ;
54433: GO 72826
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54435: LD_VAR 0 1
54439: PUSH
54440: LD_INT 6
54442: PUSH
54443: LD_INT 7
54445: PUSH
54446: LD_INT 8
54448: PUSH
54449: LD_INT 13
54451: PUSH
54452: LD_INT 12
54454: PUSH
54455: LD_INT 15
54457: PUSH
54458: LD_INT 11
54460: PUSH
54461: LD_INT 14
54463: PUSH
54464: LD_INT 10
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: IN
54478: IFFALSE 54488
// btype = b_lab ;
54480: LD_ADDR_VAR 0 1
54484: PUSH
54485: LD_INT 6
54487: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54488: LD_VAR 0 6
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: IN
54507: NOT
54508: PUSH
54509: LD_VAR 0 1
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: LD_INT 3
54525: PUSH
54526: LD_INT 6
54528: PUSH
54529: LD_INT 36
54531: PUSH
54532: LD_INT 4
54534: PUSH
54535: LD_INT 5
54537: PUSH
54538: LD_INT 31
54540: PUSH
54541: LD_INT 32
54543: PUSH
54544: LD_INT 33
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: IN
54560: NOT
54561: PUSH
54562: LD_VAR 0 6
54566: PUSH
54567: LD_INT 1
54569: EQUAL
54570: AND
54571: OR
54572: PUSH
54573: LD_VAR 0 1
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: IN
54588: NOT
54589: PUSH
54590: LD_VAR 0 6
54594: PUSH
54595: LD_INT 2
54597: EQUAL
54598: AND
54599: OR
54600: IFFALSE 54610
// mode = 0 ;
54602: LD_ADDR_VAR 0 6
54606: PUSH
54607: LD_INT 0
54609: ST_TO_ADDR
// case mode of 0 :
54610: LD_VAR 0 6
54614: PUSH
54615: LD_INT 0
54617: DOUBLE
54618: EQUAL
54619: IFTRUE 54623
54621: GO 66076
54623: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54624: LD_ADDR_VAR 0 11
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 3
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 3
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54817: LD_ADDR_VAR 0 12
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55013: LD_ADDR_VAR 0 13
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: LD_INT 3
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: NEG
55185: PUSH
55186: LD_INT 3
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55212: LD_ADDR_VAR 0 14
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 3
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 3
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55408: LD_ADDR_VAR 0 15
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55601: LD_ADDR_VAR 0 16
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: LD_INT 2
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 3
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 3
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55794: LD_ADDR_VAR 0 17
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56024: LD_ADDR_VAR 0 18
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: NEG
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56254: LD_ADDR_VAR 0 19
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56484: LD_ADDR_VAR 0 20
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: NEG
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56714: LD_ADDR_VAR 0 21
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56944: LD_ADDR_VAR 0 22
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: LD_INT 2
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57174: LD_ADDR_VAR 0 23
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 3
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 3
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57454: LD_ADDR_VAR 0 24
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: NEG
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57730: LD_ADDR_VAR 0 25
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: LD_INT 2
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 2
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: NEG
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: LD_INT 3
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58004: LD_ADDR_VAR 0 26
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58280: LD_ADDR_VAR 0 27
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: LD_INT 2
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: NEG
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58560: LD_ADDR_VAR 0 28
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 3
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58842: LD_ADDR_VAR 0 29
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: LD_INT 3
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 3
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59121: LD_ADDR_VAR 0 30
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 3
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 3
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 3
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59399: LD_ADDR_VAR 0 31
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: LD_INT 3
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 3
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 3
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 3
59642: NEG
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59677: LD_ADDR_VAR 0 32
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: LD_INT 2
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: LD_INT 3
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 3
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: LD_INT 3
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 3
59920: NEG
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59955: LD_ADDR_VAR 0 33
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 3
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: NEG
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60234: LD_ADDR_VAR 0 34
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: LD_INT 2
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: PUSH
60449: LD_INT 2
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 2
60468: NEG
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: NEG
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60514: LD_ADDR_VAR 0 35
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60626: LD_ADDR_VAR 0 36
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60738: LD_ADDR_VAR 0 37
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60850: LD_ADDR_VAR 0 38
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 2
60941: NEG
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60962: LD_ADDR_VAR 0 39
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61074: LD_ADDR_VAR 0 40
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 1
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61186: LD_ADDR_VAR 0 41
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: LD_INT 2
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: LD_INT 2
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 2
61364: NEG
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 2
61376: NEG
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 3
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 3
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: LD_INT 3
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 2
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 3
61460: NEG
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 3
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 3
61483: NEG
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: NEG
61496: PUSH
61497: LD_INT 3
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61536: LD_ADDR_VAR 0 42
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: NEG
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 2
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: LD_INT 3
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: LD_INT 3
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: LD_INT 3
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 3
61782: PUSH
61783: LD_INT 3
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: LD_INT 3
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: LD_INT 3
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: LD_INT 3
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61886: LD_ADDR_VAR 0 43
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: LD_INT 2
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 3
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: LD_INT 3
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: LD_INT 2
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 3
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 3
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 3
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 3
62193: NEG
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62234: LD_ADDR_VAR 0 44
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: LD_INT 2
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 2
62389: NEG
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 2
62400: NEG
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: LD_INT 2
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 2
62424: NEG
62425: PUSH
62426: LD_INT 3
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 3
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 3
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 3
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 2
62487: PUSH
62488: LD_INT 3
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 2
62497: NEG
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 3
62508: NEG
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 3
62519: NEG
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 3
62531: NEG
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 3
62543: NEG
62544: PUSH
62545: LD_INT 3
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62584: LD_ADDR_VAR 0 45
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 2
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: LD_INT 2
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 2
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 2
62750: NEG
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: LD_INT 3
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: LD_INT 3
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 3
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: LD_INT 2
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 3
62830: PUSH
62831: LD_INT 3
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 2
62840: PUSH
62841: LD_INT 3
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: LD_INT 3
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 3
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: LD_INT 2
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 3
62881: NEG
62882: PUSH
62883: LD_INT 2
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62934: LD_ADDR_VAR 0 46
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: LD_INT 1
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 2
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: LD_INT 2
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 2
63100: NEG
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: LD_INT 3
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: LD_INT 3
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 2
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 3
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 3
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 1
63188: PUSH
63189: LD_INT 3
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: LD_INT 2
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 2
63219: NEG
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 3
63230: NEG
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 3
63241: NEG
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63282: LD_ADDR_VAR 0 47
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: LD_INT 0
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: LD_INT 2
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: LD_INT 2
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 2
63397: NEG
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: NEG
63410: PUSH
63411: LD_INT 2
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63433: LD_ADDR_VAR 0 48
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: LD_INT 2
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: LD_INT 2
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63580: LD_ADDR_VAR 0 49
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 1
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 2
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 2
63692: PUSH
63693: LD_INT 2
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: LD_INT 2
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63724: LD_ADDR_VAR 0 50
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63868: LD_ADDR_VAR 0 51
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 1
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: LD_INT 2
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 2
63980: NEG
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64015: LD_ADDR_VAR 0 52
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: LD_INT 2
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: NEG
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 2
64119: NEG
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 2
64130: NEG
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 2
64142: NEG
64143: PUSH
64144: LD_INT 2
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64166: LD_ADDR_VAR 0 53
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: LD_INT 2
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 2
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 2
64301: PUSH
64302: LD_INT 2
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: LD_INT 2
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 2
64342: NEG
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 2
64353: NEG
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: LD_INT 2
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64396: LD_ADDR_VAR 0 54
64400: PUSH
64401: LD_INT 0
64403: PUSH
64404: LD_INT 0
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 1
64465: NEG
64466: PUSH
64467: LD_INT 1
64469: NEG
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 1
64477: NEG
64478: PUSH
64479: LD_INT 2
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: LD_INT 2
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: LD_INT 1
64503: NEG
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 2
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 2
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: LD_INT 2
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 2
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 1
64561: NEG
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 2
64572: NEG
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 2
64595: NEG
64596: PUSH
64597: LD_INT 2
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64626: LD_ADDR_VAR 0 55
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: LD_INT 0
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: LD_INT 2
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: LD_INT 2
64722: NEG
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 2
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 2
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 2
64761: PUSH
64762: LD_INT 2
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: LD_INT 2
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 2
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 2
64802: NEG
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 2
64813: NEG
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 2
64825: NEG
64826: PUSH
64827: LD_INT 2
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64856: LD_ADDR_VAR 0 56
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 1
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 1
64937: NEG
64938: PUSH
64939: LD_INT 2
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: LD_INT 2
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: LD_INT 1
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 2
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 2
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 2
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 2
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: NEG
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 2
65032: NEG
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 2
65043: NEG
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 2
65055: NEG
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65086: LD_ADDR_VAR 0 57
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 1
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 1
65155: NEG
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 1
65167: NEG
65168: PUSH
65169: LD_INT 2
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 2
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 2
65201: PUSH
65202: LD_INT 0
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 2
65262: NEG
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 2
65273: NEG
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 2
65285: NEG
65286: PUSH
65287: LD_INT 2
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65316: LD_ADDR_VAR 0 58
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: LD_INT 1
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 1
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: LD_INT 1
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: LD_INT 2
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: PUSH
65421: LD_INT 1
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 2
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 2
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 2
65451: PUSH
65452: LD_INT 2
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: LD_INT 2
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 2
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 2
65492: NEG
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 2
65503: NEG
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 2
65515: NEG
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65546: LD_ADDR_VAR 0 59
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: LD_INT 1
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65634: LD_ADDR_VAR 0 60
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: LD_INT 1
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 1
65703: NEG
65704: PUSH
65705: LD_INT 1
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65722: LD_ADDR_VAR 0 61
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: LD_INT 0
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 1
65791: NEG
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65810: LD_ADDR_VAR 0 62
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: LD_INT 1
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65898: LD_ADDR_VAR 0 63
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: LD_INT 1
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: LD_INT 1
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65986: LD_ADDR_VAR 0 64
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: LD_INT 1
66006: NEG
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 1
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 1
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: LD_INT 1
66059: NEG
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: ST_TO_ADDR
// end ; 1 :
66074: GO 71971
66076: LD_INT 1
66078: DOUBLE
66079: EQUAL
66080: IFTRUE 66084
66082: GO 68707
66084: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66085: LD_ADDR_VAR 0 11
66089: PUSH
66090: LD_INT 1
66092: NEG
66093: PUSH
66094: LD_INT 3
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: LD_INT 2
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66129: LD_ADDR_VAR 0 12
66133: PUSH
66134: LD_INT 2
66136: PUSH
66137: LD_INT 1
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 3
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: LD_INT 1
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: LIST
66169: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66170: LD_ADDR_VAR 0 13
66174: PUSH
66175: LD_INT 3
66177: PUSH
66178: LD_INT 2
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 3
66187: PUSH
66188: LD_INT 3
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: LD_INT 3
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: LIST
66209: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66210: LD_ADDR_VAR 0 14
66214: PUSH
66215: LD_INT 1
66217: PUSH
66218: LD_INT 3
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: LD_INT 3
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: LD_INT 2
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: LIST
66250: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66251: LD_ADDR_VAR 0 15
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 3
66269: NEG
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 3
66280: NEG
66281: PUSH
66282: LD_INT 1
66284: NEG
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: LIST
66294: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66295: LD_ADDR_VAR 0 16
66299: PUSH
66300: LD_INT 2
66302: NEG
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 3
66314: NEG
66315: PUSH
66316: LD_INT 2
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 3
66326: NEG
66327: PUSH
66328: LD_INT 3
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: LIST
66340: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66341: LD_ADDR_VAR 0 17
66345: PUSH
66346: LD_INT 1
66348: NEG
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: LD_INT 3
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: LD_INT 2
66374: NEG
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: LIST
66384: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66385: LD_ADDR_VAR 0 18
66389: PUSH
66390: LD_INT 2
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 3
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 3
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66426: LD_ADDR_VAR 0 19
66430: PUSH
66431: LD_INT 3
66433: PUSH
66434: LD_INT 2
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 3
66443: PUSH
66444: LD_INT 3
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: LD_INT 3
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66466: LD_ADDR_VAR 0 20
66470: PUSH
66471: LD_INT 1
66473: PUSH
66474: LD_INT 3
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: LD_INT 3
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 1
66493: NEG
66494: PUSH
66495: LD_INT 2
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: LIST
66506: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66507: LD_ADDR_VAR 0 21
66511: PUSH
66512: LD_INT 2
66514: NEG
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 3
66525: NEG
66526: PUSH
66527: LD_INT 0
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 3
66536: NEG
66537: PUSH
66538: LD_INT 1
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: LIST
66550: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66551: LD_ADDR_VAR 0 22
66555: PUSH
66556: LD_INT 2
66558: NEG
66559: PUSH
66560: LD_INT 3
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 3
66570: NEG
66571: PUSH
66572: LD_INT 2
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 3
66582: NEG
66583: PUSH
66584: LD_INT 3
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66597: LD_ADDR_VAR 0 23
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 3
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 1
66615: NEG
66616: PUSH
66617: LD_INT 4
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 1
66627: PUSH
66628: LD_INT 3
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: LIST
66640: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66641: LD_ADDR_VAR 0 24
66645: PUSH
66646: LD_INT 3
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 3
66658: PUSH
66659: LD_INT 1
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 4
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: LIST
66681: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66682: LD_ADDR_VAR 0 25
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: LD_INT 3
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 4
66699: PUSH
66700: LD_INT 3
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 3
66709: PUSH
66710: LD_INT 4
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: LIST
66721: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66722: LD_ADDR_VAR 0 26
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: LD_INT 3
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 1
66739: PUSH
66740: LD_INT 4
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 1
66749: NEG
66750: PUSH
66751: LD_INT 3
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66763: LD_ADDR_VAR 0 27
66767: PUSH
66768: LD_INT 3
66770: NEG
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 3
66781: NEG
66782: PUSH
66783: LD_INT 1
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 4
66792: NEG
66793: PUSH
66794: LD_INT 1
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: LIST
66806: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66807: LD_ADDR_VAR 0 28
66811: PUSH
66812: LD_INT 3
66814: NEG
66815: PUSH
66816: LD_INT 3
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 3
66826: NEG
66827: PUSH
66828: LD_INT 4
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 4
66838: NEG
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: LIST
66852: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66853: LD_ADDR_VAR 0 29
66857: PUSH
66858: LD_INT 1
66860: NEG
66861: PUSH
66862: LD_INT 3
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 0
66872: PUSH
66873: LD_INT 3
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 1
66883: PUSH
66884: LD_INT 2
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 1
66894: NEG
66895: PUSH
66896: LD_INT 4
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: LD_INT 4
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: PUSH
66918: LD_INT 3
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 1
66928: NEG
66929: PUSH
66930: LD_INT 5
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: LD_INT 5
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 1
66951: PUSH
66952: LD_INT 4
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 1
66962: NEG
66963: PUSH
66964: LD_INT 6
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 6
66977: NEG
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 1
66985: PUSH
66986: LD_INT 5
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67008: LD_ADDR_VAR 0 30
67012: PUSH
67013: LD_INT 2
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 3
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 3
67036: PUSH
67037: LD_INT 1
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 3
67046: PUSH
67047: LD_INT 1
67049: NEG
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 4
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 4
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 4
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 5
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 5
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 5
67108: PUSH
67109: LD_INT 1
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 6
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 6
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67151: LD_ADDR_VAR 0 31
67155: PUSH
67156: LD_INT 3
67158: PUSH
67159: LD_INT 2
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 3
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: LD_INT 3
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 4
67188: PUSH
67189: LD_INT 3
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 4
67198: PUSH
67199: LD_INT 4
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: LD_INT 4
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 5
67218: PUSH
67219: LD_INT 4
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 5
67228: PUSH
67229: LD_INT 5
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 4
67238: PUSH
67239: LD_INT 5
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 6
67248: PUSH
67249: LD_INT 5
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 6
67258: PUSH
67259: LD_INT 6
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 5
67268: PUSH
67269: LD_INT 6
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67290: LD_ADDR_VAR 0 32
67294: PUSH
67295: LD_INT 1
67297: PUSH
67298: LD_INT 3
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: LD_INT 3
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 1
67317: NEG
67318: PUSH
67319: LD_INT 2
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: LD_INT 4
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: LD_INT 4
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 1
67348: NEG
67349: PUSH
67350: LD_INT 3
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 1
67359: PUSH
67360: LD_INT 5
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: LD_INT 5
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: LD_INT 4
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 1
67390: PUSH
67391: LD_INT 6
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 0
67400: PUSH
67401: LD_INT 6
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: PUSH
67412: LD_INT 5
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67433: LD_ADDR_VAR 0 33
67437: PUSH
67438: LD_INT 2
67440: NEG
67441: PUSH
67442: LD_INT 1
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 3
67451: NEG
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 3
67462: NEG
67463: PUSH
67464: LD_INT 1
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 3
67474: NEG
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 4
67485: NEG
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 4
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 4
67508: NEG
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 5
67519: NEG
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 5
67530: NEG
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 5
67542: NEG
67543: PUSH
67544: LD_INT 1
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 6
67553: NEG
67554: PUSH
67555: LD_INT 0
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 6
67564: NEG
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67588: LD_ADDR_VAR 0 34
67592: PUSH
67593: LD_INT 2
67595: NEG
67596: PUSH
67597: LD_INT 3
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 3
67607: NEG
67608: PUSH
67609: LD_INT 2
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 3
67619: NEG
67620: PUSH
67621: LD_INT 3
67623: NEG
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 3
67631: NEG
67632: PUSH
67633: LD_INT 4
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 4
67643: NEG
67644: PUSH
67645: LD_INT 3
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 4
67655: NEG
67656: PUSH
67657: LD_INT 4
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 4
67667: NEG
67668: PUSH
67669: LD_INT 5
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 5
67679: NEG
67680: PUSH
67681: LD_INT 4
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 5
67691: NEG
67692: PUSH
67693: LD_INT 5
67695: NEG
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 5
67703: NEG
67704: PUSH
67705: LD_INT 6
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 6
67715: NEG
67716: PUSH
67717: LD_INT 5
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 6
67727: NEG
67728: PUSH
67729: LD_INT 6
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67751: LD_ADDR_VAR 0 41
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: LD_INT 2
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 1
67769: NEG
67770: PUSH
67771: LD_INT 3
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 1
67781: PUSH
67782: LD_INT 2
67784: NEG
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: LIST
67794: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67795: LD_ADDR_VAR 0 42
67799: PUSH
67800: LD_INT 2
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 2
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 3
67823: PUSH
67824: LD_INT 1
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: LIST
67835: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67836: LD_ADDR_VAR 0 43
67840: PUSH
67841: LD_INT 2
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 3
67853: PUSH
67854: LD_INT 2
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 2
67863: PUSH
67864: LD_INT 3
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: LIST
67875: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67876: LD_ADDR_VAR 0 44
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: LD_INT 2
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 1
67893: PUSH
67894: LD_INT 3
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 1
67903: NEG
67904: PUSH
67905: LD_INT 2
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: LIST
67916: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67917: LD_ADDR_VAR 0 45
67921: PUSH
67922: LD_INT 2
67924: NEG
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 2
67935: NEG
67936: PUSH
67937: LD_INT 1
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 3
67946: NEG
67947: PUSH
67948: LD_INT 1
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: LIST
67960: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67961: LD_ADDR_VAR 0 46
67965: PUSH
67966: LD_INT 2
67968: NEG
67969: PUSH
67970: LD_INT 2
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 2
67980: NEG
67981: PUSH
67982: LD_INT 3
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 3
67992: NEG
67993: PUSH
67994: LD_INT 2
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: LIST
68006: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68007: LD_ADDR_VAR 0 47
68011: PUSH
68012: LD_INT 2
68014: NEG
68015: PUSH
68016: LD_INT 3
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 1
68026: NEG
68027: PUSH
68028: LD_INT 3
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68040: LD_ADDR_VAR 0 48
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: LD_INT 2
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 2
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68071: LD_ADDR_VAR 0 49
68075: PUSH
68076: LD_INT 3
68078: PUSH
68079: LD_INT 1
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 3
68088: PUSH
68089: LD_INT 2
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68100: LD_ADDR_VAR 0 50
68104: PUSH
68105: LD_INT 2
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 1
68117: PUSH
68118: LD_INT 3
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68129: LD_ADDR_VAR 0 51
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: PUSH
68138: LD_INT 2
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 2
68147: NEG
68148: PUSH
68149: LD_INT 1
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68160: LD_ADDR_VAR 0 52
68164: PUSH
68165: LD_INT 3
68167: NEG
68168: PUSH
68169: LD_INT 1
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 3
68179: NEG
68180: PUSH
68181: LD_INT 2
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68193: LD_ADDR_VAR 0 53
68197: PUSH
68198: LD_INT 1
68200: NEG
68201: PUSH
68202: LD_INT 3
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: LD_INT 3
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: LIST
68236: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68237: LD_ADDR_VAR 0 54
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: LD_INT 1
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 3
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 3
68265: PUSH
68266: LD_INT 1
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68278: LD_ADDR_VAR 0 55
68282: PUSH
68283: LD_INT 3
68285: PUSH
68286: LD_INT 2
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 3
68295: PUSH
68296: LD_INT 3
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 2
68305: PUSH
68306: LD_INT 3
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: LIST
68317: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68318: LD_ADDR_VAR 0 56
68322: PUSH
68323: LD_INT 1
68325: PUSH
68326: LD_INT 3
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 0
68335: PUSH
68336: LD_INT 3
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 1
68345: NEG
68346: PUSH
68347: LD_INT 2
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: LIST
68358: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68359: LD_ADDR_VAR 0 57
68363: PUSH
68364: LD_INT 2
68366: NEG
68367: PUSH
68368: LD_INT 1
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 3
68377: NEG
68378: PUSH
68379: LD_INT 0
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 3
68388: NEG
68389: PUSH
68390: LD_INT 1
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: LIST
68402: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68403: LD_ADDR_VAR 0 58
68407: PUSH
68408: LD_INT 2
68410: NEG
68411: PUSH
68412: LD_INT 3
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 3
68422: NEG
68423: PUSH
68424: LD_INT 2
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 3
68434: NEG
68435: PUSH
68436: LD_INT 3
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: LIST
68448: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68449: LD_ADDR_VAR 0 59
68453: PUSH
68454: LD_INT 1
68456: NEG
68457: PUSH
68458: LD_INT 2
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 0
68468: PUSH
68469: LD_INT 2
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 1
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: LIST
68492: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68493: LD_ADDR_VAR 0 60
68497: PUSH
68498: LD_INT 1
68500: PUSH
68501: LD_INT 1
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 2
68521: PUSH
68522: LD_INT 1
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: LIST
68533: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68534: LD_ADDR_VAR 0 61
68538: PUSH
68539: LD_INT 2
68541: PUSH
68542: LD_INT 1
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 2
68551: PUSH
68552: LD_INT 2
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: LD_INT 2
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: LIST
68573: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68574: LD_ADDR_VAR 0 62
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: LD_INT 2
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: LD_INT 2
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 1
68601: NEG
68602: PUSH
68603: LD_INT 1
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: LIST
68614: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68615: LD_ADDR_VAR 0 63
68619: PUSH
68620: LD_INT 1
68622: NEG
68623: PUSH
68624: LD_INT 1
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 2
68633: NEG
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 2
68644: NEG
68645: PUSH
68646: LD_INT 1
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: LIST
68658: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68659: LD_ADDR_VAR 0 64
68663: PUSH
68664: LD_INT 1
68666: NEG
68667: PUSH
68668: LD_INT 2
68670: NEG
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 2
68678: NEG
68679: PUSH
68680: LD_INT 1
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 2
68690: NEG
68691: PUSH
68692: LD_INT 2
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: LIST
68704: ST_TO_ADDR
// end ; 2 :
68705: GO 71971
68707: LD_INT 2
68709: DOUBLE
68710: EQUAL
68711: IFTRUE 68715
68713: GO 71970
68715: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68716: LD_ADDR_VAR 0 29
68720: PUSH
68721: LD_INT 4
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 4
68733: PUSH
68734: LD_INT 1
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 5
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 5
68754: PUSH
68755: LD_INT 1
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 4
68764: PUSH
68765: LD_INT 1
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 3
68774: PUSH
68775: LD_INT 0
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: PUSH
68785: LD_INT 1
68787: NEG
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 3
68795: PUSH
68796: LD_INT 2
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 5
68806: PUSH
68807: LD_INT 2
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 3
68816: PUSH
68817: LD_INT 3
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 3
68826: PUSH
68827: LD_INT 2
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 4
68836: PUSH
68837: LD_INT 3
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 4
68846: PUSH
68847: LD_INT 4
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 3
68856: PUSH
68857: LD_INT 4
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 2
68866: PUSH
68867: LD_INT 3
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 2
68876: PUSH
68877: LD_INT 2
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 4
68886: PUSH
68887: LD_INT 2
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 2
68896: PUSH
68897: LD_INT 4
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 0
68906: PUSH
68907: LD_INT 4
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: LD_INT 3
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 1
68926: PUSH
68927: LD_INT 4
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 1
68936: PUSH
68937: LD_INT 5
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: LD_INT 5
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 1
68956: NEG
68957: PUSH
68958: LD_INT 4
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 1
68967: NEG
68968: PUSH
68969: LD_INT 3
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: LD_INT 5
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 2
68988: NEG
68989: PUSH
68990: LD_INT 3
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 3
68999: NEG
69000: PUSH
69001: LD_INT 0
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 3
69010: NEG
69011: PUSH
69012: LD_INT 1
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 2
69022: NEG
69023: PUSH
69024: LD_INT 0
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 2
69033: NEG
69034: PUSH
69035: LD_INT 1
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 3
69044: NEG
69045: PUSH
69046: LD_INT 1
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 4
69055: NEG
69056: PUSH
69057: LD_INT 0
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 4
69066: NEG
69067: PUSH
69068: LD_INT 1
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 4
69078: NEG
69079: PUSH
69080: LD_INT 2
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 2
69090: NEG
69091: PUSH
69092: LD_INT 2
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 4
69101: NEG
69102: PUSH
69103: LD_INT 4
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 4
69113: NEG
69114: PUSH
69115: LD_INT 5
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 3
69125: NEG
69126: PUSH
69127: LD_INT 4
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 3
69137: NEG
69138: PUSH
69139: LD_INT 3
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 4
69149: NEG
69150: PUSH
69151: LD_INT 3
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 5
69161: NEG
69162: PUSH
69163: LD_INT 4
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 5
69173: NEG
69174: PUSH
69175: LD_INT 5
69177: NEG
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 3
69185: NEG
69186: PUSH
69187: LD_INT 5
69189: NEG
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 5
69197: NEG
69198: PUSH
69199: LD_INT 3
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69254: LD_ADDR_VAR 0 30
69258: PUSH
69259: LD_INT 4
69261: PUSH
69262: LD_INT 4
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 4
69271: PUSH
69272: LD_INT 3
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 5
69281: PUSH
69282: LD_INT 4
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 5
69291: PUSH
69292: LD_INT 5
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 4
69301: PUSH
69302: LD_INT 5
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 3
69311: PUSH
69312: LD_INT 4
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 3
69321: PUSH
69322: LD_INT 3
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 5
69331: PUSH
69332: LD_INT 3
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 3
69341: PUSH
69342: LD_INT 5
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: LD_INT 3
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 0
69361: PUSH
69362: LD_INT 2
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 1
69371: PUSH
69372: LD_INT 3
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 1
69381: PUSH
69382: LD_INT 4
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 0
69391: PUSH
69392: LD_INT 4
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 1
69401: NEG
69402: PUSH
69403: LD_INT 3
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 1
69412: NEG
69413: PUSH
69414: LD_INT 2
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 2
69423: PUSH
69424: LD_INT 4
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 2
69433: NEG
69434: PUSH
69435: LD_INT 2
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 4
69444: NEG
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 4
69455: NEG
69456: PUSH
69457: LD_INT 1
69459: NEG
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 3
69467: NEG
69468: PUSH
69469: LD_INT 0
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 3
69478: NEG
69479: PUSH
69480: LD_INT 1
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 4
69489: NEG
69490: PUSH
69491: LD_INT 1
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 5
69500: NEG
69501: PUSH
69502: LD_INT 0
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 5
69511: NEG
69512: PUSH
69513: LD_INT 1
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 5
69523: NEG
69524: PUSH
69525: LD_INT 2
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 3
69535: NEG
69536: PUSH
69537: LD_INT 2
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 3
69546: NEG
69547: PUSH
69548: LD_INT 3
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 3
69558: NEG
69559: PUSH
69560: LD_INT 4
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 2
69570: NEG
69571: PUSH
69572: LD_INT 3
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 2
69582: NEG
69583: PUSH
69584: LD_INT 2
69586: NEG
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 3
69594: NEG
69595: PUSH
69596: LD_INT 2
69598: NEG
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 4
69606: NEG
69607: PUSH
69608: LD_INT 3
69610: NEG
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 4
69618: NEG
69619: PUSH
69620: LD_INT 4
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 2
69630: NEG
69631: PUSH
69632: LD_INT 4
69634: NEG
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 4
69642: NEG
69643: PUSH
69644: LD_INT 2
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 0
69654: PUSH
69655: LD_INT 4
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 0
69665: PUSH
69666: LD_INT 5
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 1
69676: PUSH
69677: LD_INT 4
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 1
69687: PUSH
69688: LD_INT 3
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: LD_INT 3
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 1
69709: NEG
69710: PUSH
69711: LD_INT 4
69713: NEG
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 1
69721: NEG
69722: PUSH
69723: LD_INT 5
69725: NEG
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 2
69733: PUSH
69734: LD_INT 3
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 2
69744: NEG
69745: PUSH
69746: LD_INT 5
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69801: LD_ADDR_VAR 0 31
69805: PUSH
69806: LD_INT 0
69808: PUSH
69809: LD_INT 4
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 0
69818: PUSH
69819: LD_INT 3
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 1
69828: PUSH
69829: LD_INT 4
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 1
69838: PUSH
69839: LD_INT 5
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 0
69848: PUSH
69849: LD_INT 5
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: LD_INT 4
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 1
69869: NEG
69870: PUSH
69871: LD_INT 3
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 2
69880: PUSH
69881: LD_INT 5
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 2
69890: NEG
69891: PUSH
69892: LD_INT 3
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 3
69901: NEG
69902: PUSH
69903: LD_INT 0
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 3
69912: NEG
69913: PUSH
69914: LD_INT 1
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 2
69924: NEG
69925: PUSH
69926: LD_INT 0
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 2
69935: NEG
69936: PUSH
69937: LD_INT 1
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 3
69946: NEG
69947: PUSH
69948: LD_INT 1
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 4
69957: NEG
69958: PUSH
69959: LD_INT 0
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 4
69968: NEG
69969: PUSH
69970: LD_INT 1
69972: NEG
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 4
69980: NEG
69981: PUSH
69982: LD_INT 2
69984: NEG
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 2
69992: NEG
69993: PUSH
69994: LD_INT 2
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 4
70003: NEG
70004: PUSH
70005: LD_INT 4
70007: NEG
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 4
70015: NEG
70016: PUSH
70017: LD_INT 5
70019: NEG
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 3
70027: NEG
70028: PUSH
70029: LD_INT 4
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 3
70039: NEG
70040: PUSH
70041: LD_INT 3
70043: NEG
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 4
70051: NEG
70052: PUSH
70053: LD_INT 3
70055: NEG
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 5
70063: NEG
70064: PUSH
70065: LD_INT 4
70067: NEG
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 5
70075: NEG
70076: PUSH
70077: LD_INT 5
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 3
70087: NEG
70088: PUSH
70089: LD_INT 5
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 5
70099: NEG
70100: PUSH
70101: LD_INT 3
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 0
70111: PUSH
70112: LD_INT 3
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 0
70122: PUSH
70123: LD_INT 4
70125: NEG
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 1
70133: PUSH
70134: LD_INT 3
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 1
70144: PUSH
70145: LD_INT 2
70147: NEG
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 0
70155: PUSH
70156: LD_INT 2
70158: NEG
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 1
70166: NEG
70167: PUSH
70168: LD_INT 3
70170: NEG
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 1
70178: NEG
70179: PUSH
70180: LD_INT 4
70182: NEG
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 2
70190: PUSH
70191: LD_INT 2
70193: NEG
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 2
70201: NEG
70202: PUSH
70203: LD_INT 4
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 4
70213: PUSH
70214: LD_INT 0
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 4
70223: PUSH
70224: LD_INT 1
70226: NEG
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 5
70234: PUSH
70235: LD_INT 0
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 5
70244: PUSH
70245: LD_INT 1
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 4
70254: PUSH
70255: LD_INT 1
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 3
70264: PUSH
70265: LD_INT 0
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 3
70274: PUSH
70275: LD_INT 1
70277: NEG
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 3
70285: PUSH
70286: LD_INT 2
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 5
70296: PUSH
70297: LD_INT 2
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70351: LD_ADDR_VAR 0 32
70355: PUSH
70356: LD_INT 4
70358: NEG
70359: PUSH
70360: LD_INT 0
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 4
70369: NEG
70370: PUSH
70371: LD_INT 1
70373: NEG
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 3
70381: NEG
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 3
70392: NEG
70393: PUSH
70394: LD_INT 1
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 4
70403: NEG
70404: PUSH
70405: LD_INT 1
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 5
70414: NEG
70415: PUSH
70416: LD_INT 0
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 5
70425: NEG
70426: PUSH
70427: LD_INT 1
70429: NEG
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 5
70437: NEG
70438: PUSH
70439: LD_INT 2
70441: NEG
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 3
70449: NEG
70450: PUSH
70451: LD_INT 2
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 3
70460: NEG
70461: PUSH
70462: LD_INT 3
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 3
70472: NEG
70473: PUSH
70474: LD_INT 4
70476: NEG
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 2
70484: NEG
70485: PUSH
70486: LD_INT 3
70488: NEG
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 2
70496: NEG
70497: PUSH
70498: LD_INT 2
70500: NEG
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 3
70508: NEG
70509: PUSH
70510: LD_INT 2
70512: NEG
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 4
70520: NEG
70521: PUSH
70522: LD_INT 3
70524: NEG
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 4
70532: NEG
70533: PUSH
70534: LD_INT 4
70536: NEG
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 2
70544: NEG
70545: PUSH
70546: LD_INT 4
70548: NEG
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 4
70556: NEG
70557: PUSH
70558: LD_INT 2
70560: NEG
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 0
70568: PUSH
70569: LD_INT 4
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: LD_INT 5
70582: NEG
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 1
70590: PUSH
70591: LD_INT 4
70593: NEG
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 1
70601: PUSH
70602: LD_INT 3
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 0
70612: PUSH
70613: LD_INT 3
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 1
70623: NEG
70624: PUSH
70625: LD_INT 4
70627: NEG
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 1
70635: NEG
70636: PUSH
70637: LD_INT 5
70639: NEG
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 2
70647: PUSH
70648: LD_INT 3
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 2
70658: NEG
70659: PUSH
70660: LD_INT 5
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 3
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 3
70680: PUSH
70681: LD_INT 1
70683: NEG
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 4
70691: PUSH
70692: LD_INT 0
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 4
70701: PUSH
70702: LD_INT 1
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 3
70711: PUSH
70712: LD_INT 1
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 2
70721: PUSH
70722: LD_INT 0
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 2
70731: PUSH
70732: LD_INT 1
70734: NEG
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 2
70742: PUSH
70743: LD_INT 2
70745: NEG
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 4
70753: PUSH
70754: LD_INT 2
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 4
70763: PUSH
70764: LD_INT 4
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 4
70773: PUSH
70774: LD_INT 3
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: PUSH
70781: LD_INT 5
70783: PUSH
70784: LD_INT 4
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 5
70793: PUSH
70794: LD_INT 5
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 4
70803: PUSH
70804: LD_INT 5
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 3
70813: PUSH
70814: LD_INT 4
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 3
70823: PUSH
70824: LD_INT 3
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 5
70833: PUSH
70834: LD_INT 3
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 3
70843: PUSH
70844: LD_INT 5
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70898: LD_ADDR_VAR 0 33
70902: PUSH
70903: LD_INT 4
70905: NEG
70906: PUSH
70907: LD_INT 4
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 4
70917: NEG
70918: PUSH
70919: LD_INT 5
70921: NEG
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 3
70929: NEG
70930: PUSH
70931: LD_INT 4
70933: NEG
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 3
70941: NEG
70942: PUSH
70943: LD_INT 3
70945: NEG
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 4
70953: NEG
70954: PUSH
70955: LD_INT 3
70957: NEG
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 5
70965: NEG
70966: PUSH
70967: LD_INT 4
70969: NEG
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 5
70977: NEG
70978: PUSH
70979: LD_INT 5
70981: NEG
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 3
70989: NEG
70990: PUSH
70991: LD_INT 5
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 5
71001: NEG
71002: PUSH
71003: LD_INT 3
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 0
71013: PUSH
71014: LD_INT 3
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 0
71024: PUSH
71025: LD_INT 4
71027: NEG
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 1
71035: PUSH
71036: LD_INT 3
71038: NEG
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 1
71046: PUSH
71047: LD_INT 2
71049: NEG
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 0
71057: PUSH
71058: LD_INT 2
71060: NEG
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 1
71068: NEG
71069: PUSH
71070: LD_INT 3
71072: NEG
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 1
71080: NEG
71081: PUSH
71082: LD_INT 4
71084: NEG
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 2
71092: PUSH
71093: LD_INT 2
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 2
71103: NEG
71104: PUSH
71105: LD_INT 4
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 4
71115: PUSH
71116: LD_INT 0
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 4
71125: PUSH
71126: LD_INT 1
71128: NEG
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 5
71136: PUSH
71137: LD_INT 0
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 5
71146: PUSH
71147: LD_INT 1
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 4
71156: PUSH
71157: LD_INT 1
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 3
71166: PUSH
71167: LD_INT 0
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: LD_INT 1
71179: NEG
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 3
71187: PUSH
71188: LD_INT 2
71190: NEG
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 5
71198: PUSH
71199: LD_INT 2
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 3
71208: PUSH
71209: LD_INT 3
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 3
71218: PUSH
71219: LD_INT 2
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 4
71228: PUSH
71229: LD_INT 3
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 4
71238: PUSH
71239: LD_INT 4
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 3
71248: PUSH
71249: LD_INT 4
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 2
71258: PUSH
71259: LD_INT 3
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 2
71268: PUSH
71269: LD_INT 2
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 4
71278: PUSH
71279: LD_INT 2
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 2
71288: PUSH
71289: LD_INT 4
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 0
71298: PUSH
71299: LD_INT 4
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 0
71308: PUSH
71309: LD_INT 3
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 1
71318: PUSH
71319: LD_INT 4
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 1
71328: PUSH
71329: LD_INT 5
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 0
71338: PUSH
71339: LD_INT 5
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 1
71348: NEG
71349: PUSH
71350: LD_INT 4
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: LD_INT 1
71359: NEG
71360: PUSH
71361: LD_INT 3
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 2
71370: PUSH
71371: LD_INT 5
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 2
71380: NEG
71381: PUSH
71382: LD_INT 3
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71436: LD_ADDR_VAR 0 34
71440: PUSH
71441: LD_INT 0
71443: PUSH
71444: LD_INT 4
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 0
71454: PUSH
71455: LD_INT 5
71457: NEG
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 1
71465: PUSH
71466: LD_INT 4
71468: NEG
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 1
71476: PUSH
71477: LD_INT 3
71479: NEG
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 0
71487: PUSH
71488: LD_INT 3
71490: NEG
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 1
71498: NEG
71499: PUSH
71500: LD_INT 4
71502: NEG
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 1
71510: NEG
71511: PUSH
71512: LD_INT 5
71514: NEG
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 2
71522: PUSH
71523: LD_INT 3
71525: NEG
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 2
71533: NEG
71534: PUSH
71535: LD_INT 5
71537: NEG
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 3
71545: PUSH
71546: LD_INT 0
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 3
71555: PUSH
71556: LD_INT 1
71558: NEG
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 4
71566: PUSH
71567: LD_INT 0
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: LD_INT 4
71576: PUSH
71577: LD_INT 1
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 3
71586: PUSH
71587: LD_INT 1
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 2
71596: PUSH
71597: LD_INT 0
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 2
71606: PUSH
71607: LD_INT 1
71609: NEG
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 2
71617: PUSH
71618: LD_INT 2
71620: NEG
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 4
71628: PUSH
71629: LD_INT 2
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 4
71638: PUSH
71639: LD_INT 4
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 4
71648: PUSH
71649: LD_INT 3
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 5
71658: PUSH
71659: LD_INT 4
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 5
71668: PUSH
71669: LD_INT 5
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: LD_INT 4
71678: PUSH
71679: LD_INT 5
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 3
71688: PUSH
71689: LD_INT 4
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 3
71698: PUSH
71699: LD_INT 3
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 5
71708: PUSH
71709: LD_INT 3
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 3
71718: PUSH
71719: LD_INT 5
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 0
71728: PUSH
71729: LD_INT 3
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 0
71738: PUSH
71739: LD_INT 2
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 1
71748: PUSH
71749: LD_INT 3
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: LD_INT 1
71758: PUSH
71759: LD_INT 4
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 0
71768: PUSH
71769: LD_INT 4
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 1
71778: NEG
71779: PUSH
71780: LD_INT 3
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 1
71789: NEG
71790: PUSH
71791: LD_INT 2
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 2
71800: PUSH
71801: LD_INT 4
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_INT 2
71810: NEG
71811: PUSH
71812: LD_INT 2
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 4
71821: NEG
71822: PUSH
71823: LD_INT 0
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 4
71832: NEG
71833: PUSH
71834: LD_INT 1
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 3
71844: NEG
71845: PUSH
71846: LD_INT 0
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 3
71855: NEG
71856: PUSH
71857: LD_INT 1
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 4
71866: NEG
71867: PUSH
71868: LD_INT 1
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 5
71877: NEG
71878: PUSH
71879: LD_INT 0
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 5
71888: NEG
71889: PUSH
71890: LD_INT 1
71892: NEG
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 5
71900: NEG
71901: PUSH
71902: LD_INT 2
71904: NEG
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 3
71912: NEG
71913: PUSH
71914: LD_INT 2
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: ST_TO_ADDR
// end ; end ;
71968: GO 71971
71970: POP
// case btype of b_depot , b_warehouse :
71971: LD_VAR 0 1
71975: PUSH
71976: LD_INT 0
71978: DOUBLE
71979: EQUAL
71980: IFTRUE 71990
71982: LD_INT 1
71984: DOUBLE
71985: EQUAL
71986: IFTRUE 71990
71988: GO 72191
71990: POP
// case nation of nation_american :
71991: LD_VAR 0 5
71995: PUSH
71996: LD_INT 1
71998: DOUBLE
71999: EQUAL
72000: IFTRUE 72004
72002: GO 72060
72004: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72005: LD_ADDR_VAR 0 9
72009: PUSH
72010: LD_VAR 0 11
72014: PUSH
72015: LD_VAR 0 12
72019: PUSH
72020: LD_VAR 0 13
72024: PUSH
72025: LD_VAR 0 14
72029: PUSH
72030: LD_VAR 0 15
72034: PUSH
72035: LD_VAR 0 16
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: PUSH
72048: LD_VAR 0 4
72052: PUSH
72053: LD_INT 1
72055: PLUS
72056: ARRAY
72057: ST_TO_ADDR
72058: GO 72189
72060: LD_INT 2
72062: DOUBLE
72063: EQUAL
72064: IFTRUE 72068
72066: GO 72124
72068: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72069: LD_ADDR_VAR 0 9
72073: PUSH
72074: LD_VAR 0 17
72078: PUSH
72079: LD_VAR 0 18
72083: PUSH
72084: LD_VAR 0 19
72088: PUSH
72089: LD_VAR 0 20
72093: PUSH
72094: LD_VAR 0 21
72098: PUSH
72099: LD_VAR 0 22
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: PUSH
72112: LD_VAR 0 4
72116: PUSH
72117: LD_INT 1
72119: PLUS
72120: ARRAY
72121: ST_TO_ADDR
72122: GO 72189
72124: LD_INT 3
72126: DOUBLE
72127: EQUAL
72128: IFTRUE 72132
72130: GO 72188
72132: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72133: LD_ADDR_VAR 0 9
72137: PUSH
72138: LD_VAR 0 23
72142: PUSH
72143: LD_VAR 0 24
72147: PUSH
72148: LD_VAR 0 25
72152: PUSH
72153: LD_VAR 0 26
72157: PUSH
72158: LD_VAR 0 27
72162: PUSH
72163: LD_VAR 0 28
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: PUSH
72176: LD_VAR 0 4
72180: PUSH
72181: LD_INT 1
72183: PLUS
72184: ARRAY
72185: ST_TO_ADDR
72186: GO 72189
72188: POP
72189: GO 72744
72191: LD_INT 2
72193: DOUBLE
72194: EQUAL
72195: IFTRUE 72205
72197: LD_INT 3
72199: DOUBLE
72200: EQUAL
72201: IFTRUE 72205
72203: GO 72261
72205: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72206: LD_ADDR_VAR 0 9
72210: PUSH
72211: LD_VAR 0 29
72215: PUSH
72216: LD_VAR 0 30
72220: PUSH
72221: LD_VAR 0 31
72225: PUSH
72226: LD_VAR 0 32
72230: PUSH
72231: LD_VAR 0 33
72235: PUSH
72236: LD_VAR 0 34
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: PUSH
72249: LD_VAR 0 4
72253: PUSH
72254: LD_INT 1
72256: PLUS
72257: ARRAY
72258: ST_TO_ADDR
72259: GO 72744
72261: LD_INT 16
72263: DOUBLE
72264: EQUAL
72265: IFTRUE 72323
72267: LD_INT 17
72269: DOUBLE
72270: EQUAL
72271: IFTRUE 72323
72273: LD_INT 18
72275: DOUBLE
72276: EQUAL
72277: IFTRUE 72323
72279: LD_INT 19
72281: DOUBLE
72282: EQUAL
72283: IFTRUE 72323
72285: LD_INT 22
72287: DOUBLE
72288: EQUAL
72289: IFTRUE 72323
72291: LD_INT 20
72293: DOUBLE
72294: EQUAL
72295: IFTRUE 72323
72297: LD_INT 21
72299: DOUBLE
72300: EQUAL
72301: IFTRUE 72323
72303: LD_INT 23
72305: DOUBLE
72306: EQUAL
72307: IFTRUE 72323
72309: LD_INT 24
72311: DOUBLE
72312: EQUAL
72313: IFTRUE 72323
72315: LD_INT 25
72317: DOUBLE
72318: EQUAL
72319: IFTRUE 72323
72321: GO 72379
72323: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72324: LD_ADDR_VAR 0 9
72328: PUSH
72329: LD_VAR 0 35
72333: PUSH
72334: LD_VAR 0 36
72338: PUSH
72339: LD_VAR 0 37
72343: PUSH
72344: LD_VAR 0 38
72348: PUSH
72349: LD_VAR 0 39
72353: PUSH
72354: LD_VAR 0 40
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: PUSH
72367: LD_VAR 0 4
72371: PUSH
72372: LD_INT 1
72374: PLUS
72375: ARRAY
72376: ST_TO_ADDR
72377: GO 72744
72379: LD_INT 6
72381: DOUBLE
72382: EQUAL
72383: IFTRUE 72435
72385: LD_INT 7
72387: DOUBLE
72388: EQUAL
72389: IFTRUE 72435
72391: LD_INT 8
72393: DOUBLE
72394: EQUAL
72395: IFTRUE 72435
72397: LD_INT 13
72399: DOUBLE
72400: EQUAL
72401: IFTRUE 72435
72403: LD_INT 12
72405: DOUBLE
72406: EQUAL
72407: IFTRUE 72435
72409: LD_INT 15
72411: DOUBLE
72412: EQUAL
72413: IFTRUE 72435
72415: LD_INT 11
72417: DOUBLE
72418: EQUAL
72419: IFTRUE 72435
72421: LD_INT 14
72423: DOUBLE
72424: EQUAL
72425: IFTRUE 72435
72427: LD_INT 10
72429: DOUBLE
72430: EQUAL
72431: IFTRUE 72435
72433: GO 72491
72435: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72436: LD_ADDR_VAR 0 9
72440: PUSH
72441: LD_VAR 0 41
72445: PUSH
72446: LD_VAR 0 42
72450: PUSH
72451: LD_VAR 0 43
72455: PUSH
72456: LD_VAR 0 44
72460: PUSH
72461: LD_VAR 0 45
72465: PUSH
72466: LD_VAR 0 46
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: PUSH
72479: LD_VAR 0 4
72483: PUSH
72484: LD_INT 1
72486: PLUS
72487: ARRAY
72488: ST_TO_ADDR
72489: GO 72744
72491: LD_INT 36
72493: DOUBLE
72494: EQUAL
72495: IFTRUE 72499
72497: GO 72555
72499: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72500: LD_ADDR_VAR 0 9
72504: PUSH
72505: LD_VAR 0 47
72509: PUSH
72510: LD_VAR 0 48
72514: PUSH
72515: LD_VAR 0 49
72519: PUSH
72520: LD_VAR 0 50
72524: PUSH
72525: LD_VAR 0 51
72529: PUSH
72530: LD_VAR 0 52
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: PUSH
72543: LD_VAR 0 4
72547: PUSH
72548: LD_INT 1
72550: PLUS
72551: ARRAY
72552: ST_TO_ADDR
72553: GO 72744
72555: LD_INT 4
72557: DOUBLE
72558: EQUAL
72559: IFTRUE 72581
72561: LD_INT 5
72563: DOUBLE
72564: EQUAL
72565: IFTRUE 72581
72567: LD_INT 34
72569: DOUBLE
72570: EQUAL
72571: IFTRUE 72581
72573: LD_INT 37
72575: DOUBLE
72576: EQUAL
72577: IFTRUE 72581
72579: GO 72637
72581: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72582: LD_ADDR_VAR 0 9
72586: PUSH
72587: LD_VAR 0 53
72591: PUSH
72592: LD_VAR 0 54
72596: PUSH
72597: LD_VAR 0 55
72601: PUSH
72602: LD_VAR 0 56
72606: PUSH
72607: LD_VAR 0 57
72611: PUSH
72612: LD_VAR 0 58
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: PUSH
72625: LD_VAR 0 4
72629: PUSH
72630: LD_INT 1
72632: PLUS
72633: ARRAY
72634: ST_TO_ADDR
72635: GO 72744
72637: LD_INT 31
72639: DOUBLE
72640: EQUAL
72641: IFTRUE 72687
72643: LD_INT 32
72645: DOUBLE
72646: EQUAL
72647: IFTRUE 72687
72649: LD_INT 33
72651: DOUBLE
72652: EQUAL
72653: IFTRUE 72687
72655: LD_INT 27
72657: DOUBLE
72658: EQUAL
72659: IFTRUE 72687
72661: LD_INT 26
72663: DOUBLE
72664: EQUAL
72665: IFTRUE 72687
72667: LD_INT 28
72669: DOUBLE
72670: EQUAL
72671: IFTRUE 72687
72673: LD_INT 29
72675: DOUBLE
72676: EQUAL
72677: IFTRUE 72687
72679: LD_INT 30
72681: DOUBLE
72682: EQUAL
72683: IFTRUE 72687
72685: GO 72743
72687: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72688: LD_ADDR_VAR 0 9
72692: PUSH
72693: LD_VAR 0 59
72697: PUSH
72698: LD_VAR 0 60
72702: PUSH
72703: LD_VAR 0 61
72707: PUSH
72708: LD_VAR 0 62
72712: PUSH
72713: LD_VAR 0 63
72717: PUSH
72718: LD_VAR 0 64
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: PUSH
72731: LD_VAR 0 4
72735: PUSH
72736: LD_INT 1
72738: PLUS
72739: ARRAY
72740: ST_TO_ADDR
72741: GO 72744
72743: POP
// temp_list2 = [ ] ;
72744: LD_ADDR_VAR 0 10
72748: PUSH
72749: EMPTY
72750: ST_TO_ADDR
// for i in temp_list do
72751: LD_ADDR_VAR 0 8
72755: PUSH
72756: LD_VAR 0 9
72760: PUSH
72761: FOR_IN
72762: IFFALSE 72814
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72764: LD_ADDR_VAR 0 10
72768: PUSH
72769: LD_VAR 0 10
72773: PUSH
72774: LD_VAR 0 8
72778: PUSH
72779: LD_INT 1
72781: ARRAY
72782: PUSH
72783: LD_VAR 0 2
72787: PLUS
72788: PUSH
72789: LD_VAR 0 8
72793: PUSH
72794: LD_INT 2
72796: ARRAY
72797: PUSH
72798: LD_VAR 0 3
72802: PLUS
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: EMPTY
72809: LIST
72810: ADD
72811: ST_TO_ADDR
72812: GO 72761
72814: POP
72815: POP
// result = temp_list2 ;
72816: LD_ADDR_VAR 0 7
72820: PUSH
72821: LD_VAR 0 10
72825: ST_TO_ADDR
// end ;
72826: LD_VAR 0 7
72830: RET
// export function EnemyInRange ( unit , dist ) ; begin
72831: LD_INT 0
72833: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72834: LD_ADDR_VAR 0 3
72838: PUSH
72839: LD_VAR 0 1
72843: PPUSH
72844: CALL_OW 255
72848: PPUSH
72849: LD_VAR 0 1
72853: PPUSH
72854: CALL_OW 250
72858: PPUSH
72859: LD_VAR 0 1
72863: PPUSH
72864: CALL_OW 251
72868: PPUSH
72869: LD_VAR 0 2
72873: PPUSH
72874: CALL 46233 0 4
72878: PUSH
72879: LD_INT 4
72881: ARRAY
72882: ST_TO_ADDR
// end ;
72883: LD_VAR 0 3
72887: RET
// export function PlayerSeeMe ( unit ) ; begin
72888: LD_INT 0
72890: PPUSH
// result := See ( your_side , unit ) ;
72891: LD_ADDR_VAR 0 2
72895: PUSH
72896: LD_OWVAR 2
72900: PPUSH
72901: LD_VAR 0 1
72905: PPUSH
72906: CALL_OW 292
72910: ST_TO_ADDR
// end ;
72911: LD_VAR 0 2
72915: RET
// export function ReverseDir ( unit ) ; begin
72916: LD_INT 0
72918: PPUSH
// if not unit then
72919: LD_VAR 0 1
72923: NOT
72924: IFFALSE 72928
// exit ;
72926: GO 72951
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72928: LD_ADDR_VAR 0 2
72932: PUSH
72933: LD_VAR 0 1
72937: PPUSH
72938: CALL_OW 254
72942: PUSH
72943: LD_INT 3
72945: PLUS
72946: PUSH
72947: LD_INT 6
72949: MOD
72950: ST_TO_ADDR
// end ;
72951: LD_VAR 0 2
72955: RET
// export function ReverseArray ( array ) ; var i ; begin
72956: LD_INT 0
72958: PPUSH
72959: PPUSH
// if not array then
72960: LD_VAR 0 1
72964: NOT
72965: IFFALSE 72969
// exit ;
72967: GO 73024
// result := [ ] ;
72969: LD_ADDR_VAR 0 2
72973: PUSH
72974: EMPTY
72975: ST_TO_ADDR
// for i := array downto 1 do
72976: LD_ADDR_VAR 0 3
72980: PUSH
72981: DOUBLE
72982: LD_VAR 0 1
72986: INC
72987: ST_TO_ADDR
72988: LD_INT 1
72990: PUSH
72991: FOR_DOWNTO
72992: IFFALSE 73022
// result := Join ( result , array [ i ] ) ;
72994: LD_ADDR_VAR 0 2
72998: PUSH
72999: LD_VAR 0 2
73003: PPUSH
73004: LD_VAR 0 1
73008: PUSH
73009: LD_VAR 0 3
73013: ARRAY
73014: PPUSH
73015: CALL 77668 0 2
73019: ST_TO_ADDR
73020: GO 72991
73022: POP
73023: POP
// end ;
73024: LD_VAR 0 2
73028: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73029: LD_INT 0
73031: PPUSH
73032: PPUSH
73033: PPUSH
73034: PPUSH
73035: PPUSH
73036: PPUSH
// if not unit or not hexes then
73037: LD_VAR 0 1
73041: NOT
73042: PUSH
73043: LD_VAR 0 2
73047: NOT
73048: OR
73049: IFFALSE 73053
// exit ;
73051: GO 73176
// dist := 9999 ;
73053: LD_ADDR_VAR 0 5
73057: PUSH
73058: LD_INT 9999
73060: ST_TO_ADDR
// for i = 1 to hexes do
73061: LD_ADDR_VAR 0 4
73065: PUSH
73066: DOUBLE
73067: LD_INT 1
73069: DEC
73070: ST_TO_ADDR
73071: LD_VAR 0 2
73075: PUSH
73076: FOR_TO
73077: IFFALSE 73164
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73079: LD_ADDR_VAR 0 6
73083: PUSH
73084: LD_VAR 0 1
73088: PPUSH
73089: LD_VAR 0 2
73093: PUSH
73094: LD_VAR 0 4
73098: ARRAY
73099: PUSH
73100: LD_INT 1
73102: ARRAY
73103: PPUSH
73104: LD_VAR 0 2
73108: PUSH
73109: LD_VAR 0 4
73113: ARRAY
73114: PUSH
73115: LD_INT 2
73117: ARRAY
73118: PPUSH
73119: CALL_OW 297
73123: ST_TO_ADDR
// if tdist < dist then
73124: LD_VAR 0 6
73128: PUSH
73129: LD_VAR 0 5
73133: LESS
73134: IFFALSE 73162
// begin hex := hexes [ i ] ;
73136: LD_ADDR_VAR 0 8
73140: PUSH
73141: LD_VAR 0 2
73145: PUSH
73146: LD_VAR 0 4
73150: ARRAY
73151: ST_TO_ADDR
// dist := tdist ;
73152: LD_ADDR_VAR 0 5
73156: PUSH
73157: LD_VAR 0 6
73161: ST_TO_ADDR
// end ; end ;
73162: GO 73076
73164: POP
73165: POP
// result := hex ;
73166: LD_ADDR_VAR 0 3
73170: PUSH
73171: LD_VAR 0 8
73175: ST_TO_ADDR
// end ;
73176: LD_VAR 0 3
73180: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73181: LD_INT 0
73183: PPUSH
73184: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73185: LD_VAR 0 1
73189: NOT
73190: PUSH
73191: LD_VAR 0 1
73195: PUSH
73196: LD_INT 21
73198: PUSH
73199: LD_INT 2
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: PUSH
73206: LD_INT 23
73208: PUSH
73209: LD_INT 2
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: PPUSH
73220: CALL_OW 69
73224: IN
73225: NOT
73226: OR
73227: IFFALSE 73231
// exit ;
73229: GO 73278
// for i = 1 to 3 do
73231: LD_ADDR_VAR 0 3
73235: PUSH
73236: DOUBLE
73237: LD_INT 1
73239: DEC
73240: ST_TO_ADDR
73241: LD_INT 3
73243: PUSH
73244: FOR_TO
73245: IFFALSE 73276
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73247: LD_VAR 0 1
73251: PPUSH
73252: CALL_OW 250
73256: PPUSH
73257: LD_VAR 0 1
73261: PPUSH
73262: CALL_OW 251
73266: PPUSH
73267: LD_INT 1
73269: PPUSH
73270: CALL_OW 453
73274: GO 73244
73276: POP
73277: POP
// end ;
73278: LD_VAR 0 2
73282: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73283: LD_INT 0
73285: PPUSH
73286: PPUSH
73287: PPUSH
73288: PPUSH
73289: PPUSH
73290: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73291: LD_VAR 0 1
73295: NOT
73296: PUSH
73297: LD_VAR 0 2
73301: NOT
73302: OR
73303: PUSH
73304: LD_VAR 0 1
73308: PPUSH
73309: CALL_OW 314
73313: OR
73314: IFFALSE 73318
// exit ;
73316: GO 73785
// if GetLives ( i ) < 250 then
73318: LD_VAR 0 4
73322: PPUSH
73323: CALL_OW 256
73327: PUSH
73328: LD_INT 250
73330: LESS
73331: IFFALSE 73344
// begin ComAutodestruct ( i ) ;
73333: LD_VAR 0 4
73337: PPUSH
73338: CALL 73181 0 1
// exit ;
73342: GO 73785
// end ; x := GetX ( enemy_unit ) ;
73344: LD_ADDR_VAR 0 7
73348: PUSH
73349: LD_VAR 0 2
73353: PPUSH
73354: CALL_OW 250
73358: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73359: LD_ADDR_VAR 0 8
73363: PUSH
73364: LD_VAR 0 2
73368: PPUSH
73369: CALL_OW 251
73373: ST_TO_ADDR
// if not x or not y then
73374: LD_VAR 0 7
73378: NOT
73379: PUSH
73380: LD_VAR 0 8
73384: NOT
73385: OR
73386: IFFALSE 73390
// exit ;
73388: GO 73785
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73390: LD_ADDR_VAR 0 6
73394: PUSH
73395: LD_VAR 0 7
73399: PPUSH
73400: LD_INT 0
73402: PPUSH
73403: LD_INT 4
73405: PPUSH
73406: CALL_OW 272
73410: PUSH
73411: LD_VAR 0 8
73415: PPUSH
73416: LD_INT 0
73418: PPUSH
73419: LD_INT 4
73421: PPUSH
73422: CALL_OW 273
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_VAR 0 7
73435: PPUSH
73436: LD_INT 1
73438: PPUSH
73439: LD_INT 4
73441: PPUSH
73442: CALL_OW 272
73446: PUSH
73447: LD_VAR 0 8
73451: PPUSH
73452: LD_INT 1
73454: PPUSH
73455: LD_INT 4
73457: PPUSH
73458: CALL_OW 273
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_VAR 0 7
73471: PPUSH
73472: LD_INT 2
73474: PPUSH
73475: LD_INT 4
73477: PPUSH
73478: CALL_OW 272
73482: PUSH
73483: LD_VAR 0 8
73487: PPUSH
73488: LD_INT 2
73490: PPUSH
73491: LD_INT 4
73493: PPUSH
73494: CALL_OW 273
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_VAR 0 7
73507: PPUSH
73508: LD_INT 3
73510: PPUSH
73511: LD_INT 4
73513: PPUSH
73514: CALL_OW 272
73518: PUSH
73519: LD_VAR 0 8
73523: PPUSH
73524: LD_INT 3
73526: PPUSH
73527: LD_INT 4
73529: PPUSH
73530: CALL_OW 273
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_VAR 0 7
73543: PPUSH
73544: LD_INT 4
73546: PPUSH
73547: LD_INT 4
73549: PPUSH
73550: CALL_OW 272
73554: PUSH
73555: LD_VAR 0 8
73559: PPUSH
73560: LD_INT 4
73562: PPUSH
73563: LD_INT 4
73565: PPUSH
73566: CALL_OW 273
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_VAR 0 7
73579: PPUSH
73580: LD_INT 5
73582: PPUSH
73583: LD_INT 4
73585: PPUSH
73586: CALL_OW 272
73590: PUSH
73591: LD_VAR 0 8
73595: PPUSH
73596: LD_INT 5
73598: PPUSH
73599: LD_INT 4
73601: PPUSH
73602: CALL_OW 273
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: ST_TO_ADDR
// for i = tmp downto 1 do
73619: LD_ADDR_VAR 0 4
73623: PUSH
73624: DOUBLE
73625: LD_VAR 0 6
73629: INC
73630: ST_TO_ADDR
73631: LD_INT 1
73633: PUSH
73634: FOR_DOWNTO
73635: IFFALSE 73736
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73637: LD_VAR 0 6
73641: PUSH
73642: LD_VAR 0 4
73646: ARRAY
73647: PUSH
73648: LD_INT 1
73650: ARRAY
73651: PPUSH
73652: LD_VAR 0 6
73656: PUSH
73657: LD_VAR 0 4
73661: ARRAY
73662: PUSH
73663: LD_INT 2
73665: ARRAY
73666: PPUSH
73667: CALL_OW 488
73671: NOT
73672: PUSH
73673: LD_VAR 0 6
73677: PUSH
73678: LD_VAR 0 4
73682: ARRAY
73683: PUSH
73684: LD_INT 1
73686: ARRAY
73687: PPUSH
73688: LD_VAR 0 6
73692: PUSH
73693: LD_VAR 0 4
73697: ARRAY
73698: PUSH
73699: LD_INT 2
73701: ARRAY
73702: PPUSH
73703: CALL_OW 428
73707: PUSH
73708: LD_INT 0
73710: NONEQUAL
73711: OR
73712: IFFALSE 73734
// tmp := Delete ( tmp , i ) ;
73714: LD_ADDR_VAR 0 6
73718: PUSH
73719: LD_VAR 0 6
73723: PPUSH
73724: LD_VAR 0 4
73728: PPUSH
73729: CALL_OW 3
73733: ST_TO_ADDR
73734: GO 73634
73736: POP
73737: POP
// j := GetClosestHex ( unit , tmp ) ;
73738: LD_ADDR_VAR 0 5
73742: PUSH
73743: LD_VAR 0 1
73747: PPUSH
73748: LD_VAR 0 6
73752: PPUSH
73753: CALL 73029 0 2
73757: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73758: LD_VAR 0 1
73762: PPUSH
73763: LD_VAR 0 5
73767: PUSH
73768: LD_INT 1
73770: ARRAY
73771: PPUSH
73772: LD_VAR 0 5
73776: PUSH
73777: LD_INT 2
73779: ARRAY
73780: PPUSH
73781: CALL_OW 111
// end ;
73785: LD_VAR 0 3
73789: RET
// export function PrepareApemanSoldier ( ) ; begin
73790: LD_INT 0
73792: PPUSH
// uc_nation := 0 ;
73793: LD_ADDR_OWVAR 21
73797: PUSH
73798: LD_INT 0
73800: ST_TO_ADDR
// hc_sex := sex_male ;
73801: LD_ADDR_OWVAR 27
73805: PUSH
73806: LD_INT 1
73808: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73809: LD_ADDR_OWVAR 28
73813: PUSH
73814: LD_INT 15
73816: ST_TO_ADDR
// hc_gallery :=  ;
73817: LD_ADDR_OWVAR 33
73821: PUSH
73822: LD_STRING 
73824: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73825: LD_ADDR_OWVAR 31
73829: PUSH
73830: LD_INT 0
73832: PPUSH
73833: LD_INT 3
73835: PPUSH
73836: CALL_OW 12
73840: PUSH
73841: LD_INT 0
73843: PPUSH
73844: LD_INT 3
73846: PPUSH
73847: CALL_OW 12
73851: PUSH
73852: LD_INT 0
73854: PUSH
73855: LD_INT 0
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: ST_TO_ADDR
// end ;
73864: LD_VAR 0 1
73868: RET
// export function PrepareApemanEngineer ( ) ; begin
73869: LD_INT 0
73871: PPUSH
// uc_nation := 0 ;
73872: LD_ADDR_OWVAR 21
73876: PUSH
73877: LD_INT 0
73879: ST_TO_ADDR
// hc_sex := sex_male ;
73880: LD_ADDR_OWVAR 27
73884: PUSH
73885: LD_INT 1
73887: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73888: LD_ADDR_OWVAR 28
73892: PUSH
73893: LD_INT 16
73895: ST_TO_ADDR
// hc_gallery :=  ;
73896: LD_ADDR_OWVAR 33
73900: PUSH
73901: LD_STRING 
73903: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73904: LD_ADDR_OWVAR 31
73908: PUSH
73909: LD_INT 0
73911: PPUSH
73912: LD_INT 3
73914: PPUSH
73915: CALL_OW 12
73919: PUSH
73920: LD_INT 0
73922: PPUSH
73923: LD_INT 3
73925: PPUSH
73926: CALL_OW 12
73930: PUSH
73931: LD_INT 0
73933: PUSH
73934: LD_INT 0
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: ST_TO_ADDR
// end ;
73943: LD_VAR 0 1
73947: RET
// export function PrepareApeman ( agressivity ) ; begin
73948: LD_INT 0
73950: PPUSH
// uc_side := 0 ;
73951: LD_ADDR_OWVAR 20
73955: PUSH
73956: LD_INT 0
73958: ST_TO_ADDR
// uc_nation := 0 ;
73959: LD_ADDR_OWVAR 21
73963: PUSH
73964: LD_INT 0
73966: ST_TO_ADDR
// hc_sex := sex_male ;
73967: LD_ADDR_OWVAR 27
73971: PUSH
73972: LD_INT 1
73974: ST_TO_ADDR
// hc_class := class_apeman ;
73975: LD_ADDR_OWVAR 28
73979: PUSH
73980: LD_INT 12
73982: ST_TO_ADDR
// hc_gallery :=  ;
73983: LD_ADDR_OWVAR 33
73987: PUSH
73988: LD_STRING 
73990: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73991: LD_ADDR_OWVAR 35
73995: PUSH
73996: LD_VAR 0 1
74000: NEG
74001: PPUSH
74002: LD_VAR 0 1
74006: PPUSH
74007: CALL_OW 12
74011: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74012: LD_ADDR_OWVAR 31
74016: PUSH
74017: LD_INT 0
74019: PPUSH
74020: LD_INT 3
74022: PPUSH
74023: CALL_OW 12
74027: PUSH
74028: LD_INT 0
74030: PPUSH
74031: LD_INT 3
74033: PPUSH
74034: CALL_OW 12
74038: PUSH
74039: LD_INT 0
74041: PUSH
74042: LD_INT 0
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: LIST
74049: LIST
74050: ST_TO_ADDR
// end ;
74051: LD_VAR 0 2
74055: RET
// export function PrepareTiger ( agressivity ) ; begin
74056: LD_INT 0
74058: PPUSH
// uc_side := 0 ;
74059: LD_ADDR_OWVAR 20
74063: PUSH
74064: LD_INT 0
74066: ST_TO_ADDR
// uc_nation := 0 ;
74067: LD_ADDR_OWVAR 21
74071: PUSH
74072: LD_INT 0
74074: ST_TO_ADDR
// hc_class := class_tiger ;
74075: LD_ADDR_OWVAR 28
74079: PUSH
74080: LD_INT 14
74082: ST_TO_ADDR
// hc_gallery :=  ;
74083: LD_ADDR_OWVAR 33
74087: PUSH
74088: LD_STRING 
74090: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74091: LD_ADDR_OWVAR 35
74095: PUSH
74096: LD_VAR 0 1
74100: NEG
74101: PPUSH
74102: LD_VAR 0 1
74106: PPUSH
74107: CALL_OW 12
74111: ST_TO_ADDR
// end ;
74112: LD_VAR 0 2
74116: RET
// export function PrepareEnchidna ( ) ; begin
74117: LD_INT 0
74119: PPUSH
// uc_side := 0 ;
74120: LD_ADDR_OWVAR 20
74124: PUSH
74125: LD_INT 0
74127: ST_TO_ADDR
// uc_nation := 0 ;
74128: LD_ADDR_OWVAR 21
74132: PUSH
74133: LD_INT 0
74135: ST_TO_ADDR
// hc_class := class_baggie ;
74136: LD_ADDR_OWVAR 28
74140: PUSH
74141: LD_INT 13
74143: ST_TO_ADDR
// hc_gallery :=  ;
74144: LD_ADDR_OWVAR 33
74148: PUSH
74149: LD_STRING 
74151: ST_TO_ADDR
// end ;
74152: LD_VAR 0 1
74156: RET
// export function PrepareFrog ( ) ; begin
74157: LD_INT 0
74159: PPUSH
// uc_side := 0 ;
74160: LD_ADDR_OWVAR 20
74164: PUSH
74165: LD_INT 0
74167: ST_TO_ADDR
// uc_nation := 0 ;
74168: LD_ADDR_OWVAR 21
74172: PUSH
74173: LD_INT 0
74175: ST_TO_ADDR
// hc_class := class_frog ;
74176: LD_ADDR_OWVAR 28
74180: PUSH
74181: LD_INT 19
74183: ST_TO_ADDR
// hc_gallery :=  ;
74184: LD_ADDR_OWVAR 33
74188: PUSH
74189: LD_STRING 
74191: ST_TO_ADDR
// end ;
74192: LD_VAR 0 1
74196: RET
// export function PrepareFish ( ) ; begin
74197: LD_INT 0
74199: PPUSH
// uc_side := 0 ;
74200: LD_ADDR_OWVAR 20
74204: PUSH
74205: LD_INT 0
74207: ST_TO_ADDR
// uc_nation := 0 ;
74208: LD_ADDR_OWVAR 21
74212: PUSH
74213: LD_INT 0
74215: ST_TO_ADDR
// hc_class := class_fish ;
74216: LD_ADDR_OWVAR 28
74220: PUSH
74221: LD_INT 20
74223: ST_TO_ADDR
// hc_gallery :=  ;
74224: LD_ADDR_OWVAR 33
74228: PUSH
74229: LD_STRING 
74231: ST_TO_ADDR
// end ;
74232: LD_VAR 0 1
74236: RET
// export function PrepareBird ( ) ; begin
74237: LD_INT 0
74239: PPUSH
// uc_side := 0 ;
74240: LD_ADDR_OWVAR 20
74244: PUSH
74245: LD_INT 0
74247: ST_TO_ADDR
// uc_nation := 0 ;
74248: LD_ADDR_OWVAR 21
74252: PUSH
74253: LD_INT 0
74255: ST_TO_ADDR
// hc_class := class_phororhacos ;
74256: LD_ADDR_OWVAR 28
74260: PUSH
74261: LD_INT 18
74263: ST_TO_ADDR
// hc_gallery :=  ;
74264: LD_ADDR_OWVAR 33
74268: PUSH
74269: LD_STRING 
74271: ST_TO_ADDR
// end ;
74272: LD_VAR 0 1
74276: RET
// export function PrepareHorse ( ) ; begin
74277: LD_INT 0
74279: PPUSH
// uc_side := 0 ;
74280: LD_ADDR_OWVAR 20
74284: PUSH
74285: LD_INT 0
74287: ST_TO_ADDR
// uc_nation := 0 ;
74288: LD_ADDR_OWVAR 21
74292: PUSH
74293: LD_INT 0
74295: ST_TO_ADDR
// hc_class := class_horse ;
74296: LD_ADDR_OWVAR 28
74300: PUSH
74301: LD_INT 21
74303: ST_TO_ADDR
// hc_gallery :=  ;
74304: LD_ADDR_OWVAR 33
74308: PUSH
74309: LD_STRING 
74311: ST_TO_ADDR
// end ;
74312: LD_VAR 0 1
74316: RET
// export function PrepareMastodont ( ) ; begin
74317: LD_INT 0
74319: PPUSH
// uc_side := 0 ;
74320: LD_ADDR_OWVAR 20
74324: PUSH
74325: LD_INT 0
74327: ST_TO_ADDR
// uc_nation := 0 ;
74328: LD_ADDR_OWVAR 21
74332: PUSH
74333: LD_INT 0
74335: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74336: LD_ADDR_OWVAR 37
74340: PUSH
74341: LD_INT 31
74343: ST_TO_ADDR
// vc_control := control_rider ;
74344: LD_ADDR_OWVAR 38
74348: PUSH
74349: LD_INT 4
74351: ST_TO_ADDR
// end ;
74352: LD_VAR 0 1
74356: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74357: LD_INT 0
74359: PPUSH
74360: PPUSH
74361: PPUSH
// uc_side = 0 ;
74362: LD_ADDR_OWVAR 20
74366: PUSH
74367: LD_INT 0
74369: ST_TO_ADDR
// uc_nation = 0 ;
74370: LD_ADDR_OWVAR 21
74374: PUSH
74375: LD_INT 0
74377: ST_TO_ADDR
// InitHc_All ( ) ;
74378: CALL_OW 584
// InitVc ;
74382: CALL_OW 20
// if mastodonts then
74386: LD_VAR 0 6
74390: IFFALSE 74457
// for i = 1 to mastodonts do
74392: LD_ADDR_VAR 0 11
74396: PUSH
74397: DOUBLE
74398: LD_INT 1
74400: DEC
74401: ST_TO_ADDR
74402: LD_VAR 0 6
74406: PUSH
74407: FOR_TO
74408: IFFALSE 74455
// begin vc_chassis := 31 ;
74410: LD_ADDR_OWVAR 37
74414: PUSH
74415: LD_INT 31
74417: ST_TO_ADDR
// vc_control := control_rider ;
74418: LD_ADDR_OWVAR 38
74422: PUSH
74423: LD_INT 4
74425: ST_TO_ADDR
// animal := CreateVehicle ;
74426: LD_ADDR_VAR 0 12
74430: PUSH
74431: CALL_OW 45
74435: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74436: LD_VAR 0 12
74440: PPUSH
74441: LD_VAR 0 8
74445: PPUSH
74446: LD_INT 0
74448: PPUSH
74449: CALL 76585 0 3
// end ;
74453: GO 74407
74455: POP
74456: POP
// if horses then
74457: LD_VAR 0 5
74461: IFFALSE 74528
// for i = 1 to horses do
74463: LD_ADDR_VAR 0 11
74467: PUSH
74468: DOUBLE
74469: LD_INT 1
74471: DEC
74472: ST_TO_ADDR
74473: LD_VAR 0 5
74477: PUSH
74478: FOR_TO
74479: IFFALSE 74526
// begin hc_class := 21 ;
74481: LD_ADDR_OWVAR 28
74485: PUSH
74486: LD_INT 21
74488: ST_TO_ADDR
// hc_gallery :=  ;
74489: LD_ADDR_OWVAR 33
74493: PUSH
74494: LD_STRING 
74496: ST_TO_ADDR
// animal := CreateHuman ;
74497: LD_ADDR_VAR 0 12
74501: PUSH
74502: CALL_OW 44
74506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74507: LD_VAR 0 12
74511: PPUSH
74512: LD_VAR 0 8
74516: PPUSH
74517: LD_INT 0
74519: PPUSH
74520: CALL 76585 0 3
// end ;
74524: GO 74478
74526: POP
74527: POP
// if birds then
74528: LD_VAR 0 1
74532: IFFALSE 74599
// for i = 1 to birds do
74534: LD_ADDR_VAR 0 11
74538: PUSH
74539: DOUBLE
74540: LD_INT 1
74542: DEC
74543: ST_TO_ADDR
74544: LD_VAR 0 1
74548: PUSH
74549: FOR_TO
74550: IFFALSE 74597
// begin hc_class = 18 ;
74552: LD_ADDR_OWVAR 28
74556: PUSH
74557: LD_INT 18
74559: ST_TO_ADDR
// hc_gallery =  ;
74560: LD_ADDR_OWVAR 33
74564: PUSH
74565: LD_STRING 
74567: ST_TO_ADDR
// animal := CreateHuman ;
74568: LD_ADDR_VAR 0 12
74572: PUSH
74573: CALL_OW 44
74577: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74578: LD_VAR 0 12
74582: PPUSH
74583: LD_VAR 0 8
74587: PPUSH
74588: LD_INT 0
74590: PPUSH
74591: CALL 76585 0 3
// end ;
74595: GO 74549
74597: POP
74598: POP
// if tigers then
74599: LD_VAR 0 2
74603: IFFALSE 74687
// for i = 1 to tigers do
74605: LD_ADDR_VAR 0 11
74609: PUSH
74610: DOUBLE
74611: LD_INT 1
74613: DEC
74614: ST_TO_ADDR
74615: LD_VAR 0 2
74619: PUSH
74620: FOR_TO
74621: IFFALSE 74685
// begin hc_class = class_tiger ;
74623: LD_ADDR_OWVAR 28
74627: PUSH
74628: LD_INT 14
74630: ST_TO_ADDR
// hc_gallery =  ;
74631: LD_ADDR_OWVAR 33
74635: PUSH
74636: LD_STRING 
74638: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74639: LD_ADDR_OWVAR 35
74643: PUSH
74644: LD_INT 7
74646: NEG
74647: PPUSH
74648: LD_INT 7
74650: PPUSH
74651: CALL_OW 12
74655: ST_TO_ADDR
// animal := CreateHuman ;
74656: LD_ADDR_VAR 0 12
74660: PUSH
74661: CALL_OW 44
74665: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74666: LD_VAR 0 12
74670: PPUSH
74671: LD_VAR 0 8
74675: PPUSH
74676: LD_INT 0
74678: PPUSH
74679: CALL 76585 0 3
// end ;
74683: GO 74620
74685: POP
74686: POP
// if apemans then
74687: LD_VAR 0 3
74691: IFFALSE 74814
// for i = 1 to apemans do
74693: LD_ADDR_VAR 0 11
74697: PUSH
74698: DOUBLE
74699: LD_INT 1
74701: DEC
74702: ST_TO_ADDR
74703: LD_VAR 0 3
74707: PUSH
74708: FOR_TO
74709: IFFALSE 74812
// begin hc_class = class_apeman ;
74711: LD_ADDR_OWVAR 28
74715: PUSH
74716: LD_INT 12
74718: ST_TO_ADDR
// hc_gallery =  ;
74719: LD_ADDR_OWVAR 33
74723: PUSH
74724: LD_STRING 
74726: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74727: LD_ADDR_OWVAR 35
74731: PUSH
74732: LD_INT 2
74734: NEG
74735: PPUSH
74736: LD_INT 2
74738: PPUSH
74739: CALL_OW 12
74743: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74744: LD_ADDR_OWVAR 31
74748: PUSH
74749: LD_INT 1
74751: PPUSH
74752: LD_INT 3
74754: PPUSH
74755: CALL_OW 12
74759: PUSH
74760: LD_INT 1
74762: PPUSH
74763: LD_INT 3
74765: PPUSH
74766: CALL_OW 12
74770: PUSH
74771: LD_INT 0
74773: PUSH
74774: LD_INT 0
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: ST_TO_ADDR
// animal := CreateHuman ;
74783: LD_ADDR_VAR 0 12
74787: PUSH
74788: CALL_OW 44
74792: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74793: LD_VAR 0 12
74797: PPUSH
74798: LD_VAR 0 8
74802: PPUSH
74803: LD_INT 0
74805: PPUSH
74806: CALL 76585 0 3
// end ;
74810: GO 74708
74812: POP
74813: POP
// if enchidnas then
74814: LD_VAR 0 4
74818: IFFALSE 74885
// for i = 1 to enchidnas do
74820: LD_ADDR_VAR 0 11
74824: PUSH
74825: DOUBLE
74826: LD_INT 1
74828: DEC
74829: ST_TO_ADDR
74830: LD_VAR 0 4
74834: PUSH
74835: FOR_TO
74836: IFFALSE 74883
// begin hc_class = 13 ;
74838: LD_ADDR_OWVAR 28
74842: PUSH
74843: LD_INT 13
74845: ST_TO_ADDR
// hc_gallery =  ;
74846: LD_ADDR_OWVAR 33
74850: PUSH
74851: LD_STRING 
74853: ST_TO_ADDR
// animal := CreateHuman ;
74854: LD_ADDR_VAR 0 12
74858: PUSH
74859: CALL_OW 44
74863: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74864: LD_VAR 0 12
74868: PPUSH
74869: LD_VAR 0 8
74873: PPUSH
74874: LD_INT 0
74876: PPUSH
74877: CALL 76585 0 3
// end ;
74881: GO 74835
74883: POP
74884: POP
// if fishes then
74885: LD_VAR 0 7
74889: IFFALSE 74956
// for i = 1 to fishes do
74891: LD_ADDR_VAR 0 11
74895: PUSH
74896: DOUBLE
74897: LD_INT 1
74899: DEC
74900: ST_TO_ADDR
74901: LD_VAR 0 7
74905: PUSH
74906: FOR_TO
74907: IFFALSE 74954
// begin hc_class = 20 ;
74909: LD_ADDR_OWVAR 28
74913: PUSH
74914: LD_INT 20
74916: ST_TO_ADDR
// hc_gallery =  ;
74917: LD_ADDR_OWVAR 33
74921: PUSH
74922: LD_STRING 
74924: ST_TO_ADDR
// animal := CreateHuman ;
74925: LD_ADDR_VAR 0 12
74929: PUSH
74930: CALL_OW 44
74934: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74935: LD_VAR 0 12
74939: PPUSH
74940: LD_VAR 0 9
74944: PPUSH
74945: LD_INT 0
74947: PPUSH
74948: CALL 76585 0 3
// end ;
74952: GO 74906
74954: POP
74955: POP
// end ;
74956: LD_VAR 0 10
74960: RET
// export function WantHeal ( sci , unit ) ; begin
74961: LD_INT 0
74963: PPUSH
// if GetTaskList ( sci ) > 0 then
74964: LD_VAR 0 1
74968: PPUSH
74969: CALL_OW 437
74973: PUSH
74974: LD_INT 0
74976: GREATER
74977: IFFALSE 75047
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74979: LD_VAR 0 1
74983: PPUSH
74984: CALL_OW 437
74988: PUSH
74989: LD_INT 1
74991: ARRAY
74992: PUSH
74993: LD_INT 1
74995: ARRAY
74996: PUSH
74997: LD_STRING l
74999: EQUAL
75000: PUSH
75001: LD_VAR 0 1
75005: PPUSH
75006: CALL_OW 437
75010: PUSH
75011: LD_INT 1
75013: ARRAY
75014: PUSH
75015: LD_INT 4
75017: ARRAY
75018: PUSH
75019: LD_VAR 0 2
75023: EQUAL
75024: AND
75025: IFFALSE 75037
// result := true else
75027: LD_ADDR_VAR 0 3
75031: PUSH
75032: LD_INT 1
75034: ST_TO_ADDR
75035: GO 75045
// result := false ;
75037: LD_ADDR_VAR 0 3
75041: PUSH
75042: LD_INT 0
75044: ST_TO_ADDR
// end else
75045: GO 75055
// result := false ;
75047: LD_ADDR_VAR 0 3
75051: PUSH
75052: LD_INT 0
75054: ST_TO_ADDR
// end ;
75055: LD_VAR 0 3
75059: RET
// export function HealTarget ( sci ) ; begin
75060: LD_INT 0
75062: PPUSH
// if not sci then
75063: LD_VAR 0 1
75067: NOT
75068: IFFALSE 75072
// exit ;
75070: GO 75137
// result := 0 ;
75072: LD_ADDR_VAR 0 2
75076: PUSH
75077: LD_INT 0
75079: ST_TO_ADDR
// if GetTaskList ( sci ) then
75080: LD_VAR 0 1
75084: PPUSH
75085: CALL_OW 437
75089: IFFALSE 75137
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75091: LD_VAR 0 1
75095: PPUSH
75096: CALL_OW 437
75100: PUSH
75101: LD_INT 1
75103: ARRAY
75104: PUSH
75105: LD_INT 1
75107: ARRAY
75108: PUSH
75109: LD_STRING l
75111: EQUAL
75112: IFFALSE 75137
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75114: LD_ADDR_VAR 0 2
75118: PUSH
75119: LD_VAR 0 1
75123: PPUSH
75124: CALL_OW 437
75128: PUSH
75129: LD_INT 1
75131: ARRAY
75132: PUSH
75133: LD_INT 4
75135: ARRAY
75136: ST_TO_ADDR
// end ;
75137: LD_VAR 0 2
75141: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75142: LD_INT 0
75144: PPUSH
75145: PPUSH
75146: PPUSH
75147: PPUSH
// if not base_units then
75148: LD_VAR 0 1
75152: NOT
75153: IFFALSE 75157
// exit ;
75155: GO 75244
// result := false ;
75157: LD_ADDR_VAR 0 2
75161: PUSH
75162: LD_INT 0
75164: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75165: LD_ADDR_VAR 0 5
75169: PUSH
75170: LD_VAR 0 1
75174: PPUSH
75175: LD_INT 21
75177: PUSH
75178: LD_INT 3
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PPUSH
75185: CALL_OW 72
75189: ST_TO_ADDR
// if not tmp then
75190: LD_VAR 0 5
75194: NOT
75195: IFFALSE 75199
// exit ;
75197: GO 75244
// for i in tmp do
75199: LD_ADDR_VAR 0 3
75203: PUSH
75204: LD_VAR 0 5
75208: PUSH
75209: FOR_IN
75210: IFFALSE 75242
// begin result := EnemyInRange ( i , 22 ) ;
75212: LD_ADDR_VAR 0 2
75216: PUSH
75217: LD_VAR 0 3
75221: PPUSH
75222: LD_INT 22
75224: PPUSH
75225: CALL 72831 0 2
75229: ST_TO_ADDR
// if result then
75230: LD_VAR 0 2
75234: IFFALSE 75240
// exit ;
75236: POP
75237: POP
75238: GO 75244
// end ;
75240: GO 75209
75242: POP
75243: POP
// end ;
75244: LD_VAR 0 2
75248: RET
// export function FilterByTag ( units , tag ) ; begin
75249: LD_INT 0
75251: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75252: LD_ADDR_VAR 0 3
75256: PUSH
75257: LD_VAR 0 1
75261: PPUSH
75262: LD_INT 120
75264: PUSH
75265: LD_VAR 0 2
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: PPUSH
75274: CALL_OW 72
75278: ST_TO_ADDR
// end ;
75279: LD_VAR 0 3
75283: RET
// export function IsDriver ( un ) ; begin
75284: LD_INT 0
75286: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75287: LD_ADDR_VAR 0 2
75291: PUSH
75292: LD_VAR 0 1
75296: PUSH
75297: LD_INT 55
75299: PUSH
75300: EMPTY
75301: LIST
75302: PPUSH
75303: CALL_OW 69
75307: IN
75308: ST_TO_ADDR
// end ;
75309: LD_VAR 0 2
75313: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75314: LD_INT 0
75316: PPUSH
75317: PPUSH
// list := [ ] ;
75318: LD_ADDR_VAR 0 5
75322: PUSH
75323: EMPTY
75324: ST_TO_ADDR
// case d of 0 :
75325: LD_VAR 0 3
75329: PUSH
75330: LD_INT 0
75332: DOUBLE
75333: EQUAL
75334: IFTRUE 75338
75336: GO 75471
75338: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75339: LD_ADDR_VAR 0 5
75343: PUSH
75344: LD_VAR 0 1
75348: PUSH
75349: LD_INT 4
75351: MINUS
75352: PUSH
75353: LD_VAR 0 2
75357: PUSH
75358: LD_INT 4
75360: MINUS
75361: PUSH
75362: LD_INT 2
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: LIST
75369: PUSH
75370: LD_VAR 0 1
75374: PUSH
75375: LD_INT 3
75377: MINUS
75378: PUSH
75379: LD_VAR 0 2
75383: PUSH
75384: LD_INT 1
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: LIST
75391: PUSH
75392: LD_VAR 0 1
75396: PUSH
75397: LD_INT 4
75399: PLUS
75400: PUSH
75401: LD_VAR 0 2
75405: PUSH
75406: LD_INT 4
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: LIST
75413: PUSH
75414: LD_VAR 0 1
75418: PUSH
75419: LD_INT 3
75421: PLUS
75422: PUSH
75423: LD_VAR 0 2
75427: PUSH
75428: LD_INT 3
75430: PLUS
75431: PUSH
75432: LD_INT 5
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: LIST
75439: PUSH
75440: LD_VAR 0 1
75444: PUSH
75445: LD_VAR 0 2
75449: PUSH
75450: LD_INT 4
75452: PLUS
75453: PUSH
75454: LD_INT 0
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: LIST
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: LIST
75468: ST_TO_ADDR
// end ; 1 :
75469: GO 76169
75471: LD_INT 1
75473: DOUBLE
75474: EQUAL
75475: IFTRUE 75479
75477: GO 75612
75479: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75480: LD_ADDR_VAR 0 5
75484: PUSH
75485: LD_VAR 0 1
75489: PUSH
75490: LD_VAR 0 2
75494: PUSH
75495: LD_INT 4
75497: MINUS
75498: PUSH
75499: LD_INT 3
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: LIST
75506: PUSH
75507: LD_VAR 0 1
75511: PUSH
75512: LD_INT 3
75514: MINUS
75515: PUSH
75516: LD_VAR 0 2
75520: PUSH
75521: LD_INT 3
75523: MINUS
75524: PUSH
75525: LD_INT 2
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: LIST
75532: PUSH
75533: LD_VAR 0 1
75537: PUSH
75538: LD_INT 4
75540: MINUS
75541: PUSH
75542: LD_VAR 0 2
75546: PUSH
75547: LD_INT 1
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: LIST
75554: PUSH
75555: LD_VAR 0 1
75559: PUSH
75560: LD_VAR 0 2
75564: PUSH
75565: LD_INT 3
75567: PLUS
75568: PUSH
75569: LD_INT 0
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: LIST
75576: PUSH
75577: LD_VAR 0 1
75581: PUSH
75582: LD_INT 4
75584: PLUS
75585: PUSH
75586: LD_VAR 0 2
75590: PUSH
75591: LD_INT 4
75593: PLUS
75594: PUSH
75595: LD_INT 5
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: LIST
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: LIST
75607: LIST
75608: LIST
75609: ST_TO_ADDR
// end ; 2 :
75610: GO 76169
75612: LD_INT 2
75614: DOUBLE
75615: EQUAL
75616: IFTRUE 75620
75618: GO 75749
75620: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75621: LD_ADDR_VAR 0 5
75625: PUSH
75626: LD_VAR 0 1
75630: PUSH
75631: LD_VAR 0 2
75635: PUSH
75636: LD_INT 3
75638: MINUS
75639: PUSH
75640: LD_INT 3
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: LIST
75647: PUSH
75648: LD_VAR 0 1
75652: PUSH
75653: LD_INT 4
75655: PLUS
75656: PUSH
75657: LD_VAR 0 2
75661: PUSH
75662: LD_INT 4
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: LIST
75669: PUSH
75670: LD_VAR 0 1
75674: PUSH
75675: LD_VAR 0 2
75679: PUSH
75680: LD_INT 4
75682: PLUS
75683: PUSH
75684: LD_INT 0
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: LIST
75691: PUSH
75692: LD_VAR 0 1
75696: PUSH
75697: LD_INT 3
75699: MINUS
75700: PUSH
75701: LD_VAR 0 2
75705: PUSH
75706: LD_INT 1
75708: PUSH
75709: EMPTY
75710: LIST
75711: LIST
75712: LIST
75713: PUSH
75714: LD_VAR 0 1
75718: PUSH
75719: LD_INT 4
75721: MINUS
75722: PUSH
75723: LD_VAR 0 2
75727: PUSH
75728: LD_INT 4
75730: MINUS
75731: PUSH
75732: LD_INT 2
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: LIST
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: ST_TO_ADDR
// end ; 3 :
75747: GO 76169
75749: LD_INT 3
75751: DOUBLE
75752: EQUAL
75753: IFTRUE 75757
75755: GO 75890
75757: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75758: LD_ADDR_VAR 0 5
75762: PUSH
75763: LD_VAR 0 1
75767: PUSH
75768: LD_INT 3
75770: PLUS
75771: PUSH
75772: LD_VAR 0 2
75776: PUSH
75777: LD_INT 4
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: LIST
75784: PUSH
75785: LD_VAR 0 1
75789: PUSH
75790: LD_INT 4
75792: PLUS
75793: PUSH
75794: LD_VAR 0 2
75798: PUSH
75799: LD_INT 4
75801: PLUS
75802: PUSH
75803: LD_INT 5
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: LIST
75810: PUSH
75811: LD_VAR 0 1
75815: PUSH
75816: LD_INT 4
75818: MINUS
75819: PUSH
75820: LD_VAR 0 2
75824: PUSH
75825: LD_INT 1
75827: PUSH
75828: EMPTY
75829: LIST
75830: LIST
75831: LIST
75832: PUSH
75833: LD_VAR 0 1
75837: PUSH
75838: LD_VAR 0 2
75842: PUSH
75843: LD_INT 4
75845: MINUS
75846: PUSH
75847: LD_INT 3
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: LIST
75854: PUSH
75855: LD_VAR 0 1
75859: PUSH
75860: LD_INT 3
75862: MINUS
75863: PUSH
75864: LD_VAR 0 2
75868: PUSH
75869: LD_INT 3
75871: MINUS
75872: PUSH
75873: LD_INT 2
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: LIST
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: ST_TO_ADDR
// end ; 4 :
75888: GO 76169
75890: LD_INT 4
75892: DOUBLE
75893: EQUAL
75894: IFTRUE 75898
75896: GO 76031
75898: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75899: LD_ADDR_VAR 0 5
75903: PUSH
75904: LD_VAR 0 1
75908: PUSH
75909: LD_VAR 0 2
75913: PUSH
75914: LD_INT 4
75916: PLUS
75917: PUSH
75918: LD_INT 0
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: LIST
75925: PUSH
75926: LD_VAR 0 1
75930: PUSH
75931: LD_INT 3
75933: PLUS
75934: PUSH
75935: LD_VAR 0 2
75939: PUSH
75940: LD_INT 3
75942: PLUS
75943: PUSH
75944: LD_INT 5
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: LIST
75951: PUSH
75952: LD_VAR 0 1
75956: PUSH
75957: LD_INT 4
75959: PLUS
75960: PUSH
75961: LD_VAR 0 2
75965: PUSH
75966: LD_INT 4
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: LIST
75973: PUSH
75974: LD_VAR 0 1
75978: PUSH
75979: LD_VAR 0 2
75983: PUSH
75984: LD_INT 3
75986: MINUS
75987: PUSH
75988: LD_INT 3
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: LIST
75995: PUSH
75996: LD_VAR 0 1
76000: PUSH
76001: LD_INT 4
76003: MINUS
76004: PUSH
76005: LD_VAR 0 2
76009: PUSH
76010: LD_INT 4
76012: MINUS
76013: PUSH
76014: LD_INT 2
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: LIST
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: ST_TO_ADDR
// end ; 5 :
76029: GO 76169
76031: LD_INT 5
76033: DOUBLE
76034: EQUAL
76035: IFTRUE 76039
76037: GO 76168
76039: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76040: LD_ADDR_VAR 0 5
76044: PUSH
76045: LD_VAR 0 1
76049: PUSH
76050: LD_INT 4
76052: MINUS
76053: PUSH
76054: LD_VAR 0 2
76058: PUSH
76059: LD_INT 1
76061: PUSH
76062: EMPTY
76063: LIST
76064: LIST
76065: LIST
76066: PUSH
76067: LD_VAR 0 1
76071: PUSH
76072: LD_VAR 0 2
76076: PUSH
76077: LD_INT 4
76079: MINUS
76080: PUSH
76081: LD_INT 3
76083: PUSH
76084: EMPTY
76085: LIST
76086: LIST
76087: LIST
76088: PUSH
76089: LD_VAR 0 1
76093: PUSH
76094: LD_INT 4
76096: PLUS
76097: PUSH
76098: LD_VAR 0 2
76102: PUSH
76103: LD_INT 4
76105: PLUS
76106: PUSH
76107: LD_INT 5
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: LIST
76114: PUSH
76115: LD_VAR 0 1
76119: PUSH
76120: LD_INT 3
76122: PLUS
76123: PUSH
76124: LD_VAR 0 2
76128: PUSH
76129: LD_INT 4
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: LIST
76136: PUSH
76137: LD_VAR 0 1
76141: PUSH
76142: LD_VAR 0 2
76146: PUSH
76147: LD_INT 3
76149: PLUS
76150: PUSH
76151: LD_INT 0
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: LIST
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: ST_TO_ADDR
// end ; end ;
76166: GO 76169
76168: POP
// result := list ;
76169: LD_ADDR_VAR 0 4
76173: PUSH
76174: LD_VAR 0 5
76178: ST_TO_ADDR
// end ;
76179: LD_VAR 0 4
76183: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76184: LD_INT 0
76186: PPUSH
76187: PPUSH
76188: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76189: LD_VAR 0 1
76193: NOT
76194: PUSH
76195: LD_VAR 0 2
76199: PUSH
76200: LD_INT 1
76202: PUSH
76203: LD_INT 2
76205: PUSH
76206: LD_INT 3
76208: PUSH
76209: LD_INT 4
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: IN
76218: NOT
76219: OR
76220: IFFALSE 76224
// exit ;
76222: GO 76307
// tmp := [ ] ;
76224: LD_ADDR_VAR 0 5
76228: PUSH
76229: EMPTY
76230: ST_TO_ADDR
// for i in units do
76231: LD_ADDR_VAR 0 4
76235: PUSH
76236: LD_VAR 0 1
76240: PUSH
76241: FOR_IN
76242: IFFALSE 76276
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76244: LD_ADDR_VAR 0 5
76248: PUSH
76249: LD_VAR 0 5
76253: PPUSH
76254: LD_VAR 0 4
76258: PPUSH
76259: LD_VAR 0 2
76263: PPUSH
76264: CALL_OW 259
76268: PPUSH
76269: CALL 77668 0 2
76273: ST_TO_ADDR
76274: GO 76241
76276: POP
76277: POP
// if not tmp then
76278: LD_VAR 0 5
76282: NOT
76283: IFFALSE 76287
// exit ;
76285: GO 76307
// result := SortListByListDesc ( units , tmp ) ;
76287: LD_ADDR_VAR 0 3
76291: PUSH
76292: LD_VAR 0 1
76296: PPUSH
76297: LD_VAR 0 5
76301: PPUSH
76302: CALL_OW 77
76306: ST_TO_ADDR
// end ;
76307: LD_VAR 0 3
76311: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76312: LD_INT 0
76314: PPUSH
76315: PPUSH
76316: PPUSH
// result := false ;
76317: LD_ADDR_VAR 0 3
76321: PUSH
76322: LD_INT 0
76324: ST_TO_ADDR
// if not building then
76325: LD_VAR 0 2
76329: NOT
76330: IFFALSE 76334
// exit ;
76332: GO 76472
// x := GetX ( building ) ;
76334: LD_ADDR_VAR 0 4
76338: PUSH
76339: LD_VAR 0 2
76343: PPUSH
76344: CALL_OW 250
76348: ST_TO_ADDR
// y := GetY ( building ) ;
76349: LD_ADDR_VAR 0 5
76353: PUSH
76354: LD_VAR 0 2
76358: PPUSH
76359: CALL_OW 251
76363: ST_TO_ADDR
// if not x or not y then
76364: LD_VAR 0 4
76368: NOT
76369: PUSH
76370: LD_VAR 0 5
76374: NOT
76375: OR
76376: IFFALSE 76380
// exit ;
76378: GO 76472
// if GetTaskList ( unit ) then
76380: LD_VAR 0 1
76384: PPUSH
76385: CALL_OW 437
76389: IFFALSE 76472
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76391: LD_STRING e
76393: PUSH
76394: LD_VAR 0 1
76398: PPUSH
76399: CALL_OW 437
76403: PUSH
76404: LD_INT 1
76406: ARRAY
76407: PUSH
76408: LD_INT 1
76410: ARRAY
76411: EQUAL
76412: PUSH
76413: LD_VAR 0 4
76417: PUSH
76418: LD_VAR 0 1
76422: PPUSH
76423: CALL_OW 437
76427: PUSH
76428: LD_INT 1
76430: ARRAY
76431: PUSH
76432: LD_INT 2
76434: ARRAY
76435: EQUAL
76436: AND
76437: PUSH
76438: LD_VAR 0 5
76442: PUSH
76443: LD_VAR 0 1
76447: PPUSH
76448: CALL_OW 437
76452: PUSH
76453: LD_INT 1
76455: ARRAY
76456: PUSH
76457: LD_INT 3
76459: ARRAY
76460: EQUAL
76461: AND
76462: IFFALSE 76472
// result := true end ;
76464: LD_ADDR_VAR 0 3
76468: PUSH
76469: LD_INT 1
76471: ST_TO_ADDR
// end ;
76472: LD_VAR 0 3
76476: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76477: LD_INT 0
76479: PPUSH
// result := false ;
76480: LD_ADDR_VAR 0 4
76484: PUSH
76485: LD_INT 0
76487: ST_TO_ADDR
// if GetTaskList ( unit ) then
76488: LD_VAR 0 1
76492: PPUSH
76493: CALL_OW 437
76497: IFFALSE 76580
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76499: LD_STRING M
76501: PUSH
76502: LD_VAR 0 1
76506: PPUSH
76507: CALL_OW 437
76511: PUSH
76512: LD_INT 1
76514: ARRAY
76515: PUSH
76516: LD_INT 1
76518: ARRAY
76519: EQUAL
76520: PUSH
76521: LD_VAR 0 2
76525: PUSH
76526: LD_VAR 0 1
76530: PPUSH
76531: CALL_OW 437
76535: PUSH
76536: LD_INT 1
76538: ARRAY
76539: PUSH
76540: LD_INT 2
76542: ARRAY
76543: EQUAL
76544: AND
76545: PUSH
76546: LD_VAR 0 3
76550: PUSH
76551: LD_VAR 0 1
76555: PPUSH
76556: CALL_OW 437
76560: PUSH
76561: LD_INT 1
76563: ARRAY
76564: PUSH
76565: LD_INT 3
76567: ARRAY
76568: EQUAL
76569: AND
76570: IFFALSE 76580
// result := true ;
76572: LD_ADDR_VAR 0 4
76576: PUSH
76577: LD_INT 1
76579: ST_TO_ADDR
// end ; end ;
76580: LD_VAR 0 4
76584: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76585: LD_INT 0
76587: PPUSH
76588: PPUSH
76589: PPUSH
76590: PPUSH
// if not unit or not area then
76591: LD_VAR 0 1
76595: NOT
76596: PUSH
76597: LD_VAR 0 2
76601: NOT
76602: OR
76603: IFFALSE 76607
// exit ;
76605: GO 76771
// tmp := AreaToList ( area , i ) ;
76607: LD_ADDR_VAR 0 6
76611: PUSH
76612: LD_VAR 0 2
76616: PPUSH
76617: LD_VAR 0 5
76621: PPUSH
76622: CALL_OW 517
76626: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76627: LD_ADDR_VAR 0 5
76631: PUSH
76632: DOUBLE
76633: LD_INT 1
76635: DEC
76636: ST_TO_ADDR
76637: LD_VAR 0 6
76641: PUSH
76642: LD_INT 1
76644: ARRAY
76645: PUSH
76646: FOR_TO
76647: IFFALSE 76769
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76649: LD_ADDR_VAR 0 7
76653: PUSH
76654: LD_VAR 0 6
76658: PUSH
76659: LD_INT 1
76661: ARRAY
76662: PUSH
76663: LD_VAR 0 5
76667: ARRAY
76668: PUSH
76669: LD_VAR 0 6
76673: PUSH
76674: LD_INT 2
76676: ARRAY
76677: PUSH
76678: LD_VAR 0 5
76682: ARRAY
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76688: LD_VAR 0 7
76692: PUSH
76693: LD_INT 1
76695: ARRAY
76696: PPUSH
76697: LD_VAR 0 7
76701: PUSH
76702: LD_INT 2
76704: ARRAY
76705: PPUSH
76706: CALL_OW 428
76710: PUSH
76711: LD_INT 0
76713: EQUAL
76714: IFFALSE 76767
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76716: LD_VAR 0 1
76720: PPUSH
76721: LD_VAR 0 7
76725: PUSH
76726: LD_INT 1
76728: ARRAY
76729: PPUSH
76730: LD_VAR 0 7
76734: PUSH
76735: LD_INT 2
76737: ARRAY
76738: PPUSH
76739: LD_VAR 0 3
76743: PPUSH
76744: CALL_OW 48
// result := IsPlaced ( unit ) ;
76748: LD_ADDR_VAR 0 4
76752: PUSH
76753: LD_VAR 0 1
76757: PPUSH
76758: CALL_OW 305
76762: ST_TO_ADDR
// exit ;
76763: POP
76764: POP
76765: GO 76771
// end ; end ;
76767: GO 76646
76769: POP
76770: POP
// end ;
76771: LD_VAR 0 4
76775: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76776: LD_INT 0
76778: PPUSH
76779: PPUSH
76780: PPUSH
// if not side or side > 8 then
76781: LD_VAR 0 1
76785: NOT
76786: PUSH
76787: LD_VAR 0 1
76791: PUSH
76792: LD_INT 8
76794: GREATER
76795: OR
76796: IFFALSE 76800
// exit ;
76798: GO 76987
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76800: LD_ADDR_VAR 0 4
76804: PUSH
76805: LD_INT 22
76807: PUSH
76808: LD_VAR 0 1
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: PUSH
76817: LD_INT 21
76819: PUSH
76820: LD_INT 3
76822: PUSH
76823: EMPTY
76824: LIST
76825: LIST
76826: PUSH
76827: EMPTY
76828: LIST
76829: LIST
76830: PPUSH
76831: CALL_OW 69
76835: ST_TO_ADDR
// if not tmp then
76836: LD_VAR 0 4
76840: NOT
76841: IFFALSE 76845
// exit ;
76843: GO 76987
// enable_addtolog := true ;
76845: LD_ADDR_OWVAR 81
76849: PUSH
76850: LD_INT 1
76852: ST_TO_ADDR
// AddToLog ( [ ) ;
76853: LD_STRING [
76855: PPUSH
76856: CALL_OW 561
// for i in tmp do
76860: LD_ADDR_VAR 0 3
76864: PUSH
76865: LD_VAR 0 4
76869: PUSH
76870: FOR_IN
76871: IFFALSE 76978
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76873: LD_STRING [
76875: PUSH
76876: LD_VAR 0 3
76880: PPUSH
76881: CALL_OW 266
76885: STR
76886: PUSH
76887: LD_STRING , 
76889: STR
76890: PUSH
76891: LD_VAR 0 3
76895: PPUSH
76896: CALL_OW 250
76900: STR
76901: PUSH
76902: LD_STRING , 
76904: STR
76905: PUSH
76906: LD_VAR 0 3
76910: PPUSH
76911: CALL_OW 251
76915: STR
76916: PUSH
76917: LD_STRING , 
76919: STR
76920: PUSH
76921: LD_VAR 0 3
76925: PPUSH
76926: CALL_OW 254
76930: STR
76931: PUSH
76932: LD_STRING , 
76934: STR
76935: PUSH
76936: LD_VAR 0 3
76940: PPUSH
76941: LD_INT 1
76943: PPUSH
76944: CALL_OW 268
76948: STR
76949: PUSH
76950: LD_STRING , 
76952: STR
76953: PUSH
76954: LD_VAR 0 3
76958: PPUSH
76959: LD_INT 2
76961: PPUSH
76962: CALL_OW 268
76966: STR
76967: PUSH
76968: LD_STRING ],
76970: STR
76971: PPUSH
76972: CALL_OW 561
// end ;
76976: GO 76870
76978: POP
76979: POP
// AddToLog ( ]; ) ;
76980: LD_STRING ];
76982: PPUSH
76983: CALL_OW 561
// end ;
76987: LD_VAR 0 2
76991: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76992: LD_INT 0
76994: PPUSH
76995: PPUSH
76996: PPUSH
76997: PPUSH
76998: PPUSH
// if not area or not rate or not max then
76999: LD_VAR 0 1
77003: NOT
77004: PUSH
77005: LD_VAR 0 2
77009: NOT
77010: OR
77011: PUSH
77012: LD_VAR 0 4
77016: NOT
77017: OR
77018: IFFALSE 77022
// exit ;
77020: GO 77211
// while 1 do
77022: LD_INT 1
77024: IFFALSE 77211
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77026: LD_ADDR_VAR 0 9
77030: PUSH
77031: LD_VAR 0 1
77035: PPUSH
77036: LD_INT 1
77038: PPUSH
77039: CALL_OW 287
77043: PUSH
77044: LD_INT 10
77046: MUL
77047: ST_TO_ADDR
// r := rate / 10 ;
77048: LD_ADDR_VAR 0 7
77052: PUSH
77053: LD_VAR 0 2
77057: PUSH
77058: LD_INT 10
77060: DIVREAL
77061: ST_TO_ADDR
// time := 1 1$00 ;
77062: LD_ADDR_VAR 0 8
77066: PUSH
77067: LD_INT 2100
77069: ST_TO_ADDR
// if amount < min then
77070: LD_VAR 0 9
77074: PUSH
77075: LD_VAR 0 3
77079: LESS
77080: IFFALSE 77098
// r := r * 2 else
77082: LD_ADDR_VAR 0 7
77086: PUSH
77087: LD_VAR 0 7
77091: PUSH
77092: LD_INT 2
77094: MUL
77095: ST_TO_ADDR
77096: GO 77124
// if amount > max then
77098: LD_VAR 0 9
77102: PUSH
77103: LD_VAR 0 4
77107: GREATER
77108: IFFALSE 77124
// r := r / 2 ;
77110: LD_ADDR_VAR 0 7
77114: PUSH
77115: LD_VAR 0 7
77119: PUSH
77120: LD_INT 2
77122: DIVREAL
77123: ST_TO_ADDR
// time := time / r ;
77124: LD_ADDR_VAR 0 8
77128: PUSH
77129: LD_VAR 0 8
77133: PUSH
77134: LD_VAR 0 7
77138: DIVREAL
77139: ST_TO_ADDR
// if time < 0 then
77140: LD_VAR 0 8
77144: PUSH
77145: LD_INT 0
77147: LESS
77148: IFFALSE 77165
// time := time * - 1 ;
77150: LD_ADDR_VAR 0 8
77154: PUSH
77155: LD_VAR 0 8
77159: PUSH
77160: LD_INT 1
77162: NEG
77163: MUL
77164: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77165: LD_VAR 0 8
77169: PUSH
77170: LD_INT 35
77172: PPUSH
77173: LD_INT 875
77175: PPUSH
77176: CALL_OW 12
77180: PLUS
77181: PPUSH
77182: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77186: LD_INT 1
77188: PPUSH
77189: LD_INT 5
77191: PPUSH
77192: CALL_OW 12
77196: PPUSH
77197: LD_VAR 0 1
77201: PPUSH
77202: LD_INT 1
77204: PPUSH
77205: CALL_OW 55
// end ;
77209: GO 77022
// end ;
77211: LD_VAR 0 5
77215: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77216: LD_INT 0
77218: PPUSH
77219: PPUSH
77220: PPUSH
77221: PPUSH
77222: PPUSH
77223: PPUSH
77224: PPUSH
77225: PPUSH
// if not turrets or not factories then
77226: LD_VAR 0 1
77230: NOT
77231: PUSH
77232: LD_VAR 0 2
77236: NOT
77237: OR
77238: IFFALSE 77242
// exit ;
77240: GO 77549
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77242: LD_ADDR_VAR 0 10
77246: PUSH
77247: LD_INT 5
77249: PUSH
77250: LD_INT 6
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: PUSH
77257: LD_INT 2
77259: PUSH
77260: LD_INT 4
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: PUSH
77267: LD_INT 3
77269: PUSH
77270: LD_INT 5
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: PUSH
77277: EMPTY
77278: LIST
77279: LIST
77280: LIST
77281: PUSH
77282: LD_INT 24
77284: PUSH
77285: LD_INT 25
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: PUSH
77292: LD_INT 23
77294: PUSH
77295: LD_INT 27
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: PUSH
77302: EMPTY
77303: LIST
77304: LIST
77305: PUSH
77306: LD_INT 42
77308: PUSH
77309: LD_INT 43
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: PUSH
77316: LD_INT 44
77318: PUSH
77319: LD_INT 46
77321: PUSH
77322: EMPTY
77323: LIST
77324: LIST
77325: PUSH
77326: LD_INT 45
77328: PUSH
77329: LD_INT 47
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: PUSH
77336: EMPTY
77337: LIST
77338: LIST
77339: LIST
77340: PUSH
77341: EMPTY
77342: LIST
77343: LIST
77344: LIST
77345: ST_TO_ADDR
// result := [ ] ;
77346: LD_ADDR_VAR 0 3
77350: PUSH
77351: EMPTY
77352: ST_TO_ADDR
// for i in turrets do
77353: LD_ADDR_VAR 0 4
77357: PUSH
77358: LD_VAR 0 1
77362: PUSH
77363: FOR_IN
77364: IFFALSE 77547
// begin nat := GetNation ( i ) ;
77366: LD_ADDR_VAR 0 7
77370: PUSH
77371: LD_VAR 0 4
77375: PPUSH
77376: CALL_OW 248
77380: ST_TO_ADDR
// weapon := 0 ;
77381: LD_ADDR_VAR 0 8
77385: PUSH
77386: LD_INT 0
77388: ST_TO_ADDR
// if not nat then
77389: LD_VAR 0 7
77393: NOT
77394: IFFALSE 77398
// continue ;
77396: GO 77363
// for j in list [ nat ] do
77398: LD_ADDR_VAR 0 5
77402: PUSH
77403: LD_VAR 0 10
77407: PUSH
77408: LD_VAR 0 7
77412: ARRAY
77413: PUSH
77414: FOR_IN
77415: IFFALSE 77456
// if GetBWeapon ( i ) = j [ 1 ] then
77417: LD_VAR 0 4
77421: PPUSH
77422: CALL_OW 269
77426: PUSH
77427: LD_VAR 0 5
77431: PUSH
77432: LD_INT 1
77434: ARRAY
77435: EQUAL
77436: IFFALSE 77454
// begin weapon := j [ 2 ] ;
77438: LD_ADDR_VAR 0 8
77442: PUSH
77443: LD_VAR 0 5
77447: PUSH
77448: LD_INT 2
77450: ARRAY
77451: ST_TO_ADDR
// break ;
77452: GO 77456
// end ;
77454: GO 77414
77456: POP
77457: POP
// if not weapon then
77458: LD_VAR 0 8
77462: NOT
77463: IFFALSE 77467
// continue ;
77465: GO 77363
// for k in factories do
77467: LD_ADDR_VAR 0 6
77471: PUSH
77472: LD_VAR 0 2
77476: PUSH
77477: FOR_IN
77478: IFFALSE 77543
// begin weapons := AvailableWeaponList ( k ) ;
77480: LD_ADDR_VAR 0 9
77484: PUSH
77485: LD_VAR 0 6
77489: PPUSH
77490: CALL_OW 478
77494: ST_TO_ADDR
// if not weapons then
77495: LD_VAR 0 9
77499: NOT
77500: IFFALSE 77504
// continue ;
77502: GO 77477
// if weapon in weapons then
77504: LD_VAR 0 8
77508: PUSH
77509: LD_VAR 0 9
77513: IN
77514: IFFALSE 77541
// begin result := [ i , weapon ] ;
77516: LD_ADDR_VAR 0 3
77520: PUSH
77521: LD_VAR 0 4
77525: PUSH
77526: LD_VAR 0 8
77530: PUSH
77531: EMPTY
77532: LIST
77533: LIST
77534: ST_TO_ADDR
// exit ;
77535: POP
77536: POP
77537: POP
77538: POP
77539: GO 77549
// end ; end ;
77541: GO 77477
77543: POP
77544: POP
// end ;
77545: GO 77363
77547: POP
77548: POP
// end ;
77549: LD_VAR 0 3
77553: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77554: LD_INT 0
77556: PPUSH
// if not side or side > 8 then
77557: LD_VAR 0 3
77561: NOT
77562: PUSH
77563: LD_VAR 0 3
77567: PUSH
77568: LD_INT 8
77570: GREATER
77571: OR
77572: IFFALSE 77576
// exit ;
77574: GO 77635
// if not range then
77576: LD_VAR 0 4
77580: NOT
77581: IFFALSE 77592
// range := - 12 ;
77583: LD_ADDR_VAR 0 4
77587: PUSH
77588: LD_INT 12
77590: NEG
77591: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77592: LD_VAR 0 1
77596: PPUSH
77597: LD_VAR 0 2
77601: PPUSH
77602: LD_VAR 0 3
77606: PPUSH
77607: LD_VAR 0 4
77611: PPUSH
77612: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77616: LD_VAR 0 1
77620: PPUSH
77621: LD_VAR 0 2
77625: PPUSH
77626: LD_VAR 0 3
77630: PPUSH
77631: CALL_OW 331
// end ;
77635: LD_VAR 0 5
77639: RET
// export function Video ( mode ) ; begin
77640: LD_INT 0
77642: PPUSH
// ingame_video = mode ;
77643: LD_ADDR_OWVAR 52
77647: PUSH
77648: LD_VAR 0 1
77652: ST_TO_ADDR
// interface_hidden = mode ;
77653: LD_ADDR_OWVAR 54
77657: PUSH
77658: LD_VAR 0 1
77662: ST_TO_ADDR
// end ;
77663: LD_VAR 0 2
77667: RET
// export function Join ( array , element ) ; begin
77668: LD_INT 0
77670: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77671: LD_ADDR_VAR 0 3
77675: PUSH
77676: LD_VAR 0 1
77680: PPUSH
77681: LD_VAR 0 1
77685: PUSH
77686: LD_INT 1
77688: PLUS
77689: PPUSH
77690: LD_VAR 0 2
77694: PPUSH
77695: CALL_OW 1
77699: ST_TO_ADDR
// end ;
77700: LD_VAR 0 3
77704: RET
// export function JoinUnion ( array , element ) ; begin
77705: LD_INT 0
77707: PPUSH
// result := array union element ;
77708: LD_ADDR_VAR 0 3
77712: PUSH
77713: LD_VAR 0 1
77717: PUSH
77718: LD_VAR 0 2
77722: UNION
77723: ST_TO_ADDR
// end ;
77724: LD_VAR 0 3
77728: RET
// export function GetBehemoths ( side ) ; begin
77729: LD_INT 0
77731: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77732: LD_ADDR_VAR 0 2
77736: PUSH
77737: LD_INT 22
77739: PUSH
77740: LD_VAR 0 1
77744: PUSH
77745: EMPTY
77746: LIST
77747: LIST
77748: PUSH
77749: LD_INT 31
77751: PUSH
77752: LD_INT 25
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: PPUSH
77763: CALL_OW 69
77767: ST_TO_ADDR
// end ;
77768: LD_VAR 0 2
77772: RET
// export function Shuffle ( array ) ; var i , index ; begin
77773: LD_INT 0
77775: PPUSH
77776: PPUSH
77777: PPUSH
// result := [ ] ;
77778: LD_ADDR_VAR 0 2
77782: PUSH
77783: EMPTY
77784: ST_TO_ADDR
// if not array then
77785: LD_VAR 0 1
77789: NOT
77790: IFFALSE 77794
// exit ;
77792: GO 77893
// Randomize ;
77794: CALL_OW 10
// for i = array downto 1 do
77798: LD_ADDR_VAR 0 3
77802: PUSH
77803: DOUBLE
77804: LD_VAR 0 1
77808: INC
77809: ST_TO_ADDR
77810: LD_INT 1
77812: PUSH
77813: FOR_DOWNTO
77814: IFFALSE 77891
// begin index := rand ( 1 , array ) ;
77816: LD_ADDR_VAR 0 4
77820: PUSH
77821: LD_INT 1
77823: PPUSH
77824: LD_VAR 0 1
77828: PPUSH
77829: CALL_OW 12
77833: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77834: LD_ADDR_VAR 0 2
77838: PUSH
77839: LD_VAR 0 2
77843: PPUSH
77844: LD_VAR 0 2
77848: PUSH
77849: LD_INT 1
77851: PLUS
77852: PPUSH
77853: LD_VAR 0 1
77857: PUSH
77858: LD_VAR 0 4
77862: ARRAY
77863: PPUSH
77864: CALL_OW 2
77868: ST_TO_ADDR
// array := Delete ( array , index ) ;
77869: LD_ADDR_VAR 0 1
77873: PUSH
77874: LD_VAR 0 1
77878: PPUSH
77879: LD_VAR 0 4
77883: PPUSH
77884: CALL_OW 3
77888: ST_TO_ADDR
// end ;
77889: GO 77813
77891: POP
77892: POP
// end ;
77893: LD_VAR 0 2
77897: RET
// export function GetBaseMaterials ( base ) ; begin
77898: LD_INT 0
77900: PPUSH
// result := [ 0 , 0 , 0 ] ;
77901: LD_ADDR_VAR 0 2
77905: PUSH
77906: LD_INT 0
77908: PUSH
77909: LD_INT 0
77911: PUSH
77912: LD_INT 0
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: LIST
77919: ST_TO_ADDR
// if not base then
77920: LD_VAR 0 1
77924: NOT
77925: IFFALSE 77929
// exit ;
77927: GO 77978
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77929: LD_ADDR_VAR 0 2
77933: PUSH
77934: LD_VAR 0 1
77938: PPUSH
77939: LD_INT 1
77941: PPUSH
77942: CALL_OW 275
77946: PUSH
77947: LD_VAR 0 1
77951: PPUSH
77952: LD_INT 2
77954: PPUSH
77955: CALL_OW 275
77959: PUSH
77960: LD_VAR 0 1
77964: PPUSH
77965: LD_INT 3
77967: PPUSH
77968: CALL_OW 275
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: LIST
77977: ST_TO_ADDR
// end ;
77978: LD_VAR 0 2
77982: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77983: LD_INT 0
77985: PPUSH
77986: PPUSH
// result := array ;
77987: LD_ADDR_VAR 0 3
77991: PUSH
77992: LD_VAR 0 1
77996: ST_TO_ADDR
// if size >= result then
77997: LD_VAR 0 2
78001: PUSH
78002: LD_VAR 0 3
78006: GREATEREQUAL
78007: IFFALSE 78011
// exit ;
78009: GO 78061
// if size then
78011: LD_VAR 0 2
78015: IFFALSE 78061
// for i := array downto size do
78017: LD_ADDR_VAR 0 4
78021: PUSH
78022: DOUBLE
78023: LD_VAR 0 1
78027: INC
78028: ST_TO_ADDR
78029: LD_VAR 0 2
78033: PUSH
78034: FOR_DOWNTO
78035: IFFALSE 78059
// result := Delete ( result , result ) ;
78037: LD_ADDR_VAR 0 3
78041: PUSH
78042: LD_VAR 0 3
78046: PPUSH
78047: LD_VAR 0 3
78051: PPUSH
78052: CALL_OW 3
78056: ST_TO_ADDR
78057: GO 78034
78059: POP
78060: POP
// end ;
78061: LD_VAR 0 3
78065: RET
// export function ComExit ( unit ) ; var tmp ; begin
78066: LD_INT 0
78068: PPUSH
78069: PPUSH
// if not IsInUnit ( unit ) then
78070: LD_VAR 0 1
78074: PPUSH
78075: CALL_OW 310
78079: NOT
78080: IFFALSE 78084
// exit ;
78082: GO 78144
// tmp := IsInUnit ( unit ) ;
78084: LD_ADDR_VAR 0 3
78088: PUSH
78089: LD_VAR 0 1
78093: PPUSH
78094: CALL_OW 310
78098: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78099: LD_VAR 0 3
78103: PPUSH
78104: CALL_OW 247
78108: PUSH
78109: LD_INT 2
78111: EQUAL
78112: IFFALSE 78125
// ComExitVehicle ( unit ) else
78114: LD_VAR 0 1
78118: PPUSH
78119: CALL_OW 121
78123: GO 78134
// ComExitBuilding ( unit ) ;
78125: LD_VAR 0 1
78129: PPUSH
78130: CALL_OW 122
// result := tmp ;
78134: LD_ADDR_VAR 0 2
78138: PUSH
78139: LD_VAR 0 3
78143: ST_TO_ADDR
// end ;
78144: LD_VAR 0 2
78148: RET
// export function ComExitAll ( units ) ; var i ; begin
78149: LD_INT 0
78151: PPUSH
78152: PPUSH
// if not units then
78153: LD_VAR 0 1
78157: NOT
78158: IFFALSE 78162
// exit ;
78160: GO 78188
// for i in units do
78162: LD_ADDR_VAR 0 3
78166: PUSH
78167: LD_VAR 0 1
78171: PUSH
78172: FOR_IN
78173: IFFALSE 78186
// ComExit ( i ) ;
78175: LD_VAR 0 3
78179: PPUSH
78180: CALL 78066 0 1
78184: GO 78172
78186: POP
78187: POP
// end ;
78188: LD_VAR 0 2
78192: RET
// export function ResetHc ; begin
78193: LD_INT 0
78195: PPUSH
// InitHc ;
78196: CALL_OW 19
// hc_importance := 0 ;
78200: LD_ADDR_OWVAR 32
78204: PUSH
78205: LD_INT 0
78207: ST_TO_ADDR
// end ;
78208: LD_VAR 0 1
78212: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78213: LD_INT 0
78215: PPUSH
78216: PPUSH
78217: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78218: LD_ADDR_VAR 0 6
78222: PUSH
78223: LD_VAR 0 1
78227: PUSH
78228: LD_VAR 0 3
78232: PLUS
78233: PUSH
78234: LD_INT 2
78236: DIV
78237: ST_TO_ADDR
// if _x < 0 then
78238: LD_VAR 0 6
78242: PUSH
78243: LD_INT 0
78245: LESS
78246: IFFALSE 78263
// _x := _x * - 1 ;
78248: LD_ADDR_VAR 0 6
78252: PUSH
78253: LD_VAR 0 6
78257: PUSH
78258: LD_INT 1
78260: NEG
78261: MUL
78262: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78263: LD_ADDR_VAR 0 7
78267: PUSH
78268: LD_VAR 0 2
78272: PUSH
78273: LD_VAR 0 4
78277: PLUS
78278: PUSH
78279: LD_INT 2
78281: DIV
78282: ST_TO_ADDR
// if _y < 0 then
78283: LD_VAR 0 7
78287: PUSH
78288: LD_INT 0
78290: LESS
78291: IFFALSE 78308
// _y := _y * - 1 ;
78293: LD_ADDR_VAR 0 7
78297: PUSH
78298: LD_VAR 0 7
78302: PUSH
78303: LD_INT 1
78305: NEG
78306: MUL
78307: ST_TO_ADDR
// result := [ _x , _y ] ;
78308: LD_ADDR_VAR 0 5
78312: PUSH
78313: LD_VAR 0 6
78317: PUSH
78318: LD_VAR 0 7
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: ST_TO_ADDR
// end ;
78327: LD_VAR 0 5
78331: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78332: LD_INT 0
78334: PPUSH
78335: PPUSH
78336: PPUSH
78337: PPUSH
// task := GetTaskList ( unit ) ;
78338: LD_ADDR_VAR 0 7
78342: PUSH
78343: LD_VAR 0 1
78347: PPUSH
78348: CALL_OW 437
78352: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78353: LD_VAR 0 7
78357: NOT
78358: PUSH
78359: LD_VAR 0 1
78363: PPUSH
78364: LD_VAR 0 2
78368: PPUSH
78369: CALL_OW 308
78373: NOT
78374: AND
78375: IFFALSE 78379
// exit ;
78377: GO 78497
// if IsInArea ( unit , area ) then
78379: LD_VAR 0 1
78383: PPUSH
78384: LD_VAR 0 2
78388: PPUSH
78389: CALL_OW 308
78393: IFFALSE 78411
// begin ComMoveToArea ( unit , goAway ) ;
78395: LD_VAR 0 1
78399: PPUSH
78400: LD_VAR 0 3
78404: PPUSH
78405: CALL_OW 113
// exit ;
78409: GO 78497
// end ; if task [ 1 ] [ 1 ] <> M then
78411: LD_VAR 0 7
78415: PUSH
78416: LD_INT 1
78418: ARRAY
78419: PUSH
78420: LD_INT 1
78422: ARRAY
78423: PUSH
78424: LD_STRING M
78426: NONEQUAL
78427: IFFALSE 78431
// exit ;
78429: GO 78497
// x := task [ 1 ] [ 2 ] ;
78431: LD_ADDR_VAR 0 5
78435: PUSH
78436: LD_VAR 0 7
78440: PUSH
78441: LD_INT 1
78443: ARRAY
78444: PUSH
78445: LD_INT 2
78447: ARRAY
78448: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78449: LD_ADDR_VAR 0 6
78453: PUSH
78454: LD_VAR 0 7
78458: PUSH
78459: LD_INT 1
78461: ARRAY
78462: PUSH
78463: LD_INT 3
78465: ARRAY
78466: ST_TO_ADDR
// if InArea ( x , y , area ) then
78467: LD_VAR 0 5
78471: PPUSH
78472: LD_VAR 0 6
78476: PPUSH
78477: LD_VAR 0 2
78481: PPUSH
78482: CALL_OW 309
78486: IFFALSE 78497
// ComStop ( unit ) ;
78488: LD_VAR 0 1
78492: PPUSH
78493: CALL_OW 141
// end ;
78497: LD_VAR 0 4
78501: RET
// export function Abs ( value ) ; begin
78502: LD_INT 0
78504: PPUSH
// result := value ;
78505: LD_ADDR_VAR 0 2
78509: PUSH
78510: LD_VAR 0 1
78514: ST_TO_ADDR
// if value < 0 then
78515: LD_VAR 0 1
78519: PUSH
78520: LD_INT 0
78522: LESS
78523: IFFALSE 78540
// result := value * - 1 ;
78525: LD_ADDR_VAR 0 2
78529: PUSH
78530: LD_VAR 0 1
78534: PUSH
78535: LD_INT 1
78537: NEG
78538: MUL
78539: ST_TO_ADDR
// end ;
78540: LD_VAR 0 2
78544: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78545: LD_INT 0
78547: PPUSH
78548: PPUSH
78549: PPUSH
78550: PPUSH
78551: PPUSH
78552: PPUSH
78553: PPUSH
78554: PPUSH
// if not unit or not building then
78555: LD_VAR 0 1
78559: NOT
78560: PUSH
78561: LD_VAR 0 2
78565: NOT
78566: OR
78567: IFFALSE 78571
// exit ;
78569: GO 78797
// x := GetX ( building ) ;
78571: LD_ADDR_VAR 0 4
78575: PUSH
78576: LD_VAR 0 2
78580: PPUSH
78581: CALL_OW 250
78585: ST_TO_ADDR
// y := GetY ( building ) ;
78586: LD_ADDR_VAR 0 6
78590: PUSH
78591: LD_VAR 0 2
78595: PPUSH
78596: CALL_OW 251
78600: ST_TO_ADDR
// d := GetDir ( building ) ;
78601: LD_ADDR_VAR 0 8
78605: PUSH
78606: LD_VAR 0 2
78610: PPUSH
78611: CALL_OW 254
78615: ST_TO_ADDR
// r := 4 ;
78616: LD_ADDR_VAR 0 9
78620: PUSH
78621: LD_INT 4
78623: ST_TO_ADDR
// for i := 1 to 5 do
78624: LD_ADDR_VAR 0 10
78628: PUSH
78629: DOUBLE
78630: LD_INT 1
78632: DEC
78633: ST_TO_ADDR
78634: LD_INT 5
78636: PUSH
78637: FOR_TO
78638: IFFALSE 78795
// begin _x := ShiftX ( x , d , r + i ) ;
78640: LD_ADDR_VAR 0 5
78644: PUSH
78645: LD_VAR 0 4
78649: PPUSH
78650: LD_VAR 0 8
78654: PPUSH
78655: LD_VAR 0 9
78659: PUSH
78660: LD_VAR 0 10
78664: PLUS
78665: PPUSH
78666: CALL_OW 272
78670: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78671: LD_ADDR_VAR 0 7
78675: PUSH
78676: LD_VAR 0 6
78680: PPUSH
78681: LD_VAR 0 8
78685: PPUSH
78686: LD_VAR 0 9
78690: PUSH
78691: LD_VAR 0 10
78695: PLUS
78696: PPUSH
78697: CALL_OW 273
78701: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78702: LD_VAR 0 5
78706: PPUSH
78707: LD_VAR 0 7
78711: PPUSH
78712: CALL_OW 488
78716: PUSH
78717: LD_VAR 0 5
78721: PPUSH
78722: LD_VAR 0 7
78726: PPUSH
78727: CALL_OW 428
78731: PPUSH
78732: CALL_OW 247
78736: PUSH
78737: LD_INT 3
78739: PUSH
78740: LD_INT 2
78742: PUSH
78743: EMPTY
78744: LIST
78745: LIST
78746: IN
78747: NOT
78748: AND
78749: IFFALSE 78793
// begin ComMoveXY ( unit , _x , _y ) ;
78751: LD_VAR 0 1
78755: PPUSH
78756: LD_VAR 0 5
78760: PPUSH
78761: LD_VAR 0 7
78765: PPUSH
78766: CALL_OW 111
// result := [ _x , _y ] ;
78770: LD_ADDR_VAR 0 3
78774: PUSH
78775: LD_VAR 0 5
78779: PUSH
78780: LD_VAR 0 7
78784: PUSH
78785: EMPTY
78786: LIST
78787: LIST
78788: ST_TO_ADDR
// exit ;
78789: POP
78790: POP
78791: GO 78797
// end ; end ;
78793: GO 78637
78795: POP
78796: POP
// end ;
78797: LD_VAR 0 3
78801: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78802: LD_INT 0
78804: PPUSH
78805: PPUSH
78806: PPUSH
// result := 0 ;
78807: LD_ADDR_VAR 0 3
78811: PUSH
78812: LD_INT 0
78814: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78815: LD_VAR 0 1
78819: PUSH
78820: LD_INT 0
78822: LESS
78823: PUSH
78824: LD_VAR 0 1
78828: PUSH
78829: LD_INT 8
78831: GREATER
78832: OR
78833: PUSH
78834: LD_VAR 0 2
78838: PUSH
78839: LD_INT 0
78841: LESS
78842: OR
78843: PUSH
78844: LD_VAR 0 2
78848: PUSH
78849: LD_INT 8
78851: GREATER
78852: OR
78853: IFFALSE 78857
// exit ;
78855: GO 78932
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78857: LD_ADDR_VAR 0 4
78861: PUSH
78862: LD_INT 22
78864: PUSH
78865: LD_VAR 0 2
78869: PUSH
78870: EMPTY
78871: LIST
78872: LIST
78873: PPUSH
78874: CALL_OW 69
78878: PUSH
78879: FOR_IN
78880: IFFALSE 78930
// begin un := UnitShoot ( i ) ;
78882: LD_ADDR_VAR 0 5
78886: PUSH
78887: LD_VAR 0 4
78891: PPUSH
78892: CALL_OW 504
78896: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78897: LD_VAR 0 5
78901: PPUSH
78902: CALL_OW 255
78906: PUSH
78907: LD_VAR 0 1
78911: EQUAL
78912: IFFALSE 78928
// begin result := un ;
78914: LD_ADDR_VAR 0 3
78918: PUSH
78919: LD_VAR 0 5
78923: ST_TO_ADDR
// exit ;
78924: POP
78925: POP
78926: GO 78932
// end ; end ;
78928: GO 78879
78930: POP
78931: POP
// end ;
78932: LD_VAR 0 3
78936: RET
// export function GetCargoBay ( units ) ; begin
78937: LD_INT 0
78939: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78940: LD_ADDR_VAR 0 2
78944: PUSH
78945: LD_VAR 0 1
78949: PPUSH
78950: LD_INT 2
78952: PUSH
78953: LD_INT 34
78955: PUSH
78956: LD_INT 12
78958: PUSH
78959: EMPTY
78960: LIST
78961: LIST
78962: PUSH
78963: LD_INT 34
78965: PUSH
78966: LD_INT 51
78968: PUSH
78969: EMPTY
78970: LIST
78971: LIST
78972: PUSH
78973: LD_INT 34
78975: PUSH
78976: LD_INT 32
78978: PUSH
78979: EMPTY
78980: LIST
78981: LIST
78982: PUSH
78983: LD_INT 34
78985: PUSH
78986: LD_INT 89
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: LIST
78997: LIST
78998: LIST
78999: PPUSH
79000: CALL_OW 72
79004: ST_TO_ADDR
// end ;
79005: LD_VAR 0 2
79009: RET
// export function Negate ( value ) ; begin
79010: LD_INT 0
79012: PPUSH
// result := not value ;
79013: LD_ADDR_VAR 0 2
79017: PUSH
79018: LD_VAR 0 1
79022: NOT
79023: ST_TO_ADDR
// end ;
79024: LD_VAR 0 2
79028: RET
// export function Inc ( value ) ; begin
79029: LD_INT 0
79031: PPUSH
// result := value + 1 ;
79032: LD_ADDR_VAR 0 2
79036: PUSH
79037: LD_VAR 0 1
79041: PUSH
79042: LD_INT 1
79044: PLUS
79045: ST_TO_ADDR
// end ;
79046: LD_VAR 0 2
79050: RET
// export function Dec ( value ) ; begin
79051: LD_INT 0
79053: PPUSH
// result := value - 1 ;
79054: LD_ADDR_VAR 0 2
79058: PUSH
79059: LD_VAR 0 1
79063: PUSH
79064: LD_INT 1
79066: MINUS
79067: ST_TO_ADDR
// end ;
79068: LD_VAR 0 2
79072: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79073: LD_INT 0
79075: PPUSH
79076: PPUSH
79077: PPUSH
79078: PPUSH
79079: PPUSH
79080: PPUSH
79081: PPUSH
79082: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79083: LD_VAR 0 1
79087: PPUSH
79088: LD_VAR 0 2
79092: PPUSH
79093: CALL_OW 488
79097: NOT
79098: PUSH
79099: LD_VAR 0 3
79103: PPUSH
79104: LD_VAR 0 4
79108: PPUSH
79109: CALL_OW 488
79113: NOT
79114: OR
79115: IFFALSE 79128
// begin result := - 1 ;
79117: LD_ADDR_VAR 0 5
79121: PUSH
79122: LD_INT 1
79124: NEG
79125: ST_TO_ADDR
// exit ;
79126: GO 79363
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79128: LD_ADDR_VAR 0 12
79132: PUSH
79133: LD_VAR 0 1
79137: PPUSH
79138: LD_VAR 0 2
79142: PPUSH
79143: LD_VAR 0 3
79147: PPUSH
79148: LD_VAR 0 4
79152: PPUSH
79153: CALL 78213 0 4
79157: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79158: LD_ADDR_VAR 0 11
79162: PUSH
79163: LD_VAR 0 1
79167: PPUSH
79168: LD_VAR 0 2
79172: PPUSH
79173: LD_VAR 0 12
79177: PUSH
79178: LD_INT 1
79180: ARRAY
79181: PPUSH
79182: LD_VAR 0 12
79186: PUSH
79187: LD_INT 2
79189: ARRAY
79190: PPUSH
79191: CALL_OW 298
79195: ST_TO_ADDR
// distance := 9999 ;
79196: LD_ADDR_VAR 0 10
79200: PUSH
79201: LD_INT 9999
79203: ST_TO_ADDR
// for i := 0 to 5 do
79204: LD_ADDR_VAR 0 6
79208: PUSH
79209: DOUBLE
79210: LD_INT 0
79212: DEC
79213: ST_TO_ADDR
79214: LD_INT 5
79216: PUSH
79217: FOR_TO
79218: IFFALSE 79361
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79220: LD_ADDR_VAR 0 7
79224: PUSH
79225: LD_VAR 0 1
79229: PPUSH
79230: LD_VAR 0 6
79234: PPUSH
79235: LD_VAR 0 11
79239: PPUSH
79240: CALL_OW 272
79244: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79245: LD_ADDR_VAR 0 8
79249: PUSH
79250: LD_VAR 0 2
79254: PPUSH
79255: LD_VAR 0 6
79259: PPUSH
79260: LD_VAR 0 11
79264: PPUSH
79265: CALL_OW 273
79269: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79270: LD_VAR 0 7
79274: PPUSH
79275: LD_VAR 0 8
79279: PPUSH
79280: CALL_OW 488
79284: NOT
79285: IFFALSE 79289
// continue ;
79287: GO 79217
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79289: LD_ADDR_VAR 0 9
79293: PUSH
79294: LD_VAR 0 12
79298: PUSH
79299: LD_INT 1
79301: ARRAY
79302: PPUSH
79303: LD_VAR 0 12
79307: PUSH
79308: LD_INT 2
79310: ARRAY
79311: PPUSH
79312: LD_VAR 0 7
79316: PPUSH
79317: LD_VAR 0 8
79321: PPUSH
79322: CALL_OW 298
79326: ST_TO_ADDR
// if tmp < distance then
79327: LD_VAR 0 9
79331: PUSH
79332: LD_VAR 0 10
79336: LESS
79337: IFFALSE 79359
// begin result := i ;
79339: LD_ADDR_VAR 0 5
79343: PUSH
79344: LD_VAR 0 6
79348: ST_TO_ADDR
// distance := tmp ;
79349: LD_ADDR_VAR 0 10
79353: PUSH
79354: LD_VAR 0 9
79358: ST_TO_ADDR
// end ; end ;
79359: GO 79217
79361: POP
79362: POP
// end ;
79363: LD_VAR 0 5
79367: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79368: LD_INT 0
79370: PPUSH
79371: PPUSH
// if not driver or not IsInUnit ( driver ) then
79372: LD_VAR 0 1
79376: NOT
79377: PUSH
79378: LD_VAR 0 1
79382: PPUSH
79383: CALL_OW 310
79387: NOT
79388: OR
79389: IFFALSE 79393
// exit ;
79391: GO 79483
// vehicle := IsInUnit ( driver ) ;
79393: LD_ADDR_VAR 0 3
79397: PUSH
79398: LD_VAR 0 1
79402: PPUSH
79403: CALL_OW 310
79407: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79408: LD_VAR 0 1
79412: PPUSH
79413: LD_STRING \
79415: PUSH
79416: LD_INT 0
79418: PUSH
79419: LD_INT 0
79421: PUSH
79422: LD_INT 0
79424: PUSH
79425: LD_INT 0
79427: PUSH
79428: LD_INT 0
79430: PUSH
79431: LD_INT 0
79433: PUSH
79434: EMPTY
79435: LIST
79436: LIST
79437: LIST
79438: LIST
79439: LIST
79440: LIST
79441: LIST
79442: PUSH
79443: LD_STRING E
79445: PUSH
79446: LD_INT 0
79448: PUSH
79449: LD_INT 0
79451: PUSH
79452: LD_VAR 0 3
79456: PUSH
79457: LD_INT 0
79459: PUSH
79460: LD_INT 0
79462: PUSH
79463: LD_INT 0
79465: PUSH
79466: EMPTY
79467: LIST
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: LIST
79473: LIST
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: PPUSH
79479: CALL_OW 446
// end ;
79483: LD_VAR 0 2
79487: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79488: LD_INT 0
79490: PPUSH
79491: PPUSH
// if not driver or not IsInUnit ( driver ) then
79492: LD_VAR 0 1
79496: NOT
79497: PUSH
79498: LD_VAR 0 1
79502: PPUSH
79503: CALL_OW 310
79507: NOT
79508: OR
79509: IFFALSE 79513
// exit ;
79511: GO 79603
// vehicle := IsInUnit ( driver ) ;
79513: LD_ADDR_VAR 0 3
79517: PUSH
79518: LD_VAR 0 1
79522: PPUSH
79523: CALL_OW 310
79527: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79528: LD_VAR 0 1
79532: PPUSH
79533: LD_STRING \
79535: PUSH
79536: LD_INT 0
79538: PUSH
79539: LD_INT 0
79541: PUSH
79542: LD_INT 0
79544: PUSH
79545: LD_INT 0
79547: PUSH
79548: LD_INT 0
79550: PUSH
79551: LD_INT 0
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: LIST
79558: LIST
79559: LIST
79560: LIST
79561: LIST
79562: PUSH
79563: LD_STRING E
79565: PUSH
79566: LD_INT 0
79568: PUSH
79569: LD_INT 0
79571: PUSH
79572: LD_VAR 0 3
79576: PUSH
79577: LD_INT 0
79579: PUSH
79580: LD_INT 0
79582: PUSH
79583: LD_INT 0
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: LIST
79590: LIST
79591: LIST
79592: LIST
79593: LIST
79594: PUSH
79595: EMPTY
79596: LIST
79597: LIST
79598: PPUSH
79599: CALL_OW 447
// end ;
79603: LD_VAR 0 2
79607: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79608: LD_INT 0
79610: PPUSH
79611: PPUSH
79612: PPUSH
// tmp := [ ] ;
79613: LD_ADDR_VAR 0 5
79617: PUSH
79618: EMPTY
79619: ST_TO_ADDR
// for i in units do
79620: LD_ADDR_VAR 0 4
79624: PUSH
79625: LD_VAR 0 1
79629: PUSH
79630: FOR_IN
79631: IFFALSE 79669
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79633: LD_ADDR_VAR 0 5
79637: PUSH
79638: LD_VAR 0 5
79642: PPUSH
79643: LD_VAR 0 5
79647: PUSH
79648: LD_INT 1
79650: PLUS
79651: PPUSH
79652: LD_VAR 0 4
79656: PPUSH
79657: CALL_OW 256
79661: PPUSH
79662: CALL_OW 2
79666: ST_TO_ADDR
79667: GO 79630
79669: POP
79670: POP
// if not tmp then
79671: LD_VAR 0 5
79675: NOT
79676: IFFALSE 79680
// exit ;
79678: GO 79728
// if asc then
79680: LD_VAR 0 2
79684: IFFALSE 79708
// result := SortListByListAsc ( units , tmp ) else
79686: LD_ADDR_VAR 0 3
79690: PUSH
79691: LD_VAR 0 1
79695: PPUSH
79696: LD_VAR 0 5
79700: PPUSH
79701: CALL_OW 76
79705: ST_TO_ADDR
79706: GO 79728
// result := SortListByListDesc ( units , tmp ) ;
79708: LD_ADDR_VAR 0 3
79712: PUSH
79713: LD_VAR 0 1
79717: PPUSH
79718: LD_VAR 0 5
79722: PPUSH
79723: CALL_OW 77
79727: ST_TO_ADDR
// end ;
79728: LD_VAR 0 3
79732: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79733: LD_INT 0
79735: PPUSH
79736: PPUSH
// task := GetTaskList ( mech ) ;
79737: LD_ADDR_VAR 0 4
79741: PUSH
79742: LD_VAR 0 1
79746: PPUSH
79747: CALL_OW 437
79751: ST_TO_ADDR
// if not task then
79752: LD_VAR 0 4
79756: NOT
79757: IFFALSE 79761
// exit ;
79759: GO 79803
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79761: LD_ADDR_VAR 0 3
79765: PUSH
79766: LD_VAR 0 4
79770: PUSH
79771: LD_INT 1
79773: ARRAY
79774: PUSH
79775: LD_INT 1
79777: ARRAY
79778: PUSH
79779: LD_STRING r
79781: EQUAL
79782: PUSH
79783: LD_VAR 0 4
79787: PUSH
79788: LD_INT 1
79790: ARRAY
79791: PUSH
79792: LD_INT 4
79794: ARRAY
79795: PUSH
79796: LD_VAR 0 2
79800: EQUAL
79801: AND
79802: ST_TO_ADDR
// end ;
79803: LD_VAR 0 3
79807: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79808: LD_INT 0
79810: PPUSH
// SetDir ( unit , d ) ;
79811: LD_VAR 0 1
79815: PPUSH
79816: LD_VAR 0 4
79820: PPUSH
79821: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79825: LD_VAR 0 1
79829: PPUSH
79830: LD_VAR 0 2
79834: PPUSH
79835: LD_VAR 0 3
79839: PPUSH
79840: LD_VAR 0 5
79844: PPUSH
79845: CALL_OW 48
// end ;
79849: LD_VAR 0 6
79853: RET
// export function ToNaturalNumber ( number ) ; begin
79854: LD_INT 0
79856: PPUSH
// result := number div 1 ;
79857: LD_ADDR_VAR 0 2
79861: PUSH
79862: LD_VAR 0 1
79866: PUSH
79867: LD_INT 1
79869: DIV
79870: ST_TO_ADDR
// if number < 0 then
79871: LD_VAR 0 1
79875: PUSH
79876: LD_INT 0
79878: LESS
79879: IFFALSE 79889
// result := 0 ;
79881: LD_ADDR_VAR 0 2
79885: PUSH
79886: LD_INT 0
79888: ST_TO_ADDR
// end ;
79889: LD_VAR 0 2
79893: RET
// export function SortByClass ( units , class ) ; var un ; begin
79894: LD_INT 0
79896: PPUSH
79897: PPUSH
// if not units or not class then
79898: LD_VAR 0 1
79902: NOT
79903: PUSH
79904: LD_VAR 0 2
79908: NOT
79909: OR
79910: IFFALSE 79914
// exit ;
79912: GO 80009
// result := [ ] ;
79914: LD_ADDR_VAR 0 3
79918: PUSH
79919: EMPTY
79920: ST_TO_ADDR
// for un in units do
79921: LD_ADDR_VAR 0 4
79925: PUSH
79926: LD_VAR 0 1
79930: PUSH
79931: FOR_IN
79932: IFFALSE 80007
// if GetClass ( un ) = class then
79934: LD_VAR 0 4
79938: PPUSH
79939: CALL_OW 257
79943: PUSH
79944: LD_VAR 0 2
79948: EQUAL
79949: IFFALSE 79976
// result := Insert ( result , 1 , un ) else
79951: LD_ADDR_VAR 0 3
79955: PUSH
79956: LD_VAR 0 3
79960: PPUSH
79961: LD_INT 1
79963: PPUSH
79964: LD_VAR 0 4
79968: PPUSH
79969: CALL_OW 2
79973: ST_TO_ADDR
79974: GO 80005
// result := Replace ( result , result + 1 , un ) ;
79976: LD_ADDR_VAR 0 3
79980: PUSH
79981: LD_VAR 0 3
79985: PPUSH
79986: LD_VAR 0 3
79990: PUSH
79991: LD_INT 1
79993: PLUS
79994: PPUSH
79995: LD_VAR 0 4
79999: PPUSH
80000: CALL_OW 1
80004: ST_TO_ADDR
80005: GO 79931
80007: POP
80008: POP
// end ;
80009: LD_VAR 0 3
80013: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80014: LD_INT 0
80016: PPUSH
80017: PPUSH
80018: PPUSH
80019: PPUSH
80020: PPUSH
80021: PPUSH
80022: PPUSH
// result := [ ] ;
80023: LD_ADDR_VAR 0 4
80027: PUSH
80028: EMPTY
80029: ST_TO_ADDR
// if x - r < 0 then
80030: LD_VAR 0 1
80034: PUSH
80035: LD_VAR 0 3
80039: MINUS
80040: PUSH
80041: LD_INT 0
80043: LESS
80044: IFFALSE 80056
// min_x := 0 else
80046: LD_ADDR_VAR 0 8
80050: PUSH
80051: LD_INT 0
80053: ST_TO_ADDR
80054: GO 80072
// min_x := x - r ;
80056: LD_ADDR_VAR 0 8
80060: PUSH
80061: LD_VAR 0 1
80065: PUSH
80066: LD_VAR 0 3
80070: MINUS
80071: ST_TO_ADDR
// if y - r < 0 then
80072: LD_VAR 0 2
80076: PUSH
80077: LD_VAR 0 3
80081: MINUS
80082: PUSH
80083: LD_INT 0
80085: LESS
80086: IFFALSE 80098
// min_y := 0 else
80088: LD_ADDR_VAR 0 7
80092: PUSH
80093: LD_INT 0
80095: ST_TO_ADDR
80096: GO 80114
// min_y := y - r ;
80098: LD_ADDR_VAR 0 7
80102: PUSH
80103: LD_VAR 0 2
80107: PUSH
80108: LD_VAR 0 3
80112: MINUS
80113: ST_TO_ADDR
// max_x := x + r ;
80114: LD_ADDR_VAR 0 9
80118: PUSH
80119: LD_VAR 0 1
80123: PUSH
80124: LD_VAR 0 3
80128: PLUS
80129: ST_TO_ADDR
// max_y := y + r ;
80130: LD_ADDR_VAR 0 10
80134: PUSH
80135: LD_VAR 0 2
80139: PUSH
80140: LD_VAR 0 3
80144: PLUS
80145: ST_TO_ADDR
// for _x = min_x to max_x do
80146: LD_ADDR_VAR 0 5
80150: PUSH
80151: DOUBLE
80152: LD_VAR 0 8
80156: DEC
80157: ST_TO_ADDR
80158: LD_VAR 0 9
80162: PUSH
80163: FOR_TO
80164: IFFALSE 80265
// for _y = min_y to max_y do
80166: LD_ADDR_VAR 0 6
80170: PUSH
80171: DOUBLE
80172: LD_VAR 0 7
80176: DEC
80177: ST_TO_ADDR
80178: LD_VAR 0 10
80182: PUSH
80183: FOR_TO
80184: IFFALSE 80261
// begin if not ValidHex ( _x , _y ) then
80186: LD_VAR 0 5
80190: PPUSH
80191: LD_VAR 0 6
80195: PPUSH
80196: CALL_OW 488
80200: NOT
80201: IFFALSE 80205
// continue ;
80203: GO 80183
// if GetResourceTypeXY ( _x , _y ) then
80205: LD_VAR 0 5
80209: PPUSH
80210: LD_VAR 0 6
80214: PPUSH
80215: CALL_OW 283
80219: IFFALSE 80259
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80221: LD_ADDR_VAR 0 4
80225: PUSH
80226: LD_VAR 0 4
80230: PPUSH
80231: LD_VAR 0 4
80235: PUSH
80236: LD_INT 1
80238: PLUS
80239: PPUSH
80240: LD_VAR 0 5
80244: PUSH
80245: LD_VAR 0 6
80249: PUSH
80250: EMPTY
80251: LIST
80252: LIST
80253: PPUSH
80254: CALL_OW 1
80258: ST_TO_ADDR
// end ;
80259: GO 80183
80261: POP
80262: POP
80263: GO 80163
80265: POP
80266: POP
// end ;
80267: LD_VAR 0 4
80271: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80272: LD_INT 0
80274: PPUSH
80275: PPUSH
80276: PPUSH
80277: PPUSH
80278: PPUSH
80279: PPUSH
80280: PPUSH
80281: PPUSH
// if not units then
80282: LD_VAR 0 1
80286: NOT
80287: IFFALSE 80291
// exit ;
80289: GO 80815
// result := UnitFilter ( units , [ f_ok ] ) ;
80291: LD_ADDR_VAR 0 3
80295: PUSH
80296: LD_VAR 0 1
80300: PPUSH
80301: LD_INT 50
80303: PUSH
80304: EMPTY
80305: LIST
80306: PPUSH
80307: CALL_OW 72
80311: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80312: LD_ADDR_VAR 0 8
80316: PUSH
80317: LD_VAR 0 1
80321: PUSH
80322: LD_INT 1
80324: ARRAY
80325: PPUSH
80326: CALL_OW 255
80330: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80331: LD_ADDR_VAR 0 10
80335: PUSH
80336: LD_INT 29
80338: PUSH
80339: LD_INT 91
80341: PUSH
80342: LD_INT 49
80344: PUSH
80345: EMPTY
80346: LIST
80347: LIST
80348: LIST
80349: ST_TO_ADDR
// if not result then
80350: LD_VAR 0 3
80354: NOT
80355: IFFALSE 80359
// exit ;
80357: GO 80815
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80359: LD_ADDR_VAR 0 5
80363: PUSH
80364: LD_INT 81
80366: PUSH
80367: LD_VAR 0 8
80371: PUSH
80372: EMPTY
80373: LIST
80374: LIST
80375: PPUSH
80376: CALL_OW 69
80380: ST_TO_ADDR
// for i in result do
80381: LD_ADDR_VAR 0 4
80385: PUSH
80386: LD_VAR 0 3
80390: PUSH
80391: FOR_IN
80392: IFFALSE 80813
// begin tag := GetTag ( i ) + 1 ;
80394: LD_ADDR_VAR 0 9
80398: PUSH
80399: LD_VAR 0 4
80403: PPUSH
80404: CALL_OW 110
80408: PUSH
80409: LD_INT 1
80411: PLUS
80412: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80413: LD_ADDR_VAR 0 7
80417: PUSH
80418: LD_VAR 0 4
80422: PPUSH
80423: CALL_OW 250
80427: PPUSH
80428: LD_VAR 0 4
80432: PPUSH
80433: CALL_OW 251
80437: PPUSH
80438: LD_INT 6
80440: PPUSH
80441: CALL 80014 0 3
80445: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80446: LD_VAR 0 4
80450: PPUSH
80451: CALL_OW 247
80455: PUSH
80456: LD_INT 2
80458: EQUAL
80459: PUSH
80460: LD_VAR 0 7
80464: AND
80465: PUSH
80466: LD_VAR 0 4
80470: PPUSH
80471: CALL_OW 264
80475: PUSH
80476: LD_VAR 0 10
80480: IN
80481: NOT
80482: AND
80483: IFFALSE 80522
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80485: LD_VAR 0 4
80489: PPUSH
80490: LD_VAR 0 7
80494: PUSH
80495: LD_INT 1
80497: ARRAY
80498: PUSH
80499: LD_INT 1
80501: ARRAY
80502: PPUSH
80503: LD_VAR 0 7
80507: PUSH
80508: LD_INT 1
80510: ARRAY
80511: PUSH
80512: LD_INT 2
80514: ARRAY
80515: PPUSH
80516: CALL_OW 116
80520: GO 80811
// if path > tag then
80522: LD_VAR 0 2
80526: PUSH
80527: LD_VAR 0 9
80531: GREATER
80532: IFFALSE 80740
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80534: LD_ADDR_VAR 0 6
80538: PUSH
80539: LD_VAR 0 5
80543: PPUSH
80544: LD_INT 91
80546: PUSH
80547: LD_VAR 0 4
80551: PUSH
80552: LD_INT 8
80554: PUSH
80555: EMPTY
80556: LIST
80557: LIST
80558: LIST
80559: PPUSH
80560: CALL_OW 72
80564: ST_TO_ADDR
// if nearEnemy then
80565: LD_VAR 0 6
80569: IFFALSE 80638
// begin if GetWeapon ( i ) = ru_time_lapser then
80571: LD_VAR 0 4
80575: PPUSH
80576: CALL_OW 264
80580: PUSH
80581: LD_INT 49
80583: EQUAL
80584: IFFALSE 80612
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80586: LD_VAR 0 4
80590: PPUSH
80591: LD_VAR 0 6
80595: PPUSH
80596: LD_VAR 0 4
80600: PPUSH
80601: CALL_OW 74
80605: PPUSH
80606: CALL_OW 112
80610: GO 80636
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80612: LD_VAR 0 4
80616: PPUSH
80617: LD_VAR 0 6
80621: PPUSH
80622: LD_VAR 0 4
80626: PPUSH
80627: CALL_OW 74
80631: PPUSH
80632: CALL_OW 115
// end else
80636: GO 80738
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80638: LD_VAR 0 4
80642: PPUSH
80643: LD_VAR 0 2
80647: PUSH
80648: LD_VAR 0 9
80652: ARRAY
80653: PUSH
80654: LD_INT 1
80656: ARRAY
80657: PPUSH
80658: LD_VAR 0 2
80662: PUSH
80663: LD_VAR 0 9
80667: ARRAY
80668: PUSH
80669: LD_INT 2
80671: ARRAY
80672: PPUSH
80673: CALL_OW 297
80677: PUSH
80678: LD_INT 6
80680: GREATER
80681: IFFALSE 80724
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80683: LD_VAR 0 4
80687: PPUSH
80688: LD_VAR 0 2
80692: PUSH
80693: LD_VAR 0 9
80697: ARRAY
80698: PUSH
80699: LD_INT 1
80701: ARRAY
80702: PPUSH
80703: LD_VAR 0 2
80707: PUSH
80708: LD_VAR 0 9
80712: ARRAY
80713: PUSH
80714: LD_INT 2
80716: ARRAY
80717: PPUSH
80718: CALL_OW 114
80722: GO 80738
// SetTag ( i , tag ) ;
80724: LD_VAR 0 4
80728: PPUSH
80729: LD_VAR 0 9
80733: PPUSH
80734: CALL_OW 109
// end else
80738: GO 80811
// if enemy then
80740: LD_VAR 0 5
80744: IFFALSE 80811
// begin if GetWeapon ( i ) = ru_time_lapser then
80746: LD_VAR 0 4
80750: PPUSH
80751: CALL_OW 264
80755: PUSH
80756: LD_INT 49
80758: EQUAL
80759: IFFALSE 80787
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80761: LD_VAR 0 4
80765: PPUSH
80766: LD_VAR 0 5
80770: PPUSH
80771: LD_VAR 0 4
80775: PPUSH
80776: CALL_OW 74
80780: PPUSH
80781: CALL_OW 112
80785: GO 80811
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80787: LD_VAR 0 4
80791: PPUSH
80792: LD_VAR 0 5
80796: PPUSH
80797: LD_VAR 0 4
80801: PPUSH
80802: CALL_OW 74
80806: PPUSH
80807: CALL_OW 115
// end ; end ;
80811: GO 80391
80813: POP
80814: POP
// end ;
80815: LD_VAR 0 3
80819: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80820: LD_INT 0
80822: PPUSH
80823: PPUSH
80824: PPUSH
// if not unit or IsInUnit ( unit ) then
80825: LD_VAR 0 1
80829: NOT
80830: PUSH
80831: LD_VAR 0 1
80835: PPUSH
80836: CALL_OW 310
80840: OR
80841: IFFALSE 80845
// exit ;
80843: GO 80936
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80845: LD_ADDR_VAR 0 4
80849: PUSH
80850: LD_VAR 0 1
80854: PPUSH
80855: CALL_OW 250
80859: PPUSH
80860: LD_VAR 0 2
80864: PPUSH
80865: LD_INT 1
80867: PPUSH
80868: CALL_OW 272
80872: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80873: LD_ADDR_VAR 0 5
80877: PUSH
80878: LD_VAR 0 1
80882: PPUSH
80883: CALL_OW 251
80887: PPUSH
80888: LD_VAR 0 2
80892: PPUSH
80893: LD_INT 1
80895: PPUSH
80896: CALL_OW 273
80900: ST_TO_ADDR
// if ValidHex ( x , y ) then
80901: LD_VAR 0 4
80905: PPUSH
80906: LD_VAR 0 5
80910: PPUSH
80911: CALL_OW 488
80915: IFFALSE 80936
// ComTurnXY ( unit , x , y ) ;
80917: LD_VAR 0 1
80921: PPUSH
80922: LD_VAR 0 4
80926: PPUSH
80927: LD_VAR 0 5
80931: PPUSH
80932: CALL_OW 118
// end ;
80936: LD_VAR 0 3
80940: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80941: LD_INT 0
80943: PPUSH
80944: PPUSH
// result := false ;
80945: LD_ADDR_VAR 0 3
80949: PUSH
80950: LD_INT 0
80952: ST_TO_ADDR
// if not units then
80953: LD_VAR 0 2
80957: NOT
80958: IFFALSE 80962
// exit ;
80960: GO 81007
// for i in units do
80962: LD_ADDR_VAR 0 4
80966: PUSH
80967: LD_VAR 0 2
80971: PUSH
80972: FOR_IN
80973: IFFALSE 81005
// if See ( side , i ) then
80975: LD_VAR 0 1
80979: PPUSH
80980: LD_VAR 0 4
80984: PPUSH
80985: CALL_OW 292
80989: IFFALSE 81003
// begin result := true ;
80991: LD_ADDR_VAR 0 3
80995: PUSH
80996: LD_INT 1
80998: ST_TO_ADDR
// exit ;
80999: POP
81000: POP
81001: GO 81007
// end ;
81003: GO 80972
81005: POP
81006: POP
// end ;
81007: LD_VAR 0 3
81011: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81012: LD_INT 0
81014: PPUSH
81015: PPUSH
81016: PPUSH
81017: PPUSH
// if not unit or not points then
81018: LD_VAR 0 1
81022: NOT
81023: PUSH
81024: LD_VAR 0 2
81028: NOT
81029: OR
81030: IFFALSE 81034
// exit ;
81032: GO 81124
// dist := 99999 ;
81034: LD_ADDR_VAR 0 5
81038: PUSH
81039: LD_INT 99999
81041: ST_TO_ADDR
// for i in points do
81042: LD_ADDR_VAR 0 4
81046: PUSH
81047: LD_VAR 0 2
81051: PUSH
81052: FOR_IN
81053: IFFALSE 81122
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81055: LD_ADDR_VAR 0 6
81059: PUSH
81060: LD_VAR 0 1
81064: PPUSH
81065: LD_VAR 0 4
81069: PUSH
81070: LD_INT 1
81072: ARRAY
81073: PPUSH
81074: LD_VAR 0 4
81078: PUSH
81079: LD_INT 2
81081: ARRAY
81082: PPUSH
81083: CALL_OW 297
81087: ST_TO_ADDR
// if tmpDist < dist then
81088: LD_VAR 0 6
81092: PUSH
81093: LD_VAR 0 5
81097: LESS
81098: IFFALSE 81120
// begin result := i ;
81100: LD_ADDR_VAR 0 3
81104: PUSH
81105: LD_VAR 0 4
81109: ST_TO_ADDR
// dist := tmpDist ;
81110: LD_ADDR_VAR 0 5
81114: PUSH
81115: LD_VAR 0 6
81119: ST_TO_ADDR
// end ; end ;
81120: GO 81052
81122: POP
81123: POP
// end ;
81124: LD_VAR 0 3
81128: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81129: LD_INT 0
81131: PPUSH
// uc_side := side ;
81132: LD_ADDR_OWVAR 20
81136: PUSH
81137: LD_VAR 0 1
81141: ST_TO_ADDR
// uc_nation := 3 ;
81142: LD_ADDR_OWVAR 21
81146: PUSH
81147: LD_INT 3
81149: ST_TO_ADDR
// vc_chassis := 25 ;
81150: LD_ADDR_OWVAR 37
81154: PUSH
81155: LD_INT 25
81157: ST_TO_ADDR
// vc_engine := engine_siberite ;
81158: LD_ADDR_OWVAR 39
81162: PUSH
81163: LD_INT 3
81165: ST_TO_ADDR
// vc_control := control_computer ;
81166: LD_ADDR_OWVAR 38
81170: PUSH
81171: LD_INT 3
81173: ST_TO_ADDR
// vc_weapon := 59 ;
81174: LD_ADDR_OWVAR 40
81178: PUSH
81179: LD_INT 59
81181: ST_TO_ADDR
// result := CreateVehicle ;
81182: LD_ADDR_VAR 0 5
81186: PUSH
81187: CALL_OW 45
81191: ST_TO_ADDR
// SetDir ( result , d ) ;
81192: LD_VAR 0 5
81196: PPUSH
81197: LD_VAR 0 4
81201: PPUSH
81202: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81206: LD_VAR 0 5
81210: PPUSH
81211: LD_VAR 0 2
81215: PPUSH
81216: LD_VAR 0 3
81220: PPUSH
81221: LD_INT 0
81223: PPUSH
81224: CALL_OW 48
// end ;
81228: LD_VAR 0 5
81232: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81233: LD_INT 0
81235: PPUSH
81236: PPUSH
81237: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81238: LD_ADDR_VAR 0 2
81242: PUSH
81243: LD_INT 0
81245: PUSH
81246: LD_INT 0
81248: PUSH
81249: LD_INT 0
81251: PUSH
81252: LD_INT 0
81254: PUSH
81255: EMPTY
81256: LIST
81257: LIST
81258: LIST
81259: LIST
81260: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81261: LD_VAR 0 1
81265: NOT
81266: PUSH
81267: LD_VAR 0 1
81271: PPUSH
81272: CALL_OW 264
81276: PUSH
81277: LD_INT 12
81279: PUSH
81280: LD_INT 51
81282: PUSH
81283: LD_INT 32
81285: PUSH
81286: LD_INT 89
81288: PUSH
81289: EMPTY
81290: LIST
81291: LIST
81292: LIST
81293: LIST
81294: IN
81295: NOT
81296: OR
81297: IFFALSE 81301
// exit ;
81299: GO 81399
// for i := 1 to 3 do
81301: LD_ADDR_VAR 0 3
81305: PUSH
81306: DOUBLE
81307: LD_INT 1
81309: DEC
81310: ST_TO_ADDR
81311: LD_INT 3
81313: PUSH
81314: FOR_TO
81315: IFFALSE 81397
// begin tmp := GetCargo ( cargo , i ) ;
81317: LD_ADDR_VAR 0 4
81321: PUSH
81322: LD_VAR 0 1
81326: PPUSH
81327: LD_VAR 0 3
81331: PPUSH
81332: CALL_OW 289
81336: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81337: LD_ADDR_VAR 0 2
81341: PUSH
81342: LD_VAR 0 2
81346: PPUSH
81347: LD_VAR 0 3
81351: PPUSH
81352: LD_VAR 0 4
81356: PPUSH
81357: CALL_OW 1
81361: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81362: LD_ADDR_VAR 0 2
81366: PUSH
81367: LD_VAR 0 2
81371: PPUSH
81372: LD_INT 4
81374: PPUSH
81375: LD_VAR 0 2
81379: PUSH
81380: LD_INT 4
81382: ARRAY
81383: PUSH
81384: LD_VAR 0 4
81388: PLUS
81389: PPUSH
81390: CALL_OW 1
81394: ST_TO_ADDR
// end ;
81395: GO 81314
81397: POP
81398: POP
// end ;
81399: LD_VAR 0 2
81403: RET
// export function Length ( array ) ; begin
81404: LD_INT 0
81406: PPUSH
// result := array + 0 ;
81407: LD_ADDR_VAR 0 2
81411: PUSH
81412: LD_VAR 0 1
81416: PUSH
81417: LD_INT 0
81419: PLUS
81420: ST_TO_ADDR
// end ;
81421: LD_VAR 0 2
81425: RET
// export function PrepareArray ( array ) ; begin
81426: LD_INT 0
81428: PPUSH
// result := array diff 0 ;
81429: LD_ADDR_VAR 0 2
81433: PUSH
81434: LD_VAR 0 1
81438: PUSH
81439: LD_INT 0
81441: DIFF
81442: ST_TO_ADDR
// if not result [ 1 ] then
81443: LD_VAR 0 2
81447: PUSH
81448: LD_INT 1
81450: ARRAY
81451: NOT
81452: IFFALSE 81472
// result := Delete ( result , 1 ) ;
81454: LD_ADDR_VAR 0 2
81458: PUSH
81459: LD_VAR 0 2
81463: PPUSH
81464: LD_INT 1
81466: PPUSH
81467: CALL_OW 3
81471: ST_TO_ADDR
// end ;
81472: LD_VAR 0 2
81476: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81477: LD_INT 0
81479: PPUSH
81480: PPUSH
81481: PPUSH
81482: PPUSH
// sibRocketRange := 25 ;
81483: LD_ADDR_VAR 0 6
81487: PUSH
81488: LD_INT 25
81490: ST_TO_ADDR
// result := false ;
81491: LD_ADDR_VAR 0 4
81495: PUSH
81496: LD_INT 0
81498: ST_TO_ADDR
// for i := 0 to 5 do
81499: LD_ADDR_VAR 0 5
81503: PUSH
81504: DOUBLE
81505: LD_INT 0
81507: DEC
81508: ST_TO_ADDR
81509: LD_INT 5
81511: PUSH
81512: FOR_TO
81513: IFFALSE 81580
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81515: LD_VAR 0 1
81519: PPUSH
81520: LD_VAR 0 5
81524: PPUSH
81525: LD_VAR 0 6
81529: PPUSH
81530: CALL_OW 272
81534: PPUSH
81535: LD_VAR 0 2
81539: PPUSH
81540: LD_VAR 0 5
81544: PPUSH
81545: LD_VAR 0 6
81549: PPUSH
81550: CALL_OW 273
81554: PPUSH
81555: LD_VAR 0 3
81559: PPUSH
81560: CALL_OW 309
81564: IFFALSE 81578
// begin result := true ;
81566: LD_ADDR_VAR 0 4
81570: PUSH
81571: LD_INT 1
81573: ST_TO_ADDR
// exit ;
81574: POP
81575: POP
81576: GO 81582
// end ;
81578: GO 81512
81580: POP
81581: POP
// end ;
81582: LD_VAR 0 4
81586: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81587: LD_INT 0
81589: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81590: LD_VAR 0 1
81594: PPUSH
81595: LD_VAR 0 2
81599: PPUSH
81600: LD_INT 0
81602: PPUSH
81603: LD_INT 0
81605: PPUSH
81606: LD_INT 1
81608: PPUSH
81609: LD_INT 0
81611: PPUSH
81612: CALL_OW 587
// end ; end_of_file
81616: LD_VAR 0 3
81620: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81621: LD_VAR 0 1
81625: PUSH
81626: LD_INT 200
81628: DOUBLE
81629: GREATEREQUAL
81630: IFFALSE 81638
81632: LD_INT 299
81634: DOUBLE
81635: LESSEQUAL
81636: IFTRUE 81640
81638: GO 81672
81640: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81641: LD_VAR 0 1
81645: PPUSH
81646: LD_VAR 0 2
81650: PPUSH
81651: LD_VAR 0 3
81655: PPUSH
81656: LD_VAR 0 4
81660: PPUSH
81661: LD_VAR 0 5
81665: PPUSH
81666: CALL 36287 0 5
81670: GO 81749
81672: LD_INT 300
81674: DOUBLE
81675: GREATEREQUAL
81676: IFFALSE 81684
81678: LD_INT 399
81680: DOUBLE
81681: LESSEQUAL
81682: IFTRUE 81686
81684: GO 81748
81686: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81687: LD_VAR 0 1
81691: PPUSH
81692: LD_VAR 0 2
81696: PPUSH
81697: LD_VAR 0 3
81701: PPUSH
81702: LD_VAR 0 4
81706: PPUSH
81707: LD_VAR 0 5
81711: PPUSH
81712: LD_VAR 0 6
81716: PPUSH
81717: LD_VAR 0 7
81721: PPUSH
81722: LD_VAR 0 8
81726: PPUSH
81727: LD_VAR 0 9
81731: PPUSH
81732: LD_VAR 0 10
81736: PPUSH
81737: LD_VAR 0 11
81741: PPUSH
81742: CALL 32620 0 11
81746: GO 81749
81748: POP
// end ;
81749: PPOPN 11
81751: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81752: LD_VAR 0 1
81756: PPUSH
81757: LD_VAR 0 2
81761: PPUSH
81762: LD_VAR 0 3
81766: PPUSH
81767: LD_VAR 0 4
81771: PPUSH
81772: LD_VAR 0 5
81776: PPUSH
81777: CALL 36023 0 5
// end ; end_of_file
81781: PPOPN 5
81783: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81784: LD_VAR 0 1
81788: PPUSH
81789: LD_VAR 0 2
81793: PPUSH
81794: LD_VAR 0 3
81798: PPUSH
81799: LD_VAR 0 4
81803: PPUSH
81804: LD_VAR 0 5
81808: PPUSH
81809: LD_VAR 0 6
81813: PPUSH
81814: CALL 20272 0 6
// end ;
81818: PPOPN 6
81820: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81821: LD_INT 0
81823: PPUSH
// begin if not units then
81824: LD_VAR 0 1
81828: NOT
81829: IFFALSE 81833
// exit ;
81831: GO 81833
// end ;
81833: PPOPN 7
81835: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81836: CALL 20176 0 0
// end ;
81840: PPOPN 1
81842: END
