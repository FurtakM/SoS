// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 , 14 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: LD_INT 14
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: ST_TO_ADDR
// debugMode = 0 ;
 186: LD_ADDR_EXP 45
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// PrepareDifficulty ;
 194: CALL 7766 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 198: LD_INT 43
 200: PPUSH
 201: LD_INT 22
 203: PPUSH
 204: LD_INT 1
 206: PPUSH
 207: LD_INT 333
 209: NEG
 210: PPUSH
 211: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 215: LD_INT 43
 217: PPUSH
 218: LD_INT 22
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 331
// PrepareGammaBase ;
 228: CALL 2639 0 0
// PrepareHeroes ;
 232: CALL 575 0 0
// PrepareRussianCommander ;
 236: CALL 6622 0 0
// PrepareRussians ;
 240: CALL 6940 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 244: LD_INT 22
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: PUSH
 254: LD_INT 25
 256: PUSH
 257: LD_INT 2
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PPUSH
 268: CALL_OW 69
 272: PPUSH
 273: LD_INT 0
 275: PPUSH
 276: LD_INT 90
 278: PPUSH
 279: LD_INT 86
 281: PPUSH
 282: LD_INT 3
 284: PPUSH
 285: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 289: LD_INT 3
 291: PPUSH
 292: LD_INT 24
 294: PPUSH
 295: LD_INT 3
 297: PPUSH
 298: LD_EXP 25
 302: PPUSH
 303: LD_EXP 26
 307: PPUSH
 308: CALL_OW 12
 312: PPUSH
 313: LD_INT 6
 315: PPUSH
 316: LD_INT 4
 318: PPUSH
 319: CALL 9191 0 6
// PrepareCutsceneAttack ;
 323: CALL 6674 0 0
// end ;
 327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 328: LD_INT 22
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 34
 340: PUSH
 341: LD_INT 6
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PUSH
 357: LD_INT 6
 359: GREATEREQUAL
 360: IFFALSE 372
 362: GO 364
 364: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 365: LD_STRING ACH_ARMOR
 367: PPUSH
 368: CALL_OW 543
 372: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 373: LD_EXP 45
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 572
 383: GO 385
 385: DISABLE
 386: LD_INT 0
 388: PPUSH
// begin enable ;
 389: ENABLE
// fogoff ( true ) ;
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 397: LD_ADDR_VAR 0 1
 401: PUSH
 402: LD_INT 22
 404: PUSH
 405: LD_INT 1
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PUSH
 412: LD_INT 21
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 448
// SetLives ( i , 1000 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 1000
 441: PPUSH
 442: CALL_OW 234
 446: GO 431
 448: POP
 449: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 450: LD_ADDR_VAR 0 1
 454: PUSH
 455: LD_INT 22
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: FOR_IN
 485: IFFALSE 509
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 274
 496: PPUSH
 497: LD_INT 1
 499: PPUSH
 500: LD_INT 9999
 502: PPUSH
 503: CALL_OW 277
 507: GO 484
 509: POP
 510: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 511: LD_ADDR_VAR 0 1
 515: PUSH
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 30
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PPUSH
 540: CALL_OW 69
 544: PUSH
 545: FOR_IN
 546: IFFALSE 570
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: CALL_OW 274
 557: PPUSH
 558: LD_INT 2
 560: PPUSH
 561: LD_INT 9999
 563: PPUSH
 564: CALL_OW 277
 568: GO 545
 570: POP
 571: POP
// end ; end_of_file
 572: PPOPN 1
 574: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 575: LD_INT 0
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
 588: PPUSH
 589: PPUSH
 590: PPUSH
 591: PPUSH
// uc_side = 1 ;
 592: LD_ADDR_OWVAR 20
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// uc_nation = 1 ;
 600: LD_ADDR_OWVAR 21
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// if gammaCommander = 1 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 1
 615: EQUAL
 616: IFFALSE 667
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 618: LD_ADDR_EXP 3
 622: PUSH
 623: LD_STRING Donaldson
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: LD_STRING 04_
 631: PPUSH
 632: CALL 44427 0 3
 636: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 637: LD_EXP 3
 641: PPUSH
 642: LD_INT 54
 644: PPUSH
 645: LD_INT 25
 647: PPUSH
 648: LD_INT 8
 650: PPUSH
 651: LD_INT 0
 653: PPUSH
 654: CALL_OW 50
// ComHold ( Donaldson ) ;
 658: LD_EXP 3
 662: PPUSH
 663: CALL_OW 140
// end ; if gammaCommander = 2 then
 667: LD_EXP 12
 671: PUSH
 672: LD_INT 2
 674: EQUAL
 675: IFFALSE 726
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_STRING Brown
 684: PPUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_STRING 04_
 690: PPUSH
 691: CALL 44427 0 3
 695: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 54
 703: PPUSH
 704: LD_INT 25
 706: PPUSH
 707: LD_INT 8
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 50
// ComHold ( Brown ) ;
 717: LD_EXP 2
 721: PPUSH
 722: CALL_OW 140
// end ; if gammaCommander = 3 then
 726: LD_EXP 12
 730: PUSH
 731: LD_INT 3
 733: EQUAL
 734: IFFALSE 785
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 736: LD_ADDR_EXP 13
 740: PUSH
 741: LD_STRING VanHouten
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: LD_STRING 
 749: PPUSH
 750: CALL 44427 0 3
 754: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 755: LD_EXP 13
 759: PPUSH
 760: LD_INT 54
 762: PPUSH
 763: LD_INT 25
 765: PPUSH
 766: LD_INT 8
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 50
// ComHold ( Houten ) ;
 776: LD_EXP 13
 780: PPUSH
 781: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 785: LD_ADDR_EXP 22
 789: PUSH
 790: LD_STRING Harisson
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: LD_STRING 
 798: PPUSH
 799: CALL 44427 0 3
 803: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 804: LD_ADDR_EXP 23
 808: PUSH
 809: LD_STRING Powell
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_STRING 
 817: PPUSH
 818: CALL 44427 0 3
 822: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 823: LD_STRING 04_Lisa
 825: PUSH
 826: EMPTY
 827: LIST
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_STRING LisaInDelta
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 30
 844: NOT
 845: AND
 846: PUSH
 847: LD_STRING 07_Lisa
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 898
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 861: LD_ADDR_EXP 6
 865: PUSH
 866: LD_STRING Lisa
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 44427 0 3
 879: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 880: LD_ADDR_VAR 0 15
 884: PUSH
 885: LD_VAR 0 15
 889: PUSH
 890: LD_EXP 6
 894: ADD
 895: ST_TO_ADDR
// end else
 896: GO 953
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 898: LD_EXP 6
 902: NOT
 903: PUSH
 904: LD_STRING LisaIn07
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: NOT
 915: AND
 916: IFFALSE 953
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 918: LD_ADDR_EXP 6
 922: PUSH
 923: LD_STRING Lisa
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: LD_STRING 07_
 931: PPUSH
 932: CALL 44427 0 3
 936: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 937: LD_ADDR_VAR 0 15
 941: PUSH
 942: LD_VAR 0 15
 946: PUSH
 947: LD_EXP 6
 951: ADD
 952: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 953: LD_STRING 04_Bobby
 955: PUSH
 956: EMPTY
 957: LIST
 958: PPUSH
 959: CALL_OW 28
 963: PUSH
 964: LD_STRING BobbyInDelta
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 30
 974: NOT
 975: AND
 976: PUSH
 977: LD_STRING 07_Bobby
 979: PUSH
 980: EMPTY
 981: LIST
 982: PPUSH
 983: CALL_OW 28
 987: NOT
 988: AND
 989: IFFALSE 1028
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 991: LD_ADDR_EXP 4
 995: PUSH
 996: LD_STRING Bobby
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: LD_STRING 04_
1004: PPUSH
1005: CALL 44427 0 3
1009: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1010: LD_ADDR_VAR 0 15
1014: PUSH
1015: LD_VAR 0 15
1019: PUSH
1020: LD_EXP 4
1024: ADD
1025: ST_TO_ADDR
// end else
1026: GO 1083
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1028: LD_EXP 4
1032: NOT
1033: PUSH
1034: LD_STRING BobbyIn07
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 30
1044: NOT
1045: AND
1046: IFFALSE 1083
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1048: LD_ADDR_EXP 4
1052: PUSH
1053: LD_STRING Bobby
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: LD_STRING 07_
1061: PPUSH
1062: CALL 44427 0 3
1066: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1067: LD_ADDR_VAR 0 15
1071: PUSH
1072: LD_VAR 0 15
1076: PUSH
1077: LD_EXP 4
1081: ADD
1082: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1083: LD_STRING 04_Cyrus
1085: PUSH
1086: EMPTY
1087: LIST
1088: PPUSH
1089: CALL_OW 28
1093: PUSH
1094: LD_STRING CyrusInDelta
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 30
1104: NOT
1105: AND
1106: PUSH
1107: LD_STRING 07_Cyrus
1109: PUSH
1110: EMPTY
1111: LIST
1112: PPUSH
1113: CALL_OW 28
1117: NOT
1118: AND
1119: IFFALSE 1158
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1121: LD_ADDR_EXP 5
1125: PUSH
1126: LD_STRING Cyrus
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: LD_STRING 04_
1134: PPUSH
1135: CALL 44427 0 3
1139: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1140: LD_ADDR_VAR 0 15
1144: PUSH
1145: LD_VAR 0 15
1149: PUSH
1150: LD_EXP 5
1154: ADD
1155: ST_TO_ADDR
// end else
1156: GO 1213
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1158: LD_EXP 5
1162: NOT
1163: PUSH
1164: LD_STRING CyrusIn07
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 30
1174: NOT
1175: AND
1176: IFFALSE 1213
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1178: LD_ADDR_EXP 5
1182: PUSH
1183: LD_STRING Cyrus
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_STRING 07_
1191: PPUSH
1192: CALL 44427 0 3
1196: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1197: LD_ADDR_VAR 0 15
1201: PUSH
1202: LD_VAR 0 15
1206: PUSH
1207: LD_EXP 5
1211: ADD
1212: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1213: LD_STRING 04_Brown
1215: PUSH
1216: EMPTY
1217: LIST
1218: PPUSH
1219: CALL_OW 28
1223: PUSH
1224: LD_STRING BrownInDelta
1226: PPUSH
1227: LD_INT 0
1229: PPUSH
1230: CALL_OW 30
1234: NOT
1235: AND
1236: PUSH
1237: LD_STRING 07_Brown
1239: PUSH
1240: EMPTY
1241: LIST
1242: PPUSH
1243: CALL_OW 28
1247: NOT
1248: AND
1249: PUSH
1250: LD_EXP 12
1254: PUSH
1255: LD_INT 2
1257: NONEQUAL
1258: AND
1259: IFFALSE 1298
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1261: LD_ADDR_EXP 2
1265: PUSH
1266: LD_STRING Brown
1268: PPUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_STRING 04_
1274: PPUSH
1275: CALL 44427 0 3
1279: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1280: LD_ADDR_VAR 0 15
1284: PUSH
1285: LD_VAR 0 15
1289: PUSH
1290: LD_EXP 2
1294: ADD
1295: ST_TO_ADDR
// end else
1296: GO 1363
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1298: LD_EXP 2
1302: NOT
1303: PUSH
1304: LD_STRING BrownIn07
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 30
1314: NOT
1315: AND
1316: PUSH
1317: LD_EXP 12
1321: PUSH
1322: LD_INT 2
1324: NONEQUAL
1325: AND
1326: IFFALSE 1363
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1328: LD_ADDR_EXP 2
1332: PUSH
1333: LD_STRING Brown
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_STRING 07_
1341: PPUSH
1342: CALL 44427 0 3
1346: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1347: LD_ADDR_VAR 0 15
1351: PUSH
1352: LD_VAR 0 15
1356: PUSH
1357: LD_EXP 2
1361: ADD
1362: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1363: LD_STRING 04_Donaldson
1365: PUSH
1366: EMPTY
1367: LIST
1368: PPUSH
1369: CALL_OW 28
1373: PUSH
1374: LD_STRING DonaldsonInDelta
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 30
1384: NOT
1385: AND
1386: PUSH
1387: LD_STRING 07_Donaldson
1389: PUSH
1390: EMPTY
1391: LIST
1392: PPUSH
1393: CALL_OW 28
1397: NOT
1398: AND
1399: PUSH
1400: LD_EXP 12
1404: PUSH
1405: LD_INT 1
1407: NONEQUAL
1408: AND
1409: IFFALSE 1448
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1411: LD_ADDR_EXP 3
1415: PUSH
1416: LD_STRING Donaldson
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: LD_STRING 04_
1424: PPUSH
1425: CALL 44427 0 3
1429: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1430: LD_ADDR_VAR 0 15
1434: PUSH
1435: LD_VAR 0 15
1439: PUSH
1440: LD_EXP 3
1444: ADD
1445: ST_TO_ADDR
// end else
1446: GO 1513
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1448: LD_EXP 3
1452: NOT
1453: PUSH
1454: LD_STRING DonaldsonIn07
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 30
1464: NOT
1465: AND
1466: PUSH
1467: LD_EXP 12
1471: PUSH
1472: LD_INT 1
1474: NONEQUAL
1475: AND
1476: IFFALSE 1513
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1478: LD_ADDR_EXP 3
1482: PUSH
1483: LD_STRING Donaldson
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 07_
1491: PPUSH
1492: CALL 44427 0 3
1496: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1497: LD_ADDR_VAR 0 15
1501: PUSH
1502: LD_VAR 0 15
1506: PUSH
1507: LD_EXP 3
1511: ADD
1512: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1513: LD_STRING KhatamIn07
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL_OW 30
1523: NOT
1524: IFFALSE 1561
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1526: LD_ADDR_EXP 10
1530: PUSH
1531: LD_STRING Khatam
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: LD_STRING 07_
1539: PPUSH
1540: CALL 44427 0 3
1544: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1545: LD_ADDR_VAR 0 15
1549: PUSH
1550: LD_VAR 0 15
1554: PUSH
1555: LD_EXP 10
1559: ADD
1560: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1561: LD_ADDR_EXP 11
1565: PUSH
1566: LD_STRING 07_othersGamma
1568: PPUSH
1569: CALL_OW 31
1573: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1574: LD_ADDR_VAR 0 14
1578: PUSH
1579: LD_INT 8
1581: PUSH
1582: LD_EXP 11
1586: MINUS
1587: ST_TO_ADDR
// if tmp then
1588: LD_VAR 0 14
1592: IFFALSE 1645
// for i = 1 to tmp do
1594: LD_ADDR_VAR 0 2
1598: PUSH
1599: DOUBLE
1600: LD_INT 1
1602: DEC
1603: ST_TO_ADDR
1604: LD_VAR 0 14
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1643
// begin PrepareHuman ( false , 1 , 5 ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1625: LD_ADDR_EXP 11
1629: PUSH
1630: LD_EXP 11
1634: PUSH
1635: CALL_OW 44
1639: ADD
1640: ST_TO_ADDR
// end ;
1641: GO 1609
1643: POP
1644: POP
// if HexInfo ( 61 , 29 ) = 0 then
1645: LD_INT 61
1647: PPUSH
1648: LD_INT 29
1650: PPUSH
1651: CALL_OW 428
1655: PUSH
1656: LD_INT 0
1658: EQUAL
1659: IFFALSE 1690
// begin bc_type := b_barracks ;
1661: LD_ADDR_OWVAR 42
1665: PUSH
1666: LD_INT 5
1668: ST_TO_ADDR
// bc_level := 6 ;
1669: LD_ADDR_OWVAR 43
1673: PUSH
1674: LD_INT 6
1676: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1677: LD_INT 61
1679: PPUSH
1680: LD_INT 29
1682: PPUSH
1683: LD_INT 5
1685: PPUSH
1686: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1690: LD_ADDR_VAR 0 13
1694: PUSH
1695: LD_INT 22
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 31
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 69
1723: ST_TO_ADDR
// for i in bun do
1724: LD_ADDR_VAR 0 2
1728: PUSH
1729: LD_VAR 0 13
1733: PUSH
1734: FOR_IN
1735: IFFALSE 1867
// begin x := GetX ( i ) ;
1737: LD_ADDR_VAR 0 3
1741: PUSH
1742: LD_VAR 0 2
1746: PPUSH
1747: CALL_OW 250
1751: ST_TO_ADDR
// y := GetY ( i ) ;
1752: LD_ADDR_VAR 0 4
1756: PUSH
1757: LD_VAR 0 2
1761: PPUSH
1762: CALL_OW 251
1766: ST_TO_ADDR
// d := GetDir ( i ) ;
1767: LD_ADDR_VAR 0 5
1771: PUSH
1772: LD_VAR 0 2
1776: PPUSH
1777: CALL_OW 254
1781: ST_TO_ADDR
// RemoveUnit ( i ) ;
1782: LD_VAR 0 2
1786: PPUSH
1787: CALL_OW 64
// bc_type := b_bunker ;
1791: LD_ADDR_OWVAR 42
1795: PUSH
1796: LD_INT 32
1798: ST_TO_ADDR
// bc_level := 6 ;
1799: LD_ADDR_OWVAR 43
1803: PUSH
1804: LD_INT 6
1806: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1807: LD_ADDR_VAR 0 6
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: LD_VAR 0 5
1826: PPUSH
1827: CALL_OW 47
1831: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1832: LD_VAR 0 6
1836: PPUSH
1837: LD_INT 5
1839: PUSH
1840: LD_INT 4
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_VAR 0 2
1851: PUSH
1852: LD_INT 2
1854: MOD
1855: PUSH
1856: LD_INT 1
1858: PLUS
1859: ARRAY
1860: PPUSH
1861: CALL_OW 431
// end ;
1865: GO 1734
1867: POP
1868: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1869: LD_ADDR_VAR 0 9
1873: PUSH
1874: LD_INT 22
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 30
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PPUSH
1898: CALL_OW 69
1902: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1903: LD_ADDR_VAR 0 8
1907: PUSH
1908: LD_INT 22
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 30
1923: PUSH
1924: LD_INT 6
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 30
1933: PUSH
1934: LD_INT 7
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 30
1943: PUSH
1944: LD_INT 8
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PPUSH
1961: CALL_OW 69
1965: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1966: LD_ADDR_VAR 0 7
1970: PUSH
1971: LD_INT 22
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 30
1983: PUSH
1984: LD_INT 3
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 36
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2034: LD_ADDR_VAR 0 13
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 2
2051: PUSH
2052: LD_INT 30
2054: PUSH
2055: LD_INT 31
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 30
2064: PUSH
2065: LD_INT 32
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: LD_EXP 11
2095: PUSH
2096: LD_VAR 0 15
2100: ADD
2101: PUSH
2102: FOR_IN
2103: IFFALSE 2524
// begin placed := false ;
2105: LD_ADDR_VAR 0 11
2109: PUSH
2110: LD_INT 0
2112: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2113: LD_VAR 0 2
2117: PPUSH
2118: CALL_OW 257
2122: PUSH
2123: LD_INT 1
2125: EQUAL
2126: IFFALSE 2251
// begin if UnitFilter ( bun , [ f_empty ] ) then
2128: LD_VAR 0 13
2132: PPUSH
2133: LD_INT 58
2135: PUSH
2136: EMPTY
2137: LIST
2138: PPUSH
2139: CALL_OW 72
2143: IFFALSE 2182
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_VAR 0 13
2154: PPUSH
2155: LD_INT 58
2157: PUSH
2158: EMPTY
2159: LIST
2160: PPUSH
2161: CALL_OW 72
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: CALL_OW 52
// placed := true ;
2174: LD_ADDR_VAR 0 11
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// end ; if arm and not placed then
2182: LD_VAR 0 9
2186: PUSH
2187: LD_VAR 0 11
2191: NOT
2192: AND
2193: IFFALSE 2251
// begin for j in arm do
2195: LD_ADDR_VAR 0 10
2199: PUSH
2200: LD_VAR 0 9
2204: PUSH
2205: FOR_IN
2206: IFFALSE 2249
// if UnitsInside ( j ) < 6 then
2208: LD_VAR 0 10
2212: PPUSH
2213: CALL_OW 313
2217: PUSH
2218: LD_INT 6
2220: LESS
2221: IFFALSE 2247
// begin PlaceHumanInUnit ( i , j ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_VAR 0 10
2232: PPUSH
2233: CALL_OW 52
// placed := true ;
2237: LD_ADDR_VAR 0 11
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// break ;
2245: GO 2249
// end ;
2247: GO 2205
2249: POP
2250: POP
// end ; end ; if GetClass ( i ) = 2 then
2251: LD_VAR 0 2
2255: PPUSH
2256: CALL_OW 257
2260: PUSH
2261: LD_INT 2
2263: EQUAL
2264: IFFALSE 2297
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 52
2273: PPUSH
2274: LD_INT 20
2276: PPUSH
2277: LD_INT 6
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 50
// placed := true ;
2287: LD_ADDR_VAR 0 11
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// continue ;
2295: GO 2102
// end ; if GetClass ( i ) = 3 then
2297: LD_VAR 0 2
2301: PPUSH
2302: CALL_OW 257
2306: PUSH
2307: LD_INT 3
2309: EQUAL
2310: IFFALSE 2414
// if fac then
2312: LD_VAR 0 7
2316: IFFALSE 2414
// begin if ct then
2318: LD_VAR 0 12
2322: IFFALSE 2350
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_VAR 0 12
2333: PUSH
2334: LD_INT 1
2336: ARRAY
2337: PPUSH
2338: CALL_OW 52
// placed := true ;
2342: LD_ADDR_VAR 0 11
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// end ; if placed then
2350: LD_VAR 0 11
2354: IFFALSE 2358
// continue ;
2356: GO 2102
// for j in fac do
2358: LD_ADDR_VAR 0 10
2362: PUSH
2363: LD_VAR 0 7
2367: PUSH
2368: FOR_IN
2369: IFFALSE 2412
// if UnitsInside ( j ) < 6 then
2371: LD_VAR 0 10
2375: PPUSH
2376: CALL_OW 313
2380: PUSH
2381: LD_INT 6
2383: LESS
2384: IFFALSE 2410
// begin PlaceHumanInUnit ( i , j ) ;
2386: LD_VAR 0 2
2390: PPUSH
2391: LD_VAR 0 10
2395: PPUSH
2396: CALL_OW 52
// placed := true ;
2400: LD_ADDR_VAR 0 11
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// break ;
2408: GO 2412
// end ;
2410: GO 2368
2412: POP
2413: POP
// end ; if GetClass ( i ) = 4 then
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL_OW 257
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2491
// if lab then
2429: LD_VAR 0 8
2433: IFFALSE 2491
// begin for j in lab do
2435: LD_ADDR_VAR 0 10
2439: PUSH
2440: LD_VAR 0 8
2444: PUSH
2445: FOR_IN
2446: IFFALSE 2489
// if UnitsInside ( j ) < 6 then
2448: LD_VAR 0 10
2452: PPUSH
2453: CALL_OW 313
2457: PUSH
2458: LD_INT 6
2460: LESS
2461: IFFALSE 2487
// begin PlaceHumanInUnit ( i , j ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 10
2472: PPUSH
2473: CALL_OW 52
// placed := true ;
2477: LD_ADDR_VAR 0 11
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// break ;
2485: GO 2489
// end ;
2487: GO 2445
2489: POP
2490: POP
// end ; if not placed then
2491: LD_VAR 0 11
2495: NOT
2496: IFFALSE 2522
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 49
// ComHold ( i ) ;
2513: LD_VAR 0 2
2517: PPUSH
2518: CALL_OW 140
// end ; end ;
2522: GO 2102
2524: POP
2525: POP
// if ct then
2526: LD_VAR 0 12
2530: IFFALSE 2634
// if UnitsInside ( ct [ 1 ] ) then
2532: LD_VAR 0 12
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 313
2545: IFFALSE 2634
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2547: LD_ADDR_VAR 0 2
2551: PUSH
2552: LD_INT 22
2554: PUSH
2555: LD_INT 1
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 33
2564: PUSH
2565: LD_INT 2
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2632
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 12
2593: PUSH
2594: LD_INT 1
2596: ARRAY
2597: PPUSH
2598: CALL_OW 313
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_VAR 0 12
2610: PUSH
2611: LD_INT 1
2613: ARRAY
2614: PPUSH
2615: CALL_OW 313
2619: PPUSH
2620: CALL_OW 12
2624: ARRAY
2625: PPUSH
2626: CALL_OW 135
2630: GO 2581
2632: POP
2633: POP
// end ; end ;
2634: LD_VAR 0 1
2638: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2639: LD_INT 0
2641: PPUSH
2642: PPUSH
2643: PPUSH
2644: PPUSH
2645: PPUSH
2646: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2647: LD_INT 71
2649: PPUSH
2650: LD_INT 5
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_STRING GammaBase
2667: PPUSH
2668: EMPTY
2669: PPUSH
2670: CALL_OW 30
2674: ST_TO_ADDR
// if not blist then
2675: LD_VAR 0 2
2679: NOT
2680: IFFALSE 2720
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 1
2689: PUSH
2690: LD_INT 52
2692: PUSH
2693: LD_INT 12
2695: PUSH
2696: LD_INT 3
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: LD_INT 0
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: ST_TO_ADDR
// uc_side := 1 ;
2720: LD_ADDR_OWVAR 20
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// uc_nation := 1 ;
2728: LD_ADDR_OWVAR 21
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// bc_kind1 := - 1 ;
2736: LD_ADDR_OWVAR 44
2740: PUSH
2741: LD_INT 1
2743: NEG
2744: ST_TO_ADDR
// bc_kind2 := - 1 ;
2745: LD_ADDR_OWVAR 45
2749: PUSH
2750: LD_INT 1
2752: NEG
2753: ST_TO_ADDR
// for i in blist do
2754: LD_ADDR_VAR 0 3
2758: PUSH
2759: LD_VAR 0 2
2763: PUSH
2764: FOR_IN
2765: IFFALSE 3041
// begin bc_type := i [ 1 ] ;
2767: LD_ADDR_OWVAR 42
2771: PUSH
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2781: LD_ADDR_OWVAR 43
2785: PUSH
2786: LD_VAR 0 3
2790: PUSH
2791: LD_INT 5
2793: ARRAY
2794: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2795: LD_OWVAR 42
2799: PUSH
2800: LD_INT 6
2802: PUSH
2803: LD_INT 7
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: IN
2810: IFFALSE 2876
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2812: LD_STRING 06_remoteVehs_1
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 30
2822: NOT
2823: IFFALSE 2851
// begin bc_type := b_lab_full ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 8
2832: ST_TO_ADDR
// bc_kind1 := 10 ;
2833: LD_ADDR_OWVAR 44
2837: PUSH
2838: LD_INT 10
2840: ST_TO_ADDR
// bc_kind2 := 15 ;
2841: LD_ADDR_OWVAR 45
2845: PUSH
2846: LD_INT 15
2848: ST_TO_ADDR
// end else
2849: GO 2876
// begin bc_type := b_lab_half ;
2851: LD_ADDR_OWVAR 42
2855: PUSH
2856: LD_INT 7
2858: ST_TO_ADDR
// bc_kind1 := 10 ;
2859: LD_ADDR_OWVAR 44
2863: PUSH
2864: LD_INT 10
2866: ST_TO_ADDR
// bc_kind2 := - 1 ;
2867: LD_ADDR_OWVAR 45
2871: PUSH
2872: LD_INT 1
2874: NEG
2875: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2876: LD_OWVAR 42
2880: PUSH
2881: LD_INT 2
2883: EQUAL
2884: IFFALSE 2894
// bc_type := b_factory ;
2886: LD_ADDR_OWVAR 42
2890: PUSH
2891: LD_INT 3
2893: ST_TO_ADDR
// if bc_type = b_depot then
2894: LD_OWVAR 42
2898: PUSH
2899: LD_INT 0
2901: EQUAL
2902: IFFALSE 2951
// begin bc_type := b_warehouse ;
2904: LD_ADDR_OWVAR 42
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2912: LD_ADDR_EXP 37
2916: PUSH
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 2
2924: ARRAY
2925: PPUSH
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 3
2933: ARRAY
2934: PPUSH
2935: LD_VAR 0 3
2939: PUSH
2940: LD_INT 4
2942: ARRAY
2943: PPUSH
2944: CALL_OW 47
2948: ST_TO_ADDR
// continue ;
2949: GO 2764
// end ; if bc_type = b_armoury then
2951: LD_OWVAR 42
2955: PUSH
2956: LD_INT 4
2958: EQUAL
2959: IFFALSE 2969
// bc_type = b_barracks ;
2961: LD_ADDR_OWVAR 42
2965: PUSH
2966: LD_INT 5
2968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2969: LD_ADDR_VAR 0 4
2973: PUSH
2974: LD_VAR 0 3
2978: PUSH
2979: LD_INT 2
2981: ARRAY
2982: PPUSH
2983: LD_VAR 0 3
2987: PUSH
2988: LD_INT 3
2990: ARRAY
2991: PPUSH
2992: LD_VAR 0 3
2996: PUSH
2997: LD_INT 4
2999: ARRAY
3000: PPUSH
3001: CALL_OW 47
3005: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL_OW 266
3015: PUSH
3016: LD_INT 32
3018: EQUAL
3019: IFFALSE 3039
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 7
3033: ARRAY
3034: PPUSH
3035: CALL_OW 431
// end ;
3039: GO 2764
3041: POP
3042: POP
// if not amDepot then
3043: LD_EXP 37
3047: NOT
3048: IFFALSE 3085
// begin bc_type := b_warehouse ;
3050: LD_ADDR_OWVAR 42
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
// bc_level := 6 ;
3058: LD_ADDR_OWVAR 43
3062: PUSH
3063: LD_INT 6
3065: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3066: LD_ADDR_EXP 37
3070: PUSH
3071: LD_INT 52
3073: PPUSH
3074: LD_INT 12
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: CALL_OW 47
3084: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3085: LD_EXP 37
3089: PPUSH
3090: LD_STRING gamma
3092: PPUSH
3093: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 , 280 ] [ Difficulty ] ) ;
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 274
3106: PPUSH
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 500
3112: PUSH
3113: LD_INT 420
3115: PUSH
3116: LD_INT 350
3118: PUSH
3119: LD_INT 280
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_OWVAR 67
3132: ARRAY
3133: PPUSH
3134: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3138: LD_EXP 37
3142: PPUSH
3143: CALL_OW 274
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 200
3153: PPUSH
3154: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3158: LD_INT 22
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 30
3170: PUSH
3171: LD_INT 3
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: IFFALSE 3434
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3188: LD_ADDR_VAR 0 4
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 30
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PPUSH
3217: CALL_OW 69
3221: PUSH
3222: LD_INT 1
3224: ARRAY
3225: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3226: LD_ADDR_VAR 0 6
3230: PUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: CALL_OW 250
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: CALL_OW 251
3250: PPUSH
3251: LD_VAR 0 4
3255: PPUSH
3256: CALL_OW 254
3260: PPUSH
3261: CALL 78800 0 3
3265: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3266: LD_ADDR_VAR 0 2
3270: PUSH
3271: LD_INT 19
3273: PUSH
3274: LD_INT 17
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3281: LD_STRING 06_remoteVehs_1
3283: PPUSH
3284: LD_INT 0
3286: PPUSH
3287: CALL_OW 30
3291: IFFALSE 3314
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3293: LD_ADDR_VAR 0 2
3297: PUSH
3298: LD_VAR 0 2
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 22
3308: PPUSH
3309: CALL_OW 2
3313: ST_TO_ADDR
// for i in tmp do
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: LD_VAR 0 6
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_INT 2
3343: ARRAY
3344: PPUSH
3345: CALL_OW 428
3349: PUSH
3350: LD_INT 0
3352: EQUAL
3353: IFFALSE 3430
// begin bc_type := blist [ 1 ] ;
3355: LD_ADDR_OWVAR 42
3359: PUSH
3360: LD_VAR 0 2
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_VAR 0 3
3382: PUSH
3383: LD_INT 2
3385: ARRAY
3386: PPUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_INT 3
3394: ARRAY
3395: PPUSH
3396: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: LD_VAR 0 2
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: CALL_OW 3
3417: ST_TO_ADDR
// if blist = 0 then
3418: LD_VAR 0 2
3422: PUSH
3423: LD_INT 0
3425: EQUAL
3426: IFFALSE 3430
// break ;
3428: GO 3432
// end ;
3430: GO 3324
3432: POP
3433: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3434: LD_STRING 06_remoteVehs_1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 30
3444: IFFALSE 3911
// begin bc_type = 36 ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 36
3453: ST_TO_ADDR
// bc_level = 4 ;
3454: LD_ADDR_OWVAR 43
3458: PUSH
3459: LD_INT 4
3461: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3462: LD_EXP 37
3466: PPUSH
3467: LD_INT 36
3469: PPUSH
3470: LD_INT 62
3472: PPUSH
3473: LD_INT 12
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL 17162 0 6
3486: PUSH
3487: LD_INT 92
3489: PUSH
3490: LD_INT 62
3492: PUSH
3493: LD_INT 12
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: NOT
3510: AND
3511: IFFALSE 3528
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3513: LD_INT 62
3515: PPUSH
3516: LD_INT 12
3518: PPUSH
3519: LD_INT 3
3521: PPUSH
3522: CALL_OW 47
3526: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3528: LD_EXP 37
3532: PPUSH
3533: LD_INT 36
3535: PPUSH
3536: LD_INT 37
3538: PPUSH
3539: LD_INT 18
3541: PPUSH
3542: LD_INT 2
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL 17162 0 6
3552: PUSH
3553: LD_INT 92
3555: PUSH
3556: LD_INT 37
3558: PUSH
3559: LD_INT 18
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 69
3575: NOT
3576: AND
3577: IFFALSE 3594
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3579: LD_INT 37
3581: PPUSH
3582: LD_INT 18
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: CALL_OW 47
3592: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3594: LD_EXP 37
3598: PPUSH
3599: LD_INT 36
3601: PPUSH
3602: LD_INT 66
3604: PPUSH
3605: LD_INT 14
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_INT 0
3613: PPUSH
3614: CALL 17162 0 6
3618: PUSH
3619: LD_INT 92
3621: PUSH
3622: LD_INT 66
3624: PUSH
3625: LD_INT 14
3627: PUSH
3628: LD_INT 3
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: NOT
3642: AND
3643: IFFALSE 3660
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3645: LD_INT 66
3647: PPUSH
3648: LD_INT 14
3650: PPUSH
3651: LD_INT 4
3653: PPUSH
3654: CALL_OW 47
3658: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3660: LD_EXP 37
3664: PPUSH
3665: LD_INT 36
3667: PPUSH
3668: LD_INT 74
3670: PPUSH
3671: LD_INT 26
3673: PPUSH
3674: LD_INT 4
3676: PPUSH
3677: LD_INT 0
3679: PPUSH
3680: CALL 17162 0 6
3684: IFFALSE 3699
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3686: LD_INT 74
3688: PPUSH
3689: LD_INT 26
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3699: LD_INT 22
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 30
3711: PUSH
3712: LD_INT 36
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PPUSH
3723: CALL_OW 69
3727: NOT
3728: IFFALSE 3732
// exit ;
3730: GO 3911
// for i := 1 to [ 3 , 2 , 2 , 1 ] [ Difficulty ] do
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: DOUBLE
3738: LD_INT 1
3740: DEC
3741: ST_TO_ADDR
3742: LD_INT 3
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 1
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: LD_OWVAR 67
3764: ARRAY
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3909
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 , 2 ] [ Difficulty ] ;
3769: LD_ADDR_OWVAR 37
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: LD_INT 3
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_INT 2
3792: PPUSH
3793: CALL_OW 12
3797: ARRAY
3798: PUSH
3799: LD_INT 2
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: ST_TO_ADDR
// vc_engine = 1 ;
3817: LD_ADDR_OWVAR 39
3821: PUSH
3822: LD_INT 1
3824: ST_TO_ADDR
// vc_control = 2 ;
3825: LD_ADDR_OWVAR 38
3829: PUSH
3830: LD_INT 2
3832: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3833: LD_ADDR_OWVAR 40
3837: PUSH
3838: LD_INT 3
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 3
3857: PPUSH
3858: CALL_OW 12
3862: ARRAY
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3874: LD_VAR 0 5
3878: PPUSH
3879: LD_INT 4
3881: PPUSH
3882: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3886: LD_VAR 0 5
3890: PPUSH
3891: LD_INT 56
3893: PPUSH
3894: LD_INT 17
3896: PPUSH
3897: LD_INT 9
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 50
// end ;
3907: GO 3766
3909: POP
3910: POP
// end ; end ;
3911: LD_VAR 0 1
3915: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
3921: PPUSH
// uc_side = 1 ;
3922: LD_ADDR_OWVAR 20
3926: PUSH
3927: LD_INT 1
3929: ST_TO_ADDR
// uc_nation = 1 ;
3930: LD_ADDR_OWVAR 21
3934: PUSH
3935: LD_INT 1
3937: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3938: LD_ADDR_EXP 14
3942: PUSH
3943: LD_STRING Denis
3945: PPUSH
3946: LD_INT 1
3948: PPUSH
3949: LD_STRING 06c_
3951: PPUSH
3952: CALL 44427 0 3
3956: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3957: LD_EXP 14
3961: PPUSH
3962: LD_INT 4
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3972: LD_ADDR_EXP 15
3976: PUSH
3977: LD_STRING Joan
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_STRING 06c_
3985: PPUSH
3986: CALL 44427 0 3
3990: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3991: LD_EXP 15
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4006: LD_STRING GladstoneIn07
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 30
4016: NOT
4017: IFFALSE 4091
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4019: LD_ADDR_EXP 8
4023: PUSH
4024: LD_STRING Gladstone
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_STRING 06c_
4032: PPUSH
4033: CALL 44427 0 3
4037: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4038: LD_EXP 8
4042: NOT
4043: PUSH
4044: LD_STRING GladstoneStayInDelta
4046: PPUSH
4047: LD_INT 0
4049: PPUSH
4050: CALL_OW 30
4054: AND
4055: IFFALSE 4076
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4057: LD_ADDR_EXP 8
4061: PUSH
4062: LD_STRING Gladstone
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: LD_STRING 05_
4070: PPUSH
4071: CALL 44427 0 3
4075: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4076: LD_EXP 8
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4091: LD_STRING LisaStayInDelta
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 30
4101: IFFALSE 4137
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4103: LD_ADDR_EXP 6
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_STRING 05_
4116: PPUSH
4117: CALL 44427 0 3
4121: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4122: LD_EXP 6
4126: PPUSH
4127: LD_INT 4
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4137: LD_STRING BobbyStayInDelta
4139: PPUSH
4140: LD_INT 0
4142: PPUSH
4143: CALL_OW 30
4147: IFFALSE 4183
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4149: LD_ADDR_EXP 4
4153: PUSH
4154: LD_STRING Bobby
4156: PPUSH
4157: LD_INT 1
4159: PPUSH
4160: LD_STRING 05_
4162: PPUSH
4163: CALL 44427 0 3
4167: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4168: LD_EXP 4
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4183: LD_STRING CyrusStayInDelta
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 30
4193: IFFALSE 4229
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4195: LD_ADDR_EXP 5
4199: PUSH
4200: LD_STRING Cyrus
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_STRING 05_
4208: PPUSH
4209: CALL 44427 0 3
4213: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4214: LD_EXP 5
4218: PPUSH
4219: LD_INT 4
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4229: LD_STRING BrownStayInDelta
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 30
4239: IFFALSE 4275
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4241: LD_ADDR_EXP 2
4245: PUSH
4246: LD_STRING Brown
4248: PPUSH
4249: LD_INT 1
4251: PPUSH
4252: LD_STRING 05_
4254: PPUSH
4255: CALL 44427 0 3
4259: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4260: LD_EXP 2
4264: PPUSH
4265: LD_INT 4
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4275: LD_STRING DonaldsonStayInDelta
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 30
4285: IFFALSE 4321
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4287: LD_ADDR_EXP 3
4291: PUSH
4292: LD_STRING Donaldson
4294: PPUSH
4295: LD_INT 1
4297: PPUSH
4298: LD_STRING 05_
4300: PPUSH
4301: CALL 44427 0 3
4305: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4306: LD_EXP 3
4310: PPUSH
4311: LD_INT 4
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: LD_STRING OthersStayInDelta
4328: PPUSH
4329: CALL_OW 31
4333: ST_TO_ADDR
// if other > 2 then
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: GREATER
4342: IFFALSE 4387
// begin for j = 1 to 2 do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: DOUBLE
4350: LD_INT 1
4352: DEC
4353: ST_TO_ADDR
4354: LD_INT 2
4356: PUSH
4357: FOR_TO
4358: IFFALSE 4383
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4360: LD_VAR 0 4
4364: PUSH
4365: LD_VAR 0 3
4369: ARRAY
4370: PPUSH
4371: LD_INT 4
4373: PPUSH
4374: LD_INT 0
4376: PPUSH
4377: CALL_OW 49
4381: GO 4357
4383: POP
4384: POP
// end else
4385: GO 4430
// begin for j = 1 to other do
4387: LD_ADDR_VAR 0 3
4391: PUSH
4392: DOUBLE
4393: LD_INT 1
4395: DEC
4396: ST_TO_ADDR
4397: LD_VAR 0 4
4401: PUSH
4402: FOR_TO
4403: IFFALSE 4428
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4405: LD_VAR 0 4
4409: PUSH
4410: LD_VAR 0 3
4414: ARRAY
4415: PPUSH
4416: LD_INT 4
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
4426: GO 4402
4428: POP
4429: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4430: LD_ADDR_VAR 0 4
4434: PUSH
4435: LD_STRING 06_other_apemans
4437: PPUSH
4438: CALL_OW 31
4442: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
4443: LD_VAR 0 4
4447: PUSH
4448: LD_INT 5
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 3
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_OWVAR 67
4470: ARRAY
4471: GREATEREQUAL
4472: IFFALSE 4505
// j := [ 5 , 4 , 3 , 3 ] [ Difficulty ] else
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: LD_INT 5
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 3
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_OWVAR 67
4501: ARRAY
4502: ST_TO_ADDR
4503: GO 4515
// j := other ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: LD_VAR 0 4
4514: ST_TO_ADDR
// for i = 1 to j do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_VAR 0 3
4529: PUSH
4530: FOR_TO
4531: IFFALSE 4556
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4533: LD_VAR 0 4
4537: PUSH
4538: LD_VAR 0 2
4542: ARRAY
4543: PPUSH
4544: LD_INT 4
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
4554: GO 4530
4556: POP
4557: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4558: LD_INT 4
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 70
4589: PPUSH
4590: LD_INT 53
4592: PPUSH
4593: LD_INT 19
4595: PPUSH
4596: CALL_OW 111
// firstAttack = 1 ;
4600: LD_ADDR_EXP 33
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// end ;
4608: LD_VAR 0 1
4612: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4613: LD_INT 0
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4624: LD_ADDR_VAR 0 8
4628: PUSH
4629: LD_STRING 07_vehicles
4631: PPUSH
4632: EMPTY
4633: PPUSH
4634: CALL_OW 30
4638: ST_TO_ADDR
// macmilan_squad := [ ] ;
4639: LD_ADDR_EXP 42
4643: PUSH
4644: EMPTY
4645: ST_TO_ADDR
// tmp := [ ] ;
4646: LD_ADDR_VAR 0 6
4650: PUSH
4651: EMPTY
4652: ST_TO_ADDR
// tmp_vehs := [ ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: EMPTY
4659: ST_TO_ADDR
// uc_side := 1 ;
4660: LD_ADDR_OWVAR 20
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
// uc_nation := 1 ;
4668: LD_ADDR_OWVAR 21
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// if vehicles then
4676: LD_VAR 0 8
4680: IFFALSE 4839
// begin k := 1 ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_VAR 0 8
4704: PUSH
4705: LD_INT 4
4707: DIV
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4837
// begin vc_chassis = vehicles [ k ] ;
4712: LD_ADDR_OWVAR 37
4716: PUSH
4717: LD_VAR 0 8
4721: PUSH
4722: LD_VAR 0 3
4726: ARRAY
4727: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4728: LD_ADDR_OWVAR 39
4732: PUSH
4733: LD_VAR 0 8
4737: PUSH
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 1
4745: PLUS
4746: ARRAY
4747: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4748: LD_ADDR_OWVAR 38
4752: PUSH
4753: LD_VAR 0 8
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_INT 2
4765: PLUS
4766: ARRAY
4767: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4768: LD_ADDR_OWVAR 40
4772: PUSH
4773: LD_VAR 0 8
4777: PUSH
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 3
4785: PLUS
4786: ARRAY
4787: ST_TO_ADDR
// k := k + 4 ;
4788: LD_ADDR_VAR 0 3
4792: PUSH
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 4
4800: PLUS
4801: ST_TO_ADDR
// veh := CreateVehicle ;
4802: LD_ADDR_VAR 0 9
4806: PUSH
4807: CALL_OW 45
4811: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4812: LD_ADDR_VAR 0 7
4816: PUSH
4817: LD_VAR 0 7
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: LD_VAR 0 9
4829: PPUSH
4830: CALL_OW 2
4834: ST_TO_ADDR
// end ;
4835: GO 4709
4837: POP
4838: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4839: LD_ADDR_EXP 1
4843: PUSH
4844: LD_STRING JMM
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_EXP 44
4854: PPUSH
4855: CALL 44427 0 3
4859: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4860: LD_EXP 12
4864: PUSH
4865: LD_INT 1
4867: EQUAL
4868: PUSH
4869: LD_EXP 12
4873: PUSH
4874: LD_INT 3
4876: EQUAL
4877: OR
4878: PUSH
4879: LD_EXP 2
4883: NOT
4884: AND
4885: IFFALSE 4943
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4887: LD_ADDR_EXP 2
4891: PUSH
4892: LD_STRING Brown
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: LD_EXP 44
4902: PPUSH
4903: CALL 44427 0 3
4907: ST_TO_ADDR
// if Brown then
4908: LD_EXP 2
4912: IFFALSE 4943
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_VAR 0 6
4923: PPUSH
4924: LD_VAR 0 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: PPUSH
4933: LD_EXP 2
4937: PPUSH
4938: CALL_OW 1
4942: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4943: LD_EXP 12
4947: PUSH
4948: LD_INT 2
4950: EQUAL
4951: PUSH
4952: LD_EXP 12
4956: PUSH
4957: LD_INT 3
4959: EQUAL
4960: OR
4961: PUSH
4962: LD_EXP 3
4966: NOT
4967: AND
4968: IFFALSE 5026
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4970: LD_ADDR_EXP 3
4974: PUSH
4975: LD_STRING Donaldson
4977: PPUSH
4978: LD_INT 1
4980: PPUSH
4981: LD_EXP 44
4985: PPUSH
4986: CALL 44427 0 3
4990: ST_TO_ADDR
// if Donaldson then
4991: LD_EXP 3
4995: IFFALSE 5026
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
4997: LD_ADDR_VAR 0 6
5001: PUSH
5002: LD_VAR 0 6
5006: PPUSH
5007: LD_VAR 0 6
5011: PUSH
5012: LD_INT 1
5014: PLUS
5015: PPUSH
5016: LD_EXP 3
5020: PPUSH
5021: CALL_OW 1
5025: ST_TO_ADDR
// end ; if not Bobby then
5026: LD_EXP 4
5030: NOT
5031: IFFALSE 5089
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
5033: LD_ADDR_EXP 4
5037: PUSH
5038: LD_STRING Bobby
5040: PPUSH
5041: LD_INT 1
5043: PPUSH
5044: LD_EXP 44
5048: PPUSH
5049: CALL 44427 0 3
5053: ST_TO_ADDR
// if Bobby then
5054: LD_EXP 4
5058: IFFALSE 5089
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5060: LD_ADDR_VAR 0 6
5064: PUSH
5065: LD_VAR 0 6
5069: PPUSH
5070: LD_VAR 0 6
5074: PUSH
5075: LD_INT 1
5077: PLUS
5078: PPUSH
5079: LD_EXP 4
5083: PPUSH
5084: CALL_OW 1
5088: ST_TO_ADDR
// end ; if not Cyrus then
5089: LD_EXP 5
5093: NOT
5094: IFFALSE 5152
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5096: LD_ADDR_EXP 5
5100: PUSH
5101: LD_STRING Cyrus
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_EXP 44
5111: PPUSH
5112: CALL 44427 0 3
5116: ST_TO_ADDR
// if Cyrus then
5117: LD_EXP 5
5121: IFFALSE 5152
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5123: LD_ADDR_VAR 0 6
5127: PUSH
5128: LD_VAR 0 6
5132: PPUSH
5133: LD_VAR 0 6
5137: PUSH
5138: LD_INT 1
5140: PLUS
5141: PPUSH
5142: LD_EXP 5
5146: PPUSH
5147: CALL_OW 1
5151: ST_TO_ADDR
// end ; if not Lisa then
5152: LD_EXP 6
5156: NOT
5157: IFFALSE 5215
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5159: LD_ADDR_EXP 6
5163: PUSH
5164: LD_STRING Lisa
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_EXP 44
5174: PPUSH
5175: CALL 44427 0 3
5179: ST_TO_ADDR
// if Lisa then
5180: LD_EXP 6
5184: IFFALSE 5215
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5186: LD_ADDR_VAR 0 6
5190: PUSH
5191: LD_VAR 0 6
5195: PPUSH
5196: LD_VAR 0 6
5200: PUSH
5201: LD_INT 1
5203: PLUS
5204: PPUSH
5205: LD_EXP 6
5209: PPUSH
5210: CALL_OW 1
5214: ST_TO_ADDR
// end ; if not Frank then
5215: LD_EXP 7
5219: NOT
5220: IFFALSE 5278
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5222: LD_ADDR_EXP 7
5226: PUSH
5227: LD_STRING Frank
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: LD_EXP 44
5237: PPUSH
5238: CALL 44427 0 3
5242: ST_TO_ADDR
// if Frank then
5243: LD_EXP 7
5247: IFFALSE 5278
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5249: LD_ADDR_VAR 0 6
5253: PUSH
5254: LD_VAR 0 6
5258: PPUSH
5259: LD_VAR 0 6
5263: PUSH
5264: LD_INT 1
5266: PLUS
5267: PPUSH
5268: LD_EXP 7
5272: PPUSH
5273: CALL_OW 1
5277: ST_TO_ADDR
// end ; if not Kikuchi then
5278: LD_EXP 9
5282: NOT
5283: IFFALSE 5341
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5285: LD_ADDR_EXP 9
5289: PUSH
5290: LD_STRING Kikuchi
5292: PPUSH
5293: LD_INT 1
5295: PPUSH
5296: LD_EXP 44
5300: PPUSH
5301: CALL 44427 0 3
5305: ST_TO_ADDR
// if Kikuchi then
5306: LD_EXP 9
5310: IFFALSE 5341
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5312: LD_ADDR_VAR 0 6
5316: PUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: LD_VAR 0 6
5326: PUSH
5327: LD_INT 1
5329: PLUS
5330: PPUSH
5331: LD_EXP 9
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// end ; if not Gladstone then
5341: LD_EXP 8
5345: NOT
5346: IFFALSE 5404
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5348: LD_ADDR_EXP 8
5352: PUSH
5353: LD_STRING Gladstone
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_EXP 44
5363: PPUSH
5364: CALL 44427 0 3
5368: ST_TO_ADDR
// if Gladstone then
5369: LD_EXP 8
5373: IFFALSE 5404
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5375: LD_ADDR_VAR 0 6
5379: PUSH
5380: LD_VAR 0 6
5384: PPUSH
5385: LD_VAR 0 6
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: PPUSH
5394: LD_EXP 8
5398: PPUSH
5399: CALL_OW 1
5403: ST_TO_ADDR
// end ; if not Khatam then
5404: LD_EXP 10
5408: NOT
5409: IFFALSE 5467
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5411: LD_ADDR_EXP 10
5415: PUSH
5416: LD_STRING Khatam
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: LD_EXP 44
5426: PPUSH
5427: CALL 44427 0 3
5431: ST_TO_ADDR
// if Khatam then
5432: LD_EXP 10
5436: IFFALSE 5467
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_VAR 0 6
5447: PPUSH
5448: LD_VAR 0 6
5452: PUSH
5453: LD_INT 1
5455: PLUS
5456: PPUSH
5457: LD_EXP 10
5461: PPUSH
5462: CALL_OW 1
5466: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_STRING 07c_others
5474: PPUSH
5475: CALL_OW 31
5479: ST_TO_ADDR
// macmilan_squad := others ;
5480: LD_ADDR_EXP 42
5484: PUSH
5485: LD_VAR 0 5
5489: ST_TO_ADDR
// if others then
5490: LD_VAR 0 5
5494: IFFALSE 5582
// for i in others do
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_VAR 0 5
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5580
// if GetClass ( i ) = 3 then
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 257
5518: PUSH
5519: LD_INT 3
5521: EQUAL
5522: IFFALSE 5549
// tmp := Insert ( tmp , 1 , i ) else
5524: LD_ADDR_VAR 0 6
5528: PUSH
5529: LD_VAR 0 6
5533: PPUSH
5534: LD_INT 1
5536: PPUSH
5537: LD_VAR 0 2
5541: PPUSH
5542: CALL_OW 2
5546: ST_TO_ADDR
5547: GO 5578
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5549: LD_ADDR_VAR 0 6
5553: PUSH
5554: LD_VAR 0 6
5558: PPUSH
5559: LD_VAR 0 6
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: PPUSH
5568: LD_VAR 0 2
5572: PPUSH
5573: CALL_OW 1
5577: ST_TO_ADDR
5578: GO 5506
5580: POP
5581: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5582: LD_INT 4
5584: PPUSH
5585: LD_INT 21
5587: PUSH
5588: LD_INT 3
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 70
5599: IFFALSE 5640
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 21
5611: PUSH
5612: LD_INT 3
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 70
5623: PUSH
5624: FOR_IN
5625: IFFALSE 5638
// RemoveUnit ( i ) ;
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 64
5636: GO 5624
5638: POP
5639: POP
// wait ( 0 0$1 ) ;
5640: LD_INT 35
5642: PPUSH
5643: CALL_OW 67
// if tmp then
5647: LD_VAR 0 6
5651: IFFALSE 5836
// begin for i in tmp do
5653: LD_ADDR_VAR 0 2
5657: PUSH
5658: LD_VAR 0 6
5662: PUSH
5663: FOR_IN
5664: IFFALSE 5834
// begin SetDir ( i , 3 ) ;
5666: LD_VAR 0 2
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 233
// if tmp_vehs then
5678: LD_VAR 0 7
5682: IFFALSE 5760
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5684: LD_VAR 0 7
5688: PUSH
5689: LD_INT 1
5691: ARRAY
5692: PPUSH
5693: LD_INT 3
5695: PPUSH
5696: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5700: LD_VAR 0 7
5704: PUSH
5705: LD_INT 1
5707: ARRAY
5708: PPUSH
5709: LD_INT 78
5711: PPUSH
5712: LD_INT 5
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5722: LD_VAR 0 2
5726: PPUSH
5727: LD_VAR 0 7
5731: PUSH
5732: LD_INT 1
5734: ARRAY
5735: PPUSH
5736: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5740: LD_ADDR_VAR 0 7
5744: PUSH
5745: LD_VAR 0 7
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 3
5757: ST_TO_ADDR
// end else
5758: GO 5775
// PlaceUnitArea ( i , GammaSupport , false ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_INT 4
5767: PPUSH
5768: LD_INT 0
5770: PPUSH
5771: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5775: LD_VAR 0 2
5779: PPUSH
5780: LD_INT 77
5782: PPUSH
5783: LD_INT 16
5785: PPUSH
5786: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5790: LD_VAR 0 2
5794: PPUSH
5795: LD_INT 65
5797: PPUSH
5798: LD_INT 24
5800: PPUSH
5801: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5812: LD_INT 4
5814: PPUSH
5815: LD_INT 22
5817: PUSH
5818: LD_INT 1
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: NOT
5830: IFFALSE 5805
// end ;
5832: GO 5663
5834: POP
5835: POP
// end ; PlaceUnitArea ( JMM , GammaSupport , false ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_INT 4
5843: PPUSH
5844: LD_INT 0
5846: PPUSH
5847: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_INT 77
5858: PPUSH
5859: LD_INT 16
5861: PPUSH
5862: CALL_OW 111
// end ;
5866: LD_VAR 0 1
5870: RET
// export function PrepareSikorsky ; begin
5871: LD_INT 0
5873: PPUSH
// uc_side = 4 ;
5874: LD_ADDR_OWVAR 20
5878: PUSH
5879: LD_INT 4
5881: ST_TO_ADDR
// uc_nation = 1 ;
5882: LD_ADDR_OWVAR 21
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5890: LD_ADDR_EXP 16
5894: PUSH
5895: LD_STRING Sikorski
5897: PPUSH
5898: LD_INT 0
5900: PPUSH
5901: LD_STRING 
5903: PPUSH
5904: CALL 44427 0 3
5908: ST_TO_ADDR
// vc_engine = 1 ;
5909: LD_ADDR_OWVAR 39
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_control = 1 ;
5917: LD_ADDR_OWVAR 38
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 , 4 ] [ Difficulty ] ;
5925: LD_ADDR_OWVAR 40
5929: PUSH
5930: LD_INT 5
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: ST_TO_ADDR
// vc_chassis = 4 ;
5954: LD_ADDR_OWVAR 37
5958: PUSH
5959: LD_INT 4
5961: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5962: LD_ADDR_EXP 17
5966: PUSH
5967: CALL_OW 45
5971: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5972: LD_EXP 17
5976: PPUSH
5977: LD_INT 3
5979: PPUSH
5980: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5984: LD_INT 35
5986: PPUSH
5987: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5991: LD_EXP 17
5995: PPUSH
5996: LD_INT 18
5998: PPUSH
5999: LD_INT 5
6001: PPUSH
6002: LD_INT 0
6004: PPUSH
6005: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 305
6018: IFFALSE 5984
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
6020: LD_EXP 16
6024: PPUSH
6025: LD_EXP 17
6029: PPUSH
6030: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6034: LD_EXP 17
6038: PPUSH
6039: LD_INT 5
6041: PPUSH
6042: CALL_OW 113
// end ;
6046: LD_VAR 0 1
6050: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6051: LD_INT 0
6053: PPUSH
6054: PPUSH
6055: PPUSH
6056: PPUSH
// InitHc ;
6057: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 , 3 ] [ Difficulty ] do
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 5
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: LD_INT 3
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_OWVAR 67
6093: ARRAY
6094: PUSH
6095: FOR_TO
6096: IFFALSE 6212
// begin uc_side = 4 ;
6098: LD_ADDR_OWVAR 20
6102: PUSH
6103: LD_INT 4
6105: ST_TO_ADDR
// uc_nation = 1 ;
6106: LD_ADDR_OWVAR 21
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// hc_name =  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_gallery =  ;
6122: LD_ADDR_OWVAR 33
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6130: LD_INT 0
6132: PPUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_INT 5
6138: PPUSH
6139: LD_INT 8
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: CALL_OW 380
// un = CreateHuman ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: CALL_OW 44
6160: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_INT 3
6168: PPUSH
6169: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_INT 9
6180: PPUSH
6181: LD_INT 0
6183: PPUSH
6184: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_INT 53
6195: PPUSH
6196: LD_INT 23
6198: PPUSH
6199: CALL_OW 111
// wait ( 0 0$1 ) ;
6203: LD_INT 35
6205: PPUSH
6206: CALL_OW 67
// end ;
6210: GO 6095
6212: POP
6213: POP
// for i = 1 to 2 do
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: DOUBLE
6220: LD_INT 1
6222: DEC
6223: ST_TO_ADDR
6224: LD_INT 2
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6344
// begin uc_side = 4 ;
6230: LD_ADDR_OWVAR 20
6234: PUSH
6235: LD_INT 4
6237: ST_TO_ADDR
// uc_nation = 1 ;
6238: LD_ADDR_OWVAR 21
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// hc_name =  ;
6246: LD_ADDR_OWVAR 26
6250: PUSH
6251: LD_STRING 
6253: ST_TO_ADDR
// hc_gallery =  ;
6254: LD_ADDR_OWVAR 33
6258: PUSH
6259: LD_STRING 
6261: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 4
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: LD_INT 8
6273: PPUSH
6274: CALL_OW 12
6278: PPUSH
6279: CALL_OW 380
// un = CreateHuman ;
6283: LD_ADDR_VAR 0 3
6287: PUSH
6288: CALL_OW 44
6292: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6293: LD_VAR 0 3
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6305: LD_VAR 0 3
6309: PPUSH
6310: LD_INT 9
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6320: LD_VAR 0 3
6324: PPUSH
6325: LD_INT 53
6327: PPUSH
6328: LD_INT 23
6330: PPUSH
6331: CALL_OW 111
// wait ( 0 0$1 ) ;
6335: LD_INT 35
6337: PPUSH
6338: CALL_OW 67
// end ;
6342: GO 6227
6344: POP
6345: POP
// for i = 1 to [ 5 , 5 , 4 , 3 ] [ Difficulty ] do
6346: LD_ADDR_VAR 0 2
6350: PUSH
6351: DOUBLE
6352: LD_INT 1
6354: DEC
6355: ST_TO_ADDR
6356: LD_INT 5
6358: PUSH
6359: LD_INT 5
6361: PUSH
6362: LD_INT 4
6364: PUSH
6365: LD_INT 3
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_OWVAR 67
6378: ARRAY
6379: PUSH
6380: FOR_TO
6381: IFFALSE 6615
// begin uc_side = 4 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 4
6390: ST_TO_ADDR
// uc_nation = 1 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// vc_engine = 1 ;
6399: LD_ADDR_OWVAR 39
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// vc_control = 1 ;
6407: LD_ADDR_OWVAR 38
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6415: LD_ADDR_OWVAR 40
6419: PUSH
6420: LD_INT 7
6422: PUSH
6423: LD_INT 4
6425: PUSH
6426: LD_INT 5
6428: PUSH
6429: LD_INT 6
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_VAR 0 2
6442: PUSH
6443: LD_INT 4
6445: MOD
6446: PUSH
6447: LD_INT 1
6449: PLUS
6450: ARRAY
6451: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6452: LD_ADDR_OWVAR 37
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 3
6462: PUSH
6463: LD_INT 4
6465: PUSH
6466: LD_INT 4
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_VAR 0 2
6479: PUSH
6480: LD_INT 4
6482: MOD
6483: PUSH
6484: LD_INT 1
6486: PLUS
6487: ARRAY
6488: ST_TO_ADDR
// veh = CreateVehicle ;
6489: LD_ADDR_VAR 0 4
6493: PUSH
6494: CALL_OW 45
6498: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 3
6506: PPUSH
6507: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 9
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// InitHc ;
6526: CALL_OW 19
// hc_name =  ;
6530: LD_ADDR_OWVAR 26
6534: PUSH
6535: LD_STRING 
6537: ST_TO_ADDR
// hc_gallery =  ;
6538: LD_ADDR_OWVAR 33
6542: PUSH
6543: LD_STRING 
6545: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6546: LD_INT 0
6548: PPUSH
6549: LD_INT 3
6551: PPUSH
6552: LD_INT 5
6554: PPUSH
6555: LD_INT 8
6557: PPUSH
6558: CALL_OW 12
6562: PPUSH
6563: CALL_OW 380
// un = CreateHuman ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: CALL_OW 44
6576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6577: LD_VAR 0 3
6581: PPUSH
6582: LD_VAR 0 4
6586: PPUSH
6587: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6591: LD_VAR 0 3
6595: PPUSH
6596: LD_INT 53
6598: PPUSH
6599: LD_INT 23
6601: PPUSH
6602: CALL_OW 111
// wait ( 0 0$5 ) ;
6606: LD_INT 175
6608: PPUSH
6609: CALL_OW 67
// end ;
6613: GO 6380
6615: POP
6616: POP
// end ; end_of_file
6617: LD_VAR 0 1
6621: RET
// export function PrepareRussianCommander ; begin
6622: LD_INT 0
6624: PPUSH
// uc_side = 3 ;
6625: LD_ADDR_OWVAR 20
6629: PUSH
6630: LD_INT 3
6632: ST_TO_ADDR
// uc_nation = 3 ;
6633: LD_ADDR_OWVAR 21
6637: PUSH
6638: LD_INT 3
6640: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6641: LD_ADDR_EXP 24
6645: PUSH
6646: LD_STRING Borodin
6648: PPUSH
6649: CALL_OW 25
6653: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6654: LD_EXP 24
6658: PPUSH
6659: LD_INT 25
6661: PPUSH
6662: LD_INT 0
6664: PPUSH
6665: CALL_OW 49
// end ;
6669: LD_VAR 0 1
6673: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6674: LD_INT 0
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
// for i = 1 to 10 do
6680: LD_ADDR_VAR 0 2
6684: PUSH
6685: DOUBLE
6686: LD_INT 1
6688: DEC
6689: ST_TO_ADDR
6690: LD_INT 10
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6768
// begin uc_side = 6 ;
6696: LD_ADDR_OWVAR 20
6700: PUSH
6701: LD_INT 6
6703: ST_TO_ADDR
// uc_nation = 3 ;
6704: LD_ADDR_OWVAR 21
6708: PUSH
6709: LD_INT 3
6711: ST_TO_ADDR
// hc_gallery =  ;
6712: LD_ADDR_OWVAR 33
6716: PUSH
6717: LD_STRING 
6719: ST_TO_ADDR
// hc_name =  ;
6720: LD_ADDR_OWVAR 26
6724: PUSH
6725: LD_STRING 
6727: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6728: LD_INT 0
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: LD_INT 3
6736: PPUSH
6737: CALL_OW 380
// un = CreateHuman ;
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: CALL_OW 44
6750: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6751: LD_VAR 0 3
6755: PPUSH
6756: LD_INT 1
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 49
// end ;
6766: GO 6693
6768: POP
6769: POP
// for i = 1 to 3 do
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_INT 3
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6933
// begin uc_side = 6 ;
6786: LD_ADDR_OWVAR 20
6790: PUSH
6791: LD_INT 6
6793: ST_TO_ADDR
// uc_nation = 3 ;
6794: LD_ADDR_OWVAR 21
6798: PUSH
6799: LD_INT 3
6801: ST_TO_ADDR
// vc_engine = 1 ;
6802: LD_ADDR_OWVAR 39
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// vc_control = 1 ;
6810: LD_ADDR_OWVAR 38
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6818: LD_ADDR_OWVAR 40
6822: PUSH
6823: LD_INT 43
6825: PUSH
6826: LD_INT 44
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 1
6835: PPUSH
6836: LD_INT 2
6838: PPUSH
6839: CALL_OW 12
6843: ARRAY
6844: ST_TO_ADDR
// vc_chassis = 22 ;
6845: LD_ADDR_OWVAR 37
6849: PUSH
6850: LD_INT 22
6852: ST_TO_ADDR
// veh = CreateVehicle ;
6853: LD_ADDR_VAR 0 4
6857: PUSH
6858: CALL_OW 45
6862: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6863: LD_VAR 0 4
6867: PPUSH
6868: LD_INT 2
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 49
// hc_gallery =  ;
6878: LD_ADDR_OWVAR 33
6882: PUSH
6883: LD_STRING 
6885: ST_TO_ADDR
// hc_name =  ;
6886: LD_ADDR_OWVAR 26
6890: PUSH
6891: LD_STRING 
6893: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6894: LD_INT 0
6896: PPUSH
6897: LD_INT 3
6899: PPUSH
6900: LD_INT 4
6902: PPUSH
6903: CALL_OW 380
// un = CreateHuman ;
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: CALL_OW 44
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_VAR 0 4
6926: PPUSH
6927: CALL_OW 52
// end ;
6931: GO 6783
6933: POP
6934: POP
// end ;
6935: LD_VAR 0 1
6939: RET
// export function PrepareRussians ; var i , un ; begin
6940: LD_INT 0
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to 8 do
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_INT 8
6957: PUSH
6958: FOR_TO
6959: IFFALSE 7045
// begin uc_side = 3 ;
6961: LD_ADDR_OWVAR 20
6965: PUSH
6966: LD_INT 3
6968: ST_TO_ADDR
// uc_nation = 3 ;
6969: LD_ADDR_OWVAR 21
6973: PUSH
6974: LD_INT 3
6976: ST_TO_ADDR
// hc_gallery =  ;
6977: LD_ADDR_OWVAR 33
6981: PUSH
6982: LD_STRING 
6984: ST_TO_ADDR
// hc_name =  ;
6985: LD_ADDR_OWVAR 26
6989: PUSH
6990: LD_STRING 
6992: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6993: LD_INT 0
6995: PPUSH
6996: LD_INT 1
6998: PPUSH
6999: LD_EXP 25
7003: PPUSH
7004: LD_EXP 26
7008: PPUSH
7009: CALL_OW 12
7013: PPUSH
7014: CALL_OW 380
// un = CreateHuman ;
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: CALL_OW 44
7027: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7028: LD_VAR 0 3
7032: PPUSH
7033: LD_INT 3
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 49
// end ;
7043: GO 6958
7045: POP
7046: POP
// for i = 1 to 4 do
7047: LD_ADDR_VAR 0 2
7051: PUSH
7052: DOUBLE
7053: LD_INT 1
7055: DEC
7056: ST_TO_ADDR
7057: LD_INT 4
7059: PUSH
7060: FOR_TO
7061: IFFALSE 7147
// begin uc_side = 3 ;
7063: LD_ADDR_OWVAR 20
7067: PUSH
7068: LD_INT 3
7070: ST_TO_ADDR
// uc_nation = 3 ;
7071: LD_ADDR_OWVAR 21
7075: PUSH
7076: LD_INT 3
7078: ST_TO_ADDR
// hc_gallery =  ;
7079: LD_ADDR_OWVAR 33
7083: PUSH
7084: LD_STRING 
7086: ST_TO_ADDR
// hc_name =  ;
7087: LD_ADDR_OWVAR 26
7091: PUSH
7092: LD_STRING 
7094: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_INT 2
7100: PPUSH
7101: LD_EXP 25
7105: PPUSH
7106: LD_EXP 26
7110: PPUSH
7111: CALL_OW 12
7115: PPUSH
7116: CALL_OW 380
// un = CreateHuman ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: CALL_OW 44
7129: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7130: LD_VAR 0 3
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7060
7147: POP
7148: POP
// for i = 1 to 3 do
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_INT 3
7161: PUSH
7162: FOR_TO
7163: IFFALSE 7249
// begin uc_side = 3 ;
7165: LD_ADDR_OWVAR 20
7169: PUSH
7170: LD_INT 3
7172: ST_TO_ADDR
// uc_nation = 3 ;
7173: LD_ADDR_OWVAR 21
7177: PUSH
7178: LD_INT 3
7180: ST_TO_ADDR
// hc_gallery =  ;
7181: LD_ADDR_OWVAR 33
7185: PUSH
7186: LD_STRING 
7188: ST_TO_ADDR
// hc_name =  ;
7189: LD_ADDR_OWVAR 26
7193: PUSH
7194: LD_STRING 
7196: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7197: LD_INT 0
7199: PPUSH
7200: LD_INT 3
7202: PPUSH
7203: LD_EXP 25
7207: PPUSH
7208: LD_EXP 26
7212: PPUSH
7213: CALL_OW 12
7217: PPUSH
7218: CALL_OW 380
// un = CreateHuman ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: CALL_OW 44
7231: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7232: LD_VAR 0 3
7236: PPUSH
7237: LD_INT 3
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: CALL_OW 49
// end ;
7247: GO 7162
7249: POP
7250: POP
// for i = 1 to 2 do
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: DOUBLE
7257: LD_INT 1
7259: DEC
7260: ST_TO_ADDR
7261: LD_INT 2
7263: PUSH
7264: FOR_TO
7265: IFFALSE 7351
// begin uc_side = 3 ;
7267: LD_ADDR_OWVAR 20
7271: PUSH
7272: LD_INT 3
7274: ST_TO_ADDR
// uc_nation = 3 ;
7275: LD_ADDR_OWVAR 21
7279: PUSH
7280: LD_INT 3
7282: ST_TO_ADDR
// hc_gallery =  ;
7283: LD_ADDR_OWVAR 33
7287: PUSH
7288: LD_STRING 
7290: ST_TO_ADDR
// hc_name =  ;
7291: LD_ADDR_OWVAR 26
7295: PUSH
7296: LD_STRING 
7298: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7299: LD_INT 0
7301: PPUSH
7302: LD_INT 4
7304: PPUSH
7305: LD_EXP 25
7309: PPUSH
7310: LD_EXP 26
7314: PPUSH
7315: CALL_OW 12
7319: PPUSH
7320: CALL_OW 380
// un = CreateHuman ;
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: CALL_OW 44
7333: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7334: LD_VAR 0 3
7338: PPUSH
7339: LD_INT 3
7341: PPUSH
7342: LD_INT 0
7344: PPUSH
7345: CALL_OW 49
// end ;
7349: GO 7264
7351: POP
7352: POP
// end ; end_of_file
7353: LD_VAR 0 1
7357: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7358: LD_INT 0
7360: PPUSH
7361: PPUSH
7362: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7363: LD_ADDR_VAR 0 1
7367: PUSH
7368: LD_VAR 0 1
7372: PUSH
7373: LD_EXP 1
7377: PUSH
7378: LD_EXP 2
7382: PUSH
7383: LD_EXP 3
7387: PUSH
7388: LD_EXP 4
7392: PUSH
7393: LD_EXP 5
7397: PUSH
7398: LD_EXP 6
7402: PUSH
7403: LD_EXP 7
7407: PUSH
7408: LD_EXP 8
7412: PUSH
7413: LD_EXP 9
7417: PUSH
7418: LD_EXP 10
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: DIFF
7435: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 12
7458: ARRAY
7459: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7460: LD_VAR 0 6
7464: PPUSH
7465: CALL_OW 258
7469: PUSH
7470: LD_INT 1
7472: EQUAL
7473: IFFALSE 7491
// Say ( speaker , dialogMID ) else
7475: LD_VAR 0 6
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 88
7489: GO 7505
// Say ( speaker , dialogFID ) ;
7491: LD_VAR 0 6
7495: PPUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 88
// result := speaker ;
7505: LD_ADDR_VAR 0 4
7509: PUSH
7510: LD_VAR 0 6
7514: ST_TO_ADDR
// end ;
7515: LD_VAR 0 4
7519: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7520: LD_INT 0
7522: PPUSH
7523: PPUSH
7524: PPUSH
// uc_side := GetSide ( b ) ;
7525: LD_ADDR_OWVAR 20
7529: PUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL_OW 255
7539: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7540: LD_ADDR_OWVAR 21
7544: PUSH
7545: LD_VAR 0 2
7549: PPUSH
7550: CALL_OW 248
7554: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7555: LD_INT 0
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: LD_VAR 0 1
7565: PPUSH
7566: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7570: LD_ADDR_VAR 0 5
7574: PUSH
7575: LD_VAR 0 2
7579: PPUSH
7580: CALL_OW 254
7584: PUSH
7585: LD_INT 3
7587: MINUS
7588: ST_TO_ADDR
// if dir < 0 then
7589: LD_VAR 0 5
7593: PUSH
7594: LD_INT 0
7596: LESS
7597: IFFALSE 7613
// dir := 6 + dir ;
7599: LD_ADDR_VAR 0 5
7603: PUSH
7604: LD_INT 6
7606: PUSH
7607: LD_VAR 0 5
7611: PLUS
7612: ST_TO_ADDR
// un := CreateHuman ;
7613: LD_ADDR_VAR 0 4
7617: PUSH
7618: CALL_OW 44
7622: ST_TO_ADDR
// SetDir ( un , dir ) ;
7623: LD_VAR 0 4
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7637: LD_VAR 0 4
7641: PPUSH
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 52
// end ;
7651: LD_VAR 0 3
7655: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
7660: PPUSH
7661: PPUSH
// for i = 1 to count do
7662: LD_ADDR_VAR 0 8
7666: PUSH
7667: DOUBLE
7668: LD_INT 1
7670: DEC
7671: ST_TO_ADDR
7672: LD_VAR 0 6
7676: PUSH
7677: FOR_TO
7678: IFFALSE 7759
// begin uc_side = side ;
7680: LD_ADDR_OWVAR 20
7684: PUSH
7685: LD_VAR 0 1
7689: ST_TO_ADDR
// uc_nation = nation ;
7690: LD_ADDR_OWVAR 21
7694: PUSH
7695: LD_VAR 0 2
7699: ST_TO_ADDR
// hc_gallery =  ;
7700: LD_ADDR_OWVAR 33
7704: PUSH
7705: LD_STRING 
7707: ST_TO_ADDR
// hc_name =  ;
7708: LD_ADDR_OWVAR 26
7712: PUSH
7713: LD_STRING 
7715: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_VAR 0 5
7723: PPUSH
7724: LD_VAR 0 4
7728: PPUSH
7729: CALL_OW 380
// un = CreateHuman ;
7733: LD_ADDR_VAR 0 10
7737: PUSH
7738: CALL_OW 44
7742: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7743: LD_VAR 0 10
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL_OW 52
// end ;
7757: GO 7677
7759: POP
7760: POP
// end ;
7761: LD_VAR 0 7
7765: RET
// export function PrepareDifficulty ; begin
7766: LD_INT 0
7768: PPUSH
// case Difficulty of 1 :
7769: LD_OWVAR 67
7773: PUSH
7774: LD_INT 1
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7801
7782: POP
// begin RuSolMinLevel = 3 ;
7783: LD_ADDR_EXP 25
7787: PUSH
7788: LD_INT 3
7790: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7791: LD_ADDR_EXP 26
7795: PUSH
7796: LD_INT 5
7798: ST_TO_ADDR
// end ; 2 :
7799: GO 7979
7801: LD_INT 2
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7880
7809: POP
// begin RuSolMinLevel = 5 ;
7810: LD_ADDR_EXP 25
7814: PUSH
7815: LD_INT 5
7817: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7818: LD_ADDR_EXP 26
7822: PUSH
7823: LD_INT 6
7825: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7826: LD_INT 51
7828: PPUSH
7829: LD_INT 3
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7839: LD_INT 57
7841: PPUSH
7842: LD_INT 3
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7852: LD_INT 57
7854: PPUSH
7855: LD_INT 6
7857: PPUSH
7858: LD_INT 2
7860: PPUSH
7861: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7865: LD_INT 51
7867: PPUSH
7868: LD_INT 6
7870: PPUSH
7871: LD_INT 2
7873: PPUSH
7874: CALL_OW 322
// end ; 3 .. 4 :
7878: GO 7979
7880: LD_INT 3
7882: DOUBLE
7883: GREATEREQUAL
7884: IFFALSE 7892
7886: LD_INT 4
7888: DOUBLE
7889: LESSEQUAL
7890: IFTRUE 7894
7892: GO 7978
7894: POP
// begin RuSolMinLevel = 5 ;
7895: LD_ADDR_EXP 25
7899: PUSH
7900: LD_INT 5
7902: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7903: LD_ADDR_EXP 26
7907: PUSH
7908: LD_INT 6
7910: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7911: LD_INT 57
7913: PPUSH
7914: LD_INT 3
7916: PPUSH
7917: LD_INT 1
7919: PPUSH
7920: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7924: LD_INT 51
7926: PPUSH
7927: LD_INT 3
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7937: LD_INT 52
7939: PPUSH
7940: LD_INT 3
7942: PPUSH
7943: LD_INT 1
7945: PPUSH
7946: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7950: LD_INT 57
7952: PPUSH
7953: LD_INT 6
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7963: LD_INT 52
7965: PPUSH
7966: LD_INT 6
7968: PPUSH
7969: LD_INT 2
7971: PPUSH
7972: CALL_OW 322
// end ; end ;
7976: GO 7979
7978: POP
// end ;
7979: LD_VAR 0 1
7983: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7984: LD_INT 0
7986: PPUSH
7987: PPUSH
7988: PPUSH
7989: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7990: LD_ADDR_VAR 0 3
7994: PUSH
7995: LD_INT 22
7997: PUSH
7998: LD_INT 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: LD_INT 2
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 69
8023: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
8024: LD_ADDR_VAR 0 4
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: LD_INT 75
8034: PUSH
8035: LD_INT 79
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: LD_INT 113
8052: PUSH
8053: LD_INT 94
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 29
8067: PUSH
8068: LD_INT 106
8070: PUSH
8071: LD_INT 97
8073: PUSH
8074: LD_INT 3
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 26
8085: PUSH
8086: LD_INT 93
8088: PUSH
8089: LD_INT 97
8091: PUSH
8092: LD_INT 5
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 100
8106: PUSH
8107: LD_INT 89
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 17
8121: PUSH
8122: LD_INT 96
8124: PUSH
8125: LD_INT 89
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 32
8139: PUSH
8140: LD_INT 78
8142: PUSH
8143: LD_INT 94
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 32
8157: PUSH
8158: LD_INT 95
8160: PUSH
8161: LD_INT 82
8163: PUSH
8164: LD_INT 3
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 32
8175: PUSH
8176: LD_INT 104
8178: PUSH
8179: LD_INT 85
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 32
8193: PUSH
8194: LD_INT 81
8196: PUSH
8197: LD_INT 78
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 33
8211: PUSH
8212: LD_INT 109
8214: PUSH
8215: LD_INT 90
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 33
8229: PUSH
8230: LD_INT 88
8232: PUSH
8233: LD_INT 79
8235: PUSH
8236: LD_INT 3
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 33
8247: PUSH
8248: LD_INT 76
8250: PUSH
8251: LD_INT 87
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: LD_INT 96
8268: PUSH
8269: LD_INT 97
8271: PUSH
8272: LD_INT 5
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 26
8283: PUSH
8284: LD_INT 85
8286: PUSH
8287: LD_INT 84
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 6
8301: PUSH
8302: LD_INT 88
8304: PUSH
8305: LD_INT 95
8307: PUSH
8308: LD_INT 0
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 19
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 89
8325: PUSH
8326: LD_INT 4
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 16
8337: PUSH
8338: LD_INT 97
8340: PUSH
8341: LD_INT 86
8343: PUSH
8344: LD_INT 2
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: LD_INT 100
8358: PUSH
8359: LD_INT 85
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: ST_TO_ADDR
// for i := 1 to buildingsTab do
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 4
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8481
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PUSH
8420: LD_VAR 0 2
8424: ARRAY
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 4
8434: PUSH
8435: LD_VAR 0 2
8439: ARRAY
8440: PUSH
8441: LD_INT 2
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 4
8449: PUSH
8450: LD_VAR 0 2
8454: ARRAY
8455: PUSH
8456: LD_INT 3
8458: ARRAY
8459: PPUSH
8460: LD_VAR 0 4
8464: PUSH
8465: LD_VAR 0 2
8469: ARRAY
8470: PUSH
8471: LD_INT 4
8473: ARRAY
8474: PPUSH
8475: CALL_OW 205
8479: GO 8407
8481: POP
8482: POP
// end ;
8483: LD_VAR 0 1
8487: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8488: LD_INT 0
8490: PPUSH
8491: PPUSH
// for i in charactersList do
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 1
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8521
// SaveCharacters ( i , ident ) ;
8505: LD_VAR 0 4
8509: PPUSH
8510: LD_VAR 0 2
8514: PPUSH
8515: CALL_OW 38
8519: GO 8502
8521: POP
8522: POP
// end ;
8523: LD_VAR 0 3
8527: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
8532: PPUSH
8533: PPUSH
8534: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8535: LD_ADDR_VAR 0 8
8539: PUSH
8540: LD_INT 48
8542: PUSH
8543: LD_INT 49
8545: PUSH
8546: LD_INT 50
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 51
8557: PUSH
8558: LD_INT 52
8560: PUSH
8561: LD_INT 69
8563: PUSH
8564: LD_INT 39
8566: PUSH
8567: LD_INT 34
8569: PUSH
8570: LD_INT 40
8572: PUSH
8573: LD_INT 53
8575: PUSH
8576: LD_INT 71
8578: PUSH
8579: LD_INT 57
8581: PUSH
8582: LD_INT 58
8584: PUSH
8585: LD_INT 44
8587: PUSH
8588: LD_INT 32
8590: PUSH
8591: LD_INT 27
8593: PUSH
8594: LD_INT 23
8596: PUSH
8597: LD_INT 33
8599: PUSH
8600: LD_INT 59
8602: PUSH
8603: LD_INT 54
8605: PUSH
8606: LD_INT 55
8608: PUSH
8609: LD_INT 56
8611: PUSH
8612: LD_INT 63
8614: PUSH
8615: LD_INT 64
8617: PUSH
8618: LD_INT 65
8620: PUSH
8621: LD_INT 30
8623: PUSH
8624: LD_INT 31
8626: PUSH
8627: LD_INT 21
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8670: LD_ADDR_VAR 0 5
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 8
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8762
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8688: LD_VAR 0 8
8692: PUSH
8693: LD_VAR 0 5
8697: ARRAY
8698: PPUSH
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 321
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 8
8717: PUSH
8718: LD_VAR 0 5
8722: ARRAY
8723: PPUSH
8724: LD_VAR 0 3
8728: PPUSH
8729: CALL_OW 482
8733: PUSH
8734: LD_INT 1
8736: EQUAL
8737: AND
8738: IFFALSE 8760
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8740: LD_VAR 0 2
8744: PPUSH
8745: LD_VAR 0 8
8749: PUSH
8750: LD_VAR 0 5
8754: ARRAY
8755: PPUSH
8756: CALL_OW 184
8760: GO 8685
8762: POP
8763: POP
// end ;
8764: LD_VAR 0 4
8768: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8769: LD_INT 0
8771: PPUSH
8772: PPUSH
8773: PPUSH
8774: PPUSH
8775: PPUSH
8776: PPUSH
8777: PPUSH
8778: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8779: LD_ADDR_VAR 0 6
8783: PUSH
8784: LD_VAR 0 2
8788: PPUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 56
8803: PUSH
8804: EMPTY
8805: LIST
8806: PUSH
8807: LD_INT 24
8809: PUSH
8810: LD_INT 700
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: LD_INT 60
8822: PUSH
8823: EMPTY
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 2
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 25
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 25
8855: PUSH
8856: LD_INT 8
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 9
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 70
8891: PUSH
8892: LD_EXP 24
8896: PUSH
8897: EMPTY
8898: LIST
8899: DIFF
8900: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8901: LD_ADDR_VAR 0 7
8905: PUSH
8906: LD_VAR 0 2
8910: PPUSH
8911: LD_INT 22
8913: PUSH
8914: LD_VAR 0 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: LD_INT 32
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 58
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: LD_INT 24
8941: PUSH
8942: LD_INT 251
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: PPUSH
8955: CALL_OW 70
8959: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8960: LD_ADDR_VAR 0 9
8964: PUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 22
8972: PUSH
8973: LD_VAR 0 1
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 30
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 5
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 24
9012: PUSH
9013: LD_INT 251
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 70
9029: ST_TO_ADDR
// if barrackList > 0 then
9030: LD_VAR 0 9
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: IFFALSE 9186
// begin if turretList = 0 then
9040: LD_VAR 0 7
9044: PUSH
9045: LD_INT 0
9047: EQUAL
9048: IFFALSE 9090
// begin if soldiers_list > 0 then
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 0
9057: GREATER
9058: IFFALSE 9088
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9060: LD_VAR 0 6
9064: PPUSH
9065: LD_VAR 0 9
9069: PUSH
9070: LD_INT 1
9072: PPUSH
9073: LD_VAR 0 9
9077: PPUSH
9078: CALL_OW 12
9082: ARRAY
9083: PPUSH
9084: CALL_OW 120
// end else
9088: GO 9186
// begin for i in barrackList do
9090: LD_ADDR_VAR 0 4
9094: PUSH
9095: LD_VAR 0 9
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9184
// begin insideUnits = UnitsInside ( i ) ;
9103: LD_ADDR_VAR 0 10
9107: PUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 313
9117: ST_TO_ADDR
// if insideUnits > 0 then
9118: LD_VAR 0 10
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: IFFALSE 9150
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9128: LD_VAR 0 10
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PPUSH
9137: LD_VAR 0 7
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: CALL_OW 120
// if soldiers_list > 0 then
9150: LD_VAR 0 6
9154: PUSH
9155: LD_INT 0
9157: GREATER
9158: IFFALSE 9182
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9160: LD_VAR 0 6
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_VAR 0 7
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 120
// end ;
9182: GO 9100
9184: POP
9185: POP
// end ; end ; end ;
9186: LD_VAR 0 3
9190: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9191: LD_INT 0
9193: PPUSH
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
// for i = 1 to vehCount do
9199: LD_ADDR_VAR 0 8
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_VAR 0 6
9213: PUSH
9214: FOR_TO
9215: IFFALSE 9422
// begin uc_side = side ;
9217: LD_ADDR_OWVAR 20
9221: PUSH
9222: LD_VAR 0 1
9226: ST_TO_ADDR
// uc_nation = nation ;
9227: LD_ADDR_OWVAR 21
9231: PUSH
9232: LD_VAR 0 3
9236: ST_TO_ADDR
// vc_Chassis = 22 ;
9237: LD_ADDR_OWVAR 37
9241: PUSH
9242: LD_INT 22
9244: ST_TO_ADDR
// vc_engine = 1 ;
9245: LD_ADDR_OWVAR 39
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// vc_control = 1 ;
9253: LD_ADDR_OWVAR 38
9257: PUSH
9258: LD_INT 1
9260: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9261: LD_ADDR_OWVAR 40
9265: PUSH
9266: LD_INT 43
9268: PUSH
9269: LD_INT 44
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 2
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// veh = CreateVehicle ;
9288: LD_ADDR_VAR 0 12
9292: PUSH
9293: CALL_OW 45
9297: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9298: LD_VAR 0 12
9302: PPUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9315: LD_ADDR_EXP 32
9319: PUSH
9320: LD_EXP 32
9324: PUSH
9325: LD_VAR 0 12
9329: ADD
9330: ST_TO_ADDR
// hc_class = 3 ;
9331: LD_ADDR_OWVAR 28
9335: PUSH
9336: LD_INT 3
9338: ST_TO_ADDR
// hc_name =  ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING 
9346: ST_TO_ADDR
// hc_gallery =  ;
9347: LD_ADDR_OWVAR 33
9351: PUSH
9352: LD_STRING 
9354: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9355: LD_INT 0
9357: PPUSH
9358: LD_INT 3
9360: PPUSH
9361: LD_EXP 25
9365: PPUSH
9366: LD_EXP 26
9370: PPUSH
9371: CALL_OW 12
9375: PPUSH
9376: CALL_OW 380
// un = CreateHuman ;
9380: LD_ADDR_VAR 0 10
9384: PUSH
9385: CALL_OW 44
9389: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9390: LD_VAR 0 10
9394: PPUSH
9395: LD_VAR 0 12
9399: PPUSH
9400: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9404: LD_ADDR_EXP 32
9408: PUSH
9409: LD_EXP 32
9413: PUSH
9414: LD_VAR 0 10
9418: ADD
9419: ST_TO_ADDR
// end ;
9420: GO 9214
9422: POP
9423: POP
// end ;
9424: LD_VAR 0 7
9428: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9429: LD_INT 0
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 22
9444: PUSH
9445: LD_VAR 0 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: PUSH
9462: LD_INT 0
9464: EQUAL
9465: PUSH
9466: LD_EXP 32
9470: AND
9471: IFFALSE 9758
// begin for i in defenders_list do
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_EXP 32
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9756
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9486: LD_VAR 0 4
9490: PPUSH
9491: LD_INT 63
9493: PPUSH
9494: LD_INT 75
9496: PPUSH
9497: CALL_OW 297
9501: PUSH
9502: LD_INT 8
9504: GREATER
9505: PUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 314
9515: NOT
9516: AND
9517: IFFALSE 9536
// ComMoveXY ( i , 63 , 75 ) else
9519: LD_VAR 0 4
9523: PPUSH
9524: LD_INT 63
9526: PPUSH
9527: LD_INT 75
9529: PPUSH
9530: CALL_OW 111
9534: GO 9754
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 257
9545: PUSH
9546: LD_INT 3
9548: EQUAL
9549: PUSH
9550: LD_VAR 0 4
9554: PPUSH
9555: CALL_OW 310
9559: NOT
9560: AND
9561: PUSH
9562: LD_VAR 0 4
9566: PPUSH
9567: CALL_OW 314
9571: NOT
9572: AND
9573: IFFALSE 9626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9575: LD_VAR 0 4
9579: PPUSH
9580: LD_EXP 32
9584: PPUSH
9585: LD_INT 58
9587: PUSH
9588: EMPTY
9589: LIST
9590: PUSH
9591: LD_INT 24
9593: PUSH
9594: LD_INT 1000
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PPUSH
9610: LD_VAR 0 4
9614: PPUSH
9615: CALL_OW 74
9619: PPUSH
9620: CALL_OW 120
9624: GO 9754
// if GetFuel ( i ) < 100 then
9626: LD_VAR 0 4
9630: PPUSH
9631: CALL_OW 261
9635: PUSH
9636: LD_INT 100
9638: LESS
9639: IFFALSE 9655
// SetFuel ( defenders_list , 100 ) else
9641: LD_EXP 32
9645: PPUSH
9646: LD_INT 100
9648: PPUSH
9649: CALL_OW 240
9653: GO 9754
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9655: LD_VAR 0 4
9659: PPUSH
9660: CALL_OW 263
9664: PUSH
9665: LD_INT 1
9667: EQUAL
9668: PUSH
9669: LD_VAR 0 4
9673: PPUSH
9674: CALL_OW 256
9678: PUSH
9679: LD_INT 990
9681: LESS
9682: AND
9683: IFFALSE 9754
// begin veh := i ;
9685: LD_ADDR_VAR 0 7
9689: PUSH
9690: LD_VAR 0 4
9694: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: LD_VAR 0 4
9704: PPUSH
9705: CALL_OW 311
9709: ST_TO_ADDR
// if veh then
9710: LD_VAR 0 7
9714: IFFALSE 9754
// begin ComMoveXY ( i , 63 , 75 ) ;
9716: LD_VAR 0 4
9720: PPUSH
9721: LD_INT 63
9723: PPUSH
9724: LD_INT 75
9726: PPUSH
9727: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9731: LD_VAR 0 7
9735: PPUSH
9736: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9740: LD_VAR 0 8
9744: PPUSH
9745: LD_VAR 0 7
9749: PPUSH
9750: CALL_OW 189
// end ; end ; end ;
9754: GO 9483
9756: POP
9757: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9758: LD_ADDR_VAR 0 6
9762: PUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: LD_INT 22
9770: PUSH
9771: LD_VAR 0 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: PPUSH
9783: CALL_OW 70
9787: ST_TO_ADDR
// if tmp and defenders_list then
9788: LD_VAR 0 6
9792: PUSH
9793: LD_EXP 32
9797: AND
9798: IFFALSE 9967
// for i in defenders_list do
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_EXP 32
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9965
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9813: LD_VAR 0 4
9817: PPUSH
9818: CALL_OW 257
9822: PUSH
9823: LD_INT 3
9825: EQUAL
9826: PUSH
9827: LD_VAR 0 4
9831: PPUSH
9832: CALL_OW 310
9836: NOT
9837: AND
9838: IFFALSE 9877
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9840: LD_VAR 0 4
9844: PPUSH
9845: LD_EXP 32
9849: PPUSH
9850: LD_INT 58
9852: PUSH
9853: EMPTY
9854: LIST
9855: PPUSH
9856: CALL_OW 72
9860: PPUSH
9861: LD_VAR 0 4
9865: PPUSH
9866: CALL_OW 74
9870: PPUSH
9871: CALL_OW 120
9875: GO 9963
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9877: LD_VAR 0 4
9881: PPUSH
9882: CALL_OW 314
9886: NOT
9887: PUSH
9888: LD_VAR 0 4
9892: PPUSH
9893: LD_VAR 0 2
9897: PPUSH
9898: CALL_OW 308
9902: AND
9903: IFFALSE 9931
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9905: LD_VAR 0 4
9909: PPUSH
9910: LD_VAR 0 6
9914: PPUSH
9915: LD_VAR 0 4
9919: PPUSH
9920: CALL_OW 74
9924: PPUSH
9925: CALL_OW 115
9929: GO 9963
// if not IsInArea ( i , defenseArea ) then
9931: LD_VAR 0 4
9935: PPUSH
9936: LD_VAR 0 2
9940: PPUSH
9941: CALL_OW 308
9945: NOT
9946: IFFALSE 9963
// ComMoveXY ( i , 63 , 75 ) ;
9948: LD_VAR 0 4
9952: PPUSH
9953: LD_INT 63
9955: PPUSH
9956: LD_INT 75
9958: PPUSH
9959: CALL_OW 111
// end ;
9963: GO 9810
9965: POP
9966: POP
// end ;
9967: LD_VAR 0 3
9971: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
9976: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9977: LD_INT 22
9979: PUSH
9980: LD_VAR 0 1
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 21
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_VAR 0 3
10012: LESSEQUAL
10013: IFFALSE 10121
// begin for i = 1 to vehCount do
10015: LD_ADDR_VAR 0 9
10019: PUSH
10020: DOUBLE
10021: LD_INT 1
10023: DEC
10024: ST_TO_ADDR
10025: LD_VAR 0 3
10029: PUSH
10030: FOR_TO
10031: IFFALSE 10119
// begin weapon = weaponTab [ i ] ;
10033: LD_ADDR_VAR 0 10
10037: PUSH
10038: LD_VAR 0 4
10042: PUSH
10043: LD_VAR 0 9
10047: ARRAY
10048: ST_TO_ADDR
// if weapon = 46 then
10049: LD_VAR 0 10
10053: PUSH
10054: LD_INT 46
10056: EQUAL
10057: IFFALSE 10088
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
10059: LD_VAR 0 2
10063: PPUSH
10064: LD_INT 24
10066: PPUSH
10067: LD_VAR 0 5
10071: PPUSH
10072: LD_VAR 0 6
10076: PPUSH
10077: LD_VAR 0 10
10081: PPUSH
10082: CALL_OW 185
// end else
10086: GO 10117
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_VAR 0 7
10097: PPUSH
10098: LD_VAR 0 5
10102: PPUSH
10103: LD_VAR 0 6
10107: PPUSH
10108: LD_VAR 0 10
10112: PPUSH
10113: CALL_OW 185
// end ; end ;
10117: GO 10030
10119: POP
10120: POP
// end ; end ;
10121: LD_VAR 0 8
10125: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10126: LD_INT 0
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10132: LD_ADDR_VAR 0 8
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 3
10161: PUSH
10162: LD_INT 24
10164: PUSH
10165: LD_INT 650
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: ST_TO_ADDR
// if damageVehicles > 0 then
10186: LD_VAR 0 8
10190: PUSH
10191: LD_INT 0
10193: GREATER
10194: IFFALSE 10215
// ComMoveXY ( damageVehicles , repX , repY ) ;
10196: LD_VAR 0 8
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_VAR 0 4
10210: PPUSH
10211: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10215: LD_VAR 0 8
10219: PPUSH
10220: LD_INT 95
10222: PUSH
10223: LD_VAR 0 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: LD_INT 58
10237: PUSH
10238: EMPTY
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PPUSH
10249: CALL_OW 72
10253: PUSH
10254: LD_INT 0
10256: GREATER
10257: IFFALSE 10324
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10259: LD_ADDR_VAR 0 6
10263: PUSH
10264: LD_VAR 0 8
10268: PPUSH
10269: LD_INT 95
10271: PUSH
10272: LD_VAR 0 2
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 3
10283: PUSH
10284: LD_INT 58
10286: PUSH
10287: EMPTY
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: PUSH
10303: FOR_IN
10304: IFFALSE 10322
// ComExitVehicle ( UnitsInside ( i ) ) ;
10306: LD_VAR 0 6
10310: PPUSH
10311: CALL_OW 313
10315: PPUSH
10316: CALL_OW 121
10320: GO 10303
10322: POP
10323: POP
// end ;
10324: LD_VAR 0 5
10328: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10329: LD_INT 0
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10338: LD_ADDR_VAR 0 8
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 1
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 24
10367: PUSH
10368: LD_INT 250
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 58
10380: PUSH
10381: EMPTY
10382: LIST
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: LD_INT 34
10389: PUSH
10390: LD_INT 43
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 44
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 34
10409: PUSH
10410: LD_INT 46
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 , 7 ] [ Difficulty ] then
10439: LD_INT 22
10441: PUSH
10442: LD_VAR 0 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 24
10463: PUSH
10464: LD_INT 1000
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: LD_INT 58
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 43
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 44
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 34
10505: PUSH
10506: LD_INT 46
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: LD_INT 6
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: LD_INT 7
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_OWVAR 67
10557: ARRAY
10558: GREATEREQUAL
10559: IFFALSE 11124
// repeat wait ( 0 0$1 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10568: LD_ADDR_VAR 0 8
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_VAR 0 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 24
10597: PUSH
10598: LD_INT 250
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 34
10610: PUSH
10611: LD_INT 43
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 34
10620: PUSH
10621: LD_INT 44
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 34
10630: PUSH
10631: LD_INT 46
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 3
10646: PUSH
10647: LD_INT 58
10649: PUSH
10650: EMPTY
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10669: LD_INT 22
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 95
10683: PUSH
10684: LD_VAR 0 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 69
10701: NOT
10702: PUSH
10703: LD_VAR 0 11
10707: PUSH
10708: LD_INT 0
10710: EQUAL
10711: AND
10712: IFFALSE 10767
// for i := 1 to wayX do
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: DOUBLE
10720: LD_INT 1
10722: DEC
10723: ST_TO_ADDR
10724: LD_VAR 0 3
10728: PUSH
10729: FOR_TO
10730: IFFALSE 10765
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10732: LD_VAR 0 8
10736: PPUSH
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 6
10746: ARRAY
10747: PPUSH
10748: LD_VAR 0 4
10752: PUSH
10753: LD_VAR 0 6
10757: ARRAY
10758: PPUSH
10759: CALL_OW 114
10763: GO 10729
10765: POP
10766: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10767: LD_INT 22
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 95
10781: PUSH
10782: LD_VAR 0 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: IFFALSE 11023
// begin seeEnemy = 1 ;
10801: LD_ADDR_VAR 0 11
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// for j in vehiclesOK do
10809: LD_ADDR_VAR 0 7
10813: PUSH
10814: LD_VAR 0 8
10818: PUSH
10819: FOR_IN
10820: IFFALSE 11021
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10822: LD_ADDR_VAR 0 9
10826: PUSH
10827: LD_INT 81
10829: PUSH
10830: LD_VAR 0 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 101
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: PPUSH
10858: LD_VAR 0 7
10862: PPUSH
10863: CALL_OW 74
10867: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10868: LD_ADDR_VAR 0 10
10872: PUSH
10873: LD_INT 81
10875: PUSH
10876: LD_VAR 0 1
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 101
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 59
10900: PUSH
10901: EMPTY
10902: LIST
10903: PUSH
10904: LD_INT 21
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 21
10916: PUSH
10917: LD_INT 2
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: PPUSH
10943: LD_VAR 0 7
10947: PPUSH
10948: CALL_OW 74
10952: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10953: LD_VAR 0 7
10957: PPUSH
10958: LD_VAR 0 9
10962: PPUSH
10963: CALL_OW 296
10967: PUSH
10968: LD_INT 8
10970: PLUS
10971: PUSH
10972: LD_VAR 0 7
10976: PPUSH
10977: LD_VAR 0 10
10981: PPUSH
10982: CALL_OW 296
10986: LESS
10987: IFFALSE 11005
// ComAttackUnit ( j , target1 ) else
10989: LD_VAR 0 7
10993: PPUSH
10994: LD_VAR 0 9
10998: PPUSH
10999: CALL_OW 115
11003: GO 11019
// ComAttackUnit ( j , target2 ) ;
11005: LD_VAR 0 7
11009: PPUSH
11010: LD_VAR 0 10
11014: PPUSH
11015: CALL_OW 115
// end ;
11019: GO 10819
11021: POP
11022: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11023: LD_INT 22
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 24
11047: PUSH
11048: LD_INT 250
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 43
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 34
11070: PUSH
11071: LD_INT 44
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 34
11080: PUSH
11081: LD_INT 46
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 58
11099: PUSH
11100: EMPTY
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PUSH
11119: LD_INT 0
11121: EQUAL
11122: IFFALSE 10561
// seeEnemy = 0 ;
11124: LD_ADDR_VAR 0 11
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// end ;
11132: LD_VAR 0 5
11136: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11137: LD_INT 0
11139: PPUSH
11140: PPUSH
11141: PPUSH
11142: PPUSH
11143: PPUSH
11144: PPUSH
// repeat wait ( 0 0$1 ) ;
11145: LD_INT 35
11147: PPUSH
11148: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11152: LD_ADDR_VAR 0 7
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 24
11181: PUSH
11182: LD_INT 651
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: ST_TO_ADDR
// for j in vehiclesOK do
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_VAR 0 7
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11411
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_INT 81
11219: PUSH
11220: LD_VAR 0 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 101
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: PPUSH
11248: LD_VAR 0 4
11252: PPUSH
11253: CALL_OW 74
11257: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11258: LD_ADDR_VAR 0 6
11262: PUSH
11263: LD_INT 81
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 101
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 59
11290: PUSH
11291: EMPTY
11292: LIST
11293: PUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 21
11306: PUSH
11307: LD_INT 2
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: PPUSH
11333: LD_VAR 0 4
11337: PPUSH
11338: CALL_OW 74
11342: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11343: LD_VAR 0 4
11347: PPUSH
11348: LD_VAR 0 5
11352: PPUSH
11353: CALL_OW 296
11357: PUSH
11358: LD_INT 8
11360: PLUS
11361: PUSH
11362: LD_VAR 0 4
11366: PPUSH
11367: LD_VAR 0 6
11371: PPUSH
11372: CALL_OW 296
11376: LESS
11377: IFFALSE 11395
// ComAttackUnit ( j , target1 ) else
11379: LD_VAR 0 4
11383: PPUSH
11384: LD_VAR 0 5
11388: PPUSH
11389: CALL_OW 115
11393: GO 11409
// ComAttackUnit ( j , target2 ) ;
11395: LD_VAR 0 4
11399: PPUSH
11400: LD_VAR 0 6
11404: PPUSH
11405: CALL_OW 115
// end ;
11409: GO 11209
11411: POP
11412: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11413: LD_INT 22
11415: PUSH
11416: LD_VAR 0 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 24
11437: PUSH
11438: LD_INT 250
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: LD_INT 0
11457: EQUAL
11458: IFFALSE 11145
// end ;
11460: LD_VAR 0 2
11464: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11465: LD_INT 0
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
11472: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_VAR 0 2
11482: PPUSH
11483: CALL_OW 313
11487: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11488: LD_ADDR_VAR 0 9
11492: PUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 22
11500: PUSH
11501: LD_VAR 0 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 25
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 24
11522: PUSH
11523: LD_INT 750
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 3
11532: PUSH
11533: LD_INT 54
11535: PUSH
11536: EMPTY
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 70
11553: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_INT 22
11566: PUSH
11567: LD_VAR 0 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 21
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 3
11588: PUSH
11589: LD_INT 24
11591: PUSH
11592: LD_INT 1000
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: PPUSH
11611: CALL_OW 70
11615: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11616: LD_VAR 0 6
11620: NOT
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_VAR 0 1
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 24
11646: PUSH
11647: LD_INT 250
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: NOT
11664: AND
11665: IFFALSE 11669
// exit ;
11667: GO 11866
// if buildings_list > 0 and engineerOkInside then
11669: LD_VAR 0 6
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 8
11682: AND
11683: IFFALSE 11709
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11685: LD_VAR 0 8
11689: PPUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 72
11704: PPUSH
11705: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11709: LD_VAR 0 6
11713: PUSH
11714: LD_INT 0
11716: GREATER
11717: PUSH
11718: LD_VAR 0 9
11722: PUSH
11723: LD_INT 0
11725: GREATER
11726: AND
11727: IFFALSE 11747
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11729: LD_VAR 0 9
11733: PPUSH
11734: LD_VAR 0 6
11738: PUSH
11739: LD_INT 1
11741: ARRAY
11742: PPUSH
11743: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11747: LD_VAR 0 6
11751: PUSH
11752: LD_INT 0
11754: EQUAL
11755: PUSH
11756: LD_VAR 0 4
11760: PUSH
11761: LD_INT 0
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_VAR 0 9
11770: PUSH
11771: LD_INT 0
11773: GREATER
11774: AND
11775: IFFALSE 11791
// ComEnterUnit ( engineerOkOutside , building ) ;
11777: LD_VAR 0 9
11781: PPUSH
11782: LD_VAR 0 2
11786: PPUSH
11787: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11791: LD_VAR 0 9
11795: PUSH
11796: LD_INT 0
11798: GREATER
11799: PUSH
11800: LD_VAR 0 6
11804: PUSH
11805: LD_INT 0
11807: EQUAL
11808: AND
11809: PUSH
11810: LD_VAR 0 4
11814: PUSH
11815: LD_INT 0
11817: GREATER
11818: AND
11819: IFFALSE 11866
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11821: LD_VAR 0 9
11825: PPUSH
11826: LD_VAR 0 4
11830: PUSH
11831: LD_INT 1
11833: ARRAY
11834: PPUSH
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 2
11842: ARRAY
11843: PPUSH
11844: LD_VAR 0 4
11848: PUSH
11849: LD_INT 3
11851: ARRAY
11852: PPUSH
11853: LD_VAR 0 4
11857: PUSH
11858: LD_INT 4
11860: ARRAY
11861: PPUSH
11862: CALL_OW 145
// end ;
11866: LD_VAR 0 5
11870: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11871: LD_INT 0
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11882: LD_ADDR_VAR 0 6
11886: PUSH
11887: LD_INT 22
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 25
11901: PUSH
11902: LD_INT 4
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 23
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 24
11921: PUSH
11922: LD_INT 251
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11940: LD_ADDR_VAR 0 7
11944: PUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 25
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 50
11984: PUSH
11985: EMPTY
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PPUSH
11994: CALL_OW 70
11998: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11999: LD_ADDR_VAR 0 10
12003: PUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 22
12011: PUSH
12012: LD_VAR 0 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 3
12033: PUSH
12034: LD_INT 25
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 3
12050: PUSH
12051: LD_INT 24
12053: PUSH
12054: LD_INT 750
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 70
12075: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12076: LD_ADDR_VAR 0 11
12080: PUSH
12081: LD_VAR 0 2
12085: PPUSH
12086: LD_INT 22
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 21
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 3
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: LD_INT 24
12130: PUSH
12131: LD_INT 1000
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL_OW 70
12152: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12153: LD_VAR 0 10
12157: NOT
12158: PUSH
12159: LD_VAR 0 11
12163: NOT
12164: AND
12165: PUSH
12166: LD_VAR 0 6
12170: NOT
12171: AND
12172: IFFALSE 12176
// exit ;
12174: GO 12410
// if damageUnits > 0 and sci_list > 0 then
12176: LD_VAR 0 10
12180: PUSH
12181: LD_INT 0
12183: GREATER
12184: PUSH
12185: LD_VAR 0 6
12189: PUSH
12190: LD_INT 0
12192: GREATER
12193: AND
12194: IFFALSE 12210
// ComMoveToArea ( damageUnits , healArea ) ;
12196: LD_VAR 0 10
12200: PPUSH
12201: LD_VAR 0 2
12205: PPUSH
12206: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12210: LD_VAR 0 11
12214: PUSH
12215: LD_INT 0
12217: GREATER
12218: PUSH
12219: LD_VAR 0 6
12223: PUSH
12224: LD_INT 0
12226: GREATER
12227: AND
12228: IFFALSE 12239
// ComExitBuilding ( sci_list ) ;
12230: LD_VAR 0 6
12234: PPUSH
12235: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12239: LD_VAR 0 11
12243: PUSH
12244: LD_INT 0
12246: GREATER
12247: PUSH
12248: LD_VAR 0 7
12252: PUSH
12253: LD_INT 0
12255: GREATER
12256: AND
12257: IFFALSE 12277
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12259: LD_VAR 0 7
12263: PPUSH
12264: LD_VAR 0 11
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12277: LD_VAR 0 10
12281: PUSH
12282: LD_INT 0
12284: EQUAL
12285: PUSH
12286: LD_VAR 0 11
12290: PUSH
12291: LD_INT 0
12293: EQUAL
12294: AND
12295: PUSH
12296: LD_VAR 0 7
12300: PUSH
12301: LD_INT 0
12303: GREATER
12304: AND
12305: IFFALSE 12410
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12307: LD_ADDR_VAR 0 12
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_VAR 0 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 3
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 8
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12354: LD_ADDR_VAR 0 13
12358: PUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_VAR 0 12
12366: PPUSH
12367: CALL_OW 12
12371: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12372: LD_VAR 0 7
12376: PPUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 60
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 72
12394: PPUSH
12395: LD_VAR 0 12
12399: PUSH
12400: LD_VAR 0 13
12404: ARRAY
12405: PPUSH
12406: CALL_OW 120
// end ; end ;
12410: LD_VAR 0 5
12414: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12422: LD_ADDR_VAR 0 6
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_VAR 0 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: LD_INT 30
12444: PUSH
12445: LD_INT 31
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 30
12454: PUSH
12455: LD_INT 32
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 33
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 5
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12509: LD_ADDR_VAR 0 7
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_VAR 0 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 58
12538: PUSH
12539: EMPTY
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12552: LD_VAR 0 6
12556: PUSH
12557: LD_INT 0
12559: GREATER
12560: PUSH
12561: LD_VAR 0 7
12565: PUSH
12566: LD_INT 0
12568: GREATER
12569: AND
12570: IFFALSE 12640
// begin for i in turretsList do
12572: LD_ADDR_VAR 0 4
12576: PUSH
12577: LD_VAR 0 6
12581: PUSH
12582: FOR_IN
12583: IFFALSE 12638
// begin for j in enemyBuildings do
12585: LD_ADDR_VAR 0 5
12589: PUSH
12590: LD_VAR 0 7
12594: PUSH
12595: FOR_IN
12596: IFFALSE 12634
// begin if GetDistUnits ( i , j ) < 20 then
12598: LD_VAR 0 4
12602: PPUSH
12603: LD_VAR 0 5
12607: PPUSH
12608: CALL_OW 296
12612: PUSH
12613: LD_INT 20
12615: LESS
12616: IFFALSE 12632
// begin ComAttackUnit ( i , j ) ;
12618: LD_VAR 0 4
12622: PPUSH
12623: LD_VAR 0 5
12627: PPUSH
12628: CALL_OW 115
// end ; end ;
12632: GO 12595
12634: POP
12635: POP
// end ;
12636: GO 12582
12638: POP
12639: POP
// end ; end ;
12640: LD_VAR 0 3
12644: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12645: LD_INT 0
12647: PPUSH
12648: PPUSH
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
// for i = 1 to medicCount do
12658: LD_ADDR_VAR 0 14
12662: PUSH
12663: DOUBLE
12664: LD_INT 1
12666: DEC
12667: ST_TO_ADDR
12668: LD_VAR 0 7
12672: PUSH
12673: FOR_TO
12674: IFFALSE 12756
// begin uc_side = side ;
12676: LD_ADDR_OWVAR 20
12680: PUSH
12681: LD_VAR 0 1
12685: ST_TO_ADDR
// uc_nation = nation ;
12686: LD_ADDR_OWVAR 21
12690: PUSH
12691: LD_VAR 0 2
12695: ST_TO_ADDR
// hc_name =  ;
12696: LD_ADDR_OWVAR 26
12700: PUSH
12701: LD_STRING 
12703: ST_TO_ADDR
// hc_gallery =  ;
12704: LD_ADDR_OWVAR 33
12708: PUSH
12709: LD_STRING 
12711: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12712: LD_INT 0
12714: PPUSH
12715: LD_INT 4
12717: PPUSH
12718: LD_VAR 0 8
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 16
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12737: LD_VAR 0 16
12741: PPUSH
12742: LD_VAR 0 9
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: CALL_OW 49
// end ;
12754: GO 12673
12756: POP
12757: POP
// for i = 1 to soldierCount do
12758: LD_ADDR_VAR 0 14
12762: PUSH
12763: DOUBLE
12764: LD_INT 1
12766: DEC
12767: ST_TO_ADDR
12768: LD_VAR 0 3
12772: PUSH
12773: FOR_TO
12774: IFFALSE 12856
// begin uc_side = side ;
12776: LD_ADDR_OWVAR 20
12780: PUSH
12781: LD_VAR 0 1
12785: ST_TO_ADDR
// uc_nation = nation ;
12786: LD_ADDR_OWVAR 21
12790: PUSH
12791: LD_VAR 0 2
12795: ST_TO_ADDR
// hc_name =  ;
12796: LD_ADDR_OWVAR 26
12800: PUSH
12801: LD_STRING 
12803: ST_TO_ADDR
// hc_gallery =  ;
12804: LD_ADDR_OWVAR 33
12808: PUSH
12809: LD_STRING 
12811: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12812: LD_INT 0
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: LD_VAR 0 8
12822: PPUSH
12823: CALL_OW 380
// un = CreateHuman ;
12827: LD_ADDR_VAR 0 16
12831: PUSH
12832: CALL_OW 44
12836: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12837: LD_VAR 0 16
12841: PPUSH
12842: LD_VAR 0 9
12846: PPUSH
12847: LD_INT 0
12849: PPUSH
12850: CALL_OW 49
// end ;
12854: GO 12773
12856: POP
12857: POP
// for i = 1 to sniperCount do
12858: LD_ADDR_VAR 0 14
12862: PUSH
12863: DOUBLE
12864: LD_INT 1
12866: DEC
12867: ST_TO_ADDR
12868: LD_VAR 0 4
12872: PUSH
12873: FOR_TO
12874: IFFALSE 12956
// begin uc_side = side ;
12876: LD_ADDR_OWVAR 20
12880: PUSH
12881: LD_VAR 0 1
12885: ST_TO_ADDR
// uc_nation = nation ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_VAR 0 2
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// hc_gallery =  ;
12904: LD_ADDR_OWVAR 33
12908: PUSH
12909: LD_STRING 
12911: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12912: LD_INT 0
12914: PPUSH
12915: LD_INT 5
12917: PPUSH
12918: LD_VAR 0 8
12922: PPUSH
12923: CALL_OW 380
// un = CreateHuman ;
12927: LD_ADDR_VAR 0 16
12931: PUSH
12932: CALL_OW 44
12936: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12937: LD_VAR 0 16
12941: PPUSH
12942: LD_VAR 0 9
12946: PPUSH
12947: LD_INT 0
12949: PPUSH
12950: CALL_OW 49
// end ;
12954: GO 12873
12956: POP
12957: POP
// for i = 1 to bazookCount do
12958: LD_ADDR_VAR 0 14
12962: PUSH
12963: DOUBLE
12964: LD_INT 1
12966: DEC
12967: ST_TO_ADDR
12968: LD_VAR 0 5
12972: PUSH
12973: FOR_TO
12974: IFFALSE 13056
// begin uc_side = side ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_VAR 0 1
12985: ST_TO_ADDR
// uc_nation = nation ;
12986: LD_ADDR_OWVAR 21
12990: PUSH
12991: LD_VAR 0 2
12995: ST_TO_ADDR
// hc_name =  ;
12996: LD_ADDR_OWVAR 26
13000: PUSH
13001: LD_STRING 
13003: ST_TO_ADDR
// hc_gallery =  ;
13004: LD_ADDR_OWVAR 33
13008: PUSH
13009: LD_STRING 
13011: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
13012: LD_INT 0
13014: PPUSH
13015: LD_INT 9
13017: PPUSH
13018: LD_VAR 0 8
13022: PPUSH
13023: CALL_OW 380
// un = CreateHuman ;
13027: LD_ADDR_VAR 0 16
13031: PUSH
13032: CALL_OW 44
13036: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13037: LD_VAR 0 16
13041: PPUSH
13042: LD_VAR 0 9
13046: PPUSH
13047: LD_INT 0
13049: PPUSH
13050: CALL_OW 49
// end ;
13054: GO 12973
13056: POP
13057: POP
// for i = 1 to mortalCount do
13058: LD_ADDR_VAR 0 14
13062: PUSH
13063: DOUBLE
13064: LD_INT 1
13066: DEC
13067: ST_TO_ADDR
13068: LD_VAR 0 6
13072: PUSH
13073: FOR_TO
13074: IFFALSE 13156
// begin uc_side = side ;
13076: LD_ADDR_OWVAR 20
13080: PUSH
13081: LD_VAR 0 1
13085: ST_TO_ADDR
// uc_nation = nation ;
13086: LD_ADDR_OWVAR 21
13090: PUSH
13091: LD_VAR 0 2
13095: ST_TO_ADDR
// hc_name =  ;
13096: LD_ADDR_OWVAR 26
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hc_gallery =  ;
13104: LD_ADDR_OWVAR 33
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13112: LD_INT 0
13114: PPUSH
13115: LD_INT 8
13117: PPUSH
13118: LD_VAR 0 8
13122: PPUSH
13123: CALL_OW 380
// un = CreateHuman ;
13127: LD_ADDR_VAR 0 16
13131: PUSH
13132: CALL_OW 44
13136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13137: LD_VAR 0 16
13141: PPUSH
13142: LD_VAR 0 9
13146: PPUSH
13147: LD_INT 0
13149: PPUSH
13150: CALL_OW 49
// end ;
13154: GO 13073
13156: POP
13157: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13158: LD_ADDR_VAR 0 19
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_VAR 0 1
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 25
13190: PUSH
13191: LD_INT 5
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 25
13200: PUSH
13201: LD_INT 8
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 25
13210: PUSH
13211: LD_INT 9
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13234: LD_ADDR_VAR 0 18
13238: PUSH
13239: LD_INT 22
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 4
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// for i in medic_list do
13270: LD_ADDR_VAR 0 14
13274: PUSH
13275: LD_VAR 0 18
13279: PUSH
13280: FOR_IN
13281: IFFALSE 13299
// ComMoveToArea ( i , healArea ) ;
13283: LD_VAR 0 14
13287: PPUSH
13288: LD_VAR 0 10
13292: PPUSH
13293: CALL_OW 113
13297: GO 13280
13299: POP
13300: POP
// if strategy = 1 then
13301: LD_VAR 0 12
13305: PUSH
13306: LD_INT 1
13308: EQUAL
13309: IFFALSE 13855
// begin repeat wait ( 0 0$3 ) ;
13311: LD_INT 105
13313: PPUSH
13314: CALL_OW 67
// for i in soldiersOK_list do
13318: LD_ADDR_VAR 0 14
13322: PUSH
13323: LD_VAR 0 19
13327: PUSH
13328: FOR_IN
13329: IFFALSE 13393
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13331: LD_VAR 0 14
13335: PPUSH
13336: LD_INT 91
13338: PPUSH
13339: LD_INT 63
13341: PPUSH
13342: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13346: LD_VAR 0 14
13350: PPUSH
13351: LD_INT 101
13353: PPUSH
13354: LD_INT 53
13356: PPUSH
13357: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13361: LD_VAR 0 14
13365: PPUSH
13366: LD_INT 75
13368: PPUSH
13369: LD_INT 23
13371: PPUSH
13372: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13376: LD_VAR 0 14
13380: PPUSH
13381: LD_INT 78
13383: PPUSH
13384: LD_INT 8
13386: PPUSH
13387: CALL_OW 174
// end ;
13391: GO 13328
13393: POP
13394: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13395: LD_INT 12
13397: PPUSH
13398: LD_INT 22
13400: PUSH
13401: LD_VAR 0 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: PUSH
13415: LD_INT 2
13417: GREATER
13418: IFFALSE 13311
// repeat wait ( 0 0$1 ) ;
13420: LD_INT 35
13422: PPUSH
13423: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13427: LD_ADDR_VAR 0 17
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_VAR 0 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: LD_INT 3
13449: PUSH
13450: LD_INT 24
13452: PUSH
13453: LD_INT 550
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 24
13466: PUSH
13467: LD_INT 250
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13488: LD_ADDR_VAR 0 19
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 25
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 8
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 9
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 24
13557: PUSH
13558: LD_INT 1000
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: ST_TO_ADDR
// if medicCount > 0 then
13575: LD_VAR 0 7
13579: PUSH
13580: LD_INT 0
13582: GREATER
13583: IFFALSE 13657
// begin if damageUnit_list > 0 then
13585: LD_VAR 0 17
13589: PUSH
13590: LD_INT 0
13592: GREATER
13593: IFFALSE 13657
// begin for i in damageUnit_list do
13595: LD_ADDR_VAR 0 14
13599: PUSH
13600: LD_VAR 0 17
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13655
// begin ComMoveToArea ( i , healArea ) ;
13608: LD_VAR 0 14
13612: PPUSH
13613: LD_VAR 0 10
13617: PPUSH
13618: CALL_OW 113
// for j in medic_list do
13622: LD_ADDR_VAR 0 15
13626: PUSH
13627: LD_VAR 0 18
13631: PUSH
13632: FOR_IN
13633: IFFALSE 13651
// AddComHeal ( j , i ) ;
13635: LD_VAR 0 15
13639: PPUSH
13640: LD_VAR 0 14
13644: PPUSH
13645: CALL_OW 188
13649: GO 13632
13651: POP
13652: POP
// end ;
13653: GO 13605
13655: POP
13656: POP
// end ; end ; for i in soldiersOK_list do
13657: LD_ADDR_VAR 0 14
13661: PUSH
13662: LD_VAR 0 19
13666: PUSH
13667: FOR_IN
13668: IFFALSE 13844
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13670: LD_ADDR_VAR 0 22
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_VAR 0 11
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: LD_VAR 0 14
13696: PPUSH
13697: CALL_OW 74
13701: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13702: LD_ADDR_VAR 0 23
13706: PUSH
13707: LD_INT 22
13709: PUSH
13710: LD_VAR 0 11
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: LD_INT 59
13724: PUSH
13725: EMPTY
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 21
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: PPUSH
13761: CALL_OW 69
13765: PPUSH
13766: LD_VAR 0 14
13770: PPUSH
13771: CALL_OW 74
13775: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13776: LD_VAR 0 14
13780: PPUSH
13781: LD_VAR 0 22
13785: PPUSH
13786: CALL_OW 296
13790: PUSH
13791: LD_INT 6
13793: PLUS
13794: PUSH
13795: LD_VAR 0 14
13799: PPUSH
13800: LD_VAR 0 23
13804: PPUSH
13805: CALL_OW 296
13809: LESS
13810: IFFALSE 13828
// begin ComAttackUnit ( i , target1 ) ;
13812: LD_VAR 0 14
13816: PPUSH
13817: LD_VAR 0 22
13821: PPUSH
13822: CALL_OW 115
// end else
13826: GO 13842
// begin ComAttackUnit ( i , target2 ) ;
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_VAR 0 23
13837: PPUSH
13838: CALL_OW 115
// end ; end ;
13842: GO 13667
13844: POP
13845: POP
// until soldiersOK_list = [ ] ;
13846: LD_VAR 0 19
13850: PUSH
13851: EMPTY
13852: EQUAL
13853: IFFALSE 13420
// end ; if strategy = 2 then
13855: LD_VAR 0 12
13859: PUSH
13860: LD_INT 2
13862: EQUAL
13863: IFFALSE 14379
// begin repeat wait ( 0 0$1 ) ;
13865: LD_INT 35
13867: PPUSH
13868: CALL_OW 67
// for i in soldiersOK_list do
13872: LD_ADDR_VAR 0 14
13876: PUSH
13877: LD_VAR 0 19
13881: PUSH
13882: FOR_IN
13883: IFFALSE 13917
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13885: LD_VAR 0 14
13889: PPUSH
13890: LD_INT 91
13892: PPUSH
13893: LD_INT 63
13895: PPUSH
13896: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13900: LD_VAR 0 14
13904: PPUSH
13905: LD_INT 75
13907: PPUSH
13908: LD_INT 33
13910: PPUSH
13911: CALL_OW 174
// end ;
13915: GO 13882
13917: POP
13918: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13919: LD_INT 13
13921: PPUSH
13922: LD_INT 22
13924: PUSH
13925: LD_VAR 0 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 70
13938: PUSH
13939: LD_INT 2
13941: GREATER
13942: IFFALSE 13865
// repeat wait ( 0 0$3 ) ;
13944: LD_INT 105
13946: PPUSH
13947: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13951: LD_ADDR_VAR 0 17
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_VAR 0 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: LD_INT 3
13973: PUSH
13974: LD_INT 24
13976: PUSH
13977: LD_INT 550
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 24
13990: PUSH
13991: LD_INT 250
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 69
14011: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14012: LD_ADDR_VAR 0 19
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_VAR 0 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 25
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 25
14044: PUSH
14045: LD_INT 5
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 8
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 25
14064: PUSH
14065: LD_INT 9
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 24
14081: PUSH
14082: LD_INT 1000
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if medicCount > 0 then
14099: LD_VAR 0 7
14103: PUSH
14104: LD_INT 0
14106: GREATER
14107: IFFALSE 14181
// begin if damageUnit_list > 0 then
14109: LD_VAR 0 17
14113: PUSH
14114: LD_INT 0
14116: GREATER
14117: IFFALSE 14181
// begin for i in damageUnit_list do
14119: LD_ADDR_VAR 0 14
14123: PUSH
14124: LD_VAR 0 17
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14179
// begin ComMoveToArea ( i , healArea ) ;
14132: LD_VAR 0 14
14136: PPUSH
14137: LD_VAR 0 10
14141: PPUSH
14142: CALL_OW 113
// for j in medic_list do
14146: LD_ADDR_VAR 0 15
14150: PUSH
14151: LD_VAR 0 18
14155: PUSH
14156: FOR_IN
14157: IFFALSE 14175
// AddComHeal ( j , i ) ;
14159: LD_VAR 0 15
14163: PPUSH
14164: LD_VAR 0 14
14168: PPUSH
14169: CALL_OW 188
14173: GO 14156
14175: POP
14176: POP
// end ;
14177: GO 14129
14179: POP
14180: POP
// end ; end ; for i in soldiersOK_list do
14181: LD_ADDR_VAR 0 14
14185: PUSH
14186: LD_VAR 0 19
14190: PUSH
14191: FOR_IN
14192: IFFALSE 14368
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14194: LD_ADDR_VAR 0 22
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_VAR 0 11
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: PPUSH
14216: LD_VAR 0 14
14220: PPUSH
14221: CALL_OW 74
14225: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14226: LD_ADDR_VAR 0 23
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_VAR 0 11
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 59
14248: PUSH
14249: EMPTY
14250: LIST
14251: PUSH
14252: LD_INT 21
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 21
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: PPUSH
14290: LD_VAR 0 14
14294: PPUSH
14295: CALL_OW 74
14299: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14300: LD_VAR 0 14
14304: PPUSH
14305: LD_VAR 0 22
14309: PPUSH
14310: CALL_OW 296
14314: PUSH
14315: LD_INT 6
14317: PLUS
14318: PUSH
14319: LD_VAR 0 14
14323: PPUSH
14324: LD_VAR 0 23
14328: PPUSH
14329: CALL_OW 296
14333: LESS
14334: IFFALSE 14352
// begin ComAttackUnit ( i , target1 ) ;
14336: LD_VAR 0 14
14340: PPUSH
14341: LD_VAR 0 22
14345: PPUSH
14346: CALL_OW 115
// end else
14350: GO 14366
// begin ComAttackUnit ( i , target2 ) ;
14352: LD_VAR 0 14
14356: PPUSH
14357: LD_VAR 0 23
14361: PPUSH
14362: CALL_OW 115
// end ; end ;
14366: GO 14191
14368: POP
14369: POP
// until soldiersOK_list = [ ] ;
14370: LD_VAR 0 19
14374: PUSH
14375: EMPTY
14376: EQUAL
14377: IFFALSE 13944
// end ; if strategy = 3 then
14379: LD_VAR 0 12
14383: PUSH
14384: LD_INT 3
14386: EQUAL
14387: IFFALSE 14933
// begin repeat wait ( 0 0$3 ) ;
14389: LD_INT 105
14391: PPUSH
14392: CALL_OW 67
// for i in soldiersOK_list do
14396: LD_ADDR_VAR 0 14
14400: PUSH
14401: LD_VAR 0 19
14405: PUSH
14406: FOR_IN
14407: IFFALSE 14471
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14409: LD_VAR 0 14
14413: PPUSH
14414: LD_INT 63
14416: PPUSH
14417: LD_INT 71
14419: PPUSH
14420: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14424: LD_VAR 0 14
14428: PPUSH
14429: LD_INT 35
14431: PPUSH
14432: LD_INT 44
14434: PPUSH
14435: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14439: LD_VAR 0 14
14443: PPUSH
14444: LD_INT 23
14446: PPUSH
14447: LD_INT 18
14449: PPUSH
14450: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14454: LD_VAR 0 14
14458: PPUSH
14459: LD_INT 26
14461: PPUSH
14462: LD_INT 12
14464: PPUSH
14465: CALL_OW 174
// end ;
14469: GO 14406
14471: POP
14472: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14473: LD_INT 14
14475: PPUSH
14476: LD_INT 22
14478: PUSH
14479: LD_VAR 0 1
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 70
14492: PUSH
14493: LD_INT 2
14495: GREATER
14496: IFFALSE 14389
// repeat wait ( 0 0$1 ) ;
14498: LD_INT 35
14500: PPUSH
14501: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14505: LD_ADDR_VAR 0 17
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_VAR 0 1
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: LD_INT 3
14527: PUSH
14528: LD_INT 24
14530: PUSH
14531: LD_INT 550
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 24
14544: PUSH
14545: LD_INT 250
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 69
14565: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14566: LD_ADDR_VAR 0 19
14570: PUSH
14571: LD_INT 22
14573: PUSH
14574: LD_VAR 0 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 25
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 25
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 25
14608: PUSH
14609: LD_INT 8
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 9
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 24
14635: PUSH
14636: LD_INT 1000
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PPUSH
14648: CALL_OW 69
14652: ST_TO_ADDR
// if medicCount > 0 then
14653: LD_VAR 0 7
14657: PUSH
14658: LD_INT 0
14660: GREATER
14661: IFFALSE 14735
// begin if damageUnit_list > 0 then
14663: LD_VAR 0 17
14667: PUSH
14668: LD_INT 0
14670: GREATER
14671: IFFALSE 14735
// begin for i in damageUnit_list do
14673: LD_ADDR_VAR 0 14
14677: PUSH
14678: LD_VAR 0 17
14682: PUSH
14683: FOR_IN
14684: IFFALSE 14733
// begin ComMoveToArea ( i , healArea ) ;
14686: LD_VAR 0 14
14690: PPUSH
14691: LD_VAR 0 10
14695: PPUSH
14696: CALL_OW 113
// for j in medic_list do
14700: LD_ADDR_VAR 0 15
14704: PUSH
14705: LD_VAR 0 18
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14729
// AddComHeal ( j , i ) ;
14713: LD_VAR 0 15
14717: PPUSH
14718: LD_VAR 0 14
14722: PPUSH
14723: CALL_OW 188
14727: GO 14710
14729: POP
14730: POP
// end ;
14731: GO 14683
14733: POP
14734: POP
// end ; end ; for i in soldiersOK_list do
14735: LD_ADDR_VAR 0 14
14739: PUSH
14740: LD_VAR 0 19
14744: PUSH
14745: FOR_IN
14746: IFFALSE 14922
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14748: LD_ADDR_VAR 0 22
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_VAR 0 11
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: PPUSH
14770: LD_VAR 0 14
14774: PPUSH
14775: CALL_OW 74
14779: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14780: LD_ADDR_VAR 0 23
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 11
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: LD_INT 59
14802: PUSH
14803: EMPTY
14804: LIST
14805: PUSH
14806: LD_INT 21
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 21
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: PPUSH
14844: LD_VAR 0 14
14848: PPUSH
14849: CALL_OW 74
14853: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14854: LD_VAR 0 14
14858: PPUSH
14859: LD_VAR 0 22
14863: PPUSH
14864: CALL_OW 296
14868: PUSH
14869: LD_INT 6
14871: PLUS
14872: PUSH
14873: LD_VAR 0 14
14877: PPUSH
14878: LD_VAR 0 23
14882: PPUSH
14883: CALL_OW 296
14887: LESS
14888: IFFALSE 14906
// begin ComAttackUnit ( i , target1 ) ;
14890: LD_VAR 0 14
14894: PPUSH
14895: LD_VAR 0 22
14899: PPUSH
14900: CALL_OW 115
// end else
14904: GO 14920
// begin ComAttackUnit ( i , target2 ) ;
14906: LD_VAR 0 14
14910: PPUSH
14911: LD_VAR 0 23
14915: PPUSH
14916: CALL_OW 115
// end ; end ;
14920: GO 14745
14922: POP
14923: POP
// until soldiersOK_list = [ ] ;
14924: LD_VAR 0 19
14928: PUSH
14929: EMPTY
14930: EQUAL
14931: IFFALSE 14498
// end ; end ;
14933: LD_VAR 0 13
14937: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
// amChassisTab = [ ] ;
14951: LD_ADDR_VAR 0 19
14955: PUSH
14956: EMPTY
14957: ST_TO_ADDR
// arChassisTab = [ ] ;
14958: LD_ADDR_VAR 0 18
14962: PUSH
14963: EMPTY
14964: ST_TO_ADDR
// ruChassisTab = [ ] ;
14965: LD_ADDR_VAR 0 17
14969: PUSH
14970: EMPTY
14971: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14972: LD_INT 35
14974: PPUSH
14975: CALL_OW 67
// if nation = 1 then
14979: LD_VAR 0 5
14983: PUSH
14984: LD_INT 1
14986: EQUAL
14987: IFFALSE 15478
// begin uc_side = side ;
14989: LD_ADDR_OWVAR 20
14993: PUSH
14994: LD_VAR 0 2
14998: ST_TO_ADDR
// uc_nation = nation ;
14999: LD_ADDR_OWVAR 21
15003: PUSH
15004: LD_VAR 0 5
15008: ST_TO_ADDR
// vc_engine = vehengine ;
15009: LD_ADDR_OWVAR 39
15013: PUSH
15014: LD_VAR 0 6
15018: ST_TO_ADDR
// vc_control = vehcontrol ;
15019: LD_ADDR_OWVAR 38
15023: PUSH
15024: LD_VAR 0 7
15028: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15029: LD_ADDR_OWVAR 40
15033: PUSH
15034: LD_VAR 0 10
15038: PUSH
15039: LD_INT 1
15041: PPUSH
15042: LD_VAR 0 10
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: ST_TO_ADDR
// for j = 1 to AMWeapon do
15053: LD_ADDR_VAR 0 14
15057: PUSH
15058: DOUBLE
15059: LD_INT 1
15061: DEC
15062: ST_TO_ADDR
15063: LD_VAR 0 10
15067: PUSH
15068: FOR_TO
15069: IFFALSE 15370
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15071: LD_VAR 0 10
15075: PUSH
15076: LD_VAR 0 14
15080: ARRAY
15081: PUSH
15082: LD_INT 2
15084: EQUAL
15085: PUSH
15086: LD_VAR 0 10
15090: PUSH
15091: LD_VAR 0 14
15095: ARRAY
15096: PUSH
15097: LD_INT 3
15099: EQUAL
15100: OR
15101: IFFALSE 15154
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15103: LD_ADDR_VAR 0 19
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 4
15119: PUSH
15120: LD_INT 5
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15130: LD_ADDR_OWVAR 37
15134: PUSH
15135: LD_VAR 0 19
15139: PUSH
15140: LD_INT 1
15142: PPUSH
15143: LD_VAR 0 19
15147: PPUSH
15148: CALL_OW 12
15152: ARRAY
15153: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15154: LD_VAR 0 10
15158: PUSH
15159: LD_VAR 0 14
15163: ARRAY
15164: PUSH
15165: LD_INT 4
15167: EQUAL
15168: PUSH
15169: LD_VAR 0 10
15173: PUSH
15174: LD_VAR 0 14
15178: ARRAY
15179: PUSH
15180: LD_INT 5
15182: EQUAL
15183: OR
15184: PUSH
15185: LD_VAR 0 10
15189: PUSH
15190: LD_VAR 0 14
15194: ARRAY
15195: PUSH
15196: LD_INT 9
15198: EQUAL
15199: OR
15200: PUSH
15201: LD_VAR 0 10
15205: PUSH
15206: LD_VAR 0 14
15210: ARRAY
15211: PUSH
15212: LD_INT 11
15214: EQUAL
15215: OR
15216: PUSH
15217: LD_VAR 0 10
15221: PUSH
15222: LD_VAR 0 14
15226: ARRAY
15227: PUSH
15228: LD_INT 7
15230: EQUAL
15231: OR
15232: IFFALSE 15281
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15234: LD_ADDR_VAR 0 19
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 3
15244: PUSH
15245: LD_INT 4
15247: PUSH
15248: LD_INT 5
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15257: LD_ADDR_OWVAR 37
15261: PUSH
15262: LD_VAR 0 19
15266: PUSH
15267: LD_INT 1
15269: PPUSH
15270: LD_VAR 0 19
15274: PPUSH
15275: CALL_OW 12
15279: ARRAY
15280: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15281: LD_VAR 0 10
15285: PUSH
15286: LD_VAR 0 14
15290: ARRAY
15291: PUSH
15292: LD_INT 8
15294: EQUAL
15295: PUSH
15296: LD_VAR 0 10
15300: PUSH
15301: LD_VAR 0 14
15305: ARRAY
15306: PUSH
15307: LD_INT 6
15309: EQUAL
15310: OR
15311: PUSH
15312: LD_VAR 0 10
15316: PUSH
15317: LD_VAR 0 14
15321: ARRAY
15322: PUSH
15323: LD_INT 10
15325: EQUAL
15326: OR
15327: IFFALSE 15368
// begin amChassisTab = [ 4 , 5 ] ;
15329: LD_ADDR_VAR 0 19
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15344: LD_ADDR_OWVAR 37
15348: PUSH
15349: LD_VAR 0 19
15353: PUSH
15354: LD_INT 1
15356: PPUSH
15357: LD_VAR 0 19
15361: PPUSH
15362: CALL_OW 12
15366: ARRAY
15367: ST_TO_ADDR
// end ; end ;
15368: GO 15068
15370: POP
15371: POP
// veh = CreateVehicle ;
15372: LD_ADDR_VAR 0 16
15376: PUSH
15377: CALL_OW 45
15381: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15382: LD_VAR 0 16
15386: PPUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 49
// if vehControl = 1 then
15399: LD_VAR 0 7
15403: PUSH
15404: LD_INT 1
15406: EQUAL
15407: IFFALSE 15464
// begin hc_gallery =  ;
15409: LD_ADDR_OWVAR 33
15413: PUSH
15414: LD_STRING 
15416: ST_TO_ADDR
// hc_name =  ;
15417: LD_ADDR_OWVAR 26
15421: PUSH
15422: LD_STRING 
15424: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15425: LD_INT 0
15427: PPUSH
15428: LD_INT 3
15430: PPUSH
15431: LD_VAR 0 4
15435: PPUSH
15436: CALL_OW 380
// un = CreateHuman ;
15440: LD_ADDR_VAR 0 15
15444: PUSH
15445: CALL_OW 44
15449: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15450: LD_VAR 0 15
15454: PPUSH
15455: LD_VAR 0 16
15459: PPUSH
15460: CALL_OW 52
// end ; i = i + 1 ;
15464: LD_ADDR_VAR 0 13
15468: PUSH
15469: LD_VAR 0 13
15473: PUSH
15474: LD_INT 1
15476: PLUS
15477: ST_TO_ADDR
// end ; if nation = 2 then
15478: LD_VAR 0 5
15482: PUSH
15483: LD_INT 2
15485: EQUAL
15486: IFFALSE 15910
// begin uc_side = side ;
15488: LD_ADDR_OWVAR 20
15492: PUSH
15493: LD_VAR 0 2
15497: ST_TO_ADDR
// uc_nation = nation ;
15498: LD_ADDR_OWVAR 21
15502: PUSH
15503: LD_VAR 0 5
15507: ST_TO_ADDR
// vc_engine = vehengine ;
15508: LD_ADDR_OWVAR 39
15512: PUSH
15513: LD_VAR 0 6
15517: ST_TO_ADDR
// vc_control = vehcontrol ;
15518: LD_ADDR_OWVAR 38
15522: PUSH
15523: LD_VAR 0 7
15527: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15528: LD_ADDR_OWVAR 40
15532: PUSH
15533: LD_VAR 0 9
15537: PUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_VAR 0 9
15545: PPUSH
15546: CALL_OW 12
15550: ARRAY
15551: ST_TO_ADDR
// for j = 1 to ARWeapons do
15552: LD_ADDR_VAR 0 14
15556: PUSH
15557: DOUBLE
15558: LD_INT 1
15560: DEC
15561: ST_TO_ADDR
15562: LD_VAR 0 9
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15802
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15570: LD_VAR 0 9
15574: PUSH
15575: LD_VAR 0 14
15579: ARRAY
15580: PUSH
15581: LD_INT 24
15583: EQUAL
15584: PUSH
15585: LD_VAR 0 9
15589: PUSH
15590: LD_VAR 0 14
15594: ARRAY
15595: PUSH
15596: LD_INT 22
15598: EQUAL
15599: OR
15600: PUSH
15601: LD_VAR 0 9
15605: PUSH
15606: LD_VAR 0 14
15610: ARRAY
15611: PUSH
15612: LD_INT 23
15614: EQUAL
15615: OR
15616: PUSH
15617: LD_VAR 0 9
15621: PUSH
15622: LD_VAR 0 14
15626: ARRAY
15627: PUSH
15628: LD_INT 30
15630: EQUAL
15631: OR
15632: IFFALSE 15681
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15634: LD_ADDR_VAR 0 18
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: LD_INT 12
15644: PUSH
15645: LD_INT 13
15647: PUSH
15648: LD_INT 14
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15657: LD_ADDR_OWVAR 37
15661: PUSH
15662: LD_VAR 0 18
15666: PUSH
15667: LD_INT 1
15669: PPUSH
15670: LD_VAR 0 18
15674: PPUSH
15675: CALL_OW 12
15679: ARRAY
15680: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15681: LD_VAR 0 9
15685: PUSH
15686: LD_VAR 0 14
15690: ARRAY
15691: PUSH
15692: LD_INT 29
15694: EQUAL
15695: PUSH
15696: LD_VAR 0 9
15700: PUSH
15701: LD_VAR 0 14
15705: ARRAY
15706: PUSH
15707: LD_INT 28
15709: EQUAL
15710: OR
15711: PUSH
15712: LD_VAR 0 9
15716: PUSH
15717: LD_VAR 0 14
15721: ARRAY
15722: PUSH
15723: LD_INT 27
15725: EQUAL
15726: OR
15727: PUSH
15728: LD_VAR 0 9
15732: PUSH
15733: LD_VAR 0 14
15737: ARRAY
15738: PUSH
15739: LD_INT 26
15741: EQUAL
15742: OR
15743: PUSH
15744: LD_VAR 0 9
15748: PUSH
15749: LD_VAR 0 14
15753: ARRAY
15754: PUSH
15755: LD_INT 25
15757: EQUAL
15758: OR
15759: IFFALSE 15800
// begin arChassisTab = [ 13 , 14 ] ;
15761: LD_ADDR_VAR 0 18
15765: PUSH
15766: LD_INT 13
15768: PUSH
15769: LD_INT 14
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15776: LD_ADDR_OWVAR 37
15780: PUSH
15781: LD_VAR 0 18
15785: PUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 18
15793: PPUSH
15794: CALL_OW 12
15798: ARRAY
15799: ST_TO_ADDR
// end ; end ;
15800: GO 15567
15802: POP
15803: POP
// veh = CreateVehicle ;
15804: LD_ADDR_VAR 0 16
15808: PUSH
15809: CALL_OW 45
15813: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15814: LD_VAR 0 16
15818: PPUSH
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 0
15826: PPUSH
15827: CALL_OW 49
// if vehcontrol = 1 then
15831: LD_VAR 0 7
15835: PUSH
15836: LD_INT 1
15838: EQUAL
15839: IFFALSE 15896
// begin hc_gallery =  ;
15841: LD_ADDR_OWVAR 33
15845: PUSH
15846: LD_STRING 
15848: ST_TO_ADDR
// hc_name =  ;
15849: LD_ADDR_OWVAR 26
15853: PUSH
15854: LD_STRING 
15856: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 3
15862: PPUSH
15863: LD_VAR 0 4
15867: PPUSH
15868: CALL_OW 380
// un = CreateHuman ;
15872: LD_ADDR_VAR 0 15
15876: PUSH
15877: CALL_OW 44
15881: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15882: LD_VAR 0 15
15886: PPUSH
15887: LD_VAR 0 16
15891: PPUSH
15892: CALL_OW 52
// end ; i = i + 1 ;
15896: LD_ADDR_VAR 0 13
15900: PUSH
15901: LD_VAR 0 13
15905: PUSH
15906: LD_INT 1
15908: PLUS
15909: ST_TO_ADDR
// end ; if nation = 3 then
15910: LD_VAR 0 5
15914: PUSH
15915: LD_INT 3
15917: EQUAL
15918: IFFALSE 16310
// begin uc_side = side ;
15920: LD_ADDR_OWVAR 20
15924: PUSH
15925: LD_VAR 0 2
15929: ST_TO_ADDR
// uc_nation = nation ;
15930: LD_ADDR_OWVAR 21
15934: PUSH
15935: LD_VAR 0 5
15939: ST_TO_ADDR
// vc_engine = vehengine ;
15940: LD_ADDR_OWVAR 39
15944: PUSH
15945: LD_VAR 0 6
15949: ST_TO_ADDR
// vc_control = vehcontrol ;
15950: LD_ADDR_OWVAR 38
15954: PUSH
15955: LD_VAR 0 7
15959: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15960: LD_ADDR_OWVAR 40
15964: PUSH
15965: LD_VAR 0 8
15969: PUSH
15970: LD_INT 1
15972: PPUSH
15973: LD_VAR 0 8
15977: PPUSH
15978: CALL_OW 12
15982: ARRAY
15983: ST_TO_ADDR
// for j = 1 to RuWeapons do
15984: LD_ADDR_VAR 0 14
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_VAR 0 8
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16202
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16002: LD_VAR 0 8
16006: PUSH
16007: LD_VAR 0 14
16011: ARRAY
16012: PUSH
16013: LD_INT 42
16015: EQUAL
16016: PUSH
16017: LD_VAR 0 8
16021: PUSH
16022: LD_VAR 0 14
16026: ARRAY
16027: PUSH
16028: LD_INT 43
16030: EQUAL
16031: OR
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: LD_VAR 0 14
16042: ARRAY
16043: PUSH
16044: LD_INT 44
16046: EQUAL
16047: OR
16048: PUSH
16049: LD_VAR 0 8
16053: PUSH
16054: LD_VAR 0 14
16058: ARRAY
16059: PUSH
16060: LD_INT 45
16062: EQUAL
16063: OR
16064: PUSH
16065: LD_VAR 0 8
16069: PUSH
16070: LD_VAR 0 14
16074: ARRAY
16075: PUSH
16076: LD_INT 49
16078: EQUAL
16079: OR
16080: IFFALSE 16129
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16082: LD_ADDR_VAR 0 17
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 23
16095: PUSH
16096: LD_INT 24
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16105: LD_ADDR_OWVAR 37
16109: PUSH
16110: LD_VAR 0 17
16114: PUSH
16115: LD_INT 1
16117: PPUSH
16118: LD_VAR 0 17
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16129: LD_VAR 0 8
16133: PUSH
16134: LD_VAR 0 14
16138: ARRAY
16139: PUSH
16140: LD_INT 46
16142: EQUAL
16143: PUSH
16144: LD_VAR 0 8
16148: PUSH
16149: LD_VAR 0 14
16153: ARRAY
16154: PUSH
16155: LD_INT 47
16157: EQUAL
16158: OR
16159: IFFALSE 16200
// begin ruChassisTab = [ 23 , 24 ] ;
16161: LD_ADDR_VAR 0 17
16165: PUSH
16166: LD_INT 23
16168: PUSH
16169: LD_INT 24
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16176: LD_ADDR_OWVAR 37
16180: PUSH
16181: LD_VAR 0 17
16185: PUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 17
16193: PPUSH
16194: CALL_OW 12
16198: ARRAY
16199: ST_TO_ADDR
// end ; end ;
16200: GO 15999
16202: POP
16203: POP
// veh = CreateVehicle ;
16204: LD_ADDR_VAR 0 16
16208: PUSH
16209: CALL_OW 45
16213: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16214: LD_VAR 0 16
16218: PPUSH
16219: LD_VAR 0 1
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// if vehcontrol = 1 then
16231: LD_VAR 0 7
16235: PUSH
16236: LD_INT 1
16238: EQUAL
16239: IFFALSE 16296
// begin hc_gallery =  ;
16241: LD_ADDR_OWVAR 33
16245: PUSH
16246: LD_STRING 
16248: ST_TO_ADDR
// hc_name =  ;
16249: LD_ADDR_OWVAR 26
16253: PUSH
16254: LD_STRING 
16256: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16257: LD_INT 0
16259: PPUSH
16260: LD_INT 3
16262: PPUSH
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 380
// un = CreateHuman ;
16272: LD_ADDR_VAR 0 15
16276: PUSH
16277: CALL_OW 44
16281: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16282: LD_VAR 0 15
16286: PPUSH
16287: LD_VAR 0 16
16291: PPUSH
16292: CALL_OW 52
// end ; i = i + 1 ;
16296: LD_ADDR_VAR 0 13
16300: PUSH
16301: LD_VAR 0 13
16305: PUSH
16306: LD_INT 1
16308: PLUS
16309: ST_TO_ADDR
// end ; until i = vehCount ;
16310: LD_VAR 0 13
16314: PUSH
16315: LD_VAR 0 3
16319: EQUAL
16320: IFFALSE 14972
// repeat wait ( 0 0$1 ) ;
16322: LD_INT 35
16324: PPUSH
16325: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16329: LD_ADDR_VAR 0 20
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_VAR 0 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 21
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 24
16358: PUSH
16359: LD_INT 250
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: PPUSH
16371: CALL_OW 69
16375: ST_TO_ADDR
// if vehicleOK_list > 0 then
16376: LD_VAR 0 20
16380: PUSH
16381: LD_INT 0
16383: GREATER
16384: IFFALSE 16575
// begin for i in vehicleOK_list do
16386: LD_ADDR_VAR 0 13
16390: PUSH
16391: LD_VAR 0 20
16395: PUSH
16396: FOR_IN
16397: IFFALSE 16573
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16399: LD_ADDR_VAR 0 21
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_VAR 0 11
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: PPUSH
16421: LD_VAR 0 13
16425: PPUSH
16426: CALL_OW 74
16430: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16431: LD_ADDR_VAR 0 22
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 11
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 59
16453: PUSH
16454: EMPTY
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 21
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PPUSH
16495: LD_VAR 0 13
16499: PPUSH
16500: CALL_OW 74
16504: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16505: LD_VAR 0 13
16509: PPUSH
16510: LD_VAR 0 21
16514: PPUSH
16515: CALL_OW 296
16519: PUSH
16520: LD_INT 6
16522: PLUS
16523: PUSH
16524: LD_VAR 0 13
16528: PPUSH
16529: LD_VAR 0 22
16533: PPUSH
16534: CALL_OW 296
16538: LESS
16539: IFFALSE 16557
// begin ComAttackUnit ( i , target1 ) ;
16541: LD_VAR 0 13
16545: PPUSH
16546: LD_VAR 0 21
16550: PPUSH
16551: CALL_OW 115
// end else
16555: GO 16571
// begin ComAttackUnit ( i , target2 ) ;
16557: LD_VAR 0 13
16561: PPUSH
16562: LD_VAR 0 22
16566: PPUSH
16567: CALL_OW 115
// end ; end ;
16571: GO 16396
16573: POP
16574: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16575: LD_INT 22
16577: PUSH
16578: LD_VAR 0 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 24
16599: PUSH
16600: LD_INT 250
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_INT 0
16619: EQUAL
16620: IFFALSE 16322
// end ;
16622: LD_VAR 0 12
16626: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16627: LD_INT 0
16629: PPUSH
16630: PPUSH
16631: PPUSH
16632: PPUSH
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16637: LD_ADDR_VAR 0 7
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_VAR 0 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 24
16662: PUSH
16663: LD_INT 550
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 24
16676: PUSH
16677: LD_INT 250
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16698: LD_ADDR_VAR 0 8
16702: PUSH
16703: LD_INT 22
16705: PUSH
16706: LD_VAR 0 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 25
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 25
16730: PUSH
16731: LD_INT 5
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 25
16740: PUSH
16741: LD_INT 8
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 25
16750: PUSH
16751: LD_INT 9
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 24
16767: PUSH
16768: LD_INT 1000
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: PPUSH
16780: CALL_OW 69
16784: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16785: LD_ADDR_VAR 0 9
16789: PUSH
16790: LD_INT 22
16792: PUSH
16793: LD_VAR 0 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 25
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PPUSH
16816: CALL_OW 69
16820: ST_TO_ADDR
// if medicCount > 0 then
16821: LD_VAR 0 9
16825: PUSH
16826: LD_INT 0
16828: GREATER
16829: IFFALSE 16903
// begin if damageUnit_list > 0 then
16831: LD_VAR 0 7
16835: PUSH
16836: LD_INT 0
16838: GREATER
16839: IFFALSE 16903
// begin for i in damageUnit_list do
16841: LD_ADDR_VAR 0 5
16845: PUSH
16846: LD_VAR 0 7
16850: PUSH
16851: FOR_IN
16852: IFFALSE 16901
// begin ComMoveToArea ( i , healArea ) ;
16854: LD_VAR 0 5
16858: PPUSH
16859: LD_VAR 0 2
16863: PPUSH
16864: CALL_OW 113
// for j in medicCount do
16868: LD_ADDR_VAR 0 6
16872: PUSH
16873: LD_VAR 0 9
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16897
// AddComHeal ( j , i ) ;
16881: LD_VAR 0 6
16885: PPUSH
16886: LD_VAR 0 5
16890: PPUSH
16891: CALL_OW 188
16895: GO 16878
16897: POP
16898: POP
// end ;
16899: GO 16851
16901: POP
16902: POP
// end ; end ; if soldiersOK_list > 0 then
16903: LD_VAR 0 8
16907: PUSH
16908: LD_INT 0
16910: GREATER
16911: IFFALSE 17102
// begin for i in soldiersOK_list do
16913: LD_ADDR_VAR 0 5
16917: PUSH
16918: LD_VAR 0 8
16922: PUSH
16923: FOR_IN
16924: IFFALSE 17100
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16926: LD_ADDR_VAR 0 10
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_VAR 0 3
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: CALL_OW 69
16947: PPUSH
16948: LD_VAR 0 5
16952: PPUSH
16953: CALL_OW 74
16957: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16958: LD_ADDR_VAR 0 11
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_VAR 0 3
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: LD_INT 59
16980: PUSH
16981: EMPTY
16982: LIST
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: PPUSH
17022: LD_VAR 0 5
17026: PPUSH
17027: CALL_OW 74
17031: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17032: LD_VAR 0 5
17036: PPUSH
17037: LD_VAR 0 10
17041: PPUSH
17042: CALL_OW 296
17046: PUSH
17047: LD_INT 8
17049: PLUS
17050: PUSH
17051: LD_VAR 0 5
17055: PPUSH
17056: LD_VAR 0 11
17060: PPUSH
17061: CALL_OW 296
17065: LESS
17066: IFFALSE 17084
// begin ComAttackUnit ( i , target1 ) ;
17068: LD_VAR 0 5
17072: PPUSH
17073: LD_VAR 0 10
17077: PPUSH
17078: CALL_OW 115
// end else
17082: GO 17098
// begin ComAttackUnit ( i , target2 ) ;
17084: LD_VAR 0 5
17088: PPUSH
17089: LD_VAR 0 11
17093: PPUSH
17094: CALL_OW 115
// end ; end ;
17098: GO 16923
17100: POP
17101: POP
// end ; end ;
17102: LD_VAR 0 4
17106: RET
// export function GetDriverVehicle ( unit ) ; begin
17107: LD_INT 0
17109: PPUSH
// if not unit then
17110: LD_VAR 0 1
17114: NOT
17115: IFFALSE 17119
// exit ;
17117: GO 17157
// result := IsInUnit ( unit ) ;
17119: LD_ADDR_VAR 0 2
17123: PUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 310
17133: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 247
17143: PUSH
17144: LD_INT 2
17146: NONEQUAL
17147: IFFALSE 17157
// result := 0 ;
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_INT 0
17156: ST_TO_ADDR
// end ;
17157: LD_VAR 0 2
17161: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17162: LD_INT 0
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
// result := false ;
17173: LD_ADDR_VAR 0 7
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17181: LD_VAR 0 1
17185: NOT
17186: PUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 266
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: IN
17207: NOT
17208: OR
17209: PUSH
17210: LD_VAR 0 2
17214: NOT
17215: OR
17216: PUSH
17217: LD_VAR 0 5
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: IN
17248: NOT
17249: OR
17250: PUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 4
17260: PPUSH
17261: CALL_OW 488
17265: NOT
17266: OR
17267: IFFALSE 17271
// exit ;
17269: GO 17952
// pom := GetBase ( bdepot ) ;
17271: LD_ADDR_VAR 0 10
17275: PUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 274
17285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17286: LD_ADDR_VAR 0 11
17290: PUSH
17291: LD_VAR 0 2
17295: PPUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 248
17305: PPUSH
17306: CALL_OW 450
17310: ST_TO_ADDR
// if check_cost then
17311: LD_VAR 0 6
17315: IFFALSE 17392
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17317: LD_VAR 0 10
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 275
17329: PUSH
17330: LD_VAR 0 11
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: GREATEREQUAL
17339: PUSH
17340: LD_VAR 0 10
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 275
17352: PUSH
17353: LD_VAR 0 11
17357: PUSH
17358: LD_INT 2
17360: ARRAY
17361: GREATEREQUAL
17362: AND
17363: PUSH
17364: LD_VAR 0 10
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: CALL_OW 275
17376: PUSH
17377: LD_VAR 0 11
17381: PUSH
17382: LD_INT 3
17384: ARRAY
17385: GREATEREQUAL
17386: AND
17387: NOT
17388: IFFALSE 17392
// exit ;
17390: GO 17952
// if GetBType ( bdepot ) = b_depot then
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 266
17401: PUSH
17402: LD_INT 0
17404: EQUAL
17405: IFFALSE 17417
// dist := 28 else
17407: LD_ADDR_VAR 0 14
17411: PUSH
17412: LD_INT 28
17414: ST_TO_ADDR
17415: GO 17425
// dist := 36 ;
17417: LD_ADDR_VAR 0 14
17421: PUSH
17422: LD_INT 36
17424: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17425: LD_VAR 0 1
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 297
17444: PUSH
17445: LD_VAR 0 14
17449: GREATER
17450: IFFALSE 17454
// exit ;
17452: GO 17952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17454: LD_ADDR_VAR 0 12
17458: PUSH
17459: LD_VAR 0 2
17463: PPUSH
17464: LD_VAR 0 3
17468: PPUSH
17469: LD_VAR 0 4
17473: PPUSH
17474: LD_VAR 0 5
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 248
17488: PPUSH
17489: LD_INT 0
17491: PPUSH
17492: CALL 58368 0 6
17496: ST_TO_ADDR
// if not hexes then
17497: LD_VAR 0 12
17501: NOT
17502: IFFALSE 17506
// exit ;
17504: GO 17952
// hex := GetHexInfo ( x , y ) ;
17506: LD_ADDR_VAR 0 15
17510: PUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_VAR 0 4
17520: PPUSH
17521: CALL_OW 546
17525: ST_TO_ADDR
// if hex [ 1 ] then
17526: LD_VAR 0 15
17530: PUSH
17531: LD_INT 1
17533: ARRAY
17534: IFFALSE 17538
// exit ;
17536: GO 17952
// height := hex [ 2 ] ;
17538: LD_ADDR_VAR 0 13
17542: PUSH
17543: LD_VAR 0 15
17547: PUSH
17548: LD_INT 2
17550: ARRAY
17551: ST_TO_ADDR
// for i = 1 to hexes do
17552: LD_ADDR_VAR 0 8
17556: PUSH
17557: DOUBLE
17558: LD_INT 1
17560: DEC
17561: ST_TO_ADDR
17562: LD_VAR 0 12
17566: PUSH
17567: FOR_TO
17568: IFFALSE 17896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17570: LD_VAR 0 12
17574: PUSH
17575: LD_VAR 0 8
17579: ARRAY
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: LD_VAR 0 12
17589: PUSH
17590: LD_VAR 0 8
17594: ARRAY
17595: PUSH
17596: LD_INT 2
17598: ARRAY
17599: PPUSH
17600: CALL_OW 488
17604: NOT
17605: IFFALSE 17609
// continue ;
17607: GO 17567
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17609: LD_ADDR_VAR 0 9
17613: PUSH
17614: LD_VAR 0 12
17618: PUSH
17619: LD_VAR 0 8
17623: ARRAY
17624: PUSH
17625: LD_INT 1
17627: ARRAY
17628: PPUSH
17629: LD_VAR 0 12
17633: PUSH
17634: LD_VAR 0 8
17638: ARRAY
17639: PUSH
17640: LD_INT 2
17642: ARRAY
17643: PPUSH
17644: CALL_OW 546
17648: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17649: LD_VAR 0 9
17653: PUSH
17654: LD_INT 1
17656: ARRAY
17657: PUSH
17658: LD_VAR 0 9
17662: PUSH
17663: LD_INT 2
17665: ARRAY
17666: PUSH
17667: LD_VAR 0 13
17671: PUSH
17672: LD_INT 2
17674: PLUS
17675: GREATER
17676: OR
17677: PUSH
17678: LD_VAR 0 9
17682: PUSH
17683: LD_INT 2
17685: ARRAY
17686: PUSH
17687: LD_VAR 0 13
17691: PUSH
17692: LD_INT 2
17694: MINUS
17695: LESS
17696: OR
17697: PUSH
17698: LD_VAR 0 9
17702: PUSH
17703: LD_INT 3
17705: ARRAY
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 8
17712: PUSH
17713: LD_INT 9
17715: PUSH
17716: LD_INT 10
17718: PUSH
17719: LD_INT 11
17721: PUSH
17722: LD_INT 12
17724: PUSH
17725: LD_INT 13
17727: PUSH
17728: LD_INT 16
17730: PUSH
17731: LD_INT 17
17733: PUSH
17734: LD_INT 18
17736: PUSH
17737: LD_INT 19
17739: PUSH
17740: LD_INT 20
17742: PUSH
17743: LD_INT 21
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: IN
17761: NOT
17762: OR
17763: PUSH
17764: LD_VAR 0 9
17768: PUSH
17769: LD_INT 5
17771: ARRAY
17772: NOT
17773: OR
17774: PUSH
17775: LD_VAR 0 9
17779: PUSH
17780: LD_INT 6
17782: ARRAY
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 7
17792: PUSH
17793: LD_INT 9
17795: PUSH
17796: LD_INT 10
17798: PUSH
17799: LD_INT 11
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: IN
17810: NOT
17811: OR
17812: PUSH
17813: LD_VAR 0 12
17817: PUSH
17818: LD_VAR 0 8
17822: ARRAY
17823: PUSH
17824: LD_INT 1
17826: ARRAY
17827: PPUSH
17828: LD_VAR 0 12
17832: PUSH
17833: LD_VAR 0 8
17837: ARRAY
17838: PUSH
17839: LD_INT 2
17841: ARRAY
17842: PPUSH
17843: CALL_OW 428
17847: PUSH
17848: LD_INT 0
17850: GREATER
17851: OR
17852: PUSH
17853: LD_VAR 0 12
17857: PUSH
17858: LD_VAR 0 8
17862: ARRAY
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PPUSH
17868: LD_VAR 0 12
17872: PUSH
17873: LD_VAR 0 8
17877: ARRAY
17878: PUSH
17879: LD_INT 2
17881: ARRAY
17882: PPUSH
17883: CALL_OW 351
17887: OR
17888: IFFALSE 17894
// exit ;
17890: POP
17891: POP
17892: GO 17952
// end ;
17894: GO 17567
17896: POP
17897: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17898: LD_VAR 0 2
17902: PUSH
17903: LD_INT 29
17905: PUSH
17906: LD_INT 30
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: IN
17913: PUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_VAR 0 1
17928: PPUSH
17929: CALL_OW 255
17933: PPUSH
17934: CALL_OW 440
17938: NOT
17939: AND
17940: IFFALSE 17944
// exit ;
17942: GO 17952
// result := true ;
17944: LD_ADDR_VAR 0 7
17948: PUSH
17949: LD_INT 1
17951: ST_TO_ADDR
// end ; end_of_file
17952: LD_VAR 0 7
17956: RET
// every 1 do var i ;
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
// begin Video ( true ) ;
17963: LD_INT 1
17965: PPUSH
17966: CALL 81136 0 1
// CenterOnXY ( 53 , 40 ) ;
17970: LD_INT 53
17972: PPUSH
17973: LD_INT 40
17975: PPUSH
17976: CALL_OW 84
// wait ( 0 0$5 ) ;
17980: LD_INT 175
17982: PPUSH
17983: CALL_OW 67
// if gammaCommander = 1 then
17987: LD_EXP 12
17991: PUSH
17992: LD_INT 1
17994: EQUAL
17995: IFFALSE 18009
// Say ( Donaldson , D1-Don-1 ) ;
17997: LD_EXP 3
18001: PPUSH
18002: LD_STRING D1-Don-1
18004: PPUSH
18005: CALL_OW 88
// if gammaCommander = 2 then
18009: LD_EXP 12
18013: PUSH
18014: LD_INT 2
18016: EQUAL
18017: IFFALSE 18031
// Say ( Brown , D1-Brown-1 ) ;
18019: LD_EXP 2
18023: PPUSH
18024: LD_STRING D1-Brown-1
18026: PPUSH
18027: CALL_OW 88
// if gammaCommander = 3 then
18031: LD_EXP 12
18035: PUSH
18036: LD_INT 3
18038: EQUAL
18039: IFFALSE 18053
// Say ( Houten , D1-VanH-1 ) ;
18041: LD_EXP 13
18045: PPUSH
18046: LD_STRING D1-VanH-1
18048: PPUSH
18049: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
18053: LD_EXP 22
18057: PPUSH
18058: LD_STRING D1-Har-1
18060: PPUSH
18061: CALL_OW 94
// if gammaCommander = 1 then
18065: LD_EXP 12
18069: PUSH
18070: LD_INT 1
18072: EQUAL
18073: IFFALSE 18087
// Say ( Donaldson , D1-Don-2 ) ;
18075: LD_EXP 3
18079: PPUSH
18080: LD_STRING D1-Don-2
18082: PPUSH
18083: CALL_OW 88
// if gammaCommander = 2 then
18087: LD_EXP 12
18091: PUSH
18092: LD_INT 2
18094: EQUAL
18095: IFFALSE 18109
// Say ( Brown , D1-Brown-2 ) ;
18097: LD_EXP 2
18101: PPUSH
18102: LD_STRING D1-Brown-2
18104: PPUSH
18105: CALL_OW 88
// if gammaCommander = 3 then
18109: LD_EXP 12
18113: PUSH
18114: LD_INT 3
18116: EQUAL
18117: IFFALSE 18131
// Say ( Houten , D1-VanH-2 ) ;
18119: LD_EXP 13
18123: PPUSH
18124: LD_STRING D1-VanH-2
18126: PPUSH
18127: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18131: LD_EXP 22
18135: PPUSH
18136: LD_STRING D1-Har-2
18138: PPUSH
18139: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18143: LD_INT 22
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 33
18155: PUSH
18156: LD_INT 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 61
18165: PUSH
18166: EMPTY
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 69
18178: IFFALSE 18243
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_INT 22
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 33
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 61
18207: PUSH
18208: EMPTY
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18241
// ComAgressiveMove ( i , 70 , 41 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 70
18231: PPUSH
18232: LD_INT 41
18234: PPUSH
18235: CALL_OW 114
18239: GO 18221
18241: POP
18242: POP
// repeat wait ( 0 0$1 ) ;
18243: LD_INT 35
18245: PPUSH
18246: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_INT 6
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: PUSH
18273: FOR_IN
18274: IFFALSE 18293
// ComAgressiveMove ( i , 54 , 20 ) ;
18276: LD_VAR 0 1
18280: PPUSH
18281: LD_INT 54
18283: PPUSH
18284: LD_INT 20
18286: PPUSH
18287: CALL_OW 114
18291: GO 18273
18293: POP
18294: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 25
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 3
18322: PUSH
18323: LD_INT 54
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 69
18342: PUSH
18343: FOR_IN
18344: IFFALSE 18378
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18346: LD_VAR 0 1
18350: PPUSH
18351: LD_INT 70
18353: PPUSH
18354: LD_INT 41
18356: PPUSH
18357: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18361: LD_VAR 0 1
18365: PPUSH
18366: LD_INT 46
18368: PPUSH
18369: LD_INT 39
18371: PPUSH
18372: CALL_OW 174
// end ;
18376: GO 18343
18378: POP
18379: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 3
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: LD_INT 500
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: PUSH
18432: FOR_IN
18433: IFFALSE 18466
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18435: LD_VAR 0 1
18439: PPUSH
18440: LD_EXP 37
18444: PPUSH
18445: CALL_OW 250
18449: PPUSH
18450: LD_EXP 37
18454: PPUSH
18455: CALL_OW 251
18459: PPUSH
18460: CALL_OW 111
18464: GO 18432
18466: POP
18467: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18468: LD_INT 22
18470: PUSH
18471: LD_INT 6
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 24
18490: PUSH
18491: LD_INT 250
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: PUSH
18508: LD_INT 5
18510: LESS
18511: IFFALSE 18243
// Video ( false ) ;
18513: LD_INT 0
18515: PPUSH
18516: CALL 81136 0 1
// ChangeMissionObjectives ( M1 ) ;
18520: LD_STRING M1
18522: PPUSH
18523: CALL_OW 337
// wait ( 0 0$2 ) ;
18527: LD_INT 70
18529: PPUSH
18530: CALL_OW 67
// SaveForQuickRestart ;
18534: CALL_OW 22
// startCutscene = 0 ;
18538: LD_ADDR_EXP 38
18542: PUSH
18543: LD_INT 0
18545: ST_TO_ADDR
// end ;
18546: PPOPN 1
18548: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18549: LD_EXP 38
18553: IFFALSE 18644
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin enable ;
18562: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18563: LD_ADDR_VAR 0 1
18567: PUSH
18568: LD_INT 22
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 21
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 24
18593: PUSH
18594: LD_INT 700
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ST_TO_ADDR
// for i in tmp do
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_VAR 0 1
18624: PUSH
18625: FOR_IN
18626: IFFALSE 18642
// SetLives ( i , 700 ) ;
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_INT 700
18635: PPUSH
18636: CALL_OW 234
18640: GO 18625
18642: POP
18643: POP
// end ;
18644: PPOPN 2
18646: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18647: LD_INT 22
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 101
18659: PUSH
18660: LD_INT 6
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: LD_INT 0
18678: EQUAL
18679: PUSH
18680: LD_OWVAR 1
18684: PUSH
18685: LD_INT 6300
18687: GREATER
18688: OR
18689: IFFALSE 18938
18691: GO 18693
18693: DISABLE
// begin PrepareSupportFromDelta ;
18694: CALL 3916 0 0
// firstAttack = 1 ;
18698: LD_ADDR_EXP 33
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18706: LD_EXP 8
18710: PPUSH
18711: CALL_OW 302
18715: IFFALSE 18731
// Say ( Gladstone , D2-Glad-1 ) else
18717: LD_EXP 8
18721: PPUSH
18722: LD_STRING D2-Glad-1
18724: PPUSH
18725: CALL_OW 88
18729: GO 18839
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18731: LD_INT 4
18733: PPUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 25
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 25
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 25
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 25
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 70
18813: PUSH
18814: LD_EXP 15
18818: PUSH
18819: LD_EXP 14
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: DIFF
18828: PPUSH
18829: LD_STRING D2-Sol1-1
18831: PPUSH
18832: LD_STRING D2-FSol1-1
18834: PPUSH
18835: CALL 7358 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18839: LD_EXP 3
18843: PPUSH
18844: CALL_OW 302
18848: PUSH
18849: LD_EXP 12
18853: PUSH
18854: LD_INT 1
18856: EQUAL
18857: AND
18858: IFFALSE 18872
// Say ( Donaldson , D2-Don-1 ) ;
18860: LD_EXP 3
18864: PPUSH
18865: LD_STRING D2-Don-1
18867: PPUSH
18868: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18872: LD_EXP 2
18876: PPUSH
18877: CALL_OW 302
18881: PUSH
18882: LD_EXP 12
18886: PUSH
18887: LD_INT 2
18889: EQUAL
18890: AND
18891: IFFALSE 18905
// Say ( Brown , D2-Brown-1 ) ;
18893: LD_EXP 2
18897: PPUSH
18898: LD_STRING D2-Brown-1
18900: PPUSH
18901: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18905: LD_EXP 13
18909: PPUSH
18910: CALL_OW 302
18914: PUSH
18915: LD_EXP 12
18919: PUSH
18920: LD_INT 3
18922: EQUAL
18923: AND
18924: IFFALSE 18938
// Say ( Houten , D2-VanH-1 ) ;
18926: LD_EXP 13
18930: PPUSH
18931: LD_STRING D2-VanH-1
18933: PPUSH
18934: CALL_OW 88
// end ;
18938: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18939: LD_OWVAR 1
18943: PUSH
18944: LD_INT 6300
18946: GREATER
18947: IFFALSE 20001
18949: GO 18951
18951: DISABLE
18952: LD_INT 0
18954: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18955: LD_STRING 07_time
18957: PPUSH
18958: LD_INT 12600
18960: PPUSH
18961: CALL_OW 30
18965: PUSH
18966: LD_INT 3
18968: DIV
18969: PPUSH
18970: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18974: LD_INT 34
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 321
18984: PUSH
18985: LD_INT 2
18987: EQUAL
18988: IFFALSE 18997
// SetAchievement ( ACH_HEAVYGUN ) ;
18990: LD_STRING ACH_HEAVYGUN
18992: PPUSH
18993: CALL_OW 543
// PrepareMacmillanSquad ;
18997: CALL 4613 0 0
// CenterNowOnUnits ( JMM ) ;
19001: LD_EXP 1
19005: PPUSH
19006: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
19010: LD_EXP 1
19014: PPUSH
19015: LD_STRING D3-JMM-1
19017: PPUSH
19018: CALL_OW 88
// JMMArrive = 1 ;
19022: LD_ADDR_EXP 39
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
19030: LD_EXP 3
19034: PPUSH
19035: CALL_OW 302
19039: PUSH
19040: LD_EXP 12
19044: PUSH
19045: LD_INT 1
19047: EQUAL
19048: AND
19049: IFFALSE 19065
// begin Say ( Donaldson , D3-Don-1 ) ;
19051: LD_EXP 3
19055: PPUSH
19056: LD_STRING D3-Don-1
19058: PPUSH
19059: CALL_OW 88
// end else
19063: GO 19117
// begin if gammaCommander = 1 then
19065: LD_EXP 12
19069: PUSH
19070: LD_INT 1
19072: EQUAL
19073: IFFALSE 19117
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
19075: LD_EXP 11
19079: PPUSH
19080: LD_INT 26
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 72
19094: PPUSH
19095: LD_STRING D3-Sol1-1
19097: PPUSH
19098: LD_STRING D3-Sol1-1
19100: PPUSH
19101: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19105: LD_EXP 1
19109: PPUSH
19110: LD_STRING D3-JMM-2
19112: PPUSH
19113: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
19117: LD_EXP 2
19121: PPUSH
19122: CALL_OW 302
19126: PUSH
19127: LD_EXP 12
19131: PUSH
19132: LD_INT 2
19134: EQUAL
19135: AND
19136: IFFALSE 19152
// begin Say ( Brown , D3-Brown-1 ) ;
19138: LD_EXP 2
19142: PPUSH
19143: LD_STRING D3-Brown-1
19145: PPUSH
19146: CALL_OW 88
// end else
19150: GO 19204
// begin if gammaCommander = 2 then
19152: LD_EXP 12
19156: PUSH
19157: LD_INT 2
19159: EQUAL
19160: IFFALSE 19204
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19162: LD_EXP 11
19166: PPUSH
19167: LD_INT 26
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 72
19181: PPUSH
19182: LD_STRING D3-Sol1-1a
19184: PPUSH
19185: LD_STRING D3-Sol1-1a
19187: PPUSH
19188: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19192: LD_EXP 1
19196: PPUSH
19197: LD_STRING D3-JMM-2
19199: PPUSH
19200: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19204: LD_EXP 13
19208: PPUSH
19209: CALL_OW 302
19213: PUSH
19214: LD_EXP 12
19218: PUSH
19219: LD_INT 3
19221: EQUAL
19222: AND
19223: IFFALSE 19239
// begin Say ( Houten , D3-VanH-1 ) ;
19225: LD_EXP 13
19229: PPUSH
19230: LD_STRING D3-VanH-1
19232: PPUSH
19233: CALL_OW 88
// end else
19237: GO 19291
// begin if gammaCommander = 3 then
19239: LD_EXP 12
19243: PUSH
19244: LD_INT 3
19246: EQUAL
19247: IFFALSE 19291
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19249: LD_EXP 11
19253: PPUSH
19254: LD_INT 26
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 72
19268: PPUSH
19269: LD_STRING D3-Sol1-1b
19271: PPUSH
19272: LD_STRING D3-Sol1-1b
19274: PPUSH
19275: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19279: LD_EXP 1
19283: PPUSH
19284: LD_STRING D3-JMM-2
19286: PPUSH
19287: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19291: LD_EXP 15
19295: PPUSH
19296: CALL_OW 302
19300: IFFALSE 19328
// begin Say ( Joan , D3a-Joan-1 ) ;
19302: LD_EXP 15
19306: PPUSH
19307: LD_STRING D3a-Joan-1
19309: PPUSH
19310: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19314: LD_EXP 1
19318: PPUSH
19319: LD_STRING D3a-JMM-1
19321: PPUSH
19322: CALL_OW 88
// end else
19326: GO 19670
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19328: LD_STRING 06_JoanStatus_1
19330: PPUSH
19331: LD_INT 0
19333: PPUSH
19334: CALL_OW 30
19338: PUSH
19339: LD_INT 1
19341: EQUAL
19342: IFFALSE 19670
// begin Say ( JMM , D3b-JMM-1 ) ;
19344: LD_EXP 1
19348: PPUSH
19349: LD_STRING D3b-JMM-1
19351: PPUSH
19352: CALL_OW 88
// if gammaCommander = 1 then
19356: LD_EXP 12
19360: PUSH
19361: LD_INT 1
19363: EQUAL
19364: IFFALSE 19421
// if IsOK ( Donaldson ) then
19366: LD_EXP 3
19370: PPUSH
19371: CALL_OW 302
19375: IFFALSE 19391
// Say ( Donaldson , D3b-Don-1 ) else
19377: LD_EXP 3
19381: PPUSH
19382: LD_STRING D3b-Don-1
19384: PPUSH
19385: CALL_OW 88
19389: GO 19421
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19391: LD_EXP 11
19395: PPUSH
19396: LD_INT 26
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 72
19410: PPUSH
19411: LD_STRING D3b-Sol1-1
19413: PPUSH
19414: LD_STRING D3b-Sol1-1
19416: PPUSH
19417: CALL 7358 0 3
// if gammaCommander = 2 then
19421: LD_EXP 12
19425: PUSH
19426: LD_INT 2
19428: EQUAL
19429: IFFALSE 19486
// if IsOk ( Brown ) then
19431: LD_EXP 2
19435: PPUSH
19436: CALL_OW 302
19440: IFFALSE 19456
// Say ( Brown , D3b-Brown-1 ) else
19442: LD_EXP 2
19446: PPUSH
19447: LD_STRING D3b-Brown-1
19449: PPUSH
19450: CALL_OW 88
19454: GO 19486
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19456: LD_EXP 11
19460: PPUSH
19461: LD_INT 26
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PPUSH
19471: CALL_OW 72
19475: PPUSH
19476: LD_STRING D3b-Sol1-1
19478: PPUSH
19479: LD_STRING D3b-Sol1-1
19481: PPUSH
19482: CALL 7358 0 3
// if gammaCommander = 3 then
19486: LD_EXP 12
19490: PUSH
19491: LD_INT 3
19493: EQUAL
19494: IFFALSE 19551
// if IsOk ( Houten ) then
19496: LD_EXP 13
19500: PPUSH
19501: CALL_OW 302
19505: IFFALSE 19521
// Say ( Houten , D3b-VanH-1 ) else
19507: LD_EXP 13
19511: PPUSH
19512: LD_STRING D3b-VanH-1
19514: PPUSH
19515: CALL_OW 88
19519: GO 19551
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19521: LD_EXP 11
19525: PPUSH
19526: LD_INT 26
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 72
19540: PPUSH
19541: LD_STRING D3b-Sol1-1
19543: PPUSH
19544: LD_STRING D3b-Sol1-1
19546: PPUSH
19547: CALL 7358 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19551: LD_EXP 11
19555: PPUSH
19556: LD_INT 26
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 72
19570: PUSH
19571: LD_EXP 12
19575: PUSH
19576: LD_INT 1
19578: EQUAL
19579: PUSH
19580: LD_EXP 3
19584: PPUSH
19585: CALL_OW 302
19589: AND
19590: OR
19591: PUSH
19592: LD_EXP 12
19596: PUSH
19597: LD_INT 2
19599: EQUAL
19600: PUSH
19601: LD_EXP 2
19605: PPUSH
19606: CALL_OW 302
19610: AND
19611: OR
19612: PUSH
19613: LD_EXP 12
19617: PUSH
19618: LD_INT 3
19620: EQUAL
19621: PUSH
19622: LD_EXP 13
19626: PPUSH
19627: CALL_OW 302
19631: AND
19632: OR
19633: IFFALSE 19647
// Say ( JMM , D3b-JMM-2 ) ;
19635: LD_EXP 1
19639: PPUSH
19640: LD_STRING D3b-JMM-2
19642: PPUSH
19643: CALL_OW 88
// if IsOK ( Lisa ) then
19647: LD_EXP 6
19651: PPUSH
19652: CALL_OW 302
19656: IFFALSE 19670
// Say ( Lisa , D3b-Lisa-2 ) ;
19658: LD_EXP 6
19662: PPUSH
19663: LD_STRING D3b-Lisa-2
19665: PPUSH
19666: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19670: LD_ADDR_VAR 0 1
19674: PUSH
19675: LD_EXP 1
19679: PUSH
19680: LD_EXP 2
19684: PUSH
19685: LD_EXP 3
19689: PUSH
19690: LD_EXP 4
19694: PUSH
19695: LD_EXP 5
19699: PUSH
19700: LD_EXP 6
19704: PUSH
19705: LD_EXP 7
19709: PUSH
19710: LD_EXP 8
19714: PUSH
19715: LD_EXP 9
19719: PUSH
19720: LD_EXP 10
19724: PUSH
19725: LD_EXP 15
19729: PUSH
19730: LD_EXP 14
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: LD_EXP 42
19753: ADD
19754: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19755: LD_INT 22
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 26
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 25
19790: PUSH
19791: LD_INT 1
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 25
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 25
19810: PUSH
19811: LD_INT 3
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 25
19820: PUSH
19821: LD_INT 4
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: PPUSH
19841: CALL_OW 69
19845: PUSH
19846: LD_VAR 0 1
19850: DIFF
19851: PPUSH
19852: LD_STRING DCa-Sol1-1
19854: PPUSH
19855: LD_STRING DCa-Sol1-1
19857: PPUSH
19858: CALL 7358 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19862: LD_EXP 1
19866: PPUSH
19867: LD_STRING DCb-JMM-1
19869: PPUSH
19870: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19874: LD_INT 22
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 21
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 26
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 25
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 25
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 25
19939: PUSH
19940: LD_INT 4
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: PPUSH
19960: CALL_OW 69
19964: PUSH
19965: LD_VAR 0 1
19969: DIFF
19970: PPUSH
19971: LD_STRING DCb-Sol1-1
19973: PPUSH
19974: LD_STRING DCb-Sol1-1
19976: PPUSH
19977: CALL 7358 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19981: LD_EXP 1
19985: PPUSH
19986: LD_STRING DCb-JMM-2
19988: PPUSH
19989: CALL_OW 88
// secondAttack = 1 ;
19993: LD_ADDR_EXP 34
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// end ;
20001: PPOPN 1
20003: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
20004: LD_EXP 39
20008: PUSH
20009: LD_INT 1
20011: EQUAL
20012: PUSH
20013: LD_OWVAR 1
20017: PUSH
20018: LD_INT 37800
20020: GREATEREQUAL
20021: AND
20022: IFFALSE 20095
20024: GO 20026
20026: DISABLE
// begin DialogueOn ;
20027: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
20031: LD_EXP 23
20035: PPUSH
20036: LD_STRING D4-Pow-1
20038: PPUSH
20039: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
20043: LD_EXP 1
20047: PPUSH
20048: LD_STRING D4-JMM-1
20050: PPUSH
20051: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
20055: LD_EXP 23
20059: PPUSH
20060: LD_STRING D4-Pow-2
20062: PPUSH
20063: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
20067: LD_EXP 1
20071: PPUSH
20072: LD_STRING D4-JMM-2
20074: PPUSH
20075: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
20079: LD_EXP 23
20083: PPUSH
20084: LD_STRING D4-Pow-3
20086: PPUSH
20087: CALL_OW 94
// DialogueOff ;
20091: CALL_OW 7
// end ;
20095: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
20096: LD_EXP 39
20100: PUSH
20101: LD_INT 1
20103: EQUAL
20104: PUSH
20105: LD_OWVAR 1
20109: PUSH
20110: LD_INT 50400
20112: GREATEREQUAL
20113: AND
20114: IFFALSE 20139
20116: GO 20118
20118: DISABLE
// begin DialogueOn ;
20119: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20123: LD_EXP 23
20127: PPUSH
20128: LD_STRING D4a-Pow-1
20130: PPUSH
20131: CALL_OW 94
// DialogueOff ;
20135: CALL_OW 7
// end ;
20139: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20140: LD_EXP 39
20144: PUSH
20145: LD_INT 1
20147: EQUAL
20148: PUSH
20149: LD_OWVAR 1
20153: PUSH
20154: LD_INT 73500
20156: GREATEREQUAL
20157: AND
20158: IFFALSE 20179
20160: GO 20162
20162: DISABLE
// begin PrepareSikorsky ;
20163: CALL 5871 0 0
// SikorskyArrive = 1 ;
20167: LD_ADDR_EXP 18
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// PrepareSikorskyArmy ;
20175: CALL 6051 0 0
// end ;
20179: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20180: LD_EXP 17
20184: PPUSH
20185: LD_INT 5
20187: PPUSH
20188: CALL_OW 308
20192: IFFALSE 20384
20194: GO 20196
20196: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20197: LD_EXP 17
20201: PPUSH
20202: CALL_OW 87
// DialogueOn ;
20206: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20210: LD_EXP 16
20214: PPUSH
20215: LD_STRING D5-Sik-1
20217: PPUSH
20218: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20222: LD_EXP 1
20226: PPUSH
20227: LD_STRING D5-JMM-1a
20229: PPUSH
20230: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20234: LD_EXP 16
20238: PPUSH
20239: LD_STRING D5-Sik-2
20241: PPUSH
20242: CALL_OW 88
// case query ( QSikorski ) of 1 :
20246: LD_STRING QSikorski
20248: PPUSH
20249: CALL_OW 97
20253: PUSH
20254: LD_INT 1
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20285
20262: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20263: LD_EXP 16
20267: PPUSH
20268: LD_STRING D5a-Sik-1
20270: PPUSH
20271: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20275: LD_ADDR_EXP 19
20279: PUSH
20280: LD_INT 2100
20282: ST_TO_ADDR
// end ; 2 :
20283: GO 20372
20285: LD_INT 2
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20316
20293: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20294: LD_EXP 16
20298: PPUSH
20299: LD_STRING D5b-Sik-1
20301: PPUSH
20302: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20306: LD_ADDR_EXP 19
20310: PUSH
20311: LD_INT 10500
20313: ST_TO_ADDR
// end ; 3 :
20314: GO 20372
20316: LD_INT 3
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20371
20324: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20325: LD_EXP 16
20329: PPUSH
20330: LD_STRING D5c-Sik-1
20332: PPUSH
20333: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20337: LD_EXP 1
20341: PPUSH
20342: LD_STRING D5c-JMM-1
20344: PPUSH
20345: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20349: LD_EXP 16
20353: PPUSH
20354: LD_STRING D5c-Sik-2
20356: PPUSH
20357: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20361: LD_ADDR_EXP 19
20365: PUSH
20366: LD_INT 10500
20368: ST_TO_ADDR
// end ; end ;
20369: GO 20372
20371: POP
// DialogueOff ;
20372: CALL_OW 7
// timerStatus = 1 ;
20376: LD_ADDR_EXP 35
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// end ;
20384: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20385: LD_EXP 19
20389: PUSH
20390: LD_INT 35
20392: LESS
20393: IFFALSE 20441
20395: GO 20397
20397: DISABLE
// begin timerStatus = 0 ;
20398: LD_ADDR_EXP 35
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// DialogueOn ;
20406: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20410: LD_EXP 16
20414: PPUSH
20415: LD_STRING D6-Sik-1
20417: PPUSH
20418: CALL_OW 88
// DialogueOff ;
20422: CALL_OW 7
// SikorskyAI = 1 ;
20426: LD_ADDR_EXP 20
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20434: LD_STRING M2
20436: PPUSH
20437: CALL_OW 337
// end ;
20441: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20442: LD_EXP 17
20446: PPUSH
20447: LD_INT 18
20449: PPUSH
20450: CALL_OW 308
20454: IFFALSE 20564
20456: GO 20458
20458: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20459: LD_EXP 16
20463: PPUSH
20464: LD_STRING D7-Sik-1
20466: PPUSH
20467: CALL_OW 88
// wait ( 0 0$10 ) ;
20471: LD_INT 350
20473: PPUSH
20474: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20478: LD_EXP 1
20482: PPUSH
20483: LD_INT 24
20485: PPUSH
20486: CALL_OW 308
20490: PUSH
20491: LD_EXP 1
20495: PPUSH
20496: CALL 17107 0 1
20500: PUSH
20501: LD_EXP 1
20505: PPUSH
20506: CALL 17107 0 1
20510: PPUSH
20511: LD_INT 24
20513: PPUSH
20514: CALL_OW 308
20518: AND
20519: OR
20520: IFFALSE 20544
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20522: LD_EXP 16
20526: PPUSH
20527: LD_STRING D7a-Sik-1
20529: PPUSH
20530: CALL_OW 88
// SikorskyStatus = 1 ;
20534: LD_ADDR_EXP 21
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// end else
20542: GO 20564
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20544: LD_EXP 16
20548: PPUSH
20549: LD_STRING D7b-Sik-1
20551: PPUSH
20552: CALL_OW 88
// SikorskyStatus = 2 ;
20556: LD_ADDR_EXP 21
20560: PUSH
20561: LD_INT 2
20563: ST_TO_ADDR
// end ; end ; end_of_file
20564: END
// on BuildingComplete ( building ) do var tmp , un ;
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
// begin if GetSide ( building ) = 3 then
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 255
20578: PUSH
20579: LD_INT 3
20581: EQUAL
20582: IFFALSE 21119
// begin if GetBType ( building ) = b_depot then
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 266
20593: PUSH
20594: LD_INT 0
20596: EQUAL
20597: IFFALSE 20665
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 274
20608: PPUSH
20609: LD_INT 1
20611: PPUSH
20612: LD_INT 5000
20614: PPUSH
20615: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 274
20628: PPUSH
20629: LD_INT 2
20631: PPUSH
20632: LD_INT 5000
20634: PPUSH
20635: CALL_OW 277
// SetBName ( building , konev ) ;
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_STRING konev
20646: PPUSH
20647: CALL_OW 500
// ruDepot = building ;
20651: LD_ADDR_EXP 28
20655: PUSH
20656: LD_VAR 0 1
20660: ST_TO_ADDR
// BuildRussianBase ;
20661: CALL 7984 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 266
20674: PUSH
20675: LD_INT 0
20677: EQUAL
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 266
20688: PUSH
20689: LD_INT 2
20691: EQUAL
20692: OR
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 266
20703: PUSH
20704: LD_INT 4
20706: EQUAL
20707: OR
20708: IFFALSE 20719
// ComUpgrade ( building ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: CALL_OW 146
// if GetBType ( building ) = b_lab then
20719: LD_VAR 0 1
20723: PPUSH
20724: CALL_OW 266
20728: PUSH
20729: LD_INT 6
20731: EQUAL
20732: IFFALSE 20783
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 10
20741: PPUSH
20742: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: LD_INT 12
20753: PPUSH
20754: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20758: LD_INT 3
20760: PPUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: LD_INT 3
20768: PPUSH
20769: CALL 8528 0 3
// ruLab = building ;
20773: LD_ADDR_EXP 29
20777: PUSH
20778: LD_VAR 0 1
20782: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 266
20792: PUSH
20793: LD_INT 32
20795: EQUAL
20796: IFFALSE 20914
// begin uc_side = 3 ;
20798: LD_ADDR_OWVAR 20
20802: PUSH
20803: LD_INT 3
20805: ST_TO_ADDR
// uc_nation = 3 ;
20806: LD_ADDR_OWVAR 21
20810: PUSH
20811: LD_INT 3
20813: ST_TO_ADDR
// hc_gallery =  ;
20814: LD_ADDR_OWVAR 33
20818: PUSH
20819: LD_STRING 
20821: ST_TO_ADDR
// hc_name =  ;
20822: LD_ADDR_OWVAR 26
20826: PUSH
20827: LD_STRING 
20829: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20830: LD_INT 0
20832: PPUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_EXP 25
20840: PPUSH
20841: LD_EXP 26
20845: PPUSH
20846: CALL_OW 12
20850: PPUSH
20851: CALL_OW 380
// un = CreateHuman ;
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: CALL_OW 44
20864: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20865: LD_VAR 0 3
20869: PPUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20879: LD_VAR 0 1
20883: PPUSH
20884: LD_INT 43
20886: PUSH
20887: LD_INT 44
20889: PUSH
20890: LD_INT 46
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PPUSH
20901: LD_INT 3
20903: PPUSH
20904: CALL_OW 12
20908: ARRAY
20909: PPUSH
20910: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20914: LD_VAR 0 1
20918: PPUSH
20919: CALL_OW 266
20923: PUSH
20924: LD_INT 33
20926: EQUAL
20927: IFFALSE 20964
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20929: LD_VAR 0 1
20933: PPUSH
20934: LD_INT 43
20936: PUSH
20937: LD_INT 44
20939: PUSH
20940: LD_INT 46
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 3
20953: PPUSH
20954: CALL_OW 12
20958: ARRAY
20959: PPUSH
20960: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20964: LD_VAR 0 1
20968: PPUSH
20969: CALL_OW 266
20973: PUSH
20974: LD_INT 32
20976: EQUAL
20977: IFFALSE 21014
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20979: LD_VAR 0 1
20983: PPUSH
20984: LD_INT 43
20986: PUSH
20987: LD_INT 44
20989: PUSH
20990: LD_INT 46
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PPUSH
21001: LD_INT 3
21003: PPUSH
21004: CALL_OW 12
21008: ARRAY
21009: PPUSH
21010: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 266
21023: PUSH
21024: LD_INT 24
21026: EQUAL
21027: IFFALSE 21037
// russianAI = 1 ;
21029: LD_ADDR_EXP 27
21033: PUSH
21034: LD_INT 1
21036: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
21037: LD_EXP 31
21041: PUSH
21042: LD_INT 0
21044: GREATER
21045: IFFALSE 21119
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21047: LD_ADDR_EXP 31
21051: PUSH
21052: LD_EXP 31
21056: PPUSH
21057: LD_INT 1
21059: PPUSH
21060: CALL_OW 3
21064: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21065: LD_ADDR_EXP 31
21069: PUSH
21070: LD_EXP 31
21074: PPUSH
21075: LD_INT 1
21077: PPUSH
21078: CALL_OW 3
21082: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21083: LD_ADDR_EXP 31
21087: PUSH
21088: LD_EXP 31
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: CALL_OW 3
21100: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21101: LD_ADDR_EXP 31
21105: PUSH
21106: LD_EXP 31
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL_OW 3
21118: ST_TO_ADDR
// end ; end ; end ;
21119: PPOPN 3
21121: END
// on UpgradeComplete ( building ) do var i ;
21122: LD_INT 0
21124: PPUSH
// begin if GetSide ( building ) = 3 then
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 255
21134: PUSH
21135: LD_INT 3
21137: EQUAL
21138: IFFALSE 21319
// begin if GetBType ( building ) = b_factory then
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL_OW 266
21149: PUSH
21150: LD_INT 3
21152: EQUAL
21153: IFFALSE 21220
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21155: LD_ADDR_VAR 0 2
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 3
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21208
// ComEnterUnit ( i , building ) ;
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_VAR 0 1
21201: PPUSH
21202: CALL_OW 120
21206: GO 21189
21208: POP
21209: POP
// ruFab = building ;
21210: LD_ADDR_EXP 30
21214: PUSH
21215: LD_VAR 0 1
21219: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21220: LD_VAR 0 1
21224: PPUSH
21225: CALL_OW 266
21229: PUSH
21230: LD_INT 8
21232: EQUAL
21233: IFFALSE 21290
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21235: LD_ADDR_VAR 0 2
21239: PUSH
21240: LD_INT 22
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 25
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 69
21268: PUSH
21269: FOR_IN
21270: IFFALSE 21288
// ComEnterUnit ( i , building ) ;
21272: LD_VAR 0 2
21276: PPUSH
21277: LD_VAR 0 1
21281: PPUSH
21282: CALL_OW 120
21286: GO 21269
21288: POP
21289: POP
// if GetBType ( building ) = b_warehouse then
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL_OW 266
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 21319
// begin ComEnterUnit ( Borodin , building ) ;
21305: LD_EXP 24
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 120
// end ; end ; end ;
21319: PPOPN 2
21321: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 247
21331: PUSH
21332: LD_INT 2
21334: EQUAL
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 263
21345: PUSH
21346: LD_INT 3
21348: EQUAL
21349: AND
21350: PUSH
21351: LD_EXP 41
21355: PUSH
21356: LD_INT 0
21358: EQUAL
21359: AND
21360: IFFALSE 21478
// begin varEvent1 = 1 ;
21362: LD_ADDR_EXP 41
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21370: LD_VAR 0 1
21374: PPUSH
21375: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21379: LD_INT 22
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PUSH
21459: LD_EXP 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: DIFF
21467: PPUSH
21468: LD_STRING DC-Sol1-1
21470: PPUSH
21471: LD_STRING DC-FSol1-1
21473: PPUSH
21474: CALL 7358 0 3
// end ; end ;
21478: PPOPN 1
21480: END
// on UnitDestroyed ( unit ) do var i ;
21481: LD_INT 0
21483: PPUSH
// begin if unit = Joan then
21484: LD_VAR 0 1
21488: PUSH
21489: LD_EXP 15
21493: EQUAL
21494: IFFALSE 21503
// DeleteCharacters ( Joan ) ;
21496: LD_STRING Joan
21498: PPUSH
21499: CALL_OW 40
// if GetSide ( unit ) = 3 then
21503: LD_VAR 0 1
21507: PPUSH
21508: CALL_OW 255
21512: PUSH
21513: LD_INT 3
21515: EQUAL
21516: IFFALSE 22286
// begin if GetType ( unit ) = unit_building then
21518: LD_VAR 0 1
21522: PPUSH
21523: CALL_OW 247
21527: PUSH
21528: LD_INT 3
21530: EQUAL
21531: IFFALSE 22223
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21533: LD_VAR 0 1
21537: PPUSH
21538: CALL_OW 266
21542: PUSH
21543: LD_INT 31
21545: EQUAL
21546: PUSH
21547: LD_VAR 0 1
21551: PPUSH
21552: CALL_OW 266
21556: PUSH
21557: LD_INT 32
21559: EQUAL
21560: OR
21561: PUSH
21562: LD_VAR 0 1
21566: PPUSH
21567: CALL_OW 266
21571: PUSH
21572: LD_INT 36
21574: EQUAL
21575: OR
21576: PUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 266
21586: PUSH
21587: LD_INT 0
21589: EQUAL
21590: OR
21591: PUSH
21592: LD_VAR 0 1
21596: PPUSH
21597: CALL_OW 266
21601: PUSH
21602: LD_INT 24
21604: EQUAL
21605: OR
21606: PUSH
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 266
21616: PUSH
21617: LD_INT 17
21619: EQUAL
21620: OR
21621: PUSH
21622: LD_VAR 0 1
21626: PPUSH
21627: CALL_OW 266
21631: PUSH
21632: LD_INT 25
21634: EQUAL
21635: OR
21636: PUSH
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 266
21646: PUSH
21647: LD_INT 19
21649: EQUAL
21650: OR
21651: PUSH
21652: LD_VAR 0 1
21656: PPUSH
21657: CALL_OW 266
21661: PUSH
21662: LD_INT 20
21664: EQUAL
21665: OR
21666: PUSH
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL_OW 266
21676: PUSH
21677: LD_INT 18
21679: EQUAL
21680: OR
21681: PUSH
21682: LD_VAR 0 1
21686: PPUSH
21687: CALL_OW 266
21691: PUSH
21692: LD_INT 21
21694: EQUAL
21695: OR
21696: PUSH
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 266
21706: PUSH
21707: LD_INT 23
21709: EQUAL
21710: OR
21711: PUSH
21712: LD_VAR 0 1
21716: PPUSH
21717: CALL_OW 266
21721: PUSH
21722: LD_INT 16
21724: EQUAL
21725: OR
21726: PUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 266
21736: PUSH
21737: LD_INT 6
21739: EQUAL
21740: OR
21741: PUSH
21742: LD_VAR 0 1
21746: PPUSH
21747: CALL_OW 266
21751: PUSH
21752: LD_INT 29
21754: EQUAL
21755: OR
21756: PUSH
21757: LD_VAR 0 1
21761: PPUSH
21762: CALL_OW 266
21766: PUSH
21767: LD_INT 26
21769: EQUAL
21770: OR
21771: PUSH
21772: LD_VAR 0 1
21776: PPUSH
21777: CALL_OW 266
21781: PUSH
21782: LD_INT 30
21784: EQUAL
21785: OR
21786: PUSH
21787: LD_VAR 0 1
21791: PPUSH
21792: CALL_OW 266
21796: PUSH
21797: LD_INT 28
21799: EQUAL
21800: OR
21801: PUSH
21802: LD_VAR 0 1
21806: PPUSH
21807: CALL_OW 266
21811: PUSH
21812: LD_INT 27
21814: EQUAL
21815: OR
21816: PUSH
21817: LD_VAR 0 1
21821: PPUSH
21822: CALL_OW 266
21826: PUSH
21827: LD_INT 33
21829: EQUAL
21830: OR
21831: PUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 266
21841: PUSH
21842: LD_INT 2
21844: EQUAL
21845: OR
21846: PUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL_OW 266
21856: PUSH
21857: LD_INT 4
21859: EQUAL
21860: OR
21861: IFFALSE 21947
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21863: LD_ADDR_EXP 31
21867: PUSH
21868: LD_EXP 31
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 266
21882: ADD
21883: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21884: LD_ADDR_EXP 31
21888: PUSH
21889: LD_EXP 31
21893: PUSH
21894: LD_VAR 0 1
21898: PPUSH
21899: CALL_OW 250
21903: ADD
21904: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21905: LD_ADDR_EXP 31
21909: PUSH
21910: LD_EXP 31
21914: PUSH
21915: LD_VAR 0 1
21919: PPUSH
21920: CALL_OW 251
21924: ADD
21925: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21926: LD_ADDR_EXP 31
21930: PUSH
21931: LD_EXP 31
21935: PUSH
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL_OW 254
21945: ADD
21946: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21947: LD_VAR 0 1
21951: PPUSH
21952: CALL_OW 266
21956: PUSH
21957: LD_INT 1
21959: EQUAL
21960: IFFALSE 22039
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21962: LD_ADDR_EXP 31
21966: PUSH
21967: LD_EXP 31
21971: PUSH
21972: LD_INT 0
21974: ADD
21975: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21976: LD_ADDR_EXP 31
21980: PUSH
21981: LD_EXP 31
21985: PUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: CALL_OW 250
21995: ADD
21996: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21997: LD_ADDR_EXP 31
22001: PUSH
22002: LD_EXP 31
22006: PUSH
22007: LD_VAR 0 1
22011: PPUSH
22012: CALL_OW 251
22016: ADD
22017: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22018: LD_ADDR_EXP 31
22022: PUSH
22023: LD_EXP 31
22027: PUSH
22028: LD_VAR 0 1
22032: PPUSH
22033: CALL_OW 254
22037: ADD
22038: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL_OW 266
22048: PUSH
22049: LD_INT 3
22051: EQUAL
22052: IFFALSE 22131
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
22054: LD_ADDR_EXP 31
22058: PUSH
22059: LD_EXP 31
22063: PUSH
22064: LD_INT 2
22066: ADD
22067: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22068: LD_ADDR_EXP 31
22072: PUSH
22073: LD_EXP 31
22077: PUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 250
22087: ADD
22088: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22089: LD_ADDR_EXP 31
22093: PUSH
22094: LD_EXP 31
22098: PUSH
22099: LD_VAR 0 1
22103: PPUSH
22104: CALL_OW 251
22108: ADD
22109: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22110: LD_ADDR_EXP 31
22114: PUSH
22115: LD_EXP 31
22119: PUSH
22120: LD_VAR 0 1
22124: PPUSH
22125: CALL_OW 254
22129: ADD
22130: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22131: LD_VAR 0 1
22135: PPUSH
22136: CALL_OW 266
22140: PUSH
22141: LD_INT 5
22143: EQUAL
22144: IFFALSE 22223
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22146: LD_ADDR_EXP 31
22150: PUSH
22151: LD_EXP 31
22155: PUSH
22156: LD_INT 4
22158: ADD
22159: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22160: LD_ADDR_EXP 31
22164: PUSH
22165: LD_EXP 31
22169: PUSH
22170: LD_VAR 0 1
22174: PPUSH
22175: CALL_OW 250
22179: ADD
22180: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22181: LD_ADDR_EXP 31
22185: PUSH
22186: LD_EXP 31
22190: PUSH
22191: LD_VAR 0 1
22195: PPUSH
22196: CALL_OW 251
22200: ADD
22201: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22202: LD_ADDR_EXP 31
22206: PUSH
22207: LD_EXP 31
22211: PUSH
22212: LD_VAR 0 1
22216: PPUSH
22217: CALL_OW 254
22221: ADD
22222: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL_OW 247
22232: PUSH
22233: LD_INT 1
22235: EQUAL
22236: IFFALSE 22286
// begin for i in defenders_list do
22238: LD_ADDR_VAR 0 2
22242: PUSH
22243: LD_EXP 32
22247: PUSH
22248: FOR_IN
22249: IFFALSE 22284
// if i = unit then
22251: LD_VAR 0 2
22255: PUSH
22256: LD_VAR 0 1
22260: EQUAL
22261: IFFALSE 22282
// defenders_list = defenders_list diff [ unit ] ;
22263: LD_ADDR_EXP 32
22267: PUSH
22268: LD_EXP 32
22272: PUSH
22273: LD_VAR 0 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: DIFF
22281: ST_TO_ADDR
22282: GO 22248
22284: POP
22285: POP
// end ; end ; end ;
22286: PPOPN 2
22288: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22289: LD_VAR 0 1
22293: PPUSH
22294: CALL 40518 0 1
// end ; end_of_file
22298: PPOPN 1
22300: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22301: GO 22303
22303: DISABLE
22304: LD_INT 0
22306: PPUSH
// begin enemyWayX = [ ] ;
22307: LD_ADDR_EXP 46
22311: PUSH
22312: EMPTY
22313: ST_TO_ADDR
// enemyWayY = [ ] ;
22314: LD_ADDR_EXP 47
22318: PUSH
22319: EMPTY
22320: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22321: LD_ADDR_VAR 0 1
22325: PUSH
22326: LD_INT 1
22328: PPUSH
22329: LD_INT 3
22331: PPUSH
22332: CALL_OW 12
22336: ST_TO_ADDR
// if rnd = 1 then
22337: LD_VAR 0 1
22341: PUSH
22342: LD_INT 1
22344: EQUAL
22345: IFFALSE 22385
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22347: LD_ADDR_EXP 46
22351: PUSH
22352: LD_INT 73
22354: PUSH
22355: LD_INT 46
22357: PUSH
22358: LD_INT 29
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22366: LD_ADDR_EXP 47
22370: PUSH
22371: LD_INT 71
22373: PUSH
22374: LD_INT 43
22376: PUSH
22377: LD_INT 29
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: ST_TO_ADDR
// end ; if rnd = 2 then
22385: LD_VAR 0 1
22389: PUSH
22390: LD_INT 2
22392: EQUAL
22393: IFFALSE 22417
// begin enemyWayX = [ 64 ] ;
22395: LD_ADDR_EXP 46
22399: PUSH
22400: LD_INT 64
22402: PUSH
22403: EMPTY
22404: LIST
22405: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22406: LD_ADDR_EXP 47
22410: PUSH
22411: LD_INT 43
22413: PUSH
22414: EMPTY
22415: LIST
22416: ST_TO_ADDR
// end ; if rnd = 3 then
22417: LD_VAR 0 1
22421: PUSH
22422: LD_INT 3
22424: EQUAL
22425: IFFALSE 22449
// begin enemyWayX = [ 80 ] ;
22427: LD_ADDR_EXP 46
22431: PUSH
22432: LD_INT 80
22434: PUSH
22435: EMPTY
22436: LIST
22437: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22438: LD_ADDR_EXP 47
22442: PUSH
22443: LD_INT 28
22445: PUSH
22446: EMPTY
22447: LIST
22448: ST_TO_ADDR
// end ; enable ;
22449: ENABLE
// end ;
22450: PPOPN 1
22452: END
// every 0 0$1 do
22453: GO 22455
22455: DISABLE
// begin enable ;
22456: ENABLE
// if escapeAvalaible = 0 then
22457: LD_EXP 36
22461: PUSH
22462: LD_INT 0
22464: EQUAL
22465: IFFALSE 22477
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22467: LD_INT 3
22469: PPUSH
22470: LD_INT 6
22472: PPUSH
22473: CALL 8769 0 2
// if escapeAvalaible = 0 then
22477: LD_EXP 36
22481: PUSH
22482: LD_INT 0
22484: EQUAL
22485: IFFALSE 22497
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22487: LD_INT 1
22489: PPUSH
22490: LD_INT 24
22492: PPUSH
22493: CALL 9429 0 2
// if russianAI = 1 then
22497: LD_EXP 27
22501: PUSH
22502: LD_INT 1
22504: EQUAL
22505: IFFALSE 22575
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22507: LD_INT 3
22509: PPUSH
22510: LD_INT 7
22512: PPUSH
22513: LD_INT 6
22515: PPUSH
22516: LD_EXP 29
22520: PPUSH
22521: CALL 11871 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22525: LD_INT 3
22527: PPUSH
22528: LD_EXP 28
22532: PPUSH
22533: LD_INT 6
22535: PPUSH
22536: LD_EXP 31
22540: PPUSH
22541: CALL 11465 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22545: LD_INT 3
22547: PPUSH
22548: LD_INT 26
22550: PPUSH
22551: LD_EXP 46
22555: PPUSH
22556: LD_EXP 47
22560: PPUSH
22561: CALL 10329 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22565: LD_INT 3
22567: PPUSH
22568: LD_INT 1
22570: PPUSH
22571: CALL 12415 0 2
// end ; if SikorskyArrive = 1 then
22575: LD_EXP 18
22579: PUSH
22580: LD_INT 1
22582: EQUAL
22583: IFFALSE 22601
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22585: LD_INT 3
22587: PPUSH
22588: LD_INT 10
22590: PPUSH
22591: LD_INT 53
22593: PPUSH
22594: LD_INT 59
22596: PPUSH
22597: CALL 10126 0 4
// end ;
22601: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22602: LD_EXP 27
22606: PUSH
22607: LD_INT 1
22609: EQUAL
22610: IFFALSE 22886
22612: GO 22614
22614: DISABLE
22615: LD_INT 0
22617: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22618: LD_ADDR_VAR 0 1
22622: PUSH
22623: LD_INT 22
22625: PUSH
22626: LD_INT 3
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 21
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 30
22645: PUSH
22646: LD_INT 32
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 3
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: LD_INT 35
22661: PUSH
22662: LD_INT 43
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 35
22671: PUSH
22672: LD_INT 44
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 35
22681: PUSH
22682: LD_INT 46
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: PPUSH
22705: CALL_OW 69
22709: PUSH
22710: FOR_IN
22711: IFFALSE 22750
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22713: LD_VAR 0 1
22717: PPUSH
22718: LD_INT 43
22720: PUSH
22721: LD_INT 44
22723: PUSH
22724: LD_INT 46
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 1
22734: PPUSH
22735: LD_INT 3
22737: PPUSH
22738: CALL_OW 12
22742: ARRAY
22743: PPUSH
22744: CALL_OW 431
22748: GO 22710
22750: POP
22751: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22752: LD_ADDR_VAR 0 1
22756: PUSH
22757: LD_INT 22
22759: PUSH
22760: LD_INT 3
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 21
22769: PUSH
22770: LD_INT 3
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 30
22779: PUSH
22780: LD_INT 33
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 3
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 35
22795: PUSH
22796: LD_INT 43
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 35
22805: PUSH
22806: LD_INT 44
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 35
22815: PUSH
22816: LD_INT 46
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: PPUSH
22839: CALL_OW 69
22843: PUSH
22844: FOR_IN
22845: IFFALSE 22884
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22847: LD_VAR 0 1
22851: PPUSH
22852: LD_INT 43
22854: PUSH
22855: LD_INT 44
22857: PUSH
22858: LD_INT 46
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: PPUSH
22869: LD_INT 3
22871: PPUSH
22872: CALL_OW 12
22876: ARRAY
22877: PPUSH
22878: CALL_OW 431
22882: GO 22844
22884: POP
22885: POP
// end ;
22886: PPOPN 1
22888: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22889: LD_EXP 24
22893: PPUSH
22894: CALL_OW 310
22898: NOT
22899: PUSH
22900: LD_EXP 28
22904: PPUSH
22905: CALL_OW 302
22909: AND
22910: PUSH
22911: LD_EXP 28
22915: PPUSH
22916: CALL_OW 255
22920: PUSH
22921: LD_INT 3
22923: EQUAL
22924: AND
22925: IFFALSE 22945
22927: GO 22929
22929: DISABLE
// begin enable ;
22930: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22931: LD_EXP 24
22935: PPUSH
22936: LD_EXP 28
22940: PPUSH
22941: CALL_OW 120
// end ;
22945: END
// every 0 0$1 trigger SikorskyAI = 1 do
22946: LD_EXP 20
22950: PUSH
22951: LD_INT 1
22953: EQUAL
22954: IFFALSE 22989
22956: GO 22958
22958: DISABLE
// begin enable ;
22959: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22960: LD_INT 4
22962: PPUSH
22963: LD_INT 10
22965: PPUSH
22966: LD_INT 93
22968: PPUSH
22969: LD_INT 93
22971: PPUSH
22972: CALL 10126 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22976: LD_INT 4
22978: PPUSH
22979: LD_INT 11
22981: PPUSH
22982: LD_INT 3
22984: PPUSH
22985: CALL 16627 0 3
// end ;
22989: END
// every 0 0$1 trigger SikorskyAI = 1 do
22990: LD_EXP 20
22994: PUSH
22995: LD_INT 1
22997: EQUAL
22998: IFFALSE 23010
23000: GO 23002
23002: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
23003: LD_INT 4
23005: PPUSH
23006: CALL 11137 0 1
23010: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
23011: LD_EXP 27
23015: PUSH
23016: LD_INT 1
23018: EQUAL
23019: PUSH
23020: LD_EXP 30
23024: PPUSH
23025: CALL_OW 302
23029: AND
23030: PUSH
23031: LD_EXP 30
23035: PPUSH
23036: CALL_OW 255
23040: PUSH
23041: LD_INT 3
23043: EQUAL
23044: AND
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_INT 3
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 21
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 33
23068: PUSH
23069: LD_INT 3
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 69
23085: PUSH
23086: LD_INT 0
23088: EQUAL
23089: AND
23090: IFFALSE 23324
23092: GO 23094
23094: DISABLE
// begin enable ;
23095: ENABLE
// if Difficulty = 1 then
23096: LD_OWVAR 67
23100: PUSH
23101: LD_INT 1
23103: EQUAL
23104: IFFALSE 23172
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
23106: LD_INT 3
23108: PPUSH
23109: LD_EXP 30
23113: PPUSH
23114: LD_INT 5
23116: PPUSH
23117: LD_INT 8
23119: PPUSH
23120: CALL_OW 12
23124: PPUSH
23125: LD_INT 43
23127: PUSH
23128: LD_INT 43
23130: PUSH
23131: LD_INT 43
23133: PUSH
23134: LD_INT 43
23136: PUSH
23137: LD_INT 44
23139: PUSH
23140: LD_INT 44
23142: PUSH
23143: LD_INT 44
23145: PUSH
23146: LD_INT 46
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: PPUSH
23159: LD_INT 1
23161: PPUSH
23162: LD_INT 3
23164: PPUSH
23165: LD_INT 24
23167: PPUSH
23168: CALL 9972 0 7
// if Difficulty = 2 then
23172: LD_OWVAR 67
23176: PUSH
23177: LD_INT 2
23179: EQUAL
23180: IFFALSE 23248
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23182: LD_INT 3
23184: PPUSH
23185: LD_EXP 30
23189: PPUSH
23190: LD_INT 6
23192: PPUSH
23193: LD_INT 8
23195: PPUSH
23196: CALL_OW 12
23200: PPUSH
23201: LD_INT 43
23203: PUSH
23204: LD_INT 43
23206: PUSH
23207: LD_INT 44
23209: PUSH
23210: LD_INT 44
23212: PUSH
23213: LD_INT 44
23215: PUSH
23216: LD_INT 44
23218: PUSH
23219: LD_INT 46
23221: PUSH
23222: LD_INT 46
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: PPUSH
23235: LD_INT 1
23237: PPUSH
23238: LD_INT 3
23240: PPUSH
23241: LD_INT 24
23243: PPUSH
23244: CALL 9972 0 7
// if Difficulty >= 3 then
23248: LD_OWVAR 67
23252: PUSH
23253: LD_INT 3
23255: GREATEREQUAL
23256: IFFALSE 23324
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23258: LD_INT 3
23260: PPUSH
23261: LD_EXP 30
23265: PPUSH
23266: LD_INT 7
23268: PPUSH
23269: LD_INT 8
23271: PPUSH
23272: CALL_OW 12
23276: PPUSH
23277: LD_INT 43
23279: PUSH
23280: LD_INT 43
23282: PUSH
23283: LD_INT 44
23285: PUSH
23286: LD_INT 44
23288: PUSH
23289: LD_INT 44
23291: PUSH
23292: LD_INT 46
23294: PUSH
23295: LD_INT 46
23297: PUSH
23298: LD_INT 46
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: PPUSH
23311: LD_INT 1
23313: PPUSH
23314: LD_INT 3
23316: PPUSH
23317: LD_INT 24
23319: PPUSH
23320: CALL 9972 0 7
// end ;
23324: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23325: LD_EXP 38
23329: PUSH
23330: LD_INT 1
23332: EQUAL
23333: IFFALSE 23415
23335: GO 23337
23337: DISABLE
23338: LD_INT 0
23340: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23341: LD_ADDR_VAR 0 1
23345: PUSH
23346: LD_INT 22
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 21
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 3
23368: PUSH
23369: LD_INT 24
23371: PUSH
23372: LD_INT 650
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: LIST
23387: PPUSH
23388: CALL_OW 69
23392: PUSH
23393: FOR_IN
23394: IFFALSE 23413
// ComMoveXY ( i , 51 , 12 ) ;
23396: LD_VAR 0 1
23400: PPUSH
23401: LD_INT 51
23403: PPUSH
23404: LD_INT 12
23406: PPUSH
23407: CALL_OW 111
23411: GO 23393
23413: POP
23414: POP
// end ; end_of_file
23415: PPOPN 1
23417: END
// every 1 1$20 trigger firstAttack = 1 do
23418: LD_EXP 33
23422: PUSH
23423: LD_INT 1
23425: EQUAL
23426: IFFALSE 23536
23428: GO 23430
23430: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23431: LD_INT 6
23433: PPUSH
23434: LD_INT 3
23436: PPUSH
23437: LD_INT 3
23439: PPUSH
23440: LD_INT 4
23442: PPUSH
23443: CALL_OW 12
23447: PUSH
23448: LD_INT 4
23450: PPUSH
23451: LD_INT 6
23453: PPUSH
23454: CALL_OW 12
23458: PUSH
23459: LD_INT 5
23461: PPUSH
23462: LD_INT 6
23464: PPUSH
23465: CALL_OW 12
23469: PUSH
23470: LD_INT 6
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: PUSH
23479: LD_OWVAR 67
23483: ARRAY
23484: PPUSH
23485: LD_INT 0
23487: PPUSH
23488: LD_INT 0
23490: PPUSH
23491: LD_INT 0
23493: PPUSH
23494: LD_INT 0
23496: PPUSH
23497: LD_EXP 25
23501: PPUSH
23502: LD_EXP 26
23506: PPUSH
23507: CALL_OW 12
23511: PPUSH
23512: LD_INT 16
23514: PPUSH
23515: LD_INT 7
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: LD_INT 1
23523: PPUSH
23524: LD_INT 3
23526: PPUSH
23527: CALL_OW 12
23531: PPUSH
23532: CALL 12645 0 12
23536: END
// every 1 1$40 trigger firstAttack = 1 do
23537: LD_EXP 33
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23641
23547: GO 23549
23549: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23550: LD_INT 16
23552: PPUSH
23553: LD_INT 6
23555: PPUSH
23556: LD_INT 3
23558: PPUSH
23559: LD_INT 4
23561: PPUSH
23562: CALL_OW 12
23566: PUSH
23567: LD_INT 4
23569: PPUSH
23570: LD_INT 5
23572: PPUSH
23573: CALL_OW 12
23577: PUSH
23578: LD_INT 5
23580: PUSH
23581: LD_INT 6
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: PUSH
23590: LD_OWVAR 67
23594: ARRAY
23595: PPUSH
23596: LD_EXP 25
23600: PPUSH
23601: LD_EXP 26
23605: PPUSH
23606: CALL_OW 12
23610: PPUSH
23611: LD_INT 3
23613: PPUSH
23614: LD_INT 1
23616: PPUSH
23617: LD_INT 3
23619: PPUSH
23620: LD_INT 44
23622: PUSH
23623: LD_INT 46
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PPUSH
23630: EMPTY
23631: PPUSH
23632: EMPTY
23633: PPUSH
23634: LD_INT 1
23636: PPUSH
23637: CALL 14938 0 11
23641: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23642: LD_EXP 33
23646: PUSH
23647: LD_INT 1
23649: EQUAL
23650: PUSH
23651: LD_EXP 39
23655: PUSH
23656: LD_INT 0
23658: EQUAL
23659: AND
23660: IFFALSE 23770
23662: GO 23664
23664: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23665: LD_INT 6
23667: PPUSH
23668: LD_INT 3
23670: PPUSH
23671: LD_INT 4
23673: PPUSH
23674: LD_INT 5
23676: PPUSH
23677: CALL_OW 12
23681: PUSH
23682: LD_INT 5
23684: PPUSH
23685: LD_INT 6
23687: PPUSH
23688: CALL_OW 12
23692: PUSH
23693: LD_INT 5
23695: PPUSH
23696: LD_INT 6
23698: PPUSH
23699: CALL_OW 12
23703: PUSH
23704: LD_INT 6
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: PUSH
23713: LD_OWVAR 67
23717: ARRAY
23718: PPUSH
23719: LD_INT 0
23721: PPUSH
23722: LD_INT 0
23724: PPUSH
23725: LD_INT 0
23727: PPUSH
23728: LD_INT 0
23730: PPUSH
23731: LD_EXP 25
23735: PPUSH
23736: LD_EXP 26
23740: PPUSH
23741: CALL_OW 12
23745: PPUSH
23746: LD_INT 16
23748: PPUSH
23749: LD_INT 7
23751: PPUSH
23752: LD_INT 1
23754: PPUSH
23755: LD_INT 1
23757: PPUSH
23758: LD_INT 3
23760: PPUSH
23761: CALL_OW 12
23765: PPUSH
23766: CALL 12645 0 12
23770: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23771: LD_EXP 33
23775: PUSH
23776: LD_INT 1
23778: EQUAL
23779: PUSH
23780: LD_EXP 39
23784: PUSH
23785: LD_INT 0
23787: EQUAL
23788: AND
23789: IFFALSE 23889
23791: GO 23793
23793: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23794: LD_INT 16
23796: PPUSH
23797: LD_INT 6
23799: PPUSH
23800: LD_INT 4
23802: PPUSH
23803: LD_INT 5
23805: PPUSH
23806: CALL_OW 12
23810: PUSH
23811: LD_INT 6
23813: PPUSH
23814: LD_INT 7
23816: PPUSH
23817: CALL_OW 12
23821: PUSH
23822: LD_INT 7
23824: PUSH
23825: LD_INT 7
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: PUSH
23834: LD_OWVAR 67
23838: ARRAY
23839: PPUSH
23840: LD_EXP 25
23844: PPUSH
23845: LD_EXP 26
23849: PPUSH
23850: CALL_OW 12
23854: PPUSH
23855: LD_INT 3
23857: PPUSH
23858: LD_INT 1
23860: PPUSH
23861: LD_INT 3
23863: PPUSH
23864: LD_INT 43
23866: PUSH
23867: LD_INT 44
23869: PUSH
23870: LD_INT 46
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: PPUSH
23878: EMPTY
23879: PPUSH
23880: EMPTY
23881: PPUSH
23882: LD_INT 1
23884: PPUSH
23885: CALL 14938 0 11
23889: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23890: LD_EXP 33
23894: PUSH
23895: LD_INT 1
23897: EQUAL
23898: PUSH
23899: LD_EXP 39
23903: PUSH
23904: LD_INT 0
23906: EQUAL
23907: AND
23908: IFFALSE 24008
23910: GO 23912
23912: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23913: LD_INT 16
23915: PPUSH
23916: LD_INT 6
23918: PPUSH
23919: LD_INT 4
23921: PPUSH
23922: LD_INT 5
23924: PPUSH
23925: CALL_OW 12
23929: PUSH
23930: LD_INT 6
23932: PPUSH
23933: LD_INT 7
23935: PPUSH
23936: CALL_OW 12
23940: PUSH
23941: LD_INT 7
23943: PUSH
23944: LD_INT 8
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: PUSH
23953: LD_OWVAR 67
23957: ARRAY
23958: PPUSH
23959: LD_EXP 25
23963: PPUSH
23964: LD_EXP 26
23968: PPUSH
23969: CALL_OW 12
23973: PPUSH
23974: LD_INT 3
23976: PPUSH
23977: LD_INT 1
23979: PPUSH
23980: LD_INT 3
23982: PPUSH
23983: LD_INT 43
23985: PUSH
23986: LD_INT 44
23988: PUSH
23989: LD_INT 46
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: PPUSH
23997: EMPTY
23998: PPUSH
23999: EMPTY
24000: PPUSH
24001: LD_INT 1
24003: PPUSH
24004: CALL 14938 0 11
24008: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
24009: LD_EXP 33
24013: PUSH
24014: LD_INT 1
24016: EQUAL
24017: PUSH
24018: LD_EXP 39
24022: PUSH
24023: LD_INT 0
24025: EQUAL
24026: AND
24027: IFFALSE 24107
24029: GO 24031
24031: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24032: LD_INT 16
24034: PPUSH
24035: LD_INT 6
24037: PPUSH
24038: LD_INT 4
24040: PUSH
24041: LD_INT 6
24043: PUSH
24044: LD_INT 7
24046: PUSH
24047: LD_INT 8
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: LD_OWVAR 67
24060: ARRAY
24061: PPUSH
24062: LD_EXP 25
24066: PPUSH
24067: LD_EXP 26
24071: PPUSH
24072: CALL_OW 12
24076: PPUSH
24077: LD_INT 3
24079: PPUSH
24080: LD_INT 1
24082: PPUSH
24083: LD_INT 3
24085: PPUSH
24086: LD_INT 44
24088: PUSH
24089: LD_INT 46
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PPUSH
24096: EMPTY
24097: PPUSH
24098: EMPTY
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: CALL 14938 0 11
24107: END
// every 1 1$00 trigger secondAttack = 1 do
24108: LD_EXP 34
24112: PUSH
24113: LD_INT 1
24115: EQUAL
24116: IFFALSE 24202
24118: GO 24120
24120: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24121: LD_INT 6
24123: PPUSH
24124: LD_INT 3
24126: PPUSH
24127: LD_INT 3
24129: PUSH
24130: LD_INT 4
24132: PUSH
24133: LD_INT 5
24135: PUSH
24136: LD_INT 6
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: PUSH
24145: LD_OWVAR 67
24149: ARRAY
24150: PPUSH
24151: LD_INT 0
24153: PPUSH
24154: LD_INT 0
24156: PPUSH
24157: LD_INT 0
24159: PPUSH
24160: LD_INT 0
24162: PPUSH
24163: LD_EXP 25
24167: PPUSH
24168: LD_EXP 26
24172: PPUSH
24173: CALL_OW 12
24177: PPUSH
24178: LD_INT 16
24180: PPUSH
24181: LD_INT 7
24183: PPUSH
24184: LD_INT 1
24186: PPUSH
24187: LD_INT 1
24189: PPUSH
24190: LD_INT 3
24192: PPUSH
24193: CALL_OW 12
24197: PPUSH
24198: CALL 12645 0 12
24202: END
// every 1 1$00 trigger secondAttack = 1 do
24203: LD_EXP 34
24207: PUSH
24208: LD_INT 1
24210: EQUAL
24211: IFFALSE 24319
24213: GO 24215
24215: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
24216: LD_INT 16
24218: PPUSH
24219: LD_INT 6
24221: PPUSH
24222: LD_INT 5
24224: PPUSH
24225: LD_INT 6
24227: PPUSH
24228: CALL_OW 12
24232: PUSH
24233: LD_INT 6
24235: PPUSH
24236: LD_INT 9
24238: PPUSH
24239: CALL_OW 12
24243: PUSH
24244: LD_INT 7
24246: PPUSH
24247: LD_INT 9
24249: PPUSH
24250: CALL_OW 12
24254: PUSH
24255: LD_INT 9
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: PUSH
24264: LD_OWVAR 67
24268: ARRAY
24269: PPUSH
24270: LD_EXP 25
24274: PPUSH
24275: LD_EXP 26
24279: PPUSH
24280: CALL_OW 12
24284: PPUSH
24285: LD_INT 3
24287: PPUSH
24288: LD_INT 1
24290: PPUSH
24291: LD_INT 3
24293: PPUSH
24294: LD_INT 43
24296: PUSH
24297: LD_INT 44
24299: PUSH
24300: LD_INT 46
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: PPUSH
24308: EMPTY
24309: PPUSH
24310: EMPTY
24311: PPUSH
24312: LD_INT 1
24314: PPUSH
24315: CALL 14938 0 11
24319: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24320: LD_EXP 18
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: IFFALSE 24410
24330: GO 24332
24332: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24333: LD_INT 6
24335: PPUSH
24336: LD_INT 3
24338: PPUSH
24339: LD_INT 3
24341: PUSH
24342: LD_INT 4
24344: PUSH
24345: LD_INT 5
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: LD_OWVAR 67
24357: ARRAY
24358: PPUSH
24359: LD_INT 0
24361: PPUSH
24362: LD_INT 0
24364: PPUSH
24365: LD_INT 0
24367: PPUSH
24368: LD_INT 0
24370: PPUSH
24371: LD_EXP 25
24375: PPUSH
24376: LD_EXP 26
24380: PPUSH
24381: CALL_OW 12
24385: PPUSH
24386: LD_INT 16
24388: PPUSH
24389: LD_INT 7
24391: PPUSH
24392: LD_INT 1
24394: PPUSH
24395: LD_INT 1
24397: PPUSH
24398: LD_INT 3
24400: PPUSH
24401: CALL_OW 12
24405: PPUSH
24406: CALL 12645 0 12
24410: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24411: LD_EXP 18
24415: PUSH
24416: LD_INT 0
24418: EQUAL
24419: IFFALSE 24523
24421: GO 24423
24423: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24424: LD_INT 16
24426: PPUSH
24427: LD_INT 6
24429: PPUSH
24430: LD_INT 5
24432: PPUSH
24433: LD_INT 6
24435: PPUSH
24436: CALL_OW 12
24440: PUSH
24441: LD_INT 6
24443: PPUSH
24444: LD_INT 9
24446: PPUSH
24447: CALL_OW 12
24451: PUSH
24452: LD_INT 7
24454: PPUSH
24455: LD_INT 9
24457: PPUSH
24458: CALL_OW 12
24462: PUSH
24463: LD_INT 9
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: PUSH
24472: LD_OWVAR 67
24476: ARRAY
24477: PPUSH
24478: LD_EXP 25
24482: PPUSH
24483: LD_EXP 26
24487: PPUSH
24488: CALL_OW 12
24492: PPUSH
24493: LD_INT 3
24495: PPUSH
24496: LD_INT 1
24498: PPUSH
24499: LD_INT 3
24501: PPUSH
24502: LD_INT 44
24504: PUSH
24505: LD_INT 46
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PPUSH
24512: EMPTY
24513: PPUSH
24514: EMPTY
24515: PPUSH
24516: LD_INT 1
24518: PPUSH
24519: CALL 14938 0 11
24523: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24524: LD_EXP 18
24528: PUSH
24529: LD_INT 0
24531: EQUAL
24532: IFFALSE 24614
24534: GO 24536
24536: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24537: LD_INT 6
24539: PPUSH
24540: LD_INT 3
24542: PPUSH
24543: LD_INT 3
24545: PUSH
24546: LD_INT 4
24548: PUSH
24549: LD_INT 5
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: LD_OWVAR 67
24561: ARRAY
24562: PPUSH
24563: LD_INT 0
24565: PPUSH
24566: LD_INT 0
24568: PPUSH
24569: LD_INT 0
24571: PPUSH
24572: LD_INT 0
24574: PPUSH
24575: LD_EXP 25
24579: PPUSH
24580: LD_EXP 26
24584: PPUSH
24585: CALL_OW 12
24589: PPUSH
24590: LD_INT 16
24592: PPUSH
24593: LD_INT 7
24595: PPUSH
24596: LD_INT 1
24598: PPUSH
24599: LD_INT 1
24601: PPUSH
24602: LD_INT 3
24604: PPUSH
24605: CALL_OW 12
24609: PPUSH
24610: CALL 12645 0 12
24614: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24615: LD_EXP 18
24619: PUSH
24620: LD_INT 0
24622: EQUAL
24623: IFFALSE 24727
24625: GO 24627
24627: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24628: LD_INT 16
24630: PPUSH
24631: LD_INT 6
24633: PPUSH
24634: LD_INT 5
24636: PPUSH
24637: LD_INT 6
24639: PPUSH
24640: CALL_OW 12
24644: PUSH
24645: LD_INT 6
24647: PPUSH
24648: LD_INT 9
24650: PPUSH
24651: CALL_OW 12
24655: PUSH
24656: LD_INT 7
24658: PPUSH
24659: LD_INT 9
24661: PPUSH
24662: CALL_OW 12
24666: PUSH
24667: LD_INT 9
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: PUSH
24676: LD_OWVAR 67
24680: ARRAY
24681: PPUSH
24682: LD_EXP 25
24686: PPUSH
24687: LD_EXP 26
24691: PPUSH
24692: CALL_OW 12
24696: PPUSH
24697: LD_INT 3
24699: PPUSH
24700: LD_INT 1
24702: PPUSH
24703: LD_INT 3
24705: PPUSH
24706: LD_INT 44
24708: PUSH
24709: LD_INT 46
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PPUSH
24716: EMPTY
24717: PPUSH
24718: EMPTY
24719: PPUSH
24720: LD_INT 1
24722: PPUSH
24723: CALL 14938 0 11
24727: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24728: LD_EXP 18
24732: PUSH
24733: LD_INT 0
24735: EQUAL
24736: IFFALSE 24822
24738: GO 24740
24740: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24741: LD_INT 6
24743: PPUSH
24744: LD_INT 3
24746: PPUSH
24747: LD_INT 3
24749: PUSH
24750: LD_INT 4
24752: PUSH
24753: LD_INT 5
24755: PUSH
24756: LD_INT 6
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: PUSH
24765: LD_OWVAR 67
24769: ARRAY
24770: PPUSH
24771: LD_INT 0
24773: PPUSH
24774: LD_INT 0
24776: PPUSH
24777: LD_INT 0
24779: PPUSH
24780: LD_INT 0
24782: PPUSH
24783: LD_EXP 25
24787: PPUSH
24788: LD_EXP 26
24792: PPUSH
24793: CALL_OW 12
24797: PPUSH
24798: LD_INT 16
24800: PPUSH
24801: LD_INT 7
24803: PPUSH
24804: LD_INT 1
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: LD_INT 3
24812: PPUSH
24813: CALL_OW 12
24817: PPUSH
24818: CALL 12645 0 12
24822: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24823: LD_EXP 18
24827: PUSH
24828: LD_INT 0
24830: EQUAL
24831: IFFALSE 24911
24833: GO 24835
24835: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24836: LD_INT 16
24838: PPUSH
24839: LD_INT 6
24841: PPUSH
24842: LD_INT 7
24844: PUSH
24845: LD_INT 8
24847: PUSH
24848: LD_INT 9
24850: PUSH
24851: LD_INT 10
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: PUSH
24860: LD_OWVAR 67
24864: ARRAY
24865: PPUSH
24866: LD_EXP 25
24870: PPUSH
24871: LD_EXP 26
24875: PPUSH
24876: CALL_OW 12
24880: PPUSH
24881: LD_INT 3
24883: PPUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 3
24889: PPUSH
24890: LD_INT 44
24892: PUSH
24893: LD_INT 46
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PPUSH
24900: EMPTY
24901: PPUSH
24902: EMPTY
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL 14938 0 11
24911: END
// every 0 0$1 trigger timerStatus = 1 do
24912: LD_EXP 35
24916: PUSH
24917: LD_INT 1
24919: EQUAL
24920: IFFALSE 24980
24922: GO 24924
24924: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24925: LD_INT 35
24927: PPUSH
24928: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24932: LD_ADDR_OWVAR 47
24936: PUSH
24937: LD_STRING #Am08-1
24939: PUSH
24940: LD_EXP 19
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24949: LD_ADDR_EXP 19
24953: PUSH
24954: LD_EXP 19
24958: PUSH
24959: LD_INT 35
24961: MINUS
24962: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24963: LD_EXP 19
24967: PUSH
24968: LD_INT 0
24970: EQUAL
24971: IFFALSE 24925
// display_strings := [ ] ;
24973: LD_ADDR_OWVAR 47
24977: PUSH
24978: EMPTY
24979: ST_TO_ADDR
// end ; end_of_file
24980: END
// every 1 1$0 do
24981: GO 24983
24983: DISABLE
// begin if supply <= 13 and supply > 7 then
24984: LD_EXP 40
24988: PUSH
24989: LD_INT 13
24991: LESSEQUAL
24992: PUSH
24993: LD_EXP 40
24997: PUSH
24998: LD_INT 7
25000: GREATER
25001: AND
25002: IFFALSE 25025
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
25004: LD_INT 3
25006: PPUSH
25007: LD_INT 5
25009: PPUSH
25010: CALL_OW 12
25014: PPUSH
25015: LD_INT 5
25017: PPUSH
25018: LD_INT 1
25020: PPUSH
25021: CALL_OW 55
// if supply <= 7 and supply > 4 then
25025: LD_EXP 40
25029: PUSH
25030: LD_INT 7
25032: LESSEQUAL
25033: PUSH
25034: LD_EXP 40
25038: PUSH
25039: LD_INT 4
25041: GREATER
25042: AND
25043: IFFALSE 25066
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
25045: LD_INT 3
25047: PPUSH
25048: LD_INT 5
25050: PPUSH
25051: CALL_OW 12
25055: PPUSH
25056: LD_INT 20
25058: PPUSH
25059: LD_INT 1
25061: PPUSH
25062: CALL_OW 55
// if supply <= 4 and supply > 0 then
25066: LD_EXP 40
25070: PUSH
25071: LD_INT 4
25073: LESSEQUAL
25074: PUSH
25075: LD_EXP 40
25079: PUSH
25080: LD_INT 0
25082: GREATER
25083: AND
25084: IFFALSE 25107
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
25086: LD_INT 3
25088: PPUSH
25089: LD_INT 5
25091: PPUSH
25092: CALL_OW 12
25096: PPUSH
25097: LD_INT 21
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: CALL_OW 55
// if supply > 0 then
25107: LD_EXP 40
25111: PUSH
25112: LD_INT 0
25114: GREATER
25115: IFFALSE 25132
// begin supply = supply - 1 ;
25117: LD_ADDR_EXP 40
25121: PUSH
25122: LD_EXP 40
25126: PUSH
25127: LD_INT 1
25129: MINUS
25130: ST_TO_ADDR
// enable ;
25131: ENABLE
// end ; end ; end_of_file
25132: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
25133: LD_EXP 39
25137: PUSH
25138: LD_INT 1
25140: EQUAL
25141: PUSH
25142: LD_EXP 1
25146: PPUSH
25147: CALL_OW 301
25151: AND
25152: IFFALSE 25164
25154: GO 25156
25156: DISABLE
// YouLost ( JMM ) ;
25157: LD_STRING JMM
25159: PPUSH
25160: CALL_OW 104
25164: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
25165: LD_EXP 18
25169: PUSH
25170: LD_INT 1
25172: EQUAL
25173: PUSH
25174: LD_EXP 16
25178: PPUSH
25179: CALL_OW 301
25183: AND
25184: IFFALSE 25216
25186: GO 25188
25188: DISABLE
// begin DialogueOn ;
25189: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25193: LD_EXP 23
25197: PPUSH
25198: LD_STRING D8a-Pow-1
25200: PPUSH
25201: CALL_OW 94
// DialogueOff ;
25205: CALL_OW 7
// YouLost ( Dismissed ) ;
25209: LD_STRING Dismissed
25211: PPUSH
25212: CALL_OW 104
// end ;
25216: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25217: LD_INT 22
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 30
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 30
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: LIST
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL_OW 69
25263: PUSH
25264: LD_INT 0
25266: EQUAL
25267: IFFALSE 25279
25269: GO 25271
25271: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25272: LD_STRING Destroyed
25274: PPUSH
25275: CALL_OW 104
25279: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25280: LD_EXP 24
25284: PPUSH
25285: CALL_OW 301
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 3
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 21
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: PUSH
25319: LD_INT 7
25321: PUSH
25322: LD_INT 6
25324: PUSH
25325: LD_INT 5
25327: PUSH
25328: LD_INT 5
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: PUSH
25337: LD_OWVAR 67
25341: ARRAY
25342: LESS
25343: AND
25344: PUSH
25345: LD_EXP 1
25349: PPUSH
25350: CALL_OW 305
25354: AND
25355: IFFALSE 25911
25357: GO 25359
25359: DISABLE
25360: LD_INT 0
25362: PPUSH
25363: PPUSH
25364: PPUSH
// begin russianAI = 0 ;
25365: LD_ADDR_EXP 27
25369: PUSH
25370: LD_INT 0
25372: ST_TO_ADDR
// escapeAvalaible = 1 ;
25373: LD_ADDR_EXP 36
25377: PUSH
25378: LD_INT 1
25380: ST_TO_ADDR
// Video ( true ) ;
25381: LD_INT 1
25383: PPUSH
25384: CALL 81136 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25388: LD_INT 3
25390: PPUSH
25391: LD_INT 1
25393: PPUSH
25394: LD_INT 1
25396: PPUSH
25397: LD_INT 0
25399: PPUSH
25400: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25404: LD_INT 6
25406: PPUSH
25407: LD_INT 1
25409: PPUSH
25410: LD_INT 1
25412: PPUSH
25413: LD_INT 0
25415: PPUSH
25416: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25420: LD_INT 3
25422: PPUSH
25423: LD_INT 1
25425: PPUSH
25426: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25430: LD_INT 97
25432: PPUSH
25433: LD_INT 91
25435: PPUSH
25436: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25440: LD_INT 22
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 21
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PPUSH
25464: CALL_OW 69
25468: PPUSH
25469: CALL_OW 121
// wait ( 0 0$01 ) ;
25473: LD_INT 35
25475: PPUSH
25476: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25480: LD_INT 22
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 21
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PPUSH
25504: CALL_OW 69
25508: PPUSH
25509: LD_INT 124
25511: PPUSH
25512: LD_INT 98
25514: PPUSH
25515: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25519: LD_INT 22
25521: PUSH
25522: LD_INT 6
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 21
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PPUSH
25543: CALL_OW 69
25547: PPUSH
25548: CALL_OW 121
// wait ( 0 0$01 ) ;
25552: LD_INT 35
25554: PPUSH
25555: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25559: LD_INT 22
25561: PUSH
25562: LD_INT 6
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL_OW 69
25587: PPUSH
25588: LD_INT 124
25590: PPUSH
25591: LD_INT 98
25593: PPUSH
25594: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25598: LD_INT 22
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 21
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 3
25620: PUSH
25621: LD_INT 54
25623: PUSH
25624: EMPTY
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: PPUSH
25636: CALL_OW 69
25640: PPUSH
25641: LD_INT 124
25643: PPUSH
25644: LD_INT 98
25646: PPUSH
25647: CALL_OW 114
// wait ( 0 0$4 ) ;
25651: LD_INT 140
25653: PPUSH
25654: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25658: LD_INT 124
25660: PPUSH
25661: LD_INT 98
25663: PPUSH
25664: CALL_OW 84
// if SikorskyStatus = 1 then
25668: LD_EXP 21
25672: PUSH
25673: LD_INT 1
25675: EQUAL
25676: IFFALSE 25690
// Say ( Sikorski , D9-Sik-1 ) ;
25678: LD_EXP 16
25682: PPUSH
25683: LD_STRING D9-Sik-1
25685: PPUSH
25686: CALL_OW 88
// if SikorskyStatus = 2 then
25690: LD_EXP 21
25694: PUSH
25695: LD_INT 2
25697: EQUAL
25698: IFFALSE 25719
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25700: LD_EXP 23
25704: PPUSH
25705: LD_STRING D8b-Pow-1
25707: PPUSH
25708: CALL_OW 94
// YouLost ( Dismissed ) ;
25712: LD_STRING Dismissed
25714: PPUSH
25715: CALL_OW 104
// end ; p := 0 0$0 ;
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_INT 0
25726: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25727: LD_ADDR_VAR 0 2
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 22
25737: PUSH
25738: LD_INT 3
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 22
25747: PUSH
25748: LD_INT 6
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 21
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 69
25778: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25779: LD_INT 35
25781: PPUSH
25782: CALL_OW 67
// p := p + 0 0$1 ;
25786: LD_ADDR_VAR 0 3
25790: PUSH
25791: LD_VAR 0 3
25795: PUSH
25796: LD_INT 35
25798: PLUS
25799: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25800: LD_VAR 0 2
25804: PPUSH
25805: LD_INT 22
25807: PPUSH
25808: CALL_OW 113
// for i in tmp do
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: LD_VAR 0 2
25821: PUSH
25822: FOR_IN
25823: IFFALSE 25850
// if IsInArea ( i , RussianEscape ) then
25825: LD_VAR 0 1
25829: PPUSH
25830: LD_INT 22
25832: PPUSH
25833: CALL_OW 308
25837: IFFALSE 25848
// RemoveUnit ( i ) ;
25839: LD_VAR 0 1
25843: PPUSH
25844: CALL_OW 64
25848: GO 25822
25850: POP
25851: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25852: LD_INT 23
25854: PUSH
25855: LD_INT 3
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 21
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 24
25874: PUSH
25875: LD_INT 250
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: PPUSH
25887: CALL_OW 69
25891: PUSH
25892: LD_INT 0
25894: EQUAL
25895: PUSH
25896: LD_VAR 0 3
25900: PUSH
25901: LD_INT 245
25903: GREATEREQUAL
25904: OR
25905: IFFALSE 25779
// FinishMission ;
25907: CALL 25914 0 0
// end ;
25911: PPOPN 3
25913: END
// export function FinishMission ; var tmp ; begin
25914: LD_INT 0
25916: PPUSH
25917: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25918: LD_INT 22
25920: PUSH
25921: LD_INT 4
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PPUSH
25928: CALL_OW 69
25932: PUSH
25933: LD_INT 0
25935: EQUAL
25936: IFFALSE 25945
// SetAchievement ( ACH_BLITZKRIEG ) ;
25938: LD_STRING ACH_BLITZKRIEG
25940: PPUSH
25941: CALL_OW 543
// if tick <= 25 25$00 then
25945: LD_OWVAR 1
25949: PUSH
25950: LD_INT 52500
25952: LESSEQUAL
25953: IFFALSE 25969
// begin wait ( 3 ) ;
25955: LD_INT 3
25957: PPUSH
25958: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25962: LD_STRING ACH_ASPEED_8
25964: PPUSH
25965: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25969: LD_STRING med1
25971: PPUSH
25972: LD_INT 1
25974: PPUSH
25975: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
25979: LD_STRING med2
25981: PPUSH
25982: LD_INT 1
25984: PPUSH
25985: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
25989: LD_STRING perfect
25991: PPUSH
25992: LD_INT 1
25994: PPUSH
25995: CALL_OW 101
// if Difficulty >= 3 then
25999: LD_OWVAR 67
26003: PUSH
26004: LD_INT 3
26006: GREATEREQUAL
26007: IFFALSE 26019
// SetAchievementEX ( ACH_AMER , 8 ) ;
26009: LD_STRING ACH_AMER
26011: PPUSH
26012: LD_INT 8
26014: PPUSH
26015: CALL_OW 564
// GiveMedals ( Main ) ;
26019: LD_STRING Main
26021: PPUSH
26022: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
26026: LD_INT 22
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 23
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 21
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: LD_INT 25
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 25
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 25
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 25
26091: PUSH
26092: LD_INT 4
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: PPUSH
26112: CALL_OW 69
26116: PPUSH
26117: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26121: LD_EXP 1
26125: PPUSH
26126: LD_EXP 43
26130: PUSH
26131: LD_STRING JMM
26133: STR
26134: PPUSH
26135: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26139: LD_EXP 2
26143: PPUSH
26144: LD_EXP 43
26148: PUSH
26149: LD_STRING Brown
26151: STR
26152: PPUSH
26153: CALL 8488 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26157: LD_EXP 3
26161: PPUSH
26162: LD_EXP 43
26166: PUSH
26167: LD_STRING Donaldson
26169: STR
26170: PPUSH
26171: CALL 8488 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26175: LD_EXP 4
26179: PPUSH
26180: LD_EXP 43
26184: PUSH
26185: LD_STRING Bobby
26187: STR
26188: PPUSH
26189: CALL 8488 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26193: LD_EXP 5
26197: PPUSH
26198: LD_EXP 43
26202: PUSH
26203: LD_STRING Cyrus
26205: STR
26206: PPUSH
26207: CALL 8488 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26211: LD_EXP 6
26215: PPUSH
26216: LD_EXP 43
26220: PUSH
26221: LD_STRING Lisa
26223: STR
26224: PPUSH
26225: CALL 8488 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26229: LD_EXP 7
26233: PPUSH
26234: LD_EXP 43
26238: PUSH
26239: LD_STRING Frank
26241: STR
26242: PPUSH
26243: CALL 8488 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26247: LD_EXP 8
26251: PPUSH
26252: LD_EXP 43
26256: PUSH
26257: LD_STRING Gladstone
26259: STR
26260: PPUSH
26261: CALL 8488 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26265: LD_EXP 9
26269: PPUSH
26270: LD_EXP 43
26274: PUSH
26275: LD_STRING Kikuchi
26277: STR
26278: PPUSH
26279: CALL 8488 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26283: LD_EXP 14
26287: PPUSH
26288: LD_EXP 43
26292: PUSH
26293: LD_STRING Denis
26295: STR
26296: PPUSH
26297: CALL 8488 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26301: LD_EXP 15
26305: PPUSH
26306: LD_EXP 43
26310: PUSH
26311: LD_STRING Joan
26313: STR
26314: PPUSH
26315: CALL 8488 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26319: LD_EXP 10
26323: PPUSH
26324: LD_EXP 43
26328: PUSH
26329: LD_STRING Khatam
26331: STR
26332: PPUSH
26333: CALL 8488 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26337: LD_EXP 13
26341: PPUSH
26342: LD_EXP 43
26346: PUSH
26347: LD_STRING Houten
26349: STR
26350: PPUSH
26351: CALL 8488 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26355: LD_INT 50
26357: PUSH
26358: EMPTY
26359: LIST
26360: PUSH
26361: LD_INT 22
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 21
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 25
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 25
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 25
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 25
26416: PUSH
26417: LD_INT 4
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: PPUSH
26437: CALL_OW 69
26441: PUSH
26442: LD_EXP 1
26446: PUSH
26447: LD_EXP 2
26451: PUSH
26452: LD_EXP 3
26456: PUSH
26457: LD_EXP 4
26461: PUSH
26462: LD_EXP 5
26466: PUSH
26467: LD_EXP 6
26471: PUSH
26472: LD_EXP 7
26476: PUSH
26477: LD_EXP 8
26481: PUSH
26482: LD_EXP 9
26486: PUSH
26487: LD_EXP 14
26491: PUSH
26492: LD_EXP 15
26496: PUSH
26497: LD_EXP 13
26501: PUSH
26502: LD_EXP 10
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: DIFF
26522: PPUSH
26523: LD_STRING 08_other_survivors
26525: PPUSH
26526: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26530: LD_INT 23
26532: PPUSH
26533: CALL 26546 0 1
// YouWin ;
26537: CALL_OW 103
// end ;
26541: LD_VAR 0 1
26545: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26546: LD_INT 0
26548: PPUSH
26549: PPUSH
26550: PPUSH
26551: PPUSH
// gammaBase = [ ] ;
26552: LD_ADDR_VAR 0 4
26556: PUSH
26557: EMPTY
26558: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26559: LD_ADDR_VAR 0 5
26563: PUSH
26564: LD_VAR 0 1
26568: PPUSH
26569: LD_INT 22
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 21
26581: PUSH
26582: LD_INT 3
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 50
26591: PUSH
26592: EMPTY
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: LIST
26599: PPUSH
26600: CALL_OW 70
26604: ST_TO_ADDR
// for i in buildings do
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: LD_VAR 0 5
26614: PUSH
26615: FOR_IN
26616: IFFALSE 27053
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26618: LD_VAR 0 3
26622: PPUSH
26623: CALL_OW 266
26627: PUSH
26628: LD_INT 6
26630: PUSH
26631: LD_INT 7
26633: PUSH
26634: LD_INT 8
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: IN
26642: IFFALSE 26756
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26644: LD_ADDR_VAR 0 4
26648: PUSH
26649: LD_VAR 0 4
26653: PUSH
26654: LD_VAR 0 3
26658: PPUSH
26659: CALL_OW 266
26663: PUSH
26664: LD_VAR 0 3
26668: PPUSH
26669: CALL_OW 250
26673: PUSH
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 251
26683: PUSH
26684: LD_VAR 0 3
26688: PPUSH
26689: CALL_OW 254
26693: PUSH
26694: LD_VAR 0 3
26698: PPUSH
26699: CALL_OW 267
26703: PUSH
26704: LD_VAR 0 3
26708: PPUSH
26709: CALL_OW 248
26713: PUSH
26714: LD_VAR 0 3
26718: PPUSH
26719: LD_INT 1
26721: PPUSH
26722: CALL_OW 268
26726: PUSH
26727: LD_VAR 0 3
26731: PPUSH
26732: LD_INT 2
26734: PPUSH
26735: CALL_OW 268
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: ADD
26753: ST_TO_ADDR
26754: GO 27051
// if GetBType ( i ) = b_bunker then
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 266
26765: PUSH
26766: LD_INT 32
26768: EQUAL
26769: IFFALSE 26866
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26771: LD_ADDR_VAR 0 4
26775: PUSH
26776: LD_VAR 0 4
26780: PUSH
26781: LD_VAR 0 3
26785: PPUSH
26786: CALL_OW 266
26790: PUSH
26791: LD_VAR 0 3
26795: PPUSH
26796: CALL_OW 250
26800: PUSH
26801: LD_VAR 0 3
26805: PPUSH
26806: CALL_OW 251
26810: PUSH
26811: LD_VAR 0 3
26815: PPUSH
26816: CALL_OW 254
26820: PUSH
26821: LD_VAR 0 3
26825: PPUSH
26826: CALL_OW 267
26830: PUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 248
26840: PUSH
26841: LD_VAR 0 3
26845: PPUSH
26846: CALL_OW 269
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: ADD
26863: ST_TO_ADDR
26864: GO 27051
// if GetBType ( i ) = b_factory then
26866: LD_VAR 0 3
26870: PPUSH
26871: CALL_OW 266
26875: PUSH
26876: LD_INT 3
26878: EQUAL
26879: IFFALSE 26969
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26881: LD_ADDR_VAR 0 4
26885: PUSH
26886: LD_VAR 0 4
26890: PPUSH
26891: LD_INT 1
26893: PPUSH
26894: LD_VAR 0 3
26898: PPUSH
26899: CALL_OW 266
26903: PUSH
26904: LD_VAR 0 3
26908: PPUSH
26909: CALL_OW 250
26913: PUSH
26914: LD_VAR 0 3
26918: PPUSH
26919: CALL_OW 251
26923: PUSH
26924: LD_VAR 0 3
26928: PPUSH
26929: CALL_OW 254
26933: PUSH
26934: LD_VAR 0 3
26938: PPUSH
26939: CALL_OW 267
26943: PUSH
26944: LD_VAR 0 3
26948: PPUSH
26949: CALL_OW 248
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: PPUSH
26962: CALL_OW 2
26966: ST_TO_ADDR
26967: GO 27051
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26969: LD_ADDR_VAR 0 4
26973: PUSH
26974: LD_VAR 0 4
26978: PUSH
26979: LD_VAR 0 3
26983: PPUSH
26984: CALL_OW 266
26988: PUSH
26989: LD_VAR 0 3
26993: PPUSH
26994: CALL_OW 250
26998: PUSH
26999: LD_VAR 0 3
27003: PPUSH
27004: CALL_OW 251
27008: PUSH
27009: LD_VAR 0 3
27013: PPUSH
27014: CALL_OW 254
27018: PUSH
27019: LD_VAR 0 3
27023: PPUSH
27024: CALL_OW 267
27028: PUSH
27029: LD_VAR 0 3
27033: PPUSH
27034: CALL_OW 248
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: PUSH
27047: EMPTY
27048: LIST
27049: ADD
27050: ST_TO_ADDR
// end ;
27051: GO 26615
27053: POP
27054: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
27055: LD_VAR 0 4
27059: PPUSH
27060: LD_STRING 08_GammaBase
27062: PPUSH
27063: CALL_OW 39
// end ; end_of_file
27067: LD_VAR 0 2
27071: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27072: LD_INT 0
27074: PPUSH
// ar_miner := 81 ;
27075: LD_ADDR_EXP 55
27079: PUSH
27080: LD_INT 81
27082: ST_TO_ADDR
// ar_crane := 88 ;
27083: LD_ADDR_EXP 54
27087: PUSH
27088: LD_INT 88
27090: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27091: LD_ADDR_EXP 49
27095: PUSH
27096: LD_INT 89
27098: ST_TO_ADDR
// us_hack := 99 ;
27099: LD_ADDR_EXP 50
27103: PUSH
27104: LD_INT 99
27106: ST_TO_ADDR
// us_artillery := 97 ;
27107: LD_ADDR_EXP 51
27111: PUSH
27112: LD_INT 97
27114: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27115: LD_ADDR_EXP 52
27119: PUSH
27120: LD_INT 91
27122: ST_TO_ADDR
// ar_mortar := 92 ;
27123: LD_ADDR_EXP 53
27127: PUSH
27128: LD_INT 92
27130: ST_TO_ADDR
// ru_radar := 98 ;
27131: LD_ADDR_EXP 48
27135: PUSH
27136: LD_INT 98
27138: ST_TO_ADDR
// tech_Artillery := 80 ;
27139: LD_ADDR_EXP 56
27143: PUSH
27144: LD_INT 80
27146: ST_TO_ADDR
// tech_RadMat := 81 ;
27147: LD_ADDR_EXP 57
27151: PUSH
27152: LD_INT 81
27154: ST_TO_ADDR
// tech_BasicTools := 82 ;
27155: LD_ADDR_EXP 58
27159: PUSH
27160: LD_INT 82
27162: ST_TO_ADDR
// tech_Cargo := 83 ;
27163: LD_ADDR_EXP 59
27167: PUSH
27168: LD_INT 83
27170: ST_TO_ADDR
// tech_Track := 84 ;
27171: LD_ADDR_EXP 60
27175: PUSH
27176: LD_INT 84
27178: ST_TO_ADDR
// tech_Crane := 85 ;
27179: LD_ADDR_EXP 61
27183: PUSH
27184: LD_INT 85
27186: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27187: LD_ADDR_EXP 62
27191: PUSH
27192: LD_INT 86
27194: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27195: LD_ADDR_EXP 63
27199: PUSH
27200: LD_INT 87
27202: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27203: LD_ADDR_EXP 64
27207: PUSH
27208: LD_INT 88
27210: ST_TO_ADDR
// class_mastodont := 31 ;
27211: LD_ADDR_EXP 65
27215: PUSH
27216: LD_INT 31
27218: ST_TO_ADDR
// class_horse := 21 ;
27219: LD_ADDR_EXP 66
27223: PUSH
27224: LD_INT 21
27226: ST_TO_ADDR
// end ;
27227: LD_VAR 0 1
27231: RET
// every 1 do
27232: GO 27234
27234: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27235: CALL 27072 0 0
27239: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27240: LD_INT 0
27242: PPUSH
// if p2 = 100 then
27243: LD_VAR 0 2
27247: PUSH
27248: LD_INT 100
27250: EQUAL
27251: IFFALSE 28200
// begin if not StreamModeActive then
27253: LD_EXP 67
27257: NOT
27258: IFFALSE 27268
// StreamModeActive := true ;
27260: LD_ADDR_EXP 67
27264: PUSH
27265: LD_INT 1
27267: ST_TO_ADDR
// if p3 = 0 then
27268: LD_VAR 0 3
27272: PUSH
27273: LD_INT 0
27275: EQUAL
27276: IFFALSE 27282
// InitStreamMode ;
27278: CALL 28360 0 0
// if p3 = 1 then
27282: LD_VAR 0 3
27286: PUSH
27287: LD_INT 1
27289: EQUAL
27290: IFFALSE 27300
// sRocket := true ;
27292: LD_ADDR_EXP 72
27296: PUSH
27297: LD_INT 1
27299: ST_TO_ADDR
// if p3 = 2 then
27300: LD_VAR 0 3
27304: PUSH
27305: LD_INT 2
27307: EQUAL
27308: IFFALSE 27318
// sSpeed := true ;
27310: LD_ADDR_EXP 71
27314: PUSH
27315: LD_INT 1
27317: ST_TO_ADDR
// if p3 = 3 then
27318: LD_VAR 0 3
27322: PUSH
27323: LD_INT 3
27325: EQUAL
27326: IFFALSE 27336
// sEngine := true ;
27328: LD_ADDR_EXP 73
27332: PUSH
27333: LD_INT 1
27335: ST_TO_ADDR
// if p3 = 4 then
27336: LD_VAR 0 3
27340: PUSH
27341: LD_INT 4
27343: EQUAL
27344: IFFALSE 27354
// sSpec := true ;
27346: LD_ADDR_EXP 70
27350: PUSH
27351: LD_INT 1
27353: ST_TO_ADDR
// if p3 = 5 then
27354: LD_VAR 0 3
27358: PUSH
27359: LD_INT 5
27361: EQUAL
27362: IFFALSE 27372
// sLevel := true ;
27364: LD_ADDR_EXP 74
27368: PUSH
27369: LD_INT 1
27371: ST_TO_ADDR
// if p3 = 6 then
27372: LD_VAR 0 3
27376: PUSH
27377: LD_INT 6
27379: EQUAL
27380: IFFALSE 27390
// sArmoury := true ;
27382: LD_ADDR_EXP 75
27386: PUSH
27387: LD_INT 1
27389: ST_TO_ADDR
// if p3 = 7 then
27390: LD_VAR 0 3
27394: PUSH
27395: LD_INT 7
27397: EQUAL
27398: IFFALSE 27408
// sRadar := true ;
27400: LD_ADDR_EXP 76
27404: PUSH
27405: LD_INT 1
27407: ST_TO_ADDR
// if p3 = 8 then
27408: LD_VAR 0 3
27412: PUSH
27413: LD_INT 8
27415: EQUAL
27416: IFFALSE 27426
// sBunker := true ;
27418: LD_ADDR_EXP 77
27422: PUSH
27423: LD_INT 1
27425: ST_TO_ADDR
// if p3 = 9 then
27426: LD_VAR 0 3
27430: PUSH
27431: LD_INT 9
27433: EQUAL
27434: IFFALSE 27444
// sHack := true ;
27436: LD_ADDR_EXP 78
27440: PUSH
27441: LD_INT 1
27443: ST_TO_ADDR
// if p3 = 10 then
27444: LD_VAR 0 3
27448: PUSH
27449: LD_INT 10
27451: EQUAL
27452: IFFALSE 27462
// sFire := true ;
27454: LD_ADDR_EXP 79
27458: PUSH
27459: LD_INT 1
27461: ST_TO_ADDR
// if p3 = 11 then
27462: LD_VAR 0 3
27466: PUSH
27467: LD_INT 11
27469: EQUAL
27470: IFFALSE 27480
// sRefresh := true ;
27472: LD_ADDR_EXP 80
27476: PUSH
27477: LD_INT 1
27479: ST_TO_ADDR
// if p3 = 12 then
27480: LD_VAR 0 3
27484: PUSH
27485: LD_INT 12
27487: EQUAL
27488: IFFALSE 27498
// sExp := true ;
27490: LD_ADDR_EXP 81
27494: PUSH
27495: LD_INT 1
27497: ST_TO_ADDR
// if p3 = 13 then
27498: LD_VAR 0 3
27502: PUSH
27503: LD_INT 13
27505: EQUAL
27506: IFFALSE 27516
// sDepot := true ;
27508: LD_ADDR_EXP 82
27512: PUSH
27513: LD_INT 1
27515: ST_TO_ADDR
// if p3 = 14 then
27516: LD_VAR 0 3
27520: PUSH
27521: LD_INT 14
27523: EQUAL
27524: IFFALSE 27534
// sFlag := true ;
27526: LD_ADDR_EXP 83
27530: PUSH
27531: LD_INT 1
27533: ST_TO_ADDR
// if p3 = 15 then
27534: LD_VAR 0 3
27538: PUSH
27539: LD_INT 15
27541: EQUAL
27542: IFFALSE 27552
// sKamikadze := true ;
27544: LD_ADDR_EXP 91
27548: PUSH
27549: LD_INT 1
27551: ST_TO_ADDR
// if p3 = 16 then
27552: LD_VAR 0 3
27556: PUSH
27557: LD_INT 16
27559: EQUAL
27560: IFFALSE 27570
// sTroll := true ;
27562: LD_ADDR_EXP 92
27566: PUSH
27567: LD_INT 1
27569: ST_TO_ADDR
// if p3 = 17 then
27570: LD_VAR 0 3
27574: PUSH
27575: LD_INT 17
27577: EQUAL
27578: IFFALSE 27588
// sSlow := true ;
27580: LD_ADDR_EXP 93
27584: PUSH
27585: LD_INT 1
27587: ST_TO_ADDR
// if p3 = 18 then
27588: LD_VAR 0 3
27592: PUSH
27593: LD_INT 18
27595: EQUAL
27596: IFFALSE 27606
// sLack := true ;
27598: LD_ADDR_EXP 94
27602: PUSH
27603: LD_INT 1
27605: ST_TO_ADDR
// if p3 = 19 then
27606: LD_VAR 0 3
27610: PUSH
27611: LD_INT 19
27613: EQUAL
27614: IFFALSE 27624
// sTank := true ;
27616: LD_ADDR_EXP 96
27620: PUSH
27621: LD_INT 1
27623: ST_TO_ADDR
// if p3 = 20 then
27624: LD_VAR 0 3
27628: PUSH
27629: LD_INT 20
27631: EQUAL
27632: IFFALSE 27642
// sRemote := true ;
27634: LD_ADDR_EXP 97
27638: PUSH
27639: LD_INT 1
27641: ST_TO_ADDR
// if p3 = 21 then
27642: LD_VAR 0 3
27646: PUSH
27647: LD_INT 21
27649: EQUAL
27650: IFFALSE 27660
// sPowell := true ;
27652: LD_ADDR_EXP 98
27656: PUSH
27657: LD_INT 1
27659: ST_TO_ADDR
// if p3 = 22 then
27660: LD_VAR 0 3
27664: PUSH
27665: LD_INT 22
27667: EQUAL
27668: IFFALSE 27678
// sTeleport := true ;
27670: LD_ADDR_EXP 101
27674: PUSH
27675: LD_INT 1
27677: ST_TO_ADDR
// if p3 = 23 then
27678: LD_VAR 0 3
27682: PUSH
27683: LD_INT 23
27685: EQUAL
27686: IFFALSE 27696
// sOilTower := true ;
27688: LD_ADDR_EXP 103
27692: PUSH
27693: LD_INT 1
27695: ST_TO_ADDR
// if p3 = 24 then
27696: LD_VAR 0 3
27700: PUSH
27701: LD_INT 24
27703: EQUAL
27704: IFFALSE 27714
// sShovel := true ;
27706: LD_ADDR_EXP 104
27710: PUSH
27711: LD_INT 1
27713: ST_TO_ADDR
// if p3 = 25 then
27714: LD_VAR 0 3
27718: PUSH
27719: LD_INT 25
27721: EQUAL
27722: IFFALSE 27732
// sSheik := true ;
27724: LD_ADDR_EXP 105
27728: PUSH
27729: LD_INT 1
27731: ST_TO_ADDR
// if p3 = 26 then
27732: LD_VAR 0 3
27736: PUSH
27737: LD_INT 26
27739: EQUAL
27740: IFFALSE 27750
// sEarthquake := true ;
27742: LD_ADDR_EXP 107
27746: PUSH
27747: LD_INT 1
27749: ST_TO_ADDR
// if p3 = 27 then
27750: LD_VAR 0 3
27754: PUSH
27755: LD_INT 27
27757: EQUAL
27758: IFFALSE 27768
// sAI := true ;
27760: LD_ADDR_EXP 108
27764: PUSH
27765: LD_INT 1
27767: ST_TO_ADDR
// if p3 = 28 then
27768: LD_VAR 0 3
27772: PUSH
27773: LD_INT 28
27775: EQUAL
27776: IFFALSE 27786
// sCargo := true ;
27778: LD_ADDR_EXP 111
27782: PUSH
27783: LD_INT 1
27785: ST_TO_ADDR
// if p3 = 29 then
27786: LD_VAR 0 3
27790: PUSH
27791: LD_INT 29
27793: EQUAL
27794: IFFALSE 27804
// sDLaser := true ;
27796: LD_ADDR_EXP 112
27800: PUSH
27801: LD_INT 1
27803: ST_TO_ADDR
// if p3 = 30 then
27804: LD_VAR 0 3
27808: PUSH
27809: LD_INT 30
27811: EQUAL
27812: IFFALSE 27822
// sExchange := true ;
27814: LD_ADDR_EXP 113
27818: PUSH
27819: LD_INT 1
27821: ST_TO_ADDR
// if p3 = 31 then
27822: LD_VAR 0 3
27826: PUSH
27827: LD_INT 31
27829: EQUAL
27830: IFFALSE 27840
// sFac := true ;
27832: LD_ADDR_EXP 114
27836: PUSH
27837: LD_INT 1
27839: ST_TO_ADDR
// if p3 = 32 then
27840: LD_VAR 0 3
27844: PUSH
27845: LD_INT 32
27847: EQUAL
27848: IFFALSE 27858
// sPower := true ;
27850: LD_ADDR_EXP 115
27854: PUSH
27855: LD_INT 1
27857: ST_TO_ADDR
// if p3 = 33 then
27858: LD_VAR 0 3
27862: PUSH
27863: LD_INT 33
27865: EQUAL
27866: IFFALSE 27876
// sRandom := true ;
27868: LD_ADDR_EXP 116
27872: PUSH
27873: LD_INT 1
27875: ST_TO_ADDR
// if p3 = 34 then
27876: LD_VAR 0 3
27880: PUSH
27881: LD_INT 34
27883: EQUAL
27884: IFFALSE 27894
// sShield := true ;
27886: LD_ADDR_EXP 117
27890: PUSH
27891: LD_INT 1
27893: ST_TO_ADDR
// if p3 = 35 then
27894: LD_VAR 0 3
27898: PUSH
27899: LD_INT 35
27901: EQUAL
27902: IFFALSE 27912
// sTime := true ;
27904: LD_ADDR_EXP 118
27908: PUSH
27909: LD_INT 1
27911: ST_TO_ADDR
// if p3 = 36 then
27912: LD_VAR 0 3
27916: PUSH
27917: LD_INT 36
27919: EQUAL
27920: IFFALSE 27930
// sTools := true ;
27922: LD_ADDR_EXP 119
27926: PUSH
27927: LD_INT 1
27929: ST_TO_ADDR
// if p3 = 101 then
27930: LD_VAR 0 3
27934: PUSH
27935: LD_INT 101
27937: EQUAL
27938: IFFALSE 27948
// sSold := true ;
27940: LD_ADDR_EXP 84
27944: PUSH
27945: LD_INT 1
27947: ST_TO_ADDR
// if p3 = 102 then
27948: LD_VAR 0 3
27952: PUSH
27953: LD_INT 102
27955: EQUAL
27956: IFFALSE 27966
// sDiff := true ;
27958: LD_ADDR_EXP 85
27962: PUSH
27963: LD_INT 1
27965: ST_TO_ADDR
// if p3 = 103 then
27966: LD_VAR 0 3
27970: PUSH
27971: LD_INT 103
27973: EQUAL
27974: IFFALSE 27984
// sFog := true ;
27976: LD_ADDR_EXP 88
27980: PUSH
27981: LD_INT 1
27983: ST_TO_ADDR
// if p3 = 104 then
27984: LD_VAR 0 3
27988: PUSH
27989: LD_INT 104
27991: EQUAL
27992: IFFALSE 28002
// sReset := true ;
27994: LD_ADDR_EXP 89
27998: PUSH
27999: LD_INT 1
28001: ST_TO_ADDR
// if p3 = 105 then
28002: LD_VAR 0 3
28006: PUSH
28007: LD_INT 105
28009: EQUAL
28010: IFFALSE 28020
// sSun := true ;
28012: LD_ADDR_EXP 90
28016: PUSH
28017: LD_INT 1
28019: ST_TO_ADDR
// if p3 = 106 then
28020: LD_VAR 0 3
28024: PUSH
28025: LD_INT 106
28027: EQUAL
28028: IFFALSE 28038
// sTiger := true ;
28030: LD_ADDR_EXP 86
28034: PUSH
28035: LD_INT 1
28037: ST_TO_ADDR
// if p3 = 107 then
28038: LD_VAR 0 3
28042: PUSH
28043: LD_INT 107
28045: EQUAL
28046: IFFALSE 28056
// sBomb := true ;
28048: LD_ADDR_EXP 87
28052: PUSH
28053: LD_INT 1
28055: ST_TO_ADDR
// if p3 = 108 then
28056: LD_VAR 0 3
28060: PUSH
28061: LD_INT 108
28063: EQUAL
28064: IFFALSE 28074
// sWound := true ;
28066: LD_ADDR_EXP 95
28070: PUSH
28071: LD_INT 1
28073: ST_TO_ADDR
// if p3 = 109 then
28074: LD_VAR 0 3
28078: PUSH
28079: LD_INT 109
28081: EQUAL
28082: IFFALSE 28092
// sBetray := true ;
28084: LD_ADDR_EXP 99
28088: PUSH
28089: LD_INT 1
28091: ST_TO_ADDR
// if p3 = 110 then
28092: LD_VAR 0 3
28096: PUSH
28097: LD_INT 110
28099: EQUAL
28100: IFFALSE 28110
// sContamin := true ;
28102: LD_ADDR_EXP 100
28106: PUSH
28107: LD_INT 1
28109: ST_TO_ADDR
// if p3 = 111 then
28110: LD_VAR 0 3
28114: PUSH
28115: LD_INT 111
28117: EQUAL
28118: IFFALSE 28128
// sOil := true ;
28120: LD_ADDR_EXP 102
28124: PUSH
28125: LD_INT 1
28127: ST_TO_ADDR
// if p3 = 112 then
28128: LD_VAR 0 3
28132: PUSH
28133: LD_INT 112
28135: EQUAL
28136: IFFALSE 28146
// sStu := true ;
28138: LD_ADDR_EXP 106
28142: PUSH
28143: LD_INT 1
28145: ST_TO_ADDR
// if p3 = 113 then
28146: LD_VAR 0 3
28150: PUSH
28151: LD_INT 113
28153: EQUAL
28154: IFFALSE 28164
// sBazooka := true ;
28156: LD_ADDR_EXP 109
28160: PUSH
28161: LD_INT 1
28163: ST_TO_ADDR
// if p3 = 114 then
28164: LD_VAR 0 3
28168: PUSH
28169: LD_INT 114
28171: EQUAL
28172: IFFALSE 28182
// sMortar := true ;
28174: LD_ADDR_EXP 110
28178: PUSH
28179: LD_INT 1
28181: ST_TO_ADDR
// if p3 = 115 then
28182: LD_VAR 0 3
28186: PUSH
28187: LD_INT 115
28189: EQUAL
28190: IFFALSE 28200
// sRanger := true ;
28192: LD_ADDR_EXP 120
28196: PUSH
28197: LD_INT 1
28199: ST_TO_ADDR
// end ; if p2 = 101 then
28200: LD_VAR 0 2
28204: PUSH
28205: LD_INT 101
28207: EQUAL
28208: IFFALSE 28336
// begin case p3 of 1 :
28210: LD_VAR 0 3
28214: PUSH
28215: LD_INT 1
28217: DOUBLE
28218: EQUAL
28219: IFTRUE 28223
28221: GO 28230
28223: POP
// hHackUnlimitedResources ; 2 :
28224: CALL 39373 0 0
28228: GO 28336
28230: LD_INT 2
28232: DOUBLE
28233: EQUAL
28234: IFTRUE 28238
28236: GO 28245
28238: POP
// hHackSetLevel10 ; 3 :
28239: CALL 39506 0 0
28243: GO 28336
28245: LD_INT 3
28247: DOUBLE
28248: EQUAL
28249: IFTRUE 28253
28251: GO 28260
28253: POP
// hHackSetLevel10YourUnits ; 4 :
28254: CALL 39591 0 0
28258: GO 28336
28260: LD_INT 4
28262: DOUBLE
28263: EQUAL
28264: IFTRUE 28268
28266: GO 28275
28268: POP
// hHackInvincible ; 5 :
28269: CALL 40039 0 0
28273: GO 28336
28275: LD_INT 5
28277: DOUBLE
28278: EQUAL
28279: IFTRUE 28283
28281: GO 28290
28283: POP
// hHackInvisible ; 6 :
28284: CALL 40150 0 0
28288: GO 28336
28290: LD_INT 6
28292: DOUBLE
28293: EQUAL
28294: IFTRUE 28298
28296: GO 28305
28298: POP
// hHackChangeYourSide ; 7 :
28299: CALL 40207 0 0
28303: GO 28336
28305: LD_INT 7
28307: DOUBLE
28308: EQUAL
28309: IFTRUE 28313
28311: GO 28320
28313: POP
// hHackChangeUnitSide ; 8 :
28314: CALL 40249 0 0
28318: GO 28336
28320: LD_INT 8
28322: DOUBLE
28323: EQUAL
28324: IFTRUE 28328
28326: GO 28335
28328: POP
// hHackFog ; end ;
28329: CALL 40350 0 0
28333: GO 28336
28335: POP
// end ; end ;
28336: LD_VAR 0 7
28340: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
28341: GO 28343
28343: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28344: LD_STRING initStreamRollete();
28346: PPUSH
28347: CALL_OW 559
// InitStreamMode ;
28351: CALL 28360 0 0
// DefineStreamItems ( ) ;
28355: CALL 28800 0 0
// end ;
28359: END
// function InitStreamMode ; begin
28360: LD_INT 0
28362: PPUSH
// streamModeActive := false ;
28363: LD_ADDR_EXP 67
28367: PUSH
28368: LD_INT 0
28370: ST_TO_ADDR
// normalCounter := 36 ;
28371: LD_ADDR_EXP 68
28375: PUSH
28376: LD_INT 36
28378: ST_TO_ADDR
// hardcoreCounter := 16 ;
28379: LD_ADDR_EXP 69
28383: PUSH
28384: LD_INT 16
28386: ST_TO_ADDR
// sRocket := false ;
28387: LD_ADDR_EXP 72
28391: PUSH
28392: LD_INT 0
28394: ST_TO_ADDR
// sSpeed := false ;
28395: LD_ADDR_EXP 71
28399: PUSH
28400: LD_INT 0
28402: ST_TO_ADDR
// sEngine := false ;
28403: LD_ADDR_EXP 73
28407: PUSH
28408: LD_INT 0
28410: ST_TO_ADDR
// sSpec := false ;
28411: LD_ADDR_EXP 70
28415: PUSH
28416: LD_INT 0
28418: ST_TO_ADDR
// sLevel := false ;
28419: LD_ADDR_EXP 74
28423: PUSH
28424: LD_INT 0
28426: ST_TO_ADDR
// sArmoury := false ;
28427: LD_ADDR_EXP 75
28431: PUSH
28432: LD_INT 0
28434: ST_TO_ADDR
// sRadar := false ;
28435: LD_ADDR_EXP 76
28439: PUSH
28440: LD_INT 0
28442: ST_TO_ADDR
// sBunker := false ;
28443: LD_ADDR_EXP 77
28447: PUSH
28448: LD_INT 0
28450: ST_TO_ADDR
// sHack := false ;
28451: LD_ADDR_EXP 78
28455: PUSH
28456: LD_INT 0
28458: ST_TO_ADDR
// sFire := false ;
28459: LD_ADDR_EXP 79
28463: PUSH
28464: LD_INT 0
28466: ST_TO_ADDR
// sRefresh := false ;
28467: LD_ADDR_EXP 80
28471: PUSH
28472: LD_INT 0
28474: ST_TO_ADDR
// sExp := false ;
28475: LD_ADDR_EXP 81
28479: PUSH
28480: LD_INT 0
28482: ST_TO_ADDR
// sDepot := false ;
28483: LD_ADDR_EXP 82
28487: PUSH
28488: LD_INT 0
28490: ST_TO_ADDR
// sFlag := false ;
28491: LD_ADDR_EXP 83
28495: PUSH
28496: LD_INT 0
28498: ST_TO_ADDR
// sKamikadze := false ;
28499: LD_ADDR_EXP 91
28503: PUSH
28504: LD_INT 0
28506: ST_TO_ADDR
// sTroll := false ;
28507: LD_ADDR_EXP 92
28511: PUSH
28512: LD_INT 0
28514: ST_TO_ADDR
// sSlow := false ;
28515: LD_ADDR_EXP 93
28519: PUSH
28520: LD_INT 0
28522: ST_TO_ADDR
// sLack := false ;
28523: LD_ADDR_EXP 94
28527: PUSH
28528: LD_INT 0
28530: ST_TO_ADDR
// sTank := false ;
28531: LD_ADDR_EXP 96
28535: PUSH
28536: LD_INT 0
28538: ST_TO_ADDR
// sRemote := false ;
28539: LD_ADDR_EXP 97
28543: PUSH
28544: LD_INT 0
28546: ST_TO_ADDR
// sPowell := false ;
28547: LD_ADDR_EXP 98
28551: PUSH
28552: LD_INT 0
28554: ST_TO_ADDR
// sTeleport := false ;
28555: LD_ADDR_EXP 101
28559: PUSH
28560: LD_INT 0
28562: ST_TO_ADDR
// sOilTower := false ;
28563: LD_ADDR_EXP 103
28567: PUSH
28568: LD_INT 0
28570: ST_TO_ADDR
// sShovel := false ;
28571: LD_ADDR_EXP 104
28575: PUSH
28576: LD_INT 0
28578: ST_TO_ADDR
// sSheik := false ;
28579: LD_ADDR_EXP 105
28583: PUSH
28584: LD_INT 0
28586: ST_TO_ADDR
// sEarthquake := false ;
28587: LD_ADDR_EXP 107
28591: PUSH
28592: LD_INT 0
28594: ST_TO_ADDR
// sAI := false ;
28595: LD_ADDR_EXP 108
28599: PUSH
28600: LD_INT 0
28602: ST_TO_ADDR
// sCargo := false ;
28603: LD_ADDR_EXP 111
28607: PUSH
28608: LD_INT 0
28610: ST_TO_ADDR
// sDLaser := false ;
28611: LD_ADDR_EXP 112
28615: PUSH
28616: LD_INT 0
28618: ST_TO_ADDR
// sExchange := false ;
28619: LD_ADDR_EXP 113
28623: PUSH
28624: LD_INT 0
28626: ST_TO_ADDR
// sFac := false ;
28627: LD_ADDR_EXP 114
28631: PUSH
28632: LD_INT 0
28634: ST_TO_ADDR
// sPower := false ;
28635: LD_ADDR_EXP 115
28639: PUSH
28640: LD_INT 0
28642: ST_TO_ADDR
// sRandom := false ;
28643: LD_ADDR_EXP 116
28647: PUSH
28648: LD_INT 0
28650: ST_TO_ADDR
// sShield := false ;
28651: LD_ADDR_EXP 117
28655: PUSH
28656: LD_INT 0
28658: ST_TO_ADDR
// sTime := false ;
28659: LD_ADDR_EXP 118
28663: PUSH
28664: LD_INT 0
28666: ST_TO_ADDR
// sTools := false ;
28667: LD_ADDR_EXP 119
28671: PUSH
28672: LD_INT 0
28674: ST_TO_ADDR
// sSold := false ;
28675: LD_ADDR_EXP 84
28679: PUSH
28680: LD_INT 0
28682: ST_TO_ADDR
// sDiff := false ;
28683: LD_ADDR_EXP 85
28687: PUSH
28688: LD_INT 0
28690: ST_TO_ADDR
// sFog := false ;
28691: LD_ADDR_EXP 88
28695: PUSH
28696: LD_INT 0
28698: ST_TO_ADDR
// sReset := false ;
28699: LD_ADDR_EXP 89
28703: PUSH
28704: LD_INT 0
28706: ST_TO_ADDR
// sSun := false ;
28707: LD_ADDR_EXP 90
28711: PUSH
28712: LD_INT 0
28714: ST_TO_ADDR
// sTiger := false ;
28715: LD_ADDR_EXP 86
28719: PUSH
28720: LD_INT 0
28722: ST_TO_ADDR
// sBomb := false ;
28723: LD_ADDR_EXP 87
28727: PUSH
28728: LD_INT 0
28730: ST_TO_ADDR
// sWound := false ;
28731: LD_ADDR_EXP 95
28735: PUSH
28736: LD_INT 0
28738: ST_TO_ADDR
// sBetray := false ;
28739: LD_ADDR_EXP 99
28743: PUSH
28744: LD_INT 0
28746: ST_TO_ADDR
// sContamin := false ;
28747: LD_ADDR_EXP 100
28751: PUSH
28752: LD_INT 0
28754: ST_TO_ADDR
// sOil := false ;
28755: LD_ADDR_EXP 102
28759: PUSH
28760: LD_INT 0
28762: ST_TO_ADDR
// sStu := false ;
28763: LD_ADDR_EXP 106
28767: PUSH
28768: LD_INT 0
28770: ST_TO_ADDR
// sBazooka := false ;
28771: LD_ADDR_EXP 109
28775: PUSH
28776: LD_INT 0
28778: ST_TO_ADDR
// sMortar := false ;
28779: LD_ADDR_EXP 110
28783: PUSH
28784: LD_INT 0
28786: ST_TO_ADDR
// sRanger := false ;
28787: LD_ADDR_EXP 120
28791: PUSH
28792: LD_INT 0
28794: ST_TO_ADDR
// end ;
28795: LD_VAR 0 1
28799: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
28800: LD_INT 0
28802: PPUSH
28803: PPUSH
28804: PPUSH
28805: PPUSH
28806: PPUSH
// result := [ ] ;
28807: LD_ADDR_VAR 0 1
28811: PUSH
28812: EMPTY
28813: ST_TO_ADDR
// if campaign_id = 1 then
28814: LD_OWVAR 69
28818: PUSH
28819: LD_INT 1
28821: EQUAL
28822: IFFALSE 31760
// begin case mission_number of 1 :
28824: LD_OWVAR 70
28828: PUSH
28829: LD_INT 1
28831: DOUBLE
28832: EQUAL
28833: IFTRUE 28837
28835: GO 28901
28837: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
28838: LD_ADDR_VAR 0 1
28842: PUSH
28843: LD_INT 2
28845: PUSH
28846: LD_INT 4
28848: PUSH
28849: LD_INT 11
28851: PUSH
28852: LD_INT 12
28854: PUSH
28855: LD_INT 15
28857: PUSH
28858: LD_INT 16
28860: PUSH
28861: LD_INT 22
28863: PUSH
28864: LD_INT 23
28866: PUSH
28867: LD_INT 26
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 101
28883: PUSH
28884: LD_INT 102
28886: PUSH
28887: LD_INT 106
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: ST_TO_ADDR
28899: GO 31758
28901: LD_INT 2
28903: DOUBLE
28904: EQUAL
28905: IFTRUE 28909
28907: GO 28981
28909: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
28910: LD_ADDR_VAR 0 1
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: LD_INT 4
28920: PUSH
28921: LD_INT 11
28923: PUSH
28924: LD_INT 12
28926: PUSH
28927: LD_INT 15
28929: PUSH
28930: LD_INT 16
28932: PUSH
28933: LD_INT 22
28935: PUSH
28936: LD_INT 23
28938: PUSH
28939: LD_INT 26
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 101
28955: PUSH
28956: LD_INT 102
28958: PUSH
28959: LD_INT 105
28961: PUSH
28962: LD_INT 106
28964: PUSH
28965: LD_INT 108
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: ST_TO_ADDR
28979: GO 31758
28981: LD_INT 3
28983: DOUBLE
28984: EQUAL
28985: IFTRUE 28989
28987: GO 29065
28989: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
28990: LD_ADDR_VAR 0 1
28994: PUSH
28995: LD_INT 2
28997: PUSH
28998: LD_INT 4
29000: PUSH
29001: LD_INT 5
29003: PUSH
29004: LD_INT 11
29006: PUSH
29007: LD_INT 12
29009: PUSH
29010: LD_INT 15
29012: PUSH
29013: LD_INT 16
29015: PUSH
29016: LD_INT 22
29018: PUSH
29019: LD_INT 26
29021: PUSH
29022: LD_INT 36
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 101
29039: PUSH
29040: LD_INT 102
29042: PUSH
29043: LD_INT 105
29045: PUSH
29046: LD_INT 106
29048: PUSH
29049: LD_INT 108
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: ST_TO_ADDR
29063: GO 31758
29065: LD_INT 4
29067: DOUBLE
29068: EQUAL
29069: IFTRUE 29073
29071: GO 29157
29073: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
29074: LD_ADDR_VAR 0 1
29078: PUSH
29079: LD_INT 2
29081: PUSH
29082: LD_INT 4
29084: PUSH
29085: LD_INT 5
29087: PUSH
29088: LD_INT 8
29090: PUSH
29091: LD_INT 11
29093: PUSH
29094: LD_INT 12
29096: PUSH
29097: LD_INT 15
29099: PUSH
29100: LD_INT 16
29102: PUSH
29103: LD_INT 22
29105: PUSH
29106: LD_INT 23
29108: PUSH
29109: LD_INT 26
29111: PUSH
29112: LD_INT 36
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 101
29131: PUSH
29132: LD_INT 102
29134: PUSH
29135: LD_INT 105
29137: PUSH
29138: LD_INT 106
29140: PUSH
29141: LD_INT 108
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: ST_TO_ADDR
29155: GO 31758
29157: LD_INT 5
29159: DOUBLE
29160: EQUAL
29161: IFTRUE 29165
29163: GO 29265
29165: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
29166: LD_ADDR_VAR 0 1
29170: PUSH
29171: LD_INT 2
29173: PUSH
29174: LD_INT 4
29176: PUSH
29177: LD_INT 5
29179: PUSH
29180: LD_INT 6
29182: PUSH
29183: LD_INT 8
29185: PUSH
29186: LD_INT 11
29188: PUSH
29189: LD_INT 12
29191: PUSH
29192: LD_INT 15
29194: PUSH
29195: LD_INT 16
29197: PUSH
29198: LD_INT 22
29200: PUSH
29201: LD_INT 23
29203: PUSH
29204: LD_INT 25
29206: PUSH
29207: LD_INT 26
29209: PUSH
29210: LD_INT 36
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 101
29231: PUSH
29232: LD_INT 102
29234: PUSH
29235: LD_INT 105
29237: PUSH
29238: LD_INT 106
29240: PUSH
29241: LD_INT 108
29243: PUSH
29244: LD_INT 109
29246: PUSH
29247: LD_INT 112
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: ST_TO_ADDR
29263: GO 31758
29265: LD_INT 6
29267: DOUBLE
29268: EQUAL
29269: IFTRUE 29273
29271: GO 29393
29273: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
29274: LD_ADDR_VAR 0 1
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 4
29284: PUSH
29285: LD_INT 5
29287: PUSH
29288: LD_INT 6
29290: PUSH
29291: LD_INT 8
29293: PUSH
29294: LD_INT 11
29296: PUSH
29297: LD_INT 12
29299: PUSH
29300: LD_INT 15
29302: PUSH
29303: LD_INT 16
29305: PUSH
29306: LD_INT 20
29308: PUSH
29309: LD_INT 21
29311: PUSH
29312: LD_INT 22
29314: PUSH
29315: LD_INT 23
29317: PUSH
29318: LD_INT 25
29320: PUSH
29321: LD_INT 26
29323: PUSH
29324: LD_INT 30
29326: PUSH
29327: LD_INT 31
29329: PUSH
29330: LD_INT 32
29332: PUSH
29333: LD_INT 36
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 101
29359: PUSH
29360: LD_INT 102
29362: PUSH
29363: LD_INT 105
29365: PUSH
29366: LD_INT 106
29368: PUSH
29369: LD_INT 108
29371: PUSH
29372: LD_INT 109
29374: PUSH
29375: LD_INT 112
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: ST_TO_ADDR
29391: GO 31758
29393: LD_INT 7
29395: DOUBLE
29396: EQUAL
29397: IFTRUE 29401
29399: GO 29501
29401: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
29402: LD_ADDR_VAR 0 1
29406: PUSH
29407: LD_INT 2
29409: PUSH
29410: LD_INT 4
29412: PUSH
29413: LD_INT 5
29415: PUSH
29416: LD_INT 7
29418: PUSH
29419: LD_INT 11
29421: PUSH
29422: LD_INT 12
29424: PUSH
29425: LD_INT 15
29427: PUSH
29428: LD_INT 16
29430: PUSH
29431: LD_INT 20
29433: PUSH
29434: LD_INT 21
29436: PUSH
29437: LD_INT 22
29439: PUSH
29440: LD_INT 23
29442: PUSH
29443: LD_INT 25
29445: PUSH
29446: LD_INT 26
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 101
29467: PUSH
29468: LD_INT 102
29470: PUSH
29471: LD_INT 103
29473: PUSH
29474: LD_INT 105
29476: PUSH
29477: LD_INT 106
29479: PUSH
29480: LD_INT 108
29482: PUSH
29483: LD_INT 112
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: ST_TO_ADDR
29499: GO 31758
29501: LD_INT 8
29503: DOUBLE
29504: EQUAL
29505: IFTRUE 29509
29507: GO 29637
29509: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
29510: LD_ADDR_VAR 0 1
29514: PUSH
29515: LD_INT 2
29517: PUSH
29518: LD_INT 4
29520: PUSH
29521: LD_INT 5
29523: PUSH
29524: LD_INT 6
29526: PUSH
29527: LD_INT 7
29529: PUSH
29530: LD_INT 8
29532: PUSH
29533: LD_INT 11
29535: PUSH
29536: LD_INT 12
29538: PUSH
29539: LD_INT 15
29541: PUSH
29542: LD_INT 16
29544: PUSH
29545: LD_INT 20
29547: PUSH
29548: LD_INT 21
29550: PUSH
29551: LD_INT 22
29553: PUSH
29554: LD_INT 23
29556: PUSH
29557: LD_INT 25
29559: PUSH
29560: LD_INT 26
29562: PUSH
29563: LD_INT 30
29565: PUSH
29566: LD_INT 31
29568: PUSH
29569: LD_INT 32
29571: PUSH
29572: LD_INT 36
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 101
29599: PUSH
29600: LD_INT 102
29602: PUSH
29603: LD_INT 103
29605: PUSH
29606: LD_INT 105
29608: PUSH
29609: LD_INT 106
29611: PUSH
29612: LD_INT 108
29614: PUSH
29615: LD_INT 109
29617: PUSH
29618: LD_INT 112
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: ST_TO_ADDR
29635: GO 31758
29637: LD_INT 9
29639: DOUBLE
29640: EQUAL
29641: IFTRUE 29645
29643: GO 29781
29645: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
29646: LD_ADDR_VAR 0 1
29650: PUSH
29651: LD_INT 2
29653: PUSH
29654: LD_INT 4
29656: PUSH
29657: LD_INT 5
29659: PUSH
29660: LD_INT 6
29662: PUSH
29663: LD_INT 7
29665: PUSH
29666: LD_INT 8
29668: PUSH
29669: LD_INT 11
29671: PUSH
29672: LD_INT 12
29674: PUSH
29675: LD_INT 15
29677: PUSH
29678: LD_INT 16
29680: PUSH
29681: LD_INT 20
29683: PUSH
29684: LD_INT 21
29686: PUSH
29687: LD_INT 22
29689: PUSH
29690: LD_INT 23
29692: PUSH
29693: LD_INT 25
29695: PUSH
29696: LD_INT 26
29698: PUSH
29699: LD_INT 28
29701: PUSH
29702: LD_INT 30
29704: PUSH
29705: LD_INT 31
29707: PUSH
29708: LD_INT 32
29710: PUSH
29711: LD_INT 36
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 101
29739: PUSH
29740: LD_INT 102
29742: PUSH
29743: LD_INT 103
29745: PUSH
29746: LD_INT 105
29748: PUSH
29749: LD_INT 106
29751: PUSH
29752: LD_INT 108
29754: PUSH
29755: LD_INT 109
29757: PUSH
29758: LD_INT 112
29760: PUSH
29761: LD_INT 114
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: ST_TO_ADDR
29779: GO 31758
29781: LD_INT 10
29783: DOUBLE
29784: EQUAL
29785: IFTRUE 29789
29787: GO 29973
29789: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
29790: LD_ADDR_VAR 0 1
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 4
29800: PUSH
29801: LD_INT 5
29803: PUSH
29804: LD_INT 6
29806: PUSH
29807: LD_INT 7
29809: PUSH
29810: LD_INT 8
29812: PUSH
29813: LD_INT 9
29815: PUSH
29816: LD_INT 10
29818: PUSH
29819: LD_INT 11
29821: PUSH
29822: LD_INT 12
29824: PUSH
29825: LD_INT 13
29827: PUSH
29828: LD_INT 14
29830: PUSH
29831: LD_INT 15
29833: PUSH
29834: LD_INT 16
29836: PUSH
29837: LD_INT 17
29839: PUSH
29840: LD_INT 18
29842: PUSH
29843: LD_INT 19
29845: PUSH
29846: LD_INT 20
29848: PUSH
29849: LD_INT 21
29851: PUSH
29852: LD_INT 22
29854: PUSH
29855: LD_INT 23
29857: PUSH
29858: LD_INT 24
29860: PUSH
29861: LD_INT 25
29863: PUSH
29864: LD_INT 26
29866: PUSH
29867: LD_INT 28
29869: PUSH
29870: LD_INT 30
29872: PUSH
29873: LD_INT 31
29875: PUSH
29876: LD_INT 32
29878: PUSH
29879: LD_INT 36
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 101
29915: PUSH
29916: LD_INT 102
29918: PUSH
29919: LD_INT 103
29921: PUSH
29922: LD_INT 104
29924: PUSH
29925: LD_INT 105
29927: PUSH
29928: LD_INT 106
29930: PUSH
29931: LD_INT 107
29933: PUSH
29934: LD_INT 108
29936: PUSH
29937: LD_INT 109
29939: PUSH
29940: LD_INT 110
29942: PUSH
29943: LD_INT 111
29945: PUSH
29946: LD_INT 112
29948: PUSH
29949: LD_INT 114
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: ST_TO_ADDR
29971: GO 31758
29973: LD_INT 11
29975: DOUBLE
29976: EQUAL
29977: IFTRUE 29981
29979: GO 30173
29981: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
29982: LD_ADDR_VAR 0 1
29986: PUSH
29987: LD_INT 2
29989: PUSH
29990: LD_INT 3
29992: PUSH
29993: LD_INT 4
29995: PUSH
29996: LD_INT 5
29998: PUSH
29999: LD_INT 6
30001: PUSH
30002: LD_INT 7
30004: PUSH
30005: LD_INT 8
30007: PUSH
30008: LD_INT 9
30010: PUSH
30011: LD_INT 10
30013: PUSH
30014: LD_INT 11
30016: PUSH
30017: LD_INT 12
30019: PUSH
30020: LD_INT 13
30022: PUSH
30023: LD_INT 14
30025: PUSH
30026: LD_INT 15
30028: PUSH
30029: LD_INT 16
30031: PUSH
30032: LD_INT 17
30034: PUSH
30035: LD_INT 18
30037: PUSH
30038: LD_INT 19
30040: PUSH
30041: LD_INT 20
30043: PUSH
30044: LD_INT 21
30046: PUSH
30047: LD_INT 22
30049: PUSH
30050: LD_INT 23
30052: PUSH
30053: LD_INT 24
30055: PUSH
30056: LD_INT 25
30058: PUSH
30059: LD_INT 26
30061: PUSH
30062: LD_INT 28
30064: PUSH
30065: LD_INT 30
30067: PUSH
30068: LD_INT 31
30070: PUSH
30071: LD_INT 32
30073: PUSH
30074: LD_INT 34
30076: PUSH
30077: LD_INT 36
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 101
30115: PUSH
30116: LD_INT 102
30118: PUSH
30119: LD_INT 103
30121: PUSH
30122: LD_INT 104
30124: PUSH
30125: LD_INT 105
30127: PUSH
30128: LD_INT 106
30130: PUSH
30131: LD_INT 107
30133: PUSH
30134: LD_INT 108
30136: PUSH
30137: LD_INT 109
30139: PUSH
30140: LD_INT 110
30142: PUSH
30143: LD_INT 111
30145: PUSH
30146: LD_INT 112
30148: PUSH
30149: LD_INT 114
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: ST_TO_ADDR
30171: GO 31758
30173: LD_INT 12
30175: DOUBLE
30176: EQUAL
30177: IFTRUE 30181
30179: GO 30389
30181: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
30182: LD_ADDR_VAR 0 1
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: LD_INT 3
30195: PUSH
30196: LD_INT 4
30198: PUSH
30199: LD_INT 5
30201: PUSH
30202: LD_INT 6
30204: PUSH
30205: LD_INT 7
30207: PUSH
30208: LD_INT 8
30210: PUSH
30211: LD_INT 9
30213: PUSH
30214: LD_INT 10
30216: PUSH
30217: LD_INT 11
30219: PUSH
30220: LD_INT 12
30222: PUSH
30223: LD_INT 13
30225: PUSH
30226: LD_INT 14
30228: PUSH
30229: LD_INT 15
30231: PUSH
30232: LD_INT 16
30234: PUSH
30235: LD_INT 17
30237: PUSH
30238: LD_INT 18
30240: PUSH
30241: LD_INT 19
30243: PUSH
30244: LD_INT 20
30246: PUSH
30247: LD_INT 21
30249: PUSH
30250: LD_INT 22
30252: PUSH
30253: LD_INT 23
30255: PUSH
30256: LD_INT 24
30258: PUSH
30259: LD_INT 25
30261: PUSH
30262: LD_INT 26
30264: PUSH
30265: LD_INT 27
30267: PUSH
30268: LD_INT 28
30270: PUSH
30271: LD_INT 30
30273: PUSH
30274: LD_INT 31
30276: PUSH
30277: LD_INT 32
30279: PUSH
30280: LD_INT 33
30282: PUSH
30283: LD_INT 34
30285: PUSH
30286: LD_INT 36
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 101
30327: PUSH
30328: LD_INT 102
30330: PUSH
30331: LD_INT 103
30333: PUSH
30334: LD_INT 104
30336: PUSH
30337: LD_INT 105
30339: PUSH
30340: LD_INT 106
30342: PUSH
30343: LD_INT 107
30345: PUSH
30346: LD_INT 108
30348: PUSH
30349: LD_INT 109
30351: PUSH
30352: LD_INT 110
30354: PUSH
30355: LD_INT 111
30357: PUSH
30358: LD_INT 112
30360: PUSH
30361: LD_INT 113
30363: PUSH
30364: LD_INT 114
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: ST_TO_ADDR
30387: GO 31758
30389: LD_INT 13
30391: DOUBLE
30392: EQUAL
30393: IFTRUE 30397
30395: GO 30593
30397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
30398: LD_ADDR_VAR 0 1
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: LD_INT 4
30414: PUSH
30415: LD_INT 5
30417: PUSH
30418: LD_INT 8
30420: PUSH
30421: LD_INT 9
30423: PUSH
30424: LD_INT 10
30426: PUSH
30427: LD_INT 11
30429: PUSH
30430: LD_INT 12
30432: PUSH
30433: LD_INT 14
30435: PUSH
30436: LD_INT 15
30438: PUSH
30439: LD_INT 16
30441: PUSH
30442: LD_INT 17
30444: PUSH
30445: LD_INT 18
30447: PUSH
30448: LD_INT 19
30450: PUSH
30451: LD_INT 20
30453: PUSH
30454: LD_INT 21
30456: PUSH
30457: LD_INT 22
30459: PUSH
30460: LD_INT 23
30462: PUSH
30463: LD_INT 24
30465: PUSH
30466: LD_INT 25
30468: PUSH
30469: LD_INT 26
30471: PUSH
30472: LD_INT 27
30474: PUSH
30475: LD_INT 28
30477: PUSH
30478: LD_INT 30
30480: PUSH
30481: LD_INT 31
30483: PUSH
30484: LD_INT 32
30486: PUSH
30487: LD_INT 33
30489: PUSH
30490: LD_INT 34
30492: PUSH
30493: LD_INT 36
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 101
30531: PUSH
30532: LD_INT 102
30534: PUSH
30535: LD_INT 103
30537: PUSH
30538: LD_INT 104
30540: PUSH
30541: LD_INT 105
30543: PUSH
30544: LD_INT 106
30546: PUSH
30547: LD_INT 107
30549: PUSH
30550: LD_INT 108
30552: PUSH
30553: LD_INT 109
30555: PUSH
30556: LD_INT 110
30558: PUSH
30559: LD_INT 111
30561: PUSH
30562: LD_INT 112
30564: PUSH
30565: LD_INT 113
30567: PUSH
30568: LD_INT 114
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: ST_TO_ADDR
30591: GO 31758
30593: LD_INT 14
30595: DOUBLE
30596: EQUAL
30597: IFTRUE 30601
30599: GO 30813
30601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
30602: LD_ADDR_VAR 0 1
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: LD_INT 4
30618: PUSH
30619: LD_INT 5
30621: PUSH
30622: LD_INT 6
30624: PUSH
30625: LD_INT 7
30627: PUSH
30628: LD_INT 8
30630: PUSH
30631: LD_INT 9
30633: PUSH
30634: LD_INT 10
30636: PUSH
30637: LD_INT 11
30639: PUSH
30640: LD_INT 12
30642: PUSH
30643: LD_INT 13
30645: PUSH
30646: LD_INT 14
30648: PUSH
30649: LD_INT 15
30651: PUSH
30652: LD_INT 16
30654: PUSH
30655: LD_INT 17
30657: PUSH
30658: LD_INT 18
30660: PUSH
30661: LD_INT 19
30663: PUSH
30664: LD_INT 20
30666: PUSH
30667: LD_INT 21
30669: PUSH
30670: LD_INT 22
30672: PUSH
30673: LD_INT 23
30675: PUSH
30676: LD_INT 24
30678: PUSH
30679: LD_INT 25
30681: PUSH
30682: LD_INT 26
30684: PUSH
30685: LD_INT 27
30687: PUSH
30688: LD_INT 28
30690: PUSH
30691: LD_INT 29
30693: PUSH
30694: LD_INT 30
30696: PUSH
30697: LD_INT 31
30699: PUSH
30700: LD_INT 32
30702: PUSH
30703: LD_INT 33
30705: PUSH
30706: LD_INT 34
30708: PUSH
30709: LD_INT 36
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 101
30751: PUSH
30752: LD_INT 102
30754: PUSH
30755: LD_INT 103
30757: PUSH
30758: LD_INT 104
30760: PUSH
30761: LD_INT 105
30763: PUSH
30764: LD_INT 106
30766: PUSH
30767: LD_INT 107
30769: PUSH
30770: LD_INT 108
30772: PUSH
30773: LD_INT 109
30775: PUSH
30776: LD_INT 110
30778: PUSH
30779: LD_INT 111
30781: PUSH
30782: LD_INT 112
30784: PUSH
30785: LD_INT 113
30787: PUSH
30788: LD_INT 114
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: ST_TO_ADDR
30811: GO 31758
30813: LD_INT 15
30815: DOUBLE
30816: EQUAL
30817: IFTRUE 30821
30819: GO 31033
30821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
30822: LD_ADDR_VAR 0 1
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: LD_INT 2
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: LD_INT 4
30838: PUSH
30839: LD_INT 5
30841: PUSH
30842: LD_INT 6
30844: PUSH
30845: LD_INT 7
30847: PUSH
30848: LD_INT 8
30850: PUSH
30851: LD_INT 9
30853: PUSH
30854: LD_INT 10
30856: PUSH
30857: LD_INT 11
30859: PUSH
30860: LD_INT 12
30862: PUSH
30863: LD_INT 13
30865: PUSH
30866: LD_INT 14
30868: PUSH
30869: LD_INT 15
30871: PUSH
30872: LD_INT 16
30874: PUSH
30875: LD_INT 17
30877: PUSH
30878: LD_INT 18
30880: PUSH
30881: LD_INT 19
30883: PUSH
30884: LD_INT 20
30886: PUSH
30887: LD_INT 21
30889: PUSH
30890: LD_INT 22
30892: PUSH
30893: LD_INT 23
30895: PUSH
30896: LD_INT 24
30898: PUSH
30899: LD_INT 25
30901: PUSH
30902: LD_INT 26
30904: PUSH
30905: LD_INT 27
30907: PUSH
30908: LD_INT 28
30910: PUSH
30911: LD_INT 29
30913: PUSH
30914: LD_INT 30
30916: PUSH
30917: LD_INT 31
30919: PUSH
30920: LD_INT 32
30922: PUSH
30923: LD_INT 33
30925: PUSH
30926: LD_INT 34
30928: PUSH
30929: LD_INT 36
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 101
30971: PUSH
30972: LD_INT 102
30974: PUSH
30975: LD_INT 103
30977: PUSH
30978: LD_INT 104
30980: PUSH
30981: LD_INT 105
30983: PUSH
30984: LD_INT 106
30986: PUSH
30987: LD_INT 107
30989: PUSH
30990: LD_INT 108
30992: PUSH
30993: LD_INT 109
30995: PUSH
30996: LD_INT 110
30998: PUSH
30999: LD_INT 111
31001: PUSH
31002: LD_INT 112
31004: PUSH
31005: LD_INT 113
31007: PUSH
31008: LD_INT 114
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: ST_TO_ADDR
31031: GO 31758
31033: LD_INT 16
31035: DOUBLE
31036: EQUAL
31037: IFTRUE 31041
31039: GO 31165
31041: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
31042: LD_ADDR_VAR 0 1
31046: PUSH
31047: LD_INT 2
31049: PUSH
31050: LD_INT 4
31052: PUSH
31053: LD_INT 5
31055: PUSH
31056: LD_INT 7
31058: PUSH
31059: LD_INT 11
31061: PUSH
31062: LD_INT 12
31064: PUSH
31065: LD_INT 15
31067: PUSH
31068: LD_INT 16
31070: PUSH
31071: LD_INT 20
31073: PUSH
31074: LD_INT 21
31076: PUSH
31077: LD_INT 22
31079: PUSH
31080: LD_INT 23
31082: PUSH
31083: LD_INT 25
31085: PUSH
31086: LD_INT 26
31088: PUSH
31089: LD_INT 30
31091: PUSH
31092: LD_INT 31
31094: PUSH
31095: LD_INT 32
31097: PUSH
31098: LD_INT 33
31100: PUSH
31101: LD_INT 34
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 101
31127: PUSH
31128: LD_INT 102
31130: PUSH
31131: LD_INT 103
31133: PUSH
31134: LD_INT 106
31136: PUSH
31137: LD_INT 108
31139: PUSH
31140: LD_INT 112
31142: PUSH
31143: LD_INT 113
31145: PUSH
31146: LD_INT 114
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: ST_TO_ADDR
31163: GO 31758
31165: LD_INT 17
31167: DOUBLE
31168: EQUAL
31169: IFTRUE 31173
31171: GO 31385
31173: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
31174: LD_ADDR_VAR 0 1
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: LD_INT 2
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: LD_INT 4
31190: PUSH
31191: LD_INT 5
31193: PUSH
31194: LD_INT 6
31196: PUSH
31197: LD_INT 7
31199: PUSH
31200: LD_INT 8
31202: PUSH
31203: LD_INT 9
31205: PUSH
31206: LD_INT 10
31208: PUSH
31209: LD_INT 11
31211: PUSH
31212: LD_INT 12
31214: PUSH
31215: LD_INT 13
31217: PUSH
31218: LD_INT 14
31220: PUSH
31221: LD_INT 15
31223: PUSH
31224: LD_INT 16
31226: PUSH
31227: LD_INT 17
31229: PUSH
31230: LD_INT 18
31232: PUSH
31233: LD_INT 19
31235: PUSH
31236: LD_INT 20
31238: PUSH
31239: LD_INT 21
31241: PUSH
31242: LD_INT 22
31244: PUSH
31245: LD_INT 23
31247: PUSH
31248: LD_INT 24
31250: PUSH
31251: LD_INT 25
31253: PUSH
31254: LD_INT 26
31256: PUSH
31257: LD_INT 27
31259: PUSH
31260: LD_INT 28
31262: PUSH
31263: LD_INT 29
31265: PUSH
31266: LD_INT 30
31268: PUSH
31269: LD_INT 31
31271: PUSH
31272: LD_INT 32
31274: PUSH
31275: LD_INT 33
31277: PUSH
31278: LD_INT 34
31280: PUSH
31281: LD_INT 36
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 101
31323: PUSH
31324: LD_INT 102
31326: PUSH
31327: LD_INT 103
31329: PUSH
31330: LD_INT 104
31332: PUSH
31333: LD_INT 105
31335: PUSH
31336: LD_INT 106
31338: PUSH
31339: LD_INT 107
31341: PUSH
31342: LD_INT 108
31344: PUSH
31345: LD_INT 109
31347: PUSH
31348: LD_INT 110
31350: PUSH
31351: LD_INT 111
31353: PUSH
31354: LD_INT 112
31356: PUSH
31357: LD_INT 113
31359: PUSH
31360: LD_INT 114
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: ST_TO_ADDR
31383: GO 31758
31385: LD_INT 18
31387: DOUBLE
31388: EQUAL
31389: IFTRUE 31393
31391: GO 31529
31393: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
31394: LD_ADDR_VAR 0 1
31398: PUSH
31399: LD_INT 2
31401: PUSH
31402: LD_INT 4
31404: PUSH
31405: LD_INT 5
31407: PUSH
31408: LD_INT 7
31410: PUSH
31411: LD_INT 11
31413: PUSH
31414: LD_INT 12
31416: PUSH
31417: LD_INT 15
31419: PUSH
31420: LD_INT 16
31422: PUSH
31423: LD_INT 20
31425: PUSH
31426: LD_INT 21
31428: PUSH
31429: LD_INT 22
31431: PUSH
31432: LD_INT 23
31434: PUSH
31435: LD_INT 25
31437: PUSH
31438: LD_INT 26
31440: PUSH
31441: LD_INT 30
31443: PUSH
31444: LD_INT 31
31446: PUSH
31447: LD_INT 32
31449: PUSH
31450: LD_INT 33
31452: PUSH
31453: LD_INT 34
31455: PUSH
31456: LD_INT 35
31458: PUSH
31459: LD_INT 36
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 101
31487: PUSH
31488: LD_INT 102
31490: PUSH
31491: LD_INT 103
31493: PUSH
31494: LD_INT 106
31496: PUSH
31497: LD_INT 108
31499: PUSH
31500: LD_INT 112
31502: PUSH
31503: LD_INT 113
31505: PUSH
31506: LD_INT 114
31508: PUSH
31509: LD_INT 115
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: ST_TO_ADDR
31527: GO 31758
31529: LD_INT 19
31531: DOUBLE
31532: EQUAL
31533: IFTRUE 31537
31535: GO 31757
31537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
31538: LD_ADDR_VAR 0 1
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: LD_INT 3
31551: PUSH
31552: LD_INT 4
31554: PUSH
31555: LD_INT 5
31557: PUSH
31558: LD_INT 6
31560: PUSH
31561: LD_INT 7
31563: PUSH
31564: LD_INT 8
31566: PUSH
31567: LD_INT 9
31569: PUSH
31570: LD_INT 10
31572: PUSH
31573: LD_INT 11
31575: PUSH
31576: LD_INT 12
31578: PUSH
31579: LD_INT 13
31581: PUSH
31582: LD_INT 14
31584: PUSH
31585: LD_INT 15
31587: PUSH
31588: LD_INT 16
31590: PUSH
31591: LD_INT 17
31593: PUSH
31594: LD_INT 18
31596: PUSH
31597: LD_INT 19
31599: PUSH
31600: LD_INT 20
31602: PUSH
31603: LD_INT 21
31605: PUSH
31606: LD_INT 22
31608: PUSH
31609: LD_INT 23
31611: PUSH
31612: LD_INT 24
31614: PUSH
31615: LD_INT 25
31617: PUSH
31618: LD_INT 26
31620: PUSH
31621: LD_INT 27
31623: PUSH
31624: LD_INT 28
31626: PUSH
31627: LD_INT 29
31629: PUSH
31630: LD_INT 30
31632: PUSH
31633: LD_INT 31
31635: PUSH
31636: LD_INT 32
31638: PUSH
31639: LD_INT 33
31641: PUSH
31642: LD_INT 34
31644: PUSH
31645: LD_INT 35
31647: PUSH
31648: LD_INT 36
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 101
31691: PUSH
31692: LD_INT 102
31694: PUSH
31695: LD_INT 103
31697: PUSH
31698: LD_INT 104
31700: PUSH
31701: LD_INT 105
31703: PUSH
31704: LD_INT 106
31706: PUSH
31707: LD_INT 107
31709: PUSH
31710: LD_INT 108
31712: PUSH
31713: LD_INT 109
31715: PUSH
31716: LD_INT 110
31718: PUSH
31719: LD_INT 111
31721: PUSH
31722: LD_INT 112
31724: PUSH
31725: LD_INT 113
31727: PUSH
31728: LD_INT 114
31730: PUSH
31731: LD_INT 115
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: ST_TO_ADDR
31755: GO 31758
31757: POP
// end else
31758: GO 31977
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
31760: LD_ADDR_VAR 0 1
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: LD_INT 3
31773: PUSH
31774: LD_INT 4
31776: PUSH
31777: LD_INT 5
31779: PUSH
31780: LD_INT 6
31782: PUSH
31783: LD_INT 7
31785: PUSH
31786: LD_INT 8
31788: PUSH
31789: LD_INT 9
31791: PUSH
31792: LD_INT 10
31794: PUSH
31795: LD_INT 11
31797: PUSH
31798: LD_INT 12
31800: PUSH
31801: LD_INT 13
31803: PUSH
31804: LD_INT 14
31806: PUSH
31807: LD_INT 15
31809: PUSH
31810: LD_INT 16
31812: PUSH
31813: LD_INT 17
31815: PUSH
31816: LD_INT 18
31818: PUSH
31819: LD_INT 19
31821: PUSH
31822: LD_INT 20
31824: PUSH
31825: LD_INT 21
31827: PUSH
31828: LD_INT 22
31830: PUSH
31831: LD_INT 23
31833: PUSH
31834: LD_INT 24
31836: PUSH
31837: LD_INT 25
31839: PUSH
31840: LD_INT 26
31842: PUSH
31843: LD_INT 27
31845: PUSH
31846: LD_INT 28
31848: PUSH
31849: LD_INT 29
31851: PUSH
31852: LD_INT 30
31854: PUSH
31855: LD_INT 31
31857: PUSH
31858: LD_INT 32
31860: PUSH
31861: LD_INT 33
31863: PUSH
31864: LD_INT 34
31866: PUSH
31867: LD_INT 35
31869: PUSH
31870: LD_INT 36
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 101
31913: PUSH
31914: LD_INT 102
31916: PUSH
31917: LD_INT 103
31919: PUSH
31920: LD_INT 104
31922: PUSH
31923: LD_INT 105
31925: PUSH
31926: LD_INT 106
31928: PUSH
31929: LD_INT 107
31931: PUSH
31932: LD_INT 108
31934: PUSH
31935: LD_INT 109
31937: PUSH
31938: LD_INT 110
31940: PUSH
31941: LD_INT 111
31943: PUSH
31944: LD_INT 112
31946: PUSH
31947: LD_INT 113
31949: PUSH
31950: LD_INT 114
31952: PUSH
31953: LD_INT 115
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: ST_TO_ADDR
// if result then
31977: LD_VAR 0 1
31981: IFFALSE 32270
// begin normal :=  ;
31983: LD_ADDR_VAR 0 3
31987: PUSH
31988: LD_STRING 
31990: ST_TO_ADDR
// hardcore :=  ;
31991: LD_ADDR_VAR 0 4
31995: PUSH
31996: LD_STRING 
31998: ST_TO_ADDR
// for i = 1 to normalCounter do
31999: LD_ADDR_VAR 0 5
32003: PUSH
32004: DOUBLE
32005: LD_INT 1
32007: DEC
32008: ST_TO_ADDR
32009: LD_EXP 68
32013: PUSH
32014: FOR_TO
32015: IFFALSE 32116
// begin tmp := 0 ;
32017: LD_ADDR_VAR 0 2
32021: PUSH
32022: LD_STRING 0
32024: ST_TO_ADDR
// if result [ 1 ] then
32025: LD_VAR 0 1
32029: PUSH
32030: LD_INT 1
32032: ARRAY
32033: IFFALSE 32098
// if result [ 1 ] [ 1 ] = i then
32035: LD_VAR 0 1
32039: PUSH
32040: LD_INT 1
32042: ARRAY
32043: PUSH
32044: LD_INT 1
32046: ARRAY
32047: PUSH
32048: LD_VAR 0 5
32052: EQUAL
32053: IFFALSE 32098
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
32055: LD_ADDR_VAR 0 1
32059: PUSH
32060: LD_VAR 0 1
32064: PPUSH
32065: LD_INT 1
32067: PPUSH
32068: LD_VAR 0 1
32072: PUSH
32073: LD_INT 1
32075: ARRAY
32076: PPUSH
32077: LD_INT 1
32079: PPUSH
32080: CALL_OW 3
32084: PPUSH
32085: CALL_OW 1
32089: ST_TO_ADDR
// tmp := 1 ;
32090: LD_ADDR_VAR 0 2
32094: PUSH
32095: LD_STRING 1
32097: ST_TO_ADDR
// end ; normal := normal & tmp ;
32098: LD_ADDR_VAR 0 3
32102: PUSH
32103: LD_VAR 0 3
32107: PUSH
32108: LD_VAR 0 2
32112: STR
32113: ST_TO_ADDR
// end ;
32114: GO 32014
32116: POP
32117: POP
// for i = 1 to hardcoreCounter do
32118: LD_ADDR_VAR 0 5
32122: PUSH
32123: DOUBLE
32124: LD_INT 1
32126: DEC
32127: ST_TO_ADDR
32128: LD_EXP 69
32132: PUSH
32133: FOR_TO
32134: IFFALSE 32239
// begin tmp := 0 ;
32136: LD_ADDR_VAR 0 2
32140: PUSH
32141: LD_STRING 0
32143: ST_TO_ADDR
// if result [ 2 ] then
32144: LD_VAR 0 1
32148: PUSH
32149: LD_INT 2
32151: ARRAY
32152: IFFALSE 32221
// if result [ 2 ] [ 1 ] = 100 + i then
32154: LD_VAR 0 1
32158: PUSH
32159: LD_INT 2
32161: ARRAY
32162: PUSH
32163: LD_INT 1
32165: ARRAY
32166: PUSH
32167: LD_INT 100
32169: PUSH
32170: LD_VAR 0 5
32174: PLUS
32175: EQUAL
32176: IFFALSE 32221
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32178: LD_ADDR_VAR 0 1
32182: PUSH
32183: LD_VAR 0 1
32187: PPUSH
32188: LD_INT 2
32190: PPUSH
32191: LD_VAR 0 1
32195: PUSH
32196: LD_INT 2
32198: ARRAY
32199: PPUSH
32200: LD_INT 1
32202: PPUSH
32203: CALL_OW 3
32207: PPUSH
32208: CALL_OW 1
32212: ST_TO_ADDR
// tmp := 1 ;
32213: LD_ADDR_VAR 0 2
32217: PUSH
32218: LD_STRING 1
32220: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32221: LD_ADDR_VAR 0 4
32225: PUSH
32226: LD_VAR 0 4
32230: PUSH
32231: LD_VAR 0 2
32235: STR
32236: ST_TO_ADDR
// end ;
32237: GO 32133
32239: POP
32240: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32241: LD_STRING getStreamItemsFromMission("
32243: PUSH
32244: LD_VAR 0 3
32248: STR
32249: PUSH
32250: LD_STRING ","
32252: STR
32253: PUSH
32254: LD_VAR 0 4
32258: STR
32259: PUSH
32260: LD_STRING ")
32262: STR
32263: PPUSH
32264: CALL_OW 559
// end else
32268: GO 32277
// ToLua ( getStreamItemsFromMission("","") ) ;
32270: LD_STRING getStreamItemsFromMission("","")
32272: PPUSH
32273: CALL_OW 559
// end ;
32277: LD_VAR 0 1
32281: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32282: LD_EXP 67
32286: PUSH
32287: LD_EXP 72
32291: AND
32292: IFFALSE 32416
32294: GO 32296
32296: DISABLE
32297: LD_INT 0
32299: PPUSH
32300: PPUSH
// begin enable ;
32301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32302: LD_ADDR_VAR 0 2
32306: PUSH
32307: LD_INT 22
32309: PUSH
32310: LD_OWVAR 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: PUSH
32322: LD_INT 34
32324: PUSH
32325: LD_INT 7
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 34
32334: PUSH
32335: LD_INT 45
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 34
32344: PUSH
32345: LD_INT 28
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 34
32354: PUSH
32355: LD_INT 47
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PPUSH
32373: CALL_OW 69
32377: ST_TO_ADDR
// if not tmp then
32378: LD_VAR 0 2
32382: NOT
32383: IFFALSE 32387
// exit ;
32385: GO 32416
// for i in tmp do
32387: LD_ADDR_VAR 0 1
32391: PUSH
32392: LD_VAR 0 2
32396: PUSH
32397: FOR_IN
32398: IFFALSE 32414
// begin SetLives ( i , 0 ) ;
32400: LD_VAR 0 1
32404: PPUSH
32405: LD_INT 0
32407: PPUSH
32408: CALL_OW 234
// end ;
32412: GO 32397
32414: POP
32415: POP
// end ;
32416: PPOPN 2
32418: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
32419: LD_EXP 67
32423: PUSH
32424: LD_EXP 73
32428: AND
32429: IFFALSE 32513
32431: GO 32433
32433: DISABLE
32434: LD_INT 0
32436: PPUSH
32437: PPUSH
// begin enable ;
32438: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
32439: LD_ADDR_VAR 0 2
32443: PUSH
32444: LD_INT 22
32446: PUSH
32447: LD_OWVAR 2
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 32
32458: PUSH
32459: LD_INT 3
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PPUSH
32470: CALL_OW 69
32474: ST_TO_ADDR
// if not tmp then
32475: LD_VAR 0 2
32479: NOT
32480: IFFALSE 32484
// exit ;
32482: GO 32513
// for i in tmp do
32484: LD_ADDR_VAR 0 1
32488: PUSH
32489: LD_VAR 0 2
32493: PUSH
32494: FOR_IN
32495: IFFALSE 32511
// begin SetLives ( i , 0 ) ;
32497: LD_VAR 0 1
32501: PPUSH
32502: LD_INT 0
32504: PPUSH
32505: CALL_OW 234
// end ;
32509: GO 32494
32511: POP
32512: POP
// end ;
32513: PPOPN 2
32515: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
32516: LD_EXP 67
32520: PUSH
32521: LD_EXP 70
32525: AND
32526: IFFALSE 32619
32528: GO 32530
32530: DISABLE
32531: LD_INT 0
32533: PPUSH
// begin enable ;
32534: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
32535: LD_ADDR_VAR 0 1
32539: PUSH
32540: LD_INT 22
32542: PUSH
32543: LD_OWVAR 2
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 2
32554: PUSH
32555: LD_INT 25
32557: PUSH
32558: LD_INT 5
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 25
32567: PUSH
32568: LD_INT 9
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 25
32577: PUSH
32578: LD_INT 8
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PPUSH
32595: CALL_OW 69
32599: PUSH
32600: FOR_IN
32601: IFFALSE 32617
// begin SetClass ( i , 1 ) ;
32603: LD_VAR 0 1
32607: PPUSH
32608: LD_INT 1
32610: PPUSH
32611: CALL_OW 336
// end ;
32615: GO 32600
32617: POP
32618: POP
// end ;
32619: PPOPN 1
32621: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
32622: LD_EXP 67
32626: PUSH
32627: LD_EXP 71
32631: AND
32632: PUSH
32633: LD_OWVAR 65
32637: PUSH
32638: LD_INT 7
32640: LESS
32641: AND
32642: IFFALSE 32656
32644: GO 32646
32646: DISABLE
// begin enable ;
32647: ENABLE
// game_speed := 7 ;
32648: LD_ADDR_OWVAR 65
32652: PUSH
32653: LD_INT 7
32655: ST_TO_ADDR
// end ;
32656: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
32657: LD_EXP 67
32661: PUSH
32662: LD_EXP 74
32666: AND
32667: IFFALSE 32869
32669: GO 32671
32671: DISABLE
32672: LD_INT 0
32674: PPUSH
32675: PPUSH
32676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32677: LD_ADDR_VAR 0 3
32681: PUSH
32682: LD_INT 81
32684: PUSH
32685: LD_OWVAR 2
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 21
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PPUSH
32708: CALL_OW 69
32712: ST_TO_ADDR
// if not tmp then
32713: LD_VAR 0 3
32717: NOT
32718: IFFALSE 32722
// exit ;
32720: GO 32869
// if tmp > 5 then
32722: LD_VAR 0 3
32726: PUSH
32727: LD_INT 5
32729: GREATER
32730: IFFALSE 32742
// k := 5 else
32732: LD_ADDR_VAR 0 2
32736: PUSH
32737: LD_INT 5
32739: ST_TO_ADDR
32740: GO 32752
// k := tmp ;
32742: LD_ADDR_VAR 0 2
32746: PUSH
32747: LD_VAR 0 3
32751: ST_TO_ADDR
// for i := 1 to k do
32752: LD_ADDR_VAR 0 1
32756: PUSH
32757: DOUBLE
32758: LD_INT 1
32760: DEC
32761: ST_TO_ADDR
32762: LD_VAR 0 2
32766: PUSH
32767: FOR_TO
32768: IFFALSE 32867
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
32770: LD_VAR 0 3
32774: PUSH
32775: LD_VAR 0 1
32779: ARRAY
32780: PPUSH
32781: LD_VAR 0 1
32785: PUSH
32786: LD_INT 4
32788: MOD
32789: PUSH
32790: LD_INT 1
32792: PLUS
32793: PPUSH
32794: CALL_OW 259
32798: PUSH
32799: LD_INT 10
32801: LESS
32802: IFFALSE 32865
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
32804: LD_VAR 0 3
32808: PUSH
32809: LD_VAR 0 1
32813: ARRAY
32814: PPUSH
32815: LD_VAR 0 1
32819: PUSH
32820: LD_INT 4
32822: MOD
32823: PUSH
32824: LD_INT 1
32826: PLUS
32827: PPUSH
32828: LD_VAR 0 3
32832: PUSH
32833: LD_VAR 0 1
32837: ARRAY
32838: PPUSH
32839: LD_VAR 0 1
32843: PUSH
32844: LD_INT 4
32846: MOD
32847: PUSH
32848: LD_INT 1
32850: PLUS
32851: PPUSH
32852: CALL_OW 259
32856: PUSH
32857: LD_INT 1
32859: PLUS
32860: PPUSH
32861: CALL_OW 237
32865: GO 32767
32867: POP
32868: POP
// end ;
32869: PPOPN 3
32871: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
32872: LD_EXP 67
32876: PUSH
32877: LD_EXP 75
32881: AND
32882: IFFALSE 32902
32884: GO 32886
32886: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
32887: LD_INT 4
32889: PPUSH
32890: LD_OWVAR 2
32894: PPUSH
32895: LD_INT 0
32897: PPUSH
32898: CALL_OW 324
32902: END
// every 0 0$1 trigger StreamModeActive and sShovel do
32903: LD_EXP 67
32907: PUSH
32908: LD_EXP 104
32912: AND
32913: IFFALSE 32933
32915: GO 32917
32917: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
32918: LD_INT 19
32920: PPUSH
32921: LD_OWVAR 2
32925: PPUSH
32926: LD_INT 0
32928: PPUSH
32929: CALL_OW 324
32933: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
32934: LD_EXP 67
32938: PUSH
32939: LD_EXP 76
32943: AND
32944: IFFALSE 33046
32946: GO 32948
32948: DISABLE
32949: LD_INT 0
32951: PPUSH
32952: PPUSH
// begin enable ;
32953: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
32954: LD_ADDR_VAR 0 2
32958: PUSH
32959: LD_INT 22
32961: PUSH
32962: LD_OWVAR 2
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: LD_INT 34
32976: PUSH
32977: LD_INT 11
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 34
32986: PUSH
32987: LD_INT 30
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PPUSH
33003: CALL_OW 69
33007: ST_TO_ADDR
// if not tmp then
33008: LD_VAR 0 2
33012: NOT
33013: IFFALSE 33017
// exit ;
33015: GO 33046
// for i in tmp do
33017: LD_ADDR_VAR 0 1
33021: PUSH
33022: LD_VAR 0 2
33026: PUSH
33027: FOR_IN
33028: IFFALSE 33044
// begin SetLives ( i , 0 ) ;
33030: LD_VAR 0 1
33034: PPUSH
33035: LD_INT 0
33037: PPUSH
33038: CALL_OW 234
// end ;
33042: GO 33027
33044: POP
33045: POP
// end ;
33046: PPOPN 2
33048: END
// every 0 0$1 trigger StreamModeActive and sBunker do
33049: LD_EXP 67
33053: PUSH
33054: LD_EXP 77
33058: AND
33059: IFFALSE 33079
33061: GO 33063
33063: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
33064: LD_INT 32
33066: PPUSH
33067: LD_OWVAR 2
33071: PPUSH
33072: LD_INT 0
33074: PPUSH
33075: CALL_OW 324
33079: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
33080: LD_EXP 67
33084: PUSH
33085: LD_EXP 78
33089: AND
33090: IFFALSE 33271
33092: GO 33094
33094: DISABLE
33095: LD_INT 0
33097: PPUSH
33098: PPUSH
33099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
33100: LD_ADDR_VAR 0 2
33104: PUSH
33105: LD_INT 22
33107: PUSH
33108: LD_OWVAR 2
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 33
33119: PUSH
33120: LD_INT 3
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PPUSH
33131: CALL_OW 69
33135: ST_TO_ADDR
// if not tmp then
33136: LD_VAR 0 2
33140: NOT
33141: IFFALSE 33145
// exit ;
33143: GO 33271
// side := 0 ;
33145: LD_ADDR_VAR 0 3
33149: PUSH
33150: LD_INT 0
33152: ST_TO_ADDR
// for i := 1 to 8 do
33153: LD_ADDR_VAR 0 1
33157: PUSH
33158: DOUBLE
33159: LD_INT 1
33161: DEC
33162: ST_TO_ADDR
33163: LD_INT 8
33165: PUSH
33166: FOR_TO
33167: IFFALSE 33215
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
33169: LD_OWVAR 2
33173: PUSH
33174: LD_VAR 0 1
33178: NONEQUAL
33179: PUSH
33180: LD_OWVAR 2
33184: PPUSH
33185: LD_VAR 0 1
33189: PPUSH
33190: CALL_OW 81
33194: PUSH
33195: LD_INT 2
33197: EQUAL
33198: AND
33199: IFFALSE 33213
// begin side := i ;
33201: LD_ADDR_VAR 0 3
33205: PUSH
33206: LD_VAR 0 1
33210: ST_TO_ADDR
// break ;
33211: GO 33215
// end ;
33213: GO 33166
33215: POP
33216: POP
// if not side then
33217: LD_VAR 0 3
33221: NOT
33222: IFFALSE 33226
// exit ;
33224: GO 33271
// for i := 1 to tmp do
33226: LD_ADDR_VAR 0 1
33230: PUSH
33231: DOUBLE
33232: LD_INT 1
33234: DEC
33235: ST_TO_ADDR
33236: LD_VAR 0 2
33240: PUSH
33241: FOR_TO
33242: IFFALSE 33269
// if Prob ( 60 ) then
33244: LD_INT 60
33246: PPUSH
33247: CALL_OW 13
33251: IFFALSE 33267
// SetSide ( i , side ) ;
33253: LD_VAR 0 1
33257: PPUSH
33258: LD_VAR 0 3
33262: PPUSH
33263: CALL_OW 235
33267: GO 33241
33269: POP
33270: POP
// end ;
33271: PPOPN 3
33273: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33274: LD_EXP 67
33278: PUSH
33279: LD_EXP 80
33283: AND
33284: IFFALSE 33403
33286: GO 33288
33288: DISABLE
33289: LD_INT 0
33291: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33292: LD_ADDR_VAR 0 1
33296: PUSH
33297: LD_INT 22
33299: PUSH
33300: LD_OWVAR 2
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 21
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 23
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: PPUSH
33341: CALL_OW 69
33345: PUSH
33346: FOR_IN
33347: IFFALSE 33401
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33349: LD_VAR 0 1
33353: PPUSH
33354: CALL_OW 257
33358: PUSH
33359: LD_INT 1
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: LD_INT 3
33367: PUSH
33368: LD_INT 4
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: IN
33377: IFFALSE 33399
// SetClass ( un , rand ( 1 , 4 ) ) ;
33379: LD_VAR 0 1
33383: PPUSH
33384: LD_INT 1
33386: PPUSH
33387: LD_INT 4
33389: PPUSH
33390: CALL_OW 12
33394: PPUSH
33395: CALL_OW 336
33399: GO 33346
33401: POP
33402: POP
// end ;
33403: PPOPN 1
33405: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
33406: LD_EXP 67
33410: PUSH
33411: LD_EXP 79
33415: AND
33416: IFFALSE 33495
33418: GO 33420
33420: DISABLE
33421: LD_INT 0
33423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33424: LD_ADDR_VAR 0 1
33428: PUSH
33429: LD_INT 22
33431: PUSH
33432: LD_OWVAR 2
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 21
33443: PUSH
33444: LD_INT 3
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PPUSH
33455: CALL_OW 69
33459: ST_TO_ADDR
// if not tmp then
33460: LD_VAR 0 1
33464: NOT
33465: IFFALSE 33469
// exit ;
33467: GO 33495
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
33469: LD_VAR 0 1
33473: PUSH
33474: LD_INT 1
33476: PPUSH
33477: LD_VAR 0 1
33481: PPUSH
33482: CALL_OW 12
33486: ARRAY
33487: PPUSH
33488: LD_INT 100
33490: PPUSH
33491: CALL_OW 234
// end ;
33495: PPOPN 1
33497: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
33498: LD_EXP 67
33502: PUSH
33503: LD_EXP 81
33507: AND
33508: IFFALSE 33606
33510: GO 33512
33512: DISABLE
33513: LD_INT 0
33515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33516: LD_ADDR_VAR 0 1
33520: PUSH
33521: LD_INT 22
33523: PUSH
33524: LD_OWVAR 2
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 21
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PPUSH
33547: CALL_OW 69
33551: ST_TO_ADDR
// if not tmp then
33552: LD_VAR 0 1
33556: NOT
33557: IFFALSE 33561
// exit ;
33559: GO 33606
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
33561: LD_VAR 0 1
33565: PUSH
33566: LD_INT 1
33568: PPUSH
33569: LD_VAR 0 1
33573: PPUSH
33574: CALL_OW 12
33578: ARRAY
33579: PPUSH
33580: LD_INT 1
33582: PPUSH
33583: LD_INT 4
33585: PPUSH
33586: CALL_OW 12
33590: PPUSH
33591: LD_INT 3000
33593: PPUSH
33594: LD_INT 9000
33596: PPUSH
33597: CALL_OW 12
33601: PPUSH
33602: CALL_OW 492
// end ;
33606: PPOPN 1
33608: END
// every 0 0$1 trigger StreamModeActive and sDepot do
33609: LD_EXP 67
33613: PUSH
33614: LD_EXP 82
33618: AND
33619: IFFALSE 33639
33621: GO 33623
33623: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
33624: LD_INT 1
33626: PPUSH
33627: LD_OWVAR 2
33631: PPUSH
33632: LD_INT 0
33634: PPUSH
33635: CALL_OW 324
33639: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
33640: LD_EXP 67
33644: PUSH
33645: LD_EXP 83
33649: AND
33650: IFFALSE 33733
33652: GO 33654
33654: DISABLE
33655: LD_INT 0
33657: PPUSH
33658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33659: LD_ADDR_VAR 0 2
33663: PUSH
33664: LD_INT 22
33666: PUSH
33667: LD_OWVAR 2
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 21
33678: PUSH
33679: LD_INT 3
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PPUSH
33690: CALL_OW 69
33694: ST_TO_ADDR
// if not tmp then
33695: LD_VAR 0 2
33699: NOT
33700: IFFALSE 33704
// exit ;
33702: GO 33733
// for i in tmp do
33704: LD_ADDR_VAR 0 1
33708: PUSH
33709: LD_VAR 0 2
33713: PUSH
33714: FOR_IN
33715: IFFALSE 33731
// SetBLevel ( i , 10 ) ;
33717: LD_VAR 0 1
33721: PPUSH
33722: LD_INT 10
33724: PPUSH
33725: CALL_OW 241
33729: GO 33714
33731: POP
33732: POP
// end ;
33733: PPOPN 2
33735: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
33736: LD_EXP 67
33740: PUSH
33741: LD_EXP 84
33745: AND
33746: IFFALSE 33857
33748: GO 33750
33750: DISABLE
33751: LD_INT 0
33753: PPUSH
33754: PPUSH
33755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33756: LD_ADDR_VAR 0 3
33760: PUSH
33761: LD_INT 22
33763: PUSH
33764: LD_OWVAR 2
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 25
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PPUSH
33787: CALL_OW 69
33791: ST_TO_ADDR
// if not tmp then
33792: LD_VAR 0 3
33796: NOT
33797: IFFALSE 33801
// exit ;
33799: GO 33857
// un := tmp [ rand ( 1 , tmp ) ] ;
33801: LD_ADDR_VAR 0 2
33805: PUSH
33806: LD_VAR 0 3
33810: PUSH
33811: LD_INT 1
33813: PPUSH
33814: LD_VAR 0 3
33818: PPUSH
33819: CALL_OW 12
33823: ARRAY
33824: ST_TO_ADDR
// if Crawls ( un ) then
33825: LD_VAR 0 2
33829: PPUSH
33830: CALL_OW 318
33834: IFFALSE 33845
// ComWalk ( un ) ;
33836: LD_VAR 0 2
33840: PPUSH
33841: CALL_OW 138
// SetClass ( un , class_sniper ) ;
33845: LD_VAR 0 2
33849: PPUSH
33850: LD_INT 5
33852: PPUSH
33853: CALL_OW 336
// end ;
33857: PPOPN 3
33859: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
33860: LD_EXP 67
33864: PUSH
33865: LD_EXP 85
33869: AND
33870: PUSH
33871: LD_OWVAR 67
33875: PUSH
33876: LD_INT 3
33878: LESS
33879: AND
33880: IFFALSE 33899
33882: GO 33884
33884: DISABLE
// Difficulty := Difficulty + 1 ;
33885: LD_ADDR_OWVAR 67
33889: PUSH
33890: LD_OWVAR 67
33894: PUSH
33895: LD_INT 1
33897: PLUS
33898: ST_TO_ADDR
33899: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
33900: LD_EXP 67
33904: PUSH
33905: LD_EXP 86
33909: AND
33910: IFFALSE 34013
33912: GO 33914
33914: DISABLE
33915: LD_INT 0
33917: PPUSH
// begin for i := 1 to 5 do
33918: LD_ADDR_VAR 0 1
33922: PUSH
33923: DOUBLE
33924: LD_INT 1
33926: DEC
33927: ST_TO_ADDR
33928: LD_INT 5
33930: PUSH
33931: FOR_TO
33932: IFFALSE 34011
// begin uc_nation := nation_nature ;
33934: LD_ADDR_OWVAR 21
33938: PUSH
33939: LD_INT 0
33941: ST_TO_ADDR
// uc_side := 0 ;
33942: LD_ADDR_OWVAR 20
33946: PUSH
33947: LD_INT 0
33949: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
33950: LD_ADDR_OWVAR 29
33954: PUSH
33955: LD_INT 12
33957: PUSH
33958: LD_INT 12
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: ST_TO_ADDR
// hc_agressivity := 20 ;
33965: LD_ADDR_OWVAR 35
33969: PUSH
33970: LD_INT 20
33972: ST_TO_ADDR
// hc_class := class_tiger ;
33973: LD_ADDR_OWVAR 28
33977: PUSH
33978: LD_INT 14
33980: ST_TO_ADDR
// hc_gallery :=  ;
33981: LD_ADDR_OWVAR 33
33985: PUSH
33986: LD_STRING 
33988: ST_TO_ADDR
// hc_name :=  ;
33989: LD_ADDR_OWVAR 26
33993: PUSH
33994: LD_STRING 
33996: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
33997: CALL_OW 44
34001: PPUSH
34002: LD_INT 0
34004: PPUSH
34005: CALL_OW 51
// end ;
34009: GO 33931
34011: POP
34012: POP
// end ;
34013: PPOPN 1
34015: END
// every 0 0$1 trigger StreamModeActive and sBomb do
34016: LD_EXP 67
34020: PUSH
34021: LD_EXP 87
34025: AND
34026: IFFALSE 34035
34028: GO 34030
34030: DISABLE
// StreamSibBomb ;
34031: CALL 34036 0 0
34035: END
// export function StreamSibBomb ; var i , x , y ; begin
34036: LD_INT 0
34038: PPUSH
34039: PPUSH
34040: PPUSH
34041: PPUSH
// result := false ;
34042: LD_ADDR_VAR 0 1
34046: PUSH
34047: LD_INT 0
34049: ST_TO_ADDR
// for i := 1 to 16 do
34050: LD_ADDR_VAR 0 2
34054: PUSH
34055: DOUBLE
34056: LD_INT 1
34058: DEC
34059: ST_TO_ADDR
34060: LD_INT 16
34062: PUSH
34063: FOR_TO
34064: IFFALSE 34263
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: LD_INT 10
34073: PUSH
34074: LD_INT 20
34076: PUSH
34077: LD_INT 30
34079: PUSH
34080: LD_INT 40
34082: PUSH
34083: LD_INT 50
34085: PUSH
34086: LD_INT 60
34088: PUSH
34089: LD_INT 70
34091: PUSH
34092: LD_INT 80
34094: PUSH
34095: LD_INT 90
34097: PUSH
34098: LD_INT 100
34100: PUSH
34101: LD_INT 110
34103: PUSH
34104: LD_INT 120
34106: PUSH
34107: LD_INT 130
34109: PUSH
34110: LD_INT 140
34112: PUSH
34113: LD_INT 150
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: PPUSH
34136: LD_INT 15
34138: PPUSH
34139: CALL_OW 12
34143: ARRAY
34144: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34145: LD_ADDR_VAR 0 4
34149: PUSH
34150: LD_INT 10
34152: PUSH
34153: LD_INT 20
34155: PUSH
34156: LD_INT 30
34158: PUSH
34159: LD_INT 40
34161: PUSH
34162: LD_INT 50
34164: PUSH
34165: LD_INT 60
34167: PUSH
34168: LD_INT 70
34170: PUSH
34171: LD_INT 80
34173: PUSH
34174: LD_INT 90
34176: PUSH
34177: LD_INT 100
34179: PUSH
34180: LD_INT 110
34182: PUSH
34183: LD_INT 120
34185: PUSH
34186: LD_INT 130
34188: PUSH
34189: LD_INT 140
34191: PUSH
34192: LD_INT 150
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: PPUSH
34215: LD_INT 15
34217: PPUSH
34218: CALL_OW 12
34222: ARRAY
34223: ST_TO_ADDR
// if ValidHex ( x , y ) then
34224: LD_VAR 0 3
34228: PPUSH
34229: LD_VAR 0 4
34233: PPUSH
34234: CALL_OW 488
34238: IFFALSE 34261
// begin result := [ x , y ] ;
34240: LD_ADDR_VAR 0 1
34244: PUSH
34245: LD_VAR 0 3
34249: PUSH
34250: LD_VAR 0 4
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: ST_TO_ADDR
// break ;
34259: GO 34263
// end ; end ;
34261: GO 34063
34263: POP
34264: POP
// if result then
34265: LD_VAR 0 1
34269: IFFALSE 34329
// begin ToLua ( playSibBomb() ) ;
34271: LD_STRING playSibBomb()
34273: PPUSH
34274: CALL_OW 559
// wait ( 0 0$14 ) ;
34278: LD_INT 490
34280: PPUSH
34281: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34285: LD_VAR 0 1
34289: PUSH
34290: LD_INT 1
34292: ARRAY
34293: PPUSH
34294: LD_VAR 0 1
34298: PUSH
34299: LD_INT 2
34301: ARRAY
34302: PPUSH
34303: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34307: LD_VAR 0 1
34311: PUSH
34312: LD_INT 1
34314: ARRAY
34315: PPUSH
34316: LD_VAR 0 1
34320: PUSH
34321: LD_INT 2
34323: ARRAY
34324: PPUSH
34325: CALL_OW 429
// end ; end ;
34329: LD_VAR 0 1
34333: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34334: LD_EXP 67
34338: PUSH
34339: LD_EXP 89
34343: AND
34344: IFFALSE 34356
34346: GO 34348
34348: DISABLE
// YouLost (  ) ;
34349: LD_STRING 
34351: PPUSH
34352: CALL_OW 104
34356: END
// every 0 0$1 trigger StreamModeActive and sFog do
34357: LD_EXP 67
34361: PUSH
34362: LD_EXP 88
34366: AND
34367: IFFALSE 34381
34369: GO 34371
34371: DISABLE
// FogOff ( your_side ) ;
34372: LD_OWVAR 2
34376: PPUSH
34377: CALL_OW 344
34381: END
// every 0 0$1 trigger StreamModeActive and sSun do
34382: LD_EXP 67
34386: PUSH
34387: LD_EXP 90
34391: AND
34392: IFFALSE 34420
34394: GO 34396
34396: DISABLE
// begin solar_recharge_percent := 0 ;
34397: LD_ADDR_OWVAR 79
34401: PUSH
34402: LD_INT 0
34404: ST_TO_ADDR
// wait ( 5 5$00 ) ;
34405: LD_INT 10500
34407: PPUSH
34408: CALL_OW 67
// solar_recharge_percent := 100 ;
34412: LD_ADDR_OWVAR 79
34416: PUSH
34417: LD_INT 100
34419: ST_TO_ADDR
// end ;
34420: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
34421: LD_EXP 67
34425: PUSH
34426: LD_EXP 91
34430: AND
34431: IFFALSE 34670
34433: GO 34435
34435: DISABLE
34436: LD_INT 0
34438: PPUSH
34439: PPUSH
34440: PPUSH
// begin tmp := [ ] ;
34441: LD_ADDR_VAR 0 3
34445: PUSH
34446: EMPTY
34447: ST_TO_ADDR
// for i := 1 to 6 do
34448: LD_ADDR_VAR 0 1
34452: PUSH
34453: DOUBLE
34454: LD_INT 1
34456: DEC
34457: ST_TO_ADDR
34458: LD_INT 6
34460: PUSH
34461: FOR_TO
34462: IFFALSE 34567
// begin uc_nation := nation_nature ;
34464: LD_ADDR_OWVAR 21
34468: PUSH
34469: LD_INT 0
34471: ST_TO_ADDR
// uc_side := 0 ;
34472: LD_ADDR_OWVAR 20
34476: PUSH
34477: LD_INT 0
34479: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34480: LD_ADDR_OWVAR 29
34484: PUSH
34485: LD_INT 12
34487: PUSH
34488: LD_INT 12
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: ST_TO_ADDR
// hc_agressivity := 20 ;
34495: LD_ADDR_OWVAR 35
34499: PUSH
34500: LD_INT 20
34502: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
34503: LD_ADDR_OWVAR 28
34507: PUSH
34508: LD_INT 17
34510: ST_TO_ADDR
// hc_gallery :=  ;
34511: LD_ADDR_OWVAR 33
34515: PUSH
34516: LD_STRING 
34518: ST_TO_ADDR
// hc_name :=  ;
34519: LD_ADDR_OWVAR 26
34523: PUSH
34524: LD_STRING 
34526: ST_TO_ADDR
// un := CreateHuman ;
34527: LD_ADDR_VAR 0 2
34531: PUSH
34532: CALL_OW 44
34536: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
34537: LD_VAR 0 2
34541: PPUSH
34542: LD_INT 1
34544: PPUSH
34545: CALL_OW 51
// tmp := tmp ^ un ;
34549: LD_ADDR_VAR 0 3
34553: PUSH
34554: LD_VAR 0 3
34558: PUSH
34559: LD_VAR 0 2
34563: ADD
34564: ST_TO_ADDR
// end ;
34565: GO 34461
34567: POP
34568: POP
// repeat wait ( 0 0$1 ) ;
34569: LD_INT 35
34571: PPUSH
34572: CALL_OW 67
// for un in tmp do
34576: LD_ADDR_VAR 0 2
34580: PUSH
34581: LD_VAR 0 3
34585: PUSH
34586: FOR_IN
34587: IFFALSE 34661
// begin if IsDead ( un ) then
34589: LD_VAR 0 2
34593: PPUSH
34594: CALL_OW 301
34598: IFFALSE 34618
// begin tmp := tmp diff un ;
34600: LD_ADDR_VAR 0 3
34604: PUSH
34605: LD_VAR 0 3
34609: PUSH
34610: LD_VAR 0 2
34614: DIFF
34615: ST_TO_ADDR
// continue ;
34616: GO 34586
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
34618: LD_VAR 0 2
34622: PPUSH
34623: LD_INT 3
34625: PUSH
34626: LD_INT 22
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PPUSH
34640: CALL_OW 69
34644: PPUSH
34645: LD_VAR 0 2
34649: PPUSH
34650: CALL_OW 74
34654: PPUSH
34655: CALL_OW 115
// end ;
34659: GO 34586
34661: POP
34662: POP
// until not tmp ;
34663: LD_VAR 0 3
34667: NOT
34668: IFFALSE 34569
// end ;
34670: PPOPN 3
34672: END
// every 0 0$1 trigger StreamModeActive and sTroll do
34673: LD_EXP 67
34677: PUSH
34678: LD_EXP 92
34682: AND
34683: IFFALSE 34737
34685: GO 34687
34687: DISABLE
// begin ToLua ( displayTroll(); ) ;
34688: LD_STRING displayTroll();
34690: PPUSH
34691: CALL_OW 559
// wait ( 3 3$00 ) ;
34695: LD_INT 6300
34697: PPUSH
34698: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34702: LD_STRING hideTroll();
34704: PPUSH
34705: CALL_OW 559
// wait ( 1 1$00 ) ;
34709: LD_INT 2100
34711: PPUSH
34712: CALL_OW 67
// ToLua ( displayTroll(); ) ;
34716: LD_STRING displayTroll();
34718: PPUSH
34719: CALL_OW 559
// wait ( 1 1$00 ) ;
34723: LD_INT 2100
34725: PPUSH
34726: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34730: LD_STRING hideTroll();
34732: PPUSH
34733: CALL_OW 559
// end ;
34737: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
34738: LD_EXP 67
34742: PUSH
34743: LD_EXP 93
34747: AND
34748: IFFALSE 34811
34750: GO 34752
34752: DISABLE
34753: LD_INT 0
34755: PPUSH
// begin p := 0 ;
34756: LD_ADDR_VAR 0 1
34760: PUSH
34761: LD_INT 0
34763: ST_TO_ADDR
// repeat game_speed := 1 ;
34764: LD_ADDR_OWVAR 65
34768: PUSH
34769: LD_INT 1
34771: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34772: LD_INT 35
34774: PPUSH
34775: CALL_OW 67
// p := p + 1 ;
34779: LD_ADDR_VAR 0 1
34783: PUSH
34784: LD_VAR 0 1
34788: PUSH
34789: LD_INT 1
34791: PLUS
34792: ST_TO_ADDR
// until p >= 60 ;
34793: LD_VAR 0 1
34797: PUSH
34798: LD_INT 60
34800: GREATEREQUAL
34801: IFFALSE 34764
// game_speed := 4 ;
34803: LD_ADDR_OWVAR 65
34807: PUSH
34808: LD_INT 4
34810: ST_TO_ADDR
// end ;
34811: PPOPN 1
34813: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
34814: LD_EXP 67
34818: PUSH
34819: LD_EXP 94
34823: AND
34824: IFFALSE 34970
34826: GO 34828
34828: DISABLE
34829: LD_INT 0
34831: PPUSH
34832: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34833: LD_ADDR_VAR 0 1
34837: PUSH
34838: LD_INT 22
34840: PUSH
34841: LD_OWVAR 2
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: LD_INT 30
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 30
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PPUSH
34882: CALL_OW 69
34886: ST_TO_ADDR
// if not depot then
34887: LD_VAR 0 1
34891: NOT
34892: IFFALSE 34896
// exit ;
34894: GO 34970
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
34896: LD_ADDR_VAR 0 2
34900: PUSH
34901: LD_VAR 0 1
34905: PUSH
34906: LD_INT 1
34908: PPUSH
34909: LD_VAR 0 1
34913: PPUSH
34914: CALL_OW 12
34918: ARRAY
34919: PPUSH
34920: CALL_OW 274
34924: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
34925: LD_VAR 0 2
34929: PPUSH
34930: LD_INT 1
34932: PPUSH
34933: LD_INT 0
34935: PPUSH
34936: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
34940: LD_VAR 0 2
34944: PPUSH
34945: LD_INT 2
34947: PPUSH
34948: LD_INT 0
34950: PPUSH
34951: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
34955: LD_VAR 0 2
34959: PPUSH
34960: LD_INT 3
34962: PPUSH
34963: LD_INT 0
34965: PPUSH
34966: CALL_OW 277
// end ;
34970: PPOPN 2
34972: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
34973: LD_EXP 67
34977: PUSH
34978: LD_EXP 95
34982: AND
34983: IFFALSE 35080
34985: GO 34987
34987: DISABLE
34988: LD_INT 0
34990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34991: LD_ADDR_VAR 0 1
34995: PUSH
34996: LD_INT 22
34998: PUSH
34999: LD_OWVAR 2
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 21
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 3
35020: PUSH
35021: LD_INT 23
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: PPUSH
35040: CALL_OW 69
35044: ST_TO_ADDR
// if not tmp then
35045: LD_VAR 0 1
35049: NOT
35050: IFFALSE 35054
// exit ;
35052: GO 35080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
35054: LD_VAR 0 1
35058: PUSH
35059: LD_INT 1
35061: PPUSH
35062: LD_VAR 0 1
35066: PPUSH
35067: CALL_OW 12
35071: ARRAY
35072: PPUSH
35073: LD_INT 200
35075: PPUSH
35076: CALL_OW 234
// end ;
35080: PPOPN 1
35082: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
35083: LD_EXP 67
35087: PUSH
35088: LD_EXP 96
35092: AND
35093: IFFALSE 35172
35095: GO 35097
35097: DISABLE
35098: LD_INT 0
35100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
35101: LD_ADDR_VAR 0 1
35105: PUSH
35106: LD_INT 22
35108: PUSH
35109: LD_OWVAR 2
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 21
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PPUSH
35132: CALL_OW 69
35136: ST_TO_ADDR
// if not tmp then
35137: LD_VAR 0 1
35141: NOT
35142: IFFALSE 35146
// exit ;
35144: GO 35172
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
35146: LD_VAR 0 1
35150: PUSH
35151: LD_INT 1
35153: PPUSH
35154: LD_VAR 0 1
35158: PPUSH
35159: CALL_OW 12
35163: ARRAY
35164: PPUSH
35165: LD_INT 60
35167: PPUSH
35168: CALL_OW 234
// end ;
35172: PPOPN 1
35174: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
35175: LD_EXP 67
35179: PUSH
35180: LD_EXP 97
35184: AND
35185: IFFALSE 35284
35187: GO 35189
35189: DISABLE
35190: LD_INT 0
35192: PPUSH
35193: PPUSH
// begin enable ;
35194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
35195: LD_ADDR_VAR 0 1
35199: PUSH
35200: LD_INT 22
35202: PUSH
35203: LD_OWVAR 2
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 61
35214: PUSH
35215: EMPTY
35216: LIST
35217: PUSH
35218: LD_INT 33
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: PPUSH
35233: CALL_OW 69
35237: ST_TO_ADDR
// if not tmp then
35238: LD_VAR 0 1
35242: NOT
35243: IFFALSE 35247
// exit ;
35245: GO 35284
// for i in tmp do
35247: LD_ADDR_VAR 0 2
35251: PUSH
35252: LD_VAR 0 1
35256: PUSH
35257: FOR_IN
35258: IFFALSE 35282
// if IsControledBy ( i ) then
35260: LD_VAR 0 2
35264: PPUSH
35265: CALL_OW 312
35269: IFFALSE 35280
// ComUnlink ( i ) ;
35271: LD_VAR 0 2
35275: PPUSH
35276: CALL_OW 136
35280: GO 35257
35282: POP
35283: POP
// end ;
35284: PPOPN 2
35286: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35287: LD_EXP 67
35291: PUSH
35292: LD_EXP 98
35296: AND
35297: IFFALSE 35437
35299: GO 35301
35301: DISABLE
35302: LD_INT 0
35304: PPUSH
35305: PPUSH
// begin ToLua ( displayPowell(); ) ;
35306: LD_STRING displayPowell();
35308: PPUSH
35309: CALL_OW 559
// uc_side := 0 ;
35313: LD_ADDR_OWVAR 20
35317: PUSH
35318: LD_INT 0
35320: ST_TO_ADDR
// uc_nation := 2 ;
35321: LD_ADDR_OWVAR 21
35325: PUSH
35326: LD_INT 2
35328: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35329: LD_ADDR_OWVAR 37
35333: PUSH
35334: LD_INT 14
35336: ST_TO_ADDR
// vc_engine := engine_siberite ;
35337: LD_ADDR_OWVAR 39
35341: PUSH
35342: LD_INT 3
35344: ST_TO_ADDR
// vc_control := control_apeman ;
35345: LD_ADDR_OWVAR 38
35349: PUSH
35350: LD_INT 5
35352: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
35353: LD_ADDR_OWVAR 40
35357: PUSH
35358: LD_INT 29
35360: ST_TO_ADDR
// un := CreateVehicle ;
35361: LD_ADDR_VAR 0 2
35365: PUSH
35366: CALL_OW 45
35370: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35371: LD_VAR 0 2
35375: PPUSH
35376: LD_INT 1
35378: PPUSH
35379: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35383: LD_INT 35
35385: PPUSH
35386: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35390: LD_VAR 0 2
35394: PPUSH
35395: LD_INT 22
35397: PUSH
35398: LD_OWVAR 2
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PPUSH
35407: CALL_OW 69
35411: PPUSH
35412: LD_VAR 0 2
35416: PPUSH
35417: CALL_OW 74
35421: PPUSH
35422: CALL_OW 115
// until IsDead ( un ) ;
35426: LD_VAR 0 2
35430: PPUSH
35431: CALL_OW 301
35435: IFFALSE 35383
// end ;
35437: PPOPN 2
35439: END
// every 0 0$1 trigger StreamModeActive and sStu do
35440: LD_EXP 67
35444: PUSH
35445: LD_EXP 106
35449: AND
35450: IFFALSE 35466
35452: GO 35454
35454: DISABLE
// begin ToLua ( displayStucuk(); ) ;
35455: LD_STRING displayStucuk();
35457: PPUSH
35458: CALL_OW 559
// ResetFog ;
35462: CALL_OW 335
// end ;
35466: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
35467: LD_EXP 67
35471: PUSH
35472: LD_EXP 99
35476: AND
35477: IFFALSE 35618
35479: GO 35481
35481: DISABLE
35482: LD_INT 0
35484: PPUSH
35485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35486: LD_ADDR_VAR 0 2
35490: PUSH
35491: LD_INT 22
35493: PUSH
35494: LD_OWVAR 2
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 21
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PPUSH
35517: CALL_OW 69
35521: ST_TO_ADDR
// if not tmp then
35522: LD_VAR 0 2
35526: NOT
35527: IFFALSE 35531
// exit ;
35529: GO 35618
// un := tmp [ rand ( 1 , tmp ) ] ;
35531: LD_ADDR_VAR 0 1
35535: PUSH
35536: LD_VAR 0 2
35540: PUSH
35541: LD_INT 1
35543: PPUSH
35544: LD_VAR 0 2
35548: PPUSH
35549: CALL_OW 12
35553: ARRAY
35554: ST_TO_ADDR
// SetSide ( un , 0 ) ;
35555: LD_VAR 0 1
35559: PPUSH
35560: LD_INT 0
35562: PPUSH
35563: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
35567: LD_VAR 0 1
35571: PPUSH
35572: LD_OWVAR 3
35576: PUSH
35577: LD_VAR 0 1
35581: DIFF
35582: PPUSH
35583: LD_VAR 0 1
35587: PPUSH
35588: CALL_OW 74
35592: PPUSH
35593: CALL_OW 115
// wait ( 0 0$20 ) ;
35597: LD_INT 700
35599: PPUSH
35600: CALL_OW 67
// SetSide ( un , your_side ) ;
35604: LD_VAR 0 1
35608: PPUSH
35609: LD_OWVAR 2
35613: PPUSH
35614: CALL_OW 235
// end ;
35618: PPOPN 2
35620: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
35621: LD_EXP 67
35625: PUSH
35626: LD_EXP 100
35630: AND
35631: IFFALSE 35737
35633: GO 35635
35635: DISABLE
35636: LD_INT 0
35638: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35639: LD_ADDR_VAR 0 1
35643: PUSH
35644: LD_INT 22
35646: PUSH
35647: LD_OWVAR 2
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: LD_INT 30
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 30
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PPUSH
35688: CALL_OW 69
35692: ST_TO_ADDR
// if not depot then
35693: LD_VAR 0 1
35697: NOT
35698: IFFALSE 35702
// exit ;
35700: GO 35737
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
35702: LD_VAR 0 1
35706: PUSH
35707: LD_INT 1
35709: ARRAY
35710: PPUSH
35711: CALL_OW 250
35715: PPUSH
35716: LD_VAR 0 1
35720: PUSH
35721: LD_INT 1
35723: ARRAY
35724: PPUSH
35725: CALL_OW 251
35729: PPUSH
35730: LD_INT 70
35732: PPUSH
35733: CALL_OW 495
// end ;
35737: PPOPN 1
35739: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
35740: LD_EXP 67
35744: PUSH
35745: LD_EXP 101
35749: AND
35750: IFFALSE 35961
35752: GO 35754
35754: DISABLE
35755: LD_INT 0
35757: PPUSH
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35762: LD_ADDR_VAR 0 5
35766: PUSH
35767: LD_INT 22
35769: PUSH
35770: LD_OWVAR 2
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 21
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PPUSH
35793: CALL_OW 69
35797: ST_TO_ADDR
// if not tmp then
35798: LD_VAR 0 5
35802: NOT
35803: IFFALSE 35807
// exit ;
35805: GO 35961
// for i in tmp do
35807: LD_ADDR_VAR 0 1
35811: PUSH
35812: LD_VAR 0 5
35816: PUSH
35817: FOR_IN
35818: IFFALSE 35959
// begin d := rand ( 0 , 5 ) ;
35820: LD_ADDR_VAR 0 4
35824: PUSH
35825: LD_INT 0
35827: PPUSH
35828: LD_INT 5
35830: PPUSH
35831: CALL_OW 12
35835: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
35836: LD_ADDR_VAR 0 2
35840: PUSH
35841: LD_VAR 0 1
35845: PPUSH
35846: CALL_OW 250
35850: PPUSH
35851: LD_VAR 0 4
35855: PPUSH
35856: LD_INT 3
35858: PPUSH
35859: LD_INT 12
35861: PPUSH
35862: CALL_OW 12
35866: PPUSH
35867: CALL_OW 272
35871: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
35872: LD_ADDR_VAR 0 3
35876: PUSH
35877: LD_VAR 0 1
35881: PPUSH
35882: CALL_OW 251
35886: PPUSH
35887: LD_VAR 0 4
35891: PPUSH
35892: LD_INT 3
35894: PPUSH
35895: LD_INT 12
35897: PPUSH
35898: CALL_OW 12
35902: PPUSH
35903: CALL_OW 273
35907: ST_TO_ADDR
// if ValidHex ( x , y ) then
35908: LD_VAR 0 2
35912: PPUSH
35913: LD_VAR 0 3
35917: PPUSH
35918: CALL_OW 488
35922: IFFALSE 35957
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
35924: LD_VAR 0 1
35928: PPUSH
35929: LD_VAR 0 2
35933: PPUSH
35934: LD_VAR 0 3
35938: PPUSH
35939: LD_INT 3
35941: PPUSH
35942: LD_INT 6
35944: PPUSH
35945: CALL_OW 12
35949: PPUSH
35950: LD_INT 1
35952: PPUSH
35953: CALL_OW 483
// end ;
35957: GO 35817
35959: POP
35960: POP
// end ;
35961: PPOPN 5
35963: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
35964: LD_EXP 67
35968: PUSH
35969: LD_EXP 102
35973: AND
35974: IFFALSE 36068
35976: GO 35978
35978: DISABLE
35979: LD_INT 0
35981: PPUSH
35982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
35983: LD_ADDR_VAR 0 2
35987: PUSH
35988: LD_INT 22
35990: PUSH
35991: LD_OWVAR 2
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 32
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 21
36012: PUSH
36013: LD_INT 2
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: PPUSH
36025: CALL_OW 69
36029: ST_TO_ADDR
// if not tmp then
36030: LD_VAR 0 2
36034: NOT
36035: IFFALSE 36039
// exit ;
36037: GO 36068
// for i in tmp do
36039: LD_ADDR_VAR 0 1
36043: PUSH
36044: LD_VAR 0 2
36048: PUSH
36049: FOR_IN
36050: IFFALSE 36066
// SetFuel ( i , 0 ) ;
36052: LD_VAR 0 1
36056: PPUSH
36057: LD_INT 0
36059: PPUSH
36060: CALL_OW 240
36064: GO 36049
36066: POP
36067: POP
// end ;
36068: PPOPN 2
36070: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
36071: LD_EXP 67
36075: PUSH
36076: LD_EXP 103
36080: AND
36081: IFFALSE 36147
36083: GO 36085
36085: DISABLE
36086: LD_INT 0
36088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
36089: LD_ADDR_VAR 0 1
36093: PUSH
36094: LD_INT 22
36096: PUSH
36097: LD_OWVAR 2
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 30
36108: PUSH
36109: LD_INT 29
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PPUSH
36120: CALL_OW 69
36124: ST_TO_ADDR
// if not tmp then
36125: LD_VAR 0 1
36129: NOT
36130: IFFALSE 36134
// exit ;
36132: GO 36147
// DestroyUnit ( tmp [ 1 ] ) ;
36134: LD_VAR 0 1
36138: PUSH
36139: LD_INT 1
36141: ARRAY
36142: PPUSH
36143: CALL_OW 65
// end ;
36147: PPOPN 1
36149: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
36150: LD_EXP 67
36154: PUSH
36155: LD_EXP 105
36159: AND
36160: IFFALSE 36289
36162: GO 36164
36164: DISABLE
36165: LD_INT 0
36167: PPUSH
// begin uc_side := 0 ;
36168: LD_ADDR_OWVAR 20
36172: PUSH
36173: LD_INT 0
36175: ST_TO_ADDR
// uc_nation := nation_arabian ;
36176: LD_ADDR_OWVAR 21
36180: PUSH
36181: LD_INT 2
36183: ST_TO_ADDR
// hc_gallery :=  ;
36184: LD_ADDR_OWVAR 33
36188: PUSH
36189: LD_STRING 
36191: ST_TO_ADDR
// hc_name :=  ;
36192: LD_ADDR_OWVAR 26
36196: PUSH
36197: LD_STRING 
36199: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
36200: LD_INT 1
36202: PPUSH
36203: LD_INT 11
36205: PPUSH
36206: LD_INT 10
36208: PPUSH
36209: CALL_OW 380
// un := CreateHuman ;
36213: LD_ADDR_VAR 0 1
36217: PUSH
36218: CALL_OW 44
36222: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36223: LD_VAR 0 1
36227: PPUSH
36228: LD_INT 1
36230: PPUSH
36231: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36235: LD_INT 35
36237: PPUSH
36238: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36242: LD_VAR 0 1
36246: PPUSH
36247: LD_INT 22
36249: PUSH
36250: LD_OWVAR 2
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PPUSH
36259: CALL_OW 69
36263: PPUSH
36264: LD_VAR 0 1
36268: PPUSH
36269: CALL_OW 74
36273: PPUSH
36274: CALL_OW 115
// until IsDead ( un ) ;
36278: LD_VAR 0 1
36282: PPUSH
36283: CALL_OW 301
36287: IFFALSE 36235
// end ;
36289: PPOPN 1
36291: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36292: LD_EXP 67
36296: PUSH
36297: LD_EXP 107
36301: AND
36302: IFFALSE 36314
36304: GO 36306
36306: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36307: LD_STRING earthquake(getX(game), 0, 32)
36309: PPUSH
36310: CALL_OW 559
36314: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36315: LD_EXP 67
36319: PUSH
36320: LD_EXP 108
36324: AND
36325: IFFALSE 36416
36327: GO 36329
36329: DISABLE
36330: LD_INT 0
36332: PPUSH
// begin enable ;
36333: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36334: LD_ADDR_VAR 0 1
36338: PUSH
36339: LD_INT 22
36341: PUSH
36342: LD_OWVAR 2
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 21
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 33
36363: PUSH
36364: LD_INT 3
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: PPUSH
36376: CALL_OW 69
36380: ST_TO_ADDR
// if not tmp then
36381: LD_VAR 0 1
36385: NOT
36386: IFFALSE 36390
// exit ;
36388: GO 36416
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
36390: LD_VAR 0 1
36394: PUSH
36395: LD_INT 1
36397: PPUSH
36398: LD_VAR 0 1
36402: PPUSH
36403: CALL_OW 12
36407: ARRAY
36408: PPUSH
36409: LD_INT 1
36411: PPUSH
36412: CALL_OW 234
// end ;
36416: PPOPN 1
36418: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
36419: LD_EXP 67
36423: PUSH
36424: LD_EXP 109
36428: AND
36429: IFFALSE 36570
36431: GO 36433
36433: DISABLE
36434: LD_INT 0
36436: PPUSH
36437: PPUSH
36438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36439: LD_ADDR_VAR 0 3
36443: PUSH
36444: LD_INT 22
36446: PUSH
36447: LD_OWVAR 2
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 25
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PPUSH
36470: CALL_OW 69
36474: ST_TO_ADDR
// if not tmp then
36475: LD_VAR 0 3
36479: NOT
36480: IFFALSE 36484
// exit ;
36482: GO 36570
// un := tmp [ rand ( 1 , tmp ) ] ;
36484: LD_ADDR_VAR 0 2
36488: PUSH
36489: LD_VAR 0 3
36493: PUSH
36494: LD_INT 1
36496: PPUSH
36497: LD_VAR 0 3
36501: PPUSH
36502: CALL_OW 12
36506: ARRAY
36507: ST_TO_ADDR
// if Crawls ( un ) then
36508: LD_VAR 0 2
36512: PPUSH
36513: CALL_OW 318
36517: IFFALSE 36528
// ComWalk ( un ) ;
36519: LD_VAR 0 2
36523: PPUSH
36524: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
36528: LD_VAR 0 2
36532: PPUSH
36533: LD_INT 9
36535: PPUSH
36536: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
36540: LD_INT 28
36542: PPUSH
36543: LD_OWVAR 2
36547: PPUSH
36548: LD_INT 2
36550: PPUSH
36551: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
36555: LD_INT 29
36557: PPUSH
36558: LD_OWVAR 2
36562: PPUSH
36563: LD_INT 2
36565: PPUSH
36566: CALL_OW 322
// end ;
36570: PPOPN 3
36572: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
36573: LD_EXP 67
36577: PUSH
36578: LD_EXP 110
36582: AND
36583: IFFALSE 36694
36585: GO 36587
36587: DISABLE
36588: LD_INT 0
36590: PPUSH
36591: PPUSH
36592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36593: LD_ADDR_VAR 0 3
36597: PUSH
36598: LD_INT 22
36600: PUSH
36601: LD_OWVAR 2
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 25
36612: PUSH
36613: LD_INT 1
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PPUSH
36624: CALL_OW 69
36628: ST_TO_ADDR
// if not tmp then
36629: LD_VAR 0 3
36633: NOT
36634: IFFALSE 36638
// exit ;
36636: GO 36694
// un := tmp [ rand ( 1 , tmp ) ] ;
36638: LD_ADDR_VAR 0 2
36642: PUSH
36643: LD_VAR 0 3
36647: PUSH
36648: LD_INT 1
36650: PPUSH
36651: LD_VAR 0 3
36655: PPUSH
36656: CALL_OW 12
36660: ARRAY
36661: ST_TO_ADDR
// if Crawls ( un ) then
36662: LD_VAR 0 2
36666: PPUSH
36667: CALL_OW 318
36671: IFFALSE 36682
// ComWalk ( un ) ;
36673: LD_VAR 0 2
36677: PPUSH
36678: CALL_OW 138
// SetClass ( un , class_mortar ) ;
36682: LD_VAR 0 2
36686: PPUSH
36687: LD_INT 8
36689: PPUSH
36690: CALL_OW 336
// end ;
36694: PPOPN 3
36696: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
36697: LD_EXP 67
36701: PUSH
36702: LD_EXP 111
36706: AND
36707: IFFALSE 36851
36709: GO 36711
36711: DISABLE
36712: LD_INT 0
36714: PPUSH
36715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
36716: LD_ADDR_VAR 0 2
36720: PUSH
36721: LD_INT 22
36723: PUSH
36724: LD_OWVAR 2
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 21
36735: PUSH
36736: LD_INT 2
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 2
36745: PUSH
36746: LD_INT 34
36748: PUSH
36749: LD_INT 12
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 34
36758: PUSH
36759: LD_INT 51
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 34
36768: PUSH
36769: LD_INT 32
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: LIST
36786: PPUSH
36787: CALL_OW 69
36791: ST_TO_ADDR
// if not tmp then
36792: LD_VAR 0 2
36796: NOT
36797: IFFALSE 36801
// exit ;
36799: GO 36851
// for i in tmp do
36801: LD_ADDR_VAR 0 1
36805: PUSH
36806: LD_VAR 0 2
36810: PUSH
36811: FOR_IN
36812: IFFALSE 36849
// if GetCargo ( i , mat_artifact ) = 0 then
36814: LD_VAR 0 1
36818: PPUSH
36819: LD_INT 4
36821: PPUSH
36822: CALL_OW 289
36826: PUSH
36827: LD_INT 0
36829: EQUAL
36830: IFFALSE 36847
// SetCargo ( i , mat_siberit , 100 ) ;
36832: LD_VAR 0 1
36836: PPUSH
36837: LD_INT 3
36839: PPUSH
36840: LD_INT 100
36842: PPUSH
36843: CALL_OW 290
36847: GO 36811
36849: POP
36850: POP
// end ;
36851: PPOPN 2
36853: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
36854: LD_EXP 67
36858: PUSH
36859: LD_EXP 112
36863: AND
36864: IFFALSE 37047
36866: GO 36868
36868: DISABLE
36869: LD_INT 0
36871: PPUSH
36872: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36873: LD_ADDR_VAR 0 2
36877: PUSH
36878: LD_INT 22
36880: PUSH
36881: LD_OWVAR 2
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PPUSH
36890: CALL_OW 69
36894: ST_TO_ADDR
// if not tmp then
36895: LD_VAR 0 2
36899: NOT
36900: IFFALSE 36904
// exit ;
36902: GO 37047
// for i := 1 to 2 do
36904: LD_ADDR_VAR 0 1
36908: PUSH
36909: DOUBLE
36910: LD_INT 1
36912: DEC
36913: ST_TO_ADDR
36914: LD_INT 2
36916: PUSH
36917: FOR_TO
36918: IFFALSE 37045
// begin uc_side := your_side ;
36920: LD_ADDR_OWVAR 20
36924: PUSH
36925: LD_OWVAR 2
36929: ST_TO_ADDR
// uc_nation := nation_american ;
36930: LD_ADDR_OWVAR 21
36934: PUSH
36935: LD_INT 1
36937: ST_TO_ADDR
// vc_chassis := us_morphling ;
36938: LD_ADDR_OWVAR 37
36942: PUSH
36943: LD_INT 5
36945: ST_TO_ADDR
// vc_engine := engine_siberite ;
36946: LD_ADDR_OWVAR 39
36950: PUSH
36951: LD_INT 3
36953: ST_TO_ADDR
// vc_control := control_computer ;
36954: LD_ADDR_OWVAR 38
36958: PUSH
36959: LD_INT 3
36961: ST_TO_ADDR
// vc_weapon := us_double_laser ;
36962: LD_ADDR_OWVAR 40
36966: PUSH
36967: LD_INT 10
36969: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
36970: LD_VAR 0 2
36974: PUSH
36975: LD_INT 1
36977: ARRAY
36978: PPUSH
36979: CALL_OW 310
36983: NOT
36984: IFFALSE 37031
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
36986: CALL_OW 45
36990: PPUSH
36991: LD_VAR 0 2
36995: PUSH
36996: LD_INT 1
36998: ARRAY
36999: PPUSH
37000: CALL_OW 250
37004: PPUSH
37005: LD_VAR 0 2
37009: PUSH
37010: LD_INT 1
37012: ARRAY
37013: PPUSH
37014: CALL_OW 251
37018: PPUSH
37019: LD_INT 12
37021: PPUSH
37022: LD_INT 1
37024: PPUSH
37025: CALL_OW 50
37029: GO 37043
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37031: CALL_OW 45
37035: PPUSH
37036: LD_INT 1
37038: PPUSH
37039: CALL_OW 51
// end ;
37043: GO 36917
37045: POP
37046: POP
// end ;
37047: PPOPN 2
37049: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
37050: LD_EXP 67
37054: PUSH
37055: LD_EXP 113
37059: AND
37060: IFFALSE 37282
37062: GO 37064
37064: DISABLE
37065: LD_INT 0
37067: PPUSH
37068: PPUSH
37069: PPUSH
37070: PPUSH
37071: PPUSH
37072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37073: LD_ADDR_VAR 0 6
37077: PUSH
37078: LD_INT 22
37080: PUSH
37081: LD_OWVAR 2
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 21
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 3
37102: PUSH
37103: LD_INT 23
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: PPUSH
37122: CALL_OW 69
37126: ST_TO_ADDR
// if not tmp then
37127: LD_VAR 0 6
37131: NOT
37132: IFFALSE 37136
// exit ;
37134: GO 37282
// s1 := rand ( 1 , 4 ) ;
37136: LD_ADDR_VAR 0 2
37140: PUSH
37141: LD_INT 1
37143: PPUSH
37144: LD_INT 4
37146: PPUSH
37147: CALL_OW 12
37151: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
37152: LD_ADDR_VAR 0 4
37156: PUSH
37157: LD_VAR 0 6
37161: PUSH
37162: LD_INT 1
37164: ARRAY
37165: PPUSH
37166: LD_VAR 0 2
37170: PPUSH
37171: CALL_OW 259
37175: ST_TO_ADDR
// if s1 = 1 then
37176: LD_VAR 0 2
37180: PUSH
37181: LD_INT 1
37183: EQUAL
37184: IFFALSE 37204
// s2 := rand ( 2 , 4 ) else
37186: LD_ADDR_VAR 0 3
37190: PUSH
37191: LD_INT 2
37193: PPUSH
37194: LD_INT 4
37196: PPUSH
37197: CALL_OW 12
37201: ST_TO_ADDR
37202: GO 37212
// s2 := 1 ;
37204: LD_ADDR_VAR 0 3
37208: PUSH
37209: LD_INT 1
37211: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37212: LD_ADDR_VAR 0 5
37216: PUSH
37217: LD_VAR 0 6
37221: PUSH
37222: LD_INT 1
37224: ARRAY
37225: PPUSH
37226: LD_VAR 0 3
37230: PPUSH
37231: CALL_OW 259
37235: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37236: LD_VAR 0 6
37240: PUSH
37241: LD_INT 1
37243: ARRAY
37244: PPUSH
37245: LD_VAR 0 2
37249: PPUSH
37250: LD_VAR 0 5
37254: PPUSH
37255: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37259: LD_VAR 0 6
37263: PUSH
37264: LD_INT 1
37266: ARRAY
37267: PPUSH
37268: LD_VAR 0 3
37272: PPUSH
37273: LD_VAR 0 4
37277: PPUSH
37278: CALL_OW 237
// end ;
37282: PPOPN 6
37284: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37285: LD_EXP 67
37289: PUSH
37290: LD_EXP 114
37294: AND
37295: IFFALSE 37374
37297: GO 37299
37299: DISABLE
37300: LD_INT 0
37302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37303: LD_ADDR_VAR 0 1
37307: PUSH
37308: LD_INT 22
37310: PUSH
37311: LD_OWVAR 2
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 30
37322: PUSH
37323: LD_INT 3
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PPUSH
37334: CALL_OW 69
37338: ST_TO_ADDR
// if not tmp then
37339: LD_VAR 0 1
37343: NOT
37344: IFFALSE 37348
// exit ;
37346: GO 37374
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37348: LD_VAR 0 1
37352: PUSH
37353: LD_INT 1
37355: PPUSH
37356: LD_VAR 0 1
37360: PPUSH
37361: CALL_OW 12
37365: ARRAY
37366: PPUSH
37367: LD_INT 1
37369: PPUSH
37370: CALL_OW 234
// end ;
37374: PPOPN 1
37376: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
37377: LD_EXP 67
37381: PUSH
37382: LD_EXP 115
37386: AND
37387: IFFALSE 37499
37389: GO 37391
37391: DISABLE
37392: LD_INT 0
37394: PPUSH
37395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
37396: LD_ADDR_VAR 0 2
37400: PUSH
37401: LD_INT 22
37403: PUSH
37404: LD_OWVAR 2
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: LD_INT 30
37418: PUSH
37419: LD_INT 27
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 30
37428: PUSH
37429: LD_INT 26
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 30
37438: PUSH
37439: LD_INT 28
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PPUSH
37456: CALL_OW 69
37460: ST_TO_ADDR
// if not tmp then
37461: LD_VAR 0 2
37465: NOT
37466: IFFALSE 37470
// exit ;
37468: GO 37499
// for i in tmp do
37470: LD_ADDR_VAR 0 1
37474: PUSH
37475: LD_VAR 0 2
37479: PUSH
37480: FOR_IN
37481: IFFALSE 37497
// SetLives ( i , 1 ) ;
37483: LD_VAR 0 1
37487: PPUSH
37488: LD_INT 1
37490: PPUSH
37491: CALL_OW 234
37495: GO 37480
37497: POP
37498: POP
// end ;
37499: PPOPN 2
37501: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
37502: LD_EXP 67
37506: PUSH
37507: LD_EXP 116
37511: AND
37512: IFFALSE 37786
37514: GO 37516
37516: DISABLE
37517: LD_INT 0
37519: PPUSH
37520: PPUSH
37521: PPUSH
// begin i := rand ( 1 , 7 ) ;
37522: LD_ADDR_VAR 0 1
37526: PUSH
37527: LD_INT 1
37529: PPUSH
37530: LD_INT 7
37532: PPUSH
37533: CALL_OW 12
37537: ST_TO_ADDR
// case i of 1 :
37538: LD_VAR 0 1
37542: PUSH
37543: LD_INT 1
37545: DOUBLE
37546: EQUAL
37547: IFTRUE 37551
37549: GO 37561
37551: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
37552: LD_STRING earthquake(getX(game), 0, 32)
37554: PPUSH
37555: CALL_OW 559
37559: GO 37786
37561: LD_INT 2
37563: DOUBLE
37564: EQUAL
37565: IFTRUE 37569
37567: GO 37583
37569: POP
// begin ToLua ( displayStucuk(); ) ;
37570: LD_STRING displayStucuk();
37572: PPUSH
37573: CALL_OW 559
// ResetFog ;
37577: CALL_OW 335
// end ; 3 :
37581: GO 37786
37583: LD_INT 3
37585: DOUBLE
37586: EQUAL
37587: IFTRUE 37591
37589: GO 37695
37591: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37592: LD_ADDR_VAR 0 2
37596: PUSH
37597: LD_INT 22
37599: PUSH
37600: LD_OWVAR 2
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 25
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PPUSH
37623: CALL_OW 69
37627: ST_TO_ADDR
// if not tmp then
37628: LD_VAR 0 2
37632: NOT
37633: IFFALSE 37637
// exit ;
37635: GO 37786
// un := tmp [ rand ( 1 , tmp ) ] ;
37637: LD_ADDR_VAR 0 3
37641: PUSH
37642: LD_VAR 0 2
37646: PUSH
37647: LD_INT 1
37649: PPUSH
37650: LD_VAR 0 2
37654: PPUSH
37655: CALL_OW 12
37659: ARRAY
37660: ST_TO_ADDR
// if Crawls ( un ) then
37661: LD_VAR 0 3
37665: PPUSH
37666: CALL_OW 318
37670: IFFALSE 37681
// ComWalk ( un ) ;
37672: LD_VAR 0 3
37676: PPUSH
37677: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37681: LD_VAR 0 3
37685: PPUSH
37686: LD_INT 8
37688: PPUSH
37689: CALL_OW 336
// end ; 4 :
37693: GO 37786
37695: LD_INT 4
37697: DOUBLE
37698: EQUAL
37699: IFTRUE 37703
37701: GO 37764
37703: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37704: LD_ADDR_VAR 0 2
37708: PUSH
37709: LD_INT 22
37711: PUSH
37712: LD_OWVAR 2
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 30
37723: PUSH
37724: LD_INT 29
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PPUSH
37735: CALL_OW 69
37739: ST_TO_ADDR
// if not tmp then
37740: LD_VAR 0 2
37744: NOT
37745: IFFALSE 37749
// exit ;
37747: GO 37786
// DestroyUnit ( tmp [ 1 ] ) ;
37749: LD_VAR 0 2
37753: PUSH
37754: LD_INT 1
37756: ARRAY
37757: PPUSH
37758: CALL_OW 65
// end ; 5 .. 7 :
37762: GO 37786
37764: LD_INT 5
37766: DOUBLE
37767: GREATEREQUAL
37768: IFFALSE 37776
37770: LD_INT 7
37772: DOUBLE
37773: LESSEQUAL
37774: IFTRUE 37778
37776: GO 37785
37778: POP
// StreamSibBomb ; end ;
37779: CALL 34036 0 0
37783: GO 37786
37785: POP
// end ;
37786: PPOPN 3
37788: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
37789: LD_EXP 67
37793: PUSH
37794: LD_EXP 117
37798: AND
37799: IFFALSE 37955
37801: GO 37803
37803: DISABLE
37804: LD_INT 0
37806: PPUSH
37807: PPUSH
37808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
37809: LD_ADDR_VAR 0 2
37813: PUSH
37814: LD_INT 81
37816: PUSH
37817: LD_OWVAR 2
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: LD_INT 21
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 21
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: LIST
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PPUSH
37858: CALL_OW 69
37862: ST_TO_ADDR
// if not tmp then
37863: LD_VAR 0 2
37867: NOT
37868: IFFALSE 37872
// exit ;
37870: GO 37955
// p := 0 ;
37872: LD_ADDR_VAR 0 3
37876: PUSH
37877: LD_INT 0
37879: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37880: LD_INT 35
37882: PPUSH
37883: CALL_OW 67
// p := p + 1 ;
37887: LD_ADDR_VAR 0 3
37891: PUSH
37892: LD_VAR 0 3
37896: PUSH
37897: LD_INT 1
37899: PLUS
37900: ST_TO_ADDR
// for i in tmp do
37901: LD_ADDR_VAR 0 1
37905: PUSH
37906: LD_VAR 0 2
37910: PUSH
37911: FOR_IN
37912: IFFALSE 37943
// if GetLives ( i ) < 1000 then
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 256
37923: PUSH
37924: LD_INT 1000
37926: LESS
37927: IFFALSE 37941
// SetLives ( i , 1000 ) ;
37929: LD_VAR 0 1
37933: PPUSH
37934: LD_INT 1000
37936: PPUSH
37937: CALL_OW 234
37941: GO 37911
37943: POP
37944: POP
// until p > 20 ;
37945: LD_VAR 0 3
37949: PUSH
37950: LD_INT 20
37952: GREATER
37953: IFFALSE 37880
// end ;
37955: PPOPN 3
37957: END
// every 0 0$1 trigger StreamModeActive and sTime do
37958: LD_EXP 67
37962: PUSH
37963: LD_EXP 118
37967: AND
37968: IFFALSE 38003
37970: GO 37972
37972: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
37973: LD_INT 28
37975: PPUSH
37976: LD_OWVAR 2
37980: PPUSH
37981: LD_INT 2
37983: PPUSH
37984: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
37988: LD_INT 30
37990: PPUSH
37991: LD_OWVAR 2
37995: PPUSH
37996: LD_INT 2
37998: PPUSH
37999: CALL_OW 322
// end ;
38003: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
38004: LD_EXP 67
38008: PUSH
38009: LD_EXP 119
38013: AND
38014: IFFALSE 38135
38016: GO 38018
38018: DISABLE
38019: LD_INT 0
38021: PPUSH
38022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38023: LD_ADDR_VAR 0 2
38027: PUSH
38028: LD_INT 22
38030: PUSH
38031: LD_OWVAR 2
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 21
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 3
38052: PUSH
38053: LD_INT 23
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: LIST
38071: PPUSH
38072: CALL_OW 69
38076: ST_TO_ADDR
// if not tmp then
38077: LD_VAR 0 2
38081: NOT
38082: IFFALSE 38086
// exit ;
38084: GO 38135
// for i in tmp do
38086: LD_ADDR_VAR 0 1
38090: PUSH
38091: LD_VAR 0 2
38095: PUSH
38096: FOR_IN
38097: IFFALSE 38133
// begin if Crawls ( i ) then
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL_OW 318
38108: IFFALSE 38119
// ComWalk ( i ) ;
38110: LD_VAR 0 1
38114: PPUSH
38115: CALL_OW 138
// SetClass ( i , 2 ) ;
38119: LD_VAR 0 1
38123: PPUSH
38124: LD_INT 2
38126: PPUSH
38127: CALL_OW 336
// end ;
38131: GO 38096
38133: POP
38134: POP
// end ;
38135: PPOPN 2
38137: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
38138: LD_EXP 67
38142: PUSH
38143: LD_EXP 120
38147: AND
38148: IFFALSE 38429
38150: GO 38152
38152: DISABLE
38153: LD_INT 0
38155: PPUSH
38156: PPUSH
38157: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
38158: LD_OWVAR 2
38162: PPUSH
38163: LD_INT 9
38165: PPUSH
38166: LD_INT 1
38168: PPUSH
38169: LD_INT 1
38171: PPUSH
38172: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
38176: LD_INT 9
38178: PPUSH
38179: LD_OWVAR 2
38183: PPUSH
38184: CALL_OW 343
// uc_side := 9 ;
38188: LD_ADDR_OWVAR 20
38192: PUSH
38193: LD_INT 9
38195: ST_TO_ADDR
// uc_nation := 2 ;
38196: LD_ADDR_OWVAR 21
38200: PUSH
38201: LD_INT 2
38203: ST_TO_ADDR
// hc_name := Dark Warrior ;
38204: LD_ADDR_OWVAR 26
38208: PUSH
38209: LD_STRING Dark Warrior
38211: ST_TO_ADDR
// hc_gallery :=  ;
38212: LD_ADDR_OWVAR 33
38216: PUSH
38217: LD_STRING 
38219: ST_TO_ADDR
// hc_noskilllimit := true ;
38220: LD_ADDR_OWVAR 76
38224: PUSH
38225: LD_INT 1
38227: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38228: LD_ADDR_OWVAR 31
38232: PUSH
38233: LD_INT 30
38235: PUSH
38236: LD_INT 30
38238: PUSH
38239: LD_INT 30
38241: PUSH
38242: LD_INT 30
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: ST_TO_ADDR
// un := CreateHuman ;
38251: LD_ADDR_VAR 0 3
38255: PUSH
38256: CALL_OW 44
38260: ST_TO_ADDR
// hc_noskilllimit := false ;
38261: LD_ADDR_OWVAR 76
38265: PUSH
38266: LD_INT 0
38268: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38269: LD_VAR 0 3
38273: PPUSH
38274: LD_INT 1
38276: PPUSH
38277: CALL_OW 51
// p := 0 ;
38281: LD_ADDR_VAR 0 2
38285: PUSH
38286: LD_INT 0
38288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38289: LD_INT 35
38291: PPUSH
38292: CALL_OW 67
// p := p + 1 ;
38296: LD_ADDR_VAR 0 2
38300: PUSH
38301: LD_VAR 0 2
38305: PUSH
38306: LD_INT 1
38308: PLUS
38309: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38310: LD_VAR 0 3
38314: PPUSH
38315: CALL_OW 256
38319: PUSH
38320: LD_INT 1000
38322: LESS
38323: IFFALSE 38337
// SetLives ( un , 1000 ) ;
38325: LD_VAR 0 3
38329: PPUSH
38330: LD_INT 1000
38332: PPUSH
38333: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38337: LD_VAR 0 3
38341: PPUSH
38342: LD_INT 81
38344: PUSH
38345: LD_OWVAR 2
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 91
38356: PUSH
38357: LD_VAR 0 3
38361: PUSH
38362: LD_INT 30
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PPUSH
38374: CALL_OW 69
38378: PPUSH
38379: LD_VAR 0 3
38383: PPUSH
38384: CALL_OW 74
38388: PPUSH
38389: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
38393: LD_VAR 0 2
38397: PUSH
38398: LD_INT 60
38400: GREATER
38401: PUSH
38402: LD_VAR 0 3
38406: PPUSH
38407: CALL_OW 301
38411: OR
38412: IFFALSE 38289
// if un then
38414: LD_VAR 0 3
38418: IFFALSE 38429
// RemoveUnit ( un ) ;
38420: LD_VAR 0 3
38424: PPUSH
38425: CALL_OW 64
// end ;
38429: PPOPN 3
38431: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
38432: LD_INT 0
38434: PPUSH
// case cmd of 301 :
38435: LD_VAR 0 1
38439: PUSH
38440: LD_INT 301
38442: DOUBLE
38443: EQUAL
38444: IFTRUE 38448
38446: GO 38480
38448: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
38449: LD_VAR 0 6
38453: PPUSH
38454: LD_VAR 0 7
38458: PPUSH
38459: LD_VAR 0 8
38463: PPUSH
38464: LD_VAR 0 4
38468: PPUSH
38469: LD_VAR 0 5
38473: PPUSH
38474: CALL 39681 0 5
38478: GO 38601
38480: LD_INT 302
38482: DOUBLE
38483: EQUAL
38484: IFTRUE 38488
38486: GO 38525
38488: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
38489: LD_VAR 0 6
38493: PPUSH
38494: LD_VAR 0 7
38498: PPUSH
38499: LD_VAR 0 8
38503: PPUSH
38504: LD_VAR 0 9
38508: PPUSH
38509: LD_VAR 0 4
38513: PPUSH
38514: LD_VAR 0 5
38518: PPUSH
38519: CALL 39772 0 6
38523: GO 38601
38525: LD_INT 303
38527: DOUBLE
38528: EQUAL
38529: IFTRUE 38533
38531: GO 38570
38533: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
38534: LD_VAR 0 6
38538: PPUSH
38539: LD_VAR 0 7
38543: PPUSH
38544: LD_VAR 0 8
38548: PPUSH
38549: LD_VAR 0 9
38553: PPUSH
38554: LD_VAR 0 4
38558: PPUSH
38559: LD_VAR 0 5
38563: PPUSH
38564: CALL 38606 0 6
38568: GO 38601
38570: LD_INT 304
38572: DOUBLE
38573: EQUAL
38574: IFTRUE 38578
38576: GO 38600
38578: POP
// hHackTeleport ( unit , x , y ) ; end ;
38579: LD_VAR 0 2
38583: PPUSH
38584: LD_VAR 0 4
38588: PPUSH
38589: LD_VAR 0 5
38593: PPUSH
38594: CALL 40365 0 3
38598: GO 38601
38600: POP
// end ;
38601: LD_VAR 0 12
38605: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
38606: LD_INT 0
38608: PPUSH
38609: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
38610: LD_VAR 0 1
38614: PUSH
38615: LD_INT 1
38617: LESS
38618: PUSH
38619: LD_VAR 0 1
38623: PUSH
38624: LD_INT 3
38626: GREATER
38627: OR
38628: PUSH
38629: LD_VAR 0 5
38633: PPUSH
38634: LD_VAR 0 6
38638: PPUSH
38639: CALL_OW 428
38643: OR
38644: IFFALSE 38648
// exit ;
38646: GO 39368
// uc_side := your_side ;
38648: LD_ADDR_OWVAR 20
38652: PUSH
38653: LD_OWVAR 2
38657: ST_TO_ADDR
// uc_nation := nation ;
38658: LD_ADDR_OWVAR 21
38662: PUSH
38663: LD_VAR 0 1
38667: ST_TO_ADDR
// bc_level = 1 ;
38668: LD_ADDR_OWVAR 43
38672: PUSH
38673: LD_INT 1
38675: ST_TO_ADDR
// case btype of 1 :
38676: LD_VAR 0 2
38680: PUSH
38681: LD_INT 1
38683: DOUBLE
38684: EQUAL
38685: IFTRUE 38689
38687: GO 38700
38689: POP
// bc_type := b_depot ; 2 :
38690: LD_ADDR_OWVAR 42
38694: PUSH
38695: LD_INT 0
38697: ST_TO_ADDR
38698: GO 39312
38700: LD_INT 2
38702: DOUBLE
38703: EQUAL
38704: IFTRUE 38708
38706: GO 38719
38708: POP
// bc_type := b_warehouse ; 3 :
38709: LD_ADDR_OWVAR 42
38713: PUSH
38714: LD_INT 1
38716: ST_TO_ADDR
38717: GO 39312
38719: LD_INT 3
38721: DOUBLE
38722: EQUAL
38723: IFTRUE 38727
38725: GO 38738
38727: POP
// bc_type := b_lab ; 4 .. 9 :
38728: LD_ADDR_OWVAR 42
38732: PUSH
38733: LD_INT 6
38735: ST_TO_ADDR
38736: GO 39312
38738: LD_INT 4
38740: DOUBLE
38741: GREATEREQUAL
38742: IFFALSE 38750
38744: LD_INT 9
38746: DOUBLE
38747: LESSEQUAL
38748: IFTRUE 38752
38750: GO 38804
38752: POP
// begin bc_type := b_lab_half ;
38753: LD_ADDR_OWVAR 42
38757: PUSH
38758: LD_INT 7
38760: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
38761: LD_ADDR_OWVAR 44
38765: PUSH
38766: LD_INT 10
38768: PUSH
38769: LD_INT 11
38771: PUSH
38772: LD_INT 12
38774: PUSH
38775: LD_INT 15
38777: PUSH
38778: LD_INT 14
38780: PUSH
38781: LD_INT 13
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: PUSH
38792: LD_VAR 0 2
38796: PUSH
38797: LD_INT 3
38799: MINUS
38800: ARRAY
38801: ST_TO_ADDR
// end ; 10 .. 13 :
38802: GO 39312
38804: LD_INT 10
38806: DOUBLE
38807: GREATEREQUAL
38808: IFFALSE 38816
38810: LD_INT 13
38812: DOUBLE
38813: LESSEQUAL
38814: IFTRUE 38818
38816: GO 38895
38818: POP
// begin bc_type := b_lab_full ;
38819: LD_ADDR_OWVAR 42
38823: PUSH
38824: LD_INT 8
38826: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
38827: LD_ADDR_OWVAR 44
38831: PUSH
38832: LD_INT 10
38834: PUSH
38835: LD_INT 12
38837: PUSH
38838: LD_INT 14
38840: PUSH
38841: LD_INT 13
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: PUSH
38850: LD_VAR 0 2
38854: PUSH
38855: LD_INT 9
38857: MINUS
38858: ARRAY
38859: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
38860: LD_ADDR_OWVAR 45
38864: PUSH
38865: LD_INT 11
38867: PUSH
38868: LD_INT 15
38870: PUSH
38871: LD_INT 12
38873: PUSH
38874: LD_INT 15
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: PUSH
38883: LD_VAR 0 2
38887: PUSH
38888: LD_INT 9
38890: MINUS
38891: ARRAY
38892: ST_TO_ADDR
// end ; 14 :
38893: GO 39312
38895: LD_INT 14
38897: DOUBLE
38898: EQUAL
38899: IFTRUE 38903
38901: GO 38914
38903: POP
// bc_type := b_workshop ; 15 :
38904: LD_ADDR_OWVAR 42
38908: PUSH
38909: LD_INT 2
38911: ST_TO_ADDR
38912: GO 39312
38914: LD_INT 15
38916: DOUBLE
38917: EQUAL
38918: IFTRUE 38922
38920: GO 38933
38922: POP
// bc_type := b_factory ; 16 :
38923: LD_ADDR_OWVAR 42
38927: PUSH
38928: LD_INT 3
38930: ST_TO_ADDR
38931: GO 39312
38933: LD_INT 16
38935: DOUBLE
38936: EQUAL
38937: IFTRUE 38941
38939: GO 38952
38941: POP
// bc_type := b_ext_gun ; 17 :
38942: LD_ADDR_OWVAR 42
38946: PUSH
38947: LD_INT 17
38949: ST_TO_ADDR
38950: GO 39312
38952: LD_INT 17
38954: DOUBLE
38955: EQUAL
38956: IFTRUE 38960
38958: GO 38988
38960: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
38961: LD_ADDR_OWVAR 42
38965: PUSH
38966: LD_INT 19
38968: PUSH
38969: LD_INT 23
38971: PUSH
38972: LD_INT 19
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: PUSH
38980: LD_VAR 0 1
38984: ARRAY
38985: ST_TO_ADDR
38986: GO 39312
38988: LD_INT 18
38990: DOUBLE
38991: EQUAL
38992: IFTRUE 38996
38994: GO 39007
38996: POP
// bc_type := b_ext_radar ; 19 :
38997: LD_ADDR_OWVAR 42
39001: PUSH
39002: LD_INT 20
39004: ST_TO_ADDR
39005: GO 39312
39007: LD_INT 19
39009: DOUBLE
39010: EQUAL
39011: IFTRUE 39015
39013: GO 39026
39015: POP
// bc_type := b_ext_radio ; 20 :
39016: LD_ADDR_OWVAR 42
39020: PUSH
39021: LD_INT 22
39023: ST_TO_ADDR
39024: GO 39312
39026: LD_INT 20
39028: DOUBLE
39029: EQUAL
39030: IFTRUE 39034
39032: GO 39045
39034: POP
// bc_type := b_ext_siberium ; 21 :
39035: LD_ADDR_OWVAR 42
39039: PUSH
39040: LD_INT 21
39042: ST_TO_ADDR
39043: GO 39312
39045: LD_INT 21
39047: DOUBLE
39048: EQUAL
39049: IFTRUE 39053
39051: GO 39064
39053: POP
// bc_type := b_ext_computer ; 22 :
39054: LD_ADDR_OWVAR 42
39058: PUSH
39059: LD_INT 24
39061: ST_TO_ADDR
39062: GO 39312
39064: LD_INT 22
39066: DOUBLE
39067: EQUAL
39068: IFTRUE 39072
39070: GO 39083
39072: POP
// bc_type := b_ext_track ; 23 :
39073: LD_ADDR_OWVAR 42
39077: PUSH
39078: LD_INT 16
39080: ST_TO_ADDR
39081: GO 39312
39083: LD_INT 23
39085: DOUBLE
39086: EQUAL
39087: IFTRUE 39091
39089: GO 39102
39091: POP
// bc_type := b_ext_laser ; 24 :
39092: LD_ADDR_OWVAR 42
39096: PUSH
39097: LD_INT 25
39099: ST_TO_ADDR
39100: GO 39312
39102: LD_INT 24
39104: DOUBLE
39105: EQUAL
39106: IFTRUE 39110
39108: GO 39121
39110: POP
// bc_type := b_control_tower ; 25 :
39111: LD_ADDR_OWVAR 42
39115: PUSH
39116: LD_INT 36
39118: ST_TO_ADDR
39119: GO 39312
39121: LD_INT 25
39123: DOUBLE
39124: EQUAL
39125: IFTRUE 39129
39127: GO 39140
39129: POP
// bc_type := b_breastwork ; 26 :
39130: LD_ADDR_OWVAR 42
39134: PUSH
39135: LD_INT 31
39137: ST_TO_ADDR
39138: GO 39312
39140: LD_INT 26
39142: DOUBLE
39143: EQUAL
39144: IFTRUE 39148
39146: GO 39159
39148: POP
// bc_type := b_bunker ; 27 :
39149: LD_ADDR_OWVAR 42
39153: PUSH
39154: LD_INT 32
39156: ST_TO_ADDR
39157: GO 39312
39159: LD_INT 27
39161: DOUBLE
39162: EQUAL
39163: IFTRUE 39167
39165: GO 39178
39167: POP
// bc_type := b_turret ; 28 :
39168: LD_ADDR_OWVAR 42
39172: PUSH
39173: LD_INT 33
39175: ST_TO_ADDR
39176: GO 39312
39178: LD_INT 28
39180: DOUBLE
39181: EQUAL
39182: IFTRUE 39186
39184: GO 39197
39186: POP
// bc_type := b_armoury ; 29 :
39187: LD_ADDR_OWVAR 42
39191: PUSH
39192: LD_INT 4
39194: ST_TO_ADDR
39195: GO 39312
39197: LD_INT 29
39199: DOUBLE
39200: EQUAL
39201: IFTRUE 39205
39203: GO 39216
39205: POP
// bc_type := b_barracks ; 30 :
39206: LD_ADDR_OWVAR 42
39210: PUSH
39211: LD_INT 5
39213: ST_TO_ADDR
39214: GO 39312
39216: LD_INT 30
39218: DOUBLE
39219: EQUAL
39220: IFTRUE 39224
39222: GO 39235
39224: POP
// bc_type := b_solar_power ; 31 :
39225: LD_ADDR_OWVAR 42
39229: PUSH
39230: LD_INT 27
39232: ST_TO_ADDR
39233: GO 39312
39235: LD_INT 31
39237: DOUBLE
39238: EQUAL
39239: IFTRUE 39243
39241: GO 39254
39243: POP
// bc_type := b_oil_power ; 32 :
39244: LD_ADDR_OWVAR 42
39248: PUSH
39249: LD_INT 26
39251: ST_TO_ADDR
39252: GO 39312
39254: LD_INT 32
39256: DOUBLE
39257: EQUAL
39258: IFTRUE 39262
39260: GO 39273
39262: POP
// bc_type := b_siberite_power ; 33 :
39263: LD_ADDR_OWVAR 42
39267: PUSH
39268: LD_INT 28
39270: ST_TO_ADDR
39271: GO 39312
39273: LD_INT 33
39275: DOUBLE
39276: EQUAL
39277: IFTRUE 39281
39279: GO 39292
39281: POP
// bc_type := b_oil_mine ; 34 :
39282: LD_ADDR_OWVAR 42
39286: PUSH
39287: LD_INT 29
39289: ST_TO_ADDR
39290: GO 39312
39292: LD_INT 34
39294: DOUBLE
39295: EQUAL
39296: IFTRUE 39300
39298: GO 39311
39300: POP
// bc_type := b_siberite_mine ; end ;
39301: LD_ADDR_OWVAR 42
39305: PUSH
39306: LD_INT 30
39308: ST_TO_ADDR
39309: GO 39312
39311: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39312: LD_ADDR_VAR 0 8
39316: PUSH
39317: LD_VAR 0 5
39321: PPUSH
39322: LD_VAR 0 6
39326: PPUSH
39327: LD_VAR 0 3
39331: PPUSH
39332: CALL_OW 47
39336: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39337: LD_OWVAR 42
39341: PUSH
39342: LD_INT 32
39344: PUSH
39345: LD_INT 33
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: IN
39352: IFFALSE 39368
// PlaceWeaponTurret ( b , weapon ) ;
39354: LD_VAR 0 8
39358: PPUSH
39359: LD_VAR 0 4
39363: PPUSH
39364: CALL_OW 431
// end ;
39368: LD_VAR 0 7
39372: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
39373: LD_INT 0
39375: PPUSH
39376: PPUSH
39377: PPUSH
39378: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39379: LD_ADDR_VAR 0 4
39383: PUSH
39384: LD_INT 22
39386: PUSH
39387: LD_OWVAR 2
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 30
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 30
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PPUSH
39428: CALL_OW 69
39432: ST_TO_ADDR
// if not tmp then
39433: LD_VAR 0 4
39437: NOT
39438: IFFALSE 39442
// exit ;
39440: GO 39501
// for i in tmp do
39442: LD_ADDR_VAR 0 2
39446: PUSH
39447: LD_VAR 0 4
39451: PUSH
39452: FOR_IN
39453: IFFALSE 39499
// for j = 1 to 3 do
39455: LD_ADDR_VAR 0 3
39459: PUSH
39460: DOUBLE
39461: LD_INT 1
39463: DEC
39464: ST_TO_ADDR
39465: LD_INT 3
39467: PUSH
39468: FOR_TO
39469: IFFALSE 39495
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
39471: LD_VAR 0 2
39475: PPUSH
39476: CALL_OW 274
39480: PPUSH
39481: LD_VAR 0 3
39485: PPUSH
39486: LD_INT 99999
39488: PPUSH
39489: CALL_OW 277
39493: GO 39468
39495: POP
39496: POP
39497: GO 39452
39499: POP
39500: POP
// end ;
39501: LD_VAR 0 1
39505: RET
// export function hHackSetLevel10 ; var i , j ; begin
39506: LD_INT 0
39508: PPUSH
39509: PPUSH
39510: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39511: LD_ADDR_VAR 0 2
39515: PUSH
39516: LD_INT 21
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PPUSH
39526: CALL_OW 69
39530: PUSH
39531: FOR_IN
39532: IFFALSE 39584
// if IsSelected ( i ) then
39534: LD_VAR 0 2
39538: PPUSH
39539: CALL_OW 306
39543: IFFALSE 39582
// begin for j := 1 to 4 do
39545: LD_ADDR_VAR 0 3
39549: PUSH
39550: DOUBLE
39551: LD_INT 1
39553: DEC
39554: ST_TO_ADDR
39555: LD_INT 4
39557: PUSH
39558: FOR_TO
39559: IFFALSE 39580
// SetSkill ( i , j , 10 ) ;
39561: LD_VAR 0 2
39565: PPUSH
39566: LD_VAR 0 3
39570: PPUSH
39571: LD_INT 10
39573: PPUSH
39574: CALL_OW 237
39578: GO 39558
39580: POP
39581: POP
// end ;
39582: GO 39531
39584: POP
39585: POP
// end ;
39586: LD_VAR 0 1
39590: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
39591: LD_INT 0
39593: PPUSH
39594: PPUSH
39595: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
39596: LD_ADDR_VAR 0 2
39600: PUSH
39601: LD_INT 22
39603: PUSH
39604: LD_OWVAR 2
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 21
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PPUSH
39627: CALL_OW 69
39631: PUSH
39632: FOR_IN
39633: IFFALSE 39674
// begin for j := 1 to 4 do
39635: LD_ADDR_VAR 0 3
39639: PUSH
39640: DOUBLE
39641: LD_INT 1
39643: DEC
39644: ST_TO_ADDR
39645: LD_INT 4
39647: PUSH
39648: FOR_TO
39649: IFFALSE 39670
// SetSkill ( i , j , 10 ) ;
39651: LD_VAR 0 2
39655: PPUSH
39656: LD_VAR 0 3
39660: PPUSH
39661: LD_INT 10
39663: PPUSH
39664: CALL_OW 237
39668: GO 39648
39670: POP
39671: POP
// end ;
39672: GO 39632
39674: POP
39675: POP
// end ;
39676: LD_VAR 0 1
39680: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
39681: LD_INT 0
39683: PPUSH
// uc_side := your_side ;
39684: LD_ADDR_OWVAR 20
39688: PUSH
39689: LD_OWVAR 2
39693: ST_TO_ADDR
// uc_nation := nation ;
39694: LD_ADDR_OWVAR 21
39698: PUSH
39699: LD_VAR 0 1
39703: ST_TO_ADDR
// InitHc ;
39704: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
39708: LD_INT 0
39710: PPUSH
39711: LD_VAR 0 2
39715: PPUSH
39716: LD_VAR 0 3
39720: PPUSH
39721: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
39725: LD_VAR 0 4
39729: PPUSH
39730: LD_VAR 0 5
39734: PPUSH
39735: CALL_OW 428
39739: PUSH
39740: LD_INT 0
39742: EQUAL
39743: IFFALSE 39767
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
39745: CALL_OW 44
39749: PPUSH
39750: LD_VAR 0 4
39754: PPUSH
39755: LD_VAR 0 5
39759: PPUSH
39760: LD_INT 1
39762: PPUSH
39763: CALL_OW 48
// end ;
39767: LD_VAR 0 6
39771: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
39772: LD_INT 0
39774: PPUSH
39775: PPUSH
// uc_side := your_side ;
39776: LD_ADDR_OWVAR 20
39780: PUSH
39781: LD_OWVAR 2
39785: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
39786: LD_VAR 0 1
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: LD_INT 3
39799: PUSH
39800: LD_INT 4
39802: PUSH
39803: LD_INT 5
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: IN
39813: IFFALSE 39825
// uc_nation := nation_american else
39815: LD_ADDR_OWVAR 21
39819: PUSH
39820: LD_INT 1
39822: ST_TO_ADDR
39823: GO 39868
// if chassis in [ 11 , 12 , 13 , 14 ] then
39825: LD_VAR 0 1
39829: PUSH
39830: LD_INT 11
39832: PUSH
39833: LD_INT 12
39835: PUSH
39836: LD_INT 13
39838: PUSH
39839: LD_INT 14
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: IN
39848: IFFALSE 39860
// uc_nation := nation_arabian else
39850: LD_ADDR_OWVAR 21
39854: PUSH
39855: LD_INT 2
39857: ST_TO_ADDR
39858: GO 39868
// uc_nation := nation_russian ;
39860: LD_ADDR_OWVAR 21
39864: PUSH
39865: LD_INT 3
39867: ST_TO_ADDR
// vc_chassis := chassis ;
39868: LD_ADDR_OWVAR 37
39872: PUSH
39873: LD_VAR 0 1
39877: ST_TO_ADDR
// vc_engine := engine ;
39878: LD_ADDR_OWVAR 39
39882: PUSH
39883: LD_VAR 0 2
39887: ST_TO_ADDR
// vc_control := control ;
39888: LD_ADDR_OWVAR 38
39892: PUSH
39893: LD_VAR 0 3
39897: ST_TO_ADDR
// vc_weapon := weapon ;
39898: LD_ADDR_OWVAR 40
39902: PUSH
39903: LD_VAR 0 4
39907: ST_TO_ADDR
// un := CreateVehicle ;
39908: LD_ADDR_VAR 0 8
39912: PUSH
39913: CALL_OW 45
39917: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
39918: LD_VAR 0 8
39922: PPUSH
39923: LD_INT 0
39925: PPUSH
39926: LD_INT 5
39928: PPUSH
39929: CALL_OW 12
39933: PPUSH
39934: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
39938: LD_VAR 0 8
39942: PPUSH
39943: LD_VAR 0 5
39947: PPUSH
39948: LD_VAR 0 6
39952: PPUSH
39953: LD_INT 1
39955: PPUSH
39956: CALL_OW 48
// end ;
39960: LD_VAR 0 7
39964: RET
// export hInvincible ; every 1 do
39965: GO 39967
39967: DISABLE
// hInvincible := [ ] ;
39968: LD_ADDR_EXP 121
39972: PUSH
39973: EMPTY
39974: ST_TO_ADDR
39975: END
// every 10 do var i ;
39976: GO 39978
39978: DISABLE
39979: LD_INT 0
39981: PPUSH
// begin enable ;
39982: ENABLE
// if not hInvincible then
39983: LD_EXP 121
39987: NOT
39988: IFFALSE 39992
// exit ;
39990: GO 40036
// for i in hInvincible do
39992: LD_ADDR_VAR 0 1
39996: PUSH
39997: LD_EXP 121
40001: PUSH
40002: FOR_IN
40003: IFFALSE 40034
// if GetLives ( i ) < 1000 then
40005: LD_VAR 0 1
40009: PPUSH
40010: CALL_OW 256
40014: PUSH
40015: LD_INT 1000
40017: LESS
40018: IFFALSE 40032
// SetLives ( i , 1000 ) ;
40020: LD_VAR 0 1
40024: PPUSH
40025: LD_INT 1000
40027: PPUSH
40028: CALL_OW 234
40032: GO 40002
40034: POP
40035: POP
// end ;
40036: PPOPN 1
40038: END
// export function hHackInvincible ; var i ; begin
40039: LD_INT 0
40041: PPUSH
40042: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
40043: LD_ADDR_VAR 0 2
40047: PUSH
40048: LD_INT 2
40050: PUSH
40051: LD_INT 21
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 21
40063: PUSH
40064: LD_INT 2
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: LIST
40075: PPUSH
40076: CALL_OW 69
40080: PUSH
40081: FOR_IN
40082: IFFALSE 40143
// if IsSelected ( i ) then
40084: LD_VAR 0 2
40088: PPUSH
40089: CALL_OW 306
40093: IFFALSE 40141
// begin if i in hInvincible then
40095: LD_VAR 0 2
40099: PUSH
40100: LD_EXP 121
40104: IN
40105: IFFALSE 40125
// hInvincible := hInvincible diff i else
40107: LD_ADDR_EXP 121
40111: PUSH
40112: LD_EXP 121
40116: PUSH
40117: LD_VAR 0 2
40121: DIFF
40122: ST_TO_ADDR
40123: GO 40141
// hInvincible := hInvincible union i ;
40125: LD_ADDR_EXP 121
40129: PUSH
40130: LD_EXP 121
40134: PUSH
40135: LD_VAR 0 2
40139: UNION
40140: ST_TO_ADDR
// end ;
40141: GO 40081
40143: POP
40144: POP
// end ;
40145: LD_VAR 0 1
40149: RET
// export function hHackInvisible ; var i , j ; begin
40150: LD_INT 0
40152: PPUSH
40153: PPUSH
40154: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40155: LD_ADDR_VAR 0 2
40159: PUSH
40160: LD_INT 21
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PPUSH
40170: CALL_OW 69
40174: PUSH
40175: FOR_IN
40176: IFFALSE 40200
// if IsSelected ( i ) then
40178: LD_VAR 0 2
40182: PPUSH
40183: CALL_OW 306
40187: IFFALSE 40198
// ComForceInvisible ( i ) ;
40189: LD_VAR 0 2
40193: PPUSH
40194: CALL_OW 496
40198: GO 40175
40200: POP
40201: POP
// end ;
40202: LD_VAR 0 1
40206: RET
// export function hHackChangeYourSide ; begin
40207: LD_INT 0
40209: PPUSH
// if your_side = 8 then
40210: LD_OWVAR 2
40214: PUSH
40215: LD_INT 8
40217: EQUAL
40218: IFFALSE 40230
// your_side := 0 else
40220: LD_ADDR_OWVAR 2
40224: PUSH
40225: LD_INT 0
40227: ST_TO_ADDR
40228: GO 40244
// your_side := your_side + 1 ;
40230: LD_ADDR_OWVAR 2
40234: PUSH
40235: LD_OWVAR 2
40239: PUSH
40240: LD_INT 1
40242: PLUS
40243: ST_TO_ADDR
// end ;
40244: LD_VAR 0 1
40248: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40249: LD_INT 0
40251: PPUSH
40252: PPUSH
40253: PPUSH
// for i in all_units do
40254: LD_ADDR_VAR 0 2
40258: PUSH
40259: LD_OWVAR 3
40263: PUSH
40264: FOR_IN
40265: IFFALSE 40343
// if IsSelected ( i ) then
40267: LD_VAR 0 2
40271: PPUSH
40272: CALL_OW 306
40276: IFFALSE 40341
// begin j := GetSide ( i ) ;
40278: LD_ADDR_VAR 0 3
40282: PUSH
40283: LD_VAR 0 2
40287: PPUSH
40288: CALL_OW 255
40292: ST_TO_ADDR
// if j = 8 then
40293: LD_VAR 0 3
40297: PUSH
40298: LD_INT 8
40300: EQUAL
40301: IFFALSE 40313
// j := 0 else
40303: LD_ADDR_VAR 0 3
40307: PUSH
40308: LD_INT 0
40310: ST_TO_ADDR
40311: GO 40327
// j := j + 1 ;
40313: LD_ADDR_VAR 0 3
40317: PUSH
40318: LD_VAR 0 3
40322: PUSH
40323: LD_INT 1
40325: PLUS
40326: ST_TO_ADDR
// SetSide ( i , j ) ;
40327: LD_VAR 0 2
40331: PPUSH
40332: LD_VAR 0 3
40336: PPUSH
40337: CALL_OW 235
// end ;
40341: GO 40264
40343: POP
40344: POP
// end ;
40345: LD_VAR 0 1
40349: RET
// export function hHackFog ; begin
40350: LD_INT 0
40352: PPUSH
// FogOff ( true ) ;
40353: LD_INT 1
40355: PPUSH
40356: CALL_OW 344
// end ;
40360: LD_VAR 0 1
40364: RET
// export function hHackTeleport ( unit , x , y ) ; begin
40365: LD_INT 0
40367: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
40368: LD_VAR 0 1
40372: PPUSH
40373: LD_VAR 0 2
40377: PPUSH
40378: LD_VAR 0 3
40382: PPUSH
40383: LD_INT 1
40385: PPUSH
40386: LD_INT 1
40388: PPUSH
40389: CALL_OW 483
// CenterOnXY ( x , y ) ;
40393: LD_VAR 0 2
40397: PPUSH
40398: LD_VAR 0 3
40402: PPUSH
40403: CALL_OW 84
// end ; end_of_file
40407: LD_VAR 0 4
40411: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
40412: LD_INT 0
40414: PPUSH
40415: PPUSH
40416: PPUSH
40417: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
40418: LD_VAR 0 1
40422: PPUSH
40423: CALL_OW 264
40427: PUSH
40428: LD_EXP 52
40432: EQUAL
40433: IFFALSE 40505
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
40435: LD_INT 68
40437: PPUSH
40438: LD_VAR 0 1
40442: PPUSH
40443: CALL_OW 255
40447: PPUSH
40448: CALL_OW 321
40452: PUSH
40453: LD_INT 2
40455: EQUAL
40456: IFFALSE 40468
// eff := 70 else
40458: LD_ADDR_VAR 0 4
40462: PUSH
40463: LD_INT 70
40465: ST_TO_ADDR
40466: GO 40476
// eff := 30 ;
40468: LD_ADDR_VAR 0 4
40472: PUSH
40473: LD_INT 30
40475: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40476: LD_VAR 0 1
40480: PPUSH
40481: CALL_OW 250
40485: PPUSH
40486: LD_VAR 0 1
40490: PPUSH
40491: CALL_OW 251
40495: PPUSH
40496: LD_VAR 0 4
40500: PPUSH
40501: CALL_OW 495
// end ; end ;
40505: LD_VAR 0 2
40509: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40510: LD_INT 0
40512: PPUSH
// end ;
40513: LD_VAR 0 4
40517: RET
// export function SOS_Command ( cmd ) ; begin
40518: LD_INT 0
40520: PPUSH
// end ;
40521: LD_VAR 0 2
40525: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
40526: LD_INT 0
40528: PPUSH
// if cmd = 121 then
40529: LD_VAR 0 1
40533: PUSH
40534: LD_INT 121
40536: EQUAL
40537: IFFALSE 40539
// end ;
40539: LD_VAR 0 6
40543: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40544: LD_INT 0
40546: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40547: LD_VAR 0 1
40551: PUSH
40552: LD_INT 250
40554: EQUAL
40555: PUSH
40556: LD_VAR 0 2
40560: PPUSH
40561: CALL_OW 264
40565: PUSH
40566: LD_EXP 55
40570: EQUAL
40571: AND
40572: IFFALSE 40593
// MinerPlaceMine ( unit , x , y ) ;
40574: LD_VAR 0 2
40578: PPUSH
40579: LD_VAR 0 4
40583: PPUSH
40584: LD_VAR 0 5
40588: PPUSH
40589: CALL 42942 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40593: LD_VAR 0 1
40597: PUSH
40598: LD_INT 251
40600: EQUAL
40601: PUSH
40602: LD_VAR 0 2
40606: PPUSH
40607: CALL_OW 264
40611: PUSH
40612: LD_EXP 55
40616: EQUAL
40617: AND
40618: IFFALSE 40639
// MinerDetonateMine ( unit , x , y ) ;
40620: LD_VAR 0 2
40624: PPUSH
40625: LD_VAR 0 4
40629: PPUSH
40630: LD_VAR 0 5
40634: PPUSH
40635: CALL 43219 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40639: LD_VAR 0 1
40643: PUSH
40644: LD_INT 252
40646: EQUAL
40647: PUSH
40648: LD_VAR 0 2
40652: PPUSH
40653: CALL_OW 264
40657: PUSH
40658: LD_EXP 55
40662: EQUAL
40663: AND
40664: IFFALSE 40685
// MinerCreateMinefield ( unit , x , y ) ;
40666: LD_VAR 0 2
40670: PPUSH
40671: LD_VAR 0 4
40675: PPUSH
40676: LD_VAR 0 5
40680: PPUSH
40681: CALL 43636 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40685: LD_VAR 0 1
40689: PUSH
40690: LD_INT 253
40692: EQUAL
40693: PUSH
40694: LD_VAR 0 2
40698: PPUSH
40699: CALL_OW 257
40703: PUSH
40704: LD_INT 5
40706: EQUAL
40707: AND
40708: IFFALSE 40729
// ComBinocular ( unit , x , y ) ;
40710: LD_VAR 0 2
40714: PPUSH
40715: LD_VAR 0 4
40719: PPUSH
40720: LD_VAR 0 5
40724: PPUSH
40725: CALL 44007 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40729: LD_VAR 0 1
40733: PUSH
40734: LD_INT 254
40736: EQUAL
40737: PUSH
40738: LD_VAR 0 2
40742: PPUSH
40743: CALL_OW 264
40747: PUSH
40748: LD_EXP 50
40752: EQUAL
40753: AND
40754: PUSH
40755: LD_VAR 0 3
40759: PPUSH
40760: CALL_OW 263
40764: PUSH
40765: LD_INT 3
40767: EQUAL
40768: AND
40769: IFFALSE 40785
// HackDestroyVehicle ( unit , selectedUnit ) ;
40771: LD_VAR 0 2
40775: PPUSH
40776: LD_VAR 0 3
40780: PPUSH
40781: CALL 42302 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40785: LD_VAR 0 1
40789: PUSH
40790: LD_INT 255
40792: EQUAL
40793: PUSH
40794: LD_VAR 0 2
40798: PPUSH
40799: CALL_OW 264
40803: PUSH
40804: LD_INT 14
40806: PUSH
40807: LD_INT 53
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: IN
40814: AND
40815: PUSH
40816: LD_VAR 0 4
40820: PPUSH
40821: LD_VAR 0 5
40825: PPUSH
40826: CALL_OW 488
40830: AND
40831: IFFALSE 40855
// CutTreeXYR ( unit , x , y , 12 ) ;
40833: LD_VAR 0 2
40837: PPUSH
40838: LD_VAR 0 4
40842: PPUSH
40843: LD_VAR 0 5
40847: PPUSH
40848: LD_INT 12
40850: PPUSH
40851: CALL 40868 0 4
// end ;
40855: LD_VAR 0 6
40859: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
40860: LD_INT 0
40862: PPUSH
// end ;
40863: LD_VAR 0 4
40867: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40868: LD_INT 0
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40879: LD_VAR 0 1
40883: NOT
40884: PUSH
40885: LD_VAR 0 2
40889: PPUSH
40890: LD_VAR 0 3
40894: PPUSH
40895: CALL_OW 488
40899: NOT
40900: OR
40901: PUSH
40902: LD_VAR 0 4
40906: NOT
40907: OR
40908: IFFALSE 40912
// exit ;
40910: GO 41252
// list := [ ] ;
40912: LD_ADDR_VAR 0 13
40916: PUSH
40917: EMPTY
40918: ST_TO_ADDR
// if x - r < 0 then
40919: LD_VAR 0 2
40923: PUSH
40924: LD_VAR 0 4
40928: MINUS
40929: PUSH
40930: LD_INT 0
40932: LESS
40933: IFFALSE 40945
// min_x := 0 else
40935: LD_ADDR_VAR 0 7
40939: PUSH
40940: LD_INT 0
40942: ST_TO_ADDR
40943: GO 40961
// min_x := x - r ;
40945: LD_ADDR_VAR 0 7
40949: PUSH
40950: LD_VAR 0 2
40954: PUSH
40955: LD_VAR 0 4
40959: MINUS
40960: ST_TO_ADDR
// if y - r < 0 then
40961: LD_VAR 0 3
40965: PUSH
40966: LD_VAR 0 4
40970: MINUS
40971: PUSH
40972: LD_INT 0
40974: LESS
40975: IFFALSE 40987
// min_y := 0 else
40977: LD_ADDR_VAR 0 8
40981: PUSH
40982: LD_INT 0
40984: ST_TO_ADDR
40985: GO 41003
// min_y := y - r ;
40987: LD_ADDR_VAR 0 8
40991: PUSH
40992: LD_VAR 0 3
40996: PUSH
40997: LD_VAR 0 4
41001: MINUS
41002: ST_TO_ADDR
// max_x := x + r ;
41003: LD_ADDR_VAR 0 9
41007: PUSH
41008: LD_VAR 0 2
41012: PUSH
41013: LD_VAR 0 4
41017: PLUS
41018: ST_TO_ADDR
// max_y := y + r ;
41019: LD_ADDR_VAR 0 10
41023: PUSH
41024: LD_VAR 0 3
41028: PUSH
41029: LD_VAR 0 4
41033: PLUS
41034: ST_TO_ADDR
// for _x = min_x to max_x do
41035: LD_ADDR_VAR 0 11
41039: PUSH
41040: DOUBLE
41041: LD_VAR 0 7
41045: DEC
41046: ST_TO_ADDR
41047: LD_VAR 0 9
41051: PUSH
41052: FOR_TO
41053: IFFALSE 41170
// for _y = min_y to max_y do
41055: LD_ADDR_VAR 0 12
41059: PUSH
41060: DOUBLE
41061: LD_VAR 0 8
41065: DEC
41066: ST_TO_ADDR
41067: LD_VAR 0 10
41071: PUSH
41072: FOR_TO
41073: IFFALSE 41166
// begin if not ValidHex ( _x , _y ) then
41075: LD_VAR 0 11
41079: PPUSH
41080: LD_VAR 0 12
41084: PPUSH
41085: CALL_OW 488
41089: NOT
41090: IFFALSE 41094
// continue ;
41092: GO 41072
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
41094: LD_VAR 0 11
41098: PPUSH
41099: LD_VAR 0 12
41103: PPUSH
41104: CALL_OW 351
41108: PUSH
41109: LD_VAR 0 11
41113: PPUSH
41114: LD_VAR 0 12
41118: PPUSH
41119: CALL_OW 554
41123: AND
41124: IFFALSE 41164
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
41126: LD_ADDR_VAR 0 13
41130: PUSH
41131: LD_VAR 0 13
41135: PPUSH
41136: LD_VAR 0 13
41140: PUSH
41141: LD_INT 1
41143: PLUS
41144: PPUSH
41145: LD_VAR 0 11
41149: PUSH
41150: LD_VAR 0 12
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PPUSH
41159: CALL_OW 2
41163: ST_TO_ADDR
// end ;
41164: GO 41072
41166: POP
41167: POP
41168: GO 41052
41170: POP
41171: POP
// if not list then
41172: LD_VAR 0 13
41176: NOT
41177: IFFALSE 41181
// exit ;
41179: GO 41252
// for i in list do
41181: LD_ADDR_VAR 0 6
41185: PUSH
41186: LD_VAR 0 13
41190: PUSH
41191: FOR_IN
41192: IFFALSE 41250
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
41194: LD_VAR 0 1
41198: PPUSH
41199: LD_STRING M
41201: PUSH
41202: LD_VAR 0 6
41206: PUSH
41207: LD_INT 1
41209: ARRAY
41210: PUSH
41211: LD_VAR 0 6
41215: PUSH
41216: LD_INT 2
41218: ARRAY
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: PUSH
41241: EMPTY
41242: LIST
41243: PPUSH
41244: CALL_OW 447
41248: GO 41191
41250: POP
41251: POP
// end ;
41252: LD_VAR 0 5
41256: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
41257: LD_EXP 124
41261: NOT
41262: IFFALSE 41312
41264: GO 41266
41266: DISABLE
// begin initHack := true ;
41267: LD_ADDR_EXP 124
41271: PUSH
41272: LD_INT 1
41274: ST_TO_ADDR
// hackTanks := [ ] ;
41275: LD_ADDR_EXP 125
41279: PUSH
41280: EMPTY
41281: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
41282: LD_ADDR_EXP 126
41286: PUSH
41287: EMPTY
41288: ST_TO_ADDR
// hackLimit := 3 ;
41289: LD_ADDR_EXP 127
41293: PUSH
41294: LD_INT 3
41296: ST_TO_ADDR
// hackDist := 12 ;
41297: LD_ADDR_EXP 128
41301: PUSH
41302: LD_INT 12
41304: ST_TO_ADDR
// hackCounter := [ ] ;
41305: LD_ADDR_EXP 129
41309: PUSH
41310: EMPTY
41311: ST_TO_ADDR
// end ;
41312: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41313: LD_EXP 124
41317: PUSH
41318: LD_INT 34
41320: PUSH
41321: LD_EXP 50
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PPUSH
41330: CALL_OW 69
41334: AND
41335: IFFALSE 41590
41337: GO 41339
41339: DISABLE
41340: LD_INT 0
41342: PPUSH
41343: PPUSH
// begin enable ;
41344: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41345: LD_ADDR_VAR 0 1
41349: PUSH
41350: LD_INT 34
41352: PUSH
41353: LD_EXP 50
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PPUSH
41362: CALL_OW 69
41366: PUSH
41367: FOR_IN
41368: IFFALSE 41588
// begin if not i in hackTanks then
41370: LD_VAR 0 1
41374: PUSH
41375: LD_EXP 125
41379: IN
41380: NOT
41381: IFFALSE 41464
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41383: LD_ADDR_EXP 125
41387: PUSH
41388: LD_EXP 125
41392: PPUSH
41393: LD_EXP 125
41397: PUSH
41398: LD_INT 1
41400: PLUS
41401: PPUSH
41402: LD_VAR 0 1
41406: PPUSH
41407: CALL_OW 1
41411: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41412: LD_ADDR_EXP 126
41416: PUSH
41417: LD_EXP 126
41421: PPUSH
41422: LD_EXP 126
41426: PUSH
41427: LD_INT 1
41429: PLUS
41430: PPUSH
41431: EMPTY
41432: PPUSH
41433: CALL_OW 1
41437: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41438: LD_ADDR_EXP 129
41442: PUSH
41443: LD_EXP 129
41447: PPUSH
41448: LD_EXP 129
41452: PUSH
41453: LD_INT 1
41455: PLUS
41456: PPUSH
41457: EMPTY
41458: PPUSH
41459: CALL_OW 1
41463: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41464: LD_VAR 0 1
41468: PPUSH
41469: CALL_OW 302
41473: NOT
41474: IFFALSE 41487
// begin HackUnlinkAll ( i ) ;
41476: LD_VAR 0 1
41480: PPUSH
41481: CALL 41593 0 1
// continue ;
41485: GO 41367
// end ; HackCheckCapturedStatus ( i ) ;
41487: LD_VAR 0 1
41491: PPUSH
41492: CALL 42036 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41496: LD_ADDR_VAR 0 2
41500: PUSH
41501: LD_INT 81
41503: PUSH
41504: LD_VAR 0 1
41508: PPUSH
41509: CALL_OW 255
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 33
41520: PUSH
41521: LD_INT 3
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 91
41530: PUSH
41531: LD_VAR 0 1
41535: PUSH
41536: LD_EXP 128
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 50
41548: PUSH
41549: EMPTY
41550: LIST
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: PPUSH
41558: CALL_OW 69
41562: ST_TO_ADDR
// if not tmp then
41563: LD_VAR 0 2
41567: NOT
41568: IFFALSE 41572
// continue ;
41570: GO 41367
// HackLink ( i , tmp ) ;
41572: LD_VAR 0 1
41576: PPUSH
41577: LD_VAR 0 2
41581: PPUSH
41582: CALL 41729 0 2
// end ;
41586: GO 41367
41588: POP
41589: POP
// end ;
41590: PPOPN 2
41592: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41593: LD_INT 0
41595: PPUSH
41596: PPUSH
41597: PPUSH
// if not hack in hackTanks then
41598: LD_VAR 0 1
41602: PUSH
41603: LD_EXP 125
41607: IN
41608: NOT
41609: IFFALSE 41613
// exit ;
41611: GO 41724
// index := GetElementIndex ( hackTanks , hack ) ;
41613: LD_ADDR_VAR 0 4
41617: PUSH
41618: LD_EXP 125
41622: PPUSH
41623: LD_VAR 0 1
41627: PPUSH
41628: CALL 49198 0 2
41632: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41633: LD_EXP 126
41637: PUSH
41638: LD_VAR 0 4
41642: ARRAY
41643: IFFALSE 41724
// begin for i in hackTanksCaptured [ index ] do
41645: LD_ADDR_VAR 0 3
41649: PUSH
41650: LD_EXP 126
41654: PUSH
41655: LD_VAR 0 4
41659: ARRAY
41660: PUSH
41661: FOR_IN
41662: IFFALSE 41688
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41664: LD_VAR 0 3
41668: PUSH
41669: LD_INT 1
41671: ARRAY
41672: PPUSH
41673: LD_VAR 0 3
41677: PUSH
41678: LD_INT 2
41680: ARRAY
41681: PPUSH
41682: CALL_OW 235
41686: GO 41661
41688: POP
41689: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41690: LD_ADDR_EXP 126
41694: PUSH
41695: LD_EXP 126
41699: PPUSH
41700: LD_VAR 0 4
41704: PPUSH
41705: EMPTY
41706: PPUSH
41707: CALL_OW 1
41711: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41712: LD_VAR 0 1
41716: PPUSH
41717: LD_INT 0
41719: PPUSH
41720: CALL_OW 505
// end ; end ;
41724: LD_VAR 0 2
41728: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41729: LD_INT 0
41731: PPUSH
41732: PPUSH
41733: PPUSH
// if not hack in hackTanks or not vehicles then
41734: LD_VAR 0 1
41738: PUSH
41739: LD_EXP 125
41743: IN
41744: NOT
41745: PUSH
41746: LD_VAR 0 2
41750: NOT
41751: OR
41752: IFFALSE 41756
// exit ;
41754: GO 42031
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41756: LD_ADDR_VAR 0 2
41760: PUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: LD_VAR 0 2
41770: PPUSH
41771: LD_INT 1
41773: PPUSH
41774: LD_INT 1
41776: PPUSH
41777: CALL 49848 0 4
41781: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41782: LD_ADDR_VAR 0 5
41786: PUSH
41787: LD_EXP 125
41791: PPUSH
41792: LD_VAR 0 1
41796: PPUSH
41797: CALL 49198 0 2
41801: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41802: LD_EXP 126
41806: PUSH
41807: LD_VAR 0 5
41811: ARRAY
41812: PUSH
41813: LD_EXP 127
41817: LESS
41818: IFFALSE 42007
// begin for i := 1 to vehicles do
41820: LD_ADDR_VAR 0 4
41824: PUSH
41825: DOUBLE
41826: LD_INT 1
41828: DEC
41829: ST_TO_ADDR
41830: LD_VAR 0 2
41834: PUSH
41835: FOR_TO
41836: IFFALSE 42005
// begin if hackTanksCaptured [ index ] = hackLimit then
41838: LD_EXP 126
41842: PUSH
41843: LD_VAR 0 5
41847: ARRAY
41848: PUSH
41849: LD_EXP 127
41853: EQUAL
41854: IFFALSE 41858
// break ;
41856: GO 42005
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41858: LD_ADDR_EXP 129
41862: PUSH
41863: LD_EXP 129
41867: PPUSH
41868: LD_VAR 0 5
41872: PPUSH
41873: LD_EXP 129
41877: PUSH
41878: LD_VAR 0 5
41882: ARRAY
41883: PUSH
41884: LD_INT 1
41886: PLUS
41887: PPUSH
41888: CALL_OW 1
41892: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41893: LD_ADDR_EXP 126
41897: PUSH
41898: LD_EXP 126
41902: PPUSH
41903: LD_VAR 0 5
41907: PUSH
41908: LD_EXP 126
41912: PUSH
41913: LD_VAR 0 5
41917: ARRAY
41918: PUSH
41919: LD_INT 1
41921: PLUS
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PPUSH
41927: LD_VAR 0 2
41931: PUSH
41932: LD_VAR 0 4
41936: ARRAY
41937: PUSH
41938: LD_VAR 0 2
41942: PUSH
41943: LD_VAR 0 4
41947: ARRAY
41948: PPUSH
41949: CALL_OW 255
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PPUSH
41958: CALL 49413 0 3
41962: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41963: LD_VAR 0 2
41967: PUSH
41968: LD_VAR 0 4
41972: ARRAY
41973: PPUSH
41974: LD_VAR 0 1
41978: PPUSH
41979: CALL_OW 255
41983: PPUSH
41984: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41988: LD_VAR 0 2
41992: PUSH
41993: LD_VAR 0 4
41997: ARRAY
41998: PPUSH
41999: CALL_OW 141
// end ;
42003: GO 41835
42005: POP
42006: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42007: LD_VAR 0 1
42011: PPUSH
42012: LD_EXP 126
42016: PUSH
42017: LD_VAR 0 5
42021: ARRAY
42022: PUSH
42023: LD_INT 0
42025: PLUS
42026: PPUSH
42027: CALL_OW 505
// end ;
42031: LD_VAR 0 3
42035: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
42036: LD_INT 0
42038: PPUSH
42039: PPUSH
42040: PPUSH
42041: PPUSH
// if not hack in hackTanks then
42042: LD_VAR 0 1
42046: PUSH
42047: LD_EXP 125
42051: IN
42052: NOT
42053: IFFALSE 42057
// exit ;
42055: GO 42297
// index := GetElementIndex ( hackTanks , hack ) ;
42057: LD_ADDR_VAR 0 4
42061: PUSH
42062: LD_EXP 125
42066: PPUSH
42067: LD_VAR 0 1
42071: PPUSH
42072: CALL 49198 0 2
42076: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
42077: LD_ADDR_VAR 0 3
42081: PUSH
42082: DOUBLE
42083: LD_EXP 126
42087: PUSH
42088: LD_VAR 0 4
42092: ARRAY
42093: INC
42094: ST_TO_ADDR
42095: LD_INT 1
42097: PUSH
42098: FOR_DOWNTO
42099: IFFALSE 42271
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
42101: LD_ADDR_VAR 0 5
42105: PUSH
42106: LD_EXP 126
42110: PUSH
42111: LD_VAR 0 4
42115: ARRAY
42116: PUSH
42117: LD_VAR 0 3
42121: ARRAY
42122: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
42123: LD_VAR 0 5
42127: PUSH
42128: LD_INT 1
42130: ARRAY
42131: PPUSH
42132: CALL_OW 302
42136: NOT
42137: PUSH
42138: LD_VAR 0 5
42142: PUSH
42143: LD_INT 1
42145: ARRAY
42146: PPUSH
42147: CALL_OW 255
42151: PUSH
42152: LD_VAR 0 1
42156: PPUSH
42157: CALL_OW 255
42161: NONEQUAL
42162: OR
42163: IFFALSE 42269
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
42165: LD_VAR 0 5
42169: PUSH
42170: LD_INT 1
42172: ARRAY
42173: PPUSH
42174: CALL_OW 305
42178: PUSH
42179: LD_VAR 0 5
42183: PUSH
42184: LD_INT 1
42186: ARRAY
42187: PPUSH
42188: CALL_OW 255
42192: PUSH
42193: LD_VAR 0 1
42197: PPUSH
42198: CALL_OW 255
42202: EQUAL
42203: AND
42204: IFFALSE 42228
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
42206: LD_VAR 0 5
42210: PUSH
42211: LD_INT 1
42213: ARRAY
42214: PPUSH
42215: LD_VAR 0 5
42219: PUSH
42220: LD_INT 2
42222: ARRAY
42223: PPUSH
42224: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
42228: LD_ADDR_EXP 126
42232: PUSH
42233: LD_EXP 126
42237: PPUSH
42238: LD_VAR 0 4
42242: PPUSH
42243: LD_EXP 126
42247: PUSH
42248: LD_VAR 0 4
42252: ARRAY
42253: PPUSH
42254: LD_VAR 0 3
42258: PPUSH
42259: CALL_OW 3
42263: PPUSH
42264: CALL_OW 1
42268: ST_TO_ADDR
// end ; end ;
42269: GO 42098
42271: POP
42272: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42273: LD_VAR 0 1
42277: PPUSH
42278: LD_EXP 126
42282: PUSH
42283: LD_VAR 0 4
42287: ARRAY
42288: PUSH
42289: LD_INT 0
42291: PLUS
42292: PPUSH
42293: CALL_OW 505
// end ;
42297: LD_VAR 0 2
42301: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42302: LD_INT 0
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
// if not hack in hackTanks then
42308: LD_VAR 0 1
42312: PUSH
42313: LD_EXP 125
42317: IN
42318: NOT
42319: IFFALSE 42323
// exit ;
42321: GO 42408
// index := GetElementIndex ( hackTanks , hack ) ;
42323: LD_ADDR_VAR 0 5
42327: PUSH
42328: LD_EXP 125
42332: PPUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL 49198 0 2
42342: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42343: LD_ADDR_VAR 0 4
42347: PUSH
42348: DOUBLE
42349: LD_INT 1
42351: DEC
42352: ST_TO_ADDR
42353: LD_EXP 126
42357: PUSH
42358: LD_VAR 0 5
42362: ARRAY
42363: PUSH
42364: FOR_TO
42365: IFFALSE 42406
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42367: LD_EXP 126
42371: PUSH
42372: LD_VAR 0 5
42376: ARRAY
42377: PUSH
42378: LD_VAR 0 4
42382: ARRAY
42383: PUSH
42384: LD_INT 1
42386: ARRAY
42387: PUSH
42388: LD_VAR 0 2
42392: EQUAL
42393: IFFALSE 42404
// KillUnit ( vehicle ) ;
42395: LD_VAR 0 2
42399: PPUSH
42400: CALL_OW 66
42404: GO 42364
42406: POP
42407: POP
// end ;
42408: LD_VAR 0 3
42412: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42413: LD_EXP 130
42417: NOT
42418: IFFALSE 42453
42420: GO 42422
42422: DISABLE
// begin initMiner := true ;
42423: LD_ADDR_EXP 130
42427: PUSH
42428: LD_INT 1
42430: ST_TO_ADDR
// minersList := [ ] ;
42431: LD_ADDR_EXP 131
42435: PUSH
42436: EMPTY
42437: ST_TO_ADDR
// minerMinesList := [ ] ;
42438: LD_ADDR_EXP 132
42442: PUSH
42443: EMPTY
42444: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42445: LD_ADDR_EXP 133
42449: PUSH
42450: LD_INT 5
42452: ST_TO_ADDR
// end ;
42453: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42454: LD_EXP 130
42458: PUSH
42459: LD_INT 34
42461: PUSH
42462: LD_EXP 55
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PPUSH
42471: CALL_OW 69
42475: AND
42476: IFFALSE 42939
42478: GO 42480
42480: DISABLE
42481: LD_INT 0
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
// begin enable ;
42487: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42488: LD_ADDR_VAR 0 1
42492: PUSH
42493: LD_INT 34
42495: PUSH
42496: LD_EXP 55
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PPUSH
42505: CALL_OW 69
42509: PUSH
42510: FOR_IN
42511: IFFALSE 42583
// begin if not i in minersList then
42513: LD_VAR 0 1
42517: PUSH
42518: LD_EXP 131
42522: IN
42523: NOT
42524: IFFALSE 42581
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42526: LD_ADDR_EXP 131
42530: PUSH
42531: LD_EXP 131
42535: PPUSH
42536: LD_EXP 131
42540: PUSH
42541: LD_INT 1
42543: PLUS
42544: PPUSH
42545: LD_VAR 0 1
42549: PPUSH
42550: CALL_OW 1
42554: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42555: LD_ADDR_EXP 132
42559: PUSH
42560: LD_EXP 132
42564: PPUSH
42565: LD_EXP 132
42569: PUSH
42570: LD_INT 1
42572: PLUS
42573: PPUSH
42574: EMPTY
42575: PPUSH
42576: CALL_OW 1
42580: ST_TO_ADDR
// end end ;
42581: GO 42510
42583: POP
42584: POP
// for i := minerMinesList downto 1 do
42585: LD_ADDR_VAR 0 1
42589: PUSH
42590: DOUBLE
42591: LD_EXP 132
42595: INC
42596: ST_TO_ADDR
42597: LD_INT 1
42599: PUSH
42600: FOR_DOWNTO
42601: IFFALSE 42937
// begin if IsLive ( minersList [ i ] ) then
42603: LD_EXP 131
42607: PUSH
42608: LD_VAR 0 1
42612: ARRAY
42613: PPUSH
42614: CALL_OW 300
42618: IFFALSE 42646
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42620: LD_EXP 131
42624: PUSH
42625: LD_VAR 0 1
42629: ARRAY
42630: PPUSH
42631: LD_EXP 132
42635: PUSH
42636: LD_VAR 0 1
42640: ARRAY
42641: PPUSH
42642: CALL_OW 505
// if not minerMinesList [ i ] then
42646: LD_EXP 132
42650: PUSH
42651: LD_VAR 0 1
42655: ARRAY
42656: NOT
42657: IFFALSE 42661
// continue ;
42659: GO 42600
// for j := minerMinesList [ i ] downto 1 do
42661: LD_ADDR_VAR 0 2
42665: PUSH
42666: DOUBLE
42667: LD_EXP 132
42671: PUSH
42672: LD_VAR 0 1
42676: ARRAY
42677: INC
42678: ST_TO_ADDR
42679: LD_INT 1
42681: PUSH
42682: FOR_DOWNTO
42683: IFFALSE 42933
// begin side := GetSide ( minersList [ i ] ) ;
42685: LD_ADDR_VAR 0 3
42689: PUSH
42690: LD_EXP 131
42694: PUSH
42695: LD_VAR 0 1
42699: ARRAY
42700: PPUSH
42701: CALL_OW 255
42705: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42706: LD_ADDR_VAR 0 4
42710: PUSH
42711: LD_EXP 132
42715: PUSH
42716: LD_VAR 0 1
42720: ARRAY
42721: PUSH
42722: LD_VAR 0 2
42726: ARRAY
42727: PUSH
42728: LD_INT 1
42730: ARRAY
42731: PPUSH
42732: LD_EXP 132
42736: PUSH
42737: LD_VAR 0 1
42741: ARRAY
42742: PUSH
42743: LD_VAR 0 2
42747: ARRAY
42748: PUSH
42749: LD_INT 2
42751: ARRAY
42752: PPUSH
42753: CALL_OW 428
42757: ST_TO_ADDR
// if not tmp then
42758: LD_VAR 0 4
42762: NOT
42763: IFFALSE 42767
// continue ;
42765: GO 42682
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42767: LD_VAR 0 4
42771: PUSH
42772: LD_INT 81
42774: PUSH
42775: LD_VAR 0 3
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PPUSH
42784: CALL_OW 69
42788: IN
42789: PUSH
42790: LD_EXP 132
42794: PUSH
42795: LD_VAR 0 1
42799: ARRAY
42800: PUSH
42801: LD_VAR 0 2
42805: ARRAY
42806: PUSH
42807: LD_INT 1
42809: ARRAY
42810: PPUSH
42811: LD_EXP 132
42815: PUSH
42816: LD_VAR 0 1
42820: ARRAY
42821: PUSH
42822: LD_VAR 0 2
42826: ARRAY
42827: PUSH
42828: LD_INT 2
42830: ARRAY
42831: PPUSH
42832: CALL_OW 458
42836: AND
42837: IFFALSE 42931
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42839: LD_EXP 132
42843: PUSH
42844: LD_VAR 0 1
42848: ARRAY
42849: PUSH
42850: LD_VAR 0 2
42854: ARRAY
42855: PUSH
42856: LD_INT 1
42858: ARRAY
42859: PPUSH
42860: LD_EXP 132
42864: PUSH
42865: LD_VAR 0 1
42869: ARRAY
42870: PUSH
42871: LD_VAR 0 2
42875: ARRAY
42876: PUSH
42877: LD_INT 2
42879: ARRAY
42880: PPUSH
42881: LD_VAR 0 3
42885: PPUSH
42886: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42890: LD_ADDR_EXP 132
42894: PUSH
42895: LD_EXP 132
42899: PPUSH
42900: LD_VAR 0 1
42904: PPUSH
42905: LD_EXP 132
42909: PUSH
42910: LD_VAR 0 1
42914: ARRAY
42915: PPUSH
42916: LD_VAR 0 2
42920: PPUSH
42921: CALL_OW 3
42925: PPUSH
42926: CALL_OW 1
42930: ST_TO_ADDR
// end ; end ;
42931: GO 42682
42933: POP
42934: POP
// end ;
42935: GO 42600
42937: POP
42938: POP
// end ;
42939: PPOPN 4
42941: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
42942: LD_INT 0
42944: PPUSH
42945: PPUSH
// result := false ;
42946: LD_ADDR_VAR 0 4
42950: PUSH
42951: LD_INT 0
42953: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42954: LD_VAR 0 1
42958: PPUSH
42959: CALL_OW 264
42963: PUSH
42964: LD_EXP 55
42968: EQUAL
42969: NOT
42970: IFFALSE 42974
// exit ;
42972: GO 43214
// index := GetElementIndex ( minersList , unit ) ;
42974: LD_ADDR_VAR 0 5
42978: PUSH
42979: LD_EXP 131
42983: PPUSH
42984: LD_VAR 0 1
42988: PPUSH
42989: CALL 49198 0 2
42993: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42994: LD_EXP 132
42998: PUSH
42999: LD_VAR 0 5
43003: ARRAY
43004: PUSH
43005: LD_EXP 133
43009: GREATEREQUAL
43010: IFFALSE 43014
// exit ;
43012: GO 43214
// ComMoveXY ( unit , x , y ) ;
43014: LD_VAR 0 1
43018: PPUSH
43019: LD_VAR 0 2
43023: PPUSH
43024: LD_VAR 0 3
43028: PPUSH
43029: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43033: LD_INT 35
43035: PPUSH
43036: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
43040: LD_VAR 0 1
43044: PPUSH
43045: LD_VAR 0 2
43049: PPUSH
43050: LD_VAR 0 3
43054: PPUSH
43055: CALL 79970 0 3
43059: NOT
43060: PUSH
43061: LD_VAR 0 1
43065: PPUSH
43066: CALL_OW 314
43070: AND
43071: IFFALSE 43075
// exit ;
43073: GO 43214
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
43075: LD_VAR 0 2
43079: PPUSH
43080: LD_VAR 0 3
43084: PPUSH
43085: CALL_OW 428
43089: PUSH
43090: LD_VAR 0 1
43094: EQUAL
43095: PUSH
43096: LD_VAR 0 1
43100: PPUSH
43101: CALL_OW 314
43105: NOT
43106: AND
43107: IFFALSE 43033
// PlaySoundXY ( x , y , PlantMine ) ;
43109: LD_VAR 0 2
43113: PPUSH
43114: LD_VAR 0 3
43118: PPUSH
43119: LD_STRING PlantMine
43121: PPUSH
43122: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
43126: LD_VAR 0 2
43130: PPUSH
43131: LD_VAR 0 3
43135: PPUSH
43136: LD_VAR 0 1
43140: PPUSH
43141: CALL_OW 255
43145: PPUSH
43146: LD_INT 0
43148: PPUSH
43149: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
43153: LD_ADDR_EXP 132
43157: PUSH
43158: LD_EXP 132
43162: PPUSH
43163: LD_VAR 0 5
43167: PUSH
43168: LD_EXP 132
43172: PUSH
43173: LD_VAR 0 5
43177: ARRAY
43178: PUSH
43179: LD_INT 1
43181: PLUS
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PPUSH
43187: LD_VAR 0 2
43191: PUSH
43192: LD_VAR 0 3
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PPUSH
43201: CALL 49413 0 3
43205: ST_TO_ADDR
// result := true ;
43206: LD_ADDR_VAR 0 4
43210: PUSH
43211: LD_INT 1
43213: ST_TO_ADDR
// end ;
43214: LD_VAR 0 4
43218: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
43219: LD_INT 0
43221: PPUSH
43222: PPUSH
43223: PPUSH
// if not unit in minersList then
43224: LD_VAR 0 1
43228: PUSH
43229: LD_EXP 131
43233: IN
43234: NOT
43235: IFFALSE 43239
// exit ;
43237: GO 43631
// index := GetElementIndex ( minersList , unit ) ;
43239: LD_ADDR_VAR 0 6
43243: PUSH
43244: LD_EXP 131
43248: PPUSH
43249: LD_VAR 0 1
43253: PPUSH
43254: CALL 49198 0 2
43258: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
43259: LD_ADDR_VAR 0 5
43263: PUSH
43264: DOUBLE
43265: LD_EXP 132
43269: PUSH
43270: LD_VAR 0 6
43274: ARRAY
43275: INC
43276: ST_TO_ADDR
43277: LD_INT 1
43279: PUSH
43280: FOR_DOWNTO
43281: IFFALSE 43442
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
43283: LD_EXP 132
43287: PUSH
43288: LD_VAR 0 6
43292: ARRAY
43293: PUSH
43294: LD_VAR 0 5
43298: ARRAY
43299: PUSH
43300: LD_INT 1
43302: ARRAY
43303: PUSH
43304: LD_VAR 0 2
43308: EQUAL
43309: PUSH
43310: LD_EXP 132
43314: PUSH
43315: LD_VAR 0 6
43319: ARRAY
43320: PUSH
43321: LD_VAR 0 5
43325: ARRAY
43326: PUSH
43327: LD_INT 2
43329: ARRAY
43330: PUSH
43331: LD_VAR 0 3
43335: EQUAL
43336: AND
43337: IFFALSE 43440
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43339: LD_EXP 132
43343: PUSH
43344: LD_VAR 0 6
43348: ARRAY
43349: PUSH
43350: LD_VAR 0 5
43354: ARRAY
43355: PUSH
43356: LD_INT 1
43358: ARRAY
43359: PPUSH
43360: LD_EXP 132
43364: PUSH
43365: LD_VAR 0 6
43369: ARRAY
43370: PUSH
43371: LD_VAR 0 5
43375: ARRAY
43376: PUSH
43377: LD_INT 2
43379: ARRAY
43380: PPUSH
43381: LD_VAR 0 1
43385: PPUSH
43386: CALL_OW 255
43390: PPUSH
43391: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43395: LD_ADDR_EXP 132
43399: PUSH
43400: LD_EXP 132
43404: PPUSH
43405: LD_VAR 0 6
43409: PPUSH
43410: LD_EXP 132
43414: PUSH
43415: LD_VAR 0 6
43419: ARRAY
43420: PPUSH
43421: LD_VAR 0 5
43425: PPUSH
43426: CALL_OW 3
43430: PPUSH
43431: CALL_OW 1
43435: ST_TO_ADDR
// exit ;
43436: POP
43437: POP
43438: GO 43631
// end ; end ;
43440: GO 43280
43442: POP
43443: POP
// for i := minerMinesList [ index ] downto 1 do
43444: LD_ADDR_VAR 0 5
43448: PUSH
43449: DOUBLE
43450: LD_EXP 132
43454: PUSH
43455: LD_VAR 0 6
43459: ARRAY
43460: INC
43461: ST_TO_ADDR
43462: LD_INT 1
43464: PUSH
43465: FOR_DOWNTO
43466: IFFALSE 43629
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43468: LD_EXP 132
43472: PUSH
43473: LD_VAR 0 6
43477: ARRAY
43478: PUSH
43479: LD_VAR 0 5
43483: ARRAY
43484: PUSH
43485: LD_INT 1
43487: ARRAY
43488: PPUSH
43489: LD_EXP 132
43493: PUSH
43494: LD_VAR 0 6
43498: ARRAY
43499: PUSH
43500: LD_VAR 0 5
43504: ARRAY
43505: PUSH
43506: LD_INT 2
43508: ARRAY
43509: PPUSH
43510: LD_VAR 0 2
43514: PPUSH
43515: LD_VAR 0 3
43519: PPUSH
43520: CALL_OW 298
43524: PUSH
43525: LD_INT 6
43527: LESS
43528: IFFALSE 43627
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43530: LD_EXP 132
43534: PUSH
43535: LD_VAR 0 6
43539: ARRAY
43540: PUSH
43541: LD_VAR 0 5
43545: ARRAY
43546: PUSH
43547: LD_INT 1
43549: ARRAY
43550: PPUSH
43551: LD_EXP 132
43555: PUSH
43556: LD_VAR 0 6
43560: ARRAY
43561: PUSH
43562: LD_VAR 0 5
43566: ARRAY
43567: PUSH
43568: LD_INT 2
43570: ARRAY
43571: PPUSH
43572: LD_VAR 0 1
43576: PPUSH
43577: CALL_OW 255
43581: PPUSH
43582: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43586: LD_ADDR_EXP 132
43590: PUSH
43591: LD_EXP 132
43595: PPUSH
43596: LD_VAR 0 6
43600: PPUSH
43601: LD_EXP 132
43605: PUSH
43606: LD_VAR 0 6
43610: ARRAY
43611: PPUSH
43612: LD_VAR 0 5
43616: PPUSH
43617: CALL_OW 3
43621: PPUSH
43622: CALL_OW 1
43626: ST_TO_ADDR
// end ; end ;
43627: GO 43465
43629: POP
43630: POP
// end ;
43631: LD_VAR 0 4
43635: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43636: LD_INT 0
43638: PPUSH
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43647: LD_VAR 0 1
43651: PPUSH
43652: CALL_OW 264
43656: PUSH
43657: LD_EXP 55
43661: EQUAL
43662: NOT
43663: PUSH
43664: LD_VAR 0 1
43668: PUSH
43669: LD_EXP 131
43673: IN
43674: NOT
43675: OR
43676: IFFALSE 43680
// exit ;
43678: GO 44002
// index := GetElementIndex ( minersList , unit ) ;
43680: LD_ADDR_VAR 0 6
43684: PUSH
43685: LD_EXP 131
43689: PPUSH
43690: LD_VAR 0 1
43694: PPUSH
43695: CALL 49198 0 2
43699: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43700: LD_ADDR_VAR 0 8
43704: PUSH
43705: LD_EXP 133
43709: PUSH
43710: LD_EXP 132
43714: PUSH
43715: LD_VAR 0 6
43719: ARRAY
43720: MINUS
43721: ST_TO_ADDR
// if not minesFreeAmount then
43722: LD_VAR 0 8
43726: NOT
43727: IFFALSE 43731
// exit ;
43729: GO 44002
// tmp := [ ] ;
43731: LD_ADDR_VAR 0 7
43735: PUSH
43736: EMPTY
43737: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43738: LD_ADDR_VAR 0 5
43742: PUSH
43743: DOUBLE
43744: LD_INT 1
43746: DEC
43747: ST_TO_ADDR
43748: LD_VAR 0 8
43752: PUSH
43753: FOR_TO
43754: IFFALSE 43949
// begin _d := rand ( 0 , 5 ) ;
43756: LD_ADDR_VAR 0 11
43760: PUSH
43761: LD_INT 0
43763: PPUSH
43764: LD_INT 5
43766: PPUSH
43767: CALL_OW 12
43771: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43772: LD_ADDR_VAR 0 12
43776: PUSH
43777: LD_INT 2
43779: PPUSH
43780: LD_INT 6
43782: PPUSH
43783: CALL_OW 12
43787: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43788: LD_ADDR_VAR 0 9
43792: PUSH
43793: LD_VAR 0 2
43797: PPUSH
43798: LD_VAR 0 11
43802: PPUSH
43803: LD_VAR 0 12
43807: PPUSH
43808: CALL_OW 272
43812: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43813: LD_ADDR_VAR 0 10
43817: PUSH
43818: LD_VAR 0 3
43822: PPUSH
43823: LD_VAR 0 11
43827: PPUSH
43828: LD_VAR 0 12
43832: PPUSH
43833: CALL_OW 273
43837: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43838: LD_VAR 0 9
43842: PPUSH
43843: LD_VAR 0 10
43847: PPUSH
43848: CALL_OW 488
43852: PUSH
43853: LD_VAR 0 9
43857: PUSH
43858: LD_VAR 0 10
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_VAR 0 7
43871: IN
43872: NOT
43873: AND
43874: PUSH
43875: LD_VAR 0 9
43879: PPUSH
43880: LD_VAR 0 10
43884: PPUSH
43885: CALL_OW 458
43889: NOT
43890: AND
43891: IFFALSE 43933
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43893: LD_ADDR_VAR 0 7
43897: PUSH
43898: LD_VAR 0 7
43902: PPUSH
43903: LD_VAR 0 7
43907: PUSH
43908: LD_INT 1
43910: PLUS
43911: PPUSH
43912: LD_VAR 0 9
43916: PUSH
43917: LD_VAR 0 10
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PPUSH
43926: CALL_OW 1
43930: ST_TO_ADDR
43931: GO 43947
// i := i - 1 ;
43933: LD_ADDR_VAR 0 5
43937: PUSH
43938: LD_VAR 0 5
43942: PUSH
43943: LD_INT 1
43945: MINUS
43946: ST_TO_ADDR
// end ;
43947: GO 43753
43949: POP
43950: POP
// for i in tmp do
43951: LD_ADDR_VAR 0 5
43955: PUSH
43956: LD_VAR 0 7
43960: PUSH
43961: FOR_IN
43962: IFFALSE 44000
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43964: LD_VAR 0 1
43968: PPUSH
43969: LD_VAR 0 5
43973: PUSH
43974: LD_INT 1
43976: ARRAY
43977: PPUSH
43978: LD_VAR 0 5
43982: PUSH
43983: LD_INT 2
43985: ARRAY
43986: PPUSH
43987: CALL 42942 0 3
43991: NOT
43992: IFFALSE 43998
// exit ;
43994: POP
43995: POP
43996: GO 44002
43998: GO 43961
44000: POP
44001: POP
// end ;
44002: LD_VAR 0 4
44006: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
44007: LD_INT 0
44009: PPUSH
44010: PPUSH
44011: PPUSH
44012: PPUSH
44013: PPUSH
44014: PPUSH
44015: PPUSH
// if not GetClass ( unit ) = class_sniper then
44016: LD_VAR 0 1
44020: PPUSH
44021: CALL_OW 257
44025: PUSH
44026: LD_INT 5
44028: EQUAL
44029: NOT
44030: IFFALSE 44034
// exit ;
44032: GO 44422
// dist := 8 ;
44034: LD_ADDR_VAR 0 5
44038: PUSH
44039: LD_INT 8
44041: ST_TO_ADDR
// viewRange := 12 ;
44042: LD_ADDR_VAR 0 7
44046: PUSH
44047: LD_INT 12
44049: ST_TO_ADDR
// side := GetSide ( unit ) ;
44050: LD_ADDR_VAR 0 6
44054: PUSH
44055: LD_VAR 0 1
44059: PPUSH
44060: CALL_OW 255
44064: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
44065: LD_INT 61
44067: PPUSH
44068: LD_VAR 0 6
44072: PPUSH
44073: CALL_OW 321
44077: PUSH
44078: LD_INT 2
44080: EQUAL
44081: IFFALSE 44091
// viewRange := 16 ;
44083: LD_ADDR_VAR 0 7
44087: PUSH
44088: LD_INT 16
44090: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
44091: LD_VAR 0 1
44095: PPUSH
44096: LD_VAR 0 2
44100: PPUSH
44101: LD_VAR 0 3
44105: PPUSH
44106: CALL_OW 297
44110: PUSH
44111: LD_VAR 0 5
44115: GREATER
44116: IFFALSE 44195
// begin ComMoveXY ( unit , x , y ) ;
44118: LD_VAR 0 1
44122: PPUSH
44123: LD_VAR 0 2
44127: PPUSH
44128: LD_VAR 0 3
44132: PPUSH
44133: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44137: LD_INT 35
44139: PPUSH
44140: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
44144: LD_VAR 0 1
44148: PPUSH
44149: LD_VAR 0 2
44153: PPUSH
44154: LD_VAR 0 3
44158: PPUSH
44159: CALL 79970 0 3
44163: NOT
44164: IFFALSE 44168
// exit ;
44166: GO 44422
// until GetDistUnitXY ( unit , x , y ) < dist ;
44168: LD_VAR 0 1
44172: PPUSH
44173: LD_VAR 0 2
44177: PPUSH
44178: LD_VAR 0 3
44182: PPUSH
44183: CALL_OW 297
44187: PUSH
44188: LD_VAR 0 5
44192: LESS
44193: IFFALSE 44137
// end ; ComTurnXY ( unit , x , y ) ;
44195: LD_VAR 0 1
44199: PPUSH
44200: LD_VAR 0 2
44204: PPUSH
44205: LD_VAR 0 3
44209: PPUSH
44210: CALL_OW 118
// wait ( 5 ) ;
44214: LD_INT 5
44216: PPUSH
44217: CALL_OW 67
// _d := GetDir ( unit ) ;
44221: LD_ADDR_VAR 0 10
44225: PUSH
44226: LD_VAR 0 1
44230: PPUSH
44231: CALL_OW 254
44235: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
44236: LD_ADDR_VAR 0 8
44240: PUSH
44241: LD_VAR 0 1
44245: PPUSH
44246: CALL_OW 250
44250: PPUSH
44251: LD_VAR 0 10
44255: PPUSH
44256: LD_VAR 0 5
44260: PPUSH
44261: CALL_OW 272
44265: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
44266: LD_ADDR_VAR 0 9
44270: PUSH
44271: LD_VAR 0 1
44275: PPUSH
44276: CALL_OW 251
44280: PPUSH
44281: LD_VAR 0 10
44285: PPUSH
44286: LD_VAR 0 5
44290: PPUSH
44291: CALL_OW 273
44295: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44296: LD_VAR 0 8
44300: PPUSH
44301: LD_VAR 0 9
44305: PPUSH
44306: CALL_OW 488
44310: NOT
44311: IFFALSE 44315
// exit ;
44313: GO 44422
// ComAnimCustom ( unit , 1 ) ;
44315: LD_VAR 0 1
44319: PPUSH
44320: LD_INT 1
44322: PPUSH
44323: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44327: LD_VAR 0 8
44331: PPUSH
44332: LD_VAR 0 9
44336: PPUSH
44337: LD_VAR 0 6
44341: PPUSH
44342: LD_VAR 0 7
44346: PPUSH
44347: CALL_OW 330
// repeat wait ( 1 ) ;
44351: LD_INT 1
44353: PPUSH
44354: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44358: LD_VAR 0 1
44362: PPUSH
44363: CALL_OW 316
44367: PUSH
44368: LD_VAR 0 1
44372: PPUSH
44373: CALL_OW 314
44377: OR
44378: PUSH
44379: LD_VAR 0 1
44383: PPUSH
44384: CALL_OW 302
44388: NOT
44389: OR
44390: PUSH
44391: LD_VAR 0 1
44395: PPUSH
44396: CALL_OW 301
44400: OR
44401: IFFALSE 44351
// RemoveSeeing ( _x , _y , side ) ;
44403: LD_VAR 0 8
44407: PPUSH
44408: LD_VAR 0 9
44412: PPUSH
44413: LD_VAR 0 6
44417: PPUSH
44418: CALL_OW 331
// end ; end_of_file
44422: LD_VAR 0 4
44426: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44427: LD_INT 0
44429: PPUSH
44430: PPUSH
// if exist_mode then
44431: LD_VAR 0 2
44435: IFFALSE 44460
// unit := CreateCharacter ( prefix & ident ) else
44437: LD_ADDR_VAR 0 5
44441: PUSH
44442: LD_VAR 0 3
44446: PUSH
44447: LD_VAR 0 1
44451: STR
44452: PPUSH
44453: CALL_OW 34
44457: ST_TO_ADDR
44458: GO 44475
// unit := NewCharacter ( ident ) ;
44460: LD_ADDR_VAR 0 5
44464: PUSH
44465: LD_VAR 0 1
44469: PPUSH
44470: CALL_OW 25
44474: ST_TO_ADDR
// result := unit ;
44475: LD_ADDR_VAR 0 4
44479: PUSH
44480: LD_VAR 0 5
44484: ST_TO_ADDR
// end ;
44485: LD_VAR 0 4
44489: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44490: LD_INT 0
44492: PPUSH
44493: PPUSH
// if not side or not nation then
44494: LD_VAR 0 1
44498: NOT
44499: PUSH
44500: LD_VAR 0 2
44504: NOT
44505: OR
44506: IFFALSE 44510
// exit ;
44508: GO 45278
// case nation of nation_american :
44510: LD_VAR 0 2
44514: PUSH
44515: LD_INT 1
44517: DOUBLE
44518: EQUAL
44519: IFTRUE 44523
44521: GO 44737
44523: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
44524: LD_ADDR_VAR 0 4
44528: PUSH
44529: LD_INT 35
44531: PUSH
44532: LD_INT 45
44534: PUSH
44535: LD_INT 46
44537: PUSH
44538: LD_INT 47
44540: PUSH
44541: LD_INT 82
44543: PUSH
44544: LD_INT 83
44546: PUSH
44547: LD_INT 84
44549: PUSH
44550: LD_INT 85
44552: PUSH
44553: LD_INT 86
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: LD_INT 6
44564: PUSH
44565: LD_INT 15
44567: PUSH
44568: LD_INT 16
44570: PUSH
44571: LD_INT 7
44573: PUSH
44574: LD_INT 12
44576: PUSH
44577: LD_INT 13
44579: PUSH
44580: LD_INT 10
44582: PUSH
44583: LD_INT 14
44585: PUSH
44586: LD_INT 20
44588: PUSH
44589: LD_INT 21
44591: PUSH
44592: LD_INT 22
44594: PUSH
44595: LD_INT 25
44597: PUSH
44598: LD_INT 32
44600: PUSH
44601: LD_INT 27
44603: PUSH
44604: LD_INT 36
44606: PUSH
44607: LD_INT 69
44609: PUSH
44610: LD_INT 39
44612: PUSH
44613: LD_INT 34
44615: PUSH
44616: LD_INT 40
44618: PUSH
44619: LD_INT 48
44621: PUSH
44622: LD_INT 49
44624: PUSH
44625: LD_INT 50
44627: PUSH
44628: LD_INT 51
44630: PUSH
44631: LD_INT 52
44633: PUSH
44634: LD_INT 53
44636: PUSH
44637: LD_INT 54
44639: PUSH
44640: LD_INT 55
44642: PUSH
44643: LD_INT 56
44645: PUSH
44646: LD_INT 57
44648: PUSH
44649: LD_INT 58
44651: PUSH
44652: LD_INT 59
44654: PUSH
44655: LD_INT 60
44657: PUSH
44658: LD_INT 61
44660: PUSH
44661: LD_INT 62
44663: PUSH
44664: LD_INT 80
44666: PUSH
44667: LD_INT 82
44669: PUSH
44670: LD_INT 83
44672: PUSH
44673: LD_INT 84
44675: PUSH
44676: LD_INT 85
44678: PUSH
44679: LD_INT 86
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: ST_TO_ADDR
44735: GO 45202
44737: LD_INT 2
44739: DOUBLE
44740: EQUAL
44741: IFTRUE 44745
44743: GO 44971
44745: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
44746: LD_ADDR_VAR 0 4
44750: PUSH
44751: LD_INT 35
44753: PUSH
44754: LD_INT 45
44756: PUSH
44757: LD_INT 46
44759: PUSH
44760: LD_INT 47
44762: PUSH
44763: LD_INT 82
44765: PUSH
44766: LD_INT 83
44768: PUSH
44769: LD_INT 84
44771: PUSH
44772: LD_INT 85
44774: PUSH
44775: LD_INT 87
44777: PUSH
44778: LD_INT 70
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: LD_INT 11
44786: PUSH
44787: LD_INT 3
44789: PUSH
44790: LD_INT 4
44792: PUSH
44793: LD_INT 5
44795: PUSH
44796: LD_INT 6
44798: PUSH
44799: LD_INT 15
44801: PUSH
44802: LD_INT 18
44804: PUSH
44805: LD_INT 7
44807: PUSH
44808: LD_INT 17
44810: PUSH
44811: LD_INT 8
44813: PUSH
44814: LD_INT 20
44816: PUSH
44817: LD_INT 21
44819: PUSH
44820: LD_INT 22
44822: PUSH
44823: LD_INT 72
44825: PUSH
44826: LD_INT 26
44828: PUSH
44829: LD_INT 69
44831: PUSH
44832: LD_INT 39
44834: PUSH
44835: LD_INT 40
44837: PUSH
44838: LD_INT 41
44840: PUSH
44841: LD_INT 42
44843: PUSH
44844: LD_INT 43
44846: PUSH
44847: LD_INT 48
44849: PUSH
44850: LD_INT 49
44852: PUSH
44853: LD_INT 50
44855: PUSH
44856: LD_INT 51
44858: PUSH
44859: LD_INT 52
44861: PUSH
44862: LD_INT 53
44864: PUSH
44865: LD_INT 54
44867: PUSH
44868: LD_INT 55
44870: PUSH
44871: LD_INT 56
44873: PUSH
44874: LD_INT 60
44876: PUSH
44877: LD_INT 61
44879: PUSH
44880: LD_INT 62
44882: PUSH
44883: LD_INT 66
44885: PUSH
44886: LD_INT 67
44888: PUSH
44889: LD_INT 68
44891: PUSH
44892: LD_INT 81
44894: PUSH
44895: LD_INT 82
44897: PUSH
44898: LD_INT 83
44900: PUSH
44901: LD_INT 84
44903: PUSH
44904: LD_INT 85
44906: PUSH
44907: LD_INT 87
44909: PUSH
44910: LD_INT 88
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: ST_TO_ADDR
44969: GO 45202
44971: LD_INT 3
44973: DOUBLE
44974: EQUAL
44975: IFTRUE 44979
44977: GO 45201
44979: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44980: LD_ADDR_VAR 0 4
44984: PUSH
44985: LD_INT 46
44987: PUSH
44988: LD_INT 47
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: LD_INT 82
44999: PUSH
45000: LD_INT 83
45002: PUSH
45003: LD_INT 84
45005: PUSH
45006: LD_INT 85
45008: PUSH
45009: LD_INT 86
45011: PUSH
45012: LD_INT 11
45014: PUSH
45015: LD_INT 9
45017: PUSH
45018: LD_INT 20
45020: PUSH
45021: LD_INT 19
45023: PUSH
45024: LD_INT 21
45026: PUSH
45027: LD_INT 24
45029: PUSH
45030: LD_INT 22
45032: PUSH
45033: LD_INT 25
45035: PUSH
45036: LD_INT 28
45038: PUSH
45039: LD_INT 29
45041: PUSH
45042: LD_INT 30
45044: PUSH
45045: LD_INT 31
45047: PUSH
45048: LD_INT 37
45050: PUSH
45051: LD_INT 38
45053: PUSH
45054: LD_INT 32
45056: PUSH
45057: LD_INT 27
45059: PUSH
45060: LD_INT 33
45062: PUSH
45063: LD_INT 69
45065: PUSH
45066: LD_INT 39
45068: PUSH
45069: LD_INT 34
45071: PUSH
45072: LD_INT 40
45074: PUSH
45075: LD_INT 71
45077: PUSH
45078: LD_INT 23
45080: PUSH
45081: LD_INT 44
45083: PUSH
45084: LD_INT 48
45086: PUSH
45087: LD_INT 49
45089: PUSH
45090: LD_INT 50
45092: PUSH
45093: LD_INT 51
45095: PUSH
45096: LD_INT 52
45098: PUSH
45099: LD_INT 53
45101: PUSH
45102: LD_INT 54
45104: PUSH
45105: LD_INT 55
45107: PUSH
45108: LD_INT 56
45110: PUSH
45111: LD_INT 57
45113: PUSH
45114: LD_INT 58
45116: PUSH
45117: LD_INT 59
45119: PUSH
45120: LD_INT 63
45122: PUSH
45123: LD_INT 64
45125: PUSH
45126: LD_INT 65
45128: PUSH
45129: LD_INT 82
45131: PUSH
45132: LD_INT 83
45134: PUSH
45135: LD_INT 84
45137: PUSH
45138: LD_INT 85
45140: PUSH
45141: LD_INT 86
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: ST_TO_ADDR
45199: GO 45202
45201: POP
// if state > - 1 and state < 3 then
45202: LD_VAR 0 3
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: GREATER
45211: PUSH
45212: LD_VAR 0 3
45216: PUSH
45217: LD_INT 3
45219: LESS
45220: AND
45221: IFFALSE 45278
// for i in result do
45223: LD_ADDR_VAR 0 5
45227: PUSH
45228: LD_VAR 0 4
45232: PUSH
45233: FOR_IN
45234: IFFALSE 45276
// if GetTech ( i , side ) <> state then
45236: LD_VAR 0 5
45240: PPUSH
45241: LD_VAR 0 1
45245: PPUSH
45246: CALL_OW 321
45250: PUSH
45251: LD_VAR 0 3
45255: NONEQUAL
45256: IFFALSE 45274
// result := result diff i ;
45258: LD_ADDR_VAR 0 4
45262: PUSH
45263: LD_VAR 0 4
45267: PUSH
45268: LD_VAR 0 5
45272: DIFF
45273: ST_TO_ADDR
45274: GO 45233
45276: POP
45277: POP
// end ;
45278: LD_VAR 0 4
45282: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45283: LD_INT 0
45285: PPUSH
45286: PPUSH
45287: PPUSH
// result := true ;
45288: LD_ADDR_VAR 0 3
45292: PUSH
45293: LD_INT 1
45295: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45296: LD_ADDR_VAR 0 5
45300: PUSH
45301: LD_VAR 0 2
45305: PPUSH
45306: CALL_OW 480
45310: ST_TO_ADDR
// if not tmp then
45311: LD_VAR 0 5
45315: NOT
45316: IFFALSE 45320
// exit ;
45318: GO 45369
// for i in tmp do
45320: LD_ADDR_VAR 0 4
45324: PUSH
45325: LD_VAR 0 5
45329: PUSH
45330: FOR_IN
45331: IFFALSE 45367
// if GetTech ( i , side ) <> state_researched then
45333: LD_VAR 0 4
45337: PPUSH
45338: LD_VAR 0 1
45342: PPUSH
45343: CALL_OW 321
45347: PUSH
45348: LD_INT 2
45350: NONEQUAL
45351: IFFALSE 45365
// begin result := false ;
45353: LD_ADDR_VAR 0 3
45357: PUSH
45358: LD_INT 0
45360: ST_TO_ADDR
// exit ;
45361: POP
45362: POP
45363: GO 45369
// end ;
45365: GO 45330
45367: POP
45368: POP
// end ;
45369: LD_VAR 0 3
45373: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45374: LD_INT 0
45376: PPUSH
45377: PPUSH
45378: PPUSH
45379: PPUSH
45380: PPUSH
45381: PPUSH
45382: PPUSH
45383: PPUSH
45384: PPUSH
45385: PPUSH
45386: PPUSH
45387: PPUSH
45388: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45389: LD_VAR 0 1
45393: NOT
45394: PUSH
45395: LD_VAR 0 1
45399: PPUSH
45400: CALL_OW 257
45404: PUSH
45405: LD_INT 9
45407: NONEQUAL
45408: OR
45409: IFFALSE 45413
// exit ;
45411: GO 45986
// side := GetSide ( unit ) ;
45413: LD_ADDR_VAR 0 9
45417: PUSH
45418: LD_VAR 0 1
45422: PPUSH
45423: CALL_OW 255
45427: ST_TO_ADDR
// tech_space := tech_spacanom ;
45428: LD_ADDR_VAR 0 12
45432: PUSH
45433: LD_INT 29
45435: ST_TO_ADDR
// tech_time := tech_taurad ;
45436: LD_ADDR_VAR 0 13
45440: PUSH
45441: LD_INT 28
45443: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45444: LD_ADDR_VAR 0 11
45448: PUSH
45449: LD_VAR 0 1
45453: PPUSH
45454: CALL_OW 310
45458: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45459: LD_VAR 0 11
45463: PPUSH
45464: CALL_OW 247
45468: PUSH
45469: LD_INT 2
45471: EQUAL
45472: IFFALSE 45476
// exit ;
45474: GO 45986
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45476: LD_ADDR_VAR 0 8
45480: PUSH
45481: LD_INT 81
45483: PUSH
45484: LD_VAR 0 9
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 3
45495: PUSH
45496: LD_INT 21
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PPUSH
45514: CALL_OW 69
45518: ST_TO_ADDR
// if not tmp then
45519: LD_VAR 0 8
45523: NOT
45524: IFFALSE 45528
// exit ;
45526: GO 45986
// if in_unit then
45528: LD_VAR 0 11
45532: IFFALSE 45556
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45534: LD_ADDR_VAR 0 10
45538: PUSH
45539: LD_VAR 0 8
45543: PPUSH
45544: LD_VAR 0 11
45548: PPUSH
45549: CALL_OW 74
45553: ST_TO_ADDR
45554: GO 45576
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45556: LD_ADDR_VAR 0 10
45560: PUSH
45561: LD_VAR 0 8
45565: PPUSH
45566: LD_VAR 0 1
45570: PPUSH
45571: CALL_OW 74
45575: ST_TO_ADDR
// if not enemy then
45576: LD_VAR 0 10
45580: NOT
45581: IFFALSE 45585
// exit ;
45583: GO 45986
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45585: LD_VAR 0 11
45589: PUSH
45590: LD_VAR 0 11
45594: PPUSH
45595: LD_VAR 0 10
45599: PPUSH
45600: CALL_OW 296
45604: PUSH
45605: LD_INT 13
45607: GREATER
45608: AND
45609: PUSH
45610: LD_VAR 0 1
45614: PPUSH
45615: LD_VAR 0 10
45619: PPUSH
45620: CALL_OW 296
45624: PUSH
45625: LD_INT 12
45627: GREATER
45628: OR
45629: IFFALSE 45633
// exit ;
45631: GO 45986
// missile := [ 1 ] ;
45633: LD_ADDR_VAR 0 14
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45644: LD_VAR 0 9
45648: PPUSH
45649: LD_VAR 0 12
45653: PPUSH
45654: CALL_OW 325
45658: IFFALSE 45687
// missile := Insert ( missile , missile + 1 , 2 ) ;
45660: LD_ADDR_VAR 0 14
45664: PUSH
45665: LD_VAR 0 14
45669: PPUSH
45670: LD_VAR 0 14
45674: PUSH
45675: LD_INT 1
45677: PLUS
45678: PPUSH
45679: LD_INT 2
45681: PPUSH
45682: CALL_OW 2
45686: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45687: LD_VAR 0 9
45691: PPUSH
45692: LD_VAR 0 13
45696: PPUSH
45697: CALL_OW 325
45701: PUSH
45702: LD_VAR 0 10
45706: PPUSH
45707: CALL_OW 255
45711: PPUSH
45712: LD_VAR 0 13
45716: PPUSH
45717: CALL_OW 325
45721: NOT
45722: AND
45723: IFFALSE 45752
// missile := Insert ( missile , missile + 1 , 3 ) ;
45725: LD_ADDR_VAR 0 14
45729: PUSH
45730: LD_VAR 0 14
45734: PPUSH
45735: LD_VAR 0 14
45739: PUSH
45740: LD_INT 1
45742: PLUS
45743: PPUSH
45744: LD_INT 3
45746: PPUSH
45747: CALL_OW 2
45751: ST_TO_ADDR
// if missile < 2 then
45752: LD_VAR 0 14
45756: PUSH
45757: LD_INT 2
45759: LESS
45760: IFFALSE 45764
// exit ;
45762: GO 45986
// x := GetX ( enemy ) ;
45764: LD_ADDR_VAR 0 4
45768: PUSH
45769: LD_VAR 0 10
45773: PPUSH
45774: CALL_OW 250
45778: ST_TO_ADDR
// y := GetY ( enemy ) ;
45779: LD_ADDR_VAR 0 5
45783: PUSH
45784: LD_VAR 0 10
45788: PPUSH
45789: CALL_OW 251
45793: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45794: LD_ADDR_VAR 0 6
45798: PUSH
45799: LD_VAR 0 4
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PPUSH
45808: LD_INT 1
45810: PPUSH
45811: CALL_OW 12
45815: PLUS
45816: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45817: LD_ADDR_VAR 0 7
45821: PUSH
45822: LD_VAR 0 5
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PPUSH
45831: LD_INT 1
45833: PPUSH
45834: CALL_OW 12
45838: PLUS
45839: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45840: LD_VAR 0 6
45844: PPUSH
45845: LD_VAR 0 7
45849: PPUSH
45850: CALL_OW 488
45854: NOT
45855: IFFALSE 45877
// begin _x := x ;
45857: LD_ADDR_VAR 0 6
45861: PUSH
45862: LD_VAR 0 4
45866: ST_TO_ADDR
// _y := y ;
45867: LD_ADDR_VAR 0 7
45871: PUSH
45872: LD_VAR 0 5
45876: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45877: LD_ADDR_VAR 0 3
45881: PUSH
45882: LD_INT 1
45884: PPUSH
45885: LD_VAR 0 14
45889: PPUSH
45890: CALL_OW 12
45894: ST_TO_ADDR
// case i of 1 :
45895: LD_VAR 0 3
45899: PUSH
45900: LD_INT 1
45902: DOUBLE
45903: EQUAL
45904: IFTRUE 45908
45906: GO 45925
45908: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45909: LD_VAR 0 1
45913: PPUSH
45914: LD_VAR 0 10
45918: PPUSH
45919: CALL_OW 115
45923: GO 45986
45925: LD_INT 2
45927: DOUBLE
45928: EQUAL
45929: IFTRUE 45933
45931: GO 45955
45933: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45934: LD_VAR 0 1
45938: PPUSH
45939: LD_VAR 0 6
45943: PPUSH
45944: LD_VAR 0 7
45948: PPUSH
45949: CALL_OW 153
45953: GO 45986
45955: LD_INT 3
45957: DOUBLE
45958: EQUAL
45959: IFTRUE 45963
45961: GO 45985
45963: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45964: LD_VAR 0 1
45968: PPUSH
45969: LD_VAR 0 6
45973: PPUSH
45974: LD_VAR 0 7
45978: PPUSH
45979: CALL_OW 154
45983: GO 45986
45985: POP
// end ;
45986: LD_VAR 0 2
45990: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45991: LD_INT 0
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
// if not unit or not building then
45999: LD_VAR 0 1
46003: NOT
46004: PUSH
46005: LD_VAR 0 2
46009: NOT
46010: OR
46011: IFFALSE 46015
// exit ;
46013: GO 46173
// x := GetX ( building ) ;
46015: LD_ADDR_VAR 0 5
46019: PUSH
46020: LD_VAR 0 2
46024: PPUSH
46025: CALL_OW 250
46029: ST_TO_ADDR
// y := GetY ( building ) ;
46030: LD_ADDR_VAR 0 6
46034: PUSH
46035: LD_VAR 0 2
46039: PPUSH
46040: CALL_OW 251
46044: ST_TO_ADDR
// for i = 0 to 5 do
46045: LD_ADDR_VAR 0 4
46049: PUSH
46050: DOUBLE
46051: LD_INT 0
46053: DEC
46054: ST_TO_ADDR
46055: LD_INT 5
46057: PUSH
46058: FOR_TO
46059: IFFALSE 46171
// begin _x := ShiftX ( x , i , 3 ) ;
46061: LD_ADDR_VAR 0 7
46065: PUSH
46066: LD_VAR 0 5
46070: PPUSH
46071: LD_VAR 0 4
46075: PPUSH
46076: LD_INT 3
46078: PPUSH
46079: CALL_OW 272
46083: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
46084: LD_ADDR_VAR 0 8
46088: PUSH
46089: LD_VAR 0 6
46093: PPUSH
46094: LD_VAR 0 4
46098: PPUSH
46099: LD_INT 3
46101: PPUSH
46102: CALL_OW 273
46106: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46107: LD_VAR 0 7
46111: PPUSH
46112: LD_VAR 0 8
46116: PPUSH
46117: CALL_OW 488
46121: NOT
46122: IFFALSE 46126
// continue ;
46124: GO 46058
// if HexInfo ( _x , _y ) = 0 then
46126: LD_VAR 0 7
46130: PPUSH
46131: LD_VAR 0 8
46135: PPUSH
46136: CALL_OW 428
46140: PUSH
46141: LD_INT 0
46143: EQUAL
46144: IFFALSE 46169
// begin ComMoveXY ( unit , _x , _y ) ;
46146: LD_VAR 0 1
46150: PPUSH
46151: LD_VAR 0 7
46155: PPUSH
46156: LD_VAR 0 8
46160: PPUSH
46161: CALL_OW 111
// exit ;
46165: POP
46166: POP
46167: GO 46173
// end ; end ;
46169: GO 46058
46171: POP
46172: POP
// end ;
46173: LD_VAR 0 3
46177: RET
// export function ScanBase ( side , base_area ) ; begin
46178: LD_INT 0
46180: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46181: LD_ADDR_VAR 0 3
46185: PUSH
46186: LD_VAR 0 2
46190: PPUSH
46191: LD_INT 81
46193: PUSH
46194: LD_VAR 0 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PPUSH
46203: CALL_OW 70
46207: ST_TO_ADDR
// end ;
46208: LD_VAR 0 3
46212: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
46213: LD_INT 0
46215: PPUSH
46216: PPUSH
46217: PPUSH
46218: PPUSH
// result := false ;
46219: LD_ADDR_VAR 0 2
46223: PUSH
46224: LD_INT 0
46226: ST_TO_ADDR
// side := GetSide ( unit ) ;
46227: LD_ADDR_VAR 0 3
46231: PUSH
46232: LD_VAR 0 1
46236: PPUSH
46237: CALL_OW 255
46241: ST_TO_ADDR
// nat := GetNation ( unit ) ;
46242: LD_ADDR_VAR 0 4
46246: PUSH
46247: LD_VAR 0 1
46251: PPUSH
46252: CALL_OW 248
46256: ST_TO_ADDR
// case nat of 1 :
46257: LD_VAR 0 4
46261: PUSH
46262: LD_INT 1
46264: DOUBLE
46265: EQUAL
46266: IFTRUE 46270
46268: GO 46281
46270: POP
// tech := tech_lassight ; 2 :
46271: LD_ADDR_VAR 0 5
46275: PUSH
46276: LD_INT 12
46278: ST_TO_ADDR
46279: GO 46320
46281: LD_INT 2
46283: DOUBLE
46284: EQUAL
46285: IFTRUE 46289
46287: GO 46300
46289: POP
// tech := tech_mortar ; 3 :
46290: LD_ADDR_VAR 0 5
46294: PUSH
46295: LD_INT 41
46297: ST_TO_ADDR
46298: GO 46320
46300: LD_INT 3
46302: DOUBLE
46303: EQUAL
46304: IFTRUE 46308
46306: GO 46319
46308: POP
// tech := tech_bazooka ; end ;
46309: LD_ADDR_VAR 0 5
46313: PUSH
46314: LD_INT 44
46316: ST_TO_ADDR
46317: GO 46320
46319: POP
// if Researched ( side , tech ) then
46320: LD_VAR 0 3
46324: PPUSH
46325: LD_VAR 0 5
46329: PPUSH
46330: CALL_OW 325
46334: IFFALSE 46361
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46336: LD_ADDR_VAR 0 2
46340: PUSH
46341: LD_INT 5
46343: PUSH
46344: LD_INT 8
46346: PUSH
46347: LD_INT 9
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: LIST
46354: PUSH
46355: LD_VAR 0 4
46359: ARRAY
46360: ST_TO_ADDR
// end ;
46361: LD_VAR 0 2
46365: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46366: LD_INT 0
46368: PPUSH
46369: PPUSH
46370: PPUSH
// if not mines then
46371: LD_VAR 0 2
46375: NOT
46376: IFFALSE 46380
// exit ;
46378: GO 46524
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46380: LD_ADDR_VAR 0 5
46384: PUSH
46385: LD_INT 81
46387: PUSH
46388: LD_VAR 0 1
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 3
46399: PUSH
46400: LD_INT 21
46402: PUSH
46403: LD_INT 3
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PPUSH
46418: CALL_OW 69
46422: ST_TO_ADDR
// for i in mines do
46423: LD_ADDR_VAR 0 4
46427: PUSH
46428: LD_VAR 0 2
46432: PUSH
46433: FOR_IN
46434: IFFALSE 46522
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46436: LD_VAR 0 4
46440: PUSH
46441: LD_INT 1
46443: ARRAY
46444: PPUSH
46445: LD_VAR 0 4
46449: PUSH
46450: LD_INT 2
46452: ARRAY
46453: PPUSH
46454: CALL_OW 458
46458: NOT
46459: IFFALSE 46463
// continue ;
46461: GO 46433
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46463: LD_VAR 0 4
46467: PUSH
46468: LD_INT 1
46470: ARRAY
46471: PPUSH
46472: LD_VAR 0 4
46476: PUSH
46477: LD_INT 2
46479: ARRAY
46480: PPUSH
46481: CALL_OW 428
46485: PUSH
46486: LD_VAR 0 5
46490: IN
46491: IFFALSE 46520
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46493: LD_VAR 0 4
46497: PUSH
46498: LD_INT 1
46500: ARRAY
46501: PPUSH
46502: LD_VAR 0 4
46506: PUSH
46507: LD_INT 2
46509: ARRAY
46510: PPUSH
46511: LD_VAR 0 1
46515: PPUSH
46516: CALL_OW 456
// end ;
46520: GO 46433
46522: POP
46523: POP
// end ;
46524: LD_VAR 0 3
46528: RET
// export function Count ( array ) ; var i ; begin
46529: LD_INT 0
46531: PPUSH
46532: PPUSH
// result := 0 ;
46533: LD_ADDR_VAR 0 2
46537: PUSH
46538: LD_INT 0
46540: ST_TO_ADDR
// for i in array do
46541: LD_ADDR_VAR 0 3
46545: PUSH
46546: LD_VAR 0 1
46550: PUSH
46551: FOR_IN
46552: IFFALSE 46576
// if i then
46554: LD_VAR 0 3
46558: IFFALSE 46574
// result := result + 1 ;
46560: LD_ADDR_VAR 0 2
46564: PUSH
46565: LD_VAR 0 2
46569: PUSH
46570: LD_INT 1
46572: PLUS
46573: ST_TO_ADDR
46574: GO 46551
46576: POP
46577: POP
// end ;
46578: LD_VAR 0 2
46582: RET
// export function IsEmpty ( building ) ; begin
46583: LD_INT 0
46585: PPUSH
// if not building then
46586: LD_VAR 0 1
46590: NOT
46591: IFFALSE 46595
// exit ;
46593: GO 46638
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46595: LD_ADDR_VAR 0 2
46599: PUSH
46600: LD_VAR 0 1
46604: PUSH
46605: LD_INT 22
46607: PUSH
46608: LD_VAR 0 1
46612: PPUSH
46613: CALL_OW 255
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 58
46624: PUSH
46625: EMPTY
46626: LIST
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PPUSH
46632: CALL_OW 69
46636: IN
46637: ST_TO_ADDR
// end ;
46638: LD_VAR 0 2
46642: RET
// export function IsNotFull ( building ) ; begin
46643: LD_INT 0
46645: PPUSH
// if not building then
46646: LD_VAR 0 1
46650: NOT
46651: IFFALSE 46655
// exit ;
46653: GO 46674
// result := UnitsInside ( building ) < 6 ;
46655: LD_ADDR_VAR 0 2
46659: PUSH
46660: LD_VAR 0 1
46664: PPUSH
46665: CALL_OW 313
46669: PUSH
46670: LD_INT 6
46672: LESS
46673: ST_TO_ADDR
// end ;
46674: LD_VAR 0 2
46678: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46679: LD_INT 0
46681: PPUSH
46682: PPUSH
46683: PPUSH
46684: PPUSH
// tmp := [ ] ;
46685: LD_ADDR_VAR 0 3
46689: PUSH
46690: EMPTY
46691: ST_TO_ADDR
// list := [ ] ;
46692: LD_ADDR_VAR 0 5
46696: PUSH
46697: EMPTY
46698: ST_TO_ADDR
// for i = 16 to 25 do
46699: LD_ADDR_VAR 0 4
46703: PUSH
46704: DOUBLE
46705: LD_INT 16
46707: DEC
46708: ST_TO_ADDR
46709: LD_INT 25
46711: PUSH
46712: FOR_TO
46713: IFFALSE 46786
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46715: LD_ADDR_VAR 0 3
46719: PUSH
46720: LD_VAR 0 3
46724: PUSH
46725: LD_INT 22
46727: PUSH
46728: LD_VAR 0 1
46732: PPUSH
46733: CALL_OW 255
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 91
46744: PUSH
46745: LD_VAR 0 1
46749: PUSH
46750: LD_INT 6
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 30
46760: PUSH
46761: LD_VAR 0 4
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: LIST
46774: PUSH
46775: EMPTY
46776: LIST
46777: PPUSH
46778: CALL_OW 69
46782: ADD
46783: ST_TO_ADDR
46784: GO 46712
46786: POP
46787: POP
// for i = 1 to tmp do
46788: LD_ADDR_VAR 0 4
46792: PUSH
46793: DOUBLE
46794: LD_INT 1
46796: DEC
46797: ST_TO_ADDR
46798: LD_VAR 0 3
46802: PUSH
46803: FOR_TO
46804: IFFALSE 46892
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46806: LD_ADDR_VAR 0 5
46810: PUSH
46811: LD_VAR 0 5
46815: PUSH
46816: LD_VAR 0 3
46820: PUSH
46821: LD_VAR 0 4
46825: ARRAY
46826: PPUSH
46827: CALL_OW 266
46831: PUSH
46832: LD_VAR 0 3
46836: PUSH
46837: LD_VAR 0 4
46841: ARRAY
46842: PPUSH
46843: CALL_OW 250
46847: PUSH
46848: LD_VAR 0 3
46852: PUSH
46853: LD_VAR 0 4
46857: ARRAY
46858: PPUSH
46859: CALL_OW 251
46863: PUSH
46864: LD_VAR 0 3
46868: PUSH
46869: LD_VAR 0 4
46873: ARRAY
46874: PPUSH
46875: CALL_OW 254
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: ADD
46889: ST_TO_ADDR
46890: GO 46803
46892: POP
46893: POP
// result := list ;
46894: LD_ADDR_VAR 0 2
46898: PUSH
46899: LD_VAR 0 5
46903: ST_TO_ADDR
// end ;
46904: LD_VAR 0 2
46908: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46909: LD_INT 0
46911: PPUSH
46912: PPUSH
46913: PPUSH
46914: PPUSH
46915: PPUSH
46916: PPUSH
46917: PPUSH
// if not factory then
46918: LD_VAR 0 1
46922: NOT
46923: IFFALSE 46927
// exit ;
46925: GO 47520
// if control = control_apeman then
46927: LD_VAR 0 4
46931: PUSH
46932: LD_INT 5
46934: EQUAL
46935: IFFALSE 47044
// begin tmp := UnitsInside ( factory ) ;
46937: LD_ADDR_VAR 0 8
46941: PUSH
46942: LD_VAR 0 1
46946: PPUSH
46947: CALL_OW 313
46951: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46952: LD_VAR 0 8
46956: PPUSH
46957: LD_INT 25
46959: PUSH
46960: LD_INT 12
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PPUSH
46967: CALL_OW 72
46971: NOT
46972: IFFALSE 46982
// control := control_manual ;
46974: LD_ADDR_VAR 0 4
46978: PUSH
46979: LD_INT 1
46981: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46982: LD_ADDR_VAR 0 8
46986: PUSH
46987: LD_VAR 0 1
46991: PPUSH
46992: CALL 46679 0 1
46996: ST_TO_ADDR
// if tmp then
46997: LD_VAR 0 8
47001: IFFALSE 47044
// begin for i in tmp do
47003: LD_ADDR_VAR 0 7
47007: PUSH
47008: LD_VAR 0 8
47012: PUSH
47013: FOR_IN
47014: IFFALSE 47042
// if i [ 1 ] = b_ext_radio then
47016: LD_VAR 0 7
47020: PUSH
47021: LD_INT 1
47023: ARRAY
47024: PUSH
47025: LD_INT 22
47027: EQUAL
47028: IFFALSE 47040
// begin control := control_remote ;
47030: LD_ADDR_VAR 0 4
47034: PUSH
47035: LD_INT 2
47037: ST_TO_ADDR
// break ;
47038: GO 47042
// end ;
47040: GO 47013
47042: POP
47043: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47044: LD_VAR 0 1
47048: PPUSH
47049: LD_VAR 0 2
47053: PPUSH
47054: LD_VAR 0 3
47058: PPUSH
47059: LD_VAR 0 4
47063: PPUSH
47064: LD_VAR 0 5
47068: PPUSH
47069: CALL_OW 448
47073: IFFALSE 47108
// begin result := [ chassis , engine , control , weapon ] ;
47075: LD_ADDR_VAR 0 6
47079: PUSH
47080: LD_VAR 0 2
47084: PUSH
47085: LD_VAR 0 3
47089: PUSH
47090: LD_VAR 0 4
47094: PUSH
47095: LD_VAR 0 5
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// exit ;
47106: GO 47520
// end ; _chassis := AvailableChassisList ( factory ) ;
47108: LD_ADDR_VAR 0 9
47112: PUSH
47113: LD_VAR 0 1
47117: PPUSH
47118: CALL_OW 475
47122: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
47123: LD_ADDR_VAR 0 11
47127: PUSH
47128: LD_VAR 0 1
47132: PPUSH
47133: CALL_OW 476
47137: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
47138: LD_ADDR_VAR 0 12
47142: PUSH
47143: LD_VAR 0 1
47147: PPUSH
47148: CALL_OW 477
47152: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47153: LD_ADDR_VAR 0 10
47157: PUSH
47158: LD_VAR 0 1
47162: PPUSH
47163: CALL_OW 478
47167: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47168: LD_VAR 0 9
47172: NOT
47173: PUSH
47174: LD_VAR 0 11
47178: NOT
47179: OR
47180: PUSH
47181: LD_VAR 0 12
47185: NOT
47186: OR
47187: PUSH
47188: LD_VAR 0 10
47192: NOT
47193: OR
47194: IFFALSE 47229
// begin result := [ chassis , engine , control , weapon ] ;
47196: LD_ADDR_VAR 0 6
47200: PUSH
47201: LD_VAR 0 2
47205: PUSH
47206: LD_VAR 0 3
47210: PUSH
47211: LD_VAR 0 4
47215: PUSH
47216: LD_VAR 0 5
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: ST_TO_ADDR
// exit ;
47227: GO 47520
// end ; if not chassis in _chassis then
47229: LD_VAR 0 2
47233: PUSH
47234: LD_VAR 0 9
47238: IN
47239: NOT
47240: IFFALSE 47266
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47242: LD_ADDR_VAR 0 2
47246: PUSH
47247: LD_VAR 0 9
47251: PUSH
47252: LD_INT 1
47254: PPUSH
47255: LD_VAR 0 9
47259: PPUSH
47260: CALL_OW 12
47264: ARRAY
47265: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47266: LD_VAR 0 2
47270: PPUSH
47271: LD_VAR 0 3
47275: PPUSH
47276: CALL 47525 0 2
47280: NOT
47281: IFFALSE 47340
// repeat engine := _engine [ 1 ] ;
47283: LD_ADDR_VAR 0 3
47287: PUSH
47288: LD_VAR 0 11
47292: PUSH
47293: LD_INT 1
47295: ARRAY
47296: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47297: LD_ADDR_VAR 0 11
47301: PUSH
47302: LD_VAR 0 11
47306: PPUSH
47307: LD_INT 1
47309: PPUSH
47310: CALL_OW 3
47314: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47315: LD_VAR 0 2
47319: PPUSH
47320: LD_VAR 0 3
47324: PPUSH
47325: CALL 47525 0 2
47329: PUSH
47330: LD_VAR 0 11
47334: PUSH
47335: EMPTY
47336: EQUAL
47337: OR
47338: IFFALSE 47283
// if not control in _control then
47340: LD_VAR 0 4
47344: PUSH
47345: LD_VAR 0 12
47349: IN
47350: NOT
47351: IFFALSE 47377
// control := _control [ rand ( 1 , _control ) ] ;
47353: LD_ADDR_VAR 0 4
47357: PUSH
47358: LD_VAR 0 12
47362: PUSH
47363: LD_INT 1
47365: PPUSH
47366: LD_VAR 0 12
47370: PPUSH
47371: CALL_OW 12
47375: ARRAY
47376: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47377: LD_VAR 0 2
47381: PPUSH
47382: LD_VAR 0 5
47386: PPUSH
47387: CALL 47745 0 2
47391: NOT
47392: IFFALSE 47451
// repeat weapon := _weapon [ 1 ] ;
47394: LD_ADDR_VAR 0 5
47398: PUSH
47399: LD_VAR 0 10
47403: PUSH
47404: LD_INT 1
47406: ARRAY
47407: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47408: LD_ADDR_VAR 0 10
47412: PUSH
47413: LD_VAR 0 10
47417: PPUSH
47418: LD_INT 1
47420: PPUSH
47421: CALL_OW 3
47425: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47426: LD_VAR 0 2
47430: PPUSH
47431: LD_VAR 0 5
47435: PPUSH
47436: CALL 47745 0 2
47440: PUSH
47441: LD_VAR 0 10
47445: PUSH
47446: EMPTY
47447: EQUAL
47448: OR
47449: IFFALSE 47394
// result := [ ] ;
47451: LD_ADDR_VAR 0 6
47455: PUSH
47456: EMPTY
47457: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47458: LD_VAR 0 1
47462: PPUSH
47463: LD_VAR 0 2
47467: PPUSH
47468: LD_VAR 0 3
47472: PPUSH
47473: LD_VAR 0 4
47477: PPUSH
47478: LD_VAR 0 5
47482: PPUSH
47483: CALL_OW 448
47487: IFFALSE 47520
// result := [ chassis , engine , control , weapon ] ;
47489: LD_ADDR_VAR 0 6
47493: PUSH
47494: LD_VAR 0 2
47498: PUSH
47499: LD_VAR 0 3
47503: PUSH
47504: LD_VAR 0 4
47508: PUSH
47509: LD_VAR 0 5
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: ST_TO_ADDR
// end ;
47520: LD_VAR 0 6
47524: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47525: LD_INT 0
47527: PPUSH
// if not chassis or not engine then
47528: LD_VAR 0 1
47532: NOT
47533: PUSH
47534: LD_VAR 0 2
47538: NOT
47539: OR
47540: IFFALSE 47544
// exit ;
47542: GO 47740
// case engine of engine_solar :
47544: LD_VAR 0 2
47548: PUSH
47549: LD_INT 2
47551: DOUBLE
47552: EQUAL
47553: IFTRUE 47557
47555: GO 47595
47557: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47558: LD_ADDR_VAR 0 3
47562: PUSH
47563: LD_INT 11
47565: PUSH
47566: LD_INT 12
47568: PUSH
47569: LD_INT 13
47571: PUSH
47572: LD_INT 14
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: ST_TO_ADDR
47593: GO 47724
47595: LD_INT 1
47597: DOUBLE
47598: EQUAL
47599: IFTRUE 47603
47601: GO 47665
47603: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47604: LD_ADDR_VAR 0 3
47608: PUSH
47609: LD_INT 11
47611: PUSH
47612: LD_INT 12
47614: PUSH
47615: LD_INT 13
47617: PUSH
47618: LD_INT 14
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: LD_INT 4
47632: PUSH
47633: LD_INT 5
47635: PUSH
47636: LD_INT 21
47638: PUSH
47639: LD_INT 23
47641: PUSH
47642: LD_INT 22
47644: PUSH
47645: LD_INT 24
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: ST_TO_ADDR
47663: GO 47724
47665: LD_INT 3
47667: DOUBLE
47668: EQUAL
47669: IFTRUE 47673
47671: GO 47723
47673: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47674: LD_ADDR_VAR 0 3
47678: PUSH
47679: LD_INT 13
47681: PUSH
47682: LD_INT 14
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 3
47690: PUSH
47691: LD_INT 4
47693: PUSH
47694: LD_INT 5
47696: PUSH
47697: LD_INT 21
47699: PUSH
47700: LD_INT 22
47702: PUSH
47703: LD_INT 23
47705: PUSH
47706: LD_INT 24
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: ST_TO_ADDR
47721: GO 47724
47723: POP
// result := ( chassis in result ) ;
47724: LD_ADDR_VAR 0 3
47728: PUSH
47729: LD_VAR 0 1
47733: PUSH
47734: LD_VAR 0 3
47738: IN
47739: ST_TO_ADDR
// end ;
47740: LD_VAR 0 3
47744: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47745: LD_INT 0
47747: PPUSH
// if not chassis or not weapon then
47748: LD_VAR 0 1
47752: NOT
47753: PUSH
47754: LD_VAR 0 2
47758: NOT
47759: OR
47760: IFFALSE 47764
// exit ;
47762: GO 48826
// case weapon of us_machine_gun :
47764: LD_VAR 0 2
47768: PUSH
47769: LD_INT 2
47771: DOUBLE
47772: EQUAL
47773: IFTRUE 47777
47775: GO 47807
47777: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47778: LD_ADDR_VAR 0 3
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 3
47791: PUSH
47792: LD_INT 4
47794: PUSH
47795: LD_INT 5
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: ST_TO_ADDR
47805: GO 48810
47807: LD_INT 3
47809: DOUBLE
47810: EQUAL
47811: IFTRUE 47815
47813: GO 47845
47815: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47816: LD_ADDR_VAR 0 3
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 3
47829: PUSH
47830: LD_INT 4
47832: PUSH
47833: LD_INT 5
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: ST_TO_ADDR
47843: GO 48810
47845: LD_INT 11
47847: DOUBLE
47848: EQUAL
47849: IFTRUE 47853
47851: GO 47883
47853: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47854: LD_ADDR_VAR 0 3
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: LD_INT 4
47870: PUSH
47871: LD_INT 5
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: ST_TO_ADDR
47881: GO 48810
47883: LD_INT 4
47885: DOUBLE
47886: EQUAL
47887: IFTRUE 47891
47889: GO 47917
47891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47892: LD_ADDR_VAR 0 3
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 3
47902: PUSH
47903: LD_INT 4
47905: PUSH
47906: LD_INT 5
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: ST_TO_ADDR
47915: GO 48810
47917: LD_INT 5
47919: DOUBLE
47920: EQUAL
47921: IFTRUE 47925
47923: GO 47951
47925: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47926: LD_ADDR_VAR 0 3
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: LD_INT 3
47936: PUSH
47937: LD_INT 4
47939: PUSH
47940: LD_INT 5
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
47949: GO 48810
47951: LD_INT 9
47953: DOUBLE
47954: EQUAL
47955: IFTRUE 47959
47957: GO 47985
47959: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47960: LD_ADDR_VAR 0 3
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: LD_INT 3
47970: PUSH
47971: LD_INT 4
47973: PUSH
47974: LD_INT 5
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
47983: GO 48810
47985: LD_INT 7
47987: DOUBLE
47988: EQUAL
47989: IFTRUE 47993
47991: GO 48019
47993: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47994: LD_ADDR_VAR 0 3
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: LD_INT 4
48007: PUSH
48008: LD_INT 5
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
48017: GO 48810
48019: LD_INT 12
48021: DOUBLE
48022: EQUAL
48023: IFTRUE 48027
48025: GO 48053
48027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
48028: LD_ADDR_VAR 0 3
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 3
48038: PUSH
48039: LD_INT 4
48041: PUSH
48042: LD_INT 5
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: ST_TO_ADDR
48051: GO 48810
48053: LD_INT 13
48055: DOUBLE
48056: EQUAL
48057: IFTRUE 48061
48059: GO 48087
48061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
48062: LD_ADDR_VAR 0 3
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 3
48072: PUSH
48073: LD_INT 4
48075: PUSH
48076: LD_INT 5
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: ST_TO_ADDR
48085: GO 48810
48087: LD_INT 14
48089: DOUBLE
48090: EQUAL
48091: IFTRUE 48095
48093: GO 48113
48095: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
48096: LD_ADDR_VAR 0 3
48100: PUSH
48101: LD_INT 4
48103: PUSH
48104: LD_INT 5
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: ST_TO_ADDR
48111: GO 48810
48113: LD_INT 6
48115: DOUBLE
48116: EQUAL
48117: IFTRUE 48121
48119: GO 48139
48121: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
48122: LD_ADDR_VAR 0 3
48126: PUSH
48127: LD_INT 4
48129: PUSH
48130: LD_INT 5
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: ST_TO_ADDR
48137: GO 48810
48139: LD_INT 10
48141: DOUBLE
48142: EQUAL
48143: IFTRUE 48147
48145: GO 48165
48147: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
48148: LD_ADDR_VAR 0 3
48152: PUSH
48153: LD_INT 4
48155: PUSH
48156: LD_INT 5
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: ST_TO_ADDR
48163: GO 48810
48165: LD_INT 22
48167: DOUBLE
48168: EQUAL
48169: IFTRUE 48173
48171: GO 48199
48173: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48174: LD_ADDR_VAR 0 3
48178: PUSH
48179: LD_INT 11
48181: PUSH
48182: LD_INT 12
48184: PUSH
48185: LD_INT 13
48187: PUSH
48188: LD_INT 14
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: ST_TO_ADDR
48197: GO 48810
48199: LD_INT 23
48201: DOUBLE
48202: EQUAL
48203: IFTRUE 48207
48205: GO 48233
48207: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48208: LD_ADDR_VAR 0 3
48212: PUSH
48213: LD_INT 11
48215: PUSH
48216: LD_INT 12
48218: PUSH
48219: LD_INT 13
48221: PUSH
48222: LD_INT 14
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: ST_TO_ADDR
48231: GO 48810
48233: LD_INT 24
48235: DOUBLE
48236: EQUAL
48237: IFTRUE 48241
48239: GO 48267
48241: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48242: LD_ADDR_VAR 0 3
48246: PUSH
48247: LD_INT 11
48249: PUSH
48250: LD_INT 12
48252: PUSH
48253: LD_INT 13
48255: PUSH
48256: LD_INT 14
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
48265: GO 48810
48267: LD_INT 30
48269: DOUBLE
48270: EQUAL
48271: IFTRUE 48275
48273: GO 48301
48275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48276: LD_ADDR_VAR 0 3
48280: PUSH
48281: LD_INT 11
48283: PUSH
48284: LD_INT 12
48286: PUSH
48287: LD_INT 13
48289: PUSH
48290: LD_INT 14
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
48299: GO 48810
48301: LD_INT 25
48303: DOUBLE
48304: EQUAL
48305: IFTRUE 48309
48307: GO 48327
48309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48310: LD_ADDR_VAR 0 3
48314: PUSH
48315: LD_INT 13
48317: PUSH
48318: LD_INT 14
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: ST_TO_ADDR
48325: GO 48810
48327: LD_INT 27
48329: DOUBLE
48330: EQUAL
48331: IFTRUE 48335
48333: GO 48353
48335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
48336: LD_ADDR_VAR 0 3
48340: PUSH
48341: LD_INT 13
48343: PUSH
48344: LD_INT 14
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: ST_TO_ADDR
48351: GO 48810
48353: LD_EXP 53
48357: DOUBLE
48358: EQUAL
48359: IFTRUE 48363
48361: GO 48389
48363: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48364: LD_ADDR_VAR 0 3
48368: PUSH
48369: LD_INT 11
48371: PUSH
48372: LD_INT 12
48374: PUSH
48375: LD_INT 13
48377: PUSH
48378: LD_INT 14
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: ST_TO_ADDR
48387: GO 48810
48389: LD_INT 28
48391: DOUBLE
48392: EQUAL
48393: IFTRUE 48397
48395: GO 48415
48397: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48398: LD_ADDR_VAR 0 3
48402: PUSH
48403: LD_INT 13
48405: PUSH
48406: LD_INT 14
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: ST_TO_ADDR
48413: GO 48810
48415: LD_INT 29
48417: DOUBLE
48418: EQUAL
48419: IFTRUE 48423
48421: GO 48441
48423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48424: LD_ADDR_VAR 0 3
48428: PUSH
48429: LD_INT 13
48431: PUSH
48432: LD_INT 14
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: ST_TO_ADDR
48439: GO 48810
48441: LD_INT 31
48443: DOUBLE
48444: EQUAL
48445: IFTRUE 48449
48447: GO 48467
48449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48450: LD_ADDR_VAR 0 3
48454: PUSH
48455: LD_INT 13
48457: PUSH
48458: LD_INT 14
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: ST_TO_ADDR
48465: GO 48810
48467: LD_INT 26
48469: DOUBLE
48470: EQUAL
48471: IFTRUE 48475
48473: GO 48493
48475: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48476: LD_ADDR_VAR 0 3
48480: PUSH
48481: LD_INT 13
48483: PUSH
48484: LD_INT 14
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: ST_TO_ADDR
48491: GO 48810
48493: LD_INT 42
48495: DOUBLE
48496: EQUAL
48497: IFTRUE 48501
48499: GO 48527
48501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48502: LD_ADDR_VAR 0 3
48506: PUSH
48507: LD_INT 21
48509: PUSH
48510: LD_INT 22
48512: PUSH
48513: LD_INT 23
48515: PUSH
48516: LD_INT 24
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: ST_TO_ADDR
48525: GO 48810
48527: LD_INT 43
48529: DOUBLE
48530: EQUAL
48531: IFTRUE 48535
48533: GO 48561
48535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48536: LD_ADDR_VAR 0 3
48540: PUSH
48541: LD_INT 21
48543: PUSH
48544: LD_INT 22
48546: PUSH
48547: LD_INT 23
48549: PUSH
48550: LD_INT 24
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: ST_TO_ADDR
48559: GO 48810
48561: LD_INT 44
48563: DOUBLE
48564: EQUAL
48565: IFTRUE 48569
48567: GO 48595
48569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48570: LD_ADDR_VAR 0 3
48574: PUSH
48575: LD_INT 21
48577: PUSH
48578: LD_INT 22
48580: PUSH
48581: LD_INT 23
48583: PUSH
48584: LD_INT 24
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: ST_TO_ADDR
48593: GO 48810
48595: LD_INT 45
48597: DOUBLE
48598: EQUAL
48599: IFTRUE 48603
48601: GO 48629
48603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48604: LD_ADDR_VAR 0 3
48608: PUSH
48609: LD_INT 21
48611: PUSH
48612: LD_INT 22
48614: PUSH
48615: LD_INT 23
48617: PUSH
48618: LD_INT 24
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: ST_TO_ADDR
48627: GO 48810
48629: LD_INT 49
48631: DOUBLE
48632: EQUAL
48633: IFTRUE 48637
48635: GO 48663
48637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48638: LD_ADDR_VAR 0 3
48642: PUSH
48643: LD_INT 21
48645: PUSH
48646: LD_INT 22
48648: PUSH
48649: LD_INT 23
48651: PUSH
48652: LD_INT 24
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: ST_TO_ADDR
48661: GO 48810
48663: LD_INT 51
48665: DOUBLE
48666: EQUAL
48667: IFTRUE 48671
48669: GO 48697
48671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48672: LD_ADDR_VAR 0 3
48676: PUSH
48677: LD_INT 21
48679: PUSH
48680: LD_INT 22
48682: PUSH
48683: LD_INT 23
48685: PUSH
48686: LD_INT 24
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
48695: GO 48810
48697: LD_INT 52
48699: DOUBLE
48700: EQUAL
48701: IFTRUE 48705
48703: GO 48731
48705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48706: LD_ADDR_VAR 0 3
48710: PUSH
48711: LD_INT 21
48713: PUSH
48714: LD_INT 22
48716: PUSH
48717: LD_INT 23
48719: PUSH
48720: LD_INT 24
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: ST_TO_ADDR
48729: GO 48810
48731: LD_INT 53
48733: DOUBLE
48734: EQUAL
48735: IFTRUE 48739
48737: GO 48757
48739: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48740: LD_ADDR_VAR 0 3
48744: PUSH
48745: LD_INT 23
48747: PUSH
48748: LD_INT 24
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: ST_TO_ADDR
48755: GO 48810
48757: LD_INT 46
48759: DOUBLE
48760: EQUAL
48761: IFTRUE 48765
48763: GO 48783
48765: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48766: LD_ADDR_VAR 0 3
48770: PUSH
48771: LD_INT 23
48773: PUSH
48774: LD_INT 24
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: ST_TO_ADDR
48781: GO 48810
48783: LD_INT 47
48785: DOUBLE
48786: EQUAL
48787: IFTRUE 48791
48789: GO 48809
48791: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48792: LD_ADDR_VAR 0 3
48796: PUSH
48797: LD_INT 23
48799: PUSH
48800: LD_INT 24
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: ST_TO_ADDR
48807: GO 48810
48809: POP
// result := ( chassis in result ) ;
48810: LD_ADDR_VAR 0 3
48814: PUSH
48815: LD_VAR 0 1
48819: PUSH
48820: LD_VAR 0 3
48824: IN
48825: ST_TO_ADDR
// end ;
48826: LD_VAR 0 3
48830: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48831: LD_INT 0
48833: PPUSH
48834: PPUSH
48835: PPUSH
48836: PPUSH
48837: PPUSH
48838: PPUSH
48839: PPUSH
// result := array ;
48840: LD_ADDR_VAR 0 5
48844: PUSH
48845: LD_VAR 0 1
48849: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48850: LD_VAR 0 1
48854: NOT
48855: PUSH
48856: LD_VAR 0 2
48860: NOT
48861: OR
48862: PUSH
48863: LD_VAR 0 3
48867: NOT
48868: OR
48869: PUSH
48870: LD_VAR 0 2
48874: PUSH
48875: LD_VAR 0 1
48879: GREATER
48880: OR
48881: PUSH
48882: LD_VAR 0 3
48886: PUSH
48887: LD_VAR 0 1
48891: GREATER
48892: OR
48893: IFFALSE 48897
// exit ;
48895: GO 49193
// if direction then
48897: LD_VAR 0 4
48901: IFFALSE 48965
// begin d := 1 ;
48903: LD_ADDR_VAR 0 9
48907: PUSH
48908: LD_INT 1
48910: ST_TO_ADDR
// if i_from > i_to then
48911: LD_VAR 0 2
48915: PUSH
48916: LD_VAR 0 3
48920: GREATER
48921: IFFALSE 48947
// length := ( array - i_from ) + i_to else
48923: LD_ADDR_VAR 0 11
48927: PUSH
48928: LD_VAR 0 1
48932: PUSH
48933: LD_VAR 0 2
48937: MINUS
48938: PUSH
48939: LD_VAR 0 3
48943: PLUS
48944: ST_TO_ADDR
48945: GO 48963
// length := i_to - i_from ;
48947: LD_ADDR_VAR 0 11
48951: PUSH
48952: LD_VAR 0 3
48956: PUSH
48957: LD_VAR 0 2
48961: MINUS
48962: ST_TO_ADDR
// end else
48963: GO 49026
// begin d := - 1 ;
48965: LD_ADDR_VAR 0 9
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: ST_TO_ADDR
// if i_from > i_to then
48974: LD_VAR 0 2
48978: PUSH
48979: LD_VAR 0 3
48983: GREATER
48984: IFFALSE 49004
// length := i_from - i_to else
48986: LD_ADDR_VAR 0 11
48990: PUSH
48991: LD_VAR 0 2
48995: PUSH
48996: LD_VAR 0 3
49000: MINUS
49001: ST_TO_ADDR
49002: GO 49026
// length := ( array - i_to ) + i_from ;
49004: LD_ADDR_VAR 0 11
49008: PUSH
49009: LD_VAR 0 1
49013: PUSH
49014: LD_VAR 0 3
49018: MINUS
49019: PUSH
49020: LD_VAR 0 2
49024: PLUS
49025: ST_TO_ADDR
// end ; if not length then
49026: LD_VAR 0 11
49030: NOT
49031: IFFALSE 49035
// exit ;
49033: GO 49193
// tmp := array ;
49035: LD_ADDR_VAR 0 10
49039: PUSH
49040: LD_VAR 0 1
49044: ST_TO_ADDR
// for i = 1 to length do
49045: LD_ADDR_VAR 0 6
49049: PUSH
49050: DOUBLE
49051: LD_INT 1
49053: DEC
49054: ST_TO_ADDR
49055: LD_VAR 0 11
49059: PUSH
49060: FOR_TO
49061: IFFALSE 49181
// begin for j = 1 to array do
49063: LD_ADDR_VAR 0 7
49067: PUSH
49068: DOUBLE
49069: LD_INT 1
49071: DEC
49072: ST_TO_ADDR
49073: LD_VAR 0 1
49077: PUSH
49078: FOR_TO
49079: IFFALSE 49167
// begin k := j + d ;
49081: LD_ADDR_VAR 0 8
49085: PUSH
49086: LD_VAR 0 7
49090: PUSH
49091: LD_VAR 0 9
49095: PLUS
49096: ST_TO_ADDR
// if k > array then
49097: LD_VAR 0 8
49101: PUSH
49102: LD_VAR 0 1
49106: GREATER
49107: IFFALSE 49117
// k := 1 ;
49109: LD_ADDR_VAR 0 8
49113: PUSH
49114: LD_INT 1
49116: ST_TO_ADDR
// if not k then
49117: LD_VAR 0 8
49121: NOT
49122: IFFALSE 49134
// k := array ;
49124: LD_ADDR_VAR 0 8
49128: PUSH
49129: LD_VAR 0 1
49133: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
49134: LD_ADDR_VAR 0 10
49138: PUSH
49139: LD_VAR 0 10
49143: PPUSH
49144: LD_VAR 0 8
49148: PPUSH
49149: LD_VAR 0 1
49153: PUSH
49154: LD_VAR 0 7
49158: ARRAY
49159: PPUSH
49160: CALL_OW 1
49164: ST_TO_ADDR
// end ;
49165: GO 49078
49167: POP
49168: POP
// array := tmp ;
49169: LD_ADDR_VAR 0 1
49173: PUSH
49174: LD_VAR 0 10
49178: ST_TO_ADDR
// end ;
49179: GO 49060
49181: POP
49182: POP
// result := array ;
49183: LD_ADDR_VAR 0 5
49187: PUSH
49188: LD_VAR 0 1
49192: ST_TO_ADDR
// end ;
49193: LD_VAR 0 5
49197: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49198: LD_INT 0
49200: PPUSH
49201: PPUSH
// result := 0 ;
49202: LD_ADDR_VAR 0 3
49206: PUSH
49207: LD_INT 0
49209: ST_TO_ADDR
// if not array or not value in array then
49210: LD_VAR 0 1
49214: NOT
49215: PUSH
49216: LD_VAR 0 2
49220: PUSH
49221: LD_VAR 0 1
49225: IN
49226: NOT
49227: OR
49228: IFFALSE 49232
// exit ;
49230: GO 49286
// for i = 1 to array do
49232: LD_ADDR_VAR 0 4
49236: PUSH
49237: DOUBLE
49238: LD_INT 1
49240: DEC
49241: ST_TO_ADDR
49242: LD_VAR 0 1
49246: PUSH
49247: FOR_TO
49248: IFFALSE 49284
// if value = array [ i ] then
49250: LD_VAR 0 2
49254: PUSH
49255: LD_VAR 0 1
49259: PUSH
49260: LD_VAR 0 4
49264: ARRAY
49265: EQUAL
49266: IFFALSE 49282
// begin result := i ;
49268: LD_ADDR_VAR 0 3
49272: PUSH
49273: LD_VAR 0 4
49277: ST_TO_ADDR
// exit ;
49278: POP
49279: POP
49280: GO 49286
// end ;
49282: GO 49247
49284: POP
49285: POP
// end ;
49286: LD_VAR 0 3
49290: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49291: LD_INT 0
49293: PPUSH
// vc_chassis := chassis ;
49294: LD_ADDR_OWVAR 37
49298: PUSH
49299: LD_VAR 0 1
49303: ST_TO_ADDR
// vc_engine := engine ;
49304: LD_ADDR_OWVAR 39
49308: PUSH
49309: LD_VAR 0 2
49313: ST_TO_ADDR
// vc_control := control ;
49314: LD_ADDR_OWVAR 38
49318: PUSH
49319: LD_VAR 0 3
49323: ST_TO_ADDR
// vc_weapon := weapon ;
49324: LD_ADDR_OWVAR 40
49328: PUSH
49329: LD_VAR 0 4
49333: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49334: LD_ADDR_OWVAR 41
49338: PUSH
49339: LD_VAR 0 5
49343: ST_TO_ADDR
// end ;
49344: LD_VAR 0 6
49348: RET
// export function WantPlant ( unit ) ; var task ; begin
49349: LD_INT 0
49351: PPUSH
49352: PPUSH
// result := false ;
49353: LD_ADDR_VAR 0 2
49357: PUSH
49358: LD_INT 0
49360: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49361: LD_ADDR_VAR 0 3
49365: PUSH
49366: LD_VAR 0 1
49370: PPUSH
49371: CALL_OW 437
49375: ST_TO_ADDR
// if task then
49376: LD_VAR 0 3
49380: IFFALSE 49408
// if task [ 1 ] [ 1 ] = p then
49382: LD_VAR 0 3
49386: PUSH
49387: LD_INT 1
49389: ARRAY
49390: PUSH
49391: LD_INT 1
49393: ARRAY
49394: PUSH
49395: LD_STRING p
49397: EQUAL
49398: IFFALSE 49408
// result := true ;
49400: LD_ADDR_VAR 0 2
49404: PUSH
49405: LD_INT 1
49407: ST_TO_ADDR
// end ;
49408: LD_VAR 0 2
49412: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49413: LD_INT 0
49415: PPUSH
49416: PPUSH
49417: PPUSH
49418: PPUSH
// if pos < 1 then
49419: LD_VAR 0 2
49423: PUSH
49424: LD_INT 1
49426: LESS
49427: IFFALSE 49431
// exit ;
49429: GO 49734
// if pos = 1 then
49431: LD_VAR 0 2
49435: PUSH
49436: LD_INT 1
49438: EQUAL
49439: IFFALSE 49472
// result := Replace ( arr , pos [ 1 ] , value ) else
49441: LD_ADDR_VAR 0 4
49445: PUSH
49446: LD_VAR 0 1
49450: PPUSH
49451: LD_VAR 0 2
49455: PUSH
49456: LD_INT 1
49458: ARRAY
49459: PPUSH
49460: LD_VAR 0 3
49464: PPUSH
49465: CALL_OW 1
49469: ST_TO_ADDR
49470: GO 49734
// begin tmp := arr ;
49472: LD_ADDR_VAR 0 6
49476: PUSH
49477: LD_VAR 0 1
49481: ST_TO_ADDR
// s_arr := [ tmp ] ;
49482: LD_ADDR_VAR 0 7
49486: PUSH
49487: LD_VAR 0 6
49491: PUSH
49492: EMPTY
49493: LIST
49494: ST_TO_ADDR
// for i = 1 to pos - 1 do
49495: LD_ADDR_VAR 0 5
49499: PUSH
49500: DOUBLE
49501: LD_INT 1
49503: DEC
49504: ST_TO_ADDR
49505: LD_VAR 0 2
49509: PUSH
49510: LD_INT 1
49512: MINUS
49513: PUSH
49514: FOR_TO
49515: IFFALSE 49560
// begin tmp := tmp [ pos [ i ] ] ;
49517: LD_ADDR_VAR 0 6
49521: PUSH
49522: LD_VAR 0 6
49526: PUSH
49527: LD_VAR 0 2
49531: PUSH
49532: LD_VAR 0 5
49536: ARRAY
49537: ARRAY
49538: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49539: LD_ADDR_VAR 0 7
49543: PUSH
49544: LD_VAR 0 7
49548: PUSH
49549: LD_VAR 0 6
49553: PUSH
49554: EMPTY
49555: LIST
49556: ADD
49557: ST_TO_ADDR
// end ;
49558: GO 49514
49560: POP
49561: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49562: LD_ADDR_VAR 0 6
49566: PUSH
49567: LD_VAR 0 6
49571: PPUSH
49572: LD_VAR 0 2
49576: PUSH
49577: LD_VAR 0 2
49581: ARRAY
49582: PPUSH
49583: LD_VAR 0 3
49587: PPUSH
49588: CALL_OW 1
49592: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49593: LD_ADDR_VAR 0 7
49597: PUSH
49598: LD_VAR 0 7
49602: PPUSH
49603: LD_VAR 0 7
49607: PPUSH
49608: LD_VAR 0 6
49612: PPUSH
49613: CALL_OW 1
49617: ST_TO_ADDR
// for i = s_arr downto 2 do
49618: LD_ADDR_VAR 0 5
49622: PUSH
49623: DOUBLE
49624: LD_VAR 0 7
49628: INC
49629: ST_TO_ADDR
49630: LD_INT 2
49632: PUSH
49633: FOR_DOWNTO
49634: IFFALSE 49718
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49636: LD_ADDR_VAR 0 6
49640: PUSH
49641: LD_VAR 0 7
49645: PUSH
49646: LD_VAR 0 5
49650: PUSH
49651: LD_INT 1
49653: MINUS
49654: ARRAY
49655: PPUSH
49656: LD_VAR 0 2
49660: PUSH
49661: LD_VAR 0 5
49665: PUSH
49666: LD_INT 1
49668: MINUS
49669: ARRAY
49670: PPUSH
49671: LD_VAR 0 7
49675: PUSH
49676: LD_VAR 0 5
49680: ARRAY
49681: PPUSH
49682: CALL_OW 1
49686: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49687: LD_ADDR_VAR 0 7
49691: PUSH
49692: LD_VAR 0 7
49696: PPUSH
49697: LD_VAR 0 5
49701: PUSH
49702: LD_INT 1
49704: MINUS
49705: PPUSH
49706: LD_VAR 0 6
49710: PPUSH
49711: CALL_OW 1
49715: ST_TO_ADDR
// end ;
49716: GO 49633
49718: POP
49719: POP
// result := s_arr [ 1 ] ;
49720: LD_ADDR_VAR 0 4
49724: PUSH
49725: LD_VAR 0 7
49729: PUSH
49730: LD_INT 1
49732: ARRAY
49733: ST_TO_ADDR
// end ; end ;
49734: LD_VAR 0 4
49738: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49739: LD_INT 0
49741: PPUSH
49742: PPUSH
// if not list then
49743: LD_VAR 0 1
49747: NOT
49748: IFFALSE 49752
// exit ;
49750: GO 49843
// i := list [ pos1 ] ;
49752: LD_ADDR_VAR 0 5
49756: PUSH
49757: LD_VAR 0 1
49761: PUSH
49762: LD_VAR 0 2
49766: ARRAY
49767: ST_TO_ADDR
// if not i then
49768: LD_VAR 0 5
49772: NOT
49773: IFFALSE 49777
// exit ;
49775: GO 49843
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49777: LD_ADDR_VAR 0 1
49781: PUSH
49782: LD_VAR 0 1
49786: PPUSH
49787: LD_VAR 0 2
49791: PPUSH
49792: LD_VAR 0 1
49796: PUSH
49797: LD_VAR 0 3
49801: ARRAY
49802: PPUSH
49803: CALL_OW 1
49807: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49808: LD_ADDR_VAR 0 1
49812: PUSH
49813: LD_VAR 0 1
49817: PPUSH
49818: LD_VAR 0 3
49822: PPUSH
49823: LD_VAR 0 5
49827: PPUSH
49828: CALL_OW 1
49832: ST_TO_ADDR
// result := list ;
49833: LD_ADDR_VAR 0 4
49837: PUSH
49838: LD_VAR 0 1
49842: ST_TO_ADDR
// end ;
49843: LD_VAR 0 4
49847: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49848: LD_INT 0
49850: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49851: LD_ADDR_VAR 0 5
49855: PUSH
49856: LD_VAR 0 1
49860: PPUSH
49861: CALL_OW 250
49865: PPUSH
49866: LD_VAR 0 1
49870: PPUSH
49871: CALL_OW 251
49875: PPUSH
49876: LD_VAR 0 2
49880: PPUSH
49881: LD_VAR 0 3
49885: PPUSH
49886: LD_VAR 0 4
49890: PPUSH
49891: CALL 49901 0 5
49895: ST_TO_ADDR
// end ;
49896: LD_VAR 0 5
49900: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49901: LD_INT 0
49903: PPUSH
49904: PPUSH
49905: PPUSH
49906: PPUSH
// if not list then
49907: LD_VAR 0 3
49911: NOT
49912: IFFALSE 49916
// exit ;
49914: GO 50304
// result := [ ] ;
49916: LD_ADDR_VAR 0 6
49920: PUSH
49921: EMPTY
49922: ST_TO_ADDR
// for i in list do
49923: LD_ADDR_VAR 0 7
49927: PUSH
49928: LD_VAR 0 3
49932: PUSH
49933: FOR_IN
49934: IFFALSE 50136
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49936: LD_ADDR_VAR 0 9
49940: PUSH
49941: LD_VAR 0 7
49945: PPUSH
49946: LD_VAR 0 1
49950: PPUSH
49951: LD_VAR 0 2
49955: PPUSH
49956: CALL_OW 297
49960: ST_TO_ADDR
// if not result then
49961: LD_VAR 0 6
49965: NOT
49966: IFFALSE 49992
// result := [ [ i , tmp ] ] else
49968: LD_ADDR_VAR 0 6
49972: PUSH
49973: LD_VAR 0 7
49977: PUSH
49978: LD_VAR 0 9
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: EMPTY
49988: LIST
49989: ST_TO_ADDR
49990: GO 50134
// begin if result [ result ] [ 2 ] < tmp then
49992: LD_VAR 0 6
49996: PUSH
49997: LD_VAR 0 6
50001: ARRAY
50002: PUSH
50003: LD_INT 2
50005: ARRAY
50006: PUSH
50007: LD_VAR 0 9
50011: LESS
50012: IFFALSE 50054
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
50014: LD_ADDR_VAR 0 6
50018: PUSH
50019: LD_VAR 0 6
50023: PPUSH
50024: LD_VAR 0 6
50028: PUSH
50029: LD_INT 1
50031: PLUS
50032: PPUSH
50033: LD_VAR 0 7
50037: PUSH
50038: LD_VAR 0 9
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PPUSH
50047: CALL_OW 2
50051: ST_TO_ADDR
50052: GO 50134
// for j = 1 to result do
50054: LD_ADDR_VAR 0 8
50058: PUSH
50059: DOUBLE
50060: LD_INT 1
50062: DEC
50063: ST_TO_ADDR
50064: LD_VAR 0 6
50068: PUSH
50069: FOR_TO
50070: IFFALSE 50132
// begin if tmp < result [ j ] [ 2 ] then
50072: LD_VAR 0 9
50076: PUSH
50077: LD_VAR 0 6
50081: PUSH
50082: LD_VAR 0 8
50086: ARRAY
50087: PUSH
50088: LD_INT 2
50090: ARRAY
50091: LESS
50092: IFFALSE 50130
// begin result := Insert ( result , j , [ i , tmp ] ) ;
50094: LD_ADDR_VAR 0 6
50098: PUSH
50099: LD_VAR 0 6
50103: PPUSH
50104: LD_VAR 0 8
50108: PPUSH
50109: LD_VAR 0 7
50113: PUSH
50114: LD_VAR 0 9
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PPUSH
50123: CALL_OW 2
50127: ST_TO_ADDR
// break ;
50128: GO 50132
// end ; end ;
50130: GO 50069
50132: POP
50133: POP
// end ; end ;
50134: GO 49933
50136: POP
50137: POP
// if result and not asc then
50138: LD_VAR 0 6
50142: PUSH
50143: LD_VAR 0 4
50147: NOT
50148: AND
50149: IFFALSE 50224
// begin tmp := result ;
50151: LD_ADDR_VAR 0 9
50155: PUSH
50156: LD_VAR 0 6
50160: ST_TO_ADDR
// for i = tmp downto 1 do
50161: LD_ADDR_VAR 0 7
50165: PUSH
50166: DOUBLE
50167: LD_VAR 0 9
50171: INC
50172: ST_TO_ADDR
50173: LD_INT 1
50175: PUSH
50176: FOR_DOWNTO
50177: IFFALSE 50222
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
50179: LD_ADDR_VAR 0 6
50183: PUSH
50184: LD_VAR 0 6
50188: PPUSH
50189: LD_VAR 0 9
50193: PUSH
50194: LD_VAR 0 7
50198: MINUS
50199: PUSH
50200: LD_INT 1
50202: PLUS
50203: PPUSH
50204: LD_VAR 0 9
50208: PUSH
50209: LD_VAR 0 7
50213: ARRAY
50214: PPUSH
50215: CALL_OW 1
50219: ST_TO_ADDR
50220: GO 50176
50222: POP
50223: POP
// end ; tmp := [ ] ;
50224: LD_ADDR_VAR 0 9
50228: PUSH
50229: EMPTY
50230: ST_TO_ADDR
// if mode then
50231: LD_VAR 0 5
50235: IFFALSE 50304
// begin for i = 1 to result do
50237: LD_ADDR_VAR 0 7
50241: PUSH
50242: DOUBLE
50243: LD_INT 1
50245: DEC
50246: ST_TO_ADDR
50247: LD_VAR 0 6
50251: PUSH
50252: FOR_TO
50253: IFFALSE 50292
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
50255: LD_ADDR_VAR 0 9
50259: PUSH
50260: LD_VAR 0 9
50264: PPUSH
50265: LD_VAR 0 7
50269: PPUSH
50270: LD_VAR 0 6
50274: PUSH
50275: LD_VAR 0 7
50279: ARRAY
50280: PUSH
50281: LD_INT 1
50283: ARRAY
50284: PPUSH
50285: CALL_OW 1
50289: ST_TO_ADDR
50290: GO 50252
50292: POP
50293: POP
// result := tmp ;
50294: LD_ADDR_VAR 0 6
50298: PUSH
50299: LD_VAR 0 9
50303: ST_TO_ADDR
// end ; end ;
50304: LD_VAR 0 6
50308: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
50309: LD_INT 0
50311: PPUSH
50312: PPUSH
50313: PPUSH
50314: PPUSH
50315: PPUSH
50316: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
50317: LD_ADDR_VAR 0 5
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: ST_TO_ADDR
// if not x or not y then
50339: LD_VAR 0 2
50343: NOT
50344: PUSH
50345: LD_VAR 0 3
50349: NOT
50350: OR
50351: IFFALSE 50355
// exit ;
50353: GO 52007
// if not range then
50355: LD_VAR 0 4
50359: NOT
50360: IFFALSE 50370
// range := 10 ;
50362: LD_ADDR_VAR 0 4
50366: PUSH
50367: LD_INT 10
50369: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50370: LD_ADDR_VAR 0 8
50374: PUSH
50375: LD_INT 81
50377: PUSH
50378: LD_VAR 0 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 92
50389: PUSH
50390: LD_VAR 0 2
50394: PUSH
50395: LD_VAR 0 3
50399: PUSH
50400: LD_VAR 0 4
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 3
50413: PUSH
50414: LD_INT 21
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: PPUSH
50433: CALL_OW 69
50437: ST_TO_ADDR
// if not tmp then
50438: LD_VAR 0 8
50442: NOT
50443: IFFALSE 50447
// exit ;
50445: GO 52007
// for i in tmp do
50447: LD_ADDR_VAR 0 6
50451: PUSH
50452: LD_VAR 0 8
50456: PUSH
50457: FOR_IN
50458: IFFALSE 51982
// begin points := [ 0 , 0 , 0 ] ;
50460: LD_ADDR_VAR 0 9
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// bpoints := 1 ;
50479: LD_ADDR_VAR 0 10
50483: PUSH
50484: LD_INT 1
50486: ST_TO_ADDR
// case GetType ( i ) of unit_human :
50487: LD_VAR 0 6
50491: PPUSH
50492: CALL_OW 247
50496: PUSH
50497: LD_INT 1
50499: DOUBLE
50500: EQUAL
50501: IFTRUE 50505
50503: GO 51083
50505: POP
// begin if GetClass ( i ) = 1 then
50506: LD_VAR 0 6
50510: PPUSH
50511: CALL_OW 257
50515: PUSH
50516: LD_INT 1
50518: EQUAL
50519: IFFALSE 50540
// points := [ 10 , 5 , 3 ] ;
50521: LD_ADDR_VAR 0 9
50525: PUSH
50526: LD_INT 10
50528: PUSH
50529: LD_INT 5
50531: PUSH
50532: LD_INT 3
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
50540: LD_VAR 0 6
50544: PPUSH
50545: CALL_OW 257
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: LD_INT 3
50555: PUSH
50556: LD_INT 4
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: LIST
50563: IN
50564: IFFALSE 50585
// points := [ 3 , 2 , 1 ] ;
50566: LD_ADDR_VAR 0 9
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50585: LD_VAR 0 6
50589: PPUSH
50590: CALL_OW 257
50594: PUSH
50595: LD_INT 5
50597: EQUAL
50598: IFFALSE 50619
// points := [ 130 , 5 , 2 ] ;
50600: LD_ADDR_VAR 0 9
50604: PUSH
50605: LD_INT 130
50607: PUSH
50608: LD_INT 5
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50619: LD_VAR 0 6
50623: PPUSH
50624: CALL_OW 257
50628: PUSH
50629: LD_INT 8
50631: EQUAL
50632: IFFALSE 50653
// points := [ 35 , 35 , 30 ] ;
50634: LD_ADDR_VAR 0 9
50638: PUSH
50639: LD_INT 35
50641: PUSH
50642: LD_INT 35
50644: PUSH
50645: LD_INT 30
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: LIST
50652: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50653: LD_VAR 0 6
50657: PPUSH
50658: CALL_OW 257
50662: PUSH
50663: LD_INT 9
50665: EQUAL
50666: IFFALSE 50687
// points := [ 20 , 55 , 40 ] ;
50668: LD_ADDR_VAR 0 9
50672: PUSH
50673: LD_INT 20
50675: PUSH
50676: LD_INT 55
50678: PUSH
50679: LD_INT 40
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: LIST
50686: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50687: LD_VAR 0 6
50691: PPUSH
50692: CALL_OW 257
50696: PUSH
50697: LD_INT 12
50699: PUSH
50700: LD_INT 16
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: IN
50707: IFFALSE 50728
// points := [ 5 , 3 , 2 ] ;
50709: LD_ADDR_VAR 0 9
50713: PUSH
50714: LD_INT 5
50716: PUSH
50717: LD_INT 3
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: LIST
50727: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50728: LD_VAR 0 6
50732: PPUSH
50733: CALL_OW 257
50737: PUSH
50738: LD_INT 17
50740: EQUAL
50741: IFFALSE 50762
// points := [ 100 , 50 , 75 ] ;
50743: LD_ADDR_VAR 0 9
50747: PUSH
50748: LD_INT 100
50750: PUSH
50751: LD_INT 50
50753: PUSH
50754: LD_INT 75
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: LIST
50761: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50762: LD_VAR 0 6
50766: PPUSH
50767: CALL_OW 257
50771: PUSH
50772: LD_INT 15
50774: EQUAL
50775: IFFALSE 50796
// points := [ 10 , 5 , 3 ] ;
50777: LD_ADDR_VAR 0 9
50781: PUSH
50782: LD_INT 10
50784: PUSH
50785: LD_INT 5
50787: PUSH
50788: LD_INT 3
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50796: LD_VAR 0 6
50800: PPUSH
50801: CALL_OW 257
50805: PUSH
50806: LD_INT 14
50808: EQUAL
50809: IFFALSE 50830
// points := [ 10 , 0 , 0 ] ;
50811: LD_ADDR_VAR 0 9
50815: PUSH
50816: LD_INT 10
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: LIST
50829: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50830: LD_VAR 0 6
50834: PPUSH
50835: CALL_OW 257
50839: PUSH
50840: LD_INT 11
50842: EQUAL
50843: IFFALSE 50864
// points := [ 30 , 10 , 5 ] ;
50845: LD_ADDR_VAR 0 9
50849: PUSH
50850: LD_INT 30
50852: PUSH
50853: LD_INT 10
50855: PUSH
50856: LD_INT 5
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: LIST
50863: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50864: LD_VAR 0 1
50868: PPUSH
50869: LD_INT 5
50871: PPUSH
50872: CALL_OW 321
50876: PUSH
50877: LD_INT 2
50879: EQUAL
50880: IFFALSE 50897
// bpoints := bpoints * 1.8 ;
50882: LD_ADDR_VAR 0 10
50886: PUSH
50887: LD_VAR 0 10
50891: PUSH
50892: LD_REAL  1.80000000000000E+0000
50895: MUL
50896: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50897: LD_VAR 0 6
50901: PPUSH
50902: CALL_OW 257
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: LD_INT 3
50915: PUSH
50916: LD_INT 4
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: IN
50925: PUSH
50926: LD_VAR 0 1
50930: PPUSH
50931: LD_INT 51
50933: PPUSH
50934: CALL_OW 321
50938: PUSH
50939: LD_INT 2
50941: EQUAL
50942: AND
50943: IFFALSE 50960
// bpoints := bpoints * 1.2 ;
50945: LD_ADDR_VAR 0 10
50949: PUSH
50950: LD_VAR 0 10
50954: PUSH
50955: LD_REAL  1.20000000000000E+0000
50958: MUL
50959: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50960: LD_VAR 0 6
50964: PPUSH
50965: CALL_OW 257
50969: PUSH
50970: LD_INT 5
50972: PUSH
50973: LD_INT 7
50975: PUSH
50976: LD_INT 9
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: LIST
50983: IN
50984: PUSH
50985: LD_VAR 0 1
50989: PPUSH
50990: LD_INT 52
50992: PPUSH
50993: CALL_OW 321
50997: PUSH
50998: LD_INT 2
51000: EQUAL
51001: AND
51002: IFFALSE 51019
// bpoints := bpoints * 1.5 ;
51004: LD_ADDR_VAR 0 10
51008: PUSH
51009: LD_VAR 0 10
51013: PUSH
51014: LD_REAL  1.50000000000000E+0000
51017: MUL
51018: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
51019: LD_VAR 0 1
51023: PPUSH
51024: LD_INT 66
51026: PPUSH
51027: CALL_OW 321
51031: PUSH
51032: LD_INT 2
51034: EQUAL
51035: IFFALSE 51052
// bpoints := bpoints * 1.1 ;
51037: LD_ADDR_VAR 0 10
51041: PUSH
51042: LD_VAR 0 10
51046: PUSH
51047: LD_REAL  1.10000000000000E+0000
51050: MUL
51051: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
51052: LD_ADDR_VAR 0 10
51056: PUSH
51057: LD_VAR 0 10
51061: PUSH
51062: LD_VAR 0 6
51066: PPUSH
51067: LD_INT 1
51069: PPUSH
51070: CALL_OW 259
51074: PUSH
51075: LD_REAL  1.15000000000000E+0000
51078: MUL
51079: MUL
51080: ST_TO_ADDR
// end ; unit_vehicle :
51081: GO 51911
51083: LD_INT 2
51085: DOUBLE
51086: EQUAL
51087: IFTRUE 51091
51089: GO 51899
51091: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
51092: LD_VAR 0 6
51096: PPUSH
51097: CALL_OW 264
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 42
51107: PUSH
51108: LD_INT 24
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: IN
51116: IFFALSE 51137
// points := [ 25 , 5 , 3 ] ;
51118: LD_ADDR_VAR 0 9
51122: PUSH
51123: LD_INT 25
51125: PUSH
51126: LD_INT 5
51128: PUSH
51129: LD_INT 3
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: LIST
51136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
51137: LD_VAR 0 6
51141: PPUSH
51142: CALL_OW 264
51146: PUSH
51147: LD_INT 4
51149: PUSH
51150: LD_INT 43
51152: PUSH
51153: LD_INT 25
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: IN
51161: IFFALSE 51182
// points := [ 40 , 15 , 5 ] ;
51163: LD_ADDR_VAR 0 9
51167: PUSH
51168: LD_INT 40
51170: PUSH
51171: LD_INT 15
51173: PUSH
51174: LD_INT 5
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: LIST
51181: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
51182: LD_VAR 0 6
51186: PPUSH
51187: CALL_OW 264
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: LD_INT 23
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: IN
51202: IFFALSE 51223
// points := [ 7 , 25 , 8 ] ;
51204: LD_ADDR_VAR 0 9
51208: PUSH
51209: LD_INT 7
51211: PUSH
51212: LD_INT 25
51214: PUSH
51215: LD_INT 8
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: LIST
51222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51223: LD_VAR 0 6
51227: PPUSH
51228: CALL_OW 264
51232: PUSH
51233: LD_INT 5
51235: PUSH
51236: LD_INT 27
51238: PUSH
51239: LD_INT 44
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: LIST
51246: IN
51247: IFFALSE 51268
// points := [ 14 , 50 , 16 ] ;
51249: LD_ADDR_VAR 0 9
51253: PUSH
51254: LD_INT 14
51256: PUSH
51257: LD_INT 50
51259: PUSH
51260: LD_INT 16
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
51268: LD_VAR 0 6
51272: PPUSH
51273: CALL_OW 264
51277: PUSH
51278: LD_INT 6
51280: PUSH
51281: LD_INT 46
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: IN
51288: IFFALSE 51309
// points := [ 32 , 120 , 70 ] ;
51290: LD_ADDR_VAR 0 9
51294: PUSH
51295: LD_INT 32
51297: PUSH
51298: LD_INT 120
51300: PUSH
51301: LD_INT 70
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
51309: LD_VAR 0 6
51313: PPUSH
51314: CALL_OW 264
51318: PUSH
51319: LD_INT 7
51321: PUSH
51322: LD_INT 28
51324: PUSH
51325: LD_INT 45
51327: PUSH
51328: LD_EXP 53
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: IN
51339: IFFALSE 51360
// points := [ 35 , 20 , 45 ] ;
51341: LD_ADDR_VAR 0 9
51345: PUSH
51346: LD_INT 35
51348: PUSH
51349: LD_INT 20
51351: PUSH
51352: LD_INT 45
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51360: LD_VAR 0 6
51364: PPUSH
51365: CALL_OW 264
51369: PUSH
51370: LD_INT 47
51372: PUSH
51373: EMPTY
51374: LIST
51375: IN
51376: IFFALSE 51397
// points := [ 67 , 45 , 75 ] ;
51378: LD_ADDR_VAR 0 9
51382: PUSH
51383: LD_INT 67
51385: PUSH
51386: LD_INT 45
51388: PUSH
51389: LD_INT 75
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
51397: LD_VAR 0 6
51401: PPUSH
51402: CALL_OW 264
51406: PUSH
51407: LD_INT 26
51409: PUSH
51410: EMPTY
51411: LIST
51412: IN
51413: IFFALSE 51434
// points := [ 120 , 30 , 80 ] ;
51415: LD_ADDR_VAR 0 9
51419: PUSH
51420: LD_INT 120
51422: PUSH
51423: LD_INT 30
51425: PUSH
51426: LD_INT 80
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: LIST
51433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
51434: LD_VAR 0 6
51438: PPUSH
51439: CALL_OW 264
51443: PUSH
51444: LD_INT 22
51446: PUSH
51447: EMPTY
51448: LIST
51449: IN
51450: IFFALSE 51471
// points := [ 40 , 1 , 1 ] ;
51452: LD_ADDR_VAR 0 9
51456: PUSH
51457: LD_INT 40
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
51471: LD_VAR 0 6
51475: PPUSH
51476: CALL_OW 264
51480: PUSH
51481: LD_INT 29
51483: PUSH
51484: EMPTY
51485: LIST
51486: IN
51487: IFFALSE 51508
// points := [ 70 , 200 , 400 ] ;
51489: LD_ADDR_VAR 0 9
51493: PUSH
51494: LD_INT 70
51496: PUSH
51497: LD_INT 200
51499: PUSH
51500: LD_INT 400
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
51508: LD_VAR 0 6
51512: PPUSH
51513: CALL_OW 264
51517: PUSH
51518: LD_INT 14
51520: PUSH
51521: LD_INT 53
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: IN
51528: IFFALSE 51549
// points := [ 40 , 10 , 20 ] ;
51530: LD_ADDR_VAR 0 9
51534: PUSH
51535: LD_INT 40
51537: PUSH
51538: LD_INT 10
51540: PUSH
51541: LD_INT 20
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51549: LD_VAR 0 6
51553: PPUSH
51554: CALL_OW 264
51558: PUSH
51559: LD_INT 9
51561: PUSH
51562: EMPTY
51563: LIST
51564: IN
51565: IFFALSE 51586
// points := [ 5 , 70 , 20 ] ;
51567: LD_ADDR_VAR 0 9
51571: PUSH
51572: LD_INT 5
51574: PUSH
51575: LD_INT 70
51577: PUSH
51578: LD_INT 20
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51586: LD_VAR 0 6
51590: PPUSH
51591: CALL_OW 264
51595: PUSH
51596: LD_INT 10
51598: PUSH
51599: EMPTY
51600: LIST
51601: IN
51602: IFFALSE 51623
// points := [ 35 , 110 , 70 ] ;
51604: LD_ADDR_VAR 0 9
51608: PUSH
51609: LD_INT 35
51611: PUSH
51612: LD_INT 110
51614: PUSH
51615: LD_INT 70
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51623: LD_VAR 0 6
51627: PPUSH
51628: CALL_OW 265
51632: PUSH
51633: LD_INT 25
51635: EQUAL
51636: IFFALSE 51657
// points := [ 80 , 65 , 100 ] ;
51638: LD_ADDR_VAR 0 9
51642: PUSH
51643: LD_INT 80
51645: PUSH
51646: LD_INT 65
51648: PUSH
51649: LD_INT 100
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: LIST
51656: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51657: LD_VAR 0 6
51661: PPUSH
51662: CALL_OW 263
51666: PUSH
51667: LD_INT 1
51669: EQUAL
51670: IFFALSE 51705
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51672: LD_ADDR_VAR 0 10
51676: PUSH
51677: LD_VAR 0 10
51681: PUSH
51682: LD_VAR 0 6
51686: PPUSH
51687: CALL_OW 311
51691: PPUSH
51692: LD_INT 3
51694: PPUSH
51695: CALL_OW 259
51699: PUSH
51700: LD_INT 4
51702: MUL
51703: MUL
51704: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51705: LD_VAR 0 6
51709: PPUSH
51710: CALL_OW 263
51714: PUSH
51715: LD_INT 2
51717: EQUAL
51718: IFFALSE 51769
// begin j := IsControledBy ( i ) ;
51720: LD_ADDR_VAR 0 7
51724: PUSH
51725: LD_VAR 0 6
51729: PPUSH
51730: CALL_OW 312
51734: ST_TO_ADDR
// if j then
51735: LD_VAR 0 7
51739: IFFALSE 51769
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51741: LD_ADDR_VAR 0 10
51745: PUSH
51746: LD_VAR 0 10
51750: PUSH
51751: LD_VAR 0 7
51755: PPUSH
51756: LD_INT 3
51758: PPUSH
51759: CALL_OW 259
51763: PUSH
51764: LD_INT 3
51766: MUL
51767: MUL
51768: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51769: LD_VAR 0 6
51773: PPUSH
51774: CALL_OW 264
51778: PUSH
51779: LD_INT 5
51781: PUSH
51782: LD_INT 6
51784: PUSH
51785: LD_INT 46
51787: PUSH
51788: LD_INT 44
51790: PUSH
51791: LD_INT 47
51793: PUSH
51794: LD_INT 45
51796: PUSH
51797: LD_INT 28
51799: PUSH
51800: LD_INT 7
51802: PUSH
51803: LD_INT 27
51805: PUSH
51806: LD_INT 29
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: IN
51821: PUSH
51822: LD_VAR 0 1
51826: PPUSH
51827: LD_INT 52
51829: PPUSH
51830: CALL_OW 321
51834: PUSH
51835: LD_INT 2
51837: EQUAL
51838: AND
51839: IFFALSE 51856
// bpoints := bpoints * 1.2 ;
51841: LD_ADDR_VAR 0 10
51845: PUSH
51846: LD_VAR 0 10
51850: PUSH
51851: LD_REAL  1.20000000000000E+0000
51854: MUL
51855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51856: LD_VAR 0 6
51860: PPUSH
51861: CALL_OW 264
51865: PUSH
51866: LD_INT 6
51868: PUSH
51869: LD_INT 46
51871: PUSH
51872: LD_INT 47
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: IN
51880: IFFALSE 51897
// bpoints := bpoints * 1.2 ;
51882: LD_ADDR_VAR 0 10
51886: PUSH
51887: LD_VAR 0 10
51891: PUSH
51892: LD_REAL  1.20000000000000E+0000
51895: MUL
51896: ST_TO_ADDR
// end ; unit_building :
51897: GO 51911
51899: LD_INT 3
51901: DOUBLE
51902: EQUAL
51903: IFTRUE 51907
51905: GO 51910
51907: POP
// ; end ;
51908: GO 51911
51910: POP
// for j = 1 to 3 do
51911: LD_ADDR_VAR 0 7
51915: PUSH
51916: DOUBLE
51917: LD_INT 1
51919: DEC
51920: ST_TO_ADDR
51921: LD_INT 3
51923: PUSH
51924: FOR_TO
51925: IFFALSE 51978
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51927: LD_ADDR_VAR 0 5
51931: PUSH
51932: LD_VAR 0 5
51936: PPUSH
51937: LD_VAR 0 7
51941: PPUSH
51942: LD_VAR 0 5
51946: PUSH
51947: LD_VAR 0 7
51951: ARRAY
51952: PUSH
51953: LD_VAR 0 9
51957: PUSH
51958: LD_VAR 0 7
51962: ARRAY
51963: PUSH
51964: LD_VAR 0 10
51968: MUL
51969: PLUS
51970: PPUSH
51971: CALL_OW 1
51975: ST_TO_ADDR
51976: GO 51924
51978: POP
51979: POP
// end ;
51980: GO 50457
51982: POP
51983: POP
// result := Replace ( result , 4 , tmp ) ;
51984: LD_ADDR_VAR 0 5
51988: PUSH
51989: LD_VAR 0 5
51993: PPUSH
51994: LD_INT 4
51996: PPUSH
51997: LD_VAR 0 8
52001: PPUSH
52002: CALL_OW 1
52006: ST_TO_ADDR
// end ;
52007: LD_VAR 0 5
52011: RET
// export function DangerAtRange ( unit , range ) ; begin
52012: LD_INT 0
52014: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
52015: LD_ADDR_VAR 0 3
52019: PUSH
52020: LD_VAR 0 1
52024: PPUSH
52025: CALL_OW 255
52029: PPUSH
52030: LD_VAR 0 1
52034: PPUSH
52035: CALL_OW 250
52039: PPUSH
52040: LD_VAR 0 1
52044: PPUSH
52045: CALL_OW 251
52049: PPUSH
52050: LD_VAR 0 2
52054: PPUSH
52055: CALL 50309 0 4
52059: ST_TO_ADDR
// end ;
52060: LD_VAR 0 3
52064: RET
// export function DangerInArea ( side , area ) ; begin
52065: LD_INT 0
52067: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
52068: LD_ADDR_VAR 0 3
52072: PUSH
52073: LD_VAR 0 2
52077: PPUSH
52078: LD_INT 81
52080: PUSH
52081: LD_VAR 0 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PPUSH
52090: CALL_OW 70
52094: ST_TO_ADDR
// end ;
52095: LD_VAR 0 3
52099: RET
// export function IsExtension ( b ) ; begin
52100: LD_INT 0
52102: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
52103: LD_ADDR_VAR 0 2
52107: PUSH
52108: LD_VAR 0 1
52112: PUSH
52113: LD_INT 23
52115: PUSH
52116: LD_INT 20
52118: PUSH
52119: LD_INT 22
52121: PUSH
52122: LD_INT 17
52124: PUSH
52125: LD_INT 24
52127: PUSH
52128: LD_INT 21
52130: PUSH
52131: LD_INT 19
52133: PUSH
52134: LD_INT 16
52136: PUSH
52137: LD_INT 25
52139: PUSH
52140: LD_INT 18
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: IN
52155: ST_TO_ADDR
// end ;
52156: LD_VAR 0 2
52160: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
52161: LD_INT 0
52163: PPUSH
52164: PPUSH
52165: PPUSH
// result := [ ] ;
52166: LD_ADDR_VAR 0 4
52170: PUSH
52171: EMPTY
52172: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
52173: LD_ADDR_VAR 0 5
52177: PUSH
52178: LD_VAR 0 2
52182: PPUSH
52183: LD_INT 21
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PPUSH
52193: CALL_OW 70
52197: ST_TO_ADDR
// if not tmp then
52198: LD_VAR 0 5
52202: NOT
52203: IFFALSE 52207
// exit ;
52205: GO 52271
// if checkLink then
52207: LD_VAR 0 3
52211: IFFALSE 52261
// begin for i in tmp do
52213: LD_ADDR_VAR 0 6
52217: PUSH
52218: LD_VAR 0 5
52222: PUSH
52223: FOR_IN
52224: IFFALSE 52259
// if GetBase ( i ) <> base then
52226: LD_VAR 0 6
52230: PPUSH
52231: CALL_OW 274
52235: PUSH
52236: LD_VAR 0 1
52240: NONEQUAL
52241: IFFALSE 52257
// ComLinkToBase ( base , i ) ;
52243: LD_VAR 0 1
52247: PPUSH
52248: LD_VAR 0 6
52252: PPUSH
52253: CALL_OW 169
52257: GO 52223
52259: POP
52260: POP
// end ; result := tmp ;
52261: LD_ADDR_VAR 0 4
52265: PUSH
52266: LD_VAR 0 5
52270: ST_TO_ADDR
// end ;
52271: LD_VAR 0 4
52275: RET
// export function ComComplete ( units , b ) ; var i ; begin
52276: LD_INT 0
52278: PPUSH
52279: PPUSH
// if not units then
52280: LD_VAR 0 1
52284: NOT
52285: IFFALSE 52289
// exit ;
52287: GO 52379
// for i in units do
52289: LD_ADDR_VAR 0 4
52293: PUSH
52294: LD_VAR 0 1
52298: PUSH
52299: FOR_IN
52300: IFFALSE 52377
// if BuildingStatus ( b ) = bs_build then
52302: LD_VAR 0 2
52306: PPUSH
52307: CALL_OW 461
52311: PUSH
52312: LD_INT 1
52314: EQUAL
52315: IFFALSE 52375
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52317: LD_VAR 0 4
52321: PPUSH
52322: LD_STRING h
52324: PUSH
52325: LD_VAR 0 2
52329: PPUSH
52330: CALL_OW 250
52334: PUSH
52335: LD_VAR 0 2
52339: PPUSH
52340: CALL_OW 251
52344: PUSH
52345: LD_VAR 0 2
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: PPUSH
52371: CALL_OW 446
52375: GO 52299
52377: POP
52378: POP
// end ;
52379: LD_VAR 0 3
52383: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
52384: LD_INT 0
52386: PPUSH
52387: PPUSH
52388: PPUSH
52389: PPUSH
52390: PPUSH
52391: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
52392: LD_VAR 0 1
52396: NOT
52397: PUSH
52398: LD_VAR 0 1
52402: PPUSH
52403: CALL_OW 263
52407: PUSH
52408: LD_INT 2
52410: NONEQUAL
52411: OR
52412: IFFALSE 52416
// exit ;
52414: GO 52732
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
52416: LD_ADDR_VAR 0 6
52420: PUSH
52421: LD_INT 22
52423: PUSH
52424: LD_VAR 0 1
52428: PPUSH
52429: CALL_OW 255
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: LD_INT 30
52443: PUSH
52444: LD_INT 36
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 34
52453: PUSH
52454: LD_INT 31
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PPUSH
52470: CALL_OW 69
52474: ST_TO_ADDR
// if not tmp then
52475: LD_VAR 0 6
52479: NOT
52480: IFFALSE 52484
// exit ;
52482: GO 52732
// result := [ ] ;
52484: LD_ADDR_VAR 0 2
52488: PUSH
52489: EMPTY
52490: ST_TO_ADDR
// for i in tmp do
52491: LD_ADDR_VAR 0 3
52495: PUSH
52496: LD_VAR 0 6
52500: PUSH
52501: FOR_IN
52502: IFFALSE 52573
// begin t := UnitsInside ( i ) ;
52504: LD_ADDR_VAR 0 4
52508: PUSH
52509: LD_VAR 0 3
52513: PPUSH
52514: CALL_OW 313
52518: ST_TO_ADDR
// if t then
52519: LD_VAR 0 4
52523: IFFALSE 52571
// for j in t do
52525: LD_ADDR_VAR 0 7
52529: PUSH
52530: LD_VAR 0 4
52534: PUSH
52535: FOR_IN
52536: IFFALSE 52569
// result := Replace ( result , result + 1 , j ) ;
52538: LD_ADDR_VAR 0 2
52542: PUSH
52543: LD_VAR 0 2
52547: PPUSH
52548: LD_VAR 0 2
52552: PUSH
52553: LD_INT 1
52555: PLUS
52556: PPUSH
52557: LD_VAR 0 7
52561: PPUSH
52562: CALL_OW 1
52566: ST_TO_ADDR
52567: GO 52535
52569: POP
52570: POP
// end ;
52571: GO 52501
52573: POP
52574: POP
// if not result then
52575: LD_VAR 0 2
52579: NOT
52580: IFFALSE 52584
// exit ;
52582: GO 52732
// mech := result [ 1 ] ;
52584: LD_ADDR_VAR 0 5
52588: PUSH
52589: LD_VAR 0 2
52593: PUSH
52594: LD_INT 1
52596: ARRAY
52597: ST_TO_ADDR
// if result > 1 then
52598: LD_VAR 0 2
52602: PUSH
52603: LD_INT 1
52605: GREATER
52606: IFFALSE 52718
// begin for i = 2 to result do
52608: LD_ADDR_VAR 0 3
52612: PUSH
52613: DOUBLE
52614: LD_INT 2
52616: DEC
52617: ST_TO_ADDR
52618: LD_VAR 0 2
52622: PUSH
52623: FOR_TO
52624: IFFALSE 52716
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52626: LD_ADDR_VAR 0 4
52630: PUSH
52631: LD_VAR 0 2
52635: PUSH
52636: LD_VAR 0 3
52640: ARRAY
52641: PPUSH
52642: LD_INT 3
52644: PPUSH
52645: CALL_OW 259
52649: PUSH
52650: LD_VAR 0 2
52654: PUSH
52655: LD_VAR 0 3
52659: ARRAY
52660: PPUSH
52661: CALL_OW 432
52665: MINUS
52666: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52667: LD_VAR 0 4
52671: PUSH
52672: LD_VAR 0 5
52676: PPUSH
52677: LD_INT 3
52679: PPUSH
52680: CALL_OW 259
52684: PUSH
52685: LD_VAR 0 5
52689: PPUSH
52690: CALL_OW 432
52694: MINUS
52695: GREATEREQUAL
52696: IFFALSE 52714
// mech := result [ i ] ;
52698: LD_ADDR_VAR 0 5
52702: PUSH
52703: LD_VAR 0 2
52707: PUSH
52708: LD_VAR 0 3
52712: ARRAY
52713: ST_TO_ADDR
// end ;
52714: GO 52623
52716: POP
52717: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52718: LD_VAR 0 1
52722: PPUSH
52723: LD_VAR 0 5
52727: PPUSH
52728: CALL_OW 135
// end ;
52732: LD_VAR 0 2
52736: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52737: LD_INT 0
52739: PPUSH
52740: PPUSH
52741: PPUSH
52742: PPUSH
52743: PPUSH
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
// result := [ ] ;
52752: LD_ADDR_VAR 0 7
52756: PUSH
52757: EMPTY
52758: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52759: LD_VAR 0 1
52763: PPUSH
52764: CALL_OW 266
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: IN
52779: NOT
52780: IFFALSE 52784
// exit ;
52782: GO 54418
// if name then
52784: LD_VAR 0 3
52788: IFFALSE 52804
// SetBName ( base_dep , name ) ;
52790: LD_VAR 0 1
52794: PPUSH
52795: LD_VAR 0 3
52799: PPUSH
52800: CALL_OW 500
// base := GetBase ( base_dep ) ;
52804: LD_ADDR_VAR 0 15
52808: PUSH
52809: LD_VAR 0 1
52813: PPUSH
52814: CALL_OW 274
52818: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52819: LD_ADDR_VAR 0 16
52823: PUSH
52824: LD_VAR 0 1
52828: PPUSH
52829: CALL_OW 255
52833: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52834: LD_ADDR_VAR 0 17
52838: PUSH
52839: LD_VAR 0 1
52843: PPUSH
52844: CALL_OW 248
52848: ST_TO_ADDR
// if sources then
52849: LD_VAR 0 5
52853: IFFALSE 52900
// for i = 1 to 3 do
52855: LD_ADDR_VAR 0 8
52859: PUSH
52860: DOUBLE
52861: LD_INT 1
52863: DEC
52864: ST_TO_ADDR
52865: LD_INT 3
52867: PUSH
52868: FOR_TO
52869: IFFALSE 52898
// AddResourceType ( base , i , sources [ i ] ) ;
52871: LD_VAR 0 15
52875: PPUSH
52876: LD_VAR 0 8
52880: PPUSH
52881: LD_VAR 0 5
52885: PUSH
52886: LD_VAR 0 8
52890: ARRAY
52891: PPUSH
52892: CALL_OW 276
52896: GO 52868
52898: POP
52899: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52900: LD_ADDR_VAR 0 18
52904: PUSH
52905: LD_VAR 0 15
52909: PPUSH
52910: LD_VAR 0 2
52914: PPUSH
52915: LD_INT 1
52917: PPUSH
52918: CALL 52161 0 3
52922: ST_TO_ADDR
// InitHc ;
52923: CALL_OW 19
// InitUc ;
52927: CALL_OW 18
// uc_side := side ;
52931: LD_ADDR_OWVAR 20
52935: PUSH
52936: LD_VAR 0 16
52940: ST_TO_ADDR
// uc_nation := nation ;
52941: LD_ADDR_OWVAR 21
52945: PUSH
52946: LD_VAR 0 17
52950: ST_TO_ADDR
// if buildings then
52951: LD_VAR 0 18
52955: IFFALSE 54277
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52957: LD_ADDR_VAR 0 19
52961: PUSH
52962: LD_VAR 0 18
52966: PPUSH
52967: LD_INT 2
52969: PUSH
52970: LD_INT 30
52972: PUSH
52973: LD_INT 29
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 30
52982: PUSH
52983: LD_INT 30
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: LIST
52994: PPUSH
52995: CALL_OW 72
52999: ST_TO_ADDR
// if tmp then
53000: LD_VAR 0 19
53004: IFFALSE 53052
// for i in tmp do
53006: LD_ADDR_VAR 0 8
53010: PUSH
53011: LD_VAR 0 19
53015: PUSH
53016: FOR_IN
53017: IFFALSE 53050
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
53019: LD_VAR 0 8
53023: PPUSH
53024: CALL_OW 250
53028: PPUSH
53029: LD_VAR 0 8
53033: PPUSH
53034: CALL_OW 251
53038: PPUSH
53039: LD_VAR 0 16
53043: PPUSH
53044: CALL_OW 441
53048: GO 53016
53050: POP
53051: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
53052: LD_VAR 0 18
53056: PPUSH
53057: LD_INT 2
53059: PUSH
53060: LD_INT 30
53062: PUSH
53063: LD_INT 32
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 30
53072: PUSH
53073: LD_INT 33
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: PPUSH
53085: CALL_OW 72
53089: IFFALSE 53177
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
53091: LD_ADDR_VAR 0 8
53095: PUSH
53096: LD_VAR 0 18
53100: PPUSH
53101: LD_INT 2
53103: PUSH
53104: LD_INT 30
53106: PUSH
53107: LD_INT 32
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 30
53116: PUSH
53117: LD_INT 33
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: PPUSH
53129: CALL_OW 72
53133: PUSH
53134: FOR_IN
53135: IFFALSE 53175
// begin if not GetBWeapon ( i ) then
53137: LD_VAR 0 8
53141: PPUSH
53142: CALL_OW 269
53146: NOT
53147: IFFALSE 53173
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
53149: LD_VAR 0 8
53153: PPUSH
53154: LD_VAR 0 8
53158: PPUSH
53159: LD_VAR 0 2
53163: PPUSH
53164: CALL 54423 0 2
53168: PPUSH
53169: CALL_OW 431
// end ;
53173: GO 53134
53175: POP
53176: POP
// end ; for i = 1 to personel do
53177: LD_ADDR_VAR 0 8
53181: PUSH
53182: DOUBLE
53183: LD_INT 1
53185: DEC
53186: ST_TO_ADDR
53187: LD_VAR 0 6
53191: PUSH
53192: FOR_TO
53193: IFFALSE 54257
// begin if i > 4 then
53195: LD_VAR 0 8
53199: PUSH
53200: LD_INT 4
53202: GREATER
53203: IFFALSE 53207
// break ;
53205: GO 54257
// case i of 1 :
53207: LD_VAR 0 8
53211: PUSH
53212: LD_INT 1
53214: DOUBLE
53215: EQUAL
53216: IFTRUE 53220
53218: GO 53300
53220: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
53221: LD_ADDR_VAR 0 12
53225: PUSH
53226: LD_VAR 0 18
53230: PPUSH
53231: LD_INT 22
53233: PUSH
53234: LD_VAR 0 16
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 58
53245: PUSH
53246: EMPTY
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: LD_INT 30
53254: PUSH
53255: LD_INT 32
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 30
53264: PUSH
53265: LD_INT 4
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 30
53274: PUSH
53275: LD_INT 5
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: LIST
53292: PPUSH
53293: CALL_OW 72
53297: ST_TO_ADDR
53298: GO 53522
53300: LD_INT 2
53302: DOUBLE
53303: EQUAL
53304: IFTRUE 53308
53306: GO 53370
53308: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53309: LD_ADDR_VAR 0 12
53313: PUSH
53314: LD_VAR 0 18
53318: PPUSH
53319: LD_INT 22
53321: PUSH
53322: LD_VAR 0 16
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: LD_INT 30
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 30
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PPUSH
53363: CALL_OW 72
53367: ST_TO_ADDR
53368: GO 53522
53370: LD_INT 3
53372: DOUBLE
53373: EQUAL
53374: IFTRUE 53378
53376: GO 53440
53378: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
53379: LD_ADDR_VAR 0 12
53383: PUSH
53384: LD_VAR 0 18
53388: PPUSH
53389: LD_INT 22
53391: PUSH
53392: LD_VAR 0 16
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: LD_INT 30
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 30
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PPUSH
53433: CALL_OW 72
53437: ST_TO_ADDR
53438: GO 53522
53440: LD_INT 4
53442: DOUBLE
53443: EQUAL
53444: IFTRUE 53448
53446: GO 53521
53448: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
53449: LD_ADDR_VAR 0 12
53453: PUSH
53454: LD_VAR 0 18
53458: PPUSH
53459: LD_INT 22
53461: PUSH
53462: LD_VAR 0 16
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 30
53476: PUSH
53477: LD_INT 6
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 30
53486: PUSH
53487: LD_INT 7
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 30
53496: PUSH
53497: LD_INT 8
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PPUSH
53514: CALL_OW 72
53518: ST_TO_ADDR
53519: GO 53522
53521: POP
// if i = 1 then
53522: LD_VAR 0 8
53526: PUSH
53527: LD_INT 1
53529: EQUAL
53530: IFFALSE 53641
// begin tmp := [ ] ;
53532: LD_ADDR_VAR 0 19
53536: PUSH
53537: EMPTY
53538: ST_TO_ADDR
// for j in f do
53539: LD_ADDR_VAR 0 9
53543: PUSH
53544: LD_VAR 0 12
53548: PUSH
53549: FOR_IN
53550: IFFALSE 53623
// if GetBType ( j ) = b_bunker then
53552: LD_VAR 0 9
53556: PPUSH
53557: CALL_OW 266
53561: PUSH
53562: LD_INT 32
53564: EQUAL
53565: IFFALSE 53592
// tmp := Insert ( tmp , 1 , j ) else
53567: LD_ADDR_VAR 0 19
53571: PUSH
53572: LD_VAR 0 19
53576: PPUSH
53577: LD_INT 1
53579: PPUSH
53580: LD_VAR 0 9
53584: PPUSH
53585: CALL_OW 2
53589: ST_TO_ADDR
53590: GO 53621
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53592: LD_ADDR_VAR 0 19
53596: PUSH
53597: LD_VAR 0 19
53601: PPUSH
53602: LD_VAR 0 19
53606: PUSH
53607: LD_INT 1
53609: PLUS
53610: PPUSH
53611: LD_VAR 0 9
53615: PPUSH
53616: CALL_OW 2
53620: ST_TO_ADDR
53621: GO 53549
53623: POP
53624: POP
// if tmp then
53625: LD_VAR 0 19
53629: IFFALSE 53641
// f := tmp ;
53631: LD_ADDR_VAR 0 12
53635: PUSH
53636: LD_VAR 0 19
53640: ST_TO_ADDR
// end ; x := personel [ i ] ;
53641: LD_ADDR_VAR 0 13
53645: PUSH
53646: LD_VAR 0 6
53650: PUSH
53651: LD_VAR 0 8
53655: ARRAY
53656: ST_TO_ADDR
// if x = - 1 then
53657: LD_VAR 0 13
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: EQUAL
53666: IFFALSE 53875
// begin for j in f do
53668: LD_ADDR_VAR 0 9
53672: PUSH
53673: LD_VAR 0 12
53677: PUSH
53678: FOR_IN
53679: IFFALSE 53871
// repeat InitHc ;
53681: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53685: LD_VAR 0 9
53689: PPUSH
53690: CALL_OW 266
53694: PUSH
53695: LD_INT 5
53697: EQUAL
53698: IFFALSE 53768
// begin if UnitsInside ( j ) < 3 then
53700: LD_VAR 0 9
53704: PPUSH
53705: CALL_OW 313
53709: PUSH
53710: LD_INT 3
53712: LESS
53713: IFFALSE 53749
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53715: LD_INT 0
53717: PPUSH
53718: LD_INT 5
53720: PUSH
53721: LD_INT 8
53723: PUSH
53724: LD_INT 9
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: LIST
53731: PUSH
53732: LD_VAR 0 17
53736: ARRAY
53737: PPUSH
53738: LD_VAR 0 4
53742: PPUSH
53743: CALL_OW 380
53747: GO 53766
// PrepareHuman ( false , i , skill ) ;
53749: LD_INT 0
53751: PPUSH
53752: LD_VAR 0 8
53756: PPUSH
53757: LD_VAR 0 4
53761: PPUSH
53762: CALL_OW 380
// end else
53766: GO 53785
// PrepareHuman ( false , i , skill ) ;
53768: LD_INT 0
53770: PPUSH
53771: LD_VAR 0 8
53775: PPUSH
53776: LD_VAR 0 4
53780: PPUSH
53781: CALL_OW 380
// un := CreateHuman ;
53785: LD_ADDR_VAR 0 14
53789: PUSH
53790: CALL_OW 44
53794: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53795: LD_ADDR_VAR 0 7
53799: PUSH
53800: LD_VAR 0 7
53804: PPUSH
53805: LD_INT 1
53807: PPUSH
53808: LD_VAR 0 14
53812: PPUSH
53813: CALL_OW 2
53817: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53818: LD_VAR 0 14
53822: PPUSH
53823: LD_VAR 0 9
53827: PPUSH
53828: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53832: LD_VAR 0 9
53836: PPUSH
53837: CALL_OW 313
53841: PUSH
53842: LD_INT 6
53844: EQUAL
53845: PUSH
53846: LD_VAR 0 9
53850: PPUSH
53851: CALL_OW 266
53855: PUSH
53856: LD_INT 32
53858: PUSH
53859: LD_INT 31
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: IN
53866: OR
53867: IFFALSE 53681
53869: GO 53678
53871: POP
53872: POP
// end else
53873: GO 54255
// for j = 1 to x do
53875: LD_ADDR_VAR 0 9
53879: PUSH
53880: DOUBLE
53881: LD_INT 1
53883: DEC
53884: ST_TO_ADDR
53885: LD_VAR 0 13
53889: PUSH
53890: FOR_TO
53891: IFFALSE 54253
// begin InitHc ;
53893: CALL_OW 19
// if not f then
53897: LD_VAR 0 12
53901: NOT
53902: IFFALSE 53991
// begin PrepareHuman ( false , i , skill ) ;
53904: LD_INT 0
53906: PPUSH
53907: LD_VAR 0 8
53911: PPUSH
53912: LD_VAR 0 4
53916: PPUSH
53917: CALL_OW 380
// un := CreateHuman ;
53921: LD_ADDR_VAR 0 14
53925: PUSH
53926: CALL_OW 44
53930: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53931: LD_ADDR_VAR 0 7
53935: PUSH
53936: LD_VAR 0 7
53940: PPUSH
53941: LD_INT 1
53943: PPUSH
53944: LD_VAR 0 14
53948: PPUSH
53949: CALL_OW 2
53953: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53954: LD_VAR 0 14
53958: PPUSH
53959: LD_VAR 0 1
53963: PPUSH
53964: CALL_OW 250
53968: PPUSH
53969: LD_VAR 0 1
53973: PPUSH
53974: CALL_OW 251
53978: PPUSH
53979: LD_INT 10
53981: PPUSH
53982: LD_INT 0
53984: PPUSH
53985: CALL_OW 50
// continue ;
53989: GO 53890
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53991: LD_VAR 0 12
53995: PUSH
53996: LD_INT 1
53998: ARRAY
53999: PPUSH
54000: CALL_OW 313
54004: PUSH
54005: LD_VAR 0 12
54009: PUSH
54010: LD_INT 1
54012: ARRAY
54013: PPUSH
54014: CALL_OW 266
54018: PUSH
54019: LD_INT 32
54021: PUSH
54022: LD_INT 31
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: IN
54029: AND
54030: PUSH
54031: LD_VAR 0 12
54035: PUSH
54036: LD_INT 1
54038: ARRAY
54039: PPUSH
54040: CALL_OW 313
54044: PUSH
54045: LD_INT 6
54047: EQUAL
54048: OR
54049: IFFALSE 54069
// f := Delete ( f , 1 ) ;
54051: LD_ADDR_VAR 0 12
54055: PUSH
54056: LD_VAR 0 12
54060: PPUSH
54061: LD_INT 1
54063: PPUSH
54064: CALL_OW 3
54068: ST_TO_ADDR
// if not f then
54069: LD_VAR 0 12
54073: NOT
54074: IFFALSE 54092
// begin x := x + 2 ;
54076: LD_ADDR_VAR 0 13
54080: PUSH
54081: LD_VAR 0 13
54085: PUSH
54086: LD_INT 2
54088: PLUS
54089: ST_TO_ADDR
// continue ;
54090: GO 53890
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
54092: LD_VAR 0 12
54096: PUSH
54097: LD_INT 1
54099: ARRAY
54100: PPUSH
54101: CALL_OW 266
54105: PUSH
54106: LD_INT 5
54108: EQUAL
54109: IFFALSE 54183
// begin if UnitsInside ( f [ 1 ] ) < 3 then
54111: LD_VAR 0 12
54115: PUSH
54116: LD_INT 1
54118: ARRAY
54119: PPUSH
54120: CALL_OW 313
54124: PUSH
54125: LD_INT 3
54127: LESS
54128: IFFALSE 54164
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54130: LD_INT 0
54132: PPUSH
54133: LD_INT 5
54135: PUSH
54136: LD_INT 8
54138: PUSH
54139: LD_INT 9
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: PUSH
54147: LD_VAR 0 17
54151: ARRAY
54152: PPUSH
54153: LD_VAR 0 4
54157: PPUSH
54158: CALL_OW 380
54162: GO 54181
// PrepareHuman ( false , i , skill ) ;
54164: LD_INT 0
54166: PPUSH
54167: LD_VAR 0 8
54171: PPUSH
54172: LD_VAR 0 4
54176: PPUSH
54177: CALL_OW 380
// end else
54181: GO 54200
// PrepareHuman ( false , i , skill ) ;
54183: LD_INT 0
54185: PPUSH
54186: LD_VAR 0 8
54190: PPUSH
54191: LD_VAR 0 4
54195: PPUSH
54196: CALL_OW 380
// un := CreateHuman ;
54200: LD_ADDR_VAR 0 14
54204: PUSH
54205: CALL_OW 44
54209: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54210: LD_ADDR_VAR 0 7
54214: PUSH
54215: LD_VAR 0 7
54219: PPUSH
54220: LD_INT 1
54222: PPUSH
54223: LD_VAR 0 14
54227: PPUSH
54228: CALL_OW 2
54232: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
54233: LD_VAR 0 14
54237: PPUSH
54238: LD_VAR 0 12
54242: PUSH
54243: LD_INT 1
54245: ARRAY
54246: PPUSH
54247: CALL_OW 52
// end ;
54251: GO 53890
54253: POP
54254: POP
// end ;
54255: GO 53192
54257: POP
54258: POP
// result := result ^ buildings ;
54259: LD_ADDR_VAR 0 7
54263: PUSH
54264: LD_VAR 0 7
54268: PUSH
54269: LD_VAR 0 18
54273: ADD
54274: ST_TO_ADDR
// end else
54275: GO 54418
// begin for i = 1 to personel do
54277: LD_ADDR_VAR 0 8
54281: PUSH
54282: DOUBLE
54283: LD_INT 1
54285: DEC
54286: ST_TO_ADDR
54287: LD_VAR 0 6
54291: PUSH
54292: FOR_TO
54293: IFFALSE 54416
// begin if i > 4 then
54295: LD_VAR 0 8
54299: PUSH
54300: LD_INT 4
54302: GREATER
54303: IFFALSE 54307
// break ;
54305: GO 54416
// x := personel [ i ] ;
54307: LD_ADDR_VAR 0 13
54311: PUSH
54312: LD_VAR 0 6
54316: PUSH
54317: LD_VAR 0 8
54321: ARRAY
54322: ST_TO_ADDR
// if x = - 1 then
54323: LD_VAR 0 13
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: EQUAL
54332: IFFALSE 54336
// continue ;
54334: GO 54292
// PrepareHuman ( false , i , skill ) ;
54336: LD_INT 0
54338: PPUSH
54339: LD_VAR 0 8
54343: PPUSH
54344: LD_VAR 0 4
54348: PPUSH
54349: CALL_OW 380
// un := CreateHuman ;
54353: LD_ADDR_VAR 0 14
54357: PUSH
54358: CALL_OW 44
54362: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54363: LD_VAR 0 14
54367: PPUSH
54368: LD_VAR 0 1
54372: PPUSH
54373: CALL_OW 250
54377: PPUSH
54378: LD_VAR 0 1
54382: PPUSH
54383: CALL_OW 251
54387: PPUSH
54388: LD_INT 10
54390: PPUSH
54391: LD_INT 0
54393: PPUSH
54394: CALL_OW 50
// result := result ^ un ;
54398: LD_ADDR_VAR 0 7
54402: PUSH
54403: LD_VAR 0 7
54407: PUSH
54408: LD_VAR 0 14
54412: ADD
54413: ST_TO_ADDR
// end ;
54414: GO 54292
54416: POP
54417: POP
// end ; end ;
54418: LD_VAR 0 7
54422: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
54423: LD_INT 0
54425: PPUSH
54426: PPUSH
54427: PPUSH
54428: PPUSH
54429: PPUSH
54430: PPUSH
54431: PPUSH
54432: PPUSH
54433: PPUSH
54434: PPUSH
54435: PPUSH
54436: PPUSH
54437: PPUSH
54438: PPUSH
54439: PPUSH
54440: PPUSH
// result := false ;
54441: LD_ADDR_VAR 0 3
54445: PUSH
54446: LD_INT 0
54448: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
54449: LD_VAR 0 1
54453: NOT
54454: PUSH
54455: LD_VAR 0 1
54459: PPUSH
54460: CALL_OW 266
54464: PUSH
54465: LD_INT 32
54467: PUSH
54468: LD_INT 33
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: IN
54475: NOT
54476: OR
54477: IFFALSE 54481
// exit ;
54479: GO 55590
// nat := GetNation ( tower ) ;
54481: LD_ADDR_VAR 0 12
54485: PUSH
54486: LD_VAR 0 1
54490: PPUSH
54491: CALL_OW 248
54495: ST_TO_ADDR
// side := GetSide ( tower ) ;
54496: LD_ADDR_VAR 0 16
54500: PUSH
54501: LD_VAR 0 1
54505: PPUSH
54506: CALL_OW 255
54510: ST_TO_ADDR
// x := GetX ( tower ) ;
54511: LD_ADDR_VAR 0 10
54515: PUSH
54516: LD_VAR 0 1
54520: PPUSH
54521: CALL_OW 250
54525: ST_TO_ADDR
// y := GetY ( tower ) ;
54526: LD_ADDR_VAR 0 11
54530: PUSH
54531: LD_VAR 0 1
54535: PPUSH
54536: CALL_OW 251
54540: ST_TO_ADDR
// if not x or not y then
54541: LD_VAR 0 10
54545: NOT
54546: PUSH
54547: LD_VAR 0 11
54551: NOT
54552: OR
54553: IFFALSE 54557
// exit ;
54555: GO 55590
// weapon := 0 ;
54557: LD_ADDR_VAR 0 18
54561: PUSH
54562: LD_INT 0
54564: ST_TO_ADDR
// fac_list := [ ] ;
54565: LD_ADDR_VAR 0 17
54569: PUSH
54570: EMPTY
54571: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
54572: LD_ADDR_VAR 0 6
54576: PUSH
54577: LD_VAR 0 1
54581: PPUSH
54582: CALL_OW 274
54586: PPUSH
54587: LD_VAR 0 2
54591: PPUSH
54592: LD_INT 0
54594: PPUSH
54595: CALL 52161 0 3
54599: PPUSH
54600: LD_INT 30
54602: PUSH
54603: LD_INT 3
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PPUSH
54610: CALL_OW 72
54614: ST_TO_ADDR
// if not factories then
54615: LD_VAR 0 6
54619: NOT
54620: IFFALSE 54624
// exit ;
54622: GO 55590
// for i in factories do
54624: LD_ADDR_VAR 0 8
54628: PUSH
54629: LD_VAR 0 6
54633: PUSH
54634: FOR_IN
54635: IFFALSE 54660
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54637: LD_ADDR_VAR 0 17
54641: PUSH
54642: LD_VAR 0 17
54646: PUSH
54647: LD_VAR 0 8
54651: PPUSH
54652: CALL_OW 478
54656: UNION
54657: ST_TO_ADDR
54658: GO 54634
54660: POP
54661: POP
// if not fac_list then
54662: LD_VAR 0 17
54666: NOT
54667: IFFALSE 54671
// exit ;
54669: GO 55590
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54671: LD_ADDR_VAR 0 5
54675: PUSH
54676: LD_INT 4
54678: PUSH
54679: LD_INT 5
54681: PUSH
54682: LD_INT 9
54684: PUSH
54685: LD_INT 10
54687: PUSH
54688: LD_INT 6
54690: PUSH
54691: LD_INT 7
54693: PUSH
54694: LD_INT 11
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 27
54708: PUSH
54709: LD_INT 28
54711: PUSH
54712: LD_INT 26
54714: PUSH
54715: LD_INT 30
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 43
54726: PUSH
54727: LD_INT 44
54729: PUSH
54730: LD_INT 46
54732: PUSH
54733: LD_INT 45
54735: PUSH
54736: LD_INT 47
54738: PUSH
54739: LD_INT 49
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: LIST
54754: PUSH
54755: LD_VAR 0 12
54759: ARRAY
54760: ST_TO_ADDR
// list := list isect fac_list ;
54761: LD_ADDR_VAR 0 5
54765: PUSH
54766: LD_VAR 0 5
54770: PUSH
54771: LD_VAR 0 17
54775: ISECT
54776: ST_TO_ADDR
// if not list then
54777: LD_VAR 0 5
54781: NOT
54782: IFFALSE 54786
// exit ;
54784: GO 55590
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54786: LD_VAR 0 12
54790: PUSH
54791: LD_INT 3
54793: EQUAL
54794: PUSH
54795: LD_INT 49
54797: PUSH
54798: LD_VAR 0 5
54802: IN
54803: AND
54804: PUSH
54805: LD_INT 31
54807: PPUSH
54808: LD_VAR 0 16
54812: PPUSH
54813: CALL_OW 321
54817: PUSH
54818: LD_INT 2
54820: EQUAL
54821: AND
54822: IFFALSE 54882
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54824: LD_INT 22
54826: PUSH
54827: LD_VAR 0 16
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 35
54838: PUSH
54839: LD_INT 49
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 91
54848: PUSH
54849: LD_VAR 0 1
54853: PUSH
54854: LD_INT 10
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: LIST
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: LIST
54866: PPUSH
54867: CALL_OW 69
54871: NOT
54872: IFFALSE 54882
// weapon := ru_time_lapser ;
54874: LD_ADDR_VAR 0 18
54878: PUSH
54879: LD_INT 49
54881: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54882: LD_VAR 0 12
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: IN
54897: PUSH
54898: LD_INT 11
54900: PUSH
54901: LD_VAR 0 5
54905: IN
54906: PUSH
54907: LD_INT 30
54909: PUSH
54910: LD_VAR 0 5
54914: IN
54915: OR
54916: AND
54917: PUSH
54918: LD_INT 6
54920: PPUSH
54921: LD_VAR 0 16
54925: PPUSH
54926: CALL_OW 321
54930: PUSH
54931: LD_INT 2
54933: EQUAL
54934: AND
54935: IFFALSE 55100
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54937: LD_INT 22
54939: PUSH
54940: LD_VAR 0 16
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: LD_INT 35
54954: PUSH
54955: LD_INT 11
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 35
54964: PUSH
54965: LD_INT 30
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 91
54979: PUSH
54980: LD_VAR 0 1
54984: PUSH
54985: LD_INT 18
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: LIST
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: PPUSH
54998: CALL_OW 69
55002: NOT
55003: PUSH
55004: LD_INT 22
55006: PUSH
55007: LD_VAR 0 16
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 30
55021: PUSH
55022: LD_INT 32
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 30
55031: PUSH
55032: LD_INT 33
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 91
55046: PUSH
55047: LD_VAR 0 1
55051: PUSH
55052: LD_INT 12
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: LIST
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: PPUSH
55068: CALL_OW 69
55072: PUSH
55073: LD_INT 2
55075: GREATER
55076: AND
55077: IFFALSE 55100
// weapon := [ us_radar , ar_radar ] [ nat ] ;
55079: LD_ADDR_VAR 0 18
55083: PUSH
55084: LD_INT 11
55086: PUSH
55087: LD_INT 30
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_VAR 0 12
55098: ARRAY
55099: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
55100: LD_VAR 0 18
55104: NOT
55105: PUSH
55106: LD_INT 40
55108: PPUSH
55109: LD_VAR 0 16
55113: PPUSH
55114: CALL_OW 321
55118: PUSH
55119: LD_INT 2
55121: EQUAL
55122: AND
55123: PUSH
55124: LD_INT 7
55126: PUSH
55127: LD_VAR 0 5
55131: IN
55132: PUSH
55133: LD_INT 28
55135: PUSH
55136: LD_VAR 0 5
55140: IN
55141: OR
55142: PUSH
55143: LD_INT 45
55145: PUSH
55146: LD_VAR 0 5
55150: IN
55151: OR
55152: AND
55153: IFFALSE 55407
// begin hex := GetHexInfo ( x , y ) ;
55155: LD_ADDR_VAR 0 4
55159: PUSH
55160: LD_VAR 0 10
55164: PPUSH
55165: LD_VAR 0 11
55169: PPUSH
55170: CALL_OW 546
55174: ST_TO_ADDR
// if hex [ 1 ] then
55175: LD_VAR 0 4
55179: PUSH
55180: LD_INT 1
55182: ARRAY
55183: IFFALSE 55187
// exit ;
55185: GO 55590
// height := hex [ 2 ] ;
55187: LD_ADDR_VAR 0 15
55191: PUSH
55192: LD_VAR 0 4
55196: PUSH
55197: LD_INT 2
55199: ARRAY
55200: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
55201: LD_ADDR_VAR 0 14
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: LD_INT 5
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: ST_TO_ADDR
// for i in tmp do
55224: LD_ADDR_VAR 0 8
55228: PUSH
55229: LD_VAR 0 14
55233: PUSH
55234: FOR_IN
55235: IFFALSE 55405
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
55237: LD_ADDR_VAR 0 9
55241: PUSH
55242: LD_VAR 0 10
55246: PPUSH
55247: LD_VAR 0 8
55251: PPUSH
55252: LD_INT 5
55254: PPUSH
55255: CALL_OW 272
55259: PUSH
55260: LD_VAR 0 11
55264: PPUSH
55265: LD_VAR 0 8
55269: PPUSH
55270: LD_INT 5
55272: PPUSH
55273: CALL_OW 273
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55282: LD_VAR 0 9
55286: PUSH
55287: LD_INT 1
55289: ARRAY
55290: PPUSH
55291: LD_VAR 0 9
55295: PUSH
55296: LD_INT 2
55298: ARRAY
55299: PPUSH
55300: CALL_OW 488
55304: IFFALSE 55403
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
55306: LD_ADDR_VAR 0 4
55310: PUSH
55311: LD_VAR 0 9
55315: PUSH
55316: LD_INT 1
55318: ARRAY
55319: PPUSH
55320: LD_VAR 0 9
55324: PUSH
55325: LD_INT 2
55327: ARRAY
55328: PPUSH
55329: CALL_OW 546
55333: ST_TO_ADDR
// if hex [ 1 ] then
55334: LD_VAR 0 4
55338: PUSH
55339: LD_INT 1
55341: ARRAY
55342: IFFALSE 55346
// continue ;
55344: GO 55234
// h := hex [ 2 ] ;
55346: LD_ADDR_VAR 0 13
55350: PUSH
55351: LD_VAR 0 4
55355: PUSH
55356: LD_INT 2
55358: ARRAY
55359: ST_TO_ADDR
// if h + 7 < height then
55360: LD_VAR 0 13
55364: PUSH
55365: LD_INT 7
55367: PLUS
55368: PUSH
55369: LD_VAR 0 15
55373: LESS
55374: IFFALSE 55403
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
55376: LD_ADDR_VAR 0 18
55380: PUSH
55381: LD_INT 7
55383: PUSH
55384: LD_INT 28
55386: PUSH
55387: LD_INT 45
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: PUSH
55395: LD_VAR 0 12
55399: ARRAY
55400: ST_TO_ADDR
// break ;
55401: GO 55405
// end ; end ; end ;
55403: GO 55234
55405: POP
55406: POP
// end ; if not weapon then
55407: LD_VAR 0 18
55411: NOT
55412: IFFALSE 55472
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
55414: LD_ADDR_VAR 0 5
55418: PUSH
55419: LD_VAR 0 5
55423: PUSH
55424: LD_INT 11
55426: PUSH
55427: LD_INT 30
55429: PUSH
55430: LD_INT 49
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: LIST
55437: DIFF
55438: ST_TO_ADDR
// if not list then
55439: LD_VAR 0 5
55443: NOT
55444: IFFALSE 55448
// exit ;
55446: GO 55590
// weapon := list [ rand ( 1 , list ) ] ;
55448: LD_ADDR_VAR 0 18
55452: PUSH
55453: LD_VAR 0 5
55457: PUSH
55458: LD_INT 1
55460: PPUSH
55461: LD_VAR 0 5
55465: PPUSH
55466: CALL_OW 12
55470: ARRAY
55471: ST_TO_ADDR
// end ; if weapon then
55472: LD_VAR 0 18
55476: IFFALSE 55590
// begin tmp := CostOfWeapon ( weapon ) ;
55478: LD_ADDR_VAR 0 14
55482: PUSH
55483: LD_VAR 0 18
55487: PPUSH
55488: CALL_OW 451
55492: ST_TO_ADDR
// j := GetBase ( tower ) ;
55493: LD_ADDR_VAR 0 9
55497: PUSH
55498: LD_VAR 0 1
55502: PPUSH
55503: CALL_OW 274
55507: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
55508: LD_VAR 0 9
55512: PPUSH
55513: LD_INT 1
55515: PPUSH
55516: CALL_OW 275
55520: PUSH
55521: LD_VAR 0 14
55525: PUSH
55526: LD_INT 1
55528: ARRAY
55529: GREATEREQUAL
55530: PUSH
55531: LD_VAR 0 9
55535: PPUSH
55536: LD_INT 2
55538: PPUSH
55539: CALL_OW 275
55543: PUSH
55544: LD_VAR 0 14
55548: PUSH
55549: LD_INT 2
55551: ARRAY
55552: GREATEREQUAL
55553: AND
55554: PUSH
55555: LD_VAR 0 9
55559: PPUSH
55560: LD_INT 3
55562: PPUSH
55563: CALL_OW 275
55567: PUSH
55568: LD_VAR 0 14
55572: PUSH
55573: LD_INT 3
55575: ARRAY
55576: GREATEREQUAL
55577: AND
55578: IFFALSE 55590
// result := weapon ;
55580: LD_ADDR_VAR 0 3
55584: PUSH
55585: LD_VAR 0 18
55589: ST_TO_ADDR
// end ; end ;
55590: LD_VAR 0 3
55594: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55595: LD_INT 0
55597: PPUSH
55598: PPUSH
// result := true ;
55599: LD_ADDR_VAR 0 3
55603: PUSH
55604: LD_INT 1
55606: ST_TO_ADDR
// if array1 = array2 then
55607: LD_VAR 0 1
55611: PUSH
55612: LD_VAR 0 2
55616: EQUAL
55617: IFFALSE 55677
// begin for i = 1 to array1 do
55619: LD_ADDR_VAR 0 4
55623: PUSH
55624: DOUBLE
55625: LD_INT 1
55627: DEC
55628: ST_TO_ADDR
55629: LD_VAR 0 1
55633: PUSH
55634: FOR_TO
55635: IFFALSE 55673
// if array1 [ i ] <> array2 [ i ] then
55637: LD_VAR 0 1
55641: PUSH
55642: LD_VAR 0 4
55646: ARRAY
55647: PUSH
55648: LD_VAR 0 2
55652: PUSH
55653: LD_VAR 0 4
55657: ARRAY
55658: NONEQUAL
55659: IFFALSE 55671
// begin result := false ;
55661: LD_ADDR_VAR 0 3
55665: PUSH
55666: LD_INT 0
55668: ST_TO_ADDR
// break ;
55669: GO 55673
// end ;
55671: GO 55634
55673: POP
55674: POP
// end else
55675: GO 55685
// result := false ;
55677: LD_ADDR_VAR 0 3
55681: PUSH
55682: LD_INT 0
55684: ST_TO_ADDR
// end ;
55685: LD_VAR 0 3
55689: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55690: LD_INT 0
55692: PPUSH
55693: PPUSH
// if not array1 or not array2 then
55694: LD_VAR 0 1
55698: NOT
55699: PUSH
55700: LD_VAR 0 2
55704: NOT
55705: OR
55706: IFFALSE 55710
// exit ;
55708: GO 55774
// result := true ;
55710: LD_ADDR_VAR 0 3
55714: PUSH
55715: LD_INT 1
55717: ST_TO_ADDR
// for i = 1 to array1 do
55718: LD_ADDR_VAR 0 4
55722: PUSH
55723: DOUBLE
55724: LD_INT 1
55726: DEC
55727: ST_TO_ADDR
55728: LD_VAR 0 1
55732: PUSH
55733: FOR_TO
55734: IFFALSE 55772
// if array1 [ i ] <> array2 [ i ] then
55736: LD_VAR 0 1
55740: PUSH
55741: LD_VAR 0 4
55745: ARRAY
55746: PUSH
55747: LD_VAR 0 2
55751: PUSH
55752: LD_VAR 0 4
55756: ARRAY
55757: NONEQUAL
55758: IFFALSE 55770
// begin result := false ;
55760: LD_ADDR_VAR 0 3
55764: PUSH
55765: LD_INT 0
55767: ST_TO_ADDR
// break ;
55768: GO 55772
// end ;
55770: GO 55733
55772: POP
55773: POP
// end ;
55774: LD_VAR 0 3
55778: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55779: LD_INT 0
55781: PPUSH
55782: PPUSH
55783: PPUSH
// pom := GetBase ( fac ) ;
55784: LD_ADDR_VAR 0 5
55788: PUSH
55789: LD_VAR 0 1
55793: PPUSH
55794: CALL_OW 274
55798: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55799: LD_ADDR_VAR 0 4
55803: PUSH
55804: LD_VAR 0 2
55808: PUSH
55809: LD_INT 1
55811: ARRAY
55812: PPUSH
55813: LD_VAR 0 2
55817: PUSH
55818: LD_INT 2
55820: ARRAY
55821: PPUSH
55822: LD_VAR 0 2
55826: PUSH
55827: LD_INT 3
55829: ARRAY
55830: PPUSH
55831: LD_VAR 0 2
55835: PUSH
55836: LD_INT 4
55838: ARRAY
55839: PPUSH
55840: CALL_OW 449
55844: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55845: LD_ADDR_VAR 0 3
55849: PUSH
55850: LD_VAR 0 5
55854: PPUSH
55855: LD_INT 1
55857: PPUSH
55858: CALL_OW 275
55862: PUSH
55863: LD_VAR 0 4
55867: PUSH
55868: LD_INT 1
55870: ARRAY
55871: GREATEREQUAL
55872: PUSH
55873: LD_VAR 0 5
55877: PPUSH
55878: LD_INT 2
55880: PPUSH
55881: CALL_OW 275
55885: PUSH
55886: LD_VAR 0 4
55890: PUSH
55891: LD_INT 2
55893: ARRAY
55894: GREATEREQUAL
55895: AND
55896: PUSH
55897: LD_VAR 0 5
55901: PPUSH
55902: LD_INT 3
55904: PPUSH
55905: CALL_OW 275
55909: PUSH
55910: LD_VAR 0 4
55914: PUSH
55915: LD_INT 3
55917: ARRAY
55918: GREATEREQUAL
55919: AND
55920: ST_TO_ADDR
// end ;
55921: LD_VAR 0 3
55925: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55926: LD_INT 0
55928: PPUSH
55929: PPUSH
55930: PPUSH
55931: PPUSH
// pom := GetBase ( building ) ;
55932: LD_ADDR_VAR 0 3
55936: PUSH
55937: LD_VAR 0 1
55941: PPUSH
55942: CALL_OW 274
55946: ST_TO_ADDR
// if not pom then
55947: LD_VAR 0 3
55951: NOT
55952: IFFALSE 55956
// exit ;
55954: GO 56126
// btype := GetBType ( building ) ;
55956: LD_ADDR_VAR 0 5
55960: PUSH
55961: LD_VAR 0 1
55965: PPUSH
55966: CALL_OW 266
55970: ST_TO_ADDR
// if btype = b_armoury then
55971: LD_VAR 0 5
55975: PUSH
55976: LD_INT 4
55978: EQUAL
55979: IFFALSE 55989
// btype := b_barracks ;
55981: LD_ADDR_VAR 0 5
55985: PUSH
55986: LD_INT 5
55988: ST_TO_ADDR
// if btype = b_depot then
55989: LD_VAR 0 5
55993: PUSH
55994: LD_INT 0
55996: EQUAL
55997: IFFALSE 56007
// btype := b_warehouse ;
55999: LD_ADDR_VAR 0 5
56003: PUSH
56004: LD_INT 1
56006: ST_TO_ADDR
// if btype = b_workshop then
56007: LD_VAR 0 5
56011: PUSH
56012: LD_INT 2
56014: EQUAL
56015: IFFALSE 56025
// btype := b_factory ;
56017: LD_ADDR_VAR 0 5
56021: PUSH
56022: LD_INT 3
56024: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56025: LD_ADDR_VAR 0 4
56029: PUSH
56030: LD_VAR 0 5
56034: PPUSH
56035: LD_VAR 0 1
56039: PPUSH
56040: CALL_OW 248
56044: PPUSH
56045: CALL_OW 450
56049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56050: LD_ADDR_VAR 0 2
56054: PUSH
56055: LD_VAR 0 3
56059: PPUSH
56060: LD_INT 1
56062: PPUSH
56063: CALL_OW 275
56067: PUSH
56068: LD_VAR 0 4
56072: PUSH
56073: LD_INT 1
56075: ARRAY
56076: GREATEREQUAL
56077: PUSH
56078: LD_VAR 0 3
56082: PPUSH
56083: LD_INT 2
56085: PPUSH
56086: CALL_OW 275
56090: PUSH
56091: LD_VAR 0 4
56095: PUSH
56096: LD_INT 2
56098: ARRAY
56099: GREATEREQUAL
56100: AND
56101: PUSH
56102: LD_VAR 0 3
56106: PPUSH
56107: LD_INT 3
56109: PPUSH
56110: CALL_OW 275
56114: PUSH
56115: LD_VAR 0 4
56119: PUSH
56120: LD_INT 3
56122: ARRAY
56123: GREATEREQUAL
56124: AND
56125: ST_TO_ADDR
// end ;
56126: LD_VAR 0 2
56130: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
56131: LD_INT 0
56133: PPUSH
56134: PPUSH
56135: PPUSH
// pom := GetBase ( building ) ;
56136: LD_ADDR_VAR 0 4
56140: PUSH
56141: LD_VAR 0 1
56145: PPUSH
56146: CALL_OW 274
56150: ST_TO_ADDR
// if not pom then
56151: LD_VAR 0 4
56155: NOT
56156: IFFALSE 56160
// exit ;
56158: GO 56261
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56160: LD_ADDR_VAR 0 5
56164: PUSH
56165: LD_VAR 0 2
56169: PPUSH
56170: LD_VAR 0 1
56174: PPUSH
56175: CALL_OW 248
56179: PPUSH
56180: CALL_OW 450
56184: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56185: LD_ADDR_VAR 0 3
56189: PUSH
56190: LD_VAR 0 4
56194: PPUSH
56195: LD_INT 1
56197: PPUSH
56198: CALL_OW 275
56202: PUSH
56203: LD_VAR 0 5
56207: PUSH
56208: LD_INT 1
56210: ARRAY
56211: GREATEREQUAL
56212: PUSH
56213: LD_VAR 0 4
56217: PPUSH
56218: LD_INT 2
56220: PPUSH
56221: CALL_OW 275
56225: PUSH
56226: LD_VAR 0 5
56230: PUSH
56231: LD_INT 2
56233: ARRAY
56234: GREATEREQUAL
56235: AND
56236: PUSH
56237: LD_VAR 0 4
56241: PPUSH
56242: LD_INT 3
56244: PPUSH
56245: CALL_OW 275
56249: PUSH
56250: LD_VAR 0 5
56254: PUSH
56255: LD_INT 3
56257: ARRAY
56258: GREATEREQUAL
56259: AND
56260: ST_TO_ADDR
// end ;
56261: LD_VAR 0 3
56265: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
56266: LD_INT 0
56268: PPUSH
56269: PPUSH
56270: PPUSH
56271: PPUSH
56272: PPUSH
56273: PPUSH
56274: PPUSH
56275: PPUSH
56276: PPUSH
56277: PPUSH
56278: PPUSH
// result := false ;
56279: LD_ADDR_VAR 0 8
56283: PUSH
56284: LD_INT 0
56286: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
56287: LD_VAR 0 5
56291: NOT
56292: PUSH
56293: LD_VAR 0 1
56297: NOT
56298: OR
56299: PUSH
56300: LD_VAR 0 2
56304: NOT
56305: OR
56306: PUSH
56307: LD_VAR 0 3
56311: NOT
56312: OR
56313: IFFALSE 56317
// exit ;
56315: GO 57131
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
56317: LD_ADDR_VAR 0 14
56321: PUSH
56322: LD_VAR 0 1
56326: PPUSH
56327: LD_VAR 0 2
56331: PPUSH
56332: LD_VAR 0 3
56336: PPUSH
56337: LD_VAR 0 4
56341: PPUSH
56342: LD_VAR 0 5
56346: PUSH
56347: LD_INT 1
56349: ARRAY
56350: PPUSH
56351: CALL_OW 248
56355: PPUSH
56356: LD_INT 0
56358: PPUSH
56359: CALL 58368 0 6
56363: ST_TO_ADDR
// if not hexes then
56364: LD_VAR 0 14
56368: NOT
56369: IFFALSE 56373
// exit ;
56371: GO 57131
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56373: LD_ADDR_VAR 0 17
56377: PUSH
56378: LD_VAR 0 5
56382: PPUSH
56383: LD_INT 22
56385: PUSH
56386: LD_VAR 0 13
56390: PPUSH
56391: CALL_OW 255
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: LD_INT 30
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 30
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: LIST
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PPUSH
56432: CALL_OW 72
56436: ST_TO_ADDR
// for i = 1 to hexes do
56437: LD_ADDR_VAR 0 9
56441: PUSH
56442: DOUBLE
56443: LD_INT 1
56445: DEC
56446: ST_TO_ADDR
56447: LD_VAR 0 14
56451: PUSH
56452: FOR_TO
56453: IFFALSE 57129
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56455: LD_ADDR_VAR 0 13
56459: PUSH
56460: LD_VAR 0 14
56464: PUSH
56465: LD_VAR 0 9
56469: ARRAY
56470: PUSH
56471: LD_INT 1
56473: ARRAY
56474: PPUSH
56475: LD_VAR 0 14
56479: PUSH
56480: LD_VAR 0 9
56484: ARRAY
56485: PUSH
56486: LD_INT 2
56488: ARRAY
56489: PPUSH
56490: CALL_OW 428
56494: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
56495: LD_VAR 0 14
56499: PUSH
56500: LD_VAR 0 9
56504: ARRAY
56505: PUSH
56506: LD_INT 1
56508: ARRAY
56509: PPUSH
56510: LD_VAR 0 14
56514: PUSH
56515: LD_VAR 0 9
56519: ARRAY
56520: PUSH
56521: LD_INT 2
56523: ARRAY
56524: PPUSH
56525: CALL_OW 351
56529: PUSH
56530: LD_VAR 0 14
56534: PUSH
56535: LD_VAR 0 9
56539: ARRAY
56540: PUSH
56541: LD_INT 1
56543: ARRAY
56544: PPUSH
56545: LD_VAR 0 14
56549: PUSH
56550: LD_VAR 0 9
56554: ARRAY
56555: PUSH
56556: LD_INT 2
56558: ARRAY
56559: PPUSH
56560: CALL_OW 488
56564: NOT
56565: OR
56566: PUSH
56567: LD_VAR 0 13
56571: PPUSH
56572: CALL_OW 247
56576: PUSH
56577: LD_INT 3
56579: EQUAL
56580: OR
56581: IFFALSE 56587
// exit ;
56583: POP
56584: POP
56585: GO 57131
// if not tmp then
56587: LD_VAR 0 13
56591: NOT
56592: IFFALSE 56596
// continue ;
56594: GO 56452
// result := true ;
56596: LD_ADDR_VAR 0 8
56600: PUSH
56601: LD_INT 1
56603: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
56604: LD_VAR 0 6
56608: PUSH
56609: LD_VAR 0 13
56613: PPUSH
56614: CALL_OW 247
56618: PUSH
56619: LD_INT 2
56621: EQUAL
56622: AND
56623: PUSH
56624: LD_VAR 0 13
56628: PPUSH
56629: CALL_OW 263
56633: PUSH
56634: LD_INT 1
56636: EQUAL
56637: AND
56638: IFFALSE 56802
// begin if IsDrivenBy ( tmp ) then
56640: LD_VAR 0 13
56644: PPUSH
56645: CALL_OW 311
56649: IFFALSE 56653
// continue ;
56651: GO 56452
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56653: LD_VAR 0 6
56657: PPUSH
56658: LD_INT 3
56660: PUSH
56661: LD_INT 60
56663: PUSH
56664: EMPTY
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: LD_INT 55
56676: PUSH
56677: EMPTY
56678: LIST
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PPUSH
56688: CALL_OW 72
56692: IFFALSE 56800
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56694: LD_ADDR_VAR 0 18
56698: PUSH
56699: LD_VAR 0 6
56703: PPUSH
56704: LD_INT 3
56706: PUSH
56707: LD_INT 60
56709: PUSH
56710: EMPTY
56711: LIST
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: LD_INT 55
56722: PUSH
56723: EMPTY
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PPUSH
56734: CALL_OW 72
56738: PUSH
56739: LD_INT 1
56741: ARRAY
56742: ST_TO_ADDR
// if IsInUnit ( driver ) then
56743: LD_VAR 0 18
56747: PPUSH
56748: CALL_OW 310
56752: IFFALSE 56763
// ComExit ( driver ) ;
56754: LD_VAR 0 18
56758: PPUSH
56759: CALL 81552 0 1
// AddComEnterUnit ( driver , tmp ) ;
56763: LD_VAR 0 18
56767: PPUSH
56768: LD_VAR 0 13
56772: PPUSH
56773: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56777: LD_VAR 0 18
56781: PPUSH
56782: LD_VAR 0 7
56786: PPUSH
56787: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56791: LD_VAR 0 18
56795: PPUSH
56796: CALL_OW 181
// end ; continue ;
56800: GO 56452
// end ; if not cleaners or not tmp in cleaners then
56802: LD_VAR 0 6
56806: NOT
56807: PUSH
56808: LD_VAR 0 13
56812: PUSH
56813: LD_VAR 0 6
56817: IN
56818: NOT
56819: OR
56820: IFFALSE 57127
// begin if dep then
56822: LD_VAR 0 17
56826: IFFALSE 56962
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56828: LD_ADDR_VAR 0 16
56832: PUSH
56833: LD_VAR 0 17
56837: PUSH
56838: LD_INT 1
56840: ARRAY
56841: PPUSH
56842: CALL_OW 250
56846: PPUSH
56847: LD_VAR 0 17
56851: PUSH
56852: LD_INT 1
56854: ARRAY
56855: PPUSH
56856: CALL_OW 254
56860: PPUSH
56861: LD_INT 5
56863: PPUSH
56864: CALL_OW 272
56868: PUSH
56869: LD_VAR 0 17
56873: PUSH
56874: LD_INT 1
56876: ARRAY
56877: PPUSH
56878: CALL_OW 251
56882: PPUSH
56883: LD_VAR 0 17
56887: PUSH
56888: LD_INT 1
56890: ARRAY
56891: PPUSH
56892: CALL_OW 254
56896: PPUSH
56897: LD_INT 5
56899: PPUSH
56900: CALL_OW 273
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56909: LD_VAR 0 16
56913: PUSH
56914: LD_INT 1
56916: ARRAY
56917: PPUSH
56918: LD_VAR 0 16
56922: PUSH
56923: LD_INT 2
56925: ARRAY
56926: PPUSH
56927: CALL_OW 488
56931: IFFALSE 56962
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56933: LD_VAR 0 13
56937: PPUSH
56938: LD_VAR 0 16
56942: PUSH
56943: LD_INT 1
56945: ARRAY
56946: PPUSH
56947: LD_VAR 0 16
56951: PUSH
56952: LD_INT 2
56954: ARRAY
56955: PPUSH
56956: CALL_OW 111
// continue ;
56960: GO 56452
// end ; end ; r := GetDir ( tmp ) ;
56962: LD_ADDR_VAR 0 15
56966: PUSH
56967: LD_VAR 0 13
56971: PPUSH
56972: CALL_OW 254
56976: ST_TO_ADDR
// if r = 5 then
56977: LD_VAR 0 15
56981: PUSH
56982: LD_INT 5
56984: EQUAL
56985: IFFALSE 56995
// r := 0 ;
56987: LD_ADDR_VAR 0 15
56991: PUSH
56992: LD_INT 0
56994: ST_TO_ADDR
// for j = r to 5 do
56995: LD_ADDR_VAR 0 10
56999: PUSH
57000: DOUBLE
57001: LD_VAR 0 15
57005: DEC
57006: ST_TO_ADDR
57007: LD_INT 5
57009: PUSH
57010: FOR_TO
57011: IFFALSE 57125
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
57013: LD_ADDR_VAR 0 11
57017: PUSH
57018: LD_VAR 0 13
57022: PPUSH
57023: CALL_OW 250
57027: PPUSH
57028: LD_VAR 0 10
57032: PPUSH
57033: LD_INT 2
57035: PPUSH
57036: CALL_OW 272
57040: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
57041: LD_ADDR_VAR 0 12
57045: PUSH
57046: LD_VAR 0 13
57050: PPUSH
57051: CALL_OW 251
57055: PPUSH
57056: LD_VAR 0 10
57060: PPUSH
57061: LD_INT 2
57063: PPUSH
57064: CALL_OW 273
57068: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
57069: LD_VAR 0 11
57073: PPUSH
57074: LD_VAR 0 12
57078: PPUSH
57079: CALL_OW 488
57083: PUSH
57084: LD_VAR 0 11
57088: PPUSH
57089: LD_VAR 0 12
57093: PPUSH
57094: CALL_OW 428
57098: NOT
57099: AND
57100: IFFALSE 57123
// begin ComMoveXY ( tmp , _x , _y ) ;
57102: LD_VAR 0 13
57106: PPUSH
57107: LD_VAR 0 11
57111: PPUSH
57112: LD_VAR 0 12
57116: PPUSH
57117: CALL_OW 111
// break ;
57121: GO 57125
// end ; end ;
57123: GO 57010
57125: POP
57126: POP
// end ; end ;
57127: GO 56452
57129: POP
57130: POP
// end ;
57131: LD_VAR 0 8
57135: RET
// export function BuildingTechInvented ( side , btype ) ; begin
57136: LD_INT 0
57138: PPUSH
// result := true ;
57139: LD_ADDR_VAR 0 3
57143: PUSH
57144: LD_INT 1
57146: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
57147: LD_VAR 0 2
57151: PUSH
57152: LD_INT 24
57154: DOUBLE
57155: EQUAL
57156: IFTRUE 57166
57158: LD_INT 33
57160: DOUBLE
57161: EQUAL
57162: IFTRUE 57166
57164: GO 57191
57166: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
57167: LD_ADDR_VAR 0 3
57171: PUSH
57172: LD_INT 32
57174: PPUSH
57175: LD_VAR 0 1
57179: PPUSH
57180: CALL_OW 321
57184: PUSH
57185: LD_INT 2
57187: EQUAL
57188: ST_TO_ADDR
57189: GO 57511
57191: LD_INT 20
57193: DOUBLE
57194: EQUAL
57195: IFTRUE 57199
57197: GO 57224
57199: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
57200: LD_ADDR_VAR 0 3
57204: PUSH
57205: LD_INT 6
57207: PPUSH
57208: LD_VAR 0 1
57212: PPUSH
57213: CALL_OW 321
57217: PUSH
57218: LD_INT 2
57220: EQUAL
57221: ST_TO_ADDR
57222: GO 57511
57224: LD_INT 22
57226: DOUBLE
57227: EQUAL
57228: IFTRUE 57238
57230: LD_INT 36
57232: DOUBLE
57233: EQUAL
57234: IFTRUE 57238
57236: GO 57263
57238: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
57239: LD_ADDR_VAR 0 3
57243: PUSH
57244: LD_INT 15
57246: PPUSH
57247: LD_VAR 0 1
57251: PPUSH
57252: CALL_OW 321
57256: PUSH
57257: LD_INT 2
57259: EQUAL
57260: ST_TO_ADDR
57261: GO 57511
57263: LD_INT 30
57265: DOUBLE
57266: EQUAL
57267: IFTRUE 57271
57269: GO 57296
57271: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
57272: LD_ADDR_VAR 0 3
57276: PUSH
57277: LD_INT 20
57279: PPUSH
57280: LD_VAR 0 1
57284: PPUSH
57285: CALL_OW 321
57289: PUSH
57290: LD_INT 2
57292: EQUAL
57293: ST_TO_ADDR
57294: GO 57511
57296: LD_INT 28
57298: DOUBLE
57299: EQUAL
57300: IFTRUE 57310
57302: LD_INT 21
57304: DOUBLE
57305: EQUAL
57306: IFTRUE 57310
57308: GO 57335
57310: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
57311: LD_ADDR_VAR 0 3
57315: PUSH
57316: LD_INT 21
57318: PPUSH
57319: LD_VAR 0 1
57323: PPUSH
57324: CALL_OW 321
57328: PUSH
57329: LD_INT 2
57331: EQUAL
57332: ST_TO_ADDR
57333: GO 57511
57335: LD_INT 16
57337: DOUBLE
57338: EQUAL
57339: IFTRUE 57343
57341: GO 57370
57343: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
57344: LD_ADDR_VAR 0 3
57348: PUSH
57349: LD_EXP 60
57353: PPUSH
57354: LD_VAR 0 1
57358: PPUSH
57359: CALL_OW 321
57363: PUSH
57364: LD_INT 2
57366: EQUAL
57367: ST_TO_ADDR
57368: GO 57511
57370: LD_INT 19
57372: DOUBLE
57373: EQUAL
57374: IFTRUE 57384
57376: LD_INT 23
57378: DOUBLE
57379: EQUAL
57380: IFTRUE 57384
57382: GO 57411
57384: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
57385: LD_ADDR_VAR 0 3
57389: PUSH
57390: LD_EXP 59
57394: PPUSH
57395: LD_VAR 0 1
57399: PPUSH
57400: CALL_OW 321
57404: PUSH
57405: LD_INT 2
57407: EQUAL
57408: ST_TO_ADDR
57409: GO 57511
57411: LD_INT 17
57413: DOUBLE
57414: EQUAL
57415: IFTRUE 57419
57417: GO 57444
57419: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
57420: LD_ADDR_VAR 0 3
57424: PUSH
57425: LD_INT 39
57427: PPUSH
57428: LD_VAR 0 1
57432: PPUSH
57433: CALL_OW 321
57437: PUSH
57438: LD_INT 2
57440: EQUAL
57441: ST_TO_ADDR
57442: GO 57511
57444: LD_INT 18
57446: DOUBLE
57447: EQUAL
57448: IFTRUE 57452
57450: GO 57477
57452: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
57453: LD_ADDR_VAR 0 3
57457: PUSH
57458: LD_INT 40
57460: PPUSH
57461: LD_VAR 0 1
57465: PPUSH
57466: CALL_OW 321
57470: PUSH
57471: LD_INT 2
57473: EQUAL
57474: ST_TO_ADDR
57475: GO 57511
57477: LD_INT 27
57479: DOUBLE
57480: EQUAL
57481: IFTRUE 57485
57483: GO 57510
57485: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
57486: LD_ADDR_VAR 0 3
57490: PUSH
57491: LD_INT 35
57493: PPUSH
57494: LD_VAR 0 1
57498: PPUSH
57499: CALL_OW 321
57503: PUSH
57504: LD_INT 2
57506: EQUAL
57507: ST_TO_ADDR
57508: GO 57511
57510: POP
// end ;
57511: LD_VAR 0 3
57515: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
57516: LD_INT 0
57518: PPUSH
57519: PPUSH
57520: PPUSH
57521: PPUSH
57522: PPUSH
57523: PPUSH
57524: PPUSH
57525: PPUSH
57526: PPUSH
57527: PPUSH
57528: PPUSH
// result := false ;
57529: LD_ADDR_VAR 0 6
57533: PUSH
57534: LD_INT 0
57536: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
57537: LD_VAR 0 1
57541: NOT
57542: PUSH
57543: LD_VAR 0 1
57547: PPUSH
57548: CALL_OW 266
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: IN
57563: NOT
57564: OR
57565: PUSH
57566: LD_VAR 0 2
57570: NOT
57571: OR
57572: PUSH
57573: LD_VAR 0 5
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: LD_INT 4
57592: PUSH
57593: LD_INT 5
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: IN
57604: NOT
57605: OR
57606: PUSH
57607: LD_VAR 0 3
57611: PPUSH
57612: LD_VAR 0 4
57616: PPUSH
57617: CALL_OW 488
57621: NOT
57622: OR
57623: IFFALSE 57627
// exit ;
57625: GO 58363
// side := GetSide ( depot ) ;
57627: LD_ADDR_VAR 0 9
57631: PUSH
57632: LD_VAR 0 1
57636: PPUSH
57637: CALL_OW 255
57641: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
57642: LD_VAR 0 9
57646: PPUSH
57647: LD_VAR 0 2
57651: PPUSH
57652: CALL 57136 0 2
57656: NOT
57657: IFFALSE 57661
// exit ;
57659: GO 58363
// pom := GetBase ( depot ) ;
57661: LD_ADDR_VAR 0 10
57665: PUSH
57666: LD_VAR 0 1
57670: PPUSH
57671: CALL_OW 274
57675: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57676: LD_ADDR_VAR 0 11
57680: PUSH
57681: LD_VAR 0 2
57685: PPUSH
57686: LD_VAR 0 1
57690: PPUSH
57691: CALL_OW 248
57695: PPUSH
57696: CALL_OW 450
57700: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57701: LD_VAR 0 10
57705: PPUSH
57706: LD_INT 1
57708: PPUSH
57709: CALL_OW 275
57713: PUSH
57714: LD_VAR 0 11
57718: PUSH
57719: LD_INT 1
57721: ARRAY
57722: GREATEREQUAL
57723: PUSH
57724: LD_VAR 0 10
57728: PPUSH
57729: LD_INT 2
57731: PPUSH
57732: CALL_OW 275
57736: PUSH
57737: LD_VAR 0 11
57741: PUSH
57742: LD_INT 2
57744: ARRAY
57745: GREATEREQUAL
57746: AND
57747: PUSH
57748: LD_VAR 0 10
57752: PPUSH
57753: LD_INT 3
57755: PPUSH
57756: CALL_OW 275
57760: PUSH
57761: LD_VAR 0 11
57765: PUSH
57766: LD_INT 3
57768: ARRAY
57769: GREATEREQUAL
57770: AND
57771: NOT
57772: IFFALSE 57776
// exit ;
57774: GO 58363
// if GetBType ( depot ) = b_depot then
57776: LD_VAR 0 1
57780: PPUSH
57781: CALL_OW 266
57785: PUSH
57786: LD_INT 0
57788: EQUAL
57789: IFFALSE 57801
// dist := 28 else
57791: LD_ADDR_VAR 0 14
57795: PUSH
57796: LD_INT 28
57798: ST_TO_ADDR
57799: GO 57809
// dist := 36 ;
57801: LD_ADDR_VAR 0 14
57805: PUSH
57806: LD_INT 36
57808: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57809: LD_VAR 0 1
57813: PPUSH
57814: LD_VAR 0 3
57818: PPUSH
57819: LD_VAR 0 4
57823: PPUSH
57824: CALL_OW 297
57828: PUSH
57829: LD_VAR 0 14
57833: GREATER
57834: IFFALSE 57838
// exit ;
57836: GO 58363
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57838: LD_ADDR_VAR 0 12
57842: PUSH
57843: LD_VAR 0 2
57847: PPUSH
57848: LD_VAR 0 3
57852: PPUSH
57853: LD_VAR 0 4
57857: PPUSH
57858: LD_VAR 0 5
57862: PPUSH
57863: LD_VAR 0 1
57867: PPUSH
57868: CALL_OW 248
57872: PPUSH
57873: LD_INT 0
57875: PPUSH
57876: CALL 58368 0 6
57880: ST_TO_ADDR
// if not hexes then
57881: LD_VAR 0 12
57885: NOT
57886: IFFALSE 57890
// exit ;
57888: GO 58363
// hex := GetHexInfo ( x , y ) ;
57890: LD_ADDR_VAR 0 15
57894: PUSH
57895: LD_VAR 0 3
57899: PPUSH
57900: LD_VAR 0 4
57904: PPUSH
57905: CALL_OW 546
57909: ST_TO_ADDR
// if hex [ 1 ] then
57910: LD_VAR 0 15
57914: PUSH
57915: LD_INT 1
57917: ARRAY
57918: IFFALSE 57922
// exit ;
57920: GO 58363
// height := hex [ 2 ] ;
57922: LD_ADDR_VAR 0 13
57926: PUSH
57927: LD_VAR 0 15
57931: PUSH
57932: LD_INT 2
57934: ARRAY
57935: ST_TO_ADDR
// for i = 1 to hexes do
57936: LD_ADDR_VAR 0 7
57940: PUSH
57941: DOUBLE
57942: LD_INT 1
57944: DEC
57945: ST_TO_ADDR
57946: LD_VAR 0 12
57950: PUSH
57951: FOR_TO
57952: IFFALSE 58282
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57954: LD_VAR 0 12
57958: PUSH
57959: LD_VAR 0 7
57963: ARRAY
57964: PUSH
57965: LD_INT 1
57967: ARRAY
57968: PPUSH
57969: LD_VAR 0 12
57973: PUSH
57974: LD_VAR 0 7
57978: ARRAY
57979: PUSH
57980: LD_INT 2
57982: ARRAY
57983: PPUSH
57984: CALL_OW 488
57988: NOT
57989: PUSH
57990: LD_VAR 0 12
57994: PUSH
57995: LD_VAR 0 7
57999: ARRAY
58000: PUSH
58001: LD_INT 1
58003: ARRAY
58004: PPUSH
58005: LD_VAR 0 12
58009: PUSH
58010: LD_VAR 0 7
58014: ARRAY
58015: PUSH
58016: LD_INT 2
58018: ARRAY
58019: PPUSH
58020: CALL_OW 428
58024: PUSH
58025: LD_INT 0
58027: GREATER
58028: OR
58029: PUSH
58030: LD_VAR 0 12
58034: PUSH
58035: LD_VAR 0 7
58039: ARRAY
58040: PUSH
58041: LD_INT 1
58043: ARRAY
58044: PPUSH
58045: LD_VAR 0 12
58049: PUSH
58050: LD_VAR 0 7
58054: ARRAY
58055: PUSH
58056: LD_INT 2
58058: ARRAY
58059: PPUSH
58060: CALL_OW 351
58064: OR
58065: IFFALSE 58071
// exit ;
58067: POP
58068: POP
58069: GO 58363
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58071: LD_ADDR_VAR 0 8
58075: PUSH
58076: LD_VAR 0 12
58080: PUSH
58081: LD_VAR 0 7
58085: ARRAY
58086: PUSH
58087: LD_INT 1
58089: ARRAY
58090: PPUSH
58091: LD_VAR 0 12
58095: PUSH
58096: LD_VAR 0 7
58100: ARRAY
58101: PUSH
58102: LD_INT 2
58104: ARRAY
58105: PPUSH
58106: CALL_OW 546
58110: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
58111: LD_VAR 0 8
58115: PUSH
58116: LD_INT 1
58118: ARRAY
58119: PUSH
58120: LD_VAR 0 8
58124: PUSH
58125: LD_INT 2
58127: ARRAY
58128: PUSH
58129: LD_VAR 0 13
58133: PUSH
58134: LD_INT 2
58136: PLUS
58137: GREATER
58138: OR
58139: PUSH
58140: LD_VAR 0 8
58144: PUSH
58145: LD_INT 2
58147: ARRAY
58148: PUSH
58149: LD_VAR 0 13
58153: PUSH
58154: LD_INT 2
58156: MINUS
58157: LESS
58158: OR
58159: PUSH
58160: LD_VAR 0 8
58164: PUSH
58165: LD_INT 3
58167: ARRAY
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 8
58174: PUSH
58175: LD_INT 9
58177: PUSH
58178: LD_INT 10
58180: PUSH
58181: LD_INT 11
58183: PUSH
58184: LD_INT 12
58186: PUSH
58187: LD_INT 13
58189: PUSH
58190: LD_INT 16
58192: PUSH
58193: LD_INT 17
58195: PUSH
58196: LD_INT 18
58198: PUSH
58199: LD_INT 19
58201: PUSH
58202: LD_INT 20
58204: PUSH
58205: LD_INT 21
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: IN
58223: NOT
58224: OR
58225: PUSH
58226: LD_VAR 0 8
58230: PUSH
58231: LD_INT 5
58233: ARRAY
58234: NOT
58235: OR
58236: PUSH
58237: LD_VAR 0 8
58241: PUSH
58242: LD_INT 6
58244: ARRAY
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: LD_INT 7
58254: PUSH
58255: LD_INT 9
58257: PUSH
58258: LD_INT 10
58260: PUSH
58261: LD_INT 11
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: IN
58272: NOT
58273: OR
58274: IFFALSE 58280
// exit ;
58276: POP
58277: POP
58278: GO 58363
// end ;
58280: GO 57951
58282: POP
58283: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58284: LD_VAR 0 9
58288: PPUSH
58289: LD_VAR 0 3
58293: PPUSH
58294: LD_VAR 0 4
58298: PPUSH
58299: LD_INT 20
58301: PPUSH
58302: CALL 50309 0 4
58306: PUSH
58307: LD_INT 4
58309: ARRAY
58310: IFFALSE 58314
// exit ;
58312: GO 58363
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
58314: LD_VAR 0 2
58318: PUSH
58319: LD_INT 29
58321: PUSH
58322: LD_INT 30
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: IN
58329: PUSH
58330: LD_VAR 0 3
58334: PPUSH
58335: LD_VAR 0 4
58339: PPUSH
58340: LD_VAR 0 9
58344: PPUSH
58345: CALL_OW 440
58349: NOT
58350: AND
58351: IFFALSE 58355
// exit ;
58353: GO 58363
// result := true ;
58355: LD_ADDR_VAR 0 6
58359: PUSH
58360: LD_INT 1
58362: ST_TO_ADDR
// end ;
58363: LD_VAR 0 6
58367: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
58368: LD_INT 0
58370: PPUSH
58371: PPUSH
58372: PPUSH
58373: PPUSH
58374: PPUSH
58375: PPUSH
58376: PPUSH
58377: PPUSH
58378: PPUSH
58379: PPUSH
58380: PPUSH
58381: PPUSH
58382: PPUSH
58383: PPUSH
58384: PPUSH
58385: PPUSH
58386: PPUSH
58387: PPUSH
58388: PPUSH
58389: PPUSH
58390: PPUSH
58391: PPUSH
58392: PPUSH
58393: PPUSH
58394: PPUSH
58395: PPUSH
58396: PPUSH
58397: PPUSH
58398: PPUSH
58399: PPUSH
58400: PPUSH
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
58405: PPUSH
58406: PPUSH
58407: PPUSH
58408: PPUSH
58409: PPUSH
58410: PPUSH
58411: PPUSH
58412: PPUSH
58413: PPUSH
58414: PPUSH
58415: PPUSH
58416: PPUSH
58417: PPUSH
58418: PPUSH
58419: PPUSH
58420: PPUSH
58421: PPUSH
58422: PPUSH
58423: PPUSH
58424: PPUSH
58425: PPUSH
58426: PPUSH
58427: PPUSH
// result = [ ] ;
58428: LD_ADDR_VAR 0 7
58432: PUSH
58433: EMPTY
58434: ST_TO_ADDR
// temp_list = [ ] ;
58435: LD_ADDR_VAR 0 9
58439: PUSH
58440: EMPTY
58441: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
58442: LD_VAR 0 4
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: LD_INT 3
58458: PUSH
58459: LD_INT 4
58461: PUSH
58462: LD_INT 5
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: IN
58473: NOT
58474: PUSH
58475: LD_VAR 0 1
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: IN
58490: PUSH
58491: LD_VAR 0 5
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: LIST
58509: IN
58510: NOT
58511: AND
58512: OR
58513: IFFALSE 58517
// exit ;
58515: GO 76908
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
58517: LD_VAR 0 1
58521: PUSH
58522: LD_INT 6
58524: PUSH
58525: LD_INT 7
58527: PUSH
58528: LD_INT 8
58530: PUSH
58531: LD_INT 13
58533: PUSH
58534: LD_INT 12
58536: PUSH
58537: LD_INT 15
58539: PUSH
58540: LD_INT 11
58542: PUSH
58543: LD_INT 14
58545: PUSH
58546: LD_INT 10
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: IN
58560: IFFALSE 58570
// btype = b_lab ;
58562: LD_ADDR_VAR 0 1
58566: PUSH
58567: LD_INT 6
58569: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58570: LD_VAR 0 6
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: LIST
58588: IN
58589: NOT
58590: PUSH
58591: LD_VAR 0 1
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: LD_INT 6
58610: PUSH
58611: LD_INT 36
58613: PUSH
58614: LD_INT 4
58616: PUSH
58617: LD_INT 5
58619: PUSH
58620: LD_INT 31
58622: PUSH
58623: LD_INT 32
58625: PUSH
58626: LD_INT 33
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: IN
58642: NOT
58643: PUSH
58644: LD_VAR 0 6
58648: PUSH
58649: LD_INT 1
58651: EQUAL
58652: AND
58653: OR
58654: PUSH
58655: LD_VAR 0 1
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: LD_INT 3
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: IN
58670: NOT
58671: PUSH
58672: LD_VAR 0 6
58676: PUSH
58677: LD_INT 2
58679: EQUAL
58680: AND
58681: OR
58682: IFFALSE 58692
// mode = 0 ;
58684: LD_ADDR_VAR 0 6
58688: PUSH
58689: LD_INT 0
58691: ST_TO_ADDR
// case mode of 0 :
58692: LD_VAR 0 6
58696: PUSH
58697: LD_INT 0
58699: DOUBLE
58700: EQUAL
58701: IFTRUE 58705
58703: GO 70158
58705: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58706: LD_ADDR_VAR 0 11
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 3
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58899: LD_ADDR_VAR 0 12
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 3
59056: NEG
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 3
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59095: LD_ADDR_VAR 0 13
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 3
59266: NEG
59267: PUSH
59268: LD_INT 3
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59294: LD_ADDR_VAR 0 14
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59490: LD_ADDR_VAR 0 15
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 2
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 2
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59683: LD_ADDR_VAR 0 16
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: LD_INT 3
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 2
59850: PUSH
59851: LD_INT 3
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59876: LD_ADDR_VAR 0 17
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60106: LD_ADDR_VAR 0 18
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: NEG
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: LD_INT 2
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60336: LD_ADDR_VAR 0 19
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: LD_INT 2
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60566: LD_ADDR_VAR 0 20
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60796: LD_ADDR_VAR 0 21
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 2
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: NEG
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61026: LD_ADDR_VAR 0 22
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: PUSH
61162: LD_INT 2
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: NEG
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61256: LD_ADDR_VAR 0 23
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 2
61455: NEG
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 2
61467: NEG
61468: PUSH
61469: LD_INT 3
61471: NEG
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: LD_INT 3
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
61536: LD_ADDR_VAR 0 24
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: NEG
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: LD_INT 2
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 2
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 2
61723: NEG
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: LD_INT 2
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 2
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 3
61779: PUSH
61780: LD_INT 2
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61812: LD_ADDR_VAR 0 25
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: LD_INT 1
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 2
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 2
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: LD_INT 2
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 2
61988: NEG
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 2
61999: NEG
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 3
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 3
62033: PUSH
62034: LD_INT 2
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 2
62043: PUSH
62044: LD_INT 3
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: PUSH
62054: LD_INT 3
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62086: LD_ADDR_VAR 0 26
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 2
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: LD_INT 2
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 2
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 2
62262: NEG
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 2
62285: NEG
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: LD_INT 3
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62362: LD_ADDR_VAR 0 27
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: LD_INT 2
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 2
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 2
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 2
62497: PUSH
62498: LD_INT 2
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 2
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 2
62584: NEG
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: NEG
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 3
62607: NEG
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62642: LD_ADDR_VAR 0 28
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: LD_INT 1
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: LD_INT 2
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 2
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 2
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: LD_INT 2
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 2
62829: NEG
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 2
62841: NEG
62842: PUSH
62843: LD_INT 2
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: LD_INT 3
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 3
62877: NEG
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62924: LD_ADDR_VAR 0 29
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: LD_INT 2
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 2
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: NEG
63103: PUSH
63104: LD_INT 2
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: LD_INT 3
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 2
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 3
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: LD_INT 3
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 3
63168: NEG
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63203: LD_ADDR_VAR 0 30
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: LD_INT 3
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 3
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: LD_INT 3
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 3
63446: NEG
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63481: LD_ADDR_VAR 0 31
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: NEG
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: LD_INT 2
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 2
63646: NEG
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 2
63658: NEG
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 2
63670: NEG
63671: PUSH
63672: LD_INT 3
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 3
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 3
63724: NEG
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63759: LD_ADDR_VAR 0 32
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 1
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: LD_INT 2
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: NEG
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: LD_INT 3
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: PUSH
63961: LD_INT 2
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 3
63971: PUSH
63972: LD_INT 2
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 2
63981: PUSH
63982: LD_INT 3
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 3
64002: NEG
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64037: LD_ADDR_VAR 0 33
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: LD_INT 1
64057: NEG
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: LD_INT 1
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: NEG
64096: PUSH
64097: LD_INT 0
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 1
64106: NEG
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: NEG
64119: PUSH
64120: LD_INT 2
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 2
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: LD_INT 2
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 2
64192: NEG
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 2
64203: NEG
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 2
64215: NEG
64216: PUSH
64217: LD_INT 2
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 2
64227: NEG
64228: PUSH
64229: LD_INT 3
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 2
64239: PUSH
64240: LD_INT 1
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 3
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: LD_INT 3
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 3
64281: NEG
64282: PUSH
64283: LD_INT 2
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64316: LD_ADDR_VAR 0 34
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: NEG
64375: PUSH
64376: LD_INT 0
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: LD_INT 1
64389: NEG
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: LD_INT 2
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: LD_INT 2
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: LD_INT 1
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 2
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 2
64441: PUSH
64442: LD_INT 2
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: LD_INT 2
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 2
64472: NEG
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 2
64483: NEG
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 2
64495: NEG
64496: PUSH
64497: LD_INT 2
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: LD_INT 3
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: LD_INT 2
64522: NEG
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 3
64530: PUSH
64531: LD_INT 2
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: LD_INT 3
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 3
64561: NEG
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64596: LD_ADDR_VAR 0 35
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: LD_INT 1
64616: NEG
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: LD_INT 1
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 1
64665: NEG
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 2
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 2
64687: NEG
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64708: LD_ADDR_VAR 0 36
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 1
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: LD_INT 1
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 2
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64820: LD_ADDR_VAR 0 37
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: LD_INT 1
64904: NEG
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64932: LD_ADDR_VAR 0 38
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: LD_INT 1
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 2
65023: NEG
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65044: LD_ADDR_VAR 0 39
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: LD_INT 1
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: NEG
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: NEG
65126: PUSH
65127: LD_INT 2
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: LD_INT 2
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65156: LD_ADDR_VAR 0 40
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 0
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 1
65194: PUSH
65195: LD_INT 1
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 0
65204: PUSH
65205: LD_INT 1
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65268: LD_ADDR_VAR 0 41
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: LD_INT 2
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 2
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: LD_INT 1
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 2
65392: PUSH
65393: LD_INT 2
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 2
65423: NEG
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 2
65446: NEG
65447: PUSH
65448: LD_INT 2
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 2
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 3
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 3
65491: PUSH
65492: LD_INT 1
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 3
65501: PUSH
65502: LD_INT 2
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 3
65511: PUSH
65512: LD_INT 3
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 2
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 2
65531: NEG
65532: PUSH
65533: LD_INT 1
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 3
65542: NEG
65543: PUSH
65544: LD_INT 0
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: LD_INT 1
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 3
65565: NEG
65566: PUSH
65567: LD_INT 2
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: LD_INT 3
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65618: LD_ADDR_VAR 0 42
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: LD_INT 1
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: NEG
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: LD_INT 1
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 1
65699: NEG
65700: PUSH
65701: LD_INT 2
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: LD_INT 2
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 2
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: LD_INT 2
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: LD_INT 2
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 1
65773: NEG
65774: PUSH
65775: LD_INT 1
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 2
65796: NEG
65797: PUSH
65798: LD_INT 2
65800: NEG
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 2
65808: NEG
65809: PUSH
65810: LD_INT 3
65812: NEG
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: NEG
65821: PUSH
65822: LD_INT 3
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 3
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: LD_INT 2
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 3
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 3
65864: PUSH
65865: LD_INT 3
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 3
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: LD_INT 2
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 3
65915: NEG
65916: PUSH
65917: LD_INT 2
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: LD_INT 3
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65968: LD_ADDR_VAR 0 43
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 1
66037: NEG
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 1
66049: NEG
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 1
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: LD_INT 2
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 0
66113: PUSH
66114: LD_INT 2
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 1
66123: NEG
66124: PUSH
66125: LD_INT 1
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 2
66134: NEG
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 2
66145: NEG
66146: PUSH
66147: LD_INT 1
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: LD_INT 3
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 0
66169: PUSH
66170: LD_INT 3
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: LD_INT 2
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 2
66191: PUSH
66192: LD_INT 1
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 3
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 3
66212: PUSH
66213: LD_INT 1
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: LD_INT 3
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: LD_INT 3
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: NEG
66243: PUSH
66244: LD_INT 2
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 2
66253: NEG
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 3
66264: NEG
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 3
66275: NEG
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66316: LD_ADDR_VAR 0 44
66320: PUSH
66321: LD_INT 0
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 1
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 1
66374: NEG
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 1
66385: NEG
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 1
66397: NEG
66398: PUSH
66399: LD_INT 2
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 2
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 2
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: LD_INT 2
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: NEG
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 2
66471: NEG
66472: PUSH
66473: LD_INT 0
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 2
66482: NEG
66483: PUSH
66484: LD_INT 1
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 2
66494: NEG
66495: PUSH
66496: LD_INT 2
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 2
66506: NEG
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: LD_INT 1
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 3
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 3
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 3
66559: PUSH
66560: LD_INT 3
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 2
66569: PUSH
66570: LD_INT 3
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 2
66579: NEG
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 3
66590: NEG
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 3
66601: NEG
66602: PUSH
66603: LD_INT 1
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 3
66613: NEG
66614: PUSH
66615: LD_INT 2
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: NEG
66626: PUSH
66627: LD_INT 3
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66666: LD_ADDR_VAR 0 45
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 1
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: LD_INT 1
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: LD_INT 2
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: LD_INT 2
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 2
66781: PUSH
66782: LD_INT 1
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: LD_INT 2
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: LD_INT 2
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: LD_INT 2
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 2
66832: NEG
66833: PUSH
66834: LD_INT 1
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 2
66844: NEG
66845: PUSH
66846: LD_INT 2
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 2
66856: NEG
66857: PUSH
66858: LD_INT 3
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: LD_INT 3
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: LD_INT 3
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: LD_INT 2
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 3
66902: PUSH
66903: LD_INT 2
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: PUSH
66913: LD_INT 3
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 3
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: LD_INT 2
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 3
66963: NEG
66964: PUSH
66965: LD_INT 2
66967: NEG
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 3
66975: NEG
66976: PUSH
66977: LD_INT 3
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67016: LD_ADDR_VAR 0 46
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: LD_INT 1
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: NEG
67098: PUSH
67099: LD_INT 2
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: LD_INT 2
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: LD_INT 1
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 2
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 2
67141: PUSH
67142: LD_INT 1
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 1
67151: PUSH
67152: LD_INT 2
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: LD_INT 2
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: LD_INT 1
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 2
67182: NEG
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 2
67193: NEG
67194: PUSH
67195: LD_INT 1
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 1
67205: NEG
67206: PUSH
67207: LD_INT 3
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: LD_INT 3
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 1
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 2
67239: PUSH
67240: LD_INT 1
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 3
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 3
67260: PUSH
67261: LD_INT 1
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: LD_INT 3
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 0
67280: PUSH
67281: LD_INT 3
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 1
67290: NEG
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 2
67301: NEG
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 3
67312: NEG
67313: PUSH
67314: LD_INT 0
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67364: LD_ADDR_VAR 0 47
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: LD_INT 1
67384: NEG
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 0
67412: PUSH
67413: LD_INT 1
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 1
67433: NEG
67434: PUSH
67435: LD_INT 1
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: LD_INT 2
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 2
67460: NEG
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 2
67479: NEG
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 2
67491: NEG
67492: PUSH
67493: LD_INT 2
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67515: LD_ADDR_VAR 0 48
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 0
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 1
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: LD_INT 1
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: LD_INT 1
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: NEG
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: LD_INT 1
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: PUSH
67598: LD_INT 2
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: LD_INT 2
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 1
67619: PUSH
67620: LD_INT 1
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 2
67630: PUSH
67631: LD_INT 0
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 2
67640: PUSH
67641: LD_INT 1
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67662: LD_ADDR_VAR 0 49
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: LD_INT 1
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: LD_INT 0
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 1
67700: PUSH
67701: LD_INT 1
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: LD_INT 1
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 1
67731: NEG
67732: PUSH
67733: LD_INT 1
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: PUSH
67744: LD_INT 1
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 2
67754: PUSH
67755: LD_INT 0
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 2
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 2
67774: PUSH
67775: LD_INT 2
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: LD_INT 2
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67806: LD_ADDR_VAR 0 50
67810: PUSH
67811: LD_INT 0
67813: PUSH
67814: LD_INT 0
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: LD_INT 1
67826: NEG
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 1
67834: PUSH
67835: LD_INT 0
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 1
67844: PUSH
67845: LD_INT 1
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: LD_INT 1
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 1
67864: NEG
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 1
67875: NEG
67876: PUSH
67877: LD_INT 1
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 2
67887: PUSH
67888: LD_INT 1
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 2
67897: PUSH
67898: LD_INT 2
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 1
67907: PUSH
67908: LD_INT 2
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 1
67927: NEG
67928: PUSH
67929: LD_INT 1
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67950: LD_ADDR_VAR 0 51
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 1
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 1
67988: PUSH
67989: LD_INT 1
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: LD_INT 1
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 1
68008: NEG
68009: PUSH
68010: LD_INT 0
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: PUSH
68021: LD_INT 1
68023: NEG
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 1
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: LD_INT 2
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 1
68051: NEG
68052: PUSH
68053: LD_INT 1
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 2
68062: NEG
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 2
68073: NEG
68074: PUSH
68075: LD_INT 1
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68097: LD_ADDR_VAR 0 52
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 1
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 1
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 1
68135: PUSH
68136: LD_INT 1
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 0
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 1
68155: NEG
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 1
68166: NEG
68167: PUSH
68168: LD_INT 1
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 1
68178: NEG
68179: PUSH
68180: LD_INT 2
68182: NEG
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 1
68190: NEG
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 2
68201: NEG
68202: PUSH
68203: LD_INT 0
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 2
68212: NEG
68213: PUSH
68214: LD_INT 1
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 2
68224: NEG
68225: PUSH
68226: LD_INT 2
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68248: LD_ADDR_VAR 0 53
68252: PUSH
68253: LD_INT 0
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: LD_INT 1
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 1
68276: PUSH
68277: LD_INT 0
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: LD_INT 1
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 1
68306: NEG
68307: PUSH
68308: LD_INT 0
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 1
68317: NEG
68318: PUSH
68319: LD_INT 1
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: LD_INT 2
68333: NEG
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 0
68341: PUSH
68342: LD_INT 2
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 1
68352: PUSH
68353: LD_INT 1
68355: NEG
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 2
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 2
68373: PUSH
68374: LD_INT 1
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 2
68383: PUSH
68384: LD_INT 2
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 1
68393: PUSH
68394: LD_INT 2
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: LD_INT 2
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 1
68413: NEG
68414: PUSH
68415: LD_INT 1
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 2
68424: NEG
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 2
68435: NEG
68436: PUSH
68437: LD_INT 1
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 2
68447: NEG
68448: PUSH
68449: LD_INT 2
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68478: LD_ADDR_VAR 0 54
68482: PUSH
68483: LD_INT 0
68485: PUSH
68486: LD_INT 0
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: LD_INT 1
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 1
68506: PUSH
68507: LD_INT 0
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: PUSH
68517: LD_INT 1
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 0
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 1
68536: NEG
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 1
68547: NEG
68548: PUSH
68549: LD_INT 1
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 1
68559: NEG
68560: PUSH
68561: LD_INT 2
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: LD_INT 2
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 1
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 2
68593: PUSH
68594: LD_INT 0
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 2
68603: PUSH
68604: LD_INT 1
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 2
68613: PUSH
68614: LD_INT 2
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 1
68623: PUSH
68624: LD_INT 2
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: LD_INT 2
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 1
68643: NEG
68644: PUSH
68645: LD_INT 1
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 2
68654: NEG
68655: PUSH
68656: LD_INT 0
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: NEG
68666: PUSH
68667: LD_INT 1
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PUSH
68679: LD_INT 2
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68708: LD_ADDR_VAR 0 55
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 0
68725: PUSH
68726: LD_INT 1
68728: NEG
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 1
68736: PUSH
68737: LD_INT 0
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 1
68746: PUSH
68747: LD_INT 1
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 1
68766: NEG
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 1
68777: NEG
68778: PUSH
68779: LD_INT 1
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: PUSH
68791: LD_INT 2
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 1
68812: PUSH
68813: LD_INT 1
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 2
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 2
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 2
68843: PUSH
68844: LD_INT 2
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 1
68853: PUSH
68854: LD_INT 2
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 0
68863: PUSH
68864: LD_INT 2
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 1
68873: NEG
68874: PUSH
68875: LD_INT 1
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 2
68884: NEG
68885: PUSH
68886: LD_INT 0
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 2
68895: NEG
68896: PUSH
68897: LD_INT 1
68899: NEG
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 2
68907: NEG
68908: PUSH
68909: LD_INT 2
68911: NEG
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68938: LD_ADDR_VAR 0 56
68942: PUSH
68943: LD_INT 0
68945: PUSH
68946: LD_INT 0
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 0
68955: PUSH
68956: LD_INT 1
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 1
68966: PUSH
68967: LD_INT 0
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: LD_INT 1
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: LD_INT 1
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 1
68996: NEG
68997: PUSH
68998: LD_INT 0
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 1
69007: NEG
69008: PUSH
69009: LD_INT 1
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 1
69019: NEG
69020: PUSH
69021: LD_INT 2
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 0
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: PUSH
69043: LD_INT 1
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 2
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 2
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 2
69073: PUSH
69074: LD_INT 2
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 1
69083: PUSH
69084: LD_INT 2
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: LD_INT 2
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 1
69103: NEG
69104: PUSH
69105: LD_INT 1
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 2
69114: NEG
69115: PUSH
69116: LD_INT 0
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 2
69125: NEG
69126: PUSH
69127: LD_INT 1
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 2
69137: NEG
69138: PUSH
69139: LD_INT 2
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69168: LD_ADDR_VAR 0 57
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: LD_INT 1
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 1
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: PUSH
69207: LD_INT 1
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 1
69226: NEG
69227: PUSH
69228: LD_INT 0
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 1
69237: NEG
69238: PUSH
69239: LD_INT 1
69241: NEG
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 1
69249: NEG
69250: PUSH
69251: LD_INT 2
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 0
69261: PUSH
69262: LD_INT 2
69264: NEG
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 1
69272: PUSH
69273: LD_INT 1
69275: NEG
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 2
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 2
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 2
69303: PUSH
69304: LD_INT 2
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 1
69313: PUSH
69314: LD_INT 2
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 0
69323: PUSH
69324: LD_INT 2
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: NEG
69334: PUSH
69335: LD_INT 1
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: LD_INT 0
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 2
69355: NEG
69356: PUSH
69357: LD_INT 1
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 2
69367: NEG
69368: PUSH
69369: LD_INT 2
69371: NEG
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69398: LD_ADDR_VAR 0 58
69402: PUSH
69403: LD_INT 0
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 0
69415: PUSH
69416: LD_INT 1
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 1
69426: PUSH
69427: LD_INT 0
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 1
69436: PUSH
69437: LD_INT 1
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 0
69446: PUSH
69447: LD_INT 1
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 1
69456: NEG
69457: PUSH
69458: LD_INT 0
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 1
69467: NEG
69468: PUSH
69469: LD_INT 1
69471: NEG
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 1
69479: NEG
69480: PUSH
69481: LD_INT 2
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 0
69491: PUSH
69492: LD_INT 2
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 1
69502: PUSH
69503: LD_INT 1
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 2
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: LD_INT 2
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 0
69553: PUSH
69554: LD_INT 2
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 1
69563: NEG
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: LD_INT 0
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 2
69585: NEG
69586: PUSH
69587: LD_INT 1
69589: NEG
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 2
69597: NEG
69598: PUSH
69599: LD_INT 2
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69628: LD_ADDR_VAR 0 59
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: LD_INT 0
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 0
69645: PUSH
69646: LD_INT 1
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 1
69656: PUSH
69657: LD_INT 0
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 1
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 0
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 1
69686: NEG
69687: PUSH
69688: LD_INT 0
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 1
69697: NEG
69698: PUSH
69699: LD_INT 1
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69716: LD_ADDR_VAR 0 60
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 0
69733: PUSH
69734: LD_INT 1
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 1
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 1
69754: PUSH
69755: LD_INT 1
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 0
69764: PUSH
69765: LD_INT 1
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 1
69774: NEG
69775: PUSH
69776: LD_INT 0
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 1
69785: NEG
69786: PUSH
69787: LD_INT 1
69789: NEG
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69804: LD_ADDR_VAR 0 61
69808: PUSH
69809: LD_INT 0
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: LD_INT 1
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: PUSH
69833: LD_INT 0
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 1
69842: PUSH
69843: LD_INT 1
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 0
69852: PUSH
69853: LD_INT 1
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 1
69862: NEG
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 1
69873: NEG
69874: PUSH
69875: LD_INT 1
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69892: LD_ADDR_VAR 0 62
69896: PUSH
69897: LD_INT 0
69899: PUSH
69900: LD_INT 0
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 0
69909: PUSH
69910: LD_INT 1
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 1
69920: PUSH
69921: LD_INT 0
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 1
69930: PUSH
69931: LD_INT 1
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 0
69940: PUSH
69941: LD_INT 1
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 1
69950: NEG
69951: PUSH
69952: LD_INT 0
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 1
69961: NEG
69962: PUSH
69963: LD_INT 1
69965: NEG
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69980: LD_ADDR_VAR 0 63
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 0
69997: PUSH
69998: LD_INT 1
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 1
70008: PUSH
70009: LD_INT 0
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 1
70018: PUSH
70019: LD_INT 1
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 0
70028: PUSH
70029: LD_INT 1
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 1
70038: NEG
70039: PUSH
70040: LD_INT 0
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 1
70049: NEG
70050: PUSH
70051: LD_INT 1
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70068: LD_ADDR_VAR 0 64
70072: PUSH
70073: LD_INT 0
70075: PUSH
70076: LD_INT 0
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 0
70085: PUSH
70086: LD_INT 1
70088: NEG
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 1
70096: PUSH
70097: LD_INT 0
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 1
70106: PUSH
70107: LD_INT 1
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 0
70116: PUSH
70117: LD_INT 1
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 1
70126: NEG
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 1
70137: NEG
70138: PUSH
70139: LD_INT 1
70141: NEG
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: ST_TO_ADDR
// end ; 1 :
70156: GO 76053
70158: LD_INT 1
70160: DOUBLE
70161: EQUAL
70162: IFTRUE 70166
70164: GO 72789
70166: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70167: LD_ADDR_VAR 0 11
70171: PUSH
70172: LD_INT 1
70174: NEG
70175: PUSH
70176: LD_INT 3
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: LD_INT 3
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: LD_INT 2
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: LIST
70210: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70211: LD_ADDR_VAR 0 12
70215: PUSH
70216: LD_INT 2
70218: PUSH
70219: LD_INT 1
70221: NEG
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 3
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 3
70239: PUSH
70240: LD_INT 1
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: LIST
70251: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70252: LD_ADDR_VAR 0 13
70256: PUSH
70257: LD_INT 3
70259: PUSH
70260: LD_INT 2
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 3
70269: PUSH
70270: LD_INT 3
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 2
70279: PUSH
70280: LD_INT 3
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70292: LD_ADDR_VAR 0 14
70296: PUSH
70297: LD_INT 1
70299: PUSH
70300: LD_INT 3
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: LD_INT 3
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 1
70319: NEG
70320: PUSH
70321: LD_INT 2
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: LIST
70332: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70333: LD_ADDR_VAR 0 15
70337: PUSH
70338: LD_INT 2
70340: NEG
70341: PUSH
70342: LD_INT 1
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 3
70351: NEG
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 3
70362: NEG
70363: PUSH
70364: LD_INT 1
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: LIST
70376: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70377: LD_ADDR_VAR 0 16
70381: PUSH
70382: LD_INT 2
70384: NEG
70385: PUSH
70386: LD_INT 3
70388: NEG
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 3
70396: NEG
70397: PUSH
70398: LD_INT 2
70400: NEG
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 3
70408: NEG
70409: PUSH
70410: LD_INT 3
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: LIST
70422: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70423: LD_ADDR_VAR 0 17
70427: PUSH
70428: LD_INT 1
70430: NEG
70431: PUSH
70432: LD_INT 3
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 0
70442: PUSH
70443: LD_INT 3
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 1
70453: PUSH
70454: LD_INT 2
70456: NEG
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: LIST
70466: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70467: LD_ADDR_VAR 0 18
70471: PUSH
70472: LD_INT 2
70474: PUSH
70475: LD_INT 1
70477: NEG
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 3
70485: PUSH
70486: LD_INT 0
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 3
70495: PUSH
70496: LD_INT 1
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: LIST
70507: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70508: LD_ADDR_VAR 0 19
70512: PUSH
70513: LD_INT 3
70515: PUSH
70516: LD_INT 2
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 3
70525: PUSH
70526: LD_INT 3
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 2
70535: PUSH
70536: LD_INT 3
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: LIST
70547: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70548: LD_ADDR_VAR 0 20
70552: PUSH
70553: LD_INT 1
70555: PUSH
70556: LD_INT 3
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 0
70565: PUSH
70566: LD_INT 3
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 1
70575: NEG
70576: PUSH
70577: LD_INT 2
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: LIST
70588: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70589: LD_ADDR_VAR 0 21
70593: PUSH
70594: LD_INT 2
70596: NEG
70597: PUSH
70598: LD_INT 1
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 3
70607: NEG
70608: PUSH
70609: LD_INT 0
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 3
70618: NEG
70619: PUSH
70620: LD_INT 1
70622: NEG
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: LIST
70632: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70633: LD_ADDR_VAR 0 22
70637: PUSH
70638: LD_INT 2
70640: NEG
70641: PUSH
70642: LD_INT 3
70644: NEG
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 3
70652: NEG
70653: PUSH
70654: LD_INT 2
70656: NEG
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 3
70664: NEG
70665: PUSH
70666: LD_INT 3
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: LIST
70678: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70679: LD_ADDR_VAR 0 23
70683: PUSH
70684: LD_INT 0
70686: PUSH
70687: LD_INT 3
70689: NEG
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 1
70697: NEG
70698: PUSH
70699: LD_INT 4
70701: NEG
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 1
70709: PUSH
70710: LD_INT 3
70712: NEG
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: LIST
70722: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70723: LD_ADDR_VAR 0 24
70727: PUSH
70728: LD_INT 3
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 3
70740: PUSH
70741: LD_INT 1
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 4
70751: PUSH
70752: LD_INT 1
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: LIST
70763: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70764: LD_ADDR_VAR 0 25
70768: PUSH
70769: LD_INT 3
70771: PUSH
70772: LD_INT 3
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 4
70781: PUSH
70782: LD_INT 3
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 3
70791: PUSH
70792: LD_INT 4
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: LIST
70803: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70804: LD_ADDR_VAR 0 26
70808: PUSH
70809: LD_INT 0
70811: PUSH
70812: LD_INT 3
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: PUSH
70822: LD_INT 4
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 1
70831: NEG
70832: PUSH
70833: LD_INT 3
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: LIST
70844: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70845: LD_ADDR_VAR 0 27
70849: PUSH
70850: LD_INT 3
70852: NEG
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 3
70863: NEG
70864: PUSH
70865: LD_INT 1
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 4
70874: NEG
70875: PUSH
70876: LD_INT 1
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: LIST
70888: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70889: LD_ADDR_VAR 0 28
70893: PUSH
70894: LD_INT 3
70896: NEG
70897: PUSH
70898: LD_INT 3
70900: NEG
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 3
70908: NEG
70909: PUSH
70910: LD_INT 4
70912: NEG
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 4
70920: NEG
70921: PUSH
70922: LD_INT 3
70924: NEG
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: LIST
70934: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70935: LD_ADDR_VAR 0 29
70939: PUSH
70940: LD_INT 1
70942: NEG
70943: PUSH
70944: LD_INT 3
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 0
70954: PUSH
70955: LD_INT 3
70957: NEG
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 1
70965: PUSH
70966: LD_INT 2
70968: NEG
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 1
70976: NEG
70977: PUSH
70978: LD_INT 4
70980: NEG
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 0
70988: PUSH
70989: LD_INT 4
70991: NEG
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 1
70999: PUSH
71000: LD_INT 3
71002: NEG
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 1
71010: NEG
71011: PUSH
71012: LD_INT 5
71014: NEG
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 0
71022: PUSH
71023: LD_INT 5
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 1
71033: PUSH
71034: LD_INT 4
71036: NEG
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 1
71044: NEG
71045: PUSH
71046: LD_INT 6
71048: NEG
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 0
71056: PUSH
71057: LD_INT 6
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 1
71067: PUSH
71068: LD_INT 5
71070: NEG
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
71090: LD_ADDR_VAR 0 30
71094: PUSH
71095: LD_INT 2
71097: PUSH
71098: LD_INT 1
71100: NEG
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 3
71108: PUSH
71109: LD_INT 0
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 3
71118: PUSH
71119: LD_INT 1
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 3
71128: PUSH
71129: LD_INT 1
71131: NEG
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 4
71139: PUSH
71140: LD_INT 0
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 4
71149: PUSH
71150: LD_INT 1
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 4
71159: PUSH
71160: LD_INT 1
71162: NEG
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 5
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 5
71180: PUSH
71181: LD_INT 1
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 5
71190: PUSH
71191: LD_INT 1
71193: NEG
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 6
71201: PUSH
71202: LD_INT 0
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 6
71211: PUSH
71212: LD_INT 1
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
71233: LD_ADDR_VAR 0 31
71237: PUSH
71238: LD_INT 3
71240: PUSH
71241: LD_INT 2
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 3
71250: PUSH
71251: LD_INT 3
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 2
71260: PUSH
71261: LD_INT 3
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 4
71270: PUSH
71271: LD_INT 3
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 4
71280: PUSH
71281: LD_INT 4
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 3
71290: PUSH
71291: LD_INT 4
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 5
71300: PUSH
71301: LD_INT 4
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 5
71310: PUSH
71311: LD_INT 5
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 4
71320: PUSH
71321: LD_INT 5
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 6
71330: PUSH
71331: LD_INT 5
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 6
71340: PUSH
71341: LD_INT 6
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 5
71350: PUSH
71351: LD_INT 6
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71372: LD_ADDR_VAR 0 32
71376: PUSH
71377: LD_INT 1
71379: PUSH
71380: LD_INT 3
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 0
71389: PUSH
71390: LD_INT 3
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 1
71399: NEG
71400: PUSH
71401: LD_INT 2
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 1
71410: PUSH
71411: LD_INT 4
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: LD_INT 4
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 1
71430: NEG
71431: PUSH
71432: LD_INT 3
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 1
71441: PUSH
71442: LD_INT 5
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: LD_INT 5
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 1
71461: NEG
71462: PUSH
71463: LD_INT 4
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 1
71472: PUSH
71473: LD_INT 6
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 0
71482: PUSH
71483: LD_INT 6
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 1
71492: NEG
71493: PUSH
71494: LD_INT 5
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
71515: LD_ADDR_VAR 0 33
71519: PUSH
71520: LD_INT 2
71522: NEG
71523: PUSH
71524: LD_INT 1
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 3
71533: NEG
71534: PUSH
71535: LD_INT 0
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 3
71544: NEG
71545: PUSH
71546: LD_INT 1
71548: NEG
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 3
71556: NEG
71557: PUSH
71558: LD_INT 1
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 4
71567: NEG
71568: PUSH
71569: LD_INT 0
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 4
71578: NEG
71579: PUSH
71580: LD_INT 1
71582: NEG
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 4
71590: NEG
71591: PUSH
71592: LD_INT 1
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 5
71601: NEG
71602: PUSH
71603: LD_INT 0
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PUSH
71610: LD_INT 5
71612: NEG
71613: PUSH
71614: LD_INT 1
71616: NEG
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 5
71624: NEG
71625: PUSH
71626: LD_INT 1
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 6
71635: NEG
71636: PUSH
71637: LD_INT 0
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 6
71646: NEG
71647: PUSH
71648: LD_INT 1
71650: NEG
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71670: LD_ADDR_VAR 0 34
71674: PUSH
71675: LD_INT 2
71677: NEG
71678: PUSH
71679: LD_INT 3
71681: NEG
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 3
71689: NEG
71690: PUSH
71691: LD_INT 2
71693: NEG
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 3
71701: NEG
71702: PUSH
71703: LD_INT 3
71705: NEG
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 3
71713: NEG
71714: PUSH
71715: LD_INT 4
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 4
71725: NEG
71726: PUSH
71727: LD_INT 3
71729: NEG
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 4
71737: NEG
71738: PUSH
71739: LD_INT 4
71741: NEG
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 4
71749: NEG
71750: PUSH
71751: LD_INT 5
71753: NEG
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 5
71761: NEG
71762: PUSH
71763: LD_INT 4
71765: NEG
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 5
71773: NEG
71774: PUSH
71775: LD_INT 5
71777: NEG
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 5
71785: NEG
71786: PUSH
71787: LD_INT 6
71789: NEG
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 6
71797: NEG
71798: PUSH
71799: LD_INT 5
71801: NEG
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 6
71809: NEG
71810: PUSH
71811: LD_INT 6
71813: NEG
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71833: LD_ADDR_VAR 0 41
71837: PUSH
71838: LD_INT 0
71840: PUSH
71841: LD_INT 2
71843: NEG
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 1
71851: NEG
71852: PUSH
71853: LD_INT 3
71855: NEG
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: LD_INT 1
71863: PUSH
71864: LD_INT 2
71866: NEG
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: LIST
71876: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71877: LD_ADDR_VAR 0 42
71881: PUSH
71882: LD_INT 2
71884: PUSH
71885: LD_INT 0
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 2
71894: PUSH
71895: LD_INT 1
71897: NEG
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 3
71905: PUSH
71906: LD_INT 1
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: LIST
71917: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71918: LD_ADDR_VAR 0 43
71922: PUSH
71923: LD_INT 2
71925: PUSH
71926: LD_INT 2
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 3
71935: PUSH
71936: LD_INT 2
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 2
71945: PUSH
71946: LD_INT 3
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: LIST
71957: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71958: LD_ADDR_VAR 0 44
71962: PUSH
71963: LD_INT 0
71965: PUSH
71966: LD_INT 2
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 1
71975: PUSH
71976: LD_INT 3
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 1
71985: NEG
71986: PUSH
71987: LD_INT 2
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: LIST
71998: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71999: LD_ADDR_VAR 0 45
72003: PUSH
72004: LD_INT 2
72006: NEG
72007: PUSH
72008: LD_INT 0
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 2
72017: NEG
72018: PUSH
72019: LD_INT 1
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 3
72028: NEG
72029: PUSH
72030: LD_INT 1
72032: NEG
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: LIST
72042: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
72043: LD_ADDR_VAR 0 46
72047: PUSH
72048: LD_INT 2
72050: NEG
72051: PUSH
72052: LD_INT 2
72054: NEG
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_INT 2
72062: NEG
72063: PUSH
72064: LD_INT 3
72066: NEG
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 3
72074: NEG
72075: PUSH
72076: LD_INT 2
72078: NEG
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: LIST
72088: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
72089: LD_ADDR_VAR 0 47
72093: PUSH
72094: LD_INT 2
72096: NEG
72097: PUSH
72098: LD_INT 3
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 1
72108: NEG
72109: PUSH
72110: LD_INT 3
72112: NEG
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72122: LD_ADDR_VAR 0 48
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: LD_INT 2
72132: NEG
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 2
72140: PUSH
72141: LD_INT 1
72143: NEG
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
72153: LD_ADDR_VAR 0 49
72157: PUSH
72158: LD_INT 3
72160: PUSH
72161: LD_INT 1
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 3
72170: PUSH
72171: LD_INT 2
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
72182: LD_ADDR_VAR 0 50
72186: PUSH
72187: LD_INT 2
72189: PUSH
72190: LD_INT 3
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 1
72199: PUSH
72200: LD_INT 3
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72211: LD_ADDR_VAR 0 51
72215: PUSH
72216: LD_INT 1
72218: NEG
72219: PUSH
72220: LD_INT 2
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 2
72229: NEG
72230: PUSH
72231: LD_INT 1
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72242: LD_ADDR_VAR 0 52
72246: PUSH
72247: LD_INT 3
72249: NEG
72250: PUSH
72251: LD_INT 1
72253: NEG
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 3
72261: NEG
72262: PUSH
72263: LD_INT 2
72265: NEG
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72275: LD_ADDR_VAR 0 53
72279: PUSH
72280: LD_INT 1
72282: NEG
72283: PUSH
72284: LD_INT 3
72286: NEG
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 0
72294: PUSH
72295: LD_INT 3
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 1
72305: PUSH
72306: LD_INT 2
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: LIST
72318: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72319: LD_ADDR_VAR 0 54
72323: PUSH
72324: LD_INT 2
72326: PUSH
72327: LD_INT 1
72329: NEG
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 3
72337: PUSH
72338: LD_INT 0
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 3
72347: PUSH
72348: LD_INT 1
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: LIST
72359: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72360: LD_ADDR_VAR 0 55
72364: PUSH
72365: LD_INT 3
72367: PUSH
72368: LD_INT 2
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 3
72377: PUSH
72378: LD_INT 3
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 2
72387: PUSH
72388: LD_INT 3
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: LIST
72399: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72400: LD_ADDR_VAR 0 56
72404: PUSH
72405: LD_INT 1
72407: PUSH
72408: LD_INT 3
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 0
72417: PUSH
72418: LD_INT 3
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 1
72427: NEG
72428: PUSH
72429: LD_INT 2
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: LIST
72440: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72441: LD_ADDR_VAR 0 57
72445: PUSH
72446: LD_INT 2
72448: NEG
72449: PUSH
72450: LD_INT 1
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 3
72459: NEG
72460: PUSH
72461: LD_INT 0
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 3
72470: NEG
72471: PUSH
72472: LD_INT 1
72474: NEG
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: LIST
72484: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72485: LD_ADDR_VAR 0 58
72489: PUSH
72490: LD_INT 2
72492: NEG
72493: PUSH
72494: LD_INT 3
72496: NEG
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 3
72504: NEG
72505: PUSH
72506: LD_INT 2
72508: NEG
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 3
72516: NEG
72517: PUSH
72518: LD_INT 3
72520: NEG
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: LIST
72530: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
72531: LD_ADDR_VAR 0 59
72535: PUSH
72536: LD_INT 1
72538: NEG
72539: PUSH
72540: LD_INT 2
72542: NEG
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 0
72550: PUSH
72551: LD_INT 2
72553: NEG
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 1
72561: PUSH
72562: LD_INT 1
72564: NEG
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: LIST
72574: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72575: LD_ADDR_VAR 0 60
72579: PUSH
72580: LD_INT 1
72582: PUSH
72583: LD_INT 1
72585: NEG
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 2
72593: PUSH
72594: LD_INT 0
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 2
72603: PUSH
72604: LD_INT 1
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: LIST
72615: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72616: LD_ADDR_VAR 0 61
72620: PUSH
72621: LD_INT 2
72623: PUSH
72624: LD_INT 1
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PUSH
72631: LD_INT 2
72633: PUSH
72634: LD_INT 2
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: LD_INT 1
72643: PUSH
72644: LD_INT 2
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: LIST
72655: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72656: LD_ADDR_VAR 0 62
72660: PUSH
72661: LD_INT 1
72663: PUSH
72664: LD_INT 2
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 0
72673: PUSH
72674: LD_INT 2
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 1
72683: NEG
72684: PUSH
72685: LD_INT 1
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: LIST
72696: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72697: LD_ADDR_VAR 0 63
72701: PUSH
72702: LD_INT 1
72704: NEG
72705: PUSH
72706: LD_INT 1
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 2
72715: NEG
72716: PUSH
72717: LD_INT 0
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 2
72726: NEG
72727: PUSH
72728: LD_INT 1
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: LIST
72740: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72741: LD_ADDR_VAR 0 64
72745: PUSH
72746: LD_INT 1
72748: NEG
72749: PUSH
72750: LD_INT 2
72752: NEG
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 2
72760: NEG
72761: PUSH
72762: LD_INT 1
72764: NEG
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PUSH
72770: LD_INT 2
72772: NEG
72773: PUSH
72774: LD_INT 2
72776: NEG
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: LIST
72786: ST_TO_ADDR
// end ; 2 :
72787: GO 76053
72789: LD_INT 2
72791: DOUBLE
72792: EQUAL
72793: IFTRUE 72797
72795: GO 76052
72797: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72798: LD_ADDR_VAR 0 29
72802: PUSH
72803: LD_INT 4
72805: PUSH
72806: LD_INT 0
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 4
72815: PUSH
72816: LD_INT 1
72818: NEG
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 5
72826: PUSH
72827: LD_INT 0
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PUSH
72834: LD_INT 5
72836: PUSH
72837: LD_INT 1
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: LD_INT 4
72846: PUSH
72847: LD_INT 1
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 3
72856: PUSH
72857: LD_INT 0
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 3
72866: PUSH
72867: LD_INT 1
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 3
72877: PUSH
72878: LD_INT 2
72880: NEG
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 5
72888: PUSH
72889: LD_INT 2
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: LD_INT 3
72898: PUSH
72899: LD_INT 3
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 3
72908: PUSH
72909: LD_INT 2
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PUSH
72916: LD_INT 4
72918: PUSH
72919: LD_INT 3
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 4
72928: PUSH
72929: LD_INT 4
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 3
72938: PUSH
72939: LD_INT 4
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 2
72948: PUSH
72949: LD_INT 3
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PUSH
72956: LD_INT 2
72958: PUSH
72959: LD_INT 2
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 4
72968: PUSH
72969: LD_INT 2
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: LD_INT 2
72978: PUSH
72979: LD_INT 4
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PUSH
72986: LD_INT 0
72988: PUSH
72989: LD_INT 4
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 0
72998: PUSH
72999: LD_INT 3
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 1
73008: PUSH
73009: LD_INT 4
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 1
73018: PUSH
73019: LD_INT 5
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_INT 0
73028: PUSH
73029: LD_INT 5
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 1
73038: NEG
73039: PUSH
73040: LD_INT 4
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 1
73049: NEG
73050: PUSH
73051: LD_INT 3
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 2
73060: PUSH
73061: LD_INT 5
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 2
73070: NEG
73071: PUSH
73072: LD_INT 3
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 3
73081: NEG
73082: PUSH
73083: LD_INT 0
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 3
73092: NEG
73093: PUSH
73094: LD_INT 1
73096: NEG
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 2
73104: NEG
73105: PUSH
73106: LD_INT 0
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 2
73115: NEG
73116: PUSH
73117: LD_INT 1
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 3
73126: NEG
73127: PUSH
73128: LD_INT 1
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 4
73137: NEG
73138: PUSH
73139: LD_INT 0
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 4
73148: NEG
73149: PUSH
73150: LD_INT 1
73152: NEG
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 4
73160: NEG
73161: PUSH
73162: LD_INT 2
73164: NEG
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 2
73172: NEG
73173: PUSH
73174: LD_INT 2
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 4
73183: NEG
73184: PUSH
73185: LD_INT 4
73187: NEG
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 4
73195: NEG
73196: PUSH
73197: LD_INT 5
73199: NEG
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: PUSH
73205: LD_INT 3
73207: NEG
73208: PUSH
73209: LD_INT 4
73211: NEG
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 3
73219: NEG
73220: PUSH
73221: LD_INT 3
73223: NEG
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 4
73231: NEG
73232: PUSH
73233: LD_INT 3
73235: NEG
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 5
73243: NEG
73244: PUSH
73245: LD_INT 4
73247: NEG
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 5
73255: NEG
73256: PUSH
73257: LD_INT 5
73259: NEG
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 3
73267: NEG
73268: PUSH
73269: LD_INT 5
73271: NEG
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: LD_INT 5
73279: NEG
73280: PUSH
73281: LD_INT 3
73283: NEG
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73336: LD_ADDR_VAR 0 30
73340: PUSH
73341: LD_INT 4
73343: PUSH
73344: LD_INT 4
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 4
73353: PUSH
73354: LD_INT 3
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 5
73363: PUSH
73364: LD_INT 4
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 5
73373: PUSH
73374: LD_INT 5
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 4
73383: PUSH
73384: LD_INT 5
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 3
73393: PUSH
73394: LD_INT 4
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 3
73403: PUSH
73404: LD_INT 3
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 5
73413: PUSH
73414: LD_INT 3
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 3
73423: PUSH
73424: LD_INT 5
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 0
73433: PUSH
73434: LD_INT 3
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 0
73443: PUSH
73444: LD_INT 2
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 1
73453: PUSH
73454: LD_INT 3
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 1
73463: PUSH
73464: LD_INT 4
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 0
73473: PUSH
73474: LD_INT 4
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 1
73483: NEG
73484: PUSH
73485: LD_INT 3
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 1
73494: NEG
73495: PUSH
73496: LD_INT 2
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_INT 2
73505: PUSH
73506: LD_INT 4
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: PUSH
73513: LD_INT 2
73515: NEG
73516: PUSH
73517: LD_INT 2
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 4
73526: NEG
73527: PUSH
73528: LD_INT 0
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 4
73537: NEG
73538: PUSH
73539: LD_INT 1
73541: NEG
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 3
73549: NEG
73550: PUSH
73551: LD_INT 0
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: LD_INT 3
73560: NEG
73561: PUSH
73562: LD_INT 1
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: LD_INT 4
73571: NEG
73572: PUSH
73573: LD_INT 1
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 5
73582: NEG
73583: PUSH
73584: LD_INT 0
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: LD_INT 5
73593: NEG
73594: PUSH
73595: LD_INT 1
73597: NEG
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: LD_INT 5
73605: NEG
73606: PUSH
73607: LD_INT 2
73609: NEG
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: PUSH
73615: LD_INT 3
73617: NEG
73618: PUSH
73619: LD_INT 2
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 3
73628: NEG
73629: PUSH
73630: LD_INT 3
73632: NEG
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 3
73640: NEG
73641: PUSH
73642: LD_INT 4
73644: NEG
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 2
73652: NEG
73653: PUSH
73654: LD_INT 3
73656: NEG
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 2
73664: NEG
73665: PUSH
73666: LD_INT 2
73668: NEG
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 3
73676: NEG
73677: PUSH
73678: LD_INT 2
73680: NEG
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 4
73688: NEG
73689: PUSH
73690: LD_INT 3
73692: NEG
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 4
73700: NEG
73701: PUSH
73702: LD_INT 4
73704: NEG
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: PUSH
73710: LD_INT 2
73712: NEG
73713: PUSH
73714: LD_INT 4
73716: NEG
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 4
73724: NEG
73725: PUSH
73726: LD_INT 2
73728: NEG
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: LD_INT 0
73736: PUSH
73737: LD_INT 4
73739: NEG
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: LD_INT 5
73750: NEG
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 1
73758: PUSH
73759: LD_INT 4
73761: NEG
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PUSH
73767: LD_INT 1
73769: PUSH
73770: LD_INT 3
73772: NEG
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 0
73780: PUSH
73781: LD_INT 3
73783: NEG
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: PUSH
73789: LD_INT 1
73791: NEG
73792: PUSH
73793: LD_INT 4
73795: NEG
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 1
73803: NEG
73804: PUSH
73805: LD_INT 5
73807: NEG
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: LD_INT 2
73815: PUSH
73816: LD_INT 3
73818: NEG
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: LD_INT 2
73826: NEG
73827: PUSH
73828: LD_INT 5
73830: NEG
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73883: LD_ADDR_VAR 0 31
73887: PUSH
73888: LD_INT 0
73890: PUSH
73891: LD_INT 4
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 0
73900: PUSH
73901: LD_INT 3
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 1
73910: PUSH
73911: LD_INT 4
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: PUSH
73918: LD_INT 1
73920: PUSH
73921: LD_INT 5
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: PUSH
73928: LD_INT 0
73930: PUSH
73931: LD_INT 5
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 1
73940: NEG
73941: PUSH
73942: LD_INT 4
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 1
73951: NEG
73952: PUSH
73953: LD_INT 3
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: PUSH
73960: LD_INT 2
73962: PUSH
73963: LD_INT 5
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: PUSH
73970: LD_INT 2
73972: NEG
73973: PUSH
73974: LD_INT 3
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 3
73983: NEG
73984: PUSH
73985: LD_INT 0
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 3
73994: NEG
73995: PUSH
73996: LD_INT 1
73998: NEG
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PUSH
74004: LD_INT 2
74006: NEG
74007: PUSH
74008: LD_INT 0
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: PUSH
74015: LD_INT 2
74017: NEG
74018: PUSH
74019: LD_INT 1
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_INT 3
74028: NEG
74029: PUSH
74030: LD_INT 1
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: PUSH
74037: LD_INT 4
74039: NEG
74040: PUSH
74041: LD_INT 0
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 4
74050: NEG
74051: PUSH
74052: LD_INT 1
74054: NEG
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 4
74062: NEG
74063: PUSH
74064: LD_INT 2
74066: NEG
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 2
74074: NEG
74075: PUSH
74076: LD_INT 2
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: LD_INT 4
74085: NEG
74086: PUSH
74087: LD_INT 4
74089: NEG
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 4
74097: NEG
74098: PUSH
74099: LD_INT 5
74101: NEG
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 3
74109: NEG
74110: PUSH
74111: LD_INT 4
74113: NEG
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PUSH
74119: LD_INT 3
74121: NEG
74122: PUSH
74123: LD_INT 3
74125: NEG
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: PUSH
74131: LD_INT 4
74133: NEG
74134: PUSH
74135: LD_INT 3
74137: NEG
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: PUSH
74143: LD_INT 5
74145: NEG
74146: PUSH
74147: LD_INT 4
74149: NEG
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: LD_INT 5
74157: NEG
74158: PUSH
74159: LD_INT 5
74161: NEG
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 3
74169: NEG
74170: PUSH
74171: LD_INT 5
74173: NEG
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_INT 5
74181: NEG
74182: PUSH
74183: LD_INT 3
74185: NEG
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 0
74193: PUSH
74194: LD_INT 3
74196: NEG
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 0
74204: PUSH
74205: LD_INT 4
74207: NEG
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: PUSH
74213: LD_INT 1
74215: PUSH
74216: LD_INT 3
74218: NEG
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: PUSH
74224: LD_INT 1
74226: PUSH
74227: LD_INT 2
74229: NEG
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PUSH
74235: LD_INT 0
74237: PUSH
74238: LD_INT 2
74240: NEG
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 1
74248: NEG
74249: PUSH
74250: LD_INT 3
74252: NEG
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: LD_INT 1
74260: NEG
74261: PUSH
74262: LD_INT 4
74264: NEG
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: PUSH
74270: LD_INT 2
74272: PUSH
74273: LD_INT 2
74275: NEG
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: PUSH
74281: LD_INT 2
74283: NEG
74284: PUSH
74285: LD_INT 4
74287: NEG
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PUSH
74293: LD_INT 4
74295: PUSH
74296: LD_INT 0
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: LD_INT 4
74305: PUSH
74306: LD_INT 1
74308: NEG
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 5
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_INT 5
74326: PUSH
74327: LD_INT 1
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: PUSH
74334: LD_INT 4
74336: PUSH
74337: LD_INT 1
74339: PUSH
74340: EMPTY
74341: LIST
74342: LIST
74343: PUSH
74344: LD_INT 3
74346: PUSH
74347: LD_INT 0
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PUSH
74354: LD_INT 3
74356: PUSH
74357: LD_INT 1
74359: NEG
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: PUSH
74365: LD_INT 3
74367: PUSH
74368: LD_INT 2
74370: NEG
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 5
74378: PUSH
74379: LD_INT 2
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
74433: LD_ADDR_VAR 0 32
74437: PUSH
74438: LD_INT 4
74440: NEG
74441: PUSH
74442: LD_INT 0
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: LD_INT 4
74451: NEG
74452: PUSH
74453: LD_INT 1
74455: NEG
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: LD_INT 3
74463: NEG
74464: PUSH
74465: LD_INT 0
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: PUSH
74472: LD_INT 3
74474: NEG
74475: PUSH
74476: LD_INT 1
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 4
74485: NEG
74486: PUSH
74487: LD_INT 1
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 5
74496: NEG
74497: PUSH
74498: LD_INT 0
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 5
74507: NEG
74508: PUSH
74509: LD_INT 1
74511: NEG
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 5
74519: NEG
74520: PUSH
74521: LD_INT 2
74523: NEG
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: PUSH
74529: LD_INT 3
74531: NEG
74532: PUSH
74533: LD_INT 2
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: LD_INT 3
74542: NEG
74543: PUSH
74544: LD_INT 3
74546: NEG
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: PUSH
74552: LD_INT 3
74554: NEG
74555: PUSH
74556: LD_INT 4
74558: NEG
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: LD_INT 2
74566: NEG
74567: PUSH
74568: LD_INT 3
74570: NEG
74571: PUSH
74572: EMPTY
74573: LIST
74574: LIST
74575: PUSH
74576: LD_INT 2
74578: NEG
74579: PUSH
74580: LD_INT 2
74582: NEG
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 3
74590: NEG
74591: PUSH
74592: LD_INT 2
74594: NEG
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: LD_INT 4
74602: NEG
74603: PUSH
74604: LD_INT 3
74606: NEG
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: PUSH
74612: LD_INT 4
74614: NEG
74615: PUSH
74616: LD_INT 4
74618: NEG
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: PUSH
74624: LD_INT 2
74626: NEG
74627: PUSH
74628: LD_INT 4
74630: NEG
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: LD_INT 4
74638: NEG
74639: PUSH
74640: LD_INT 2
74642: NEG
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PUSH
74648: LD_INT 0
74650: PUSH
74651: LD_INT 4
74653: NEG
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: PUSH
74659: LD_INT 0
74661: PUSH
74662: LD_INT 5
74664: NEG
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: PUSH
74670: LD_INT 1
74672: PUSH
74673: LD_INT 4
74675: NEG
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 1
74683: PUSH
74684: LD_INT 3
74686: NEG
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: PUSH
74692: LD_INT 0
74694: PUSH
74695: LD_INT 3
74697: NEG
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: PUSH
74703: LD_INT 1
74705: NEG
74706: PUSH
74707: LD_INT 4
74709: NEG
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 1
74717: NEG
74718: PUSH
74719: LD_INT 5
74721: NEG
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: PUSH
74727: LD_INT 2
74729: PUSH
74730: LD_INT 3
74732: NEG
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: LD_INT 2
74740: NEG
74741: PUSH
74742: LD_INT 5
74744: NEG
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 3
74752: PUSH
74753: LD_INT 0
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 3
74762: PUSH
74763: LD_INT 1
74765: NEG
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 4
74773: PUSH
74774: LD_INT 0
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 4
74783: PUSH
74784: LD_INT 1
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PUSH
74791: LD_INT 3
74793: PUSH
74794: LD_INT 1
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 2
74803: PUSH
74804: LD_INT 0
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: PUSH
74811: LD_INT 2
74813: PUSH
74814: LD_INT 1
74816: NEG
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PUSH
74822: LD_INT 2
74824: PUSH
74825: LD_INT 2
74827: NEG
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: PUSH
74833: LD_INT 4
74835: PUSH
74836: LD_INT 2
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: PUSH
74843: LD_INT 4
74845: PUSH
74846: LD_INT 4
74848: PUSH
74849: EMPTY
74850: LIST
74851: LIST
74852: PUSH
74853: LD_INT 4
74855: PUSH
74856: LD_INT 3
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: PUSH
74863: LD_INT 5
74865: PUSH
74866: LD_INT 4
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: PUSH
74873: LD_INT 5
74875: PUSH
74876: LD_INT 5
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: PUSH
74883: LD_INT 4
74885: PUSH
74886: LD_INT 5
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 3
74895: PUSH
74896: LD_INT 4
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: LD_INT 3
74905: PUSH
74906: LD_INT 3
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 5
74915: PUSH
74916: LD_INT 3
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: PUSH
74923: LD_INT 3
74925: PUSH
74926: LD_INT 5
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74980: LD_ADDR_VAR 0 33
74984: PUSH
74985: LD_INT 4
74987: NEG
74988: PUSH
74989: LD_INT 4
74991: NEG
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: PUSH
74997: LD_INT 4
74999: NEG
75000: PUSH
75001: LD_INT 5
75003: NEG
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: PUSH
75009: LD_INT 3
75011: NEG
75012: PUSH
75013: LD_INT 4
75015: NEG
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PUSH
75021: LD_INT 3
75023: NEG
75024: PUSH
75025: LD_INT 3
75027: NEG
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: PUSH
75033: LD_INT 4
75035: NEG
75036: PUSH
75037: LD_INT 3
75039: NEG
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: PUSH
75045: LD_INT 5
75047: NEG
75048: PUSH
75049: LD_INT 4
75051: NEG
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: LD_INT 5
75059: NEG
75060: PUSH
75061: LD_INT 5
75063: NEG
75064: PUSH
75065: EMPTY
75066: LIST
75067: LIST
75068: PUSH
75069: LD_INT 3
75071: NEG
75072: PUSH
75073: LD_INT 5
75075: NEG
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 5
75083: NEG
75084: PUSH
75085: LD_INT 3
75087: NEG
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PUSH
75093: LD_INT 0
75095: PUSH
75096: LD_INT 3
75098: NEG
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: PUSH
75104: LD_INT 0
75106: PUSH
75107: LD_INT 4
75109: NEG
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: PUSH
75115: LD_INT 1
75117: PUSH
75118: LD_INT 3
75120: NEG
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: PUSH
75126: LD_INT 1
75128: PUSH
75129: LD_INT 2
75131: NEG
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: PUSH
75137: LD_INT 0
75139: PUSH
75140: LD_INT 2
75142: NEG
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PUSH
75148: LD_INT 1
75150: NEG
75151: PUSH
75152: LD_INT 3
75154: NEG
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 1
75162: NEG
75163: PUSH
75164: LD_INT 4
75166: NEG
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: PUSH
75172: LD_INT 2
75174: PUSH
75175: LD_INT 2
75177: NEG
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PUSH
75183: LD_INT 2
75185: NEG
75186: PUSH
75187: LD_INT 4
75189: NEG
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: LD_INT 4
75197: PUSH
75198: LD_INT 0
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 4
75207: PUSH
75208: LD_INT 1
75210: NEG
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: PUSH
75216: LD_INT 5
75218: PUSH
75219: LD_INT 0
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: PUSH
75226: LD_INT 5
75228: PUSH
75229: LD_INT 1
75231: PUSH
75232: EMPTY
75233: LIST
75234: LIST
75235: PUSH
75236: LD_INT 4
75238: PUSH
75239: LD_INT 1
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 3
75248: PUSH
75249: LD_INT 0
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: LD_INT 3
75258: PUSH
75259: LD_INT 1
75261: NEG
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: PUSH
75267: LD_INT 3
75269: PUSH
75270: LD_INT 2
75272: NEG
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PUSH
75278: LD_INT 5
75280: PUSH
75281: LD_INT 2
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: PUSH
75288: LD_INT 3
75290: PUSH
75291: LD_INT 3
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: PUSH
75298: LD_INT 3
75300: PUSH
75301: LD_INT 2
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: PUSH
75308: LD_INT 4
75310: PUSH
75311: LD_INT 3
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: PUSH
75318: LD_INT 4
75320: PUSH
75321: LD_INT 4
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 3
75330: PUSH
75331: LD_INT 4
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: PUSH
75338: LD_INT 2
75340: PUSH
75341: LD_INT 3
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: PUSH
75348: LD_INT 2
75350: PUSH
75351: LD_INT 2
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: LD_INT 4
75360: PUSH
75361: LD_INT 2
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: PUSH
75368: LD_INT 2
75370: PUSH
75371: LD_INT 4
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: PUSH
75378: LD_INT 0
75380: PUSH
75381: LD_INT 4
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PUSH
75388: LD_INT 0
75390: PUSH
75391: LD_INT 3
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: PUSH
75398: LD_INT 1
75400: PUSH
75401: LD_INT 4
75403: PUSH
75404: EMPTY
75405: LIST
75406: LIST
75407: PUSH
75408: LD_INT 1
75410: PUSH
75411: LD_INT 5
75413: PUSH
75414: EMPTY
75415: LIST
75416: LIST
75417: PUSH
75418: LD_INT 0
75420: PUSH
75421: LD_INT 5
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: PUSH
75428: LD_INT 1
75430: NEG
75431: PUSH
75432: LD_INT 4
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: PUSH
75439: LD_INT 1
75441: NEG
75442: PUSH
75443: LD_INT 3
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 2
75452: PUSH
75453: LD_INT 5
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PUSH
75460: LD_INT 2
75462: NEG
75463: PUSH
75464: LD_INT 3
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: LIST
75475: LIST
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
75518: LD_ADDR_VAR 0 34
75522: PUSH
75523: LD_INT 0
75525: PUSH
75526: LD_INT 4
75528: NEG
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: PUSH
75534: LD_INT 0
75536: PUSH
75537: LD_INT 5
75539: NEG
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: PUSH
75545: LD_INT 1
75547: PUSH
75548: LD_INT 4
75550: NEG
75551: PUSH
75552: EMPTY
75553: LIST
75554: LIST
75555: PUSH
75556: LD_INT 1
75558: PUSH
75559: LD_INT 3
75561: NEG
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 0
75569: PUSH
75570: LD_INT 3
75572: NEG
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: LD_INT 1
75580: NEG
75581: PUSH
75582: LD_INT 4
75584: NEG
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: PUSH
75590: LD_INT 1
75592: NEG
75593: PUSH
75594: LD_INT 5
75596: NEG
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PUSH
75602: LD_INT 2
75604: PUSH
75605: LD_INT 3
75607: NEG
75608: PUSH
75609: EMPTY
75610: LIST
75611: LIST
75612: PUSH
75613: LD_INT 2
75615: NEG
75616: PUSH
75617: LD_INT 5
75619: NEG
75620: PUSH
75621: EMPTY
75622: LIST
75623: LIST
75624: PUSH
75625: LD_INT 3
75627: PUSH
75628: LD_INT 0
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: PUSH
75635: LD_INT 3
75637: PUSH
75638: LD_INT 1
75640: NEG
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: PUSH
75646: LD_INT 4
75648: PUSH
75649: LD_INT 0
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: PUSH
75656: LD_INT 4
75658: PUSH
75659: LD_INT 1
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: PUSH
75666: LD_INT 3
75668: PUSH
75669: LD_INT 1
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: PUSH
75676: LD_INT 2
75678: PUSH
75679: LD_INT 0
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: PUSH
75686: LD_INT 2
75688: PUSH
75689: LD_INT 1
75691: NEG
75692: PUSH
75693: EMPTY
75694: LIST
75695: LIST
75696: PUSH
75697: LD_INT 2
75699: PUSH
75700: LD_INT 2
75702: NEG
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 4
75710: PUSH
75711: LD_INT 2
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 4
75720: PUSH
75721: LD_INT 4
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PUSH
75728: LD_INT 4
75730: PUSH
75731: LD_INT 3
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 5
75740: PUSH
75741: LD_INT 4
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: PUSH
75748: LD_INT 5
75750: PUSH
75751: LD_INT 5
75753: PUSH
75754: EMPTY
75755: LIST
75756: LIST
75757: PUSH
75758: LD_INT 4
75760: PUSH
75761: LD_INT 5
75763: PUSH
75764: EMPTY
75765: LIST
75766: LIST
75767: PUSH
75768: LD_INT 3
75770: PUSH
75771: LD_INT 4
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: PUSH
75778: LD_INT 3
75780: PUSH
75781: LD_INT 3
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: PUSH
75788: LD_INT 5
75790: PUSH
75791: LD_INT 3
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: PUSH
75798: LD_INT 3
75800: PUSH
75801: LD_INT 5
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PUSH
75808: LD_INT 0
75810: PUSH
75811: LD_INT 3
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PUSH
75818: LD_INT 0
75820: PUSH
75821: LD_INT 2
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PUSH
75828: LD_INT 1
75830: PUSH
75831: LD_INT 3
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 1
75840: PUSH
75841: LD_INT 4
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PUSH
75848: LD_INT 0
75850: PUSH
75851: LD_INT 4
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: PUSH
75858: LD_INT 1
75860: NEG
75861: PUSH
75862: LD_INT 3
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: PUSH
75869: LD_INT 1
75871: NEG
75872: PUSH
75873: LD_INT 2
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: PUSH
75880: LD_INT 2
75882: PUSH
75883: LD_INT 4
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: PUSH
75890: LD_INT 2
75892: NEG
75893: PUSH
75894: LD_INT 2
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: LD_INT 4
75903: NEG
75904: PUSH
75905: LD_INT 0
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: PUSH
75912: LD_INT 4
75914: NEG
75915: PUSH
75916: LD_INT 1
75918: NEG
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 3
75926: NEG
75927: PUSH
75928: LD_INT 0
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: LD_INT 3
75937: NEG
75938: PUSH
75939: LD_INT 1
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: PUSH
75946: LD_INT 4
75948: NEG
75949: PUSH
75950: LD_INT 1
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: PUSH
75957: LD_INT 5
75959: NEG
75960: PUSH
75961: LD_INT 0
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: PUSH
75968: LD_INT 5
75970: NEG
75971: PUSH
75972: LD_INT 1
75974: NEG
75975: PUSH
75976: EMPTY
75977: LIST
75978: LIST
75979: PUSH
75980: LD_INT 5
75982: NEG
75983: PUSH
75984: LD_INT 2
75986: NEG
75987: PUSH
75988: EMPTY
75989: LIST
75990: LIST
75991: PUSH
75992: LD_INT 3
75994: NEG
75995: PUSH
75996: LD_INT 2
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: PUSH
76003: EMPTY
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: ST_TO_ADDR
// end ; end ;
76050: GO 76053
76052: POP
// case btype of b_depot , b_warehouse :
76053: LD_VAR 0 1
76057: PUSH
76058: LD_INT 0
76060: DOUBLE
76061: EQUAL
76062: IFTRUE 76072
76064: LD_INT 1
76066: DOUBLE
76067: EQUAL
76068: IFTRUE 76072
76070: GO 76273
76072: POP
// case nation of nation_american :
76073: LD_VAR 0 5
76077: PUSH
76078: LD_INT 1
76080: DOUBLE
76081: EQUAL
76082: IFTRUE 76086
76084: GO 76142
76086: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
76087: LD_ADDR_VAR 0 9
76091: PUSH
76092: LD_VAR 0 11
76096: PUSH
76097: LD_VAR 0 12
76101: PUSH
76102: LD_VAR 0 13
76106: PUSH
76107: LD_VAR 0 14
76111: PUSH
76112: LD_VAR 0 15
76116: PUSH
76117: LD_VAR 0 16
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: LIST
76129: PUSH
76130: LD_VAR 0 4
76134: PUSH
76135: LD_INT 1
76137: PLUS
76138: ARRAY
76139: ST_TO_ADDR
76140: GO 76271
76142: LD_INT 2
76144: DOUBLE
76145: EQUAL
76146: IFTRUE 76150
76148: GO 76206
76150: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
76151: LD_ADDR_VAR 0 9
76155: PUSH
76156: LD_VAR 0 17
76160: PUSH
76161: LD_VAR 0 18
76165: PUSH
76166: LD_VAR 0 19
76170: PUSH
76171: LD_VAR 0 20
76175: PUSH
76176: LD_VAR 0 21
76180: PUSH
76181: LD_VAR 0 22
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: PUSH
76194: LD_VAR 0 4
76198: PUSH
76199: LD_INT 1
76201: PLUS
76202: ARRAY
76203: ST_TO_ADDR
76204: GO 76271
76206: LD_INT 3
76208: DOUBLE
76209: EQUAL
76210: IFTRUE 76214
76212: GO 76270
76214: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
76215: LD_ADDR_VAR 0 9
76219: PUSH
76220: LD_VAR 0 23
76224: PUSH
76225: LD_VAR 0 24
76229: PUSH
76230: LD_VAR 0 25
76234: PUSH
76235: LD_VAR 0 26
76239: PUSH
76240: LD_VAR 0 27
76244: PUSH
76245: LD_VAR 0 28
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: PUSH
76258: LD_VAR 0 4
76262: PUSH
76263: LD_INT 1
76265: PLUS
76266: ARRAY
76267: ST_TO_ADDR
76268: GO 76271
76270: POP
76271: GO 76826
76273: LD_INT 2
76275: DOUBLE
76276: EQUAL
76277: IFTRUE 76287
76279: LD_INT 3
76281: DOUBLE
76282: EQUAL
76283: IFTRUE 76287
76285: GO 76343
76287: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
76288: LD_ADDR_VAR 0 9
76292: PUSH
76293: LD_VAR 0 29
76297: PUSH
76298: LD_VAR 0 30
76302: PUSH
76303: LD_VAR 0 31
76307: PUSH
76308: LD_VAR 0 32
76312: PUSH
76313: LD_VAR 0 33
76317: PUSH
76318: LD_VAR 0 34
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: LIST
76327: LIST
76328: LIST
76329: LIST
76330: PUSH
76331: LD_VAR 0 4
76335: PUSH
76336: LD_INT 1
76338: PLUS
76339: ARRAY
76340: ST_TO_ADDR
76341: GO 76826
76343: LD_INT 16
76345: DOUBLE
76346: EQUAL
76347: IFTRUE 76405
76349: LD_INT 17
76351: DOUBLE
76352: EQUAL
76353: IFTRUE 76405
76355: LD_INT 18
76357: DOUBLE
76358: EQUAL
76359: IFTRUE 76405
76361: LD_INT 19
76363: DOUBLE
76364: EQUAL
76365: IFTRUE 76405
76367: LD_INT 22
76369: DOUBLE
76370: EQUAL
76371: IFTRUE 76405
76373: LD_INT 20
76375: DOUBLE
76376: EQUAL
76377: IFTRUE 76405
76379: LD_INT 21
76381: DOUBLE
76382: EQUAL
76383: IFTRUE 76405
76385: LD_INT 23
76387: DOUBLE
76388: EQUAL
76389: IFTRUE 76405
76391: LD_INT 24
76393: DOUBLE
76394: EQUAL
76395: IFTRUE 76405
76397: LD_INT 25
76399: DOUBLE
76400: EQUAL
76401: IFTRUE 76405
76403: GO 76461
76405: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
76406: LD_ADDR_VAR 0 9
76410: PUSH
76411: LD_VAR 0 35
76415: PUSH
76416: LD_VAR 0 36
76420: PUSH
76421: LD_VAR 0 37
76425: PUSH
76426: LD_VAR 0 38
76430: PUSH
76431: LD_VAR 0 39
76435: PUSH
76436: LD_VAR 0 40
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: LIST
76447: LIST
76448: PUSH
76449: LD_VAR 0 4
76453: PUSH
76454: LD_INT 1
76456: PLUS
76457: ARRAY
76458: ST_TO_ADDR
76459: GO 76826
76461: LD_INT 6
76463: DOUBLE
76464: EQUAL
76465: IFTRUE 76517
76467: LD_INT 7
76469: DOUBLE
76470: EQUAL
76471: IFTRUE 76517
76473: LD_INT 8
76475: DOUBLE
76476: EQUAL
76477: IFTRUE 76517
76479: LD_INT 13
76481: DOUBLE
76482: EQUAL
76483: IFTRUE 76517
76485: LD_INT 12
76487: DOUBLE
76488: EQUAL
76489: IFTRUE 76517
76491: LD_INT 15
76493: DOUBLE
76494: EQUAL
76495: IFTRUE 76517
76497: LD_INT 11
76499: DOUBLE
76500: EQUAL
76501: IFTRUE 76517
76503: LD_INT 14
76505: DOUBLE
76506: EQUAL
76507: IFTRUE 76517
76509: LD_INT 10
76511: DOUBLE
76512: EQUAL
76513: IFTRUE 76517
76515: GO 76573
76517: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
76518: LD_ADDR_VAR 0 9
76522: PUSH
76523: LD_VAR 0 41
76527: PUSH
76528: LD_VAR 0 42
76532: PUSH
76533: LD_VAR 0 43
76537: PUSH
76538: LD_VAR 0 44
76542: PUSH
76543: LD_VAR 0 45
76547: PUSH
76548: LD_VAR 0 46
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: LIST
76557: LIST
76558: LIST
76559: LIST
76560: PUSH
76561: LD_VAR 0 4
76565: PUSH
76566: LD_INT 1
76568: PLUS
76569: ARRAY
76570: ST_TO_ADDR
76571: GO 76826
76573: LD_INT 36
76575: DOUBLE
76576: EQUAL
76577: IFTRUE 76581
76579: GO 76637
76581: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76582: LD_ADDR_VAR 0 9
76586: PUSH
76587: LD_VAR 0 47
76591: PUSH
76592: LD_VAR 0 48
76596: PUSH
76597: LD_VAR 0 49
76601: PUSH
76602: LD_VAR 0 50
76606: PUSH
76607: LD_VAR 0 51
76611: PUSH
76612: LD_VAR 0 52
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: LIST
76623: LIST
76624: PUSH
76625: LD_VAR 0 4
76629: PUSH
76630: LD_INT 1
76632: PLUS
76633: ARRAY
76634: ST_TO_ADDR
76635: GO 76826
76637: LD_INT 4
76639: DOUBLE
76640: EQUAL
76641: IFTRUE 76663
76643: LD_INT 5
76645: DOUBLE
76646: EQUAL
76647: IFTRUE 76663
76649: LD_INT 34
76651: DOUBLE
76652: EQUAL
76653: IFTRUE 76663
76655: LD_INT 37
76657: DOUBLE
76658: EQUAL
76659: IFTRUE 76663
76661: GO 76719
76663: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76664: LD_ADDR_VAR 0 9
76668: PUSH
76669: LD_VAR 0 53
76673: PUSH
76674: LD_VAR 0 54
76678: PUSH
76679: LD_VAR 0 55
76683: PUSH
76684: LD_VAR 0 56
76688: PUSH
76689: LD_VAR 0 57
76693: PUSH
76694: LD_VAR 0 58
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: PUSH
76707: LD_VAR 0 4
76711: PUSH
76712: LD_INT 1
76714: PLUS
76715: ARRAY
76716: ST_TO_ADDR
76717: GO 76826
76719: LD_INT 31
76721: DOUBLE
76722: EQUAL
76723: IFTRUE 76769
76725: LD_INT 32
76727: DOUBLE
76728: EQUAL
76729: IFTRUE 76769
76731: LD_INT 33
76733: DOUBLE
76734: EQUAL
76735: IFTRUE 76769
76737: LD_INT 27
76739: DOUBLE
76740: EQUAL
76741: IFTRUE 76769
76743: LD_INT 26
76745: DOUBLE
76746: EQUAL
76747: IFTRUE 76769
76749: LD_INT 28
76751: DOUBLE
76752: EQUAL
76753: IFTRUE 76769
76755: LD_INT 29
76757: DOUBLE
76758: EQUAL
76759: IFTRUE 76769
76761: LD_INT 30
76763: DOUBLE
76764: EQUAL
76765: IFTRUE 76769
76767: GO 76825
76769: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76770: LD_ADDR_VAR 0 9
76774: PUSH
76775: LD_VAR 0 59
76779: PUSH
76780: LD_VAR 0 60
76784: PUSH
76785: LD_VAR 0 61
76789: PUSH
76790: LD_VAR 0 62
76794: PUSH
76795: LD_VAR 0 63
76799: PUSH
76800: LD_VAR 0 64
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: LIST
76811: LIST
76812: PUSH
76813: LD_VAR 0 4
76817: PUSH
76818: LD_INT 1
76820: PLUS
76821: ARRAY
76822: ST_TO_ADDR
76823: GO 76826
76825: POP
// temp_list2 = [ ] ;
76826: LD_ADDR_VAR 0 10
76830: PUSH
76831: EMPTY
76832: ST_TO_ADDR
// for i in temp_list do
76833: LD_ADDR_VAR 0 8
76837: PUSH
76838: LD_VAR 0 9
76842: PUSH
76843: FOR_IN
76844: IFFALSE 76896
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76846: LD_ADDR_VAR 0 10
76850: PUSH
76851: LD_VAR 0 10
76855: PUSH
76856: LD_VAR 0 8
76860: PUSH
76861: LD_INT 1
76863: ARRAY
76864: PUSH
76865: LD_VAR 0 2
76869: PLUS
76870: PUSH
76871: LD_VAR 0 8
76875: PUSH
76876: LD_INT 2
76878: ARRAY
76879: PUSH
76880: LD_VAR 0 3
76884: PLUS
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: PUSH
76890: EMPTY
76891: LIST
76892: ADD
76893: ST_TO_ADDR
76894: GO 76843
76896: POP
76897: POP
// result = temp_list2 ;
76898: LD_ADDR_VAR 0 7
76902: PUSH
76903: LD_VAR 0 10
76907: ST_TO_ADDR
// end ;
76908: LD_VAR 0 7
76912: RET
// export function EnemyInRange ( unit , dist ) ; begin
76913: LD_INT 0
76915: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76916: LD_ADDR_VAR 0 3
76920: PUSH
76921: LD_VAR 0 1
76925: PPUSH
76926: CALL_OW 255
76930: PPUSH
76931: LD_VAR 0 1
76935: PPUSH
76936: CALL_OW 250
76940: PPUSH
76941: LD_VAR 0 1
76945: PPUSH
76946: CALL_OW 251
76950: PPUSH
76951: LD_VAR 0 2
76955: PPUSH
76956: CALL 50309 0 4
76960: PUSH
76961: LD_INT 4
76963: ARRAY
76964: ST_TO_ADDR
// end ;
76965: LD_VAR 0 3
76969: RET
// export function PlayerSeeMe ( unit ) ; begin
76970: LD_INT 0
76972: PPUSH
// result := See ( your_side , unit ) ;
76973: LD_ADDR_VAR 0 2
76977: PUSH
76978: LD_OWVAR 2
76982: PPUSH
76983: LD_VAR 0 1
76987: PPUSH
76988: CALL_OW 292
76992: ST_TO_ADDR
// end ;
76993: LD_VAR 0 2
76997: RET
// export function ReverseDir ( unit ) ; begin
76998: LD_INT 0
77000: PPUSH
// if not unit then
77001: LD_VAR 0 1
77005: NOT
77006: IFFALSE 77010
// exit ;
77008: GO 77033
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
77010: LD_ADDR_VAR 0 2
77014: PUSH
77015: LD_VAR 0 1
77019: PPUSH
77020: CALL_OW 254
77024: PUSH
77025: LD_INT 3
77027: PLUS
77028: PUSH
77029: LD_INT 6
77031: MOD
77032: ST_TO_ADDR
// end ;
77033: LD_VAR 0 2
77037: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
77038: LD_INT 0
77040: PPUSH
77041: PPUSH
77042: PPUSH
77043: PPUSH
77044: PPUSH
// if not hexes then
77045: LD_VAR 0 2
77049: NOT
77050: IFFALSE 77054
// exit ;
77052: GO 77202
// dist := 9999 ;
77054: LD_ADDR_VAR 0 5
77058: PUSH
77059: LD_INT 9999
77061: ST_TO_ADDR
// for i = 1 to hexes do
77062: LD_ADDR_VAR 0 4
77066: PUSH
77067: DOUBLE
77068: LD_INT 1
77070: DEC
77071: ST_TO_ADDR
77072: LD_VAR 0 2
77076: PUSH
77077: FOR_TO
77078: IFFALSE 77190
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
77080: LD_VAR 0 1
77084: PPUSH
77085: LD_VAR 0 2
77089: PUSH
77090: LD_VAR 0 4
77094: ARRAY
77095: PUSH
77096: LD_INT 1
77098: ARRAY
77099: PPUSH
77100: LD_VAR 0 2
77104: PUSH
77105: LD_VAR 0 4
77109: ARRAY
77110: PUSH
77111: LD_INT 2
77113: ARRAY
77114: PPUSH
77115: CALL_OW 297
77119: PUSH
77120: LD_VAR 0 5
77124: LESS
77125: IFFALSE 77188
// begin hex := hexes [ i ] ;
77127: LD_ADDR_VAR 0 7
77131: PUSH
77132: LD_VAR 0 2
77136: PUSH
77137: LD_VAR 0 4
77141: ARRAY
77142: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77143: LD_ADDR_VAR 0 5
77147: PUSH
77148: LD_VAR 0 1
77152: PPUSH
77153: LD_VAR 0 2
77157: PUSH
77158: LD_VAR 0 4
77162: ARRAY
77163: PUSH
77164: LD_INT 1
77166: ARRAY
77167: PPUSH
77168: LD_VAR 0 2
77172: PUSH
77173: LD_VAR 0 4
77177: ARRAY
77178: PUSH
77179: LD_INT 2
77181: ARRAY
77182: PPUSH
77183: CALL_OW 297
77187: ST_TO_ADDR
// end ; end ;
77188: GO 77077
77190: POP
77191: POP
// result := hex ;
77192: LD_ADDR_VAR 0 3
77196: PUSH
77197: LD_VAR 0 7
77201: ST_TO_ADDR
// end ;
77202: LD_VAR 0 3
77206: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
77207: LD_INT 0
77209: PPUSH
77210: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
77211: LD_VAR 0 1
77215: NOT
77216: PUSH
77217: LD_VAR 0 1
77221: PUSH
77222: LD_INT 21
77224: PUSH
77225: LD_INT 2
77227: PUSH
77228: EMPTY
77229: LIST
77230: LIST
77231: PUSH
77232: LD_INT 23
77234: PUSH
77235: LD_INT 2
77237: PUSH
77238: EMPTY
77239: LIST
77240: LIST
77241: PUSH
77242: EMPTY
77243: LIST
77244: LIST
77245: PPUSH
77246: CALL_OW 69
77250: IN
77251: NOT
77252: OR
77253: IFFALSE 77257
// exit ;
77255: GO 77304
// for i = 1 to 3 do
77257: LD_ADDR_VAR 0 3
77261: PUSH
77262: DOUBLE
77263: LD_INT 1
77265: DEC
77266: ST_TO_ADDR
77267: LD_INT 3
77269: PUSH
77270: FOR_TO
77271: IFFALSE 77302
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77273: LD_VAR 0 1
77277: PPUSH
77278: CALL_OW 250
77282: PPUSH
77283: LD_VAR 0 1
77287: PPUSH
77288: CALL_OW 251
77292: PPUSH
77293: LD_INT 1
77295: PPUSH
77296: CALL_OW 453
77300: GO 77270
77302: POP
77303: POP
// end ;
77304: LD_VAR 0 2
77308: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77309: LD_INT 0
77311: PPUSH
77312: PPUSH
77313: PPUSH
77314: PPUSH
77315: PPUSH
77316: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77317: LD_VAR 0 1
77321: NOT
77322: PUSH
77323: LD_VAR 0 2
77327: NOT
77328: OR
77329: PUSH
77330: LD_VAR 0 1
77334: PPUSH
77335: CALL_OW 314
77339: OR
77340: IFFALSE 77344
// exit ;
77342: GO 77785
// x := GetX ( enemy_unit ) ;
77344: LD_ADDR_VAR 0 7
77348: PUSH
77349: LD_VAR 0 2
77353: PPUSH
77354: CALL_OW 250
77358: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77359: LD_ADDR_VAR 0 8
77363: PUSH
77364: LD_VAR 0 2
77368: PPUSH
77369: CALL_OW 251
77373: ST_TO_ADDR
// if not x or not y then
77374: LD_VAR 0 7
77378: NOT
77379: PUSH
77380: LD_VAR 0 8
77384: NOT
77385: OR
77386: IFFALSE 77390
// exit ;
77388: GO 77785
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
77390: LD_ADDR_VAR 0 6
77394: PUSH
77395: LD_VAR 0 7
77399: PPUSH
77400: LD_INT 0
77402: PPUSH
77403: LD_INT 4
77405: PPUSH
77406: CALL_OW 272
77410: PUSH
77411: LD_VAR 0 8
77415: PPUSH
77416: LD_INT 0
77418: PPUSH
77419: LD_INT 4
77421: PPUSH
77422: CALL_OW 273
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: PUSH
77431: LD_VAR 0 7
77435: PPUSH
77436: LD_INT 1
77438: PPUSH
77439: LD_INT 4
77441: PPUSH
77442: CALL_OW 272
77446: PUSH
77447: LD_VAR 0 8
77451: PPUSH
77452: LD_INT 1
77454: PPUSH
77455: LD_INT 4
77457: PPUSH
77458: CALL_OW 273
77462: PUSH
77463: EMPTY
77464: LIST
77465: LIST
77466: PUSH
77467: LD_VAR 0 7
77471: PPUSH
77472: LD_INT 2
77474: PPUSH
77475: LD_INT 4
77477: PPUSH
77478: CALL_OW 272
77482: PUSH
77483: LD_VAR 0 8
77487: PPUSH
77488: LD_INT 2
77490: PPUSH
77491: LD_INT 4
77493: PPUSH
77494: CALL_OW 273
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: PUSH
77503: LD_VAR 0 7
77507: PPUSH
77508: LD_INT 3
77510: PPUSH
77511: LD_INT 4
77513: PPUSH
77514: CALL_OW 272
77518: PUSH
77519: LD_VAR 0 8
77523: PPUSH
77524: LD_INT 3
77526: PPUSH
77527: LD_INT 4
77529: PPUSH
77530: CALL_OW 273
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: PUSH
77539: LD_VAR 0 7
77543: PPUSH
77544: LD_INT 4
77546: PPUSH
77547: LD_INT 4
77549: PPUSH
77550: CALL_OW 272
77554: PUSH
77555: LD_VAR 0 8
77559: PPUSH
77560: LD_INT 4
77562: PPUSH
77563: LD_INT 4
77565: PPUSH
77566: CALL_OW 273
77570: PUSH
77571: EMPTY
77572: LIST
77573: LIST
77574: PUSH
77575: LD_VAR 0 7
77579: PPUSH
77580: LD_INT 5
77582: PPUSH
77583: LD_INT 4
77585: PPUSH
77586: CALL_OW 272
77590: PUSH
77591: LD_VAR 0 8
77595: PPUSH
77596: LD_INT 5
77598: PPUSH
77599: LD_INT 4
77601: PPUSH
77602: CALL_OW 273
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: PUSH
77611: EMPTY
77612: LIST
77613: LIST
77614: LIST
77615: LIST
77616: LIST
77617: LIST
77618: ST_TO_ADDR
// for i = tmp downto 1 do
77619: LD_ADDR_VAR 0 4
77623: PUSH
77624: DOUBLE
77625: LD_VAR 0 6
77629: INC
77630: ST_TO_ADDR
77631: LD_INT 1
77633: PUSH
77634: FOR_DOWNTO
77635: IFFALSE 77736
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77637: LD_VAR 0 6
77641: PUSH
77642: LD_VAR 0 4
77646: ARRAY
77647: PUSH
77648: LD_INT 1
77650: ARRAY
77651: PPUSH
77652: LD_VAR 0 6
77656: PUSH
77657: LD_VAR 0 4
77661: ARRAY
77662: PUSH
77663: LD_INT 2
77665: ARRAY
77666: PPUSH
77667: CALL_OW 488
77671: NOT
77672: PUSH
77673: LD_VAR 0 6
77677: PUSH
77678: LD_VAR 0 4
77682: ARRAY
77683: PUSH
77684: LD_INT 1
77686: ARRAY
77687: PPUSH
77688: LD_VAR 0 6
77692: PUSH
77693: LD_VAR 0 4
77697: ARRAY
77698: PUSH
77699: LD_INT 2
77701: ARRAY
77702: PPUSH
77703: CALL_OW 428
77707: PUSH
77708: LD_INT 0
77710: NONEQUAL
77711: OR
77712: IFFALSE 77734
// tmp := Delete ( tmp , i ) ;
77714: LD_ADDR_VAR 0 6
77718: PUSH
77719: LD_VAR 0 6
77723: PPUSH
77724: LD_VAR 0 4
77728: PPUSH
77729: CALL_OW 3
77733: ST_TO_ADDR
77734: GO 77634
77736: POP
77737: POP
// j := GetClosestHex ( unit , tmp ) ;
77738: LD_ADDR_VAR 0 5
77742: PUSH
77743: LD_VAR 0 1
77747: PPUSH
77748: LD_VAR 0 6
77752: PPUSH
77753: CALL 77038 0 2
77757: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77758: LD_VAR 0 1
77762: PPUSH
77763: LD_VAR 0 5
77767: PUSH
77768: LD_INT 1
77770: ARRAY
77771: PPUSH
77772: LD_VAR 0 5
77776: PUSH
77777: LD_INT 2
77779: ARRAY
77780: PPUSH
77781: CALL_OW 111
// end ;
77785: LD_VAR 0 3
77789: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77790: LD_INT 0
77792: PPUSH
77793: PPUSH
77794: PPUSH
// uc_side = 0 ;
77795: LD_ADDR_OWVAR 20
77799: PUSH
77800: LD_INT 0
77802: ST_TO_ADDR
// uc_nation = 0 ;
77803: LD_ADDR_OWVAR 21
77807: PUSH
77808: LD_INT 0
77810: ST_TO_ADDR
// InitHc_All ( ) ;
77811: CALL_OW 584
// InitVc ;
77815: CALL_OW 20
// if mastodonts then
77819: LD_VAR 0 6
77823: IFFALSE 77890
// for i = 1 to mastodonts do
77825: LD_ADDR_VAR 0 11
77829: PUSH
77830: DOUBLE
77831: LD_INT 1
77833: DEC
77834: ST_TO_ADDR
77835: LD_VAR 0 6
77839: PUSH
77840: FOR_TO
77841: IFFALSE 77888
// begin vc_chassis := 31 ;
77843: LD_ADDR_OWVAR 37
77847: PUSH
77848: LD_INT 31
77850: ST_TO_ADDR
// vc_control := control_rider ;
77851: LD_ADDR_OWVAR 38
77855: PUSH
77856: LD_INT 4
77858: ST_TO_ADDR
// animal := CreateVehicle ;
77859: LD_ADDR_VAR 0 12
77863: PUSH
77864: CALL_OW 45
77868: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77869: LD_VAR 0 12
77873: PPUSH
77874: LD_VAR 0 8
77878: PPUSH
77879: LD_INT 0
77881: PPUSH
77882: CALL 80078 0 3
// end ;
77886: GO 77840
77888: POP
77889: POP
// if horses then
77890: LD_VAR 0 5
77894: IFFALSE 77961
// for i = 1 to horses do
77896: LD_ADDR_VAR 0 11
77900: PUSH
77901: DOUBLE
77902: LD_INT 1
77904: DEC
77905: ST_TO_ADDR
77906: LD_VAR 0 5
77910: PUSH
77911: FOR_TO
77912: IFFALSE 77959
// begin hc_class := 21 ;
77914: LD_ADDR_OWVAR 28
77918: PUSH
77919: LD_INT 21
77921: ST_TO_ADDR
// hc_gallery :=  ;
77922: LD_ADDR_OWVAR 33
77926: PUSH
77927: LD_STRING 
77929: ST_TO_ADDR
// animal := CreateHuman ;
77930: LD_ADDR_VAR 0 12
77934: PUSH
77935: CALL_OW 44
77939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77940: LD_VAR 0 12
77944: PPUSH
77945: LD_VAR 0 8
77949: PPUSH
77950: LD_INT 0
77952: PPUSH
77953: CALL 80078 0 3
// end ;
77957: GO 77911
77959: POP
77960: POP
// if birds then
77961: LD_VAR 0 1
77965: IFFALSE 78032
// for i = 1 to birds do
77967: LD_ADDR_VAR 0 11
77971: PUSH
77972: DOUBLE
77973: LD_INT 1
77975: DEC
77976: ST_TO_ADDR
77977: LD_VAR 0 1
77981: PUSH
77982: FOR_TO
77983: IFFALSE 78030
// begin hc_class = 18 ;
77985: LD_ADDR_OWVAR 28
77989: PUSH
77990: LD_INT 18
77992: ST_TO_ADDR
// hc_gallery =  ;
77993: LD_ADDR_OWVAR 33
77997: PUSH
77998: LD_STRING 
78000: ST_TO_ADDR
// animal := CreateHuman ;
78001: LD_ADDR_VAR 0 12
78005: PUSH
78006: CALL_OW 44
78010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78011: LD_VAR 0 12
78015: PPUSH
78016: LD_VAR 0 8
78020: PPUSH
78021: LD_INT 0
78023: PPUSH
78024: CALL 80078 0 3
// end ;
78028: GO 77982
78030: POP
78031: POP
// if tigers then
78032: LD_VAR 0 2
78036: IFFALSE 78120
// for i = 1 to tigers do
78038: LD_ADDR_VAR 0 11
78042: PUSH
78043: DOUBLE
78044: LD_INT 1
78046: DEC
78047: ST_TO_ADDR
78048: LD_VAR 0 2
78052: PUSH
78053: FOR_TO
78054: IFFALSE 78118
// begin hc_class = class_tiger ;
78056: LD_ADDR_OWVAR 28
78060: PUSH
78061: LD_INT 14
78063: ST_TO_ADDR
// hc_gallery =  ;
78064: LD_ADDR_OWVAR 33
78068: PUSH
78069: LD_STRING 
78071: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78072: LD_ADDR_OWVAR 35
78076: PUSH
78077: LD_INT 7
78079: NEG
78080: PPUSH
78081: LD_INT 7
78083: PPUSH
78084: CALL_OW 12
78088: ST_TO_ADDR
// animal := CreateHuman ;
78089: LD_ADDR_VAR 0 12
78093: PUSH
78094: CALL_OW 44
78098: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78099: LD_VAR 0 12
78103: PPUSH
78104: LD_VAR 0 8
78108: PPUSH
78109: LD_INT 0
78111: PPUSH
78112: CALL 80078 0 3
// end ;
78116: GO 78053
78118: POP
78119: POP
// if apemans then
78120: LD_VAR 0 3
78124: IFFALSE 78247
// for i = 1 to apemans do
78126: LD_ADDR_VAR 0 11
78130: PUSH
78131: DOUBLE
78132: LD_INT 1
78134: DEC
78135: ST_TO_ADDR
78136: LD_VAR 0 3
78140: PUSH
78141: FOR_TO
78142: IFFALSE 78245
// begin hc_class = class_apeman ;
78144: LD_ADDR_OWVAR 28
78148: PUSH
78149: LD_INT 12
78151: ST_TO_ADDR
// hc_gallery =  ;
78152: LD_ADDR_OWVAR 33
78156: PUSH
78157: LD_STRING 
78159: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78160: LD_ADDR_OWVAR 35
78164: PUSH
78165: LD_INT 2
78167: NEG
78168: PPUSH
78169: LD_INT 2
78171: PPUSH
78172: CALL_OW 12
78176: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78177: LD_ADDR_OWVAR 31
78181: PUSH
78182: LD_INT 1
78184: PPUSH
78185: LD_INT 3
78187: PPUSH
78188: CALL_OW 12
78192: PUSH
78193: LD_INT 1
78195: PPUSH
78196: LD_INT 3
78198: PPUSH
78199: CALL_OW 12
78203: PUSH
78204: LD_INT 0
78206: PUSH
78207: LD_INT 0
78209: PUSH
78210: EMPTY
78211: LIST
78212: LIST
78213: LIST
78214: LIST
78215: ST_TO_ADDR
// animal := CreateHuman ;
78216: LD_ADDR_VAR 0 12
78220: PUSH
78221: CALL_OW 44
78225: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78226: LD_VAR 0 12
78230: PPUSH
78231: LD_VAR 0 8
78235: PPUSH
78236: LD_INT 0
78238: PPUSH
78239: CALL 80078 0 3
// end ;
78243: GO 78141
78245: POP
78246: POP
// if enchidnas then
78247: LD_VAR 0 4
78251: IFFALSE 78318
// for i = 1 to enchidnas do
78253: LD_ADDR_VAR 0 11
78257: PUSH
78258: DOUBLE
78259: LD_INT 1
78261: DEC
78262: ST_TO_ADDR
78263: LD_VAR 0 4
78267: PUSH
78268: FOR_TO
78269: IFFALSE 78316
// begin hc_class = 13 ;
78271: LD_ADDR_OWVAR 28
78275: PUSH
78276: LD_INT 13
78278: ST_TO_ADDR
// hc_gallery =  ;
78279: LD_ADDR_OWVAR 33
78283: PUSH
78284: LD_STRING 
78286: ST_TO_ADDR
// animal := CreateHuman ;
78287: LD_ADDR_VAR 0 12
78291: PUSH
78292: CALL_OW 44
78296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78297: LD_VAR 0 12
78301: PPUSH
78302: LD_VAR 0 8
78306: PPUSH
78307: LD_INT 0
78309: PPUSH
78310: CALL 80078 0 3
// end ;
78314: GO 78268
78316: POP
78317: POP
// if fishes then
78318: LD_VAR 0 7
78322: IFFALSE 78389
// for i = 1 to fishes do
78324: LD_ADDR_VAR 0 11
78328: PUSH
78329: DOUBLE
78330: LD_INT 1
78332: DEC
78333: ST_TO_ADDR
78334: LD_VAR 0 7
78338: PUSH
78339: FOR_TO
78340: IFFALSE 78387
// begin hc_class = 20 ;
78342: LD_ADDR_OWVAR 28
78346: PUSH
78347: LD_INT 20
78349: ST_TO_ADDR
// hc_gallery =  ;
78350: LD_ADDR_OWVAR 33
78354: PUSH
78355: LD_STRING 
78357: ST_TO_ADDR
// animal := CreateHuman ;
78358: LD_ADDR_VAR 0 12
78362: PUSH
78363: CALL_OW 44
78367: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78368: LD_VAR 0 12
78372: PPUSH
78373: LD_VAR 0 9
78377: PPUSH
78378: LD_INT 0
78380: PPUSH
78381: CALL 80078 0 3
// end ;
78385: GO 78339
78387: POP
78388: POP
// end ;
78389: LD_VAR 0 10
78393: RET
// export function WantHeal ( sci , unit ) ; begin
78394: LD_INT 0
78396: PPUSH
// if GetTaskList ( sci ) > 0 then
78397: LD_VAR 0 1
78401: PPUSH
78402: CALL_OW 437
78406: PUSH
78407: LD_INT 0
78409: GREATER
78410: IFFALSE 78480
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78412: LD_VAR 0 1
78416: PPUSH
78417: CALL_OW 437
78421: PUSH
78422: LD_INT 1
78424: ARRAY
78425: PUSH
78426: LD_INT 1
78428: ARRAY
78429: PUSH
78430: LD_STRING l
78432: EQUAL
78433: PUSH
78434: LD_VAR 0 1
78438: PPUSH
78439: CALL_OW 437
78443: PUSH
78444: LD_INT 1
78446: ARRAY
78447: PUSH
78448: LD_INT 4
78450: ARRAY
78451: PUSH
78452: LD_VAR 0 2
78456: EQUAL
78457: AND
78458: IFFALSE 78470
// result := true else
78460: LD_ADDR_VAR 0 3
78464: PUSH
78465: LD_INT 1
78467: ST_TO_ADDR
78468: GO 78478
// result := false ;
78470: LD_ADDR_VAR 0 3
78474: PUSH
78475: LD_INT 0
78477: ST_TO_ADDR
// end else
78478: GO 78488
// result := false ;
78480: LD_ADDR_VAR 0 3
78484: PUSH
78485: LD_INT 0
78487: ST_TO_ADDR
// end ;
78488: LD_VAR 0 3
78492: RET
// export function HealTarget ( sci ) ; begin
78493: LD_INT 0
78495: PPUSH
// if not sci then
78496: LD_VAR 0 1
78500: NOT
78501: IFFALSE 78505
// exit ;
78503: GO 78570
// result := 0 ;
78505: LD_ADDR_VAR 0 2
78509: PUSH
78510: LD_INT 0
78512: ST_TO_ADDR
// if GetTaskList ( sci ) then
78513: LD_VAR 0 1
78517: PPUSH
78518: CALL_OW 437
78522: IFFALSE 78570
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78524: LD_VAR 0 1
78528: PPUSH
78529: CALL_OW 437
78533: PUSH
78534: LD_INT 1
78536: ARRAY
78537: PUSH
78538: LD_INT 1
78540: ARRAY
78541: PUSH
78542: LD_STRING l
78544: EQUAL
78545: IFFALSE 78570
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78547: LD_ADDR_VAR 0 2
78551: PUSH
78552: LD_VAR 0 1
78556: PPUSH
78557: CALL_OW 437
78561: PUSH
78562: LD_INT 1
78564: ARRAY
78565: PUSH
78566: LD_INT 4
78568: ARRAY
78569: ST_TO_ADDR
// end ;
78570: LD_VAR 0 2
78574: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78575: LD_INT 0
78577: PPUSH
78578: PPUSH
78579: PPUSH
78580: PPUSH
// if not base_units then
78581: LD_VAR 0 1
78585: NOT
78586: IFFALSE 78590
// exit ;
78588: GO 78677
// result := false ;
78590: LD_ADDR_VAR 0 2
78594: PUSH
78595: LD_INT 0
78597: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78598: LD_ADDR_VAR 0 5
78602: PUSH
78603: LD_VAR 0 1
78607: PPUSH
78608: LD_INT 21
78610: PUSH
78611: LD_INT 3
78613: PUSH
78614: EMPTY
78615: LIST
78616: LIST
78617: PPUSH
78618: CALL_OW 72
78622: ST_TO_ADDR
// if not tmp then
78623: LD_VAR 0 5
78627: NOT
78628: IFFALSE 78632
// exit ;
78630: GO 78677
// for i in tmp do
78632: LD_ADDR_VAR 0 3
78636: PUSH
78637: LD_VAR 0 5
78641: PUSH
78642: FOR_IN
78643: IFFALSE 78675
// begin result := EnemyInRange ( i , 22 ) ;
78645: LD_ADDR_VAR 0 2
78649: PUSH
78650: LD_VAR 0 3
78654: PPUSH
78655: LD_INT 22
78657: PPUSH
78658: CALL 76913 0 2
78662: ST_TO_ADDR
// if result then
78663: LD_VAR 0 2
78667: IFFALSE 78673
// exit ;
78669: POP
78670: POP
78671: GO 78677
// end ;
78673: GO 78642
78675: POP
78676: POP
// end ;
78677: LD_VAR 0 2
78681: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
78682: LD_INT 0
78684: PPUSH
78685: PPUSH
// if not units then
78686: LD_VAR 0 1
78690: NOT
78691: IFFALSE 78695
// exit ;
78693: GO 78765
// result := [ ] ;
78695: LD_ADDR_VAR 0 3
78699: PUSH
78700: EMPTY
78701: ST_TO_ADDR
// for i in units do
78702: LD_ADDR_VAR 0 4
78706: PUSH
78707: LD_VAR 0 1
78711: PUSH
78712: FOR_IN
78713: IFFALSE 78763
// if GetTag ( i ) = tag then
78715: LD_VAR 0 4
78719: PPUSH
78720: CALL_OW 110
78724: PUSH
78725: LD_VAR 0 2
78729: EQUAL
78730: IFFALSE 78761
// result := Replace ( result , result + 1 , i ) ;
78732: LD_ADDR_VAR 0 3
78736: PUSH
78737: LD_VAR 0 3
78741: PPUSH
78742: LD_VAR 0 3
78746: PUSH
78747: LD_INT 1
78749: PLUS
78750: PPUSH
78751: LD_VAR 0 4
78755: PPUSH
78756: CALL_OW 1
78760: ST_TO_ADDR
78761: GO 78712
78763: POP
78764: POP
// end ;
78765: LD_VAR 0 3
78769: RET
// export function IsDriver ( un ) ; begin
78770: LD_INT 0
78772: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78773: LD_ADDR_VAR 0 2
78777: PUSH
78778: LD_VAR 0 1
78782: PUSH
78783: LD_INT 55
78785: PUSH
78786: EMPTY
78787: LIST
78788: PPUSH
78789: CALL_OW 69
78793: IN
78794: ST_TO_ADDR
// end ;
78795: LD_VAR 0 2
78799: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78800: LD_INT 0
78802: PPUSH
78803: PPUSH
// list := [ ] ;
78804: LD_ADDR_VAR 0 5
78808: PUSH
78809: EMPTY
78810: ST_TO_ADDR
// case d of 0 :
78811: LD_VAR 0 3
78815: PUSH
78816: LD_INT 0
78818: DOUBLE
78819: EQUAL
78820: IFTRUE 78824
78822: GO 78957
78824: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78825: LD_ADDR_VAR 0 5
78829: PUSH
78830: LD_VAR 0 1
78834: PUSH
78835: LD_INT 4
78837: MINUS
78838: PUSH
78839: LD_VAR 0 2
78843: PUSH
78844: LD_INT 4
78846: MINUS
78847: PUSH
78848: LD_INT 2
78850: PUSH
78851: EMPTY
78852: LIST
78853: LIST
78854: LIST
78855: PUSH
78856: LD_VAR 0 1
78860: PUSH
78861: LD_INT 3
78863: MINUS
78864: PUSH
78865: LD_VAR 0 2
78869: PUSH
78870: LD_INT 1
78872: PUSH
78873: EMPTY
78874: LIST
78875: LIST
78876: LIST
78877: PUSH
78878: LD_VAR 0 1
78882: PUSH
78883: LD_INT 4
78885: PLUS
78886: PUSH
78887: LD_VAR 0 2
78891: PUSH
78892: LD_INT 4
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: LIST
78899: PUSH
78900: LD_VAR 0 1
78904: PUSH
78905: LD_INT 3
78907: PLUS
78908: PUSH
78909: LD_VAR 0 2
78913: PUSH
78914: LD_INT 3
78916: PLUS
78917: PUSH
78918: LD_INT 5
78920: PUSH
78921: EMPTY
78922: LIST
78923: LIST
78924: LIST
78925: PUSH
78926: LD_VAR 0 1
78930: PUSH
78931: LD_VAR 0 2
78935: PUSH
78936: LD_INT 4
78938: PLUS
78939: PUSH
78940: LD_INT 0
78942: PUSH
78943: EMPTY
78944: LIST
78945: LIST
78946: LIST
78947: PUSH
78948: EMPTY
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: ST_TO_ADDR
// end ; 1 :
78955: GO 79655
78957: LD_INT 1
78959: DOUBLE
78960: EQUAL
78961: IFTRUE 78965
78963: GO 79098
78965: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78966: LD_ADDR_VAR 0 5
78970: PUSH
78971: LD_VAR 0 1
78975: PUSH
78976: LD_VAR 0 2
78980: PUSH
78981: LD_INT 4
78983: MINUS
78984: PUSH
78985: LD_INT 3
78987: PUSH
78988: EMPTY
78989: LIST
78990: LIST
78991: LIST
78992: PUSH
78993: LD_VAR 0 1
78997: PUSH
78998: LD_INT 3
79000: MINUS
79001: PUSH
79002: LD_VAR 0 2
79006: PUSH
79007: LD_INT 3
79009: MINUS
79010: PUSH
79011: LD_INT 2
79013: PUSH
79014: EMPTY
79015: LIST
79016: LIST
79017: LIST
79018: PUSH
79019: LD_VAR 0 1
79023: PUSH
79024: LD_INT 4
79026: MINUS
79027: PUSH
79028: LD_VAR 0 2
79032: PUSH
79033: LD_INT 1
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: LIST
79040: PUSH
79041: LD_VAR 0 1
79045: PUSH
79046: LD_VAR 0 2
79050: PUSH
79051: LD_INT 3
79053: PLUS
79054: PUSH
79055: LD_INT 0
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: LIST
79062: PUSH
79063: LD_VAR 0 1
79067: PUSH
79068: LD_INT 4
79070: PLUS
79071: PUSH
79072: LD_VAR 0 2
79076: PUSH
79077: LD_INT 4
79079: PLUS
79080: PUSH
79081: LD_INT 5
79083: PUSH
79084: EMPTY
79085: LIST
79086: LIST
79087: LIST
79088: PUSH
79089: EMPTY
79090: LIST
79091: LIST
79092: LIST
79093: LIST
79094: LIST
79095: ST_TO_ADDR
// end ; 2 :
79096: GO 79655
79098: LD_INT 2
79100: DOUBLE
79101: EQUAL
79102: IFTRUE 79106
79104: GO 79235
79106: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79107: LD_ADDR_VAR 0 5
79111: PUSH
79112: LD_VAR 0 1
79116: PUSH
79117: LD_VAR 0 2
79121: PUSH
79122: LD_INT 3
79124: MINUS
79125: PUSH
79126: LD_INT 3
79128: PUSH
79129: EMPTY
79130: LIST
79131: LIST
79132: LIST
79133: PUSH
79134: LD_VAR 0 1
79138: PUSH
79139: LD_INT 4
79141: PLUS
79142: PUSH
79143: LD_VAR 0 2
79147: PUSH
79148: LD_INT 4
79150: PUSH
79151: EMPTY
79152: LIST
79153: LIST
79154: LIST
79155: PUSH
79156: LD_VAR 0 1
79160: PUSH
79161: LD_VAR 0 2
79165: PUSH
79166: LD_INT 4
79168: PLUS
79169: PUSH
79170: LD_INT 0
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: LIST
79177: PUSH
79178: LD_VAR 0 1
79182: PUSH
79183: LD_INT 3
79185: MINUS
79186: PUSH
79187: LD_VAR 0 2
79191: PUSH
79192: LD_INT 1
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: LIST
79199: PUSH
79200: LD_VAR 0 1
79204: PUSH
79205: LD_INT 4
79207: MINUS
79208: PUSH
79209: LD_VAR 0 2
79213: PUSH
79214: LD_INT 4
79216: MINUS
79217: PUSH
79218: LD_INT 2
79220: PUSH
79221: EMPTY
79222: LIST
79223: LIST
79224: LIST
79225: PUSH
79226: EMPTY
79227: LIST
79228: LIST
79229: LIST
79230: LIST
79231: LIST
79232: ST_TO_ADDR
// end ; 3 :
79233: GO 79655
79235: LD_INT 3
79237: DOUBLE
79238: EQUAL
79239: IFTRUE 79243
79241: GO 79376
79243: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79244: LD_ADDR_VAR 0 5
79248: PUSH
79249: LD_VAR 0 1
79253: PUSH
79254: LD_INT 3
79256: PLUS
79257: PUSH
79258: LD_VAR 0 2
79262: PUSH
79263: LD_INT 4
79265: PUSH
79266: EMPTY
79267: LIST
79268: LIST
79269: LIST
79270: PUSH
79271: LD_VAR 0 1
79275: PUSH
79276: LD_INT 4
79278: PLUS
79279: PUSH
79280: LD_VAR 0 2
79284: PUSH
79285: LD_INT 4
79287: PLUS
79288: PUSH
79289: LD_INT 5
79291: PUSH
79292: EMPTY
79293: LIST
79294: LIST
79295: LIST
79296: PUSH
79297: LD_VAR 0 1
79301: PUSH
79302: LD_INT 4
79304: MINUS
79305: PUSH
79306: LD_VAR 0 2
79310: PUSH
79311: LD_INT 1
79313: PUSH
79314: EMPTY
79315: LIST
79316: LIST
79317: LIST
79318: PUSH
79319: LD_VAR 0 1
79323: PUSH
79324: LD_VAR 0 2
79328: PUSH
79329: LD_INT 4
79331: MINUS
79332: PUSH
79333: LD_INT 3
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: LIST
79340: PUSH
79341: LD_VAR 0 1
79345: PUSH
79346: LD_INT 3
79348: MINUS
79349: PUSH
79350: LD_VAR 0 2
79354: PUSH
79355: LD_INT 3
79357: MINUS
79358: PUSH
79359: LD_INT 2
79361: PUSH
79362: EMPTY
79363: LIST
79364: LIST
79365: LIST
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: LIST
79371: LIST
79372: LIST
79373: ST_TO_ADDR
// end ; 4 :
79374: GO 79655
79376: LD_INT 4
79378: DOUBLE
79379: EQUAL
79380: IFTRUE 79384
79382: GO 79517
79384: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79385: LD_ADDR_VAR 0 5
79389: PUSH
79390: LD_VAR 0 1
79394: PUSH
79395: LD_VAR 0 2
79399: PUSH
79400: LD_INT 4
79402: PLUS
79403: PUSH
79404: LD_INT 0
79406: PUSH
79407: EMPTY
79408: LIST
79409: LIST
79410: LIST
79411: PUSH
79412: LD_VAR 0 1
79416: PUSH
79417: LD_INT 3
79419: PLUS
79420: PUSH
79421: LD_VAR 0 2
79425: PUSH
79426: LD_INT 3
79428: PLUS
79429: PUSH
79430: LD_INT 5
79432: PUSH
79433: EMPTY
79434: LIST
79435: LIST
79436: LIST
79437: PUSH
79438: LD_VAR 0 1
79442: PUSH
79443: LD_INT 4
79445: PLUS
79446: PUSH
79447: LD_VAR 0 2
79451: PUSH
79452: LD_INT 4
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: LIST
79459: PUSH
79460: LD_VAR 0 1
79464: PUSH
79465: LD_VAR 0 2
79469: PUSH
79470: LD_INT 3
79472: MINUS
79473: PUSH
79474: LD_INT 3
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: LIST
79481: PUSH
79482: LD_VAR 0 1
79486: PUSH
79487: LD_INT 4
79489: MINUS
79490: PUSH
79491: LD_VAR 0 2
79495: PUSH
79496: LD_INT 4
79498: MINUS
79499: PUSH
79500: LD_INT 2
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: LIST
79507: PUSH
79508: EMPTY
79509: LIST
79510: LIST
79511: LIST
79512: LIST
79513: LIST
79514: ST_TO_ADDR
// end ; 5 :
79515: GO 79655
79517: LD_INT 5
79519: DOUBLE
79520: EQUAL
79521: IFTRUE 79525
79523: GO 79654
79525: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79526: LD_ADDR_VAR 0 5
79530: PUSH
79531: LD_VAR 0 1
79535: PUSH
79536: LD_INT 4
79538: MINUS
79539: PUSH
79540: LD_VAR 0 2
79544: PUSH
79545: LD_INT 1
79547: PUSH
79548: EMPTY
79549: LIST
79550: LIST
79551: LIST
79552: PUSH
79553: LD_VAR 0 1
79557: PUSH
79558: LD_VAR 0 2
79562: PUSH
79563: LD_INT 4
79565: MINUS
79566: PUSH
79567: LD_INT 3
79569: PUSH
79570: EMPTY
79571: LIST
79572: LIST
79573: LIST
79574: PUSH
79575: LD_VAR 0 1
79579: PUSH
79580: LD_INT 4
79582: PLUS
79583: PUSH
79584: LD_VAR 0 2
79588: PUSH
79589: LD_INT 4
79591: PLUS
79592: PUSH
79593: LD_INT 5
79595: PUSH
79596: EMPTY
79597: LIST
79598: LIST
79599: LIST
79600: PUSH
79601: LD_VAR 0 1
79605: PUSH
79606: LD_INT 3
79608: PLUS
79609: PUSH
79610: LD_VAR 0 2
79614: PUSH
79615: LD_INT 4
79617: PUSH
79618: EMPTY
79619: LIST
79620: LIST
79621: LIST
79622: PUSH
79623: LD_VAR 0 1
79627: PUSH
79628: LD_VAR 0 2
79632: PUSH
79633: LD_INT 3
79635: PLUS
79636: PUSH
79637: LD_INT 0
79639: PUSH
79640: EMPTY
79641: LIST
79642: LIST
79643: LIST
79644: PUSH
79645: EMPTY
79646: LIST
79647: LIST
79648: LIST
79649: LIST
79650: LIST
79651: ST_TO_ADDR
// end ; end ;
79652: GO 79655
79654: POP
// result := list ;
79655: LD_ADDR_VAR 0 4
79659: PUSH
79660: LD_VAR 0 5
79664: ST_TO_ADDR
// end ;
79665: LD_VAR 0 4
79669: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79670: LD_INT 0
79672: PPUSH
79673: PPUSH
79674: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79675: LD_VAR 0 1
79679: NOT
79680: PUSH
79681: LD_VAR 0 2
79685: PUSH
79686: LD_INT 1
79688: PUSH
79689: LD_INT 2
79691: PUSH
79692: LD_INT 3
79694: PUSH
79695: LD_INT 4
79697: PUSH
79698: EMPTY
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: IN
79704: NOT
79705: OR
79706: IFFALSE 79710
// exit ;
79708: GO 79802
// tmp := [ ] ;
79710: LD_ADDR_VAR 0 5
79714: PUSH
79715: EMPTY
79716: ST_TO_ADDR
// for i in units do
79717: LD_ADDR_VAR 0 4
79721: PUSH
79722: LD_VAR 0 1
79726: PUSH
79727: FOR_IN
79728: IFFALSE 79771
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
79730: LD_ADDR_VAR 0 5
79734: PUSH
79735: LD_VAR 0 5
79739: PPUSH
79740: LD_VAR 0 5
79744: PUSH
79745: LD_INT 1
79747: PLUS
79748: PPUSH
79749: LD_VAR 0 4
79753: PPUSH
79754: LD_VAR 0 2
79758: PPUSH
79759: CALL_OW 259
79763: PPUSH
79764: CALL_OW 2
79768: ST_TO_ADDR
79769: GO 79727
79771: POP
79772: POP
// if not tmp then
79773: LD_VAR 0 5
79777: NOT
79778: IFFALSE 79782
// exit ;
79780: GO 79802
// result := SortListByListDesc ( units , tmp ) ;
79782: LD_ADDR_VAR 0 3
79786: PUSH
79787: LD_VAR 0 1
79791: PPUSH
79792: LD_VAR 0 5
79796: PPUSH
79797: CALL_OW 77
79801: ST_TO_ADDR
// end ;
79802: LD_VAR 0 3
79806: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79807: LD_INT 0
79809: PPUSH
79810: PPUSH
79811: PPUSH
// result := false ;
79812: LD_ADDR_VAR 0 3
79816: PUSH
79817: LD_INT 0
79819: ST_TO_ADDR
// x := GetX ( building ) ;
79820: LD_ADDR_VAR 0 4
79824: PUSH
79825: LD_VAR 0 2
79829: PPUSH
79830: CALL_OW 250
79834: ST_TO_ADDR
// y := GetY ( building ) ;
79835: LD_ADDR_VAR 0 5
79839: PUSH
79840: LD_VAR 0 2
79844: PPUSH
79845: CALL_OW 251
79849: ST_TO_ADDR
// if not building or not x or not y then
79850: LD_VAR 0 2
79854: NOT
79855: PUSH
79856: LD_VAR 0 4
79860: NOT
79861: OR
79862: PUSH
79863: LD_VAR 0 5
79867: NOT
79868: OR
79869: IFFALSE 79873
// exit ;
79871: GO 79965
// if GetTaskList ( unit ) then
79873: LD_VAR 0 1
79877: PPUSH
79878: CALL_OW 437
79882: IFFALSE 79965
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79884: LD_STRING e
79886: PUSH
79887: LD_VAR 0 1
79891: PPUSH
79892: CALL_OW 437
79896: PUSH
79897: LD_INT 1
79899: ARRAY
79900: PUSH
79901: LD_INT 1
79903: ARRAY
79904: EQUAL
79905: PUSH
79906: LD_VAR 0 4
79910: PUSH
79911: LD_VAR 0 1
79915: PPUSH
79916: CALL_OW 437
79920: PUSH
79921: LD_INT 1
79923: ARRAY
79924: PUSH
79925: LD_INT 2
79927: ARRAY
79928: EQUAL
79929: AND
79930: PUSH
79931: LD_VAR 0 5
79935: PUSH
79936: LD_VAR 0 1
79940: PPUSH
79941: CALL_OW 437
79945: PUSH
79946: LD_INT 1
79948: ARRAY
79949: PUSH
79950: LD_INT 3
79952: ARRAY
79953: EQUAL
79954: AND
79955: IFFALSE 79965
// result := true end ;
79957: LD_ADDR_VAR 0 3
79961: PUSH
79962: LD_INT 1
79964: ST_TO_ADDR
// end ;
79965: LD_VAR 0 3
79969: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79970: LD_INT 0
79972: PPUSH
// result := false ;
79973: LD_ADDR_VAR 0 4
79977: PUSH
79978: LD_INT 0
79980: ST_TO_ADDR
// if GetTaskList ( unit ) then
79981: LD_VAR 0 1
79985: PPUSH
79986: CALL_OW 437
79990: IFFALSE 80073
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79992: LD_STRING M
79994: PUSH
79995: LD_VAR 0 1
79999: PPUSH
80000: CALL_OW 437
80004: PUSH
80005: LD_INT 1
80007: ARRAY
80008: PUSH
80009: LD_INT 1
80011: ARRAY
80012: EQUAL
80013: PUSH
80014: LD_VAR 0 2
80018: PUSH
80019: LD_VAR 0 1
80023: PPUSH
80024: CALL_OW 437
80028: PUSH
80029: LD_INT 1
80031: ARRAY
80032: PUSH
80033: LD_INT 2
80035: ARRAY
80036: EQUAL
80037: AND
80038: PUSH
80039: LD_VAR 0 3
80043: PUSH
80044: LD_VAR 0 1
80048: PPUSH
80049: CALL_OW 437
80053: PUSH
80054: LD_INT 1
80056: ARRAY
80057: PUSH
80058: LD_INT 3
80060: ARRAY
80061: EQUAL
80062: AND
80063: IFFALSE 80073
// result := true ;
80065: LD_ADDR_VAR 0 4
80069: PUSH
80070: LD_INT 1
80072: ST_TO_ADDR
// end ; end ;
80073: LD_VAR 0 4
80077: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80078: LD_INT 0
80080: PPUSH
80081: PPUSH
80082: PPUSH
80083: PPUSH
// if not unit or not area then
80084: LD_VAR 0 1
80088: NOT
80089: PUSH
80090: LD_VAR 0 2
80094: NOT
80095: OR
80096: IFFALSE 80100
// exit ;
80098: GO 80264
// tmp := AreaToList ( area , i ) ;
80100: LD_ADDR_VAR 0 6
80104: PUSH
80105: LD_VAR 0 2
80109: PPUSH
80110: LD_VAR 0 5
80114: PPUSH
80115: CALL_OW 517
80119: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80120: LD_ADDR_VAR 0 5
80124: PUSH
80125: DOUBLE
80126: LD_INT 1
80128: DEC
80129: ST_TO_ADDR
80130: LD_VAR 0 6
80134: PUSH
80135: LD_INT 1
80137: ARRAY
80138: PUSH
80139: FOR_TO
80140: IFFALSE 80262
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80142: LD_ADDR_VAR 0 7
80146: PUSH
80147: LD_VAR 0 6
80151: PUSH
80152: LD_INT 1
80154: ARRAY
80155: PUSH
80156: LD_VAR 0 5
80160: ARRAY
80161: PUSH
80162: LD_VAR 0 6
80166: PUSH
80167: LD_INT 2
80169: ARRAY
80170: PUSH
80171: LD_VAR 0 5
80175: ARRAY
80176: PUSH
80177: EMPTY
80178: LIST
80179: LIST
80180: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80181: LD_VAR 0 7
80185: PUSH
80186: LD_INT 1
80188: ARRAY
80189: PPUSH
80190: LD_VAR 0 7
80194: PUSH
80195: LD_INT 2
80197: ARRAY
80198: PPUSH
80199: CALL_OW 428
80203: PUSH
80204: LD_INT 0
80206: EQUAL
80207: IFFALSE 80260
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80209: LD_VAR 0 1
80213: PPUSH
80214: LD_VAR 0 7
80218: PUSH
80219: LD_INT 1
80221: ARRAY
80222: PPUSH
80223: LD_VAR 0 7
80227: PUSH
80228: LD_INT 2
80230: ARRAY
80231: PPUSH
80232: LD_VAR 0 3
80236: PPUSH
80237: CALL_OW 48
// result := IsPlaced ( unit ) ;
80241: LD_ADDR_VAR 0 4
80245: PUSH
80246: LD_VAR 0 1
80250: PPUSH
80251: CALL_OW 305
80255: ST_TO_ADDR
// exit ;
80256: POP
80257: POP
80258: GO 80264
// end ; end ;
80260: GO 80139
80262: POP
80263: POP
// end ;
80264: LD_VAR 0 4
80268: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80269: LD_INT 0
80271: PPUSH
80272: PPUSH
80273: PPUSH
// if not side or side > 8 then
80274: LD_VAR 0 1
80278: NOT
80279: PUSH
80280: LD_VAR 0 1
80284: PUSH
80285: LD_INT 8
80287: GREATER
80288: OR
80289: IFFALSE 80293
// exit ;
80291: GO 80480
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80293: LD_ADDR_VAR 0 4
80297: PUSH
80298: LD_INT 22
80300: PUSH
80301: LD_VAR 0 1
80305: PUSH
80306: EMPTY
80307: LIST
80308: LIST
80309: PUSH
80310: LD_INT 21
80312: PUSH
80313: LD_INT 3
80315: PUSH
80316: EMPTY
80317: LIST
80318: LIST
80319: PUSH
80320: EMPTY
80321: LIST
80322: LIST
80323: PPUSH
80324: CALL_OW 69
80328: ST_TO_ADDR
// if not tmp then
80329: LD_VAR 0 4
80333: NOT
80334: IFFALSE 80338
// exit ;
80336: GO 80480
// enable_addtolog := true ;
80338: LD_ADDR_OWVAR 81
80342: PUSH
80343: LD_INT 1
80345: ST_TO_ADDR
// AddToLog ( [ ) ;
80346: LD_STRING [
80348: PPUSH
80349: CALL_OW 561
// for i in tmp do
80353: LD_ADDR_VAR 0 3
80357: PUSH
80358: LD_VAR 0 4
80362: PUSH
80363: FOR_IN
80364: IFFALSE 80471
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80366: LD_STRING [
80368: PUSH
80369: LD_VAR 0 3
80373: PPUSH
80374: CALL_OW 266
80378: STR
80379: PUSH
80380: LD_STRING , 
80382: STR
80383: PUSH
80384: LD_VAR 0 3
80388: PPUSH
80389: CALL_OW 250
80393: STR
80394: PUSH
80395: LD_STRING , 
80397: STR
80398: PUSH
80399: LD_VAR 0 3
80403: PPUSH
80404: CALL_OW 251
80408: STR
80409: PUSH
80410: LD_STRING , 
80412: STR
80413: PUSH
80414: LD_VAR 0 3
80418: PPUSH
80419: CALL_OW 254
80423: STR
80424: PUSH
80425: LD_STRING , 
80427: STR
80428: PUSH
80429: LD_VAR 0 3
80433: PPUSH
80434: LD_INT 1
80436: PPUSH
80437: CALL_OW 268
80441: STR
80442: PUSH
80443: LD_STRING , 
80445: STR
80446: PUSH
80447: LD_VAR 0 3
80451: PPUSH
80452: LD_INT 2
80454: PPUSH
80455: CALL_OW 268
80459: STR
80460: PUSH
80461: LD_STRING ],
80463: STR
80464: PPUSH
80465: CALL_OW 561
// end ;
80469: GO 80363
80471: POP
80472: POP
// AddToLog ( ]; ) ;
80473: LD_STRING ];
80475: PPUSH
80476: CALL_OW 561
// end ;
80480: LD_VAR 0 2
80484: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80485: LD_INT 0
80487: PPUSH
80488: PPUSH
80489: PPUSH
80490: PPUSH
80491: PPUSH
// if not area or not rate or not max then
80492: LD_VAR 0 1
80496: NOT
80497: PUSH
80498: LD_VAR 0 2
80502: NOT
80503: OR
80504: PUSH
80505: LD_VAR 0 4
80509: NOT
80510: OR
80511: IFFALSE 80515
// exit ;
80513: GO 80707
// while 1 do
80515: LD_INT 1
80517: IFFALSE 80707
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80519: LD_ADDR_VAR 0 9
80523: PUSH
80524: LD_VAR 0 1
80528: PPUSH
80529: LD_INT 1
80531: PPUSH
80532: CALL_OW 287
80536: PUSH
80537: LD_INT 10
80539: MUL
80540: ST_TO_ADDR
// r := rate / 10 ;
80541: LD_ADDR_VAR 0 7
80545: PUSH
80546: LD_VAR 0 2
80550: PUSH
80551: LD_INT 10
80553: DIVREAL
80554: ST_TO_ADDR
// time := 1 1$00 ;
80555: LD_ADDR_VAR 0 8
80559: PUSH
80560: LD_INT 2100
80562: ST_TO_ADDR
// if amount < min then
80563: LD_VAR 0 9
80567: PUSH
80568: LD_VAR 0 3
80572: LESS
80573: IFFALSE 80591
// r := r * 2 else
80575: LD_ADDR_VAR 0 7
80579: PUSH
80580: LD_VAR 0 7
80584: PUSH
80585: LD_INT 2
80587: MUL
80588: ST_TO_ADDR
80589: GO 80617
// if amount > max then
80591: LD_VAR 0 9
80595: PUSH
80596: LD_VAR 0 4
80600: GREATER
80601: IFFALSE 80617
// r := r / 2 ;
80603: LD_ADDR_VAR 0 7
80607: PUSH
80608: LD_VAR 0 7
80612: PUSH
80613: LD_INT 2
80615: DIVREAL
80616: ST_TO_ADDR
// time := time / r ;
80617: LD_ADDR_VAR 0 8
80621: PUSH
80622: LD_VAR 0 8
80626: PUSH
80627: LD_VAR 0 7
80631: DIVREAL
80632: ST_TO_ADDR
// if time < 0 then
80633: LD_VAR 0 8
80637: PUSH
80638: LD_INT 0
80640: LESS
80641: IFFALSE 80658
// time := time * - 1 ;
80643: LD_ADDR_VAR 0 8
80647: PUSH
80648: LD_VAR 0 8
80652: PUSH
80653: LD_INT 1
80655: NEG
80656: MUL
80657: ST_TO_ADDR
// wait ( time ) ;
80658: LD_VAR 0 8
80662: PPUSH
80663: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
80667: LD_INT 35
80669: PPUSH
80670: LD_INT 875
80672: PPUSH
80673: CALL_OW 12
80677: PPUSH
80678: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80682: LD_INT 1
80684: PPUSH
80685: LD_INT 5
80687: PPUSH
80688: CALL_OW 12
80692: PPUSH
80693: LD_VAR 0 1
80697: PPUSH
80698: LD_INT 1
80700: PPUSH
80701: CALL_OW 55
// end ;
80705: GO 80515
// end ;
80707: LD_VAR 0 5
80711: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80712: LD_INT 0
80714: PPUSH
80715: PPUSH
80716: PPUSH
80717: PPUSH
80718: PPUSH
80719: PPUSH
80720: PPUSH
80721: PPUSH
// if not turrets or not factories then
80722: LD_VAR 0 1
80726: NOT
80727: PUSH
80728: LD_VAR 0 2
80732: NOT
80733: OR
80734: IFFALSE 80738
// exit ;
80736: GO 81045
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80738: LD_ADDR_VAR 0 10
80742: PUSH
80743: LD_INT 5
80745: PUSH
80746: LD_INT 6
80748: PUSH
80749: EMPTY
80750: LIST
80751: LIST
80752: PUSH
80753: LD_INT 2
80755: PUSH
80756: LD_INT 4
80758: PUSH
80759: EMPTY
80760: LIST
80761: LIST
80762: PUSH
80763: LD_INT 3
80765: PUSH
80766: LD_INT 5
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: PUSH
80773: EMPTY
80774: LIST
80775: LIST
80776: LIST
80777: PUSH
80778: LD_INT 24
80780: PUSH
80781: LD_INT 25
80783: PUSH
80784: EMPTY
80785: LIST
80786: LIST
80787: PUSH
80788: LD_INT 23
80790: PUSH
80791: LD_INT 27
80793: PUSH
80794: EMPTY
80795: LIST
80796: LIST
80797: PUSH
80798: EMPTY
80799: LIST
80800: LIST
80801: PUSH
80802: LD_INT 42
80804: PUSH
80805: LD_INT 43
80807: PUSH
80808: EMPTY
80809: LIST
80810: LIST
80811: PUSH
80812: LD_INT 44
80814: PUSH
80815: LD_INT 46
80817: PUSH
80818: EMPTY
80819: LIST
80820: LIST
80821: PUSH
80822: LD_INT 45
80824: PUSH
80825: LD_INT 47
80827: PUSH
80828: EMPTY
80829: LIST
80830: LIST
80831: PUSH
80832: EMPTY
80833: LIST
80834: LIST
80835: LIST
80836: PUSH
80837: EMPTY
80838: LIST
80839: LIST
80840: LIST
80841: ST_TO_ADDR
// result := [ ] ;
80842: LD_ADDR_VAR 0 3
80846: PUSH
80847: EMPTY
80848: ST_TO_ADDR
// for i in turrets do
80849: LD_ADDR_VAR 0 4
80853: PUSH
80854: LD_VAR 0 1
80858: PUSH
80859: FOR_IN
80860: IFFALSE 81043
// begin nat := GetNation ( i ) ;
80862: LD_ADDR_VAR 0 7
80866: PUSH
80867: LD_VAR 0 4
80871: PPUSH
80872: CALL_OW 248
80876: ST_TO_ADDR
// weapon := 0 ;
80877: LD_ADDR_VAR 0 8
80881: PUSH
80882: LD_INT 0
80884: ST_TO_ADDR
// if not nat then
80885: LD_VAR 0 7
80889: NOT
80890: IFFALSE 80894
// continue ;
80892: GO 80859
// for j in list [ nat ] do
80894: LD_ADDR_VAR 0 5
80898: PUSH
80899: LD_VAR 0 10
80903: PUSH
80904: LD_VAR 0 7
80908: ARRAY
80909: PUSH
80910: FOR_IN
80911: IFFALSE 80952
// if GetBWeapon ( i ) = j [ 1 ] then
80913: LD_VAR 0 4
80917: PPUSH
80918: CALL_OW 269
80922: PUSH
80923: LD_VAR 0 5
80927: PUSH
80928: LD_INT 1
80930: ARRAY
80931: EQUAL
80932: IFFALSE 80950
// begin weapon := j [ 2 ] ;
80934: LD_ADDR_VAR 0 8
80938: PUSH
80939: LD_VAR 0 5
80943: PUSH
80944: LD_INT 2
80946: ARRAY
80947: ST_TO_ADDR
// break ;
80948: GO 80952
// end ;
80950: GO 80910
80952: POP
80953: POP
// if not weapon then
80954: LD_VAR 0 8
80958: NOT
80959: IFFALSE 80963
// continue ;
80961: GO 80859
// for k in factories do
80963: LD_ADDR_VAR 0 6
80967: PUSH
80968: LD_VAR 0 2
80972: PUSH
80973: FOR_IN
80974: IFFALSE 81039
// begin weapons := AvailableWeaponList ( k ) ;
80976: LD_ADDR_VAR 0 9
80980: PUSH
80981: LD_VAR 0 6
80985: PPUSH
80986: CALL_OW 478
80990: ST_TO_ADDR
// if not weapons then
80991: LD_VAR 0 9
80995: NOT
80996: IFFALSE 81000
// continue ;
80998: GO 80973
// if weapon in weapons then
81000: LD_VAR 0 8
81004: PUSH
81005: LD_VAR 0 9
81009: IN
81010: IFFALSE 81037
// begin result := [ i , weapon ] ;
81012: LD_ADDR_VAR 0 3
81016: PUSH
81017: LD_VAR 0 4
81021: PUSH
81022: LD_VAR 0 8
81026: PUSH
81027: EMPTY
81028: LIST
81029: LIST
81030: ST_TO_ADDR
// exit ;
81031: POP
81032: POP
81033: POP
81034: POP
81035: GO 81045
// end ; end ;
81037: GO 80973
81039: POP
81040: POP
// end ;
81041: GO 80859
81043: POP
81044: POP
// end ;
81045: LD_VAR 0 3
81049: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81050: LD_INT 0
81052: PPUSH
// if not side or side > 8 then
81053: LD_VAR 0 3
81057: NOT
81058: PUSH
81059: LD_VAR 0 3
81063: PUSH
81064: LD_INT 8
81066: GREATER
81067: OR
81068: IFFALSE 81072
// exit ;
81070: GO 81131
// if not range then
81072: LD_VAR 0 4
81076: NOT
81077: IFFALSE 81088
// range := - 12 ;
81079: LD_ADDR_VAR 0 4
81083: PUSH
81084: LD_INT 12
81086: NEG
81087: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81088: LD_VAR 0 1
81092: PPUSH
81093: LD_VAR 0 2
81097: PPUSH
81098: LD_VAR 0 3
81102: PPUSH
81103: LD_VAR 0 4
81107: PPUSH
81108: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81112: LD_VAR 0 1
81116: PPUSH
81117: LD_VAR 0 2
81121: PPUSH
81122: LD_VAR 0 3
81126: PPUSH
81127: CALL_OW 331
// end ;
81131: LD_VAR 0 5
81135: RET
// export function Video ( mode ) ; begin
81136: LD_INT 0
81138: PPUSH
// ingame_video = mode ;
81139: LD_ADDR_OWVAR 52
81143: PUSH
81144: LD_VAR 0 1
81148: ST_TO_ADDR
// interface_hidden = mode ;
81149: LD_ADDR_OWVAR 54
81153: PUSH
81154: LD_VAR 0 1
81158: ST_TO_ADDR
// end ;
81159: LD_VAR 0 2
81163: RET
// export function Join ( array , element ) ; begin
81164: LD_INT 0
81166: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81167: LD_ADDR_VAR 0 3
81171: PUSH
81172: LD_VAR 0 1
81176: PPUSH
81177: LD_VAR 0 1
81181: PUSH
81182: LD_INT 1
81184: PLUS
81185: PPUSH
81186: LD_VAR 0 2
81190: PPUSH
81191: CALL_OW 1
81195: ST_TO_ADDR
// end ;
81196: LD_VAR 0 3
81200: RET
// export function JoinUnion ( array , element ) ; begin
81201: LD_INT 0
81203: PPUSH
// result := array union element ;
81204: LD_ADDR_VAR 0 3
81208: PUSH
81209: LD_VAR 0 1
81213: PUSH
81214: LD_VAR 0 2
81218: UNION
81219: ST_TO_ADDR
// end ;
81220: LD_VAR 0 3
81224: RET
// export function GetBehemoths ( side ) ; begin
81225: LD_INT 0
81227: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
81228: LD_ADDR_VAR 0 2
81232: PUSH
81233: LD_INT 22
81235: PUSH
81236: LD_VAR 0 1
81240: PUSH
81241: EMPTY
81242: LIST
81243: LIST
81244: PUSH
81245: LD_INT 31
81247: PUSH
81248: LD_INT 25
81250: PUSH
81251: EMPTY
81252: LIST
81253: LIST
81254: PUSH
81255: EMPTY
81256: LIST
81257: LIST
81258: PPUSH
81259: CALL_OW 69
81263: ST_TO_ADDR
// end ;
81264: LD_VAR 0 2
81268: RET
// export function Shuffle ( array ) ; var i , index ; begin
81269: LD_INT 0
81271: PPUSH
81272: PPUSH
81273: PPUSH
// result := [ ] ;
81274: LD_ADDR_VAR 0 2
81278: PUSH
81279: EMPTY
81280: ST_TO_ADDR
// if not array then
81281: LD_VAR 0 1
81285: NOT
81286: IFFALSE 81290
// exit ;
81288: GO 81389
// Randomize ;
81290: CALL_OW 10
// for i = array downto 1 do
81294: LD_ADDR_VAR 0 3
81298: PUSH
81299: DOUBLE
81300: LD_VAR 0 1
81304: INC
81305: ST_TO_ADDR
81306: LD_INT 1
81308: PUSH
81309: FOR_DOWNTO
81310: IFFALSE 81387
// begin index := rand ( 1 , array ) ;
81312: LD_ADDR_VAR 0 4
81316: PUSH
81317: LD_INT 1
81319: PPUSH
81320: LD_VAR 0 1
81324: PPUSH
81325: CALL_OW 12
81329: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81330: LD_ADDR_VAR 0 2
81334: PUSH
81335: LD_VAR 0 2
81339: PPUSH
81340: LD_VAR 0 2
81344: PUSH
81345: LD_INT 1
81347: PLUS
81348: PPUSH
81349: LD_VAR 0 1
81353: PUSH
81354: LD_VAR 0 4
81358: ARRAY
81359: PPUSH
81360: CALL_OW 2
81364: ST_TO_ADDR
// array := Delete ( array , index ) ;
81365: LD_ADDR_VAR 0 1
81369: PUSH
81370: LD_VAR 0 1
81374: PPUSH
81375: LD_VAR 0 4
81379: PPUSH
81380: CALL_OW 3
81384: ST_TO_ADDR
// end ;
81385: GO 81309
81387: POP
81388: POP
// end ;
81389: LD_VAR 0 2
81393: RET
// export function GetBaseMaterials ( base ) ; begin
81394: LD_INT 0
81396: PPUSH
// result := [ 0 , 0 , 0 ] ;
81397: LD_ADDR_VAR 0 2
81401: PUSH
81402: LD_INT 0
81404: PUSH
81405: LD_INT 0
81407: PUSH
81408: LD_INT 0
81410: PUSH
81411: EMPTY
81412: LIST
81413: LIST
81414: LIST
81415: ST_TO_ADDR
// if not base then
81416: LD_VAR 0 1
81420: NOT
81421: IFFALSE 81425
// exit ;
81423: GO 81474
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81425: LD_ADDR_VAR 0 2
81429: PUSH
81430: LD_VAR 0 1
81434: PPUSH
81435: LD_INT 1
81437: PPUSH
81438: CALL_OW 275
81442: PUSH
81443: LD_VAR 0 1
81447: PPUSH
81448: LD_INT 2
81450: PPUSH
81451: CALL_OW 275
81455: PUSH
81456: LD_VAR 0 1
81460: PPUSH
81461: LD_INT 3
81463: PPUSH
81464: CALL_OW 275
81468: PUSH
81469: EMPTY
81470: LIST
81471: LIST
81472: LIST
81473: ST_TO_ADDR
// end ;
81474: LD_VAR 0 2
81478: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81479: LD_INT 0
81481: PPUSH
81482: PPUSH
// result := array ;
81483: LD_ADDR_VAR 0 3
81487: PUSH
81488: LD_VAR 0 1
81492: ST_TO_ADDR
// if size > 0 then
81493: LD_VAR 0 2
81497: PUSH
81498: LD_INT 0
81500: GREATER
81501: IFFALSE 81547
// for i := array downto size do
81503: LD_ADDR_VAR 0 4
81507: PUSH
81508: DOUBLE
81509: LD_VAR 0 1
81513: INC
81514: ST_TO_ADDR
81515: LD_VAR 0 2
81519: PUSH
81520: FOR_DOWNTO
81521: IFFALSE 81545
// result := Delete ( result , result ) ;
81523: LD_ADDR_VAR 0 3
81527: PUSH
81528: LD_VAR 0 3
81532: PPUSH
81533: LD_VAR 0 3
81537: PPUSH
81538: CALL_OW 3
81542: ST_TO_ADDR
81543: GO 81520
81545: POP
81546: POP
// end ;
81547: LD_VAR 0 3
81551: RET
// export function ComExit ( unit ) ; var tmp ; begin
81552: LD_INT 0
81554: PPUSH
81555: PPUSH
// if not IsInUnit ( unit ) then
81556: LD_VAR 0 1
81560: PPUSH
81561: CALL_OW 310
81565: NOT
81566: IFFALSE 81570
// exit ;
81568: GO 81630
// tmp := IsInUnit ( unit ) ;
81570: LD_ADDR_VAR 0 3
81574: PUSH
81575: LD_VAR 0 1
81579: PPUSH
81580: CALL_OW 310
81584: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81585: LD_VAR 0 3
81589: PPUSH
81590: CALL_OW 247
81594: PUSH
81595: LD_INT 2
81597: EQUAL
81598: IFFALSE 81611
// ComExitVehicle ( unit ) else
81600: LD_VAR 0 1
81604: PPUSH
81605: CALL_OW 121
81609: GO 81620
// ComExitBuilding ( unit ) ;
81611: LD_VAR 0 1
81615: PPUSH
81616: CALL_OW 122
// result := tmp ;
81620: LD_ADDR_VAR 0 2
81624: PUSH
81625: LD_VAR 0 3
81629: ST_TO_ADDR
// end ;
81630: LD_VAR 0 2
81634: RET
// export function ComExitAll ( units ) ; var i ; begin
81635: LD_INT 0
81637: PPUSH
81638: PPUSH
// if not units then
81639: LD_VAR 0 1
81643: NOT
81644: IFFALSE 81648
// exit ;
81646: GO 81674
// for i in units do
81648: LD_ADDR_VAR 0 3
81652: PUSH
81653: LD_VAR 0 1
81657: PUSH
81658: FOR_IN
81659: IFFALSE 81672
// ComExit ( i ) ;
81661: LD_VAR 0 3
81665: PPUSH
81666: CALL 81552 0 1
81670: GO 81658
81672: POP
81673: POP
// end ;
81674: LD_VAR 0 2
81678: RET
// export function ResetHc ; begin
81679: LD_INT 0
81681: PPUSH
// InitHc ;
81682: CALL_OW 19
// hc_importance := 0 ;
81686: LD_ADDR_OWVAR 32
81690: PUSH
81691: LD_INT 0
81693: ST_TO_ADDR
// end ;
81694: LD_VAR 0 1
81698: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81699: LD_INT 0
81701: PPUSH
81702: PPUSH
81703: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81704: LD_ADDR_VAR 0 6
81708: PUSH
81709: LD_VAR 0 1
81713: PUSH
81714: LD_VAR 0 3
81718: PLUS
81719: PUSH
81720: LD_INT 2
81722: DIV
81723: ST_TO_ADDR
// if _x < 0 then
81724: LD_VAR 0 6
81728: PUSH
81729: LD_INT 0
81731: LESS
81732: IFFALSE 81749
// _x := _x * - 1 ;
81734: LD_ADDR_VAR 0 6
81738: PUSH
81739: LD_VAR 0 6
81743: PUSH
81744: LD_INT 1
81746: NEG
81747: MUL
81748: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81749: LD_ADDR_VAR 0 7
81753: PUSH
81754: LD_VAR 0 2
81758: PUSH
81759: LD_VAR 0 4
81763: PLUS
81764: PUSH
81765: LD_INT 2
81767: DIV
81768: ST_TO_ADDR
// if _y < 0 then
81769: LD_VAR 0 7
81773: PUSH
81774: LD_INT 0
81776: LESS
81777: IFFALSE 81794
// _y := _y * - 1 ;
81779: LD_ADDR_VAR 0 7
81783: PUSH
81784: LD_VAR 0 7
81788: PUSH
81789: LD_INT 1
81791: NEG
81792: MUL
81793: ST_TO_ADDR
// result := [ _x , _y ] ;
81794: LD_ADDR_VAR 0 5
81798: PUSH
81799: LD_VAR 0 6
81803: PUSH
81804: LD_VAR 0 7
81808: PUSH
81809: EMPTY
81810: LIST
81811: LIST
81812: ST_TO_ADDR
// end ;
81813: LD_VAR 0 5
81817: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81818: LD_INT 0
81820: PPUSH
81821: PPUSH
81822: PPUSH
81823: PPUSH
// task := GetTaskList ( unit ) ;
81824: LD_ADDR_VAR 0 7
81828: PUSH
81829: LD_VAR 0 1
81833: PPUSH
81834: CALL_OW 437
81838: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81839: LD_VAR 0 7
81843: NOT
81844: PUSH
81845: LD_VAR 0 1
81849: PPUSH
81850: LD_VAR 0 2
81854: PPUSH
81855: CALL_OW 308
81859: NOT
81860: AND
81861: IFFALSE 81865
// exit ;
81863: GO 81983
// if IsInArea ( unit , area ) then
81865: LD_VAR 0 1
81869: PPUSH
81870: LD_VAR 0 2
81874: PPUSH
81875: CALL_OW 308
81879: IFFALSE 81897
// begin ComMoveToArea ( unit , goAway ) ;
81881: LD_VAR 0 1
81885: PPUSH
81886: LD_VAR 0 3
81890: PPUSH
81891: CALL_OW 113
// exit ;
81895: GO 81983
// end ; if task [ 1 ] [ 1 ] <> M then
81897: LD_VAR 0 7
81901: PUSH
81902: LD_INT 1
81904: ARRAY
81905: PUSH
81906: LD_INT 1
81908: ARRAY
81909: PUSH
81910: LD_STRING M
81912: NONEQUAL
81913: IFFALSE 81917
// exit ;
81915: GO 81983
// x := task [ 1 ] [ 2 ] ;
81917: LD_ADDR_VAR 0 5
81921: PUSH
81922: LD_VAR 0 7
81926: PUSH
81927: LD_INT 1
81929: ARRAY
81930: PUSH
81931: LD_INT 2
81933: ARRAY
81934: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81935: LD_ADDR_VAR 0 6
81939: PUSH
81940: LD_VAR 0 7
81944: PUSH
81945: LD_INT 1
81947: ARRAY
81948: PUSH
81949: LD_INT 3
81951: ARRAY
81952: ST_TO_ADDR
// if InArea ( x , y , area ) then
81953: LD_VAR 0 5
81957: PPUSH
81958: LD_VAR 0 6
81962: PPUSH
81963: LD_VAR 0 2
81967: PPUSH
81968: CALL_OW 309
81972: IFFALSE 81983
// ComStop ( unit ) ;
81974: LD_VAR 0 1
81978: PPUSH
81979: CALL_OW 141
// end ;
81983: LD_VAR 0 4
81987: RET
// export function Abs ( value ) ; begin
81988: LD_INT 0
81990: PPUSH
// result := value ;
81991: LD_ADDR_VAR 0 2
81995: PUSH
81996: LD_VAR 0 1
82000: ST_TO_ADDR
// if value < 0 then
82001: LD_VAR 0 1
82005: PUSH
82006: LD_INT 0
82008: LESS
82009: IFFALSE 82026
// result := value * - 1 ;
82011: LD_ADDR_VAR 0 2
82015: PUSH
82016: LD_VAR 0 1
82020: PUSH
82021: LD_INT 1
82023: NEG
82024: MUL
82025: ST_TO_ADDR
// end ;
82026: LD_VAR 0 2
82030: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82031: LD_INT 0
82033: PPUSH
82034: PPUSH
82035: PPUSH
82036: PPUSH
82037: PPUSH
82038: PPUSH
82039: PPUSH
82040: PPUSH
// if not unit or not building then
82041: LD_VAR 0 1
82045: NOT
82046: PUSH
82047: LD_VAR 0 2
82051: NOT
82052: OR
82053: IFFALSE 82057
// exit ;
82055: GO 82283
// x := GetX ( building ) ;
82057: LD_ADDR_VAR 0 4
82061: PUSH
82062: LD_VAR 0 2
82066: PPUSH
82067: CALL_OW 250
82071: ST_TO_ADDR
// y := GetY ( building ) ;
82072: LD_ADDR_VAR 0 6
82076: PUSH
82077: LD_VAR 0 2
82081: PPUSH
82082: CALL_OW 251
82086: ST_TO_ADDR
// d := GetDir ( building ) ;
82087: LD_ADDR_VAR 0 8
82091: PUSH
82092: LD_VAR 0 2
82096: PPUSH
82097: CALL_OW 254
82101: ST_TO_ADDR
// r := 4 ;
82102: LD_ADDR_VAR 0 9
82106: PUSH
82107: LD_INT 4
82109: ST_TO_ADDR
// for i := 1 to 5 do
82110: LD_ADDR_VAR 0 10
82114: PUSH
82115: DOUBLE
82116: LD_INT 1
82118: DEC
82119: ST_TO_ADDR
82120: LD_INT 5
82122: PUSH
82123: FOR_TO
82124: IFFALSE 82281
// begin _x := ShiftX ( x , d , r + i ) ;
82126: LD_ADDR_VAR 0 5
82130: PUSH
82131: LD_VAR 0 4
82135: PPUSH
82136: LD_VAR 0 8
82140: PPUSH
82141: LD_VAR 0 9
82145: PUSH
82146: LD_VAR 0 10
82150: PLUS
82151: PPUSH
82152: CALL_OW 272
82156: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82157: LD_ADDR_VAR 0 7
82161: PUSH
82162: LD_VAR 0 6
82166: PPUSH
82167: LD_VAR 0 8
82171: PPUSH
82172: LD_VAR 0 9
82176: PUSH
82177: LD_VAR 0 10
82181: PLUS
82182: PPUSH
82183: CALL_OW 273
82187: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82188: LD_VAR 0 5
82192: PPUSH
82193: LD_VAR 0 7
82197: PPUSH
82198: CALL_OW 488
82202: PUSH
82203: LD_VAR 0 5
82207: PPUSH
82208: LD_VAR 0 7
82212: PPUSH
82213: CALL_OW 428
82217: PPUSH
82218: CALL_OW 247
82222: PUSH
82223: LD_INT 3
82225: PUSH
82226: LD_INT 2
82228: PUSH
82229: EMPTY
82230: LIST
82231: LIST
82232: IN
82233: NOT
82234: AND
82235: IFFALSE 82279
// begin ComMoveXY ( unit , _x , _y ) ;
82237: LD_VAR 0 1
82241: PPUSH
82242: LD_VAR 0 5
82246: PPUSH
82247: LD_VAR 0 7
82251: PPUSH
82252: CALL_OW 111
// result := [ _x , _y ] ;
82256: LD_ADDR_VAR 0 3
82260: PUSH
82261: LD_VAR 0 5
82265: PUSH
82266: LD_VAR 0 7
82270: PUSH
82271: EMPTY
82272: LIST
82273: LIST
82274: ST_TO_ADDR
// exit ;
82275: POP
82276: POP
82277: GO 82283
// end ; end ;
82279: GO 82123
82281: POP
82282: POP
// end ;
82283: LD_VAR 0 3
82287: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82288: LD_INT 0
82290: PPUSH
82291: PPUSH
82292: PPUSH
// result := 0 ;
82293: LD_ADDR_VAR 0 3
82297: PUSH
82298: LD_INT 0
82300: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82301: LD_VAR 0 1
82305: PUSH
82306: LD_INT 0
82308: LESS
82309: PUSH
82310: LD_VAR 0 1
82314: PUSH
82315: LD_INT 8
82317: GREATER
82318: OR
82319: PUSH
82320: LD_VAR 0 2
82324: PUSH
82325: LD_INT 0
82327: LESS
82328: OR
82329: PUSH
82330: LD_VAR 0 2
82334: PUSH
82335: LD_INT 8
82337: GREATER
82338: OR
82339: IFFALSE 82343
// exit ;
82341: GO 82418
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82343: LD_ADDR_VAR 0 4
82347: PUSH
82348: LD_INT 22
82350: PUSH
82351: LD_VAR 0 2
82355: PUSH
82356: EMPTY
82357: LIST
82358: LIST
82359: PPUSH
82360: CALL_OW 69
82364: PUSH
82365: FOR_IN
82366: IFFALSE 82416
// begin un := UnitShoot ( i ) ;
82368: LD_ADDR_VAR 0 5
82372: PUSH
82373: LD_VAR 0 4
82377: PPUSH
82378: CALL_OW 504
82382: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82383: LD_VAR 0 5
82387: PPUSH
82388: CALL_OW 255
82392: PUSH
82393: LD_VAR 0 1
82397: EQUAL
82398: IFFALSE 82414
// begin result := un ;
82400: LD_ADDR_VAR 0 3
82404: PUSH
82405: LD_VAR 0 5
82409: ST_TO_ADDR
// exit ;
82410: POP
82411: POP
82412: GO 82418
// end ; end ;
82414: GO 82365
82416: POP
82417: POP
// end ;
82418: LD_VAR 0 3
82422: RET
// export function GetCargoBay ( units ) ; begin
82423: LD_INT 0
82425: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82426: LD_ADDR_VAR 0 2
82430: PUSH
82431: LD_VAR 0 1
82435: PPUSH
82436: LD_INT 2
82438: PUSH
82439: LD_INT 34
82441: PUSH
82442: LD_INT 12
82444: PUSH
82445: EMPTY
82446: LIST
82447: LIST
82448: PUSH
82449: LD_INT 34
82451: PUSH
82452: LD_INT 51
82454: PUSH
82455: EMPTY
82456: LIST
82457: LIST
82458: PUSH
82459: LD_INT 34
82461: PUSH
82462: LD_INT 32
82464: PUSH
82465: EMPTY
82466: LIST
82467: LIST
82468: PUSH
82469: LD_INT 34
82471: PUSH
82472: LD_EXP 49
82476: PUSH
82477: EMPTY
82478: LIST
82479: LIST
82480: PUSH
82481: EMPTY
82482: LIST
82483: LIST
82484: LIST
82485: LIST
82486: LIST
82487: PPUSH
82488: CALL_OW 72
82492: ST_TO_ADDR
// end ;
82493: LD_VAR 0 2
82497: RET
// export function Negate ( value ) ; begin
82498: LD_INT 0
82500: PPUSH
// result := not value ;
82501: LD_ADDR_VAR 0 2
82505: PUSH
82506: LD_VAR 0 1
82510: NOT
82511: ST_TO_ADDR
// end ;
82512: LD_VAR 0 2
82516: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
82517: LD_INT 0
82519: PPUSH
// if x1 = x2 then
82520: LD_VAR 0 1
82524: PUSH
82525: LD_VAR 0 3
82529: EQUAL
82530: IFFALSE 82564
// begin if y1 > y2 then
82532: LD_VAR 0 2
82536: PUSH
82537: LD_VAR 0 4
82541: GREATER
82542: IFFALSE 82554
// result := 0 else
82544: LD_ADDR_VAR 0 5
82548: PUSH
82549: LD_INT 0
82551: ST_TO_ADDR
82552: GO 82562
// result := 3 ;
82554: LD_ADDR_VAR 0 5
82558: PUSH
82559: LD_INT 3
82561: ST_TO_ADDR
// exit ;
82562: GO 82650
// end ; if y1 = y2 then
82564: LD_VAR 0 2
82568: PUSH
82569: LD_VAR 0 4
82573: EQUAL
82574: IFFALSE 82608
// begin if x1 > x2 then
82576: LD_VAR 0 1
82580: PUSH
82581: LD_VAR 0 3
82585: GREATER
82586: IFFALSE 82598
// result := 1 else
82588: LD_ADDR_VAR 0 5
82592: PUSH
82593: LD_INT 1
82595: ST_TO_ADDR
82596: GO 82606
// result := 4 ;
82598: LD_ADDR_VAR 0 5
82602: PUSH
82603: LD_INT 4
82605: ST_TO_ADDR
// exit ;
82606: GO 82650
// end ; if x1 > x2 and y1 > y2 then
82608: LD_VAR 0 1
82612: PUSH
82613: LD_VAR 0 3
82617: GREATER
82618: PUSH
82619: LD_VAR 0 2
82623: PUSH
82624: LD_VAR 0 4
82628: GREATER
82629: AND
82630: IFFALSE 82642
// result := 2 else
82632: LD_ADDR_VAR 0 5
82636: PUSH
82637: LD_INT 2
82639: ST_TO_ADDR
82640: GO 82650
// result := 5 ;
82642: LD_ADDR_VAR 0 5
82646: PUSH
82647: LD_INT 5
82649: ST_TO_ADDR
// end ;
82650: LD_VAR 0 5
82654: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82655: LD_INT 0
82657: PPUSH
82658: PPUSH
// if not driver or not IsInUnit ( driver ) then
82659: LD_VAR 0 1
82663: NOT
82664: PUSH
82665: LD_VAR 0 1
82669: PPUSH
82670: CALL_OW 310
82674: NOT
82675: OR
82676: IFFALSE 82680
// exit ;
82678: GO 82770
// vehicle := IsInUnit ( driver ) ;
82680: LD_ADDR_VAR 0 3
82684: PUSH
82685: LD_VAR 0 1
82689: PPUSH
82690: CALL_OW 310
82694: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82695: LD_VAR 0 1
82699: PPUSH
82700: LD_STRING \
82702: PUSH
82703: LD_INT 0
82705: PUSH
82706: LD_INT 0
82708: PUSH
82709: LD_INT 0
82711: PUSH
82712: LD_INT 0
82714: PUSH
82715: LD_INT 0
82717: PUSH
82718: LD_INT 0
82720: PUSH
82721: EMPTY
82722: LIST
82723: LIST
82724: LIST
82725: LIST
82726: LIST
82727: LIST
82728: LIST
82729: PUSH
82730: LD_STRING E
82732: PUSH
82733: LD_INT 0
82735: PUSH
82736: LD_INT 0
82738: PUSH
82739: LD_VAR 0 3
82743: PUSH
82744: LD_INT 0
82746: PUSH
82747: LD_INT 0
82749: PUSH
82750: LD_INT 0
82752: PUSH
82753: EMPTY
82754: LIST
82755: LIST
82756: LIST
82757: LIST
82758: LIST
82759: LIST
82760: LIST
82761: PUSH
82762: EMPTY
82763: LIST
82764: LIST
82765: PPUSH
82766: CALL_OW 446
// end ;
82770: LD_VAR 0 2
82774: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82775: LD_INT 0
82777: PPUSH
82778: PPUSH
// if not driver or not IsInUnit ( driver ) then
82779: LD_VAR 0 1
82783: NOT
82784: PUSH
82785: LD_VAR 0 1
82789: PPUSH
82790: CALL_OW 310
82794: NOT
82795: OR
82796: IFFALSE 82800
// exit ;
82798: GO 82890
// vehicle := IsInUnit ( driver ) ;
82800: LD_ADDR_VAR 0 3
82804: PUSH
82805: LD_VAR 0 1
82809: PPUSH
82810: CALL_OW 310
82814: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82815: LD_VAR 0 1
82819: PPUSH
82820: LD_STRING \
82822: PUSH
82823: LD_INT 0
82825: PUSH
82826: LD_INT 0
82828: PUSH
82829: LD_INT 0
82831: PUSH
82832: LD_INT 0
82834: PUSH
82835: LD_INT 0
82837: PUSH
82838: LD_INT 0
82840: PUSH
82841: EMPTY
82842: LIST
82843: LIST
82844: LIST
82845: LIST
82846: LIST
82847: LIST
82848: LIST
82849: PUSH
82850: LD_STRING E
82852: PUSH
82853: LD_INT 0
82855: PUSH
82856: LD_INT 0
82858: PUSH
82859: LD_VAR 0 3
82863: PUSH
82864: LD_INT 0
82866: PUSH
82867: LD_INT 0
82869: PUSH
82870: LD_INT 0
82872: PUSH
82873: EMPTY
82874: LIST
82875: LIST
82876: LIST
82877: LIST
82878: LIST
82879: LIST
82880: LIST
82881: PUSH
82882: EMPTY
82883: LIST
82884: LIST
82885: PPUSH
82886: CALL_OW 447
// end ;
82890: LD_VAR 0 2
82894: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82895: LD_INT 0
82897: PPUSH
82898: PPUSH
82899: PPUSH
// tmp := [ ] ;
82900: LD_ADDR_VAR 0 5
82904: PUSH
82905: EMPTY
82906: ST_TO_ADDR
// for i in units do
82907: LD_ADDR_VAR 0 4
82911: PUSH
82912: LD_VAR 0 1
82916: PUSH
82917: FOR_IN
82918: IFFALSE 82956
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82920: LD_ADDR_VAR 0 5
82924: PUSH
82925: LD_VAR 0 5
82929: PPUSH
82930: LD_VAR 0 5
82934: PUSH
82935: LD_INT 1
82937: PLUS
82938: PPUSH
82939: LD_VAR 0 4
82943: PPUSH
82944: CALL_OW 256
82948: PPUSH
82949: CALL_OW 2
82953: ST_TO_ADDR
82954: GO 82917
82956: POP
82957: POP
// if not tmp then
82958: LD_VAR 0 5
82962: NOT
82963: IFFALSE 82967
// exit ;
82965: GO 83015
// if asc then
82967: LD_VAR 0 2
82971: IFFALSE 82995
// result := SortListByListAsc ( units , tmp ) else
82973: LD_ADDR_VAR 0 3
82977: PUSH
82978: LD_VAR 0 1
82982: PPUSH
82983: LD_VAR 0 5
82987: PPUSH
82988: CALL_OW 76
82992: ST_TO_ADDR
82993: GO 83015
// result := SortListByListDesc ( units , tmp ) ;
82995: LD_ADDR_VAR 0 3
82999: PUSH
83000: LD_VAR 0 1
83004: PPUSH
83005: LD_VAR 0 5
83009: PPUSH
83010: CALL_OW 77
83014: ST_TO_ADDR
// end ;
83015: LD_VAR 0 3
83019: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83020: LD_INT 0
83022: PPUSH
83023: PPUSH
// task := GetTaskList ( mech ) ;
83024: LD_ADDR_VAR 0 4
83028: PUSH
83029: LD_VAR 0 1
83033: PPUSH
83034: CALL_OW 437
83038: ST_TO_ADDR
// if not task then
83039: LD_VAR 0 4
83043: NOT
83044: IFFALSE 83048
// exit ;
83046: GO 83090
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83048: LD_ADDR_VAR 0 3
83052: PUSH
83053: LD_VAR 0 4
83057: PUSH
83058: LD_INT 1
83060: ARRAY
83061: PUSH
83062: LD_INT 1
83064: ARRAY
83065: PUSH
83066: LD_STRING r
83068: EQUAL
83069: PUSH
83070: LD_VAR 0 4
83074: PUSH
83075: LD_INT 1
83077: ARRAY
83078: PUSH
83079: LD_INT 4
83081: ARRAY
83082: PUSH
83083: LD_VAR 0 2
83087: EQUAL
83088: AND
83089: ST_TO_ADDR
// end ;
83090: LD_VAR 0 3
83094: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83095: LD_INT 0
83097: PPUSH
// SetDir ( unit , d ) ;
83098: LD_VAR 0 1
83102: PPUSH
83103: LD_VAR 0 4
83107: PPUSH
83108: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83112: LD_VAR 0 1
83116: PPUSH
83117: LD_VAR 0 2
83121: PPUSH
83122: LD_VAR 0 3
83126: PPUSH
83127: LD_VAR 0 5
83131: PPUSH
83132: CALL_OW 48
// end ;
83136: LD_VAR 0 6
83140: RET
// export function ToNaturalNumber ( number ) ; begin
83141: LD_INT 0
83143: PPUSH
// result := number div 1 ;
83144: LD_ADDR_VAR 0 2
83148: PUSH
83149: LD_VAR 0 1
83153: PUSH
83154: LD_INT 1
83156: DIV
83157: ST_TO_ADDR
// if number < 0 then
83158: LD_VAR 0 1
83162: PUSH
83163: LD_INT 0
83165: LESS
83166: IFFALSE 83176
// result := 0 ;
83168: LD_ADDR_VAR 0 2
83172: PUSH
83173: LD_INT 0
83175: ST_TO_ADDR
// end ;
83176: LD_VAR 0 2
83180: RET
// export function SortByClass ( units , class ) ; var un ; begin
83181: LD_INT 0
83183: PPUSH
83184: PPUSH
// if not units or not class then
83185: LD_VAR 0 1
83189: NOT
83190: PUSH
83191: LD_VAR 0 2
83195: NOT
83196: OR
83197: IFFALSE 83201
// exit ;
83199: GO 83296
// result := [ ] ;
83201: LD_ADDR_VAR 0 3
83205: PUSH
83206: EMPTY
83207: ST_TO_ADDR
// for un in units do
83208: LD_ADDR_VAR 0 4
83212: PUSH
83213: LD_VAR 0 1
83217: PUSH
83218: FOR_IN
83219: IFFALSE 83294
// if GetClass ( un ) = class then
83221: LD_VAR 0 4
83225: PPUSH
83226: CALL_OW 257
83230: PUSH
83231: LD_VAR 0 2
83235: EQUAL
83236: IFFALSE 83263
// result := Insert ( result , 1 , un ) else
83238: LD_ADDR_VAR 0 3
83242: PUSH
83243: LD_VAR 0 3
83247: PPUSH
83248: LD_INT 1
83250: PPUSH
83251: LD_VAR 0 4
83255: PPUSH
83256: CALL_OW 2
83260: ST_TO_ADDR
83261: GO 83292
// result := Replace ( result , result + 1 , un ) ;
83263: LD_ADDR_VAR 0 3
83267: PUSH
83268: LD_VAR 0 3
83272: PPUSH
83273: LD_VAR 0 3
83277: PUSH
83278: LD_INT 1
83280: PLUS
83281: PPUSH
83282: LD_VAR 0 4
83286: PPUSH
83287: CALL_OW 1
83291: ST_TO_ADDR
83292: GO 83218
83294: POP
83295: POP
// end ;
83296: LD_VAR 0 3
83300: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83301: LD_INT 0
83303: PPUSH
83304: PPUSH
83305: PPUSH
83306: PPUSH
83307: PPUSH
83308: PPUSH
83309: PPUSH
// result := [ ] ;
83310: LD_ADDR_VAR 0 4
83314: PUSH
83315: EMPTY
83316: ST_TO_ADDR
// if x - r < 0 then
83317: LD_VAR 0 1
83321: PUSH
83322: LD_VAR 0 3
83326: MINUS
83327: PUSH
83328: LD_INT 0
83330: LESS
83331: IFFALSE 83343
// min_x := 0 else
83333: LD_ADDR_VAR 0 8
83337: PUSH
83338: LD_INT 0
83340: ST_TO_ADDR
83341: GO 83359
// min_x := x - r ;
83343: LD_ADDR_VAR 0 8
83347: PUSH
83348: LD_VAR 0 1
83352: PUSH
83353: LD_VAR 0 3
83357: MINUS
83358: ST_TO_ADDR
// if y - r < 0 then
83359: LD_VAR 0 2
83363: PUSH
83364: LD_VAR 0 3
83368: MINUS
83369: PUSH
83370: LD_INT 0
83372: LESS
83373: IFFALSE 83385
// min_y := 0 else
83375: LD_ADDR_VAR 0 7
83379: PUSH
83380: LD_INT 0
83382: ST_TO_ADDR
83383: GO 83401
// min_y := y - r ;
83385: LD_ADDR_VAR 0 7
83389: PUSH
83390: LD_VAR 0 2
83394: PUSH
83395: LD_VAR 0 3
83399: MINUS
83400: ST_TO_ADDR
// max_x := x + r ;
83401: LD_ADDR_VAR 0 9
83405: PUSH
83406: LD_VAR 0 1
83410: PUSH
83411: LD_VAR 0 3
83415: PLUS
83416: ST_TO_ADDR
// max_y := y + r ;
83417: LD_ADDR_VAR 0 10
83421: PUSH
83422: LD_VAR 0 2
83426: PUSH
83427: LD_VAR 0 3
83431: PLUS
83432: ST_TO_ADDR
// for _x = min_x to max_x do
83433: LD_ADDR_VAR 0 5
83437: PUSH
83438: DOUBLE
83439: LD_VAR 0 8
83443: DEC
83444: ST_TO_ADDR
83445: LD_VAR 0 9
83449: PUSH
83450: FOR_TO
83451: IFFALSE 83552
// for _y = min_y to max_y do
83453: LD_ADDR_VAR 0 6
83457: PUSH
83458: DOUBLE
83459: LD_VAR 0 7
83463: DEC
83464: ST_TO_ADDR
83465: LD_VAR 0 10
83469: PUSH
83470: FOR_TO
83471: IFFALSE 83548
// begin if not ValidHex ( _x , _y ) then
83473: LD_VAR 0 5
83477: PPUSH
83478: LD_VAR 0 6
83482: PPUSH
83483: CALL_OW 488
83487: NOT
83488: IFFALSE 83492
// continue ;
83490: GO 83470
// if GetResourceTypeXY ( _x , _y ) then
83492: LD_VAR 0 5
83496: PPUSH
83497: LD_VAR 0 6
83501: PPUSH
83502: CALL_OW 283
83506: IFFALSE 83546
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83508: LD_ADDR_VAR 0 4
83512: PUSH
83513: LD_VAR 0 4
83517: PPUSH
83518: LD_VAR 0 4
83522: PUSH
83523: LD_INT 1
83525: PLUS
83526: PPUSH
83527: LD_VAR 0 5
83531: PUSH
83532: LD_VAR 0 6
83536: PUSH
83537: EMPTY
83538: LIST
83539: LIST
83540: PPUSH
83541: CALL_OW 1
83545: ST_TO_ADDR
// end ;
83546: GO 83470
83548: POP
83549: POP
83550: GO 83450
83552: POP
83553: POP
// end ;
83554: LD_VAR 0 4
83558: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
83559: LD_INT 0
83561: PPUSH
83562: PPUSH
83563: PPUSH
83564: PPUSH
83565: PPUSH
83566: PPUSH
// if not units then
83567: LD_VAR 0 1
83571: NOT
83572: IFFALSE 83576
// exit ;
83574: GO 83977
// result := UnitFilter ( units , [ f_ok ] ) ;
83576: LD_ADDR_VAR 0 3
83580: PUSH
83581: LD_VAR 0 1
83585: PPUSH
83586: LD_INT 50
83588: PUSH
83589: EMPTY
83590: LIST
83591: PPUSH
83592: CALL_OW 72
83596: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83597: LD_ADDR_VAR 0 7
83601: PUSH
83602: LD_VAR 0 1
83606: PUSH
83607: LD_INT 1
83609: ARRAY
83610: PPUSH
83611: CALL_OW 255
83615: ST_TO_ADDR
// if not result then
83616: LD_VAR 0 3
83620: NOT
83621: IFFALSE 83625
// exit ;
83623: GO 83977
// for i in result do
83625: LD_ADDR_VAR 0 4
83629: PUSH
83630: LD_VAR 0 3
83634: PUSH
83635: FOR_IN
83636: IFFALSE 83975
// begin tag := GetTag ( i ) + 1 ;
83638: LD_ADDR_VAR 0 8
83642: PUSH
83643: LD_VAR 0 4
83647: PPUSH
83648: CALL_OW 110
83652: PUSH
83653: LD_INT 1
83655: PLUS
83656: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
83657: LD_ADDR_VAR 0 6
83661: PUSH
83662: LD_VAR 0 4
83666: PPUSH
83667: CALL_OW 250
83671: PPUSH
83672: LD_VAR 0 4
83676: PPUSH
83677: CALL_OW 251
83681: PPUSH
83682: LD_INT 6
83684: PPUSH
83685: CALL 83301 0 3
83689: ST_TO_ADDR
// if cr then
83690: LD_VAR 0 6
83694: IFFALSE 83733
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83696: LD_VAR 0 4
83700: PPUSH
83701: LD_VAR 0 6
83705: PUSH
83706: LD_INT 1
83708: ARRAY
83709: PUSH
83710: LD_INT 1
83712: ARRAY
83713: PPUSH
83714: LD_VAR 0 6
83718: PUSH
83719: LD_INT 1
83721: ARRAY
83722: PUSH
83723: LD_INT 2
83725: ARRAY
83726: PPUSH
83727: CALL_OW 116
83731: GO 83973
// if path > tag then
83733: LD_VAR 0 2
83737: PUSH
83738: LD_VAR 0 8
83742: GREATER
83743: IFFALSE 83921
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
83745: LD_ADDR_VAR 0 5
83749: PUSH
83750: LD_INT 81
83752: PUSH
83753: LD_VAR 0 7
83757: PUSH
83758: EMPTY
83759: LIST
83760: LIST
83761: PUSH
83762: LD_INT 91
83764: PUSH
83765: LD_VAR 0 4
83769: PUSH
83770: LD_INT 12
83772: PUSH
83773: EMPTY
83774: LIST
83775: LIST
83776: LIST
83777: PUSH
83778: EMPTY
83779: LIST
83780: LIST
83781: PPUSH
83782: CALL_OW 69
83786: ST_TO_ADDR
// if enemy then
83787: LD_VAR 0 5
83791: IFFALSE 83819
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83793: LD_VAR 0 4
83797: PPUSH
83798: LD_VAR 0 5
83802: PPUSH
83803: LD_VAR 0 4
83807: PPUSH
83808: CALL_OW 74
83812: PPUSH
83813: CALL_OW 115
83817: GO 83919
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83819: LD_VAR 0 4
83823: PPUSH
83824: LD_VAR 0 2
83828: PUSH
83829: LD_VAR 0 8
83833: ARRAY
83834: PUSH
83835: LD_INT 1
83837: ARRAY
83838: PPUSH
83839: LD_VAR 0 2
83843: PUSH
83844: LD_VAR 0 8
83848: ARRAY
83849: PUSH
83850: LD_INT 2
83852: ARRAY
83853: PPUSH
83854: CALL_OW 297
83858: PUSH
83859: LD_INT 6
83861: GREATER
83862: IFFALSE 83905
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83864: LD_VAR 0 4
83868: PPUSH
83869: LD_VAR 0 2
83873: PUSH
83874: LD_VAR 0 8
83878: ARRAY
83879: PUSH
83880: LD_INT 1
83882: ARRAY
83883: PPUSH
83884: LD_VAR 0 2
83888: PUSH
83889: LD_VAR 0 8
83893: ARRAY
83894: PUSH
83895: LD_INT 2
83897: ARRAY
83898: PPUSH
83899: CALL_OW 114
83903: GO 83919
// SetTag ( i , tag ) ;
83905: LD_VAR 0 4
83909: PPUSH
83910: LD_VAR 0 8
83914: PPUSH
83915: CALL_OW 109
// end else
83919: GO 83973
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83921: LD_ADDR_VAR 0 5
83925: PUSH
83926: LD_INT 81
83928: PUSH
83929: LD_VAR 0 7
83933: PUSH
83934: EMPTY
83935: LIST
83936: LIST
83937: PPUSH
83938: CALL_OW 69
83942: ST_TO_ADDR
// if enemy then
83943: LD_VAR 0 5
83947: IFFALSE 83973
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83949: LD_VAR 0 4
83953: PPUSH
83954: LD_VAR 0 5
83958: PPUSH
83959: LD_VAR 0 4
83963: PPUSH
83964: CALL_OW 74
83968: PPUSH
83969: CALL_OW 115
// end ; end ;
83973: GO 83635
83975: POP
83976: POP
// end ; end_of_file
83977: LD_VAR 0 3
83981: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83982: LD_VAR 0 1
83986: PUSH
83987: LD_INT 200
83989: DOUBLE
83990: GREATEREQUAL
83991: IFFALSE 83999
83993: LD_INT 299
83995: DOUBLE
83996: LESSEQUAL
83997: IFTRUE 84001
83999: GO 84033
84001: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84002: LD_VAR 0 1
84006: PPUSH
84007: LD_VAR 0 2
84011: PPUSH
84012: LD_VAR 0 3
84016: PPUSH
84017: LD_VAR 0 4
84021: PPUSH
84022: LD_VAR 0 5
84026: PPUSH
84027: CALL 40544 0 5
84031: GO 84110
84033: LD_INT 300
84035: DOUBLE
84036: GREATEREQUAL
84037: IFFALSE 84045
84039: LD_INT 399
84041: DOUBLE
84042: LESSEQUAL
84043: IFTRUE 84047
84045: GO 84109
84047: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84048: LD_VAR 0 1
84052: PPUSH
84053: LD_VAR 0 2
84057: PPUSH
84058: LD_VAR 0 3
84062: PPUSH
84063: LD_VAR 0 4
84067: PPUSH
84068: LD_VAR 0 5
84072: PPUSH
84073: LD_VAR 0 6
84077: PPUSH
84078: LD_VAR 0 7
84082: PPUSH
84083: LD_VAR 0 8
84087: PPUSH
84088: LD_VAR 0 9
84092: PPUSH
84093: LD_VAR 0 10
84097: PPUSH
84098: LD_VAR 0 11
84102: PPUSH
84103: CALL 38432 0 11
84107: GO 84110
84109: POP
// end ;
84110: PPOPN 11
84112: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84113: LD_VAR 0 1
84117: PPUSH
84118: LD_VAR 0 2
84122: PPUSH
84123: LD_VAR 0 3
84127: PPUSH
84128: LD_VAR 0 4
84132: PPUSH
84133: LD_VAR 0 5
84137: PPUSH
84138: CALL 40526 0 5
// end ; end_of_file
84142: PPOPN 5
84144: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84145: LD_VAR 0 1
84149: PPUSH
84150: LD_VAR 0 2
84154: PPUSH
84155: LD_VAR 0 3
84159: PPUSH
84160: LD_VAR 0 4
84164: PPUSH
84165: LD_VAR 0 5
84169: PPUSH
84170: LD_VAR 0 6
84174: PPUSH
84175: CALL 27240 0 6
// end ;
84179: PPOPN 6
84181: END
