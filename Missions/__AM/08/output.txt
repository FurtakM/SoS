// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9172 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 76174 0 9
// Action ;
  79: CALL 15540 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 41702 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 41702 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 41702 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 41702 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 41702 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 41702 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 41702 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 79497 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 41702 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 41702 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 79497 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 41702 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 41702 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 79497 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 41702 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 79497 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 41702 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 79497 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 41702 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 79497 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 41702 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 79497 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 41702 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 79497 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 79497 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 50094 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 77131 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 55222 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 55222 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 55222 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 55222 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 41702 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 41702 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 41702 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 41702 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 41702 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 41702 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 41702 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 41702 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 41702 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 41702 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; EraseResourceArea ( mat_cans , area ) ;
5012: LD_INT 1
5014: PPUSH
5015: LD_VAR 0 11
5019: PPUSH
5020: CALL_OW 286
// squad := [ ] ;
5024: LD_ADDR_VAR 0 5
5028: PUSH
5029: EMPTY
5030: ST_TO_ADDR
// tmp := [ ] ;
5031: LD_ADDR_VAR 0 6
5035: PUSH
5036: EMPTY
5037: ST_TO_ADDR
// tmpVehs := [ ] ;
5038: LD_ADDR_VAR 0 7
5042: PUSH
5043: EMPTY
5044: ST_TO_ADDR
// uc_side := 1 ;
5045: LD_ADDR_OWVAR 20
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// uc_nation := 1 ;
5053: LD_ADDR_OWVAR 21
5057: PUSH
5058: LD_INT 1
5060: ST_TO_ADDR
// if vehicles then
5061: LD_VAR 0 8
5065: IFFALSE 5287
// begin for i := 1 to vehicles do
5067: LD_ADDR_VAR 0 2
5071: PUSH
5072: DOUBLE
5073: LD_INT 1
5075: DEC
5076: ST_TO_ADDR
5077: LD_VAR 0 8
5081: PUSH
5082: FOR_TO
5083: IFFALSE 5285
// begin if vehicles [ i ] then
5085: LD_VAR 0 8
5089: PUSH
5090: LD_VAR 0 2
5094: ARRAY
5095: IFFALSE 5283
// begin if not vehicles [ i ] [ 1 ] then
5097: LD_VAR 0 8
5101: PUSH
5102: LD_VAR 0 2
5106: ARRAY
5107: PUSH
5108: LD_INT 1
5110: ARRAY
5111: NOT
5112: IFFALSE 5116
// continue ;
5114: GO 5082
// if not vehicles [ i ] [ 2 ] then
5116: LD_VAR 0 8
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: NOT
5131: IFFALSE 5135
// continue ;
5133: GO 5082
// if not vehicles [ i ] [ 3 ] then
5135: LD_VAR 0 8
5139: PUSH
5140: LD_VAR 0 2
5144: ARRAY
5145: PUSH
5146: LD_INT 3
5148: ARRAY
5149: NOT
5150: IFFALSE 5154
// continue ;
5152: GO 5082
// if not vehicles [ i ] [ 4 ] then
5154: LD_VAR 0 8
5158: PUSH
5159: LD_VAR 0 2
5163: ARRAY
5164: PUSH
5165: LD_INT 4
5167: ARRAY
5168: NOT
5169: IFFALSE 5173
// continue ;
5171: GO 5082
// vc_chassis := vehicles [ i ] [ 1 ] ;
5173: LD_ADDR_OWVAR 37
5177: PUSH
5178: LD_VAR 0 8
5182: PUSH
5183: LD_VAR 0 2
5187: ARRAY
5188: PUSH
5189: LD_INT 1
5191: ARRAY
5192: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5193: LD_ADDR_OWVAR 39
5197: PUSH
5198: LD_VAR 0 8
5202: PUSH
5203: LD_VAR 0 2
5207: ARRAY
5208: PUSH
5209: LD_INT 2
5211: ARRAY
5212: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5213: LD_ADDR_OWVAR 38
5217: PUSH
5218: LD_VAR 0 8
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: PUSH
5229: LD_INT 3
5231: ARRAY
5232: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5233: LD_ADDR_OWVAR 40
5237: PUSH
5238: LD_VAR 0 8
5242: PUSH
5243: LD_VAR 0 2
5247: ARRAY
5248: PUSH
5249: LD_INT 4
5251: ARRAY
5252: ST_TO_ADDR
// veh := CreateVehicle ;
5253: LD_ADDR_VAR 0 9
5257: PUSH
5258: CALL_OW 45
5262: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5263: LD_ADDR_VAR 0 7
5267: PUSH
5268: LD_VAR 0 7
5272: PPUSH
5273: LD_VAR 0 9
5277: PPUSH
5278: CALL 79497 0 2
5282: ST_TO_ADDR
// end ; end ;
5283: GO 5082
5285: POP
5286: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5287: LD_ADDR_EXP 14
5291: PUSH
5292: LD_STRING JMM
5294: PPUSH
5295: LD_EXP 1
5299: NOT
5300: PPUSH
5301: LD_VAR 0 10
5305: PPUSH
5306: CALL 41702 0 3
5310: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5311: LD_EXP 13
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 3
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: IN
5326: PUSH
5327: LD_EXP 15
5331: NOT
5332: AND
5333: IFFALSE 5394
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5335: LD_ADDR_EXP 15
5339: PUSH
5340: LD_STRING Brown
5342: PPUSH
5343: LD_EXP 1
5347: NOT
5348: PPUSH
5349: LD_VAR 0 10
5353: PPUSH
5354: CALL 41702 0 3
5358: ST_TO_ADDR
// if Brown then
5359: LD_EXP 15
5363: IFFALSE 5394
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5365: LD_ADDR_VAR 0 6
5369: PUSH
5370: LD_VAR 0 6
5374: PPUSH
5375: LD_VAR 0 6
5379: PUSH
5380: LD_INT 1
5382: PLUS
5383: PPUSH
5384: LD_EXP 15
5388: PPUSH
5389: CALL_OW 1
5393: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5394: LD_EXP 13
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: LD_INT 3
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: IN
5409: PUSH
5410: LD_EXP 16
5414: NOT
5415: AND
5416: IFFALSE 5477
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5418: LD_ADDR_EXP 16
5422: PUSH
5423: LD_STRING Donaldson
5425: PPUSH
5426: LD_EXP 1
5430: NOT
5431: PPUSH
5432: LD_VAR 0 10
5436: PPUSH
5437: CALL 41702 0 3
5441: ST_TO_ADDR
// if Donaldson then
5442: LD_EXP 16
5446: IFFALSE 5477
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5448: LD_ADDR_VAR 0 6
5452: PUSH
5453: LD_VAR 0 6
5457: PPUSH
5458: LD_VAR 0 6
5462: PUSH
5463: LD_INT 1
5465: PLUS
5466: PPUSH
5467: LD_EXP 16
5471: PPUSH
5472: CALL_OW 1
5476: ST_TO_ADDR
// end ; if not Bobby then
5477: LD_EXP 17
5481: NOT
5482: IFFALSE 5540
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5484: LD_ADDR_EXP 17
5488: PUSH
5489: LD_STRING Bobby
5491: PPUSH
5492: LD_INT 1
5494: PPUSH
5495: LD_VAR 0 10
5499: PPUSH
5500: CALL 41702 0 3
5504: ST_TO_ADDR
// if Bobby then
5505: LD_EXP 17
5509: IFFALSE 5540
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5511: LD_ADDR_VAR 0 6
5515: PUSH
5516: LD_VAR 0 6
5520: PPUSH
5521: LD_VAR 0 6
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: PPUSH
5530: LD_EXP 17
5534: PPUSH
5535: CALL_OW 1
5539: ST_TO_ADDR
// end ; if not Cyrus then
5540: LD_EXP 18
5544: NOT
5545: IFFALSE 5603
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5547: LD_ADDR_EXP 18
5551: PUSH
5552: LD_STRING Cyrus
5554: PPUSH
5555: LD_INT 1
5557: PPUSH
5558: LD_VAR 0 10
5562: PPUSH
5563: CALL 41702 0 3
5567: ST_TO_ADDR
// if Cyrus then
5568: LD_EXP 18
5572: IFFALSE 5603
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5574: LD_ADDR_VAR 0 6
5578: PUSH
5579: LD_VAR 0 6
5583: PPUSH
5584: LD_VAR 0 6
5588: PUSH
5589: LD_INT 1
5591: PLUS
5592: PPUSH
5593: LD_EXP 18
5597: PPUSH
5598: CALL_OW 1
5602: ST_TO_ADDR
// end ; if not Lisa then
5603: LD_EXP 19
5607: NOT
5608: IFFALSE 5669
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5610: LD_ADDR_EXP 19
5614: PUSH
5615: LD_STRING Lisa
5617: PPUSH
5618: LD_EXP 1
5622: NOT
5623: PPUSH
5624: LD_VAR 0 10
5628: PPUSH
5629: CALL 41702 0 3
5633: ST_TO_ADDR
// if Lisa then
5634: LD_EXP 19
5638: IFFALSE 5669
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5640: LD_ADDR_VAR 0 6
5644: PUSH
5645: LD_VAR 0 6
5649: PPUSH
5650: LD_VAR 0 6
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: PPUSH
5659: LD_EXP 19
5663: PPUSH
5664: CALL_OW 1
5668: ST_TO_ADDR
// end ; if not Frank then
5669: LD_EXP 20
5673: NOT
5674: IFFALSE 5735
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5676: LD_ADDR_EXP 20
5680: PUSH
5681: LD_STRING Frank
5683: PPUSH
5684: LD_EXP 1
5688: NOT
5689: PPUSH
5690: LD_VAR 0 10
5694: PPUSH
5695: CALL 41702 0 3
5699: ST_TO_ADDR
// if Frank then
5700: LD_EXP 20
5704: IFFALSE 5735
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5706: LD_ADDR_VAR 0 6
5710: PUSH
5711: LD_VAR 0 6
5715: PPUSH
5716: LD_VAR 0 6
5720: PUSH
5721: LD_INT 1
5723: PLUS
5724: PPUSH
5725: LD_EXP 20
5729: PPUSH
5730: CALL_OW 1
5734: ST_TO_ADDR
// end ; if not Kikuchi then
5735: LD_EXP 22
5739: NOT
5740: IFFALSE 5798
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5742: LD_ADDR_EXP 22
5746: PUSH
5747: LD_STRING Kikuchi
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: LD_VAR 0 10
5757: PPUSH
5758: CALL 41702 0 3
5762: ST_TO_ADDR
// if Kikuchi then
5763: LD_EXP 22
5767: IFFALSE 5798
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5769: LD_ADDR_VAR 0 6
5773: PUSH
5774: LD_VAR 0 6
5778: PPUSH
5779: LD_VAR 0 6
5783: PUSH
5784: LD_INT 1
5786: PLUS
5787: PPUSH
5788: LD_EXP 22
5792: PPUSH
5793: CALL_OW 1
5797: ST_TO_ADDR
// end ; if not Gladstone then
5798: LD_EXP 21
5802: NOT
5803: IFFALSE 5864
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5805: LD_ADDR_EXP 21
5809: PUSH
5810: LD_STRING Gladstone
5812: PPUSH
5813: LD_EXP 1
5817: NOT
5818: PPUSH
5819: LD_VAR 0 10
5823: PPUSH
5824: CALL 41702 0 3
5828: ST_TO_ADDR
// if Gladstone then
5829: LD_EXP 21
5833: IFFALSE 5864
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5835: LD_ADDR_VAR 0 6
5839: PUSH
5840: LD_VAR 0 6
5844: PPUSH
5845: LD_VAR 0 6
5849: PUSH
5850: LD_INT 1
5852: PLUS
5853: PPUSH
5854: LD_EXP 21
5858: PPUSH
5859: CALL_OW 1
5863: ST_TO_ADDR
// end ; if not Khatam then
5864: LD_EXP 23
5868: NOT
5869: IFFALSE 5927
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5871: LD_ADDR_EXP 23
5875: PUSH
5876: LD_STRING Khatam
5878: PPUSH
5879: LD_INT 1
5881: PPUSH
5882: LD_VAR 0 10
5886: PPUSH
5887: CALL 41702 0 3
5891: ST_TO_ADDR
// if Khatam then
5892: LD_EXP 23
5896: IFFALSE 5927
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5898: LD_ADDR_VAR 0 6
5902: PUSH
5903: LD_VAR 0 6
5907: PPUSH
5908: LD_VAR 0 6
5912: PUSH
5913: LD_INT 1
5915: PLUS
5916: PPUSH
5917: LD_EXP 23
5921: PPUSH
5922: CALL_OW 1
5926: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5927: LD_ADDR_VAR 0 4
5931: PUSH
5932: LD_STRING 07c_others
5934: PPUSH
5935: CALL_OW 31
5939: ST_TO_ADDR
// squad := others ;
5940: LD_ADDR_VAR 0 5
5944: PUSH
5945: LD_VAR 0 4
5949: ST_TO_ADDR
// if others then
5950: LD_VAR 0 4
5954: IFFALSE 6005
// for i in others do
5956: LD_ADDR_VAR 0 2
5960: PUSH
5961: LD_VAR 0 4
5965: PUSH
5966: FOR_IN
5967: IFFALSE 6003
// begin SetTag ( i , 108 ) ;
5969: LD_VAR 0 2
5973: PPUSH
5974: LD_INT 108
5976: PPUSH
5977: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5981: LD_ADDR_VAR 0 6
5985: PUSH
5986: LD_VAR 0 6
5990: PPUSH
5991: LD_VAR 0 2
5995: PPUSH
5996: CALL 79497 0 2
6000: ST_TO_ADDR
// end ;
6001: GO 5966
6003: POP
6004: POP
// if tmp then
6005: LD_VAR 0 6
6009: IFFALSE 6262
// begin tmp := Join ( tmp , JMM ) ;
6011: LD_ADDR_VAR 0 6
6015: PUSH
6016: LD_VAR 0 6
6020: PPUSH
6021: LD_EXP 14
6025: PPUSH
6026: CALL 79497 0 2
6030: ST_TO_ADDR
// for i in tmp do
6031: LD_ADDR_VAR 0 2
6035: PUSH
6036: LD_VAR 0 6
6040: PUSH
6041: FOR_IN
6042: IFFALSE 6260
// begin SetDir ( i , dir ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_VAR 0 12
6053: PPUSH
6054: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
6058: LD_VAR 0 2
6062: PPUSH
6063: CALL_OW 257
6067: PUSH
6068: LD_INT 3
6070: EQUAL
6071: PUSH
6072: LD_VAR 0 7
6076: AND
6077: IFFALSE 6176
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
6079: LD_VAR 0 7
6083: PUSH
6084: LD_INT 1
6086: ARRAY
6087: PPUSH
6088: LD_INT 0
6090: PPUSH
6091: CALL_OW 233
// repeat wait ( 10 ) ;
6095: LD_INT 10
6097: PPUSH
6098: CALL_OW 67
// until PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6102: LD_VAR 0 7
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 14
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 14
6124: PUSH
6125: LD_INT 2
6127: ARRAY
6128: PPUSH
6129: LD_INT 0
6131: PPUSH
6132: CALL_OW 48
6136: IFFALSE 6095
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6138: LD_VAR 0 2
6142: PPUSH
6143: LD_VAR 0 7
6147: PUSH
6148: LD_INT 1
6150: ARRAY
6151: PPUSH
6152: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6156: LD_ADDR_VAR 0 7
6160: PUSH
6161: LD_VAR 0 7
6165: PPUSH
6166: LD_INT 1
6168: PPUSH
6169: CALL_OW 3
6173: ST_TO_ADDR
// end else
6174: GO 6202
// begin repeat wait ( 10 ) ;
6176: LD_INT 10
6178: PPUSH
6179: CALL_OW 67
// until PlaceUnitArea ( i , area , false ) ;
6183: LD_VAR 0 2
6187: PPUSH
6188: LD_VAR 0 11
6192: PPUSH
6193: LD_INT 0
6195: PPUSH
6196: CALL_OW 49
6200: IFFALSE 6176
// end ; ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6202: LD_VAR 0 2
6206: PPUSH
6207: LD_VAR 0 13
6211: PUSH
6212: LD_INT 1
6214: ARRAY
6215: PPUSH
6216: LD_VAR 0 13
6220: PUSH
6221: LD_INT 2
6223: ARRAY
6224: PPUSH
6225: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6229: LD_INT 35
6231: PPUSH
6232: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6236: LD_VAR 0 11
6240: PPUSH
6241: LD_INT 22
6243: PUSH
6244: LD_INT 1
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PPUSH
6251: CALL_OW 70
6255: NOT
6256: IFFALSE 6229
// end ;
6258: GO 6041
6260: POP
6261: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6262: LD_EXP 14
6266: PPUSH
6267: CALL_OW 305
6271: NOT
6272: PUSH
6273: LD_EXP 14
6277: PPUSH
6278: CALL_OW 310
6282: NOT
6283: OR
6284: IFFALSE 6316
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6286: LD_EXP 14
6290: PPUSH
6291: LD_VAR 0 14
6295: PUSH
6296: LD_INT 1
6298: ARRAY
6299: PPUSH
6300: LD_VAR 0 14
6304: PUSH
6305: LD_INT 2
6307: ARRAY
6308: PPUSH
6309: LD_INT 0
6311: PPUSH
6312: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6316: LD_EXP 14
6320: PPUSH
6321: LD_VAR 0 13
6325: PUSH
6326: LD_INT 1
6328: ARRAY
6329: PPUSH
6330: LD_VAR 0 13
6334: PUSH
6335: LD_INT 2
6337: ARRAY
6338: PPUSH
6339: CALL_OW 111
// jmmArrival := true ;
6343: LD_ADDR_EXP 8
6347: PUSH
6348: LD_INT 1
6350: ST_TO_ADDR
// end ;
6351: LD_VAR 0 1
6355: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
6360: PPUSH
6361: PPUSH
6362: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6363: LD_INT 1
6365: PPUSH
6366: LD_INT 17
6368: PPUSH
6369: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6373: LD_INT 2
6375: PPUSH
6376: LD_INT 17
6378: PPUSH
6379: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6383: LD_ADDR_VAR 0 5
6387: PUSH
6388: LD_INT 6
6390: PPUSH
6391: LD_INT 58
6393: PUSH
6394: EMPTY
6395: LIST
6396: PPUSH
6397: CALL_OW 70
6401: ST_TO_ADDR
// if tmp then
6402: LD_VAR 0 5
6406: IFFALSE 6434
// for i in tmp do
6408: LD_ADDR_VAR 0 2
6412: PUSH
6413: LD_VAR 0 5
6417: PUSH
6418: FOR_IN
6419: IFFALSE 6432
// RemoveUnit ( i ) ;
6421: LD_VAR 0 2
6425: PPUSH
6426: CALL_OW 64
6430: GO 6418
6432: POP
6433: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6434: LD_ADDR_VAR 0 5
6438: PUSH
6439: LD_INT 6
6441: PPUSH
6442: LD_INT 3
6444: PUSH
6445: LD_INT 21
6447: PUSH
6448: LD_INT 3
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PPUSH
6459: CALL_OW 70
6463: ST_TO_ADDR
// if tmp then
6464: LD_VAR 0 5
6468: IFFALSE 6492
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6470: LD_VAR 0 5
6474: PPUSH
6475: LD_INT 33
6477: PPUSH
6478: LD_INT 39
6480: PPUSH
6481: CALL_OW 111
// wait ( 0 0$3 ) ;
6485: LD_INT 105
6487: PPUSH
6488: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6492: LD_INT 70
6494: PPUSH
6495: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6499: LD_INT 6
6501: PPUSH
6502: LD_INT 50
6504: PUSH
6505: EMPTY
6506: LIST
6507: PPUSH
6508: CALL_OW 70
6512: NOT
6513: IFFALSE 6492
// uc_side := 4 ;
6515: LD_ADDR_OWVAR 20
6519: PUSH
6520: LD_INT 4
6522: ST_TO_ADDR
// uc_nation := 1 ;
6523: LD_ADDR_OWVAR 21
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6531: LD_ADDR_EXP 28
6535: PUSH
6536: LD_STRING Sikorski
6538: PPUSH
6539: LD_INT 0
6541: PPUSH
6542: LD_STRING 
6544: PPUSH
6545: CALL 41702 0 3
6549: ST_TO_ADDR
// vc_engine := engine_combustion ;
6550: LD_ADDR_OWVAR 39
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// vc_control := control_manual ;
6558: LD_ADDR_OWVAR 38
6562: PUSH
6563: LD_INT 1
6565: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6566: LD_ADDR_OWVAR 40
6570: PUSH
6571: LD_INT 6
6573: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6574: LD_ADDR_OWVAR 37
6578: PUSH
6579: LD_INT 4
6581: ST_TO_ADDR
// veh := CreateVehicle ;
6582: LD_ADDR_VAR 0 4
6586: PUSH
6587: CALL_OW 45
6591: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6592: LD_VAR 0 4
6596: PPUSH
6597: LD_INT 3
6599: PPUSH
6600: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6604: LD_VAR 0 4
6608: PPUSH
6609: LD_INT 4
6611: NEG
6612: PPUSH
6613: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6617: LD_VAR 0 4
6621: PPUSH
6622: LD_INT 70
6624: PPUSH
6625: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6629: LD_VAR 0 4
6633: PPUSH
6634: LD_INT 6
6636: PPUSH
6637: LD_INT 0
6639: PPUSH
6640: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6644: LD_EXP 28
6648: PPUSH
6649: LD_VAR 0 4
6653: PPUSH
6654: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6658: LD_EXP 28
6662: PPUSH
6663: LD_INT 37
6665: PPUSH
6666: LD_INT 30
6668: PPUSH
6669: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6673: LD_INT 10
6675: PPUSH
6676: CALL_OW 67
// InitHc_All ( ) ;
6680: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6684: LD_ADDR_VAR 0 2
6688: PUSH
6689: DOUBLE
6690: LD_INT 1
6692: DEC
6693: ST_TO_ADDR
6694: LD_INT 3
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: LD_INT 2
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: PUSH
6712: LD_OWVAR 67
6716: ARRAY
6717: PUSH
6718: FOR_TO
6719: IFFALSE 6854
// begin repeat wait ( 0 0$2 ) ;
6721: LD_INT 70
6723: PPUSH
6724: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6728: LD_INT 6
6730: PPUSH
6731: LD_INT 50
6733: PUSH
6734: EMPTY
6735: LIST
6736: PPUSH
6737: CALL_OW 70
6741: NOT
6742: IFFALSE 6721
// uc_side := 4 ;
6744: LD_ADDR_OWVAR 20
6748: PUSH
6749: LD_INT 4
6751: ST_TO_ADDR
// uc_nation := 1 ;
6752: LD_ADDR_OWVAR 21
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6760: LD_INT 0
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 4
6768: PPUSH
6769: LD_INT 7
6771: PPUSH
6772: CALL_OW 12
6776: PPUSH
6777: CALL_OW 380
// un := CreateHuman ;
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: CALL_OW 44
6790: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6791: LD_VAR 0 3
6795: PPUSH
6796: LD_INT 3
6798: PPUSH
6799: CALL_OW 233
// SetTag ( un , 101 ) ;
6803: LD_VAR 0 3
6807: PPUSH
6808: LD_INT 101
6810: PPUSH
6811: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6815: LD_VAR 0 3
6819: PPUSH
6820: LD_INT 6
6822: PPUSH
6823: LD_INT 0
6825: PPUSH
6826: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6830: LD_VAR 0 3
6834: PPUSH
6835: LD_INT 25
6837: PPUSH
6838: LD_INT 27
6840: PPUSH
6841: CALL_OW 111
// wait ( 0 0$1 ) ;
6845: LD_INT 35
6847: PPUSH
6848: CALL_OW 67
// end ;
6852: GO 6718
6854: POP
6855: POP
// repeat wait ( 0 0$2 ) ;
6856: LD_INT 70
6858: PPUSH
6859: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6863: LD_ADDR_VAR 0 2
6867: PUSH
6868: LD_INT 22
6870: PUSH
6871: LD_INT 4
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 25
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 69
6896: PUSH
6897: FOR_IN
6898: IFFALSE 6961
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6900: LD_VAR 0 2
6904: PPUSH
6905: LD_INT 17
6907: PPUSH
6908: LD_INT 22
6910: PUSH
6911: LD_INT 1
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 2
6920: PUSH
6921: LD_INT 58
6923: PUSH
6924: EMPTY
6925: LIST
6926: PUSH
6927: LD_INT 33
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PPUSH
6946: CALL_OW 70
6950: PUSH
6951: LD_INT 1
6953: ARRAY
6954: PPUSH
6955: CALL_OW 115
6959: GO 6897
6961: POP
6962: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6963: LD_INT 17
6965: PPUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 1
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 2
6978: PUSH
6979: LD_INT 58
6981: PUSH
6982: EMPTY
6983: LIST
6984: PUSH
6985: LD_INT 33
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 70
7008: NOT
7009: IFFALSE 6856
// for i := 1 to 2 do
7011: LD_ADDR_VAR 0 2
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_INT 2
7023: PUSH
7024: FOR_TO
7025: IFFALSE 7137
// begin uc_side := 4 ;
7027: LD_ADDR_OWVAR 20
7031: PUSH
7032: LD_INT 4
7034: ST_TO_ADDR
// uc_nation := 1 ;
7035: LD_ADDR_OWVAR 21
7039: PUSH
7040: LD_INT 1
7042: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
7043: LD_INT 0
7045: PPUSH
7046: LD_INT 4
7048: PPUSH
7049: LD_INT 3
7051: PPUSH
7052: LD_INT 5
7054: PPUSH
7055: CALL_OW 12
7059: PPUSH
7060: CALL_OW 380
// un := CreateHuman ;
7064: LD_ADDR_VAR 0 3
7068: PUSH
7069: CALL_OW 44
7073: ST_TO_ADDR
// SetDir ( un , 3 ) ;
7074: LD_VAR 0 3
7078: PPUSH
7079: LD_INT 3
7081: PPUSH
7082: CALL_OW 233
// SetTag ( un , 101 ) ;
7086: LD_VAR 0 3
7090: PPUSH
7091: LD_INT 101
7093: PPUSH
7094: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
7098: LD_VAR 0 3
7102: PPUSH
7103: LD_INT 6
7105: PPUSH
7106: LD_INT 0
7108: PPUSH
7109: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
7113: LD_VAR 0 3
7117: PPUSH
7118: LD_INT 25
7120: PPUSH
7121: LD_INT 27
7123: PPUSH
7124: CALL_OW 111
// wait ( 0 0$1 ) ;
7128: LD_INT 35
7130: PPUSH
7131: CALL_OW 67
// end ;
7135: GO 7024
7137: POP
7138: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7139: LD_ADDR_VAR 0 2
7143: PUSH
7144: DOUBLE
7145: LD_INT 1
7147: DEC
7148: ST_TO_ADDR
7149: LD_INT 5
7151: PUSH
7152: LD_INT 4
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_OWVAR 67
7171: ARRAY
7172: PUSH
7173: FOR_TO
7174: IFFALSE 7439
// begin repeat wait ( 0 0$2 ) ;
7176: LD_INT 70
7178: PPUSH
7179: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7183: LD_INT 6
7185: PPUSH
7186: LD_INT 50
7188: PUSH
7189: EMPTY
7190: LIST
7191: PPUSH
7192: CALL_OW 70
7196: NOT
7197: IFFALSE 7176
// uc_side := 4 ;
7199: LD_ADDR_OWVAR 20
7203: PUSH
7204: LD_INT 4
7206: ST_TO_ADDR
// uc_nation := 1 ;
7207: LD_ADDR_OWVAR 21
7211: PUSH
7212: LD_INT 1
7214: ST_TO_ADDR
// vc_engine := engine_combustion ;
7215: LD_ADDR_OWVAR 39
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// vc_control := control_manual ;
7223: LD_ADDR_OWVAR 38
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7231: LD_ADDR_OWVAR 40
7235: PUSH
7236: LD_INT 5
7238: PUSH
7239: LD_INT 7
7241: PUSH
7242: LD_INT 5
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: PUSH
7254: LD_VAR 0 2
7258: PUSH
7259: LD_INT 4
7261: MOD
7262: PUSH
7263: LD_INT 1
7265: PLUS
7266: ARRAY
7267: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7268: LD_ADDR_OWVAR 37
7272: PUSH
7273: LD_INT 3
7275: PUSH
7276: LD_INT 3
7278: PUSH
7279: LD_INT 4
7281: PUSH
7282: LD_INT 4
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: PUSH
7291: LD_VAR 0 2
7295: PUSH
7296: LD_INT 4
7298: MOD
7299: PUSH
7300: LD_INT 1
7302: PLUS
7303: ARRAY
7304: ST_TO_ADDR
// veh := CreateVehicle ;
7305: LD_ADDR_VAR 0 4
7309: PUSH
7310: CALL_OW 45
7314: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7315: LD_VAR 0 4
7319: PPUSH
7320: LD_INT 3
7322: PPUSH
7323: CALL_OW 233
// SetTag ( veh , 0 ) ;
7327: LD_VAR 0 4
7331: PPUSH
7332: LD_INT 0
7334: PPUSH
7335: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7339: LD_VAR 0 4
7343: PPUSH
7344: LD_INT 70
7346: PPUSH
7347: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7351: LD_VAR 0 4
7355: PPUSH
7356: LD_INT 6
7358: PPUSH
7359: LD_INT 0
7361: PPUSH
7362: CALL_OW 49
// InitHc ;
7366: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7370: LD_INT 0
7372: PPUSH
7373: LD_INT 3
7375: PPUSH
7376: LD_INT 4
7378: PPUSH
7379: LD_INT 7
7381: PPUSH
7382: CALL_OW 12
7386: PPUSH
7387: CALL_OW 380
// un := CreateHuman ;
7391: LD_ADDR_VAR 0 3
7395: PUSH
7396: CALL_OW 44
7400: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7401: LD_VAR 0 3
7405: PPUSH
7406: LD_VAR 0 4
7410: PPUSH
7411: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7415: LD_VAR 0 3
7419: PPUSH
7420: LD_INT 30
7422: PPUSH
7423: LD_INT 22
7425: PPUSH
7426: CALL_OW 111
// wait ( 0 0$3 ) ;
7430: LD_INT 105
7432: PPUSH
7433: CALL_OW 67
// end ;
7437: GO 7173
7439: POP
7440: POP
// wait ( 0 0$10 ) ;
7441: LD_INT 350
7443: PPUSH
7444: CALL_OW 67
// end ;
7448: LD_VAR 0 1
7452: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7453: LD_INT 0
7455: PPUSH
7456: PPUSH
7457: PPUSH
7458: PPUSH
// gammaBase := [ ] ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: EMPTY
7465: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7466: LD_ADDR_VAR 0 5
7470: PUSH
7471: LD_VAR 0 1
7475: PPUSH
7476: LD_INT 22
7478: PUSH
7479: LD_INT 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 21
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 50
7498: PUSH
7499: EMPTY
7500: LIST
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: PPUSH
7507: CALL_OW 70
7511: ST_TO_ADDR
// for i in buildings do
7512: LD_ADDR_VAR 0 3
7516: PUSH
7517: LD_VAR 0 5
7521: PUSH
7522: FOR_IN
7523: IFFALSE 7960
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7525: LD_VAR 0 3
7529: PPUSH
7530: CALL_OW 266
7534: PUSH
7535: LD_INT 6
7537: PUSH
7538: LD_INT 7
7540: PUSH
7541: LD_INT 8
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: IN
7549: IFFALSE 7663
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7551: LD_ADDR_VAR 0 4
7555: PUSH
7556: LD_VAR 0 4
7560: PUSH
7561: LD_VAR 0 3
7565: PPUSH
7566: CALL_OW 266
7570: PUSH
7571: LD_VAR 0 3
7575: PPUSH
7576: CALL_OW 250
7580: PUSH
7581: LD_VAR 0 3
7585: PPUSH
7586: CALL_OW 251
7590: PUSH
7591: LD_VAR 0 3
7595: PPUSH
7596: CALL_OW 254
7600: PUSH
7601: LD_VAR 0 3
7605: PPUSH
7606: CALL_OW 267
7610: PUSH
7611: LD_VAR 0 3
7615: PPUSH
7616: CALL_OW 248
7620: PUSH
7621: LD_VAR 0 3
7625: PPUSH
7626: LD_INT 1
7628: PPUSH
7629: CALL_OW 268
7633: PUSH
7634: LD_VAR 0 3
7638: PPUSH
7639: LD_INT 2
7641: PPUSH
7642: CALL_OW 268
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: ADD
7660: ST_TO_ADDR
7661: GO 7958
// if GetBType ( i ) = b_bunker then
7663: LD_VAR 0 3
7667: PPUSH
7668: CALL_OW 266
7672: PUSH
7673: LD_INT 32
7675: EQUAL
7676: IFFALSE 7773
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7678: LD_ADDR_VAR 0 4
7682: PUSH
7683: LD_VAR 0 4
7687: PUSH
7688: LD_VAR 0 3
7692: PPUSH
7693: CALL_OW 266
7697: PUSH
7698: LD_VAR 0 3
7702: PPUSH
7703: CALL_OW 250
7707: PUSH
7708: LD_VAR 0 3
7712: PPUSH
7713: CALL_OW 251
7717: PUSH
7718: LD_VAR 0 3
7722: PPUSH
7723: CALL_OW 254
7727: PUSH
7728: LD_VAR 0 3
7732: PPUSH
7733: CALL_OW 267
7737: PUSH
7738: LD_VAR 0 3
7742: PPUSH
7743: CALL_OW 248
7747: PUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL_OW 269
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: ADD
7770: ST_TO_ADDR
7771: GO 7958
// if GetBType ( i ) = b_factory then
7773: LD_VAR 0 3
7777: PPUSH
7778: CALL_OW 266
7782: PUSH
7783: LD_INT 3
7785: EQUAL
7786: IFFALSE 7876
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7788: LD_ADDR_VAR 0 4
7792: PUSH
7793: LD_VAR 0 4
7797: PPUSH
7798: LD_INT 1
7800: PPUSH
7801: LD_VAR 0 3
7805: PPUSH
7806: CALL_OW 266
7810: PUSH
7811: LD_VAR 0 3
7815: PPUSH
7816: CALL_OW 250
7820: PUSH
7821: LD_VAR 0 3
7825: PPUSH
7826: CALL_OW 251
7830: PUSH
7831: LD_VAR 0 3
7835: PPUSH
7836: CALL_OW 254
7840: PUSH
7841: LD_VAR 0 3
7845: PPUSH
7846: CALL_OW 267
7850: PUSH
7851: LD_VAR 0 3
7855: PPUSH
7856: CALL_OW 248
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 2
7873: ST_TO_ADDR
7874: GO 7958
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7876: LD_ADDR_VAR 0 4
7880: PUSH
7881: LD_VAR 0 4
7885: PUSH
7886: LD_VAR 0 3
7890: PPUSH
7891: CALL_OW 266
7895: PUSH
7896: LD_VAR 0 3
7900: PPUSH
7901: CALL_OW 250
7905: PUSH
7906: LD_VAR 0 3
7910: PPUSH
7911: CALL_OW 251
7915: PUSH
7916: LD_VAR 0 3
7920: PPUSH
7921: CALL_OW 254
7925: PUSH
7926: LD_VAR 0 3
7930: PPUSH
7931: CALL_OW 267
7935: PUSH
7936: LD_VAR 0 3
7940: PPUSH
7941: CALL_OW 248
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: ADD
7957: ST_TO_ADDR
// end ;
7958: GO 7522
7960: POP
7961: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7962: LD_VAR 0 4
7966: PPUSH
7967: LD_STRING 08_GammaBase
7969: PPUSH
7970: CALL_OW 39
// end ;
7974: LD_VAR 0 2
7978: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7979: LD_INT 0
7981: PPUSH
7982: PPUSH
7983: PPUSH
7984: PPUSH
7985: PPUSH
7986: PPUSH
7987: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7988: LD_ADDR_VAR 0 3
7992: PUSH
7993: LD_INT 17
7995: PPUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 1
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 3
8008: PUSH
8009: LD_INT 21
8011: PUSH
8012: LD_INT 3
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: LD_INT 33
8028: PUSH
8029: LD_INT 2
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: PPUSH
8045: CALL_OW 70
8049: ST_TO_ADDR
// if tmp then
8050: LD_VAR 0 3
8054: IFFALSE 8173
// begin for i in tmp do
8056: LD_ADDR_VAR 0 2
8060: PUSH
8061: LD_VAR 0 3
8065: PUSH
8066: FOR_IN
8067: IFFALSE 8098
// begin SetSide ( i , 4 ) ;
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_INT 4
8076: PPUSH
8077: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
8081: LD_VAR 0 2
8085: PPUSH
8086: LD_INT 42
8088: PPUSH
8089: LD_INT 22
8091: PPUSH
8092: CALL_OW 111
// end ;
8096: GO 8066
8098: POP
8099: POP
// repeat wait ( 0 0$3 ) ;
8100: LD_INT 105
8102: PPUSH
8103: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_INT 51
8114: PPUSH
8115: LD_INT 16
8117: PPUSH
8118: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8122: LD_VAR 0 3
8126: PPUSH
8127: LD_INT 95
8129: PUSH
8130: LD_INT 17
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 72
8141: NOT
8142: IFFALSE 8100
// for i in tmp do
8144: LD_ADDR_VAR 0 2
8148: PUSH
8149: LD_VAR 0 3
8153: PUSH
8154: FOR_IN
8155: IFFALSE 8171
// SetSide ( i , 1 ) ;
8157: LD_VAR 0 2
8161: PPUSH
8162: LD_INT 1
8164: PPUSH
8165: CALL_OW 235
8169: GO 8154
8171: POP
8172: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8173: LD_ADDR_VAR 0 3
8177: PUSH
8178: LD_INT 17
8180: PPUSH
8181: LD_INT 22
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 33
8193: PUSH
8194: LD_INT 2
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PPUSH
8205: CALL_OW 70
8209: ST_TO_ADDR
// if tmp then
8210: LD_VAR 0 3
8214: IFFALSE 8238
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8216: LD_VAR 0 3
8220: PPUSH
8221: LD_INT 40
8223: PPUSH
8224: LD_INT 32
8226: PPUSH
8227: CALL_OW 111
// wait ( 0 0$3 ) ;
8231: LD_INT 105
8233: PPUSH
8234: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8238: LD_ADDR_VAR 0 3
8242: PUSH
8243: LD_INT 17
8245: PPUSH
8246: LD_INT 22
8248: PUSH
8249: LD_INT 1
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 2
8258: PUSH
8259: LD_INT 21
8261: PUSH
8262: LD_INT 2
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 21
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PPUSH
8288: CALL_OW 70
8292: ST_TO_ADDR
// if tmp then
8293: LD_VAR 0 3
8297: IFFALSE 8445
// begin repeat wait ( 0 0$1 ) ;
8299: LD_INT 35
8301: PPUSH
8302: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 17
8313: PPUSH
8314: LD_INT 22
8316: PUSH
8317: LD_INT 1
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: LD_INT 2
8326: PUSH
8327: LD_INT 21
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: LD_INT 21
8339: PUSH
8340: LD_INT 3
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PPUSH
8356: CALL_OW 70
8360: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8361: LD_ADDR_VAR 0 2
8365: PUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 4
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 2
8378: PUSH
8379: LD_INT 25
8381: PUSH
8382: LD_INT 1
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 21
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: PUSH
8413: FOR_IN
8414: IFFALSE 8436
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8416: LD_VAR 0 2
8420: PPUSH
8421: LD_VAR 0 3
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: CALL_OW 115
8434: GO 8413
8436: POP
8437: POP
// until not tmp ;
8438: LD_VAR 0 3
8442: NOT
8443: IFFALSE 8299
// end ; wait ( 0 0$2 ) ;
8445: LD_INT 70
8447: PPUSH
8448: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8452: LD_ADDR_VAR 0 3
8456: PUSH
8457: LD_INT 22
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PPUSH
8467: CALL_OW 69
8471: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8472: LD_VAR 0 3
8476: PPUSH
8477: LD_INT 52
8479: PPUSH
8480: LD_INT 54
8482: PPUSH
8483: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8487: LD_VAR 0 3
8491: PPUSH
8492: LD_INT 175
8494: PPUSH
8495: CALL_OW 202
// wait ( 0 0$5 ) ;
8499: LD_INT 175
8501: PPUSH
8502: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8506: LD_VAR 0 3
8510: PPUSH
8511: LD_INT 120
8513: PUSH
8514: LD_INT 101
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 72
8525: PPUSH
8526: LD_INT 42
8528: PPUSH
8529: LD_INT 52
8531: PPUSH
8532: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8536: LD_VAR 0 3
8540: PPUSH
8541: LD_INT 120
8543: PUSH
8544: LD_INT 101
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 72
8555: PPUSH
8556: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8560: LD_VAR 0 3
8564: PPUSH
8565: LD_INT 120
8567: PUSH
8568: LD_INT 101
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 25
8577: PUSH
8578: LD_INT 4
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PPUSH
8589: CALL_OW 72
8593: PPUSH
8594: LD_INT 34
8596: PPUSH
8597: LD_INT 47
8599: PPUSH
8600: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8604: LD_VAR 0 3
8608: PPUSH
8609: LD_INT 120
8611: PUSH
8612: LD_INT 101
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 25
8621: PUSH
8622: LD_INT 4
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PPUSH
8633: CALL_OW 72
8637: PPUSH
8638: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8642: LD_ADDR_VAR 0 7
8646: PUSH
8647: LD_VAR 0 3
8651: PPUSH
8652: LD_INT 21
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PPUSH
8662: CALL_OW 72
8666: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: LD_INT 81
8674: PUSH
8675: LD_INT 1
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 69
8686: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8687: LD_ADDR_VAR 0 5
8691: PUSH
8692: LD_INT 57
8694: PUSH
8695: LD_INT 66
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 62
8704: PUSH
8705: LD_INT 58
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8716: LD_INT 35
8718: PPUSH
8719: CALL_OW 67
// for i in filter do
8723: LD_ADDR_VAR 0 2
8727: PUSH
8728: LD_VAR 0 7
8732: PUSH
8733: FOR_IN
8734: IFFALSE 9158
// begin if IsDead ( i ) then
8736: LD_VAR 0 2
8740: PPUSH
8741: CALL_OW 301
8745: IFFALSE 8765
// begin filter := filter diff i ;
8747: LD_ADDR_VAR 0 7
8751: PUSH
8752: LD_VAR 0 7
8756: PUSH
8757: LD_VAR 0 2
8761: DIFF
8762: ST_TO_ADDR
// continue ;
8763: GO 8733
// end ; tmp := IsDrivenBy ( i ) ;
8765: LD_ADDR_VAR 0 3
8769: PUSH
8770: LD_VAR 0 2
8774: PPUSH
8775: CALL_OW 311
8779: ST_TO_ADDR
// if not tmp then
8780: LD_VAR 0 3
8784: NOT
8785: IFFALSE 8789
// continue ;
8787: GO 8733
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8789: LD_VAR 0 2
8793: PPUSH
8794: CALL_OW 261
8798: PUSH
8799: LD_INT 30
8801: GREATER
8802: PUSH
8803: LD_VAR 0 2
8807: PPUSH
8808: CALL_OW 110
8812: PUSH
8813: LD_INT 2
8815: EQUAL
8816: AND
8817: IFFALSE 8833
// SetTag ( i , 0 ) else
8819: LD_VAR 0 2
8823: PPUSH
8824: LD_INT 0
8826: PPUSH
8827: CALL_OW 109
8831: GO 8862
// if GetTag ( i ) = 2 then
8833: LD_VAR 0 2
8837: PPUSH
8838: CALL_OW 110
8842: PUSH
8843: LD_INT 2
8845: EQUAL
8846: IFFALSE 8862
// begin ComMoveUnit ( i , amDepot ) ;
8848: LD_VAR 0 2
8852: PPUSH
8853: LD_EXP 31
8857: PPUSH
8858: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8862: LD_VAR 0 2
8866: PPUSH
8867: CALL_OW 256
8871: PUSH
8872: LD_INT 600
8874: GREATEREQUAL
8875: PUSH
8876: LD_VAR 0 2
8880: PPUSH
8881: CALL_OW 110
8885: NOT
8886: AND
8887: IFFALSE 8913
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8889: LD_VAR 0 2
8893: PPUSH
8894: LD_VAR 0 4
8898: PPUSH
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 74
8908: PPUSH
8909: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8913: LD_VAR 0 2
8917: PPUSH
8918: CALL_OW 256
8922: PUSH
8923: LD_INT 600
8925: LESS
8926: PUSH
8927: LD_VAR 0 2
8931: PPUSH
8932: CALL_OW 110
8936: NOT
8937: AND
8938: IFFALSE 9014
// begin SetTag ( i , 1 ) ;
8940: LD_VAR 0 2
8944: PPUSH
8945: LD_INT 1
8947: PPUSH
8948: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8952: LD_ADDR_VAR 0 6
8956: PUSH
8957: LD_VAR 0 2
8961: PPUSH
8962: LD_VAR 0 5
8966: PPUSH
8967: CALL 82851 0 2
8971: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8972: LD_VAR 0 2
8976: PPUSH
8977: LD_VAR 0 6
8981: PUSH
8982: LD_INT 1
8984: ARRAY
8985: PPUSH
8986: LD_VAR 0 6
8990: PUSH
8991: LD_INT 2
8993: ARRAY
8994: PPUSH
8995: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8999: LD_VAR 0 2
9003: PPUSH
9004: LD_INT 40
9006: PPUSH
9007: LD_INT 49
9009: PPUSH
9010: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
9014: LD_VAR 0 2
9018: PPUSH
9019: CALL_OW 110
9023: PUSH
9024: LD_INT 1
9026: EQUAL
9027: PUSH
9028: LD_VAR 0 2
9032: PPUSH
9033: LD_INT 40
9035: PPUSH
9036: LD_INT 49
9038: PPUSH
9039: CALL_OW 297
9043: PUSH
9044: LD_INT 9
9046: LESS
9047: AND
9048: PUSH
9049: LD_VAR 0 3
9053: AND
9054: IFFALSE 9156
// begin ComExitVehicle ( tmp ) ;
9056: LD_VAR 0 3
9060: PPUSH
9061: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
9065: LD_VAR 0 3
9069: PPUSH
9070: LD_VAR 0 2
9074: PPUSH
9075: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9079: LD_INT 35
9081: PPUSH
9082: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9086: LD_VAR 0 2
9090: PPUSH
9091: CALL_OW 256
9095: PUSH
9096: LD_INT 1000
9098: EQUAL
9099: IFFALSE 9079
// ComEnterUnit ( tmp , i ) ;
9101: LD_VAR 0 3
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: CALL_OW 120
// if GetFuel ( i ) <= 30 then
9115: LD_VAR 0 2
9119: PPUSH
9120: CALL_OW 261
9124: PUSH
9125: LD_INT 30
9127: LESSEQUAL
9128: IFFALSE 9144
// SetTag ( i , 2 ) else
9130: LD_VAR 0 2
9134: PPUSH
9135: LD_INT 2
9137: PPUSH
9138: CALL_OW 109
9142: GO 9156
// SetTag ( i , 0 ) ;
9144: LD_VAR 0 2
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 109
// end ; end ;
9156: GO 8733
9158: POP
9159: POP
// until not filter ;
9160: LD_VAR 0 7
9164: NOT
9165: IFFALSE 8716
// end ; end_of_file
9167: LD_VAR 0 1
9171: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9172: LD_INT 0
9174: PPUSH
9175: PPUSH
9176: PPUSH
9177: PPUSH
9178: PPUSH
// uc_side := 3 ;
9179: LD_ADDR_OWVAR 20
9183: PUSH
9184: LD_INT 3
9186: ST_TO_ADDR
// uc_nation := 3 ;
9187: LD_ADDR_OWVAR 21
9191: PUSH
9192: LD_INT 3
9194: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9195: LD_ADDR_EXP 33
9199: PUSH
9200: LD_INT 8
9202: PUSH
9203: LD_INT 11
9205: PUSH
9206: LD_INT 14
9208: PUSH
9209: LD_INT 17
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: PUSH
9218: LD_OWVAR 67
9222: ARRAY
9223: ST_TO_ADDR
// ruMobile := [ ] ;
9224: LD_ADDR_EXP 34
9228: PUSH
9229: EMPTY
9230: ST_TO_ADDR
// ruBuildList := [ ] ;
9231: LD_ADDR_EXP 35
9235: PUSH
9236: EMPTY
9237: ST_TO_ADDR
// russianAttackers := [ ] ;
9238: LD_ADDR_EXP 36
9242: PUSH
9243: EMPTY
9244: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9245: LD_ADDR_VAR 0 5
9249: PUSH
9250: LD_INT 43
9252: PUSH
9253: LD_INT 44
9255: PUSH
9256: LD_INT 46
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: ST_TO_ADDR
// if Difficulty > 2 then
9264: LD_OWVAR 67
9268: PUSH
9269: LD_INT 2
9271: GREATER
9272: IFFALSE 9295
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9274: LD_ADDR_VAR 0 5
9278: PUSH
9279: LD_VAR 0 5
9283: PUSH
9284: LD_INT 45
9286: PUSH
9287: LD_INT 46
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: ADD
9294: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9295: LD_ADDR_EXP 32
9299: PUSH
9300: LD_STRING Borodin
9302: PPUSH
9303: CALL_OW 25
9307: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9308: LD_EXP 32
9312: PPUSH
9313: LD_INT 28
9315: PPUSH
9316: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9320: LD_INT 28
9322: PPUSH
9323: CALL_OW 274
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: LD_INT 3000
9333: PUSH
9334: LD_INT 4000
9336: PUSH
9337: LD_INT 5000
9339: PUSH
9340: LD_INT 6000
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: PUSH
9349: LD_OWVAR 67
9353: ARRAY
9354: PPUSH
9355: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9359: LD_INT 28
9361: PPUSH
9362: CALL_OW 274
9366: PPUSH
9367: LD_INT 2
9369: PPUSH
9370: LD_INT 1000
9372: PPUSH
9373: CALL_OW 277
// if Difficulty > 2 then
9377: LD_OWVAR 67
9381: PUSH
9382: LD_INT 2
9384: GREATER
9385: IFFALSE 9509
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9387: LD_ADDR_VAR 0 4
9391: PUSH
9392: LD_INT 99
9394: PUSH
9395: LD_INT 130
9397: PUSH
9398: LD_INT 2
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 121
9408: PUSH
9409: LD_INT 127
9411: PUSH
9412: LD_INT 4
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 117
9422: PUSH
9423: LD_INT 121
9425: PUSH
9426: LD_INT 4
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: ST_TO_ADDR
// for i in tmp do
9439: LD_ADDR_VAR 0 2
9443: PUSH
9444: LD_VAR 0 4
9448: PUSH
9449: FOR_IN
9450: IFFALSE 9507
// begin bc_type := b_turret ;
9452: LD_ADDR_OWVAR 42
9456: PUSH
9457: LD_INT 33
9459: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9460: LD_ADDR_OWVAR 43
9464: PUSH
9465: LD_INT 2
9467: PUSH
9468: LD_OWVAR 67
9472: PLUS
9473: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9474: LD_VAR 0 2
9478: PUSH
9479: LD_INT 1
9481: ARRAY
9482: PPUSH
9483: LD_VAR 0 2
9487: PUSH
9488: LD_INT 2
9490: ARRAY
9491: PPUSH
9492: LD_VAR 0 2
9496: PUSH
9497: LD_INT 3
9499: ARRAY
9500: PPUSH
9501: CALL_OW 47
// end ;
9505: GO 9449
9507: POP
9508: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: LD_INT 22
9516: PUSH
9517: LD_INT 3
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PUSH
9524: LD_INT 21
9526: PUSH
9527: LD_INT 3
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PPUSH
9538: CALL_OW 69
9542: PUSH
9543: FOR_IN
9544: IFFALSE 9566
// SetBLevel ( i , 2 + Difficulty ) ;
9546: LD_VAR 0 2
9550: PPUSH
9551: LD_INT 2
9553: PUSH
9554: LD_OWVAR 67
9558: PLUS
9559: PPUSH
9560: CALL_OW 241
9564: GO 9543
9566: POP
9567: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9568: LD_ADDR_VAR 0 4
9572: PUSH
9573: LD_INT 22
9575: PUSH
9576: LD_INT 3
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 30
9588: PUSH
9589: LD_INT 32
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 30
9598: PUSH
9599: LD_INT 33
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 69
9619: ST_TO_ADDR
// for i in tmp do
9620: LD_ADDR_VAR 0 2
9624: PUSH
9625: LD_VAR 0 4
9629: PUSH
9630: FOR_IN
9631: IFFALSE 9663
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9633: LD_VAR 0 2
9637: PPUSH
9638: LD_VAR 0 5
9642: PUSH
9643: LD_INT 1
9645: PPUSH
9646: LD_VAR 0 5
9650: PPUSH
9651: CALL_OW 12
9655: ARRAY
9656: PPUSH
9657: CALL_OW 431
9661: GO 9630
9663: POP
9664: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9665: LD_ADDR_VAR 0 2
9669: PUSH
9670: LD_INT 22
9672: PUSH
9673: LD_INT 3
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 30
9682: PUSH
9683: LD_INT 32
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PPUSH
9694: CALL_OW 69
9698: PUSH
9699: FOR_IN
9700: IFFALSE 9749
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9702: LD_INT 0
9704: PPUSH
9705: LD_INT 5
9707: PUSH
9708: LD_INT 6
9710: PUSH
9711: LD_INT 7
9713: PUSH
9714: LD_INT 8
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_OWVAR 67
9727: ARRAY
9728: PPUSH
9729: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9733: CALL_OW 44
9737: PPUSH
9738: LD_VAR 0 2
9742: PPUSH
9743: CALL_OW 52
// end ;
9747: GO 9699
9749: POP
9750: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9751: LD_ADDR_VAR 0 2
9755: PUSH
9756: LD_INT 22
9758: PUSH
9759: LD_INT 3
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 30
9768: PUSH
9769: LD_INT 5
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PPUSH
9780: CALL_OW 69
9784: PUSH
9785: FOR_IN
9786: IFFALSE 9876
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9788: LD_ADDR_VAR 0 3
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_INT 2
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: LD_INT 4
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: PUSH
9816: LD_OWVAR 67
9820: ARRAY
9821: PUSH
9822: FOR_TO
9823: IFFALSE 9872
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9825: LD_INT 0
9827: PPUSH
9828: LD_INT 5
9830: PUSH
9831: LD_INT 6
9833: PUSH
9834: LD_INT 7
9836: PUSH
9837: LD_INT 8
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: PUSH
9846: LD_OWVAR 67
9850: ARRAY
9851: PPUSH
9852: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9856: CALL_OW 44
9860: PPUSH
9861: LD_VAR 0 2
9865: PPUSH
9866: CALL_OW 52
// end ;
9870: GO 9822
9872: POP
9873: POP
// end ;
9874: GO 9785
9876: POP
9877: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9878: LD_ADDR_VAR 0 2
9882: PUSH
9883: DOUBLE
9884: LD_INT 1
9886: DEC
9887: ST_TO_ADDR
9888: LD_INT 3
9890: PUSH
9891: LD_INT 4
9893: PUSH
9894: LD_INT 5
9896: PUSH
9897: LD_INT 5
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: LD_OWVAR 67
9910: ARRAY
9911: PUSH
9912: FOR_TO
9913: IFFALSE 9960
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9915: LD_INT 0
9917: PPUSH
9918: LD_INT 4
9920: PUSH
9921: LD_INT 5
9923: PUSH
9924: LD_INT 5
9926: PUSH
9927: LD_INT 6
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: PUSH
9936: LD_OWVAR 67
9940: ARRAY
9941: PPUSH
9942: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9946: CALL_OW 44
9950: PPUSH
9951: LD_INT 28
9953: PPUSH
9954: CALL_OW 52
// end ;
9958: GO 9912
9960: POP
9961: POP
// for i := 1 to 2 do
9962: LD_ADDR_VAR 0 2
9966: PUSH
9967: DOUBLE
9968: LD_INT 1
9970: DEC
9971: ST_TO_ADDR
9972: LD_INT 2
9974: PUSH
9975: FOR_TO
9976: IFFALSE 10010
// begin PrepareScientist ( false , 6 ) ;
9978: LD_INT 0
9980: PPUSH
9981: LD_INT 6
9983: PPUSH
9984: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9988: CALL_OW 44
9992: PPUSH
9993: LD_INT 81
9995: PPUSH
9996: LD_INT 93
9998: PPUSH
9999: CALL_OW 428
10003: PPUSH
10004: CALL_OW 52
// end ;
10008: GO 9975
10010: POP
10011: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
10012: LD_INT 22
10014: PPUSH
10015: LD_INT 1
10017: PPUSH
10018: LD_INT 3
10020: PPUSH
10021: LD_INT 51
10023: PPUSH
10024: LD_INT 100
10026: PPUSH
10027: CALL 46626 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
10031: CALL_OW 45
10035: PPUSH
10036: LD_INT 91
10038: PPUSH
10039: LD_INT 94
10041: PPUSH
10042: LD_INT 3
10044: PPUSH
10045: LD_INT 0
10047: PPUSH
10048: CALL_OW 50
// for i := 1 to 2 do
10052: LD_ADDR_VAR 0 2
10056: PUSH
10057: DOUBLE
10058: LD_INT 1
10060: DEC
10061: ST_TO_ADDR
10062: LD_INT 2
10064: PUSH
10065: FOR_TO
10066: IFFALSE 10110
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
10068: LD_INT 22
10070: PPUSH
10071: LD_INT 1
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: LD_INT 52
10079: PPUSH
10080: LD_INT 100
10082: PPUSH
10083: CALL 46626 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
10087: CALL_OW 45
10091: PPUSH
10092: LD_INT 91
10094: PPUSH
10095: LD_INT 94
10097: PPUSH
10098: LD_INT 4
10100: PPUSH
10101: LD_INT 0
10103: PPUSH
10104: CALL_OW 50
// end ;
10108: GO 10065
10110: POP
10111: POP
// end ;
10112: LD_VAR 0 1
10116: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10117: LD_INT 0
10119: PPUSH
10120: PPUSH
10121: PPUSH
10122: PPUSH
10123: PPUSH
// uc_side := 3 ;
10124: LD_ADDR_OWVAR 20
10128: PUSH
10129: LD_INT 3
10131: ST_TO_ADDR
// uc_nation := 3 ;
10132: LD_ADDR_OWVAR 21
10136: PUSH
10137: LD_INT 3
10139: ST_TO_ADDR
// for i := 1 to 4 do
10140: LD_ADDR_VAR 0 2
10144: PUSH
10145: DOUBLE
10146: LD_INT 1
10148: DEC
10149: ST_TO_ADDR
10150: LD_INT 4
10152: PUSH
10153: FOR_TO
10154: IFFALSE 10281
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10156: LD_INT 22
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: LD_INT 1
10164: PPUSH
10165: LD_INT 42
10167: PUSH
10168: LD_INT 43
10170: PUSH
10171: LD_INT 44
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 1
10181: PPUSH
10182: LD_INT 3
10184: PPUSH
10185: CALL_OW 12
10189: ARRAY
10190: PPUSH
10191: LD_INT 40
10193: PPUSH
10194: CALL 46626 0 5
// veh := CreateVehicle ;
10198: LD_ADDR_VAR 0 4
10202: PUSH
10203: CALL_OW 45
10207: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10208: LD_VAR 0 4
10212: PPUSH
10213: LD_INT 5
10215: PPUSH
10216: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10220: LD_VAR 0 4
10224: PPUSH
10225: LD_INT 7
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10235: LD_INT 0
10237: PPUSH
10238: LD_INT 5
10240: PPUSH
10241: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10245: CALL_OW 44
10249: PPUSH
10250: LD_VAR 0 4
10254: PPUSH
10255: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10259: LD_ADDR_VAR 0 5
10263: PUSH
10264: LD_VAR 0 5
10268: PPUSH
10269: LD_VAR 0 4
10273: PPUSH
10274: CALL 79497 0 2
10278: ST_TO_ADDR
// end ;
10279: GO 10153
10281: POP
10282: POP
// for i := 1 to 3 do
10283: LD_ADDR_VAR 0 2
10287: PUSH
10288: DOUBLE
10289: LD_INT 1
10291: DEC
10292: ST_TO_ADDR
10293: LD_INT 3
10295: PUSH
10296: FOR_TO
10297: IFFALSE 10424
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10299: LD_INT 22
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: LD_INT 1
10307: PPUSH
10308: LD_INT 42
10310: PUSH
10311: LD_INT 43
10313: PUSH
10314: LD_INT 44
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: PUSH
10322: LD_INT 1
10324: PPUSH
10325: LD_INT 3
10327: PPUSH
10328: CALL_OW 12
10332: ARRAY
10333: PPUSH
10334: LD_INT 40
10336: PPUSH
10337: CALL 46626 0 5
// veh := CreateVehicle ;
10341: LD_ADDR_VAR 0 4
10345: PUSH
10346: CALL_OW 45
10350: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10351: LD_VAR 0 4
10355: PPUSH
10356: LD_INT 5
10358: PPUSH
10359: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10363: LD_VAR 0 4
10367: PPUSH
10368: LD_INT 8
10370: PPUSH
10371: LD_INT 0
10373: PPUSH
10374: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10378: LD_INT 0
10380: PPUSH
10381: LD_INT 5
10383: PPUSH
10384: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10388: CALL_OW 44
10392: PPUSH
10393: LD_VAR 0 4
10397: PPUSH
10398: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10402: LD_ADDR_VAR 0 5
10406: PUSH
10407: LD_VAR 0 5
10411: PPUSH
10412: LD_VAR 0 4
10416: PPUSH
10417: CALL 79497 0 2
10421: ST_TO_ADDR
// end ;
10422: GO 10296
10424: POP
10425: POP
// for i := 1 to 2 do
10426: LD_ADDR_VAR 0 2
10430: PUSH
10431: DOUBLE
10432: LD_INT 1
10434: DEC
10435: ST_TO_ADDR
10436: LD_INT 2
10438: PUSH
10439: FOR_TO
10440: IFFALSE 10499
// begin PrepareSoldier ( false , 5 ) ;
10442: LD_INT 0
10444: PPUSH
10445: LD_INT 5
10447: PPUSH
10448: CALL_OW 381
// un := CreateHuman ;
10452: LD_ADDR_VAR 0 3
10456: PUSH
10457: CALL_OW 44
10461: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10462: LD_VAR 0 3
10466: PPUSH
10467: LD_INT 8
10469: PPUSH
10470: LD_INT 0
10472: PPUSH
10473: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 5
10486: PPUSH
10487: LD_VAR 0 3
10491: PPUSH
10492: CALL 79497 0 2
10496: ST_TO_ADDR
// end ;
10497: GO 10439
10499: POP
10500: POP
// for i in tmp do
10501: LD_ADDR_VAR 0 2
10505: PUSH
10506: LD_VAR 0 5
10510: PUSH
10511: FOR_IN
10512: IFFALSE 10531
// ComAgressiveMove ( i , 51 , 16 ) ;
10514: LD_VAR 0 2
10518: PPUSH
10519: LD_INT 51
10521: PPUSH
10522: LD_INT 16
10524: PPUSH
10525: CALL_OW 114
10529: GO 10511
10531: POP
10532: POP
// end ;
10533: LD_VAR 0 1
10537: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10538: LD_EXP 34
10542: IFFALSE 11117
10544: GO 10546
10546: DISABLE
10547: LD_INT 0
10549: PPUSH
10550: PPUSH
10551: PPUSH
// begin enable ;
10552: ENABLE
// if not ruMobile then
10553: LD_EXP 34
10557: NOT
10558: IFFALSE 10562
// exit ;
10560: GO 11117
// for i in ruMobile do
10562: LD_ADDR_VAR 0 1
10566: PUSH
10567: LD_EXP 34
10571: PUSH
10572: FOR_IN
10573: IFFALSE 11115
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10575: LD_VAR 0 1
10579: PPUSH
10580: CALL_OW 302
10584: NOT
10585: PUSH
10586: LD_VAR 0 1
10590: PPUSH
10591: CALL_OW 255
10595: PUSH
10596: LD_INT 3
10598: NONEQUAL
10599: OR
10600: IFFALSE 10620
// begin ruMobile := ruMobile diff i ;
10602: LD_ADDR_EXP 34
10606: PUSH
10607: LD_EXP 34
10611: PUSH
10612: LD_VAR 0 1
10616: DIFF
10617: ST_TO_ADDR
// continue ;
10618: GO 10572
// end ; if GetTag ( i ) = 300 then
10620: LD_VAR 0 1
10624: PPUSH
10625: CALL_OW 110
10629: PUSH
10630: LD_INT 300
10632: EQUAL
10633: IFFALSE 10748
// begin if GetFuel ( i ) < 50 then
10635: LD_VAR 0 1
10639: PPUSH
10640: CALL_OW 261
10644: PUSH
10645: LD_INT 50
10647: LESS
10648: IFFALSE 10707
// begin ComMoveXY ( i , 93 , 100 ) ;
10650: LD_VAR 0 1
10654: PPUSH
10655: LD_INT 93
10657: PPUSH
10658: LD_INT 100
10660: PPUSH
10661: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10665: LD_INT 35
10667: PPUSH
10668: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10672: LD_VAR 0 1
10676: PPUSH
10677: LD_INT 93
10679: PPUSH
10680: LD_INT 100
10682: PPUSH
10683: CALL_OW 297
10687: PUSH
10688: LD_INT 4
10690: LESS
10691: IFFALSE 10665
// SetFuel ( i , 100 ) ;
10693: LD_VAR 0 1
10697: PPUSH
10698: LD_INT 100
10700: PPUSH
10701: CALL_OW 240
// end else
10705: GO 10748
// if not IsInArea ( i , ruParkingArea ) then
10707: LD_VAR 0 1
10711: PPUSH
10712: LD_INT 10
10714: PPUSH
10715: CALL_OW 308
10719: NOT
10720: IFFALSE 10736
// ComMoveToArea ( i , ruParkingArea ) else
10722: LD_VAR 0 1
10726: PPUSH
10727: LD_INT 10
10729: PPUSH
10730: CALL_OW 113
10734: GO 10748
// SetTag ( i , 301 ) ;
10736: LD_VAR 0 1
10740: PPUSH
10741: LD_INT 301
10743: PPUSH
10744: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10748: LD_VAR 0 1
10752: PPUSH
10753: CALL_OW 110
10757: PUSH
10758: LD_INT 301
10760: EQUAL
10761: IFFALSE 10891
// begin if GetLives ( i ) < 1000 then
10763: LD_VAR 0 1
10767: PPUSH
10768: CALL_OW 256
10772: PUSH
10773: LD_INT 1000
10775: LESS
10776: IFFALSE 10868
// begin if not IsDrivenBy ( i ) then
10778: LD_VAR 0 1
10782: PPUSH
10783: CALL_OW 311
10787: NOT
10788: IFFALSE 10792
// continue ;
10790: GO 10572
// mech := IsDrivenBy ( i ) ;
10792: LD_ADDR_VAR 0 2
10796: PUSH
10797: LD_VAR 0 1
10801: PPUSH
10802: CALL_OW 311
10806: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10807: LD_VAR 0 2
10811: PPUSH
10812: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10816: LD_VAR 0 2
10820: PPUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10830: LD_INT 35
10832: PPUSH
10833: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10837: LD_VAR 0 1
10841: PPUSH
10842: CALL_OW 256
10846: PUSH
10847: LD_INT 1000
10849: EQUAL
10850: IFFALSE 10830
// ComEnterUnit ( mech , i ) ;
10852: LD_VAR 0 2
10856: PPUSH
10857: LD_VAR 0 1
10861: PPUSH
10862: CALL_OW 120
// end else
10866: GO 10891
// if IsDrivenBy ( i ) then
10868: LD_VAR 0 1
10872: PPUSH
10873: CALL_OW 311
10877: IFFALSE 10891
// SetTag ( i , 0 ) ;
10879: LD_VAR 0 1
10883: PPUSH
10884: LD_INT 0
10886: PPUSH
10887: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10891: LD_VAR 0 1
10895: PPUSH
10896: CALL_OW 110
10900: PUSH
10901: LD_INT 300
10903: LESS
10904: IFFALSE 11113
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10906: LD_ADDR_VAR 0 3
10910: PUSH
10911: LD_INT 11
10913: PPUSH
10914: LD_INT 81
10916: PUSH
10917: LD_INT 3
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PPUSH
10924: CALL_OW 70
10928: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10929: LD_VAR 0 1
10933: PPUSH
10934: CALL_OW 256
10938: PUSH
10939: LD_INT 650
10941: LESS
10942: IFFALSE 10967
// begin ComStop ( i ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: CALL_OW 141
// SetTag ( i , 300 ) ;
10953: LD_VAR 0 1
10957: PPUSH
10958: LD_INT 300
10960: PPUSH
10961: CALL_OW 109
// continue ;
10965: GO 10572
// end ; if enemy then
10967: LD_VAR 0 3
10971: IFFALSE 11011
// begin if not HasTask ( i ) then
10973: LD_VAR 0 1
10977: PPUSH
10978: CALL_OW 314
10982: NOT
10983: IFFALSE 11009
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10985: LD_VAR 0 1
10989: PPUSH
10990: LD_VAR 0 3
10994: PPUSH
10995: LD_VAR 0 1
10999: PPUSH
11000: CALL_OW 74
11004: PPUSH
11005: CALL_OW 115
// end else
11009: GO 11113
// if ruMobile > 1 then
11011: LD_EXP 34
11015: PUSH
11016: LD_INT 1
11018: GREATER
11019: IFFALSE 11113
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
11021: LD_ADDR_VAR 0 3
11025: PUSH
11026: LD_INT 81
11028: PUSH
11029: LD_INT 3
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PPUSH
11036: CALL_OW 69
11040: ST_TO_ADDR
// if enemy then
11041: LD_VAR 0 3
11045: IFFALSE 11113
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
11047: LD_VAR 0 1
11051: PPUSH
11052: LD_INT 116
11054: PUSH
11055: LD_INT 95
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 84
11064: PUSH
11065: LD_INT 68
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 58
11074: PUSH
11075: LD_INT 53
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 44
11084: PUSH
11085: LD_INT 35
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 45
11094: PUSH
11095: LD_INT 23
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: PPUSH
11109: CALL 82107 0 2
// end ; end ; end ;
11113: GO 10572
11115: POP
11116: POP
// end ;
11117: PPOPN 3
11119: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11120: LD_INT 3
11122: PUSH
11123: LD_INT 22
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 32
11139: PUSH
11140: LD_INT 1
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: IFFALSE 11239
11157: GO 11159
11159: DISABLE
11160: LD_INT 0
11162: PPUSH
// begin enable ;
11163: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11164: LD_ADDR_VAR 0 1
11168: PUSH
11169: LD_INT 3
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 32
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: PUSH
11205: FOR_IN
11206: IFFALSE 11237
// if GetFuel ( i ) < 3 then
11208: LD_VAR 0 1
11212: PPUSH
11213: CALL_OW 261
11217: PUSH
11218: LD_INT 3
11220: LESS
11221: IFFALSE 11235
// SetFuel ( i , 3 ) ;
11223: LD_VAR 0 1
11227: PPUSH
11228: LD_INT 3
11230: PPUSH
11231: CALL_OW 240
11235: GO 11205
11237: POP
11238: POP
// end ;
11239: PPOPN 1
11241: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11242: LD_INT 29
11244: PPUSH
11245: CALL_OW 302
11249: PUSH
11250: LD_INT 29
11252: PPUSH
11253: CALL_OW 461
11257: PUSH
11258: LD_INT 2
11260: EQUAL
11261: AND
11262: IFFALSE 11495
11264: GO 11266
11266: DISABLE
11267: LD_INT 0
11269: PPUSH
11270: PPUSH
// begin enable ;
11271: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11272: LD_ADDR_VAR 0 1
11276: PUSH
11277: LD_INT 21
11279: PUSH
11280: LD_INT 22
11282: PUSH
11283: LD_INT 23
11285: PUSH
11286: LD_INT 24
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 1
11297: PPUSH
11298: LD_INT 4
11300: PPUSH
11301: CALL_OW 12
11305: ARRAY
11306: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11307: LD_ADDR_VAR 0 2
11311: PUSH
11312: LD_INT 42
11314: PUSH
11315: LD_INT 44
11317: PUSH
11318: LD_INT 43
11320: PUSH
11321: LD_INT 46
11323: PUSH
11324: LD_INT 45
11326: PUSH
11327: LD_INT 46
11329: PUSH
11330: LD_INT 45
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_OWVAR 67
11346: PUSH
11347: LD_INT 0
11349: PPUSH
11350: LD_INT 3
11352: PPUSH
11353: CALL_OW 12
11357: PLUS
11358: ARRAY
11359: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11360: LD_VAR 0 1
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 22
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: IN
11375: PUSH
11376: LD_VAR 0 2
11380: PUSH
11381: LD_INT 46
11383: EQUAL
11384: AND
11385: IFFALSE 11414
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11387: LD_ADDR_VAR 0 2
11391: PUSH
11392: LD_INT 44
11394: PUSH
11395: LD_INT 45
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 1
11404: PPUSH
11405: LD_INT 2
11407: PPUSH
11408: CALL_OW 12
11412: ARRAY
11413: ST_TO_ADDR
// if tick < [ 15 15$00 , 12 12$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11414: LD_OWVAR 1
11418: PUSH
11419: LD_INT 31500
11421: PUSH
11422: LD_INT 25200
11424: PUSH
11425: LD_INT 21000
11427: PUSH
11428: LD_INT 18900
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PUSH
11437: LD_OWVAR 67
11441: ARRAY
11442: LESS
11443: IFFALSE 11472
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11445: LD_ADDR_VAR 0 2
11449: PUSH
11450: LD_INT 44
11452: PUSH
11453: LD_INT 43
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 1
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 12
11470: ARRAY
11471: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11472: LD_INT 29
11474: PPUSH
11475: LD_VAR 0 1
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: LD_VAR 0 2
11490: PPUSH
11491: CALL_OW 185
// end ;
11495: PPOPN 2
11497: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11498: LD_INT 28
11500: PPUSH
11501: CALL_OW 302
11505: IFFALSE 13097
11507: GO 11509
11509: DISABLE
11510: LD_INT 0
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
11519: PPUSH
11520: PPUSH
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
// begin enable ;
11525: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11526: LD_ADDR_VAR 0 4
11530: PUSH
11531: LD_INT 12
11533: PPUSH
11534: LD_INT 3
11536: PUSH
11537: LD_INT 24
11539: PUSH
11540: LD_INT 1000
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 21
11553: PUSH
11554: LD_INT 3
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PPUSH
11565: CALL_OW 70
11569: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11570: LD_ADDR_VAR 0 5
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 25
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11604: LD_ADDR_VAR 0 6
11608: PUSH
11609: LD_INT 22
11611: PUSH
11612: LD_INT 3
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 34
11621: PUSH
11622: LD_INT 52
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PPUSH
11633: CALL_OW 69
11637: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11638: LD_ADDR_VAR 0 8
11642: PUSH
11643: LD_INT 22
11645: PUSH
11646: LD_INT 3
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 25
11655: PUSH
11656: LD_INT 4
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 69
11671: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11672: LD_ADDR_VAR 0 9
11676: PUSH
11677: LD_INT 81
11679: PPUSH
11680: LD_INT 93
11682: PPUSH
11683: CALL_OW 428
11687: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11688: LD_ADDR_VAR 0 10
11692: PUSH
11693: LD_INT 22
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 30
11705: PUSH
11706: LD_INT 32
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 50
11715: PUSH
11716: EMPTY
11717: LIST
11718: PUSH
11719: LD_INT 58
11721: PUSH
11722: EMPTY
11723: LIST
11724: PUSH
11725: LD_INT 3
11727: PUSH
11728: LD_INT 120
11730: PUSH
11731: LD_INT 701
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 69
11753: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11754: LD_ADDR_VAR 0 12
11758: PUSH
11759: LD_INT 22
11761: PUSH
11762: LD_INT 3
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 30
11771: PUSH
11772: LD_INT 5
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 50
11781: PUSH
11782: EMPTY
11783: LIST
11784: PUSH
11785: LD_INT 3
11787: PUSH
11788: LD_INT 62
11790: PUSH
11791: EMPTY
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: ST_TO_ADDR
// if emptyTowers then
11809: LD_VAR 0 10
11813: IFFALSE 12074
// begin for i in emptyTowers do
11815: LD_ADDR_VAR 0 1
11819: PUSH
11820: LD_VAR 0 10
11824: PUSH
11825: FOR_IN
11826: IFFALSE 12070
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11828: LD_ADDR_VAR 0 11
11832: PUSH
11833: LD_INT 22
11835: PUSH
11836: LD_INT 3
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 2
11845: PUSH
11846: LD_INT 54
11848: PUSH
11849: EMPTY
11850: LIST
11851: PUSH
11852: LD_INT 95
11854: PUSH
11855: LD_INT 12
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 25
11869: PUSH
11870: LD_INT 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 50
11879: PUSH
11880: EMPTY
11881: LIST
11882: PUSH
11883: LD_INT 3
11885: PUSH
11886: LD_INT 120
11888: PUSH
11889: LD_INT 701
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 69
11911: ST_TO_ADDR
// if not sol then
11912: LD_VAR 0 11
11916: NOT
11917: IFFALSE 11921
// break ;
11919: GO 12070
// for j in sol do
11921: LD_ADDR_VAR 0 2
11925: PUSH
11926: LD_VAR 0 11
11930: PUSH
11931: FOR_IN
11932: IFFALSE 11983
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11934: LD_VAR 0 2
11938: PPUSH
11939: CALL_OW 310
11943: PUSH
11944: LD_VAR 0 2
11948: PPUSH
11949: CALL_OW 310
11953: PPUSH
11954: CALL_OW 266
11958: PUSH
11959: LD_INT 32
11961: EQUAL
11962: AND
11963: IFFALSE 11981
// sol := sol diff j ;
11965: LD_ADDR_VAR 0 11
11969: PUSH
11970: LD_VAR 0 11
11974: PUSH
11975: LD_VAR 0 2
11979: DIFF
11980: ST_TO_ADDR
11981: GO 11931
11983: POP
11984: POP
// if not sol then
11985: LD_VAR 0 11
11989: NOT
11990: IFFALSE 11994
// break ;
11992: GO 12070
// if IsInUnit ( sol [ 1 ] ) then
11994: LD_VAR 0 11
11998: PUSH
11999: LD_INT 1
12001: ARRAY
12002: PPUSH
12003: CALL_OW 310
12007: IFFALSE 12022
// ComExit ( sol [ 1 ] ) ;
12009: LD_VAR 0 11
12013: PUSH
12014: LD_INT 1
12016: ARRAY
12017: PPUSH
12018: CALL 79895 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
12022: LD_VAR 0 11
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PPUSH
12031: LD_INT 701
12033: PPUSH
12034: CALL_OW 109
// SetTag ( i , 701 ) ;
12038: LD_VAR 0 1
12042: PPUSH
12043: LD_INT 701
12045: PPUSH
12046: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
12050: LD_VAR 0 11
12054: PUSH
12055: LD_INT 1
12057: ARRAY
12058: PPUSH
12059: LD_VAR 0 1
12063: PPUSH
12064: CALL_OW 180
// end ;
12068: GO 11825
12070: POP
12071: POP
// end else
12072: GO 12320
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
12074: LD_VAR 0 11
12078: PPUSH
12079: LD_INT 3
12081: PUSH
12082: LD_INT 54
12084: PUSH
12085: EMPTY
12086: LIST
12087: PUSH
12088: LD_INT 95
12090: PUSH
12091: LD_INT 12
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 72
12107: IFFALSE 12320
// begin if barracks then
12109: LD_VAR 0 12
12113: IFFALSE 12181
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12115: LD_ADDR_VAR 0 1
12119: PUSH
12120: LD_VAR 0 11
12124: PPUSH
12125: LD_INT 3
12127: PUSH
12128: LD_INT 54
12130: PUSH
12131: EMPTY
12132: LIST
12133: PUSH
12134: LD_INT 95
12136: PUSH
12137: LD_INT 12
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 72
12153: PUSH
12154: FOR_IN
12155: IFFALSE 12177
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12157: LD_VAR 0 1
12161: PPUSH
12162: LD_VAR 0 12
12166: PUSH
12167: LD_INT 1
12169: ARRAY
12170: PPUSH
12171: CALL_OW 120
12175: GO 12154
12177: POP
12178: POP
// end else
12179: GO 12320
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12181: LD_INT 12
12183: PPUSH
12184: LD_INT 81
12186: PUSH
12187: LD_INT 3
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PPUSH
12194: CALL_OW 70
12198: IFFALSE 12320
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12200: LD_ADDR_VAR 0 1
12204: PUSH
12205: LD_VAR 0 11
12209: PPUSH
12210: LD_INT 3
12212: PUSH
12213: LD_INT 54
12215: PUSH
12216: EMPTY
12217: LIST
12218: PUSH
12219: LD_INT 95
12221: PUSH
12222: LD_INT 12
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: LIST
12233: PPUSH
12234: CALL_OW 72
12238: PUSH
12239: FOR_IN
12240: IFFALSE 12318
// begin SetTag ( i , 702 ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: LD_INT 702
12249: PPUSH
12250: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12254: LD_ADDR_VAR 0 13
12258: PUSH
12259: LD_INT 12
12261: PPUSH
12262: LD_INT 81
12264: PUSH
12265: LD_INT 3
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 70
12276: PPUSH
12277: LD_VAR 0 1
12281: PPUSH
12282: CALL_OW 74
12286: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12287: LD_VAR 0 1
12291: PPUSH
12292: LD_VAR 0 13
12296: PPUSH
12297: CALL_OW 250
12301: PPUSH
12302: LD_VAR 0 13
12306: PPUSH
12307: CALL_OW 251
12311: PPUSH
12312: CALL_OW 114
// end ;
12316: GO 12239
12318: POP
12319: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12320: LD_ADDR_VAR 0 3
12324: PUSH
12325: LD_INT 22
12327: PUSH
12328: LD_INT 3
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 95
12337: PUSH
12338: LD_INT 11
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 50
12347: PUSH
12348: EMPTY
12349: LIST
12350: PUSH
12351: LD_INT 25
12353: PUSH
12354: LD_INT 1
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 120
12363: PUSH
12364: LD_INT 702
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 69
12382: ST_TO_ADDR
// if tmp then
12383: LD_VAR 0 3
12387: IFFALSE 12433
// for i in tmp do
12389: LD_ADDR_VAR 0 1
12393: PUSH
12394: LD_VAR 0 3
12398: PUSH
12399: FOR_IN
12400: IFFALSE 12431
// begin ComMoveXY ( i , 90 , 94 ) ;
12402: LD_VAR 0 1
12406: PPUSH
12407: LD_INT 90
12409: PPUSH
12410: LD_INT 94
12412: PPUSH
12413: CALL_OW 111
// SetTag ( i , 0 ) ;
12417: LD_VAR 0 1
12421: PPUSH
12422: LD_INT 0
12424: PPUSH
12425: CALL_OW 109
// end ;
12429: GO 12399
12431: POP
12432: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12433: LD_VAR 0 8
12437: PUSH
12438: LD_VAR 0 5
12442: PPUSH
12443: LD_INT 120
12445: PUSH
12446: LD_INT 2
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 72
12457: AND
12458: IFFALSE 12471
// ComExitAll ( sci ) else
12460: LD_VAR 0 8
12464: PPUSH
12465: CALL 79978 0 1
12469: GO 12544
// if sci then
12471: LD_VAR 0 8
12475: IFFALSE 12544
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12477: LD_VAR 0 8
12481: PPUSH
12482: LD_INT 3
12484: PUSH
12485: LD_INT 54
12487: PUSH
12488: EMPTY
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PPUSH
12495: CALL_OW 72
12499: PUSH
12500: LD_VAR 0 9
12504: PPUSH
12505: CALL_OW 302
12509: AND
12510: IFFALSE 12544
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12512: LD_VAR 0 8
12516: PPUSH
12517: LD_INT 3
12519: PUSH
12520: LD_INT 54
12522: PUSH
12523: EMPTY
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PPUSH
12530: CALL_OW 72
12534: PPUSH
12535: LD_VAR 0 9
12539: PPUSH
12540: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12544: LD_VAR 0 6
12548: PPUSH
12549: LD_INT 50
12551: PUSH
12552: EMPTY
12553: LIST
12554: PPUSH
12555: CALL_OW 72
12559: PUSH
12560: LD_VAR 0 4
12564: AND
12565: IFFALSE 12596
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12567: LD_VAR 0 6
12571: PPUSH
12572: LD_INT 50
12574: PUSH
12575: EMPTY
12576: LIST
12577: PPUSH
12578: CALL_OW 72
12582: PPUSH
12583: LD_VAR 0 4
12587: PUSH
12588: LD_INT 1
12590: ARRAY
12591: PPUSH
12592: CALL_OW 130
// if eng then
12596: LD_VAR 0 5
12600: IFFALSE 13097
// begin for i in eng do
12602: LD_ADDR_VAR 0 1
12606: PUSH
12607: LD_VAR 0 5
12611: PUSH
12612: FOR_IN
12613: IFFALSE 13095
// begin tag := GetTag ( i ) ;
12615: LD_ADDR_VAR 0 7
12619: PUSH
12620: LD_VAR 0 1
12624: PPUSH
12625: CALL_OW 110
12629: ST_TO_ADDR
// case tag of 0 :
12630: LD_VAR 0 7
12634: PUSH
12635: LD_INT 0
12637: DOUBLE
12638: EQUAL
12639: IFTRUE 12643
12641: GO 12854
12643: POP
// begin if b then
12644: LD_VAR 0 4
12648: IFFALSE 12664
// begin SetTag ( i , 1 ) ;
12650: LD_VAR 0 1
12654: PPUSH
12655: LD_INT 1
12657: PPUSH
12658: CALL_OW 109
// continue ;
12662: GO 12612
// end ; if not ruBuildList then
12664: LD_EXP 35
12668: NOT
12669: IFFALSE 12685
// ComEnterUnit ( i , ruDep ) else
12671: LD_VAR 0 1
12675: PPUSH
12676: LD_INT 28
12678: PPUSH
12679: CALL_OW 120
12683: GO 12852
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12685: LD_INT 11
12687: PPUSH
12688: LD_INT 81
12690: PUSH
12691: LD_INT 3
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PPUSH
12698: CALL_OW 70
12702: PUSH
12703: LD_INT 0
12705: EQUAL
12706: PUSH
12707: LD_INT 28
12709: PPUSH
12710: LD_EXP 35
12714: PUSH
12715: LD_INT 1
12717: ARRAY
12718: PUSH
12719: LD_INT 1
12721: ARRAY
12722: PPUSH
12723: LD_EXP 35
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PUSH
12732: LD_INT 2
12734: ARRAY
12735: PPUSH
12736: LD_EXP 35
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PUSH
12745: LD_INT 3
12747: ARRAY
12748: PPUSH
12749: LD_EXP 35
12753: PUSH
12754: LD_INT 1
12756: ARRAY
12757: PUSH
12758: LD_INT 4
12760: ARRAY
12761: PPUSH
12762: CALL 55222 0 5
12766: AND
12767: IFFALSE 12852
// begin if IsInUnit ( i ) then
12769: LD_VAR 0 1
12773: PPUSH
12774: CALL_OW 310
12778: IFFALSE 12791
// ComExitBuilding ( i ) else
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 122
12789: GO 12852
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12791: LD_VAR 0 1
12795: PPUSH
12796: LD_EXP 35
12800: PUSH
12801: LD_INT 1
12803: ARRAY
12804: PUSH
12805: LD_INT 1
12807: ARRAY
12808: PPUSH
12809: LD_EXP 35
12813: PUSH
12814: LD_INT 1
12816: ARRAY
12817: PUSH
12818: LD_INT 2
12820: ARRAY
12821: PPUSH
12822: LD_EXP 35
12826: PUSH
12827: LD_INT 1
12829: ARRAY
12830: PUSH
12831: LD_INT 3
12833: ARRAY
12834: PPUSH
12835: LD_EXP 35
12839: PUSH
12840: LD_INT 1
12842: ARRAY
12843: PUSH
12844: LD_INT 4
12846: ARRAY
12847: PPUSH
12848: CALL_OW 145
// end ; end ; 1 :
12852: GO 13051
12854: LD_INT 1
12856: DOUBLE
12857: EQUAL
12858: IFTRUE 12862
12860: GO 12965
12862: POP
// begin if not b then
12863: LD_VAR 0 4
12867: NOT
12868: IFFALSE 12884
// begin SetTag ( i , 0 ) ;
12870: LD_VAR 0 1
12874: PPUSH
12875: LD_INT 0
12877: PPUSH
12878: CALL_OW 109
// continue ;
12882: GO 12612
// end ; if IsInUnit ( i ) then
12884: LD_VAR 0 1
12888: PPUSH
12889: CALL_OW 310
12893: IFFALSE 12904
// ComExitBuilding ( i ) ;
12895: LD_VAR 0 1
12899: PPUSH
12900: CALL_OW 122
// if GetLives ( i ) < 650 then
12904: LD_VAR 0 1
12908: PPUSH
12909: CALL_OW 256
12913: PUSH
12914: LD_INT 650
12916: LESS
12917: IFFALSE 12933
// begin SetTag ( i , 2 ) ;
12919: LD_VAR 0 1
12923: PPUSH
12924: LD_INT 2
12926: PPUSH
12927: CALL_OW 109
// continue ;
12931: GO 12612
// end ; if b then
12933: LD_VAR 0 4
12937: IFFALSE 12963
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12939: LD_VAR 0 1
12943: PPUSH
12944: LD_VAR 0 4
12948: PPUSH
12949: LD_VAR 0 1
12953: PPUSH
12954: CALL_OW 74
12958: PPUSH
12959: CALL_OW 130
// end ; 2 :
12963: GO 13051
12965: LD_INT 2
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 13050
12973: POP
// begin if GetLives ( i ) = 1000 then
12974: LD_VAR 0 1
12978: PPUSH
12979: CALL_OW 256
12983: PUSH
12984: LD_INT 1000
12986: EQUAL
12987: IFFALSE 13003
// begin SetTag ( i , 1 ) ;
12989: LD_VAR 0 1
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 109
// continue ;
13001: GO 12612
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
13003: LD_VAR 0 1
13007: PPUSH
13008: LD_INT 84
13010: PPUSH
13011: LD_INT 93
13013: PPUSH
13014: CALL_OW 297
13018: PUSH
13019: LD_INT 6
13021: GREATER
13022: IFFALSE 13048
// begin ComMoveXY ( i , 84 , 93 ) ;
13024: LD_VAR 0 1
13028: PPUSH
13029: LD_INT 84
13031: PPUSH
13032: LD_INT 93
13034: PPUSH
13035: CALL_OW 111
// AddComHold ( i ) ;
13039: LD_VAR 0 1
13043: PPUSH
13044: CALL_OW 200
// end ; end ; end ;
13048: GO 13051
13050: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
13051: LD_VAR 0 1
13055: PPUSH
13056: LD_INT 12
13058: PPUSH
13059: CALL_OW 308
13063: NOT
13064: PUSH
13065: LD_VAR 0 1
13069: PPUSH
13070: CALL_OW 310
13074: NOT
13075: AND
13076: IFFALSE 13093
// ComMoveXY ( i , 91 , 95 ) ;
13078: LD_VAR 0 1
13082: PPUSH
13083: LD_INT 91
13085: PPUSH
13086: LD_INT 95
13088: PPUSH
13089: CALL_OW 111
// end ;
13093: GO 12612
13095: POP
13096: POP
// end ; end ;
13097: PPOPN 13
13099: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
13100: LD_INT 0
13102: PPUSH
13103: PPUSH
13104: PPUSH
13105: PPUSH
13106: PPUSH
13107: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13108: LD_ADDR_VAR 0 3
13112: PUSH
13113: DOUBLE
13114: LD_INT 1
13116: DEC
13117: ST_TO_ADDR
13118: LD_INT 3
13120: PUSH
13121: LD_INT 4
13123: PUSH
13124: LD_INT 5
13126: PUSH
13127: LD_INT 6
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: PUSH
13136: LD_OWVAR 67
13140: ARRAY
13141: PUSH
13142: LD_VAR 0 1
13146: PLUS
13147: PUSH
13148: FOR_TO
13149: IFFALSE 13466
// begin uc_side := 6 ;
13151: LD_ADDR_OWVAR 20
13155: PUSH
13156: LD_INT 6
13158: ST_TO_ADDR
// uc_nation := 3 ;
13159: LD_ADDR_OWVAR 21
13163: PUSH
13164: LD_INT 3
13166: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13167: LD_ADDR_VAR 0 6
13171: PUSH
13172: LD_INT 21
13174: PUSH
13175: LD_INT 22
13177: PUSH
13178: LD_INT 23
13180: PUSH
13181: LD_INT 24
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 1
13192: PPUSH
13193: LD_INT 4
13195: PPUSH
13196: CALL_OW 12
13200: ARRAY
13201: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13202: LD_ADDR_VAR 0 7
13206: PUSH
13207: LD_INT 42
13209: PUSH
13210: LD_INT 44
13212: PUSH
13213: LD_INT 43
13215: PUSH
13216: LD_INT 46
13218: PUSH
13219: LD_INT 45
13221: PUSH
13222: LD_INT 46
13224: PUSH
13225: LD_INT 45
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: PUSH
13237: LD_OWVAR 67
13241: PUSH
13242: LD_INT 0
13244: PPUSH
13245: LD_INT 3
13247: PPUSH
13248: CALL_OW 12
13252: PLUS
13253: ARRAY
13254: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13255: LD_VAR 0 6
13259: PUSH
13260: LD_INT 21
13262: PUSH
13263: LD_INT 22
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: IN
13270: PUSH
13271: LD_VAR 0 7
13275: PUSH
13276: LD_INT 46
13278: EQUAL
13279: AND
13280: IFFALSE 13309
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13282: LD_ADDR_VAR 0 7
13286: PUSH
13287: LD_INT 44
13289: PUSH
13290: LD_INT 45
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 1
13299: PPUSH
13300: LD_INT 2
13302: PPUSH
13303: CALL_OW 12
13307: ARRAY
13308: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13309: LD_OWVAR 1
13313: PUSH
13314: LD_INT 31500
13316: PUSH
13317: LD_INT 27300
13319: PUSH
13320: LD_INT 23100
13322: PUSH
13323: LD_INT 18900
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: PUSH
13332: LD_OWVAR 67
13336: ARRAY
13337: LESS
13338: IFFALSE 13371
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13340: LD_ADDR_VAR 0 7
13344: PUSH
13345: LD_INT 44
13347: PUSH
13348: LD_INT 43
13350: PUSH
13351: LD_INT 42
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 1
13361: PPUSH
13362: LD_INT 3
13364: PPUSH
13365: CALL_OW 12
13369: ARRAY
13370: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13371: LD_VAR 0 6
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: LD_INT 3
13381: PPUSH
13382: LD_VAR 0 7
13386: PPUSH
13387: LD_INT 90
13389: PPUSH
13390: CALL 46626 0 5
// un := CreateVehicle ;
13394: LD_ADDR_VAR 0 4
13398: PUSH
13399: CALL_OW 45
13403: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13404: LD_VAR 0 4
13408: PPUSH
13409: LD_INT 140
13411: PPUSH
13412: LD_INT 146
13414: PPUSH
13415: LD_INT 0
13417: PPUSH
13418: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13422: LD_VAR 0 4
13426: PPUSH
13427: LD_INT 131
13429: PPUSH
13430: LD_INT 128
13432: PPUSH
13433: CALL_OW 111
// wait ( 0 0$3 ) ;
13437: LD_INT 105
13439: PPUSH
13440: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13444: LD_ADDR_VAR 0 5
13448: PUSH
13449: LD_VAR 0 5
13453: PPUSH
13454: LD_VAR 0 4
13458: PPUSH
13459: CALL 79497 0 2
13463: ST_TO_ADDR
// end ;
13464: GO 13148
13466: POP
13467: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13468: LD_ADDR_EXP 36
13472: PUSH
13473: LD_EXP 36
13477: PPUSH
13478: LD_VAR 0 5
13482: PPUSH
13483: CALL 79534 0 2
13487: ST_TO_ADDR
// end ;
13488: LD_VAR 0 2
13492: RET
// every 0 0$3 trigger russianAttackers do
13493: LD_EXP 36
13497: IFFALSE 13580
13499: GO 13501
13501: DISABLE
// begin enable ;
13502: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13503: LD_EXP 36
13507: PPUSH
13508: LD_INT 126
13510: PUSH
13511: LD_INT 108
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 107
13520: PUSH
13521: LD_INT 85
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 82
13530: PUSH
13531: LD_INT 62
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 73
13540: PUSH
13541: LD_INT 46
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 62
13550: PUSH
13551: LD_INT 31
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 52
13560: PUSH
13561: LD_INT 17
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL 82107 0 2
// end ;
13580: END
// every 20 20$0 trigger Difficulty > 2 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
13581: LD_OWVAR 67
13585: PUSH
13586: LD_INT 2
13588: GREATER
13589: PUSH
13590: LD_INT 22
13592: PUSH
13593: LD_INT 6
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 21
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 50
13612: PUSH
13613: EMPTY
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: PUSH
13626: LD_INT 0
13628: EQUAL
13629: AND
13630: IFFALSE 13684
13632: GO 13634
13634: DISABLE
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
13635: LD_INT 51
13637: PPUSH
13638: LD_INT 6
13640: PPUSH
13641: LD_INT 2
13643: PPUSH
13644: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
13648: LD_INT 57
13650: PPUSH
13651: LD_INT 6
13653: PPUSH
13654: LD_INT 2
13656: PPUSH
13657: CALL_OW 322
// if Difficulty > 3 then
13661: LD_OWVAR 67
13665: PUSH
13666: LD_INT 3
13668: GREATER
13669: IFFALSE 13684
// SetTech ( tech_weap2 , 6 , state_researched ) ;
13671: LD_INT 52
13673: PPUSH
13674: LD_INT 6
13676: PPUSH
13677: LD_INT 2
13679: PPUSH
13680: CALL_OW 322
// end ; end_of_file
13684: END
// on SailEvent ( event ) do begin if event = 1 then
13685: LD_VAR 0 1
13689: PUSH
13690: LD_INT 1
13692: EQUAL
13693: IFFALSE 13723
// PrepareRussianAttack ( [ 2 , 4 , 6 , 8 ] [ Difficulty ] ) ;
13695: LD_INT 2
13697: PUSH
13698: LD_INT 4
13700: PUSH
13701: LD_INT 6
13703: PUSH
13704: LD_INT 8
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: LD_OWVAR 67
13717: ARRAY
13718: PPUSH
13719: CALL 13100 0 1
// end ;
13723: PPOPN 1
13725: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13726: LD_VAR 0 1
13730: PUSH
13731: LD_EXP 28
13735: EQUAL
13736: PUSH
13737: LD_VAR 0 2
13741: PUSH
13742: LD_INT 1
13744: EQUAL
13745: AND
13746: IFFALSE 13752
// SikorskiKilledInAction ;
13748: CALL 18869 0 0
// end ;
13752: PPOPN 3
13754: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13755: LD_INT 0
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13762: LD_VAR 0 1
13766: PPUSH
13767: CALL 36418 0 1
// if un = JMM then
13771: LD_VAR 0 1
13775: PUSH
13776: LD_EXP 14
13780: EQUAL
13781: IFFALSE 13790
// YouLost ( JMM ) ;
13783: LD_STRING JMM
13785: PPUSH
13786: CALL_OW 104
// if un = Sikorski then
13790: LD_VAR 0 1
13794: PUSH
13795: LD_EXP 28
13799: EQUAL
13800: IFFALSE 13826
// if sikorskiStatus = 0 then
13802: LD_EXP 9
13806: PUSH
13807: LD_INT 0
13809: EQUAL
13810: IFFALSE 13818
// SikorskiKilledInAction else
13812: CALL 18869 0 0
13816: GO 13826
// sikorskiIsKilled := true ;
13818: LD_ADDR_EXP 10
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13826: LD_VAR 0 1
13830: PPUSH
13831: CALL_OW 255
13835: PUSH
13836: LD_INT 1
13838: EQUAL
13839: PUSH
13840: LD_VAR 0 1
13844: PPUSH
13845: CALL_OW 248
13849: PUSH
13850: LD_INT 1
13852: EQUAL
13853: AND
13854: PUSH
13855: LD_VAR 0 1
13859: PPUSH
13860: CALL_OW 266
13864: PUSH
13865: LD_INT 0
13867: PUSH
13868: LD_INT 1
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: IN
13875: AND
13876: IFFALSE 13885
// YouLost ( Destroyed ) ;
13878: LD_STRING Destroyed
13880: PPUSH
13881: CALL_OW 104
// if un = ruDep then
13885: LD_VAR 0 1
13889: PUSH
13890: LD_INT 28
13892: EQUAL
13893: IFFALSE 14027
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13895: LD_ADDR_VAR 0 2
13899: PUSH
13900: LD_INT 22
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 25
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PPUSH
13924: CALL_OW 69
13928: PUSH
13929: FOR_IN
13930: IFFALSE 14025
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13932: LD_ADDR_VAR 0 3
13936: PUSH
13937: LD_INT 11
13939: PPUSH
13940: LD_INT 81
13942: PUSH
13943: LD_INT 3
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PPUSH
13950: CALL_OW 70
13954: PPUSH
13955: LD_VAR 0 2
13959: PPUSH
13960: CALL_OW 74
13964: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13965: LD_VAR 0 2
13969: PPUSH
13970: CALL_OW 310
13974: PPUSH
13975: CALL_OW 266
13979: PUSH
13980: LD_INT 32
13982: EQUAL
13983: IFFALSE 14023
// begin ComExitBuilding ( i ) ;
13985: LD_VAR 0 2
13989: PPUSH
13990: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13994: LD_VAR 0 2
13998: PPUSH
13999: LD_VAR 0 3
14003: PPUSH
14004: CALL_OW 250
14008: PPUSH
14009: LD_VAR 0 3
14013: PPUSH
14014: CALL_OW 251
14018: PPUSH
14019: CALL_OW 174
// end ; end ;
14023: GO 13929
14025: POP
14026: POP
// end ; if un in ruMobile then
14027: LD_VAR 0 1
14031: PUSH
14032: LD_EXP 34
14036: IN
14037: IFFALSE 14055
// ruMobile := ruMobile diff un ;
14039: LD_ADDR_EXP 34
14043: PUSH
14044: LD_EXP 34
14048: PUSH
14049: LD_VAR 0 1
14053: DIFF
14054: ST_TO_ADDR
// if GetSide ( un ) = 3 then
14055: LD_VAR 0 1
14059: PPUSH
14060: CALL_OW 255
14064: PUSH
14065: LD_INT 3
14067: EQUAL
14068: IFFALSE 14703
// begin if GetType ( un ) = unit_building then
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 247
14079: PUSH
14080: LD_INT 3
14082: EQUAL
14083: IFFALSE 14219
// begin btype := GetBType ( un ) ;
14085: LD_ADDR_VAR 0 6
14089: PUSH
14090: LD_VAR 0 1
14094: PPUSH
14095: CALL_OW 266
14099: ST_TO_ADDR
// if btype = b_warehouse then
14100: LD_VAR 0 6
14104: PUSH
14105: LD_INT 1
14107: EQUAL
14108: IFFALSE 14118
// btype := b_depot ;
14110: LD_ADDR_VAR 0 6
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// if btype = b_barracks then
14118: LD_VAR 0 6
14122: PUSH
14123: LD_INT 5
14125: EQUAL
14126: IFFALSE 14136
// btype := b_armoury ;
14128: LD_ADDR_VAR 0 6
14132: PUSH
14133: LD_INT 4
14135: ST_TO_ADDR
// if btype = b_lab_full then
14136: LD_VAR 0 6
14140: PUSH
14141: LD_INT 8
14143: EQUAL
14144: IFFALSE 14154
// btype := b_lab ;
14146: LD_ADDR_VAR 0 6
14150: PUSH
14151: LD_INT 6
14153: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
14154: LD_ADDR_EXP 35
14158: PUSH
14159: LD_EXP 35
14163: PPUSH
14164: LD_EXP 35
14168: PUSH
14169: LD_INT 1
14171: PLUS
14172: PPUSH
14173: LD_VAR 0 6
14177: PUSH
14178: LD_VAR 0 1
14182: PPUSH
14183: CALL_OW 250
14187: PUSH
14188: LD_VAR 0 1
14192: PPUSH
14193: CALL_OW 251
14197: PUSH
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 254
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: PPUSH
14214: CALL_OW 1
14218: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
14219: LD_VAR 0 1
14223: PPUSH
14224: CALL_OW 247
14228: PUSH
14229: LD_INT 2
14231: EQUAL
14232: IFFALSE 14507
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14234: LD_VAR 0 1
14238: PPUSH
14239: CALL_OW 264
14243: PUSH
14244: LD_INT 52
14246: PUSH
14247: LD_INT 51
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: IN
14254: IFFALSE 14284
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14256: LD_INT 29
14258: PPUSH
14259: LD_INT 22
14261: PPUSH
14262: LD_INT 1
14264: PPUSH
14265: LD_INT 3
14267: PPUSH
14268: LD_VAR 0 1
14272: PPUSH
14273: CALL_OW 264
14277: PPUSH
14278: CALL_OW 185
// end else
14282: GO 14507
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14284: LD_ADDR_VAR 0 4
14288: PUSH
14289: LD_INT 21
14291: PUSH
14292: LD_INT 22
14294: PUSH
14295: LD_INT 23
14297: PUSH
14298: LD_INT 24
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 1
14309: PPUSH
14310: LD_INT 4
14312: PPUSH
14313: CALL_OW 12
14317: ARRAY
14318: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14319: LD_ADDR_VAR 0 5
14323: PUSH
14324: LD_INT 42
14326: PUSH
14327: LD_INT 44
14329: PUSH
14330: LD_INT 43
14332: PUSH
14333: LD_INT 46
14335: PUSH
14336: LD_INT 45
14338: PUSH
14339: LD_INT 46
14341: PUSH
14342: LD_INT 45
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: LD_OWVAR 67
14358: PUSH
14359: LD_INT 0
14361: PPUSH
14362: LD_INT 3
14364: PPUSH
14365: CALL_OW 12
14369: PLUS
14370: ARRAY
14371: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14372: LD_VAR 0 4
14376: PUSH
14377: LD_INT 21
14379: PUSH
14380: LD_INT 22
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: IN
14387: PUSH
14388: LD_VAR 0 5
14392: PUSH
14393: LD_INT 46
14395: EQUAL
14396: AND
14397: IFFALSE 14426
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14399: LD_ADDR_VAR 0 5
14403: PUSH
14404: LD_INT 44
14406: PUSH
14407: LD_INT 45
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PUSH
14414: LD_INT 1
14416: PPUSH
14417: LD_INT 2
14419: PPUSH
14420: CALL_OW 12
14424: ARRAY
14425: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14426: LD_OWVAR 1
14430: PUSH
14431: LD_INT 31500
14433: PUSH
14434: LD_INT 27300
14436: PUSH
14437: LD_INT 23100
14439: PUSH
14440: LD_INT 21000
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: PUSH
14449: LD_OWVAR 67
14453: ARRAY
14454: LESS
14455: IFFALSE 14484
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14457: LD_ADDR_VAR 0 5
14461: PUSH
14462: LD_INT 44
14464: PUSH
14465: LD_INT 43
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 1
14474: PPUSH
14475: LD_INT 2
14477: PPUSH
14478: CALL_OW 12
14482: ARRAY
14483: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14484: LD_INT 29
14486: PPUSH
14487: LD_VAR 0 4
14491: PPUSH
14492: LD_INT 1
14494: PPUSH
14495: LD_INT 1
14497: PPUSH
14498: LD_VAR 0 5
14502: PPUSH
14503: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14507: LD_VAR 0 1
14511: PPUSH
14512: CALL_OW 257
14516: PUSH
14517: LD_INT 3
14519: EQUAL
14520: IFFALSE 14703
// begin killMechCounter := Inc ( killMechCounter ) ;
14522: LD_ADDR_EXP 12
14526: PUSH
14527: LD_EXP 12
14531: PPUSH
14532: CALL 80858 0 1
14536: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14537: LD_EXP 33
14541: PUSH
14542: LD_INT 0
14544: EQUAL
14545: PUSH
14546: LD_INT 29
14548: PPUSH
14549: CALL_OW 302
14553: NOT
14554: OR
14555: IFFALSE 14559
// exit ;
14557: GO 14703
// ruMechCounter := Dec ( ruMechCounter ) ;
14559: LD_ADDR_EXP 33
14563: PUSH
14564: LD_EXP 33
14568: PPUSH
14569: CALL 80880 0 1
14573: ST_TO_ADDR
// uc_side := 3 ;
14574: LD_ADDR_OWVAR 20
14578: PUSH
14579: LD_INT 3
14581: ST_TO_ADDR
// uc_nation := 3 ;
14582: LD_ADDR_OWVAR 21
14586: PUSH
14587: LD_INT 3
14589: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14590: LD_INT 0
14592: PPUSH
14593: LD_INT 5
14595: PUSH
14596: LD_INT 6
14598: PUSH
14599: LD_INT 7
14601: PUSH
14602: LD_INT 8
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: PUSH
14611: LD_OWVAR 67
14615: ARRAY
14616: PPUSH
14617: CALL_OW 383
// tmp := CreateHuman ;
14621: LD_ADDR_VAR 0 3
14625: PUSH
14626: CALL_OW 44
14630: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14631: LD_VAR 0 3
14635: PPUSH
14636: LD_INT 145
14638: PPUSH
14639: LD_INT 133
14641: PPUSH
14642: LD_INT 0
14644: PPUSH
14645: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14649: LD_VAR 0 3
14653: PPUSH
14654: LD_INT 29
14656: PPUSH
14657: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14661: LD_INT 35
14663: PPUSH
14664: CALL_OW 67
// if not HasTask ( tmp ) then
14668: LD_VAR 0 3
14672: PPUSH
14673: CALL_OW 314
14677: NOT
14678: IFFALSE 14692
// ComEnterUnit ( tmp , ruFac ) ;
14680: LD_VAR 0 3
14684: PPUSH
14685: LD_INT 29
14687: PPUSH
14688: CALL_OW 120
// until IsInUnit ( tmp ) ;
14692: LD_VAR 0 3
14696: PPUSH
14697: CALL_OW 310
14701: IFFALSE 14661
// end ; end ; end ;
14703: PPOPN 6
14705: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 255
14715: PUSH
14716: LD_INT 4
14718: EQUAL
14719: IFFALSE 14736
// ComMoveXY ( driver , 40 , 47 ) ;
14721: LD_VAR 0 1
14725: PPUSH
14726: LD_INT 40
14728: PPUSH
14729: LD_INT 47
14731: PPUSH
14732: CALL_OW 111
// if GetSide ( driver ) = 3 then
14736: LD_VAR 0 1
14740: PPUSH
14741: CALL_OW 255
14745: PUSH
14746: LD_INT 3
14748: EQUAL
14749: IFFALSE 14963
// begin ComMoveXY ( driver , 90 , 97 ) ;
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_INT 90
14758: PPUSH
14759: LD_INT 97
14761: PPUSH
14762: CALL_OW 111
// if IsOk ( ruFac ) then
14766: LD_INT 29
14768: PPUSH
14769: CALL_OW 302
14773: IFFALSE 14887
// begin repeat wait ( 0 0$1 ) ;
14775: LD_INT 35
14777: PPUSH
14778: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14782: LD_INT 29
14784: PPUSH
14785: CALL_OW 313
14789: PUSH
14790: LD_INT 6
14792: LESS
14793: PUSH
14794: LD_VAR 0 1
14798: PPUSH
14799: CALL_OW 301
14803: OR
14804: IFFALSE 14775
// if IsDead ( driver ) then
14806: LD_VAR 0 1
14810: PPUSH
14811: CALL_OW 301
14815: IFFALSE 14819
// exit ;
14817: GO 14963
// repeat wait ( 0 0$10 ) ;
14819: LD_INT 350
14821: PPUSH
14822: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 314
14835: NOT
14836: PUSH
14837: LD_INT 29
14839: PPUSH
14840: CALL_OW 313
14844: PUSH
14845: LD_INT 6
14847: LESS
14848: AND
14849: IFFALSE 14863
// ComEnterUnit ( driver , ruFac ) ;
14851: LD_VAR 0 1
14855: PPUSH
14856: LD_INT 29
14858: PPUSH
14859: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 301
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 310
14882: OR
14883: IFFALSE 14819
// end else
14885: GO 14963
// begin ComMoveXY ( driver , 142 , 148 ) ;
14887: LD_VAR 0 1
14891: PPUSH
14892: LD_INT 142
14894: PPUSH
14895: LD_INT 148
14897: PPUSH
14898: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14902: LD_INT 35
14904: PPUSH
14905: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 301
14918: PUSH
14919: LD_VAR 0 1
14923: PPUSH
14924: LD_INT 142
14926: PPUSH
14927: LD_INT 148
14929: PPUSH
14930: CALL_OW 307
14934: OR
14935: IFFALSE 14902
// if IsAt ( driver , 142 , 148 ) then
14937: LD_VAR 0 1
14941: PPUSH
14942: LD_INT 142
14944: PPUSH
14945: LD_INT 148
14947: PPUSH
14948: CALL_OW 307
14952: IFFALSE 14963
// RemoveUnit ( driver ) ;
14954: LD_VAR 0 1
14958: PPUSH
14959: CALL_OW 64
// end ; end ; end ;
14963: PPOPN 4
14965: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14966: LD_VAR 0 2
14970: PPUSH
14971: CALL_OW 257
14975: PUSH
14976: LD_INT 3
14978: EQUAL
14979: PUSH
14980: LD_VAR 0 1
14984: PPUSH
14985: CALL_OW 255
14989: PUSH
14990: LD_INT 3
14992: EQUAL
14993: AND
14994: PUSH
14995: LD_VAR 0 1
14999: PUSH
15000: LD_INT 29
15002: EQUAL
15003: AND
15004: IFFALSE 15018
// SetLives ( un , 1000 ) ;
15006: LD_VAR 0 2
15010: PPUSH
15011: LD_INT 1000
15013: PPUSH
15014: CALL_OW 234
// if GetTag ( b ) = 701 then
15018: LD_VAR 0 1
15022: PPUSH
15023: CALL_OW 110
15027: PUSH
15028: LD_INT 701
15030: EQUAL
15031: IFFALSE 15057
// begin SetTag ( b , 0 ) ;
15033: LD_VAR 0 1
15037: PPUSH
15038: LD_INT 0
15040: PPUSH
15041: CALL_OW 109
// SetTag ( un , 0 ) ;
15045: LD_VAR 0 2
15049: PPUSH
15050: LD_INT 0
15052: PPUSH
15053: CALL_OW 109
// end ; end ;
15057: PPOPN 2
15059: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
15060: LD_VAR 0 1
15064: PPUSH
15065: CALL_OW 255
15069: PUSH
15070: LD_INT 3
15072: PUSH
15073: LD_INT 6
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: IN
15080: PUSH
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 263
15090: PUSH
15091: LD_INT 3
15093: EQUAL
15094: AND
15095: PUSH
15096: LD_EXP 7
15100: NOT
15101: AND
15102: IFFALSE 15121
// begin seenComputer := true ;
15104: LD_ADDR_EXP 7
15108: PUSH
15109: LD_INT 1
15111: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
15112: LD_VAR 0 1
15116: PPUSH
15117: CALL 18060 0 1
// end ; end ;
15121: PPOPN 1
15123: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15124: LD_INT 0
15126: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15127: LD_VAR 0 1
15131: PPUSH
15132: LD_VAR 0 2
15136: PPUSH
15137: CALL 36476 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 255
15150: PUSH
15151: LD_INT 3
15153: EQUAL
15154: PUSH
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 263
15164: PUSH
15165: LD_INT 1
15167: EQUAL
15168: AND
15169: PUSH
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 264
15179: PUSH
15180: LD_INT 42
15182: PUSH
15183: LD_INT 43
15185: PUSH
15186: LD_INT 44
15188: PUSH
15189: LD_INT 46
15191: PUSH
15192: LD_INT 45
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: IN
15202: AND
15203: IFFALSE 15233
// begin SetTag ( vehicle , 300 ) ;
15205: LD_VAR 0 1
15209: PPUSH
15210: LD_INT 300
15212: PPUSH
15213: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
15217: LD_ADDR_EXP 34
15221: PUSH
15222: LD_EXP 34
15226: PUSH
15227: LD_VAR 0 1
15231: UNION
15232: ST_TO_ADDR
// end ; end ;
15233: PPOPN 3
15235: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15236: LD_INT 0
15238: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15239: LD_VAR 0 2
15243: PPUSH
15244: LD_VAR 0 3
15248: PPUSH
15249: LD_INT 13
15251: PPUSH
15252: CALL_OW 309
15256: IFFALSE 15387
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15258: LD_ADDR_VAR 0 6
15262: PUSH
15263: LD_INT 22
15265: PUSH
15266: LD_INT 3
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 50
15275: PUSH
15276: EMPTY
15277: LIST
15278: PUSH
15279: LD_INT 34
15281: PUSH
15282: LD_INT 51
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: PPUSH
15294: CALL_OW 69
15298: ST_TO_ADDR
// if not cargo then
15299: LD_VAR 0 6
15303: NOT
15304: IFFALSE 15308
// exit ;
15306: GO 15387
// wait ( 0 0$5 ) ;
15308: LD_INT 175
15310: PPUSH
15311: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15315: LD_VAR 0 6
15319: PUSH
15320: LD_INT 1
15322: ARRAY
15323: PPUSH
15324: LD_INT 28
15326: PPUSH
15327: CALL_OW 296
15331: PUSH
15332: LD_INT 6
15334: LESS
15335: PUSH
15336: LD_VAR 0 6
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PPUSH
15345: CALL_OW 261
15349: PUSH
15350: LD_INT 50
15352: LESS
15353: AND
15354: IFFALSE 15368
// ComMoveUnit ( cargo , ruDep ) ;
15356: LD_VAR 0 6
15360: PPUSH
15361: LD_INT 28
15363: PPUSH
15364: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15368: LD_VAR 0 6
15372: PPUSH
15373: LD_VAR 0 2
15377: PPUSH
15378: LD_VAR 0 3
15382: PPUSH
15383: CALL_OW 177
// end ; end ;
15387: PPOPN 6
15389: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15390: LD_VAR 0 1
15394: PPUSH
15395: CALL_OW 264
15399: PUSH
15400: LD_INT 45
15402: EQUAL
15403: IFFALSE 15420
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15405: LD_ADDR_EXP 11
15409: PUSH
15410: LD_EXP 11
15414: PPUSH
15415: CALL 80858 0 1
15419: ST_TO_ADDR
// end ;
15420: PPOPN 4
15422: END
// on BuildingComplete ( b ) do var i , tmp ;
15423: LD_INT 0
15425: PPUSH
15426: PPUSH
// begin if GetSide ( b ) = 3 then
15427: LD_VAR 0 1
15431: PPUSH
15432: CALL_OW 255
15436: PUSH
15437: LD_INT 3
15439: EQUAL
15440: IFFALSE 15537
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15442: LD_ADDR_EXP 35
15446: PUSH
15447: LD_EXP 35
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: CALL_OW 3
15459: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL_OW 266
15469: PUSH
15470: LD_INT 4
15472: EQUAL
15473: IFFALSE 15484
// ComUpgrade ( b ) ;
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 266
15493: PUSH
15494: LD_INT 32
15496: PUSH
15497: LD_INT 33
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: IN
15504: IFFALSE 15537
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15506: LD_VAR 0 1
15510: PPUSH
15511: LD_INT 46
15513: PUSH
15514: LD_INT 45
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 1
15523: PPUSH
15524: LD_INT 2
15526: PPUSH
15527: CALL_OW 12
15531: ARRAY
15532: PPUSH
15533: CALL_OW 208
// end ; end ; end_of_file
15537: PPOPN 3
15539: END
// export function Action ; var i , tmp , un , inUnit ; begin
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
// Video ( true ) ;
15547: LD_INT 1
15549: PPUSH
15550: CALL 79469 0 1
// invincibleMode := true ;
15554: LD_ADDR_EXP 5
15558: PUSH
15559: LD_INT 1
15561: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15562: LD_INT 50
15564: PPUSH
15565: LD_INT 12
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: LD_INT 56
15573: NEG
15574: PPUSH
15575: CALL 79383 0 4
// CenterOnXY ( 50 , 12 ) ;
15579: LD_INT 50
15581: PPUSH
15582: LD_INT 12
15584: PPUSH
15585: CALL_OW 84
// wait ( 0 0$3 ) ;
15589: LD_INT 105
15591: PPUSH
15592: CALL_OW 67
// PrepareStartRussianAttack ;
15596: CALL 10117 0 0
// CenterOnXY ( 66 , 47 ) ;
15600: LD_INT 66
15602: PPUSH
15603: LD_INT 47
15605: PPUSH
15606: CALL_OW 84
// wait ( 0 0$5 ) ;
15610: LD_INT 175
15612: PPUSH
15613: CALL_OW 67
// case gammaCommander of 1 :
15617: LD_EXP 13
15621: PUSH
15622: LD_INT 1
15624: DOUBLE
15625: EQUAL
15626: IFTRUE 15630
15628: GO 15645
15630: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15631: LD_EXP 16
15635: PPUSH
15636: LD_STRING D1-Don-1
15638: PPUSH
15639: CALL_OW 88
15643: GO 15692
15645: LD_INT 2
15647: DOUBLE
15648: EQUAL
15649: IFTRUE 15653
15651: GO 15668
15653: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15654: LD_EXP 15
15658: PPUSH
15659: LD_STRING D1-Brown-1
15661: PPUSH
15662: CALL_OW 88
15666: GO 15692
15668: LD_INT 3
15670: DOUBLE
15671: EQUAL
15672: IFTRUE 15676
15674: GO 15691
15676: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15677: LD_EXP 25
15681: PPUSH
15682: LD_STRING D1-VanH-1
15684: PPUSH
15685: CALL_OW 88
15689: GO 15692
15691: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15692: LD_ADDR_VAR 0 3
15696: PUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 33
15709: PUSH
15710: LD_INT 2
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 61
15719: PUSH
15720: EMPTY
15721: LIST
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: PPUSH
15728: CALL_OW 69
15732: ST_TO_ADDR
// if tmp then
15733: LD_VAR 0 3
15737: IFFALSE 15754
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15739: LD_VAR 0 3
15743: PPUSH
15744: LD_INT 74
15746: PPUSH
15747: LD_INT 44
15749: PPUSH
15750: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15754: LD_ADDR_VAR 0 3
15758: PUSH
15759: LD_INT 22
15761: PUSH
15762: LD_INT 1
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 25
15771: PUSH
15772: LD_INT 1
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PPUSH
15783: CALL_OW 69
15787: PUSH
15788: LD_EXP 16
15792: PUSH
15793: LD_EXP 15
15797: PUSH
15798: LD_EXP 25
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: DIFF
15808: ST_TO_ADDR
// if tmp then
15809: LD_VAR 0 3
15813: IFFALSE 15891
// for i in tmp do
15815: LD_ADDR_VAR 0 2
15819: PUSH
15820: LD_VAR 0 3
15824: PUSH
15825: FOR_IN
15826: IFFALSE 15889
// begin inUnit := IsInUnit ( i ) ;
15828: LD_ADDR_VAR 0 5
15832: PUSH
15833: LD_VAR 0 2
15837: PPUSH
15838: CALL_OW 310
15842: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15843: LD_VAR 0 5
15847: PUSH
15848: LD_VAR 0 5
15852: PPUSH
15853: CALL_OW 266
15857: PUSH
15858: LD_INT 32
15860: PUSH
15861: LD_INT 31
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: IN
15868: AND
15869: IFFALSE 15887
// tmp := tmp diff i ;
15871: LD_ADDR_VAR 0 3
15875: PUSH
15876: LD_VAR 0 3
15880: PUSH
15881: LD_VAR 0 2
15885: DIFF
15886: ST_TO_ADDR
// end ;
15887: GO 15825
15889: POP
15890: POP
// if tmp then
15891: LD_VAR 0 3
15895: IFFALSE 15985
// begin ComExitAll ( tmp ) ;
15897: LD_VAR 0 3
15901: PPUSH
15902: CALL 79978 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15906: LD_VAR 0 3
15910: PPUSH
15911: LD_INT 74
15913: PPUSH
15914: LD_INT 44
15916: PPUSH
15917: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15921: LD_ADDR_VAR 0 3
15925: PUSH
15926: LD_INT 22
15928: PUSH
15929: LD_INT 1
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 25
15938: PUSH
15939: LD_INT 4
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PPUSH
15950: CALL_OW 69
15954: ST_TO_ADDR
// if tmp then
15955: LD_VAR 0 3
15959: IFFALSE 15985
// begin ComExitAll ( tmp ) ;
15961: LD_VAR 0 3
15965: PPUSH
15966: CALL 79978 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15970: LD_VAR 0 3
15974: PPUSH
15975: LD_INT 66
15977: PPUSH
15978: LD_INT 28
15980: PPUSH
15981: CALL_OW 171
// end ; end ; game_speed := 4 ;
15985: LD_ADDR_OWVAR 65
15989: PUSH
15990: LD_INT 4
15992: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15993: LD_INT 70
15995: PPUSH
15996: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
16000: LD_EXP 29
16004: PPUSH
16005: LD_STRING D1-Har-1
16007: PPUSH
16008: CALL_OW 94
// case gammaCommander of 1 :
16012: LD_EXP 13
16016: PUSH
16017: LD_INT 1
16019: DOUBLE
16020: EQUAL
16021: IFTRUE 16025
16023: GO 16040
16025: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
16026: LD_EXP 16
16030: PPUSH
16031: LD_STRING D1-Don-2
16033: PPUSH
16034: CALL_OW 88
16038: GO 16087
16040: LD_INT 2
16042: DOUBLE
16043: EQUAL
16044: IFTRUE 16048
16046: GO 16063
16048: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
16049: LD_EXP 15
16053: PPUSH
16054: LD_STRING D1-Brown-2
16056: PPUSH
16057: CALL_OW 88
16061: GO 16087
16063: LD_INT 3
16065: DOUBLE
16066: EQUAL
16067: IFTRUE 16071
16069: GO 16086
16071: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
16072: LD_EXP 25
16076: PPUSH
16077: LD_STRING D1-VanH-2
16079: PPUSH
16080: CALL_OW 88
16084: GO 16087
16086: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
16087: LD_EXP 29
16091: PPUSH
16092: LD_STRING D1-Har-2
16094: PPUSH
16095: CALL_OW 94
// invincibleMode := false ;
16099: LD_ADDR_EXP 5
16103: PUSH
16104: LD_INT 0
16106: ST_TO_ADDR
// Video ( false ) ;
16107: LD_INT 0
16109: PPUSH
16110: CALL 79469 0 1
// ChangeMissionObjectives ( M1 ) ;
16114: LD_STRING M1
16116: PPUSH
16117: CALL_OW 337
// SaveForQuickRestart ;
16121: CALL_OW 22
// wait ( 2 2$30 ) ;
16125: LD_INT 5250
16127: PPUSH
16128: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
16132: LD_INT 1
16134: PPUSH
16135: CALL 13100 0 1
// wait ( 4 4$30 ) ;
16139: LD_INT 9450
16141: PPUSH
16142: CALL_OW 67
// if Difficulty > 1 then
16146: LD_OWVAR 67
16150: PUSH
16151: LD_INT 1
16153: GREATER
16154: IFFALSE 16163
// PrepareRussianAttack ( 2 ) ;
16156: LD_INT 2
16158: PPUSH
16159: CALL 13100 0 1
// if Difficulty > 2 then
16163: LD_OWVAR 67
16167: PUSH
16168: LD_INT 2
16170: GREATER
16171: IFFALSE 16330
// begin for i := 1 to 4 do
16173: LD_ADDR_VAR 0 2
16177: PUSH
16178: DOUBLE
16179: LD_INT 1
16181: DEC
16182: ST_TO_ADDR
16183: LD_INT 4
16185: PUSH
16186: FOR_TO
16187: IFFALSE 16272
// begin uc_side := 6 ;
16189: LD_ADDR_OWVAR 20
16193: PUSH
16194: LD_INT 6
16196: ST_TO_ADDR
// uc_nation := 3 ;
16197: LD_ADDR_OWVAR 21
16201: PUSH
16202: LD_INT 3
16204: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
16205: LD_INT 0
16207: PPUSH
16208: LD_INT 7
16210: PPUSH
16211: CALL_OW 381
// un := CreateHuman ;
16215: LD_ADDR_VAR 0 4
16219: PUSH
16220: CALL_OW 44
16224: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16225: LD_VAR 0 4
16229: PPUSH
16230: LD_INT 122
16232: PPUSH
16233: LD_INT 89
16235: PPUSH
16236: LD_INT 3
16238: PPUSH
16239: LD_INT 0
16241: PPUSH
16242: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16246: LD_VAR 0 4
16250: PPUSH
16251: LD_INT 88
16253: PPUSH
16254: LD_INT 42
16256: PPUSH
16257: CALL_OW 114
// AddComHold ( un ) ;
16261: LD_VAR 0 4
16265: PPUSH
16266: CALL_OW 200
// end ;
16270: GO 16186
16272: POP
16273: POP
// PrepareScientist ( false , 6 ) ;
16274: LD_INT 0
16276: PPUSH
16277: LD_INT 6
16279: PPUSH
16280: CALL_OW 384
// un := CreateHuman ;
16284: LD_ADDR_VAR 0 4
16288: PUSH
16289: CALL_OW 44
16293: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16294: LD_VAR 0 4
16298: PPUSH
16299: LD_INT 122
16301: PPUSH
16302: LD_INT 89
16304: PPUSH
16305: LD_INT 3
16307: PPUSH
16308: LD_INT 0
16310: PPUSH
16311: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16315: LD_VAR 0 4
16319: PPUSH
16320: LD_INT 91
16322: PPUSH
16323: LD_INT 48
16325: PPUSH
16326: CALL_OW 111
// end ; end ;
16330: LD_VAR 0 1
16334: RET
// every 0 0$1 trigger invincibleMode do var i ;
16335: LD_EXP 5
16339: IFFALSE 16436
16341: GO 16343
16343: DISABLE
16344: LD_INT 0
16346: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16347: LD_ADDR_VAR 0 1
16351: PUSH
16352: LD_INT 22
16354: PUSH
16355: LD_INT 1
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: LD_INT 21
16367: PUSH
16368: LD_INT 3
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 21
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 3
16392: PUSH
16393: LD_INT 24
16395: PUSH
16396: LD_INT 900
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: PPUSH
16412: CALL_OW 69
16416: PUSH
16417: FOR_IN
16418: IFFALSE 16434
// SetLives ( i , 900 ) ;
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_INT 900
16427: PPUSH
16428: CALL_OW 234
16432: GO 16417
16434: POP
16435: POP
// end ;
16436: PPOPN 1
16438: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16439: LD_OWVAR 1
16443: PUSH
16444: LD_INT 14700
16446: GREATER
16447: IFFALSE 18057
16449: GO 16451
16451: DISABLE
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
// begin PrepareSupportFromDelta ;
16456: CALL 4052 0 0
// deltaSupport := true ;
16460: LD_ADDR_EXP 6
16464: PUSH
16465: LD_INT 1
16467: ST_TO_ADDR
// dialog := false ;
16468: LD_ADDR_VAR 0 1
16472: PUSH
16473: LD_INT 0
16475: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16476: LD_EXP 21
16480: PPUSH
16481: CALL_OW 302
16485: IFFALSE 16507
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: LD_EXP 21
16496: PPUSH
16497: LD_STRING D2-Glad-1
16499: PPUSH
16500: CALL_OW 88
16504: ST_TO_ADDR
16505: GO 16589
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16507: LD_ADDR_VAR 0 1
16511: PUSH
16512: LD_INT 22
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 120
16524: PUSH
16525: LD_INT 107
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 21
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 23
16544: PUSH
16545: LD_INT 1
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: PPUSH
16558: CALL_OW 69
16562: PUSH
16563: LD_EXP 27
16567: PUSH
16568: LD_EXP 26
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: DIFF
16577: PPUSH
16578: LD_STRING D2-Sol1-1
16580: PPUSH
16581: LD_STRING D2-FSol1-1
16583: PPUSH
16584: CALL 20328 0 3
16588: ST_TO_ADDR
// if dialog then
16589: LD_VAR 0 1
16593: IFFALSE 16694
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16595: LD_EXP 16
16599: PPUSH
16600: CALL_OW 302
16604: PUSH
16605: LD_EXP 13
16609: PUSH
16610: LD_INT 1
16612: EQUAL
16613: AND
16614: IFFALSE 16628
// Say ( Donaldson , D2-Don-1 ) ;
16616: LD_EXP 16
16620: PPUSH
16621: LD_STRING D2-Don-1
16623: PPUSH
16624: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16628: LD_EXP 15
16632: PPUSH
16633: CALL_OW 302
16637: PUSH
16638: LD_EXP 13
16642: PUSH
16643: LD_INT 2
16645: EQUAL
16646: AND
16647: IFFALSE 16661
// Say ( Brown , D2-Brown-1 ) ;
16649: LD_EXP 15
16653: PPUSH
16654: LD_STRING D2-Brown-1
16656: PPUSH
16657: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16661: LD_EXP 25
16665: PPUSH
16666: CALL_OW 302
16670: PUSH
16671: LD_EXP 13
16675: PUSH
16676: LD_INT 3
16678: EQUAL
16679: AND
16680: IFFALSE 16694
// Say ( Houten , D2-VanH-1 ) ;
16682: LD_EXP 25
16686: PPUSH
16687: LD_STRING D2-VanH-1
16689: PPUSH
16690: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16694: LD_INT 3
16696: PPUSH
16697: CALL 13100 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16701: LD_STRING 07_time
16703: PPUSH
16704: LD_INT 18900
16706: PPUSH
16707: CALL_OW 30
16711: PUSH
16712: LD_INT 3
16714: DIV
16715: PPUSH
16716: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16720: LD_INT 34
16722: PPUSH
16723: LD_INT 1
16725: PPUSH
16726: CALL_OW 321
16730: PUSH
16731: LD_INT 2
16733: EQUAL
16734: IFFALSE 16743
// SetAchievement ( ACH_HEAVYGUN ) ;
16736: LD_STRING ACH_HEAVYGUN
16738: PPUSH
16739: CALL_OW 543
// PrepareMacmillanSquad ;
16743: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16747: LD_INT 35
16749: PPUSH
16750: CALL_OW 67
// DialogueOn ;
16754: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16758: LD_EXP 14
16762: PPUSH
16763: CALL_OW 87
// dwait ( 0 0$2 ) ;
16767: LD_INT 70
16769: PPUSH
16770: CALL_OW 68
// DialogueOff ;
16774: CALL_OW 7
// wait ( 0 0$10 ) ;
16778: LD_INT 350
16780: PPUSH
16781: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16785: LD_INT 1
16787: PPUSH
16788: CALL_OW 427
// p := 0 ;
16792: LD_ADDR_VAR 0 2
16796: PUSH
16797: LD_INT 0
16799: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16800: LD_INT 35
16802: PPUSH
16803: CALL_OW 67
// p := Inc ( p ) ;
16807: LD_ADDR_VAR 0 2
16811: PUSH
16812: LD_VAR 0 2
16816: PPUSH
16817: CALL 80858 0 1
16821: ST_TO_ADDR
// if p > 300 then
16822: LD_VAR 0 2
16826: PUSH
16827: LD_INT 300
16829: GREATER
16830: IFFALSE 16834
// exit ;
16832: GO 18057
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16834: LD_EXP 14
16838: PPUSH
16839: LD_INT 15
16841: PPUSH
16842: CALL_OW 308
16846: PUSH
16847: LD_EXP 14
16851: PPUSH
16852: CALL_OW 310
16856: PPUSH
16857: LD_INT 15
16859: PPUSH
16860: CALL_OW 308
16864: OR
16865: PUSH
16866: LD_EXP 14
16870: PPUSH
16871: LD_EXP 27
16875: PPUSH
16876: CALL_OW 296
16880: PUSH
16881: LD_INT 10
16883: LESS
16884: OR
16885: PUSH
16886: LD_INT 22
16888: PUSH
16889: LD_INT 1
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: LD_INT 120
16901: PUSH
16902: LD_INT 106
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 120
16911: PUSH
16912: LD_INT 107
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 91
16926: PUSH
16927: LD_EXP 14
16931: PUSH
16932: LD_INT 12
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 69
16949: OR
16950: IFFALSE 16800
// DialogueOn ;
16952: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16956: LD_EXP 14
16960: PPUSH
16961: LD_STRING D3-JMM-1
16963: PPUSH
16964: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16968: LD_EXP 16
16972: PPUSH
16973: CALL_OW 302
16977: PUSH
16978: LD_EXP 13
16982: PUSH
16983: LD_INT 1
16985: EQUAL
16986: AND
16987: IFFALSE 17003
// Say ( Donaldson , D3-Don-1 ) else
16989: LD_EXP 16
16993: PPUSH
16994: LD_STRING D3-Don-1
16996: PPUSH
16997: CALL_OW 88
17001: GO 17099
// begin if gammaCommander = 1 then
17003: LD_EXP 13
17007: PUSH
17008: LD_INT 1
17010: EQUAL
17011: IFFALSE 17099
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
17013: LD_INT 22
17015: PUSH
17016: LD_INT 1
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 21
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 23
17035: PUSH
17036: LD_INT 1
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 120
17045: PUSH
17046: LD_INT 106
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 26
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: PPUSH
17070: CALL_OW 69
17074: PPUSH
17075: LD_STRING D3-Sol1-1
17077: PPUSH
17078: LD_STRING 
17080: PPUSH
17081: CALL 20328 0 3
17085: IFFALSE 17099
// Say ( JMM , D3-JMM-2 ) ;
17087: LD_EXP 14
17091: PPUSH
17092: LD_STRING D3-JMM-2
17094: PPUSH
17095: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17099: LD_EXP 15
17103: PPUSH
17104: CALL_OW 302
17108: PUSH
17109: LD_EXP 13
17113: PUSH
17114: LD_INT 2
17116: EQUAL
17117: AND
17118: IFFALSE 17134
// Say ( Brown , D3-Brown-1 ) else
17120: LD_EXP 15
17124: PPUSH
17125: LD_STRING D3-Brown-1
17127: PPUSH
17128: CALL_OW 88
17132: GO 17230
// begin if gammaCommander = 2 then
17134: LD_EXP 13
17138: PUSH
17139: LD_INT 2
17141: EQUAL
17142: IFFALSE 17230
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
17144: LD_INT 22
17146: PUSH
17147: LD_INT 1
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 21
17156: PUSH
17157: LD_INT 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 23
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 120
17176: PUSH
17177: LD_INT 106
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 26
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: PPUSH
17201: CALL_OW 69
17205: PPUSH
17206: LD_STRING D3-Sol1-1a
17208: PPUSH
17209: LD_STRING 
17211: PPUSH
17212: CALL 20328 0 3
17216: IFFALSE 17230
// Say ( JMM , D3-JMM-2 ) ;
17218: LD_EXP 14
17222: PPUSH
17223: LD_STRING D3-JMM-2
17225: PPUSH
17226: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17230: LD_EXP 25
17234: PPUSH
17235: CALL_OW 302
17239: PUSH
17240: LD_EXP 13
17244: PUSH
17245: LD_INT 3
17247: EQUAL
17248: AND
17249: IFFALSE 17265
// Say ( Houten , D3-VanH-1 ) else
17251: LD_EXP 25
17255: PPUSH
17256: LD_STRING D3-VanH-1
17258: PPUSH
17259: CALL_OW 88
17263: GO 17361
// begin if gammaCommander = 3 then
17265: LD_EXP 13
17269: PUSH
17270: LD_INT 3
17272: EQUAL
17273: IFFALSE 17361
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17275: LD_INT 22
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 21
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 23
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 120
17307: PUSH
17308: LD_INT 106
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 26
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: PPUSH
17332: CALL_OW 69
17336: PPUSH
17337: LD_STRING D3-Sol1-1b
17339: PPUSH
17340: LD_STRING 
17342: PPUSH
17343: CALL 20328 0 3
17347: IFFALSE 17361
// Say ( JMM , D3-JMM-2 ) ;
17349: LD_EXP 14
17353: PPUSH
17354: LD_STRING D3-JMM-2
17356: PPUSH
17357: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17361: LD_EXP 27
17365: PPUSH
17366: CALL_OW 302
17370: IFFALSE 17398
// begin Say ( Joan , D3a-Joan-1 ) ;
17372: LD_EXP 27
17376: PPUSH
17377: LD_STRING D3a-Joan-1
17379: PPUSH
17380: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17384: LD_EXP 14
17388: PPUSH
17389: LD_STRING D3a-JMM-1
17391: PPUSH
17392: CALL_OW 88
// end else
17396: GO 17832
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17398: LD_STRING 06_JoanStatus_1
17400: PPUSH
17401: LD_INT 0
17403: PPUSH
17404: CALL_OW 30
17408: PUSH
17409: LD_INT 1
17411: EQUAL
17412: IFFALSE 17832
// begin Say ( JMM , D3b-JMM-1 ) ;
17414: LD_EXP 14
17418: PPUSH
17419: LD_STRING D3b-JMM-1
17421: PPUSH
17422: CALL_OW 88
// dialog := false ;
17426: LD_ADDR_VAR 0 1
17430: PUSH
17431: LD_INT 0
17433: ST_TO_ADDR
// if gammaCommander = 1 then
17434: LD_EXP 13
17438: PUSH
17439: LD_INT 1
17441: EQUAL
17442: IFFALSE 17553
// if IsOK ( Donaldson ) then
17444: LD_EXP 16
17448: PPUSH
17449: CALL_OW 302
17453: IFFALSE 17475
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17455: LD_ADDR_VAR 0 1
17459: PUSH
17460: LD_EXP 16
17464: PPUSH
17465: LD_STRING D3b-Don-1
17467: PPUSH
17468: CALL_OW 88
17472: ST_TO_ADDR
17473: GO 17553
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17475: LD_ADDR_VAR 0 1
17479: PUSH
17480: LD_INT 22
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 21
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 23
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 120
17512: PUSH
17513: LD_INT 106
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 26
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: PPUSH
17537: CALL_OW 69
17541: PPUSH
17542: LD_STRING D3b-Sol1-1
17544: PPUSH
17545: LD_STRING 
17547: PPUSH
17548: CALL 20328 0 3
17552: ST_TO_ADDR
// if gammaCommander = 2 then
17553: LD_EXP 13
17557: PUSH
17558: LD_INT 2
17560: EQUAL
17561: IFFALSE 17672
// if IsOk ( Brown ) then
17563: LD_EXP 15
17567: PPUSH
17568: CALL_OW 302
17572: IFFALSE 17594
// dialog := Say ( Brown , D3b-Brown-1 ) else
17574: LD_ADDR_VAR 0 1
17578: PUSH
17579: LD_EXP 15
17583: PPUSH
17584: LD_STRING D3b-Brown-1
17586: PPUSH
17587: CALL_OW 88
17591: ST_TO_ADDR
17592: GO 17672
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17594: LD_ADDR_VAR 0 1
17598: PUSH
17599: LD_INT 22
17601: PUSH
17602: LD_INT 1
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 21
17611: PUSH
17612: LD_INT 1
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 23
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 120
17631: PUSH
17632: LD_INT 106
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 26
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: PPUSH
17656: CALL_OW 69
17660: PPUSH
17661: LD_STRING D3b-Sol1-1
17663: PPUSH
17664: LD_STRING 
17666: PPUSH
17667: CALL 20328 0 3
17671: ST_TO_ADDR
// if gammaCommander = 3 then
17672: LD_EXP 13
17676: PUSH
17677: LD_INT 3
17679: EQUAL
17680: IFFALSE 17791
// if IsOk ( Houten ) then
17682: LD_EXP 25
17686: PPUSH
17687: CALL_OW 302
17691: IFFALSE 17713
// dialog := Say ( Houten , D3b-VanH-1 ) else
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: LD_EXP 25
17702: PPUSH
17703: LD_STRING D3b-VanH-1
17705: PPUSH
17706: CALL_OW 88
17710: ST_TO_ADDR
17711: GO 17791
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17713: LD_ADDR_VAR 0 1
17717: PUSH
17718: LD_INT 22
17720: PUSH
17721: LD_INT 1
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 21
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 23
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 120
17750: PUSH
17751: LD_INT 106
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 26
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: PPUSH
17775: CALL_OW 69
17779: PPUSH
17780: LD_STRING D3b-Sol1-1
17782: PPUSH
17783: LD_STRING 
17785: PPUSH
17786: CALL 20328 0 3
17790: ST_TO_ADDR
// if dialog then
17791: LD_VAR 0 1
17795: IFFALSE 17832
// begin Say ( JMM , D3b-JMM-2 ) ;
17797: LD_EXP 14
17801: PPUSH
17802: LD_STRING D3b-JMM-2
17804: PPUSH
17805: CALL_OW 88
// if IsOK ( Lisa ) then
17809: LD_EXP 19
17813: PPUSH
17814: CALL_OW 302
17818: IFFALSE 17832
// Say ( Lisa , D3b-Lisa-2 ) ;
17820: LD_EXP 19
17824: PPUSH
17825: LD_STRING D3b-Lisa-2
17827: PPUSH
17828: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17832: LD_EXP 7
17836: NOT
17837: IFFALSE 17845
// begin DialogueOff ;
17839: CALL_OW 7
// exit ;
17843: GO 18057
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17845: LD_INT 22
17847: PUSH
17848: LD_INT 1
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 21
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 23
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: LD_INT 120
17880: PUSH
17881: LD_INT 106
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 120
17890: PUSH
17891: LD_INT 107
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 26
17905: PUSH
17906: LD_INT 1
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: PPUSH
17925: LD_STRING DCa-Sol1-1
17927: PPUSH
17928: LD_STRING 
17930: PPUSH
17931: CALL 20328 0 3
17935: IFFALSE 17949
// Say ( JMM , DCb-JMM-1 ) ;
17937: LD_EXP 14
17941: PPUSH
17942: LD_STRING DCb-JMM-1
17944: PPUSH
17945: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17949: LD_INT 22
17951: PUSH
17952: LD_INT 1
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 21
17961: PUSH
17962: LD_INT 1
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 23
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 2
17981: PUSH
17982: LD_INT 120
17984: PUSH
17985: LD_INT 106
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 120
17994: PUSH
17995: LD_INT 107
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 26
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: PPUSH
18024: CALL_OW 69
18028: PPUSH
18029: LD_STRING DCb-Sol1-1
18031: PPUSH
18032: LD_STRING 
18034: PPUSH
18035: CALL 20328 0 3
18039: IFFALSE 18053
// Say ( JMM , DCb-JMM-2 ) ;
18041: LD_EXP 14
18045: PPUSH
18046: LD_STRING DCb-JMM-2
18048: PPUSH
18049: CALL_OW 88
// DialogueOff ;
18053: CALL_OW 7
// end ;
18057: PPOPN 2
18059: END
// export function DialogSeenComputer ( un ) ; begin
18060: LD_INT 0
18062: PPUSH
// if jmmArrival then
18063: LD_EXP 8
18067: IFFALSE 18071
// exit ;
18069: GO 18137
// CenterOnUnits ( un ) ;
18071: LD_VAR 0 1
18075: PPUSH
18076: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
18080: LD_INT 22
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 2
18092: PUSH
18093: LD_INT 120
18095: PUSH
18096: LD_INT 106
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 120
18105: PUSH
18106: LD_INT 107
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PPUSH
18122: CALL_OW 69
18126: PPUSH
18127: LD_STRING DC-Sol1-1
18129: PPUSH
18130: LD_STRING DC-FSol1-1
18132: PPUSH
18133: CALL 20328 0 3
// end ;
18137: LD_VAR 0 2
18141: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
18142: LD_EXP 8
18146: PUSH
18147: LD_OWVAR 1
18151: PUSH
18152: LD_INT 48300
18154: GREATEREQUAL
18155: AND
18156: PUSH
18157: LD_EXP 14
18161: PPUSH
18162: CALL_OW 302
18166: AND
18167: IFFALSE 18653
18169: GO 18171
18171: DISABLE
// begin wait ( 2 2$00 ) ;
18172: LD_INT 4200
18174: PPUSH
18175: CALL_OW 67
// DialogueOn ;
18179: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18183: LD_EXP 30
18187: PPUSH
18188: LD_STRING D4-Pow-1
18190: PPUSH
18191: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18195: LD_EXP 14
18199: PPUSH
18200: LD_STRING D4-JMM-1
18202: PPUSH
18203: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18207: LD_EXP 30
18211: PPUSH
18212: LD_STRING D4-Pow-2
18214: PPUSH
18215: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18219: LD_EXP 14
18223: PPUSH
18224: LD_STRING D4-JMM-2
18226: PPUSH
18227: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18231: LD_EXP 30
18235: PPUSH
18236: LD_STRING D4-Pow-3
18238: PPUSH
18239: CALL_OW 94
// DialogueOff ;
18243: CALL_OW 7
// wait ( 1 1$00 ) ;
18247: LD_INT 2100
18249: PPUSH
18250: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18254: LD_INT 1
18256: PPUSH
18257: CALL_OW 427
// wait ( 7 7$30 ) ;
18261: LD_INT 15750
18263: PPUSH
18264: CALL_OW 67
// DialogueOn ;
18268: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18272: LD_EXP 30
18276: PPUSH
18277: LD_STRING D4a-Pow-1
18279: PPUSH
18280: CALL_OW 94
// DialogueOff ;
18284: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18288: LD_INT 1
18290: PPUSH
18291: CALL_OW 427
// SikorskiCounter ;
18295: CALL 20112 0 0
// PrepareSikorsky ;
18299: CALL 6356 0 0
// CenterNowOnUnits ( Sikorski ) ;
18303: LD_EXP 28
18307: PPUSH
18308: CALL_OW 87
// DialogueOn ;
18312: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18316: LD_EXP 28
18320: PPUSH
18321: LD_STRING D5-Sik-1
18323: PPUSH
18324: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18328: LD_INT 11
18330: PPUSH
18331: LD_INT 22
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PPUSH
18341: CALL_OW 70
18345: PUSH
18346: LD_INT 1
18348: GREATER
18349: PUSH
18350: LD_INT 28
18352: PPUSH
18353: CALL_OW 302
18357: NOT
18358: OR
18359: PUSH
18360: LD_INT 28
18362: PPUSH
18363: CALL_OW 255
18367: PUSH
18368: LD_INT 1
18370: EQUAL
18371: OR
18372: IFFALSE 18424
// begin Say ( JMM , D5-JMM-1 ) ;
18374: LD_EXP 14
18378: PPUSH
18379: LD_STRING D5-JMM-1
18381: PPUSH
18382: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18386: LD_EXP 28
18390: PPUSH
18391: LD_STRING D7a-Sik-1
18393: PPUSH
18394: CALL_OW 88
// DialogueOff ;
18398: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18402: LD_STRING M2
18404: PPUSH
18405: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18409: LD_INT 1
18411: PPUSH
18412: CALL_OW 427
// SikorskiAttack ;
18416: CALL 7979 0 0
// exit ;
18420: GO 18653
// end else
18422: GO 18469
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18424: LD_INT 15
18426: PPUSH
18427: LD_INT 81
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PPUSH
18437: CALL_OW 70
18441: IFFALSE 18457
// Say ( JMM , D5-JMM-1b ) else
18443: LD_EXP 14
18447: PPUSH
18448: LD_STRING D5-JMM-1b
18450: PPUSH
18451: CALL_OW 88
18455: GO 18469
// Say ( JMM , D5-JMM-1a ) ;
18457: LD_EXP 14
18461: PPUSH
18462: LD_STRING D5-JMM-1a
18464: PPUSH
18465: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18469: LD_EXP 28
18473: PPUSH
18474: LD_STRING D5-Sik-2
18476: PPUSH
18477: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18481: LD_STRING QSikorski
18483: PPUSH
18484: CALL_OW 97
18488: PUSH
18489: LD_INT 1
18491: DOUBLE
18492: EQUAL
18493: IFTRUE 18497
18495: GO 18520
18497: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18498: LD_EXP 28
18502: PPUSH
18503: LD_STRING D5a-Sik-1
18505: PPUSH
18506: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18510: LD_ADDR_EXP 4
18514: PUSH
18515: LD_INT 2100
18517: ST_TO_ADDR
// end ; 2 :
18518: GO 18607
18520: LD_INT 2
18522: DOUBLE
18523: EQUAL
18524: IFTRUE 18528
18526: GO 18551
18528: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18529: LD_EXP 28
18533: PPUSH
18534: LD_STRING D5b-Sik-1
18536: PPUSH
18537: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18541: LD_ADDR_EXP 4
18545: PUSH
18546: LD_INT 10500
18548: ST_TO_ADDR
// end ; 3 :
18549: GO 18607
18551: LD_INT 3
18553: DOUBLE
18554: EQUAL
18555: IFTRUE 18559
18557: GO 18606
18559: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18560: LD_EXP 28
18564: PPUSH
18565: LD_STRING D5c-Sik-1
18567: PPUSH
18568: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18572: LD_EXP 14
18576: PPUSH
18577: LD_STRING D5c-JMM-1
18579: PPUSH
18580: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18584: LD_EXP 28
18588: PPUSH
18589: LD_STRING D5c-Sik-2
18591: PPUSH
18592: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18596: LD_ADDR_EXP 4
18600: PUSH
18601: LD_INT 10500
18603: ST_TO_ADDR
// end ; end ;
18604: GO 18607
18606: POP
// DialogueOff ;
18607: CALL_OW 7
// SikorskiWaitCounter ;
18611: CALL 20175 0 0
// DialogueOn ;
18615: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18619: LD_EXP 28
18623: PPUSH
18624: LD_STRING D6-Sik-1
18626: PPUSH
18627: CALL_OW 88
// DialogueOff ;
18631: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18635: LD_STRING M2
18637: PPUSH
18638: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18642: LD_INT 1
18644: PPUSH
18645: CALL_OW 427
// SikorskiAttack ;
18649: CALL 7979 0 0
// end ;
18653: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18654: LD_INT 11
18656: PPUSH
18657: LD_INT 22
18659: PUSH
18660: LD_INT 4
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PPUSH
18667: CALL_OW 70
18671: PUSH
18672: LD_INT 2
18674: GREATER
18675: IFFALSE 18868
18677: GO 18679
18679: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18680: LD_EXP 28
18684: PPUSH
18685: LD_STRING D7-Sik-1
18687: PPUSH
18688: CALL_OW 88
// wait ( 0 0$10 ) ;
18692: LD_INT 350
18694: PPUSH
18695: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18699: LD_EXP 14
18703: PPUSH
18704: LD_INT 11
18706: PPUSH
18707: CALL_OW 308
18711: PUSH
18712: LD_EXP 14
18716: PPUSH
18717: CALL_OW 310
18721: PPUSH
18722: LD_INT 11
18724: PPUSH
18725: CALL_OW 308
18729: OR
18730: IFFALSE 18754
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18732: LD_EXP 28
18736: PPUSH
18737: LD_STRING D7a-Sik-1
18739: PPUSH
18740: CALL_OW 88
// sikorskiStatus := 1 ;
18744: LD_ADDR_EXP 9
18748: PUSH
18749: LD_INT 1
18751: ST_TO_ADDR
// end else
18752: GO 18774
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18754: LD_EXP 28
18758: PPUSH
18759: LD_STRING D7b-Sik-1
18761: PPUSH
18762: CALL_OW 88
// sikorskiStatus := 0 ;
18766: LD_ADDR_EXP 9
18770: PUSH
18771: LD_INT 0
18773: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18774: LD_INT 1575
18776: PPUSH
18777: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18781: LD_EXP 14
18785: PPUSH
18786: LD_INT 11
18788: PPUSH
18789: CALL_OW 308
18793: PUSH
18794: LD_EXP 14
18798: PPUSH
18799: CALL_OW 310
18803: PPUSH
18804: LD_INT 11
18806: PPUSH
18807: CALL_OW 308
18811: OR
18812: PUSH
18813: LD_EXP 14
18817: PPUSH
18818: CALL_OW 302
18822: NOT
18823: OR
18824: IFFALSE 18848
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18826: LD_EXP 28
18830: PPUSH
18831: LD_STRING D7a-Sik-1
18833: PPUSH
18834: CALL_OW 88
// sikorskiStatus := 1 ;
18838: LD_ADDR_EXP 9
18842: PUSH
18843: LD_INT 1
18845: ST_TO_ADDR
// end else
18846: GO 18868
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18848: LD_EXP 28
18852: PPUSH
18853: LD_STRING D7b-Sik-1
18855: PPUSH
18856: CALL_OW 88
// sikorskiStatus := 0 ;
18860: LD_ADDR_EXP 9
18864: PUSH
18865: LD_INT 0
18867: ST_TO_ADDR
// end ; end ;
18868: END
// export function SikorskiKilledInAction ; begin
18869: LD_INT 0
18871: PPUSH
// wait ( 0 0$2 ) ;
18872: LD_INT 70
18874: PPUSH
18875: CALL_OW 67
// DialogueOn ;
18879: CALL_OW 6
// dwait ( 0 0$1 ) ;
18883: LD_INT 35
18885: PPUSH
18886: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18890: LD_EXP 30
18894: PPUSH
18895: LD_STRING D8b-Pow-1
18897: PPUSH
18898: CALL_OW 94
// YouLost ( Dismissed ) ;
18902: LD_STRING Dismissed
18904: PPUSH
18905: CALL_OW 104
// DialogueOff ;
18909: CALL_OW 7
// end ;
18913: LD_VAR 0 1
18917: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18918: LD_EXP 8
18922: PUSH
18923: LD_INT 28
18925: PPUSH
18926: CALL_OW 301
18930: AND
18931: PUSH
18932: LD_EXP 32
18936: PPUSH
18937: CALL_OW 301
18941: AND
18942: PUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 3
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 50
18955: PUSH
18956: EMPTY
18957: LIST
18958: PUSH
18959: LD_INT 30
18961: PUSH
18962: LD_INT 5
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: LIST
18973: PPUSH
18974: CALL_OW 69
18978: PUSH
18979: LD_INT 0
18981: EQUAL
18982: AND
18983: IFFALSE 20109
18985: GO 18987
18987: DISABLE
18988: LD_INT 0
18990: PPUSH
18991: PPUSH
18992: PPUSH
// begin Video ( true ) ;
18993: LD_INT 1
18995: PPUSH
18996: CALL 79469 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
19000: LD_INT 104
19002: PPUSH
19003: LD_INT 108
19005: PPUSH
19006: LD_INT 1
19008: PPUSH
19009: LD_INT 36
19011: NEG
19012: PPUSH
19013: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
19017: LD_INT 104
19019: PPUSH
19020: LD_INT 108
19022: PPUSH
19023: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
19027: LD_ADDR_VAR 0 2
19031: PUSH
19032: LD_INT 22
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 21
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: LD_INT 24
19057: PUSH
19058: LD_INT 249
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: LIST
19073: PPUSH
19074: CALL_OW 69
19078: ST_TO_ADDR
// if tmp then
19079: LD_VAR 0 2
19083: IFFALSE 19114
// for i in tmp do
19085: LD_ADDR_VAR 0 1
19089: PUSH
19090: LD_VAR 0 2
19094: PUSH
19095: FOR_IN
19096: IFFALSE 19112
// SetLives ( i , 249 ) ;
19098: LD_VAR 0 1
19102: PPUSH
19103: LD_INT 249
19105: PPUSH
19106: CALL_OW 234
19110: GO 19095
19112: POP
19113: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19114: LD_ADDR_VAR 0 1
19118: PUSH
19119: LD_INT 22
19121: PUSH
19122: LD_INT 3
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 21
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PPUSH
19143: CALL_OW 69
19147: PUSH
19148: FOR_IN
19149: IFFALSE 19192
// begin ComExit ( i ) ;
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL 79895 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
19160: LD_VAR 0 1
19164: PPUSH
19165: LD_INT 131
19167: PPUSH
19168: LD_INT 127
19170: PPUSH
19171: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
19175: LD_VAR 0 1
19179: PPUSH
19180: LD_INT 141
19182: PPUSH
19183: LD_INT 147
19185: PPUSH
19186: CALL_OW 171
// end ;
19190: GO 19148
19192: POP
19193: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
19194: LD_INT 81
19196: PUSH
19197: LD_INT 3
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 3
19206: PUSH
19207: LD_INT 21
19209: PUSH
19210: LD_INT 3
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: PPUSH
19230: LD_INT 131
19232: PPUSH
19233: LD_INT 127
19235: PPUSH
19236: CALL_OW 174
// wait ( 0 0$08 ) ;
19240: LD_INT 280
19242: PPUSH
19243: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19247: LD_INT 22
19249: PUSH
19250: LD_INT 1
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 21
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 23
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 50
19279: PUSH
19280: EMPTY
19281: LIST
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: PPUSH
19294: CALL 43888 0 1
19298: PUSH
19299: LD_INT 7
19301: LESS
19302: IFFALSE 19313
// begin YouLost ( LostVictory ) ;
19304: LD_STRING LostVictory
19306: PPUSH
19307: CALL_OW 104
// exit ;
19311: GO 20109
// end ; DialogueOn ;
19313: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19317: LD_EXP 9
19321: PUSH
19322: LD_INT 1
19324: EQUAL
19325: PUSH
19326: LD_EXP 28
19330: PPUSH
19331: CALL_OW 302
19335: AND
19336: IFFALSE 19350
// Say ( Sikorski , D9-Sik-1 ) ;
19338: LD_EXP 28
19342: PPUSH
19343: LD_STRING D9-Sik-1
19345: PPUSH
19346: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19350: LD_INT 22
19352: PUSH
19353: LD_INT 4
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PPUSH
19360: CALL_OW 69
19364: PUSH
19365: LD_INT 0
19367: EQUAL
19368: PUSH
19369: LD_EXP 3
19373: AND
19374: IFFALSE 19383
// SetAchievement ( ACH_BLITZKRIEG ) ;
19376: LD_STRING ACH_BLITZKRIEG
19378: PPUSH
19379: CALL_OW 543
// if tick <= 45 45$10 then
19383: LD_OWVAR 1
19387: PUSH
19388: LD_INT 94850
19390: LESSEQUAL
19391: IFFALSE 19407
// begin wait ( 3 ) ;
19393: LD_INT 3
19395: PPUSH
19396: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19400: LD_STRING ACH_ASPEED_8
19402: PPUSH
19403: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19407: LD_STRING med1
19409: PPUSH
19410: LD_INT 1
19412: PPUSH
19413: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19417: LD_STRING med2
19419: PPUSH
19420: LD_INT 1
19422: PPUSH
19423: CALL_OW 101
// if sikorskiStatus = 1 then
19427: LD_EXP 9
19431: PUSH
19432: LD_INT 1
19434: EQUAL
19435: IFFALSE 19449
// AddMedal ( perfect , 1 ) else
19437: LD_STRING perfect
19439: PPUSH
19440: LD_INT 1
19442: PPUSH
19443: CALL_OW 101
19447: GO 19460
// AddMedal ( perfect , - 1 ) ;
19449: LD_STRING perfect
19451: PPUSH
19452: LD_INT 1
19454: NEG
19455: PPUSH
19456: CALL_OW 101
// if Difficulty >= 3 then
19460: LD_OWVAR 67
19464: PUSH
19465: LD_INT 3
19467: GREATEREQUAL
19468: IFFALSE 19480
// SetAchievementEX ( ACH_AMER , 8 ) ;
19470: LD_STRING ACH_AMER
19472: PPUSH
19473: LD_INT 8
19475: PPUSH
19476: CALL_OW 564
// GiveMedals ( Main ) ;
19480: LD_STRING Main
19482: PPUSH
19483: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19487: LD_INT 22
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 23
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 21
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: PPUSH
19527: CALL_OW 43
// prefix := 08_ ;
19531: LD_ADDR_VAR 0 3
19535: PUSH
19536: LD_STRING 08_
19538: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19539: LD_EXP 14
19543: PPUSH
19544: LD_VAR 0 3
19548: PUSH
19549: LD_STRING JMM
19551: STR
19552: PPUSH
19553: CALL_OW 38
// if IsLive ( Brown ) then
19557: LD_EXP 15
19561: PPUSH
19562: CALL_OW 300
19566: IFFALSE 19586
// SaveCharacters ( Brown , prefix & Brown ) ;
19568: LD_EXP 15
19572: PPUSH
19573: LD_VAR 0 3
19577: PUSH
19578: LD_STRING Brown
19580: STR
19581: PPUSH
19582: CALL_OW 38
// if IsLive ( Donaldson ) then
19586: LD_EXP 16
19590: PPUSH
19591: CALL_OW 300
19595: IFFALSE 19615
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19597: LD_EXP 16
19601: PPUSH
19602: LD_VAR 0 3
19606: PUSH
19607: LD_STRING Donaldson
19609: STR
19610: PPUSH
19611: CALL_OW 38
// if IsLive ( Bobby ) then
19615: LD_EXP 17
19619: PPUSH
19620: CALL_OW 300
19624: IFFALSE 19644
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19626: LD_EXP 17
19630: PPUSH
19631: LD_VAR 0 3
19635: PUSH
19636: LD_STRING Bobby
19638: STR
19639: PPUSH
19640: CALL_OW 38
// if IsLive ( Cyrus ) then
19644: LD_EXP 18
19648: PPUSH
19649: CALL_OW 300
19653: IFFALSE 19673
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19655: LD_EXP 18
19659: PPUSH
19660: LD_VAR 0 3
19664: PUSH
19665: LD_STRING Cyrus
19667: STR
19668: PPUSH
19669: CALL_OW 38
// if IsLive ( Lisa ) then
19673: LD_EXP 19
19677: PPUSH
19678: CALL_OW 300
19682: IFFALSE 19702
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19684: LD_EXP 19
19688: PPUSH
19689: LD_VAR 0 3
19693: PUSH
19694: LD_STRING Lisa
19696: STR
19697: PPUSH
19698: CALL_OW 38
// if IsLive ( Frank ) then
19702: LD_EXP 20
19706: PPUSH
19707: CALL_OW 300
19711: IFFALSE 19731
// SaveCharacters ( Frank , prefix & Frank ) ;
19713: LD_EXP 20
19717: PPUSH
19718: LD_VAR 0 3
19722: PUSH
19723: LD_STRING Frank
19725: STR
19726: PPUSH
19727: CALL_OW 38
// if IsLive ( Gladstone ) then
19731: LD_EXP 21
19735: PPUSH
19736: CALL_OW 300
19740: IFFALSE 19760
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19742: LD_EXP 21
19746: PPUSH
19747: LD_VAR 0 3
19751: PUSH
19752: LD_STRING Gladstone
19754: STR
19755: PPUSH
19756: CALL_OW 38
// if IsLive ( Kikuchi ) then
19760: LD_EXP 22
19764: PPUSH
19765: CALL_OW 300
19769: IFFALSE 19789
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19771: LD_EXP 22
19775: PPUSH
19776: LD_VAR 0 3
19780: PUSH
19781: LD_STRING Kikuchi
19783: STR
19784: PPUSH
19785: CALL_OW 38
// if IsLive ( Denis ) then
19789: LD_EXP 26
19793: PPUSH
19794: CALL_OW 300
19798: IFFALSE 19818
// SaveCharacters ( Denis , prefix & Denis ) ;
19800: LD_EXP 26
19804: PPUSH
19805: LD_VAR 0 3
19809: PUSH
19810: LD_STRING Denis
19812: STR
19813: PPUSH
19814: CALL_OW 38
// if IsLive ( Joan ) then
19818: LD_EXP 27
19822: PPUSH
19823: CALL_OW 300
19827: IFFALSE 19849
// SaveCharacters ( Joan , prefix & Joan ) else
19829: LD_EXP 27
19833: PPUSH
19834: LD_VAR 0 3
19838: PUSH
19839: LD_STRING Joan
19841: STR
19842: PPUSH
19843: CALL_OW 38
19847: GO 19856
// DeleteCharacters ( Joan ) ;
19849: LD_STRING Joan
19851: PPUSH
19852: CALL_OW 40
// if IsLive ( Khatam ) then
19856: LD_EXP 23
19860: PPUSH
19861: CALL_OW 300
19865: IFFALSE 19885
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19867: LD_EXP 23
19871: PPUSH
19872: LD_VAR 0 3
19876: PUSH
19877: LD_STRING Khatam
19879: STR
19880: PPUSH
19881: CALL_OW 38
// if IsLive ( Houten ) then
19885: LD_EXP 25
19889: PPUSH
19890: CALL_OW 300
19894: IFFALSE 19921
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
19896: LD_STRING enableBioCharacter(BIO_HOUT)
19898: PPUSH
19899: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
19903: LD_EXP 25
19907: PPUSH
19908: LD_VAR 0 3
19912: PUSH
19913: LD_STRING Houten
19915: STR
19916: PPUSH
19917: CALL_OW 38
// end ; if IsLive ( Mike ) then
19921: LD_EXP 24
19925: PPUSH
19926: CALL_OW 300
19930: IFFALSE 19950
// SaveCharacters ( Mike , prefix & Mike ) ;
19932: LD_EXP 24
19936: PPUSH
19937: LD_VAR 0 3
19941: PUSH
19942: LD_STRING Mike
19944: STR
19945: PPUSH
19946: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19950: LD_INT 22
19952: PUSH
19953: LD_INT 1
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 21
19962: PUSH
19963: LD_INT 1
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 23
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: LIST
19984: PPUSH
19985: CALL_OW 69
19989: PUSH
19990: LD_EXP 14
19994: PUSH
19995: LD_EXP 15
19999: PUSH
20000: LD_EXP 16
20004: PUSH
20005: LD_EXP 17
20009: PUSH
20010: LD_EXP 18
20014: PUSH
20015: LD_EXP 19
20019: PUSH
20020: LD_EXP 20
20024: PUSH
20025: LD_EXP 21
20029: PUSH
20030: LD_EXP 22
20034: PUSH
20035: LD_EXP 26
20039: PUSH
20040: LD_EXP 27
20044: PUSH
20045: LD_EXP 25
20049: PUSH
20050: LD_EXP 23
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: DIFF
20070: PPUSH
20071: LD_STRING 08_other_survivors
20073: PPUSH
20074: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
20078: LD_INT 15
20080: PPUSH
20081: CALL 7453 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
20085: LD_EXP 10
20089: NOT
20090: PPUSH
20091: LD_STRING 08_SikorskiStatus
20093: PPUSH
20094: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
20098: LD_STRING enableBioCharacter(BIO_SIK)
20100: PPUSH
20101: CALL_OW 559
// YouWin ;
20105: CALL_OW 103
// end ; end_of_file
20109: PPOPN 3
20111: END
// export function SikorskiCounter ; begin
20112: LD_INT 0
20114: PPUSH
// repeat wait ( 0 0$1 ) ;
20115: LD_INT 35
20117: PPUSH
20118: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
20122: LD_ADDR_OWVAR 47
20126: PUSH
20127: LD_STRING #Am08-2
20129: PUSH
20130: LD_EXP 3
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
20139: LD_ADDR_EXP 3
20143: PUSH
20144: LD_EXP 3
20148: PUSH
20149: LD_INT 35
20151: MINUS
20152: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
20153: LD_EXP 3
20157: PUSH
20158: LD_INT 0
20160: EQUAL
20161: IFFALSE 20115
// display_strings := [ ] ;
20163: LD_ADDR_OWVAR 47
20167: PUSH
20168: EMPTY
20169: ST_TO_ADDR
// end ;
20170: LD_VAR 0 1
20174: RET
// export function SikorskiWaitCounter ; begin
20175: LD_INT 0
20177: PPUSH
// repeat wait ( 0 0$1 ) ;
20178: LD_INT 35
20180: PPUSH
20181: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
20185: LD_ADDR_OWVAR 47
20189: PUSH
20190: LD_STRING #Am08-1
20192: PUSH
20193: LD_EXP 4
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
20202: LD_ADDR_EXP 4
20206: PUSH
20207: LD_EXP 4
20211: PUSH
20212: LD_INT 35
20214: MINUS
20215: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
20216: LD_EXP 4
20220: PUSH
20221: LD_INT 0
20223: EQUAL
20224: IFFALSE 20178
// display_strings := [ ] ;
20226: LD_ADDR_OWVAR 47
20230: PUSH
20231: EMPTY
20232: ST_TO_ADDR
// end ; end_of_file
20233: LD_VAR 0 1
20237: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
20238: LD_EXP 3
20242: IFFALSE 20282
20244: GO 20246
20246: DISABLE
// begin enable ;
20247: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20248: LD_INT 14
20250: PPUSH
20251: CALL_OW 435
20255: PUSH
20256: LD_INT 10
20258: LESS
20259: IFFALSE 20282
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20261: LD_INT 1
20263: PPUSH
20264: LD_INT 5
20266: PPUSH
20267: CALL_OW 12
20271: PPUSH
20272: LD_INT 14
20274: PPUSH
20275: LD_INT 1
20277: PPUSH
20278: CALL_OW 55
// end ;
20282: END
// every 0 0$55 trigger sikorskiArriveCounter do
20283: LD_EXP 3
20287: IFFALSE 20327
20289: GO 20291
20291: DISABLE
// begin enable ;
20292: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20293: LD_INT 13
20295: PPUSH
20296: CALL_OW 435
20300: PUSH
20301: LD_INT 10
20303: LESS
20304: IFFALSE 20327
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20306: LD_INT 1
20308: PPUSH
20309: LD_INT 5
20311: PPUSH
20312: CALL_OW 12
20316: PPUSH
20317: LD_INT 13
20319: PPUSH
20320: LD_INT 1
20322: PPUSH
20323: CALL_OW 55
// end ; end_of_file
20327: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20328: LD_INT 0
20330: PPUSH
20331: PPUSH
// if not units then
20332: LD_VAR 0 1
20336: NOT
20337: IFFALSE 20341
// exit ;
20339: GO 20466
// result := false ;
20341: LD_ADDR_VAR 0 4
20345: PUSH
20346: LD_INT 0
20348: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20349: LD_ADDR_VAR 0 5
20353: PUSH
20354: LD_VAR 0 1
20358: PPUSH
20359: LD_INT 26
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 72
20373: ST_TO_ADDR
// if tmp then
20374: LD_VAR 0 5
20378: IFFALSE 20404
// result := Say ( tmp [ 1 ] , menDialog ) ;
20380: LD_ADDR_VAR 0 4
20384: PUSH
20385: LD_VAR 0 5
20389: PUSH
20390: LD_INT 1
20392: ARRAY
20393: PPUSH
20394: LD_VAR 0 2
20398: PPUSH
20399: CALL_OW 88
20403: ST_TO_ADDR
// if not result then
20404: LD_VAR 0 4
20408: NOT
20409: IFFALSE 20466
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20411: LD_ADDR_VAR 0 5
20415: PUSH
20416: LD_VAR 0 1
20420: PPUSH
20421: LD_INT 26
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: CALL_OW 72
20435: ST_TO_ADDR
// if tmp then
20436: LD_VAR 0 5
20440: IFFALSE 20466
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20442: LD_ADDR_VAR 0 4
20446: PUSH
20447: LD_VAR 0 5
20451: PUSH
20452: LD_INT 1
20454: ARRAY
20455: PPUSH
20456: LD_VAR 0 3
20460: PPUSH
20461: CALL_OW 88
20465: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20466: LD_VAR 0 4
20470: RET
// export globalGameSaveCounter ; every 0 0$1 do
20471: GO 20473
20473: DISABLE
// begin enable ;
20474: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20475: LD_STRING updateTimer(
20477: PUSH
20478: LD_OWVAR 1
20482: STR
20483: PUSH
20484: LD_STRING );
20486: STR
20487: PPUSH
20488: CALL_OW 559
// end ;
20492: END
// every 0 0$1 do
20493: GO 20495
20495: DISABLE
// begin globalGameSaveCounter := 0 ;
20496: LD_ADDR_EXP 37
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20504: LD_STRING setGameSaveCounter(0)
20506: PPUSH
20507: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20511: LD_STRING initStreamRollete();
20513: PPUSH
20514: CALL_OW 559
// InitStreamMode ;
20518: CALL 21861 0 0
// DefineStreamItems ( false ) ;
20522: LD_INT 0
20524: PPUSH
20525: CALL 22325 0 1
// end ;
20529: END
// export function SOS_MapStart ( ) ; begin
20530: LD_INT 0
20532: PPUSH
// if streamModeActive then
20533: LD_EXP 38
20537: IFFALSE 20546
// DefineStreamItems ( true ) ;
20539: LD_INT 1
20541: PPUSH
20542: CALL 22325 0 1
// UpdateLuaVariables ( ) ;
20546: CALL 20563 0 0
// UpdateFactoryWaypoints ( ) ;
20550: CALL 35327 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20554: CALL 35579 0 0
// end ;
20558: LD_VAR 0 1
20562: RET
// function UpdateLuaVariables ( ) ; begin
20563: LD_INT 0
20565: PPUSH
// if globalGameSaveCounter then
20566: LD_EXP 37
20570: IFFALSE 20604
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20572: LD_ADDR_EXP 37
20576: PUSH
20577: LD_EXP 37
20581: PPUSH
20582: CALL 80858 0 1
20586: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20587: LD_STRING setGameSaveCounter(
20589: PUSH
20590: LD_EXP 37
20594: STR
20595: PUSH
20596: LD_STRING )
20598: STR
20599: PPUSH
20600: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20604: LD_STRING setGameDifficulty(
20606: PUSH
20607: LD_OWVAR 67
20611: STR
20612: PUSH
20613: LD_STRING )
20615: STR
20616: PPUSH
20617: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20621: LD_STRING displayDifficulty(
20623: PUSH
20624: LD_OWVAR 67
20628: STR
20629: PUSH
20630: LD_STRING )
20632: STR
20633: PPUSH
20634: CALL_OW 559
// end ;
20638: LD_VAR 0 1
20642: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20643: LD_INT 0
20645: PPUSH
// if p2 = stream_mode then
20646: LD_VAR 0 2
20650: PUSH
20651: LD_INT 100
20653: EQUAL
20654: IFFALSE 21657
// begin if not StreamModeActive then
20656: LD_EXP 38
20660: NOT
20661: IFFALSE 20671
// StreamModeActive := true ;
20663: LD_ADDR_EXP 38
20667: PUSH
20668: LD_INT 1
20670: ST_TO_ADDR
// if p3 = 0 then
20671: LD_VAR 0 3
20675: PUSH
20676: LD_INT 0
20678: EQUAL
20679: IFFALSE 20685
// InitStreamMode ;
20681: CALL 21861 0 0
// if p3 = 1 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 1
20692: EQUAL
20693: IFFALSE 20703
// sRocket := true ;
20695: LD_ADDR_EXP 43
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 2 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 2
20710: EQUAL
20711: IFFALSE 20721
// sSpeed := true ;
20713: LD_ADDR_EXP 42
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 3 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 3
20728: EQUAL
20729: IFFALSE 20739
// sEngine := true ;
20731: LD_ADDR_EXP 44
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 4 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 4
20746: EQUAL
20747: IFFALSE 20757
// sSpec := true ;
20749: LD_ADDR_EXP 41
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 5 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 5
20764: EQUAL
20765: IFFALSE 20775
// sLevel := true ;
20767: LD_ADDR_EXP 45
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 6 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 6
20782: EQUAL
20783: IFFALSE 20793
// sArmoury := true ;
20785: LD_ADDR_EXP 46
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 7 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 7
20800: EQUAL
20801: IFFALSE 20811
// sRadar := true ;
20803: LD_ADDR_EXP 47
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 8 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 8
20818: EQUAL
20819: IFFALSE 20829
// sBunker := true ;
20821: LD_ADDR_EXP 48
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 9 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 9
20836: EQUAL
20837: IFFALSE 20847
// sHack := true ;
20839: LD_ADDR_EXP 49
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 10 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 10
20854: EQUAL
20855: IFFALSE 20865
// sFire := true ;
20857: LD_ADDR_EXP 50
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 11 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 11
20872: EQUAL
20873: IFFALSE 20883
// sRefresh := true ;
20875: LD_ADDR_EXP 51
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 12 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 12
20890: EQUAL
20891: IFFALSE 20901
// sExp := true ;
20893: LD_ADDR_EXP 52
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 13 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 13
20908: EQUAL
20909: IFFALSE 20919
// sDepot := true ;
20911: LD_ADDR_EXP 53
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 14 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 14
20926: EQUAL
20927: IFFALSE 20937
// sFlag := true ;
20929: LD_ADDR_EXP 54
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 15 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 15
20944: EQUAL
20945: IFFALSE 20955
// sKamikadze := true ;
20947: LD_ADDR_EXP 62
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// if p3 = 16 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 16
20962: EQUAL
20963: IFFALSE 20973
// sTroll := true ;
20965: LD_ADDR_EXP 63
20969: PUSH
20970: LD_INT 1
20972: ST_TO_ADDR
// if p3 = 17 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 17
20980: EQUAL
20981: IFFALSE 20991
// sSlow := true ;
20983: LD_ADDR_EXP 64
20987: PUSH
20988: LD_INT 1
20990: ST_TO_ADDR
// if p3 = 18 then
20991: LD_VAR 0 3
20995: PUSH
20996: LD_INT 18
20998: EQUAL
20999: IFFALSE 21009
// sLack := true ;
21001: LD_ADDR_EXP 65
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// if p3 = 19 then
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 19
21016: EQUAL
21017: IFFALSE 21027
// sTank := true ;
21019: LD_ADDR_EXP 67
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if p3 = 20 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_INT 20
21034: EQUAL
21035: IFFALSE 21045
// sRemote := true ;
21037: LD_ADDR_EXP 68
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// if p3 = 21 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 21
21052: EQUAL
21053: IFFALSE 21063
// sPowell := true ;
21055: LD_ADDR_EXP 69
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// if p3 = 22 then
21063: LD_VAR 0 3
21067: PUSH
21068: LD_INT 22
21070: EQUAL
21071: IFFALSE 21081
// sTeleport := true ;
21073: LD_ADDR_EXP 72
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// if p3 = 23 then
21081: LD_VAR 0 3
21085: PUSH
21086: LD_INT 23
21088: EQUAL
21089: IFFALSE 21099
// sOilTower := true ;
21091: LD_ADDR_EXP 74
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// if p3 = 24 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_INT 24
21106: EQUAL
21107: IFFALSE 21117
// sShovel := true ;
21109: LD_ADDR_EXP 75
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// if p3 = 25 then
21117: LD_VAR 0 3
21121: PUSH
21122: LD_INT 25
21124: EQUAL
21125: IFFALSE 21135
// sSheik := true ;
21127: LD_ADDR_EXP 76
21131: PUSH
21132: LD_INT 1
21134: ST_TO_ADDR
// if p3 = 26 then
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 26
21142: EQUAL
21143: IFFALSE 21153
// sEarthquake := true ;
21145: LD_ADDR_EXP 78
21149: PUSH
21150: LD_INT 1
21152: ST_TO_ADDR
// if p3 = 27 then
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 27
21160: EQUAL
21161: IFFALSE 21171
// sAI := true ;
21163: LD_ADDR_EXP 79
21167: PUSH
21168: LD_INT 1
21170: ST_TO_ADDR
// if p3 = 28 then
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 28
21178: EQUAL
21179: IFFALSE 21189
// sCargo := true ;
21181: LD_ADDR_EXP 82
21185: PUSH
21186: LD_INT 1
21188: ST_TO_ADDR
// if p3 = 29 then
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 29
21196: EQUAL
21197: IFFALSE 21207
// sDLaser := true ;
21199: LD_ADDR_EXP 83
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// if p3 = 30 then
21207: LD_VAR 0 3
21211: PUSH
21212: LD_INT 30
21214: EQUAL
21215: IFFALSE 21225
// sExchange := true ;
21217: LD_ADDR_EXP 84
21221: PUSH
21222: LD_INT 1
21224: ST_TO_ADDR
// if p3 = 31 then
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 31
21232: EQUAL
21233: IFFALSE 21243
// sFac := true ;
21235: LD_ADDR_EXP 85
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
// if p3 = 32 then
21243: LD_VAR 0 3
21247: PUSH
21248: LD_INT 32
21250: EQUAL
21251: IFFALSE 21261
// sPower := true ;
21253: LD_ADDR_EXP 86
21257: PUSH
21258: LD_INT 1
21260: ST_TO_ADDR
// if p3 = 33 then
21261: LD_VAR 0 3
21265: PUSH
21266: LD_INT 33
21268: EQUAL
21269: IFFALSE 21279
// sRandom := true ;
21271: LD_ADDR_EXP 87
21275: PUSH
21276: LD_INT 1
21278: ST_TO_ADDR
// if p3 = 34 then
21279: LD_VAR 0 3
21283: PUSH
21284: LD_INT 34
21286: EQUAL
21287: IFFALSE 21297
// sShield := true ;
21289: LD_ADDR_EXP 88
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// if p3 = 35 then
21297: LD_VAR 0 3
21301: PUSH
21302: LD_INT 35
21304: EQUAL
21305: IFFALSE 21315
// sTime := true ;
21307: LD_ADDR_EXP 89
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// if p3 = 36 then
21315: LD_VAR 0 3
21319: PUSH
21320: LD_INT 36
21322: EQUAL
21323: IFFALSE 21333
// sTools := true ;
21325: LD_ADDR_EXP 90
21329: PUSH
21330: LD_INT 1
21332: ST_TO_ADDR
// if p3 = 101 then
21333: LD_VAR 0 3
21337: PUSH
21338: LD_INT 101
21340: EQUAL
21341: IFFALSE 21351
// sSold := true ;
21343: LD_ADDR_EXP 55
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// if p3 = 102 then
21351: LD_VAR 0 3
21355: PUSH
21356: LD_INT 102
21358: EQUAL
21359: IFFALSE 21369
// sDiff := true ;
21361: LD_ADDR_EXP 56
21365: PUSH
21366: LD_INT 1
21368: ST_TO_ADDR
// if p3 = 103 then
21369: LD_VAR 0 3
21373: PUSH
21374: LD_INT 103
21376: EQUAL
21377: IFFALSE 21387
// sFog := true ;
21379: LD_ADDR_EXP 59
21383: PUSH
21384: LD_INT 1
21386: ST_TO_ADDR
// if p3 = 104 then
21387: LD_VAR 0 3
21391: PUSH
21392: LD_INT 104
21394: EQUAL
21395: IFFALSE 21405
// sReset := true ;
21397: LD_ADDR_EXP 60
21401: PUSH
21402: LD_INT 1
21404: ST_TO_ADDR
// if p3 = 105 then
21405: LD_VAR 0 3
21409: PUSH
21410: LD_INT 105
21412: EQUAL
21413: IFFALSE 21423
// sSun := true ;
21415: LD_ADDR_EXP 61
21419: PUSH
21420: LD_INT 1
21422: ST_TO_ADDR
// if p3 = 106 then
21423: LD_VAR 0 3
21427: PUSH
21428: LD_INT 106
21430: EQUAL
21431: IFFALSE 21441
// sTiger := true ;
21433: LD_ADDR_EXP 57
21437: PUSH
21438: LD_INT 1
21440: ST_TO_ADDR
// if p3 = 107 then
21441: LD_VAR 0 3
21445: PUSH
21446: LD_INT 107
21448: EQUAL
21449: IFFALSE 21459
// sBomb := true ;
21451: LD_ADDR_EXP 58
21455: PUSH
21456: LD_INT 1
21458: ST_TO_ADDR
// if p3 = 108 then
21459: LD_VAR 0 3
21463: PUSH
21464: LD_INT 108
21466: EQUAL
21467: IFFALSE 21477
// sWound := true ;
21469: LD_ADDR_EXP 66
21473: PUSH
21474: LD_INT 1
21476: ST_TO_ADDR
// if p3 = 109 then
21477: LD_VAR 0 3
21481: PUSH
21482: LD_INT 109
21484: EQUAL
21485: IFFALSE 21495
// sBetray := true ;
21487: LD_ADDR_EXP 70
21491: PUSH
21492: LD_INT 1
21494: ST_TO_ADDR
// if p3 = 110 then
21495: LD_VAR 0 3
21499: PUSH
21500: LD_INT 110
21502: EQUAL
21503: IFFALSE 21513
// sContamin := true ;
21505: LD_ADDR_EXP 71
21509: PUSH
21510: LD_INT 1
21512: ST_TO_ADDR
// if p3 = 111 then
21513: LD_VAR 0 3
21517: PUSH
21518: LD_INT 111
21520: EQUAL
21521: IFFALSE 21531
// sOil := true ;
21523: LD_ADDR_EXP 73
21527: PUSH
21528: LD_INT 1
21530: ST_TO_ADDR
// if p3 = 112 then
21531: LD_VAR 0 3
21535: PUSH
21536: LD_INT 112
21538: EQUAL
21539: IFFALSE 21549
// sStu := true ;
21541: LD_ADDR_EXP 77
21545: PUSH
21546: LD_INT 1
21548: ST_TO_ADDR
// if p3 = 113 then
21549: LD_VAR 0 3
21553: PUSH
21554: LD_INT 113
21556: EQUAL
21557: IFFALSE 21567
// sBazooka := true ;
21559: LD_ADDR_EXP 80
21563: PUSH
21564: LD_INT 1
21566: ST_TO_ADDR
// if p3 = 114 then
21567: LD_VAR 0 3
21571: PUSH
21572: LD_INT 114
21574: EQUAL
21575: IFFALSE 21585
// sMortar := true ;
21577: LD_ADDR_EXP 81
21581: PUSH
21582: LD_INT 1
21584: ST_TO_ADDR
// if p3 = 115 then
21585: LD_VAR 0 3
21589: PUSH
21590: LD_INT 115
21592: EQUAL
21593: IFFALSE 21603
// sRanger := true ;
21595: LD_ADDR_EXP 91
21599: PUSH
21600: LD_INT 1
21602: ST_TO_ADDR
// if p3 = 116 then
21603: LD_VAR 0 3
21607: PUSH
21608: LD_INT 116
21610: EQUAL
21611: IFFALSE 21621
// sComputer := true ;
21613: LD_ADDR_EXP 92
21617: PUSH
21618: LD_INT 1
21620: ST_TO_ADDR
// if p3 = 117 then
21621: LD_VAR 0 3
21625: PUSH
21626: LD_INT 117
21628: EQUAL
21629: IFFALSE 21639
// s30 := true ;
21631: LD_ADDR_EXP 93
21635: PUSH
21636: LD_INT 1
21638: ST_TO_ADDR
// if p3 = 118 then
21639: LD_VAR 0 3
21643: PUSH
21644: LD_INT 118
21646: EQUAL
21647: IFFALSE 21657
// s60 := true ;
21649: LD_ADDR_EXP 94
21653: PUSH
21654: LD_INT 1
21656: ST_TO_ADDR
// end ; if p2 = hack_mode then
21657: LD_VAR 0 2
21661: PUSH
21662: LD_INT 101
21664: EQUAL
21665: IFFALSE 21793
// begin case p3 of 1 :
21667: LD_VAR 0 3
21671: PUSH
21672: LD_INT 1
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21687
21680: POP
// hHackUnlimitedResources ; 2 :
21681: CALL 33940 0 0
21685: GO 21793
21687: LD_INT 2
21689: DOUBLE
21690: EQUAL
21691: IFTRUE 21695
21693: GO 21702
21695: POP
// hHackSetLevel10 ; 3 :
21696: CALL 34073 0 0
21700: GO 21793
21702: LD_INT 3
21704: DOUBLE
21705: EQUAL
21706: IFTRUE 21710
21708: GO 21717
21710: POP
// hHackSetLevel10YourUnits ; 4 :
21711: CALL 34158 0 0
21715: GO 21793
21717: LD_INT 4
21719: DOUBLE
21720: EQUAL
21721: IFTRUE 21725
21723: GO 21732
21725: POP
// hHackInvincible ; 5 :
21726: CALL 34606 0 0
21730: GO 21793
21732: LD_INT 5
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21747
21740: POP
// hHackInvisible ; 6 :
21741: CALL 34717 0 0
21745: GO 21793
21747: LD_INT 6
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21762
21755: POP
// hHackChangeYourSide ; 7 :
21756: CALL 34774 0 0
21760: GO 21793
21762: LD_INT 7
21764: DOUBLE
21765: EQUAL
21766: IFTRUE 21770
21768: GO 21777
21770: POP
// hHackChangeUnitSide ; 8 :
21771: CALL 34816 0 0
21775: GO 21793
21777: LD_INT 8
21779: DOUBLE
21780: EQUAL
21781: IFTRUE 21785
21783: GO 21792
21785: POP
// hHackFog ; end ;
21786: CALL 34917 0 0
21790: GO 21793
21792: POP
// end ; if p2 = game_save_mode then
21793: LD_VAR 0 2
21797: PUSH
21798: LD_INT 102
21800: EQUAL
21801: IFFALSE 21856
// begin if p3 = 1 then
21803: LD_VAR 0 3
21807: PUSH
21808: LD_INT 1
21810: EQUAL
21811: IFFALSE 21823
// globalGameSaveCounter := p4 ;
21813: LD_ADDR_EXP 37
21817: PUSH
21818: LD_VAR 0 4
21822: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21823: LD_VAR 0 3
21827: PUSH
21828: LD_INT 2
21830: EQUAL
21831: PUSH
21832: LD_EXP 37
21836: AND
21837: IFFALSE 21856
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21839: LD_STRING setGameSaveCounter(
21841: PUSH
21842: LD_EXP 37
21846: STR
21847: PUSH
21848: LD_STRING )
21850: STR
21851: PPUSH
21852: CALL_OW 559
// end ; end ;
21856: LD_VAR 0 7
21860: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21861: LD_INT 0
21863: PPUSH
// streamModeActive := false ;
21864: LD_ADDR_EXP 38
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// normalCounter := 36 ;
21872: LD_ADDR_EXP 39
21876: PUSH
21877: LD_INT 36
21879: ST_TO_ADDR
// hardcoreCounter := 18 ;
21880: LD_ADDR_EXP 40
21884: PUSH
21885: LD_INT 18
21887: ST_TO_ADDR
// sRocket := false ;
21888: LD_ADDR_EXP 43
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// sSpeed := false ;
21896: LD_ADDR_EXP 42
21900: PUSH
21901: LD_INT 0
21903: ST_TO_ADDR
// sEngine := false ;
21904: LD_ADDR_EXP 44
21908: PUSH
21909: LD_INT 0
21911: ST_TO_ADDR
// sSpec := false ;
21912: LD_ADDR_EXP 41
21916: PUSH
21917: LD_INT 0
21919: ST_TO_ADDR
// sLevel := false ;
21920: LD_ADDR_EXP 45
21924: PUSH
21925: LD_INT 0
21927: ST_TO_ADDR
// sArmoury := false ;
21928: LD_ADDR_EXP 46
21932: PUSH
21933: LD_INT 0
21935: ST_TO_ADDR
// sRadar := false ;
21936: LD_ADDR_EXP 47
21940: PUSH
21941: LD_INT 0
21943: ST_TO_ADDR
// sBunker := false ;
21944: LD_ADDR_EXP 48
21948: PUSH
21949: LD_INT 0
21951: ST_TO_ADDR
// sHack := false ;
21952: LD_ADDR_EXP 49
21956: PUSH
21957: LD_INT 0
21959: ST_TO_ADDR
// sFire := false ;
21960: LD_ADDR_EXP 50
21964: PUSH
21965: LD_INT 0
21967: ST_TO_ADDR
// sRefresh := false ;
21968: LD_ADDR_EXP 51
21972: PUSH
21973: LD_INT 0
21975: ST_TO_ADDR
// sExp := false ;
21976: LD_ADDR_EXP 52
21980: PUSH
21981: LD_INT 0
21983: ST_TO_ADDR
// sDepot := false ;
21984: LD_ADDR_EXP 53
21988: PUSH
21989: LD_INT 0
21991: ST_TO_ADDR
// sFlag := false ;
21992: LD_ADDR_EXP 54
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
// sKamikadze := false ;
22000: LD_ADDR_EXP 62
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// sTroll := false ;
22008: LD_ADDR_EXP 63
22012: PUSH
22013: LD_INT 0
22015: ST_TO_ADDR
// sSlow := false ;
22016: LD_ADDR_EXP 64
22020: PUSH
22021: LD_INT 0
22023: ST_TO_ADDR
// sLack := false ;
22024: LD_ADDR_EXP 65
22028: PUSH
22029: LD_INT 0
22031: ST_TO_ADDR
// sTank := false ;
22032: LD_ADDR_EXP 67
22036: PUSH
22037: LD_INT 0
22039: ST_TO_ADDR
// sRemote := false ;
22040: LD_ADDR_EXP 68
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
// sPowell := false ;
22048: LD_ADDR_EXP 69
22052: PUSH
22053: LD_INT 0
22055: ST_TO_ADDR
// sTeleport := false ;
22056: LD_ADDR_EXP 72
22060: PUSH
22061: LD_INT 0
22063: ST_TO_ADDR
// sOilTower := false ;
22064: LD_ADDR_EXP 74
22068: PUSH
22069: LD_INT 0
22071: ST_TO_ADDR
// sShovel := false ;
22072: LD_ADDR_EXP 75
22076: PUSH
22077: LD_INT 0
22079: ST_TO_ADDR
// sSheik := false ;
22080: LD_ADDR_EXP 76
22084: PUSH
22085: LD_INT 0
22087: ST_TO_ADDR
// sEarthquake := false ;
22088: LD_ADDR_EXP 78
22092: PUSH
22093: LD_INT 0
22095: ST_TO_ADDR
// sAI := false ;
22096: LD_ADDR_EXP 79
22100: PUSH
22101: LD_INT 0
22103: ST_TO_ADDR
// sCargo := false ;
22104: LD_ADDR_EXP 82
22108: PUSH
22109: LD_INT 0
22111: ST_TO_ADDR
// sDLaser := false ;
22112: LD_ADDR_EXP 83
22116: PUSH
22117: LD_INT 0
22119: ST_TO_ADDR
// sExchange := false ;
22120: LD_ADDR_EXP 84
22124: PUSH
22125: LD_INT 0
22127: ST_TO_ADDR
// sFac := false ;
22128: LD_ADDR_EXP 85
22132: PUSH
22133: LD_INT 0
22135: ST_TO_ADDR
// sPower := false ;
22136: LD_ADDR_EXP 86
22140: PUSH
22141: LD_INT 0
22143: ST_TO_ADDR
// sRandom := false ;
22144: LD_ADDR_EXP 87
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// sShield := false ;
22152: LD_ADDR_EXP 88
22156: PUSH
22157: LD_INT 0
22159: ST_TO_ADDR
// sTime := false ;
22160: LD_ADDR_EXP 89
22164: PUSH
22165: LD_INT 0
22167: ST_TO_ADDR
// sTools := false ;
22168: LD_ADDR_EXP 90
22172: PUSH
22173: LD_INT 0
22175: ST_TO_ADDR
// sSold := false ;
22176: LD_ADDR_EXP 55
22180: PUSH
22181: LD_INT 0
22183: ST_TO_ADDR
// sDiff := false ;
22184: LD_ADDR_EXP 56
22188: PUSH
22189: LD_INT 0
22191: ST_TO_ADDR
// sFog := false ;
22192: LD_ADDR_EXP 59
22196: PUSH
22197: LD_INT 0
22199: ST_TO_ADDR
// sReset := false ;
22200: LD_ADDR_EXP 60
22204: PUSH
22205: LD_INT 0
22207: ST_TO_ADDR
// sSun := false ;
22208: LD_ADDR_EXP 61
22212: PUSH
22213: LD_INT 0
22215: ST_TO_ADDR
// sTiger := false ;
22216: LD_ADDR_EXP 57
22220: PUSH
22221: LD_INT 0
22223: ST_TO_ADDR
// sBomb := false ;
22224: LD_ADDR_EXP 58
22228: PUSH
22229: LD_INT 0
22231: ST_TO_ADDR
// sWound := false ;
22232: LD_ADDR_EXP 66
22236: PUSH
22237: LD_INT 0
22239: ST_TO_ADDR
// sBetray := false ;
22240: LD_ADDR_EXP 70
22244: PUSH
22245: LD_INT 0
22247: ST_TO_ADDR
// sContamin := false ;
22248: LD_ADDR_EXP 71
22252: PUSH
22253: LD_INT 0
22255: ST_TO_ADDR
// sOil := false ;
22256: LD_ADDR_EXP 73
22260: PUSH
22261: LD_INT 0
22263: ST_TO_ADDR
// sStu := false ;
22264: LD_ADDR_EXP 77
22268: PUSH
22269: LD_INT 0
22271: ST_TO_ADDR
// sBazooka := false ;
22272: LD_ADDR_EXP 80
22276: PUSH
22277: LD_INT 0
22279: ST_TO_ADDR
// sMortar := false ;
22280: LD_ADDR_EXP 81
22284: PUSH
22285: LD_INT 0
22287: ST_TO_ADDR
// sRanger := false ;
22288: LD_ADDR_EXP 91
22292: PUSH
22293: LD_INT 0
22295: ST_TO_ADDR
// sComputer := false ;
22296: LD_ADDR_EXP 92
22300: PUSH
22301: LD_INT 0
22303: ST_TO_ADDR
// s30 := false ;
22304: LD_ADDR_EXP 93
22308: PUSH
22309: LD_INT 0
22311: ST_TO_ADDR
// s60 := false ;
22312: LD_ADDR_EXP 94
22316: PUSH
22317: LD_INT 0
22319: ST_TO_ADDR
// end ;
22320: LD_VAR 0 1
22324: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22325: LD_INT 0
22327: PPUSH
22328: PPUSH
22329: PPUSH
22330: PPUSH
22331: PPUSH
22332: PPUSH
22333: PPUSH
// result := [ ] ;
22334: LD_ADDR_VAR 0 2
22338: PUSH
22339: EMPTY
22340: ST_TO_ADDR
// if campaign_id = 1 then
22341: LD_OWVAR 69
22345: PUSH
22346: LD_INT 1
22348: EQUAL
22349: IFFALSE 25515
// begin case mission_number of 1 :
22351: LD_OWVAR 70
22355: PUSH
22356: LD_INT 1
22358: DOUBLE
22359: EQUAL
22360: IFTRUE 22364
22362: GO 22440
22364: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22365: LD_ADDR_VAR 0 2
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 4
22375: PUSH
22376: LD_INT 11
22378: PUSH
22379: LD_INT 12
22381: PUSH
22382: LD_INT 15
22384: PUSH
22385: LD_INT 16
22387: PUSH
22388: LD_INT 22
22390: PUSH
22391: LD_INT 23
22393: PUSH
22394: LD_INT 26
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 101
22410: PUSH
22411: LD_INT 102
22413: PUSH
22414: LD_INT 106
22416: PUSH
22417: LD_INT 116
22419: PUSH
22420: LD_INT 117
22422: PUSH
22423: LD_INT 118
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: ST_TO_ADDR
22438: GO 25513
22440: LD_INT 2
22442: DOUBLE
22443: EQUAL
22444: IFTRUE 22448
22446: GO 22532
22448: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22449: LD_ADDR_VAR 0 2
22453: PUSH
22454: LD_INT 2
22456: PUSH
22457: LD_INT 4
22459: PUSH
22460: LD_INT 11
22462: PUSH
22463: LD_INT 12
22465: PUSH
22466: LD_INT 15
22468: PUSH
22469: LD_INT 16
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_INT 23
22477: PUSH
22478: LD_INT 26
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 101
22494: PUSH
22495: LD_INT 102
22497: PUSH
22498: LD_INT 105
22500: PUSH
22501: LD_INT 106
22503: PUSH
22504: LD_INT 108
22506: PUSH
22507: LD_INT 116
22509: PUSH
22510: LD_INT 117
22512: PUSH
22513: LD_INT 118
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: ST_TO_ADDR
22530: GO 25513
22532: LD_INT 3
22534: DOUBLE
22535: EQUAL
22536: IFTRUE 22540
22538: GO 22628
22540: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22541: LD_ADDR_VAR 0 2
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: LD_INT 4
22551: PUSH
22552: LD_INT 5
22554: PUSH
22555: LD_INT 11
22557: PUSH
22558: LD_INT 12
22560: PUSH
22561: LD_INT 15
22563: PUSH
22564: LD_INT 16
22566: PUSH
22567: LD_INT 22
22569: PUSH
22570: LD_INT 26
22572: PUSH
22573: LD_INT 36
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 101
22590: PUSH
22591: LD_INT 102
22593: PUSH
22594: LD_INT 105
22596: PUSH
22597: LD_INT 106
22599: PUSH
22600: LD_INT 108
22602: PUSH
22603: LD_INT 116
22605: PUSH
22606: LD_INT 117
22608: PUSH
22609: LD_INT 118
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: ST_TO_ADDR
22626: GO 25513
22628: LD_INT 4
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22732
22636: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 2
22644: PUSH
22645: LD_INT 4
22647: PUSH
22648: LD_INT 5
22650: PUSH
22651: LD_INT 8
22653: PUSH
22654: LD_INT 11
22656: PUSH
22657: LD_INT 12
22659: PUSH
22660: LD_INT 15
22662: PUSH
22663: LD_INT 16
22665: PUSH
22666: LD_INT 22
22668: PUSH
22669: LD_INT 23
22671: PUSH
22672: LD_INT 26
22674: PUSH
22675: LD_INT 36
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 101
22694: PUSH
22695: LD_INT 102
22697: PUSH
22698: LD_INT 105
22700: PUSH
22701: LD_INT 106
22703: PUSH
22704: LD_INT 108
22706: PUSH
22707: LD_INT 116
22709: PUSH
22710: LD_INT 117
22712: PUSH
22713: LD_INT 118
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: ST_TO_ADDR
22730: GO 25513
22732: LD_INT 5
22734: DOUBLE
22735: EQUAL
22736: IFTRUE 22740
22738: GO 22852
22740: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 4
22751: PUSH
22752: LD_INT 5
22754: PUSH
22755: LD_INT 6
22757: PUSH
22758: LD_INT 8
22760: PUSH
22761: LD_INT 11
22763: PUSH
22764: LD_INT 12
22766: PUSH
22767: LD_INT 15
22769: PUSH
22770: LD_INT 16
22772: PUSH
22773: LD_INT 22
22775: PUSH
22776: LD_INT 23
22778: PUSH
22779: LD_INT 25
22781: PUSH
22782: LD_INT 26
22784: PUSH
22785: LD_INT 36
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 101
22806: PUSH
22807: LD_INT 102
22809: PUSH
22810: LD_INT 105
22812: PUSH
22813: LD_INT 106
22815: PUSH
22816: LD_INT 108
22818: PUSH
22819: LD_INT 109
22821: PUSH
22822: LD_INT 112
22824: PUSH
22825: LD_INT 116
22827: PUSH
22828: LD_INT 117
22830: PUSH
22831: LD_INT 118
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: ST_TO_ADDR
22850: GO 25513
22852: LD_INT 6
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 22992
22860: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22861: LD_ADDR_VAR 0 2
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: LD_INT 4
22871: PUSH
22872: LD_INT 5
22874: PUSH
22875: LD_INT 6
22877: PUSH
22878: LD_INT 8
22880: PUSH
22881: LD_INT 11
22883: PUSH
22884: LD_INT 12
22886: PUSH
22887: LD_INT 15
22889: PUSH
22890: LD_INT 16
22892: PUSH
22893: LD_INT 20
22895: PUSH
22896: LD_INT 21
22898: PUSH
22899: LD_INT 22
22901: PUSH
22902: LD_INT 23
22904: PUSH
22905: LD_INT 25
22907: PUSH
22908: LD_INT 26
22910: PUSH
22911: LD_INT 30
22913: PUSH
22914: LD_INT 31
22916: PUSH
22917: LD_INT 32
22919: PUSH
22920: LD_INT 36
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 101
22946: PUSH
22947: LD_INT 102
22949: PUSH
22950: LD_INT 105
22952: PUSH
22953: LD_INT 106
22955: PUSH
22956: LD_INT 108
22958: PUSH
22959: LD_INT 109
22961: PUSH
22962: LD_INT 112
22964: PUSH
22965: LD_INT 116
22967: PUSH
22968: LD_INT 117
22970: PUSH
22971: LD_INT 118
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: ST_TO_ADDR
22990: GO 25513
22992: LD_INT 7
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23112
23000: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23001: LD_ADDR_VAR 0 2
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: LD_INT 4
23011: PUSH
23012: LD_INT 5
23014: PUSH
23015: LD_INT 7
23017: PUSH
23018: LD_INT 11
23020: PUSH
23021: LD_INT 12
23023: PUSH
23024: LD_INT 15
23026: PUSH
23027: LD_INT 16
23029: PUSH
23030: LD_INT 20
23032: PUSH
23033: LD_INT 21
23035: PUSH
23036: LD_INT 22
23038: PUSH
23039: LD_INT 23
23041: PUSH
23042: LD_INT 25
23044: PUSH
23045: LD_INT 26
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 101
23066: PUSH
23067: LD_INT 102
23069: PUSH
23070: LD_INT 103
23072: PUSH
23073: LD_INT 105
23075: PUSH
23076: LD_INT 106
23078: PUSH
23079: LD_INT 108
23081: PUSH
23082: LD_INT 112
23084: PUSH
23085: LD_INT 116
23087: PUSH
23088: LD_INT 117
23090: PUSH
23091: LD_INT 118
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: ST_TO_ADDR
23110: GO 25513
23112: LD_INT 8
23114: DOUBLE
23115: EQUAL
23116: IFTRUE 23120
23118: GO 23260
23120: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23121: LD_ADDR_VAR 0 2
23125: PUSH
23126: LD_INT 2
23128: PUSH
23129: LD_INT 4
23131: PUSH
23132: LD_INT 5
23134: PUSH
23135: LD_INT 6
23137: PUSH
23138: LD_INT 7
23140: PUSH
23141: LD_INT 8
23143: PUSH
23144: LD_INT 11
23146: PUSH
23147: LD_INT 12
23149: PUSH
23150: LD_INT 15
23152: PUSH
23153: LD_INT 16
23155: PUSH
23156: LD_INT 20
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 22
23164: PUSH
23165: LD_INT 23
23167: PUSH
23168: LD_INT 25
23170: PUSH
23171: LD_INT 26
23173: PUSH
23174: LD_INT 30
23176: PUSH
23177: LD_INT 31
23179: PUSH
23180: LD_INT 32
23182: PUSH
23183: LD_INT 36
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 101
23210: PUSH
23211: LD_INT 102
23213: PUSH
23214: LD_INT 103
23216: PUSH
23217: LD_INT 105
23219: PUSH
23220: LD_INT 106
23222: PUSH
23223: LD_INT 108
23225: PUSH
23226: LD_INT 109
23228: PUSH
23229: LD_INT 112
23231: PUSH
23232: LD_INT 116
23234: PUSH
23235: LD_INT 117
23237: PUSH
23238: LD_INT 118
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: ST_TO_ADDR
23258: GO 25513
23260: LD_INT 9
23262: DOUBLE
23263: EQUAL
23264: IFTRUE 23268
23266: GO 23416
23268: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23269: LD_ADDR_VAR 0 2
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: LD_INT 4
23279: PUSH
23280: LD_INT 5
23282: PUSH
23283: LD_INT 6
23285: PUSH
23286: LD_INT 7
23288: PUSH
23289: LD_INT 8
23291: PUSH
23292: LD_INT 11
23294: PUSH
23295: LD_INT 12
23297: PUSH
23298: LD_INT 15
23300: PUSH
23301: LD_INT 16
23303: PUSH
23304: LD_INT 20
23306: PUSH
23307: LD_INT 21
23309: PUSH
23310: LD_INT 22
23312: PUSH
23313: LD_INT 23
23315: PUSH
23316: LD_INT 25
23318: PUSH
23319: LD_INT 26
23321: PUSH
23322: LD_INT 28
23324: PUSH
23325: LD_INT 30
23327: PUSH
23328: LD_INT 31
23330: PUSH
23331: LD_INT 32
23333: PUSH
23334: LD_INT 36
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 101
23362: PUSH
23363: LD_INT 102
23365: PUSH
23366: LD_INT 103
23368: PUSH
23369: LD_INT 105
23371: PUSH
23372: LD_INT 106
23374: PUSH
23375: LD_INT 108
23377: PUSH
23378: LD_INT 109
23380: PUSH
23381: LD_INT 112
23383: PUSH
23384: LD_INT 114
23386: PUSH
23387: LD_INT 116
23389: PUSH
23390: LD_INT 117
23392: PUSH
23393: LD_INT 118
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: ST_TO_ADDR
23414: GO 25513
23416: LD_INT 10
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23620
23424: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23425: LD_ADDR_VAR 0 2
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: LD_INT 4
23435: PUSH
23436: LD_INT 5
23438: PUSH
23439: LD_INT 6
23441: PUSH
23442: LD_INT 7
23444: PUSH
23445: LD_INT 8
23447: PUSH
23448: LD_INT 9
23450: PUSH
23451: LD_INT 10
23453: PUSH
23454: LD_INT 11
23456: PUSH
23457: LD_INT 12
23459: PUSH
23460: LD_INT 13
23462: PUSH
23463: LD_INT 14
23465: PUSH
23466: LD_INT 15
23468: PUSH
23469: LD_INT 16
23471: PUSH
23472: LD_INT 17
23474: PUSH
23475: LD_INT 18
23477: PUSH
23478: LD_INT 19
23480: PUSH
23481: LD_INT 20
23483: PUSH
23484: LD_INT 21
23486: PUSH
23487: LD_INT 22
23489: PUSH
23490: LD_INT 23
23492: PUSH
23493: LD_INT 24
23495: PUSH
23496: LD_INT 25
23498: PUSH
23499: LD_INT 26
23501: PUSH
23502: LD_INT 28
23504: PUSH
23505: LD_INT 30
23507: PUSH
23508: LD_INT 31
23510: PUSH
23511: LD_INT 32
23513: PUSH
23514: LD_INT 36
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 101
23550: PUSH
23551: LD_INT 102
23553: PUSH
23554: LD_INT 103
23556: PUSH
23557: LD_INT 104
23559: PUSH
23560: LD_INT 105
23562: PUSH
23563: LD_INT 106
23565: PUSH
23566: LD_INT 107
23568: PUSH
23569: LD_INT 108
23571: PUSH
23572: LD_INT 109
23574: PUSH
23575: LD_INT 110
23577: PUSH
23578: LD_INT 111
23580: PUSH
23581: LD_INT 112
23583: PUSH
23584: LD_INT 114
23586: PUSH
23587: LD_INT 116
23589: PUSH
23590: LD_INT 117
23592: PUSH
23593: LD_INT 118
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: ST_TO_ADDR
23618: GO 25513
23620: LD_INT 11
23622: DOUBLE
23623: EQUAL
23624: IFTRUE 23628
23626: GO 23832
23628: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: LD_INT 2
23636: PUSH
23637: LD_INT 3
23639: PUSH
23640: LD_INT 4
23642: PUSH
23643: LD_INT 5
23645: PUSH
23646: LD_INT 6
23648: PUSH
23649: LD_INT 7
23651: PUSH
23652: LD_INT 8
23654: PUSH
23655: LD_INT 9
23657: PUSH
23658: LD_INT 10
23660: PUSH
23661: LD_INT 11
23663: PUSH
23664: LD_INT 12
23666: PUSH
23667: LD_INT 13
23669: PUSH
23670: LD_INT 14
23672: PUSH
23673: LD_INT 15
23675: PUSH
23676: LD_INT 16
23678: PUSH
23679: LD_INT 17
23681: PUSH
23682: LD_INT 18
23684: PUSH
23685: LD_INT 19
23687: PUSH
23688: LD_INT 20
23690: PUSH
23691: LD_INT 21
23693: PUSH
23694: LD_INT 22
23696: PUSH
23697: LD_INT 23
23699: PUSH
23700: LD_INT 24
23702: PUSH
23703: LD_INT 25
23705: PUSH
23706: LD_INT 26
23708: PUSH
23709: LD_INT 28
23711: PUSH
23712: LD_INT 30
23714: PUSH
23715: LD_INT 31
23717: PUSH
23718: LD_INT 32
23720: PUSH
23721: LD_INT 34
23723: PUSH
23724: LD_INT 36
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 101
23762: PUSH
23763: LD_INT 102
23765: PUSH
23766: LD_INT 103
23768: PUSH
23769: LD_INT 104
23771: PUSH
23772: LD_INT 105
23774: PUSH
23775: LD_INT 106
23777: PUSH
23778: LD_INT 107
23780: PUSH
23781: LD_INT 108
23783: PUSH
23784: LD_INT 109
23786: PUSH
23787: LD_INT 110
23789: PUSH
23790: LD_INT 111
23792: PUSH
23793: LD_INT 112
23795: PUSH
23796: LD_INT 114
23798: PUSH
23799: LD_INT 116
23801: PUSH
23802: LD_INT 117
23804: PUSH
23805: LD_INT 118
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: ST_TO_ADDR
23830: GO 25513
23832: LD_INT 12
23834: DOUBLE
23835: EQUAL
23836: IFTRUE 23840
23838: GO 24060
23840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23841: LD_ADDR_VAR 0 2
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: LD_INT 3
23854: PUSH
23855: LD_INT 4
23857: PUSH
23858: LD_INT 5
23860: PUSH
23861: LD_INT 6
23863: PUSH
23864: LD_INT 7
23866: PUSH
23867: LD_INT 8
23869: PUSH
23870: LD_INT 9
23872: PUSH
23873: LD_INT 10
23875: PUSH
23876: LD_INT 11
23878: PUSH
23879: LD_INT 12
23881: PUSH
23882: LD_INT 13
23884: PUSH
23885: LD_INT 14
23887: PUSH
23888: LD_INT 15
23890: PUSH
23891: LD_INT 16
23893: PUSH
23894: LD_INT 17
23896: PUSH
23897: LD_INT 18
23899: PUSH
23900: LD_INT 19
23902: PUSH
23903: LD_INT 20
23905: PUSH
23906: LD_INT 21
23908: PUSH
23909: LD_INT 22
23911: PUSH
23912: LD_INT 23
23914: PUSH
23915: LD_INT 24
23917: PUSH
23918: LD_INT 25
23920: PUSH
23921: LD_INT 26
23923: PUSH
23924: LD_INT 27
23926: PUSH
23927: LD_INT 28
23929: PUSH
23930: LD_INT 30
23932: PUSH
23933: LD_INT 31
23935: PUSH
23936: LD_INT 32
23938: PUSH
23939: LD_INT 33
23941: PUSH
23942: LD_INT 34
23944: PUSH
23945: LD_INT 36
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 101
23986: PUSH
23987: LD_INT 102
23989: PUSH
23990: LD_INT 103
23992: PUSH
23993: LD_INT 104
23995: PUSH
23996: LD_INT 105
23998: PUSH
23999: LD_INT 106
24001: PUSH
24002: LD_INT 107
24004: PUSH
24005: LD_INT 108
24007: PUSH
24008: LD_INT 109
24010: PUSH
24011: LD_INT 110
24013: PUSH
24014: LD_INT 111
24016: PUSH
24017: LD_INT 112
24019: PUSH
24020: LD_INT 113
24022: PUSH
24023: LD_INT 114
24025: PUSH
24026: LD_INT 116
24028: PUSH
24029: LD_INT 117
24031: PUSH
24032: LD_INT 118
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: ST_TO_ADDR
24058: GO 25513
24060: LD_INT 13
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24276
24068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24069: LD_ADDR_VAR 0 2
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: LD_INT 3
24082: PUSH
24083: LD_INT 4
24085: PUSH
24086: LD_INT 5
24088: PUSH
24089: LD_INT 8
24091: PUSH
24092: LD_INT 9
24094: PUSH
24095: LD_INT 10
24097: PUSH
24098: LD_INT 11
24100: PUSH
24101: LD_INT 12
24103: PUSH
24104: LD_INT 14
24106: PUSH
24107: LD_INT 15
24109: PUSH
24110: LD_INT 16
24112: PUSH
24113: LD_INT 17
24115: PUSH
24116: LD_INT 18
24118: PUSH
24119: LD_INT 19
24121: PUSH
24122: LD_INT 20
24124: PUSH
24125: LD_INT 21
24127: PUSH
24128: LD_INT 22
24130: PUSH
24131: LD_INT 23
24133: PUSH
24134: LD_INT 24
24136: PUSH
24137: LD_INT 25
24139: PUSH
24140: LD_INT 26
24142: PUSH
24143: LD_INT 27
24145: PUSH
24146: LD_INT 28
24148: PUSH
24149: LD_INT 30
24151: PUSH
24152: LD_INT 31
24154: PUSH
24155: LD_INT 32
24157: PUSH
24158: LD_INT 33
24160: PUSH
24161: LD_INT 34
24163: PUSH
24164: LD_INT 36
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 101
24202: PUSH
24203: LD_INT 102
24205: PUSH
24206: LD_INT 103
24208: PUSH
24209: LD_INT 104
24211: PUSH
24212: LD_INT 105
24214: PUSH
24215: LD_INT 106
24217: PUSH
24218: LD_INT 107
24220: PUSH
24221: LD_INT 108
24223: PUSH
24224: LD_INT 109
24226: PUSH
24227: LD_INT 110
24229: PUSH
24230: LD_INT 111
24232: PUSH
24233: LD_INT 112
24235: PUSH
24236: LD_INT 113
24238: PUSH
24239: LD_INT 114
24241: PUSH
24242: LD_INT 116
24244: PUSH
24245: LD_INT 117
24247: PUSH
24248: LD_INT 118
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: ST_TO_ADDR
24274: GO 25513
24276: LD_INT 14
24278: DOUBLE
24279: EQUAL
24280: IFTRUE 24284
24282: GO 24508
24284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24285: LD_ADDR_VAR 0 2
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: LD_INT 3
24298: PUSH
24299: LD_INT 4
24301: PUSH
24302: LD_INT 5
24304: PUSH
24305: LD_INT 6
24307: PUSH
24308: LD_INT 7
24310: PUSH
24311: LD_INT 8
24313: PUSH
24314: LD_INT 9
24316: PUSH
24317: LD_INT 10
24319: PUSH
24320: LD_INT 11
24322: PUSH
24323: LD_INT 12
24325: PUSH
24326: LD_INT 13
24328: PUSH
24329: LD_INT 14
24331: PUSH
24332: LD_INT 15
24334: PUSH
24335: LD_INT 16
24337: PUSH
24338: LD_INT 17
24340: PUSH
24341: LD_INT 18
24343: PUSH
24344: LD_INT 19
24346: PUSH
24347: LD_INT 20
24349: PUSH
24350: LD_INT 21
24352: PUSH
24353: LD_INT 22
24355: PUSH
24356: LD_INT 23
24358: PUSH
24359: LD_INT 24
24361: PUSH
24362: LD_INT 25
24364: PUSH
24365: LD_INT 26
24367: PUSH
24368: LD_INT 27
24370: PUSH
24371: LD_INT 28
24373: PUSH
24374: LD_INT 29
24376: PUSH
24377: LD_INT 30
24379: PUSH
24380: LD_INT 31
24382: PUSH
24383: LD_INT 32
24385: PUSH
24386: LD_INT 33
24388: PUSH
24389: LD_INT 34
24391: PUSH
24392: LD_INT 36
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 101
24434: PUSH
24435: LD_INT 102
24437: PUSH
24438: LD_INT 103
24440: PUSH
24441: LD_INT 104
24443: PUSH
24444: LD_INT 105
24446: PUSH
24447: LD_INT 106
24449: PUSH
24450: LD_INT 107
24452: PUSH
24453: LD_INT 108
24455: PUSH
24456: LD_INT 109
24458: PUSH
24459: LD_INT 110
24461: PUSH
24462: LD_INT 111
24464: PUSH
24465: LD_INT 112
24467: PUSH
24468: LD_INT 113
24470: PUSH
24471: LD_INT 114
24473: PUSH
24474: LD_INT 116
24476: PUSH
24477: LD_INT 117
24479: PUSH
24480: LD_INT 118
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: ST_TO_ADDR
24506: GO 25513
24508: LD_INT 15
24510: DOUBLE
24511: EQUAL
24512: IFTRUE 24516
24514: GO 24740
24516: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24517: LD_ADDR_VAR 0 2
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: LD_INT 2
24527: PUSH
24528: LD_INT 3
24530: PUSH
24531: LD_INT 4
24533: PUSH
24534: LD_INT 5
24536: PUSH
24537: LD_INT 6
24539: PUSH
24540: LD_INT 7
24542: PUSH
24543: LD_INT 8
24545: PUSH
24546: LD_INT 9
24548: PUSH
24549: LD_INT 10
24551: PUSH
24552: LD_INT 11
24554: PUSH
24555: LD_INT 12
24557: PUSH
24558: LD_INT 13
24560: PUSH
24561: LD_INT 14
24563: PUSH
24564: LD_INT 15
24566: PUSH
24567: LD_INT 16
24569: PUSH
24570: LD_INT 17
24572: PUSH
24573: LD_INT 18
24575: PUSH
24576: LD_INT 19
24578: PUSH
24579: LD_INT 20
24581: PUSH
24582: LD_INT 21
24584: PUSH
24585: LD_INT 22
24587: PUSH
24588: LD_INT 23
24590: PUSH
24591: LD_INT 24
24593: PUSH
24594: LD_INT 25
24596: PUSH
24597: LD_INT 26
24599: PUSH
24600: LD_INT 27
24602: PUSH
24603: LD_INT 28
24605: PUSH
24606: LD_INT 29
24608: PUSH
24609: LD_INT 30
24611: PUSH
24612: LD_INT 31
24614: PUSH
24615: LD_INT 32
24617: PUSH
24618: LD_INT 33
24620: PUSH
24621: LD_INT 34
24623: PUSH
24624: LD_INT 36
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 101
24666: PUSH
24667: LD_INT 102
24669: PUSH
24670: LD_INT 103
24672: PUSH
24673: LD_INT 104
24675: PUSH
24676: LD_INT 105
24678: PUSH
24679: LD_INT 106
24681: PUSH
24682: LD_INT 107
24684: PUSH
24685: LD_INT 108
24687: PUSH
24688: LD_INT 109
24690: PUSH
24691: LD_INT 110
24693: PUSH
24694: LD_INT 111
24696: PUSH
24697: LD_INT 112
24699: PUSH
24700: LD_INT 113
24702: PUSH
24703: LD_INT 114
24705: PUSH
24706: LD_INT 116
24708: PUSH
24709: LD_INT 117
24711: PUSH
24712: LD_INT 118
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: ST_TO_ADDR
24738: GO 25513
24740: LD_INT 16
24742: DOUBLE
24743: EQUAL
24744: IFTRUE 24748
24746: GO 24884
24748: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24749: LD_ADDR_VAR 0 2
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: LD_INT 4
24759: PUSH
24760: LD_INT 5
24762: PUSH
24763: LD_INT 7
24765: PUSH
24766: LD_INT 11
24768: PUSH
24769: LD_INT 12
24771: PUSH
24772: LD_INT 15
24774: PUSH
24775: LD_INT 16
24777: PUSH
24778: LD_INT 20
24780: PUSH
24781: LD_INT 21
24783: PUSH
24784: LD_INT 22
24786: PUSH
24787: LD_INT 23
24789: PUSH
24790: LD_INT 25
24792: PUSH
24793: LD_INT 26
24795: PUSH
24796: LD_INT 30
24798: PUSH
24799: LD_INT 31
24801: PUSH
24802: LD_INT 32
24804: PUSH
24805: LD_INT 33
24807: PUSH
24808: LD_INT 34
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 101
24834: PUSH
24835: LD_INT 102
24837: PUSH
24838: LD_INT 103
24840: PUSH
24841: LD_INT 106
24843: PUSH
24844: LD_INT 108
24846: PUSH
24847: LD_INT 112
24849: PUSH
24850: LD_INT 113
24852: PUSH
24853: LD_INT 114
24855: PUSH
24856: LD_INT 116
24858: PUSH
24859: LD_INT 117
24861: PUSH
24862: LD_INT 118
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: ST_TO_ADDR
24882: GO 25513
24884: LD_INT 17
24886: DOUBLE
24887: EQUAL
24888: IFTRUE 24892
24890: GO 25116
24892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24893: LD_ADDR_VAR 0 2
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: LD_INT 3
24906: PUSH
24907: LD_INT 4
24909: PUSH
24910: LD_INT 5
24912: PUSH
24913: LD_INT 6
24915: PUSH
24916: LD_INT 7
24918: PUSH
24919: LD_INT 8
24921: PUSH
24922: LD_INT 9
24924: PUSH
24925: LD_INT 10
24927: PUSH
24928: LD_INT 11
24930: PUSH
24931: LD_INT 12
24933: PUSH
24934: LD_INT 13
24936: PUSH
24937: LD_INT 14
24939: PUSH
24940: LD_INT 15
24942: PUSH
24943: LD_INT 16
24945: PUSH
24946: LD_INT 17
24948: PUSH
24949: LD_INT 18
24951: PUSH
24952: LD_INT 19
24954: PUSH
24955: LD_INT 20
24957: PUSH
24958: LD_INT 21
24960: PUSH
24961: LD_INT 22
24963: PUSH
24964: LD_INT 23
24966: PUSH
24967: LD_INT 24
24969: PUSH
24970: LD_INT 25
24972: PUSH
24973: LD_INT 26
24975: PUSH
24976: LD_INT 27
24978: PUSH
24979: LD_INT 28
24981: PUSH
24982: LD_INT 29
24984: PUSH
24985: LD_INT 30
24987: PUSH
24988: LD_INT 31
24990: PUSH
24991: LD_INT 32
24993: PUSH
24994: LD_INT 33
24996: PUSH
24997: LD_INT 34
24999: PUSH
25000: LD_INT 36
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 101
25042: PUSH
25043: LD_INT 102
25045: PUSH
25046: LD_INT 103
25048: PUSH
25049: LD_INT 104
25051: PUSH
25052: LD_INT 105
25054: PUSH
25055: LD_INT 106
25057: PUSH
25058: LD_INT 107
25060: PUSH
25061: LD_INT 108
25063: PUSH
25064: LD_INT 109
25066: PUSH
25067: LD_INT 110
25069: PUSH
25070: LD_INT 111
25072: PUSH
25073: LD_INT 112
25075: PUSH
25076: LD_INT 113
25078: PUSH
25079: LD_INT 114
25081: PUSH
25082: LD_INT 116
25084: PUSH
25085: LD_INT 117
25087: PUSH
25088: LD_INT 118
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: ST_TO_ADDR
25114: GO 25513
25116: LD_INT 18
25118: DOUBLE
25119: EQUAL
25120: IFTRUE 25124
25122: GO 25272
25124: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25125: LD_ADDR_VAR 0 2
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 4
25135: PUSH
25136: LD_INT 5
25138: PUSH
25139: LD_INT 7
25141: PUSH
25142: LD_INT 11
25144: PUSH
25145: LD_INT 12
25147: PUSH
25148: LD_INT 15
25150: PUSH
25151: LD_INT 16
25153: PUSH
25154: LD_INT 20
25156: PUSH
25157: LD_INT 21
25159: PUSH
25160: LD_INT 22
25162: PUSH
25163: LD_INT 23
25165: PUSH
25166: LD_INT 25
25168: PUSH
25169: LD_INT 26
25171: PUSH
25172: LD_INT 30
25174: PUSH
25175: LD_INT 31
25177: PUSH
25178: LD_INT 32
25180: PUSH
25181: LD_INT 33
25183: PUSH
25184: LD_INT 34
25186: PUSH
25187: LD_INT 35
25189: PUSH
25190: LD_INT 36
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 101
25218: PUSH
25219: LD_INT 102
25221: PUSH
25222: LD_INT 103
25224: PUSH
25225: LD_INT 106
25227: PUSH
25228: LD_INT 108
25230: PUSH
25231: LD_INT 112
25233: PUSH
25234: LD_INT 113
25236: PUSH
25237: LD_INT 114
25239: PUSH
25240: LD_INT 115
25242: PUSH
25243: LD_INT 116
25245: PUSH
25246: LD_INT 117
25248: PUSH
25249: LD_INT 118
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: ST_TO_ADDR
25270: GO 25513
25272: LD_INT 19
25274: DOUBLE
25275: EQUAL
25276: IFTRUE 25280
25278: GO 25512
25280: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25281: LD_ADDR_VAR 0 2
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: LD_INT 3
25294: PUSH
25295: LD_INT 4
25297: PUSH
25298: LD_INT 5
25300: PUSH
25301: LD_INT 6
25303: PUSH
25304: LD_INT 7
25306: PUSH
25307: LD_INT 8
25309: PUSH
25310: LD_INT 9
25312: PUSH
25313: LD_INT 10
25315: PUSH
25316: LD_INT 11
25318: PUSH
25319: LD_INT 12
25321: PUSH
25322: LD_INT 13
25324: PUSH
25325: LD_INT 14
25327: PUSH
25328: LD_INT 15
25330: PUSH
25331: LD_INT 16
25333: PUSH
25334: LD_INT 17
25336: PUSH
25337: LD_INT 18
25339: PUSH
25340: LD_INT 19
25342: PUSH
25343: LD_INT 20
25345: PUSH
25346: LD_INT 21
25348: PUSH
25349: LD_INT 22
25351: PUSH
25352: LD_INT 23
25354: PUSH
25355: LD_INT 24
25357: PUSH
25358: LD_INT 25
25360: PUSH
25361: LD_INT 26
25363: PUSH
25364: LD_INT 27
25366: PUSH
25367: LD_INT 28
25369: PUSH
25370: LD_INT 29
25372: PUSH
25373: LD_INT 30
25375: PUSH
25376: LD_INT 31
25378: PUSH
25379: LD_INT 32
25381: PUSH
25382: LD_INT 33
25384: PUSH
25385: LD_INT 34
25387: PUSH
25388: LD_INT 35
25390: PUSH
25391: LD_INT 36
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 101
25434: PUSH
25435: LD_INT 102
25437: PUSH
25438: LD_INT 103
25440: PUSH
25441: LD_INT 104
25443: PUSH
25444: LD_INT 105
25446: PUSH
25447: LD_INT 106
25449: PUSH
25450: LD_INT 107
25452: PUSH
25453: LD_INT 108
25455: PUSH
25456: LD_INT 109
25458: PUSH
25459: LD_INT 110
25461: PUSH
25462: LD_INT 111
25464: PUSH
25465: LD_INT 112
25467: PUSH
25468: LD_INT 113
25470: PUSH
25471: LD_INT 114
25473: PUSH
25474: LD_INT 115
25476: PUSH
25477: LD_INT 116
25479: PUSH
25480: LD_INT 117
25482: PUSH
25483: LD_INT 118
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: ST_TO_ADDR
25510: GO 25513
25512: POP
// end else
25513: GO 25744
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25515: LD_ADDR_VAR 0 2
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: LD_INT 4
25531: PUSH
25532: LD_INT 5
25534: PUSH
25535: LD_INT 6
25537: PUSH
25538: LD_INT 7
25540: PUSH
25541: LD_INT 8
25543: PUSH
25544: LD_INT 9
25546: PUSH
25547: LD_INT 10
25549: PUSH
25550: LD_INT 11
25552: PUSH
25553: LD_INT 12
25555: PUSH
25556: LD_INT 13
25558: PUSH
25559: LD_INT 14
25561: PUSH
25562: LD_INT 15
25564: PUSH
25565: LD_INT 16
25567: PUSH
25568: LD_INT 17
25570: PUSH
25571: LD_INT 18
25573: PUSH
25574: LD_INT 19
25576: PUSH
25577: LD_INT 20
25579: PUSH
25580: LD_INT 21
25582: PUSH
25583: LD_INT 22
25585: PUSH
25586: LD_INT 23
25588: PUSH
25589: LD_INT 24
25591: PUSH
25592: LD_INT 25
25594: PUSH
25595: LD_INT 26
25597: PUSH
25598: LD_INT 27
25600: PUSH
25601: LD_INT 28
25603: PUSH
25604: LD_INT 29
25606: PUSH
25607: LD_INT 30
25609: PUSH
25610: LD_INT 31
25612: PUSH
25613: LD_INT 32
25615: PUSH
25616: LD_INT 33
25618: PUSH
25619: LD_INT 34
25621: PUSH
25622: LD_INT 35
25624: PUSH
25625: LD_INT 36
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 101
25668: PUSH
25669: LD_INT 102
25671: PUSH
25672: LD_INT 103
25674: PUSH
25675: LD_INT 104
25677: PUSH
25678: LD_INT 105
25680: PUSH
25681: LD_INT 106
25683: PUSH
25684: LD_INT 107
25686: PUSH
25687: LD_INT 108
25689: PUSH
25690: LD_INT 109
25692: PUSH
25693: LD_INT 110
25695: PUSH
25696: LD_INT 111
25698: PUSH
25699: LD_INT 112
25701: PUSH
25702: LD_INT 113
25704: PUSH
25705: LD_INT 114
25707: PUSH
25708: LD_INT 115
25710: PUSH
25711: LD_INT 116
25713: PUSH
25714: LD_INT 117
25716: PUSH
25717: LD_INT 118
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: ST_TO_ADDR
// if result then
25744: LD_VAR 0 2
25748: IFFALSE 26534
// begin normal :=  ;
25750: LD_ADDR_VAR 0 5
25754: PUSH
25755: LD_STRING 
25757: ST_TO_ADDR
// hardcore :=  ;
25758: LD_ADDR_VAR 0 6
25762: PUSH
25763: LD_STRING 
25765: ST_TO_ADDR
// active :=  ;
25766: LD_ADDR_VAR 0 7
25770: PUSH
25771: LD_STRING 
25773: ST_TO_ADDR
// for i = 1 to normalCounter do
25774: LD_ADDR_VAR 0 8
25778: PUSH
25779: DOUBLE
25780: LD_INT 1
25782: DEC
25783: ST_TO_ADDR
25784: LD_EXP 39
25788: PUSH
25789: FOR_TO
25790: IFFALSE 25891
// begin tmp := 0 ;
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: LD_STRING 0
25799: ST_TO_ADDR
// if result [ 1 ] then
25800: LD_VAR 0 2
25804: PUSH
25805: LD_INT 1
25807: ARRAY
25808: IFFALSE 25873
// if result [ 1 ] [ 1 ] = i then
25810: LD_VAR 0 2
25814: PUSH
25815: LD_INT 1
25817: ARRAY
25818: PUSH
25819: LD_INT 1
25821: ARRAY
25822: PUSH
25823: LD_VAR 0 8
25827: EQUAL
25828: IFFALSE 25873
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25830: LD_ADDR_VAR 0 2
25834: PUSH
25835: LD_VAR 0 2
25839: PPUSH
25840: LD_INT 1
25842: PPUSH
25843: LD_VAR 0 2
25847: PUSH
25848: LD_INT 1
25850: ARRAY
25851: PPUSH
25852: LD_INT 1
25854: PPUSH
25855: CALL_OW 3
25859: PPUSH
25860: CALL_OW 1
25864: ST_TO_ADDR
// tmp := 1 ;
25865: LD_ADDR_VAR 0 3
25869: PUSH
25870: LD_STRING 1
25872: ST_TO_ADDR
// end ; normal := normal & tmp ;
25873: LD_ADDR_VAR 0 5
25877: PUSH
25878: LD_VAR 0 5
25882: PUSH
25883: LD_VAR 0 3
25887: STR
25888: ST_TO_ADDR
// end ;
25889: GO 25789
25891: POP
25892: POP
// for i = 1 to hardcoreCounter do
25893: LD_ADDR_VAR 0 8
25897: PUSH
25898: DOUBLE
25899: LD_INT 1
25901: DEC
25902: ST_TO_ADDR
25903: LD_EXP 40
25907: PUSH
25908: FOR_TO
25909: IFFALSE 26014
// begin tmp := 0 ;
25911: LD_ADDR_VAR 0 3
25915: PUSH
25916: LD_STRING 0
25918: ST_TO_ADDR
// if result [ 2 ] then
25919: LD_VAR 0 2
25923: PUSH
25924: LD_INT 2
25926: ARRAY
25927: IFFALSE 25996
// if result [ 2 ] [ 1 ] = 100 + i then
25929: LD_VAR 0 2
25933: PUSH
25934: LD_INT 2
25936: ARRAY
25937: PUSH
25938: LD_INT 1
25940: ARRAY
25941: PUSH
25942: LD_INT 100
25944: PUSH
25945: LD_VAR 0 8
25949: PLUS
25950: EQUAL
25951: IFFALSE 25996
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25953: LD_ADDR_VAR 0 2
25957: PUSH
25958: LD_VAR 0 2
25962: PPUSH
25963: LD_INT 2
25965: PPUSH
25966: LD_VAR 0 2
25970: PUSH
25971: LD_INT 2
25973: ARRAY
25974: PPUSH
25975: LD_INT 1
25977: PPUSH
25978: CALL_OW 3
25982: PPUSH
25983: CALL_OW 1
25987: ST_TO_ADDR
// tmp := 1 ;
25988: LD_ADDR_VAR 0 3
25992: PUSH
25993: LD_STRING 1
25995: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25996: LD_ADDR_VAR 0 6
26000: PUSH
26001: LD_VAR 0 6
26005: PUSH
26006: LD_VAR 0 3
26010: STR
26011: ST_TO_ADDR
// end ;
26012: GO 25908
26014: POP
26015: POP
// if isGameLoad then
26016: LD_VAR 0 1
26020: IFFALSE 26495
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26022: LD_ADDR_VAR 0 4
26026: PUSH
26027: LD_EXP 43
26031: PUSH
26032: LD_EXP 42
26036: PUSH
26037: LD_EXP 44
26041: PUSH
26042: LD_EXP 41
26046: PUSH
26047: LD_EXP 45
26051: PUSH
26052: LD_EXP 46
26056: PUSH
26057: LD_EXP 47
26061: PUSH
26062: LD_EXP 48
26066: PUSH
26067: LD_EXP 49
26071: PUSH
26072: LD_EXP 50
26076: PUSH
26077: LD_EXP 51
26081: PUSH
26082: LD_EXP 52
26086: PUSH
26087: LD_EXP 53
26091: PUSH
26092: LD_EXP 54
26096: PUSH
26097: LD_EXP 62
26101: PUSH
26102: LD_EXP 63
26106: PUSH
26107: LD_EXP 64
26111: PUSH
26112: LD_EXP 65
26116: PUSH
26117: LD_EXP 67
26121: PUSH
26122: LD_EXP 68
26126: PUSH
26127: LD_EXP 69
26131: PUSH
26132: LD_EXP 72
26136: PUSH
26137: LD_EXP 74
26141: PUSH
26142: LD_EXP 75
26146: PUSH
26147: LD_EXP 76
26151: PUSH
26152: LD_EXP 78
26156: PUSH
26157: LD_EXP 79
26161: PUSH
26162: LD_EXP 82
26166: PUSH
26167: LD_EXP 83
26171: PUSH
26172: LD_EXP 84
26176: PUSH
26177: LD_EXP 85
26181: PUSH
26182: LD_EXP 86
26186: PUSH
26187: LD_EXP 87
26191: PUSH
26192: LD_EXP 88
26196: PUSH
26197: LD_EXP 89
26201: PUSH
26202: LD_EXP 90
26206: PUSH
26207: LD_EXP 55
26211: PUSH
26212: LD_EXP 56
26216: PUSH
26217: LD_EXP 59
26221: PUSH
26222: LD_EXP 60
26226: PUSH
26227: LD_EXP 61
26231: PUSH
26232: LD_EXP 57
26236: PUSH
26237: LD_EXP 58
26241: PUSH
26242: LD_EXP 66
26246: PUSH
26247: LD_EXP 70
26251: PUSH
26252: LD_EXP 71
26256: PUSH
26257: LD_EXP 73
26261: PUSH
26262: LD_EXP 77
26266: PUSH
26267: LD_EXP 80
26271: PUSH
26272: LD_EXP 81
26276: PUSH
26277: LD_EXP 91
26281: PUSH
26282: LD_EXP 92
26286: PUSH
26287: LD_EXP 93
26291: PUSH
26292: LD_EXP 94
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
// tmp :=  ;
26353: LD_ADDR_VAR 0 3
26357: PUSH
26358: LD_STRING 
26360: ST_TO_ADDR
// for i = 1 to normalCounter do
26361: LD_ADDR_VAR 0 8
26365: PUSH
26366: DOUBLE
26367: LD_INT 1
26369: DEC
26370: ST_TO_ADDR
26371: LD_EXP 39
26375: PUSH
26376: FOR_TO
26377: IFFALSE 26413
// begin if flags [ i ] then
26379: LD_VAR 0 4
26383: PUSH
26384: LD_VAR 0 8
26388: ARRAY
26389: IFFALSE 26411
// tmp := tmp & i & ; ;
26391: LD_ADDR_VAR 0 3
26395: PUSH
26396: LD_VAR 0 3
26400: PUSH
26401: LD_VAR 0 8
26405: STR
26406: PUSH
26407: LD_STRING ;
26409: STR
26410: ST_TO_ADDR
// end ;
26411: GO 26376
26413: POP
26414: POP
// for i = 1 to hardcoreCounter do
26415: LD_ADDR_VAR 0 8
26419: PUSH
26420: DOUBLE
26421: LD_INT 1
26423: DEC
26424: ST_TO_ADDR
26425: LD_EXP 40
26429: PUSH
26430: FOR_TO
26431: IFFALSE 26477
// begin if flags [ normalCounter + i ] then
26433: LD_VAR 0 4
26437: PUSH
26438: LD_EXP 39
26442: PUSH
26443: LD_VAR 0 8
26447: PLUS
26448: ARRAY
26449: IFFALSE 26475
// tmp := tmp & ( 100 + i ) & ; ;
26451: LD_ADDR_VAR 0 3
26455: PUSH
26456: LD_VAR 0 3
26460: PUSH
26461: LD_INT 100
26463: PUSH
26464: LD_VAR 0 8
26468: PLUS
26469: STR
26470: PUSH
26471: LD_STRING ;
26473: STR
26474: ST_TO_ADDR
// end ;
26475: GO 26430
26477: POP
26478: POP
// if tmp then
26479: LD_VAR 0 3
26483: IFFALSE 26495
// active := tmp ;
26485: LD_ADDR_VAR 0 7
26489: PUSH
26490: LD_VAR 0 3
26494: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26495: LD_STRING getStreamItemsFromMission("
26497: PUSH
26498: LD_VAR 0 5
26502: STR
26503: PUSH
26504: LD_STRING ","
26506: STR
26507: PUSH
26508: LD_VAR 0 6
26512: STR
26513: PUSH
26514: LD_STRING ","
26516: STR
26517: PUSH
26518: LD_VAR 0 7
26522: STR
26523: PUSH
26524: LD_STRING ")
26526: STR
26527: PPUSH
26528: CALL_OW 559
// end else
26532: GO 26541
// ToLua ( getStreamItemsFromMission("","","") ) ;
26534: LD_STRING getStreamItemsFromMission("","","")
26536: PPUSH
26537: CALL_OW 559
// end ;
26541: LD_VAR 0 2
26545: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26546: LD_EXP 38
26550: PUSH
26551: LD_EXP 43
26555: AND
26556: IFFALSE 26680
26558: GO 26560
26560: DISABLE
26561: LD_INT 0
26563: PPUSH
26564: PPUSH
// begin enable ;
26565: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26566: LD_ADDR_VAR 0 2
26570: PUSH
26571: LD_INT 22
26573: PUSH
26574: LD_OWVAR 2
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 34
26588: PUSH
26589: LD_INT 7
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 34
26598: PUSH
26599: LD_INT 45
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 34
26608: PUSH
26609: LD_INT 28
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 34
26618: PUSH
26619: LD_INT 47
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PPUSH
26637: CALL_OW 69
26641: ST_TO_ADDR
// if not tmp then
26642: LD_VAR 0 2
26646: NOT
26647: IFFALSE 26651
// exit ;
26649: GO 26680
// for i in tmp do
26651: LD_ADDR_VAR 0 1
26655: PUSH
26656: LD_VAR 0 2
26660: PUSH
26661: FOR_IN
26662: IFFALSE 26678
// begin SetLives ( i , 0 ) ;
26664: LD_VAR 0 1
26668: PPUSH
26669: LD_INT 0
26671: PPUSH
26672: CALL_OW 234
// end ;
26676: GO 26661
26678: POP
26679: POP
// end ;
26680: PPOPN 2
26682: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26683: LD_EXP 38
26687: PUSH
26688: LD_EXP 44
26692: AND
26693: IFFALSE 26777
26695: GO 26697
26697: DISABLE
26698: LD_INT 0
26700: PPUSH
26701: PPUSH
// begin enable ;
26702: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26703: LD_ADDR_VAR 0 2
26707: PUSH
26708: LD_INT 22
26710: PUSH
26711: LD_OWVAR 2
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 32
26722: PUSH
26723: LD_INT 3
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PPUSH
26734: CALL_OW 69
26738: ST_TO_ADDR
// if not tmp then
26739: LD_VAR 0 2
26743: NOT
26744: IFFALSE 26748
// exit ;
26746: GO 26777
// for i in tmp do
26748: LD_ADDR_VAR 0 1
26752: PUSH
26753: LD_VAR 0 2
26757: PUSH
26758: FOR_IN
26759: IFFALSE 26775
// begin SetLives ( i , 0 ) ;
26761: LD_VAR 0 1
26765: PPUSH
26766: LD_INT 0
26768: PPUSH
26769: CALL_OW 234
// end ;
26773: GO 26758
26775: POP
26776: POP
// end ;
26777: PPOPN 2
26779: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26780: LD_EXP 38
26784: PUSH
26785: LD_EXP 41
26789: AND
26790: IFFALSE 26883
26792: GO 26794
26794: DISABLE
26795: LD_INT 0
26797: PPUSH
// begin enable ;
26798: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26799: LD_ADDR_VAR 0 1
26803: PUSH
26804: LD_INT 22
26806: PUSH
26807: LD_OWVAR 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: LD_INT 25
26821: PUSH
26822: LD_INT 5
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 25
26831: PUSH
26832: LD_INT 9
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 25
26841: PUSH
26842: LD_INT 8
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PPUSH
26859: CALL_OW 69
26863: PUSH
26864: FOR_IN
26865: IFFALSE 26881
// begin SetClass ( i , 1 ) ;
26867: LD_VAR 0 1
26871: PPUSH
26872: LD_INT 1
26874: PPUSH
26875: CALL_OW 336
// end ;
26879: GO 26864
26881: POP
26882: POP
// end ;
26883: PPOPN 1
26885: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26886: LD_EXP 38
26890: PUSH
26891: LD_EXP 42
26895: AND
26896: PUSH
26897: LD_OWVAR 65
26901: PUSH
26902: LD_INT 7
26904: LESS
26905: AND
26906: IFFALSE 26920
26908: GO 26910
26910: DISABLE
// begin enable ;
26911: ENABLE
// game_speed := 7 ;
26912: LD_ADDR_OWVAR 65
26916: PUSH
26917: LD_INT 7
26919: ST_TO_ADDR
// end ;
26920: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26921: LD_EXP 38
26925: PUSH
26926: LD_EXP 45
26930: AND
26931: IFFALSE 27133
26933: GO 26935
26935: DISABLE
26936: LD_INT 0
26938: PPUSH
26939: PPUSH
26940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: LD_INT 81
26948: PUSH
26949: LD_OWVAR 2
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 21
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 69
26976: ST_TO_ADDR
// if not tmp then
26977: LD_VAR 0 3
26981: NOT
26982: IFFALSE 26986
// exit ;
26984: GO 27133
// if tmp > 5 then
26986: LD_VAR 0 3
26990: PUSH
26991: LD_INT 5
26993: GREATER
26994: IFFALSE 27006
// k := 5 else
26996: LD_ADDR_VAR 0 2
27000: PUSH
27001: LD_INT 5
27003: ST_TO_ADDR
27004: GO 27016
// k := tmp ;
27006: LD_ADDR_VAR 0 2
27010: PUSH
27011: LD_VAR 0 3
27015: ST_TO_ADDR
// for i := 1 to k do
27016: LD_ADDR_VAR 0 1
27020: PUSH
27021: DOUBLE
27022: LD_INT 1
27024: DEC
27025: ST_TO_ADDR
27026: LD_VAR 0 2
27030: PUSH
27031: FOR_TO
27032: IFFALSE 27131
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27034: LD_VAR 0 3
27038: PUSH
27039: LD_VAR 0 1
27043: ARRAY
27044: PPUSH
27045: LD_VAR 0 1
27049: PUSH
27050: LD_INT 4
27052: MOD
27053: PUSH
27054: LD_INT 1
27056: PLUS
27057: PPUSH
27058: CALL_OW 259
27062: PUSH
27063: LD_INT 10
27065: LESS
27066: IFFALSE 27129
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27068: LD_VAR 0 3
27072: PUSH
27073: LD_VAR 0 1
27077: ARRAY
27078: PPUSH
27079: LD_VAR 0 1
27083: PUSH
27084: LD_INT 4
27086: MOD
27087: PUSH
27088: LD_INT 1
27090: PLUS
27091: PPUSH
27092: LD_VAR 0 3
27096: PUSH
27097: LD_VAR 0 1
27101: ARRAY
27102: PPUSH
27103: LD_VAR 0 1
27107: PUSH
27108: LD_INT 4
27110: MOD
27111: PUSH
27112: LD_INT 1
27114: PLUS
27115: PPUSH
27116: CALL_OW 259
27120: PUSH
27121: LD_INT 1
27123: PLUS
27124: PPUSH
27125: CALL_OW 237
27129: GO 27031
27131: POP
27132: POP
// end ;
27133: PPOPN 3
27135: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27136: LD_EXP 38
27140: PUSH
27141: LD_EXP 46
27145: AND
27146: IFFALSE 27166
27148: GO 27150
27150: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27151: LD_INT 4
27153: PPUSH
27154: LD_OWVAR 2
27158: PPUSH
27159: LD_INT 0
27161: PPUSH
27162: CALL_OW 324
27166: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27167: LD_EXP 38
27171: PUSH
27172: LD_EXP 75
27176: AND
27177: IFFALSE 27197
27179: GO 27181
27181: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27182: LD_INT 19
27184: PPUSH
27185: LD_OWVAR 2
27189: PPUSH
27190: LD_INT 0
27192: PPUSH
27193: CALL_OW 324
27197: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27198: LD_EXP 38
27202: PUSH
27203: LD_EXP 47
27207: AND
27208: IFFALSE 27310
27210: GO 27212
27212: DISABLE
27213: LD_INT 0
27215: PPUSH
27216: PPUSH
// begin enable ;
27217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27218: LD_ADDR_VAR 0 2
27222: PUSH
27223: LD_INT 22
27225: PUSH
27226: LD_OWVAR 2
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 34
27240: PUSH
27241: LD_INT 11
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 34
27250: PUSH
27251: LD_INT 30
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PPUSH
27267: CALL_OW 69
27271: ST_TO_ADDR
// if not tmp then
27272: LD_VAR 0 2
27276: NOT
27277: IFFALSE 27281
// exit ;
27279: GO 27310
// for i in tmp do
27281: LD_ADDR_VAR 0 1
27285: PUSH
27286: LD_VAR 0 2
27290: PUSH
27291: FOR_IN
27292: IFFALSE 27308
// begin SetLives ( i , 0 ) ;
27294: LD_VAR 0 1
27298: PPUSH
27299: LD_INT 0
27301: PPUSH
27302: CALL_OW 234
// end ;
27306: GO 27291
27308: POP
27309: POP
// end ;
27310: PPOPN 2
27312: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27313: LD_EXP 38
27317: PUSH
27318: LD_EXP 48
27322: AND
27323: IFFALSE 27343
27325: GO 27327
27327: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27328: LD_INT 32
27330: PPUSH
27331: LD_OWVAR 2
27335: PPUSH
27336: LD_INT 0
27338: PPUSH
27339: CALL_OW 324
27343: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27344: LD_EXP 38
27348: PUSH
27349: LD_EXP 49
27353: AND
27354: IFFALSE 27535
27356: GO 27358
27358: DISABLE
27359: LD_INT 0
27361: PPUSH
27362: PPUSH
27363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27364: LD_ADDR_VAR 0 2
27368: PUSH
27369: LD_INT 22
27371: PUSH
27372: LD_OWVAR 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 33
27383: PUSH
27384: LD_INT 3
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PPUSH
27395: CALL_OW 69
27399: ST_TO_ADDR
// if not tmp then
27400: LD_VAR 0 2
27404: NOT
27405: IFFALSE 27409
// exit ;
27407: GO 27535
// side := 0 ;
27409: LD_ADDR_VAR 0 3
27413: PUSH
27414: LD_INT 0
27416: ST_TO_ADDR
// for i := 1 to 8 do
27417: LD_ADDR_VAR 0 1
27421: PUSH
27422: DOUBLE
27423: LD_INT 1
27425: DEC
27426: ST_TO_ADDR
27427: LD_INT 8
27429: PUSH
27430: FOR_TO
27431: IFFALSE 27479
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27433: LD_OWVAR 2
27437: PUSH
27438: LD_VAR 0 1
27442: NONEQUAL
27443: PUSH
27444: LD_OWVAR 2
27448: PPUSH
27449: LD_VAR 0 1
27453: PPUSH
27454: CALL_OW 81
27458: PUSH
27459: LD_INT 2
27461: EQUAL
27462: AND
27463: IFFALSE 27477
// begin side := i ;
27465: LD_ADDR_VAR 0 3
27469: PUSH
27470: LD_VAR 0 1
27474: ST_TO_ADDR
// break ;
27475: GO 27479
// end ;
27477: GO 27430
27479: POP
27480: POP
// if not side then
27481: LD_VAR 0 3
27485: NOT
27486: IFFALSE 27490
// exit ;
27488: GO 27535
// for i := 1 to tmp do
27490: LD_ADDR_VAR 0 1
27494: PUSH
27495: DOUBLE
27496: LD_INT 1
27498: DEC
27499: ST_TO_ADDR
27500: LD_VAR 0 2
27504: PUSH
27505: FOR_TO
27506: IFFALSE 27533
// if Prob ( 60 ) then
27508: LD_INT 60
27510: PPUSH
27511: CALL_OW 13
27515: IFFALSE 27531
// SetSide ( i , side ) ;
27517: LD_VAR 0 1
27521: PPUSH
27522: LD_VAR 0 3
27526: PPUSH
27527: CALL_OW 235
27531: GO 27505
27533: POP
27534: POP
// end ;
27535: PPOPN 3
27537: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27538: LD_EXP 38
27542: PUSH
27543: LD_EXP 51
27547: AND
27548: IFFALSE 27667
27550: GO 27552
27552: DISABLE
27553: LD_INT 0
27555: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27556: LD_ADDR_VAR 0 1
27560: PUSH
27561: LD_INT 22
27563: PUSH
27564: LD_OWVAR 2
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 21
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 3
27585: PUSH
27586: LD_INT 23
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: PPUSH
27605: CALL_OW 69
27609: PUSH
27610: FOR_IN
27611: IFFALSE 27665
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27613: LD_VAR 0 1
27617: PPUSH
27618: CALL_OW 257
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: LD_INT 3
27631: PUSH
27632: LD_INT 4
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: IN
27641: IFFALSE 27663
// SetClass ( un , rand ( 1 , 4 ) ) ;
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_INT 1
27650: PPUSH
27651: LD_INT 4
27653: PPUSH
27654: CALL_OW 12
27658: PPUSH
27659: CALL_OW 336
27663: GO 27610
27665: POP
27666: POP
// end ;
27667: PPOPN 1
27669: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27670: LD_EXP 38
27674: PUSH
27675: LD_EXP 50
27679: AND
27680: IFFALSE 27759
27682: GO 27684
27684: DISABLE
27685: LD_INT 0
27687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27688: LD_ADDR_VAR 0 1
27692: PUSH
27693: LD_INT 22
27695: PUSH
27696: LD_OWVAR 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 21
27707: PUSH
27708: LD_INT 3
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PPUSH
27719: CALL_OW 69
27723: ST_TO_ADDR
// if not tmp then
27724: LD_VAR 0 1
27728: NOT
27729: IFFALSE 27733
// exit ;
27731: GO 27759
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27733: LD_VAR 0 1
27737: PUSH
27738: LD_INT 1
27740: PPUSH
27741: LD_VAR 0 1
27745: PPUSH
27746: CALL_OW 12
27750: ARRAY
27751: PPUSH
27752: LD_INT 100
27754: PPUSH
27755: CALL_OW 234
// end ;
27759: PPOPN 1
27761: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27762: LD_EXP 38
27766: PUSH
27767: LD_EXP 52
27771: AND
27772: IFFALSE 27870
27774: GO 27776
27776: DISABLE
27777: LD_INT 0
27779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27780: LD_ADDR_VAR 0 1
27784: PUSH
27785: LD_INT 22
27787: PUSH
27788: LD_OWVAR 2
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 21
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PPUSH
27811: CALL_OW 69
27815: ST_TO_ADDR
// if not tmp then
27816: LD_VAR 0 1
27820: NOT
27821: IFFALSE 27825
// exit ;
27823: GO 27870
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27825: LD_VAR 0 1
27829: PUSH
27830: LD_INT 1
27832: PPUSH
27833: LD_VAR 0 1
27837: PPUSH
27838: CALL_OW 12
27842: ARRAY
27843: PPUSH
27844: LD_INT 1
27846: PPUSH
27847: LD_INT 4
27849: PPUSH
27850: CALL_OW 12
27854: PPUSH
27855: LD_INT 3000
27857: PPUSH
27858: LD_INT 9000
27860: PPUSH
27861: CALL_OW 12
27865: PPUSH
27866: CALL_OW 492
// end ;
27870: PPOPN 1
27872: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27873: LD_EXP 38
27877: PUSH
27878: LD_EXP 53
27882: AND
27883: IFFALSE 27903
27885: GO 27887
27887: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27888: LD_INT 1
27890: PPUSH
27891: LD_OWVAR 2
27895: PPUSH
27896: LD_INT 0
27898: PPUSH
27899: CALL_OW 324
27903: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27904: LD_EXP 38
27908: PUSH
27909: LD_EXP 54
27913: AND
27914: IFFALSE 27997
27916: GO 27918
27918: DISABLE
27919: LD_INT 0
27921: PPUSH
27922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27923: LD_ADDR_VAR 0 2
27927: PUSH
27928: LD_INT 22
27930: PUSH
27931: LD_OWVAR 2
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 21
27942: PUSH
27943: LD_INT 3
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PPUSH
27954: CALL_OW 69
27958: ST_TO_ADDR
// if not tmp then
27959: LD_VAR 0 2
27963: NOT
27964: IFFALSE 27968
// exit ;
27966: GO 27997
// for i in tmp do
27968: LD_ADDR_VAR 0 1
27972: PUSH
27973: LD_VAR 0 2
27977: PUSH
27978: FOR_IN
27979: IFFALSE 27995
// SetBLevel ( i , 10 ) ;
27981: LD_VAR 0 1
27985: PPUSH
27986: LD_INT 10
27988: PPUSH
27989: CALL_OW 241
27993: GO 27978
27995: POP
27996: POP
// end ;
27997: PPOPN 2
27999: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28000: LD_EXP 38
28004: PUSH
28005: LD_EXP 55
28009: AND
28010: IFFALSE 28121
28012: GO 28014
28014: DISABLE
28015: LD_INT 0
28017: PPUSH
28018: PPUSH
28019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28020: LD_ADDR_VAR 0 3
28024: PUSH
28025: LD_INT 22
28027: PUSH
28028: LD_OWVAR 2
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 25
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PPUSH
28051: CALL_OW 69
28055: ST_TO_ADDR
// if not tmp then
28056: LD_VAR 0 3
28060: NOT
28061: IFFALSE 28065
// exit ;
28063: GO 28121
// un := tmp [ rand ( 1 , tmp ) ] ;
28065: LD_ADDR_VAR 0 2
28069: PUSH
28070: LD_VAR 0 3
28074: PUSH
28075: LD_INT 1
28077: PPUSH
28078: LD_VAR 0 3
28082: PPUSH
28083: CALL_OW 12
28087: ARRAY
28088: ST_TO_ADDR
// if Crawls ( un ) then
28089: LD_VAR 0 2
28093: PPUSH
28094: CALL_OW 318
28098: IFFALSE 28109
// ComWalk ( un ) ;
28100: LD_VAR 0 2
28104: PPUSH
28105: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28109: LD_VAR 0 2
28113: PPUSH
28114: LD_INT 5
28116: PPUSH
28117: CALL_OW 336
// end ;
28121: PPOPN 3
28123: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28124: LD_EXP 38
28128: PUSH
28129: LD_EXP 56
28133: AND
28134: PUSH
28135: LD_OWVAR 67
28139: PUSH
28140: LD_INT 4
28142: LESS
28143: AND
28144: IFFALSE 28163
28146: GO 28148
28148: DISABLE
// begin Difficulty := Difficulty + 1 ;
28149: LD_ADDR_OWVAR 67
28153: PUSH
28154: LD_OWVAR 67
28158: PUSH
28159: LD_INT 1
28161: PLUS
28162: ST_TO_ADDR
// end ;
28163: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28164: LD_EXP 38
28168: PUSH
28169: LD_EXP 57
28173: AND
28174: IFFALSE 28277
28176: GO 28178
28178: DISABLE
28179: LD_INT 0
28181: PPUSH
// begin for i := 1 to 5 do
28182: LD_ADDR_VAR 0 1
28186: PUSH
28187: DOUBLE
28188: LD_INT 1
28190: DEC
28191: ST_TO_ADDR
28192: LD_INT 5
28194: PUSH
28195: FOR_TO
28196: IFFALSE 28275
// begin uc_nation := nation_nature ;
28198: LD_ADDR_OWVAR 21
28202: PUSH
28203: LD_INT 0
28205: ST_TO_ADDR
// uc_side := 0 ;
28206: LD_ADDR_OWVAR 20
28210: PUSH
28211: LD_INT 0
28213: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28214: LD_ADDR_OWVAR 29
28218: PUSH
28219: LD_INT 12
28221: PUSH
28222: LD_INT 12
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: ST_TO_ADDR
// hc_agressivity := 20 ;
28229: LD_ADDR_OWVAR 35
28233: PUSH
28234: LD_INT 20
28236: ST_TO_ADDR
// hc_class := class_tiger ;
28237: LD_ADDR_OWVAR 28
28241: PUSH
28242: LD_INT 14
28244: ST_TO_ADDR
// hc_gallery :=  ;
28245: LD_ADDR_OWVAR 33
28249: PUSH
28250: LD_STRING 
28252: ST_TO_ADDR
// hc_name :=  ;
28253: LD_ADDR_OWVAR 26
28257: PUSH
28258: LD_STRING 
28260: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28261: CALL_OW 44
28265: PPUSH
28266: LD_INT 0
28268: PPUSH
28269: CALL_OW 51
// end ;
28273: GO 28195
28275: POP
28276: POP
// end ;
28277: PPOPN 1
28279: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28280: LD_EXP 38
28284: PUSH
28285: LD_EXP 58
28289: AND
28290: IFFALSE 28299
28292: GO 28294
28294: DISABLE
// StreamSibBomb ;
28295: CALL 28300 0 0
28299: END
// export function StreamSibBomb ; var i , x , y ; begin
28300: LD_INT 0
28302: PPUSH
28303: PPUSH
28304: PPUSH
28305: PPUSH
// result := false ;
28306: LD_ADDR_VAR 0 1
28310: PUSH
28311: LD_INT 0
28313: ST_TO_ADDR
// for i := 1 to 16 do
28314: LD_ADDR_VAR 0 2
28318: PUSH
28319: DOUBLE
28320: LD_INT 1
28322: DEC
28323: ST_TO_ADDR
28324: LD_INT 16
28326: PUSH
28327: FOR_TO
28328: IFFALSE 28527
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28330: LD_ADDR_VAR 0 3
28334: PUSH
28335: LD_INT 10
28337: PUSH
28338: LD_INT 20
28340: PUSH
28341: LD_INT 30
28343: PUSH
28344: LD_INT 40
28346: PUSH
28347: LD_INT 50
28349: PUSH
28350: LD_INT 60
28352: PUSH
28353: LD_INT 70
28355: PUSH
28356: LD_INT 80
28358: PUSH
28359: LD_INT 90
28361: PUSH
28362: LD_INT 100
28364: PUSH
28365: LD_INT 110
28367: PUSH
28368: LD_INT 120
28370: PUSH
28371: LD_INT 130
28373: PUSH
28374: LD_INT 140
28376: PUSH
28377: LD_INT 150
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: PPUSH
28400: LD_INT 15
28402: PPUSH
28403: CALL_OW 12
28407: ARRAY
28408: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28409: LD_ADDR_VAR 0 4
28413: PUSH
28414: LD_INT 10
28416: PUSH
28417: LD_INT 20
28419: PUSH
28420: LD_INT 30
28422: PUSH
28423: LD_INT 40
28425: PUSH
28426: LD_INT 50
28428: PUSH
28429: LD_INT 60
28431: PUSH
28432: LD_INT 70
28434: PUSH
28435: LD_INT 80
28437: PUSH
28438: LD_INT 90
28440: PUSH
28441: LD_INT 100
28443: PUSH
28444: LD_INT 110
28446: PUSH
28447: LD_INT 120
28449: PUSH
28450: LD_INT 130
28452: PUSH
28453: LD_INT 140
28455: PUSH
28456: LD_INT 150
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: PPUSH
28479: LD_INT 15
28481: PPUSH
28482: CALL_OW 12
28486: ARRAY
28487: ST_TO_ADDR
// if ValidHex ( x , y ) then
28488: LD_VAR 0 3
28492: PPUSH
28493: LD_VAR 0 4
28497: PPUSH
28498: CALL_OW 488
28502: IFFALSE 28525
// begin result := [ x , y ] ;
28504: LD_ADDR_VAR 0 1
28508: PUSH
28509: LD_VAR 0 3
28513: PUSH
28514: LD_VAR 0 4
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: ST_TO_ADDR
// break ;
28523: GO 28527
// end ; end ;
28525: GO 28327
28527: POP
28528: POP
// if result then
28529: LD_VAR 0 1
28533: IFFALSE 28593
// begin ToLua ( playSibBomb() ) ;
28535: LD_STRING playSibBomb()
28537: PPUSH
28538: CALL_OW 559
// wait ( 0 0$14 ) ;
28542: LD_INT 490
28544: PPUSH
28545: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28549: LD_VAR 0 1
28553: PUSH
28554: LD_INT 1
28556: ARRAY
28557: PPUSH
28558: LD_VAR 0 1
28562: PUSH
28563: LD_INT 2
28565: ARRAY
28566: PPUSH
28567: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28571: LD_VAR 0 1
28575: PUSH
28576: LD_INT 1
28578: ARRAY
28579: PPUSH
28580: LD_VAR 0 1
28584: PUSH
28585: LD_INT 2
28587: ARRAY
28588: PPUSH
28589: CALL_OW 429
// end ; end ;
28593: LD_VAR 0 1
28597: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28598: LD_EXP 38
28602: PUSH
28603: LD_EXP 60
28607: AND
28608: IFFALSE 28620
28610: GO 28612
28612: DISABLE
// YouLost (  ) ;
28613: LD_STRING 
28615: PPUSH
28616: CALL_OW 104
28620: END
// every 0 0$1 trigger StreamModeActive and sFog do
28621: LD_EXP 38
28625: PUSH
28626: LD_EXP 59
28630: AND
28631: IFFALSE 28645
28633: GO 28635
28635: DISABLE
// FogOff ( your_side ) ;
28636: LD_OWVAR 2
28640: PPUSH
28641: CALL_OW 344
28645: END
// every 0 0$1 trigger StreamModeActive and sSun do
28646: LD_EXP 38
28650: PUSH
28651: LD_EXP 61
28655: AND
28656: IFFALSE 28684
28658: GO 28660
28660: DISABLE
// begin solar_recharge_percent := 0 ;
28661: LD_ADDR_OWVAR 79
28665: PUSH
28666: LD_INT 0
28668: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28669: LD_INT 10500
28671: PPUSH
28672: CALL_OW 67
// solar_recharge_percent := 100 ;
28676: LD_ADDR_OWVAR 79
28680: PUSH
28681: LD_INT 100
28683: ST_TO_ADDR
// end ;
28684: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28685: LD_EXP 38
28689: PUSH
28690: LD_EXP 62
28694: AND
28695: IFFALSE 28934
28697: GO 28699
28699: DISABLE
28700: LD_INT 0
28702: PPUSH
28703: PPUSH
28704: PPUSH
// begin tmp := [ ] ;
28705: LD_ADDR_VAR 0 3
28709: PUSH
28710: EMPTY
28711: ST_TO_ADDR
// for i := 1 to 6 do
28712: LD_ADDR_VAR 0 1
28716: PUSH
28717: DOUBLE
28718: LD_INT 1
28720: DEC
28721: ST_TO_ADDR
28722: LD_INT 6
28724: PUSH
28725: FOR_TO
28726: IFFALSE 28831
// begin uc_nation := nation_nature ;
28728: LD_ADDR_OWVAR 21
28732: PUSH
28733: LD_INT 0
28735: ST_TO_ADDR
// uc_side := 0 ;
28736: LD_ADDR_OWVAR 20
28740: PUSH
28741: LD_INT 0
28743: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28744: LD_ADDR_OWVAR 29
28748: PUSH
28749: LD_INT 12
28751: PUSH
28752: LD_INT 12
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: ST_TO_ADDR
// hc_agressivity := 20 ;
28759: LD_ADDR_OWVAR 35
28763: PUSH
28764: LD_INT 20
28766: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28767: LD_ADDR_OWVAR 28
28771: PUSH
28772: LD_INT 17
28774: ST_TO_ADDR
// hc_gallery :=  ;
28775: LD_ADDR_OWVAR 33
28779: PUSH
28780: LD_STRING 
28782: ST_TO_ADDR
// hc_name :=  ;
28783: LD_ADDR_OWVAR 26
28787: PUSH
28788: LD_STRING 
28790: ST_TO_ADDR
// un := CreateHuman ;
28791: LD_ADDR_VAR 0 2
28795: PUSH
28796: CALL_OW 44
28800: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28801: LD_VAR 0 2
28805: PPUSH
28806: LD_INT 1
28808: PPUSH
28809: CALL_OW 51
// tmp := tmp ^ un ;
28813: LD_ADDR_VAR 0 3
28817: PUSH
28818: LD_VAR 0 3
28822: PUSH
28823: LD_VAR 0 2
28827: ADD
28828: ST_TO_ADDR
// end ;
28829: GO 28725
28831: POP
28832: POP
// repeat wait ( 0 0$1 ) ;
28833: LD_INT 35
28835: PPUSH
28836: CALL_OW 67
// for un in tmp do
28840: LD_ADDR_VAR 0 2
28844: PUSH
28845: LD_VAR 0 3
28849: PUSH
28850: FOR_IN
28851: IFFALSE 28925
// begin if IsDead ( un ) then
28853: LD_VAR 0 2
28857: PPUSH
28858: CALL_OW 301
28862: IFFALSE 28882
// begin tmp := tmp diff un ;
28864: LD_ADDR_VAR 0 3
28868: PUSH
28869: LD_VAR 0 3
28873: PUSH
28874: LD_VAR 0 2
28878: DIFF
28879: ST_TO_ADDR
// continue ;
28880: GO 28850
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28882: LD_VAR 0 2
28886: PPUSH
28887: LD_INT 3
28889: PUSH
28890: LD_INT 22
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PPUSH
28904: CALL_OW 69
28908: PPUSH
28909: LD_VAR 0 2
28913: PPUSH
28914: CALL_OW 74
28918: PPUSH
28919: CALL_OW 115
// end ;
28923: GO 28850
28925: POP
28926: POP
// until not tmp ;
28927: LD_VAR 0 3
28931: NOT
28932: IFFALSE 28833
// end ;
28934: PPOPN 3
28936: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28937: LD_EXP 38
28941: PUSH
28942: LD_EXP 63
28946: AND
28947: IFFALSE 29001
28949: GO 28951
28951: DISABLE
// begin ToLua ( displayTroll(); ) ;
28952: LD_STRING displayTroll();
28954: PPUSH
28955: CALL_OW 559
// wait ( 3 3$00 ) ;
28959: LD_INT 6300
28961: PPUSH
28962: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28966: LD_STRING hideTroll();
28968: PPUSH
28969: CALL_OW 559
// wait ( 1 1$00 ) ;
28973: LD_INT 2100
28975: PPUSH
28976: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28980: LD_STRING displayTroll();
28982: PPUSH
28983: CALL_OW 559
// wait ( 1 1$00 ) ;
28987: LD_INT 2100
28989: PPUSH
28990: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28994: LD_STRING hideTroll();
28996: PPUSH
28997: CALL_OW 559
// end ;
29001: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29002: LD_EXP 38
29006: PUSH
29007: LD_EXP 64
29011: AND
29012: IFFALSE 29075
29014: GO 29016
29016: DISABLE
29017: LD_INT 0
29019: PPUSH
// begin p := 0 ;
29020: LD_ADDR_VAR 0 1
29024: PUSH
29025: LD_INT 0
29027: ST_TO_ADDR
// repeat game_speed := 1 ;
29028: LD_ADDR_OWVAR 65
29032: PUSH
29033: LD_INT 1
29035: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29036: LD_INT 35
29038: PPUSH
29039: CALL_OW 67
// p := p + 1 ;
29043: LD_ADDR_VAR 0 1
29047: PUSH
29048: LD_VAR 0 1
29052: PUSH
29053: LD_INT 1
29055: PLUS
29056: ST_TO_ADDR
// until p >= 60 ;
29057: LD_VAR 0 1
29061: PUSH
29062: LD_INT 60
29064: GREATEREQUAL
29065: IFFALSE 29028
// game_speed := 4 ;
29067: LD_ADDR_OWVAR 65
29071: PUSH
29072: LD_INT 4
29074: ST_TO_ADDR
// end ;
29075: PPOPN 1
29077: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29078: LD_EXP 38
29082: PUSH
29083: LD_EXP 65
29087: AND
29088: IFFALSE 29234
29090: GO 29092
29092: DISABLE
29093: LD_INT 0
29095: PPUSH
29096: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29097: LD_ADDR_VAR 0 1
29101: PUSH
29102: LD_INT 22
29104: PUSH
29105: LD_OWVAR 2
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: LD_INT 30
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 30
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: LIST
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PPUSH
29146: CALL_OW 69
29150: ST_TO_ADDR
// if not depot then
29151: LD_VAR 0 1
29155: NOT
29156: IFFALSE 29160
// exit ;
29158: GO 29234
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29160: LD_ADDR_VAR 0 2
29164: PUSH
29165: LD_VAR 0 1
29169: PUSH
29170: LD_INT 1
29172: PPUSH
29173: LD_VAR 0 1
29177: PPUSH
29178: CALL_OW 12
29182: ARRAY
29183: PPUSH
29184: CALL_OW 274
29188: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_INT 1
29196: PPUSH
29197: LD_INT 0
29199: PPUSH
29200: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29204: LD_VAR 0 2
29208: PPUSH
29209: LD_INT 2
29211: PPUSH
29212: LD_INT 0
29214: PPUSH
29215: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29219: LD_VAR 0 2
29223: PPUSH
29224: LD_INT 3
29226: PPUSH
29227: LD_INT 0
29229: PPUSH
29230: CALL_OW 277
// end ;
29234: PPOPN 2
29236: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29237: LD_EXP 38
29241: PUSH
29242: LD_EXP 66
29246: AND
29247: IFFALSE 29344
29249: GO 29251
29251: DISABLE
29252: LD_INT 0
29254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29255: LD_ADDR_VAR 0 1
29259: PUSH
29260: LD_INT 22
29262: PUSH
29263: LD_OWVAR 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 21
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 3
29284: PUSH
29285: LD_INT 23
29287: PUSH
29288: LD_INT 0
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: PPUSH
29304: CALL_OW 69
29308: ST_TO_ADDR
// if not tmp then
29309: LD_VAR 0 1
29313: NOT
29314: IFFALSE 29318
// exit ;
29316: GO 29344
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29318: LD_VAR 0 1
29322: PUSH
29323: LD_INT 1
29325: PPUSH
29326: LD_VAR 0 1
29330: PPUSH
29331: CALL_OW 12
29335: ARRAY
29336: PPUSH
29337: LD_INT 200
29339: PPUSH
29340: CALL_OW 234
// end ;
29344: PPOPN 1
29346: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29347: LD_EXP 38
29351: PUSH
29352: LD_EXP 67
29356: AND
29357: IFFALSE 29436
29359: GO 29361
29361: DISABLE
29362: LD_INT 0
29364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29365: LD_ADDR_VAR 0 1
29369: PUSH
29370: LD_INT 22
29372: PUSH
29373: LD_OWVAR 2
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 21
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PPUSH
29396: CALL_OW 69
29400: ST_TO_ADDR
// if not tmp then
29401: LD_VAR 0 1
29405: NOT
29406: IFFALSE 29410
// exit ;
29408: GO 29436
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29410: LD_VAR 0 1
29414: PUSH
29415: LD_INT 1
29417: PPUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: CALL_OW 12
29427: ARRAY
29428: PPUSH
29429: LD_INT 60
29431: PPUSH
29432: CALL_OW 234
// end ;
29436: PPOPN 1
29438: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29439: LD_EXP 38
29443: PUSH
29444: LD_EXP 68
29448: AND
29449: IFFALSE 29548
29451: GO 29453
29453: DISABLE
29454: LD_INT 0
29456: PPUSH
29457: PPUSH
// begin enable ;
29458: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29459: LD_ADDR_VAR 0 1
29463: PUSH
29464: LD_INT 22
29466: PUSH
29467: LD_OWVAR 2
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 61
29478: PUSH
29479: EMPTY
29480: LIST
29481: PUSH
29482: LD_INT 33
29484: PUSH
29485: LD_INT 2
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: LIST
29496: PPUSH
29497: CALL_OW 69
29501: ST_TO_ADDR
// if not tmp then
29502: LD_VAR 0 1
29506: NOT
29507: IFFALSE 29511
// exit ;
29509: GO 29548
// for i in tmp do
29511: LD_ADDR_VAR 0 2
29515: PUSH
29516: LD_VAR 0 1
29520: PUSH
29521: FOR_IN
29522: IFFALSE 29546
// if IsControledBy ( i ) then
29524: LD_VAR 0 2
29528: PPUSH
29529: CALL_OW 312
29533: IFFALSE 29544
// ComUnlink ( i ) ;
29535: LD_VAR 0 2
29539: PPUSH
29540: CALL_OW 136
29544: GO 29521
29546: POP
29547: POP
// end ;
29548: PPOPN 2
29550: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29551: LD_EXP 38
29555: PUSH
29556: LD_EXP 69
29560: AND
29561: IFFALSE 29701
29563: GO 29565
29565: DISABLE
29566: LD_INT 0
29568: PPUSH
29569: PPUSH
// begin ToLua ( displayPowell(); ) ;
29570: LD_STRING displayPowell();
29572: PPUSH
29573: CALL_OW 559
// uc_side := 0 ;
29577: LD_ADDR_OWVAR 20
29581: PUSH
29582: LD_INT 0
29584: ST_TO_ADDR
// uc_nation := 2 ;
29585: LD_ADDR_OWVAR 21
29589: PUSH
29590: LD_INT 2
29592: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29593: LD_ADDR_OWVAR 37
29597: PUSH
29598: LD_INT 14
29600: ST_TO_ADDR
// vc_engine := engine_siberite ;
29601: LD_ADDR_OWVAR 39
29605: PUSH
29606: LD_INT 3
29608: ST_TO_ADDR
// vc_control := control_apeman ;
29609: LD_ADDR_OWVAR 38
29613: PUSH
29614: LD_INT 5
29616: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29617: LD_ADDR_OWVAR 40
29621: PUSH
29622: LD_INT 29
29624: ST_TO_ADDR
// un := CreateVehicle ;
29625: LD_ADDR_VAR 0 2
29629: PUSH
29630: CALL_OW 45
29634: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29635: LD_VAR 0 2
29639: PPUSH
29640: LD_INT 1
29642: PPUSH
29643: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29647: LD_INT 35
29649: PPUSH
29650: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29654: LD_VAR 0 2
29658: PPUSH
29659: LD_INT 22
29661: PUSH
29662: LD_OWVAR 2
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PPUSH
29671: CALL_OW 69
29675: PPUSH
29676: LD_VAR 0 2
29680: PPUSH
29681: CALL_OW 74
29685: PPUSH
29686: CALL_OW 115
// until IsDead ( un ) ;
29690: LD_VAR 0 2
29694: PPUSH
29695: CALL_OW 301
29699: IFFALSE 29647
// end ;
29701: PPOPN 2
29703: END
// every 0 0$1 trigger StreamModeActive and sStu do
29704: LD_EXP 38
29708: PUSH
29709: LD_EXP 77
29713: AND
29714: IFFALSE 29730
29716: GO 29718
29718: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29719: LD_STRING displayStucuk();
29721: PPUSH
29722: CALL_OW 559
// ResetFog ;
29726: CALL_OW 335
// end ;
29730: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29731: LD_EXP 38
29735: PUSH
29736: LD_EXP 70
29740: AND
29741: IFFALSE 29882
29743: GO 29745
29745: DISABLE
29746: LD_INT 0
29748: PPUSH
29749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29750: LD_ADDR_VAR 0 2
29754: PUSH
29755: LD_INT 22
29757: PUSH
29758: LD_OWVAR 2
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 21
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PPUSH
29781: CALL_OW 69
29785: ST_TO_ADDR
// if not tmp then
29786: LD_VAR 0 2
29790: NOT
29791: IFFALSE 29795
// exit ;
29793: GO 29882
// un := tmp [ rand ( 1 , tmp ) ] ;
29795: LD_ADDR_VAR 0 1
29799: PUSH
29800: LD_VAR 0 2
29804: PUSH
29805: LD_INT 1
29807: PPUSH
29808: LD_VAR 0 2
29812: PPUSH
29813: CALL_OW 12
29817: ARRAY
29818: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29819: LD_VAR 0 1
29823: PPUSH
29824: LD_INT 0
29826: PPUSH
29827: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29831: LD_VAR 0 1
29835: PPUSH
29836: LD_OWVAR 3
29840: PUSH
29841: LD_VAR 0 1
29845: DIFF
29846: PPUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL_OW 74
29856: PPUSH
29857: CALL_OW 115
// wait ( 0 0$20 ) ;
29861: LD_INT 700
29863: PPUSH
29864: CALL_OW 67
// SetSide ( un , your_side ) ;
29868: LD_VAR 0 1
29872: PPUSH
29873: LD_OWVAR 2
29877: PPUSH
29878: CALL_OW 235
// end ;
29882: PPOPN 2
29884: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29885: LD_EXP 38
29889: PUSH
29890: LD_EXP 71
29894: AND
29895: IFFALSE 30001
29897: GO 29899
29899: DISABLE
29900: LD_INT 0
29902: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29903: LD_ADDR_VAR 0 1
29907: PUSH
29908: LD_INT 22
29910: PUSH
29911: LD_OWVAR 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 2
29922: PUSH
29923: LD_INT 30
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 30
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PPUSH
29952: CALL_OW 69
29956: ST_TO_ADDR
// if not depot then
29957: LD_VAR 0 1
29961: NOT
29962: IFFALSE 29966
// exit ;
29964: GO 30001
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29966: LD_VAR 0 1
29970: PUSH
29971: LD_INT 1
29973: ARRAY
29974: PPUSH
29975: CALL_OW 250
29979: PPUSH
29980: LD_VAR 0 1
29984: PUSH
29985: LD_INT 1
29987: ARRAY
29988: PPUSH
29989: CALL_OW 251
29993: PPUSH
29994: LD_INT 70
29996: PPUSH
29997: CALL_OW 495
// end ;
30001: PPOPN 1
30003: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30004: LD_EXP 38
30008: PUSH
30009: LD_EXP 72
30013: AND
30014: IFFALSE 30225
30016: GO 30018
30018: DISABLE
30019: LD_INT 0
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
30025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30026: LD_ADDR_VAR 0 5
30030: PUSH
30031: LD_INT 22
30033: PUSH
30034: LD_OWVAR 2
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 21
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PPUSH
30057: CALL_OW 69
30061: ST_TO_ADDR
// if not tmp then
30062: LD_VAR 0 5
30066: NOT
30067: IFFALSE 30071
// exit ;
30069: GO 30225
// for i in tmp do
30071: LD_ADDR_VAR 0 1
30075: PUSH
30076: LD_VAR 0 5
30080: PUSH
30081: FOR_IN
30082: IFFALSE 30223
// begin d := rand ( 0 , 5 ) ;
30084: LD_ADDR_VAR 0 4
30088: PUSH
30089: LD_INT 0
30091: PPUSH
30092: LD_INT 5
30094: PPUSH
30095: CALL_OW 12
30099: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30100: LD_ADDR_VAR 0 2
30104: PUSH
30105: LD_VAR 0 1
30109: PPUSH
30110: CALL_OW 250
30114: PPUSH
30115: LD_VAR 0 4
30119: PPUSH
30120: LD_INT 3
30122: PPUSH
30123: LD_INT 12
30125: PPUSH
30126: CALL_OW 12
30130: PPUSH
30131: CALL_OW 272
30135: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30136: LD_ADDR_VAR 0 3
30140: PUSH
30141: LD_VAR 0 1
30145: PPUSH
30146: CALL_OW 251
30150: PPUSH
30151: LD_VAR 0 4
30155: PPUSH
30156: LD_INT 3
30158: PPUSH
30159: LD_INT 12
30161: PPUSH
30162: CALL_OW 12
30166: PPUSH
30167: CALL_OW 273
30171: ST_TO_ADDR
// if ValidHex ( x , y ) then
30172: LD_VAR 0 2
30176: PPUSH
30177: LD_VAR 0 3
30181: PPUSH
30182: CALL_OW 488
30186: IFFALSE 30221
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30188: LD_VAR 0 1
30192: PPUSH
30193: LD_VAR 0 2
30197: PPUSH
30198: LD_VAR 0 3
30202: PPUSH
30203: LD_INT 3
30205: PPUSH
30206: LD_INT 6
30208: PPUSH
30209: CALL_OW 12
30213: PPUSH
30214: LD_INT 1
30216: PPUSH
30217: CALL_OW 483
// end ;
30221: GO 30081
30223: POP
30224: POP
// end ;
30225: PPOPN 5
30227: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30228: LD_EXP 38
30232: PUSH
30233: LD_EXP 73
30237: AND
30238: IFFALSE 30332
30240: GO 30242
30242: DISABLE
30243: LD_INT 0
30245: PPUSH
30246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30247: LD_ADDR_VAR 0 2
30251: PUSH
30252: LD_INT 22
30254: PUSH
30255: LD_OWVAR 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 32
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 21
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: PPUSH
30289: CALL_OW 69
30293: ST_TO_ADDR
// if not tmp then
30294: LD_VAR 0 2
30298: NOT
30299: IFFALSE 30303
// exit ;
30301: GO 30332
// for i in tmp do
30303: LD_ADDR_VAR 0 1
30307: PUSH
30308: LD_VAR 0 2
30312: PUSH
30313: FOR_IN
30314: IFFALSE 30330
// SetFuel ( i , 0 ) ;
30316: LD_VAR 0 1
30320: PPUSH
30321: LD_INT 0
30323: PPUSH
30324: CALL_OW 240
30328: GO 30313
30330: POP
30331: POP
// end ;
30332: PPOPN 2
30334: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30335: LD_EXP 38
30339: PUSH
30340: LD_EXP 74
30344: AND
30345: IFFALSE 30411
30347: GO 30349
30349: DISABLE
30350: LD_INT 0
30352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30353: LD_ADDR_VAR 0 1
30357: PUSH
30358: LD_INT 22
30360: PUSH
30361: LD_OWVAR 2
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 30
30372: PUSH
30373: LD_INT 29
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PPUSH
30384: CALL_OW 69
30388: ST_TO_ADDR
// if not tmp then
30389: LD_VAR 0 1
30393: NOT
30394: IFFALSE 30398
// exit ;
30396: GO 30411
// DestroyUnit ( tmp [ 1 ] ) ;
30398: LD_VAR 0 1
30402: PUSH
30403: LD_INT 1
30405: ARRAY
30406: PPUSH
30407: CALL_OW 65
// end ;
30411: PPOPN 1
30413: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30414: LD_EXP 38
30418: PUSH
30419: LD_EXP 76
30423: AND
30424: IFFALSE 30553
30426: GO 30428
30428: DISABLE
30429: LD_INT 0
30431: PPUSH
// begin uc_side := 0 ;
30432: LD_ADDR_OWVAR 20
30436: PUSH
30437: LD_INT 0
30439: ST_TO_ADDR
// uc_nation := nation_arabian ;
30440: LD_ADDR_OWVAR 21
30444: PUSH
30445: LD_INT 2
30447: ST_TO_ADDR
// hc_gallery :=  ;
30448: LD_ADDR_OWVAR 33
30452: PUSH
30453: LD_STRING 
30455: ST_TO_ADDR
// hc_name :=  ;
30456: LD_ADDR_OWVAR 26
30460: PUSH
30461: LD_STRING 
30463: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30464: LD_INT 1
30466: PPUSH
30467: LD_INT 11
30469: PPUSH
30470: LD_INT 10
30472: PPUSH
30473: CALL_OW 380
// un := CreateHuman ;
30477: LD_ADDR_VAR 0 1
30481: PUSH
30482: CALL_OW 44
30486: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30487: LD_VAR 0 1
30491: PPUSH
30492: LD_INT 1
30494: PPUSH
30495: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30499: LD_INT 35
30501: PPUSH
30502: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30506: LD_VAR 0 1
30510: PPUSH
30511: LD_INT 22
30513: PUSH
30514: LD_OWVAR 2
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PPUSH
30523: CALL_OW 69
30527: PPUSH
30528: LD_VAR 0 1
30532: PPUSH
30533: CALL_OW 74
30537: PPUSH
30538: CALL_OW 115
// until IsDead ( un ) ;
30542: LD_VAR 0 1
30546: PPUSH
30547: CALL_OW 301
30551: IFFALSE 30499
// end ;
30553: PPOPN 1
30555: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30556: LD_EXP 38
30560: PUSH
30561: LD_EXP 78
30565: AND
30566: IFFALSE 30578
30568: GO 30570
30570: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30571: LD_STRING earthquake(getX(game), 0, 32)
30573: PPUSH
30574: CALL_OW 559
30578: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30579: LD_EXP 38
30583: PUSH
30584: LD_EXP 79
30588: AND
30589: IFFALSE 30680
30591: GO 30593
30593: DISABLE
30594: LD_INT 0
30596: PPUSH
// begin enable ;
30597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30598: LD_ADDR_VAR 0 1
30602: PUSH
30603: LD_INT 22
30605: PUSH
30606: LD_OWVAR 2
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 21
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 33
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: PPUSH
30640: CALL_OW 69
30644: ST_TO_ADDR
// if not tmp then
30645: LD_VAR 0 1
30649: NOT
30650: IFFALSE 30654
// exit ;
30652: GO 30680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30654: LD_VAR 0 1
30658: PUSH
30659: LD_INT 1
30661: PPUSH
30662: LD_VAR 0 1
30666: PPUSH
30667: CALL_OW 12
30671: ARRAY
30672: PPUSH
30673: LD_INT 1
30675: PPUSH
30676: CALL_OW 234
// end ;
30680: PPOPN 1
30682: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30683: LD_EXP 38
30687: PUSH
30688: LD_EXP 80
30692: AND
30693: IFFALSE 30834
30695: GO 30697
30697: DISABLE
30698: LD_INT 0
30700: PPUSH
30701: PPUSH
30702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30703: LD_ADDR_VAR 0 3
30707: PUSH
30708: LD_INT 22
30710: PUSH
30711: LD_OWVAR 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 25
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PPUSH
30734: CALL_OW 69
30738: ST_TO_ADDR
// if not tmp then
30739: LD_VAR 0 3
30743: NOT
30744: IFFALSE 30748
// exit ;
30746: GO 30834
// un := tmp [ rand ( 1 , tmp ) ] ;
30748: LD_ADDR_VAR 0 2
30752: PUSH
30753: LD_VAR 0 3
30757: PUSH
30758: LD_INT 1
30760: PPUSH
30761: LD_VAR 0 3
30765: PPUSH
30766: CALL_OW 12
30770: ARRAY
30771: ST_TO_ADDR
// if Crawls ( un ) then
30772: LD_VAR 0 2
30776: PPUSH
30777: CALL_OW 318
30781: IFFALSE 30792
// ComWalk ( un ) ;
30783: LD_VAR 0 2
30787: PPUSH
30788: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30792: LD_VAR 0 2
30796: PPUSH
30797: LD_INT 9
30799: PPUSH
30800: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30804: LD_INT 28
30806: PPUSH
30807: LD_OWVAR 2
30811: PPUSH
30812: LD_INT 2
30814: PPUSH
30815: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30819: LD_INT 29
30821: PPUSH
30822: LD_OWVAR 2
30826: PPUSH
30827: LD_INT 2
30829: PPUSH
30830: CALL_OW 322
// end ;
30834: PPOPN 3
30836: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30837: LD_EXP 38
30841: PUSH
30842: LD_EXP 81
30846: AND
30847: IFFALSE 30958
30849: GO 30851
30851: DISABLE
30852: LD_INT 0
30854: PPUSH
30855: PPUSH
30856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30857: LD_ADDR_VAR 0 3
30861: PUSH
30862: LD_INT 22
30864: PUSH
30865: LD_OWVAR 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 25
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PPUSH
30888: CALL_OW 69
30892: ST_TO_ADDR
// if not tmp then
30893: LD_VAR 0 3
30897: NOT
30898: IFFALSE 30902
// exit ;
30900: GO 30958
// un := tmp [ rand ( 1 , tmp ) ] ;
30902: LD_ADDR_VAR 0 2
30906: PUSH
30907: LD_VAR 0 3
30911: PUSH
30912: LD_INT 1
30914: PPUSH
30915: LD_VAR 0 3
30919: PPUSH
30920: CALL_OW 12
30924: ARRAY
30925: ST_TO_ADDR
// if Crawls ( un ) then
30926: LD_VAR 0 2
30930: PPUSH
30931: CALL_OW 318
30935: IFFALSE 30946
// ComWalk ( un ) ;
30937: LD_VAR 0 2
30941: PPUSH
30942: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30946: LD_VAR 0 2
30950: PPUSH
30951: LD_INT 8
30953: PPUSH
30954: CALL_OW 336
// end ;
30958: PPOPN 3
30960: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30961: LD_EXP 38
30965: PUSH
30966: LD_EXP 82
30970: AND
30971: IFFALSE 31115
30973: GO 30975
30975: DISABLE
30976: LD_INT 0
30978: PPUSH
30979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30980: LD_ADDR_VAR 0 2
30984: PUSH
30985: LD_INT 22
30987: PUSH
30988: LD_OWVAR 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 21
30999: PUSH
31000: LD_INT 2
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 34
31012: PUSH
31013: LD_INT 12
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 34
31022: PUSH
31023: LD_INT 51
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 34
31032: PUSH
31033: LD_INT 32
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: PPUSH
31051: CALL_OW 69
31055: ST_TO_ADDR
// if not tmp then
31056: LD_VAR 0 2
31060: NOT
31061: IFFALSE 31065
// exit ;
31063: GO 31115
// for i in tmp do
31065: LD_ADDR_VAR 0 1
31069: PUSH
31070: LD_VAR 0 2
31074: PUSH
31075: FOR_IN
31076: IFFALSE 31113
// if GetCargo ( i , mat_artifact ) = 0 then
31078: LD_VAR 0 1
31082: PPUSH
31083: LD_INT 4
31085: PPUSH
31086: CALL_OW 289
31090: PUSH
31091: LD_INT 0
31093: EQUAL
31094: IFFALSE 31111
// SetCargo ( i , mat_siberit , 100 ) ;
31096: LD_VAR 0 1
31100: PPUSH
31101: LD_INT 3
31103: PPUSH
31104: LD_INT 100
31106: PPUSH
31107: CALL_OW 290
31111: GO 31075
31113: POP
31114: POP
// end ;
31115: PPOPN 2
31117: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31118: LD_EXP 38
31122: PUSH
31123: LD_EXP 83
31127: AND
31128: IFFALSE 31311
31130: GO 31132
31132: DISABLE
31133: LD_INT 0
31135: PPUSH
31136: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31137: LD_ADDR_VAR 0 2
31141: PUSH
31142: LD_INT 22
31144: PUSH
31145: LD_OWVAR 2
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PPUSH
31154: CALL_OW 69
31158: ST_TO_ADDR
// if not tmp then
31159: LD_VAR 0 2
31163: NOT
31164: IFFALSE 31168
// exit ;
31166: GO 31311
// for i := 1 to 2 do
31168: LD_ADDR_VAR 0 1
31172: PUSH
31173: DOUBLE
31174: LD_INT 1
31176: DEC
31177: ST_TO_ADDR
31178: LD_INT 2
31180: PUSH
31181: FOR_TO
31182: IFFALSE 31309
// begin uc_side := your_side ;
31184: LD_ADDR_OWVAR 20
31188: PUSH
31189: LD_OWVAR 2
31193: ST_TO_ADDR
// uc_nation := nation_american ;
31194: LD_ADDR_OWVAR 21
31198: PUSH
31199: LD_INT 1
31201: ST_TO_ADDR
// vc_chassis := us_morphling ;
31202: LD_ADDR_OWVAR 37
31206: PUSH
31207: LD_INT 5
31209: ST_TO_ADDR
// vc_engine := engine_siberite ;
31210: LD_ADDR_OWVAR 39
31214: PUSH
31215: LD_INT 3
31217: ST_TO_ADDR
// vc_control := control_computer ;
31218: LD_ADDR_OWVAR 38
31222: PUSH
31223: LD_INT 3
31225: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31226: LD_ADDR_OWVAR 40
31230: PUSH
31231: LD_INT 10
31233: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31234: LD_VAR 0 2
31238: PUSH
31239: LD_INT 1
31241: ARRAY
31242: PPUSH
31243: CALL_OW 310
31247: NOT
31248: IFFALSE 31295
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31250: CALL_OW 45
31254: PPUSH
31255: LD_VAR 0 2
31259: PUSH
31260: LD_INT 1
31262: ARRAY
31263: PPUSH
31264: CALL_OW 250
31268: PPUSH
31269: LD_VAR 0 2
31273: PUSH
31274: LD_INT 1
31276: ARRAY
31277: PPUSH
31278: CALL_OW 251
31282: PPUSH
31283: LD_INT 12
31285: PPUSH
31286: LD_INT 1
31288: PPUSH
31289: CALL_OW 50
31293: GO 31307
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31295: CALL_OW 45
31299: PPUSH
31300: LD_INT 1
31302: PPUSH
31303: CALL_OW 51
// end ;
31307: GO 31181
31309: POP
31310: POP
// end ;
31311: PPOPN 2
31313: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31314: LD_EXP 38
31318: PUSH
31319: LD_EXP 84
31323: AND
31324: IFFALSE 31546
31326: GO 31328
31328: DISABLE
31329: LD_INT 0
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
31336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31337: LD_ADDR_VAR 0 6
31341: PUSH
31342: LD_INT 22
31344: PUSH
31345: LD_OWVAR 2
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 21
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 3
31366: PUSH
31367: LD_INT 23
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: PPUSH
31386: CALL_OW 69
31390: ST_TO_ADDR
// if not tmp then
31391: LD_VAR 0 6
31395: NOT
31396: IFFALSE 31400
// exit ;
31398: GO 31546
// s1 := rand ( 1 , 4 ) ;
31400: LD_ADDR_VAR 0 2
31404: PUSH
31405: LD_INT 1
31407: PPUSH
31408: LD_INT 4
31410: PPUSH
31411: CALL_OW 12
31415: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31416: LD_ADDR_VAR 0 4
31420: PUSH
31421: LD_VAR 0 6
31425: PUSH
31426: LD_INT 1
31428: ARRAY
31429: PPUSH
31430: LD_VAR 0 2
31434: PPUSH
31435: CALL_OW 259
31439: ST_TO_ADDR
// if s1 = 1 then
31440: LD_VAR 0 2
31444: PUSH
31445: LD_INT 1
31447: EQUAL
31448: IFFALSE 31468
// s2 := rand ( 2 , 4 ) else
31450: LD_ADDR_VAR 0 3
31454: PUSH
31455: LD_INT 2
31457: PPUSH
31458: LD_INT 4
31460: PPUSH
31461: CALL_OW 12
31465: ST_TO_ADDR
31466: GO 31476
// s2 := 1 ;
31468: LD_ADDR_VAR 0 3
31472: PUSH
31473: LD_INT 1
31475: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31476: LD_ADDR_VAR 0 5
31480: PUSH
31481: LD_VAR 0 6
31485: PUSH
31486: LD_INT 1
31488: ARRAY
31489: PPUSH
31490: LD_VAR 0 3
31494: PPUSH
31495: CALL_OW 259
31499: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31500: LD_VAR 0 6
31504: PUSH
31505: LD_INT 1
31507: ARRAY
31508: PPUSH
31509: LD_VAR 0 2
31513: PPUSH
31514: LD_VAR 0 5
31518: PPUSH
31519: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31523: LD_VAR 0 6
31527: PUSH
31528: LD_INT 1
31530: ARRAY
31531: PPUSH
31532: LD_VAR 0 3
31536: PPUSH
31537: LD_VAR 0 4
31541: PPUSH
31542: CALL_OW 237
// end ;
31546: PPOPN 6
31548: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31549: LD_EXP 38
31553: PUSH
31554: LD_EXP 85
31558: AND
31559: IFFALSE 31638
31561: GO 31563
31563: DISABLE
31564: LD_INT 0
31566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31567: LD_ADDR_VAR 0 1
31571: PUSH
31572: LD_INT 22
31574: PUSH
31575: LD_OWVAR 2
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 30
31586: PUSH
31587: LD_INT 3
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PPUSH
31598: CALL_OW 69
31602: ST_TO_ADDR
// if not tmp then
31603: LD_VAR 0 1
31607: NOT
31608: IFFALSE 31612
// exit ;
31610: GO 31638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31612: LD_VAR 0 1
31616: PUSH
31617: LD_INT 1
31619: PPUSH
31620: LD_VAR 0 1
31624: PPUSH
31625: CALL_OW 12
31629: ARRAY
31630: PPUSH
31631: LD_INT 1
31633: PPUSH
31634: CALL_OW 234
// end ;
31638: PPOPN 1
31640: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31641: LD_EXP 38
31645: PUSH
31646: LD_EXP 86
31650: AND
31651: IFFALSE 31763
31653: GO 31655
31655: DISABLE
31656: LD_INT 0
31658: PPUSH
31659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31660: LD_ADDR_VAR 0 2
31664: PUSH
31665: LD_INT 22
31667: PUSH
31668: LD_OWVAR 2
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: LD_INT 30
31682: PUSH
31683: LD_INT 27
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 30
31692: PUSH
31693: LD_INT 26
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 30
31702: PUSH
31703: LD_INT 28
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PPUSH
31720: CALL_OW 69
31724: ST_TO_ADDR
// if not tmp then
31725: LD_VAR 0 2
31729: NOT
31730: IFFALSE 31734
// exit ;
31732: GO 31763
// for i in tmp do
31734: LD_ADDR_VAR 0 1
31738: PUSH
31739: LD_VAR 0 2
31743: PUSH
31744: FOR_IN
31745: IFFALSE 31761
// SetLives ( i , 1 ) ;
31747: LD_VAR 0 1
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: CALL_OW 234
31759: GO 31744
31761: POP
31762: POP
// end ;
31763: PPOPN 2
31765: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31766: LD_EXP 38
31770: PUSH
31771: LD_EXP 87
31775: AND
31776: IFFALSE 32063
31778: GO 31780
31780: DISABLE
31781: LD_INT 0
31783: PPUSH
31784: PPUSH
31785: PPUSH
// begin i := rand ( 1 , 7 ) ;
31786: LD_ADDR_VAR 0 1
31790: PUSH
31791: LD_INT 1
31793: PPUSH
31794: LD_INT 7
31796: PPUSH
31797: CALL_OW 12
31801: ST_TO_ADDR
// case i of 1 :
31802: LD_VAR 0 1
31806: PUSH
31807: LD_INT 1
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31825
31815: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31816: LD_STRING earthquake(getX(game), 0, 32)
31818: PPUSH
31819: CALL_OW 559
31823: GO 32063
31825: LD_INT 2
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31833
31831: GO 31847
31833: POP
// begin ToLua ( displayStucuk(); ) ;
31834: LD_STRING displayStucuk();
31836: PPUSH
31837: CALL_OW 559
// ResetFog ;
31841: CALL_OW 335
// end ; 3 :
31845: GO 32063
31847: LD_INT 3
31849: DOUBLE
31850: EQUAL
31851: IFTRUE 31855
31853: GO 31959
31855: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31856: LD_ADDR_VAR 0 2
31860: PUSH
31861: LD_INT 22
31863: PUSH
31864: LD_OWVAR 2
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 25
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PPUSH
31887: CALL_OW 69
31891: ST_TO_ADDR
// if not tmp then
31892: LD_VAR 0 2
31896: NOT
31897: IFFALSE 31901
// exit ;
31899: GO 32063
// un := tmp [ rand ( 1 , tmp ) ] ;
31901: LD_ADDR_VAR 0 3
31905: PUSH
31906: LD_VAR 0 2
31910: PUSH
31911: LD_INT 1
31913: PPUSH
31914: LD_VAR 0 2
31918: PPUSH
31919: CALL_OW 12
31923: ARRAY
31924: ST_TO_ADDR
// if Crawls ( un ) then
31925: LD_VAR 0 3
31929: PPUSH
31930: CALL_OW 318
31934: IFFALSE 31945
// ComWalk ( un ) ;
31936: LD_VAR 0 3
31940: PPUSH
31941: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31945: LD_VAR 0 3
31949: PPUSH
31950: LD_INT 8
31952: PPUSH
31953: CALL_OW 336
// end ; 4 :
31957: GO 32063
31959: LD_INT 4
31961: DOUBLE
31962: EQUAL
31963: IFTRUE 31967
31965: GO 32041
31967: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31968: LD_ADDR_VAR 0 2
31972: PUSH
31973: LD_INT 22
31975: PUSH
31976: LD_OWVAR 2
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 30
31987: PUSH
31988: LD_INT 29
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PPUSH
31999: CALL_OW 69
32003: ST_TO_ADDR
// if not tmp then
32004: LD_VAR 0 2
32008: NOT
32009: IFFALSE 32013
// exit ;
32011: GO 32063
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32013: LD_VAR 0 2
32017: PUSH
32018: LD_INT 1
32020: ARRAY
32021: PPUSH
32022: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32026: LD_VAR 0 2
32030: PUSH
32031: LD_INT 1
32033: ARRAY
32034: PPUSH
32035: CALL_OW 65
// end ; 5 .. 7 :
32039: GO 32063
32041: LD_INT 5
32043: DOUBLE
32044: GREATEREQUAL
32045: IFFALSE 32053
32047: LD_INT 7
32049: DOUBLE
32050: LESSEQUAL
32051: IFTRUE 32055
32053: GO 32062
32055: POP
// StreamSibBomb ; end ;
32056: CALL 28300 0 0
32060: GO 32063
32062: POP
// end ;
32063: PPOPN 3
32065: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32066: LD_EXP 38
32070: PUSH
32071: LD_EXP 88
32075: AND
32076: IFFALSE 32232
32078: GO 32080
32080: DISABLE
32081: LD_INT 0
32083: PPUSH
32084: PPUSH
32085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32086: LD_ADDR_VAR 0 2
32090: PUSH
32091: LD_INT 81
32093: PUSH
32094: LD_OWVAR 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: LD_INT 21
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 21
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PPUSH
32135: CALL_OW 69
32139: ST_TO_ADDR
// if not tmp then
32140: LD_VAR 0 2
32144: NOT
32145: IFFALSE 32149
// exit ;
32147: GO 32232
// p := 0 ;
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_INT 0
32156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32157: LD_INT 35
32159: PPUSH
32160: CALL_OW 67
// p := p + 1 ;
32164: LD_ADDR_VAR 0 3
32168: PUSH
32169: LD_VAR 0 3
32173: PUSH
32174: LD_INT 1
32176: PLUS
32177: ST_TO_ADDR
// for i in tmp do
32178: LD_ADDR_VAR 0 1
32182: PUSH
32183: LD_VAR 0 2
32187: PUSH
32188: FOR_IN
32189: IFFALSE 32220
// if GetLives ( i ) < 1000 then
32191: LD_VAR 0 1
32195: PPUSH
32196: CALL_OW 256
32200: PUSH
32201: LD_INT 1000
32203: LESS
32204: IFFALSE 32218
// SetLives ( i , 1000 ) ;
32206: LD_VAR 0 1
32210: PPUSH
32211: LD_INT 1000
32213: PPUSH
32214: CALL_OW 234
32218: GO 32188
32220: POP
32221: POP
// until p > 20 ;
32222: LD_VAR 0 3
32226: PUSH
32227: LD_INT 20
32229: GREATER
32230: IFFALSE 32157
// end ;
32232: PPOPN 3
32234: END
// every 0 0$1 trigger StreamModeActive and sTime do
32235: LD_EXP 38
32239: PUSH
32240: LD_EXP 89
32244: AND
32245: IFFALSE 32280
32247: GO 32249
32249: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32250: LD_INT 28
32252: PPUSH
32253: LD_OWVAR 2
32257: PPUSH
32258: LD_INT 2
32260: PPUSH
32261: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32265: LD_INT 30
32267: PPUSH
32268: LD_OWVAR 2
32272: PPUSH
32273: LD_INT 2
32275: PPUSH
32276: CALL_OW 322
// end ;
32280: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32281: LD_EXP 38
32285: PUSH
32286: LD_EXP 90
32290: AND
32291: IFFALSE 32412
32293: GO 32295
32295: DISABLE
32296: LD_INT 0
32298: PPUSH
32299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32300: LD_ADDR_VAR 0 2
32304: PUSH
32305: LD_INT 22
32307: PUSH
32308: LD_OWVAR 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 21
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 3
32329: PUSH
32330: LD_INT 23
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: PPUSH
32349: CALL_OW 69
32353: ST_TO_ADDR
// if not tmp then
32354: LD_VAR 0 2
32358: NOT
32359: IFFALSE 32363
// exit ;
32361: GO 32412
// for i in tmp do
32363: LD_ADDR_VAR 0 1
32367: PUSH
32368: LD_VAR 0 2
32372: PUSH
32373: FOR_IN
32374: IFFALSE 32410
// begin if Crawls ( i ) then
32376: LD_VAR 0 1
32380: PPUSH
32381: CALL_OW 318
32385: IFFALSE 32396
// ComWalk ( i ) ;
32387: LD_VAR 0 1
32391: PPUSH
32392: CALL_OW 138
// SetClass ( i , 2 ) ;
32396: LD_VAR 0 1
32400: PPUSH
32401: LD_INT 2
32403: PPUSH
32404: CALL_OW 336
// end ;
32408: GO 32373
32410: POP
32411: POP
// end ;
32412: PPOPN 2
32414: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32415: LD_EXP 38
32419: PUSH
32420: LD_EXP 91
32424: AND
32425: IFFALSE 32713
32427: GO 32429
32429: DISABLE
32430: LD_INT 0
32432: PPUSH
32433: PPUSH
32434: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32435: LD_OWVAR 2
32439: PPUSH
32440: LD_INT 9
32442: PPUSH
32443: LD_INT 1
32445: PPUSH
32446: LD_INT 1
32448: PPUSH
32449: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32453: LD_INT 9
32455: PPUSH
32456: LD_OWVAR 2
32460: PPUSH
32461: CALL_OW 343
// uc_side := 9 ;
32465: LD_ADDR_OWVAR 20
32469: PUSH
32470: LD_INT 9
32472: ST_TO_ADDR
// uc_nation := 2 ;
32473: LD_ADDR_OWVAR 21
32477: PUSH
32478: LD_INT 2
32480: ST_TO_ADDR
// hc_name := Dark Warrior ;
32481: LD_ADDR_OWVAR 26
32485: PUSH
32486: LD_STRING Dark Warrior
32488: ST_TO_ADDR
// hc_gallery :=  ;
32489: LD_ADDR_OWVAR 33
32493: PUSH
32494: LD_STRING 
32496: ST_TO_ADDR
// hc_noskilllimit := true ;
32497: LD_ADDR_OWVAR 76
32501: PUSH
32502: LD_INT 1
32504: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32505: LD_ADDR_OWVAR 31
32509: PUSH
32510: LD_INT 30
32512: PUSH
32513: LD_INT 30
32515: PUSH
32516: LD_INT 30
32518: PUSH
32519: LD_INT 30
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: ST_TO_ADDR
// un := CreateHuman ;
32528: LD_ADDR_VAR 0 3
32532: PUSH
32533: CALL_OW 44
32537: ST_TO_ADDR
// hc_noskilllimit := false ;
32538: LD_ADDR_OWVAR 76
32542: PUSH
32543: LD_INT 0
32545: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32546: LD_VAR 0 3
32550: PPUSH
32551: LD_INT 1
32553: PPUSH
32554: CALL_OW 51
// ToLua ( playRanger() ) ;
32558: LD_STRING playRanger()
32560: PPUSH
32561: CALL_OW 559
// p := 0 ;
32565: LD_ADDR_VAR 0 2
32569: PUSH
32570: LD_INT 0
32572: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32573: LD_INT 35
32575: PPUSH
32576: CALL_OW 67
// p := p + 1 ;
32580: LD_ADDR_VAR 0 2
32584: PUSH
32585: LD_VAR 0 2
32589: PUSH
32590: LD_INT 1
32592: PLUS
32593: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32594: LD_VAR 0 3
32598: PPUSH
32599: CALL_OW 256
32603: PUSH
32604: LD_INT 1000
32606: LESS
32607: IFFALSE 32621
// SetLives ( un , 1000 ) ;
32609: LD_VAR 0 3
32613: PPUSH
32614: LD_INT 1000
32616: PPUSH
32617: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32621: LD_VAR 0 3
32625: PPUSH
32626: LD_INT 81
32628: PUSH
32629: LD_OWVAR 2
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 91
32640: PUSH
32641: LD_VAR 0 3
32645: PUSH
32646: LD_INT 30
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PPUSH
32658: CALL_OW 69
32662: PPUSH
32663: LD_VAR 0 3
32667: PPUSH
32668: CALL_OW 74
32672: PPUSH
32673: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32677: LD_VAR 0 2
32681: PUSH
32682: LD_INT 80
32684: GREATER
32685: PUSH
32686: LD_VAR 0 3
32690: PPUSH
32691: CALL_OW 301
32695: OR
32696: IFFALSE 32573
// if un then
32698: LD_VAR 0 3
32702: IFFALSE 32713
// RemoveUnit ( un ) ;
32704: LD_VAR 0 3
32708: PPUSH
32709: CALL_OW 64
// end ;
32713: PPOPN 3
32715: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32716: LD_EXP 92
32720: IFFALSE 32836
32722: GO 32724
32724: DISABLE
32725: LD_INT 0
32727: PPUSH
32728: PPUSH
32729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32730: LD_ADDR_VAR 0 2
32734: PUSH
32735: LD_INT 81
32737: PUSH
32738: LD_OWVAR 2
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 21
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PPUSH
32761: CALL_OW 69
32765: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32766: LD_STRING playComputer()
32768: PPUSH
32769: CALL_OW 559
// if not tmp then
32773: LD_VAR 0 2
32777: NOT
32778: IFFALSE 32782
// exit ;
32780: GO 32836
// for i in tmp do
32782: LD_ADDR_VAR 0 1
32786: PUSH
32787: LD_VAR 0 2
32791: PUSH
32792: FOR_IN
32793: IFFALSE 32834
// for j := 1 to 4 do
32795: LD_ADDR_VAR 0 3
32799: PUSH
32800: DOUBLE
32801: LD_INT 1
32803: DEC
32804: ST_TO_ADDR
32805: LD_INT 4
32807: PUSH
32808: FOR_TO
32809: IFFALSE 32830
// SetSkill ( i , j , 10 ) ;
32811: LD_VAR 0 1
32815: PPUSH
32816: LD_VAR 0 3
32820: PPUSH
32821: LD_INT 10
32823: PPUSH
32824: CALL_OW 237
32828: GO 32808
32830: POP
32831: POP
32832: GO 32792
32834: POP
32835: POP
// end ;
32836: PPOPN 3
32838: END
// every 0 0$1 trigger s30 do var i , tmp ;
32839: LD_EXP 93
32843: IFFALSE 32912
32845: GO 32847
32847: DISABLE
32848: LD_INT 0
32850: PPUSH
32851: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32852: LD_ADDR_VAR 0 2
32856: PUSH
32857: LD_INT 22
32859: PUSH
32860: LD_OWVAR 2
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PPUSH
32869: CALL_OW 69
32873: ST_TO_ADDR
// if not tmp then
32874: LD_VAR 0 2
32878: NOT
32879: IFFALSE 32883
// exit ;
32881: GO 32912
// for i in tmp do
32883: LD_ADDR_VAR 0 1
32887: PUSH
32888: LD_VAR 0 2
32892: PUSH
32893: FOR_IN
32894: IFFALSE 32910
// SetLives ( i , 300 ) ;
32896: LD_VAR 0 1
32900: PPUSH
32901: LD_INT 300
32903: PPUSH
32904: CALL_OW 234
32908: GO 32893
32910: POP
32911: POP
// end ;
32912: PPOPN 2
32914: END
// every 0 0$1 trigger s60 do var i , tmp ;
32915: LD_EXP 94
32919: IFFALSE 32988
32921: GO 32923
32923: DISABLE
32924: LD_INT 0
32926: PPUSH
32927: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32928: LD_ADDR_VAR 0 2
32932: PUSH
32933: LD_INT 22
32935: PUSH
32936: LD_OWVAR 2
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PPUSH
32945: CALL_OW 69
32949: ST_TO_ADDR
// if not tmp then
32950: LD_VAR 0 2
32954: NOT
32955: IFFALSE 32959
// exit ;
32957: GO 32988
// for i in tmp do
32959: LD_ADDR_VAR 0 1
32963: PUSH
32964: LD_VAR 0 2
32968: PUSH
32969: FOR_IN
32970: IFFALSE 32986
// SetLives ( i , 600 ) ;
32972: LD_VAR 0 1
32976: PPUSH
32977: LD_INT 600
32979: PPUSH
32980: CALL_OW 234
32984: GO 32969
32986: POP
32987: POP
// end ;
32988: PPOPN 2
32990: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32991: LD_INT 0
32993: PPUSH
// case cmd of 301 :
32994: LD_VAR 0 1
32998: PUSH
32999: LD_INT 301
33001: DOUBLE
33002: EQUAL
33003: IFTRUE 33007
33005: GO 33039
33007: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33008: LD_VAR 0 6
33012: PPUSH
33013: LD_VAR 0 7
33017: PPUSH
33018: LD_VAR 0 8
33022: PPUSH
33023: LD_VAR 0 4
33027: PPUSH
33028: LD_VAR 0 5
33032: PPUSH
33033: CALL 34248 0 5
33037: GO 33160
33039: LD_INT 302
33041: DOUBLE
33042: EQUAL
33043: IFTRUE 33047
33045: GO 33084
33047: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33048: LD_VAR 0 6
33052: PPUSH
33053: LD_VAR 0 7
33057: PPUSH
33058: LD_VAR 0 8
33062: PPUSH
33063: LD_VAR 0 9
33067: PPUSH
33068: LD_VAR 0 4
33072: PPUSH
33073: LD_VAR 0 5
33077: PPUSH
33078: CALL 34339 0 6
33082: GO 33160
33084: LD_INT 303
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33129
33092: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33093: LD_VAR 0 6
33097: PPUSH
33098: LD_VAR 0 7
33102: PPUSH
33103: LD_VAR 0 8
33107: PPUSH
33108: LD_VAR 0 9
33112: PPUSH
33113: LD_VAR 0 4
33117: PPUSH
33118: LD_VAR 0 5
33122: PPUSH
33123: CALL 33165 0 6
33127: GO 33160
33129: LD_INT 304
33131: DOUBLE
33132: EQUAL
33133: IFTRUE 33137
33135: GO 33159
33137: POP
// hHackTeleport ( unit , x , y ) ; end ;
33138: LD_VAR 0 2
33142: PPUSH
33143: LD_VAR 0 4
33147: PPUSH
33148: LD_VAR 0 5
33152: PPUSH
33153: CALL 34932 0 3
33157: GO 33160
33159: POP
// end ;
33160: LD_VAR 0 12
33164: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33165: LD_INT 0
33167: PPUSH
33168: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33169: LD_VAR 0 1
33173: PUSH
33174: LD_INT 1
33176: LESS
33177: PUSH
33178: LD_VAR 0 1
33182: PUSH
33183: LD_INT 3
33185: GREATER
33186: OR
33187: PUSH
33188: LD_VAR 0 5
33192: PPUSH
33193: LD_VAR 0 6
33197: PPUSH
33198: CALL_OW 428
33202: OR
33203: IFFALSE 33207
// exit ;
33205: GO 33935
// uc_side := your_side ;
33207: LD_ADDR_OWVAR 20
33211: PUSH
33212: LD_OWVAR 2
33216: ST_TO_ADDR
// uc_nation := nation ;
33217: LD_ADDR_OWVAR 21
33221: PUSH
33222: LD_VAR 0 1
33226: ST_TO_ADDR
// bc_level = 1 ;
33227: LD_ADDR_OWVAR 43
33231: PUSH
33232: LD_INT 1
33234: ST_TO_ADDR
// case btype of 1 :
33235: LD_VAR 0 2
33239: PUSH
33240: LD_INT 1
33242: DOUBLE
33243: EQUAL
33244: IFTRUE 33248
33246: GO 33259
33248: POP
// bc_type := b_depot ; 2 :
33249: LD_ADDR_OWVAR 42
33253: PUSH
33254: LD_INT 0
33256: ST_TO_ADDR
33257: GO 33879
33259: LD_INT 2
33261: DOUBLE
33262: EQUAL
33263: IFTRUE 33267
33265: GO 33278
33267: POP
// bc_type := b_warehouse ; 3 :
33268: LD_ADDR_OWVAR 42
33272: PUSH
33273: LD_INT 1
33275: ST_TO_ADDR
33276: GO 33879
33278: LD_INT 3
33280: DOUBLE
33281: EQUAL
33282: IFTRUE 33286
33284: GO 33297
33286: POP
// bc_type := b_lab ; 4 .. 9 :
33287: LD_ADDR_OWVAR 42
33291: PUSH
33292: LD_INT 6
33294: ST_TO_ADDR
33295: GO 33879
33297: LD_INT 4
33299: DOUBLE
33300: GREATEREQUAL
33301: IFFALSE 33309
33303: LD_INT 9
33305: DOUBLE
33306: LESSEQUAL
33307: IFTRUE 33311
33309: GO 33371
33311: POP
// begin bc_type := b_lab_half ;
33312: LD_ADDR_OWVAR 42
33316: PUSH
33317: LD_INT 7
33319: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33320: LD_ADDR_OWVAR 44
33324: PUSH
33325: LD_INT 10
33327: PUSH
33328: LD_INT 11
33330: PUSH
33331: LD_INT 12
33333: PUSH
33334: LD_INT 15
33336: PUSH
33337: LD_INT 14
33339: PUSH
33340: LD_INT 13
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: PUSH
33351: LD_VAR 0 2
33355: PUSH
33356: LD_INT 3
33358: MINUS
33359: ARRAY
33360: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33361: LD_ADDR_OWVAR 45
33365: PUSH
33366: LD_INT 9
33368: ST_TO_ADDR
// end ; 10 .. 13 :
33369: GO 33879
33371: LD_INT 10
33373: DOUBLE
33374: GREATEREQUAL
33375: IFFALSE 33383
33377: LD_INT 13
33379: DOUBLE
33380: LESSEQUAL
33381: IFTRUE 33385
33383: GO 33462
33385: POP
// begin bc_type := b_lab_full ;
33386: LD_ADDR_OWVAR 42
33390: PUSH
33391: LD_INT 8
33393: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33394: LD_ADDR_OWVAR 44
33398: PUSH
33399: LD_INT 10
33401: PUSH
33402: LD_INT 12
33404: PUSH
33405: LD_INT 14
33407: PUSH
33408: LD_INT 13
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: PUSH
33417: LD_VAR 0 2
33421: PUSH
33422: LD_INT 9
33424: MINUS
33425: ARRAY
33426: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33427: LD_ADDR_OWVAR 45
33431: PUSH
33432: LD_INT 11
33434: PUSH
33435: LD_INT 15
33437: PUSH
33438: LD_INT 12
33440: PUSH
33441: LD_INT 15
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: PUSH
33450: LD_VAR 0 2
33454: PUSH
33455: LD_INT 9
33457: MINUS
33458: ARRAY
33459: ST_TO_ADDR
// end ; 14 :
33460: GO 33879
33462: LD_INT 14
33464: DOUBLE
33465: EQUAL
33466: IFTRUE 33470
33468: GO 33481
33470: POP
// bc_type := b_workshop ; 15 :
33471: LD_ADDR_OWVAR 42
33475: PUSH
33476: LD_INT 2
33478: ST_TO_ADDR
33479: GO 33879
33481: LD_INT 15
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33489
33487: GO 33500
33489: POP
// bc_type := b_factory ; 16 :
33490: LD_ADDR_OWVAR 42
33494: PUSH
33495: LD_INT 3
33497: ST_TO_ADDR
33498: GO 33879
33500: LD_INT 16
33502: DOUBLE
33503: EQUAL
33504: IFTRUE 33508
33506: GO 33519
33508: POP
// bc_type := b_ext_gun ; 17 :
33509: LD_ADDR_OWVAR 42
33513: PUSH
33514: LD_INT 17
33516: ST_TO_ADDR
33517: GO 33879
33519: LD_INT 17
33521: DOUBLE
33522: EQUAL
33523: IFTRUE 33527
33525: GO 33555
33527: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33528: LD_ADDR_OWVAR 42
33532: PUSH
33533: LD_INT 19
33535: PUSH
33536: LD_INT 23
33538: PUSH
33539: LD_INT 19
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: LIST
33546: PUSH
33547: LD_VAR 0 1
33551: ARRAY
33552: ST_TO_ADDR
33553: GO 33879
33555: LD_INT 18
33557: DOUBLE
33558: EQUAL
33559: IFTRUE 33563
33561: GO 33574
33563: POP
// bc_type := b_ext_radar ; 19 :
33564: LD_ADDR_OWVAR 42
33568: PUSH
33569: LD_INT 20
33571: ST_TO_ADDR
33572: GO 33879
33574: LD_INT 19
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33582
33580: GO 33593
33582: POP
// bc_type := b_ext_radio ; 20 :
33583: LD_ADDR_OWVAR 42
33587: PUSH
33588: LD_INT 22
33590: ST_TO_ADDR
33591: GO 33879
33593: LD_INT 20
33595: DOUBLE
33596: EQUAL
33597: IFTRUE 33601
33599: GO 33612
33601: POP
// bc_type := b_ext_siberium ; 21 :
33602: LD_ADDR_OWVAR 42
33606: PUSH
33607: LD_INT 21
33609: ST_TO_ADDR
33610: GO 33879
33612: LD_INT 21
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33620
33618: GO 33631
33620: POP
// bc_type := b_ext_computer ; 22 :
33621: LD_ADDR_OWVAR 42
33625: PUSH
33626: LD_INT 24
33628: ST_TO_ADDR
33629: GO 33879
33631: LD_INT 22
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33639
33637: GO 33650
33639: POP
// bc_type := b_ext_track ; 23 :
33640: LD_ADDR_OWVAR 42
33644: PUSH
33645: LD_INT 16
33647: ST_TO_ADDR
33648: GO 33879
33650: LD_INT 23
33652: DOUBLE
33653: EQUAL
33654: IFTRUE 33658
33656: GO 33669
33658: POP
// bc_type := b_ext_laser ; 24 :
33659: LD_ADDR_OWVAR 42
33663: PUSH
33664: LD_INT 25
33666: ST_TO_ADDR
33667: GO 33879
33669: LD_INT 24
33671: DOUBLE
33672: EQUAL
33673: IFTRUE 33677
33675: GO 33688
33677: POP
// bc_type := b_control_tower ; 25 :
33678: LD_ADDR_OWVAR 42
33682: PUSH
33683: LD_INT 36
33685: ST_TO_ADDR
33686: GO 33879
33688: LD_INT 25
33690: DOUBLE
33691: EQUAL
33692: IFTRUE 33696
33694: GO 33707
33696: POP
// bc_type := b_breastwork ; 26 :
33697: LD_ADDR_OWVAR 42
33701: PUSH
33702: LD_INT 31
33704: ST_TO_ADDR
33705: GO 33879
33707: LD_INT 26
33709: DOUBLE
33710: EQUAL
33711: IFTRUE 33715
33713: GO 33726
33715: POP
// bc_type := b_bunker ; 27 :
33716: LD_ADDR_OWVAR 42
33720: PUSH
33721: LD_INT 32
33723: ST_TO_ADDR
33724: GO 33879
33726: LD_INT 27
33728: DOUBLE
33729: EQUAL
33730: IFTRUE 33734
33732: GO 33745
33734: POP
// bc_type := b_turret ; 28 :
33735: LD_ADDR_OWVAR 42
33739: PUSH
33740: LD_INT 33
33742: ST_TO_ADDR
33743: GO 33879
33745: LD_INT 28
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33753
33751: GO 33764
33753: POP
// bc_type := b_armoury ; 29 :
33754: LD_ADDR_OWVAR 42
33758: PUSH
33759: LD_INT 4
33761: ST_TO_ADDR
33762: GO 33879
33764: LD_INT 29
33766: DOUBLE
33767: EQUAL
33768: IFTRUE 33772
33770: GO 33783
33772: POP
// bc_type := b_barracks ; 30 :
33773: LD_ADDR_OWVAR 42
33777: PUSH
33778: LD_INT 5
33780: ST_TO_ADDR
33781: GO 33879
33783: LD_INT 30
33785: DOUBLE
33786: EQUAL
33787: IFTRUE 33791
33789: GO 33802
33791: POP
// bc_type := b_solar_power ; 31 :
33792: LD_ADDR_OWVAR 42
33796: PUSH
33797: LD_INT 27
33799: ST_TO_ADDR
33800: GO 33879
33802: LD_INT 31
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 33821
33810: POP
// bc_type := b_oil_power ; 32 :
33811: LD_ADDR_OWVAR 42
33815: PUSH
33816: LD_INT 26
33818: ST_TO_ADDR
33819: GO 33879
33821: LD_INT 32
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33829
33827: GO 33840
33829: POP
// bc_type := b_siberite_power ; 33 :
33830: LD_ADDR_OWVAR 42
33834: PUSH
33835: LD_INT 28
33837: ST_TO_ADDR
33838: GO 33879
33840: LD_INT 33
33842: DOUBLE
33843: EQUAL
33844: IFTRUE 33848
33846: GO 33859
33848: POP
// bc_type := b_oil_mine ; 34 :
33849: LD_ADDR_OWVAR 42
33853: PUSH
33854: LD_INT 29
33856: ST_TO_ADDR
33857: GO 33879
33859: LD_INT 34
33861: DOUBLE
33862: EQUAL
33863: IFTRUE 33867
33865: GO 33878
33867: POP
// bc_type := b_siberite_mine ; end ;
33868: LD_ADDR_OWVAR 42
33872: PUSH
33873: LD_INT 30
33875: ST_TO_ADDR
33876: GO 33879
33878: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33879: LD_ADDR_VAR 0 8
33883: PUSH
33884: LD_VAR 0 5
33888: PPUSH
33889: LD_VAR 0 6
33893: PPUSH
33894: LD_VAR 0 3
33898: PPUSH
33899: CALL_OW 47
33903: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33904: LD_OWVAR 42
33908: PUSH
33909: LD_INT 32
33911: PUSH
33912: LD_INT 33
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: IN
33919: IFFALSE 33935
// PlaceWeaponTurret ( b , weapon ) ;
33921: LD_VAR 0 8
33925: PPUSH
33926: LD_VAR 0 4
33930: PPUSH
33931: CALL_OW 431
// end ;
33935: LD_VAR 0 7
33939: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33940: LD_INT 0
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33946: LD_ADDR_VAR 0 4
33950: PUSH
33951: LD_INT 22
33953: PUSH
33954: LD_OWVAR 2
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 2
33965: PUSH
33966: LD_INT 30
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 30
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PPUSH
33995: CALL_OW 69
33999: ST_TO_ADDR
// if not tmp then
34000: LD_VAR 0 4
34004: NOT
34005: IFFALSE 34009
// exit ;
34007: GO 34068
// for i in tmp do
34009: LD_ADDR_VAR 0 2
34013: PUSH
34014: LD_VAR 0 4
34018: PUSH
34019: FOR_IN
34020: IFFALSE 34066
// for j = 1 to 3 do
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: DOUBLE
34028: LD_INT 1
34030: DEC
34031: ST_TO_ADDR
34032: LD_INT 3
34034: PUSH
34035: FOR_TO
34036: IFFALSE 34062
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34038: LD_VAR 0 2
34042: PPUSH
34043: CALL_OW 274
34047: PPUSH
34048: LD_VAR 0 3
34052: PPUSH
34053: LD_INT 99999
34055: PPUSH
34056: CALL_OW 277
34060: GO 34035
34062: POP
34063: POP
34064: GO 34019
34066: POP
34067: POP
// end ;
34068: LD_VAR 0 1
34072: RET
// export function hHackSetLevel10 ; var i , j ; begin
34073: LD_INT 0
34075: PPUSH
34076: PPUSH
34077: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34078: LD_ADDR_VAR 0 2
34082: PUSH
34083: LD_INT 21
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PPUSH
34093: CALL_OW 69
34097: PUSH
34098: FOR_IN
34099: IFFALSE 34151
// if IsSelected ( i ) then
34101: LD_VAR 0 2
34105: PPUSH
34106: CALL_OW 306
34110: IFFALSE 34149
// begin for j := 1 to 4 do
34112: LD_ADDR_VAR 0 3
34116: PUSH
34117: DOUBLE
34118: LD_INT 1
34120: DEC
34121: ST_TO_ADDR
34122: LD_INT 4
34124: PUSH
34125: FOR_TO
34126: IFFALSE 34147
// SetSkill ( i , j , 10 ) ;
34128: LD_VAR 0 2
34132: PPUSH
34133: LD_VAR 0 3
34137: PPUSH
34138: LD_INT 10
34140: PPUSH
34141: CALL_OW 237
34145: GO 34125
34147: POP
34148: POP
// end ;
34149: GO 34098
34151: POP
34152: POP
// end ;
34153: LD_VAR 0 1
34157: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34158: LD_INT 0
34160: PPUSH
34161: PPUSH
34162: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34163: LD_ADDR_VAR 0 2
34167: PUSH
34168: LD_INT 22
34170: PUSH
34171: LD_OWVAR 2
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 21
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PPUSH
34194: CALL_OW 69
34198: PUSH
34199: FOR_IN
34200: IFFALSE 34241
// begin for j := 1 to 4 do
34202: LD_ADDR_VAR 0 3
34206: PUSH
34207: DOUBLE
34208: LD_INT 1
34210: DEC
34211: ST_TO_ADDR
34212: LD_INT 4
34214: PUSH
34215: FOR_TO
34216: IFFALSE 34237
// SetSkill ( i , j , 10 ) ;
34218: LD_VAR 0 2
34222: PPUSH
34223: LD_VAR 0 3
34227: PPUSH
34228: LD_INT 10
34230: PPUSH
34231: CALL_OW 237
34235: GO 34215
34237: POP
34238: POP
// end ;
34239: GO 34199
34241: POP
34242: POP
// end ;
34243: LD_VAR 0 1
34247: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34248: LD_INT 0
34250: PPUSH
// uc_side := your_side ;
34251: LD_ADDR_OWVAR 20
34255: PUSH
34256: LD_OWVAR 2
34260: ST_TO_ADDR
// uc_nation := nation ;
34261: LD_ADDR_OWVAR 21
34265: PUSH
34266: LD_VAR 0 1
34270: ST_TO_ADDR
// InitHc ;
34271: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34275: LD_INT 0
34277: PPUSH
34278: LD_VAR 0 2
34282: PPUSH
34283: LD_VAR 0 3
34287: PPUSH
34288: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34292: LD_VAR 0 4
34296: PPUSH
34297: LD_VAR 0 5
34301: PPUSH
34302: CALL_OW 428
34306: PUSH
34307: LD_INT 0
34309: EQUAL
34310: IFFALSE 34334
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34312: CALL_OW 44
34316: PPUSH
34317: LD_VAR 0 4
34321: PPUSH
34322: LD_VAR 0 5
34326: PPUSH
34327: LD_INT 1
34329: PPUSH
34330: CALL_OW 48
// end ;
34334: LD_VAR 0 6
34338: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34339: LD_INT 0
34341: PPUSH
34342: PPUSH
// uc_side := your_side ;
34343: LD_ADDR_OWVAR 20
34347: PUSH
34348: LD_OWVAR 2
34352: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34353: LD_VAR 0 1
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: LD_INT 3
34366: PUSH
34367: LD_INT 4
34369: PUSH
34370: LD_INT 5
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: IN
34380: IFFALSE 34392
// uc_nation := nation_american else
34382: LD_ADDR_OWVAR 21
34386: PUSH
34387: LD_INT 1
34389: ST_TO_ADDR
34390: GO 34435
// if chassis in [ 11 , 12 , 13 , 14 ] then
34392: LD_VAR 0 1
34396: PUSH
34397: LD_INT 11
34399: PUSH
34400: LD_INT 12
34402: PUSH
34403: LD_INT 13
34405: PUSH
34406: LD_INT 14
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: IN
34415: IFFALSE 34427
// uc_nation := nation_arabian else
34417: LD_ADDR_OWVAR 21
34421: PUSH
34422: LD_INT 2
34424: ST_TO_ADDR
34425: GO 34435
// uc_nation := nation_russian ;
34427: LD_ADDR_OWVAR 21
34431: PUSH
34432: LD_INT 3
34434: ST_TO_ADDR
// vc_chassis := chassis ;
34435: LD_ADDR_OWVAR 37
34439: PUSH
34440: LD_VAR 0 1
34444: ST_TO_ADDR
// vc_engine := engine ;
34445: LD_ADDR_OWVAR 39
34449: PUSH
34450: LD_VAR 0 2
34454: ST_TO_ADDR
// vc_control := control ;
34455: LD_ADDR_OWVAR 38
34459: PUSH
34460: LD_VAR 0 3
34464: ST_TO_ADDR
// vc_weapon := weapon ;
34465: LD_ADDR_OWVAR 40
34469: PUSH
34470: LD_VAR 0 4
34474: ST_TO_ADDR
// un := CreateVehicle ;
34475: LD_ADDR_VAR 0 8
34479: PUSH
34480: CALL_OW 45
34484: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34485: LD_VAR 0 8
34489: PPUSH
34490: LD_INT 0
34492: PPUSH
34493: LD_INT 5
34495: PPUSH
34496: CALL_OW 12
34500: PPUSH
34501: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34505: LD_VAR 0 8
34509: PPUSH
34510: LD_VAR 0 5
34514: PPUSH
34515: LD_VAR 0 6
34519: PPUSH
34520: LD_INT 1
34522: PPUSH
34523: CALL_OW 48
// end ;
34527: LD_VAR 0 7
34531: RET
// export hInvincible ; every 1 do
34532: GO 34534
34534: DISABLE
// hInvincible := [ ] ;
34535: LD_ADDR_EXP 95
34539: PUSH
34540: EMPTY
34541: ST_TO_ADDR
34542: END
// every 10 do var i ;
34543: GO 34545
34545: DISABLE
34546: LD_INT 0
34548: PPUSH
// begin enable ;
34549: ENABLE
// if not hInvincible then
34550: LD_EXP 95
34554: NOT
34555: IFFALSE 34559
// exit ;
34557: GO 34603
// for i in hInvincible do
34559: LD_ADDR_VAR 0 1
34563: PUSH
34564: LD_EXP 95
34568: PUSH
34569: FOR_IN
34570: IFFALSE 34601
// if GetLives ( i ) < 1000 then
34572: LD_VAR 0 1
34576: PPUSH
34577: CALL_OW 256
34581: PUSH
34582: LD_INT 1000
34584: LESS
34585: IFFALSE 34599
// SetLives ( i , 1000 ) ;
34587: LD_VAR 0 1
34591: PPUSH
34592: LD_INT 1000
34594: PPUSH
34595: CALL_OW 234
34599: GO 34569
34601: POP
34602: POP
// end ;
34603: PPOPN 1
34605: END
// export function hHackInvincible ; var i ; begin
34606: LD_INT 0
34608: PPUSH
34609: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34610: LD_ADDR_VAR 0 2
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: LD_INT 21
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 21
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: PPUSH
34643: CALL_OW 69
34647: PUSH
34648: FOR_IN
34649: IFFALSE 34710
// if IsSelected ( i ) then
34651: LD_VAR 0 2
34655: PPUSH
34656: CALL_OW 306
34660: IFFALSE 34708
// begin if i in hInvincible then
34662: LD_VAR 0 2
34666: PUSH
34667: LD_EXP 95
34671: IN
34672: IFFALSE 34692
// hInvincible := hInvincible diff i else
34674: LD_ADDR_EXP 95
34678: PUSH
34679: LD_EXP 95
34683: PUSH
34684: LD_VAR 0 2
34688: DIFF
34689: ST_TO_ADDR
34690: GO 34708
// hInvincible := hInvincible union i ;
34692: LD_ADDR_EXP 95
34696: PUSH
34697: LD_EXP 95
34701: PUSH
34702: LD_VAR 0 2
34706: UNION
34707: ST_TO_ADDR
// end ;
34708: GO 34648
34710: POP
34711: POP
// end ;
34712: LD_VAR 0 1
34716: RET
// export function hHackInvisible ; var i , j ; begin
34717: LD_INT 0
34719: PPUSH
34720: PPUSH
34721: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34722: LD_ADDR_VAR 0 2
34726: PUSH
34727: LD_INT 21
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PPUSH
34737: CALL_OW 69
34741: PUSH
34742: FOR_IN
34743: IFFALSE 34767
// if IsSelected ( i ) then
34745: LD_VAR 0 2
34749: PPUSH
34750: CALL_OW 306
34754: IFFALSE 34765
// ComForceInvisible ( i ) ;
34756: LD_VAR 0 2
34760: PPUSH
34761: CALL_OW 496
34765: GO 34742
34767: POP
34768: POP
// end ;
34769: LD_VAR 0 1
34773: RET
// export function hHackChangeYourSide ; begin
34774: LD_INT 0
34776: PPUSH
// if your_side = 8 then
34777: LD_OWVAR 2
34781: PUSH
34782: LD_INT 8
34784: EQUAL
34785: IFFALSE 34797
// your_side := 0 else
34787: LD_ADDR_OWVAR 2
34791: PUSH
34792: LD_INT 0
34794: ST_TO_ADDR
34795: GO 34811
// your_side := your_side + 1 ;
34797: LD_ADDR_OWVAR 2
34801: PUSH
34802: LD_OWVAR 2
34806: PUSH
34807: LD_INT 1
34809: PLUS
34810: ST_TO_ADDR
// end ;
34811: LD_VAR 0 1
34815: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34816: LD_INT 0
34818: PPUSH
34819: PPUSH
34820: PPUSH
// for i in all_units do
34821: LD_ADDR_VAR 0 2
34825: PUSH
34826: LD_OWVAR 3
34830: PUSH
34831: FOR_IN
34832: IFFALSE 34910
// if IsSelected ( i ) then
34834: LD_VAR 0 2
34838: PPUSH
34839: CALL_OW 306
34843: IFFALSE 34908
// begin j := GetSide ( i ) ;
34845: LD_ADDR_VAR 0 3
34849: PUSH
34850: LD_VAR 0 2
34854: PPUSH
34855: CALL_OW 255
34859: ST_TO_ADDR
// if j = 8 then
34860: LD_VAR 0 3
34864: PUSH
34865: LD_INT 8
34867: EQUAL
34868: IFFALSE 34880
// j := 0 else
34870: LD_ADDR_VAR 0 3
34874: PUSH
34875: LD_INT 0
34877: ST_TO_ADDR
34878: GO 34894
// j := j + 1 ;
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_VAR 0 3
34889: PUSH
34890: LD_INT 1
34892: PLUS
34893: ST_TO_ADDR
// SetSide ( i , j ) ;
34894: LD_VAR 0 2
34898: PPUSH
34899: LD_VAR 0 3
34903: PPUSH
34904: CALL_OW 235
// end ;
34908: GO 34831
34910: POP
34911: POP
// end ;
34912: LD_VAR 0 1
34916: RET
// export function hHackFog ; begin
34917: LD_INT 0
34919: PPUSH
// FogOff ( true ) ;
34920: LD_INT 1
34922: PPUSH
34923: CALL_OW 344
// end ;
34927: LD_VAR 0 1
34931: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34932: LD_INT 0
34934: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34935: LD_VAR 0 1
34939: PPUSH
34940: LD_VAR 0 2
34944: PPUSH
34945: LD_VAR 0 3
34949: PPUSH
34950: LD_INT 1
34952: PPUSH
34953: LD_INT 1
34955: PPUSH
34956: CALL_OW 483
// CenterOnXY ( x , y ) ;
34960: LD_VAR 0 2
34964: PPUSH
34965: LD_VAR 0 3
34969: PPUSH
34970: CALL_OW 84
// end ;
34974: LD_VAR 0 4
34978: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34979: LD_INT 0
34981: PPUSH
34982: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34983: LD_VAR 0 1
34987: NOT
34988: PUSH
34989: LD_VAR 0 2
34993: PPUSH
34994: LD_VAR 0 3
34998: PPUSH
34999: CALL_OW 488
35003: NOT
35004: OR
35005: PUSH
35006: LD_VAR 0 1
35010: PPUSH
35011: CALL_OW 266
35015: PUSH
35016: LD_INT 3
35018: NONEQUAL
35019: PUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: CALL_OW 247
35029: PUSH
35030: LD_INT 1
35032: EQUAL
35033: NOT
35034: AND
35035: OR
35036: IFFALSE 35040
// exit ;
35038: GO 35322
// if GetType ( factory ) = unit_human then
35040: LD_VAR 0 1
35044: PPUSH
35045: CALL_OW 247
35049: PUSH
35050: LD_INT 1
35052: EQUAL
35053: IFFALSE 35070
// factory := IsInUnit ( factory ) ;
35055: LD_ADDR_VAR 0 1
35059: PUSH
35060: LD_VAR 0 1
35064: PPUSH
35065: CALL_OW 310
35069: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35070: LD_VAR 0 1
35074: PPUSH
35075: CALL_OW 266
35079: PUSH
35080: LD_INT 3
35082: NONEQUAL
35083: IFFALSE 35087
// exit ;
35085: GO 35322
// for i := 1 to Count ( factoryWaypoints ) do
35087: LD_ADDR_VAR 0 5
35091: PUSH
35092: DOUBLE
35093: LD_INT 1
35095: DEC
35096: ST_TO_ADDR
35097: LD_EXP 96
35101: PPUSH
35102: CALL 43888 0 1
35106: PUSH
35107: FOR_TO
35108: IFFALSE 35270
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35110: LD_VAR 0 2
35114: PPUSH
35115: LD_VAR 0 3
35119: PPUSH
35120: CALL_OW 428
35124: PUSH
35125: LD_EXP 96
35129: PUSH
35130: LD_VAR 0 5
35134: ARRAY
35135: PUSH
35136: LD_INT 2
35138: ARRAY
35139: EQUAL
35140: IFFALSE 35172
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35142: LD_ADDR_EXP 96
35146: PUSH
35147: LD_EXP 96
35151: PPUSH
35152: LD_VAR 0 5
35156: PPUSH
35157: CALL_OW 3
35161: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35162: CALL 35327 0 0
// exit ;
35166: POP
35167: POP
35168: GO 35322
// end else
35170: GO 35268
// if factory = factoryWaypoints [ i ] [ 2 ] then
35172: LD_VAR 0 1
35176: PUSH
35177: LD_EXP 96
35181: PUSH
35182: LD_VAR 0 5
35186: ARRAY
35187: PUSH
35188: LD_INT 2
35190: ARRAY
35191: EQUAL
35192: IFFALSE 35268
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35194: LD_ADDR_EXP 96
35198: PUSH
35199: LD_EXP 96
35203: PPUSH
35204: LD_VAR 0 5
35208: PPUSH
35209: CALL_OW 3
35213: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35214: LD_ADDR_EXP 96
35218: PUSH
35219: LD_EXP 96
35223: PPUSH
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL_OW 255
35233: PUSH
35234: LD_VAR 0 1
35238: PUSH
35239: LD_VAR 0 2
35243: PUSH
35244: LD_VAR 0 3
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: PPUSH
35255: CALL 79497 0 2
35259: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35260: CALL 35327 0 0
// exit ;
35264: POP
35265: POP
35266: GO 35322
// end ; end ;
35268: GO 35107
35270: POP
35271: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35272: LD_ADDR_EXP 96
35276: PUSH
35277: LD_EXP 96
35281: PPUSH
35282: LD_VAR 0 1
35286: PPUSH
35287: CALL_OW 255
35291: PUSH
35292: LD_VAR 0 1
35296: PUSH
35297: LD_VAR 0 2
35301: PUSH
35302: LD_VAR 0 3
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: PPUSH
35313: CALL 79497 0 2
35317: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35318: CALL 35327 0 0
// end ;
35322: LD_VAR 0 4
35326: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35327: LD_INT 0
35329: PPUSH
35330: PPUSH
35331: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35332: LD_STRING resetFactoryWaypoint();
35334: PPUSH
35335: CALL_OW 559
// if factoryWaypoints then
35339: LD_EXP 96
35343: IFFALSE 35464
// begin list := factoryWaypoints ;
35345: LD_ADDR_VAR 0 3
35349: PUSH
35350: LD_EXP 96
35354: ST_TO_ADDR
// for i := 1 to list do
35355: LD_ADDR_VAR 0 2
35359: PUSH
35360: DOUBLE
35361: LD_INT 1
35363: DEC
35364: ST_TO_ADDR
35365: LD_VAR 0 3
35369: PUSH
35370: FOR_TO
35371: IFFALSE 35462
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35373: LD_STRING setFactoryWaypointXY(
35375: PUSH
35376: LD_VAR 0 3
35380: PUSH
35381: LD_VAR 0 2
35385: ARRAY
35386: PUSH
35387: LD_INT 1
35389: ARRAY
35390: STR
35391: PUSH
35392: LD_STRING ,
35394: STR
35395: PUSH
35396: LD_VAR 0 3
35400: PUSH
35401: LD_VAR 0 2
35405: ARRAY
35406: PUSH
35407: LD_INT 2
35409: ARRAY
35410: STR
35411: PUSH
35412: LD_STRING ,
35414: STR
35415: PUSH
35416: LD_VAR 0 3
35420: PUSH
35421: LD_VAR 0 2
35425: ARRAY
35426: PUSH
35427: LD_INT 3
35429: ARRAY
35430: STR
35431: PUSH
35432: LD_STRING ,
35434: STR
35435: PUSH
35436: LD_VAR 0 3
35440: PUSH
35441: LD_VAR 0 2
35445: ARRAY
35446: PUSH
35447: LD_INT 4
35449: ARRAY
35450: STR
35451: PUSH
35452: LD_STRING )
35454: STR
35455: PPUSH
35456: CALL_OW 559
35460: GO 35370
35462: POP
35463: POP
// end ; end ;
35464: LD_VAR 0 1
35468: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35469: LD_INT 0
35471: PPUSH
// if HexInfo ( x , y ) = warehouse then
35472: LD_VAR 0 2
35476: PPUSH
35477: LD_VAR 0 3
35481: PPUSH
35482: CALL_OW 428
35486: PUSH
35487: LD_VAR 0 1
35491: EQUAL
35492: IFFALSE 35519
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35494: LD_ADDR_EXP 97
35498: PUSH
35499: LD_EXP 97
35503: PPUSH
35504: LD_VAR 0 1
35508: PPUSH
35509: LD_INT 0
35511: PPUSH
35512: CALL_OW 1
35516: ST_TO_ADDR
35517: GO 35570
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35519: LD_ADDR_EXP 97
35523: PUSH
35524: LD_EXP 97
35528: PPUSH
35529: LD_VAR 0 1
35533: PPUSH
35534: LD_VAR 0 1
35538: PPUSH
35539: CALL_OW 255
35543: PUSH
35544: LD_VAR 0 1
35548: PUSH
35549: LD_VAR 0 2
35553: PUSH
35554: LD_VAR 0 3
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: PPUSH
35565: CALL_OW 1
35569: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35570: CALL 35579 0 0
// end ;
35574: LD_VAR 0 4
35578: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35579: LD_INT 0
35581: PPUSH
35582: PPUSH
35583: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35584: LD_STRING resetWarehouseGatheringPoints();
35586: PPUSH
35587: CALL_OW 559
// if warehouseGatheringPoints then
35591: LD_EXP 97
35595: IFFALSE 35721
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35597: LD_ADDR_VAR 0 3
35601: PUSH
35602: LD_EXP 97
35606: PPUSH
35607: CALL 83265 0 1
35611: ST_TO_ADDR
// for i := 1 to list do
35612: LD_ADDR_VAR 0 2
35616: PUSH
35617: DOUBLE
35618: LD_INT 1
35620: DEC
35621: ST_TO_ADDR
35622: LD_VAR 0 3
35626: PUSH
35627: FOR_TO
35628: IFFALSE 35719
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35630: LD_STRING setWarehouseGatheringPointXY(
35632: PUSH
35633: LD_VAR 0 3
35637: PUSH
35638: LD_VAR 0 2
35642: ARRAY
35643: PUSH
35644: LD_INT 1
35646: ARRAY
35647: STR
35648: PUSH
35649: LD_STRING ,
35651: STR
35652: PUSH
35653: LD_VAR 0 3
35657: PUSH
35658: LD_VAR 0 2
35662: ARRAY
35663: PUSH
35664: LD_INT 2
35666: ARRAY
35667: STR
35668: PUSH
35669: LD_STRING ,
35671: STR
35672: PUSH
35673: LD_VAR 0 3
35677: PUSH
35678: LD_VAR 0 2
35682: ARRAY
35683: PUSH
35684: LD_INT 3
35686: ARRAY
35687: STR
35688: PUSH
35689: LD_STRING ,
35691: STR
35692: PUSH
35693: LD_VAR 0 3
35697: PUSH
35698: LD_VAR 0 2
35702: ARRAY
35703: PUSH
35704: LD_INT 4
35706: ARRAY
35707: STR
35708: PUSH
35709: LD_STRING )
35711: STR
35712: PPUSH
35713: CALL_OW 559
35717: GO 35627
35719: POP
35720: POP
// end ; end ;
35721: LD_VAR 0 1
35725: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35726: LD_EXP 97
35730: IFFALSE 36415
35732: GO 35734
35734: DISABLE
35735: LD_INT 0
35737: PPUSH
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
// begin enable ;
35746: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35747: LD_ADDR_VAR 0 3
35751: PUSH
35752: LD_EXP 97
35756: PPUSH
35757: CALL 83265 0 1
35761: ST_TO_ADDR
// if not list then
35762: LD_VAR 0 3
35766: NOT
35767: IFFALSE 35771
// exit ;
35769: GO 36415
// for i := 1 to list do
35771: LD_ADDR_VAR 0 1
35775: PUSH
35776: DOUBLE
35777: LD_INT 1
35779: DEC
35780: ST_TO_ADDR
35781: LD_VAR 0 3
35785: PUSH
35786: FOR_TO
35787: IFFALSE 36413
// begin depot := list [ i ] [ 2 ] ;
35789: LD_ADDR_VAR 0 8
35793: PUSH
35794: LD_VAR 0 3
35798: PUSH
35799: LD_VAR 0 1
35803: ARRAY
35804: PUSH
35805: LD_INT 2
35807: ARRAY
35808: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35809: LD_ADDR_VAR 0 5
35813: PUSH
35814: LD_VAR 0 3
35818: PUSH
35819: LD_VAR 0 1
35823: ARRAY
35824: PUSH
35825: LD_INT 1
35827: ARRAY
35828: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35829: LD_VAR 0 8
35833: PPUSH
35834: CALL_OW 301
35838: PUSH
35839: LD_VAR 0 5
35843: PUSH
35844: LD_VAR 0 8
35848: PPUSH
35849: CALL_OW 255
35853: NONEQUAL
35854: OR
35855: IFFALSE 35884
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35857: LD_ADDR_EXP 97
35861: PUSH
35862: LD_EXP 97
35866: PPUSH
35867: LD_VAR 0 8
35871: PPUSH
35872: LD_INT 0
35874: PPUSH
35875: CALL_OW 1
35879: ST_TO_ADDR
// exit ;
35880: POP
35881: POP
35882: GO 36415
// end ; x := list [ i ] [ 3 ] ;
35884: LD_ADDR_VAR 0 6
35888: PUSH
35889: LD_VAR 0 3
35893: PUSH
35894: LD_VAR 0 1
35898: ARRAY
35899: PUSH
35900: LD_INT 3
35902: ARRAY
35903: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35904: LD_ADDR_VAR 0 7
35908: PUSH
35909: LD_VAR 0 3
35913: PUSH
35914: LD_VAR 0 1
35918: ARRAY
35919: PUSH
35920: LD_INT 4
35922: ARRAY
35923: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35924: LD_ADDR_VAR 0 9
35928: PUSH
35929: LD_VAR 0 6
35933: PPUSH
35934: LD_VAR 0 7
35938: PPUSH
35939: LD_INT 16
35941: PPUSH
35942: CALL 81849 0 3
35946: ST_TO_ADDR
// if not cratesNearbyPoint then
35947: LD_VAR 0 9
35951: NOT
35952: IFFALSE 35958
// exit ;
35954: POP
35955: POP
35956: GO 36415
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35958: LD_ADDR_VAR 0 4
35962: PUSH
35963: LD_INT 22
35965: PUSH
35966: LD_VAR 0 5
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 3
35977: PUSH
35978: LD_INT 60
35980: PUSH
35981: EMPTY
35982: LIST
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 91
35990: PUSH
35991: LD_VAR 0 8
35995: PUSH
35996: LD_INT 6
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: LD_INT 25
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 25
36019: PUSH
36020: LD_INT 16
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: PPUSH
36038: CALL_OW 69
36042: PUSH
36043: LD_VAR 0 8
36047: PPUSH
36048: CALL_OW 313
36052: PPUSH
36053: LD_INT 3
36055: PUSH
36056: LD_INT 60
36058: PUSH
36059: EMPTY
36060: LIST
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: LD_INT 25
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 25
36081: PUSH
36082: LD_INT 16
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PPUSH
36098: CALL_OW 72
36102: UNION
36103: ST_TO_ADDR
// if tmp then
36104: LD_VAR 0 4
36108: IFFALSE 36188
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36110: LD_ADDR_VAR 0 4
36114: PUSH
36115: LD_VAR 0 4
36119: PPUSH
36120: LD_INT 3
36122: PPUSH
36123: CALL 79812 0 2
36127: ST_TO_ADDR
// for j in tmp do
36128: LD_ADDR_VAR 0 2
36132: PUSH
36133: LD_VAR 0 4
36137: PUSH
36138: FOR_IN
36139: IFFALSE 36182
// begin if IsInUnit ( j ) then
36141: LD_VAR 0 2
36145: PPUSH
36146: CALL_OW 310
36150: IFFALSE 36161
// ComExit ( j ) ;
36152: LD_VAR 0 2
36156: PPUSH
36157: CALL 79895 0 1
// AddComCollect ( j , x , y ) ;
36161: LD_VAR 0 2
36165: PPUSH
36166: LD_VAR 0 6
36170: PPUSH
36171: LD_VAR 0 7
36175: PPUSH
36176: CALL_OW 177
// end ;
36180: GO 36138
36182: POP
36183: POP
// exit ;
36184: POP
36185: POP
36186: GO 36415
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36188: LD_ADDR_VAR 0 4
36192: PUSH
36193: LD_INT 22
36195: PUSH
36196: LD_VAR 0 5
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 91
36207: PUSH
36208: LD_VAR 0 8
36212: PUSH
36213: LD_INT 8
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 34
36226: PUSH
36227: LD_INT 12
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 34
36236: PUSH
36237: LD_INT 51
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 34
36246: PUSH
36247: LD_INT 32
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 34
36256: PUSH
36257: LD_INT 89
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: PPUSH
36276: CALL_OW 69
36280: ST_TO_ADDR
// if tmp then
36281: LD_VAR 0 4
36285: IFFALSE 36411
// begin for j in tmp do
36287: LD_ADDR_VAR 0 2
36291: PUSH
36292: LD_VAR 0 4
36296: PUSH
36297: FOR_IN
36298: IFFALSE 36409
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36300: LD_VAR 0 2
36304: PPUSH
36305: CALL_OW 262
36309: PUSH
36310: LD_INT 3
36312: EQUAL
36313: PUSH
36314: LD_VAR 0 2
36318: PPUSH
36319: CALL_OW 261
36323: PUSH
36324: LD_INT 20
36326: GREATER
36327: OR
36328: PUSH
36329: LD_VAR 0 2
36333: PPUSH
36334: CALL_OW 314
36338: NOT
36339: AND
36340: PUSH
36341: LD_VAR 0 2
36345: PPUSH
36346: CALL_OW 263
36350: PUSH
36351: LD_INT 1
36353: NONEQUAL
36354: PUSH
36355: LD_VAR 0 2
36359: PPUSH
36360: CALL_OW 311
36364: OR
36365: AND
36366: IFFALSE 36407
// begin ComCollect ( j , x , y ) ;
36368: LD_VAR 0 2
36372: PPUSH
36373: LD_VAR 0 6
36377: PPUSH
36378: LD_VAR 0 7
36382: PPUSH
36383: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36387: LD_VAR 0 2
36391: PPUSH
36392: LD_VAR 0 8
36396: PPUSH
36397: CALL_OW 172
// exit ;
36401: POP
36402: POP
36403: POP
36404: POP
36405: GO 36415
// end ;
36407: GO 36297
36409: POP
36410: POP
// end ; end ;
36411: GO 35786
36413: POP
36414: POP
// end ; end_of_file
36415: PPOPN 9
36417: END
// export function SOS_UnitDestroyed ( un ) ; begin
36418: LD_INT 0
36420: PPUSH
// ComRadiation ( un ) ;
36421: LD_VAR 0 1
36425: PPUSH
36426: CALL 37407 0 1
// end ;
36430: LD_VAR 0 2
36434: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36435: LD_INT 0
36437: PPUSH
// ComRadiation ( un ) ;
36438: LD_VAR 0 1
36442: PPUSH
36443: CALL 37407 0 1
// end ;
36447: LD_VAR 0 2
36451: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36452: LD_INT 0
36454: PPUSH
// end ;
36455: LD_VAR 0 4
36459: RET
// export function SOS_Command ( cmd ) ; begin
36460: LD_INT 0
36462: PPUSH
// end ;
36463: LD_VAR 0 2
36467: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36468: LD_INT 0
36470: PPUSH
// end ;
36471: LD_VAR 0 6
36475: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
36476: LD_INT 0
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
// if not vehicle or not factory then
36483: LD_VAR 0 1
36487: NOT
36488: PUSH
36489: LD_VAR 0 2
36493: NOT
36494: OR
36495: IFFALSE 36499
// exit ;
36497: GO 36998
// if not factoryWaypoints then
36499: LD_EXP 96
36503: NOT
36504: IFFALSE 36508
// exit ;
36506: GO 36998
// for i := 1 to Count ( factoryWaypoints ) do
36508: LD_ADDR_VAR 0 4
36512: PUSH
36513: DOUBLE
36514: LD_INT 1
36516: DEC
36517: ST_TO_ADDR
36518: LD_EXP 96
36522: PPUSH
36523: CALL 43888 0 1
36527: PUSH
36528: FOR_TO
36529: IFFALSE 36996
// if factoryWaypoints [ i ] [ 2 ] = factory then
36531: LD_EXP 96
36535: PUSH
36536: LD_VAR 0 4
36540: ARRAY
36541: PUSH
36542: LD_INT 2
36544: ARRAY
36545: PUSH
36546: LD_VAR 0 2
36550: EQUAL
36551: IFFALSE 36994
// begin if GetControl ( vehicle ) = control_manual then
36553: LD_VAR 0 1
36557: PPUSH
36558: CALL_OW 263
36562: PUSH
36563: LD_INT 1
36565: EQUAL
36566: IFFALSE 36877
// begin driver := IsDrivenBy ( vehicle ) ;
36568: LD_ADDR_VAR 0 6
36572: PUSH
36573: LD_VAR 0 1
36577: PPUSH
36578: CALL_OW 311
36582: ST_TO_ADDR
// tag := GetTag ( driver ) ;
36583: LD_ADDR_VAR 0 5
36587: PUSH
36588: LD_VAR 0 6
36592: PPUSH
36593: CALL_OW 110
36597: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
36598: LD_VAR 0 5
36602: PUSH
36603: LD_INT 501
36605: EQUAL
36606: PUSH
36607: LD_VAR 0 1
36611: PPUSH
36612: CALL_OW 110
36616: PUSH
36617: LD_INT 501
36619: EQUAL
36620: OR
36621: IFFALSE 36627
// exit ;
36623: POP
36624: POP
36625: GO 36998
// if not HasTask ( driver ) then
36627: LD_VAR 0 6
36631: PPUSH
36632: CALL_OW 314
36636: NOT
36637: IFFALSE 36875
// begin SetTag ( driver , tDriver ) ;
36639: LD_VAR 0 6
36643: PPUSH
36644: LD_INT 501
36646: PPUSH
36647: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
36651: LD_VAR 0 1
36655: PPUSH
36656: LD_INT 501
36658: PPUSH
36659: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36663: LD_ADDR_VAR 0 7
36667: PUSH
36668: LD_EXP 96
36672: PUSH
36673: LD_VAR 0 4
36677: ARRAY
36678: PUSH
36679: LD_INT 3
36681: ARRAY
36682: PPUSH
36683: LD_EXP 96
36687: PUSH
36688: LD_VAR 0 4
36692: ARRAY
36693: PUSH
36694: LD_INT 4
36696: ARRAY
36697: PPUSH
36698: CALL_OW 428
36702: ST_TO_ADDR
// if hex then
36703: LD_VAR 0 7
36707: IFFALSE 36725
// ComMoveUnit ( driver , hex ) else
36709: LD_VAR 0 6
36713: PPUSH
36714: LD_VAR 0 7
36718: PPUSH
36719: CALL_OW 112
36723: GO 36764
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36725: LD_VAR 0 6
36729: PPUSH
36730: LD_EXP 96
36734: PUSH
36735: LD_VAR 0 4
36739: ARRAY
36740: PUSH
36741: LD_INT 3
36743: ARRAY
36744: PPUSH
36745: LD_EXP 96
36749: PUSH
36750: LD_VAR 0 4
36754: ARRAY
36755: PUSH
36756: LD_INT 4
36758: ARRAY
36759: PPUSH
36760: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36764: LD_VAR 0 6
36768: PPUSH
36769: CALL_OW 181
// if Multiplayer then
36773: LD_OWVAR 4
36777: IFFALSE 36826
// begin repeat wait ( 10 ) ;
36779: LD_INT 10
36781: PPUSH
36782: CALL_OW 67
// until not IsInUnit ( driver ) ;
36786: LD_VAR 0 6
36790: PPUSH
36791: CALL_OW 310
36795: NOT
36796: IFFALSE 36779
// if not HasTask ( driver ) then
36798: LD_VAR 0 6
36802: PPUSH
36803: CALL_OW 314
36807: NOT
36808: IFFALSE 36824
// ComEnterUnit ( driver , factory ) ;
36810: LD_VAR 0 6
36814: PPUSH
36815: LD_VAR 0 2
36819: PPUSH
36820: CALL_OW 120
// end else
36824: GO 36840
// AddComEnterUnit ( driver , factory ) ;
36826: LD_VAR 0 6
36830: PPUSH
36831: LD_VAR 0 2
36835: PPUSH
36836: CALL_OW 180
// wait ( 0 0$1 ) ;
36840: LD_INT 35
36842: PPUSH
36843: CALL_OW 67
// SetTag ( driver , tag ) ;
36847: LD_VAR 0 6
36851: PPUSH
36852: LD_VAR 0 5
36856: PPUSH
36857: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
36861: LD_VAR 0 1
36865: PPUSH
36866: LD_INT 0
36868: PPUSH
36869: CALL_OW 109
// break ;
36873: GO 36996
// end ; end else
36875: GO 36994
// if GetControl ( vehicle ) = control_remote then
36877: LD_VAR 0 1
36881: PPUSH
36882: CALL_OW 263
36886: PUSH
36887: LD_INT 2
36889: EQUAL
36890: IFFALSE 36953
// begin wait ( 0 0$2 ) ;
36892: LD_INT 70
36894: PPUSH
36895: CALL_OW 67
// if Connect ( vehicle ) then
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL 50094 0 1
36908: IFFALSE 36949
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36910: LD_VAR 0 1
36914: PPUSH
36915: LD_EXP 96
36919: PUSH
36920: LD_VAR 0 4
36924: ARRAY
36925: PUSH
36926: LD_INT 3
36928: ARRAY
36929: PPUSH
36930: LD_EXP 96
36934: PUSH
36935: LD_VAR 0 4
36939: ARRAY
36940: PUSH
36941: LD_INT 4
36943: ARRAY
36944: PPUSH
36945: CALL_OW 171
// break ;
36949: GO 36996
// end else
36951: GO 36994
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36953: LD_VAR 0 1
36957: PPUSH
36958: LD_EXP 96
36962: PUSH
36963: LD_VAR 0 4
36967: ARRAY
36968: PUSH
36969: LD_INT 3
36971: ARRAY
36972: PPUSH
36973: LD_EXP 96
36977: PUSH
36978: LD_VAR 0 4
36982: ARRAY
36983: PUSH
36984: LD_INT 4
36986: ARRAY
36987: PPUSH
36988: CALL_OW 171
// break ;
36992: GO 36996
// end ; end ;
36994: GO 36528
36996: POP
36997: POP
// end ;
36998: LD_VAR 0 3
37002: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37003: LD_INT 0
37005: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37006: LD_VAR 0 1
37010: PUSH
37011: LD_INT 250
37013: EQUAL
37014: PUSH
37015: LD_VAR 0 2
37019: PPUSH
37020: CALL_OW 264
37024: PUSH
37025: LD_INT 81
37027: EQUAL
37028: AND
37029: IFFALSE 37050
// MinerPlaceMine ( unit , x , y ) ;
37031: LD_VAR 0 2
37035: PPUSH
37036: LD_VAR 0 4
37040: PPUSH
37041: LD_VAR 0 5
37045: PPUSH
37046: CALL 40142 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37050: LD_VAR 0 1
37054: PUSH
37055: LD_INT 251
37057: EQUAL
37058: PUSH
37059: LD_VAR 0 2
37063: PPUSH
37064: CALL_OW 264
37068: PUSH
37069: LD_INT 81
37071: EQUAL
37072: AND
37073: IFFALSE 37094
// MinerDetonateMine ( unit , x , y ) ;
37075: LD_VAR 0 2
37079: PPUSH
37080: LD_VAR 0 4
37084: PPUSH
37085: LD_VAR 0 5
37089: PPUSH
37090: CALL 40417 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37094: LD_VAR 0 1
37098: PUSH
37099: LD_INT 252
37101: EQUAL
37102: PUSH
37103: LD_VAR 0 2
37107: PPUSH
37108: CALL_OW 264
37112: PUSH
37113: LD_INT 81
37115: EQUAL
37116: AND
37117: IFFALSE 37138
// MinerCreateMinefield ( unit , x , y ) ;
37119: LD_VAR 0 2
37123: PPUSH
37124: LD_VAR 0 4
37128: PPUSH
37129: LD_VAR 0 5
37133: PPUSH
37134: CALL 40834 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37138: LD_VAR 0 1
37142: PUSH
37143: LD_INT 253
37145: EQUAL
37146: PUSH
37147: LD_VAR 0 2
37151: PPUSH
37152: CALL_OW 257
37156: PUSH
37157: LD_INT 5
37159: EQUAL
37160: AND
37161: IFFALSE 37182
// ComBinocular ( unit , x , y ) ;
37163: LD_VAR 0 2
37167: PPUSH
37168: LD_VAR 0 4
37172: PPUSH
37173: LD_VAR 0 5
37177: PPUSH
37178: CALL 41203 0 3
// if selectedUnit then
37182: LD_VAR 0 3
37186: IFFALSE 37242
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37188: LD_VAR 0 1
37192: PUSH
37193: LD_INT 254
37195: EQUAL
37196: PUSH
37197: LD_VAR 0 2
37201: PPUSH
37202: CALL_OW 264
37206: PUSH
37207: LD_INT 99
37209: EQUAL
37210: AND
37211: PUSH
37212: LD_VAR 0 3
37216: PPUSH
37217: CALL_OW 263
37221: PUSH
37222: LD_INT 3
37224: EQUAL
37225: AND
37226: IFFALSE 37242
// HackDestroyVehicle ( unit , selectedUnit ) ;
37228: LD_VAR 0 2
37232: PPUSH
37233: LD_VAR 0 3
37237: PPUSH
37238: CALL 39506 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37242: LD_VAR 0 1
37246: PUSH
37247: LD_INT 255
37249: EQUAL
37250: PUSH
37251: LD_VAR 0 2
37255: PPUSH
37256: CALL_OW 264
37260: PUSH
37261: LD_INT 14
37263: PUSH
37264: LD_INT 53
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: IN
37271: AND
37272: PUSH
37273: LD_VAR 0 4
37277: PPUSH
37278: LD_VAR 0 5
37282: PPUSH
37283: CALL_OW 488
37287: AND
37288: IFFALSE 37312
// CutTreeXYR ( unit , x , y , 12 ) ;
37290: LD_VAR 0 2
37294: PPUSH
37295: LD_VAR 0 4
37299: PPUSH
37300: LD_VAR 0 5
37304: PPUSH
37305: LD_INT 12
37307: PPUSH
37308: CALL 37503 0 4
// if cmd = 256 then
37312: LD_VAR 0 1
37316: PUSH
37317: LD_INT 256
37319: EQUAL
37320: IFFALSE 37341
// SetFactoryWaypoint ( unit , x , y ) ;
37322: LD_VAR 0 2
37326: PPUSH
37327: LD_VAR 0 4
37331: PPUSH
37332: LD_VAR 0 5
37336: PPUSH
37337: CALL 34979 0 3
// if cmd = 257 then
37341: LD_VAR 0 1
37345: PUSH
37346: LD_INT 257
37348: EQUAL
37349: IFFALSE 37370
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37351: LD_VAR 0 2
37355: PPUSH
37356: LD_VAR 0 4
37360: PPUSH
37361: LD_VAR 0 5
37365: PPUSH
37366: CALL 35469 0 3
// if cmd = 258 then
37370: LD_VAR 0 1
37374: PUSH
37375: LD_INT 258
37377: EQUAL
37378: IFFALSE 37402
// BurnTreeXYR ( unit , x , y , 8 ) ;
37380: LD_VAR 0 2
37384: PPUSH
37385: LD_VAR 0 4
37389: PPUSH
37390: LD_VAR 0 5
37394: PPUSH
37395: LD_INT 8
37397: PPUSH
37398: CALL 37897 0 4
// end ;
37402: LD_VAR 0 6
37406: RET
// export function ComRadiation ( un ) ; var eff ; begin
37407: LD_INT 0
37409: PPUSH
37410: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37411: LD_VAR 0 1
37415: PPUSH
37416: CALL_OW 264
37420: PUSH
37421: LD_INT 91
37423: NONEQUAL
37424: IFFALSE 37428
// exit ;
37426: GO 37498
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37428: LD_INT 68
37430: PPUSH
37431: LD_VAR 0 1
37435: PPUSH
37436: CALL_OW 255
37440: PPUSH
37441: CALL_OW 321
37445: PUSH
37446: LD_INT 2
37448: EQUAL
37449: IFFALSE 37461
// eff := 70 else
37451: LD_ADDR_VAR 0 3
37455: PUSH
37456: LD_INT 70
37458: ST_TO_ADDR
37459: GO 37469
// eff := 30 ;
37461: LD_ADDR_VAR 0 3
37465: PUSH
37466: LD_INT 30
37468: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL_OW 250
37478: PPUSH
37479: LD_VAR 0 1
37483: PPUSH
37484: CALL_OW 251
37488: PPUSH
37489: LD_VAR 0 3
37493: PPUSH
37494: CALL_OW 495
// end ;
37498: LD_VAR 0 2
37502: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37503: LD_INT 0
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
37512: PPUSH
37513: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37514: LD_VAR 0 1
37518: PPUSH
37519: CALL_OW 302
37523: NOT
37524: PUSH
37525: LD_VAR 0 2
37529: PPUSH
37530: LD_VAR 0 3
37534: PPUSH
37535: CALL_OW 488
37539: NOT
37540: OR
37541: PUSH
37542: LD_VAR 0 4
37546: NOT
37547: OR
37548: IFFALSE 37552
// exit ;
37550: GO 37892
// list := [ ] ;
37552: LD_ADDR_VAR 0 13
37556: PUSH
37557: EMPTY
37558: ST_TO_ADDR
// if x - r < 0 then
37559: LD_VAR 0 2
37563: PUSH
37564: LD_VAR 0 4
37568: MINUS
37569: PUSH
37570: LD_INT 0
37572: LESS
37573: IFFALSE 37585
// min_x := 0 else
37575: LD_ADDR_VAR 0 7
37579: PUSH
37580: LD_INT 0
37582: ST_TO_ADDR
37583: GO 37601
// min_x := x - r ;
37585: LD_ADDR_VAR 0 7
37589: PUSH
37590: LD_VAR 0 2
37594: PUSH
37595: LD_VAR 0 4
37599: MINUS
37600: ST_TO_ADDR
// if y - r < 0 then
37601: LD_VAR 0 3
37605: PUSH
37606: LD_VAR 0 4
37610: MINUS
37611: PUSH
37612: LD_INT 0
37614: LESS
37615: IFFALSE 37627
// min_y := 0 else
37617: LD_ADDR_VAR 0 8
37621: PUSH
37622: LD_INT 0
37624: ST_TO_ADDR
37625: GO 37643
// min_y := y - r ;
37627: LD_ADDR_VAR 0 8
37631: PUSH
37632: LD_VAR 0 3
37636: PUSH
37637: LD_VAR 0 4
37641: MINUS
37642: ST_TO_ADDR
// max_x := x + r ;
37643: LD_ADDR_VAR 0 9
37647: PUSH
37648: LD_VAR 0 2
37652: PUSH
37653: LD_VAR 0 4
37657: PLUS
37658: ST_TO_ADDR
// max_y := y + r ;
37659: LD_ADDR_VAR 0 10
37663: PUSH
37664: LD_VAR 0 3
37668: PUSH
37669: LD_VAR 0 4
37673: PLUS
37674: ST_TO_ADDR
// for _x = min_x to max_x do
37675: LD_ADDR_VAR 0 11
37679: PUSH
37680: DOUBLE
37681: LD_VAR 0 7
37685: DEC
37686: ST_TO_ADDR
37687: LD_VAR 0 9
37691: PUSH
37692: FOR_TO
37693: IFFALSE 37810
// for _y = min_y to max_y do
37695: LD_ADDR_VAR 0 12
37699: PUSH
37700: DOUBLE
37701: LD_VAR 0 8
37705: DEC
37706: ST_TO_ADDR
37707: LD_VAR 0 10
37711: PUSH
37712: FOR_TO
37713: IFFALSE 37806
// begin if not ValidHex ( _x , _y ) then
37715: LD_VAR 0 11
37719: PPUSH
37720: LD_VAR 0 12
37724: PPUSH
37725: CALL_OW 488
37729: NOT
37730: IFFALSE 37734
// continue ;
37732: GO 37712
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37734: LD_VAR 0 11
37738: PPUSH
37739: LD_VAR 0 12
37743: PPUSH
37744: CALL_OW 351
37748: PUSH
37749: LD_VAR 0 11
37753: PPUSH
37754: LD_VAR 0 12
37758: PPUSH
37759: CALL_OW 554
37763: AND
37764: IFFALSE 37804
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37766: LD_ADDR_VAR 0 13
37770: PUSH
37771: LD_VAR 0 13
37775: PPUSH
37776: LD_VAR 0 13
37780: PUSH
37781: LD_INT 1
37783: PLUS
37784: PPUSH
37785: LD_VAR 0 11
37789: PUSH
37790: LD_VAR 0 12
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PPUSH
37799: CALL_OW 2
37803: ST_TO_ADDR
// end ;
37804: GO 37712
37806: POP
37807: POP
37808: GO 37692
37810: POP
37811: POP
// if not list then
37812: LD_VAR 0 13
37816: NOT
37817: IFFALSE 37821
// exit ;
37819: GO 37892
// for i in list do
37821: LD_ADDR_VAR 0 6
37825: PUSH
37826: LD_VAR 0 13
37830: PUSH
37831: FOR_IN
37832: IFFALSE 37890
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37834: LD_VAR 0 1
37838: PPUSH
37839: LD_STRING M
37841: PUSH
37842: LD_VAR 0 6
37846: PUSH
37847: LD_INT 1
37849: ARRAY
37850: PUSH
37851: LD_VAR 0 6
37855: PUSH
37856: LD_INT 2
37858: ARRAY
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: PPUSH
37884: CALL_OW 447
37888: GO 37831
37890: POP
37891: POP
// end ;
37892: LD_VAR 0 5
37896: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37897: LD_INT 0
37899: PPUSH
37900: PPUSH
37901: PPUSH
37902: PPUSH
37903: PPUSH
37904: PPUSH
37905: PPUSH
37906: PPUSH
37907: PPUSH
37908: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37909: LD_VAR 0 1
37913: PPUSH
37914: CALL_OW 302
37918: NOT
37919: PUSH
37920: LD_VAR 0 2
37924: PPUSH
37925: LD_VAR 0 3
37929: PPUSH
37930: CALL_OW 488
37934: NOT
37935: OR
37936: PUSH
37937: LD_VAR 0 4
37941: NOT
37942: OR
37943: IFFALSE 37947
// exit ;
37945: GO 38460
// list := [ ] ;
37947: LD_ADDR_VAR 0 13
37951: PUSH
37952: EMPTY
37953: ST_TO_ADDR
// if x - r < 0 then
37954: LD_VAR 0 2
37958: PUSH
37959: LD_VAR 0 4
37963: MINUS
37964: PUSH
37965: LD_INT 0
37967: LESS
37968: IFFALSE 37980
// min_x := 0 else
37970: LD_ADDR_VAR 0 7
37974: PUSH
37975: LD_INT 0
37977: ST_TO_ADDR
37978: GO 37996
// min_x := x - r ;
37980: LD_ADDR_VAR 0 7
37984: PUSH
37985: LD_VAR 0 2
37989: PUSH
37990: LD_VAR 0 4
37994: MINUS
37995: ST_TO_ADDR
// if y - r < 0 then
37996: LD_VAR 0 3
38000: PUSH
38001: LD_VAR 0 4
38005: MINUS
38006: PUSH
38007: LD_INT 0
38009: LESS
38010: IFFALSE 38022
// min_y := 0 else
38012: LD_ADDR_VAR 0 8
38016: PUSH
38017: LD_INT 0
38019: ST_TO_ADDR
38020: GO 38038
// min_y := y - r ;
38022: LD_ADDR_VAR 0 8
38026: PUSH
38027: LD_VAR 0 3
38031: PUSH
38032: LD_VAR 0 4
38036: MINUS
38037: ST_TO_ADDR
// max_x := x + r ;
38038: LD_ADDR_VAR 0 9
38042: PUSH
38043: LD_VAR 0 2
38047: PUSH
38048: LD_VAR 0 4
38052: PLUS
38053: ST_TO_ADDR
// max_y := y + r ;
38054: LD_ADDR_VAR 0 10
38058: PUSH
38059: LD_VAR 0 3
38063: PUSH
38064: LD_VAR 0 4
38068: PLUS
38069: ST_TO_ADDR
// for _x = min_x to max_x do
38070: LD_ADDR_VAR 0 11
38074: PUSH
38075: DOUBLE
38076: LD_VAR 0 7
38080: DEC
38081: ST_TO_ADDR
38082: LD_VAR 0 9
38086: PUSH
38087: FOR_TO
38088: IFFALSE 38205
// for _y = min_y to max_y do
38090: LD_ADDR_VAR 0 12
38094: PUSH
38095: DOUBLE
38096: LD_VAR 0 8
38100: DEC
38101: ST_TO_ADDR
38102: LD_VAR 0 10
38106: PUSH
38107: FOR_TO
38108: IFFALSE 38201
// begin if not ValidHex ( _x , _y ) then
38110: LD_VAR 0 11
38114: PPUSH
38115: LD_VAR 0 12
38119: PPUSH
38120: CALL_OW 488
38124: NOT
38125: IFFALSE 38129
// continue ;
38127: GO 38107
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38129: LD_VAR 0 11
38133: PPUSH
38134: LD_VAR 0 12
38138: PPUSH
38139: CALL_OW 351
38143: PUSH
38144: LD_VAR 0 11
38148: PPUSH
38149: LD_VAR 0 12
38153: PPUSH
38154: CALL_OW 554
38158: AND
38159: IFFALSE 38199
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38161: LD_ADDR_VAR 0 13
38165: PUSH
38166: LD_VAR 0 13
38170: PPUSH
38171: LD_VAR 0 13
38175: PUSH
38176: LD_INT 1
38178: PLUS
38179: PPUSH
38180: LD_VAR 0 11
38184: PUSH
38185: LD_VAR 0 12
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PPUSH
38194: CALL_OW 2
38198: ST_TO_ADDR
// end ;
38199: GO 38107
38201: POP
38202: POP
38203: GO 38087
38205: POP
38206: POP
// if not list then
38207: LD_VAR 0 13
38211: NOT
38212: IFFALSE 38216
// exit ;
38214: GO 38460
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38216: LD_ADDR_VAR 0 13
38220: PUSH
38221: LD_VAR 0 1
38225: PPUSH
38226: LD_VAR 0 13
38230: PPUSH
38231: LD_INT 1
38233: PPUSH
38234: LD_INT 1
38236: PPUSH
38237: CALL 47236 0 4
38241: ST_TO_ADDR
// ComStop ( flame ) ;
38242: LD_VAR 0 1
38246: PPUSH
38247: CALL_OW 141
// for i in list do
38251: LD_ADDR_VAR 0 6
38255: PUSH
38256: LD_VAR 0 13
38260: PUSH
38261: FOR_IN
38262: IFFALSE 38293
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38264: LD_VAR 0 1
38268: PPUSH
38269: LD_VAR 0 6
38273: PUSH
38274: LD_INT 1
38276: ARRAY
38277: PPUSH
38278: LD_VAR 0 6
38282: PUSH
38283: LD_INT 2
38285: ARRAY
38286: PPUSH
38287: CALL_OW 176
38291: GO 38261
38293: POP
38294: POP
// repeat wait ( 0 0$1 ) ;
38295: LD_INT 35
38297: PPUSH
38298: CALL_OW 67
// task := GetTaskList ( flame ) ;
38302: LD_ADDR_VAR 0 14
38306: PUSH
38307: LD_VAR 0 1
38311: PPUSH
38312: CALL_OW 437
38316: ST_TO_ADDR
// if not task then
38317: LD_VAR 0 14
38321: NOT
38322: IFFALSE 38326
// exit ;
38324: GO 38460
// if task [ 1 ] [ 1 ] <> | then
38326: LD_VAR 0 14
38330: PUSH
38331: LD_INT 1
38333: ARRAY
38334: PUSH
38335: LD_INT 1
38337: ARRAY
38338: PUSH
38339: LD_STRING |
38341: NONEQUAL
38342: IFFALSE 38346
// exit ;
38344: GO 38460
// _x := task [ 1 ] [ 2 ] ;
38346: LD_ADDR_VAR 0 11
38350: PUSH
38351: LD_VAR 0 14
38355: PUSH
38356: LD_INT 1
38358: ARRAY
38359: PUSH
38360: LD_INT 2
38362: ARRAY
38363: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38364: LD_ADDR_VAR 0 12
38368: PUSH
38369: LD_VAR 0 14
38373: PUSH
38374: LD_INT 1
38376: ARRAY
38377: PUSH
38378: LD_INT 3
38380: ARRAY
38381: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38382: LD_VAR 0 11
38386: PPUSH
38387: LD_VAR 0 12
38391: PPUSH
38392: CALL_OW 351
38396: NOT
38397: PUSH
38398: LD_VAR 0 11
38402: PPUSH
38403: LD_VAR 0 12
38407: PPUSH
38408: CALL_OW 554
38412: NOT
38413: OR
38414: IFFALSE 38448
// begin task := Delete ( task , 1 ) ;
38416: LD_ADDR_VAR 0 14
38420: PUSH
38421: LD_VAR 0 14
38425: PPUSH
38426: LD_INT 1
38428: PPUSH
38429: CALL_OW 3
38433: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38434: LD_VAR 0 1
38438: PPUSH
38439: LD_VAR 0 14
38443: PPUSH
38444: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38448: LD_VAR 0 1
38452: PPUSH
38453: CALL_OW 314
38457: NOT
38458: IFFALSE 38295
// end ;
38460: LD_VAR 0 5
38464: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38465: LD_EXP 99
38469: NOT
38470: IFFALSE 38520
38472: GO 38474
38474: DISABLE
// begin initHack := true ;
38475: LD_ADDR_EXP 99
38479: PUSH
38480: LD_INT 1
38482: ST_TO_ADDR
// hackTanks := [ ] ;
38483: LD_ADDR_EXP 100
38487: PUSH
38488: EMPTY
38489: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38490: LD_ADDR_EXP 101
38494: PUSH
38495: EMPTY
38496: ST_TO_ADDR
// hackLimit := 3 ;
38497: LD_ADDR_EXP 102
38501: PUSH
38502: LD_INT 3
38504: ST_TO_ADDR
// hackDist := 12 ;
38505: LD_ADDR_EXP 103
38509: PUSH
38510: LD_INT 12
38512: ST_TO_ADDR
// hackCounter := [ ] ;
38513: LD_ADDR_EXP 104
38517: PUSH
38518: EMPTY
38519: ST_TO_ADDR
// end ;
38520: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38521: LD_EXP 99
38525: PUSH
38526: LD_INT 34
38528: PUSH
38529: LD_INT 99
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PPUSH
38536: CALL_OW 69
38540: AND
38541: IFFALSE 38794
38543: GO 38545
38545: DISABLE
38546: LD_INT 0
38548: PPUSH
38549: PPUSH
// begin enable ;
38550: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38551: LD_ADDR_VAR 0 1
38555: PUSH
38556: LD_INT 34
38558: PUSH
38559: LD_INT 99
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PPUSH
38566: CALL_OW 69
38570: PUSH
38571: FOR_IN
38572: IFFALSE 38792
// begin if not i in hackTanks then
38574: LD_VAR 0 1
38578: PUSH
38579: LD_EXP 100
38583: IN
38584: NOT
38585: IFFALSE 38668
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38587: LD_ADDR_EXP 100
38591: PUSH
38592: LD_EXP 100
38596: PPUSH
38597: LD_EXP 100
38601: PUSH
38602: LD_INT 1
38604: PLUS
38605: PPUSH
38606: LD_VAR 0 1
38610: PPUSH
38611: CALL_OW 1
38615: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38616: LD_ADDR_EXP 101
38620: PUSH
38621: LD_EXP 101
38625: PPUSH
38626: LD_EXP 101
38630: PUSH
38631: LD_INT 1
38633: PLUS
38634: PPUSH
38635: EMPTY
38636: PPUSH
38637: CALL_OW 1
38641: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38642: LD_ADDR_EXP 104
38646: PUSH
38647: LD_EXP 104
38651: PPUSH
38652: LD_EXP 104
38656: PUSH
38657: LD_INT 1
38659: PLUS
38660: PPUSH
38661: EMPTY
38662: PPUSH
38663: CALL_OW 1
38667: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38668: LD_VAR 0 1
38672: PPUSH
38673: CALL_OW 302
38677: NOT
38678: IFFALSE 38691
// begin HackUnlinkAll ( i ) ;
38680: LD_VAR 0 1
38684: PPUSH
38685: CALL 38797 0 1
// continue ;
38689: GO 38571
// end ; HackCheckCapturedStatus ( i ) ;
38691: LD_VAR 0 1
38695: PPUSH
38696: CALL 39240 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38700: LD_ADDR_VAR 0 2
38704: PUSH
38705: LD_INT 81
38707: PUSH
38708: LD_VAR 0 1
38712: PPUSH
38713: CALL_OW 255
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 33
38724: PUSH
38725: LD_INT 3
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 91
38734: PUSH
38735: LD_VAR 0 1
38739: PUSH
38740: LD_EXP 103
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 50
38752: PUSH
38753: EMPTY
38754: LIST
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: PPUSH
38762: CALL_OW 69
38766: ST_TO_ADDR
// if not tmp then
38767: LD_VAR 0 2
38771: NOT
38772: IFFALSE 38776
// continue ;
38774: GO 38571
// HackLink ( i , tmp ) ;
38776: LD_VAR 0 1
38780: PPUSH
38781: LD_VAR 0 2
38785: PPUSH
38786: CALL 38933 0 2
// end ;
38790: GO 38571
38792: POP
38793: POP
// end ;
38794: PPOPN 2
38796: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38797: LD_INT 0
38799: PPUSH
38800: PPUSH
38801: PPUSH
// if not hack in hackTanks then
38802: LD_VAR 0 1
38806: PUSH
38807: LD_EXP 100
38811: IN
38812: NOT
38813: IFFALSE 38817
// exit ;
38815: GO 38928
// index := GetElementIndex ( hackTanks , hack ) ;
38817: LD_ADDR_VAR 0 4
38821: PUSH
38822: LD_EXP 100
38826: PPUSH
38827: LD_VAR 0 1
38831: PPUSH
38832: CALL 46533 0 2
38836: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38837: LD_EXP 101
38841: PUSH
38842: LD_VAR 0 4
38846: ARRAY
38847: IFFALSE 38928
// begin for i in hackTanksCaptured [ index ] do
38849: LD_ADDR_VAR 0 3
38853: PUSH
38854: LD_EXP 101
38858: PUSH
38859: LD_VAR 0 4
38863: ARRAY
38864: PUSH
38865: FOR_IN
38866: IFFALSE 38892
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38868: LD_VAR 0 3
38872: PUSH
38873: LD_INT 1
38875: ARRAY
38876: PPUSH
38877: LD_VAR 0 3
38881: PUSH
38882: LD_INT 2
38884: ARRAY
38885: PPUSH
38886: CALL_OW 235
38890: GO 38865
38892: POP
38893: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38894: LD_ADDR_EXP 101
38898: PUSH
38899: LD_EXP 101
38903: PPUSH
38904: LD_VAR 0 4
38908: PPUSH
38909: EMPTY
38910: PPUSH
38911: CALL_OW 1
38915: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38916: LD_VAR 0 1
38920: PPUSH
38921: LD_INT 0
38923: PPUSH
38924: CALL_OW 505
// end ; end ;
38928: LD_VAR 0 2
38932: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38933: LD_INT 0
38935: PPUSH
38936: PPUSH
38937: PPUSH
// if not hack in hackTanks or not vehicles then
38938: LD_VAR 0 1
38942: PUSH
38943: LD_EXP 100
38947: IN
38948: NOT
38949: PUSH
38950: LD_VAR 0 2
38954: NOT
38955: OR
38956: IFFALSE 38960
// exit ;
38958: GO 39235
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38960: LD_ADDR_VAR 0 2
38964: PUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: LD_VAR 0 2
38974: PPUSH
38975: LD_INT 1
38977: PPUSH
38978: LD_INT 1
38980: PPUSH
38981: CALL 47183 0 4
38985: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38986: LD_ADDR_VAR 0 5
38990: PUSH
38991: LD_EXP 100
38995: PPUSH
38996: LD_VAR 0 1
39000: PPUSH
39001: CALL 46533 0 2
39005: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39006: LD_EXP 101
39010: PUSH
39011: LD_VAR 0 5
39015: ARRAY
39016: PUSH
39017: LD_EXP 102
39021: LESS
39022: IFFALSE 39211
// begin for i := 1 to vehicles do
39024: LD_ADDR_VAR 0 4
39028: PUSH
39029: DOUBLE
39030: LD_INT 1
39032: DEC
39033: ST_TO_ADDR
39034: LD_VAR 0 2
39038: PUSH
39039: FOR_TO
39040: IFFALSE 39209
// begin if hackTanksCaptured [ index ] = hackLimit then
39042: LD_EXP 101
39046: PUSH
39047: LD_VAR 0 5
39051: ARRAY
39052: PUSH
39053: LD_EXP 102
39057: EQUAL
39058: IFFALSE 39062
// break ;
39060: GO 39209
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39062: LD_ADDR_EXP 104
39066: PUSH
39067: LD_EXP 104
39071: PPUSH
39072: LD_VAR 0 5
39076: PPUSH
39077: LD_EXP 104
39081: PUSH
39082: LD_VAR 0 5
39086: ARRAY
39087: PUSH
39088: LD_INT 1
39090: PLUS
39091: PPUSH
39092: CALL_OW 1
39096: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39097: LD_ADDR_EXP 101
39101: PUSH
39102: LD_EXP 101
39106: PPUSH
39107: LD_VAR 0 5
39111: PUSH
39112: LD_EXP 101
39116: PUSH
39117: LD_VAR 0 5
39121: ARRAY
39122: PUSH
39123: LD_INT 1
39125: PLUS
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PPUSH
39131: LD_VAR 0 2
39135: PUSH
39136: LD_VAR 0 4
39140: ARRAY
39141: PUSH
39142: LD_VAR 0 2
39146: PUSH
39147: LD_VAR 0 4
39151: ARRAY
39152: PPUSH
39153: CALL_OW 255
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PPUSH
39162: CALL 46748 0 3
39166: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39167: LD_VAR 0 2
39171: PUSH
39172: LD_VAR 0 4
39176: ARRAY
39177: PPUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: CALL_OW 255
39187: PPUSH
39188: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39192: LD_VAR 0 2
39196: PUSH
39197: LD_VAR 0 4
39201: ARRAY
39202: PPUSH
39203: CALL_OW 141
// end ;
39207: GO 39039
39209: POP
39210: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39211: LD_VAR 0 1
39215: PPUSH
39216: LD_EXP 101
39220: PUSH
39221: LD_VAR 0 5
39225: ARRAY
39226: PUSH
39227: LD_INT 0
39229: PLUS
39230: PPUSH
39231: CALL_OW 505
// end ;
39235: LD_VAR 0 3
39239: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39240: LD_INT 0
39242: PPUSH
39243: PPUSH
39244: PPUSH
39245: PPUSH
// if not hack in hackTanks then
39246: LD_VAR 0 1
39250: PUSH
39251: LD_EXP 100
39255: IN
39256: NOT
39257: IFFALSE 39261
// exit ;
39259: GO 39501
// index := GetElementIndex ( hackTanks , hack ) ;
39261: LD_ADDR_VAR 0 4
39265: PUSH
39266: LD_EXP 100
39270: PPUSH
39271: LD_VAR 0 1
39275: PPUSH
39276: CALL 46533 0 2
39280: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: DOUBLE
39287: LD_EXP 101
39291: PUSH
39292: LD_VAR 0 4
39296: ARRAY
39297: INC
39298: ST_TO_ADDR
39299: LD_INT 1
39301: PUSH
39302: FOR_DOWNTO
39303: IFFALSE 39475
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39305: LD_ADDR_VAR 0 5
39309: PUSH
39310: LD_EXP 101
39314: PUSH
39315: LD_VAR 0 4
39319: ARRAY
39320: PUSH
39321: LD_VAR 0 3
39325: ARRAY
39326: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39327: LD_VAR 0 5
39331: PUSH
39332: LD_INT 1
39334: ARRAY
39335: PPUSH
39336: CALL_OW 302
39340: NOT
39341: PUSH
39342: LD_VAR 0 5
39346: PUSH
39347: LD_INT 1
39349: ARRAY
39350: PPUSH
39351: CALL_OW 255
39355: PUSH
39356: LD_VAR 0 1
39360: PPUSH
39361: CALL_OW 255
39365: NONEQUAL
39366: OR
39367: IFFALSE 39473
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39369: LD_VAR 0 5
39373: PUSH
39374: LD_INT 1
39376: ARRAY
39377: PPUSH
39378: CALL_OW 305
39382: PUSH
39383: LD_VAR 0 5
39387: PUSH
39388: LD_INT 1
39390: ARRAY
39391: PPUSH
39392: CALL_OW 255
39396: PUSH
39397: LD_VAR 0 1
39401: PPUSH
39402: CALL_OW 255
39406: EQUAL
39407: AND
39408: IFFALSE 39432
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39410: LD_VAR 0 5
39414: PUSH
39415: LD_INT 1
39417: ARRAY
39418: PPUSH
39419: LD_VAR 0 5
39423: PUSH
39424: LD_INT 2
39426: ARRAY
39427: PPUSH
39428: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39432: LD_ADDR_EXP 101
39436: PUSH
39437: LD_EXP 101
39441: PPUSH
39442: LD_VAR 0 4
39446: PPUSH
39447: LD_EXP 101
39451: PUSH
39452: LD_VAR 0 4
39456: ARRAY
39457: PPUSH
39458: LD_VAR 0 3
39462: PPUSH
39463: CALL_OW 3
39467: PPUSH
39468: CALL_OW 1
39472: ST_TO_ADDR
// end ; end ;
39473: GO 39302
39475: POP
39476: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39477: LD_VAR 0 1
39481: PPUSH
39482: LD_EXP 101
39486: PUSH
39487: LD_VAR 0 4
39491: ARRAY
39492: PUSH
39493: LD_INT 0
39495: PLUS
39496: PPUSH
39497: CALL_OW 505
// end ;
39501: LD_VAR 0 2
39505: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39506: LD_INT 0
39508: PPUSH
39509: PPUSH
39510: PPUSH
39511: PPUSH
// if not hack in hackTanks then
39512: LD_VAR 0 1
39516: PUSH
39517: LD_EXP 100
39521: IN
39522: NOT
39523: IFFALSE 39527
// exit ;
39525: GO 39612
// index := GetElementIndex ( hackTanks , hack ) ;
39527: LD_ADDR_VAR 0 5
39531: PUSH
39532: LD_EXP 100
39536: PPUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL 46533 0 2
39546: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39547: LD_ADDR_VAR 0 4
39551: PUSH
39552: DOUBLE
39553: LD_INT 1
39555: DEC
39556: ST_TO_ADDR
39557: LD_EXP 101
39561: PUSH
39562: LD_VAR 0 5
39566: ARRAY
39567: PUSH
39568: FOR_TO
39569: IFFALSE 39610
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39571: LD_EXP 101
39575: PUSH
39576: LD_VAR 0 5
39580: ARRAY
39581: PUSH
39582: LD_VAR 0 4
39586: ARRAY
39587: PUSH
39588: LD_INT 1
39590: ARRAY
39591: PUSH
39592: LD_VAR 0 2
39596: EQUAL
39597: IFFALSE 39608
// KillUnit ( vehicle ) ;
39599: LD_VAR 0 2
39603: PPUSH
39604: CALL_OW 66
39608: GO 39568
39610: POP
39611: POP
// end ;
39612: LD_VAR 0 3
39616: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39617: LD_EXP 105
39621: NOT
39622: IFFALSE 39657
39624: GO 39626
39626: DISABLE
// begin initMiner := true ;
39627: LD_ADDR_EXP 105
39631: PUSH
39632: LD_INT 1
39634: ST_TO_ADDR
// minersList := [ ] ;
39635: LD_ADDR_EXP 106
39639: PUSH
39640: EMPTY
39641: ST_TO_ADDR
// minerMinesList := [ ] ;
39642: LD_ADDR_EXP 107
39646: PUSH
39647: EMPTY
39648: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39649: LD_ADDR_EXP 108
39653: PUSH
39654: LD_INT 5
39656: ST_TO_ADDR
// end ;
39657: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39658: LD_EXP 105
39662: PUSH
39663: LD_INT 34
39665: PUSH
39666: LD_INT 81
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PPUSH
39673: CALL_OW 69
39677: AND
39678: IFFALSE 40139
39680: GO 39682
39682: DISABLE
39683: LD_INT 0
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
// begin enable ;
39689: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39690: LD_ADDR_VAR 0 1
39694: PUSH
39695: LD_INT 34
39697: PUSH
39698: LD_INT 81
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PPUSH
39705: CALL_OW 69
39709: PUSH
39710: FOR_IN
39711: IFFALSE 39783
// begin if not i in minersList then
39713: LD_VAR 0 1
39717: PUSH
39718: LD_EXP 106
39722: IN
39723: NOT
39724: IFFALSE 39781
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39726: LD_ADDR_EXP 106
39730: PUSH
39731: LD_EXP 106
39735: PPUSH
39736: LD_EXP 106
39740: PUSH
39741: LD_INT 1
39743: PLUS
39744: PPUSH
39745: LD_VAR 0 1
39749: PPUSH
39750: CALL_OW 1
39754: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39755: LD_ADDR_EXP 107
39759: PUSH
39760: LD_EXP 107
39764: PPUSH
39765: LD_EXP 107
39769: PUSH
39770: LD_INT 1
39772: PLUS
39773: PPUSH
39774: EMPTY
39775: PPUSH
39776: CALL_OW 1
39780: ST_TO_ADDR
// end end ;
39781: GO 39710
39783: POP
39784: POP
// for i := minerMinesList downto 1 do
39785: LD_ADDR_VAR 0 1
39789: PUSH
39790: DOUBLE
39791: LD_EXP 107
39795: INC
39796: ST_TO_ADDR
39797: LD_INT 1
39799: PUSH
39800: FOR_DOWNTO
39801: IFFALSE 40137
// begin if IsLive ( minersList [ i ] ) then
39803: LD_EXP 106
39807: PUSH
39808: LD_VAR 0 1
39812: ARRAY
39813: PPUSH
39814: CALL_OW 300
39818: IFFALSE 39846
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39820: LD_EXP 106
39824: PUSH
39825: LD_VAR 0 1
39829: ARRAY
39830: PPUSH
39831: LD_EXP 107
39835: PUSH
39836: LD_VAR 0 1
39840: ARRAY
39841: PPUSH
39842: CALL_OW 505
// if not minerMinesList [ i ] then
39846: LD_EXP 107
39850: PUSH
39851: LD_VAR 0 1
39855: ARRAY
39856: NOT
39857: IFFALSE 39861
// continue ;
39859: GO 39800
// for j := minerMinesList [ i ] downto 1 do
39861: LD_ADDR_VAR 0 2
39865: PUSH
39866: DOUBLE
39867: LD_EXP 107
39871: PUSH
39872: LD_VAR 0 1
39876: ARRAY
39877: INC
39878: ST_TO_ADDR
39879: LD_INT 1
39881: PUSH
39882: FOR_DOWNTO
39883: IFFALSE 40133
// begin side := GetSide ( minersList [ i ] ) ;
39885: LD_ADDR_VAR 0 3
39889: PUSH
39890: LD_EXP 106
39894: PUSH
39895: LD_VAR 0 1
39899: ARRAY
39900: PPUSH
39901: CALL_OW 255
39905: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39906: LD_ADDR_VAR 0 4
39910: PUSH
39911: LD_EXP 107
39915: PUSH
39916: LD_VAR 0 1
39920: ARRAY
39921: PUSH
39922: LD_VAR 0 2
39926: ARRAY
39927: PUSH
39928: LD_INT 1
39930: ARRAY
39931: PPUSH
39932: LD_EXP 107
39936: PUSH
39937: LD_VAR 0 1
39941: ARRAY
39942: PUSH
39943: LD_VAR 0 2
39947: ARRAY
39948: PUSH
39949: LD_INT 2
39951: ARRAY
39952: PPUSH
39953: CALL_OW 428
39957: ST_TO_ADDR
// if not tmp then
39958: LD_VAR 0 4
39962: NOT
39963: IFFALSE 39967
// continue ;
39965: GO 39882
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39967: LD_VAR 0 4
39971: PUSH
39972: LD_INT 81
39974: PUSH
39975: LD_VAR 0 3
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PPUSH
39984: CALL_OW 69
39988: IN
39989: PUSH
39990: LD_EXP 107
39994: PUSH
39995: LD_VAR 0 1
39999: ARRAY
40000: PUSH
40001: LD_VAR 0 2
40005: ARRAY
40006: PUSH
40007: LD_INT 1
40009: ARRAY
40010: PPUSH
40011: LD_EXP 107
40015: PUSH
40016: LD_VAR 0 1
40020: ARRAY
40021: PUSH
40022: LD_VAR 0 2
40026: ARRAY
40027: PUSH
40028: LD_INT 2
40030: ARRAY
40031: PPUSH
40032: CALL_OW 458
40036: AND
40037: IFFALSE 40131
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40039: LD_EXP 107
40043: PUSH
40044: LD_VAR 0 1
40048: ARRAY
40049: PUSH
40050: LD_VAR 0 2
40054: ARRAY
40055: PUSH
40056: LD_INT 1
40058: ARRAY
40059: PPUSH
40060: LD_EXP 107
40064: PUSH
40065: LD_VAR 0 1
40069: ARRAY
40070: PUSH
40071: LD_VAR 0 2
40075: ARRAY
40076: PUSH
40077: LD_INT 2
40079: ARRAY
40080: PPUSH
40081: LD_VAR 0 3
40085: PPUSH
40086: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40090: LD_ADDR_EXP 107
40094: PUSH
40095: LD_EXP 107
40099: PPUSH
40100: LD_VAR 0 1
40104: PPUSH
40105: LD_EXP 107
40109: PUSH
40110: LD_VAR 0 1
40114: ARRAY
40115: PPUSH
40116: LD_VAR 0 2
40120: PPUSH
40121: CALL_OW 3
40125: PPUSH
40126: CALL_OW 1
40130: ST_TO_ADDR
// end ; end ;
40131: GO 39882
40133: POP
40134: POP
// end ;
40135: GO 39800
40137: POP
40138: POP
// end ;
40139: PPOPN 4
40141: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40142: LD_INT 0
40144: PPUSH
40145: PPUSH
// result := false ;
40146: LD_ADDR_VAR 0 4
40150: PUSH
40151: LD_INT 0
40153: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40154: LD_VAR 0 1
40158: PPUSH
40159: CALL_OW 264
40163: PUSH
40164: LD_INT 81
40166: EQUAL
40167: NOT
40168: IFFALSE 40172
// exit ;
40170: GO 40412
// index := GetElementIndex ( minersList , unit ) ;
40172: LD_ADDR_VAR 0 5
40176: PUSH
40177: LD_EXP 106
40181: PPUSH
40182: LD_VAR 0 1
40186: PPUSH
40187: CALL 46533 0 2
40191: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40192: LD_EXP 107
40196: PUSH
40197: LD_VAR 0 5
40201: ARRAY
40202: PUSH
40203: LD_EXP 108
40207: GREATEREQUAL
40208: IFFALSE 40212
// exit ;
40210: GO 40412
// ComMoveXY ( unit , x , y ) ;
40212: LD_VAR 0 1
40216: PPUSH
40217: LD_VAR 0 2
40221: PPUSH
40222: LD_VAR 0 3
40226: PPUSH
40227: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40231: LD_INT 35
40233: PPUSH
40234: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40238: LD_VAR 0 1
40242: PPUSH
40243: LD_VAR 0 2
40247: PPUSH
40248: LD_VAR 0 3
40252: PPUSH
40253: CALL 78294 0 3
40257: NOT
40258: PUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: CALL_OW 314
40268: AND
40269: IFFALSE 40273
// exit ;
40271: GO 40412
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40273: LD_VAR 0 2
40277: PPUSH
40278: LD_VAR 0 3
40282: PPUSH
40283: CALL_OW 428
40287: PUSH
40288: LD_VAR 0 1
40292: EQUAL
40293: PUSH
40294: LD_VAR 0 1
40298: PPUSH
40299: CALL_OW 314
40303: NOT
40304: AND
40305: IFFALSE 40231
// PlaySoundXY ( x , y , PlantMine ) ;
40307: LD_VAR 0 2
40311: PPUSH
40312: LD_VAR 0 3
40316: PPUSH
40317: LD_STRING PlantMine
40319: PPUSH
40320: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40324: LD_VAR 0 2
40328: PPUSH
40329: LD_VAR 0 3
40333: PPUSH
40334: LD_VAR 0 1
40338: PPUSH
40339: CALL_OW 255
40343: PPUSH
40344: LD_INT 0
40346: PPUSH
40347: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40351: LD_ADDR_EXP 107
40355: PUSH
40356: LD_EXP 107
40360: PPUSH
40361: LD_VAR 0 5
40365: PUSH
40366: LD_EXP 107
40370: PUSH
40371: LD_VAR 0 5
40375: ARRAY
40376: PUSH
40377: LD_INT 1
40379: PLUS
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PPUSH
40385: LD_VAR 0 2
40389: PUSH
40390: LD_VAR 0 3
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PPUSH
40399: CALL 46748 0 3
40403: ST_TO_ADDR
// result := true ;
40404: LD_ADDR_VAR 0 4
40408: PUSH
40409: LD_INT 1
40411: ST_TO_ADDR
// end ;
40412: LD_VAR 0 4
40416: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40417: LD_INT 0
40419: PPUSH
40420: PPUSH
40421: PPUSH
// if not unit in minersList then
40422: LD_VAR 0 1
40426: PUSH
40427: LD_EXP 106
40431: IN
40432: NOT
40433: IFFALSE 40437
// exit ;
40435: GO 40829
// index := GetElementIndex ( minersList , unit ) ;
40437: LD_ADDR_VAR 0 6
40441: PUSH
40442: LD_EXP 106
40446: PPUSH
40447: LD_VAR 0 1
40451: PPUSH
40452: CALL 46533 0 2
40456: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40457: LD_ADDR_VAR 0 5
40461: PUSH
40462: DOUBLE
40463: LD_EXP 107
40467: PUSH
40468: LD_VAR 0 6
40472: ARRAY
40473: INC
40474: ST_TO_ADDR
40475: LD_INT 1
40477: PUSH
40478: FOR_DOWNTO
40479: IFFALSE 40640
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40481: LD_EXP 107
40485: PUSH
40486: LD_VAR 0 6
40490: ARRAY
40491: PUSH
40492: LD_VAR 0 5
40496: ARRAY
40497: PUSH
40498: LD_INT 1
40500: ARRAY
40501: PUSH
40502: LD_VAR 0 2
40506: EQUAL
40507: PUSH
40508: LD_EXP 107
40512: PUSH
40513: LD_VAR 0 6
40517: ARRAY
40518: PUSH
40519: LD_VAR 0 5
40523: ARRAY
40524: PUSH
40525: LD_INT 2
40527: ARRAY
40528: PUSH
40529: LD_VAR 0 3
40533: EQUAL
40534: AND
40535: IFFALSE 40638
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40537: LD_EXP 107
40541: PUSH
40542: LD_VAR 0 6
40546: ARRAY
40547: PUSH
40548: LD_VAR 0 5
40552: ARRAY
40553: PUSH
40554: LD_INT 1
40556: ARRAY
40557: PPUSH
40558: LD_EXP 107
40562: PUSH
40563: LD_VAR 0 6
40567: ARRAY
40568: PUSH
40569: LD_VAR 0 5
40573: ARRAY
40574: PUSH
40575: LD_INT 2
40577: ARRAY
40578: PPUSH
40579: LD_VAR 0 1
40583: PPUSH
40584: CALL_OW 255
40588: PPUSH
40589: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40593: LD_ADDR_EXP 107
40597: PUSH
40598: LD_EXP 107
40602: PPUSH
40603: LD_VAR 0 6
40607: PPUSH
40608: LD_EXP 107
40612: PUSH
40613: LD_VAR 0 6
40617: ARRAY
40618: PPUSH
40619: LD_VAR 0 5
40623: PPUSH
40624: CALL_OW 3
40628: PPUSH
40629: CALL_OW 1
40633: ST_TO_ADDR
// exit ;
40634: POP
40635: POP
40636: GO 40829
// end ; end ;
40638: GO 40478
40640: POP
40641: POP
// for i := minerMinesList [ index ] downto 1 do
40642: LD_ADDR_VAR 0 5
40646: PUSH
40647: DOUBLE
40648: LD_EXP 107
40652: PUSH
40653: LD_VAR 0 6
40657: ARRAY
40658: INC
40659: ST_TO_ADDR
40660: LD_INT 1
40662: PUSH
40663: FOR_DOWNTO
40664: IFFALSE 40827
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40666: LD_EXP 107
40670: PUSH
40671: LD_VAR 0 6
40675: ARRAY
40676: PUSH
40677: LD_VAR 0 5
40681: ARRAY
40682: PUSH
40683: LD_INT 1
40685: ARRAY
40686: PPUSH
40687: LD_EXP 107
40691: PUSH
40692: LD_VAR 0 6
40696: ARRAY
40697: PUSH
40698: LD_VAR 0 5
40702: ARRAY
40703: PUSH
40704: LD_INT 2
40706: ARRAY
40707: PPUSH
40708: LD_VAR 0 2
40712: PPUSH
40713: LD_VAR 0 3
40717: PPUSH
40718: CALL_OW 298
40722: PUSH
40723: LD_INT 6
40725: LESS
40726: IFFALSE 40825
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40728: LD_EXP 107
40732: PUSH
40733: LD_VAR 0 6
40737: ARRAY
40738: PUSH
40739: LD_VAR 0 5
40743: ARRAY
40744: PUSH
40745: LD_INT 1
40747: ARRAY
40748: PPUSH
40749: LD_EXP 107
40753: PUSH
40754: LD_VAR 0 6
40758: ARRAY
40759: PUSH
40760: LD_VAR 0 5
40764: ARRAY
40765: PUSH
40766: LD_INT 2
40768: ARRAY
40769: PPUSH
40770: LD_VAR 0 1
40774: PPUSH
40775: CALL_OW 255
40779: PPUSH
40780: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40784: LD_ADDR_EXP 107
40788: PUSH
40789: LD_EXP 107
40793: PPUSH
40794: LD_VAR 0 6
40798: PPUSH
40799: LD_EXP 107
40803: PUSH
40804: LD_VAR 0 6
40808: ARRAY
40809: PPUSH
40810: LD_VAR 0 5
40814: PPUSH
40815: CALL_OW 3
40819: PPUSH
40820: CALL_OW 1
40824: ST_TO_ADDR
// end ; end ;
40825: GO 40663
40827: POP
40828: POP
// end ;
40829: LD_VAR 0 4
40833: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40834: LD_INT 0
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40845: LD_VAR 0 1
40849: PPUSH
40850: CALL_OW 264
40854: PUSH
40855: LD_INT 81
40857: EQUAL
40858: NOT
40859: PUSH
40860: LD_VAR 0 1
40864: PUSH
40865: LD_EXP 106
40869: IN
40870: NOT
40871: OR
40872: IFFALSE 40876
// exit ;
40874: GO 41198
// index := GetElementIndex ( minersList , unit ) ;
40876: LD_ADDR_VAR 0 6
40880: PUSH
40881: LD_EXP 106
40885: PPUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: CALL 46533 0 2
40895: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40896: LD_ADDR_VAR 0 8
40900: PUSH
40901: LD_EXP 108
40905: PUSH
40906: LD_EXP 107
40910: PUSH
40911: LD_VAR 0 6
40915: ARRAY
40916: MINUS
40917: ST_TO_ADDR
// if not minesFreeAmount then
40918: LD_VAR 0 8
40922: NOT
40923: IFFALSE 40927
// exit ;
40925: GO 41198
// tmp := [ ] ;
40927: LD_ADDR_VAR 0 7
40931: PUSH
40932: EMPTY
40933: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40934: LD_ADDR_VAR 0 5
40938: PUSH
40939: DOUBLE
40940: LD_INT 1
40942: DEC
40943: ST_TO_ADDR
40944: LD_VAR 0 8
40948: PUSH
40949: FOR_TO
40950: IFFALSE 41145
// begin _d := rand ( 0 , 5 ) ;
40952: LD_ADDR_VAR 0 11
40956: PUSH
40957: LD_INT 0
40959: PPUSH
40960: LD_INT 5
40962: PPUSH
40963: CALL_OW 12
40967: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40968: LD_ADDR_VAR 0 12
40972: PUSH
40973: LD_INT 2
40975: PPUSH
40976: LD_INT 6
40978: PPUSH
40979: CALL_OW 12
40983: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40984: LD_ADDR_VAR 0 9
40988: PUSH
40989: LD_VAR 0 2
40993: PPUSH
40994: LD_VAR 0 11
40998: PPUSH
40999: LD_VAR 0 12
41003: PPUSH
41004: CALL_OW 272
41008: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41009: LD_ADDR_VAR 0 10
41013: PUSH
41014: LD_VAR 0 3
41018: PPUSH
41019: LD_VAR 0 11
41023: PPUSH
41024: LD_VAR 0 12
41028: PPUSH
41029: CALL_OW 273
41033: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41034: LD_VAR 0 9
41038: PPUSH
41039: LD_VAR 0 10
41043: PPUSH
41044: CALL_OW 488
41048: PUSH
41049: LD_VAR 0 9
41053: PUSH
41054: LD_VAR 0 10
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_VAR 0 7
41067: IN
41068: NOT
41069: AND
41070: PUSH
41071: LD_VAR 0 9
41075: PPUSH
41076: LD_VAR 0 10
41080: PPUSH
41081: CALL_OW 458
41085: NOT
41086: AND
41087: IFFALSE 41129
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41089: LD_ADDR_VAR 0 7
41093: PUSH
41094: LD_VAR 0 7
41098: PPUSH
41099: LD_VAR 0 7
41103: PUSH
41104: LD_INT 1
41106: PLUS
41107: PPUSH
41108: LD_VAR 0 9
41112: PUSH
41113: LD_VAR 0 10
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PPUSH
41122: CALL_OW 1
41126: ST_TO_ADDR
41127: GO 41143
// i := i - 1 ;
41129: LD_ADDR_VAR 0 5
41133: PUSH
41134: LD_VAR 0 5
41138: PUSH
41139: LD_INT 1
41141: MINUS
41142: ST_TO_ADDR
// end ;
41143: GO 40949
41145: POP
41146: POP
// for i in tmp do
41147: LD_ADDR_VAR 0 5
41151: PUSH
41152: LD_VAR 0 7
41156: PUSH
41157: FOR_IN
41158: IFFALSE 41196
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41160: LD_VAR 0 1
41164: PPUSH
41165: LD_VAR 0 5
41169: PUSH
41170: LD_INT 1
41172: ARRAY
41173: PPUSH
41174: LD_VAR 0 5
41178: PUSH
41179: LD_INT 2
41181: ARRAY
41182: PPUSH
41183: CALL 40142 0 3
41187: NOT
41188: IFFALSE 41194
// exit ;
41190: POP
41191: POP
41192: GO 41198
41194: GO 41157
41196: POP
41197: POP
// end ;
41198: LD_VAR 0 4
41202: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41203: LD_INT 0
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
// if GetClass ( unit ) <> class_sniper then
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 257
41223: PUSH
41224: LD_INT 5
41226: NONEQUAL
41227: IFFALSE 41231
// exit ;
41229: GO 41697
// dist := 8 ;
41231: LD_ADDR_VAR 0 5
41235: PUSH
41236: LD_INT 8
41238: ST_TO_ADDR
// viewRange := 12 ;
41239: LD_ADDR_VAR 0 8
41243: PUSH
41244: LD_INT 12
41246: ST_TO_ADDR
// side := GetSide ( unit ) ;
41247: LD_ADDR_VAR 0 6
41251: PUSH
41252: LD_VAR 0 1
41256: PPUSH
41257: CALL_OW 255
41261: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41262: LD_INT 61
41264: PPUSH
41265: LD_VAR 0 6
41269: PPUSH
41270: CALL_OW 321
41274: PUSH
41275: LD_INT 2
41277: EQUAL
41278: IFFALSE 41288
// viewRange := 16 ;
41280: LD_ADDR_VAR 0 8
41284: PUSH
41285: LD_INT 16
41287: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41288: LD_VAR 0 1
41292: PPUSH
41293: LD_VAR 0 2
41297: PPUSH
41298: LD_VAR 0 3
41302: PPUSH
41303: CALL_OW 297
41307: PUSH
41308: LD_VAR 0 5
41312: GREATER
41313: IFFALSE 41392
// begin ComMoveXY ( unit , x , y ) ;
41315: LD_VAR 0 1
41319: PPUSH
41320: LD_VAR 0 2
41324: PPUSH
41325: LD_VAR 0 3
41329: PPUSH
41330: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41334: LD_INT 35
41336: PPUSH
41337: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41341: LD_VAR 0 1
41345: PPUSH
41346: LD_VAR 0 2
41350: PPUSH
41351: LD_VAR 0 3
41355: PPUSH
41356: CALL 78294 0 3
41360: NOT
41361: IFFALSE 41365
// exit ;
41363: GO 41697
// until GetDistUnitXY ( unit , x , y ) < dist ;
41365: LD_VAR 0 1
41369: PPUSH
41370: LD_VAR 0 2
41374: PPUSH
41375: LD_VAR 0 3
41379: PPUSH
41380: CALL_OW 297
41384: PUSH
41385: LD_VAR 0 5
41389: LESS
41390: IFFALSE 41334
// end ; ComTurnXY ( unit , x , y ) ;
41392: LD_VAR 0 1
41396: PPUSH
41397: LD_VAR 0 2
41401: PPUSH
41402: LD_VAR 0 3
41406: PPUSH
41407: CALL_OW 118
// repeat if Multiplayer then
41411: LD_OWVAR 4
41415: IFFALSE 41426
// wait ( 35 ) else
41417: LD_INT 35
41419: PPUSH
41420: CALL_OW 67
41424: GO 41433
// wait ( 5 ) ;
41426: LD_INT 5
41428: PPUSH
41429: CALL_OW 67
// _d := GetDir ( unit ) ;
41433: LD_ADDR_VAR 0 11
41437: PUSH
41438: LD_VAR 0 1
41442: PPUSH
41443: CALL_OW 254
41447: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41448: LD_ADDR_VAR 0 7
41452: PUSH
41453: LD_VAR 0 1
41457: PPUSH
41458: CALL_OW 250
41462: PPUSH
41463: LD_VAR 0 1
41467: PPUSH
41468: CALL_OW 251
41472: PPUSH
41473: LD_VAR 0 2
41477: PPUSH
41478: LD_VAR 0 3
41482: PPUSH
41483: CALL 80902 0 4
41487: ST_TO_ADDR
// until dir = _d ;
41488: LD_VAR 0 7
41492: PUSH
41493: LD_VAR 0 11
41497: EQUAL
41498: IFFALSE 41411
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41500: LD_ADDR_VAR 0 9
41504: PUSH
41505: LD_VAR 0 1
41509: PPUSH
41510: CALL_OW 250
41514: PPUSH
41515: LD_VAR 0 7
41519: PPUSH
41520: LD_VAR 0 5
41524: PPUSH
41525: CALL_OW 272
41529: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41530: LD_ADDR_VAR 0 10
41534: PUSH
41535: LD_VAR 0 1
41539: PPUSH
41540: CALL_OW 251
41544: PPUSH
41545: LD_VAR 0 7
41549: PPUSH
41550: LD_VAR 0 5
41554: PPUSH
41555: CALL_OW 273
41559: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41560: LD_VAR 0 9
41564: PPUSH
41565: LD_VAR 0 10
41569: PPUSH
41570: CALL_OW 488
41574: NOT
41575: IFFALSE 41579
// exit ;
41577: GO 41697
// ComAnimCustom ( unit , 1 ) ;
41579: LD_VAR 0 1
41583: PPUSH
41584: LD_INT 1
41586: PPUSH
41587: CALL_OW 592
// p := 0 ;
41591: LD_ADDR_VAR 0 12
41595: PUSH
41596: LD_INT 0
41598: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41599: LD_VAR 0 9
41603: PPUSH
41604: LD_VAR 0 10
41608: PPUSH
41609: LD_VAR 0 6
41613: PPUSH
41614: LD_VAR 0 8
41618: PPUSH
41619: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41623: LD_INT 35
41625: PPUSH
41626: CALL_OW 67
// p := Inc ( p ) ;
41630: LD_ADDR_VAR 0 12
41634: PUSH
41635: LD_VAR 0 12
41639: PPUSH
41640: CALL 80858 0 1
41644: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41645: LD_VAR 0 12
41649: PUSH
41650: LD_INT 3
41652: EQUAL
41653: PUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: CALL_OW 302
41663: NOT
41664: OR
41665: PUSH
41666: LD_VAR 0 1
41670: PPUSH
41671: CALL_OW 301
41675: OR
41676: IFFALSE 41623
// RemoveSeeing ( _x , _y , side ) ;
41678: LD_VAR 0 9
41682: PPUSH
41683: LD_VAR 0 10
41687: PPUSH
41688: LD_VAR 0 6
41692: PPUSH
41693: CALL_OW 331
// end ; end_of_file
41697: LD_VAR 0 4
41701: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41702: LD_INT 0
41704: PPUSH
41705: PPUSH
// if exist_mode then
41706: LD_VAR 0 2
41710: IFFALSE 41756
// begin unit := CreateCharacter ( prefix & ident ) ;
41712: LD_ADDR_VAR 0 5
41716: PUSH
41717: LD_VAR 0 3
41721: PUSH
41722: LD_VAR 0 1
41726: STR
41727: PPUSH
41728: CALL_OW 34
41732: ST_TO_ADDR
// if unit then
41733: LD_VAR 0 5
41737: IFFALSE 41754
// DeleteCharacters ( prefix & ident ) ;
41739: LD_VAR 0 3
41743: PUSH
41744: LD_VAR 0 1
41748: STR
41749: PPUSH
41750: CALL_OW 40
// end else
41754: GO 41771
// unit := NewCharacter ( ident ) ;
41756: LD_ADDR_VAR 0 5
41760: PUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 25
41770: ST_TO_ADDR
// result := unit ;
41771: LD_ADDR_VAR 0 4
41775: PUSH
41776: LD_VAR 0 5
41780: ST_TO_ADDR
// end ;
41781: LD_VAR 0 4
41785: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41786: LD_INT 0
41788: PPUSH
41789: PPUSH
// if exist_mode then
41790: LD_VAR 0 2
41794: IFFALSE 41819
// unit := CreateCharacter ( prefix & ident ) else
41796: LD_ADDR_VAR 0 5
41800: PUSH
41801: LD_VAR 0 3
41805: PUSH
41806: LD_VAR 0 1
41810: STR
41811: PPUSH
41812: CALL_OW 34
41816: ST_TO_ADDR
41817: GO 41834
// unit := NewCharacter ( ident ) ;
41819: LD_ADDR_VAR 0 5
41823: PUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: CALL_OW 25
41833: ST_TO_ADDR
// result := unit ;
41834: LD_ADDR_VAR 0 4
41838: PUSH
41839: LD_VAR 0 5
41843: ST_TO_ADDR
// end ;
41844: LD_VAR 0 4
41848: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41849: LD_INT 0
41851: PPUSH
41852: PPUSH
// if not side or not nation then
41853: LD_VAR 0 1
41857: NOT
41858: PUSH
41859: LD_VAR 0 2
41863: NOT
41864: OR
41865: IFFALSE 41869
// exit ;
41867: GO 42637
// case nation of nation_american :
41869: LD_VAR 0 2
41873: PUSH
41874: LD_INT 1
41876: DOUBLE
41877: EQUAL
41878: IFTRUE 41882
41880: GO 42096
41882: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41883: LD_ADDR_VAR 0 4
41887: PUSH
41888: LD_INT 35
41890: PUSH
41891: LD_INT 45
41893: PUSH
41894: LD_INT 46
41896: PUSH
41897: LD_INT 47
41899: PUSH
41900: LD_INT 82
41902: PUSH
41903: LD_INT 83
41905: PUSH
41906: LD_INT 84
41908: PUSH
41909: LD_INT 85
41911: PUSH
41912: LD_INT 86
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 6
41923: PUSH
41924: LD_INT 15
41926: PUSH
41927: LD_INT 16
41929: PUSH
41930: LD_INT 7
41932: PUSH
41933: LD_INT 12
41935: PUSH
41936: LD_INT 13
41938: PUSH
41939: LD_INT 10
41941: PUSH
41942: LD_INT 14
41944: PUSH
41945: LD_INT 20
41947: PUSH
41948: LD_INT 21
41950: PUSH
41951: LD_INT 22
41953: PUSH
41954: LD_INT 25
41956: PUSH
41957: LD_INT 32
41959: PUSH
41960: LD_INT 27
41962: PUSH
41963: LD_INT 36
41965: PUSH
41966: LD_INT 69
41968: PUSH
41969: LD_INT 39
41971: PUSH
41972: LD_INT 34
41974: PUSH
41975: LD_INT 40
41977: PUSH
41978: LD_INT 48
41980: PUSH
41981: LD_INT 49
41983: PUSH
41984: LD_INT 50
41986: PUSH
41987: LD_INT 51
41989: PUSH
41990: LD_INT 52
41992: PUSH
41993: LD_INT 53
41995: PUSH
41996: LD_INT 54
41998: PUSH
41999: LD_INT 55
42001: PUSH
42002: LD_INT 56
42004: PUSH
42005: LD_INT 57
42007: PUSH
42008: LD_INT 58
42010: PUSH
42011: LD_INT 59
42013: PUSH
42014: LD_INT 60
42016: PUSH
42017: LD_INT 61
42019: PUSH
42020: LD_INT 62
42022: PUSH
42023: LD_INT 80
42025: PUSH
42026: LD_INT 82
42028: PUSH
42029: LD_INT 83
42031: PUSH
42032: LD_INT 84
42034: PUSH
42035: LD_INT 85
42037: PUSH
42038: LD_INT 86
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: ST_TO_ADDR
42094: GO 42561
42096: LD_INT 2
42098: DOUBLE
42099: EQUAL
42100: IFTRUE 42104
42102: GO 42330
42104: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42105: LD_ADDR_VAR 0 4
42109: PUSH
42110: LD_INT 35
42112: PUSH
42113: LD_INT 45
42115: PUSH
42116: LD_INT 46
42118: PUSH
42119: LD_INT 47
42121: PUSH
42122: LD_INT 82
42124: PUSH
42125: LD_INT 83
42127: PUSH
42128: LD_INT 84
42130: PUSH
42131: LD_INT 85
42133: PUSH
42134: LD_INT 87
42136: PUSH
42137: LD_INT 70
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 11
42145: PUSH
42146: LD_INT 3
42148: PUSH
42149: LD_INT 4
42151: PUSH
42152: LD_INT 5
42154: PUSH
42155: LD_INT 6
42157: PUSH
42158: LD_INT 15
42160: PUSH
42161: LD_INT 18
42163: PUSH
42164: LD_INT 7
42166: PUSH
42167: LD_INT 17
42169: PUSH
42170: LD_INT 8
42172: PUSH
42173: LD_INT 20
42175: PUSH
42176: LD_INT 21
42178: PUSH
42179: LD_INT 22
42181: PUSH
42182: LD_INT 72
42184: PUSH
42185: LD_INT 26
42187: PUSH
42188: LD_INT 69
42190: PUSH
42191: LD_INT 39
42193: PUSH
42194: LD_INT 40
42196: PUSH
42197: LD_INT 41
42199: PUSH
42200: LD_INT 42
42202: PUSH
42203: LD_INT 43
42205: PUSH
42206: LD_INT 48
42208: PUSH
42209: LD_INT 49
42211: PUSH
42212: LD_INT 50
42214: PUSH
42215: LD_INT 51
42217: PUSH
42218: LD_INT 52
42220: PUSH
42221: LD_INT 53
42223: PUSH
42224: LD_INT 54
42226: PUSH
42227: LD_INT 55
42229: PUSH
42230: LD_INT 56
42232: PUSH
42233: LD_INT 60
42235: PUSH
42236: LD_INT 61
42238: PUSH
42239: LD_INT 62
42241: PUSH
42242: LD_INT 66
42244: PUSH
42245: LD_INT 67
42247: PUSH
42248: LD_INT 68
42250: PUSH
42251: LD_INT 81
42253: PUSH
42254: LD_INT 82
42256: PUSH
42257: LD_INT 83
42259: PUSH
42260: LD_INT 84
42262: PUSH
42263: LD_INT 85
42265: PUSH
42266: LD_INT 87
42268: PUSH
42269: LD_INT 88
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: ST_TO_ADDR
42328: GO 42561
42330: LD_INT 3
42332: DOUBLE
42333: EQUAL
42334: IFTRUE 42338
42336: GO 42560
42338: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42339: LD_ADDR_VAR 0 4
42343: PUSH
42344: LD_INT 46
42346: PUSH
42347: LD_INT 47
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 82
42358: PUSH
42359: LD_INT 83
42361: PUSH
42362: LD_INT 84
42364: PUSH
42365: LD_INT 85
42367: PUSH
42368: LD_INT 86
42370: PUSH
42371: LD_INT 11
42373: PUSH
42374: LD_INT 9
42376: PUSH
42377: LD_INT 20
42379: PUSH
42380: LD_INT 19
42382: PUSH
42383: LD_INT 21
42385: PUSH
42386: LD_INT 24
42388: PUSH
42389: LD_INT 22
42391: PUSH
42392: LD_INT 25
42394: PUSH
42395: LD_INT 28
42397: PUSH
42398: LD_INT 29
42400: PUSH
42401: LD_INT 30
42403: PUSH
42404: LD_INT 31
42406: PUSH
42407: LD_INT 37
42409: PUSH
42410: LD_INT 38
42412: PUSH
42413: LD_INT 32
42415: PUSH
42416: LD_INT 27
42418: PUSH
42419: LD_INT 33
42421: PUSH
42422: LD_INT 69
42424: PUSH
42425: LD_INT 39
42427: PUSH
42428: LD_INT 34
42430: PUSH
42431: LD_INT 40
42433: PUSH
42434: LD_INT 71
42436: PUSH
42437: LD_INT 23
42439: PUSH
42440: LD_INT 44
42442: PUSH
42443: LD_INT 48
42445: PUSH
42446: LD_INT 49
42448: PUSH
42449: LD_INT 50
42451: PUSH
42452: LD_INT 51
42454: PUSH
42455: LD_INT 52
42457: PUSH
42458: LD_INT 53
42460: PUSH
42461: LD_INT 54
42463: PUSH
42464: LD_INT 55
42466: PUSH
42467: LD_INT 56
42469: PUSH
42470: LD_INT 57
42472: PUSH
42473: LD_INT 58
42475: PUSH
42476: LD_INT 59
42478: PUSH
42479: LD_INT 63
42481: PUSH
42482: LD_INT 64
42484: PUSH
42485: LD_INT 65
42487: PUSH
42488: LD_INT 82
42490: PUSH
42491: LD_INT 83
42493: PUSH
42494: LD_INT 84
42496: PUSH
42497: LD_INT 85
42499: PUSH
42500: LD_INT 86
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: ST_TO_ADDR
42558: GO 42561
42560: POP
// if state > - 1 and state < 3 then
42561: LD_VAR 0 3
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: GREATER
42570: PUSH
42571: LD_VAR 0 3
42575: PUSH
42576: LD_INT 3
42578: LESS
42579: AND
42580: IFFALSE 42637
// for i in result do
42582: LD_ADDR_VAR 0 5
42586: PUSH
42587: LD_VAR 0 4
42591: PUSH
42592: FOR_IN
42593: IFFALSE 42635
// if GetTech ( i , side ) <> state then
42595: LD_VAR 0 5
42599: PPUSH
42600: LD_VAR 0 1
42604: PPUSH
42605: CALL_OW 321
42609: PUSH
42610: LD_VAR 0 3
42614: NONEQUAL
42615: IFFALSE 42633
// result := result diff i ;
42617: LD_ADDR_VAR 0 4
42621: PUSH
42622: LD_VAR 0 4
42626: PUSH
42627: LD_VAR 0 5
42631: DIFF
42632: ST_TO_ADDR
42633: GO 42592
42635: POP
42636: POP
// end ;
42637: LD_VAR 0 4
42641: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42642: LD_INT 0
42644: PPUSH
42645: PPUSH
42646: PPUSH
// result := true ;
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_INT 1
42654: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42655: LD_ADDR_VAR 0 5
42659: PUSH
42660: LD_VAR 0 2
42664: PPUSH
42665: CALL_OW 480
42669: ST_TO_ADDR
// if not tmp then
42670: LD_VAR 0 5
42674: NOT
42675: IFFALSE 42679
// exit ;
42677: GO 42728
// for i in tmp do
42679: LD_ADDR_VAR 0 4
42683: PUSH
42684: LD_VAR 0 5
42688: PUSH
42689: FOR_IN
42690: IFFALSE 42726
// if GetTech ( i , side ) <> state_researched then
42692: LD_VAR 0 4
42696: PPUSH
42697: LD_VAR 0 1
42701: PPUSH
42702: CALL_OW 321
42706: PUSH
42707: LD_INT 2
42709: NONEQUAL
42710: IFFALSE 42724
// begin result := false ;
42712: LD_ADDR_VAR 0 3
42716: PUSH
42717: LD_INT 0
42719: ST_TO_ADDR
// exit ;
42720: POP
42721: POP
42722: GO 42728
// end ;
42724: GO 42689
42726: POP
42727: POP
// end ;
42728: LD_VAR 0 3
42732: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42733: LD_INT 0
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42748: LD_VAR 0 1
42752: NOT
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 257
42763: PUSH
42764: LD_INT 9
42766: NONEQUAL
42767: OR
42768: IFFALSE 42772
// exit ;
42770: GO 43345
// side := GetSide ( unit ) ;
42772: LD_ADDR_VAR 0 9
42776: PUSH
42777: LD_VAR 0 1
42781: PPUSH
42782: CALL_OW 255
42786: ST_TO_ADDR
// tech_space := tech_spacanom ;
42787: LD_ADDR_VAR 0 12
42791: PUSH
42792: LD_INT 29
42794: ST_TO_ADDR
// tech_time := tech_taurad ;
42795: LD_ADDR_VAR 0 13
42799: PUSH
42800: LD_INT 28
42802: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42803: LD_ADDR_VAR 0 11
42807: PUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: CALL_OW 310
42817: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42818: LD_VAR 0 11
42822: PPUSH
42823: CALL_OW 247
42827: PUSH
42828: LD_INT 2
42830: EQUAL
42831: IFFALSE 42835
// exit ;
42833: GO 43345
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42835: LD_ADDR_VAR 0 8
42839: PUSH
42840: LD_INT 81
42842: PUSH
42843: LD_VAR 0 9
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: LD_INT 21
42857: PUSH
42858: LD_INT 3
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PPUSH
42873: CALL_OW 69
42877: ST_TO_ADDR
// if not tmp then
42878: LD_VAR 0 8
42882: NOT
42883: IFFALSE 42887
// exit ;
42885: GO 43345
// if in_unit then
42887: LD_VAR 0 11
42891: IFFALSE 42915
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42893: LD_ADDR_VAR 0 10
42897: PUSH
42898: LD_VAR 0 8
42902: PPUSH
42903: LD_VAR 0 11
42907: PPUSH
42908: CALL_OW 74
42912: ST_TO_ADDR
42913: GO 42935
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42915: LD_ADDR_VAR 0 10
42919: PUSH
42920: LD_VAR 0 8
42924: PPUSH
42925: LD_VAR 0 1
42929: PPUSH
42930: CALL_OW 74
42934: ST_TO_ADDR
// if not enemy then
42935: LD_VAR 0 10
42939: NOT
42940: IFFALSE 42944
// exit ;
42942: GO 43345
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42944: LD_VAR 0 11
42948: PUSH
42949: LD_VAR 0 11
42953: PPUSH
42954: LD_VAR 0 10
42958: PPUSH
42959: CALL_OW 296
42963: PUSH
42964: LD_INT 13
42966: GREATER
42967: AND
42968: PUSH
42969: LD_VAR 0 1
42973: PPUSH
42974: LD_VAR 0 10
42978: PPUSH
42979: CALL_OW 296
42983: PUSH
42984: LD_INT 12
42986: GREATER
42987: OR
42988: IFFALSE 42992
// exit ;
42990: GO 43345
// missile := [ 1 ] ;
42992: LD_ADDR_VAR 0 14
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43003: LD_VAR 0 9
43007: PPUSH
43008: LD_VAR 0 12
43012: PPUSH
43013: CALL_OW 325
43017: IFFALSE 43046
// missile := Replace ( missile , missile + 1 , 2 ) ;
43019: LD_ADDR_VAR 0 14
43023: PUSH
43024: LD_VAR 0 14
43028: PPUSH
43029: LD_VAR 0 14
43033: PUSH
43034: LD_INT 1
43036: PLUS
43037: PPUSH
43038: LD_INT 2
43040: PPUSH
43041: CALL_OW 1
43045: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43046: LD_VAR 0 9
43050: PPUSH
43051: LD_VAR 0 13
43055: PPUSH
43056: CALL_OW 325
43060: PUSH
43061: LD_VAR 0 10
43065: PPUSH
43066: CALL_OW 255
43070: PPUSH
43071: LD_VAR 0 13
43075: PPUSH
43076: CALL_OW 325
43080: NOT
43081: AND
43082: IFFALSE 43111
// missile := Replace ( missile , missile + 1 , 3 ) ;
43084: LD_ADDR_VAR 0 14
43088: PUSH
43089: LD_VAR 0 14
43093: PPUSH
43094: LD_VAR 0 14
43098: PUSH
43099: LD_INT 1
43101: PLUS
43102: PPUSH
43103: LD_INT 3
43105: PPUSH
43106: CALL_OW 1
43110: ST_TO_ADDR
// if missile < 2 then
43111: LD_VAR 0 14
43115: PUSH
43116: LD_INT 2
43118: LESS
43119: IFFALSE 43123
// exit ;
43121: GO 43345
// x := GetX ( enemy ) ;
43123: LD_ADDR_VAR 0 4
43127: PUSH
43128: LD_VAR 0 10
43132: PPUSH
43133: CALL_OW 250
43137: ST_TO_ADDR
// y := GetY ( enemy ) ;
43138: LD_ADDR_VAR 0 5
43142: PUSH
43143: LD_VAR 0 10
43147: PPUSH
43148: CALL_OW 251
43152: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43153: LD_ADDR_VAR 0 6
43157: PUSH
43158: LD_VAR 0 4
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PPUSH
43167: LD_INT 1
43169: PPUSH
43170: CALL_OW 12
43174: PLUS
43175: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43176: LD_ADDR_VAR 0 7
43180: PUSH
43181: LD_VAR 0 5
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PPUSH
43190: LD_INT 1
43192: PPUSH
43193: CALL_OW 12
43197: PLUS
43198: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43199: LD_VAR 0 6
43203: PPUSH
43204: LD_VAR 0 7
43208: PPUSH
43209: CALL_OW 488
43213: NOT
43214: IFFALSE 43236
// begin _x := x ;
43216: LD_ADDR_VAR 0 6
43220: PUSH
43221: LD_VAR 0 4
43225: ST_TO_ADDR
// _y := y ;
43226: LD_ADDR_VAR 0 7
43230: PUSH
43231: LD_VAR 0 5
43235: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43236: LD_ADDR_VAR 0 3
43240: PUSH
43241: LD_INT 1
43243: PPUSH
43244: LD_VAR 0 14
43248: PPUSH
43249: CALL_OW 12
43253: ST_TO_ADDR
// case i of 1 :
43254: LD_VAR 0 3
43258: PUSH
43259: LD_INT 1
43261: DOUBLE
43262: EQUAL
43263: IFTRUE 43267
43265: GO 43284
43267: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43268: LD_VAR 0 1
43272: PPUSH
43273: LD_VAR 0 10
43277: PPUSH
43278: CALL_OW 115
43282: GO 43345
43284: LD_INT 2
43286: DOUBLE
43287: EQUAL
43288: IFTRUE 43292
43290: GO 43314
43292: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43293: LD_VAR 0 1
43297: PPUSH
43298: LD_VAR 0 6
43302: PPUSH
43303: LD_VAR 0 7
43307: PPUSH
43308: CALL_OW 153
43312: GO 43345
43314: LD_INT 3
43316: DOUBLE
43317: EQUAL
43318: IFTRUE 43322
43320: GO 43344
43322: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43323: LD_VAR 0 1
43327: PPUSH
43328: LD_VAR 0 6
43332: PPUSH
43333: LD_VAR 0 7
43337: PPUSH
43338: CALL_OW 154
43342: GO 43345
43344: POP
// end ;
43345: LD_VAR 0 2
43349: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43350: LD_INT 0
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
43357: PPUSH
// if not unit or not building then
43358: LD_VAR 0 1
43362: NOT
43363: PUSH
43364: LD_VAR 0 2
43368: NOT
43369: OR
43370: IFFALSE 43374
// exit ;
43372: GO 43532
// x := GetX ( building ) ;
43374: LD_ADDR_VAR 0 5
43378: PUSH
43379: LD_VAR 0 2
43383: PPUSH
43384: CALL_OW 250
43388: ST_TO_ADDR
// y := GetY ( building ) ;
43389: LD_ADDR_VAR 0 6
43393: PUSH
43394: LD_VAR 0 2
43398: PPUSH
43399: CALL_OW 251
43403: ST_TO_ADDR
// for i = 0 to 5 do
43404: LD_ADDR_VAR 0 4
43408: PUSH
43409: DOUBLE
43410: LD_INT 0
43412: DEC
43413: ST_TO_ADDR
43414: LD_INT 5
43416: PUSH
43417: FOR_TO
43418: IFFALSE 43530
// begin _x := ShiftX ( x , i , 3 ) ;
43420: LD_ADDR_VAR 0 7
43424: PUSH
43425: LD_VAR 0 5
43429: PPUSH
43430: LD_VAR 0 4
43434: PPUSH
43435: LD_INT 3
43437: PPUSH
43438: CALL_OW 272
43442: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43443: LD_ADDR_VAR 0 8
43447: PUSH
43448: LD_VAR 0 6
43452: PPUSH
43453: LD_VAR 0 4
43457: PPUSH
43458: LD_INT 3
43460: PPUSH
43461: CALL_OW 273
43465: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43466: LD_VAR 0 7
43470: PPUSH
43471: LD_VAR 0 8
43475: PPUSH
43476: CALL_OW 488
43480: NOT
43481: IFFALSE 43485
// continue ;
43483: GO 43417
// if HexInfo ( _x , _y ) = 0 then
43485: LD_VAR 0 7
43489: PPUSH
43490: LD_VAR 0 8
43494: PPUSH
43495: CALL_OW 428
43499: PUSH
43500: LD_INT 0
43502: EQUAL
43503: IFFALSE 43528
// begin ComMoveXY ( unit , _x , _y ) ;
43505: LD_VAR 0 1
43509: PPUSH
43510: LD_VAR 0 7
43514: PPUSH
43515: LD_VAR 0 8
43519: PPUSH
43520: CALL_OW 111
// exit ;
43524: POP
43525: POP
43526: GO 43532
// end ; end ;
43528: GO 43417
43530: POP
43531: POP
// end ;
43532: LD_VAR 0 3
43536: RET
// export function ScanBase ( side , base_area ) ; begin
43537: LD_INT 0
43539: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43540: LD_ADDR_VAR 0 3
43544: PUSH
43545: LD_VAR 0 2
43549: PPUSH
43550: LD_INT 81
43552: PUSH
43553: LD_VAR 0 1
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PPUSH
43562: CALL_OW 70
43566: ST_TO_ADDR
// end ;
43567: LD_VAR 0 3
43571: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43572: LD_INT 0
43574: PPUSH
43575: PPUSH
43576: PPUSH
43577: PPUSH
// result := false ;
43578: LD_ADDR_VAR 0 2
43582: PUSH
43583: LD_INT 0
43585: ST_TO_ADDR
// side := GetSide ( unit ) ;
43586: LD_ADDR_VAR 0 3
43590: PUSH
43591: LD_VAR 0 1
43595: PPUSH
43596: CALL_OW 255
43600: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43601: LD_ADDR_VAR 0 4
43605: PUSH
43606: LD_VAR 0 1
43610: PPUSH
43611: CALL_OW 248
43615: ST_TO_ADDR
// case nat of 1 :
43616: LD_VAR 0 4
43620: PUSH
43621: LD_INT 1
43623: DOUBLE
43624: EQUAL
43625: IFTRUE 43629
43627: GO 43640
43629: POP
// tech := tech_lassight ; 2 :
43630: LD_ADDR_VAR 0 5
43634: PUSH
43635: LD_INT 12
43637: ST_TO_ADDR
43638: GO 43679
43640: LD_INT 2
43642: DOUBLE
43643: EQUAL
43644: IFTRUE 43648
43646: GO 43659
43648: POP
// tech := tech_mortar ; 3 :
43649: LD_ADDR_VAR 0 5
43653: PUSH
43654: LD_INT 41
43656: ST_TO_ADDR
43657: GO 43679
43659: LD_INT 3
43661: DOUBLE
43662: EQUAL
43663: IFTRUE 43667
43665: GO 43678
43667: POP
// tech := tech_bazooka ; end ;
43668: LD_ADDR_VAR 0 5
43672: PUSH
43673: LD_INT 44
43675: ST_TO_ADDR
43676: GO 43679
43678: POP
// if Researched ( side , tech ) then
43679: LD_VAR 0 3
43683: PPUSH
43684: LD_VAR 0 5
43688: PPUSH
43689: CALL_OW 325
43693: IFFALSE 43720
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43695: LD_ADDR_VAR 0 2
43699: PUSH
43700: LD_INT 5
43702: PUSH
43703: LD_INT 8
43705: PUSH
43706: LD_INT 9
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: LIST
43713: PUSH
43714: LD_VAR 0 4
43718: ARRAY
43719: ST_TO_ADDR
// end ;
43720: LD_VAR 0 2
43724: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43725: LD_INT 0
43727: PPUSH
43728: PPUSH
43729: PPUSH
// if not mines then
43730: LD_VAR 0 2
43734: NOT
43735: IFFALSE 43739
// exit ;
43737: GO 43883
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43739: LD_ADDR_VAR 0 5
43743: PUSH
43744: LD_INT 81
43746: PUSH
43747: LD_VAR 0 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 3
43758: PUSH
43759: LD_INT 21
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PPUSH
43777: CALL_OW 69
43781: ST_TO_ADDR
// for i in mines do
43782: LD_ADDR_VAR 0 4
43786: PUSH
43787: LD_VAR 0 2
43791: PUSH
43792: FOR_IN
43793: IFFALSE 43881
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43795: LD_VAR 0 4
43799: PUSH
43800: LD_INT 1
43802: ARRAY
43803: PPUSH
43804: LD_VAR 0 4
43808: PUSH
43809: LD_INT 2
43811: ARRAY
43812: PPUSH
43813: CALL_OW 458
43817: NOT
43818: IFFALSE 43822
// continue ;
43820: GO 43792
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43822: LD_VAR 0 4
43826: PUSH
43827: LD_INT 1
43829: ARRAY
43830: PPUSH
43831: LD_VAR 0 4
43835: PUSH
43836: LD_INT 2
43838: ARRAY
43839: PPUSH
43840: CALL_OW 428
43844: PUSH
43845: LD_VAR 0 5
43849: IN
43850: IFFALSE 43879
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43852: LD_VAR 0 4
43856: PUSH
43857: LD_INT 1
43859: ARRAY
43860: PPUSH
43861: LD_VAR 0 4
43865: PUSH
43866: LD_INT 2
43868: ARRAY
43869: PPUSH
43870: LD_VAR 0 1
43874: PPUSH
43875: CALL_OW 456
// end ;
43879: GO 43792
43881: POP
43882: POP
// end ;
43883: LD_VAR 0 3
43887: RET
// export function Count ( array ) ; begin
43888: LD_INT 0
43890: PPUSH
// result := array + 0 ;
43891: LD_ADDR_VAR 0 2
43895: PUSH
43896: LD_VAR 0 1
43900: PUSH
43901: LD_INT 0
43903: PLUS
43904: ST_TO_ADDR
// end ;
43905: LD_VAR 0 2
43909: RET
// export function IsEmpty ( building ) ; begin
43910: LD_INT 0
43912: PPUSH
// if not building then
43913: LD_VAR 0 1
43917: NOT
43918: IFFALSE 43922
// exit ;
43920: GO 43965
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43922: LD_ADDR_VAR 0 2
43926: PUSH
43927: LD_VAR 0 1
43931: PUSH
43932: LD_INT 22
43934: PUSH
43935: LD_VAR 0 1
43939: PPUSH
43940: CALL_OW 255
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 58
43951: PUSH
43952: EMPTY
43953: LIST
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PPUSH
43959: CALL_OW 69
43963: IN
43964: ST_TO_ADDR
// end ;
43965: LD_VAR 0 2
43969: RET
// export function IsNotFull ( building ) ; var places ; begin
43970: LD_INT 0
43972: PPUSH
43973: PPUSH
// if not building then
43974: LD_VAR 0 1
43978: NOT
43979: IFFALSE 43983
// exit ;
43981: GO 44011
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43983: LD_ADDR_VAR 0 2
43987: PUSH
43988: LD_VAR 0 1
43992: PPUSH
43993: LD_INT 3
43995: PUSH
43996: LD_INT 62
43998: PUSH
43999: EMPTY
44000: LIST
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PPUSH
44006: CALL_OW 72
44010: ST_TO_ADDR
// end ;
44011: LD_VAR 0 2
44015: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44016: LD_INT 0
44018: PPUSH
44019: PPUSH
44020: PPUSH
44021: PPUSH
// tmp := [ ] ;
44022: LD_ADDR_VAR 0 3
44026: PUSH
44027: EMPTY
44028: ST_TO_ADDR
// list := [ ] ;
44029: LD_ADDR_VAR 0 5
44033: PUSH
44034: EMPTY
44035: ST_TO_ADDR
// for i = 16 to 25 do
44036: LD_ADDR_VAR 0 4
44040: PUSH
44041: DOUBLE
44042: LD_INT 16
44044: DEC
44045: ST_TO_ADDR
44046: LD_INT 25
44048: PUSH
44049: FOR_TO
44050: IFFALSE 44123
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44052: LD_ADDR_VAR 0 3
44056: PUSH
44057: LD_VAR 0 3
44061: PUSH
44062: LD_INT 22
44064: PUSH
44065: LD_VAR 0 1
44069: PPUSH
44070: CALL_OW 255
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 91
44081: PUSH
44082: LD_VAR 0 1
44086: PUSH
44087: LD_INT 6
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 30
44097: PUSH
44098: LD_VAR 0 4
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: LIST
44111: PUSH
44112: EMPTY
44113: LIST
44114: PPUSH
44115: CALL_OW 69
44119: ADD
44120: ST_TO_ADDR
44121: GO 44049
44123: POP
44124: POP
// for i = 1 to tmp do
44125: LD_ADDR_VAR 0 4
44129: PUSH
44130: DOUBLE
44131: LD_INT 1
44133: DEC
44134: ST_TO_ADDR
44135: LD_VAR 0 3
44139: PUSH
44140: FOR_TO
44141: IFFALSE 44229
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44143: LD_ADDR_VAR 0 5
44147: PUSH
44148: LD_VAR 0 5
44152: PUSH
44153: LD_VAR 0 3
44157: PUSH
44158: LD_VAR 0 4
44162: ARRAY
44163: PPUSH
44164: CALL_OW 266
44168: PUSH
44169: LD_VAR 0 3
44173: PUSH
44174: LD_VAR 0 4
44178: ARRAY
44179: PPUSH
44180: CALL_OW 250
44184: PUSH
44185: LD_VAR 0 3
44189: PUSH
44190: LD_VAR 0 4
44194: ARRAY
44195: PPUSH
44196: CALL_OW 251
44200: PUSH
44201: LD_VAR 0 3
44205: PUSH
44206: LD_VAR 0 4
44210: ARRAY
44211: PPUSH
44212: CALL_OW 254
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: ADD
44226: ST_TO_ADDR
44227: GO 44140
44229: POP
44230: POP
// result := list ;
44231: LD_ADDR_VAR 0 2
44235: PUSH
44236: LD_VAR 0 5
44240: ST_TO_ADDR
// end ;
44241: LD_VAR 0 2
44245: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44246: LD_INT 0
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
// if not factory then
44255: LD_VAR 0 1
44259: NOT
44260: IFFALSE 44264
// exit ;
44262: GO 44857
// if control = control_apeman then
44264: LD_VAR 0 4
44268: PUSH
44269: LD_INT 5
44271: EQUAL
44272: IFFALSE 44381
// begin tmp := UnitsInside ( factory ) ;
44274: LD_ADDR_VAR 0 8
44278: PUSH
44279: LD_VAR 0 1
44283: PPUSH
44284: CALL_OW 313
44288: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44289: LD_VAR 0 8
44293: PPUSH
44294: LD_INT 25
44296: PUSH
44297: LD_INT 12
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PPUSH
44304: CALL_OW 72
44308: NOT
44309: IFFALSE 44319
// control := control_manual ;
44311: LD_ADDR_VAR 0 4
44315: PUSH
44316: LD_INT 1
44318: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44319: LD_ADDR_VAR 0 8
44323: PUSH
44324: LD_VAR 0 1
44328: PPUSH
44329: CALL 44016 0 1
44333: ST_TO_ADDR
// if tmp then
44334: LD_VAR 0 8
44338: IFFALSE 44381
// begin for i in tmp do
44340: LD_ADDR_VAR 0 7
44344: PUSH
44345: LD_VAR 0 8
44349: PUSH
44350: FOR_IN
44351: IFFALSE 44379
// if i [ 1 ] = b_ext_radio then
44353: LD_VAR 0 7
44357: PUSH
44358: LD_INT 1
44360: ARRAY
44361: PUSH
44362: LD_INT 22
44364: EQUAL
44365: IFFALSE 44377
// begin control := control_remote ;
44367: LD_ADDR_VAR 0 4
44371: PUSH
44372: LD_INT 2
44374: ST_TO_ADDR
// break ;
44375: GO 44379
// end ;
44377: GO 44350
44379: POP
44380: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44381: LD_VAR 0 1
44385: PPUSH
44386: LD_VAR 0 2
44390: PPUSH
44391: LD_VAR 0 3
44395: PPUSH
44396: LD_VAR 0 4
44400: PPUSH
44401: LD_VAR 0 5
44405: PPUSH
44406: CALL_OW 448
44410: IFFALSE 44445
// begin result := [ chassis , engine , control , weapon ] ;
44412: LD_ADDR_VAR 0 6
44416: PUSH
44417: LD_VAR 0 2
44421: PUSH
44422: LD_VAR 0 3
44426: PUSH
44427: LD_VAR 0 4
44431: PUSH
44432: LD_VAR 0 5
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: ST_TO_ADDR
// exit ;
44443: GO 44857
// end ; _chassis := AvailableChassisList ( factory ) ;
44445: LD_ADDR_VAR 0 9
44449: PUSH
44450: LD_VAR 0 1
44454: PPUSH
44455: CALL_OW 475
44459: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44460: LD_ADDR_VAR 0 11
44464: PUSH
44465: LD_VAR 0 1
44469: PPUSH
44470: CALL_OW 476
44474: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44475: LD_ADDR_VAR 0 12
44479: PUSH
44480: LD_VAR 0 1
44484: PPUSH
44485: CALL_OW 477
44489: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44490: LD_ADDR_VAR 0 10
44494: PUSH
44495: LD_VAR 0 1
44499: PPUSH
44500: CALL_OW 478
44504: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44505: LD_VAR 0 9
44509: NOT
44510: PUSH
44511: LD_VAR 0 11
44515: NOT
44516: OR
44517: PUSH
44518: LD_VAR 0 12
44522: NOT
44523: OR
44524: PUSH
44525: LD_VAR 0 10
44529: NOT
44530: OR
44531: IFFALSE 44566
// begin result := [ chassis , engine , control , weapon ] ;
44533: LD_ADDR_VAR 0 6
44537: PUSH
44538: LD_VAR 0 2
44542: PUSH
44543: LD_VAR 0 3
44547: PUSH
44548: LD_VAR 0 4
44552: PUSH
44553: LD_VAR 0 5
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
// exit ;
44564: GO 44857
// end ; if not chassis in _chassis then
44566: LD_VAR 0 2
44570: PUSH
44571: LD_VAR 0 9
44575: IN
44576: NOT
44577: IFFALSE 44603
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44579: LD_ADDR_VAR 0 2
44583: PUSH
44584: LD_VAR 0 9
44588: PUSH
44589: LD_INT 1
44591: PPUSH
44592: LD_VAR 0 9
44596: PPUSH
44597: CALL_OW 12
44601: ARRAY
44602: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44603: LD_VAR 0 2
44607: PPUSH
44608: LD_VAR 0 3
44612: PPUSH
44613: CALL 44862 0 2
44617: NOT
44618: IFFALSE 44677
// repeat engine := _engine [ 1 ] ;
44620: LD_ADDR_VAR 0 3
44624: PUSH
44625: LD_VAR 0 11
44629: PUSH
44630: LD_INT 1
44632: ARRAY
44633: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44634: LD_ADDR_VAR 0 11
44638: PUSH
44639: LD_VAR 0 11
44643: PPUSH
44644: LD_INT 1
44646: PPUSH
44647: CALL_OW 3
44651: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44652: LD_VAR 0 2
44656: PPUSH
44657: LD_VAR 0 3
44661: PPUSH
44662: CALL 44862 0 2
44666: PUSH
44667: LD_VAR 0 11
44671: PUSH
44672: EMPTY
44673: EQUAL
44674: OR
44675: IFFALSE 44620
// if not control in _control then
44677: LD_VAR 0 4
44681: PUSH
44682: LD_VAR 0 12
44686: IN
44687: NOT
44688: IFFALSE 44714
// control := _control [ rand ( 1 , _control ) ] ;
44690: LD_ADDR_VAR 0 4
44694: PUSH
44695: LD_VAR 0 12
44699: PUSH
44700: LD_INT 1
44702: PPUSH
44703: LD_VAR 0 12
44707: PPUSH
44708: CALL_OW 12
44712: ARRAY
44713: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44714: LD_VAR 0 2
44718: PPUSH
44719: LD_VAR 0 5
44723: PPUSH
44724: CALL 45082 0 2
44728: NOT
44729: IFFALSE 44788
// repeat weapon := _weapon [ 1 ] ;
44731: LD_ADDR_VAR 0 5
44735: PUSH
44736: LD_VAR 0 10
44740: PUSH
44741: LD_INT 1
44743: ARRAY
44744: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44745: LD_ADDR_VAR 0 10
44749: PUSH
44750: LD_VAR 0 10
44754: PPUSH
44755: LD_INT 1
44757: PPUSH
44758: CALL_OW 3
44762: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44763: LD_VAR 0 2
44767: PPUSH
44768: LD_VAR 0 5
44772: PPUSH
44773: CALL 45082 0 2
44777: PUSH
44778: LD_VAR 0 10
44782: PUSH
44783: EMPTY
44784: EQUAL
44785: OR
44786: IFFALSE 44731
// result := [ ] ;
44788: LD_ADDR_VAR 0 6
44792: PUSH
44793: EMPTY
44794: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44795: LD_VAR 0 1
44799: PPUSH
44800: LD_VAR 0 2
44804: PPUSH
44805: LD_VAR 0 3
44809: PPUSH
44810: LD_VAR 0 4
44814: PPUSH
44815: LD_VAR 0 5
44819: PPUSH
44820: CALL_OW 448
44824: IFFALSE 44857
// result := [ chassis , engine , control , weapon ] ;
44826: LD_ADDR_VAR 0 6
44830: PUSH
44831: LD_VAR 0 2
44835: PUSH
44836: LD_VAR 0 3
44840: PUSH
44841: LD_VAR 0 4
44845: PUSH
44846: LD_VAR 0 5
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: ST_TO_ADDR
// end ;
44857: LD_VAR 0 6
44861: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44862: LD_INT 0
44864: PPUSH
// if not chassis or not engine then
44865: LD_VAR 0 1
44869: NOT
44870: PUSH
44871: LD_VAR 0 2
44875: NOT
44876: OR
44877: IFFALSE 44881
// exit ;
44879: GO 45077
// case engine of engine_solar :
44881: LD_VAR 0 2
44885: PUSH
44886: LD_INT 2
44888: DOUBLE
44889: EQUAL
44890: IFTRUE 44894
44892: GO 44932
44894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44895: LD_ADDR_VAR 0 3
44899: PUSH
44900: LD_INT 11
44902: PUSH
44903: LD_INT 12
44905: PUSH
44906: LD_INT 13
44908: PUSH
44909: LD_INT 14
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: ST_TO_ADDR
44930: GO 45061
44932: LD_INT 1
44934: DOUBLE
44935: EQUAL
44936: IFTRUE 44940
44938: GO 45002
44940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44941: LD_ADDR_VAR 0 3
44945: PUSH
44946: LD_INT 11
44948: PUSH
44949: LD_INT 12
44951: PUSH
44952: LD_INT 13
44954: PUSH
44955: LD_INT 14
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: LD_INT 3
44966: PUSH
44967: LD_INT 4
44969: PUSH
44970: LD_INT 5
44972: PUSH
44973: LD_INT 21
44975: PUSH
44976: LD_INT 23
44978: PUSH
44979: LD_INT 22
44981: PUSH
44982: LD_INT 24
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: ST_TO_ADDR
45000: GO 45061
45002: LD_INT 3
45004: DOUBLE
45005: EQUAL
45006: IFTRUE 45010
45008: GO 45060
45010: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45011: LD_ADDR_VAR 0 3
45015: PUSH
45016: LD_INT 13
45018: PUSH
45019: LD_INT 14
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: LD_INT 4
45030: PUSH
45031: LD_INT 5
45033: PUSH
45034: LD_INT 21
45036: PUSH
45037: LD_INT 22
45039: PUSH
45040: LD_INT 23
45042: PUSH
45043: LD_INT 24
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
45058: GO 45061
45060: POP
// result := ( chassis in result ) ;
45061: LD_ADDR_VAR 0 3
45065: PUSH
45066: LD_VAR 0 1
45070: PUSH
45071: LD_VAR 0 3
45075: IN
45076: ST_TO_ADDR
// end ;
45077: LD_VAR 0 3
45081: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45082: LD_INT 0
45084: PPUSH
// if not chassis or not weapon then
45085: LD_VAR 0 1
45089: NOT
45090: PUSH
45091: LD_VAR 0 2
45095: NOT
45096: OR
45097: IFFALSE 45101
// exit ;
45099: GO 46161
// case weapon of us_machine_gun :
45101: LD_VAR 0 2
45105: PUSH
45106: LD_INT 2
45108: DOUBLE
45109: EQUAL
45110: IFTRUE 45114
45112: GO 45144
45114: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45115: LD_ADDR_VAR 0 3
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 3
45128: PUSH
45129: LD_INT 4
45131: PUSH
45132: LD_INT 5
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: ST_TO_ADDR
45142: GO 46145
45144: LD_INT 3
45146: DOUBLE
45147: EQUAL
45148: IFTRUE 45152
45150: GO 45182
45152: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45153: LD_ADDR_VAR 0 3
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 3
45166: PUSH
45167: LD_INT 4
45169: PUSH
45170: LD_INT 5
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: ST_TO_ADDR
45180: GO 46145
45182: LD_INT 11
45184: DOUBLE
45185: EQUAL
45186: IFTRUE 45190
45188: GO 45220
45190: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45191: LD_ADDR_VAR 0 3
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 3
45204: PUSH
45205: LD_INT 4
45207: PUSH
45208: LD_INT 5
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
45218: GO 46145
45220: LD_INT 4
45222: DOUBLE
45223: EQUAL
45224: IFTRUE 45228
45226: GO 45254
45228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45229: LD_ADDR_VAR 0 3
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: LD_INT 4
45242: PUSH
45243: LD_INT 5
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: ST_TO_ADDR
45252: GO 46145
45254: LD_INT 5
45256: DOUBLE
45257: EQUAL
45258: IFTRUE 45262
45260: GO 45288
45262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45263: LD_ADDR_VAR 0 3
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: LD_INT 4
45276: PUSH
45277: LD_INT 5
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: ST_TO_ADDR
45286: GO 46145
45288: LD_INT 9
45290: DOUBLE
45291: EQUAL
45292: IFTRUE 45296
45294: GO 45322
45296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45297: LD_ADDR_VAR 0 3
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 3
45307: PUSH
45308: LD_INT 4
45310: PUSH
45311: LD_INT 5
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
45320: GO 46145
45322: LD_INT 7
45324: DOUBLE
45325: EQUAL
45326: IFTRUE 45330
45328: GO 45356
45330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45331: LD_ADDR_VAR 0 3
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 3
45341: PUSH
45342: LD_INT 4
45344: PUSH
45345: LD_INT 5
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: ST_TO_ADDR
45354: GO 46145
45356: LD_INT 12
45358: DOUBLE
45359: EQUAL
45360: IFTRUE 45364
45362: GO 45390
45364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45365: LD_ADDR_VAR 0 3
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: LD_INT 3
45375: PUSH
45376: LD_INT 4
45378: PUSH
45379: LD_INT 5
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: ST_TO_ADDR
45388: GO 46145
45390: LD_INT 13
45392: DOUBLE
45393: EQUAL
45394: IFTRUE 45398
45396: GO 45424
45398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45399: LD_ADDR_VAR 0 3
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: LD_INT 3
45409: PUSH
45410: LD_INT 4
45412: PUSH
45413: LD_INT 5
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: ST_TO_ADDR
45422: GO 46145
45424: LD_INT 14
45426: DOUBLE
45427: EQUAL
45428: IFTRUE 45432
45430: GO 45450
45432: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45433: LD_ADDR_VAR 0 3
45437: PUSH
45438: LD_INT 4
45440: PUSH
45441: LD_INT 5
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: ST_TO_ADDR
45448: GO 46145
45450: LD_INT 6
45452: DOUBLE
45453: EQUAL
45454: IFTRUE 45458
45456: GO 45476
45458: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45459: LD_ADDR_VAR 0 3
45463: PUSH
45464: LD_INT 4
45466: PUSH
45467: LD_INT 5
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: ST_TO_ADDR
45474: GO 46145
45476: LD_INT 10
45478: DOUBLE
45479: EQUAL
45480: IFTRUE 45484
45482: GO 45502
45484: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45485: LD_ADDR_VAR 0 3
45489: PUSH
45490: LD_INT 4
45492: PUSH
45493: LD_INT 5
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: ST_TO_ADDR
45500: GO 46145
45502: LD_INT 22
45504: DOUBLE
45505: EQUAL
45506: IFTRUE 45510
45508: GO 45536
45510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45511: LD_ADDR_VAR 0 3
45515: PUSH
45516: LD_INT 11
45518: PUSH
45519: LD_INT 12
45521: PUSH
45522: LD_INT 13
45524: PUSH
45525: LD_INT 14
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
45534: GO 46145
45536: LD_INT 23
45538: DOUBLE
45539: EQUAL
45540: IFTRUE 45544
45542: GO 45570
45544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45545: LD_ADDR_VAR 0 3
45549: PUSH
45550: LD_INT 11
45552: PUSH
45553: LD_INT 12
45555: PUSH
45556: LD_INT 13
45558: PUSH
45559: LD_INT 14
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: ST_TO_ADDR
45568: GO 46145
45570: LD_INT 24
45572: DOUBLE
45573: EQUAL
45574: IFTRUE 45578
45576: GO 45604
45578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45579: LD_ADDR_VAR 0 3
45583: PUSH
45584: LD_INT 11
45586: PUSH
45587: LD_INT 12
45589: PUSH
45590: LD_INT 13
45592: PUSH
45593: LD_INT 14
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
45602: GO 46145
45604: LD_INT 30
45606: DOUBLE
45607: EQUAL
45608: IFTRUE 45612
45610: GO 45638
45612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45613: LD_ADDR_VAR 0 3
45617: PUSH
45618: LD_INT 11
45620: PUSH
45621: LD_INT 12
45623: PUSH
45624: LD_INT 13
45626: PUSH
45627: LD_INT 14
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: ST_TO_ADDR
45636: GO 46145
45638: LD_INT 25
45640: DOUBLE
45641: EQUAL
45642: IFTRUE 45646
45644: GO 45664
45646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45647: LD_ADDR_VAR 0 3
45651: PUSH
45652: LD_INT 13
45654: PUSH
45655: LD_INT 14
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: ST_TO_ADDR
45662: GO 46145
45664: LD_INT 27
45666: DOUBLE
45667: EQUAL
45668: IFTRUE 45672
45670: GO 45690
45672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45673: LD_ADDR_VAR 0 3
45677: PUSH
45678: LD_INT 13
45680: PUSH
45681: LD_INT 14
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: ST_TO_ADDR
45688: GO 46145
45690: LD_INT 92
45692: DOUBLE
45693: EQUAL
45694: IFTRUE 45698
45696: GO 45724
45698: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45699: LD_ADDR_VAR 0 3
45703: PUSH
45704: LD_INT 11
45706: PUSH
45707: LD_INT 12
45709: PUSH
45710: LD_INT 13
45712: PUSH
45713: LD_INT 14
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: ST_TO_ADDR
45722: GO 46145
45724: LD_INT 28
45726: DOUBLE
45727: EQUAL
45728: IFTRUE 45732
45730: GO 45750
45732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45733: LD_ADDR_VAR 0 3
45737: PUSH
45738: LD_INT 13
45740: PUSH
45741: LD_INT 14
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: ST_TO_ADDR
45748: GO 46145
45750: LD_INT 29
45752: DOUBLE
45753: EQUAL
45754: IFTRUE 45758
45756: GO 45776
45758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45759: LD_ADDR_VAR 0 3
45763: PUSH
45764: LD_INT 13
45766: PUSH
45767: LD_INT 14
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: ST_TO_ADDR
45774: GO 46145
45776: LD_INT 31
45778: DOUBLE
45779: EQUAL
45780: IFTRUE 45784
45782: GO 45802
45784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45785: LD_ADDR_VAR 0 3
45789: PUSH
45790: LD_INT 13
45792: PUSH
45793: LD_INT 14
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: ST_TO_ADDR
45800: GO 46145
45802: LD_INT 26
45804: DOUBLE
45805: EQUAL
45806: IFTRUE 45810
45808: GO 45828
45810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45811: LD_ADDR_VAR 0 3
45815: PUSH
45816: LD_INT 13
45818: PUSH
45819: LD_INT 14
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: ST_TO_ADDR
45826: GO 46145
45828: LD_INT 42
45830: DOUBLE
45831: EQUAL
45832: IFTRUE 45836
45834: GO 45862
45836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45837: LD_ADDR_VAR 0 3
45841: PUSH
45842: LD_INT 21
45844: PUSH
45845: LD_INT 22
45847: PUSH
45848: LD_INT 23
45850: PUSH
45851: LD_INT 24
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: ST_TO_ADDR
45860: GO 46145
45862: LD_INT 43
45864: DOUBLE
45865: EQUAL
45866: IFTRUE 45870
45868: GO 45896
45870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45871: LD_ADDR_VAR 0 3
45875: PUSH
45876: LD_INT 21
45878: PUSH
45879: LD_INT 22
45881: PUSH
45882: LD_INT 23
45884: PUSH
45885: LD_INT 24
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: ST_TO_ADDR
45894: GO 46145
45896: LD_INT 44
45898: DOUBLE
45899: EQUAL
45900: IFTRUE 45904
45902: GO 45930
45904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45905: LD_ADDR_VAR 0 3
45909: PUSH
45910: LD_INT 21
45912: PUSH
45913: LD_INT 22
45915: PUSH
45916: LD_INT 23
45918: PUSH
45919: LD_INT 24
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: ST_TO_ADDR
45928: GO 46145
45930: LD_INT 45
45932: DOUBLE
45933: EQUAL
45934: IFTRUE 45938
45936: GO 45964
45938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45939: LD_ADDR_VAR 0 3
45943: PUSH
45944: LD_INT 21
45946: PUSH
45947: LD_INT 22
45949: PUSH
45950: LD_INT 23
45952: PUSH
45953: LD_INT 24
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: ST_TO_ADDR
45962: GO 46145
45964: LD_INT 49
45966: DOUBLE
45967: EQUAL
45968: IFTRUE 45972
45970: GO 45998
45972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45973: LD_ADDR_VAR 0 3
45977: PUSH
45978: LD_INT 21
45980: PUSH
45981: LD_INT 22
45983: PUSH
45984: LD_INT 23
45986: PUSH
45987: LD_INT 24
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: ST_TO_ADDR
45996: GO 46145
45998: LD_INT 51
46000: DOUBLE
46001: EQUAL
46002: IFTRUE 46006
46004: GO 46032
46006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46007: LD_ADDR_VAR 0 3
46011: PUSH
46012: LD_INT 21
46014: PUSH
46015: LD_INT 22
46017: PUSH
46018: LD_INT 23
46020: PUSH
46021: LD_INT 24
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
46030: GO 46145
46032: LD_INT 52
46034: DOUBLE
46035: EQUAL
46036: IFTRUE 46040
46038: GO 46066
46040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46041: LD_ADDR_VAR 0 3
46045: PUSH
46046: LD_INT 21
46048: PUSH
46049: LD_INT 22
46051: PUSH
46052: LD_INT 23
46054: PUSH
46055: LD_INT 24
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: ST_TO_ADDR
46064: GO 46145
46066: LD_INT 53
46068: DOUBLE
46069: EQUAL
46070: IFTRUE 46074
46072: GO 46092
46074: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46075: LD_ADDR_VAR 0 3
46079: PUSH
46080: LD_INT 23
46082: PUSH
46083: LD_INT 24
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: ST_TO_ADDR
46090: GO 46145
46092: LD_INT 46
46094: DOUBLE
46095: EQUAL
46096: IFTRUE 46100
46098: GO 46118
46100: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46101: LD_ADDR_VAR 0 3
46105: PUSH
46106: LD_INT 23
46108: PUSH
46109: LD_INT 24
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: ST_TO_ADDR
46116: GO 46145
46118: LD_INT 47
46120: DOUBLE
46121: EQUAL
46122: IFTRUE 46126
46124: GO 46144
46126: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46127: LD_ADDR_VAR 0 3
46131: PUSH
46132: LD_INT 23
46134: PUSH
46135: LD_INT 24
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: ST_TO_ADDR
46142: GO 46145
46144: POP
// result := ( chassis in result ) ;
46145: LD_ADDR_VAR 0 3
46149: PUSH
46150: LD_VAR 0 1
46154: PUSH
46155: LD_VAR 0 3
46159: IN
46160: ST_TO_ADDR
// end ;
46161: LD_VAR 0 3
46165: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46166: LD_INT 0
46168: PPUSH
46169: PPUSH
46170: PPUSH
46171: PPUSH
46172: PPUSH
46173: PPUSH
46174: PPUSH
// result := array ;
46175: LD_ADDR_VAR 0 5
46179: PUSH
46180: LD_VAR 0 1
46184: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46185: LD_VAR 0 1
46189: NOT
46190: PUSH
46191: LD_VAR 0 2
46195: NOT
46196: OR
46197: PUSH
46198: LD_VAR 0 3
46202: NOT
46203: OR
46204: PUSH
46205: LD_VAR 0 2
46209: PUSH
46210: LD_VAR 0 1
46214: GREATER
46215: OR
46216: PUSH
46217: LD_VAR 0 3
46221: PUSH
46222: LD_VAR 0 1
46226: GREATER
46227: OR
46228: IFFALSE 46232
// exit ;
46230: GO 46528
// if direction then
46232: LD_VAR 0 4
46236: IFFALSE 46300
// begin d := 1 ;
46238: LD_ADDR_VAR 0 9
46242: PUSH
46243: LD_INT 1
46245: ST_TO_ADDR
// if i_from > i_to then
46246: LD_VAR 0 2
46250: PUSH
46251: LD_VAR 0 3
46255: GREATER
46256: IFFALSE 46282
// length := ( array - i_from ) + i_to else
46258: LD_ADDR_VAR 0 11
46262: PUSH
46263: LD_VAR 0 1
46267: PUSH
46268: LD_VAR 0 2
46272: MINUS
46273: PUSH
46274: LD_VAR 0 3
46278: PLUS
46279: ST_TO_ADDR
46280: GO 46298
// length := i_to - i_from ;
46282: LD_ADDR_VAR 0 11
46286: PUSH
46287: LD_VAR 0 3
46291: PUSH
46292: LD_VAR 0 2
46296: MINUS
46297: ST_TO_ADDR
// end else
46298: GO 46361
// begin d := - 1 ;
46300: LD_ADDR_VAR 0 9
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: ST_TO_ADDR
// if i_from > i_to then
46309: LD_VAR 0 2
46313: PUSH
46314: LD_VAR 0 3
46318: GREATER
46319: IFFALSE 46339
// length := i_from - i_to else
46321: LD_ADDR_VAR 0 11
46325: PUSH
46326: LD_VAR 0 2
46330: PUSH
46331: LD_VAR 0 3
46335: MINUS
46336: ST_TO_ADDR
46337: GO 46361
// length := ( array - i_to ) + i_from ;
46339: LD_ADDR_VAR 0 11
46343: PUSH
46344: LD_VAR 0 1
46348: PUSH
46349: LD_VAR 0 3
46353: MINUS
46354: PUSH
46355: LD_VAR 0 2
46359: PLUS
46360: ST_TO_ADDR
// end ; if not length then
46361: LD_VAR 0 11
46365: NOT
46366: IFFALSE 46370
// exit ;
46368: GO 46528
// tmp := array ;
46370: LD_ADDR_VAR 0 10
46374: PUSH
46375: LD_VAR 0 1
46379: ST_TO_ADDR
// for i = 1 to length do
46380: LD_ADDR_VAR 0 6
46384: PUSH
46385: DOUBLE
46386: LD_INT 1
46388: DEC
46389: ST_TO_ADDR
46390: LD_VAR 0 11
46394: PUSH
46395: FOR_TO
46396: IFFALSE 46516
// begin for j = 1 to array do
46398: LD_ADDR_VAR 0 7
46402: PUSH
46403: DOUBLE
46404: LD_INT 1
46406: DEC
46407: ST_TO_ADDR
46408: LD_VAR 0 1
46412: PUSH
46413: FOR_TO
46414: IFFALSE 46502
// begin k := j + d ;
46416: LD_ADDR_VAR 0 8
46420: PUSH
46421: LD_VAR 0 7
46425: PUSH
46426: LD_VAR 0 9
46430: PLUS
46431: ST_TO_ADDR
// if k > array then
46432: LD_VAR 0 8
46436: PUSH
46437: LD_VAR 0 1
46441: GREATER
46442: IFFALSE 46452
// k := 1 ;
46444: LD_ADDR_VAR 0 8
46448: PUSH
46449: LD_INT 1
46451: ST_TO_ADDR
// if not k then
46452: LD_VAR 0 8
46456: NOT
46457: IFFALSE 46469
// k := array ;
46459: LD_ADDR_VAR 0 8
46463: PUSH
46464: LD_VAR 0 1
46468: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46469: LD_ADDR_VAR 0 10
46473: PUSH
46474: LD_VAR 0 10
46478: PPUSH
46479: LD_VAR 0 8
46483: PPUSH
46484: LD_VAR 0 1
46488: PUSH
46489: LD_VAR 0 7
46493: ARRAY
46494: PPUSH
46495: CALL_OW 1
46499: ST_TO_ADDR
// end ;
46500: GO 46413
46502: POP
46503: POP
// array := tmp ;
46504: LD_ADDR_VAR 0 1
46508: PUSH
46509: LD_VAR 0 10
46513: ST_TO_ADDR
// end ;
46514: GO 46395
46516: POP
46517: POP
// result := array ;
46518: LD_ADDR_VAR 0 5
46522: PUSH
46523: LD_VAR 0 1
46527: ST_TO_ADDR
// end ;
46528: LD_VAR 0 5
46532: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46533: LD_INT 0
46535: PPUSH
46536: PPUSH
// result := 0 ;
46537: LD_ADDR_VAR 0 3
46541: PUSH
46542: LD_INT 0
46544: ST_TO_ADDR
// if not array or not value in array then
46545: LD_VAR 0 1
46549: NOT
46550: PUSH
46551: LD_VAR 0 2
46555: PUSH
46556: LD_VAR 0 1
46560: IN
46561: NOT
46562: OR
46563: IFFALSE 46567
// exit ;
46565: GO 46621
// for i = 1 to array do
46567: LD_ADDR_VAR 0 4
46571: PUSH
46572: DOUBLE
46573: LD_INT 1
46575: DEC
46576: ST_TO_ADDR
46577: LD_VAR 0 1
46581: PUSH
46582: FOR_TO
46583: IFFALSE 46619
// if value = array [ i ] then
46585: LD_VAR 0 2
46589: PUSH
46590: LD_VAR 0 1
46594: PUSH
46595: LD_VAR 0 4
46599: ARRAY
46600: EQUAL
46601: IFFALSE 46617
// begin result := i ;
46603: LD_ADDR_VAR 0 3
46607: PUSH
46608: LD_VAR 0 4
46612: ST_TO_ADDR
// exit ;
46613: POP
46614: POP
46615: GO 46621
// end ;
46617: GO 46582
46619: POP
46620: POP
// end ;
46621: LD_VAR 0 3
46625: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46626: LD_INT 0
46628: PPUSH
// vc_chassis := chassis ;
46629: LD_ADDR_OWVAR 37
46633: PUSH
46634: LD_VAR 0 1
46638: ST_TO_ADDR
// vc_engine := engine ;
46639: LD_ADDR_OWVAR 39
46643: PUSH
46644: LD_VAR 0 2
46648: ST_TO_ADDR
// vc_control := control ;
46649: LD_ADDR_OWVAR 38
46653: PUSH
46654: LD_VAR 0 3
46658: ST_TO_ADDR
// vc_weapon := weapon ;
46659: LD_ADDR_OWVAR 40
46663: PUSH
46664: LD_VAR 0 4
46668: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46669: LD_ADDR_OWVAR 41
46673: PUSH
46674: LD_VAR 0 5
46678: ST_TO_ADDR
// end ;
46679: LD_VAR 0 6
46683: RET
// export function WantPlant ( unit ) ; var task ; begin
46684: LD_INT 0
46686: PPUSH
46687: PPUSH
// result := false ;
46688: LD_ADDR_VAR 0 2
46692: PUSH
46693: LD_INT 0
46695: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46696: LD_ADDR_VAR 0 3
46700: PUSH
46701: LD_VAR 0 1
46705: PPUSH
46706: CALL_OW 437
46710: ST_TO_ADDR
// if task then
46711: LD_VAR 0 3
46715: IFFALSE 46743
// if task [ 1 ] [ 1 ] = p then
46717: LD_VAR 0 3
46721: PUSH
46722: LD_INT 1
46724: ARRAY
46725: PUSH
46726: LD_INT 1
46728: ARRAY
46729: PUSH
46730: LD_STRING p
46732: EQUAL
46733: IFFALSE 46743
// result := true ;
46735: LD_ADDR_VAR 0 2
46739: PUSH
46740: LD_INT 1
46742: ST_TO_ADDR
// end ;
46743: LD_VAR 0 2
46747: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46748: LD_INT 0
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
// if pos < 1 then
46754: LD_VAR 0 2
46758: PUSH
46759: LD_INT 1
46761: LESS
46762: IFFALSE 46766
// exit ;
46764: GO 47069
// if pos = 1 then
46766: LD_VAR 0 2
46770: PUSH
46771: LD_INT 1
46773: EQUAL
46774: IFFALSE 46807
// result := Replace ( arr , pos [ 1 ] , value ) else
46776: LD_ADDR_VAR 0 4
46780: PUSH
46781: LD_VAR 0 1
46785: PPUSH
46786: LD_VAR 0 2
46790: PUSH
46791: LD_INT 1
46793: ARRAY
46794: PPUSH
46795: LD_VAR 0 3
46799: PPUSH
46800: CALL_OW 1
46804: ST_TO_ADDR
46805: GO 47069
// begin tmp := arr ;
46807: LD_ADDR_VAR 0 6
46811: PUSH
46812: LD_VAR 0 1
46816: ST_TO_ADDR
// s_arr := [ tmp ] ;
46817: LD_ADDR_VAR 0 7
46821: PUSH
46822: LD_VAR 0 6
46826: PUSH
46827: EMPTY
46828: LIST
46829: ST_TO_ADDR
// for i = 1 to pos - 1 do
46830: LD_ADDR_VAR 0 5
46834: PUSH
46835: DOUBLE
46836: LD_INT 1
46838: DEC
46839: ST_TO_ADDR
46840: LD_VAR 0 2
46844: PUSH
46845: LD_INT 1
46847: MINUS
46848: PUSH
46849: FOR_TO
46850: IFFALSE 46895
// begin tmp := tmp [ pos [ i ] ] ;
46852: LD_ADDR_VAR 0 6
46856: PUSH
46857: LD_VAR 0 6
46861: PUSH
46862: LD_VAR 0 2
46866: PUSH
46867: LD_VAR 0 5
46871: ARRAY
46872: ARRAY
46873: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46874: LD_ADDR_VAR 0 7
46878: PUSH
46879: LD_VAR 0 7
46883: PUSH
46884: LD_VAR 0 6
46888: PUSH
46889: EMPTY
46890: LIST
46891: ADD
46892: ST_TO_ADDR
// end ;
46893: GO 46849
46895: POP
46896: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46897: LD_ADDR_VAR 0 6
46901: PUSH
46902: LD_VAR 0 6
46906: PPUSH
46907: LD_VAR 0 2
46911: PUSH
46912: LD_VAR 0 2
46916: ARRAY
46917: PPUSH
46918: LD_VAR 0 3
46922: PPUSH
46923: CALL_OW 1
46927: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46928: LD_ADDR_VAR 0 7
46932: PUSH
46933: LD_VAR 0 7
46937: PPUSH
46938: LD_VAR 0 7
46942: PPUSH
46943: LD_VAR 0 6
46947: PPUSH
46948: CALL_OW 1
46952: ST_TO_ADDR
// for i = s_arr downto 2 do
46953: LD_ADDR_VAR 0 5
46957: PUSH
46958: DOUBLE
46959: LD_VAR 0 7
46963: INC
46964: ST_TO_ADDR
46965: LD_INT 2
46967: PUSH
46968: FOR_DOWNTO
46969: IFFALSE 47053
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46971: LD_ADDR_VAR 0 6
46975: PUSH
46976: LD_VAR 0 7
46980: PUSH
46981: LD_VAR 0 5
46985: PUSH
46986: LD_INT 1
46988: MINUS
46989: ARRAY
46990: PPUSH
46991: LD_VAR 0 2
46995: PUSH
46996: LD_VAR 0 5
47000: PUSH
47001: LD_INT 1
47003: MINUS
47004: ARRAY
47005: PPUSH
47006: LD_VAR 0 7
47010: PUSH
47011: LD_VAR 0 5
47015: ARRAY
47016: PPUSH
47017: CALL_OW 1
47021: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47022: LD_ADDR_VAR 0 7
47026: PUSH
47027: LD_VAR 0 7
47031: PPUSH
47032: LD_VAR 0 5
47036: PUSH
47037: LD_INT 1
47039: MINUS
47040: PPUSH
47041: LD_VAR 0 6
47045: PPUSH
47046: CALL_OW 1
47050: ST_TO_ADDR
// end ;
47051: GO 46968
47053: POP
47054: POP
// result := s_arr [ 1 ] ;
47055: LD_ADDR_VAR 0 4
47059: PUSH
47060: LD_VAR 0 7
47064: PUSH
47065: LD_INT 1
47067: ARRAY
47068: ST_TO_ADDR
// end ; end ;
47069: LD_VAR 0 4
47073: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47074: LD_INT 0
47076: PPUSH
47077: PPUSH
// if not list then
47078: LD_VAR 0 1
47082: NOT
47083: IFFALSE 47087
// exit ;
47085: GO 47178
// i := list [ pos1 ] ;
47087: LD_ADDR_VAR 0 5
47091: PUSH
47092: LD_VAR 0 1
47096: PUSH
47097: LD_VAR 0 2
47101: ARRAY
47102: ST_TO_ADDR
// if not i then
47103: LD_VAR 0 5
47107: NOT
47108: IFFALSE 47112
// exit ;
47110: GO 47178
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47112: LD_ADDR_VAR 0 1
47116: PUSH
47117: LD_VAR 0 1
47121: PPUSH
47122: LD_VAR 0 2
47126: PPUSH
47127: LD_VAR 0 1
47131: PUSH
47132: LD_VAR 0 3
47136: ARRAY
47137: PPUSH
47138: CALL_OW 1
47142: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47143: LD_ADDR_VAR 0 1
47147: PUSH
47148: LD_VAR 0 1
47152: PPUSH
47153: LD_VAR 0 3
47157: PPUSH
47158: LD_VAR 0 5
47162: PPUSH
47163: CALL_OW 1
47167: ST_TO_ADDR
// result := list ;
47168: LD_ADDR_VAR 0 4
47172: PUSH
47173: LD_VAR 0 1
47177: ST_TO_ADDR
// end ;
47178: LD_VAR 0 4
47182: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47183: LD_INT 0
47185: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47186: LD_ADDR_VAR 0 5
47190: PUSH
47191: LD_VAR 0 1
47195: PPUSH
47196: CALL_OW 250
47200: PPUSH
47201: LD_VAR 0 1
47205: PPUSH
47206: CALL_OW 251
47210: PPUSH
47211: LD_VAR 0 2
47215: PPUSH
47216: LD_VAR 0 3
47220: PPUSH
47221: LD_VAR 0 4
47225: PPUSH
47226: CALL 47604 0 5
47230: ST_TO_ADDR
// end ;
47231: LD_VAR 0 5
47235: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47236: LD_INT 0
47238: PPUSH
47239: PPUSH
47240: PPUSH
47241: PPUSH
// if not list or not unit then
47242: LD_VAR 0 2
47246: NOT
47247: PUSH
47248: LD_VAR 0 1
47252: NOT
47253: OR
47254: IFFALSE 47258
// exit ;
47256: GO 47599
// result := [ ] ;
47258: LD_ADDR_VAR 0 5
47262: PUSH
47263: EMPTY
47264: ST_TO_ADDR
// for i in list do
47265: LD_ADDR_VAR 0 6
47269: PUSH
47270: LD_VAR 0 2
47274: PUSH
47275: FOR_IN
47276: IFFALSE 47494
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47278: LD_ADDR_VAR 0 8
47282: PUSH
47283: LD_VAR 0 1
47287: PPUSH
47288: LD_VAR 0 6
47292: PUSH
47293: LD_INT 1
47295: ARRAY
47296: PPUSH
47297: LD_VAR 0 6
47301: PUSH
47302: LD_INT 2
47304: ARRAY
47305: PPUSH
47306: CALL_OW 297
47310: ST_TO_ADDR
// if not Count ( result ) then
47311: LD_VAR 0 5
47315: PPUSH
47316: CALL 43888 0 1
47320: NOT
47321: IFFALSE 47354
// begin result := Join ( result , [ i , tmp ] ) ;
47323: LD_ADDR_VAR 0 5
47327: PUSH
47328: LD_VAR 0 5
47332: PPUSH
47333: LD_VAR 0 6
47337: PUSH
47338: LD_VAR 0 8
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PPUSH
47347: CALL 79497 0 2
47351: ST_TO_ADDR
// continue ;
47352: GO 47275
// end ; if result [ result ] [ 2 ] <= tmp then
47354: LD_VAR 0 5
47358: PUSH
47359: LD_VAR 0 5
47363: ARRAY
47364: PUSH
47365: LD_INT 2
47367: ARRAY
47368: PUSH
47369: LD_VAR 0 8
47373: LESSEQUAL
47374: IFFALSE 47407
// result := Join ( result , [ i , tmp ] ) else
47376: LD_ADDR_VAR 0 5
47380: PUSH
47381: LD_VAR 0 5
47385: PPUSH
47386: LD_VAR 0 6
47390: PUSH
47391: LD_VAR 0 8
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PPUSH
47400: CALL 79497 0 2
47404: ST_TO_ADDR
47405: GO 47492
// begin for j := 1 to Count ( result ) do
47407: LD_ADDR_VAR 0 7
47411: PUSH
47412: DOUBLE
47413: LD_INT 1
47415: DEC
47416: ST_TO_ADDR
47417: LD_VAR 0 5
47421: PPUSH
47422: CALL 43888 0 1
47426: PUSH
47427: FOR_TO
47428: IFFALSE 47490
// begin if tmp < result [ j ] [ 2 ] then
47430: LD_VAR 0 8
47434: PUSH
47435: LD_VAR 0 5
47439: PUSH
47440: LD_VAR 0 7
47444: ARRAY
47445: PUSH
47446: LD_INT 2
47448: ARRAY
47449: LESS
47450: IFFALSE 47488
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47452: LD_ADDR_VAR 0 5
47456: PUSH
47457: LD_VAR 0 5
47461: PPUSH
47462: LD_VAR 0 7
47466: PPUSH
47467: LD_VAR 0 6
47471: PUSH
47472: LD_VAR 0 8
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PPUSH
47481: CALL_OW 2
47485: ST_TO_ADDR
// break ;
47486: GO 47490
// end ; end ;
47488: GO 47427
47490: POP
47491: POP
// end ; end ;
47492: GO 47275
47494: POP
47495: POP
// if result and not asc then
47496: LD_VAR 0 5
47500: PUSH
47501: LD_VAR 0 3
47505: NOT
47506: AND
47507: IFFALSE 47524
// result := ReverseArray ( result ) ;
47509: LD_ADDR_VAR 0 5
47513: PUSH
47514: LD_VAR 0 5
47518: PPUSH
47519: CALL 74764 0 1
47523: ST_TO_ADDR
// tmp := [ ] ;
47524: LD_ADDR_VAR 0 8
47528: PUSH
47529: EMPTY
47530: ST_TO_ADDR
// if mode then
47531: LD_VAR 0 4
47535: IFFALSE 47599
// begin for i := 1 to result do
47537: LD_ADDR_VAR 0 6
47541: PUSH
47542: DOUBLE
47543: LD_INT 1
47545: DEC
47546: ST_TO_ADDR
47547: LD_VAR 0 5
47551: PUSH
47552: FOR_TO
47553: IFFALSE 47587
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47555: LD_ADDR_VAR 0 8
47559: PUSH
47560: LD_VAR 0 8
47564: PPUSH
47565: LD_VAR 0 5
47569: PUSH
47570: LD_VAR 0 6
47574: ARRAY
47575: PUSH
47576: LD_INT 1
47578: ARRAY
47579: PPUSH
47580: CALL 79497 0 2
47584: ST_TO_ADDR
47585: GO 47552
47587: POP
47588: POP
// result := tmp ;
47589: LD_ADDR_VAR 0 5
47593: PUSH
47594: LD_VAR 0 8
47598: ST_TO_ADDR
// end ; end ;
47599: LD_VAR 0 5
47603: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47604: LD_INT 0
47606: PPUSH
47607: PPUSH
47608: PPUSH
47609: PPUSH
// if not list then
47610: LD_VAR 0 3
47614: NOT
47615: IFFALSE 47619
// exit ;
47617: GO 48007
// result := [ ] ;
47619: LD_ADDR_VAR 0 6
47623: PUSH
47624: EMPTY
47625: ST_TO_ADDR
// for i in list do
47626: LD_ADDR_VAR 0 7
47630: PUSH
47631: LD_VAR 0 3
47635: PUSH
47636: FOR_IN
47637: IFFALSE 47839
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47639: LD_ADDR_VAR 0 9
47643: PUSH
47644: LD_VAR 0 7
47648: PPUSH
47649: LD_VAR 0 1
47653: PPUSH
47654: LD_VAR 0 2
47658: PPUSH
47659: CALL_OW 297
47663: ST_TO_ADDR
// if not result then
47664: LD_VAR 0 6
47668: NOT
47669: IFFALSE 47695
// result := [ [ i , tmp ] ] else
47671: LD_ADDR_VAR 0 6
47675: PUSH
47676: LD_VAR 0 7
47680: PUSH
47681: LD_VAR 0 9
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: EMPTY
47691: LIST
47692: ST_TO_ADDR
47693: GO 47837
// begin if result [ result ] [ 2 ] <= tmp then
47695: LD_VAR 0 6
47699: PUSH
47700: LD_VAR 0 6
47704: ARRAY
47705: PUSH
47706: LD_INT 2
47708: ARRAY
47709: PUSH
47710: LD_VAR 0 9
47714: LESSEQUAL
47715: IFFALSE 47757
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47717: LD_ADDR_VAR 0 6
47721: PUSH
47722: LD_VAR 0 6
47726: PPUSH
47727: LD_VAR 0 6
47731: PUSH
47732: LD_INT 1
47734: PLUS
47735: PPUSH
47736: LD_VAR 0 7
47740: PUSH
47741: LD_VAR 0 9
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PPUSH
47750: CALL_OW 2
47754: ST_TO_ADDR
47755: GO 47837
// for j := 1 to result do
47757: LD_ADDR_VAR 0 8
47761: PUSH
47762: DOUBLE
47763: LD_INT 1
47765: DEC
47766: ST_TO_ADDR
47767: LD_VAR 0 6
47771: PUSH
47772: FOR_TO
47773: IFFALSE 47835
// begin if tmp < result [ j ] [ 2 ] then
47775: LD_VAR 0 9
47779: PUSH
47780: LD_VAR 0 6
47784: PUSH
47785: LD_VAR 0 8
47789: ARRAY
47790: PUSH
47791: LD_INT 2
47793: ARRAY
47794: LESS
47795: IFFALSE 47833
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47797: LD_ADDR_VAR 0 6
47801: PUSH
47802: LD_VAR 0 6
47806: PPUSH
47807: LD_VAR 0 8
47811: PPUSH
47812: LD_VAR 0 7
47816: PUSH
47817: LD_VAR 0 9
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PPUSH
47826: CALL_OW 2
47830: ST_TO_ADDR
// break ;
47831: GO 47835
// end ; end ;
47833: GO 47772
47835: POP
47836: POP
// end ; end ;
47837: GO 47636
47839: POP
47840: POP
// if result and not asc then
47841: LD_VAR 0 6
47845: PUSH
47846: LD_VAR 0 4
47850: NOT
47851: AND
47852: IFFALSE 47927
// begin tmp := result ;
47854: LD_ADDR_VAR 0 9
47858: PUSH
47859: LD_VAR 0 6
47863: ST_TO_ADDR
// for i = tmp downto 1 do
47864: LD_ADDR_VAR 0 7
47868: PUSH
47869: DOUBLE
47870: LD_VAR 0 9
47874: INC
47875: ST_TO_ADDR
47876: LD_INT 1
47878: PUSH
47879: FOR_DOWNTO
47880: IFFALSE 47925
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47882: LD_ADDR_VAR 0 6
47886: PUSH
47887: LD_VAR 0 6
47891: PPUSH
47892: LD_VAR 0 9
47896: PUSH
47897: LD_VAR 0 7
47901: MINUS
47902: PUSH
47903: LD_INT 1
47905: PLUS
47906: PPUSH
47907: LD_VAR 0 9
47911: PUSH
47912: LD_VAR 0 7
47916: ARRAY
47917: PPUSH
47918: CALL_OW 1
47922: ST_TO_ADDR
47923: GO 47879
47925: POP
47926: POP
// end ; tmp := [ ] ;
47927: LD_ADDR_VAR 0 9
47931: PUSH
47932: EMPTY
47933: ST_TO_ADDR
// if mode then
47934: LD_VAR 0 5
47938: IFFALSE 48007
// begin for i = 1 to result do
47940: LD_ADDR_VAR 0 7
47944: PUSH
47945: DOUBLE
47946: LD_INT 1
47948: DEC
47949: ST_TO_ADDR
47950: LD_VAR 0 6
47954: PUSH
47955: FOR_TO
47956: IFFALSE 47995
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47958: LD_ADDR_VAR 0 9
47962: PUSH
47963: LD_VAR 0 9
47967: PPUSH
47968: LD_VAR 0 7
47972: PPUSH
47973: LD_VAR 0 6
47977: PUSH
47978: LD_VAR 0 7
47982: ARRAY
47983: PUSH
47984: LD_INT 1
47986: ARRAY
47987: PPUSH
47988: CALL_OW 1
47992: ST_TO_ADDR
47993: GO 47955
47995: POP
47996: POP
// result := tmp ;
47997: LD_ADDR_VAR 0 6
48001: PUSH
48002: LD_VAR 0 9
48006: ST_TO_ADDR
// end ; end ;
48007: LD_VAR 0 6
48011: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48012: LD_INT 0
48014: PPUSH
48015: PPUSH
48016: PPUSH
48017: PPUSH
48018: PPUSH
48019: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48020: LD_ADDR_VAR 0 5
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: ST_TO_ADDR
// if not x or not y then
48042: LD_VAR 0 2
48046: NOT
48047: PUSH
48048: LD_VAR 0 3
48052: NOT
48053: OR
48054: IFFALSE 48058
// exit ;
48056: GO 49708
// if not range then
48058: LD_VAR 0 4
48062: NOT
48063: IFFALSE 48073
// range := 10 ;
48065: LD_ADDR_VAR 0 4
48069: PUSH
48070: LD_INT 10
48072: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48073: LD_ADDR_VAR 0 8
48077: PUSH
48078: LD_INT 81
48080: PUSH
48081: LD_VAR 0 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 92
48092: PUSH
48093: LD_VAR 0 2
48097: PUSH
48098: LD_VAR 0 3
48102: PUSH
48103: LD_VAR 0 4
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 3
48116: PUSH
48117: LD_INT 21
48119: PUSH
48120: LD_INT 3
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: PPUSH
48136: CALL_OW 69
48140: ST_TO_ADDR
// if not tmp then
48141: LD_VAR 0 8
48145: NOT
48146: IFFALSE 48150
// exit ;
48148: GO 49708
// for i in tmp do
48150: LD_ADDR_VAR 0 6
48154: PUSH
48155: LD_VAR 0 8
48159: PUSH
48160: FOR_IN
48161: IFFALSE 49683
// begin points := [ 0 , 0 , 0 ] ;
48163: LD_ADDR_VAR 0 9
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: ST_TO_ADDR
// bpoints := 1 ;
48182: LD_ADDR_VAR 0 10
48186: PUSH
48187: LD_INT 1
48189: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48190: LD_VAR 0 6
48194: PPUSH
48195: CALL_OW 247
48199: PUSH
48200: LD_INT 1
48202: DOUBLE
48203: EQUAL
48204: IFTRUE 48208
48206: GO 48786
48208: POP
// begin if GetClass ( i ) = 1 then
48209: LD_VAR 0 6
48213: PPUSH
48214: CALL_OW 257
48218: PUSH
48219: LD_INT 1
48221: EQUAL
48222: IFFALSE 48243
// points := [ 10 , 5 , 3 ] ;
48224: LD_ADDR_VAR 0 9
48228: PUSH
48229: LD_INT 10
48231: PUSH
48232: LD_INT 5
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48243: LD_VAR 0 6
48247: PPUSH
48248: CALL_OW 257
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 3
48258: PUSH
48259: LD_INT 4
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: LIST
48266: IN
48267: IFFALSE 48288
// points := [ 3 , 2 , 1 ] ;
48269: LD_ADDR_VAR 0 9
48273: PUSH
48274: LD_INT 3
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: LIST
48287: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48288: LD_VAR 0 6
48292: PPUSH
48293: CALL_OW 257
48297: PUSH
48298: LD_INT 5
48300: EQUAL
48301: IFFALSE 48322
// points := [ 130 , 5 , 2 ] ;
48303: LD_ADDR_VAR 0 9
48307: PUSH
48308: LD_INT 130
48310: PUSH
48311: LD_INT 5
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48322: LD_VAR 0 6
48326: PPUSH
48327: CALL_OW 257
48331: PUSH
48332: LD_INT 8
48334: EQUAL
48335: IFFALSE 48356
// points := [ 35 , 35 , 30 ] ;
48337: LD_ADDR_VAR 0 9
48341: PUSH
48342: LD_INT 35
48344: PUSH
48345: LD_INT 35
48347: PUSH
48348: LD_INT 30
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48356: LD_VAR 0 6
48360: PPUSH
48361: CALL_OW 257
48365: PUSH
48366: LD_INT 9
48368: EQUAL
48369: IFFALSE 48390
// points := [ 20 , 55 , 40 ] ;
48371: LD_ADDR_VAR 0 9
48375: PUSH
48376: LD_INT 20
48378: PUSH
48379: LD_INT 55
48381: PUSH
48382: LD_INT 40
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48390: LD_VAR 0 6
48394: PPUSH
48395: CALL_OW 257
48399: PUSH
48400: LD_INT 12
48402: PUSH
48403: LD_INT 16
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: IN
48410: IFFALSE 48431
// points := [ 5 , 3 , 2 ] ;
48412: LD_ADDR_VAR 0 9
48416: PUSH
48417: LD_INT 5
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: LIST
48430: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48431: LD_VAR 0 6
48435: PPUSH
48436: CALL_OW 257
48440: PUSH
48441: LD_INT 17
48443: EQUAL
48444: IFFALSE 48465
// points := [ 100 , 50 , 75 ] ;
48446: LD_ADDR_VAR 0 9
48450: PUSH
48451: LD_INT 100
48453: PUSH
48454: LD_INT 50
48456: PUSH
48457: LD_INT 75
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48465: LD_VAR 0 6
48469: PPUSH
48470: CALL_OW 257
48474: PUSH
48475: LD_INT 15
48477: EQUAL
48478: IFFALSE 48499
// points := [ 10 , 5 , 3 ] ;
48480: LD_ADDR_VAR 0 9
48484: PUSH
48485: LD_INT 10
48487: PUSH
48488: LD_INT 5
48490: PUSH
48491: LD_INT 3
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: LIST
48498: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48499: LD_VAR 0 6
48503: PPUSH
48504: CALL_OW 257
48508: PUSH
48509: LD_INT 14
48511: EQUAL
48512: IFFALSE 48533
// points := [ 10 , 0 , 0 ] ;
48514: LD_ADDR_VAR 0 9
48518: PUSH
48519: LD_INT 10
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48533: LD_VAR 0 6
48537: PPUSH
48538: CALL_OW 257
48542: PUSH
48543: LD_INT 11
48545: EQUAL
48546: IFFALSE 48567
// points := [ 30 , 10 , 5 ] ;
48548: LD_ADDR_VAR 0 9
48552: PUSH
48553: LD_INT 30
48555: PUSH
48556: LD_INT 10
48558: PUSH
48559: LD_INT 5
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48567: LD_VAR 0 1
48571: PPUSH
48572: LD_INT 5
48574: PPUSH
48575: CALL_OW 321
48579: PUSH
48580: LD_INT 2
48582: EQUAL
48583: IFFALSE 48600
// bpoints := bpoints * 1.8 ;
48585: LD_ADDR_VAR 0 10
48589: PUSH
48590: LD_VAR 0 10
48594: PUSH
48595: LD_REAL  1.80000000000000E+0000
48598: MUL
48599: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48600: LD_VAR 0 6
48604: PPUSH
48605: CALL_OW 257
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: LD_INT 4
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: IN
48628: PUSH
48629: LD_VAR 0 1
48633: PPUSH
48634: LD_INT 51
48636: PPUSH
48637: CALL_OW 321
48641: PUSH
48642: LD_INT 2
48644: EQUAL
48645: AND
48646: IFFALSE 48663
// bpoints := bpoints * 1.2 ;
48648: LD_ADDR_VAR 0 10
48652: PUSH
48653: LD_VAR 0 10
48657: PUSH
48658: LD_REAL  1.20000000000000E+0000
48661: MUL
48662: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48663: LD_VAR 0 6
48667: PPUSH
48668: CALL_OW 257
48672: PUSH
48673: LD_INT 5
48675: PUSH
48676: LD_INT 7
48678: PUSH
48679: LD_INT 9
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: IN
48687: PUSH
48688: LD_VAR 0 1
48692: PPUSH
48693: LD_INT 52
48695: PPUSH
48696: CALL_OW 321
48700: PUSH
48701: LD_INT 2
48703: EQUAL
48704: AND
48705: IFFALSE 48722
// bpoints := bpoints * 1.5 ;
48707: LD_ADDR_VAR 0 10
48711: PUSH
48712: LD_VAR 0 10
48716: PUSH
48717: LD_REAL  1.50000000000000E+0000
48720: MUL
48721: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48722: LD_VAR 0 1
48726: PPUSH
48727: LD_INT 66
48729: PPUSH
48730: CALL_OW 321
48734: PUSH
48735: LD_INT 2
48737: EQUAL
48738: IFFALSE 48755
// bpoints := bpoints * 1.1 ;
48740: LD_ADDR_VAR 0 10
48744: PUSH
48745: LD_VAR 0 10
48749: PUSH
48750: LD_REAL  1.10000000000000E+0000
48753: MUL
48754: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48755: LD_ADDR_VAR 0 10
48759: PUSH
48760: LD_VAR 0 10
48764: PUSH
48765: LD_VAR 0 6
48769: PPUSH
48770: LD_INT 1
48772: PPUSH
48773: CALL_OW 259
48777: PUSH
48778: LD_REAL  1.15000000000000E+0000
48781: MUL
48782: MUL
48783: ST_TO_ADDR
// end ; unit_vehicle :
48784: GO 49612
48786: LD_INT 2
48788: DOUBLE
48789: EQUAL
48790: IFTRUE 48794
48792: GO 49600
48794: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48795: LD_VAR 0 6
48799: PPUSH
48800: CALL_OW 264
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 42
48810: PUSH
48811: LD_INT 24
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: LIST
48818: IN
48819: IFFALSE 48840
// points := [ 25 , 5 , 3 ] ;
48821: LD_ADDR_VAR 0 9
48825: PUSH
48826: LD_INT 25
48828: PUSH
48829: LD_INT 5
48831: PUSH
48832: LD_INT 3
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48840: LD_VAR 0 6
48844: PPUSH
48845: CALL_OW 264
48849: PUSH
48850: LD_INT 4
48852: PUSH
48853: LD_INT 43
48855: PUSH
48856: LD_INT 25
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: LIST
48863: IN
48864: IFFALSE 48885
// points := [ 40 , 15 , 5 ] ;
48866: LD_ADDR_VAR 0 9
48870: PUSH
48871: LD_INT 40
48873: PUSH
48874: LD_INT 15
48876: PUSH
48877: LD_INT 5
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: LIST
48884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48885: LD_VAR 0 6
48889: PPUSH
48890: CALL_OW 264
48894: PUSH
48895: LD_INT 3
48897: PUSH
48898: LD_INT 23
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: IN
48905: IFFALSE 48926
// points := [ 7 , 25 , 8 ] ;
48907: LD_ADDR_VAR 0 9
48911: PUSH
48912: LD_INT 7
48914: PUSH
48915: LD_INT 25
48917: PUSH
48918: LD_INT 8
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48926: LD_VAR 0 6
48930: PPUSH
48931: CALL_OW 264
48935: PUSH
48936: LD_INT 5
48938: PUSH
48939: LD_INT 27
48941: PUSH
48942: LD_INT 44
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: IN
48950: IFFALSE 48971
// points := [ 14 , 50 , 16 ] ;
48952: LD_ADDR_VAR 0 9
48956: PUSH
48957: LD_INT 14
48959: PUSH
48960: LD_INT 50
48962: PUSH
48963: LD_INT 16
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: LIST
48970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48971: LD_VAR 0 6
48975: PPUSH
48976: CALL_OW 264
48980: PUSH
48981: LD_INT 6
48983: PUSH
48984: LD_INT 46
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: IN
48991: IFFALSE 49012
// points := [ 32 , 120 , 70 ] ;
48993: LD_ADDR_VAR 0 9
48997: PUSH
48998: LD_INT 32
49000: PUSH
49001: LD_INT 120
49003: PUSH
49004: LD_INT 70
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49012: LD_VAR 0 6
49016: PPUSH
49017: CALL_OW 264
49021: PUSH
49022: LD_INT 7
49024: PUSH
49025: LD_INT 28
49027: PUSH
49028: LD_INT 45
49030: PUSH
49031: LD_INT 92
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: IN
49040: IFFALSE 49061
// points := [ 35 , 20 , 45 ] ;
49042: LD_ADDR_VAR 0 9
49046: PUSH
49047: LD_INT 35
49049: PUSH
49050: LD_INT 20
49052: PUSH
49053: LD_INT 45
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: LIST
49060: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49061: LD_VAR 0 6
49065: PPUSH
49066: CALL_OW 264
49070: PUSH
49071: LD_INT 47
49073: PUSH
49074: EMPTY
49075: LIST
49076: IN
49077: IFFALSE 49098
// points := [ 67 , 45 , 75 ] ;
49079: LD_ADDR_VAR 0 9
49083: PUSH
49084: LD_INT 67
49086: PUSH
49087: LD_INT 45
49089: PUSH
49090: LD_INT 75
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: LIST
49097: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49098: LD_VAR 0 6
49102: PPUSH
49103: CALL_OW 264
49107: PUSH
49108: LD_INT 26
49110: PUSH
49111: EMPTY
49112: LIST
49113: IN
49114: IFFALSE 49135
// points := [ 120 , 30 , 80 ] ;
49116: LD_ADDR_VAR 0 9
49120: PUSH
49121: LD_INT 120
49123: PUSH
49124: LD_INT 30
49126: PUSH
49127: LD_INT 80
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: LIST
49134: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49135: LD_VAR 0 6
49139: PPUSH
49140: CALL_OW 264
49144: PUSH
49145: LD_INT 22
49147: PUSH
49148: EMPTY
49149: LIST
49150: IN
49151: IFFALSE 49172
// points := [ 40 , 1 , 1 ] ;
49153: LD_ADDR_VAR 0 9
49157: PUSH
49158: LD_INT 40
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: LIST
49171: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49172: LD_VAR 0 6
49176: PPUSH
49177: CALL_OW 264
49181: PUSH
49182: LD_INT 29
49184: PUSH
49185: EMPTY
49186: LIST
49187: IN
49188: IFFALSE 49209
// points := [ 70 , 200 , 400 ] ;
49190: LD_ADDR_VAR 0 9
49194: PUSH
49195: LD_INT 70
49197: PUSH
49198: LD_INT 200
49200: PUSH
49201: LD_INT 400
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: LIST
49208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49209: LD_VAR 0 6
49213: PPUSH
49214: CALL_OW 264
49218: PUSH
49219: LD_INT 14
49221: PUSH
49222: LD_INT 53
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: IN
49229: IFFALSE 49250
// points := [ 40 , 10 , 20 ] ;
49231: LD_ADDR_VAR 0 9
49235: PUSH
49236: LD_INT 40
49238: PUSH
49239: LD_INT 10
49241: PUSH
49242: LD_INT 20
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: LIST
49249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49250: LD_VAR 0 6
49254: PPUSH
49255: CALL_OW 264
49259: PUSH
49260: LD_INT 9
49262: PUSH
49263: EMPTY
49264: LIST
49265: IN
49266: IFFALSE 49287
// points := [ 5 , 70 , 20 ] ;
49268: LD_ADDR_VAR 0 9
49272: PUSH
49273: LD_INT 5
49275: PUSH
49276: LD_INT 70
49278: PUSH
49279: LD_INT 20
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: LIST
49286: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49287: LD_VAR 0 6
49291: PPUSH
49292: CALL_OW 264
49296: PUSH
49297: LD_INT 10
49299: PUSH
49300: EMPTY
49301: LIST
49302: IN
49303: IFFALSE 49324
// points := [ 35 , 110 , 70 ] ;
49305: LD_ADDR_VAR 0 9
49309: PUSH
49310: LD_INT 35
49312: PUSH
49313: LD_INT 110
49315: PUSH
49316: LD_INT 70
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49324: LD_VAR 0 6
49328: PPUSH
49329: CALL_OW 265
49333: PUSH
49334: LD_INT 25
49336: EQUAL
49337: IFFALSE 49358
// points := [ 80 , 65 , 100 ] ;
49339: LD_ADDR_VAR 0 9
49343: PUSH
49344: LD_INT 80
49346: PUSH
49347: LD_INT 65
49349: PUSH
49350: LD_INT 100
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: LIST
49357: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49358: LD_VAR 0 6
49362: PPUSH
49363: CALL_OW 263
49367: PUSH
49368: LD_INT 1
49370: EQUAL
49371: IFFALSE 49406
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49373: LD_ADDR_VAR 0 10
49377: PUSH
49378: LD_VAR 0 10
49382: PUSH
49383: LD_VAR 0 6
49387: PPUSH
49388: CALL_OW 311
49392: PPUSH
49393: LD_INT 3
49395: PPUSH
49396: CALL_OW 259
49400: PUSH
49401: LD_INT 4
49403: MUL
49404: MUL
49405: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49406: LD_VAR 0 6
49410: PPUSH
49411: CALL_OW 263
49415: PUSH
49416: LD_INT 2
49418: EQUAL
49419: IFFALSE 49470
// begin j := IsControledBy ( i ) ;
49421: LD_ADDR_VAR 0 7
49425: PUSH
49426: LD_VAR 0 6
49430: PPUSH
49431: CALL_OW 312
49435: ST_TO_ADDR
// if j then
49436: LD_VAR 0 7
49440: IFFALSE 49470
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49442: LD_ADDR_VAR 0 10
49446: PUSH
49447: LD_VAR 0 10
49451: PUSH
49452: LD_VAR 0 7
49456: PPUSH
49457: LD_INT 3
49459: PPUSH
49460: CALL_OW 259
49464: PUSH
49465: LD_INT 3
49467: MUL
49468: MUL
49469: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49470: LD_VAR 0 6
49474: PPUSH
49475: CALL_OW 264
49479: PUSH
49480: LD_INT 5
49482: PUSH
49483: LD_INT 6
49485: PUSH
49486: LD_INT 46
49488: PUSH
49489: LD_INT 44
49491: PUSH
49492: LD_INT 47
49494: PUSH
49495: LD_INT 45
49497: PUSH
49498: LD_INT 28
49500: PUSH
49501: LD_INT 7
49503: PUSH
49504: LD_INT 27
49506: PUSH
49507: LD_INT 29
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: IN
49522: PUSH
49523: LD_VAR 0 1
49527: PPUSH
49528: LD_INT 52
49530: PPUSH
49531: CALL_OW 321
49535: PUSH
49536: LD_INT 2
49538: EQUAL
49539: AND
49540: IFFALSE 49557
// bpoints := bpoints * 1.2 ;
49542: LD_ADDR_VAR 0 10
49546: PUSH
49547: LD_VAR 0 10
49551: PUSH
49552: LD_REAL  1.20000000000000E+0000
49555: MUL
49556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49557: LD_VAR 0 6
49561: PPUSH
49562: CALL_OW 264
49566: PUSH
49567: LD_INT 6
49569: PUSH
49570: LD_INT 46
49572: PUSH
49573: LD_INT 47
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: IN
49581: IFFALSE 49598
// bpoints := bpoints * 1.2 ;
49583: LD_ADDR_VAR 0 10
49587: PUSH
49588: LD_VAR 0 10
49592: PUSH
49593: LD_REAL  1.20000000000000E+0000
49596: MUL
49597: ST_TO_ADDR
// end ; unit_building :
49598: GO 49612
49600: LD_INT 3
49602: DOUBLE
49603: EQUAL
49604: IFTRUE 49608
49606: GO 49611
49608: POP
// ; end ;
49609: GO 49612
49611: POP
// for j = 1 to 3 do
49612: LD_ADDR_VAR 0 7
49616: PUSH
49617: DOUBLE
49618: LD_INT 1
49620: DEC
49621: ST_TO_ADDR
49622: LD_INT 3
49624: PUSH
49625: FOR_TO
49626: IFFALSE 49679
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49628: LD_ADDR_VAR 0 5
49632: PUSH
49633: LD_VAR 0 5
49637: PPUSH
49638: LD_VAR 0 7
49642: PPUSH
49643: LD_VAR 0 5
49647: PUSH
49648: LD_VAR 0 7
49652: ARRAY
49653: PUSH
49654: LD_VAR 0 9
49658: PUSH
49659: LD_VAR 0 7
49663: ARRAY
49664: PUSH
49665: LD_VAR 0 10
49669: MUL
49670: PLUS
49671: PPUSH
49672: CALL_OW 1
49676: ST_TO_ADDR
49677: GO 49625
49679: POP
49680: POP
// end ;
49681: GO 48160
49683: POP
49684: POP
// result := Replace ( result , 4 , tmp ) ;
49685: LD_ADDR_VAR 0 5
49689: PUSH
49690: LD_VAR 0 5
49694: PPUSH
49695: LD_INT 4
49697: PPUSH
49698: LD_VAR 0 8
49702: PPUSH
49703: CALL_OW 1
49707: ST_TO_ADDR
// end ;
49708: LD_VAR 0 5
49712: RET
// export function DangerAtRange ( unit , range ) ; begin
49713: LD_INT 0
49715: PPUSH
// if not unit then
49716: LD_VAR 0 1
49720: NOT
49721: IFFALSE 49725
// exit ;
49723: GO 49770
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49725: LD_ADDR_VAR 0 3
49729: PUSH
49730: LD_VAR 0 1
49734: PPUSH
49735: CALL_OW 255
49739: PPUSH
49740: LD_VAR 0 1
49744: PPUSH
49745: CALL_OW 250
49749: PPUSH
49750: LD_VAR 0 1
49754: PPUSH
49755: CALL_OW 251
49759: PPUSH
49760: LD_VAR 0 2
49764: PPUSH
49765: CALL 48012 0 4
49769: ST_TO_ADDR
// end ;
49770: LD_VAR 0 3
49774: RET
// export function DangerInArea ( side , area ) ; begin
49775: LD_INT 0
49777: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49778: LD_ADDR_VAR 0 3
49782: PUSH
49783: LD_VAR 0 2
49787: PPUSH
49788: LD_INT 81
49790: PUSH
49791: LD_VAR 0 1
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PPUSH
49800: CALL_OW 70
49804: ST_TO_ADDR
// end ;
49805: LD_VAR 0 3
49809: RET
// export function IsExtension ( b ) ; begin
49810: LD_INT 0
49812: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49813: LD_ADDR_VAR 0 2
49817: PUSH
49818: LD_VAR 0 1
49822: PUSH
49823: LD_INT 23
49825: PUSH
49826: LD_INT 20
49828: PUSH
49829: LD_INT 22
49831: PUSH
49832: LD_INT 17
49834: PUSH
49835: LD_INT 24
49837: PUSH
49838: LD_INT 21
49840: PUSH
49841: LD_INT 19
49843: PUSH
49844: LD_INT 16
49846: PUSH
49847: LD_INT 25
49849: PUSH
49850: LD_INT 18
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: IN
49865: ST_TO_ADDR
// end ;
49866: LD_VAR 0 2
49870: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49871: LD_INT 0
49873: PPUSH
49874: PPUSH
49875: PPUSH
// result := [ ] ;
49876: LD_ADDR_VAR 0 4
49880: PUSH
49881: EMPTY
49882: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49883: LD_ADDR_VAR 0 5
49887: PUSH
49888: LD_VAR 0 2
49892: PPUSH
49893: LD_INT 21
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PPUSH
49903: CALL_OW 70
49907: ST_TO_ADDR
// if not tmp then
49908: LD_VAR 0 5
49912: NOT
49913: IFFALSE 49917
// exit ;
49915: GO 49981
// if checkLink then
49917: LD_VAR 0 3
49921: IFFALSE 49971
// begin for i in tmp do
49923: LD_ADDR_VAR 0 6
49927: PUSH
49928: LD_VAR 0 5
49932: PUSH
49933: FOR_IN
49934: IFFALSE 49969
// if GetBase ( i ) <> base then
49936: LD_VAR 0 6
49940: PPUSH
49941: CALL_OW 274
49945: PUSH
49946: LD_VAR 0 1
49950: NONEQUAL
49951: IFFALSE 49967
// ComLinkToBase ( base , i ) ;
49953: LD_VAR 0 1
49957: PPUSH
49958: LD_VAR 0 6
49962: PPUSH
49963: CALL_OW 169
49967: GO 49933
49969: POP
49970: POP
// end ; result := tmp ;
49971: LD_ADDR_VAR 0 4
49975: PUSH
49976: LD_VAR 0 5
49980: ST_TO_ADDR
// end ;
49981: LD_VAR 0 4
49985: RET
// export function ComComplete ( units , b ) ; var i ; begin
49986: LD_INT 0
49988: PPUSH
49989: PPUSH
// if not units then
49990: LD_VAR 0 1
49994: NOT
49995: IFFALSE 49999
// exit ;
49997: GO 50089
// for i in units do
49999: LD_ADDR_VAR 0 4
50003: PUSH
50004: LD_VAR 0 1
50008: PUSH
50009: FOR_IN
50010: IFFALSE 50087
// if BuildingStatus ( b ) = bs_build then
50012: LD_VAR 0 2
50016: PPUSH
50017: CALL_OW 461
50021: PUSH
50022: LD_INT 1
50024: EQUAL
50025: IFFALSE 50085
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50027: LD_VAR 0 4
50031: PPUSH
50032: LD_STRING h
50034: PUSH
50035: LD_VAR 0 2
50039: PPUSH
50040: CALL_OW 250
50044: PUSH
50045: LD_VAR 0 2
50049: PPUSH
50050: CALL_OW 251
50054: PUSH
50055: LD_VAR 0 2
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: PUSH
50078: EMPTY
50079: LIST
50080: PPUSH
50081: CALL_OW 446
50085: GO 50009
50087: POP
50088: POP
// end ;
50089: LD_VAR 0 3
50093: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50094: LD_INT 0
50096: PPUSH
50097: PPUSH
50098: PPUSH
50099: PPUSH
50100: PPUSH
50101: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50102: LD_VAR 0 1
50106: NOT
50107: PUSH
50108: LD_VAR 0 1
50112: PPUSH
50113: CALL_OW 263
50117: PUSH
50118: LD_INT 2
50120: NONEQUAL
50121: OR
50122: IFFALSE 50126
// exit ;
50124: GO 50442
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50126: LD_ADDR_VAR 0 6
50130: PUSH
50131: LD_INT 22
50133: PUSH
50134: LD_VAR 0 1
50138: PPUSH
50139: CALL_OW 255
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: LD_INT 30
50153: PUSH
50154: LD_INT 36
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 34
50163: PUSH
50164: LD_INT 31
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PPUSH
50180: CALL_OW 69
50184: ST_TO_ADDR
// if not tmp then
50185: LD_VAR 0 6
50189: NOT
50190: IFFALSE 50194
// exit ;
50192: GO 50442
// result := [ ] ;
50194: LD_ADDR_VAR 0 2
50198: PUSH
50199: EMPTY
50200: ST_TO_ADDR
// for i in tmp do
50201: LD_ADDR_VAR 0 3
50205: PUSH
50206: LD_VAR 0 6
50210: PUSH
50211: FOR_IN
50212: IFFALSE 50283
// begin t := UnitsInside ( i ) ;
50214: LD_ADDR_VAR 0 4
50218: PUSH
50219: LD_VAR 0 3
50223: PPUSH
50224: CALL_OW 313
50228: ST_TO_ADDR
// if t then
50229: LD_VAR 0 4
50233: IFFALSE 50281
// for j in t do
50235: LD_ADDR_VAR 0 7
50239: PUSH
50240: LD_VAR 0 4
50244: PUSH
50245: FOR_IN
50246: IFFALSE 50279
// result := Replace ( result , result + 1 , j ) ;
50248: LD_ADDR_VAR 0 2
50252: PUSH
50253: LD_VAR 0 2
50257: PPUSH
50258: LD_VAR 0 2
50262: PUSH
50263: LD_INT 1
50265: PLUS
50266: PPUSH
50267: LD_VAR 0 7
50271: PPUSH
50272: CALL_OW 1
50276: ST_TO_ADDR
50277: GO 50245
50279: POP
50280: POP
// end ;
50281: GO 50211
50283: POP
50284: POP
// if not result then
50285: LD_VAR 0 2
50289: NOT
50290: IFFALSE 50294
// exit ;
50292: GO 50442
// mech := result [ 1 ] ;
50294: LD_ADDR_VAR 0 5
50298: PUSH
50299: LD_VAR 0 2
50303: PUSH
50304: LD_INT 1
50306: ARRAY
50307: ST_TO_ADDR
// if result > 1 then
50308: LD_VAR 0 2
50312: PUSH
50313: LD_INT 1
50315: GREATER
50316: IFFALSE 50428
// begin for i = 2 to result do
50318: LD_ADDR_VAR 0 3
50322: PUSH
50323: DOUBLE
50324: LD_INT 2
50326: DEC
50327: ST_TO_ADDR
50328: LD_VAR 0 2
50332: PUSH
50333: FOR_TO
50334: IFFALSE 50426
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50336: LD_ADDR_VAR 0 4
50340: PUSH
50341: LD_VAR 0 2
50345: PUSH
50346: LD_VAR 0 3
50350: ARRAY
50351: PPUSH
50352: LD_INT 3
50354: PPUSH
50355: CALL_OW 259
50359: PUSH
50360: LD_VAR 0 2
50364: PUSH
50365: LD_VAR 0 3
50369: ARRAY
50370: PPUSH
50371: CALL_OW 432
50375: MINUS
50376: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50377: LD_VAR 0 4
50381: PUSH
50382: LD_VAR 0 5
50386: PPUSH
50387: LD_INT 3
50389: PPUSH
50390: CALL_OW 259
50394: PUSH
50395: LD_VAR 0 5
50399: PPUSH
50400: CALL_OW 432
50404: MINUS
50405: GREATEREQUAL
50406: IFFALSE 50424
// mech := result [ i ] ;
50408: LD_ADDR_VAR 0 5
50412: PUSH
50413: LD_VAR 0 2
50417: PUSH
50418: LD_VAR 0 3
50422: ARRAY
50423: ST_TO_ADDR
// end ;
50424: GO 50333
50426: POP
50427: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50428: LD_VAR 0 1
50432: PPUSH
50433: LD_VAR 0 5
50437: PPUSH
50438: CALL_OW 135
// end ;
50442: LD_VAR 0 2
50446: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50447: LD_INT 0
50449: PPUSH
50450: PPUSH
50451: PPUSH
50452: PPUSH
50453: PPUSH
50454: PPUSH
50455: PPUSH
50456: PPUSH
50457: PPUSH
50458: PPUSH
50459: PPUSH
50460: PPUSH
50461: PPUSH
// result := [ ] ;
50462: LD_ADDR_VAR 0 7
50466: PUSH
50467: EMPTY
50468: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50469: LD_VAR 0 1
50473: PPUSH
50474: CALL_OW 266
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: IN
50489: NOT
50490: IFFALSE 50494
// exit ;
50492: GO 52128
// if name then
50494: LD_VAR 0 3
50498: IFFALSE 50514
// SetBName ( base_dep , name ) ;
50500: LD_VAR 0 1
50504: PPUSH
50505: LD_VAR 0 3
50509: PPUSH
50510: CALL_OW 500
// base := GetBase ( base_dep ) ;
50514: LD_ADDR_VAR 0 15
50518: PUSH
50519: LD_VAR 0 1
50523: PPUSH
50524: CALL_OW 274
50528: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50529: LD_ADDR_VAR 0 16
50533: PUSH
50534: LD_VAR 0 1
50538: PPUSH
50539: CALL_OW 255
50543: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50544: LD_ADDR_VAR 0 17
50548: PUSH
50549: LD_VAR 0 1
50553: PPUSH
50554: CALL_OW 248
50558: ST_TO_ADDR
// if sources then
50559: LD_VAR 0 5
50563: IFFALSE 50610
// for i = 1 to 3 do
50565: LD_ADDR_VAR 0 8
50569: PUSH
50570: DOUBLE
50571: LD_INT 1
50573: DEC
50574: ST_TO_ADDR
50575: LD_INT 3
50577: PUSH
50578: FOR_TO
50579: IFFALSE 50608
// AddResourceType ( base , i , sources [ i ] ) ;
50581: LD_VAR 0 15
50585: PPUSH
50586: LD_VAR 0 8
50590: PPUSH
50591: LD_VAR 0 5
50595: PUSH
50596: LD_VAR 0 8
50600: ARRAY
50601: PPUSH
50602: CALL_OW 276
50606: GO 50578
50608: POP
50609: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50610: LD_ADDR_VAR 0 18
50614: PUSH
50615: LD_VAR 0 15
50619: PPUSH
50620: LD_VAR 0 2
50624: PPUSH
50625: LD_INT 1
50627: PPUSH
50628: CALL 49871 0 3
50632: ST_TO_ADDR
// InitHc ;
50633: CALL_OW 19
// InitUc ;
50637: CALL_OW 18
// uc_side := side ;
50641: LD_ADDR_OWVAR 20
50645: PUSH
50646: LD_VAR 0 16
50650: ST_TO_ADDR
// uc_nation := nation ;
50651: LD_ADDR_OWVAR 21
50655: PUSH
50656: LD_VAR 0 17
50660: ST_TO_ADDR
// if buildings then
50661: LD_VAR 0 18
50665: IFFALSE 51987
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50667: LD_ADDR_VAR 0 19
50671: PUSH
50672: LD_VAR 0 18
50676: PPUSH
50677: LD_INT 2
50679: PUSH
50680: LD_INT 30
50682: PUSH
50683: LD_INT 29
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 30
50692: PUSH
50693: LD_INT 30
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: PPUSH
50705: CALL_OW 72
50709: ST_TO_ADDR
// if tmp then
50710: LD_VAR 0 19
50714: IFFALSE 50762
// for i in tmp do
50716: LD_ADDR_VAR 0 8
50720: PUSH
50721: LD_VAR 0 19
50725: PUSH
50726: FOR_IN
50727: IFFALSE 50760
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50729: LD_VAR 0 8
50733: PPUSH
50734: CALL_OW 250
50738: PPUSH
50739: LD_VAR 0 8
50743: PPUSH
50744: CALL_OW 251
50748: PPUSH
50749: LD_VAR 0 16
50753: PPUSH
50754: CALL_OW 441
50758: GO 50726
50760: POP
50761: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50762: LD_VAR 0 18
50766: PPUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 30
50772: PUSH
50773: LD_INT 32
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 30
50782: PUSH
50783: LD_INT 33
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: PPUSH
50795: CALL_OW 72
50799: IFFALSE 50887
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50801: LD_ADDR_VAR 0 8
50805: PUSH
50806: LD_VAR 0 18
50810: PPUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 30
50816: PUSH
50817: LD_INT 32
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 30
50826: PUSH
50827: LD_INT 33
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: LIST
50838: PPUSH
50839: CALL_OW 72
50843: PUSH
50844: FOR_IN
50845: IFFALSE 50885
// begin if not GetBWeapon ( i ) then
50847: LD_VAR 0 8
50851: PPUSH
50852: CALL_OW 269
50856: NOT
50857: IFFALSE 50883
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50859: LD_VAR 0 8
50863: PPUSH
50864: LD_VAR 0 8
50868: PPUSH
50869: LD_VAR 0 2
50873: PPUSH
50874: CALL 52133 0 2
50878: PPUSH
50879: CALL_OW 431
// end ;
50883: GO 50844
50885: POP
50886: POP
// end ; for i = 1 to personel do
50887: LD_ADDR_VAR 0 8
50891: PUSH
50892: DOUBLE
50893: LD_INT 1
50895: DEC
50896: ST_TO_ADDR
50897: LD_VAR 0 6
50901: PUSH
50902: FOR_TO
50903: IFFALSE 51967
// begin if i > 4 then
50905: LD_VAR 0 8
50909: PUSH
50910: LD_INT 4
50912: GREATER
50913: IFFALSE 50917
// break ;
50915: GO 51967
// case i of 1 :
50917: LD_VAR 0 8
50921: PUSH
50922: LD_INT 1
50924: DOUBLE
50925: EQUAL
50926: IFTRUE 50930
50928: GO 51010
50930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50931: LD_ADDR_VAR 0 12
50935: PUSH
50936: LD_VAR 0 18
50940: PPUSH
50941: LD_INT 22
50943: PUSH
50944: LD_VAR 0 16
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 58
50955: PUSH
50956: EMPTY
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: LD_INT 30
50964: PUSH
50965: LD_INT 32
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 30
50974: PUSH
50975: LD_INT 4
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 30
50984: PUSH
50985: LD_INT 5
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: LIST
51002: PPUSH
51003: CALL_OW 72
51007: ST_TO_ADDR
51008: GO 51232
51010: LD_INT 2
51012: DOUBLE
51013: EQUAL
51014: IFTRUE 51018
51016: GO 51080
51018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51019: LD_ADDR_VAR 0 12
51023: PUSH
51024: LD_VAR 0 18
51028: PPUSH
51029: LD_INT 22
51031: PUSH
51032: LD_VAR 0 16
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: LD_INT 30
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 30
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: LIST
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PPUSH
51073: CALL_OW 72
51077: ST_TO_ADDR
51078: GO 51232
51080: LD_INT 3
51082: DOUBLE
51083: EQUAL
51084: IFTRUE 51088
51086: GO 51150
51088: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51089: LD_ADDR_VAR 0 12
51093: PUSH
51094: LD_VAR 0 18
51098: PPUSH
51099: LD_INT 22
51101: PUSH
51102: LD_VAR 0 16
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: LD_INT 30
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 30
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: LIST
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PPUSH
51143: CALL_OW 72
51147: ST_TO_ADDR
51148: GO 51232
51150: LD_INT 4
51152: DOUBLE
51153: EQUAL
51154: IFTRUE 51158
51156: GO 51231
51158: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51159: LD_ADDR_VAR 0 12
51163: PUSH
51164: LD_VAR 0 18
51168: PPUSH
51169: LD_INT 22
51171: PUSH
51172: LD_VAR 0 16
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: LD_INT 30
51186: PUSH
51187: LD_INT 6
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 30
51196: PUSH
51197: LD_INT 7
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 30
51206: PUSH
51207: LD_INT 8
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PPUSH
51224: CALL_OW 72
51228: ST_TO_ADDR
51229: GO 51232
51231: POP
// if i = 1 then
51232: LD_VAR 0 8
51236: PUSH
51237: LD_INT 1
51239: EQUAL
51240: IFFALSE 51351
// begin tmp := [ ] ;
51242: LD_ADDR_VAR 0 19
51246: PUSH
51247: EMPTY
51248: ST_TO_ADDR
// for j in f do
51249: LD_ADDR_VAR 0 9
51253: PUSH
51254: LD_VAR 0 12
51258: PUSH
51259: FOR_IN
51260: IFFALSE 51333
// if GetBType ( j ) = b_bunker then
51262: LD_VAR 0 9
51266: PPUSH
51267: CALL_OW 266
51271: PUSH
51272: LD_INT 32
51274: EQUAL
51275: IFFALSE 51302
// tmp := Insert ( tmp , 1 , j ) else
51277: LD_ADDR_VAR 0 19
51281: PUSH
51282: LD_VAR 0 19
51286: PPUSH
51287: LD_INT 1
51289: PPUSH
51290: LD_VAR 0 9
51294: PPUSH
51295: CALL_OW 2
51299: ST_TO_ADDR
51300: GO 51331
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51302: LD_ADDR_VAR 0 19
51306: PUSH
51307: LD_VAR 0 19
51311: PPUSH
51312: LD_VAR 0 19
51316: PUSH
51317: LD_INT 1
51319: PLUS
51320: PPUSH
51321: LD_VAR 0 9
51325: PPUSH
51326: CALL_OW 2
51330: ST_TO_ADDR
51331: GO 51259
51333: POP
51334: POP
// if tmp then
51335: LD_VAR 0 19
51339: IFFALSE 51351
// f := tmp ;
51341: LD_ADDR_VAR 0 12
51345: PUSH
51346: LD_VAR 0 19
51350: ST_TO_ADDR
// end ; x := personel [ i ] ;
51351: LD_ADDR_VAR 0 13
51355: PUSH
51356: LD_VAR 0 6
51360: PUSH
51361: LD_VAR 0 8
51365: ARRAY
51366: ST_TO_ADDR
// if x = - 1 then
51367: LD_VAR 0 13
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: EQUAL
51376: IFFALSE 51585
// begin for j in f do
51378: LD_ADDR_VAR 0 9
51382: PUSH
51383: LD_VAR 0 12
51387: PUSH
51388: FOR_IN
51389: IFFALSE 51581
// repeat InitHc ;
51391: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51395: LD_VAR 0 9
51399: PPUSH
51400: CALL_OW 266
51404: PUSH
51405: LD_INT 5
51407: EQUAL
51408: IFFALSE 51478
// begin if UnitsInside ( j ) < 3 then
51410: LD_VAR 0 9
51414: PPUSH
51415: CALL_OW 313
51419: PUSH
51420: LD_INT 3
51422: LESS
51423: IFFALSE 51459
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51425: LD_INT 0
51427: PPUSH
51428: LD_INT 5
51430: PUSH
51431: LD_INT 8
51433: PUSH
51434: LD_INT 9
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: LIST
51441: PUSH
51442: LD_VAR 0 17
51446: ARRAY
51447: PPUSH
51448: LD_VAR 0 4
51452: PPUSH
51453: CALL_OW 380
51457: GO 51476
// PrepareHuman ( false , i , skill ) ;
51459: LD_INT 0
51461: PPUSH
51462: LD_VAR 0 8
51466: PPUSH
51467: LD_VAR 0 4
51471: PPUSH
51472: CALL_OW 380
// end else
51476: GO 51495
// PrepareHuman ( false , i , skill ) ;
51478: LD_INT 0
51480: PPUSH
51481: LD_VAR 0 8
51485: PPUSH
51486: LD_VAR 0 4
51490: PPUSH
51491: CALL_OW 380
// un := CreateHuman ;
51495: LD_ADDR_VAR 0 14
51499: PUSH
51500: CALL_OW 44
51504: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51505: LD_ADDR_VAR 0 7
51509: PUSH
51510: LD_VAR 0 7
51514: PPUSH
51515: LD_INT 1
51517: PPUSH
51518: LD_VAR 0 14
51522: PPUSH
51523: CALL_OW 2
51527: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51528: LD_VAR 0 14
51532: PPUSH
51533: LD_VAR 0 9
51537: PPUSH
51538: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51542: LD_VAR 0 9
51546: PPUSH
51547: CALL_OW 313
51551: PUSH
51552: LD_INT 6
51554: EQUAL
51555: PUSH
51556: LD_VAR 0 9
51560: PPUSH
51561: CALL_OW 266
51565: PUSH
51566: LD_INT 32
51568: PUSH
51569: LD_INT 31
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: IN
51576: OR
51577: IFFALSE 51391
51579: GO 51388
51581: POP
51582: POP
// end else
51583: GO 51965
// for j = 1 to x do
51585: LD_ADDR_VAR 0 9
51589: PUSH
51590: DOUBLE
51591: LD_INT 1
51593: DEC
51594: ST_TO_ADDR
51595: LD_VAR 0 13
51599: PUSH
51600: FOR_TO
51601: IFFALSE 51963
// begin InitHc ;
51603: CALL_OW 19
// if not f then
51607: LD_VAR 0 12
51611: NOT
51612: IFFALSE 51701
// begin PrepareHuman ( false , i , skill ) ;
51614: LD_INT 0
51616: PPUSH
51617: LD_VAR 0 8
51621: PPUSH
51622: LD_VAR 0 4
51626: PPUSH
51627: CALL_OW 380
// un := CreateHuman ;
51631: LD_ADDR_VAR 0 14
51635: PUSH
51636: CALL_OW 44
51640: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51641: LD_ADDR_VAR 0 7
51645: PUSH
51646: LD_VAR 0 7
51650: PPUSH
51651: LD_INT 1
51653: PPUSH
51654: LD_VAR 0 14
51658: PPUSH
51659: CALL_OW 2
51663: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51664: LD_VAR 0 14
51668: PPUSH
51669: LD_VAR 0 1
51673: PPUSH
51674: CALL_OW 250
51678: PPUSH
51679: LD_VAR 0 1
51683: PPUSH
51684: CALL_OW 251
51688: PPUSH
51689: LD_INT 10
51691: PPUSH
51692: LD_INT 0
51694: PPUSH
51695: CALL_OW 50
// continue ;
51699: GO 51600
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51701: LD_VAR 0 12
51705: PUSH
51706: LD_INT 1
51708: ARRAY
51709: PPUSH
51710: CALL_OW 313
51714: PUSH
51715: LD_VAR 0 12
51719: PUSH
51720: LD_INT 1
51722: ARRAY
51723: PPUSH
51724: CALL_OW 266
51728: PUSH
51729: LD_INT 32
51731: PUSH
51732: LD_INT 31
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: IN
51739: AND
51740: PUSH
51741: LD_VAR 0 12
51745: PUSH
51746: LD_INT 1
51748: ARRAY
51749: PPUSH
51750: CALL_OW 313
51754: PUSH
51755: LD_INT 6
51757: EQUAL
51758: OR
51759: IFFALSE 51779
// f := Delete ( f , 1 ) ;
51761: LD_ADDR_VAR 0 12
51765: PUSH
51766: LD_VAR 0 12
51770: PPUSH
51771: LD_INT 1
51773: PPUSH
51774: CALL_OW 3
51778: ST_TO_ADDR
// if not f then
51779: LD_VAR 0 12
51783: NOT
51784: IFFALSE 51802
// begin x := x + 2 ;
51786: LD_ADDR_VAR 0 13
51790: PUSH
51791: LD_VAR 0 13
51795: PUSH
51796: LD_INT 2
51798: PLUS
51799: ST_TO_ADDR
// continue ;
51800: GO 51600
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51802: LD_VAR 0 12
51806: PUSH
51807: LD_INT 1
51809: ARRAY
51810: PPUSH
51811: CALL_OW 266
51815: PUSH
51816: LD_INT 5
51818: EQUAL
51819: IFFALSE 51893
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51821: LD_VAR 0 12
51825: PUSH
51826: LD_INT 1
51828: ARRAY
51829: PPUSH
51830: CALL_OW 313
51834: PUSH
51835: LD_INT 3
51837: LESS
51838: IFFALSE 51874
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51840: LD_INT 0
51842: PPUSH
51843: LD_INT 5
51845: PUSH
51846: LD_INT 8
51848: PUSH
51849: LD_INT 9
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: LIST
51856: PUSH
51857: LD_VAR 0 17
51861: ARRAY
51862: PPUSH
51863: LD_VAR 0 4
51867: PPUSH
51868: CALL_OW 380
51872: GO 51891
// PrepareHuman ( false , i , skill ) ;
51874: LD_INT 0
51876: PPUSH
51877: LD_VAR 0 8
51881: PPUSH
51882: LD_VAR 0 4
51886: PPUSH
51887: CALL_OW 380
// end else
51891: GO 51910
// PrepareHuman ( false , i , skill ) ;
51893: LD_INT 0
51895: PPUSH
51896: LD_VAR 0 8
51900: PPUSH
51901: LD_VAR 0 4
51905: PPUSH
51906: CALL_OW 380
// un := CreateHuman ;
51910: LD_ADDR_VAR 0 14
51914: PUSH
51915: CALL_OW 44
51919: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51920: LD_ADDR_VAR 0 7
51924: PUSH
51925: LD_VAR 0 7
51929: PPUSH
51930: LD_INT 1
51932: PPUSH
51933: LD_VAR 0 14
51937: PPUSH
51938: CALL_OW 2
51942: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51943: LD_VAR 0 14
51947: PPUSH
51948: LD_VAR 0 12
51952: PUSH
51953: LD_INT 1
51955: ARRAY
51956: PPUSH
51957: CALL_OW 52
// end ;
51961: GO 51600
51963: POP
51964: POP
// end ;
51965: GO 50902
51967: POP
51968: POP
// result := result ^ buildings ;
51969: LD_ADDR_VAR 0 7
51973: PUSH
51974: LD_VAR 0 7
51978: PUSH
51979: LD_VAR 0 18
51983: ADD
51984: ST_TO_ADDR
// end else
51985: GO 52128
// begin for i = 1 to personel do
51987: LD_ADDR_VAR 0 8
51991: PUSH
51992: DOUBLE
51993: LD_INT 1
51995: DEC
51996: ST_TO_ADDR
51997: LD_VAR 0 6
52001: PUSH
52002: FOR_TO
52003: IFFALSE 52126
// begin if i > 4 then
52005: LD_VAR 0 8
52009: PUSH
52010: LD_INT 4
52012: GREATER
52013: IFFALSE 52017
// break ;
52015: GO 52126
// x := personel [ i ] ;
52017: LD_ADDR_VAR 0 13
52021: PUSH
52022: LD_VAR 0 6
52026: PUSH
52027: LD_VAR 0 8
52031: ARRAY
52032: ST_TO_ADDR
// if x = - 1 then
52033: LD_VAR 0 13
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: EQUAL
52042: IFFALSE 52046
// continue ;
52044: GO 52002
// PrepareHuman ( false , i , skill ) ;
52046: LD_INT 0
52048: PPUSH
52049: LD_VAR 0 8
52053: PPUSH
52054: LD_VAR 0 4
52058: PPUSH
52059: CALL_OW 380
// un := CreateHuman ;
52063: LD_ADDR_VAR 0 14
52067: PUSH
52068: CALL_OW 44
52072: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52073: LD_VAR 0 14
52077: PPUSH
52078: LD_VAR 0 1
52082: PPUSH
52083: CALL_OW 250
52087: PPUSH
52088: LD_VAR 0 1
52092: PPUSH
52093: CALL_OW 251
52097: PPUSH
52098: LD_INT 10
52100: PPUSH
52101: LD_INT 0
52103: PPUSH
52104: CALL_OW 50
// result := result ^ un ;
52108: LD_ADDR_VAR 0 7
52112: PUSH
52113: LD_VAR 0 7
52117: PUSH
52118: LD_VAR 0 14
52122: ADD
52123: ST_TO_ADDR
// end ;
52124: GO 52002
52126: POP
52127: POP
// end ; end ;
52128: LD_VAR 0 7
52132: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52133: LD_INT 0
52135: PPUSH
52136: PPUSH
52137: PPUSH
52138: PPUSH
52139: PPUSH
52140: PPUSH
52141: PPUSH
52142: PPUSH
52143: PPUSH
52144: PPUSH
52145: PPUSH
52146: PPUSH
52147: PPUSH
52148: PPUSH
52149: PPUSH
52150: PPUSH
// result := false ;
52151: LD_ADDR_VAR 0 3
52155: PUSH
52156: LD_INT 0
52158: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52159: LD_VAR 0 1
52163: NOT
52164: PUSH
52165: LD_VAR 0 1
52169: PPUSH
52170: CALL_OW 266
52174: PUSH
52175: LD_INT 32
52177: PUSH
52178: LD_INT 33
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: IN
52185: NOT
52186: OR
52187: IFFALSE 52191
// exit ;
52189: GO 53300
// nat := GetNation ( tower ) ;
52191: LD_ADDR_VAR 0 12
52195: PUSH
52196: LD_VAR 0 1
52200: PPUSH
52201: CALL_OW 248
52205: ST_TO_ADDR
// side := GetSide ( tower ) ;
52206: LD_ADDR_VAR 0 16
52210: PUSH
52211: LD_VAR 0 1
52215: PPUSH
52216: CALL_OW 255
52220: ST_TO_ADDR
// x := GetX ( tower ) ;
52221: LD_ADDR_VAR 0 10
52225: PUSH
52226: LD_VAR 0 1
52230: PPUSH
52231: CALL_OW 250
52235: ST_TO_ADDR
// y := GetY ( tower ) ;
52236: LD_ADDR_VAR 0 11
52240: PUSH
52241: LD_VAR 0 1
52245: PPUSH
52246: CALL_OW 251
52250: ST_TO_ADDR
// if not x or not y then
52251: LD_VAR 0 10
52255: NOT
52256: PUSH
52257: LD_VAR 0 11
52261: NOT
52262: OR
52263: IFFALSE 52267
// exit ;
52265: GO 53300
// weapon := 0 ;
52267: LD_ADDR_VAR 0 18
52271: PUSH
52272: LD_INT 0
52274: ST_TO_ADDR
// fac_list := [ ] ;
52275: LD_ADDR_VAR 0 17
52279: PUSH
52280: EMPTY
52281: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52282: LD_ADDR_VAR 0 6
52286: PUSH
52287: LD_VAR 0 1
52291: PPUSH
52292: CALL_OW 274
52296: PPUSH
52297: LD_VAR 0 2
52301: PPUSH
52302: LD_INT 0
52304: PPUSH
52305: CALL 49871 0 3
52309: PPUSH
52310: LD_INT 30
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PPUSH
52320: CALL_OW 72
52324: ST_TO_ADDR
// if not factories then
52325: LD_VAR 0 6
52329: NOT
52330: IFFALSE 52334
// exit ;
52332: GO 53300
// for i in factories do
52334: LD_ADDR_VAR 0 8
52338: PUSH
52339: LD_VAR 0 6
52343: PUSH
52344: FOR_IN
52345: IFFALSE 52370
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52347: LD_ADDR_VAR 0 17
52351: PUSH
52352: LD_VAR 0 17
52356: PUSH
52357: LD_VAR 0 8
52361: PPUSH
52362: CALL_OW 478
52366: UNION
52367: ST_TO_ADDR
52368: GO 52344
52370: POP
52371: POP
// if not fac_list then
52372: LD_VAR 0 17
52376: NOT
52377: IFFALSE 52381
// exit ;
52379: GO 53300
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52381: LD_ADDR_VAR 0 5
52385: PUSH
52386: LD_INT 4
52388: PUSH
52389: LD_INT 5
52391: PUSH
52392: LD_INT 9
52394: PUSH
52395: LD_INT 10
52397: PUSH
52398: LD_INT 6
52400: PUSH
52401: LD_INT 7
52403: PUSH
52404: LD_INT 11
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 27
52418: PUSH
52419: LD_INT 28
52421: PUSH
52422: LD_INT 26
52424: PUSH
52425: LD_INT 30
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 43
52436: PUSH
52437: LD_INT 44
52439: PUSH
52440: LD_INT 46
52442: PUSH
52443: LD_INT 45
52445: PUSH
52446: LD_INT 47
52448: PUSH
52449: LD_INT 49
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: LIST
52464: PUSH
52465: LD_VAR 0 12
52469: ARRAY
52470: ST_TO_ADDR
// list := list isect fac_list ;
52471: LD_ADDR_VAR 0 5
52475: PUSH
52476: LD_VAR 0 5
52480: PUSH
52481: LD_VAR 0 17
52485: ISECT
52486: ST_TO_ADDR
// if not list then
52487: LD_VAR 0 5
52491: NOT
52492: IFFALSE 52496
// exit ;
52494: GO 53300
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52496: LD_VAR 0 12
52500: PUSH
52501: LD_INT 3
52503: EQUAL
52504: PUSH
52505: LD_INT 49
52507: PUSH
52508: LD_VAR 0 5
52512: IN
52513: AND
52514: PUSH
52515: LD_INT 31
52517: PPUSH
52518: LD_VAR 0 16
52522: PPUSH
52523: CALL_OW 321
52527: PUSH
52528: LD_INT 2
52530: EQUAL
52531: AND
52532: IFFALSE 52592
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52534: LD_INT 22
52536: PUSH
52537: LD_VAR 0 16
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 35
52548: PUSH
52549: LD_INT 49
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 91
52558: PUSH
52559: LD_VAR 0 1
52563: PUSH
52564: LD_INT 10
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: PPUSH
52577: CALL_OW 69
52581: NOT
52582: IFFALSE 52592
// weapon := ru_time_lapser ;
52584: LD_ADDR_VAR 0 18
52588: PUSH
52589: LD_INT 49
52591: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52592: LD_VAR 0 12
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: IN
52607: PUSH
52608: LD_INT 11
52610: PUSH
52611: LD_VAR 0 5
52615: IN
52616: PUSH
52617: LD_INT 30
52619: PUSH
52620: LD_VAR 0 5
52624: IN
52625: OR
52626: AND
52627: PUSH
52628: LD_INT 6
52630: PPUSH
52631: LD_VAR 0 16
52635: PPUSH
52636: CALL_OW 321
52640: PUSH
52641: LD_INT 2
52643: EQUAL
52644: AND
52645: IFFALSE 52810
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52647: LD_INT 22
52649: PUSH
52650: LD_VAR 0 16
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: LD_INT 35
52664: PUSH
52665: LD_INT 11
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 35
52674: PUSH
52675: LD_INT 30
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 91
52689: PUSH
52690: LD_VAR 0 1
52694: PUSH
52695: LD_INT 18
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: PPUSH
52708: CALL_OW 69
52712: NOT
52713: PUSH
52714: LD_INT 22
52716: PUSH
52717: LD_VAR 0 16
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: PUSH
52729: LD_INT 30
52731: PUSH
52732: LD_INT 32
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 30
52741: PUSH
52742: LD_INT 33
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 91
52756: PUSH
52757: LD_VAR 0 1
52761: PUSH
52762: LD_INT 12
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: PUSH
52775: EMPTY
52776: LIST
52777: PPUSH
52778: CALL_OW 69
52782: PUSH
52783: LD_INT 2
52785: GREATER
52786: AND
52787: IFFALSE 52810
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52789: LD_ADDR_VAR 0 18
52793: PUSH
52794: LD_INT 11
52796: PUSH
52797: LD_INT 30
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_VAR 0 12
52808: ARRAY
52809: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52810: LD_VAR 0 18
52814: NOT
52815: PUSH
52816: LD_INT 40
52818: PPUSH
52819: LD_VAR 0 16
52823: PPUSH
52824: CALL_OW 321
52828: PUSH
52829: LD_INT 2
52831: EQUAL
52832: AND
52833: PUSH
52834: LD_INT 7
52836: PUSH
52837: LD_VAR 0 5
52841: IN
52842: PUSH
52843: LD_INT 28
52845: PUSH
52846: LD_VAR 0 5
52850: IN
52851: OR
52852: PUSH
52853: LD_INT 45
52855: PUSH
52856: LD_VAR 0 5
52860: IN
52861: OR
52862: AND
52863: IFFALSE 53117
// begin hex := GetHexInfo ( x , y ) ;
52865: LD_ADDR_VAR 0 4
52869: PUSH
52870: LD_VAR 0 10
52874: PPUSH
52875: LD_VAR 0 11
52879: PPUSH
52880: CALL_OW 546
52884: ST_TO_ADDR
// if hex [ 1 ] then
52885: LD_VAR 0 4
52889: PUSH
52890: LD_INT 1
52892: ARRAY
52893: IFFALSE 52897
// exit ;
52895: GO 53300
// height := hex [ 2 ] ;
52897: LD_ADDR_VAR 0 15
52901: PUSH
52902: LD_VAR 0 4
52906: PUSH
52907: LD_INT 2
52909: ARRAY
52910: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52911: LD_ADDR_VAR 0 14
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: LD_INT 5
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: ST_TO_ADDR
// for i in tmp do
52934: LD_ADDR_VAR 0 8
52938: PUSH
52939: LD_VAR 0 14
52943: PUSH
52944: FOR_IN
52945: IFFALSE 53115
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52947: LD_ADDR_VAR 0 9
52951: PUSH
52952: LD_VAR 0 10
52956: PPUSH
52957: LD_VAR 0 8
52961: PPUSH
52962: LD_INT 5
52964: PPUSH
52965: CALL_OW 272
52969: PUSH
52970: LD_VAR 0 11
52974: PPUSH
52975: LD_VAR 0 8
52979: PPUSH
52980: LD_INT 5
52982: PPUSH
52983: CALL_OW 273
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52992: LD_VAR 0 9
52996: PUSH
52997: LD_INT 1
52999: ARRAY
53000: PPUSH
53001: LD_VAR 0 9
53005: PUSH
53006: LD_INT 2
53008: ARRAY
53009: PPUSH
53010: CALL_OW 488
53014: IFFALSE 53113
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53016: LD_ADDR_VAR 0 4
53020: PUSH
53021: LD_VAR 0 9
53025: PUSH
53026: LD_INT 1
53028: ARRAY
53029: PPUSH
53030: LD_VAR 0 9
53034: PUSH
53035: LD_INT 2
53037: ARRAY
53038: PPUSH
53039: CALL_OW 546
53043: ST_TO_ADDR
// if hex [ 1 ] then
53044: LD_VAR 0 4
53048: PUSH
53049: LD_INT 1
53051: ARRAY
53052: IFFALSE 53056
// continue ;
53054: GO 52944
// h := hex [ 2 ] ;
53056: LD_ADDR_VAR 0 13
53060: PUSH
53061: LD_VAR 0 4
53065: PUSH
53066: LD_INT 2
53068: ARRAY
53069: ST_TO_ADDR
// if h + 7 < height then
53070: LD_VAR 0 13
53074: PUSH
53075: LD_INT 7
53077: PLUS
53078: PUSH
53079: LD_VAR 0 15
53083: LESS
53084: IFFALSE 53113
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53086: LD_ADDR_VAR 0 18
53090: PUSH
53091: LD_INT 7
53093: PUSH
53094: LD_INT 28
53096: PUSH
53097: LD_INT 45
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: LIST
53104: PUSH
53105: LD_VAR 0 12
53109: ARRAY
53110: ST_TO_ADDR
// break ;
53111: GO 53115
// end ; end ; end ;
53113: GO 52944
53115: POP
53116: POP
// end ; if not weapon then
53117: LD_VAR 0 18
53121: NOT
53122: IFFALSE 53182
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53124: LD_ADDR_VAR 0 5
53128: PUSH
53129: LD_VAR 0 5
53133: PUSH
53134: LD_INT 11
53136: PUSH
53137: LD_INT 30
53139: PUSH
53140: LD_INT 49
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: LIST
53147: DIFF
53148: ST_TO_ADDR
// if not list then
53149: LD_VAR 0 5
53153: NOT
53154: IFFALSE 53158
// exit ;
53156: GO 53300
// weapon := list [ rand ( 1 , list ) ] ;
53158: LD_ADDR_VAR 0 18
53162: PUSH
53163: LD_VAR 0 5
53167: PUSH
53168: LD_INT 1
53170: PPUSH
53171: LD_VAR 0 5
53175: PPUSH
53176: CALL_OW 12
53180: ARRAY
53181: ST_TO_ADDR
// end ; if weapon then
53182: LD_VAR 0 18
53186: IFFALSE 53300
// begin tmp := CostOfWeapon ( weapon ) ;
53188: LD_ADDR_VAR 0 14
53192: PUSH
53193: LD_VAR 0 18
53197: PPUSH
53198: CALL_OW 451
53202: ST_TO_ADDR
// j := GetBase ( tower ) ;
53203: LD_ADDR_VAR 0 9
53207: PUSH
53208: LD_VAR 0 1
53212: PPUSH
53213: CALL_OW 274
53217: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53218: LD_VAR 0 9
53222: PPUSH
53223: LD_INT 1
53225: PPUSH
53226: CALL_OW 275
53230: PUSH
53231: LD_VAR 0 14
53235: PUSH
53236: LD_INT 1
53238: ARRAY
53239: GREATEREQUAL
53240: PUSH
53241: LD_VAR 0 9
53245: PPUSH
53246: LD_INT 2
53248: PPUSH
53249: CALL_OW 275
53253: PUSH
53254: LD_VAR 0 14
53258: PUSH
53259: LD_INT 2
53261: ARRAY
53262: GREATEREQUAL
53263: AND
53264: PUSH
53265: LD_VAR 0 9
53269: PPUSH
53270: LD_INT 3
53272: PPUSH
53273: CALL_OW 275
53277: PUSH
53278: LD_VAR 0 14
53282: PUSH
53283: LD_INT 3
53285: ARRAY
53286: GREATEREQUAL
53287: AND
53288: IFFALSE 53300
// result := weapon ;
53290: LD_ADDR_VAR 0 3
53294: PUSH
53295: LD_VAR 0 18
53299: ST_TO_ADDR
// end ; end ;
53300: LD_VAR 0 3
53304: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53305: LD_INT 0
53307: PPUSH
53308: PPUSH
// result := true ;
53309: LD_ADDR_VAR 0 3
53313: PUSH
53314: LD_INT 1
53316: ST_TO_ADDR
// if array1 = array2 then
53317: LD_VAR 0 1
53321: PUSH
53322: LD_VAR 0 2
53326: EQUAL
53327: IFFALSE 53387
// begin for i = 1 to array1 do
53329: LD_ADDR_VAR 0 4
53333: PUSH
53334: DOUBLE
53335: LD_INT 1
53337: DEC
53338: ST_TO_ADDR
53339: LD_VAR 0 1
53343: PUSH
53344: FOR_TO
53345: IFFALSE 53383
// if array1 [ i ] <> array2 [ i ] then
53347: LD_VAR 0 1
53351: PUSH
53352: LD_VAR 0 4
53356: ARRAY
53357: PUSH
53358: LD_VAR 0 2
53362: PUSH
53363: LD_VAR 0 4
53367: ARRAY
53368: NONEQUAL
53369: IFFALSE 53381
// begin result := false ;
53371: LD_ADDR_VAR 0 3
53375: PUSH
53376: LD_INT 0
53378: ST_TO_ADDR
// break ;
53379: GO 53383
// end ;
53381: GO 53344
53383: POP
53384: POP
// end else
53385: GO 53395
// result := false ;
53387: LD_ADDR_VAR 0 3
53391: PUSH
53392: LD_INT 0
53394: ST_TO_ADDR
// end ;
53395: LD_VAR 0 3
53399: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53400: LD_INT 0
53402: PPUSH
53403: PPUSH
// if not array1 or not array2 then
53404: LD_VAR 0 1
53408: NOT
53409: PUSH
53410: LD_VAR 0 2
53414: NOT
53415: OR
53416: IFFALSE 53420
// exit ;
53418: GO 53484
// result := true ;
53420: LD_ADDR_VAR 0 3
53424: PUSH
53425: LD_INT 1
53427: ST_TO_ADDR
// for i = 1 to array1 do
53428: LD_ADDR_VAR 0 4
53432: PUSH
53433: DOUBLE
53434: LD_INT 1
53436: DEC
53437: ST_TO_ADDR
53438: LD_VAR 0 1
53442: PUSH
53443: FOR_TO
53444: IFFALSE 53482
// if array1 [ i ] <> array2 [ i ] then
53446: LD_VAR 0 1
53450: PUSH
53451: LD_VAR 0 4
53455: ARRAY
53456: PUSH
53457: LD_VAR 0 2
53461: PUSH
53462: LD_VAR 0 4
53466: ARRAY
53467: NONEQUAL
53468: IFFALSE 53480
// begin result := false ;
53470: LD_ADDR_VAR 0 3
53474: PUSH
53475: LD_INT 0
53477: ST_TO_ADDR
// break ;
53478: GO 53482
// end ;
53480: GO 53443
53482: POP
53483: POP
// end ;
53484: LD_VAR 0 3
53488: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53489: LD_INT 0
53491: PPUSH
53492: PPUSH
53493: PPUSH
// pom := GetBase ( fac ) ;
53494: LD_ADDR_VAR 0 5
53498: PUSH
53499: LD_VAR 0 1
53503: PPUSH
53504: CALL_OW 274
53508: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53509: LD_ADDR_VAR 0 4
53513: PUSH
53514: LD_VAR 0 2
53518: PUSH
53519: LD_INT 1
53521: ARRAY
53522: PPUSH
53523: LD_VAR 0 2
53527: PUSH
53528: LD_INT 2
53530: ARRAY
53531: PPUSH
53532: LD_VAR 0 2
53536: PUSH
53537: LD_INT 3
53539: ARRAY
53540: PPUSH
53541: LD_VAR 0 2
53545: PUSH
53546: LD_INT 4
53548: ARRAY
53549: PPUSH
53550: CALL_OW 449
53554: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53555: LD_ADDR_VAR 0 3
53559: PUSH
53560: LD_VAR 0 5
53564: PPUSH
53565: LD_INT 1
53567: PPUSH
53568: CALL_OW 275
53572: PUSH
53573: LD_VAR 0 4
53577: PUSH
53578: LD_INT 1
53580: ARRAY
53581: GREATEREQUAL
53582: PUSH
53583: LD_VAR 0 5
53587: PPUSH
53588: LD_INT 2
53590: PPUSH
53591: CALL_OW 275
53595: PUSH
53596: LD_VAR 0 4
53600: PUSH
53601: LD_INT 2
53603: ARRAY
53604: GREATEREQUAL
53605: AND
53606: PUSH
53607: LD_VAR 0 5
53611: PPUSH
53612: LD_INT 3
53614: PPUSH
53615: CALL_OW 275
53619: PUSH
53620: LD_VAR 0 4
53624: PUSH
53625: LD_INT 3
53627: ARRAY
53628: GREATEREQUAL
53629: AND
53630: ST_TO_ADDR
// end ;
53631: LD_VAR 0 3
53635: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53636: LD_INT 0
53638: PPUSH
53639: PPUSH
53640: PPUSH
53641: PPUSH
// pom := GetBase ( building ) ;
53642: LD_ADDR_VAR 0 3
53646: PUSH
53647: LD_VAR 0 1
53651: PPUSH
53652: CALL_OW 274
53656: ST_TO_ADDR
// if not pom then
53657: LD_VAR 0 3
53661: NOT
53662: IFFALSE 53666
// exit ;
53664: GO 53836
// btype := GetBType ( building ) ;
53666: LD_ADDR_VAR 0 5
53670: PUSH
53671: LD_VAR 0 1
53675: PPUSH
53676: CALL_OW 266
53680: ST_TO_ADDR
// if btype = b_armoury then
53681: LD_VAR 0 5
53685: PUSH
53686: LD_INT 4
53688: EQUAL
53689: IFFALSE 53699
// btype := b_barracks ;
53691: LD_ADDR_VAR 0 5
53695: PUSH
53696: LD_INT 5
53698: ST_TO_ADDR
// if btype = b_depot then
53699: LD_VAR 0 5
53703: PUSH
53704: LD_INT 0
53706: EQUAL
53707: IFFALSE 53717
// btype := b_warehouse ;
53709: LD_ADDR_VAR 0 5
53713: PUSH
53714: LD_INT 1
53716: ST_TO_ADDR
// if btype = b_workshop then
53717: LD_VAR 0 5
53721: PUSH
53722: LD_INT 2
53724: EQUAL
53725: IFFALSE 53735
// btype := b_factory ;
53727: LD_ADDR_VAR 0 5
53731: PUSH
53732: LD_INT 3
53734: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53735: LD_ADDR_VAR 0 4
53739: PUSH
53740: LD_VAR 0 5
53744: PPUSH
53745: LD_VAR 0 1
53749: PPUSH
53750: CALL_OW 248
53754: PPUSH
53755: CALL_OW 450
53759: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53760: LD_ADDR_VAR 0 2
53764: PUSH
53765: LD_VAR 0 3
53769: PPUSH
53770: LD_INT 1
53772: PPUSH
53773: CALL_OW 275
53777: PUSH
53778: LD_VAR 0 4
53782: PUSH
53783: LD_INT 1
53785: ARRAY
53786: GREATEREQUAL
53787: PUSH
53788: LD_VAR 0 3
53792: PPUSH
53793: LD_INT 2
53795: PPUSH
53796: CALL_OW 275
53800: PUSH
53801: LD_VAR 0 4
53805: PUSH
53806: LD_INT 2
53808: ARRAY
53809: GREATEREQUAL
53810: AND
53811: PUSH
53812: LD_VAR 0 3
53816: PPUSH
53817: LD_INT 3
53819: PPUSH
53820: CALL_OW 275
53824: PUSH
53825: LD_VAR 0 4
53829: PUSH
53830: LD_INT 3
53832: ARRAY
53833: GREATEREQUAL
53834: AND
53835: ST_TO_ADDR
// end ;
53836: LD_VAR 0 2
53840: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53841: LD_INT 0
53843: PPUSH
53844: PPUSH
53845: PPUSH
// pom := GetBase ( building ) ;
53846: LD_ADDR_VAR 0 4
53850: PUSH
53851: LD_VAR 0 1
53855: PPUSH
53856: CALL_OW 274
53860: ST_TO_ADDR
// if not pom then
53861: LD_VAR 0 4
53865: NOT
53866: IFFALSE 53870
// exit ;
53868: GO 53971
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53870: LD_ADDR_VAR 0 5
53874: PUSH
53875: LD_VAR 0 2
53879: PPUSH
53880: LD_VAR 0 1
53884: PPUSH
53885: CALL_OW 248
53889: PPUSH
53890: CALL_OW 450
53894: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53895: LD_ADDR_VAR 0 3
53899: PUSH
53900: LD_VAR 0 4
53904: PPUSH
53905: LD_INT 1
53907: PPUSH
53908: CALL_OW 275
53912: PUSH
53913: LD_VAR 0 5
53917: PUSH
53918: LD_INT 1
53920: ARRAY
53921: GREATEREQUAL
53922: PUSH
53923: LD_VAR 0 4
53927: PPUSH
53928: LD_INT 2
53930: PPUSH
53931: CALL_OW 275
53935: PUSH
53936: LD_VAR 0 5
53940: PUSH
53941: LD_INT 2
53943: ARRAY
53944: GREATEREQUAL
53945: AND
53946: PUSH
53947: LD_VAR 0 4
53951: PPUSH
53952: LD_INT 3
53954: PPUSH
53955: CALL_OW 275
53959: PUSH
53960: LD_VAR 0 5
53964: PUSH
53965: LD_INT 3
53967: ARRAY
53968: GREATEREQUAL
53969: AND
53970: ST_TO_ADDR
// end ;
53971: LD_VAR 0 3
53975: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53976: LD_INT 0
53978: PPUSH
53979: PPUSH
53980: PPUSH
53981: PPUSH
53982: PPUSH
53983: PPUSH
53984: PPUSH
53985: PPUSH
53986: PPUSH
53987: PPUSH
53988: PPUSH
// result := false ;
53989: LD_ADDR_VAR 0 8
53993: PUSH
53994: LD_INT 0
53996: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53997: LD_VAR 0 5
54001: NOT
54002: PUSH
54003: LD_VAR 0 1
54007: NOT
54008: OR
54009: PUSH
54010: LD_VAR 0 2
54014: NOT
54015: OR
54016: PUSH
54017: LD_VAR 0 3
54021: NOT
54022: OR
54023: IFFALSE 54027
// exit ;
54025: GO 54841
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54027: LD_ADDR_VAR 0 14
54031: PUSH
54032: LD_VAR 0 1
54036: PPUSH
54037: LD_VAR 0 2
54041: PPUSH
54042: LD_VAR 0 3
54046: PPUSH
54047: LD_VAR 0 4
54051: PPUSH
54052: LD_VAR 0 5
54056: PUSH
54057: LD_INT 1
54059: ARRAY
54060: PPUSH
54061: CALL_OW 248
54065: PPUSH
54066: LD_INT 0
54068: PPUSH
54069: CALL 56094 0 6
54073: ST_TO_ADDR
// if not hexes then
54074: LD_VAR 0 14
54078: NOT
54079: IFFALSE 54083
// exit ;
54081: GO 54841
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54083: LD_ADDR_VAR 0 17
54087: PUSH
54088: LD_VAR 0 5
54092: PPUSH
54093: LD_INT 22
54095: PUSH
54096: LD_VAR 0 13
54100: PPUSH
54101: CALL_OW 255
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 30
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 30
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: LIST
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PPUSH
54142: CALL_OW 72
54146: ST_TO_ADDR
// for i = 1 to hexes do
54147: LD_ADDR_VAR 0 9
54151: PUSH
54152: DOUBLE
54153: LD_INT 1
54155: DEC
54156: ST_TO_ADDR
54157: LD_VAR 0 14
54161: PUSH
54162: FOR_TO
54163: IFFALSE 54839
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54165: LD_ADDR_VAR 0 13
54169: PUSH
54170: LD_VAR 0 14
54174: PUSH
54175: LD_VAR 0 9
54179: ARRAY
54180: PUSH
54181: LD_INT 1
54183: ARRAY
54184: PPUSH
54185: LD_VAR 0 14
54189: PUSH
54190: LD_VAR 0 9
54194: ARRAY
54195: PUSH
54196: LD_INT 2
54198: ARRAY
54199: PPUSH
54200: CALL_OW 428
54204: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54205: LD_VAR 0 14
54209: PUSH
54210: LD_VAR 0 9
54214: ARRAY
54215: PUSH
54216: LD_INT 1
54218: ARRAY
54219: PPUSH
54220: LD_VAR 0 14
54224: PUSH
54225: LD_VAR 0 9
54229: ARRAY
54230: PUSH
54231: LD_INT 2
54233: ARRAY
54234: PPUSH
54235: CALL_OW 351
54239: PUSH
54240: LD_VAR 0 14
54244: PUSH
54245: LD_VAR 0 9
54249: ARRAY
54250: PUSH
54251: LD_INT 1
54253: ARRAY
54254: PPUSH
54255: LD_VAR 0 14
54259: PUSH
54260: LD_VAR 0 9
54264: ARRAY
54265: PUSH
54266: LD_INT 2
54268: ARRAY
54269: PPUSH
54270: CALL_OW 488
54274: NOT
54275: OR
54276: PUSH
54277: LD_VAR 0 13
54281: PPUSH
54282: CALL_OW 247
54286: PUSH
54287: LD_INT 3
54289: EQUAL
54290: OR
54291: IFFALSE 54297
// exit ;
54293: POP
54294: POP
54295: GO 54841
// if not tmp then
54297: LD_VAR 0 13
54301: NOT
54302: IFFALSE 54306
// continue ;
54304: GO 54162
// result := true ;
54306: LD_ADDR_VAR 0 8
54310: PUSH
54311: LD_INT 1
54313: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54314: LD_VAR 0 6
54318: PUSH
54319: LD_VAR 0 13
54323: PPUSH
54324: CALL_OW 247
54328: PUSH
54329: LD_INT 2
54331: EQUAL
54332: AND
54333: PUSH
54334: LD_VAR 0 13
54338: PPUSH
54339: CALL_OW 263
54343: PUSH
54344: LD_INT 1
54346: EQUAL
54347: AND
54348: IFFALSE 54512
// begin if IsDrivenBy ( tmp ) then
54350: LD_VAR 0 13
54354: PPUSH
54355: CALL_OW 311
54359: IFFALSE 54363
// continue ;
54361: GO 54162
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54363: LD_VAR 0 6
54367: PPUSH
54368: LD_INT 3
54370: PUSH
54371: LD_INT 60
54373: PUSH
54374: EMPTY
54375: LIST
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: LD_INT 55
54386: PUSH
54387: EMPTY
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PPUSH
54398: CALL_OW 72
54402: IFFALSE 54510
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54404: LD_ADDR_VAR 0 18
54408: PUSH
54409: LD_VAR 0 6
54413: PPUSH
54414: LD_INT 3
54416: PUSH
54417: LD_INT 60
54419: PUSH
54420: EMPTY
54421: LIST
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 3
54429: PUSH
54430: LD_INT 55
54432: PUSH
54433: EMPTY
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PPUSH
54444: CALL_OW 72
54448: PUSH
54449: LD_INT 1
54451: ARRAY
54452: ST_TO_ADDR
// if IsInUnit ( driver ) then
54453: LD_VAR 0 18
54457: PPUSH
54458: CALL_OW 310
54462: IFFALSE 54473
// ComExit ( driver ) ;
54464: LD_VAR 0 18
54468: PPUSH
54469: CALL 79895 0 1
// AddComEnterUnit ( driver , tmp ) ;
54473: LD_VAR 0 18
54477: PPUSH
54478: LD_VAR 0 13
54482: PPUSH
54483: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54487: LD_VAR 0 18
54491: PPUSH
54492: LD_VAR 0 7
54496: PPUSH
54497: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54501: LD_VAR 0 18
54505: PPUSH
54506: CALL_OW 181
// end ; continue ;
54510: GO 54162
// end ; if not cleaners or not tmp in cleaners then
54512: LD_VAR 0 6
54516: NOT
54517: PUSH
54518: LD_VAR 0 13
54522: PUSH
54523: LD_VAR 0 6
54527: IN
54528: NOT
54529: OR
54530: IFFALSE 54837
// begin if dep then
54532: LD_VAR 0 17
54536: IFFALSE 54672
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54538: LD_ADDR_VAR 0 16
54542: PUSH
54543: LD_VAR 0 17
54547: PUSH
54548: LD_INT 1
54550: ARRAY
54551: PPUSH
54552: CALL_OW 250
54556: PPUSH
54557: LD_VAR 0 17
54561: PUSH
54562: LD_INT 1
54564: ARRAY
54565: PPUSH
54566: CALL_OW 254
54570: PPUSH
54571: LD_INT 5
54573: PPUSH
54574: CALL_OW 272
54578: PUSH
54579: LD_VAR 0 17
54583: PUSH
54584: LD_INT 1
54586: ARRAY
54587: PPUSH
54588: CALL_OW 251
54592: PPUSH
54593: LD_VAR 0 17
54597: PUSH
54598: LD_INT 1
54600: ARRAY
54601: PPUSH
54602: CALL_OW 254
54606: PPUSH
54607: LD_INT 5
54609: PPUSH
54610: CALL_OW 273
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54619: LD_VAR 0 16
54623: PUSH
54624: LD_INT 1
54626: ARRAY
54627: PPUSH
54628: LD_VAR 0 16
54632: PUSH
54633: LD_INT 2
54635: ARRAY
54636: PPUSH
54637: CALL_OW 488
54641: IFFALSE 54672
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54643: LD_VAR 0 13
54647: PPUSH
54648: LD_VAR 0 16
54652: PUSH
54653: LD_INT 1
54655: ARRAY
54656: PPUSH
54657: LD_VAR 0 16
54661: PUSH
54662: LD_INT 2
54664: ARRAY
54665: PPUSH
54666: CALL_OW 111
// continue ;
54670: GO 54162
// end ; end ; r := GetDir ( tmp ) ;
54672: LD_ADDR_VAR 0 15
54676: PUSH
54677: LD_VAR 0 13
54681: PPUSH
54682: CALL_OW 254
54686: ST_TO_ADDR
// if r = 5 then
54687: LD_VAR 0 15
54691: PUSH
54692: LD_INT 5
54694: EQUAL
54695: IFFALSE 54705
// r := 0 ;
54697: LD_ADDR_VAR 0 15
54701: PUSH
54702: LD_INT 0
54704: ST_TO_ADDR
// for j = r to 5 do
54705: LD_ADDR_VAR 0 10
54709: PUSH
54710: DOUBLE
54711: LD_VAR 0 15
54715: DEC
54716: ST_TO_ADDR
54717: LD_INT 5
54719: PUSH
54720: FOR_TO
54721: IFFALSE 54835
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54723: LD_ADDR_VAR 0 11
54727: PUSH
54728: LD_VAR 0 13
54732: PPUSH
54733: CALL_OW 250
54737: PPUSH
54738: LD_VAR 0 10
54742: PPUSH
54743: LD_INT 2
54745: PPUSH
54746: CALL_OW 272
54750: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54751: LD_ADDR_VAR 0 12
54755: PUSH
54756: LD_VAR 0 13
54760: PPUSH
54761: CALL_OW 251
54765: PPUSH
54766: LD_VAR 0 10
54770: PPUSH
54771: LD_INT 2
54773: PPUSH
54774: CALL_OW 273
54778: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54779: LD_VAR 0 11
54783: PPUSH
54784: LD_VAR 0 12
54788: PPUSH
54789: CALL_OW 488
54793: PUSH
54794: LD_VAR 0 11
54798: PPUSH
54799: LD_VAR 0 12
54803: PPUSH
54804: CALL_OW 428
54808: NOT
54809: AND
54810: IFFALSE 54833
// begin ComMoveXY ( tmp , _x , _y ) ;
54812: LD_VAR 0 13
54816: PPUSH
54817: LD_VAR 0 11
54821: PPUSH
54822: LD_VAR 0 12
54826: PPUSH
54827: CALL_OW 111
// break ;
54831: GO 54835
// end ; end ;
54833: GO 54720
54835: POP
54836: POP
// end ; end ;
54837: GO 54162
54839: POP
54840: POP
// end ;
54841: LD_VAR 0 8
54845: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54846: LD_INT 0
54848: PPUSH
// result := true ;
54849: LD_ADDR_VAR 0 3
54853: PUSH
54854: LD_INT 1
54856: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54857: LD_VAR 0 2
54861: PUSH
54862: LD_INT 24
54864: DOUBLE
54865: EQUAL
54866: IFTRUE 54876
54868: LD_INT 33
54870: DOUBLE
54871: EQUAL
54872: IFTRUE 54876
54874: GO 54901
54876: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54877: LD_ADDR_VAR 0 3
54881: PUSH
54882: LD_INT 32
54884: PPUSH
54885: LD_VAR 0 1
54889: PPUSH
54890: CALL_OW 321
54894: PUSH
54895: LD_INT 2
54897: EQUAL
54898: ST_TO_ADDR
54899: GO 55217
54901: LD_INT 20
54903: DOUBLE
54904: EQUAL
54905: IFTRUE 54909
54907: GO 54934
54909: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54910: LD_ADDR_VAR 0 3
54914: PUSH
54915: LD_INT 6
54917: PPUSH
54918: LD_VAR 0 1
54922: PPUSH
54923: CALL_OW 321
54927: PUSH
54928: LD_INT 2
54930: EQUAL
54931: ST_TO_ADDR
54932: GO 55217
54934: LD_INT 22
54936: DOUBLE
54937: EQUAL
54938: IFTRUE 54948
54940: LD_INT 36
54942: DOUBLE
54943: EQUAL
54944: IFTRUE 54948
54946: GO 54973
54948: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54949: LD_ADDR_VAR 0 3
54953: PUSH
54954: LD_INT 15
54956: PPUSH
54957: LD_VAR 0 1
54961: PPUSH
54962: CALL_OW 321
54966: PUSH
54967: LD_INT 2
54969: EQUAL
54970: ST_TO_ADDR
54971: GO 55217
54973: LD_INT 30
54975: DOUBLE
54976: EQUAL
54977: IFTRUE 54981
54979: GO 55006
54981: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54982: LD_ADDR_VAR 0 3
54986: PUSH
54987: LD_INT 20
54989: PPUSH
54990: LD_VAR 0 1
54994: PPUSH
54995: CALL_OW 321
54999: PUSH
55000: LD_INT 2
55002: EQUAL
55003: ST_TO_ADDR
55004: GO 55217
55006: LD_INT 28
55008: DOUBLE
55009: EQUAL
55010: IFTRUE 55020
55012: LD_INT 21
55014: DOUBLE
55015: EQUAL
55016: IFTRUE 55020
55018: GO 55045
55020: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55021: LD_ADDR_VAR 0 3
55025: PUSH
55026: LD_INT 21
55028: PPUSH
55029: LD_VAR 0 1
55033: PPUSH
55034: CALL_OW 321
55038: PUSH
55039: LD_INT 2
55041: EQUAL
55042: ST_TO_ADDR
55043: GO 55217
55045: LD_INT 16
55047: DOUBLE
55048: EQUAL
55049: IFTRUE 55053
55051: GO 55078
55053: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55054: LD_ADDR_VAR 0 3
55058: PUSH
55059: LD_INT 84
55061: PPUSH
55062: LD_VAR 0 1
55066: PPUSH
55067: CALL_OW 321
55071: PUSH
55072: LD_INT 2
55074: EQUAL
55075: ST_TO_ADDR
55076: GO 55217
55078: LD_INT 19
55080: DOUBLE
55081: EQUAL
55082: IFTRUE 55092
55084: LD_INT 23
55086: DOUBLE
55087: EQUAL
55088: IFTRUE 55092
55090: GO 55117
55092: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55093: LD_ADDR_VAR 0 3
55097: PUSH
55098: LD_INT 83
55100: PPUSH
55101: LD_VAR 0 1
55105: PPUSH
55106: CALL_OW 321
55110: PUSH
55111: LD_INT 2
55113: EQUAL
55114: ST_TO_ADDR
55115: GO 55217
55117: LD_INT 17
55119: DOUBLE
55120: EQUAL
55121: IFTRUE 55125
55123: GO 55150
55125: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55126: LD_ADDR_VAR 0 3
55130: PUSH
55131: LD_INT 39
55133: PPUSH
55134: LD_VAR 0 1
55138: PPUSH
55139: CALL_OW 321
55143: PUSH
55144: LD_INT 2
55146: EQUAL
55147: ST_TO_ADDR
55148: GO 55217
55150: LD_INT 18
55152: DOUBLE
55153: EQUAL
55154: IFTRUE 55158
55156: GO 55183
55158: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55159: LD_ADDR_VAR 0 3
55163: PUSH
55164: LD_INT 40
55166: PPUSH
55167: LD_VAR 0 1
55171: PPUSH
55172: CALL_OW 321
55176: PUSH
55177: LD_INT 2
55179: EQUAL
55180: ST_TO_ADDR
55181: GO 55217
55183: LD_INT 27
55185: DOUBLE
55186: EQUAL
55187: IFTRUE 55191
55189: GO 55216
55191: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55192: LD_ADDR_VAR 0 3
55196: PUSH
55197: LD_INT 35
55199: PPUSH
55200: LD_VAR 0 1
55204: PPUSH
55205: CALL_OW 321
55209: PUSH
55210: LD_INT 2
55212: EQUAL
55213: ST_TO_ADDR
55214: GO 55217
55216: POP
// end ;
55217: LD_VAR 0 3
55221: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55222: LD_INT 0
55224: PPUSH
55225: PPUSH
55226: PPUSH
55227: PPUSH
55228: PPUSH
55229: PPUSH
55230: PPUSH
55231: PPUSH
55232: PPUSH
55233: PPUSH
55234: PPUSH
// result := false ;
55235: LD_ADDR_VAR 0 6
55239: PUSH
55240: LD_INT 0
55242: ST_TO_ADDR
// if btype = b_depot then
55243: LD_VAR 0 2
55247: PUSH
55248: LD_INT 0
55250: EQUAL
55251: IFFALSE 55263
// begin result := true ;
55253: LD_ADDR_VAR 0 6
55257: PUSH
55258: LD_INT 1
55260: ST_TO_ADDR
// exit ;
55261: GO 56089
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55263: LD_VAR 0 1
55267: NOT
55268: PUSH
55269: LD_VAR 0 1
55273: PPUSH
55274: CALL_OW 266
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: IN
55289: NOT
55290: OR
55291: PUSH
55292: LD_VAR 0 2
55296: NOT
55297: OR
55298: PUSH
55299: LD_VAR 0 5
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: LD_INT 4
55318: PUSH
55319: LD_INT 5
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: IN
55330: NOT
55331: OR
55332: PUSH
55333: LD_VAR 0 3
55337: PPUSH
55338: LD_VAR 0 4
55342: PPUSH
55343: CALL_OW 488
55347: NOT
55348: OR
55349: IFFALSE 55353
// exit ;
55351: GO 56089
// side := GetSide ( depot ) ;
55353: LD_ADDR_VAR 0 9
55357: PUSH
55358: LD_VAR 0 1
55362: PPUSH
55363: CALL_OW 255
55367: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55368: LD_VAR 0 9
55372: PPUSH
55373: LD_VAR 0 2
55377: PPUSH
55378: CALL 54846 0 2
55382: NOT
55383: IFFALSE 55387
// exit ;
55385: GO 56089
// pom := GetBase ( depot ) ;
55387: LD_ADDR_VAR 0 10
55391: PUSH
55392: LD_VAR 0 1
55396: PPUSH
55397: CALL_OW 274
55401: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55402: LD_ADDR_VAR 0 11
55406: PUSH
55407: LD_VAR 0 2
55411: PPUSH
55412: LD_VAR 0 1
55416: PPUSH
55417: CALL_OW 248
55421: PPUSH
55422: CALL_OW 450
55426: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55427: LD_VAR 0 10
55431: PPUSH
55432: LD_INT 1
55434: PPUSH
55435: CALL_OW 275
55439: PUSH
55440: LD_VAR 0 11
55444: PUSH
55445: LD_INT 1
55447: ARRAY
55448: GREATEREQUAL
55449: PUSH
55450: LD_VAR 0 10
55454: PPUSH
55455: LD_INT 2
55457: PPUSH
55458: CALL_OW 275
55462: PUSH
55463: LD_VAR 0 11
55467: PUSH
55468: LD_INT 2
55470: ARRAY
55471: GREATEREQUAL
55472: AND
55473: PUSH
55474: LD_VAR 0 10
55478: PPUSH
55479: LD_INT 3
55481: PPUSH
55482: CALL_OW 275
55486: PUSH
55487: LD_VAR 0 11
55491: PUSH
55492: LD_INT 3
55494: ARRAY
55495: GREATEREQUAL
55496: AND
55497: NOT
55498: IFFALSE 55502
// exit ;
55500: GO 56089
// if GetBType ( depot ) = b_depot then
55502: LD_VAR 0 1
55506: PPUSH
55507: CALL_OW 266
55511: PUSH
55512: LD_INT 0
55514: EQUAL
55515: IFFALSE 55527
// dist := 28 else
55517: LD_ADDR_VAR 0 14
55521: PUSH
55522: LD_INT 28
55524: ST_TO_ADDR
55525: GO 55535
// dist := 36 ;
55527: LD_ADDR_VAR 0 14
55531: PUSH
55532: LD_INT 36
55534: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55535: LD_VAR 0 1
55539: PPUSH
55540: LD_VAR 0 3
55544: PPUSH
55545: LD_VAR 0 4
55549: PPUSH
55550: CALL_OW 297
55554: PUSH
55555: LD_VAR 0 14
55559: GREATER
55560: IFFALSE 55564
// exit ;
55562: GO 56089
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55564: LD_ADDR_VAR 0 12
55568: PUSH
55569: LD_VAR 0 2
55573: PPUSH
55574: LD_VAR 0 3
55578: PPUSH
55579: LD_VAR 0 4
55583: PPUSH
55584: LD_VAR 0 5
55588: PPUSH
55589: LD_VAR 0 1
55593: PPUSH
55594: CALL_OW 248
55598: PPUSH
55599: LD_INT 0
55601: PPUSH
55602: CALL 56094 0 6
55606: ST_TO_ADDR
// if not hexes then
55607: LD_VAR 0 12
55611: NOT
55612: IFFALSE 55616
// exit ;
55614: GO 56089
// hex := GetHexInfo ( x , y ) ;
55616: LD_ADDR_VAR 0 15
55620: PUSH
55621: LD_VAR 0 3
55625: PPUSH
55626: LD_VAR 0 4
55630: PPUSH
55631: CALL_OW 546
55635: ST_TO_ADDR
// if hex [ 1 ] then
55636: LD_VAR 0 15
55640: PUSH
55641: LD_INT 1
55643: ARRAY
55644: IFFALSE 55648
// exit ;
55646: GO 56089
// height := hex [ 2 ] ;
55648: LD_ADDR_VAR 0 13
55652: PUSH
55653: LD_VAR 0 15
55657: PUSH
55658: LD_INT 2
55660: ARRAY
55661: ST_TO_ADDR
// for i = 1 to hexes do
55662: LD_ADDR_VAR 0 7
55666: PUSH
55667: DOUBLE
55668: LD_INT 1
55670: DEC
55671: ST_TO_ADDR
55672: LD_VAR 0 12
55676: PUSH
55677: FOR_TO
55678: IFFALSE 56008
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55680: LD_VAR 0 12
55684: PUSH
55685: LD_VAR 0 7
55689: ARRAY
55690: PUSH
55691: LD_INT 1
55693: ARRAY
55694: PPUSH
55695: LD_VAR 0 12
55699: PUSH
55700: LD_VAR 0 7
55704: ARRAY
55705: PUSH
55706: LD_INT 2
55708: ARRAY
55709: PPUSH
55710: CALL_OW 488
55714: NOT
55715: PUSH
55716: LD_VAR 0 12
55720: PUSH
55721: LD_VAR 0 7
55725: ARRAY
55726: PUSH
55727: LD_INT 1
55729: ARRAY
55730: PPUSH
55731: LD_VAR 0 12
55735: PUSH
55736: LD_VAR 0 7
55740: ARRAY
55741: PUSH
55742: LD_INT 2
55744: ARRAY
55745: PPUSH
55746: CALL_OW 428
55750: PUSH
55751: LD_INT 0
55753: GREATER
55754: OR
55755: PUSH
55756: LD_VAR 0 12
55760: PUSH
55761: LD_VAR 0 7
55765: ARRAY
55766: PUSH
55767: LD_INT 1
55769: ARRAY
55770: PPUSH
55771: LD_VAR 0 12
55775: PUSH
55776: LD_VAR 0 7
55780: ARRAY
55781: PUSH
55782: LD_INT 2
55784: ARRAY
55785: PPUSH
55786: CALL_OW 351
55790: OR
55791: IFFALSE 55797
// exit ;
55793: POP
55794: POP
55795: GO 56089
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55797: LD_ADDR_VAR 0 8
55801: PUSH
55802: LD_VAR 0 12
55806: PUSH
55807: LD_VAR 0 7
55811: ARRAY
55812: PUSH
55813: LD_INT 1
55815: ARRAY
55816: PPUSH
55817: LD_VAR 0 12
55821: PUSH
55822: LD_VAR 0 7
55826: ARRAY
55827: PUSH
55828: LD_INT 2
55830: ARRAY
55831: PPUSH
55832: CALL_OW 546
55836: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55837: LD_VAR 0 8
55841: PUSH
55842: LD_INT 1
55844: ARRAY
55845: PUSH
55846: LD_VAR 0 8
55850: PUSH
55851: LD_INT 2
55853: ARRAY
55854: PUSH
55855: LD_VAR 0 13
55859: PUSH
55860: LD_INT 2
55862: PLUS
55863: GREATER
55864: OR
55865: PUSH
55866: LD_VAR 0 8
55870: PUSH
55871: LD_INT 2
55873: ARRAY
55874: PUSH
55875: LD_VAR 0 13
55879: PUSH
55880: LD_INT 2
55882: MINUS
55883: LESS
55884: OR
55885: PUSH
55886: LD_VAR 0 8
55890: PUSH
55891: LD_INT 3
55893: ARRAY
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 8
55900: PUSH
55901: LD_INT 9
55903: PUSH
55904: LD_INT 10
55906: PUSH
55907: LD_INT 11
55909: PUSH
55910: LD_INT 12
55912: PUSH
55913: LD_INT 13
55915: PUSH
55916: LD_INT 16
55918: PUSH
55919: LD_INT 17
55921: PUSH
55922: LD_INT 18
55924: PUSH
55925: LD_INT 19
55927: PUSH
55928: LD_INT 20
55930: PUSH
55931: LD_INT 21
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: IN
55949: NOT
55950: OR
55951: PUSH
55952: LD_VAR 0 8
55956: PUSH
55957: LD_INT 5
55959: ARRAY
55960: NOT
55961: OR
55962: PUSH
55963: LD_VAR 0 8
55967: PUSH
55968: LD_INT 6
55970: ARRAY
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: LD_INT 7
55980: PUSH
55981: LD_INT 9
55983: PUSH
55984: LD_INT 10
55986: PUSH
55987: LD_INT 11
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: IN
55998: NOT
55999: OR
56000: IFFALSE 56006
// exit ;
56002: POP
56003: POP
56004: GO 56089
// end ;
56006: GO 55677
56008: POP
56009: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56010: LD_VAR 0 9
56014: PPUSH
56015: LD_VAR 0 3
56019: PPUSH
56020: LD_VAR 0 4
56024: PPUSH
56025: LD_INT 20
56027: PPUSH
56028: CALL 48012 0 4
56032: PUSH
56033: LD_INT 4
56035: ARRAY
56036: IFFALSE 56040
// exit ;
56038: GO 56089
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56040: LD_VAR 0 2
56044: PUSH
56045: LD_INT 29
56047: PUSH
56048: LD_INT 30
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: IN
56055: PUSH
56056: LD_VAR 0 3
56060: PPUSH
56061: LD_VAR 0 4
56065: PPUSH
56066: LD_VAR 0 9
56070: PPUSH
56071: CALL_OW 440
56075: NOT
56076: AND
56077: IFFALSE 56081
// exit ;
56079: GO 56089
// result := true ;
56081: LD_ADDR_VAR 0 6
56085: PUSH
56086: LD_INT 1
56088: ST_TO_ADDR
// end ;
56089: LD_VAR 0 6
56093: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56094: LD_INT 0
56096: PPUSH
56097: PPUSH
56098: PPUSH
56099: PPUSH
56100: PPUSH
56101: PPUSH
56102: PPUSH
56103: PPUSH
56104: PPUSH
56105: PPUSH
56106: PPUSH
56107: PPUSH
56108: PPUSH
56109: PPUSH
56110: PPUSH
56111: PPUSH
56112: PPUSH
56113: PPUSH
56114: PPUSH
56115: PPUSH
56116: PPUSH
56117: PPUSH
56118: PPUSH
56119: PPUSH
56120: PPUSH
56121: PPUSH
56122: PPUSH
56123: PPUSH
56124: PPUSH
56125: PPUSH
56126: PPUSH
56127: PPUSH
56128: PPUSH
56129: PPUSH
56130: PPUSH
56131: PPUSH
56132: PPUSH
56133: PPUSH
56134: PPUSH
56135: PPUSH
56136: PPUSH
56137: PPUSH
56138: PPUSH
56139: PPUSH
56140: PPUSH
56141: PPUSH
56142: PPUSH
56143: PPUSH
56144: PPUSH
56145: PPUSH
56146: PPUSH
56147: PPUSH
56148: PPUSH
56149: PPUSH
56150: PPUSH
56151: PPUSH
56152: PPUSH
56153: PPUSH
// result = [ ] ;
56154: LD_ADDR_VAR 0 7
56158: PUSH
56159: EMPTY
56160: ST_TO_ADDR
// temp_list = [ ] ;
56161: LD_ADDR_VAR 0 9
56165: PUSH
56166: EMPTY
56167: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56168: LD_VAR 0 4
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: LD_INT 4
56187: PUSH
56188: LD_INT 5
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: IN
56199: NOT
56200: PUSH
56201: LD_VAR 0 1
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: IN
56216: PUSH
56217: LD_VAR 0 5
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: LD_INT 3
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: LIST
56235: IN
56236: NOT
56237: AND
56238: OR
56239: IFFALSE 56243
// exit ;
56241: GO 74634
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56243: LD_VAR 0 1
56247: PUSH
56248: LD_INT 6
56250: PUSH
56251: LD_INT 7
56253: PUSH
56254: LD_INT 8
56256: PUSH
56257: LD_INT 13
56259: PUSH
56260: LD_INT 12
56262: PUSH
56263: LD_INT 15
56265: PUSH
56266: LD_INT 11
56268: PUSH
56269: LD_INT 14
56271: PUSH
56272: LD_INT 10
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: IN
56286: IFFALSE 56296
// btype = b_lab ;
56288: LD_ADDR_VAR 0 1
56292: PUSH
56293: LD_INT 6
56295: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56296: LD_VAR 0 6
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: IN
56315: NOT
56316: PUSH
56317: LD_VAR 0 1
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: LD_INT 6
56336: PUSH
56337: LD_INT 36
56339: PUSH
56340: LD_INT 4
56342: PUSH
56343: LD_INT 5
56345: PUSH
56346: LD_INT 31
56348: PUSH
56349: LD_INT 32
56351: PUSH
56352: LD_INT 33
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: IN
56368: NOT
56369: PUSH
56370: LD_VAR 0 6
56374: PUSH
56375: LD_INT 1
56377: EQUAL
56378: AND
56379: OR
56380: PUSH
56381: LD_VAR 0 1
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: IN
56396: NOT
56397: PUSH
56398: LD_VAR 0 6
56402: PUSH
56403: LD_INT 2
56405: EQUAL
56406: AND
56407: OR
56408: IFFALSE 56418
// mode = 0 ;
56410: LD_ADDR_VAR 0 6
56414: PUSH
56415: LD_INT 0
56417: ST_TO_ADDR
// case mode of 0 :
56418: LD_VAR 0 6
56422: PUSH
56423: LD_INT 0
56425: DOUBLE
56426: EQUAL
56427: IFTRUE 56431
56429: GO 67884
56431: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56432: LD_ADDR_VAR 0 11
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 3
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56625: LD_ADDR_VAR 0 12
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 2
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56821: LD_ADDR_VAR 0 13
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57020: LD_ADDR_VAR 0 14
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 3
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57216: LD_ADDR_VAR 0 15
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: NEG
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 3
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57409: LD_ADDR_VAR 0 16
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: LD_INT 2
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 3
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57602: LD_ADDR_VAR 0 17
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 2
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: NEG
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57832: LD_ADDR_VAR 0 18
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 2
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58062: LD_ADDR_VAR 0 19
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: LD_INT 2
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58292: LD_ADDR_VAR 0 20
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58522: LD_ADDR_VAR 0 21
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58752: LD_ADDR_VAR 0 22
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58982: LD_ADDR_VAR 0 23
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: NEG
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59262: LD_ADDR_VAR 0 24
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 3
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 3
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59538: LD_ADDR_VAR 0 25
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59812: LD_ADDR_VAR 0 26
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 2
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 2
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: NEG
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60088: LD_ADDR_VAR 0 27
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: LD_INT 1
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: NEG
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 3
60333: NEG
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60368: LD_ADDR_VAR 0 28
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 2
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 2
60579: NEG
60580: PUSH
60581: LD_INT 3
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 3
60615: NEG
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60650: LD_ADDR_VAR 0 29
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 2
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: NEG
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 3
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 3
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 3
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 3
60894: NEG
60895: PUSH
60896: LD_INT 2
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60929: LD_ADDR_VAR 0 30
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: LD_INT 3
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 3
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: LD_INT 3
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 3
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61207: LD_ADDR_VAR 0 31
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 2
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: LD_INT 2
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 2
61372: NEG
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 2
61384: NEG
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 2
61396: NEG
61397: PUSH
61398: LD_INT 3
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: LD_INT 1
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: LD_INT 3
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61485: LD_ADDR_VAR 0 32
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: LD_INT 2
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 2
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 3
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 3
61728: NEG
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61763: LD_ADDR_VAR 0 33
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 2
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: NEG
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: LD_INT 2
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: LD_INT 3
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 2
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: LD_INT 3
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62042: LD_ADDR_VAR 0 34
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 2
62198: NEG
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 2
62209: NEG
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: LD_INT 2
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: LD_INT 3
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 3
62287: NEG
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62322: LD_ADDR_VAR 0 35
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 2
62413: NEG
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62434: LD_ADDR_VAR 0 36
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: NEG
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: LD_INT 2
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62546: LD_ADDR_VAR 0 37
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62658: LD_ADDR_VAR 0 38
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62770: LD_ADDR_VAR 0 39
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: LD_INT 1
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: LD_INT 2
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62882: LD_ADDR_VAR 0 40
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: LD_INT 1
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62994: LD_ADDR_VAR 0 41
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: LD_INT 2
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: LD_INT 2
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 2
63160: NEG
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: LD_INT 2
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 2
63184: NEG
63185: PUSH
63186: LD_INT 3
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 3
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 3
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 3
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 3
63237: PUSH
63238: LD_INT 3
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 2
63247: PUSH
63248: LD_INT 3
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 3
63268: NEG
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 3
63279: NEG
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 3
63291: NEG
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 3
63303: NEG
63304: PUSH
63305: LD_INT 3
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63344: LD_ADDR_VAR 0 42
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: LD_INT 2
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: LD_INT 1
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: LD_INT 2
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: LD_INT 2
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: LD_INT 2
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 2
63510: NEG
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 2
63534: NEG
63535: PUSH
63536: LD_INT 3
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: LD_INT 3
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: LD_INT 2
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 3
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: LD_INT 3
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: LD_INT 3
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: LD_INT 3
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: LD_INT 2
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 3
63641: NEG
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 3
63653: NEG
63654: PUSH
63655: LD_INT 3
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63694: LD_ADDR_VAR 0 43
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: LD_INT 2
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: LD_INT 2
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 2
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 2
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 2
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: PUSH
63885: LD_INT 3
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 3
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: LD_INT 2
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 2
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 3
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 3
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: LD_INT 3
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 3
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 2
63979: NEG
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 3
63990: NEG
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 3
64001: NEG
64002: PUSH
64003: LD_INT 1
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64042: LD_ADDR_VAR 0 44
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: LD_INT 1
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 1
64111: NEG
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 2
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 2
64156: PUSH
64157: LD_INT 1
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: LD_INT 2
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 2
64197: NEG
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 2
64208: NEG
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 2
64220: NEG
64221: PUSH
64222: LD_INT 2
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 2
64232: NEG
64233: PUSH
64234: LD_INT 3
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 3
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 3
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 3
64285: PUSH
64286: LD_INT 3
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: LD_INT 3
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: LD_INT 1
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 3
64339: NEG
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 3
64351: NEG
64352: PUSH
64353: LD_INT 3
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64392: LD_ADDR_VAR 0 45
64396: PUSH
64397: LD_INT 0
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: LD_INT 1
64465: NEG
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: LD_INT 2
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: LD_INT 2
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: LD_INT 1
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: LD_INT 2
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 2
64558: NEG
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 2
64570: NEG
64571: PUSH
64572: LD_INT 2
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 2
64582: NEG
64583: PUSH
64584: LD_INT 3
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: LD_INT 3
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: LD_INT 3
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: LD_INT 2
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 3
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 3
64638: PUSH
64639: LD_INT 3
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 2
64648: PUSH
64649: LD_INT 3
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 0
64668: PUSH
64669: LD_INT 3
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 3
64689: NEG
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: LD_INT 3
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64742: LD_ADDR_VAR 0 46
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: LD_INT 1
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: LD_INT 2
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: LD_INT 2
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: LD_INT 2
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 2
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 2
64919: NEG
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 3
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 3
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 1
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 2
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 3
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 3
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: LD_INT 3
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: LD_INT 3
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: NEG
65017: PUSH
65018: LD_INT 2
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 2
65027: NEG
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 3
65038: NEG
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 3
65049: NEG
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65090: LD_ADDR_VAR 0 47
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 1
65148: NEG
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 1
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: LD_INT 2
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 1
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PUSH
65219: LD_INT 2
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65241: LD_ADDR_VAR 0 48
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 1
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: LD_INT 1
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: NEG
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 1
65310: NEG
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: NEG
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: LD_INT 2
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 2
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65388: LD_ADDR_VAR 0 49
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: LD_INT 0
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 1
65457: NEG
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 2
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65532: LD_ADDR_VAR 0 50
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: LD_INT 1
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 2
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 2
65623: PUSH
65624: LD_INT 2
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: PUSH
65634: LD_INT 2
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: LD_INT 2
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 1
65653: NEG
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65676: LD_ADDR_VAR 0 51
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 1
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 1
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 1
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: LD_INT 2
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 1
65777: NEG
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 2
65788: NEG
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: LD_INT 1
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65823: LD_ADDR_VAR 0 52
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: LD_INT 1
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 1
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 0
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: LD_INT 0
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 1
65892: NEG
65893: PUSH
65894: LD_INT 1
65896: NEG
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: LD_INT 2
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 1
65916: NEG
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 2
65927: NEG
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 2
65938: NEG
65939: PUSH
65940: LD_INT 1
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: LD_INT 2
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65974: LD_ADDR_VAR 0 53
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: LD_INT 1
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 1
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 0
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 1
66032: NEG
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: LD_INT 1
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: LD_INT 2
66059: NEG
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: LD_INT 2
66070: NEG
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 1
66078: PUSH
66079: LD_INT 1
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 2
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: PUSH
66100: LD_INT 1
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 2
66109: PUSH
66110: LD_INT 2
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: LD_INT 2
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 2
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: NEG
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 2
66150: NEG
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 2
66161: NEG
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 2
66173: NEG
66174: PUSH
66175: LD_INT 2
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66204: LD_ADDR_VAR 0 54
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_INT 1
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: PUSH
66275: LD_INT 1
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: LD_INT 2
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: LD_INT 2
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 1
66308: PUSH
66309: LD_INT 1
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 2
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 2
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 2
66339: PUSH
66340: LD_INT 2
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 1
66349: PUSH
66350: LD_INT 2
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 2
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: LD_INT 1
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 2
66380: NEG
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 2
66391: NEG
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 2
66403: NEG
66404: PUSH
66405: LD_INT 2
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66434: LD_ADDR_VAR 0 55
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: LD_INT 1
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 1
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 0
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 1
66492: NEG
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: NEG
66516: PUSH
66517: LD_INT 2
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: LD_INT 2
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 2
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 2
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 2
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: LD_INT 2
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: LD_INT 2
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: NEG
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 2
66621: NEG
66622: PUSH
66623: LD_INT 1
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 2
66633: NEG
66634: PUSH
66635: LD_INT 2
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66664: LD_ADDR_VAR 0 56
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 0
66681: PUSH
66682: LD_INT 1
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 1
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 1
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: LD_INT 1
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 1
66722: NEG
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 1
66733: NEG
66734: PUSH
66735: LD_INT 1
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 1
66745: NEG
66746: PUSH
66747: LD_INT 2
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 1
66768: PUSH
66769: LD_INT 1
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 2
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 2
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: LD_INT 2
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: PUSH
66810: LD_INT 2
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 0
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: NEG
66830: PUSH
66831: LD_INT 1
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: NEG
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 2
66851: NEG
66852: PUSH
66853: LD_INT 1
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 2
66863: NEG
66864: PUSH
66865: LD_INT 2
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66894: LD_ADDR_VAR 0 57
66898: PUSH
66899: LD_INT 0
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: LD_INT 1
66914: NEG
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 1
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 1
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 1
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 1
66963: NEG
66964: PUSH
66965: LD_INT 1
66967: NEG
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 1
66975: NEG
66976: PUSH
66977: LD_INT 2
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: LD_INT 2
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 1
66998: PUSH
66999: LD_INT 1
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 2
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 2
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 2
67029: PUSH
67030: LD_INT 2
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 1
67039: PUSH
67040: LD_INT 2
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: LD_INT 2
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 1
67059: NEG
67060: PUSH
67061: LD_INT 1
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 2
67070: NEG
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 2
67081: NEG
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 2
67093: NEG
67094: PUSH
67095: LD_INT 2
67097: NEG
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67124: LD_ADDR_VAR 0 58
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 0
67141: PUSH
67142: LD_INT 1
67144: NEG
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 1
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 0
67172: PUSH
67173: LD_INT 1
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: LD_INT 1
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 1
67205: NEG
67206: PUSH
67207: LD_INT 2
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: LD_INT 2
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 1
67228: PUSH
67229: LD_INT 1
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 2
67239: PUSH
67240: LD_INT 0
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 2
67249: PUSH
67250: LD_INT 1
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 2
67259: PUSH
67260: LD_INT 2
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 1
67269: PUSH
67270: LD_INT 2
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: LD_INT 2
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 1
67289: NEG
67290: PUSH
67291: LD_INT 1
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 2
67300: NEG
67301: PUSH
67302: LD_INT 0
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 2
67311: NEG
67312: PUSH
67313: LD_INT 1
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67354: LD_ADDR_VAR 0 59
67358: PUSH
67359: LD_INT 0
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 1
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: NEG
67424: PUSH
67425: LD_INT 1
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67442: LD_ADDR_VAR 0 60
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 0
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 1
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: LD_INT 1
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 1
67500: NEG
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 1
67511: NEG
67512: PUSH
67513: LD_INT 1
67515: NEG
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67530: LD_ADDR_VAR 0 61
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: LD_INT 0
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 0
67547: PUSH
67548: LD_INT 1
67550: NEG
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 1
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 1
67568: PUSH
67569: LD_INT 1
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 0
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 1
67588: NEG
67589: PUSH
67590: LD_INT 0
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 1
67599: NEG
67600: PUSH
67601: LD_INT 1
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67618: LD_ADDR_VAR 0 62
67622: PUSH
67623: LD_INT 0
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 0
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 1
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: LD_INT 1
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 0
67666: PUSH
67667: LD_INT 1
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 1
67676: NEG
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 1
67687: NEG
67688: PUSH
67689: LD_INT 1
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67706: LD_ADDR_VAR 0 63
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 0
67723: PUSH
67724: LD_INT 1
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 1
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 1
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 0
67754: PUSH
67755: LD_INT 1
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 1
67764: NEG
67765: PUSH
67766: LD_INT 0
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: NEG
67776: PUSH
67777: LD_INT 1
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67794: LD_ADDR_VAR 0 64
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 1
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 1
67832: PUSH
67833: LD_INT 1
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: LD_INT 1
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 1
67852: NEG
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 1
67863: NEG
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: ST_TO_ADDR
// end ; 1 :
67882: GO 73779
67884: LD_INT 1
67886: DOUBLE
67887: EQUAL
67888: IFTRUE 67892
67890: GO 70515
67892: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67893: LD_ADDR_VAR 0 11
67897: PUSH
67898: LD_INT 1
67900: NEG
67901: PUSH
67902: LD_INT 3
67904: NEG
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 1
67923: PUSH
67924: LD_INT 2
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: LIST
67936: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67937: LD_ADDR_VAR 0 12
67941: PUSH
67942: LD_INT 2
67944: PUSH
67945: LD_INT 1
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 3
67955: PUSH
67956: LD_INT 0
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 3
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: LIST
67977: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67978: LD_ADDR_VAR 0 13
67982: PUSH
67983: LD_INT 3
67985: PUSH
67986: LD_INT 2
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 3
67995: PUSH
67996: LD_INT 3
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 2
68005: PUSH
68006: LD_INT 3
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: LIST
68017: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68018: LD_ADDR_VAR 0 14
68022: PUSH
68023: LD_INT 1
68025: PUSH
68026: LD_INT 3
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 1
68045: NEG
68046: PUSH
68047: LD_INT 2
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: LIST
68058: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68059: LD_ADDR_VAR 0 15
68063: PUSH
68064: LD_INT 2
68066: NEG
68067: PUSH
68068: LD_INT 1
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 3
68077: NEG
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: LD_INT 1
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: LIST
68102: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68103: LD_ADDR_VAR 0 16
68107: PUSH
68108: LD_INT 2
68110: NEG
68111: PUSH
68112: LD_INT 3
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 3
68122: NEG
68123: PUSH
68124: LD_INT 2
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 3
68134: NEG
68135: PUSH
68136: LD_INT 3
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: LIST
68148: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68149: LD_ADDR_VAR 0 17
68153: PUSH
68154: LD_INT 1
68156: NEG
68157: PUSH
68158: LD_INT 3
68160: NEG
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_INT 3
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 1
68179: PUSH
68180: LD_INT 2
68182: NEG
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: LIST
68192: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68193: LD_ADDR_VAR 0 18
68197: PUSH
68198: LD_INT 2
68200: PUSH
68201: LD_INT 1
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 3
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 3
68221: PUSH
68222: LD_INT 1
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: LIST
68233: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68234: LD_ADDR_VAR 0 19
68238: PUSH
68239: LD_INT 3
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 3
68251: PUSH
68252: LD_INT 3
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 2
68261: PUSH
68262: LD_INT 3
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: LIST
68273: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68274: LD_ADDR_VAR 0 20
68278: PUSH
68279: LD_INT 1
68281: PUSH
68282: LD_INT 3
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 0
68291: PUSH
68292: LD_INT 3
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 1
68301: NEG
68302: PUSH
68303: LD_INT 2
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: LIST
68314: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68315: LD_ADDR_VAR 0 21
68319: PUSH
68320: LD_INT 2
68322: NEG
68323: PUSH
68324: LD_INT 1
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 3
68333: NEG
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 3
68344: NEG
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: LIST
68358: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68359: LD_ADDR_VAR 0 22
68363: PUSH
68364: LD_INT 2
68366: NEG
68367: PUSH
68368: LD_INT 3
68370: NEG
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 3
68378: NEG
68379: PUSH
68380: LD_INT 2
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: LD_INT 3
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: LIST
68404: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68405: LD_ADDR_VAR 0 23
68409: PUSH
68410: LD_INT 0
68412: PUSH
68413: LD_INT 3
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 1
68423: NEG
68424: PUSH
68425: LD_INT 4
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 1
68435: PUSH
68436: LD_INT 3
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: LIST
68448: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68449: LD_ADDR_VAR 0 24
68453: PUSH
68454: LD_INT 3
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 3
68466: PUSH
68467: LD_INT 1
68469: NEG
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 4
68477: PUSH
68478: LD_INT 1
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: LIST
68489: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68490: LD_ADDR_VAR 0 25
68494: PUSH
68495: LD_INT 3
68497: PUSH
68498: LD_INT 3
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 4
68507: PUSH
68508: LD_INT 3
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 3
68517: PUSH
68518: LD_INT 4
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: LIST
68529: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68530: LD_ADDR_VAR 0 26
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: LD_INT 3
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: LD_INT 4
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 1
68557: NEG
68558: PUSH
68559: LD_INT 3
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: LIST
68570: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68571: LD_ADDR_VAR 0 27
68575: PUSH
68576: LD_INT 3
68578: NEG
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 3
68589: NEG
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 4
68600: NEG
68601: PUSH
68602: LD_INT 1
68604: NEG
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: LIST
68614: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68615: LD_ADDR_VAR 0 28
68619: PUSH
68620: LD_INT 3
68622: NEG
68623: PUSH
68624: LD_INT 3
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 3
68634: NEG
68635: PUSH
68636: LD_INT 4
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 4
68646: NEG
68647: PUSH
68648: LD_INT 3
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: LIST
68660: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68661: LD_ADDR_VAR 0 29
68665: PUSH
68666: LD_INT 1
68668: NEG
68669: PUSH
68670: LD_INT 3
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: LD_INT 3
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 1
68691: PUSH
68692: LD_INT 2
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 1
68702: NEG
68703: PUSH
68704: LD_INT 4
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: LD_INT 4
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: LD_INT 3
68728: NEG
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 1
68736: NEG
68737: PUSH
68738: LD_INT 5
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 0
68748: PUSH
68749: LD_INT 5
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: LD_INT 4
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 1
68770: NEG
68771: PUSH
68772: LD_INT 6
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_INT 6
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 1
68793: PUSH
68794: LD_INT 5
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68816: LD_ADDR_VAR 0 30
68820: PUSH
68821: LD_INT 2
68823: PUSH
68824: LD_INT 1
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 3
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: PUSH
68845: LD_INT 1
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 3
68854: PUSH
68855: LD_INT 1
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 4
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 4
68875: PUSH
68876: LD_INT 1
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 4
68885: PUSH
68886: LD_INT 1
68888: NEG
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 5
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 5
68906: PUSH
68907: LD_INT 1
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 5
68916: PUSH
68917: LD_INT 1
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 6
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 6
68937: PUSH
68938: LD_INT 1
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68959: LD_ADDR_VAR 0 31
68963: PUSH
68964: LD_INT 3
68966: PUSH
68967: LD_INT 2
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 3
68976: PUSH
68977: LD_INT 3
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 2
68986: PUSH
68987: LD_INT 3
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 4
68996: PUSH
68997: LD_INT 3
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 4
69006: PUSH
69007: LD_INT 4
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 3
69016: PUSH
69017: LD_INT 4
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 5
69026: PUSH
69027: LD_INT 4
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 5
69036: PUSH
69037: LD_INT 5
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 4
69046: PUSH
69047: LD_INT 5
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 6
69056: PUSH
69057: LD_INT 5
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 6
69066: PUSH
69067: LD_INT 6
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 5
69076: PUSH
69077: LD_INT 6
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69098: LD_ADDR_VAR 0 32
69102: PUSH
69103: LD_INT 1
69105: PUSH
69106: LD_INT 3
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 0
69115: PUSH
69116: LD_INT 3
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 1
69125: NEG
69126: PUSH
69127: LD_INT 2
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 1
69136: PUSH
69137: LD_INT 4
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 0
69146: PUSH
69147: LD_INT 4
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 1
69156: NEG
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 1
69167: PUSH
69168: LD_INT 5
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: LD_INT 5
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 1
69187: NEG
69188: PUSH
69189: LD_INT 4
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 1
69198: PUSH
69199: LD_INT 6
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: LD_INT 6
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 1
69218: NEG
69219: PUSH
69220: LD_INT 5
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69241: LD_ADDR_VAR 0 33
69245: PUSH
69246: LD_INT 2
69248: NEG
69249: PUSH
69250: LD_INT 1
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 3
69259: NEG
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 3
69270: NEG
69271: PUSH
69272: LD_INT 1
69274: NEG
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 3
69282: NEG
69283: PUSH
69284: LD_INT 1
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 4
69293: NEG
69294: PUSH
69295: LD_INT 0
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 4
69304: NEG
69305: PUSH
69306: LD_INT 1
69308: NEG
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 4
69316: NEG
69317: PUSH
69318: LD_INT 1
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 5
69327: NEG
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 5
69338: NEG
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 5
69350: NEG
69351: PUSH
69352: LD_INT 1
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 6
69361: NEG
69362: PUSH
69363: LD_INT 0
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 6
69372: NEG
69373: PUSH
69374: LD_INT 1
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69396: LD_ADDR_VAR 0 34
69400: PUSH
69401: LD_INT 2
69403: NEG
69404: PUSH
69405: LD_INT 3
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 3
69415: NEG
69416: PUSH
69417: LD_INT 2
69419: NEG
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 3
69427: NEG
69428: PUSH
69429: LD_INT 3
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 3
69439: NEG
69440: PUSH
69441: LD_INT 4
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 4
69451: NEG
69452: PUSH
69453: LD_INT 3
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 4
69463: NEG
69464: PUSH
69465: LD_INT 4
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 4
69475: NEG
69476: PUSH
69477: LD_INT 5
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 5
69487: NEG
69488: PUSH
69489: LD_INT 4
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 5
69499: NEG
69500: PUSH
69501: LD_INT 5
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 5
69511: NEG
69512: PUSH
69513: LD_INT 6
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 6
69523: NEG
69524: PUSH
69525: LD_INT 5
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 6
69535: NEG
69536: PUSH
69537: LD_INT 6
69539: NEG
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69559: LD_ADDR_VAR 0 41
69563: PUSH
69564: LD_INT 0
69566: PUSH
69567: LD_INT 2
69569: NEG
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 1
69577: NEG
69578: PUSH
69579: LD_INT 3
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 1
69589: PUSH
69590: LD_INT 2
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: LIST
69602: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69603: LD_ADDR_VAR 0 42
69607: PUSH
69608: LD_INT 2
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 2
69620: PUSH
69621: LD_INT 1
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 3
69631: PUSH
69632: LD_INT 1
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: LIST
69643: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69644: LD_ADDR_VAR 0 43
69648: PUSH
69649: LD_INT 2
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 3
69661: PUSH
69662: LD_INT 2
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 2
69671: PUSH
69672: LD_INT 3
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: LIST
69683: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69684: LD_ADDR_VAR 0 44
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: LD_INT 2
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 1
69701: PUSH
69702: LD_INT 3
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 1
69711: NEG
69712: PUSH
69713: LD_INT 2
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: LIST
69724: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69725: LD_ADDR_VAR 0 45
69729: PUSH
69730: LD_INT 2
69732: NEG
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 2
69743: NEG
69744: PUSH
69745: LD_INT 1
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 3
69754: NEG
69755: PUSH
69756: LD_INT 1
69758: NEG
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69769: LD_ADDR_VAR 0 46
69773: PUSH
69774: LD_INT 2
69776: NEG
69777: PUSH
69778: LD_INT 2
69780: NEG
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 2
69788: NEG
69789: PUSH
69790: LD_INT 3
69792: NEG
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 3
69800: NEG
69801: PUSH
69802: LD_INT 2
69804: NEG
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: LIST
69814: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69815: LD_ADDR_VAR 0 47
69819: PUSH
69820: LD_INT 2
69822: NEG
69823: PUSH
69824: LD_INT 3
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 1
69834: NEG
69835: PUSH
69836: LD_INT 3
69838: NEG
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69848: LD_ADDR_VAR 0 48
69852: PUSH
69853: LD_INT 1
69855: PUSH
69856: LD_INT 2
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 2
69866: PUSH
69867: LD_INT 1
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69879: LD_ADDR_VAR 0 49
69883: PUSH
69884: LD_INT 3
69886: PUSH
69887: LD_INT 1
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 3
69896: PUSH
69897: LD_INT 2
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69908: LD_ADDR_VAR 0 50
69912: PUSH
69913: LD_INT 2
69915: PUSH
69916: LD_INT 3
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 1
69925: PUSH
69926: LD_INT 3
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69937: LD_ADDR_VAR 0 51
69941: PUSH
69942: LD_INT 1
69944: NEG
69945: PUSH
69946: LD_INT 2
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 2
69955: NEG
69956: PUSH
69957: LD_INT 1
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69968: LD_ADDR_VAR 0 52
69972: PUSH
69973: LD_INT 3
69975: NEG
69976: PUSH
69977: LD_INT 1
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 3
69987: NEG
69988: PUSH
69989: LD_INT 2
69991: NEG
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70001: LD_ADDR_VAR 0 53
70005: PUSH
70006: LD_INT 1
70008: NEG
70009: PUSH
70010: LD_INT 3
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: LD_INT 3
70023: NEG
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 1
70031: PUSH
70032: LD_INT 2
70034: NEG
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: LIST
70044: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70045: LD_ADDR_VAR 0 54
70049: PUSH
70050: LD_INT 2
70052: PUSH
70053: LD_INT 1
70055: NEG
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: LD_INT 0
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 3
70073: PUSH
70074: LD_INT 1
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: LIST
70085: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70086: LD_ADDR_VAR 0 55
70090: PUSH
70091: LD_INT 3
70093: PUSH
70094: LD_INT 2
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 3
70103: PUSH
70104: LD_INT 3
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 2
70113: PUSH
70114: LD_INT 3
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: LIST
70125: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70126: LD_ADDR_VAR 0 56
70130: PUSH
70131: LD_INT 1
70133: PUSH
70134: LD_INT 3
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: LD_INT 3
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 1
70153: NEG
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: LIST
70166: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70167: LD_ADDR_VAR 0 57
70171: PUSH
70172: LD_INT 2
70174: NEG
70175: PUSH
70176: LD_INT 1
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 3
70185: NEG
70186: PUSH
70187: LD_INT 0
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 3
70196: NEG
70197: PUSH
70198: LD_INT 1
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: LIST
70210: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70211: LD_ADDR_VAR 0 58
70215: PUSH
70216: LD_INT 2
70218: NEG
70219: PUSH
70220: LD_INT 3
70222: NEG
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 3
70230: NEG
70231: PUSH
70232: LD_INT 2
70234: NEG
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 3
70242: NEG
70243: PUSH
70244: LD_INT 3
70246: NEG
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: LIST
70256: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70257: LD_ADDR_VAR 0 59
70261: PUSH
70262: LD_INT 1
70264: NEG
70265: PUSH
70266: LD_INT 2
70268: NEG
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 0
70276: PUSH
70277: LD_INT 2
70279: NEG
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 1
70287: PUSH
70288: LD_INT 1
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: LIST
70300: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70301: LD_ADDR_VAR 0 60
70305: PUSH
70306: LD_INT 1
70308: PUSH
70309: LD_INT 1
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 2
70319: PUSH
70320: LD_INT 0
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 2
70329: PUSH
70330: LD_INT 1
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: LIST
70341: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70342: LD_ADDR_VAR 0 61
70346: PUSH
70347: LD_INT 2
70349: PUSH
70350: LD_INT 1
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 2
70359: PUSH
70360: LD_INT 2
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 1
70369: PUSH
70370: LD_INT 2
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: LIST
70381: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70382: LD_ADDR_VAR 0 62
70386: PUSH
70387: LD_INT 1
70389: PUSH
70390: LD_INT 2
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 0
70399: PUSH
70400: LD_INT 2
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 1
70409: NEG
70410: PUSH
70411: LD_INT 1
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: LIST
70422: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70423: LD_ADDR_VAR 0 63
70427: PUSH
70428: LD_INT 1
70430: NEG
70431: PUSH
70432: LD_INT 1
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 2
70441: NEG
70442: PUSH
70443: LD_INT 0
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 2
70452: NEG
70453: PUSH
70454: LD_INT 1
70456: NEG
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: LIST
70466: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70467: LD_ADDR_VAR 0 64
70471: PUSH
70472: LD_INT 1
70474: NEG
70475: PUSH
70476: LD_INT 2
70478: NEG
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 2
70486: NEG
70487: PUSH
70488: LD_INT 1
70490: NEG
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 2
70498: NEG
70499: PUSH
70500: LD_INT 2
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: ST_TO_ADDR
// end ; 2 :
70513: GO 73779
70515: LD_INT 2
70517: DOUBLE
70518: EQUAL
70519: IFTRUE 70523
70521: GO 73778
70523: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70524: LD_ADDR_VAR 0 29
70528: PUSH
70529: LD_INT 4
70531: PUSH
70532: LD_INT 0
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 4
70541: PUSH
70542: LD_INT 1
70544: NEG
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 5
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 5
70562: PUSH
70563: LD_INT 1
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 4
70572: PUSH
70573: LD_INT 1
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 3
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 3
70592: PUSH
70593: LD_INT 1
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 3
70603: PUSH
70604: LD_INT 2
70606: NEG
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 5
70614: PUSH
70615: LD_INT 2
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 3
70624: PUSH
70625: LD_INT 3
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 3
70634: PUSH
70635: LD_INT 2
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 4
70644: PUSH
70645: LD_INT 3
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 4
70654: PUSH
70655: LD_INT 4
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 3
70664: PUSH
70665: LD_INT 4
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 2
70674: PUSH
70675: LD_INT 3
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 2
70684: PUSH
70685: LD_INT 2
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 4
70694: PUSH
70695: LD_INT 2
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 2
70704: PUSH
70705: LD_INT 4
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 0
70714: PUSH
70715: LD_INT 4
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 0
70724: PUSH
70725: LD_INT 3
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 1
70734: PUSH
70735: LD_INT 4
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 1
70744: PUSH
70745: LD_INT 5
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 0
70754: PUSH
70755: LD_INT 5
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 1
70764: NEG
70765: PUSH
70766: LD_INT 4
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 1
70775: NEG
70776: PUSH
70777: LD_INT 3
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 2
70786: PUSH
70787: LD_INT 5
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 2
70796: NEG
70797: PUSH
70798: LD_INT 3
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 3
70807: NEG
70808: PUSH
70809: LD_INT 0
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 3
70818: NEG
70819: PUSH
70820: LD_INT 1
70822: NEG
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 2
70830: NEG
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 2
70841: NEG
70842: PUSH
70843: LD_INT 1
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 3
70852: NEG
70853: PUSH
70854: LD_INT 1
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 4
70863: NEG
70864: PUSH
70865: LD_INT 0
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 4
70874: NEG
70875: PUSH
70876: LD_INT 1
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 4
70886: NEG
70887: PUSH
70888: LD_INT 2
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 2
70898: NEG
70899: PUSH
70900: LD_INT 2
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 4
70909: NEG
70910: PUSH
70911: LD_INT 4
70913: NEG
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 4
70921: NEG
70922: PUSH
70923: LD_INT 5
70925: NEG
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 3
70933: NEG
70934: PUSH
70935: LD_INT 4
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 3
70945: NEG
70946: PUSH
70947: LD_INT 3
70949: NEG
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 4
70957: NEG
70958: PUSH
70959: LD_INT 3
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 5
70969: NEG
70970: PUSH
70971: LD_INT 4
70973: NEG
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 5
70981: NEG
70982: PUSH
70983: LD_INT 5
70985: NEG
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 3
70993: NEG
70994: PUSH
70995: LD_INT 5
70997: NEG
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 5
71005: NEG
71006: PUSH
71007: LD_INT 3
71009: NEG
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71062: LD_ADDR_VAR 0 30
71066: PUSH
71067: LD_INT 4
71069: PUSH
71070: LD_INT 4
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 4
71079: PUSH
71080: LD_INT 3
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 5
71089: PUSH
71090: LD_INT 4
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 5
71099: PUSH
71100: LD_INT 5
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 4
71109: PUSH
71110: LD_INT 5
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 3
71119: PUSH
71120: LD_INT 4
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 3
71129: PUSH
71130: LD_INT 3
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 5
71139: PUSH
71140: LD_INT 3
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 3
71149: PUSH
71150: LD_INT 5
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 0
71159: PUSH
71160: LD_INT 3
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 0
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 1
71179: PUSH
71180: LD_INT 3
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 1
71189: PUSH
71190: LD_INT 4
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: LD_INT 4
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 1
71209: NEG
71210: PUSH
71211: LD_INT 3
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 1
71220: NEG
71221: PUSH
71222: LD_INT 2
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 2
71231: PUSH
71232: LD_INT 4
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 2
71241: NEG
71242: PUSH
71243: LD_INT 2
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 4
71252: NEG
71253: PUSH
71254: LD_INT 0
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 4
71263: NEG
71264: PUSH
71265: LD_INT 1
71267: NEG
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: LD_INT 3
71275: NEG
71276: PUSH
71277: LD_INT 0
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 3
71286: NEG
71287: PUSH
71288: LD_INT 1
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 4
71297: NEG
71298: PUSH
71299: LD_INT 1
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 5
71308: NEG
71309: PUSH
71310: LD_INT 0
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 5
71319: NEG
71320: PUSH
71321: LD_INT 1
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 5
71331: NEG
71332: PUSH
71333: LD_INT 2
71335: NEG
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 3
71343: NEG
71344: PUSH
71345: LD_INT 2
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 3
71354: NEG
71355: PUSH
71356: LD_INT 3
71358: NEG
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 3
71366: NEG
71367: PUSH
71368: LD_INT 4
71370: NEG
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 2
71378: NEG
71379: PUSH
71380: LD_INT 3
71382: NEG
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 2
71390: NEG
71391: PUSH
71392: LD_INT 2
71394: NEG
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 3
71402: NEG
71403: PUSH
71404: LD_INT 2
71406: NEG
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 4
71414: NEG
71415: PUSH
71416: LD_INT 3
71418: NEG
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 4
71426: NEG
71427: PUSH
71428: LD_INT 4
71430: NEG
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 2
71438: NEG
71439: PUSH
71440: LD_INT 4
71442: NEG
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 4
71450: NEG
71451: PUSH
71452: LD_INT 2
71454: NEG
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 0
71462: PUSH
71463: LD_INT 4
71465: NEG
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 0
71473: PUSH
71474: LD_INT 5
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 1
71484: PUSH
71485: LD_INT 4
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 1
71495: PUSH
71496: LD_INT 3
71498: NEG
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 0
71506: PUSH
71507: LD_INT 3
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 1
71517: NEG
71518: PUSH
71519: LD_INT 4
71521: NEG
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 1
71529: NEG
71530: PUSH
71531: LD_INT 5
71533: NEG
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 2
71541: PUSH
71542: LD_INT 3
71544: NEG
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 2
71552: NEG
71553: PUSH
71554: LD_INT 5
71556: NEG
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71609: LD_ADDR_VAR 0 31
71613: PUSH
71614: LD_INT 0
71616: PUSH
71617: LD_INT 4
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 0
71626: PUSH
71627: LD_INT 3
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 1
71636: PUSH
71637: LD_INT 4
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 1
71646: PUSH
71647: LD_INT 5
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 0
71656: PUSH
71657: LD_INT 5
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 1
71666: NEG
71667: PUSH
71668: LD_INT 4
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 1
71677: NEG
71678: PUSH
71679: LD_INT 3
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 2
71688: PUSH
71689: LD_INT 5
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 2
71698: NEG
71699: PUSH
71700: LD_INT 3
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 3
71709: NEG
71710: PUSH
71711: LD_INT 0
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 3
71720: NEG
71721: PUSH
71722: LD_INT 1
71724: NEG
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 2
71732: NEG
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 2
71743: NEG
71744: PUSH
71745: LD_INT 1
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 3
71754: NEG
71755: PUSH
71756: LD_INT 1
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 4
71765: NEG
71766: PUSH
71767: LD_INT 0
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 4
71776: NEG
71777: PUSH
71778: LD_INT 1
71780: NEG
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 4
71788: NEG
71789: PUSH
71790: LD_INT 2
71792: NEG
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 2
71800: NEG
71801: PUSH
71802: LD_INT 2
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 4
71811: NEG
71812: PUSH
71813: LD_INT 4
71815: NEG
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 4
71823: NEG
71824: PUSH
71825: LD_INT 5
71827: NEG
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: LD_INT 3
71835: NEG
71836: PUSH
71837: LD_INT 4
71839: NEG
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 3
71847: NEG
71848: PUSH
71849: LD_INT 3
71851: NEG
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 4
71859: NEG
71860: PUSH
71861: LD_INT 3
71863: NEG
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 5
71871: NEG
71872: PUSH
71873: LD_INT 4
71875: NEG
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 5
71883: NEG
71884: PUSH
71885: LD_INT 5
71887: NEG
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 3
71895: NEG
71896: PUSH
71897: LD_INT 5
71899: NEG
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 5
71907: NEG
71908: PUSH
71909: LD_INT 3
71911: NEG
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 0
71919: PUSH
71920: LD_INT 3
71922: NEG
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 0
71930: PUSH
71931: LD_INT 4
71933: NEG
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 1
71941: PUSH
71942: LD_INT 3
71944: NEG
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 1
71952: PUSH
71953: LD_INT 2
71955: NEG
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: LD_INT 2
71966: NEG
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 1
71974: NEG
71975: PUSH
71976: LD_INT 3
71978: NEG
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: LD_INT 1
71986: NEG
71987: PUSH
71988: LD_INT 4
71990: NEG
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 2
71998: PUSH
71999: LD_INT 2
72001: NEG
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 2
72009: NEG
72010: PUSH
72011: LD_INT 4
72013: NEG
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 4
72021: PUSH
72022: LD_INT 0
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 4
72031: PUSH
72032: LD_INT 1
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 5
72042: PUSH
72043: LD_INT 0
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 5
72052: PUSH
72053: LD_INT 1
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_INT 4
72062: PUSH
72063: LD_INT 1
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 3
72072: PUSH
72073: LD_INT 0
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 3
72082: PUSH
72083: LD_INT 1
72085: NEG
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 3
72093: PUSH
72094: LD_INT 2
72096: NEG
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 5
72104: PUSH
72105: LD_INT 2
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72159: LD_ADDR_VAR 0 32
72163: PUSH
72164: LD_INT 4
72166: NEG
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 4
72177: NEG
72178: PUSH
72179: LD_INT 1
72181: NEG
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 3
72189: NEG
72190: PUSH
72191: LD_INT 0
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 3
72200: NEG
72201: PUSH
72202: LD_INT 1
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 4
72211: NEG
72212: PUSH
72213: LD_INT 1
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 5
72222: NEG
72223: PUSH
72224: LD_INT 0
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 5
72233: NEG
72234: PUSH
72235: LD_INT 1
72237: NEG
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 5
72245: NEG
72246: PUSH
72247: LD_INT 2
72249: NEG
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 3
72257: NEG
72258: PUSH
72259: LD_INT 2
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 3
72268: NEG
72269: PUSH
72270: LD_INT 3
72272: NEG
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 3
72280: NEG
72281: PUSH
72282: LD_INT 4
72284: NEG
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 2
72292: NEG
72293: PUSH
72294: LD_INT 3
72296: NEG
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 2
72304: NEG
72305: PUSH
72306: LD_INT 2
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 3
72316: NEG
72317: PUSH
72318: LD_INT 2
72320: NEG
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 4
72328: NEG
72329: PUSH
72330: LD_INT 3
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 4
72340: NEG
72341: PUSH
72342: LD_INT 4
72344: NEG
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 2
72352: NEG
72353: PUSH
72354: LD_INT 4
72356: NEG
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 4
72364: NEG
72365: PUSH
72366: LD_INT 2
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 0
72376: PUSH
72377: LD_INT 4
72379: NEG
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 0
72387: PUSH
72388: LD_INT 5
72390: NEG
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 1
72398: PUSH
72399: LD_INT 4
72401: NEG
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 1
72409: PUSH
72410: LD_INT 3
72412: NEG
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 0
72420: PUSH
72421: LD_INT 3
72423: NEG
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 1
72431: NEG
72432: PUSH
72433: LD_INT 4
72435: NEG
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 1
72443: NEG
72444: PUSH
72445: LD_INT 5
72447: NEG
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 2
72455: PUSH
72456: LD_INT 3
72458: NEG
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 2
72466: NEG
72467: PUSH
72468: LD_INT 5
72470: NEG
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 3
72478: PUSH
72479: LD_INT 0
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 3
72488: PUSH
72489: LD_INT 1
72491: NEG
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 4
72499: PUSH
72500: LD_INT 0
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 4
72509: PUSH
72510: LD_INT 1
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 3
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 2
72529: PUSH
72530: LD_INT 0
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 2
72539: PUSH
72540: LD_INT 1
72542: NEG
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 2
72550: PUSH
72551: LD_INT 2
72553: NEG
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 4
72561: PUSH
72562: LD_INT 2
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 4
72571: PUSH
72572: LD_INT 4
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 4
72581: PUSH
72582: LD_INT 3
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 5
72591: PUSH
72592: LD_INT 4
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 5
72601: PUSH
72602: LD_INT 5
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 4
72611: PUSH
72612: LD_INT 5
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_INT 3
72621: PUSH
72622: LD_INT 4
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 3
72631: PUSH
72632: LD_INT 3
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 5
72641: PUSH
72642: LD_INT 3
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 3
72651: PUSH
72652: LD_INT 5
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72706: LD_ADDR_VAR 0 33
72710: PUSH
72711: LD_INT 4
72713: NEG
72714: PUSH
72715: LD_INT 4
72717: NEG
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 4
72725: NEG
72726: PUSH
72727: LD_INT 5
72729: NEG
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 3
72737: NEG
72738: PUSH
72739: LD_INT 4
72741: NEG
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 3
72749: NEG
72750: PUSH
72751: LD_INT 3
72753: NEG
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 4
72761: NEG
72762: PUSH
72763: LD_INT 3
72765: NEG
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 5
72773: NEG
72774: PUSH
72775: LD_INT 4
72777: NEG
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 5
72785: NEG
72786: PUSH
72787: LD_INT 5
72789: NEG
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 3
72797: NEG
72798: PUSH
72799: LD_INT 5
72801: NEG
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 5
72809: NEG
72810: PUSH
72811: LD_INT 3
72813: NEG
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 0
72821: PUSH
72822: LD_INT 3
72824: NEG
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 0
72832: PUSH
72833: LD_INT 4
72835: NEG
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 1
72843: PUSH
72844: LD_INT 3
72846: NEG
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 1
72854: PUSH
72855: LD_INT 2
72857: NEG
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 0
72865: PUSH
72866: LD_INT 2
72868: NEG
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: LD_INT 1
72876: NEG
72877: PUSH
72878: LD_INT 3
72880: NEG
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 1
72888: NEG
72889: PUSH
72890: LD_INT 4
72892: NEG
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PUSH
72898: LD_INT 2
72900: PUSH
72901: LD_INT 2
72903: NEG
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 2
72911: NEG
72912: PUSH
72913: LD_INT 4
72915: NEG
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 4
72923: PUSH
72924: LD_INT 0
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 4
72933: PUSH
72934: LD_INT 1
72936: NEG
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 5
72944: PUSH
72945: LD_INT 0
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: LD_INT 5
72954: PUSH
72955: LD_INT 1
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: PUSH
72962: LD_INT 4
72964: PUSH
72965: LD_INT 1
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 3
72974: PUSH
72975: LD_INT 0
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 3
72984: PUSH
72985: LD_INT 1
72987: NEG
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 3
72995: PUSH
72996: LD_INT 2
72998: NEG
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 5
73006: PUSH
73007: LD_INT 2
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 3
73016: PUSH
73017: LD_INT 3
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PUSH
73024: LD_INT 3
73026: PUSH
73027: LD_INT 2
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: PUSH
73034: LD_INT 4
73036: PUSH
73037: LD_INT 3
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_INT 4
73046: PUSH
73047: LD_INT 4
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 3
73056: PUSH
73057: LD_INT 4
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 2
73066: PUSH
73067: LD_INT 3
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 2
73076: PUSH
73077: LD_INT 2
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 4
73086: PUSH
73087: LD_INT 2
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: LD_INT 2
73096: PUSH
73097: LD_INT 4
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: LD_INT 0
73106: PUSH
73107: LD_INT 4
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 0
73116: PUSH
73117: LD_INT 3
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 1
73126: PUSH
73127: LD_INT 4
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 1
73136: PUSH
73137: LD_INT 5
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 0
73146: PUSH
73147: LD_INT 5
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 1
73156: NEG
73157: PUSH
73158: LD_INT 4
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 1
73167: NEG
73168: PUSH
73169: LD_INT 3
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_INT 2
73178: PUSH
73179: LD_INT 5
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: LD_INT 2
73188: NEG
73189: PUSH
73190: LD_INT 3
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73244: LD_ADDR_VAR 0 34
73248: PUSH
73249: LD_INT 0
73251: PUSH
73252: LD_INT 4
73254: NEG
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 0
73262: PUSH
73263: LD_INT 5
73265: NEG
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 1
73273: PUSH
73274: LD_INT 4
73276: NEG
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 1
73284: PUSH
73285: LD_INT 3
73287: NEG
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 0
73295: PUSH
73296: LD_INT 3
73298: NEG
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 1
73306: NEG
73307: PUSH
73308: LD_INT 4
73310: NEG
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 1
73318: NEG
73319: PUSH
73320: LD_INT 5
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 2
73330: PUSH
73331: LD_INT 3
73333: NEG
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 2
73341: NEG
73342: PUSH
73343: LD_INT 5
73345: NEG
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 3
73353: PUSH
73354: LD_INT 0
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 3
73363: PUSH
73364: LD_INT 1
73366: NEG
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PUSH
73372: LD_INT 4
73374: PUSH
73375: LD_INT 0
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: PUSH
73382: LD_INT 4
73384: PUSH
73385: LD_INT 1
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 3
73394: PUSH
73395: LD_INT 1
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 2
73404: PUSH
73405: LD_INT 0
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 2
73414: PUSH
73415: LD_INT 1
73417: NEG
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 2
73425: PUSH
73426: LD_INT 2
73428: NEG
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 4
73436: PUSH
73437: LD_INT 2
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 4
73446: PUSH
73447: LD_INT 4
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: LD_INT 4
73456: PUSH
73457: LD_INT 3
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 5
73466: PUSH
73467: LD_INT 4
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 5
73476: PUSH
73477: LD_INT 5
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 4
73486: PUSH
73487: LD_INT 5
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 3
73496: PUSH
73497: LD_INT 4
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 3
73506: PUSH
73507: LD_INT 3
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 5
73516: PUSH
73517: LD_INT 3
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 3
73526: PUSH
73527: LD_INT 5
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 0
73536: PUSH
73537: LD_INT 3
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 0
73546: PUSH
73547: LD_INT 2
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 1
73556: PUSH
73557: LD_INT 3
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 1
73566: PUSH
73567: LD_INT 4
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 0
73576: PUSH
73577: LD_INT 4
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 1
73586: NEG
73587: PUSH
73588: LD_INT 3
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 1
73597: NEG
73598: PUSH
73599: LD_INT 2
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: PUSH
73606: LD_INT 2
73608: PUSH
73609: LD_INT 4
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 2
73618: NEG
73619: PUSH
73620: LD_INT 2
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 4
73629: NEG
73630: PUSH
73631: LD_INT 0
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 4
73640: NEG
73641: PUSH
73642: LD_INT 1
73644: NEG
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 3
73652: NEG
73653: PUSH
73654: LD_INT 0
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PUSH
73661: LD_INT 3
73663: NEG
73664: PUSH
73665: LD_INT 1
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: LD_INT 4
73674: NEG
73675: PUSH
73676: LD_INT 1
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 5
73685: NEG
73686: PUSH
73687: LD_INT 0
73689: PUSH
73690: EMPTY
73691: LIST
73692: LIST
73693: PUSH
73694: LD_INT 5
73696: NEG
73697: PUSH
73698: LD_INT 1
73700: NEG
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 5
73708: NEG
73709: PUSH
73710: LD_INT 2
73712: NEG
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 3
73720: NEG
73721: PUSH
73722: LD_INT 2
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: ST_TO_ADDR
// end ; end ;
73776: GO 73779
73778: POP
// case btype of b_depot , b_warehouse :
73779: LD_VAR 0 1
73783: PUSH
73784: LD_INT 0
73786: DOUBLE
73787: EQUAL
73788: IFTRUE 73798
73790: LD_INT 1
73792: DOUBLE
73793: EQUAL
73794: IFTRUE 73798
73796: GO 73999
73798: POP
// case nation of nation_american :
73799: LD_VAR 0 5
73803: PUSH
73804: LD_INT 1
73806: DOUBLE
73807: EQUAL
73808: IFTRUE 73812
73810: GO 73868
73812: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73813: LD_ADDR_VAR 0 9
73817: PUSH
73818: LD_VAR 0 11
73822: PUSH
73823: LD_VAR 0 12
73827: PUSH
73828: LD_VAR 0 13
73832: PUSH
73833: LD_VAR 0 14
73837: PUSH
73838: LD_VAR 0 15
73842: PUSH
73843: LD_VAR 0 16
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: PUSH
73856: LD_VAR 0 4
73860: PUSH
73861: LD_INT 1
73863: PLUS
73864: ARRAY
73865: ST_TO_ADDR
73866: GO 73997
73868: LD_INT 2
73870: DOUBLE
73871: EQUAL
73872: IFTRUE 73876
73874: GO 73932
73876: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73877: LD_ADDR_VAR 0 9
73881: PUSH
73882: LD_VAR 0 17
73886: PUSH
73887: LD_VAR 0 18
73891: PUSH
73892: LD_VAR 0 19
73896: PUSH
73897: LD_VAR 0 20
73901: PUSH
73902: LD_VAR 0 21
73906: PUSH
73907: LD_VAR 0 22
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: PUSH
73920: LD_VAR 0 4
73924: PUSH
73925: LD_INT 1
73927: PLUS
73928: ARRAY
73929: ST_TO_ADDR
73930: GO 73997
73932: LD_INT 3
73934: DOUBLE
73935: EQUAL
73936: IFTRUE 73940
73938: GO 73996
73940: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73941: LD_ADDR_VAR 0 9
73945: PUSH
73946: LD_VAR 0 23
73950: PUSH
73951: LD_VAR 0 24
73955: PUSH
73956: LD_VAR 0 25
73960: PUSH
73961: LD_VAR 0 26
73965: PUSH
73966: LD_VAR 0 27
73970: PUSH
73971: LD_VAR 0 28
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: PUSH
73984: LD_VAR 0 4
73988: PUSH
73989: LD_INT 1
73991: PLUS
73992: ARRAY
73993: ST_TO_ADDR
73994: GO 73997
73996: POP
73997: GO 74552
73999: LD_INT 2
74001: DOUBLE
74002: EQUAL
74003: IFTRUE 74013
74005: LD_INT 3
74007: DOUBLE
74008: EQUAL
74009: IFTRUE 74013
74011: GO 74069
74013: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74014: LD_ADDR_VAR 0 9
74018: PUSH
74019: LD_VAR 0 29
74023: PUSH
74024: LD_VAR 0 30
74028: PUSH
74029: LD_VAR 0 31
74033: PUSH
74034: LD_VAR 0 32
74038: PUSH
74039: LD_VAR 0 33
74043: PUSH
74044: LD_VAR 0 34
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: LIST
74053: LIST
74054: LIST
74055: LIST
74056: PUSH
74057: LD_VAR 0 4
74061: PUSH
74062: LD_INT 1
74064: PLUS
74065: ARRAY
74066: ST_TO_ADDR
74067: GO 74552
74069: LD_INT 16
74071: DOUBLE
74072: EQUAL
74073: IFTRUE 74131
74075: LD_INT 17
74077: DOUBLE
74078: EQUAL
74079: IFTRUE 74131
74081: LD_INT 18
74083: DOUBLE
74084: EQUAL
74085: IFTRUE 74131
74087: LD_INT 19
74089: DOUBLE
74090: EQUAL
74091: IFTRUE 74131
74093: LD_INT 22
74095: DOUBLE
74096: EQUAL
74097: IFTRUE 74131
74099: LD_INT 20
74101: DOUBLE
74102: EQUAL
74103: IFTRUE 74131
74105: LD_INT 21
74107: DOUBLE
74108: EQUAL
74109: IFTRUE 74131
74111: LD_INT 23
74113: DOUBLE
74114: EQUAL
74115: IFTRUE 74131
74117: LD_INT 24
74119: DOUBLE
74120: EQUAL
74121: IFTRUE 74131
74123: LD_INT 25
74125: DOUBLE
74126: EQUAL
74127: IFTRUE 74131
74129: GO 74187
74131: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74132: LD_ADDR_VAR 0 9
74136: PUSH
74137: LD_VAR 0 35
74141: PUSH
74142: LD_VAR 0 36
74146: PUSH
74147: LD_VAR 0 37
74151: PUSH
74152: LD_VAR 0 38
74156: PUSH
74157: LD_VAR 0 39
74161: PUSH
74162: LD_VAR 0 40
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: LIST
74171: LIST
74172: LIST
74173: LIST
74174: PUSH
74175: LD_VAR 0 4
74179: PUSH
74180: LD_INT 1
74182: PLUS
74183: ARRAY
74184: ST_TO_ADDR
74185: GO 74552
74187: LD_INT 6
74189: DOUBLE
74190: EQUAL
74191: IFTRUE 74243
74193: LD_INT 7
74195: DOUBLE
74196: EQUAL
74197: IFTRUE 74243
74199: LD_INT 8
74201: DOUBLE
74202: EQUAL
74203: IFTRUE 74243
74205: LD_INT 13
74207: DOUBLE
74208: EQUAL
74209: IFTRUE 74243
74211: LD_INT 12
74213: DOUBLE
74214: EQUAL
74215: IFTRUE 74243
74217: LD_INT 15
74219: DOUBLE
74220: EQUAL
74221: IFTRUE 74243
74223: LD_INT 11
74225: DOUBLE
74226: EQUAL
74227: IFTRUE 74243
74229: LD_INT 14
74231: DOUBLE
74232: EQUAL
74233: IFTRUE 74243
74235: LD_INT 10
74237: DOUBLE
74238: EQUAL
74239: IFTRUE 74243
74241: GO 74299
74243: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74244: LD_ADDR_VAR 0 9
74248: PUSH
74249: LD_VAR 0 41
74253: PUSH
74254: LD_VAR 0 42
74258: PUSH
74259: LD_VAR 0 43
74263: PUSH
74264: LD_VAR 0 44
74268: PUSH
74269: LD_VAR 0 45
74273: PUSH
74274: LD_VAR 0 46
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: PUSH
74287: LD_VAR 0 4
74291: PUSH
74292: LD_INT 1
74294: PLUS
74295: ARRAY
74296: ST_TO_ADDR
74297: GO 74552
74299: LD_INT 36
74301: DOUBLE
74302: EQUAL
74303: IFTRUE 74307
74305: GO 74363
74307: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74308: LD_ADDR_VAR 0 9
74312: PUSH
74313: LD_VAR 0 47
74317: PUSH
74318: LD_VAR 0 48
74322: PUSH
74323: LD_VAR 0 49
74327: PUSH
74328: LD_VAR 0 50
74332: PUSH
74333: LD_VAR 0 51
74337: PUSH
74338: LD_VAR 0 52
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: PUSH
74351: LD_VAR 0 4
74355: PUSH
74356: LD_INT 1
74358: PLUS
74359: ARRAY
74360: ST_TO_ADDR
74361: GO 74552
74363: LD_INT 4
74365: DOUBLE
74366: EQUAL
74367: IFTRUE 74389
74369: LD_INT 5
74371: DOUBLE
74372: EQUAL
74373: IFTRUE 74389
74375: LD_INT 34
74377: DOUBLE
74378: EQUAL
74379: IFTRUE 74389
74381: LD_INT 37
74383: DOUBLE
74384: EQUAL
74385: IFTRUE 74389
74387: GO 74445
74389: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74390: LD_ADDR_VAR 0 9
74394: PUSH
74395: LD_VAR 0 53
74399: PUSH
74400: LD_VAR 0 54
74404: PUSH
74405: LD_VAR 0 55
74409: PUSH
74410: LD_VAR 0 56
74414: PUSH
74415: LD_VAR 0 57
74419: PUSH
74420: LD_VAR 0 58
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: PUSH
74433: LD_VAR 0 4
74437: PUSH
74438: LD_INT 1
74440: PLUS
74441: ARRAY
74442: ST_TO_ADDR
74443: GO 74552
74445: LD_INT 31
74447: DOUBLE
74448: EQUAL
74449: IFTRUE 74495
74451: LD_INT 32
74453: DOUBLE
74454: EQUAL
74455: IFTRUE 74495
74457: LD_INT 33
74459: DOUBLE
74460: EQUAL
74461: IFTRUE 74495
74463: LD_INT 27
74465: DOUBLE
74466: EQUAL
74467: IFTRUE 74495
74469: LD_INT 26
74471: DOUBLE
74472: EQUAL
74473: IFTRUE 74495
74475: LD_INT 28
74477: DOUBLE
74478: EQUAL
74479: IFTRUE 74495
74481: LD_INT 29
74483: DOUBLE
74484: EQUAL
74485: IFTRUE 74495
74487: LD_INT 30
74489: DOUBLE
74490: EQUAL
74491: IFTRUE 74495
74493: GO 74551
74495: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74496: LD_ADDR_VAR 0 9
74500: PUSH
74501: LD_VAR 0 59
74505: PUSH
74506: LD_VAR 0 60
74510: PUSH
74511: LD_VAR 0 61
74515: PUSH
74516: LD_VAR 0 62
74520: PUSH
74521: LD_VAR 0 63
74525: PUSH
74526: LD_VAR 0 64
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: PUSH
74539: LD_VAR 0 4
74543: PUSH
74544: LD_INT 1
74546: PLUS
74547: ARRAY
74548: ST_TO_ADDR
74549: GO 74552
74551: POP
// temp_list2 = [ ] ;
74552: LD_ADDR_VAR 0 10
74556: PUSH
74557: EMPTY
74558: ST_TO_ADDR
// for i in temp_list do
74559: LD_ADDR_VAR 0 8
74563: PUSH
74564: LD_VAR 0 9
74568: PUSH
74569: FOR_IN
74570: IFFALSE 74622
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74572: LD_ADDR_VAR 0 10
74576: PUSH
74577: LD_VAR 0 10
74581: PUSH
74582: LD_VAR 0 8
74586: PUSH
74587: LD_INT 1
74589: ARRAY
74590: PUSH
74591: LD_VAR 0 2
74595: PLUS
74596: PUSH
74597: LD_VAR 0 8
74601: PUSH
74602: LD_INT 2
74604: ARRAY
74605: PUSH
74606: LD_VAR 0 3
74610: PLUS
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PUSH
74616: EMPTY
74617: LIST
74618: ADD
74619: ST_TO_ADDR
74620: GO 74569
74622: POP
74623: POP
// result = temp_list2 ;
74624: LD_ADDR_VAR 0 7
74628: PUSH
74629: LD_VAR 0 10
74633: ST_TO_ADDR
// end ;
74634: LD_VAR 0 7
74638: RET
// export function EnemyInRange ( unit , dist ) ; begin
74639: LD_INT 0
74641: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74642: LD_ADDR_VAR 0 3
74646: PUSH
74647: LD_VAR 0 1
74651: PPUSH
74652: CALL_OW 255
74656: PPUSH
74657: LD_VAR 0 1
74661: PPUSH
74662: CALL_OW 250
74666: PPUSH
74667: LD_VAR 0 1
74671: PPUSH
74672: CALL_OW 251
74676: PPUSH
74677: LD_VAR 0 2
74681: PPUSH
74682: CALL 48012 0 4
74686: PUSH
74687: LD_INT 4
74689: ARRAY
74690: ST_TO_ADDR
// end ;
74691: LD_VAR 0 3
74695: RET
// export function PlayerSeeMe ( unit ) ; begin
74696: LD_INT 0
74698: PPUSH
// result := See ( your_side , unit ) ;
74699: LD_ADDR_VAR 0 2
74703: PUSH
74704: LD_OWVAR 2
74708: PPUSH
74709: LD_VAR 0 1
74713: PPUSH
74714: CALL_OW 292
74718: ST_TO_ADDR
// end ;
74719: LD_VAR 0 2
74723: RET
// export function ReverseDir ( unit ) ; begin
74724: LD_INT 0
74726: PPUSH
// if not unit then
74727: LD_VAR 0 1
74731: NOT
74732: IFFALSE 74736
// exit ;
74734: GO 74759
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74736: LD_ADDR_VAR 0 2
74740: PUSH
74741: LD_VAR 0 1
74745: PPUSH
74746: CALL_OW 254
74750: PUSH
74751: LD_INT 3
74753: PLUS
74754: PUSH
74755: LD_INT 6
74757: MOD
74758: ST_TO_ADDR
// end ;
74759: LD_VAR 0 2
74763: RET
// export function ReverseArray ( array ) ; var i ; begin
74764: LD_INT 0
74766: PPUSH
74767: PPUSH
// if not array then
74768: LD_VAR 0 1
74772: NOT
74773: IFFALSE 74777
// exit ;
74775: GO 74832
// result := [ ] ;
74777: LD_ADDR_VAR 0 2
74781: PUSH
74782: EMPTY
74783: ST_TO_ADDR
// for i := array downto 1 do
74784: LD_ADDR_VAR 0 3
74788: PUSH
74789: DOUBLE
74790: LD_VAR 0 1
74794: INC
74795: ST_TO_ADDR
74796: LD_INT 1
74798: PUSH
74799: FOR_DOWNTO
74800: IFFALSE 74830
// result := Join ( result , array [ i ] ) ;
74802: LD_ADDR_VAR 0 2
74806: PUSH
74807: LD_VAR 0 2
74811: PPUSH
74812: LD_VAR 0 1
74816: PUSH
74817: LD_VAR 0 3
74821: ARRAY
74822: PPUSH
74823: CALL 79497 0 2
74827: ST_TO_ADDR
74828: GO 74799
74830: POP
74831: POP
// end ;
74832: LD_VAR 0 2
74836: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74837: LD_INT 0
74839: PPUSH
74840: PPUSH
74841: PPUSH
74842: PPUSH
74843: PPUSH
74844: PPUSH
// if not unit or not hexes then
74845: LD_VAR 0 1
74849: NOT
74850: PUSH
74851: LD_VAR 0 2
74855: NOT
74856: OR
74857: IFFALSE 74861
// exit ;
74859: GO 74984
// dist := 9999 ;
74861: LD_ADDR_VAR 0 5
74865: PUSH
74866: LD_INT 9999
74868: ST_TO_ADDR
// for i = 1 to hexes do
74869: LD_ADDR_VAR 0 4
74873: PUSH
74874: DOUBLE
74875: LD_INT 1
74877: DEC
74878: ST_TO_ADDR
74879: LD_VAR 0 2
74883: PUSH
74884: FOR_TO
74885: IFFALSE 74972
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74887: LD_ADDR_VAR 0 6
74891: PUSH
74892: LD_VAR 0 1
74896: PPUSH
74897: LD_VAR 0 2
74901: PUSH
74902: LD_VAR 0 4
74906: ARRAY
74907: PUSH
74908: LD_INT 1
74910: ARRAY
74911: PPUSH
74912: LD_VAR 0 2
74916: PUSH
74917: LD_VAR 0 4
74921: ARRAY
74922: PUSH
74923: LD_INT 2
74925: ARRAY
74926: PPUSH
74927: CALL_OW 297
74931: ST_TO_ADDR
// if tdist < dist then
74932: LD_VAR 0 6
74936: PUSH
74937: LD_VAR 0 5
74941: LESS
74942: IFFALSE 74970
// begin hex := hexes [ i ] ;
74944: LD_ADDR_VAR 0 8
74948: PUSH
74949: LD_VAR 0 2
74953: PUSH
74954: LD_VAR 0 4
74958: ARRAY
74959: ST_TO_ADDR
// dist := tdist ;
74960: LD_ADDR_VAR 0 5
74964: PUSH
74965: LD_VAR 0 6
74969: ST_TO_ADDR
// end ; end ;
74970: GO 74884
74972: POP
74973: POP
// result := hex ;
74974: LD_ADDR_VAR 0 3
74978: PUSH
74979: LD_VAR 0 8
74983: ST_TO_ADDR
// end ;
74984: LD_VAR 0 3
74988: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74989: LD_INT 0
74991: PPUSH
74992: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74993: LD_VAR 0 1
74997: NOT
74998: PUSH
74999: LD_VAR 0 1
75003: PUSH
75004: LD_INT 21
75006: PUSH
75007: LD_INT 2
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 23
75016: PUSH
75017: LD_INT 2
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PPUSH
75028: CALL_OW 69
75032: IN
75033: NOT
75034: OR
75035: IFFALSE 75039
// exit ;
75037: GO 75086
// for i = 1 to 3 do
75039: LD_ADDR_VAR 0 3
75043: PUSH
75044: DOUBLE
75045: LD_INT 1
75047: DEC
75048: ST_TO_ADDR
75049: LD_INT 3
75051: PUSH
75052: FOR_TO
75053: IFFALSE 75084
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75055: LD_VAR 0 1
75059: PPUSH
75060: CALL_OW 250
75064: PPUSH
75065: LD_VAR 0 1
75069: PPUSH
75070: CALL_OW 251
75074: PPUSH
75075: LD_INT 1
75077: PPUSH
75078: CALL_OW 453
75082: GO 75052
75084: POP
75085: POP
// end ;
75086: LD_VAR 0 2
75090: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75091: LD_INT 0
75093: PPUSH
75094: PPUSH
75095: PPUSH
75096: PPUSH
75097: PPUSH
75098: PPUSH
// if not unit or not enemy_unit then
75099: LD_VAR 0 1
75103: NOT
75104: PUSH
75105: LD_VAR 0 2
75109: NOT
75110: OR
75111: IFFALSE 75115
// exit ;
75113: GO 75582
// if GetLives ( i ) < 250 then
75115: LD_VAR 0 4
75119: PPUSH
75120: CALL_OW 256
75124: PUSH
75125: LD_INT 250
75127: LESS
75128: IFFALSE 75141
// begin ComAutodestruct ( i ) ;
75130: LD_VAR 0 4
75134: PPUSH
75135: CALL 74989 0 1
// exit ;
75139: GO 75582
// end ; x := GetX ( enemy_unit ) ;
75141: LD_ADDR_VAR 0 7
75145: PUSH
75146: LD_VAR 0 2
75150: PPUSH
75151: CALL_OW 250
75155: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75156: LD_ADDR_VAR 0 8
75160: PUSH
75161: LD_VAR 0 2
75165: PPUSH
75166: CALL_OW 251
75170: ST_TO_ADDR
// if not x or not y then
75171: LD_VAR 0 7
75175: NOT
75176: PUSH
75177: LD_VAR 0 8
75181: NOT
75182: OR
75183: IFFALSE 75187
// exit ;
75185: GO 75582
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75187: LD_ADDR_VAR 0 6
75191: PUSH
75192: LD_VAR 0 7
75196: PPUSH
75197: LD_INT 0
75199: PPUSH
75200: LD_INT 4
75202: PPUSH
75203: CALL_OW 272
75207: PUSH
75208: LD_VAR 0 8
75212: PPUSH
75213: LD_INT 0
75215: PPUSH
75216: LD_INT 4
75218: PPUSH
75219: CALL_OW 273
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: PUSH
75228: LD_VAR 0 7
75232: PPUSH
75233: LD_INT 1
75235: PPUSH
75236: LD_INT 4
75238: PPUSH
75239: CALL_OW 272
75243: PUSH
75244: LD_VAR 0 8
75248: PPUSH
75249: LD_INT 1
75251: PPUSH
75252: LD_INT 4
75254: PPUSH
75255: CALL_OW 273
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: PUSH
75264: LD_VAR 0 7
75268: PPUSH
75269: LD_INT 2
75271: PPUSH
75272: LD_INT 4
75274: PPUSH
75275: CALL_OW 272
75279: PUSH
75280: LD_VAR 0 8
75284: PPUSH
75285: LD_INT 2
75287: PPUSH
75288: LD_INT 4
75290: PPUSH
75291: CALL_OW 273
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: LD_VAR 0 7
75304: PPUSH
75305: LD_INT 3
75307: PPUSH
75308: LD_INT 4
75310: PPUSH
75311: CALL_OW 272
75315: PUSH
75316: LD_VAR 0 8
75320: PPUSH
75321: LD_INT 3
75323: PPUSH
75324: LD_INT 4
75326: PPUSH
75327: CALL_OW 273
75331: PUSH
75332: EMPTY
75333: LIST
75334: LIST
75335: PUSH
75336: LD_VAR 0 7
75340: PPUSH
75341: LD_INT 4
75343: PPUSH
75344: LD_INT 4
75346: PPUSH
75347: CALL_OW 272
75351: PUSH
75352: LD_VAR 0 8
75356: PPUSH
75357: LD_INT 4
75359: PPUSH
75360: LD_INT 4
75362: PPUSH
75363: CALL_OW 273
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: LD_VAR 0 7
75376: PPUSH
75377: LD_INT 5
75379: PPUSH
75380: LD_INT 4
75382: PPUSH
75383: CALL_OW 272
75387: PUSH
75388: LD_VAR 0 8
75392: PPUSH
75393: LD_INT 5
75395: PPUSH
75396: LD_INT 4
75398: PPUSH
75399: CALL_OW 273
75403: PUSH
75404: EMPTY
75405: LIST
75406: LIST
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: ST_TO_ADDR
// for i = tmp downto 1 do
75416: LD_ADDR_VAR 0 4
75420: PUSH
75421: DOUBLE
75422: LD_VAR 0 6
75426: INC
75427: ST_TO_ADDR
75428: LD_INT 1
75430: PUSH
75431: FOR_DOWNTO
75432: IFFALSE 75533
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75434: LD_VAR 0 6
75438: PUSH
75439: LD_VAR 0 4
75443: ARRAY
75444: PUSH
75445: LD_INT 1
75447: ARRAY
75448: PPUSH
75449: LD_VAR 0 6
75453: PUSH
75454: LD_VAR 0 4
75458: ARRAY
75459: PUSH
75460: LD_INT 2
75462: ARRAY
75463: PPUSH
75464: CALL_OW 488
75468: NOT
75469: PUSH
75470: LD_VAR 0 6
75474: PUSH
75475: LD_VAR 0 4
75479: ARRAY
75480: PUSH
75481: LD_INT 1
75483: ARRAY
75484: PPUSH
75485: LD_VAR 0 6
75489: PUSH
75490: LD_VAR 0 4
75494: ARRAY
75495: PUSH
75496: LD_INT 2
75498: ARRAY
75499: PPUSH
75500: CALL_OW 428
75504: PUSH
75505: LD_INT 0
75507: NONEQUAL
75508: OR
75509: IFFALSE 75531
// tmp := Delete ( tmp , i ) ;
75511: LD_ADDR_VAR 0 6
75515: PUSH
75516: LD_VAR 0 6
75520: PPUSH
75521: LD_VAR 0 4
75525: PPUSH
75526: CALL_OW 3
75530: ST_TO_ADDR
75531: GO 75431
75533: POP
75534: POP
// j := GetClosestHex ( unit , tmp ) ;
75535: LD_ADDR_VAR 0 5
75539: PUSH
75540: LD_VAR 0 1
75544: PPUSH
75545: LD_VAR 0 6
75549: PPUSH
75550: CALL 74837 0 2
75554: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75555: LD_VAR 0 1
75559: PPUSH
75560: LD_VAR 0 5
75564: PUSH
75565: LD_INT 1
75567: ARRAY
75568: PPUSH
75569: LD_VAR 0 5
75573: PUSH
75574: LD_INT 2
75576: ARRAY
75577: PPUSH
75578: CALL_OW 111
// end ;
75582: LD_VAR 0 3
75586: RET
// export function PrepareApemanSoldier ( ) ; begin
75587: LD_INT 0
75589: PPUSH
// uc_nation := 0 ;
75590: LD_ADDR_OWVAR 21
75594: PUSH
75595: LD_INT 0
75597: ST_TO_ADDR
// hc_sex := sex_male ;
75598: LD_ADDR_OWVAR 27
75602: PUSH
75603: LD_INT 1
75605: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75606: LD_ADDR_OWVAR 28
75610: PUSH
75611: LD_INT 15
75613: ST_TO_ADDR
// hc_gallery :=  ;
75614: LD_ADDR_OWVAR 33
75618: PUSH
75619: LD_STRING 
75621: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75622: LD_ADDR_OWVAR 31
75626: PUSH
75627: LD_INT 0
75629: PPUSH
75630: LD_INT 3
75632: PPUSH
75633: CALL_OW 12
75637: PUSH
75638: LD_INT 0
75640: PPUSH
75641: LD_INT 3
75643: PPUSH
75644: CALL_OW 12
75648: PUSH
75649: LD_INT 0
75651: PUSH
75652: LD_INT 0
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: ST_TO_ADDR
// end ;
75661: LD_VAR 0 1
75665: RET
// export function PrepareApemanEngineer ( ) ; begin
75666: LD_INT 0
75668: PPUSH
// uc_nation := 0 ;
75669: LD_ADDR_OWVAR 21
75673: PUSH
75674: LD_INT 0
75676: ST_TO_ADDR
// hc_sex := sex_male ;
75677: LD_ADDR_OWVAR 27
75681: PUSH
75682: LD_INT 1
75684: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75685: LD_ADDR_OWVAR 28
75689: PUSH
75690: LD_INT 16
75692: ST_TO_ADDR
// hc_gallery :=  ;
75693: LD_ADDR_OWVAR 33
75697: PUSH
75698: LD_STRING 
75700: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75701: LD_ADDR_OWVAR 31
75705: PUSH
75706: LD_INT 0
75708: PPUSH
75709: LD_INT 3
75711: PPUSH
75712: CALL_OW 12
75716: PUSH
75717: LD_INT 0
75719: PPUSH
75720: LD_INT 3
75722: PPUSH
75723: CALL_OW 12
75727: PUSH
75728: LD_INT 0
75730: PUSH
75731: LD_INT 0
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: ST_TO_ADDR
// end ;
75740: LD_VAR 0 1
75744: RET
// export function PrepareApeman ( agressivity ) ; begin
75745: LD_INT 0
75747: PPUSH
// uc_side := 0 ;
75748: LD_ADDR_OWVAR 20
75752: PUSH
75753: LD_INT 0
75755: ST_TO_ADDR
// uc_nation := 0 ;
75756: LD_ADDR_OWVAR 21
75760: PUSH
75761: LD_INT 0
75763: ST_TO_ADDR
// hc_sex := sex_male ;
75764: LD_ADDR_OWVAR 27
75768: PUSH
75769: LD_INT 1
75771: ST_TO_ADDR
// hc_class := class_apeman ;
75772: LD_ADDR_OWVAR 28
75776: PUSH
75777: LD_INT 12
75779: ST_TO_ADDR
// hc_gallery :=  ;
75780: LD_ADDR_OWVAR 33
75784: PUSH
75785: LD_STRING 
75787: ST_TO_ADDR
// if agressivity = 0 then
75788: LD_VAR 0 1
75792: PUSH
75793: LD_INT 0
75795: EQUAL
75796: IFFALSE 75808
// hc_agressivity := 0 else
75798: LD_ADDR_OWVAR 35
75802: PUSH
75803: LD_INT 0
75805: ST_TO_ADDR
75806: GO 75829
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75808: LD_ADDR_OWVAR 35
75812: PUSH
75813: LD_VAR 0 1
75817: NEG
75818: PPUSH
75819: LD_VAR 0 1
75823: PPUSH
75824: CALL_OW 12
75828: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75829: LD_ADDR_OWVAR 31
75833: PUSH
75834: LD_INT 0
75836: PPUSH
75837: LD_INT 3
75839: PPUSH
75840: CALL_OW 12
75844: PUSH
75845: LD_INT 0
75847: PPUSH
75848: LD_INT 3
75850: PPUSH
75851: CALL_OW 12
75855: PUSH
75856: LD_INT 0
75858: PUSH
75859: LD_INT 0
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: ST_TO_ADDR
// end ;
75868: LD_VAR 0 2
75872: RET
// export function PrepareTiger ( agressivity ) ; begin
75873: LD_INT 0
75875: PPUSH
// uc_side := 0 ;
75876: LD_ADDR_OWVAR 20
75880: PUSH
75881: LD_INT 0
75883: ST_TO_ADDR
// uc_nation := 0 ;
75884: LD_ADDR_OWVAR 21
75888: PUSH
75889: LD_INT 0
75891: ST_TO_ADDR
// hc_class := class_tiger ;
75892: LD_ADDR_OWVAR 28
75896: PUSH
75897: LD_INT 14
75899: ST_TO_ADDR
// hc_gallery :=  ;
75900: LD_ADDR_OWVAR 33
75904: PUSH
75905: LD_STRING 
75907: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75908: LD_ADDR_OWVAR 35
75912: PUSH
75913: LD_VAR 0 1
75917: NEG
75918: PPUSH
75919: LD_VAR 0 1
75923: PPUSH
75924: CALL_OW 12
75928: ST_TO_ADDR
// end ;
75929: LD_VAR 0 2
75933: RET
// export function PrepareEnchidna ( ) ; begin
75934: LD_INT 0
75936: PPUSH
// uc_side := 0 ;
75937: LD_ADDR_OWVAR 20
75941: PUSH
75942: LD_INT 0
75944: ST_TO_ADDR
// uc_nation := 0 ;
75945: LD_ADDR_OWVAR 21
75949: PUSH
75950: LD_INT 0
75952: ST_TO_ADDR
// hc_class := class_baggie ;
75953: LD_ADDR_OWVAR 28
75957: PUSH
75958: LD_INT 13
75960: ST_TO_ADDR
// hc_gallery :=  ;
75961: LD_ADDR_OWVAR 33
75965: PUSH
75966: LD_STRING 
75968: ST_TO_ADDR
// end ;
75969: LD_VAR 0 1
75973: RET
// export function PrepareFrog ( ) ; begin
75974: LD_INT 0
75976: PPUSH
// uc_side := 0 ;
75977: LD_ADDR_OWVAR 20
75981: PUSH
75982: LD_INT 0
75984: ST_TO_ADDR
// uc_nation := 0 ;
75985: LD_ADDR_OWVAR 21
75989: PUSH
75990: LD_INT 0
75992: ST_TO_ADDR
// hc_class := class_frog ;
75993: LD_ADDR_OWVAR 28
75997: PUSH
75998: LD_INT 19
76000: ST_TO_ADDR
// hc_gallery :=  ;
76001: LD_ADDR_OWVAR 33
76005: PUSH
76006: LD_STRING 
76008: ST_TO_ADDR
// end ;
76009: LD_VAR 0 1
76013: RET
// export function PrepareFish ( ) ; begin
76014: LD_INT 0
76016: PPUSH
// uc_side := 0 ;
76017: LD_ADDR_OWVAR 20
76021: PUSH
76022: LD_INT 0
76024: ST_TO_ADDR
// uc_nation := 0 ;
76025: LD_ADDR_OWVAR 21
76029: PUSH
76030: LD_INT 0
76032: ST_TO_ADDR
// hc_class := class_fish ;
76033: LD_ADDR_OWVAR 28
76037: PUSH
76038: LD_INT 20
76040: ST_TO_ADDR
// hc_gallery :=  ;
76041: LD_ADDR_OWVAR 33
76045: PUSH
76046: LD_STRING 
76048: ST_TO_ADDR
// end ;
76049: LD_VAR 0 1
76053: RET
// export function PrepareBird ( ) ; begin
76054: LD_INT 0
76056: PPUSH
// uc_side := 0 ;
76057: LD_ADDR_OWVAR 20
76061: PUSH
76062: LD_INT 0
76064: ST_TO_ADDR
// uc_nation := 0 ;
76065: LD_ADDR_OWVAR 21
76069: PUSH
76070: LD_INT 0
76072: ST_TO_ADDR
// hc_class := class_phororhacos ;
76073: LD_ADDR_OWVAR 28
76077: PUSH
76078: LD_INT 18
76080: ST_TO_ADDR
// hc_gallery :=  ;
76081: LD_ADDR_OWVAR 33
76085: PUSH
76086: LD_STRING 
76088: ST_TO_ADDR
// end ;
76089: LD_VAR 0 1
76093: RET
// export function PrepareHorse ( ) ; begin
76094: LD_INT 0
76096: PPUSH
// uc_side := 0 ;
76097: LD_ADDR_OWVAR 20
76101: PUSH
76102: LD_INT 0
76104: ST_TO_ADDR
// uc_nation := 0 ;
76105: LD_ADDR_OWVAR 21
76109: PUSH
76110: LD_INT 0
76112: ST_TO_ADDR
// hc_class := class_horse ;
76113: LD_ADDR_OWVAR 28
76117: PUSH
76118: LD_INT 21
76120: ST_TO_ADDR
// hc_gallery :=  ;
76121: LD_ADDR_OWVAR 33
76125: PUSH
76126: LD_STRING 
76128: ST_TO_ADDR
// end ;
76129: LD_VAR 0 1
76133: RET
// export function PrepareMastodont ( ) ; begin
76134: LD_INT 0
76136: PPUSH
// uc_side := 0 ;
76137: LD_ADDR_OWVAR 20
76141: PUSH
76142: LD_INT 0
76144: ST_TO_ADDR
// uc_nation := 0 ;
76145: LD_ADDR_OWVAR 21
76149: PUSH
76150: LD_INT 0
76152: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76153: LD_ADDR_OWVAR 37
76157: PUSH
76158: LD_INT 31
76160: ST_TO_ADDR
// vc_control := control_rider ;
76161: LD_ADDR_OWVAR 38
76165: PUSH
76166: LD_INT 4
76168: ST_TO_ADDR
// end ;
76169: LD_VAR 0 1
76173: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76174: LD_INT 0
76176: PPUSH
76177: PPUSH
76178: PPUSH
// uc_side = 0 ;
76179: LD_ADDR_OWVAR 20
76183: PUSH
76184: LD_INT 0
76186: ST_TO_ADDR
// uc_nation = 0 ;
76187: LD_ADDR_OWVAR 21
76191: PUSH
76192: LD_INT 0
76194: ST_TO_ADDR
// InitHc_All ( ) ;
76195: CALL_OW 584
// InitVc ;
76199: CALL_OW 20
// if mastodonts then
76203: LD_VAR 0 6
76207: IFFALSE 76274
// for i = 1 to mastodonts do
76209: LD_ADDR_VAR 0 11
76213: PUSH
76214: DOUBLE
76215: LD_INT 1
76217: DEC
76218: ST_TO_ADDR
76219: LD_VAR 0 6
76223: PUSH
76224: FOR_TO
76225: IFFALSE 76272
// begin vc_chassis := 31 ;
76227: LD_ADDR_OWVAR 37
76231: PUSH
76232: LD_INT 31
76234: ST_TO_ADDR
// vc_control := control_rider ;
76235: LD_ADDR_OWVAR 38
76239: PUSH
76240: LD_INT 4
76242: ST_TO_ADDR
// animal := CreateVehicle ;
76243: LD_ADDR_VAR 0 12
76247: PUSH
76248: CALL_OW 45
76252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76253: LD_VAR 0 12
76257: PPUSH
76258: LD_VAR 0 8
76262: PPUSH
76263: LD_INT 0
76265: PPUSH
76266: CALL 78402 0 3
// end ;
76270: GO 76224
76272: POP
76273: POP
// if horses then
76274: LD_VAR 0 5
76278: IFFALSE 76345
// for i = 1 to horses do
76280: LD_ADDR_VAR 0 11
76284: PUSH
76285: DOUBLE
76286: LD_INT 1
76288: DEC
76289: ST_TO_ADDR
76290: LD_VAR 0 5
76294: PUSH
76295: FOR_TO
76296: IFFALSE 76343
// begin hc_class := 21 ;
76298: LD_ADDR_OWVAR 28
76302: PUSH
76303: LD_INT 21
76305: ST_TO_ADDR
// hc_gallery :=  ;
76306: LD_ADDR_OWVAR 33
76310: PUSH
76311: LD_STRING 
76313: ST_TO_ADDR
// animal := CreateHuman ;
76314: LD_ADDR_VAR 0 12
76318: PUSH
76319: CALL_OW 44
76323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76324: LD_VAR 0 12
76328: PPUSH
76329: LD_VAR 0 8
76333: PPUSH
76334: LD_INT 0
76336: PPUSH
76337: CALL 78402 0 3
// end ;
76341: GO 76295
76343: POP
76344: POP
// if birds then
76345: LD_VAR 0 1
76349: IFFALSE 76416
// for i = 1 to birds do
76351: LD_ADDR_VAR 0 11
76355: PUSH
76356: DOUBLE
76357: LD_INT 1
76359: DEC
76360: ST_TO_ADDR
76361: LD_VAR 0 1
76365: PUSH
76366: FOR_TO
76367: IFFALSE 76414
// begin hc_class := 18 ;
76369: LD_ADDR_OWVAR 28
76373: PUSH
76374: LD_INT 18
76376: ST_TO_ADDR
// hc_gallery =  ;
76377: LD_ADDR_OWVAR 33
76381: PUSH
76382: LD_STRING 
76384: ST_TO_ADDR
// animal := CreateHuman ;
76385: LD_ADDR_VAR 0 12
76389: PUSH
76390: CALL_OW 44
76394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76395: LD_VAR 0 12
76399: PPUSH
76400: LD_VAR 0 8
76404: PPUSH
76405: LD_INT 0
76407: PPUSH
76408: CALL 78402 0 3
// end ;
76412: GO 76366
76414: POP
76415: POP
// if tigers then
76416: LD_VAR 0 2
76420: IFFALSE 76504
// for i = 1 to tigers do
76422: LD_ADDR_VAR 0 11
76426: PUSH
76427: DOUBLE
76428: LD_INT 1
76430: DEC
76431: ST_TO_ADDR
76432: LD_VAR 0 2
76436: PUSH
76437: FOR_TO
76438: IFFALSE 76502
// begin hc_class = class_tiger ;
76440: LD_ADDR_OWVAR 28
76444: PUSH
76445: LD_INT 14
76447: ST_TO_ADDR
// hc_gallery =  ;
76448: LD_ADDR_OWVAR 33
76452: PUSH
76453: LD_STRING 
76455: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76456: LD_ADDR_OWVAR 35
76460: PUSH
76461: LD_INT 7
76463: NEG
76464: PPUSH
76465: LD_INT 7
76467: PPUSH
76468: CALL_OW 12
76472: ST_TO_ADDR
// animal := CreateHuman ;
76473: LD_ADDR_VAR 0 12
76477: PUSH
76478: CALL_OW 44
76482: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76483: LD_VAR 0 12
76487: PPUSH
76488: LD_VAR 0 8
76492: PPUSH
76493: LD_INT 0
76495: PPUSH
76496: CALL 78402 0 3
// end ;
76500: GO 76437
76502: POP
76503: POP
// if apemans then
76504: LD_VAR 0 3
76508: IFFALSE 76631
// for i = 1 to apemans do
76510: LD_ADDR_VAR 0 11
76514: PUSH
76515: DOUBLE
76516: LD_INT 1
76518: DEC
76519: ST_TO_ADDR
76520: LD_VAR 0 3
76524: PUSH
76525: FOR_TO
76526: IFFALSE 76629
// begin hc_class = class_apeman ;
76528: LD_ADDR_OWVAR 28
76532: PUSH
76533: LD_INT 12
76535: ST_TO_ADDR
// hc_gallery =  ;
76536: LD_ADDR_OWVAR 33
76540: PUSH
76541: LD_STRING 
76543: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76544: LD_ADDR_OWVAR 35
76548: PUSH
76549: LD_INT 2
76551: NEG
76552: PPUSH
76553: LD_INT 2
76555: PPUSH
76556: CALL_OW 12
76560: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76561: LD_ADDR_OWVAR 31
76565: PUSH
76566: LD_INT 1
76568: PPUSH
76569: LD_INT 3
76571: PPUSH
76572: CALL_OW 12
76576: PUSH
76577: LD_INT 1
76579: PPUSH
76580: LD_INT 3
76582: PPUSH
76583: CALL_OW 12
76587: PUSH
76588: LD_INT 0
76590: PUSH
76591: LD_INT 0
76593: PUSH
76594: EMPTY
76595: LIST
76596: LIST
76597: LIST
76598: LIST
76599: ST_TO_ADDR
// animal := CreateHuman ;
76600: LD_ADDR_VAR 0 12
76604: PUSH
76605: CALL_OW 44
76609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76610: LD_VAR 0 12
76614: PPUSH
76615: LD_VAR 0 8
76619: PPUSH
76620: LD_INT 0
76622: PPUSH
76623: CALL 78402 0 3
// end ;
76627: GO 76525
76629: POP
76630: POP
// if enchidnas then
76631: LD_VAR 0 4
76635: IFFALSE 76702
// for i = 1 to enchidnas do
76637: LD_ADDR_VAR 0 11
76641: PUSH
76642: DOUBLE
76643: LD_INT 1
76645: DEC
76646: ST_TO_ADDR
76647: LD_VAR 0 4
76651: PUSH
76652: FOR_TO
76653: IFFALSE 76700
// begin hc_class = 13 ;
76655: LD_ADDR_OWVAR 28
76659: PUSH
76660: LD_INT 13
76662: ST_TO_ADDR
// hc_gallery =  ;
76663: LD_ADDR_OWVAR 33
76667: PUSH
76668: LD_STRING 
76670: ST_TO_ADDR
// animal := CreateHuman ;
76671: LD_ADDR_VAR 0 12
76675: PUSH
76676: CALL_OW 44
76680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76681: LD_VAR 0 12
76685: PPUSH
76686: LD_VAR 0 8
76690: PPUSH
76691: LD_INT 0
76693: PPUSH
76694: CALL 78402 0 3
// end ;
76698: GO 76652
76700: POP
76701: POP
// if fishes then
76702: LD_VAR 0 7
76706: IFFALSE 76773
// for i = 1 to fishes do
76708: LD_ADDR_VAR 0 11
76712: PUSH
76713: DOUBLE
76714: LD_INT 1
76716: DEC
76717: ST_TO_ADDR
76718: LD_VAR 0 7
76722: PUSH
76723: FOR_TO
76724: IFFALSE 76771
// begin hc_class = 20 ;
76726: LD_ADDR_OWVAR 28
76730: PUSH
76731: LD_INT 20
76733: ST_TO_ADDR
// hc_gallery =  ;
76734: LD_ADDR_OWVAR 33
76738: PUSH
76739: LD_STRING 
76741: ST_TO_ADDR
// animal := CreateHuman ;
76742: LD_ADDR_VAR 0 12
76746: PUSH
76747: CALL_OW 44
76751: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76752: LD_VAR 0 12
76756: PPUSH
76757: LD_VAR 0 9
76761: PPUSH
76762: LD_INT 0
76764: PPUSH
76765: CALL 78402 0 3
// end ;
76769: GO 76723
76771: POP
76772: POP
// end ;
76773: LD_VAR 0 10
76777: RET
// export function WantHeal ( sci , unit ) ; begin
76778: LD_INT 0
76780: PPUSH
// if GetTaskList ( sci ) > 0 then
76781: LD_VAR 0 1
76785: PPUSH
76786: CALL_OW 437
76790: PUSH
76791: LD_INT 0
76793: GREATER
76794: IFFALSE 76864
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76796: LD_VAR 0 1
76800: PPUSH
76801: CALL_OW 437
76805: PUSH
76806: LD_INT 1
76808: ARRAY
76809: PUSH
76810: LD_INT 1
76812: ARRAY
76813: PUSH
76814: LD_STRING l
76816: EQUAL
76817: PUSH
76818: LD_VAR 0 1
76822: PPUSH
76823: CALL_OW 437
76827: PUSH
76828: LD_INT 1
76830: ARRAY
76831: PUSH
76832: LD_INT 4
76834: ARRAY
76835: PUSH
76836: LD_VAR 0 2
76840: EQUAL
76841: AND
76842: IFFALSE 76854
// result := true else
76844: LD_ADDR_VAR 0 3
76848: PUSH
76849: LD_INT 1
76851: ST_TO_ADDR
76852: GO 76862
// result := false ;
76854: LD_ADDR_VAR 0 3
76858: PUSH
76859: LD_INT 0
76861: ST_TO_ADDR
// end else
76862: GO 76872
// result := false ;
76864: LD_ADDR_VAR 0 3
76868: PUSH
76869: LD_INT 0
76871: ST_TO_ADDR
// end ;
76872: LD_VAR 0 3
76876: RET
// export function HealTarget ( sci ) ; begin
76877: LD_INT 0
76879: PPUSH
// if not sci then
76880: LD_VAR 0 1
76884: NOT
76885: IFFALSE 76889
// exit ;
76887: GO 76954
// result := 0 ;
76889: LD_ADDR_VAR 0 2
76893: PUSH
76894: LD_INT 0
76896: ST_TO_ADDR
// if GetTaskList ( sci ) then
76897: LD_VAR 0 1
76901: PPUSH
76902: CALL_OW 437
76906: IFFALSE 76954
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76908: LD_VAR 0 1
76912: PPUSH
76913: CALL_OW 437
76917: PUSH
76918: LD_INT 1
76920: ARRAY
76921: PUSH
76922: LD_INT 1
76924: ARRAY
76925: PUSH
76926: LD_STRING l
76928: EQUAL
76929: IFFALSE 76954
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76931: LD_ADDR_VAR 0 2
76935: PUSH
76936: LD_VAR 0 1
76940: PPUSH
76941: CALL_OW 437
76945: PUSH
76946: LD_INT 1
76948: ARRAY
76949: PUSH
76950: LD_INT 4
76952: ARRAY
76953: ST_TO_ADDR
// end ;
76954: LD_VAR 0 2
76958: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76959: LD_INT 0
76961: PPUSH
76962: PPUSH
76963: PPUSH
76964: PPUSH
// if not base_units then
76965: LD_VAR 0 1
76969: NOT
76970: IFFALSE 76974
// exit ;
76972: GO 77061
// result := false ;
76974: LD_ADDR_VAR 0 2
76978: PUSH
76979: LD_INT 0
76981: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76982: LD_ADDR_VAR 0 5
76986: PUSH
76987: LD_VAR 0 1
76991: PPUSH
76992: LD_INT 21
76994: PUSH
76995: LD_INT 3
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PPUSH
77002: CALL_OW 72
77006: ST_TO_ADDR
// if not tmp then
77007: LD_VAR 0 5
77011: NOT
77012: IFFALSE 77016
// exit ;
77014: GO 77061
// for i in tmp do
77016: LD_ADDR_VAR 0 3
77020: PUSH
77021: LD_VAR 0 5
77025: PUSH
77026: FOR_IN
77027: IFFALSE 77059
// begin result := EnemyInRange ( i , 22 ) ;
77029: LD_ADDR_VAR 0 2
77033: PUSH
77034: LD_VAR 0 3
77038: PPUSH
77039: LD_INT 22
77041: PPUSH
77042: CALL 74639 0 2
77046: ST_TO_ADDR
// if result then
77047: LD_VAR 0 2
77051: IFFALSE 77057
// exit ;
77053: POP
77054: POP
77055: GO 77061
// end ;
77057: GO 77026
77059: POP
77060: POP
// end ;
77061: LD_VAR 0 2
77065: RET
// export function FilterByTag ( units , tag ) ; begin
77066: LD_INT 0
77068: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77069: LD_ADDR_VAR 0 3
77073: PUSH
77074: LD_VAR 0 1
77078: PPUSH
77079: LD_INT 120
77081: PUSH
77082: LD_VAR 0 2
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: PPUSH
77091: CALL_OW 72
77095: ST_TO_ADDR
// end ;
77096: LD_VAR 0 3
77100: RET
// export function IsDriver ( un ) ; begin
77101: LD_INT 0
77103: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77104: LD_ADDR_VAR 0 2
77108: PUSH
77109: LD_VAR 0 1
77113: PUSH
77114: LD_INT 55
77116: PUSH
77117: EMPTY
77118: LIST
77119: PPUSH
77120: CALL_OW 69
77124: IN
77125: ST_TO_ADDR
// end ;
77126: LD_VAR 0 2
77130: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77131: LD_INT 0
77133: PPUSH
77134: PPUSH
// list := [ ] ;
77135: LD_ADDR_VAR 0 5
77139: PUSH
77140: EMPTY
77141: ST_TO_ADDR
// case d of 0 :
77142: LD_VAR 0 3
77146: PUSH
77147: LD_INT 0
77149: DOUBLE
77150: EQUAL
77151: IFTRUE 77155
77153: GO 77288
77155: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77156: LD_ADDR_VAR 0 5
77160: PUSH
77161: LD_VAR 0 1
77165: PUSH
77166: LD_INT 4
77168: MINUS
77169: PUSH
77170: LD_VAR 0 2
77174: PUSH
77175: LD_INT 4
77177: MINUS
77178: PUSH
77179: LD_INT 2
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: LIST
77186: PUSH
77187: LD_VAR 0 1
77191: PUSH
77192: LD_INT 3
77194: MINUS
77195: PUSH
77196: LD_VAR 0 2
77200: PUSH
77201: LD_INT 1
77203: PUSH
77204: EMPTY
77205: LIST
77206: LIST
77207: LIST
77208: PUSH
77209: LD_VAR 0 1
77213: PUSH
77214: LD_INT 4
77216: PLUS
77217: PUSH
77218: LD_VAR 0 2
77222: PUSH
77223: LD_INT 4
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: LIST
77230: PUSH
77231: LD_VAR 0 1
77235: PUSH
77236: LD_INT 3
77238: PLUS
77239: PUSH
77240: LD_VAR 0 2
77244: PUSH
77245: LD_INT 3
77247: PLUS
77248: PUSH
77249: LD_INT 5
77251: PUSH
77252: EMPTY
77253: LIST
77254: LIST
77255: LIST
77256: PUSH
77257: LD_VAR 0 1
77261: PUSH
77262: LD_VAR 0 2
77266: PUSH
77267: LD_INT 4
77269: PLUS
77270: PUSH
77271: LD_INT 0
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: LIST
77278: PUSH
77279: EMPTY
77280: LIST
77281: LIST
77282: LIST
77283: LIST
77284: LIST
77285: ST_TO_ADDR
// end ; 1 :
77286: GO 77986
77288: LD_INT 1
77290: DOUBLE
77291: EQUAL
77292: IFTRUE 77296
77294: GO 77429
77296: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77297: LD_ADDR_VAR 0 5
77301: PUSH
77302: LD_VAR 0 1
77306: PUSH
77307: LD_VAR 0 2
77311: PUSH
77312: LD_INT 4
77314: MINUS
77315: PUSH
77316: LD_INT 3
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: LIST
77323: PUSH
77324: LD_VAR 0 1
77328: PUSH
77329: LD_INT 3
77331: MINUS
77332: PUSH
77333: LD_VAR 0 2
77337: PUSH
77338: LD_INT 3
77340: MINUS
77341: PUSH
77342: LD_INT 2
77344: PUSH
77345: EMPTY
77346: LIST
77347: LIST
77348: LIST
77349: PUSH
77350: LD_VAR 0 1
77354: PUSH
77355: LD_INT 4
77357: MINUS
77358: PUSH
77359: LD_VAR 0 2
77363: PUSH
77364: LD_INT 1
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: LIST
77371: PUSH
77372: LD_VAR 0 1
77376: PUSH
77377: LD_VAR 0 2
77381: PUSH
77382: LD_INT 3
77384: PLUS
77385: PUSH
77386: LD_INT 0
77388: PUSH
77389: EMPTY
77390: LIST
77391: LIST
77392: LIST
77393: PUSH
77394: LD_VAR 0 1
77398: PUSH
77399: LD_INT 4
77401: PLUS
77402: PUSH
77403: LD_VAR 0 2
77407: PUSH
77408: LD_INT 4
77410: PLUS
77411: PUSH
77412: LD_INT 5
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: LIST
77419: PUSH
77420: EMPTY
77421: LIST
77422: LIST
77423: LIST
77424: LIST
77425: LIST
77426: ST_TO_ADDR
// end ; 2 :
77427: GO 77986
77429: LD_INT 2
77431: DOUBLE
77432: EQUAL
77433: IFTRUE 77437
77435: GO 77566
77437: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77438: LD_ADDR_VAR 0 5
77442: PUSH
77443: LD_VAR 0 1
77447: PUSH
77448: LD_VAR 0 2
77452: PUSH
77453: LD_INT 3
77455: MINUS
77456: PUSH
77457: LD_INT 3
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: LIST
77464: PUSH
77465: LD_VAR 0 1
77469: PUSH
77470: LD_INT 4
77472: PLUS
77473: PUSH
77474: LD_VAR 0 2
77478: PUSH
77479: LD_INT 4
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: LIST
77486: PUSH
77487: LD_VAR 0 1
77491: PUSH
77492: LD_VAR 0 2
77496: PUSH
77497: LD_INT 4
77499: PLUS
77500: PUSH
77501: LD_INT 0
77503: PUSH
77504: EMPTY
77505: LIST
77506: LIST
77507: LIST
77508: PUSH
77509: LD_VAR 0 1
77513: PUSH
77514: LD_INT 3
77516: MINUS
77517: PUSH
77518: LD_VAR 0 2
77522: PUSH
77523: LD_INT 1
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: LIST
77530: PUSH
77531: LD_VAR 0 1
77535: PUSH
77536: LD_INT 4
77538: MINUS
77539: PUSH
77540: LD_VAR 0 2
77544: PUSH
77545: LD_INT 4
77547: MINUS
77548: PUSH
77549: LD_INT 2
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: LIST
77556: PUSH
77557: EMPTY
77558: LIST
77559: LIST
77560: LIST
77561: LIST
77562: LIST
77563: ST_TO_ADDR
// end ; 3 :
77564: GO 77986
77566: LD_INT 3
77568: DOUBLE
77569: EQUAL
77570: IFTRUE 77574
77572: GO 77707
77574: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77575: LD_ADDR_VAR 0 5
77579: PUSH
77580: LD_VAR 0 1
77584: PUSH
77585: LD_INT 3
77587: PLUS
77588: PUSH
77589: LD_VAR 0 2
77593: PUSH
77594: LD_INT 4
77596: PUSH
77597: EMPTY
77598: LIST
77599: LIST
77600: LIST
77601: PUSH
77602: LD_VAR 0 1
77606: PUSH
77607: LD_INT 4
77609: PLUS
77610: PUSH
77611: LD_VAR 0 2
77615: PUSH
77616: LD_INT 4
77618: PLUS
77619: PUSH
77620: LD_INT 5
77622: PUSH
77623: EMPTY
77624: LIST
77625: LIST
77626: LIST
77627: PUSH
77628: LD_VAR 0 1
77632: PUSH
77633: LD_INT 4
77635: MINUS
77636: PUSH
77637: LD_VAR 0 2
77641: PUSH
77642: LD_INT 1
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: LIST
77649: PUSH
77650: LD_VAR 0 1
77654: PUSH
77655: LD_VAR 0 2
77659: PUSH
77660: LD_INT 4
77662: MINUS
77663: PUSH
77664: LD_INT 3
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: LIST
77671: PUSH
77672: LD_VAR 0 1
77676: PUSH
77677: LD_INT 3
77679: MINUS
77680: PUSH
77681: LD_VAR 0 2
77685: PUSH
77686: LD_INT 3
77688: MINUS
77689: PUSH
77690: LD_INT 2
77692: PUSH
77693: EMPTY
77694: LIST
77695: LIST
77696: LIST
77697: PUSH
77698: EMPTY
77699: LIST
77700: LIST
77701: LIST
77702: LIST
77703: LIST
77704: ST_TO_ADDR
// end ; 4 :
77705: GO 77986
77707: LD_INT 4
77709: DOUBLE
77710: EQUAL
77711: IFTRUE 77715
77713: GO 77848
77715: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77716: LD_ADDR_VAR 0 5
77720: PUSH
77721: LD_VAR 0 1
77725: PUSH
77726: LD_VAR 0 2
77730: PUSH
77731: LD_INT 4
77733: PLUS
77734: PUSH
77735: LD_INT 0
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: LIST
77742: PUSH
77743: LD_VAR 0 1
77747: PUSH
77748: LD_INT 3
77750: PLUS
77751: PUSH
77752: LD_VAR 0 2
77756: PUSH
77757: LD_INT 3
77759: PLUS
77760: PUSH
77761: LD_INT 5
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: LIST
77768: PUSH
77769: LD_VAR 0 1
77773: PUSH
77774: LD_INT 4
77776: PLUS
77777: PUSH
77778: LD_VAR 0 2
77782: PUSH
77783: LD_INT 4
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: LIST
77790: PUSH
77791: LD_VAR 0 1
77795: PUSH
77796: LD_VAR 0 2
77800: PUSH
77801: LD_INT 3
77803: MINUS
77804: PUSH
77805: LD_INT 3
77807: PUSH
77808: EMPTY
77809: LIST
77810: LIST
77811: LIST
77812: PUSH
77813: LD_VAR 0 1
77817: PUSH
77818: LD_INT 4
77820: MINUS
77821: PUSH
77822: LD_VAR 0 2
77826: PUSH
77827: LD_INT 4
77829: MINUS
77830: PUSH
77831: LD_INT 2
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: LIST
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: ST_TO_ADDR
// end ; 5 :
77846: GO 77986
77848: LD_INT 5
77850: DOUBLE
77851: EQUAL
77852: IFTRUE 77856
77854: GO 77985
77856: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77857: LD_ADDR_VAR 0 5
77861: PUSH
77862: LD_VAR 0 1
77866: PUSH
77867: LD_INT 4
77869: MINUS
77870: PUSH
77871: LD_VAR 0 2
77875: PUSH
77876: LD_INT 1
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: LIST
77883: PUSH
77884: LD_VAR 0 1
77888: PUSH
77889: LD_VAR 0 2
77893: PUSH
77894: LD_INT 4
77896: MINUS
77897: PUSH
77898: LD_INT 3
77900: PUSH
77901: EMPTY
77902: LIST
77903: LIST
77904: LIST
77905: PUSH
77906: LD_VAR 0 1
77910: PUSH
77911: LD_INT 4
77913: PLUS
77914: PUSH
77915: LD_VAR 0 2
77919: PUSH
77920: LD_INT 4
77922: PLUS
77923: PUSH
77924: LD_INT 5
77926: PUSH
77927: EMPTY
77928: LIST
77929: LIST
77930: LIST
77931: PUSH
77932: LD_VAR 0 1
77936: PUSH
77937: LD_INT 3
77939: PLUS
77940: PUSH
77941: LD_VAR 0 2
77945: PUSH
77946: LD_INT 4
77948: PUSH
77949: EMPTY
77950: LIST
77951: LIST
77952: LIST
77953: PUSH
77954: LD_VAR 0 1
77958: PUSH
77959: LD_VAR 0 2
77963: PUSH
77964: LD_INT 3
77966: PLUS
77967: PUSH
77968: LD_INT 0
77970: PUSH
77971: EMPTY
77972: LIST
77973: LIST
77974: LIST
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: LIST
77980: LIST
77981: LIST
77982: ST_TO_ADDR
// end ; end ;
77983: GO 77986
77985: POP
// result := list ;
77986: LD_ADDR_VAR 0 4
77990: PUSH
77991: LD_VAR 0 5
77995: ST_TO_ADDR
// end ;
77996: LD_VAR 0 4
78000: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78001: LD_INT 0
78003: PPUSH
78004: PPUSH
78005: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78006: LD_VAR 0 1
78010: NOT
78011: PUSH
78012: LD_VAR 0 2
78016: PUSH
78017: LD_INT 1
78019: PUSH
78020: LD_INT 2
78022: PUSH
78023: LD_INT 3
78025: PUSH
78026: LD_INT 4
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: LIST
78033: LIST
78034: IN
78035: NOT
78036: OR
78037: IFFALSE 78041
// exit ;
78039: GO 78124
// tmp := [ ] ;
78041: LD_ADDR_VAR 0 5
78045: PUSH
78046: EMPTY
78047: ST_TO_ADDR
// for i in units do
78048: LD_ADDR_VAR 0 4
78052: PUSH
78053: LD_VAR 0 1
78057: PUSH
78058: FOR_IN
78059: IFFALSE 78093
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78061: LD_ADDR_VAR 0 5
78065: PUSH
78066: LD_VAR 0 5
78070: PPUSH
78071: LD_VAR 0 4
78075: PPUSH
78076: LD_VAR 0 2
78080: PPUSH
78081: CALL_OW 259
78085: PPUSH
78086: CALL 79497 0 2
78090: ST_TO_ADDR
78091: GO 78058
78093: POP
78094: POP
// if not tmp then
78095: LD_VAR 0 5
78099: NOT
78100: IFFALSE 78104
// exit ;
78102: GO 78124
// result := SortListByListDesc ( units , tmp ) ;
78104: LD_ADDR_VAR 0 3
78108: PUSH
78109: LD_VAR 0 1
78113: PPUSH
78114: LD_VAR 0 5
78118: PPUSH
78119: CALL_OW 77
78123: ST_TO_ADDR
// end ;
78124: LD_VAR 0 3
78128: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78129: LD_INT 0
78131: PPUSH
78132: PPUSH
78133: PPUSH
// result := false ;
78134: LD_ADDR_VAR 0 3
78138: PUSH
78139: LD_INT 0
78141: ST_TO_ADDR
// if not building then
78142: LD_VAR 0 2
78146: NOT
78147: IFFALSE 78151
// exit ;
78149: GO 78289
// x := GetX ( building ) ;
78151: LD_ADDR_VAR 0 4
78155: PUSH
78156: LD_VAR 0 2
78160: PPUSH
78161: CALL_OW 250
78165: ST_TO_ADDR
// y := GetY ( building ) ;
78166: LD_ADDR_VAR 0 5
78170: PUSH
78171: LD_VAR 0 2
78175: PPUSH
78176: CALL_OW 251
78180: ST_TO_ADDR
// if not x or not y then
78181: LD_VAR 0 4
78185: NOT
78186: PUSH
78187: LD_VAR 0 5
78191: NOT
78192: OR
78193: IFFALSE 78197
// exit ;
78195: GO 78289
// if GetTaskList ( unit ) then
78197: LD_VAR 0 1
78201: PPUSH
78202: CALL_OW 437
78206: IFFALSE 78289
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78208: LD_STRING e
78210: PUSH
78211: LD_VAR 0 1
78215: PPUSH
78216: CALL_OW 437
78220: PUSH
78221: LD_INT 1
78223: ARRAY
78224: PUSH
78225: LD_INT 1
78227: ARRAY
78228: EQUAL
78229: PUSH
78230: LD_VAR 0 4
78234: PUSH
78235: LD_VAR 0 1
78239: PPUSH
78240: CALL_OW 437
78244: PUSH
78245: LD_INT 1
78247: ARRAY
78248: PUSH
78249: LD_INT 2
78251: ARRAY
78252: EQUAL
78253: AND
78254: PUSH
78255: LD_VAR 0 5
78259: PUSH
78260: LD_VAR 0 1
78264: PPUSH
78265: CALL_OW 437
78269: PUSH
78270: LD_INT 1
78272: ARRAY
78273: PUSH
78274: LD_INT 3
78276: ARRAY
78277: EQUAL
78278: AND
78279: IFFALSE 78289
// result := true end ;
78281: LD_ADDR_VAR 0 3
78285: PUSH
78286: LD_INT 1
78288: ST_TO_ADDR
// end ;
78289: LD_VAR 0 3
78293: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78294: LD_INT 0
78296: PPUSH
// result := false ;
78297: LD_ADDR_VAR 0 4
78301: PUSH
78302: LD_INT 0
78304: ST_TO_ADDR
// if GetTaskList ( unit ) then
78305: LD_VAR 0 1
78309: PPUSH
78310: CALL_OW 437
78314: IFFALSE 78397
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78316: LD_STRING M
78318: PUSH
78319: LD_VAR 0 1
78323: PPUSH
78324: CALL_OW 437
78328: PUSH
78329: LD_INT 1
78331: ARRAY
78332: PUSH
78333: LD_INT 1
78335: ARRAY
78336: EQUAL
78337: PUSH
78338: LD_VAR 0 2
78342: PUSH
78343: LD_VAR 0 1
78347: PPUSH
78348: CALL_OW 437
78352: PUSH
78353: LD_INT 1
78355: ARRAY
78356: PUSH
78357: LD_INT 2
78359: ARRAY
78360: EQUAL
78361: AND
78362: PUSH
78363: LD_VAR 0 3
78367: PUSH
78368: LD_VAR 0 1
78372: PPUSH
78373: CALL_OW 437
78377: PUSH
78378: LD_INT 1
78380: ARRAY
78381: PUSH
78382: LD_INT 3
78384: ARRAY
78385: EQUAL
78386: AND
78387: IFFALSE 78397
// result := true ;
78389: LD_ADDR_VAR 0 4
78393: PUSH
78394: LD_INT 1
78396: ST_TO_ADDR
// end ; end ;
78397: LD_VAR 0 4
78401: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78402: LD_INT 0
78404: PPUSH
78405: PPUSH
78406: PPUSH
78407: PPUSH
// if not unit or not area then
78408: LD_VAR 0 1
78412: NOT
78413: PUSH
78414: LD_VAR 0 2
78418: NOT
78419: OR
78420: IFFALSE 78424
// exit ;
78422: GO 78600
// tmp := AreaToList ( area , i ) ;
78424: LD_ADDR_VAR 0 6
78428: PUSH
78429: LD_VAR 0 2
78433: PPUSH
78434: LD_VAR 0 5
78438: PPUSH
78439: CALL_OW 517
78443: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78444: LD_ADDR_VAR 0 5
78448: PUSH
78449: DOUBLE
78450: LD_INT 1
78452: DEC
78453: ST_TO_ADDR
78454: LD_VAR 0 6
78458: PUSH
78459: LD_INT 1
78461: ARRAY
78462: PUSH
78463: FOR_TO
78464: IFFALSE 78598
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78466: LD_ADDR_VAR 0 7
78470: PUSH
78471: LD_VAR 0 6
78475: PUSH
78476: LD_INT 1
78478: ARRAY
78479: PUSH
78480: LD_VAR 0 5
78484: ARRAY
78485: PUSH
78486: LD_VAR 0 6
78490: PUSH
78491: LD_INT 2
78493: ARRAY
78494: PUSH
78495: LD_VAR 0 5
78499: ARRAY
78500: PUSH
78501: EMPTY
78502: LIST
78503: LIST
78504: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78505: LD_INT 92
78507: PUSH
78508: LD_VAR 0 7
78512: PUSH
78513: LD_INT 1
78515: ARRAY
78516: PUSH
78517: LD_VAR 0 7
78521: PUSH
78522: LD_INT 2
78524: ARRAY
78525: PUSH
78526: LD_INT 2
78528: PUSH
78529: EMPTY
78530: LIST
78531: LIST
78532: LIST
78533: LIST
78534: PPUSH
78535: CALL_OW 69
78539: PUSH
78540: LD_INT 0
78542: EQUAL
78543: IFFALSE 78596
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78545: LD_VAR 0 1
78549: PPUSH
78550: LD_VAR 0 7
78554: PUSH
78555: LD_INT 1
78557: ARRAY
78558: PPUSH
78559: LD_VAR 0 7
78563: PUSH
78564: LD_INT 2
78566: ARRAY
78567: PPUSH
78568: LD_VAR 0 3
78572: PPUSH
78573: CALL_OW 48
// result := IsPlaced ( unit ) ;
78577: LD_ADDR_VAR 0 4
78581: PUSH
78582: LD_VAR 0 1
78586: PPUSH
78587: CALL_OW 305
78591: ST_TO_ADDR
// exit ;
78592: POP
78593: POP
78594: GO 78600
// end ; end ;
78596: GO 78463
78598: POP
78599: POP
// end ;
78600: LD_VAR 0 4
78604: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78605: LD_INT 0
78607: PPUSH
78608: PPUSH
78609: PPUSH
// if not side or side > 8 then
78610: LD_VAR 0 1
78614: NOT
78615: PUSH
78616: LD_VAR 0 1
78620: PUSH
78621: LD_INT 8
78623: GREATER
78624: OR
78625: IFFALSE 78629
// exit ;
78627: GO 78816
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78629: LD_ADDR_VAR 0 4
78633: PUSH
78634: LD_INT 22
78636: PUSH
78637: LD_VAR 0 1
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: PUSH
78646: LD_INT 21
78648: PUSH
78649: LD_INT 3
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: PUSH
78656: EMPTY
78657: LIST
78658: LIST
78659: PPUSH
78660: CALL_OW 69
78664: ST_TO_ADDR
// if not tmp then
78665: LD_VAR 0 4
78669: NOT
78670: IFFALSE 78674
// exit ;
78672: GO 78816
// enable_addtolog := true ;
78674: LD_ADDR_OWVAR 81
78678: PUSH
78679: LD_INT 1
78681: ST_TO_ADDR
// AddToLog ( [ ) ;
78682: LD_STRING [
78684: PPUSH
78685: CALL_OW 561
// for i in tmp do
78689: LD_ADDR_VAR 0 3
78693: PUSH
78694: LD_VAR 0 4
78698: PUSH
78699: FOR_IN
78700: IFFALSE 78807
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78702: LD_STRING [
78704: PUSH
78705: LD_VAR 0 3
78709: PPUSH
78710: CALL_OW 266
78714: STR
78715: PUSH
78716: LD_STRING , 
78718: STR
78719: PUSH
78720: LD_VAR 0 3
78724: PPUSH
78725: CALL_OW 250
78729: STR
78730: PUSH
78731: LD_STRING , 
78733: STR
78734: PUSH
78735: LD_VAR 0 3
78739: PPUSH
78740: CALL_OW 251
78744: STR
78745: PUSH
78746: LD_STRING , 
78748: STR
78749: PUSH
78750: LD_VAR 0 3
78754: PPUSH
78755: CALL_OW 254
78759: STR
78760: PUSH
78761: LD_STRING , 
78763: STR
78764: PUSH
78765: LD_VAR 0 3
78769: PPUSH
78770: LD_INT 1
78772: PPUSH
78773: CALL_OW 268
78777: STR
78778: PUSH
78779: LD_STRING , 
78781: STR
78782: PUSH
78783: LD_VAR 0 3
78787: PPUSH
78788: LD_INT 2
78790: PPUSH
78791: CALL_OW 268
78795: STR
78796: PUSH
78797: LD_STRING ],
78799: STR
78800: PPUSH
78801: CALL_OW 561
// end ;
78805: GO 78699
78807: POP
78808: POP
// AddToLog ( ]; ) ;
78809: LD_STRING ];
78811: PPUSH
78812: CALL_OW 561
// end ;
78816: LD_VAR 0 2
78820: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78821: LD_INT 0
78823: PPUSH
78824: PPUSH
78825: PPUSH
78826: PPUSH
78827: PPUSH
// if not area or not rate or not max then
78828: LD_VAR 0 1
78832: NOT
78833: PUSH
78834: LD_VAR 0 2
78838: NOT
78839: OR
78840: PUSH
78841: LD_VAR 0 4
78845: NOT
78846: OR
78847: IFFALSE 78851
// exit ;
78849: GO 79040
// while 1 do
78851: LD_INT 1
78853: IFFALSE 79040
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78855: LD_ADDR_VAR 0 9
78859: PUSH
78860: LD_VAR 0 1
78864: PPUSH
78865: LD_INT 1
78867: PPUSH
78868: CALL_OW 287
78872: PUSH
78873: LD_INT 10
78875: MUL
78876: ST_TO_ADDR
// r := rate / 10 ;
78877: LD_ADDR_VAR 0 7
78881: PUSH
78882: LD_VAR 0 2
78886: PUSH
78887: LD_INT 10
78889: DIVREAL
78890: ST_TO_ADDR
// time := 1 1$00 ;
78891: LD_ADDR_VAR 0 8
78895: PUSH
78896: LD_INT 2100
78898: ST_TO_ADDR
// if amount < min then
78899: LD_VAR 0 9
78903: PUSH
78904: LD_VAR 0 3
78908: LESS
78909: IFFALSE 78927
// r := r * 2 else
78911: LD_ADDR_VAR 0 7
78915: PUSH
78916: LD_VAR 0 7
78920: PUSH
78921: LD_INT 2
78923: MUL
78924: ST_TO_ADDR
78925: GO 78953
// if amount > max then
78927: LD_VAR 0 9
78931: PUSH
78932: LD_VAR 0 4
78936: GREATER
78937: IFFALSE 78953
// r := r / 2 ;
78939: LD_ADDR_VAR 0 7
78943: PUSH
78944: LD_VAR 0 7
78948: PUSH
78949: LD_INT 2
78951: DIVREAL
78952: ST_TO_ADDR
// time := time / r ;
78953: LD_ADDR_VAR 0 8
78957: PUSH
78958: LD_VAR 0 8
78962: PUSH
78963: LD_VAR 0 7
78967: DIVREAL
78968: ST_TO_ADDR
// if time < 0 then
78969: LD_VAR 0 8
78973: PUSH
78974: LD_INT 0
78976: LESS
78977: IFFALSE 78994
// time := time * - 1 ;
78979: LD_ADDR_VAR 0 8
78983: PUSH
78984: LD_VAR 0 8
78988: PUSH
78989: LD_INT 1
78991: NEG
78992: MUL
78993: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78994: LD_VAR 0 8
78998: PUSH
78999: LD_INT 35
79001: PPUSH
79002: LD_INT 875
79004: PPUSH
79005: CALL_OW 12
79009: PLUS
79010: PPUSH
79011: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79015: LD_INT 1
79017: PPUSH
79018: LD_INT 5
79020: PPUSH
79021: CALL_OW 12
79025: PPUSH
79026: LD_VAR 0 1
79030: PPUSH
79031: LD_INT 1
79033: PPUSH
79034: CALL_OW 55
// end ;
79038: GO 78851
// end ;
79040: LD_VAR 0 5
79044: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79045: LD_INT 0
79047: PPUSH
79048: PPUSH
79049: PPUSH
79050: PPUSH
79051: PPUSH
79052: PPUSH
79053: PPUSH
79054: PPUSH
// if not turrets or not factories then
79055: LD_VAR 0 1
79059: NOT
79060: PUSH
79061: LD_VAR 0 2
79065: NOT
79066: OR
79067: IFFALSE 79071
// exit ;
79069: GO 79378
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79071: LD_ADDR_VAR 0 10
79075: PUSH
79076: LD_INT 5
79078: PUSH
79079: LD_INT 6
79081: PUSH
79082: EMPTY
79083: LIST
79084: LIST
79085: PUSH
79086: LD_INT 2
79088: PUSH
79089: LD_INT 4
79091: PUSH
79092: EMPTY
79093: LIST
79094: LIST
79095: PUSH
79096: LD_INT 3
79098: PUSH
79099: LD_INT 5
79101: PUSH
79102: EMPTY
79103: LIST
79104: LIST
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: LIST
79110: PUSH
79111: LD_INT 24
79113: PUSH
79114: LD_INT 25
79116: PUSH
79117: EMPTY
79118: LIST
79119: LIST
79120: PUSH
79121: LD_INT 23
79123: PUSH
79124: LD_INT 27
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: PUSH
79131: EMPTY
79132: LIST
79133: LIST
79134: PUSH
79135: LD_INT 42
79137: PUSH
79138: LD_INT 43
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: PUSH
79145: LD_INT 44
79147: PUSH
79148: LD_INT 46
79150: PUSH
79151: EMPTY
79152: LIST
79153: LIST
79154: PUSH
79155: LD_INT 45
79157: PUSH
79158: LD_INT 47
79160: PUSH
79161: EMPTY
79162: LIST
79163: LIST
79164: PUSH
79165: EMPTY
79166: LIST
79167: LIST
79168: LIST
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: LIST
79174: ST_TO_ADDR
// result := [ ] ;
79175: LD_ADDR_VAR 0 3
79179: PUSH
79180: EMPTY
79181: ST_TO_ADDR
// for i in turrets do
79182: LD_ADDR_VAR 0 4
79186: PUSH
79187: LD_VAR 0 1
79191: PUSH
79192: FOR_IN
79193: IFFALSE 79376
// begin nat := GetNation ( i ) ;
79195: LD_ADDR_VAR 0 7
79199: PUSH
79200: LD_VAR 0 4
79204: PPUSH
79205: CALL_OW 248
79209: ST_TO_ADDR
// weapon := 0 ;
79210: LD_ADDR_VAR 0 8
79214: PUSH
79215: LD_INT 0
79217: ST_TO_ADDR
// if not nat then
79218: LD_VAR 0 7
79222: NOT
79223: IFFALSE 79227
// continue ;
79225: GO 79192
// for j in list [ nat ] do
79227: LD_ADDR_VAR 0 5
79231: PUSH
79232: LD_VAR 0 10
79236: PUSH
79237: LD_VAR 0 7
79241: ARRAY
79242: PUSH
79243: FOR_IN
79244: IFFALSE 79285
// if GetBWeapon ( i ) = j [ 1 ] then
79246: LD_VAR 0 4
79250: PPUSH
79251: CALL_OW 269
79255: PUSH
79256: LD_VAR 0 5
79260: PUSH
79261: LD_INT 1
79263: ARRAY
79264: EQUAL
79265: IFFALSE 79283
// begin weapon := j [ 2 ] ;
79267: LD_ADDR_VAR 0 8
79271: PUSH
79272: LD_VAR 0 5
79276: PUSH
79277: LD_INT 2
79279: ARRAY
79280: ST_TO_ADDR
// break ;
79281: GO 79285
// end ;
79283: GO 79243
79285: POP
79286: POP
// if not weapon then
79287: LD_VAR 0 8
79291: NOT
79292: IFFALSE 79296
// continue ;
79294: GO 79192
// for k in factories do
79296: LD_ADDR_VAR 0 6
79300: PUSH
79301: LD_VAR 0 2
79305: PUSH
79306: FOR_IN
79307: IFFALSE 79372
// begin weapons := AvailableWeaponList ( k ) ;
79309: LD_ADDR_VAR 0 9
79313: PUSH
79314: LD_VAR 0 6
79318: PPUSH
79319: CALL_OW 478
79323: ST_TO_ADDR
// if not weapons then
79324: LD_VAR 0 9
79328: NOT
79329: IFFALSE 79333
// continue ;
79331: GO 79306
// if weapon in weapons then
79333: LD_VAR 0 8
79337: PUSH
79338: LD_VAR 0 9
79342: IN
79343: IFFALSE 79370
// begin result := [ i , weapon ] ;
79345: LD_ADDR_VAR 0 3
79349: PUSH
79350: LD_VAR 0 4
79354: PUSH
79355: LD_VAR 0 8
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: ST_TO_ADDR
// exit ;
79364: POP
79365: POP
79366: POP
79367: POP
79368: GO 79378
// end ; end ;
79370: GO 79306
79372: POP
79373: POP
// end ;
79374: GO 79192
79376: POP
79377: POP
// end ;
79378: LD_VAR 0 3
79382: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79383: LD_INT 0
79385: PPUSH
// if not side or side > 8 then
79386: LD_VAR 0 3
79390: NOT
79391: PUSH
79392: LD_VAR 0 3
79396: PUSH
79397: LD_INT 8
79399: GREATER
79400: OR
79401: IFFALSE 79405
// exit ;
79403: GO 79464
// if not range then
79405: LD_VAR 0 4
79409: NOT
79410: IFFALSE 79421
// range := - 12 ;
79412: LD_ADDR_VAR 0 4
79416: PUSH
79417: LD_INT 12
79419: NEG
79420: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79421: LD_VAR 0 1
79425: PPUSH
79426: LD_VAR 0 2
79430: PPUSH
79431: LD_VAR 0 3
79435: PPUSH
79436: LD_VAR 0 4
79440: PPUSH
79441: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79445: LD_VAR 0 1
79449: PPUSH
79450: LD_VAR 0 2
79454: PPUSH
79455: LD_VAR 0 3
79459: PPUSH
79460: CALL_OW 331
// end ;
79464: LD_VAR 0 5
79468: RET
// export function Video ( mode ) ; begin
79469: LD_INT 0
79471: PPUSH
// ingame_video = mode ;
79472: LD_ADDR_OWVAR 52
79476: PUSH
79477: LD_VAR 0 1
79481: ST_TO_ADDR
// interface_hidden = mode ;
79482: LD_ADDR_OWVAR 54
79486: PUSH
79487: LD_VAR 0 1
79491: ST_TO_ADDR
// end ;
79492: LD_VAR 0 2
79496: RET
// export function Join ( array , element ) ; begin
79497: LD_INT 0
79499: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79500: LD_ADDR_VAR 0 3
79504: PUSH
79505: LD_VAR 0 1
79509: PPUSH
79510: LD_VAR 0 1
79514: PUSH
79515: LD_INT 1
79517: PLUS
79518: PPUSH
79519: LD_VAR 0 2
79523: PPUSH
79524: CALL_OW 1
79528: ST_TO_ADDR
// end ;
79529: LD_VAR 0 3
79533: RET
// export function JoinUnion ( array , element ) ; begin
79534: LD_INT 0
79536: PPUSH
// result := array union element ;
79537: LD_ADDR_VAR 0 3
79541: PUSH
79542: LD_VAR 0 1
79546: PUSH
79547: LD_VAR 0 2
79551: UNION
79552: ST_TO_ADDR
// end ;
79553: LD_VAR 0 3
79557: RET
// export function GetBehemoths ( side ) ; begin
79558: LD_INT 0
79560: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79561: LD_ADDR_VAR 0 2
79565: PUSH
79566: LD_INT 22
79568: PUSH
79569: LD_VAR 0 1
79573: PUSH
79574: EMPTY
79575: LIST
79576: LIST
79577: PUSH
79578: LD_INT 31
79580: PUSH
79581: LD_INT 25
79583: PUSH
79584: EMPTY
79585: LIST
79586: LIST
79587: PUSH
79588: EMPTY
79589: LIST
79590: LIST
79591: PPUSH
79592: CALL_OW 69
79596: ST_TO_ADDR
// end ;
79597: LD_VAR 0 2
79601: RET
// export function Shuffle ( array ) ; var i , index ; begin
79602: LD_INT 0
79604: PPUSH
79605: PPUSH
79606: PPUSH
// result := [ ] ;
79607: LD_ADDR_VAR 0 2
79611: PUSH
79612: EMPTY
79613: ST_TO_ADDR
// if not array then
79614: LD_VAR 0 1
79618: NOT
79619: IFFALSE 79623
// exit ;
79621: GO 79722
// Randomize ;
79623: CALL_OW 10
// for i = array downto 1 do
79627: LD_ADDR_VAR 0 3
79631: PUSH
79632: DOUBLE
79633: LD_VAR 0 1
79637: INC
79638: ST_TO_ADDR
79639: LD_INT 1
79641: PUSH
79642: FOR_DOWNTO
79643: IFFALSE 79720
// begin index := rand ( 1 , array ) ;
79645: LD_ADDR_VAR 0 4
79649: PUSH
79650: LD_INT 1
79652: PPUSH
79653: LD_VAR 0 1
79657: PPUSH
79658: CALL_OW 12
79662: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79663: LD_ADDR_VAR 0 2
79667: PUSH
79668: LD_VAR 0 2
79672: PPUSH
79673: LD_VAR 0 2
79677: PUSH
79678: LD_INT 1
79680: PLUS
79681: PPUSH
79682: LD_VAR 0 1
79686: PUSH
79687: LD_VAR 0 4
79691: ARRAY
79692: PPUSH
79693: CALL_OW 2
79697: ST_TO_ADDR
// array := Delete ( array , index ) ;
79698: LD_ADDR_VAR 0 1
79702: PUSH
79703: LD_VAR 0 1
79707: PPUSH
79708: LD_VAR 0 4
79712: PPUSH
79713: CALL_OW 3
79717: ST_TO_ADDR
// end ;
79718: GO 79642
79720: POP
79721: POP
// end ;
79722: LD_VAR 0 2
79726: RET
// export function GetBaseMaterials ( base ) ; begin
79727: LD_INT 0
79729: PPUSH
// result := [ 0 , 0 , 0 ] ;
79730: LD_ADDR_VAR 0 2
79734: PUSH
79735: LD_INT 0
79737: PUSH
79738: LD_INT 0
79740: PUSH
79741: LD_INT 0
79743: PUSH
79744: EMPTY
79745: LIST
79746: LIST
79747: LIST
79748: ST_TO_ADDR
// if not base then
79749: LD_VAR 0 1
79753: NOT
79754: IFFALSE 79758
// exit ;
79756: GO 79807
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79758: LD_ADDR_VAR 0 2
79762: PUSH
79763: LD_VAR 0 1
79767: PPUSH
79768: LD_INT 1
79770: PPUSH
79771: CALL_OW 275
79775: PUSH
79776: LD_VAR 0 1
79780: PPUSH
79781: LD_INT 2
79783: PPUSH
79784: CALL_OW 275
79788: PUSH
79789: LD_VAR 0 1
79793: PPUSH
79794: LD_INT 3
79796: PPUSH
79797: CALL_OW 275
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: LIST
79806: ST_TO_ADDR
// end ;
79807: LD_VAR 0 2
79811: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79812: LD_INT 0
79814: PPUSH
79815: PPUSH
// result := array ;
79816: LD_ADDR_VAR 0 3
79820: PUSH
79821: LD_VAR 0 1
79825: ST_TO_ADDR
// if size >= result then
79826: LD_VAR 0 2
79830: PUSH
79831: LD_VAR 0 3
79835: GREATEREQUAL
79836: IFFALSE 79840
// exit ;
79838: GO 79890
// if size then
79840: LD_VAR 0 2
79844: IFFALSE 79890
// for i := array downto size do
79846: LD_ADDR_VAR 0 4
79850: PUSH
79851: DOUBLE
79852: LD_VAR 0 1
79856: INC
79857: ST_TO_ADDR
79858: LD_VAR 0 2
79862: PUSH
79863: FOR_DOWNTO
79864: IFFALSE 79888
// result := Delete ( result , result ) ;
79866: LD_ADDR_VAR 0 3
79870: PUSH
79871: LD_VAR 0 3
79875: PPUSH
79876: LD_VAR 0 3
79880: PPUSH
79881: CALL_OW 3
79885: ST_TO_ADDR
79886: GO 79863
79888: POP
79889: POP
// end ;
79890: LD_VAR 0 3
79894: RET
// export function ComExit ( unit ) ; var tmp ; begin
79895: LD_INT 0
79897: PPUSH
79898: PPUSH
// if not IsInUnit ( unit ) then
79899: LD_VAR 0 1
79903: PPUSH
79904: CALL_OW 310
79908: NOT
79909: IFFALSE 79913
// exit ;
79911: GO 79973
// tmp := IsInUnit ( unit ) ;
79913: LD_ADDR_VAR 0 3
79917: PUSH
79918: LD_VAR 0 1
79922: PPUSH
79923: CALL_OW 310
79927: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79928: LD_VAR 0 3
79932: PPUSH
79933: CALL_OW 247
79937: PUSH
79938: LD_INT 2
79940: EQUAL
79941: IFFALSE 79954
// ComExitVehicle ( unit ) else
79943: LD_VAR 0 1
79947: PPUSH
79948: CALL_OW 121
79952: GO 79963
// ComExitBuilding ( unit ) ;
79954: LD_VAR 0 1
79958: PPUSH
79959: CALL_OW 122
// result := tmp ;
79963: LD_ADDR_VAR 0 2
79967: PUSH
79968: LD_VAR 0 3
79972: ST_TO_ADDR
// end ;
79973: LD_VAR 0 2
79977: RET
// export function ComExitAll ( units ) ; var i ; begin
79978: LD_INT 0
79980: PPUSH
79981: PPUSH
// if not units then
79982: LD_VAR 0 1
79986: NOT
79987: IFFALSE 79991
// exit ;
79989: GO 80017
// for i in units do
79991: LD_ADDR_VAR 0 3
79995: PUSH
79996: LD_VAR 0 1
80000: PUSH
80001: FOR_IN
80002: IFFALSE 80015
// ComExit ( i ) ;
80004: LD_VAR 0 3
80008: PPUSH
80009: CALL 79895 0 1
80013: GO 80001
80015: POP
80016: POP
// end ;
80017: LD_VAR 0 2
80021: RET
// export function ResetHc ; begin
80022: LD_INT 0
80024: PPUSH
// InitHc ;
80025: CALL_OW 19
// hc_importance := 0 ;
80029: LD_ADDR_OWVAR 32
80033: PUSH
80034: LD_INT 0
80036: ST_TO_ADDR
// end ;
80037: LD_VAR 0 1
80041: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80042: LD_INT 0
80044: PPUSH
80045: PPUSH
80046: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80047: LD_ADDR_VAR 0 6
80051: PUSH
80052: LD_VAR 0 1
80056: PUSH
80057: LD_VAR 0 3
80061: PLUS
80062: PUSH
80063: LD_INT 2
80065: DIV
80066: ST_TO_ADDR
// if _x < 0 then
80067: LD_VAR 0 6
80071: PUSH
80072: LD_INT 0
80074: LESS
80075: IFFALSE 80092
// _x := _x * - 1 ;
80077: LD_ADDR_VAR 0 6
80081: PUSH
80082: LD_VAR 0 6
80086: PUSH
80087: LD_INT 1
80089: NEG
80090: MUL
80091: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80092: LD_ADDR_VAR 0 7
80096: PUSH
80097: LD_VAR 0 2
80101: PUSH
80102: LD_VAR 0 4
80106: PLUS
80107: PUSH
80108: LD_INT 2
80110: DIV
80111: ST_TO_ADDR
// if _y < 0 then
80112: LD_VAR 0 7
80116: PUSH
80117: LD_INT 0
80119: LESS
80120: IFFALSE 80137
// _y := _y * - 1 ;
80122: LD_ADDR_VAR 0 7
80126: PUSH
80127: LD_VAR 0 7
80131: PUSH
80132: LD_INT 1
80134: NEG
80135: MUL
80136: ST_TO_ADDR
// result := [ _x , _y ] ;
80137: LD_ADDR_VAR 0 5
80141: PUSH
80142: LD_VAR 0 6
80146: PUSH
80147: LD_VAR 0 7
80151: PUSH
80152: EMPTY
80153: LIST
80154: LIST
80155: ST_TO_ADDR
// end ;
80156: LD_VAR 0 5
80160: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80161: LD_INT 0
80163: PPUSH
80164: PPUSH
80165: PPUSH
80166: PPUSH
// task := GetTaskList ( unit ) ;
80167: LD_ADDR_VAR 0 7
80171: PUSH
80172: LD_VAR 0 1
80176: PPUSH
80177: CALL_OW 437
80181: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80182: LD_VAR 0 7
80186: NOT
80187: PUSH
80188: LD_VAR 0 1
80192: PPUSH
80193: LD_VAR 0 2
80197: PPUSH
80198: CALL_OW 308
80202: NOT
80203: AND
80204: IFFALSE 80208
// exit ;
80206: GO 80326
// if IsInArea ( unit , area ) then
80208: LD_VAR 0 1
80212: PPUSH
80213: LD_VAR 0 2
80217: PPUSH
80218: CALL_OW 308
80222: IFFALSE 80240
// begin ComMoveToArea ( unit , goAway ) ;
80224: LD_VAR 0 1
80228: PPUSH
80229: LD_VAR 0 3
80233: PPUSH
80234: CALL_OW 113
// exit ;
80238: GO 80326
// end ; if task [ 1 ] [ 1 ] <> M then
80240: LD_VAR 0 7
80244: PUSH
80245: LD_INT 1
80247: ARRAY
80248: PUSH
80249: LD_INT 1
80251: ARRAY
80252: PUSH
80253: LD_STRING M
80255: NONEQUAL
80256: IFFALSE 80260
// exit ;
80258: GO 80326
// x := task [ 1 ] [ 2 ] ;
80260: LD_ADDR_VAR 0 5
80264: PUSH
80265: LD_VAR 0 7
80269: PUSH
80270: LD_INT 1
80272: ARRAY
80273: PUSH
80274: LD_INT 2
80276: ARRAY
80277: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80278: LD_ADDR_VAR 0 6
80282: PUSH
80283: LD_VAR 0 7
80287: PUSH
80288: LD_INT 1
80290: ARRAY
80291: PUSH
80292: LD_INT 3
80294: ARRAY
80295: ST_TO_ADDR
// if InArea ( x , y , area ) then
80296: LD_VAR 0 5
80300: PPUSH
80301: LD_VAR 0 6
80305: PPUSH
80306: LD_VAR 0 2
80310: PPUSH
80311: CALL_OW 309
80315: IFFALSE 80326
// ComStop ( unit ) ;
80317: LD_VAR 0 1
80321: PPUSH
80322: CALL_OW 141
// end ;
80326: LD_VAR 0 4
80330: RET
// export function Abs ( value ) ; begin
80331: LD_INT 0
80333: PPUSH
// result := value ;
80334: LD_ADDR_VAR 0 2
80338: PUSH
80339: LD_VAR 0 1
80343: ST_TO_ADDR
// if value < 0 then
80344: LD_VAR 0 1
80348: PUSH
80349: LD_INT 0
80351: LESS
80352: IFFALSE 80369
// result := value * - 1 ;
80354: LD_ADDR_VAR 0 2
80358: PUSH
80359: LD_VAR 0 1
80363: PUSH
80364: LD_INT 1
80366: NEG
80367: MUL
80368: ST_TO_ADDR
// end ;
80369: LD_VAR 0 2
80373: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80374: LD_INT 0
80376: PPUSH
80377: PPUSH
80378: PPUSH
80379: PPUSH
80380: PPUSH
80381: PPUSH
80382: PPUSH
80383: PPUSH
// if not unit or not building then
80384: LD_VAR 0 1
80388: NOT
80389: PUSH
80390: LD_VAR 0 2
80394: NOT
80395: OR
80396: IFFALSE 80400
// exit ;
80398: GO 80626
// x := GetX ( building ) ;
80400: LD_ADDR_VAR 0 4
80404: PUSH
80405: LD_VAR 0 2
80409: PPUSH
80410: CALL_OW 250
80414: ST_TO_ADDR
// y := GetY ( building ) ;
80415: LD_ADDR_VAR 0 6
80419: PUSH
80420: LD_VAR 0 2
80424: PPUSH
80425: CALL_OW 251
80429: ST_TO_ADDR
// d := GetDir ( building ) ;
80430: LD_ADDR_VAR 0 8
80434: PUSH
80435: LD_VAR 0 2
80439: PPUSH
80440: CALL_OW 254
80444: ST_TO_ADDR
// r := 4 ;
80445: LD_ADDR_VAR 0 9
80449: PUSH
80450: LD_INT 4
80452: ST_TO_ADDR
// for i := 1 to 5 do
80453: LD_ADDR_VAR 0 10
80457: PUSH
80458: DOUBLE
80459: LD_INT 1
80461: DEC
80462: ST_TO_ADDR
80463: LD_INT 5
80465: PUSH
80466: FOR_TO
80467: IFFALSE 80624
// begin _x := ShiftX ( x , d , r + i ) ;
80469: LD_ADDR_VAR 0 5
80473: PUSH
80474: LD_VAR 0 4
80478: PPUSH
80479: LD_VAR 0 8
80483: PPUSH
80484: LD_VAR 0 9
80488: PUSH
80489: LD_VAR 0 10
80493: PLUS
80494: PPUSH
80495: CALL_OW 272
80499: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80500: LD_ADDR_VAR 0 7
80504: PUSH
80505: LD_VAR 0 6
80509: PPUSH
80510: LD_VAR 0 8
80514: PPUSH
80515: LD_VAR 0 9
80519: PUSH
80520: LD_VAR 0 10
80524: PLUS
80525: PPUSH
80526: CALL_OW 273
80530: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80531: LD_VAR 0 5
80535: PPUSH
80536: LD_VAR 0 7
80540: PPUSH
80541: CALL_OW 488
80545: PUSH
80546: LD_VAR 0 5
80550: PPUSH
80551: LD_VAR 0 7
80555: PPUSH
80556: CALL_OW 428
80560: PPUSH
80561: CALL_OW 247
80565: PUSH
80566: LD_INT 3
80568: PUSH
80569: LD_INT 2
80571: PUSH
80572: EMPTY
80573: LIST
80574: LIST
80575: IN
80576: NOT
80577: AND
80578: IFFALSE 80622
// begin ComMoveXY ( unit , _x , _y ) ;
80580: LD_VAR 0 1
80584: PPUSH
80585: LD_VAR 0 5
80589: PPUSH
80590: LD_VAR 0 7
80594: PPUSH
80595: CALL_OW 111
// result := [ _x , _y ] ;
80599: LD_ADDR_VAR 0 3
80603: PUSH
80604: LD_VAR 0 5
80608: PUSH
80609: LD_VAR 0 7
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: ST_TO_ADDR
// exit ;
80618: POP
80619: POP
80620: GO 80626
// end ; end ;
80622: GO 80466
80624: POP
80625: POP
// end ;
80626: LD_VAR 0 3
80630: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80631: LD_INT 0
80633: PPUSH
80634: PPUSH
80635: PPUSH
// result := 0 ;
80636: LD_ADDR_VAR 0 3
80640: PUSH
80641: LD_INT 0
80643: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80644: LD_VAR 0 1
80648: PUSH
80649: LD_INT 0
80651: LESS
80652: PUSH
80653: LD_VAR 0 1
80657: PUSH
80658: LD_INT 8
80660: GREATER
80661: OR
80662: PUSH
80663: LD_VAR 0 2
80667: PUSH
80668: LD_INT 0
80670: LESS
80671: OR
80672: PUSH
80673: LD_VAR 0 2
80677: PUSH
80678: LD_INT 8
80680: GREATER
80681: OR
80682: IFFALSE 80686
// exit ;
80684: GO 80761
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80686: LD_ADDR_VAR 0 4
80690: PUSH
80691: LD_INT 22
80693: PUSH
80694: LD_VAR 0 2
80698: PUSH
80699: EMPTY
80700: LIST
80701: LIST
80702: PPUSH
80703: CALL_OW 69
80707: PUSH
80708: FOR_IN
80709: IFFALSE 80759
// begin un := UnitShoot ( i ) ;
80711: LD_ADDR_VAR 0 5
80715: PUSH
80716: LD_VAR 0 4
80720: PPUSH
80721: CALL_OW 504
80725: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80726: LD_VAR 0 5
80730: PPUSH
80731: CALL_OW 255
80735: PUSH
80736: LD_VAR 0 1
80740: EQUAL
80741: IFFALSE 80757
// begin result := un ;
80743: LD_ADDR_VAR 0 3
80747: PUSH
80748: LD_VAR 0 5
80752: ST_TO_ADDR
// exit ;
80753: POP
80754: POP
80755: GO 80761
// end ; end ;
80757: GO 80708
80759: POP
80760: POP
// end ;
80761: LD_VAR 0 3
80765: RET
// export function GetCargoBay ( units ) ; begin
80766: LD_INT 0
80768: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80769: LD_ADDR_VAR 0 2
80773: PUSH
80774: LD_VAR 0 1
80778: PPUSH
80779: LD_INT 2
80781: PUSH
80782: LD_INT 34
80784: PUSH
80785: LD_INT 12
80787: PUSH
80788: EMPTY
80789: LIST
80790: LIST
80791: PUSH
80792: LD_INT 34
80794: PUSH
80795: LD_INT 51
80797: PUSH
80798: EMPTY
80799: LIST
80800: LIST
80801: PUSH
80802: LD_INT 34
80804: PUSH
80805: LD_INT 32
80807: PUSH
80808: EMPTY
80809: LIST
80810: LIST
80811: PUSH
80812: LD_INT 34
80814: PUSH
80815: LD_INT 89
80817: PUSH
80818: EMPTY
80819: LIST
80820: LIST
80821: PUSH
80822: EMPTY
80823: LIST
80824: LIST
80825: LIST
80826: LIST
80827: LIST
80828: PPUSH
80829: CALL_OW 72
80833: ST_TO_ADDR
// end ;
80834: LD_VAR 0 2
80838: RET
// export function Negate ( value ) ; begin
80839: LD_INT 0
80841: PPUSH
// result := not value ;
80842: LD_ADDR_VAR 0 2
80846: PUSH
80847: LD_VAR 0 1
80851: NOT
80852: ST_TO_ADDR
// end ;
80853: LD_VAR 0 2
80857: RET
// export function Inc ( value ) ; begin
80858: LD_INT 0
80860: PPUSH
// result := value + 1 ;
80861: LD_ADDR_VAR 0 2
80865: PUSH
80866: LD_VAR 0 1
80870: PUSH
80871: LD_INT 1
80873: PLUS
80874: ST_TO_ADDR
// end ;
80875: LD_VAR 0 2
80879: RET
// export function Dec ( value ) ; begin
80880: LD_INT 0
80882: PPUSH
// result := value - 1 ;
80883: LD_ADDR_VAR 0 2
80887: PUSH
80888: LD_VAR 0 1
80892: PUSH
80893: LD_INT 1
80895: MINUS
80896: ST_TO_ADDR
// end ;
80897: LD_VAR 0 2
80901: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80902: LD_INT 0
80904: PPUSH
80905: PPUSH
80906: PPUSH
80907: PPUSH
80908: PPUSH
80909: PPUSH
80910: PPUSH
80911: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80912: LD_VAR 0 1
80916: PPUSH
80917: LD_VAR 0 2
80921: PPUSH
80922: CALL_OW 488
80926: NOT
80927: PUSH
80928: LD_VAR 0 3
80932: PPUSH
80933: LD_VAR 0 4
80937: PPUSH
80938: CALL_OW 488
80942: NOT
80943: OR
80944: IFFALSE 80957
// begin result := - 1 ;
80946: LD_ADDR_VAR 0 5
80950: PUSH
80951: LD_INT 1
80953: NEG
80954: ST_TO_ADDR
// exit ;
80955: GO 81192
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80957: LD_ADDR_VAR 0 12
80961: PUSH
80962: LD_VAR 0 1
80966: PPUSH
80967: LD_VAR 0 2
80971: PPUSH
80972: LD_VAR 0 3
80976: PPUSH
80977: LD_VAR 0 4
80981: PPUSH
80982: CALL 80042 0 4
80986: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80987: LD_ADDR_VAR 0 11
80991: PUSH
80992: LD_VAR 0 1
80996: PPUSH
80997: LD_VAR 0 2
81001: PPUSH
81002: LD_VAR 0 12
81006: PUSH
81007: LD_INT 1
81009: ARRAY
81010: PPUSH
81011: LD_VAR 0 12
81015: PUSH
81016: LD_INT 2
81018: ARRAY
81019: PPUSH
81020: CALL_OW 298
81024: ST_TO_ADDR
// distance := 9999 ;
81025: LD_ADDR_VAR 0 10
81029: PUSH
81030: LD_INT 9999
81032: ST_TO_ADDR
// for i := 0 to 5 do
81033: LD_ADDR_VAR 0 6
81037: PUSH
81038: DOUBLE
81039: LD_INT 0
81041: DEC
81042: ST_TO_ADDR
81043: LD_INT 5
81045: PUSH
81046: FOR_TO
81047: IFFALSE 81190
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81049: LD_ADDR_VAR 0 7
81053: PUSH
81054: LD_VAR 0 1
81058: PPUSH
81059: LD_VAR 0 6
81063: PPUSH
81064: LD_VAR 0 11
81068: PPUSH
81069: CALL_OW 272
81073: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81074: LD_ADDR_VAR 0 8
81078: PUSH
81079: LD_VAR 0 2
81083: PPUSH
81084: LD_VAR 0 6
81088: PPUSH
81089: LD_VAR 0 11
81093: PPUSH
81094: CALL_OW 273
81098: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81099: LD_VAR 0 7
81103: PPUSH
81104: LD_VAR 0 8
81108: PPUSH
81109: CALL_OW 488
81113: NOT
81114: IFFALSE 81118
// continue ;
81116: GO 81046
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81118: LD_ADDR_VAR 0 9
81122: PUSH
81123: LD_VAR 0 12
81127: PUSH
81128: LD_INT 1
81130: ARRAY
81131: PPUSH
81132: LD_VAR 0 12
81136: PUSH
81137: LD_INT 2
81139: ARRAY
81140: PPUSH
81141: LD_VAR 0 7
81145: PPUSH
81146: LD_VAR 0 8
81150: PPUSH
81151: CALL_OW 298
81155: ST_TO_ADDR
// if tmp < distance then
81156: LD_VAR 0 9
81160: PUSH
81161: LD_VAR 0 10
81165: LESS
81166: IFFALSE 81188
// begin result := i ;
81168: LD_ADDR_VAR 0 5
81172: PUSH
81173: LD_VAR 0 6
81177: ST_TO_ADDR
// distance := tmp ;
81178: LD_ADDR_VAR 0 10
81182: PUSH
81183: LD_VAR 0 9
81187: ST_TO_ADDR
// end ; end ;
81188: GO 81046
81190: POP
81191: POP
// end ;
81192: LD_VAR 0 5
81196: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81197: LD_INT 0
81199: PPUSH
81200: PPUSH
// if not driver or not IsInUnit ( driver ) then
81201: LD_VAR 0 1
81205: NOT
81206: PUSH
81207: LD_VAR 0 1
81211: PPUSH
81212: CALL_OW 310
81216: NOT
81217: OR
81218: IFFALSE 81222
// exit ;
81220: GO 81312
// vehicle := IsInUnit ( driver ) ;
81222: LD_ADDR_VAR 0 3
81226: PUSH
81227: LD_VAR 0 1
81231: PPUSH
81232: CALL_OW 310
81236: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81237: LD_VAR 0 1
81241: PPUSH
81242: LD_STRING \
81244: PUSH
81245: LD_INT 0
81247: PUSH
81248: LD_INT 0
81250: PUSH
81251: LD_INT 0
81253: PUSH
81254: LD_INT 0
81256: PUSH
81257: LD_INT 0
81259: PUSH
81260: LD_INT 0
81262: PUSH
81263: EMPTY
81264: LIST
81265: LIST
81266: LIST
81267: LIST
81268: LIST
81269: LIST
81270: LIST
81271: PUSH
81272: LD_STRING E
81274: PUSH
81275: LD_INT 0
81277: PUSH
81278: LD_INT 0
81280: PUSH
81281: LD_VAR 0 3
81285: PUSH
81286: LD_INT 0
81288: PUSH
81289: LD_INT 0
81291: PUSH
81292: LD_INT 0
81294: PUSH
81295: EMPTY
81296: LIST
81297: LIST
81298: LIST
81299: LIST
81300: LIST
81301: LIST
81302: LIST
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: PPUSH
81308: CALL_OW 446
// end ;
81312: LD_VAR 0 2
81316: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81317: LD_INT 0
81319: PPUSH
81320: PPUSH
// if not driver or not IsInUnit ( driver ) then
81321: LD_VAR 0 1
81325: NOT
81326: PUSH
81327: LD_VAR 0 1
81331: PPUSH
81332: CALL_OW 310
81336: NOT
81337: OR
81338: IFFALSE 81342
// exit ;
81340: GO 81432
// vehicle := IsInUnit ( driver ) ;
81342: LD_ADDR_VAR 0 3
81346: PUSH
81347: LD_VAR 0 1
81351: PPUSH
81352: CALL_OW 310
81356: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81357: LD_VAR 0 1
81361: PPUSH
81362: LD_STRING \
81364: PUSH
81365: LD_INT 0
81367: PUSH
81368: LD_INT 0
81370: PUSH
81371: LD_INT 0
81373: PUSH
81374: LD_INT 0
81376: PUSH
81377: LD_INT 0
81379: PUSH
81380: LD_INT 0
81382: PUSH
81383: EMPTY
81384: LIST
81385: LIST
81386: LIST
81387: LIST
81388: LIST
81389: LIST
81390: LIST
81391: PUSH
81392: LD_STRING E
81394: PUSH
81395: LD_INT 0
81397: PUSH
81398: LD_INT 0
81400: PUSH
81401: LD_VAR 0 3
81405: PUSH
81406: LD_INT 0
81408: PUSH
81409: LD_INT 0
81411: PUSH
81412: LD_INT 0
81414: PUSH
81415: EMPTY
81416: LIST
81417: LIST
81418: LIST
81419: LIST
81420: LIST
81421: LIST
81422: LIST
81423: PUSH
81424: EMPTY
81425: LIST
81426: LIST
81427: PPUSH
81428: CALL_OW 447
// end ;
81432: LD_VAR 0 2
81436: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81437: LD_INT 0
81439: PPUSH
81440: PPUSH
81441: PPUSH
// tmp := [ ] ;
81442: LD_ADDR_VAR 0 5
81446: PUSH
81447: EMPTY
81448: ST_TO_ADDR
// for i in units do
81449: LD_ADDR_VAR 0 4
81453: PUSH
81454: LD_VAR 0 1
81458: PUSH
81459: FOR_IN
81460: IFFALSE 81498
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81462: LD_ADDR_VAR 0 5
81466: PUSH
81467: LD_VAR 0 5
81471: PPUSH
81472: LD_VAR 0 5
81476: PUSH
81477: LD_INT 1
81479: PLUS
81480: PPUSH
81481: LD_VAR 0 4
81485: PPUSH
81486: CALL_OW 256
81490: PPUSH
81491: CALL_OW 2
81495: ST_TO_ADDR
81496: GO 81459
81498: POP
81499: POP
// if not tmp then
81500: LD_VAR 0 5
81504: NOT
81505: IFFALSE 81509
// exit ;
81507: GO 81557
// if asc then
81509: LD_VAR 0 2
81513: IFFALSE 81537
// result := SortListByListAsc ( units , tmp ) else
81515: LD_ADDR_VAR 0 3
81519: PUSH
81520: LD_VAR 0 1
81524: PPUSH
81525: LD_VAR 0 5
81529: PPUSH
81530: CALL_OW 76
81534: ST_TO_ADDR
81535: GO 81557
// result := SortListByListDesc ( units , tmp ) ;
81537: LD_ADDR_VAR 0 3
81541: PUSH
81542: LD_VAR 0 1
81546: PPUSH
81547: LD_VAR 0 5
81551: PPUSH
81552: CALL_OW 77
81556: ST_TO_ADDR
// end ;
81557: LD_VAR 0 3
81561: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81562: LD_INT 0
81564: PPUSH
81565: PPUSH
// task := GetTaskList ( mech ) ;
81566: LD_ADDR_VAR 0 4
81570: PUSH
81571: LD_VAR 0 1
81575: PPUSH
81576: CALL_OW 437
81580: ST_TO_ADDR
// if not task then
81581: LD_VAR 0 4
81585: NOT
81586: IFFALSE 81590
// exit ;
81588: GO 81632
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81590: LD_ADDR_VAR 0 3
81594: PUSH
81595: LD_VAR 0 4
81599: PUSH
81600: LD_INT 1
81602: ARRAY
81603: PUSH
81604: LD_INT 1
81606: ARRAY
81607: PUSH
81608: LD_STRING r
81610: EQUAL
81611: PUSH
81612: LD_VAR 0 4
81616: PUSH
81617: LD_INT 1
81619: ARRAY
81620: PUSH
81621: LD_INT 4
81623: ARRAY
81624: PUSH
81625: LD_VAR 0 2
81629: EQUAL
81630: AND
81631: ST_TO_ADDR
// end ;
81632: LD_VAR 0 3
81636: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81637: LD_INT 0
81639: PPUSH
// SetDir ( unit , d ) ;
81640: LD_VAR 0 1
81644: PPUSH
81645: LD_VAR 0 4
81649: PPUSH
81650: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81654: LD_ADDR_VAR 0 6
81658: PUSH
81659: LD_VAR 0 1
81663: PPUSH
81664: LD_VAR 0 2
81668: PPUSH
81669: LD_VAR 0 3
81673: PPUSH
81674: LD_VAR 0 5
81678: PPUSH
81679: CALL_OW 48
81683: ST_TO_ADDR
// end ;
81684: LD_VAR 0 6
81688: RET
// export function ToNaturalNumber ( number ) ; begin
81689: LD_INT 0
81691: PPUSH
// result := number div 1 ;
81692: LD_ADDR_VAR 0 2
81696: PUSH
81697: LD_VAR 0 1
81701: PUSH
81702: LD_INT 1
81704: DIV
81705: ST_TO_ADDR
// if number < 0 then
81706: LD_VAR 0 1
81710: PUSH
81711: LD_INT 0
81713: LESS
81714: IFFALSE 81724
// result := 0 ;
81716: LD_ADDR_VAR 0 2
81720: PUSH
81721: LD_INT 0
81723: ST_TO_ADDR
// end ;
81724: LD_VAR 0 2
81728: RET
// export function SortByClass ( units , class ) ; var un ; begin
81729: LD_INT 0
81731: PPUSH
81732: PPUSH
// if not units or not class then
81733: LD_VAR 0 1
81737: NOT
81738: PUSH
81739: LD_VAR 0 2
81743: NOT
81744: OR
81745: IFFALSE 81749
// exit ;
81747: GO 81844
// result := [ ] ;
81749: LD_ADDR_VAR 0 3
81753: PUSH
81754: EMPTY
81755: ST_TO_ADDR
// for un in units do
81756: LD_ADDR_VAR 0 4
81760: PUSH
81761: LD_VAR 0 1
81765: PUSH
81766: FOR_IN
81767: IFFALSE 81842
// if GetClass ( un ) = class then
81769: LD_VAR 0 4
81773: PPUSH
81774: CALL_OW 257
81778: PUSH
81779: LD_VAR 0 2
81783: EQUAL
81784: IFFALSE 81811
// result := Insert ( result , 1 , un ) else
81786: LD_ADDR_VAR 0 3
81790: PUSH
81791: LD_VAR 0 3
81795: PPUSH
81796: LD_INT 1
81798: PPUSH
81799: LD_VAR 0 4
81803: PPUSH
81804: CALL_OW 2
81808: ST_TO_ADDR
81809: GO 81840
// result := Replace ( result , result + 1 , un ) ;
81811: LD_ADDR_VAR 0 3
81815: PUSH
81816: LD_VAR 0 3
81820: PPUSH
81821: LD_VAR 0 3
81825: PUSH
81826: LD_INT 1
81828: PLUS
81829: PPUSH
81830: LD_VAR 0 4
81834: PPUSH
81835: CALL_OW 1
81839: ST_TO_ADDR
81840: GO 81766
81842: POP
81843: POP
// end ;
81844: LD_VAR 0 3
81848: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81849: LD_INT 0
81851: PPUSH
81852: PPUSH
81853: PPUSH
81854: PPUSH
81855: PPUSH
81856: PPUSH
81857: PPUSH
// result := [ ] ;
81858: LD_ADDR_VAR 0 4
81862: PUSH
81863: EMPTY
81864: ST_TO_ADDR
// if x - r < 0 then
81865: LD_VAR 0 1
81869: PUSH
81870: LD_VAR 0 3
81874: MINUS
81875: PUSH
81876: LD_INT 0
81878: LESS
81879: IFFALSE 81891
// min_x := 0 else
81881: LD_ADDR_VAR 0 8
81885: PUSH
81886: LD_INT 0
81888: ST_TO_ADDR
81889: GO 81907
// min_x := x - r ;
81891: LD_ADDR_VAR 0 8
81895: PUSH
81896: LD_VAR 0 1
81900: PUSH
81901: LD_VAR 0 3
81905: MINUS
81906: ST_TO_ADDR
// if y - r < 0 then
81907: LD_VAR 0 2
81911: PUSH
81912: LD_VAR 0 3
81916: MINUS
81917: PUSH
81918: LD_INT 0
81920: LESS
81921: IFFALSE 81933
// min_y := 0 else
81923: LD_ADDR_VAR 0 7
81927: PUSH
81928: LD_INT 0
81930: ST_TO_ADDR
81931: GO 81949
// min_y := y - r ;
81933: LD_ADDR_VAR 0 7
81937: PUSH
81938: LD_VAR 0 2
81942: PUSH
81943: LD_VAR 0 3
81947: MINUS
81948: ST_TO_ADDR
// max_x := x + r ;
81949: LD_ADDR_VAR 0 9
81953: PUSH
81954: LD_VAR 0 1
81958: PUSH
81959: LD_VAR 0 3
81963: PLUS
81964: ST_TO_ADDR
// max_y := y + r ;
81965: LD_ADDR_VAR 0 10
81969: PUSH
81970: LD_VAR 0 2
81974: PUSH
81975: LD_VAR 0 3
81979: PLUS
81980: ST_TO_ADDR
// for _x = min_x to max_x do
81981: LD_ADDR_VAR 0 5
81985: PUSH
81986: DOUBLE
81987: LD_VAR 0 8
81991: DEC
81992: ST_TO_ADDR
81993: LD_VAR 0 9
81997: PUSH
81998: FOR_TO
81999: IFFALSE 82100
// for _y = min_y to max_y do
82001: LD_ADDR_VAR 0 6
82005: PUSH
82006: DOUBLE
82007: LD_VAR 0 7
82011: DEC
82012: ST_TO_ADDR
82013: LD_VAR 0 10
82017: PUSH
82018: FOR_TO
82019: IFFALSE 82096
// begin if not ValidHex ( _x , _y ) then
82021: LD_VAR 0 5
82025: PPUSH
82026: LD_VAR 0 6
82030: PPUSH
82031: CALL_OW 488
82035: NOT
82036: IFFALSE 82040
// continue ;
82038: GO 82018
// if GetResourceTypeXY ( _x , _y ) then
82040: LD_VAR 0 5
82044: PPUSH
82045: LD_VAR 0 6
82049: PPUSH
82050: CALL_OW 283
82054: IFFALSE 82094
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82056: LD_ADDR_VAR 0 4
82060: PUSH
82061: LD_VAR 0 4
82065: PPUSH
82066: LD_VAR 0 4
82070: PUSH
82071: LD_INT 1
82073: PLUS
82074: PPUSH
82075: LD_VAR 0 5
82079: PUSH
82080: LD_VAR 0 6
82084: PUSH
82085: EMPTY
82086: LIST
82087: LIST
82088: PPUSH
82089: CALL_OW 1
82093: ST_TO_ADDR
// end ;
82094: GO 82018
82096: POP
82097: POP
82098: GO 81998
82100: POP
82101: POP
// end ;
82102: LD_VAR 0 4
82106: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82107: LD_INT 0
82109: PPUSH
82110: PPUSH
82111: PPUSH
82112: PPUSH
82113: PPUSH
82114: PPUSH
82115: PPUSH
82116: PPUSH
// if not units then
82117: LD_VAR 0 1
82121: NOT
82122: IFFALSE 82126
// exit ;
82124: GO 82654
// result := UnitFilter ( units , [ f_ok ] ) ;
82126: LD_ADDR_VAR 0 3
82130: PUSH
82131: LD_VAR 0 1
82135: PPUSH
82136: LD_INT 50
82138: PUSH
82139: EMPTY
82140: LIST
82141: PPUSH
82142: CALL_OW 72
82146: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82147: LD_ADDR_VAR 0 8
82151: PUSH
82152: LD_VAR 0 1
82156: PUSH
82157: LD_INT 1
82159: ARRAY
82160: PPUSH
82161: CALL_OW 255
82165: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82166: LD_ADDR_VAR 0 10
82170: PUSH
82171: LD_INT 29
82173: PUSH
82174: LD_INT 91
82176: PUSH
82177: LD_INT 49
82179: PUSH
82180: EMPTY
82181: LIST
82182: LIST
82183: LIST
82184: ST_TO_ADDR
// if not result then
82185: LD_VAR 0 3
82189: NOT
82190: IFFALSE 82194
// exit ;
82192: GO 82654
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82194: LD_ADDR_VAR 0 5
82198: PUSH
82199: LD_INT 81
82201: PUSH
82202: LD_VAR 0 8
82206: PUSH
82207: EMPTY
82208: LIST
82209: LIST
82210: PPUSH
82211: CALL_OW 69
82215: ST_TO_ADDR
// for i in result do
82216: LD_ADDR_VAR 0 4
82220: PUSH
82221: LD_VAR 0 3
82225: PUSH
82226: FOR_IN
82227: IFFALSE 82652
// begin tag := GetTag ( i ) + 1 ;
82229: LD_ADDR_VAR 0 9
82233: PUSH
82234: LD_VAR 0 4
82238: PPUSH
82239: CALL_OW 110
82243: PUSH
82244: LD_INT 1
82246: PLUS
82247: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82248: LD_ADDR_VAR 0 7
82252: PUSH
82253: LD_VAR 0 4
82257: PPUSH
82258: CALL_OW 250
82262: PPUSH
82263: LD_VAR 0 4
82267: PPUSH
82268: CALL_OW 251
82272: PPUSH
82273: LD_INT 4
82275: PPUSH
82276: CALL 81849 0 3
82280: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82281: LD_VAR 0 4
82285: PPUSH
82286: CALL_OW 247
82290: PUSH
82291: LD_INT 2
82293: EQUAL
82294: PUSH
82295: LD_VAR 0 7
82299: PUSH
82300: LD_INT 2
82302: GREATER
82303: AND
82304: PUSH
82305: LD_VAR 0 4
82309: PPUSH
82310: CALL_OW 264
82314: PUSH
82315: LD_VAR 0 10
82319: IN
82320: NOT
82321: AND
82322: IFFALSE 82361
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82324: LD_VAR 0 4
82328: PPUSH
82329: LD_VAR 0 7
82333: PUSH
82334: LD_INT 1
82336: ARRAY
82337: PUSH
82338: LD_INT 1
82340: ARRAY
82341: PPUSH
82342: LD_VAR 0 7
82346: PUSH
82347: LD_INT 1
82349: ARRAY
82350: PUSH
82351: LD_INT 2
82353: ARRAY
82354: PPUSH
82355: CALL_OW 116
82359: GO 82650
// if path > tag then
82361: LD_VAR 0 2
82365: PUSH
82366: LD_VAR 0 9
82370: GREATER
82371: IFFALSE 82579
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82373: LD_ADDR_VAR 0 6
82377: PUSH
82378: LD_VAR 0 5
82382: PPUSH
82383: LD_INT 91
82385: PUSH
82386: LD_VAR 0 4
82390: PUSH
82391: LD_INT 8
82393: PUSH
82394: EMPTY
82395: LIST
82396: LIST
82397: LIST
82398: PPUSH
82399: CALL_OW 72
82403: ST_TO_ADDR
// if nearEnemy then
82404: LD_VAR 0 6
82408: IFFALSE 82477
// begin if GetWeapon ( i ) = ru_time_lapser then
82410: LD_VAR 0 4
82414: PPUSH
82415: CALL_OW 264
82419: PUSH
82420: LD_INT 49
82422: EQUAL
82423: IFFALSE 82451
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82425: LD_VAR 0 4
82429: PPUSH
82430: LD_VAR 0 6
82434: PPUSH
82435: LD_VAR 0 4
82439: PPUSH
82440: CALL_OW 74
82444: PPUSH
82445: CALL_OW 112
82449: GO 82475
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82451: LD_VAR 0 4
82455: PPUSH
82456: LD_VAR 0 6
82460: PPUSH
82461: LD_VAR 0 4
82465: PPUSH
82466: CALL_OW 74
82470: PPUSH
82471: CALL 83725 0 2
// end else
82475: GO 82577
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82477: LD_VAR 0 4
82481: PPUSH
82482: LD_VAR 0 2
82486: PUSH
82487: LD_VAR 0 9
82491: ARRAY
82492: PUSH
82493: LD_INT 1
82495: ARRAY
82496: PPUSH
82497: LD_VAR 0 2
82501: PUSH
82502: LD_VAR 0 9
82506: ARRAY
82507: PUSH
82508: LD_INT 2
82510: ARRAY
82511: PPUSH
82512: CALL_OW 297
82516: PUSH
82517: LD_INT 6
82519: GREATER
82520: IFFALSE 82563
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82522: LD_VAR 0 4
82526: PPUSH
82527: LD_VAR 0 2
82531: PUSH
82532: LD_VAR 0 9
82536: ARRAY
82537: PUSH
82538: LD_INT 1
82540: ARRAY
82541: PPUSH
82542: LD_VAR 0 2
82546: PUSH
82547: LD_VAR 0 9
82551: ARRAY
82552: PUSH
82553: LD_INT 2
82555: ARRAY
82556: PPUSH
82557: CALL_OW 114
82561: GO 82577
// SetTag ( i , tag ) ;
82563: LD_VAR 0 4
82567: PPUSH
82568: LD_VAR 0 9
82572: PPUSH
82573: CALL_OW 109
// end else
82577: GO 82650
// if enemy then
82579: LD_VAR 0 5
82583: IFFALSE 82650
// begin if GetWeapon ( i ) = ru_time_lapser then
82585: LD_VAR 0 4
82589: PPUSH
82590: CALL_OW 264
82594: PUSH
82595: LD_INT 49
82597: EQUAL
82598: IFFALSE 82626
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82600: LD_VAR 0 4
82604: PPUSH
82605: LD_VAR 0 5
82609: PPUSH
82610: LD_VAR 0 4
82614: PPUSH
82615: CALL_OW 74
82619: PPUSH
82620: CALL_OW 112
82624: GO 82650
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82626: LD_VAR 0 4
82630: PPUSH
82631: LD_VAR 0 5
82635: PPUSH
82636: LD_VAR 0 4
82640: PPUSH
82641: CALL_OW 74
82645: PPUSH
82646: CALL 83725 0 2
// end ; end ;
82650: GO 82226
82652: POP
82653: POP
// end ;
82654: LD_VAR 0 3
82658: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82659: LD_INT 0
82661: PPUSH
82662: PPUSH
82663: PPUSH
// if not unit or IsInUnit ( unit ) then
82664: LD_VAR 0 1
82668: NOT
82669: PUSH
82670: LD_VAR 0 1
82674: PPUSH
82675: CALL_OW 310
82679: OR
82680: IFFALSE 82684
// exit ;
82682: GO 82775
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82684: LD_ADDR_VAR 0 4
82688: PUSH
82689: LD_VAR 0 1
82693: PPUSH
82694: CALL_OW 250
82698: PPUSH
82699: LD_VAR 0 2
82703: PPUSH
82704: LD_INT 1
82706: PPUSH
82707: CALL_OW 272
82711: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82712: LD_ADDR_VAR 0 5
82716: PUSH
82717: LD_VAR 0 1
82721: PPUSH
82722: CALL_OW 251
82726: PPUSH
82727: LD_VAR 0 2
82731: PPUSH
82732: LD_INT 1
82734: PPUSH
82735: CALL_OW 273
82739: ST_TO_ADDR
// if ValidHex ( x , y ) then
82740: LD_VAR 0 4
82744: PPUSH
82745: LD_VAR 0 5
82749: PPUSH
82750: CALL_OW 488
82754: IFFALSE 82775
// ComTurnXY ( unit , x , y ) ;
82756: LD_VAR 0 1
82760: PPUSH
82761: LD_VAR 0 4
82765: PPUSH
82766: LD_VAR 0 5
82770: PPUSH
82771: CALL_OW 118
// end ;
82775: LD_VAR 0 3
82779: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82780: LD_INT 0
82782: PPUSH
82783: PPUSH
// result := false ;
82784: LD_ADDR_VAR 0 3
82788: PUSH
82789: LD_INT 0
82791: ST_TO_ADDR
// if not units then
82792: LD_VAR 0 2
82796: NOT
82797: IFFALSE 82801
// exit ;
82799: GO 82846
// for i in units do
82801: LD_ADDR_VAR 0 4
82805: PUSH
82806: LD_VAR 0 2
82810: PUSH
82811: FOR_IN
82812: IFFALSE 82844
// if See ( side , i ) then
82814: LD_VAR 0 1
82818: PPUSH
82819: LD_VAR 0 4
82823: PPUSH
82824: CALL_OW 292
82828: IFFALSE 82842
// begin result := true ;
82830: LD_ADDR_VAR 0 3
82834: PUSH
82835: LD_INT 1
82837: ST_TO_ADDR
// exit ;
82838: POP
82839: POP
82840: GO 82846
// end ;
82842: GO 82811
82844: POP
82845: POP
// end ;
82846: LD_VAR 0 3
82850: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82851: LD_INT 0
82853: PPUSH
82854: PPUSH
82855: PPUSH
82856: PPUSH
// if not unit or not points then
82857: LD_VAR 0 1
82861: NOT
82862: PUSH
82863: LD_VAR 0 2
82867: NOT
82868: OR
82869: IFFALSE 82873
// exit ;
82871: GO 82963
// dist := 99999 ;
82873: LD_ADDR_VAR 0 5
82877: PUSH
82878: LD_INT 99999
82880: ST_TO_ADDR
// for i in points do
82881: LD_ADDR_VAR 0 4
82885: PUSH
82886: LD_VAR 0 2
82890: PUSH
82891: FOR_IN
82892: IFFALSE 82961
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82894: LD_ADDR_VAR 0 6
82898: PUSH
82899: LD_VAR 0 1
82903: PPUSH
82904: LD_VAR 0 4
82908: PUSH
82909: LD_INT 1
82911: ARRAY
82912: PPUSH
82913: LD_VAR 0 4
82917: PUSH
82918: LD_INT 2
82920: ARRAY
82921: PPUSH
82922: CALL_OW 297
82926: ST_TO_ADDR
// if tmpDist < dist then
82927: LD_VAR 0 6
82931: PUSH
82932: LD_VAR 0 5
82936: LESS
82937: IFFALSE 82959
// begin result := i ;
82939: LD_ADDR_VAR 0 3
82943: PUSH
82944: LD_VAR 0 4
82948: ST_TO_ADDR
// dist := tmpDist ;
82949: LD_ADDR_VAR 0 5
82953: PUSH
82954: LD_VAR 0 6
82958: ST_TO_ADDR
// end ; end ;
82959: GO 82891
82961: POP
82962: POP
// end ;
82963: LD_VAR 0 3
82967: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82968: LD_INT 0
82970: PPUSH
// uc_side := side ;
82971: LD_ADDR_OWVAR 20
82975: PUSH
82976: LD_VAR 0 1
82980: ST_TO_ADDR
// uc_nation := 3 ;
82981: LD_ADDR_OWVAR 21
82985: PUSH
82986: LD_INT 3
82988: ST_TO_ADDR
// vc_chassis := 25 ;
82989: LD_ADDR_OWVAR 37
82993: PUSH
82994: LD_INT 25
82996: ST_TO_ADDR
// vc_engine := engine_siberite ;
82997: LD_ADDR_OWVAR 39
83001: PUSH
83002: LD_INT 3
83004: ST_TO_ADDR
// vc_control := control_computer ;
83005: LD_ADDR_OWVAR 38
83009: PUSH
83010: LD_INT 3
83012: ST_TO_ADDR
// vc_weapon := 59 ;
83013: LD_ADDR_OWVAR 40
83017: PUSH
83018: LD_INT 59
83020: ST_TO_ADDR
// result := CreateVehicle ;
83021: LD_ADDR_VAR 0 5
83025: PUSH
83026: CALL_OW 45
83030: ST_TO_ADDR
// SetDir ( result , d ) ;
83031: LD_VAR 0 5
83035: PPUSH
83036: LD_VAR 0 4
83040: PPUSH
83041: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83045: LD_VAR 0 5
83049: PPUSH
83050: LD_VAR 0 2
83054: PPUSH
83055: LD_VAR 0 3
83059: PPUSH
83060: LD_INT 0
83062: PPUSH
83063: CALL_OW 48
// end ;
83067: LD_VAR 0 5
83071: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83072: LD_INT 0
83074: PPUSH
83075: PPUSH
83076: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83077: LD_ADDR_VAR 0 2
83081: PUSH
83082: LD_INT 0
83084: PUSH
83085: LD_INT 0
83087: PUSH
83088: LD_INT 0
83090: PUSH
83091: LD_INT 0
83093: PUSH
83094: EMPTY
83095: LIST
83096: LIST
83097: LIST
83098: LIST
83099: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83100: LD_VAR 0 1
83104: NOT
83105: PUSH
83106: LD_VAR 0 1
83110: PPUSH
83111: CALL_OW 264
83115: PUSH
83116: LD_INT 12
83118: PUSH
83119: LD_INT 51
83121: PUSH
83122: LD_INT 32
83124: PUSH
83125: LD_INT 89
83127: PUSH
83128: EMPTY
83129: LIST
83130: LIST
83131: LIST
83132: LIST
83133: IN
83134: NOT
83135: OR
83136: IFFALSE 83140
// exit ;
83138: GO 83238
// for i := 1 to 3 do
83140: LD_ADDR_VAR 0 3
83144: PUSH
83145: DOUBLE
83146: LD_INT 1
83148: DEC
83149: ST_TO_ADDR
83150: LD_INT 3
83152: PUSH
83153: FOR_TO
83154: IFFALSE 83236
// begin tmp := GetCargo ( cargo , i ) ;
83156: LD_ADDR_VAR 0 4
83160: PUSH
83161: LD_VAR 0 1
83165: PPUSH
83166: LD_VAR 0 3
83170: PPUSH
83171: CALL_OW 289
83175: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83176: LD_ADDR_VAR 0 2
83180: PUSH
83181: LD_VAR 0 2
83185: PPUSH
83186: LD_VAR 0 3
83190: PPUSH
83191: LD_VAR 0 4
83195: PPUSH
83196: CALL_OW 1
83200: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83201: LD_ADDR_VAR 0 2
83205: PUSH
83206: LD_VAR 0 2
83210: PPUSH
83211: LD_INT 4
83213: PPUSH
83214: LD_VAR 0 2
83218: PUSH
83219: LD_INT 4
83221: ARRAY
83222: PUSH
83223: LD_VAR 0 4
83227: PLUS
83228: PPUSH
83229: CALL_OW 1
83233: ST_TO_ADDR
// end ;
83234: GO 83153
83236: POP
83237: POP
// end ;
83238: LD_VAR 0 2
83242: RET
// export function Length ( array ) ; begin
83243: LD_INT 0
83245: PPUSH
// result := array + 0 ;
83246: LD_ADDR_VAR 0 2
83250: PUSH
83251: LD_VAR 0 1
83255: PUSH
83256: LD_INT 0
83258: PLUS
83259: ST_TO_ADDR
// end ;
83260: LD_VAR 0 2
83264: RET
// export function PrepareArray ( array ) ; begin
83265: LD_INT 0
83267: PPUSH
// result := array diff 0 ;
83268: LD_ADDR_VAR 0 2
83272: PUSH
83273: LD_VAR 0 1
83277: PUSH
83278: LD_INT 0
83280: DIFF
83281: ST_TO_ADDR
// if not result [ 1 ] then
83282: LD_VAR 0 2
83286: PUSH
83287: LD_INT 1
83289: ARRAY
83290: NOT
83291: IFFALSE 83311
// result := Delete ( result , 1 ) ;
83293: LD_ADDR_VAR 0 2
83297: PUSH
83298: LD_VAR 0 2
83302: PPUSH
83303: LD_INT 1
83305: PPUSH
83306: CALL_OW 3
83310: ST_TO_ADDR
// end ;
83311: LD_VAR 0 2
83315: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83316: LD_INT 0
83318: PPUSH
83319: PPUSH
83320: PPUSH
83321: PPUSH
// sibRocketRange := 25 ;
83322: LD_ADDR_VAR 0 6
83326: PUSH
83327: LD_INT 25
83329: ST_TO_ADDR
// result := false ;
83330: LD_ADDR_VAR 0 4
83334: PUSH
83335: LD_INT 0
83337: ST_TO_ADDR
// for i := 0 to 5 do
83338: LD_ADDR_VAR 0 5
83342: PUSH
83343: DOUBLE
83344: LD_INT 0
83346: DEC
83347: ST_TO_ADDR
83348: LD_INT 5
83350: PUSH
83351: FOR_TO
83352: IFFALSE 83419
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83354: LD_VAR 0 1
83358: PPUSH
83359: LD_VAR 0 5
83363: PPUSH
83364: LD_VAR 0 6
83368: PPUSH
83369: CALL_OW 272
83373: PPUSH
83374: LD_VAR 0 2
83378: PPUSH
83379: LD_VAR 0 5
83383: PPUSH
83384: LD_VAR 0 6
83388: PPUSH
83389: CALL_OW 273
83393: PPUSH
83394: LD_VAR 0 3
83398: PPUSH
83399: CALL_OW 309
83403: IFFALSE 83417
// begin result := true ;
83405: LD_ADDR_VAR 0 4
83409: PUSH
83410: LD_INT 1
83412: ST_TO_ADDR
// exit ;
83413: POP
83414: POP
83415: GO 83421
// end ;
83417: GO 83351
83419: POP
83420: POP
// end ;
83421: LD_VAR 0 4
83425: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83426: LD_INT 0
83428: PPUSH
83429: PPUSH
83430: PPUSH
// if btype = b_depot then
83431: LD_VAR 0 2
83435: PUSH
83436: LD_INT 0
83438: EQUAL
83439: IFFALSE 83451
// begin result := true ;
83441: LD_ADDR_VAR 0 3
83445: PUSH
83446: LD_INT 1
83448: ST_TO_ADDR
// exit ;
83449: GO 83567
// end ; pom := GetBase ( depot ) ;
83451: LD_ADDR_VAR 0 4
83455: PUSH
83456: LD_VAR 0 1
83460: PPUSH
83461: CALL_OW 274
83465: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83466: LD_ADDR_VAR 0 5
83470: PUSH
83471: LD_VAR 0 2
83475: PPUSH
83476: LD_VAR 0 1
83480: PPUSH
83481: CALL_OW 248
83485: PPUSH
83486: CALL_OW 450
83490: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83491: LD_ADDR_VAR 0 3
83495: PUSH
83496: LD_VAR 0 4
83500: PPUSH
83501: LD_INT 1
83503: PPUSH
83504: CALL_OW 275
83508: PUSH
83509: LD_VAR 0 5
83513: PUSH
83514: LD_INT 1
83516: ARRAY
83517: GREATEREQUAL
83518: PUSH
83519: LD_VAR 0 4
83523: PPUSH
83524: LD_INT 2
83526: PPUSH
83527: CALL_OW 275
83531: PUSH
83532: LD_VAR 0 5
83536: PUSH
83537: LD_INT 2
83539: ARRAY
83540: GREATEREQUAL
83541: AND
83542: PUSH
83543: LD_VAR 0 4
83547: PPUSH
83548: LD_INT 3
83550: PPUSH
83551: CALL_OW 275
83555: PUSH
83556: LD_VAR 0 5
83560: PUSH
83561: LD_INT 3
83563: ARRAY
83564: GREATEREQUAL
83565: AND
83566: ST_TO_ADDR
// end ;
83567: LD_VAR 0 3
83571: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83572: LD_INT 0
83574: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83575: LD_VAR 0 1
83579: PPUSH
83580: LD_VAR 0 2
83584: PPUSH
83585: LD_INT 0
83587: PPUSH
83588: LD_INT 0
83590: PPUSH
83591: LD_INT 1
83593: PPUSH
83594: LD_INT 0
83596: PPUSH
83597: CALL_OW 587
// end ;
83601: LD_VAR 0 3
83605: RET
// export function CenterOnNow ( unit ) ; begin
83606: LD_INT 0
83608: PPUSH
// result := IsInUnit ( unit ) ;
83609: LD_ADDR_VAR 0 2
83613: PUSH
83614: LD_VAR 0 1
83618: PPUSH
83619: CALL_OW 310
83623: ST_TO_ADDR
// if not result then
83624: LD_VAR 0 2
83628: NOT
83629: IFFALSE 83641
// result := unit ;
83631: LD_ADDR_VAR 0 2
83635: PUSH
83636: LD_VAR 0 1
83640: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83641: LD_VAR 0 1
83645: PPUSH
83646: CALL_OW 87
// end ;
83650: LD_VAR 0 2
83654: RET
// export function ComMoveHex ( unit , hex ) ; begin
83655: LD_INT 0
83657: PPUSH
// if not hex then
83658: LD_VAR 0 2
83662: NOT
83663: IFFALSE 83667
// exit ;
83665: GO 83720
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83667: LD_VAR 0 2
83671: PUSH
83672: LD_INT 1
83674: ARRAY
83675: PPUSH
83676: LD_VAR 0 2
83680: PUSH
83681: LD_INT 2
83683: ARRAY
83684: PPUSH
83685: CALL_OW 428
83689: IFFALSE 83693
// exit ;
83691: GO 83720
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83693: LD_VAR 0 1
83697: PPUSH
83698: LD_VAR 0 2
83702: PUSH
83703: LD_INT 1
83705: ARRAY
83706: PPUSH
83707: LD_VAR 0 2
83711: PUSH
83712: LD_INT 2
83714: ARRAY
83715: PPUSH
83716: CALL_OW 111
// end ;
83720: LD_VAR 0 3
83724: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83725: LD_INT 0
83727: PPUSH
83728: PPUSH
83729: PPUSH
// if not unit or not enemy then
83730: LD_VAR 0 1
83734: NOT
83735: PUSH
83736: LD_VAR 0 2
83740: NOT
83741: OR
83742: IFFALSE 83746
// exit ;
83744: GO 83870
// x := GetX ( enemy ) ;
83746: LD_ADDR_VAR 0 4
83750: PUSH
83751: LD_VAR 0 2
83755: PPUSH
83756: CALL_OW 250
83760: ST_TO_ADDR
// y := GetY ( enemy ) ;
83761: LD_ADDR_VAR 0 5
83765: PUSH
83766: LD_VAR 0 2
83770: PPUSH
83771: CALL_OW 251
83775: ST_TO_ADDR
// if ValidHex ( x , y ) then
83776: LD_VAR 0 4
83780: PPUSH
83781: LD_VAR 0 5
83785: PPUSH
83786: CALL_OW 488
83790: IFFALSE 83870
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83792: LD_VAR 0 2
83796: PPUSH
83797: CALL_OW 247
83801: PUSH
83802: LD_INT 3
83804: PUSH
83805: LD_INT 2
83807: PUSH
83808: EMPTY
83809: LIST
83810: LIST
83811: IN
83812: PUSH
83813: LD_VAR 0 1
83817: PPUSH
83818: CALL_OW 255
83822: PPUSH
83823: LD_VAR 0 2
83827: PPUSH
83828: CALL_OW 292
83832: OR
83833: IFFALSE 83851
// ComAttackUnit ( unit , enemy ) else
83835: LD_VAR 0 1
83839: PPUSH
83840: LD_VAR 0 2
83844: PPUSH
83845: CALL_OW 115
83849: GO 83870
// ComAgressiveMove ( unit , x , y ) ;
83851: LD_VAR 0 1
83855: PPUSH
83856: LD_VAR 0 4
83860: PPUSH
83861: LD_VAR 0 5
83865: PPUSH
83866: CALL_OW 114
// end ;
83870: LD_VAR 0 3
83874: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83875: LD_INT 0
83877: PPUSH
83878: PPUSH
83879: PPUSH
// list := AreaToList ( area , 0 ) ;
83880: LD_ADDR_VAR 0 5
83884: PUSH
83885: LD_VAR 0 1
83889: PPUSH
83890: LD_INT 0
83892: PPUSH
83893: CALL_OW 517
83897: ST_TO_ADDR
// if not list then
83898: LD_VAR 0 5
83902: NOT
83903: IFFALSE 83907
// exit ;
83905: GO 84037
// if all then
83907: LD_VAR 0 2
83911: IFFALSE 83999
// begin for i := 1 to list [ 1 ] do
83913: LD_ADDR_VAR 0 4
83917: PUSH
83918: DOUBLE
83919: LD_INT 1
83921: DEC
83922: ST_TO_ADDR
83923: LD_VAR 0 5
83927: PUSH
83928: LD_INT 1
83930: ARRAY
83931: PUSH
83932: FOR_TO
83933: IFFALSE 83995
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83935: LD_ADDR_VAR 0 3
83939: PUSH
83940: LD_VAR 0 3
83944: PPUSH
83945: LD_VAR 0 3
83949: PUSH
83950: LD_INT 1
83952: PLUS
83953: PPUSH
83954: LD_VAR 0 5
83958: PUSH
83959: LD_INT 1
83961: ARRAY
83962: PUSH
83963: LD_VAR 0 4
83967: ARRAY
83968: PUSH
83969: LD_VAR 0 5
83973: PUSH
83974: LD_INT 2
83976: ARRAY
83977: PUSH
83978: LD_VAR 0 4
83982: ARRAY
83983: PUSH
83984: EMPTY
83985: LIST
83986: LIST
83987: PPUSH
83988: CALL_OW 1
83992: ST_TO_ADDR
83993: GO 83932
83995: POP
83996: POP
// exit ;
83997: GO 84037
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83999: LD_ADDR_VAR 0 3
84003: PUSH
84004: LD_VAR 0 5
84008: PUSH
84009: LD_INT 1
84011: ARRAY
84012: PUSH
84013: LD_INT 1
84015: ARRAY
84016: PUSH
84017: LD_VAR 0 5
84021: PUSH
84022: LD_INT 2
84024: ARRAY
84025: PUSH
84026: LD_INT 1
84028: ARRAY
84029: PUSH
84030: EMPTY
84031: LIST
84032: LIST
84033: PUSH
84034: EMPTY
84035: LIST
84036: ST_TO_ADDR
// end ;
84037: LD_VAR 0 3
84041: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84042: LD_INT 0
84044: PPUSH
84045: PPUSH
// list := AreaToList ( area , 0 ) ;
84046: LD_ADDR_VAR 0 4
84050: PUSH
84051: LD_VAR 0 1
84055: PPUSH
84056: LD_INT 0
84058: PPUSH
84059: CALL_OW 517
84063: ST_TO_ADDR
// if not list then
84064: LD_VAR 0 4
84068: NOT
84069: IFFALSE 84073
// exit ;
84071: GO 84114
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84073: LD_ADDR_VAR 0 3
84077: PUSH
84078: LD_VAR 0 4
84082: PUSH
84083: LD_INT 1
84085: ARRAY
84086: PUSH
84087: LD_INT 1
84089: ARRAY
84090: PUSH
84091: LD_VAR 0 4
84095: PUSH
84096: LD_INT 2
84098: ARRAY
84099: PUSH
84100: LD_INT 1
84102: ARRAY
84103: PUSH
84104: LD_VAR 0 2
84108: PUSH
84109: EMPTY
84110: LIST
84111: LIST
84112: LIST
84113: ST_TO_ADDR
// end ;
84114: LD_VAR 0 3
84118: RET
// export function First ( array ) ; begin
84119: LD_INT 0
84121: PPUSH
// if not array then
84122: LD_VAR 0 1
84126: NOT
84127: IFFALSE 84131
// exit ;
84129: GO 84145
// result := array [ 1 ] ;
84131: LD_ADDR_VAR 0 2
84135: PUSH
84136: LD_VAR 0 1
84140: PUSH
84141: LD_INT 1
84143: ARRAY
84144: ST_TO_ADDR
// end ;
84145: LD_VAR 0 2
84149: RET
// export function Last ( array ) ; begin
84150: LD_INT 0
84152: PPUSH
// if not array then
84153: LD_VAR 0 1
84157: NOT
84158: IFFALSE 84162
// exit ;
84160: GO 84178
// result := array [ array ] ;
84162: LD_ADDR_VAR 0 2
84166: PUSH
84167: LD_VAR 0 1
84171: PUSH
84172: LD_VAR 0 1
84176: ARRAY
84177: ST_TO_ADDR
// end ;
84178: LD_VAR 0 2
84182: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84183: LD_INT 0
84185: PPUSH
84186: PPUSH
// result := [ ] ;
84187: LD_ADDR_VAR 0 5
84191: PUSH
84192: EMPTY
84193: ST_TO_ADDR
// if not array then
84194: LD_VAR 0 1
84198: NOT
84199: IFFALSE 84203
// exit ;
84201: GO 84315
// for i := 1 to array do
84203: LD_ADDR_VAR 0 6
84207: PUSH
84208: DOUBLE
84209: LD_INT 1
84211: DEC
84212: ST_TO_ADDR
84213: LD_VAR 0 1
84217: PUSH
84218: FOR_TO
84219: IFFALSE 84313
// if array [ i ] [ index ] = value then
84221: LD_VAR 0 1
84225: PUSH
84226: LD_VAR 0 6
84230: ARRAY
84231: PUSH
84232: LD_VAR 0 2
84236: ARRAY
84237: PUSH
84238: LD_VAR 0 3
84242: EQUAL
84243: IFFALSE 84311
// begin if indexColumn then
84245: LD_VAR 0 4
84249: IFFALSE 84285
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84251: LD_ADDR_VAR 0 5
84255: PUSH
84256: LD_VAR 0 5
84260: PPUSH
84261: LD_VAR 0 1
84265: PUSH
84266: LD_VAR 0 6
84270: ARRAY
84271: PUSH
84272: LD_VAR 0 4
84276: ARRAY
84277: PPUSH
84278: CALL 79497 0 2
84282: ST_TO_ADDR
84283: GO 84311
// result := Join ( result , array [ i ] ) ;
84285: LD_ADDR_VAR 0 5
84289: PUSH
84290: LD_VAR 0 5
84294: PPUSH
84295: LD_VAR 0 1
84299: PUSH
84300: LD_VAR 0 6
84304: ARRAY
84305: PPUSH
84306: CALL 79497 0 2
84310: ST_TO_ADDR
// end ;
84311: GO 84218
84313: POP
84314: POP
// end ;
84315: LD_VAR 0 5
84319: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84320: LD_INT 0
84322: PPUSH
// if not vehicles or not parkingPoint then
84323: LD_VAR 0 1
84327: NOT
84328: PUSH
84329: LD_VAR 0 2
84333: NOT
84334: OR
84335: IFFALSE 84339
// exit ;
84337: GO 84437
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84339: LD_ADDR_VAR 0 1
84343: PUSH
84344: LD_VAR 0 1
84348: PPUSH
84349: LD_INT 50
84351: PUSH
84352: EMPTY
84353: LIST
84354: PUSH
84355: LD_INT 3
84357: PUSH
84358: LD_INT 92
84360: PUSH
84361: LD_VAR 0 2
84365: PUSH
84366: LD_INT 1
84368: ARRAY
84369: PUSH
84370: LD_VAR 0 2
84374: PUSH
84375: LD_INT 2
84377: ARRAY
84378: PUSH
84379: LD_INT 8
84381: PUSH
84382: EMPTY
84383: LIST
84384: LIST
84385: LIST
84386: LIST
84387: PUSH
84388: EMPTY
84389: LIST
84390: LIST
84391: PUSH
84392: EMPTY
84393: LIST
84394: LIST
84395: PPUSH
84396: CALL_OW 72
84400: ST_TO_ADDR
// if not vehicles then
84401: LD_VAR 0 1
84405: NOT
84406: IFFALSE 84410
// exit ;
84408: GO 84437
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84410: LD_VAR 0 1
84414: PPUSH
84415: LD_VAR 0 2
84419: PUSH
84420: LD_INT 1
84422: ARRAY
84423: PPUSH
84424: LD_VAR 0 2
84428: PUSH
84429: LD_INT 2
84431: ARRAY
84432: PPUSH
84433: CALL_OW 111
// end ;
84437: LD_VAR 0 3
84441: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84442: LD_INT 0
84444: PPUSH
84445: PPUSH
84446: PPUSH
// if not side or not area then
84447: LD_VAR 0 1
84451: NOT
84452: PUSH
84453: LD_VAR 0 2
84457: NOT
84458: OR
84459: IFFALSE 84463
// exit ;
84461: GO 84582
// tmp := AreaToList ( area , 0 ) ;
84463: LD_ADDR_VAR 0 5
84467: PUSH
84468: LD_VAR 0 2
84472: PPUSH
84473: LD_INT 0
84475: PPUSH
84476: CALL_OW 517
84480: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84481: LD_ADDR_VAR 0 4
84485: PUSH
84486: DOUBLE
84487: LD_INT 1
84489: DEC
84490: ST_TO_ADDR
84491: LD_VAR 0 5
84495: PUSH
84496: LD_INT 1
84498: ARRAY
84499: PUSH
84500: FOR_TO
84501: IFFALSE 84580
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84503: LD_VAR 0 5
84507: PUSH
84508: LD_INT 1
84510: ARRAY
84511: PUSH
84512: LD_VAR 0 4
84516: ARRAY
84517: PPUSH
84518: LD_VAR 0 5
84522: PUSH
84523: LD_INT 2
84525: ARRAY
84526: PUSH
84527: LD_VAR 0 4
84531: ARRAY
84532: PPUSH
84533: CALL_OW 351
84537: IFFALSE 84578
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84539: LD_VAR 0 5
84543: PUSH
84544: LD_INT 1
84546: ARRAY
84547: PUSH
84548: LD_VAR 0 4
84552: ARRAY
84553: PPUSH
84554: LD_VAR 0 5
84558: PUSH
84559: LD_INT 2
84561: ARRAY
84562: PUSH
84563: LD_VAR 0 4
84567: ARRAY
84568: PPUSH
84569: LD_VAR 0 1
84573: PPUSH
84574: CALL_OW 244
// end ;
84578: GO 84500
84580: POP
84581: POP
// end ; end_of_file
84582: LD_VAR 0 3
84586: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84587: LD_VAR 0 1
84591: PUSH
84592: LD_INT 200
84594: DOUBLE
84595: GREATEREQUAL
84596: IFFALSE 84604
84598: LD_INT 299
84600: DOUBLE
84601: LESSEQUAL
84602: IFTRUE 84606
84604: GO 84638
84606: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84607: LD_VAR 0 1
84611: PPUSH
84612: LD_VAR 0 2
84616: PPUSH
84617: LD_VAR 0 3
84621: PPUSH
84622: LD_VAR 0 4
84626: PPUSH
84627: LD_VAR 0 5
84631: PPUSH
84632: CALL 37003 0 5
84636: GO 84715
84638: LD_INT 300
84640: DOUBLE
84641: GREATEREQUAL
84642: IFFALSE 84650
84644: LD_INT 399
84646: DOUBLE
84647: LESSEQUAL
84648: IFTRUE 84652
84650: GO 84714
84652: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84653: LD_VAR 0 1
84657: PPUSH
84658: LD_VAR 0 2
84662: PPUSH
84663: LD_VAR 0 3
84667: PPUSH
84668: LD_VAR 0 4
84672: PPUSH
84673: LD_VAR 0 5
84677: PPUSH
84678: LD_VAR 0 6
84682: PPUSH
84683: LD_VAR 0 7
84687: PPUSH
84688: LD_VAR 0 8
84692: PPUSH
84693: LD_VAR 0 9
84697: PPUSH
84698: LD_VAR 0 10
84702: PPUSH
84703: LD_VAR 0 11
84707: PPUSH
84708: CALL 32991 0 11
84712: GO 84715
84714: POP
// end ;
84715: PPOPN 11
84717: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84718: LD_VAR 0 1
84722: PPUSH
84723: LD_VAR 0 2
84727: PPUSH
84728: LD_VAR 0 3
84732: PPUSH
84733: LD_VAR 0 4
84737: PPUSH
84738: LD_VAR 0 5
84742: PPUSH
84743: CALL 36468 0 5
// end ; end_of_file
84747: PPOPN 5
84749: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84750: LD_VAR 0 1
84754: PPUSH
84755: LD_VAR 0 2
84759: PPUSH
84760: LD_VAR 0 3
84764: PPUSH
84765: LD_VAR 0 4
84769: PPUSH
84770: LD_VAR 0 5
84774: PPUSH
84775: LD_VAR 0 6
84779: PPUSH
84780: CALL 20643 0 6
// end ;
84784: PPOPN 6
84786: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84787: LD_INT 0
84789: PPUSH
// begin if not units then
84790: LD_VAR 0 1
84794: NOT
84795: IFFALSE 84799
// exit ;
84797: GO 84799
// end ;
84799: PPOPN 7
84801: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84802: CALL 20530 0 0
// end ;
84806: PPOPN 1
84808: END
