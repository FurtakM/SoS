// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 217 0 0
// PrepareRussian ;
  23: CALL 8297 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 70694 0 9
// Action ;
  79: CALL 13748 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 9
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 5
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 6
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 7
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 8
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// end ;
 167: LD_VAR 0 1
 171: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 172: LD_INT 22
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 34
 184: PUSH
 185: LD_INT 6
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 69
 200: PUSH
 201: LD_INT 6
 203: GREATEREQUAL
 204: IFFALSE 216
 206: GO 208
 208: DISABLE
// SetAchievement ( ACH_ARMOR ) ; end_of_file
 209: LD_STRING ACH_ARMOR
 211: PPUSH
 212: CALL_OW 543
 216: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 217: LD_INT 0
 219: PPUSH
 220: PPUSH
 221: PPUSH
 222: PPUSH
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 1 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// uc_nation := 1 ;
 243: LD_ADDR_OWVAR 21
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// PrepareGammaBase ;
 251: CALL 2412 0 0
// x := 52 ;
 255: LD_ADDR_VAR 0 13
 259: PUSH
 260: LD_INT 52
 262: ST_TO_ADDR
// y := 16 ;
 263: LD_ADDR_VAR 0 14
 267: PUSH
 268: LD_INT 16
 270: ST_TO_ADDR
// case gammaCommander of 1 :
 271: LD_EXP 9
 275: PUSH
 276: LD_INT 1
 278: DOUBLE
 279: EQUAL
 280: IFTRUE 284
 282: GO 369
 284: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 285: LD_ADDR_EXP 12
 289: PUSH
 290: LD_STRING Donaldson
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_STRING 04_
 298: PPUSH
 299: CALL 37331 0 3
 303: ST_TO_ADDR
// if HexInfo ( x , y ) then
 304: LD_VAR 0 13
 308: PPUSH
 309: LD_VAR 0 14
 313: PPUSH
 314: CALL_OW 428
 318: IFFALSE 336
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 320: LD_EXP 12
 324: PPUSH
 325: LD_EXP 26
 329: PPUSH
 330: CALL_OW 52
 334: GO 358
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 336: LD_EXP 12
 340: PPUSH
 341: LD_VAR 0 13
 345: PPUSH
 346: LD_VAR 0 14
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 48
// ComHold ( Donaldson ) ;
 358: LD_EXP 12
 362: PPUSH
 363: CALL_OW 140
// end ; 2 :
 367: GO 556
 369: LD_INT 2
 371: DOUBLE
 372: EQUAL
 373: IFTRUE 377
 375: GO 462
 377: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 378: LD_ADDR_EXP 11
 382: PUSH
 383: LD_STRING Brown
 385: PPUSH
 386: LD_INT 1
 388: PPUSH
 389: LD_STRING 04_
 391: PPUSH
 392: CALL 37331 0 3
 396: ST_TO_ADDR
// if HexInfo ( x , y ) then
 397: LD_VAR 0 13
 401: PPUSH
 402: LD_VAR 0 14
 406: PPUSH
 407: CALL_OW 428
 411: IFFALSE 429
// PlaceHumanInUnit ( Brown , amDepot ) else
 413: LD_EXP 11
 417: PPUSH
 418: LD_EXP 26
 422: PPUSH
 423: CALL_OW 52
 427: GO 451
// PlaceUnitXY ( Brown , x , y , false ) ;
 429: LD_EXP 11
 433: PPUSH
 434: LD_VAR 0 13
 438: PPUSH
 439: LD_VAR 0 14
 443: PPUSH
 444: LD_INT 0
 446: PPUSH
 447: CALL_OW 48
// ComHold ( Brown ) ;
 451: LD_EXP 11
 455: PPUSH
 456: CALL_OW 140
// end ; 3 :
 460: GO 556
 462: LD_INT 3
 464: DOUBLE
 465: EQUAL
 466: IFTRUE 470
 468: GO 555
 470: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 471: LD_ADDR_EXP 20
 475: PUSH
 476: LD_STRING VanHouten
 478: PPUSH
 479: LD_INT 0
 481: PPUSH
 482: LD_STRING 
 484: PPUSH
 485: CALL 37331 0 3
 489: ST_TO_ADDR
// if HexInfo ( x , y ) then
 490: LD_VAR 0 13
 494: PPUSH
 495: LD_VAR 0 14
 499: PPUSH
 500: CALL_OW 428
 504: IFFALSE 522
// PlaceHumanInUnit ( Houten , amDepot ) else
 506: LD_EXP 20
 510: PPUSH
 511: LD_EXP 26
 515: PPUSH
 516: CALL_OW 52
 520: GO 544
// PlaceUnitXY ( Houten , x , y , false ) ;
 522: LD_EXP 20
 526: PPUSH
 527: LD_VAR 0 13
 531: PPUSH
 532: LD_VAR 0 14
 536: PPUSH
 537: LD_INT 0
 539: PPUSH
 540: CALL_OW 48
// ComHold ( Houten ) ;
 544: LD_EXP 20
 548: PPUSH
 549: CALL_OW 140
// end ; end ;
 553: GO 556
 555: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 556: LD_ADDR_EXP 24
 560: PUSH
 561: LD_STRING Harisson
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: LD_STRING 
 569: PPUSH
 570: CALL 37331 0 3
 574: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 575: LD_ADDR_EXP 25
 579: PUSH
 580: LD_STRING Powell
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: LD_STRING 
 588: PPUSH
 589: CALL 37331 0 3
 593: ST_TO_ADDR
// tmp := [ ] ;
 594: LD_ADDR_VAR 0 4
 598: PUSH
 599: EMPTY
 600: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 601: LD_STRING 04_Lisa
 603: PUSH
 604: EMPTY
 605: LIST
 606: PPUSH
 607: CALL_OW 28
 611: PUSH
 612: LD_STRING LisaInDelta
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 30
 622: NOT
 623: AND
 624: PUSH
 625: LD_STRING 07_Lisa
 627: PUSH
 628: EMPTY
 629: LIST
 630: PPUSH
 631: CALL_OW 28
 635: NOT
 636: AND
 637: IFFALSE 680
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 639: LD_ADDR_EXP 15
 643: PUSH
 644: LD_STRING Lisa
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: LD_STRING 04_
 652: PPUSH
 653: CALL 37331 0 3
 657: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 658: LD_ADDR_VAR 0 5
 662: PUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: LD_EXP 15
 672: PPUSH
 673: CALL 74012 0 2
 677: ST_TO_ADDR
// end else
 678: GO 739
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 680: LD_EXP 15
 684: NOT
 685: PUSH
 686: LD_STRING LisaIn07
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 30
 696: NOT
 697: AND
 698: IFFALSE 739
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 700: LD_ADDR_EXP 15
 704: PUSH
 705: LD_STRING Lisa
 707: PPUSH
 708: LD_INT 1
 710: PPUSH
 711: LD_STRING 07_
 713: PPUSH
 714: CALL 37331 0 3
 718: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 719: LD_ADDR_VAR 0 5
 723: PUSH
 724: LD_VAR 0 5
 728: PPUSH
 729: LD_EXP 15
 733: PPUSH
 734: CALL 74012 0 2
 738: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 739: LD_STRING 04_Bobby
 741: PUSH
 742: EMPTY
 743: LIST
 744: PPUSH
 745: CALL_OW 28
 749: PUSH
 750: LD_STRING BobbyInDelta
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: CALL_OW 30
 760: NOT
 761: AND
 762: PUSH
 763: LD_STRING 07_Bobby
 765: PUSH
 766: EMPTY
 767: LIST
 768: PPUSH
 769: CALL_OW 28
 773: NOT
 774: AND
 775: IFFALSE 818
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING Bobby
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: LD_STRING 04_
 790: PPUSH
 791: CALL 37331 0 3
 795: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 796: LD_ADDR_VAR 0 5
 800: PUSH
 801: LD_VAR 0 5
 805: PPUSH
 806: LD_EXP 13
 810: PPUSH
 811: CALL 74012 0 2
 815: ST_TO_ADDR
// end else
 816: GO 877
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 818: LD_EXP 13
 822: NOT
 823: PUSH
 824: LD_STRING BobbyIn07
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 30
 834: NOT
 835: AND
 836: IFFALSE 877
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 838: LD_ADDR_EXP 13
 842: PUSH
 843: LD_STRING Bobby
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_STRING 07_
 851: PPUSH
 852: CALL 37331 0 3
 856: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 5
 866: PPUSH
 867: LD_EXP 13
 871: PPUSH
 872: CALL 74012 0 2
 876: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 877: LD_STRING 04_Cyrus
 879: PUSH
 880: EMPTY
 881: LIST
 882: PPUSH
 883: CALL_OW 28
 887: PUSH
 888: LD_STRING CyrusInDelta
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 30
 898: NOT
 899: AND
 900: PUSH
 901: LD_STRING 07_Cyrus
 903: PUSH
 904: EMPTY
 905: LIST
 906: PPUSH
 907: CALL_OW 28
 911: NOT
 912: AND
 913: IFFALSE 956
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 915: LD_ADDR_EXP 14
 919: PUSH
 920: LD_STRING Cyrus
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: LD_STRING 04_
 928: PPUSH
 929: CALL 37331 0 3
 933: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 934: LD_ADDR_VAR 0 5
 938: PUSH
 939: LD_VAR 0 5
 943: PPUSH
 944: LD_EXP 14
 948: PPUSH
 949: CALL 74012 0 2
 953: ST_TO_ADDR
// end else
 954: GO 1015
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
 956: LD_EXP 14
 960: NOT
 961: PUSH
 962: LD_STRING CyrusIn07
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 30
 972: NOT
 973: AND
 974: IFFALSE 1015
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 976: LD_ADDR_EXP 14
 980: PUSH
 981: LD_STRING Cyrus
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_STRING 07_
 989: PPUSH
 990: CALL 37331 0 3
 994: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 995: LD_ADDR_VAR 0 5
 999: PUSH
1000: LD_VAR 0 5
1004: PPUSH
1005: LD_EXP 14
1009: PPUSH
1010: CALL 74012 0 2
1014: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1015: LD_STRING 04_Brown
1017: PUSH
1018: EMPTY
1019: LIST
1020: PPUSH
1021: CALL_OW 28
1025: PUSH
1026: LD_STRING BrownInDelta
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 30
1036: NOT
1037: AND
1038: PUSH
1039: LD_STRING 07_Brown
1041: PUSH
1042: EMPTY
1043: LIST
1044: PPUSH
1045: CALL_OW 28
1049: NOT
1050: AND
1051: PUSH
1052: LD_EXP 9
1056: PUSH
1057: LD_INT 2
1059: NONEQUAL
1060: AND
1061: IFFALSE 1104
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1063: LD_ADDR_EXP 11
1067: PUSH
1068: LD_STRING Brown
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_STRING 04_
1076: PPUSH
1077: CALL 37331 0 3
1081: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: LD_EXP 11
1096: PPUSH
1097: CALL 74012 0 2
1101: ST_TO_ADDR
// end else
1102: GO 1173
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1104: LD_EXP 11
1108: NOT
1109: PUSH
1110: LD_STRING BrownIn07
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: CALL_OW 30
1120: NOT
1121: AND
1122: PUSH
1123: LD_EXP 9
1127: PUSH
1128: LD_INT 2
1130: NONEQUAL
1131: AND
1132: IFFALSE 1173
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1134: LD_ADDR_EXP 11
1138: PUSH
1139: LD_STRING Brown
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_STRING 07_
1147: PPUSH
1148: CALL 37331 0 3
1152: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1153: LD_ADDR_VAR 0 5
1157: PUSH
1158: LD_VAR 0 5
1162: PPUSH
1163: LD_EXP 11
1167: PPUSH
1168: CALL 74012 0 2
1172: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1173: LD_STRING 04_Donaldson
1175: PUSH
1176: EMPTY
1177: LIST
1178: PPUSH
1179: CALL_OW 28
1183: PUSH
1184: LD_STRING DonaldsonInDelta
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 30
1194: NOT
1195: AND
1196: PUSH
1197: LD_STRING 07_Donaldson
1199: PUSH
1200: EMPTY
1201: LIST
1202: PPUSH
1203: CALL_OW 28
1207: NOT
1208: AND
1209: PUSH
1210: LD_EXP 9
1214: PUSH
1215: LD_INT 1
1217: NONEQUAL
1218: AND
1219: IFFALSE 1262
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1221: LD_ADDR_EXP 12
1225: PUSH
1226: LD_STRING Donaldson
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_STRING 04_
1234: PPUSH
1235: CALL 37331 0 3
1239: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1240: LD_ADDR_VAR 0 5
1244: PUSH
1245: LD_VAR 0 5
1249: PPUSH
1250: LD_EXP 12
1254: PPUSH
1255: CALL 74012 0 2
1259: ST_TO_ADDR
// end else
1260: GO 1331
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1262: LD_EXP 12
1266: NOT
1267: PUSH
1268: LD_STRING DonaldsonIn07
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 30
1278: NOT
1279: AND
1280: PUSH
1281: LD_EXP 9
1285: PUSH
1286: LD_INT 1
1288: NONEQUAL
1289: AND
1290: IFFALSE 1331
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1292: LD_ADDR_EXP 12
1296: PUSH
1297: LD_STRING Donaldson
1299: PPUSH
1300: LD_INT 1
1302: PPUSH
1303: LD_STRING 07_
1305: PPUSH
1306: CALL 37331 0 3
1310: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1311: LD_ADDR_VAR 0 5
1315: PUSH
1316: LD_VAR 0 5
1320: PPUSH
1321: LD_EXP 12
1325: PPUSH
1326: CALL 74012 0 2
1330: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1331: LD_STRING KhatamIn07
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 30
1341: NOT
1342: IFFALSE 1383
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1344: LD_ADDR_EXP 19
1348: PUSH
1349: LD_STRING Khatam
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_STRING 07_
1357: PPUSH
1358: CALL 37331 0 3
1362: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 5
1372: PPUSH
1373: LD_EXP 19
1377: PPUSH
1378: CALL 74012 0 2
1382: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1383: LD_ADDR_VAR 0 6
1387: PUSH
1388: LD_STRING 07_othersGamma
1390: PPUSH
1391: CALL_OW 31
1395: ST_TO_ADDR
// tmp := 5 - others ;
1396: LD_ADDR_VAR 0 4
1400: PUSH
1401: LD_INT 5
1403: PUSH
1404: LD_VAR 0 6
1408: MINUS
1409: ST_TO_ADDR
// if tmp then
1410: LD_VAR 0 4
1414: IFFALSE 1471
// for i := tmp downto 1 do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: DOUBLE
1422: LD_VAR 0 4
1426: INC
1427: ST_TO_ADDR
1428: LD_INT 1
1430: PUSH
1431: FOR_DOWNTO
1432: IFFALSE 1469
// begin PrepareHuman ( false , 1 , 5 ) ;
1434: LD_INT 0
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: LD_INT 5
1442: PPUSH
1443: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1447: LD_ADDR_VAR 0 6
1451: PUSH
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL_OW 44
1461: PPUSH
1462: CALL 74012 0 2
1466: ST_TO_ADDR
// end ;
1467: GO 1431
1469: POP
1470: POP
// for i in others do
1471: LD_ADDR_VAR 0 2
1475: PUSH
1476: LD_VAR 0 6
1480: PUSH
1481: FOR_IN
1482: IFFALSE 1498
// SetTag ( i , 106 ) ;
1484: LD_VAR 0 2
1488: PPUSH
1489: LD_INT 106
1491: PPUSH
1492: CALL_OW 109
1496: GO 1481
1498: POP
1499: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1500: LD_ADDR_VAR 0 8
1504: PUSH
1505: LD_INT 22
1507: PUSH
1508: LD_INT 1
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 30
1517: PUSH
1518: LD_INT 31
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PPUSH
1529: CALL_OW 69
1533: ST_TO_ADDR
// for i in bun do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: LD_VAR 0 8
1543: PUSH
1544: FOR_IN
1545: IFFALSE 1677
// begin x := GetX ( i ) ;
1547: LD_ADDR_VAR 0 13
1551: PUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 250
1561: ST_TO_ADDR
// y := GetY ( i ) ;
1562: LD_ADDR_VAR 0 14
1566: PUSH
1567: LD_VAR 0 2
1571: PPUSH
1572: CALL_OW 251
1576: ST_TO_ADDR
// d := GetDir ( i ) ;
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 2
1586: PPUSH
1587: CALL_OW 254
1591: ST_TO_ADDR
// RemoveUnit ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 64
// bc_type := b_bunker ;
1601: LD_ADDR_OWVAR 42
1605: PUSH
1606: LD_INT 32
1608: ST_TO_ADDR
// bc_level := 6 ;
1609: LD_ADDR_OWVAR 43
1613: PUSH
1614: LD_INT 6
1616: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1617: LD_ADDR_VAR 0 16
1621: PUSH
1622: LD_VAR 0 13
1626: PPUSH
1627: LD_VAR 0 14
1631: PPUSH
1632: LD_VAR 0 15
1636: PPUSH
1637: CALL_OW 47
1641: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1642: LD_VAR 0 16
1646: PPUSH
1647: LD_INT 5
1649: PUSH
1650: LD_INT 4
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_VAR 0 2
1661: PUSH
1662: LD_INT 2
1664: MOD
1665: PUSH
1666: LD_INT 1
1668: PLUS
1669: ARRAY
1670: PPUSH
1671: CALL_OW 431
// end ;
1675: GO 1544
1677: POP
1678: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1679: LD_ADDR_VAR 0 7
1683: PUSH
1684: LD_INT 22
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 30
1696: PUSH
1697: LD_INT 5
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PPUSH
1708: CALL_OW 69
1712: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1713: LD_ADDR_VAR 0 9
1717: PUSH
1718: LD_INT 22
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 2
1730: PUSH
1731: LD_INT 30
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 30
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_INT 30
1753: PUSH
1754: LD_INT 8
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PPUSH
1771: CALL_OW 69
1775: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1776: LD_ADDR_VAR 0 10
1780: PUSH
1781: LD_INT 22
1783: PUSH
1784: LD_INT 1
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 30
1793: PUSH
1794: LD_INT 3
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 69
1809: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1810: LD_ADDR_VAR 0 11
1814: PUSH
1815: LD_INT 22
1817: PUSH
1818: LD_INT 1
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 30
1827: PUSH
1828: LD_INT 36
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL_OW 69
1843: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1844: LD_ADDR_VAR 0 8
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 30
1864: PUSH
1865: LD_INT 31
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 32
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// for i in others union tmp2 do
1896: LD_ADDR_VAR 0 2
1900: PUSH
1901: LD_VAR 0 6
1905: PUSH
1906: LD_VAR 0 5
1910: UNION
1911: PUSH
1912: FOR_IN
1913: IFFALSE 2405
// begin placed := false ;
1915: LD_ADDR_VAR 0 12
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1923: LD_VAR 0 2
1927: PPUSH
1928: CALL_OW 257
1932: PUSH
1933: LD_INT 1
1935: EQUAL
1936: IFFALSE 2061
// begin if UnitFilter ( bun , [ f_empty ] ) then
1938: LD_VAR 0 8
1942: PPUSH
1943: LD_INT 58
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 72
1953: IFFALSE 1992
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1955: LD_VAR 0 2
1959: PPUSH
1960: LD_VAR 0 8
1964: PPUSH
1965: LD_INT 58
1967: PUSH
1968: EMPTY
1969: LIST
1970: PPUSH
1971: CALL_OW 72
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: CALL_OW 52
// placed := true ;
1984: LD_ADDR_VAR 0 12
1988: PUSH
1989: LD_INT 1
1991: ST_TO_ADDR
// end ; if arm and not placed then
1992: LD_VAR 0 7
1996: PUSH
1997: LD_VAR 0 12
2001: NOT
2002: AND
2003: IFFALSE 2061
// begin for j in arm do
2005: LD_ADDR_VAR 0 3
2009: PUSH
2010: LD_VAR 0 7
2014: PUSH
2015: FOR_IN
2016: IFFALSE 2059
// if UnitsInside ( j ) < 6 then
2018: LD_VAR 0 3
2022: PPUSH
2023: CALL_OW 313
2027: PUSH
2028: LD_INT 6
2030: LESS
2031: IFFALSE 2057
// begin PlaceHumanInUnit ( i , j ) ;
2033: LD_VAR 0 2
2037: PPUSH
2038: LD_VAR 0 3
2042: PPUSH
2043: CALL_OW 52
// placed := true ;
2047: LD_ADDR_VAR 0 12
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// break ;
2055: GO 2059
// end ;
2057: GO 2015
2059: POP
2060: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2061: LD_VAR 0 2
2065: PPUSH
2066: CALL_OW 257
2070: PUSH
2071: LD_INT 2
2073: EQUAL
2074: IFFALSE 2107
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2076: LD_VAR 0 2
2080: PPUSH
2081: LD_INT 52
2083: PPUSH
2084: LD_INT 20
2086: PPUSH
2087: LD_INT 6
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 50
// placed := true ;
2097: LD_ADDR_VAR 0 12
2101: PUSH
2102: LD_INT 1
2104: ST_TO_ADDR
// continue ;
2105: GO 1912
// end ; if GetClass ( i ) = class_mechanic then
2107: LD_VAR 0 2
2111: PPUSH
2112: CALL_OW 257
2116: PUSH
2117: LD_INT 3
2119: EQUAL
2120: IFFALSE 2224
// begin if fac then
2122: LD_VAR 0 10
2126: IFFALSE 2224
// begin if ct then
2128: LD_VAR 0 11
2132: IFFALSE 2160
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_VAR 0 11
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: CALL_OW 52
// placed := true ;
2152: LD_ADDR_VAR 0 12
2156: PUSH
2157: LD_INT 1
2159: ST_TO_ADDR
// end ; if placed then
2160: LD_VAR 0 12
2164: IFFALSE 2168
// continue ;
2166: GO 1912
// for j in fac do
2168: LD_ADDR_VAR 0 3
2172: PUSH
2173: LD_VAR 0 10
2177: PUSH
2178: FOR_IN
2179: IFFALSE 2222
// if UnitsInside ( j ) < 6 then
2181: LD_VAR 0 3
2185: PPUSH
2186: CALL_OW 313
2190: PUSH
2191: LD_INT 6
2193: LESS
2194: IFFALSE 2220
// begin PlaceHumanInUnit ( i , j ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_VAR 0 3
2205: PPUSH
2206: CALL_OW 52
// placed := true ;
2210: LD_ADDR_VAR 0 12
2214: PUSH
2215: LD_INT 1
2217: ST_TO_ADDR
// break ;
2218: GO 2222
// end ;
2220: GO 2178
2222: POP
2223: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2224: LD_VAR 0 2
2228: PPUSH
2229: CALL_OW 257
2233: PUSH
2234: LD_INT 4
2236: EQUAL
2237: IFFALSE 2332
// begin if lab then
2239: LD_VAR 0 9
2243: IFFALSE 2301
// begin for j in lab do
2245: LD_ADDR_VAR 0 3
2249: PUSH
2250: LD_VAR 0 9
2254: PUSH
2255: FOR_IN
2256: IFFALSE 2299
// if UnitsInside ( j ) < 6 then
2258: LD_VAR 0 3
2262: PPUSH
2263: CALL_OW 313
2267: PUSH
2268: LD_INT 6
2270: LESS
2271: IFFALSE 2297
// begin PlaceHumanInUnit ( i , j ) ;
2273: LD_VAR 0 2
2277: PPUSH
2278: LD_VAR 0 3
2282: PPUSH
2283: CALL_OW 52
// placed := true ;
2287: LD_ADDR_VAR 0 12
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// break ;
2295: GO 2299
// end ;
2297: GO 2255
2299: POP
2300: POP
// end ; if not placed then
2301: LD_VAR 0 12
2305: NOT
2306: IFFALSE 2332
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2308: LD_VAR 0 2
2312: PPUSH
2313: LD_INT 3
2315: PPUSH
2316: LD_INT 0
2318: PPUSH
2319: CALL_OW 49
// ComHold ( i ) ;
2323: LD_VAR 0 2
2327: PPUSH
2328: CALL_OW 140
// end ; end ; if ct then
2332: LD_VAR 0 11
2336: IFFALSE 2403
// if UnitsInside ( ct [ 1 ] ) then
2338: LD_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ARRAY
2346: PPUSH
2347: CALL_OW 313
2351: IFFALSE 2403
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2353: LD_ADDR_VAR 0 2
2357: PUSH
2358: LD_INT 22
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PUSH
2368: LD_INT 33
2370: PUSH
2371: LD_INT 2
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PPUSH
2382: CALL_OW 69
2386: PUSH
2387: FOR_IN
2388: IFFALSE 2401
// Connect ( i ) ;
2390: LD_VAR 0 2
2394: PPUSH
2395: CALL 45288 0 1
2399: GO 2387
2401: POP
2402: POP
// end ; end ;
2403: GO 1912
2405: POP
2406: POP
// end ;
2407: LD_VAR 0 1
2411: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2412: LD_INT 0
2414: PPUSH
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2420: LD_INT 71
2422: PPUSH
2423: LD_INT 5
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: LD_STRING GammaBase
2440: PPUSH
2441: EMPTY
2442: PPUSH
2443: CALL_OW 30
2447: ST_TO_ADDR
// if not blist then
2448: LD_VAR 0 2
2452: NOT
2453: IFFALSE 2493
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: PUSH
2463: LD_INT 52
2465: PUSH
2466: LD_INT 12
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: LD_INT 3
2474: PUSH
2475: LD_INT 0
2477: PUSH
2478: LD_INT 0
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: PUSH
2490: EMPTY
2491: LIST
2492: ST_TO_ADDR
// uc_side := 1 ;
2493: LD_ADDR_OWVAR 20
2497: PUSH
2498: LD_INT 1
2500: ST_TO_ADDR
// uc_nation := 1 ;
2501: LD_ADDR_OWVAR 21
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// bc_kind1 := - 1 ;
2509: LD_ADDR_OWVAR 44
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: ST_TO_ADDR
// bc_kind2 := - 1 ;
2518: LD_ADDR_OWVAR 45
2522: PUSH
2523: LD_INT 1
2525: NEG
2526: ST_TO_ADDR
// for i in blist do
2527: LD_ADDR_VAR 0 3
2531: PUSH
2532: LD_VAR 0 2
2536: PUSH
2537: FOR_IN
2538: IFFALSE 2814
// begin bc_type := i [ 1 ] ;
2540: LD_ADDR_OWVAR 42
2544: PUSH
2545: LD_VAR 0 3
2549: PUSH
2550: LD_INT 1
2552: ARRAY
2553: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2554: LD_ADDR_OWVAR 43
2558: PUSH
2559: LD_VAR 0 3
2563: PUSH
2564: LD_INT 5
2566: ARRAY
2567: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2568: LD_OWVAR 42
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: LD_INT 7
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: IN
2583: IFFALSE 2649
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2585: LD_STRING 06_remoteVehs_1
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 30
2595: NOT
2596: IFFALSE 2624
// begin bc_type := b_lab_full ;
2598: LD_ADDR_OWVAR 42
2602: PUSH
2603: LD_INT 8
2605: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2606: LD_ADDR_OWVAR 44
2610: PUSH
2611: LD_INT 10
2613: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2614: LD_ADDR_OWVAR 45
2618: PUSH
2619: LD_INT 15
2621: ST_TO_ADDR
// end else
2622: GO 2649
// begin bc_type := b_lab_half ;
2624: LD_ADDR_OWVAR 42
2628: PUSH
2629: LD_INT 7
2631: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2632: LD_ADDR_OWVAR 44
2636: PUSH
2637: LD_INT 10
2639: ST_TO_ADDR
// bc_kind2 := - 1 ;
2640: LD_ADDR_OWVAR 45
2644: PUSH
2645: LD_INT 1
2647: NEG
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 26
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2537
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2537
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 26
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 26
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 26
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 26
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 26
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 71651 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 26
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 50420 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 26
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 50420 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 26
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 50420 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 26
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 50420 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 9
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 9
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 21
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 37331 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 21
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 22
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 37331 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 22
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4148: LD_STRING GladstoneIn07
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: CALL_OW 30
4158: NOT
4159: IFFALSE 4239
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4161: LD_ADDR_EXP 17
4165: PUSH
4166: LD_STRING Gladstone
4168: PPUSH
4169: LD_EXP 1
4173: NOT
4174: PPUSH
4175: LD_STRING 06c_
4177: PPUSH
4178: CALL 37331 0 3
4182: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4183: LD_EXP 17
4187: NOT
4188: PUSH
4189: LD_STRING GladstoneStayInDelta
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 30
4199: AND
4200: IFFALSE 4224
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4202: LD_ADDR_EXP 17
4206: PUSH
4207: LD_STRING Gladstone
4209: PPUSH
4210: LD_EXP 1
4214: NOT
4215: PPUSH
4216: LD_STRING 05_
4218: PPUSH
4219: CALL 37331 0 3
4223: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4224: LD_EXP 17
4228: PPUSH
4229: LD_INT 4
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4239: LD_STRING LisaStayInDelta
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 30
4249: IFFALSE 4285
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4251: LD_ADDR_EXP 15
4255: PUSH
4256: LD_STRING Lisa
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: LD_STRING 05_
4264: PPUSH
4265: CALL 37331 0 3
4269: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4270: LD_EXP 15
4274: PPUSH
4275: LD_INT 4
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4285: LD_STRING BobbyStayInDelta
4287: PPUSH
4288: LD_INT 0
4290: PPUSH
4291: CALL_OW 30
4295: IFFALSE 4331
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4297: LD_ADDR_EXP 13
4301: PUSH
4302: LD_STRING Bobby
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_STRING 05_
4310: PPUSH
4311: CALL 37331 0 3
4315: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4316: LD_EXP 13
4320: PPUSH
4321: LD_INT 4
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4331: LD_STRING CyrusStayInDelta
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 30
4341: IFFALSE 4377
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4343: LD_ADDR_EXP 14
4347: PUSH
4348: LD_STRING Cyrus
4350: PPUSH
4351: LD_INT 1
4353: PPUSH
4354: LD_STRING 05_
4356: PPUSH
4357: CALL 37331 0 3
4361: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4362: LD_EXP 14
4366: PPUSH
4367: LD_INT 4
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4377: LD_STRING BrownStayInDelta
4379: PPUSH
4380: LD_INT 0
4382: PPUSH
4383: CALL_OW 30
4387: IFFALSE 4423
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4389: LD_ADDR_EXP 11
4393: PUSH
4394: LD_STRING Brown
4396: PPUSH
4397: LD_INT 1
4399: PPUSH
4400: LD_STRING 05_
4402: PPUSH
4403: CALL 37331 0 3
4407: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4408: LD_EXP 11
4412: PPUSH
4413: LD_INT 4
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4423: LD_STRING DonaldsonStayInDelta
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 30
4433: IFFALSE 4469
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4435: LD_ADDR_EXP 12
4439: PUSH
4440: LD_STRING Donaldson
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_STRING 05_
4448: PPUSH
4449: CALL 37331 0 3
4453: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4454: LD_EXP 12
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4469: LD_ADDR_VAR 0 4
4473: PUSH
4474: LD_STRING OthersStayInDelta
4476: PPUSH
4477: CALL_OW 31
4481: ST_TO_ADDR
// if others > 2 then
4482: LD_VAR 0 4
4486: PUSH
4487: LD_INT 2
4489: GREATER
4490: IFFALSE 4553
// begin for j := 1 to 2 do
4492: LD_ADDR_VAR 0 3
4496: PUSH
4497: DOUBLE
4498: LD_INT 1
4500: DEC
4501: ST_TO_ADDR
4502: LD_INT 2
4504: PUSH
4505: FOR_TO
4506: IFFALSE 4549
// begin SetTag ( others [ j ] , 107 ) ;
4508: LD_VAR 0 4
4512: PUSH
4513: LD_VAR 0 3
4517: ARRAY
4518: PPUSH
4519: LD_INT 107
4521: PPUSH
4522: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4526: LD_VAR 0 4
4530: PUSH
4531: LD_VAR 0 3
4535: ARRAY
4536: PPUSH
4537: LD_INT 4
4539: PPUSH
4540: LD_INT 0
4542: PPUSH
4543: CALL_OW 49
// end ;
4547: GO 4505
4549: POP
4550: POP
// end else
4551: GO 4614
// begin for j := 1 to others do
4553: LD_ADDR_VAR 0 3
4557: PUSH
4558: DOUBLE
4559: LD_INT 1
4561: DEC
4562: ST_TO_ADDR
4563: LD_VAR 0 4
4567: PUSH
4568: FOR_TO
4569: IFFALSE 4612
// begin SetTag ( others [ i ] , 107 ) ;
4571: LD_VAR 0 4
4575: PUSH
4576: LD_VAR 0 2
4580: ARRAY
4581: PPUSH
4582: LD_INT 107
4584: PPUSH
4585: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4589: LD_VAR 0 4
4593: PUSH
4594: LD_VAR 0 3
4598: ARRAY
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: LD_INT 0
4605: PPUSH
4606: CALL_OW 49
// end ;
4610: GO 4568
4612: POP
4613: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4614: LD_ADDR_VAR 0 4
4618: PUSH
4619: LD_STRING 06_other_apemans
4621: PPUSH
4622: CALL_OW 31
4626: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4627: LD_VAR 0 4
4631: PUSH
4632: LD_INT 3
4634: PUSH
4635: LD_INT 2
4637: PUSH
4638: LD_INT 2
4640: PUSH
4641: LD_INT 1
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: PUSH
4650: LD_OWVAR 67
4654: ARRAY
4655: GREATEREQUAL
4656: IFFALSE 4689
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: LD_INT 3
4665: PUSH
4666: LD_INT 2
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 1
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: PUSH
4681: LD_OWVAR 67
4685: ARRAY
4686: ST_TO_ADDR
4687: GO 4699
// j := others ;
4689: LD_ADDR_VAR 0 3
4693: PUSH
4694: LD_VAR 0 4
4698: ST_TO_ADDR
// for i := 1 to j do
4699: LD_ADDR_VAR 0 2
4703: PUSH
4704: DOUBLE
4705: LD_INT 1
4707: DEC
4708: ST_TO_ADDR
4709: LD_VAR 0 3
4713: PUSH
4714: FOR_TO
4715: IFFALSE 4740
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4717: LD_VAR 0 4
4721: PUSH
4722: LD_VAR 0 2
4726: ARRAY
4727: PPUSH
4728: LD_INT 4
4730: PPUSH
4731: LD_INT 0
4733: PPUSH
4734: CALL_OW 49
4738: GO 4714
4740: POP
4741: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4742: LD_INT 4
4744: PPUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 1
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 21
4757: PUSH
4758: LD_INT 1
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PPUSH
4769: CALL_OW 70
4773: PPUSH
4774: LD_INT 53
4776: PPUSH
4777: LD_INT 19
4779: PPUSH
4780: CALL_OW 111
// end ;
4784: LD_VAR 0 1
4788: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4789: LD_INT 0
4791: PPUSH
4792: PPUSH
4793: PPUSH
4794: PPUSH
4795: PPUSH
4796: PPUSH
4797: PPUSH
4798: PPUSH
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
4805: PPUSH
// prefix := 07c_ ;
4806: LD_ADDR_VAR 0 11
4810: PUSH
4811: LD_STRING 07c_
4813: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4814: LD_ADDR_VAR 0 9
4818: PUSH
4819: LD_STRING 07_vehicles
4821: PPUSH
4822: EMPTY
4823: PPUSH
4824: CALL_OW 30
4828: ST_TO_ADDR
// if not vehicles and debug then
4829: LD_VAR 0 9
4833: NOT
4834: PUSH
4835: LD_EXP 1
4839: AND
4840: IFFALSE 4865
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4842: LD_ADDR_VAR 0 9
4846: PUSH
4847: LD_INT 2
4849: PUSH
4850: LD_INT 1
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: LD_INT 4
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: ST_TO_ADDR
// if not vehicles then
4865: LD_VAR 0 9
4869: NOT
4870: IFFALSE 4927
// begin area := westGammaSupportArea ;
4872: LD_ADDR_VAR 0 12
4876: PUSH
4877: LD_INT 16
4879: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4880: LD_ADDR_VAR 0 15
4884: PUSH
4885: LD_INT 37
4887: PUSH
4888: LD_INT 70
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4895: LD_ADDR_VAR 0 14
4899: PUSH
4900: LD_INT 43
4902: PUSH
4903: LD_INT 67
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: ST_TO_ADDR
// dir := 1 ;
4910: LD_ADDR_VAR 0 13
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4918: LD_INT 4200
4920: PPUSH
4921: CALL_OW 67
// end else
4925: GO 4973
// begin area := southGammaSupportArea ;
4927: LD_ADDR_VAR 0 12
4931: PUSH
4932: LD_INT 5
4934: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4935: LD_ADDR_VAR 0 15
4939: PUSH
4940: LD_INT 87
4942: PUSH
4943: LD_INT 147
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4950: LD_ADDR_VAR 0 14
4954: PUSH
4955: LD_INT 74
4957: PUSH
4958: LD_INT 129
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: ST_TO_ADDR
// dir := 0 ;
4965: LD_ADDR_VAR 0 13
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// end ; squad := [ ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: EMPTY
4979: ST_TO_ADDR
// tmp := [ ] ;
4980: LD_ADDR_VAR 0 7
4984: PUSH
4985: EMPTY
4986: ST_TO_ADDR
// tmpVehs := [ ] ;
4987: LD_ADDR_VAR 0 8
4991: PUSH
4992: EMPTY
4993: ST_TO_ADDR
// uc_side := 1 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// if vehicles then
5010: LD_VAR 0 9
5014: IFFALSE 5170
// begin k := 1 ;
5016: LD_ADDR_VAR 0 3
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: DOUBLE
5030: LD_INT 1
5032: DEC
5033: ST_TO_ADDR
5034: LD_VAR 0 9
5038: PUSH
5039: LD_INT 4
5041: DIV
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5168
// begin vc_chassis := vehicles [ k ] ;
5046: LD_ADDR_OWVAR 37
5050: PUSH
5051: LD_VAR 0 9
5055: PUSH
5056: LD_VAR 0 3
5060: ARRAY
5061: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
5062: LD_ADDR_OWVAR 39
5066: PUSH
5067: LD_VAR 0 9
5071: PUSH
5072: LD_VAR 0 3
5076: PUSH
5077: LD_INT 1
5079: PLUS
5080: ARRAY
5081: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
5082: LD_ADDR_OWVAR 38
5086: PUSH
5087: LD_VAR 0 9
5091: PUSH
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 2
5099: PLUS
5100: ARRAY
5101: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
5102: LD_ADDR_OWVAR 40
5106: PUSH
5107: LD_VAR 0 9
5111: PUSH
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 3
5119: PLUS
5120: ARRAY
5121: ST_TO_ADDR
// k := k + 4 ;
5122: LD_ADDR_VAR 0 3
5126: PUSH
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 4
5134: PLUS
5135: ST_TO_ADDR
// veh := CreateVehicle ;
5136: LD_ADDR_VAR 0 10
5140: PUSH
5141: CALL_OW 45
5145: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5146: LD_ADDR_VAR 0 8
5150: PUSH
5151: LD_VAR 0 8
5155: PPUSH
5156: LD_VAR 0 10
5160: PPUSH
5161: CALL 74012 0 2
5165: ST_TO_ADDR
// end ;
5166: GO 5043
5168: POP
5169: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5170: LD_ADDR_EXP 10
5174: PUSH
5175: LD_STRING JMM
5177: PPUSH
5178: LD_EXP 1
5182: NOT
5183: PPUSH
5184: LD_VAR 0 11
5188: PPUSH
5189: CALL 37331 0 3
5193: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5194: LD_EXP 9
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: IN
5209: PUSH
5210: LD_EXP 11
5214: NOT
5215: AND
5216: IFFALSE 5277
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5218: LD_ADDR_EXP 11
5222: PUSH
5223: LD_STRING Brown
5225: PPUSH
5226: LD_EXP 1
5230: NOT
5231: PPUSH
5232: LD_VAR 0 11
5236: PPUSH
5237: CALL 37331 0 3
5241: ST_TO_ADDR
// if Brown then
5242: LD_EXP 11
5246: IFFALSE 5277
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5248: LD_ADDR_VAR 0 7
5252: PUSH
5253: LD_VAR 0 7
5257: PPUSH
5258: LD_VAR 0 7
5262: PUSH
5263: LD_INT 1
5265: PLUS
5266: PPUSH
5267: LD_EXP 11
5271: PPUSH
5272: CALL_OW 1
5276: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5277: LD_EXP 9
5281: PUSH
5282: LD_INT 2
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: IN
5292: PUSH
5293: LD_EXP 12
5297: NOT
5298: AND
5299: IFFALSE 5360
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5301: LD_ADDR_EXP 12
5305: PUSH
5306: LD_STRING Donaldson
5308: PPUSH
5309: LD_EXP 1
5313: NOT
5314: PPUSH
5315: LD_VAR 0 11
5319: PPUSH
5320: CALL 37331 0 3
5324: ST_TO_ADDR
// if Donaldson then
5325: LD_EXP 12
5329: IFFALSE 5360
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5331: LD_ADDR_VAR 0 7
5335: PUSH
5336: LD_VAR 0 7
5340: PPUSH
5341: LD_VAR 0 7
5345: PUSH
5346: LD_INT 1
5348: PLUS
5349: PPUSH
5350: LD_EXP 12
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// end ; if not Bobby then
5360: LD_EXP 13
5364: NOT
5365: IFFALSE 5423
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5367: LD_ADDR_EXP 13
5371: PUSH
5372: LD_STRING Bobby
5374: PPUSH
5375: LD_INT 1
5377: PPUSH
5378: LD_VAR 0 11
5382: PPUSH
5383: CALL 37331 0 3
5387: ST_TO_ADDR
// if Bobby then
5388: LD_EXP 13
5392: IFFALSE 5423
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5394: LD_ADDR_VAR 0 7
5398: PUSH
5399: LD_VAR 0 7
5403: PPUSH
5404: LD_VAR 0 7
5408: PUSH
5409: LD_INT 1
5411: PLUS
5412: PPUSH
5413: LD_EXP 13
5417: PPUSH
5418: CALL_OW 1
5422: ST_TO_ADDR
// end ; if not Cyrus then
5423: LD_EXP 14
5427: NOT
5428: IFFALSE 5486
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5430: LD_ADDR_EXP 14
5434: PUSH
5435: LD_STRING Cyrus
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_VAR 0 11
5445: PPUSH
5446: CALL 37331 0 3
5450: ST_TO_ADDR
// if Cyrus then
5451: LD_EXP 14
5455: IFFALSE 5486
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5457: LD_ADDR_VAR 0 7
5461: PUSH
5462: LD_VAR 0 7
5466: PPUSH
5467: LD_VAR 0 7
5471: PUSH
5472: LD_INT 1
5474: PLUS
5475: PPUSH
5476: LD_EXP 14
5480: PPUSH
5481: CALL_OW 1
5485: ST_TO_ADDR
// end ; if not Lisa then
5486: LD_EXP 15
5490: NOT
5491: IFFALSE 5552
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5493: LD_ADDR_EXP 15
5497: PUSH
5498: LD_STRING Lisa
5500: PPUSH
5501: LD_EXP 1
5505: NOT
5506: PPUSH
5507: LD_VAR 0 11
5511: PPUSH
5512: CALL 37331 0 3
5516: ST_TO_ADDR
// if Lisa then
5517: LD_EXP 15
5521: IFFALSE 5552
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5523: LD_ADDR_VAR 0 7
5527: PUSH
5528: LD_VAR 0 7
5532: PPUSH
5533: LD_VAR 0 7
5537: PUSH
5538: LD_INT 1
5540: PLUS
5541: PPUSH
5542: LD_EXP 15
5546: PPUSH
5547: CALL_OW 1
5551: ST_TO_ADDR
// end ; if not Frank then
5552: LD_EXP 16
5556: NOT
5557: IFFALSE 5618
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5559: LD_ADDR_EXP 16
5563: PUSH
5564: LD_STRING Frank
5566: PPUSH
5567: LD_EXP 1
5571: NOT
5572: PPUSH
5573: LD_VAR 0 11
5577: PPUSH
5578: CALL 37331 0 3
5582: ST_TO_ADDR
// if Frank then
5583: LD_EXP 16
5587: IFFALSE 5618
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5589: LD_ADDR_VAR 0 7
5593: PUSH
5594: LD_VAR 0 7
5598: PPUSH
5599: LD_VAR 0 7
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: PPUSH
5608: LD_EXP 16
5612: PPUSH
5613: CALL_OW 1
5617: ST_TO_ADDR
// end ; if not Kikuchi then
5618: LD_EXP 18
5622: NOT
5623: IFFALSE 5681
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5625: LD_ADDR_EXP 18
5629: PUSH
5630: LD_STRING Kikuchi
5632: PPUSH
5633: LD_INT 1
5635: PPUSH
5636: LD_VAR 0 11
5640: PPUSH
5641: CALL 37331 0 3
5645: ST_TO_ADDR
// if Kikuchi then
5646: LD_EXP 18
5650: IFFALSE 5681
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5652: LD_ADDR_VAR 0 7
5656: PUSH
5657: LD_VAR 0 7
5661: PPUSH
5662: LD_VAR 0 7
5666: PUSH
5667: LD_INT 1
5669: PLUS
5670: PPUSH
5671: LD_EXP 18
5675: PPUSH
5676: CALL_OW 1
5680: ST_TO_ADDR
// end ; if not Gladstone then
5681: LD_EXP 17
5685: NOT
5686: IFFALSE 5747
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5688: LD_ADDR_EXP 17
5692: PUSH
5693: LD_STRING Gladstone
5695: PPUSH
5696: LD_EXP 1
5700: NOT
5701: PPUSH
5702: LD_VAR 0 11
5706: PPUSH
5707: CALL 37331 0 3
5711: ST_TO_ADDR
// if Gladstone then
5712: LD_EXP 17
5716: IFFALSE 5747
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5718: LD_ADDR_VAR 0 7
5722: PUSH
5723: LD_VAR 0 7
5727: PPUSH
5728: LD_VAR 0 7
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: PPUSH
5737: LD_EXP 17
5741: PPUSH
5742: CALL_OW 1
5746: ST_TO_ADDR
// end ; if not Khatam then
5747: LD_EXP 19
5751: NOT
5752: IFFALSE 5810
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5754: LD_ADDR_EXP 19
5758: PUSH
5759: LD_STRING Khatam
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: LD_VAR 0 11
5769: PPUSH
5770: CALL 37331 0 3
5774: ST_TO_ADDR
// if Khatam then
5775: LD_EXP 19
5779: IFFALSE 5810
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5781: LD_ADDR_VAR 0 7
5785: PUSH
5786: LD_VAR 0 7
5790: PPUSH
5791: LD_VAR 0 7
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_EXP 19
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5810: LD_ADDR_VAR 0 5
5814: PUSH
5815: LD_STRING 07c_others
5817: PPUSH
5818: CALL_OW 31
5822: ST_TO_ADDR
// squad := others ;
5823: LD_ADDR_VAR 0 6
5827: PUSH
5828: LD_VAR 0 5
5832: ST_TO_ADDR
// if others then
5833: LD_VAR 0 5
5837: IFFALSE 5937
// for i in others do
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: LD_VAR 0 5
5848: PUSH
5849: FOR_IN
5850: IFFALSE 5935
// begin SetTag ( i , 108 ) ;
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_INT 108
5859: PPUSH
5860: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5864: LD_VAR 0 2
5868: PPUSH
5869: CALL_OW 257
5873: PUSH
5874: LD_INT 3
5876: EQUAL
5877: IFFALSE 5904
// tmp := Insert ( tmp , 1 , i ) else
5879: LD_ADDR_VAR 0 7
5883: PUSH
5884: LD_VAR 0 7
5888: PPUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_VAR 0 2
5896: PPUSH
5897: CALL_OW 2
5901: ST_TO_ADDR
5902: GO 5933
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5904: LD_ADDR_VAR 0 7
5908: PUSH
5909: LD_VAR 0 7
5913: PPUSH
5914: LD_VAR 0 7
5918: PUSH
5919: LD_INT 1
5921: PLUS
5922: PPUSH
5923: LD_VAR 0 2
5927: PPUSH
5928: CALL_OW 1
5932: ST_TO_ADDR
// end ;
5933: GO 5849
5935: POP
5936: POP
// if tmp then
5937: LD_VAR 0 7
5941: IFFALSE 6141
// begin for i in tmp do
5943: LD_ADDR_VAR 0 2
5947: PUSH
5948: LD_VAR 0 7
5952: PUSH
5953: FOR_IN
5954: IFFALSE 6139
// begin SetDir ( i , dir ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_VAR 0 13
5965: PPUSH
5966: CALL_OW 233
// if tmpVehs then
5970: LD_VAR 0 8
5974: IFFALSE 6064
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5976: LD_VAR 0 8
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5992: LD_VAR 0 8
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PPUSH
6001: LD_VAR 0 15
6005: PUSH
6006: LD_INT 1
6008: ARRAY
6009: PPUSH
6010: LD_VAR 0 15
6014: PUSH
6015: LD_INT 2
6017: ARRAY
6018: PPUSH
6019: LD_INT 0
6021: PPUSH
6022: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 8
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6044: LD_ADDR_VAR 0 8
6048: PUSH
6049: LD_VAR 0 8
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: CALL_OW 3
6061: ST_TO_ADDR
// end else
6062: GO 6081
// PlaceUnitArea ( i , area , false ) ;
6064: LD_VAR 0 2
6068: PPUSH
6069: LD_VAR 0 12
6073: PPUSH
6074: LD_INT 0
6076: PPUSH
6077: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6081: LD_VAR 0 2
6085: PPUSH
6086: LD_VAR 0 14
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_VAR 0 14
6099: PUSH
6100: LD_INT 2
6102: ARRAY
6103: PPUSH
6104: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6115: LD_VAR 0 12
6119: PPUSH
6120: LD_INT 22
6122: PUSH
6123: LD_INT 1
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 70
6134: NOT
6135: IFFALSE 6108
// end ;
6137: GO 5953
6139: POP
6140: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6141: LD_EXP 10
6145: PPUSH
6146: LD_VAR 0 15
6150: PUSH
6151: LD_INT 1
6153: ARRAY
6154: PPUSH
6155: LD_VAR 0 15
6159: PUSH
6160: LD_INT 2
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6171: LD_EXP 10
6175: PPUSH
6176: LD_VAR 0 14
6180: PUSH
6181: LD_INT 1
6183: ARRAY
6184: PPUSH
6185: LD_VAR 0 14
6189: PUSH
6190: LD_INT 2
6192: ARRAY
6193: PPUSH
6194: CALL_OW 111
// jmmArrival := true ;
6198: LD_ADDR_EXP 7
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// end ;
6206: LD_VAR 0 1
6210: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6211: LD_INT 0
6213: PPUSH
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6218: LD_ADDR_VAR 0 5
6222: PUSH
6223: LD_INT 6
6225: PPUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 21
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 70
6247: ST_TO_ADDR
// if tmp then
6248: LD_VAR 0 5
6252: IFFALSE 6276
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 33
6261: PPUSH
6262: LD_INT 39
6264: PPUSH
6265: CALL_OW 111
// wait ( 0 0$3 ) ;
6269: LD_INT 105
6271: PPUSH
6272: CALL_OW 67
// end ; uc_side := 4 ;
6276: LD_ADDR_OWVAR 20
6280: PUSH
6281: LD_INT 4
6283: ST_TO_ADDR
// uc_nation := 1 ;
6284: LD_ADDR_OWVAR 21
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6292: LD_ADDR_EXP 23
6296: PUSH
6297: LD_STRING Sikorski
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_STRING 
6305: PPUSH
6306: CALL 37331 0 3
6310: ST_TO_ADDR
// vc_engine := engine_combustion ;
6311: LD_ADDR_OWVAR 39
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// vc_control = control_manual ;
6319: LD_ADDR_OWVAR 38
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// vc_weapon = [ us_heavy_gun , us_double_gun , us_double_gun , us_double_gun ] [ Difficulty ] ;
6327: LD_ADDR_OWVAR 40
6331: PUSH
6332: LD_INT 6
6334: PUSH
6335: LD_INT 5
6337: PUSH
6338: LD_INT 5
6340: PUSH
6341: LD_INT 5
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_OWVAR 67
6354: ARRAY
6355: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
6356: LD_ADDR_OWVAR 37
6360: PUSH
6361: LD_INT 4
6363: ST_TO_ADDR
// veh := CreateVehicle ;
6364: LD_ADDR_VAR 0 4
6368: PUSH
6369: CALL_OW 45
6373: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6374: LD_VAR 0 4
6378: PPUSH
6379: LD_INT 3
6381: PPUSH
6382: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6386: LD_VAR 0 4
6390: PPUSH
6391: LD_INT 4
6393: NEG
6394: PPUSH
6395: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6399: LD_VAR 0 4
6403: PPUSH
6404: LD_INT 70
6406: PPUSH
6407: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6411: LD_VAR 0 4
6415: PPUSH
6416: LD_INT 6
6418: PPUSH
6419: LD_INT 0
6421: PPUSH
6422: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6426: LD_EXP 23
6430: PPUSH
6431: LD_VAR 0 4
6435: PPUSH
6436: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6440: LD_EXP 23
6444: PPUSH
6445: LD_INT 37
6447: PPUSH
6448: LD_INT 30
6450: PPUSH
6451: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6455: LD_INT 10
6457: PPUSH
6458: CALL_OW 67
// InitHc_All ( ) ;
6462: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: DOUBLE
6472: LD_INT 1
6474: DEC
6475: ST_TO_ADDR
6476: LD_INT 3
6478: PUSH
6479: LD_INT 2
6481: PUSH
6482: LD_INT 2
6484: PUSH
6485: LD_INT 2
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: PUSH
6494: LD_OWVAR 67
6498: ARRAY
6499: PUSH
6500: FOR_TO
6501: IFFALSE 6613
// begin uc_side = 4 ;
6503: LD_ADDR_OWVAR 20
6507: PUSH
6508: LD_INT 4
6510: ST_TO_ADDR
// uc_nation = 1 ;
6511: LD_ADDR_OWVAR 21
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6519: LD_INT 0
6521: PPUSH
6522: LD_INT 1
6524: PPUSH
6525: LD_INT 4
6527: PPUSH
6528: LD_INT 7
6530: PPUSH
6531: CALL_OW 12
6535: PPUSH
6536: CALL_OW 380
// un := CreateHuman ;
6540: LD_ADDR_VAR 0 3
6544: PUSH
6545: CALL_OW 44
6549: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_INT 3
6557: PPUSH
6558: CALL_OW 233
// SetTag ( un , 101 ) ;
6562: LD_VAR 0 3
6566: PPUSH
6567: LD_INT 101
6569: PPUSH
6570: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6574: LD_VAR 0 3
6578: PPUSH
6579: LD_INT 6
6581: PPUSH
6582: LD_INT 0
6584: PPUSH
6585: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6589: LD_VAR 0 3
6593: PPUSH
6594: LD_INT 25
6596: PPUSH
6597: LD_INT 27
6599: PPUSH
6600: CALL_OW 111
// wait ( 0 0$1 ) ;
6604: LD_INT 35
6606: PPUSH
6607: CALL_OW 67
// end ;
6611: GO 6500
6613: POP
6614: POP
// for i := 1 to 2 do
6615: LD_ADDR_VAR 0 2
6619: PUSH
6620: DOUBLE
6621: LD_INT 1
6623: DEC
6624: ST_TO_ADDR
6625: LD_INT 2
6627: PUSH
6628: FOR_TO
6629: IFFALSE 6741
// begin uc_side = 4 ;
6631: LD_ADDR_OWVAR 20
6635: PUSH
6636: LD_INT 4
6638: ST_TO_ADDR
// uc_nation = 1 ;
6639: LD_ADDR_OWVAR 21
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6647: LD_INT 0
6649: PPUSH
6650: LD_INT 4
6652: PPUSH
6653: LD_INT 3
6655: PPUSH
6656: LD_INT 5
6658: PPUSH
6659: CALL_OW 12
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6678: LD_VAR 0 3
6682: PPUSH
6683: LD_INT 3
6685: PPUSH
6686: CALL_OW 233
// SetTag ( un , 101 ) ;
6690: LD_VAR 0 3
6694: PPUSH
6695: LD_INT 101
6697: PPUSH
6698: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6702: LD_VAR 0 3
6706: PPUSH
6707: LD_INT 6
6709: PPUSH
6710: LD_INT 0
6712: PPUSH
6713: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6717: LD_VAR 0 3
6721: PPUSH
6722: LD_INT 25
6724: PPUSH
6725: LD_INT 27
6727: PPUSH
6728: CALL_OW 111
// wait ( 0 0$1 ) ;
6732: LD_INT 35
6734: PPUSH
6735: CALL_OW 67
// end ;
6739: GO 6628
6741: POP
6742: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: DOUBLE
6749: LD_INT 1
6751: DEC
6752: ST_TO_ADDR
6753: LD_INT 5
6755: PUSH
6756: LD_INT 4
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 3
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_OWVAR 67
6775: ARRAY
6776: PUSH
6777: FOR_TO
6778: IFFALSE 7020
// begin uc_side := 4 ;
6780: LD_ADDR_OWVAR 20
6784: PUSH
6785: LD_INT 4
6787: ST_TO_ADDR
// uc_nation := 1 ;
6788: LD_ADDR_OWVAR 21
6792: PUSH
6793: LD_INT 1
6795: ST_TO_ADDR
// vc_engine := engine_combustion ;
6796: LD_ADDR_OWVAR 39
6800: PUSH
6801: LD_INT 1
6803: ST_TO_ADDR
// vc_control := control_manual ;
6804: LD_ADDR_OWVAR 38
6808: PUSH
6809: LD_INT 1
6811: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6812: LD_ADDR_OWVAR 40
6816: PUSH
6817: LD_INT 5
6819: PUSH
6820: LD_INT 7
6822: PUSH
6823: LD_INT 5
6825: PUSH
6826: LD_INT 4
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_VAR 0 2
6839: PUSH
6840: LD_INT 4
6842: MOD
6843: PUSH
6844: LD_INT 1
6846: PLUS
6847: ARRAY
6848: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6849: LD_ADDR_OWVAR 37
6853: PUSH
6854: LD_INT 3
6856: PUSH
6857: LD_INT 3
6859: PUSH
6860: LD_INT 4
6862: PUSH
6863: LD_INT 4
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: PUSH
6872: LD_VAR 0 2
6876: PUSH
6877: LD_INT 4
6879: MOD
6880: PUSH
6881: LD_INT 1
6883: PLUS
6884: ARRAY
6885: ST_TO_ADDR
// veh := CreateVehicle ;
6886: LD_ADDR_VAR 0 4
6890: PUSH
6891: CALL_OW 45
6895: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6896: LD_VAR 0 4
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: CALL_OW 233
// SetTag ( veh , 0 ) ;
6908: LD_VAR 0 4
6912: PPUSH
6913: LD_INT 0
6915: PPUSH
6916: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6920: LD_VAR 0 4
6924: PPUSH
6925: LD_INT 70
6927: PPUSH
6928: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_INT 6
6939: PPUSH
6940: LD_INT 0
6942: PPUSH
6943: CALL_OW 49
// InitHc ;
6947: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6951: LD_INT 0
6953: PPUSH
6954: LD_INT 3
6956: PPUSH
6957: LD_INT 4
6959: PPUSH
6960: LD_INT 7
6962: PPUSH
6963: CALL_OW 12
6967: PPUSH
6968: CALL_OW 380
// un := CreateHuman ;
6972: LD_ADDR_VAR 0 3
6976: PUSH
6977: CALL_OW 44
6981: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6982: LD_VAR 0 3
6986: PPUSH
6987: LD_VAR 0 4
6991: PPUSH
6992: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6996: LD_VAR 0 3
7000: PPUSH
7001: LD_INT 30
7003: PPUSH
7004: LD_INT 22
7006: PPUSH
7007: CALL_OW 111
// wait ( 0 0$3 ) ;
7011: LD_INT 105
7013: PPUSH
7014: CALL_OW 67
// end ;
7018: GO 6777
7020: POP
7021: POP
// wait ( 0 0$10 ) ;
7022: LD_INT 350
7024: PPUSH
7025: CALL_OW 67
// end ;
7029: LD_VAR 0 1
7033: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7034: LD_INT 0
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
// gammaBase := [ ] ;
7040: LD_ADDR_VAR 0 4
7044: PUSH
7045: EMPTY
7046: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7047: LD_ADDR_VAR 0 5
7051: PUSH
7052: LD_VAR 0 1
7056: PPUSH
7057: LD_INT 22
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 21
7069: PUSH
7070: LD_INT 3
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 50
7079: PUSH
7080: EMPTY
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: PPUSH
7088: CALL_OW 70
7092: ST_TO_ADDR
// for i in buildings do
7093: LD_ADDR_VAR 0 3
7097: PUSH
7098: LD_VAR 0 5
7102: PUSH
7103: FOR_IN
7104: IFFALSE 7541
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7106: LD_VAR 0 3
7110: PPUSH
7111: CALL_OW 266
7115: PUSH
7116: LD_INT 6
7118: PUSH
7119: LD_INT 7
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: IN
7130: IFFALSE 7244
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7132: LD_ADDR_VAR 0 4
7136: PUSH
7137: LD_VAR 0 4
7141: PUSH
7142: LD_VAR 0 3
7146: PPUSH
7147: CALL_OW 266
7151: PUSH
7152: LD_VAR 0 3
7156: PPUSH
7157: CALL_OW 250
7161: PUSH
7162: LD_VAR 0 3
7166: PPUSH
7167: CALL_OW 251
7171: PUSH
7172: LD_VAR 0 3
7176: PPUSH
7177: CALL_OW 254
7181: PUSH
7182: LD_VAR 0 3
7186: PPUSH
7187: CALL_OW 267
7191: PUSH
7192: LD_VAR 0 3
7196: PPUSH
7197: CALL_OW 248
7201: PUSH
7202: LD_VAR 0 3
7206: PPUSH
7207: LD_INT 1
7209: PPUSH
7210: CALL_OW 268
7214: PUSH
7215: LD_VAR 0 3
7219: PPUSH
7220: LD_INT 2
7222: PPUSH
7223: CALL_OW 268
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: PUSH
7238: EMPTY
7239: LIST
7240: ADD
7241: ST_TO_ADDR
7242: GO 7539
// if GetBType ( i ) = b_bunker then
7244: LD_VAR 0 3
7248: PPUSH
7249: CALL_OW 266
7253: PUSH
7254: LD_INT 32
7256: EQUAL
7257: IFFALSE 7354
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7259: LD_ADDR_VAR 0 4
7263: PUSH
7264: LD_VAR 0 4
7268: PUSH
7269: LD_VAR 0 3
7273: PPUSH
7274: CALL_OW 266
7278: PUSH
7279: LD_VAR 0 3
7283: PPUSH
7284: CALL_OW 250
7288: PUSH
7289: LD_VAR 0 3
7293: PPUSH
7294: CALL_OW 251
7298: PUSH
7299: LD_VAR 0 3
7303: PPUSH
7304: CALL_OW 254
7308: PUSH
7309: LD_VAR 0 3
7313: PPUSH
7314: CALL_OW 267
7318: PUSH
7319: LD_VAR 0 3
7323: PPUSH
7324: CALL_OW 248
7328: PUSH
7329: LD_VAR 0 3
7333: PPUSH
7334: CALL_OW 269
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: ADD
7351: ST_TO_ADDR
7352: GO 7539
// if GetBType ( i ) = b_factory then
7354: LD_VAR 0 3
7358: PPUSH
7359: CALL_OW 266
7363: PUSH
7364: LD_INT 3
7366: EQUAL
7367: IFFALSE 7457
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7369: LD_ADDR_VAR 0 4
7373: PUSH
7374: LD_VAR 0 4
7378: PPUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: CALL_OW 266
7391: PUSH
7392: LD_VAR 0 3
7396: PPUSH
7397: CALL_OW 250
7401: PUSH
7402: LD_VAR 0 3
7406: PPUSH
7407: CALL_OW 251
7411: PUSH
7412: LD_VAR 0 3
7416: PPUSH
7417: CALL_OW 254
7421: PUSH
7422: LD_VAR 0 3
7426: PPUSH
7427: CALL_OW 267
7431: PUSH
7432: LD_VAR 0 3
7436: PPUSH
7437: CALL_OW 248
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 2
7454: ST_TO_ADDR
7455: GO 7539
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7457: LD_ADDR_VAR 0 4
7461: PUSH
7462: LD_VAR 0 4
7466: PUSH
7467: LD_VAR 0 3
7471: PPUSH
7472: CALL_OW 266
7476: PUSH
7477: LD_VAR 0 3
7481: PPUSH
7482: CALL_OW 250
7486: PUSH
7487: LD_VAR 0 3
7491: PPUSH
7492: CALL_OW 251
7496: PUSH
7497: LD_VAR 0 3
7501: PPUSH
7502: CALL_OW 254
7506: PUSH
7507: LD_VAR 0 3
7511: PPUSH
7512: CALL_OW 267
7516: PUSH
7517: LD_VAR 0 3
7521: PPUSH
7522: CALL_OW 248
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: ADD
7538: ST_TO_ADDR
// end ;
7539: GO 7103
7541: POP
7542: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7543: LD_VAR 0 4
7547: PPUSH
7548: LD_STRING 08_GammaBase
7550: PPUSH
7551: CALL_OW 39
// end ;
7555: LD_VAR 0 2
7559: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7560: LD_INT 0
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7569: LD_ADDR_VAR 0 3
7573: PUSH
7574: LD_INT 22
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PPUSH
7584: CALL_OW 69
7588: ST_TO_ADDR
// ComAgressiveMove ( tmp , 55 , 62 ) ;
7589: LD_VAR 0 3
7593: PPUSH
7594: LD_INT 55
7596: PPUSH
7597: LD_INT 62
7599: PPUSH
7600: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
7604: LD_VAR 0 3
7608: PPUSH
7609: LD_INT 175
7611: PPUSH
7612: CALL_OW 202
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
7616: LD_VAR 0 3
7620: PPUSH
7621: LD_INT 120
7623: PUSH
7624: LD_INT 101
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: PPUSH
7636: LD_INT 58
7638: PPUSH
7639: LD_INT 96
7641: PPUSH
7642: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
7646: LD_VAR 0 3
7650: PPUSH
7651: LD_INT 120
7653: PUSH
7654: LD_INT 101
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: PPUSH
7666: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
7670: LD_VAR 0 3
7674: PPUSH
7675: LD_INT 120
7677: PUSH
7678: LD_INT 101
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 25
7687: PUSH
7688: LD_INT 4
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PPUSH
7699: CALL_OW 72
7703: PPUSH
7704: LD_INT 52
7706: PPUSH
7707: LD_INT 93
7709: PPUSH
7710: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
7714: LD_VAR 0 3
7718: PPUSH
7719: LD_INT 120
7721: PUSH
7722: LD_INT 101
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 25
7731: PUSH
7732: LD_INT 4
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 72
7747: PPUSH
7748: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
7752: LD_ADDR_VAR 0 7
7756: PUSH
7757: LD_VAR 0 3
7761: PPUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 72
7776: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
7777: LD_ADDR_VAR 0 4
7781: PUSH
7782: LD_INT 81
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 69
7796: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
7797: LD_ADDR_VAR 0 5
7801: PUSH
7802: LD_INT 57
7804: PUSH
7805: LD_INT 66
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 62
7814: PUSH
7815: LD_INT 58
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7826: LD_INT 35
7828: PPUSH
7829: CALL_OW 67
// for i in filter do
7833: LD_ADDR_VAR 0 2
7837: PUSH
7838: LD_VAR 0 7
7842: PUSH
7843: FOR_IN
7844: IFFALSE 8283
// begin if IsDead ( i ) then
7846: LD_VAR 0 2
7850: PPUSH
7851: CALL_OW 301
7855: IFFALSE 7875
// begin filter := filter diff i ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_VAR 0 7
7866: PUSH
7867: LD_VAR 0 2
7871: DIFF
7872: ST_TO_ADDR
// continue ;
7873: GO 7843
// end ; tmp := IsDrivenBy ( i ) ;
7875: LD_ADDR_VAR 0 3
7879: PUSH
7880: LD_VAR 0 2
7884: PPUSH
7885: CALL_OW 311
7889: ST_TO_ADDR
// if not tmp then
7890: LD_VAR 0 3
7894: NOT
7895: IFFALSE 7899
// continue ;
7897: GO 7843
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
7899: LD_VAR 0 2
7903: PPUSH
7904: CALL_OW 261
7908: PUSH
7909: LD_INT 30
7911: GREATER
7912: PUSH
7913: LD_VAR 0 2
7917: PPUSH
7918: CALL_OW 110
7922: PUSH
7923: LD_INT 2
7925: EQUAL
7926: AND
7927: IFFALSE 7943
// SetTag ( i , 0 ) else
7929: LD_VAR 0 2
7933: PPUSH
7934: LD_INT 0
7936: PPUSH
7937: CALL_OW 109
7941: GO 7987
// if GetTag ( i ) = 2 then
7943: LD_VAR 0 2
7947: PPUSH
7948: CALL_OW 110
7952: PUSH
7953: LD_INT 2
7955: EQUAL
7956: IFFALSE 7987
// begin ComMoveXY ( i , 52 , 50 ) ;
7958: LD_VAR 0 2
7962: PPUSH
7963: LD_INT 52
7965: PPUSH
7966: LD_INT 50
7968: PPUSH
7969: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
7973: LD_VAR 0 2
7977: PPUSH
7978: LD_EXP 26
7982: PPUSH
7983: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
7987: LD_VAR 0 2
7991: PPUSH
7992: CALL_OW 256
7996: PUSH
7997: LD_INT 600
7999: GREATEREQUAL
8000: PUSH
8001: LD_VAR 0 2
8005: PPUSH
8006: CALL_OW 110
8010: NOT
8011: AND
8012: IFFALSE 8038
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8014: LD_VAR 0 2
8018: PPUSH
8019: LD_VAR 0 4
8023: PPUSH
8024: LD_VAR 0 2
8028: PPUSH
8029: CALL_OW 74
8033: PPUSH
8034: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8038: LD_VAR 0 2
8042: PPUSH
8043: CALL_OW 256
8047: PUSH
8048: LD_INT 600
8050: LESS
8051: PUSH
8052: LD_VAR 0 2
8056: PPUSH
8057: CALL_OW 110
8061: NOT
8062: AND
8063: IFFALSE 8139
// begin SetTag ( i , 1 ) ;
8065: LD_VAR 0 2
8069: PPUSH
8070: LD_INT 1
8072: PPUSH
8073: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8077: LD_ADDR_VAR 0 6
8081: PUSH
8082: LD_VAR 0 2
8086: PPUSH
8087: LD_VAR 0 5
8091: PPUSH
8092: CALL 77335 0 2
8096: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8097: LD_VAR 0 2
8101: PPUSH
8102: LD_VAR 0 6
8106: PUSH
8107: LD_INT 1
8109: ARRAY
8110: PPUSH
8111: LD_VAR 0 6
8115: PUSH
8116: LD_INT 2
8118: ARRAY
8119: PPUSH
8120: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: LD_INT 40
8131: PPUSH
8132: LD_INT 49
8134: PPUSH
8135: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8139: LD_VAR 0 2
8143: PPUSH
8144: CALL_OW 110
8148: PUSH
8149: LD_INT 1
8151: EQUAL
8152: PUSH
8153: LD_VAR 0 2
8157: PPUSH
8158: LD_INT 40
8160: PPUSH
8161: LD_INT 49
8163: PPUSH
8164: CALL_OW 297
8168: PUSH
8169: LD_INT 9
8171: LESS
8172: AND
8173: PUSH
8174: LD_VAR 0 3
8178: AND
8179: IFFALSE 8281
// begin ComExitVehicle ( tmp ) ;
8181: LD_VAR 0 3
8185: PPUSH
8186: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8190: LD_VAR 0 3
8194: PPUSH
8195: LD_VAR 0 2
8199: PPUSH
8200: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8204: LD_INT 35
8206: PPUSH
8207: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8211: LD_VAR 0 2
8215: PPUSH
8216: CALL_OW 256
8220: PUSH
8221: LD_INT 1000
8223: EQUAL
8224: IFFALSE 8204
// ComEnterUnit ( tmp , i ) ;
8226: LD_VAR 0 3
8230: PPUSH
8231: LD_VAR 0 2
8235: PPUSH
8236: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8240: LD_VAR 0 2
8244: PPUSH
8245: CALL_OW 261
8249: PUSH
8250: LD_INT 40
8252: LESSEQUAL
8253: IFFALSE 8269
// SetTag ( i , 2 ) else
8255: LD_VAR 0 2
8259: PPUSH
8260: LD_INT 2
8262: PPUSH
8263: CALL_OW 109
8267: GO 8281
// SetTag ( i , 0 ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_INT 0
8276: PPUSH
8277: CALL_OW 109
// end ; end ;
8281: GO 7843
8283: POP
8284: POP
// until not filter ;
8285: LD_VAR 0 7
8289: NOT
8290: IFFALSE 7826
// end ; end_of_file
8292: LD_VAR 0 1
8296: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8297: LD_INT 0
8299: PPUSH
8300: PPUSH
8301: PPUSH
8302: PPUSH
8303: PPUSH
// uc_side := 3 ;
8304: LD_ADDR_OWVAR 20
8308: PUSH
8309: LD_INT 3
8311: ST_TO_ADDR
// uc_nation := 3 ;
8312: LD_ADDR_OWVAR 21
8316: PUSH
8317: LD_INT 3
8319: ST_TO_ADDR
// ruMechCounter := [ 8 , 12 , 16 , 20 ] [ Difficulty ] ;
8320: LD_ADDR_EXP 28
8324: PUSH
8325: LD_INT 8
8327: PUSH
8328: LD_INT 12
8330: PUSH
8331: LD_INT 16
8333: PUSH
8334: LD_INT 20
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: LD_OWVAR 67
8347: ARRAY
8348: ST_TO_ADDR
// ruMobile := [ ] ;
8349: LD_ADDR_EXP 29
8353: PUSH
8354: EMPTY
8355: ST_TO_ADDR
// ruBuildList := [ ] ;
8356: LD_ADDR_EXP 30
8360: PUSH
8361: EMPTY
8362: ST_TO_ADDR
// russianAttackers := [ ] ;
8363: LD_ADDR_EXP 31
8367: PUSH
8368: EMPTY
8369: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8370: LD_ADDR_VAR 0 5
8374: PUSH
8375: LD_INT 43
8377: PUSH
8378: LD_INT 44
8380: PUSH
8381: LD_INT 46
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: ST_TO_ADDR
// if Difficulty > 2 then
8389: LD_OWVAR 67
8393: PUSH
8394: LD_INT 2
8396: GREATER
8397: IFFALSE 8420
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8399: LD_ADDR_VAR 0 5
8403: PUSH
8404: LD_VAR 0 5
8408: PUSH
8409: LD_INT 45
8411: PUSH
8412: LD_INT 46
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: ADD
8419: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8420: LD_ADDR_EXP 27
8424: PUSH
8425: LD_STRING Borodin
8427: PPUSH
8428: CALL_OW 25
8432: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8433: LD_EXP 27
8437: PPUSH
8438: LD_INT 28
8440: PPUSH
8441: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8445: LD_INT 28
8447: PPUSH
8448: CALL_OW 274
8452: PPUSH
8453: LD_INT 1
8455: PPUSH
8456: LD_INT 3000
8458: PUSH
8459: LD_INT 4000
8461: PUSH
8462: LD_INT 5000
8464: PUSH
8465: LD_INT 6000
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: PUSH
8474: LD_OWVAR 67
8478: ARRAY
8479: PPUSH
8480: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8484: LD_INT 28
8486: PPUSH
8487: CALL_OW 274
8491: PPUSH
8492: LD_INT 2
8494: PPUSH
8495: LD_INT 1000
8497: PPUSH
8498: CALL_OW 277
// if Difficulty > 2 then
8502: LD_OWVAR 67
8506: PUSH
8507: LD_INT 2
8509: GREATER
8510: IFFALSE 8628
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8512: LD_ADDR_VAR 0 4
8516: PUSH
8517: LD_INT 99
8519: PUSH
8520: LD_INT 130
8522: PUSH
8523: LD_INT 2
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 121
8533: PUSH
8534: LD_INT 127
8536: PUSH
8537: LD_INT 4
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: LIST
8544: PUSH
8545: LD_INT 117
8547: PUSH
8548: LD_INT 121
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: ST_TO_ADDR
// for i in tmp do
8564: LD_ADDR_VAR 0 2
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: FOR_IN
8575: IFFALSE 8626
// begin bc_type := b_turret ;
8577: LD_ADDR_OWVAR 42
8581: PUSH
8582: LD_INT 33
8584: ST_TO_ADDR
// bc_level := 6 ;
8585: LD_ADDR_OWVAR 43
8589: PUSH
8590: LD_INT 6
8592: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
8593: LD_VAR 0 2
8597: PUSH
8598: LD_INT 1
8600: ARRAY
8601: PPUSH
8602: LD_VAR 0 2
8606: PUSH
8607: LD_INT 2
8609: ARRAY
8610: PPUSH
8611: LD_VAR 0 2
8615: PUSH
8616: LD_INT 3
8618: ARRAY
8619: PPUSH
8620: CALL_OW 47
// end ;
8624: GO 8574
8626: POP
8627: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
8628: LD_ADDR_VAR 0 2
8632: PUSH
8633: LD_INT 22
8635: PUSH
8636: LD_INT 3
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: LD_INT 21
8645: PUSH
8646: LD_INT 3
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 69
8661: PUSH
8662: FOR_IN
8663: IFFALSE 8679
// SetBLevel ( i , 6 ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: LD_INT 6
8672: PPUSH
8673: CALL_OW 241
8677: GO 8662
8679: POP
8680: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8681: LD_ADDR_VAR 0 4
8685: PUSH
8686: LD_INT 22
8688: PUSH
8689: LD_INT 3
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 2
8698: PUSH
8699: LD_INT 30
8701: PUSH
8702: LD_INT 32
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 30
8711: PUSH
8712: LD_INT 33
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: ST_TO_ADDR
// for i in tmp do
8733: LD_ADDR_VAR 0 2
8737: PUSH
8738: LD_VAR 0 4
8742: PUSH
8743: FOR_IN
8744: IFFALSE 8776
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
8746: LD_VAR 0 2
8750: PPUSH
8751: LD_VAR 0 5
8755: PUSH
8756: LD_INT 1
8758: PPUSH
8759: LD_VAR 0 5
8763: PPUSH
8764: CALL_OW 12
8768: ARRAY
8769: PPUSH
8770: CALL_OW 431
8774: GO 8743
8776: POP
8777: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
8778: LD_ADDR_VAR 0 2
8782: PUSH
8783: LD_INT 22
8785: PUSH
8786: LD_INT 3
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 30
8795: PUSH
8796: LD_INT 32
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PPUSH
8807: CALL_OW 69
8811: PUSH
8812: FOR_IN
8813: IFFALSE 8862
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8815: LD_INT 0
8817: PPUSH
8818: LD_INT 5
8820: PUSH
8821: LD_INT 6
8823: PUSH
8824: LD_INT 7
8826: PUSH
8827: LD_INT 8
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: LD_OWVAR 67
8840: ARRAY
8841: PPUSH
8842: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8846: CALL_OW 44
8850: PPUSH
8851: LD_VAR 0 2
8855: PPUSH
8856: CALL_OW 52
// end ;
8860: GO 8812
8862: POP
8863: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
8864: LD_ADDR_VAR 0 2
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 3
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_INT 5
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: FOR_IN
8899: IFFALSE 8989
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
8901: LD_ADDR_VAR 0 3
8905: PUSH
8906: DOUBLE
8907: LD_INT 1
8909: DEC
8910: ST_TO_ADDR
8911: LD_INT 2
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: LD_INT 3
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: PUSH
8929: LD_OWVAR 67
8933: ARRAY
8934: PUSH
8935: FOR_TO
8936: IFFALSE 8985
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8938: LD_INT 0
8940: PPUSH
8941: LD_INT 5
8943: PUSH
8944: LD_INT 6
8946: PUSH
8947: LD_INT 7
8949: PUSH
8950: LD_INT 8
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: PUSH
8959: LD_OWVAR 67
8963: ARRAY
8964: PPUSH
8965: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8969: CALL_OW 44
8973: PPUSH
8974: LD_VAR 0 2
8978: PPUSH
8979: CALL_OW 52
// end ;
8983: GO 8935
8985: POP
8986: POP
// end ;
8987: GO 8898
8989: POP
8990: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
8991: LD_ADDR_VAR 0 2
8995: PUSH
8996: DOUBLE
8997: LD_INT 1
8999: DEC
9000: ST_TO_ADDR
9001: LD_INT 3
9003: PUSH
9004: LD_INT 4
9006: PUSH
9007: LD_INT 5
9009: PUSH
9010: LD_INT 5
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: PUSH
9019: LD_OWVAR 67
9023: ARRAY
9024: PUSH
9025: FOR_TO
9026: IFFALSE 9073
// begin PrepareEngineer ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9028: LD_INT 0
9030: PPUSH
9031: LD_INT 5
9033: PUSH
9034: LD_INT 6
9036: PUSH
9037: LD_INT 7
9039: PUSH
9040: LD_INT 8
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: PUSH
9049: LD_OWVAR 67
9053: ARRAY
9054: PPUSH
9055: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9059: CALL_OW 44
9063: PPUSH
9064: LD_INT 28
9066: PPUSH
9067: CALL_OW 52
// end ;
9071: GO 9025
9073: POP
9074: POP
// for i := 1 to 2 do
9075: LD_ADDR_VAR 0 2
9079: PUSH
9080: DOUBLE
9081: LD_INT 1
9083: DEC
9084: ST_TO_ADDR
9085: LD_INT 2
9087: PUSH
9088: FOR_TO
9089: IFFALSE 9123
// begin PrepareScientist ( false , 6 ) ;
9091: LD_INT 0
9093: PPUSH
9094: LD_INT 6
9096: PPUSH
9097: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9101: CALL_OW 44
9105: PPUSH
9106: LD_INT 81
9108: PPUSH
9109: LD_INT 93
9111: PPUSH
9112: CALL_OW 428
9116: PPUSH
9117: CALL_OW 52
// end ;
9121: GO 9088
9123: POP
9124: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9125: LD_INT 22
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: LD_INT 51
9136: PPUSH
9137: LD_INT 100
9139: PPUSH
9140: CALL 42195 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9144: CALL_OW 45
9148: PPUSH
9149: LD_INT 91
9151: PPUSH
9152: LD_INT 94
9154: PPUSH
9155: LD_INT 3
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 50
// for i := 1 to 2 do
9165: LD_ADDR_VAR 0 2
9169: PUSH
9170: DOUBLE
9171: LD_INT 1
9173: DEC
9174: ST_TO_ADDR
9175: LD_INT 2
9177: PUSH
9178: FOR_TO
9179: IFFALSE 9223
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9181: LD_INT 22
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: LD_INT 3
9189: PPUSH
9190: LD_INT 52
9192: PPUSH
9193: LD_INT 100
9195: PPUSH
9196: CALL 42195 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9200: CALL_OW 45
9204: PPUSH
9205: LD_INT 91
9207: PPUSH
9208: LD_INT 94
9210: PPUSH
9211: LD_INT 4
9213: PPUSH
9214: LD_INT 0
9216: PPUSH
9217: CALL_OW 50
// end ;
9221: GO 9178
9223: POP
9224: POP
// end ;
9225: LD_VAR 0 1
9229: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9230: LD_INT 0
9232: PPUSH
9233: PPUSH
9234: PPUSH
9235: PPUSH
9236: PPUSH
// uc_side := 3 ;
9237: LD_ADDR_OWVAR 20
9241: PUSH
9242: LD_INT 3
9244: ST_TO_ADDR
// uc_nation := 3 ;
9245: LD_ADDR_OWVAR 21
9249: PUSH
9250: LD_INT 3
9252: ST_TO_ADDR
// for i := 1 to 4 do
9253: LD_ADDR_VAR 0 2
9257: PUSH
9258: DOUBLE
9259: LD_INT 1
9261: DEC
9262: ST_TO_ADDR
9263: LD_INT 4
9265: PUSH
9266: FOR_TO
9267: IFFALSE 9394
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9269: LD_INT 22
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: LD_INT 1
9277: PPUSH
9278: LD_INT 42
9280: PUSH
9281: LD_INT 43
9283: PUSH
9284: LD_INT 44
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 1
9294: PPUSH
9295: LD_INT 3
9297: PPUSH
9298: CALL_OW 12
9302: ARRAY
9303: PPUSH
9304: LD_INT 40
9306: PPUSH
9307: CALL 42195 0 5
// veh := CreateVehicle ;
9311: LD_ADDR_VAR 0 4
9315: PUSH
9316: CALL_OW 45
9320: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9321: LD_VAR 0 4
9325: PPUSH
9326: LD_INT 5
9328: PPUSH
9329: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9333: LD_VAR 0 4
9337: PPUSH
9338: LD_INT 7
9340: PPUSH
9341: LD_INT 0
9343: PPUSH
9344: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9348: LD_INT 0
9350: PPUSH
9351: LD_INT 5
9353: PPUSH
9354: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9358: CALL_OW 44
9362: PPUSH
9363: LD_VAR 0 4
9367: PPUSH
9368: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9372: LD_ADDR_VAR 0 5
9376: PUSH
9377: LD_VAR 0 5
9381: PPUSH
9382: LD_VAR 0 4
9386: PPUSH
9387: CALL 74012 0 2
9391: ST_TO_ADDR
// end ;
9392: GO 9266
9394: POP
9395: POP
// for i := 1 to 3 do
9396: LD_ADDR_VAR 0 2
9400: PUSH
9401: DOUBLE
9402: LD_INT 1
9404: DEC
9405: ST_TO_ADDR
9406: LD_INT 3
9408: PUSH
9409: FOR_TO
9410: IFFALSE 9537
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9412: LD_INT 22
9414: PPUSH
9415: LD_INT 1
9417: PPUSH
9418: LD_INT 1
9420: PPUSH
9421: LD_INT 42
9423: PUSH
9424: LD_INT 43
9426: PUSH
9427: LD_INT 44
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 1
9437: PPUSH
9438: LD_INT 3
9440: PPUSH
9441: CALL_OW 12
9445: ARRAY
9446: PPUSH
9447: LD_INT 40
9449: PPUSH
9450: CALL 42195 0 5
// veh := CreateVehicle ;
9454: LD_ADDR_VAR 0 4
9458: PUSH
9459: CALL_OW 45
9463: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9464: LD_VAR 0 4
9468: PPUSH
9469: LD_INT 5
9471: PPUSH
9472: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9476: LD_VAR 0 4
9480: PPUSH
9481: LD_INT 8
9483: PPUSH
9484: LD_INT 0
9486: PPUSH
9487: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9491: LD_INT 0
9493: PPUSH
9494: LD_INT 5
9496: PPUSH
9497: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9501: CALL_OW 44
9505: PPUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9515: LD_ADDR_VAR 0 5
9519: PUSH
9520: LD_VAR 0 5
9524: PPUSH
9525: LD_VAR 0 4
9529: PPUSH
9530: CALL 74012 0 2
9534: ST_TO_ADDR
// end ;
9535: GO 9409
9537: POP
9538: POP
// for i := 1 to 2 do
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_INT 2
9551: PUSH
9552: FOR_TO
9553: IFFALSE 9612
// begin PrepareSoldier ( false , 5 ) ;
9555: LD_INT 0
9557: PPUSH
9558: LD_INT 5
9560: PPUSH
9561: CALL_OW 381
// un := CreateHuman ;
9565: LD_ADDR_VAR 0 3
9569: PUSH
9570: CALL_OW 44
9574: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
9575: LD_VAR 0 3
9579: PPUSH
9580: LD_INT 8
9582: PPUSH
9583: LD_INT 0
9585: PPUSH
9586: CALL_OW 49
// tmp := Join ( tmp , un ) ;
9590: LD_ADDR_VAR 0 5
9594: PUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: LD_VAR 0 3
9604: PPUSH
9605: CALL 74012 0 2
9609: ST_TO_ADDR
// end ;
9610: GO 9552
9612: POP
9613: POP
// for i in tmp do
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: LD_VAR 0 5
9623: PUSH
9624: FOR_IN
9625: IFFALSE 9644
// ComAgressiveMove ( i , 51 , 16 ) ;
9627: LD_VAR 0 2
9631: PPUSH
9632: LD_INT 51
9634: PPUSH
9635: LD_INT 16
9637: PPUSH
9638: CALL_OW 114
9642: GO 9624
9644: POP
9645: POP
// end ;
9646: LD_VAR 0 1
9650: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
9651: LD_EXP 29
9655: IFFALSE 10242
9657: GO 9659
9659: DISABLE
9660: LD_INT 0
9662: PPUSH
9663: PPUSH
9664: PPUSH
// begin enable ;
9665: ENABLE
// if not ruMobile then
9666: LD_EXP 29
9670: NOT
9671: IFFALSE 9675
// exit ;
9673: GO 10242
// for i in ruMobile do
9675: LD_ADDR_VAR 0 1
9679: PUSH
9680: LD_EXP 29
9684: PUSH
9685: FOR_IN
9686: IFFALSE 10240
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
9688: LD_VAR 0 1
9692: PPUSH
9693: CALL_OW 302
9697: NOT
9698: PUSH
9699: LD_VAR 0 1
9703: PPUSH
9704: CALL_OW 255
9708: PUSH
9709: LD_INT 3
9711: NONEQUAL
9712: OR
9713: IFFALSE 9733
// begin ruMobile := ruMobile diff i ;
9715: LD_ADDR_EXP 29
9719: PUSH
9720: LD_EXP 29
9724: PUSH
9725: LD_VAR 0 1
9729: DIFF
9730: ST_TO_ADDR
// continue ;
9731: GO 9685
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9733: LD_VAR 0 1
9737: PPUSH
9738: CALL_OW 110
9742: NOT
9743: PUSH
9744: LD_VAR 0 1
9748: PPUSH
9749: CALL_OW 110
9753: PUSH
9754: LD_INT 0
9756: EQUAL
9757: OR
9758: IFFALSE 9873
// begin if GetFuel ( i ) < 50 then
9760: LD_VAR 0 1
9764: PPUSH
9765: CALL_OW 261
9769: PUSH
9770: LD_INT 50
9772: LESS
9773: IFFALSE 9832
// begin ComMoveXY ( i , 93 , 100 ) ;
9775: LD_VAR 0 1
9779: PPUSH
9780: LD_INT 93
9782: PPUSH
9783: LD_INT 100
9785: PPUSH
9786: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9790: LD_INT 35
9792: PPUSH
9793: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
9797: LD_VAR 0 1
9801: PPUSH
9802: LD_INT 93
9804: PPUSH
9805: LD_INT 100
9807: PPUSH
9808: CALL_OW 297
9812: PUSH
9813: LD_INT 4
9815: LESS
9816: IFFALSE 9790
// SetFuel ( i , 100 ) ;
9818: LD_VAR 0 1
9822: PPUSH
9823: LD_INT 100
9825: PPUSH
9826: CALL_OW 240
// end else
9830: GO 9873
// if not IsInArea ( i , ruParkingArea ) then
9832: LD_VAR 0 1
9836: PPUSH
9837: LD_INT 10
9839: PPUSH
9840: CALL_OW 308
9844: NOT
9845: IFFALSE 9861
// ComMoveToArea ( i , ruParkingArea ) else
9847: LD_VAR 0 1
9851: PPUSH
9852: LD_INT 10
9854: PPUSH
9855: CALL_OW 113
9859: GO 9873
// SetTag ( i , 1 ) ;
9861: LD_VAR 0 1
9865: PPUSH
9866: LD_INT 1
9868: PPUSH
9869: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
9873: LD_VAR 0 1
9877: PPUSH
9878: CALL_OW 110
9882: PUSH
9883: LD_INT 1
9885: EQUAL
9886: IFFALSE 10016
// begin if GetLives ( i ) < 1000 then
9888: LD_VAR 0 1
9892: PPUSH
9893: CALL_OW 256
9897: PUSH
9898: LD_INT 1000
9900: LESS
9901: IFFALSE 9993
// begin if not IsDrivenBy ( i ) then
9903: LD_VAR 0 1
9907: PPUSH
9908: CALL_OW 311
9912: NOT
9913: IFFALSE 9917
// continue ;
9915: GO 9685
// mech := IsDrivenBy ( i ) ;
9917: LD_ADDR_VAR 0 2
9921: PUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 311
9931: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9932: LD_VAR 0 2
9936: PPUSH
9937: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9941: LD_VAR 0 2
9945: PPUSH
9946: LD_VAR 0 1
9950: PPUSH
9951: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9955: LD_INT 35
9957: PPUSH
9958: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9962: LD_VAR 0 1
9966: PPUSH
9967: CALL_OW 256
9971: PUSH
9972: LD_INT 1000
9974: EQUAL
9975: IFFALSE 9955
// ComEnterUnit ( mech , i ) ;
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 120
// end else
9991: GO 10016
// if IsDrivenBy ( i ) then
9993: LD_VAR 0 1
9997: PPUSH
9998: CALL_OW 311
10002: IFFALSE 10016
// SetTag ( i , 2 ) ;
10004: LD_VAR 0 1
10008: PPUSH
10009: LD_INT 2
10011: PPUSH
10012: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
10016: LD_VAR 0 1
10020: PPUSH
10021: CALL_OW 110
10025: PUSH
10026: LD_INT 2
10028: EQUAL
10029: IFFALSE 10238
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10031: LD_ADDR_VAR 0 3
10035: PUSH
10036: LD_INT 11
10038: PPUSH
10039: LD_INT 81
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 70
10053: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10054: LD_VAR 0 1
10058: PPUSH
10059: CALL_OW 256
10063: PUSH
10064: LD_INT 650
10066: LESS
10067: IFFALSE 10092
// begin ComStop ( i ) ;
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 141
// SetTag ( i , 0 ) ;
10078: LD_VAR 0 1
10082: PPUSH
10083: LD_INT 0
10085: PPUSH
10086: CALL_OW 109
// continue ;
10090: GO 9685
// end ; if enemy then
10092: LD_VAR 0 3
10096: IFFALSE 10136
// begin if not HasTask ( i ) then
10098: LD_VAR 0 1
10102: PPUSH
10103: CALL_OW 314
10107: NOT
10108: IFFALSE 10134
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10110: LD_VAR 0 1
10114: PPUSH
10115: LD_VAR 0 3
10119: PPUSH
10120: LD_VAR 0 1
10124: PPUSH
10125: CALL_OW 74
10129: PPUSH
10130: CALL_OW 115
// end else
10134: GO 10238
// if ruMobile > 2 then
10136: LD_EXP 29
10140: PUSH
10141: LD_INT 2
10143: GREATER
10144: IFFALSE 10238
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10146: LD_ADDR_VAR 0 3
10150: PUSH
10151: LD_INT 81
10153: PUSH
10154: LD_INT 3
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PPUSH
10161: CALL_OW 69
10165: ST_TO_ADDR
// if enemy then
10166: LD_VAR 0 3
10170: IFFALSE 10238
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10172: LD_VAR 0 1
10176: PPUSH
10177: LD_INT 116
10179: PUSH
10180: LD_INT 95
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 84
10189: PUSH
10190: LD_INT 68
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 58
10199: PUSH
10200: LD_INT 53
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 44
10209: PUSH
10210: LD_INT 35
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 45
10219: PUSH
10220: LD_INT 23
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL 76608 0 2
// end ; end ; end ;
10238: GO 9685
10240: POP
10241: POP
// end ;
10242: PPOPN 3
10244: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10245: LD_INT 3
10247: PUSH
10248: LD_INT 22
10250: PUSH
10251: LD_INT 1
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 32
10264: PUSH
10265: LD_INT 1
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PPUSH
10276: CALL_OW 69
10280: IFFALSE 10364
10282: GO 10284
10284: DISABLE
10285: LD_INT 0
10287: PPUSH
// begin enable ;
10288: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10289: LD_ADDR_VAR 0 1
10293: PUSH
10294: LD_INT 3
10296: PUSH
10297: LD_INT 22
10299: PUSH
10300: LD_INT 1
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 32
10313: PUSH
10314: LD_INT 1
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PPUSH
10325: CALL_OW 69
10329: PUSH
10330: FOR_IN
10331: IFFALSE 10362
// if GetFuel ( i ) < 3 then
10333: LD_VAR 0 1
10337: PPUSH
10338: CALL_OW 261
10342: PUSH
10343: LD_INT 3
10345: LESS
10346: IFFALSE 10360
// SetFuel ( i , 3 ) ;
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_INT 3
10355: PPUSH
10356: CALL_OW 240
10360: GO 10330
10362: POP
10363: POP
// end ;
10364: PPOPN 1
10366: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10367: LD_INT 29
10369: PPUSH
10370: CALL_OW 302
10374: PUSH
10375: LD_INT 29
10377: PPUSH
10378: CALL_OW 461
10382: PUSH
10383: LD_INT 2
10385: EQUAL
10386: AND
10387: IFFALSE 10620
10389: GO 10391
10391: DISABLE
10392: LD_INT 0
10394: PPUSH
10395: PPUSH
// begin enable ;
10396: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10397: LD_ADDR_VAR 0 1
10401: PUSH
10402: LD_INT 21
10404: PUSH
10405: LD_INT 22
10407: PUSH
10408: LD_INT 23
10410: PUSH
10411: LD_INT 24
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 1
10422: PPUSH
10423: LD_INT 4
10425: PPUSH
10426: CALL_OW 12
10430: ARRAY
10431: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10432: LD_ADDR_VAR 0 2
10436: PUSH
10437: LD_INT 42
10439: PUSH
10440: LD_INT 44
10442: PUSH
10443: LD_INT 43
10445: PUSH
10446: LD_INT 46
10448: PUSH
10449: LD_INT 45
10451: PUSH
10452: LD_INT 46
10454: PUSH
10455: LD_INT 45
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: PUSH
10467: LD_OWVAR 67
10471: PUSH
10472: LD_INT 0
10474: PPUSH
10475: LD_INT 3
10477: PPUSH
10478: CALL_OW 12
10482: PLUS
10483: ARRAY
10484: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10485: LD_VAR 0 1
10489: PUSH
10490: LD_INT 21
10492: PUSH
10493: LD_INT 22
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: IN
10500: PUSH
10501: LD_VAR 0 2
10505: PUSH
10506: LD_INT 46
10508: EQUAL
10509: AND
10510: IFFALSE 10539
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10512: LD_ADDR_VAR 0 2
10516: PUSH
10517: LD_INT 44
10519: PUSH
10520: LD_INT 45
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 1
10529: PPUSH
10530: LD_INT 2
10532: PPUSH
10533: CALL_OW 12
10537: ARRAY
10538: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
10539: LD_OWVAR 1
10543: PUSH
10544: LD_INT 31500
10546: PUSH
10547: LD_INT 27300
10549: PUSH
10550: LD_INT 23100
10552: PUSH
10553: LD_INT 21000
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PUSH
10562: LD_OWVAR 67
10566: ARRAY
10567: LESS
10568: IFFALSE 10597
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
10570: LD_ADDR_VAR 0 2
10574: PUSH
10575: LD_INT 44
10577: PUSH
10578: LD_INT 43
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 1
10587: PPUSH
10588: LD_INT 2
10590: PPUSH
10591: CALL_OW 12
10595: ARRAY
10596: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
10597: LD_INT 29
10599: PPUSH
10600: LD_VAR 0 1
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: LD_INT 1
10610: PPUSH
10611: LD_VAR 0 2
10615: PPUSH
10616: CALL_OW 185
// end ;
10620: PPOPN 2
10622: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
10623: LD_INT 28
10625: PPUSH
10626: CALL_OW 302
10630: IFFALSE 11469
10632: GO 10634
10634: DISABLE
10635: LD_INT 0
10637: PPUSH
10638: PPUSH
10639: PPUSH
10640: PPUSH
10641: PPUSH
10642: PPUSH
10643: PPUSH
10644: PPUSH
// begin enable ;
10645: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
10646: LD_ADDR_VAR 0 3
10650: PUSH
10651: LD_INT 12
10653: PPUSH
10654: LD_INT 3
10656: PUSH
10657: LD_INT 24
10659: PUSH
10660: LD_INT 1000
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 21
10673: PUSH
10674: LD_INT 3
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10690: LD_ADDR_VAR 0 4
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 3
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 25
10707: PUSH
10708: LD_INT 2
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PPUSH
10719: CALL_OW 69
10723: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
10724: LD_ADDR_VAR 0 5
10728: PUSH
10729: LD_INT 22
10731: PUSH
10732: LD_INT 3
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 34
10741: PUSH
10742: LD_INT 52
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PPUSH
10753: CALL_OW 69
10757: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
10758: LD_ADDR_VAR 0 7
10762: PUSH
10763: LD_INT 22
10765: PUSH
10766: LD_INT 3
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 25
10775: PUSH
10776: LD_INT 4
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PPUSH
10787: CALL_OW 69
10791: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
10792: LD_ADDR_VAR 0 8
10796: PUSH
10797: LD_INT 81
10799: PPUSH
10800: LD_INT 93
10802: PPUSH
10803: CALL_OW 428
10807: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
10808: LD_VAR 0 7
10812: PUSH
10813: LD_VAR 0 4
10817: PPUSH
10818: LD_INT 120
10820: PUSH
10821: LD_INT 2
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 72
10832: AND
10833: IFFALSE 10846
// ComExitAll ( sci ) else
10835: LD_VAR 0 7
10839: PPUSH
10840: CALL 74483 0 1
10844: GO 10919
// if sci then
10846: LD_VAR 0 7
10850: IFFALSE 10919
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
10852: LD_VAR 0 7
10856: PPUSH
10857: LD_INT 3
10859: PUSH
10860: LD_INT 54
10862: PUSH
10863: EMPTY
10864: LIST
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PPUSH
10870: CALL_OW 72
10874: PUSH
10875: LD_VAR 0 8
10879: PPUSH
10880: CALL_OW 302
10884: AND
10885: IFFALSE 10919
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
10887: LD_VAR 0 7
10891: PPUSH
10892: LD_INT 3
10894: PUSH
10895: LD_INT 54
10897: PUSH
10898: EMPTY
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PPUSH
10905: CALL_OW 72
10909: PPUSH
10910: LD_VAR 0 8
10914: PPUSH
10915: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
10919: LD_VAR 0 5
10923: PPUSH
10924: LD_INT 50
10926: PUSH
10927: EMPTY
10928: LIST
10929: PPUSH
10930: CALL_OW 72
10934: PUSH
10935: LD_VAR 0 3
10939: AND
10940: IFFALSE 10971
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
10942: LD_VAR 0 5
10946: PPUSH
10947: LD_INT 50
10949: PUSH
10950: EMPTY
10951: LIST
10952: PPUSH
10953: CALL_OW 72
10957: PPUSH
10958: LD_VAR 0 3
10962: PUSH
10963: LD_INT 1
10965: ARRAY
10966: PPUSH
10967: CALL_OW 130
// if eng then
10971: LD_VAR 0 4
10975: IFFALSE 11469
// begin for i in eng do
10977: LD_ADDR_VAR 0 1
10981: PUSH
10982: LD_VAR 0 4
10986: PUSH
10987: FOR_IN
10988: IFFALSE 11467
// begin tag := GetTag ( i ) ;
10990: LD_ADDR_VAR 0 6
10994: PUSH
10995: LD_VAR 0 1
10999: PPUSH
11000: CALL_OW 110
11004: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
11005: LD_VAR 0 3
11009: NOT
11010: PUSH
11011: LD_EXP 30
11015: NOT
11016: AND
11017: PUSH
11018: LD_VAR 0 6
11022: PUSH
11023: LD_INT 1
11025: EQUAL
11026: AND
11027: IFFALSE 11053
// begin SetTag ( i , 0 ) ;
11029: LD_VAR 0 1
11033: PPUSH
11034: LD_INT 0
11036: PPUSH
11037: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: LD_INT 28
11048: PPUSH
11049: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
11053: LD_VAR 0 3
11057: PUSH
11058: LD_EXP 30
11062: OR
11063: PUSH
11064: LD_VAR 0 6
11068: PUSH
11069: LD_INT 0
11071: EQUAL
11072: AND
11073: IFFALSE 11087
// SetTag ( i , 1 ) ;
11075: LD_VAR 0 1
11079: PPUSH
11080: LD_INT 1
11082: PPUSH
11083: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL_OW 310
11096: PUSH
11097: LD_VAR 0 6
11101: PUSH
11102: LD_INT 1
11104: EQUAL
11105: AND
11106: IFFALSE 11117
// ComExit ( i ) ;
11108: LD_VAR 0 1
11112: PPUSH
11113: CALL 74400 0 1
// if GetLives ( i ) < 500 and tag = 1 then
11117: LD_VAR 0 1
11121: PPUSH
11122: CALL_OW 256
11126: PUSH
11127: LD_INT 500
11129: LESS
11130: PUSH
11131: LD_VAR 0 6
11135: PUSH
11136: LD_INT 1
11138: EQUAL
11139: AND
11140: IFFALSE 11154
// SetTag ( i , 2 ) ;
11142: LD_VAR 0 1
11146: PPUSH
11147: LD_INT 2
11149: PPUSH
11150: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
11154: LD_VAR 0 1
11158: PPUSH
11159: CALL_OW 256
11163: PUSH
11164: LD_INT 1000
11166: EQUAL
11167: PUSH
11168: LD_VAR 0 6
11172: PUSH
11173: LD_INT 2
11175: EQUAL
11176: AND
11177: IFFALSE 11191
// SetTag ( i , 1 ) ;
11179: LD_VAR 0 1
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: CALL_OW 109
// if tag = 2 then
11191: LD_VAR 0 6
11195: PUSH
11196: LD_INT 2
11198: EQUAL
11199: IFFALSE 11246
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11201: LD_VAR 0 1
11205: PPUSH
11206: LD_INT 84
11208: PPUSH
11209: LD_INT 93
11211: PPUSH
11212: CALL_OW 297
11216: PUSH
11217: LD_INT 6
11219: GREATER
11220: IFFALSE 11246
// begin ComMoveXY ( i , 84 , 93 ) ;
11222: LD_VAR 0 1
11226: PPUSH
11227: LD_INT 84
11229: PPUSH
11230: LD_INT 93
11232: PPUSH
11233: CALL_OW 111
// AddComHold ( i ) ;
11237: LD_VAR 0 1
11241: PPUSH
11242: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
11246: LD_VAR 0 1
11250: PPUSH
11251: LD_INT 11
11253: PPUSH
11254: CALL_OW 308
11258: IFFALSE 11272
// ComMoveToArea ( i , ruBaseArea ) ;
11260: LD_VAR 0 1
11264: PPUSH
11265: LD_INT 12
11267: PPUSH
11268: CALL_OW 113
// if tag = 1 then
11272: LD_VAR 0 6
11276: PUSH
11277: LD_INT 1
11279: EQUAL
11280: IFFALSE 11465
// begin if b then
11282: LD_VAR 0 3
11286: IFFALSE 11314
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
11288: LD_VAR 0 1
11292: PPUSH
11293: LD_VAR 0 3
11297: PPUSH
11298: LD_VAR 0 1
11302: PPUSH
11303: CALL_OW 74
11307: PPUSH
11308: CALL_OW 130
11312: GO 11465
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11314: LD_EXP 30
11318: PUSH
11319: LD_INT 11
11321: PPUSH
11322: LD_INT 81
11324: PUSH
11325: LD_INT 3
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PPUSH
11332: CALL_OW 70
11336: PUSH
11337: LD_INT 0
11339: EQUAL
11340: AND
11341: PUSH
11342: LD_INT 28
11344: PPUSH
11345: LD_EXP 30
11349: PUSH
11350: LD_INT 1
11352: ARRAY
11353: PUSH
11354: LD_INT 1
11356: ARRAY
11357: PPUSH
11358: LD_EXP 30
11362: PUSH
11363: LD_INT 1
11365: ARRAY
11366: PUSH
11367: LD_INT 2
11369: ARRAY
11370: PPUSH
11371: LD_EXP 30
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: PUSH
11380: LD_INT 3
11382: ARRAY
11383: PPUSH
11384: LD_EXP 30
11388: PUSH
11389: LD_INT 1
11391: ARRAY
11392: PUSH
11393: LD_INT 4
11395: ARRAY
11396: PPUSH
11397: CALL 50420 0 5
11401: AND
11402: IFFALSE 11465
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11404: LD_VAR 0 1
11408: PPUSH
11409: LD_EXP 30
11413: PUSH
11414: LD_INT 1
11416: ARRAY
11417: PUSH
11418: LD_INT 1
11420: ARRAY
11421: PPUSH
11422: LD_EXP 30
11426: PUSH
11427: LD_INT 1
11429: ARRAY
11430: PUSH
11431: LD_INT 2
11433: ARRAY
11434: PPUSH
11435: LD_EXP 30
11439: PUSH
11440: LD_INT 1
11442: ARRAY
11443: PUSH
11444: LD_INT 3
11446: ARRAY
11447: PPUSH
11448: LD_EXP 30
11452: PUSH
11453: LD_INT 1
11455: ARRAY
11456: PUSH
11457: LD_INT 4
11459: ARRAY
11460: PPUSH
11461: CALL_OW 145
// end ; end ;
11465: GO 10987
11467: POP
11468: POP
// end ; end ;
11469: PPOPN 8
11471: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
11472: LD_INT 0
11474: PPUSH
11475: PPUSH
11476: PPUSH
11477: PPUSH
11478: PPUSH
11479: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
11480: LD_ADDR_VAR 0 3
11484: PUSH
11485: DOUBLE
11486: LD_INT 1
11488: DEC
11489: ST_TO_ADDR
11490: LD_INT 3
11492: PUSH
11493: LD_INT 4
11495: PUSH
11496: LD_INT 5
11498: PUSH
11499: LD_INT 6
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: PUSH
11508: LD_OWVAR 67
11512: ARRAY
11513: PUSH
11514: LD_VAR 0 1
11518: PLUS
11519: PUSH
11520: FOR_TO
11521: IFFALSE 11838
// begin uc_side := 6 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 6
11530: ST_TO_ADDR
// uc_nation := 3 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 3
11538: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11539: LD_ADDR_VAR 0 6
11543: PUSH
11544: LD_INT 21
11546: PUSH
11547: LD_INT 22
11549: PUSH
11550: LD_INT 23
11552: PUSH
11553: LD_INT 24
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 1
11564: PPUSH
11565: LD_INT 4
11567: PPUSH
11568: CALL_OW 12
11572: ARRAY
11573: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11574: LD_ADDR_VAR 0 7
11578: PUSH
11579: LD_INT 42
11581: PUSH
11582: LD_INT 44
11584: PUSH
11585: LD_INT 43
11587: PUSH
11588: LD_INT 46
11590: PUSH
11591: LD_INT 45
11593: PUSH
11594: LD_INT 46
11596: PUSH
11597: LD_INT 45
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: PUSH
11609: LD_OWVAR 67
11613: PUSH
11614: LD_INT 0
11616: PPUSH
11617: LD_INT 3
11619: PPUSH
11620: CALL_OW 12
11624: PLUS
11625: ARRAY
11626: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11627: LD_VAR 0 6
11631: PUSH
11632: LD_INT 21
11634: PUSH
11635: LD_INT 22
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: IN
11642: PUSH
11643: LD_VAR 0 7
11647: PUSH
11648: LD_INT 46
11650: EQUAL
11651: AND
11652: IFFALSE 11681
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11654: LD_ADDR_VAR 0 7
11658: PUSH
11659: LD_INT 44
11661: PUSH
11662: LD_INT 45
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 1
11671: PPUSH
11672: LD_INT 2
11674: PPUSH
11675: CALL_OW 12
11679: ARRAY
11680: ST_TO_ADDR
// if tick < [ 17 17$00 , 15 15$00 , 13 13$00 , 11 11$00 ] [ Difficulty ] then
11681: LD_OWVAR 1
11685: PUSH
11686: LD_INT 35700
11688: PUSH
11689: LD_INT 31500
11691: PUSH
11692: LD_INT 27300
11694: PUSH
11695: LD_INT 23100
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: PUSH
11704: LD_OWVAR 67
11708: ARRAY
11709: LESS
11710: IFFALSE 11743
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
11712: LD_ADDR_VAR 0 7
11716: PUSH
11717: LD_INT 44
11719: PUSH
11720: LD_INT 43
11722: PUSH
11723: LD_INT 42
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 1
11733: PPUSH
11734: LD_INT 3
11736: PPUSH
11737: CALL_OW 12
11741: ARRAY
11742: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
11743: LD_VAR 0 6
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: LD_INT 3
11753: PPUSH
11754: LD_VAR 0 7
11758: PPUSH
11759: LD_INT 90
11761: PPUSH
11762: CALL 42195 0 5
// un := CreateVehicle ;
11766: LD_ADDR_VAR 0 4
11770: PUSH
11771: CALL_OW 45
11775: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
11776: LD_VAR 0 4
11780: PPUSH
11781: LD_INT 140
11783: PPUSH
11784: LD_INT 146
11786: PPUSH
11787: LD_INT 0
11789: PPUSH
11790: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
11794: LD_VAR 0 4
11798: PPUSH
11799: LD_INT 131
11801: PPUSH
11802: LD_INT 128
11804: PPUSH
11805: CALL_OW 111
// wait ( 0 0$3 ) ;
11809: LD_INT 105
11811: PPUSH
11812: CALL_OW 67
// tmp := Join ( tmp , un ) ;
11816: LD_ADDR_VAR 0 5
11820: PUSH
11821: LD_VAR 0 5
11825: PPUSH
11826: LD_VAR 0 4
11830: PPUSH
11831: CALL 74012 0 2
11835: ST_TO_ADDR
// end ;
11836: GO 11520
11838: POP
11839: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
11840: LD_ADDR_EXP 31
11844: PUSH
11845: LD_EXP 31
11849: PPUSH
11850: LD_VAR 0 5
11854: PPUSH
11855: CALL 74049 0 2
11859: ST_TO_ADDR
// end ;
11860: LD_VAR 0 2
11864: RET
// every 0 0$3 trigger russianAttackers do
11865: LD_EXP 31
11869: IFFALSE 11952
11871: GO 11873
11873: DISABLE
// begin enable ;
11874: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
11875: LD_EXP 31
11879: PPUSH
11880: LD_INT 126
11882: PUSH
11883: LD_INT 108
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 107
11892: PUSH
11893: LD_INT 85
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 82
11902: PUSH
11903: LD_INT 62
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 73
11912: PUSH
11913: LD_INT 46
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 62
11922: PUSH
11923: LD_INT 31
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 52
11932: PUSH
11933: LD_INT 17
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: PPUSH
11948: CALL 76608 0 2
// end ; end_of_file
11952: END
// on SailEvent ( event ) do begin if event = 1 then
11953: LD_VAR 0 1
11957: PUSH
11958: LD_INT 1
11960: EQUAL
11961: IFFALSE 11976
// PrepareRussianAttack ( Difficulty + 3 ) ;
11963: LD_OWVAR 67
11967: PUSH
11968: LD_INT 3
11970: PLUS
11971: PPUSH
11972: CALL 11472 0 1
// end ;
11976: PPOPN 1
11978: END
// on UnitDestroyed ( un ) do var tmp , chassis , weapon , btype ;
11979: LD_INT 0
11981: PPUSH
11982: PPUSH
11983: PPUSH
11984: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL 32691 0 1
// if un = JMM then
11994: LD_VAR 0 1
11998: PUSH
11999: LD_EXP 10
12003: EQUAL
12004: IFFALSE 12013
// YouLost ( JMM ) ;
12006: LD_STRING JMM
12008: PPUSH
12009: CALL_OW 104
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12013: LD_VAR 0 1
12017: PPUSH
12018: CALL_OW 255
12022: PUSH
12023: LD_INT 1
12025: EQUAL
12026: PUSH
12027: LD_VAR 0 1
12031: PPUSH
12032: CALL_OW 266
12036: PUSH
12037: LD_INT 0
12039: PUSH
12040: LD_INT 1
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: IN
12047: AND
12048: IFFALSE 12057
// YouLost ( Destroyed ) ;
12050: LD_STRING Destroyed
12052: PPUSH
12053: CALL_OW 104
// if un in ruMobile then
12057: LD_VAR 0 1
12061: PUSH
12062: LD_EXP 29
12066: IN
12067: IFFALSE 12085
// ruMobile := ruMobile diff un ;
12069: LD_ADDR_EXP 29
12073: PUSH
12074: LD_EXP 29
12078: PUSH
12079: LD_VAR 0 1
12083: DIFF
12084: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 255
12094: PUSH
12095: LD_INT 3
12097: EQUAL
12098: IFFALSE 12676
// begin if GetType ( un ) = unit_building then
12100: LD_VAR 0 1
12104: PPUSH
12105: CALL_OW 247
12109: PUSH
12110: LD_INT 3
12112: EQUAL
12113: IFFALSE 12249
// begin btype := GetBType ( un ) ;
12115: LD_ADDR_VAR 0 5
12119: PUSH
12120: LD_VAR 0 1
12124: PPUSH
12125: CALL_OW 266
12129: ST_TO_ADDR
// if btype = b_warehouse then
12130: LD_VAR 0 5
12134: PUSH
12135: LD_INT 1
12137: EQUAL
12138: IFFALSE 12148
// btype := b_depot ;
12140: LD_ADDR_VAR 0 5
12144: PUSH
12145: LD_INT 0
12147: ST_TO_ADDR
// if btype = b_barracks then
12148: LD_VAR 0 5
12152: PUSH
12153: LD_INT 5
12155: EQUAL
12156: IFFALSE 12166
// btype := b_armoury ;
12158: LD_ADDR_VAR 0 5
12162: PUSH
12163: LD_INT 4
12165: ST_TO_ADDR
// if btype = b_lab_full then
12166: LD_VAR 0 5
12170: PUSH
12171: LD_INT 8
12173: EQUAL
12174: IFFALSE 12184
// btype := b_lab ;
12176: LD_ADDR_VAR 0 5
12180: PUSH
12181: LD_INT 6
12183: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12184: LD_ADDR_EXP 30
12188: PUSH
12189: LD_EXP 30
12193: PPUSH
12194: LD_EXP 30
12198: PUSH
12199: LD_INT 1
12201: PLUS
12202: PPUSH
12203: LD_VAR 0 5
12207: PUSH
12208: LD_VAR 0 1
12212: PPUSH
12213: CALL_OW 250
12217: PUSH
12218: LD_VAR 0 1
12222: PPUSH
12223: CALL_OW 251
12227: PUSH
12228: LD_VAR 0 1
12232: PPUSH
12233: CALL_OW 254
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 1
12248: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12249: LD_VAR 0 1
12253: PPUSH
12254: CALL_OW 247
12258: PUSH
12259: LD_INT 2
12261: EQUAL
12262: IFFALSE 12537
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
12264: LD_VAR 0 1
12268: PPUSH
12269: CALL_OW 264
12273: PUSH
12274: LD_INT 52
12276: PUSH
12277: LD_INT 51
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: IN
12284: IFFALSE 12314
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
12286: LD_INT 29
12288: PPUSH
12289: LD_INT 22
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: LD_INT 3
12297: PPUSH
12298: LD_VAR 0 1
12302: PPUSH
12303: CALL_OW 264
12307: PPUSH
12308: CALL_OW 185
// end else
12312: GO 12537
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12314: LD_ADDR_VAR 0 3
12318: PUSH
12319: LD_INT 21
12321: PUSH
12322: LD_INT 22
12324: PUSH
12325: LD_INT 23
12327: PUSH
12328: LD_INT 24
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 1
12339: PPUSH
12340: LD_INT 4
12342: PPUSH
12343: CALL_OW 12
12347: ARRAY
12348: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12349: LD_ADDR_VAR 0 4
12353: PUSH
12354: LD_INT 42
12356: PUSH
12357: LD_INT 44
12359: PUSH
12360: LD_INT 43
12362: PUSH
12363: LD_INT 46
12365: PUSH
12366: LD_INT 45
12368: PUSH
12369: LD_INT 46
12371: PUSH
12372: LD_INT 45
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: LD_OWVAR 67
12388: PUSH
12389: LD_INT 0
12391: PPUSH
12392: LD_INT 3
12394: PPUSH
12395: CALL_OW 12
12399: PLUS
12400: ARRAY
12401: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12402: LD_VAR 0 3
12406: PUSH
12407: LD_INT 21
12409: PUSH
12410: LD_INT 22
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: IN
12417: PUSH
12418: LD_VAR 0 4
12422: PUSH
12423: LD_INT 46
12425: EQUAL
12426: AND
12427: IFFALSE 12456
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12429: LD_ADDR_VAR 0 4
12433: PUSH
12434: LD_INT 44
12436: PUSH
12437: LD_INT 45
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 1
12446: PPUSH
12447: LD_INT 2
12449: PPUSH
12450: CALL_OW 12
12454: ARRAY
12455: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
12456: LD_OWVAR 1
12460: PUSH
12461: LD_INT 31500
12463: PUSH
12464: LD_INT 27300
12466: PUSH
12467: LD_INT 23100
12469: PUSH
12470: LD_INT 21000
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: PUSH
12479: LD_OWVAR 67
12483: ARRAY
12484: LESS
12485: IFFALSE 12514
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
12487: LD_ADDR_VAR 0 4
12491: PUSH
12492: LD_INT 44
12494: PUSH
12495: LD_INT 43
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: LD_INT 1
12504: PPUSH
12505: LD_INT 2
12507: PPUSH
12508: CALL_OW 12
12512: ARRAY
12513: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
12514: LD_INT 29
12516: PPUSH
12517: LD_VAR 0 3
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: LD_VAR 0 4
12532: PPUSH
12533: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
12537: LD_VAR 0 1
12541: PPUSH
12542: CALL_OW 257
12546: PUSH
12547: LD_INT 3
12549: EQUAL
12550: IFFALSE 12676
// begin if ruMechCounter = 0 or not IsOk ( ruFac ) then
12552: LD_EXP 28
12556: PUSH
12557: LD_INT 0
12559: EQUAL
12560: PUSH
12561: LD_INT 29
12563: PPUSH
12564: CALL_OW 302
12568: NOT
12569: OR
12570: IFFALSE 12574
// exit ;
12572: GO 12676
// ruMechCounter := Dec ( ruMechCounter ) ;
12574: LD_ADDR_EXP 28
12578: PUSH
12579: LD_EXP 28
12583: PPUSH
12584: CALL 75387 0 1
12588: ST_TO_ADDR
// uc_side := 3 ;
12589: LD_ADDR_OWVAR 20
12593: PUSH
12594: LD_INT 3
12596: ST_TO_ADDR
// uc_nation := 3 ;
12597: LD_ADDR_OWVAR 21
12601: PUSH
12602: LD_INT 3
12604: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
12605: LD_INT 0
12607: PPUSH
12608: LD_INT 5
12610: PUSH
12611: LD_INT 6
12613: PUSH
12614: LD_INT 7
12616: PUSH
12617: LD_INT 8
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: PUSH
12626: LD_OWVAR 67
12630: ARRAY
12631: PPUSH
12632: CALL_OW 383
// tmp := CreateHuman ;
12636: LD_ADDR_VAR 0 2
12640: PUSH
12641: CALL_OW 44
12645: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
12646: LD_VAR 0 2
12650: PPUSH
12651: LD_INT 145
12653: PPUSH
12654: LD_INT 133
12656: PPUSH
12657: LD_INT 0
12659: PPUSH
12660: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
12664: LD_VAR 0 2
12668: PPUSH
12669: LD_INT 29
12671: PPUSH
12672: CALL_OW 120
// end ; end ; end ;
12676: PPOPN 5
12678: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
12679: LD_VAR 0 1
12683: PPUSH
12684: CALL_OW 255
12688: PUSH
12689: LD_INT 4
12691: EQUAL
12692: IFFALSE 12709
// ComMoveXY ( driver , 40 , 47 ) ;
12694: LD_VAR 0 1
12698: PPUSH
12699: LD_INT 40
12701: PPUSH
12702: LD_INT 47
12704: PPUSH
12705: CALL_OW 111
// if GetSide ( driver ) = 3 then
12709: LD_VAR 0 1
12713: PPUSH
12714: CALL_OW 255
12718: PUSH
12719: LD_INT 3
12721: EQUAL
12722: IFFALSE 12946
// begin ComMoveXY ( driver , 90 , 97 ) ;
12724: LD_VAR 0 1
12728: PPUSH
12729: LD_INT 90
12731: PPUSH
12732: LD_INT 97
12734: PPUSH
12735: CALL_OW 111
// if IsOk ( ruFac ) then
12739: LD_INT 29
12741: PPUSH
12742: CALL_OW 302
12746: IFFALSE 12870
// begin repeat wait ( 0 0$1 ) ;
12748: LD_INT 35
12750: PPUSH
12751: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
12755: LD_INT 29
12757: PPUSH
12758: CALL_OW 313
12762: PUSH
12763: LD_INT 6
12765: LESS
12766: PUSH
12767: LD_VAR 0 1
12771: PPUSH
12772: CALL_OW 301
12776: OR
12777: IFFALSE 12748
// if IsDead ( driver ) then
12779: LD_VAR 0 1
12783: PPUSH
12784: CALL_OW 301
12788: IFFALSE 12792
// exit ;
12790: GO 12946
// repeat wait ( 0 0$10 ) ;
12792: LD_INT 350
12794: PPUSH
12795: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
12799: LD_VAR 0 1
12803: PPUSH
12804: CALL_OW 314
12808: NOT
12809: PUSH
12810: LD_INT 29
12812: PPUSH
12813: CALL_OW 313
12817: PUSH
12818: LD_INT 6
12820: LESS
12821: AND
12822: IFFALSE 12836
// ComEnterUnit ( driver , ruFac ) ;
12824: LD_VAR 0 1
12828: PPUSH
12829: LD_INT 29
12831: PPUSH
12832: CALL_OW 120
// until not IsOk ( ruFac ) or IsDead ( driver ) or IsInUnit ( driver ) ;
12836: LD_INT 29
12838: PPUSH
12839: CALL_OW 302
12843: NOT
12844: PUSH
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 301
12854: OR
12855: PUSH
12856: LD_VAR 0 1
12860: PPUSH
12861: CALL_OW 310
12865: OR
12866: IFFALSE 12792
// end else
12868: GO 12946
// begin ComMoveXY ( driver , 142 , 148 ) ;
12870: LD_VAR 0 1
12874: PPUSH
12875: LD_INT 142
12877: PPUSH
12878: LD_INT 148
12880: PPUSH
12881: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12885: LD_INT 35
12887: PPUSH
12888: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
12892: LD_VAR 0 1
12896: PPUSH
12897: CALL_OW 301
12901: PUSH
12902: LD_VAR 0 1
12906: PPUSH
12907: LD_INT 142
12909: PPUSH
12910: LD_INT 148
12912: PPUSH
12913: CALL_OW 307
12917: OR
12918: IFFALSE 12885
// if IsAt ( driver , 142 , 148 ) then
12920: LD_VAR 0 1
12924: PPUSH
12925: LD_INT 142
12927: PPUSH
12928: LD_INT 148
12930: PPUSH
12931: CALL_OW 307
12935: IFFALSE 12946
// RemoveUnit ( driver ) ;
12937: LD_VAR 0 1
12941: PPUSH
12942: CALL_OW 64
// end ; end ; end ;
12946: PPOPN 4
12948: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
12949: LD_VAR 0 2
12953: PPUSH
12954: CALL_OW 257
12958: PUSH
12959: LD_INT 3
12961: EQUAL
12962: PUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 255
12972: PUSH
12973: LD_INT 3
12975: EQUAL
12976: AND
12977: PUSH
12978: LD_VAR 0 1
12982: PUSH
12983: LD_INT 29
12985: EQUAL
12986: AND
12987: IFFALSE 13001
// SetLives ( un , 1000 ) ;
12989: LD_VAR 0 2
12993: PPUSH
12994: LD_INT 1000
12996: PPUSH
12997: CALL_OW 234
// end ;
13001: PPOPN 2
13003: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
13004: LD_INT 0
13006: PPUSH
13007: PPUSH
// begin if GetSide ( b ) = 3 then
13008: LD_VAR 0 1
13012: PPUSH
13013: CALL_OW 255
13017: PUSH
13018: LD_INT 3
13020: EQUAL
13021: IFFALSE 13252
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13023: LD_VAR 0 1
13027: PPUSH
13028: CALL_OW 266
13032: PUSH
13033: LD_INT 32
13035: PUSH
13036: LD_INT 5
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: IN
13043: IFFALSE 13252
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13045: LD_ADDR_VAR 0 4
13049: PUSH
13050: LD_INT 22
13052: PUSH
13053: LD_INT 3
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 50
13062: PUSH
13063: EMPTY
13064: LIST
13065: PUSH
13066: LD_INT 30
13068: PUSH
13069: LD_INT 32
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 58
13078: PUSH
13079: EMPTY
13080: LIST
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 69
13092: ST_TO_ADDR
// if tmp then
13093: LD_VAR 0 4
13097: IFFALSE 13119
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13099: LD_VAR 0 2
13103: PPUSH
13104: LD_VAR 0 4
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: PPUSH
13113: CALL_OW 120
// exit ;
13117: GO 13252
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13119: LD_ADDR_VAR 0 4
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: LD_INT 3
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 50
13136: PUSH
13137: EMPTY
13138: LIST
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: LD_INT 30
13145: PUSH
13146: LD_INT 4
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 30
13155: PUSH
13156: LD_INT 5
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: ST_TO_ADDR
// if not tmp then
13178: LD_VAR 0 4
13182: NOT
13183: IFFALSE 13202
// begin ComMoveXY ( un , 92 , 99 ) ;
13185: LD_VAR 0 2
13189: PPUSH
13190: LD_INT 92
13192: PPUSH
13193: LD_INT 99
13195: PPUSH
13196: CALL_OW 111
// exit ;
13200: GO 13252
// end ; for i in tmp do
13202: LD_ADDR_VAR 0 3
13206: PUSH
13207: LD_VAR 0 4
13211: PUSH
13212: FOR_IN
13213: IFFALSE 13250
// if UnitsInside ( i ) < 6 then
13215: LD_VAR 0 3
13219: PPUSH
13220: CALL_OW 313
13224: PUSH
13225: LD_INT 6
13227: LESS
13228: IFFALSE 13248
// begin ComEnterUnit ( un , i ) ;
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: CALL_OW 120
// exit ;
13244: POP
13245: POP
13246: GO 13252
// end ;
13248: GO 13212
13250: POP
13251: POP
// end ; end ; end ;
13252: PPOPN 4
13254: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
13255: LD_VAR 0 1
13259: PPUSH
13260: CALL_OW 255
13264: PUSH
13265: LD_INT 3
13267: PUSH
13268: LD_INT 6
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: IN
13275: PUSH
13276: LD_VAR 0 1
13280: PPUSH
13281: CALL_OW 263
13285: PUSH
13286: LD_INT 3
13288: EQUAL
13289: AND
13290: PUSH
13291: LD_EXP 6
13295: NOT
13296: AND
13297: IFFALSE 13316
// begin seenComputer := true ;
13299: LD_ADDR_EXP 6
13303: PUSH
13304: LD_INT 1
13306: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
13307: LD_VAR 0 1
13311: PPUSH
13312: CALL 16045 0 1
// end ; end ;
13316: PPOPN 1
13318: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
13319: LD_INT 0
13321: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
13322: LD_VAR 0 1
13326: PPUSH
13327: LD_VAR 0 2
13331: PPUSH
13332: CALL 32813 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
13336: LD_VAR 0 1
13340: PPUSH
13341: CALL_OW 255
13345: PUSH
13346: LD_INT 3
13348: EQUAL
13349: PUSH
13350: LD_VAR 0 1
13354: PPUSH
13355: CALL_OW 263
13359: PUSH
13360: LD_INT 1
13362: EQUAL
13363: AND
13364: PUSH
13365: LD_VAR 0 1
13369: PPUSH
13370: CALL_OW 264
13374: PUSH
13375: LD_INT 42
13377: PUSH
13378: LD_INT 43
13380: PUSH
13381: LD_INT 44
13383: PUSH
13384: LD_INT 46
13386: PUSH
13387: LD_INT 45
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: IN
13397: AND
13398: IFFALSE 13416
// ruMobile := ruMobile union vehicle ;
13400: LD_ADDR_EXP 29
13404: PUSH
13405: LD_EXP 29
13409: PUSH
13410: LD_VAR 0 1
13414: UNION
13415: ST_TO_ADDR
// end ;
13416: PPOPN 3
13418: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
13419: LD_INT 0
13421: PPUSH
// begin if InArea ( x , y , ruCrates ) then
13422: LD_VAR 0 2
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 13
13434: PPUSH
13435: CALL_OW 309
13439: IFFALSE 13510
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
13441: LD_ADDR_VAR 0 6
13445: PUSH
13446: LD_INT 22
13448: PUSH
13449: LD_INT 3
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 50
13458: PUSH
13459: EMPTY
13460: LIST
13461: PUSH
13462: LD_INT 34
13464: PUSH
13465: LD_INT 51
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PPUSH
13477: CALL_OW 69
13481: ST_TO_ADDR
// if not cargo then
13482: LD_VAR 0 6
13486: NOT
13487: IFFALSE 13491
// exit ;
13489: GO 13510
// AddComCollect ( cargo , x , y ) ;
13491: LD_VAR 0 6
13495: PPUSH
13496: LD_VAR 0 2
13500: PPUSH
13501: LD_VAR 0 3
13505: PPUSH
13506: CALL_OW 177
// end ; end ;
13510: PPOPN 6
13512: END
// on BuildingComplete ( b ) do var i , tmp ;
13513: LD_INT 0
13515: PPUSH
13516: PPUSH
// begin if GetSide ( b ) = 3 then
13517: LD_VAR 0 1
13521: PPUSH
13522: CALL_OW 255
13526: PUSH
13527: LD_INT 3
13529: EQUAL
13530: IFFALSE 13745
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
13532: LD_ADDR_EXP 30
13536: PUSH
13537: LD_EXP 30
13541: PPUSH
13542: LD_INT 1
13544: PPUSH
13545: CALL_OW 3
13549: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
13550: LD_VAR 0 1
13554: PPUSH
13555: CALL_OW 266
13559: PUSH
13560: LD_INT 32
13562: PUSH
13563: LD_INT 33
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: IN
13570: IFFALSE 13745
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
13572: LD_VAR 0 1
13576: PPUSH
13577: LD_INT 46
13579: PUSH
13580: LD_INT 45
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 1
13589: PPUSH
13590: LD_INT 2
13592: PPUSH
13593: CALL_OW 12
13597: ARRAY
13598: PPUSH
13599: CALL_OW 208
// if GetBType ( b ) = b_bunker then
13603: LD_VAR 0 1
13607: PPUSH
13608: CALL_OW 266
13612: PUSH
13613: LD_INT 32
13615: EQUAL
13616: IFFALSE 13745
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
13618: LD_ADDR_VAR 0 3
13622: PUSH
13623: LD_INT 22
13625: PUSH
13626: LD_INT 3
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 1
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 120
13645: PUSH
13646: LD_INT 0
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: PPUSH
13658: CALL_OW 69
13662: ST_TO_ADDR
// if tmp then
13663: LD_VAR 0 3
13667: IFFALSE 13745
// for i in tmp do
13669: LD_ADDR_VAR 0 2
13673: PUSH
13674: LD_VAR 0 3
13678: PUSH
13679: FOR_IN
13680: IFFALSE 13743
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
13682: LD_VAR 0 2
13686: PPUSH
13687: CALL_OW 310
13691: NOT
13692: PUSH
13693: LD_VAR 0 2
13697: PPUSH
13698: CALL_OW 310
13702: PPUSH
13703: CALL_OW 266
13707: PUSH
13708: LD_INT 32
13710: NONEQUAL
13711: OR
13712: IFFALSE 13741
// begin ComExit ( i ) ;
13714: LD_VAR 0 2
13718: PPUSH
13719: CALL 74400 0 1
// AddComEnterUnit ( i , b ) ;
13723: LD_VAR 0 2
13727: PPUSH
13728: LD_VAR 0 1
13732: PPUSH
13733: CALL_OW 180
// exit ;
13737: POP
13738: POP
13739: GO 13745
// end ;
13741: GO 13679
13743: POP
13744: POP
// end ; end ; end ; end ; end_of_file
13745: PPOPN 3
13747: END
// export function Action ; var i , tmp , un , inUnit ; begin
13748: LD_INT 0
13750: PPUSH
13751: PPUSH
13752: PPUSH
13753: PPUSH
13754: PPUSH
// Video ( true ) ;
13755: LD_INT 1
13757: PPUSH
13758: CALL 73984 0 1
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
13762: LD_INT 50
13764: PPUSH
13765: LD_INT 12
13767: PPUSH
13768: LD_INT 1
13770: PPUSH
13771: LD_INT 56
13773: NEG
13774: PPUSH
13775: CALL 73898 0 4
// CenterOnXY ( 50 , 12 ) ;
13779: LD_INT 50
13781: PPUSH
13782: LD_INT 12
13784: PPUSH
13785: CALL_OW 84
// wait ( 0 0$3 ) ;
13789: LD_INT 105
13791: PPUSH
13792: CALL_OW 67
// PrepareStartRussianAttack ;
13796: CALL 9230 0 0
// CenterOnXY ( 66 , 47 ) ;
13800: LD_INT 66
13802: PPUSH
13803: LD_INT 47
13805: PPUSH
13806: CALL_OW 84
// wait ( 0 0$5 ) ;
13810: LD_INT 175
13812: PPUSH
13813: CALL_OW 67
// case gammaCommander of 1 :
13817: LD_EXP 9
13821: PUSH
13822: LD_INT 1
13824: DOUBLE
13825: EQUAL
13826: IFTRUE 13830
13828: GO 13845
13830: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
13831: LD_EXP 12
13835: PPUSH
13836: LD_STRING D1-Don-1
13838: PPUSH
13839: CALL_OW 88
13843: GO 13892
13845: LD_INT 2
13847: DOUBLE
13848: EQUAL
13849: IFTRUE 13853
13851: GO 13868
13853: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
13854: LD_EXP 11
13858: PPUSH
13859: LD_STRING D1-Brown-1
13861: PPUSH
13862: CALL_OW 88
13866: GO 13892
13868: LD_INT 3
13870: DOUBLE
13871: EQUAL
13872: IFTRUE 13876
13874: GO 13891
13876: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
13877: LD_EXP 20
13881: PPUSH
13882: LD_STRING D1-VanH-1
13884: PPUSH
13885: CALL_OW 88
13889: GO 13892
13891: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
13892: LD_ADDR_VAR 0 3
13896: PUSH
13897: LD_INT 22
13899: PUSH
13900: LD_INT 1
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 33
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 61
13919: PUSH
13920: EMPTY
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: PPUSH
13928: CALL_OW 69
13932: ST_TO_ADDR
// if tmp then
13933: LD_VAR 0 3
13937: IFFALSE 13954
// ComAgressiveMove ( tmp , 74 , 44 ) ;
13939: LD_VAR 0 3
13943: PPUSH
13944: LD_INT 74
13946: PPUSH
13947: LD_INT 44
13949: PPUSH
13950: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
13954: LD_ADDR_VAR 0 3
13958: PUSH
13959: LD_INT 22
13961: PUSH
13962: LD_INT 1
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 25
13971: PUSH
13972: LD_INT 1
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PPUSH
13983: CALL_OW 69
13987: PUSH
13988: LD_EXP 12
13992: PUSH
13993: LD_EXP 11
13997: PUSH
13998: LD_EXP 20
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: LIST
14007: DIFF
14008: ST_TO_ADDR
// if tmp then
14009: LD_VAR 0 3
14013: IFFALSE 14091
// for i in tmp do
14015: LD_ADDR_VAR 0 2
14019: PUSH
14020: LD_VAR 0 3
14024: PUSH
14025: FOR_IN
14026: IFFALSE 14089
// begin inUnit := IsInUnit ( i ) ;
14028: LD_ADDR_VAR 0 5
14032: PUSH
14033: LD_VAR 0 2
14037: PPUSH
14038: CALL_OW 310
14042: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14043: LD_VAR 0 5
14047: PUSH
14048: LD_VAR 0 5
14052: PPUSH
14053: CALL_OW 266
14057: PUSH
14058: LD_INT 32
14060: PUSH
14061: LD_INT 31
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: IN
14068: AND
14069: IFFALSE 14087
// tmp := tmp diff i ;
14071: LD_ADDR_VAR 0 3
14075: PUSH
14076: LD_VAR 0 3
14080: PUSH
14081: LD_VAR 0 2
14085: DIFF
14086: ST_TO_ADDR
// end ;
14087: GO 14025
14089: POP
14090: POP
// if tmp then
14091: LD_VAR 0 3
14095: IFFALSE 14185
// begin ComExitAll ( tmp ) ;
14097: LD_VAR 0 3
14101: PPUSH
14102: CALL 74483 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_INT 74
14113: PPUSH
14114: LD_INT 44
14116: PPUSH
14117: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
14121: LD_ADDR_VAR 0 3
14125: PUSH
14126: LD_INT 22
14128: PUSH
14129: LD_INT 1
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 25
14138: PUSH
14139: LD_INT 4
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PPUSH
14150: CALL_OW 69
14154: ST_TO_ADDR
// if tmp then
14155: LD_VAR 0 3
14159: IFFALSE 14185
// begin ComExitAll ( tmp ) ;
14161: LD_VAR 0 3
14165: PPUSH
14166: CALL 74483 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
14170: LD_VAR 0 3
14174: PPUSH
14175: LD_INT 66
14177: PPUSH
14178: LD_INT 28
14180: PPUSH
14181: CALL_OW 171
// end ; end ; game_speed := 4 ;
14185: LD_ADDR_OWVAR 65
14189: PUSH
14190: LD_INT 4
14192: ST_TO_ADDR
// wait ( 0 0$2 ) ;
14193: LD_INT 70
14195: PPUSH
14196: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
14200: LD_EXP 24
14204: PPUSH
14205: LD_STRING D1-Har-1
14207: PPUSH
14208: CALL_OW 94
// case gammaCommander of 1 :
14212: LD_EXP 9
14216: PUSH
14217: LD_INT 1
14219: DOUBLE
14220: EQUAL
14221: IFTRUE 14225
14223: GO 14240
14225: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
14226: LD_EXP 12
14230: PPUSH
14231: LD_STRING D1-Don-2
14233: PPUSH
14234: CALL_OW 88
14238: GO 14287
14240: LD_INT 2
14242: DOUBLE
14243: EQUAL
14244: IFTRUE 14248
14246: GO 14263
14248: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
14249: LD_EXP 11
14253: PPUSH
14254: LD_STRING D1-Brown-2
14256: PPUSH
14257: CALL_OW 88
14261: GO 14287
14263: LD_INT 3
14265: DOUBLE
14266: EQUAL
14267: IFTRUE 14271
14269: GO 14286
14271: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
14272: LD_EXP 20
14276: PPUSH
14277: LD_STRING D1-VanH-2
14279: PPUSH
14280: CALL_OW 88
14284: GO 14287
14286: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
14287: LD_EXP 24
14291: PPUSH
14292: LD_STRING D1-Har-2
14294: PPUSH
14295: CALL_OW 94
// Video ( false ) ;
14299: LD_INT 0
14301: PPUSH
14302: CALL 73984 0 1
// ChangeMissionObjectives ( M1 ) ;
14306: LD_STRING M1
14308: PPUSH
14309: CALL_OW 337
// SaveForQuickRestart ;
14313: CALL_OW 22
// wait ( 2 2$30 ) ;
14317: LD_INT 5250
14319: PPUSH
14320: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
14324: LD_INT 1
14326: PPUSH
14327: CALL 11472 0 1
// wait ( 4 4$30 ) ;
14331: LD_INT 9450
14333: PPUSH
14334: CALL_OW 67
// if Difficulty > 2 then
14338: LD_OWVAR 67
14342: PUSH
14343: LD_INT 2
14345: GREATER
14346: IFFALSE 14355
// PrepareRussianAttack ( 2 ) ;
14348: LD_INT 2
14350: PPUSH
14351: CALL 11472 0 1
// if Difficulty > 3 then
14355: LD_OWVAR 67
14359: PUSH
14360: LD_INT 3
14362: GREATER
14363: IFFALSE 14522
// begin for i := 1 to 4 do
14365: LD_ADDR_VAR 0 2
14369: PUSH
14370: DOUBLE
14371: LD_INT 1
14373: DEC
14374: ST_TO_ADDR
14375: LD_INT 4
14377: PUSH
14378: FOR_TO
14379: IFFALSE 14464
// begin uc_side := 6 ;
14381: LD_ADDR_OWVAR 20
14385: PUSH
14386: LD_INT 6
14388: ST_TO_ADDR
// uc_nation := 3 ;
14389: LD_ADDR_OWVAR 21
14393: PUSH
14394: LD_INT 3
14396: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
14397: LD_INT 0
14399: PPUSH
14400: LD_INT 6
14402: PPUSH
14403: CALL_OW 381
// un := CreateHuman ;
14407: LD_ADDR_VAR 0 4
14411: PUSH
14412: CALL_OW 44
14416: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14417: LD_VAR 0 4
14421: PPUSH
14422: LD_INT 122
14424: PPUSH
14425: LD_INT 89
14427: PPUSH
14428: LD_INT 3
14430: PPUSH
14431: LD_INT 0
14433: PPUSH
14434: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
14438: LD_VAR 0 4
14442: PPUSH
14443: LD_INT 88
14445: PPUSH
14446: LD_INT 42
14448: PPUSH
14449: CALL_OW 114
// AddComHold ( un ) ;
14453: LD_VAR 0 4
14457: PPUSH
14458: CALL_OW 200
// end ;
14462: GO 14378
14464: POP
14465: POP
// PrepareScientist ( false , 6 ) ;
14466: LD_INT 0
14468: PPUSH
14469: LD_INT 6
14471: PPUSH
14472: CALL_OW 384
// un := CreateHuman ;
14476: LD_ADDR_VAR 0 4
14480: PUSH
14481: CALL_OW 44
14485: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14486: LD_VAR 0 4
14490: PPUSH
14491: LD_INT 122
14493: PPUSH
14494: LD_INT 89
14496: PPUSH
14497: LD_INT 3
14499: PPUSH
14500: LD_INT 0
14502: PPUSH
14503: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
14507: LD_VAR 0 4
14511: PPUSH
14512: LD_INT 91
14514: PPUSH
14515: LD_INT 48
14517: PPUSH
14518: CALL_OW 111
// end ; end ;
14522: LD_VAR 0 1
14526: RET
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 3 ] ] ) = 0 and tick > 5 5$00 do var dialog ;
14527: LD_INT 22
14529: PUSH
14530: LD_INT 1
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 101
14539: PUSH
14540: LD_INT 3
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PPUSH
14551: CALL_OW 69
14555: PUSH
14556: LD_INT 0
14558: EQUAL
14559: PUSH
14560: LD_OWVAR 1
14564: PUSH
14565: LD_INT 10500
14567: GREATER
14568: AND
14569: IFFALSE 16042
14571: GO 14573
14573: DISABLE
14574: LD_INT 0
14576: PPUSH
// begin PrepareSupportFromDelta ;
14577: CALL 4052 0 0
// deltaSupport := true ;
14581: LD_ADDR_EXP 5
14585: PUSH
14586: LD_INT 1
14588: ST_TO_ADDR
// dialog := false ;
14589: LD_ADDR_VAR 0 1
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// if IsOk ( Gladstone ) then
14597: LD_EXP 17
14601: PPUSH
14602: CALL_OW 302
14606: IFFALSE 14628
// dialog := Say ( Gladstone , D2-Glad-1 ) else
14608: LD_ADDR_VAR 0 1
14612: PUSH
14613: LD_EXP 17
14617: PPUSH
14618: LD_STRING D2-Glad-1
14620: PPUSH
14621: CALL_OW 88
14625: ST_TO_ADDR
14626: GO 14710
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: LD_INT 22
14635: PUSH
14636: LD_INT 1
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 120
14645: PUSH
14646: LD_INT 107
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 21
14655: PUSH
14656: LD_INT 1
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 23
14665: PUSH
14666: LD_INT 1
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: PUSH
14684: LD_EXP 22
14688: PUSH
14689: LD_EXP 21
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: DIFF
14698: PPUSH
14699: LD_STRING D2-Sol1-1
14701: PPUSH
14702: LD_STRING D2-FSol1-1
14704: PPUSH
14705: CALL 18038 0 3
14709: ST_TO_ADDR
// if dialog then
14710: LD_VAR 0 1
14714: IFFALSE 14815
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
14716: LD_EXP 12
14720: PPUSH
14721: CALL_OW 302
14725: PUSH
14726: LD_EXP 9
14730: PUSH
14731: LD_INT 1
14733: EQUAL
14734: AND
14735: IFFALSE 14749
// Say ( Donaldson , D2-Don-1 ) ;
14737: LD_EXP 12
14741: PPUSH
14742: LD_STRING D2-Don-1
14744: PPUSH
14745: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14749: LD_EXP 11
14753: PPUSH
14754: CALL_OW 302
14758: PUSH
14759: LD_EXP 9
14763: PUSH
14764: LD_INT 2
14766: EQUAL
14767: AND
14768: IFFALSE 14782
// Say ( Brown , D2-Brown-1 ) ;
14770: LD_EXP 11
14774: PPUSH
14775: LD_STRING D2-Brown-1
14777: PPUSH
14778: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14782: LD_EXP 20
14786: PPUSH
14787: CALL_OW 302
14791: PUSH
14792: LD_EXP 9
14796: PUSH
14797: LD_INT 3
14799: EQUAL
14800: AND
14801: IFFALSE 14815
// Say ( Houten , D2-VanH-1 ) ;
14803: LD_EXP 20
14807: PPUSH
14808: LD_STRING D2-VanH-1
14810: PPUSH
14811: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
14815: LD_INT 3
14817: PPUSH
14818: CALL 11472 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
14822: LD_STRING 07_time
14824: PPUSH
14825: LD_INT 18900
14827: PPUSH
14828: CALL_OW 30
14832: PUSH
14833: LD_INT 3
14835: DIV
14836: PPUSH
14837: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
14841: LD_INT 34
14843: PPUSH
14844: LD_INT 1
14846: PPUSH
14847: CALL_OW 321
14851: PUSH
14852: LD_INT 2
14854: EQUAL
14855: IFFALSE 14864
// SetAchievement ( ACH_HEAVYGUN ) ;
14857: LD_STRING ACH_HEAVYGUN
14859: PPUSH
14860: CALL_OW 543
// PrepareMacmillanSquad ;
14864: CALL 4789 0 0
// CenterNowOnUnits ( JMM ) ;
14868: LD_EXP 10
14872: PPUSH
14873: CALL_OW 87
// wait ( 0 0$10 ) ;
14877: LD_INT 350
14879: PPUSH
14880: CALL_OW 67
// PrepareRussianAttack ( Difficulty + 2 ) ;
14884: LD_OWVAR 67
14888: PUSH
14889: LD_INT 2
14891: PLUS
14892: PPUSH
14893: CALL 11472 0 1
// repeat wait ( 0 0$1 ) ;
14897: LD_INT 35
14899: PPUSH
14900: CALL_OW 67
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) ;
14904: LD_EXP 10
14908: PPUSH
14909: LD_INT 15
14911: PPUSH
14912: CALL_OW 308
14916: PUSH
14917: LD_EXP 10
14921: PPUSH
14922: CALL_OW 310
14926: PPUSH
14927: LD_INT 15
14929: PPUSH
14930: CALL_OW 308
14934: OR
14935: IFFALSE 14897
// DialogueOn ;
14937: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
14941: LD_EXP 10
14945: PPUSH
14946: LD_STRING D3-JMM-1
14948: PPUSH
14949: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
14953: LD_EXP 12
14957: PPUSH
14958: CALL_OW 302
14962: PUSH
14963: LD_EXP 9
14967: PUSH
14968: LD_INT 1
14970: EQUAL
14971: AND
14972: IFFALSE 14988
// Say ( Donaldson , D3-Don-1 ) else
14974: LD_EXP 12
14978: PPUSH
14979: LD_STRING D3-Don-1
14981: PPUSH
14982: CALL_OW 88
14986: GO 15084
// begin if gammaCommander = 1 then
14988: LD_EXP 9
14992: PUSH
14993: LD_INT 1
14995: EQUAL
14996: IFFALSE 15084
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
14998: LD_INT 22
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 21
15010: PUSH
15011: LD_INT 1
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 23
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 120
15030: PUSH
15031: LD_INT 106
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 26
15040: PUSH
15041: LD_INT 1
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: PPUSH
15055: CALL_OW 69
15059: PPUSH
15060: LD_STRING D3-Sol1-1
15062: PPUSH
15063: LD_STRING 
15065: PPUSH
15066: CALL 18038 0 3
15070: IFFALSE 15084
// Say ( JMM , D3-JMM-2 ) ;
15072: LD_EXP 10
15076: PPUSH
15077: LD_STRING D3-JMM-2
15079: PPUSH
15080: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15084: LD_EXP 11
15088: PPUSH
15089: CALL_OW 302
15093: PUSH
15094: LD_EXP 9
15098: PUSH
15099: LD_INT 2
15101: EQUAL
15102: AND
15103: IFFALSE 15119
// Say ( Brown , D3-Brown-1 ) else
15105: LD_EXP 11
15109: PPUSH
15110: LD_STRING D3-Brown-1
15112: PPUSH
15113: CALL_OW 88
15117: GO 15215
// begin if gammaCommander = 2 then
15119: LD_EXP 9
15123: PUSH
15124: LD_INT 2
15126: EQUAL
15127: IFFALSE 15215
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
15129: LD_INT 22
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 21
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 23
15151: PUSH
15152: LD_INT 1
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 120
15161: PUSH
15162: LD_INT 106
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: LD_INT 26
15171: PUSH
15172: LD_INT 1
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PPUSH
15191: LD_STRING D3-Sol1-1a
15193: PPUSH
15194: LD_STRING 
15196: PPUSH
15197: CALL 18038 0 3
15201: IFFALSE 15215
// Say ( JMM , D3-JMM-2 ) ;
15203: LD_EXP 10
15207: PPUSH
15208: LD_STRING D3-JMM-2
15210: PPUSH
15211: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15215: LD_EXP 20
15219: PPUSH
15220: CALL_OW 302
15224: PUSH
15225: LD_EXP 9
15229: PUSH
15230: LD_INT 3
15232: EQUAL
15233: AND
15234: IFFALSE 15250
// Say ( Houten , D3-VanH-1 ) else
15236: LD_EXP 20
15240: PPUSH
15241: LD_STRING D3-VanH-1
15243: PPUSH
15244: CALL_OW 88
15248: GO 15346
// begin if gammaCommander = 3 then
15250: LD_EXP 9
15254: PUSH
15255: LD_INT 3
15257: EQUAL
15258: IFFALSE 15346
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
15260: LD_INT 22
15262: PUSH
15263: LD_INT 1
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: LD_INT 1
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 23
15282: PUSH
15283: LD_INT 1
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 120
15292: PUSH
15293: LD_INT 106
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 26
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: PPUSH
15317: CALL_OW 69
15321: PPUSH
15322: LD_STRING D3-Sol1-1b
15324: PPUSH
15325: LD_STRING 
15327: PPUSH
15328: CALL 18038 0 3
15332: IFFALSE 15346
// Say ( JMM , D3-JMM-2 ) ;
15334: LD_EXP 10
15338: PPUSH
15339: LD_STRING D3-JMM-2
15341: PPUSH
15342: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15346: LD_EXP 22
15350: PPUSH
15351: CALL_OW 302
15355: IFFALSE 15383
// begin Say ( Joan , D3a-Joan-1 ) ;
15357: LD_EXP 22
15361: PPUSH
15362: LD_STRING D3a-Joan-1
15364: PPUSH
15365: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15369: LD_EXP 10
15373: PPUSH
15374: LD_STRING D3a-JMM-1
15376: PPUSH
15377: CALL_OW 88
// end else
15381: GO 15817
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15383: LD_STRING 06_JoanStatus_1
15385: PPUSH
15386: LD_INT 0
15388: PPUSH
15389: CALL_OW 30
15393: PUSH
15394: LD_INT 1
15396: EQUAL
15397: IFFALSE 15817
// begin Say ( JMM , D3b-JMM-1 ) ;
15399: LD_EXP 10
15403: PPUSH
15404: LD_STRING D3b-JMM-1
15406: PPUSH
15407: CALL_OW 88
// dialog := false ;
15411: LD_ADDR_VAR 0 1
15415: PUSH
15416: LD_INT 0
15418: ST_TO_ADDR
// if gammaCommander = 1 then
15419: LD_EXP 9
15423: PUSH
15424: LD_INT 1
15426: EQUAL
15427: IFFALSE 15538
// if IsOK ( Donaldson ) then
15429: LD_EXP 12
15433: PPUSH
15434: CALL_OW 302
15438: IFFALSE 15460
// dialog := Say ( Donaldson , D3b-Don-1 ) else
15440: LD_ADDR_VAR 0 1
15444: PUSH
15445: LD_EXP 12
15449: PPUSH
15450: LD_STRING D3b-Don-1
15452: PPUSH
15453: CALL_OW 88
15457: ST_TO_ADDR
15458: GO 15538
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15460: LD_ADDR_VAR 0 1
15464: PUSH
15465: LD_INT 22
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 21
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 23
15487: PUSH
15488: LD_INT 1
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 120
15497: PUSH
15498: LD_INT 106
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 26
15507: PUSH
15508: LD_INT 1
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PPUSH
15522: CALL_OW 69
15526: PPUSH
15527: LD_STRING D3b-Sol1-1
15529: PPUSH
15530: LD_STRING 
15532: PPUSH
15533: CALL 18038 0 3
15537: ST_TO_ADDR
// if gammaCommander = 2 then
15538: LD_EXP 9
15542: PUSH
15543: LD_INT 2
15545: EQUAL
15546: IFFALSE 15657
// if IsOk ( Brown ) then
15548: LD_EXP 11
15552: PPUSH
15553: CALL_OW 302
15557: IFFALSE 15579
// dialog := Say ( Brown , D3b-Brown-1 ) else
15559: LD_ADDR_VAR 0 1
15563: PUSH
15564: LD_EXP 11
15568: PPUSH
15569: LD_STRING D3b-Brown-1
15571: PPUSH
15572: CALL_OW 88
15576: ST_TO_ADDR
15577: GO 15657
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15579: LD_ADDR_VAR 0 1
15583: PUSH
15584: LD_INT 22
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 21
15596: PUSH
15597: LD_INT 1
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 23
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 120
15616: PUSH
15617: LD_INT 106
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 26
15626: PUSH
15627: LD_INT 1
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: PPUSH
15641: CALL_OW 69
15645: PPUSH
15646: LD_STRING D3b-Sol1-1
15648: PPUSH
15649: LD_STRING 
15651: PPUSH
15652: CALL 18038 0 3
15656: ST_TO_ADDR
// if gammaCommander = 3 then
15657: LD_EXP 9
15661: PUSH
15662: LD_INT 3
15664: EQUAL
15665: IFFALSE 15776
// if IsOk ( Houten ) then
15667: LD_EXP 20
15671: PPUSH
15672: CALL_OW 302
15676: IFFALSE 15698
// dialog := Say ( Houten , D3b-VanH-1 ) else
15678: LD_ADDR_VAR 0 1
15682: PUSH
15683: LD_EXP 20
15687: PPUSH
15688: LD_STRING D3b-VanH-1
15690: PPUSH
15691: CALL_OW 88
15695: ST_TO_ADDR
15696: GO 15776
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15698: LD_ADDR_VAR 0 1
15702: PUSH
15703: LD_INT 22
15705: PUSH
15706: LD_INT 1
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 21
15715: PUSH
15716: LD_INT 1
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 23
15725: PUSH
15726: LD_INT 1
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 120
15735: PUSH
15736: LD_INT 106
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 26
15745: PUSH
15746: LD_INT 1
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: PPUSH
15760: CALL_OW 69
15764: PPUSH
15765: LD_STRING D3b-Sol1-1
15767: PPUSH
15768: LD_STRING 
15770: PPUSH
15771: CALL 18038 0 3
15775: ST_TO_ADDR
// if dialog then
15776: LD_VAR 0 1
15780: IFFALSE 15817
// begin Say ( JMM , D3b-JMM-2 ) ;
15782: LD_EXP 10
15786: PPUSH
15787: LD_STRING D3b-JMM-2
15789: PPUSH
15790: CALL_OW 88
// if IsOK ( Lisa ) then
15794: LD_EXP 15
15798: PPUSH
15799: CALL_OW 302
15803: IFFALSE 15817
// Say ( Lisa , D3b-Lisa-2 ) ;
15805: LD_EXP 15
15809: PPUSH
15810: LD_STRING D3b-Lisa-2
15812: PPUSH
15813: CALL_OW 88
// end ; end ; end ; if not seenComputer then
15817: LD_EXP 6
15821: NOT
15822: IFFALSE 15830
// begin DialogueOff ;
15824: CALL_OW 7
// exit ;
15828: GO 16042
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
15830: LD_INT 22
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 21
15842: PUSH
15843: LD_INT 1
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 23
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 2
15862: PUSH
15863: LD_INT 120
15865: PUSH
15866: LD_INT 106
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 120
15875: PUSH
15876: LD_INT 107
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 26
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: PPUSH
15905: CALL_OW 69
15909: PPUSH
15910: LD_STRING DCa-Sol1-1
15912: PPUSH
15913: LD_STRING 
15915: PPUSH
15916: CALL 18038 0 3
15920: IFFALSE 15934
// Say ( JMM , DCb-JMM-1 ) ;
15922: LD_EXP 10
15926: PPUSH
15927: LD_STRING DCb-JMM-1
15929: PPUSH
15930: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
15934: LD_INT 22
15936: PUSH
15937: LD_INT 1
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 21
15946: PUSH
15947: LD_INT 1
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 23
15956: PUSH
15957: LD_INT 1
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 2
15966: PUSH
15967: LD_INT 120
15969: PUSH
15970: LD_INT 106
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 120
15979: PUSH
15980: LD_INT 107
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 26
15994: PUSH
15995: LD_INT 1
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 69
16013: PPUSH
16014: LD_STRING DCb-Sol1-1
16016: PPUSH
16017: LD_STRING 
16019: PPUSH
16020: CALL 18038 0 3
16024: IFFALSE 16038
// Say ( JMM , DCb-JMM-2 ) ;
16026: LD_EXP 10
16030: PPUSH
16031: LD_STRING DCb-JMM-2
16033: PPUSH
16034: CALL_OW 88
// DialogueOff ;
16038: CALL_OW 7
// end ;
16042: PPOPN 1
16044: END
// export function DialogSeenComputer ( un ) ; begin
16045: LD_INT 0
16047: PPUSH
// if jmmArrival then
16048: LD_EXP 7
16052: IFFALSE 16056
// exit ;
16054: GO 16122
// CenterOnUnits ( un ) ;
16056: LD_VAR 0 1
16060: PPUSH
16061: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
16065: LD_INT 22
16067: PUSH
16068: LD_INT 1
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 2
16077: PUSH
16078: LD_INT 120
16080: PUSH
16081: LD_INT 106
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 120
16090: PUSH
16091: LD_INT 107
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PPUSH
16107: CALL_OW 69
16111: PPUSH
16112: LD_STRING DC-Sol1-1
16114: PPUSH
16115: LD_STRING DC-FSol1-1
16117: PPUSH
16118: CALL 18038 0 3
// end ;
16122: LD_VAR 0 2
16126: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
16127: LD_EXP 7
16131: PUSH
16132: LD_OWVAR 1
16136: PUSH
16137: LD_INT 48300
16139: GREATEREQUAL
16140: AND
16141: PUSH
16142: LD_EXP 10
16146: PPUSH
16147: CALL_OW 302
16151: AND
16152: IFFALSE 16502
16154: GO 16156
16156: DISABLE
// begin wait ( 2 2$00 ) ;
16157: LD_INT 4200
16159: PPUSH
16160: CALL_OW 67
// DialogueOn ;
16164: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16168: LD_EXP 25
16172: PPUSH
16173: LD_STRING D4-Pow-1
16175: PPUSH
16176: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16180: LD_EXP 10
16184: PPUSH
16185: LD_STRING D4-JMM-1
16187: PPUSH
16188: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16192: LD_EXP 25
16196: PPUSH
16197: LD_STRING D4-Pow-2
16199: PPUSH
16200: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16204: LD_EXP 10
16208: PPUSH
16209: LD_STRING D4-JMM-2
16211: PPUSH
16212: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16216: LD_EXP 25
16220: PPUSH
16221: LD_STRING D4-Pow-3
16223: PPUSH
16224: CALL_OW 94
// DialogueOff ;
16228: CALL_OW 7
// wait ( 1 1$00 ) ;
16232: LD_INT 2100
16234: PPUSH
16235: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 427
// wait ( 7 7$30 ) ;
16246: LD_INT 15750
16248: PPUSH
16249: CALL_OW 67
// DialogueOn ;
16253: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16257: LD_EXP 25
16261: PPUSH
16262: LD_STRING D4a-Pow-1
16264: PPUSH
16265: CALL_OW 94
// DialogueOff ;
16269: CALL_OW 7
// SikorskiCounter ;
16273: CALL 17822 0 0
// PrepareSikorsky ;
16277: CALL 6211 0 0
// CenterNowOnUnits ( Sikorski ) ;
16281: LD_EXP 23
16285: PPUSH
16286: CALL_OW 87
// DialogueOn ;
16290: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16294: LD_EXP 23
16298: PPUSH
16299: LD_STRING D5-Sik-1
16301: PPUSH
16302: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16306: LD_EXP 10
16310: PPUSH
16311: LD_STRING D5-JMM-1a
16313: PPUSH
16314: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16318: LD_EXP 23
16322: PPUSH
16323: LD_STRING D5-Sik-2
16325: PPUSH
16326: CALL_OW 88
// case Query ( QSikorski ) of 1 :
16330: LD_STRING QSikorski
16332: PPUSH
16333: CALL_OW 97
16337: PUSH
16338: LD_INT 1
16340: DOUBLE
16341: EQUAL
16342: IFTRUE 16346
16344: GO 16369
16346: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16347: LD_EXP 23
16351: PPUSH
16352: LD_STRING D5a-Sik-1
16354: PPUSH
16355: CALL_OW 88
// sikorskiWait := 1 1$00 ;
16359: LD_ADDR_EXP 4
16363: PUSH
16364: LD_INT 2100
16366: ST_TO_ADDR
// end ; 2 :
16367: GO 16456
16369: LD_INT 2
16371: DOUBLE
16372: EQUAL
16373: IFTRUE 16377
16375: GO 16400
16377: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16378: LD_EXP 23
16382: PPUSH
16383: LD_STRING D5b-Sik-1
16385: PPUSH
16386: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16390: LD_ADDR_EXP 4
16394: PUSH
16395: LD_INT 10500
16397: ST_TO_ADDR
// end ; 3 :
16398: GO 16456
16400: LD_INT 3
16402: DOUBLE
16403: EQUAL
16404: IFTRUE 16408
16406: GO 16455
16408: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16409: LD_EXP 23
16413: PPUSH
16414: LD_STRING D5c-Sik-1
16416: PPUSH
16417: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16421: LD_EXP 10
16425: PPUSH
16426: LD_STRING D5c-JMM-1
16428: PPUSH
16429: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16433: LD_EXP 23
16437: PPUSH
16438: LD_STRING D5c-Sik-2
16440: PPUSH
16441: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16445: LD_ADDR_EXP 4
16449: PUSH
16450: LD_INT 10500
16452: ST_TO_ADDR
// end ; end ;
16453: GO 16456
16455: POP
// DialogueOff ;
16456: CALL_OW 7
// SikorskiWaitCounter ;
16460: CALL 17885 0 0
// DialogueOn ;
16464: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16468: LD_EXP 23
16472: PPUSH
16473: LD_STRING D6-Sik-1
16475: PPUSH
16476: CALL_OW 88
// DialogueOff ;
16480: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
16484: LD_STRING M2
16486: PPUSH
16487: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
16491: LD_INT 1
16493: PPUSH
16494: CALL_OW 427
// SikorskiAttack ;
16498: CALL 7560 0 0
// end ;
16502: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
16503: LD_INT 11
16505: PPUSH
16506: LD_INT 22
16508: PUSH
16509: LD_INT 4
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PPUSH
16516: CALL_OW 70
16520: PUSH
16521: LD_INT 2
16523: GREATER
16524: IFFALSE 16735
16526: GO 16528
16528: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16529: LD_EXP 23
16533: PPUSH
16534: LD_STRING D7-Sik-1
16536: PPUSH
16537: CALL_OW 88
// wait ( 0 0$10 ) ;
16541: LD_INT 350
16543: PPUSH
16544: CALL_OW 67
// if InBattle ( 1 ) and ( IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) ) then
16548: LD_INT 1
16550: PPUSH
16551: CALL_OW 463
16555: PUSH
16556: LD_EXP 10
16560: PPUSH
16561: LD_INT 11
16563: PPUSH
16564: CALL_OW 308
16568: PUSH
16569: LD_EXP 10
16573: PPUSH
16574: CALL_OW 310
16578: PPUSH
16579: LD_INT 11
16581: PPUSH
16582: CALL_OW 308
16586: OR
16587: AND
16588: IFFALSE 16612
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16590: LD_EXP 23
16594: PPUSH
16595: LD_STRING D7a-Sik-1
16597: PPUSH
16598: CALL_OW 88
// sikorskiStatus := 1 ;
16602: LD_ADDR_EXP 8
16606: PUSH
16607: LD_INT 1
16609: ST_TO_ADDR
// end else
16610: GO 16632
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16612: LD_EXP 23
16616: PPUSH
16617: LD_STRING D7b-Sik-1
16619: PPUSH
16620: CALL_OW 88
// sikorskiStatus := 2 ;
16624: LD_ADDR_EXP 8
16628: PUSH
16629: LD_INT 2
16631: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
16632: LD_INT 1575
16634: PPUSH
16635: CALL_OW 67
// if InBattle ( 1 ) and ( IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) ) then
16639: LD_INT 1
16641: PPUSH
16642: CALL_OW 463
16646: PUSH
16647: LD_EXP 10
16651: PPUSH
16652: LD_INT 11
16654: PPUSH
16655: CALL_OW 308
16659: PUSH
16660: LD_EXP 10
16664: PPUSH
16665: CALL_OW 310
16669: PPUSH
16670: LD_INT 11
16672: PPUSH
16673: CALL_OW 308
16677: OR
16678: PUSH
16679: LD_EXP 10
16683: PPUSH
16684: CALL_OW 302
16688: NOT
16689: OR
16690: AND
16691: IFFALSE 16715
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16693: LD_EXP 23
16697: PPUSH
16698: LD_STRING D7a-Sik-1
16700: PPUSH
16701: CALL_OW 88
// sikorskiStatus := 1 ;
16705: LD_ADDR_EXP 8
16709: PUSH
16710: LD_INT 1
16712: ST_TO_ADDR
// end else
16713: GO 16735
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16715: LD_EXP 23
16719: PPUSH
16720: LD_STRING D7b-Sik-1
16722: PPUSH
16723: CALL_OW 88
// sikorskiStatus := 2 ;
16727: LD_ADDR_EXP 8
16731: PUSH
16732: LD_INT 2
16734: ST_TO_ADDR
// end ; end ;
16735: END
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
16736: LD_EXP 7
16740: PUSH
16741: LD_INT 28
16743: PPUSH
16744: CALL_OW 301
16748: AND
16749: PUSH
16750: LD_EXP 27
16754: PPUSH
16755: CALL_OW 301
16759: AND
16760: PUSH
16761: LD_INT 22
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 30
16773: PUSH
16774: LD_INT 5
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PPUSH
16785: CALL_OW 69
16789: PUSH
16790: LD_INT 0
16792: EQUAL
16793: AND
16794: IFFALSE 17819
16796: GO 16798
16798: DISABLE
16799: LD_INT 0
16801: PPUSH
16802: PPUSH
16803: PPUSH
// begin Video ( true ) ;
16804: LD_INT 1
16806: PPUSH
16807: CALL 73984 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
16811: LD_INT 104
16813: PPUSH
16814: LD_INT 108
16816: PPUSH
16817: LD_INT 1
16819: PPUSH
16820: LD_INT 36
16822: NEG
16823: PPUSH
16824: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
16828: LD_INT 104
16830: PPUSH
16831: LD_INT 108
16833: PPUSH
16834: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
16838: LD_ADDR_VAR 0 2
16842: PUSH
16843: LD_INT 22
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 21
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 3
16865: PUSH
16866: LD_INT 24
16868: PUSH
16869: LD_INT 249
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: LIST
16884: PPUSH
16885: CALL_OW 69
16889: ST_TO_ADDR
// if tmp then
16890: LD_VAR 0 2
16894: IFFALSE 16925
// for i in tmp do
16896: LD_ADDR_VAR 0 1
16900: PUSH
16901: LD_VAR 0 2
16905: PUSH
16906: FOR_IN
16907: IFFALSE 16923
// SetLives ( i , 249 ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 249
16916: PPUSH
16917: CALL_OW 234
16921: GO 16906
16923: POP
16924: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16925: LD_ADDR_VAR 0 1
16929: PUSH
16930: LD_INT 22
16932: PUSH
16933: LD_INT 3
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 21
16942: PUSH
16943: LD_INT 1
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PPUSH
16954: CALL_OW 69
16958: PUSH
16959: FOR_IN
16960: IFFALSE 17003
// begin ComExit ( i ) ;
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL 74400 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
16971: LD_VAR 0 1
16975: PPUSH
16976: LD_INT 131
16978: PPUSH
16979: LD_INT 127
16981: PPUSH
16982: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
16986: LD_VAR 0 1
16990: PPUSH
16991: LD_INT 141
16993: PPUSH
16994: LD_INT 147
16996: PPUSH
16997: CALL_OW 171
// end ;
17001: GO 16959
17003: POP
17004: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
17005: LD_INT 81
17007: PUSH
17008: LD_INT 3
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 3
17017: PUSH
17018: LD_INT 21
17020: PUSH
17021: LD_INT 3
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PPUSH
17036: CALL_OW 69
17040: PPUSH
17041: LD_INT 131
17043: PPUSH
17044: LD_INT 127
17046: PPUSH
17047: CALL_OW 174
// wait ( 0 0$08 ) ;
17051: LD_INT 280
17053: PPUSH
17054: CALL_OW 67
// DialogueOn ;
17058: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
17062: LD_EXP 8
17066: PUSH
17067: LD_INT 1
17069: EQUAL
17070: PUSH
17071: LD_EXP 23
17075: PPUSH
17076: CALL_OW 302
17080: AND
17081: IFFALSE 17095
// Say ( Sikorski , D9-Sik-1 ) ;
17083: LD_EXP 23
17087: PPUSH
17088: LD_STRING D9-Sik-1
17090: PPUSH
17091: CALL_OW 88
// if IsDead ( Sikorski ) then
17095: LD_EXP 23
17099: PPUSH
17100: CALL_OW 301
17104: IFFALSE 17125
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
17106: LD_EXP 25
17110: PPUSH
17111: LD_STRING D8b-Pow-1
17113: PPUSH
17114: CALL_OW 94
// YouLost ( Dismissed ) ;
17118: LD_STRING Dismissed
17120: PPUSH
17121: CALL_OW 104
// end ; if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
17125: LD_INT 22
17127: PUSH
17128: LD_INT 4
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PPUSH
17135: CALL_OW 69
17139: PUSH
17140: LD_INT 0
17142: EQUAL
17143: PUSH
17144: LD_EXP 3
17148: AND
17149: IFFALSE 17158
// SetAchievement ( ACH_BLITZKRIEG ) ;
17151: LD_STRING ACH_BLITZKRIEG
17153: PPUSH
17154: CALL_OW 543
// if tick <= 25 25$08 then
17158: LD_OWVAR 1
17162: PUSH
17163: LD_INT 52780
17165: LESSEQUAL
17166: IFFALSE 17182
// begin wait ( 3 ) ;
17168: LD_INT 3
17170: PPUSH
17171: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
17175: LD_STRING ACH_ASPEED_8
17177: PPUSH
17178: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
17182: LD_STRING med1
17184: PPUSH
17185: LD_INT 1
17187: PPUSH
17188: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
17192: LD_STRING med2
17194: PPUSH
17195: LD_INT 1
17197: PPUSH
17198: CALL_OW 101
// if sikorskiStatus = 1 then
17202: LD_EXP 8
17206: PUSH
17207: LD_INT 1
17209: EQUAL
17210: IFFALSE 17224
// AddMedal ( perfect , 1 ) else
17212: LD_STRING perfect
17214: PPUSH
17215: LD_INT 1
17217: PPUSH
17218: CALL_OW 101
17222: GO 17235
// AddMedal ( perfect , - 1 ) ;
17224: LD_STRING perfect
17226: PPUSH
17227: LD_INT 1
17229: NEG
17230: PPUSH
17231: CALL_OW 101
// if Difficulty >= 3 then
17235: LD_OWVAR 67
17239: PUSH
17240: LD_INT 3
17242: GREATEREQUAL
17243: IFFALSE 17255
// SetAchievementEX ( ACH_AMER , 8 ) ;
17245: LD_STRING ACH_AMER
17247: PPUSH
17248: LD_INT 8
17250: PPUSH
17251: CALL_OW 564
// GiveMedals ( Main ) ;
17255: LD_STRING Main
17257: PPUSH
17258: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
17262: LD_INT 22
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 23
17274: PUSH
17275: LD_INT 1
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 21
17284: PUSH
17285: LD_INT 1
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: LIST
17296: PPUSH
17297: CALL_OW 69
17301: PPUSH
17302: CALL_OW 43
// prefix := 08_ ;
17306: LD_ADDR_VAR 0 3
17310: PUSH
17311: LD_STRING 08_
17313: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
17314: LD_EXP 10
17318: PPUSH
17319: LD_VAR 0 3
17323: PUSH
17324: LD_STRING JMM
17326: STR
17327: PPUSH
17328: CALL_OW 38
// if IsLive ( Brown ) then
17332: LD_EXP 11
17336: PPUSH
17337: CALL_OW 300
17341: IFFALSE 17361
// SaveCharacters ( Brown , prefix & Brown ) ;
17343: LD_EXP 11
17347: PPUSH
17348: LD_VAR 0 3
17352: PUSH
17353: LD_STRING Brown
17355: STR
17356: PPUSH
17357: CALL_OW 38
// if IsLive ( Donaldson ) then
17361: LD_EXP 12
17365: PPUSH
17366: CALL_OW 300
17370: IFFALSE 17390
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
17372: LD_EXP 12
17376: PPUSH
17377: LD_VAR 0 3
17381: PUSH
17382: LD_STRING Donaldson
17384: STR
17385: PPUSH
17386: CALL_OW 38
// if IsLive ( Bobby ) then
17390: LD_EXP 13
17394: PPUSH
17395: CALL_OW 300
17399: IFFALSE 17419
// SaveCharacters ( Bobby , prefix & Bobby ) ;
17401: LD_EXP 13
17405: PPUSH
17406: LD_VAR 0 3
17410: PUSH
17411: LD_STRING Bobby
17413: STR
17414: PPUSH
17415: CALL_OW 38
// if IsLive ( Cyrus ) then
17419: LD_EXP 14
17423: PPUSH
17424: CALL_OW 300
17428: IFFALSE 17448
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
17430: LD_EXP 14
17434: PPUSH
17435: LD_VAR 0 3
17439: PUSH
17440: LD_STRING Cyrus
17442: STR
17443: PPUSH
17444: CALL_OW 38
// if IsLive ( Lisa ) then
17448: LD_EXP 15
17452: PPUSH
17453: CALL_OW 300
17457: IFFALSE 17477
// SaveCharacters ( Lisa , prefix & Lisa ) ;
17459: LD_EXP 15
17463: PPUSH
17464: LD_VAR 0 3
17468: PUSH
17469: LD_STRING Lisa
17471: STR
17472: PPUSH
17473: CALL_OW 38
// if IsLive ( Frank ) then
17477: LD_EXP 16
17481: PPUSH
17482: CALL_OW 300
17486: IFFALSE 17506
// SaveCharacters ( Frank , prefix & Frank ) ;
17488: LD_EXP 16
17492: PPUSH
17493: LD_VAR 0 3
17497: PUSH
17498: LD_STRING Frank
17500: STR
17501: PPUSH
17502: CALL_OW 38
// if IsLive ( Gladstone ) then
17506: LD_EXP 17
17510: PPUSH
17511: CALL_OW 300
17515: IFFALSE 17535
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
17517: LD_EXP 17
17521: PPUSH
17522: LD_VAR 0 3
17526: PUSH
17527: LD_STRING Gladstone
17529: STR
17530: PPUSH
17531: CALL_OW 38
// if IsLive ( Kikuchi ) then
17535: LD_EXP 18
17539: PPUSH
17540: CALL_OW 300
17544: IFFALSE 17564
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
17546: LD_EXP 18
17550: PPUSH
17551: LD_VAR 0 3
17555: PUSH
17556: LD_STRING Kikuchi
17558: STR
17559: PPUSH
17560: CALL_OW 38
// if IsLive ( Denis ) then
17564: LD_EXP 21
17568: PPUSH
17569: CALL_OW 300
17573: IFFALSE 17593
// SaveCharacters ( Denis , prefix & Denis ) ;
17575: LD_EXP 21
17579: PPUSH
17580: LD_VAR 0 3
17584: PUSH
17585: LD_STRING Denis
17587: STR
17588: PPUSH
17589: CALL_OW 38
// if IsLive ( Joan ) then
17593: LD_EXP 22
17597: PPUSH
17598: CALL_OW 300
17602: IFFALSE 17622
// SaveCharacters ( Joan , prefix & Joan ) ;
17604: LD_EXP 22
17608: PPUSH
17609: LD_VAR 0 3
17613: PUSH
17614: LD_STRING Joan
17616: STR
17617: PPUSH
17618: CALL_OW 38
// if IsLive ( Khatam ) then
17622: LD_EXP 19
17626: PPUSH
17627: CALL_OW 300
17631: IFFALSE 17651
// SaveCharacters ( Khatam , prefix & Khatam ) ;
17633: LD_EXP 19
17637: PPUSH
17638: LD_VAR 0 3
17642: PUSH
17643: LD_STRING Khatam
17645: STR
17646: PPUSH
17647: CALL_OW 38
// if IsLive ( Houten ) then
17651: LD_EXP 20
17655: PPUSH
17656: CALL_OW 300
17660: IFFALSE 17680
// SaveCharacters ( Houten , prefix & Houten ) ;
17662: LD_EXP 20
17666: PPUSH
17667: LD_VAR 0 3
17671: PUSH
17672: LD_STRING Houten
17674: STR
17675: PPUSH
17676: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
17680: LD_INT 22
17682: PUSH
17683: LD_INT 1
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 21
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 23
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: LIST
17714: PPUSH
17715: CALL_OW 69
17719: PUSH
17720: LD_EXP 10
17724: PUSH
17725: LD_EXP 11
17729: PUSH
17730: LD_EXP 12
17734: PUSH
17735: LD_EXP 13
17739: PUSH
17740: LD_EXP 14
17744: PUSH
17745: LD_EXP 15
17749: PUSH
17750: LD_EXP 16
17754: PUSH
17755: LD_EXP 17
17759: PUSH
17760: LD_EXP 18
17764: PUSH
17765: LD_EXP 21
17769: PUSH
17770: LD_EXP 22
17774: PUSH
17775: LD_EXP 20
17779: PUSH
17780: LD_EXP 19
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: DIFF
17800: PPUSH
17801: LD_STRING 08_other_survivors
17803: PPUSH
17804: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
17808: LD_INT 15
17810: PPUSH
17811: CALL 7034 0 1
// YouWin ;
17815: CALL_OW 103
// end ; end_of_file
17819: PPOPN 3
17821: END
// export function SikorskiCounter ; begin
17822: LD_INT 0
17824: PPUSH
// repeat wait ( 0 0$1 ) ;
17825: LD_INT 35
17827: PPUSH
17828: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
17832: LD_ADDR_OWVAR 47
17836: PUSH
17837: LD_STRING #Am08-2
17839: PUSH
17840: LD_EXP 3
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
17849: LD_ADDR_EXP 3
17853: PUSH
17854: LD_EXP 3
17858: PUSH
17859: LD_INT 35
17861: MINUS
17862: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
17863: LD_EXP 3
17867: PUSH
17868: LD_INT 0
17870: EQUAL
17871: IFFALSE 17825
// display_strings := [ ] ;
17873: LD_ADDR_OWVAR 47
17877: PUSH
17878: EMPTY
17879: ST_TO_ADDR
// end ;
17880: LD_VAR 0 1
17884: RET
// export function SikorskiWaitCounter ; begin
17885: LD_INT 0
17887: PPUSH
// repeat wait ( 0 0$1 ) ;
17888: LD_INT 35
17890: PPUSH
17891: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
17895: LD_ADDR_OWVAR 47
17899: PUSH
17900: LD_STRING #Am08-1
17902: PUSH
17903: LD_EXP 4
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
17912: LD_ADDR_EXP 4
17916: PUSH
17917: LD_EXP 4
17921: PUSH
17922: LD_INT 35
17924: MINUS
17925: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
17926: LD_EXP 4
17930: PUSH
17931: LD_INT 0
17933: EQUAL
17934: IFFALSE 17888
// display_strings := [ ] ;
17936: LD_ADDR_OWVAR 47
17940: PUSH
17941: EMPTY
17942: ST_TO_ADDR
// end ; end_of_file
17943: LD_VAR 0 1
17947: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
17948: LD_EXP 3
17952: IFFALSE 17992
17954: GO 17956
17956: DISABLE
// begin enable ;
17957: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
17958: LD_INT 14
17960: PPUSH
17961: CALL_OW 435
17965: PUSH
17966: LD_INT 10
17968: LESS
17969: IFFALSE 17992
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
17971: LD_INT 1
17973: PPUSH
17974: LD_INT 5
17976: PPUSH
17977: CALL_OW 12
17981: PPUSH
17982: LD_INT 14
17984: PPUSH
17985: LD_INT 1
17987: PPUSH
17988: CALL_OW 55
// end ;
17992: END
// every 0 0$55 trigger sikorskiArriveCounter do
17993: LD_EXP 3
17997: IFFALSE 18037
17999: GO 18001
18001: DISABLE
// begin enable ;
18002: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
18003: LD_INT 13
18005: PPUSH
18006: CALL_OW 435
18010: PUSH
18011: LD_INT 10
18013: LESS
18014: IFFALSE 18037
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
18016: LD_INT 1
18018: PPUSH
18019: LD_INT 5
18021: PPUSH
18022: CALL_OW 12
18026: PPUSH
18027: LD_INT 13
18029: PPUSH
18030: LD_INT 1
18032: PPUSH
18033: CALL_OW 55
// end ; end_of_file
18037: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
18038: LD_INT 0
18040: PPUSH
18041: PPUSH
// if not units then
18042: LD_VAR 0 1
18046: NOT
18047: IFFALSE 18051
// exit ;
18049: GO 18176
// result := false ;
18051: LD_ADDR_VAR 0 4
18055: PUSH
18056: LD_INT 0
18058: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
18059: LD_ADDR_VAR 0 5
18063: PUSH
18064: LD_VAR 0 1
18068: PPUSH
18069: LD_INT 26
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PPUSH
18079: CALL_OW 72
18083: ST_TO_ADDR
// if tmp then
18084: LD_VAR 0 5
18088: IFFALSE 18114
// result := Say ( tmp [ 1 ] , menDialog ) ;
18090: LD_ADDR_VAR 0 4
18094: PUSH
18095: LD_VAR 0 5
18099: PUSH
18100: LD_INT 1
18102: ARRAY
18103: PPUSH
18104: LD_VAR 0 2
18108: PPUSH
18109: CALL_OW 88
18113: ST_TO_ADDR
// if not result then
18114: LD_VAR 0 4
18118: NOT
18119: IFFALSE 18176
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
18121: LD_ADDR_VAR 0 5
18125: PUSH
18126: LD_VAR 0 1
18130: PPUSH
18131: LD_INT 26
18133: PUSH
18134: LD_INT 2
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PPUSH
18141: CALL_OW 72
18145: ST_TO_ADDR
// if tmp then
18146: LD_VAR 0 5
18150: IFFALSE 18176
// result := Say ( tmp [ 1 ] , womenDialog ) ;
18152: LD_ADDR_VAR 0 4
18156: PUSH
18157: LD_VAR 0 5
18161: PUSH
18162: LD_INT 1
18164: ARRAY
18165: PPUSH
18166: LD_VAR 0 3
18170: PPUSH
18171: CALL_OW 88
18175: ST_TO_ADDR
// end ; end ; end_of_file
18176: LD_VAR 0 4
18180: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18181: LD_INT 0
18183: PPUSH
// ar_miner := 81 ;
18184: LD_ADDR_EXP 39
18188: PUSH
18189: LD_INT 81
18191: ST_TO_ADDR
// ar_crane := 88 ;
18192: LD_ADDR_EXP 38
18196: PUSH
18197: LD_INT 88
18199: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18200: LD_ADDR_EXP 33
18204: PUSH
18205: LD_INT 89
18207: ST_TO_ADDR
// us_hack := 99 ;
18208: LD_ADDR_EXP 34
18212: PUSH
18213: LD_INT 99
18215: ST_TO_ADDR
// us_artillery := 97 ;
18216: LD_ADDR_EXP 35
18220: PUSH
18221: LD_INT 97
18223: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18224: LD_ADDR_EXP 36
18228: PUSH
18229: LD_INT 91
18231: ST_TO_ADDR
// ar_mortar := 92 ;
18232: LD_ADDR_EXP 37
18236: PUSH
18237: LD_INT 92
18239: ST_TO_ADDR
// ru_flamethrower := 93 ;
18240: LD_ADDR_EXP 40
18244: PUSH
18245: LD_INT 93
18247: ST_TO_ADDR
// ru_radar := 98 ;
18248: LD_ADDR_EXP 32
18252: PUSH
18253: LD_INT 98
18255: ST_TO_ADDR
// tech_Artillery := 80 ;
18256: LD_ADDR_EXP 41
18260: PUSH
18261: LD_INT 80
18263: ST_TO_ADDR
// tech_RadMat := 81 ;
18264: LD_ADDR_EXP 42
18268: PUSH
18269: LD_INT 81
18271: ST_TO_ADDR
// tech_BasicTools := 82 ;
18272: LD_ADDR_EXP 43
18276: PUSH
18277: LD_INT 82
18279: ST_TO_ADDR
// tech_Cargo := 83 ;
18280: LD_ADDR_EXP 44
18284: PUSH
18285: LD_INT 83
18287: ST_TO_ADDR
// tech_Track := 84 ;
18288: LD_ADDR_EXP 45
18292: PUSH
18293: LD_INT 84
18295: ST_TO_ADDR
// tech_Crane := 85 ;
18296: LD_ADDR_EXP 46
18300: PUSH
18301: LD_INT 85
18303: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18304: LD_ADDR_EXP 47
18308: PUSH
18309: LD_INT 86
18311: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18312: LD_ADDR_EXP 48
18316: PUSH
18317: LD_INT 87
18319: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18320: LD_ADDR_EXP 49
18324: PUSH
18325: LD_INT 88
18327: ST_TO_ADDR
// class_mastodont := 31 ;
18328: LD_ADDR_EXP 50
18332: PUSH
18333: LD_INT 31
18335: ST_TO_ADDR
// class_horse := 21 ;
18336: LD_ADDR_EXP 51
18340: PUSH
18341: LD_INT 21
18343: ST_TO_ADDR
// end ;
18344: LD_VAR 0 1
18348: RET
// every 1 do
18349: GO 18351
18351: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18352: CALL 18181 0 0
18356: END
// every 0 0$1 do
18357: GO 18359
18359: DISABLE
// begin enable ;
18360: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18361: LD_STRING updateTimer(
18363: PUSH
18364: LD_OWVAR 1
18368: STR
18369: PUSH
18370: LD_STRING );
18372: STR
18373: PPUSH
18374: CALL_OW 559
// end ;
18378: END
// export function SOS_MapStart ( ) ; begin
18379: LD_INT 0
18381: PPUSH
// if streamModeActive then
18382: LD_EXP 52
18386: IFFALSE 18395
// DefineStreamItems ( true ) ;
18388: LD_INT 1
18390: PPUSH
18391: CALL 20045 0 1
// UpdateFactoryWaypoints ( ) ;
18395: CALL 33629 0 0
// end ;
18399: LD_VAR 0 1
18403: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18404: LD_INT 0
18406: PPUSH
// if p2 = 100 then
18407: LD_VAR 0 2
18411: PUSH
18412: LD_INT 100
18414: EQUAL
18415: IFFALSE 19418
// begin if not StreamModeActive then
18417: LD_EXP 52
18421: NOT
18422: IFFALSE 18432
// StreamModeActive := true ;
18424: LD_ADDR_EXP 52
18428: PUSH
18429: LD_INT 1
18431: ST_TO_ADDR
// if p3 = 0 then
18432: LD_VAR 0 3
18436: PUSH
18437: LD_INT 0
18439: EQUAL
18440: IFFALSE 18446
// InitStreamMode ;
18442: CALL 19581 0 0
// if p3 = 1 then
18446: LD_VAR 0 3
18450: PUSH
18451: LD_INT 1
18453: EQUAL
18454: IFFALSE 18464
// sRocket := true ;
18456: LD_ADDR_EXP 57
18460: PUSH
18461: LD_INT 1
18463: ST_TO_ADDR
// if p3 = 2 then
18464: LD_VAR 0 3
18468: PUSH
18469: LD_INT 2
18471: EQUAL
18472: IFFALSE 18482
// sSpeed := true ;
18474: LD_ADDR_EXP 56
18478: PUSH
18479: LD_INT 1
18481: ST_TO_ADDR
// if p3 = 3 then
18482: LD_VAR 0 3
18486: PUSH
18487: LD_INT 3
18489: EQUAL
18490: IFFALSE 18500
// sEngine := true ;
18492: LD_ADDR_EXP 58
18496: PUSH
18497: LD_INT 1
18499: ST_TO_ADDR
// if p3 = 4 then
18500: LD_VAR 0 3
18504: PUSH
18505: LD_INT 4
18507: EQUAL
18508: IFFALSE 18518
// sSpec := true ;
18510: LD_ADDR_EXP 55
18514: PUSH
18515: LD_INT 1
18517: ST_TO_ADDR
// if p3 = 5 then
18518: LD_VAR 0 3
18522: PUSH
18523: LD_INT 5
18525: EQUAL
18526: IFFALSE 18536
// sLevel := true ;
18528: LD_ADDR_EXP 59
18532: PUSH
18533: LD_INT 1
18535: ST_TO_ADDR
// if p3 = 6 then
18536: LD_VAR 0 3
18540: PUSH
18541: LD_INT 6
18543: EQUAL
18544: IFFALSE 18554
// sArmoury := true ;
18546: LD_ADDR_EXP 60
18550: PUSH
18551: LD_INT 1
18553: ST_TO_ADDR
// if p3 = 7 then
18554: LD_VAR 0 3
18558: PUSH
18559: LD_INT 7
18561: EQUAL
18562: IFFALSE 18572
// sRadar := true ;
18564: LD_ADDR_EXP 61
18568: PUSH
18569: LD_INT 1
18571: ST_TO_ADDR
// if p3 = 8 then
18572: LD_VAR 0 3
18576: PUSH
18577: LD_INT 8
18579: EQUAL
18580: IFFALSE 18590
// sBunker := true ;
18582: LD_ADDR_EXP 62
18586: PUSH
18587: LD_INT 1
18589: ST_TO_ADDR
// if p3 = 9 then
18590: LD_VAR 0 3
18594: PUSH
18595: LD_INT 9
18597: EQUAL
18598: IFFALSE 18608
// sHack := true ;
18600: LD_ADDR_EXP 63
18604: PUSH
18605: LD_INT 1
18607: ST_TO_ADDR
// if p3 = 10 then
18608: LD_VAR 0 3
18612: PUSH
18613: LD_INT 10
18615: EQUAL
18616: IFFALSE 18626
// sFire := true ;
18618: LD_ADDR_EXP 64
18622: PUSH
18623: LD_INT 1
18625: ST_TO_ADDR
// if p3 = 11 then
18626: LD_VAR 0 3
18630: PUSH
18631: LD_INT 11
18633: EQUAL
18634: IFFALSE 18644
// sRefresh := true ;
18636: LD_ADDR_EXP 65
18640: PUSH
18641: LD_INT 1
18643: ST_TO_ADDR
// if p3 = 12 then
18644: LD_VAR 0 3
18648: PUSH
18649: LD_INT 12
18651: EQUAL
18652: IFFALSE 18662
// sExp := true ;
18654: LD_ADDR_EXP 66
18658: PUSH
18659: LD_INT 1
18661: ST_TO_ADDR
// if p3 = 13 then
18662: LD_VAR 0 3
18666: PUSH
18667: LD_INT 13
18669: EQUAL
18670: IFFALSE 18680
// sDepot := true ;
18672: LD_ADDR_EXP 67
18676: PUSH
18677: LD_INT 1
18679: ST_TO_ADDR
// if p3 = 14 then
18680: LD_VAR 0 3
18684: PUSH
18685: LD_INT 14
18687: EQUAL
18688: IFFALSE 18698
// sFlag := true ;
18690: LD_ADDR_EXP 68
18694: PUSH
18695: LD_INT 1
18697: ST_TO_ADDR
// if p3 = 15 then
18698: LD_VAR 0 3
18702: PUSH
18703: LD_INT 15
18705: EQUAL
18706: IFFALSE 18716
// sKamikadze := true ;
18708: LD_ADDR_EXP 76
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
// if p3 = 16 then
18716: LD_VAR 0 3
18720: PUSH
18721: LD_INT 16
18723: EQUAL
18724: IFFALSE 18734
// sTroll := true ;
18726: LD_ADDR_EXP 77
18730: PUSH
18731: LD_INT 1
18733: ST_TO_ADDR
// if p3 = 17 then
18734: LD_VAR 0 3
18738: PUSH
18739: LD_INT 17
18741: EQUAL
18742: IFFALSE 18752
// sSlow := true ;
18744: LD_ADDR_EXP 78
18748: PUSH
18749: LD_INT 1
18751: ST_TO_ADDR
// if p3 = 18 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 18
18759: EQUAL
18760: IFFALSE 18770
// sLack := true ;
18762: LD_ADDR_EXP 79
18766: PUSH
18767: LD_INT 1
18769: ST_TO_ADDR
// if p3 = 19 then
18770: LD_VAR 0 3
18774: PUSH
18775: LD_INT 19
18777: EQUAL
18778: IFFALSE 18788
// sTank := true ;
18780: LD_ADDR_EXP 81
18784: PUSH
18785: LD_INT 1
18787: ST_TO_ADDR
// if p3 = 20 then
18788: LD_VAR 0 3
18792: PUSH
18793: LD_INT 20
18795: EQUAL
18796: IFFALSE 18806
// sRemote := true ;
18798: LD_ADDR_EXP 82
18802: PUSH
18803: LD_INT 1
18805: ST_TO_ADDR
// if p3 = 21 then
18806: LD_VAR 0 3
18810: PUSH
18811: LD_INT 21
18813: EQUAL
18814: IFFALSE 18824
// sPowell := true ;
18816: LD_ADDR_EXP 83
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// if p3 = 22 then
18824: LD_VAR 0 3
18828: PUSH
18829: LD_INT 22
18831: EQUAL
18832: IFFALSE 18842
// sTeleport := true ;
18834: LD_ADDR_EXP 86
18838: PUSH
18839: LD_INT 1
18841: ST_TO_ADDR
// if p3 = 23 then
18842: LD_VAR 0 3
18846: PUSH
18847: LD_INT 23
18849: EQUAL
18850: IFFALSE 18860
// sOilTower := true ;
18852: LD_ADDR_EXP 88
18856: PUSH
18857: LD_INT 1
18859: ST_TO_ADDR
// if p3 = 24 then
18860: LD_VAR 0 3
18864: PUSH
18865: LD_INT 24
18867: EQUAL
18868: IFFALSE 18878
// sShovel := true ;
18870: LD_ADDR_EXP 89
18874: PUSH
18875: LD_INT 1
18877: ST_TO_ADDR
// if p3 = 25 then
18878: LD_VAR 0 3
18882: PUSH
18883: LD_INT 25
18885: EQUAL
18886: IFFALSE 18896
// sSheik := true ;
18888: LD_ADDR_EXP 90
18892: PUSH
18893: LD_INT 1
18895: ST_TO_ADDR
// if p3 = 26 then
18896: LD_VAR 0 3
18900: PUSH
18901: LD_INT 26
18903: EQUAL
18904: IFFALSE 18914
// sEarthquake := true ;
18906: LD_ADDR_EXP 92
18910: PUSH
18911: LD_INT 1
18913: ST_TO_ADDR
// if p3 = 27 then
18914: LD_VAR 0 3
18918: PUSH
18919: LD_INT 27
18921: EQUAL
18922: IFFALSE 18932
// sAI := true ;
18924: LD_ADDR_EXP 93
18928: PUSH
18929: LD_INT 1
18931: ST_TO_ADDR
// if p3 = 28 then
18932: LD_VAR 0 3
18936: PUSH
18937: LD_INT 28
18939: EQUAL
18940: IFFALSE 18950
// sCargo := true ;
18942: LD_ADDR_EXP 96
18946: PUSH
18947: LD_INT 1
18949: ST_TO_ADDR
// if p3 = 29 then
18950: LD_VAR 0 3
18954: PUSH
18955: LD_INT 29
18957: EQUAL
18958: IFFALSE 18968
// sDLaser := true ;
18960: LD_ADDR_EXP 97
18964: PUSH
18965: LD_INT 1
18967: ST_TO_ADDR
// if p3 = 30 then
18968: LD_VAR 0 3
18972: PUSH
18973: LD_INT 30
18975: EQUAL
18976: IFFALSE 18986
// sExchange := true ;
18978: LD_ADDR_EXP 98
18982: PUSH
18983: LD_INT 1
18985: ST_TO_ADDR
// if p3 = 31 then
18986: LD_VAR 0 3
18990: PUSH
18991: LD_INT 31
18993: EQUAL
18994: IFFALSE 19004
// sFac := true ;
18996: LD_ADDR_EXP 99
19000: PUSH
19001: LD_INT 1
19003: ST_TO_ADDR
// if p3 = 32 then
19004: LD_VAR 0 3
19008: PUSH
19009: LD_INT 32
19011: EQUAL
19012: IFFALSE 19022
// sPower := true ;
19014: LD_ADDR_EXP 100
19018: PUSH
19019: LD_INT 1
19021: ST_TO_ADDR
// if p3 = 33 then
19022: LD_VAR 0 3
19026: PUSH
19027: LD_INT 33
19029: EQUAL
19030: IFFALSE 19040
// sRandom := true ;
19032: LD_ADDR_EXP 101
19036: PUSH
19037: LD_INT 1
19039: ST_TO_ADDR
// if p3 = 34 then
19040: LD_VAR 0 3
19044: PUSH
19045: LD_INT 34
19047: EQUAL
19048: IFFALSE 19058
// sShield := true ;
19050: LD_ADDR_EXP 102
19054: PUSH
19055: LD_INT 1
19057: ST_TO_ADDR
// if p3 = 35 then
19058: LD_VAR 0 3
19062: PUSH
19063: LD_INT 35
19065: EQUAL
19066: IFFALSE 19076
// sTime := true ;
19068: LD_ADDR_EXP 103
19072: PUSH
19073: LD_INT 1
19075: ST_TO_ADDR
// if p3 = 36 then
19076: LD_VAR 0 3
19080: PUSH
19081: LD_INT 36
19083: EQUAL
19084: IFFALSE 19094
// sTools := true ;
19086: LD_ADDR_EXP 104
19090: PUSH
19091: LD_INT 1
19093: ST_TO_ADDR
// if p3 = 101 then
19094: LD_VAR 0 3
19098: PUSH
19099: LD_INT 101
19101: EQUAL
19102: IFFALSE 19112
// sSold := true ;
19104: LD_ADDR_EXP 69
19108: PUSH
19109: LD_INT 1
19111: ST_TO_ADDR
// if p3 = 102 then
19112: LD_VAR 0 3
19116: PUSH
19117: LD_INT 102
19119: EQUAL
19120: IFFALSE 19130
// sDiff := true ;
19122: LD_ADDR_EXP 70
19126: PUSH
19127: LD_INT 1
19129: ST_TO_ADDR
// if p3 = 103 then
19130: LD_VAR 0 3
19134: PUSH
19135: LD_INT 103
19137: EQUAL
19138: IFFALSE 19148
// sFog := true ;
19140: LD_ADDR_EXP 73
19144: PUSH
19145: LD_INT 1
19147: ST_TO_ADDR
// if p3 = 104 then
19148: LD_VAR 0 3
19152: PUSH
19153: LD_INT 104
19155: EQUAL
19156: IFFALSE 19166
// sReset := true ;
19158: LD_ADDR_EXP 74
19162: PUSH
19163: LD_INT 1
19165: ST_TO_ADDR
// if p3 = 105 then
19166: LD_VAR 0 3
19170: PUSH
19171: LD_INT 105
19173: EQUAL
19174: IFFALSE 19184
// sSun := true ;
19176: LD_ADDR_EXP 75
19180: PUSH
19181: LD_INT 1
19183: ST_TO_ADDR
// if p3 = 106 then
19184: LD_VAR 0 3
19188: PUSH
19189: LD_INT 106
19191: EQUAL
19192: IFFALSE 19202
// sTiger := true ;
19194: LD_ADDR_EXP 71
19198: PUSH
19199: LD_INT 1
19201: ST_TO_ADDR
// if p3 = 107 then
19202: LD_VAR 0 3
19206: PUSH
19207: LD_INT 107
19209: EQUAL
19210: IFFALSE 19220
// sBomb := true ;
19212: LD_ADDR_EXP 72
19216: PUSH
19217: LD_INT 1
19219: ST_TO_ADDR
// if p3 = 108 then
19220: LD_VAR 0 3
19224: PUSH
19225: LD_INT 108
19227: EQUAL
19228: IFFALSE 19238
// sWound := true ;
19230: LD_ADDR_EXP 80
19234: PUSH
19235: LD_INT 1
19237: ST_TO_ADDR
// if p3 = 109 then
19238: LD_VAR 0 3
19242: PUSH
19243: LD_INT 109
19245: EQUAL
19246: IFFALSE 19256
// sBetray := true ;
19248: LD_ADDR_EXP 84
19252: PUSH
19253: LD_INT 1
19255: ST_TO_ADDR
// if p3 = 110 then
19256: LD_VAR 0 3
19260: PUSH
19261: LD_INT 110
19263: EQUAL
19264: IFFALSE 19274
// sContamin := true ;
19266: LD_ADDR_EXP 85
19270: PUSH
19271: LD_INT 1
19273: ST_TO_ADDR
// if p3 = 111 then
19274: LD_VAR 0 3
19278: PUSH
19279: LD_INT 111
19281: EQUAL
19282: IFFALSE 19292
// sOil := true ;
19284: LD_ADDR_EXP 87
19288: PUSH
19289: LD_INT 1
19291: ST_TO_ADDR
// if p3 = 112 then
19292: LD_VAR 0 3
19296: PUSH
19297: LD_INT 112
19299: EQUAL
19300: IFFALSE 19310
// sStu := true ;
19302: LD_ADDR_EXP 91
19306: PUSH
19307: LD_INT 1
19309: ST_TO_ADDR
// if p3 = 113 then
19310: LD_VAR 0 3
19314: PUSH
19315: LD_INT 113
19317: EQUAL
19318: IFFALSE 19328
// sBazooka := true ;
19320: LD_ADDR_EXP 94
19324: PUSH
19325: LD_INT 1
19327: ST_TO_ADDR
// if p3 = 114 then
19328: LD_VAR 0 3
19332: PUSH
19333: LD_INT 114
19335: EQUAL
19336: IFFALSE 19346
// sMortar := true ;
19338: LD_ADDR_EXP 95
19342: PUSH
19343: LD_INT 1
19345: ST_TO_ADDR
// if p3 = 115 then
19346: LD_VAR 0 3
19350: PUSH
19351: LD_INT 115
19353: EQUAL
19354: IFFALSE 19364
// sRanger := true ;
19356: LD_ADDR_EXP 105
19360: PUSH
19361: LD_INT 1
19363: ST_TO_ADDR
// if p3 = 116 then
19364: LD_VAR 0 3
19368: PUSH
19369: LD_INT 116
19371: EQUAL
19372: IFFALSE 19382
// sComputer := true ;
19374: LD_ADDR_EXP 106
19378: PUSH
19379: LD_INT 1
19381: ST_TO_ADDR
// if p3 = 117 then
19382: LD_VAR 0 3
19386: PUSH
19387: LD_INT 117
19389: EQUAL
19390: IFFALSE 19400
// s30 := true ;
19392: LD_ADDR_EXP 107
19396: PUSH
19397: LD_INT 1
19399: ST_TO_ADDR
// if p3 = 118 then
19400: LD_VAR 0 3
19404: PUSH
19405: LD_INT 118
19407: EQUAL
19408: IFFALSE 19418
// s60 := true ;
19410: LD_ADDR_EXP 108
19414: PUSH
19415: LD_INT 1
19417: ST_TO_ADDR
// end ; if p2 = 101 then
19418: LD_VAR 0 2
19422: PUSH
19423: LD_INT 101
19425: EQUAL
19426: IFFALSE 19554
// begin case p3 of 1 :
19428: LD_VAR 0 3
19432: PUSH
19433: LD_INT 1
19435: DOUBLE
19436: EQUAL
19437: IFTRUE 19441
19439: GO 19448
19441: POP
// hHackUnlimitedResources ; 2 :
19442: CALL 31652 0 0
19446: GO 19554
19448: LD_INT 2
19450: DOUBLE
19451: EQUAL
19452: IFTRUE 19456
19454: GO 19463
19456: POP
// hHackSetLevel10 ; 3 :
19457: CALL 31785 0 0
19461: GO 19554
19463: LD_INT 3
19465: DOUBLE
19466: EQUAL
19467: IFTRUE 19471
19469: GO 19478
19471: POP
// hHackSetLevel10YourUnits ; 4 :
19472: CALL 31870 0 0
19476: GO 19554
19478: LD_INT 4
19480: DOUBLE
19481: EQUAL
19482: IFTRUE 19486
19484: GO 19493
19486: POP
// hHackInvincible ; 5 :
19487: CALL 32318 0 0
19491: GO 19554
19493: LD_INT 5
19495: DOUBLE
19496: EQUAL
19497: IFTRUE 19501
19499: GO 19508
19501: POP
// hHackInvisible ; 6 :
19502: CALL 32429 0 0
19506: GO 19554
19508: LD_INT 6
19510: DOUBLE
19511: EQUAL
19512: IFTRUE 19516
19514: GO 19523
19516: POP
// hHackChangeYourSide ; 7 :
19517: CALL 32486 0 0
19521: GO 19554
19523: LD_INT 7
19525: DOUBLE
19526: EQUAL
19527: IFTRUE 19531
19529: GO 19538
19531: POP
// hHackChangeUnitSide ; 8 :
19532: CALL 32528 0 0
19536: GO 19554
19538: LD_INT 8
19540: DOUBLE
19541: EQUAL
19542: IFTRUE 19546
19544: GO 19553
19546: POP
// hHackFog ; end ;
19547: CALL 32629 0 0
19551: GO 19554
19553: POP
// end ; end ;
19554: LD_VAR 0 7
19558: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19559: GO 19561
19561: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19562: LD_STRING initStreamRollete();
19564: PPUSH
19565: CALL_OW 559
// InitStreamMode ;
19569: CALL 19581 0 0
// DefineStreamItems ( false ) ;
19573: LD_INT 0
19575: PPUSH
19576: CALL 20045 0 1
// end ;
19580: END
// function InitStreamMode ; begin
19581: LD_INT 0
19583: PPUSH
// streamModeActive := false ;
19584: LD_ADDR_EXP 52
19588: PUSH
19589: LD_INT 0
19591: ST_TO_ADDR
// normalCounter := 36 ;
19592: LD_ADDR_EXP 53
19596: PUSH
19597: LD_INT 36
19599: ST_TO_ADDR
// hardcoreCounter := 18 ;
19600: LD_ADDR_EXP 54
19604: PUSH
19605: LD_INT 18
19607: ST_TO_ADDR
// sRocket := false ;
19608: LD_ADDR_EXP 57
19612: PUSH
19613: LD_INT 0
19615: ST_TO_ADDR
// sSpeed := false ;
19616: LD_ADDR_EXP 56
19620: PUSH
19621: LD_INT 0
19623: ST_TO_ADDR
// sEngine := false ;
19624: LD_ADDR_EXP 58
19628: PUSH
19629: LD_INT 0
19631: ST_TO_ADDR
// sSpec := false ;
19632: LD_ADDR_EXP 55
19636: PUSH
19637: LD_INT 0
19639: ST_TO_ADDR
// sLevel := false ;
19640: LD_ADDR_EXP 59
19644: PUSH
19645: LD_INT 0
19647: ST_TO_ADDR
// sArmoury := false ;
19648: LD_ADDR_EXP 60
19652: PUSH
19653: LD_INT 0
19655: ST_TO_ADDR
// sRadar := false ;
19656: LD_ADDR_EXP 61
19660: PUSH
19661: LD_INT 0
19663: ST_TO_ADDR
// sBunker := false ;
19664: LD_ADDR_EXP 62
19668: PUSH
19669: LD_INT 0
19671: ST_TO_ADDR
// sHack := false ;
19672: LD_ADDR_EXP 63
19676: PUSH
19677: LD_INT 0
19679: ST_TO_ADDR
// sFire := false ;
19680: LD_ADDR_EXP 64
19684: PUSH
19685: LD_INT 0
19687: ST_TO_ADDR
// sRefresh := false ;
19688: LD_ADDR_EXP 65
19692: PUSH
19693: LD_INT 0
19695: ST_TO_ADDR
// sExp := false ;
19696: LD_ADDR_EXP 66
19700: PUSH
19701: LD_INT 0
19703: ST_TO_ADDR
// sDepot := false ;
19704: LD_ADDR_EXP 67
19708: PUSH
19709: LD_INT 0
19711: ST_TO_ADDR
// sFlag := false ;
19712: LD_ADDR_EXP 68
19716: PUSH
19717: LD_INT 0
19719: ST_TO_ADDR
// sKamikadze := false ;
19720: LD_ADDR_EXP 76
19724: PUSH
19725: LD_INT 0
19727: ST_TO_ADDR
// sTroll := false ;
19728: LD_ADDR_EXP 77
19732: PUSH
19733: LD_INT 0
19735: ST_TO_ADDR
// sSlow := false ;
19736: LD_ADDR_EXP 78
19740: PUSH
19741: LD_INT 0
19743: ST_TO_ADDR
// sLack := false ;
19744: LD_ADDR_EXP 79
19748: PUSH
19749: LD_INT 0
19751: ST_TO_ADDR
// sTank := false ;
19752: LD_ADDR_EXP 81
19756: PUSH
19757: LD_INT 0
19759: ST_TO_ADDR
// sRemote := false ;
19760: LD_ADDR_EXP 82
19764: PUSH
19765: LD_INT 0
19767: ST_TO_ADDR
// sPowell := false ;
19768: LD_ADDR_EXP 83
19772: PUSH
19773: LD_INT 0
19775: ST_TO_ADDR
// sTeleport := false ;
19776: LD_ADDR_EXP 86
19780: PUSH
19781: LD_INT 0
19783: ST_TO_ADDR
// sOilTower := false ;
19784: LD_ADDR_EXP 88
19788: PUSH
19789: LD_INT 0
19791: ST_TO_ADDR
// sShovel := false ;
19792: LD_ADDR_EXP 89
19796: PUSH
19797: LD_INT 0
19799: ST_TO_ADDR
// sSheik := false ;
19800: LD_ADDR_EXP 90
19804: PUSH
19805: LD_INT 0
19807: ST_TO_ADDR
// sEarthquake := false ;
19808: LD_ADDR_EXP 92
19812: PUSH
19813: LD_INT 0
19815: ST_TO_ADDR
// sAI := false ;
19816: LD_ADDR_EXP 93
19820: PUSH
19821: LD_INT 0
19823: ST_TO_ADDR
// sCargo := false ;
19824: LD_ADDR_EXP 96
19828: PUSH
19829: LD_INT 0
19831: ST_TO_ADDR
// sDLaser := false ;
19832: LD_ADDR_EXP 97
19836: PUSH
19837: LD_INT 0
19839: ST_TO_ADDR
// sExchange := false ;
19840: LD_ADDR_EXP 98
19844: PUSH
19845: LD_INT 0
19847: ST_TO_ADDR
// sFac := false ;
19848: LD_ADDR_EXP 99
19852: PUSH
19853: LD_INT 0
19855: ST_TO_ADDR
// sPower := false ;
19856: LD_ADDR_EXP 100
19860: PUSH
19861: LD_INT 0
19863: ST_TO_ADDR
// sRandom := false ;
19864: LD_ADDR_EXP 101
19868: PUSH
19869: LD_INT 0
19871: ST_TO_ADDR
// sShield := false ;
19872: LD_ADDR_EXP 102
19876: PUSH
19877: LD_INT 0
19879: ST_TO_ADDR
// sTime := false ;
19880: LD_ADDR_EXP 103
19884: PUSH
19885: LD_INT 0
19887: ST_TO_ADDR
// sTools := false ;
19888: LD_ADDR_EXP 104
19892: PUSH
19893: LD_INT 0
19895: ST_TO_ADDR
// sSold := false ;
19896: LD_ADDR_EXP 69
19900: PUSH
19901: LD_INT 0
19903: ST_TO_ADDR
// sDiff := false ;
19904: LD_ADDR_EXP 70
19908: PUSH
19909: LD_INT 0
19911: ST_TO_ADDR
// sFog := false ;
19912: LD_ADDR_EXP 73
19916: PUSH
19917: LD_INT 0
19919: ST_TO_ADDR
// sReset := false ;
19920: LD_ADDR_EXP 74
19924: PUSH
19925: LD_INT 0
19927: ST_TO_ADDR
// sSun := false ;
19928: LD_ADDR_EXP 75
19932: PUSH
19933: LD_INT 0
19935: ST_TO_ADDR
// sTiger := false ;
19936: LD_ADDR_EXP 71
19940: PUSH
19941: LD_INT 0
19943: ST_TO_ADDR
// sBomb := false ;
19944: LD_ADDR_EXP 72
19948: PUSH
19949: LD_INT 0
19951: ST_TO_ADDR
// sWound := false ;
19952: LD_ADDR_EXP 80
19956: PUSH
19957: LD_INT 0
19959: ST_TO_ADDR
// sBetray := false ;
19960: LD_ADDR_EXP 84
19964: PUSH
19965: LD_INT 0
19967: ST_TO_ADDR
// sContamin := false ;
19968: LD_ADDR_EXP 85
19972: PUSH
19973: LD_INT 0
19975: ST_TO_ADDR
// sOil := false ;
19976: LD_ADDR_EXP 87
19980: PUSH
19981: LD_INT 0
19983: ST_TO_ADDR
// sStu := false ;
19984: LD_ADDR_EXP 91
19988: PUSH
19989: LD_INT 0
19991: ST_TO_ADDR
// sBazooka := false ;
19992: LD_ADDR_EXP 94
19996: PUSH
19997: LD_INT 0
19999: ST_TO_ADDR
// sMortar := false ;
20000: LD_ADDR_EXP 95
20004: PUSH
20005: LD_INT 0
20007: ST_TO_ADDR
// sRanger := false ;
20008: LD_ADDR_EXP 105
20012: PUSH
20013: LD_INT 0
20015: ST_TO_ADDR
// sComputer := false ;
20016: LD_ADDR_EXP 106
20020: PUSH
20021: LD_INT 0
20023: ST_TO_ADDR
// s30 := false ;
20024: LD_ADDR_EXP 107
20028: PUSH
20029: LD_INT 0
20031: ST_TO_ADDR
// s60 := false ;
20032: LD_ADDR_EXP 108
20036: PUSH
20037: LD_INT 0
20039: ST_TO_ADDR
// end ;
20040: LD_VAR 0 1
20044: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20045: LD_INT 0
20047: PPUSH
20048: PPUSH
20049: PPUSH
20050: PPUSH
20051: PPUSH
20052: PPUSH
20053: PPUSH
// result := [ ] ;
20054: LD_ADDR_VAR 0 2
20058: PUSH
20059: EMPTY
20060: ST_TO_ADDR
// if campaign_id = 1 then
20061: LD_OWVAR 69
20065: PUSH
20066: LD_INT 1
20068: EQUAL
20069: IFFALSE 23235
// begin case mission_number of 1 :
20071: LD_OWVAR 70
20075: PUSH
20076: LD_INT 1
20078: DOUBLE
20079: EQUAL
20080: IFTRUE 20084
20082: GO 20160
20084: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20085: LD_ADDR_VAR 0 2
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: LD_INT 4
20095: PUSH
20096: LD_INT 11
20098: PUSH
20099: LD_INT 12
20101: PUSH
20102: LD_INT 15
20104: PUSH
20105: LD_INT 16
20107: PUSH
20108: LD_INT 22
20110: PUSH
20111: LD_INT 23
20113: PUSH
20114: LD_INT 26
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 101
20130: PUSH
20131: LD_INT 102
20133: PUSH
20134: LD_INT 106
20136: PUSH
20137: LD_INT 116
20139: PUSH
20140: LD_INT 117
20142: PUSH
20143: LD_INT 118
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: ST_TO_ADDR
20158: GO 23233
20160: LD_INT 2
20162: DOUBLE
20163: EQUAL
20164: IFTRUE 20168
20166: GO 20252
20168: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20169: LD_ADDR_VAR 0 2
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 4
20179: PUSH
20180: LD_INT 11
20182: PUSH
20183: LD_INT 12
20185: PUSH
20186: LD_INT 15
20188: PUSH
20189: LD_INT 16
20191: PUSH
20192: LD_INT 22
20194: PUSH
20195: LD_INT 23
20197: PUSH
20198: LD_INT 26
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 101
20214: PUSH
20215: LD_INT 102
20217: PUSH
20218: LD_INT 105
20220: PUSH
20221: LD_INT 106
20223: PUSH
20224: LD_INT 108
20226: PUSH
20227: LD_INT 116
20229: PUSH
20230: LD_INT 117
20232: PUSH
20233: LD_INT 118
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: ST_TO_ADDR
20250: GO 23233
20252: LD_INT 3
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20348
20260: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20261: LD_ADDR_VAR 0 2
20265: PUSH
20266: LD_INT 2
20268: PUSH
20269: LD_INT 4
20271: PUSH
20272: LD_INT 5
20274: PUSH
20275: LD_INT 11
20277: PUSH
20278: LD_INT 12
20280: PUSH
20281: LD_INT 15
20283: PUSH
20284: LD_INT 16
20286: PUSH
20287: LD_INT 22
20289: PUSH
20290: LD_INT 26
20292: PUSH
20293: LD_INT 36
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 101
20310: PUSH
20311: LD_INT 102
20313: PUSH
20314: LD_INT 105
20316: PUSH
20317: LD_INT 106
20319: PUSH
20320: LD_INT 108
20322: PUSH
20323: LD_INT 116
20325: PUSH
20326: LD_INT 117
20328: PUSH
20329: LD_INT 118
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: ST_TO_ADDR
20346: GO 23233
20348: LD_INT 4
20350: DOUBLE
20351: EQUAL
20352: IFTRUE 20356
20354: GO 20452
20356: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20357: LD_ADDR_VAR 0 2
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 4
20367: PUSH
20368: LD_INT 5
20370: PUSH
20371: LD_INT 8
20373: PUSH
20374: LD_INT 11
20376: PUSH
20377: LD_INT 12
20379: PUSH
20380: LD_INT 15
20382: PUSH
20383: LD_INT 16
20385: PUSH
20386: LD_INT 22
20388: PUSH
20389: LD_INT 23
20391: PUSH
20392: LD_INT 26
20394: PUSH
20395: LD_INT 36
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 101
20414: PUSH
20415: LD_INT 102
20417: PUSH
20418: LD_INT 105
20420: PUSH
20421: LD_INT 106
20423: PUSH
20424: LD_INT 108
20426: PUSH
20427: LD_INT 116
20429: PUSH
20430: LD_INT 117
20432: PUSH
20433: LD_INT 118
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: ST_TO_ADDR
20450: GO 23233
20452: LD_INT 5
20454: DOUBLE
20455: EQUAL
20456: IFTRUE 20460
20458: GO 20572
20460: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20461: LD_ADDR_VAR 0 2
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: LD_INT 4
20471: PUSH
20472: LD_INT 5
20474: PUSH
20475: LD_INT 6
20477: PUSH
20478: LD_INT 8
20480: PUSH
20481: LD_INT 11
20483: PUSH
20484: LD_INT 12
20486: PUSH
20487: LD_INT 15
20489: PUSH
20490: LD_INT 16
20492: PUSH
20493: LD_INT 22
20495: PUSH
20496: LD_INT 23
20498: PUSH
20499: LD_INT 25
20501: PUSH
20502: LD_INT 26
20504: PUSH
20505: LD_INT 36
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 101
20526: PUSH
20527: LD_INT 102
20529: PUSH
20530: LD_INT 105
20532: PUSH
20533: LD_INT 106
20535: PUSH
20536: LD_INT 108
20538: PUSH
20539: LD_INT 109
20541: PUSH
20542: LD_INT 112
20544: PUSH
20545: LD_INT 116
20547: PUSH
20548: LD_INT 117
20550: PUSH
20551: LD_INT 118
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: ST_TO_ADDR
20570: GO 23233
20572: LD_INT 6
20574: DOUBLE
20575: EQUAL
20576: IFTRUE 20580
20578: GO 20712
20580: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20581: LD_ADDR_VAR 0 2
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: LD_INT 4
20591: PUSH
20592: LD_INT 5
20594: PUSH
20595: LD_INT 6
20597: PUSH
20598: LD_INT 8
20600: PUSH
20601: LD_INT 11
20603: PUSH
20604: LD_INT 12
20606: PUSH
20607: LD_INT 15
20609: PUSH
20610: LD_INT 16
20612: PUSH
20613: LD_INT 20
20615: PUSH
20616: LD_INT 21
20618: PUSH
20619: LD_INT 22
20621: PUSH
20622: LD_INT 23
20624: PUSH
20625: LD_INT 25
20627: PUSH
20628: LD_INT 26
20630: PUSH
20631: LD_INT 30
20633: PUSH
20634: LD_INT 31
20636: PUSH
20637: LD_INT 32
20639: PUSH
20640: LD_INT 36
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 101
20666: PUSH
20667: LD_INT 102
20669: PUSH
20670: LD_INT 105
20672: PUSH
20673: LD_INT 106
20675: PUSH
20676: LD_INT 108
20678: PUSH
20679: LD_INT 109
20681: PUSH
20682: LD_INT 112
20684: PUSH
20685: LD_INT 116
20687: PUSH
20688: LD_INT 117
20690: PUSH
20691: LD_INT 118
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: ST_TO_ADDR
20710: GO 23233
20712: LD_INT 7
20714: DOUBLE
20715: EQUAL
20716: IFTRUE 20720
20718: GO 20832
20720: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20721: LD_ADDR_VAR 0 2
20725: PUSH
20726: LD_INT 2
20728: PUSH
20729: LD_INT 4
20731: PUSH
20732: LD_INT 5
20734: PUSH
20735: LD_INT 7
20737: PUSH
20738: LD_INT 11
20740: PUSH
20741: LD_INT 12
20743: PUSH
20744: LD_INT 15
20746: PUSH
20747: LD_INT 16
20749: PUSH
20750: LD_INT 20
20752: PUSH
20753: LD_INT 21
20755: PUSH
20756: LD_INT 22
20758: PUSH
20759: LD_INT 23
20761: PUSH
20762: LD_INT 25
20764: PUSH
20765: LD_INT 26
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 101
20786: PUSH
20787: LD_INT 102
20789: PUSH
20790: LD_INT 103
20792: PUSH
20793: LD_INT 105
20795: PUSH
20796: LD_INT 106
20798: PUSH
20799: LD_INT 108
20801: PUSH
20802: LD_INT 112
20804: PUSH
20805: LD_INT 116
20807: PUSH
20808: LD_INT 117
20810: PUSH
20811: LD_INT 118
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: ST_TO_ADDR
20830: GO 23233
20832: LD_INT 8
20834: DOUBLE
20835: EQUAL
20836: IFTRUE 20840
20838: GO 20980
20840: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20841: LD_ADDR_VAR 0 2
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: LD_INT 4
20851: PUSH
20852: LD_INT 5
20854: PUSH
20855: LD_INT 6
20857: PUSH
20858: LD_INT 7
20860: PUSH
20861: LD_INT 8
20863: PUSH
20864: LD_INT 11
20866: PUSH
20867: LD_INT 12
20869: PUSH
20870: LD_INT 15
20872: PUSH
20873: LD_INT 16
20875: PUSH
20876: LD_INT 20
20878: PUSH
20879: LD_INT 21
20881: PUSH
20882: LD_INT 22
20884: PUSH
20885: LD_INT 23
20887: PUSH
20888: LD_INT 25
20890: PUSH
20891: LD_INT 26
20893: PUSH
20894: LD_INT 30
20896: PUSH
20897: LD_INT 31
20899: PUSH
20900: LD_INT 32
20902: PUSH
20903: LD_INT 36
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 101
20930: PUSH
20931: LD_INT 102
20933: PUSH
20934: LD_INT 103
20936: PUSH
20937: LD_INT 105
20939: PUSH
20940: LD_INT 106
20942: PUSH
20943: LD_INT 108
20945: PUSH
20946: LD_INT 109
20948: PUSH
20949: LD_INT 112
20951: PUSH
20952: LD_INT 116
20954: PUSH
20955: LD_INT 117
20957: PUSH
20958: LD_INT 118
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: ST_TO_ADDR
20978: GO 23233
20980: LD_INT 9
20982: DOUBLE
20983: EQUAL
20984: IFTRUE 20988
20986: GO 21136
20988: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20989: LD_ADDR_VAR 0 2
20993: PUSH
20994: LD_INT 2
20996: PUSH
20997: LD_INT 4
20999: PUSH
21000: LD_INT 5
21002: PUSH
21003: LD_INT 6
21005: PUSH
21006: LD_INT 7
21008: PUSH
21009: LD_INT 8
21011: PUSH
21012: LD_INT 11
21014: PUSH
21015: LD_INT 12
21017: PUSH
21018: LD_INT 15
21020: PUSH
21021: LD_INT 16
21023: PUSH
21024: LD_INT 20
21026: PUSH
21027: LD_INT 21
21029: PUSH
21030: LD_INT 22
21032: PUSH
21033: LD_INT 23
21035: PUSH
21036: LD_INT 25
21038: PUSH
21039: LD_INT 26
21041: PUSH
21042: LD_INT 28
21044: PUSH
21045: LD_INT 30
21047: PUSH
21048: LD_INT 31
21050: PUSH
21051: LD_INT 32
21053: PUSH
21054: LD_INT 36
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 101
21082: PUSH
21083: LD_INT 102
21085: PUSH
21086: LD_INT 103
21088: PUSH
21089: LD_INT 105
21091: PUSH
21092: LD_INT 106
21094: PUSH
21095: LD_INT 108
21097: PUSH
21098: LD_INT 109
21100: PUSH
21101: LD_INT 112
21103: PUSH
21104: LD_INT 114
21106: PUSH
21107: LD_INT 116
21109: PUSH
21110: LD_INT 117
21112: PUSH
21113: LD_INT 118
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: ST_TO_ADDR
21134: GO 23233
21136: LD_INT 10
21138: DOUBLE
21139: EQUAL
21140: IFTRUE 21144
21142: GO 21340
21144: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21145: LD_ADDR_VAR 0 2
21149: PUSH
21150: LD_INT 2
21152: PUSH
21153: LD_INT 4
21155: PUSH
21156: LD_INT 5
21158: PUSH
21159: LD_INT 6
21161: PUSH
21162: LD_INT 7
21164: PUSH
21165: LD_INT 8
21167: PUSH
21168: LD_INT 9
21170: PUSH
21171: LD_INT 10
21173: PUSH
21174: LD_INT 11
21176: PUSH
21177: LD_INT 12
21179: PUSH
21180: LD_INT 13
21182: PUSH
21183: LD_INT 14
21185: PUSH
21186: LD_INT 15
21188: PUSH
21189: LD_INT 16
21191: PUSH
21192: LD_INT 17
21194: PUSH
21195: LD_INT 18
21197: PUSH
21198: LD_INT 19
21200: PUSH
21201: LD_INT 20
21203: PUSH
21204: LD_INT 21
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_INT 23
21212: PUSH
21213: LD_INT 24
21215: PUSH
21216: LD_INT 25
21218: PUSH
21219: LD_INT 26
21221: PUSH
21222: LD_INT 28
21224: PUSH
21225: LD_INT 30
21227: PUSH
21228: LD_INT 31
21230: PUSH
21231: LD_INT 32
21233: PUSH
21234: LD_INT 36
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 101
21270: PUSH
21271: LD_INT 102
21273: PUSH
21274: LD_INT 103
21276: PUSH
21277: LD_INT 104
21279: PUSH
21280: LD_INT 105
21282: PUSH
21283: LD_INT 106
21285: PUSH
21286: LD_INT 107
21288: PUSH
21289: LD_INT 108
21291: PUSH
21292: LD_INT 109
21294: PUSH
21295: LD_INT 110
21297: PUSH
21298: LD_INT 111
21300: PUSH
21301: LD_INT 112
21303: PUSH
21304: LD_INT 114
21306: PUSH
21307: LD_INT 116
21309: PUSH
21310: LD_INT 117
21312: PUSH
21313: LD_INT 118
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: ST_TO_ADDR
21338: GO 23233
21340: LD_INT 11
21342: DOUBLE
21343: EQUAL
21344: IFTRUE 21348
21346: GO 21552
21348: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21349: LD_ADDR_VAR 0 2
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: LD_INT 3
21359: PUSH
21360: LD_INT 4
21362: PUSH
21363: LD_INT 5
21365: PUSH
21366: LD_INT 6
21368: PUSH
21369: LD_INT 7
21371: PUSH
21372: LD_INT 8
21374: PUSH
21375: LD_INT 9
21377: PUSH
21378: LD_INT 10
21380: PUSH
21381: LD_INT 11
21383: PUSH
21384: LD_INT 12
21386: PUSH
21387: LD_INT 13
21389: PUSH
21390: LD_INT 14
21392: PUSH
21393: LD_INT 15
21395: PUSH
21396: LD_INT 16
21398: PUSH
21399: LD_INT 17
21401: PUSH
21402: LD_INT 18
21404: PUSH
21405: LD_INT 19
21407: PUSH
21408: LD_INT 20
21410: PUSH
21411: LD_INT 21
21413: PUSH
21414: LD_INT 22
21416: PUSH
21417: LD_INT 23
21419: PUSH
21420: LD_INT 24
21422: PUSH
21423: LD_INT 25
21425: PUSH
21426: LD_INT 26
21428: PUSH
21429: LD_INT 28
21431: PUSH
21432: LD_INT 30
21434: PUSH
21435: LD_INT 31
21437: PUSH
21438: LD_INT 32
21440: PUSH
21441: LD_INT 34
21443: PUSH
21444: LD_INT 36
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 101
21482: PUSH
21483: LD_INT 102
21485: PUSH
21486: LD_INT 103
21488: PUSH
21489: LD_INT 104
21491: PUSH
21492: LD_INT 105
21494: PUSH
21495: LD_INT 106
21497: PUSH
21498: LD_INT 107
21500: PUSH
21501: LD_INT 108
21503: PUSH
21504: LD_INT 109
21506: PUSH
21507: LD_INT 110
21509: PUSH
21510: LD_INT 111
21512: PUSH
21513: LD_INT 112
21515: PUSH
21516: LD_INT 114
21518: PUSH
21519: LD_INT 116
21521: PUSH
21522: LD_INT 117
21524: PUSH
21525: LD_INT 118
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: ST_TO_ADDR
21550: GO 23233
21552: LD_INT 12
21554: DOUBLE
21555: EQUAL
21556: IFTRUE 21560
21558: GO 21780
21560: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: LD_INT 3
21574: PUSH
21575: LD_INT 4
21577: PUSH
21578: LD_INT 5
21580: PUSH
21581: LD_INT 6
21583: PUSH
21584: LD_INT 7
21586: PUSH
21587: LD_INT 8
21589: PUSH
21590: LD_INT 9
21592: PUSH
21593: LD_INT 10
21595: PUSH
21596: LD_INT 11
21598: PUSH
21599: LD_INT 12
21601: PUSH
21602: LD_INT 13
21604: PUSH
21605: LD_INT 14
21607: PUSH
21608: LD_INT 15
21610: PUSH
21611: LD_INT 16
21613: PUSH
21614: LD_INT 17
21616: PUSH
21617: LD_INT 18
21619: PUSH
21620: LD_INT 19
21622: PUSH
21623: LD_INT 20
21625: PUSH
21626: LD_INT 21
21628: PUSH
21629: LD_INT 22
21631: PUSH
21632: LD_INT 23
21634: PUSH
21635: LD_INT 24
21637: PUSH
21638: LD_INT 25
21640: PUSH
21641: LD_INT 26
21643: PUSH
21644: LD_INT 27
21646: PUSH
21647: LD_INT 28
21649: PUSH
21650: LD_INT 30
21652: PUSH
21653: LD_INT 31
21655: PUSH
21656: LD_INT 32
21658: PUSH
21659: LD_INT 33
21661: PUSH
21662: LD_INT 34
21664: PUSH
21665: LD_INT 36
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 101
21706: PUSH
21707: LD_INT 102
21709: PUSH
21710: LD_INT 103
21712: PUSH
21713: LD_INT 104
21715: PUSH
21716: LD_INT 105
21718: PUSH
21719: LD_INT 106
21721: PUSH
21722: LD_INT 107
21724: PUSH
21725: LD_INT 108
21727: PUSH
21728: LD_INT 109
21730: PUSH
21731: LD_INT 110
21733: PUSH
21734: LD_INT 111
21736: PUSH
21737: LD_INT 112
21739: PUSH
21740: LD_INT 113
21742: PUSH
21743: LD_INT 114
21745: PUSH
21746: LD_INT 116
21748: PUSH
21749: LD_INT 117
21751: PUSH
21752: LD_INT 118
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: ST_TO_ADDR
21778: GO 23233
21780: LD_INT 13
21782: DOUBLE
21783: EQUAL
21784: IFTRUE 21788
21786: GO 21996
21788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21789: LD_ADDR_VAR 0 2
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: LD_INT 2
21799: PUSH
21800: LD_INT 3
21802: PUSH
21803: LD_INT 4
21805: PUSH
21806: LD_INT 5
21808: PUSH
21809: LD_INT 8
21811: PUSH
21812: LD_INT 9
21814: PUSH
21815: LD_INT 10
21817: PUSH
21818: LD_INT 11
21820: PUSH
21821: LD_INT 12
21823: PUSH
21824: LD_INT 14
21826: PUSH
21827: LD_INT 15
21829: PUSH
21830: LD_INT 16
21832: PUSH
21833: LD_INT 17
21835: PUSH
21836: LD_INT 18
21838: PUSH
21839: LD_INT 19
21841: PUSH
21842: LD_INT 20
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 22
21850: PUSH
21851: LD_INT 23
21853: PUSH
21854: LD_INT 24
21856: PUSH
21857: LD_INT 25
21859: PUSH
21860: LD_INT 26
21862: PUSH
21863: LD_INT 27
21865: PUSH
21866: LD_INT 28
21868: PUSH
21869: LD_INT 30
21871: PUSH
21872: LD_INT 31
21874: PUSH
21875: LD_INT 32
21877: PUSH
21878: LD_INT 33
21880: PUSH
21881: LD_INT 34
21883: PUSH
21884: LD_INT 36
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 101
21922: PUSH
21923: LD_INT 102
21925: PUSH
21926: LD_INT 103
21928: PUSH
21929: LD_INT 104
21931: PUSH
21932: LD_INT 105
21934: PUSH
21935: LD_INT 106
21937: PUSH
21938: LD_INT 107
21940: PUSH
21941: LD_INT 108
21943: PUSH
21944: LD_INT 109
21946: PUSH
21947: LD_INT 110
21949: PUSH
21950: LD_INT 111
21952: PUSH
21953: LD_INT 112
21955: PUSH
21956: LD_INT 113
21958: PUSH
21959: LD_INT 114
21961: PUSH
21962: LD_INT 116
21964: PUSH
21965: LD_INT 117
21967: PUSH
21968: LD_INT 118
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: ST_TO_ADDR
21994: GO 23233
21996: LD_INT 14
21998: DOUBLE
21999: EQUAL
22000: IFTRUE 22004
22002: GO 22228
22004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_INT 1
22012: PUSH
22013: LD_INT 2
22015: PUSH
22016: LD_INT 3
22018: PUSH
22019: LD_INT 4
22021: PUSH
22022: LD_INT 5
22024: PUSH
22025: LD_INT 6
22027: PUSH
22028: LD_INT 7
22030: PUSH
22031: LD_INT 8
22033: PUSH
22034: LD_INT 9
22036: PUSH
22037: LD_INT 10
22039: PUSH
22040: LD_INT 11
22042: PUSH
22043: LD_INT 12
22045: PUSH
22046: LD_INT 13
22048: PUSH
22049: LD_INT 14
22051: PUSH
22052: LD_INT 15
22054: PUSH
22055: LD_INT 16
22057: PUSH
22058: LD_INT 17
22060: PUSH
22061: LD_INT 18
22063: PUSH
22064: LD_INT 19
22066: PUSH
22067: LD_INT 20
22069: PUSH
22070: LD_INT 21
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_INT 23
22078: PUSH
22079: LD_INT 24
22081: PUSH
22082: LD_INT 25
22084: PUSH
22085: LD_INT 26
22087: PUSH
22088: LD_INT 27
22090: PUSH
22091: LD_INT 28
22093: PUSH
22094: LD_INT 29
22096: PUSH
22097: LD_INT 30
22099: PUSH
22100: LD_INT 31
22102: PUSH
22103: LD_INT 32
22105: PUSH
22106: LD_INT 33
22108: PUSH
22109: LD_INT 34
22111: PUSH
22112: LD_INT 36
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 101
22154: PUSH
22155: LD_INT 102
22157: PUSH
22158: LD_INT 103
22160: PUSH
22161: LD_INT 104
22163: PUSH
22164: LD_INT 105
22166: PUSH
22167: LD_INT 106
22169: PUSH
22170: LD_INT 107
22172: PUSH
22173: LD_INT 108
22175: PUSH
22176: LD_INT 109
22178: PUSH
22179: LD_INT 110
22181: PUSH
22182: LD_INT 111
22184: PUSH
22185: LD_INT 112
22187: PUSH
22188: LD_INT 113
22190: PUSH
22191: LD_INT 114
22193: PUSH
22194: LD_INT 116
22196: PUSH
22197: LD_INT 117
22199: PUSH
22200: LD_INT 118
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: ST_TO_ADDR
22226: GO 23233
22228: LD_INT 15
22230: DOUBLE
22231: EQUAL
22232: IFTRUE 22236
22234: GO 22460
22236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22237: LD_ADDR_VAR 0 2
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: LD_INT 3
22250: PUSH
22251: LD_INT 4
22253: PUSH
22254: LD_INT 5
22256: PUSH
22257: LD_INT 6
22259: PUSH
22260: LD_INT 7
22262: PUSH
22263: LD_INT 8
22265: PUSH
22266: LD_INT 9
22268: PUSH
22269: LD_INT 10
22271: PUSH
22272: LD_INT 11
22274: PUSH
22275: LD_INT 12
22277: PUSH
22278: LD_INT 13
22280: PUSH
22281: LD_INT 14
22283: PUSH
22284: LD_INT 15
22286: PUSH
22287: LD_INT 16
22289: PUSH
22290: LD_INT 17
22292: PUSH
22293: LD_INT 18
22295: PUSH
22296: LD_INT 19
22298: PUSH
22299: LD_INT 20
22301: PUSH
22302: LD_INT 21
22304: PUSH
22305: LD_INT 22
22307: PUSH
22308: LD_INT 23
22310: PUSH
22311: LD_INT 24
22313: PUSH
22314: LD_INT 25
22316: PUSH
22317: LD_INT 26
22319: PUSH
22320: LD_INT 27
22322: PUSH
22323: LD_INT 28
22325: PUSH
22326: LD_INT 29
22328: PUSH
22329: LD_INT 30
22331: PUSH
22332: LD_INT 31
22334: PUSH
22335: LD_INT 32
22337: PUSH
22338: LD_INT 33
22340: PUSH
22341: LD_INT 34
22343: PUSH
22344: LD_INT 36
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 101
22386: PUSH
22387: LD_INT 102
22389: PUSH
22390: LD_INT 103
22392: PUSH
22393: LD_INT 104
22395: PUSH
22396: LD_INT 105
22398: PUSH
22399: LD_INT 106
22401: PUSH
22402: LD_INT 107
22404: PUSH
22405: LD_INT 108
22407: PUSH
22408: LD_INT 109
22410: PUSH
22411: LD_INT 110
22413: PUSH
22414: LD_INT 111
22416: PUSH
22417: LD_INT 112
22419: PUSH
22420: LD_INT 113
22422: PUSH
22423: LD_INT 114
22425: PUSH
22426: LD_INT 116
22428: PUSH
22429: LD_INT 117
22431: PUSH
22432: LD_INT 118
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: ST_TO_ADDR
22458: GO 23233
22460: LD_INT 16
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22604
22468: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22469: LD_ADDR_VAR 0 2
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 4
22479: PUSH
22480: LD_INT 5
22482: PUSH
22483: LD_INT 7
22485: PUSH
22486: LD_INT 11
22488: PUSH
22489: LD_INT 12
22491: PUSH
22492: LD_INT 15
22494: PUSH
22495: LD_INT 16
22497: PUSH
22498: LD_INT 20
22500: PUSH
22501: LD_INT 21
22503: PUSH
22504: LD_INT 22
22506: PUSH
22507: LD_INT 23
22509: PUSH
22510: LD_INT 25
22512: PUSH
22513: LD_INT 26
22515: PUSH
22516: LD_INT 30
22518: PUSH
22519: LD_INT 31
22521: PUSH
22522: LD_INT 32
22524: PUSH
22525: LD_INT 33
22527: PUSH
22528: LD_INT 34
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 101
22554: PUSH
22555: LD_INT 102
22557: PUSH
22558: LD_INT 103
22560: PUSH
22561: LD_INT 106
22563: PUSH
22564: LD_INT 108
22566: PUSH
22567: LD_INT 112
22569: PUSH
22570: LD_INT 113
22572: PUSH
22573: LD_INT 114
22575: PUSH
22576: LD_INT 116
22578: PUSH
22579: LD_INT 117
22581: PUSH
22582: LD_INT 118
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: ST_TO_ADDR
22602: GO 23233
22604: LD_INT 17
22606: DOUBLE
22607: EQUAL
22608: IFTRUE 22612
22610: GO 22836
22612: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22613: LD_ADDR_VAR 0 2
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: LD_INT 2
22623: PUSH
22624: LD_INT 3
22626: PUSH
22627: LD_INT 4
22629: PUSH
22630: LD_INT 5
22632: PUSH
22633: LD_INT 6
22635: PUSH
22636: LD_INT 7
22638: PUSH
22639: LD_INT 8
22641: PUSH
22642: LD_INT 9
22644: PUSH
22645: LD_INT 10
22647: PUSH
22648: LD_INT 11
22650: PUSH
22651: LD_INT 12
22653: PUSH
22654: LD_INT 13
22656: PUSH
22657: LD_INT 14
22659: PUSH
22660: LD_INT 15
22662: PUSH
22663: LD_INT 16
22665: PUSH
22666: LD_INT 17
22668: PUSH
22669: LD_INT 18
22671: PUSH
22672: LD_INT 19
22674: PUSH
22675: LD_INT 20
22677: PUSH
22678: LD_INT 21
22680: PUSH
22681: LD_INT 22
22683: PUSH
22684: LD_INT 23
22686: PUSH
22687: LD_INT 24
22689: PUSH
22690: LD_INT 25
22692: PUSH
22693: LD_INT 26
22695: PUSH
22696: LD_INT 27
22698: PUSH
22699: LD_INT 28
22701: PUSH
22702: LD_INT 29
22704: PUSH
22705: LD_INT 30
22707: PUSH
22708: LD_INT 31
22710: PUSH
22711: LD_INT 32
22713: PUSH
22714: LD_INT 33
22716: PUSH
22717: LD_INT 34
22719: PUSH
22720: LD_INT 36
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 101
22762: PUSH
22763: LD_INT 102
22765: PUSH
22766: LD_INT 103
22768: PUSH
22769: LD_INT 104
22771: PUSH
22772: LD_INT 105
22774: PUSH
22775: LD_INT 106
22777: PUSH
22778: LD_INT 107
22780: PUSH
22781: LD_INT 108
22783: PUSH
22784: LD_INT 109
22786: PUSH
22787: LD_INT 110
22789: PUSH
22790: LD_INT 111
22792: PUSH
22793: LD_INT 112
22795: PUSH
22796: LD_INT 113
22798: PUSH
22799: LD_INT 114
22801: PUSH
22802: LD_INT 116
22804: PUSH
22805: LD_INT 117
22807: PUSH
22808: LD_INT 118
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: ST_TO_ADDR
22834: GO 23233
22836: LD_INT 18
22838: DOUBLE
22839: EQUAL
22840: IFTRUE 22844
22842: GO 22992
22844: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22845: LD_ADDR_VAR 0 2
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 4
22855: PUSH
22856: LD_INT 5
22858: PUSH
22859: LD_INT 7
22861: PUSH
22862: LD_INT 11
22864: PUSH
22865: LD_INT 12
22867: PUSH
22868: LD_INT 15
22870: PUSH
22871: LD_INT 16
22873: PUSH
22874: LD_INT 20
22876: PUSH
22877: LD_INT 21
22879: PUSH
22880: LD_INT 22
22882: PUSH
22883: LD_INT 23
22885: PUSH
22886: LD_INT 25
22888: PUSH
22889: LD_INT 26
22891: PUSH
22892: LD_INT 30
22894: PUSH
22895: LD_INT 31
22897: PUSH
22898: LD_INT 32
22900: PUSH
22901: LD_INT 33
22903: PUSH
22904: LD_INT 34
22906: PUSH
22907: LD_INT 35
22909: PUSH
22910: LD_INT 36
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 101
22938: PUSH
22939: LD_INT 102
22941: PUSH
22942: LD_INT 103
22944: PUSH
22945: LD_INT 106
22947: PUSH
22948: LD_INT 108
22950: PUSH
22951: LD_INT 112
22953: PUSH
22954: LD_INT 113
22956: PUSH
22957: LD_INT 114
22959: PUSH
22960: LD_INT 115
22962: PUSH
22963: LD_INT 116
22965: PUSH
22966: LD_INT 117
22968: PUSH
22969: LD_INT 118
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: ST_TO_ADDR
22990: GO 23233
22992: LD_INT 19
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23232
23000: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23001: LD_ADDR_VAR 0 2
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: LD_INT 3
23014: PUSH
23015: LD_INT 4
23017: PUSH
23018: LD_INT 5
23020: PUSH
23021: LD_INT 6
23023: PUSH
23024: LD_INT 7
23026: PUSH
23027: LD_INT 8
23029: PUSH
23030: LD_INT 9
23032: PUSH
23033: LD_INT 10
23035: PUSH
23036: LD_INT 11
23038: PUSH
23039: LD_INT 12
23041: PUSH
23042: LD_INT 13
23044: PUSH
23045: LD_INT 14
23047: PUSH
23048: LD_INT 15
23050: PUSH
23051: LD_INT 16
23053: PUSH
23054: LD_INT 17
23056: PUSH
23057: LD_INT 18
23059: PUSH
23060: LD_INT 19
23062: PUSH
23063: LD_INT 20
23065: PUSH
23066: LD_INT 21
23068: PUSH
23069: LD_INT 22
23071: PUSH
23072: LD_INT 23
23074: PUSH
23075: LD_INT 24
23077: PUSH
23078: LD_INT 25
23080: PUSH
23081: LD_INT 26
23083: PUSH
23084: LD_INT 27
23086: PUSH
23087: LD_INT 28
23089: PUSH
23090: LD_INT 29
23092: PUSH
23093: LD_INT 30
23095: PUSH
23096: LD_INT 31
23098: PUSH
23099: LD_INT 32
23101: PUSH
23102: LD_INT 33
23104: PUSH
23105: LD_INT 34
23107: PUSH
23108: LD_INT 35
23110: PUSH
23111: LD_INT 36
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 101
23154: PUSH
23155: LD_INT 102
23157: PUSH
23158: LD_INT 103
23160: PUSH
23161: LD_INT 104
23163: PUSH
23164: LD_INT 105
23166: PUSH
23167: LD_INT 106
23169: PUSH
23170: LD_INT 107
23172: PUSH
23173: LD_INT 108
23175: PUSH
23176: LD_INT 109
23178: PUSH
23179: LD_INT 110
23181: PUSH
23182: LD_INT 111
23184: PUSH
23185: LD_INT 112
23187: PUSH
23188: LD_INT 113
23190: PUSH
23191: LD_INT 114
23193: PUSH
23194: LD_INT 115
23196: PUSH
23197: LD_INT 116
23199: PUSH
23200: LD_INT 117
23202: PUSH
23203: LD_INT 118
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: ST_TO_ADDR
23230: GO 23233
23232: POP
// end else
23233: GO 23464
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23235: LD_ADDR_VAR 0 2
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: LD_INT 2
23245: PUSH
23246: LD_INT 3
23248: PUSH
23249: LD_INT 4
23251: PUSH
23252: LD_INT 5
23254: PUSH
23255: LD_INT 6
23257: PUSH
23258: LD_INT 7
23260: PUSH
23261: LD_INT 8
23263: PUSH
23264: LD_INT 9
23266: PUSH
23267: LD_INT 10
23269: PUSH
23270: LD_INT 11
23272: PUSH
23273: LD_INT 12
23275: PUSH
23276: LD_INT 13
23278: PUSH
23279: LD_INT 14
23281: PUSH
23282: LD_INT 15
23284: PUSH
23285: LD_INT 16
23287: PUSH
23288: LD_INT 17
23290: PUSH
23291: LD_INT 18
23293: PUSH
23294: LD_INT 19
23296: PUSH
23297: LD_INT 20
23299: PUSH
23300: LD_INT 21
23302: PUSH
23303: LD_INT 22
23305: PUSH
23306: LD_INT 23
23308: PUSH
23309: LD_INT 24
23311: PUSH
23312: LD_INT 25
23314: PUSH
23315: LD_INT 26
23317: PUSH
23318: LD_INT 27
23320: PUSH
23321: LD_INT 28
23323: PUSH
23324: LD_INT 29
23326: PUSH
23327: LD_INT 30
23329: PUSH
23330: LD_INT 31
23332: PUSH
23333: LD_INT 32
23335: PUSH
23336: LD_INT 33
23338: PUSH
23339: LD_INT 34
23341: PUSH
23342: LD_INT 35
23344: PUSH
23345: LD_INT 36
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 101
23388: PUSH
23389: LD_INT 102
23391: PUSH
23392: LD_INT 103
23394: PUSH
23395: LD_INT 104
23397: PUSH
23398: LD_INT 105
23400: PUSH
23401: LD_INT 106
23403: PUSH
23404: LD_INT 107
23406: PUSH
23407: LD_INT 108
23409: PUSH
23410: LD_INT 109
23412: PUSH
23413: LD_INT 110
23415: PUSH
23416: LD_INT 111
23418: PUSH
23419: LD_INT 112
23421: PUSH
23422: LD_INT 113
23424: PUSH
23425: LD_INT 114
23427: PUSH
23428: LD_INT 115
23430: PUSH
23431: LD_INT 116
23433: PUSH
23434: LD_INT 117
23436: PUSH
23437: LD_INT 118
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: ST_TO_ADDR
// if result then
23464: LD_VAR 0 2
23468: IFFALSE 24254
// begin normal :=  ;
23470: LD_ADDR_VAR 0 5
23474: PUSH
23475: LD_STRING 
23477: ST_TO_ADDR
// hardcore :=  ;
23478: LD_ADDR_VAR 0 6
23482: PUSH
23483: LD_STRING 
23485: ST_TO_ADDR
// active :=  ;
23486: LD_ADDR_VAR 0 7
23490: PUSH
23491: LD_STRING 
23493: ST_TO_ADDR
// for i = 1 to normalCounter do
23494: LD_ADDR_VAR 0 8
23498: PUSH
23499: DOUBLE
23500: LD_INT 1
23502: DEC
23503: ST_TO_ADDR
23504: LD_EXP 53
23508: PUSH
23509: FOR_TO
23510: IFFALSE 23611
// begin tmp := 0 ;
23512: LD_ADDR_VAR 0 3
23516: PUSH
23517: LD_STRING 0
23519: ST_TO_ADDR
// if result [ 1 ] then
23520: LD_VAR 0 2
23524: PUSH
23525: LD_INT 1
23527: ARRAY
23528: IFFALSE 23593
// if result [ 1 ] [ 1 ] = i then
23530: LD_VAR 0 2
23534: PUSH
23535: LD_INT 1
23537: ARRAY
23538: PUSH
23539: LD_INT 1
23541: ARRAY
23542: PUSH
23543: LD_VAR 0 8
23547: EQUAL
23548: IFFALSE 23593
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23550: LD_ADDR_VAR 0 2
23554: PUSH
23555: LD_VAR 0 2
23559: PPUSH
23560: LD_INT 1
23562: PPUSH
23563: LD_VAR 0 2
23567: PUSH
23568: LD_INT 1
23570: ARRAY
23571: PPUSH
23572: LD_INT 1
23574: PPUSH
23575: CALL_OW 3
23579: PPUSH
23580: CALL_OW 1
23584: ST_TO_ADDR
// tmp := 1 ;
23585: LD_ADDR_VAR 0 3
23589: PUSH
23590: LD_STRING 1
23592: ST_TO_ADDR
// end ; normal := normal & tmp ;
23593: LD_ADDR_VAR 0 5
23597: PUSH
23598: LD_VAR 0 5
23602: PUSH
23603: LD_VAR 0 3
23607: STR
23608: ST_TO_ADDR
// end ;
23609: GO 23509
23611: POP
23612: POP
// for i = 1 to hardcoreCounter do
23613: LD_ADDR_VAR 0 8
23617: PUSH
23618: DOUBLE
23619: LD_INT 1
23621: DEC
23622: ST_TO_ADDR
23623: LD_EXP 54
23627: PUSH
23628: FOR_TO
23629: IFFALSE 23734
// begin tmp := 0 ;
23631: LD_ADDR_VAR 0 3
23635: PUSH
23636: LD_STRING 0
23638: ST_TO_ADDR
// if result [ 2 ] then
23639: LD_VAR 0 2
23643: PUSH
23644: LD_INT 2
23646: ARRAY
23647: IFFALSE 23716
// if result [ 2 ] [ 1 ] = 100 + i then
23649: LD_VAR 0 2
23653: PUSH
23654: LD_INT 2
23656: ARRAY
23657: PUSH
23658: LD_INT 1
23660: ARRAY
23661: PUSH
23662: LD_INT 100
23664: PUSH
23665: LD_VAR 0 8
23669: PLUS
23670: EQUAL
23671: IFFALSE 23716
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23673: LD_ADDR_VAR 0 2
23677: PUSH
23678: LD_VAR 0 2
23682: PPUSH
23683: LD_INT 2
23685: PPUSH
23686: LD_VAR 0 2
23690: PUSH
23691: LD_INT 2
23693: ARRAY
23694: PPUSH
23695: LD_INT 1
23697: PPUSH
23698: CALL_OW 3
23702: PPUSH
23703: CALL_OW 1
23707: ST_TO_ADDR
// tmp := 1 ;
23708: LD_ADDR_VAR 0 3
23712: PUSH
23713: LD_STRING 1
23715: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23716: LD_ADDR_VAR 0 6
23720: PUSH
23721: LD_VAR 0 6
23725: PUSH
23726: LD_VAR 0 3
23730: STR
23731: ST_TO_ADDR
// end ;
23732: GO 23628
23734: POP
23735: POP
// if isGameLoad then
23736: LD_VAR 0 1
23740: IFFALSE 24215
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23742: LD_ADDR_VAR 0 4
23746: PUSH
23747: LD_EXP 57
23751: PUSH
23752: LD_EXP 56
23756: PUSH
23757: LD_EXP 58
23761: PUSH
23762: LD_EXP 55
23766: PUSH
23767: LD_EXP 59
23771: PUSH
23772: LD_EXP 60
23776: PUSH
23777: LD_EXP 61
23781: PUSH
23782: LD_EXP 62
23786: PUSH
23787: LD_EXP 63
23791: PUSH
23792: LD_EXP 64
23796: PUSH
23797: LD_EXP 65
23801: PUSH
23802: LD_EXP 66
23806: PUSH
23807: LD_EXP 67
23811: PUSH
23812: LD_EXP 68
23816: PUSH
23817: LD_EXP 76
23821: PUSH
23822: LD_EXP 77
23826: PUSH
23827: LD_EXP 78
23831: PUSH
23832: LD_EXP 79
23836: PUSH
23837: LD_EXP 81
23841: PUSH
23842: LD_EXP 82
23846: PUSH
23847: LD_EXP 83
23851: PUSH
23852: LD_EXP 86
23856: PUSH
23857: LD_EXP 88
23861: PUSH
23862: LD_EXP 89
23866: PUSH
23867: LD_EXP 90
23871: PUSH
23872: LD_EXP 92
23876: PUSH
23877: LD_EXP 93
23881: PUSH
23882: LD_EXP 96
23886: PUSH
23887: LD_EXP 97
23891: PUSH
23892: LD_EXP 98
23896: PUSH
23897: LD_EXP 99
23901: PUSH
23902: LD_EXP 100
23906: PUSH
23907: LD_EXP 101
23911: PUSH
23912: LD_EXP 102
23916: PUSH
23917: LD_EXP 103
23921: PUSH
23922: LD_EXP 104
23926: PUSH
23927: LD_EXP 69
23931: PUSH
23932: LD_EXP 70
23936: PUSH
23937: LD_EXP 73
23941: PUSH
23942: LD_EXP 74
23946: PUSH
23947: LD_EXP 75
23951: PUSH
23952: LD_EXP 71
23956: PUSH
23957: LD_EXP 72
23961: PUSH
23962: LD_EXP 80
23966: PUSH
23967: LD_EXP 84
23971: PUSH
23972: LD_EXP 85
23976: PUSH
23977: LD_EXP 87
23981: PUSH
23982: LD_EXP 91
23986: PUSH
23987: LD_EXP 94
23991: PUSH
23992: LD_EXP 95
23996: PUSH
23997: LD_EXP 105
24001: PUSH
24002: LD_EXP 106
24006: PUSH
24007: LD_EXP 107
24011: PUSH
24012: LD_EXP 108
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: ST_TO_ADDR
// tmp :=  ;
24073: LD_ADDR_VAR 0 3
24077: PUSH
24078: LD_STRING 
24080: ST_TO_ADDR
// for i = 1 to normalCounter do
24081: LD_ADDR_VAR 0 8
24085: PUSH
24086: DOUBLE
24087: LD_INT 1
24089: DEC
24090: ST_TO_ADDR
24091: LD_EXP 53
24095: PUSH
24096: FOR_TO
24097: IFFALSE 24133
// begin if flags [ i ] then
24099: LD_VAR 0 4
24103: PUSH
24104: LD_VAR 0 8
24108: ARRAY
24109: IFFALSE 24131
// tmp := tmp & i & ; ;
24111: LD_ADDR_VAR 0 3
24115: PUSH
24116: LD_VAR 0 3
24120: PUSH
24121: LD_VAR 0 8
24125: STR
24126: PUSH
24127: LD_STRING ;
24129: STR
24130: ST_TO_ADDR
// end ;
24131: GO 24096
24133: POP
24134: POP
// for i = 1 to hardcoreCounter do
24135: LD_ADDR_VAR 0 8
24139: PUSH
24140: DOUBLE
24141: LD_INT 1
24143: DEC
24144: ST_TO_ADDR
24145: LD_EXP 54
24149: PUSH
24150: FOR_TO
24151: IFFALSE 24197
// begin if flags [ normalCounter + i ] then
24153: LD_VAR 0 4
24157: PUSH
24158: LD_EXP 53
24162: PUSH
24163: LD_VAR 0 8
24167: PLUS
24168: ARRAY
24169: IFFALSE 24195
// tmp := tmp & ( 100 + i ) & ; ;
24171: LD_ADDR_VAR 0 3
24175: PUSH
24176: LD_VAR 0 3
24180: PUSH
24181: LD_INT 100
24183: PUSH
24184: LD_VAR 0 8
24188: PLUS
24189: STR
24190: PUSH
24191: LD_STRING ;
24193: STR
24194: ST_TO_ADDR
// end ;
24195: GO 24150
24197: POP
24198: POP
// if tmp then
24199: LD_VAR 0 3
24203: IFFALSE 24215
// active := tmp ;
24205: LD_ADDR_VAR 0 7
24209: PUSH
24210: LD_VAR 0 3
24214: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24215: LD_STRING getStreamItemsFromMission("
24217: PUSH
24218: LD_VAR 0 5
24222: STR
24223: PUSH
24224: LD_STRING ","
24226: STR
24227: PUSH
24228: LD_VAR 0 6
24232: STR
24233: PUSH
24234: LD_STRING ","
24236: STR
24237: PUSH
24238: LD_VAR 0 7
24242: STR
24243: PUSH
24244: LD_STRING ")
24246: STR
24247: PPUSH
24248: CALL_OW 559
// end else
24252: GO 24261
// ToLua ( getStreamItemsFromMission("","","") ) ;
24254: LD_STRING getStreamItemsFromMission("","","")
24256: PPUSH
24257: CALL_OW 559
// end ;
24261: LD_VAR 0 2
24265: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24266: LD_EXP 52
24270: PUSH
24271: LD_EXP 57
24275: AND
24276: IFFALSE 24400
24278: GO 24280
24280: DISABLE
24281: LD_INT 0
24283: PPUSH
24284: PPUSH
// begin enable ;
24285: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24286: LD_ADDR_VAR 0 2
24290: PUSH
24291: LD_INT 22
24293: PUSH
24294: LD_OWVAR 2
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 2
24305: PUSH
24306: LD_INT 34
24308: PUSH
24309: LD_INT 7
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 34
24318: PUSH
24319: LD_INT 45
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 34
24328: PUSH
24329: LD_INT 28
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 34
24338: PUSH
24339: LD_INT 47
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PPUSH
24357: CALL_OW 69
24361: ST_TO_ADDR
// if not tmp then
24362: LD_VAR 0 2
24366: NOT
24367: IFFALSE 24371
// exit ;
24369: GO 24400
// for i in tmp do
24371: LD_ADDR_VAR 0 1
24375: PUSH
24376: LD_VAR 0 2
24380: PUSH
24381: FOR_IN
24382: IFFALSE 24398
// begin SetLives ( i , 0 ) ;
24384: LD_VAR 0 1
24388: PPUSH
24389: LD_INT 0
24391: PPUSH
24392: CALL_OW 234
// end ;
24396: GO 24381
24398: POP
24399: POP
// end ;
24400: PPOPN 2
24402: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24403: LD_EXP 52
24407: PUSH
24408: LD_EXP 58
24412: AND
24413: IFFALSE 24497
24415: GO 24417
24417: DISABLE
24418: LD_INT 0
24420: PPUSH
24421: PPUSH
// begin enable ;
24422: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24423: LD_ADDR_VAR 0 2
24427: PUSH
24428: LD_INT 22
24430: PUSH
24431: LD_OWVAR 2
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 32
24442: PUSH
24443: LD_INT 3
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PPUSH
24454: CALL_OW 69
24458: ST_TO_ADDR
// if not tmp then
24459: LD_VAR 0 2
24463: NOT
24464: IFFALSE 24468
// exit ;
24466: GO 24497
// for i in tmp do
24468: LD_ADDR_VAR 0 1
24472: PUSH
24473: LD_VAR 0 2
24477: PUSH
24478: FOR_IN
24479: IFFALSE 24495
// begin SetLives ( i , 0 ) ;
24481: LD_VAR 0 1
24485: PPUSH
24486: LD_INT 0
24488: PPUSH
24489: CALL_OW 234
// end ;
24493: GO 24478
24495: POP
24496: POP
// end ;
24497: PPOPN 2
24499: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24500: LD_EXP 52
24504: PUSH
24505: LD_EXP 55
24509: AND
24510: IFFALSE 24603
24512: GO 24514
24514: DISABLE
24515: LD_INT 0
24517: PPUSH
// begin enable ;
24518: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24519: LD_ADDR_VAR 0 1
24523: PUSH
24524: LD_INT 22
24526: PUSH
24527: LD_OWVAR 2
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: LD_INT 25
24541: PUSH
24542: LD_INT 5
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 25
24551: PUSH
24552: LD_INT 9
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 25
24561: PUSH
24562: LD_INT 8
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PPUSH
24579: CALL_OW 69
24583: PUSH
24584: FOR_IN
24585: IFFALSE 24601
// begin SetClass ( i , 1 ) ;
24587: LD_VAR 0 1
24591: PPUSH
24592: LD_INT 1
24594: PPUSH
24595: CALL_OW 336
// end ;
24599: GO 24584
24601: POP
24602: POP
// end ;
24603: PPOPN 1
24605: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24606: LD_EXP 52
24610: PUSH
24611: LD_EXP 56
24615: AND
24616: PUSH
24617: LD_OWVAR 65
24621: PUSH
24622: LD_INT 7
24624: LESS
24625: AND
24626: IFFALSE 24640
24628: GO 24630
24630: DISABLE
// begin enable ;
24631: ENABLE
// game_speed := 7 ;
24632: LD_ADDR_OWVAR 65
24636: PUSH
24637: LD_INT 7
24639: ST_TO_ADDR
// end ;
24640: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24641: LD_EXP 52
24645: PUSH
24646: LD_EXP 59
24650: AND
24651: IFFALSE 24853
24653: GO 24655
24655: DISABLE
24656: LD_INT 0
24658: PPUSH
24659: PPUSH
24660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24661: LD_ADDR_VAR 0 3
24665: PUSH
24666: LD_INT 81
24668: PUSH
24669: LD_OWVAR 2
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 21
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PPUSH
24692: CALL_OW 69
24696: ST_TO_ADDR
// if not tmp then
24697: LD_VAR 0 3
24701: NOT
24702: IFFALSE 24706
// exit ;
24704: GO 24853
// if tmp > 5 then
24706: LD_VAR 0 3
24710: PUSH
24711: LD_INT 5
24713: GREATER
24714: IFFALSE 24726
// k := 5 else
24716: LD_ADDR_VAR 0 2
24720: PUSH
24721: LD_INT 5
24723: ST_TO_ADDR
24724: GO 24736
// k := tmp ;
24726: LD_ADDR_VAR 0 2
24730: PUSH
24731: LD_VAR 0 3
24735: ST_TO_ADDR
// for i := 1 to k do
24736: LD_ADDR_VAR 0 1
24740: PUSH
24741: DOUBLE
24742: LD_INT 1
24744: DEC
24745: ST_TO_ADDR
24746: LD_VAR 0 2
24750: PUSH
24751: FOR_TO
24752: IFFALSE 24851
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24754: LD_VAR 0 3
24758: PUSH
24759: LD_VAR 0 1
24763: ARRAY
24764: PPUSH
24765: LD_VAR 0 1
24769: PUSH
24770: LD_INT 4
24772: MOD
24773: PUSH
24774: LD_INT 1
24776: PLUS
24777: PPUSH
24778: CALL_OW 259
24782: PUSH
24783: LD_INT 10
24785: LESS
24786: IFFALSE 24849
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24788: LD_VAR 0 3
24792: PUSH
24793: LD_VAR 0 1
24797: ARRAY
24798: PPUSH
24799: LD_VAR 0 1
24803: PUSH
24804: LD_INT 4
24806: MOD
24807: PUSH
24808: LD_INT 1
24810: PLUS
24811: PPUSH
24812: LD_VAR 0 3
24816: PUSH
24817: LD_VAR 0 1
24821: ARRAY
24822: PPUSH
24823: LD_VAR 0 1
24827: PUSH
24828: LD_INT 4
24830: MOD
24831: PUSH
24832: LD_INT 1
24834: PLUS
24835: PPUSH
24836: CALL_OW 259
24840: PUSH
24841: LD_INT 1
24843: PLUS
24844: PPUSH
24845: CALL_OW 237
24849: GO 24751
24851: POP
24852: POP
// end ;
24853: PPOPN 3
24855: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24856: LD_EXP 52
24860: PUSH
24861: LD_EXP 60
24865: AND
24866: IFFALSE 24886
24868: GO 24870
24870: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24871: LD_INT 4
24873: PPUSH
24874: LD_OWVAR 2
24878: PPUSH
24879: LD_INT 0
24881: PPUSH
24882: CALL_OW 324
24886: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24887: LD_EXP 52
24891: PUSH
24892: LD_EXP 89
24896: AND
24897: IFFALSE 24917
24899: GO 24901
24901: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24902: LD_INT 19
24904: PPUSH
24905: LD_OWVAR 2
24909: PPUSH
24910: LD_INT 0
24912: PPUSH
24913: CALL_OW 324
24917: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24918: LD_EXP 52
24922: PUSH
24923: LD_EXP 61
24927: AND
24928: IFFALSE 25030
24930: GO 24932
24932: DISABLE
24933: LD_INT 0
24935: PPUSH
24936: PPUSH
// begin enable ;
24937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24938: LD_ADDR_VAR 0 2
24942: PUSH
24943: LD_INT 22
24945: PUSH
24946: LD_OWVAR 2
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 2
24957: PUSH
24958: LD_INT 34
24960: PUSH
24961: LD_INT 11
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 34
24970: PUSH
24971: LD_INT 30
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PPUSH
24987: CALL_OW 69
24991: ST_TO_ADDR
// if not tmp then
24992: LD_VAR 0 2
24996: NOT
24997: IFFALSE 25001
// exit ;
24999: GO 25030
// for i in tmp do
25001: LD_ADDR_VAR 0 1
25005: PUSH
25006: LD_VAR 0 2
25010: PUSH
25011: FOR_IN
25012: IFFALSE 25028
// begin SetLives ( i , 0 ) ;
25014: LD_VAR 0 1
25018: PPUSH
25019: LD_INT 0
25021: PPUSH
25022: CALL_OW 234
// end ;
25026: GO 25011
25028: POP
25029: POP
// end ;
25030: PPOPN 2
25032: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25033: LD_EXP 52
25037: PUSH
25038: LD_EXP 62
25042: AND
25043: IFFALSE 25063
25045: GO 25047
25047: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25048: LD_INT 32
25050: PPUSH
25051: LD_OWVAR 2
25055: PPUSH
25056: LD_INT 0
25058: PPUSH
25059: CALL_OW 324
25063: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25064: LD_EXP 52
25068: PUSH
25069: LD_EXP 63
25073: AND
25074: IFFALSE 25255
25076: GO 25078
25078: DISABLE
25079: LD_INT 0
25081: PPUSH
25082: PPUSH
25083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25084: LD_ADDR_VAR 0 2
25088: PUSH
25089: LD_INT 22
25091: PUSH
25092: LD_OWVAR 2
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 33
25103: PUSH
25104: LD_INT 3
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PPUSH
25115: CALL_OW 69
25119: ST_TO_ADDR
// if not tmp then
25120: LD_VAR 0 2
25124: NOT
25125: IFFALSE 25129
// exit ;
25127: GO 25255
// side := 0 ;
25129: LD_ADDR_VAR 0 3
25133: PUSH
25134: LD_INT 0
25136: ST_TO_ADDR
// for i := 1 to 8 do
25137: LD_ADDR_VAR 0 1
25141: PUSH
25142: DOUBLE
25143: LD_INT 1
25145: DEC
25146: ST_TO_ADDR
25147: LD_INT 8
25149: PUSH
25150: FOR_TO
25151: IFFALSE 25199
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25153: LD_OWVAR 2
25157: PUSH
25158: LD_VAR 0 1
25162: NONEQUAL
25163: PUSH
25164: LD_OWVAR 2
25168: PPUSH
25169: LD_VAR 0 1
25173: PPUSH
25174: CALL_OW 81
25178: PUSH
25179: LD_INT 2
25181: EQUAL
25182: AND
25183: IFFALSE 25197
// begin side := i ;
25185: LD_ADDR_VAR 0 3
25189: PUSH
25190: LD_VAR 0 1
25194: ST_TO_ADDR
// break ;
25195: GO 25199
// end ;
25197: GO 25150
25199: POP
25200: POP
// if not side then
25201: LD_VAR 0 3
25205: NOT
25206: IFFALSE 25210
// exit ;
25208: GO 25255
// for i := 1 to tmp do
25210: LD_ADDR_VAR 0 1
25214: PUSH
25215: DOUBLE
25216: LD_INT 1
25218: DEC
25219: ST_TO_ADDR
25220: LD_VAR 0 2
25224: PUSH
25225: FOR_TO
25226: IFFALSE 25253
// if Prob ( 60 ) then
25228: LD_INT 60
25230: PPUSH
25231: CALL_OW 13
25235: IFFALSE 25251
// SetSide ( i , side ) ;
25237: LD_VAR 0 1
25241: PPUSH
25242: LD_VAR 0 3
25246: PPUSH
25247: CALL_OW 235
25251: GO 25225
25253: POP
25254: POP
// end ;
25255: PPOPN 3
25257: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25258: LD_EXP 52
25262: PUSH
25263: LD_EXP 65
25267: AND
25268: IFFALSE 25387
25270: GO 25272
25272: DISABLE
25273: LD_INT 0
25275: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25276: LD_ADDR_VAR 0 1
25280: PUSH
25281: LD_INT 22
25283: PUSH
25284: LD_OWVAR 2
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 21
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 3
25305: PUSH
25306: LD_INT 23
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: PPUSH
25325: CALL_OW 69
25329: PUSH
25330: FOR_IN
25331: IFFALSE 25385
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25333: LD_VAR 0 1
25337: PPUSH
25338: CALL_OW 257
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: LD_INT 3
25351: PUSH
25352: LD_INT 4
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: IN
25361: IFFALSE 25383
// SetClass ( un , rand ( 1 , 4 ) ) ;
25363: LD_VAR 0 1
25367: PPUSH
25368: LD_INT 1
25370: PPUSH
25371: LD_INT 4
25373: PPUSH
25374: CALL_OW 12
25378: PPUSH
25379: CALL_OW 336
25383: GO 25330
25385: POP
25386: POP
// end ;
25387: PPOPN 1
25389: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25390: LD_EXP 52
25394: PUSH
25395: LD_EXP 64
25399: AND
25400: IFFALSE 25479
25402: GO 25404
25404: DISABLE
25405: LD_INT 0
25407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25408: LD_ADDR_VAR 0 1
25412: PUSH
25413: LD_INT 22
25415: PUSH
25416: LD_OWVAR 2
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 21
25427: PUSH
25428: LD_INT 3
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PPUSH
25439: CALL_OW 69
25443: ST_TO_ADDR
// if not tmp then
25444: LD_VAR 0 1
25448: NOT
25449: IFFALSE 25453
// exit ;
25451: GO 25479
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25453: LD_VAR 0 1
25457: PUSH
25458: LD_INT 1
25460: PPUSH
25461: LD_VAR 0 1
25465: PPUSH
25466: CALL_OW 12
25470: ARRAY
25471: PPUSH
25472: LD_INT 100
25474: PPUSH
25475: CALL_OW 234
// end ;
25479: PPOPN 1
25481: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25482: LD_EXP 52
25486: PUSH
25487: LD_EXP 66
25491: AND
25492: IFFALSE 25590
25494: GO 25496
25496: DISABLE
25497: LD_INT 0
25499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25500: LD_ADDR_VAR 0 1
25504: PUSH
25505: LD_INT 22
25507: PUSH
25508: LD_OWVAR 2
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 21
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PPUSH
25531: CALL_OW 69
25535: ST_TO_ADDR
// if not tmp then
25536: LD_VAR 0 1
25540: NOT
25541: IFFALSE 25545
// exit ;
25543: GO 25590
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25545: LD_VAR 0 1
25549: PUSH
25550: LD_INT 1
25552: PPUSH
25553: LD_VAR 0 1
25557: PPUSH
25558: CALL_OW 12
25562: ARRAY
25563: PPUSH
25564: LD_INT 1
25566: PPUSH
25567: LD_INT 4
25569: PPUSH
25570: CALL_OW 12
25574: PPUSH
25575: LD_INT 3000
25577: PPUSH
25578: LD_INT 9000
25580: PPUSH
25581: CALL_OW 12
25585: PPUSH
25586: CALL_OW 492
// end ;
25590: PPOPN 1
25592: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25593: LD_EXP 52
25597: PUSH
25598: LD_EXP 67
25602: AND
25603: IFFALSE 25623
25605: GO 25607
25607: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25608: LD_INT 1
25610: PPUSH
25611: LD_OWVAR 2
25615: PPUSH
25616: LD_INT 0
25618: PPUSH
25619: CALL_OW 324
25623: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25624: LD_EXP 52
25628: PUSH
25629: LD_EXP 68
25633: AND
25634: IFFALSE 25717
25636: GO 25638
25638: DISABLE
25639: LD_INT 0
25641: PPUSH
25642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25643: LD_ADDR_VAR 0 2
25647: PUSH
25648: LD_INT 22
25650: PUSH
25651: LD_OWVAR 2
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 21
25662: PUSH
25663: LD_INT 3
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PPUSH
25674: CALL_OW 69
25678: ST_TO_ADDR
// if not tmp then
25679: LD_VAR 0 2
25683: NOT
25684: IFFALSE 25688
// exit ;
25686: GO 25717
// for i in tmp do
25688: LD_ADDR_VAR 0 1
25692: PUSH
25693: LD_VAR 0 2
25697: PUSH
25698: FOR_IN
25699: IFFALSE 25715
// SetBLevel ( i , 10 ) ;
25701: LD_VAR 0 1
25705: PPUSH
25706: LD_INT 10
25708: PPUSH
25709: CALL_OW 241
25713: GO 25698
25715: POP
25716: POP
// end ;
25717: PPOPN 2
25719: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25720: LD_EXP 52
25724: PUSH
25725: LD_EXP 69
25729: AND
25730: IFFALSE 25841
25732: GO 25734
25734: DISABLE
25735: LD_INT 0
25737: PPUSH
25738: PPUSH
25739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_INT 22
25747: PUSH
25748: LD_OWVAR 2
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 25
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PPUSH
25771: CALL_OW 69
25775: ST_TO_ADDR
// if not tmp then
25776: LD_VAR 0 3
25780: NOT
25781: IFFALSE 25785
// exit ;
25783: GO 25841
// un := tmp [ rand ( 1 , tmp ) ] ;
25785: LD_ADDR_VAR 0 2
25789: PUSH
25790: LD_VAR 0 3
25794: PUSH
25795: LD_INT 1
25797: PPUSH
25798: LD_VAR 0 3
25802: PPUSH
25803: CALL_OW 12
25807: ARRAY
25808: ST_TO_ADDR
// if Crawls ( un ) then
25809: LD_VAR 0 2
25813: PPUSH
25814: CALL_OW 318
25818: IFFALSE 25829
// ComWalk ( un ) ;
25820: LD_VAR 0 2
25824: PPUSH
25825: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25829: LD_VAR 0 2
25833: PPUSH
25834: LD_INT 5
25836: PPUSH
25837: CALL_OW 336
// end ;
25841: PPOPN 3
25843: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25844: LD_EXP 52
25848: PUSH
25849: LD_EXP 70
25853: AND
25854: PUSH
25855: LD_OWVAR 67
25859: PUSH
25860: LD_INT 4
25862: LESS
25863: AND
25864: IFFALSE 25883
25866: GO 25868
25868: DISABLE
// begin Difficulty := Difficulty + 1 ;
25869: LD_ADDR_OWVAR 67
25873: PUSH
25874: LD_OWVAR 67
25878: PUSH
25879: LD_INT 1
25881: PLUS
25882: ST_TO_ADDR
// end ;
25883: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25884: LD_EXP 52
25888: PUSH
25889: LD_EXP 71
25893: AND
25894: IFFALSE 25997
25896: GO 25898
25898: DISABLE
25899: LD_INT 0
25901: PPUSH
// begin for i := 1 to 5 do
25902: LD_ADDR_VAR 0 1
25906: PUSH
25907: DOUBLE
25908: LD_INT 1
25910: DEC
25911: ST_TO_ADDR
25912: LD_INT 5
25914: PUSH
25915: FOR_TO
25916: IFFALSE 25995
// begin uc_nation := nation_nature ;
25918: LD_ADDR_OWVAR 21
25922: PUSH
25923: LD_INT 0
25925: ST_TO_ADDR
// uc_side := 0 ;
25926: LD_ADDR_OWVAR 20
25930: PUSH
25931: LD_INT 0
25933: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25934: LD_ADDR_OWVAR 29
25938: PUSH
25939: LD_INT 12
25941: PUSH
25942: LD_INT 12
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: ST_TO_ADDR
// hc_agressivity := 20 ;
25949: LD_ADDR_OWVAR 35
25953: PUSH
25954: LD_INT 20
25956: ST_TO_ADDR
// hc_class := class_tiger ;
25957: LD_ADDR_OWVAR 28
25961: PUSH
25962: LD_INT 14
25964: ST_TO_ADDR
// hc_gallery :=  ;
25965: LD_ADDR_OWVAR 33
25969: PUSH
25970: LD_STRING 
25972: ST_TO_ADDR
// hc_name :=  ;
25973: LD_ADDR_OWVAR 26
25977: PUSH
25978: LD_STRING 
25980: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25981: CALL_OW 44
25985: PPUSH
25986: LD_INT 0
25988: PPUSH
25989: CALL_OW 51
// end ;
25993: GO 25915
25995: POP
25996: POP
// end ;
25997: PPOPN 1
25999: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26000: LD_EXP 52
26004: PUSH
26005: LD_EXP 72
26009: AND
26010: IFFALSE 26019
26012: GO 26014
26014: DISABLE
// StreamSibBomb ;
26015: CALL 26020 0 0
26019: END
// export function StreamSibBomb ; var i , x , y ; begin
26020: LD_INT 0
26022: PPUSH
26023: PPUSH
26024: PPUSH
26025: PPUSH
// result := false ;
26026: LD_ADDR_VAR 0 1
26030: PUSH
26031: LD_INT 0
26033: ST_TO_ADDR
// for i := 1 to 16 do
26034: LD_ADDR_VAR 0 2
26038: PUSH
26039: DOUBLE
26040: LD_INT 1
26042: DEC
26043: ST_TO_ADDR
26044: LD_INT 16
26046: PUSH
26047: FOR_TO
26048: IFFALSE 26247
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26050: LD_ADDR_VAR 0 3
26054: PUSH
26055: LD_INT 10
26057: PUSH
26058: LD_INT 20
26060: PUSH
26061: LD_INT 30
26063: PUSH
26064: LD_INT 40
26066: PUSH
26067: LD_INT 50
26069: PUSH
26070: LD_INT 60
26072: PUSH
26073: LD_INT 70
26075: PUSH
26076: LD_INT 80
26078: PUSH
26079: LD_INT 90
26081: PUSH
26082: LD_INT 100
26084: PUSH
26085: LD_INT 110
26087: PUSH
26088: LD_INT 120
26090: PUSH
26091: LD_INT 130
26093: PUSH
26094: LD_INT 140
26096: PUSH
26097: LD_INT 150
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: PPUSH
26120: LD_INT 15
26122: PPUSH
26123: CALL_OW 12
26127: ARRAY
26128: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26129: LD_ADDR_VAR 0 4
26133: PUSH
26134: LD_INT 10
26136: PUSH
26137: LD_INT 20
26139: PUSH
26140: LD_INT 30
26142: PUSH
26143: LD_INT 40
26145: PUSH
26146: LD_INT 50
26148: PUSH
26149: LD_INT 60
26151: PUSH
26152: LD_INT 70
26154: PUSH
26155: LD_INT 80
26157: PUSH
26158: LD_INT 90
26160: PUSH
26161: LD_INT 100
26163: PUSH
26164: LD_INT 110
26166: PUSH
26167: LD_INT 120
26169: PUSH
26170: LD_INT 130
26172: PUSH
26173: LD_INT 140
26175: PUSH
26176: LD_INT 150
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: PPUSH
26199: LD_INT 15
26201: PPUSH
26202: CALL_OW 12
26206: ARRAY
26207: ST_TO_ADDR
// if ValidHex ( x , y ) then
26208: LD_VAR 0 3
26212: PPUSH
26213: LD_VAR 0 4
26217: PPUSH
26218: CALL_OW 488
26222: IFFALSE 26245
// begin result := [ x , y ] ;
26224: LD_ADDR_VAR 0 1
26228: PUSH
26229: LD_VAR 0 3
26233: PUSH
26234: LD_VAR 0 4
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: ST_TO_ADDR
// break ;
26243: GO 26247
// end ; end ;
26245: GO 26047
26247: POP
26248: POP
// if result then
26249: LD_VAR 0 1
26253: IFFALSE 26313
// begin ToLua ( playSibBomb() ) ;
26255: LD_STRING playSibBomb()
26257: PPUSH
26258: CALL_OW 559
// wait ( 0 0$14 ) ;
26262: LD_INT 490
26264: PPUSH
26265: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26269: LD_VAR 0 1
26273: PUSH
26274: LD_INT 1
26276: ARRAY
26277: PPUSH
26278: LD_VAR 0 1
26282: PUSH
26283: LD_INT 2
26285: ARRAY
26286: PPUSH
26287: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26291: LD_VAR 0 1
26295: PUSH
26296: LD_INT 1
26298: ARRAY
26299: PPUSH
26300: LD_VAR 0 1
26304: PUSH
26305: LD_INT 2
26307: ARRAY
26308: PPUSH
26309: CALL_OW 429
// end ; end ;
26313: LD_VAR 0 1
26317: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26318: LD_EXP 52
26322: PUSH
26323: LD_EXP 74
26327: AND
26328: IFFALSE 26340
26330: GO 26332
26332: DISABLE
// YouLost (  ) ;
26333: LD_STRING 
26335: PPUSH
26336: CALL_OW 104
26340: END
// every 0 0$1 trigger StreamModeActive and sFog do
26341: LD_EXP 52
26345: PUSH
26346: LD_EXP 73
26350: AND
26351: IFFALSE 26365
26353: GO 26355
26355: DISABLE
// FogOff ( your_side ) ;
26356: LD_OWVAR 2
26360: PPUSH
26361: CALL_OW 344
26365: END
// every 0 0$1 trigger StreamModeActive and sSun do
26366: LD_EXP 52
26370: PUSH
26371: LD_EXP 75
26375: AND
26376: IFFALSE 26404
26378: GO 26380
26380: DISABLE
// begin solar_recharge_percent := 0 ;
26381: LD_ADDR_OWVAR 79
26385: PUSH
26386: LD_INT 0
26388: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26389: LD_INT 10500
26391: PPUSH
26392: CALL_OW 67
// solar_recharge_percent := 100 ;
26396: LD_ADDR_OWVAR 79
26400: PUSH
26401: LD_INT 100
26403: ST_TO_ADDR
// end ;
26404: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26405: LD_EXP 52
26409: PUSH
26410: LD_EXP 76
26414: AND
26415: IFFALSE 26654
26417: GO 26419
26419: DISABLE
26420: LD_INT 0
26422: PPUSH
26423: PPUSH
26424: PPUSH
// begin tmp := [ ] ;
26425: LD_ADDR_VAR 0 3
26429: PUSH
26430: EMPTY
26431: ST_TO_ADDR
// for i := 1 to 6 do
26432: LD_ADDR_VAR 0 1
26436: PUSH
26437: DOUBLE
26438: LD_INT 1
26440: DEC
26441: ST_TO_ADDR
26442: LD_INT 6
26444: PUSH
26445: FOR_TO
26446: IFFALSE 26551
// begin uc_nation := nation_nature ;
26448: LD_ADDR_OWVAR 21
26452: PUSH
26453: LD_INT 0
26455: ST_TO_ADDR
// uc_side := 0 ;
26456: LD_ADDR_OWVAR 20
26460: PUSH
26461: LD_INT 0
26463: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26464: LD_ADDR_OWVAR 29
26468: PUSH
26469: LD_INT 12
26471: PUSH
26472: LD_INT 12
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: ST_TO_ADDR
// hc_agressivity := 20 ;
26479: LD_ADDR_OWVAR 35
26483: PUSH
26484: LD_INT 20
26486: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26487: LD_ADDR_OWVAR 28
26491: PUSH
26492: LD_INT 17
26494: ST_TO_ADDR
// hc_gallery :=  ;
26495: LD_ADDR_OWVAR 33
26499: PUSH
26500: LD_STRING 
26502: ST_TO_ADDR
// hc_name :=  ;
26503: LD_ADDR_OWVAR 26
26507: PUSH
26508: LD_STRING 
26510: ST_TO_ADDR
// un := CreateHuman ;
26511: LD_ADDR_VAR 0 2
26515: PUSH
26516: CALL_OW 44
26520: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26521: LD_VAR 0 2
26525: PPUSH
26526: LD_INT 1
26528: PPUSH
26529: CALL_OW 51
// tmp := tmp ^ un ;
26533: LD_ADDR_VAR 0 3
26537: PUSH
26538: LD_VAR 0 3
26542: PUSH
26543: LD_VAR 0 2
26547: ADD
26548: ST_TO_ADDR
// end ;
26549: GO 26445
26551: POP
26552: POP
// repeat wait ( 0 0$1 ) ;
26553: LD_INT 35
26555: PPUSH
26556: CALL_OW 67
// for un in tmp do
26560: LD_ADDR_VAR 0 2
26564: PUSH
26565: LD_VAR 0 3
26569: PUSH
26570: FOR_IN
26571: IFFALSE 26645
// begin if IsDead ( un ) then
26573: LD_VAR 0 2
26577: PPUSH
26578: CALL_OW 301
26582: IFFALSE 26602
// begin tmp := tmp diff un ;
26584: LD_ADDR_VAR 0 3
26588: PUSH
26589: LD_VAR 0 3
26593: PUSH
26594: LD_VAR 0 2
26598: DIFF
26599: ST_TO_ADDR
// continue ;
26600: GO 26570
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26602: LD_VAR 0 2
26606: PPUSH
26607: LD_INT 3
26609: PUSH
26610: LD_INT 22
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PPUSH
26624: CALL_OW 69
26628: PPUSH
26629: LD_VAR 0 2
26633: PPUSH
26634: CALL_OW 74
26638: PPUSH
26639: CALL_OW 115
// end ;
26643: GO 26570
26645: POP
26646: POP
// until not tmp ;
26647: LD_VAR 0 3
26651: NOT
26652: IFFALSE 26553
// end ;
26654: PPOPN 3
26656: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26657: LD_EXP 52
26661: PUSH
26662: LD_EXP 77
26666: AND
26667: IFFALSE 26721
26669: GO 26671
26671: DISABLE
// begin ToLua ( displayTroll(); ) ;
26672: LD_STRING displayTroll();
26674: PPUSH
26675: CALL_OW 559
// wait ( 3 3$00 ) ;
26679: LD_INT 6300
26681: PPUSH
26682: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26686: LD_STRING hideTroll();
26688: PPUSH
26689: CALL_OW 559
// wait ( 1 1$00 ) ;
26693: LD_INT 2100
26695: PPUSH
26696: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26700: LD_STRING displayTroll();
26702: PPUSH
26703: CALL_OW 559
// wait ( 1 1$00 ) ;
26707: LD_INT 2100
26709: PPUSH
26710: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26714: LD_STRING hideTroll();
26716: PPUSH
26717: CALL_OW 559
// end ;
26721: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26722: LD_EXP 52
26726: PUSH
26727: LD_EXP 78
26731: AND
26732: IFFALSE 26795
26734: GO 26736
26736: DISABLE
26737: LD_INT 0
26739: PPUSH
// begin p := 0 ;
26740: LD_ADDR_VAR 0 1
26744: PUSH
26745: LD_INT 0
26747: ST_TO_ADDR
// repeat game_speed := 1 ;
26748: LD_ADDR_OWVAR 65
26752: PUSH
26753: LD_INT 1
26755: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26756: LD_INT 35
26758: PPUSH
26759: CALL_OW 67
// p := p + 1 ;
26763: LD_ADDR_VAR 0 1
26767: PUSH
26768: LD_VAR 0 1
26772: PUSH
26773: LD_INT 1
26775: PLUS
26776: ST_TO_ADDR
// until p >= 60 ;
26777: LD_VAR 0 1
26781: PUSH
26782: LD_INT 60
26784: GREATEREQUAL
26785: IFFALSE 26748
// game_speed := 4 ;
26787: LD_ADDR_OWVAR 65
26791: PUSH
26792: LD_INT 4
26794: ST_TO_ADDR
// end ;
26795: PPOPN 1
26797: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26798: LD_EXP 52
26802: PUSH
26803: LD_EXP 79
26807: AND
26808: IFFALSE 26954
26810: GO 26812
26812: DISABLE
26813: LD_INT 0
26815: PPUSH
26816: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26817: LD_ADDR_VAR 0 1
26821: PUSH
26822: LD_INT 22
26824: PUSH
26825: LD_OWVAR 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 2
26836: PUSH
26837: LD_INT 30
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 30
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: LIST
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PPUSH
26866: CALL_OW 69
26870: ST_TO_ADDR
// if not depot then
26871: LD_VAR 0 1
26875: NOT
26876: IFFALSE 26880
// exit ;
26878: GO 26954
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26880: LD_ADDR_VAR 0 2
26884: PUSH
26885: LD_VAR 0 1
26889: PUSH
26890: LD_INT 1
26892: PPUSH
26893: LD_VAR 0 1
26897: PPUSH
26898: CALL_OW 12
26902: ARRAY
26903: PPUSH
26904: CALL_OW 274
26908: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26909: LD_VAR 0 2
26913: PPUSH
26914: LD_INT 1
26916: PPUSH
26917: LD_INT 0
26919: PPUSH
26920: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26924: LD_VAR 0 2
26928: PPUSH
26929: LD_INT 2
26931: PPUSH
26932: LD_INT 0
26934: PPUSH
26935: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26939: LD_VAR 0 2
26943: PPUSH
26944: LD_INT 3
26946: PPUSH
26947: LD_INT 0
26949: PPUSH
26950: CALL_OW 277
// end ;
26954: PPOPN 2
26956: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26957: LD_EXP 52
26961: PUSH
26962: LD_EXP 80
26966: AND
26967: IFFALSE 27064
26969: GO 26971
26971: DISABLE
26972: LD_INT 0
26974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26975: LD_ADDR_VAR 0 1
26979: PUSH
26980: LD_INT 22
26982: PUSH
26983: LD_OWVAR 2
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 21
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 3
27004: PUSH
27005: LD_INT 23
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: PPUSH
27024: CALL_OW 69
27028: ST_TO_ADDR
// if not tmp then
27029: LD_VAR 0 1
27033: NOT
27034: IFFALSE 27038
// exit ;
27036: GO 27064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27038: LD_VAR 0 1
27042: PUSH
27043: LD_INT 1
27045: PPUSH
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL_OW 12
27055: ARRAY
27056: PPUSH
27057: LD_INT 200
27059: PPUSH
27060: CALL_OW 234
// end ;
27064: PPOPN 1
27066: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27067: LD_EXP 52
27071: PUSH
27072: LD_EXP 81
27076: AND
27077: IFFALSE 27156
27079: GO 27081
27081: DISABLE
27082: LD_INT 0
27084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27085: LD_ADDR_VAR 0 1
27089: PUSH
27090: LD_INT 22
27092: PUSH
27093: LD_OWVAR 2
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 21
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PPUSH
27116: CALL_OW 69
27120: ST_TO_ADDR
// if not tmp then
27121: LD_VAR 0 1
27125: NOT
27126: IFFALSE 27130
// exit ;
27128: GO 27156
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27130: LD_VAR 0 1
27134: PUSH
27135: LD_INT 1
27137: PPUSH
27138: LD_VAR 0 1
27142: PPUSH
27143: CALL_OW 12
27147: ARRAY
27148: PPUSH
27149: LD_INT 60
27151: PPUSH
27152: CALL_OW 234
// end ;
27156: PPOPN 1
27158: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27159: LD_EXP 52
27163: PUSH
27164: LD_EXP 82
27168: AND
27169: IFFALSE 27268
27171: GO 27173
27173: DISABLE
27174: LD_INT 0
27176: PPUSH
27177: PPUSH
// begin enable ;
27178: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: LD_INT 22
27186: PUSH
27187: LD_OWVAR 2
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 61
27198: PUSH
27199: EMPTY
27200: LIST
27201: PUSH
27202: LD_INT 33
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: PPUSH
27217: CALL_OW 69
27221: ST_TO_ADDR
// if not tmp then
27222: LD_VAR 0 1
27226: NOT
27227: IFFALSE 27231
// exit ;
27229: GO 27268
// for i in tmp do
27231: LD_ADDR_VAR 0 2
27235: PUSH
27236: LD_VAR 0 1
27240: PUSH
27241: FOR_IN
27242: IFFALSE 27266
// if IsControledBy ( i ) then
27244: LD_VAR 0 2
27248: PPUSH
27249: CALL_OW 312
27253: IFFALSE 27264
// ComUnlink ( i ) ;
27255: LD_VAR 0 2
27259: PPUSH
27260: CALL_OW 136
27264: GO 27241
27266: POP
27267: POP
// end ;
27268: PPOPN 2
27270: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27271: LD_EXP 52
27275: PUSH
27276: LD_EXP 83
27280: AND
27281: IFFALSE 27421
27283: GO 27285
27285: DISABLE
27286: LD_INT 0
27288: PPUSH
27289: PPUSH
// begin ToLua ( displayPowell(); ) ;
27290: LD_STRING displayPowell();
27292: PPUSH
27293: CALL_OW 559
// uc_side := 0 ;
27297: LD_ADDR_OWVAR 20
27301: PUSH
27302: LD_INT 0
27304: ST_TO_ADDR
// uc_nation := 2 ;
27305: LD_ADDR_OWVAR 21
27309: PUSH
27310: LD_INT 2
27312: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27313: LD_ADDR_OWVAR 37
27317: PUSH
27318: LD_INT 14
27320: ST_TO_ADDR
// vc_engine := engine_siberite ;
27321: LD_ADDR_OWVAR 39
27325: PUSH
27326: LD_INT 3
27328: ST_TO_ADDR
// vc_control := control_apeman ;
27329: LD_ADDR_OWVAR 38
27333: PUSH
27334: LD_INT 5
27336: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27337: LD_ADDR_OWVAR 40
27341: PUSH
27342: LD_INT 29
27344: ST_TO_ADDR
// un := CreateVehicle ;
27345: LD_ADDR_VAR 0 2
27349: PUSH
27350: CALL_OW 45
27354: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27355: LD_VAR 0 2
27359: PPUSH
27360: LD_INT 1
27362: PPUSH
27363: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27367: LD_INT 35
27369: PPUSH
27370: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27374: LD_VAR 0 2
27378: PPUSH
27379: LD_INT 22
27381: PUSH
27382: LD_OWVAR 2
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PPUSH
27391: CALL_OW 69
27395: PPUSH
27396: LD_VAR 0 2
27400: PPUSH
27401: CALL_OW 74
27405: PPUSH
27406: CALL_OW 115
// until IsDead ( un ) ;
27410: LD_VAR 0 2
27414: PPUSH
27415: CALL_OW 301
27419: IFFALSE 27367
// end ;
27421: PPOPN 2
27423: END
// every 0 0$1 trigger StreamModeActive and sStu do
27424: LD_EXP 52
27428: PUSH
27429: LD_EXP 91
27433: AND
27434: IFFALSE 27450
27436: GO 27438
27438: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27439: LD_STRING displayStucuk();
27441: PPUSH
27442: CALL_OW 559
// ResetFog ;
27446: CALL_OW 335
// end ;
27450: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27451: LD_EXP 52
27455: PUSH
27456: LD_EXP 84
27460: AND
27461: IFFALSE 27602
27463: GO 27465
27465: DISABLE
27466: LD_INT 0
27468: PPUSH
27469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27470: LD_ADDR_VAR 0 2
27474: PUSH
27475: LD_INT 22
27477: PUSH
27478: LD_OWVAR 2
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 21
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PPUSH
27501: CALL_OW 69
27505: ST_TO_ADDR
// if not tmp then
27506: LD_VAR 0 2
27510: NOT
27511: IFFALSE 27515
// exit ;
27513: GO 27602
// un := tmp [ rand ( 1 , tmp ) ] ;
27515: LD_ADDR_VAR 0 1
27519: PUSH
27520: LD_VAR 0 2
27524: PUSH
27525: LD_INT 1
27527: PPUSH
27528: LD_VAR 0 2
27532: PPUSH
27533: CALL_OW 12
27537: ARRAY
27538: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27539: LD_VAR 0 1
27543: PPUSH
27544: LD_INT 0
27546: PPUSH
27547: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27551: LD_VAR 0 1
27555: PPUSH
27556: LD_OWVAR 3
27560: PUSH
27561: LD_VAR 0 1
27565: DIFF
27566: PPUSH
27567: LD_VAR 0 1
27571: PPUSH
27572: CALL_OW 74
27576: PPUSH
27577: CALL_OW 115
// wait ( 0 0$20 ) ;
27581: LD_INT 700
27583: PPUSH
27584: CALL_OW 67
// SetSide ( un , your_side ) ;
27588: LD_VAR 0 1
27592: PPUSH
27593: LD_OWVAR 2
27597: PPUSH
27598: CALL_OW 235
// end ;
27602: PPOPN 2
27604: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27605: LD_EXP 52
27609: PUSH
27610: LD_EXP 85
27614: AND
27615: IFFALSE 27721
27617: GO 27619
27619: DISABLE
27620: LD_INT 0
27622: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27623: LD_ADDR_VAR 0 1
27627: PUSH
27628: LD_INT 22
27630: PUSH
27631: LD_OWVAR 2
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 2
27642: PUSH
27643: LD_INT 30
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 30
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PPUSH
27672: CALL_OW 69
27676: ST_TO_ADDR
// if not depot then
27677: LD_VAR 0 1
27681: NOT
27682: IFFALSE 27686
// exit ;
27684: GO 27721
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27686: LD_VAR 0 1
27690: PUSH
27691: LD_INT 1
27693: ARRAY
27694: PPUSH
27695: CALL_OW 250
27699: PPUSH
27700: LD_VAR 0 1
27704: PUSH
27705: LD_INT 1
27707: ARRAY
27708: PPUSH
27709: CALL_OW 251
27713: PPUSH
27714: LD_INT 70
27716: PPUSH
27717: CALL_OW 495
// end ;
27721: PPOPN 1
27723: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27724: LD_EXP 52
27728: PUSH
27729: LD_EXP 86
27733: AND
27734: IFFALSE 27945
27736: GO 27738
27738: DISABLE
27739: LD_INT 0
27741: PPUSH
27742: PPUSH
27743: PPUSH
27744: PPUSH
27745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27746: LD_ADDR_VAR 0 5
27750: PUSH
27751: LD_INT 22
27753: PUSH
27754: LD_OWVAR 2
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 21
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PPUSH
27777: CALL_OW 69
27781: ST_TO_ADDR
// if not tmp then
27782: LD_VAR 0 5
27786: NOT
27787: IFFALSE 27791
// exit ;
27789: GO 27945
// for i in tmp do
27791: LD_ADDR_VAR 0 1
27795: PUSH
27796: LD_VAR 0 5
27800: PUSH
27801: FOR_IN
27802: IFFALSE 27943
// begin d := rand ( 0 , 5 ) ;
27804: LD_ADDR_VAR 0 4
27808: PUSH
27809: LD_INT 0
27811: PPUSH
27812: LD_INT 5
27814: PPUSH
27815: CALL_OW 12
27819: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27820: LD_ADDR_VAR 0 2
27824: PUSH
27825: LD_VAR 0 1
27829: PPUSH
27830: CALL_OW 250
27834: PPUSH
27835: LD_VAR 0 4
27839: PPUSH
27840: LD_INT 3
27842: PPUSH
27843: LD_INT 12
27845: PPUSH
27846: CALL_OW 12
27850: PPUSH
27851: CALL_OW 272
27855: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27856: LD_ADDR_VAR 0 3
27860: PUSH
27861: LD_VAR 0 1
27865: PPUSH
27866: CALL_OW 251
27870: PPUSH
27871: LD_VAR 0 4
27875: PPUSH
27876: LD_INT 3
27878: PPUSH
27879: LD_INT 12
27881: PPUSH
27882: CALL_OW 12
27886: PPUSH
27887: CALL_OW 273
27891: ST_TO_ADDR
// if ValidHex ( x , y ) then
27892: LD_VAR 0 2
27896: PPUSH
27897: LD_VAR 0 3
27901: PPUSH
27902: CALL_OW 488
27906: IFFALSE 27941
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27908: LD_VAR 0 1
27912: PPUSH
27913: LD_VAR 0 2
27917: PPUSH
27918: LD_VAR 0 3
27922: PPUSH
27923: LD_INT 3
27925: PPUSH
27926: LD_INT 6
27928: PPUSH
27929: CALL_OW 12
27933: PPUSH
27934: LD_INT 1
27936: PPUSH
27937: CALL_OW 483
// end ;
27941: GO 27801
27943: POP
27944: POP
// end ;
27945: PPOPN 5
27947: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27948: LD_EXP 52
27952: PUSH
27953: LD_EXP 87
27957: AND
27958: IFFALSE 28052
27960: GO 27962
27962: DISABLE
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27967: LD_ADDR_VAR 0 2
27971: PUSH
27972: LD_INT 22
27974: PUSH
27975: LD_OWVAR 2
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 32
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 21
27996: PUSH
27997: LD_INT 2
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: LIST
28008: PPUSH
28009: CALL_OW 69
28013: ST_TO_ADDR
// if not tmp then
28014: LD_VAR 0 2
28018: NOT
28019: IFFALSE 28023
// exit ;
28021: GO 28052
// for i in tmp do
28023: LD_ADDR_VAR 0 1
28027: PUSH
28028: LD_VAR 0 2
28032: PUSH
28033: FOR_IN
28034: IFFALSE 28050
// SetFuel ( i , 0 ) ;
28036: LD_VAR 0 1
28040: PPUSH
28041: LD_INT 0
28043: PPUSH
28044: CALL_OW 240
28048: GO 28033
28050: POP
28051: POP
// end ;
28052: PPOPN 2
28054: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28055: LD_EXP 52
28059: PUSH
28060: LD_EXP 88
28064: AND
28065: IFFALSE 28131
28067: GO 28069
28069: DISABLE
28070: LD_INT 0
28072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28073: LD_ADDR_VAR 0 1
28077: PUSH
28078: LD_INT 22
28080: PUSH
28081: LD_OWVAR 2
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 30
28092: PUSH
28093: LD_INT 29
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PPUSH
28104: CALL_OW 69
28108: ST_TO_ADDR
// if not tmp then
28109: LD_VAR 0 1
28113: NOT
28114: IFFALSE 28118
// exit ;
28116: GO 28131
// DestroyUnit ( tmp [ 1 ] ) ;
28118: LD_VAR 0 1
28122: PUSH
28123: LD_INT 1
28125: ARRAY
28126: PPUSH
28127: CALL_OW 65
// end ;
28131: PPOPN 1
28133: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28134: LD_EXP 52
28138: PUSH
28139: LD_EXP 90
28143: AND
28144: IFFALSE 28273
28146: GO 28148
28148: DISABLE
28149: LD_INT 0
28151: PPUSH
// begin uc_side := 0 ;
28152: LD_ADDR_OWVAR 20
28156: PUSH
28157: LD_INT 0
28159: ST_TO_ADDR
// uc_nation := nation_arabian ;
28160: LD_ADDR_OWVAR 21
28164: PUSH
28165: LD_INT 2
28167: ST_TO_ADDR
// hc_gallery :=  ;
28168: LD_ADDR_OWVAR 33
28172: PUSH
28173: LD_STRING 
28175: ST_TO_ADDR
// hc_name :=  ;
28176: LD_ADDR_OWVAR 26
28180: PUSH
28181: LD_STRING 
28183: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28184: LD_INT 1
28186: PPUSH
28187: LD_INT 11
28189: PPUSH
28190: LD_INT 10
28192: PPUSH
28193: CALL_OW 380
// un := CreateHuman ;
28197: LD_ADDR_VAR 0 1
28201: PUSH
28202: CALL_OW 44
28206: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28207: LD_VAR 0 1
28211: PPUSH
28212: LD_INT 1
28214: PPUSH
28215: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28219: LD_INT 35
28221: PPUSH
28222: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28226: LD_VAR 0 1
28230: PPUSH
28231: LD_INT 22
28233: PUSH
28234: LD_OWVAR 2
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 69
28247: PPUSH
28248: LD_VAR 0 1
28252: PPUSH
28253: CALL_OW 74
28257: PPUSH
28258: CALL_OW 115
// until IsDead ( un ) ;
28262: LD_VAR 0 1
28266: PPUSH
28267: CALL_OW 301
28271: IFFALSE 28219
// end ;
28273: PPOPN 1
28275: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28276: LD_EXP 52
28280: PUSH
28281: LD_EXP 92
28285: AND
28286: IFFALSE 28298
28288: GO 28290
28290: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28291: LD_STRING earthquake(getX(game), 0, 32)
28293: PPUSH
28294: CALL_OW 559
28298: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28299: LD_EXP 52
28303: PUSH
28304: LD_EXP 93
28308: AND
28309: IFFALSE 28400
28311: GO 28313
28313: DISABLE
28314: LD_INT 0
28316: PPUSH
// begin enable ;
28317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28318: LD_ADDR_VAR 0 1
28322: PUSH
28323: LD_INT 22
28325: PUSH
28326: LD_OWVAR 2
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 21
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 33
28347: PUSH
28348: LD_INT 3
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: PPUSH
28360: CALL_OW 69
28364: ST_TO_ADDR
// if not tmp then
28365: LD_VAR 0 1
28369: NOT
28370: IFFALSE 28374
// exit ;
28372: GO 28400
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28374: LD_VAR 0 1
28378: PUSH
28379: LD_INT 1
28381: PPUSH
28382: LD_VAR 0 1
28386: PPUSH
28387: CALL_OW 12
28391: ARRAY
28392: PPUSH
28393: LD_INT 1
28395: PPUSH
28396: CALL_OW 234
// end ;
28400: PPOPN 1
28402: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28403: LD_EXP 52
28407: PUSH
28408: LD_EXP 94
28412: AND
28413: IFFALSE 28554
28415: GO 28417
28417: DISABLE
28418: LD_INT 0
28420: PPUSH
28421: PPUSH
28422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28423: LD_ADDR_VAR 0 3
28427: PUSH
28428: LD_INT 22
28430: PUSH
28431: LD_OWVAR 2
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 25
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PPUSH
28454: CALL_OW 69
28458: ST_TO_ADDR
// if not tmp then
28459: LD_VAR 0 3
28463: NOT
28464: IFFALSE 28468
// exit ;
28466: GO 28554
// un := tmp [ rand ( 1 , tmp ) ] ;
28468: LD_ADDR_VAR 0 2
28472: PUSH
28473: LD_VAR 0 3
28477: PUSH
28478: LD_INT 1
28480: PPUSH
28481: LD_VAR 0 3
28485: PPUSH
28486: CALL_OW 12
28490: ARRAY
28491: ST_TO_ADDR
// if Crawls ( un ) then
28492: LD_VAR 0 2
28496: PPUSH
28497: CALL_OW 318
28501: IFFALSE 28512
// ComWalk ( un ) ;
28503: LD_VAR 0 2
28507: PPUSH
28508: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28512: LD_VAR 0 2
28516: PPUSH
28517: LD_INT 9
28519: PPUSH
28520: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28524: LD_INT 28
28526: PPUSH
28527: LD_OWVAR 2
28531: PPUSH
28532: LD_INT 2
28534: PPUSH
28535: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28539: LD_INT 29
28541: PPUSH
28542: LD_OWVAR 2
28546: PPUSH
28547: LD_INT 2
28549: PPUSH
28550: CALL_OW 322
// end ;
28554: PPOPN 3
28556: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28557: LD_EXP 52
28561: PUSH
28562: LD_EXP 95
28566: AND
28567: IFFALSE 28678
28569: GO 28571
28571: DISABLE
28572: LD_INT 0
28574: PPUSH
28575: PPUSH
28576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28577: LD_ADDR_VAR 0 3
28581: PUSH
28582: LD_INT 22
28584: PUSH
28585: LD_OWVAR 2
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 25
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PPUSH
28608: CALL_OW 69
28612: ST_TO_ADDR
// if not tmp then
28613: LD_VAR 0 3
28617: NOT
28618: IFFALSE 28622
// exit ;
28620: GO 28678
// un := tmp [ rand ( 1 , tmp ) ] ;
28622: LD_ADDR_VAR 0 2
28626: PUSH
28627: LD_VAR 0 3
28631: PUSH
28632: LD_INT 1
28634: PPUSH
28635: LD_VAR 0 3
28639: PPUSH
28640: CALL_OW 12
28644: ARRAY
28645: ST_TO_ADDR
// if Crawls ( un ) then
28646: LD_VAR 0 2
28650: PPUSH
28651: CALL_OW 318
28655: IFFALSE 28666
// ComWalk ( un ) ;
28657: LD_VAR 0 2
28661: PPUSH
28662: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28666: LD_VAR 0 2
28670: PPUSH
28671: LD_INT 8
28673: PPUSH
28674: CALL_OW 336
// end ;
28678: PPOPN 3
28680: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28681: LD_EXP 52
28685: PUSH
28686: LD_EXP 96
28690: AND
28691: IFFALSE 28835
28693: GO 28695
28695: DISABLE
28696: LD_INT 0
28698: PPUSH
28699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28700: LD_ADDR_VAR 0 2
28704: PUSH
28705: LD_INT 22
28707: PUSH
28708: LD_OWVAR 2
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 21
28719: PUSH
28720: LD_INT 2
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 34
28732: PUSH
28733: LD_INT 12
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 34
28742: PUSH
28743: LD_INT 51
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 34
28752: PUSH
28753: LD_INT 32
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: LIST
28770: PPUSH
28771: CALL_OW 69
28775: ST_TO_ADDR
// if not tmp then
28776: LD_VAR 0 2
28780: NOT
28781: IFFALSE 28785
// exit ;
28783: GO 28835
// for i in tmp do
28785: LD_ADDR_VAR 0 1
28789: PUSH
28790: LD_VAR 0 2
28794: PUSH
28795: FOR_IN
28796: IFFALSE 28833
// if GetCargo ( i , mat_artifact ) = 0 then
28798: LD_VAR 0 1
28802: PPUSH
28803: LD_INT 4
28805: PPUSH
28806: CALL_OW 289
28810: PUSH
28811: LD_INT 0
28813: EQUAL
28814: IFFALSE 28831
// SetCargo ( i , mat_siberit , 100 ) ;
28816: LD_VAR 0 1
28820: PPUSH
28821: LD_INT 3
28823: PPUSH
28824: LD_INT 100
28826: PPUSH
28827: CALL_OW 290
28831: GO 28795
28833: POP
28834: POP
// end ;
28835: PPOPN 2
28837: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28838: LD_EXP 52
28842: PUSH
28843: LD_EXP 97
28847: AND
28848: IFFALSE 29031
28850: GO 28852
28852: DISABLE
28853: LD_INT 0
28855: PPUSH
28856: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28857: LD_ADDR_VAR 0 2
28861: PUSH
28862: LD_INT 22
28864: PUSH
28865: LD_OWVAR 2
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PPUSH
28874: CALL_OW 69
28878: ST_TO_ADDR
// if not tmp then
28879: LD_VAR 0 2
28883: NOT
28884: IFFALSE 28888
// exit ;
28886: GO 29031
// for i := 1 to 2 do
28888: LD_ADDR_VAR 0 1
28892: PUSH
28893: DOUBLE
28894: LD_INT 1
28896: DEC
28897: ST_TO_ADDR
28898: LD_INT 2
28900: PUSH
28901: FOR_TO
28902: IFFALSE 29029
// begin uc_side := your_side ;
28904: LD_ADDR_OWVAR 20
28908: PUSH
28909: LD_OWVAR 2
28913: ST_TO_ADDR
// uc_nation := nation_american ;
28914: LD_ADDR_OWVAR 21
28918: PUSH
28919: LD_INT 1
28921: ST_TO_ADDR
// vc_chassis := us_morphling ;
28922: LD_ADDR_OWVAR 37
28926: PUSH
28927: LD_INT 5
28929: ST_TO_ADDR
// vc_engine := engine_siberite ;
28930: LD_ADDR_OWVAR 39
28934: PUSH
28935: LD_INT 3
28937: ST_TO_ADDR
// vc_control := control_computer ;
28938: LD_ADDR_OWVAR 38
28942: PUSH
28943: LD_INT 3
28945: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28946: LD_ADDR_OWVAR 40
28950: PUSH
28951: LD_INT 10
28953: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28954: LD_VAR 0 2
28958: PUSH
28959: LD_INT 1
28961: ARRAY
28962: PPUSH
28963: CALL_OW 310
28967: NOT
28968: IFFALSE 29015
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28970: CALL_OW 45
28974: PPUSH
28975: LD_VAR 0 2
28979: PUSH
28980: LD_INT 1
28982: ARRAY
28983: PPUSH
28984: CALL_OW 250
28988: PPUSH
28989: LD_VAR 0 2
28993: PUSH
28994: LD_INT 1
28996: ARRAY
28997: PPUSH
28998: CALL_OW 251
29002: PPUSH
29003: LD_INT 12
29005: PPUSH
29006: LD_INT 1
29008: PPUSH
29009: CALL_OW 50
29013: GO 29027
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29015: CALL_OW 45
29019: PPUSH
29020: LD_INT 1
29022: PPUSH
29023: CALL_OW 51
// end ;
29027: GO 28901
29029: POP
29030: POP
// end ;
29031: PPOPN 2
29033: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29034: LD_EXP 52
29038: PUSH
29039: LD_EXP 98
29043: AND
29044: IFFALSE 29266
29046: GO 29048
29048: DISABLE
29049: LD_INT 0
29051: PPUSH
29052: PPUSH
29053: PPUSH
29054: PPUSH
29055: PPUSH
29056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29057: LD_ADDR_VAR 0 6
29061: PUSH
29062: LD_INT 22
29064: PUSH
29065: LD_OWVAR 2
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 21
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: LD_INT 23
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: PPUSH
29106: CALL_OW 69
29110: ST_TO_ADDR
// if not tmp then
29111: LD_VAR 0 6
29115: NOT
29116: IFFALSE 29120
// exit ;
29118: GO 29266
// s1 := rand ( 1 , 4 ) ;
29120: LD_ADDR_VAR 0 2
29124: PUSH
29125: LD_INT 1
29127: PPUSH
29128: LD_INT 4
29130: PPUSH
29131: CALL_OW 12
29135: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29136: LD_ADDR_VAR 0 4
29140: PUSH
29141: LD_VAR 0 6
29145: PUSH
29146: LD_INT 1
29148: ARRAY
29149: PPUSH
29150: LD_VAR 0 2
29154: PPUSH
29155: CALL_OW 259
29159: ST_TO_ADDR
// if s1 = 1 then
29160: LD_VAR 0 2
29164: PUSH
29165: LD_INT 1
29167: EQUAL
29168: IFFALSE 29188
// s2 := rand ( 2 , 4 ) else
29170: LD_ADDR_VAR 0 3
29174: PUSH
29175: LD_INT 2
29177: PPUSH
29178: LD_INT 4
29180: PPUSH
29181: CALL_OW 12
29185: ST_TO_ADDR
29186: GO 29196
// s2 := 1 ;
29188: LD_ADDR_VAR 0 3
29192: PUSH
29193: LD_INT 1
29195: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29196: LD_ADDR_VAR 0 5
29200: PUSH
29201: LD_VAR 0 6
29205: PUSH
29206: LD_INT 1
29208: ARRAY
29209: PPUSH
29210: LD_VAR 0 3
29214: PPUSH
29215: CALL_OW 259
29219: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29220: LD_VAR 0 6
29224: PUSH
29225: LD_INT 1
29227: ARRAY
29228: PPUSH
29229: LD_VAR 0 2
29233: PPUSH
29234: LD_VAR 0 5
29238: PPUSH
29239: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29243: LD_VAR 0 6
29247: PUSH
29248: LD_INT 1
29250: ARRAY
29251: PPUSH
29252: LD_VAR 0 3
29256: PPUSH
29257: LD_VAR 0 4
29261: PPUSH
29262: CALL_OW 237
// end ;
29266: PPOPN 6
29268: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29269: LD_EXP 52
29273: PUSH
29274: LD_EXP 99
29278: AND
29279: IFFALSE 29358
29281: GO 29283
29283: DISABLE
29284: LD_INT 0
29286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29287: LD_ADDR_VAR 0 1
29291: PUSH
29292: LD_INT 22
29294: PUSH
29295: LD_OWVAR 2
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 30
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 69
29322: ST_TO_ADDR
// if not tmp then
29323: LD_VAR 0 1
29327: NOT
29328: IFFALSE 29332
// exit ;
29330: GO 29358
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29332: LD_VAR 0 1
29336: PUSH
29337: LD_INT 1
29339: PPUSH
29340: LD_VAR 0 1
29344: PPUSH
29345: CALL_OW 12
29349: ARRAY
29350: PPUSH
29351: LD_INT 1
29353: PPUSH
29354: CALL_OW 234
// end ;
29358: PPOPN 1
29360: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29361: LD_EXP 52
29365: PUSH
29366: LD_EXP 100
29370: AND
29371: IFFALSE 29483
29373: GO 29375
29375: DISABLE
29376: LD_INT 0
29378: PPUSH
29379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29380: LD_ADDR_VAR 0 2
29384: PUSH
29385: LD_INT 22
29387: PUSH
29388: LD_OWVAR 2
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 2
29399: PUSH
29400: LD_INT 30
29402: PUSH
29403: LD_INT 27
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 30
29412: PUSH
29413: LD_INT 26
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 30
29422: PUSH
29423: LD_INT 28
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PPUSH
29440: CALL_OW 69
29444: ST_TO_ADDR
// if not tmp then
29445: LD_VAR 0 2
29449: NOT
29450: IFFALSE 29454
// exit ;
29452: GO 29483
// for i in tmp do
29454: LD_ADDR_VAR 0 1
29458: PUSH
29459: LD_VAR 0 2
29463: PUSH
29464: FOR_IN
29465: IFFALSE 29481
// SetLives ( i , 1 ) ;
29467: LD_VAR 0 1
29471: PPUSH
29472: LD_INT 1
29474: PPUSH
29475: CALL_OW 234
29479: GO 29464
29481: POP
29482: POP
// end ;
29483: PPOPN 2
29485: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29486: LD_EXP 52
29490: PUSH
29491: LD_EXP 101
29495: AND
29496: IFFALSE 29783
29498: GO 29500
29500: DISABLE
29501: LD_INT 0
29503: PPUSH
29504: PPUSH
29505: PPUSH
// begin i := rand ( 1 , 7 ) ;
29506: LD_ADDR_VAR 0 1
29510: PUSH
29511: LD_INT 1
29513: PPUSH
29514: LD_INT 7
29516: PPUSH
29517: CALL_OW 12
29521: ST_TO_ADDR
// case i of 1 :
29522: LD_VAR 0 1
29526: PUSH
29527: LD_INT 1
29529: DOUBLE
29530: EQUAL
29531: IFTRUE 29535
29533: GO 29545
29535: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29536: LD_STRING earthquake(getX(game), 0, 32)
29538: PPUSH
29539: CALL_OW 559
29543: GO 29783
29545: LD_INT 2
29547: DOUBLE
29548: EQUAL
29549: IFTRUE 29553
29551: GO 29567
29553: POP
// begin ToLua ( displayStucuk(); ) ;
29554: LD_STRING displayStucuk();
29556: PPUSH
29557: CALL_OW 559
// ResetFog ;
29561: CALL_OW 335
// end ; 3 :
29565: GO 29783
29567: LD_INT 3
29569: DOUBLE
29570: EQUAL
29571: IFTRUE 29575
29573: GO 29679
29575: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29576: LD_ADDR_VAR 0 2
29580: PUSH
29581: LD_INT 22
29583: PUSH
29584: LD_OWVAR 2
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 25
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PPUSH
29607: CALL_OW 69
29611: ST_TO_ADDR
// if not tmp then
29612: LD_VAR 0 2
29616: NOT
29617: IFFALSE 29621
// exit ;
29619: GO 29783
// un := tmp [ rand ( 1 , tmp ) ] ;
29621: LD_ADDR_VAR 0 3
29625: PUSH
29626: LD_VAR 0 2
29630: PUSH
29631: LD_INT 1
29633: PPUSH
29634: LD_VAR 0 2
29638: PPUSH
29639: CALL_OW 12
29643: ARRAY
29644: ST_TO_ADDR
// if Crawls ( un ) then
29645: LD_VAR 0 3
29649: PPUSH
29650: CALL_OW 318
29654: IFFALSE 29665
// ComWalk ( un ) ;
29656: LD_VAR 0 3
29660: PPUSH
29661: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29665: LD_VAR 0 3
29669: PPUSH
29670: LD_INT 8
29672: PPUSH
29673: CALL_OW 336
// end ; 4 :
29677: GO 29783
29679: LD_INT 4
29681: DOUBLE
29682: EQUAL
29683: IFTRUE 29687
29685: GO 29761
29687: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29688: LD_ADDR_VAR 0 2
29692: PUSH
29693: LD_INT 22
29695: PUSH
29696: LD_OWVAR 2
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 30
29707: PUSH
29708: LD_INT 29
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PPUSH
29719: CALL_OW 69
29723: ST_TO_ADDR
// if not tmp then
29724: LD_VAR 0 2
29728: NOT
29729: IFFALSE 29733
// exit ;
29731: GO 29783
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29733: LD_VAR 0 2
29737: PUSH
29738: LD_INT 1
29740: ARRAY
29741: PPUSH
29742: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29746: LD_VAR 0 2
29750: PUSH
29751: LD_INT 1
29753: ARRAY
29754: PPUSH
29755: CALL_OW 65
// end ; 5 .. 7 :
29759: GO 29783
29761: LD_INT 5
29763: DOUBLE
29764: GREATEREQUAL
29765: IFFALSE 29773
29767: LD_INT 7
29769: DOUBLE
29770: LESSEQUAL
29771: IFTRUE 29775
29773: GO 29782
29775: POP
// StreamSibBomb ; end ;
29776: CALL 26020 0 0
29780: GO 29783
29782: POP
// end ;
29783: PPOPN 3
29785: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29786: LD_EXP 52
29790: PUSH
29791: LD_EXP 102
29795: AND
29796: IFFALSE 29952
29798: GO 29800
29800: DISABLE
29801: LD_INT 0
29803: PPUSH
29804: PPUSH
29805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29806: LD_ADDR_VAR 0 2
29810: PUSH
29811: LD_INT 81
29813: PUSH
29814: LD_OWVAR 2
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 2
29825: PUSH
29826: LD_INT 21
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 21
29838: PUSH
29839: LD_INT 2
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: LIST
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 69
29859: ST_TO_ADDR
// if not tmp then
29860: LD_VAR 0 2
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 29952
// p := 0 ;
29869: LD_ADDR_VAR 0 3
29873: PUSH
29874: LD_INT 0
29876: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29877: LD_INT 35
29879: PPUSH
29880: CALL_OW 67
// p := p + 1 ;
29884: LD_ADDR_VAR 0 3
29888: PUSH
29889: LD_VAR 0 3
29893: PUSH
29894: LD_INT 1
29896: PLUS
29897: ST_TO_ADDR
// for i in tmp do
29898: LD_ADDR_VAR 0 1
29902: PUSH
29903: LD_VAR 0 2
29907: PUSH
29908: FOR_IN
29909: IFFALSE 29940
// if GetLives ( i ) < 1000 then
29911: LD_VAR 0 1
29915: PPUSH
29916: CALL_OW 256
29920: PUSH
29921: LD_INT 1000
29923: LESS
29924: IFFALSE 29938
// SetLives ( i , 1000 ) ;
29926: LD_VAR 0 1
29930: PPUSH
29931: LD_INT 1000
29933: PPUSH
29934: CALL_OW 234
29938: GO 29908
29940: POP
29941: POP
// until p > 20 ;
29942: LD_VAR 0 3
29946: PUSH
29947: LD_INT 20
29949: GREATER
29950: IFFALSE 29877
// end ;
29952: PPOPN 3
29954: END
// every 0 0$1 trigger StreamModeActive and sTime do
29955: LD_EXP 52
29959: PUSH
29960: LD_EXP 103
29964: AND
29965: IFFALSE 30000
29967: GO 29969
29969: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29970: LD_INT 28
29972: PPUSH
29973: LD_OWVAR 2
29977: PPUSH
29978: LD_INT 2
29980: PPUSH
29981: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29985: LD_INT 30
29987: PPUSH
29988: LD_OWVAR 2
29992: PPUSH
29993: LD_INT 2
29995: PPUSH
29996: CALL_OW 322
// end ;
30000: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30001: LD_EXP 52
30005: PUSH
30006: LD_EXP 104
30010: AND
30011: IFFALSE 30132
30013: GO 30015
30015: DISABLE
30016: LD_INT 0
30018: PPUSH
30019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30020: LD_ADDR_VAR 0 2
30024: PUSH
30025: LD_INT 22
30027: PUSH
30028: LD_OWVAR 2
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 21
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: LD_INT 23
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: PPUSH
30069: CALL_OW 69
30073: ST_TO_ADDR
// if not tmp then
30074: LD_VAR 0 2
30078: NOT
30079: IFFALSE 30083
// exit ;
30081: GO 30132
// for i in tmp do
30083: LD_ADDR_VAR 0 1
30087: PUSH
30088: LD_VAR 0 2
30092: PUSH
30093: FOR_IN
30094: IFFALSE 30130
// begin if Crawls ( i ) then
30096: LD_VAR 0 1
30100: PPUSH
30101: CALL_OW 318
30105: IFFALSE 30116
// ComWalk ( i ) ;
30107: LD_VAR 0 1
30111: PPUSH
30112: CALL_OW 138
// SetClass ( i , 2 ) ;
30116: LD_VAR 0 1
30120: PPUSH
30121: LD_INT 2
30123: PPUSH
30124: CALL_OW 336
// end ;
30128: GO 30093
30130: POP
30131: POP
// end ;
30132: PPOPN 2
30134: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30135: LD_EXP 52
30139: PUSH
30140: LD_EXP 105
30144: AND
30145: IFFALSE 30433
30147: GO 30149
30149: DISABLE
30150: LD_INT 0
30152: PPUSH
30153: PPUSH
30154: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30155: LD_OWVAR 2
30159: PPUSH
30160: LD_INT 9
30162: PPUSH
30163: LD_INT 1
30165: PPUSH
30166: LD_INT 1
30168: PPUSH
30169: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30173: LD_INT 9
30175: PPUSH
30176: LD_OWVAR 2
30180: PPUSH
30181: CALL_OW 343
// uc_side := 9 ;
30185: LD_ADDR_OWVAR 20
30189: PUSH
30190: LD_INT 9
30192: ST_TO_ADDR
// uc_nation := 2 ;
30193: LD_ADDR_OWVAR 21
30197: PUSH
30198: LD_INT 2
30200: ST_TO_ADDR
// hc_name := Dark Warrior ;
30201: LD_ADDR_OWVAR 26
30205: PUSH
30206: LD_STRING Dark Warrior
30208: ST_TO_ADDR
// hc_gallery :=  ;
30209: LD_ADDR_OWVAR 33
30213: PUSH
30214: LD_STRING 
30216: ST_TO_ADDR
// hc_noskilllimit := true ;
30217: LD_ADDR_OWVAR 76
30221: PUSH
30222: LD_INT 1
30224: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30225: LD_ADDR_OWVAR 31
30229: PUSH
30230: LD_INT 30
30232: PUSH
30233: LD_INT 30
30235: PUSH
30236: LD_INT 30
30238: PUSH
30239: LD_INT 30
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: ST_TO_ADDR
// un := CreateHuman ;
30248: LD_ADDR_VAR 0 3
30252: PUSH
30253: CALL_OW 44
30257: ST_TO_ADDR
// hc_noskilllimit := false ;
30258: LD_ADDR_OWVAR 76
30262: PUSH
30263: LD_INT 0
30265: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30266: LD_VAR 0 3
30270: PPUSH
30271: LD_INT 1
30273: PPUSH
30274: CALL_OW 51
// ToLua ( playRanger() ) ;
30278: LD_STRING playRanger()
30280: PPUSH
30281: CALL_OW 559
// p := 0 ;
30285: LD_ADDR_VAR 0 2
30289: PUSH
30290: LD_INT 0
30292: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30293: LD_INT 35
30295: PPUSH
30296: CALL_OW 67
// p := p + 1 ;
30300: LD_ADDR_VAR 0 2
30304: PUSH
30305: LD_VAR 0 2
30309: PUSH
30310: LD_INT 1
30312: PLUS
30313: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30314: LD_VAR 0 3
30318: PPUSH
30319: CALL_OW 256
30323: PUSH
30324: LD_INT 1000
30326: LESS
30327: IFFALSE 30341
// SetLives ( un , 1000 ) ;
30329: LD_VAR 0 3
30333: PPUSH
30334: LD_INT 1000
30336: PPUSH
30337: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30341: LD_VAR 0 3
30345: PPUSH
30346: LD_INT 81
30348: PUSH
30349: LD_OWVAR 2
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 91
30360: PUSH
30361: LD_VAR 0 3
30365: PUSH
30366: LD_INT 30
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: LIST
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PPUSH
30378: CALL_OW 69
30382: PPUSH
30383: LD_VAR 0 3
30387: PPUSH
30388: CALL_OW 74
30392: PPUSH
30393: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30397: LD_VAR 0 2
30401: PUSH
30402: LD_INT 80
30404: GREATER
30405: PUSH
30406: LD_VAR 0 3
30410: PPUSH
30411: CALL_OW 301
30415: OR
30416: IFFALSE 30293
// if un then
30418: LD_VAR 0 3
30422: IFFALSE 30433
// RemoveUnit ( un ) ;
30424: LD_VAR 0 3
30428: PPUSH
30429: CALL_OW 64
// end ;
30433: PPOPN 3
30435: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30436: LD_EXP 106
30440: IFFALSE 30556
30442: GO 30444
30444: DISABLE
30445: LD_INT 0
30447: PPUSH
30448: PPUSH
30449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30450: LD_ADDR_VAR 0 2
30454: PUSH
30455: LD_INT 81
30457: PUSH
30458: LD_OWVAR 2
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 21
30469: PUSH
30470: LD_INT 1
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PPUSH
30481: CALL_OW 69
30485: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30486: LD_STRING playComputer()
30488: PPUSH
30489: CALL_OW 559
// if not tmp then
30493: LD_VAR 0 2
30497: NOT
30498: IFFALSE 30502
// exit ;
30500: GO 30556
// for i in tmp do
30502: LD_ADDR_VAR 0 1
30506: PUSH
30507: LD_VAR 0 2
30511: PUSH
30512: FOR_IN
30513: IFFALSE 30554
// for j := 1 to 4 do
30515: LD_ADDR_VAR 0 3
30519: PUSH
30520: DOUBLE
30521: LD_INT 1
30523: DEC
30524: ST_TO_ADDR
30525: LD_INT 4
30527: PUSH
30528: FOR_TO
30529: IFFALSE 30550
// SetSkill ( i , j , 10 ) ;
30531: LD_VAR 0 1
30535: PPUSH
30536: LD_VAR 0 3
30540: PPUSH
30541: LD_INT 10
30543: PPUSH
30544: CALL_OW 237
30548: GO 30528
30550: POP
30551: POP
30552: GO 30512
30554: POP
30555: POP
// end ;
30556: PPOPN 3
30558: END
// every 0 0$1 trigger s30 do var i , tmp ;
30559: LD_EXP 107
30563: IFFALSE 30632
30565: GO 30567
30567: DISABLE
30568: LD_INT 0
30570: PPUSH
30571: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30572: LD_ADDR_VAR 0 2
30576: PUSH
30577: LD_INT 22
30579: PUSH
30580: LD_OWVAR 2
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PPUSH
30589: CALL_OW 69
30593: ST_TO_ADDR
// if not tmp then
30594: LD_VAR 0 2
30598: NOT
30599: IFFALSE 30603
// exit ;
30601: GO 30632
// for i in tmp do
30603: LD_ADDR_VAR 0 1
30607: PUSH
30608: LD_VAR 0 2
30612: PUSH
30613: FOR_IN
30614: IFFALSE 30630
// SetLives ( i , 300 ) ;
30616: LD_VAR 0 1
30620: PPUSH
30621: LD_INT 300
30623: PPUSH
30624: CALL_OW 234
30628: GO 30613
30630: POP
30631: POP
// end ;
30632: PPOPN 2
30634: END
// every 0 0$1 trigger s60 do var i , tmp ;
30635: LD_EXP 108
30639: IFFALSE 30708
30641: GO 30643
30643: DISABLE
30644: LD_INT 0
30646: PPUSH
30647: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30648: LD_ADDR_VAR 0 2
30652: PUSH
30653: LD_INT 22
30655: PUSH
30656: LD_OWVAR 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PPUSH
30665: CALL_OW 69
30669: ST_TO_ADDR
// if not tmp then
30670: LD_VAR 0 2
30674: NOT
30675: IFFALSE 30679
// exit ;
30677: GO 30708
// for i in tmp do
30679: LD_ADDR_VAR 0 1
30683: PUSH
30684: LD_VAR 0 2
30688: PUSH
30689: FOR_IN
30690: IFFALSE 30706
// SetLives ( i , 600 ) ;
30692: LD_VAR 0 1
30696: PPUSH
30697: LD_INT 600
30699: PPUSH
30700: CALL_OW 234
30704: GO 30689
30706: POP
30707: POP
// end ;
30708: PPOPN 2
30710: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30711: LD_INT 0
30713: PPUSH
// case cmd of 301 :
30714: LD_VAR 0 1
30718: PUSH
30719: LD_INT 301
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30759
30727: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30728: LD_VAR 0 6
30732: PPUSH
30733: LD_VAR 0 7
30737: PPUSH
30738: LD_VAR 0 8
30742: PPUSH
30743: LD_VAR 0 4
30747: PPUSH
30748: LD_VAR 0 5
30752: PPUSH
30753: CALL 31960 0 5
30757: GO 30880
30759: LD_INT 302
30761: DOUBLE
30762: EQUAL
30763: IFTRUE 30767
30765: GO 30804
30767: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30768: LD_VAR 0 6
30772: PPUSH
30773: LD_VAR 0 7
30777: PPUSH
30778: LD_VAR 0 8
30782: PPUSH
30783: LD_VAR 0 9
30787: PPUSH
30788: LD_VAR 0 4
30792: PPUSH
30793: LD_VAR 0 5
30797: PPUSH
30798: CALL 32051 0 6
30802: GO 30880
30804: LD_INT 303
30806: DOUBLE
30807: EQUAL
30808: IFTRUE 30812
30810: GO 30849
30812: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30813: LD_VAR 0 6
30817: PPUSH
30818: LD_VAR 0 7
30822: PPUSH
30823: LD_VAR 0 8
30827: PPUSH
30828: LD_VAR 0 9
30832: PPUSH
30833: LD_VAR 0 4
30837: PPUSH
30838: LD_VAR 0 5
30842: PPUSH
30843: CALL 30885 0 6
30847: GO 30880
30849: LD_INT 304
30851: DOUBLE
30852: EQUAL
30853: IFTRUE 30857
30855: GO 30879
30857: POP
// hHackTeleport ( unit , x , y ) ; end ;
30858: LD_VAR 0 2
30862: PPUSH
30863: LD_VAR 0 4
30867: PPUSH
30868: LD_VAR 0 5
30872: PPUSH
30873: CALL 32644 0 3
30877: GO 30880
30879: POP
// end ;
30880: LD_VAR 0 12
30884: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30885: LD_INT 0
30887: PPUSH
30888: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30889: LD_VAR 0 1
30893: PUSH
30894: LD_INT 1
30896: LESS
30897: PUSH
30898: LD_VAR 0 1
30902: PUSH
30903: LD_INT 3
30905: GREATER
30906: OR
30907: PUSH
30908: LD_VAR 0 5
30912: PPUSH
30913: LD_VAR 0 6
30917: PPUSH
30918: CALL_OW 428
30922: OR
30923: IFFALSE 30927
// exit ;
30925: GO 31647
// uc_side := your_side ;
30927: LD_ADDR_OWVAR 20
30931: PUSH
30932: LD_OWVAR 2
30936: ST_TO_ADDR
// uc_nation := nation ;
30937: LD_ADDR_OWVAR 21
30941: PUSH
30942: LD_VAR 0 1
30946: ST_TO_ADDR
// bc_level = 1 ;
30947: LD_ADDR_OWVAR 43
30951: PUSH
30952: LD_INT 1
30954: ST_TO_ADDR
// case btype of 1 :
30955: LD_VAR 0 2
30959: PUSH
30960: LD_INT 1
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 30979
30968: POP
// bc_type := b_depot ; 2 :
30969: LD_ADDR_OWVAR 42
30973: PUSH
30974: LD_INT 0
30976: ST_TO_ADDR
30977: GO 31591
30979: LD_INT 2
30981: DOUBLE
30982: EQUAL
30983: IFTRUE 30987
30985: GO 30998
30987: POP
// bc_type := b_warehouse ; 3 :
30988: LD_ADDR_OWVAR 42
30992: PUSH
30993: LD_INT 1
30995: ST_TO_ADDR
30996: GO 31591
30998: LD_INT 3
31000: DOUBLE
31001: EQUAL
31002: IFTRUE 31006
31004: GO 31017
31006: POP
// bc_type := b_lab ; 4 .. 9 :
31007: LD_ADDR_OWVAR 42
31011: PUSH
31012: LD_INT 6
31014: ST_TO_ADDR
31015: GO 31591
31017: LD_INT 4
31019: DOUBLE
31020: GREATEREQUAL
31021: IFFALSE 31029
31023: LD_INT 9
31025: DOUBLE
31026: LESSEQUAL
31027: IFTRUE 31031
31029: GO 31083
31031: POP
// begin bc_type := b_lab_half ;
31032: LD_ADDR_OWVAR 42
31036: PUSH
31037: LD_INT 7
31039: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31040: LD_ADDR_OWVAR 44
31044: PUSH
31045: LD_INT 10
31047: PUSH
31048: LD_INT 11
31050: PUSH
31051: LD_INT 12
31053: PUSH
31054: LD_INT 15
31056: PUSH
31057: LD_INT 14
31059: PUSH
31060: LD_INT 13
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: PUSH
31071: LD_VAR 0 2
31075: PUSH
31076: LD_INT 3
31078: MINUS
31079: ARRAY
31080: ST_TO_ADDR
// end ; 10 .. 13 :
31081: GO 31591
31083: LD_INT 10
31085: DOUBLE
31086: GREATEREQUAL
31087: IFFALSE 31095
31089: LD_INT 13
31091: DOUBLE
31092: LESSEQUAL
31093: IFTRUE 31097
31095: GO 31174
31097: POP
// begin bc_type := b_lab_full ;
31098: LD_ADDR_OWVAR 42
31102: PUSH
31103: LD_INT 8
31105: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31106: LD_ADDR_OWVAR 44
31110: PUSH
31111: LD_INT 10
31113: PUSH
31114: LD_INT 12
31116: PUSH
31117: LD_INT 14
31119: PUSH
31120: LD_INT 13
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: PUSH
31129: LD_VAR 0 2
31133: PUSH
31134: LD_INT 9
31136: MINUS
31137: ARRAY
31138: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31139: LD_ADDR_OWVAR 45
31143: PUSH
31144: LD_INT 11
31146: PUSH
31147: LD_INT 15
31149: PUSH
31150: LD_INT 12
31152: PUSH
31153: LD_INT 15
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: PUSH
31162: LD_VAR 0 2
31166: PUSH
31167: LD_INT 9
31169: MINUS
31170: ARRAY
31171: ST_TO_ADDR
// end ; 14 :
31172: GO 31591
31174: LD_INT 14
31176: DOUBLE
31177: EQUAL
31178: IFTRUE 31182
31180: GO 31193
31182: POP
// bc_type := b_workshop ; 15 :
31183: LD_ADDR_OWVAR 42
31187: PUSH
31188: LD_INT 2
31190: ST_TO_ADDR
31191: GO 31591
31193: LD_INT 15
31195: DOUBLE
31196: EQUAL
31197: IFTRUE 31201
31199: GO 31212
31201: POP
// bc_type := b_factory ; 16 :
31202: LD_ADDR_OWVAR 42
31206: PUSH
31207: LD_INT 3
31209: ST_TO_ADDR
31210: GO 31591
31212: LD_INT 16
31214: DOUBLE
31215: EQUAL
31216: IFTRUE 31220
31218: GO 31231
31220: POP
// bc_type := b_ext_gun ; 17 :
31221: LD_ADDR_OWVAR 42
31225: PUSH
31226: LD_INT 17
31228: ST_TO_ADDR
31229: GO 31591
31231: LD_INT 17
31233: DOUBLE
31234: EQUAL
31235: IFTRUE 31239
31237: GO 31267
31239: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31240: LD_ADDR_OWVAR 42
31244: PUSH
31245: LD_INT 19
31247: PUSH
31248: LD_INT 23
31250: PUSH
31251: LD_INT 19
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: LIST
31258: PUSH
31259: LD_VAR 0 1
31263: ARRAY
31264: ST_TO_ADDR
31265: GO 31591
31267: LD_INT 18
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31286
31275: POP
// bc_type := b_ext_radar ; 19 :
31276: LD_ADDR_OWVAR 42
31280: PUSH
31281: LD_INT 20
31283: ST_TO_ADDR
31284: GO 31591
31286: LD_INT 19
31288: DOUBLE
31289: EQUAL
31290: IFTRUE 31294
31292: GO 31305
31294: POP
// bc_type := b_ext_radio ; 20 :
31295: LD_ADDR_OWVAR 42
31299: PUSH
31300: LD_INT 22
31302: ST_TO_ADDR
31303: GO 31591
31305: LD_INT 20
31307: DOUBLE
31308: EQUAL
31309: IFTRUE 31313
31311: GO 31324
31313: POP
// bc_type := b_ext_siberium ; 21 :
31314: LD_ADDR_OWVAR 42
31318: PUSH
31319: LD_INT 21
31321: ST_TO_ADDR
31322: GO 31591
31324: LD_INT 21
31326: DOUBLE
31327: EQUAL
31328: IFTRUE 31332
31330: GO 31343
31332: POP
// bc_type := b_ext_computer ; 22 :
31333: LD_ADDR_OWVAR 42
31337: PUSH
31338: LD_INT 24
31340: ST_TO_ADDR
31341: GO 31591
31343: LD_INT 22
31345: DOUBLE
31346: EQUAL
31347: IFTRUE 31351
31349: GO 31362
31351: POP
// bc_type := b_ext_track ; 23 :
31352: LD_ADDR_OWVAR 42
31356: PUSH
31357: LD_INT 16
31359: ST_TO_ADDR
31360: GO 31591
31362: LD_INT 23
31364: DOUBLE
31365: EQUAL
31366: IFTRUE 31370
31368: GO 31381
31370: POP
// bc_type := b_ext_laser ; 24 :
31371: LD_ADDR_OWVAR 42
31375: PUSH
31376: LD_INT 25
31378: ST_TO_ADDR
31379: GO 31591
31381: LD_INT 24
31383: DOUBLE
31384: EQUAL
31385: IFTRUE 31389
31387: GO 31400
31389: POP
// bc_type := b_control_tower ; 25 :
31390: LD_ADDR_OWVAR 42
31394: PUSH
31395: LD_INT 36
31397: ST_TO_ADDR
31398: GO 31591
31400: LD_INT 25
31402: DOUBLE
31403: EQUAL
31404: IFTRUE 31408
31406: GO 31419
31408: POP
// bc_type := b_breastwork ; 26 :
31409: LD_ADDR_OWVAR 42
31413: PUSH
31414: LD_INT 31
31416: ST_TO_ADDR
31417: GO 31591
31419: LD_INT 26
31421: DOUBLE
31422: EQUAL
31423: IFTRUE 31427
31425: GO 31438
31427: POP
// bc_type := b_bunker ; 27 :
31428: LD_ADDR_OWVAR 42
31432: PUSH
31433: LD_INT 32
31435: ST_TO_ADDR
31436: GO 31591
31438: LD_INT 27
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31446
31444: GO 31457
31446: POP
// bc_type := b_turret ; 28 :
31447: LD_ADDR_OWVAR 42
31451: PUSH
31452: LD_INT 33
31454: ST_TO_ADDR
31455: GO 31591
31457: LD_INT 28
31459: DOUBLE
31460: EQUAL
31461: IFTRUE 31465
31463: GO 31476
31465: POP
// bc_type := b_armoury ; 29 :
31466: LD_ADDR_OWVAR 42
31470: PUSH
31471: LD_INT 4
31473: ST_TO_ADDR
31474: GO 31591
31476: LD_INT 29
31478: DOUBLE
31479: EQUAL
31480: IFTRUE 31484
31482: GO 31495
31484: POP
// bc_type := b_barracks ; 30 :
31485: LD_ADDR_OWVAR 42
31489: PUSH
31490: LD_INT 5
31492: ST_TO_ADDR
31493: GO 31591
31495: LD_INT 30
31497: DOUBLE
31498: EQUAL
31499: IFTRUE 31503
31501: GO 31514
31503: POP
// bc_type := b_solar_power ; 31 :
31504: LD_ADDR_OWVAR 42
31508: PUSH
31509: LD_INT 27
31511: ST_TO_ADDR
31512: GO 31591
31514: LD_INT 31
31516: DOUBLE
31517: EQUAL
31518: IFTRUE 31522
31520: GO 31533
31522: POP
// bc_type := b_oil_power ; 32 :
31523: LD_ADDR_OWVAR 42
31527: PUSH
31528: LD_INT 26
31530: ST_TO_ADDR
31531: GO 31591
31533: LD_INT 32
31535: DOUBLE
31536: EQUAL
31537: IFTRUE 31541
31539: GO 31552
31541: POP
// bc_type := b_siberite_power ; 33 :
31542: LD_ADDR_OWVAR 42
31546: PUSH
31547: LD_INT 28
31549: ST_TO_ADDR
31550: GO 31591
31552: LD_INT 33
31554: DOUBLE
31555: EQUAL
31556: IFTRUE 31560
31558: GO 31571
31560: POP
// bc_type := b_oil_mine ; 34 :
31561: LD_ADDR_OWVAR 42
31565: PUSH
31566: LD_INT 29
31568: ST_TO_ADDR
31569: GO 31591
31571: LD_INT 34
31573: DOUBLE
31574: EQUAL
31575: IFTRUE 31579
31577: GO 31590
31579: POP
// bc_type := b_siberite_mine ; end ;
31580: LD_ADDR_OWVAR 42
31584: PUSH
31585: LD_INT 30
31587: ST_TO_ADDR
31588: GO 31591
31590: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31591: LD_ADDR_VAR 0 8
31595: PUSH
31596: LD_VAR 0 5
31600: PPUSH
31601: LD_VAR 0 6
31605: PPUSH
31606: LD_VAR 0 3
31610: PPUSH
31611: CALL_OW 47
31615: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31616: LD_OWVAR 42
31620: PUSH
31621: LD_INT 32
31623: PUSH
31624: LD_INT 33
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: IN
31631: IFFALSE 31647
// PlaceWeaponTurret ( b , weapon ) ;
31633: LD_VAR 0 8
31637: PPUSH
31638: LD_VAR 0 4
31642: PPUSH
31643: CALL_OW 431
// end ;
31647: LD_VAR 0 7
31651: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31652: LD_INT 0
31654: PPUSH
31655: PPUSH
31656: PPUSH
31657: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31658: LD_ADDR_VAR 0 4
31662: PUSH
31663: LD_INT 22
31665: PUSH
31666: LD_OWVAR 2
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 30
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 30
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PPUSH
31707: CALL_OW 69
31711: ST_TO_ADDR
// if not tmp then
31712: LD_VAR 0 4
31716: NOT
31717: IFFALSE 31721
// exit ;
31719: GO 31780
// for i in tmp do
31721: LD_ADDR_VAR 0 2
31725: PUSH
31726: LD_VAR 0 4
31730: PUSH
31731: FOR_IN
31732: IFFALSE 31778
// for j = 1 to 3 do
31734: LD_ADDR_VAR 0 3
31738: PUSH
31739: DOUBLE
31740: LD_INT 1
31742: DEC
31743: ST_TO_ADDR
31744: LD_INT 3
31746: PUSH
31747: FOR_TO
31748: IFFALSE 31774
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31750: LD_VAR 0 2
31754: PPUSH
31755: CALL_OW 274
31759: PPUSH
31760: LD_VAR 0 3
31764: PPUSH
31765: LD_INT 99999
31767: PPUSH
31768: CALL_OW 277
31772: GO 31747
31774: POP
31775: POP
31776: GO 31731
31778: POP
31779: POP
// end ;
31780: LD_VAR 0 1
31784: RET
// export function hHackSetLevel10 ; var i , j ; begin
31785: LD_INT 0
31787: PPUSH
31788: PPUSH
31789: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31790: LD_ADDR_VAR 0 2
31794: PUSH
31795: LD_INT 21
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PPUSH
31805: CALL_OW 69
31809: PUSH
31810: FOR_IN
31811: IFFALSE 31863
// if IsSelected ( i ) then
31813: LD_VAR 0 2
31817: PPUSH
31818: CALL_OW 306
31822: IFFALSE 31861
// begin for j := 1 to 4 do
31824: LD_ADDR_VAR 0 3
31828: PUSH
31829: DOUBLE
31830: LD_INT 1
31832: DEC
31833: ST_TO_ADDR
31834: LD_INT 4
31836: PUSH
31837: FOR_TO
31838: IFFALSE 31859
// SetSkill ( i , j , 10 ) ;
31840: LD_VAR 0 2
31844: PPUSH
31845: LD_VAR 0 3
31849: PPUSH
31850: LD_INT 10
31852: PPUSH
31853: CALL_OW 237
31857: GO 31837
31859: POP
31860: POP
// end ;
31861: GO 31810
31863: POP
31864: POP
// end ;
31865: LD_VAR 0 1
31869: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31870: LD_INT 0
31872: PPUSH
31873: PPUSH
31874: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31875: LD_ADDR_VAR 0 2
31879: PUSH
31880: LD_INT 22
31882: PUSH
31883: LD_OWVAR 2
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 21
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PPUSH
31906: CALL_OW 69
31910: PUSH
31911: FOR_IN
31912: IFFALSE 31953
// begin for j := 1 to 4 do
31914: LD_ADDR_VAR 0 3
31918: PUSH
31919: DOUBLE
31920: LD_INT 1
31922: DEC
31923: ST_TO_ADDR
31924: LD_INT 4
31926: PUSH
31927: FOR_TO
31928: IFFALSE 31949
// SetSkill ( i , j , 10 ) ;
31930: LD_VAR 0 2
31934: PPUSH
31935: LD_VAR 0 3
31939: PPUSH
31940: LD_INT 10
31942: PPUSH
31943: CALL_OW 237
31947: GO 31927
31949: POP
31950: POP
// end ;
31951: GO 31911
31953: POP
31954: POP
// end ;
31955: LD_VAR 0 1
31959: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31960: LD_INT 0
31962: PPUSH
// uc_side := your_side ;
31963: LD_ADDR_OWVAR 20
31967: PUSH
31968: LD_OWVAR 2
31972: ST_TO_ADDR
// uc_nation := nation ;
31973: LD_ADDR_OWVAR 21
31977: PUSH
31978: LD_VAR 0 1
31982: ST_TO_ADDR
// InitHc ;
31983: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31987: LD_INT 0
31989: PPUSH
31990: LD_VAR 0 2
31994: PPUSH
31995: LD_VAR 0 3
31999: PPUSH
32000: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32004: LD_VAR 0 4
32008: PPUSH
32009: LD_VAR 0 5
32013: PPUSH
32014: CALL_OW 428
32018: PUSH
32019: LD_INT 0
32021: EQUAL
32022: IFFALSE 32046
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32024: CALL_OW 44
32028: PPUSH
32029: LD_VAR 0 4
32033: PPUSH
32034: LD_VAR 0 5
32038: PPUSH
32039: LD_INT 1
32041: PPUSH
32042: CALL_OW 48
// end ;
32046: LD_VAR 0 6
32050: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32051: LD_INT 0
32053: PPUSH
32054: PPUSH
// uc_side := your_side ;
32055: LD_ADDR_OWVAR 20
32059: PUSH
32060: LD_OWVAR 2
32064: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32065: LD_VAR 0 1
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 3
32078: PUSH
32079: LD_INT 4
32081: PUSH
32082: LD_INT 5
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: IN
32092: IFFALSE 32104
// uc_nation := nation_american else
32094: LD_ADDR_OWVAR 21
32098: PUSH
32099: LD_INT 1
32101: ST_TO_ADDR
32102: GO 32147
// if chassis in [ 11 , 12 , 13 , 14 ] then
32104: LD_VAR 0 1
32108: PUSH
32109: LD_INT 11
32111: PUSH
32112: LD_INT 12
32114: PUSH
32115: LD_INT 13
32117: PUSH
32118: LD_INT 14
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: IN
32127: IFFALSE 32139
// uc_nation := nation_arabian else
32129: LD_ADDR_OWVAR 21
32133: PUSH
32134: LD_INT 2
32136: ST_TO_ADDR
32137: GO 32147
// uc_nation := nation_russian ;
32139: LD_ADDR_OWVAR 21
32143: PUSH
32144: LD_INT 3
32146: ST_TO_ADDR
// vc_chassis := chassis ;
32147: LD_ADDR_OWVAR 37
32151: PUSH
32152: LD_VAR 0 1
32156: ST_TO_ADDR
// vc_engine := engine ;
32157: LD_ADDR_OWVAR 39
32161: PUSH
32162: LD_VAR 0 2
32166: ST_TO_ADDR
// vc_control := control ;
32167: LD_ADDR_OWVAR 38
32171: PUSH
32172: LD_VAR 0 3
32176: ST_TO_ADDR
// vc_weapon := weapon ;
32177: LD_ADDR_OWVAR 40
32181: PUSH
32182: LD_VAR 0 4
32186: ST_TO_ADDR
// un := CreateVehicle ;
32187: LD_ADDR_VAR 0 8
32191: PUSH
32192: CALL_OW 45
32196: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32197: LD_VAR 0 8
32201: PPUSH
32202: LD_INT 0
32204: PPUSH
32205: LD_INT 5
32207: PPUSH
32208: CALL_OW 12
32212: PPUSH
32213: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32217: LD_VAR 0 8
32221: PPUSH
32222: LD_VAR 0 5
32226: PPUSH
32227: LD_VAR 0 6
32231: PPUSH
32232: LD_INT 1
32234: PPUSH
32235: CALL_OW 48
// end ;
32239: LD_VAR 0 7
32243: RET
// export hInvincible ; every 1 do
32244: GO 32246
32246: DISABLE
// hInvincible := [ ] ;
32247: LD_ADDR_EXP 109
32251: PUSH
32252: EMPTY
32253: ST_TO_ADDR
32254: END
// every 10 do var i ;
32255: GO 32257
32257: DISABLE
32258: LD_INT 0
32260: PPUSH
// begin enable ;
32261: ENABLE
// if not hInvincible then
32262: LD_EXP 109
32266: NOT
32267: IFFALSE 32271
// exit ;
32269: GO 32315
// for i in hInvincible do
32271: LD_ADDR_VAR 0 1
32275: PUSH
32276: LD_EXP 109
32280: PUSH
32281: FOR_IN
32282: IFFALSE 32313
// if GetLives ( i ) < 1000 then
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL_OW 256
32293: PUSH
32294: LD_INT 1000
32296: LESS
32297: IFFALSE 32311
// SetLives ( i , 1000 ) ;
32299: LD_VAR 0 1
32303: PPUSH
32304: LD_INT 1000
32306: PPUSH
32307: CALL_OW 234
32311: GO 32281
32313: POP
32314: POP
// end ;
32315: PPOPN 1
32317: END
// export function hHackInvincible ; var i ; begin
32318: LD_INT 0
32320: PPUSH
32321: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32322: LD_ADDR_VAR 0 2
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: LD_INT 21
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 21
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: LIST
32354: PPUSH
32355: CALL_OW 69
32359: PUSH
32360: FOR_IN
32361: IFFALSE 32422
// if IsSelected ( i ) then
32363: LD_VAR 0 2
32367: PPUSH
32368: CALL_OW 306
32372: IFFALSE 32420
// begin if i in hInvincible then
32374: LD_VAR 0 2
32378: PUSH
32379: LD_EXP 109
32383: IN
32384: IFFALSE 32404
// hInvincible := hInvincible diff i else
32386: LD_ADDR_EXP 109
32390: PUSH
32391: LD_EXP 109
32395: PUSH
32396: LD_VAR 0 2
32400: DIFF
32401: ST_TO_ADDR
32402: GO 32420
// hInvincible := hInvincible union i ;
32404: LD_ADDR_EXP 109
32408: PUSH
32409: LD_EXP 109
32413: PUSH
32414: LD_VAR 0 2
32418: UNION
32419: ST_TO_ADDR
// end ;
32420: GO 32360
32422: POP
32423: POP
// end ;
32424: LD_VAR 0 1
32428: RET
// export function hHackInvisible ; var i , j ; begin
32429: LD_INT 0
32431: PPUSH
32432: PPUSH
32433: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32434: LD_ADDR_VAR 0 2
32438: PUSH
32439: LD_INT 21
32441: PUSH
32442: LD_INT 1
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PPUSH
32449: CALL_OW 69
32453: PUSH
32454: FOR_IN
32455: IFFALSE 32479
// if IsSelected ( i ) then
32457: LD_VAR 0 2
32461: PPUSH
32462: CALL_OW 306
32466: IFFALSE 32477
// ComForceInvisible ( i ) ;
32468: LD_VAR 0 2
32472: PPUSH
32473: CALL_OW 496
32477: GO 32454
32479: POP
32480: POP
// end ;
32481: LD_VAR 0 1
32485: RET
// export function hHackChangeYourSide ; begin
32486: LD_INT 0
32488: PPUSH
// if your_side = 8 then
32489: LD_OWVAR 2
32493: PUSH
32494: LD_INT 8
32496: EQUAL
32497: IFFALSE 32509
// your_side := 0 else
32499: LD_ADDR_OWVAR 2
32503: PUSH
32504: LD_INT 0
32506: ST_TO_ADDR
32507: GO 32523
// your_side := your_side + 1 ;
32509: LD_ADDR_OWVAR 2
32513: PUSH
32514: LD_OWVAR 2
32518: PUSH
32519: LD_INT 1
32521: PLUS
32522: ST_TO_ADDR
// end ;
32523: LD_VAR 0 1
32527: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32528: LD_INT 0
32530: PPUSH
32531: PPUSH
32532: PPUSH
// for i in all_units do
32533: LD_ADDR_VAR 0 2
32537: PUSH
32538: LD_OWVAR 3
32542: PUSH
32543: FOR_IN
32544: IFFALSE 32622
// if IsSelected ( i ) then
32546: LD_VAR 0 2
32550: PPUSH
32551: CALL_OW 306
32555: IFFALSE 32620
// begin j := GetSide ( i ) ;
32557: LD_ADDR_VAR 0 3
32561: PUSH
32562: LD_VAR 0 2
32566: PPUSH
32567: CALL_OW 255
32571: ST_TO_ADDR
// if j = 8 then
32572: LD_VAR 0 3
32576: PUSH
32577: LD_INT 8
32579: EQUAL
32580: IFFALSE 32592
// j := 0 else
32582: LD_ADDR_VAR 0 3
32586: PUSH
32587: LD_INT 0
32589: ST_TO_ADDR
32590: GO 32606
// j := j + 1 ;
32592: LD_ADDR_VAR 0 3
32596: PUSH
32597: LD_VAR 0 3
32601: PUSH
32602: LD_INT 1
32604: PLUS
32605: ST_TO_ADDR
// SetSide ( i , j ) ;
32606: LD_VAR 0 2
32610: PPUSH
32611: LD_VAR 0 3
32615: PPUSH
32616: CALL_OW 235
// end ;
32620: GO 32543
32622: POP
32623: POP
// end ;
32624: LD_VAR 0 1
32628: RET
// export function hHackFog ; begin
32629: LD_INT 0
32631: PPUSH
// FogOff ( true ) ;
32632: LD_INT 1
32634: PPUSH
32635: CALL_OW 344
// end ;
32639: LD_VAR 0 1
32643: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32644: LD_INT 0
32646: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32647: LD_VAR 0 1
32651: PPUSH
32652: LD_VAR 0 2
32656: PPUSH
32657: LD_VAR 0 3
32661: PPUSH
32662: LD_INT 1
32664: PPUSH
32665: LD_INT 1
32667: PPUSH
32668: CALL_OW 483
// CenterOnXY ( x , y ) ;
32672: LD_VAR 0 2
32676: PPUSH
32677: LD_VAR 0 3
32681: PPUSH
32682: CALL_OW 84
// end ; end_of_file
32686: LD_VAR 0 4
32690: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32691: LD_INT 0
32693: PPUSH
32694: PPUSH
32695: PPUSH
32696: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32697: LD_VAR 0 1
32701: PPUSH
32702: CALL_OW 264
32706: PUSH
32707: LD_EXP 36
32711: EQUAL
32712: IFFALSE 32784
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32714: LD_INT 68
32716: PPUSH
32717: LD_VAR 0 1
32721: PPUSH
32722: CALL_OW 255
32726: PPUSH
32727: CALL_OW 321
32731: PUSH
32732: LD_INT 2
32734: EQUAL
32735: IFFALSE 32747
// eff := 70 else
32737: LD_ADDR_VAR 0 4
32741: PUSH
32742: LD_INT 70
32744: ST_TO_ADDR
32745: GO 32755
// eff := 30 ;
32747: LD_ADDR_VAR 0 4
32751: PUSH
32752: LD_INT 30
32754: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32755: LD_VAR 0 1
32759: PPUSH
32760: CALL_OW 250
32764: PPUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: CALL_OW 251
32774: PPUSH
32775: LD_VAR 0 4
32779: PPUSH
32780: CALL_OW 495
// end ; end ;
32784: LD_VAR 0 2
32788: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32789: LD_INT 0
32791: PPUSH
// end ;
32792: LD_VAR 0 4
32796: RET
// export function SOS_Command ( cmd ) ; begin
32797: LD_INT 0
32799: PPUSH
// end ;
32800: LD_VAR 0 2
32804: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32805: LD_INT 0
32807: PPUSH
// end ;
32808: LD_VAR 0 6
32812: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32813: LD_INT 0
32815: PPUSH
32816: PPUSH
// if not vehicle or not factory then
32817: LD_VAR 0 1
32821: NOT
32822: PUSH
32823: LD_VAR 0 2
32827: NOT
32828: OR
32829: IFFALSE 32833
// exit ;
32831: GO 33064
// if factoryWaypoints >= factory then
32833: LD_EXP 110
32837: PUSH
32838: LD_VAR 0 2
32842: GREATEREQUAL
32843: IFFALSE 33064
// if factoryWaypoints [ factory ] then
32845: LD_EXP 110
32849: PUSH
32850: LD_VAR 0 2
32854: ARRAY
32855: IFFALSE 33064
// begin if GetControl ( vehicle ) = control_manual then
32857: LD_VAR 0 1
32861: PPUSH
32862: CALL_OW 263
32866: PUSH
32867: LD_INT 1
32869: EQUAL
32870: IFFALSE 32951
// begin driver := IsDrivenBy ( vehicle ) ;
32872: LD_ADDR_VAR 0 4
32876: PUSH
32877: LD_VAR 0 1
32881: PPUSH
32882: CALL_OW 311
32886: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32887: LD_VAR 0 4
32891: PPUSH
32892: LD_EXP 110
32896: PUSH
32897: LD_VAR 0 2
32901: ARRAY
32902: PUSH
32903: LD_INT 3
32905: ARRAY
32906: PPUSH
32907: LD_EXP 110
32911: PUSH
32912: LD_VAR 0 2
32916: ARRAY
32917: PUSH
32918: LD_INT 4
32920: ARRAY
32921: PPUSH
32922: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32926: LD_VAR 0 4
32930: PPUSH
32931: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32935: LD_VAR 0 4
32939: PPUSH
32940: LD_VAR 0 2
32944: PPUSH
32945: CALL_OW 180
// end else
32949: GO 33064
// if GetControl ( vehicle ) = control_remote then
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 263
32960: PUSH
32961: LD_INT 2
32963: EQUAL
32964: IFFALSE 33025
// begin wait ( 0 0$2 ) ;
32966: LD_INT 70
32968: PPUSH
32969: CALL_OW 67
// if Connect ( vehicle ) then
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL 45288 0 1
32982: IFFALSE 33023
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32984: LD_VAR 0 1
32988: PPUSH
32989: LD_EXP 110
32993: PUSH
32994: LD_VAR 0 2
32998: ARRAY
32999: PUSH
33000: LD_INT 3
33002: ARRAY
33003: PPUSH
33004: LD_EXP 110
33008: PUSH
33009: LD_VAR 0 2
33013: ARRAY
33014: PUSH
33015: LD_INT 4
33017: ARRAY
33018: PPUSH
33019: CALL_OW 171
// end else
33023: GO 33064
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33025: LD_VAR 0 1
33029: PPUSH
33030: LD_EXP 110
33034: PUSH
33035: LD_VAR 0 2
33039: ARRAY
33040: PUSH
33041: LD_INT 3
33043: ARRAY
33044: PPUSH
33045: LD_EXP 110
33049: PUSH
33050: LD_VAR 0 2
33054: ARRAY
33055: PUSH
33056: LD_INT 4
33058: ARRAY
33059: PPUSH
33060: CALL_OW 171
// end ; end ;
33064: LD_VAR 0 3
33068: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33069: LD_INT 0
33071: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33072: LD_VAR 0 1
33076: PUSH
33077: LD_INT 250
33079: EQUAL
33080: PUSH
33081: LD_VAR 0 2
33085: PPUSH
33086: CALL_OW 264
33090: PUSH
33091: LD_EXP 39
33095: EQUAL
33096: AND
33097: IFFALSE 33118
// MinerPlaceMine ( unit , x , y ) ;
33099: LD_VAR 0 2
33103: PPUSH
33104: LD_VAR 0 4
33108: PPUSH
33109: LD_VAR 0 5
33113: PPUSH
33114: CALL 35846 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33118: LD_VAR 0 1
33122: PUSH
33123: LD_INT 251
33125: EQUAL
33126: PUSH
33127: LD_VAR 0 2
33131: PPUSH
33132: CALL_OW 264
33136: PUSH
33137: LD_EXP 39
33141: EQUAL
33142: AND
33143: IFFALSE 33164
// MinerDetonateMine ( unit , x , y ) ;
33145: LD_VAR 0 2
33149: PPUSH
33150: LD_VAR 0 4
33154: PPUSH
33155: LD_VAR 0 5
33159: PPUSH
33160: CALL 36123 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33164: LD_VAR 0 1
33168: PUSH
33169: LD_INT 252
33171: EQUAL
33172: PUSH
33173: LD_VAR 0 2
33177: PPUSH
33178: CALL_OW 264
33182: PUSH
33183: LD_EXP 39
33187: EQUAL
33188: AND
33189: IFFALSE 33210
// MinerCreateMinefield ( unit , x , y ) ;
33191: LD_VAR 0 2
33195: PPUSH
33196: LD_VAR 0 4
33200: PPUSH
33201: LD_VAR 0 5
33205: PPUSH
33206: CALL 36540 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33210: LD_VAR 0 1
33214: PUSH
33215: LD_INT 253
33217: EQUAL
33218: PUSH
33219: LD_VAR 0 2
33223: PPUSH
33224: CALL_OW 257
33228: PUSH
33229: LD_INT 5
33231: EQUAL
33232: AND
33233: IFFALSE 33254
// ComBinocular ( unit , x , y ) ;
33235: LD_VAR 0 2
33239: PPUSH
33240: LD_VAR 0 4
33244: PPUSH
33245: LD_VAR 0 5
33249: PPUSH
33250: CALL 36911 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33254: LD_VAR 0 1
33258: PUSH
33259: LD_INT 254
33261: EQUAL
33262: PUSH
33263: LD_VAR 0 2
33267: PPUSH
33268: CALL_OW 264
33272: PUSH
33273: LD_EXP 34
33277: EQUAL
33278: AND
33279: PUSH
33280: LD_VAR 0 3
33284: PPUSH
33285: CALL_OW 263
33289: PUSH
33290: LD_INT 3
33292: EQUAL
33293: AND
33294: IFFALSE 33310
// HackDestroyVehicle ( unit , selectedUnit ) ;
33296: LD_VAR 0 2
33300: PPUSH
33301: LD_VAR 0 3
33305: PPUSH
33306: CALL 35206 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33310: LD_VAR 0 1
33314: PUSH
33315: LD_INT 255
33317: EQUAL
33318: PUSH
33319: LD_VAR 0 2
33323: PPUSH
33324: CALL_OW 264
33328: PUSH
33329: LD_INT 14
33331: PUSH
33332: LD_INT 53
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: IN
33339: AND
33340: PUSH
33341: LD_VAR 0 4
33345: PPUSH
33346: LD_VAR 0 5
33350: PPUSH
33351: CALL_OW 488
33355: AND
33356: IFFALSE 33380
// CutTreeXYR ( unit , x , y , 12 ) ;
33358: LD_VAR 0 2
33362: PPUSH
33363: LD_VAR 0 4
33367: PPUSH
33368: LD_VAR 0 5
33372: PPUSH
33373: LD_INT 12
33375: PPUSH
33376: CALL 33772 0 4
// if cmd = 256 then
33380: LD_VAR 0 1
33384: PUSH
33385: LD_INT 256
33387: EQUAL
33388: IFFALSE 33409
// SetFactoryWaypoint ( unit , x , y ) ;
33390: LD_VAR 0 2
33394: PPUSH
33395: LD_VAR 0 4
33399: PPUSH
33400: LD_VAR 0 5
33404: PPUSH
33405: CALL 33414 0 3
// end ;
33409: LD_VAR 0 6
33413: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33414: LD_INT 0
33416: PPUSH
33417: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33418: LD_VAR 0 1
33422: NOT
33423: PUSH
33424: LD_VAR 0 2
33428: PPUSH
33429: LD_VAR 0 3
33433: PPUSH
33434: CALL_OW 488
33438: NOT
33439: OR
33440: PUSH
33441: LD_VAR 0 1
33445: PPUSH
33446: CALL_OW 266
33450: PUSH
33451: LD_INT 3
33453: NONEQUAL
33454: PUSH
33455: LD_VAR 0 1
33459: PPUSH
33460: CALL_OW 247
33464: PUSH
33465: LD_INT 1
33467: EQUAL
33468: NOT
33469: AND
33470: OR
33471: IFFALSE 33475
// exit ;
33473: GO 33624
// if GetType ( factory ) = unit_human then
33475: LD_VAR 0 1
33479: PPUSH
33480: CALL_OW 247
33484: PUSH
33485: LD_INT 1
33487: EQUAL
33488: IFFALSE 33505
// factory := IsInUnit ( factory ) ;
33490: LD_ADDR_VAR 0 1
33494: PUSH
33495: LD_VAR 0 1
33499: PPUSH
33500: CALL_OW 310
33504: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33505: LD_VAR 0 1
33509: PPUSH
33510: CALL_OW 266
33514: PUSH
33515: LD_INT 3
33517: NONEQUAL
33518: IFFALSE 33522
// exit ;
33520: GO 33624
// if HexInfo ( x , y ) = factory then
33522: LD_VAR 0 2
33526: PPUSH
33527: LD_VAR 0 3
33531: PPUSH
33532: CALL_OW 428
33536: PUSH
33537: LD_VAR 0 1
33541: EQUAL
33542: IFFALSE 33569
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33544: LD_ADDR_EXP 110
33548: PUSH
33549: LD_EXP 110
33553: PPUSH
33554: LD_VAR 0 1
33558: PPUSH
33559: LD_INT 0
33561: PPUSH
33562: CALL_OW 1
33566: ST_TO_ADDR
33567: GO 33620
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33569: LD_ADDR_EXP 110
33573: PUSH
33574: LD_EXP 110
33578: PPUSH
33579: LD_VAR 0 1
33583: PPUSH
33584: LD_VAR 0 1
33588: PPUSH
33589: CALL_OW 255
33593: PUSH
33594: LD_VAR 0 1
33598: PUSH
33599: LD_VAR 0 2
33603: PUSH
33604: LD_VAR 0 3
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: PPUSH
33615: CALL_OW 1
33619: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33620: CALL 33629 0 0
// end ;
33624: LD_VAR 0 4
33628: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
33629: LD_INT 0
33631: PPUSH
33632: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33633: LD_STRING resetFactoryWaypoint();
33635: PPUSH
33636: CALL_OW 559
// if factoryWaypoints then
33640: LD_EXP 110
33644: IFFALSE 33767
// begin for i := 1 to factoryWaypoints do
33646: LD_ADDR_VAR 0 2
33650: PUSH
33651: DOUBLE
33652: LD_INT 1
33654: DEC
33655: ST_TO_ADDR
33656: LD_EXP 110
33660: PUSH
33661: FOR_TO
33662: IFFALSE 33765
// if factoryWaypoints [ i ] then
33664: LD_EXP 110
33668: PUSH
33669: LD_VAR 0 2
33673: ARRAY
33674: IFFALSE 33763
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
33676: LD_STRING setFactoryWaypointXY(
33678: PUSH
33679: LD_EXP 110
33683: PUSH
33684: LD_VAR 0 2
33688: ARRAY
33689: PUSH
33690: LD_INT 1
33692: ARRAY
33693: STR
33694: PUSH
33695: LD_STRING ,
33697: STR
33698: PUSH
33699: LD_EXP 110
33703: PUSH
33704: LD_VAR 0 2
33708: ARRAY
33709: PUSH
33710: LD_INT 2
33712: ARRAY
33713: STR
33714: PUSH
33715: LD_STRING ,
33717: STR
33718: PUSH
33719: LD_EXP 110
33723: PUSH
33724: LD_VAR 0 2
33728: ARRAY
33729: PUSH
33730: LD_INT 3
33732: ARRAY
33733: STR
33734: PUSH
33735: LD_STRING ,
33737: STR
33738: PUSH
33739: LD_EXP 110
33743: PUSH
33744: LD_VAR 0 2
33748: ARRAY
33749: PUSH
33750: LD_INT 4
33752: ARRAY
33753: STR
33754: PUSH
33755: LD_STRING )
33757: STR
33758: PPUSH
33759: CALL_OW 559
33763: GO 33661
33765: POP
33766: POP
// end ; end ;
33767: LD_VAR 0 1
33771: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33772: LD_INT 0
33774: PPUSH
33775: PPUSH
33776: PPUSH
33777: PPUSH
33778: PPUSH
33779: PPUSH
33780: PPUSH
33781: PPUSH
33782: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33783: LD_VAR 0 1
33787: NOT
33788: PUSH
33789: LD_VAR 0 2
33793: PPUSH
33794: LD_VAR 0 3
33798: PPUSH
33799: CALL_OW 488
33803: NOT
33804: OR
33805: PUSH
33806: LD_VAR 0 4
33810: NOT
33811: OR
33812: IFFALSE 33816
// exit ;
33814: GO 34156
// list := [ ] ;
33816: LD_ADDR_VAR 0 13
33820: PUSH
33821: EMPTY
33822: ST_TO_ADDR
// if x - r < 0 then
33823: LD_VAR 0 2
33827: PUSH
33828: LD_VAR 0 4
33832: MINUS
33833: PUSH
33834: LD_INT 0
33836: LESS
33837: IFFALSE 33849
// min_x := 0 else
33839: LD_ADDR_VAR 0 7
33843: PUSH
33844: LD_INT 0
33846: ST_TO_ADDR
33847: GO 33865
// min_x := x - r ;
33849: LD_ADDR_VAR 0 7
33853: PUSH
33854: LD_VAR 0 2
33858: PUSH
33859: LD_VAR 0 4
33863: MINUS
33864: ST_TO_ADDR
// if y - r < 0 then
33865: LD_VAR 0 3
33869: PUSH
33870: LD_VAR 0 4
33874: MINUS
33875: PUSH
33876: LD_INT 0
33878: LESS
33879: IFFALSE 33891
// min_y := 0 else
33881: LD_ADDR_VAR 0 8
33885: PUSH
33886: LD_INT 0
33888: ST_TO_ADDR
33889: GO 33907
// min_y := y - r ;
33891: LD_ADDR_VAR 0 8
33895: PUSH
33896: LD_VAR 0 3
33900: PUSH
33901: LD_VAR 0 4
33905: MINUS
33906: ST_TO_ADDR
// max_x := x + r ;
33907: LD_ADDR_VAR 0 9
33911: PUSH
33912: LD_VAR 0 2
33916: PUSH
33917: LD_VAR 0 4
33921: PLUS
33922: ST_TO_ADDR
// max_y := y + r ;
33923: LD_ADDR_VAR 0 10
33927: PUSH
33928: LD_VAR 0 3
33932: PUSH
33933: LD_VAR 0 4
33937: PLUS
33938: ST_TO_ADDR
// for _x = min_x to max_x do
33939: LD_ADDR_VAR 0 11
33943: PUSH
33944: DOUBLE
33945: LD_VAR 0 7
33949: DEC
33950: ST_TO_ADDR
33951: LD_VAR 0 9
33955: PUSH
33956: FOR_TO
33957: IFFALSE 34074
// for _y = min_y to max_y do
33959: LD_ADDR_VAR 0 12
33963: PUSH
33964: DOUBLE
33965: LD_VAR 0 8
33969: DEC
33970: ST_TO_ADDR
33971: LD_VAR 0 10
33975: PUSH
33976: FOR_TO
33977: IFFALSE 34070
// begin if not ValidHex ( _x , _y ) then
33979: LD_VAR 0 11
33983: PPUSH
33984: LD_VAR 0 12
33988: PPUSH
33989: CALL_OW 488
33993: NOT
33994: IFFALSE 33998
// continue ;
33996: GO 33976
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33998: LD_VAR 0 11
34002: PPUSH
34003: LD_VAR 0 12
34007: PPUSH
34008: CALL_OW 351
34012: PUSH
34013: LD_VAR 0 11
34017: PPUSH
34018: LD_VAR 0 12
34022: PPUSH
34023: CALL_OW 554
34027: AND
34028: IFFALSE 34068
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34030: LD_ADDR_VAR 0 13
34034: PUSH
34035: LD_VAR 0 13
34039: PPUSH
34040: LD_VAR 0 13
34044: PUSH
34045: LD_INT 1
34047: PLUS
34048: PPUSH
34049: LD_VAR 0 11
34053: PUSH
34054: LD_VAR 0 12
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PPUSH
34063: CALL_OW 2
34067: ST_TO_ADDR
// end ;
34068: GO 33976
34070: POP
34071: POP
34072: GO 33956
34074: POP
34075: POP
// if not list then
34076: LD_VAR 0 13
34080: NOT
34081: IFFALSE 34085
// exit ;
34083: GO 34156
// for i in list do
34085: LD_ADDR_VAR 0 6
34089: PUSH
34090: LD_VAR 0 13
34094: PUSH
34095: FOR_IN
34096: IFFALSE 34154
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34098: LD_VAR 0 1
34102: PPUSH
34103: LD_STRING M
34105: PUSH
34106: LD_VAR 0 6
34110: PUSH
34111: LD_INT 1
34113: ARRAY
34114: PUSH
34115: LD_VAR 0 6
34119: PUSH
34120: LD_INT 2
34122: ARRAY
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: PUSH
34145: EMPTY
34146: LIST
34147: PPUSH
34148: CALL_OW 447
34152: GO 34095
34154: POP
34155: POP
// end ;
34156: LD_VAR 0 5
34160: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34161: LD_EXP 111
34165: NOT
34166: IFFALSE 34216
34168: GO 34170
34170: DISABLE
// begin initHack := true ;
34171: LD_ADDR_EXP 111
34175: PUSH
34176: LD_INT 1
34178: ST_TO_ADDR
// hackTanks := [ ] ;
34179: LD_ADDR_EXP 112
34183: PUSH
34184: EMPTY
34185: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34186: LD_ADDR_EXP 113
34190: PUSH
34191: EMPTY
34192: ST_TO_ADDR
// hackLimit := 3 ;
34193: LD_ADDR_EXP 114
34197: PUSH
34198: LD_INT 3
34200: ST_TO_ADDR
// hackDist := 12 ;
34201: LD_ADDR_EXP 115
34205: PUSH
34206: LD_INT 12
34208: ST_TO_ADDR
// hackCounter := [ ] ;
34209: LD_ADDR_EXP 116
34213: PUSH
34214: EMPTY
34215: ST_TO_ADDR
// end ;
34216: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34217: LD_EXP 111
34221: PUSH
34222: LD_INT 34
34224: PUSH
34225: LD_EXP 34
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PPUSH
34234: CALL_OW 69
34238: AND
34239: IFFALSE 34494
34241: GO 34243
34243: DISABLE
34244: LD_INT 0
34246: PPUSH
34247: PPUSH
// begin enable ;
34248: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34249: LD_ADDR_VAR 0 1
34253: PUSH
34254: LD_INT 34
34256: PUSH
34257: LD_EXP 34
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PPUSH
34266: CALL_OW 69
34270: PUSH
34271: FOR_IN
34272: IFFALSE 34492
// begin if not i in hackTanks then
34274: LD_VAR 0 1
34278: PUSH
34279: LD_EXP 112
34283: IN
34284: NOT
34285: IFFALSE 34368
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34287: LD_ADDR_EXP 112
34291: PUSH
34292: LD_EXP 112
34296: PPUSH
34297: LD_EXP 112
34301: PUSH
34302: LD_INT 1
34304: PLUS
34305: PPUSH
34306: LD_VAR 0 1
34310: PPUSH
34311: CALL_OW 1
34315: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34316: LD_ADDR_EXP 113
34320: PUSH
34321: LD_EXP 113
34325: PPUSH
34326: LD_EXP 113
34330: PUSH
34331: LD_INT 1
34333: PLUS
34334: PPUSH
34335: EMPTY
34336: PPUSH
34337: CALL_OW 1
34341: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34342: LD_ADDR_EXP 116
34346: PUSH
34347: LD_EXP 116
34351: PPUSH
34352: LD_EXP 116
34356: PUSH
34357: LD_INT 1
34359: PLUS
34360: PPUSH
34361: EMPTY
34362: PPUSH
34363: CALL_OW 1
34367: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34368: LD_VAR 0 1
34372: PPUSH
34373: CALL_OW 302
34377: NOT
34378: IFFALSE 34391
// begin HackUnlinkAll ( i ) ;
34380: LD_VAR 0 1
34384: PPUSH
34385: CALL 34497 0 1
// continue ;
34389: GO 34271
// end ; HackCheckCapturedStatus ( i ) ;
34391: LD_VAR 0 1
34395: PPUSH
34396: CALL 34940 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34400: LD_ADDR_VAR 0 2
34404: PUSH
34405: LD_INT 81
34407: PUSH
34408: LD_VAR 0 1
34412: PPUSH
34413: CALL_OW 255
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 33
34424: PUSH
34425: LD_INT 3
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 91
34434: PUSH
34435: LD_VAR 0 1
34439: PUSH
34440: LD_EXP 115
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 50
34452: PUSH
34453: EMPTY
34454: LIST
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: PPUSH
34462: CALL_OW 69
34466: ST_TO_ADDR
// if not tmp then
34467: LD_VAR 0 2
34471: NOT
34472: IFFALSE 34476
// continue ;
34474: GO 34271
// HackLink ( i , tmp ) ;
34476: LD_VAR 0 1
34480: PPUSH
34481: LD_VAR 0 2
34485: PPUSH
34486: CALL 34633 0 2
// end ;
34490: GO 34271
34492: POP
34493: POP
// end ;
34494: PPOPN 2
34496: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34497: LD_INT 0
34499: PPUSH
34500: PPUSH
34501: PPUSH
// if not hack in hackTanks then
34502: LD_VAR 0 1
34506: PUSH
34507: LD_EXP 112
34511: IN
34512: NOT
34513: IFFALSE 34517
// exit ;
34515: GO 34628
// index := GetElementIndex ( hackTanks , hack ) ;
34517: LD_ADDR_VAR 0 4
34521: PUSH
34522: LD_EXP 112
34526: PPUSH
34527: LD_VAR 0 1
34531: PPUSH
34532: CALL 42102 0 2
34536: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34537: LD_EXP 113
34541: PUSH
34542: LD_VAR 0 4
34546: ARRAY
34547: IFFALSE 34628
// begin for i in hackTanksCaptured [ index ] do
34549: LD_ADDR_VAR 0 3
34553: PUSH
34554: LD_EXP 113
34558: PUSH
34559: LD_VAR 0 4
34563: ARRAY
34564: PUSH
34565: FOR_IN
34566: IFFALSE 34592
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34568: LD_VAR 0 3
34572: PUSH
34573: LD_INT 1
34575: ARRAY
34576: PPUSH
34577: LD_VAR 0 3
34581: PUSH
34582: LD_INT 2
34584: ARRAY
34585: PPUSH
34586: CALL_OW 235
34590: GO 34565
34592: POP
34593: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34594: LD_ADDR_EXP 113
34598: PUSH
34599: LD_EXP 113
34603: PPUSH
34604: LD_VAR 0 4
34608: PPUSH
34609: EMPTY
34610: PPUSH
34611: CALL_OW 1
34615: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34616: LD_VAR 0 1
34620: PPUSH
34621: LD_INT 0
34623: PPUSH
34624: CALL_OW 505
// end ; end ;
34628: LD_VAR 0 2
34632: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34633: LD_INT 0
34635: PPUSH
34636: PPUSH
34637: PPUSH
// if not hack in hackTanks or not vehicles then
34638: LD_VAR 0 1
34642: PUSH
34643: LD_EXP 112
34647: IN
34648: NOT
34649: PUSH
34650: LD_VAR 0 2
34654: NOT
34655: OR
34656: IFFALSE 34660
// exit ;
34658: GO 34935
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34660: LD_ADDR_VAR 0 2
34664: PUSH
34665: LD_VAR 0 1
34669: PPUSH
34670: LD_VAR 0 2
34674: PPUSH
34675: LD_INT 1
34677: PPUSH
34678: LD_INT 1
34680: PPUSH
34681: CALL 42752 0 4
34685: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34686: LD_ADDR_VAR 0 5
34690: PUSH
34691: LD_EXP 112
34695: PPUSH
34696: LD_VAR 0 1
34700: PPUSH
34701: CALL 42102 0 2
34705: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34706: LD_EXP 113
34710: PUSH
34711: LD_VAR 0 5
34715: ARRAY
34716: PUSH
34717: LD_EXP 114
34721: LESS
34722: IFFALSE 34911
// begin for i := 1 to vehicles do
34724: LD_ADDR_VAR 0 4
34728: PUSH
34729: DOUBLE
34730: LD_INT 1
34732: DEC
34733: ST_TO_ADDR
34734: LD_VAR 0 2
34738: PUSH
34739: FOR_TO
34740: IFFALSE 34909
// begin if hackTanksCaptured [ index ] = hackLimit then
34742: LD_EXP 113
34746: PUSH
34747: LD_VAR 0 5
34751: ARRAY
34752: PUSH
34753: LD_EXP 114
34757: EQUAL
34758: IFFALSE 34762
// break ;
34760: GO 34909
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34762: LD_ADDR_EXP 116
34766: PUSH
34767: LD_EXP 116
34771: PPUSH
34772: LD_VAR 0 5
34776: PPUSH
34777: LD_EXP 116
34781: PUSH
34782: LD_VAR 0 5
34786: ARRAY
34787: PUSH
34788: LD_INT 1
34790: PLUS
34791: PPUSH
34792: CALL_OW 1
34796: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34797: LD_ADDR_EXP 113
34801: PUSH
34802: LD_EXP 113
34806: PPUSH
34807: LD_VAR 0 5
34811: PUSH
34812: LD_EXP 113
34816: PUSH
34817: LD_VAR 0 5
34821: ARRAY
34822: PUSH
34823: LD_INT 1
34825: PLUS
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PPUSH
34831: LD_VAR 0 2
34835: PUSH
34836: LD_VAR 0 4
34840: ARRAY
34841: PUSH
34842: LD_VAR 0 2
34846: PUSH
34847: LD_VAR 0 4
34851: ARRAY
34852: PPUSH
34853: CALL_OW 255
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PPUSH
34862: CALL 42317 0 3
34866: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34867: LD_VAR 0 2
34871: PUSH
34872: LD_VAR 0 4
34876: ARRAY
34877: PPUSH
34878: LD_VAR 0 1
34882: PPUSH
34883: CALL_OW 255
34887: PPUSH
34888: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34892: LD_VAR 0 2
34896: PUSH
34897: LD_VAR 0 4
34901: ARRAY
34902: PPUSH
34903: CALL_OW 141
// end ;
34907: GO 34739
34909: POP
34910: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34911: LD_VAR 0 1
34915: PPUSH
34916: LD_EXP 113
34920: PUSH
34921: LD_VAR 0 5
34925: ARRAY
34926: PUSH
34927: LD_INT 0
34929: PLUS
34930: PPUSH
34931: CALL_OW 505
// end ;
34935: LD_VAR 0 3
34939: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34940: LD_INT 0
34942: PPUSH
34943: PPUSH
34944: PPUSH
34945: PPUSH
// if not hack in hackTanks then
34946: LD_VAR 0 1
34950: PUSH
34951: LD_EXP 112
34955: IN
34956: NOT
34957: IFFALSE 34961
// exit ;
34959: GO 35201
// index := GetElementIndex ( hackTanks , hack ) ;
34961: LD_ADDR_VAR 0 4
34965: PUSH
34966: LD_EXP 112
34970: PPUSH
34971: LD_VAR 0 1
34975: PPUSH
34976: CALL 42102 0 2
34980: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34981: LD_ADDR_VAR 0 3
34985: PUSH
34986: DOUBLE
34987: LD_EXP 113
34991: PUSH
34992: LD_VAR 0 4
34996: ARRAY
34997: INC
34998: ST_TO_ADDR
34999: LD_INT 1
35001: PUSH
35002: FOR_DOWNTO
35003: IFFALSE 35175
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35005: LD_ADDR_VAR 0 5
35009: PUSH
35010: LD_EXP 113
35014: PUSH
35015: LD_VAR 0 4
35019: ARRAY
35020: PUSH
35021: LD_VAR 0 3
35025: ARRAY
35026: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35027: LD_VAR 0 5
35031: PUSH
35032: LD_INT 1
35034: ARRAY
35035: PPUSH
35036: CALL_OW 302
35040: NOT
35041: PUSH
35042: LD_VAR 0 5
35046: PUSH
35047: LD_INT 1
35049: ARRAY
35050: PPUSH
35051: CALL_OW 255
35055: PUSH
35056: LD_VAR 0 1
35060: PPUSH
35061: CALL_OW 255
35065: NONEQUAL
35066: OR
35067: IFFALSE 35173
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35069: LD_VAR 0 5
35073: PUSH
35074: LD_INT 1
35076: ARRAY
35077: PPUSH
35078: CALL_OW 305
35082: PUSH
35083: LD_VAR 0 5
35087: PUSH
35088: LD_INT 1
35090: ARRAY
35091: PPUSH
35092: CALL_OW 255
35096: PUSH
35097: LD_VAR 0 1
35101: PPUSH
35102: CALL_OW 255
35106: EQUAL
35107: AND
35108: IFFALSE 35132
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35110: LD_VAR 0 5
35114: PUSH
35115: LD_INT 1
35117: ARRAY
35118: PPUSH
35119: LD_VAR 0 5
35123: PUSH
35124: LD_INT 2
35126: ARRAY
35127: PPUSH
35128: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35132: LD_ADDR_EXP 113
35136: PUSH
35137: LD_EXP 113
35141: PPUSH
35142: LD_VAR 0 4
35146: PPUSH
35147: LD_EXP 113
35151: PUSH
35152: LD_VAR 0 4
35156: ARRAY
35157: PPUSH
35158: LD_VAR 0 3
35162: PPUSH
35163: CALL_OW 3
35167: PPUSH
35168: CALL_OW 1
35172: ST_TO_ADDR
// end ; end ;
35173: GO 35002
35175: POP
35176: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35177: LD_VAR 0 1
35181: PPUSH
35182: LD_EXP 113
35186: PUSH
35187: LD_VAR 0 4
35191: ARRAY
35192: PUSH
35193: LD_INT 0
35195: PLUS
35196: PPUSH
35197: CALL_OW 505
// end ;
35201: LD_VAR 0 2
35205: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35206: LD_INT 0
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
// if not hack in hackTanks then
35212: LD_VAR 0 1
35216: PUSH
35217: LD_EXP 112
35221: IN
35222: NOT
35223: IFFALSE 35227
// exit ;
35225: GO 35312
// index := GetElementIndex ( hackTanks , hack ) ;
35227: LD_ADDR_VAR 0 5
35231: PUSH
35232: LD_EXP 112
35236: PPUSH
35237: LD_VAR 0 1
35241: PPUSH
35242: CALL 42102 0 2
35246: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35247: LD_ADDR_VAR 0 4
35251: PUSH
35252: DOUBLE
35253: LD_INT 1
35255: DEC
35256: ST_TO_ADDR
35257: LD_EXP 113
35261: PUSH
35262: LD_VAR 0 5
35266: ARRAY
35267: PUSH
35268: FOR_TO
35269: IFFALSE 35310
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35271: LD_EXP 113
35275: PUSH
35276: LD_VAR 0 5
35280: ARRAY
35281: PUSH
35282: LD_VAR 0 4
35286: ARRAY
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: PUSH
35292: LD_VAR 0 2
35296: EQUAL
35297: IFFALSE 35308
// KillUnit ( vehicle ) ;
35299: LD_VAR 0 2
35303: PPUSH
35304: CALL_OW 66
35308: GO 35268
35310: POP
35311: POP
// end ;
35312: LD_VAR 0 3
35316: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35317: LD_EXP 117
35321: NOT
35322: IFFALSE 35357
35324: GO 35326
35326: DISABLE
// begin initMiner := true ;
35327: LD_ADDR_EXP 117
35331: PUSH
35332: LD_INT 1
35334: ST_TO_ADDR
// minersList := [ ] ;
35335: LD_ADDR_EXP 118
35339: PUSH
35340: EMPTY
35341: ST_TO_ADDR
// minerMinesList := [ ] ;
35342: LD_ADDR_EXP 119
35346: PUSH
35347: EMPTY
35348: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35349: LD_ADDR_EXP 120
35353: PUSH
35354: LD_INT 5
35356: ST_TO_ADDR
// end ;
35357: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35358: LD_EXP 117
35362: PUSH
35363: LD_INT 34
35365: PUSH
35366: LD_EXP 39
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PPUSH
35375: CALL_OW 69
35379: AND
35380: IFFALSE 35843
35382: GO 35384
35384: DISABLE
35385: LD_INT 0
35387: PPUSH
35388: PPUSH
35389: PPUSH
35390: PPUSH
// begin enable ;
35391: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35392: LD_ADDR_VAR 0 1
35396: PUSH
35397: LD_INT 34
35399: PUSH
35400: LD_EXP 39
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PPUSH
35409: CALL_OW 69
35413: PUSH
35414: FOR_IN
35415: IFFALSE 35487
// begin if not i in minersList then
35417: LD_VAR 0 1
35421: PUSH
35422: LD_EXP 118
35426: IN
35427: NOT
35428: IFFALSE 35485
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35430: LD_ADDR_EXP 118
35434: PUSH
35435: LD_EXP 118
35439: PPUSH
35440: LD_EXP 118
35444: PUSH
35445: LD_INT 1
35447: PLUS
35448: PPUSH
35449: LD_VAR 0 1
35453: PPUSH
35454: CALL_OW 1
35458: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35459: LD_ADDR_EXP 119
35463: PUSH
35464: LD_EXP 119
35468: PPUSH
35469: LD_EXP 119
35473: PUSH
35474: LD_INT 1
35476: PLUS
35477: PPUSH
35478: EMPTY
35479: PPUSH
35480: CALL_OW 1
35484: ST_TO_ADDR
// end end ;
35485: GO 35414
35487: POP
35488: POP
// for i := minerMinesList downto 1 do
35489: LD_ADDR_VAR 0 1
35493: PUSH
35494: DOUBLE
35495: LD_EXP 119
35499: INC
35500: ST_TO_ADDR
35501: LD_INT 1
35503: PUSH
35504: FOR_DOWNTO
35505: IFFALSE 35841
// begin if IsLive ( minersList [ i ] ) then
35507: LD_EXP 118
35511: PUSH
35512: LD_VAR 0 1
35516: ARRAY
35517: PPUSH
35518: CALL_OW 300
35522: IFFALSE 35550
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35524: LD_EXP 118
35528: PUSH
35529: LD_VAR 0 1
35533: ARRAY
35534: PPUSH
35535: LD_EXP 119
35539: PUSH
35540: LD_VAR 0 1
35544: ARRAY
35545: PPUSH
35546: CALL_OW 505
// if not minerMinesList [ i ] then
35550: LD_EXP 119
35554: PUSH
35555: LD_VAR 0 1
35559: ARRAY
35560: NOT
35561: IFFALSE 35565
// continue ;
35563: GO 35504
// for j := minerMinesList [ i ] downto 1 do
35565: LD_ADDR_VAR 0 2
35569: PUSH
35570: DOUBLE
35571: LD_EXP 119
35575: PUSH
35576: LD_VAR 0 1
35580: ARRAY
35581: INC
35582: ST_TO_ADDR
35583: LD_INT 1
35585: PUSH
35586: FOR_DOWNTO
35587: IFFALSE 35837
// begin side := GetSide ( minersList [ i ] ) ;
35589: LD_ADDR_VAR 0 3
35593: PUSH
35594: LD_EXP 118
35598: PUSH
35599: LD_VAR 0 1
35603: ARRAY
35604: PPUSH
35605: CALL_OW 255
35609: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35610: LD_ADDR_VAR 0 4
35614: PUSH
35615: LD_EXP 119
35619: PUSH
35620: LD_VAR 0 1
35624: ARRAY
35625: PUSH
35626: LD_VAR 0 2
35630: ARRAY
35631: PUSH
35632: LD_INT 1
35634: ARRAY
35635: PPUSH
35636: LD_EXP 119
35640: PUSH
35641: LD_VAR 0 1
35645: ARRAY
35646: PUSH
35647: LD_VAR 0 2
35651: ARRAY
35652: PUSH
35653: LD_INT 2
35655: ARRAY
35656: PPUSH
35657: CALL_OW 428
35661: ST_TO_ADDR
// if not tmp then
35662: LD_VAR 0 4
35666: NOT
35667: IFFALSE 35671
// continue ;
35669: GO 35586
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35671: LD_VAR 0 4
35675: PUSH
35676: LD_INT 81
35678: PUSH
35679: LD_VAR 0 3
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PPUSH
35688: CALL_OW 69
35692: IN
35693: PUSH
35694: LD_EXP 119
35698: PUSH
35699: LD_VAR 0 1
35703: ARRAY
35704: PUSH
35705: LD_VAR 0 2
35709: ARRAY
35710: PUSH
35711: LD_INT 1
35713: ARRAY
35714: PPUSH
35715: LD_EXP 119
35719: PUSH
35720: LD_VAR 0 1
35724: ARRAY
35725: PUSH
35726: LD_VAR 0 2
35730: ARRAY
35731: PUSH
35732: LD_INT 2
35734: ARRAY
35735: PPUSH
35736: CALL_OW 458
35740: AND
35741: IFFALSE 35835
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35743: LD_EXP 119
35747: PUSH
35748: LD_VAR 0 1
35752: ARRAY
35753: PUSH
35754: LD_VAR 0 2
35758: ARRAY
35759: PUSH
35760: LD_INT 1
35762: ARRAY
35763: PPUSH
35764: LD_EXP 119
35768: PUSH
35769: LD_VAR 0 1
35773: ARRAY
35774: PUSH
35775: LD_VAR 0 2
35779: ARRAY
35780: PUSH
35781: LD_INT 2
35783: ARRAY
35784: PPUSH
35785: LD_VAR 0 3
35789: PPUSH
35790: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35794: LD_ADDR_EXP 119
35798: PUSH
35799: LD_EXP 119
35803: PPUSH
35804: LD_VAR 0 1
35808: PPUSH
35809: LD_EXP 119
35813: PUSH
35814: LD_VAR 0 1
35818: ARRAY
35819: PPUSH
35820: LD_VAR 0 2
35824: PPUSH
35825: CALL_OW 3
35829: PPUSH
35830: CALL_OW 1
35834: ST_TO_ADDR
// end ; end ;
35835: GO 35586
35837: POP
35838: POP
// end ;
35839: GO 35504
35841: POP
35842: POP
// end ;
35843: PPOPN 4
35845: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35846: LD_INT 0
35848: PPUSH
35849: PPUSH
// result := false ;
35850: LD_ADDR_VAR 0 4
35854: PUSH
35855: LD_INT 0
35857: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35858: LD_VAR 0 1
35862: PPUSH
35863: CALL_OW 264
35867: PUSH
35868: LD_EXP 39
35872: EQUAL
35873: NOT
35874: IFFALSE 35878
// exit ;
35876: GO 36118
// index := GetElementIndex ( minersList , unit ) ;
35878: LD_ADDR_VAR 0 5
35882: PUSH
35883: LD_EXP 118
35887: PPUSH
35888: LD_VAR 0 1
35892: PPUSH
35893: CALL 42102 0 2
35897: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35898: LD_EXP 119
35902: PUSH
35903: LD_VAR 0 5
35907: ARRAY
35908: PUSH
35909: LD_EXP 120
35913: GREATEREQUAL
35914: IFFALSE 35918
// exit ;
35916: GO 36118
// ComMoveXY ( unit , x , y ) ;
35918: LD_VAR 0 1
35922: PPUSH
35923: LD_VAR 0 2
35927: PPUSH
35928: LD_VAR 0 3
35932: PPUSH
35933: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35937: LD_INT 35
35939: PPUSH
35940: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35944: LD_VAR 0 1
35948: PPUSH
35949: LD_VAR 0 2
35953: PPUSH
35954: LD_VAR 0 3
35958: PPUSH
35959: CALL 72821 0 3
35963: NOT
35964: PUSH
35965: LD_VAR 0 1
35969: PPUSH
35970: CALL_OW 314
35974: AND
35975: IFFALSE 35979
// exit ;
35977: GO 36118
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35979: LD_VAR 0 2
35983: PPUSH
35984: LD_VAR 0 3
35988: PPUSH
35989: CALL_OW 428
35993: PUSH
35994: LD_VAR 0 1
35998: EQUAL
35999: PUSH
36000: LD_VAR 0 1
36004: PPUSH
36005: CALL_OW 314
36009: NOT
36010: AND
36011: IFFALSE 35937
// PlaySoundXY ( x , y , PlantMine ) ;
36013: LD_VAR 0 2
36017: PPUSH
36018: LD_VAR 0 3
36022: PPUSH
36023: LD_STRING PlantMine
36025: PPUSH
36026: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36030: LD_VAR 0 2
36034: PPUSH
36035: LD_VAR 0 3
36039: PPUSH
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL_OW 255
36049: PPUSH
36050: LD_INT 0
36052: PPUSH
36053: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36057: LD_ADDR_EXP 119
36061: PUSH
36062: LD_EXP 119
36066: PPUSH
36067: LD_VAR 0 5
36071: PUSH
36072: LD_EXP 119
36076: PUSH
36077: LD_VAR 0 5
36081: ARRAY
36082: PUSH
36083: LD_INT 1
36085: PLUS
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PPUSH
36091: LD_VAR 0 2
36095: PUSH
36096: LD_VAR 0 3
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PPUSH
36105: CALL 42317 0 3
36109: ST_TO_ADDR
// result := true ;
36110: LD_ADDR_VAR 0 4
36114: PUSH
36115: LD_INT 1
36117: ST_TO_ADDR
// end ;
36118: LD_VAR 0 4
36122: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36123: LD_INT 0
36125: PPUSH
36126: PPUSH
36127: PPUSH
// if not unit in minersList then
36128: LD_VAR 0 1
36132: PUSH
36133: LD_EXP 118
36137: IN
36138: NOT
36139: IFFALSE 36143
// exit ;
36141: GO 36535
// index := GetElementIndex ( minersList , unit ) ;
36143: LD_ADDR_VAR 0 6
36147: PUSH
36148: LD_EXP 118
36152: PPUSH
36153: LD_VAR 0 1
36157: PPUSH
36158: CALL 42102 0 2
36162: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36163: LD_ADDR_VAR 0 5
36167: PUSH
36168: DOUBLE
36169: LD_EXP 119
36173: PUSH
36174: LD_VAR 0 6
36178: ARRAY
36179: INC
36180: ST_TO_ADDR
36181: LD_INT 1
36183: PUSH
36184: FOR_DOWNTO
36185: IFFALSE 36346
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36187: LD_EXP 119
36191: PUSH
36192: LD_VAR 0 6
36196: ARRAY
36197: PUSH
36198: LD_VAR 0 5
36202: ARRAY
36203: PUSH
36204: LD_INT 1
36206: ARRAY
36207: PUSH
36208: LD_VAR 0 2
36212: EQUAL
36213: PUSH
36214: LD_EXP 119
36218: PUSH
36219: LD_VAR 0 6
36223: ARRAY
36224: PUSH
36225: LD_VAR 0 5
36229: ARRAY
36230: PUSH
36231: LD_INT 2
36233: ARRAY
36234: PUSH
36235: LD_VAR 0 3
36239: EQUAL
36240: AND
36241: IFFALSE 36344
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36243: LD_EXP 119
36247: PUSH
36248: LD_VAR 0 6
36252: ARRAY
36253: PUSH
36254: LD_VAR 0 5
36258: ARRAY
36259: PUSH
36260: LD_INT 1
36262: ARRAY
36263: PPUSH
36264: LD_EXP 119
36268: PUSH
36269: LD_VAR 0 6
36273: ARRAY
36274: PUSH
36275: LD_VAR 0 5
36279: ARRAY
36280: PUSH
36281: LD_INT 2
36283: ARRAY
36284: PPUSH
36285: LD_VAR 0 1
36289: PPUSH
36290: CALL_OW 255
36294: PPUSH
36295: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36299: LD_ADDR_EXP 119
36303: PUSH
36304: LD_EXP 119
36308: PPUSH
36309: LD_VAR 0 6
36313: PPUSH
36314: LD_EXP 119
36318: PUSH
36319: LD_VAR 0 6
36323: ARRAY
36324: PPUSH
36325: LD_VAR 0 5
36329: PPUSH
36330: CALL_OW 3
36334: PPUSH
36335: CALL_OW 1
36339: ST_TO_ADDR
// exit ;
36340: POP
36341: POP
36342: GO 36535
// end ; end ;
36344: GO 36184
36346: POP
36347: POP
// for i := minerMinesList [ index ] downto 1 do
36348: LD_ADDR_VAR 0 5
36352: PUSH
36353: DOUBLE
36354: LD_EXP 119
36358: PUSH
36359: LD_VAR 0 6
36363: ARRAY
36364: INC
36365: ST_TO_ADDR
36366: LD_INT 1
36368: PUSH
36369: FOR_DOWNTO
36370: IFFALSE 36533
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36372: LD_EXP 119
36376: PUSH
36377: LD_VAR 0 6
36381: ARRAY
36382: PUSH
36383: LD_VAR 0 5
36387: ARRAY
36388: PUSH
36389: LD_INT 1
36391: ARRAY
36392: PPUSH
36393: LD_EXP 119
36397: PUSH
36398: LD_VAR 0 6
36402: ARRAY
36403: PUSH
36404: LD_VAR 0 5
36408: ARRAY
36409: PUSH
36410: LD_INT 2
36412: ARRAY
36413: PPUSH
36414: LD_VAR 0 2
36418: PPUSH
36419: LD_VAR 0 3
36423: PPUSH
36424: CALL_OW 298
36428: PUSH
36429: LD_INT 6
36431: LESS
36432: IFFALSE 36531
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36434: LD_EXP 119
36438: PUSH
36439: LD_VAR 0 6
36443: ARRAY
36444: PUSH
36445: LD_VAR 0 5
36449: ARRAY
36450: PUSH
36451: LD_INT 1
36453: ARRAY
36454: PPUSH
36455: LD_EXP 119
36459: PUSH
36460: LD_VAR 0 6
36464: ARRAY
36465: PUSH
36466: LD_VAR 0 5
36470: ARRAY
36471: PUSH
36472: LD_INT 2
36474: ARRAY
36475: PPUSH
36476: LD_VAR 0 1
36480: PPUSH
36481: CALL_OW 255
36485: PPUSH
36486: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36490: LD_ADDR_EXP 119
36494: PUSH
36495: LD_EXP 119
36499: PPUSH
36500: LD_VAR 0 6
36504: PPUSH
36505: LD_EXP 119
36509: PUSH
36510: LD_VAR 0 6
36514: ARRAY
36515: PPUSH
36516: LD_VAR 0 5
36520: PPUSH
36521: CALL_OW 3
36525: PPUSH
36526: CALL_OW 1
36530: ST_TO_ADDR
// end ; end ;
36531: GO 36369
36533: POP
36534: POP
// end ;
36535: LD_VAR 0 4
36539: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36540: LD_INT 0
36542: PPUSH
36543: PPUSH
36544: PPUSH
36545: PPUSH
36546: PPUSH
36547: PPUSH
36548: PPUSH
36549: PPUSH
36550: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36551: LD_VAR 0 1
36555: PPUSH
36556: CALL_OW 264
36560: PUSH
36561: LD_EXP 39
36565: EQUAL
36566: NOT
36567: PUSH
36568: LD_VAR 0 1
36572: PUSH
36573: LD_EXP 118
36577: IN
36578: NOT
36579: OR
36580: IFFALSE 36584
// exit ;
36582: GO 36906
// index := GetElementIndex ( minersList , unit ) ;
36584: LD_ADDR_VAR 0 6
36588: PUSH
36589: LD_EXP 118
36593: PPUSH
36594: LD_VAR 0 1
36598: PPUSH
36599: CALL 42102 0 2
36603: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36604: LD_ADDR_VAR 0 8
36608: PUSH
36609: LD_EXP 120
36613: PUSH
36614: LD_EXP 119
36618: PUSH
36619: LD_VAR 0 6
36623: ARRAY
36624: MINUS
36625: ST_TO_ADDR
// if not minesFreeAmount then
36626: LD_VAR 0 8
36630: NOT
36631: IFFALSE 36635
// exit ;
36633: GO 36906
// tmp := [ ] ;
36635: LD_ADDR_VAR 0 7
36639: PUSH
36640: EMPTY
36641: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36642: LD_ADDR_VAR 0 5
36646: PUSH
36647: DOUBLE
36648: LD_INT 1
36650: DEC
36651: ST_TO_ADDR
36652: LD_VAR 0 8
36656: PUSH
36657: FOR_TO
36658: IFFALSE 36853
// begin _d := rand ( 0 , 5 ) ;
36660: LD_ADDR_VAR 0 11
36664: PUSH
36665: LD_INT 0
36667: PPUSH
36668: LD_INT 5
36670: PPUSH
36671: CALL_OW 12
36675: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36676: LD_ADDR_VAR 0 12
36680: PUSH
36681: LD_INT 2
36683: PPUSH
36684: LD_INT 6
36686: PPUSH
36687: CALL_OW 12
36691: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36692: LD_ADDR_VAR 0 9
36696: PUSH
36697: LD_VAR 0 2
36701: PPUSH
36702: LD_VAR 0 11
36706: PPUSH
36707: LD_VAR 0 12
36711: PPUSH
36712: CALL_OW 272
36716: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36717: LD_ADDR_VAR 0 10
36721: PUSH
36722: LD_VAR 0 3
36726: PPUSH
36727: LD_VAR 0 11
36731: PPUSH
36732: LD_VAR 0 12
36736: PPUSH
36737: CALL_OW 273
36741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36742: LD_VAR 0 9
36746: PPUSH
36747: LD_VAR 0 10
36751: PPUSH
36752: CALL_OW 488
36756: PUSH
36757: LD_VAR 0 9
36761: PUSH
36762: LD_VAR 0 10
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_VAR 0 7
36775: IN
36776: NOT
36777: AND
36778: PUSH
36779: LD_VAR 0 9
36783: PPUSH
36784: LD_VAR 0 10
36788: PPUSH
36789: CALL_OW 458
36793: NOT
36794: AND
36795: IFFALSE 36837
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36797: LD_ADDR_VAR 0 7
36801: PUSH
36802: LD_VAR 0 7
36806: PPUSH
36807: LD_VAR 0 7
36811: PUSH
36812: LD_INT 1
36814: PLUS
36815: PPUSH
36816: LD_VAR 0 9
36820: PUSH
36821: LD_VAR 0 10
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PPUSH
36830: CALL_OW 1
36834: ST_TO_ADDR
36835: GO 36851
// i := i - 1 ;
36837: LD_ADDR_VAR 0 5
36841: PUSH
36842: LD_VAR 0 5
36846: PUSH
36847: LD_INT 1
36849: MINUS
36850: ST_TO_ADDR
// end ;
36851: GO 36657
36853: POP
36854: POP
// for i in tmp do
36855: LD_ADDR_VAR 0 5
36859: PUSH
36860: LD_VAR 0 7
36864: PUSH
36865: FOR_IN
36866: IFFALSE 36904
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36868: LD_VAR 0 1
36872: PPUSH
36873: LD_VAR 0 5
36877: PUSH
36878: LD_INT 1
36880: ARRAY
36881: PPUSH
36882: LD_VAR 0 5
36886: PUSH
36887: LD_INT 2
36889: ARRAY
36890: PPUSH
36891: CALL 35846 0 3
36895: NOT
36896: IFFALSE 36902
// exit ;
36898: POP
36899: POP
36900: GO 36906
36902: GO 36865
36904: POP
36905: POP
// end ;
36906: LD_VAR 0 4
36910: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36911: LD_INT 0
36913: PPUSH
36914: PPUSH
36915: PPUSH
36916: PPUSH
36917: PPUSH
36918: PPUSH
36919: PPUSH
// if not GetClass ( unit ) = class_sniper then
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 257
36929: PUSH
36930: LD_INT 5
36932: EQUAL
36933: NOT
36934: IFFALSE 36938
// exit ;
36936: GO 37326
// dist := 8 ;
36938: LD_ADDR_VAR 0 5
36942: PUSH
36943: LD_INT 8
36945: ST_TO_ADDR
// viewRange := 12 ;
36946: LD_ADDR_VAR 0 7
36950: PUSH
36951: LD_INT 12
36953: ST_TO_ADDR
// side := GetSide ( unit ) ;
36954: LD_ADDR_VAR 0 6
36958: PUSH
36959: LD_VAR 0 1
36963: PPUSH
36964: CALL_OW 255
36968: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36969: LD_INT 61
36971: PPUSH
36972: LD_VAR 0 6
36976: PPUSH
36977: CALL_OW 321
36981: PUSH
36982: LD_INT 2
36984: EQUAL
36985: IFFALSE 36995
// viewRange := 16 ;
36987: LD_ADDR_VAR 0 7
36991: PUSH
36992: LD_INT 16
36994: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36995: LD_VAR 0 1
36999: PPUSH
37000: LD_VAR 0 2
37004: PPUSH
37005: LD_VAR 0 3
37009: PPUSH
37010: CALL_OW 297
37014: PUSH
37015: LD_VAR 0 5
37019: GREATER
37020: IFFALSE 37099
// begin ComMoveXY ( unit , x , y ) ;
37022: LD_VAR 0 1
37026: PPUSH
37027: LD_VAR 0 2
37031: PPUSH
37032: LD_VAR 0 3
37036: PPUSH
37037: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37041: LD_INT 35
37043: PPUSH
37044: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37048: LD_VAR 0 1
37052: PPUSH
37053: LD_VAR 0 2
37057: PPUSH
37058: LD_VAR 0 3
37062: PPUSH
37063: CALL 72821 0 3
37067: NOT
37068: IFFALSE 37072
// exit ;
37070: GO 37326
// until GetDistUnitXY ( unit , x , y ) < dist ;
37072: LD_VAR 0 1
37076: PPUSH
37077: LD_VAR 0 2
37081: PPUSH
37082: LD_VAR 0 3
37086: PPUSH
37087: CALL_OW 297
37091: PUSH
37092: LD_VAR 0 5
37096: LESS
37097: IFFALSE 37041
// end ; ComTurnXY ( unit , x , y ) ;
37099: LD_VAR 0 1
37103: PPUSH
37104: LD_VAR 0 2
37108: PPUSH
37109: LD_VAR 0 3
37113: PPUSH
37114: CALL_OW 118
// wait ( 5 ) ;
37118: LD_INT 5
37120: PPUSH
37121: CALL_OW 67
// _d := GetDir ( unit ) ;
37125: LD_ADDR_VAR 0 10
37129: PUSH
37130: LD_VAR 0 1
37134: PPUSH
37135: CALL_OW 254
37139: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37140: LD_ADDR_VAR 0 8
37144: PUSH
37145: LD_VAR 0 1
37149: PPUSH
37150: CALL_OW 250
37154: PPUSH
37155: LD_VAR 0 10
37159: PPUSH
37160: LD_VAR 0 5
37164: PPUSH
37165: CALL_OW 272
37169: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37170: LD_ADDR_VAR 0 9
37174: PUSH
37175: LD_VAR 0 1
37179: PPUSH
37180: CALL_OW 251
37184: PPUSH
37185: LD_VAR 0 10
37189: PPUSH
37190: LD_VAR 0 5
37194: PPUSH
37195: CALL_OW 273
37199: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37200: LD_VAR 0 8
37204: PPUSH
37205: LD_VAR 0 9
37209: PPUSH
37210: CALL_OW 488
37214: NOT
37215: IFFALSE 37219
// exit ;
37217: GO 37326
// ComAnimCustom ( unit , 1 ) ;
37219: LD_VAR 0 1
37223: PPUSH
37224: LD_INT 1
37226: PPUSH
37227: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37231: LD_VAR 0 8
37235: PPUSH
37236: LD_VAR 0 9
37240: PPUSH
37241: LD_VAR 0 6
37245: PPUSH
37246: LD_VAR 0 7
37250: PPUSH
37251: CALL_OW 330
// repeat wait ( 1 ) ;
37255: LD_INT 1
37257: PPUSH
37258: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37262: LD_VAR 0 1
37266: PPUSH
37267: CALL_OW 316
37271: PUSH
37272: LD_VAR 0 1
37276: PPUSH
37277: CALL_OW 314
37281: OR
37282: PUSH
37283: LD_VAR 0 1
37287: PPUSH
37288: CALL_OW 302
37292: NOT
37293: OR
37294: PUSH
37295: LD_VAR 0 1
37299: PPUSH
37300: CALL_OW 301
37304: OR
37305: IFFALSE 37255
// RemoveSeeing ( _x , _y , side ) ;
37307: LD_VAR 0 8
37311: PPUSH
37312: LD_VAR 0 9
37316: PPUSH
37317: LD_VAR 0 6
37321: PPUSH
37322: CALL_OW 331
// end ; end_of_file
37326: LD_VAR 0 4
37330: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37331: LD_INT 0
37333: PPUSH
37334: PPUSH
// if exist_mode then
37335: LD_VAR 0 2
37339: IFFALSE 37364
// unit := CreateCharacter ( prefix & ident ) else
37341: LD_ADDR_VAR 0 5
37345: PUSH
37346: LD_VAR 0 3
37350: PUSH
37351: LD_VAR 0 1
37355: STR
37356: PPUSH
37357: CALL_OW 34
37361: ST_TO_ADDR
37362: GO 37379
// unit := NewCharacter ( ident ) ;
37364: LD_ADDR_VAR 0 5
37368: PUSH
37369: LD_VAR 0 1
37373: PPUSH
37374: CALL_OW 25
37378: ST_TO_ADDR
// result := unit ;
37379: LD_ADDR_VAR 0 4
37383: PUSH
37384: LD_VAR 0 5
37388: ST_TO_ADDR
// end ;
37389: LD_VAR 0 4
37393: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37394: LD_INT 0
37396: PPUSH
37397: PPUSH
// if not side or not nation then
37398: LD_VAR 0 1
37402: NOT
37403: PUSH
37404: LD_VAR 0 2
37408: NOT
37409: OR
37410: IFFALSE 37414
// exit ;
37412: GO 38182
// case nation of nation_american :
37414: LD_VAR 0 2
37418: PUSH
37419: LD_INT 1
37421: DOUBLE
37422: EQUAL
37423: IFTRUE 37427
37425: GO 37641
37427: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37428: LD_ADDR_VAR 0 4
37432: PUSH
37433: LD_INT 35
37435: PUSH
37436: LD_INT 45
37438: PUSH
37439: LD_INT 46
37441: PUSH
37442: LD_INT 47
37444: PUSH
37445: LD_INT 82
37447: PUSH
37448: LD_INT 83
37450: PUSH
37451: LD_INT 84
37453: PUSH
37454: LD_INT 85
37456: PUSH
37457: LD_INT 86
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: LD_INT 6
37468: PUSH
37469: LD_INT 15
37471: PUSH
37472: LD_INT 16
37474: PUSH
37475: LD_INT 7
37477: PUSH
37478: LD_INT 12
37480: PUSH
37481: LD_INT 13
37483: PUSH
37484: LD_INT 10
37486: PUSH
37487: LD_INT 14
37489: PUSH
37490: LD_INT 20
37492: PUSH
37493: LD_INT 21
37495: PUSH
37496: LD_INT 22
37498: PUSH
37499: LD_INT 25
37501: PUSH
37502: LD_INT 32
37504: PUSH
37505: LD_INT 27
37507: PUSH
37508: LD_INT 36
37510: PUSH
37511: LD_INT 69
37513: PUSH
37514: LD_INT 39
37516: PUSH
37517: LD_INT 34
37519: PUSH
37520: LD_INT 40
37522: PUSH
37523: LD_INT 48
37525: PUSH
37526: LD_INT 49
37528: PUSH
37529: LD_INT 50
37531: PUSH
37532: LD_INT 51
37534: PUSH
37535: LD_INT 52
37537: PUSH
37538: LD_INT 53
37540: PUSH
37541: LD_INT 54
37543: PUSH
37544: LD_INT 55
37546: PUSH
37547: LD_INT 56
37549: PUSH
37550: LD_INT 57
37552: PUSH
37553: LD_INT 58
37555: PUSH
37556: LD_INT 59
37558: PUSH
37559: LD_INT 60
37561: PUSH
37562: LD_INT 61
37564: PUSH
37565: LD_INT 62
37567: PUSH
37568: LD_INT 80
37570: PUSH
37571: LD_INT 82
37573: PUSH
37574: LD_INT 83
37576: PUSH
37577: LD_INT 84
37579: PUSH
37580: LD_INT 85
37582: PUSH
37583: LD_INT 86
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
37639: GO 38106
37641: LD_INT 2
37643: DOUBLE
37644: EQUAL
37645: IFTRUE 37649
37647: GO 37875
37649: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37650: LD_ADDR_VAR 0 4
37654: PUSH
37655: LD_INT 35
37657: PUSH
37658: LD_INT 45
37660: PUSH
37661: LD_INT 46
37663: PUSH
37664: LD_INT 47
37666: PUSH
37667: LD_INT 82
37669: PUSH
37670: LD_INT 83
37672: PUSH
37673: LD_INT 84
37675: PUSH
37676: LD_INT 85
37678: PUSH
37679: LD_INT 87
37681: PUSH
37682: LD_INT 70
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: LD_INT 11
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: LD_INT 4
37696: PUSH
37697: LD_INT 5
37699: PUSH
37700: LD_INT 6
37702: PUSH
37703: LD_INT 15
37705: PUSH
37706: LD_INT 18
37708: PUSH
37709: LD_INT 7
37711: PUSH
37712: LD_INT 17
37714: PUSH
37715: LD_INT 8
37717: PUSH
37718: LD_INT 20
37720: PUSH
37721: LD_INT 21
37723: PUSH
37724: LD_INT 22
37726: PUSH
37727: LD_INT 72
37729: PUSH
37730: LD_INT 26
37732: PUSH
37733: LD_INT 69
37735: PUSH
37736: LD_INT 39
37738: PUSH
37739: LD_INT 40
37741: PUSH
37742: LD_INT 41
37744: PUSH
37745: LD_INT 42
37747: PUSH
37748: LD_INT 43
37750: PUSH
37751: LD_INT 48
37753: PUSH
37754: LD_INT 49
37756: PUSH
37757: LD_INT 50
37759: PUSH
37760: LD_INT 51
37762: PUSH
37763: LD_INT 52
37765: PUSH
37766: LD_INT 53
37768: PUSH
37769: LD_INT 54
37771: PUSH
37772: LD_INT 55
37774: PUSH
37775: LD_INT 56
37777: PUSH
37778: LD_INT 60
37780: PUSH
37781: LD_INT 61
37783: PUSH
37784: LD_INT 62
37786: PUSH
37787: LD_INT 66
37789: PUSH
37790: LD_INT 67
37792: PUSH
37793: LD_INT 68
37795: PUSH
37796: LD_INT 81
37798: PUSH
37799: LD_INT 82
37801: PUSH
37802: LD_INT 83
37804: PUSH
37805: LD_INT 84
37807: PUSH
37808: LD_INT 85
37810: PUSH
37811: LD_INT 87
37813: PUSH
37814: LD_INT 88
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: ST_TO_ADDR
37873: GO 38106
37875: LD_INT 3
37877: DOUBLE
37878: EQUAL
37879: IFTRUE 37883
37881: GO 38105
37883: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37884: LD_ADDR_VAR 0 4
37888: PUSH
37889: LD_INT 46
37891: PUSH
37892: LD_INT 47
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: LD_INT 82
37903: PUSH
37904: LD_INT 83
37906: PUSH
37907: LD_INT 84
37909: PUSH
37910: LD_INT 85
37912: PUSH
37913: LD_INT 86
37915: PUSH
37916: LD_INT 11
37918: PUSH
37919: LD_INT 9
37921: PUSH
37922: LD_INT 20
37924: PUSH
37925: LD_INT 19
37927: PUSH
37928: LD_INT 21
37930: PUSH
37931: LD_INT 24
37933: PUSH
37934: LD_INT 22
37936: PUSH
37937: LD_INT 25
37939: PUSH
37940: LD_INT 28
37942: PUSH
37943: LD_INT 29
37945: PUSH
37946: LD_INT 30
37948: PUSH
37949: LD_INT 31
37951: PUSH
37952: LD_INT 37
37954: PUSH
37955: LD_INT 38
37957: PUSH
37958: LD_INT 32
37960: PUSH
37961: LD_INT 27
37963: PUSH
37964: LD_INT 33
37966: PUSH
37967: LD_INT 69
37969: PUSH
37970: LD_INT 39
37972: PUSH
37973: LD_INT 34
37975: PUSH
37976: LD_INT 40
37978: PUSH
37979: LD_INT 71
37981: PUSH
37982: LD_INT 23
37984: PUSH
37985: LD_INT 44
37987: PUSH
37988: LD_INT 48
37990: PUSH
37991: LD_INT 49
37993: PUSH
37994: LD_INT 50
37996: PUSH
37997: LD_INT 51
37999: PUSH
38000: LD_INT 52
38002: PUSH
38003: LD_INT 53
38005: PUSH
38006: LD_INT 54
38008: PUSH
38009: LD_INT 55
38011: PUSH
38012: LD_INT 56
38014: PUSH
38015: LD_INT 57
38017: PUSH
38018: LD_INT 58
38020: PUSH
38021: LD_INT 59
38023: PUSH
38024: LD_INT 63
38026: PUSH
38027: LD_INT 64
38029: PUSH
38030: LD_INT 65
38032: PUSH
38033: LD_INT 82
38035: PUSH
38036: LD_INT 83
38038: PUSH
38039: LD_INT 84
38041: PUSH
38042: LD_INT 85
38044: PUSH
38045: LD_INT 86
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: ST_TO_ADDR
38103: GO 38106
38105: POP
// if state > - 1 and state < 3 then
38106: LD_VAR 0 3
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: GREATER
38115: PUSH
38116: LD_VAR 0 3
38120: PUSH
38121: LD_INT 3
38123: LESS
38124: AND
38125: IFFALSE 38182
// for i in result do
38127: LD_ADDR_VAR 0 5
38131: PUSH
38132: LD_VAR 0 4
38136: PUSH
38137: FOR_IN
38138: IFFALSE 38180
// if GetTech ( i , side ) <> state then
38140: LD_VAR 0 5
38144: PPUSH
38145: LD_VAR 0 1
38149: PPUSH
38150: CALL_OW 321
38154: PUSH
38155: LD_VAR 0 3
38159: NONEQUAL
38160: IFFALSE 38178
// result := result diff i ;
38162: LD_ADDR_VAR 0 4
38166: PUSH
38167: LD_VAR 0 4
38171: PUSH
38172: LD_VAR 0 5
38176: DIFF
38177: ST_TO_ADDR
38178: GO 38137
38180: POP
38181: POP
// end ;
38182: LD_VAR 0 4
38186: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38187: LD_INT 0
38189: PPUSH
38190: PPUSH
38191: PPUSH
// result := true ;
38192: LD_ADDR_VAR 0 3
38196: PUSH
38197: LD_INT 1
38199: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38200: LD_ADDR_VAR 0 5
38204: PUSH
38205: LD_VAR 0 2
38209: PPUSH
38210: CALL_OW 480
38214: ST_TO_ADDR
// if not tmp then
38215: LD_VAR 0 5
38219: NOT
38220: IFFALSE 38224
// exit ;
38222: GO 38273
// for i in tmp do
38224: LD_ADDR_VAR 0 4
38228: PUSH
38229: LD_VAR 0 5
38233: PUSH
38234: FOR_IN
38235: IFFALSE 38271
// if GetTech ( i , side ) <> state_researched then
38237: LD_VAR 0 4
38241: PPUSH
38242: LD_VAR 0 1
38246: PPUSH
38247: CALL_OW 321
38251: PUSH
38252: LD_INT 2
38254: NONEQUAL
38255: IFFALSE 38269
// begin result := false ;
38257: LD_ADDR_VAR 0 3
38261: PUSH
38262: LD_INT 0
38264: ST_TO_ADDR
// exit ;
38265: POP
38266: POP
38267: GO 38273
// end ;
38269: GO 38234
38271: POP
38272: POP
// end ;
38273: LD_VAR 0 3
38277: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38278: LD_INT 0
38280: PPUSH
38281: PPUSH
38282: PPUSH
38283: PPUSH
38284: PPUSH
38285: PPUSH
38286: PPUSH
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
38291: PPUSH
38292: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38293: LD_VAR 0 1
38297: NOT
38298: PUSH
38299: LD_VAR 0 1
38303: PPUSH
38304: CALL_OW 257
38308: PUSH
38309: LD_INT 9
38311: NONEQUAL
38312: OR
38313: IFFALSE 38317
// exit ;
38315: GO 38890
// side := GetSide ( unit ) ;
38317: LD_ADDR_VAR 0 9
38321: PUSH
38322: LD_VAR 0 1
38326: PPUSH
38327: CALL_OW 255
38331: ST_TO_ADDR
// tech_space := tech_spacanom ;
38332: LD_ADDR_VAR 0 12
38336: PUSH
38337: LD_INT 29
38339: ST_TO_ADDR
// tech_time := tech_taurad ;
38340: LD_ADDR_VAR 0 13
38344: PUSH
38345: LD_INT 28
38347: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38348: LD_ADDR_VAR 0 11
38352: PUSH
38353: LD_VAR 0 1
38357: PPUSH
38358: CALL_OW 310
38362: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38363: LD_VAR 0 11
38367: PPUSH
38368: CALL_OW 247
38372: PUSH
38373: LD_INT 2
38375: EQUAL
38376: IFFALSE 38380
// exit ;
38378: GO 38890
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38380: LD_ADDR_VAR 0 8
38384: PUSH
38385: LD_INT 81
38387: PUSH
38388: LD_VAR 0 9
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 3
38399: PUSH
38400: LD_INT 21
38402: PUSH
38403: LD_INT 3
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PPUSH
38418: CALL_OW 69
38422: ST_TO_ADDR
// if not tmp then
38423: LD_VAR 0 8
38427: NOT
38428: IFFALSE 38432
// exit ;
38430: GO 38890
// if in_unit then
38432: LD_VAR 0 11
38436: IFFALSE 38460
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38438: LD_ADDR_VAR 0 10
38442: PUSH
38443: LD_VAR 0 8
38447: PPUSH
38448: LD_VAR 0 11
38452: PPUSH
38453: CALL_OW 74
38457: ST_TO_ADDR
38458: GO 38480
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38460: LD_ADDR_VAR 0 10
38464: PUSH
38465: LD_VAR 0 8
38469: PPUSH
38470: LD_VAR 0 1
38474: PPUSH
38475: CALL_OW 74
38479: ST_TO_ADDR
// if not enemy then
38480: LD_VAR 0 10
38484: NOT
38485: IFFALSE 38489
// exit ;
38487: GO 38890
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38489: LD_VAR 0 11
38493: PUSH
38494: LD_VAR 0 11
38498: PPUSH
38499: LD_VAR 0 10
38503: PPUSH
38504: CALL_OW 296
38508: PUSH
38509: LD_INT 13
38511: GREATER
38512: AND
38513: PUSH
38514: LD_VAR 0 1
38518: PPUSH
38519: LD_VAR 0 10
38523: PPUSH
38524: CALL_OW 296
38528: PUSH
38529: LD_INT 12
38531: GREATER
38532: OR
38533: IFFALSE 38537
// exit ;
38535: GO 38890
// missile := [ 1 ] ;
38537: LD_ADDR_VAR 0 14
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38548: LD_VAR 0 9
38552: PPUSH
38553: LD_VAR 0 12
38557: PPUSH
38558: CALL_OW 325
38562: IFFALSE 38591
// missile := Replace ( missile , missile + 1 , 2 ) ;
38564: LD_ADDR_VAR 0 14
38568: PUSH
38569: LD_VAR 0 14
38573: PPUSH
38574: LD_VAR 0 14
38578: PUSH
38579: LD_INT 1
38581: PLUS
38582: PPUSH
38583: LD_INT 2
38585: PPUSH
38586: CALL_OW 1
38590: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38591: LD_VAR 0 9
38595: PPUSH
38596: LD_VAR 0 13
38600: PPUSH
38601: CALL_OW 325
38605: PUSH
38606: LD_VAR 0 10
38610: PPUSH
38611: CALL_OW 255
38615: PPUSH
38616: LD_VAR 0 13
38620: PPUSH
38621: CALL_OW 325
38625: NOT
38626: AND
38627: IFFALSE 38656
// missile := Replace ( missile , missile + 1 , 3 ) ;
38629: LD_ADDR_VAR 0 14
38633: PUSH
38634: LD_VAR 0 14
38638: PPUSH
38639: LD_VAR 0 14
38643: PUSH
38644: LD_INT 1
38646: PLUS
38647: PPUSH
38648: LD_INT 3
38650: PPUSH
38651: CALL_OW 1
38655: ST_TO_ADDR
// if missile < 2 then
38656: LD_VAR 0 14
38660: PUSH
38661: LD_INT 2
38663: LESS
38664: IFFALSE 38668
// exit ;
38666: GO 38890
// x := GetX ( enemy ) ;
38668: LD_ADDR_VAR 0 4
38672: PUSH
38673: LD_VAR 0 10
38677: PPUSH
38678: CALL_OW 250
38682: ST_TO_ADDR
// y := GetY ( enemy ) ;
38683: LD_ADDR_VAR 0 5
38687: PUSH
38688: LD_VAR 0 10
38692: PPUSH
38693: CALL_OW 251
38697: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38698: LD_ADDR_VAR 0 6
38702: PUSH
38703: LD_VAR 0 4
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PPUSH
38712: LD_INT 1
38714: PPUSH
38715: CALL_OW 12
38719: PLUS
38720: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38721: LD_ADDR_VAR 0 7
38725: PUSH
38726: LD_VAR 0 5
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PPUSH
38735: LD_INT 1
38737: PPUSH
38738: CALL_OW 12
38742: PLUS
38743: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38744: LD_VAR 0 6
38748: PPUSH
38749: LD_VAR 0 7
38753: PPUSH
38754: CALL_OW 488
38758: NOT
38759: IFFALSE 38781
// begin _x := x ;
38761: LD_ADDR_VAR 0 6
38765: PUSH
38766: LD_VAR 0 4
38770: ST_TO_ADDR
// _y := y ;
38771: LD_ADDR_VAR 0 7
38775: PUSH
38776: LD_VAR 0 5
38780: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38781: LD_ADDR_VAR 0 3
38785: PUSH
38786: LD_INT 1
38788: PPUSH
38789: LD_VAR 0 14
38793: PPUSH
38794: CALL_OW 12
38798: ST_TO_ADDR
// case i of 1 :
38799: LD_VAR 0 3
38803: PUSH
38804: LD_INT 1
38806: DOUBLE
38807: EQUAL
38808: IFTRUE 38812
38810: GO 38829
38812: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38813: LD_VAR 0 1
38817: PPUSH
38818: LD_VAR 0 10
38822: PPUSH
38823: CALL_OW 115
38827: GO 38890
38829: LD_INT 2
38831: DOUBLE
38832: EQUAL
38833: IFTRUE 38837
38835: GO 38859
38837: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38838: LD_VAR 0 1
38842: PPUSH
38843: LD_VAR 0 6
38847: PPUSH
38848: LD_VAR 0 7
38852: PPUSH
38853: CALL_OW 153
38857: GO 38890
38859: LD_INT 3
38861: DOUBLE
38862: EQUAL
38863: IFTRUE 38867
38865: GO 38889
38867: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38868: LD_VAR 0 1
38872: PPUSH
38873: LD_VAR 0 6
38877: PPUSH
38878: LD_VAR 0 7
38882: PPUSH
38883: CALL_OW 154
38887: GO 38890
38889: POP
// end ;
38890: LD_VAR 0 2
38894: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38895: LD_INT 0
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
// if not unit or not building then
38903: LD_VAR 0 1
38907: NOT
38908: PUSH
38909: LD_VAR 0 2
38913: NOT
38914: OR
38915: IFFALSE 38919
// exit ;
38917: GO 39077
// x := GetX ( building ) ;
38919: LD_ADDR_VAR 0 5
38923: PUSH
38924: LD_VAR 0 2
38928: PPUSH
38929: CALL_OW 250
38933: ST_TO_ADDR
// y := GetY ( building ) ;
38934: LD_ADDR_VAR 0 6
38938: PUSH
38939: LD_VAR 0 2
38943: PPUSH
38944: CALL_OW 251
38948: ST_TO_ADDR
// for i = 0 to 5 do
38949: LD_ADDR_VAR 0 4
38953: PUSH
38954: DOUBLE
38955: LD_INT 0
38957: DEC
38958: ST_TO_ADDR
38959: LD_INT 5
38961: PUSH
38962: FOR_TO
38963: IFFALSE 39075
// begin _x := ShiftX ( x , i , 3 ) ;
38965: LD_ADDR_VAR 0 7
38969: PUSH
38970: LD_VAR 0 5
38974: PPUSH
38975: LD_VAR 0 4
38979: PPUSH
38980: LD_INT 3
38982: PPUSH
38983: CALL_OW 272
38987: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38988: LD_ADDR_VAR 0 8
38992: PUSH
38993: LD_VAR 0 6
38997: PPUSH
38998: LD_VAR 0 4
39002: PPUSH
39003: LD_INT 3
39005: PPUSH
39006: CALL_OW 273
39010: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39011: LD_VAR 0 7
39015: PPUSH
39016: LD_VAR 0 8
39020: PPUSH
39021: CALL_OW 488
39025: NOT
39026: IFFALSE 39030
// continue ;
39028: GO 38962
// if HexInfo ( _x , _y ) = 0 then
39030: LD_VAR 0 7
39034: PPUSH
39035: LD_VAR 0 8
39039: PPUSH
39040: CALL_OW 428
39044: PUSH
39045: LD_INT 0
39047: EQUAL
39048: IFFALSE 39073
// begin ComMoveXY ( unit , _x , _y ) ;
39050: LD_VAR 0 1
39054: PPUSH
39055: LD_VAR 0 7
39059: PPUSH
39060: LD_VAR 0 8
39064: PPUSH
39065: CALL_OW 111
// exit ;
39069: POP
39070: POP
39071: GO 39077
// end ; end ;
39073: GO 38962
39075: POP
39076: POP
// end ;
39077: LD_VAR 0 3
39081: RET
// export function ScanBase ( side , base_area ) ; begin
39082: LD_INT 0
39084: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39085: LD_ADDR_VAR 0 3
39089: PUSH
39090: LD_VAR 0 2
39094: PPUSH
39095: LD_INT 81
39097: PUSH
39098: LD_VAR 0 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PPUSH
39107: CALL_OW 70
39111: ST_TO_ADDR
// end ;
39112: LD_VAR 0 3
39116: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39117: LD_INT 0
39119: PPUSH
39120: PPUSH
39121: PPUSH
39122: PPUSH
// result := false ;
39123: LD_ADDR_VAR 0 2
39127: PUSH
39128: LD_INT 0
39130: ST_TO_ADDR
// side := GetSide ( unit ) ;
39131: LD_ADDR_VAR 0 3
39135: PUSH
39136: LD_VAR 0 1
39140: PPUSH
39141: CALL_OW 255
39145: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39146: LD_ADDR_VAR 0 4
39150: PUSH
39151: LD_VAR 0 1
39155: PPUSH
39156: CALL_OW 248
39160: ST_TO_ADDR
// case nat of 1 :
39161: LD_VAR 0 4
39165: PUSH
39166: LD_INT 1
39168: DOUBLE
39169: EQUAL
39170: IFTRUE 39174
39172: GO 39185
39174: POP
// tech := tech_lassight ; 2 :
39175: LD_ADDR_VAR 0 5
39179: PUSH
39180: LD_INT 12
39182: ST_TO_ADDR
39183: GO 39224
39185: LD_INT 2
39187: DOUBLE
39188: EQUAL
39189: IFTRUE 39193
39191: GO 39204
39193: POP
// tech := tech_mortar ; 3 :
39194: LD_ADDR_VAR 0 5
39198: PUSH
39199: LD_INT 41
39201: ST_TO_ADDR
39202: GO 39224
39204: LD_INT 3
39206: DOUBLE
39207: EQUAL
39208: IFTRUE 39212
39210: GO 39223
39212: POP
// tech := tech_bazooka ; end ;
39213: LD_ADDR_VAR 0 5
39217: PUSH
39218: LD_INT 44
39220: ST_TO_ADDR
39221: GO 39224
39223: POP
// if Researched ( side , tech ) then
39224: LD_VAR 0 3
39228: PPUSH
39229: LD_VAR 0 5
39233: PPUSH
39234: CALL_OW 325
39238: IFFALSE 39265
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39240: LD_ADDR_VAR 0 2
39244: PUSH
39245: LD_INT 5
39247: PUSH
39248: LD_INT 8
39250: PUSH
39251: LD_INT 9
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: PUSH
39259: LD_VAR 0 4
39263: ARRAY
39264: ST_TO_ADDR
// end ;
39265: LD_VAR 0 2
39269: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39270: LD_INT 0
39272: PPUSH
39273: PPUSH
39274: PPUSH
// if not mines then
39275: LD_VAR 0 2
39279: NOT
39280: IFFALSE 39284
// exit ;
39282: GO 39428
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39284: LD_ADDR_VAR 0 5
39288: PUSH
39289: LD_INT 81
39291: PUSH
39292: LD_VAR 0 1
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 3
39303: PUSH
39304: LD_INT 21
39306: PUSH
39307: LD_INT 3
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PPUSH
39322: CALL_OW 69
39326: ST_TO_ADDR
// for i in mines do
39327: LD_ADDR_VAR 0 4
39331: PUSH
39332: LD_VAR 0 2
39336: PUSH
39337: FOR_IN
39338: IFFALSE 39426
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39340: LD_VAR 0 4
39344: PUSH
39345: LD_INT 1
39347: ARRAY
39348: PPUSH
39349: LD_VAR 0 4
39353: PUSH
39354: LD_INT 2
39356: ARRAY
39357: PPUSH
39358: CALL_OW 458
39362: NOT
39363: IFFALSE 39367
// continue ;
39365: GO 39337
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39367: LD_VAR 0 4
39371: PUSH
39372: LD_INT 1
39374: ARRAY
39375: PPUSH
39376: LD_VAR 0 4
39380: PUSH
39381: LD_INT 2
39383: ARRAY
39384: PPUSH
39385: CALL_OW 428
39389: PUSH
39390: LD_VAR 0 5
39394: IN
39395: IFFALSE 39424
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39397: LD_VAR 0 4
39401: PUSH
39402: LD_INT 1
39404: ARRAY
39405: PPUSH
39406: LD_VAR 0 4
39410: PUSH
39411: LD_INT 2
39413: ARRAY
39414: PPUSH
39415: LD_VAR 0 1
39419: PPUSH
39420: CALL_OW 456
// end ;
39424: GO 39337
39426: POP
39427: POP
// end ;
39428: LD_VAR 0 3
39432: RET
// export function Count ( array ) ; var i ; begin
39433: LD_INT 0
39435: PPUSH
39436: PPUSH
// result := 0 ;
39437: LD_ADDR_VAR 0 2
39441: PUSH
39442: LD_INT 0
39444: ST_TO_ADDR
// for i in array do
39445: LD_ADDR_VAR 0 3
39449: PUSH
39450: LD_VAR 0 1
39454: PUSH
39455: FOR_IN
39456: IFFALSE 39480
// if i then
39458: LD_VAR 0 3
39462: IFFALSE 39478
// result := result + 1 ;
39464: LD_ADDR_VAR 0 2
39468: PUSH
39469: LD_VAR 0 2
39473: PUSH
39474: LD_INT 1
39476: PLUS
39477: ST_TO_ADDR
39478: GO 39455
39480: POP
39481: POP
// end ;
39482: LD_VAR 0 2
39486: RET
// export function IsEmpty ( building ) ; begin
39487: LD_INT 0
39489: PPUSH
// if not building then
39490: LD_VAR 0 1
39494: NOT
39495: IFFALSE 39499
// exit ;
39497: GO 39542
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39499: LD_ADDR_VAR 0 2
39503: PUSH
39504: LD_VAR 0 1
39508: PUSH
39509: LD_INT 22
39511: PUSH
39512: LD_VAR 0 1
39516: PPUSH
39517: CALL_OW 255
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 58
39528: PUSH
39529: EMPTY
39530: LIST
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PPUSH
39536: CALL_OW 69
39540: IN
39541: ST_TO_ADDR
// end ;
39542: LD_VAR 0 2
39546: RET
// export function IsNotFull ( building ) ; begin
39547: LD_INT 0
39549: PPUSH
// if not building then
39550: LD_VAR 0 1
39554: NOT
39555: IFFALSE 39559
// exit ;
39557: GO 39578
// result := UnitsInside ( building ) < 6 ;
39559: LD_ADDR_VAR 0 2
39563: PUSH
39564: LD_VAR 0 1
39568: PPUSH
39569: CALL_OW 313
39573: PUSH
39574: LD_INT 6
39576: LESS
39577: ST_TO_ADDR
// end ;
39578: LD_VAR 0 2
39582: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39583: LD_INT 0
39585: PPUSH
39586: PPUSH
39587: PPUSH
39588: PPUSH
// tmp := [ ] ;
39589: LD_ADDR_VAR 0 3
39593: PUSH
39594: EMPTY
39595: ST_TO_ADDR
// list := [ ] ;
39596: LD_ADDR_VAR 0 5
39600: PUSH
39601: EMPTY
39602: ST_TO_ADDR
// for i = 16 to 25 do
39603: LD_ADDR_VAR 0 4
39607: PUSH
39608: DOUBLE
39609: LD_INT 16
39611: DEC
39612: ST_TO_ADDR
39613: LD_INT 25
39615: PUSH
39616: FOR_TO
39617: IFFALSE 39690
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39619: LD_ADDR_VAR 0 3
39623: PUSH
39624: LD_VAR 0 3
39628: PUSH
39629: LD_INT 22
39631: PUSH
39632: LD_VAR 0 1
39636: PPUSH
39637: CALL_OW 255
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 91
39648: PUSH
39649: LD_VAR 0 1
39653: PUSH
39654: LD_INT 6
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 30
39664: PUSH
39665: LD_VAR 0 4
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: PUSH
39679: EMPTY
39680: LIST
39681: PPUSH
39682: CALL_OW 69
39686: ADD
39687: ST_TO_ADDR
39688: GO 39616
39690: POP
39691: POP
// for i = 1 to tmp do
39692: LD_ADDR_VAR 0 4
39696: PUSH
39697: DOUBLE
39698: LD_INT 1
39700: DEC
39701: ST_TO_ADDR
39702: LD_VAR 0 3
39706: PUSH
39707: FOR_TO
39708: IFFALSE 39796
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39710: LD_ADDR_VAR 0 5
39714: PUSH
39715: LD_VAR 0 5
39719: PUSH
39720: LD_VAR 0 3
39724: PUSH
39725: LD_VAR 0 4
39729: ARRAY
39730: PPUSH
39731: CALL_OW 266
39735: PUSH
39736: LD_VAR 0 3
39740: PUSH
39741: LD_VAR 0 4
39745: ARRAY
39746: PPUSH
39747: CALL_OW 250
39751: PUSH
39752: LD_VAR 0 3
39756: PUSH
39757: LD_VAR 0 4
39761: ARRAY
39762: PPUSH
39763: CALL_OW 251
39767: PUSH
39768: LD_VAR 0 3
39772: PUSH
39773: LD_VAR 0 4
39777: ARRAY
39778: PPUSH
39779: CALL_OW 254
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: PUSH
39790: EMPTY
39791: LIST
39792: ADD
39793: ST_TO_ADDR
39794: GO 39707
39796: POP
39797: POP
// result := list ;
39798: LD_ADDR_VAR 0 2
39802: PUSH
39803: LD_VAR 0 5
39807: ST_TO_ADDR
// end ;
39808: LD_VAR 0 2
39812: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39813: LD_INT 0
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
// if not factory then
39822: LD_VAR 0 1
39826: NOT
39827: IFFALSE 39831
// exit ;
39829: GO 40424
// if control = control_apeman then
39831: LD_VAR 0 4
39835: PUSH
39836: LD_INT 5
39838: EQUAL
39839: IFFALSE 39948
// begin tmp := UnitsInside ( factory ) ;
39841: LD_ADDR_VAR 0 8
39845: PUSH
39846: LD_VAR 0 1
39850: PPUSH
39851: CALL_OW 313
39855: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39856: LD_VAR 0 8
39860: PPUSH
39861: LD_INT 25
39863: PUSH
39864: LD_INT 12
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PPUSH
39871: CALL_OW 72
39875: NOT
39876: IFFALSE 39886
// control := control_manual ;
39878: LD_ADDR_VAR 0 4
39882: PUSH
39883: LD_INT 1
39885: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39886: LD_ADDR_VAR 0 8
39890: PUSH
39891: LD_VAR 0 1
39895: PPUSH
39896: CALL 39583 0 1
39900: ST_TO_ADDR
// if tmp then
39901: LD_VAR 0 8
39905: IFFALSE 39948
// begin for i in tmp do
39907: LD_ADDR_VAR 0 7
39911: PUSH
39912: LD_VAR 0 8
39916: PUSH
39917: FOR_IN
39918: IFFALSE 39946
// if i [ 1 ] = b_ext_radio then
39920: LD_VAR 0 7
39924: PUSH
39925: LD_INT 1
39927: ARRAY
39928: PUSH
39929: LD_INT 22
39931: EQUAL
39932: IFFALSE 39944
// begin control := control_remote ;
39934: LD_ADDR_VAR 0 4
39938: PUSH
39939: LD_INT 2
39941: ST_TO_ADDR
// break ;
39942: GO 39946
// end ;
39944: GO 39917
39946: POP
39947: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39948: LD_VAR 0 1
39952: PPUSH
39953: LD_VAR 0 2
39957: PPUSH
39958: LD_VAR 0 3
39962: PPUSH
39963: LD_VAR 0 4
39967: PPUSH
39968: LD_VAR 0 5
39972: PPUSH
39973: CALL_OW 448
39977: IFFALSE 40012
// begin result := [ chassis , engine , control , weapon ] ;
39979: LD_ADDR_VAR 0 6
39983: PUSH
39984: LD_VAR 0 2
39988: PUSH
39989: LD_VAR 0 3
39993: PUSH
39994: LD_VAR 0 4
39998: PUSH
39999: LD_VAR 0 5
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: ST_TO_ADDR
// exit ;
40010: GO 40424
// end ; _chassis := AvailableChassisList ( factory ) ;
40012: LD_ADDR_VAR 0 9
40016: PUSH
40017: LD_VAR 0 1
40021: PPUSH
40022: CALL_OW 475
40026: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40027: LD_ADDR_VAR 0 11
40031: PUSH
40032: LD_VAR 0 1
40036: PPUSH
40037: CALL_OW 476
40041: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40042: LD_ADDR_VAR 0 12
40046: PUSH
40047: LD_VAR 0 1
40051: PPUSH
40052: CALL_OW 477
40056: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40057: LD_ADDR_VAR 0 10
40061: PUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 478
40071: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40072: LD_VAR 0 9
40076: NOT
40077: PUSH
40078: LD_VAR 0 11
40082: NOT
40083: OR
40084: PUSH
40085: LD_VAR 0 12
40089: NOT
40090: OR
40091: PUSH
40092: LD_VAR 0 10
40096: NOT
40097: OR
40098: IFFALSE 40133
// begin result := [ chassis , engine , control , weapon ] ;
40100: LD_ADDR_VAR 0 6
40104: PUSH
40105: LD_VAR 0 2
40109: PUSH
40110: LD_VAR 0 3
40114: PUSH
40115: LD_VAR 0 4
40119: PUSH
40120: LD_VAR 0 5
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: ST_TO_ADDR
// exit ;
40131: GO 40424
// end ; if not chassis in _chassis then
40133: LD_VAR 0 2
40137: PUSH
40138: LD_VAR 0 9
40142: IN
40143: NOT
40144: IFFALSE 40170
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40146: LD_ADDR_VAR 0 2
40150: PUSH
40151: LD_VAR 0 9
40155: PUSH
40156: LD_INT 1
40158: PPUSH
40159: LD_VAR 0 9
40163: PPUSH
40164: CALL_OW 12
40168: ARRAY
40169: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40170: LD_VAR 0 2
40174: PPUSH
40175: LD_VAR 0 3
40179: PPUSH
40180: CALL 40429 0 2
40184: NOT
40185: IFFALSE 40244
// repeat engine := _engine [ 1 ] ;
40187: LD_ADDR_VAR 0 3
40191: PUSH
40192: LD_VAR 0 11
40196: PUSH
40197: LD_INT 1
40199: ARRAY
40200: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40201: LD_ADDR_VAR 0 11
40205: PUSH
40206: LD_VAR 0 11
40210: PPUSH
40211: LD_INT 1
40213: PPUSH
40214: CALL_OW 3
40218: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40219: LD_VAR 0 2
40223: PPUSH
40224: LD_VAR 0 3
40228: PPUSH
40229: CALL 40429 0 2
40233: PUSH
40234: LD_VAR 0 11
40238: PUSH
40239: EMPTY
40240: EQUAL
40241: OR
40242: IFFALSE 40187
// if not control in _control then
40244: LD_VAR 0 4
40248: PUSH
40249: LD_VAR 0 12
40253: IN
40254: NOT
40255: IFFALSE 40281
// control := _control [ rand ( 1 , _control ) ] ;
40257: LD_ADDR_VAR 0 4
40261: PUSH
40262: LD_VAR 0 12
40266: PUSH
40267: LD_INT 1
40269: PPUSH
40270: LD_VAR 0 12
40274: PPUSH
40275: CALL_OW 12
40279: ARRAY
40280: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40281: LD_VAR 0 2
40285: PPUSH
40286: LD_VAR 0 5
40290: PPUSH
40291: CALL 40649 0 2
40295: NOT
40296: IFFALSE 40355
// repeat weapon := _weapon [ 1 ] ;
40298: LD_ADDR_VAR 0 5
40302: PUSH
40303: LD_VAR 0 10
40307: PUSH
40308: LD_INT 1
40310: ARRAY
40311: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40312: LD_ADDR_VAR 0 10
40316: PUSH
40317: LD_VAR 0 10
40321: PPUSH
40322: LD_INT 1
40324: PPUSH
40325: CALL_OW 3
40329: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40330: LD_VAR 0 2
40334: PPUSH
40335: LD_VAR 0 5
40339: PPUSH
40340: CALL 40649 0 2
40344: PUSH
40345: LD_VAR 0 10
40349: PUSH
40350: EMPTY
40351: EQUAL
40352: OR
40353: IFFALSE 40298
// result := [ ] ;
40355: LD_ADDR_VAR 0 6
40359: PUSH
40360: EMPTY
40361: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40362: LD_VAR 0 1
40366: PPUSH
40367: LD_VAR 0 2
40371: PPUSH
40372: LD_VAR 0 3
40376: PPUSH
40377: LD_VAR 0 4
40381: PPUSH
40382: LD_VAR 0 5
40386: PPUSH
40387: CALL_OW 448
40391: IFFALSE 40424
// result := [ chassis , engine , control , weapon ] ;
40393: LD_ADDR_VAR 0 6
40397: PUSH
40398: LD_VAR 0 2
40402: PUSH
40403: LD_VAR 0 3
40407: PUSH
40408: LD_VAR 0 4
40412: PUSH
40413: LD_VAR 0 5
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: ST_TO_ADDR
// end ;
40424: LD_VAR 0 6
40428: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40429: LD_INT 0
40431: PPUSH
// if not chassis or not engine then
40432: LD_VAR 0 1
40436: NOT
40437: PUSH
40438: LD_VAR 0 2
40442: NOT
40443: OR
40444: IFFALSE 40448
// exit ;
40446: GO 40644
// case engine of engine_solar :
40448: LD_VAR 0 2
40452: PUSH
40453: LD_INT 2
40455: DOUBLE
40456: EQUAL
40457: IFTRUE 40461
40459: GO 40499
40461: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40462: LD_ADDR_VAR 0 3
40466: PUSH
40467: LD_INT 11
40469: PUSH
40470: LD_INT 12
40472: PUSH
40473: LD_INT 13
40475: PUSH
40476: LD_INT 14
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 2
40484: PUSH
40485: LD_INT 3
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: ST_TO_ADDR
40497: GO 40628
40499: LD_INT 1
40501: DOUBLE
40502: EQUAL
40503: IFTRUE 40507
40505: GO 40569
40507: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40508: LD_ADDR_VAR 0 3
40512: PUSH
40513: LD_INT 11
40515: PUSH
40516: LD_INT 12
40518: PUSH
40519: LD_INT 13
40521: PUSH
40522: LD_INT 14
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: LD_INT 3
40533: PUSH
40534: LD_INT 4
40536: PUSH
40537: LD_INT 5
40539: PUSH
40540: LD_INT 21
40542: PUSH
40543: LD_INT 23
40545: PUSH
40546: LD_INT 22
40548: PUSH
40549: LD_INT 24
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: ST_TO_ADDR
40567: GO 40628
40569: LD_INT 3
40571: DOUBLE
40572: EQUAL
40573: IFTRUE 40577
40575: GO 40627
40577: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40578: LD_ADDR_VAR 0 3
40582: PUSH
40583: LD_INT 13
40585: PUSH
40586: LD_INT 14
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: LD_INT 3
40594: PUSH
40595: LD_INT 4
40597: PUSH
40598: LD_INT 5
40600: PUSH
40601: LD_INT 21
40603: PUSH
40604: LD_INT 22
40606: PUSH
40607: LD_INT 23
40609: PUSH
40610: LD_INT 24
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: ST_TO_ADDR
40625: GO 40628
40627: POP
// result := ( chassis in result ) ;
40628: LD_ADDR_VAR 0 3
40632: PUSH
40633: LD_VAR 0 1
40637: PUSH
40638: LD_VAR 0 3
40642: IN
40643: ST_TO_ADDR
// end ;
40644: LD_VAR 0 3
40648: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40649: LD_INT 0
40651: PPUSH
// if not chassis or not weapon then
40652: LD_VAR 0 1
40656: NOT
40657: PUSH
40658: LD_VAR 0 2
40662: NOT
40663: OR
40664: IFFALSE 40668
// exit ;
40666: GO 41730
// case weapon of us_machine_gun :
40668: LD_VAR 0 2
40672: PUSH
40673: LD_INT 2
40675: DOUBLE
40676: EQUAL
40677: IFTRUE 40681
40679: GO 40711
40681: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40682: LD_ADDR_VAR 0 3
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: LD_INT 3
40695: PUSH
40696: LD_INT 4
40698: PUSH
40699: LD_INT 5
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: ST_TO_ADDR
40709: GO 41714
40711: LD_INT 3
40713: DOUBLE
40714: EQUAL
40715: IFTRUE 40719
40717: GO 40749
40719: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40720: LD_ADDR_VAR 0 3
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 2
40730: PUSH
40731: LD_INT 3
40733: PUSH
40734: LD_INT 4
40736: PUSH
40737: LD_INT 5
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: ST_TO_ADDR
40747: GO 41714
40749: LD_INT 11
40751: DOUBLE
40752: EQUAL
40753: IFTRUE 40757
40755: GO 40787
40757: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40758: LD_ADDR_VAR 0 3
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: LD_INT 3
40771: PUSH
40772: LD_INT 4
40774: PUSH
40775: LD_INT 5
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: ST_TO_ADDR
40785: GO 41714
40787: LD_INT 4
40789: DOUBLE
40790: EQUAL
40791: IFTRUE 40795
40793: GO 40821
40795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40796: LD_ADDR_VAR 0 3
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: LD_INT 4
40809: PUSH
40810: LD_INT 5
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
40819: GO 41714
40821: LD_INT 5
40823: DOUBLE
40824: EQUAL
40825: IFTRUE 40829
40827: GO 40855
40829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40830: LD_ADDR_VAR 0 3
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: LD_INT 3
40840: PUSH
40841: LD_INT 4
40843: PUSH
40844: LD_INT 5
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: ST_TO_ADDR
40853: GO 41714
40855: LD_INT 9
40857: DOUBLE
40858: EQUAL
40859: IFTRUE 40863
40861: GO 40889
40863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40864: LD_ADDR_VAR 0 3
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: LD_INT 3
40874: PUSH
40875: LD_INT 4
40877: PUSH
40878: LD_INT 5
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: ST_TO_ADDR
40887: GO 41714
40889: LD_INT 7
40891: DOUBLE
40892: EQUAL
40893: IFTRUE 40897
40895: GO 40923
40897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40898: LD_ADDR_VAR 0 3
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: LD_INT 4
40911: PUSH
40912: LD_INT 5
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: ST_TO_ADDR
40921: GO 41714
40923: LD_INT 12
40925: DOUBLE
40926: EQUAL
40927: IFTRUE 40931
40929: GO 40957
40931: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40932: LD_ADDR_VAR 0 3
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 3
40942: PUSH
40943: LD_INT 4
40945: PUSH
40946: LD_INT 5
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: ST_TO_ADDR
40955: GO 41714
40957: LD_INT 13
40959: DOUBLE
40960: EQUAL
40961: IFTRUE 40965
40963: GO 40991
40965: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40966: LD_ADDR_VAR 0 3
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: LD_INT 3
40976: PUSH
40977: LD_INT 4
40979: PUSH
40980: LD_INT 5
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: ST_TO_ADDR
40989: GO 41714
40991: LD_INT 14
40993: DOUBLE
40994: EQUAL
40995: IFTRUE 40999
40997: GO 41017
40999: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41000: LD_ADDR_VAR 0 3
41004: PUSH
41005: LD_INT 4
41007: PUSH
41008: LD_INT 5
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: ST_TO_ADDR
41015: GO 41714
41017: LD_INT 6
41019: DOUBLE
41020: EQUAL
41021: IFTRUE 41025
41023: GO 41043
41025: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41026: LD_ADDR_VAR 0 3
41030: PUSH
41031: LD_INT 4
41033: PUSH
41034: LD_INT 5
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: ST_TO_ADDR
41041: GO 41714
41043: LD_INT 10
41045: DOUBLE
41046: EQUAL
41047: IFTRUE 41051
41049: GO 41069
41051: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41052: LD_ADDR_VAR 0 3
41056: PUSH
41057: LD_INT 4
41059: PUSH
41060: LD_INT 5
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: ST_TO_ADDR
41067: GO 41714
41069: LD_INT 22
41071: DOUBLE
41072: EQUAL
41073: IFTRUE 41077
41075: GO 41103
41077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_INT 11
41085: PUSH
41086: LD_INT 12
41088: PUSH
41089: LD_INT 13
41091: PUSH
41092: LD_INT 14
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: ST_TO_ADDR
41101: GO 41714
41103: LD_INT 23
41105: DOUBLE
41106: EQUAL
41107: IFTRUE 41111
41109: GO 41137
41111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41112: LD_ADDR_VAR 0 3
41116: PUSH
41117: LD_INT 11
41119: PUSH
41120: LD_INT 12
41122: PUSH
41123: LD_INT 13
41125: PUSH
41126: LD_INT 14
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: ST_TO_ADDR
41135: GO 41714
41137: LD_INT 24
41139: DOUBLE
41140: EQUAL
41141: IFTRUE 41145
41143: GO 41171
41145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41146: LD_ADDR_VAR 0 3
41150: PUSH
41151: LD_INT 11
41153: PUSH
41154: LD_INT 12
41156: PUSH
41157: LD_INT 13
41159: PUSH
41160: LD_INT 14
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: ST_TO_ADDR
41169: GO 41714
41171: LD_INT 30
41173: DOUBLE
41174: EQUAL
41175: IFTRUE 41179
41177: GO 41205
41179: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41180: LD_ADDR_VAR 0 3
41184: PUSH
41185: LD_INT 11
41187: PUSH
41188: LD_INT 12
41190: PUSH
41191: LD_INT 13
41193: PUSH
41194: LD_INT 14
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: ST_TO_ADDR
41203: GO 41714
41205: LD_INT 25
41207: DOUBLE
41208: EQUAL
41209: IFTRUE 41213
41211: GO 41231
41213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41214: LD_ADDR_VAR 0 3
41218: PUSH
41219: LD_INT 13
41221: PUSH
41222: LD_INT 14
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: ST_TO_ADDR
41229: GO 41714
41231: LD_INT 27
41233: DOUBLE
41234: EQUAL
41235: IFTRUE 41239
41237: GO 41257
41239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41240: LD_ADDR_VAR 0 3
41244: PUSH
41245: LD_INT 13
41247: PUSH
41248: LD_INT 14
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: ST_TO_ADDR
41255: GO 41714
41257: LD_EXP 37
41261: DOUBLE
41262: EQUAL
41263: IFTRUE 41267
41265: GO 41293
41267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41268: LD_ADDR_VAR 0 3
41272: PUSH
41273: LD_INT 11
41275: PUSH
41276: LD_INT 12
41278: PUSH
41279: LD_INT 13
41281: PUSH
41282: LD_INT 14
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: ST_TO_ADDR
41291: GO 41714
41293: LD_INT 28
41295: DOUBLE
41296: EQUAL
41297: IFTRUE 41301
41299: GO 41319
41301: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41302: LD_ADDR_VAR 0 3
41306: PUSH
41307: LD_INT 13
41309: PUSH
41310: LD_INT 14
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: ST_TO_ADDR
41317: GO 41714
41319: LD_INT 29
41321: DOUBLE
41322: EQUAL
41323: IFTRUE 41327
41325: GO 41345
41327: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41328: LD_ADDR_VAR 0 3
41332: PUSH
41333: LD_INT 13
41335: PUSH
41336: LD_INT 14
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: ST_TO_ADDR
41343: GO 41714
41345: LD_INT 31
41347: DOUBLE
41348: EQUAL
41349: IFTRUE 41353
41351: GO 41371
41353: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41354: LD_ADDR_VAR 0 3
41358: PUSH
41359: LD_INT 13
41361: PUSH
41362: LD_INT 14
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: ST_TO_ADDR
41369: GO 41714
41371: LD_INT 26
41373: DOUBLE
41374: EQUAL
41375: IFTRUE 41379
41377: GO 41397
41379: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41380: LD_ADDR_VAR 0 3
41384: PUSH
41385: LD_INT 13
41387: PUSH
41388: LD_INT 14
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: ST_TO_ADDR
41395: GO 41714
41397: LD_INT 42
41399: DOUBLE
41400: EQUAL
41401: IFTRUE 41405
41403: GO 41431
41405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41406: LD_ADDR_VAR 0 3
41410: PUSH
41411: LD_INT 21
41413: PUSH
41414: LD_INT 22
41416: PUSH
41417: LD_INT 23
41419: PUSH
41420: LD_INT 24
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: ST_TO_ADDR
41429: GO 41714
41431: LD_INT 43
41433: DOUBLE
41434: EQUAL
41435: IFTRUE 41439
41437: GO 41465
41439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41440: LD_ADDR_VAR 0 3
41444: PUSH
41445: LD_INT 21
41447: PUSH
41448: LD_INT 22
41450: PUSH
41451: LD_INT 23
41453: PUSH
41454: LD_INT 24
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: ST_TO_ADDR
41463: GO 41714
41465: LD_INT 44
41467: DOUBLE
41468: EQUAL
41469: IFTRUE 41473
41471: GO 41499
41473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41474: LD_ADDR_VAR 0 3
41478: PUSH
41479: LD_INT 21
41481: PUSH
41482: LD_INT 22
41484: PUSH
41485: LD_INT 23
41487: PUSH
41488: LD_INT 24
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: ST_TO_ADDR
41497: GO 41714
41499: LD_INT 45
41501: DOUBLE
41502: EQUAL
41503: IFTRUE 41507
41505: GO 41533
41507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41508: LD_ADDR_VAR 0 3
41512: PUSH
41513: LD_INT 21
41515: PUSH
41516: LD_INT 22
41518: PUSH
41519: LD_INT 23
41521: PUSH
41522: LD_INT 24
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: ST_TO_ADDR
41531: GO 41714
41533: LD_INT 49
41535: DOUBLE
41536: EQUAL
41537: IFTRUE 41541
41539: GO 41567
41541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41542: LD_ADDR_VAR 0 3
41546: PUSH
41547: LD_INT 21
41549: PUSH
41550: LD_INT 22
41552: PUSH
41553: LD_INT 23
41555: PUSH
41556: LD_INT 24
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: ST_TO_ADDR
41565: GO 41714
41567: LD_INT 51
41569: DOUBLE
41570: EQUAL
41571: IFTRUE 41575
41573: GO 41601
41575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41576: LD_ADDR_VAR 0 3
41580: PUSH
41581: LD_INT 21
41583: PUSH
41584: LD_INT 22
41586: PUSH
41587: LD_INT 23
41589: PUSH
41590: LD_INT 24
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: ST_TO_ADDR
41599: GO 41714
41601: LD_INT 52
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41609
41607: GO 41635
41609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41610: LD_ADDR_VAR 0 3
41614: PUSH
41615: LD_INT 21
41617: PUSH
41618: LD_INT 22
41620: PUSH
41621: LD_INT 23
41623: PUSH
41624: LD_INT 24
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: ST_TO_ADDR
41633: GO 41714
41635: LD_INT 53
41637: DOUBLE
41638: EQUAL
41639: IFTRUE 41643
41641: GO 41661
41643: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41644: LD_ADDR_VAR 0 3
41648: PUSH
41649: LD_INT 23
41651: PUSH
41652: LD_INT 24
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: ST_TO_ADDR
41659: GO 41714
41661: LD_INT 46
41663: DOUBLE
41664: EQUAL
41665: IFTRUE 41669
41667: GO 41687
41669: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41670: LD_ADDR_VAR 0 3
41674: PUSH
41675: LD_INT 23
41677: PUSH
41678: LD_INT 24
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: ST_TO_ADDR
41685: GO 41714
41687: LD_INT 47
41689: DOUBLE
41690: EQUAL
41691: IFTRUE 41695
41693: GO 41713
41695: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_INT 23
41703: PUSH
41704: LD_INT 24
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: ST_TO_ADDR
41711: GO 41714
41713: POP
// result := ( chassis in result ) ;
41714: LD_ADDR_VAR 0 3
41718: PUSH
41719: LD_VAR 0 1
41723: PUSH
41724: LD_VAR 0 3
41728: IN
41729: ST_TO_ADDR
// end ;
41730: LD_VAR 0 3
41734: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41735: LD_INT 0
41737: PPUSH
41738: PPUSH
41739: PPUSH
41740: PPUSH
41741: PPUSH
41742: PPUSH
41743: PPUSH
// result := array ;
41744: LD_ADDR_VAR 0 5
41748: PUSH
41749: LD_VAR 0 1
41753: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41754: LD_VAR 0 1
41758: NOT
41759: PUSH
41760: LD_VAR 0 2
41764: NOT
41765: OR
41766: PUSH
41767: LD_VAR 0 3
41771: NOT
41772: OR
41773: PUSH
41774: LD_VAR 0 2
41778: PUSH
41779: LD_VAR 0 1
41783: GREATER
41784: OR
41785: PUSH
41786: LD_VAR 0 3
41790: PUSH
41791: LD_VAR 0 1
41795: GREATER
41796: OR
41797: IFFALSE 41801
// exit ;
41799: GO 42097
// if direction then
41801: LD_VAR 0 4
41805: IFFALSE 41869
// begin d := 1 ;
41807: LD_ADDR_VAR 0 9
41811: PUSH
41812: LD_INT 1
41814: ST_TO_ADDR
// if i_from > i_to then
41815: LD_VAR 0 2
41819: PUSH
41820: LD_VAR 0 3
41824: GREATER
41825: IFFALSE 41851
// length := ( array - i_from ) + i_to else
41827: LD_ADDR_VAR 0 11
41831: PUSH
41832: LD_VAR 0 1
41836: PUSH
41837: LD_VAR 0 2
41841: MINUS
41842: PUSH
41843: LD_VAR 0 3
41847: PLUS
41848: ST_TO_ADDR
41849: GO 41867
// length := i_to - i_from ;
41851: LD_ADDR_VAR 0 11
41855: PUSH
41856: LD_VAR 0 3
41860: PUSH
41861: LD_VAR 0 2
41865: MINUS
41866: ST_TO_ADDR
// end else
41867: GO 41930
// begin d := - 1 ;
41869: LD_ADDR_VAR 0 9
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: ST_TO_ADDR
// if i_from > i_to then
41878: LD_VAR 0 2
41882: PUSH
41883: LD_VAR 0 3
41887: GREATER
41888: IFFALSE 41908
// length := i_from - i_to else
41890: LD_ADDR_VAR 0 11
41894: PUSH
41895: LD_VAR 0 2
41899: PUSH
41900: LD_VAR 0 3
41904: MINUS
41905: ST_TO_ADDR
41906: GO 41930
// length := ( array - i_to ) + i_from ;
41908: LD_ADDR_VAR 0 11
41912: PUSH
41913: LD_VAR 0 1
41917: PUSH
41918: LD_VAR 0 3
41922: MINUS
41923: PUSH
41924: LD_VAR 0 2
41928: PLUS
41929: ST_TO_ADDR
// end ; if not length then
41930: LD_VAR 0 11
41934: NOT
41935: IFFALSE 41939
// exit ;
41937: GO 42097
// tmp := array ;
41939: LD_ADDR_VAR 0 10
41943: PUSH
41944: LD_VAR 0 1
41948: ST_TO_ADDR
// for i = 1 to length do
41949: LD_ADDR_VAR 0 6
41953: PUSH
41954: DOUBLE
41955: LD_INT 1
41957: DEC
41958: ST_TO_ADDR
41959: LD_VAR 0 11
41963: PUSH
41964: FOR_TO
41965: IFFALSE 42085
// begin for j = 1 to array do
41967: LD_ADDR_VAR 0 7
41971: PUSH
41972: DOUBLE
41973: LD_INT 1
41975: DEC
41976: ST_TO_ADDR
41977: LD_VAR 0 1
41981: PUSH
41982: FOR_TO
41983: IFFALSE 42071
// begin k := j + d ;
41985: LD_ADDR_VAR 0 8
41989: PUSH
41990: LD_VAR 0 7
41994: PUSH
41995: LD_VAR 0 9
41999: PLUS
42000: ST_TO_ADDR
// if k > array then
42001: LD_VAR 0 8
42005: PUSH
42006: LD_VAR 0 1
42010: GREATER
42011: IFFALSE 42021
// k := 1 ;
42013: LD_ADDR_VAR 0 8
42017: PUSH
42018: LD_INT 1
42020: ST_TO_ADDR
// if not k then
42021: LD_VAR 0 8
42025: NOT
42026: IFFALSE 42038
// k := array ;
42028: LD_ADDR_VAR 0 8
42032: PUSH
42033: LD_VAR 0 1
42037: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42038: LD_ADDR_VAR 0 10
42042: PUSH
42043: LD_VAR 0 10
42047: PPUSH
42048: LD_VAR 0 8
42052: PPUSH
42053: LD_VAR 0 1
42057: PUSH
42058: LD_VAR 0 7
42062: ARRAY
42063: PPUSH
42064: CALL_OW 1
42068: ST_TO_ADDR
// end ;
42069: GO 41982
42071: POP
42072: POP
// array := tmp ;
42073: LD_ADDR_VAR 0 1
42077: PUSH
42078: LD_VAR 0 10
42082: ST_TO_ADDR
// end ;
42083: GO 41964
42085: POP
42086: POP
// result := array ;
42087: LD_ADDR_VAR 0 5
42091: PUSH
42092: LD_VAR 0 1
42096: ST_TO_ADDR
// end ;
42097: LD_VAR 0 5
42101: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42102: LD_INT 0
42104: PPUSH
42105: PPUSH
// result := 0 ;
42106: LD_ADDR_VAR 0 3
42110: PUSH
42111: LD_INT 0
42113: ST_TO_ADDR
// if not array or not value in array then
42114: LD_VAR 0 1
42118: NOT
42119: PUSH
42120: LD_VAR 0 2
42124: PUSH
42125: LD_VAR 0 1
42129: IN
42130: NOT
42131: OR
42132: IFFALSE 42136
// exit ;
42134: GO 42190
// for i = 1 to array do
42136: LD_ADDR_VAR 0 4
42140: PUSH
42141: DOUBLE
42142: LD_INT 1
42144: DEC
42145: ST_TO_ADDR
42146: LD_VAR 0 1
42150: PUSH
42151: FOR_TO
42152: IFFALSE 42188
// if value = array [ i ] then
42154: LD_VAR 0 2
42158: PUSH
42159: LD_VAR 0 1
42163: PUSH
42164: LD_VAR 0 4
42168: ARRAY
42169: EQUAL
42170: IFFALSE 42186
// begin result := i ;
42172: LD_ADDR_VAR 0 3
42176: PUSH
42177: LD_VAR 0 4
42181: ST_TO_ADDR
// exit ;
42182: POP
42183: POP
42184: GO 42190
// end ;
42186: GO 42151
42188: POP
42189: POP
// end ;
42190: LD_VAR 0 3
42194: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42195: LD_INT 0
42197: PPUSH
// vc_chassis := chassis ;
42198: LD_ADDR_OWVAR 37
42202: PUSH
42203: LD_VAR 0 1
42207: ST_TO_ADDR
// vc_engine := engine ;
42208: LD_ADDR_OWVAR 39
42212: PUSH
42213: LD_VAR 0 2
42217: ST_TO_ADDR
// vc_control := control ;
42218: LD_ADDR_OWVAR 38
42222: PUSH
42223: LD_VAR 0 3
42227: ST_TO_ADDR
// vc_weapon := weapon ;
42228: LD_ADDR_OWVAR 40
42232: PUSH
42233: LD_VAR 0 4
42237: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42238: LD_ADDR_OWVAR 41
42242: PUSH
42243: LD_VAR 0 5
42247: ST_TO_ADDR
// end ;
42248: LD_VAR 0 6
42252: RET
// export function WantPlant ( unit ) ; var task ; begin
42253: LD_INT 0
42255: PPUSH
42256: PPUSH
// result := false ;
42257: LD_ADDR_VAR 0 2
42261: PUSH
42262: LD_INT 0
42264: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42265: LD_ADDR_VAR 0 3
42269: PUSH
42270: LD_VAR 0 1
42274: PPUSH
42275: CALL_OW 437
42279: ST_TO_ADDR
// if task then
42280: LD_VAR 0 3
42284: IFFALSE 42312
// if task [ 1 ] [ 1 ] = p then
42286: LD_VAR 0 3
42290: PUSH
42291: LD_INT 1
42293: ARRAY
42294: PUSH
42295: LD_INT 1
42297: ARRAY
42298: PUSH
42299: LD_STRING p
42301: EQUAL
42302: IFFALSE 42312
// result := true ;
42304: LD_ADDR_VAR 0 2
42308: PUSH
42309: LD_INT 1
42311: ST_TO_ADDR
// end ;
42312: LD_VAR 0 2
42316: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42317: LD_INT 0
42319: PPUSH
42320: PPUSH
42321: PPUSH
42322: PPUSH
// if pos < 1 then
42323: LD_VAR 0 2
42327: PUSH
42328: LD_INT 1
42330: LESS
42331: IFFALSE 42335
// exit ;
42333: GO 42638
// if pos = 1 then
42335: LD_VAR 0 2
42339: PUSH
42340: LD_INT 1
42342: EQUAL
42343: IFFALSE 42376
// result := Replace ( arr , pos [ 1 ] , value ) else
42345: LD_ADDR_VAR 0 4
42349: PUSH
42350: LD_VAR 0 1
42354: PPUSH
42355: LD_VAR 0 2
42359: PUSH
42360: LD_INT 1
42362: ARRAY
42363: PPUSH
42364: LD_VAR 0 3
42368: PPUSH
42369: CALL_OW 1
42373: ST_TO_ADDR
42374: GO 42638
// begin tmp := arr ;
42376: LD_ADDR_VAR 0 6
42380: PUSH
42381: LD_VAR 0 1
42385: ST_TO_ADDR
// s_arr := [ tmp ] ;
42386: LD_ADDR_VAR 0 7
42390: PUSH
42391: LD_VAR 0 6
42395: PUSH
42396: EMPTY
42397: LIST
42398: ST_TO_ADDR
// for i = 1 to pos - 1 do
42399: LD_ADDR_VAR 0 5
42403: PUSH
42404: DOUBLE
42405: LD_INT 1
42407: DEC
42408: ST_TO_ADDR
42409: LD_VAR 0 2
42413: PUSH
42414: LD_INT 1
42416: MINUS
42417: PUSH
42418: FOR_TO
42419: IFFALSE 42464
// begin tmp := tmp [ pos [ i ] ] ;
42421: LD_ADDR_VAR 0 6
42425: PUSH
42426: LD_VAR 0 6
42430: PUSH
42431: LD_VAR 0 2
42435: PUSH
42436: LD_VAR 0 5
42440: ARRAY
42441: ARRAY
42442: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42443: LD_ADDR_VAR 0 7
42447: PUSH
42448: LD_VAR 0 7
42452: PUSH
42453: LD_VAR 0 6
42457: PUSH
42458: EMPTY
42459: LIST
42460: ADD
42461: ST_TO_ADDR
// end ;
42462: GO 42418
42464: POP
42465: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42466: LD_ADDR_VAR 0 6
42470: PUSH
42471: LD_VAR 0 6
42475: PPUSH
42476: LD_VAR 0 2
42480: PUSH
42481: LD_VAR 0 2
42485: ARRAY
42486: PPUSH
42487: LD_VAR 0 3
42491: PPUSH
42492: CALL_OW 1
42496: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42497: LD_ADDR_VAR 0 7
42501: PUSH
42502: LD_VAR 0 7
42506: PPUSH
42507: LD_VAR 0 7
42511: PPUSH
42512: LD_VAR 0 6
42516: PPUSH
42517: CALL_OW 1
42521: ST_TO_ADDR
// for i = s_arr downto 2 do
42522: LD_ADDR_VAR 0 5
42526: PUSH
42527: DOUBLE
42528: LD_VAR 0 7
42532: INC
42533: ST_TO_ADDR
42534: LD_INT 2
42536: PUSH
42537: FOR_DOWNTO
42538: IFFALSE 42622
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42540: LD_ADDR_VAR 0 6
42544: PUSH
42545: LD_VAR 0 7
42549: PUSH
42550: LD_VAR 0 5
42554: PUSH
42555: LD_INT 1
42557: MINUS
42558: ARRAY
42559: PPUSH
42560: LD_VAR 0 2
42564: PUSH
42565: LD_VAR 0 5
42569: PUSH
42570: LD_INT 1
42572: MINUS
42573: ARRAY
42574: PPUSH
42575: LD_VAR 0 7
42579: PUSH
42580: LD_VAR 0 5
42584: ARRAY
42585: PPUSH
42586: CALL_OW 1
42590: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42591: LD_ADDR_VAR 0 7
42595: PUSH
42596: LD_VAR 0 7
42600: PPUSH
42601: LD_VAR 0 5
42605: PUSH
42606: LD_INT 1
42608: MINUS
42609: PPUSH
42610: LD_VAR 0 6
42614: PPUSH
42615: CALL_OW 1
42619: ST_TO_ADDR
// end ;
42620: GO 42537
42622: POP
42623: POP
// result := s_arr [ 1 ] ;
42624: LD_ADDR_VAR 0 4
42628: PUSH
42629: LD_VAR 0 7
42633: PUSH
42634: LD_INT 1
42636: ARRAY
42637: ST_TO_ADDR
// end ; end ;
42638: LD_VAR 0 4
42642: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42643: LD_INT 0
42645: PPUSH
42646: PPUSH
// if not list then
42647: LD_VAR 0 1
42651: NOT
42652: IFFALSE 42656
// exit ;
42654: GO 42747
// i := list [ pos1 ] ;
42656: LD_ADDR_VAR 0 5
42660: PUSH
42661: LD_VAR 0 1
42665: PUSH
42666: LD_VAR 0 2
42670: ARRAY
42671: ST_TO_ADDR
// if not i then
42672: LD_VAR 0 5
42676: NOT
42677: IFFALSE 42681
// exit ;
42679: GO 42747
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42681: LD_ADDR_VAR 0 1
42685: PUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: LD_VAR 0 2
42695: PPUSH
42696: LD_VAR 0 1
42700: PUSH
42701: LD_VAR 0 3
42705: ARRAY
42706: PPUSH
42707: CALL_OW 1
42711: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42712: LD_ADDR_VAR 0 1
42716: PUSH
42717: LD_VAR 0 1
42721: PPUSH
42722: LD_VAR 0 3
42726: PPUSH
42727: LD_VAR 0 5
42731: PPUSH
42732: CALL_OW 1
42736: ST_TO_ADDR
// result := list ;
42737: LD_ADDR_VAR 0 4
42741: PUSH
42742: LD_VAR 0 1
42746: ST_TO_ADDR
// end ;
42747: LD_VAR 0 4
42751: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42752: LD_INT 0
42754: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42755: LD_ADDR_VAR 0 5
42759: PUSH
42760: LD_VAR 0 1
42764: PPUSH
42765: CALL_OW 250
42769: PPUSH
42770: LD_VAR 0 1
42774: PPUSH
42775: CALL_OW 251
42779: PPUSH
42780: LD_VAR 0 2
42784: PPUSH
42785: LD_VAR 0 3
42789: PPUSH
42790: LD_VAR 0 4
42794: PPUSH
42795: CALL 42805 0 5
42799: ST_TO_ADDR
// end ;
42800: LD_VAR 0 5
42804: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42805: LD_INT 0
42807: PPUSH
42808: PPUSH
42809: PPUSH
42810: PPUSH
// if not list then
42811: LD_VAR 0 3
42815: NOT
42816: IFFALSE 42820
// exit ;
42818: GO 43208
// result := [ ] ;
42820: LD_ADDR_VAR 0 6
42824: PUSH
42825: EMPTY
42826: ST_TO_ADDR
// for i in list do
42827: LD_ADDR_VAR 0 7
42831: PUSH
42832: LD_VAR 0 3
42836: PUSH
42837: FOR_IN
42838: IFFALSE 43040
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42840: LD_ADDR_VAR 0 9
42844: PUSH
42845: LD_VAR 0 7
42849: PPUSH
42850: LD_VAR 0 1
42854: PPUSH
42855: LD_VAR 0 2
42859: PPUSH
42860: CALL_OW 297
42864: ST_TO_ADDR
// if not result then
42865: LD_VAR 0 6
42869: NOT
42870: IFFALSE 42896
// result := [ [ i , tmp ] ] else
42872: LD_ADDR_VAR 0 6
42876: PUSH
42877: LD_VAR 0 7
42881: PUSH
42882: LD_VAR 0 9
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: EMPTY
42892: LIST
42893: ST_TO_ADDR
42894: GO 43038
// begin if result [ result ] [ 2 ] < tmp then
42896: LD_VAR 0 6
42900: PUSH
42901: LD_VAR 0 6
42905: ARRAY
42906: PUSH
42907: LD_INT 2
42909: ARRAY
42910: PUSH
42911: LD_VAR 0 9
42915: LESS
42916: IFFALSE 42958
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42918: LD_ADDR_VAR 0 6
42922: PUSH
42923: LD_VAR 0 6
42927: PPUSH
42928: LD_VAR 0 6
42932: PUSH
42933: LD_INT 1
42935: PLUS
42936: PPUSH
42937: LD_VAR 0 7
42941: PUSH
42942: LD_VAR 0 9
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PPUSH
42951: CALL_OW 2
42955: ST_TO_ADDR
42956: GO 43038
// for j = 1 to result do
42958: LD_ADDR_VAR 0 8
42962: PUSH
42963: DOUBLE
42964: LD_INT 1
42966: DEC
42967: ST_TO_ADDR
42968: LD_VAR 0 6
42972: PUSH
42973: FOR_TO
42974: IFFALSE 43036
// begin if tmp < result [ j ] [ 2 ] then
42976: LD_VAR 0 9
42980: PUSH
42981: LD_VAR 0 6
42985: PUSH
42986: LD_VAR 0 8
42990: ARRAY
42991: PUSH
42992: LD_INT 2
42994: ARRAY
42995: LESS
42996: IFFALSE 43034
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42998: LD_ADDR_VAR 0 6
43002: PUSH
43003: LD_VAR 0 6
43007: PPUSH
43008: LD_VAR 0 8
43012: PPUSH
43013: LD_VAR 0 7
43017: PUSH
43018: LD_VAR 0 9
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PPUSH
43027: CALL_OW 2
43031: ST_TO_ADDR
// break ;
43032: GO 43036
// end ; end ;
43034: GO 42973
43036: POP
43037: POP
// end ; end ;
43038: GO 42837
43040: POP
43041: POP
// if result and not asc then
43042: LD_VAR 0 6
43046: PUSH
43047: LD_VAR 0 4
43051: NOT
43052: AND
43053: IFFALSE 43128
// begin tmp := result ;
43055: LD_ADDR_VAR 0 9
43059: PUSH
43060: LD_VAR 0 6
43064: ST_TO_ADDR
// for i = tmp downto 1 do
43065: LD_ADDR_VAR 0 7
43069: PUSH
43070: DOUBLE
43071: LD_VAR 0 9
43075: INC
43076: ST_TO_ADDR
43077: LD_INT 1
43079: PUSH
43080: FOR_DOWNTO
43081: IFFALSE 43126
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43083: LD_ADDR_VAR 0 6
43087: PUSH
43088: LD_VAR 0 6
43092: PPUSH
43093: LD_VAR 0 9
43097: PUSH
43098: LD_VAR 0 7
43102: MINUS
43103: PUSH
43104: LD_INT 1
43106: PLUS
43107: PPUSH
43108: LD_VAR 0 9
43112: PUSH
43113: LD_VAR 0 7
43117: ARRAY
43118: PPUSH
43119: CALL_OW 1
43123: ST_TO_ADDR
43124: GO 43080
43126: POP
43127: POP
// end ; tmp := [ ] ;
43128: LD_ADDR_VAR 0 9
43132: PUSH
43133: EMPTY
43134: ST_TO_ADDR
// if mode then
43135: LD_VAR 0 5
43139: IFFALSE 43208
// begin for i = 1 to result do
43141: LD_ADDR_VAR 0 7
43145: PUSH
43146: DOUBLE
43147: LD_INT 1
43149: DEC
43150: ST_TO_ADDR
43151: LD_VAR 0 6
43155: PUSH
43156: FOR_TO
43157: IFFALSE 43196
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43159: LD_ADDR_VAR 0 9
43163: PUSH
43164: LD_VAR 0 9
43168: PPUSH
43169: LD_VAR 0 7
43173: PPUSH
43174: LD_VAR 0 6
43178: PUSH
43179: LD_VAR 0 7
43183: ARRAY
43184: PUSH
43185: LD_INT 1
43187: ARRAY
43188: PPUSH
43189: CALL_OW 1
43193: ST_TO_ADDR
43194: GO 43156
43196: POP
43197: POP
// result := tmp ;
43198: LD_ADDR_VAR 0 6
43202: PUSH
43203: LD_VAR 0 9
43207: ST_TO_ADDR
// end ; end ;
43208: LD_VAR 0 6
43212: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43213: LD_INT 0
43215: PPUSH
43216: PPUSH
43217: PPUSH
43218: PPUSH
43219: PPUSH
43220: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43221: LD_ADDR_VAR 0 5
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
// if not x or not y then
43243: LD_VAR 0 2
43247: NOT
43248: PUSH
43249: LD_VAR 0 3
43253: NOT
43254: OR
43255: IFFALSE 43259
// exit ;
43257: GO 44911
// if not range then
43259: LD_VAR 0 4
43263: NOT
43264: IFFALSE 43274
// range := 10 ;
43266: LD_ADDR_VAR 0 4
43270: PUSH
43271: LD_INT 10
43273: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43274: LD_ADDR_VAR 0 8
43278: PUSH
43279: LD_INT 81
43281: PUSH
43282: LD_VAR 0 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 92
43293: PUSH
43294: LD_VAR 0 2
43298: PUSH
43299: LD_VAR 0 3
43303: PUSH
43304: LD_VAR 0 4
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 3
43317: PUSH
43318: LD_INT 21
43320: PUSH
43321: LD_INT 3
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: PPUSH
43337: CALL_OW 69
43341: ST_TO_ADDR
// if not tmp then
43342: LD_VAR 0 8
43346: NOT
43347: IFFALSE 43351
// exit ;
43349: GO 44911
// for i in tmp do
43351: LD_ADDR_VAR 0 6
43355: PUSH
43356: LD_VAR 0 8
43360: PUSH
43361: FOR_IN
43362: IFFALSE 44886
// begin points := [ 0 , 0 , 0 ] ;
43364: LD_ADDR_VAR 0 9
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: ST_TO_ADDR
// bpoints := 1 ;
43383: LD_ADDR_VAR 0 10
43387: PUSH
43388: LD_INT 1
43390: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43391: LD_VAR 0 6
43395: PPUSH
43396: CALL_OW 247
43400: PUSH
43401: LD_INT 1
43403: DOUBLE
43404: EQUAL
43405: IFTRUE 43409
43407: GO 43987
43409: POP
// begin if GetClass ( i ) = 1 then
43410: LD_VAR 0 6
43414: PPUSH
43415: CALL_OW 257
43419: PUSH
43420: LD_INT 1
43422: EQUAL
43423: IFFALSE 43444
// points := [ 10 , 5 , 3 ] ;
43425: LD_ADDR_VAR 0 9
43429: PUSH
43430: LD_INT 10
43432: PUSH
43433: LD_INT 5
43435: PUSH
43436: LD_INT 3
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43444: LD_VAR 0 6
43448: PPUSH
43449: CALL_OW 257
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 3
43459: PUSH
43460: LD_INT 4
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: LIST
43467: IN
43468: IFFALSE 43489
// points := [ 3 , 2 , 1 ] ;
43470: LD_ADDR_VAR 0 9
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: LIST
43488: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43489: LD_VAR 0 6
43493: PPUSH
43494: CALL_OW 257
43498: PUSH
43499: LD_INT 5
43501: EQUAL
43502: IFFALSE 43523
// points := [ 130 , 5 , 2 ] ;
43504: LD_ADDR_VAR 0 9
43508: PUSH
43509: LD_INT 130
43511: PUSH
43512: LD_INT 5
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43523: LD_VAR 0 6
43527: PPUSH
43528: CALL_OW 257
43532: PUSH
43533: LD_INT 8
43535: EQUAL
43536: IFFALSE 43557
// points := [ 35 , 35 , 30 ] ;
43538: LD_ADDR_VAR 0 9
43542: PUSH
43543: LD_INT 35
43545: PUSH
43546: LD_INT 35
43548: PUSH
43549: LD_INT 30
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: LIST
43556: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43557: LD_VAR 0 6
43561: PPUSH
43562: CALL_OW 257
43566: PUSH
43567: LD_INT 9
43569: EQUAL
43570: IFFALSE 43591
// points := [ 20 , 55 , 40 ] ;
43572: LD_ADDR_VAR 0 9
43576: PUSH
43577: LD_INT 20
43579: PUSH
43580: LD_INT 55
43582: PUSH
43583: LD_INT 40
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43591: LD_VAR 0 6
43595: PPUSH
43596: CALL_OW 257
43600: PUSH
43601: LD_INT 12
43603: PUSH
43604: LD_INT 16
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: IN
43611: IFFALSE 43632
// points := [ 5 , 3 , 2 ] ;
43613: LD_ADDR_VAR 0 9
43617: PUSH
43618: LD_INT 5
43620: PUSH
43621: LD_INT 3
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43632: LD_VAR 0 6
43636: PPUSH
43637: CALL_OW 257
43641: PUSH
43642: LD_INT 17
43644: EQUAL
43645: IFFALSE 43666
// points := [ 100 , 50 , 75 ] ;
43647: LD_ADDR_VAR 0 9
43651: PUSH
43652: LD_INT 100
43654: PUSH
43655: LD_INT 50
43657: PUSH
43658: LD_INT 75
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: LIST
43665: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43666: LD_VAR 0 6
43670: PPUSH
43671: CALL_OW 257
43675: PUSH
43676: LD_INT 15
43678: EQUAL
43679: IFFALSE 43700
// points := [ 10 , 5 , 3 ] ;
43681: LD_ADDR_VAR 0 9
43685: PUSH
43686: LD_INT 10
43688: PUSH
43689: LD_INT 5
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43700: LD_VAR 0 6
43704: PPUSH
43705: CALL_OW 257
43709: PUSH
43710: LD_INT 14
43712: EQUAL
43713: IFFALSE 43734
// points := [ 10 , 0 , 0 ] ;
43715: LD_ADDR_VAR 0 9
43719: PUSH
43720: LD_INT 10
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43734: LD_VAR 0 6
43738: PPUSH
43739: CALL_OW 257
43743: PUSH
43744: LD_INT 11
43746: EQUAL
43747: IFFALSE 43768
// points := [ 30 , 10 , 5 ] ;
43749: LD_ADDR_VAR 0 9
43753: PUSH
43754: LD_INT 30
43756: PUSH
43757: LD_INT 10
43759: PUSH
43760: LD_INT 5
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43768: LD_VAR 0 1
43772: PPUSH
43773: LD_INT 5
43775: PPUSH
43776: CALL_OW 321
43780: PUSH
43781: LD_INT 2
43783: EQUAL
43784: IFFALSE 43801
// bpoints := bpoints * 1.8 ;
43786: LD_ADDR_VAR 0 10
43790: PUSH
43791: LD_VAR 0 10
43795: PUSH
43796: LD_REAL  1.80000000000000E+0000
43799: MUL
43800: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43801: LD_VAR 0 6
43805: PPUSH
43806: CALL_OW 257
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 3
43819: PUSH
43820: LD_INT 4
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: IN
43829: PUSH
43830: LD_VAR 0 1
43834: PPUSH
43835: LD_INT 51
43837: PPUSH
43838: CALL_OW 321
43842: PUSH
43843: LD_INT 2
43845: EQUAL
43846: AND
43847: IFFALSE 43864
// bpoints := bpoints * 1.2 ;
43849: LD_ADDR_VAR 0 10
43853: PUSH
43854: LD_VAR 0 10
43858: PUSH
43859: LD_REAL  1.20000000000000E+0000
43862: MUL
43863: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43864: LD_VAR 0 6
43868: PPUSH
43869: CALL_OW 257
43873: PUSH
43874: LD_INT 5
43876: PUSH
43877: LD_INT 7
43879: PUSH
43880: LD_INT 9
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: LIST
43887: IN
43888: PUSH
43889: LD_VAR 0 1
43893: PPUSH
43894: LD_INT 52
43896: PPUSH
43897: CALL_OW 321
43901: PUSH
43902: LD_INT 2
43904: EQUAL
43905: AND
43906: IFFALSE 43923
// bpoints := bpoints * 1.5 ;
43908: LD_ADDR_VAR 0 10
43912: PUSH
43913: LD_VAR 0 10
43917: PUSH
43918: LD_REAL  1.50000000000000E+0000
43921: MUL
43922: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43923: LD_VAR 0 1
43927: PPUSH
43928: LD_INT 66
43930: PPUSH
43931: CALL_OW 321
43935: PUSH
43936: LD_INT 2
43938: EQUAL
43939: IFFALSE 43956
// bpoints := bpoints * 1.1 ;
43941: LD_ADDR_VAR 0 10
43945: PUSH
43946: LD_VAR 0 10
43950: PUSH
43951: LD_REAL  1.10000000000000E+0000
43954: MUL
43955: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43956: LD_ADDR_VAR 0 10
43960: PUSH
43961: LD_VAR 0 10
43965: PUSH
43966: LD_VAR 0 6
43970: PPUSH
43971: LD_INT 1
43973: PPUSH
43974: CALL_OW 259
43978: PUSH
43979: LD_REAL  1.15000000000000E+0000
43982: MUL
43983: MUL
43984: ST_TO_ADDR
// end ; unit_vehicle :
43985: GO 44815
43987: LD_INT 2
43989: DOUBLE
43990: EQUAL
43991: IFTRUE 43995
43993: GO 44803
43995: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43996: LD_VAR 0 6
44000: PPUSH
44001: CALL_OW 264
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 42
44011: PUSH
44012: LD_INT 24
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: IN
44020: IFFALSE 44041
// points := [ 25 , 5 , 3 ] ;
44022: LD_ADDR_VAR 0 9
44026: PUSH
44027: LD_INT 25
44029: PUSH
44030: LD_INT 5
44032: PUSH
44033: LD_INT 3
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44041: LD_VAR 0 6
44045: PPUSH
44046: CALL_OW 264
44050: PUSH
44051: LD_INT 4
44053: PUSH
44054: LD_INT 43
44056: PUSH
44057: LD_INT 25
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: IN
44065: IFFALSE 44086
// points := [ 40 , 15 , 5 ] ;
44067: LD_ADDR_VAR 0 9
44071: PUSH
44072: LD_INT 40
44074: PUSH
44075: LD_INT 15
44077: PUSH
44078: LD_INT 5
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44086: LD_VAR 0 6
44090: PPUSH
44091: CALL_OW 264
44095: PUSH
44096: LD_INT 3
44098: PUSH
44099: LD_INT 23
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: IN
44106: IFFALSE 44127
// points := [ 7 , 25 , 8 ] ;
44108: LD_ADDR_VAR 0 9
44112: PUSH
44113: LD_INT 7
44115: PUSH
44116: LD_INT 25
44118: PUSH
44119: LD_INT 8
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: LIST
44126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44127: LD_VAR 0 6
44131: PPUSH
44132: CALL_OW 264
44136: PUSH
44137: LD_INT 5
44139: PUSH
44140: LD_INT 27
44142: PUSH
44143: LD_INT 44
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: LIST
44150: IN
44151: IFFALSE 44172
// points := [ 14 , 50 , 16 ] ;
44153: LD_ADDR_VAR 0 9
44157: PUSH
44158: LD_INT 14
44160: PUSH
44161: LD_INT 50
44163: PUSH
44164: LD_INT 16
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44172: LD_VAR 0 6
44176: PPUSH
44177: CALL_OW 264
44181: PUSH
44182: LD_INT 6
44184: PUSH
44185: LD_INT 46
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: IN
44192: IFFALSE 44213
// points := [ 32 , 120 , 70 ] ;
44194: LD_ADDR_VAR 0 9
44198: PUSH
44199: LD_INT 32
44201: PUSH
44202: LD_INT 120
44204: PUSH
44205: LD_INT 70
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44213: LD_VAR 0 6
44217: PPUSH
44218: CALL_OW 264
44222: PUSH
44223: LD_INT 7
44225: PUSH
44226: LD_INT 28
44228: PUSH
44229: LD_INT 45
44231: PUSH
44232: LD_EXP 37
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: IN
44243: IFFALSE 44264
// points := [ 35 , 20 , 45 ] ;
44245: LD_ADDR_VAR 0 9
44249: PUSH
44250: LD_INT 35
44252: PUSH
44253: LD_INT 20
44255: PUSH
44256: LD_INT 45
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44264: LD_VAR 0 6
44268: PPUSH
44269: CALL_OW 264
44273: PUSH
44274: LD_INT 47
44276: PUSH
44277: EMPTY
44278: LIST
44279: IN
44280: IFFALSE 44301
// points := [ 67 , 45 , 75 ] ;
44282: LD_ADDR_VAR 0 9
44286: PUSH
44287: LD_INT 67
44289: PUSH
44290: LD_INT 45
44292: PUSH
44293: LD_INT 75
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44301: LD_VAR 0 6
44305: PPUSH
44306: CALL_OW 264
44310: PUSH
44311: LD_INT 26
44313: PUSH
44314: EMPTY
44315: LIST
44316: IN
44317: IFFALSE 44338
// points := [ 120 , 30 , 80 ] ;
44319: LD_ADDR_VAR 0 9
44323: PUSH
44324: LD_INT 120
44326: PUSH
44327: LD_INT 30
44329: PUSH
44330: LD_INT 80
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44338: LD_VAR 0 6
44342: PPUSH
44343: CALL_OW 264
44347: PUSH
44348: LD_INT 22
44350: PUSH
44351: EMPTY
44352: LIST
44353: IN
44354: IFFALSE 44375
// points := [ 40 , 1 , 1 ] ;
44356: LD_ADDR_VAR 0 9
44360: PUSH
44361: LD_INT 40
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: LIST
44374: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44375: LD_VAR 0 6
44379: PPUSH
44380: CALL_OW 264
44384: PUSH
44385: LD_INT 29
44387: PUSH
44388: EMPTY
44389: LIST
44390: IN
44391: IFFALSE 44412
// points := [ 70 , 200 , 400 ] ;
44393: LD_ADDR_VAR 0 9
44397: PUSH
44398: LD_INT 70
44400: PUSH
44401: LD_INT 200
44403: PUSH
44404: LD_INT 400
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44412: LD_VAR 0 6
44416: PPUSH
44417: CALL_OW 264
44421: PUSH
44422: LD_INT 14
44424: PUSH
44425: LD_INT 53
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: IN
44432: IFFALSE 44453
// points := [ 40 , 10 , 20 ] ;
44434: LD_ADDR_VAR 0 9
44438: PUSH
44439: LD_INT 40
44441: PUSH
44442: LD_INT 10
44444: PUSH
44445: LD_INT 20
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: LIST
44452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44453: LD_VAR 0 6
44457: PPUSH
44458: CALL_OW 264
44462: PUSH
44463: LD_INT 9
44465: PUSH
44466: EMPTY
44467: LIST
44468: IN
44469: IFFALSE 44490
// points := [ 5 , 70 , 20 ] ;
44471: LD_ADDR_VAR 0 9
44475: PUSH
44476: LD_INT 5
44478: PUSH
44479: LD_INT 70
44481: PUSH
44482: LD_INT 20
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44490: LD_VAR 0 6
44494: PPUSH
44495: CALL_OW 264
44499: PUSH
44500: LD_INT 10
44502: PUSH
44503: EMPTY
44504: LIST
44505: IN
44506: IFFALSE 44527
// points := [ 35 , 110 , 70 ] ;
44508: LD_ADDR_VAR 0 9
44512: PUSH
44513: LD_INT 35
44515: PUSH
44516: LD_INT 110
44518: PUSH
44519: LD_INT 70
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44527: LD_VAR 0 6
44531: PPUSH
44532: CALL_OW 265
44536: PUSH
44537: LD_INT 25
44539: EQUAL
44540: IFFALSE 44561
// points := [ 80 , 65 , 100 ] ;
44542: LD_ADDR_VAR 0 9
44546: PUSH
44547: LD_INT 80
44549: PUSH
44550: LD_INT 65
44552: PUSH
44553: LD_INT 100
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: LIST
44560: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44561: LD_VAR 0 6
44565: PPUSH
44566: CALL_OW 263
44570: PUSH
44571: LD_INT 1
44573: EQUAL
44574: IFFALSE 44609
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44576: LD_ADDR_VAR 0 10
44580: PUSH
44581: LD_VAR 0 10
44585: PUSH
44586: LD_VAR 0 6
44590: PPUSH
44591: CALL_OW 311
44595: PPUSH
44596: LD_INT 3
44598: PPUSH
44599: CALL_OW 259
44603: PUSH
44604: LD_INT 4
44606: MUL
44607: MUL
44608: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44609: LD_VAR 0 6
44613: PPUSH
44614: CALL_OW 263
44618: PUSH
44619: LD_INT 2
44621: EQUAL
44622: IFFALSE 44673
// begin j := IsControledBy ( i ) ;
44624: LD_ADDR_VAR 0 7
44628: PUSH
44629: LD_VAR 0 6
44633: PPUSH
44634: CALL_OW 312
44638: ST_TO_ADDR
// if j then
44639: LD_VAR 0 7
44643: IFFALSE 44673
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44645: LD_ADDR_VAR 0 10
44649: PUSH
44650: LD_VAR 0 10
44654: PUSH
44655: LD_VAR 0 7
44659: PPUSH
44660: LD_INT 3
44662: PPUSH
44663: CALL_OW 259
44667: PUSH
44668: LD_INT 3
44670: MUL
44671: MUL
44672: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44673: LD_VAR 0 6
44677: PPUSH
44678: CALL_OW 264
44682: PUSH
44683: LD_INT 5
44685: PUSH
44686: LD_INT 6
44688: PUSH
44689: LD_INT 46
44691: PUSH
44692: LD_INT 44
44694: PUSH
44695: LD_INT 47
44697: PUSH
44698: LD_INT 45
44700: PUSH
44701: LD_INT 28
44703: PUSH
44704: LD_INT 7
44706: PUSH
44707: LD_INT 27
44709: PUSH
44710: LD_INT 29
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: IN
44725: PUSH
44726: LD_VAR 0 1
44730: PPUSH
44731: LD_INT 52
44733: PPUSH
44734: CALL_OW 321
44738: PUSH
44739: LD_INT 2
44741: EQUAL
44742: AND
44743: IFFALSE 44760
// bpoints := bpoints * 1.2 ;
44745: LD_ADDR_VAR 0 10
44749: PUSH
44750: LD_VAR 0 10
44754: PUSH
44755: LD_REAL  1.20000000000000E+0000
44758: MUL
44759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44760: LD_VAR 0 6
44764: PPUSH
44765: CALL_OW 264
44769: PUSH
44770: LD_INT 6
44772: PUSH
44773: LD_INT 46
44775: PUSH
44776: LD_INT 47
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: IN
44784: IFFALSE 44801
// bpoints := bpoints * 1.2 ;
44786: LD_ADDR_VAR 0 10
44790: PUSH
44791: LD_VAR 0 10
44795: PUSH
44796: LD_REAL  1.20000000000000E+0000
44799: MUL
44800: ST_TO_ADDR
// end ; unit_building :
44801: GO 44815
44803: LD_INT 3
44805: DOUBLE
44806: EQUAL
44807: IFTRUE 44811
44809: GO 44814
44811: POP
// ; end ;
44812: GO 44815
44814: POP
// for j = 1 to 3 do
44815: LD_ADDR_VAR 0 7
44819: PUSH
44820: DOUBLE
44821: LD_INT 1
44823: DEC
44824: ST_TO_ADDR
44825: LD_INT 3
44827: PUSH
44828: FOR_TO
44829: IFFALSE 44882
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44831: LD_ADDR_VAR 0 5
44835: PUSH
44836: LD_VAR 0 5
44840: PPUSH
44841: LD_VAR 0 7
44845: PPUSH
44846: LD_VAR 0 5
44850: PUSH
44851: LD_VAR 0 7
44855: ARRAY
44856: PUSH
44857: LD_VAR 0 9
44861: PUSH
44862: LD_VAR 0 7
44866: ARRAY
44867: PUSH
44868: LD_VAR 0 10
44872: MUL
44873: PLUS
44874: PPUSH
44875: CALL_OW 1
44879: ST_TO_ADDR
44880: GO 44828
44882: POP
44883: POP
// end ;
44884: GO 43361
44886: POP
44887: POP
// result := Replace ( result , 4 , tmp ) ;
44888: LD_ADDR_VAR 0 5
44892: PUSH
44893: LD_VAR 0 5
44897: PPUSH
44898: LD_INT 4
44900: PPUSH
44901: LD_VAR 0 8
44905: PPUSH
44906: CALL_OW 1
44910: ST_TO_ADDR
// end ;
44911: LD_VAR 0 5
44915: RET
// export function DangerAtRange ( unit , range ) ; begin
44916: LD_INT 0
44918: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44919: LD_ADDR_VAR 0 3
44923: PUSH
44924: LD_VAR 0 1
44928: PPUSH
44929: CALL_OW 255
44933: PPUSH
44934: LD_VAR 0 1
44938: PPUSH
44939: CALL_OW 250
44943: PPUSH
44944: LD_VAR 0 1
44948: PPUSH
44949: CALL_OW 251
44953: PPUSH
44954: LD_VAR 0 2
44958: PPUSH
44959: CALL 43213 0 4
44963: ST_TO_ADDR
// end ;
44964: LD_VAR 0 3
44968: RET
// export function DangerInArea ( side , area ) ; begin
44969: LD_INT 0
44971: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44972: LD_ADDR_VAR 0 3
44976: PUSH
44977: LD_VAR 0 2
44981: PPUSH
44982: LD_INT 81
44984: PUSH
44985: LD_VAR 0 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PPUSH
44994: CALL_OW 70
44998: ST_TO_ADDR
// end ;
44999: LD_VAR 0 3
45003: RET
// export function IsExtension ( b ) ; begin
45004: LD_INT 0
45006: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45007: LD_ADDR_VAR 0 2
45011: PUSH
45012: LD_VAR 0 1
45016: PUSH
45017: LD_INT 23
45019: PUSH
45020: LD_INT 20
45022: PUSH
45023: LD_INT 22
45025: PUSH
45026: LD_INT 17
45028: PUSH
45029: LD_INT 24
45031: PUSH
45032: LD_INT 21
45034: PUSH
45035: LD_INT 19
45037: PUSH
45038: LD_INT 16
45040: PUSH
45041: LD_INT 25
45043: PUSH
45044: LD_INT 18
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: IN
45059: ST_TO_ADDR
// end ;
45060: LD_VAR 0 2
45064: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45065: LD_INT 0
45067: PPUSH
45068: PPUSH
45069: PPUSH
// result := [ ] ;
45070: LD_ADDR_VAR 0 4
45074: PUSH
45075: EMPTY
45076: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45077: LD_ADDR_VAR 0 5
45081: PUSH
45082: LD_VAR 0 2
45086: PPUSH
45087: LD_INT 21
45089: PUSH
45090: LD_INT 3
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PPUSH
45097: CALL_OW 70
45101: ST_TO_ADDR
// if not tmp then
45102: LD_VAR 0 5
45106: NOT
45107: IFFALSE 45111
// exit ;
45109: GO 45175
// if checkLink then
45111: LD_VAR 0 3
45115: IFFALSE 45165
// begin for i in tmp do
45117: LD_ADDR_VAR 0 6
45121: PUSH
45122: LD_VAR 0 5
45126: PUSH
45127: FOR_IN
45128: IFFALSE 45163
// if GetBase ( i ) <> base then
45130: LD_VAR 0 6
45134: PPUSH
45135: CALL_OW 274
45139: PUSH
45140: LD_VAR 0 1
45144: NONEQUAL
45145: IFFALSE 45161
// ComLinkToBase ( base , i ) ;
45147: LD_VAR 0 1
45151: PPUSH
45152: LD_VAR 0 6
45156: PPUSH
45157: CALL_OW 169
45161: GO 45127
45163: POP
45164: POP
// end ; result := tmp ;
45165: LD_ADDR_VAR 0 4
45169: PUSH
45170: LD_VAR 0 5
45174: ST_TO_ADDR
// end ;
45175: LD_VAR 0 4
45179: RET
// export function ComComplete ( units , b ) ; var i ; begin
45180: LD_INT 0
45182: PPUSH
45183: PPUSH
// if not units then
45184: LD_VAR 0 1
45188: NOT
45189: IFFALSE 45193
// exit ;
45191: GO 45283
// for i in units do
45193: LD_ADDR_VAR 0 4
45197: PUSH
45198: LD_VAR 0 1
45202: PUSH
45203: FOR_IN
45204: IFFALSE 45281
// if BuildingStatus ( b ) = bs_build then
45206: LD_VAR 0 2
45210: PPUSH
45211: CALL_OW 461
45215: PUSH
45216: LD_INT 1
45218: EQUAL
45219: IFFALSE 45279
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45221: LD_VAR 0 4
45225: PPUSH
45226: LD_STRING h
45228: PUSH
45229: LD_VAR 0 2
45233: PPUSH
45234: CALL_OW 250
45238: PUSH
45239: LD_VAR 0 2
45243: PPUSH
45244: CALL_OW 251
45248: PUSH
45249: LD_VAR 0 2
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: PUSH
45272: EMPTY
45273: LIST
45274: PPUSH
45275: CALL_OW 446
45279: GO 45203
45281: POP
45282: POP
// end ;
45283: LD_VAR 0 3
45287: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45288: LD_INT 0
45290: PPUSH
45291: PPUSH
45292: PPUSH
45293: PPUSH
45294: PPUSH
45295: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45296: LD_VAR 0 1
45300: NOT
45301: PUSH
45302: LD_VAR 0 1
45306: PPUSH
45307: CALL_OW 263
45311: PUSH
45312: LD_INT 2
45314: NONEQUAL
45315: OR
45316: IFFALSE 45320
// exit ;
45318: GO 45636
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45320: LD_ADDR_VAR 0 6
45324: PUSH
45325: LD_INT 22
45327: PUSH
45328: LD_VAR 0 1
45332: PPUSH
45333: CALL_OW 255
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: LD_INT 30
45347: PUSH
45348: LD_INT 36
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 34
45357: PUSH
45358: LD_INT 31
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: LIST
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PPUSH
45374: CALL_OW 69
45378: ST_TO_ADDR
// if not tmp then
45379: LD_VAR 0 6
45383: NOT
45384: IFFALSE 45388
// exit ;
45386: GO 45636
// result := [ ] ;
45388: LD_ADDR_VAR 0 2
45392: PUSH
45393: EMPTY
45394: ST_TO_ADDR
// for i in tmp do
45395: LD_ADDR_VAR 0 3
45399: PUSH
45400: LD_VAR 0 6
45404: PUSH
45405: FOR_IN
45406: IFFALSE 45477
// begin t := UnitsInside ( i ) ;
45408: LD_ADDR_VAR 0 4
45412: PUSH
45413: LD_VAR 0 3
45417: PPUSH
45418: CALL_OW 313
45422: ST_TO_ADDR
// if t then
45423: LD_VAR 0 4
45427: IFFALSE 45475
// for j in t do
45429: LD_ADDR_VAR 0 7
45433: PUSH
45434: LD_VAR 0 4
45438: PUSH
45439: FOR_IN
45440: IFFALSE 45473
// result := Replace ( result , result + 1 , j ) ;
45442: LD_ADDR_VAR 0 2
45446: PUSH
45447: LD_VAR 0 2
45451: PPUSH
45452: LD_VAR 0 2
45456: PUSH
45457: LD_INT 1
45459: PLUS
45460: PPUSH
45461: LD_VAR 0 7
45465: PPUSH
45466: CALL_OW 1
45470: ST_TO_ADDR
45471: GO 45439
45473: POP
45474: POP
// end ;
45475: GO 45405
45477: POP
45478: POP
// if not result then
45479: LD_VAR 0 2
45483: NOT
45484: IFFALSE 45488
// exit ;
45486: GO 45636
// mech := result [ 1 ] ;
45488: LD_ADDR_VAR 0 5
45492: PUSH
45493: LD_VAR 0 2
45497: PUSH
45498: LD_INT 1
45500: ARRAY
45501: ST_TO_ADDR
// if result > 1 then
45502: LD_VAR 0 2
45506: PUSH
45507: LD_INT 1
45509: GREATER
45510: IFFALSE 45622
// begin for i = 2 to result do
45512: LD_ADDR_VAR 0 3
45516: PUSH
45517: DOUBLE
45518: LD_INT 2
45520: DEC
45521: ST_TO_ADDR
45522: LD_VAR 0 2
45526: PUSH
45527: FOR_TO
45528: IFFALSE 45620
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45530: LD_ADDR_VAR 0 4
45534: PUSH
45535: LD_VAR 0 2
45539: PUSH
45540: LD_VAR 0 3
45544: ARRAY
45545: PPUSH
45546: LD_INT 3
45548: PPUSH
45549: CALL_OW 259
45553: PUSH
45554: LD_VAR 0 2
45558: PUSH
45559: LD_VAR 0 3
45563: ARRAY
45564: PPUSH
45565: CALL_OW 432
45569: MINUS
45570: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45571: LD_VAR 0 4
45575: PUSH
45576: LD_VAR 0 5
45580: PPUSH
45581: LD_INT 3
45583: PPUSH
45584: CALL_OW 259
45588: PUSH
45589: LD_VAR 0 5
45593: PPUSH
45594: CALL_OW 432
45598: MINUS
45599: GREATEREQUAL
45600: IFFALSE 45618
// mech := result [ i ] ;
45602: LD_ADDR_VAR 0 5
45606: PUSH
45607: LD_VAR 0 2
45611: PUSH
45612: LD_VAR 0 3
45616: ARRAY
45617: ST_TO_ADDR
// end ;
45618: GO 45527
45620: POP
45621: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45622: LD_VAR 0 1
45626: PPUSH
45627: LD_VAR 0 5
45631: PPUSH
45632: CALL_OW 135
// end ;
45636: LD_VAR 0 2
45640: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45641: LD_INT 0
45643: PPUSH
45644: PPUSH
45645: PPUSH
45646: PPUSH
45647: PPUSH
45648: PPUSH
45649: PPUSH
45650: PPUSH
45651: PPUSH
45652: PPUSH
45653: PPUSH
45654: PPUSH
45655: PPUSH
// result := [ ] ;
45656: LD_ADDR_VAR 0 7
45660: PUSH
45661: EMPTY
45662: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45663: LD_VAR 0 1
45667: PPUSH
45668: CALL_OW 266
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: IN
45683: NOT
45684: IFFALSE 45688
// exit ;
45686: GO 47322
// if name then
45688: LD_VAR 0 3
45692: IFFALSE 45708
// SetBName ( base_dep , name ) ;
45694: LD_VAR 0 1
45698: PPUSH
45699: LD_VAR 0 3
45703: PPUSH
45704: CALL_OW 500
// base := GetBase ( base_dep ) ;
45708: LD_ADDR_VAR 0 15
45712: PUSH
45713: LD_VAR 0 1
45717: PPUSH
45718: CALL_OW 274
45722: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45723: LD_ADDR_VAR 0 16
45727: PUSH
45728: LD_VAR 0 1
45732: PPUSH
45733: CALL_OW 255
45737: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45738: LD_ADDR_VAR 0 17
45742: PUSH
45743: LD_VAR 0 1
45747: PPUSH
45748: CALL_OW 248
45752: ST_TO_ADDR
// if sources then
45753: LD_VAR 0 5
45757: IFFALSE 45804
// for i = 1 to 3 do
45759: LD_ADDR_VAR 0 8
45763: PUSH
45764: DOUBLE
45765: LD_INT 1
45767: DEC
45768: ST_TO_ADDR
45769: LD_INT 3
45771: PUSH
45772: FOR_TO
45773: IFFALSE 45802
// AddResourceType ( base , i , sources [ i ] ) ;
45775: LD_VAR 0 15
45779: PPUSH
45780: LD_VAR 0 8
45784: PPUSH
45785: LD_VAR 0 5
45789: PUSH
45790: LD_VAR 0 8
45794: ARRAY
45795: PPUSH
45796: CALL_OW 276
45800: GO 45772
45802: POP
45803: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45804: LD_ADDR_VAR 0 18
45808: PUSH
45809: LD_VAR 0 15
45813: PPUSH
45814: LD_VAR 0 2
45818: PPUSH
45819: LD_INT 1
45821: PPUSH
45822: CALL 45065 0 3
45826: ST_TO_ADDR
// InitHc ;
45827: CALL_OW 19
// InitUc ;
45831: CALL_OW 18
// uc_side := side ;
45835: LD_ADDR_OWVAR 20
45839: PUSH
45840: LD_VAR 0 16
45844: ST_TO_ADDR
// uc_nation := nation ;
45845: LD_ADDR_OWVAR 21
45849: PUSH
45850: LD_VAR 0 17
45854: ST_TO_ADDR
// if buildings then
45855: LD_VAR 0 18
45859: IFFALSE 47181
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45861: LD_ADDR_VAR 0 19
45865: PUSH
45866: LD_VAR 0 18
45870: PPUSH
45871: LD_INT 2
45873: PUSH
45874: LD_INT 30
45876: PUSH
45877: LD_INT 29
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 30
45886: PUSH
45887: LD_INT 30
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: LIST
45898: PPUSH
45899: CALL_OW 72
45903: ST_TO_ADDR
// if tmp then
45904: LD_VAR 0 19
45908: IFFALSE 45956
// for i in tmp do
45910: LD_ADDR_VAR 0 8
45914: PUSH
45915: LD_VAR 0 19
45919: PUSH
45920: FOR_IN
45921: IFFALSE 45954
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45923: LD_VAR 0 8
45927: PPUSH
45928: CALL_OW 250
45932: PPUSH
45933: LD_VAR 0 8
45937: PPUSH
45938: CALL_OW 251
45942: PPUSH
45943: LD_VAR 0 16
45947: PPUSH
45948: CALL_OW 441
45952: GO 45920
45954: POP
45955: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45956: LD_VAR 0 18
45960: PPUSH
45961: LD_INT 2
45963: PUSH
45964: LD_INT 30
45966: PUSH
45967: LD_INT 32
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 30
45976: PUSH
45977: LD_INT 33
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: PPUSH
45989: CALL_OW 72
45993: IFFALSE 46081
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45995: LD_ADDR_VAR 0 8
45999: PUSH
46000: LD_VAR 0 18
46004: PPUSH
46005: LD_INT 2
46007: PUSH
46008: LD_INT 30
46010: PUSH
46011: LD_INT 32
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 30
46020: PUSH
46021: LD_INT 33
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: PPUSH
46033: CALL_OW 72
46037: PUSH
46038: FOR_IN
46039: IFFALSE 46079
// begin if not GetBWeapon ( i ) then
46041: LD_VAR 0 8
46045: PPUSH
46046: CALL_OW 269
46050: NOT
46051: IFFALSE 46077
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46053: LD_VAR 0 8
46057: PPUSH
46058: LD_VAR 0 8
46062: PPUSH
46063: LD_VAR 0 2
46067: PPUSH
46068: CALL 47327 0 2
46072: PPUSH
46073: CALL_OW 431
// end ;
46077: GO 46038
46079: POP
46080: POP
// end ; for i = 1 to personel do
46081: LD_ADDR_VAR 0 8
46085: PUSH
46086: DOUBLE
46087: LD_INT 1
46089: DEC
46090: ST_TO_ADDR
46091: LD_VAR 0 6
46095: PUSH
46096: FOR_TO
46097: IFFALSE 47161
// begin if i > 4 then
46099: LD_VAR 0 8
46103: PUSH
46104: LD_INT 4
46106: GREATER
46107: IFFALSE 46111
// break ;
46109: GO 47161
// case i of 1 :
46111: LD_VAR 0 8
46115: PUSH
46116: LD_INT 1
46118: DOUBLE
46119: EQUAL
46120: IFTRUE 46124
46122: GO 46204
46124: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46125: LD_ADDR_VAR 0 12
46129: PUSH
46130: LD_VAR 0 18
46134: PPUSH
46135: LD_INT 22
46137: PUSH
46138: LD_VAR 0 16
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 58
46149: PUSH
46150: EMPTY
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 30
46158: PUSH
46159: LD_INT 32
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 30
46168: PUSH
46169: LD_INT 4
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 30
46178: PUSH
46179: LD_INT 5
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: PPUSH
46197: CALL_OW 72
46201: ST_TO_ADDR
46202: GO 46426
46204: LD_INT 2
46206: DOUBLE
46207: EQUAL
46208: IFTRUE 46212
46210: GO 46274
46212: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46213: LD_ADDR_VAR 0 12
46217: PUSH
46218: LD_VAR 0 18
46222: PPUSH
46223: LD_INT 22
46225: PUSH
46226: LD_VAR 0 16
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 30
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 30
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PPUSH
46267: CALL_OW 72
46271: ST_TO_ADDR
46272: GO 46426
46274: LD_INT 3
46276: DOUBLE
46277: EQUAL
46278: IFTRUE 46282
46280: GO 46344
46282: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46283: LD_ADDR_VAR 0 12
46287: PUSH
46288: LD_VAR 0 18
46292: PPUSH
46293: LD_INT 22
46295: PUSH
46296: LD_VAR 0 16
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: LD_INT 30
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 30
46320: PUSH
46321: LD_INT 3
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PPUSH
46337: CALL_OW 72
46341: ST_TO_ADDR
46342: GO 46426
46344: LD_INT 4
46346: DOUBLE
46347: EQUAL
46348: IFTRUE 46352
46350: GO 46425
46352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46353: LD_ADDR_VAR 0 12
46357: PUSH
46358: LD_VAR 0 18
46362: PPUSH
46363: LD_INT 22
46365: PUSH
46366: LD_VAR 0 16
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 30
46380: PUSH
46381: LD_INT 6
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 30
46390: PUSH
46391: LD_INT 7
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 30
46400: PUSH
46401: LD_INT 8
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PPUSH
46418: CALL_OW 72
46422: ST_TO_ADDR
46423: GO 46426
46425: POP
// if i = 1 then
46426: LD_VAR 0 8
46430: PUSH
46431: LD_INT 1
46433: EQUAL
46434: IFFALSE 46545
// begin tmp := [ ] ;
46436: LD_ADDR_VAR 0 19
46440: PUSH
46441: EMPTY
46442: ST_TO_ADDR
// for j in f do
46443: LD_ADDR_VAR 0 9
46447: PUSH
46448: LD_VAR 0 12
46452: PUSH
46453: FOR_IN
46454: IFFALSE 46527
// if GetBType ( j ) = b_bunker then
46456: LD_VAR 0 9
46460: PPUSH
46461: CALL_OW 266
46465: PUSH
46466: LD_INT 32
46468: EQUAL
46469: IFFALSE 46496
// tmp := Insert ( tmp , 1 , j ) else
46471: LD_ADDR_VAR 0 19
46475: PUSH
46476: LD_VAR 0 19
46480: PPUSH
46481: LD_INT 1
46483: PPUSH
46484: LD_VAR 0 9
46488: PPUSH
46489: CALL_OW 2
46493: ST_TO_ADDR
46494: GO 46525
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46496: LD_ADDR_VAR 0 19
46500: PUSH
46501: LD_VAR 0 19
46505: PPUSH
46506: LD_VAR 0 19
46510: PUSH
46511: LD_INT 1
46513: PLUS
46514: PPUSH
46515: LD_VAR 0 9
46519: PPUSH
46520: CALL_OW 2
46524: ST_TO_ADDR
46525: GO 46453
46527: POP
46528: POP
// if tmp then
46529: LD_VAR 0 19
46533: IFFALSE 46545
// f := tmp ;
46535: LD_ADDR_VAR 0 12
46539: PUSH
46540: LD_VAR 0 19
46544: ST_TO_ADDR
// end ; x := personel [ i ] ;
46545: LD_ADDR_VAR 0 13
46549: PUSH
46550: LD_VAR 0 6
46554: PUSH
46555: LD_VAR 0 8
46559: ARRAY
46560: ST_TO_ADDR
// if x = - 1 then
46561: LD_VAR 0 13
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: EQUAL
46570: IFFALSE 46779
// begin for j in f do
46572: LD_ADDR_VAR 0 9
46576: PUSH
46577: LD_VAR 0 12
46581: PUSH
46582: FOR_IN
46583: IFFALSE 46775
// repeat InitHc ;
46585: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46589: LD_VAR 0 9
46593: PPUSH
46594: CALL_OW 266
46598: PUSH
46599: LD_INT 5
46601: EQUAL
46602: IFFALSE 46672
// begin if UnitsInside ( j ) < 3 then
46604: LD_VAR 0 9
46608: PPUSH
46609: CALL_OW 313
46613: PUSH
46614: LD_INT 3
46616: LESS
46617: IFFALSE 46653
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46619: LD_INT 0
46621: PPUSH
46622: LD_INT 5
46624: PUSH
46625: LD_INT 8
46627: PUSH
46628: LD_INT 9
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: LIST
46635: PUSH
46636: LD_VAR 0 17
46640: ARRAY
46641: PPUSH
46642: LD_VAR 0 4
46646: PPUSH
46647: CALL_OW 380
46651: GO 46670
// PrepareHuman ( false , i , skill ) ;
46653: LD_INT 0
46655: PPUSH
46656: LD_VAR 0 8
46660: PPUSH
46661: LD_VAR 0 4
46665: PPUSH
46666: CALL_OW 380
// end else
46670: GO 46689
// PrepareHuman ( false , i , skill ) ;
46672: LD_INT 0
46674: PPUSH
46675: LD_VAR 0 8
46679: PPUSH
46680: LD_VAR 0 4
46684: PPUSH
46685: CALL_OW 380
// un := CreateHuman ;
46689: LD_ADDR_VAR 0 14
46693: PUSH
46694: CALL_OW 44
46698: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46699: LD_ADDR_VAR 0 7
46703: PUSH
46704: LD_VAR 0 7
46708: PPUSH
46709: LD_INT 1
46711: PPUSH
46712: LD_VAR 0 14
46716: PPUSH
46717: CALL_OW 2
46721: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46722: LD_VAR 0 14
46726: PPUSH
46727: LD_VAR 0 9
46731: PPUSH
46732: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46736: LD_VAR 0 9
46740: PPUSH
46741: CALL_OW 313
46745: PUSH
46746: LD_INT 6
46748: EQUAL
46749: PUSH
46750: LD_VAR 0 9
46754: PPUSH
46755: CALL_OW 266
46759: PUSH
46760: LD_INT 32
46762: PUSH
46763: LD_INT 31
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: IN
46770: OR
46771: IFFALSE 46585
46773: GO 46582
46775: POP
46776: POP
// end else
46777: GO 47159
// for j = 1 to x do
46779: LD_ADDR_VAR 0 9
46783: PUSH
46784: DOUBLE
46785: LD_INT 1
46787: DEC
46788: ST_TO_ADDR
46789: LD_VAR 0 13
46793: PUSH
46794: FOR_TO
46795: IFFALSE 47157
// begin InitHc ;
46797: CALL_OW 19
// if not f then
46801: LD_VAR 0 12
46805: NOT
46806: IFFALSE 46895
// begin PrepareHuman ( false , i , skill ) ;
46808: LD_INT 0
46810: PPUSH
46811: LD_VAR 0 8
46815: PPUSH
46816: LD_VAR 0 4
46820: PPUSH
46821: CALL_OW 380
// un := CreateHuman ;
46825: LD_ADDR_VAR 0 14
46829: PUSH
46830: CALL_OW 44
46834: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46835: LD_ADDR_VAR 0 7
46839: PUSH
46840: LD_VAR 0 7
46844: PPUSH
46845: LD_INT 1
46847: PPUSH
46848: LD_VAR 0 14
46852: PPUSH
46853: CALL_OW 2
46857: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46858: LD_VAR 0 14
46862: PPUSH
46863: LD_VAR 0 1
46867: PPUSH
46868: CALL_OW 250
46872: PPUSH
46873: LD_VAR 0 1
46877: PPUSH
46878: CALL_OW 251
46882: PPUSH
46883: LD_INT 10
46885: PPUSH
46886: LD_INT 0
46888: PPUSH
46889: CALL_OW 50
// continue ;
46893: GO 46794
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46895: LD_VAR 0 12
46899: PUSH
46900: LD_INT 1
46902: ARRAY
46903: PPUSH
46904: CALL_OW 313
46908: PUSH
46909: LD_VAR 0 12
46913: PUSH
46914: LD_INT 1
46916: ARRAY
46917: PPUSH
46918: CALL_OW 266
46922: PUSH
46923: LD_INT 32
46925: PUSH
46926: LD_INT 31
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: IN
46933: AND
46934: PUSH
46935: LD_VAR 0 12
46939: PUSH
46940: LD_INT 1
46942: ARRAY
46943: PPUSH
46944: CALL_OW 313
46948: PUSH
46949: LD_INT 6
46951: EQUAL
46952: OR
46953: IFFALSE 46973
// f := Delete ( f , 1 ) ;
46955: LD_ADDR_VAR 0 12
46959: PUSH
46960: LD_VAR 0 12
46964: PPUSH
46965: LD_INT 1
46967: PPUSH
46968: CALL_OW 3
46972: ST_TO_ADDR
// if not f then
46973: LD_VAR 0 12
46977: NOT
46978: IFFALSE 46996
// begin x := x + 2 ;
46980: LD_ADDR_VAR 0 13
46984: PUSH
46985: LD_VAR 0 13
46989: PUSH
46990: LD_INT 2
46992: PLUS
46993: ST_TO_ADDR
// continue ;
46994: GO 46794
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46996: LD_VAR 0 12
47000: PUSH
47001: LD_INT 1
47003: ARRAY
47004: PPUSH
47005: CALL_OW 266
47009: PUSH
47010: LD_INT 5
47012: EQUAL
47013: IFFALSE 47087
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47015: LD_VAR 0 12
47019: PUSH
47020: LD_INT 1
47022: ARRAY
47023: PPUSH
47024: CALL_OW 313
47028: PUSH
47029: LD_INT 3
47031: LESS
47032: IFFALSE 47068
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47034: LD_INT 0
47036: PPUSH
47037: LD_INT 5
47039: PUSH
47040: LD_INT 8
47042: PUSH
47043: LD_INT 9
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: PUSH
47051: LD_VAR 0 17
47055: ARRAY
47056: PPUSH
47057: LD_VAR 0 4
47061: PPUSH
47062: CALL_OW 380
47066: GO 47085
// PrepareHuman ( false , i , skill ) ;
47068: LD_INT 0
47070: PPUSH
47071: LD_VAR 0 8
47075: PPUSH
47076: LD_VAR 0 4
47080: PPUSH
47081: CALL_OW 380
// end else
47085: GO 47104
// PrepareHuman ( false , i , skill ) ;
47087: LD_INT 0
47089: PPUSH
47090: LD_VAR 0 8
47094: PPUSH
47095: LD_VAR 0 4
47099: PPUSH
47100: CALL_OW 380
// un := CreateHuman ;
47104: LD_ADDR_VAR 0 14
47108: PUSH
47109: CALL_OW 44
47113: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47114: LD_ADDR_VAR 0 7
47118: PUSH
47119: LD_VAR 0 7
47123: PPUSH
47124: LD_INT 1
47126: PPUSH
47127: LD_VAR 0 14
47131: PPUSH
47132: CALL_OW 2
47136: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47137: LD_VAR 0 14
47141: PPUSH
47142: LD_VAR 0 12
47146: PUSH
47147: LD_INT 1
47149: ARRAY
47150: PPUSH
47151: CALL_OW 52
// end ;
47155: GO 46794
47157: POP
47158: POP
// end ;
47159: GO 46096
47161: POP
47162: POP
// result := result ^ buildings ;
47163: LD_ADDR_VAR 0 7
47167: PUSH
47168: LD_VAR 0 7
47172: PUSH
47173: LD_VAR 0 18
47177: ADD
47178: ST_TO_ADDR
// end else
47179: GO 47322
// begin for i = 1 to personel do
47181: LD_ADDR_VAR 0 8
47185: PUSH
47186: DOUBLE
47187: LD_INT 1
47189: DEC
47190: ST_TO_ADDR
47191: LD_VAR 0 6
47195: PUSH
47196: FOR_TO
47197: IFFALSE 47320
// begin if i > 4 then
47199: LD_VAR 0 8
47203: PUSH
47204: LD_INT 4
47206: GREATER
47207: IFFALSE 47211
// break ;
47209: GO 47320
// x := personel [ i ] ;
47211: LD_ADDR_VAR 0 13
47215: PUSH
47216: LD_VAR 0 6
47220: PUSH
47221: LD_VAR 0 8
47225: ARRAY
47226: ST_TO_ADDR
// if x = - 1 then
47227: LD_VAR 0 13
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: EQUAL
47236: IFFALSE 47240
// continue ;
47238: GO 47196
// PrepareHuman ( false , i , skill ) ;
47240: LD_INT 0
47242: PPUSH
47243: LD_VAR 0 8
47247: PPUSH
47248: LD_VAR 0 4
47252: PPUSH
47253: CALL_OW 380
// un := CreateHuman ;
47257: LD_ADDR_VAR 0 14
47261: PUSH
47262: CALL_OW 44
47266: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47267: LD_VAR 0 14
47271: PPUSH
47272: LD_VAR 0 1
47276: PPUSH
47277: CALL_OW 250
47281: PPUSH
47282: LD_VAR 0 1
47286: PPUSH
47287: CALL_OW 251
47291: PPUSH
47292: LD_INT 10
47294: PPUSH
47295: LD_INT 0
47297: PPUSH
47298: CALL_OW 50
// result := result ^ un ;
47302: LD_ADDR_VAR 0 7
47306: PUSH
47307: LD_VAR 0 7
47311: PUSH
47312: LD_VAR 0 14
47316: ADD
47317: ST_TO_ADDR
// end ;
47318: GO 47196
47320: POP
47321: POP
// end ; end ;
47322: LD_VAR 0 7
47326: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47327: LD_INT 0
47329: PPUSH
47330: PPUSH
47331: PPUSH
47332: PPUSH
47333: PPUSH
47334: PPUSH
47335: PPUSH
47336: PPUSH
47337: PPUSH
47338: PPUSH
47339: PPUSH
47340: PPUSH
47341: PPUSH
47342: PPUSH
47343: PPUSH
47344: PPUSH
// result := false ;
47345: LD_ADDR_VAR 0 3
47349: PUSH
47350: LD_INT 0
47352: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47353: LD_VAR 0 1
47357: NOT
47358: PUSH
47359: LD_VAR 0 1
47363: PPUSH
47364: CALL_OW 266
47368: PUSH
47369: LD_INT 32
47371: PUSH
47372: LD_INT 33
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: IN
47379: NOT
47380: OR
47381: IFFALSE 47385
// exit ;
47383: GO 48494
// nat := GetNation ( tower ) ;
47385: LD_ADDR_VAR 0 12
47389: PUSH
47390: LD_VAR 0 1
47394: PPUSH
47395: CALL_OW 248
47399: ST_TO_ADDR
// side := GetSide ( tower ) ;
47400: LD_ADDR_VAR 0 16
47404: PUSH
47405: LD_VAR 0 1
47409: PPUSH
47410: CALL_OW 255
47414: ST_TO_ADDR
// x := GetX ( tower ) ;
47415: LD_ADDR_VAR 0 10
47419: PUSH
47420: LD_VAR 0 1
47424: PPUSH
47425: CALL_OW 250
47429: ST_TO_ADDR
// y := GetY ( tower ) ;
47430: LD_ADDR_VAR 0 11
47434: PUSH
47435: LD_VAR 0 1
47439: PPUSH
47440: CALL_OW 251
47444: ST_TO_ADDR
// if not x or not y then
47445: LD_VAR 0 10
47449: NOT
47450: PUSH
47451: LD_VAR 0 11
47455: NOT
47456: OR
47457: IFFALSE 47461
// exit ;
47459: GO 48494
// weapon := 0 ;
47461: LD_ADDR_VAR 0 18
47465: PUSH
47466: LD_INT 0
47468: ST_TO_ADDR
// fac_list := [ ] ;
47469: LD_ADDR_VAR 0 17
47473: PUSH
47474: EMPTY
47475: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47476: LD_ADDR_VAR 0 6
47480: PUSH
47481: LD_VAR 0 1
47485: PPUSH
47486: CALL_OW 274
47490: PPUSH
47491: LD_VAR 0 2
47495: PPUSH
47496: LD_INT 0
47498: PPUSH
47499: CALL 45065 0 3
47503: PPUSH
47504: LD_INT 30
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PPUSH
47514: CALL_OW 72
47518: ST_TO_ADDR
// if not factories then
47519: LD_VAR 0 6
47523: NOT
47524: IFFALSE 47528
// exit ;
47526: GO 48494
// for i in factories do
47528: LD_ADDR_VAR 0 8
47532: PUSH
47533: LD_VAR 0 6
47537: PUSH
47538: FOR_IN
47539: IFFALSE 47564
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47541: LD_ADDR_VAR 0 17
47545: PUSH
47546: LD_VAR 0 17
47550: PUSH
47551: LD_VAR 0 8
47555: PPUSH
47556: CALL_OW 478
47560: UNION
47561: ST_TO_ADDR
47562: GO 47538
47564: POP
47565: POP
// if not fac_list then
47566: LD_VAR 0 17
47570: NOT
47571: IFFALSE 47575
// exit ;
47573: GO 48494
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47575: LD_ADDR_VAR 0 5
47579: PUSH
47580: LD_INT 4
47582: PUSH
47583: LD_INT 5
47585: PUSH
47586: LD_INT 9
47588: PUSH
47589: LD_INT 10
47591: PUSH
47592: LD_INT 6
47594: PUSH
47595: LD_INT 7
47597: PUSH
47598: LD_INT 11
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 27
47612: PUSH
47613: LD_INT 28
47615: PUSH
47616: LD_INT 26
47618: PUSH
47619: LD_INT 30
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 43
47630: PUSH
47631: LD_INT 44
47633: PUSH
47634: LD_INT 46
47636: PUSH
47637: LD_INT 45
47639: PUSH
47640: LD_INT 47
47642: PUSH
47643: LD_INT 49
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: PUSH
47659: LD_VAR 0 12
47663: ARRAY
47664: ST_TO_ADDR
// list := list isect fac_list ;
47665: LD_ADDR_VAR 0 5
47669: PUSH
47670: LD_VAR 0 5
47674: PUSH
47675: LD_VAR 0 17
47679: ISECT
47680: ST_TO_ADDR
// if not list then
47681: LD_VAR 0 5
47685: NOT
47686: IFFALSE 47690
// exit ;
47688: GO 48494
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47690: LD_VAR 0 12
47694: PUSH
47695: LD_INT 3
47697: EQUAL
47698: PUSH
47699: LD_INT 49
47701: PUSH
47702: LD_VAR 0 5
47706: IN
47707: AND
47708: PUSH
47709: LD_INT 31
47711: PPUSH
47712: LD_VAR 0 16
47716: PPUSH
47717: CALL_OW 321
47721: PUSH
47722: LD_INT 2
47724: EQUAL
47725: AND
47726: IFFALSE 47786
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47728: LD_INT 22
47730: PUSH
47731: LD_VAR 0 16
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 35
47742: PUSH
47743: LD_INT 49
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 91
47752: PUSH
47753: LD_VAR 0 1
47757: PUSH
47758: LD_INT 10
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: LIST
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: LIST
47770: PPUSH
47771: CALL_OW 69
47775: NOT
47776: IFFALSE 47786
// weapon := ru_time_lapser ;
47778: LD_ADDR_VAR 0 18
47782: PUSH
47783: LD_INT 49
47785: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47786: LD_VAR 0 12
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: IN
47801: PUSH
47802: LD_INT 11
47804: PUSH
47805: LD_VAR 0 5
47809: IN
47810: PUSH
47811: LD_INT 30
47813: PUSH
47814: LD_VAR 0 5
47818: IN
47819: OR
47820: AND
47821: PUSH
47822: LD_INT 6
47824: PPUSH
47825: LD_VAR 0 16
47829: PPUSH
47830: CALL_OW 321
47834: PUSH
47835: LD_INT 2
47837: EQUAL
47838: AND
47839: IFFALSE 48004
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47841: LD_INT 22
47843: PUSH
47844: LD_VAR 0 16
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 35
47858: PUSH
47859: LD_INT 11
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 35
47868: PUSH
47869: LD_INT 30
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 91
47883: PUSH
47884: LD_VAR 0 1
47888: PUSH
47889: LD_INT 18
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: PPUSH
47902: CALL_OW 69
47906: NOT
47907: PUSH
47908: LD_INT 22
47910: PUSH
47911: LD_VAR 0 16
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 30
47925: PUSH
47926: LD_INT 32
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 30
47935: PUSH
47936: LD_INT 33
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 91
47950: PUSH
47951: LD_VAR 0 1
47955: PUSH
47956: LD_INT 12
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: LIST
47968: PUSH
47969: EMPTY
47970: LIST
47971: PPUSH
47972: CALL_OW 69
47976: PUSH
47977: LD_INT 2
47979: GREATER
47980: AND
47981: IFFALSE 48004
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47983: LD_ADDR_VAR 0 18
47987: PUSH
47988: LD_INT 11
47990: PUSH
47991: LD_INT 30
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_VAR 0 12
48002: ARRAY
48003: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48004: LD_VAR 0 18
48008: NOT
48009: PUSH
48010: LD_INT 40
48012: PPUSH
48013: LD_VAR 0 16
48017: PPUSH
48018: CALL_OW 321
48022: PUSH
48023: LD_INT 2
48025: EQUAL
48026: AND
48027: PUSH
48028: LD_INT 7
48030: PUSH
48031: LD_VAR 0 5
48035: IN
48036: PUSH
48037: LD_INT 28
48039: PUSH
48040: LD_VAR 0 5
48044: IN
48045: OR
48046: PUSH
48047: LD_INT 45
48049: PUSH
48050: LD_VAR 0 5
48054: IN
48055: OR
48056: AND
48057: IFFALSE 48311
// begin hex := GetHexInfo ( x , y ) ;
48059: LD_ADDR_VAR 0 4
48063: PUSH
48064: LD_VAR 0 10
48068: PPUSH
48069: LD_VAR 0 11
48073: PPUSH
48074: CALL_OW 546
48078: ST_TO_ADDR
// if hex [ 1 ] then
48079: LD_VAR 0 4
48083: PUSH
48084: LD_INT 1
48086: ARRAY
48087: IFFALSE 48091
// exit ;
48089: GO 48494
// height := hex [ 2 ] ;
48091: LD_ADDR_VAR 0 15
48095: PUSH
48096: LD_VAR 0 4
48100: PUSH
48101: LD_INT 2
48103: ARRAY
48104: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48105: LD_ADDR_VAR 0 14
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: LD_INT 5
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: ST_TO_ADDR
// for i in tmp do
48128: LD_ADDR_VAR 0 8
48132: PUSH
48133: LD_VAR 0 14
48137: PUSH
48138: FOR_IN
48139: IFFALSE 48309
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48141: LD_ADDR_VAR 0 9
48145: PUSH
48146: LD_VAR 0 10
48150: PPUSH
48151: LD_VAR 0 8
48155: PPUSH
48156: LD_INT 5
48158: PPUSH
48159: CALL_OW 272
48163: PUSH
48164: LD_VAR 0 11
48168: PPUSH
48169: LD_VAR 0 8
48173: PPUSH
48174: LD_INT 5
48176: PPUSH
48177: CALL_OW 273
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48186: LD_VAR 0 9
48190: PUSH
48191: LD_INT 1
48193: ARRAY
48194: PPUSH
48195: LD_VAR 0 9
48199: PUSH
48200: LD_INT 2
48202: ARRAY
48203: PPUSH
48204: CALL_OW 488
48208: IFFALSE 48307
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48210: LD_ADDR_VAR 0 4
48214: PUSH
48215: LD_VAR 0 9
48219: PUSH
48220: LD_INT 1
48222: ARRAY
48223: PPUSH
48224: LD_VAR 0 9
48228: PUSH
48229: LD_INT 2
48231: ARRAY
48232: PPUSH
48233: CALL_OW 546
48237: ST_TO_ADDR
// if hex [ 1 ] then
48238: LD_VAR 0 4
48242: PUSH
48243: LD_INT 1
48245: ARRAY
48246: IFFALSE 48250
// continue ;
48248: GO 48138
// h := hex [ 2 ] ;
48250: LD_ADDR_VAR 0 13
48254: PUSH
48255: LD_VAR 0 4
48259: PUSH
48260: LD_INT 2
48262: ARRAY
48263: ST_TO_ADDR
// if h + 7 < height then
48264: LD_VAR 0 13
48268: PUSH
48269: LD_INT 7
48271: PLUS
48272: PUSH
48273: LD_VAR 0 15
48277: LESS
48278: IFFALSE 48307
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48280: LD_ADDR_VAR 0 18
48284: PUSH
48285: LD_INT 7
48287: PUSH
48288: LD_INT 28
48290: PUSH
48291: LD_INT 45
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: PUSH
48299: LD_VAR 0 12
48303: ARRAY
48304: ST_TO_ADDR
// break ;
48305: GO 48309
// end ; end ; end ;
48307: GO 48138
48309: POP
48310: POP
// end ; if not weapon then
48311: LD_VAR 0 18
48315: NOT
48316: IFFALSE 48376
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48318: LD_ADDR_VAR 0 5
48322: PUSH
48323: LD_VAR 0 5
48327: PUSH
48328: LD_INT 11
48330: PUSH
48331: LD_INT 30
48333: PUSH
48334: LD_INT 49
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: LIST
48341: DIFF
48342: ST_TO_ADDR
// if not list then
48343: LD_VAR 0 5
48347: NOT
48348: IFFALSE 48352
// exit ;
48350: GO 48494
// weapon := list [ rand ( 1 , list ) ] ;
48352: LD_ADDR_VAR 0 18
48356: PUSH
48357: LD_VAR 0 5
48361: PUSH
48362: LD_INT 1
48364: PPUSH
48365: LD_VAR 0 5
48369: PPUSH
48370: CALL_OW 12
48374: ARRAY
48375: ST_TO_ADDR
// end ; if weapon then
48376: LD_VAR 0 18
48380: IFFALSE 48494
// begin tmp := CostOfWeapon ( weapon ) ;
48382: LD_ADDR_VAR 0 14
48386: PUSH
48387: LD_VAR 0 18
48391: PPUSH
48392: CALL_OW 451
48396: ST_TO_ADDR
// j := GetBase ( tower ) ;
48397: LD_ADDR_VAR 0 9
48401: PUSH
48402: LD_VAR 0 1
48406: PPUSH
48407: CALL_OW 274
48411: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48412: LD_VAR 0 9
48416: PPUSH
48417: LD_INT 1
48419: PPUSH
48420: CALL_OW 275
48424: PUSH
48425: LD_VAR 0 14
48429: PUSH
48430: LD_INT 1
48432: ARRAY
48433: GREATEREQUAL
48434: PUSH
48435: LD_VAR 0 9
48439: PPUSH
48440: LD_INT 2
48442: PPUSH
48443: CALL_OW 275
48447: PUSH
48448: LD_VAR 0 14
48452: PUSH
48453: LD_INT 2
48455: ARRAY
48456: GREATEREQUAL
48457: AND
48458: PUSH
48459: LD_VAR 0 9
48463: PPUSH
48464: LD_INT 3
48466: PPUSH
48467: CALL_OW 275
48471: PUSH
48472: LD_VAR 0 14
48476: PUSH
48477: LD_INT 3
48479: ARRAY
48480: GREATEREQUAL
48481: AND
48482: IFFALSE 48494
// result := weapon ;
48484: LD_ADDR_VAR 0 3
48488: PUSH
48489: LD_VAR 0 18
48493: ST_TO_ADDR
// end ; end ;
48494: LD_VAR 0 3
48498: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48499: LD_INT 0
48501: PPUSH
48502: PPUSH
// result := true ;
48503: LD_ADDR_VAR 0 3
48507: PUSH
48508: LD_INT 1
48510: ST_TO_ADDR
// if array1 = array2 then
48511: LD_VAR 0 1
48515: PUSH
48516: LD_VAR 0 2
48520: EQUAL
48521: IFFALSE 48581
// begin for i = 1 to array1 do
48523: LD_ADDR_VAR 0 4
48527: PUSH
48528: DOUBLE
48529: LD_INT 1
48531: DEC
48532: ST_TO_ADDR
48533: LD_VAR 0 1
48537: PUSH
48538: FOR_TO
48539: IFFALSE 48577
// if array1 [ i ] <> array2 [ i ] then
48541: LD_VAR 0 1
48545: PUSH
48546: LD_VAR 0 4
48550: ARRAY
48551: PUSH
48552: LD_VAR 0 2
48556: PUSH
48557: LD_VAR 0 4
48561: ARRAY
48562: NONEQUAL
48563: IFFALSE 48575
// begin result := false ;
48565: LD_ADDR_VAR 0 3
48569: PUSH
48570: LD_INT 0
48572: ST_TO_ADDR
// break ;
48573: GO 48577
// end ;
48575: GO 48538
48577: POP
48578: POP
// end else
48579: GO 48589
// result := false ;
48581: LD_ADDR_VAR 0 3
48585: PUSH
48586: LD_INT 0
48588: ST_TO_ADDR
// end ;
48589: LD_VAR 0 3
48593: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48594: LD_INT 0
48596: PPUSH
48597: PPUSH
// if not array1 or not array2 then
48598: LD_VAR 0 1
48602: NOT
48603: PUSH
48604: LD_VAR 0 2
48608: NOT
48609: OR
48610: IFFALSE 48614
// exit ;
48612: GO 48678
// result := true ;
48614: LD_ADDR_VAR 0 3
48618: PUSH
48619: LD_INT 1
48621: ST_TO_ADDR
// for i = 1 to array1 do
48622: LD_ADDR_VAR 0 4
48626: PUSH
48627: DOUBLE
48628: LD_INT 1
48630: DEC
48631: ST_TO_ADDR
48632: LD_VAR 0 1
48636: PUSH
48637: FOR_TO
48638: IFFALSE 48676
// if array1 [ i ] <> array2 [ i ] then
48640: LD_VAR 0 1
48644: PUSH
48645: LD_VAR 0 4
48649: ARRAY
48650: PUSH
48651: LD_VAR 0 2
48655: PUSH
48656: LD_VAR 0 4
48660: ARRAY
48661: NONEQUAL
48662: IFFALSE 48674
// begin result := false ;
48664: LD_ADDR_VAR 0 3
48668: PUSH
48669: LD_INT 0
48671: ST_TO_ADDR
// break ;
48672: GO 48676
// end ;
48674: GO 48637
48676: POP
48677: POP
// end ;
48678: LD_VAR 0 3
48682: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48683: LD_INT 0
48685: PPUSH
48686: PPUSH
48687: PPUSH
// pom := GetBase ( fac ) ;
48688: LD_ADDR_VAR 0 5
48692: PUSH
48693: LD_VAR 0 1
48697: PPUSH
48698: CALL_OW 274
48702: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48703: LD_ADDR_VAR 0 4
48707: PUSH
48708: LD_VAR 0 2
48712: PUSH
48713: LD_INT 1
48715: ARRAY
48716: PPUSH
48717: LD_VAR 0 2
48721: PUSH
48722: LD_INT 2
48724: ARRAY
48725: PPUSH
48726: LD_VAR 0 2
48730: PUSH
48731: LD_INT 3
48733: ARRAY
48734: PPUSH
48735: LD_VAR 0 2
48739: PUSH
48740: LD_INT 4
48742: ARRAY
48743: PPUSH
48744: CALL_OW 449
48748: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48749: LD_ADDR_VAR 0 3
48753: PUSH
48754: LD_VAR 0 5
48758: PPUSH
48759: LD_INT 1
48761: PPUSH
48762: CALL_OW 275
48766: PUSH
48767: LD_VAR 0 4
48771: PUSH
48772: LD_INT 1
48774: ARRAY
48775: GREATEREQUAL
48776: PUSH
48777: LD_VAR 0 5
48781: PPUSH
48782: LD_INT 2
48784: PPUSH
48785: CALL_OW 275
48789: PUSH
48790: LD_VAR 0 4
48794: PUSH
48795: LD_INT 2
48797: ARRAY
48798: GREATEREQUAL
48799: AND
48800: PUSH
48801: LD_VAR 0 5
48805: PPUSH
48806: LD_INT 3
48808: PPUSH
48809: CALL_OW 275
48813: PUSH
48814: LD_VAR 0 4
48818: PUSH
48819: LD_INT 3
48821: ARRAY
48822: GREATEREQUAL
48823: AND
48824: ST_TO_ADDR
// end ;
48825: LD_VAR 0 3
48829: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48830: LD_INT 0
48832: PPUSH
48833: PPUSH
48834: PPUSH
48835: PPUSH
// pom := GetBase ( building ) ;
48836: LD_ADDR_VAR 0 3
48840: PUSH
48841: LD_VAR 0 1
48845: PPUSH
48846: CALL_OW 274
48850: ST_TO_ADDR
// if not pom then
48851: LD_VAR 0 3
48855: NOT
48856: IFFALSE 48860
// exit ;
48858: GO 49030
// btype := GetBType ( building ) ;
48860: LD_ADDR_VAR 0 5
48864: PUSH
48865: LD_VAR 0 1
48869: PPUSH
48870: CALL_OW 266
48874: ST_TO_ADDR
// if btype = b_armoury then
48875: LD_VAR 0 5
48879: PUSH
48880: LD_INT 4
48882: EQUAL
48883: IFFALSE 48893
// btype := b_barracks ;
48885: LD_ADDR_VAR 0 5
48889: PUSH
48890: LD_INT 5
48892: ST_TO_ADDR
// if btype = b_depot then
48893: LD_VAR 0 5
48897: PUSH
48898: LD_INT 0
48900: EQUAL
48901: IFFALSE 48911
// btype := b_warehouse ;
48903: LD_ADDR_VAR 0 5
48907: PUSH
48908: LD_INT 1
48910: ST_TO_ADDR
// if btype = b_workshop then
48911: LD_VAR 0 5
48915: PUSH
48916: LD_INT 2
48918: EQUAL
48919: IFFALSE 48929
// btype := b_factory ;
48921: LD_ADDR_VAR 0 5
48925: PUSH
48926: LD_INT 3
48928: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48929: LD_ADDR_VAR 0 4
48933: PUSH
48934: LD_VAR 0 5
48938: PPUSH
48939: LD_VAR 0 1
48943: PPUSH
48944: CALL_OW 248
48948: PPUSH
48949: CALL_OW 450
48953: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48954: LD_ADDR_VAR 0 2
48958: PUSH
48959: LD_VAR 0 3
48963: PPUSH
48964: LD_INT 1
48966: PPUSH
48967: CALL_OW 275
48971: PUSH
48972: LD_VAR 0 4
48976: PUSH
48977: LD_INT 1
48979: ARRAY
48980: GREATEREQUAL
48981: PUSH
48982: LD_VAR 0 3
48986: PPUSH
48987: LD_INT 2
48989: PPUSH
48990: CALL_OW 275
48994: PUSH
48995: LD_VAR 0 4
48999: PUSH
49000: LD_INT 2
49002: ARRAY
49003: GREATEREQUAL
49004: AND
49005: PUSH
49006: LD_VAR 0 3
49010: PPUSH
49011: LD_INT 3
49013: PPUSH
49014: CALL_OW 275
49018: PUSH
49019: LD_VAR 0 4
49023: PUSH
49024: LD_INT 3
49026: ARRAY
49027: GREATEREQUAL
49028: AND
49029: ST_TO_ADDR
// end ;
49030: LD_VAR 0 2
49034: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49035: LD_INT 0
49037: PPUSH
49038: PPUSH
49039: PPUSH
// pom := GetBase ( building ) ;
49040: LD_ADDR_VAR 0 4
49044: PUSH
49045: LD_VAR 0 1
49049: PPUSH
49050: CALL_OW 274
49054: ST_TO_ADDR
// if not pom then
49055: LD_VAR 0 4
49059: NOT
49060: IFFALSE 49064
// exit ;
49062: GO 49165
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49064: LD_ADDR_VAR 0 5
49068: PUSH
49069: LD_VAR 0 2
49073: PPUSH
49074: LD_VAR 0 1
49078: PPUSH
49079: CALL_OW 248
49083: PPUSH
49084: CALL_OW 450
49088: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49089: LD_ADDR_VAR 0 3
49093: PUSH
49094: LD_VAR 0 4
49098: PPUSH
49099: LD_INT 1
49101: PPUSH
49102: CALL_OW 275
49106: PUSH
49107: LD_VAR 0 5
49111: PUSH
49112: LD_INT 1
49114: ARRAY
49115: GREATEREQUAL
49116: PUSH
49117: LD_VAR 0 4
49121: PPUSH
49122: LD_INT 2
49124: PPUSH
49125: CALL_OW 275
49129: PUSH
49130: LD_VAR 0 5
49134: PUSH
49135: LD_INT 2
49137: ARRAY
49138: GREATEREQUAL
49139: AND
49140: PUSH
49141: LD_VAR 0 4
49145: PPUSH
49146: LD_INT 3
49148: PPUSH
49149: CALL_OW 275
49153: PUSH
49154: LD_VAR 0 5
49158: PUSH
49159: LD_INT 3
49161: ARRAY
49162: GREATEREQUAL
49163: AND
49164: ST_TO_ADDR
// end ;
49165: LD_VAR 0 3
49169: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49170: LD_INT 0
49172: PPUSH
49173: PPUSH
49174: PPUSH
49175: PPUSH
49176: PPUSH
49177: PPUSH
49178: PPUSH
49179: PPUSH
49180: PPUSH
49181: PPUSH
49182: PPUSH
// result := false ;
49183: LD_ADDR_VAR 0 8
49187: PUSH
49188: LD_INT 0
49190: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49191: LD_VAR 0 5
49195: NOT
49196: PUSH
49197: LD_VAR 0 1
49201: NOT
49202: OR
49203: PUSH
49204: LD_VAR 0 2
49208: NOT
49209: OR
49210: PUSH
49211: LD_VAR 0 3
49215: NOT
49216: OR
49217: IFFALSE 49221
// exit ;
49219: GO 50035
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49221: LD_ADDR_VAR 0 14
49225: PUSH
49226: LD_VAR 0 1
49230: PPUSH
49231: LD_VAR 0 2
49235: PPUSH
49236: LD_VAR 0 3
49240: PPUSH
49241: LD_VAR 0 4
49245: PPUSH
49246: LD_VAR 0 5
49250: PUSH
49251: LD_INT 1
49253: ARRAY
49254: PPUSH
49255: CALL_OW 248
49259: PPUSH
49260: LD_INT 0
49262: PPUSH
49263: CALL 51272 0 6
49267: ST_TO_ADDR
// if not hexes then
49268: LD_VAR 0 14
49272: NOT
49273: IFFALSE 49277
// exit ;
49275: GO 50035
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49277: LD_ADDR_VAR 0 17
49281: PUSH
49282: LD_VAR 0 5
49286: PPUSH
49287: LD_INT 22
49289: PUSH
49290: LD_VAR 0 13
49294: PPUSH
49295: CALL_OW 255
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 30
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 30
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PPUSH
49336: CALL_OW 72
49340: ST_TO_ADDR
// for i = 1 to hexes do
49341: LD_ADDR_VAR 0 9
49345: PUSH
49346: DOUBLE
49347: LD_INT 1
49349: DEC
49350: ST_TO_ADDR
49351: LD_VAR 0 14
49355: PUSH
49356: FOR_TO
49357: IFFALSE 50033
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49359: LD_ADDR_VAR 0 13
49363: PUSH
49364: LD_VAR 0 14
49368: PUSH
49369: LD_VAR 0 9
49373: ARRAY
49374: PUSH
49375: LD_INT 1
49377: ARRAY
49378: PPUSH
49379: LD_VAR 0 14
49383: PUSH
49384: LD_VAR 0 9
49388: ARRAY
49389: PUSH
49390: LD_INT 2
49392: ARRAY
49393: PPUSH
49394: CALL_OW 428
49398: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49399: LD_VAR 0 14
49403: PUSH
49404: LD_VAR 0 9
49408: ARRAY
49409: PUSH
49410: LD_INT 1
49412: ARRAY
49413: PPUSH
49414: LD_VAR 0 14
49418: PUSH
49419: LD_VAR 0 9
49423: ARRAY
49424: PUSH
49425: LD_INT 2
49427: ARRAY
49428: PPUSH
49429: CALL_OW 351
49433: PUSH
49434: LD_VAR 0 14
49438: PUSH
49439: LD_VAR 0 9
49443: ARRAY
49444: PUSH
49445: LD_INT 1
49447: ARRAY
49448: PPUSH
49449: LD_VAR 0 14
49453: PUSH
49454: LD_VAR 0 9
49458: ARRAY
49459: PUSH
49460: LD_INT 2
49462: ARRAY
49463: PPUSH
49464: CALL_OW 488
49468: NOT
49469: OR
49470: PUSH
49471: LD_VAR 0 13
49475: PPUSH
49476: CALL_OW 247
49480: PUSH
49481: LD_INT 3
49483: EQUAL
49484: OR
49485: IFFALSE 49491
// exit ;
49487: POP
49488: POP
49489: GO 50035
// if not tmp then
49491: LD_VAR 0 13
49495: NOT
49496: IFFALSE 49500
// continue ;
49498: GO 49356
// result := true ;
49500: LD_ADDR_VAR 0 8
49504: PUSH
49505: LD_INT 1
49507: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49508: LD_VAR 0 6
49512: PUSH
49513: LD_VAR 0 13
49517: PPUSH
49518: CALL_OW 247
49522: PUSH
49523: LD_INT 2
49525: EQUAL
49526: AND
49527: PUSH
49528: LD_VAR 0 13
49532: PPUSH
49533: CALL_OW 263
49537: PUSH
49538: LD_INT 1
49540: EQUAL
49541: AND
49542: IFFALSE 49706
// begin if IsDrivenBy ( tmp ) then
49544: LD_VAR 0 13
49548: PPUSH
49549: CALL_OW 311
49553: IFFALSE 49557
// continue ;
49555: GO 49356
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49557: LD_VAR 0 6
49561: PPUSH
49562: LD_INT 3
49564: PUSH
49565: LD_INT 60
49567: PUSH
49568: EMPTY
49569: LIST
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 3
49577: PUSH
49578: LD_INT 55
49580: PUSH
49581: EMPTY
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PPUSH
49592: CALL_OW 72
49596: IFFALSE 49704
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49598: LD_ADDR_VAR 0 18
49602: PUSH
49603: LD_VAR 0 6
49607: PPUSH
49608: LD_INT 3
49610: PUSH
49611: LD_INT 60
49613: PUSH
49614: EMPTY
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 3
49623: PUSH
49624: LD_INT 55
49626: PUSH
49627: EMPTY
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PPUSH
49638: CALL_OW 72
49642: PUSH
49643: LD_INT 1
49645: ARRAY
49646: ST_TO_ADDR
// if IsInUnit ( driver ) then
49647: LD_VAR 0 18
49651: PPUSH
49652: CALL_OW 310
49656: IFFALSE 49667
// ComExit ( driver ) ;
49658: LD_VAR 0 18
49662: PPUSH
49663: CALL 74400 0 1
// AddComEnterUnit ( driver , tmp ) ;
49667: LD_VAR 0 18
49671: PPUSH
49672: LD_VAR 0 13
49676: PPUSH
49677: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49681: LD_VAR 0 18
49685: PPUSH
49686: LD_VAR 0 7
49690: PPUSH
49691: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49695: LD_VAR 0 18
49699: PPUSH
49700: CALL_OW 181
// end ; continue ;
49704: GO 49356
// end ; if not cleaners or not tmp in cleaners then
49706: LD_VAR 0 6
49710: NOT
49711: PUSH
49712: LD_VAR 0 13
49716: PUSH
49717: LD_VAR 0 6
49721: IN
49722: NOT
49723: OR
49724: IFFALSE 50031
// begin if dep then
49726: LD_VAR 0 17
49730: IFFALSE 49866
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49732: LD_ADDR_VAR 0 16
49736: PUSH
49737: LD_VAR 0 17
49741: PUSH
49742: LD_INT 1
49744: ARRAY
49745: PPUSH
49746: CALL_OW 250
49750: PPUSH
49751: LD_VAR 0 17
49755: PUSH
49756: LD_INT 1
49758: ARRAY
49759: PPUSH
49760: CALL_OW 254
49764: PPUSH
49765: LD_INT 5
49767: PPUSH
49768: CALL_OW 272
49772: PUSH
49773: LD_VAR 0 17
49777: PUSH
49778: LD_INT 1
49780: ARRAY
49781: PPUSH
49782: CALL_OW 251
49786: PPUSH
49787: LD_VAR 0 17
49791: PUSH
49792: LD_INT 1
49794: ARRAY
49795: PPUSH
49796: CALL_OW 254
49800: PPUSH
49801: LD_INT 5
49803: PPUSH
49804: CALL_OW 273
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49813: LD_VAR 0 16
49817: PUSH
49818: LD_INT 1
49820: ARRAY
49821: PPUSH
49822: LD_VAR 0 16
49826: PUSH
49827: LD_INT 2
49829: ARRAY
49830: PPUSH
49831: CALL_OW 488
49835: IFFALSE 49866
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49837: LD_VAR 0 13
49841: PPUSH
49842: LD_VAR 0 16
49846: PUSH
49847: LD_INT 1
49849: ARRAY
49850: PPUSH
49851: LD_VAR 0 16
49855: PUSH
49856: LD_INT 2
49858: ARRAY
49859: PPUSH
49860: CALL_OW 111
// continue ;
49864: GO 49356
// end ; end ; r := GetDir ( tmp ) ;
49866: LD_ADDR_VAR 0 15
49870: PUSH
49871: LD_VAR 0 13
49875: PPUSH
49876: CALL_OW 254
49880: ST_TO_ADDR
// if r = 5 then
49881: LD_VAR 0 15
49885: PUSH
49886: LD_INT 5
49888: EQUAL
49889: IFFALSE 49899
// r := 0 ;
49891: LD_ADDR_VAR 0 15
49895: PUSH
49896: LD_INT 0
49898: ST_TO_ADDR
// for j = r to 5 do
49899: LD_ADDR_VAR 0 10
49903: PUSH
49904: DOUBLE
49905: LD_VAR 0 15
49909: DEC
49910: ST_TO_ADDR
49911: LD_INT 5
49913: PUSH
49914: FOR_TO
49915: IFFALSE 50029
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49917: LD_ADDR_VAR 0 11
49921: PUSH
49922: LD_VAR 0 13
49926: PPUSH
49927: CALL_OW 250
49931: PPUSH
49932: LD_VAR 0 10
49936: PPUSH
49937: LD_INT 2
49939: PPUSH
49940: CALL_OW 272
49944: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49945: LD_ADDR_VAR 0 12
49949: PUSH
49950: LD_VAR 0 13
49954: PPUSH
49955: CALL_OW 251
49959: PPUSH
49960: LD_VAR 0 10
49964: PPUSH
49965: LD_INT 2
49967: PPUSH
49968: CALL_OW 273
49972: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49973: LD_VAR 0 11
49977: PPUSH
49978: LD_VAR 0 12
49982: PPUSH
49983: CALL_OW 488
49987: PUSH
49988: LD_VAR 0 11
49992: PPUSH
49993: LD_VAR 0 12
49997: PPUSH
49998: CALL_OW 428
50002: NOT
50003: AND
50004: IFFALSE 50027
// begin ComMoveXY ( tmp , _x , _y ) ;
50006: LD_VAR 0 13
50010: PPUSH
50011: LD_VAR 0 11
50015: PPUSH
50016: LD_VAR 0 12
50020: PPUSH
50021: CALL_OW 111
// break ;
50025: GO 50029
// end ; end ;
50027: GO 49914
50029: POP
50030: POP
// end ; end ;
50031: GO 49356
50033: POP
50034: POP
// end ;
50035: LD_VAR 0 8
50039: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50040: LD_INT 0
50042: PPUSH
// result := true ;
50043: LD_ADDR_VAR 0 3
50047: PUSH
50048: LD_INT 1
50050: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50051: LD_VAR 0 2
50055: PUSH
50056: LD_INT 24
50058: DOUBLE
50059: EQUAL
50060: IFTRUE 50070
50062: LD_INT 33
50064: DOUBLE
50065: EQUAL
50066: IFTRUE 50070
50068: GO 50095
50070: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50071: LD_ADDR_VAR 0 3
50075: PUSH
50076: LD_INT 32
50078: PPUSH
50079: LD_VAR 0 1
50083: PPUSH
50084: CALL_OW 321
50088: PUSH
50089: LD_INT 2
50091: EQUAL
50092: ST_TO_ADDR
50093: GO 50415
50095: LD_INT 20
50097: DOUBLE
50098: EQUAL
50099: IFTRUE 50103
50101: GO 50128
50103: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50104: LD_ADDR_VAR 0 3
50108: PUSH
50109: LD_INT 6
50111: PPUSH
50112: LD_VAR 0 1
50116: PPUSH
50117: CALL_OW 321
50121: PUSH
50122: LD_INT 2
50124: EQUAL
50125: ST_TO_ADDR
50126: GO 50415
50128: LD_INT 22
50130: DOUBLE
50131: EQUAL
50132: IFTRUE 50142
50134: LD_INT 36
50136: DOUBLE
50137: EQUAL
50138: IFTRUE 50142
50140: GO 50167
50142: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50143: LD_ADDR_VAR 0 3
50147: PUSH
50148: LD_INT 15
50150: PPUSH
50151: LD_VAR 0 1
50155: PPUSH
50156: CALL_OW 321
50160: PUSH
50161: LD_INT 2
50163: EQUAL
50164: ST_TO_ADDR
50165: GO 50415
50167: LD_INT 30
50169: DOUBLE
50170: EQUAL
50171: IFTRUE 50175
50173: GO 50200
50175: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50176: LD_ADDR_VAR 0 3
50180: PUSH
50181: LD_INT 20
50183: PPUSH
50184: LD_VAR 0 1
50188: PPUSH
50189: CALL_OW 321
50193: PUSH
50194: LD_INT 2
50196: EQUAL
50197: ST_TO_ADDR
50198: GO 50415
50200: LD_INT 28
50202: DOUBLE
50203: EQUAL
50204: IFTRUE 50214
50206: LD_INT 21
50208: DOUBLE
50209: EQUAL
50210: IFTRUE 50214
50212: GO 50239
50214: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50215: LD_ADDR_VAR 0 3
50219: PUSH
50220: LD_INT 21
50222: PPUSH
50223: LD_VAR 0 1
50227: PPUSH
50228: CALL_OW 321
50232: PUSH
50233: LD_INT 2
50235: EQUAL
50236: ST_TO_ADDR
50237: GO 50415
50239: LD_INT 16
50241: DOUBLE
50242: EQUAL
50243: IFTRUE 50247
50245: GO 50274
50247: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50248: LD_ADDR_VAR 0 3
50252: PUSH
50253: LD_EXP 45
50257: PPUSH
50258: LD_VAR 0 1
50262: PPUSH
50263: CALL_OW 321
50267: PUSH
50268: LD_INT 2
50270: EQUAL
50271: ST_TO_ADDR
50272: GO 50415
50274: LD_INT 19
50276: DOUBLE
50277: EQUAL
50278: IFTRUE 50288
50280: LD_INT 23
50282: DOUBLE
50283: EQUAL
50284: IFTRUE 50288
50286: GO 50315
50288: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50289: LD_ADDR_VAR 0 3
50293: PUSH
50294: LD_EXP 44
50298: PPUSH
50299: LD_VAR 0 1
50303: PPUSH
50304: CALL_OW 321
50308: PUSH
50309: LD_INT 2
50311: EQUAL
50312: ST_TO_ADDR
50313: GO 50415
50315: LD_INT 17
50317: DOUBLE
50318: EQUAL
50319: IFTRUE 50323
50321: GO 50348
50323: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50324: LD_ADDR_VAR 0 3
50328: PUSH
50329: LD_INT 39
50331: PPUSH
50332: LD_VAR 0 1
50336: PPUSH
50337: CALL_OW 321
50341: PUSH
50342: LD_INT 2
50344: EQUAL
50345: ST_TO_ADDR
50346: GO 50415
50348: LD_INT 18
50350: DOUBLE
50351: EQUAL
50352: IFTRUE 50356
50354: GO 50381
50356: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50357: LD_ADDR_VAR 0 3
50361: PUSH
50362: LD_INT 40
50364: PPUSH
50365: LD_VAR 0 1
50369: PPUSH
50370: CALL_OW 321
50374: PUSH
50375: LD_INT 2
50377: EQUAL
50378: ST_TO_ADDR
50379: GO 50415
50381: LD_INT 27
50383: DOUBLE
50384: EQUAL
50385: IFTRUE 50389
50387: GO 50414
50389: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50390: LD_ADDR_VAR 0 3
50394: PUSH
50395: LD_INT 35
50397: PPUSH
50398: LD_VAR 0 1
50402: PPUSH
50403: CALL_OW 321
50407: PUSH
50408: LD_INT 2
50410: EQUAL
50411: ST_TO_ADDR
50412: GO 50415
50414: POP
// end ;
50415: LD_VAR 0 3
50419: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50420: LD_INT 0
50422: PPUSH
50423: PPUSH
50424: PPUSH
50425: PPUSH
50426: PPUSH
50427: PPUSH
50428: PPUSH
50429: PPUSH
50430: PPUSH
50431: PPUSH
50432: PPUSH
// result := false ;
50433: LD_ADDR_VAR 0 6
50437: PUSH
50438: LD_INT 0
50440: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50441: LD_VAR 0 1
50445: NOT
50446: PUSH
50447: LD_VAR 0 1
50451: PPUSH
50452: CALL_OW 266
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: IN
50467: NOT
50468: OR
50469: PUSH
50470: LD_VAR 0 2
50474: NOT
50475: OR
50476: PUSH
50477: LD_VAR 0 5
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 4
50496: PUSH
50497: LD_INT 5
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: IN
50508: NOT
50509: OR
50510: PUSH
50511: LD_VAR 0 3
50515: PPUSH
50516: LD_VAR 0 4
50520: PPUSH
50521: CALL_OW 488
50525: NOT
50526: OR
50527: IFFALSE 50531
// exit ;
50529: GO 51267
// side := GetSide ( depot ) ;
50531: LD_ADDR_VAR 0 9
50535: PUSH
50536: LD_VAR 0 1
50540: PPUSH
50541: CALL_OW 255
50545: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50546: LD_VAR 0 9
50550: PPUSH
50551: LD_VAR 0 2
50555: PPUSH
50556: CALL 50040 0 2
50560: NOT
50561: IFFALSE 50565
// exit ;
50563: GO 51267
// pom := GetBase ( depot ) ;
50565: LD_ADDR_VAR 0 10
50569: PUSH
50570: LD_VAR 0 1
50574: PPUSH
50575: CALL_OW 274
50579: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50580: LD_ADDR_VAR 0 11
50584: PUSH
50585: LD_VAR 0 2
50589: PPUSH
50590: LD_VAR 0 1
50594: PPUSH
50595: CALL_OW 248
50599: PPUSH
50600: CALL_OW 450
50604: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50605: LD_VAR 0 10
50609: PPUSH
50610: LD_INT 1
50612: PPUSH
50613: CALL_OW 275
50617: PUSH
50618: LD_VAR 0 11
50622: PUSH
50623: LD_INT 1
50625: ARRAY
50626: GREATEREQUAL
50627: PUSH
50628: LD_VAR 0 10
50632: PPUSH
50633: LD_INT 2
50635: PPUSH
50636: CALL_OW 275
50640: PUSH
50641: LD_VAR 0 11
50645: PUSH
50646: LD_INT 2
50648: ARRAY
50649: GREATEREQUAL
50650: AND
50651: PUSH
50652: LD_VAR 0 10
50656: PPUSH
50657: LD_INT 3
50659: PPUSH
50660: CALL_OW 275
50664: PUSH
50665: LD_VAR 0 11
50669: PUSH
50670: LD_INT 3
50672: ARRAY
50673: GREATEREQUAL
50674: AND
50675: NOT
50676: IFFALSE 50680
// exit ;
50678: GO 51267
// if GetBType ( depot ) = b_depot then
50680: LD_VAR 0 1
50684: PPUSH
50685: CALL_OW 266
50689: PUSH
50690: LD_INT 0
50692: EQUAL
50693: IFFALSE 50705
// dist := 28 else
50695: LD_ADDR_VAR 0 14
50699: PUSH
50700: LD_INT 28
50702: ST_TO_ADDR
50703: GO 50713
// dist := 36 ;
50705: LD_ADDR_VAR 0 14
50709: PUSH
50710: LD_INT 36
50712: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50713: LD_VAR 0 1
50717: PPUSH
50718: LD_VAR 0 3
50722: PPUSH
50723: LD_VAR 0 4
50727: PPUSH
50728: CALL_OW 297
50732: PUSH
50733: LD_VAR 0 14
50737: GREATER
50738: IFFALSE 50742
// exit ;
50740: GO 51267
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50742: LD_ADDR_VAR 0 12
50746: PUSH
50747: LD_VAR 0 2
50751: PPUSH
50752: LD_VAR 0 3
50756: PPUSH
50757: LD_VAR 0 4
50761: PPUSH
50762: LD_VAR 0 5
50766: PPUSH
50767: LD_VAR 0 1
50771: PPUSH
50772: CALL_OW 248
50776: PPUSH
50777: LD_INT 0
50779: PPUSH
50780: CALL 51272 0 6
50784: ST_TO_ADDR
// if not hexes then
50785: LD_VAR 0 12
50789: NOT
50790: IFFALSE 50794
// exit ;
50792: GO 51267
// hex := GetHexInfo ( x , y ) ;
50794: LD_ADDR_VAR 0 15
50798: PUSH
50799: LD_VAR 0 3
50803: PPUSH
50804: LD_VAR 0 4
50808: PPUSH
50809: CALL_OW 546
50813: ST_TO_ADDR
// if hex [ 1 ] then
50814: LD_VAR 0 15
50818: PUSH
50819: LD_INT 1
50821: ARRAY
50822: IFFALSE 50826
// exit ;
50824: GO 51267
// height := hex [ 2 ] ;
50826: LD_ADDR_VAR 0 13
50830: PUSH
50831: LD_VAR 0 15
50835: PUSH
50836: LD_INT 2
50838: ARRAY
50839: ST_TO_ADDR
// for i = 1 to hexes do
50840: LD_ADDR_VAR 0 7
50844: PUSH
50845: DOUBLE
50846: LD_INT 1
50848: DEC
50849: ST_TO_ADDR
50850: LD_VAR 0 12
50854: PUSH
50855: FOR_TO
50856: IFFALSE 51186
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50858: LD_VAR 0 12
50862: PUSH
50863: LD_VAR 0 7
50867: ARRAY
50868: PUSH
50869: LD_INT 1
50871: ARRAY
50872: PPUSH
50873: LD_VAR 0 12
50877: PUSH
50878: LD_VAR 0 7
50882: ARRAY
50883: PUSH
50884: LD_INT 2
50886: ARRAY
50887: PPUSH
50888: CALL_OW 488
50892: NOT
50893: PUSH
50894: LD_VAR 0 12
50898: PUSH
50899: LD_VAR 0 7
50903: ARRAY
50904: PUSH
50905: LD_INT 1
50907: ARRAY
50908: PPUSH
50909: LD_VAR 0 12
50913: PUSH
50914: LD_VAR 0 7
50918: ARRAY
50919: PUSH
50920: LD_INT 2
50922: ARRAY
50923: PPUSH
50924: CALL_OW 428
50928: PUSH
50929: LD_INT 0
50931: GREATER
50932: OR
50933: PUSH
50934: LD_VAR 0 12
50938: PUSH
50939: LD_VAR 0 7
50943: ARRAY
50944: PUSH
50945: LD_INT 1
50947: ARRAY
50948: PPUSH
50949: LD_VAR 0 12
50953: PUSH
50954: LD_VAR 0 7
50958: ARRAY
50959: PUSH
50960: LD_INT 2
50962: ARRAY
50963: PPUSH
50964: CALL_OW 351
50968: OR
50969: IFFALSE 50975
// exit ;
50971: POP
50972: POP
50973: GO 51267
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50975: LD_ADDR_VAR 0 8
50979: PUSH
50980: LD_VAR 0 12
50984: PUSH
50985: LD_VAR 0 7
50989: ARRAY
50990: PUSH
50991: LD_INT 1
50993: ARRAY
50994: PPUSH
50995: LD_VAR 0 12
50999: PUSH
51000: LD_VAR 0 7
51004: ARRAY
51005: PUSH
51006: LD_INT 2
51008: ARRAY
51009: PPUSH
51010: CALL_OW 546
51014: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51015: LD_VAR 0 8
51019: PUSH
51020: LD_INT 1
51022: ARRAY
51023: PUSH
51024: LD_VAR 0 8
51028: PUSH
51029: LD_INT 2
51031: ARRAY
51032: PUSH
51033: LD_VAR 0 13
51037: PUSH
51038: LD_INT 2
51040: PLUS
51041: GREATER
51042: OR
51043: PUSH
51044: LD_VAR 0 8
51048: PUSH
51049: LD_INT 2
51051: ARRAY
51052: PUSH
51053: LD_VAR 0 13
51057: PUSH
51058: LD_INT 2
51060: MINUS
51061: LESS
51062: OR
51063: PUSH
51064: LD_VAR 0 8
51068: PUSH
51069: LD_INT 3
51071: ARRAY
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 8
51078: PUSH
51079: LD_INT 9
51081: PUSH
51082: LD_INT 10
51084: PUSH
51085: LD_INT 11
51087: PUSH
51088: LD_INT 12
51090: PUSH
51091: LD_INT 13
51093: PUSH
51094: LD_INT 16
51096: PUSH
51097: LD_INT 17
51099: PUSH
51100: LD_INT 18
51102: PUSH
51103: LD_INT 19
51105: PUSH
51106: LD_INT 20
51108: PUSH
51109: LD_INT 21
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: IN
51127: NOT
51128: OR
51129: PUSH
51130: LD_VAR 0 8
51134: PUSH
51135: LD_INT 5
51137: ARRAY
51138: NOT
51139: OR
51140: PUSH
51141: LD_VAR 0 8
51145: PUSH
51146: LD_INT 6
51148: ARRAY
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: LD_INT 7
51158: PUSH
51159: LD_INT 9
51161: PUSH
51162: LD_INT 10
51164: PUSH
51165: LD_INT 11
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: IN
51176: NOT
51177: OR
51178: IFFALSE 51184
// exit ;
51180: POP
51181: POP
51182: GO 51267
// end ;
51184: GO 50855
51186: POP
51187: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51188: LD_VAR 0 9
51192: PPUSH
51193: LD_VAR 0 3
51197: PPUSH
51198: LD_VAR 0 4
51202: PPUSH
51203: LD_INT 20
51205: PPUSH
51206: CALL 43213 0 4
51210: PUSH
51211: LD_INT 4
51213: ARRAY
51214: IFFALSE 51218
// exit ;
51216: GO 51267
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51218: LD_VAR 0 2
51222: PUSH
51223: LD_INT 29
51225: PUSH
51226: LD_INT 30
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: IN
51233: PUSH
51234: LD_VAR 0 3
51238: PPUSH
51239: LD_VAR 0 4
51243: PPUSH
51244: LD_VAR 0 9
51248: PPUSH
51249: CALL_OW 440
51253: NOT
51254: AND
51255: IFFALSE 51259
// exit ;
51257: GO 51267
// result := true ;
51259: LD_ADDR_VAR 0 6
51263: PUSH
51264: LD_INT 1
51266: ST_TO_ADDR
// end ;
51267: LD_VAR 0 6
51271: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51272: LD_INT 0
51274: PPUSH
51275: PPUSH
51276: PPUSH
51277: PPUSH
51278: PPUSH
51279: PPUSH
51280: PPUSH
51281: PPUSH
51282: PPUSH
51283: PPUSH
51284: PPUSH
51285: PPUSH
51286: PPUSH
51287: PPUSH
51288: PPUSH
51289: PPUSH
51290: PPUSH
51291: PPUSH
51292: PPUSH
51293: PPUSH
51294: PPUSH
51295: PPUSH
51296: PPUSH
51297: PPUSH
51298: PPUSH
51299: PPUSH
51300: PPUSH
51301: PPUSH
51302: PPUSH
51303: PPUSH
51304: PPUSH
51305: PPUSH
51306: PPUSH
51307: PPUSH
51308: PPUSH
51309: PPUSH
51310: PPUSH
51311: PPUSH
51312: PPUSH
51313: PPUSH
51314: PPUSH
51315: PPUSH
51316: PPUSH
51317: PPUSH
51318: PPUSH
51319: PPUSH
51320: PPUSH
51321: PPUSH
51322: PPUSH
51323: PPUSH
51324: PPUSH
51325: PPUSH
51326: PPUSH
51327: PPUSH
51328: PPUSH
51329: PPUSH
51330: PPUSH
51331: PPUSH
// result = [ ] ;
51332: LD_ADDR_VAR 0 7
51336: PUSH
51337: EMPTY
51338: ST_TO_ADDR
// temp_list = [ ] ;
51339: LD_ADDR_VAR 0 9
51343: PUSH
51344: EMPTY
51345: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51346: LD_VAR 0 4
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: LD_INT 4
51365: PUSH
51366: LD_INT 5
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: IN
51377: NOT
51378: PUSH
51379: LD_VAR 0 1
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: IN
51394: PUSH
51395: LD_VAR 0 5
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 3
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: LIST
51413: IN
51414: NOT
51415: AND
51416: OR
51417: IFFALSE 51421
// exit ;
51419: GO 69812
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51421: LD_VAR 0 1
51425: PUSH
51426: LD_INT 6
51428: PUSH
51429: LD_INT 7
51431: PUSH
51432: LD_INT 8
51434: PUSH
51435: LD_INT 13
51437: PUSH
51438: LD_INT 12
51440: PUSH
51441: LD_INT 15
51443: PUSH
51444: LD_INT 11
51446: PUSH
51447: LD_INT 14
51449: PUSH
51450: LD_INT 10
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: IN
51464: IFFALSE 51474
// btype = b_lab ;
51466: LD_ADDR_VAR 0 1
51470: PUSH
51471: LD_INT 6
51473: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51474: LD_VAR 0 6
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: IN
51493: NOT
51494: PUSH
51495: LD_VAR 0 1
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: LD_INT 6
51514: PUSH
51515: LD_INT 36
51517: PUSH
51518: LD_INT 4
51520: PUSH
51521: LD_INT 5
51523: PUSH
51524: LD_INT 31
51526: PUSH
51527: LD_INT 32
51529: PUSH
51530: LD_INT 33
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: IN
51546: NOT
51547: PUSH
51548: LD_VAR 0 6
51552: PUSH
51553: LD_INT 1
51555: EQUAL
51556: AND
51557: OR
51558: PUSH
51559: LD_VAR 0 1
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: LD_INT 3
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: IN
51574: NOT
51575: PUSH
51576: LD_VAR 0 6
51580: PUSH
51581: LD_INT 2
51583: EQUAL
51584: AND
51585: OR
51586: IFFALSE 51596
// mode = 0 ;
51588: LD_ADDR_VAR 0 6
51592: PUSH
51593: LD_INT 0
51595: ST_TO_ADDR
// case mode of 0 :
51596: LD_VAR 0 6
51600: PUSH
51601: LD_INT 0
51603: DOUBLE
51604: EQUAL
51605: IFTRUE 51609
51607: GO 63062
51609: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51610: LD_ADDR_VAR 0 11
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 2
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51803: LD_ADDR_VAR 0 12
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 3
51960: NEG
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 3
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51999: LD_ADDR_VAR 0 13
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: LD_INT 3
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 3
52158: NEG
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: NEG
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52198: LD_ADDR_VAR 0 14
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 3
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52394: LD_ADDR_VAR 0 15
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52587: LD_ADDR_VAR 0 16
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 3
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52780: LD_ADDR_VAR 0 17
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 2
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53010: LD_ADDR_VAR 0 18
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 2
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53240: LD_ADDR_VAR 0 19
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 2
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53470: LD_ADDR_VAR 0 20
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53700: LD_ADDR_VAR 0 21
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53930: LD_ADDR_VAR 0 22
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: LD_INT 2
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 2
54117: NEG
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54160: LD_ADDR_VAR 0 23
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 2
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: LD_INT 3
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 3
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54440: LD_ADDR_VAR 0 24
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 3
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54716: LD_ADDR_VAR 0 25
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 2
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 3
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 3
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54990: LD_ADDR_VAR 0 26
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: LD_INT 3
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55266: LD_ADDR_VAR 0 27
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 2
55442: NEG
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 3
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 3
55511: NEG
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55546: LD_ADDR_VAR 0 28
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: LD_INT 3
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55828: LD_ADDR_VAR 0 29
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 3
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 3
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56107: LD_ADDR_VAR 0 30
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 3
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 3
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56385: LD_ADDR_VAR 0 31
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 3
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56663: LD_ADDR_VAR 0 32
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 3
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 3
56906: NEG
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56941: LD_ADDR_VAR 0 33
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 3
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57220: LD_ADDR_VAR 0 34
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 2
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: LD_INT 3
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57500: LD_ADDR_VAR 0 35
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57612: LD_ADDR_VAR 0 36
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 2
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57724: LD_ADDR_VAR 0 37
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57836: LD_ADDR_VAR 0 38
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: NEG
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57948: LD_ADDR_VAR 0 39
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58060: LD_ADDR_VAR 0 40
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58172: LD_ADDR_VAR 0 41
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 3
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 3
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58522: LD_ADDR_VAR 0 42
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: LD_INT 3
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 3
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: NEG
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58872: LD_ADDR_VAR 0 43
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 2
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 3
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: NEG
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59220: LD_ADDR_VAR 0 44
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: LD_INT 3
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 1
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 3
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: LD_INT 3
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: LD_INT 3
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 3
59505: NEG
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: NEG
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 3
59529: NEG
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59570: LD_ADDR_VAR 0 45
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 3
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 3
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 3
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: LD_INT 3
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: LD_INT 3
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: LD_INT 2
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: LD_INT 3
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59920: LD_ADDR_VAR 0 46
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 3
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: NEG
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60268: LD_ADDR_VAR 0 47
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60419: LD_ADDR_VAR 0 48
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: LD_INT 1
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 2
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60566: LD_ADDR_VAR 0 49
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60710: LD_ADDR_VAR 0 50
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60854: LD_ADDR_VAR 0 51
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: LD_INT 1
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: NEG
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61001: LD_ADDR_VAR 0 52
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 2
61116: NEG
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 2
61128: NEG
61129: PUSH
61130: LD_INT 2
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61152: LD_ADDR_VAR 0 53
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: LD_INT 2
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 2
61351: NEG
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61382: LD_ADDR_VAR 0 54
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: LD_INT 2
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: LD_INT 2
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61612: LD_ADDR_VAR 0 55
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 1
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: LD_INT 2
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: LD_INT 2
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 2
61811: NEG
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61842: LD_ADDR_VAR 0 56
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: NEG
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: LD_INT 2
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 2
62041: NEG
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62072: LD_ADDR_VAR 0 57
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 2
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 2
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 2
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: LD_INT 2
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: LD_INT 2
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 2
62271: NEG
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62302: LD_ADDR_VAR 0 58
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 2
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: LD_INT 2
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: NEG
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 2
62489: NEG
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: NEG
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62532: LD_ADDR_VAR 0 59
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: NEG
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62620: LD_ADDR_VAR 0 60
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62708: LD_ADDR_VAR 0 61
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62796: LD_ADDR_VAR 0 62
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62884: LD_ADDR_VAR 0 63
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62972: LD_ADDR_VAR 0 64
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: ST_TO_ADDR
// end ; 1 :
63060: GO 68957
63062: LD_INT 1
63064: DOUBLE
63065: EQUAL
63066: IFTRUE 63070
63068: GO 65693
63070: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63071: LD_ADDR_VAR 0 11
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 3
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: LD_INT 2
63104: NEG
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: LIST
63114: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63115: LD_ADDR_VAR 0 12
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 3
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63156: LD_ADDR_VAR 0 13
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 3
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: LIST
63195: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63196: LD_ADDR_VAR 0 14
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 3
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: LIST
63236: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63237: LD_ADDR_VAR 0 15
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 3
63255: NEG
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 3
63266: NEG
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63281: LD_ADDR_VAR 0 16
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: LD_INT 3
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 3
63300: NEG
63301: PUSH
63302: LD_INT 2
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 3
63312: NEG
63313: PUSH
63314: LD_INT 3
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63327: LD_ADDR_VAR 0 17
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 3
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 3
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: PUSH
63358: LD_INT 2
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63371: LD_ADDR_VAR 0 18
63375: PUSH
63376: LD_INT 2
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 3
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 3
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: LIST
63411: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63412: LD_ADDR_VAR 0 19
63416: PUSH
63417: LD_INT 3
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 3
63429: PUSH
63430: LD_INT 3
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 2
63439: PUSH
63440: LD_INT 3
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: LIST
63451: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63452: LD_ADDR_VAR 0 20
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: LD_INT 3
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 3
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: LIST
63492: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63493: LD_ADDR_VAR 0 21
63497: PUSH
63498: LD_INT 2
63500: NEG
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 3
63511: NEG
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 3
63522: NEG
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: LIST
63536: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63537: LD_ADDR_VAR 0 22
63541: PUSH
63542: LD_INT 2
63544: NEG
63545: PUSH
63546: LD_INT 3
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 3
63556: NEG
63557: PUSH
63558: LD_INT 2
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 3
63568: NEG
63569: PUSH
63570: LD_INT 3
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: LIST
63582: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63583: LD_ADDR_VAR 0 23
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: LD_INT 4
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: LD_INT 3
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63627: LD_ADDR_VAR 0 24
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 3
63644: PUSH
63645: LD_INT 1
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 4
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63668: LD_ADDR_VAR 0 25
63672: PUSH
63673: LD_INT 3
63675: PUSH
63676: LD_INT 3
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 4
63685: PUSH
63686: LD_INT 3
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: PUSH
63696: LD_INT 4
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: LIST
63707: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63708: LD_ADDR_VAR 0 26
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 3
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: LD_INT 4
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: NEG
63736: PUSH
63737: LD_INT 3
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63749: LD_ADDR_VAR 0 27
63753: PUSH
63754: LD_INT 3
63756: NEG
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 3
63767: NEG
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 4
63778: NEG
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: LIST
63792: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63793: LD_ADDR_VAR 0 28
63797: PUSH
63798: LD_INT 3
63800: NEG
63801: PUSH
63802: LD_INT 3
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 3
63812: NEG
63813: PUSH
63814: LD_INT 4
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 4
63824: NEG
63825: PUSH
63826: LD_INT 3
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: LIST
63838: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63839: LD_ADDR_VAR 0 29
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: LD_INT 3
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: LD_INT 4
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 4
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: LD_INT 3
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: NEG
63915: PUSH
63916: LD_INT 5
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: LD_INT 5
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: LD_INT 4
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: LD_INT 6
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: LD_INT 6
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: LD_INT 5
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63994: LD_ADDR_VAR 0 30
63998: PUSH
63999: LD_INT 2
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 3
64012: PUSH
64013: LD_INT 0
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 3
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 3
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 4
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 4
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 4
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 5
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 5
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 5
64094: PUSH
64095: LD_INT 1
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 6
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 6
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64137: LD_ADDR_VAR 0 31
64141: PUSH
64142: LD_INT 3
64144: PUSH
64145: LD_INT 2
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 3
64154: PUSH
64155: LD_INT 3
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: LD_INT 3
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 4
64174: PUSH
64175: LD_INT 3
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 4
64184: PUSH
64185: LD_INT 4
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 3
64194: PUSH
64195: LD_INT 4
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 5
64204: PUSH
64205: LD_INT 4
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 5
64214: PUSH
64215: LD_INT 5
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 4
64224: PUSH
64225: LD_INT 5
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 6
64234: PUSH
64235: LD_INT 5
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 6
64244: PUSH
64245: LD_INT 6
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 5
64254: PUSH
64255: LD_INT 6
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64276: LD_ADDR_VAR 0 32
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: LD_INT 3
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: LD_INT 3
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: LD_INT 4
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 4
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: LD_INT 3
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: LD_INT 5
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: LD_INT 5
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: NEG
64366: PUSH
64367: LD_INT 4
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: LD_INT 6
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 6
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: LD_INT 5
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64419: LD_ADDR_VAR 0 33
64423: PUSH
64424: LD_INT 2
64426: NEG
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 3
64437: NEG
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 3
64460: NEG
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 4
64471: NEG
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 4
64482: NEG
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 4
64494: NEG
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 5
64505: NEG
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 5
64516: NEG
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 5
64528: NEG
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 6
64539: NEG
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 6
64550: NEG
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64574: LD_ADDR_VAR 0 34
64578: PUSH
64579: LD_INT 2
64581: NEG
64582: PUSH
64583: LD_INT 3
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 3
64593: NEG
64594: PUSH
64595: LD_INT 2
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 3
64605: NEG
64606: PUSH
64607: LD_INT 3
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 3
64617: NEG
64618: PUSH
64619: LD_INT 4
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 4
64629: NEG
64630: PUSH
64631: LD_INT 3
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 4
64641: NEG
64642: PUSH
64643: LD_INT 4
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 4
64653: NEG
64654: PUSH
64655: LD_INT 5
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 5
64665: NEG
64666: PUSH
64667: LD_INT 4
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 5
64677: NEG
64678: PUSH
64679: LD_INT 5
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 5
64689: NEG
64690: PUSH
64691: LD_INT 6
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 6
64701: NEG
64702: PUSH
64703: LD_INT 5
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 6
64713: NEG
64714: PUSH
64715: LD_INT 6
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64737: LD_ADDR_VAR 0 41
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 2
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: LD_INT 2
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: LIST
64780: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64781: LD_ADDR_VAR 0 42
64785: PUSH
64786: LD_INT 2
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 2
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 3
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: LIST
64821: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64822: LD_ADDR_VAR 0 43
64826: PUSH
64827: LD_INT 2
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 3
64839: PUSH
64840: LD_INT 2
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: LD_INT 3
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64862: LD_ADDR_VAR 0 44
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 1
64879: PUSH
64880: LD_INT 3
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64903: LD_ADDR_VAR 0 45
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 2
64921: NEG
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 3
64932: NEG
64933: PUSH
64934: LD_INT 1
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64947: LD_ADDR_VAR 0 46
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: LD_INT 2
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 2
64966: NEG
64967: PUSH
64968: LD_INT 3
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 3
64978: NEG
64979: PUSH
64980: LD_INT 2
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: LIST
64992: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64993: LD_ADDR_VAR 0 47
64997: PUSH
64998: LD_INT 2
65000: NEG
65001: PUSH
65002: LD_INT 3
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: NEG
65013: PUSH
65014: LD_INT 3
65016: NEG
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65026: LD_ADDR_VAR 0 48
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: LD_INT 2
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 2
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65057: LD_ADDR_VAR 0 49
65061: PUSH
65062: LD_INT 3
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 3
65074: PUSH
65075: LD_INT 2
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65086: LD_ADDR_VAR 0 50
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: LD_INT 3
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: LD_INT 3
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65115: LD_ADDR_VAR 0 51
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: LD_INT 2
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65146: LD_ADDR_VAR 0 52
65150: PUSH
65151: LD_INT 3
65153: NEG
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: LD_INT 2
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65179: LD_ADDR_VAR 0 53
65183: PUSH
65184: LD_INT 1
65186: NEG
65187: PUSH
65188: LD_INT 3
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: LD_INT 3
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 1
65209: PUSH
65210: LD_INT 2
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: LIST
65222: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65223: LD_ADDR_VAR 0 54
65227: PUSH
65228: LD_INT 2
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 3
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 3
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: LIST
65263: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65264: LD_ADDR_VAR 0 55
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: LD_INT 2
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 3
65281: PUSH
65282: LD_INT 3
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: LD_INT 3
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65304: LD_ADDR_VAR 0 56
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: LD_INT 3
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: LD_INT 3
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: LD_INT 2
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65345: LD_ADDR_VAR 0 57
65349: PUSH
65350: LD_INT 2
65352: NEG
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 3
65363: NEG
65364: PUSH
65365: LD_INT 0
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 3
65374: NEG
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: LIST
65388: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65389: LD_ADDR_VAR 0 58
65393: PUSH
65394: LD_INT 2
65396: NEG
65397: PUSH
65398: LD_INT 3
65400: NEG
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 3
65408: NEG
65409: PUSH
65410: LD_INT 2
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 3
65420: NEG
65421: PUSH
65422: LD_INT 3
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65435: LD_ADDR_VAR 0 59
65439: PUSH
65440: LD_INT 1
65442: NEG
65443: PUSH
65444: LD_INT 2
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: LIST
65478: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65479: LD_ADDR_VAR 0 60
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 2
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 2
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: LIST
65519: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65520: LD_ADDR_VAR 0 61
65524: PUSH
65525: LD_INT 2
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 2
65537: PUSH
65538: LD_INT 2
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: LD_INT 2
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: LIST
65559: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65560: LD_ADDR_VAR 0 62
65564: PUSH
65565: LD_INT 1
65567: PUSH
65568: LD_INT 2
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: LIST
65600: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65601: LD_ADDR_VAR 0 63
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 2
65619: NEG
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 2
65630: NEG
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: LIST
65644: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65645: LD_ADDR_VAR 0 64
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 2
65664: NEG
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 2
65676: NEG
65677: PUSH
65678: LD_INT 2
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: ST_TO_ADDR
// end ; 2 :
65691: GO 68957
65693: LD_INT 2
65695: DOUBLE
65696: EQUAL
65697: IFTRUE 65701
65699: GO 68956
65701: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65702: LD_ADDR_VAR 0 29
65706: PUSH
65707: LD_INT 4
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 4
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 5
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 5
65740: PUSH
65741: LD_INT 1
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 4
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 3
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 3
65770: PUSH
65771: LD_INT 1
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 3
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 5
65792: PUSH
65793: LD_INT 2
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 3
65802: PUSH
65803: LD_INT 3
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 3
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 4
65822: PUSH
65823: LD_INT 3
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 4
65832: PUSH
65833: LD_INT 4
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 3
65842: PUSH
65843: LD_INT 4
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 2
65852: PUSH
65853: LD_INT 3
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 2
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 4
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: PUSH
65883: LD_INT 4
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: LD_INT 4
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 0
65902: PUSH
65903: LD_INT 3
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: LD_INT 4
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: LD_INT 5
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: LD_INT 5
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 1
65942: NEG
65943: PUSH
65944: LD_INT 4
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 1
65953: NEG
65954: PUSH
65955: LD_INT 3
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 2
65964: PUSH
65965: LD_INT 5
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 2
65974: NEG
65975: PUSH
65976: LD_INT 3
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 3
65985: NEG
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 3
65996: NEG
65997: PUSH
65998: LD_INT 1
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 2
66008: NEG
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 3
66030: NEG
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 4
66041: NEG
66042: PUSH
66043: LD_INT 0
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 4
66052: NEG
66053: PUSH
66054: LD_INT 1
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 4
66064: NEG
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: LD_INT 2
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 4
66087: NEG
66088: PUSH
66089: LD_INT 4
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 4
66099: NEG
66100: PUSH
66101: LD_INT 5
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 3
66111: NEG
66112: PUSH
66113: LD_INT 4
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 3
66123: NEG
66124: PUSH
66125: LD_INT 3
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 4
66135: NEG
66136: PUSH
66137: LD_INT 3
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 5
66147: NEG
66148: PUSH
66149: LD_INT 4
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 5
66159: NEG
66160: PUSH
66161: LD_INT 5
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 3
66171: NEG
66172: PUSH
66173: LD_INT 5
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 5
66183: NEG
66184: PUSH
66185: LD_INT 3
66187: NEG
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66240: LD_ADDR_VAR 0 30
66244: PUSH
66245: LD_INT 4
66247: PUSH
66248: LD_INT 4
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 4
66257: PUSH
66258: LD_INT 3
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 5
66267: PUSH
66268: LD_INT 4
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 5
66277: PUSH
66278: LD_INT 5
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 4
66287: PUSH
66288: LD_INT 5
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: LD_INT 4
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 3
66307: PUSH
66308: LD_INT 3
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 5
66317: PUSH
66318: LD_INT 3
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 3
66327: PUSH
66328: LD_INT 5
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: LD_INT 3
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: LD_INT 2
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: LD_INT 3
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: LD_INT 4
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: LD_INT 4
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: LD_INT 3
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 2
66409: PUSH
66410: LD_INT 4
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 2
66419: NEG
66420: PUSH
66421: LD_INT 2
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 4
66430: NEG
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 4
66441: NEG
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 3
66453: NEG
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 3
66464: NEG
66465: PUSH
66466: LD_INT 1
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 4
66475: NEG
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 5
66486: NEG
66487: PUSH
66488: LD_INT 0
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 5
66497: NEG
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 5
66509: NEG
66510: PUSH
66511: LD_INT 2
66513: NEG
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 3
66521: NEG
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 3
66532: NEG
66533: PUSH
66534: LD_INT 3
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 3
66544: NEG
66545: PUSH
66546: LD_INT 4
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 2
66556: NEG
66557: PUSH
66558: LD_INT 3
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 2
66568: NEG
66569: PUSH
66570: LD_INT 2
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: LD_INT 2
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 4
66592: NEG
66593: PUSH
66594: LD_INT 3
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 4
66604: NEG
66605: PUSH
66606: LD_INT 4
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 2
66616: NEG
66617: PUSH
66618: LD_INT 4
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 4
66628: NEG
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: LD_INT 4
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: LD_INT 5
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: LD_INT 4
66665: NEG
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 1
66673: PUSH
66674: LD_INT 3
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 0
66684: PUSH
66685: LD_INT 3
66687: NEG
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 1
66695: NEG
66696: PUSH
66697: LD_INT 4
66699: NEG
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 1
66707: NEG
66708: PUSH
66709: LD_INT 5
66711: NEG
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: LD_INT 3
66722: NEG
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: NEG
66731: PUSH
66732: LD_INT 5
66734: NEG
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66787: LD_ADDR_VAR 0 31
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 4
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: LD_INT 3
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: LD_INT 4
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 1
66824: PUSH
66825: LD_INT 5
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: LD_INT 5
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 1
66844: NEG
66845: PUSH
66846: LD_INT 4
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 1
66855: NEG
66856: PUSH
66857: LD_INT 3
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 2
66866: PUSH
66867: LD_INT 5
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 2
66876: NEG
66877: PUSH
66878: LD_INT 3
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 3
66887: NEG
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 3
66898: NEG
66899: PUSH
66900: LD_INT 1
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 2
66910: NEG
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 2
66921: NEG
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 3
66932: NEG
66933: PUSH
66934: LD_INT 1
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 4
66943: NEG
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 4
66954: NEG
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 4
66966: NEG
66967: PUSH
66968: LD_INT 2
66970: NEG
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 2
66978: NEG
66979: PUSH
66980: LD_INT 2
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 4
66989: NEG
66990: PUSH
66991: LD_INT 4
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 4
67001: NEG
67002: PUSH
67003: LD_INT 5
67005: NEG
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 3
67013: NEG
67014: PUSH
67015: LD_INT 4
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 3
67025: NEG
67026: PUSH
67027: LD_INT 3
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 4
67037: NEG
67038: PUSH
67039: LD_INT 3
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 5
67049: NEG
67050: PUSH
67051: LD_INT 4
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 5
67061: NEG
67062: PUSH
67063: LD_INT 5
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 3
67073: NEG
67074: PUSH
67075: LD_INT 5
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 5
67085: NEG
67086: PUSH
67087: LD_INT 3
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: LD_INT 3
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 0
67108: PUSH
67109: LD_INT 4
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 1
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: PUSH
67131: LD_INT 2
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 0
67141: PUSH
67142: LD_INT 2
67144: NEG
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 1
67152: NEG
67153: PUSH
67154: LD_INT 3
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: NEG
67165: PUSH
67166: LD_INT 4
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: LD_INT 2
67179: NEG
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 2
67187: NEG
67188: PUSH
67189: LD_INT 4
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 4
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 4
67209: PUSH
67210: LD_INT 1
67212: NEG
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 5
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 5
67230: PUSH
67231: LD_INT 1
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 4
67240: PUSH
67241: LD_INT 1
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 3
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 3
67260: PUSH
67261: LD_INT 1
67263: NEG
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: LD_INT 2
67274: NEG
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 5
67282: PUSH
67283: LD_INT 2
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67337: LD_ADDR_VAR 0 32
67341: PUSH
67342: LD_INT 4
67344: NEG
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 4
67355: NEG
67356: PUSH
67357: LD_INT 1
67359: NEG
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 3
67367: NEG
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 3
67378: NEG
67379: PUSH
67380: LD_INT 1
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 4
67389: NEG
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 5
67400: NEG
67401: PUSH
67402: LD_INT 0
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 5
67411: NEG
67412: PUSH
67413: LD_INT 1
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 5
67423: NEG
67424: PUSH
67425: LD_INT 2
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 3
67435: NEG
67436: PUSH
67437: LD_INT 2
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 3
67446: NEG
67447: PUSH
67448: LD_INT 3
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 3
67458: NEG
67459: PUSH
67460: LD_INT 4
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 2
67470: NEG
67471: PUSH
67472: LD_INT 3
67474: NEG
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 2
67482: NEG
67483: PUSH
67484: LD_INT 2
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 3
67494: NEG
67495: PUSH
67496: LD_INT 2
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 4
67506: NEG
67507: PUSH
67508: LD_INT 3
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 4
67518: NEG
67519: PUSH
67520: LD_INT 4
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 2
67530: NEG
67531: PUSH
67532: LD_INT 4
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 4
67542: NEG
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: LD_INT 4
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 0
67565: PUSH
67566: LD_INT 5
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 1
67576: PUSH
67577: LD_INT 4
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: LD_INT 3
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: LD_INT 3
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 1
67609: NEG
67610: PUSH
67611: LD_INT 4
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: LD_INT 5
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 2
67633: PUSH
67634: LD_INT 3
67636: NEG
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 2
67644: NEG
67645: PUSH
67646: LD_INT 5
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 3
67656: PUSH
67657: LD_INT 0
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 3
67666: PUSH
67667: LD_INT 1
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 4
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 4
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 3
67697: PUSH
67698: LD_INT 1
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 2
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 2
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 2
67728: PUSH
67729: LD_INT 2
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 4
67739: PUSH
67740: LD_INT 2
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 4
67749: PUSH
67750: LD_INT 4
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 4
67759: PUSH
67760: LD_INT 3
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 5
67769: PUSH
67770: LD_INT 4
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 5
67779: PUSH
67780: LD_INT 5
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 4
67789: PUSH
67790: LD_INT 5
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 3
67799: PUSH
67800: LD_INT 4
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 3
67809: PUSH
67810: LD_INT 3
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 5
67819: PUSH
67820: LD_INT 3
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 3
67829: PUSH
67830: LD_INT 5
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67884: LD_ADDR_VAR 0 33
67888: PUSH
67889: LD_INT 4
67891: NEG
67892: PUSH
67893: LD_INT 4
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 4
67903: NEG
67904: PUSH
67905: LD_INT 5
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: LD_INT 4
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 3
67927: NEG
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 4
67939: NEG
67940: PUSH
67941: LD_INT 3
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 5
67951: NEG
67952: PUSH
67953: LD_INT 4
67955: NEG
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 5
67963: NEG
67964: PUSH
67965: LD_INT 5
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 3
67975: NEG
67976: PUSH
67977: LD_INT 5
67979: NEG
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 5
67987: NEG
67988: PUSH
67989: LD_INT 3
67991: NEG
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 0
67999: PUSH
68000: LD_INT 3
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 0
68010: PUSH
68011: LD_INT 4
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: LD_INT 3
68024: NEG
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 1
68032: PUSH
68033: LD_INT 2
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: LD_INT 2
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 1
68054: NEG
68055: PUSH
68056: LD_INT 3
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 1
68066: NEG
68067: PUSH
68068: LD_INT 4
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 2
68078: PUSH
68079: LD_INT 2
68081: NEG
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 2
68089: NEG
68090: PUSH
68091: LD_INT 4
68093: NEG
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 4
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 4
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 5
68122: PUSH
68123: LD_INT 0
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 5
68132: PUSH
68133: LD_INT 1
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 4
68142: PUSH
68143: LD_INT 1
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 3
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 3
68162: PUSH
68163: LD_INT 1
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 3
68173: PUSH
68174: LD_INT 2
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 5
68184: PUSH
68185: LD_INT 2
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 3
68194: PUSH
68195: LD_INT 3
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 3
68204: PUSH
68205: LD_INT 2
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 4
68214: PUSH
68215: LD_INT 3
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 4
68224: PUSH
68225: LD_INT 4
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: LD_INT 4
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: LD_INT 3
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 2
68254: PUSH
68255: LD_INT 2
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 4
68264: PUSH
68265: LD_INT 2
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 2
68274: PUSH
68275: LD_INT 4
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 0
68284: PUSH
68285: LD_INT 4
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: PUSH
68305: LD_INT 4
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 1
68314: PUSH
68315: LD_INT 5
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 0
68324: PUSH
68325: LD_INT 5
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 1
68334: NEG
68335: PUSH
68336: LD_INT 4
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 1
68345: NEG
68346: PUSH
68347: LD_INT 3
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 2
68356: PUSH
68357: LD_INT 5
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 2
68366: NEG
68367: PUSH
68368: LD_INT 3
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68422: LD_ADDR_VAR 0 34
68426: PUSH
68427: LD_INT 0
68429: PUSH
68430: LD_INT 4
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: LD_INT 5
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 1
68451: PUSH
68452: LD_INT 4
68454: NEG
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 1
68462: PUSH
68463: LD_INT 3
68465: NEG
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 0
68473: PUSH
68474: LD_INT 3
68476: NEG
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 1
68484: NEG
68485: PUSH
68486: LD_INT 4
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: LD_INT 5
68500: NEG
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 2
68508: PUSH
68509: LD_INT 3
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 2
68519: NEG
68520: PUSH
68521: LD_INT 5
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 3
68531: PUSH
68532: LD_INT 0
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 3
68541: PUSH
68542: LD_INT 1
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 4
68552: PUSH
68553: LD_INT 0
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 4
68562: PUSH
68563: LD_INT 1
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 3
68572: PUSH
68573: LD_INT 1
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 2
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 2
68592: PUSH
68593: LD_INT 1
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 2
68603: PUSH
68604: LD_INT 2
68606: NEG
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 4
68614: PUSH
68615: LD_INT 2
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 4
68624: PUSH
68625: LD_INT 4
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 4
68634: PUSH
68635: LD_INT 3
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 5
68644: PUSH
68645: LD_INT 4
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 5
68654: PUSH
68655: LD_INT 5
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 4
68664: PUSH
68665: LD_INT 5
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 3
68674: PUSH
68675: LD_INT 4
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 3
68684: PUSH
68685: LD_INT 3
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 5
68694: PUSH
68695: LD_INT 3
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 3
68704: PUSH
68705: LD_INT 5
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: LD_INT 3
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 2
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 1
68734: PUSH
68735: LD_INT 3
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 1
68744: PUSH
68745: LD_INT 4
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 0
68754: PUSH
68755: LD_INT 4
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 1
68764: NEG
68765: PUSH
68766: LD_INT 3
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 1
68775: NEG
68776: PUSH
68777: LD_INT 2
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 2
68786: PUSH
68787: LD_INT 4
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 2
68796: NEG
68797: PUSH
68798: LD_INT 2
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 4
68807: NEG
68808: PUSH
68809: LD_INT 0
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 4
68818: NEG
68819: PUSH
68820: LD_INT 1
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 3
68830: NEG
68831: PUSH
68832: LD_INT 0
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 3
68841: NEG
68842: PUSH
68843: LD_INT 1
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 4
68852: NEG
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 5
68863: NEG
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 5
68874: NEG
68875: PUSH
68876: LD_INT 1
68878: NEG
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 5
68886: NEG
68887: PUSH
68888: LD_INT 2
68890: NEG
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 3
68898: NEG
68899: PUSH
68900: LD_INT 2
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: ST_TO_ADDR
// end ; end ;
68954: GO 68957
68956: POP
// case btype of b_depot , b_warehouse :
68957: LD_VAR 0 1
68961: PUSH
68962: LD_INT 0
68964: DOUBLE
68965: EQUAL
68966: IFTRUE 68976
68968: LD_INT 1
68970: DOUBLE
68971: EQUAL
68972: IFTRUE 68976
68974: GO 69177
68976: POP
// case nation of nation_american :
68977: LD_VAR 0 5
68981: PUSH
68982: LD_INT 1
68984: DOUBLE
68985: EQUAL
68986: IFTRUE 68990
68988: GO 69046
68990: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68991: LD_ADDR_VAR 0 9
68995: PUSH
68996: LD_VAR 0 11
69000: PUSH
69001: LD_VAR 0 12
69005: PUSH
69006: LD_VAR 0 13
69010: PUSH
69011: LD_VAR 0 14
69015: PUSH
69016: LD_VAR 0 15
69020: PUSH
69021: LD_VAR 0 16
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: PUSH
69034: LD_VAR 0 4
69038: PUSH
69039: LD_INT 1
69041: PLUS
69042: ARRAY
69043: ST_TO_ADDR
69044: GO 69175
69046: LD_INT 2
69048: DOUBLE
69049: EQUAL
69050: IFTRUE 69054
69052: GO 69110
69054: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69055: LD_ADDR_VAR 0 9
69059: PUSH
69060: LD_VAR 0 17
69064: PUSH
69065: LD_VAR 0 18
69069: PUSH
69070: LD_VAR 0 19
69074: PUSH
69075: LD_VAR 0 20
69079: PUSH
69080: LD_VAR 0 21
69084: PUSH
69085: LD_VAR 0 22
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: PUSH
69098: LD_VAR 0 4
69102: PUSH
69103: LD_INT 1
69105: PLUS
69106: ARRAY
69107: ST_TO_ADDR
69108: GO 69175
69110: LD_INT 3
69112: DOUBLE
69113: EQUAL
69114: IFTRUE 69118
69116: GO 69174
69118: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69119: LD_ADDR_VAR 0 9
69123: PUSH
69124: LD_VAR 0 23
69128: PUSH
69129: LD_VAR 0 24
69133: PUSH
69134: LD_VAR 0 25
69138: PUSH
69139: LD_VAR 0 26
69143: PUSH
69144: LD_VAR 0 27
69148: PUSH
69149: LD_VAR 0 28
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: PUSH
69162: LD_VAR 0 4
69166: PUSH
69167: LD_INT 1
69169: PLUS
69170: ARRAY
69171: ST_TO_ADDR
69172: GO 69175
69174: POP
69175: GO 69730
69177: LD_INT 2
69179: DOUBLE
69180: EQUAL
69181: IFTRUE 69191
69183: LD_INT 3
69185: DOUBLE
69186: EQUAL
69187: IFTRUE 69191
69189: GO 69247
69191: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69192: LD_ADDR_VAR 0 9
69196: PUSH
69197: LD_VAR 0 29
69201: PUSH
69202: LD_VAR 0 30
69206: PUSH
69207: LD_VAR 0 31
69211: PUSH
69212: LD_VAR 0 32
69216: PUSH
69217: LD_VAR 0 33
69221: PUSH
69222: LD_VAR 0 34
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: PUSH
69235: LD_VAR 0 4
69239: PUSH
69240: LD_INT 1
69242: PLUS
69243: ARRAY
69244: ST_TO_ADDR
69245: GO 69730
69247: LD_INT 16
69249: DOUBLE
69250: EQUAL
69251: IFTRUE 69309
69253: LD_INT 17
69255: DOUBLE
69256: EQUAL
69257: IFTRUE 69309
69259: LD_INT 18
69261: DOUBLE
69262: EQUAL
69263: IFTRUE 69309
69265: LD_INT 19
69267: DOUBLE
69268: EQUAL
69269: IFTRUE 69309
69271: LD_INT 22
69273: DOUBLE
69274: EQUAL
69275: IFTRUE 69309
69277: LD_INT 20
69279: DOUBLE
69280: EQUAL
69281: IFTRUE 69309
69283: LD_INT 21
69285: DOUBLE
69286: EQUAL
69287: IFTRUE 69309
69289: LD_INT 23
69291: DOUBLE
69292: EQUAL
69293: IFTRUE 69309
69295: LD_INT 24
69297: DOUBLE
69298: EQUAL
69299: IFTRUE 69309
69301: LD_INT 25
69303: DOUBLE
69304: EQUAL
69305: IFTRUE 69309
69307: GO 69365
69309: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69310: LD_ADDR_VAR 0 9
69314: PUSH
69315: LD_VAR 0 35
69319: PUSH
69320: LD_VAR 0 36
69324: PUSH
69325: LD_VAR 0 37
69329: PUSH
69330: LD_VAR 0 38
69334: PUSH
69335: LD_VAR 0 39
69339: PUSH
69340: LD_VAR 0 40
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: PUSH
69353: LD_VAR 0 4
69357: PUSH
69358: LD_INT 1
69360: PLUS
69361: ARRAY
69362: ST_TO_ADDR
69363: GO 69730
69365: LD_INT 6
69367: DOUBLE
69368: EQUAL
69369: IFTRUE 69421
69371: LD_INT 7
69373: DOUBLE
69374: EQUAL
69375: IFTRUE 69421
69377: LD_INT 8
69379: DOUBLE
69380: EQUAL
69381: IFTRUE 69421
69383: LD_INT 13
69385: DOUBLE
69386: EQUAL
69387: IFTRUE 69421
69389: LD_INT 12
69391: DOUBLE
69392: EQUAL
69393: IFTRUE 69421
69395: LD_INT 15
69397: DOUBLE
69398: EQUAL
69399: IFTRUE 69421
69401: LD_INT 11
69403: DOUBLE
69404: EQUAL
69405: IFTRUE 69421
69407: LD_INT 14
69409: DOUBLE
69410: EQUAL
69411: IFTRUE 69421
69413: LD_INT 10
69415: DOUBLE
69416: EQUAL
69417: IFTRUE 69421
69419: GO 69477
69421: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69422: LD_ADDR_VAR 0 9
69426: PUSH
69427: LD_VAR 0 41
69431: PUSH
69432: LD_VAR 0 42
69436: PUSH
69437: LD_VAR 0 43
69441: PUSH
69442: LD_VAR 0 44
69446: PUSH
69447: LD_VAR 0 45
69451: PUSH
69452: LD_VAR 0 46
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: PUSH
69465: LD_VAR 0 4
69469: PUSH
69470: LD_INT 1
69472: PLUS
69473: ARRAY
69474: ST_TO_ADDR
69475: GO 69730
69477: LD_INT 36
69479: DOUBLE
69480: EQUAL
69481: IFTRUE 69485
69483: GO 69541
69485: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69486: LD_ADDR_VAR 0 9
69490: PUSH
69491: LD_VAR 0 47
69495: PUSH
69496: LD_VAR 0 48
69500: PUSH
69501: LD_VAR 0 49
69505: PUSH
69506: LD_VAR 0 50
69510: PUSH
69511: LD_VAR 0 51
69515: PUSH
69516: LD_VAR 0 52
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: PUSH
69529: LD_VAR 0 4
69533: PUSH
69534: LD_INT 1
69536: PLUS
69537: ARRAY
69538: ST_TO_ADDR
69539: GO 69730
69541: LD_INT 4
69543: DOUBLE
69544: EQUAL
69545: IFTRUE 69567
69547: LD_INT 5
69549: DOUBLE
69550: EQUAL
69551: IFTRUE 69567
69553: LD_INT 34
69555: DOUBLE
69556: EQUAL
69557: IFTRUE 69567
69559: LD_INT 37
69561: DOUBLE
69562: EQUAL
69563: IFTRUE 69567
69565: GO 69623
69567: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69568: LD_ADDR_VAR 0 9
69572: PUSH
69573: LD_VAR 0 53
69577: PUSH
69578: LD_VAR 0 54
69582: PUSH
69583: LD_VAR 0 55
69587: PUSH
69588: LD_VAR 0 56
69592: PUSH
69593: LD_VAR 0 57
69597: PUSH
69598: LD_VAR 0 58
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: PUSH
69611: LD_VAR 0 4
69615: PUSH
69616: LD_INT 1
69618: PLUS
69619: ARRAY
69620: ST_TO_ADDR
69621: GO 69730
69623: LD_INT 31
69625: DOUBLE
69626: EQUAL
69627: IFTRUE 69673
69629: LD_INT 32
69631: DOUBLE
69632: EQUAL
69633: IFTRUE 69673
69635: LD_INT 33
69637: DOUBLE
69638: EQUAL
69639: IFTRUE 69673
69641: LD_INT 27
69643: DOUBLE
69644: EQUAL
69645: IFTRUE 69673
69647: LD_INT 26
69649: DOUBLE
69650: EQUAL
69651: IFTRUE 69673
69653: LD_INT 28
69655: DOUBLE
69656: EQUAL
69657: IFTRUE 69673
69659: LD_INT 29
69661: DOUBLE
69662: EQUAL
69663: IFTRUE 69673
69665: LD_INT 30
69667: DOUBLE
69668: EQUAL
69669: IFTRUE 69673
69671: GO 69729
69673: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69674: LD_ADDR_VAR 0 9
69678: PUSH
69679: LD_VAR 0 59
69683: PUSH
69684: LD_VAR 0 60
69688: PUSH
69689: LD_VAR 0 61
69693: PUSH
69694: LD_VAR 0 62
69698: PUSH
69699: LD_VAR 0 63
69703: PUSH
69704: LD_VAR 0 64
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: PUSH
69717: LD_VAR 0 4
69721: PUSH
69722: LD_INT 1
69724: PLUS
69725: ARRAY
69726: ST_TO_ADDR
69727: GO 69730
69729: POP
// temp_list2 = [ ] ;
69730: LD_ADDR_VAR 0 10
69734: PUSH
69735: EMPTY
69736: ST_TO_ADDR
// for i in temp_list do
69737: LD_ADDR_VAR 0 8
69741: PUSH
69742: LD_VAR 0 9
69746: PUSH
69747: FOR_IN
69748: IFFALSE 69800
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69750: LD_ADDR_VAR 0 10
69754: PUSH
69755: LD_VAR 0 10
69759: PUSH
69760: LD_VAR 0 8
69764: PUSH
69765: LD_INT 1
69767: ARRAY
69768: PUSH
69769: LD_VAR 0 2
69773: PLUS
69774: PUSH
69775: LD_VAR 0 8
69779: PUSH
69780: LD_INT 2
69782: ARRAY
69783: PUSH
69784: LD_VAR 0 3
69788: PLUS
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: EMPTY
69795: LIST
69796: ADD
69797: ST_TO_ADDR
69798: GO 69747
69800: POP
69801: POP
// result = temp_list2 ;
69802: LD_ADDR_VAR 0 7
69806: PUSH
69807: LD_VAR 0 10
69811: ST_TO_ADDR
// end ;
69812: LD_VAR 0 7
69816: RET
// export function EnemyInRange ( unit , dist ) ; begin
69817: LD_INT 0
69819: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69820: LD_ADDR_VAR 0 3
69824: PUSH
69825: LD_VAR 0 1
69829: PPUSH
69830: CALL_OW 255
69834: PPUSH
69835: LD_VAR 0 1
69839: PPUSH
69840: CALL_OW 250
69844: PPUSH
69845: LD_VAR 0 1
69849: PPUSH
69850: CALL_OW 251
69854: PPUSH
69855: LD_VAR 0 2
69859: PPUSH
69860: CALL 43213 0 4
69864: PUSH
69865: LD_INT 4
69867: ARRAY
69868: ST_TO_ADDR
// end ;
69869: LD_VAR 0 3
69873: RET
// export function PlayerSeeMe ( unit ) ; begin
69874: LD_INT 0
69876: PPUSH
// result := See ( your_side , unit ) ;
69877: LD_ADDR_VAR 0 2
69881: PUSH
69882: LD_OWVAR 2
69886: PPUSH
69887: LD_VAR 0 1
69891: PPUSH
69892: CALL_OW 292
69896: ST_TO_ADDR
// end ;
69897: LD_VAR 0 2
69901: RET
// export function ReverseDir ( unit ) ; begin
69902: LD_INT 0
69904: PPUSH
// if not unit then
69905: LD_VAR 0 1
69909: NOT
69910: IFFALSE 69914
// exit ;
69912: GO 69937
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69914: LD_ADDR_VAR 0 2
69918: PUSH
69919: LD_VAR 0 1
69923: PPUSH
69924: CALL_OW 254
69928: PUSH
69929: LD_INT 3
69931: PLUS
69932: PUSH
69933: LD_INT 6
69935: MOD
69936: ST_TO_ADDR
// end ;
69937: LD_VAR 0 2
69941: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69942: LD_INT 0
69944: PPUSH
69945: PPUSH
69946: PPUSH
69947: PPUSH
69948: PPUSH
// if not hexes then
69949: LD_VAR 0 2
69953: NOT
69954: IFFALSE 69958
// exit ;
69956: GO 70106
// dist := 9999 ;
69958: LD_ADDR_VAR 0 5
69962: PUSH
69963: LD_INT 9999
69965: ST_TO_ADDR
// for i = 1 to hexes do
69966: LD_ADDR_VAR 0 4
69970: PUSH
69971: DOUBLE
69972: LD_INT 1
69974: DEC
69975: ST_TO_ADDR
69976: LD_VAR 0 2
69980: PUSH
69981: FOR_TO
69982: IFFALSE 70094
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69984: LD_VAR 0 1
69988: PPUSH
69989: LD_VAR 0 2
69993: PUSH
69994: LD_VAR 0 4
69998: ARRAY
69999: PUSH
70000: LD_INT 1
70002: ARRAY
70003: PPUSH
70004: LD_VAR 0 2
70008: PUSH
70009: LD_VAR 0 4
70013: ARRAY
70014: PUSH
70015: LD_INT 2
70017: ARRAY
70018: PPUSH
70019: CALL_OW 297
70023: PUSH
70024: LD_VAR 0 5
70028: LESS
70029: IFFALSE 70092
// begin hex := hexes [ i ] ;
70031: LD_ADDR_VAR 0 7
70035: PUSH
70036: LD_VAR 0 2
70040: PUSH
70041: LD_VAR 0 4
70045: ARRAY
70046: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70047: LD_ADDR_VAR 0 5
70051: PUSH
70052: LD_VAR 0 1
70056: PPUSH
70057: LD_VAR 0 2
70061: PUSH
70062: LD_VAR 0 4
70066: ARRAY
70067: PUSH
70068: LD_INT 1
70070: ARRAY
70071: PPUSH
70072: LD_VAR 0 2
70076: PUSH
70077: LD_VAR 0 4
70081: ARRAY
70082: PUSH
70083: LD_INT 2
70085: ARRAY
70086: PPUSH
70087: CALL_OW 297
70091: ST_TO_ADDR
// end ; end ;
70092: GO 69981
70094: POP
70095: POP
// result := hex ;
70096: LD_ADDR_VAR 0 3
70100: PUSH
70101: LD_VAR 0 7
70105: ST_TO_ADDR
// end ;
70106: LD_VAR 0 3
70110: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70111: LD_INT 0
70113: PPUSH
70114: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70115: LD_VAR 0 1
70119: NOT
70120: PUSH
70121: LD_VAR 0 1
70125: PUSH
70126: LD_INT 21
70128: PUSH
70129: LD_INT 2
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 23
70138: PUSH
70139: LD_INT 2
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PPUSH
70150: CALL_OW 69
70154: IN
70155: NOT
70156: OR
70157: IFFALSE 70161
// exit ;
70159: GO 70208
// for i = 1 to 3 do
70161: LD_ADDR_VAR 0 3
70165: PUSH
70166: DOUBLE
70167: LD_INT 1
70169: DEC
70170: ST_TO_ADDR
70171: LD_INT 3
70173: PUSH
70174: FOR_TO
70175: IFFALSE 70206
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70177: LD_VAR 0 1
70181: PPUSH
70182: CALL_OW 250
70186: PPUSH
70187: LD_VAR 0 1
70191: PPUSH
70192: CALL_OW 251
70196: PPUSH
70197: LD_INT 1
70199: PPUSH
70200: CALL_OW 453
70204: GO 70174
70206: POP
70207: POP
// end ;
70208: LD_VAR 0 2
70212: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70213: LD_INT 0
70215: PPUSH
70216: PPUSH
70217: PPUSH
70218: PPUSH
70219: PPUSH
70220: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70221: LD_VAR 0 1
70225: NOT
70226: PUSH
70227: LD_VAR 0 2
70231: NOT
70232: OR
70233: PUSH
70234: LD_VAR 0 1
70238: PPUSH
70239: CALL_OW 314
70243: OR
70244: IFFALSE 70248
// exit ;
70246: GO 70689
// x := GetX ( enemy_unit ) ;
70248: LD_ADDR_VAR 0 7
70252: PUSH
70253: LD_VAR 0 2
70257: PPUSH
70258: CALL_OW 250
70262: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70263: LD_ADDR_VAR 0 8
70267: PUSH
70268: LD_VAR 0 2
70272: PPUSH
70273: CALL_OW 251
70277: ST_TO_ADDR
// if not x or not y then
70278: LD_VAR 0 7
70282: NOT
70283: PUSH
70284: LD_VAR 0 8
70288: NOT
70289: OR
70290: IFFALSE 70294
// exit ;
70292: GO 70689
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70294: LD_ADDR_VAR 0 6
70298: PUSH
70299: LD_VAR 0 7
70303: PPUSH
70304: LD_INT 0
70306: PPUSH
70307: LD_INT 4
70309: PPUSH
70310: CALL_OW 272
70314: PUSH
70315: LD_VAR 0 8
70319: PPUSH
70320: LD_INT 0
70322: PPUSH
70323: LD_INT 4
70325: PPUSH
70326: CALL_OW 273
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_VAR 0 7
70339: PPUSH
70340: LD_INT 1
70342: PPUSH
70343: LD_INT 4
70345: PPUSH
70346: CALL_OW 272
70350: PUSH
70351: LD_VAR 0 8
70355: PPUSH
70356: LD_INT 1
70358: PPUSH
70359: LD_INT 4
70361: PPUSH
70362: CALL_OW 273
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_VAR 0 7
70375: PPUSH
70376: LD_INT 2
70378: PPUSH
70379: LD_INT 4
70381: PPUSH
70382: CALL_OW 272
70386: PUSH
70387: LD_VAR 0 8
70391: PPUSH
70392: LD_INT 2
70394: PPUSH
70395: LD_INT 4
70397: PPUSH
70398: CALL_OW 273
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_VAR 0 7
70411: PPUSH
70412: LD_INT 3
70414: PPUSH
70415: LD_INT 4
70417: PPUSH
70418: CALL_OW 272
70422: PUSH
70423: LD_VAR 0 8
70427: PPUSH
70428: LD_INT 3
70430: PPUSH
70431: LD_INT 4
70433: PPUSH
70434: CALL_OW 273
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_VAR 0 7
70447: PPUSH
70448: LD_INT 4
70450: PPUSH
70451: LD_INT 4
70453: PPUSH
70454: CALL_OW 272
70458: PUSH
70459: LD_VAR 0 8
70463: PPUSH
70464: LD_INT 4
70466: PPUSH
70467: LD_INT 4
70469: PPUSH
70470: CALL_OW 273
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_VAR 0 7
70483: PPUSH
70484: LD_INT 5
70486: PPUSH
70487: LD_INT 4
70489: PPUSH
70490: CALL_OW 272
70494: PUSH
70495: LD_VAR 0 8
70499: PPUSH
70500: LD_INT 5
70502: PPUSH
70503: LD_INT 4
70505: PPUSH
70506: CALL_OW 273
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: ST_TO_ADDR
// for i = tmp downto 1 do
70523: LD_ADDR_VAR 0 4
70527: PUSH
70528: DOUBLE
70529: LD_VAR 0 6
70533: INC
70534: ST_TO_ADDR
70535: LD_INT 1
70537: PUSH
70538: FOR_DOWNTO
70539: IFFALSE 70640
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70541: LD_VAR 0 6
70545: PUSH
70546: LD_VAR 0 4
70550: ARRAY
70551: PUSH
70552: LD_INT 1
70554: ARRAY
70555: PPUSH
70556: LD_VAR 0 6
70560: PUSH
70561: LD_VAR 0 4
70565: ARRAY
70566: PUSH
70567: LD_INT 2
70569: ARRAY
70570: PPUSH
70571: CALL_OW 488
70575: NOT
70576: PUSH
70577: LD_VAR 0 6
70581: PUSH
70582: LD_VAR 0 4
70586: ARRAY
70587: PUSH
70588: LD_INT 1
70590: ARRAY
70591: PPUSH
70592: LD_VAR 0 6
70596: PUSH
70597: LD_VAR 0 4
70601: ARRAY
70602: PUSH
70603: LD_INT 2
70605: ARRAY
70606: PPUSH
70607: CALL_OW 428
70611: PUSH
70612: LD_INT 0
70614: NONEQUAL
70615: OR
70616: IFFALSE 70638
// tmp := Delete ( tmp , i ) ;
70618: LD_ADDR_VAR 0 6
70622: PUSH
70623: LD_VAR 0 6
70627: PPUSH
70628: LD_VAR 0 4
70632: PPUSH
70633: CALL_OW 3
70637: ST_TO_ADDR
70638: GO 70538
70640: POP
70641: POP
// j := GetClosestHex ( unit , tmp ) ;
70642: LD_ADDR_VAR 0 5
70646: PUSH
70647: LD_VAR 0 1
70651: PPUSH
70652: LD_VAR 0 6
70656: PPUSH
70657: CALL 69942 0 2
70661: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70662: LD_VAR 0 1
70666: PPUSH
70667: LD_VAR 0 5
70671: PUSH
70672: LD_INT 1
70674: ARRAY
70675: PPUSH
70676: LD_VAR 0 5
70680: PUSH
70681: LD_INT 2
70683: ARRAY
70684: PPUSH
70685: CALL_OW 111
// end ;
70689: LD_VAR 0 3
70693: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70694: LD_INT 0
70696: PPUSH
70697: PPUSH
70698: PPUSH
// uc_side = 0 ;
70699: LD_ADDR_OWVAR 20
70703: PUSH
70704: LD_INT 0
70706: ST_TO_ADDR
// uc_nation = 0 ;
70707: LD_ADDR_OWVAR 21
70711: PUSH
70712: LD_INT 0
70714: ST_TO_ADDR
// InitHc_All ( ) ;
70715: CALL_OW 584
// InitVc ;
70719: CALL_OW 20
// if mastodonts then
70723: LD_VAR 0 6
70727: IFFALSE 70794
// for i = 1 to mastodonts do
70729: LD_ADDR_VAR 0 11
70733: PUSH
70734: DOUBLE
70735: LD_INT 1
70737: DEC
70738: ST_TO_ADDR
70739: LD_VAR 0 6
70743: PUSH
70744: FOR_TO
70745: IFFALSE 70792
// begin vc_chassis := 31 ;
70747: LD_ADDR_OWVAR 37
70751: PUSH
70752: LD_INT 31
70754: ST_TO_ADDR
// vc_control := control_rider ;
70755: LD_ADDR_OWVAR 38
70759: PUSH
70760: LD_INT 4
70762: ST_TO_ADDR
// animal := CreateVehicle ;
70763: LD_ADDR_VAR 0 12
70767: PUSH
70768: CALL_OW 45
70772: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70773: LD_VAR 0 12
70777: PPUSH
70778: LD_VAR 0 8
70782: PPUSH
70783: LD_INT 0
70785: PPUSH
70786: CALL 72929 0 3
// end ;
70790: GO 70744
70792: POP
70793: POP
// if horses then
70794: LD_VAR 0 5
70798: IFFALSE 70865
// for i = 1 to horses do
70800: LD_ADDR_VAR 0 11
70804: PUSH
70805: DOUBLE
70806: LD_INT 1
70808: DEC
70809: ST_TO_ADDR
70810: LD_VAR 0 5
70814: PUSH
70815: FOR_TO
70816: IFFALSE 70863
// begin hc_class := 21 ;
70818: LD_ADDR_OWVAR 28
70822: PUSH
70823: LD_INT 21
70825: ST_TO_ADDR
// hc_gallery :=  ;
70826: LD_ADDR_OWVAR 33
70830: PUSH
70831: LD_STRING 
70833: ST_TO_ADDR
// animal := CreateHuman ;
70834: LD_ADDR_VAR 0 12
70838: PUSH
70839: CALL_OW 44
70843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70844: LD_VAR 0 12
70848: PPUSH
70849: LD_VAR 0 8
70853: PPUSH
70854: LD_INT 0
70856: PPUSH
70857: CALL 72929 0 3
// end ;
70861: GO 70815
70863: POP
70864: POP
// if birds then
70865: LD_VAR 0 1
70869: IFFALSE 70936
// for i = 1 to birds do
70871: LD_ADDR_VAR 0 11
70875: PUSH
70876: DOUBLE
70877: LD_INT 1
70879: DEC
70880: ST_TO_ADDR
70881: LD_VAR 0 1
70885: PUSH
70886: FOR_TO
70887: IFFALSE 70934
// begin hc_class = 18 ;
70889: LD_ADDR_OWVAR 28
70893: PUSH
70894: LD_INT 18
70896: ST_TO_ADDR
// hc_gallery =  ;
70897: LD_ADDR_OWVAR 33
70901: PUSH
70902: LD_STRING 
70904: ST_TO_ADDR
// animal := CreateHuman ;
70905: LD_ADDR_VAR 0 12
70909: PUSH
70910: CALL_OW 44
70914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70915: LD_VAR 0 12
70919: PPUSH
70920: LD_VAR 0 8
70924: PPUSH
70925: LD_INT 0
70927: PPUSH
70928: CALL 72929 0 3
// end ;
70932: GO 70886
70934: POP
70935: POP
// if tigers then
70936: LD_VAR 0 2
70940: IFFALSE 71024
// for i = 1 to tigers do
70942: LD_ADDR_VAR 0 11
70946: PUSH
70947: DOUBLE
70948: LD_INT 1
70950: DEC
70951: ST_TO_ADDR
70952: LD_VAR 0 2
70956: PUSH
70957: FOR_TO
70958: IFFALSE 71022
// begin hc_class = class_tiger ;
70960: LD_ADDR_OWVAR 28
70964: PUSH
70965: LD_INT 14
70967: ST_TO_ADDR
// hc_gallery =  ;
70968: LD_ADDR_OWVAR 33
70972: PUSH
70973: LD_STRING 
70975: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70976: LD_ADDR_OWVAR 35
70980: PUSH
70981: LD_INT 7
70983: NEG
70984: PPUSH
70985: LD_INT 7
70987: PPUSH
70988: CALL_OW 12
70992: ST_TO_ADDR
// animal := CreateHuman ;
70993: LD_ADDR_VAR 0 12
70997: PUSH
70998: CALL_OW 44
71002: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71003: LD_VAR 0 12
71007: PPUSH
71008: LD_VAR 0 8
71012: PPUSH
71013: LD_INT 0
71015: PPUSH
71016: CALL 72929 0 3
// end ;
71020: GO 70957
71022: POP
71023: POP
// if apemans then
71024: LD_VAR 0 3
71028: IFFALSE 71151
// for i = 1 to apemans do
71030: LD_ADDR_VAR 0 11
71034: PUSH
71035: DOUBLE
71036: LD_INT 1
71038: DEC
71039: ST_TO_ADDR
71040: LD_VAR 0 3
71044: PUSH
71045: FOR_TO
71046: IFFALSE 71149
// begin hc_class = class_apeman ;
71048: LD_ADDR_OWVAR 28
71052: PUSH
71053: LD_INT 12
71055: ST_TO_ADDR
// hc_gallery =  ;
71056: LD_ADDR_OWVAR 33
71060: PUSH
71061: LD_STRING 
71063: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71064: LD_ADDR_OWVAR 35
71068: PUSH
71069: LD_INT 2
71071: NEG
71072: PPUSH
71073: LD_INT 2
71075: PPUSH
71076: CALL_OW 12
71080: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71081: LD_ADDR_OWVAR 31
71085: PUSH
71086: LD_INT 1
71088: PPUSH
71089: LD_INT 3
71091: PPUSH
71092: CALL_OW 12
71096: PUSH
71097: LD_INT 1
71099: PPUSH
71100: LD_INT 3
71102: PPUSH
71103: CALL_OW 12
71107: PUSH
71108: LD_INT 0
71110: PUSH
71111: LD_INT 0
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: ST_TO_ADDR
// animal := CreateHuman ;
71120: LD_ADDR_VAR 0 12
71124: PUSH
71125: CALL_OW 44
71129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71130: LD_VAR 0 12
71134: PPUSH
71135: LD_VAR 0 8
71139: PPUSH
71140: LD_INT 0
71142: PPUSH
71143: CALL 72929 0 3
// end ;
71147: GO 71045
71149: POP
71150: POP
// if enchidnas then
71151: LD_VAR 0 4
71155: IFFALSE 71222
// for i = 1 to enchidnas do
71157: LD_ADDR_VAR 0 11
71161: PUSH
71162: DOUBLE
71163: LD_INT 1
71165: DEC
71166: ST_TO_ADDR
71167: LD_VAR 0 4
71171: PUSH
71172: FOR_TO
71173: IFFALSE 71220
// begin hc_class = 13 ;
71175: LD_ADDR_OWVAR 28
71179: PUSH
71180: LD_INT 13
71182: ST_TO_ADDR
// hc_gallery =  ;
71183: LD_ADDR_OWVAR 33
71187: PUSH
71188: LD_STRING 
71190: ST_TO_ADDR
// animal := CreateHuman ;
71191: LD_ADDR_VAR 0 12
71195: PUSH
71196: CALL_OW 44
71200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71201: LD_VAR 0 12
71205: PPUSH
71206: LD_VAR 0 8
71210: PPUSH
71211: LD_INT 0
71213: PPUSH
71214: CALL 72929 0 3
// end ;
71218: GO 71172
71220: POP
71221: POP
// if fishes then
71222: LD_VAR 0 7
71226: IFFALSE 71293
// for i = 1 to fishes do
71228: LD_ADDR_VAR 0 11
71232: PUSH
71233: DOUBLE
71234: LD_INT 1
71236: DEC
71237: ST_TO_ADDR
71238: LD_VAR 0 7
71242: PUSH
71243: FOR_TO
71244: IFFALSE 71291
// begin hc_class = 20 ;
71246: LD_ADDR_OWVAR 28
71250: PUSH
71251: LD_INT 20
71253: ST_TO_ADDR
// hc_gallery =  ;
71254: LD_ADDR_OWVAR 33
71258: PUSH
71259: LD_STRING 
71261: ST_TO_ADDR
// animal := CreateHuman ;
71262: LD_ADDR_VAR 0 12
71266: PUSH
71267: CALL_OW 44
71271: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71272: LD_VAR 0 12
71276: PPUSH
71277: LD_VAR 0 9
71281: PPUSH
71282: LD_INT 0
71284: PPUSH
71285: CALL 72929 0 3
// end ;
71289: GO 71243
71291: POP
71292: POP
// end ;
71293: LD_VAR 0 10
71297: RET
// export function WantHeal ( sci , unit ) ; begin
71298: LD_INT 0
71300: PPUSH
// if GetTaskList ( sci ) > 0 then
71301: LD_VAR 0 1
71305: PPUSH
71306: CALL_OW 437
71310: PUSH
71311: LD_INT 0
71313: GREATER
71314: IFFALSE 71384
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71316: LD_VAR 0 1
71320: PPUSH
71321: CALL_OW 437
71325: PUSH
71326: LD_INT 1
71328: ARRAY
71329: PUSH
71330: LD_INT 1
71332: ARRAY
71333: PUSH
71334: LD_STRING l
71336: EQUAL
71337: PUSH
71338: LD_VAR 0 1
71342: PPUSH
71343: CALL_OW 437
71347: PUSH
71348: LD_INT 1
71350: ARRAY
71351: PUSH
71352: LD_INT 4
71354: ARRAY
71355: PUSH
71356: LD_VAR 0 2
71360: EQUAL
71361: AND
71362: IFFALSE 71374
// result := true else
71364: LD_ADDR_VAR 0 3
71368: PUSH
71369: LD_INT 1
71371: ST_TO_ADDR
71372: GO 71382
// result := false ;
71374: LD_ADDR_VAR 0 3
71378: PUSH
71379: LD_INT 0
71381: ST_TO_ADDR
// end else
71382: GO 71392
// result := false ;
71384: LD_ADDR_VAR 0 3
71388: PUSH
71389: LD_INT 0
71391: ST_TO_ADDR
// end ;
71392: LD_VAR 0 3
71396: RET
// export function HealTarget ( sci ) ; begin
71397: LD_INT 0
71399: PPUSH
// if not sci then
71400: LD_VAR 0 1
71404: NOT
71405: IFFALSE 71409
// exit ;
71407: GO 71474
// result := 0 ;
71409: LD_ADDR_VAR 0 2
71413: PUSH
71414: LD_INT 0
71416: ST_TO_ADDR
// if GetTaskList ( sci ) then
71417: LD_VAR 0 1
71421: PPUSH
71422: CALL_OW 437
71426: IFFALSE 71474
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71428: LD_VAR 0 1
71432: PPUSH
71433: CALL_OW 437
71437: PUSH
71438: LD_INT 1
71440: ARRAY
71441: PUSH
71442: LD_INT 1
71444: ARRAY
71445: PUSH
71446: LD_STRING l
71448: EQUAL
71449: IFFALSE 71474
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71451: LD_ADDR_VAR 0 2
71455: PUSH
71456: LD_VAR 0 1
71460: PPUSH
71461: CALL_OW 437
71465: PUSH
71466: LD_INT 1
71468: ARRAY
71469: PUSH
71470: LD_INT 4
71472: ARRAY
71473: ST_TO_ADDR
// end ;
71474: LD_VAR 0 2
71478: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71479: LD_INT 0
71481: PPUSH
71482: PPUSH
71483: PPUSH
71484: PPUSH
// if not base_units then
71485: LD_VAR 0 1
71489: NOT
71490: IFFALSE 71494
// exit ;
71492: GO 71581
// result := false ;
71494: LD_ADDR_VAR 0 2
71498: PUSH
71499: LD_INT 0
71501: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71502: LD_ADDR_VAR 0 5
71506: PUSH
71507: LD_VAR 0 1
71511: PPUSH
71512: LD_INT 21
71514: PUSH
71515: LD_INT 3
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PPUSH
71522: CALL_OW 72
71526: ST_TO_ADDR
// if not tmp then
71527: LD_VAR 0 5
71531: NOT
71532: IFFALSE 71536
// exit ;
71534: GO 71581
// for i in tmp do
71536: LD_ADDR_VAR 0 3
71540: PUSH
71541: LD_VAR 0 5
71545: PUSH
71546: FOR_IN
71547: IFFALSE 71579
// begin result := EnemyInRange ( i , 22 ) ;
71549: LD_ADDR_VAR 0 2
71553: PUSH
71554: LD_VAR 0 3
71558: PPUSH
71559: LD_INT 22
71561: PPUSH
71562: CALL 69817 0 2
71566: ST_TO_ADDR
// if result then
71567: LD_VAR 0 2
71571: IFFALSE 71577
// exit ;
71573: POP
71574: POP
71575: GO 71581
// end ;
71577: GO 71546
71579: POP
71580: POP
// end ;
71581: LD_VAR 0 2
71585: RET
// export function FilterByTag ( units , tag ) ; begin
71586: LD_INT 0
71588: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71589: LD_ADDR_VAR 0 3
71593: PUSH
71594: LD_VAR 0 1
71598: PPUSH
71599: LD_INT 120
71601: PUSH
71602: LD_VAR 0 2
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PPUSH
71611: CALL_OW 72
71615: ST_TO_ADDR
// end ;
71616: LD_VAR 0 3
71620: RET
// export function IsDriver ( un ) ; begin
71621: LD_INT 0
71623: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71624: LD_ADDR_VAR 0 2
71628: PUSH
71629: LD_VAR 0 1
71633: PUSH
71634: LD_INT 55
71636: PUSH
71637: EMPTY
71638: LIST
71639: PPUSH
71640: CALL_OW 69
71644: IN
71645: ST_TO_ADDR
// end ;
71646: LD_VAR 0 2
71650: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71651: LD_INT 0
71653: PPUSH
71654: PPUSH
// list := [ ] ;
71655: LD_ADDR_VAR 0 5
71659: PUSH
71660: EMPTY
71661: ST_TO_ADDR
// case d of 0 :
71662: LD_VAR 0 3
71666: PUSH
71667: LD_INT 0
71669: DOUBLE
71670: EQUAL
71671: IFTRUE 71675
71673: GO 71808
71675: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71676: LD_ADDR_VAR 0 5
71680: PUSH
71681: LD_VAR 0 1
71685: PUSH
71686: LD_INT 4
71688: MINUS
71689: PUSH
71690: LD_VAR 0 2
71694: PUSH
71695: LD_INT 4
71697: MINUS
71698: PUSH
71699: LD_INT 2
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: LIST
71706: PUSH
71707: LD_VAR 0 1
71711: PUSH
71712: LD_INT 3
71714: MINUS
71715: PUSH
71716: LD_VAR 0 2
71720: PUSH
71721: LD_INT 1
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: LIST
71728: PUSH
71729: LD_VAR 0 1
71733: PUSH
71734: LD_INT 4
71736: PLUS
71737: PUSH
71738: LD_VAR 0 2
71742: PUSH
71743: LD_INT 4
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: LIST
71750: PUSH
71751: LD_VAR 0 1
71755: PUSH
71756: LD_INT 3
71758: PLUS
71759: PUSH
71760: LD_VAR 0 2
71764: PUSH
71765: LD_INT 3
71767: PLUS
71768: PUSH
71769: LD_INT 5
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: LIST
71776: PUSH
71777: LD_VAR 0 1
71781: PUSH
71782: LD_VAR 0 2
71786: PUSH
71787: LD_INT 4
71789: PLUS
71790: PUSH
71791: LD_INT 0
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: LIST
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: ST_TO_ADDR
// end ; 1 :
71806: GO 72506
71808: LD_INT 1
71810: DOUBLE
71811: EQUAL
71812: IFTRUE 71816
71814: GO 71949
71816: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71817: LD_ADDR_VAR 0 5
71821: PUSH
71822: LD_VAR 0 1
71826: PUSH
71827: LD_VAR 0 2
71831: PUSH
71832: LD_INT 4
71834: MINUS
71835: PUSH
71836: LD_INT 3
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: LIST
71843: PUSH
71844: LD_VAR 0 1
71848: PUSH
71849: LD_INT 3
71851: MINUS
71852: PUSH
71853: LD_VAR 0 2
71857: PUSH
71858: LD_INT 3
71860: MINUS
71861: PUSH
71862: LD_INT 2
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: LIST
71869: PUSH
71870: LD_VAR 0 1
71874: PUSH
71875: LD_INT 4
71877: MINUS
71878: PUSH
71879: LD_VAR 0 2
71883: PUSH
71884: LD_INT 1
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: PUSH
71892: LD_VAR 0 1
71896: PUSH
71897: LD_VAR 0 2
71901: PUSH
71902: LD_INT 3
71904: PLUS
71905: PUSH
71906: LD_INT 0
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: LIST
71913: PUSH
71914: LD_VAR 0 1
71918: PUSH
71919: LD_INT 4
71921: PLUS
71922: PUSH
71923: LD_VAR 0 2
71927: PUSH
71928: LD_INT 4
71930: PLUS
71931: PUSH
71932: LD_INT 5
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: LIST
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: ST_TO_ADDR
// end ; 2 :
71947: GO 72506
71949: LD_INT 2
71951: DOUBLE
71952: EQUAL
71953: IFTRUE 71957
71955: GO 72086
71957: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71958: LD_ADDR_VAR 0 5
71962: PUSH
71963: LD_VAR 0 1
71967: PUSH
71968: LD_VAR 0 2
71972: PUSH
71973: LD_INT 3
71975: MINUS
71976: PUSH
71977: LD_INT 3
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: LIST
71984: PUSH
71985: LD_VAR 0 1
71989: PUSH
71990: LD_INT 4
71992: PLUS
71993: PUSH
71994: LD_VAR 0 2
71998: PUSH
71999: LD_INT 4
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: LIST
72006: PUSH
72007: LD_VAR 0 1
72011: PUSH
72012: LD_VAR 0 2
72016: PUSH
72017: LD_INT 4
72019: PLUS
72020: PUSH
72021: LD_INT 0
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: LIST
72028: PUSH
72029: LD_VAR 0 1
72033: PUSH
72034: LD_INT 3
72036: MINUS
72037: PUSH
72038: LD_VAR 0 2
72042: PUSH
72043: LD_INT 1
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: LIST
72050: PUSH
72051: LD_VAR 0 1
72055: PUSH
72056: LD_INT 4
72058: MINUS
72059: PUSH
72060: LD_VAR 0 2
72064: PUSH
72065: LD_INT 4
72067: MINUS
72068: PUSH
72069: LD_INT 2
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: LIST
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: ST_TO_ADDR
// end ; 3 :
72084: GO 72506
72086: LD_INT 3
72088: DOUBLE
72089: EQUAL
72090: IFTRUE 72094
72092: GO 72227
72094: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72095: LD_ADDR_VAR 0 5
72099: PUSH
72100: LD_VAR 0 1
72104: PUSH
72105: LD_INT 3
72107: PLUS
72108: PUSH
72109: LD_VAR 0 2
72113: PUSH
72114: LD_INT 4
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: LIST
72121: PUSH
72122: LD_VAR 0 1
72126: PUSH
72127: LD_INT 4
72129: PLUS
72130: PUSH
72131: LD_VAR 0 2
72135: PUSH
72136: LD_INT 4
72138: PLUS
72139: PUSH
72140: LD_INT 5
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: LIST
72147: PUSH
72148: LD_VAR 0 1
72152: PUSH
72153: LD_INT 4
72155: MINUS
72156: PUSH
72157: LD_VAR 0 2
72161: PUSH
72162: LD_INT 1
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: LIST
72169: PUSH
72170: LD_VAR 0 1
72174: PUSH
72175: LD_VAR 0 2
72179: PUSH
72180: LD_INT 4
72182: MINUS
72183: PUSH
72184: LD_INT 3
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: LIST
72191: PUSH
72192: LD_VAR 0 1
72196: PUSH
72197: LD_INT 3
72199: MINUS
72200: PUSH
72201: LD_VAR 0 2
72205: PUSH
72206: LD_INT 3
72208: MINUS
72209: PUSH
72210: LD_INT 2
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: LIST
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: ST_TO_ADDR
// end ; 4 :
72225: GO 72506
72227: LD_INT 4
72229: DOUBLE
72230: EQUAL
72231: IFTRUE 72235
72233: GO 72368
72235: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72236: LD_ADDR_VAR 0 5
72240: PUSH
72241: LD_VAR 0 1
72245: PUSH
72246: LD_VAR 0 2
72250: PUSH
72251: LD_INT 4
72253: PLUS
72254: PUSH
72255: LD_INT 0
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: LIST
72262: PUSH
72263: LD_VAR 0 1
72267: PUSH
72268: LD_INT 3
72270: PLUS
72271: PUSH
72272: LD_VAR 0 2
72276: PUSH
72277: LD_INT 3
72279: PLUS
72280: PUSH
72281: LD_INT 5
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: LIST
72288: PUSH
72289: LD_VAR 0 1
72293: PUSH
72294: LD_INT 4
72296: PLUS
72297: PUSH
72298: LD_VAR 0 2
72302: PUSH
72303: LD_INT 4
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: LIST
72310: PUSH
72311: LD_VAR 0 1
72315: PUSH
72316: LD_VAR 0 2
72320: PUSH
72321: LD_INT 3
72323: MINUS
72324: PUSH
72325: LD_INT 3
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: LIST
72332: PUSH
72333: LD_VAR 0 1
72337: PUSH
72338: LD_INT 4
72340: MINUS
72341: PUSH
72342: LD_VAR 0 2
72346: PUSH
72347: LD_INT 4
72349: MINUS
72350: PUSH
72351: LD_INT 2
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: LIST
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: ST_TO_ADDR
// end ; 5 :
72366: GO 72506
72368: LD_INT 5
72370: DOUBLE
72371: EQUAL
72372: IFTRUE 72376
72374: GO 72505
72376: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72377: LD_ADDR_VAR 0 5
72381: PUSH
72382: LD_VAR 0 1
72386: PUSH
72387: LD_INT 4
72389: MINUS
72390: PUSH
72391: LD_VAR 0 2
72395: PUSH
72396: LD_INT 1
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: LIST
72403: PUSH
72404: LD_VAR 0 1
72408: PUSH
72409: LD_VAR 0 2
72413: PUSH
72414: LD_INT 4
72416: MINUS
72417: PUSH
72418: LD_INT 3
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: LIST
72425: PUSH
72426: LD_VAR 0 1
72430: PUSH
72431: LD_INT 4
72433: PLUS
72434: PUSH
72435: LD_VAR 0 2
72439: PUSH
72440: LD_INT 4
72442: PLUS
72443: PUSH
72444: LD_INT 5
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: LIST
72451: PUSH
72452: LD_VAR 0 1
72456: PUSH
72457: LD_INT 3
72459: PLUS
72460: PUSH
72461: LD_VAR 0 2
72465: PUSH
72466: LD_INT 4
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: LIST
72473: PUSH
72474: LD_VAR 0 1
72478: PUSH
72479: LD_VAR 0 2
72483: PUSH
72484: LD_INT 3
72486: PLUS
72487: PUSH
72488: LD_INT 0
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: LIST
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: ST_TO_ADDR
// end ; end ;
72503: GO 72506
72505: POP
// result := list ;
72506: LD_ADDR_VAR 0 4
72510: PUSH
72511: LD_VAR 0 5
72515: ST_TO_ADDR
// end ;
72516: LD_VAR 0 4
72520: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72521: LD_INT 0
72523: PPUSH
72524: PPUSH
72525: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72526: LD_VAR 0 1
72530: NOT
72531: PUSH
72532: LD_VAR 0 2
72536: PUSH
72537: LD_INT 1
72539: PUSH
72540: LD_INT 2
72542: PUSH
72543: LD_INT 3
72545: PUSH
72546: LD_INT 4
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: LIST
72553: LIST
72554: IN
72555: NOT
72556: OR
72557: IFFALSE 72561
// exit ;
72559: GO 72653
// tmp := [ ] ;
72561: LD_ADDR_VAR 0 5
72565: PUSH
72566: EMPTY
72567: ST_TO_ADDR
// for i in units do
72568: LD_ADDR_VAR 0 4
72572: PUSH
72573: LD_VAR 0 1
72577: PUSH
72578: FOR_IN
72579: IFFALSE 72622
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72581: LD_ADDR_VAR 0 5
72585: PUSH
72586: LD_VAR 0 5
72590: PPUSH
72591: LD_VAR 0 5
72595: PUSH
72596: LD_INT 1
72598: PLUS
72599: PPUSH
72600: LD_VAR 0 4
72604: PPUSH
72605: LD_VAR 0 2
72609: PPUSH
72610: CALL_OW 259
72614: PPUSH
72615: CALL_OW 2
72619: ST_TO_ADDR
72620: GO 72578
72622: POP
72623: POP
// if not tmp then
72624: LD_VAR 0 5
72628: NOT
72629: IFFALSE 72633
// exit ;
72631: GO 72653
// result := SortListByListDesc ( units , tmp ) ;
72633: LD_ADDR_VAR 0 3
72637: PUSH
72638: LD_VAR 0 1
72642: PPUSH
72643: LD_VAR 0 5
72647: PPUSH
72648: CALL_OW 77
72652: ST_TO_ADDR
// end ;
72653: LD_VAR 0 3
72657: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72658: LD_INT 0
72660: PPUSH
72661: PPUSH
72662: PPUSH
// result := false ;
72663: LD_ADDR_VAR 0 3
72667: PUSH
72668: LD_INT 0
72670: ST_TO_ADDR
// x := GetX ( building ) ;
72671: LD_ADDR_VAR 0 4
72675: PUSH
72676: LD_VAR 0 2
72680: PPUSH
72681: CALL_OW 250
72685: ST_TO_ADDR
// y := GetY ( building ) ;
72686: LD_ADDR_VAR 0 5
72690: PUSH
72691: LD_VAR 0 2
72695: PPUSH
72696: CALL_OW 251
72700: ST_TO_ADDR
// if not building or not x or not y then
72701: LD_VAR 0 2
72705: NOT
72706: PUSH
72707: LD_VAR 0 4
72711: NOT
72712: OR
72713: PUSH
72714: LD_VAR 0 5
72718: NOT
72719: OR
72720: IFFALSE 72724
// exit ;
72722: GO 72816
// if GetTaskList ( unit ) then
72724: LD_VAR 0 1
72728: PPUSH
72729: CALL_OW 437
72733: IFFALSE 72816
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72735: LD_STRING e
72737: PUSH
72738: LD_VAR 0 1
72742: PPUSH
72743: CALL_OW 437
72747: PUSH
72748: LD_INT 1
72750: ARRAY
72751: PUSH
72752: LD_INT 1
72754: ARRAY
72755: EQUAL
72756: PUSH
72757: LD_VAR 0 4
72761: PUSH
72762: LD_VAR 0 1
72766: PPUSH
72767: CALL_OW 437
72771: PUSH
72772: LD_INT 1
72774: ARRAY
72775: PUSH
72776: LD_INT 2
72778: ARRAY
72779: EQUAL
72780: AND
72781: PUSH
72782: LD_VAR 0 5
72786: PUSH
72787: LD_VAR 0 1
72791: PPUSH
72792: CALL_OW 437
72796: PUSH
72797: LD_INT 1
72799: ARRAY
72800: PUSH
72801: LD_INT 3
72803: ARRAY
72804: EQUAL
72805: AND
72806: IFFALSE 72816
// result := true end ;
72808: LD_ADDR_VAR 0 3
72812: PUSH
72813: LD_INT 1
72815: ST_TO_ADDR
// end ;
72816: LD_VAR 0 3
72820: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72821: LD_INT 0
72823: PPUSH
// result := false ;
72824: LD_ADDR_VAR 0 4
72828: PUSH
72829: LD_INT 0
72831: ST_TO_ADDR
// if GetTaskList ( unit ) then
72832: LD_VAR 0 1
72836: PPUSH
72837: CALL_OW 437
72841: IFFALSE 72924
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72843: LD_STRING M
72845: PUSH
72846: LD_VAR 0 1
72850: PPUSH
72851: CALL_OW 437
72855: PUSH
72856: LD_INT 1
72858: ARRAY
72859: PUSH
72860: LD_INT 1
72862: ARRAY
72863: EQUAL
72864: PUSH
72865: LD_VAR 0 2
72869: PUSH
72870: LD_VAR 0 1
72874: PPUSH
72875: CALL_OW 437
72879: PUSH
72880: LD_INT 1
72882: ARRAY
72883: PUSH
72884: LD_INT 2
72886: ARRAY
72887: EQUAL
72888: AND
72889: PUSH
72890: LD_VAR 0 3
72894: PUSH
72895: LD_VAR 0 1
72899: PPUSH
72900: CALL_OW 437
72904: PUSH
72905: LD_INT 1
72907: ARRAY
72908: PUSH
72909: LD_INT 3
72911: ARRAY
72912: EQUAL
72913: AND
72914: IFFALSE 72924
// result := true ;
72916: LD_ADDR_VAR 0 4
72920: PUSH
72921: LD_INT 1
72923: ST_TO_ADDR
// end ; end ;
72924: LD_VAR 0 4
72928: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72929: LD_INT 0
72931: PPUSH
72932: PPUSH
72933: PPUSH
72934: PPUSH
// if not unit or not area then
72935: LD_VAR 0 1
72939: NOT
72940: PUSH
72941: LD_VAR 0 2
72945: NOT
72946: OR
72947: IFFALSE 72951
// exit ;
72949: GO 73115
// tmp := AreaToList ( area , i ) ;
72951: LD_ADDR_VAR 0 6
72955: PUSH
72956: LD_VAR 0 2
72960: PPUSH
72961: LD_VAR 0 5
72965: PPUSH
72966: CALL_OW 517
72970: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72971: LD_ADDR_VAR 0 5
72975: PUSH
72976: DOUBLE
72977: LD_INT 1
72979: DEC
72980: ST_TO_ADDR
72981: LD_VAR 0 6
72985: PUSH
72986: LD_INT 1
72988: ARRAY
72989: PUSH
72990: FOR_TO
72991: IFFALSE 73113
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72993: LD_ADDR_VAR 0 7
72997: PUSH
72998: LD_VAR 0 6
73002: PUSH
73003: LD_INT 1
73005: ARRAY
73006: PUSH
73007: LD_VAR 0 5
73011: ARRAY
73012: PUSH
73013: LD_VAR 0 6
73017: PUSH
73018: LD_INT 2
73020: ARRAY
73021: PUSH
73022: LD_VAR 0 5
73026: ARRAY
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73032: LD_VAR 0 7
73036: PUSH
73037: LD_INT 1
73039: ARRAY
73040: PPUSH
73041: LD_VAR 0 7
73045: PUSH
73046: LD_INT 2
73048: ARRAY
73049: PPUSH
73050: CALL_OW 428
73054: PUSH
73055: LD_INT 0
73057: EQUAL
73058: IFFALSE 73111
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73060: LD_VAR 0 1
73064: PPUSH
73065: LD_VAR 0 7
73069: PUSH
73070: LD_INT 1
73072: ARRAY
73073: PPUSH
73074: LD_VAR 0 7
73078: PUSH
73079: LD_INT 2
73081: ARRAY
73082: PPUSH
73083: LD_VAR 0 3
73087: PPUSH
73088: CALL_OW 48
// result := IsPlaced ( unit ) ;
73092: LD_ADDR_VAR 0 4
73096: PUSH
73097: LD_VAR 0 1
73101: PPUSH
73102: CALL_OW 305
73106: ST_TO_ADDR
// exit ;
73107: POP
73108: POP
73109: GO 73115
// end ; end ;
73111: GO 72990
73113: POP
73114: POP
// end ;
73115: LD_VAR 0 4
73119: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73120: LD_INT 0
73122: PPUSH
73123: PPUSH
73124: PPUSH
// if not side or side > 8 then
73125: LD_VAR 0 1
73129: NOT
73130: PUSH
73131: LD_VAR 0 1
73135: PUSH
73136: LD_INT 8
73138: GREATER
73139: OR
73140: IFFALSE 73144
// exit ;
73142: GO 73331
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73144: LD_ADDR_VAR 0 4
73148: PUSH
73149: LD_INT 22
73151: PUSH
73152: LD_VAR 0 1
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PUSH
73161: LD_INT 21
73163: PUSH
73164: LD_INT 3
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PPUSH
73175: CALL_OW 69
73179: ST_TO_ADDR
// if not tmp then
73180: LD_VAR 0 4
73184: NOT
73185: IFFALSE 73189
// exit ;
73187: GO 73331
// enable_addtolog := true ;
73189: LD_ADDR_OWVAR 81
73193: PUSH
73194: LD_INT 1
73196: ST_TO_ADDR
// AddToLog ( [ ) ;
73197: LD_STRING [
73199: PPUSH
73200: CALL_OW 561
// for i in tmp do
73204: LD_ADDR_VAR 0 3
73208: PUSH
73209: LD_VAR 0 4
73213: PUSH
73214: FOR_IN
73215: IFFALSE 73322
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73217: LD_STRING [
73219: PUSH
73220: LD_VAR 0 3
73224: PPUSH
73225: CALL_OW 266
73229: STR
73230: PUSH
73231: LD_STRING , 
73233: STR
73234: PUSH
73235: LD_VAR 0 3
73239: PPUSH
73240: CALL_OW 250
73244: STR
73245: PUSH
73246: LD_STRING , 
73248: STR
73249: PUSH
73250: LD_VAR 0 3
73254: PPUSH
73255: CALL_OW 251
73259: STR
73260: PUSH
73261: LD_STRING , 
73263: STR
73264: PUSH
73265: LD_VAR 0 3
73269: PPUSH
73270: CALL_OW 254
73274: STR
73275: PUSH
73276: LD_STRING , 
73278: STR
73279: PUSH
73280: LD_VAR 0 3
73284: PPUSH
73285: LD_INT 1
73287: PPUSH
73288: CALL_OW 268
73292: STR
73293: PUSH
73294: LD_STRING , 
73296: STR
73297: PUSH
73298: LD_VAR 0 3
73302: PPUSH
73303: LD_INT 2
73305: PPUSH
73306: CALL_OW 268
73310: STR
73311: PUSH
73312: LD_STRING ],
73314: STR
73315: PPUSH
73316: CALL_OW 561
// end ;
73320: GO 73214
73322: POP
73323: POP
// AddToLog ( ]; ) ;
73324: LD_STRING ];
73326: PPUSH
73327: CALL_OW 561
// end ;
73331: LD_VAR 0 2
73335: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73336: LD_INT 0
73338: PPUSH
73339: PPUSH
73340: PPUSH
73341: PPUSH
73342: PPUSH
// if not area or not rate or not max then
73343: LD_VAR 0 1
73347: NOT
73348: PUSH
73349: LD_VAR 0 2
73353: NOT
73354: OR
73355: PUSH
73356: LD_VAR 0 4
73360: NOT
73361: OR
73362: IFFALSE 73366
// exit ;
73364: GO 73555
// while 1 do
73366: LD_INT 1
73368: IFFALSE 73555
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73370: LD_ADDR_VAR 0 9
73374: PUSH
73375: LD_VAR 0 1
73379: PPUSH
73380: LD_INT 1
73382: PPUSH
73383: CALL_OW 287
73387: PUSH
73388: LD_INT 10
73390: MUL
73391: ST_TO_ADDR
// r := rate / 10 ;
73392: LD_ADDR_VAR 0 7
73396: PUSH
73397: LD_VAR 0 2
73401: PUSH
73402: LD_INT 10
73404: DIVREAL
73405: ST_TO_ADDR
// time := 1 1$00 ;
73406: LD_ADDR_VAR 0 8
73410: PUSH
73411: LD_INT 2100
73413: ST_TO_ADDR
// if amount < min then
73414: LD_VAR 0 9
73418: PUSH
73419: LD_VAR 0 3
73423: LESS
73424: IFFALSE 73442
// r := r * 2 else
73426: LD_ADDR_VAR 0 7
73430: PUSH
73431: LD_VAR 0 7
73435: PUSH
73436: LD_INT 2
73438: MUL
73439: ST_TO_ADDR
73440: GO 73468
// if amount > max then
73442: LD_VAR 0 9
73446: PUSH
73447: LD_VAR 0 4
73451: GREATER
73452: IFFALSE 73468
// r := r / 2 ;
73454: LD_ADDR_VAR 0 7
73458: PUSH
73459: LD_VAR 0 7
73463: PUSH
73464: LD_INT 2
73466: DIVREAL
73467: ST_TO_ADDR
// time := time / r ;
73468: LD_ADDR_VAR 0 8
73472: PUSH
73473: LD_VAR 0 8
73477: PUSH
73478: LD_VAR 0 7
73482: DIVREAL
73483: ST_TO_ADDR
// if time < 0 then
73484: LD_VAR 0 8
73488: PUSH
73489: LD_INT 0
73491: LESS
73492: IFFALSE 73509
// time := time * - 1 ;
73494: LD_ADDR_VAR 0 8
73498: PUSH
73499: LD_VAR 0 8
73503: PUSH
73504: LD_INT 1
73506: NEG
73507: MUL
73508: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73509: LD_VAR 0 8
73513: PUSH
73514: LD_INT 35
73516: PPUSH
73517: LD_INT 875
73519: PPUSH
73520: CALL_OW 12
73524: PLUS
73525: PPUSH
73526: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73530: LD_INT 1
73532: PPUSH
73533: LD_INT 5
73535: PPUSH
73536: CALL_OW 12
73540: PPUSH
73541: LD_VAR 0 1
73545: PPUSH
73546: LD_INT 1
73548: PPUSH
73549: CALL_OW 55
// end ;
73553: GO 73366
// end ;
73555: LD_VAR 0 5
73559: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73560: LD_INT 0
73562: PPUSH
73563: PPUSH
73564: PPUSH
73565: PPUSH
73566: PPUSH
73567: PPUSH
73568: PPUSH
73569: PPUSH
// if not turrets or not factories then
73570: LD_VAR 0 1
73574: NOT
73575: PUSH
73576: LD_VAR 0 2
73580: NOT
73581: OR
73582: IFFALSE 73586
// exit ;
73584: GO 73893
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73586: LD_ADDR_VAR 0 10
73590: PUSH
73591: LD_INT 5
73593: PUSH
73594: LD_INT 6
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: LD_INT 2
73603: PUSH
73604: LD_INT 4
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: LD_INT 3
73613: PUSH
73614: LD_INT 5
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 24
73628: PUSH
73629: LD_INT 25
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PUSH
73636: LD_INT 23
73638: PUSH
73639: LD_INT 27
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 42
73652: PUSH
73653: LD_INT 43
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_INT 44
73662: PUSH
73663: LD_INT 46
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: LD_INT 45
73672: PUSH
73673: LD_INT 47
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: LIST
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: LIST
73689: ST_TO_ADDR
// result := [ ] ;
73690: LD_ADDR_VAR 0 3
73694: PUSH
73695: EMPTY
73696: ST_TO_ADDR
// for i in turrets do
73697: LD_ADDR_VAR 0 4
73701: PUSH
73702: LD_VAR 0 1
73706: PUSH
73707: FOR_IN
73708: IFFALSE 73891
// begin nat := GetNation ( i ) ;
73710: LD_ADDR_VAR 0 7
73714: PUSH
73715: LD_VAR 0 4
73719: PPUSH
73720: CALL_OW 248
73724: ST_TO_ADDR
// weapon := 0 ;
73725: LD_ADDR_VAR 0 8
73729: PUSH
73730: LD_INT 0
73732: ST_TO_ADDR
// if not nat then
73733: LD_VAR 0 7
73737: NOT
73738: IFFALSE 73742
// continue ;
73740: GO 73707
// for j in list [ nat ] do
73742: LD_ADDR_VAR 0 5
73746: PUSH
73747: LD_VAR 0 10
73751: PUSH
73752: LD_VAR 0 7
73756: ARRAY
73757: PUSH
73758: FOR_IN
73759: IFFALSE 73800
// if GetBWeapon ( i ) = j [ 1 ] then
73761: LD_VAR 0 4
73765: PPUSH
73766: CALL_OW 269
73770: PUSH
73771: LD_VAR 0 5
73775: PUSH
73776: LD_INT 1
73778: ARRAY
73779: EQUAL
73780: IFFALSE 73798
// begin weapon := j [ 2 ] ;
73782: LD_ADDR_VAR 0 8
73786: PUSH
73787: LD_VAR 0 5
73791: PUSH
73792: LD_INT 2
73794: ARRAY
73795: ST_TO_ADDR
// break ;
73796: GO 73800
// end ;
73798: GO 73758
73800: POP
73801: POP
// if not weapon then
73802: LD_VAR 0 8
73806: NOT
73807: IFFALSE 73811
// continue ;
73809: GO 73707
// for k in factories do
73811: LD_ADDR_VAR 0 6
73815: PUSH
73816: LD_VAR 0 2
73820: PUSH
73821: FOR_IN
73822: IFFALSE 73887
// begin weapons := AvailableWeaponList ( k ) ;
73824: LD_ADDR_VAR 0 9
73828: PUSH
73829: LD_VAR 0 6
73833: PPUSH
73834: CALL_OW 478
73838: ST_TO_ADDR
// if not weapons then
73839: LD_VAR 0 9
73843: NOT
73844: IFFALSE 73848
// continue ;
73846: GO 73821
// if weapon in weapons then
73848: LD_VAR 0 8
73852: PUSH
73853: LD_VAR 0 9
73857: IN
73858: IFFALSE 73885
// begin result := [ i , weapon ] ;
73860: LD_ADDR_VAR 0 3
73864: PUSH
73865: LD_VAR 0 4
73869: PUSH
73870: LD_VAR 0 8
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: ST_TO_ADDR
// exit ;
73879: POP
73880: POP
73881: POP
73882: POP
73883: GO 73893
// end ; end ;
73885: GO 73821
73887: POP
73888: POP
// end ;
73889: GO 73707
73891: POP
73892: POP
// end ;
73893: LD_VAR 0 3
73897: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73898: LD_INT 0
73900: PPUSH
// if not side or side > 8 then
73901: LD_VAR 0 3
73905: NOT
73906: PUSH
73907: LD_VAR 0 3
73911: PUSH
73912: LD_INT 8
73914: GREATER
73915: OR
73916: IFFALSE 73920
// exit ;
73918: GO 73979
// if not range then
73920: LD_VAR 0 4
73924: NOT
73925: IFFALSE 73936
// range := - 12 ;
73927: LD_ADDR_VAR 0 4
73931: PUSH
73932: LD_INT 12
73934: NEG
73935: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73936: LD_VAR 0 1
73940: PPUSH
73941: LD_VAR 0 2
73945: PPUSH
73946: LD_VAR 0 3
73950: PPUSH
73951: LD_VAR 0 4
73955: PPUSH
73956: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73960: LD_VAR 0 1
73964: PPUSH
73965: LD_VAR 0 2
73969: PPUSH
73970: LD_VAR 0 3
73974: PPUSH
73975: CALL_OW 331
// end ;
73979: LD_VAR 0 5
73983: RET
// export function Video ( mode ) ; begin
73984: LD_INT 0
73986: PPUSH
// ingame_video = mode ;
73987: LD_ADDR_OWVAR 52
73991: PUSH
73992: LD_VAR 0 1
73996: ST_TO_ADDR
// interface_hidden = mode ;
73997: LD_ADDR_OWVAR 54
74001: PUSH
74002: LD_VAR 0 1
74006: ST_TO_ADDR
// end ;
74007: LD_VAR 0 2
74011: RET
// export function Join ( array , element ) ; begin
74012: LD_INT 0
74014: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74015: LD_ADDR_VAR 0 3
74019: PUSH
74020: LD_VAR 0 1
74024: PPUSH
74025: LD_VAR 0 1
74029: PUSH
74030: LD_INT 1
74032: PLUS
74033: PPUSH
74034: LD_VAR 0 2
74038: PPUSH
74039: CALL_OW 1
74043: ST_TO_ADDR
// end ;
74044: LD_VAR 0 3
74048: RET
// export function JoinUnion ( array , element ) ; begin
74049: LD_INT 0
74051: PPUSH
// result := array union element ;
74052: LD_ADDR_VAR 0 3
74056: PUSH
74057: LD_VAR 0 1
74061: PUSH
74062: LD_VAR 0 2
74066: UNION
74067: ST_TO_ADDR
// end ;
74068: LD_VAR 0 3
74072: RET
// export function GetBehemoths ( side ) ; begin
74073: LD_INT 0
74075: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74076: LD_ADDR_VAR 0 2
74080: PUSH
74081: LD_INT 22
74083: PUSH
74084: LD_VAR 0 1
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: LD_INT 31
74095: PUSH
74096: LD_INT 25
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PPUSH
74107: CALL_OW 69
74111: ST_TO_ADDR
// end ;
74112: LD_VAR 0 2
74116: RET
// export function Shuffle ( array ) ; var i , index ; begin
74117: LD_INT 0
74119: PPUSH
74120: PPUSH
74121: PPUSH
// result := [ ] ;
74122: LD_ADDR_VAR 0 2
74126: PUSH
74127: EMPTY
74128: ST_TO_ADDR
// if not array then
74129: LD_VAR 0 1
74133: NOT
74134: IFFALSE 74138
// exit ;
74136: GO 74237
// Randomize ;
74138: CALL_OW 10
// for i = array downto 1 do
74142: LD_ADDR_VAR 0 3
74146: PUSH
74147: DOUBLE
74148: LD_VAR 0 1
74152: INC
74153: ST_TO_ADDR
74154: LD_INT 1
74156: PUSH
74157: FOR_DOWNTO
74158: IFFALSE 74235
// begin index := rand ( 1 , array ) ;
74160: LD_ADDR_VAR 0 4
74164: PUSH
74165: LD_INT 1
74167: PPUSH
74168: LD_VAR 0 1
74172: PPUSH
74173: CALL_OW 12
74177: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74178: LD_ADDR_VAR 0 2
74182: PUSH
74183: LD_VAR 0 2
74187: PPUSH
74188: LD_VAR 0 2
74192: PUSH
74193: LD_INT 1
74195: PLUS
74196: PPUSH
74197: LD_VAR 0 1
74201: PUSH
74202: LD_VAR 0 4
74206: ARRAY
74207: PPUSH
74208: CALL_OW 2
74212: ST_TO_ADDR
// array := Delete ( array , index ) ;
74213: LD_ADDR_VAR 0 1
74217: PUSH
74218: LD_VAR 0 1
74222: PPUSH
74223: LD_VAR 0 4
74227: PPUSH
74228: CALL_OW 3
74232: ST_TO_ADDR
// end ;
74233: GO 74157
74235: POP
74236: POP
// end ;
74237: LD_VAR 0 2
74241: RET
// export function GetBaseMaterials ( base ) ; begin
74242: LD_INT 0
74244: PPUSH
// result := [ 0 , 0 , 0 ] ;
74245: LD_ADDR_VAR 0 2
74249: PUSH
74250: LD_INT 0
74252: PUSH
74253: LD_INT 0
74255: PUSH
74256: LD_INT 0
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: LIST
74263: ST_TO_ADDR
// if not base then
74264: LD_VAR 0 1
74268: NOT
74269: IFFALSE 74273
// exit ;
74271: GO 74322
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74273: LD_ADDR_VAR 0 2
74277: PUSH
74278: LD_VAR 0 1
74282: PPUSH
74283: LD_INT 1
74285: PPUSH
74286: CALL_OW 275
74290: PUSH
74291: LD_VAR 0 1
74295: PPUSH
74296: LD_INT 2
74298: PPUSH
74299: CALL_OW 275
74303: PUSH
74304: LD_VAR 0 1
74308: PPUSH
74309: LD_INT 3
74311: PPUSH
74312: CALL_OW 275
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: LIST
74321: ST_TO_ADDR
// end ;
74322: LD_VAR 0 2
74326: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74327: LD_INT 0
74329: PPUSH
74330: PPUSH
// result := array ;
74331: LD_ADDR_VAR 0 3
74335: PUSH
74336: LD_VAR 0 1
74340: ST_TO_ADDR
// if size > 0 then
74341: LD_VAR 0 2
74345: PUSH
74346: LD_INT 0
74348: GREATER
74349: IFFALSE 74395
// for i := array downto size do
74351: LD_ADDR_VAR 0 4
74355: PUSH
74356: DOUBLE
74357: LD_VAR 0 1
74361: INC
74362: ST_TO_ADDR
74363: LD_VAR 0 2
74367: PUSH
74368: FOR_DOWNTO
74369: IFFALSE 74393
// result := Delete ( result , result ) ;
74371: LD_ADDR_VAR 0 3
74375: PUSH
74376: LD_VAR 0 3
74380: PPUSH
74381: LD_VAR 0 3
74385: PPUSH
74386: CALL_OW 3
74390: ST_TO_ADDR
74391: GO 74368
74393: POP
74394: POP
// end ;
74395: LD_VAR 0 3
74399: RET
// export function ComExit ( unit ) ; var tmp ; begin
74400: LD_INT 0
74402: PPUSH
74403: PPUSH
// if not IsInUnit ( unit ) then
74404: LD_VAR 0 1
74408: PPUSH
74409: CALL_OW 310
74413: NOT
74414: IFFALSE 74418
// exit ;
74416: GO 74478
// tmp := IsInUnit ( unit ) ;
74418: LD_ADDR_VAR 0 3
74422: PUSH
74423: LD_VAR 0 1
74427: PPUSH
74428: CALL_OW 310
74432: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74433: LD_VAR 0 3
74437: PPUSH
74438: CALL_OW 247
74442: PUSH
74443: LD_INT 2
74445: EQUAL
74446: IFFALSE 74459
// ComExitVehicle ( unit ) else
74448: LD_VAR 0 1
74452: PPUSH
74453: CALL_OW 121
74457: GO 74468
// ComExitBuilding ( unit ) ;
74459: LD_VAR 0 1
74463: PPUSH
74464: CALL_OW 122
// result := tmp ;
74468: LD_ADDR_VAR 0 2
74472: PUSH
74473: LD_VAR 0 3
74477: ST_TO_ADDR
// end ;
74478: LD_VAR 0 2
74482: RET
// export function ComExitAll ( units ) ; var i ; begin
74483: LD_INT 0
74485: PPUSH
74486: PPUSH
// if not units then
74487: LD_VAR 0 1
74491: NOT
74492: IFFALSE 74496
// exit ;
74494: GO 74522
// for i in units do
74496: LD_ADDR_VAR 0 3
74500: PUSH
74501: LD_VAR 0 1
74505: PUSH
74506: FOR_IN
74507: IFFALSE 74520
// ComExit ( i ) ;
74509: LD_VAR 0 3
74513: PPUSH
74514: CALL 74400 0 1
74518: GO 74506
74520: POP
74521: POP
// end ;
74522: LD_VAR 0 2
74526: RET
// export function ResetHc ; begin
74527: LD_INT 0
74529: PPUSH
// InitHc ;
74530: CALL_OW 19
// hc_importance := 0 ;
74534: LD_ADDR_OWVAR 32
74538: PUSH
74539: LD_INT 0
74541: ST_TO_ADDR
// end ;
74542: LD_VAR 0 1
74546: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74547: LD_INT 0
74549: PPUSH
74550: PPUSH
74551: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74552: LD_ADDR_VAR 0 6
74556: PUSH
74557: LD_VAR 0 1
74561: PUSH
74562: LD_VAR 0 3
74566: PLUS
74567: PUSH
74568: LD_INT 2
74570: DIV
74571: ST_TO_ADDR
// if _x < 0 then
74572: LD_VAR 0 6
74576: PUSH
74577: LD_INT 0
74579: LESS
74580: IFFALSE 74597
// _x := _x * - 1 ;
74582: LD_ADDR_VAR 0 6
74586: PUSH
74587: LD_VAR 0 6
74591: PUSH
74592: LD_INT 1
74594: NEG
74595: MUL
74596: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74597: LD_ADDR_VAR 0 7
74601: PUSH
74602: LD_VAR 0 2
74606: PUSH
74607: LD_VAR 0 4
74611: PLUS
74612: PUSH
74613: LD_INT 2
74615: DIV
74616: ST_TO_ADDR
// if _y < 0 then
74617: LD_VAR 0 7
74621: PUSH
74622: LD_INT 0
74624: LESS
74625: IFFALSE 74642
// _y := _y * - 1 ;
74627: LD_ADDR_VAR 0 7
74631: PUSH
74632: LD_VAR 0 7
74636: PUSH
74637: LD_INT 1
74639: NEG
74640: MUL
74641: ST_TO_ADDR
// result := [ _x , _y ] ;
74642: LD_ADDR_VAR 0 5
74646: PUSH
74647: LD_VAR 0 6
74651: PUSH
74652: LD_VAR 0 7
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: ST_TO_ADDR
// end ;
74661: LD_VAR 0 5
74665: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74666: LD_INT 0
74668: PPUSH
74669: PPUSH
74670: PPUSH
74671: PPUSH
// task := GetTaskList ( unit ) ;
74672: LD_ADDR_VAR 0 7
74676: PUSH
74677: LD_VAR 0 1
74681: PPUSH
74682: CALL_OW 437
74686: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74687: LD_VAR 0 7
74691: NOT
74692: PUSH
74693: LD_VAR 0 1
74697: PPUSH
74698: LD_VAR 0 2
74702: PPUSH
74703: CALL_OW 308
74707: NOT
74708: AND
74709: IFFALSE 74713
// exit ;
74711: GO 74831
// if IsInArea ( unit , area ) then
74713: LD_VAR 0 1
74717: PPUSH
74718: LD_VAR 0 2
74722: PPUSH
74723: CALL_OW 308
74727: IFFALSE 74745
// begin ComMoveToArea ( unit , goAway ) ;
74729: LD_VAR 0 1
74733: PPUSH
74734: LD_VAR 0 3
74738: PPUSH
74739: CALL_OW 113
// exit ;
74743: GO 74831
// end ; if task [ 1 ] [ 1 ] <> M then
74745: LD_VAR 0 7
74749: PUSH
74750: LD_INT 1
74752: ARRAY
74753: PUSH
74754: LD_INT 1
74756: ARRAY
74757: PUSH
74758: LD_STRING M
74760: NONEQUAL
74761: IFFALSE 74765
// exit ;
74763: GO 74831
// x := task [ 1 ] [ 2 ] ;
74765: LD_ADDR_VAR 0 5
74769: PUSH
74770: LD_VAR 0 7
74774: PUSH
74775: LD_INT 1
74777: ARRAY
74778: PUSH
74779: LD_INT 2
74781: ARRAY
74782: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74783: LD_ADDR_VAR 0 6
74787: PUSH
74788: LD_VAR 0 7
74792: PUSH
74793: LD_INT 1
74795: ARRAY
74796: PUSH
74797: LD_INT 3
74799: ARRAY
74800: ST_TO_ADDR
// if InArea ( x , y , area ) then
74801: LD_VAR 0 5
74805: PPUSH
74806: LD_VAR 0 6
74810: PPUSH
74811: LD_VAR 0 2
74815: PPUSH
74816: CALL_OW 309
74820: IFFALSE 74831
// ComStop ( unit ) ;
74822: LD_VAR 0 1
74826: PPUSH
74827: CALL_OW 141
// end ;
74831: LD_VAR 0 4
74835: RET
// export function Abs ( value ) ; begin
74836: LD_INT 0
74838: PPUSH
// result := value ;
74839: LD_ADDR_VAR 0 2
74843: PUSH
74844: LD_VAR 0 1
74848: ST_TO_ADDR
// if value < 0 then
74849: LD_VAR 0 1
74853: PUSH
74854: LD_INT 0
74856: LESS
74857: IFFALSE 74874
// result := value * - 1 ;
74859: LD_ADDR_VAR 0 2
74863: PUSH
74864: LD_VAR 0 1
74868: PUSH
74869: LD_INT 1
74871: NEG
74872: MUL
74873: ST_TO_ADDR
// end ;
74874: LD_VAR 0 2
74878: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74879: LD_INT 0
74881: PPUSH
74882: PPUSH
74883: PPUSH
74884: PPUSH
74885: PPUSH
74886: PPUSH
74887: PPUSH
74888: PPUSH
// if not unit or not building then
74889: LD_VAR 0 1
74893: NOT
74894: PUSH
74895: LD_VAR 0 2
74899: NOT
74900: OR
74901: IFFALSE 74905
// exit ;
74903: GO 75131
// x := GetX ( building ) ;
74905: LD_ADDR_VAR 0 4
74909: PUSH
74910: LD_VAR 0 2
74914: PPUSH
74915: CALL_OW 250
74919: ST_TO_ADDR
// y := GetY ( building ) ;
74920: LD_ADDR_VAR 0 6
74924: PUSH
74925: LD_VAR 0 2
74929: PPUSH
74930: CALL_OW 251
74934: ST_TO_ADDR
// d := GetDir ( building ) ;
74935: LD_ADDR_VAR 0 8
74939: PUSH
74940: LD_VAR 0 2
74944: PPUSH
74945: CALL_OW 254
74949: ST_TO_ADDR
// r := 4 ;
74950: LD_ADDR_VAR 0 9
74954: PUSH
74955: LD_INT 4
74957: ST_TO_ADDR
// for i := 1 to 5 do
74958: LD_ADDR_VAR 0 10
74962: PUSH
74963: DOUBLE
74964: LD_INT 1
74966: DEC
74967: ST_TO_ADDR
74968: LD_INT 5
74970: PUSH
74971: FOR_TO
74972: IFFALSE 75129
// begin _x := ShiftX ( x , d , r + i ) ;
74974: LD_ADDR_VAR 0 5
74978: PUSH
74979: LD_VAR 0 4
74983: PPUSH
74984: LD_VAR 0 8
74988: PPUSH
74989: LD_VAR 0 9
74993: PUSH
74994: LD_VAR 0 10
74998: PLUS
74999: PPUSH
75000: CALL_OW 272
75004: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75005: LD_ADDR_VAR 0 7
75009: PUSH
75010: LD_VAR 0 6
75014: PPUSH
75015: LD_VAR 0 8
75019: PPUSH
75020: LD_VAR 0 9
75024: PUSH
75025: LD_VAR 0 10
75029: PLUS
75030: PPUSH
75031: CALL_OW 273
75035: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75036: LD_VAR 0 5
75040: PPUSH
75041: LD_VAR 0 7
75045: PPUSH
75046: CALL_OW 488
75050: PUSH
75051: LD_VAR 0 5
75055: PPUSH
75056: LD_VAR 0 7
75060: PPUSH
75061: CALL_OW 428
75065: PPUSH
75066: CALL_OW 247
75070: PUSH
75071: LD_INT 3
75073: PUSH
75074: LD_INT 2
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: IN
75081: NOT
75082: AND
75083: IFFALSE 75127
// begin ComMoveXY ( unit , _x , _y ) ;
75085: LD_VAR 0 1
75089: PPUSH
75090: LD_VAR 0 5
75094: PPUSH
75095: LD_VAR 0 7
75099: PPUSH
75100: CALL_OW 111
// result := [ _x , _y ] ;
75104: LD_ADDR_VAR 0 3
75108: PUSH
75109: LD_VAR 0 5
75113: PUSH
75114: LD_VAR 0 7
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: ST_TO_ADDR
// exit ;
75123: POP
75124: POP
75125: GO 75131
// end ; end ;
75127: GO 74971
75129: POP
75130: POP
// end ;
75131: LD_VAR 0 3
75135: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75136: LD_INT 0
75138: PPUSH
75139: PPUSH
75140: PPUSH
// result := 0 ;
75141: LD_ADDR_VAR 0 3
75145: PUSH
75146: LD_INT 0
75148: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75149: LD_VAR 0 1
75153: PUSH
75154: LD_INT 0
75156: LESS
75157: PUSH
75158: LD_VAR 0 1
75162: PUSH
75163: LD_INT 8
75165: GREATER
75166: OR
75167: PUSH
75168: LD_VAR 0 2
75172: PUSH
75173: LD_INT 0
75175: LESS
75176: OR
75177: PUSH
75178: LD_VAR 0 2
75182: PUSH
75183: LD_INT 8
75185: GREATER
75186: OR
75187: IFFALSE 75191
// exit ;
75189: GO 75266
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75191: LD_ADDR_VAR 0 4
75195: PUSH
75196: LD_INT 22
75198: PUSH
75199: LD_VAR 0 2
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: PPUSH
75208: CALL_OW 69
75212: PUSH
75213: FOR_IN
75214: IFFALSE 75264
// begin un := UnitShoot ( i ) ;
75216: LD_ADDR_VAR 0 5
75220: PUSH
75221: LD_VAR 0 4
75225: PPUSH
75226: CALL_OW 504
75230: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75231: LD_VAR 0 5
75235: PPUSH
75236: CALL_OW 255
75240: PUSH
75241: LD_VAR 0 1
75245: EQUAL
75246: IFFALSE 75262
// begin result := un ;
75248: LD_ADDR_VAR 0 3
75252: PUSH
75253: LD_VAR 0 5
75257: ST_TO_ADDR
// exit ;
75258: POP
75259: POP
75260: GO 75266
// end ; end ;
75262: GO 75213
75264: POP
75265: POP
// end ;
75266: LD_VAR 0 3
75270: RET
// export function GetCargoBay ( units ) ; begin
75271: LD_INT 0
75273: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75274: LD_ADDR_VAR 0 2
75278: PUSH
75279: LD_VAR 0 1
75283: PPUSH
75284: LD_INT 2
75286: PUSH
75287: LD_INT 34
75289: PUSH
75290: LD_INT 12
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: LD_INT 34
75299: PUSH
75300: LD_INT 51
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 34
75309: PUSH
75310: LD_INT 32
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 34
75319: PUSH
75320: LD_EXP 33
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: PPUSH
75336: CALL_OW 72
75340: ST_TO_ADDR
// end ;
75341: LD_VAR 0 2
75345: RET
// export function Negate ( value ) ; begin
75346: LD_INT 0
75348: PPUSH
// result := not value ;
75349: LD_ADDR_VAR 0 2
75353: PUSH
75354: LD_VAR 0 1
75358: NOT
75359: ST_TO_ADDR
// end ;
75360: LD_VAR 0 2
75364: RET
// export function Inc ( value ) ; begin
75365: LD_INT 0
75367: PPUSH
// result := value + 1 ;
75368: LD_ADDR_VAR 0 2
75372: PUSH
75373: LD_VAR 0 1
75377: PUSH
75378: LD_INT 1
75380: PLUS
75381: ST_TO_ADDR
// end ;
75382: LD_VAR 0 2
75386: RET
// export function Dec ( value ) ; begin
75387: LD_INT 0
75389: PPUSH
// result := value - 1 ;
75390: LD_ADDR_VAR 0 2
75394: PUSH
75395: LD_VAR 0 1
75399: PUSH
75400: LD_INT 1
75402: MINUS
75403: ST_TO_ADDR
// end ;
75404: LD_VAR 0 2
75408: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75409: LD_INT 0
75411: PPUSH
75412: PPUSH
75413: PPUSH
75414: PPUSH
75415: PPUSH
75416: PPUSH
75417: PPUSH
75418: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75419: LD_VAR 0 1
75423: PPUSH
75424: LD_VAR 0 2
75428: PPUSH
75429: CALL_OW 488
75433: NOT
75434: PUSH
75435: LD_VAR 0 3
75439: PPUSH
75440: LD_VAR 0 4
75444: PPUSH
75445: CALL_OW 488
75449: NOT
75450: OR
75451: IFFALSE 75464
// begin result := - 1 ;
75453: LD_ADDR_VAR 0 5
75457: PUSH
75458: LD_INT 1
75460: NEG
75461: ST_TO_ADDR
// exit ;
75462: GO 75699
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75464: LD_ADDR_VAR 0 12
75468: PUSH
75469: LD_VAR 0 1
75473: PPUSH
75474: LD_VAR 0 2
75478: PPUSH
75479: LD_VAR 0 3
75483: PPUSH
75484: LD_VAR 0 4
75488: PPUSH
75489: CALL 74547 0 4
75493: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75494: LD_ADDR_VAR 0 11
75498: PUSH
75499: LD_VAR 0 1
75503: PPUSH
75504: LD_VAR 0 2
75508: PPUSH
75509: LD_VAR 0 12
75513: PUSH
75514: LD_INT 1
75516: ARRAY
75517: PPUSH
75518: LD_VAR 0 12
75522: PUSH
75523: LD_INT 2
75525: ARRAY
75526: PPUSH
75527: CALL_OW 298
75531: ST_TO_ADDR
// distance := 9999 ;
75532: LD_ADDR_VAR 0 10
75536: PUSH
75537: LD_INT 9999
75539: ST_TO_ADDR
// for i := 0 to 5 do
75540: LD_ADDR_VAR 0 6
75544: PUSH
75545: DOUBLE
75546: LD_INT 0
75548: DEC
75549: ST_TO_ADDR
75550: LD_INT 5
75552: PUSH
75553: FOR_TO
75554: IFFALSE 75697
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75556: LD_ADDR_VAR 0 7
75560: PUSH
75561: LD_VAR 0 1
75565: PPUSH
75566: LD_VAR 0 6
75570: PPUSH
75571: LD_VAR 0 11
75575: PPUSH
75576: CALL_OW 272
75580: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75581: LD_ADDR_VAR 0 8
75585: PUSH
75586: LD_VAR 0 2
75590: PPUSH
75591: LD_VAR 0 6
75595: PPUSH
75596: LD_VAR 0 11
75600: PPUSH
75601: CALL_OW 273
75605: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75606: LD_VAR 0 7
75610: PPUSH
75611: LD_VAR 0 8
75615: PPUSH
75616: CALL_OW 488
75620: NOT
75621: IFFALSE 75625
// continue ;
75623: GO 75553
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75625: LD_ADDR_VAR 0 9
75629: PUSH
75630: LD_VAR 0 12
75634: PUSH
75635: LD_INT 1
75637: ARRAY
75638: PPUSH
75639: LD_VAR 0 12
75643: PUSH
75644: LD_INT 2
75646: ARRAY
75647: PPUSH
75648: LD_VAR 0 7
75652: PPUSH
75653: LD_VAR 0 8
75657: PPUSH
75658: CALL_OW 298
75662: ST_TO_ADDR
// if tmp < distance then
75663: LD_VAR 0 9
75667: PUSH
75668: LD_VAR 0 10
75672: LESS
75673: IFFALSE 75695
// begin result := i ;
75675: LD_ADDR_VAR 0 5
75679: PUSH
75680: LD_VAR 0 6
75684: ST_TO_ADDR
// distance := tmp ;
75685: LD_ADDR_VAR 0 10
75689: PUSH
75690: LD_VAR 0 9
75694: ST_TO_ADDR
// end ; end ;
75695: GO 75553
75697: POP
75698: POP
// end ;
75699: LD_VAR 0 5
75703: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75704: LD_INT 0
75706: PPUSH
75707: PPUSH
// if not driver or not IsInUnit ( driver ) then
75708: LD_VAR 0 1
75712: NOT
75713: PUSH
75714: LD_VAR 0 1
75718: PPUSH
75719: CALL_OW 310
75723: NOT
75724: OR
75725: IFFALSE 75729
// exit ;
75727: GO 75819
// vehicle := IsInUnit ( driver ) ;
75729: LD_ADDR_VAR 0 3
75733: PUSH
75734: LD_VAR 0 1
75738: PPUSH
75739: CALL_OW 310
75743: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75744: LD_VAR 0 1
75748: PPUSH
75749: LD_STRING \
75751: PUSH
75752: LD_INT 0
75754: PUSH
75755: LD_INT 0
75757: PUSH
75758: LD_INT 0
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: LD_INT 0
75766: PUSH
75767: LD_INT 0
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: LIST
75774: LIST
75775: LIST
75776: LIST
75777: LIST
75778: PUSH
75779: LD_STRING E
75781: PUSH
75782: LD_INT 0
75784: PUSH
75785: LD_INT 0
75787: PUSH
75788: LD_VAR 0 3
75792: PUSH
75793: LD_INT 0
75795: PUSH
75796: LD_INT 0
75798: PUSH
75799: LD_INT 0
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: LIST
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PPUSH
75815: CALL_OW 446
// end ;
75819: LD_VAR 0 2
75823: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75824: LD_INT 0
75826: PPUSH
75827: PPUSH
// if not driver or not IsInUnit ( driver ) then
75828: LD_VAR 0 1
75832: NOT
75833: PUSH
75834: LD_VAR 0 1
75838: PPUSH
75839: CALL_OW 310
75843: NOT
75844: OR
75845: IFFALSE 75849
// exit ;
75847: GO 75939
// vehicle := IsInUnit ( driver ) ;
75849: LD_ADDR_VAR 0 3
75853: PUSH
75854: LD_VAR 0 1
75858: PPUSH
75859: CALL_OW 310
75863: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75864: LD_VAR 0 1
75868: PPUSH
75869: LD_STRING \
75871: PUSH
75872: LD_INT 0
75874: PUSH
75875: LD_INT 0
75877: PUSH
75878: LD_INT 0
75880: PUSH
75881: LD_INT 0
75883: PUSH
75884: LD_INT 0
75886: PUSH
75887: LD_INT 0
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: PUSH
75899: LD_STRING E
75901: PUSH
75902: LD_INT 0
75904: PUSH
75905: LD_INT 0
75907: PUSH
75908: LD_VAR 0 3
75912: PUSH
75913: LD_INT 0
75915: PUSH
75916: LD_INT 0
75918: PUSH
75919: LD_INT 0
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PPUSH
75935: CALL_OW 447
// end ;
75939: LD_VAR 0 2
75943: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75944: LD_INT 0
75946: PPUSH
75947: PPUSH
75948: PPUSH
// tmp := [ ] ;
75949: LD_ADDR_VAR 0 5
75953: PUSH
75954: EMPTY
75955: ST_TO_ADDR
// for i in units do
75956: LD_ADDR_VAR 0 4
75960: PUSH
75961: LD_VAR 0 1
75965: PUSH
75966: FOR_IN
75967: IFFALSE 76005
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75969: LD_ADDR_VAR 0 5
75973: PUSH
75974: LD_VAR 0 5
75978: PPUSH
75979: LD_VAR 0 5
75983: PUSH
75984: LD_INT 1
75986: PLUS
75987: PPUSH
75988: LD_VAR 0 4
75992: PPUSH
75993: CALL_OW 256
75997: PPUSH
75998: CALL_OW 2
76002: ST_TO_ADDR
76003: GO 75966
76005: POP
76006: POP
// if not tmp then
76007: LD_VAR 0 5
76011: NOT
76012: IFFALSE 76016
// exit ;
76014: GO 76064
// if asc then
76016: LD_VAR 0 2
76020: IFFALSE 76044
// result := SortListByListAsc ( units , tmp ) else
76022: LD_ADDR_VAR 0 3
76026: PUSH
76027: LD_VAR 0 1
76031: PPUSH
76032: LD_VAR 0 5
76036: PPUSH
76037: CALL_OW 76
76041: ST_TO_ADDR
76042: GO 76064
// result := SortListByListDesc ( units , tmp ) ;
76044: LD_ADDR_VAR 0 3
76048: PUSH
76049: LD_VAR 0 1
76053: PPUSH
76054: LD_VAR 0 5
76058: PPUSH
76059: CALL_OW 77
76063: ST_TO_ADDR
// end ;
76064: LD_VAR 0 3
76068: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76069: LD_INT 0
76071: PPUSH
76072: PPUSH
// task := GetTaskList ( mech ) ;
76073: LD_ADDR_VAR 0 4
76077: PUSH
76078: LD_VAR 0 1
76082: PPUSH
76083: CALL_OW 437
76087: ST_TO_ADDR
// if not task then
76088: LD_VAR 0 4
76092: NOT
76093: IFFALSE 76097
// exit ;
76095: GO 76139
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76097: LD_ADDR_VAR 0 3
76101: PUSH
76102: LD_VAR 0 4
76106: PUSH
76107: LD_INT 1
76109: ARRAY
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PUSH
76115: LD_STRING r
76117: EQUAL
76118: PUSH
76119: LD_VAR 0 4
76123: PUSH
76124: LD_INT 1
76126: ARRAY
76127: PUSH
76128: LD_INT 4
76130: ARRAY
76131: PUSH
76132: LD_VAR 0 2
76136: EQUAL
76137: AND
76138: ST_TO_ADDR
// end ;
76139: LD_VAR 0 3
76143: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76144: LD_INT 0
76146: PPUSH
// SetDir ( unit , d ) ;
76147: LD_VAR 0 1
76151: PPUSH
76152: LD_VAR 0 4
76156: PPUSH
76157: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76161: LD_VAR 0 1
76165: PPUSH
76166: LD_VAR 0 2
76170: PPUSH
76171: LD_VAR 0 3
76175: PPUSH
76176: LD_VAR 0 5
76180: PPUSH
76181: CALL_OW 48
// end ;
76185: LD_VAR 0 6
76189: RET
// export function ToNaturalNumber ( number ) ; begin
76190: LD_INT 0
76192: PPUSH
// result := number div 1 ;
76193: LD_ADDR_VAR 0 2
76197: PUSH
76198: LD_VAR 0 1
76202: PUSH
76203: LD_INT 1
76205: DIV
76206: ST_TO_ADDR
// if number < 0 then
76207: LD_VAR 0 1
76211: PUSH
76212: LD_INT 0
76214: LESS
76215: IFFALSE 76225
// result := 0 ;
76217: LD_ADDR_VAR 0 2
76221: PUSH
76222: LD_INT 0
76224: ST_TO_ADDR
// end ;
76225: LD_VAR 0 2
76229: RET
// export function SortByClass ( units , class ) ; var un ; begin
76230: LD_INT 0
76232: PPUSH
76233: PPUSH
// if not units or not class then
76234: LD_VAR 0 1
76238: NOT
76239: PUSH
76240: LD_VAR 0 2
76244: NOT
76245: OR
76246: IFFALSE 76250
// exit ;
76248: GO 76345
// result := [ ] ;
76250: LD_ADDR_VAR 0 3
76254: PUSH
76255: EMPTY
76256: ST_TO_ADDR
// for un in units do
76257: LD_ADDR_VAR 0 4
76261: PUSH
76262: LD_VAR 0 1
76266: PUSH
76267: FOR_IN
76268: IFFALSE 76343
// if GetClass ( un ) = class then
76270: LD_VAR 0 4
76274: PPUSH
76275: CALL_OW 257
76279: PUSH
76280: LD_VAR 0 2
76284: EQUAL
76285: IFFALSE 76312
// result := Insert ( result , 1 , un ) else
76287: LD_ADDR_VAR 0 3
76291: PUSH
76292: LD_VAR 0 3
76296: PPUSH
76297: LD_INT 1
76299: PPUSH
76300: LD_VAR 0 4
76304: PPUSH
76305: CALL_OW 2
76309: ST_TO_ADDR
76310: GO 76341
// result := Replace ( result , result + 1 , un ) ;
76312: LD_ADDR_VAR 0 3
76316: PUSH
76317: LD_VAR 0 3
76321: PPUSH
76322: LD_VAR 0 3
76326: PUSH
76327: LD_INT 1
76329: PLUS
76330: PPUSH
76331: LD_VAR 0 4
76335: PPUSH
76336: CALL_OW 1
76340: ST_TO_ADDR
76341: GO 76267
76343: POP
76344: POP
// end ;
76345: LD_VAR 0 3
76349: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76350: LD_INT 0
76352: PPUSH
76353: PPUSH
76354: PPUSH
76355: PPUSH
76356: PPUSH
76357: PPUSH
76358: PPUSH
// result := [ ] ;
76359: LD_ADDR_VAR 0 4
76363: PUSH
76364: EMPTY
76365: ST_TO_ADDR
// if x - r < 0 then
76366: LD_VAR 0 1
76370: PUSH
76371: LD_VAR 0 3
76375: MINUS
76376: PUSH
76377: LD_INT 0
76379: LESS
76380: IFFALSE 76392
// min_x := 0 else
76382: LD_ADDR_VAR 0 8
76386: PUSH
76387: LD_INT 0
76389: ST_TO_ADDR
76390: GO 76408
// min_x := x - r ;
76392: LD_ADDR_VAR 0 8
76396: PUSH
76397: LD_VAR 0 1
76401: PUSH
76402: LD_VAR 0 3
76406: MINUS
76407: ST_TO_ADDR
// if y - r < 0 then
76408: LD_VAR 0 2
76412: PUSH
76413: LD_VAR 0 3
76417: MINUS
76418: PUSH
76419: LD_INT 0
76421: LESS
76422: IFFALSE 76434
// min_y := 0 else
76424: LD_ADDR_VAR 0 7
76428: PUSH
76429: LD_INT 0
76431: ST_TO_ADDR
76432: GO 76450
// min_y := y - r ;
76434: LD_ADDR_VAR 0 7
76438: PUSH
76439: LD_VAR 0 2
76443: PUSH
76444: LD_VAR 0 3
76448: MINUS
76449: ST_TO_ADDR
// max_x := x + r ;
76450: LD_ADDR_VAR 0 9
76454: PUSH
76455: LD_VAR 0 1
76459: PUSH
76460: LD_VAR 0 3
76464: PLUS
76465: ST_TO_ADDR
// max_y := y + r ;
76466: LD_ADDR_VAR 0 10
76470: PUSH
76471: LD_VAR 0 2
76475: PUSH
76476: LD_VAR 0 3
76480: PLUS
76481: ST_TO_ADDR
// for _x = min_x to max_x do
76482: LD_ADDR_VAR 0 5
76486: PUSH
76487: DOUBLE
76488: LD_VAR 0 8
76492: DEC
76493: ST_TO_ADDR
76494: LD_VAR 0 9
76498: PUSH
76499: FOR_TO
76500: IFFALSE 76601
// for _y = min_y to max_y do
76502: LD_ADDR_VAR 0 6
76506: PUSH
76507: DOUBLE
76508: LD_VAR 0 7
76512: DEC
76513: ST_TO_ADDR
76514: LD_VAR 0 10
76518: PUSH
76519: FOR_TO
76520: IFFALSE 76597
// begin if not ValidHex ( _x , _y ) then
76522: LD_VAR 0 5
76526: PPUSH
76527: LD_VAR 0 6
76531: PPUSH
76532: CALL_OW 488
76536: NOT
76537: IFFALSE 76541
// continue ;
76539: GO 76519
// if GetResourceTypeXY ( _x , _y ) then
76541: LD_VAR 0 5
76545: PPUSH
76546: LD_VAR 0 6
76550: PPUSH
76551: CALL_OW 283
76555: IFFALSE 76595
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76557: LD_ADDR_VAR 0 4
76561: PUSH
76562: LD_VAR 0 4
76566: PPUSH
76567: LD_VAR 0 4
76571: PUSH
76572: LD_INT 1
76574: PLUS
76575: PPUSH
76576: LD_VAR 0 5
76580: PUSH
76581: LD_VAR 0 6
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: PPUSH
76590: CALL_OW 1
76594: ST_TO_ADDR
// end ;
76595: GO 76519
76597: POP
76598: POP
76599: GO 76499
76601: POP
76602: POP
// end ;
76603: LD_VAR 0 4
76607: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76608: LD_INT 0
76610: PPUSH
76611: PPUSH
76612: PPUSH
76613: PPUSH
76614: PPUSH
76615: PPUSH
76616: PPUSH
76617: PPUSH
// if not units then
76618: LD_VAR 0 1
76622: NOT
76623: IFFALSE 76627
// exit ;
76625: GO 77138
// result := UnitFilter ( units , [ f_ok ] ) ;
76627: LD_ADDR_VAR 0 3
76631: PUSH
76632: LD_VAR 0 1
76636: PPUSH
76637: LD_INT 50
76639: PUSH
76640: EMPTY
76641: LIST
76642: PPUSH
76643: CALL_OW 72
76647: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76648: LD_ADDR_VAR 0 8
76652: PUSH
76653: LD_VAR 0 1
76657: PUSH
76658: LD_INT 1
76660: ARRAY
76661: PPUSH
76662: CALL_OW 255
76666: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76667: LD_ADDR_VAR 0 10
76671: PUSH
76672: LD_INT 29
76674: PUSH
76675: LD_EXP 36
76679: PUSH
76680: LD_INT 49
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: LIST
76687: ST_TO_ADDR
// if not result then
76688: LD_VAR 0 3
76692: NOT
76693: IFFALSE 76697
// exit ;
76695: GO 77138
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76697: LD_ADDR_VAR 0 5
76701: PUSH
76702: LD_INT 81
76704: PUSH
76705: LD_VAR 0 8
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: PPUSH
76714: CALL_OW 69
76718: ST_TO_ADDR
// for i in result do
76719: LD_ADDR_VAR 0 4
76723: PUSH
76724: LD_VAR 0 3
76728: PUSH
76729: FOR_IN
76730: IFFALSE 77136
// begin tag := GetTag ( i ) + 1 ;
76732: LD_ADDR_VAR 0 9
76736: PUSH
76737: LD_VAR 0 4
76741: PPUSH
76742: CALL_OW 110
76746: PUSH
76747: LD_INT 1
76749: PLUS
76750: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76751: LD_ADDR_VAR 0 7
76755: PUSH
76756: LD_VAR 0 4
76760: PPUSH
76761: CALL_OW 250
76765: PPUSH
76766: LD_VAR 0 4
76770: PPUSH
76771: CALL_OW 251
76775: PPUSH
76776: LD_INT 6
76778: PPUSH
76779: CALL 76350 0 3
76783: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76784: LD_VAR 0 7
76788: PUSH
76789: LD_VAR 0 4
76793: PPUSH
76794: CALL_OW 264
76798: PUSH
76799: LD_VAR 0 10
76803: IN
76804: NOT
76805: AND
76806: IFFALSE 76845
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76808: LD_VAR 0 4
76812: PPUSH
76813: LD_VAR 0 7
76817: PUSH
76818: LD_INT 1
76820: ARRAY
76821: PUSH
76822: LD_INT 1
76824: ARRAY
76825: PPUSH
76826: LD_VAR 0 7
76830: PUSH
76831: LD_INT 1
76833: ARRAY
76834: PUSH
76835: LD_INT 2
76837: ARRAY
76838: PPUSH
76839: CALL_OW 116
76843: GO 77134
// if path > tag then
76845: LD_VAR 0 2
76849: PUSH
76850: LD_VAR 0 9
76854: GREATER
76855: IFFALSE 77063
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
76857: LD_ADDR_VAR 0 6
76861: PUSH
76862: LD_VAR 0 5
76866: PPUSH
76867: LD_INT 91
76869: PUSH
76870: LD_VAR 0 4
76874: PUSH
76875: LD_INT 12
76877: PUSH
76878: EMPTY
76879: LIST
76880: LIST
76881: LIST
76882: PPUSH
76883: CALL_OW 72
76887: ST_TO_ADDR
// if nearEnemy then
76888: LD_VAR 0 6
76892: IFFALSE 76961
// begin if GetWeapon ( i ) = ru_time_lapser then
76894: LD_VAR 0 4
76898: PPUSH
76899: CALL_OW 264
76903: PUSH
76904: LD_INT 49
76906: EQUAL
76907: IFFALSE 76935
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76909: LD_VAR 0 4
76913: PPUSH
76914: LD_VAR 0 6
76918: PPUSH
76919: LD_VAR 0 4
76923: PPUSH
76924: CALL_OW 74
76928: PPUSH
76929: CALL_OW 112
76933: GO 76959
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76935: LD_VAR 0 4
76939: PPUSH
76940: LD_VAR 0 6
76944: PPUSH
76945: LD_VAR 0 4
76949: PPUSH
76950: CALL_OW 74
76954: PPUSH
76955: CALL_OW 115
// end else
76959: GO 77061
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76961: LD_VAR 0 4
76965: PPUSH
76966: LD_VAR 0 2
76970: PUSH
76971: LD_VAR 0 9
76975: ARRAY
76976: PUSH
76977: LD_INT 1
76979: ARRAY
76980: PPUSH
76981: LD_VAR 0 2
76985: PUSH
76986: LD_VAR 0 9
76990: ARRAY
76991: PUSH
76992: LD_INT 2
76994: ARRAY
76995: PPUSH
76996: CALL_OW 297
77000: PUSH
77001: LD_INT 6
77003: GREATER
77004: IFFALSE 77047
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77006: LD_VAR 0 4
77010: PPUSH
77011: LD_VAR 0 2
77015: PUSH
77016: LD_VAR 0 9
77020: ARRAY
77021: PUSH
77022: LD_INT 1
77024: ARRAY
77025: PPUSH
77026: LD_VAR 0 2
77030: PUSH
77031: LD_VAR 0 9
77035: ARRAY
77036: PUSH
77037: LD_INT 2
77039: ARRAY
77040: PPUSH
77041: CALL_OW 114
77045: GO 77061
// SetTag ( i , tag ) ;
77047: LD_VAR 0 4
77051: PPUSH
77052: LD_VAR 0 9
77056: PPUSH
77057: CALL_OW 109
// end else
77061: GO 77134
// if enemy then
77063: LD_VAR 0 5
77067: IFFALSE 77134
// begin if GetWeapon ( i ) = ru_time_lapser then
77069: LD_VAR 0 4
77073: PPUSH
77074: CALL_OW 264
77078: PUSH
77079: LD_INT 49
77081: EQUAL
77082: IFFALSE 77110
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77084: LD_VAR 0 4
77088: PPUSH
77089: LD_VAR 0 5
77093: PPUSH
77094: LD_VAR 0 4
77098: PPUSH
77099: CALL_OW 74
77103: PPUSH
77104: CALL_OW 112
77108: GO 77134
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77110: LD_VAR 0 4
77114: PPUSH
77115: LD_VAR 0 5
77119: PPUSH
77120: LD_VAR 0 4
77124: PPUSH
77125: CALL_OW 74
77129: PPUSH
77130: CALL_OW 115
// end ; end ;
77134: GO 76729
77136: POP
77137: POP
// end ;
77138: LD_VAR 0 3
77142: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77143: LD_INT 0
77145: PPUSH
77146: PPUSH
77147: PPUSH
// if not unit or IsInUnit ( unit ) then
77148: LD_VAR 0 1
77152: NOT
77153: PUSH
77154: LD_VAR 0 1
77158: PPUSH
77159: CALL_OW 310
77163: OR
77164: IFFALSE 77168
// exit ;
77166: GO 77259
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77168: LD_ADDR_VAR 0 4
77172: PUSH
77173: LD_VAR 0 1
77177: PPUSH
77178: CALL_OW 250
77182: PPUSH
77183: LD_VAR 0 2
77187: PPUSH
77188: LD_INT 1
77190: PPUSH
77191: CALL_OW 272
77195: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77196: LD_ADDR_VAR 0 5
77200: PUSH
77201: LD_VAR 0 1
77205: PPUSH
77206: CALL_OW 251
77210: PPUSH
77211: LD_VAR 0 2
77215: PPUSH
77216: LD_INT 1
77218: PPUSH
77219: CALL_OW 273
77223: ST_TO_ADDR
// if ValidHex ( x , y ) then
77224: LD_VAR 0 4
77228: PPUSH
77229: LD_VAR 0 5
77233: PPUSH
77234: CALL_OW 488
77238: IFFALSE 77259
// ComTurnXY ( unit , x , y ) ;
77240: LD_VAR 0 1
77244: PPUSH
77245: LD_VAR 0 4
77249: PPUSH
77250: LD_VAR 0 5
77254: PPUSH
77255: CALL_OW 118
// end ;
77259: LD_VAR 0 3
77263: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77264: LD_INT 0
77266: PPUSH
77267: PPUSH
// result := false ;
77268: LD_ADDR_VAR 0 3
77272: PUSH
77273: LD_INT 0
77275: ST_TO_ADDR
// if not units then
77276: LD_VAR 0 2
77280: NOT
77281: IFFALSE 77285
// exit ;
77283: GO 77330
// for i in units do
77285: LD_ADDR_VAR 0 4
77289: PUSH
77290: LD_VAR 0 2
77294: PUSH
77295: FOR_IN
77296: IFFALSE 77328
// if See ( side , i ) then
77298: LD_VAR 0 1
77302: PPUSH
77303: LD_VAR 0 4
77307: PPUSH
77308: CALL_OW 292
77312: IFFALSE 77326
// begin result := true ;
77314: LD_ADDR_VAR 0 3
77318: PUSH
77319: LD_INT 1
77321: ST_TO_ADDR
// exit ;
77322: POP
77323: POP
77324: GO 77330
// end ;
77326: GO 77295
77328: POP
77329: POP
// end ;
77330: LD_VAR 0 3
77334: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77335: LD_INT 0
77337: PPUSH
77338: PPUSH
77339: PPUSH
77340: PPUSH
// if not unit or not points then
77341: LD_VAR 0 1
77345: NOT
77346: PUSH
77347: LD_VAR 0 2
77351: NOT
77352: OR
77353: IFFALSE 77357
// exit ;
77355: GO 77447
// dist := 99999 ;
77357: LD_ADDR_VAR 0 5
77361: PUSH
77362: LD_INT 99999
77364: ST_TO_ADDR
// for i in points do
77365: LD_ADDR_VAR 0 4
77369: PUSH
77370: LD_VAR 0 2
77374: PUSH
77375: FOR_IN
77376: IFFALSE 77445
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77378: LD_ADDR_VAR 0 6
77382: PUSH
77383: LD_VAR 0 1
77387: PPUSH
77388: LD_VAR 0 4
77392: PUSH
77393: LD_INT 1
77395: ARRAY
77396: PPUSH
77397: LD_VAR 0 4
77401: PUSH
77402: LD_INT 2
77404: ARRAY
77405: PPUSH
77406: CALL_OW 297
77410: ST_TO_ADDR
// if tmpDist < dist then
77411: LD_VAR 0 6
77415: PUSH
77416: LD_VAR 0 5
77420: LESS
77421: IFFALSE 77443
// begin result := i ;
77423: LD_ADDR_VAR 0 3
77427: PUSH
77428: LD_VAR 0 4
77432: ST_TO_ADDR
// dist := tmpDist ;
77433: LD_ADDR_VAR 0 5
77437: PUSH
77438: LD_VAR 0 6
77442: ST_TO_ADDR
// end ; end ;
77443: GO 77375
77445: POP
77446: POP
// end ;
77447: LD_VAR 0 3
77451: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77452: LD_INT 0
77454: PPUSH
// uc_side := side ;
77455: LD_ADDR_OWVAR 20
77459: PUSH
77460: LD_VAR 0 1
77464: ST_TO_ADDR
// uc_nation := 3 ;
77465: LD_ADDR_OWVAR 21
77469: PUSH
77470: LD_INT 3
77472: ST_TO_ADDR
// vc_chassis := 25 ;
77473: LD_ADDR_OWVAR 37
77477: PUSH
77478: LD_INT 25
77480: ST_TO_ADDR
// vc_engine := engine_siberite ;
77481: LD_ADDR_OWVAR 39
77485: PUSH
77486: LD_INT 3
77488: ST_TO_ADDR
// vc_control := control_computer ;
77489: LD_ADDR_OWVAR 38
77493: PUSH
77494: LD_INT 3
77496: ST_TO_ADDR
// vc_weapon := 59 ;
77497: LD_ADDR_OWVAR 40
77501: PUSH
77502: LD_INT 59
77504: ST_TO_ADDR
// result := CreateVehicle ;
77505: LD_ADDR_VAR 0 5
77509: PUSH
77510: CALL_OW 45
77514: ST_TO_ADDR
// SetDir ( result , d ) ;
77515: LD_VAR 0 5
77519: PPUSH
77520: LD_VAR 0 4
77524: PPUSH
77525: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77529: LD_VAR 0 5
77533: PPUSH
77534: LD_VAR 0 2
77538: PPUSH
77539: LD_VAR 0 3
77543: PPUSH
77544: LD_INT 0
77546: PPUSH
77547: CALL_OW 48
// end ;
77551: LD_VAR 0 5
77555: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77556: LD_INT 0
77558: PPUSH
77559: PPUSH
77560: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77561: LD_ADDR_VAR 0 2
77565: PUSH
77566: LD_INT 0
77568: PUSH
77569: LD_INT 0
77571: PUSH
77572: LD_INT 0
77574: PUSH
77575: LD_INT 0
77577: PUSH
77578: EMPTY
77579: LIST
77580: LIST
77581: LIST
77582: LIST
77583: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77584: LD_VAR 0 1
77588: NOT
77589: PUSH
77590: LD_VAR 0 1
77594: PPUSH
77595: CALL_OW 264
77599: PUSH
77600: LD_INT 12
77602: PUSH
77603: LD_INT 51
77605: PUSH
77606: LD_INT 32
77608: PUSH
77609: LD_EXP 33
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: LIST
77618: LIST
77619: IN
77620: NOT
77621: OR
77622: IFFALSE 77626
// exit ;
77624: GO 77724
// for i := 1 to 3 do
77626: LD_ADDR_VAR 0 3
77630: PUSH
77631: DOUBLE
77632: LD_INT 1
77634: DEC
77635: ST_TO_ADDR
77636: LD_INT 3
77638: PUSH
77639: FOR_TO
77640: IFFALSE 77722
// begin tmp := GetCargo ( cargo , i ) ;
77642: LD_ADDR_VAR 0 4
77646: PUSH
77647: LD_VAR 0 1
77651: PPUSH
77652: LD_VAR 0 3
77656: PPUSH
77657: CALL_OW 289
77661: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77662: LD_ADDR_VAR 0 2
77666: PUSH
77667: LD_VAR 0 2
77671: PPUSH
77672: LD_VAR 0 3
77676: PPUSH
77677: LD_VAR 0 4
77681: PPUSH
77682: CALL_OW 1
77686: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77687: LD_ADDR_VAR 0 2
77691: PUSH
77692: LD_VAR 0 2
77696: PPUSH
77697: LD_INT 4
77699: PPUSH
77700: LD_VAR 0 2
77704: PUSH
77705: LD_INT 4
77707: ARRAY
77708: PUSH
77709: LD_VAR 0 4
77713: PLUS
77714: PPUSH
77715: CALL_OW 1
77719: ST_TO_ADDR
// end ;
77720: GO 77639
77722: POP
77723: POP
// end ; end_of_file
77724: LD_VAR 0 2
77728: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77729: LD_VAR 0 1
77733: PUSH
77734: LD_INT 200
77736: DOUBLE
77737: GREATEREQUAL
77738: IFFALSE 77746
77740: LD_INT 299
77742: DOUBLE
77743: LESSEQUAL
77744: IFTRUE 77748
77746: GO 77780
77748: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77749: LD_VAR 0 1
77753: PPUSH
77754: LD_VAR 0 2
77758: PPUSH
77759: LD_VAR 0 3
77763: PPUSH
77764: LD_VAR 0 4
77768: PPUSH
77769: LD_VAR 0 5
77773: PPUSH
77774: CALL 33069 0 5
77778: GO 77857
77780: LD_INT 300
77782: DOUBLE
77783: GREATEREQUAL
77784: IFFALSE 77792
77786: LD_INT 399
77788: DOUBLE
77789: LESSEQUAL
77790: IFTRUE 77794
77792: GO 77856
77794: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77795: LD_VAR 0 1
77799: PPUSH
77800: LD_VAR 0 2
77804: PPUSH
77805: LD_VAR 0 3
77809: PPUSH
77810: LD_VAR 0 4
77814: PPUSH
77815: LD_VAR 0 5
77819: PPUSH
77820: LD_VAR 0 6
77824: PPUSH
77825: LD_VAR 0 7
77829: PPUSH
77830: LD_VAR 0 8
77834: PPUSH
77835: LD_VAR 0 9
77839: PPUSH
77840: LD_VAR 0 10
77844: PPUSH
77845: LD_VAR 0 11
77849: PPUSH
77850: CALL 30711 0 11
77854: GO 77857
77856: POP
// end ;
77857: PPOPN 11
77859: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77860: LD_VAR 0 1
77864: PPUSH
77865: LD_VAR 0 2
77869: PPUSH
77870: LD_VAR 0 3
77874: PPUSH
77875: LD_VAR 0 4
77879: PPUSH
77880: LD_VAR 0 5
77884: PPUSH
77885: CALL 32805 0 5
// end ; end_of_file
77889: PPOPN 5
77891: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77892: LD_VAR 0 1
77896: PPUSH
77897: LD_VAR 0 2
77901: PPUSH
77902: LD_VAR 0 3
77906: PPUSH
77907: LD_VAR 0 4
77911: PPUSH
77912: LD_VAR 0 5
77916: PPUSH
77917: LD_VAR 0 6
77921: PPUSH
77922: CALL 18404 0 6
// end ;
77926: PPOPN 6
77928: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77929: LD_INT 0
77931: PPUSH
// begin if not units then
77932: LD_VAR 0 1
77936: NOT
77937: IFFALSE 77941
// exit ;
77939: GO 78029
// if p1 = 1 then
77941: LD_VAR 0 2
77945: PUSH
77946: LD_INT 1
77948: EQUAL
77949: IFFALSE 78029
// begin if p2 = 1 then
77951: LD_VAR 0 3
77955: PUSH
77956: LD_INT 1
77958: EQUAL
77959: IFFALSE 77990
// begin for i in units do
77961: LD_ADDR_VAR 0 7
77965: PUSH
77966: LD_VAR 0 1
77970: PUSH
77971: FOR_IN
77972: IFFALSE 77988
// begin SetUnitAttackType ( i , 3 ) ;
77974: LD_VAR 0 7
77978: PPUSH
77979: LD_INT 3
77981: PPUSH
77982: CALL_OW 603
// end ;
77986: GO 77971
77988: POP
77989: POP
// end ; if p2 = 2 then
77990: LD_VAR 0 3
77994: PUSH
77995: LD_INT 2
77997: EQUAL
77998: IFFALSE 78029
// begin for i in units do
78000: LD_ADDR_VAR 0 7
78004: PUSH
78005: LD_VAR 0 1
78009: PUSH
78010: FOR_IN
78011: IFFALSE 78027
// begin SetUnitAttackType ( i , 1 ) ;
78013: LD_VAR 0 7
78017: PPUSH
78018: LD_INT 1
78020: PPUSH
78021: CALL_OW 603
// end ;
78025: GO 78010
78027: POP
78028: POP
// end ; end ; end ;
78029: PPOPN 7
78031: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78032: CALL 18379 0 0
// end ;
78036: PPOPN 1
78038: END
