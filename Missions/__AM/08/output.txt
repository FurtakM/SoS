// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 8885 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 73588 0 9
// Action ;
  79: CALL 14709 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2486 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 39457 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 39457 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 39457 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 39457 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 39457 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: PUSH
 686: LD_STRING LisaInDelta
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 30
 696: NOT
 697: AND
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 754
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 39457 0 3
 731: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 732: LD_ADDR_VAR 0 5
 736: PUSH
 737: LD_VAR 0 5
 741: PPUSH
 742: LD_EXP 19
 746: PPUSH
 747: CALL 76906 0 2
 751: ST_TO_ADDR
// end else
 752: GO 813
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 754: LD_EXP 19
 758: NOT
 759: PUSH
 760: LD_STRING LisaIn07
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 30
 770: NOT
 771: AND
 772: IFFALSE 813
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 774: LD_ADDR_EXP 19
 778: PUSH
 779: LD_STRING Lisa
 781: PPUSH
 782: LD_INT 1
 784: PPUSH
 785: LD_STRING 07_
 787: PPUSH
 788: CALL 39457 0 3
 792: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 793: LD_ADDR_VAR 0 5
 797: PUSH
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_EXP 19
 807: PPUSH
 808: CALL 76906 0 2
 812: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 813: LD_STRING 04_Bobby
 815: PUSH
 816: EMPTY
 817: LIST
 818: PPUSH
 819: CALL_OW 28
 823: PUSH
 824: LD_STRING BobbyInDelta
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 30
 834: NOT
 835: AND
 836: PUSH
 837: LD_STRING 07_Bobby
 839: PUSH
 840: EMPTY
 841: LIST
 842: PPUSH
 843: CALL_OW 28
 847: NOT
 848: AND
 849: IFFALSE 892
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 851: LD_ADDR_EXP 17
 855: PUSH
 856: LD_STRING Bobby
 858: PPUSH
 859: LD_INT 1
 861: PPUSH
 862: LD_STRING 04_
 864: PPUSH
 865: CALL 39457 0 3
 869: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 870: LD_ADDR_VAR 0 5
 874: PUSH
 875: LD_VAR 0 5
 879: PPUSH
 880: LD_EXP 17
 884: PPUSH
 885: CALL 76906 0 2
 889: ST_TO_ADDR
// end else
 890: GO 951
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 892: LD_EXP 17
 896: NOT
 897: PUSH
 898: LD_STRING BobbyIn07
 900: PPUSH
 901: LD_INT 0
 903: PPUSH
 904: CALL_OW 30
 908: NOT
 909: AND
 910: IFFALSE 951
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 912: LD_ADDR_EXP 17
 916: PUSH
 917: LD_STRING Bobby
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: LD_STRING 07_
 925: PPUSH
 926: CALL 39457 0 3
 930: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 931: LD_ADDR_VAR 0 5
 935: PUSH
 936: LD_VAR 0 5
 940: PPUSH
 941: LD_EXP 17
 945: PPUSH
 946: CALL 76906 0 2
 950: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 951: LD_STRING 04_Cyrus
 953: PUSH
 954: EMPTY
 955: LIST
 956: PPUSH
 957: CALL_OW 28
 961: PUSH
 962: LD_STRING CyrusInDelta
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 30
 972: NOT
 973: AND
 974: PUSH
 975: LD_STRING 07_Cyrus
 977: PUSH
 978: EMPTY
 979: LIST
 980: PPUSH
 981: CALL_OW 28
 985: NOT
 986: AND
 987: IFFALSE 1030
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 989: LD_ADDR_EXP 18
 993: PUSH
 994: LD_STRING Cyrus
 996: PPUSH
 997: LD_INT 1
 999: PPUSH
1000: LD_STRING 04_
1002: PPUSH
1003: CALL 39457 0 3
1007: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_VAR 0 5
1017: PPUSH
1018: LD_EXP 18
1022: PPUSH
1023: CALL 76906 0 2
1027: ST_TO_ADDR
// end else
1028: GO 1089
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1030: LD_EXP 18
1034: NOT
1035: PUSH
1036: LD_STRING CyrusIn07
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: CALL_OW 30
1046: NOT
1047: AND
1048: IFFALSE 1089
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1050: LD_ADDR_EXP 18
1054: PUSH
1055: LD_STRING Cyrus
1057: PPUSH
1058: LD_INT 1
1060: PPUSH
1061: LD_STRING 07_
1063: PPUSH
1064: CALL 39457 0 3
1068: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_VAR 0 5
1078: PPUSH
1079: LD_EXP 18
1083: PPUSH
1084: CALL 76906 0 2
1088: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1089: LD_STRING 04_Brown
1091: PUSH
1092: EMPTY
1093: LIST
1094: PPUSH
1095: CALL_OW 28
1099: PUSH
1100: LD_STRING BrownInDelta
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 30
1110: NOT
1111: AND
1112: PUSH
1113: LD_STRING 07_Brown
1115: PUSH
1116: EMPTY
1117: LIST
1118: PPUSH
1119: CALL_OW 28
1123: NOT
1124: AND
1125: PUSH
1126: LD_EXP 13
1130: PUSH
1131: LD_INT 2
1133: NONEQUAL
1134: AND
1135: IFFALSE 1178
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1137: LD_ADDR_EXP 15
1141: PUSH
1142: LD_STRING Brown
1144: PPUSH
1145: LD_INT 1
1147: PPUSH
1148: LD_STRING 04_
1150: PPUSH
1151: CALL 39457 0 3
1155: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1156: LD_ADDR_VAR 0 5
1160: PUSH
1161: LD_VAR 0 5
1165: PPUSH
1166: LD_EXP 15
1170: PPUSH
1171: CALL 76906 0 2
1175: ST_TO_ADDR
// end else
1176: GO 1247
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1178: LD_EXP 15
1182: NOT
1183: PUSH
1184: LD_STRING BrownIn07
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 30
1194: NOT
1195: AND
1196: PUSH
1197: LD_EXP 13
1201: PUSH
1202: LD_INT 2
1204: NONEQUAL
1205: AND
1206: IFFALSE 1247
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1208: LD_ADDR_EXP 15
1212: PUSH
1213: LD_STRING Brown
1215: PPUSH
1216: LD_INT 1
1218: PPUSH
1219: LD_STRING 07_
1221: PPUSH
1222: CALL 39457 0 3
1226: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1227: LD_ADDR_VAR 0 5
1231: PUSH
1232: LD_VAR 0 5
1236: PPUSH
1237: LD_EXP 15
1241: PPUSH
1242: CALL 76906 0 2
1246: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1247: LD_STRING 04_Donaldson
1249: PUSH
1250: EMPTY
1251: LIST
1252: PPUSH
1253: CALL_OW 28
1257: PUSH
1258: LD_STRING DonaldsonInDelta
1260: PPUSH
1261: LD_INT 0
1263: PPUSH
1264: CALL_OW 30
1268: NOT
1269: AND
1270: PUSH
1271: LD_STRING 07_Donaldson
1273: PUSH
1274: EMPTY
1275: LIST
1276: PPUSH
1277: CALL_OW 28
1281: NOT
1282: AND
1283: PUSH
1284: LD_EXP 13
1288: PUSH
1289: LD_INT 1
1291: NONEQUAL
1292: AND
1293: IFFALSE 1336
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1295: LD_ADDR_EXP 16
1299: PUSH
1300: LD_STRING Donaldson
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: LD_STRING 04_
1308: PPUSH
1309: CALL 39457 0 3
1313: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1314: LD_ADDR_VAR 0 5
1318: PUSH
1319: LD_VAR 0 5
1323: PPUSH
1324: LD_EXP 16
1328: PPUSH
1329: CALL 76906 0 2
1333: ST_TO_ADDR
// end else
1334: GO 1405
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1336: LD_EXP 16
1340: NOT
1341: PUSH
1342: LD_STRING DonaldsonIn07
1344: PPUSH
1345: LD_INT 0
1347: PPUSH
1348: CALL_OW 30
1352: NOT
1353: AND
1354: PUSH
1355: LD_EXP 13
1359: PUSH
1360: LD_INT 1
1362: NONEQUAL
1363: AND
1364: IFFALSE 1405
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1366: LD_ADDR_EXP 16
1370: PUSH
1371: LD_STRING Donaldson
1373: PPUSH
1374: LD_INT 1
1376: PPUSH
1377: LD_STRING 07_
1379: PPUSH
1380: CALL 39457 0 3
1384: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1385: LD_ADDR_VAR 0 5
1389: PUSH
1390: LD_VAR 0 5
1394: PPUSH
1395: LD_EXP 16
1399: PPUSH
1400: CALL 76906 0 2
1404: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1405: LD_STRING KhatamIn07
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 30
1415: NOT
1416: IFFALSE 1457
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1418: LD_ADDR_EXP 23
1422: PUSH
1423: LD_STRING Khatam
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_STRING 07_
1431: PPUSH
1432: CALL 39457 0 3
1436: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1437: LD_ADDR_VAR 0 5
1441: PUSH
1442: LD_VAR 0 5
1446: PPUSH
1447: LD_EXP 23
1451: PPUSH
1452: CALL 76906 0 2
1456: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_VAR 0 6
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 5 - others ;
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: LD_INT 5
1477: PUSH
1478: LD_VAR 0 6
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 4
1488: IFFALSE 1545
// for i := tmp downto 1 do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_VAR 0 4
1500: INC
1501: ST_TO_ADDR
1502: LD_INT 1
1504: PUSH
1505: FOR_DOWNTO
1506: IFFALSE 1543
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1521: LD_ADDR_VAR 0 6
1525: PUSH
1526: LD_VAR 0 6
1530: PPUSH
1531: CALL_OW 44
1535: PPUSH
1536: CALL 76906 0 2
1540: ST_TO_ADDR
// end ;
1541: GO 1505
1543: POP
1544: POP
// for i in others do
1545: LD_ADDR_VAR 0 2
1549: PUSH
1550: LD_VAR 0 6
1554: PUSH
1555: FOR_IN
1556: IFFALSE 1572
// SetTag ( i , 106 ) ;
1558: LD_VAR 0 2
1562: PPUSH
1563: LD_INT 106
1565: PPUSH
1566: CALL_OW 109
1570: GO 1555
1572: POP
1573: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1574: LD_ADDR_VAR 0 8
1578: PUSH
1579: LD_INT 22
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 30
1591: PUSH
1592: LD_INT 31
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PPUSH
1603: CALL_OW 69
1607: ST_TO_ADDR
// for i in bun do
1608: LD_ADDR_VAR 0 2
1612: PUSH
1613: LD_VAR 0 8
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1751
// begin x := GetX ( i ) ;
1621: LD_ADDR_VAR 0 13
1625: PUSH
1626: LD_VAR 0 2
1630: PPUSH
1631: CALL_OW 250
1635: ST_TO_ADDR
// y := GetY ( i ) ;
1636: LD_ADDR_VAR 0 14
1640: PUSH
1641: LD_VAR 0 2
1645: PPUSH
1646: CALL_OW 251
1650: ST_TO_ADDR
// d := GetDir ( i ) ;
1651: LD_ADDR_VAR 0 15
1655: PUSH
1656: LD_VAR 0 2
1660: PPUSH
1661: CALL_OW 254
1665: ST_TO_ADDR
// RemoveUnit ( i ) ;
1666: LD_VAR 0 2
1670: PPUSH
1671: CALL_OW 64
// bc_type := b_bunker ;
1675: LD_ADDR_OWVAR 42
1679: PUSH
1680: LD_INT 32
1682: ST_TO_ADDR
// bc_level := 6 ;
1683: LD_ADDR_OWVAR 43
1687: PUSH
1688: LD_INT 6
1690: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1691: LD_ADDR_VAR 0 16
1695: PUSH
1696: LD_VAR 0 13
1700: PPUSH
1701: LD_VAR 0 14
1705: PPUSH
1706: LD_VAR 0 15
1710: PPUSH
1711: CALL_OW 47
1715: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1716: LD_VAR 0 16
1720: PPUSH
1721: LD_INT 5
1723: PUSH
1724: LD_INT 4
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 2
1738: MOD
1739: PUSH
1740: LD_INT 1
1742: PLUS
1743: ARRAY
1744: PPUSH
1745: CALL_OW 431
// end ;
1749: GO 1618
1751: POP
1752: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1753: LD_ADDR_VAR 0 7
1757: PUSH
1758: LD_INT 22
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 30
1770: PUSH
1771: LD_INT 5
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 69
1786: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1787: LD_ADDR_VAR 0 9
1791: PUSH
1792: LD_INT 22
1794: PUSH
1795: LD_INT 1
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 2
1804: PUSH
1805: LD_INT 30
1807: PUSH
1808: LD_INT 6
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: LD_INT 30
1817: PUSH
1818: LD_INT 7
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 30
1827: PUSH
1828: LD_INT 8
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PPUSH
1845: CALL_OW 69
1849: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1850: LD_ADDR_VAR 0 10
1854: PUSH
1855: LD_INT 22
1857: PUSH
1858: LD_INT 1
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 30
1867: PUSH
1868: LD_INT 3
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PPUSH
1879: CALL_OW 69
1883: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1884: LD_ADDR_VAR 0 11
1888: PUSH
1889: LD_INT 22
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 30
1901: PUSH
1902: LD_INT 36
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 69
1917: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1918: LD_ADDR_VAR 0 8
1922: PUSH
1923: LD_INT 22
1925: PUSH
1926: LD_INT 1
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PUSH
1933: LD_INT 2
1935: PUSH
1936: LD_INT 30
1938: PUSH
1939: LD_INT 31
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 30
1948: PUSH
1949: LD_INT 32
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PPUSH
1965: CALL_OW 69
1969: ST_TO_ADDR
// for i in others union tmp2 do
1970: LD_ADDR_VAR 0 2
1974: PUSH
1975: LD_VAR 0 6
1979: PUSH
1980: LD_VAR 0 5
1984: UNION
1985: PUSH
1986: FOR_IN
1987: IFFALSE 2479
// begin placed := false ;
1989: LD_ADDR_VAR 0 12
1993: PUSH
1994: LD_INT 0
1996: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1997: LD_VAR 0 2
2001: PPUSH
2002: CALL_OW 257
2006: PUSH
2007: LD_INT 1
2009: EQUAL
2010: IFFALSE 2135
// begin if UnitFilter ( bun , [ f_empty ] ) then
2012: LD_VAR 0 8
2016: PPUSH
2017: LD_INT 58
2019: PUSH
2020: EMPTY
2021: LIST
2022: PPUSH
2023: CALL_OW 72
2027: IFFALSE 2066
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2029: LD_VAR 0 2
2033: PPUSH
2034: LD_VAR 0 8
2038: PPUSH
2039: LD_INT 58
2041: PUSH
2042: EMPTY
2043: LIST
2044: PPUSH
2045: CALL_OW 72
2049: PUSH
2050: LD_INT 1
2052: ARRAY
2053: PPUSH
2054: CALL_OW 52
// placed := true ;
2058: LD_ADDR_VAR 0 12
2062: PUSH
2063: LD_INT 1
2065: ST_TO_ADDR
// end ; if arm and not placed then
2066: LD_VAR 0 7
2070: PUSH
2071: LD_VAR 0 12
2075: NOT
2076: AND
2077: IFFALSE 2135
// begin for j in arm do
2079: LD_ADDR_VAR 0 3
2083: PUSH
2084: LD_VAR 0 7
2088: PUSH
2089: FOR_IN
2090: IFFALSE 2133
// if UnitsInside ( j ) < 6 then
2092: LD_VAR 0 3
2096: PPUSH
2097: CALL_OW 313
2101: PUSH
2102: LD_INT 6
2104: LESS
2105: IFFALSE 2131
// begin PlaceHumanInUnit ( i , j ) ;
2107: LD_VAR 0 2
2111: PPUSH
2112: LD_VAR 0 3
2116: PPUSH
2117: CALL_OW 52
// placed := true ;
2121: LD_ADDR_VAR 0 12
2125: PUSH
2126: LD_INT 1
2128: ST_TO_ADDR
// break ;
2129: GO 2133
// end ;
2131: GO 2089
2133: POP
2134: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2135: LD_VAR 0 2
2139: PPUSH
2140: CALL_OW 257
2144: PUSH
2145: LD_INT 2
2147: EQUAL
2148: IFFALSE 2181
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_INT 52
2157: PPUSH
2158: LD_INT 20
2160: PPUSH
2161: LD_INT 6
2163: PPUSH
2164: LD_INT 0
2166: PPUSH
2167: CALL_OW 50
// placed := true ;
2171: LD_ADDR_VAR 0 12
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// continue ;
2179: GO 1986
// end ; if GetClass ( i ) = class_mechanic then
2181: LD_VAR 0 2
2185: PPUSH
2186: CALL_OW 257
2190: PUSH
2191: LD_INT 3
2193: EQUAL
2194: IFFALSE 2298
// begin if fac then
2196: LD_VAR 0 10
2200: IFFALSE 2298
// begin if ct then
2202: LD_VAR 0 11
2206: IFFALSE 2234
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2208: LD_VAR 0 2
2212: PPUSH
2213: LD_VAR 0 11
2217: PUSH
2218: LD_INT 1
2220: ARRAY
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// end ; if placed then
2234: LD_VAR 0 12
2238: IFFALSE 2242
// continue ;
2240: GO 1986
// for j in fac do
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: LD_VAR 0 10
2251: PUSH
2252: FOR_IN
2253: IFFALSE 2296
// if UnitsInside ( j ) < 6 then
2255: LD_VAR 0 3
2259: PPUSH
2260: CALL_OW 313
2264: PUSH
2265: LD_INT 6
2267: LESS
2268: IFFALSE 2294
// begin PlaceHumanInUnit ( i , j ) ;
2270: LD_VAR 0 2
2274: PPUSH
2275: LD_VAR 0 3
2279: PPUSH
2280: CALL_OW 52
// placed := true ;
2284: LD_ADDR_VAR 0 12
2288: PUSH
2289: LD_INT 1
2291: ST_TO_ADDR
// break ;
2292: GO 2296
// end ;
2294: GO 2252
2296: POP
2297: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL_OW 257
2307: PUSH
2308: LD_INT 4
2310: EQUAL
2311: IFFALSE 2406
// begin if lab then
2313: LD_VAR 0 9
2317: IFFALSE 2375
// begin for j in lab do
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 9
2328: PUSH
2329: FOR_IN
2330: IFFALSE 2373
// if UnitsInside ( j ) < 6 then
2332: LD_VAR 0 3
2336: PPUSH
2337: CALL_OW 313
2341: PUSH
2342: LD_INT 6
2344: LESS
2345: IFFALSE 2371
// begin PlaceHumanInUnit ( i , j ) ;
2347: LD_VAR 0 2
2351: PPUSH
2352: LD_VAR 0 3
2356: PPUSH
2357: CALL_OW 52
// placed := true ;
2361: LD_ADDR_VAR 0 12
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// break ;
2369: GO 2373
// end ;
2371: GO 2329
2373: POP
2374: POP
// end ; if not placed then
2375: LD_VAR 0 12
2379: NOT
2380: IFFALSE 2406
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_INT 3
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 49
// ComHold ( i ) ;
2397: LD_VAR 0 2
2401: PPUSH
2402: CALL_OW 140
// end ; end ; if ct then
2406: LD_VAR 0 11
2410: IFFALSE 2477
// if UnitsInside ( ct [ 1 ] ) then
2412: LD_VAR 0 11
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 313
2425: IFFALSE 2477
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 33
2444: PUSH
2445: LD_INT 2
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: PUSH
2461: FOR_IN
2462: IFFALSE 2475
// Connect ( i ) ;
2464: LD_VAR 0 2
2468: PPUSH
2469: CALL 47563 0 1
2473: GO 2461
2475: POP
2476: POP
// end ; end ;
2477: GO 1986
2479: POP
2480: POP
// end ;
2481: LD_VAR 0 1
2485: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2486: LD_INT 0
2488: PPUSH
2489: PPUSH
2490: PPUSH
2491: PPUSH
2492: PPUSH
2493: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2494: LD_INT 71
2496: PPUSH
2497: LD_INT 5
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: LD_STRING GammaBase
2514: PPUSH
2515: EMPTY
2516: PPUSH
2517: CALL_OW 30
2521: ST_TO_ADDR
// if not blist then
2522: LD_VAR 0 2
2526: NOT
2527: IFFALSE 2567
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: LD_INT 1
2536: PUSH
2537: LD_INT 52
2539: PUSH
2540: LD_INT 12
2542: PUSH
2543: LD_INT 3
2545: PUSH
2546: LD_INT 3
2548: PUSH
2549: LD_INT 0
2551: PUSH
2552: LD_INT 0
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: EMPTY
2565: LIST
2566: ST_TO_ADDR
// uc_side := 1 ;
2567: LD_ADDR_OWVAR 20
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// uc_nation := 1 ;
2575: LD_ADDR_OWVAR 21
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// bc_kind1 := - 1 ;
2583: LD_ADDR_OWVAR 44
2587: PUSH
2588: LD_INT 1
2590: NEG
2591: ST_TO_ADDR
// bc_kind2 := - 1 ;
2592: LD_ADDR_OWVAR 45
2596: PUSH
2597: LD_INT 1
2599: NEG
2600: ST_TO_ADDR
// for i in blist do
2601: LD_ADDR_VAR 0 3
2605: PUSH
2606: LD_VAR 0 2
2610: PUSH
2611: FOR_IN
2612: IFFALSE 2888
// begin bc_type := i [ 1 ] ;
2614: LD_ADDR_OWVAR 42
2618: PUSH
2619: LD_VAR 0 3
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2628: LD_ADDR_OWVAR 43
2632: PUSH
2633: LD_VAR 0 3
2637: PUSH
2638: LD_INT 5
2640: ARRAY
2641: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2642: LD_OWVAR 42
2646: PUSH
2647: LD_INT 6
2649: PUSH
2650: LD_INT 7
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: IN
2657: IFFALSE 2723
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2659: LD_STRING 06_remoteVehs_1
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 30
2669: NOT
2670: IFFALSE 2698
// begin bc_type := b_lab_full ;
2672: LD_ADDR_OWVAR 42
2676: PUSH
2677: LD_INT 8
2679: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2680: LD_ADDR_OWVAR 44
2684: PUSH
2685: LD_INT 10
2687: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2688: LD_ADDR_OWVAR 45
2692: PUSH
2693: LD_INT 15
2695: ST_TO_ADDR
// end else
2696: GO 2723
// begin bc_type := b_lab_half ;
2698: LD_ADDR_OWVAR 42
2702: PUSH
2703: LD_INT 7
2705: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2706: LD_ADDR_OWVAR 44
2710: PUSH
2711: LD_INT 10
2713: ST_TO_ADDR
// bc_kind2 := - 1 ;
2714: LD_ADDR_OWVAR 45
2718: PUSH
2719: LD_INT 1
2721: NEG
2722: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2723: LD_OWVAR 42
2727: PUSH
2728: LD_INT 2
2730: EQUAL
2731: IFFALSE 2741
// bc_type := b_factory ;
2733: LD_ADDR_OWVAR 42
2737: PUSH
2738: LD_INT 3
2740: ST_TO_ADDR
// if bc_type = b_depot then
2741: LD_OWVAR 42
2745: PUSH
2746: LD_INT 0
2748: EQUAL
2749: IFFALSE 2798
// begin bc_type := b_warehouse ;
2751: LD_ADDR_OWVAR 42
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2759: LD_ADDR_EXP 31
2763: PUSH
2764: LD_VAR 0 3
2768: PUSH
2769: LD_INT 2
2771: ARRAY
2772: PPUSH
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 3
2780: ARRAY
2781: PPUSH
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 4
2789: ARRAY
2790: PPUSH
2791: CALL_OW 47
2795: ST_TO_ADDR
// continue ;
2796: GO 2611
// end ; if bc_type = b_armoury then
2798: LD_OWVAR 42
2802: PUSH
2803: LD_INT 4
2805: EQUAL
2806: IFFALSE 2816
// bc_type = b_barracks ;
2808: LD_ADDR_OWVAR 42
2812: PUSH
2813: LD_INT 5
2815: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2816: LD_ADDR_VAR 0 4
2820: PUSH
2821: LD_VAR 0 3
2825: PUSH
2826: LD_INT 2
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 3
2834: PUSH
2835: LD_INT 3
2837: ARRAY
2838: PPUSH
2839: LD_VAR 0 3
2843: PUSH
2844: LD_INT 4
2846: ARRAY
2847: PPUSH
2848: CALL_OW 47
2852: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2853: LD_VAR 0 4
2857: PPUSH
2858: CALL_OW 266
2862: PUSH
2863: LD_INT 32
2865: EQUAL
2866: IFFALSE 2886
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2868: LD_VAR 0 4
2872: PPUSH
2873: LD_VAR 0 3
2877: PUSH
2878: LD_INT 7
2880: ARRAY
2881: PPUSH
2882: CALL_OW 431
// end ;
2886: GO 2611
2888: POP
2889: POP
// if not amDepot then
2890: LD_EXP 31
2894: NOT
2895: IFFALSE 2932
// begin bc_type := b_warehouse ;
2897: LD_ADDR_OWVAR 42
2901: PUSH
2902: LD_INT 1
2904: ST_TO_ADDR
// bc_level := 6 ;
2905: LD_ADDR_OWVAR 43
2909: PUSH
2910: LD_INT 6
2912: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2913: LD_ADDR_EXP 31
2917: PUSH
2918: LD_INT 52
2920: PPUSH
2921: LD_INT 12
2923: PPUSH
2924: LD_INT 3
2926: PPUSH
2927: CALL_OW 47
2931: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2932: LD_ADDR_OWVAR 42
2936: PUSH
2937: LD_INT 5
2939: ST_TO_ADDR
// bc_level := 6 ;
2940: LD_ADDR_OWVAR 43
2944: PUSH
2945: LD_INT 6
2947: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2948: LD_INT 61
2950: PPUSH
2951: LD_INT 29
2953: PPUSH
2954: LD_INT 5
2956: PPUSH
2957: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2961: LD_EXP 31
2965: PPUSH
2966: LD_STRING gamma
2968: PPUSH
2969: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2973: LD_EXP 31
2977: PPUSH
2978: CALL_OW 274
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: LD_INT 400
2988: PUSH
2989: LD_INT 320
2991: PUSH
2992: LD_INT 270
2994: PUSH
2995: LD_INT 230
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: PUSH
3004: LD_OWVAR 67
3008: ARRAY
3009: PPUSH
3010: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
3014: LD_EXP 31
3018: PPUSH
3019: CALL_OW 274
3023: PPUSH
3024: LD_INT 2
3026: PPUSH
3027: LD_INT 130
3029: PPUSH
3030: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3034: LD_INT 22
3036: PUSH
3037: LD_INT 1
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 30
3046: PUSH
3047: LD_INT 3
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PPUSH
3058: CALL_OW 69
3062: IFFALSE 3310
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 30
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PPUSH
3093: CALL_OW 69
3097: PUSH
3098: LD_INT 1
3100: ARRAY
3101: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3102: LD_ADDR_VAR 0 6
3106: PUSH
3107: LD_VAR 0 4
3111: PPUSH
3112: CALL_OW 250
3116: PPUSH
3117: LD_VAR 0 4
3121: PPUSH
3122: CALL_OW 251
3126: PPUSH
3127: LD_VAR 0 4
3131: PPUSH
3132: CALL_OW 254
3136: PPUSH
3137: CALL 74545 0 3
3141: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: LD_INT 19
3149: PUSH
3150: LD_INT 17
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3157: LD_STRING 06_remoteVehs_1
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 30
3167: IFFALSE 3190
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 2
3178: PPUSH
3179: LD_INT 1
3181: PPUSH
3182: LD_INT 22
3184: PPUSH
3185: CALL_OW 2
3189: ST_TO_ADDR
// for i in tmp do
3190: LD_ADDR_VAR 0 3
3194: PUSH
3195: LD_VAR 0 6
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3308
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3203: LD_VAR 0 3
3207: PUSH
3208: LD_INT 1
3210: ARRAY
3211: PPUSH
3212: LD_VAR 0 3
3216: PUSH
3217: LD_INT 2
3219: ARRAY
3220: PPUSH
3221: CALL_OW 428
3225: PUSH
3226: LD_INT 0
3228: EQUAL
3229: IFFALSE 3306
// begin bc_type := blist [ 1 ] ;
3231: LD_ADDR_OWVAR 42
3235: PUSH
3236: LD_VAR 0 2
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3245: LD_VAR 0 3
3249: PUSH
3250: LD_INT 1
3252: ARRAY
3253: PPUSH
3254: LD_VAR 0 3
3258: PUSH
3259: LD_INT 2
3261: ARRAY
3262: PPUSH
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 3
3270: ARRAY
3271: PPUSH
3272: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_INT 1
3288: PPUSH
3289: CALL_OW 3
3293: ST_TO_ADDR
// if blist = 0 then
3294: LD_VAR 0 2
3298: PUSH
3299: LD_INT 0
3301: EQUAL
3302: IFFALSE 3306
// break ;
3304: GO 3308
// end ;
3306: GO 3200
3308: POP
3309: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3310: LD_STRING 06_remoteVehs_1
3312: PPUSH
3313: LD_INT 0
3315: PPUSH
3316: CALL_OW 30
3320: IFFALSE 3773
// begin bc_type := b_control_tower ;
3322: LD_ADDR_OWVAR 42
3326: PUSH
3327: LD_INT 36
3329: ST_TO_ADDR
// bc_level := 4 ;
3330: LD_ADDR_OWVAR 43
3334: PUSH
3335: LD_INT 4
3337: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3338: LD_EXP 31
3342: PPUSH
3343: LD_INT 36
3345: PPUSH
3346: LD_INT 62
3348: PPUSH
3349: LD_INT 12
3351: PPUSH
3352: LD_INT 3
3354: PPUSH
3355: CALL 52691 0 5
3359: PUSH
3360: LD_INT 92
3362: PUSH
3363: LD_INT 62
3365: PUSH
3366: LD_INT 12
3368: PUSH
3369: LD_INT 3
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: PPUSH
3378: CALL_OW 69
3382: NOT
3383: AND
3384: IFFALSE 3401
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3386: LD_INT 62
3388: PPUSH
3389: LD_INT 12
3391: PPUSH
3392: LD_INT 3
3394: PPUSH
3395: CALL_OW 47
3399: GO 3563
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3401: LD_EXP 31
3405: PPUSH
3406: LD_INT 36
3408: PPUSH
3409: LD_INT 37
3411: PPUSH
3412: LD_INT 18
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: CALL 52691 0 5
3422: PUSH
3423: LD_INT 92
3425: PUSH
3426: LD_INT 37
3428: PUSH
3429: LD_INT 18
3431: PUSH
3432: LD_INT 3
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: NOT
3446: AND
3447: IFFALSE 3464
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3449: LD_INT 37
3451: PPUSH
3452: LD_INT 18
3454: PPUSH
3455: LD_INT 2
3457: PPUSH
3458: CALL_OW 47
3462: GO 3563
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3464: LD_EXP 31
3468: PPUSH
3469: LD_INT 36
3471: PPUSH
3472: LD_INT 66
3474: PPUSH
3475: LD_INT 14
3477: PPUSH
3478: LD_INT 4
3480: PPUSH
3481: CALL 52691 0 5
3485: PUSH
3486: LD_INT 92
3488: PUSH
3489: LD_INT 66
3491: PUSH
3492: LD_INT 14
3494: PUSH
3495: LD_INT 3
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: PPUSH
3504: CALL_OW 69
3508: NOT
3509: AND
3510: IFFALSE 3527
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3512: LD_INT 66
3514: PPUSH
3515: LD_INT 14
3517: PPUSH
3518: LD_INT 4
3520: PPUSH
3521: CALL_OW 47
3525: GO 3563
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3527: LD_EXP 31
3531: PPUSH
3532: LD_INT 36
3534: PPUSH
3535: LD_INT 74
3537: PPUSH
3538: LD_INT 26
3540: PPUSH
3541: LD_INT 4
3543: PPUSH
3544: CALL 52691 0 5
3548: IFFALSE 3563
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3550: LD_INT 74
3552: PPUSH
3553: LD_INT 26
3555: PPUSH
3556: LD_INT 4
3558: PPUSH
3559: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3563: LD_INT 22
3565: PUSH
3566: LD_INT 1
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 30
3575: PUSH
3576: LD_INT 36
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PPUSH
3587: CALL_OW 69
3591: NOT
3592: IFFALSE 3596
// exit ;
3594: GO 4121
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3596: LD_ADDR_VAR 0 3
3600: PUSH
3601: DOUBLE
3602: LD_INT 1
3604: DEC
3605: ST_TO_ADDR
3606: LD_INT 3
3608: PUSH
3609: LD_INT 2
3611: PUSH
3612: LD_INT 2
3614: PUSH
3615: LD_INT 2
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_OWVAR 67
3628: ARRAY
3629: PUSH
3630: FOR_TO
3631: IFFALSE 3771
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3633: LD_ADDR_OWVAR 37
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: LD_INT 2
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 1
3650: PPUSH
3651: LD_INT 2
3653: PPUSH
3654: CALL_OW 12
3658: ARRAY
3659: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3660: LD_ADDR_OWVAR 39
3664: PUSH
3665: LD_INT 1
3667: PUSH
3668: LD_INT 2
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: CALL_OW 12
3685: ARRAY
3686: ST_TO_ADDR
// vc_control := control_remote ;
3687: LD_ADDR_OWVAR 38
3691: PUSH
3692: LD_INT 2
3694: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3695: LD_ADDR_OWVAR 40
3699: PUSH
3700: LD_INT 4
3702: PUSH
3703: LD_INT 3
3705: PUSH
3706: LD_INT 5
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 1
3716: PPUSH
3717: LD_INT 3
3719: PPUSH
3720: CALL_OW 12
3724: ARRAY
3725: ST_TO_ADDR
// veh := CreateVehicle ;
3726: LD_ADDR_VAR 0 5
3730: PUSH
3731: CALL_OW 45
3735: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3736: LD_VAR 0 5
3740: PPUSH
3741: LD_INT 3
3743: PPUSH
3744: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3748: LD_VAR 0 5
3752: PPUSH
3753: LD_INT 61
3755: PPUSH
3756: LD_INT 23
3758: PPUSH
3759: LD_INT 9
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL_OW 50
// end ;
3769: GO 3630
3771: POP
3772: POP
// end ; if gammaCommander = 1 then
3773: LD_EXP 13
3777: PUSH
3778: LD_INT 1
3780: EQUAL
3781: IFFALSE 3958
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: DOUBLE
3789: LD_INT 1
3791: DEC
3792: ST_TO_ADDR
3793: LD_INT 3
3795: PUSH
3796: LD_INT 3
3798: PUSH
3799: LD_INT 2
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: PUSH
3817: FOR_TO
3818: IFFALSE 3954
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3820: LD_ADDR_OWVAR 37
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: LD_INT 2
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 2
3840: PPUSH
3841: CALL_OW 12
3845: ARRAY
3846: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3847: LD_ADDR_OWVAR 39
3851: PUSH
3852: LD_INT 1
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: CALL_OW 12
3872: ARRAY
3873: ST_TO_ADDR
// vc_control := control_manual ;
3874: LD_ADDR_OWVAR 38
3878: PUSH
3879: LD_INT 1
3881: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3882: LD_ADDR_OWVAR 40
3886: PUSH
3887: LD_INT 4
3889: PUSH
3890: LD_INT 5
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: LD_INT 1
3899: PPUSH
3900: LD_INT 2
3902: PPUSH
3903: CALL_OW 12
3907: ARRAY
3908: ST_TO_ADDR
// veh := CreateVehicle ;
3909: LD_ADDR_VAR 0 5
3913: PUSH
3914: CALL_OW 45
3918: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 3
3926: PPUSH
3927: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3931: LD_VAR 0 5
3935: PPUSH
3936: LD_INT 61
3938: PPUSH
3939: LD_INT 23
3941: PPUSH
3942: LD_INT 9
3944: PPUSH
3945: LD_INT 0
3947: PPUSH
3948: CALL_OW 50
// end ;
3952: GO 3817
3954: POP
3955: POP
// end else
3956: GO 4121
// if gammaCommander = 2 then
3958: LD_EXP 13
3962: PUSH
3963: LD_INT 2
3965: EQUAL
3966: IFFALSE 4121
// begin bc_type := b_bunker ;
3968: LD_ADDR_OWVAR 42
3972: PUSH
3973: LD_INT 32
3975: ST_TO_ADDR
// bc_level := 6 ;
3976: LD_ADDR_OWVAR 43
3980: PUSH
3981: LD_INT 6
3983: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3984: LD_ADDR_VAR 0 4
3988: PUSH
3989: LD_INT 67
3991: PPUSH
3992: LD_INT 36
3994: PPUSH
3995: LD_INT 5
3997: PPUSH
3998: CALL_OW 47
4002: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
4003: LD_VAR 0 4
4007: PPUSH
4008: LD_INT 4
4010: PPUSH
4011: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
4015: LD_ADDR_VAR 0 4
4019: PUSH
4020: LD_INT 61
4022: PPUSH
4023: LD_INT 40
4025: PPUSH
4026: LD_INT 5
4028: PPUSH
4029: CALL_OW 47
4033: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
4034: LD_VAR 0 4
4038: PPUSH
4039: LD_INT 5
4041: PPUSH
4042: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
4046: LD_ADDR_OWVAR 37
4050: PUSH
4051: LD_INT 2
4053: ST_TO_ADDR
// vc_engine := engine_combustion ;
4054: LD_ADDR_OWVAR 39
4058: PUSH
4059: LD_INT 1
4061: ST_TO_ADDR
// vc_control := control_manual ;
4062: LD_ADDR_OWVAR 38
4066: PUSH
4067: LD_INT 1
4069: ST_TO_ADDR
// vc_weapon := us_crane ;
4070: LD_ADDR_OWVAR 40
4074: PUSH
4075: LD_INT 13
4077: ST_TO_ADDR
// veh := CreateVehicle ;
4078: LD_ADDR_VAR 0 5
4082: PUSH
4083: CALL_OW 45
4087: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4088: LD_VAR 0 5
4092: PPUSH
4093: LD_INT 3
4095: PPUSH
4096: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4100: LD_VAR 0 5
4104: PPUSH
4105: LD_INT 61
4107: PPUSH
4108: LD_INT 23
4110: PPUSH
4111: LD_INT 9
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 50
// end ; end ;
4121: LD_VAR 0 1
4125: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
4131: PPUSH
// uc_side := 1 ;
4132: LD_ADDR_OWVAR 20
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// uc_nation := 1 ;
4140: LD_ADDR_OWVAR 21
4144: PUSH
4145: LD_INT 1
4147: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 26
4152: PUSH
4153: LD_STRING Denis
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 39457 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4170: LD_EXP 26
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4185: LD_ADDR_EXP 27
4189: PUSH
4190: LD_STRING Joan
4192: PPUSH
4193: LD_EXP 1
4197: NOT
4198: PPUSH
4199: LD_STRING 06c_
4201: PPUSH
4202: CALL 39457 0 3
4206: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4207: LD_EXP 27
4211: PPUSH
4212: LD_INT 4
4214: PPUSH
4215: LD_INT 0
4217: PPUSH
4218: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4222: LD_ADDR_EXP 24
4226: PUSH
4227: LD_STRING Mike
4229: PPUSH
4230: LD_EXP 1
4234: NOT
4235: PPUSH
4236: LD_STRING 06c_
4238: PPUSH
4239: CALL 39457 0 3
4243: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4244: LD_EXP 24
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_INT 0
4254: PPUSH
4255: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4259: LD_STRING GladstoneIn07
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL_OW 30
4269: NOT
4270: IFFALSE 4350
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4272: LD_ADDR_EXP 21
4276: PUSH
4277: LD_STRING Gladstone
4279: PPUSH
4280: LD_EXP 1
4284: NOT
4285: PPUSH
4286: LD_STRING 06c_
4288: PPUSH
4289: CALL 39457 0 3
4293: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4294: LD_EXP 21
4298: NOT
4299: PUSH
4300: LD_STRING GladstoneStayInDelta
4302: PPUSH
4303: LD_INT 0
4305: PPUSH
4306: CALL_OW 30
4310: AND
4311: IFFALSE 4335
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4313: LD_ADDR_EXP 21
4317: PUSH
4318: LD_STRING Gladstone
4320: PPUSH
4321: LD_EXP 1
4325: NOT
4326: PPUSH
4327: LD_STRING 05_
4329: PPUSH
4330: CALL 39457 0 3
4334: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4335: LD_EXP 21
4339: PPUSH
4340: LD_INT 4
4342: PPUSH
4343: LD_INT 0
4345: PPUSH
4346: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4350: LD_STRING LisaStayInDelta
4352: PPUSH
4353: LD_INT 0
4355: PPUSH
4356: CALL_OW 30
4360: IFFALSE 4396
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4362: LD_ADDR_EXP 19
4366: PUSH
4367: LD_STRING Lisa
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_STRING 05_
4375: PPUSH
4376: CALL 39457 0 3
4380: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4381: LD_EXP 19
4385: PPUSH
4386: LD_INT 4
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4396: LD_STRING BobbyStayInDelta
4398: PPUSH
4399: LD_INT 0
4401: PPUSH
4402: CALL_OW 30
4406: IFFALSE 4442
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4408: LD_ADDR_EXP 17
4412: PUSH
4413: LD_STRING Bobby
4415: PPUSH
4416: LD_INT 1
4418: PPUSH
4419: LD_STRING 05_
4421: PPUSH
4422: CALL 39457 0 3
4426: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4427: LD_EXP 17
4431: PPUSH
4432: LD_INT 4
4434: PPUSH
4435: LD_INT 0
4437: PPUSH
4438: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4442: LD_STRING CyrusStayInDelta
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL_OW 30
4452: IFFALSE 4488
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4454: LD_ADDR_EXP 18
4458: PUSH
4459: LD_STRING Cyrus
4461: PPUSH
4462: LD_INT 1
4464: PPUSH
4465: LD_STRING 05_
4467: PPUSH
4468: CALL 39457 0 3
4472: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4473: LD_EXP 18
4477: PPUSH
4478: LD_INT 4
4480: PPUSH
4481: LD_INT 0
4483: PPUSH
4484: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4488: LD_STRING BrownStayInDelta
4490: PPUSH
4491: LD_INT 0
4493: PPUSH
4494: CALL_OW 30
4498: IFFALSE 4534
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4500: LD_ADDR_EXP 15
4504: PUSH
4505: LD_STRING Brown
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_STRING 05_
4513: PPUSH
4514: CALL 39457 0 3
4518: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4519: LD_EXP 15
4523: PPUSH
4524: LD_INT 4
4526: PPUSH
4527: LD_INT 0
4529: PPUSH
4530: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4534: LD_STRING DonaldsonStayInDelta
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 30
4544: IFFALSE 4580
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4546: LD_ADDR_EXP 16
4550: PUSH
4551: LD_STRING Donaldson
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_STRING 05_
4559: PPUSH
4560: CALL 39457 0 3
4564: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4565: LD_EXP 16
4569: PPUSH
4570: LD_INT 4
4572: PPUSH
4573: LD_INT 0
4575: PPUSH
4576: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4580: LD_ADDR_VAR 0 4
4584: PUSH
4585: LD_STRING OthersStayInDelta
4587: PPUSH
4588: CALL_OW 31
4592: ST_TO_ADDR
// if others > 2 then
4593: LD_VAR 0 4
4597: PUSH
4598: LD_INT 2
4600: GREATER
4601: IFFALSE 4664
// begin for j := 1 to 2 do
4603: LD_ADDR_VAR 0 3
4607: PUSH
4608: DOUBLE
4609: LD_INT 1
4611: DEC
4612: ST_TO_ADDR
4613: LD_INT 2
4615: PUSH
4616: FOR_TO
4617: IFFALSE 4660
// begin SetTag ( others [ j ] , 107 ) ;
4619: LD_VAR 0 4
4623: PUSH
4624: LD_VAR 0 3
4628: ARRAY
4629: PPUSH
4630: LD_INT 107
4632: PPUSH
4633: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4637: LD_VAR 0 4
4641: PUSH
4642: LD_VAR 0 3
4646: ARRAY
4647: PPUSH
4648: LD_INT 4
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL_OW 49
// end ;
4658: GO 4616
4660: POP
4661: POP
// end else
4662: GO 4725
// begin for j := 1 to others do
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_VAR 0 4
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4723
// begin SetTag ( others [ i ] , 107 ) ;
4682: LD_VAR 0 4
4686: PUSH
4687: LD_VAR 0 2
4691: ARRAY
4692: PPUSH
4693: LD_INT 107
4695: PPUSH
4696: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4700: LD_VAR 0 4
4704: PUSH
4705: LD_VAR 0 3
4709: ARRAY
4710: PPUSH
4711: LD_INT 4
4713: PPUSH
4714: LD_INT 0
4716: PPUSH
4717: CALL_OW 49
// end ;
4721: GO 4679
4723: POP
4724: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4725: LD_ADDR_VAR 0 4
4729: PUSH
4730: LD_STRING 06_other_apemans
4732: PPUSH
4733: CALL_OW 31
4737: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4738: LD_VAR 0 4
4742: PUSH
4743: LD_INT 3
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: LD_INT 2
4751: PUSH
4752: LD_INT 1
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: PUSH
4761: LD_OWVAR 67
4765: ARRAY
4766: GREATEREQUAL
4767: IFFALSE 4800
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 2
4779: PUSH
4780: LD_INT 2
4782: PUSH
4783: LD_INT 1
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: PUSH
4792: LD_OWVAR 67
4796: ARRAY
4797: ST_TO_ADDR
4798: GO 4810
// j := others ;
4800: LD_ADDR_VAR 0 3
4804: PUSH
4805: LD_VAR 0 4
4809: ST_TO_ADDR
// for i := 1 to j do
4810: LD_ADDR_VAR 0 2
4814: PUSH
4815: DOUBLE
4816: LD_INT 1
4818: DEC
4819: ST_TO_ADDR
4820: LD_VAR 0 3
4824: PUSH
4825: FOR_TO
4826: IFFALSE 4851
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4828: LD_VAR 0 4
4832: PUSH
4833: LD_VAR 0 2
4837: ARRAY
4838: PPUSH
4839: LD_INT 4
4841: PPUSH
4842: LD_INT 0
4844: PPUSH
4845: CALL_OW 49
4849: GO 4825
4851: POP
4852: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4853: LD_INT 4
4855: PPUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 1
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PPUSH
4880: CALL_OW 70
4884: PPUSH
4885: LD_INT 53
4887: PPUSH
4888: LD_INT 19
4890: PPUSH
4891: CALL_OW 111
// end ;
4895: LD_VAR 0 1
4899: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4900: LD_INT 0
4902: PPUSH
4903: PPUSH
4904: PPUSH
4905: PPUSH
4906: PPUSH
4907: PPUSH
4908: PPUSH
4909: PPUSH
4910: PPUSH
4911: PPUSH
4912: PPUSH
4913: PPUSH
4914: PPUSH
4915: PPUSH
4916: PPUSH
// prefix := 07c_ ;
4917: LD_ADDR_VAR 0 11
4921: PUSH
4922: LD_STRING 07c_
4924: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4925: LD_ADDR_VAR 0 9
4929: PUSH
4930: LD_STRING 07_vehicles
4932: PPUSH
4933: EMPTY
4934: PPUSH
4935: CALL_OW 30
4939: ST_TO_ADDR
// if not vehicles and debug then
4940: LD_VAR 0 9
4944: NOT
4945: PUSH
4946: LD_EXP 1
4950: AND
4951: IFFALSE 4976
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4953: LD_ADDR_VAR 0 9
4957: PUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 1
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 4
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: ST_TO_ADDR
// if not vehicles then
4976: LD_VAR 0 9
4980: NOT
4981: IFFALSE 5038
// begin area := westGammaSupportArea ;
4983: LD_ADDR_VAR 0 12
4987: PUSH
4988: LD_INT 16
4990: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4991: LD_ADDR_VAR 0 15
4995: PUSH
4996: LD_INT 37
4998: PUSH
4999: LD_INT 70
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
5006: LD_ADDR_VAR 0 14
5010: PUSH
5011: LD_INT 43
5013: PUSH
5014: LD_INT 67
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: ST_TO_ADDR
// dir := 1 ;
5021: LD_ADDR_VAR 0 13
5025: PUSH
5026: LD_INT 1
5028: ST_TO_ADDR
// wait ( 2 2$00 ) ;
5029: LD_INT 4200
5031: PPUSH
5032: CALL_OW 67
// end else
5036: GO 5084
// begin area := southGammaSupportArea ;
5038: LD_ADDR_VAR 0 12
5042: PUSH
5043: LD_INT 5
5045: ST_TO_ADDR
// point := [ 87 , 147 ] ;
5046: LD_ADDR_VAR 0 15
5050: PUSH
5051: LD_INT 87
5053: PUSH
5054: LD_INT 147
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
5061: LD_ADDR_VAR 0 14
5065: PUSH
5066: LD_INT 74
5068: PUSH
5069: LD_INT 129
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: ST_TO_ADDR
// dir := 0 ;
5076: LD_ADDR_VAR 0 13
5080: PUSH
5081: LD_INT 0
5083: ST_TO_ADDR
// end ; squad := [ ] ;
5084: LD_ADDR_VAR 0 6
5088: PUSH
5089: EMPTY
5090: ST_TO_ADDR
// tmp := [ ] ;
5091: LD_ADDR_VAR 0 7
5095: PUSH
5096: EMPTY
5097: ST_TO_ADDR
// tmpVehs := [ ] ;
5098: LD_ADDR_VAR 0 8
5102: PUSH
5103: EMPTY
5104: ST_TO_ADDR
// uc_side := 1 ;
5105: LD_ADDR_OWVAR 20
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// uc_nation := 1 ;
5113: LD_ADDR_OWVAR 21
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// if vehicles then
5121: LD_VAR 0 9
5125: IFFALSE 5281
// begin k := 1 ;
5127: LD_ADDR_VAR 0 3
5131: PUSH
5132: LD_INT 1
5134: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
5135: LD_ADDR_VAR 0 2
5139: PUSH
5140: DOUBLE
5141: LD_INT 1
5143: DEC
5144: ST_TO_ADDR
5145: LD_VAR 0 9
5149: PUSH
5150: LD_INT 4
5152: DIV
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5279
// begin vc_chassis := vehicles [ k ] ;
5157: LD_ADDR_OWVAR 37
5161: PUSH
5162: LD_VAR 0 9
5166: PUSH
5167: LD_VAR 0 3
5171: ARRAY
5172: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
5173: LD_ADDR_OWVAR 39
5177: PUSH
5178: LD_VAR 0 9
5182: PUSH
5183: LD_VAR 0 3
5187: PUSH
5188: LD_INT 1
5190: PLUS
5191: ARRAY
5192: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
5193: LD_ADDR_OWVAR 38
5197: PUSH
5198: LD_VAR 0 9
5202: PUSH
5203: LD_VAR 0 3
5207: PUSH
5208: LD_INT 2
5210: PLUS
5211: ARRAY
5212: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
5213: LD_ADDR_OWVAR 40
5217: PUSH
5218: LD_VAR 0 9
5222: PUSH
5223: LD_VAR 0 3
5227: PUSH
5228: LD_INT 3
5230: PLUS
5231: ARRAY
5232: ST_TO_ADDR
// k := k + 4 ;
5233: LD_ADDR_VAR 0 3
5237: PUSH
5238: LD_VAR 0 3
5242: PUSH
5243: LD_INT 4
5245: PLUS
5246: ST_TO_ADDR
// veh := CreateVehicle ;
5247: LD_ADDR_VAR 0 10
5251: PUSH
5252: CALL_OW 45
5256: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5257: LD_ADDR_VAR 0 8
5261: PUSH
5262: LD_VAR 0 8
5266: PPUSH
5267: LD_VAR 0 10
5271: PPUSH
5272: CALL 76906 0 2
5276: ST_TO_ADDR
// end ;
5277: GO 5154
5279: POP
5280: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5281: LD_ADDR_EXP 14
5285: PUSH
5286: LD_STRING JMM
5288: PPUSH
5289: LD_EXP 1
5293: NOT
5294: PPUSH
5295: LD_VAR 0 11
5299: PPUSH
5300: CALL 39457 0 3
5304: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5305: LD_EXP 13
5309: PUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 3
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: IN
5320: PUSH
5321: LD_EXP 15
5325: NOT
5326: AND
5327: IFFALSE 5388
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5329: LD_ADDR_EXP 15
5333: PUSH
5334: LD_STRING Brown
5336: PPUSH
5337: LD_EXP 1
5341: NOT
5342: PPUSH
5343: LD_VAR 0 11
5347: PPUSH
5348: CALL 39457 0 3
5352: ST_TO_ADDR
// if Brown then
5353: LD_EXP 15
5357: IFFALSE 5388
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5359: LD_ADDR_VAR 0 7
5363: PUSH
5364: LD_VAR 0 7
5368: PPUSH
5369: LD_VAR 0 7
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: PPUSH
5378: LD_EXP 15
5382: PPUSH
5383: CALL_OW 1
5387: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5388: LD_EXP 13
5392: PUSH
5393: LD_INT 2
5395: PUSH
5396: LD_INT 3
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: IN
5403: PUSH
5404: LD_EXP 16
5408: NOT
5409: AND
5410: IFFALSE 5471
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5412: LD_ADDR_EXP 16
5416: PUSH
5417: LD_STRING Donaldson
5419: PPUSH
5420: LD_EXP 1
5424: NOT
5425: PPUSH
5426: LD_VAR 0 11
5430: PPUSH
5431: CALL 39457 0 3
5435: ST_TO_ADDR
// if Donaldson then
5436: LD_EXP 16
5440: IFFALSE 5471
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5442: LD_ADDR_VAR 0 7
5446: PUSH
5447: LD_VAR 0 7
5451: PPUSH
5452: LD_VAR 0 7
5456: PUSH
5457: LD_INT 1
5459: PLUS
5460: PPUSH
5461: LD_EXP 16
5465: PPUSH
5466: CALL_OW 1
5470: ST_TO_ADDR
// end ; if not Bobby then
5471: LD_EXP 17
5475: NOT
5476: IFFALSE 5534
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5478: LD_ADDR_EXP 17
5482: PUSH
5483: LD_STRING Bobby
5485: PPUSH
5486: LD_INT 1
5488: PPUSH
5489: LD_VAR 0 11
5493: PPUSH
5494: CALL 39457 0 3
5498: ST_TO_ADDR
// if Bobby then
5499: LD_EXP 17
5503: IFFALSE 5534
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5505: LD_ADDR_VAR 0 7
5509: PUSH
5510: LD_VAR 0 7
5514: PPUSH
5515: LD_VAR 0 7
5519: PUSH
5520: LD_INT 1
5522: PLUS
5523: PPUSH
5524: LD_EXP 17
5528: PPUSH
5529: CALL_OW 1
5533: ST_TO_ADDR
// end ; if not Cyrus then
5534: LD_EXP 18
5538: NOT
5539: IFFALSE 5597
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5541: LD_ADDR_EXP 18
5545: PUSH
5546: LD_STRING Cyrus
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: LD_VAR 0 11
5556: PPUSH
5557: CALL 39457 0 3
5561: ST_TO_ADDR
// if Cyrus then
5562: LD_EXP 18
5566: IFFALSE 5597
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5568: LD_ADDR_VAR 0 7
5572: PUSH
5573: LD_VAR 0 7
5577: PPUSH
5578: LD_VAR 0 7
5582: PUSH
5583: LD_INT 1
5585: PLUS
5586: PPUSH
5587: LD_EXP 18
5591: PPUSH
5592: CALL_OW 1
5596: ST_TO_ADDR
// end ; if not Lisa then
5597: LD_EXP 19
5601: NOT
5602: IFFALSE 5663
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5604: LD_ADDR_EXP 19
5608: PUSH
5609: LD_STRING Lisa
5611: PPUSH
5612: LD_EXP 1
5616: NOT
5617: PPUSH
5618: LD_VAR 0 11
5622: PPUSH
5623: CALL 39457 0 3
5627: ST_TO_ADDR
// if Lisa then
5628: LD_EXP 19
5632: IFFALSE 5663
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5634: LD_ADDR_VAR 0 7
5638: PUSH
5639: LD_VAR 0 7
5643: PPUSH
5644: LD_VAR 0 7
5648: PUSH
5649: LD_INT 1
5651: PLUS
5652: PPUSH
5653: LD_EXP 19
5657: PPUSH
5658: CALL_OW 1
5662: ST_TO_ADDR
// end ; if not Frank then
5663: LD_EXP 20
5667: NOT
5668: IFFALSE 5729
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5670: LD_ADDR_EXP 20
5674: PUSH
5675: LD_STRING Frank
5677: PPUSH
5678: LD_EXP 1
5682: NOT
5683: PPUSH
5684: LD_VAR 0 11
5688: PPUSH
5689: CALL 39457 0 3
5693: ST_TO_ADDR
// if Frank then
5694: LD_EXP 20
5698: IFFALSE 5729
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5700: LD_ADDR_VAR 0 7
5704: PUSH
5705: LD_VAR 0 7
5709: PPUSH
5710: LD_VAR 0 7
5714: PUSH
5715: LD_INT 1
5717: PLUS
5718: PPUSH
5719: LD_EXP 20
5723: PPUSH
5724: CALL_OW 1
5728: ST_TO_ADDR
// end ; if not Kikuchi then
5729: LD_EXP 22
5733: NOT
5734: IFFALSE 5792
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5736: LD_ADDR_EXP 22
5740: PUSH
5741: LD_STRING Kikuchi
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: LD_VAR 0 11
5751: PPUSH
5752: CALL 39457 0 3
5756: ST_TO_ADDR
// if Kikuchi then
5757: LD_EXP 22
5761: IFFALSE 5792
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5763: LD_ADDR_VAR 0 7
5767: PUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: LD_VAR 0 7
5777: PUSH
5778: LD_INT 1
5780: PLUS
5781: PPUSH
5782: LD_EXP 22
5786: PPUSH
5787: CALL_OW 1
5791: ST_TO_ADDR
// end ; if not Gladstone then
5792: LD_EXP 21
5796: NOT
5797: IFFALSE 5858
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5799: LD_ADDR_EXP 21
5803: PUSH
5804: LD_STRING Gladstone
5806: PPUSH
5807: LD_EXP 1
5811: NOT
5812: PPUSH
5813: LD_VAR 0 11
5817: PPUSH
5818: CALL 39457 0 3
5822: ST_TO_ADDR
// if Gladstone then
5823: LD_EXP 21
5827: IFFALSE 5858
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5829: LD_ADDR_VAR 0 7
5833: PUSH
5834: LD_VAR 0 7
5838: PPUSH
5839: LD_VAR 0 7
5843: PUSH
5844: LD_INT 1
5846: PLUS
5847: PPUSH
5848: LD_EXP 21
5852: PPUSH
5853: CALL_OW 1
5857: ST_TO_ADDR
// end ; if not Khatam then
5858: LD_EXP 23
5862: NOT
5863: IFFALSE 5921
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5865: LD_ADDR_EXP 23
5869: PUSH
5870: LD_STRING Khatam
5872: PPUSH
5873: LD_INT 1
5875: PPUSH
5876: LD_VAR 0 11
5880: PPUSH
5881: CALL 39457 0 3
5885: ST_TO_ADDR
// if Khatam then
5886: LD_EXP 23
5890: IFFALSE 5921
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5892: LD_ADDR_VAR 0 7
5896: PUSH
5897: LD_VAR 0 7
5901: PPUSH
5902: LD_VAR 0 7
5906: PUSH
5907: LD_INT 1
5909: PLUS
5910: PPUSH
5911: LD_EXP 23
5915: PPUSH
5916: CALL_OW 1
5920: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5921: LD_ADDR_VAR 0 5
5925: PUSH
5926: LD_STRING 07c_others
5928: PPUSH
5929: CALL_OW 31
5933: ST_TO_ADDR
// squad := others ;
5934: LD_ADDR_VAR 0 6
5938: PUSH
5939: LD_VAR 0 5
5943: ST_TO_ADDR
// if others then
5944: LD_VAR 0 5
5948: IFFALSE 6048
// for i in others do
5950: LD_ADDR_VAR 0 2
5954: PUSH
5955: LD_VAR 0 5
5959: PUSH
5960: FOR_IN
5961: IFFALSE 6046
// begin SetTag ( i , 108 ) ;
5963: LD_VAR 0 2
5967: PPUSH
5968: LD_INT 108
5970: PPUSH
5971: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5975: LD_VAR 0 2
5979: PPUSH
5980: CALL_OW 257
5984: PUSH
5985: LD_INT 3
5987: EQUAL
5988: IFFALSE 6015
// tmp := Insert ( tmp , 1 , i ) else
5990: LD_ADDR_VAR 0 7
5994: PUSH
5995: LD_VAR 0 7
5999: PPUSH
6000: LD_INT 1
6002: PPUSH
6003: LD_VAR 0 2
6007: PPUSH
6008: CALL_OW 2
6012: ST_TO_ADDR
6013: GO 6044
// tmp := Replace ( tmp , tmp + 1 , i ) ;
6015: LD_ADDR_VAR 0 7
6019: PUSH
6020: LD_VAR 0 7
6024: PPUSH
6025: LD_VAR 0 7
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 2
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// end ;
6044: GO 5960
6046: POP
6047: POP
// if tmp then
6048: LD_VAR 0 7
6052: IFFALSE 6252
// begin for i in tmp do
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: LD_VAR 0 7
6063: PUSH
6064: FOR_IN
6065: IFFALSE 6250
// begin SetDir ( i , dir ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 13
6076: PPUSH
6077: CALL_OW 233
// if tmpVehs then
6081: LD_VAR 0 8
6085: IFFALSE 6175
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
6087: LD_VAR 0 8
6091: PUSH
6092: LD_INT 1
6094: ARRAY
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6103: LD_VAR 0 8
6107: PUSH
6108: LD_INT 1
6110: ARRAY
6111: PPUSH
6112: LD_VAR 0 15
6116: PUSH
6117: LD_INT 1
6119: ARRAY
6120: PPUSH
6121: LD_VAR 0 15
6125: PUSH
6126: LD_INT 2
6128: ARRAY
6129: PPUSH
6130: LD_INT 0
6132: PPUSH
6133: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6137: LD_VAR 0 2
6141: PPUSH
6142: LD_VAR 0 8
6146: PUSH
6147: LD_INT 1
6149: ARRAY
6150: PPUSH
6151: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6155: LD_ADDR_VAR 0 8
6159: PUSH
6160: LD_VAR 0 8
6164: PPUSH
6165: LD_INT 1
6167: PPUSH
6168: CALL_OW 3
6172: ST_TO_ADDR
// end else
6173: GO 6192
// PlaceUnitArea ( i , area , false ) ;
6175: LD_VAR 0 2
6179: PPUSH
6180: LD_VAR 0 12
6184: PPUSH
6185: LD_INT 0
6187: PPUSH
6188: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6192: LD_VAR 0 2
6196: PPUSH
6197: LD_VAR 0 14
6201: PUSH
6202: LD_INT 1
6204: ARRAY
6205: PPUSH
6206: LD_VAR 0 14
6210: PUSH
6211: LD_INT 2
6213: ARRAY
6214: PPUSH
6215: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6219: LD_INT 35
6221: PPUSH
6222: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6226: LD_VAR 0 12
6230: PPUSH
6231: LD_INT 22
6233: PUSH
6234: LD_INT 1
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 70
6245: NOT
6246: IFFALSE 6219
// end ;
6248: GO 6064
6250: POP
6251: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6252: LD_EXP 14
6256: PPUSH
6257: LD_VAR 0 15
6261: PUSH
6262: LD_INT 1
6264: ARRAY
6265: PPUSH
6266: LD_VAR 0 15
6270: PUSH
6271: LD_INT 2
6273: ARRAY
6274: PPUSH
6275: LD_INT 0
6277: PPUSH
6278: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6282: LD_EXP 14
6286: PPUSH
6287: LD_VAR 0 14
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: LD_VAR 0 14
6300: PUSH
6301: LD_INT 2
6303: ARRAY
6304: PPUSH
6305: CALL_OW 111
// jmmArrival := true ;
6309: LD_ADDR_EXP 8
6313: PUSH
6314: LD_INT 1
6316: ST_TO_ADDR
// end ;
6317: LD_VAR 0 1
6321: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6322: LD_INT 0
6324: PPUSH
6325: PPUSH
6326: PPUSH
6327: PPUSH
6328: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6329: LD_INT 1
6331: PPUSH
6332: LD_INT 17
6334: PPUSH
6335: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6339: LD_INT 2
6341: PPUSH
6342: LD_INT 17
6344: PPUSH
6345: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6349: LD_ADDR_VAR 0 5
6353: PUSH
6354: LD_INT 6
6356: PPUSH
6357: LD_INT 3
6359: PUSH
6360: LD_INT 21
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 70
6378: ST_TO_ADDR
// if tmp then
6379: LD_VAR 0 5
6383: IFFALSE 6407
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6385: LD_VAR 0 5
6389: PPUSH
6390: LD_INT 33
6392: PPUSH
6393: LD_INT 39
6395: PPUSH
6396: CALL_OW 111
// wait ( 0 0$3 ) ;
6400: LD_INT 105
6402: PPUSH
6403: CALL_OW 67
// end ; uc_side := 4 ;
6407: LD_ADDR_OWVAR 20
6411: PUSH
6412: LD_INT 4
6414: ST_TO_ADDR
// uc_nation := 1 ;
6415: LD_ADDR_OWVAR 21
6419: PUSH
6420: LD_INT 1
6422: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6423: LD_ADDR_EXP 28
6427: PUSH
6428: LD_STRING Sikorski
6430: PPUSH
6431: LD_INT 0
6433: PPUSH
6434: LD_STRING 
6436: PPUSH
6437: CALL 39457 0 3
6441: ST_TO_ADDR
// vc_engine := engine_combustion ;
6442: LD_ADDR_OWVAR 39
6446: PUSH
6447: LD_INT 1
6449: ST_TO_ADDR
// vc_control := control_manual ;
6450: LD_ADDR_OWVAR 38
6454: PUSH
6455: LD_INT 1
6457: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6458: LD_ADDR_OWVAR 40
6462: PUSH
6463: LD_INT 6
6465: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6466: LD_ADDR_OWVAR 37
6470: PUSH
6471: LD_INT 4
6473: ST_TO_ADDR
// veh := CreateVehicle ;
6474: LD_ADDR_VAR 0 4
6478: PUSH
6479: CALL_OW 45
6483: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6484: LD_VAR 0 4
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6496: LD_VAR 0 4
6500: PPUSH
6501: LD_INT 4
6503: NEG
6504: PPUSH
6505: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6509: LD_VAR 0 4
6513: PPUSH
6514: LD_INT 70
6516: PPUSH
6517: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6521: LD_VAR 0 4
6525: PPUSH
6526: LD_INT 6
6528: PPUSH
6529: LD_INT 0
6531: PPUSH
6532: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6536: LD_EXP 28
6540: PPUSH
6541: LD_VAR 0 4
6545: PPUSH
6546: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6550: LD_EXP 28
6554: PPUSH
6555: LD_INT 37
6557: PPUSH
6558: LD_INT 30
6560: PPUSH
6561: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6565: LD_INT 10
6567: PPUSH
6568: CALL_OW 67
// InitHc_All ( ) ;
6572: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6576: LD_ADDR_VAR 0 2
6580: PUSH
6581: DOUBLE
6582: LD_INT 1
6584: DEC
6585: ST_TO_ADDR
6586: LD_INT 3
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: LD_INT 2
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_OWVAR 67
6608: ARRAY
6609: PUSH
6610: FOR_TO
6611: IFFALSE 6723
// begin uc_side := 4 ;
6613: LD_ADDR_OWVAR 20
6617: PUSH
6618: LD_INT 4
6620: ST_TO_ADDR
// uc_nation := 1 ;
6621: LD_ADDR_OWVAR 21
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6629: LD_INT 0
6631: PPUSH
6632: LD_INT 1
6634: PPUSH
6635: LD_INT 4
6637: PPUSH
6638: LD_INT 7
6640: PPUSH
6641: CALL_OW 12
6645: PPUSH
6646: CALL_OW 380
// un := CreateHuman ;
6650: LD_ADDR_VAR 0 3
6654: PUSH
6655: CALL_OW 44
6659: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6660: LD_VAR 0 3
6664: PPUSH
6665: LD_INT 3
6667: PPUSH
6668: CALL_OW 233
// SetTag ( un , 101 ) ;
6672: LD_VAR 0 3
6676: PPUSH
6677: LD_INT 101
6679: PPUSH
6680: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6684: LD_VAR 0 3
6688: PPUSH
6689: LD_INT 6
6691: PPUSH
6692: LD_INT 0
6694: PPUSH
6695: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6699: LD_VAR 0 3
6703: PPUSH
6704: LD_INT 25
6706: PPUSH
6707: LD_INT 27
6709: PPUSH
6710: CALL_OW 111
// wait ( 0 0$1 ) ;
6714: LD_INT 35
6716: PPUSH
6717: CALL_OW 67
// end ;
6721: GO 6610
6723: POP
6724: POP
// for i := 1 to 2 do
6725: LD_ADDR_VAR 0 2
6729: PUSH
6730: DOUBLE
6731: LD_INT 1
6733: DEC
6734: ST_TO_ADDR
6735: LD_INT 2
6737: PUSH
6738: FOR_TO
6739: IFFALSE 6851
// begin uc_side := 4 ;
6741: LD_ADDR_OWVAR 20
6745: PUSH
6746: LD_INT 4
6748: ST_TO_ADDR
// uc_nation := 1 ;
6749: LD_ADDR_OWVAR 21
6753: PUSH
6754: LD_INT 1
6756: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6757: LD_INT 0
6759: PPUSH
6760: LD_INT 4
6762: PPUSH
6763: LD_INT 3
6765: PPUSH
6766: LD_INT 5
6768: PPUSH
6769: CALL_OW 12
6773: PPUSH
6774: CALL_OW 380
// un := CreateHuman ;
6778: LD_ADDR_VAR 0 3
6782: PUSH
6783: CALL_OW 44
6787: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6788: LD_VAR 0 3
6792: PPUSH
6793: LD_INT 3
6795: PPUSH
6796: CALL_OW 233
// SetTag ( un , 101 ) ;
6800: LD_VAR 0 3
6804: PPUSH
6805: LD_INT 101
6807: PPUSH
6808: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6812: LD_VAR 0 3
6816: PPUSH
6817: LD_INT 6
6819: PPUSH
6820: LD_INT 0
6822: PPUSH
6823: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6827: LD_VAR 0 3
6831: PPUSH
6832: LD_INT 25
6834: PPUSH
6835: LD_INT 27
6837: PPUSH
6838: CALL_OW 111
// wait ( 0 0$1 ) ;
6842: LD_INT 35
6844: PPUSH
6845: CALL_OW 67
// end ;
6849: GO 6738
6851: POP
6852: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6853: LD_ADDR_VAR 0 2
6857: PUSH
6858: DOUBLE
6859: LD_INT 1
6861: DEC
6862: ST_TO_ADDR
6863: LD_INT 5
6865: PUSH
6866: LD_INT 4
6868: PUSH
6869: LD_INT 3
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: LD_OWVAR 67
6885: ARRAY
6886: PUSH
6887: FOR_TO
6888: IFFALSE 7130
// begin uc_side := 4 ;
6890: LD_ADDR_OWVAR 20
6894: PUSH
6895: LD_INT 4
6897: ST_TO_ADDR
// uc_nation := 1 ;
6898: LD_ADDR_OWVAR 21
6902: PUSH
6903: LD_INT 1
6905: ST_TO_ADDR
// vc_engine := engine_combustion ;
6906: LD_ADDR_OWVAR 39
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// vc_control := control_manual ;
6914: LD_ADDR_OWVAR 38
6918: PUSH
6919: LD_INT 1
6921: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6922: LD_ADDR_OWVAR 40
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 7
6932: PUSH
6933: LD_INT 5
6935: PUSH
6936: LD_INT 4
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: LD_VAR 0 2
6949: PUSH
6950: LD_INT 4
6952: MOD
6953: PUSH
6954: LD_INT 1
6956: PLUS
6957: ARRAY
6958: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6959: LD_ADDR_OWVAR 37
6963: PUSH
6964: LD_INT 3
6966: PUSH
6967: LD_INT 3
6969: PUSH
6970: LD_INT 4
6972: PUSH
6973: LD_INT 4
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: PUSH
6982: LD_VAR 0 2
6986: PUSH
6987: LD_INT 4
6989: MOD
6990: PUSH
6991: LD_INT 1
6993: PLUS
6994: ARRAY
6995: ST_TO_ADDR
// veh := CreateVehicle ;
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: CALL_OW 45
7005: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7006: LD_VAR 0 4
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: CALL_OW 233
// SetTag ( veh , 0 ) ;
7018: LD_VAR 0 4
7022: PPUSH
7023: LD_INT 0
7025: PPUSH
7026: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7030: LD_VAR 0 4
7034: PPUSH
7035: LD_INT 70
7037: PPUSH
7038: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7042: LD_VAR 0 4
7046: PPUSH
7047: LD_INT 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// InitHc ;
7057: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7061: LD_INT 0
7063: PPUSH
7064: LD_INT 3
7066: PPUSH
7067: LD_INT 4
7069: PPUSH
7070: LD_INT 7
7072: PPUSH
7073: CALL_OW 12
7077: PPUSH
7078: CALL_OW 380
// un := CreateHuman ;
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: CALL_OW 44
7091: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7092: LD_VAR 0 3
7096: PPUSH
7097: LD_VAR 0 4
7101: PPUSH
7102: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7106: LD_VAR 0 3
7110: PPUSH
7111: LD_INT 30
7113: PPUSH
7114: LD_INT 22
7116: PPUSH
7117: CALL_OW 111
// wait ( 0 0$3 ) ;
7121: LD_INT 105
7123: PPUSH
7124: CALL_OW 67
// end ;
7128: GO 6887
7130: POP
7131: POP
// wait ( 0 0$10 ) ;
7132: LD_INT 350
7134: PPUSH
7135: CALL_OW 67
// end ;
7139: LD_VAR 0 1
7143: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7144: LD_INT 0
7146: PPUSH
7147: PPUSH
7148: PPUSH
7149: PPUSH
// gammaBase := [ ] ;
7150: LD_ADDR_VAR 0 4
7154: PUSH
7155: EMPTY
7156: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7157: LD_ADDR_VAR 0 5
7161: PUSH
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 3
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 50
7189: PUSH
7190: EMPTY
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 70
7202: ST_TO_ADDR
// for i in buildings do
7203: LD_ADDR_VAR 0 3
7207: PUSH
7208: LD_VAR 0 5
7212: PUSH
7213: FOR_IN
7214: IFFALSE 7651
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7216: LD_VAR 0 3
7220: PPUSH
7221: CALL_OW 266
7225: PUSH
7226: LD_INT 6
7228: PUSH
7229: LD_INT 7
7231: PUSH
7232: LD_INT 8
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: IN
7240: IFFALSE 7354
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7242: LD_ADDR_VAR 0 4
7246: PUSH
7247: LD_VAR 0 4
7251: PUSH
7252: LD_VAR 0 3
7256: PPUSH
7257: CALL_OW 266
7261: PUSH
7262: LD_VAR 0 3
7266: PPUSH
7267: CALL_OW 250
7271: PUSH
7272: LD_VAR 0 3
7276: PPUSH
7277: CALL_OW 251
7281: PUSH
7282: LD_VAR 0 3
7286: PPUSH
7287: CALL_OW 254
7291: PUSH
7292: LD_VAR 0 3
7296: PPUSH
7297: CALL_OW 267
7301: PUSH
7302: LD_VAR 0 3
7306: PPUSH
7307: CALL_OW 248
7311: PUSH
7312: LD_VAR 0 3
7316: PPUSH
7317: LD_INT 1
7319: PPUSH
7320: CALL_OW 268
7324: PUSH
7325: LD_VAR 0 3
7329: PPUSH
7330: LD_INT 2
7332: PPUSH
7333: CALL_OW 268
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: ADD
7351: ST_TO_ADDR
7352: GO 7649
// if GetBType ( i ) = b_bunker then
7354: LD_VAR 0 3
7358: PPUSH
7359: CALL_OW 266
7363: PUSH
7364: LD_INT 32
7366: EQUAL
7367: IFFALSE 7464
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7369: LD_ADDR_VAR 0 4
7373: PUSH
7374: LD_VAR 0 4
7378: PUSH
7379: LD_VAR 0 3
7383: PPUSH
7384: CALL_OW 266
7388: PUSH
7389: LD_VAR 0 3
7393: PPUSH
7394: CALL_OW 250
7398: PUSH
7399: LD_VAR 0 3
7403: PPUSH
7404: CALL_OW 251
7408: PUSH
7409: LD_VAR 0 3
7413: PPUSH
7414: CALL_OW 254
7418: PUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 267
7428: PUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: CALL_OW 248
7438: PUSH
7439: LD_VAR 0 3
7443: PPUSH
7444: CALL_OW 269
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: PUSH
7458: EMPTY
7459: LIST
7460: ADD
7461: ST_TO_ADDR
7462: GO 7649
// if GetBType ( i ) = b_factory then
7464: LD_VAR 0 3
7468: PPUSH
7469: CALL_OW 266
7473: PUSH
7474: LD_INT 3
7476: EQUAL
7477: IFFALSE 7567
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7479: LD_ADDR_VAR 0 4
7483: PUSH
7484: LD_VAR 0 4
7488: PPUSH
7489: LD_INT 1
7491: PPUSH
7492: LD_VAR 0 3
7496: PPUSH
7497: CALL_OW 266
7501: PUSH
7502: LD_VAR 0 3
7506: PPUSH
7507: CALL_OW 250
7511: PUSH
7512: LD_VAR 0 3
7516: PPUSH
7517: CALL_OW 251
7521: PUSH
7522: LD_VAR 0 3
7526: PPUSH
7527: CALL_OW 254
7531: PUSH
7532: LD_VAR 0 3
7536: PPUSH
7537: CALL_OW 267
7541: PUSH
7542: LD_VAR 0 3
7546: PPUSH
7547: CALL_OW 248
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 2
7564: ST_TO_ADDR
7565: GO 7649
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7567: LD_ADDR_VAR 0 4
7571: PUSH
7572: LD_VAR 0 4
7576: PUSH
7577: LD_VAR 0 3
7581: PPUSH
7582: CALL_OW 266
7586: PUSH
7587: LD_VAR 0 3
7591: PPUSH
7592: CALL_OW 250
7596: PUSH
7597: LD_VAR 0 3
7601: PPUSH
7602: CALL_OW 251
7606: PUSH
7607: LD_VAR 0 3
7611: PPUSH
7612: CALL_OW 254
7616: PUSH
7617: LD_VAR 0 3
7621: PPUSH
7622: CALL_OW 267
7626: PUSH
7627: LD_VAR 0 3
7631: PPUSH
7632: CALL_OW 248
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: ADD
7648: ST_TO_ADDR
// end ;
7649: GO 7213
7651: POP
7652: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7653: LD_VAR 0 4
7657: PPUSH
7658: LD_STRING 08_GammaBase
7660: PPUSH
7661: CALL_OW 39
// end ;
7665: LD_VAR 0 2
7669: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7670: LD_INT 0
7672: PPUSH
7673: PPUSH
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7679: LD_ADDR_VAR 0 3
7683: PUSH
7684: LD_INT 17
7686: PPUSH
7687: LD_INT 22
7689: PUSH
7690: LD_INT 1
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 21
7702: PUSH
7703: LD_INT 3
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 3
7716: PUSH
7717: LD_INT 33
7719: PUSH
7720: LD_INT 2
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: PPUSH
7736: CALL_OW 70
7740: ST_TO_ADDR
// if tmp then
7741: LD_VAR 0 3
7745: IFFALSE 7864
// begin for i in tmp do
7747: LD_ADDR_VAR 0 2
7751: PUSH
7752: LD_VAR 0 3
7756: PUSH
7757: FOR_IN
7758: IFFALSE 7789
// begin SetSide ( i , 4 ) ;
7760: LD_VAR 0 2
7764: PPUSH
7765: LD_INT 4
7767: PPUSH
7768: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7772: LD_VAR 0 2
7776: PPUSH
7777: LD_INT 42
7779: PPUSH
7780: LD_INT 22
7782: PPUSH
7783: CALL_OW 111
// end ;
7787: GO 7757
7789: POP
7790: POP
// repeat wait ( 0 0$3 ) ;
7791: LD_INT 105
7793: PPUSH
7794: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7798: LD_VAR 0 3
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: LD_INT 16
7808: PPUSH
7809: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
7813: LD_VAR 0 3
7817: PPUSH
7818: LD_INT 95
7820: PUSH
7821: LD_INT 17
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PPUSH
7828: CALL_OW 72
7832: NOT
7833: IFFALSE 7791
// for i in tmp do
7835: LD_ADDR_VAR 0 2
7839: PUSH
7840: LD_VAR 0 3
7844: PUSH
7845: FOR_IN
7846: IFFALSE 7862
// SetSide ( i , 1 ) ;
7848: LD_VAR 0 2
7852: PPUSH
7853: LD_INT 1
7855: PPUSH
7856: CALL_OW 235
7860: GO 7845
7862: POP
7863: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
7864: LD_ADDR_VAR 0 3
7868: PUSH
7869: LD_INT 17
7871: PPUSH
7872: LD_INT 22
7874: PUSH
7875: LD_INT 1
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 33
7884: PUSH
7885: LD_INT 2
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 70
7900: ST_TO_ADDR
// if tmp then
7901: LD_VAR 0 3
7905: IFFALSE 7929
// begin ComMoveXY ( tmp , 40 , 32 ) ;
7907: LD_VAR 0 3
7911: PPUSH
7912: LD_INT 40
7914: PPUSH
7915: LD_INT 32
7917: PPUSH
7918: CALL_OW 111
// wait ( 0 0$3 ) ;
7922: LD_INT 105
7924: PPUSH
7925: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7929: LD_ADDR_VAR 0 3
7933: PUSH
7934: LD_INT 17
7936: PPUSH
7937: LD_INT 22
7939: PUSH
7940: LD_INT 1
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 2
7949: PUSH
7950: LD_INT 21
7952: PUSH
7953: LD_INT 2
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 21
7962: PUSH
7963: LD_INT 3
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: LIST
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 70
7983: ST_TO_ADDR
// if tmp then
7984: LD_VAR 0 3
7988: IFFALSE 8136
// begin repeat wait ( 0 0$1 ) ;
7990: LD_INT 35
7992: PPUSH
7993: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: LD_INT 17
8004: PPUSH
8005: LD_INT 22
8007: PUSH
8008: LD_INT 1
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 2
8017: PUSH
8018: LD_INT 21
8020: PUSH
8021: LD_INT 2
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 21
8030: PUSH
8031: LD_INT 3
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 70
8051: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8052: LD_ADDR_VAR 0 2
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 4
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 2
8069: PUSH
8070: LD_INT 25
8072: PUSH
8073: LD_INT 1
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 21
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 69
8103: PUSH
8104: FOR_IN
8105: IFFALSE 8127
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8107: LD_VAR 0 2
8111: PPUSH
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 1
8119: ARRAY
8120: PPUSH
8121: CALL_OW 115
8125: GO 8104
8127: POP
8128: POP
// until not tmp ;
8129: LD_VAR 0 3
8133: NOT
8134: IFFALSE 7990
// end ; wait ( 0 0$2 ) ;
8136: LD_INT 70
8138: PPUSH
8139: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8143: LD_ADDR_VAR 0 3
8147: PUSH
8148: LD_INT 22
8150: PUSH
8151: LD_INT 4
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PPUSH
8158: CALL_OW 69
8162: ST_TO_ADDR
// AgressiveMove ( tmp , [ [ 55 , 62 ] ] ) ;
8163: LD_VAR 0 3
8167: PPUSH
8168: LD_INT 55
8170: PUSH
8171: LD_INT 62
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: EMPTY
8179: LIST
8180: PPUSH
8181: CALL 79510 0 2
// AddComWait ( tmp , 0 0$05 ) ;
8185: LD_VAR 0 3
8189: PPUSH
8190: LD_INT 175
8192: PPUSH
8193: CALL_OW 202
// wait ( 0 0$5 ) ;
8197: LD_INT 175
8199: PPUSH
8200: CALL_OW 67
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
8204: LD_VAR 0 3
8208: PPUSH
8209: LD_INT 120
8211: PUSH
8212: LD_INT 101
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PPUSH
8219: CALL_OW 72
8223: PPUSH
8224: LD_INT 58
8226: PPUSH
8227: LD_INT 96
8229: PPUSH
8230: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8234: LD_VAR 0 3
8238: PPUSH
8239: LD_INT 120
8241: PUSH
8242: LD_INT 101
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 72
8253: PPUSH
8254: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
8258: LD_VAR 0 3
8262: PPUSH
8263: LD_INT 120
8265: PUSH
8266: LD_INT 101
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 25
8275: PUSH
8276: LD_INT 4
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PPUSH
8287: CALL_OW 72
8291: PPUSH
8292: LD_INT 52
8294: PPUSH
8295: LD_INT 93
8297: PPUSH
8298: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8302: LD_VAR 0 3
8306: PPUSH
8307: LD_INT 120
8309: PUSH
8310: LD_INT 101
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 25
8319: PUSH
8320: LD_INT 4
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PPUSH
8331: CALL_OW 72
8335: PPUSH
8336: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8340: LD_ADDR_VAR 0 7
8344: PUSH
8345: LD_VAR 0 3
8349: PPUSH
8350: LD_INT 21
8352: PUSH
8353: LD_INT 2
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PPUSH
8360: CALL_OW 72
8364: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8365: LD_ADDR_VAR 0 4
8369: PUSH
8370: LD_INT 81
8372: PUSH
8373: LD_INT 1
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PPUSH
8380: CALL_OW 69
8384: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8385: LD_ADDR_VAR 0 5
8389: PUSH
8390: LD_INT 57
8392: PUSH
8393: LD_INT 66
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: LD_INT 62
8402: PUSH
8403: LD_INT 58
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8414: LD_INT 35
8416: PPUSH
8417: CALL_OW 67
// for i in filter do
8421: LD_ADDR_VAR 0 2
8425: PUSH
8426: LD_VAR 0 7
8430: PUSH
8431: FOR_IN
8432: IFFALSE 8871
// begin if IsDead ( i ) then
8434: LD_VAR 0 2
8438: PPUSH
8439: CALL_OW 301
8443: IFFALSE 8463
// begin filter := filter diff i ;
8445: LD_ADDR_VAR 0 7
8449: PUSH
8450: LD_VAR 0 7
8454: PUSH
8455: LD_VAR 0 2
8459: DIFF
8460: ST_TO_ADDR
// continue ;
8461: GO 8431
// end ; tmp := IsDrivenBy ( i ) ;
8463: LD_ADDR_VAR 0 3
8467: PUSH
8468: LD_VAR 0 2
8472: PPUSH
8473: CALL_OW 311
8477: ST_TO_ADDR
// if not tmp then
8478: LD_VAR 0 3
8482: NOT
8483: IFFALSE 8487
// continue ;
8485: GO 8431
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8487: LD_VAR 0 2
8491: PPUSH
8492: CALL_OW 261
8496: PUSH
8497: LD_INT 30
8499: GREATER
8500: PUSH
8501: LD_VAR 0 2
8505: PPUSH
8506: CALL_OW 110
8510: PUSH
8511: LD_INT 2
8513: EQUAL
8514: AND
8515: IFFALSE 8531
// SetTag ( i , 0 ) else
8517: LD_VAR 0 2
8521: PPUSH
8522: LD_INT 0
8524: PPUSH
8525: CALL_OW 109
8529: GO 8575
// if GetTag ( i ) = 2 then
8531: LD_VAR 0 2
8535: PPUSH
8536: CALL_OW 110
8540: PUSH
8541: LD_INT 2
8543: EQUAL
8544: IFFALSE 8575
// begin ComMoveXY ( i , 52 , 50 ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_INT 52
8553: PPUSH
8554: LD_INT 50
8556: PPUSH
8557: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8561: LD_VAR 0 2
8565: PPUSH
8566: LD_EXP 31
8570: PPUSH
8571: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8575: LD_VAR 0 2
8579: PPUSH
8580: CALL_OW 256
8584: PUSH
8585: LD_INT 600
8587: GREATEREQUAL
8588: PUSH
8589: LD_VAR 0 2
8593: PPUSH
8594: CALL_OW 110
8598: NOT
8599: AND
8600: IFFALSE 8626
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8602: LD_VAR 0 2
8606: PPUSH
8607: LD_VAR 0 4
8611: PPUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: CALL_OW 74
8621: PPUSH
8622: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8626: LD_VAR 0 2
8630: PPUSH
8631: CALL_OW 256
8635: PUSH
8636: LD_INT 600
8638: LESS
8639: PUSH
8640: LD_VAR 0 2
8644: PPUSH
8645: CALL_OW 110
8649: NOT
8650: AND
8651: IFFALSE 8727
// begin SetTag ( i , 1 ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: LD_INT 1
8660: PPUSH
8661: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8665: LD_ADDR_VAR 0 6
8669: PUSH
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_VAR 0 5
8679: PPUSH
8680: CALL 80250 0 2
8684: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8685: LD_VAR 0 2
8689: PPUSH
8690: LD_VAR 0 6
8694: PUSH
8695: LD_INT 1
8697: ARRAY
8698: PPUSH
8699: LD_VAR 0 6
8703: PUSH
8704: LD_INT 2
8706: ARRAY
8707: PPUSH
8708: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8712: LD_VAR 0 2
8716: PPUSH
8717: LD_INT 40
8719: PPUSH
8720: LD_INT 49
8722: PPUSH
8723: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8727: LD_VAR 0 2
8731: PPUSH
8732: CALL_OW 110
8736: PUSH
8737: LD_INT 1
8739: EQUAL
8740: PUSH
8741: LD_VAR 0 2
8745: PPUSH
8746: LD_INT 40
8748: PPUSH
8749: LD_INT 49
8751: PPUSH
8752: CALL_OW 297
8756: PUSH
8757: LD_INT 9
8759: LESS
8760: AND
8761: PUSH
8762: LD_VAR 0 3
8766: AND
8767: IFFALSE 8869
// begin ComExitVehicle ( tmp ) ;
8769: LD_VAR 0 3
8773: PPUSH
8774: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8778: LD_VAR 0 3
8782: PPUSH
8783: LD_VAR 0 2
8787: PPUSH
8788: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8792: LD_INT 35
8794: PPUSH
8795: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 256
8808: PUSH
8809: LD_INT 1000
8811: EQUAL
8812: IFFALSE 8792
// ComEnterUnit ( tmp , i ) ;
8814: LD_VAR 0 3
8818: PPUSH
8819: LD_VAR 0 2
8823: PPUSH
8824: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8828: LD_VAR 0 2
8832: PPUSH
8833: CALL_OW 261
8837: PUSH
8838: LD_INT 40
8840: LESSEQUAL
8841: IFFALSE 8857
// SetTag ( i , 2 ) else
8843: LD_VAR 0 2
8847: PPUSH
8848: LD_INT 2
8850: PPUSH
8851: CALL_OW 109
8855: GO 8869
// SetTag ( i , 0 ) ;
8857: LD_VAR 0 2
8861: PPUSH
8862: LD_INT 0
8864: PPUSH
8865: CALL_OW 109
// end ; end ;
8869: GO 8431
8871: POP
8872: POP
// until not filter ;
8873: LD_VAR 0 7
8877: NOT
8878: IFFALSE 8414
// end ; end_of_file
8880: LD_VAR 0 1
8884: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8885: LD_INT 0
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
// uc_side := 3 ;
8892: LD_ADDR_OWVAR 20
8896: PUSH
8897: LD_INT 3
8899: ST_TO_ADDR
// uc_nation := 3 ;
8900: LD_ADDR_OWVAR 21
8904: PUSH
8905: LD_INT 3
8907: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
8908: LD_ADDR_EXP 33
8912: PUSH
8913: LD_INT 8
8915: PUSH
8916: LD_INT 11
8918: PUSH
8919: LD_INT 14
8921: PUSH
8922: LD_INT 17
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: LD_OWVAR 67
8935: ARRAY
8936: ST_TO_ADDR
// ruMobile := [ ] ;
8937: LD_ADDR_EXP 34
8941: PUSH
8942: EMPTY
8943: ST_TO_ADDR
// ruBuildList := [ ] ;
8944: LD_ADDR_EXP 35
8948: PUSH
8949: EMPTY
8950: ST_TO_ADDR
// russianAttackers := [ ] ;
8951: LD_ADDR_EXP 36
8955: PUSH
8956: EMPTY
8957: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8958: LD_ADDR_VAR 0 5
8962: PUSH
8963: LD_INT 43
8965: PUSH
8966: LD_INT 44
8968: PUSH
8969: LD_INT 46
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: ST_TO_ADDR
// if Difficulty > 2 then
8977: LD_OWVAR 67
8981: PUSH
8982: LD_INT 2
8984: GREATER
8985: IFFALSE 9008
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8987: LD_ADDR_VAR 0 5
8991: PUSH
8992: LD_VAR 0 5
8996: PUSH
8997: LD_INT 45
8999: PUSH
9000: LD_INT 46
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: ADD
9007: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9008: LD_ADDR_EXP 32
9012: PUSH
9013: LD_STRING Borodin
9015: PPUSH
9016: CALL_OW 25
9020: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9021: LD_EXP 32
9025: PPUSH
9026: LD_INT 28
9028: PPUSH
9029: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9033: LD_INT 28
9035: PPUSH
9036: CALL_OW 274
9040: PPUSH
9041: LD_INT 1
9043: PPUSH
9044: LD_INT 3000
9046: PUSH
9047: LD_INT 4000
9049: PUSH
9050: LD_INT 5000
9052: PUSH
9053: LD_INT 6000
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: PUSH
9062: LD_OWVAR 67
9066: ARRAY
9067: PPUSH
9068: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9072: LD_INT 28
9074: PPUSH
9075: CALL_OW 274
9079: PPUSH
9080: LD_INT 2
9082: PPUSH
9083: LD_INT 1000
9085: PPUSH
9086: CALL_OW 277
// if Difficulty > 2 then
9090: LD_OWVAR 67
9094: PUSH
9095: LD_INT 2
9097: GREATER
9098: IFFALSE 9222
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9100: LD_ADDR_VAR 0 4
9104: PUSH
9105: LD_INT 99
9107: PUSH
9108: LD_INT 130
9110: PUSH
9111: LD_INT 2
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 121
9121: PUSH
9122: LD_INT 127
9124: PUSH
9125: LD_INT 4
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 117
9135: PUSH
9136: LD_INT 121
9138: PUSH
9139: LD_INT 4
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: LIST
9151: ST_TO_ADDR
// for i in tmp do
9152: LD_ADDR_VAR 0 2
9156: PUSH
9157: LD_VAR 0 4
9161: PUSH
9162: FOR_IN
9163: IFFALSE 9220
// begin bc_type := b_turret ;
9165: LD_ADDR_OWVAR 42
9169: PUSH
9170: LD_INT 33
9172: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9173: LD_ADDR_OWVAR 43
9177: PUSH
9178: LD_INT 2
9180: PUSH
9181: LD_OWVAR 67
9185: PLUS
9186: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9187: LD_VAR 0 2
9191: PUSH
9192: LD_INT 1
9194: ARRAY
9195: PPUSH
9196: LD_VAR 0 2
9200: PUSH
9201: LD_INT 2
9203: ARRAY
9204: PPUSH
9205: LD_VAR 0 2
9209: PUSH
9210: LD_INT 3
9212: ARRAY
9213: PPUSH
9214: CALL_OW 47
// end ;
9218: GO 9162
9220: POP
9221: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9222: LD_ADDR_VAR 0 2
9226: PUSH
9227: LD_INT 22
9229: PUSH
9230: LD_INT 3
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 21
9239: PUSH
9240: LD_INT 3
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: PUSH
9256: FOR_IN
9257: IFFALSE 9279
// SetBLevel ( i , 2 + Difficulty ) ;
9259: LD_VAR 0 2
9263: PPUSH
9264: LD_INT 2
9266: PUSH
9267: LD_OWVAR 67
9271: PLUS
9272: PPUSH
9273: CALL_OW 241
9277: GO 9256
9279: POP
9280: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9281: LD_ADDR_VAR 0 4
9285: PUSH
9286: LD_INT 22
9288: PUSH
9289: LD_INT 3
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 2
9298: PUSH
9299: LD_INT 30
9301: PUSH
9302: LD_INT 32
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 30
9311: PUSH
9312: LD_INT 33
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 69
9332: ST_TO_ADDR
// for i in tmp do
9333: LD_ADDR_VAR 0 2
9337: PUSH
9338: LD_VAR 0 4
9342: PUSH
9343: FOR_IN
9344: IFFALSE 9376
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9346: LD_VAR 0 2
9350: PPUSH
9351: LD_VAR 0 5
9355: PUSH
9356: LD_INT 1
9358: PPUSH
9359: LD_VAR 0 5
9363: PPUSH
9364: CALL_OW 12
9368: ARRAY
9369: PPUSH
9370: CALL_OW 431
9374: GO 9343
9376: POP
9377: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9378: LD_ADDR_VAR 0 2
9382: PUSH
9383: LD_INT 22
9385: PUSH
9386: LD_INT 3
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PUSH
9393: LD_INT 30
9395: PUSH
9396: LD_INT 32
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PPUSH
9407: CALL_OW 69
9411: PUSH
9412: FOR_IN
9413: IFFALSE 9462
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9415: LD_INT 0
9417: PPUSH
9418: LD_INT 5
9420: PUSH
9421: LD_INT 6
9423: PUSH
9424: LD_INT 7
9426: PUSH
9427: LD_INT 8
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: LD_OWVAR 67
9440: ARRAY
9441: PPUSH
9442: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9446: CALL_OW 44
9450: PPUSH
9451: LD_VAR 0 2
9455: PPUSH
9456: CALL_OW 52
// end ;
9460: GO 9412
9462: POP
9463: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9464: LD_ADDR_VAR 0 2
9468: PUSH
9469: LD_INT 22
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 30
9481: PUSH
9482: LD_INT 5
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 69
9497: PUSH
9498: FOR_IN
9499: IFFALSE 9589
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: DOUBLE
9507: LD_INT 1
9509: DEC
9510: ST_TO_ADDR
9511: LD_INT 2
9513: PUSH
9514: LD_INT 3
9516: PUSH
9517: LD_INT 4
9519: PUSH
9520: LD_INT 5
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: PUSH
9529: LD_OWVAR 67
9533: ARRAY
9534: PUSH
9535: FOR_TO
9536: IFFALSE 9585
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9538: LD_INT 0
9540: PPUSH
9541: LD_INT 5
9543: PUSH
9544: LD_INT 6
9546: PUSH
9547: LD_INT 7
9549: PUSH
9550: LD_INT 8
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: LD_OWVAR 67
9563: ARRAY
9564: PPUSH
9565: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9569: CALL_OW 44
9573: PPUSH
9574: LD_VAR 0 2
9578: PPUSH
9579: CALL_OW 52
// end ;
9583: GO 9535
9585: POP
9586: POP
// end ;
9587: GO 9498
9589: POP
9590: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9591: LD_ADDR_VAR 0 2
9595: PUSH
9596: DOUBLE
9597: LD_INT 1
9599: DEC
9600: ST_TO_ADDR
9601: LD_INT 3
9603: PUSH
9604: LD_INT 4
9606: PUSH
9607: LD_INT 5
9609: PUSH
9610: LD_INT 5
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: PUSH
9619: LD_OWVAR 67
9623: ARRAY
9624: PUSH
9625: FOR_TO
9626: IFFALSE 9673
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9628: LD_INT 0
9630: PPUSH
9631: LD_INT 4
9633: PUSH
9634: LD_INT 5
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: LD_INT 6
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: PUSH
9649: LD_OWVAR 67
9653: ARRAY
9654: PPUSH
9655: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9659: CALL_OW 44
9663: PPUSH
9664: LD_INT 28
9666: PPUSH
9667: CALL_OW 52
// end ;
9671: GO 9625
9673: POP
9674: POP
// for i := 1 to 2 do
9675: LD_ADDR_VAR 0 2
9679: PUSH
9680: DOUBLE
9681: LD_INT 1
9683: DEC
9684: ST_TO_ADDR
9685: LD_INT 2
9687: PUSH
9688: FOR_TO
9689: IFFALSE 9723
// begin PrepareScientist ( false , 6 ) ;
9691: LD_INT 0
9693: PPUSH
9694: LD_INT 6
9696: PPUSH
9697: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9701: CALL_OW 44
9705: PPUSH
9706: LD_INT 81
9708: PPUSH
9709: LD_INT 93
9711: PPUSH
9712: CALL_OW 428
9716: PPUSH
9717: CALL_OW 52
// end ;
9721: GO 9688
9723: POP
9724: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9725: LD_INT 22
9727: PPUSH
9728: LD_INT 1
9730: PPUSH
9731: LD_INT 3
9733: PPUSH
9734: LD_INT 51
9736: PPUSH
9737: LD_INT 100
9739: PPUSH
9740: CALL 44472 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9744: CALL_OW 45
9748: PPUSH
9749: LD_INT 91
9751: PPUSH
9752: LD_INT 94
9754: PPUSH
9755: LD_INT 3
9757: PPUSH
9758: LD_INT 0
9760: PPUSH
9761: CALL_OW 50
// for i := 1 to 2 do
9765: LD_ADDR_VAR 0 2
9769: PUSH
9770: DOUBLE
9771: LD_INT 1
9773: DEC
9774: ST_TO_ADDR
9775: LD_INT 2
9777: PUSH
9778: FOR_TO
9779: IFFALSE 9823
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9781: LD_INT 22
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 3
9789: PPUSH
9790: LD_INT 52
9792: PPUSH
9793: LD_INT 100
9795: PPUSH
9796: CALL 44472 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9800: CALL_OW 45
9804: PPUSH
9805: LD_INT 91
9807: PPUSH
9808: LD_INT 94
9810: PPUSH
9811: LD_INT 4
9813: PPUSH
9814: LD_INT 0
9816: PPUSH
9817: CALL_OW 50
// end ;
9821: GO 9778
9823: POP
9824: POP
// end ;
9825: LD_VAR 0 1
9829: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9830: LD_INT 0
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
9836: PPUSH
// uc_side := 3 ;
9837: LD_ADDR_OWVAR 20
9841: PUSH
9842: LD_INT 3
9844: ST_TO_ADDR
// uc_nation := 3 ;
9845: LD_ADDR_OWVAR 21
9849: PUSH
9850: LD_INT 3
9852: ST_TO_ADDR
// for i := 1 to 4 do
9853: LD_ADDR_VAR 0 2
9857: PUSH
9858: DOUBLE
9859: LD_INT 1
9861: DEC
9862: ST_TO_ADDR
9863: LD_INT 4
9865: PUSH
9866: FOR_TO
9867: IFFALSE 9994
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9869: LD_INT 22
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: LD_INT 1
9877: PPUSH
9878: LD_INT 42
9880: PUSH
9881: LD_INT 43
9883: PUSH
9884: LD_INT 44
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 1
9894: PPUSH
9895: LD_INT 3
9897: PPUSH
9898: CALL_OW 12
9902: ARRAY
9903: PPUSH
9904: LD_INT 40
9906: PPUSH
9907: CALL 44472 0 5
// veh := CreateVehicle ;
9911: LD_ADDR_VAR 0 4
9915: PUSH
9916: CALL_OW 45
9920: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9921: LD_VAR 0 4
9925: PPUSH
9926: LD_INT 5
9928: PPUSH
9929: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9933: LD_VAR 0 4
9937: PPUSH
9938: LD_INT 7
9940: PPUSH
9941: LD_INT 0
9943: PPUSH
9944: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9948: LD_INT 0
9950: PPUSH
9951: LD_INT 5
9953: PPUSH
9954: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9958: CALL_OW 44
9962: PPUSH
9963: LD_VAR 0 4
9967: PPUSH
9968: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9972: LD_ADDR_VAR 0 5
9976: PUSH
9977: LD_VAR 0 5
9981: PPUSH
9982: LD_VAR 0 4
9986: PPUSH
9987: CALL 76906 0 2
9991: ST_TO_ADDR
// end ;
9992: GO 9866
9994: POP
9995: POP
// for i := 1 to 3 do
9996: LD_ADDR_VAR 0 2
10000: PUSH
10001: DOUBLE
10002: LD_INT 1
10004: DEC
10005: ST_TO_ADDR
10006: LD_INT 3
10008: PUSH
10009: FOR_TO
10010: IFFALSE 10137
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10012: LD_INT 22
10014: PPUSH
10015: LD_INT 1
10017: PPUSH
10018: LD_INT 1
10020: PPUSH
10021: LD_INT 42
10023: PUSH
10024: LD_INT 43
10026: PUSH
10027: LD_INT 44
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 1
10037: PPUSH
10038: LD_INT 3
10040: PPUSH
10041: CALL_OW 12
10045: ARRAY
10046: PPUSH
10047: LD_INT 40
10049: PPUSH
10050: CALL 44472 0 5
// veh := CreateVehicle ;
10054: LD_ADDR_VAR 0 4
10058: PUSH
10059: CALL_OW 45
10063: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10064: LD_VAR 0 4
10068: PPUSH
10069: LD_INT 5
10071: PPUSH
10072: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10076: LD_VAR 0 4
10080: PPUSH
10081: LD_INT 8
10083: PPUSH
10084: LD_INT 0
10086: PPUSH
10087: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10091: LD_INT 0
10093: PPUSH
10094: LD_INT 5
10096: PPUSH
10097: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10101: CALL_OW 44
10105: PPUSH
10106: LD_VAR 0 4
10110: PPUSH
10111: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10115: LD_ADDR_VAR 0 5
10119: PUSH
10120: LD_VAR 0 5
10124: PPUSH
10125: LD_VAR 0 4
10129: PPUSH
10130: CALL 76906 0 2
10134: ST_TO_ADDR
// end ;
10135: GO 10009
10137: POP
10138: POP
// for i := 1 to 2 do
10139: LD_ADDR_VAR 0 2
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_INT 2
10151: PUSH
10152: FOR_TO
10153: IFFALSE 10212
// begin PrepareSoldier ( false , 5 ) ;
10155: LD_INT 0
10157: PPUSH
10158: LD_INT 5
10160: PPUSH
10161: CALL_OW 381
// un := CreateHuman ;
10165: LD_ADDR_VAR 0 3
10169: PUSH
10170: CALL_OW 44
10174: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10175: LD_VAR 0 3
10179: PPUSH
10180: LD_INT 8
10182: PPUSH
10183: LD_INT 0
10185: PPUSH
10186: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10190: LD_ADDR_VAR 0 5
10194: PUSH
10195: LD_VAR 0 5
10199: PPUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: CALL 76906 0 2
10209: ST_TO_ADDR
// end ;
10210: GO 10152
10212: POP
10213: POP
// for i in tmp do
10214: LD_ADDR_VAR 0 2
10218: PUSH
10219: LD_VAR 0 5
10223: PUSH
10224: FOR_IN
10225: IFFALSE 10244
// ComAgressiveMove ( i , 51 , 16 ) ;
10227: LD_VAR 0 2
10231: PPUSH
10232: LD_INT 51
10234: PPUSH
10235: LD_INT 16
10237: PPUSH
10238: CALL_OW 114
10242: GO 10224
10244: POP
10245: POP
// end ;
10246: LD_VAR 0 1
10250: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10251: LD_EXP 34
10255: IFFALSE 10830
10257: GO 10259
10259: DISABLE
10260: LD_INT 0
10262: PPUSH
10263: PPUSH
10264: PPUSH
// begin enable ;
10265: ENABLE
// if not ruMobile then
10266: LD_EXP 34
10270: NOT
10271: IFFALSE 10275
// exit ;
10273: GO 10830
// for i in ruMobile do
10275: LD_ADDR_VAR 0 1
10279: PUSH
10280: LD_EXP 34
10284: PUSH
10285: FOR_IN
10286: IFFALSE 10828
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 302
10297: NOT
10298: PUSH
10299: LD_VAR 0 1
10303: PPUSH
10304: CALL_OW 255
10308: PUSH
10309: LD_INT 3
10311: NONEQUAL
10312: OR
10313: IFFALSE 10333
// begin ruMobile := ruMobile diff i ;
10315: LD_ADDR_EXP 34
10319: PUSH
10320: LD_EXP 34
10324: PUSH
10325: LD_VAR 0 1
10329: DIFF
10330: ST_TO_ADDR
// continue ;
10331: GO 10285
// end ; if GetTag ( i ) = 300 then
10333: LD_VAR 0 1
10337: PPUSH
10338: CALL_OW 110
10342: PUSH
10343: LD_INT 300
10345: EQUAL
10346: IFFALSE 10461
// begin if GetFuel ( i ) < 50 then
10348: LD_VAR 0 1
10352: PPUSH
10353: CALL_OW 261
10357: PUSH
10358: LD_INT 50
10360: LESS
10361: IFFALSE 10420
// begin ComMoveXY ( i , 93 , 100 ) ;
10363: LD_VAR 0 1
10367: PPUSH
10368: LD_INT 93
10370: PPUSH
10371: LD_INT 100
10373: PPUSH
10374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10378: LD_INT 35
10380: PPUSH
10381: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10385: LD_VAR 0 1
10389: PPUSH
10390: LD_INT 93
10392: PPUSH
10393: LD_INT 100
10395: PPUSH
10396: CALL_OW 297
10400: PUSH
10401: LD_INT 4
10403: LESS
10404: IFFALSE 10378
// SetFuel ( i , 100 ) ;
10406: LD_VAR 0 1
10410: PPUSH
10411: LD_INT 100
10413: PPUSH
10414: CALL_OW 240
// end else
10418: GO 10461
// if not IsInArea ( i , ruParkingArea ) then
10420: LD_VAR 0 1
10424: PPUSH
10425: LD_INT 10
10427: PPUSH
10428: CALL_OW 308
10432: NOT
10433: IFFALSE 10449
// ComMoveToArea ( i , ruParkingArea ) else
10435: LD_VAR 0 1
10439: PPUSH
10440: LD_INT 10
10442: PPUSH
10443: CALL_OW 113
10447: GO 10461
// SetTag ( i , 301 ) ;
10449: LD_VAR 0 1
10453: PPUSH
10454: LD_INT 301
10456: PPUSH
10457: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10461: LD_VAR 0 1
10465: PPUSH
10466: CALL_OW 110
10470: PUSH
10471: LD_INT 301
10473: EQUAL
10474: IFFALSE 10604
// begin if GetLives ( i ) < 1000 then
10476: LD_VAR 0 1
10480: PPUSH
10481: CALL_OW 256
10485: PUSH
10486: LD_INT 1000
10488: LESS
10489: IFFALSE 10581
// begin if not IsDrivenBy ( i ) then
10491: LD_VAR 0 1
10495: PPUSH
10496: CALL_OW 311
10500: NOT
10501: IFFALSE 10505
// continue ;
10503: GO 10285
// mech := IsDrivenBy ( i ) ;
10505: LD_ADDR_VAR 0 2
10509: PUSH
10510: LD_VAR 0 1
10514: PPUSH
10515: CALL_OW 311
10519: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10520: LD_VAR 0 2
10524: PPUSH
10525: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_VAR 0 1
10538: PPUSH
10539: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10543: LD_INT 35
10545: PPUSH
10546: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10550: LD_VAR 0 1
10554: PPUSH
10555: CALL_OW 256
10559: PUSH
10560: LD_INT 1000
10562: EQUAL
10563: IFFALSE 10543
// ComEnterUnit ( mech , i ) ;
10565: LD_VAR 0 2
10569: PPUSH
10570: LD_VAR 0 1
10574: PPUSH
10575: CALL_OW 120
// end else
10579: GO 10604
// if IsDrivenBy ( i ) then
10581: LD_VAR 0 1
10585: PPUSH
10586: CALL_OW 311
10590: IFFALSE 10604
// SetTag ( i , 0 ) ;
10592: LD_VAR 0 1
10596: PPUSH
10597: LD_INT 0
10599: PPUSH
10600: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10604: LD_VAR 0 1
10608: PPUSH
10609: CALL_OW 110
10613: PUSH
10614: LD_INT 300
10616: LESS
10617: IFFALSE 10826
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10619: LD_ADDR_VAR 0 3
10623: PUSH
10624: LD_INT 11
10626: PPUSH
10627: LD_INT 81
10629: PUSH
10630: LD_INT 3
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 70
10641: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10642: LD_VAR 0 1
10646: PPUSH
10647: CALL_OW 256
10651: PUSH
10652: LD_INT 650
10654: LESS
10655: IFFALSE 10680
// begin ComStop ( i ) ;
10657: LD_VAR 0 1
10661: PPUSH
10662: CALL_OW 141
// SetTag ( i , 300 ) ;
10666: LD_VAR 0 1
10670: PPUSH
10671: LD_INT 300
10673: PPUSH
10674: CALL_OW 109
// continue ;
10678: GO 10285
// end ; if enemy then
10680: LD_VAR 0 3
10684: IFFALSE 10724
// begin if not HasTask ( i ) then
10686: LD_VAR 0 1
10690: PPUSH
10691: CALL_OW 314
10695: NOT
10696: IFFALSE 10722
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: LD_VAR 0 3
10707: PPUSH
10708: LD_VAR 0 1
10712: PPUSH
10713: CALL_OW 74
10717: PPUSH
10718: CALL_OW 115
// end else
10722: GO 10826
// if ruMobile > 2 then
10724: LD_EXP 34
10728: PUSH
10729: LD_INT 2
10731: GREATER
10732: IFFALSE 10826
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10734: LD_ADDR_VAR 0 3
10738: PUSH
10739: LD_INT 81
10741: PUSH
10742: LD_INT 3
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: ST_TO_ADDR
// if enemy then
10754: LD_VAR 0 3
10758: IFFALSE 10826
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10760: LD_VAR 0 1
10764: PPUSH
10765: LD_INT 116
10767: PUSH
10768: LD_INT 95
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 84
10777: PUSH
10778: LD_INT 68
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 58
10787: PUSH
10788: LD_INT 53
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 44
10797: PUSH
10798: LD_INT 35
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 45
10807: PUSH
10808: LD_INT 23
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: PPUSH
10822: CALL 79510 0 2
// end ; end ; end ;
10826: GO 10285
10828: POP
10829: POP
// end ;
10830: PPOPN 3
10832: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10833: LD_INT 3
10835: PUSH
10836: LD_INT 22
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 32
10852: PUSH
10853: LD_INT 1
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: IFFALSE 10952
10870: GO 10872
10872: DISABLE
10873: LD_INT 0
10875: PPUSH
// begin enable ;
10876: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10877: LD_ADDR_VAR 0 1
10881: PUSH
10882: LD_INT 3
10884: PUSH
10885: LD_INT 22
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 32
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PPUSH
10913: CALL_OW 69
10917: PUSH
10918: FOR_IN
10919: IFFALSE 10950
// if GetFuel ( i ) < 3 then
10921: LD_VAR 0 1
10925: PPUSH
10926: CALL_OW 261
10930: PUSH
10931: LD_INT 3
10933: LESS
10934: IFFALSE 10948
// SetFuel ( i , 3 ) ;
10936: LD_VAR 0 1
10940: PPUSH
10941: LD_INT 3
10943: PPUSH
10944: CALL_OW 240
10948: GO 10918
10950: POP
10951: POP
// end ;
10952: PPOPN 1
10954: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10955: LD_INT 29
10957: PPUSH
10958: CALL_OW 302
10962: PUSH
10963: LD_INT 29
10965: PPUSH
10966: CALL_OW 461
10970: PUSH
10971: LD_INT 2
10973: EQUAL
10974: AND
10975: IFFALSE 11208
10977: GO 10979
10979: DISABLE
10980: LD_INT 0
10982: PPUSH
10983: PPUSH
// begin enable ;
10984: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: LD_INT 21
10992: PUSH
10993: LD_INT 22
10995: PUSH
10996: LD_INT 23
10998: PUSH
10999: LD_INT 24
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 1
11010: PPUSH
11011: LD_INT 4
11013: PPUSH
11014: CALL_OW 12
11018: ARRAY
11019: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_INT 42
11027: PUSH
11028: LD_INT 44
11030: PUSH
11031: LD_INT 43
11033: PUSH
11034: LD_INT 46
11036: PUSH
11037: LD_INT 45
11039: PUSH
11040: LD_INT 46
11042: PUSH
11043: LD_INT 45
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PUSH
11055: LD_OWVAR 67
11059: PUSH
11060: LD_INT 0
11062: PPUSH
11063: LD_INT 3
11065: PPUSH
11066: CALL_OW 12
11070: PLUS
11071: ARRAY
11072: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11073: LD_VAR 0 1
11077: PUSH
11078: LD_INT 21
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: IN
11088: PUSH
11089: LD_VAR 0 2
11093: PUSH
11094: LD_INT 46
11096: EQUAL
11097: AND
11098: IFFALSE 11127
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11100: LD_ADDR_VAR 0 2
11104: PUSH
11105: LD_INT 44
11107: PUSH
11108: LD_INT 45
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 1
11117: PPUSH
11118: LD_INT 2
11120: PPUSH
11121: CALL_OW 12
11125: ARRAY
11126: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11127: LD_OWVAR 1
11131: PUSH
11132: LD_INT 25200
11134: PUSH
11135: LD_INT 23100
11137: PUSH
11138: LD_INT 21000
11140: PUSH
11141: LD_INT 18900
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: PUSH
11150: LD_OWVAR 67
11154: ARRAY
11155: LESS
11156: IFFALSE 11185
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11158: LD_ADDR_VAR 0 2
11162: PUSH
11163: LD_INT 44
11165: PUSH
11166: LD_INT 43
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 1
11175: PPUSH
11176: LD_INT 2
11178: PPUSH
11179: CALL_OW 12
11183: ARRAY
11184: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11185: LD_INT 29
11187: PPUSH
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: LD_VAR 0 2
11203: PPUSH
11204: CALL_OW 185
// end ;
11208: PPOPN 2
11210: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
11211: LD_INT 28
11213: PPUSH
11214: CALL_OW 302
11218: IFFALSE 12060
11220: GO 11222
11222: DISABLE
11223: LD_INT 0
11225: PPUSH
11226: PPUSH
11227: PPUSH
11228: PPUSH
11229: PPUSH
11230: PPUSH
11231: PPUSH
11232: PPUSH
// begin enable ;
11233: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11234: LD_ADDR_VAR 0 3
11238: PUSH
11239: LD_INT 12
11241: PPUSH
11242: LD_INT 3
11244: PUSH
11245: LD_INT 24
11247: PUSH
11248: LD_INT 1000
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 21
11261: PUSH
11262: LD_INT 3
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PPUSH
11273: CALL_OW 70
11277: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11278: LD_ADDR_VAR 0 4
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_INT 3
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 25
11295: PUSH
11296: LD_INT 2
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PPUSH
11307: CALL_OW 69
11311: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11312: LD_ADDR_VAR 0 5
11316: PUSH
11317: LD_INT 22
11319: PUSH
11320: LD_INT 3
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 34
11329: PUSH
11330: LD_INT 52
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 69
11345: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11346: LD_ADDR_VAR 0 7
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_INT 3
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 25
11363: PUSH
11364: LD_INT 4
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PPUSH
11375: CALL_OW 69
11379: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11380: LD_ADDR_VAR 0 8
11384: PUSH
11385: LD_INT 81
11387: PPUSH
11388: LD_INT 93
11390: PPUSH
11391: CALL_OW 428
11395: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
11396: LD_VAR 0 7
11400: PUSH
11401: LD_VAR 0 4
11405: PPUSH
11406: LD_INT 120
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PPUSH
11416: CALL_OW 72
11420: AND
11421: IFFALSE 11434
// ComExitAll ( sci ) else
11423: LD_VAR 0 7
11427: PPUSH
11428: CALL 77387 0 1
11432: GO 11507
// if sci then
11434: LD_VAR 0 7
11438: IFFALSE 11507
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
11440: LD_VAR 0 7
11444: PPUSH
11445: LD_INT 3
11447: PUSH
11448: LD_INT 54
11450: PUSH
11451: EMPTY
11452: LIST
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PPUSH
11458: CALL_OW 72
11462: PUSH
11463: LD_VAR 0 8
11467: PPUSH
11468: CALL_OW 302
11472: AND
11473: IFFALSE 11507
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
11475: LD_VAR 0 7
11479: PPUSH
11480: LD_INT 3
11482: PUSH
11483: LD_INT 54
11485: PUSH
11486: EMPTY
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PPUSH
11493: CALL_OW 72
11497: PPUSH
11498: LD_VAR 0 8
11502: PPUSH
11503: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
11507: LD_VAR 0 5
11511: PPUSH
11512: LD_INT 50
11514: PUSH
11515: EMPTY
11516: LIST
11517: PPUSH
11518: CALL_OW 72
11522: PUSH
11523: LD_VAR 0 3
11527: AND
11528: IFFALSE 11559
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
11530: LD_VAR 0 5
11534: PPUSH
11535: LD_INT 50
11537: PUSH
11538: EMPTY
11539: LIST
11540: PPUSH
11541: CALL_OW 72
11545: PPUSH
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 1
11553: ARRAY
11554: PPUSH
11555: CALL_OW 130
// if eng then
11559: LD_VAR 0 4
11563: IFFALSE 12060
// begin for i in eng do
11565: LD_ADDR_VAR 0 1
11569: PUSH
11570: LD_VAR 0 4
11574: PUSH
11575: FOR_IN
11576: IFFALSE 12058
// begin tag := GetTag ( i ) ;
11578: LD_ADDR_VAR 0 6
11582: PUSH
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL_OW 110
11592: ST_TO_ADDR
// case tag of 0 :
11593: LD_VAR 0 6
11597: PUSH
11598: LD_INT 0
11600: DOUBLE
11601: EQUAL
11602: IFTRUE 11606
11604: GO 11817
11606: POP
// begin if b then
11607: LD_VAR 0 3
11611: IFFALSE 11627
// begin SetTag ( i , 1 ) ;
11613: LD_VAR 0 1
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 109
// continue ;
11625: GO 11575
// end ; if not ruBuildList then
11627: LD_EXP 35
11631: NOT
11632: IFFALSE 11648
// ComEnterUnit ( i , ruDep ) else
11634: LD_VAR 0 1
11638: PPUSH
11639: LD_INT 28
11641: PPUSH
11642: CALL_OW 120
11646: GO 11815
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11648: LD_INT 11
11650: PPUSH
11651: LD_INT 81
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 70
11665: PUSH
11666: LD_INT 0
11668: EQUAL
11669: PUSH
11670: LD_INT 28
11672: PPUSH
11673: LD_EXP 35
11677: PUSH
11678: LD_INT 1
11680: ARRAY
11681: PUSH
11682: LD_INT 1
11684: ARRAY
11685: PPUSH
11686: LD_EXP 35
11690: PUSH
11691: LD_INT 1
11693: ARRAY
11694: PUSH
11695: LD_INT 2
11697: ARRAY
11698: PPUSH
11699: LD_EXP 35
11703: PUSH
11704: LD_INT 1
11706: ARRAY
11707: PUSH
11708: LD_INT 3
11710: ARRAY
11711: PPUSH
11712: LD_EXP 35
11716: PUSH
11717: LD_INT 1
11719: ARRAY
11720: PUSH
11721: LD_INT 4
11723: ARRAY
11724: PPUSH
11725: CALL 52691 0 5
11729: AND
11730: IFFALSE 11815
// begin if IsInUnit ( i ) then
11732: LD_VAR 0 1
11736: PPUSH
11737: CALL_OW 310
11741: IFFALSE 11754
// ComExitBuilding ( i ) else
11743: LD_VAR 0 1
11747: PPUSH
11748: CALL_OW 122
11752: GO 11815
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11754: LD_VAR 0 1
11758: PPUSH
11759: LD_EXP 35
11763: PUSH
11764: LD_INT 1
11766: ARRAY
11767: PUSH
11768: LD_INT 1
11770: ARRAY
11771: PPUSH
11772: LD_EXP 35
11776: PUSH
11777: LD_INT 1
11779: ARRAY
11780: PUSH
11781: LD_INT 2
11783: ARRAY
11784: PPUSH
11785: LD_EXP 35
11789: PUSH
11790: LD_INT 1
11792: ARRAY
11793: PUSH
11794: LD_INT 3
11796: ARRAY
11797: PPUSH
11798: LD_EXP 35
11802: PUSH
11803: LD_INT 1
11805: ARRAY
11806: PUSH
11807: LD_INT 4
11809: ARRAY
11810: PPUSH
11811: CALL_OW 145
// end ; end ; 1 :
11815: GO 12014
11817: LD_INT 1
11819: DOUBLE
11820: EQUAL
11821: IFTRUE 11825
11823: GO 11928
11825: POP
// begin if not b then
11826: LD_VAR 0 3
11830: NOT
11831: IFFALSE 11847
// begin SetTag ( i , 0 ) ;
11833: LD_VAR 0 1
11837: PPUSH
11838: LD_INT 0
11840: PPUSH
11841: CALL_OW 109
// continue ;
11845: GO 11575
// end ; if IsInUnit ( i ) then
11847: LD_VAR 0 1
11851: PPUSH
11852: CALL_OW 310
11856: IFFALSE 11867
// ComExitBuilding ( i ) ;
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 122
// if GetLives ( i ) < 650 then
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 256
11876: PUSH
11877: LD_INT 650
11879: LESS
11880: IFFALSE 11896
// begin SetTag ( i , 2 ) ;
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_INT 2
11889: PPUSH
11890: CALL_OW 109
// continue ;
11894: GO 11575
// end ; if b then
11896: LD_VAR 0 3
11900: IFFALSE 11926
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
11902: LD_VAR 0 1
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: LD_VAR 0 1
11916: PPUSH
11917: CALL_OW 74
11921: PPUSH
11922: CALL_OW 130
// end ; 2 :
11926: GO 12014
11928: LD_INT 2
11930: DOUBLE
11931: EQUAL
11932: IFTRUE 11936
11934: GO 12013
11936: POP
// begin if GetLives ( i ) = 1000 then
11937: LD_VAR 0 1
11941: PPUSH
11942: CALL_OW 256
11946: PUSH
11947: LD_INT 1000
11949: EQUAL
11950: IFFALSE 11966
// begin SetTag ( i , 1 ) ;
11952: LD_VAR 0 1
11956: PPUSH
11957: LD_INT 1
11959: PPUSH
11960: CALL_OW 109
// continue ;
11964: GO 11575
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11966: LD_VAR 0 1
11970: PPUSH
11971: LD_INT 84
11973: PPUSH
11974: LD_INT 93
11976: PPUSH
11977: CALL_OW 297
11981: PUSH
11982: LD_INT 6
11984: GREATER
11985: IFFALSE 12011
// begin ComMoveXY ( i , 84 , 93 ) ;
11987: LD_VAR 0 1
11991: PPUSH
11992: LD_INT 84
11994: PPUSH
11995: LD_INT 93
11997: PPUSH
11998: CALL_OW 111
// AddComHold ( i ) ;
12002: LD_VAR 0 1
12006: PPUSH
12007: CALL_OW 200
// end ; end ; end ;
12011: GO 12014
12013: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12014: LD_VAR 0 1
12018: PPUSH
12019: LD_INT 12
12021: PPUSH
12022: CALL_OW 308
12026: NOT
12027: PUSH
12028: LD_VAR 0 1
12032: PPUSH
12033: CALL_OW 310
12037: NOT
12038: AND
12039: IFFALSE 12056
// ComMoveXY ( i , 91 , 95 ) ;
12041: LD_VAR 0 1
12045: PPUSH
12046: LD_INT 91
12048: PPUSH
12049: LD_INT 95
12051: PPUSH
12052: CALL_OW 111
// end ;
12056: GO 11575
12058: POP
12059: POP
// end ; end ;
12060: PPOPN 8
12062: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12063: LD_INT 0
12065: PPUSH
12066: PPUSH
12067: PPUSH
12068: PPUSH
12069: PPUSH
12070: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
12071: LD_ADDR_VAR 0 3
12075: PUSH
12076: DOUBLE
12077: LD_INT 1
12079: DEC
12080: ST_TO_ADDR
12081: LD_INT 3
12083: PUSH
12084: LD_INT 4
12086: PUSH
12087: LD_INT 5
12089: PUSH
12090: LD_INT 6
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_OWVAR 67
12103: ARRAY
12104: PUSH
12105: LD_VAR 0 1
12109: PLUS
12110: PUSH
12111: FOR_TO
12112: IFFALSE 12429
// begin uc_side := 6 ;
12114: LD_ADDR_OWVAR 20
12118: PUSH
12119: LD_INT 6
12121: ST_TO_ADDR
// uc_nation := 3 ;
12122: LD_ADDR_OWVAR 21
12126: PUSH
12127: LD_INT 3
12129: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12130: LD_ADDR_VAR 0 6
12134: PUSH
12135: LD_INT 21
12137: PUSH
12138: LD_INT 22
12140: PUSH
12141: LD_INT 23
12143: PUSH
12144: LD_INT 24
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 1
12155: PPUSH
12156: LD_INT 4
12158: PPUSH
12159: CALL_OW 12
12163: ARRAY
12164: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12165: LD_ADDR_VAR 0 7
12169: PUSH
12170: LD_INT 42
12172: PUSH
12173: LD_INT 44
12175: PUSH
12176: LD_INT 43
12178: PUSH
12179: LD_INT 46
12181: PUSH
12182: LD_INT 45
12184: PUSH
12185: LD_INT 46
12187: PUSH
12188: LD_INT 45
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: PUSH
12200: LD_OWVAR 67
12204: PUSH
12205: LD_INT 0
12207: PPUSH
12208: LD_INT 3
12210: PPUSH
12211: CALL_OW 12
12215: PLUS
12216: ARRAY
12217: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12218: LD_VAR 0 6
12222: PUSH
12223: LD_INT 21
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: IN
12233: PUSH
12234: LD_VAR 0 7
12238: PUSH
12239: LD_INT 46
12241: EQUAL
12242: AND
12243: IFFALSE 12272
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12245: LD_ADDR_VAR 0 7
12249: PUSH
12250: LD_INT 44
12252: PUSH
12253: LD_INT 45
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 1
12262: PPUSH
12263: LD_INT 2
12265: PPUSH
12266: CALL_OW 12
12270: ARRAY
12271: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
12272: LD_OWVAR 1
12276: PUSH
12277: LD_INT 31500
12279: PUSH
12280: LD_INT 27300
12282: PUSH
12283: LD_INT 23100
12285: PUSH
12286: LD_INT 18900
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: PUSH
12295: LD_OWVAR 67
12299: ARRAY
12300: LESS
12301: IFFALSE 12334
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
12303: LD_ADDR_VAR 0 7
12307: PUSH
12308: LD_INT 44
12310: PUSH
12311: LD_INT 43
12313: PUSH
12314: LD_INT 42
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 1
12324: PPUSH
12325: LD_INT 3
12327: PPUSH
12328: CALL_OW 12
12332: ARRAY
12333: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
12334: LD_VAR 0 6
12338: PPUSH
12339: LD_INT 1
12341: PPUSH
12342: LD_INT 3
12344: PPUSH
12345: LD_VAR 0 7
12349: PPUSH
12350: LD_INT 90
12352: PPUSH
12353: CALL 44472 0 5
// un := CreateVehicle ;
12357: LD_ADDR_VAR 0 4
12361: PUSH
12362: CALL_OW 45
12366: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
12367: LD_VAR 0 4
12371: PPUSH
12372: LD_INT 140
12374: PPUSH
12375: LD_INT 146
12377: PPUSH
12378: LD_INT 0
12380: PPUSH
12381: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
12385: LD_VAR 0 4
12389: PPUSH
12390: LD_INT 131
12392: PPUSH
12393: LD_INT 128
12395: PPUSH
12396: CALL_OW 111
// wait ( 0 0$3 ) ;
12400: LD_INT 105
12402: PPUSH
12403: CALL_OW 67
// tmp := Join ( tmp , un ) ;
12407: LD_ADDR_VAR 0 5
12411: PUSH
12412: LD_VAR 0 5
12416: PPUSH
12417: LD_VAR 0 4
12421: PPUSH
12422: CALL 76906 0 2
12426: ST_TO_ADDR
// end ;
12427: GO 12111
12429: POP
12430: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
12431: LD_ADDR_EXP 36
12435: PUSH
12436: LD_EXP 36
12440: PPUSH
12441: LD_VAR 0 5
12445: PPUSH
12446: CALL 76943 0 2
12450: ST_TO_ADDR
// end ;
12451: LD_VAR 0 2
12455: RET
// every 0 0$3 trigger russianAttackers do
12456: LD_EXP 36
12460: IFFALSE 12543
12462: GO 12464
12464: DISABLE
// begin enable ;
12465: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
12466: LD_EXP 36
12470: PPUSH
12471: LD_INT 126
12473: PUSH
12474: LD_INT 108
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 107
12483: PUSH
12484: LD_INT 85
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 82
12493: PUSH
12494: LD_INT 62
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 73
12503: PUSH
12504: LD_INT 46
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 62
12513: PUSH
12514: LD_INT 31
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 52
12523: PUSH
12524: LD_INT 17
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL 79510 0 2
// end ; end_of_file
12543: END
// on SailEvent ( event ) do begin if event = 1 then
12544: LD_VAR 0 1
12548: PUSH
12549: LD_INT 1
12551: EQUAL
12552: IFFALSE 12567
// PrepareRussianAttack ( Difficulty + 3 ) ;
12554: LD_OWVAR 67
12558: PUSH
12559: LD_INT 3
12561: PLUS
12562: PPUSH
12563: CALL 12063 0 1
// end ;
12567: PPOPN 1
12569: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
12570: LD_INT 0
12572: PPUSH
12573: PPUSH
12574: PPUSH
12575: PPUSH
12576: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12577: LD_VAR 0 1
12581: PPUSH
12582: CALL 35168 0 1
// if un = JMM then
12586: LD_VAR 0 1
12590: PUSH
12591: LD_EXP 14
12595: EQUAL
12596: IFFALSE 12605
// YouLost ( JMM ) ;
12598: LD_STRING JMM
12600: PPUSH
12601: CALL_OW 104
// if un = Sikorski then
12605: LD_VAR 0 1
12609: PUSH
12610: LD_EXP 28
12614: EQUAL
12615: IFFALSE 12641
// if sikorskiStatus = 0 then
12617: LD_EXP 9
12621: PUSH
12622: LD_INT 0
12624: EQUAL
12625: IFFALSE 12633
// SikorskiKilledInAction else
12627: CALL 17997 0 0
12631: GO 12641
// sikorskiIsKilled := true ;
12633: LD_ADDR_EXP 10
12637: PUSH
12638: LD_INT 1
12640: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12641: LD_VAR 0 1
12645: PPUSH
12646: CALL_OW 255
12650: PUSH
12651: LD_INT 1
12653: EQUAL
12654: PUSH
12655: LD_VAR 0 1
12659: PPUSH
12660: CALL_OW 248
12664: PUSH
12665: LD_INT 1
12667: EQUAL
12668: AND
12669: PUSH
12670: LD_VAR 0 1
12674: PPUSH
12675: CALL_OW 266
12679: PUSH
12680: LD_INT 0
12682: PUSH
12683: LD_INT 1
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: IN
12690: AND
12691: IFFALSE 12700
// YouLost ( Destroyed ) ;
12693: LD_STRING Destroyed
12695: PPUSH
12696: CALL_OW 104
// if un = ruDep then
12700: LD_VAR 0 1
12704: PUSH
12705: LD_INT 28
12707: EQUAL
12708: IFFALSE 12842
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 22
12717: PUSH
12718: LD_INT 3
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 25
12727: PUSH
12728: LD_INT 1
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 69
12743: PUSH
12744: FOR_IN
12745: IFFALSE 12840
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
12747: LD_ADDR_VAR 0 3
12751: PUSH
12752: LD_INT 11
12754: PPUSH
12755: LD_INT 81
12757: PUSH
12758: LD_INT 3
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PPUSH
12765: CALL_OW 70
12769: PPUSH
12770: LD_VAR 0 2
12774: PPUSH
12775: CALL_OW 74
12779: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
12780: LD_VAR 0 2
12784: PPUSH
12785: CALL_OW 310
12789: PPUSH
12790: CALL_OW 266
12794: PUSH
12795: LD_INT 32
12797: EQUAL
12798: IFFALSE 12838
// begin ComExitBuilding ( i ) ;
12800: LD_VAR 0 2
12804: PPUSH
12805: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
12809: LD_VAR 0 2
12813: PPUSH
12814: LD_VAR 0 3
12818: PPUSH
12819: CALL_OW 250
12823: PPUSH
12824: LD_VAR 0 3
12828: PPUSH
12829: CALL_OW 251
12833: PPUSH
12834: CALL_OW 174
// end ; end ;
12838: GO 12744
12840: POP
12841: POP
// end ; if un in ruMobile then
12842: LD_VAR 0 1
12846: PUSH
12847: LD_EXP 34
12851: IN
12852: IFFALSE 12870
// ruMobile := ruMobile diff un ;
12854: LD_ADDR_EXP 34
12858: PUSH
12859: LD_EXP 34
12863: PUSH
12864: LD_VAR 0 1
12868: DIFF
12869: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12870: LD_VAR 0 1
12874: PPUSH
12875: CALL_OW 255
12879: PUSH
12880: LD_INT 3
12882: EQUAL
12883: IFFALSE 13518
// begin if GetType ( un ) = unit_building then
12885: LD_VAR 0 1
12889: PPUSH
12890: CALL_OW 247
12894: PUSH
12895: LD_INT 3
12897: EQUAL
12898: IFFALSE 13034
// begin btype := GetBType ( un ) ;
12900: LD_ADDR_VAR 0 6
12904: PUSH
12905: LD_VAR 0 1
12909: PPUSH
12910: CALL_OW 266
12914: ST_TO_ADDR
// if btype = b_warehouse then
12915: LD_VAR 0 6
12919: PUSH
12920: LD_INT 1
12922: EQUAL
12923: IFFALSE 12933
// btype := b_depot ;
12925: LD_ADDR_VAR 0 6
12929: PUSH
12930: LD_INT 0
12932: ST_TO_ADDR
// if btype = b_barracks then
12933: LD_VAR 0 6
12937: PUSH
12938: LD_INT 5
12940: EQUAL
12941: IFFALSE 12951
// btype := b_armoury ;
12943: LD_ADDR_VAR 0 6
12947: PUSH
12948: LD_INT 4
12950: ST_TO_ADDR
// if btype = b_lab_full then
12951: LD_VAR 0 6
12955: PUSH
12956: LD_INT 8
12958: EQUAL
12959: IFFALSE 12969
// btype := b_lab ;
12961: LD_ADDR_VAR 0 6
12965: PUSH
12966: LD_INT 6
12968: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12969: LD_ADDR_EXP 35
12973: PUSH
12974: LD_EXP 35
12978: PPUSH
12979: LD_EXP 35
12983: PUSH
12984: LD_INT 1
12986: PLUS
12987: PPUSH
12988: LD_VAR 0 6
12992: PUSH
12993: LD_VAR 0 1
12997: PPUSH
12998: CALL_OW 250
13002: PUSH
13003: LD_VAR 0 1
13007: PPUSH
13008: CALL_OW 251
13012: PUSH
13013: LD_VAR 0 1
13017: PPUSH
13018: CALL_OW 254
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 1
13033: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
13034: LD_VAR 0 1
13038: PPUSH
13039: CALL_OW 247
13043: PUSH
13044: LD_INT 2
13046: EQUAL
13047: IFFALSE 13322
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
13049: LD_VAR 0 1
13053: PPUSH
13054: CALL_OW 264
13058: PUSH
13059: LD_INT 52
13061: PUSH
13062: LD_INT 51
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: IN
13069: IFFALSE 13099
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
13071: LD_INT 29
13073: PPUSH
13074: LD_INT 22
13076: PPUSH
13077: LD_INT 1
13079: PPUSH
13080: LD_INT 3
13082: PPUSH
13083: LD_VAR 0 1
13087: PPUSH
13088: CALL_OW 264
13092: PPUSH
13093: CALL_OW 185
// end else
13097: GO 13322
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13099: LD_ADDR_VAR 0 4
13103: PUSH
13104: LD_INT 21
13106: PUSH
13107: LD_INT 22
13109: PUSH
13110: LD_INT 23
13112: PUSH
13113: LD_INT 24
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 1
13124: PPUSH
13125: LD_INT 4
13127: PPUSH
13128: CALL_OW 12
13132: ARRAY
13133: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13134: LD_ADDR_VAR 0 5
13138: PUSH
13139: LD_INT 42
13141: PUSH
13142: LD_INT 44
13144: PUSH
13145: LD_INT 43
13147: PUSH
13148: LD_INT 46
13150: PUSH
13151: LD_INT 45
13153: PUSH
13154: LD_INT 46
13156: PUSH
13157: LD_INT 45
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: PUSH
13169: LD_OWVAR 67
13173: PUSH
13174: LD_INT 0
13176: PPUSH
13177: LD_INT 3
13179: PPUSH
13180: CALL_OW 12
13184: PLUS
13185: ARRAY
13186: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13187: LD_VAR 0 4
13191: PUSH
13192: LD_INT 21
13194: PUSH
13195: LD_INT 22
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: IN
13202: PUSH
13203: LD_VAR 0 5
13207: PUSH
13208: LD_INT 46
13210: EQUAL
13211: AND
13212: IFFALSE 13241
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13214: LD_ADDR_VAR 0 5
13218: PUSH
13219: LD_INT 44
13221: PUSH
13222: LD_INT 45
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 1
13231: PPUSH
13232: LD_INT 2
13234: PPUSH
13235: CALL_OW 12
13239: ARRAY
13240: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
13241: LD_OWVAR 1
13245: PUSH
13246: LD_INT 31500
13248: PUSH
13249: LD_INT 27300
13251: PUSH
13252: LD_INT 23100
13254: PUSH
13255: LD_INT 21000
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: PUSH
13264: LD_OWVAR 67
13268: ARRAY
13269: LESS
13270: IFFALSE 13299
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13272: LD_ADDR_VAR 0 5
13276: PUSH
13277: LD_INT 44
13279: PUSH
13280: LD_INT 43
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 1
13289: PPUSH
13290: LD_INT 2
13292: PPUSH
13293: CALL_OW 12
13297: ARRAY
13298: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
13299: LD_INT 29
13301: PPUSH
13302: LD_VAR 0 4
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: LD_INT 1
13312: PPUSH
13313: LD_VAR 0 5
13317: PPUSH
13318: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
13322: LD_VAR 0 1
13326: PPUSH
13327: CALL_OW 257
13331: PUSH
13332: LD_INT 3
13334: EQUAL
13335: IFFALSE 13518
// begin killMechCounter := Inc ( killMechCounter ) ;
13337: LD_ADDR_EXP 12
13341: PUSH
13342: LD_EXP 12
13346: PPUSH
13347: CALL 78267 0 1
13351: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
13352: LD_EXP 33
13356: PUSH
13357: LD_INT 0
13359: EQUAL
13360: PUSH
13361: LD_INT 29
13363: PPUSH
13364: CALL_OW 302
13368: NOT
13369: OR
13370: IFFALSE 13374
// exit ;
13372: GO 13518
// ruMechCounter := Dec ( ruMechCounter ) ;
13374: LD_ADDR_EXP 33
13378: PUSH
13379: LD_EXP 33
13383: PPUSH
13384: CALL 78289 0 1
13388: ST_TO_ADDR
// uc_side := 3 ;
13389: LD_ADDR_OWVAR 20
13393: PUSH
13394: LD_INT 3
13396: ST_TO_ADDR
// uc_nation := 3 ;
13397: LD_ADDR_OWVAR 21
13401: PUSH
13402: LD_INT 3
13404: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
13405: LD_INT 0
13407: PPUSH
13408: LD_INT 5
13410: PUSH
13411: LD_INT 6
13413: PUSH
13414: LD_INT 7
13416: PUSH
13417: LD_INT 8
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: PUSH
13426: LD_OWVAR 67
13430: ARRAY
13431: PPUSH
13432: CALL_OW 383
// tmp := CreateHuman ;
13436: LD_ADDR_VAR 0 3
13440: PUSH
13441: CALL_OW 44
13445: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
13446: LD_VAR 0 3
13450: PPUSH
13451: LD_INT 145
13453: PPUSH
13454: LD_INT 133
13456: PPUSH
13457: LD_INT 0
13459: PPUSH
13460: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
13464: LD_VAR 0 3
13468: PPUSH
13469: LD_INT 29
13471: PPUSH
13472: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13476: LD_INT 35
13478: PPUSH
13479: CALL_OW 67
// if not HasTask ( tmp ) then
13483: LD_VAR 0 3
13487: PPUSH
13488: CALL_OW 314
13492: NOT
13493: IFFALSE 13507
// ComEnterUnit ( tmp , ruFac ) ;
13495: LD_VAR 0 3
13499: PPUSH
13500: LD_INT 29
13502: PPUSH
13503: CALL_OW 120
// until IsInUnit ( tmp ) ;
13507: LD_VAR 0 3
13511: PPUSH
13512: CALL_OW 310
13516: IFFALSE 13476
// end ; end ; end ;
13518: PPOPN 6
13520: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
13521: LD_VAR 0 1
13525: PPUSH
13526: CALL_OW 255
13530: PUSH
13531: LD_INT 4
13533: EQUAL
13534: IFFALSE 13551
// ComMoveXY ( driver , 40 , 47 ) ;
13536: LD_VAR 0 1
13540: PPUSH
13541: LD_INT 40
13543: PPUSH
13544: LD_INT 47
13546: PPUSH
13547: CALL_OW 111
// if GetSide ( driver ) = 3 then
13551: LD_VAR 0 1
13555: PPUSH
13556: CALL_OW 255
13560: PUSH
13561: LD_INT 3
13563: EQUAL
13564: IFFALSE 13778
// begin ComMoveXY ( driver , 90 , 97 ) ;
13566: LD_VAR 0 1
13570: PPUSH
13571: LD_INT 90
13573: PPUSH
13574: LD_INT 97
13576: PPUSH
13577: CALL_OW 111
// if IsOk ( ruFac ) then
13581: LD_INT 29
13583: PPUSH
13584: CALL_OW 302
13588: IFFALSE 13702
// begin repeat wait ( 0 0$1 ) ;
13590: LD_INT 35
13592: PPUSH
13593: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
13597: LD_INT 29
13599: PPUSH
13600: CALL_OW 313
13604: PUSH
13605: LD_INT 6
13607: LESS
13608: PUSH
13609: LD_VAR 0 1
13613: PPUSH
13614: CALL_OW 301
13618: OR
13619: IFFALSE 13590
// if IsDead ( driver ) then
13621: LD_VAR 0 1
13625: PPUSH
13626: CALL_OW 301
13630: IFFALSE 13634
// exit ;
13632: GO 13778
// repeat wait ( 0 0$10 ) ;
13634: LD_INT 350
13636: PPUSH
13637: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
13641: LD_VAR 0 1
13645: PPUSH
13646: CALL_OW 314
13650: NOT
13651: PUSH
13652: LD_INT 29
13654: PPUSH
13655: CALL_OW 313
13659: PUSH
13660: LD_INT 6
13662: LESS
13663: AND
13664: IFFALSE 13678
// ComEnterUnit ( driver , ruFac ) ;
13666: LD_VAR 0 1
13670: PPUSH
13671: LD_INT 29
13673: PPUSH
13674: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
13678: LD_VAR 0 1
13682: PPUSH
13683: CALL_OW 301
13687: PUSH
13688: LD_VAR 0 1
13692: PPUSH
13693: CALL_OW 310
13697: OR
13698: IFFALSE 13634
// end else
13700: GO 13778
// begin ComMoveXY ( driver , 142 , 148 ) ;
13702: LD_VAR 0 1
13706: PPUSH
13707: LD_INT 142
13709: PPUSH
13710: LD_INT 148
13712: PPUSH
13713: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13717: LD_INT 35
13719: PPUSH
13720: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 301
13733: PUSH
13734: LD_VAR 0 1
13738: PPUSH
13739: LD_INT 142
13741: PPUSH
13742: LD_INT 148
13744: PPUSH
13745: CALL_OW 307
13749: OR
13750: IFFALSE 13717
// if IsAt ( driver , 142 , 148 ) then
13752: LD_VAR 0 1
13756: PPUSH
13757: LD_INT 142
13759: PPUSH
13760: LD_INT 148
13762: PPUSH
13763: CALL_OW 307
13767: IFFALSE 13778
// RemoveUnit ( driver ) ;
13769: LD_VAR 0 1
13773: PPUSH
13774: CALL_OW 64
// end ; end ; end ;
13778: PPOPN 4
13780: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
13781: LD_VAR 0 2
13785: PPUSH
13786: CALL_OW 257
13790: PUSH
13791: LD_INT 3
13793: EQUAL
13794: PUSH
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 255
13804: PUSH
13805: LD_INT 3
13807: EQUAL
13808: AND
13809: PUSH
13810: LD_VAR 0 1
13814: PUSH
13815: LD_INT 29
13817: EQUAL
13818: AND
13819: IFFALSE 13833
// SetLives ( un , 1000 ) ;
13821: LD_VAR 0 2
13825: PPUSH
13826: LD_INT 1000
13828: PPUSH
13829: CALL_OW 234
// end ;
13833: PPOPN 2
13835: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
13836: LD_INT 0
13838: PPUSH
13839: PPUSH
// begin if GetSide ( b ) = 3 then
13840: LD_VAR 0 1
13844: PPUSH
13845: CALL_OW 255
13849: PUSH
13850: LD_INT 3
13852: EQUAL
13853: IFFALSE 14084
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13855: LD_VAR 0 1
13859: PPUSH
13860: CALL_OW 266
13864: PUSH
13865: LD_INT 32
13867: PUSH
13868: LD_INT 5
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: IN
13875: IFFALSE 14084
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13877: LD_ADDR_VAR 0 4
13881: PUSH
13882: LD_INT 22
13884: PUSH
13885: LD_INT 3
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 50
13894: PUSH
13895: EMPTY
13896: LIST
13897: PUSH
13898: LD_INT 30
13900: PUSH
13901: LD_INT 32
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: LD_INT 58
13910: PUSH
13911: EMPTY
13912: LIST
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PPUSH
13920: CALL_OW 69
13924: ST_TO_ADDR
// if tmp then
13925: LD_VAR 0 4
13929: IFFALSE 13951
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13931: LD_VAR 0 2
13935: PPUSH
13936: LD_VAR 0 4
13940: PUSH
13941: LD_INT 1
13943: ARRAY
13944: PPUSH
13945: CALL_OW 120
// exit ;
13949: GO 14084
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13951: LD_ADDR_VAR 0 4
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_INT 3
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 50
13968: PUSH
13969: EMPTY
13970: LIST
13971: PUSH
13972: LD_INT 2
13974: PUSH
13975: LD_INT 30
13977: PUSH
13978: LD_INT 4
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 30
13987: PUSH
13988: LD_INT 5
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: LIST
14004: PPUSH
14005: CALL_OW 69
14009: ST_TO_ADDR
// if not tmp then
14010: LD_VAR 0 4
14014: NOT
14015: IFFALSE 14034
// begin ComMoveXY ( un , 92 , 99 ) ;
14017: LD_VAR 0 2
14021: PPUSH
14022: LD_INT 92
14024: PPUSH
14025: LD_INT 99
14027: PPUSH
14028: CALL_OW 111
// exit ;
14032: GO 14084
// end ; for i in tmp do
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_VAR 0 4
14043: PUSH
14044: FOR_IN
14045: IFFALSE 14082
// if UnitsInside ( i ) < 6 then
14047: LD_VAR 0 3
14051: PPUSH
14052: CALL_OW 313
14056: PUSH
14057: LD_INT 6
14059: LESS
14060: IFFALSE 14080
// begin ComEnterUnit ( un , i ) ;
14062: LD_VAR 0 2
14066: PPUSH
14067: LD_VAR 0 3
14071: PPUSH
14072: CALL_OW 120
// exit ;
14076: POP
14077: POP
14078: GO 14084
// end ;
14080: GO 14044
14082: POP
14083: POP
// end ; end ; end ;
14084: PPOPN 4
14086: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 255
14096: PUSH
14097: LD_INT 3
14099: PUSH
14100: LD_INT 6
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: IN
14107: PUSH
14108: LD_VAR 0 1
14112: PPUSH
14113: CALL_OW 263
14117: PUSH
14118: LD_INT 3
14120: EQUAL
14121: AND
14122: PUSH
14123: LD_EXP 7
14127: NOT
14128: AND
14129: IFFALSE 14148
// begin seenComputer := true ;
14131: LD_ADDR_EXP 7
14135: PUSH
14136: LD_INT 1
14138: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14139: LD_VAR 0 1
14143: PPUSH
14144: CALL 17211 0 1
// end ; end ;
14148: PPOPN 1
14150: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14151: LD_INT 0
14153: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14154: LD_VAR 0 1
14158: PPUSH
14159: LD_VAR 0 2
14163: PPUSH
14164: CALL 35288 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14168: LD_VAR 0 1
14172: PPUSH
14173: CALL_OW 255
14177: PUSH
14178: LD_INT 3
14180: EQUAL
14181: PUSH
14182: LD_VAR 0 1
14186: PPUSH
14187: CALL_OW 263
14191: PUSH
14192: LD_INT 1
14194: EQUAL
14195: AND
14196: PUSH
14197: LD_VAR 0 1
14201: PPUSH
14202: CALL_OW 264
14206: PUSH
14207: LD_INT 42
14209: PUSH
14210: LD_INT 43
14212: PUSH
14213: LD_INT 44
14215: PUSH
14216: LD_INT 46
14218: PUSH
14219: LD_INT 45
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: IN
14229: AND
14230: IFFALSE 14260
// begin SetTag ( vehicle , 300 ) ;
14232: LD_VAR 0 1
14236: PPUSH
14237: LD_INT 300
14239: PPUSH
14240: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14244: LD_ADDR_EXP 34
14248: PUSH
14249: LD_EXP 34
14253: PUSH
14254: LD_VAR 0 1
14258: UNION
14259: ST_TO_ADDR
// end ; end ;
14260: PPOPN 3
14262: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
14263: LD_INT 0
14265: PPUSH
// begin if InArea ( x , y , ruCrates ) then
14266: LD_VAR 0 2
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: LD_INT 13
14278: PPUSH
14279: CALL_OW 309
14283: IFFALSE 14414
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
14285: LD_ADDR_VAR 0 6
14289: PUSH
14290: LD_INT 22
14292: PUSH
14293: LD_INT 3
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 50
14302: PUSH
14303: EMPTY
14304: LIST
14305: PUSH
14306: LD_INT 34
14308: PUSH
14309: LD_INT 51
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: PPUSH
14321: CALL_OW 69
14325: ST_TO_ADDR
// if not cargo then
14326: LD_VAR 0 6
14330: NOT
14331: IFFALSE 14335
// exit ;
14333: GO 14414
// wait ( 0 0$5 ) ;
14335: LD_INT 175
14337: PPUSH
14338: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
14342: LD_VAR 0 6
14346: PUSH
14347: LD_INT 1
14349: ARRAY
14350: PPUSH
14351: LD_INT 28
14353: PPUSH
14354: CALL_OW 296
14358: PUSH
14359: LD_INT 6
14361: LESS
14362: PUSH
14363: LD_VAR 0 6
14367: PUSH
14368: LD_INT 1
14370: ARRAY
14371: PPUSH
14372: CALL_OW 261
14376: PUSH
14377: LD_INT 50
14379: LESS
14380: AND
14381: IFFALSE 14395
// ComMoveUnit ( cargo , ruDep ) ;
14383: LD_VAR 0 6
14387: PPUSH
14388: LD_INT 28
14390: PPUSH
14391: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
14395: LD_VAR 0 6
14399: PPUSH
14400: LD_VAR 0 2
14404: PPUSH
14405: LD_VAR 0 3
14409: PPUSH
14410: CALL_OW 177
// end ; end ;
14414: PPOPN 6
14416: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
14417: LD_VAR 0 1
14421: PPUSH
14422: CALL_OW 264
14426: PUSH
14427: LD_INT 45
14429: EQUAL
14430: IFFALSE 14447
// captureRocketCounter := Inc ( captureRocketCounter ) ;
14432: LD_ADDR_EXP 11
14436: PUSH
14437: LD_EXP 11
14441: PPUSH
14442: CALL 78267 0 1
14446: ST_TO_ADDR
// end ;
14447: PPOPN 4
14449: END
// on BuildingComplete ( b ) do var i , tmp ;
14450: LD_INT 0
14452: PPUSH
14453: PPUSH
// begin if GetSide ( b ) = 3 then
14454: LD_VAR 0 1
14458: PPUSH
14459: CALL_OW 255
14463: PUSH
14464: LD_INT 3
14466: EQUAL
14467: IFFALSE 14706
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
14469: LD_ADDR_EXP 35
14473: PUSH
14474: LD_EXP 35
14478: PPUSH
14479: LD_INT 1
14481: PPUSH
14482: CALL_OW 3
14486: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
14487: LD_VAR 0 1
14491: PPUSH
14492: CALL_OW 266
14496: PUSH
14497: LD_INT 4
14499: EQUAL
14500: IFFALSE 14511
// ComUpgrade ( b ) ;
14502: LD_VAR 0 1
14506: PPUSH
14507: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 266
14520: PUSH
14521: LD_INT 32
14523: PUSH
14524: LD_INT 33
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: IN
14531: IFFALSE 14706
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
14533: LD_VAR 0 1
14537: PPUSH
14538: LD_INT 46
14540: PUSH
14541: LD_INT 45
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 1
14550: PPUSH
14551: LD_INT 2
14553: PPUSH
14554: CALL_OW 12
14558: ARRAY
14559: PPUSH
14560: CALL_OW 208
// if GetBType ( b ) = b_bunker then
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL_OW 266
14573: PUSH
14574: LD_INT 32
14576: EQUAL
14577: IFFALSE 14706
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
14579: LD_ADDR_VAR 0 3
14583: PUSH
14584: LD_INT 22
14586: PUSH
14587: LD_INT 3
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 25
14596: PUSH
14597: LD_INT 1
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 120
14606: PUSH
14607: LD_INT 0
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: LIST
14618: PPUSH
14619: CALL_OW 69
14623: ST_TO_ADDR
// if tmp then
14624: LD_VAR 0 3
14628: IFFALSE 14706
// for i in tmp do
14630: LD_ADDR_VAR 0 2
14634: PUSH
14635: LD_VAR 0 3
14639: PUSH
14640: FOR_IN
14641: IFFALSE 14704
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
14643: LD_VAR 0 2
14647: PPUSH
14648: CALL_OW 310
14652: NOT
14653: PUSH
14654: LD_VAR 0 2
14658: PPUSH
14659: CALL_OW 310
14663: PPUSH
14664: CALL_OW 266
14668: PUSH
14669: LD_INT 32
14671: NONEQUAL
14672: OR
14673: IFFALSE 14702
// begin ComExit ( i ) ;
14675: LD_VAR 0 2
14679: PPUSH
14680: CALL 77304 0 1
// AddComEnterUnit ( i , b ) ;
14684: LD_VAR 0 2
14688: PPUSH
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 180
// exit ;
14698: POP
14699: POP
14700: GO 14706
// end ;
14702: GO 14640
14704: POP
14705: POP
// end ; end ; end ; end ; end_of_file
14706: PPOPN 3
14708: END
// export function Action ; var i , tmp , un , inUnit ; begin
14709: LD_INT 0
14711: PPUSH
14712: PPUSH
14713: PPUSH
14714: PPUSH
14715: PPUSH
// Video ( true ) ;
14716: LD_INT 1
14718: PPUSH
14719: CALL 76878 0 1
// invincibleMode := true ;
14723: LD_ADDR_EXP 5
14727: PUSH
14728: LD_INT 1
14730: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
14731: LD_INT 50
14733: PPUSH
14734: LD_INT 12
14736: PPUSH
14737: LD_INT 1
14739: PPUSH
14740: LD_INT 56
14742: NEG
14743: PPUSH
14744: CALL 76792 0 4
// CenterOnXY ( 50 , 12 ) ;
14748: LD_INT 50
14750: PPUSH
14751: LD_INT 12
14753: PPUSH
14754: CALL_OW 84
// wait ( 0 0$3 ) ;
14758: LD_INT 105
14760: PPUSH
14761: CALL_OW 67
// PrepareStartRussianAttack ;
14765: CALL 9830 0 0
// CenterOnXY ( 66 , 47 ) ;
14769: LD_INT 66
14771: PPUSH
14772: LD_INT 47
14774: PPUSH
14775: CALL_OW 84
// wait ( 0 0$5 ) ;
14779: LD_INT 175
14781: PPUSH
14782: CALL_OW 67
// case gammaCommander of 1 :
14786: LD_EXP 13
14790: PUSH
14791: LD_INT 1
14793: DOUBLE
14794: EQUAL
14795: IFTRUE 14799
14797: GO 14814
14799: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
14800: LD_EXP 16
14804: PPUSH
14805: LD_STRING D1-Don-1
14807: PPUSH
14808: CALL_OW 88
14812: GO 14861
14814: LD_INT 2
14816: DOUBLE
14817: EQUAL
14818: IFTRUE 14822
14820: GO 14837
14822: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
14823: LD_EXP 15
14827: PPUSH
14828: LD_STRING D1-Brown-1
14830: PPUSH
14831: CALL_OW 88
14835: GO 14861
14837: LD_INT 3
14839: DOUBLE
14840: EQUAL
14841: IFTRUE 14845
14843: GO 14860
14845: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
14846: LD_EXP 25
14850: PPUSH
14851: LD_STRING D1-VanH-1
14853: PPUSH
14854: CALL_OW 88
14858: GO 14861
14860: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
14861: LD_ADDR_VAR 0 3
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 1
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 33
14878: PUSH
14879: LD_INT 2
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 61
14888: PUSH
14889: EMPTY
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: ST_TO_ADDR
// if tmp then
14902: LD_VAR 0 3
14906: IFFALSE 14923
// ComAgressiveMove ( tmp , 74 , 44 ) ;
14908: LD_VAR 0 3
14912: PPUSH
14913: LD_INT 74
14915: PPUSH
14916: LD_INT 44
14918: PPUSH
14919: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14923: LD_ADDR_VAR 0 3
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 1
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 25
14940: PUSH
14941: LD_INT 1
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PPUSH
14952: CALL_OW 69
14956: PUSH
14957: LD_EXP 16
14961: PUSH
14962: LD_EXP 15
14966: PUSH
14967: LD_EXP 25
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: DIFF
14977: ST_TO_ADDR
// if tmp then
14978: LD_VAR 0 3
14982: IFFALSE 15060
// for i in tmp do
14984: LD_ADDR_VAR 0 2
14988: PUSH
14989: LD_VAR 0 3
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15058
// begin inUnit := IsInUnit ( i ) ;
14997: LD_ADDR_VAR 0 5
15001: PUSH
15002: LD_VAR 0 2
15006: PPUSH
15007: CALL_OW 310
15011: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15012: LD_VAR 0 5
15016: PUSH
15017: LD_VAR 0 5
15021: PPUSH
15022: CALL_OW 266
15026: PUSH
15027: LD_INT 32
15029: PUSH
15030: LD_INT 31
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: IN
15037: AND
15038: IFFALSE 15056
// tmp := tmp diff i ;
15040: LD_ADDR_VAR 0 3
15044: PUSH
15045: LD_VAR 0 3
15049: PUSH
15050: LD_VAR 0 2
15054: DIFF
15055: ST_TO_ADDR
// end ;
15056: GO 14994
15058: POP
15059: POP
// if tmp then
15060: LD_VAR 0 3
15064: IFFALSE 15154
// begin ComExitAll ( tmp ) ;
15066: LD_VAR 0 3
15070: PPUSH
15071: CALL 77387 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15075: LD_VAR 0 3
15079: PPUSH
15080: LD_INT 74
15082: PPUSH
15083: LD_INT 44
15085: PPUSH
15086: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15090: LD_ADDR_VAR 0 3
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_INT 1
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 25
15107: PUSH
15108: LD_INT 4
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PPUSH
15119: CALL_OW 69
15123: ST_TO_ADDR
// if tmp then
15124: LD_VAR 0 3
15128: IFFALSE 15154
// begin ComExitAll ( tmp ) ;
15130: LD_VAR 0 3
15134: PPUSH
15135: CALL 77387 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15139: LD_VAR 0 3
15143: PPUSH
15144: LD_INT 66
15146: PPUSH
15147: LD_INT 28
15149: PPUSH
15150: CALL_OW 171
// end ; end ; game_speed := 4 ;
15154: LD_ADDR_OWVAR 65
15158: PUSH
15159: LD_INT 4
15161: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15162: LD_INT 70
15164: PPUSH
15165: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15169: LD_EXP 29
15173: PPUSH
15174: LD_STRING D1-Har-1
15176: PPUSH
15177: CALL_OW 94
// case gammaCommander of 1 :
15181: LD_EXP 13
15185: PUSH
15186: LD_INT 1
15188: DOUBLE
15189: EQUAL
15190: IFTRUE 15194
15192: GO 15209
15194: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15195: LD_EXP 16
15199: PPUSH
15200: LD_STRING D1-Don-2
15202: PPUSH
15203: CALL_OW 88
15207: GO 15256
15209: LD_INT 2
15211: DOUBLE
15212: EQUAL
15213: IFTRUE 15217
15215: GO 15232
15217: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15218: LD_EXP 15
15222: PPUSH
15223: LD_STRING D1-Brown-2
15225: PPUSH
15226: CALL_OW 88
15230: GO 15256
15232: LD_INT 3
15234: DOUBLE
15235: EQUAL
15236: IFTRUE 15240
15238: GO 15255
15240: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15241: LD_EXP 25
15245: PPUSH
15246: LD_STRING D1-VanH-2
15248: PPUSH
15249: CALL_OW 88
15253: GO 15256
15255: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15256: LD_EXP 29
15260: PPUSH
15261: LD_STRING D1-Har-2
15263: PPUSH
15264: CALL_OW 94
// invincibleMode := false ;
15268: LD_ADDR_EXP 5
15272: PUSH
15273: LD_INT 0
15275: ST_TO_ADDR
// Video ( false ) ;
15276: LD_INT 0
15278: PPUSH
15279: CALL 76878 0 1
// ChangeMissionObjectives ( M1 ) ;
15283: LD_STRING M1
15285: PPUSH
15286: CALL_OW 337
// SaveForQuickRestart ;
15290: CALL_OW 22
// wait ( 2 2$30 ) ;
15294: LD_INT 5250
15296: PPUSH
15297: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15301: LD_INT 1
15303: PPUSH
15304: CALL 12063 0 1
// wait ( 4 4$30 ) ;
15308: LD_INT 9450
15310: PPUSH
15311: CALL_OW 67
// if Difficulty > 1 then
15315: LD_OWVAR 67
15319: PUSH
15320: LD_INT 1
15322: GREATER
15323: IFFALSE 15332
// PrepareRussianAttack ( 2 ) ;
15325: LD_INT 2
15327: PPUSH
15328: CALL 12063 0 1
// if Difficulty > 2 then
15332: LD_OWVAR 67
15336: PUSH
15337: LD_INT 2
15339: GREATER
15340: IFFALSE 15499
// begin for i := 1 to 4 do
15342: LD_ADDR_VAR 0 2
15346: PUSH
15347: DOUBLE
15348: LD_INT 1
15350: DEC
15351: ST_TO_ADDR
15352: LD_INT 4
15354: PUSH
15355: FOR_TO
15356: IFFALSE 15441
// begin uc_side := 6 ;
15358: LD_ADDR_OWVAR 20
15362: PUSH
15363: LD_INT 6
15365: ST_TO_ADDR
// uc_nation := 3 ;
15366: LD_ADDR_OWVAR 21
15370: PUSH
15371: LD_INT 3
15373: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15374: LD_INT 0
15376: PPUSH
15377: LD_INT 7
15379: PPUSH
15380: CALL_OW 381
// un := CreateHuman ;
15384: LD_ADDR_VAR 0 4
15388: PUSH
15389: CALL_OW 44
15393: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15394: LD_VAR 0 4
15398: PPUSH
15399: LD_INT 122
15401: PPUSH
15402: LD_INT 89
15404: PPUSH
15405: LD_INT 3
15407: PPUSH
15408: LD_INT 0
15410: PPUSH
15411: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
15415: LD_VAR 0 4
15419: PPUSH
15420: LD_INT 88
15422: PPUSH
15423: LD_INT 42
15425: PPUSH
15426: CALL_OW 114
// AddComHold ( un ) ;
15430: LD_VAR 0 4
15434: PPUSH
15435: CALL_OW 200
// end ;
15439: GO 15355
15441: POP
15442: POP
// PrepareScientist ( false , 6 ) ;
15443: LD_INT 0
15445: PPUSH
15446: LD_INT 6
15448: PPUSH
15449: CALL_OW 384
// un := CreateHuman ;
15453: LD_ADDR_VAR 0 4
15457: PUSH
15458: CALL_OW 44
15462: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15463: LD_VAR 0 4
15467: PPUSH
15468: LD_INT 122
15470: PPUSH
15471: LD_INT 89
15473: PPUSH
15474: LD_INT 3
15476: PPUSH
15477: LD_INT 0
15479: PPUSH
15480: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
15484: LD_VAR 0 4
15488: PPUSH
15489: LD_INT 91
15491: PPUSH
15492: LD_INT 48
15494: PPUSH
15495: CALL_OW 111
// end ; end ;
15499: LD_VAR 0 1
15503: RET
// every 0 0$1 trigger invincibleMode do var i ;
15504: LD_EXP 5
15508: IFFALSE 15587
15510: GO 15512
15512: DISABLE
15513: LD_INT 0
15515: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15516: LD_ADDR_VAR 0 1
15520: PUSH
15521: LD_INT 22
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 21
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 3
15543: PUSH
15544: LD_INT 24
15546: PUSH
15547: LD_INT 1000
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: PPUSH
15563: CALL_OW 69
15567: PUSH
15568: FOR_IN
15569: IFFALSE 15585
// SetLives ( i , 1000 ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_INT 1000
15578: PPUSH
15579: CALL_OW 234
15583: GO 15568
15585: POP
15586: POP
// end ;
15587: PPOPN 1
15589: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
15590: LD_OWVAR 1
15594: PUSH
15595: LD_INT 14700
15597: GREATER
15598: IFFALSE 17208
15600: GO 15602
15602: DISABLE
15603: LD_INT 0
15605: PPUSH
15606: PPUSH
// begin PrepareSupportFromDelta ;
15607: CALL 4126 0 0
// deltaSupport := true ;
15611: LD_ADDR_EXP 6
15615: PUSH
15616: LD_INT 1
15618: ST_TO_ADDR
// dialog := false ;
15619: LD_ADDR_VAR 0 1
15623: PUSH
15624: LD_INT 0
15626: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15627: LD_EXP 21
15631: PPUSH
15632: CALL_OW 302
15636: IFFALSE 15658
// dialog := Say ( Gladstone , D2-Glad-1 ) else
15638: LD_ADDR_VAR 0 1
15642: PUSH
15643: LD_EXP 21
15647: PPUSH
15648: LD_STRING D2-Glad-1
15650: PPUSH
15651: CALL_OW 88
15655: ST_TO_ADDR
15656: GO 15740
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15658: LD_ADDR_VAR 0 1
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 120
15675: PUSH
15676: LD_INT 107
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: LD_INT 21
15685: PUSH
15686: LD_INT 1
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 23
15695: PUSH
15696: LD_INT 1
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: PPUSH
15709: CALL_OW 69
15713: PUSH
15714: LD_EXP 27
15718: PUSH
15719: LD_EXP 26
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: DIFF
15728: PPUSH
15729: LD_STRING D2-Sol1-1
15731: PPUSH
15732: LD_STRING D2-FSol1-1
15734: PPUSH
15735: CALL 19376 0 3
15739: ST_TO_ADDR
// if dialog then
15740: LD_VAR 0 1
15744: IFFALSE 15845
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
15746: LD_EXP 16
15750: PPUSH
15751: CALL_OW 302
15755: PUSH
15756: LD_EXP 13
15760: PUSH
15761: LD_INT 1
15763: EQUAL
15764: AND
15765: IFFALSE 15779
// Say ( Donaldson , D2-Don-1 ) ;
15767: LD_EXP 16
15771: PPUSH
15772: LD_STRING D2-Don-1
15774: PPUSH
15775: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15779: LD_EXP 15
15783: PPUSH
15784: CALL_OW 302
15788: PUSH
15789: LD_EXP 13
15793: PUSH
15794: LD_INT 2
15796: EQUAL
15797: AND
15798: IFFALSE 15812
// Say ( Brown , D2-Brown-1 ) ;
15800: LD_EXP 15
15804: PPUSH
15805: LD_STRING D2-Brown-1
15807: PPUSH
15808: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15812: LD_EXP 25
15816: PPUSH
15817: CALL_OW 302
15821: PUSH
15822: LD_EXP 13
15826: PUSH
15827: LD_INT 3
15829: EQUAL
15830: AND
15831: IFFALSE 15845
// Say ( Houten , D2-VanH-1 ) ;
15833: LD_EXP 25
15837: PPUSH
15838: LD_STRING D2-VanH-1
15840: PPUSH
15841: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
15845: LD_INT 3
15847: PPUSH
15848: CALL 12063 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
15852: LD_STRING 07_time
15854: PPUSH
15855: LD_INT 18900
15857: PPUSH
15858: CALL_OW 30
15862: PUSH
15863: LD_INT 3
15865: DIV
15866: PPUSH
15867: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
15871: LD_INT 34
15873: PPUSH
15874: LD_INT 1
15876: PPUSH
15877: CALL_OW 321
15881: PUSH
15882: LD_INT 2
15884: EQUAL
15885: IFFALSE 15894
// SetAchievement ( ACH_HEAVYGUN ) ;
15887: LD_STRING ACH_HEAVYGUN
15889: PPUSH
15890: CALL_OW 543
// PrepareMacmillanSquad ;
15894: CALL 4900 0 0
// wait ( 0 0$1 ) ;
15898: LD_INT 35
15900: PPUSH
15901: CALL_OW 67
// DialogueOn ;
15905: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
15909: LD_EXP 14
15913: PPUSH
15914: CALL_OW 87
// dwait ( 0 0$2 ) ;
15918: LD_INT 70
15920: PPUSH
15921: CALL_OW 68
// DialogueOff ;
15925: CALL_OW 7
// wait ( 0 0$10 ) ;
15929: LD_INT 350
15931: PPUSH
15932: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
15936: LD_INT 1
15938: PPUSH
15939: CALL_OW 427
// p := 0 ;
15943: LD_ADDR_VAR 0 2
15947: PUSH
15948: LD_INT 0
15950: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15951: LD_INT 35
15953: PPUSH
15954: CALL_OW 67
// p := Inc ( p ) ;
15958: LD_ADDR_VAR 0 2
15962: PUSH
15963: LD_VAR 0 2
15967: PPUSH
15968: CALL 78267 0 1
15972: ST_TO_ADDR
// if p > 120 then
15973: LD_VAR 0 2
15977: PUSH
15978: LD_INT 120
15980: GREATER
15981: IFFALSE 15985
// exit ;
15983: GO 17208
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
15985: LD_EXP 14
15989: PPUSH
15990: LD_INT 15
15992: PPUSH
15993: CALL_OW 308
15997: PUSH
15998: LD_EXP 14
16002: PPUSH
16003: CALL_OW 310
16007: PPUSH
16008: LD_INT 15
16010: PPUSH
16011: CALL_OW 308
16015: OR
16016: PUSH
16017: LD_EXP 14
16021: PPUSH
16022: LD_EXP 27
16026: PPUSH
16027: CALL_OW 296
16031: PUSH
16032: LD_INT 10
16034: LESS
16035: OR
16036: PUSH
16037: LD_INT 22
16039: PUSH
16040: LD_INT 1
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 2
16049: PUSH
16050: LD_INT 120
16052: PUSH
16053: LD_INT 106
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 120
16062: PUSH
16063: LD_INT 107
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 91
16077: PUSH
16078: LD_EXP 14
16082: PUSH
16083: LD_INT 12
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL_OW 69
16100: OR
16101: IFFALSE 15951
// DialogueOn ;
16103: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16107: LD_EXP 14
16111: PPUSH
16112: LD_STRING D3-JMM-1
16114: PPUSH
16115: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16119: LD_EXP 16
16123: PPUSH
16124: CALL_OW 302
16128: PUSH
16129: LD_EXP 13
16133: PUSH
16134: LD_INT 1
16136: EQUAL
16137: AND
16138: IFFALSE 16154
// Say ( Donaldson , D3-Don-1 ) else
16140: LD_EXP 16
16144: PPUSH
16145: LD_STRING D3-Don-1
16147: PPUSH
16148: CALL_OW 88
16152: GO 16250
// begin if gammaCommander = 1 then
16154: LD_EXP 13
16158: PUSH
16159: LD_INT 1
16161: EQUAL
16162: IFFALSE 16250
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16164: LD_INT 22
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 21
16176: PUSH
16177: LD_INT 1
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 23
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 120
16196: PUSH
16197: LD_INT 106
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 26
16206: PUSH
16207: LD_INT 1
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: PPUSH
16226: LD_STRING D3-Sol1-1
16228: PPUSH
16229: LD_STRING 
16231: PPUSH
16232: CALL 19376 0 3
16236: IFFALSE 16250
// Say ( JMM , D3-JMM-2 ) ;
16238: LD_EXP 14
16242: PPUSH
16243: LD_STRING D3-JMM-2
16245: PPUSH
16246: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16250: LD_EXP 15
16254: PPUSH
16255: CALL_OW 302
16259: PUSH
16260: LD_EXP 13
16264: PUSH
16265: LD_INT 2
16267: EQUAL
16268: AND
16269: IFFALSE 16285
// Say ( Brown , D3-Brown-1 ) else
16271: LD_EXP 15
16275: PPUSH
16276: LD_STRING D3-Brown-1
16278: PPUSH
16279: CALL_OW 88
16283: GO 16381
// begin if gammaCommander = 2 then
16285: LD_EXP 13
16289: PUSH
16290: LD_INT 2
16292: EQUAL
16293: IFFALSE 16381
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16295: LD_INT 22
16297: PUSH
16298: LD_INT 1
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 21
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 23
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 120
16327: PUSH
16328: LD_INT 106
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 26
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: PPUSH
16352: CALL_OW 69
16356: PPUSH
16357: LD_STRING D3-Sol1-1a
16359: PPUSH
16360: LD_STRING 
16362: PPUSH
16363: CALL 19376 0 3
16367: IFFALSE 16381
// Say ( JMM , D3-JMM-2 ) ;
16369: LD_EXP 14
16373: PPUSH
16374: LD_STRING D3-JMM-2
16376: PPUSH
16377: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16381: LD_EXP 25
16385: PPUSH
16386: CALL_OW 302
16390: PUSH
16391: LD_EXP 13
16395: PUSH
16396: LD_INT 3
16398: EQUAL
16399: AND
16400: IFFALSE 16416
// Say ( Houten , D3-VanH-1 ) else
16402: LD_EXP 25
16406: PPUSH
16407: LD_STRING D3-VanH-1
16409: PPUSH
16410: CALL_OW 88
16414: GO 16512
// begin if gammaCommander = 3 then
16416: LD_EXP 13
16420: PUSH
16421: LD_INT 3
16423: EQUAL
16424: IFFALSE 16512
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
16426: LD_INT 22
16428: PUSH
16429: LD_INT 1
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 21
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 23
16448: PUSH
16449: LD_INT 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 120
16458: PUSH
16459: LD_INT 106
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 26
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PPUSH
16483: CALL_OW 69
16487: PPUSH
16488: LD_STRING D3-Sol1-1b
16490: PPUSH
16491: LD_STRING 
16493: PPUSH
16494: CALL 19376 0 3
16498: IFFALSE 16512
// Say ( JMM , D3-JMM-2 ) ;
16500: LD_EXP 14
16504: PPUSH
16505: LD_STRING D3-JMM-2
16507: PPUSH
16508: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
16512: LD_EXP 27
16516: PPUSH
16517: CALL_OW 302
16521: IFFALSE 16549
// begin Say ( Joan , D3a-Joan-1 ) ;
16523: LD_EXP 27
16527: PPUSH
16528: LD_STRING D3a-Joan-1
16530: PPUSH
16531: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
16535: LD_EXP 14
16539: PPUSH
16540: LD_STRING D3a-JMM-1
16542: PPUSH
16543: CALL_OW 88
// end else
16547: GO 16983
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16549: LD_STRING 06_JoanStatus_1
16551: PPUSH
16552: LD_INT 0
16554: PPUSH
16555: CALL_OW 30
16559: PUSH
16560: LD_INT 1
16562: EQUAL
16563: IFFALSE 16983
// begin Say ( JMM , D3b-JMM-1 ) ;
16565: LD_EXP 14
16569: PPUSH
16570: LD_STRING D3b-JMM-1
16572: PPUSH
16573: CALL_OW 88
// dialog := false ;
16577: LD_ADDR_VAR 0 1
16581: PUSH
16582: LD_INT 0
16584: ST_TO_ADDR
// if gammaCommander = 1 then
16585: LD_EXP 13
16589: PUSH
16590: LD_INT 1
16592: EQUAL
16593: IFFALSE 16704
// if IsOK ( Donaldson ) then
16595: LD_EXP 16
16599: PPUSH
16600: CALL_OW 302
16604: IFFALSE 16626
// dialog := Say ( Donaldson , D3b-Don-1 ) else
16606: LD_ADDR_VAR 0 1
16610: PUSH
16611: LD_EXP 16
16615: PPUSH
16616: LD_STRING D3b-Don-1
16618: PPUSH
16619: CALL_OW 88
16623: ST_TO_ADDR
16624: GO 16704
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16626: LD_ADDR_VAR 0 1
16630: PUSH
16631: LD_INT 22
16633: PUSH
16634: LD_INT 1
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 21
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 23
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 120
16663: PUSH
16664: LD_INT 106
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 26
16673: PUSH
16674: LD_INT 1
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: PPUSH
16688: CALL_OW 69
16692: PPUSH
16693: LD_STRING D3b-Sol1-1
16695: PPUSH
16696: LD_STRING 
16698: PPUSH
16699: CALL 19376 0 3
16703: ST_TO_ADDR
// if gammaCommander = 2 then
16704: LD_EXP 13
16708: PUSH
16709: LD_INT 2
16711: EQUAL
16712: IFFALSE 16823
// if IsOk ( Brown ) then
16714: LD_EXP 15
16718: PPUSH
16719: CALL_OW 302
16723: IFFALSE 16745
// dialog := Say ( Brown , D3b-Brown-1 ) else
16725: LD_ADDR_VAR 0 1
16729: PUSH
16730: LD_EXP 15
16734: PPUSH
16735: LD_STRING D3b-Brown-1
16737: PPUSH
16738: CALL_OW 88
16742: ST_TO_ADDR
16743: GO 16823
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16745: LD_ADDR_VAR 0 1
16749: PUSH
16750: LD_INT 22
16752: PUSH
16753: LD_INT 1
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 21
16762: PUSH
16763: LD_INT 1
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 23
16772: PUSH
16773: LD_INT 1
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 120
16782: PUSH
16783: LD_INT 106
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 26
16792: PUSH
16793: LD_INT 1
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: PPUSH
16807: CALL_OW 69
16811: PPUSH
16812: LD_STRING D3b-Sol1-1
16814: PPUSH
16815: LD_STRING 
16817: PPUSH
16818: CALL 19376 0 3
16822: ST_TO_ADDR
// if gammaCommander = 3 then
16823: LD_EXP 13
16827: PUSH
16828: LD_INT 3
16830: EQUAL
16831: IFFALSE 16942
// if IsOk ( Houten ) then
16833: LD_EXP 25
16837: PPUSH
16838: CALL_OW 302
16842: IFFALSE 16864
// dialog := Say ( Houten , D3b-VanH-1 ) else
16844: LD_ADDR_VAR 0 1
16848: PUSH
16849: LD_EXP 25
16853: PPUSH
16854: LD_STRING D3b-VanH-1
16856: PPUSH
16857: CALL_OW 88
16861: ST_TO_ADDR
16862: GO 16942
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16864: LD_ADDR_VAR 0 1
16868: PUSH
16869: LD_INT 22
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 21
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 23
16891: PUSH
16892: LD_INT 1
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 120
16901: PUSH
16902: LD_INT 106
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 26
16911: PUSH
16912: LD_INT 1
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: PPUSH
16926: CALL_OW 69
16930: PPUSH
16931: LD_STRING D3b-Sol1-1
16933: PPUSH
16934: LD_STRING 
16936: PPUSH
16937: CALL 19376 0 3
16941: ST_TO_ADDR
// if dialog then
16942: LD_VAR 0 1
16946: IFFALSE 16983
// begin Say ( JMM , D3b-JMM-2 ) ;
16948: LD_EXP 14
16952: PPUSH
16953: LD_STRING D3b-JMM-2
16955: PPUSH
16956: CALL_OW 88
// if IsOK ( Lisa ) then
16960: LD_EXP 19
16964: PPUSH
16965: CALL_OW 302
16969: IFFALSE 16983
// Say ( Lisa , D3b-Lisa-2 ) ;
16971: LD_EXP 19
16975: PPUSH
16976: LD_STRING D3b-Lisa-2
16978: PPUSH
16979: CALL_OW 88
// end ; end ; end ; if not seenComputer then
16983: LD_EXP 7
16987: NOT
16988: IFFALSE 16996
// begin DialogueOff ;
16990: CALL_OW 7
// exit ;
16994: GO 17208
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16996: LD_INT 22
16998: PUSH
16999: LD_INT 1
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 21
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 23
17018: PUSH
17019: LD_INT 1
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 2
17028: PUSH
17029: LD_INT 120
17031: PUSH
17032: LD_INT 106
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 120
17041: PUSH
17042: LD_INT 107
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 26
17056: PUSH
17057: LD_INT 1
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: PPUSH
17071: CALL_OW 69
17075: PPUSH
17076: LD_STRING DCa-Sol1-1
17078: PPUSH
17079: LD_STRING 
17081: PPUSH
17082: CALL 19376 0 3
17086: IFFALSE 17100
// Say ( JMM , DCb-JMM-1 ) ;
17088: LD_EXP 14
17092: PPUSH
17093: LD_STRING DCb-JMM-1
17095: PPUSH
17096: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17100: LD_INT 22
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 21
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 23
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 2
17132: PUSH
17133: LD_INT 120
17135: PUSH
17136: LD_INT 106
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 120
17145: PUSH
17146: LD_INT 107
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 26
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: PPUSH
17175: CALL_OW 69
17179: PPUSH
17180: LD_STRING DCb-Sol1-1
17182: PPUSH
17183: LD_STRING 
17185: PPUSH
17186: CALL 19376 0 3
17190: IFFALSE 17204
// Say ( JMM , DCb-JMM-2 ) ;
17192: LD_EXP 14
17196: PPUSH
17197: LD_STRING DCb-JMM-2
17199: PPUSH
17200: CALL_OW 88
// DialogueOff ;
17204: CALL_OW 7
// end ;
17208: PPOPN 2
17210: END
// export function DialogSeenComputer ( un ) ; begin
17211: LD_INT 0
17213: PPUSH
// if jmmArrival then
17214: LD_EXP 8
17218: IFFALSE 17222
// exit ;
17220: GO 17288
// CenterOnUnits ( un ) ;
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17231: LD_INT 22
17233: PUSH
17234: LD_INT 1
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 2
17243: PUSH
17244: LD_INT 120
17246: PUSH
17247: LD_INT 106
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 120
17256: PUSH
17257: LD_INT 107
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: PPUSH
17278: LD_STRING DC-Sol1-1
17280: PPUSH
17281: LD_STRING DC-FSol1-1
17283: PPUSH
17284: CALL 19376 0 3
// end ;
17288: LD_VAR 0 2
17292: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17293: LD_EXP 8
17297: PUSH
17298: LD_OWVAR 1
17302: PUSH
17303: LD_INT 48300
17305: GREATEREQUAL
17306: AND
17307: PUSH
17308: LD_EXP 14
17312: PPUSH
17313: CALL_OW 302
17317: AND
17318: IFFALSE 17781
17320: GO 17322
17322: DISABLE
// begin wait ( 2 2$00 ) ;
17323: LD_INT 4200
17325: PPUSH
17326: CALL_OW 67
// DialogueOn ;
17330: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17334: LD_EXP 30
17338: PPUSH
17339: LD_STRING D4-Pow-1
17341: PPUSH
17342: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17346: LD_EXP 14
17350: PPUSH
17351: LD_STRING D4-JMM-1
17353: PPUSH
17354: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17358: LD_EXP 30
17362: PPUSH
17363: LD_STRING D4-Pow-2
17365: PPUSH
17366: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17370: LD_EXP 14
17374: PPUSH
17375: LD_STRING D4-JMM-2
17377: PPUSH
17378: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17382: LD_EXP 30
17386: PPUSH
17387: LD_STRING D4-Pow-3
17389: PPUSH
17390: CALL_OW 94
// DialogueOff ;
17394: CALL_OW 7
// wait ( 1 1$00 ) ;
17398: LD_INT 2100
17400: PPUSH
17401: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
17405: LD_INT 1
17407: PPUSH
17408: CALL_OW 427
// wait ( 7 7$30 ) ;
17412: LD_INT 15750
17414: PPUSH
17415: CALL_OW 67
// DialogueOn ;
17419: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
17423: LD_EXP 30
17427: PPUSH
17428: LD_STRING D4a-Pow-1
17430: PPUSH
17431: CALL_OW 94
// DialogueOff ;
17435: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
17439: LD_INT 1
17441: PPUSH
17442: CALL_OW 427
// SikorskiCounter ;
17446: CALL 19160 0 0
// PrepareSikorsky ;
17450: CALL 6322 0 0
// CenterNowOnUnits ( Sikorski ) ;
17454: LD_EXP 28
17458: PPUSH
17459: CALL_OW 87
// DialogueOn ;
17463: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
17467: LD_EXP 28
17471: PPUSH
17472: LD_STRING D5-Sik-1
17474: PPUSH
17475: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 then
17479: LD_INT 11
17481: PPUSH
17482: LD_INT 22
17484: PUSH
17485: LD_INT 1
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PPUSH
17492: CALL_OW 70
17496: PUSH
17497: LD_INT 1
17499: GREATER
17500: IFFALSE 17552
// begin Say ( JMM , D5-JMM-1 ) ;
17502: LD_EXP 14
17506: PPUSH
17507: LD_STRING D5-JMM-1
17509: PPUSH
17510: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
17514: LD_EXP 28
17518: PPUSH
17519: LD_STRING D7a-Sik-1
17521: PPUSH
17522: CALL_OW 88
// DialogueOff ;
17526: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17530: LD_STRING M2
17532: PPUSH
17533: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17537: LD_INT 1
17539: PPUSH
17540: CALL_OW 427
// SikorskiAttack ;
17544: CALL 7670 0 0
// exit ;
17548: GO 17781
// end else
17550: GO 17597
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
17552: LD_INT 15
17554: PPUSH
17555: LD_INT 81
17557: PUSH
17558: LD_INT 1
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PPUSH
17565: CALL_OW 70
17569: IFFALSE 17585
// Say ( JMM , D5-JMM-1b ) else
17571: LD_EXP 14
17575: PPUSH
17576: LD_STRING D5-JMM-1b
17578: PPUSH
17579: CALL_OW 88
17583: GO 17597
// Say ( JMM , D5-JMM-1a ) ;
17585: LD_EXP 14
17589: PPUSH
17590: LD_STRING D5-JMM-1a
17592: PPUSH
17593: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
17597: LD_EXP 28
17601: PPUSH
17602: LD_STRING D5-Sik-2
17604: PPUSH
17605: CALL_OW 88
// case Query ( QSikorski ) of 1 :
17609: LD_STRING QSikorski
17611: PPUSH
17612: CALL_OW 97
17616: PUSH
17617: LD_INT 1
17619: DOUBLE
17620: EQUAL
17621: IFTRUE 17625
17623: GO 17648
17625: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
17626: LD_EXP 28
17630: PPUSH
17631: LD_STRING D5a-Sik-1
17633: PPUSH
17634: CALL_OW 88
// sikorskiWait := 1 1$00 ;
17638: LD_ADDR_EXP 4
17642: PUSH
17643: LD_INT 2100
17645: ST_TO_ADDR
// end ; 2 :
17646: GO 17735
17648: LD_INT 2
17650: DOUBLE
17651: EQUAL
17652: IFTRUE 17656
17654: GO 17679
17656: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
17657: LD_EXP 28
17661: PPUSH
17662: LD_STRING D5b-Sik-1
17664: PPUSH
17665: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17669: LD_ADDR_EXP 4
17673: PUSH
17674: LD_INT 10500
17676: ST_TO_ADDR
// end ; 3 :
17677: GO 17735
17679: LD_INT 3
17681: DOUBLE
17682: EQUAL
17683: IFTRUE 17687
17685: GO 17734
17687: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
17688: LD_EXP 28
17692: PPUSH
17693: LD_STRING D5c-Sik-1
17695: PPUSH
17696: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
17700: LD_EXP 14
17704: PPUSH
17705: LD_STRING D5c-JMM-1
17707: PPUSH
17708: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
17712: LD_EXP 28
17716: PPUSH
17717: LD_STRING D5c-Sik-2
17719: PPUSH
17720: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17724: LD_ADDR_EXP 4
17728: PUSH
17729: LD_INT 10500
17731: ST_TO_ADDR
// end ; end ;
17732: GO 17735
17734: POP
// DialogueOff ;
17735: CALL_OW 7
// SikorskiWaitCounter ;
17739: CALL 19223 0 0
// DialogueOn ;
17743: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
17747: LD_EXP 28
17751: PPUSH
17752: LD_STRING D6-Sik-1
17754: PPUSH
17755: CALL_OW 88
// DialogueOff ;
17759: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17763: LD_STRING M2
17765: PPUSH
17766: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17770: LD_INT 1
17772: PPUSH
17773: CALL_OW 427
// SikorskiAttack ;
17777: CALL 7670 0 0
// end ;
17781: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
17782: LD_INT 11
17784: PPUSH
17785: LD_INT 22
17787: PUSH
17788: LD_INT 4
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PPUSH
17795: CALL_OW 70
17799: PUSH
17800: LD_INT 2
17802: GREATER
17803: IFFALSE 17996
17805: GO 17807
17807: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
17808: LD_EXP 28
17812: PPUSH
17813: LD_STRING D7-Sik-1
17815: PPUSH
17816: CALL_OW 88
// wait ( 0 0$10 ) ;
17820: LD_INT 350
17822: PPUSH
17823: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
17827: LD_EXP 14
17831: PPUSH
17832: LD_INT 11
17834: PPUSH
17835: CALL_OW 308
17839: PUSH
17840: LD_EXP 14
17844: PPUSH
17845: CALL_OW 310
17849: PPUSH
17850: LD_INT 11
17852: PPUSH
17853: CALL_OW 308
17857: OR
17858: IFFALSE 17882
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17860: LD_EXP 28
17864: PPUSH
17865: LD_STRING D7a-Sik-1
17867: PPUSH
17868: CALL_OW 88
// sikorskiStatus := 1 ;
17872: LD_ADDR_EXP 9
17876: PUSH
17877: LD_INT 1
17879: ST_TO_ADDR
// end else
17880: GO 17902
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17882: LD_EXP 28
17886: PPUSH
17887: LD_STRING D7b-Sik-1
17889: PPUSH
17890: CALL_OW 88
// sikorskiStatus := 0 ;
17894: LD_ADDR_EXP 9
17898: PUSH
17899: LD_INT 0
17901: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
17902: LD_INT 1575
17904: PPUSH
17905: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
17909: LD_EXP 14
17913: PPUSH
17914: LD_INT 11
17916: PPUSH
17917: CALL_OW 308
17921: PUSH
17922: LD_EXP 14
17926: PPUSH
17927: CALL_OW 310
17931: PPUSH
17932: LD_INT 11
17934: PPUSH
17935: CALL_OW 308
17939: OR
17940: PUSH
17941: LD_EXP 14
17945: PPUSH
17946: CALL_OW 302
17950: NOT
17951: OR
17952: IFFALSE 17976
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17954: LD_EXP 28
17958: PPUSH
17959: LD_STRING D7a-Sik-1
17961: PPUSH
17962: CALL_OW 88
// sikorskiStatus := 1 ;
17966: LD_ADDR_EXP 9
17970: PUSH
17971: LD_INT 1
17973: ST_TO_ADDR
// end else
17974: GO 17996
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17976: LD_EXP 28
17980: PPUSH
17981: LD_STRING D7b-Sik-1
17983: PPUSH
17984: CALL_OW 88
// sikorskiStatus := 0 ;
17988: LD_ADDR_EXP 9
17992: PUSH
17993: LD_INT 0
17995: ST_TO_ADDR
// end ; end ;
17996: END
// export function SikorskiKilledInAction ; begin
17997: LD_INT 0
17999: PPUSH
// wait ( 0 0$2 ) ;
18000: LD_INT 70
18002: PPUSH
18003: CALL_OW 67
// DialogueOn ;
18007: CALL_OW 6
// dwait ( 0 0$1 ) ;
18011: LD_INT 35
18013: PPUSH
18014: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18018: LD_EXP 30
18022: PPUSH
18023: LD_STRING D8b-Pow-1
18025: PPUSH
18026: CALL_OW 94
// YouLost ( Dismissed ) ;
18030: LD_STRING Dismissed
18032: PPUSH
18033: CALL_OW 104
// DialogueOff ;
18037: CALL_OW 7
// end ;
18041: LD_VAR 0 1
18045: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18046: LD_EXP 8
18050: PUSH
18051: LD_INT 28
18053: PPUSH
18054: CALL_OW 301
18058: AND
18059: PUSH
18060: LD_EXP 32
18064: PPUSH
18065: CALL_OW 301
18069: AND
18070: PUSH
18071: LD_INT 22
18073: PUSH
18074: LD_INT 3
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 50
18083: PUSH
18084: EMPTY
18085: LIST
18086: PUSH
18087: LD_INT 30
18089: PUSH
18090: LD_INT 5
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: PUSH
18107: LD_INT 0
18109: EQUAL
18110: AND
18111: IFFALSE 19157
18113: GO 18115
18115: DISABLE
18116: LD_INT 0
18118: PPUSH
18119: PPUSH
18120: PPUSH
// begin Video ( true ) ;
18121: LD_INT 1
18123: PPUSH
18124: CALL 76878 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18128: LD_INT 104
18130: PPUSH
18131: LD_INT 108
18133: PPUSH
18134: LD_INT 1
18136: PPUSH
18137: LD_INT 36
18139: NEG
18140: PPUSH
18141: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18145: LD_INT 104
18147: PPUSH
18148: LD_INT 108
18150: PPUSH
18151: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18155: LD_ADDR_VAR 0 2
18159: PUSH
18160: LD_INT 22
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 21
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 3
18182: PUSH
18183: LD_INT 24
18185: PUSH
18186: LD_INT 249
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 69
18206: ST_TO_ADDR
// if tmp then
18207: LD_VAR 0 2
18211: IFFALSE 18242
// for i in tmp do
18213: LD_ADDR_VAR 0 1
18217: PUSH
18218: LD_VAR 0 2
18222: PUSH
18223: FOR_IN
18224: IFFALSE 18240
// SetLives ( i , 249 ) ;
18226: LD_VAR 0 1
18230: PPUSH
18231: LD_INT 249
18233: PPUSH
18234: CALL_OW 234
18238: GO 18223
18240: POP
18241: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18242: LD_ADDR_VAR 0 1
18246: PUSH
18247: LD_INT 22
18249: PUSH
18250: LD_INT 3
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 21
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: PUSH
18276: FOR_IN
18277: IFFALSE 18320
// begin ComExit ( i ) ;
18279: LD_VAR 0 1
18283: PPUSH
18284: CALL 77304 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18288: LD_VAR 0 1
18292: PPUSH
18293: LD_INT 131
18295: PPUSH
18296: LD_INT 127
18298: PPUSH
18299: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18303: LD_VAR 0 1
18307: PPUSH
18308: LD_INT 141
18310: PPUSH
18311: LD_INT 147
18313: PPUSH
18314: CALL_OW 171
// end ;
18318: GO 18276
18320: POP
18321: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18322: LD_INT 81
18324: PUSH
18325: LD_INT 3
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 3
18334: PUSH
18335: LD_INT 21
18337: PUSH
18338: LD_INT 3
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PPUSH
18353: CALL_OW 69
18357: PPUSH
18358: LD_INT 131
18360: PPUSH
18361: LD_INT 127
18363: PPUSH
18364: CALL_OW 174
// wait ( 0 0$08 ) ;
18368: LD_INT 280
18370: PPUSH
18371: CALL_OW 67
// DialogueOn ;
18375: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
18379: LD_EXP 9
18383: PUSH
18384: LD_INT 1
18386: EQUAL
18387: PUSH
18388: LD_EXP 28
18392: PPUSH
18393: CALL_OW 302
18397: AND
18398: IFFALSE 18412
// Say ( Sikorski , D9-Sik-1 ) ;
18400: LD_EXP 28
18404: PPUSH
18405: LD_STRING D9-Sik-1
18407: PPUSH
18408: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
18412: LD_INT 22
18414: PUSH
18415: LD_INT 4
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PPUSH
18422: CALL_OW 69
18426: PUSH
18427: LD_INT 0
18429: EQUAL
18430: PUSH
18431: LD_EXP 3
18435: AND
18436: IFFALSE 18445
// SetAchievement ( ACH_BLITZKRIEG ) ;
18438: LD_STRING ACH_BLITZKRIEG
18440: PPUSH
18441: CALL_OW 543
// if tick <= 45 45$10 then
18445: LD_OWVAR 1
18449: PUSH
18450: LD_INT 94850
18452: LESSEQUAL
18453: IFFALSE 18469
// begin wait ( 3 ) ;
18455: LD_INT 3
18457: PPUSH
18458: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
18462: LD_STRING ACH_ASPEED_8
18464: PPUSH
18465: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
18469: LD_STRING med1
18471: PPUSH
18472: LD_INT 1
18474: PPUSH
18475: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
18479: LD_STRING med2
18481: PPUSH
18482: LD_INT 1
18484: PPUSH
18485: CALL_OW 101
// if sikorskiStatus = 1 then
18489: LD_EXP 9
18493: PUSH
18494: LD_INT 1
18496: EQUAL
18497: IFFALSE 18511
// AddMedal ( perfect , 1 ) else
18499: LD_STRING perfect
18501: PPUSH
18502: LD_INT 1
18504: PPUSH
18505: CALL_OW 101
18509: GO 18522
// AddMedal ( perfect , - 1 ) ;
18511: LD_STRING perfect
18513: PPUSH
18514: LD_INT 1
18516: NEG
18517: PPUSH
18518: CALL_OW 101
// if Difficulty >= 3 then
18522: LD_OWVAR 67
18526: PUSH
18527: LD_INT 3
18529: GREATEREQUAL
18530: IFFALSE 18542
// SetAchievementEX ( ACH_AMER , 8 ) ;
18532: LD_STRING ACH_AMER
18534: PPUSH
18535: LD_INT 8
18537: PPUSH
18538: CALL_OW 564
// GiveMedals ( Main ) ;
18542: LD_STRING Main
18544: PPUSH
18545: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18549: LD_INT 22
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 23
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 21
18571: PUSH
18572: LD_INT 1
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: PPUSH
18584: CALL_OW 69
18588: PPUSH
18589: CALL_OW 43
// prefix := 08_ ;
18593: LD_ADDR_VAR 0 3
18597: PUSH
18598: LD_STRING 08_
18600: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
18601: LD_EXP 14
18605: PPUSH
18606: LD_VAR 0 3
18610: PUSH
18611: LD_STRING JMM
18613: STR
18614: PPUSH
18615: CALL_OW 38
// if IsLive ( Brown ) then
18619: LD_EXP 15
18623: PPUSH
18624: CALL_OW 300
18628: IFFALSE 18648
// SaveCharacters ( Brown , prefix & Brown ) ;
18630: LD_EXP 15
18634: PPUSH
18635: LD_VAR 0 3
18639: PUSH
18640: LD_STRING Brown
18642: STR
18643: PPUSH
18644: CALL_OW 38
// if IsLive ( Donaldson ) then
18648: LD_EXP 16
18652: PPUSH
18653: CALL_OW 300
18657: IFFALSE 18677
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
18659: LD_EXP 16
18663: PPUSH
18664: LD_VAR 0 3
18668: PUSH
18669: LD_STRING Donaldson
18671: STR
18672: PPUSH
18673: CALL_OW 38
// if IsLive ( Bobby ) then
18677: LD_EXP 17
18681: PPUSH
18682: CALL_OW 300
18686: IFFALSE 18706
// SaveCharacters ( Bobby , prefix & Bobby ) ;
18688: LD_EXP 17
18692: PPUSH
18693: LD_VAR 0 3
18697: PUSH
18698: LD_STRING Bobby
18700: STR
18701: PPUSH
18702: CALL_OW 38
// if IsLive ( Cyrus ) then
18706: LD_EXP 18
18710: PPUSH
18711: CALL_OW 300
18715: IFFALSE 18735
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
18717: LD_EXP 18
18721: PPUSH
18722: LD_VAR 0 3
18726: PUSH
18727: LD_STRING Cyrus
18729: STR
18730: PPUSH
18731: CALL_OW 38
// if IsLive ( Lisa ) then
18735: LD_EXP 19
18739: PPUSH
18740: CALL_OW 300
18744: IFFALSE 18764
// SaveCharacters ( Lisa , prefix & Lisa ) ;
18746: LD_EXP 19
18750: PPUSH
18751: LD_VAR 0 3
18755: PUSH
18756: LD_STRING Lisa
18758: STR
18759: PPUSH
18760: CALL_OW 38
// if IsLive ( Frank ) then
18764: LD_EXP 20
18768: PPUSH
18769: CALL_OW 300
18773: IFFALSE 18793
// SaveCharacters ( Frank , prefix & Frank ) ;
18775: LD_EXP 20
18779: PPUSH
18780: LD_VAR 0 3
18784: PUSH
18785: LD_STRING Frank
18787: STR
18788: PPUSH
18789: CALL_OW 38
// if IsLive ( Gladstone ) then
18793: LD_EXP 21
18797: PPUSH
18798: CALL_OW 300
18802: IFFALSE 18822
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
18804: LD_EXP 21
18808: PPUSH
18809: LD_VAR 0 3
18813: PUSH
18814: LD_STRING Gladstone
18816: STR
18817: PPUSH
18818: CALL_OW 38
// if IsLive ( Kikuchi ) then
18822: LD_EXP 22
18826: PPUSH
18827: CALL_OW 300
18831: IFFALSE 18851
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
18833: LD_EXP 22
18837: PPUSH
18838: LD_VAR 0 3
18842: PUSH
18843: LD_STRING Kikuchi
18845: STR
18846: PPUSH
18847: CALL_OW 38
// if IsLive ( Denis ) then
18851: LD_EXP 26
18855: PPUSH
18856: CALL_OW 300
18860: IFFALSE 18880
// SaveCharacters ( Denis , prefix & Denis ) ;
18862: LD_EXP 26
18866: PPUSH
18867: LD_VAR 0 3
18871: PUSH
18872: LD_STRING Denis
18874: STR
18875: PPUSH
18876: CALL_OW 38
// if IsLive ( Joan ) then
18880: LD_EXP 27
18884: PPUSH
18885: CALL_OW 300
18889: IFFALSE 18911
// SaveCharacters ( Joan , prefix & Joan ) else
18891: LD_EXP 27
18895: PPUSH
18896: LD_VAR 0 3
18900: PUSH
18901: LD_STRING Joan
18903: STR
18904: PPUSH
18905: CALL_OW 38
18909: GO 18918
// DeleteCharacters ( Joan ) ;
18911: LD_STRING Joan
18913: PPUSH
18914: CALL_OW 40
// if IsLive ( Khatam ) then
18918: LD_EXP 23
18922: PPUSH
18923: CALL_OW 300
18927: IFFALSE 18947
// SaveCharacters ( Khatam , prefix & Khatam ) ;
18929: LD_EXP 23
18933: PPUSH
18934: LD_VAR 0 3
18938: PUSH
18939: LD_STRING Khatam
18941: STR
18942: PPUSH
18943: CALL_OW 38
// if IsLive ( Houten ) then
18947: LD_EXP 25
18951: PPUSH
18952: CALL_OW 300
18956: IFFALSE 18976
// SaveCharacters ( Houten , prefix & Houten ) ;
18958: LD_EXP 25
18962: PPUSH
18963: LD_VAR 0 3
18967: PUSH
18968: LD_STRING Houten
18970: STR
18971: PPUSH
18972: CALL_OW 38
// if IsLive ( Mike ) then
18976: LD_EXP 24
18980: PPUSH
18981: CALL_OW 300
18985: IFFALSE 19005
// SaveCharacters ( Mike , prefix & Mike ) ;
18987: LD_EXP 24
18991: PPUSH
18992: LD_VAR 0 3
18996: PUSH
18997: LD_STRING Mike
18999: STR
19000: PPUSH
19001: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19005: LD_INT 22
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 21
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 23
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: PPUSH
19040: CALL_OW 69
19044: PUSH
19045: LD_EXP 14
19049: PUSH
19050: LD_EXP 15
19054: PUSH
19055: LD_EXP 16
19059: PUSH
19060: LD_EXP 17
19064: PUSH
19065: LD_EXP 18
19069: PUSH
19070: LD_EXP 19
19074: PUSH
19075: LD_EXP 20
19079: PUSH
19080: LD_EXP 21
19084: PUSH
19085: LD_EXP 22
19089: PUSH
19090: LD_EXP 26
19094: PUSH
19095: LD_EXP 27
19099: PUSH
19100: LD_EXP 25
19104: PUSH
19105: LD_EXP 23
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: DIFF
19125: PPUSH
19126: LD_STRING 08_other_survivors
19128: PPUSH
19129: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19133: LD_INT 15
19135: PPUSH
19136: CALL 7144 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19140: LD_EXP 10
19144: NOT
19145: PPUSH
19146: LD_STRING 08_SikorskiStatus
19148: PPUSH
19149: CALL_OW 39
// YouWin ;
19153: CALL_OW 103
// end ; end_of_file
19157: PPOPN 3
19159: END
// export function SikorskiCounter ; begin
19160: LD_INT 0
19162: PPUSH
// repeat wait ( 0 0$1 ) ;
19163: LD_INT 35
19165: PPUSH
19166: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19170: LD_ADDR_OWVAR 47
19174: PUSH
19175: LD_STRING #Am08-2
19177: PUSH
19178: LD_EXP 3
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19187: LD_ADDR_EXP 3
19191: PUSH
19192: LD_EXP 3
19196: PUSH
19197: LD_INT 35
19199: MINUS
19200: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19201: LD_EXP 3
19205: PUSH
19206: LD_INT 0
19208: EQUAL
19209: IFFALSE 19163
// display_strings := [ ] ;
19211: LD_ADDR_OWVAR 47
19215: PUSH
19216: EMPTY
19217: ST_TO_ADDR
// end ;
19218: LD_VAR 0 1
19222: RET
// export function SikorskiWaitCounter ; begin
19223: LD_INT 0
19225: PPUSH
// repeat wait ( 0 0$1 ) ;
19226: LD_INT 35
19228: PPUSH
19229: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19233: LD_ADDR_OWVAR 47
19237: PUSH
19238: LD_STRING #Am08-1
19240: PUSH
19241: LD_EXP 4
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19250: LD_ADDR_EXP 4
19254: PUSH
19255: LD_EXP 4
19259: PUSH
19260: LD_INT 35
19262: MINUS
19263: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19264: LD_EXP 4
19268: PUSH
19269: LD_INT 0
19271: EQUAL
19272: IFFALSE 19226
// display_strings := [ ] ;
19274: LD_ADDR_OWVAR 47
19278: PUSH
19279: EMPTY
19280: ST_TO_ADDR
// end ; end_of_file
19281: LD_VAR 0 1
19285: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19286: LD_EXP 3
19290: IFFALSE 19330
19292: GO 19294
19294: DISABLE
// begin enable ;
19295: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19296: LD_INT 14
19298: PPUSH
19299: CALL_OW 435
19303: PUSH
19304: LD_INT 10
19306: LESS
19307: IFFALSE 19330
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19309: LD_INT 1
19311: PPUSH
19312: LD_INT 5
19314: PPUSH
19315: CALL_OW 12
19319: PPUSH
19320: LD_INT 14
19322: PPUSH
19323: LD_INT 1
19325: PPUSH
19326: CALL_OW 55
// end ;
19330: END
// every 0 0$55 trigger sikorskiArriveCounter do
19331: LD_EXP 3
19335: IFFALSE 19375
19337: GO 19339
19339: DISABLE
// begin enable ;
19340: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
19341: LD_INT 13
19343: PPUSH
19344: CALL_OW 435
19348: PUSH
19349: LD_INT 10
19351: LESS
19352: IFFALSE 19375
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
19354: LD_INT 1
19356: PPUSH
19357: LD_INT 5
19359: PPUSH
19360: CALL_OW 12
19364: PPUSH
19365: LD_INT 13
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: CALL_OW 55
// end ; end_of_file
19375: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
19376: LD_INT 0
19378: PPUSH
19379: PPUSH
// if not units then
19380: LD_VAR 0 1
19384: NOT
19385: IFFALSE 19389
// exit ;
19387: GO 19514
// result := false ;
19389: LD_ADDR_VAR 0 4
19393: PUSH
19394: LD_INT 0
19396: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
19397: LD_ADDR_VAR 0 5
19401: PUSH
19402: LD_VAR 0 1
19406: PPUSH
19407: LD_INT 26
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 72
19421: ST_TO_ADDR
// if tmp then
19422: LD_VAR 0 5
19426: IFFALSE 19452
// result := Say ( tmp [ 1 ] , menDialog ) ;
19428: LD_ADDR_VAR 0 4
19432: PUSH
19433: LD_VAR 0 5
19437: PUSH
19438: LD_INT 1
19440: ARRAY
19441: PPUSH
19442: LD_VAR 0 2
19446: PPUSH
19447: CALL_OW 88
19451: ST_TO_ADDR
// if not result then
19452: LD_VAR 0 4
19456: NOT
19457: IFFALSE 19514
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
19459: LD_ADDR_VAR 0 5
19463: PUSH
19464: LD_VAR 0 1
19468: PPUSH
19469: LD_INT 26
19471: PUSH
19472: LD_INT 2
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PPUSH
19479: CALL_OW 72
19483: ST_TO_ADDR
// if tmp then
19484: LD_VAR 0 5
19488: IFFALSE 19514
// result := Say ( tmp [ 1 ] , womenDialog ) ;
19490: LD_ADDR_VAR 0 4
19494: PUSH
19495: LD_VAR 0 5
19499: PUSH
19500: LD_INT 1
19502: ARRAY
19503: PPUSH
19504: LD_VAR 0 3
19508: PPUSH
19509: CALL_OW 88
19513: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
19514: LD_VAR 0 4
19518: RET
// every 0 0$1 do
19519: GO 19521
19521: DISABLE
// begin enable ;
19522: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19523: LD_STRING updateTimer(
19525: PUSH
19526: LD_OWVAR 1
19530: STR
19531: PUSH
19532: LD_STRING );
19534: STR
19535: PPUSH
19536: CALL_OW 559
// end ;
19540: END
// export function SOS_MapStart ( ) ; begin
19541: LD_INT 0
19543: PPUSH
// if streamModeActive then
19544: LD_EXP 37
19548: IFFALSE 19557
// DefineStreamItems ( true ) ;
19550: LD_INT 1
19552: PPUSH
19553: CALL 21211 0 1
// UpdateFactoryWaypoints ( ) ;
19557: CALL 34072 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19561: CALL 34329 0 0
// end ;
19565: LD_VAR 0 1
19569: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19570: LD_INT 0
19572: PPUSH
// if p2 = hack_mode then
19573: LD_VAR 0 2
19577: PUSH
19578: LD_INT 100
19580: EQUAL
19581: IFFALSE 20584
// begin if not StreamModeActive then
19583: LD_EXP 37
19587: NOT
19588: IFFALSE 19598
// StreamModeActive := true ;
19590: LD_ADDR_EXP 37
19594: PUSH
19595: LD_INT 1
19597: ST_TO_ADDR
// if p3 = 0 then
19598: LD_VAR 0 3
19602: PUSH
19603: LD_INT 0
19605: EQUAL
19606: IFFALSE 19612
// InitStreamMode ;
19608: CALL 20747 0 0
// if p3 = 1 then
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 1
19619: EQUAL
19620: IFFALSE 19630
// sRocket := true ;
19622: LD_ADDR_EXP 42
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// if p3 = 2 then
19630: LD_VAR 0 3
19634: PUSH
19635: LD_INT 2
19637: EQUAL
19638: IFFALSE 19648
// sSpeed := true ;
19640: LD_ADDR_EXP 41
19644: PUSH
19645: LD_INT 1
19647: ST_TO_ADDR
// if p3 = 3 then
19648: LD_VAR 0 3
19652: PUSH
19653: LD_INT 3
19655: EQUAL
19656: IFFALSE 19666
// sEngine := true ;
19658: LD_ADDR_EXP 43
19662: PUSH
19663: LD_INT 1
19665: ST_TO_ADDR
// if p3 = 4 then
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 4
19673: EQUAL
19674: IFFALSE 19684
// sSpec := true ;
19676: LD_ADDR_EXP 40
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// if p3 = 5 then
19684: LD_VAR 0 3
19688: PUSH
19689: LD_INT 5
19691: EQUAL
19692: IFFALSE 19702
// sLevel := true ;
19694: LD_ADDR_EXP 44
19698: PUSH
19699: LD_INT 1
19701: ST_TO_ADDR
// if p3 = 6 then
19702: LD_VAR 0 3
19706: PUSH
19707: LD_INT 6
19709: EQUAL
19710: IFFALSE 19720
// sArmoury := true ;
19712: LD_ADDR_EXP 45
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// if p3 = 7 then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 7
19727: EQUAL
19728: IFFALSE 19738
// sRadar := true ;
19730: LD_ADDR_EXP 46
19734: PUSH
19735: LD_INT 1
19737: ST_TO_ADDR
// if p3 = 8 then
19738: LD_VAR 0 3
19742: PUSH
19743: LD_INT 8
19745: EQUAL
19746: IFFALSE 19756
// sBunker := true ;
19748: LD_ADDR_EXP 47
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if p3 = 9 then
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 9
19763: EQUAL
19764: IFFALSE 19774
// sHack := true ;
19766: LD_ADDR_EXP 48
19770: PUSH
19771: LD_INT 1
19773: ST_TO_ADDR
// if p3 = 10 then
19774: LD_VAR 0 3
19778: PUSH
19779: LD_INT 10
19781: EQUAL
19782: IFFALSE 19792
// sFire := true ;
19784: LD_ADDR_EXP 49
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// if p3 = 11 then
19792: LD_VAR 0 3
19796: PUSH
19797: LD_INT 11
19799: EQUAL
19800: IFFALSE 19810
// sRefresh := true ;
19802: LD_ADDR_EXP 50
19806: PUSH
19807: LD_INT 1
19809: ST_TO_ADDR
// if p3 = 12 then
19810: LD_VAR 0 3
19814: PUSH
19815: LD_INT 12
19817: EQUAL
19818: IFFALSE 19828
// sExp := true ;
19820: LD_ADDR_EXP 51
19824: PUSH
19825: LD_INT 1
19827: ST_TO_ADDR
// if p3 = 13 then
19828: LD_VAR 0 3
19832: PUSH
19833: LD_INT 13
19835: EQUAL
19836: IFFALSE 19846
// sDepot := true ;
19838: LD_ADDR_EXP 52
19842: PUSH
19843: LD_INT 1
19845: ST_TO_ADDR
// if p3 = 14 then
19846: LD_VAR 0 3
19850: PUSH
19851: LD_INT 14
19853: EQUAL
19854: IFFALSE 19864
// sFlag := true ;
19856: LD_ADDR_EXP 53
19860: PUSH
19861: LD_INT 1
19863: ST_TO_ADDR
// if p3 = 15 then
19864: LD_VAR 0 3
19868: PUSH
19869: LD_INT 15
19871: EQUAL
19872: IFFALSE 19882
// sKamikadze := true ;
19874: LD_ADDR_EXP 61
19878: PUSH
19879: LD_INT 1
19881: ST_TO_ADDR
// if p3 = 16 then
19882: LD_VAR 0 3
19886: PUSH
19887: LD_INT 16
19889: EQUAL
19890: IFFALSE 19900
// sTroll := true ;
19892: LD_ADDR_EXP 62
19896: PUSH
19897: LD_INT 1
19899: ST_TO_ADDR
// if p3 = 17 then
19900: LD_VAR 0 3
19904: PUSH
19905: LD_INT 17
19907: EQUAL
19908: IFFALSE 19918
// sSlow := true ;
19910: LD_ADDR_EXP 63
19914: PUSH
19915: LD_INT 1
19917: ST_TO_ADDR
// if p3 = 18 then
19918: LD_VAR 0 3
19922: PUSH
19923: LD_INT 18
19925: EQUAL
19926: IFFALSE 19936
// sLack := true ;
19928: LD_ADDR_EXP 64
19932: PUSH
19933: LD_INT 1
19935: ST_TO_ADDR
// if p3 = 19 then
19936: LD_VAR 0 3
19940: PUSH
19941: LD_INT 19
19943: EQUAL
19944: IFFALSE 19954
// sTank := true ;
19946: LD_ADDR_EXP 66
19950: PUSH
19951: LD_INT 1
19953: ST_TO_ADDR
// if p3 = 20 then
19954: LD_VAR 0 3
19958: PUSH
19959: LD_INT 20
19961: EQUAL
19962: IFFALSE 19972
// sRemote := true ;
19964: LD_ADDR_EXP 67
19968: PUSH
19969: LD_INT 1
19971: ST_TO_ADDR
// if p3 = 21 then
19972: LD_VAR 0 3
19976: PUSH
19977: LD_INT 21
19979: EQUAL
19980: IFFALSE 19990
// sPowell := true ;
19982: LD_ADDR_EXP 68
19986: PUSH
19987: LD_INT 1
19989: ST_TO_ADDR
// if p3 = 22 then
19990: LD_VAR 0 3
19994: PUSH
19995: LD_INT 22
19997: EQUAL
19998: IFFALSE 20008
// sTeleport := true ;
20000: LD_ADDR_EXP 71
20004: PUSH
20005: LD_INT 1
20007: ST_TO_ADDR
// if p3 = 23 then
20008: LD_VAR 0 3
20012: PUSH
20013: LD_INT 23
20015: EQUAL
20016: IFFALSE 20026
// sOilTower := true ;
20018: LD_ADDR_EXP 73
20022: PUSH
20023: LD_INT 1
20025: ST_TO_ADDR
// if p3 = 24 then
20026: LD_VAR 0 3
20030: PUSH
20031: LD_INT 24
20033: EQUAL
20034: IFFALSE 20044
// sShovel := true ;
20036: LD_ADDR_EXP 74
20040: PUSH
20041: LD_INT 1
20043: ST_TO_ADDR
// if p3 = 25 then
20044: LD_VAR 0 3
20048: PUSH
20049: LD_INT 25
20051: EQUAL
20052: IFFALSE 20062
// sSheik := true ;
20054: LD_ADDR_EXP 75
20058: PUSH
20059: LD_INT 1
20061: ST_TO_ADDR
// if p3 = 26 then
20062: LD_VAR 0 3
20066: PUSH
20067: LD_INT 26
20069: EQUAL
20070: IFFALSE 20080
// sEarthquake := true ;
20072: LD_ADDR_EXP 77
20076: PUSH
20077: LD_INT 1
20079: ST_TO_ADDR
// if p3 = 27 then
20080: LD_VAR 0 3
20084: PUSH
20085: LD_INT 27
20087: EQUAL
20088: IFFALSE 20098
// sAI := true ;
20090: LD_ADDR_EXP 78
20094: PUSH
20095: LD_INT 1
20097: ST_TO_ADDR
// if p3 = 28 then
20098: LD_VAR 0 3
20102: PUSH
20103: LD_INT 28
20105: EQUAL
20106: IFFALSE 20116
// sCargo := true ;
20108: LD_ADDR_EXP 81
20112: PUSH
20113: LD_INT 1
20115: ST_TO_ADDR
// if p3 = 29 then
20116: LD_VAR 0 3
20120: PUSH
20121: LD_INT 29
20123: EQUAL
20124: IFFALSE 20134
// sDLaser := true ;
20126: LD_ADDR_EXP 82
20130: PUSH
20131: LD_INT 1
20133: ST_TO_ADDR
// if p3 = 30 then
20134: LD_VAR 0 3
20138: PUSH
20139: LD_INT 30
20141: EQUAL
20142: IFFALSE 20152
// sExchange := true ;
20144: LD_ADDR_EXP 83
20148: PUSH
20149: LD_INT 1
20151: ST_TO_ADDR
// if p3 = 31 then
20152: LD_VAR 0 3
20156: PUSH
20157: LD_INT 31
20159: EQUAL
20160: IFFALSE 20170
// sFac := true ;
20162: LD_ADDR_EXP 84
20166: PUSH
20167: LD_INT 1
20169: ST_TO_ADDR
// if p3 = 32 then
20170: LD_VAR 0 3
20174: PUSH
20175: LD_INT 32
20177: EQUAL
20178: IFFALSE 20188
// sPower := true ;
20180: LD_ADDR_EXP 85
20184: PUSH
20185: LD_INT 1
20187: ST_TO_ADDR
// if p3 = 33 then
20188: LD_VAR 0 3
20192: PUSH
20193: LD_INT 33
20195: EQUAL
20196: IFFALSE 20206
// sRandom := true ;
20198: LD_ADDR_EXP 86
20202: PUSH
20203: LD_INT 1
20205: ST_TO_ADDR
// if p3 = 34 then
20206: LD_VAR 0 3
20210: PUSH
20211: LD_INT 34
20213: EQUAL
20214: IFFALSE 20224
// sShield := true ;
20216: LD_ADDR_EXP 87
20220: PUSH
20221: LD_INT 1
20223: ST_TO_ADDR
// if p3 = 35 then
20224: LD_VAR 0 3
20228: PUSH
20229: LD_INT 35
20231: EQUAL
20232: IFFALSE 20242
// sTime := true ;
20234: LD_ADDR_EXP 88
20238: PUSH
20239: LD_INT 1
20241: ST_TO_ADDR
// if p3 = 36 then
20242: LD_VAR 0 3
20246: PUSH
20247: LD_INT 36
20249: EQUAL
20250: IFFALSE 20260
// sTools := true ;
20252: LD_ADDR_EXP 89
20256: PUSH
20257: LD_INT 1
20259: ST_TO_ADDR
// if p3 = 101 then
20260: LD_VAR 0 3
20264: PUSH
20265: LD_INT 101
20267: EQUAL
20268: IFFALSE 20278
// sSold := true ;
20270: LD_ADDR_EXP 54
20274: PUSH
20275: LD_INT 1
20277: ST_TO_ADDR
// if p3 = 102 then
20278: LD_VAR 0 3
20282: PUSH
20283: LD_INT 102
20285: EQUAL
20286: IFFALSE 20296
// sDiff := true ;
20288: LD_ADDR_EXP 55
20292: PUSH
20293: LD_INT 1
20295: ST_TO_ADDR
// if p3 = 103 then
20296: LD_VAR 0 3
20300: PUSH
20301: LD_INT 103
20303: EQUAL
20304: IFFALSE 20314
// sFog := true ;
20306: LD_ADDR_EXP 58
20310: PUSH
20311: LD_INT 1
20313: ST_TO_ADDR
// if p3 = 104 then
20314: LD_VAR 0 3
20318: PUSH
20319: LD_INT 104
20321: EQUAL
20322: IFFALSE 20332
// sReset := true ;
20324: LD_ADDR_EXP 59
20328: PUSH
20329: LD_INT 1
20331: ST_TO_ADDR
// if p3 = 105 then
20332: LD_VAR 0 3
20336: PUSH
20337: LD_INT 105
20339: EQUAL
20340: IFFALSE 20350
// sSun := true ;
20342: LD_ADDR_EXP 60
20346: PUSH
20347: LD_INT 1
20349: ST_TO_ADDR
// if p3 = 106 then
20350: LD_VAR 0 3
20354: PUSH
20355: LD_INT 106
20357: EQUAL
20358: IFFALSE 20368
// sTiger := true ;
20360: LD_ADDR_EXP 56
20364: PUSH
20365: LD_INT 1
20367: ST_TO_ADDR
// if p3 = 107 then
20368: LD_VAR 0 3
20372: PUSH
20373: LD_INT 107
20375: EQUAL
20376: IFFALSE 20386
// sBomb := true ;
20378: LD_ADDR_EXP 57
20382: PUSH
20383: LD_INT 1
20385: ST_TO_ADDR
// if p3 = 108 then
20386: LD_VAR 0 3
20390: PUSH
20391: LD_INT 108
20393: EQUAL
20394: IFFALSE 20404
// sWound := true ;
20396: LD_ADDR_EXP 65
20400: PUSH
20401: LD_INT 1
20403: ST_TO_ADDR
// if p3 = 109 then
20404: LD_VAR 0 3
20408: PUSH
20409: LD_INT 109
20411: EQUAL
20412: IFFALSE 20422
// sBetray := true ;
20414: LD_ADDR_EXP 69
20418: PUSH
20419: LD_INT 1
20421: ST_TO_ADDR
// if p3 = 110 then
20422: LD_VAR 0 3
20426: PUSH
20427: LD_INT 110
20429: EQUAL
20430: IFFALSE 20440
// sContamin := true ;
20432: LD_ADDR_EXP 70
20436: PUSH
20437: LD_INT 1
20439: ST_TO_ADDR
// if p3 = 111 then
20440: LD_VAR 0 3
20444: PUSH
20445: LD_INT 111
20447: EQUAL
20448: IFFALSE 20458
// sOil := true ;
20450: LD_ADDR_EXP 72
20454: PUSH
20455: LD_INT 1
20457: ST_TO_ADDR
// if p3 = 112 then
20458: LD_VAR 0 3
20462: PUSH
20463: LD_INT 112
20465: EQUAL
20466: IFFALSE 20476
// sStu := true ;
20468: LD_ADDR_EXP 76
20472: PUSH
20473: LD_INT 1
20475: ST_TO_ADDR
// if p3 = 113 then
20476: LD_VAR 0 3
20480: PUSH
20481: LD_INT 113
20483: EQUAL
20484: IFFALSE 20494
// sBazooka := true ;
20486: LD_ADDR_EXP 79
20490: PUSH
20491: LD_INT 1
20493: ST_TO_ADDR
// if p3 = 114 then
20494: LD_VAR 0 3
20498: PUSH
20499: LD_INT 114
20501: EQUAL
20502: IFFALSE 20512
// sMortar := true ;
20504: LD_ADDR_EXP 80
20508: PUSH
20509: LD_INT 1
20511: ST_TO_ADDR
// if p3 = 115 then
20512: LD_VAR 0 3
20516: PUSH
20517: LD_INT 115
20519: EQUAL
20520: IFFALSE 20530
// sRanger := true ;
20522: LD_ADDR_EXP 90
20526: PUSH
20527: LD_INT 1
20529: ST_TO_ADDR
// if p3 = 116 then
20530: LD_VAR 0 3
20534: PUSH
20535: LD_INT 116
20537: EQUAL
20538: IFFALSE 20548
// sComputer := true ;
20540: LD_ADDR_EXP 91
20544: PUSH
20545: LD_INT 1
20547: ST_TO_ADDR
// if p3 = 117 then
20548: LD_VAR 0 3
20552: PUSH
20553: LD_INT 117
20555: EQUAL
20556: IFFALSE 20566
// s30 := true ;
20558: LD_ADDR_EXP 92
20562: PUSH
20563: LD_INT 1
20565: ST_TO_ADDR
// if p3 = 118 then
20566: LD_VAR 0 3
20570: PUSH
20571: LD_INT 118
20573: EQUAL
20574: IFFALSE 20584
// s60 := true ;
20576: LD_ADDR_EXP 93
20580: PUSH
20581: LD_INT 1
20583: ST_TO_ADDR
// end ; if p2 = stream_mode then
20584: LD_VAR 0 2
20588: PUSH
20589: LD_INT 101
20591: EQUAL
20592: IFFALSE 20720
// begin case p3 of 1 :
20594: LD_VAR 0 3
20598: PUSH
20599: LD_INT 1
20601: DOUBLE
20602: EQUAL
20603: IFTRUE 20607
20605: GO 20614
20607: POP
// hHackUnlimitedResources ; 2 :
20608: CALL 32818 0 0
20612: GO 20720
20614: LD_INT 2
20616: DOUBLE
20617: EQUAL
20618: IFTRUE 20622
20620: GO 20629
20622: POP
// hHackSetLevel10 ; 3 :
20623: CALL 32951 0 0
20627: GO 20720
20629: LD_INT 3
20631: DOUBLE
20632: EQUAL
20633: IFTRUE 20637
20635: GO 20644
20637: POP
// hHackSetLevel10YourUnits ; 4 :
20638: CALL 33036 0 0
20642: GO 20720
20644: LD_INT 4
20646: DOUBLE
20647: EQUAL
20648: IFTRUE 20652
20650: GO 20659
20652: POP
// hHackInvincible ; 5 :
20653: CALL 33484 0 0
20657: GO 20720
20659: LD_INT 5
20661: DOUBLE
20662: EQUAL
20663: IFTRUE 20667
20665: GO 20674
20667: POP
// hHackInvisible ; 6 :
20668: CALL 33595 0 0
20672: GO 20720
20674: LD_INT 6
20676: DOUBLE
20677: EQUAL
20678: IFTRUE 20682
20680: GO 20689
20682: POP
// hHackChangeYourSide ; 7 :
20683: CALL 33652 0 0
20687: GO 20720
20689: LD_INT 7
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20697
20695: GO 20704
20697: POP
// hHackChangeUnitSide ; 8 :
20698: CALL 33694 0 0
20702: GO 20720
20704: LD_INT 8
20706: DOUBLE
20707: EQUAL
20708: IFTRUE 20712
20710: GO 20719
20712: POP
// hHackFog ; end ;
20713: CALL 33795 0 0
20717: GO 20720
20719: POP
// end ; end ;
20720: LD_VAR 0 7
20724: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20725: GO 20727
20727: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20728: LD_STRING initStreamRollete();
20730: PPUSH
20731: CALL_OW 559
// InitStreamMode ;
20735: CALL 20747 0 0
// DefineStreamItems ( false ) ;
20739: LD_INT 0
20741: PPUSH
20742: CALL 21211 0 1
// end ;
20746: END
// function InitStreamMode ; begin
20747: LD_INT 0
20749: PPUSH
// streamModeActive := false ;
20750: LD_ADDR_EXP 37
20754: PUSH
20755: LD_INT 0
20757: ST_TO_ADDR
// normalCounter := 36 ;
20758: LD_ADDR_EXP 38
20762: PUSH
20763: LD_INT 36
20765: ST_TO_ADDR
// hardcoreCounter := 18 ;
20766: LD_ADDR_EXP 39
20770: PUSH
20771: LD_INT 18
20773: ST_TO_ADDR
// sRocket := false ;
20774: LD_ADDR_EXP 42
20778: PUSH
20779: LD_INT 0
20781: ST_TO_ADDR
// sSpeed := false ;
20782: LD_ADDR_EXP 41
20786: PUSH
20787: LD_INT 0
20789: ST_TO_ADDR
// sEngine := false ;
20790: LD_ADDR_EXP 43
20794: PUSH
20795: LD_INT 0
20797: ST_TO_ADDR
// sSpec := false ;
20798: LD_ADDR_EXP 40
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// sLevel := false ;
20806: LD_ADDR_EXP 44
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
// sArmoury := false ;
20814: LD_ADDR_EXP 45
20818: PUSH
20819: LD_INT 0
20821: ST_TO_ADDR
// sRadar := false ;
20822: LD_ADDR_EXP 46
20826: PUSH
20827: LD_INT 0
20829: ST_TO_ADDR
// sBunker := false ;
20830: LD_ADDR_EXP 47
20834: PUSH
20835: LD_INT 0
20837: ST_TO_ADDR
// sHack := false ;
20838: LD_ADDR_EXP 48
20842: PUSH
20843: LD_INT 0
20845: ST_TO_ADDR
// sFire := false ;
20846: LD_ADDR_EXP 49
20850: PUSH
20851: LD_INT 0
20853: ST_TO_ADDR
// sRefresh := false ;
20854: LD_ADDR_EXP 50
20858: PUSH
20859: LD_INT 0
20861: ST_TO_ADDR
// sExp := false ;
20862: LD_ADDR_EXP 51
20866: PUSH
20867: LD_INT 0
20869: ST_TO_ADDR
// sDepot := false ;
20870: LD_ADDR_EXP 52
20874: PUSH
20875: LD_INT 0
20877: ST_TO_ADDR
// sFlag := false ;
20878: LD_ADDR_EXP 53
20882: PUSH
20883: LD_INT 0
20885: ST_TO_ADDR
// sKamikadze := false ;
20886: LD_ADDR_EXP 61
20890: PUSH
20891: LD_INT 0
20893: ST_TO_ADDR
// sTroll := false ;
20894: LD_ADDR_EXP 62
20898: PUSH
20899: LD_INT 0
20901: ST_TO_ADDR
// sSlow := false ;
20902: LD_ADDR_EXP 63
20906: PUSH
20907: LD_INT 0
20909: ST_TO_ADDR
// sLack := false ;
20910: LD_ADDR_EXP 64
20914: PUSH
20915: LD_INT 0
20917: ST_TO_ADDR
// sTank := false ;
20918: LD_ADDR_EXP 66
20922: PUSH
20923: LD_INT 0
20925: ST_TO_ADDR
// sRemote := false ;
20926: LD_ADDR_EXP 67
20930: PUSH
20931: LD_INT 0
20933: ST_TO_ADDR
// sPowell := false ;
20934: LD_ADDR_EXP 68
20938: PUSH
20939: LD_INT 0
20941: ST_TO_ADDR
// sTeleport := false ;
20942: LD_ADDR_EXP 71
20946: PUSH
20947: LD_INT 0
20949: ST_TO_ADDR
// sOilTower := false ;
20950: LD_ADDR_EXP 73
20954: PUSH
20955: LD_INT 0
20957: ST_TO_ADDR
// sShovel := false ;
20958: LD_ADDR_EXP 74
20962: PUSH
20963: LD_INT 0
20965: ST_TO_ADDR
// sSheik := false ;
20966: LD_ADDR_EXP 75
20970: PUSH
20971: LD_INT 0
20973: ST_TO_ADDR
// sEarthquake := false ;
20974: LD_ADDR_EXP 77
20978: PUSH
20979: LD_INT 0
20981: ST_TO_ADDR
// sAI := false ;
20982: LD_ADDR_EXP 78
20986: PUSH
20987: LD_INT 0
20989: ST_TO_ADDR
// sCargo := false ;
20990: LD_ADDR_EXP 81
20994: PUSH
20995: LD_INT 0
20997: ST_TO_ADDR
// sDLaser := false ;
20998: LD_ADDR_EXP 82
21002: PUSH
21003: LD_INT 0
21005: ST_TO_ADDR
// sExchange := false ;
21006: LD_ADDR_EXP 83
21010: PUSH
21011: LD_INT 0
21013: ST_TO_ADDR
// sFac := false ;
21014: LD_ADDR_EXP 84
21018: PUSH
21019: LD_INT 0
21021: ST_TO_ADDR
// sPower := false ;
21022: LD_ADDR_EXP 85
21026: PUSH
21027: LD_INT 0
21029: ST_TO_ADDR
// sRandom := false ;
21030: LD_ADDR_EXP 86
21034: PUSH
21035: LD_INT 0
21037: ST_TO_ADDR
// sShield := false ;
21038: LD_ADDR_EXP 87
21042: PUSH
21043: LD_INT 0
21045: ST_TO_ADDR
// sTime := false ;
21046: LD_ADDR_EXP 88
21050: PUSH
21051: LD_INT 0
21053: ST_TO_ADDR
// sTools := false ;
21054: LD_ADDR_EXP 89
21058: PUSH
21059: LD_INT 0
21061: ST_TO_ADDR
// sSold := false ;
21062: LD_ADDR_EXP 54
21066: PUSH
21067: LD_INT 0
21069: ST_TO_ADDR
// sDiff := false ;
21070: LD_ADDR_EXP 55
21074: PUSH
21075: LD_INT 0
21077: ST_TO_ADDR
// sFog := false ;
21078: LD_ADDR_EXP 58
21082: PUSH
21083: LD_INT 0
21085: ST_TO_ADDR
// sReset := false ;
21086: LD_ADDR_EXP 59
21090: PUSH
21091: LD_INT 0
21093: ST_TO_ADDR
// sSun := false ;
21094: LD_ADDR_EXP 60
21098: PUSH
21099: LD_INT 0
21101: ST_TO_ADDR
// sTiger := false ;
21102: LD_ADDR_EXP 56
21106: PUSH
21107: LD_INT 0
21109: ST_TO_ADDR
// sBomb := false ;
21110: LD_ADDR_EXP 57
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
// sWound := false ;
21118: LD_ADDR_EXP 65
21122: PUSH
21123: LD_INT 0
21125: ST_TO_ADDR
// sBetray := false ;
21126: LD_ADDR_EXP 69
21130: PUSH
21131: LD_INT 0
21133: ST_TO_ADDR
// sContamin := false ;
21134: LD_ADDR_EXP 70
21138: PUSH
21139: LD_INT 0
21141: ST_TO_ADDR
// sOil := false ;
21142: LD_ADDR_EXP 72
21146: PUSH
21147: LD_INT 0
21149: ST_TO_ADDR
// sStu := false ;
21150: LD_ADDR_EXP 76
21154: PUSH
21155: LD_INT 0
21157: ST_TO_ADDR
// sBazooka := false ;
21158: LD_ADDR_EXP 79
21162: PUSH
21163: LD_INT 0
21165: ST_TO_ADDR
// sMortar := false ;
21166: LD_ADDR_EXP 80
21170: PUSH
21171: LD_INT 0
21173: ST_TO_ADDR
// sRanger := false ;
21174: LD_ADDR_EXP 90
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// sComputer := false ;
21182: LD_ADDR_EXP 91
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// s30 := false ;
21190: LD_ADDR_EXP 92
21194: PUSH
21195: LD_INT 0
21197: ST_TO_ADDR
// s60 := false ;
21198: LD_ADDR_EXP 93
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// end ;
21206: LD_VAR 0 1
21210: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21211: LD_INT 0
21213: PPUSH
21214: PPUSH
21215: PPUSH
21216: PPUSH
21217: PPUSH
21218: PPUSH
21219: PPUSH
// result := [ ] ;
21220: LD_ADDR_VAR 0 2
21224: PUSH
21225: EMPTY
21226: ST_TO_ADDR
// if campaign_id = 1 then
21227: LD_OWVAR 69
21231: PUSH
21232: LD_INT 1
21234: EQUAL
21235: IFFALSE 24401
// begin case mission_number of 1 :
21237: LD_OWVAR 70
21241: PUSH
21242: LD_INT 1
21244: DOUBLE
21245: EQUAL
21246: IFTRUE 21250
21248: GO 21326
21250: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21251: LD_ADDR_VAR 0 2
21255: PUSH
21256: LD_INT 2
21258: PUSH
21259: LD_INT 4
21261: PUSH
21262: LD_INT 11
21264: PUSH
21265: LD_INT 12
21267: PUSH
21268: LD_INT 15
21270: PUSH
21271: LD_INT 16
21273: PUSH
21274: LD_INT 22
21276: PUSH
21277: LD_INT 23
21279: PUSH
21280: LD_INT 26
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 101
21296: PUSH
21297: LD_INT 102
21299: PUSH
21300: LD_INT 106
21302: PUSH
21303: LD_INT 116
21305: PUSH
21306: LD_INT 117
21308: PUSH
21309: LD_INT 118
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: ST_TO_ADDR
21324: GO 24399
21326: LD_INT 2
21328: DOUBLE
21329: EQUAL
21330: IFTRUE 21334
21332: GO 21418
21334: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21335: LD_ADDR_VAR 0 2
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: LD_INT 4
21345: PUSH
21346: LD_INT 11
21348: PUSH
21349: LD_INT 12
21351: PUSH
21352: LD_INT 15
21354: PUSH
21355: LD_INT 16
21357: PUSH
21358: LD_INT 22
21360: PUSH
21361: LD_INT 23
21363: PUSH
21364: LD_INT 26
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 101
21380: PUSH
21381: LD_INT 102
21383: PUSH
21384: LD_INT 105
21386: PUSH
21387: LD_INT 106
21389: PUSH
21390: LD_INT 108
21392: PUSH
21393: LD_INT 116
21395: PUSH
21396: LD_INT 117
21398: PUSH
21399: LD_INT 118
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: ST_TO_ADDR
21416: GO 24399
21418: LD_INT 3
21420: DOUBLE
21421: EQUAL
21422: IFTRUE 21426
21424: GO 21514
21426: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21427: LD_ADDR_VAR 0 2
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: LD_INT 5
21440: PUSH
21441: LD_INT 11
21443: PUSH
21444: LD_INT 12
21446: PUSH
21447: LD_INT 15
21449: PUSH
21450: LD_INT 16
21452: PUSH
21453: LD_INT 22
21455: PUSH
21456: LD_INT 26
21458: PUSH
21459: LD_INT 36
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 101
21476: PUSH
21477: LD_INT 102
21479: PUSH
21480: LD_INT 105
21482: PUSH
21483: LD_INT 106
21485: PUSH
21486: LD_INT 108
21488: PUSH
21489: LD_INT 116
21491: PUSH
21492: LD_INT 117
21494: PUSH
21495: LD_INT 118
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: ST_TO_ADDR
21512: GO 24399
21514: LD_INT 4
21516: DOUBLE
21517: EQUAL
21518: IFTRUE 21522
21520: GO 21618
21522: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21523: LD_ADDR_VAR 0 2
21527: PUSH
21528: LD_INT 2
21530: PUSH
21531: LD_INT 4
21533: PUSH
21534: LD_INT 5
21536: PUSH
21537: LD_INT 8
21539: PUSH
21540: LD_INT 11
21542: PUSH
21543: LD_INT 12
21545: PUSH
21546: LD_INT 15
21548: PUSH
21549: LD_INT 16
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_INT 23
21557: PUSH
21558: LD_INT 26
21560: PUSH
21561: LD_INT 36
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 101
21580: PUSH
21581: LD_INT 102
21583: PUSH
21584: LD_INT 105
21586: PUSH
21587: LD_INT 106
21589: PUSH
21590: LD_INT 108
21592: PUSH
21593: LD_INT 116
21595: PUSH
21596: LD_INT 117
21598: PUSH
21599: LD_INT 118
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: ST_TO_ADDR
21616: GO 24399
21618: LD_INT 5
21620: DOUBLE
21621: EQUAL
21622: IFTRUE 21626
21624: GO 21738
21626: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21627: LD_ADDR_VAR 0 2
21631: PUSH
21632: LD_INT 2
21634: PUSH
21635: LD_INT 4
21637: PUSH
21638: LD_INT 5
21640: PUSH
21641: LD_INT 6
21643: PUSH
21644: LD_INT 8
21646: PUSH
21647: LD_INT 11
21649: PUSH
21650: LD_INT 12
21652: PUSH
21653: LD_INT 15
21655: PUSH
21656: LD_INT 16
21658: PUSH
21659: LD_INT 22
21661: PUSH
21662: LD_INT 23
21664: PUSH
21665: LD_INT 25
21667: PUSH
21668: LD_INT 26
21670: PUSH
21671: LD_INT 36
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 101
21692: PUSH
21693: LD_INT 102
21695: PUSH
21696: LD_INT 105
21698: PUSH
21699: LD_INT 106
21701: PUSH
21702: LD_INT 108
21704: PUSH
21705: LD_INT 109
21707: PUSH
21708: LD_INT 112
21710: PUSH
21711: LD_INT 116
21713: PUSH
21714: LD_INT 117
21716: PUSH
21717: LD_INT 118
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: ST_TO_ADDR
21736: GO 24399
21738: LD_INT 6
21740: DOUBLE
21741: EQUAL
21742: IFTRUE 21746
21744: GO 21878
21746: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21747: LD_ADDR_VAR 0 2
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: LD_INT 4
21757: PUSH
21758: LD_INT 5
21760: PUSH
21761: LD_INT 6
21763: PUSH
21764: LD_INT 8
21766: PUSH
21767: LD_INT 11
21769: PUSH
21770: LD_INT 12
21772: PUSH
21773: LD_INT 15
21775: PUSH
21776: LD_INT 16
21778: PUSH
21779: LD_INT 20
21781: PUSH
21782: LD_INT 21
21784: PUSH
21785: LD_INT 22
21787: PUSH
21788: LD_INT 23
21790: PUSH
21791: LD_INT 25
21793: PUSH
21794: LD_INT 26
21796: PUSH
21797: LD_INT 30
21799: PUSH
21800: LD_INT 31
21802: PUSH
21803: LD_INT 32
21805: PUSH
21806: LD_INT 36
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 101
21832: PUSH
21833: LD_INT 102
21835: PUSH
21836: LD_INT 105
21838: PUSH
21839: LD_INT 106
21841: PUSH
21842: LD_INT 108
21844: PUSH
21845: LD_INT 109
21847: PUSH
21848: LD_INT 112
21850: PUSH
21851: LD_INT 116
21853: PUSH
21854: LD_INT 117
21856: PUSH
21857: LD_INT 118
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: ST_TO_ADDR
21876: GO 24399
21878: LD_INT 7
21880: DOUBLE
21881: EQUAL
21882: IFTRUE 21886
21884: GO 21998
21886: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21887: LD_ADDR_VAR 0 2
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: LD_INT 4
21897: PUSH
21898: LD_INT 5
21900: PUSH
21901: LD_INT 7
21903: PUSH
21904: LD_INT 11
21906: PUSH
21907: LD_INT 12
21909: PUSH
21910: LD_INT 15
21912: PUSH
21913: LD_INT 16
21915: PUSH
21916: LD_INT 20
21918: PUSH
21919: LD_INT 21
21921: PUSH
21922: LD_INT 22
21924: PUSH
21925: LD_INT 23
21927: PUSH
21928: LD_INT 25
21930: PUSH
21931: LD_INT 26
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 101
21952: PUSH
21953: LD_INT 102
21955: PUSH
21956: LD_INT 103
21958: PUSH
21959: LD_INT 105
21961: PUSH
21962: LD_INT 106
21964: PUSH
21965: LD_INT 108
21967: PUSH
21968: LD_INT 112
21970: PUSH
21971: LD_INT 116
21973: PUSH
21974: LD_INT 117
21976: PUSH
21977: LD_INT 118
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: ST_TO_ADDR
21996: GO 24399
21998: LD_INT 8
22000: DOUBLE
22001: EQUAL
22002: IFTRUE 22006
22004: GO 22146
22006: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22007: LD_ADDR_VAR 0 2
22011: PUSH
22012: LD_INT 2
22014: PUSH
22015: LD_INT 4
22017: PUSH
22018: LD_INT 5
22020: PUSH
22021: LD_INT 6
22023: PUSH
22024: LD_INT 7
22026: PUSH
22027: LD_INT 8
22029: PUSH
22030: LD_INT 11
22032: PUSH
22033: LD_INT 12
22035: PUSH
22036: LD_INT 15
22038: PUSH
22039: LD_INT 16
22041: PUSH
22042: LD_INT 20
22044: PUSH
22045: LD_INT 21
22047: PUSH
22048: LD_INT 22
22050: PUSH
22051: LD_INT 23
22053: PUSH
22054: LD_INT 25
22056: PUSH
22057: LD_INT 26
22059: PUSH
22060: LD_INT 30
22062: PUSH
22063: LD_INT 31
22065: PUSH
22066: LD_INT 32
22068: PUSH
22069: LD_INT 36
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 101
22096: PUSH
22097: LD_INT 102
22099: PUSH
22100: LD_INT 103
22102: PUSH
22103: LD_INT 105
22105: PUSH
22106: LD_INT 106
22108: PUSH
22109: LD_INT 108
22111: PUSH
22112: LD_INT 109
22114: PUSH
22115: LD_INT 112
22117: PUSH
22118: LD_INT 116
22120: PUSH
22121: LD_INT 117
22123: PUSH
22124: LD_INT 118
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: ST_TO_ADDR
22144: GO 24399
22146: LD_INT 9
22148: DOUBLE
22149: EQUAL
22150: IFTRUE 22154
22152: GO 22302
22154: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22155: LD_ADDR_VAR 0 2
22159: PUSH
22160: LD_INT 2
22162: PUSH
22163: LD_INT 4
22165: PUSH
22166: LD_INT 5
22168: PUSH
22169: LD_INT 6
22171: PUSH
22172: LD_INT 7
22174: PUSH
22175: LD_INT 8
22177: PUSH
22178: LD_INT 11
22180: PUSH
22181: LD_INT 12
22183: PUSH
22184: LD_INT 15
22186: PUSH
22187: LD_INT 16
22189: PUSH
22190: LD_INT 20
22192: PUSH
22193: LD_INT 21
22195: PUSH
22196: LD_INT 22
22198: PUSH
22199: LD_INT 23
22201: PUSH
22202: LD_INT 25
22204: PUSH
22205: LD_INT 26
22207: PUSH
22208: LD_INT 28
22210: PUSH
22211: LD_INT 30
22213: PUSH
22214: LD_INT 31
22216: PUSH
22217: LD_INT 32
22219: PUSH
22220: LD_INT 36
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 101
22248: PUSH
22249: LD_INT 102
22251: PUSH
22252: LD_INT 103
22254: PUSH
22255: LD_INT 105
22257: PUSH
22258: LD_INT 106
22260: PUSH
22261: LD_INT 108
22263: PUSH
22264: LD_INT 109
22266: PUSH
22267: LD_INT 112
22269: PUSH
22270: LD_INT 114
22272: PUSH
22273: LD_INT 116
22275: PUSH
22276: LD_INT 117
22278: PUSH
22279: LD_INT 118
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: ST_TO_ADDR
22300: GO 24399
22302: LD_INT 10
22304: DOUBLE
22305: EQUAL
22306: IFTRUE 22310
22308: GO 22506
22310: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22311: LD_ADDR_VAR 0 2
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 4
22321: PUSH
22322: LD_INT 5
22324: PUSH
22325: LD_INT 6
22327: PUSH
22328: LD_INT 7
22330: PUSH
22331: LD_INT 8
22333: PUSH
22334: LD_INT 9
22336: PUSH
22337: LD_INT 10
22339: PUSH
22340: LD_INT 11
22342: PUSH
22343: LD_INT 12
22345: PUSH
22346: LD_INT 13
22348: PUSH
22349: LD_INT 14
22351: PUSH
22352: LD_INT 15
22354: PUSH
22355: LD_INT 16
22357: PUSH
22358: LD_INT 17
22360: PUSH
22361: LD_INT 18
22363: PUSH
22364: LD_INT 19
22366: PUSH
22367: LD_INT 20
22369: PUSH
22370: LD_INT 21
22372: PUSH
22373: LD_INT 22
22375: PUSH
22376: LD_INT 23
22378: PUSH
22379: LD_INT 24
22381: PUSH
22382: LD_INT 25
22384: PUSH
22385: LD_INT 26
22387: PUSH
22388: LD_INT 28
22390: PUSH
22391: LD_INT 30
22393: PUSH
22394: LD_INT 31
22396: PUSH
22397: LD_INT 32
22399: PUSH
22400: LD_INT 36
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 101
22436: PUSH
22437: LD_INT 102
22439: PUSH
22440: LD_INT 103
22442: PUSH
22443: LD_INT 104
22445: PUSH
22446: LD_INT 105
22448: PUSH
22449: LD_INT 106
22451: PUSH
22452: LD_INT 107
22454: PUSH
22455: LD_INT 108
22457: PUSH
22458: LD_INT 109
22460: PUSH
22461: LD_INT 110
22463: PUSH
22464: LD_INT 111
22466: PUSH
22467: LD_INT 112
22469: PUSH
22470: LD_INT 114
22472: PUSH
22473: LD_INT 116
22475: PUSH
22476: LD_INT 117
22478: PUSH
22479: LD_INT 118
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: ST_TO_ADDR
22504: GO 24399
22506: LD_INT 11
22508: DOUBLE
22509: EQUAL
22510: IFTRUE 22514
22512: GO 22718
22514: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22515: LD_ADDR_VAR 0 2
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: LD_INT 3
22525: PUSH
22526: LD_INT 4
22528: PUSH
22529: LD_INT 5
22531: PUSH
22532: LD_INT 6
22534: PUSH
22535: LD_INT 7
22537: PUSH
22538: LD_INT 8
22540: PUSH
22541: LD_INT 9
22543: PUSH
22544: LD_INT 10
22546: PUSH
22547: LD_INT 11
22549: PUSH
22550: LD_INT 12
22552: PUSH
22553: LD_INT 13
22555: PUSH
22556: LD_INT 14
22558: PUSH
22559: LD_INT 15
22561: PUSH
22562: LD_INT 16
22564: PUSH
22565: LD_INT 17
22567: PUSH
22568: LD_INT 18
22570: PUSH
22571: LD_INT 19
22573: PUSH
22574: LD_INT 20
22576: PUSH
22577: LD_INT 21
22579: PUSH
22580: LD_INT 22
22582: PUSH
22583: LD_INT 23
22585: PUSH
22586: LD_INT 24
22588: PUSH
22589: LD_INT 25
22591: PUSH
22592: LD_INT 26
22594: PUSH
22595: LD_INT 28
22597: PUSH
22598: LD_INT 30
22600: PUSH
22601: LD_INT 31
22603: PUSH
22604: LD_INT 32
22606: PUSH
22607: LD_INT 34
22609: PUSH
22610: LD_INT 36
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 101
22648: PUSH
22649: LD_INT 102
22651: PUSH
22652: LD_INT 103
22654: PUSH
22655: LD_INT 104
22657: PUSH
22658: LD_INT 105
22660: PUSH
22661: LD_INT 106
22663: PUSH
22664: LD_INT 107
22666: PUSH
22667: LD_INT 108
22669: PUSH
22670: LD_INT 109
22672: PUSH
22673: LD_INT 110
22675: PUSH
22676: LD_INT 111
22678: PUSH
22679: LD_INT 112
22681: PUSH
22682: LD_INT 114
22684: PUSH
22685: LD_INT 116
22687: PUSH
22688: LD_INT 117
22690: PUSH
22691: LD_INT 118
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: ST_TO_ADDR
22716: GO 24399
22718: LD_INT 12
22720: DOUBLE
22721: EQUAL
22722: IFTRUE 22726
22724: GO 22946
22726: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22727: LD_ADDR_VAR 0 2
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: LD_INT 4
22743: PUSH
22744: LD_INT 5
22746: PUSH
22747: LD_INT 6
22749: PUSH
22750: LD_INT 7
22752: PUSH
22753: LD_INT 8
22755: PUSH
22756: LD_INT 9
22758: PUSH
22759: LD_INT 10
22761: PUSH
22762: LD_INT 11
22764: PUSH
22765: LD_INT 12
22767: PUSH
22768: LD_INT 13
22770: PUSH
22771: LD_INT 14
22773: PUSH
22774: LD_INT 15
22776: PUSH
22777: LD_INT 16
22779: PUSH
22780: LD_INT 17
22782: PUSH
22783: LD_INT 18
22785: PUSH
22786: LD_INT 19
22788: PUSH
22789: LD_INT 20
22791: PUSH
22792: LD_INT 21
22794: PUSH
22795: LD_INT 22
22797: PUSH
22798: LD_INT 23
22800: PUSH
22801: LD_INT 24
22803: PUSH
22804: LD_INT 25
22806: PUSH
22807: LD_INT 26
22809: PUSH
22810: LD_INT 27
22812: PUSH
22813: LD_INT 28
22815: PUSH
22816: LD_INT 30
22818: PUSH
22819: LD_INT 31
22821: PUSH
22822: LD_INT 32
22824: PUSH
22825: LD_INT 33
22827: PUSH
22828: LD_INT 34
22830: PUSH
22831: LD_INT 36
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 101
22872: PUSH
22873: LD_INT 102
22875: PUSH
22876: LD_INT 103
22878: PUSH
22879: LD_INT 104
22881: PUSH
22882: LD_INT 105
22884: PUSH
22885: LD_INT 106
22887: PUSH
22888: LD_INT 107
22890: PUSH
22891: LD_INT 108
22893: PUSH
22894: LD_INT 109
22896: PUSH
22897: LD_INT 110
22899: PUSH
22900: LD_INT 111
22902: PUSH
22903: LD_INT 112
22905: PUSH
22906: LD_INT 113
22908: PUSH
22909: LD_INT 114
22911: PUSH
22912: LD_INT 116
22914: PUSH
22915: LD_INT 117
22917: PUSH
22918: LD_INT 118
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: ST_TO_ADDR
22944: GO 24399
22946: LD_INT 13
22948: DOUBLE
22949: EQUAL
22950: IFTRUE 22954
22952: GO 23162
22954: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22955: LD_ADDR_VAR 0 2
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: LD_INT 2
22965: PUSH
22966: LD_INT 3
22968: PUSH
22969: LD_INT 4
22971: PUSH
22972: LD_INT 5
22974: PUSH
22975: LD_INT 8
22977: PUSH
22978: LD_INT 9
22980: PUSH
22981: LD_INT 10
22983: PUSH
22984: LD_INT 11
22986: PUSH
22987: LD_INT 12
22989: PUSH
22990: LD_INT 14
22992: PUSH
22993: LD_INT 15
22995: PUSH
22996: LD_INT 16
22998: PUSH
22999: LD_INT 17
23001: PUSH
23002: LD_INT 18
23004: PUSH
23005: LD_INT 19
23007: PUSH
23008: LD_INT 20
23010: PUSH
23011: LD_INT 21
23013: PUSH
23014: LD_INT 22
23016: PUSH
23017: LD_INT 23
23019: PUSH
23020: LD_INT 24
23022: PUSH
23023: LD_INT 25
23025: PUSH
23026: LD_INT 26
23028: PUSH
23029: LD_INT 27
23031: PUSH
23032: LD_INT 28
23034: PUSH
23035: LD_INT 30
23037: PUSH
23038: LD_INT 31
23040: PUSH
23041: LD_INT 32
23043: PUSH
23044: LD_INT 33
23046: PUSH
23047: LD_INT 34
23049: PUSH
23050: LD_INT 36
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 101
23088: PUSH
23089: LD_INT 102
23091: PUSH
23092: LD_INT 103
23094: PUSH
23095: LD_INT 104
23097: PUSH
23098: LD_INT 105
23100: PUSH
23101: LD_INT 106
23103: PUSH
23104: LD_INT 107
23106: PUSH
23107: LD_INT 108
23109: PUSH
23110: LD_INT 109
23112: PUSH
23113: LD_INT 110
23115: PUSH
23116: LD_INT 111
23118: PUSH
23119: LD_INT 112
23121: PUSH
23122: LD_INT 113
23124: PUSH
23125: LD_INT 114
23127: PUSH
23128: LD_INT 116
23130: PUSH
23131: LD_INT 117
23133: PUSH
23134: LD_INT 118
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: ST_TO_ADDR
23160: GO 24399
23162: LD_INT 14
23164: DOUBLE
23165: EQUAL
23166: IFTRUE 23170
23168: GO 23394
23170: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23171: LD_ADDR_VAR 0 2
23175: PUSH
23176: LD_INT 1
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: LD_INT 4
23187: PUSH
23188: LD_INT 5
23190: PUSH
23191: LD_INT 6
23193: PUSH
23194: LD_INT 7
23196: PUSH
23197: LD_INT 8
23199: PUSH
23200: LD_INT 9
23202: PUSH
23203: LD_INT 10
23205: PUSH
23206: LD_INT 11
23208: PUSH
23209: LD_INT 12
23211: PUSH
23212: LD_INT 13
23214: PUSH
23215: LD_INT 14
23217: PUSH
23218: LD_INT 15
23220: PUSH
23221: LD_INT 16
23223: PUSH
23224: LD_INT 17
23226: PUSH
23227: LD_INT 18
23229: PUSH
23230: LD_INT 19
23232: PUSH
23233: LD_INT 20
23235: PUSH
23236: LD_INT 21
23238: PUSH
23239: LD_INT 22
23241: PUSH
23242: LD_INT 23
23244: PUSH
23245: LD_INT 24
23247: PUSH
23248: LD_INT 25
23250: PUSH
23251: LD_INT 26
23253: PUSH
23254: LD_INT 27
23256: PUSH
23257: LD_INT 28
23259: PUSH
23260: LD_INT 29
23262: PUSH
23263: LD_INT 30
23265: PUSH
23266: LD_INT 31
23268: PUSH
23269: LD_INT 32
23271: PUSH
23272: LD_INT 33
23274: PUSH
23275: LD_INT 34
23277: PUSH
23278: LD_INT 36
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 101
23320: PUSH
23321: LD_INT 102
23323: PUSH
23324: LD_INT 103
23326: PUSH
23327: LD_INT 104
23329: PUSH
23330: LD_INT 105
23332: PUSH
23333: LD_INT 106
23335: PUSH
23336: LD_INT 107
23338: PUSH
23339: LD_INT 108
23341: PUSH
23342: LD_INT 109
23344: PUSH
23345: LD_INT 110
23347: PUSH
23348: LD_INT 111
23350: PUSH
23351: LD_INT 112
23353: PUSH
23354: LD_INT 113
23356: PUSH
23357: LD_INT 114
23359: PUSH
23360: LD_INT 116
23362: PUSH
23363: LD_INT 117
23365: PUSH
23366: LD_INT 118
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: ST_TO_ADDR
23392: GO 24399
23394: LD_INT 15
23396: DOUBLE
23397: EQUAL
23398: IFTRUE 23402
23400: GO 23626
23402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23403: LD_ADDR_VAR 0 2
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: LD_INT 2
23413: PUSH
23414: LD_INT 3
23416: PUSH
23417: LD_INT 4
23419: PUSH
23420: LD_INT 5
23422: PUSH
23423: LD_INT 6
23425: PUSH
23426: LD_INT 7
23428: PUSH
23429: LD_INT 8
23431: PUSH
23432: LD_INT 9
23434: PUSH
23435: LD_INT 10
23437: PUSH
23438: LD_INT 11
23440: PUSH
23441: LD_INT 12
23443: PUSH
23444: LD_INT 13
23446: PUSH
23447: LD_INT 14
23449: PUSH
23450: LD_INT 15
23452: PUSH
23453: LD_INT 16
23455: PUSH
23456: LD_INT 17
23458: PUSH
23459: LD_INT 18
23461: PUSH
23462: LD_INT 19
23464: PUSH
23465: LD_INT 20
23467: PUSH
23468: LD_INT 21
23470: PUSH
23471: LD_INT 22
23473: PUSH
23474: LD_INT 23
23476: PUSH
23477: LD_INT 24
23479: PUSH
23480: LD_INT 25
23482: PUSH
23483: LD_INT 26
23485: PUSH
23486: LD_INT 27
23488: PUSH
23489: LD_INT 28
23491: PUSH
23492: LD_INT 29
23494: PUSH
23495: LD_INT 30
23497: PUSH
23498: LD_INT 31
23500: PUSH
23501: LD_INT 32
23503: PUSH
23504: LD_INT 33
23506: PUSH
23507: LD_INT 34
23509: PUSH
23510: LD_INT 36
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 101
23552: PUSH
23553: LD_INT 102
23555: PUSH
23556: LD_INT 103
23558: PUSH
23559: LD_INT 104
23561: PUSH
23562: LD_INT 105
23564: PUSH
23565: LD_INT 106
23567: PUSH
23568: LD_INT 107
23570: PUSH
23571: LD_INT 108
23573: PUSH
23574: LD_INT 109
23576: PUSH
23577: LD_INT 110
23579: PUSH
23580: LD_INT 111
23582: PUSH
23583: LD_INT 112
23585: PUSH
23586: LD_INT 113
23588: PUSH
23589: LD_INT 114
23591: PUSH
23592: LD_INT 116
23594: PUSH
23595: LD_INT 117
23597: PUSH
23598: LD_INT 118
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: ST_TO_ADDR
23624: GO 24399
23626: LD_INT 16
23628: DOUBLE
23629: EQUAL
23630: IFTRUE 23634
23632: GO 23770
23634: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23635: LD_ADDR_VAR 0 2
23639: PUSH
23640: LD_INT 2
23642: PUSH
23643: LD_INT 4
23645: PUSH
23646: LD_INT 5
23648: PUSH
23649: LD_INT 7
23651: PUSH
23652: LD_INT 11
23654: PUSH
23655: LD_INT 12
23657: PUSH
23658: LD_INT 15
23660: PUSH
23661: LD_INT 16
23663: PUSH
23664: LD_INT 20
23666: PUSH
23667: LD_INT 21
23669: PUSH
23670: LD_INT 22
23672: PUSH
23673: LD_INT 23
23675: PUSH
23676: LD_INT 25
23678: PUSH
23679: LD_INT 26
23681: PUSH
23682: LD_INT 30
23684: PUSH
23685: LD_INT 31
23687: PUSH
23688: LD_INT 32
23690: PUSH
23691: LD_INT 33
23693: PUSH
23694: LD_INT 34
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 101
23720: PUSH
23721: LD_INT 102
23723: PUSH
23724: LD_INT 103
23726: PUSH
23727: LD_INT 106
23729: PUSH
23730: LD_INT 108
23732: PUSH
23733: LD_INT 112
23735: PUSH
23736: LD_INT 113
23738: PUSH
23739: LD_INT 114
23741: PUSH
23742: LD_INT 116
23744: PUSH
23745: LD_INT 117
23747: PUSH
23748: LD_INT 118
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: ST_TO_ADDR
23768: GO 24399
23770: LD_INT 17
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 24002
23778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23779: LD_ADDR_VAR 0 2
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: LD_INT 2
23789: PUSH
23790: LD_INT 3
23792: PUSH
23793: LD_INT 4
23795: PUSH
23796: LD_INT 5
23798: PUSH
23799: LD_INT 6
23801: PUSH
23802: LD_INT 7
23804: PUSH
23805: LD_INT 8
23807: PUSH
23808: LD_INT 9
23810: PUSH
23811: LD_INT 10
23813: PUSH
23814: LD_INT 11
23816: PUSH
23817: LD_INT 12
23819: PUSH
23820: LD_INT 13
23822: PUSH
23823: LD_INT 14
23825: PUSH
23826: LD_INT 15
23828: PUSH
23829: LD_INT 16
23831: PUSH
23832: LD_INT 17
23834: PUSH
23835: LD_INT 18
23837: PUSH
23838: LD_INT 19
23840: PUSH
23841: LD_INT 20
23843: PUSH
23844: LD_INT 21
23846: PUSH
23847: LD_INT 22
23849: PUSH
23850: LD_INT 23
23852: PUSH
23853: LD_INT 24
23855: PUSH
23856: LD_INT 25
23858: PUSH
23859: LD_INT 26
23861: PUSH
23862: LD_INT 27
23864: PUSH
23865: LD_INT 28
23867: PUSH
23868: LD_INT 29
23870: PUSH
23871: LD_INT 30
23873: PUSH
23874: LD_INT 31
23876: PUSH
23877: LD_INT 32
23879: PUSH
23880: LD_INT 33
23882: PUSH
23883: LD_INT 34
23885: PUSH
23886: LD_INT 36
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 101
23928: PUSH
23929: LD_INT 102
23931: PUSH
23932: LD_INT 103
23934: PUSH
23935: LD_INT 104
23937: PUSH
23938: LD_INT 105
23940: PUSH
23941: LD_INT 106
23943: PUSH
23944: LD_INT 107
23946: PUSH
23947: LD_INT 108
23949: PUSH
23950: LD_INT 109
23952: PUSH
23953: LD_INT 110
23955: PUSH
23956: LD_INT 111
23958: PUSH
23959: LD_INT 112
23961: PUSH
23962: LD_INT 113
23964: PUSH
23965: LD_INT 114
23967: PUSH
23968: LD_INT 116
23970: PUSH
23971: LD_INT 117
23973: PUSH
23974: LD_INT 118
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: ST_TO_ADDR
24000: GO 24399
24002: LD_INT 18
24004: DOUBLE
24005: EQUAL
24006: IFTRUE 24010
24008: GO 24158
24010: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24011: LD_ADDR_VAR 0 2
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: LD_INT 4
24021: PUSH
24022: LD_INT 5
24024: PUSH
24025: LD_INT 7
24027: PUSH
24028: LD_INT 11
24030: PUSH
24031: LD_INT 12
24033: PUSH
24034: LD_INT 15
24036: PUSH
24037: LD_INT 16
24039: PUSH
24040: LD_INT 20
24042: PUSH
24043: LD_INT 21
24045: PUSH
24046: LD_INT 22
24048: PUSH
24049: LD_INT 23
24051: PUSH
24052: LD_INT 25
24054: PUSH
24055: LD_INT 26
24057: PUSH
24058: LD_INT 30
24060: PUSH
24061: LD_INT 31
24063: PUSH
24064: LD_INT 32
24066: PUSH
24067: LD_INT 33
24069: PUSH
24070: LD_INT 34
24072: PUSH
24073: LD_INT 35
24075: PUSH
24076: LD_INT 36
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 101
24104: PUSH
24105: LD_INT 102
24107: PUSH
24108: LD_INT 103
24110: PUSH
24111: LD_INT 106
24113: PUSH
24114: LD_INT 108
24116: PUSH
24117: LD_INT 112
24119: PUSH
24120: LD_INT 113
24122: PUSH
24123: LD_INT 114
24125: PUSH
24126: LD_INT 115
24128: PUSH
24129: LD_INT 116
24131: PUSH
24132: LD_INT 117
24134: PUSH
24135: LD_INT 118
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: ST_TO_ADDR
24156: GO 24399
24158: LD_INT 19
24160: DOUBLE
24161: EQUAL
24162: IFTRUE 24166
24164: GO 24398
24166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24167: LD_ADDR_VAR 0 2
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 3
24180: PUSH
24181: LD_INT 4
24183: PUSH
24184: LD_INT 5
24186: PUSH
24187: LD_INT 6
24189: PUSH
24190: LD_INT 7
24192: PUSH
24193: LD_INT 8
24195: PUSH
24196: LD_INT 9
24198: PUSH
24199: LD_INT 10
24201: PUSH
24202: LD_INT 11
24204: PUSH
24205: LD_INT 12
24207: PUSH
24208: LD_INT 13
24210: PUSH
24211: LD_INT 14
24213: PUSH
24214: LD_INT 15
24216: PUSH
24217: LD_INT 16
24219: PUSH
24220: LD_INT 17
24222: PUSH
24223: LD_INT 18
24225: PUSH
24226: LD_INT 19
24228: PUSH
24229: LD_INT 20
24231: PUSH
24232: LD_INT 21
24234: PUSH
24235: LD_INT 22
24237: PUSH
24238: LD_INT 23
24240: PUSH
24241: LD_INT 24
24243: PUSH
24244: LD_INT 25
24246: PUSH
24247: LD_INT 26
24249: PUSH
24250: LD_INT 27
24252: PUSH
24253: LD_INT 28
24255: PUSH
24256: LD_INT 29
24258: PUSH
24259: LD_INT 30
24261: PUSH
24262: LD_INT 31
24264: PUSH
24265: LD_INT 32
24267: PUSH
24268: LD_INT 33
24270: PUSH
24271: LD_INT 34
24273: PUSH
24274: LD_INT 35
24276: PUSH
24277: LD_INT 36
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 101
24320: PUSH
24321: LD_INT 102
24323: PUSH
24324: LD_INT 103
24326: PUSH
24327: LD_INT 104
24329: PUSH
24330: LD_INT 105
24332: PUSH
24333: LD_INT 106
24335: PUSH
24336: LD_INT 107
24338: PUSH
24339: LD_INT 108
24341: PUSH
24342: LD_INT 109
24344: PUSH
24345: LD_INT 110
24347: PUSH
24348: LD_INT 111
24350: PUSH
24351: LD_INT 112
24353: PUSH
24354: LD_INT 113
24356: PUSH
24357: LD_INT 114
24359: PUSH
24360: LD_INT 115
24362: PUSH
24363: LD_INT 116
24365: PUSH
24366: LD_INT 117
24368: PUSH
24369: LD_INT 118
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: ST_TO_ADDR
24396: GO 24399
24398: POP
// end else
24399: GO 24630
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24401: LD_ADDR_VAR 0 2
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: LD_INT 2
24411: PUSH
24412: LD_INT 3
24414: PUSH
24415: LD_INT 4
24417: PUSH
24418: LD_INT 5
24420: PUSH
24421: LD_INT 6
24423: PUSH
24424: LD_INT 7
24426: PUSH
24427: LD_INT 8
24429: PUSH
24430: LD_INT 9
24432: PUSH
24433: LD_INT 10
24435: PUSH
24436: LD_INT 11
24438: PUSH
24439: LD_INT 12
24441: PUSH
24442: LD_INT 13
24444: PUSH
24445: LD_INT 14
24447: PUSH
24448: LD_INT 15
24450: PUSH
24451: LD_INT 16
24453: PUSH
24454: LD_INT 17
24456: PUSH
24457: LD_INT 18
24459: PUSH
24460: LD_INT 19
24462: PUSH
24463: LD_INT 20
24465: PUSH
24466: LD_INT 21
24468: PUSH
24469: LD_INT 22
24471: PUSH
24472: LD_INT 23
24474: PUSH
24475: LD_INT 24
24477: PUSH
24478: LD_INT 25
24480: PUSH
24481: LD_INT 26
24483: PUSH
24484: LD_INT 27
24486: PUSH
24487: LD_INT 28
24489: PUSH
24490: LD_INT 29
24492: PUSH
24493: LD_INT 30
24495: PUSH
24496: LD_INT 31
24498: PUSH
24499: LD_INT 32
24501: PUSH
24502: LD_INT 33
24504: PUSH
24505: LD_INT 34
24507: PUSH
24508: LD_INT 35
24510: PUSH
24511: LD_INT 36
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 101
24554: PUSH
24555: LD_INT 102
24557: PUSH
24558: LD_INT 103
24560: PUSH
24561: LD_INT 104
24563: PUSH
24564: LD_INT 105
24566: PUSH
24567: LD_INT 106
24569: PUSH
24570: LD_INT 107
24572: PUSH
24573: LD_INT 108
24575: PUSH
24576: LD_INT 109
24578: PUSH
24579: LD_INT 110
24581: PUSH
24582: LD_INT 111
24584: PUSH
24585: LD_INT 112
24587: PUSH
24588: LD_INT 113
24590: PUSH
24591: LD_INT 114
24593: PUSH
24594: LD_INT 115
24596: PUSH
24597: LD_INT 116
24599: PUSH
24600: LD_INT 117
24602: PUSH
24603: LD_INT 118
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: ST_TO_ADDR
// if result then
24630: LD_VAR 0 2
24634: IFFALSE 25420
// begin normal :=  ;
24636: LD_ADDR_VAR 0 5
24640: PUSH
24641: LD_STRING 
24643: ST_TO_ADDR
// hardcore :=  ;
24644: LD_ADDR_VAR 0 6
24648: PUSH
24649: LD_STRING 
24651: ST_TO_ADDR
// active :=  ;
24652: LD_ADDR_VAR 0 7
24656: PUSH
24657: LD_STRING 
24659: ST_TO_ADDR
// for i = 1 to normalCounter do
24660: LD_ADDR_VAR 0 8
24664: PUSH
24665: DOUBLE
24666: LD_INT 1
24668: DEC
24669: ST_TO_ADDR
24670: LD_EXP 38
24674: PUSH
24675: FOR_TO
24676: IFFALSE 24777
// begin tmp := 0 ;
24678: LD_ADDR_VAR 0 3
24682: PUSH
24683: LD_STRING 0
24685: ST_TO_ADDR
// if result [ 1 ] then
24686: LD_VAR 0 2
24690: PUSH
24691: LD_INT 1
24693: ARRAY
24694: IFFALSE 24759
// if result [ 1 ] [ 1 ] = i then
24696: LD_VAR 0 2
24700: PUSH
24701: LD_INT 1
24703: ARRAY
24704: PUSH
24705: LD_INT 1
24707: ARRAY
24708: PUSH
24709: LD_VAR 0 8
24713: EQUAL
24714: IFFALSE 24759
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24716: LD_ADDR_VAR 0 2
24720: PUSH
24721: LD_VAR 0 2
24725: PPUSH
24726: LD_INT 1
24728: PPUSH
24729: LD_VAR 0 2
24733: PUSH
24734: LD_INT 1
24736: ARRAY
24737: PPUSH
24738: LD_INT 1
24740: PPUSH
24741: CALL_OW 3
24745: PPUSH
24746: CALL_OW 1
24750: ST_TO_ADDR
// tmp := 1 ;
24751: LD_ADDR_VAR 0 3
24755: PUSH
24756: LD_STRING 1
24758: ST_TO_ADDR
// end ; normal := normal & tmp ;
24759: LD_ADDR_VAR 0 5
24763: PUSH
24764: LD_VAR 0 5
24768: PUSH
24769: LD_VAR 0 3
24773: STR
24774: ST_TO_ADDR
// end ;
24775: GO 24675
24777: POP
24778: POP
// for i = 1 to hardcoreCounter do
24779: LD_ADDR_VAR 0 8
24783: PUSH
24784: DOUBLE
24785: LD_INT 1
24787: DEC
24788: ST_TO_ADDR
24789: LD_EXP 39
24793: PUSH
24794: FOR_TO
24795: IFFALSE 24900
// begin tmp := 0 ;
24797: LD_ADDR_VAR 0 3
24801: PUSH
24802: LD_STRING 0
24804: ST_TO_ADDR
// if result [ 2 ] then
24805: LD_VAR 0 2
24809: PUSH
24810: LD_INT 2
24812: ARRAY
24813: IFFALSE 24882
// if result [ 2 ] [ 1 ] = 100 + i then
24815: LD_VAR 0 2
24819: PUSH
24820: LD_INT 2
24822: ARRAY
24823: PUSH
24824: LD_INT 1
24826: ARRAY
24827: PUSH
24828: LD_INT 100
24830: PUSH
24831: LD_VAR 0 8
24835: PLUS
24836: EQUAL
24837: IFFALSE 24882
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24839: LD_ADDR_VAR 0 2
24843: PUSH
24844: LD_VAR 0 2
24848: PPUSH
24849: LD_INT 2
24851: PPUSH
24852: LD_VAR 0 2
24856: PUSH
24857: LD_INT 2
24859: ARRAY
24860: PPUSH
24861: LD_INT 1
24863: PPUSH
24864: CALL_OW 3
24868: PPUSH
24869: CALL_OW 1
24873: ST_TO_ADDR
// tmp := 1 ;
24874: LD_ADDR_VAR 0 3
24878: PUSH
24879: LD_STRING 1
24881: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24882: LD_ADDR_VAR 0 6
24886: PUSH
24887: LD_VAR 0 6
24891: PUSH
24892: LD_VAR 0 3
24896: STR
24897: ST_TO_ADDR
// end ;
24898: GO 24794
24900: POP
24901: POP
// if isGameLoad then
24902: LD_VAR 0 1
24906: IFFALSE 25381
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24908: LD_ADDR_VAR 0 4
24912: PUSH
24913: LD_EXP 42
24917: PUSH
24918: LD_EXP 41
24922: PUSH
24923: LD_EXP 43
24927: PUSH
24928: LD_EXP 40
24932: PUSH
24933: LD_EXP 44
24937: PUSH
24938: LD_EXP 45
24942: PUSH
24943: LD_EXP 46
24947: PUSH
24948: LD_EXP 47
24952: PUSH
24953: LD_EXP 48
24957: PUSH
24958: LD_EXP 49
24962: PUSH
24963: LD_EXP 50
24967: PUSH
24968: LD_EXP 51
24972: PUSH
24973: LD_EXP 52
24977: PUSH
24978: LD_EXP 53
24982: PUSH
24983: LD_EXP 61
24987: PUSH
24988: LD_EXP 62
24992: PUSH
24993: LD_EXP 63
24997: PUSH
24998: LD_EXP 64
25002: PUSH
25003: LD_EXP 66
25007: PUSH
25008: LD_EXP 67
25012: PUSH
25013: LD_EXP 68
25017: PUSH
25018: LD_EXP 71
25022: PUSH
25023: LD_EXP 73
25027: PUSH
25028: LD_EXP 74
25032: PUSH
25033: LD_EXP 75
25037: PUSH
25038: LD_EXP 77
25042: PUSH
25043: LD_EXP 78
25047: PUSH
25048: LD_EXP 81
25052: PUSH
25053: LD_EXP 82
25057: PUSH
25058: LD_EXP 83
25062: PUSH
25063: LD_EXP 84
25067: PUSH
25068: LD_EXP 85
25072: PUSH
25073: LD_EXP 86
25077: PUSH
25078: LD_EXP 87
25082: PUSH
25083: LD_EXP 88
25087: PUSH
25088: LD_EXP 89
25092: PUSH
25093: LD_EXP 54
25097: PUSH
25098: LD_EXP 55
25102: PUSH
25103: LD_EXP 58
25107: PUSH
25108: LD_EXP 59
25112: PUSH
25113: LD_EXP 60
25117: PUSH
25118: LD_EXP 56
25122: PUSH
25123: LD_EXP 57
25127: PUSH
25128: LD_EXP 65
25132: PUSH
25133: LD_EXP 69
25137: PUSH
25138: LD_EXP 70
25142: PUSH
25143: LD_EXP 72
25147: PUSH
25148: LD_EXP 76
25152: PUSH
25153: LD_EXP 79
25157: PUSH
25158: LD_EXP 80
25162: PUSH
25163: LD_EXP 90
25167: PUSH
25168: LD_EXP 91
25172: PUSH
25173: LD_EXP 92
25177: PUSH
25178: LD_EXP 93
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: ST_TO_ADDR
// tmp :=  ;
25239: LD_ADDR_VAR 0 3
25243: PUSH
25244: LD_STRING 
25246: ST_TO_ADDR
// for i = 1 to normalCounter do
25247: LD_ADDR_VAR 0 8
25251: PUSH
25252: DOUBLE
25253: LD_INT 1
25255: DEC
25256: ST_TO_ADDR
25257: LD_EXP 38
25261: PUSH
25262: FOR_TO
25263: IFFALSE 25299
// begin if flags [ i ] then
25265: LD_VAR 0 4
25269: PUSH
25270: LD_VAR 0 8
25274: ARRAY
25275: IFFALSE 25297
// tmp := tmp & i & ; ;
25277: LD_ADDR_VAR 0 3
25281: PUSH
25282: LD_VAR 0 3
25286: PUSH
25287: LD_VAR 0 8
25291: STR
25292: PUSH
25293: LD_STRING ;
25295: STR
25296: ST_TO_ADDR
// end ;
25297: GO 25262
25299: POP
25300: POP
// for i = 1 to hardcoreCounter do
25301: LD_ADDR_VAR 0 8
25305: PUSH
25306: DOUBLE
25307: LD_INT 1
25309: DEC
25310: ST_TO_ADDR
25311: LD_EXP 39
25315: PUSH
25316: FOR_TO
25317: IFFALSE 25363
// begin if flags [ normalCounter + i ] then
25319: LD_VAR 0 4
25323: PUSH
25324: LD_EXP 38
25328: PUSH
25329: LD_VAR 0 8
25333: PLUS
25334: ARRAY
25335: IFFALSE 25361
// tmp := tmp & ( 100 + i ) & ; ;
25337: LD_ADDR_VAR 0 3
25341: PUSH
25342: LD_VAR 0 3
25346: PUSH
25347: LD_INT 100
25349: PUSH
25350: LD_VAR 0 8
25354: PLUS
25355: STR
25356: PUSH
25357: LD_STRING ;
25359: STR
25360: ST_TO_ADDR
// end ;
25361: GO 25316
25363: POP
25364: POP
// if tmp then
25365: LD_VAR 0 3
25369: IFFALSE 25381
// active := tmp ;
25371: LD_ADDR_VAR 0 7
25375: PUSH
25376: LD_VAR 0 3
25380: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25381: LD_STRING getStreamItemsFromMission("
25383: PUSH
25384: LD_VAR 0 5
25388: STR
25389: PUSH
25390: LD_STRING ","
25392: STR
25393: PUSH
25394: LD_VAR 0 6
25398: STR
25399: PUSH
25400: LD_STRING ","
25402: STR
25403: PUSH
25404: LD_VAR 0 7
25408: STR
25409: PUSH
25410: LD_STRING ")
25412: STR
25413: PPUSH
25414: CALL_OW 559
// end else
25418: GO 25427
// ToLua ( getStreamItemsFromMission("","","") ) ;
25420: LD_STRING getStreamItemsFromMission("","","")
25422: PPUSH
25423: CALL_OW 559
// end ;
25427: LD_VAR 0 2
25431: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25432: LD_EXP 37
25436: PUSH
25437: LD_EXP 42
25441: AND
25442: IFFALSE 25566
25444: GO 25446
25446: DISABLE
25447: LD_INT 0
25449: PPUSH
25450: PPUSH
// begin enable ;
25451: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25452: LD_ADDR_VAR 0 2
25456: PUSH
25457: LD_INT 22
25459: PUSH
25460: LD_OWVAR 2
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 2
25471: PUSH
25472: LD_INT 34
25474: PUSH
25475: LD_INT 7
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 34
25484: PUSH
25485: LD_INT 45
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 34
25494: PUSH
25495: LD_INT 28
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 34
25504: PUSH
25505: LD_INT 47
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PPUSH
25523: CALL_OW 69
25527: ST_TO_ADDR
// if not tmp then
25528: LD_VAR 0 2
25532: NOT
25533: IFFALSE 25537
// exit ;
25535: GO 25566
// for i in tmp do
25537: LD_ADDR_VAR 0 1
25541: PUSH
25542: LD_VAR 0 2
25546: PUSH
25547: FOR_IN
25548: IFFALSE 25564
// begin SetLives ( i , 0 ) ;
25550: LD_VAR 0 1
25554: PPUSH
25555: LD_INT 0
25557: PPUSH
25558: CALL_OW 234
// end ;
25562: GO 25547
25564: POP
25565: POP
// end ;
25566: PPOPN 2
25568: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25569: LD_EXP 37
25573: PUSH
25574: LD_EXP 43
25578: AND
25579: IFFALSE 25663
25581: GO 25583
25583: DISABLE
25584: LD_INT 0
25586: PPUSH
25587: PPUSH
// begin enable ;
25588: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25589: LD_ADDR_VAR 0 2
25593: PUSH
25594: LD_INT 22
25596: PUSH
25597: LD_OWVAR 2
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 32
25608: PUSH
25609: LD_INT 3
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PPUSH
25620: CALL_OW 69
25624: ST_TO_ADDR
// if not tmp then
25625: LD_VAR 0 2
25629: NOT
25630: IFFALSE 25634
// exit ;
25632: GO 25663
// for i in tmp do
25634: LD_ADDR_VAR 0 1
25638: PUSH
25639: LD_VAR 0 2
25643: PUSH
25644: FOR_IN
25645: IFFALSE 25661
// begin SetLives ( i , 0 ) ;
25647: LD_VAR 0 1
25651: PPUSH
25652: LD_INT 0
25654: PPUSH
25655: CALL_OW 234
// end ;
25659: GO 25644
25661: POP
25662: POP
// end ;
25663: PPOPN 2
25665: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25666: LD_EXP 37
25670: PUSH
25671: LD_EXP 40
25675: AND
25676: IFFALSE 25769
25678: GO 25680
25680: DISABLE
25681: LD_INT 0
25683: PPUSH
// begin enable ;
25684: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25685: LD_ADDR_VAR 0 1
25689: PUSH
25690: LD_INT 22
25692: PUSH
25693: LD_OWVAR 2
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: LD_INT 25
25707: PUSH
25708: LD_INT 5
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 25
25717: PUSH
25718: LD_INT 9
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 25
25727: PUSH
25728: LD_INT 8
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PPUSH
25745: CALL_OW 69
25749: PUSH
25750: FOR_IN
25751: IFFALSE 25767
// begin SetClass ( i , 1 ) ;
25753: LD_VAR 0 1
25757: PPUSH
25758: LD_INT 1
25760: PPUSH
25761: CALL_OW 336
// end ;
25765: GO 25750
25767: POP
25768: POP
// end ;
25769: PPOPN 1
25771: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25772: LD_EXP 37
25776: PUSH
25777: LD_EXP 41
25781: AND
25782: PUSH
25783: LD_OWVAR 65
25787: PUSH
25788: LD_INT 7
25790: LESS
25791: AND
25792: IFFALSE 25806
25794: GO 25796
25796: DISABLE
// begin enable ;
25797: ENABLE
// game_speed := 7 ;
25798: LD_ADDR_OWVAR 65
25802: PUSH
25803: LD_INT 7
25805: ST_TO_ADDR
// end ;
25806: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25807: LD_EXP 37
25811: PUSH
25812: LD_EXP 44
25816: AND
25817: IFFALSE 26019
25819: GO 25821
25821: DISABLE
25822: LD_INT 0
25824: PPUSH
25825: PPUSH
25826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25827: LD_ADDR_VAR 0 3
25831: PUSH
25832: LD_INT 81
25834: PUSH
25835: LD_OWVAR 2
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 21
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PPUSH
25858: CALL_OW 69
25862: ST_TO_ADDR
// if not tmp then
25863: LD_VAR 0 3
25867: NOT
25868: IFFALSE 25872
// exit ;
25870: GO 26019
// if tmp > 5 then
25872: LD_VAR 0 3
25876: PUSH
25877: LD_INT 5
25879: GREATER
25880: IFFALSE 25892
// k := 5 else
25882: LD_ADDR_VAR 0 2
25886: PUSH
25887: LD_INT 5
25889: ST_TO_ADDR
25890: GO 25902
// k := tmp ;
25892: LD_ADDR_VAR 0 2
25896: PUSH
25897: LD_VAR 0 3
25901: ST_TO_ADDR
// for i := 1 to k do
25902: LD_ADDR_VAR 0 1
25906: PUSH
25907: DOUBLE
25908: LD_INT 1
25910: DEC
25911: ST_TO_ADDR
25912: LD_VAR 0 2
25916: PUSH
25917: FOR_TO
25918: IFFALSE 26017
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25920: LD_VAR 0 3
25924: PUSH
25925: LD_VAR 0 1
25929: ARRAY
25930: PPUSH
25931: LD_VAR 0 1
25935: PUSH
25936: LD_INT 4
25938: MOD
25939: PUSH
25940: LD_INT 1
25942: PLUS
25943: PPUSH
25944: CALL_OW 259
25948: PUSH
25949: LD_INT 10
25951: LESS
25952: IFFALSE 26015
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25954: LD_VAR 0 3
25958: PUSH
25959: LD_VAR 0 1
25963: ARRAY
25964: PPUSH
25965: LD_VAR 0 1
25969: PUSH
25970: LD_INT 4
25972: MOD
25973: PUSH
25974: LD_INT 1
25976: PLUS
25977: PPUSH
25978: LD_VAR 0 3
25982: PUSH
25983: LD_VAR 0 1
25987: ARRAY
25988: PPUSH
25989: LD_VAR 0 1
25993: PUSH
25994: LD_INT 4
25996: MOD
25997: PUSH
25998: LD_INT 1
26000: PLUS
26001: PPUSH
26002: CALL_OW 259
26006: PUSH
26007: LD_INT 1
26009: PLUS
26010: PPUSH
26011: CALL_OW 237
26015: GO 25917
26017: POP
26018: POP
// end ;
26019: PPOPN 3
26021: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26022: LD_EXP 37
26026: PUSH
26027: LD_EXP 45
26031: AND
26032: IFFALSE 26052
26034: GO 26036
26036: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26037: LD_INT 4
26039: PPUSH
26040: LD_OWVAR 2
26044: PPUSH
26045: LD_INT 0
26047: PPUSH
26048: CALL_OW 324
26052: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26053: LD_EXP 37
26057: PUSH
26058: LD_EXP 74
26062: AND
26063: IFFALSE 26083
26065: GO 26067
26067: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26068: LD_INT 19
26070: PPUSH
26071: LD_OWVAR 2
26075: PPUSH
26076: LD_INT 0
26078: PPUSH
26079: CALL_OW 324
26083: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26084: LD_EXP 37
26088: PUSH
26089: LD_EXP 46
26093: AND
26094: IFFALSE 26196
26096: GO 26098
26098: DISABLE
26099: LD_INT 0
26101: PPUSH
26102: PPUSH
// begin enable ;
26103: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26104: LD_ADDR_VAR 0 2
26108: PUSH
26109: LD_INT 22
26111: PUSH
26112: LD_OWVAR 2
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: PUSH
26124: LD_INT 34
26126: PUSH
26127: LD_INT 11
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 34
26136: PUSH
26137: LD_INT 30
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PPUSH
26153: CALL_OW 69
26157: ST_TO_ADDR
// if not tmp then
26158: LD_VAR 0 2
26162: NOT
26163: IFFALSE 26167
// exit ;
26165: GO 26196
// for i in tmp do
26167: LD_ADDR_VAR 0 1
26171: PUSH
26172: LD_VAR 0 2
26176: PUSH
26177: FOR_IN
26178: IFFALSE 26194
// begin SetLives ( i , 0 ) ;
26180: LD_VAR 0 1
26184: PPUSH
26185: LD_INT 0
26187: PPUSH
26188: CALL_OW 234
// end ;
26192: GO 26177
26194: POP
26195: POP
// end ;
26196: PPOPN 2
26198: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26199: LD_EXP 37
26203: PUSH
26204: LD_EXP 47
26208: AND
26209: IFFALSE 26229
26211: GO 26213
26213: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26214: LD_INT 32
26216: PPUSH
26217: LD_OWVAR 2
26221: PPUSH
26222: LD_INT 0
26224: PPUSH
26225: CALL_OW 324
26229: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26230: LD_EXP 37
26234: PUSH
26235: LD_EXP 48
26239: AND
26240: IFFALSE 26421
26242: GO 26244
26244: DISABLE
26245: LD_INT 0
26247: PPUSH
26248: PPUSH
26249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26250: LD_ADDR_VAR 0 2
26254: PUSH
26255: LD_INT 22
26257: PUSH
26258: LD_OWVAR 2
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 33
26269: PUSH
26270: LD_INT 3
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PPUSH
26281: CALL_OW 69
26285: ST_TO_ADDR
// if not tmp then
26286: LD_VAR 0 2
26290: NOT
26291: IFFALSE 26295
// exit ;
26293: GO 26421
// side := 0 ;
26295: LD_ADDR_VAR 0 3
26299: PUSH
26300: LD_INT 0
26302: ST_TO_ADDR
// for i := 1 to 8 do
26303: LD_ADDR_VAR 0 1
26307: PUSH
26308: DOUBLE
26309: LD_INT 1
26311: DEC
26312: ST_TO_ADDR
26313: LD_INT 8
26315: PUSH
26316: FOR_TO
26317: IFFALSE 26365
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26319: LD_OWVAR 2
26323: PUSH
26324: LD_VAR 0 1
26328: NONEQUAL
26329: PUSH
26330: LD_OWVAR 2
26334: PPUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: CALL_OW 81
26344: PUSH
26345: LD_INT 2
26347: EQUAL
26348: AND
26349: IFFALSE 26363
// begin side := i ;
26351: LD_ADDR_VAR 0 3
26355: PUSH
26356: LD_VAR 0 1
26360: ST_TO_ADDR
// break ;
26361: GO 26365
// end ;
26363: GO 26316
26365: POP
26366: POP
// if not side then
26367: LD_VAR 0 3
26371: NOT
26372: IFFALSE 26376
// exit ;
26374: GO 26421
// for i := 1 to tmp do
26376: LD_ADDR_VAR 0 1
26380: PUSH
26381: DOUBLE
26382: LD_INT 1
26384: DEC
26385: ST_TO_ADDR
26386: LD_VAR 0 2
26390: PUSH
26391: FOR_TO
26392: IFFALSE 26419
// if Prob ( 60 ) then
26394: LD_INT 60
26396: PPUSH
26397: CALL_OW 13
26401: IFFALSE 26417
// SetSide ( i , side ) ;
26403: LD_VAR 0 1
26407: PPUSH
26408: LD_VAR 0 3
26412: PPUSH
26413: CALL_OW 235
26417: GO 26391
26419: POP
26420: POP
// end ;
26421: PPOPN 3
26423: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26424: LD_EXP 37
26428: PUSH
26429: LD_EXP 50
26433: AND
26434: IFFALSE 26553
26436: GO 26438
26438: DISABLE
26439: LD_INT 0
26441: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26442: LD_ADDR_VAR 0 1
26446: PUSH
26447: LD_INT 22
26449: PUSH
26450: LD_OWVAR 2
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 21
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 3
26471: PUSH
26472: LD_INT 23
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: PPUSH
26491: CALL_OW 69
26495: PUSH
26496: FOR_IN
26497: IFFALSE 26551
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26499: LD_VAR 0 1
26503: PPUSH
26504: CALL_OW 257
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 3
26517: PUSH
26518: LD_INT 4
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: IN
26527: IFFALSE 26549
// SetClass ( un , rand ( 1 , 4 ) ) ;
26529: LD_VAR 0 1
26533: PPUSH
26534: LD_INT 1
26536: PPUSH
26537: LD_INT 4
26539: PPUSH
26540: CALL_OW 12
26544: PPUSH
26545: CALL_OW 336
26549: GO 26496
26551: POP
26552: POP
// end ;
26553: PPOPN 1
26555: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26556: LD_EXP 37
26560: PUSH
26561: LD_EXP 49
26565: AND
26566: IFFALSE 26645
26568: GO 26570
26570: DISABLE
26571: LD_INT 0
26573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26574: LD_ADDR_VAR 0 1
26578: PUSH
26579: LD_INT 22
26581: PUSH
26582: LD_OWVAR 2
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 21
26593: PUSH
26594: LD_INT 3
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PPUSH
26605: CALL_OW 69
26609: ST_TO_ADDR
// if not tmp then
26610: LD_VAR 0 1
26614: NOT
26615: IFFALSE 26619
// exit ;
26617: GO 26645
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26619: LD_VAR 0 1
26623: PUSH
26624: LD_INT 1
26626: PPUSH
26627: LD_VAR 0 1
26631: PPUSH
26632: CALL_OW 12
26636: ARRAY
26637: PPUSH
26638: LD_INT 100
26640: PPUSH
26641: CALL_OW 234
// end ;
26645: PPOPN 1
26647: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26648: LD_EXP 37
26652: PUSH
26653: LD_EXP 51
26657: AND
26658: IFFALSE 26756
26660: GO 26662
26662: DISABLE
26663: LD_INT 0
26665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26666: LD_ADDR_VAR 0 1
26670: PUSH
26671: LD_INT 22
26673: PUSH
26674: LD_OWVAR 2
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 21
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PPUSH
26697: CALL_OW 69
26701: ST_TO_ADDR
// if not tmp then
26702: LD_VAR 0 1
26706: NOT
26707: IFFALSE 26711
// exit ;
26709: GO 26756
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26711: LD_VAR 0 1
26715: PUSH
26716: LD_INT 1
26718: PPUSH
26719: LD_VAR 0 1
26723: PPUSH
26724: CALL_OW 12
26728: ARRAY
26729: PPUSH
26730: LD_INT 1
26732: PPUSH
26733: LD_INT 4
26735: PPUSH
26736: CALL_OW 12
26740: PPUSH
26741: LD_INT 3000
26743: PPUSH
26744: LD_INT 9000
26746: PPUSH
26747: CALL_OW 12
26751: PPUSH
26752: CALL_OW 492
// end ;
26756: PPOPN 1
26758: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26759: LD_EXP 37
26763: PUSH
26764: LD_EXP 52
26768: AND
26769: IFFALSE 26789
26771: GO 26773
26773: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26774: LD_INT 1
26776: PPUSH
26777: LD_OWVAR 2
26781: PPUSH
26782: LD_INT 0
26784: PPUSH
26785: CALL_OW 324
26789: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26790: LD_EXP 37
26794: PUSH
26795: LD_EXP 53
26799: AND
26800: IFFALSE 26883
26802: GO 26804
26804: DISABLE
26805: LD_INT 0
26807: PPUSH
26808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26809: LD_ADDR_VAR 0 2
26813: PUSH
26814: LD_INT 22
26816: PUSH
26817: LD_OWVAR 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 21
26828: PUSH
26829: LD_INT 3
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PPUSH
26840: CALL_OW 69
26844: ST_TO_ADDR
// if not tmp then
26845: LD_VAR 0 2
26849: NOT
26850: IFFALSE 26854
// exit ;
26852: GO 26883
// for i in tmp do
26854: LD_ADDR_VAR 0 1
26858: PUSH
26859: LD_VAR 0 2
26863: PUSH
26864: FOR_IN
26865: IFFALSE 26881
// SetBLevel ( i , 10 ) ;
26867: LD_VAR 0 1
26871: PPUSH
26872: LD_INT 10
26874: PPUSH
26875: CALL_OW 241
26879: GO 26864
26881: POP
26882: POP
// end ;
26883: PPOPN 2
26885: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26886: LD_EXP 37
26890: PUSH
26891: LD_EXP 54
26895: AND
26896: IFFALSE 27007
26898: GO 26900
26900: DISABLE
26901: LD_INT 0
26903: PPUSH
26904: PPUSH
26905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26906: LD_ADDR_VAR 0 3
26910: PUSH
26911: LD_INT 22
26913: PUSH
26914: LD_OWVAR 2
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 25
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PPUSH
26937: CALL_OW 69
26941: ST_TO_ADDR
// if not tmp then
26942: LD_VAR 0 3
26946: NOT
26947: IFFALSE 26951
// exit ;
26949: GO 27007
// un := tmp [ rand ( 1 , tmp ) ] ;
26951: LD_ADDR_VAR 0 2
26955: PUSH
26956: LD_VAR 0 3
26960: PUSH
26961: LD_INT 1
26963: PPUSH
26964: LD_VAR 0 3
26968: PPUSH
26969: CALL_OW 12
26973: ARRAY
26974: ST_TO_ADDR
// if Crawls ( un ) then
26975: LD_VAR 0 2
26979: PPUSH
26980: CALL_OW 318
26984: IFFALSE 26995
// ComWalk ( un ) ;
26986: LD_VAR 0 2
26990: PPUSH
26991: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26995: LD_VAR 0 2
26999: PPUSH
27000: LD_INT 5
27002: PPUSH
27003: CALL_OW 336
// end ;
27007: PPOPN 3
27009: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27010: LD_EXP 37
27014: PUSH
27015: LD_EXP 55
27019: AND
27020: PUSH
27021: LD_OWVAR 67
27025: PUSH
27026: LD_INT 4
27028: LESS
27029: AND
27030: IFFALSE 27049
27032: GO 27034
27034: DISABLE
// begin Difficulty := Difficulty + 1 ;
27035: LD_ADDR_OWVAR 67
27039: PUSH
27040: LD_OWVAR 67
27044: PUSH
27045: LD_INT 1
27047: PLUS
27048: ST_TO_ADDR
// end ;
27049: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27050: LD_EXP 37
27054: PUSH
27055: LD_EXP 56
27059: AND
27060: IFFALSE 27163
27062: GO 27064
27064: DISABLE
27065: LD_INT 0
27067: PPUSH
// begin for i := 1 to 5 do
27068: LD_ADDR_VAR 0 1
27072: PUSH
27073: DOUBLE
27074: LD_INT 1
27076: DEC
27077: ST_TO_ADDR
27078: LD_INT 5
27080: PUSH
27081: FOR_TO
27082: IFFALSE 27161
// begin uc_nation := nation_nature ;
27084: LD_ADDR_OWVAR 21
27088: PUSH
27089: LD_INT 0
27091: ST_TO_ADDR
// uc_side := 0 ;
27092: LD_ADDR_OWVAR 20
27096: PUSH
27097: LD_INT 0
27099: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27100: LD_ADDR_OWVAR 29
27104: PUSH
27105: LD_INT 12
27107: PUSH
27108: LD_INT 12
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: ST_TO_ADDR
// hc_agressivity := 20 ;
27115: LD_ADDR_OWVAR 35
27119: PUSH
27120: LD_INT 20
27122: ST_TO_ADDR
// hc_class := class_tiger ;
27123: LD_ADDR_OWVAR 28
27127: PUSH
27128: LD_INT 14
27130: ST_TO_ADDR
// hc_gallery :=  ;
27131: LD_ADDR_OWVAR 33
27135: PUSH
27136: LD_STRING 
27138: ST_TO_ADDR
// hc_name :=  ;
27139: LD_ADDR_OWVAR 26
27143: PUSH
27144: LD_STRING 
27146: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27147: CALL_OW 44
27151: PPUSH
27152: LD_INT 0
27154: PPUSH
27155: CALL_OW 51
// end ;
27159: GO 27081
27161: POP
27162: POP
// end ;
27163: PPOPN 1
27165: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27166: LD_EXP 37
27170: PUSH
27171: LD_EXP 57
27175: AND
27176: IFFALSE 27185
27178: GO 27180
27180: DISABLE
// StreamSibBomb ;
27181: CALL 27186 0 0
27185: END
// export function StreamSibBomb ; var i , x , y ; begin
27186: LD_INT 0
27188: PPUSH
27189: PPUSH
27190: PPUSH
27191: PPUSH
// result := false ;
27192: LD_ADDR_VAR 0 1
27196: PUSH
27197: LD_INT 0
27199: ST_TO_ADDR
// for i := 1 to 16 do
27200: LD_ADDR_VAR 0 2
27204: PUSH
27205: DOUBLE
27206: LD_INT 1
27208: DEC
27209: ST_TO_ADDR
27210: LD_INT 16
27212: PUSH
27213: FOR_TO
27214: IFFALSE 27413
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27216: LD_ADDR_VAR 0 3
27220: PUSH
27221: LD_INT 10
27223: PUSH
27224: LD_INT 20
27226: PUSH
27227: LD_INT 30
27229: PUSH
27230: LD_INT 40
27232: PUSH
27233: LD_INT 50
27235: PUSH
27236: LD_INT 60
27238: PUSH
27239: LD_INT 70
27241: PUSH
27242: LD_INT 80
27244: PUSH
27245: LD_INT 90
27247: PUSH
27248: LD_INT 100
27250: PUSH
27251: LD_INT 110
27253: PUSH
27254: LD_INT 120
27256: PUSH
27257: LD_INT 130
27259: PUSH
27260: LD_INT 140
27262: PUSH
27263: LD_INT 150
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: PPUSH
27286: LD_INT 15
27288: PPUSH
27289: CALL_OW 12
27293: ARRAY
27294: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27295: LD_ADDR_VAR 0 4
27299: PUSH
27300: LD_INT 10
27302: PUSH
27303: LD_INT 20
27305: PUSH
27306: LD_INT 30
27308: PUSH
27309: LD_INT 40
27311: PUSH
27312: LD_INT 50
27314: PUSH
27315: LD_INT 60
27317: PUSH
27318: LD_INT 70
27320: PUSH
27321: LD_INT 80
27323: PUSH
27324: LD_INT 90
27326: PUSH
27327: LD_INT 100
27329: PUSH
27330: LD_INT 110
27332: PUSH
27333: LD_INT 120
27335: PUSH
27336: LD_INT 130
27338: PUSH
27339: LD_INT 140
27341: PUSH
27342: LD_INT 150
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: PPUSH
27365: LD_INT 15
27367: PPUSH
27368: CALL_OW 12
27372: ARRAY
27373: ST_TO_ADDR
// if ValidHex ( x , y ) then
27374: LD_VAR 0 3
27378: PPUSH
27379: LD_VAR 0 4
27383: PPUSH
27384: CALL_OW 488
27388: IFFALSE 27411
// begin result := [ x , y ] ;
27390: LD_ADDR_VAR 0 1
27394: PUSH
27395: LD_VAR 0 3
27399: PUSH
27400: LD_VAR 0 4
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: ST_TO_ADDR
// break ;
27409: GO 27413
// end ; end ;
27411: GO 27213
27413: POP
27414: POP
// if result then
27415: LD_VAR 0 1
27419: IFFALSE 27479
// begin ToLua ( playSibBomb() ) ;
27421: LD_STRING playSibBomb()
27423: PPUSH
27424: CALL_OW 559
// wait ( 0 0$14 ) ;
27428: LD_INT 490
27430: PPUSH
27431: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27435: LD_VAR 0 1
27439: PUSH
27440: LD_INT 1
27442: ARRAY
27443: PPUSH
27444: LD_VAR 0 1
27448: PUSH
27449: LD_INT 2
27451: ARRAY
27452: PPUSH
27453: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27457: LD_VAR 0 1
27461: PUSH
27462: LD_INT 1
27464: ARRAY
27465: PPUSH
27466: LD_VAR 0 1
27470: PUSH
27471: LD_INT 2
27473: ARRAY
27474: PPUSH
27475: CALL_OW 429
// end ; end ;
27479: LD_VAR 0 1
27483: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27484: LD_EXP 37
27488: PUSH
27489: LD_EXP 59
27493: AND
27494: IFFALSE 27506
27496: GO 27498
27498: DISABLE
// YouLost (  ) ;
27499: LD_STRING 
27501: PPUSH
27502: CALL_OW 104
27506: END
// every 0 0$1 trigger StreamModeActive and sFog do
27507: LD_EXP 37
27511: PUSH
27512: LD_EXP 58
27516: AND
27517: IFFALSE 27531
27519: GO 27521
27521: DISABLE
// FogOff ( your_side ) ;
27522: LD_OWVAR 2
27526: PPUSH
27527: CALL_OW 344
27531: END
// every 0 0$1 trigger StreamModeActive and sSun do
27532: LD_EXP 37
27536: PUSH
27537: LD_EXP 60
27541: AND
27542: IFFALSE 27570
27544: GO 27546
27546: DISABLE
// begin solar_recharge_percent := 0 ;
27547: LD_ADDR_OWVAR 79
27551: PUSH
27552: LD_INT 0
27554: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27555: LD_INT 10500
27557: PPUSH
27558: CALL_OW 67
// solar_recharge_percent := 100 ;
27562: LD_ADDR_OWVAR 79
27566: PUSH
27567: LD_INT 100
27569: ST_TO_ADDR
// end ;
27570: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27571: LD_EXP 37
27575: PUSH
27576: LD_EXP 61
27580: AND
27581: IFFALSE 27820
27583: GO 27585
27585: DISABLE
27586: LD_INT 0
27588: PPUSH
27589: PPUSH
27590: PPUSH
// begin tmp := [ ] ;
27591: LD_ADDR_VAR 0 3
27595: PUSH
27596: EMPTY
27597: ST_TO_ADDR
// for i := 1 to 6 do
27598: LD_ADDR_VAR 0 1
27602: PUSH
27603: DOUBLE
27604: LD_INT 1
27606: DEC
27607: ST_TO_ADDR
27608: LD_INT 6
27610: PUSH
27611: FOR_TO
27612: IFFALSE 27717
// begin uc_nation := nation_nature ;
27614: LD_ADDR_OWVAR 21
27618: PUSH
27619: LD_INT 0
27621: ST_TO_ADDR
// uc_side := 0 ;
27622: LD_ADDR_OWVAR 20
27626: PUSH
27627: LD_INT 0
27629: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27630: LD_ADDR_OWVAR 29
27634: PUSH
27635: LD_INT 12
27637: PUSH
27638: LD_INT 12
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: ST_TO_ADDR
// hc_agressivity := 20 ;
27645: LD_ADDR_OWVAR 35
27649: PUSH
27650: LD_INT 20
27652: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27653: LD_ADDR_OWVAR 28
27657: PUSH
27658: LD_INT 17
27660: ST_TO_ADDR
// hc_gallery :=  ;
27661: LD_ADDR_OWVAR 33
27665: PUSH
27666: LD_STRING 
27668: ST_TO_ADDR
// hc_name :=  ;
27669: LD_ADDR_OWVAR 26
27673: PUSH
27674: LD_STRING 
27676: ST_TO_ADDR
// un := CreateHuman ;
27677: LD_ADDR_VAR 0 2
27681: PUSH
27682: CALL_OW 44
27686: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27687: LD_VAR 0 2
27691: PPUSH
27692: LD_INT 1
27694: PPUSH
27695: CALL_OW 51
// tmp := tmp ^ un ;
27699: LD_ADDR_VAR 0 3
27703: PUSH
27704: LD_VAR 0 3
27708: PUSH
27709: LD_VAR 0 2
27713: ADD
27714: ST_TO_ADDR
// end ;
27715: GO 27611
27717: POP
27718: POP
// repeat wait ( 0 0$1 ) ;
27719: LD_INT 35
27721: PPUSH
27722: CALL_OW 67
// for un in tmp do
27726: LD_ADDR_VAR 0 2
27730: PUSH
27731: LD_VAR 0 3
27735: PUSH
27736: FOR_IN
27737: IFFALSE 27811
// begin if IsDead ( un ) then
27739: LD_VAR 0 2
27743: PPUSH
27744: CALL_OW 301
27748: IFFALSE 27768
// begin tmp := tmp diff un ;
27750: LD_ADDR_VAR 0 3
27754: PUSH
27755: LD_VAR 0 3
27759: PUSH
27760: LD_VAR 0 2
27764: DIFF
27765: ST_TO_ADDR
// continue ;
27766: GO 27736
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27768: LD_VAR 0 2
27772: PPUSH
27773: LD_INT 3
27775: PUSH
27776: LD_INT 22
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PPUSH
27790: CALL_OW 69
27794: PPUSH
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 74
27804: PPUSH
27805: CALL_OW 115
// end ;
27809: GO 27736
27811: POP
27812: POP
// until not tmp ;
27813: LD_VAR 0 3
27817: NOT
27818: IFFALSE 27719
// end ;
27820: PPOPN 3
27822: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27823: LD_EXP 37
27827: PUSH
27828: LD_EXP 62
27832: AND
27833: IFFALSE 27887
27835: GO 27837
27837: DISABLE
// begin ToLua ( displayTroll(); ) ;
27838: LD_STRING displayTroll();
27840: PPUSH
27841: CALL_OW 559
// wait ( 3 3$00 ) ;
27845: LD_INT 6300
27847: PPUSH
27848: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27852: LD_STRING hideTroll();
27854: PPUSH
27855: CALL_OW 559
// wait ( 1 1$00 ) ;
27859: LD_INT 2100
27861: PPUSH
27862: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27866: LD_STRING displayTroll();
27868: PPUSH
27869: CALL_OW 559
// wait ( 1 1$00 ) ;
27873: LD_INT 2100
27875: PPUSH
27876: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27880: LD_STRING hideTroll();
27882: PPUSH
27883: CALL_OW 559
// end ;
27887: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27888: LD_EXP 37
27892: PUSH
27893: LD_EXP 63
27897: AND
27898: IFFALSE 27961
27900: GO 27902
27902: DISABLE
27903: LD_INT 0
27905: PPUSH
// begin p := 0 ;
27906: LD_ADDR_VAR 0 1
27910: PUSH
27911: LD_INT 0
27913: ST_TO_ADDR
// repeat game_speed := 1 ;
27914: LD_ADDR_OWVAR 65
27918: PUSH
27919: LD_INT 1
27921: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27922: LD_INT 35
27924: PPUSH
27925: CALL_OW 67
// p := p + 1 ;
27929: LD_ADDR_VAR 0 1
27933: PUSH
27934: LD_VAR 0 1
27938: PUSH
27939: LD_INT 1
27941: PLUS
27942: ST_TO_ADDR
// until p >= 60 ;
27943: LD_VAR 0 1
27947: PUSH
27948: LD_INT 60
27950: GREATEREQUAL
27951: IFFALSE 27914
// game_speed := 4 ;
27953: LD_ADDR_OWVAR 65
27957: PUSH
27958: LD_INT 4
27960: ST_TO_ADDR
// end ;
27961: PPOPN 1
27963: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27964: LD_EXP 37
27968: PUSH
27969: LD_EXP 64
27973: AND
27974: IFFALSE 28120
27976: GO 27978
27978: DISABLE
27979: LD_INT 0
27981: PPUSH
27982: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27983: LD_ADDR_VAR 0 1
27987: PUSH
27988: LD_INT 22
27990: PUSH
27991: LD_OWVAR 2
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 2
28002: PUSH
28003: LD_INT 30
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 30
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PPUSH
28032: CALL_OW 69
28036: ST_TO_ADDR
// if not depot then
28037: LD_VAR 0 1
28041: NOT
28042: IFFALSE 28046
// exit ;
28044: GO 28120
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28046: LD_ADDR_VAR 0 2
28050: PUSH
28051: LD_VAR 0 1
28055: PUSH
28056: LD_INT 1
28058: PPUSH
28059: LD_VAR 0 1
28063: PPUSH
28064: CALL_OW 12
28068: ARRAY
28069: PPUSH
28070: CALL_OW 274
28074: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28075: LD_VAR 0 2
28079: PPUSH
28080: LD_INT 1
28082: PPUSH
28083: LD_INT 0
28085: PPUSH
28086: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28090: LD_VAR 0 2
28094: PPUSH
28095: LD_INT 2
28097: PPUSH
28098: LD_INT 0
28100: PPUSH
28101: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28105: LD_VAR 0 2
28109: PPUSH
28110: LD_INT 3
28112: PPUSH
28113: LD_INT 0
28115: PPUSH
28116: CALL_OW 277
// end ;
28120: PPOPN 2
28122: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28123: LD_EXP 37
28127: PUSH
28128: LD_EXP 65
28132: AND
28133: IFFALSE 28230
28135: GO 28137
28137: DISABLE
28138: LD_INT 0
28140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28141: LD_ADDR_VAR 0 1
28145: PUSH
28146: LD_INT 22
28148: PUSH
28149: LD_OWVAR 2
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 21
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 3
28170: PUSH
28171: LD_INT 23
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: PPUSH
28190: CALL_OW 69
28194: ST_TO_ADDR
// if not tmp then
28195: LD_VAR 0 1
28199: NOT
28200: IFFALSE 28204
// exit ;
28202: GO 28230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28204: LD_VAR 0 1
28208: PUSH
28209: LD_INT 1
28211: PPUSH
28212: LD_VAR 0 1
28216: PPUSH
28217: CALL_OW 12
28221: ARRAY
28222: PPUSH
28223: LD_INT 200
28225: PPUSH
28226: CALL_OW 234
// end ;
28230: PPOPN 1
28232: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28233: LD_EXP 37
28237: PUSH
28238: LD_EXP 66
28242: AND
28243: IFFALSE 28322
28245: GO 28247
28247: DISABLE
28248: LD_INT 0
28250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28251: LD_ADDR_VAR 0 1
28255: PUSH
28256: LD_INT 22
28258: PUSH
28259: LD_OWVAR 2
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 21
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PPUSH
28282: CALL_OW 69
28286: ST_TO_ADDR
// if not tmp then
28287: LD_VAR 0 1
28291: NOT
28292: IFFALSE 28296
// exit ;
28294: GO 28322
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28296: LD_VAR 0 1
28300: PUSH
28301: LD_INT 1
28303: PPUSH
28304: LD_VAR 0 1
28308: PPUSH
28309: CALL_OW 12
28313: ARRAY
28314: PPUSH
28315: LD_INT 60
28317: PPUSH
28318: CALL_OW 234
// end ;
28322: PPOPN 1
28324: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28325: LD_EXP 37
28329: PUSH
28330: LD_EXP 67
28334: AND
28335: IFFALSE 28434
28337: GO 28339
28339: DISABLE
28340: LD_INT 0
28342: PPUSH
28343: PPUSH
// begin enable ;
28344: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28345: LD_ADDR_VAR 0 1
28349: PUSH
28350: LD_INT 22
28352: PUSH
28353: LD_OWVAR 2
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 61
28364: PUSH
28365: EMPTY
28366: LIST
28367: PUSH
28368: LD_INT 33
28370: PUSH
28371: LD_INT 2
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: LIST
28382: PPUSH
28383: CALL_OW 69
28387: ST_TO_ADDR
// if not tmp then
28388: LD_VAR 0 1
28392: NOT
28393: IFFALSE 28397
// exit ;
28395: GO 28434
// for i in tmp do
28397: LD_ADDR_VAR 0 2
28401: PUSH
28402: LD_VAR 0 1
28406: PUSH
28407: FOR_IN
28408: IFFALSE 28432
// if IsControledBy ( i ) then
28410: LD_VAR 0 2
28414: PPUSH
28415: CALL_OW 312
28419: IFFALSE 28430
// ComUnlink ( i ) ;
28421: LD_VAR 0 2
28425: PPUSH
28426: CALL_OW 136
28430: GO 28407
28432: POP
28433: POP
// end ;
28434: PPOPN 2
28436: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28437: LD_EXP 37
28441: PUSH
28442: LD_EXP 68
28446: AND
28447: IFFALSE 28587
28449: GO 28451
28451: DISABLE
28452: LD_INT 0
28454: PPUSH
28455: PPUSH
// begin ToLua ( displayPowell(); ) ;
28456: LD_STRING displayPowell();
28458: PPUSH
28459: CALL_OW 559
// uc_side := 0 ;
28463: LD_ADDR_OWVAR 20
28467: PUSH
28468: LD_INT 0
28470: ST_TO_ADDR
// uc_nation := 2 ;
28471: LD_ADDR_OWVAR 21
28475: PUSH
28476: LD_INT 2
28478: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28479: LD_ADDR_OWVAR 37
28483: PUSH
28484: LD_INT 14
28486: ST_TO_ADDR
// vc_engine := engine_siberite ;
28487: LD_ADDR_OWVAR 39
28491: PUSH
28492: LD_INT 3
28494: ST_TO_ADDR
// vc_control := control_apeman ;
28495: LD_ADDR_OWVAR 38
28499: PUSH
28500: LD_INT 5
28502: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28503: LD_ADDR_OWVAR 40
28507: PUSH
28508: LD_INT 29
28510: ST_TO_ADDR
// un := CreateVehicle ;
28511: LD_ADDR_VAR 0 2
28515: PUSH
28516: CALL_OW 45
28520: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28521: LD_VAR 0 2
28525: PPUSH
28526: LD_INT 1
28528: PPUSH
28529: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28533: LD_INT 35
28535: PPUSH
28536: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28540: LD_VAR 0 2
28544: PPUSH
28545: LD_INT 22
28547: PUSH
28548: LD_OWVAR 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PPUSH
28557: CALL_OW 69
28561: PPUSH
28562: LD_VAR 0 2
28566: PPUSH
28567: CALL_OW 74
28571: PPUSH
28572: CALL_OW 115
// until IsDead ( un ) ;
28576: LD_VAR 0 2
28580: PPUSH
28581: CALL_OW 301
28585: IFFALSE 28533
// end ;
28587: PPOPN 2
28589: END
// every 0 0$1 trigger StreamModeActive and sStu do
28590: LD_EXP 37
28594: PUSH
28595: LD_EXP 76
28599: AND
28600: IFFALSE 28616
28602: GO 28604
28604: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28605: LD_STRING displayStucuk();
28607: PPUSH
28608: CALL_OW 559
// ResetFog ;
28612: CALL_OW 335
// end ;
28616: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28617: LD_EXP 37
28621: PUSH
28622: LD_EXP 69
28626: AND
28627: IFFALSE 28768
28629: GO 28631
28631: DISABLE
28632: LD_INT 0
28634: PPUSH
28635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28636: LD_ADDR_VAR 0 2
28640: PUSH
28641: LD_INT 22
28643: PUSH
28644: LD_OWVAR 2
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 21
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PPUSH
28667: CALL_OW 69
28671: ST_TO_ADDR
// if not tmp then
28672: LD_VAR 0 2
28676: NOT
28677: IFFALSE 28681
// exit ;
28679: GO 28768
// un := tmp [ rand ( 1 , tmp ) ] ;
28681: LD_ADDR_VAR 0 1
28685: PUSH
28686: LD_VAR 0 2
28690: PUSH
28691: LD_INT 1
28693: PPUSH
28694: LD_VAR 0 2
28698: PPUSH
28699: CALL_OW 12
28703: ARRAY
28704: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28705: LD_VAR 0 1
28709: PPUSH
28710: LD_INT 0
28712: PPUSH
28713: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28717: LD_VAR 0 1
28721: PPUSH
28722: LD_OWVAR 3
28726: PUSH
28727: LD_VAR 0 1
28731: DIFF
28732: PPUSH
28733: LD_VAR 0 1
28737: PPUSH
28738: CALL_OW 74
28742: PPUSH
28743: CALL_OW 115
// wait ( 0 0$20 ) ;
28747: LD_INT 700
28749: PPUSH
28750: CALL_OW 67
// SetSide ( un , your_side ) ;
28754: LD_VAR 0 1
28758: PPUSH
28759: LD_OWVAR 2
28763: PPUSH
28764: CALL_OW 235
// end ;
28768: PPOPN 2
28770: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28771: LD_EXP 37
28775: PUSH
28776: LD_EXP 70
28780: AND
28781: IFFALSE 28887
28783: GO 28785
28785: DISABLE
28786: LD_INT 0
28788: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28789: LD_ADDR_VAR 0 1
28793: PUSH
28794: LD_INT 22
28796: PUSH
28797: LD_OWVAR 2
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 30
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 30
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PPUSH
28838: CALL_OW 69
28842: ST_TO_ADDR
// if not depot then
28843: LD_VAR 0 1
28847: NOT
28848: IFFALSE 28852
// exit ;
28850: GO 28887
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28852: LD_VAR 0 1
28856: PUSH
28857: LD_INT 1
28859: ARRAY
28860: PPUSH
28861: CALL_OW 250
28865: PPUSH
28866: LD_VAR 0 1
28870: PUSH
28871: LD_INT 1
28873: ARRAY
28874: PPUSH
28875: CALL_OW 251
28879: PPUSH
28880: LD_INT 70
28882: PPUSH
28883: CALL_OW 495
// end ;
28887: PPOPN 1
28889: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28890: LD_EXP 37
28894: PUSH
28895: LD_EXP 71
28899: AND
28900: IFFALSE 29111
28902: GO 28904
28904: DISABLE
28905: LD_INT 0
28907: PPUSH
28908: PPUSH
28909: PPUSH
28910: PPUSH
28911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28912: LD_ADDR_VAR 0 5
28916: PUSH
28917: LD_INT 22
28919: PUSH
28920: LD_OWVAR 2
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 21
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PPUSH
28943: CALL_OW 69
28947: ST_TO_ADDR
// if not tmp then
28948: LD_VAR 0 5
28952: NOT
28953: IFFALSE 28957
// exit ;
28955: GO 29111
// for i in tmp do
28957: LD_ADDR_VAR 0 1
28961: PUSH
28962: LD_VAR 0 5
28966: PUSH
28967: FOR_IN
28968: IFFALSE 29109
// begin d := rand ( 0 , 5 ) ;
28970: LD_ADDR_VAR 0 4
28974: PUSH
28975: LD_INT 0
28977: PPUSH
28978: LD_INT 5
28980: PPUSH
28981: CALL_OW 12
28985: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28986: LD_ADDR_VAR 0 2
28990: PUSH
28991: LD_VAR 0 1
28995: PPUSH
28996: CALL_OW 250
29000: PPUSH
29001: LD_VAR 0 4
29005: PPUSH
29006: LD_INT 3
29008: PPUSH
29009: LD_INT 12
29011: PPUSH
29012: CALL_OW 12
29016: PPUSH
29017: CALL_OW 272
29021: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29022: LD_ADDR_VAR 0 3
29026: PUSH
29027: LD_VAR 0 1
29031: PPUSH
29032: CALL_OW 251
29036: PPUSH
29037: LD_VAR 0 4
29041: PPUSH
29042: LD_INT 3
29044: PPUSH
29045: LD_INT 12
29047: PPUSH
29048: CALL_OW 12
29052: PPUSH
29053: CALL_OW 273
29057: ST_TO_ADDR
// if ValidHex ( x , y ) then
29058: LD_VAR 0 2
29062: PPUSH
29063: LD_VAR 0 3
29067: PPUSH
29068: CALL_OW 488
29072: IFFALSE 29107
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29074: LD_VAR 0 1
29078: PPUSH
29079: LD_VAR 0 2
29083: PPUSH
29084: LD_VAR 0 3
29088: PPUSH
29089: LD_INT 3
29091: PPUSH
29092: LD_INT 6
29094: PPUSH
29095: CALL_OW 12
29099: PPUSH
29100: LD_INT 1
29102: PPUSH
29103: CALL_OW 483
// end ;
29107: GO 28967
29109: POP
29110: POP
// end ;
29111: PPOPN 5
29113: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29114: LD_EXP 37
29118: PUSH
29119: LD_EXP 72
29123: AND
29124: IFFALSE 29218
29126: GO 29128
29128: DISABLE
29129: LD_INT 0
29131: PPUSH
29132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29133: LD_ADDR_VAR 0 2
29137: PUSH
29138: LD_INT 22
29140: PUSH
29141: LD_OWVAR 2
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 32
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 21
29162: PUSH
29163: LD_INT 2
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: LIST
29174: PPUSH
29175: CALL_OW 69
29179: ST_TO_ADDR
// if not tmp then
29180: LD_VAR 0 2
29184: NOT
29185: IFFALSE 29189
// exit ;
29187: GO 29218
// for i in tmp do
29189: LD_ADDR_VAR 0 1
29193: PUSH
29194: LD_VAR 0 2
29198: PUSH
29199: FOR_IN
29200: IFFALSE 29216
// SetFuel ( i , 0 ) ;
29202: LD_VAR 0 1
29206: PPUSH
29207: LD_INT 0
29209: PPUSH
29210: CALL_OW 240
29214: GO 29199
29216: POP
29217: POP
// end ;
29218: PPOPN 2
29220: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29221: LD_EXP 37
29225: PUSH
29226: LD_EXP 73
29230: AND
29231: IFFALSE 29297
29233: GO 29235
29235: DISABLE
29236: LD_INT 0
29238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29239: LD_ADDR_VAR 0 1
29243: PUSH
29244: LD_INT 22
29246: PUSH
29247: LD_OWVAR 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 30
29258: PUSH
29259: LD_INT 29
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PPUSH
29270: CALL_OW 69
29274: ST_TO_ADDR
// if not tmp then
29275: LD_VAR 0 1
29279: NOT
29280: IFFALSE 29284
// exit ;
29282: GO 29297
// DestroyUnit ( tmp [ 1 ] ) ;
29284: LD_VAR 0 1
29288: PUSH
29289: LD_INT 1
29291: ARRAY
29292: PPUSH
29293: CALL_OW 65
// end ;
29297: PPOPN 1
29299: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29300: LD_EXP 37
29304: PUSH
29305: LD_EXP 75
29309: AND
29310: IFFALSE 29439
29312: GO 29314
29314: DISABLE
29315: LD_INT 0
29317: PPUSH
// begin uc_side := 0 ;
29318: LD_ADDR_OWVAR 20
29322: PUSH
29323: LD_INT 0
29325: ST_TO_ADDR
// uc_nation := nation_arabian ;
29326: LD_ADDR_OWVAR 21
29330: PUSH
29331: LD_INT 2
29333: ST_TO_ADDR
// hc_gallery :=  ;
29334: LD_ADDR_OWVAR 33
29338: PUSH
29339: LD_STRING 
29341: ST_TO_ADDR
// hc_name :=  ;
29342: LD_ADDR_OWVAR 26
29346: PUSH
29347: LD_STRING 
29349: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29350: LD_INT 1
29352: PPUSH
29353: LD_INT 11
29355: PPUSH
29356: LD_INT 10
29358: PPUSH
29359: CALL_OW 380
// un := CreateHuman ;
29363: LD_ADDR_VAR 0 1
29367: PUSH
29368: CALL_OW 44
29372: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29373: LD_VAR 0 1
29377: PPUSH
29378: LD_INT 1
29380: PPUSH
29381: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29385: LD_INT 35
29387: PPUSH
29388: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29392: LD_VAR 0 1
29396: PPUSH
29397: LD_INT 22
29399: PUSH
29400: LD_OWVAR 2
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: PPUSH
29414: LD_VAR 0 1
29418: PPUSH
29419: CALL_OW 74
29423: PPUSH
29424: CALL_OW 115
// until IsDead ( un ) ;
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 301
29437: IFFALSE 29385
// end ;
29439: PPOPN 1
29441: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29442: LD_EXP 37
29446: PUSH
29447: LD_EXP 77
29451: AND
29452: IFFALSE 29464
29454: GO 29456
29456: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29457: LD_STRING earthquake(getX(game), 0, 32)
29459: PPUSH
29460: CALL_OW 559
29464: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29465: LD_EXP 37
29469: PUSH
29470: LD_EXP 78
29474: AND
29475: IFFALSE 29566
29477: GO 29479
29479: DISABLE
29480: LD_INT 0
29482: PPUSH
// begin enable ;
29483: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29484: LD_ADDR_VAR 0 1
29488: PUSH
29489: LD_INT 22
29491: PUSH
29492: LD_OWVAR 2
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 21
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 33
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: PPUSH
29526: CALL_OW 69
29530: ST_TO_ADDR
// if not tmp then
29531: LD_VAR 0 1
29535: NOT
29536: IFFALSE 29540
// exit ;
29538: GO 29566
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29540: LD_VAR 0 1
29544: PUSH
29545: LD_INT 1
29547: PPUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 12
29557: ARRAY
29558: PPUSH
29559: LD_INT 1
29561: PPUSH
29562: CALL_OW 234
// end ;
29566: PPOPN 1
29568: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29569: LD_EXP 37
29573: PUSH
29574: LD_EXP 79
29578: AND
29579: IFFALSE 29720
29581: GO 29583
29583: DISABLE
29584: LD_INT 0
29586: PPUSH
29587: PPUSH
29588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29589: LD_ADDR_VAR 0 3
29593: PUSH
29594: LD_INT 22
29596: PUSH
29597: LD_OWVAR 2
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 25
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PPUSH
29620: CALL_OW 69
29624: ST_TO_ADDR
// if not tmp then
29625: LD_VAR 0 3
29629: NOT
29630: IFFALSE 29634
// exit ;
29632: GO 29720
// un := tmp [ rand ( 1 , tmp ) ] ;
29634: LD_ADDR_VAR 0 2
29638: PUSH
29639: LD_VAR 0 3
29643: PUSH
29644: LD_INT 1
29646: PPUSH
29647: LD_VAR 0 3
29651: PPUSH
29652: CALL_OW 12
29656: ARRAY
29657: ST_TO_ADDR
// if Crawls ( un ) then
29658: LD_VAR 0 2
29662: PPUSH
29663: CALL_OW 318
29667: IFFALSE 29678
// ComWalk ( un ) ;
29669: LD_VAR 0 2
29673: PPUSH
29674: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29678: LD_VAR 0 2
29682: PPUSH
29683: LD_INT 9
29685: PPUSH
29686: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29690: LD_INT 28
29692: PPUSH
29693: LD_OWVAR 2
29697: PPUSH
29698: LD_INT 2
29700: PPUSH
29701: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29705: LD_INT 29
29707: PPUSH
29708: LD_OWVAR 2
29712: PPUSH
29713: LD_INT 2
29715: PPUSH
29716: CALL_OW 322
// end ;
29720: PPOPN 3
29722: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29723: LD_EXP 37
29727: PUSH
29728: LD_EXP 80
29732: AND
29733: IFFALSE 29844
29735: GO 29737
29737: DISABLE
29738: LD_INT 0
29740: PPUSH
29741: PPUSH
29742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29743: LD_ADDR_VAR 0 3
29747: PUSH
29748: LD_INT 22
29750: PUSH
29751: LD_OWVAR 2
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 25
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PPUSH
29774: CALL_OW 69
29778: ST_TO_ADDR
// if not tmp then
29779: LD_VAR 0 3
29783: NOT
29784: IFFALSE 29788
// exit ;
29786: GO 29844
// un := tmp [ rand ( 1 , tmp ) ] ;
29788: LD_ADDR_VAR 0 2
29792: PUSH
29793: LD_VAR 0 3
29797: PUSH
29798: LD_INT 1
29800: PPUSH
29801: LD_VAR 0 3
29805: PPUSH
29806: CALL_OW 12
29810: ARRAY
29811: ST_TO_ADDR
// if Crawls ( un ) then
29812: LD_VAR 0 2
29816: PPUSH
29817: CALL_OW 318
29821: IFFALSE 29832
// ComWalk ( un ) ;
29823: LD_VAR 0 2
29827: PPUSH
29828: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29832: LD_VAR 0 2
29836: PPUSH
29837: LD_INT 8
29839: PPUSH
29840: CALL_OW 336
// end ;
29844: PPOPN 3
29846: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29847: LD_EXP 37
29851: PUSH
29852: LD_EXP 81
29856: AND
29857: IFFALSE 30001
29859: GO 29861
29861: DISABLE
29862: LD_INT 0
29864: PPUSH
29865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29866: LD_ADDR_VAR 0 2
29870: PUSH
29871: LD_INT 22
29873: PUSH
29874: LD_OWVAR 2
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 21
29885: PUSH
29886: LD_INT 2
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 2
29895: PUSH
29896: LD_INT 34
29898: PUSH
29899: LD_INT 12
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 34
29908: PUSH
29909: LD_INT 51
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 34
29918: PUSH
29919: LD_INT 32
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: LIST
29936: PPUSH
29937: CALL_OW 69
29941: ST_TO_ADDR
// if not tmp then
29942: LD_VAR 0 2
29946: NOT
29947: IFFALSE 29951
// exit ;
29949: GO 30001
// for i in tmp do
29951: LD_ADDR_VAR 0 1
29955: PUSH
29956: LD_VAR 0 2
29960: PUSH
29961: FOR_IN
29962: IFFALSE 29999
// if GetCargo ( i , mat_artifact ) = 0 then
29964: LD_VAR 0 1
29968: PPUSH
29969: LD_INT 4
29971: PPUSH
29972: CALL_OW 289
29976: PUSH
29977: LD_INT 0
29979: EQUAL
29980: IFFALSE 29997
// SetCargo ( i , mat_siberit , 100 ) ;
29982: LD_VAR 0 1
29986: PPUSH
29987: LD_INT 3
29989: PPUSH
29990: LD_INT 100
29992: PPUSH
29993: CALL_OW 290
29997: GO 29961
29999: POP
30000: POP
// end ;
30001: PPOPN 2
30003: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30004: LD_EXP 37
30008: PUSH
30009: LD_EXP 82
30013: AND
30014: IFFALSE 30197
30016: GO 30018
30018: DISABLE
30019: LD_INT 0
30021: PPUSH
30022: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30023: LD_ADDR_VAR 0 2
30027: PUSH
30028: LD_INT 22
30030: PUSH
30031: LD_OWVAR 2
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PPUSH
30040: CALL_OW 69
30044: ST_TO_ADDR
// if not tmp then
30045: LD_VAR 0 2
30049: NOT
30050: IFFALSE 30054
// exit ;
30052: GO 30197
// for i := 1 to 2 do
30054: LD_ADDR_VAR 0 1
30058: PUSH
30059: DOUBLE
30060: LD_INT 1
30062: DEC
30063: ST_TO_ADDR
30064: LD_INT 2
30066: PUSH
30067: FOR_TO
30068: IFFALSE 30195
// begin uc_side := your_side ;
30070: LD_ADDR_OWVAR 20
30074: PUSH
30075: LD_OWVAR 2
30079: ST_TO_ADDR
// uc_nation := nation_american ;
30080: LD_ADDR_OWVAR 21
30084: PUSH
30085: LD_INT 1
30087: ST_TO_ADDR
// vc_chassis := us_morphling ;
30088: LD_ADDR_OWVAR 37
30092: PUSH
30093: LD_INT 5
30095: ST_TO_ADDR
// vc_engine := engine_siberite ;
30096: LD_ADDR_OWVAR 39
30100: PUSH
30101: LD_INT 3
30103: ST_TO_ADDR
// vc_control := control_computer ;
30104: LD_ADDR_OWVAR 38
30108: PUSH
30109: LD_INT 3
30111: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30112: LD_ADDR_OWVAR 40
30116: PUSH
30117: LD_INT 10
30119: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30120: LD_VAR 0 2
30124: PUSH
30125: LD_INT 1
30127: ARRAY
30128: PPUSH
30129: CALL_OW 310
30133: NOT
30134: IFFALSE 30181
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30136: CALL_OW 45
30140: PPUSH
30141: LD_VAR 0 2
30145: PUSH
30146: LD_INT 1
30148: ARRAY
30149: PPUSH
30150: CALL_OW 250
30154: PPUSH
30155: LD_VAR 0 2
30159: PUSH
30160: LD_INT 1
30162: ARRAY
30163: PPUSH
30164: CALL_OW 251
30168: PPUSH
30169: LD_INT 12
30171: PPUSH
30172: LD_INT 1
30174: PPUSH
30175: CALL_OW 50
30179: GO 30193
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30181: CALL_OW 45
30185: PPUSH
30186: LD_INT 1
30188: PPUSH
30189: CALL_OW 51
// end ;
30193: GO 30067
30195: POP
30196: POP
// end ;
30197: PPOPN 2
30199: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30200: LD_EXP 37
30204: PUSH
30205: LD_EXP 83
30209: AND
30210: IFFALSE 30432
30212: GO 30214
30214: DISABLE
30215: LD_INT 0
30217: PPUSH
30218: PPUSH
30219: PPUSH
30220: PPUSH
30221: PPUSH
30222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30223: LD_ADDR_VAR 0 6
30227: PUSH
30228: LD_INT 22
30230: PUSH
30231: LD_OWVAR 2
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 21
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: LD_INT 23
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: PPUSH
30272: CALL_OW 69
30276: ST_TO_ADDR
// if not tmp then
30277: LD_VAR 0 6
30281: NOT
30282: IFFALSE 30286
// exit ;
30284: GO 30432
// s1 := rand ( 1 , 4 ) ;
30286: LD_ADDR_VAR 0 2
30290: PUSH
30291: LD_INT 1
30293: PPUSH
30294: LD_INT 4
30296: PPUSH
30297: CALL_OW 12
30301: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30302: LD_ADDR_VAR 0 4
30306: PUSH
30307: LD_VAR 0 6
30311: PUSH
30312: LD_INT 1
30314: ARRAY
30315: PPUSH
30316: LD_VAR 0 2
30320: PPUSH
30321: CALL_OW 259
30325: ST_TO_ADDR
// if s1 = 1 then
30326: LD_VAR 0 2
30330: PUSH
30331: LD_INT 1
30333: EQUAL
30334: IFFALSE 30354
// s2 := rand ( 2 , 4 ) else
30336: LD_ADDR_VAR 0 3
30340: PUSH
30341: LD_INT 2
30343: PPUSH
30344: LD_INT 4
30346: PPUSH
30347: CALL_OW 12
30351: ST_TO_ADDR
30352: GO 30362
// s2 := 1 ;
30354: LD_ADDR_VAR 0 3
30358: PUSH
30359: LD_INT 1
30361: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30362: LD_ADDR_VAR 0 5
30366: PUSH
30367: LD_VAR 0 6
30371: PUSH
30372: LD_INT 1
30374: ARRAY
30375: PPUSH
30376: LD_VAR 0 3
30380: PPUSH
30381: CALL_OW 259
30385: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30386: LD_VAR 0 6
30390: PUSH
30391: LD_INT 1
30393: ARRAY
30394: PPUSH
30395: LD_VAR 0 2
30399: PPUSH
30400: LD_VAR 0 5
30404: PPUSH
30405: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30409: LD_VAR 0 6
30413: PUSH
30414: LD_INT 1
30416: ARRAY
30417: PPUSH
30418: LD_VAR 0 3
30422: PPUSH
30423: LD_VAR 0 4
30427: PPUSH
30428: CALL_OW 237
// end ;
30432: PPOPN 6
30434: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30435: LD_EXP 37
30439: PUSH
30440: LD_EXP 84
30444: AND
30445: IFFALSE 30524
30447: GO 30449
30449: DISABLE
30450: LD_INT 0
30452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30453: LD_ADDR_VAR 0 1
30457: PUSH
30458: LD_INT 22
30460: PUSH
30461: LD_OWVAR 2
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 30
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PPUSH
30484: CALL_OW 69
30488: ST_TO_ADDR
// if not tmp then
30489: LD_VAR 0 1
30493: NOT
30494: IFFALSE 30498
// exit ;
30496: GO 30524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30498: LD_VAR 0 1
30502: PUSH
30503: LD_INT 1
30505: PPUSH
30506: LD_VAR 0 1
30510: PPUSH
30511: CALL_OW 12
30515: ARRAY
30516: PPUSH
30517: LD_INT 1
30519: PPUSH
30520: CALL_OW 234
// end ;
30524: PPOPN 1
30526: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30527: LD_EXP 37
30531: PUSH
30532: LD_EXP 85
30536: AND
30537: IFFALSE 30649
30539: GO 30541
30541: DISABLE
30542: LD_INT 0
30544: PPUSH
30545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30546: LD_ADDR_VAR 0 2
30550: PUSH
30551: LD_INT 22
30553: PUSH
30554: LD_OWVAR 2
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 2
30565: PUSH
30566: LD_INT 30
30568: PUSH
30569: LD_INT 27
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 30
30578: PUSH
30579: LD_INT 26
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 30
30588: PUSH
30589: LD_INT 28
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 69
30610: ST_TO_ADDR
// if not tmp then
30611: LD_VAR 0 2
30615: NOT
30616: IFFALSE 30620
// exit ;
30618: GO 30649
// for i in tmp do
30620: LD_ADDR_VAR 0 1
30624: PUSH
30625: LD_VAR 0 2
30629: PUSH
30630: FOR_IN
30631: IFFALSE 30647
// SetLives ( i , 1 ) ;
30633: LD_VAR 0 1
30637: PPUSH
30638: LD_INT 1
30640: PPUSH
30641: CALL_OW 234
30645: GO 30630
30647: POP
30648: POP
// end ;
30649: PPOPN 2
30651: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30652: LD_EXP 37
30656: PUSH
30657: LD_EXP 86
30661: AND
30662: IFFALSE 30949
30664: GO 30666
30666: DISABLE
30667: LD_INT 0
30669: PPUSH
30670: PPUSH
30671: PPUSH
// begin i := rand ( 1 , 7 ) ;
30672: LD_ADDR_VAR 0 1
30676: PUSH
30677: LD_INT 1
30679: PPUSH
30680: LD_INT 7
30682: PPUSH
30683: CALL_OW 12
30687: ST_TO_ADDR
// case i of 1 :
30688: LD_VAR 0 1
30692: PUSH
30693: LD_INT 1
30695: DOUBLE
30696: EQUAL
30697: IFTRUE 30701
30699: GO 30711
30701: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30702: LD_STRING earthquake(getX(game), 0, 32)
30704: PPUSH
30705: CALL_OW 559
30709: GO 30949
30711: LD_INT 2
30713: DOUBLE
30714: EQUAL
30715: IFTRUE 30719
30717: GO 30733
30719: POP
// begin ToLua ( displayStucuk(); ) ;
30720: LD_STRING displayStucuk();
30722: PPUSH
30723: CALL_OW 559
// ResetFog ;
30727: CALL_OW 335
// end ; 3 :
30731: GO 30949
30733: LD_INT 3
30735: DOUBLE
30736: EQUAL
30737: IFTRUE 30741
30739: GO 30845
30741: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30742: LD_ADDR_VAR 0 2
30746: PUSH
30747: LD_INT 22
30749: PUSH
30750: LD_OWVAR 2
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 25
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PPUSH
30773: CALL_OW 69
30777: ST_TO_ADDR
// if not tmp then
30778: LD_VAR 0 2
30782: NOT
30783: IFFALSE 30787
// exit ;
30785: GO 30949
// un := tmp [ rand ( 1 , tmp ) ] ;
30787: LD_ADDR_VAR 0 3
30791: PUSH
30792: LD_VAR 0 2
30796: PUSH
30797: LD_INT 1
30799: PPUSH
30800: LD_VAR 0 2
30804: PPUSH
30805: CALL_OW 12
30809: ARRAY
30810: ST_TO_ADDR
// if Crawls ( un ) then
30811: LD_VAR 0 3
30815: PPUSH
30816: CALL_OW 318
30820: IFFALSE 30831
// ComWalk ( un ) ;
30822: LD_VAR 0 3
30826: PPUSH
30827: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30831: LD_VAR 0 3
30835: PPUSH
30836: LD_INT 8
30838: PPUSH
30839: CALL_OW 336
// end ; 4 :
30843: GO 30949
30845: LD_INT 4
30847: DOUBLE
30848: EQUAL
30849: IFTRUE 30853
30851: GO 30927
30853: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30854: LD_ADDR_VAR 0 2
30858: PUSH
30859: LD_INT 22
30861: PUSH
30862: LD_OWVAR 2
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 30
30873: PUSH
30874: LD_INT 29
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PPUSH
30885: CALL_OW 69
30889: ST_TO_ADDR
// if not tmp then
30890: LD_VAR 0 2
30894: NOT
30895: IFFALSE 30899
// exit ;
30897: GO 30949
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30899: LD_VAR 0 2
30903: PUSH
30904: LD_INT 1
30906: ARRAY
30907: PPUSH
30908: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30912: LD_VAR 0 2
30916: PUSH
30917: LD_INT 1
30919: ARRAY
30920: PPUSH
30921: CALL_OW 65
// end ; 5 .. 7 :
30925: GO 30949
30927: LD_INT 5
30929: DOUBLE
30930: GREATEREQUAL
30931: IFFALSE 30939
30933: LD_INT 7
30935: DOUBLE
30936: LESSEQUAL
30937: IFTRUE 30941
30939: GO 30948
30941: POP
// StreamSibBomb ; end ;
30942: CALL 27186 0 0
30946: GO 30949
30948: POP
// end ;
30949: PPOPN 3
30951: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30952: LD_EXP 37
30956: PUSH
30957: LD_EXP 87
30961: AND
30962: IFFALSE 31118
30964: GO 30966
30966: DISABLE
30967: LD_INT 0
30969: PPUSH
30970: PPUSH
30971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30972: LD_ADDR_VAR 0 2
30976: PUSH
30977: LD_INT 81
30979: PUSH
30980: LD_OWVAR 2
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: LD_INT 21
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 21
31004: PUSH
31005: LD_INT 2
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PPUSH
31021: CALL_OW 69
31025: ST_TO_ADDR
// if not tmp then
31026: LD_VAR 0 2
31030: NOT
31031: IFFALSE 31035
// exit ;
31033: GO 31118
// p := 0 ;
31035: LD_ADDR_VAR 0 3
31039: PUSH
31040: LD_INT 0
31042: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31043: LD_INT 35
31045: PPUSH
31046: CALL_OW 67
// p := p + 1 ;
31050: LD_ADDR_VAR 0 3
31054: PUSH
31055: LD_VAR 0 3
31059: PUSH
31060: LD_INT 1
31062: PLUS
31063: ST_TO_ADDR
// for i in tmp do
31064: LD_ADDR_VAR 0 1
31068: PUSH
31069: LD_VAR 0 2
31073: PUSH
31074: FOR_IN
31075: IFFALSE 31106
// if GetLives ( i ) < 1000 then
31077: LD_VAR 0 1
31081: PPUSH
31082: CALL_OW 256
31086: PUSH
31087: LD_INT 1000
31089: LESS
31090: IFFALSE 31104
// SetLives ( i , 1000 ) ;
31092: LD_VAR 0 1
31096: PPUSH
31097: LD_INT 1000
31099: PPUSH
31100: CALL_OW 234
31104: GO 31074
31106: POP
31107: POP
// until p > 20 ;
31108: LD_VAR 0 3
31112: PUSH
31113: LD_INT 20
31115: GREATER
31116: IFFALSE 31043
// end ;
31118: PPOPN 3
31120: END
// every 0 0$1 trigger StreamModeActive and sTime do
31121: LD_EXP 37
31125: PUSH
31126: LD_EXP 88
31130: AND
31131: IFFALSE 31166
31133: GO 31135
31135: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31136: LD_INT 28
31138: PPUSH
31139: LD_OWVAR 2
31143: PPUSH
31144: LD_INT 2
31146: PPUSH
31147: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31151: LD_INT 30
31153: PPUSH
31154: LD_OWVAR 2
31158: PPUSH
31159: LD_INT 2
31161: PPUSH
31162: CALL_OW 322
// end ;
31166: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31167: LD_EXP 37
31171: PUSH
31172: LD_EXP 89
31176: AND
31177: IFFALSE 31298
31179: GO 31181
31181: DISABLE
31182: LD_INT 0
31184: PPUSH
31185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31186: LD_ADDR_VAR 0 2
31190: PUSH
31191: LD_INT 22
31193: PUSH
31194: LD_OWVAR 2
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 21
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 3
31215: PUSH
31216: LD_INT 23
31218: PUSH
31219: LD_INT 0
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: PPUSH
31235: CALL_OW 69
31239: ST_TO_ADDR
// if not tmp then
31240: LD_VAR 0 2
31244: NOT
31245: IFFALSE 31249
// exit ;
31247: GO 31298
// for i in tmp do
31249: LD_ADDR_VAR 0 1
31253: PUSH
31254: LD_VAR 0 2
31258: PUSH
31259: FOR_IN
31260: IFFALSE 31296
// begin if Crawls ( i ) then
31262: LD_VAR 0 1
31266: PPUSH
31267: CALL_OW 318
31271: IFFALSE 31282
// ComWalk ( i ) ;
31273: LD_VAR 0 1
31277: PPUSH
31278: CALL_OW 138
// SetClass ( i , 2 ) ;
31282: LD_VAR 0 1
31286: PPUSH
31287: LD_INT 2
31289: PPUSH
31290: CALL_OW 336
// end ;
31294: GO 31259
31296: POP
31297: POP
// end ;
31298: PPOPN 2
31300: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31301: LD_EXP 37
31305: PUSH
31306: LD_EXP 90
31310: AND
31311: IFFALSE 31599
31313: GO 31315
31315: DISABLE
31316: LD_INT 0
31318: PPUSH
31319: PPUSH
31320: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31321: LD_OWVAR 2
31325: PPUSH
31326: LD_INT 9
31328: PPUSH
31329: LD_INT 1
31331: PPUSH
31332: LD_INT 1
31334: PPUSH
31335: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31339: LD_INT 9
31341: PPUSH
31342: LD_OWVAR 2
31346: PPUSH
31347: CALL_OW 343
// uc_side := 9 ;
31351: LD_ADDR_OWVAR 20
31355: PUSH
31356: LD_INT 9
31358: ST_TO_ADDR
// uc_nation := 2 ;
31359: LD_ADDR_OWVAR 21
31363: PUSH
31364: LD_INT 2
31366: ST_TO_ADDR
// hc_name := Dark Warrior ;
31367: LD_ADDR_OWVAR 26
31371: PUSH
31372: LD_STRING Dark Warrior
31374: ST_TO_ADDR
// hc_gallery :=  ;
31375: LD_ADDR_OWVAR 33
31379: PUSH
31380: LD_STRING 
31382: ST_TO_ADDR
// hc_noskilllimit := true ;
31383: LD_ADDR_OWVAR 76
31387: PUSH
31388: LD_INT 1
31390: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31391: LD_ADDR_OWVAR 31
31395: PUSH
31396: LD_INT 30
31398: PUSH
31399: LD_INT 30
31401: PUSH
31402: LD_INT 30
31404: PUSH
31405: LD_INT 30
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: ST_TO_ADDR
// un := CreateHuman ;
31414: LD_ADDR_VAR 0 3
31418: PUSH
31419: CALL_OW 44
31423: ST_TO_ADDR
// hc_noskilllimit := false ;
31424: LD_ADDR_OWVAR 76
31428: PUSH
31429: LD_INT 0
31431: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31432: LD_VAR 0 3
31436: PPUSH
31437: LD_INT 1
31439: PPUSH
31440: CALL_OW 51
// ToLua ( playRanger() ) ;
31444: LD_STRING playRanger()
31446: PPUSH
31447: CALL_OW 559
// p := 0 ;
31451: LD_ADDR_VAR 0 2
31455: PUSH
31456: LD_INT 0
31458: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31459: LD_INT 35
31461: PPUSH
31462: CALL_OW 67
// p := p + 1 ;
31466: LD_ADDR_VAR 0 2
31470: PUSH
31471: LD_VAR 0 2
31475: PUSH
31476: LD_INT 1
31478: PLUS
31479: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31480: LD_VAR 0 3
31484: PPUSH
31485: CALL_OW 256
31489: PUSH
31490: LD_INT 1000
31492: LESS
31493: IFFALSE 31507
// SetLives ( un , 1000 ) ;
31495: LD_VAR 0 3
31499: PPUSH
31500: LD_INT 1000
31502: PPUSH
31503: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31507: LD_VAR 0 3
31511: PPUSH
31512: LD_INT 81
31514: PUSH
31515: LD_OWVAR 2
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 91
31526: PUSH
31527: LD_VAR 0 3
31531: PUSH
31532: LD_INT 30
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: LIST
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PPUSH
31544: CALL_OW 69
31548: PPUSH
31549: LD_VAR 0 3
31553: PPUSH
31554: CALL_OW 74
31558: PPUSH
31559: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31563: LD_VAR 0 2
31567: PUSH
31568: LD_INT 80
31570: GREATER
31571: PUSH
31572: LD_VAR 0 3
31576: PPUSH
31577: CALL_OW 301
31581: OR
31582: IFFALSE 31459
// if un then
31584: LD_VAR 0 3
31588: IFFALSE 31599
// RemoveUnit ( un ) ;
31590: LD_VAR 0 3
31594: PPUSH
31595: CALL_OW 64
// end ;
31599: PPOPN 3
31601: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31602: LD_EXP 91
31606: IFFALSE 31722
31608: GO 31610
31610: DISABLE
31611: LD_INT 0
31613: PPUSH
31614: PPUSH
31615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31616: LD_ADDR_VAR 0 2
31620: PUSH
31621: LD_INT 81
31623: PUSH
31624: LD_OWVAR 2
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 21
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PPUSH
31647: CALL_OW 69
31651: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31652: LD_STRING playComputer()
31654: PPUSH
31655: CALL_OW 559
// if not tmp then
31659: LD_VAR 0 2
31663: NOT
31664: IFFALSE 31668
// exit ;
31666: GO 31722
// for i in tmp do
31668: LD_ADDR_VAR 0 1
31672: PUSH
31673: LD_VAR 0 2
31677: PUSH
31678: FOR_IN
31679: IFFALSE 31720
// for j := 1 to 4 do
31681: LD_ADDR_VAR 0 3
31685: PUSH
31686: DOUBLE
31687: LD_INT 1
31689: DEC
31690: ST_TO_ADDR
31691: LD_INT 4
31693: PUSH
31694: FOR_TO
31695: IFFALSE 31716
// SetSkill ( i , j , 10 ) ;
31697: LD_VAR 0 1
31701: PPUSH
31702: LD_VAR 0 3
31706: PPUSH
31707: LD_INT 10
31709: PPUSH
31710: CALL_OW 237
31714: GO 31694
31716: POP
31717: POP
31718: GO 31678
31720: POP
31721: POP
// end ;
31722: PPOPN 3
31724: END
// every 0 0$1 trigger s30 do var i , tmp ;
31725: LD_EXP 92
31729: IFFALSE 31798
31731: GO 31733
31733: DISABLE
31734: LD_INT 0
31736: PPUSH
31737: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31738: LD_ADDR_VAR 0 2
31742: PUSH
31743: LD_INT 22
31745: PUSH
31746: LD_OWVAR 2
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PPUSH
31755: CALL_OW 69
31759: ST_TO_ADDR
// if not tmp then
31760: LD_VAR 0 2
31764: NOT
31765: IFFALSE 31769
// exit ;
31767: GO 31798
// for i in tmp do
31769: LD_ADDR_VAR 0 1
31773: PUSH
31774: LD_VAR 0 2
31778: PUSH
31779: FOR_IN
31780: IFFALSE 31796
// SetLives ( i , 300 ) ;
31782: LD_VAR 0 1
31786: PPUSH
31787: LD_INT 300
31789: PPUSH
31790: CALL_OW 234
31794: GO 31779
31796: POP
31797: POP
// end ;
31798: PPOPN 2
31800: END
// every 0 0$1 trigger s60 do var i , tmp ;
31801: LD_EXP 93
31805: IFFALSE 31874
31807: GO 31809
31809: DISABLE
31810: LD_INT 0
31812: PPUSH
31813: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31814: LD_ADDR_VAR 0 2
31818: PUSH
31819: LD_INT 22
31821: PUSH
31822: LD_OWVAR 2
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PPUSH
31831: CALL_OW 69
31835: ST_TO_ADDR
// if not tmp then
31836: LD_VAR 0 2
31840: NOT
31841: IFFALSE 31845
// exit ;
31843: GO 31874
// for i in tmp do
31845: LD_ADDR_VAR 0 1
31849: PUSH
31850: LD_VAR 0 2
31854: PUSH
31855: FOR_IN
31856: IFFALSE 31872
// SetLives ( i , 600 ) ;
31858: LD_VAR 0 1
31862: PPUSH
31863: LD_INT 600
31865: PPUSH
31866: CALL_OW 234
31870: GO 31855
31872: POP
31873: POP
// end ;
31874: PPOPN 2
31876: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31877: LD_INT 0
31879: PPUSH
// case cmd of 301 :
31880: LD_VAR 0 1
31884: PUSH
31885: LD_INT 301
31887: DOUBLE
31888: EQUAL
31889: IFTRUE 31893
31891: GO 31925
31893: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31894: LD_VAR 0 6
31898: PPUSH
31899: LD_VAR 0 7
31903: PPUSH
31904: LD_VAR 0 8
31908: PPUSH
31909: LD_VAR 0 4
31913: PPUSH
31914: LD_VAR 0 5
31918: PPUSH
31919: CALL 33126 0 5
31923: GO 32046
31925: LD_INT 302
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31970
31933: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31934: LD_VAR 0 6
31938: PPUSH
31939: LD_VAR 0 7
31943: PPUSH
31944: LD_VAR 0 8
31948: PPUSH
31949: LD_VAR 0 9
31953: PPUSH
31954: LD_VAR 0 4
31958: PPUSH
31959: LD_VAR 0 5
31963: PPUSH
31964: CALL 33217 0 6
31968: GO 32046
31970: LD_INT 303
31972: DOUBLE
31973: EQUAL
31974: IFTRUE 31978
31976: GO 32015
31978: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31979: LD_VAR 0 6
31983: PPUSH
31984: LD_VAR 0 7
31988: PPUSH
31989: LD_VAR 0 8
31993: PPUSH
31994: LD_VAR 0 9
31998: PPUSH
31999: LD_VAR 0 4
32003: PPUSH
32004: LD_VAR 0 5
32008: PPUSH
32009: CALL 32051 0 6
32013: GO 32046
32015: LD_INT 304
32017: DOUBLE
32018: EQUAL
32019: IFTRUE 32023
32021: GO 32045
32023: POP
// hHackTeleport ( unit , x , y ) ; end ;
32024: LD_VAR 0 2
32028: PPUSH
32029: LD_VAR 0 4
32033: PPUSH
32034: LD_VAR 0 5
32038: PPUSH
32039: CALL 33810 0 3
32043: GO 32046
32045: POP
// end ;
32046: LD_VAR 0 12
32050: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32051: LD_INT 0
32053: PPUSH
32054: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32055: LD_VAR 0 1
32059: PUSH
32060: LD_INT 1
32062: LESS
32063: PUSH
32064: LD_VAR 0 1
32068: PUSH
32069: LD_INT 3
32071: GREATER
32072: OR
32073: PUSH
32074: LD_VAR 0 5
32078: PPUSH
32079: LD_VAR 0 6
32083: PPUSH
32084: CALL_OW 428
32088: OR
32089: IFFALSE 32093
// exit ;
32091: GO 32813
// uc_side := your_side ;
32093: LD_ADDR_OWVAR 20
32097: PUSH
32098: LD_OWVAR 2
32102: ST_TO_ADDR
// uc_nation := nation ;
32103: LD_ADDR_OWVAR 21
32107: PUSH
32108: LD_VAR 0 1
32112: ST_TO_ADDR
// bc_level = 1 ;
32113: LD_ADDR_OWVAR 43
32117: PUSH
32118: LD_INT 1
32120: ST_TO_ADDR
// case btype of 1 :
32121: LD_VAR 0 2
32125: PUSH
32126: LD_INT 1
32128: DOUBLE
32129: EQUAL
32130: IFTRUE 32134
32132: GO 32145
32134: POP
// bc_type := b_depot ; 2 :
32135: LD_ADDR_OWVAR 42
32139: PUSH
32140: LD_INT 0
32142: ST_TO_ADDR
32143: GO 32757
32145: LD_INT 2
32147: DOUBLE
32148: EQUAL
32149: IFTRUE 32153
32151: GO 32164
32153: POP
// bc_type := b_warehouse ; 3 :
32154: LD_ADDR_OWVAR 42
32158: PUSH
32159: LD_INT 1
32161: ST_TO_ADDR
32162: GO 32757
32164: LD_INT 3
32166: DOUBLE
32167: EQUAL
32168: IFTRUE 32172
32170: GO 32183
32172: POP
// bc_type := b_lab ; 4 .. 9 :
32173: LD_ADDR_OWVAR 42
32177: PUSH
32178: LD_INT 6
32180: ST_TO_ADDR
32181: GO 32757
32183: LD_INT 4
32185: DOUBLE
32186: GREATEREQUAL
32187: IFFALSE 32195
32189: LD_INT 9
32191: DOUBLE
32192: LESSEQUAL
32193: IFTRUE 32197
32195: GO 32249
32197: POP
// begin bc_type := b_lab_half ;
32198: LD_ADDR_OWVAR 42
32202: PUSH
32203: LD_INT 7
32205: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32206: LD_ADDR_OWVAR 44
32210: PUSH
32211: LD_INT 10
32213: PUSH
32214: LD_INT 11
32216: PUSH
32217: LD_INT 12
32219: PUSH
32220: LD_INT 15
32222: PUSH
32223: LD_INT 14
32225: PUSH
32226: LD_INT 13
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: PUSH
32237: LD_VAR 0 2
32241: PUSH
32242: LD_INT 3
32244: MINUS
32245: ARRAY
32246: ST_TO_ADDR
// end ; 10 .. 13 :
32247: GO 32757
32249: LD_INT 10
32251: DOUBLE
32252: GREATEREQUAL
32253: IFFALSE 32261
32255: LD_INT 13
32257: DOUBLE
32258: LESSEQUAL
32259: IFTRUE 32263
32261: GO 32340
32263: POP
// begin bc_type := b_lab_full ;
32264: LD_ADDR_OWVAR 42
32268: PUSH
32269: LD_INT 8
32271: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32272: LD_ADDR_OWVAR 44
32276: PUSH
32277: LD_INT 10
32279: PUSH
32280: LD_INT 12
32282: PUSH
32283: LD_INT 14
32285: PUSH
32286: LD_INT 13
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: PUSH
32295: LD_VAR 0 2
32299: PUSH
32300: LD_INT 9
32302: MINUS
32303: ARRAY
32304: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32305: LD_ADDR_OWVAR 45
32309: PUSH
32310: LD_INT 11
32312: PUSH
32313: LD_INT 15
32315: PUSH
32316: LD_INT 12
32318: PUSH
32319: LD_INT 15
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: PUSH
32328: LD_VAR 0 2
32332: PUSH
32333: LD_INT 9
32335: MINUS
32336: ARRAY
32337: ST_TO_ADDR
// end ; 14 :
32338: GO 32757
32340: LD_INT 14
32342: DOUBLE
32343: EQUAL
32344: IFTRUE 32348
32346: GO 32359
32348: POP
// bc_type := b_workshop ; 15 :
32349: LD_ADDR_OWVAR 42
32353: PUSH
32354: LD_INT 2
32356: ST_TO_ADDR
32357: GO 32757
32359: LD_INT 15
32361: DOUBLE
32362: EQUAL
32363: IFTRUE 32367
32365: GO 32378
32367: POP
// bc_type := b_factory ; 16 :
32368: LD_ADDR_OWVAR 42
32372: PUSH
32373: LD_INT 3
32375: ST_TO_ADDR
32376: GO 32757
32378: LD_INT 16
32380: DOUBLE
32381: EQUAL
32382: IFTRUE 32386
32384: GO 32397
32386: POP
// bc_type := b_ext_gun ; 17 :
32387: LD_ADDR_OWVAR 42
32391: PUSH
32392: LD_INT 17
32394: ST_TO_ADDR
32395: GO 32757
32397: LD_INT 17
32399: DOUBLE
32400: EQUAL
32401: IFTRUE 32405
32403: GO 32433
32405: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32406: LD_ADDR_OWVAR 42
32410: PUSH
32411: LD_INT 19
32413: PUSH
32414: LD_INT 23
32416: PUSH
32417: LD_INT 19
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: PUSH
32425: LD_VAR 0 1
32429: ARRAY
32430: ST_TO_ADDR
32431: GO 32757
32433: LD_INT 18
32435: DOUBLE
32436: EQUAL
32437: IFTRUE 32441
32439: GO 32452
32441: POP
// bc_type := b_ext_radar ; 19 :
32442: LD_ADDR_OWVAR 42
32446: PUSH
32447: LD_INT 20
32449: ST_TO_ADDR
32450: GO 32757
32452: LD_INT 19
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32460
32458: GO 32471
32460: POP
// bc_type := b_ext_radio ; 20 :
32461: LD_ADDR_OWVAR 42
32465: PUSH
32466: LD_INT 22
32468: ST_TO_ADDR
32469: GO 32757
32471: LD_INT 20
32473: DOUBLE
32474: EQUAL
32475: IFTRUE 32479
32477: GO 32490
32479: POP
// bc_type := b_ext_siberium ; 21 :
32480: LD_ADDR_OWVAR 42
32484: PUSH
32485: LD_INT 21
32487: ST_TO_ADDR
32488: GO 32757
32490: LD_INT 21
32492: DOUBLE
32493: EQUAL
32494: IFTRUE 32498
32496: GO 32509
32498: POP
// bc_type := b_ext_computer ; 22 :
32499: LD_ADDR_OWVAR 42
32503: PUSH
32504: LD_INT 24
32506: ST_TO_ADDR
32507: GO 32757
32509: LD_INT 22
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 32528
32517: POP
// bc_type := b_ext_track ; 23 :
32518: LD_ADDR_OWVAR 42
32522: PUSH
32523: LD_INT 16
32525: ST_TO_ADDR
32526: GO 32757
32528: LD_INT 23
32530: DOUBLE
32531: EQUAL
32532: IFTRUE 32536
32534: GO 32547
32536: POP
// bc_type := b_ext_laser ; 24 :
32537: LD_ADDR_OWVAR 42
32541: PUSH
32542: LD_INT 25
32544: ST_TO_ADDR
32545: GO 32757
32547: LD_INT 24
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32555
32553: GO 32566
32555: POP
// bc_type := b_control_tower ; 25 :
32556: LD_ADDR_OWVAR 42
32560: PUSH
32561: LD_INT 36
32563: ST_TO_ADDR
32564: GO 32757
32566: LD_INT 25
32568: DOUBLE
32569: EQUAL
32570: IFTRUE 32574
32572: GO 32585
32574: POP
// bc_type := b_breastwork ; 26 :
32575: LD_ADDR_OWVAR 42
32579: PUSH
32580: LD_INT 31
32582: ST_TO_ADDR
32583: GO 32757
32585: LD_INT 26
32587: DOUBLE
32588: EQUAL
32589: IFTRUE 32593
32591: GO 32604
32593: POP
// bc_type := b_bunker ; 27 :
32594: LD_ADDR_OWVAR 42
32598: PUSH
32599: LD_INT 32
32601: ST_TO_ADDR
32602: GO 32757
32604: LD_INT 27
32606: DOUBLE
32607: EQUAL
32608: IFTRUE 32612
32610: GO 32623
32612: POP
// bc_type := b_turret ; 28 :
32613: LD_ADDR_OWVAR 42
32617: PUSH
32618: LD_INT 33
32620: ST_TO_ADDR
32621: GO 32757
32623: LD_INT 28
32625: DOUBLE
32626: EQUAL
32627: IFTRUE 32631
32629: GO 32642
32631: POP
// bc_type := b_armoury ; 29 :
32632: LD_ADDR_OWVAR 42
32636: PUSH
32637: LD_INT 4
32639: ST_TO_ADDR
32640: GO 32757
32642: LD_INT 29
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32650
32648: GO 32661
32650: POP
// bc_type := b_barracks ; 30 :
32651: LD_ADDR_OWVAR 42
32655: PUSH
32656: LD_INT 5
32658: ST_TO_ADDR
32659: GO 32757
32661: LD_INT 30
32663: DOUBLE
32664: EQUAL
32665: IFTRUE 32669
32667: GO 32680
32669: POP
// bc_type := b_solar_power ; 31 :
32670: LD_ADDR_OWVAR 42
32674: PUSH
32675: LD_INT 27
32677: ST_TO_ADDR
32678: GO 32757
32680: LD_INT 31
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32699
32688: POP
// bc_type := b_oil_power ; 32 :
32689: LD_ADDR_OWVAR 42
32693: PUSH
32694: LD_INT 26
32696: ST_TO_ADDR
32697: GO 32757
32699: LD_INT 32
32701: DOUBLE
32702: EQUAL
32703: IFTRUE 32707
32705: GO 32718
32707: POP
// bc_type := b_siberite_power ; 33 :
32708: LD_ADDR_OWVAR 42
32712: PUSH
32713: LD_INT 28
32715: ST_TO_ADDR
32716: GO 32757
32718: LD_INT 33
32720: DOUBLE
32721: EQUAL
32722: IFTRUE 32726
32724: GO 32737
32726: POP
// bc_type := b_oil_mine ; 34 :
32727: LD_ADDR_OWVAR 42
32731: PUSH
32732: LD_INT 29
32734: ST_TO_ADDR
32735: GO 32757
32737: LD_INT 34
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32745
32743: GO 32756
32745: POP
// bc_type := b_siberite_mine ; end ;
32746: LD_ADDR_OWVAR 42
32750: PUSH
32751: LD_INT 30
32753: ST_TO_ADDR
32754: GO 32757
32756: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32757: LD_ADDR_VAR 0 8
32761: PUSH
32762: LD_VAR 0 5
32766: PPUSH
32767: LD_VAR 0 6
32771: PPUSH
32772: LD_VAR 0 3
32776: PPUSH
32777: CALL_OW 47
32781: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32782: LD_OWVAR 42
32786: PUSH
32787: LD_INT 32
32789: PUSH
32790: LD_INT 33
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: IN
32797: IFFALSE 32813
// PlaceWeaponTurret ( b , weapon ) ;
32799: LD_VAR 0 8
32803: PPUSH
32804: LD_VAR 0 4
32808: PPUSH
32809: CALL_OW 431
// end ;
32813: LD_VAR 0 7
32817: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32818: LD_INT 0
32820: PPUSH
32821: PPUSH
32822: PPUSH
32823: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32824: LD_ADDR_VAR 0 4
32828: PUSH
32829: LD_INT 22
32831: PUSH
32832: LD_OWVAR 2
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: LD_INT 30
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 30
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: LIST
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PPUSH
32873: CALL_OW 69
32877: ST_TO_ADDR
// if not tmp then
32878: LD_VAR 0 4
32882: NOT
32883: IFFALSE 32887
// exit ;
32885: GO 32946
// for i in tmp do
32887: LD_ADDR_VAR 0 2
32891: PUSH
32892: LD_VAR 0 4
32896: PUSH
32897: FOR_IN
32898: IFFALSE 32944
// for j = 1 to 3 do
32900: LD_ADDR_VAR 0 3
32904: PUSH
32905: DOUBLE
32906: LD_INT 1
32908: DEC
32909: ST_TO_ADDR
32910: LD_INT 3
32912: PUSH
32913: FOR_TO
32914: IFFALSE 32940
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32916: LD_VAR 0 2
32920: PPUSH
32921: CALL_OW 274
32925: PPUSH
32926: LD_VAR 0 3
32930: PPUSH
32931: LD_INT 99999
32933: PPUSH
32934: CALL_OW 277
32938: GO 32913
32940: POP
32941: POP
32942: GO 32897
32944: POP
32945: POP
// end ;
32946: LD_VAR 0 1
32950: RET
// export function hHackSetLevel10 ; var i , j ; begin
32951: LD_INT 0
32953: PPUSH
32954: PPUSH
32955: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32956: LD_ADDR_VAR 0 2
32960: PUSH
32961: LD_INT 21
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PPUSH
32971: CALL_OW 69
32975: PUSH
32976: FOR_IN
32977: IFFALSE 33029
// if IsSelected ( i ) then
32979: LD_VAR 0 2
32983: PPUSH
32984: CALL_OW 306
32988: IFFALSE 33027
// begin for j := 1 to 4 do
32990: LD_ADDR_VAR 0 3
32994: PUSH
32995: DOUBLE
32996: LD_INT 1
32998: DEC
32999: ST_TO_ADDR
33000: LD_INT 4
33002: PUSH
33003: FOR_TO
33004: IFFALSE 33025
// SetSkill ( i , j , 10 ) ;
33006: LD_VAR 0 2
33010: PPUSH
33011: LD_VAR 0 3
33015: PPUSH
33016: LD_INT 10
33018: PPUSH
33019: CALL_OW 237
33023: GO 33003
33025: POP
33026: POP
// end ;
33027: GO 32976
33029: POP
33030: POP
// end ;
33031: LD_VAR 0 1
33035: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33036: LD_INT 0
33038: PPUSH
33039: PPUSH
33040: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33041: LD_ADDR_VAR 0 2
33045: PUSH
33046: LD_INT 22
33048: PUSH
33049: LD_OWVAR 2
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 21
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PPUSH
33072: CALL_OW 69
33076: PUSH
33077: FOR_IN
33078: IFFALSE 33119
// begin for j := 1 to 4 do
33080: LD_ADDR_VAR 0 3
33084: PUSH
33085: DOUBLE
33086: LD_INT 1
33088: DEC
33089: ST_TO_ADDR
33090: LD_INT 4
33092: PUSH
33093: FOR_TO
33094: IFFALSE 33115
// SetSkill ( i , j , 10 ) ;
33096: LD_VAR 0 2
33100: PPUSH
33101: LD_VAR 0 3
33105: PPUSH
33106: LD_INT 10
33108: PPUSH
33109: CALL_OW 237
33113: GO 33093
33115: POP
33116: POP
// end ;
33117: GO 33077
33119: POP
33120: POP
// end ;
33121: LD_VAR 0 1
33125: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33126: LD_INT 0
33128: PPUSH
// uc_side := your_side ;
33129: LD_ADDR_OWVAR 20
33133: PUSH
33134: LD_OWVAR 2
33138: ST_TO_ADDR
// uc_nation := nation ;
33139: LD_ADDR_OWVAR 21
33143: PUSH
33144: LD_VAR 0 1
33148: ST_TO_ADDR
// InitHc ;
33149: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33153: LD_INT 0
33155: PPUSH
33156: LD_VAR 0 2
33160: PPUSH
33161: LD_VAR 0 3
33165: PPUSH
33166: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33170: LD_VAR 0 4
33174: PPUSH
33175: LD_VAR 0 5
33179: PPUSH
33180: CALL_OW 428
33184: PUSH
33185: LD_INT 0
33187: EQUAL
33188: IFFALSE 33212
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33190: CALL_OW 44
33194: PPUSH
33195: LD_VAR 0 4
33199: PPUSH
33200: LD_VAR 0 5
33204: PPUSH
33205: LD_INT 1
33207: PPUSH
33208: CALL_OW 48
// end ;
33212: LD_VAR 0 6
33216: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33217: LD_INT 0
33219: PPUSH
33220: PPUSH
// uc_side := your_side ;
33221: LD_ADDR_OWVAR 20
33225: PUSH
33226: LD_OWVAR 2
33230: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33231: LD_VAR 0 1
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: LD_INT 3
33244: PUSH
33245: LD_INT 4
33247: PUSH
33248: LD_INT 5
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: IN
33258: IFFALSE 33270
// uc_nation := nation_american else
33260: LD_ADDR_OWVAR 21
33264: PUSH
33265: LD_INT 1
33267: ST_TO_ADDR
33268: GO 33313
// if chassis in [ 11 , 12 , 13 , 14 ] then
33270: LD_VAR 0 1
33274: PUSH
33275: LD_INT 11
33277: PUSH
33278: LD_INT 12
33280: PUSH
33281: LD_INT 13
33283: PUSH
33284: LD_INT 14
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: IN
33293: IFFALSE 33305
// uc_nation := nation_arabian else
33295: LD_ADDR_OWVAR 21
33299: PUSH
33300: LD_INT 2
33302: ST_TO_ADDR
33303: GO 33313
// uc_nation := nation_russian ;
33305: LD_ADDR_OWVAR 21
33309: PUSH
33310: LD_INT 3
33312: ST_TO_ADDR
// vc_chassis := chassis ;
33313: LD_ADDR_OWVAR 37
33317: PUSH
33318: LD_VAR 0 1
33322: ST_TO_ADDR
// vc_engine := engine ;
33323: LD_ADDR_OWVAR 39
33327: PUSH
33328: LD_VAR 0 2
33332: ST_TO_ADDR
// vc_control := control ;
33333: LD_ADDR_OWVAR 38
33337: PUSH
33338: LD_VAR 0 3
33342: ST_TO_ADDR
// vc_weapon := weapon ;
33343: LD_ADDR_OWVAR 40
33347: PUSH
33348: LD_VAR 0 4
33352: ST_TO_ADDR
// un := CreateVehicle ;
33353: LD_ADDR_VAR 0 8
33357: PUSH
33358: CALL_OW 45
33362: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33363: LD_VAR 0 8
33367: PPUSH
33368: LD_INT 0
33370: PPUSH
33371: LD_INT 5
33373: PPUSH
33374: CALL_OW 12
33378: PPUSH
33379: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33383: LD_VAR 0 8
33387: PPUSH
33388: LD_VAR 0 5
33392: PPUSH
33393: LD_VAR 0 6
33397: PPUSH
33398: LD_INT 1
33400: PPUSH
33401: CALL_OW 48
// end ;
33405: LD_VAR 0 7
33409: RET
// export hInvincible ; every 1 do
33410: GO 33412
33412: DISABLE
// hInvincible := [ ] ;
33413: LD_ADDR_EXP 94
33417: PUSH
33418: EMPTY
33419: ST_TO_ADDR
33420: END
// every 10 do var i ;
33421: GO 33423
33423: DISABLE
33424: LD_INT 0
33426: PPUSH
// begin enable ;
33427: ENABLE
// if not hInvincible then
33428: LD_EXP 94
33432: NOT
33433: IFFALSE 33437
// exit ;
33435: GO 33481
// for i in hInvincible do
33437: LD_ADDR_VAR 0 1
33441: PUSH
33442: LD_EXP 94
33446: PUSH
33447: FOR_IN
33448: IFFALSE 33479
// if GetLives ( i ) < 1000 then
33450: LD_VAR 0 1
33454: PPUSH
33455: CALL_OW 256
33459: PUSH
33460: LD_INT 1000
33462: LESS
33463: IFFALSE 33477
// SetLives ( i , 1000 ) ;
33465: LD_VAR 0 1
33469: PPUSH
33470: LD_INT 1000
33472: PPUSH
33473: CALL_OW 234
33477: GO 33447
33479: POP
33480: POP
// end ;
33481: PPOPN 1
33483: END
// export function hHackInvincible ; var i ; begin
33484: LD_INT 0
33486: PPUSH
33487: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33488: LD_ADDR_VAR 0 2
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: LD_INT 21
33498: PUSH
33499: LD_INT 1
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 21
33508: PUSH
33509: LD_INT 2
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: LIST
33520: PPUSH
33521: CALL_OW 69
33525: PUSH
33526: FOR_IN
33527: IFFALSE 33588
// if IsSelected ( i ) then
33529: LD_VAR 0 2
33533: PPUSH
33534: CALL_OW 306
33538: IFFALSE 33586
// begin if i in hInvincible then
33540: LD_VAR 0 2
33544: PUSH
33545: LD_EXP 94
33549: IN
33550: IFFALSE 33570
// hInvincible := hInvincible diff i else
33552: LD_ADDR_EXP 94
33556: PUSH
33557: LD_EXP 94
33561: PUSH
33562: LD_VAR 0 2
33566: DIFF
33567: ST_TO_ADDR
33568: GO 33586
// hInvincible := hInvincible union i ;
33570: LD_ADDR_EXP 94
33574: PUSH
33575: LD_EXP 94
33579: PUSH
33580: LD_VAR 0 2
33584: UNION
33585: ST_TO_ADDR
// end ;
33586: GO 33526
33588: POP
33589: POP
// end ;
33590: LD_VAR 0 1
33594: RET
// export function hHackInvisible ; var i , j ; begin
33595: LD_INT 0
33597: PPUSH
33598: PPUSH
33599: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33600: LD_ADDR_VAR 0 2
33604: PUSH
33605: LD_INT 21
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PPUSH
33615: CALL_OW 69
33619: PUSH
33620: FOR_IN
33621: IFFALSE 33645
// if IsSelected ( i ) then
33623: LD_VAR 0 2
33627: PPUSH
33628: CALL_OW 306
33632: IFFALSE 33643
// ComForceInvisible ( i ) ;
33634: LD_VAR 0 2
33638: PPUSH
33639: CALL_OW 496
33643: GO 33620
33645: POP
33646: POP
// end ;
33647: LD_VAR 0 1
33651: RET
// export function hHackChangeYourSide ; begin
33652: LD_INT 0
33654: PPUSH
// if your_side = 8 then
33655: LD_OWVAR 2
33659: PUSH
33660: LD_INT 8
33662: EQUAL
33663: IFFALSE 33675
// your_side := 0 else
33665: LD_ADDR_OWVAR 2
33669: PUSH
33670: LD_INT 0
33672: ST_TO_ADDR
33673: GO 33689
// your_side := your_side + 1 ;
33675: LD_ADDR_OWVAR 2
33679: PUSH
33680: LD_OWVAR 2
33684: PUSH
33685: LD_INT 1
33687: PLUS
33688: ST_TO_ADDR
// end ;
33689: LD_VAR 0 1
33693: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33694: LD_INT 0
33696: PPUSH
33697: PPUSH
33698: PPUSH
// for i in all_units do
33699: LD_ADDR_VAR 0 2
33703: PUSH
33704: LD_OWVAR 3
33708: PUSH
33709: FOR_IN
33710: IFFALSE 33788
// if IsSelected ( i ) then
33712: LD_VAR 0 2
33716: PPUSH
33717: CALL_OW 306
33721: IFFALSE 33786
// begin j := GetSide ( i ) ;
33723: LD_ADDR_VAR 0 3
33727: PUSH
33728: LD_VAR 0 2
33732: PPUSH
33733: CALL_OW 255
33737: ST_TO_ADDR
// if j = 8 then
33738: LD_VAR 0 3
33742: PUSH
33743: LD_INT 8
33745: EQUAL
33746: IFFALSE 33758
// j := 0 else
33748: LD_ADDR_VAR 0 3
33752: PUSH
33753: LD_INT 0
33755: ST_TO_ADDR
33756: GO 33772
// j := j + 1 ;
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: LD_VAR 0 3
33767: PUSH
33768: LD_INT 1
33770: PLUS
33771: ST_TO_ADDR
// SetSide ( i , j ) ;
33772: LD_VAR 0 2
33776: PPUSH
33777: LD_VAR 0 3
33781: PPUSH
33782: CALL_OW 235
// end ;
33786: GO 33709
33788: POP
33789: POP
// end ;
33790: LD_VAR 0 1
33794: RET
// export function hHackFog ; begin
33795: LD_INT 0
33797: PPUSH
// FogOff ( true ) ;
33798: LD_INT 1
33800: PPUSH
33801: CALL_OW 344
// end ;
33805: LD_VAR 0 1
33809: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33810: LD_INT 0
33812: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33813: LD_VAR 0 1
33817: PPUSH
33818: LD_VAR 0 2
33822: PPUSH
33823: LD_VAR 0 3
33827: PPUSH
33828: LD_INT 1
33830: PPUSH
33831: LD_INT 1
33833: PPUSH
33834: CALL_OW 483
// CenterOnXY ( x , y ) ;
33838: LD_VAR 0 2
33842: PPUSH
33843: LD_VAR 0 3
33847: PPUSH
33848: CALL_OW 84
// end ;
33852: LD_VAR 0 4
33856: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33857: LD_INT 0
33859: PPUSH
33860: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33861: LD_VAR 0 1
33865: NOT
33866: PUSH
33867: LD_VAR 0 2
33871: PPUSH
33872: LD_VAR 0 3
33876: PPUSH
33877: CALL_OW 488
33881: NOT
33882: OR
33883: PUSH
33884: LD_VAR 0 1
33888: PPUSH
33889: CALL_OW 266
33893: PUSH
33894: LD_INT 3
33896: NONEQUAL
33897: PUSH
33898: LD_VAR 0 1
33902: PPUSH
33903: CALL_OW 247
33907: PUSH
33908: LD_INT 1
33910: EQUAL
33911: NOT
33912: AND
33913: OR
33914: IFFALSE 33918
// exit ;
33916: GO 34067
// if GetType ( factory ) = unit_human then
33918: LD_VAR 0 1
33922: PPUSH
33923: CALL_OW 247
33927: PUSH
33928: LD_INT 1
33930: EQUAL
33931: IFFALSE 33948
// factory := IsInUnit ( factory ) ;
33933: LD_ADDR_VAR 0 1
33937: PUSH
33938: LD_VAR 0 1
33942: PPUSH
33943: CALL_OW 310
33947: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33948: LD_VAR 0 1
33952: PPUSH
33953: CALL_OW 266
33957: PUSH
33958: LD_INT 3
33960: NONEQUAL
33961: IFFALSE 33965
// exit ;
33963: GO 34067
// if HexInfo ( x , y ) = factory then
33965: LD_VAR 0 2
33969: PPUSH
33970: LD_VAR 0 3
33974: PPUSH
33975: CALL_OW 428
33979: PUSH
33980: LD_VAR 0 1
33984: EQUAL
33985: IFFALSE 34012
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33987: LD_ADDR_EXP 95
33991: PUSH
33992: LD_EXP 95
33996: PPUSH
33997: LD_VAR 0 1
34001: PPUSH
34002: LD_INT 0
34004: PPUSH
34005: CALL_OW 1
34009: ST_TO_ADDR
34010: GO 34063
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34012: LD_ADDR_EXP 95
34016: PUSH
34017: LD_EXP 95
34021: PPUSH
34022: LD_VAR 0 1
34026: PPUSH
34027: LD_VAR 0 1
34031: PPUSH
34032: CALL_OW 255
34036: PUSH
34037: LD_VAR 0 1
34041: PUSH
34042: LD_VAR 0 2
34046: PUSH
34047: LD_VAR 0 3
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: PPUSH
34058: CALL_OW 1
34062: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34063: CALL 34072 0 0
// end ;
34067: LD_VAR 0 4
34071: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34072: LD_INT 0
34074: PPUSH
34075: PPUSH
34076: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34077: LD_STRING resetFactoryWaypoint();
34079: PPUSH
34080: CALL_OW 559
// if factoryWaypoints then
34084: LD_EXP 95
34088: IFFALSE 34214
// begin list := PrepareArray ( factoryWaypoints ) ;
34090: LD_ADDR_VAR 0 3
34094: PUSH
34095: LD_EXP 95
34099: PPUSH
34100: CALL 80664 0 1
34104: ST_TO_ADDR
// for i := 1 to list do
34105: LD_ADDR_VAR 0 2
34109: PUSH
34110: DOUBLE
34111: LD_INT 1
34113: DEC
34114: ST_TO_ADDR
34115: LD_VAR 0 3
34119: PUSH
34120: FOR_TO
34121: IFFALSE 34212
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34123: LD_STRING setFactoryWaypointXY(
34125: PUSH
34126: LD_VAR 0 3
34130: PUSH
34131: LD_VAR 0 2
34135: ARRAY
34136: PUSH
34137: LD_INT 1
34139: ARRAY
34140: STR
34141: PUSH
34142: LD_STRING ,
34144: STR
34145: PUSH
34146: LD_VAR 0 3
34150: PUSH
34151: LD_VAR 0 2
34155: ARRAY
34156: PUSH
34157: LD_INT 2
34159: ARRAY
34160: STR
34161: PUSH
34162: LD_STRING ,
34164: STR
34165: PUSH
34166: LD_VAR 0 3
34170: PUSH
34171: LD_VAR 0 2
34175: ARRAY
34176: PUSH
34177: LD_INT 3
34179: ARRAY
34180: STR
34181: PUSH
34182: LD_STRING ,
34184: STR
34185: PUSH
34186: LD_VAR 0 3
34190: PUSH
34191: LD_VAR 0 2
34195: ARRAY
34196: PUSH
34197: LD_INT 4
34199: ARRAY
34200: STR
34201: PUSH
34202: LD_STRING )
34204: STR
34205: PPUSH
34206: CALL_OW 559
34210: GO 34120
34212: POP
34213: POP
// end ; end ;
34214: LD_VAR 0 1
34218: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34219: LD_INT 0
34221: PPUSH
// if HexInfo ( x , y ) = warehouse then
34222: LD_VAR 0 2
34226: PPUSH
34227: LD_VAR 0 3
34231: PPUSH
34232: CALL_OW 428
34236: PUSH
34237: LD_VAR 0 1
34241: EQUAL
34242: IFFALSE 34269
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34244: LD_ADDR_EXP 96
34248: PUSH
34249: LD_EXP 96
34253: PPUSH
34254: LD_VAR 0 1
34258: PPUSH
34259: LD_INT 0
34261: PPUSH
34262: CALL_OW 1
34266: ST_TO_ADDR
34267: GO 34320
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34269: LD_ADDR_EXP 96
34273: PUSH
34274: LD_EXP 96
34278: PPUSH
34279: LD_VAR 0 1
34283: PPUSH
34284: LD_VAR 0 1
34288: PPUSH
34289: CALL_OW 255
34293: PUSH
34294: LD_VAR 0 1
34298: PUSH
34299: LD_VAR 0 2
34303: PUSH
34304: LD_VAR 0 3
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: PPUSH
34315: CALL_OW 1
34319: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34320: CALL 34329 0 0
// end ;
34324: LD_VAR 0 4
34328: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34329: LD_INT 0
34331: PPUSH
34332: PPUSH
34333: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34334: LD_STRING resetWarehouseGatheringPoints();
34336: PPUSH
34337: CALL_OW 559
// if warehouseGatheringPoints then
34341: LD_EXP 96
34345: IFFALSE 34471
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34347: LD_ADDR_VAR 0 3
34351: PUSH
34352: LD_EXP 96
34356: PPUSH
34357: CALL 80664 0 1
34361: ST_TO_ADDR
// for i := 1 to list do
34362: LD_ADDR_VAR 0 2
34366: PUSH
34367: DOUBLE
34368: LD_INT 1
34370: DEC
34371: ST_TO_ADDR
34372: LD_VAR 0 3
34376: PUSH
34377: FOR_TO
34378: IFFALSE 34469
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34380: LD_STRING setWarehouseGatheringPointXY(
34382: PUSH
34383: LD_VAR 0 3
34387: PUSH
34388: LD_VAR 0 2
34392: ARRAY
34393: PUSH
34394: LD_INT 1
34396: ARRAY
34397: STR
34398: PUSH
34399: LD_STRING ,
34401: STR
34402: PUSH
34403: LD_VAR 0 3
34407: PUSH
34408: LD_VAR 0 2
34412: ARRAY
34413: PUSH
34414: LD_INT 2
34416: ARRAY
34417: STR
34418: PUSH
34419: LD_STRING ,
34421: STR
34422: PUSH
34423: LD_VAR 0 3
34427: PUSH
34428: LD_VAR 0 2
34432: ARRAY
34433: PUSH
34434: LD_INT 3
34436: ARRAY
34437: STR
34438: PUSH
34439: LD_STRING ,
34441: STR
34442: PUSH
34443: LD_VAR 0 3
34447: PUSH
34448: LD_VAR 0 2
34452: ARRAY
34453: PUSH
34454: LD_INT 4
34456: ARRAY
34457: STR
34458: PUSH
34459: LD_STRING )
34461: STR
34462: PPUSH
34463: CALL_OW 559
34467: GO 34377
34469: POP
34470: POP
// end ; end ;
34471: LD_VAR 0 1
34475: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34476: LD_EXP 96
34480: IFFALSE 35165
34482: GO 34484
34484: DISABLE
34485: LD_INT 0
34487: PPUSH
34488: PPUSH
34489: PPUSH
34490: PPUSH
34491: PPUSH
34492: PPUSH
34493: PPUSH
34494: PPUSH
34495: PPUSH
// begin enable ;
34496: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_EXP 96
34506: PPUSH
34507: CALL 80664 0 1
34511: ST_TO_ADDR
// if not list then
34512: LD_VAR 0 3
34516: NOT
34517: IFFALSE 34521
// exit ;
34519: GO 35165
// for i := 1 to list do
34521: LD_ADDR_VAR 0 1
34525: PUSH
34526: DOUBLE
34527: LD_INT 1
34529: DEC
34530: ST_TO_ADDR
34531: LD_VAR 0 3
34535: PUSH
34536: FOR_TO
34537: IFFALSE 35163
// begin depot := list [ i ] [ 2 ] ;
34539: LD_ADDR_VAR 0 8
34543: PUSH
34544: LD_VAR 0 3
34548: PUSH
34549: LD_VAR 0 1
34553: ARRAY
34554: PUSH
34555: LD_INT 2
34557: ARRAY
34558: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34559: LD_ADDR_VAR 0 5
34563: PUSH
34564: LD_VAR 0 3
34568: PUSH
34569: LD_VAR 0 1
34573: ARRAY
34574: PUSH
34575: LD_INT 1
34577: ARRAY
34578: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34579: LD_VAR 0 8
34583: PPUSH
34584: CALL_OW 301
34588: PUSH
34589: LD_VAR 0 5
34593: PUSH
34594: LD_VAR 0 8
34598: PPUSH
34599: CALL_OW 255
34603: NONEQUAL
34604: OR
34605: IFFALSE 34634
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34607: LD_ADDR_EXP 96
34611: PUSH
34612: LD_EXP 96
34616: PPUSH
34617: LD_VAR 0 8
34621: PPUSH
34622: LD_INT 0
34624: PPUSH
34625: CALL_OW 1
34629: ST_TO_ADDR
// exit ;
34630: POP
34631: POP
34632: GO 35165
// end ; x := list [ i ] [ 3 ] ;
34634: LD_ADDR_VAR 0 6
34638: PUSH
34639: LD_VAR 0 3
34643: PUSH
34644: LD_VAR 0 1
34648: ARRAY
34649: PUSH
34650: LD_INT 3
34652: ARRAY
34653: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34654: LD_ADDR_VAR 0 7
34658: PUSH
34659: LD_VAR 0 3
34663: PUSH
34664: LD_VAR 0 1
34668: ARRAY
34669: PUSH
34670: LD_INT 4
34672: ARRAY
34673: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34674: LD_ADDR_VAR 0 9
34678: PUSH
34679: LD_VAR 0 6
34683: PPUSH
34684: LD_VAR 0 7
34688: PPUSH
34689: LD_INT 16
34691: PPUSH
34692: CALL 79252 0 3
34696: ST_TO_ADDR
// if not cratesNearbyPoint then
34697: LD_VAR 0 9
34701: NOT
34702: IFFALSE 34708
// exit ;
34704: POP
34705: POP
34706: GO 35165
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34708: LD_ADDR_VAR 0 4
34712: PUSH
34713: LD_INT 22
34715: PUSH
34716: LD_VAR 0 5
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 3
34727: PUSH
34728: LD_INT 60
34730: PUSH
34731: EMPTY
34732: LIST
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 91
34740: PUSH
34741: LD_VAR 0 8
34745: PUSH
34746: LD_INT 6
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: LD_INT 25
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 25
34769: PUSH
34770: LD_INT 16
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: LIST
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: PPUSH
34788: CALL_OW 69
34792: PUSH
34793: LD_VAR 0 8
34797: PPUSH
34798: CALL_OW 313
34802: PPUSH
34803: LD_INT 3
34805: PUSH
34806: LD_INT 60
34808: PUSH
34809: EMPTY
34810: LIST
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 2
34818: PUSH
34819: LD_INT 25
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 25
34831: PUSH
34832: LD_INT 16
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PPUSH
34848: CALL_OW 72
34852: UNION
34853: ST_TO_ADDR
// if tmp then
34854: LD_VAR 0 4
34858: IFFALSE 34938
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34860: LD_ADDR_VAR 0 4
34864: PUSH
34865: LD_VAR 0 4
34869: PPUSH
34870: LD_INT 3
34872: PPUSH
34873: CALL 77221 0 2
34877: ST_TO_ADDR
// for j in tmp do
34878: LD_ADDR_VAR 0 2
34882: PUSH
34883: LD_VAR 0 4
34887: PUSH
34888: FOR_IN
34889: IFFALSE 34932
// begin if IsInUnit ( j ) then
34891: LD_VAR 0 2
34895: PPUSH
34896: CALL_OW 310
34900: IFFALSE 34911
// ComExit ( j ) ;
34902: LD_VAR 0 2
34906: PPUSH
34907: CALL 77304 0 1
// AddComCollect ( j , x , y ) ;
34911: LD_VAR 0 2
34915: PPUSH
34916: LD_VAR 0 6
34920: PPUSH
34921: LD_VAR 0 7
34925: PPUSH
34926: CALL_OW 177
// end ;
34930: GO 34888
34932: POP
34933: POP
// exit ;
34934: POP
34935: POP
34936: GO 35165
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34938: LD_ADDR_VAR 0 4
34942: PUSH
34943: LD_INT 22
34945: PUSH
34946: LD_VAR 0 5
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 91
34957: PUSH
34958: LD_VAR 0 8
34962: PUSH
34963: LD_INT 8
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 34
34976: PUSH
34977: LD_INT 12
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 34
34986: PUSH
34987: LD_INT 51
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 34
34996: PUSH
34997: LD_INT 32
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 34
35006: PUSH
35007: LD_INT 89
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: PPUSH
35026: CALL_OW 69
35030: ST_TO_ADDR
// if tmp then
35031: LD_VAR 0 4
35035: IFFALSE 35161
// begin for j in tmp do
35037: LD_ADDR_VAR 0 2
35041: PUSH
35042: LD_VAR 0 4
35046: PUSH
35047: FOR_IN
35048: IFFALSE 35159
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35050: LD_VAR 0 2
35054: PPUSH
35055: CALL_OW 262
35059: PUSH
35060: LD_INT 3
35062: EQUAL
35063: PUSH
35064: LD_VAR 0 2
35068: PPUSH
35069: CALL_OW 261
35073: PUSH
35074: LD_INT 20
35076: GREATER
35077: OR
35078: PUSH
35079: LD_VAR 0 2
35083: PPUSH
35084: CALL_OW 314
35088: NOT
35089: AND
35090: PUSH
35091: LD_VAR 0 2
35095: PPUSH
35096: CALL_OW 263
35100: PUSH
35101: LD_INT 1
35103: NONEQUAL
35104: PUSH
35105: LD_VAR 0 2
35109: PPUSH
35110: CALL_OW 311
35114: OR
35115: AND
35116: IFFALSE 35157
// begin ComCollect ( j , x , y ) ;
35118: LD_VAR 0 2
35122: PPUSH
35123: LD_VAR 0 6
35127: PPUSH
35128: LD_VAR 0 7
35132: PPUSH
35133: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35137: LD_VAR 0 2
35141: PPUSH
35142: LD_VAR 0 8
35146: PPUSH
35147: CALL_OW 172
// exit ;
35151: POP
35152: POP
35153: POP
35154: POP
35155: GO 35165
// end ;
35157: GO 35047
35159: POP
35160: POP
// end ; end ;
35161: GO 34536
35163: POP
35164: POP
// end ; end_of_file
35165: PPOPN 9
35167: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35168: LD_INT 0
35170: PPUSH
35171: PPUSH
35172: PPUSH
35173: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35174: LD_VAR 0 1
35178: PPUSH
35179: CALL_OW 264
35183: PUSH
35184: LD_INT 91
35186: EQUAL
35187: IFFALSE 35259
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35189: LD_INT 68
35191: PPUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: CALL_OW 255
35201: PPUSH
35202: CALL_OW 321
35206: PUSH
35207: LD_INT 2
35209: EQUAL
35210: IFFALSE 35222
// eff := 70 else
35212: LD_ADDR_VAR 0 4
35216: PUSH
35217: LD_INT 70
35219: ST_TO_ADDR
35220: GO 35230
// eff := 30 ;
35222: LD_ADDR_VAR 0 4
35226: PUSH
35227: LD_INT 30
35229: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35230: LD_VAR 0 1
35234: PPUSH
35235: CALL_OW 250
35239: PPUSH
35240: LD_VAR 0 1
35244: PPUSH
35245: CALL_OW 251
35249: PPUSH
35250: LD_VAR 0 4
35254: PPUSH
35255: CALL_OW 495
// end ; end ;
35259: LD_VAR 0 2
35263: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35264: LD_INT 0
35266: PPUSH
// end ;
35267: LD_VAR 0 4
35271: RET
// export function SOS_Command ( cmd ) ; begin
35272: LD_INT 0
35274: PPUSH
// end ;
35275: LD_VAR 0 2
35279: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35280: LD_INT 0
35282: PPUSH
// end ;
35283: LD_VAR 0 6
35287: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35288: LD_INT 0
35290: PPUSH
35291: PPUSH
// if not vehicle or not factory then
35292: LD_VAR 0 1
35296: NOT
35297: PUSH
35298: LD_VAR 0 2
35302: NOT
35303: OR
35304: IFFALSE 35308
// exit ;
35306: GO 35539
// if factoryWaypoints >= factory then
35308: LD_EXP 95
35312: PUSH
35313: LD_VAR 0 2
35317: GREATEREQUAL
35318: IFFALSE 35539
// if factoryWaypoints [ factory ] then
35320: LD_EXP 95
35324: PUSH
35325: LD_VAR 0 2
35329: ARRAY
35330: IFFALSE 35539
// begin if GetControl ( vehicle ) = control_manual then
35332: LD_VAR 0 1
35336: PPUSH
35337: CALL_OW 263
35341: PUSH
35342: LD_INT 1
35344: EQUAL
35345: IFFALSE 35426
// begin driver := IsDrivenBy ( vehicle ) ;
35347: LD_ADDR_VAR 0 4
35351: PUSH
35352: LD_VAR 0 1
35356: PPUSH
35357: CALL_OW 311
35361: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35362: LD_VAR 0 4
35366: PPUSH
35367: LD_EXP 95
35371: PUSH
35372: LD_VAR 0 2
35376: ARRAY
35377: PUSH
35378: LD_INT 3
35380: ARRAY
35381: PPUSH
35382: LD_EXP 95
35386: PUSH
35387: LD_VAR 0 2
35391: ARRAY
35392: PUSH
35393: LD_INT 4
35395: ARRAY
35396: PPUSH
35397: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35401: LD_VAR 0 4
35405: PPUSH
35406: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35410: LD_VAR 0 4
35414: PPUSH
35415: LD_VAR 0 2
35419: PPUSH
35420: CALL_OW 180
// end else
35424: GO 35539
// if GetControl ( vehicle ) = control_remote then
35426: LD_VAR 0 1
35430: PPUSH
35431: CALL_OW 263
35435: PUSH
35436: LD_INT 2
35438: EQUAL
35439: IFFALSE 35500
// begin wait ( 0 0$2 ) ;
35441: LD_INT 70
35443: PPUSH
35444: CALL_OW 67
// if Connect ( vehicle ) then
35448: LD_VAR 0 1
35452: PPUSH
35453: CALL 47563 0 1
35457: IFFALSE 35498
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35459: LD_VAR 0 1
35463: PPUSH
35464: LD_EXP 95
35468: PUSH
35469: LD_VAR 0 2
35473: ARRAY
35474: PUSH
35475: LD_INT 3
35477: ARRAY
35478: PPUSH
35479: LD_EXP 95
35483: PUSH
35484: LD_VAR 0 2
35488: ARRAY
35489: PUSH
35490: LD_INT 4
35492: ARRAY
35493: PPUSH
35494: CALL_OW 171
// end else
35498: GO 35539
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35500: LD_VAR 0 1
35504: PPUSH
35505: LD_EXP 95
35509: PUSH
35510: LD_VAR 0 2
35514: ARRAY
35515: PUSH
35516: LD_INT 3
35518: ARRAY
35519: PPUSH
35520: LD_EXP 95
35524: PUSH
35525: LD_VAR 0 2
35529: ARRAY
35530: PUSH
35531: LD_INT 4
35533: ARRAY
35534: PPUSH
35535: CALL_OW 171
// end ; end ;
35539: LD_VAR 0 3
35543: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35544: LD_INT 0
35546: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35547: LD_VAR 0 1
35551: PUSH
35552: LD_INT 250
35554: EQUAL
35555: PUSH
35556: LD_VAR 0 2
35560: PPUSH
35561: CALL_OW 264
35565: PUSH
35566: LD_INT 81
35568: EQUAL
35569: AND
35570: IFFALSE 35591
// MinerPlaceMine ( unit , x , y ) ;
35572: LD_VAR 0 2
35576: PPUSH
35577: LD_VAR 0 4
35581: PPUSH
35582: LD_VAR 0 5
35586: PPUSH
35587: CALL 37976 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35591: LD_VAR 0 1
35595: PUSH
35596: LD_INT 251
35598: EQUAL
35599: PUSH
35600: LD_VAR 0 2
35604: PPUSH
35605: CALL_OW 264
35609: PUSH
35610: LD_INT 81
35612: EQUAL
35613: AND
35614: IFFALSE 35635
// MinerDetonateMine ( unit , x , y ) ;
35616: LD_VAR 0 2
35620: PPUSH
35621: LD_VAR 0 4
35625: PPUSH
35626: LD_VAR 0 5
35630: PPUSH
35631: CALL 38251 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35635: LD_VAR 0 1
35639: PUSH
35640: LD_INT 252
35642: EQUAL
35643: PUSH
35644: LD_VAR 0 2
35648: PPUSH
35649: CALL_OW 264
35653: PUSH
35654: LD_INT 81
35656: EQUAL
35657: AND
35658: IFFALSE 35679
// MinerCreateMinefield ( unit , x , y ) ;
35660: LD_VAR 0 2
35664: PPUSH
35665: LD_VAR 0 4
35669: PPUSH
35670: LD_VAR 0 5
35674: PPUSH
35675: CALL 38668 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35679: LD_VAR 0 1
35683: PUSH
35684: LD_INT 253
35686: EQUAL
35687: PUSH
35688: LD_VAR 0 2
35692: PPUSH
35693: CALL_OW 257
35697: PUSH
35698: LD_INT 5
35700: EQUAL
35701: AND
35702: IFFALSE 35723
// ComBinocular ( unit , x , y ) ;
35704: LD_VAR 0 2
35708: PPUSH
35709: LD_VAR 0 4
35713: PPUSH
35714: LD_VAR 0 5
35718: PPUSH
35719: CALL 39037 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35723: LD_VAR 0 1
35727: PUSH
35728: LD_INT 254
35730: EQUAL
35731: PUSH
35732: LD_VAR 0 2
35736: PPUSH
35737: CALL_OW 264
35741: PUSH
35742: LD_INT 99
35744: EQUAL
35745: AND
35746: PUSH
35747: LD_VAR 0 3
35751: PPUSH
35752: CALL_OW 263
35756: PUSH
35757: LD_INT 3
35759: EQUAL
35760: AND
35761: IFFALSE 35777
// HackDestroyVehicle ( unit , selectedUnit ) ;
35763: LD_VAR 0 2
35767: PPUSH
35768: LD_VAR 0 3
35772: PPUSH
35773: CALL 37340 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35777: LD_VAR 0 1
35781: PUSH
35782: LD_INT 255
35784: EQUAL
35785: PUSH
35786: LD_VAR 0 2
35790: PPUSH
35791: CALL_OW 264
35795: PUSH
35796: LD_INT 14
35798: PUSH
35799: LD_INT 53
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: IN
35806: AND
35807: PUSH
35808: LD_VAR 0 4
35812: PPUSH
35813: LD_VAR 0 5
35817: PPUSH
35818: CALL_OW 488
35822: AND
35823: IFFALSE 35847
// CutTreeXYR ( unit , x , y , 12 ) ;
35825: LD_VAR 0 2
35829: PPUSH
35830: LD_VAR 0 4
35834: PPUSH
35835: LD_VAR 0 5
35839: PPUSH
35840: LD_INT 12
35842: PPUSH
35843: CALL 35910 0 4
// if cmd = 256 then
35847: LD_VAR 0 1
35851: PUSH
35852: LD_INT 256
35854: EQUAL
35855: IFFALSE 35876
// SetFactoryWaypoint ( unit , x , y ) ;
35857: LD_VAR 0 2
35861: PPUSH
35862: LD_VAR 0 4
35866: PPUSH
35867: LD_VAR 0 5
35871: PPUSH
35872: CALL 33857 0 3
// if cmd = 257 then
35876: LD_VAR 0 1
35880: PUSH
35881: LD_INT 257
35883: EQUAL
35884: IFFALSE 35905
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35886: LD_VAR 0 2
35890: PPUSH
35891: LD_VAR 0 4
35895: PPUSH
35896: LD_VAR 0 5
35900: PPUSH
35901: CALL 34219 0 3
// end ;
35905: LD_VAR 0 6
35909: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35910: LD_INT 0
35912: PPUSH
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
35917: PPUSH
35918: PPUSH
35919: PPUSH
35920: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35921: LD_VAR 0 1
35925: NOT
35926: PUSH
35927: LD_VAR 0 2
35931: PPUSH
35932: LD_VAR 0 3
35936: PPUSH
35937: CALL_OW 488
35941: NOT
35942: OR
35943: PUSH
35944: LD_VAR 0 4
35948: NOT
35949: OR
35950: IFFALSE 35954
// exit ;
35952: GO 36294
// list := [ ] ;
35954: LD_ADDR_VAR 0 13
35958: PUSH
35959: EMPTY
35960: ST_TO_ADDR
// if x - r < 0 then
35961: LD_VAR 0 2
35965: PUSH
35966: LD_VAR 0 4
35970: MINUS
35971: PUSH
35972: LD_INT 0
35974: LESS
35975: IFFALSE 35987
// min_x := 0 else
35977: LD_ADDR_VAR 0 7
35981: PUSH
35982: LD_INT 0
35984: ST_TO_ADDR
35985: GO 36003
// min_x := x - r ;
35987: LD_ADDR_VAR 0 7
35991: PUSH
35992: LD_VAR 0 2
35996: PUSH
35997: LD_VAR 0 4
36001: MINUS
36002: ST_TO_ADDR
// if y - r < 0 then
36003: LD_VAR 0 3
36007: PUSH
36008: LD_VAR 0 4
36012: MINUS
36013: PUSH
36014: LD_INT 0
36016: LESS
36017: IFFALSE 36029
// min_y := 0 else
36019: LD_ADDR_VAR 0 8
36023: PUSH
36024: LD_INT 0
36026: ST_TO_ADDR
36027: GO 36045
// min_y := y - r ;
36029: LD_ADDR_VAR 0 8
36033: PUSH
36034: LD_VAR 0 3
36038: PUSH
36039: LD_VAR 0 4
36043: MINUS
36044: ST_TO_ADDR
// max_x := x + r ;
36045: LD_ADDR_VAR 0 9
36049: PUSH
36050: LD_VAR 0 2
36054: PUSH
36055: LD_VAR 0 4
36059: PLUS
36060: ST_TO_ADDR
// max_y := y + r ;
36061: LD_ADDR_VAR 0 10
36065: PUSH
36066: LD_VAR 0 3
36070: PUSH
36071: LD_VAR 0 4
36075: PLUS
36076: ST_TO_ADDR
// for _x = min_x to max_x do
36077: LD_ADDR_VAR 0 11
36081: PUSH
36082: DOUBLE
36083: LD_VAR 0 7
36087: DEC
36088: ST_TO_ADDR
36089: LD_VAR 0 9
36093: PUSH
36094: FOR_TO
36095: IFFALSE 36212
// for _y = min_y to max_y do
36097: LD_ADDR_VAR 0 12
36101: PUSH
36102: DOUBLE
36103: LD_VAR 0 8
36107: DEC
36108: ST_TO_ADDR
36109: LD_VAR 0 10
36113: PUSH
36114: FOR_TO
36115: IFFALSE 36208
// begin if not ValidHex ( _x , _y ) then
36117: LD_VAR 0 11
36121: PPUSH
36122: LD_VAR 0 12
36126: PPUSH
36127: CALL_OW 488
36131: NOT
36132: IFFALSE 36136
// continue ;
36134: GO 36114
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36136: LD_VAR 0 11
36140: PPUSH
36141: LD_VAR 0 12
36145: PPUSH
36146: CALL_OW 351
36150: PUSH
36151: LD_VAR 0 11
36155: PPUSH
36156: LD_VAR 0 12
36160: PPUSH
36161: CALL_OW 554
36165: AND
36166: IFFALSE 36206
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36168: LD_ADDR_VAR 0 13
36172: PUSH
36173: LD_VAR 0 13
36177: PPUSH
36178: LD_VAR 0 13
36182: PUSH
36183: LD_INT 1
36185: PLUS
36186: PPUSH
36187: LD_VAR 0 11
36191: PUSH
36192: LD_VAR 0 12
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PPUSH
36201: CALL_OW 2
36205: ST_TO_ADDR
// end ;
36206: GO 36114
36208: POP
36209: POP
36210: GO 36094
36212: POP
36213: POP
// if not list then
36214: LD_VAR 0 13
36218: NOT
36219: IFFALSE 36223
// exit ;
36221: GO 36294
// for i in list do
36223: LD_ADDR_VAR 0 6
36227: PUSH
36228: LD_VAR 0 13
36232: PUSH
36233: FOR_IN
36234: IFFALSE 36292
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36236: LD_VAR 0 1
36240: PPUSH
36241: LD_STRING M
36243: PUSH
36244: LD_VAR 0 6
36248: PUSH
36249: LD_INT 1
36251: ARRAY
36252: PUSH
36253: LD_VAR 0 6
36257: PUSH
36258: LD_INT 2
36260: ARRAY
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: PUSH
36283: EMPTY
36284: LIST
36285: PPUSH
36286: CALL_OW 447
36290: GO 36233
36292: POP
36293: POP
// end ;
36294: LD_VAR 0 5
36298: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36299: LD_EXP 98
36303: NOT
36304: IFFALSE 36354
36306: GO 36308
36308: DISABLE
// begin initHack := true ;
36309: LD_ADDR_EXP 98
36313: PUSH
36314: LD_INT 1
36316: ST_TO_ADDR
// hackTanks := [ ] ;
36317: LD_ADDR_EXP 99
36321: PUSH
36322: EMPTY
36323: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36324: LD_ADDR_EXP 100
36328: PUSH
36329: EMPTY
36330: ST_TO_ADDR
// hackLimit := 3 ;
36331: LD_ADDR_EXP 101
36335: PUSH
36336: LD_INT 3
36338: ST_TO_ADDR
// hackDist := 12 ;
36339: LD_ADDR_EXP 102
36343: PUSH
36344: LD_INT 12
36346: ST_TO_ADDR
// hackCounter := [ ] ;
36347: LD_ADDR_EXP 103
36351: PUSH
36352: EMPTY
36353: ST_TO_ADDR
// end ;
36354: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36355: LD_EXP 98
36359: PUSH
36360: LD_INT 34
36362: PUSH
36363: LD_INT 99
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PPUSH
36370: CALL_OW 69
36374: AND
36375: IFFALSE 36628
36377: GO 36379
36379: DISABLE
36380: LD_INT 0
36382: PPUSH
36383: PPUSH
// begin enable ;
36384: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36385: LD_ADDR_VAR 0 1
36389: PUSH
36390: LD_INT 34
36392: PUSH
36393: LD_INT 99
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PPUSH
36400: CALL_OW 69
36404: PUSH
36405: FOR_IN
36406: IFFALSE 36626
// begin if not i in hackTanks then
36408: LD_VAR 0 1
36412: PUSH
36413: LD_EXP 99
36417: IN
36418: NOT
36419: IFFALSE 36502
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36421: LD_ADDR_EXP 99
36425: PUSH
36426: LD_EXP 99
36430: PPUSH
36431: LD_EXP 99
36435: PUSH
36436: LD_INT 1
36438: PLUS
36439: PPUSH
36440: LD_VAR 0 1
36444: PPUSH
36445: CALL_OW 1
36449: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36450: LD_ADDR_EXP 100
36454: PUSH
36455: LD_EXP 100
36459: PPUSH
36460: LD_EXP 100
36464: PUSH
36465: LD_INT 1
36467: PLUS
36468: PPUSH
36469: EMPTY
36470: PPUSH
36471: CALL_OW 1
36475: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36476: LD_ADDR_EXP 103
36480: PUSH
36481: LD_EXP 103
36485: PPUSH
36486: LD_EXP 103
36490: PUSH
36491: LD_INT 1
36493: PLUS
36494: PPUSH
36495: EMPTY
36496: PPUSH
36497: CALL_OW 1
36501: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36502: LD_VAR 0 1
36506: PPUSH
36507: CALL_OW 302
36511: NOT
36512: IFFALSE 36525
// begin HackUnlinkAll ( i ) ;
36514: LD_VAR 0 1
36518: PPUSH
36519: CALL 36631 0 1
// continue ;
36523: GO 36405
// end ; HackCheckCapturedStatus ( i ) ;
36525: LD_VAR 0 1
36529: PPUSH
36530: CALL 37074 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36534: LD_ADDR_VAR 0 2
36538: PUSH
36539: LD_INT 81
36541: PUSH
36542: LD_VAR 0 1
36546: PPUSH
36547: CALL_OW 255
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 33
36558: PUSH
36559: LD_INT 3
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 91
36568: PUSH
36569: LD_VAR 0 1
36573: PUSH
36574: LD_EXP 102
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 50
36586: PUSH
36587: EMPTY
36588: LIST
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: PPUSH
36596: CALL_OW 69
36600: ST_TO_ADDR
// if not tmp then
36601: LD_VAR 0 2
36605: NOT
36606: IFFALSE 36610
// continue ;
36608: GO 36405
// HackLink ( i , tmp ) ;
36610: LD_VAR 0 1
36614: PPUSH
36615: LD_VAR 0 2
36619: PPUSH
36620: CALL 36767 0 2
// end ;
36624: GO 36405
36626: POP
36627: POP
// end ;
36628: PPOPN 2
36630: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36631: LD_INT 0
36633: PPUSH
36634: PPUSH
36635: PPUSH
// if not hack in hackTanks then
36636: LD_VAR 0 1
36640: PUSH
36641: LD_EXP 99
36645: IN
36646: NOT
36647: IFFALSE 36651
// exit ;
36649: GO 36762
// index := GetElementIndex ( hackTanks , hack ) ;
36651: LD_ADDR_VAR 0 4
36655: PUSH
36656: LD_EXP 99
36660: PPUSH
36661: LD_VAR 0 1
36665: PPUSH
36666: CALL 44379 0 2
36670: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36671: LD_EXP 100
36675: PUSH
36676: LD_VAR 0 4
36680: ARRAY
36681: IFFALSE 36762
// begin for i in hackTanksCaptured [ index ] do
36683: LD_ADDR_VAR 0 3
36687: PUSH
36688: LD_EXP 100
36692: PUSH
36693: LD_VAR 0 4
36697: ARRAY
36698: PUSH
36699: FOR_IN
36700: IFFALSE 36726
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36702: LD_VAR 0 3
36706: PUSH
36707: LD_INT 1
36709: ARRAY
36710: PPUSH
36711: LD_VAR 0 3
36715: PUSH
36716: LD_INT 2
36718: ARRAY
36719: PPUSH
36720: CALL_OW 235
36724: GO 36699
36726: POP
36727: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36728: LD_ADDR_EXP 100
36732: PUSH
36733: LD_EXP 100
36737: PPUSH
36738: LD_VAR 0 4
36742: PPUSH
36743: EMPTY
36744: PPUSH
36745: CALL_OW 1
36749: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36750: LD_VAR 0 1
36754: PPUSH
36755: LD_INT 0
36757: PPUSH
36758: CALL_OW 505
// end ; end ;
36762: LD_VAR 0 2
36766: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36767: LD_INT 0
36769: PPUSH
36770: PPUSH
36771: PPUSH
// if not hack in hackTanks or not vehicles then
36772: LD_VAR 0 1
36776: PUSH
36777: LD_EXP 99
36781: IN
36782: NOT
36783: PUSH
36784: LD_VAR 0 2
36788: NOT
36789: OR
36790: IFFALSE 36794
// exit ;
36792: GO 37069
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36794: LD_ADDR_VAR 0 2
36798: PUSH
36799: LD_VAR 0 1
36803: PPUSH
36804: LD_VAR 0 2
36808: PPUSH
36809: LD_INT 1
36811: PPUSH
36812: LD_INT 1
36814: PPUSH
36815: CALL 45029 0 4
36819: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36820: LD_ADDR_VAR 0 5
36824: PUSH
36825: LD_EXP 99
36829: PPUSH
36830: LD_VAR 0 1
36834: PPUSH
36835: CALL 44379 0 2
36839: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36840: LD_EXP 100
36844: PUSH
36845: LD_VAR 0 5
36849: ARRAY
36850: PUSH
36851: LD_EXP 101
36855: LESS
36856: IFFALSE 37045
// begin for i := 1 to vehicles do
36858: LD_ADDR_VAR 0 4
36862: PUSH
36863: DOUBLE
36864: LD_INT 1
36866: DEC
36867: ST_TO_ADDR
36868: LD_VAR 0 2
36872: PUSH
36873: FOR_TO
36874: IFFALSE 37043
// begin if hackTanksCaptured [ index ] = hackLimit then
36876: LD_EXP 100
36880: PUSH
36881: LD_VAR 0 5
36885: ARRAY
36886: PUSH
36887: LD_EXP 101
36891: EQUAL
36892: IFFALSE 36896
// break ;
36894: GO 37043
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36896: LD_ADDR_EXP 103
36900: PUSH
36901: LD_EXP 103
36905: PPUSH
36906: LD_VAR 0 5
36910: PPUSH
36911: LD_EXP 103
36915: PUSH
36916: LD_VAR 0 5
36920: ARRAY
36921: PUSH
36922: LD_INT 1
36924: PLUS
36925: PPUSH
36926: CALL_OW 1
36930: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36931: LD_ADDR_EXP 100
36935: PUSH
36936: LD_EXP 100
36940: PPUSH
36941: LD_VAR 0 5
36945: PUSH
36946: LD_EXP 100
36950: PUSH
36951: LD_VAR 0 5
36955: ARRAY
36956: PUSH
36957: LD_INT 1
36959: PLUS
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PPUSH
36965: LD_VAR 0 2
36969: PUSH
36970: LD_VAR 0 4
36974: ARRAY
36975: PUSH
36976: LD_VAR 0 2
36980: PUSH
36981: LD_VAR 0 4
36985: ARRAY
36986: PPUSH
36987: CALL_OW 255
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PPUSH
36996: CALL 44594 0 3
37000: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37001: LD_VAR 0 2
37005: PUSH
37006: LD_VAR 0 4
37010: ARRAY
37011: PPUSH
37012: LD_VAR 0 1
37016: PPUSH
37017: CALL_OW 255
37021: PPUSH
37022: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37026: LD_VAR 0 2
37030: PUSH
37031: LD_VAR 0 4
37035: ARRAY
37036: PPUSH
37037: CALL_OW 141
// end ;
37041: GO 36873
37043: POP
37044: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37045: LD_VAR 0 1
37049: PPUSH
37050: LD_EXP 100
37054: PUSH
37055: LD_VAR 0 5
37059: ARRAY
37060: PUSH
37061: LD_INT 0
37063: PLUS
37064: PPUSH
37065: CALL_OW 505
// end ;
37069: LD_VAR 0 3
37073: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37074: LD_INT 0
37076: PPUSH
37077: PPUSH
37078: PPUSH
37079: PPUSH
// if not hack in hackTanks then
37080: LD_VAR 0 1
37084: PUSH
37085: LD_EXP 99
37089: IN
37090: NOT
37091: IFFALSE 37095
// exit ;
37093: GO 37335
// index := GetElementIndex ( hackTanks , hack ) ;
37095: LD_ADDR_VAR 0 4
37099: PUSH
37100: LD_EXP 99
37104: PPUSH
37105: LD_VAR 0 1
37109: PPUSH
37110: CALL 44379 0 2
37114: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37115: LD_ADDR_VAR 0 3
37119: PUSH
37120: DOUBLE
37121: LD_EXP 100
37125: PUSH
37126: LD_VAR 0 4
37130: ARRAY
37131: INC
37132: ST_TO_ADDR
37133: LD_INT 1
37135: PUSH
37136: FOR_DOWNTO
37137: IFFALSE 37309
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37139: LD_ADDR_VAR 0 5
37143: PUSH
37144: LD_EXP 100
37148: PUSH
37149: LD_VAR 0 4
37153: ARRAY
37154: PUSH
37155: LD_VAR 0 3
37159: ARRAY
37160: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37161: LD_VAR 0 5
37165: PUSH
37166: LD_INT 1
37168: ARRAY
37169: PPUSH
37170: CALL_OW 302
37174: NOT
37175: PUSH
37176: LD_VAR 0 5
37180: PUSH
37181: LD_INT 1
37183: ARRAY
37184: PPUSH
37185: CALL_OW 255
37189: PUSH
37190: LD_VAR 0 1
37194: PPUSH
37195: CALL_OW 255
37199: NONEQUAL
37200: OR
37201: IFFALSE 37307
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37203: LD_VAR 0 5
37207: PUSH
37208: LD_INT 1
37210: ARRAY
37211: PPUSH
37212: CALL_OW 305
37216: PUSH
37217: LD_VAR 0 5
37221: PUSH
37222: LD_INT 1
37224: ARRAY
37225: PPUSH
37226: CALL_OW 255
37230: PUSH
37231: LD_VAR 0 1
37235: PPUSH
37236: CALL_OW 255
37240: EQUAL
37241: AND
37242: IFFALSE 37266
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37244: LD_VAR 0 5
37248: PUSH
37249: LD_INT 1
37251: ARRAY
37252: PPUSH
37253: LD_VAR 0 5
37257: PUSH
37258: LD_INT 2
37260: ARRAY
37261: PPUSH
37262: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37266: LD_ADDR_EXP 100
37270: PUSH
37271: LD_EXP 100
37275: PPUSH
37276: LD_VAR 0 4
37280: PPUSH
37281: LD_EXP 100
37285: PUSH
37286: LD_VAR 0 4
37290: ARRAY
37291: PPUSH
37292: LD_VAR 0 3
37296: PPUSH
37297: CALL_OW 3
37301: PPUSH
37302: CALL_OW 1
37306: ST_TO_ADDR
// end ; end ;
37307: GO 37136
37309: POP
37310: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37311: LD_VAR 0 1
37315: PPUSH
37316: LD_EXP 100
37320: PUSH
37321: LD_VAR 0 4
37325: ARRAY
37326: PUSH
37327: LD_INT 0
37329: PLUS
37330: PPUSH
37331: CALL_OW 505
// end ;
37335: LD_VAR 0 2
37339: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37340: LD_INT 0
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
// if not hack in hackTanks then
37346: LD_VAR 0 1
37350: PUSH
37351: LD_EXP 99
37355: IN
37356: NOT
37357: IFFALSE 37361
// exit ;
37359: GO 37446
// index := GetElementIndex ( hackTanks , hack ) ;
37361: LD_ADDR_VAR 0 5
37365: PUSH
37366: LD_EXP 99
37370: PPUSH
37371: LD_VAR 0 1
37375: PPUSH
37376: CALL 44379 0 2
37380: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37381: LD_ADDR_VAR 0 4
37385: PUSH
37386: DOUBLE
37387: LD_INT 1
37389: DEC
37390: ST_TO_ADDR
37391: LD_EXP 100
37395: PUSH
37396: LD_VAR 0 5
37400: ARRAY
37401: PUSH
37402: FOR_TO
37403: IFFALSE 37444
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37405: LD_EXP 100
37409: PUSH
37410: LD_VAR 0 5
37414: ARRAY
37415: PUSH
37416: LD_VAR 0 4
37420: ARRAY
37421: PUSH
37422: LD_INT 1
37424: ARRAY
37425: PUSH
37426: LD_VAR 0 2
37430: EQUAL
37431: IFFALSE 37442
// KillUnit ( vehicle ) ;
37433: LD_VAR 0 2
37437: PPUSH
37438: CALL_OW 66
37442: GO 37402
37444: POP
37445: POP
// end ;
37446: LD_VAR 0 3
37450: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37451: LD_EXP 104
37455: NOT
37456: IFFALSE 37491
37458: GO 37460
37460: DISABLE
// begin initMiner := true ;
37461: LD_ADDR_EXP 104
37465: PUSH
37466: LD_INT 1
37468: ST_TO_ADDR
// minersList := [ ] ;
37469: LD_ADDR_EXP 105
37473: PUSH
37474: EMPTY
37475: ST_TO_ADDR
// minerMinesList := [ ] ;
37476: LD_ADDR_EXP 106
37480: PUSH
37481: EMPTY
37482: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37483: LD_ADDR_EXP 107
37487: PUSH
37488: LD_INT 5
37490: ST_TO_ADDR
// end ;
37491: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37492: LD_EXP 104
37496: PUSH
37497: LD_INT 34
37499: PUSH
37500: LD_INT 81
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PPUSH
37507: CALL_OW 69
37511: AND
37512: IFFALSE 37973
37514: GO 37516
37516: DISABLE
37517: LD_INT 0
37519: PPUSH
37520: PPUSH
37521: PPUSH
37522: PPUSH
// begin enable ;
37523: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37524: LD_ADDR_VAR 0 1
37528: PUSH
37529: LD_INT 34
37531: PUSH
37532: LD_INT 81
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PPUSH
37539: CALL_OW 69
37543: PUSH
37544: FOR_IN
37545: IFFALSE 37617
// begin if not i in minersList then
37547: LD_VAR 0 1
37551: PUSH
37552: LD_EXP 105
37556: IN
37557: NOT
37558: IFFALSE 37615
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37560: LD_ADDR_EXP 105
37564: PUSH
37565: LD_EXP 105
37569: PPUSH
37570: LD_EXP 105
37574: PUSH
37575: LD_INT 1
37577: PLUS
37578: PPUSH
37579: LD_VAR 0 1
37583: PPUSH
37584: CALL_OW 1
37588: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37589: LD_ADDR_EXP 106
37593: PUSH
37594: LD_EXP 106
37598: PPUSH
37599: LD_EXP 106
37603: PUSH
37604: LD_INT 1
37606: PLUS
37607: PPUSH
37608: EMPTY
37609: PPUSH
37610: CALL_OW 1
37614: ST_TO_ADDR
// end end ;
37615: GO 37544
37617: POP
37618: POP
// for i := minerMinesList downto 1 do
37619: LD_ADDR_VAR 0 1
37623: PUSH
37624: DOUBLE
37625: LD_EXP 106
37629: INC
37630: ST_TO_ADDR
37631: LD_INT 1
37633: PUSH
37634: FOR_DOWNTO
37635: IFFALSE 37971
// begin if IsLive ( minersList [ i ] ) then
37637: LD_EXP 105
37641: PUSH
37642: LD_VAR 0 1
37646: ARRAY
37647: PPUSH
37648: CALL_OW 300
37652: IFFALSE 37680
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37654: LD_EXP 105
37658: PUSH
37659: LD_VAR 0 1
37663: ARRAY
37664: PPUSH
37665: LD_EXP 106
37669: PUSH
37670: LD_VAR 0 1
37674: ARRAY
37675: PPUSH
37676: CALL_OW 505
// if not minerMinesList [ i ] then
37680: LD_EXP 106
37684: PUSH
37685: LD_VAR 0 1
37689: ARRAY
37690: NOT
37691: IFFALSE 37695
// continue ;
37693: GO 37634
// for j := minerMinesList [ i ] downto 1 do
37695: LD_ADDR_VAR 0 2
37699: PUSH
37700: DOUBLE
37701: LD_EXP 106
37705: PUSH
37706: LD_VAR 0 1
37710: ARRAY
37711: INC
37712: ST_TO_ADDR
37713: LD_INT 1
37715: PUSH
37716: FOR_DOWNTO
37717: IFFALSE 37967
// begin side := GetSide ( minersList [ i ] ) ;
37719: LD_ADDR_VAR 0 3
37723: PUSH
37724: LD_EXP 105
37728: PUSH
37729: LD_VAR 0 1
37733: ARRAY
37734: PPUSH
37735: CALL_OW 255
37739: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37740: LD_ADDR_VAR 0 4
37744: PUSH
37745: LD_EXP 106
37749: PUSH
37750: LD_VAR 0 1
37754: ARRAY
37755: PUSH
37756: LD_VAR 0 2
37760: ARRAY
37761: PUSH
37762: LD_INT 1
37764: ARRAY
37765: PPUSH
37766: LD_EXP 106
37770: PUSH
37771: LD_VAR 0 1
37775: ARRAY
37776: PUSH
37777: LD_VAR 0 2
37781: ARRAY
37782: PUSH
37783: LD_INT 2
37785: ARRAY
37786: PPUSH
37787: CALL_OW 428
37791: ST_TO_ADDR
// if not tmp then
37792: LD_VAR 0 4
37796: NOT
37797: IFFALSE 37801
// continue ;
37799: GO 37716
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37801: LD_VAR 0 4
37805: PUSH
37806: LD_INT 81
37808: PUSH
37809: LD_VAR 0 3
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PPUSH
37818: CALL_OW 69
37822: IN
37823: PUSH
37824: LD_EXP 106
37828: PUSH
37829: LD_VAR 0 1
37833: ARRAY
37834: PUSH
37835: LD_VAR 0 2
37839: ARRAY
37840: PUSH
37841: LD_INT 1
37843: ARRAY
37844: PPUSH
37845: LD_EXP 106
37849: PUSH
37850: LD_VAR 0 1
37854: ARRAY
37855: PUSH
37856: LD_VAR 0 2
37860: ARRAY
37861: PUSH
37862: LD_INT 2
37864: ARRAY
37865: PPUSH
37866: CALL_OW 458
37870: AND
37871: IFFALSE 37965
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37873: LD_EXP 106
37877: PUSH
37878: LD_VAR 0 1
37882: ARRAY
37883: PUSH
37884: LD_VAR 0 2
37888: ARRAY
37889: PUSH
37890: LD_INT 1
37892: ARRAY
37893: PPUSH
37894: LD_EXP 106
37898: PUSH
37899: LD_VAR 0 1
37903: ARRAY
37904: PUSH
37905: LD_VAR 0 2
37909: ARRAY
37910: PUSH
37911: LD_INT 2
37913: ARRAY
37914: PPUSH
37915: LD_VAR 0 3
37919: PPUSH
37920: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37924: LD_ADDR_EXP 106
37928: PUSH
37929: LD_EXP 106
37933: PPUSH
37934: LD_VAR 0 1
37938: PPUSH
37939: LD_EXP 106
37943: PUSH
37944: LD_VAR 0 1
37948: ARRAY
37949: PPUSH
37950: LD_VAR 0 2
37954: PPUSH
37955: CALL_OW 3
37959: PPUSH
37960: CALL_OW 1
37964: ST_TO_ADDR
// end ; end ;
37965: GO 37716
37967: POP
37968: POP
// end ;
37969: GO 37634
37971: POP
37972: POP
// end ;
37973: PPOPN 4
37975: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37976: LD_INT 0
37978: PPUSH
37979: PPUSH
// result := false ;
37980: LD_ADDR_VAR 0 4
37984: PUSH
37985: LD_INT 0
37987: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37988: LD_VAR 0 1
37992: PPUSH
37993: CALL_OW 264
37997: PUSH
37998: LD_INT 81
38000: EQUAL
38001: NOT
38002: IFFALSE 38006
// exit ;
38004: GO 38246
// index := GetElementIndex ( minersList , unit ) ;
38006: LD_ADDR_VAR 0 5
38010: PUSH
38011: LD_EXP 105
38015: PPUSH
38016: LD_VAR 0 1
38020: PPUSH
38021: CALL 44379 0 2
38025: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38026: LD_EXP 106
38030: PUSH
38031: LD_VAR 0 5
38035: ARRAY
38036: PUSH
38037: LD_EXP 107
38041: GREATEREQUAL
38042: IFFALSE 38046
// exit ;
38044: GO 38246
// ComMoveXY ( unit , x , y ) ;
38046: LD_VAR 0 1
38050: PPUSH
38051: LD_VAR 0 2
38055: PPUSH
38056: LD_VAR 0 3
38060: PPUSH
38061: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38065: LD_INT 35
38067: PPUSH
38068: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38072: LD_VAR 0 1
38076: PPUSH
38077: LD_VAR 0 2
38081: PPUSH
38082: LD_VAR 0 3
38086: PPUSH
38087: CALL 75715 0 3
38091: NOT
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 314
38102: AND
38103: IFFALSE 38107
// exit ;
38105: GO 38246
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38107: LD_VAR 0 2
38111: PPUSH
38112: LD_VAR 0 3
38116: PPUSH
38117: CALL_OW 428
38121: PUSH
38122: LD_VAR 0 1
38126: EQUAL
38127: PUSH
38128: LD_VAR 0 1
38132: PPUSH
38133: CALL_OW 314
38137: NOT
38138: AND
38139: IFFALSE 38065
// PlaySoundXY ( x , y , PlantMine ) ;
38141: LD_VAR 0 2
38145: PPUSH
38146: LD_VAR 0 3
38150: PPUSH
38151: LD_STRING PlantMine
38153: PPUSH
38154: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38158: LD_VAR 0 2
38162: PPUSH
38163: LD_VAR 0 3
38167: PPUSH
38168: LD_VAR 0 1
38172: PPUSH
38173: CALL_OW 255
38177: PPUSH
38178: LD_INT 0
38180: PPUSH
38181: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38185: LD_ADDR_EXP 106
38189: PUSH
38190: LD_EXP 106
38194: PPUSH
38195: LD_VAR 0 5
38199: PUSH
38200: LD_EXP 106
38204: PUSH
38205: LD_VAR 0 5
38209: ARRAY
38210: PUSH
38211: LD_INT 1
38213: PLUS
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PPUSH
38219: LD_VAR 0 2
38223: PUSH
38224: LD_VAR 0 3
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PPUSH
38233: CALL 44594 0 3
38237: ST_TO_ADDR
// result := true ;
38238: LD_ADDR_VAR 0 4
38242: PUSH
38243: LD_INT 1
38245: ST_TO_ADDR
// end ;
38246: LD_VAR 0 4
38250: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38251: LD_INT 0
38253: PPUSH
38254: PPUSH
38255: PPUSH
// if not unit in minersList then
38256: LD_VAR 0 1
38260: PUSH
38261: LD_EXP 105
38265: IN
38266: NOT
38267: IFFALSE 38271
// exit ;
38269: GO 38663
// index := GetElementIndex ( minersList , unit ) ;
38271: LD_ADDR_VAR 0 6
38275: PUSH
38276: LD_EXP 105
38280: PPUSH
38281: LD_VAR 0 1
38285: PPUSH
38286: CALL 44379 0 2
38290: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38291: LD_ADDR_VAR 0 5
38295: PUSH
38296: DOUBLE
38297: LD_EXP 106
38301: PUSH
38302: LD_VAR 0 6
38306: ARRAY
38307: INC
38308: ST_TO_ADDR
38309: LD_INT 1
38311: PUSH
38312: FOR_DOWNTO
38313: IFFALSE 38474
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38315: LD_EXP 106
38319: PUSH
38320: LD_VAR 0 6
38324: ARRAY
38325: PUSH
38326: LD_VAR 0 5
38330: ARRAY
38331: PUSH
38332: LD_INT 1
38334: ARRAY
38335: PUSH
38336: LD_VAR 0 2
38340: EQUAL
38341: PUSH
38342: LD_EXP 106
38346: PUSH
38347: LD_VAR 0 6
38351: ARRAY
38352: PUSH
38353: LD_VAR 0 5
38357: ARRAY
38358: PUSH
38359: LD_INT 2
38361: ARRAY
38362: PUSH
38363: LD_VAR 0 3
38367: EQUAL
38368: AND
38369: IFFALSE 38472
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38371: LD_EXP 106
38375: PUSH
38376: LD_VAR 0 6
38380: ARRAY
38381: PUSH
38382: LD_VAR 0 5
38386: ARRAY
38387: PUSH
38388: LD_INT 1
38390: ARRAY
38391: PPUSH
38392: LD_EXP 106
38396: PUSH
38397: LD_VAR 0 6
38401: ARRAY
38402: PUSH
38403: LD_VAR 0 5
38407: ARRAY
38408: PUSH
38409: LD_INT 2
38411: ARRAY
38412: PPUSH
38413: LD_VAR 0 1
38417: PPUSH
38418: CALL_OW 255
38422: PPUSH
38423: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38427: LD_ADDR_EXP 106
38431: PUSH
38432: LD_EXP 106
38436: PPUSH
38437: LD_VAR 0 6
38441: PPUSH
38442: LD_EXP 106
38446: PUSH
38447: LD_VAR 0 6
38451: ARRAY
38452: PPUSH
38453: LD_VAR 0 5
38457: PPUSH
38458: CALL_OW 3
38462: PPUSH
38463: CALL_OW 1
38467: ST_TO_ADDR
// exit ;
38468: POP
38469: POP
38470: GO 38663
// end ; end ;
38472: GO 38312
38474: POP
38475: POP
// for i := minerMinesList [ index ] downto 1 do
38476: LD_ADDR_VAR 0 5
38480: PUSH
38481: DOUBLE
38482: LD_EXP 106
38486: PUSH
38487: LD_VAR 0 6
38491: ARRAY
38492: INC
38493: ST_TO_ADDR
38494: LD_INT 1
38496: PUSH
38497: FOR_DOWNTO
38498: IFFALSE 38661
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38500: LD_EXP 106
38504: PUSH
38505: LD_VAR 0 6
38509: ARRAY
38510: PUSH
38511: LD_VAR 0 5
38515: ARRAY
38516: PUSH
38517: LD_INT 1
38519: ARRAY
38520: PPUSH
38521: LD_EXP 106
38525: PUSH
38526: LD_VAR 0 6
38530: ARRAY
38531: PUSH
38532: LD_VAR 0 5
38536: ARRAY
38537: PUSH
38538: LD_INT 2
38540: ARRAY
38541: PPUSH
38542: LD_VAR 0 2
38546: PPUSH
38547: LD_VAR 0 3
38551: PPUSH
38552: CALL_OW 298
38556: PUSH
38557: LD_INT 6
38559: LESS
38560: IFFALSE 38659
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38562: LD_EXP 106
38566: PUSH
38567: LD_VAR 0 6
38571: ARRAY
38572: PUSH
38573: LD_VAR 0 5
38577: ARRAY
38578: PUSH
38579: LD_INT 1
38581: ARRAY
38582: PPUSH
38583: LD_EXP 106
38587: PUSH
38588: LD_VAR 0 6
38592: ARRAY
38593: PUSH
38594: LD_VAR 0 5
38598: ARRAY
38599: PUSH
38600: LD_INT 2
38602: ARRAY
38603: PPUSH
38604: LD_VAR 0 1
38608: PPUSH
38609: CALL_OW 255
38613: PPUSH
38614: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38618: LD_ADDR_EXP 106
38622: PUSH
38623: LD_EXP 106
38627: PPUSH
38628: LD_VAR 0 6
38632: PPUSH
38633: LD_EXP 106
38637: PUSH
38638: LD_VAR 0 6
38642: ARRAY
38643: PPUSH
38644: LD_VAR 0 5
38648: PPUSH
38649: CALL_OW 3
38653: PPUSH
38654: CALL_OW 1
38658: ST_TO_ADDR
// end ; end ;
38659: GO 38497
38661: POP
38662: POP
// end ;
38663: LD_VAR 0 4
38667: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38668: LD_INT 0
38670: PPUSH
38671: PPUSH
38672: PPUSH
38673: PPUSH
38674: PPUSH
38675: PPUSH
38676: PPUSH
38677: PPUSH
38678: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38679: LD_VAR 0 1
38683: PPUSH
38684: CALL_OW 264
38688: PUSH
38689: LD_INT 81
38691: EQUAL
38692: NOT
38693: PUSH
38694: LD_VAR 0 1
38698: PUSH
38699: LD_EXP 105
38703: IN
38704: NOT
38705: OR
38706: IFFALSE 38710
// exit ;
38708: GO 39032
// index := GetElementIndex ( minersList , unit ) ;
38710: LD_ADDR_VAR 0 6
38714: PUSH
38715: LD_EXP 105
38719: PPUSH
38720: LD_VAR 0 1
38724: PPUSH
38725: CALL 44379 0 2
38729: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38730: LD_ADDR_VAR 0 8
38734: PUSH
38735: LD_EXP 107
38739: PUSH
38740: LD_EXP 106
38744: PUSH
38745: LD_VAR 0 6
38749: ARRAY
38750: MINUS
38751: ST_TO_ADDR
// if not minesFreeAmount then
38752: LD_VAR 0 8
38756: NOT
38757: IFFALSE 38761
// exit ;
38759: GO 39032
// tmp := [ ] ;
38761: LD_ADDR_VAR 0 7
38765: PUSH
38766: EMPTY
38767: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38768: LD_ADDR_VAR 0 5
38772: PUSH
38773: DOUBLE
38774: LD_INT 1
38776: DEC
38777: ST_TO_ADDR
38778: LD_VAR 0 8
38782: PUSH
38783: FOR_TO
38784: IFFALSE 38979
// begin _d := rand ( 0 , 5 ) ;
38786: LD_ADDR_VAR 0 11
38790: PUSH
38791: LD_INT 0
38793: PPUSH
38794: LD_INT 5
38796: PPUSH
38797: CALL_OW 12
38801: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38802: LD_ADDR_VAR 0 12
38806: PUSH
38807: LD_INT 2
38809: PPUSH
38810: LD_INT 6
38812: PPUSH
38813: CALL_OW 12
38817: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38818: LD_ADDR_VAR 0 9
38822: PUSH
38823: LD_VAR 0 2
38827: PPUSH
38828: LD_VAR 0 11
38832: PPUSH
38833: LD_VAR 0 12
38837: PPUSH
38838: CALL_OW 272
38842: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38843: LD_ADDR_VAR 0 10
38847: PUSH
38848: LD_VAR 0 3
38852: PPUSH
38853: LD_VAR 0 11
38857: PPUSH
38858: LD_VAR 0 12
38862: PPUSH
38863: CALL_OW 273
38867: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38868: LD_VAR 0 9
38872: PPUSH
38873: LD_VAR 0 10
38877: PPUSH
38878: CALL_OW 488
38882: PUSH
38883: LD_VAR 0 9
38887: PUSH
38888: LD_VAR 0 10
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_VAR 0 7
38901: IN
38902: NOT
38903: AND
38904: PUSH
38905: LD_VAR 0 9
38909: PPUSH
38910: LD_VAR 0 10
38914: PPUSH
38915: CALL_OW 458
38919: NOT
38920: AND
38921: IFFALSE 38963
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38923: LD_ADDR_VAR 0 7
38927: PUSH
38928: LD_VAR 0 7
38932: PPUSH
38933: LD_VAR 0 7
38937: PUSH
38938: LD_INT 1
38940: PLUS
38941: PPUSH
38942: LD_VAR 0 9
38946: PUSH
38947: LD_VAR 0 10
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PPUSH
38956: CALL_OW 1
38960: ST_TO_ADDR
38961: GO 38977
// i := i - 1 ;
38963: LD_ADDR_VAR 0 5
38967: PUSH
38968: LD_VAR 0 5
38972: PUSH
38973: LD_INT 1
38975: MINUS
38976: ST_TO_ADDR
// end ;
38977: GO 38783
38979: POP
38980: POP
// for i in tmp do
38981: LD_ADDR_VAR 0 5
38985: PUSH
38986: LD_VAR 0 7
38990: PUSH
38991: FOR_IN
38992: IFFALSE 39030
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38994: LD_VAR 0 1
38998: PPUSH
38999: LD_VAR 0 5
39003: PUSH
39004: LD_INT 1
39006: ARRAY
39007: PPUSH
39008: LD_VAR 0 5
39012: PUSH
39013: LD_INT 2
39015: ARRAY
39016: PPUSH
39017: CALL 37976 0 3
39021: NOT
39022: IFFALSE 39028
// exit ;
39024: POP
39025: POP
39026: GO 39032
39028: GO 38991
39030: POP
39031: POP
// end ;
39032: LD_VAR 0 4
39036: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39037: LD_INT 0
39039: PPUSH
39040: PPUSH
39041: PPUSH
39042: PPUSH
39043: PPUSH
39044: PPUSH
39045: PPUSH
// if not GetClass ( unit ) = class_sniper then
39046: LD_VAR 0 1
39050: PPUSH
39051: CALL_OW 257
39055: PUSH
39056: LD_INT 5
39058: EQUAL
39059: NOT
39060: IFFALSE 39064
// exit ;
39062: GO 39452
// dist := 8 ;
39064: LD_ADDR_VAR 0 5
39068: PUSH
39069: LD_INT 8
39071: ST_TO_ADDR
// viewRange := 12 ;
39072: LD_ADDR_VAR 0 7
39076: PUSH
39077: LD_INT 12
39079: ST_TO_ADDR
// side := GetSide ( unit ) ;
39080: LD_ADDR_VAR 0 6
39084: PUSH
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 255
39094: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39095: LD_INT 61
39097: PPUSH
39098: LD_VAR 0 6
39102: PPUSH
39103: CALL_OW 321
39107: PUSH
39108: LD_INT 2
39110: EQUAL
39111: IFFALSE 39121
// viewRange := 16 ;
39113: LD_ADDR_VAR 0 7
39117: PUSH
39118: LD_INT 16
39120: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39121: LD_VAR 0 1
39125: PPUSH
39126: LD_VAR 0 2
39130: PPUSH
39131: LD_VAR 0 3
39135: PPUSH
39136: CALL_OW 297
39140: PUSH
39141: LD_VAR 0 5
39145: GREATER
39146: IFFALSE 39225
// begin ComMoveXY ( unit , x , y ) ;
39148: LD_VAR 0 1
39152: PPUSH
39153: LD_VAR 0 2
39157: PPUSH
39158: LD_VAR 0 3
39162: PPUSH
39163: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39167: LD_INT 35
39169: PPUSH
39170: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39174: LD_VAR 0 1
39178: PPUSH
39179: LD_VAR 0 2
39183: PPUSH
39184: LD_VAR 0 3
39188: PPUSH
39189: CALL 75715 0 3
39193: NOT
39194: IFFALSE 39198
// exit ;
39196: GO 39452
// until GetDistUnitXY ( unit , x , y ) < dist ;
39198: LD_VAR 0 1
39202: PPUSH
39203: LD_VAR 0 2
39207: PPUSH
39208: LD_VAR 0 3
39212: PPUSH
39213: CALL_OW 297
39217: PUSH
39218: LD_VAR 0 5
39222: LESS
39223: IFFALSE 39167
// end ; ComTurnXY ( unit , x , y ) ;
39225: LD_VAR 0 1
39229: PPUSH
39230: LD_VAR 0 2
39234: PPUSH
39235: LD_VAR 0 3
39239: PPUSH
39240: CALL_OW 118
// wait ( 5 ) ;
39244: LD_INT 5
39246: PPUSH
39247: CALL_OW 67
// _d := GetDir ( unit ) ;
39251: LD_ADDR_VAR 0 10
39255: PUSH
39256: LD_VAR 0 1
39260: PPUSH
39261: CALL_OW 254
39265: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39266: LD_ADDR_VAR 0 8
39270: PUSH
39271: LD_VAR 0 1
39275: PPUSH
39276: CALL_OW 250
39280: PPUSH
39281: LD_VAR 0 10
39285: PPUSH
39286: LD_VAR 0 5
39290: PPUSH
39291: CALL_OW 272
39295: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39296: LD_ADDR_VAR 0 9
39300: PUSH
39301: LD_VAR 0 1
39305: PPUSH
39306: CALL_OW 251
39310: PPUSH
39311: LD_VAR 0 10
39315: PPUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: CALL_OW 273
39325: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39326: LD_VAR 0 8
39330: PPUSH
39331: LD_VAR 0 9
39335: PPUSH
39336: CALL_OW 488
39340: NOT
39341: IFFALSE 39345
// exit ;
39343: GO 39452
// ComAnimCustom ( unit , 1 ) ;
39345: LD_VAR 0 1
39349: PPUSH
39350: LD_INT 1
39352: PPUSH
39353: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39357: LD_VAR 0 8
39361: PPUSH
39362: LD_VAR 0 9
39366: PPUSH
39367: LD_VAR 0 6
39371: PPUSH
39372: LD_VAR 0 7
39376: PPUSH
39377: CALL_OW 330
// repeat wait ( 1 ) ;
39381: LD_INT 1
39383: PPUSH
39384: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39388: LD_VAR 0 1
39392: PPUSH
39393: CALL_OW 316
39397: PUSH
39398: LD_VAR 0 1
39402: PPUSH
39403: CALL_OW 314
39407: OR
39408: PUSH
39409: LD_VAR 0 1
39413: PPUSH
39414: CALL_OW 302
39418: NOT
39419: OR
39420: PUSH
39421: LD_VAR 0 1
39425: PPUSH
39426: CALL_OW 301
39430: OR
39431: IFFALSE 39381
// RemoveSeeing ( _x , _y , side ) ;
39433: LD_VAR 0 8
39437: PPUSH
39438: LD_VAR 0 9
39442: PPUSH
39443: LD_VAR 0 6
39447: PPUSH
39448: CALL_OW 331
// end ; end_of_file
39452: LD_VAR 0 4
39456: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39457: LD_INT 0
39459: PPUSH
39460: PPUSH
// if exist_mode then
39461: LD_VAR 0 2
39465: IFFALSE 39490
// unit := CreateCharacter ( prefix & ident ) else
39467: LD_ADDR_VAR 0 5
39471: PUSH
39472: LD_VAR 0 3
39476: PUSH
39477: LD_VAR 0 1
39481: STR
39482: PPUSH
39483: CALL_OW 34
39487: ST_TO_ADDR
39488: GO 39505
// unit := NewCharacter ( ident ) ;
39490: LD_ADDR_VAR 0 5
39494: PUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: CALL_OW 25
39504: ST_TO_ADDR
// result := unit ;
39505: LD_ADDR_VAR 0 4
39509: PUSH
39510: LD_VAR 0 5
39514: ST_TO_ADDR
// end ;
39515: LD_VAR 0 4
39519: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39520: LD_INT 0
39522: PPUSH
39523: PPUSH
// if not side or not nation then
39524: LD_VAR 0 1
39528: NOT
39529: PUSH
39530: LD_VAR 0 2
39534: NOT
39535: OR
39536: IFFALSE 39540
// exit ;
39538: GO 40308
// case nation of nation_american :
39540: LD_VAR 0 2
39544: PUSH
39545: LD_INT 1
39547: DOUBLE
39548: EQUAL
39549: IFTRUE 39553
39551: GO 39767
39553: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39554: LD_ADDR_VAR 0 4
39558: PUSH
39559: LD_INT 35
39561: PUSH
39562: LD_INT 45
39564: PUSH
39565: LD_INT 46
39567: PUSH
39568: LD_INT 47
39570: PUSH
39571: LD_INT 82
39573: PUSH
39574: LD_INT 83
39576: PUSH
39577: LD_INT 84
39579: PUSH
39580: LD_INT 85
39582: PUSH
39583: LD_INT 86
39585: PUSH
39586: LD_INT 1
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: LD_INT 6
39594: PUSH
39595: LD_INT 15
39597: PUSH
39598: LD_INT 16
39600: PUSH
39601: LD_INT 7
39603: PUSH
39604: LD_INT 12
39606: PUSH
39607: LD_INT 13
39609: PUSH
39610: LD_INT 10
39612: PUSH
39613: LD_INT 14
39615: PUSH
39616: LD_INT 20
39618: PUSH
39619: LD_INT 21
39621: PUSH
39622: LD_INT 22
39624: PUSH
39625: LD_INT 25
39627: PUSH
39628: LD_INT 32
39630: PUSH
39631: LD_INT 27
39633: PUSH
39634: LD_INT 36
39636: PUSH
39637: LD_INT 69
39639: PUSH
39640: LD_INT 39
39642: PUSH
39643: LD_INT 34
39645: PUSH
39646: LD_INT 40
39648: PUSH
39649: LD_INT 48
39651: PUSH
39652: LD_INT 49
39654: PUSH
39655: LD_INT 50
39657: PUSH
39658: LD_INT 51
39660: PUSH
39661: LD_INT 52
39663: PUSH
39664: LD_INT 53
39666: PUSH
39667: LD_INT 54
39669: PUSH
39670: LD_INT 55
39672: PUSH
39673: LD_INT 56
39675: PUSH
39676: LD_INT 57
39678: PUSH
39679: LD_INT 58
39681: PUSH
39682: LD_INT 59
39684: PUSH
39685: LD_INT 60
39687: PUSH
39688: LD_INT 61
39690: PUSH
39691: LD_INT 62
39693: PUSH
39694: LD_INT 80
39696: PUSH
39697: LD_INT 82
39699: PUSH
39700: LD_INT 83
39702: PUSH
39703: LD_INT 84
39705: PUSH
39706: LD_INT 85
39708: PUSH
39709: LD_INT 86
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: ST_TO_ADDR
39765: GO 40232
39767: LD_INT 2
39769: DOUBLE
39770: EQUAL
39771: IFTRUE 39775
39773: GO 40001
39775: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39776: LD_ADDR_VAR 0 4
39780: PUSH
39781: LD_INT 35
39783: PUSH
39784: LD_INT 45
39786: PUSH
39787: LD_INT 46
39789: PUSH
39790: LD_INT 47
39792: PUSH
39793: LD_INT 82
39795: PUSH
39796: LD_INT 83
39798: PUSH
39799: LD_INT 84
39801: PUSH
39802: LD_INT 85
39804: PUSH
39805: LD_INT 87
39807: PUSH
39808: LD_INT 70
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 11
39816: PUSH
39817: LD_INT 3
39819: PUSH
39820: LD_INT 4
39822: PUSH
39823: LD_INT 5
39825: PUSH
39826: LD_INT 6
39828: PUSH
39829: LD_INT 15
39831: PUSH
39832: LD_INT 18
39834: PUSH
39835: LD_INT 7
39837: PUSH
39838: LD_INT 17
39840: PUSH
39841: LD_INT 8
39843: PUSH
39844: LD_INT 20
39846: PUSH
39847: LD_INT 21
39849: PUSH
39850: LD_INT 22
39852: PUSH
39853: LD_INT 72
39855: PUSH
39856: LD_INT 26
39858: PUSH
39859: LD_INT 69
39861: PUSH
39862: LD_INT 39
39864: PUSH
39865: LD_INT 40
39867: PUSH
39868: LD_INT 41
39870: PUSH
39871: LD_INT 42
39873: PUSH
39874: LD_INT 43
39876: PUSH
39877: LD_INT 48
39879: PUSH
39880: LD_INT 49
39882: PUSH
39883: LD_INT 50
39885: PUSH
39886: LD_INT 51
39888: PUSH
39889: LD_INT 52
39891: PUSH
39892: LD_INT 53
39894: PUSH
39895: LD_INT 54
39897: PUSH
39898: LD_INT 55
39900: PUSH
39901: LD_INT 56
39903: PUSH
39904: LD_INT 60
39906: PUSH
39907: LD_INT 61
39909: PUSH
39910: LD_INT 62
39912: PUSH
39913: LD_INT 66
39915: PUSH
39916: LD_INT 67
39918: PUSH
39919: LD_INT 68
39921: PUSH
39922: LD_INT 81
39924: PUSH
39925: LD_INT 82
39927: PUSH
39928: LD_INT 83
39930: PUSH
39931: LD_INT 84
39933: PUSH
39934: LD_INT 85
39936: PUSH
39937: LD_INT 87
39939: PUSH
39940: LD_INT 88
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: ST_TO_ADDR
39999: GO 40232
40001: LD_INT 3
40003: DOUBLE
40004: EQUAL
40005: IFTRUE 40009
40007: GO 40231
40009: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40010: LD_ADDR_VAR 0 4
40014: PUSH
40015: LD_INT 46
40017: PUSH
40018: LD_INT 47
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 2
40026: PUSH
40027: LD_INT 82
40029: PUSH
40030: LD_INT 83
40032: PUSH
40033: LD_INT 84
40035: PUSH
40036: LD_INT 85
40038: PUSH
40039: LD_INT 86
40041: PUSH
40042: LD_INT 11
40044: PUSH
40045: LD_INT 9
40047: PUSH
40048: LD_INT 20
40050: PUSH
40051: LD_INT 19
40053: PUSH
40054: LD_INT 21
40056: PUSH
40057: LD_INT 24
40059: PUSH
40060: LD_INT 22
40062: PUSH
40063: LD_INT 25
40065: PUSH
40066: LD_INT 28
40068: PUSH
40069: LD_INT 29
40071: PUSH
40072: LD_INT 30
40074: PUSH
40075: LD_INT 31
40077: PUSH
40078: LD_INT 37
40080: PUSH
40081: LD_INT 38
40083: PUSH
40084: LD_INT 32
40086: PUSH
40087: LD_INT 27
40089: PUSH
40090: LD_INT 33
40092: PUSH
40093: LD_INT 69
40095: PUSH
40096: LD_INT 39
40098: PUSH
40099: LD_INT 34
40101: PUSH
40102: LD_INT 40
40104: PUSH
40105: LD_INT 71
40107: PUSH
40108: LD_INT 23
40110: PUSH
40111: LD_INT 44
40113: PUSH
40114: LD_INT 48
40116: PUSH
40117: LD_INT 49
40119: PUSH
40120: LD_INT 50
40122: PUSH
40123: LD_INT 51
40125: PUSH
40126: LD_INT 52
40128: PUSH
40129: LD_INT 53
40131: PUSH
40132: LD_INT 54
40134: PUSH
40135: LD_INT 55
40137: PUSH
40138: LD_INT 56
40140: PUSH
40141: LD_INT 57
40143: PUSH
40144: LD_INT 58
40146: PUSH
40147: LD_INT 59
40149: PUSH
40150: LD_INT 63
40152: PUSH
40153: LD_INT 64
40155: PUSH
40156: LD_INT 65
40158: PUSH
40159: LD_INT 82
40161: PUSH
40162: LD_INT 83
40164: PUSH
40165: LD_INT 84
40167: PUSH
40168: LD_INT 85
40170: PUSH
40171: LD_INT 86
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: ST_TO_ADDR
40229: GO 40232
40231: POP
// if state > - 1 and state < 3 then
40232: LD_VAR 0 3
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: GREATER
40241: PUSH
40242: LD_VAR 0 3
40246: PUSH
40247: LD_INT 3
40249: LESS
40250: AND
40251: IFFALSE 40308
// for i in result do
40253: LD_ADDR_VAR 0 5
40257: PUSH
40258: LD_VAR 0 4
40262: PUSH
40263: FOR_IN
40264: IFFALSE 40306
// if GetTech ( i , side ) <> state then
40266: LD_VAR 0 5
40270: PPUSH
40271: LD_VAR 0 1
40275: PPUSH
40276: CALL_OW 321
40280: PUSH
40281: LD_VAR 0 3
40285: NONEQUAL
40286: IFFALSE 40304
// result := result diff i ;
40288: LD_ADDR_VAR 0 4
40292: PUSH
40293: LD_VAR 0 4
40297: PUSH
40298: LD_VAR 0 5
40302: DIFF
40303: ST_TO_ADDR
40304: GO 40263
40306: POP
40307: POP
// end ;
40308: LD_VAR 0 4
40312: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40313: LD_INT 0
40315: PPUSH
40316: PPUSH
40317: PPUSH
// result := true ;
40318: LD_ADDR_VAR 0 3
40322: PUSH
40323: LD_INT 1
40325: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40326: LD_ADDR_VAR 0 5
40330: PUSH
40331: LD_VAR 0 2
40335: PPUSH
40336: CALL_OW 480
40340: ST_TO_ADDR
// if not tmp then
40341: LD_VAR 0 5
40345: NOT
40346: IFFALSE 40350
// exit ;
40348: GO 40399
// for i in tmp do
40350: LD_ADDR_VAR 0 4
40354: PUSH
40355: LD_VAR 0 5
40359: PUSH
40360: FOR_IN
40361: IFFALSE 40397
// if GetTech ( i , side ) <> state_researched then
40363: LD_VAR 0 4
40367: PPUSH
40368: LD_VAR 0 1
40372: PPUSH
40373: CALL_OW 321
40377: PUSH
40378: LD_INT 2
40380: NONEQUAL
40381: IFFALSE 40395
// begin result := false ;
40383: LD_ADDR_VAR 0 3
40387: PUSH
40388: LD_INT 0
40390: ST_TO_ADDR
// exit ;
40391: POP
40392: POP
40393: GO 40399
// end ;
40395: GO 40360
40397: POP
40398: POP
// end ;
40399: LD_VAR 0 3
40403: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40404: LD_INT 0
40406: PPUSH
40407: PPUSH
40408: PPUSH
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
40416: PPUSH
40417: PPUSH
40418: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40419: LD_VAR 0 1
40423: NOT
40424: PUSH
40425: LD_VAR 0 1
40429: PPUSH
40430: CALL_OW 257
40434: PUSH
40435: LD_INT 9
40437: NONEQUAL
40438: OR
40439: IFFALSE 40443
// exit ;
40441: GO 41016
// side := GetSide ( unit ) ;
40443: LD_ADDR_VAR 0 9
40447: PUSH
40448: LD_VAR 0 1
40452: PPUSH
40453: CALL_OW 255
40457: ST_TO_ADDR
// tech_space := tech_spacanom ;
40458: LD_ADDR_VAR 0 12
40462: PUSH
40463: LD_INT 29
40465: ST_TO_ADDR
// tech_time := tech_taurad ;
40466: LD_ADDR_VAR 0 13
40470: PUSH
40471: LD_INT 28
40473: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40474: LD_ADDR_VAR 0 11
40478: PUSH
40479: LD_VAR 0 1
40483: PPUSH
40484: CALL_OW 310
40488: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40489: LD_VAR 0 11
40493: PPUSH
40494: CALL_OW 247
40498: PUSH
40499: LD_INT 2
40501: EQUAL
40502: IFFALSE 40506
// exit ;
40504: GO 41016
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40506: LD_ADDR_VAR 0 8
40510: PUSH
40511: LD_INT 81
40513: PUSH
40514: LD_VAR 0 9
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 3
40525: PUSH
40526: LD_INT 21
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PPUSH
40544: CALL_OW 69
40548: ST_TO_ADDR
// if not tmp then
40549: LD_VAR 0 8
40553: NOT
40554: IFFALSE 40558
// exit ;
40556: GO 41016
// if in_unit then
40558: LD_VAR 0 11
40562: IFFALSE 40586
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40564: LD_ADDR_VAR 0 10
40568: PUSH
40569: LD_VAR 0 8
40573: PPUSH
40574: LD_VAR 0 11
40578: PPUSH
40579: CALL_OW 74
40583: ST_TO_ADDR
40584: GO 40606
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40586: LD_ADDR_VAR 0 10
40590: PUSH
40591: LD_VAR 0 8
40595: PPUSH
40596: LD_VAR 0 1
40600: PPUSH
40601: CALL_OW 74
40605: ST_TO_ADDR
// if not enemy then
40606: LD_VAR 0 10
40610: NOT
40611: IFFALSE 40615
// exit ;
40613: GO 41016
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40615: LD_VAR 0 11
40619: PUSH
40620: LD_VAR 0 11
40624: PPUSH
40625: LD_VAR 0 10
40629: PPUSH
40630: CALL_OW 296
40634: PUSH
40635: LD_INT 13
40637: GREATER
40638: AND
40639: PUSH
40640: LD_VAR 0 1
40644: PPUSH
40645: LD_VAR 0 10
40649: PPUSH
40650: CALL_OW 296
40654: PUSH
40655: LD_INT 12
40657: GREATER
40658: OR
40659: IFFALSE 40663
// exit ;
40661: GO 41016
// missile := [ 1 ] ;
40663: LD_ADDR_VAR 0 14
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: EMPTY
40672: LIST
40673: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40674: LD_VAR 0 9
40678: PPUSH
40679: LD_VAR 0 12
40683: PPUSH
40684: CALL_OW 325
40688: IFFALSE 40717
// missile := Replace ( missile , missile + 1 , 2 ) ;
40690: LD_ADDR_VAR 0 14
40694: PUSH
40695: LD_VAR 0 14
40699: PPUSH
40700: LD_VAR 0 14
40704: PUSH
40705: LD_INT 1
40707: PLUS
40708: PPUSH
40709: LD_INT 2
40711: PPUSH
40712: CALL_OW 1
40716: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40717: LD_VAR 0 9
40721: PPUSH
40722: LD_VAR 0 13
40726: PPUSH
40727: CALL_OW 325
40731: PUSH
40732: LD_VAR 0 10
40736: PPUSH
40737: CALL_OW 255
40741: PPUSH
40742: LD_VAR 0 13
40746: PPUSH
40747: CALL_OW 325
40751: NOT
40752: AND
40753: IFFALSE 40782
// missile := Replace ( missile , missile + 1 , 3 ) ;
40755: LD_ADDR_VAR 0 14
40759: PUSH
40760: LD_VAR 0 14
40764: PPUSH
40765: LD_VAR 0 14
40769: PUSH
40770: LD_INT 1
40772: PLUS
40773: PPUSH
40774: LD_INT 3
40776: PPUSH
40777: CALL_OW 1
40781: ST_TO_ADDR
// if missile < 2 then
40782: LD_VAR 0 14
40786: PUSH
40787: LD_INT 2
40789: LESS
40790: IFFALSE 40794
// exit ;
40792: GO 41016
// x := GetX ( enemy ) ;
40794: LD_ADDR_VAR 0 4
40798: PUSH
40799: LD_VAR 0 10
40803: PPUSH
40804: CALL_OW 250
40808: ST_TO_ADDR
// y := GetY ( enemy ) ;
40809: LD_ADDR_VAR 0 5
40813: PUSH
40814: LD_VAR 0 10
40818: PPUSH
40819: CALL_OW 251
40823: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40824: LD_ADDR_VAR 0 6
40828: PUSH
40829: LD_VAR 0 4
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PPUSH
40838: LD_INT 1
40840: PPUSH
40841: CALL_OW 12
40845: PLUS
40846: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40847: LD_ADDR_VAR 0 7
40851: PUSH
40852: LD_VAR 0 5
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PPUSH
40861: LD_INT 1
40863: PPUSH
40864: CALL_OW 12
40868: PLUS
40869: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40870: LD_VAR 0 6
40874: PPUSH
40875: LD_VAR 0 7
40879: PPUSH
40880: CALL_OW 488
40884: NOT
40885: IFFALSE 40907
// begin _x := x ;
40887: LD_ADDR_VAR 0 6
40891: PUSH
40892: LD_VAR 0 4
40896: ST_TO_ADDR
// _y := y ;
40897: LD_ADDR_VAR 0 7
40901: PUSH
40902: LD_VAR 0 5
40906: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40907: LD_ADDR_VAR 0 3
40911: PUSH
40912: LD_INT 1
40914: PPUSH
40915: LD_VAR 0 14
40919: PPUSH
40920: CALL_OW 12
40924: ST_TO_ADDR
// case i of 1 :
40925: LD_VAR 0 3
40929: PUSH
40930: LD_INT 1
40932: DOUBLE
40933: EQUAL
40934: IFTRUE 40938
40936: GO 40955
40938: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40939: LD_VAR 0 1
40943: PPUSH
40944: LD_VAR 0 10
40948: PPUSH
40949: CALL_OW 115
40953: GO 41016
40955: LD_INT 2
40957: DOUBLE
40958: EQUAL
40959: IFTRUE 40963
40961: GO 40985
40963: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40964: LD_VAR 0 1
40968: PPUSH
40969: LD_VAR 0 6
40973: PPUSH
40974: LD_VAR 0 7
40978: PPUSH
40979: CALL_OW 153
40983: GO 41016
40985: LD_INT 3
40987: DOUBLE
40988: EQUAL
40989: IFTRUE 40993
40991: GO 41015
40993: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40994: LD_VAR 0 1
40998: PPUSH
40999: LD_VAR 0 6
41003: PPUSH
41004: LD_VAR 0 7
41008: PPUSH
41009: CALL_OW 154
41013: GO 41016
41015: POP
// end ;
41016: LD_VAR 0 2
41020: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41021: LD_INT 0
41023: PPUSH
41024: PPUSH
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
// if not unit or not building then
41029: LD_VAR 0 1
41033: NOT
41034: PUSH
41035: LD_VAR 0 2
41039: NOT
41040: OR
41041: IFFALSE 41045
// exit ;
41043: GO 41203
// x := GetX ( building ) ;
41045: LD_ADDR_VAR 0 5
41049: PUSH
41050: LD_VAR 0 2
41054: PPUSH
41055: CALL_OW 250
41059: ST_TO_ADDR
// y := GetY ( building ) ;
41060: LD_ADDR_VAR 0 6
41064: PUSH
41065: LD_VAR 0 2
41069: PPUSH
41070: CALL_OW 251
41074: ST_TO_ADDR
// for i = 0 to 5 do
41075: LD_ADDR_VAR 0 4
41079: PUSH
41080: DOUBLE
41081: LD_INT 0
41083: DEC
41084: ST_TO_ADDR
41085: LD_INT 5
41087: PUSH
41088: FOR_TO
41089: IFFALSE 41201
// begin _x := ShiftX ( x , i , 3 ) ;
41091: LD_ADDR_VAR 0 7
41095: PUSH
41096: LD_VAR 0 5
41100: PPUSH
41101: LD_VAR 0 4
41105: PPUSH
41106: LD_INT 3
41108: PPUSH
41109: CALL_OW 272
41113: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41114: LD_ADDR_VAR 0 8
41118: PUSH
41119: LD_VAR 0 6
41123: PPUSH
41124: LD_VAR 0 4
41128: PPUSH
41129: LD_INT 3
41131: PPUSH
41132: CALL_OW 273
41136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41137: LD_VAR 0 7
41141: PPUSH
41142: LD_VAR 0 8
41146: PPUSH
41147: CALL_OW 488
41151: NOT
41152: IFFALSE 41156
// continue ;
41154: GO 41088
// if HexInfo ( _x , _y ) = 0 then
41156: LD_VAR 0 7
41160: PPUSH
41161: LD_VAR 0 8
41165: PPUSH
41166: CALL_OW 428
41170: PUSH
41171: LD_INT 0
41173: EQUAL
41174: IFFALSE 41199
// begin ComMoveXY ( unit , _x , _y ) ;
41176: LD_VAR 0 1
41180: PPUSH
41181: LD_VAR 0 7
41185: PPUSH
41186: LD_VAR 0 8
41190: PPUSH
41191: CALL_OW 111
// exit ;
41195: POP
41196: POP
41197: GO 41203
// end ; end ;
41199: GO 41088
41201: POP
41202: POP
// end ;
41203: LD_VAR 0 3
41207: RET
// export function ScanBase ( side , base_area ) ; begin
41208: LD_INT 0
41210: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41211: LD_ADDR_VAR 0 3
41215: PUSH
41216: LD_VAR 0 2
41220: PPUSH
41221: LD_INT 81
41223: PUSH
41224: LD_VAR 0 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PPUSH
41233: CALL_OW 70
41237: ST_TO_ADDR
// end ;
41238: LD_VAR 0 3
41242: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41243: LD_INT 0
41245: PPUSH
41246: PPUSH
41247: PPUSH
41248: PPUSH
// result := false ;
41249: LD_ADDR_VAR 0 2
41253: PUSH
41254: LD_INT 0
41256: ST_TO_ADDR
// side := GetSide ( unit ) ;
41257: LD_ADDR_VAR 0 3
41261: PUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 255
41271: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41272: LD_ADDR_VAR 0 4
41276: PUSH
41277: LD_VAR 0 1
41281: PPUSH
41282: CALL_OW 248
41286: ST_TO_ADDR
// case nat of 1 :
41287: LD_VAR 0 4
41291: PUSH
41292: LD_INT 1
41294: DOUBLE
41295: EQUAL
41296: IFTRUE 41300
41298: GO 41311
41300: POP
// tech := tech_lassight ; 2 :
41301: LD_ADDR_VAR 0 5
41305: PUSH
41306: LD_INT 12
41308: ST_TO_ADDR
41309: GO 41350
41311: LD_INT 2
41313: DOUBLE
41314: EQUAL
41315: IFTRUE 41319
41317: GO 41330
41319: POP
// tech := tech_mortar ; 3 :
41320: LD_ADDR_VAR 0 5
41324: PUSH
41325: LD_INT 41
41327: ST_TO_ADDR
41328: GO 41350
41330: LD_INT 3
41332: DOUBLE
41333: EQUAL
41334: IFTRUE 41338
41336: GO 41349
41338: POP
// tech := tech_bazooka ; end ;
41339: LD_ADDR_VAR 0 5
41343: PUSH
41344: LD_INT 44
41346: ST_TO_ADDR
41347: GO 41350
41349: POP
// if Researched ( side , tech ) then
41350: LD_VAR 0 3
41354: PPUSH
41355: LD_VAR 0 5
41359: PPUSH
41360: CALL_OW 325
41364: IFFALSE 41391
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41366: LD_ADDR_VAR 0 2
41370: PUSH
41371: LD_INT 5
41373: PUSH
41374: LD_INT 8
41376: PUSH
41377: LD_INT 9
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: LIST
41384: PUSH
41385: LD_VAR 0 4
41389: ARRAY
41390: ST_TO_ADDR
// end ;
41391: LD_VAR 0 2
41395: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41396: LD_INT 0
41398: PPUSH
41399: PPUSH
41400: PPUSH
// if not mines then
41401: LD_VAR 0 2
41405: NOT
41406: IFFALSE 41410
// exit ;
41408: GO 41554
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41410: LD_ADDR_VAR 0 5
41414: PUSH
41415: LD_INT 81
41417: PUSH
41418: LD_VAR 0 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 3
41429: PUSH
41430: LD_INT 21
41432: PUSH
41433: LD_INT 3
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PPUSH
41448: CALL_OW 69
41452: ST_TO_ADDR
// for i in mines do
41453: LD_ADDR_VAR 0 4
41457: PUSH
41458: LD_VAR 0 2
41462: PUSH
41463: FOR_IN
41464: IFFALSE 41552
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41466: LD_VAR 0 4
41470: PUSH
41471: LD_INT 1
41473: ARRAY
41474: PPUSH
41475: LD_VAR 0 4
41479: PUSH
41480: LD_INT 2
41482: ARRAY
41483: PPUSH
41484: CALL_OW 458
41488: NOT
41489: IFFALSE 41493
// continue ;
41491: GO 41463
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41493: LD_VAR 0 4
41497: PUSH
41498: LD_INT 1
41500: ARRAY
41501: PPUSH
41502: LD_VAR 0 4
41506: PUSH
41507: LD_INT 2
41509: ARRAY
41510: PPUSH
41511: CALL_OW 428
41515: PUSH
41516: LD_VAR 0 5
41520: IN
41521: IFFALSE 41550
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41523: LD_VAR 0 4
41527: PUSH
41528: LD_INT 1
41530: ARRAY
41531: PPUSH
41532: LD_VAR 0 4
41536: PUSH
41537: LD_INT 2
41539: ARRAY
41540: PPUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 456
// end ;
41550: GO 41463
41552: POP
41553: POP
// end ;
41554: LD_VAR 0 3
41558: RET
// export function Count ( array ) ; var i ; begin
41559: LD_INT 0
41561: PPUSH
41562: PPUSH
// result := 0 ;
41563: LD_ADDR_VAR 0 2
41567: PUSH
41568: LD_INT 0
41570: ST_TO_ADDR
// for i in array do
41571: LD_ADDR_VAR 0 3
41575: PUSH
41576: LD_VAR 0 1
41580: PUSH
41581: FOR_IN
41582: IFFALSE 41606
// if i then
41584: LD_VAR 0 3
41588: IFFALSE 41604
// result := result + 1 ;
41590: LD_ADDR_VAR 0 2
41594: PUSH
41595: LD_VAR 0 2
41599: PUSH
41600: LD_INT 1
41602: PLUS
41603: ST_TO_ADDR
41604: GO 41581
41606: POP
41607: POP
// end ;
41608: LD_VAR 0 2
41612: RET
// export function IsEmpty ( building ) ; begin
41613: LD_INT 0
41615: PPUSH
// if not building then
41616: LD_VAR 0 1
41620: NOT
41621: IFFALSE 41625
// exit ;
41623: GO 41668
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41625: LD_ADDR_VAR 0 2
41629: PUSH
41630: LD_VAR 0 1
41634: PUSH
41635: LD_INT 22
41637: PUSH
41638: LD_VAR 0 1
41642: PPUSH
41643: CALL_OW 255
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 58
41654: PUSH
41655: EMPTY
41656: LIST
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PPUSH
41662: CALL_OW 69
41666: IN
41667: ST_TO_ADDR
// end ;
41668: LD_VAR 0 2
41672: RET
// export function IsNotFull ( building ) ; var places ; begin
41673: LD_INT 0
41675: PPUSH
41676: PPUSH
// if not building then
41677: LD_VAR 0 1
41681: NOT
41682: IFFALSE 41686
// exit ;
41684: GO 41857
// result := false ;
41686: LD_ADDR_VAR 0 2
41690: PUSH
41691: LD_INT 0
41693: ST_TO_ADDR
// places := 0 ;
41694: LD_ADDR_VAR 0 3
41698: PUSH
41699: LD_INT 0
41701: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41702: LD_VAR 0 1
41706: PPUSH
41707: CALL_OW 266
41711: PUSH
41712: LD_INT 0
41714: DOUBLE
41715: EQUAL
41716: IFTRUE 41774
41718: LD_INT 1
41720: DOUBLE
41721: EQUAL
41722: IFTRUE 41774
41724: LD_INT 6
41726: DOUBLE
41727: EQUAL
41728: IFTRUE 41774
41730: LD_INT 7
41732: DOUBLE
41733: EQUAL
41734: IFTRUE 41774
41736: LD_INT 8
41738: DOUBLE
41739: EQUAL
41740: IFTRUE 41774
41742: LD_INT 4
41744: DOUBLE
41745: EQUAL
41746: IFTRUE 41774
41748: LD_INT 5
41750: DOUBLE
41751: EQUAL
41752: IFTRUE 41774
41754: LD_INT 2
41756: DOUBLE
41757: EQUAL
41758: IFTRUE 41774
41760: LD_INT 3
41762: DOUBLE
41763: EQUAL
41764: IFTRUE 41774
41766: LD_INT 35
41768: DOUBLE
41769: EQUAL
41770: IFTRUE 41774
41772: GO 41785
41774: POP
// places := 6 ; b_bunker , b_breastwork :
41775: LD_ADDR_VAR 0 3
41779: PUSH
41780: LD_INT 6
41782: ST_TO_ADDR
41783: GO 41830
41785: LD_INT 32
41787: DOUBLE
41788: EQUAL
41789: IFTRUE 41799
41791: LD_INT 31
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41799
41797: GO 41810
41799: POP
// places := 1 ; b_control_tower :
41800: LD_ADDR_VAR 0 3
41804: PUSH
41805: LD_INT 1
41807: ST_TO_ADDR
41808: GO 41830
41810: LD_INT 36
41812: DOUBLE
41813: EQUAL
41814: IFTRUE 41818
41816: GO 41829
41818: POP
// places := 3 ; end ;
41819: LD_ADDR_VAR 0 3
41823: PUSH
41824: LD_INT 3
41826: ST_TO_ADDR
41827: GO 41830
41829: POP
// if places then
41830: LD_VAR 0 3
41834: IFFALSE 41857
// result := UnitsInside ( building ) < places ;
41836: LD_ADDR_VAR 0 2
41840: PUSH
41841: LD_VAR 0 1
41845: PPUSH
41846: CALL_OW 313
41850: PUSH
41851: LD_VAR 0 3
41855: LESS
41856: ST_TO_ADDR
// end ;
41857: LD_VAR 0 2
41861: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41862: LD_INT 0
41864: PPUSH
41865: PPUSH
41866: PPUSH
41867: PPUSH
// tmp := [ ] ;
41868: LD_ADDR_VAR 0 3
41872: PUSH
41873: EMPTY
41874: ST_TO_ADDR
// list := [ ] ;
41875: LD_ADDR_VAR 0 5
41879: PUSH
41880: EMPTY
41881: ST_TO_ADDR
// for i = 16 to 25 do
41882: LD_ADDR_VAR 0 4
41886: PUSH
41887: DOUBLE
41888: LD_INT 16
41890: DEC
41891: ST_TO_ADDR
41892: LD_INT 25
41894: PUSH
41895: FOR_TO
41896: IFFALSE 41969
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41898: LD_ADDR_VAR 0 3
41902: PUSH
41903: LD_VAR 0 3
41907: PUSH
41908: LD_INT 22
41910: PUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 255
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 91
41927: PUSH
41928: LD_VAR 0 1
41932: PUSH
41933: LD_INT 6
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 30
41943: PUSH
41944: LD_VAR 0 4
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: PPUSH
41961: CALL_OW 69
41965: ADD
41966: ST_TO_ADDR
41967: GO 41895
41969: POP
41970: POP
// for i = 1 to tmp do
41971: LD_ADDR_VAR 0 4
41975: PUSH
41976: DOUBLE
41977: LD_INT 1
41979: DEC
41980: ST_TO_ADDR
41981: LD_VAR 0 3
41985: PUSH
41986: FOR_TO
41987: IFFALSE 42075
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41989: LD_ADDR_VAR 0 5
41993: PUSH
41994: LD_VAR 0 5
41998: PUSH
41999: LD_VAR 0 3
42003: PUSH
42004: LD_VAR 0 4
42008: ARRAY
42009: PPUSH
42010: CALL_OW 266
42014: PUSH
42015: LD_VAR 0 3
42019: PUSH
42020: LD_VAR 0 4
42024: ARRAY
42025: PPUSH
42026: CALL_OW 250
42030: PUSH
42031: LD_VAR 0 3
42035: PUSH
42036: LD_VAR 0 4
42040: ARRAY
42041: PPUSH
42042: CALL_OW 251
42046: PUSH
42047: LD_VAR 0 3
42051: PUSH
42052: LD_VAR 0 4
42056: ARRAY
42057: PPUSH
42058: CALL_OW 254
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: PUSH
42069: EMPTY
42070: LIST
42071: ADD
42072: ST_TO_ADDR
42073: GO 41986
42075: POP
42076: POP
// result := list ;
42077: LD_ADDR_VAR 0 2
42081: PUSH
42082: LD_VAR 0 5
42086: ST_TO_ADDR
// end ;
42087: LD_VAR 0 2
42091: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42092: LD_INT 0
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
// if not factory then
42101: LD_VAR 0 1
42105: NOT
42106: IFFALSE 42110
// exit ;
42108: GO 42703
// if control = control_apeman then
42110: LD_VAR 0 4
42114: PUSH
42115: LD_INT 5
42117: EQUAL
42118: IFFALSE 42227
// begin tmp := UnitsInside ( factory ) ;
42120: LD_ADDR_VAR 0 8
42124: PUSH
42125: LD_VAR 0 1
42129: PPUSH
42130: CALL_OW 313
42134: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42135: LD_VAR 0 8
42139: PPUSH
42140: LD_INT 25
42142: PUSH
42143: LD_INT 12
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PPUSH
42150: CALL_OW 72
42154: NOT
42155: IFFALSE 42165
// control := control_manual ;
42157: LD_ADDR_VAR 0 4
42161: PUSH
42162: LD_INT 1
42164: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42165: LD_ADDR_VAR 0 8
42169: PUSH
42170: LD_VAR 0 1
42174: PPUSH
42175: CALL 41862 0 1
42179: ST_TO_ADDR
// if tmp then
42180: LD_VAR 0 8
42184: IFFALSE 42227
// begin for i in tmp do
42186: LD_ADDR_VAR 0 7
42190: PUSH
42191: LD_VAR 0 8
42195: PUSH
42196: FOR_IN
42197: IFFALSE 42225
// if i [ 1 ] = b_ext_radio then
42199: LD_VAR 0 7
42203: PUSH
42204: LD_INT 1
42206: ARRAY
42207: PUSH
42208: LD_INT 22
42210: EQUAL
42211: IFFALSE 42223
// begin control := control_remote ;
42213: LD_ADDR_VAR 0 4
42217: PUSH
42218: LD_INT 2
42220: ST_TO_ADDR
// break ;
42221: GO 42225
// end ;
42223: GO 42196
42225: POP
42226: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42227: LD_VAR 0 1
42231: PPUSH
42232: LD_VAR 0 2
42236: PPUSH
42237: LD_VAR 0 3
42241: PPUSH
42242: LD_VAR 0 4
42246: PPUSH
42247: LD_VAR 0 5
42251: PPUSH
42252: CALL_OW 448
42256: IFFALSE 42291
// begin result := [ chassis , engine , control , weapon ] ;
42258: LD_ADDR_VAR 0 6
42262: PUSH
42263: LD_VAR 0 2
42267: PUSH
42268: LD_VAR 0 3
42272: PUSH
42273: LD_VAR 0 4
42277: PUSH
42278: LD_VAR 0 5
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// exit ;
42289: GO 42703
// end ; _chassis := AvailableChassisList ( factory ) ;
42291: LD_ADDR_VAR 0 9
42295: PUSH
42296: LD_VAR 0 1
42300: PPUSH
42301: CALL_OW 475
42305: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42306: LD_ADDR_VAR 0 11
42310: PUSH
42311: LD_VAR 0 1
42315: PPUSH
42316: CALL_OW 476
42320: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42321: LD_ADDR_VAR 0 12
42325: PUSH
42326: LD_VAR 0 1
42330: PPUSH
42331: CALL_OW 477
42335: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42336: LD_ADDR_VAR 0 10
42340: PUSH
42341: LD_VAR 0 1
42345: PPUSH
42346: CALL_OW 478
42350: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42351: LD_VAR 0 9
42355: NOT
42356: PUSH
42357: LD_VAR 0 11
42361: NOT
42362: OR
42363: PUSH
42364: LD_VAR 0 12
42368: NOT
42369: OR
42370: PUSH
42371: LD_VAR 0 10
42375: NOT
42376: OR
42377: IFFALSE 42412
// begin result := [ chassis , engine , control , weapon ] ;
42379: LD_ADDR_VAR 0 6
42383: PUSH
42384: LD_VAR 0 2
42388: PUSH
42389: LD_VAR 0 3
42393: PUSH
42394: LD_VAR 0 4
42398: PUSH
42399: LD_VAR 0 5
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: ST_TO_ADDR
// exit ;
42410: GO 42703
// end ; if not chassis in _chassis then
42412: LD_VAR 0 2
42416: PUSH
42417: LD_VAR 0 9
42421: IN
42422: NOT
42423: IFFALSE 42449
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42425: LD_ADDR_VAR 0 2
42429: PUSH
42430: LD_VAR 0 9
42434: PUSH
42435: LD_INT 1
42437: PPUSH
42438: LD_VAR 0 9
42442: PPUSH
42443: CALL_OW 12
42447: ARRAY
42448: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42449: LD_VAR 0 2
42453: PPUSH
42454: LD_VAR 0 3
42458: PPUSH
42459: CALL 42708 0 2
42463: NOT
42464: IFFALSE 42523
// repeat engine := _engine [ 1 ] ;
42466: LD_ADDR_VAR 0 3
42470: PUSH
42471: LD_VAR 0 11
42475: PUSH
42476: LD_INT 1
42478: ARRAY
42479: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42480: LD_ADDR_VAR 0 11
42484: PUSH
42485: LD_VAR 0 11
42489: PPUSH
42490: LD_INT 1
42492: PPUSH
42493: CALL_OW 3
42497: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42498: LD_VAR 0 2
42502: PPUSH
42503: LD_VAR 0 3
42507: PPUSH
42508: CALL 42708 0 2
42512: PUSH
42513: LD_VAR 0 11
42517: PUSH
42518: EMPTY
42519: EQUAL
42520: OR
42521: IFFALSE 42466
// if not control in _control then
42523: LD_VAR 0 4
42527: PUSH
42528: LD_VAR 0 12
42532: IN
42533: NOT
42534: IFFALSE 42560
// control := _control [ rand ( 1 , _control ) ] ;
42536: LD_ADDR_VAR 0 4
42540: PUSH
42541: LD_VAR 0 12
42545: PUSH
42546: LD_INT 1
42548: PPUSH
42549: LD_VAR 0 12
42553: PPUSH
42554: CALL_OW 12
42558: ARRAY
42559: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42560: LD_VAR 0 2
42564: PPUSH
42565: LD_VAR 0 5
42569: PPUSH
42570: CALL 42928 0 2
42574: NOT
42575: IFFALSE 42634
// repeat weapon := _weapon [ 1 ] ;
42577: LD_ADDR_VAR 0 5
42581: PUSH
42582: LD_VAR 0 10
42586: PUSH
42587: LD_INT 1
42589: ARRAY
42590: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42591: LD_ADDR_VAR 0 10
42595: PUSH
42596: LD_VAR 0 10
42600: PPUSH
42601: LD_INT 1
42603: PPUSH
42604: CALL_OW 3
42608: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42609: LD_VAR 0 2
42613: PPUSH
42614: LD_VAR 0 5
42618: PPUSH
42619: CALL 42928 0 2
42623: PUSH
42624: LD_VAR 0 10
42628: PUSH
42629: EMPTY
42630: EQUAL
42631: OR
42632: IFFALSE 42577
// result := [ ] ;
42634: LD_ADDR_VAR 0 6
42638: PUSH
42639: EMPTY
42640: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42641: LD_VAR 0 1
42645: PPUSH
42646: LD_VAR 0 2
42650: PPUSH
42651: LD_VAR 0 3
42655: PPUSH
42656: LD_VAR 0 4
42660: PPUSH
42661: LD_VAR 0 5
42665: PPUSH
42666: CALL_OW 448
42670: IFFALSE 42703
// result := [ chassis , engine , control , weapon ] ;
42672: LD_ADDR_VAR 0 6
42676: PUSH
42677: LD_VAR 0 2
42681: PUSH
42682: LD_VAR 0 3
42686: PUSH
42687: LD_VAR 0 4
42691: PUSH
42692: LD_VAR 0 5
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: ST_TO_ADDR
// end ;
42703: LD_VAR 0 6
42707: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42708: LD_INT 0
42710: PPUSH
// if not chassis or not engine then
42711: LD_VAR 0 1
42715: NOT
42716: PUSH
42717: LD_VAR 0 2
42721: NOT
42722: OR
42723: IFFALSE 42727
// exit ;
42725: GO 42923
// case engine of engine_solar :
42727: LD_VAR 0 2
42731: PUSH
42732: LD_INT 2
42734: DOUBLE
42735: EQUAL
42736: IFTRUE 42740
42738: GO 42778
42740: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42741: LD_ADDR_VAR 0 3
42745: PUSH
42746: LD_INT 11
42748: PUSH
42749: LD_INT 12
42751: PUSH
42752: LD_INT 13
42754: PUSH
42755: LD_INT 14
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
42776: GO 42907
42778: LD_INT 1
42780: DOUBLE
42781: EQUAL
42782: IFTRUE 42786
42784: GO 42848
42786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42787: LD_ADDR_VAR 0 3
42791: PUSH
42792: LD_INT 11
42794: PUSH
42795: LD_INT 12
42797: PUSH
42798: LD_INT 13
42800: PUSH
42801: LD_INT 14
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: LD_INT 4
42815: PUSH
42816: LD_INT 5
42818: PUSH
42819: LD_INT 21
42821: PUSH
42822: LD_INT 23
42824: PUSH
42825: LD_INT 22
42827: PUSH
42828: LD_INT 24
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: ST_TO_ADDR
42846: GO 42907
42848: LD_INT 3
42850: DOUBLE
42851: EQUAL
42852: IFTRUE 42856
42854: GO 42906
42856: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42857: LD_ADDR_VAR 0 3
42861: PUSH
42862: LD_INT 13
42864: PUSH
42865: LD_INT 14
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: LD_INT 4
42876: PUSH
42877: LD_INT 5
42879: PUSH
42880: LD_INT 21
42882: PUSH
42883: LD_INT 22
42885: PUSH
42886: LD_INT 23
42888: PUSH
42889: LD_INT 24
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: ST_TO_ADDR
42904: GO 42907
42906: POP
// result := ( chassis in result ) ;
42907: LD_ADDR_VAR 0 3
42911: PUSH
42912: LD_VAR 0 1
42916: PUSH
42917: LD_VAR 0 3
42921: IN
42922: ST_TO_ADDR
// end ;
42923: LD_VAR 0 3
42927: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42928: LD_INT 0
42930: PPUSH
// if not chassis or not weapon then
42931: LD_VAR 0 1
42935: NOT
42936: PUSH
42937: LD_VAR 0 2
42941: NOT
42942: OR
42943: IFFALSE 42947
// exit ;
42945: GO 44007
// case weapon of us_machine_gun :
42947: LD_VAR 0 2
42951: PUSH
42952: LD_INT 2
42954: DOUBLE
42955: EQUAL
42956: IFTRUE 42960
42958: GO 42990
42960: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42961: LD_ADDR_VAR 0 3
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 3
42974: PUSH
42975: LD_INT 4
42977: PUSH
42978: LD_INT 5
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: ST_TO_ADDR
42988: GO 43991
42990: LD_INT 3
42992: DOUBLE
42993: EQUAL
42994: IFTRUE 42998
42996: GO 43028
42998: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42999: LD_ADDR_VAR 0 3
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: LD_INT 3
43012: PUSH
43013: LD_INT 4
43015: PUSH
43016: LD_INT 5
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: ST_TO_ADDR
43026: GO 43991
43028: LD_INT 11
43030: DOUBLE
43031: EQUAL
43032: IFTRUE 43036
43034: GO 43066
43036: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43037: LD_ADDR_VAR 0 3
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 3
43050: PUSH
43051: LD_INT 4
43053: PUSH
43054: LD_INT 5
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: ST_TO_ADDR
43064: GO 43991
43066: LD_INT 4
43068: DOUBLE
43069: EQUAL
43070: IFTRUE 43074
43072: GO 43100
43074: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43075: LD_ADDR_VAR 0 3
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: LD_INT 4
43088: PUSH
43089: LD_INT 5
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
43098: GO 43991
43100: LD_INT 5
43102: DOUBLE
43103: EQUAL
43104: IFTRUE 43108
43106: GO 43134
43108: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43109: LD_ADDR_VAR 0 3
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: LD_INT 3
43119: PUSH
43120: LD_INT 4
43122: PUSH
43123: LD_INT 5
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
43132: GO 43991
43134: LD_INT 9
43136: DOUBLE
43137: EQUAL
43138: IFTRUE 43142
43140: GO 43168
43142: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43143: LD_ADDR_VAR 0 3
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: LD_INT 4
43156: PUSH
43157: LD_INT 5
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: ST_TO_ADDR
43166: GO 43991
43168: LD_INT 7
43170: DOUBLE
43171: EQUAL
43172: IFTRUE 43176
43174: GO 43202
43176: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43177: LD_ADDR_VAR 0 3
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: LD_INT 4
43190: PUSH
43191: LD_INT 5
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: ST_TO_ADDR
43200: GO 43991
43202: LD_INT 12
43204: DOUBLE
43205: EQUAL
43206: IFTRUE 43210
43208: GO 43236
43210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43211: LD_ADDR_VAR 0 3
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: LD_INT 4
43224: PUSH
43225: LD_INT 5
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: ST_TO_ADDR
43234: GO 43991
43236: LD_INT 13
43238: DOUBLE
43239: EQUAL
43240: IFTRUE 43244
43242: GO 43270
43244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: LD_INT 3
43255: PUSH
43256: LD_INT 4
43258: PUSH
43259: LD_INT 5
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: ST_TO_ADDR
43268: GO 43991
43270: LD_INT 14
43272: DOUBLE
43273: EQUAL
43274: IFTRUE 43278
43276: GO 43296
43278: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43279: LD_ADDR_VAR 0 3
43283: PUSH
43284: LD_INT 4
43286: PUSH
43287: LD_INT 5
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: ST_TO_ADDR
43294: GO 43991
43296: LD_INT 6
43298: DOUBLE
43299: EQUAL
43300: IFTRUE 43304
43302: GO 43322
43304: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43305: LD_ADDR_VAR 0 3
43309: PUSH
43310: LD_INT 4
43312: PUSH
43313: LD_INT 5
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: ST_TO_ADDR
43320: GO 43991
43322: LD_INT 10
43324: DOUBLE
43325: EQUAL
43326: IFTRUE 43330
43328: GO 43348
43330: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43331: LD_ADDR_VAR 0 3
43335: PUSH
43336: LD_INT 4
43338: PUSH
43339: LD_INT 5
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: ST_TO_ADDR
43346: GO 43991
43348: LD_INT 22
43350: DOUBLE
43351: EQUAL
43352: IFTRUE 43356
43354: GO 43382
43356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43357: LD_ADDR_VAR 0 3
43361: PUSH
43362: LD_INT 11
43364: PUSH
43365: LD_INT 12
43367: PUSH
43368: LD_INT 13
43370: PUSH
43371: LD_INT 14
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
43380: GO 43991
43382: LD_INT 23
43384: DOUBLE
43385: EQUAL
43386: IFTRUE 43390
43388: GO 43416
43390: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43391: LD_ADDR_VAR 0 3
43395: PUSH
43396: LD_INT 11
43398: PUSH
43399: LD_INT 12
43401: PUSH
43402: LD_INT 13
43404: PUSH
43405: LD_INT 14
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: ST_TO_ADDR
43414: GO 43991
43416: LD_INT 24
43418: DOUBLE
43419: EQUAL
43420: IFTRUE 43424
43422: GO 43450
43424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43425: LD_ADDR_VAR 0 3
43429: PUSH
43430: LD_INT 11
43432: PUSH
43433: LD_INT 12
43435: PUSH
43436: LD_INT 13
43438: PUSH
43439: LD_INT 14
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: ST_TO_ADDR
43448: GO 43991
43450: LD_INT 30
43452: DOUBLE
43453: EQUAL
43454: IFTRUE 43458
43456: GO 43484
43458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43459: LD_ADDR_VAR 0 3
43463: PUSH
43464: LD_INT 11
43466: PUSH
43467: LD_INT 12
43469: PUSH
43470: LD_INT 13
43472: PUSH
43473: LD_INT 14
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: ST_TO_ADDR
43482: GO 43991
43484: LD_INT 25
43486: DOUBLE
43487: EQUAL
43488: IFTRUE 43492
43490: GO 43510
43492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43493: LD_ADDR_VAR 0 3
43497: PUSH
43498: LD_INT 13
43500: PUSH
43501: LD_INT 14
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: ST_TO_ADDR
43508: GO 43991
43510: LD_INT 27
43512: DOUBLE
43513: EQUAL
43514: IFTRUE 43518
43516: GO 43536
43518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43519: LD_ADDR_VAR 0 3
43523: PUSH
43524: LD_INT 13
43526: PUSH
43527: LD_INT 14
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: ST_TO_ADDR
43534: GO 43991
43536: LD_INT 92
43538: DOUBLE
43539: EQUAL
43540: IFTRUE 43544
43542: GO 43570
43544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43545: LD_ADDR_VAR 0 3
43549: PUSH
43550: LD_INT 11
43552: PUSH
43553: LD_INT 12
43555: PUSH
43556: LD_INT 13
43558: PUSH
43559: LD_INT 14
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
43568: GO 43991
43570: LD_INT 28
43572: DOUBLE
43573: EQUAL
43574: IFTRUE 43578
43576: GO 43596
43578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43579: LD_ADDR_VAR 0 3
43583: PUSH
43584: LD_INT 13
43586: PUSH
43587: LD_INT 14
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: ST_TO_ADDR
43594: GO 43991
43596: LD_INT 29
43598: DOUBLE
43599: EQUAL
43600: IFTRUE 43604
43602: GO 43622
43604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43605: LD_ADDR_VAR 0 3
43609: PUSH
43610: LD_INT 13
43612: PUSH
43613: LD_INT 14
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: ST_TO_ADDR
43620: GO 43991
43622: LD_INT 31
43624: DOUBLE
43625: EQUAL
43626: IFTRUE 43630
43628: GO 43648
43630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43631: LD_ADDR_VAR 0 3
43635: PUSH
43636: LD_INT 13
43638: PUSH
43639: LD_INT 14
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: ST_TO_ADDR
43646: GO 43991
43648: LD_INT 26
43650: DOUBLE
43651: EQUAL
43652: IFTRUE 43656
43654: GO 43674
43656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43657: LD_ADDR_VAR 0 3
43661: PUSH
43662: LD_INT 13
43664: PUSH
43665: LD_INT 14
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: ST_TO_ADDR
43672: GO 43991
43674: LD_INT 42
43676: DOUBLE
43677: EQUAL
43678: IFTRUE 43682
43680: GO 43708
43682: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43683: LD_ADDR_VAR 0 3
43687: PUSH
43688: LD_INT 21
43690: PUSH
43691: LD_INT 22
43693: PUSH
43694: LD_INT 23
43696: PUSH
43697: LD_INT 24
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
43706: GO 43991
43708: LD_INT 43
43710: DOUBLE
43711: EQUAL
43712: IFTRUE 43716
43714: GO 43742
43716: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43717: LD_ADDR_VAR 0 3
43721: PUSH
43722: LD_INT 21
43724: PUSH
43725: LD_INT 22
43727: PUSH
43728: LD_INT 23
43730: PUSH
43731: LD_INT 24
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: ST_TO_ADDR
43740: GO 43991
43742: LD_INT 44
43744: DOUBLE
43745: EQUAL
43746: IFTRUE 43750
43748: GO 43776
43750: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43751: LD_ADDR_VAR 0 3
43755: PUSH
43756: LD_INT 21
43758: PUSH
43759: LD_INT 22
43761: PUSH
43762: LD_INT 23
43764: PUSH
43765: LD_INT 24
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: ST_TO_ADDR
43774: GO 43991
43776: LD_INT 45
43778: DOUBLE
43779: EQUAL
43780: IFTRUE 43784
43782: GO 43810
43784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43785: LD_ADDR_VAR 0 3
43789: PUSH
43790: LD_INT 21
43792: PUSH
43793: LD_INT 22
43795: PUSH
43796: LD_INT 23
43798: PUSH
43799: LD_INT 24
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: ST_TO_ADDR
43808: GO 43991
43810: LD_INT 49
43812: DOUBLE
43813: EQUAL
43814: IFTRUE 43818
43816: GO 43844
43818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43819: LD_ADDR_VAR 0 3
43823: PUSH
43824: LD_INT 21
43826: PUSH
43827: LD_INT 22
43829: PUSH
43830: LD_INT 23
43832: PUSH
43833: LD_INT 24
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: ST_TO_ADDR
43842: GO 43991
43844: LD_INT 51
43846: DOUBLE
43847: EQUAL
43848: IFTRUE 43852
43850: GO 43878
43852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43853: LD_ADDR_VAR 0 3
43857: PUSH
43858: LD_INT 21
43860: PUSH
43861: LD_INT 22
43863: PUSH
43864: LD_INT 23
43866: PUSH
43867: LD_INT 24
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: ST_TO_ADDR
43876: GO 43991
43878: LD_INT 52
43880: DOUBLE
43881: EQUAL
43882: IFTRUE 43886
43884: GO 43912
43886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43887: LD_ADDR_VAR 0 3
43891: PUSH
43892: LD_INT 21
43894: PUSH
43895: LD_INT 22
43897: PUSH
43898: LD_INT 23
43900: PUSH
43901: LD_INT 24
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: ST_TO_ADDR
43910: GO 43991
43912: LD_INT 53
43914: DOUBLE
43915: EQUAL
43916: IFTRUE 43920
43918: GO 43938
43920: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43921: LD_ADDR_VAR 0 3
43925: PUSH
43926: LD_INT 23
43928: PUSH
43929: LD_INT 24
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: ST_TO_ADDR
43936: GO 43991
43938: LD_INT 46
43940: DOUBLE
43941: EQUAL
43942: IFTRUE 43946
43944: GO 43964
43946: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43947: LD_ADDR_VAR 0 3
43951: PUSH
43952: LD_INT 23
43954: PUSH
43955: LD_INT 24
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: ST_TO_ADDR
43962: GO 43991
43964: LD_INT 47
43966: DOUBLE
43967: EQUAL
43968: IFTRUE 43972
43970: GO 43990
43972: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43973: LD_ADDR_VAR 0 3
43977: PUSH
43978: LD_INT 23
43980: PUSH
43981: LD_INT 24
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: ST_TO_ADDR
43988: GO 43991
43990: POP
// result := ( chassis in result ) ;
43991: LD_ADDR_VAR 0 3
43995: PUSH
43996: LD_VAR 0 1
44000: PUSH
44001: LD_VAR 0 3
44005: IN
44006: ST_TO_ADDR
// end ;
44007: LD_VAR 0 3
44011: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44012: LD_INT 0
44014: PPUSH
44015: PPUSH
44016: PPUSH
44017: PPUSH
44018: PPUSH
44019: PPUSH
44020: PPUSH
// result := array ;
44021: LD_ADDR_VAR 0 5
44025: PUSH
44026: LD_VAR 0 1
44030: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44031: LD_VAR 0 1
44035: NOT
44036: PUSH
44037: LD_VAR 0 2
44041: NOT
44042: OR
44043: PUSH
44044: LD_VAR 0 3
44048: NOT
44049: OR
44050: PUSH
44051: LD_VAR 0 2
44055: PUSH
44056: LD_VAR 0 1
44060: GREATER
44061: OR
44062: PUSH
44063: LD_VAR 0 3
44067: PUSH
44068: LD_VAR 0 1
44072: GREATER
44073: OR
44074: IFFALSE 44078
// exit ;
44076: GO 44374
// if direction then
44078: LD_VAR 0 4
44082: IFFALSE 44146
// begin d := 1 ;
44084: LD_ADDR_VAR 0 9
44088: PUSH
44089: LD_INT 1
44091: ST_TO_ADDR
// if i_from > i_to then
44092: LD_VAR 0 2
44096: PUSH
44097: LD_VAR 0 3
44101: GREATER
44102: IFFALSE 44128
// length := ( array - i_from ) + i_to else
44104: LD_ADDR_VAR 0 11
44108: PUSH
44109: LD_VAR 0 1
44113: PUSH
44114: LD_VAR 0 2
44118: MINUS
44119: PUSH
44120: LD_VAR 0 3
44124: PLUS
44125: ST_TO_ADDR
44126: GO 44144
// length := i_to - i_from ;
44128: LD_ADDR_VAR 0 11
44132: PUSH
44133: LD_VAR 0 3
44137: PUSH
44138: LD_VAR 0 2
44142: MINUS
44143: ST_TO_ADDR
// end else
44144: GO 44207
// begin d := - 1 ;
44146: LD_ADDR_VAR 0 9
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: ST_TO_ADDR
// if i_from > i_to then
44155: LD_VAR 0 2
44159: PUSH
44160: LD_VAR 0 3
44164: GREATER
44165: IFFALSE 44185
// length := i_from - i_to else
44167: LD_ADDR_VAR 0 11
44171: PUSH
44172: LD_VAR 0 2
44176: PUSH
44177: LD_VAR 0 3
44181: MINUS
44182: ST_TO_ADDR
44183: GO 44207
// length := ( array - i_to ) + i_from ;
44185: LD_ADDR_VAR 0 11
44189: PUSH
44190: LD_VAR 0 1
44194: PUSH
44195: LD_VAR 0 3
44199: MINUS
44200: PUSH
44201: LD_VAR 0 2
44205: PLUS
44206: ST_TO_ADDR
// end ; if not length then
44207: LD_VAR 0 11
44211: NOT
44212: IFFALSE 44216
// exit ;
44214: GO 44374
// tmp := array ;
44216: LD_ADDR_VAR 0 10
44220: PUSH
44221: LD_VAR 0 1
44225: ST_TO_ADDR
// for i = 1 to length do
44226: LD_ADDR_VAR 0 6
44230: PUSH
44231: DOUBLE
44232: LD_INT 1
44234: DEC
44235: ST_TO_ADDR
44236: LD_VAR 0 11
44240: PUSH
44241: FOR_TO
44242: IFFALSE 44362
// begin for j = 1 to array do
44244: LD_ADDR_VAR 0 7
44248: PUSH
44249: DOUBLE
44250: LD_INT 1
44252: DEC
44253: ST_TO_ADDR
44254: LD_VAR 0 1
44258: PUSH
44259: FOR_TO
44260: IFFALSE 44348
// begin k := j + d ;
44262: LD_ADDR_VAR 0 8
44266: PUSH
44267: LD_VAR 0 7
44271: PUSH
44272: LD_VAR 0 9
44276: PLUS
44277: ST_TO_ADDR
// if k > array then
44278: LD_VAR 0 8
44282: PUSH
44283: LD_VAR 0 1
44287: GREATER
44288: IFFALSE 44298
// k := 1 ;
44290: LD_ADDR_VAR 0 8
44294: PUSH
44295: LD_INT 1
44297: ST_TO_ADDR
// if not k then
44298: LD_VAR 0 8
44302: NOT
44303: IFFALSE 44315
// k := array ;
44305: LD_ADDR_VAR 0 8
44309: PUSH
44310: LD_VAR 0 1
44314: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44315: LD_ADDR_VAR 0 10
44319: PUSH
44320: LD_VAR 0 10
44324: PPUSH
44325: LD_VAR 0 8
44329: PPUSH
44330: LD_VAR 0 1
44334: PUSH
44335: LD_VAR 0 7
44339: ARRAY
44340: PPUSH
44341: CALL_OW 1
44345: ST_TO_ADDR
// end ;
44346: GO 44259
44348: POP
44349: POP
// array := tmp ;
44350: LD_ADDR_VAR 0 1
44354: PUSH
44355: LD_VAR 0 10
44359: ST_TO_ADDR
// end ;
44360: GO 44241
44362: POP
44363: POP
// result := array ;
44364: LD_ADDR_VAR 0 5
44368: PUSH
44369: LD_VAR 0 1
44373: ST_TO_ADDR
// end ;
44374: LD_VAR 0 5
44378: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44379: LD_INT 0
44381: PPUSH
44382: PPUSH
// result := 0 ;
44383: LD_ADDR_VAR 0 3
44387: PUSH
44388: LD_INT 0
44390: ST_TO_ADDR
// if not array or not value in array then
44391: LD_VAR 0 1
44395: NOT
44396: PUSH
44397: LD_VAR 0 2
44401: PUSH
44402: LD_VAR 0 1
44406: IN
44407: NOT
44408: OR
44409: IFFALSE 44413
// exit ;
44411: GO 44467
// for i = 1 to array do
44413: LD_ADDR_VAR 0 4
44417: PUSH
44418: DOUBLE
44419: LD_INT 1
44421: DEC
44422: ST_TO_ADDR
44423: LD_VAR 0 1
44427: PUSH
44428: FOR_TO
44429: IFFALSE 44465
// if value = array [ i ] then
44431: LD_VAR 0 2
44435: PUSH
44436: LD_VAR 0 1
44440: PUSH
44441: LD_VAR 0 4
44445: ARRAY
44446: EQUAL
44447: IFFALSE 44463
// begin result := i ;
44449: LD_ADDR_VAR 0 3
44453: PUSH
44454: LD_VAR 0 4
44458: ST_TO_ADDR
// exit ;
44459: POP
44460: POP
44461: GO 44467
// end ;
44463: GO 44428
44465: POP
44466: POP
// end ;
44467: LD_VAR 0 3
44471: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44472: LD_INT 0
44474: PPUSH
// vc_chassis := chassis ;
44475: LD_ADDR_OWVAR 37
44479: PUSH
44480: LD_VAR 0 1
44484: ST_TO_ADDR
// vc_engine := engine ;
44485: LD_ADDR_OWVAR 39
44489: PUSH
44490: LD_VAR 0 2
44494: ST_TO_ADDR
// vc_control := control ;
44495: LD_ADDR_OWVAR 38
44499: PUSH
44500: LD_VAR 0 3
44504: ST_TO_ADDR
// vc_weapon := weapon ;
44505: LD_ADDR_OWVAR 40
44509: PUSH
44510: LD_VAR 0 4
44514: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44515: LD_ADDR_OWVAR 41
44519: PUSH
44520: LD_VAR 0 5
44524: ST_TO_ADDR
// end ;
44525: LD_VAR 0 6
44529: RET
// export function WantPlant ( unit ) ; var task ; begin
44530: LD_INT 0
44532: PPUSH
44533: PPUSH
// result := false ;
44534: LD_ADDR_VAR 0 2
44538: PUSH
44539: LD_INT 0
44541: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44542: LD_ADDR_VAR 0 3
44546: PUSH
44547: LD_VAR 0 1
44551: PPUSH
44552: CALL_OW 437
44556: ST_TO_ADDR
// if task then
44557: LD_VAR 0 3
44561: IFFALSE 44589
// if task [ 1 ] [ 1 ] = p then
44563: LD_VAR 0 3
44567: PUSH
44568: LD_INT 1
44570: ARRAY
44571: PUSH
44572: LD_INT 1
44574: ARRAY
44575: PUSH
44576: LD_STRING p
44578: EQUAL
44579: IFFALSE 44589
// result := true ;
44581: LD_ADDR_VAR 0 2
44585: PUSH
44586: LD_INT 1
44588: ST_TO_ADDR
// end ;
44589: LD_VAR 0 2
44593: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44594: LD_INT 0
44596: PPUSH
44597: PPUSH
44598: PPUSH
44599: PPUSH
// if pos < 1 then
44600: LD_VAR 0 2
44604: PUSH
44605: LD_INT 1
44607: LESS
44608: IFFALSE 44612
// exit ;
44610: GO 44915
// if pos = 1 then
44612: LD_VAR 0 2
44616: PUSH
44617: LD_INT 1
44619: EQUAL
44620: IFFALSE 44653
// result := Replace ( arr , pos [ 1 ] , value ) else
44622: LD_ADDR_VAR 0 4
44626: PUSH
44627: LD_VAR 0 1
44631: PPUSH
44632: LD_VAR 0 2
44636: PUSH
44637: LD_INT 1
44639: ARRAY
44640: PPUSH
44641: LD_VAR 0 3
44645: PPUSH
44646: CALL_OW 1
44650: ST_TO_ADDR
44651: GO 44915
// begin tmp := arr ;
44653: LD_ADDR_VAR 0 6
44657: PUSH
44658: LD_VAR 0 1
44662: ST_TO_ADDR
// s_arr := [ tmp ] ;
44663: LD_ADDR_VAR 0 7
44667: PUSH
44668: LD_VAR 0 6
44672: PUSH
44673: EMPTY
44674: LIST
44675: ST_TO_ADDR
// for i = 1 to pos - 1 do
44676: LD_ADDR_VAR 0 5
44680: PUSH
44681: DOUBLE
44682: LD_INT 1
44684: DEC
44685: ST_TO_ADDR
44686: LD_VAR 0 2
44690: PUSH
44691: LD_INT 1
44693: MINUS
44694: PUSH
44695: FOR_TO
44696: IFFALSE 44741
// begin tmp := tmp [ pos [ i ] ] ;
44698: LD_ADDR_VAR 0 6
44702: PUSH
44703: LD_VAR 0 6
44707: PUSH
44708: LD_VAR 0 2
44712: PUSH
44713: LD_VAR 0 5
44717: ARRAY
44718: ARRAY
44719: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44720: LD_ADDR_VAR 0 7
44724: PUSH
44725: LD_VAR 0 7
44729: PUSH
44730: LD_VAR 0 6
44734: PUSH
44735: EMPTY
44736: LIST
44737: ADD
44738: ST_TO_ADDR
// end ;
44739: GO 44695
44741: POP
44742: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44743: LD_ADDR_VAR 0 6
44747: PUSH
44748: LD_VAR 0 6
44752: PPUSH
44753: LD_VAR 0 2
44757: PUSH
44758: LD_VAR 0 2
44762: ARRAY
44763: PPUSH
44764: LD_VAR 0 3
44768: PPUSH
44769: CALL_OW 1
44773: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44774: LD_ADDR_VAR 0 7
44778: PUSH
44779: LD_VAR 0 7
44783: PPUSH
44784: LD_VAR 0 7
44788: PPUSH
44789: LD_VAR 0 6
44793: PPUSH
44794: CALL_OW 1
44798: ST_TO_ADDR
// for i = s_arr downto 2 do
44799: LD_ADDR_VAR 0 5
44803: PUSH
44804: DOUBLE
44805: LD_VAR 0 7
44809: INC
44810: ST_TO_ADDR
44811: LD_INT 2
44813: PUSH
44814: FOR_DOWNTO
44815: IFFALSE 44899
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44817: LD_ADDR_VAR 0 6
44821: PUSH
44822: LD_VAR 0 7
44826: PUSH
44827: LD_VAR 0 5
44831: PUSH
44832: LD_INT 1
44834: MINUS
44835: ARRAY
44836: PPUSH
44837: LD_VAR 0 2
44841: PUSH
44842: LD_VAR 0 5
44846: PUSH
44847: LD_INT 1
44849: MINUS
44850: ARRAY
44851: PPUSH
44852: LD_VAR 0 7
44856: PUSH
44857: LD_VAR 0 5
44861: ARRAY
44862: PPUSH
44863: CALL_OW 1
44867: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44868: LD_ADDR_VAR 0 7
44872: PUSH
44873: LD_VAR 0 7
44877: PPUSH
44878: LD_VAR 0 5
44882: PUSH
44883: LD_INT 1
44885: MINUS
44886: PPUSH
44887: LD_VAR 0 6
44891: PPUSH
44892: CALL_OW 1
44896: ST_TO_ADDR
// end ;
44897: GO 44814
44899: POP
44900: POP
// result := s_arr [ 1 ] ;
44901: LD_ADDR_VAR 0 4
44905: PUSH
44906: LD_VAR 0 7
44910: PUSH
44911: LD_INT 1
44913: ARRAY
44914: ST_TO_ADDR
// end ; end ;
44915: LD_VAR 0 4
44919: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44920: LD_INT 0
44922: PPUSH
44923: PPUSH
// if not list then
44924: LD_VAR 0 1
44928: NOT
44929: IFFALSE 44933
// exit ;
44931: GO 45024
// i := list [ pos1 ] ;
44933: LD_ADDR_VAR 0 5
44937: PUSH
44938: LD_VAR 0 1
44942: PUSH
44943: LD_VAR 0 2
44947: ARRAY
44948: ST_TO_ADDR
// if not i then
44949: LD_VAR 0 5
44953: NOT
44954: IFFALSE 44958
// exit ;
44956: GO 45024
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44958: LD_ADDR_VAR 0 1
44962: PUSH
44963: LD_VAR 0 1
44967: PPUSH
44968: LD_VAR 0 2
44972: PPUSH
44973: LD_VAR 0 1
44977: PUSH
44978: LD_VAR 0 3
44982: ARRAY
44983: PPUSH
44984: CALL_OW 1
44988: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44989: LD_ADDR_VAR 0 1
44993: PUSH
44994: LD_VAR 0 1
44998: PPUSH
44999: LD_VAR 0 3
45003: PPUSH
45004: LD_VAR 0 5
45008: PPUSH
45009: CALL_OW 1
45013: ST_TO_ADDR
// result := list ;
45014: LD_ADDR_VAR 0 4
45018: PUSH
45019: LD_VAR 0 1
45023: ST_TO_ADDR
// end ;
45024: LD_VAR 0 4
45028: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45029: LD_INT 0
45031: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45032: LD_ADDR_VAR 0 5
45036: PUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 250
45046: PPUSH
45047: LD_VAR 0 1
45051: PPUSH
45052: CALL_OW 251
45056: PPUSH
45057: LD_VAR 0 2
45061: PPUSH
45062: LD_VAR 0 3
45066: PPUSH
45067: LD_VAR 0 4
45071: PPUSH
45072: CALL 45082 0 5
45076: ST_TO_ADDR
// end ;
45077: LD_VAR 0 5
45081: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45082: LD_INT 0
45084: PPUSH
45085: PPUSH
45086: PPUSH
45087: PPUSH
// if not list then
45088: LD_VAR 0 3
45092: NOT
45093: IFFALSE 45097
// exit ;
45095: GO 45485
// result := [ ] ;
45097: LD_ADDR_VAR 0 6
45101: PUSH
45102: EMPTY
45103: ST_TO_ADDR
// for i in list do
45104: LD_ADDR_VAR 0 7
45108: PUSH
45109: LD_VAR 0 3
45113: PUSH
45114: FOR_IN
45115: IFFALSE 45317
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45117: LD_ADDR_VAR 0 9
45121: PUSH
45122: LD_VAR 0 7
45126: PPUSH
45127: LD_VAR 0 1
45131: PPUSH
45132: LD_VAR 0 2
45136: PPUSH
45137: CALL_OW 297
45141: ST_TO_ADDR
// if not result then
45142: LD_VAR 0 6
45146: NOT
45147: IFFALSE 45173
// result := [ [ i , tmp ] ] else
45149: LD_ADDR_VAR 0 6
45153: PUSH
45154: LD_VAR 0 7
45158: PUSH
45159: LD_VAR 0 9
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: EMPTY
45169: LIST
45170: ST_TO_ADDR
45171: GO 45315
// begin if result [ result ] [ 2 ] < tmp then
45173: LD_VAR 0 6
45177: PUSH
45178: LD_VAR 0 6
45182: ARRAY
45183: PUSH
45184: LD_INT 2
45186: ARRAY
45187: PUSH
45188: LD_VAR 0 9
45192: LESS
45193: IFFALSE 45235
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45195: LD_ADDR_VAR 0 6
45199: PUSH
45200: LD_VAR 0 6
45204: PPUSH
45205: LD_VAR 0 6
45209: PUSH
45210: LD_INT 1
45212: PLUS
45213: PPUSH
45214: LD_VAR 0 7
45218: PUSH
45219: LD_VAR 0 9
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PPUSH
45228: CALL_OW 2
45232: ST_TO_ADDR
45233: GO 45315
// for j = 1 to result do
45235: LD_ADDR_VAR 0 8
45239: PUSH
45240: DOUBLE
45241: LD_INT 1
45243: DEC
45244: ST_TO_ADDR
45245: LD_VAR 0 6
45249: PUSH
45250: FOR_TO
45251: IFFALSE 45313
// begin if tmp < result [ j ] [ 2 ] then
45253: LD_VAR 0 9
45257: PUSH
45258: LD_VAR 0 6
45262: PUSH
45263: LD_VAR 0 8
45267: ARRAY
45268: PUSH
45269: LD_INT 2
45271: ARRAY
45272: LESS
45273: IFFALSE 45311
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45275: LD_ADDR_VAR 0 6
45279: PUSH
45280: LD_VAR 0 6
45284: PPUSH
45285: LD_VAR 0 8
45289: PPUSH
45290: LD_VAR 0 7
45294: PUSH
45295: LD_VAR 0 9
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PPUSH
45304: CALL_OW 2
45308: ST_TO_ADDR
// break ;
45309: GO 45313
// end ; end ;
45311: GO 45250
45313: POP
45314: POP
// end ; end ;
45315: GO 45114
45317: POP
45318: POP
// if result and not asc then
45319: LD_VAR 0 6
45323: PUSH
45324: LD_VAR 0 4
45328: NOT
45329: AND
45330: IFFALSE 45405
// begin tmp := result ;
45332: LD_ADDR_VAR 0 9
45336: PUSH
45337: LD_VAR 0 6
45341: ST_TO_ADDR
// for i = tmp downto 1 do
45342: LD_ADDR_VAR 0 7
45346: PUSH
45347: DOUBLE
45348: LD_VAR 0 9
45352: INC
45353: ST_TO_ADDR
45354: LD_INT 1
45356: PUSH
45357: FOR_DOWNTO
45358: IFFALSE 45403
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45360: LD_ADDR_VAR 0 6
45364: PUSH
45365: LD_VAR 0 6
45369: PPUSH
45370: LD_VAR 0 9
45374: PUSH
45375: LD_VAR 0 7
45379: MINUS
45380: PUSH
45381: LD_INT 1
45383: PLUS
45384: PPUSH
45385: LD_VAR 0 9
45389: PUSH
45390: LD_VAR 0 7
45394: ARRAY
45395: PPUSH
45396: CALL_OW 1
45400: ST_TO_ADDR
45401: GO 45357
45403: POP
45404: POP
// end ; tmp := [ ] ;
45405: LD_ADDR_VAR 0 9
45409: PUSH
45410: EMPTY
45411: ST_TO_ADDR
// if mode then
45412: LD_VAR 0 5
45416: IFFALSE 45485
// begin for i = 1 to result do
45418: LD_ADDR_VAR 0 7
45422: PUSH
45423: DOUBLE
45424: LD_INT 1
45426: DEC
45427: ST_TO_ADDR
45428: LD_VAR 0 6
45432: PUSH
45433: FOR_TO
45434: IFFALSE 45473
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45436: LD_ADDR_VAR 0 9
45440: PUSH
45441: LD_VAR 0 9
45445: PPUSH
45446: LD_VAR 0 7
45450: PPUSH
45451: LD_VAR 0 6
45455: PUSH
45456: LD_VAR 0 7
45460: ARRAY
45461: PUSH
45462: LD_INT 1
45464: ARRAY
45465: PPUSH
45466: CALL_OW 1
45470: ST_TO_ADDR
45471: GO 45433
45473: POP
45474: POP
// result := tmp ;
45475: LD_ADDR_VAR 0 6
45479: PUSH
45480: LD_VAR 0 9
45484: ST_TO_ADDR
// end ; end ;
45485: LD_VAR 0 6
45489: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45490: LD_INT 0
45492: PPUSH
45493: PPUSH
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45498: LD_ADDR_VAR 0 5
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: ST_TO_ADDR
// if not x or not y then
45520: LD_VAR 0 2
45524: NOT
45525: PUSH
45526: LD_VAR 0 3
45530: NOT
45531: OR
45532: IFFALSE 45536
// exit ;
45534: GO 47186
// if not range then
45536: LD_VAR 0 4
45540: NOT
45541: IFFALSE 45551
// range := 10 ;
45543: LD_ADDR_VAR 0 4
45547: PUSH
45548: LD_INT 10
45550: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45551: LD_ADDR_VAR 0 8
45555: PUSH
45556: LD_INT 81
45558: PUSH
45559: LD_VAR 0 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 92
45570: PUSH
45571: LD_VAR 0 2
45575: PUSH
45576: LD_VAR 0 3
45580: PUSH
45581: LD_VAR 0 4
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 3
45594: PUSH
45595: LD_INT 21
45597: PUSH
45598: LD_INT 3
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: PPUSH
45614: CALL_OW 69
45618: ST_TO_ADDR
// if not tmp then
45619: LD_VAR 0 8
45623: NOT
45624: IFFALSE 45628
// exit ;
45626: GO 47186
// for i in tmp do
45628: LD_ADDR_VAR 0 6
45632: PUSH
45633: LD_VAR 0 8
45637: PUSH
45638: FOR_IN
45639: IFFALSE 47161
// begin points := [ 0 , 0 , 0 ] ;
45641: LD_ADDR_VAR 0 9
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: LIST
45659: ST_TO_ADDR
// bpoints := 1 ;
45660: LD_ADDR_VAR 0 10
45664: PUSH
45665: LD_INT 1
45667: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45668: LD_VAR 0 6
45672: PPUSH
45673: CALL_OW 247
45677: PUSH
45678: LD_INT 1
45680: DOUBLE
45681: EQUAL
45682: IFTRUE 45686
45684: GO 46264
45686: POP
// begin if GetClass ( i ) = 1 then
45687: LD_VAR 0 6
45691: PPUSH
45692: CALL_OW 257
45696: PUSH
45697: LD_INT 1
45699: EQUAL
45700: IFFALSE 45721
// points := [ 10 , 5 , 3 ] ;
45702: LD_ADDR_VAR 0 9
45706: PUSH
45707: LD_INT 10
45709: PUSH
45710: LD_INT 5
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45721: LD_VAR 0 6
45725: PPUSH
45726: CALL_OW 257
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: LD_INT 4
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: LIST
45744: IN
45745: IFFALSE 45766
// points := [ 3 , 2 , 1 ] ;
45747: LD_ADDR_VAR 0 9
45751: PUSH
45752: LD_INT 3
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: LIST
45765: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45766: LD_VAR 0 6
45770: PPUSH
45771: CALL_OW 257
45775: PUSH
45776: LD_INT 5
45778: EQUAL
45779: IFFALSE 45800
// points := [ 130 , 5 , 2 ] ;
45781: LD_ADDR_VAR 0 9
45785: PUSH
45786: LD_INT 130
45788: PUSH
45789: LD_INT 5
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: LIST
45799: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45800: LD_VAR 0 6
45804: PPUSH
45805: CALL_OW 257
45809: PUSH
45810: LD_INT 8
45812: EQUAL
45813: IFFALSE 45834
// points := [ 35 , 35 , 30 ] ;
45815: LD_ADDR_VAR 0 9
45819: PUSH
45820: LD_INT 35
45822: PUSH
45823: LD_INT 35
45825: PUSH
45826: LD_INT 30
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45834: LD_VAR 0 6
45838: PPUSH
45839: CALL_OW 257
45843: PUSH
45844: LD_INT 9
45846: EQUAL
45847: IFFALSE 45868
// points := [ 20 , 55 , 40 ] ;
45849: LD_ADDR_VAR 0 9
45853: PUSH
45854: LD_INT 20
45856: PUSH
45857: LD_INT 55
45859: PUSH
45860: LD_INT 40
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45868: LD_VAR 0 6
45872: PPUSH
45873: CALL_OW 257
45877: PUSH
45878: LD_INT 12
45880: PUSH
45881: LD_INT 16
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: IN
45888: IFFALSE 45909
// points := [ 5 , 3 , 2 ] ;
45890: LD_ADDR_VAR 0 9
45894: PUSH
45895: LD_INT 5
45897: PUSH
45898: LD_INT 3
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45909: LD_VAR 0 6
45913: PPUSH
45914: CALL_OW 257
45918: PUSH
45919: LD_INT 17
45921: EQUAL
45922: IFFALSE 45943
// points := [ 100 , 50 , 75 ] ;
45924: LD_ADDR_VAR 0 9
45928: PUSH
45929: LD_INT 100
45931: PUSH
45932: LD_INT 50
45934: PUSH
45935: LD_INT 75
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45943: LD_VAR 0 6
45947: PPUSH
45948: CALL_OW 257
45952: PUSH
45953: LD_INT 15
45955: EQUAL
45956: IFFALSE 45977
// points := [ 10 , 5 , 3 ] ;
45958: LD_ADDR_VAR 0 9
45962: PUSH
45963: LD_INT 10
45965: PUSH
45966: LD_INT 5
45968: PUSH
45969: LD_INT 3
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45977: LD_VAR 0 6
45981: PPUSH
45982: CALL_OW 257
45986: PUSH
45987: LD_INT 14
45989: EQUAL
45990: IFFALSE 46011
// points := [ 10 , 0 , 0 ] ;
45992: LD_ADDR_VAR 0 9
45996: PUSH
45997: LD_INT 10
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46011: LD_VAR 0 6
46015: PPUSH
46016: CALL_OW 257
46020: PUSH
46021: LD_INT 11
46023: EQUAL
46024: IFFALSE 46045
// points := [ 30 , 10 , 5 ] ;
46026: LD_ADDR_VAR 0 9
46030: PUSH
46031: LD_INT 30
46033: PUSH
46034: LD_INT 10
46036: PUSH
46037: LD_INT 5
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46045: LD_VAR 0 1
46049: PPUSH
46050: LD_INT 5
46052: PPUSH
46053: CALL_OW 321
46057: PUSH
46058: LD_INT 2
46060: EQUAL
46061: IFFALSE 46078
// bpoints := bpoints * 1.8 ;
46063: LD_ADDR_VAR 0 10
46067: PUSH
46068: LD_VAR 0 10
46072: PUSH
46073: LD_REAL  1.80000000000000E+0000
46076: MUL
46077: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46078: LD_VAR 0 6
46082: PPUSH
46083: CALL_OW 257
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 3
46096: PUSH
46097: LD_INT 4
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: IN
46106: PUSH
46107: LD_VAR 0 1
46111: PPUSH
46112: LD_INT 51
46114: PPUSH
46115: CALL_OW 321
46119: PUSH
46120: LD_INT 2
46122: EQUAL
46123: AND
46124: IFFALSE 46141
// bpoints := bpoints * 1.2 ;
46126: LD_ADDR_VAR 0 10
46130: PUSH
46131: LD_VAR 0 10
46135: PUSH
46136: LD_REAL  1.20000000000000E+0000
46139: MUL
46140: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46141: LD_VAR 0 6
46145: PPUSH
46146: CALL_OW 257
46150: PUSH
46151: LD_INT 5
46153: PUSH
46154: LD_INT 7
46156: PUSH
46157: LD_INT 9
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: LIST
46164: IN
46165: PUSH
46166: LD_VAR 0 1
46170: PPUSH
46171: LD_INT 52
46173: PPUSH
46174: CALL_OW 321
46178: PUSH
46179: LD_INT 2
46181: EQUAL
46182: AND
46183: IFFALSE 46200
// bpoints := bpoints * 1.5 ;
46185: LD_ADDR_VAR 0 10
46189: PUSH
46190: LD_VAR 0 10
46194: PUSH
46195: LD_REAL  1.50000000000000E+0000
46198: MUL
46199: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46200: LD_VAR 0 1
46204: PPUSH
46205: LD_INT 66
46207: PPUSH
46208: CALL_OW 321
46212: PUSH
46213: LD_INT 2
46215: EQUAL
46216: IFFALSE 46233
// bpoints := bpoints * 1.1 ;
46218: LD_ADDR_VAR 0 10
46222: PUSH
46223: LD_VAR 0 10
46227: PUSH
46228: LD_REAL  1.10000000000000E+0000
46231: MUL
46232: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46233: LD_ADDR_VAR 0 10
46237: PUSH
46238: LD_VAR 0 10
46242: PUSH
46243: LD_VAR 0 6
46247: PPUSH
46248: LD_INT 1
46250: PPUSH
46251: CALL_OW 259
46255: PUSH
46256: LD_REAL  1.15000000000000E+0000
46259: MUL
46260: MUL
46261: ST_TO_ADDR
// end ; unit_vehicle :
46262: GO 47090
46264: LD_INT 2
46266: DOUBLE
46267: EQUAL
46268: IFTRUE 46272
46270: GO 47078
46272: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46273: LD_VAR 0 6
46277: PPUSH
46278: CALL_OW 264
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 42
46288: PUSH
46289: LD_INT 24
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: IN
46297: IFFALSE 46318
// points := [ 25 , 5 , 3 ] ;
46299: LD_ADDR_VAR 0 9
46303: PUSH
46304: LD_INT 25
46306: PUSH
46307: LD_INT 5
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: LIST
46317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46318: LD_VAR 0 6
46322: PPUSH
46323: CALL_OW 264
46327: PUSH
46328: LD_INT 4
46330: PUSH
46331: LD_INT 43
46333: PUSH
46334: LD_INT 25
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: LIST
46341: IN
46342: IFFALSE 46363
// points := [ 40 , 15 , 5 ] ;
46344: LD_ADDR_VAR 0 9
46348: PUSH
46349: LD_INT 40
46351: PUSH
46352: LD_INT 15
46354: PUSH
46355: LD_INT 5
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: LIST
46362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46363: LD_VAR 0 6
46367: PPUSH
46368: CALL_OW 264
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: LD_INT 23
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: IN
46383: IFFALSE 46404
// points := [ 7 , 25 , 8 ] ;
46385: LD_ADDR_VAR 0 9
46389: PUSH
46390: LD_INT 7
46392: PUSH
46393: LD_INT 25
46395: PUSH
46396: LD_INT 8
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46404: LD_VAR 0 6
46408: PPUSH
46409: CALL_OW 264
46413: PUSH
46414: LD_INT 5
46416: PUSH
46417: LD_INT 27
46419: PUSH
46420: LD_INT 44
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: IN
46428: IFFALSE 46449
// points := [ 14 , 50 , 16 ] ;
46430: LD_ADDR_VAR 0 9
46434: PUSH
46435: LD_INT 14
46437: PUSH
46438: LD_INT 50
46440: PUSH
46441: LD_INT 16
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46449: LD_VAR 0 6
46453: PPUSH
46454: CALL_OW 264
46458: PUSH
46459: LD_INT 6
46461: PUSH
46462: LD_INT 46
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: IN
46469: IFFALSE 46490
// points := [ 32 , 120 , 70 ] ;
46471: LD_ADDR_VAR 0 9
46475: PUSH
46476: LD_INT 32
46478: PUSH
46479: LD_INT 120
46481: PUSH
46482: LD_INT 70
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46490: LD_VAR 0 6
46494: PPUSH
46495: CALL_OW 264
46499: PUSH
46500: LD_INT 7
46502: PUSH
46503: LD_INT 28
46505: PUSH
46506: LD_INT 45
46508: PUSH
46509: LD_INT 92
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: IN
46518: IFFALSE 46539
// points := [ 35 , 20 , 45 ] ;
46520: LD_ADDR_VAR 0 9
46524: PUSH
46525: LD_INT 35
46527: PUSH
46528: LD_INT 20
46530: PUSH
46531: LD_INT 45
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46539: LD_VAR 0 6
46543: PPUSH
46544: CALL_OW 264
46548: PUSH
46549: LD_INT 47
46551: PUSH
46552: EMPTY
46553: LIST
46554: IN
46555: IFFALSE 46576
// points := [ 67 , 45 , 75 ] ;
46557: LD_ADDR_VAR 0 9
46561: PUSH
46562: LD_INT 67
46564: PUSH
46565: LD_INT 45
46567: PUSH
46568: LD_INT 75
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46576: LD_VAR 0 6
46580: PPUSH
46581: CALL_OW 264
46585: PUSH
46586: LD_INT 26
46588: PUSH
46589: EMPTY
46590: LIST
46591: IN
46592: IFFALSE 46613
// points := [ 120 , 30 , 80 ] ;
46594: LD_ADDR_VAR 0 9
46598: PUSH
46599: LD_INT 120
46601: PUSH
46602: LD_INT 30
46604: PUSH
46605: LD_INT 80
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46613: LD_VAR 0 6
46617: PPUSH
46618: CALL_OW 264
46622: PUSH
46623: LD_INT 22
46625: PUSH
46626: EMPTY
46627: LIST
46628: IN
46629: IFFALSE 46650
// points := [ 40 , 1 , 1 ] ;
46631: LD_ADDR_VAR 0 9
46635: PUSH
46636: LD_INT 40
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: LIST
46649: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46650: LD_VAR 0 6
46654: PPUSH
46655: CALL_OW 264
46659: PUSH
46660: LD_INT 29
46662: PUSH
46663: EMPTY
46664: LIST
46665: IN
46666: IFFALSE 46687
// points := [ 70 , 200 , 400 ] ;
46668: LD_ADDR_VAR 0 9
46672: PUSH
46673: LD_INT 70
46675: PUSH
46676: LD_INT 200
46678: PUSH
46679: LD_INT 400
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46687: LD_VAR 0 6
46691: PPUSH
46692: CALL_OW 264
46696: PUSH
46697: LD_INT 14
46699: PUSH
46700: LD_INT 53
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: IN
46707: IFFALSE 46728
// points := [ 40 , 10 , 20 ] ;
46709: LD_ADDR_VAR 0 9
46713: PUSH
46714: LD_INT 40
46716: PUSH
46717: LD_INT 10
46719: PUSH
46720: LD_INT 20
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46728: LD_VAR 0 6
46732: PPUSH
46733: CALL_OW 264
46737: PUSH
46738: LD_INT 9
46740: PUSH
46741: EMPTY
46742: LIST
46743: IN
46744: IFFALSE 46765
// points := [ 5 , 70 , 20 ] ;
46746: LD_ADDR_VAR 0 9
46750: PUSH
46751: LD_INT 5
46753: PUSH
46754: LD_INT 70
46756: PUSH
46757: LD_INT 20
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: LIST
46764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46765: LD_VAR 0 6
46769: PPUSH
46770: CALL_OW 264
46774: PUSH
46775: LD_INT 10
46777: PUSH
46778: EMPTY
46779: LIST
46780: IN
46781: IFFALSE 46802
// points := [ 35 , 110 , 70 ] ;
46783: LD_ADDR_VAR 0 9
46787: PUSH
46788: LD_INT 35
46790: PUSH
46791: LD_INT 110
46793: PUSH
46794: LD_INT 70
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46802: LD_VAR 0 6
46806: PPUSH
46807: CALL_OW 265
46811: PUSH
46812: LD_INT 25
46814: EQUAL
46815: IFFALSE 46836
// points := [ 80 , 65 , 100 ] ;
46817: LD_ADDR_VAR 0 9
46821: PUSH
46822: LD_INT 80
46824: PUSH
46825: LD_INT 65
46827: PUSH
46828: LD_INT 100
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46836: LD_VAR 0 6
46840: PPUSH
46841: CALL_OW 263
46845: PUSH
46846: LD_INT 1
46848: EQUAL
46849: IFFALSE 46884
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46851: LD_ADDR_VAR 0 10
46855: PUSH
46856: LD_VAR 0 10
46860: PUSH
46861: LD_VAR 0 6
46865: PPUSH
46866: CALL_OW 311
46870: PPUSH
46871: LD_INT 3
46873: PPUSH
46874: CALL_OW 259
46878: PUSH
46879: LD_INT 4
46881: MUL
46882: MUL
46883: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46884: LD_VAR 0 6
46888: PPUSH
46889: CALL_OW 263
46893: PUSH
46894: LD_INT 2
46896: EQUAL
46897: IFFALSE 46948
// begin j := IsControledBy ( i ) ;
46899: LD_ADDR_VAR 0 7
46903: PUSH
46904: LD_VAR 0 6
46908: PPUSH
46909: CALL_OW 312
46913: ST_TO_ADDR
// if j then
46914: LD_VAR 0 7
46918: IFFALSE 46948
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46920: LD_ADDR_VAR 0 10
46924: PUSH
46925: LD_VAR 0 10
46929: PUSH
46930: LD_VAR 0 7
46934: PPUSH
46935: LD_INT 3
46937: PPUSH
46938: CALL_OW 259
46942: PUSH
46943: LD_INT 3
46945: MUL
46946: MUL
46947: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46948: LD_VAR 0 6
46952: PPUSH
46953: CALL_OW 264
46957: PUSH
46958: LD_INT 5
46960: PUSH
46961: LD_INT 6
46963: PUSH
46964: LD_INT 46
46966: PUSH
46967: LD_INT 44
46969: PUSH
46970: LD_INT 47
46972: PUSH
46973: LD_INT 45
46975: PUSH
46976: LD_INT 28
46978: PUSH
46979: LD_INT 7
46981: PUSH
46982: LD_INT 27
46984: PUSH
46985: LD_INT 29
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: IN
47000: PUSH
47001: LD_VAR 0 1
47005: PPUSH
47006: LD_INT 52
47008: PPUSH
47009: CALL_OW 321
47013: PUSH
47014: LD_INT 2
47016: EQUAL
47017: AND
47018: IFFALSE 47035
// bpoints := bpoints * 1.2 ;
47020: LD_ADDR_VAR 0 10
47024: PUSH
47025: LD_VAR 0 10
47029: PUSH
47030: LD_REAL  1.20000000000000E+0000
47033: MUL
47034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47035: LD_VAR 0 6
47039: PPUSH
47040: CALL_OW 264
47044: PUSH
47045: LD_INT 6
47047: PUSH
47048: LD_INT 46
47050: PUSH
47051: LD_INT 47
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: LIST
47058: IN
47059: IFFALSE 47076
// bpoints := bpoints * 1.2 ;
47061: LD_ADDR_VAR 0 10
47065: PUSH
47066: LD_VAR 0 10
47070: PUSH
47071: LD_REAL  1.20000000000000E+0000
47074: MUL
47075: ST_TO_ADDR
// end ; unit_building :
47076: GO 47090
47078: LD_INT 3
47080: DOUBLE
47081: EQUAL
47082: IFTRUE 47086
47084: GO 47089
47086: POP
// ; end ;
47087: GO 47090
47089: POP
// for j = 1 to 3 do
47090: LD_ADDR_VAR 0 7
47094: PUSH
47095: DOUBLE
47096: LD_INT 1
47098: DEC
47099: ST_TO_ADDR
47100: LD_INT 3
47102: PUSH
47103: FOR_TO
47104: IFFALSE 47157
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47106: LD_ADDR_VAR 0 5
47110: PUSH
47111: LD_VAR 0 5
47115: PPUSH
47116: LD_VAR 0 7
47120: PPUSH
47121: LD_VAR 0 5
47125: PUSH
47126: LD_VAR 0 7
47130: ARRAY
47131: PUSH
47132: LD_VAR 0 9
47136: PUSH
47137: LD_VAR 0 7
47141: ARRAY
47142: PUSH
47143: LD_VAR 0 10
47147: MUL
47148: PLUS
47149: PPUSH
47150: CALL_OW 1
47154: ST_TO_ADDR
47155: GO 47103
47157: POP
47158: POP
// end ;
47159: GO 45638
47161: POP
47162: POP
// result := Replace ( result , 4 , tmp ) ;
47163: LD_ADDR_VAR 0 5
47167: PUSH
47168: LD_VAR 0 5
47172: PPUSH
47173: LD_INT 4
47175: PPUSH
47176: LD_VAR 0 8
47180: PPUSH
47181: CALL_OW 1
47185: ST_TO_ADDR
// end ;
47186: LD_VAR 0 5
47190: RET
// export function DangerAtRange ( unit , range ) ; begin
47191: LD_INT 0
47193: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47194: LD_ADDR_VAR 0 3
47198: PUSH
47199: LD_VAR 0 1
47203: PPUSH
47204: CALL_OW 255
47208: PPUSH
47209: LD_VAR 0 1
47213: PPUSH
47214: CALL_OW 250
47218: PPUSH
47219: LD_VAR 0 1
47223: PPUSH
47224: CALL_OW 251
47228: PPUSH
47229: LD_VAR 0 2
47233: PPUSH
47234: CALL 45490 0 4
47238: ST_TO_ADDR
// end ;
47239: LD_VAR 0 3
47243: RET
// export function DangerInArea ( side , area ) ; begin
47244: LD_INT 0
47246: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47247: LD_ADDR_VAR 0 3
47251: PUSH
47252: LD_VAR 0 2
47256: PPUSH
47257: LD_INT 81
47259: PUSH
47260: LD_VAR 0 1
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PPUSH
47269: CALL_OW 70
47273: ST_TO_ADDR
// end ;
47274: LD_VAR 0 3
47278: RET
// export function IsExtension ( b ) ; begin
47279: LD_INT 0
47281: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47282: LD_ADDR_VAR 0 2
47286: PUSH
47287: LD_VAR 0 1
47291: PUSH
47292: LD_INT 23
47294: PUSH
47295: LD_INT 20
47297: PUSH
47298: LD_INT 22
47300: PUSH
47301: LD_INT 17
47303: PUSH
47304: LD_INT 24
47306: PUSH
47307: LD_INT 21
47309: PUSH
47310: LD_INT 19
47312: PUSH
47313: LD_INT 16
47315: PUSH
47316: LD_INT 25
47318: PUSH
47319: LD_INT 18
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: IN
47334: ST_TO_ADDR
// end ;
47335: LD_VAR 0 2
47339: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47340: LD_INT 0
47342: PPUSH
47343: PPUSH
47344: PPUSH
// result := [ ] ;
47345: LD_ADDR_VAR 0 4
47349: PUSH
47350: EMPTY
47351: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47352: LD_ADDR_VAR 0 5
47356: PUSH
47357: LD_VAR 0 2
47361: PPUSH
47362: LD_INT 21
47364: PUSH
47365: LD_INT 3
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PPUSH
47372: CALL_OW 70
47376: ST_TO_ADDR
// if not tmp then
47377: LD_VAR 0 5
47381: NOT
47382: IFFALSE 47386
// exit ;
47384: GO 47450
// if checkLink then
47386: LD_VAR 0 3
47390: IFFALSE 47440
// begin for i in tmp do
47392: LD_ADDR_VAR 0 6
47396: PUSH
47397: LD_VAR 0 5
47401: PUSH
47402: FOR_IN
47403: IFFALSE 47438
// if GetBase ( i ) <> base then
47405: LD_VAR 0 6
47409: PPUSH
47410: CALL_OW 274
47414: PUSH
47415: LD_VAR 0 1
47419: NONEQUAL
47420: IFFALSE 47436
// ComLinkToBase ( base , i ) ;
47422: LD_VAR 0 1
47426: PPUSH
47427: LD_VAR 0 6
47431: PPUSH
47432: CALL_OW 169
47436: GO 47402
47438: POP
47439: POP
// end ; result := tmp ;
47440: LD_ADDR_VAR 0 4
47444: PUSH
47445: LD_VAR 0 5
47449: ST_TO_ADDR
// end ;
47450: LD_VAR 0 4
47454: RET
// export function ComComplete ( units , b ) ; var i ; begin
47455: LD_INT 0
47457: PPUSH
47458: PPUSH
// if not units then
47459: LD_VAR 0 1
47463: NOT
47464: IFFALSE 47468
// exit ;
47466: GO 47558
// for i in units do
47468: LD_ADDR_VAR 0 4
47472: PUSH
47473: LD_VAR 0 1
47477: PUSH
47478: FOR_IN
47479: IFFALSE 47556
// if BuildingStatus ( b ) = bs_build then
47481: LD_VAR 0 2
47485: PPUSH
47486: CALL_OW 461
47490: PUSH
47491: LD_INT 1
47493: EQUAL
47494: IFFALSE 47554
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47496: LD_VAR 0 4
47500: PPUSH
47501: LD_STRING h
47503: PUSH
47504: LD_VAR 0 2
47508: PPUSH
47509: CALL_OW 250
47513: PUSH
47514: LD_VAR 0 2
47518: PPUSH
47519: CALL_OW 251
47523: PUSH
47524: LD_VAR 0 2
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: PUSH
47547: EMPTY
47548: LIST
47549: PPUSH
47550: CALL_OW 446
47554: GO 47478
47556: POP
47557: POP
// end ;
47558: LD_VAR 0 3
47562: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47563: LD_INT 0
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47571: LD_VAR 0 1
47575: NOT
47576: PUSH
47577: LD_VAR 0 1
47581: PPUSH
47582: CALL_OW 263
47586: PUSH
47587: LD_INT 2
47589: NONEQUAL
47590: OR
47591: IFFALSE 47595
// exit ;
47593: GO 47911
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47595: LD_ADDR_VAR 0 6
47599: PUSH
47600: LD_INT 22
47602: PUSH
47603: LD_VAR 0 1
47607: PPUSH
47608: CALL_OW 255
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: LD_INT 30
47622: PUSH
47623: LD_INT 36
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 34
47632: PUSH
47633: LD_INT 31
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PPUSH
47649: CALL_OW 69
47653: ST_TO_ADDR
// if not tmp then
47654: LD_VAR 0 6
47658: NOT
47659: IFFALSE 47663
// exit ;
47661: GO 47911
// result := [ ] ;
47663: LD_ADDR_VAR 0 2
47667: PUSH
47668: EMPTY
47669: ST_TO_ADDR
// for i in tmp do
47670: LD_ADDR_VAR 0 3
47674: PUSH
47675: LD_VAR 0 6
47679: PUSH
47680: FOR_IN
47681: IFFALSE 47752
// begin t := UnitsInside ( i ) ;
47683: LD_ADDR_VAR 0 4
47687: PUSH
47688: LD_VAR 0 3
47692: PPUSH
47693: CALL_OW 313
47697: ST_TO_ADDR
// if t then
47698: LD_VAR 0 4
47702: IFFALSE 47750
// for j in t do
47704: LD_ADDR_VAR 0 7
47708: PUSH
47709: LD_VAR 0 4
47713: PUSH
47714: FOR_IN
47715: IFFALSE 47748
// result := Replace ( result , result + 1 , j ) ;
47717: LD_ADDR_VAR 0 2
47721: PUSH
47722: LD_VAR 0 2
47726: PPUSH
47727: LD_VAR 0 2
47731: PUSH
47732: LD_INT 1
47734: PLUS
47735: PPUSH
47736: LD_VAR 0 7
47740: PPUSH
47741: CALL_OW 1
47745: ST_TO_ADDR
47746: GO 47714
47748: POP
47749: POP
// end ;
47750: GO 47680
47752: POP
47753: POP
// if not result then
47754: LD_VAR 0 2
47758: NOT
47759: IFFALSE 47763
// exit ;
47761: GO 47911
// mech := result [ 1 ] ;
47763: LD_ADDR_VAR 0 5
47767: PUSH
47768: LD_VAR 0 2
47772: PUSH
47773: LD_INT 1
47775: ARRAY
47776: ST_TO_ADDR
// if result > 1 then
47777: LD_VAR 0 2
47781: PUSH
47782: LD_INT 1
47784: GREATER
47785: IFFALSE 47897
// begin for i = 2 to result do
47787: LD_ADDR_VAR 0 3
47791: PUSH
47792: DOUBLE
47793: LD_INT 2
47795: DEC
47796: ST_TO_ADDR
47797: LD_VAR 0 2
47801: PUSH
47802: FOR_TO
47803: IFFALSE 47895
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47805: LD_ADDR_VAR 0 4
47809: PUSH
47810: LD_VAR 0 2
47814: PUSH
47815: LD_VAR 0 3
47819: ARRAY
47820: PPUSH
47821: LD_INT 3
47823: PPUSH
47824: CALL_OW 259
47828: PUSH
47829: LD_VAR 0 2
47833: PUSH
47834: LD_VAR 0 3
47838: ARRAY
47839: PPUSH
47840: CALL_OW 432
47844: MINUS
47845: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47846: LD_VAR 0 4
47850: PUSH
47851: LD_VAR 0 5
47855: PPUSH
47856: LD_INT 3
47858: PPUSH
47859: CALL_OW 259
47863: PUSH
47864: LD_VAR 0 5
47868: PPUSH
47869: CALL_OW 432
47873: MINUS
47874: GREATEREQUAL
47875: IFFALSE 47893
// mech := result [ i ] ;
47877: LD_ADDR_VAR 0 5
47881: PUSH
47882: LD_VAR 0 2
47886: PUSH
47887: LD_VAR 0 3
47891: ARRAY
47892: ST_TO_ADDR
// end ;
47893: GO 47802
47895: POP
47896: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47897: LD_VAR 0 1
47901: PPUSH
47902: LD_VAR 0 5
47906: PPUSH
47907: CALL_OW 135
// end ;
47911: LD_VAR 0 2
47915: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47916: LD_INT 0
47918: PPUSH
47919: PPUSH
47920: PPUSH
47921: PPUSH
47922: PPUSH
47923: PPUSH
47924: PPUSH
47925: PPUSH
47926: PPUSH
47927: PPUSH
47928: PPUSH
47929: PPUSH
47930: PPUSH
// result := [ ] ;
47931: LD_ADDR_VAR 0 7
47935: PUSH
47936: EMPTY
47937: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47938: LD_VAR 0 1
47942: PPUSH
47943: CALL_OW 266
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: IN
47958: NOT
47959: IFFALSE 47963
// exit ;
47961: GO 49597
// if name then
47963: LD_VAR 0 3
47967: IFFALSE 47983
// SetBName ( base_dep , name ) ;
47969: LD_VAR 0 1
47973: PPUSH
47974: LD_VAR 0 3
47978: PPUSH
47979: CALL_OW 500
// base := GetBase ( base_dep ) ;
47983: LD_ADDR_VAR 0 15
47987: PUSH
47988: LD_VAR 0 1
47992: PPUSH
47993: CALL_OW 274
47997: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47998: LD_ADDR_VAR 0 16
48002: PUSH
48003: LD_VAR 0 1
48007: PPUSH
48008: CALL_OW 255
48012: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48013: LD_ADDR_VAR 0 17
48017: PUSH
48018: LD_VAR 0 1
48022: PPUSH
48023: CALL_OW 248
48027: ST_TO_ADDR
// if sources then
48028: LD_VAR 0 5
48032: IFFALSE 48079
// for i = 1 to 3 do
48034: LD_ADDR_VAR 0 8
48038: PUSH
48039: DOUBLE
48040: LD_INT 1
48042: DEC
48043: ST_TO_ADDR
48044: LD_INT 3
48046: PUSH
48047: FOR_TO
48048: IFFALSE 48077
// AddResourceType ( base , i , sources [ i ] ) ;
48050: LD_VAR 0 15
48054: PPUSH
48055: LD_VAR 0 8
48059: PPUSH
48060: LD_VAR 0 5
48064: PUSH
48065: LD_VAR 0 8
48069: ARRAY
48070: PPUSH
48071: CALL_OW 276
48075: GO 48047
48077: POP
48078: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48079: LD_ADDR_VAR 0 18
48083: PUSH
48084: LD_VAR 0 15
48088: PPUSH
48089: LD_VAR 0 2
48093: PPUSH
48094: LD_INT 1
48096: PPUSH
48097: CALL 47340 0 3
48101: ST_TO_ADDR
// InitHc ;
48102: CALL_OW 19
// InitUc ;
48106: CALL_OW 18
// uc_side := side ;
48110: LD_ADDR_OWVAR 20
48114: PUSH
48115: LD_VAR 0 16
48119: ST_TO_ADDR
// uc_nation := nation ;
48120: LD_ADDR_OWVAR 21
48124: PUSH
48125: LD_VAR 0 17
48129: ST_TO_ADDR
// if buildings then
48130: LD_VAR 0 18
48134: IFFALSE 49456
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48136: LD_ADDR_VAR 0 19
48140: PUSH
48141: LD_VAR 0 18
48145: PPUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 30
48151: PUSH
48152: LD_INT 29
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 30
48161: PUSH
48162: LD_INT 30
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: PPUSH
48174: CALL_OW 72
48178: ST_TO_ADDR
// if tmp then
48179: LD_VAR 0 19
48183: IFFALSE 48231
// for i in tmp do
48185: LD_ADDR_VAR 0 8
48189: PUSH
48190: LD_VAR 0 19
48194: PUSH
48195: FOR_IN
48196: IFFALSE 48229
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48198: LD_VAR 0 8
48202: PPUSH
48203: CALL_OW 250
48207: PPUSH
48208: LD_VAR 0 8
48212: PPUSH
48213: CALL_OW 251
48217: PPUSH
48218: LD_VAR 0 16
48222: PPUSH
48223: CALL_OW 441
48227: GO 48195
48229: POP
48230: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48231: LD_VAR 0 18
48235: PPUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 30
48241: PUSH
48242: LD_INT 32
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 30
48251: PUSH
48252: LD_INT 33
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: PPUSH
48264: CALL_OW 72
48268: IFFALSE 48356
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48270: LD_ADDR_VAR 0 8
48274: PUSH
48275: LD_VAR 0 18
48279: PPUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 30
48285: PUSH
48286: LD_INT 32
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 30
48295: PUSH
48296: LD_INT 33
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: LIST
48307: PPUSH
48308: CALL_OW 72
48312: PUSH
48313: FOR_IN
48314: IFFALSE 48354
// begin if not GetBWeapon ( i ) then
48316: LD_VAR 0 8
48320: PPUSH
48321: CALL_OW 269
48325: NOT
48326: IFFALSE 48352
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48328: LD_VAR 0 8
48332: PPUSH
48333: LD_VAR 0 8
48337: PPUSH
48338: LD_VAR 0 2
48342: PPUSH
48343: CALL 49602 0 2
48347: PPUSH
48348: CALL_OW 431
// end ;
48352: GO 48313
48354: POP
48355: POP
// end ; for i = 1 to personel do
48356: LD_ADDR_VAR 0 8
48360: PUSH
48361: DOUBLE
48362: LD_INT 1
48364: DEC
48365: ST_TO_ADDR
48366: LD_VAR 0 6
48370: PUSH
48371: FOR_TO
48372: IFFALSE 49436
// begin if i > 4 then
48374: LD_VAR 0 8
48378: PUSH
48379: LD_INT 4
48381: GREATER
48382: IFFALSE 48386
// break ;
48384: GO 49436
// case i of 1 :
48386: LD_VAR 0 8
48390: PUSH
48391: LD_INT 1
48393: DOUBLE
48394: EQUAL
48395: IFTRUE 48399
48397: GO 48479
48399: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48400: LD_ADDR_VAR 0 12
48404: PUSH
48405: LD_VAR 0 18
48409: PPUSH
48410: LD_INT 22
48412: PUSH
48413: LD_VAR 0 16
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 58
48424: PUSH
48425: EMPTY
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 30
48433: PUSH
48434: LD_INT 32
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 30
48443: PUSH
48444: LD_INT 4
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 30
48453: PUSH
48454: LD_INT 5
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: PPUSH
48472: CALL_OW 72
48476: ST_TO_ADDR
48477: GO 48701
48479: LD_INT 2
48481: DOUBLE
48482: EQUAL
48483: IFTRUE 48487
48485: GO 48549
48487: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48488: LD_ADDR_VAR 0 12
48492: PUSH
48493: LD_VAR 0 18
48497: PPUSH
48498: LD_INT 22
48500: PUSH
48501: LD_VAR 0 16
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 30
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 30
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PPUSH
48542: CALL_OW 72
48546: ST_TO_ADDR
48547: GO 48701
48549: LD_INT 3
48551: DOUBLE
48552: EQUAL
48553: IFTRUE 48557
48555: GO 48619
48557: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48558: LD_ADDR_VAR 0 12
48562: PUSH
48563: LD_VAR 0 18
48567: PPUSH
48568: LD_INT 22
48570: PUSH
48571: LD_VAR 0 16
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: LD_INT 30
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 30
48595: PUSH
48596: LD_INT 3
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PPUSH
48612: CALL_OW 72
48616: ST_TO_ADDR
48617: GO 48701
48619: LD_INT 4
48621: DOUBLE
48622: EQUAL
48623: IFTRUE 48627
48625: GO 48700
48627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48628: LD_ADDR_VAR 0 12
48632: PUSH
48633: LD_VAR 0 18
48637: PPUSH
48638: LD_INT 22
48640: PUSH
48641: LD_VAR 0 16
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 30
48655: PUSH
48656: LD_INT 6
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 30
48665: PUSH
48666: LD_INT 7
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 30
48675: PUSH
48676: LD_INT 8
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PPUSH
48693: CALL_OW 72
48697: ST_TO_ADDR
48698: GO 48701
48700: POP
// if i = 1 then
48701: LD_VAR 0 8
48705: PUSH
48706: LD_INT 1
48708: EQUAL
48709: IFFALSE 48820
// begin tmp := [ ] ;
48711: LD_ADDR_VAR 0 19
48715: PUSH
48716: EMPTY
48717: ST_TO_ADDR
// for j in f do
48718: LD_ADDR_VAR 0 9
48722: PUSH
48723: LD_VAR 0 12
48727: PUSH
48728: FOR_IN
48729: IFFALSE 48802
// if GetBType ( j ) = b_bunker then
48731: LD_VAR 0 9
48735: PPUSH
48736: CALL_OW 266
48740: PUSH
48741: LD_INT 32
48743: EQUAL
48744: IFFALSE 48771
// tmp := Insert ( tmp , 1 , j ) else
48746: LD_ADDR_VAR 0 19
48750: PUSH
48751: LD_VAR 0 19
48755: PPUSH
48756: LD_INT 1
48758: PPUSH
48759: LD_VAR 0 9
48763: PPUSH
48764: CALL_OW 2
48768: ST_TO_ADDR
48769: GO 48800
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48771: LD_ADDR_VAR 0 19
48775: PUSH
48776: LD_VAR 0 19
48780: PPUSH
48781: LD_VAR 0 19
48785: PUSH
48786: LD_INT 1
48788: PLUS
48789: PPUSH
48790: LD_VAR 0 9
48794: PPUSH
48795: CALL_OW 2
48799: ST_TO_ADDR
48800: GO 48728
48802: POP
48803: POP
// if tmp then
48804: LD_VAR 0 19
48808: IFFALSE 48820
// f := tmp ;
48810: LD_ADDR_VAR 0 12
48814: PUSH
48815: LD_VAR 0 19
48819: ST_TO_ADDR
// end ; x := personel [ i ] ;
48820: LD_ADDR_VAR 0 13
48824: PUSH
48825: LD_VAR 0 6
48829: PUSH
48830: LD_VAR 0 8
48834: ARRAY
48835: ST_TO_ADDR
// if x = - 1 then
48836: LD_VAR 0 13
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: EQUAL
48845: IFFALSE 49054
// begin for j in f do
48847: LD_ADDR_VAR 0 9
48851: PUSH
48852: LD_VAR 0 12
48856: PUSH
48857: FOR_IN
48858: IFFALSE 49050
// repeat InitHc ;
48860: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48864: LD_VAR 0 9
48868: PPUSH
48869: CALL_OW 266
48873: PUSH
48874: LD_INT 5
48876: EQUAL
48877: IFFALSE 48947
// begin if UnitsInside ( j ) < 3 then
48879: LD_VAR 0 9
48883: PPUSH
48884: CALL_OW 313
48888: PUSH
48889: LD_INT 3
48891: LESS
48892: IFFALSE 48928
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48894: LD_INT 0
48896: PPUSH
48897: LD_INT 5
48899: PUSH
48900: LD_INT 8
48902: PUSH
48903: LD_INT 9
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: LIST
48910: PUSH
48911: LD_VAR 0 17
48915: ARRAY
48916: PPUSH
48917: LD_VAR 0 4
48921: PPUSH
48922: CALL_OW 380
48926: GO 48945
// PrepareHuman ( false , i , skill ) ;
48928: LD_INT 0
48930: PPUSH
48931: LD_VAR 0 8
48935: PPUSH
48936: LD_VAR 0 4
48940: PPUSH
48941: CALL_OW 380
// end else
48945: GO 48964
// PrepareHuman ( false , i , skill ) ;
48947: LD_INT 0
48949: PPUSH
48950: LD_VAR 0 8
48954: PPUSH
48955: LD_VAR 0 4
48959: PPUSH
48960: CALL_OW 380
// un := CreateHuman ;
48964: LD_ADDR_VAR 0 14
48968: PUSH
48969: CALL_OW 44
48973: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48974: LD_ADDR_VAR 0 7
48978: PUSH
48979: LD_VAR 0 7
48983: PPUSH
48984: LD_INT 1
48986: PPUSH
48987: LD_VAR 0 14
48991: PPUSH
48992: CALL_OW 2
48996: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48997: LD_VAR 0 14
49001: PPUSH
49002: LD_VAR 0 9
49006: PPUSH
49007: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49011: LD_VAR 0 9
49015: PPUSH
49016: CALL_OW 313
49020: PUSH
49021: LD_INT 6
49023: EQUAL
49024: PUSH
49025: LD_VAR 0 9
49029: PPUSH
49030: CALL_OW 266
49034: PUSH
49035: LD_INT 32
49037: PUSH
49038: LD_INT 31
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: IN
49045: OR
49046: IFFALSE 48860
49048: GO 48857
49050: POP
49051: POP
// end else
49052: GO 49434
// for j = 1 to x do
49054: LD_ADDR_VAR 0 9
49058: PUSH
49059: DOUBLE
49060: LD_INT 1
49062: DEC
49063: ST_TO_ADDR
49064: LD_VAR 0 13
49068: PUSH
49069: FOR_TO
49070: IFFALSE 49432
// begin InitHc ;
49072: CALL_OW 19
// if not f then
49076: LD_VAR 0 12
49080: NOT
49081: IFFALSE 49170
// begin PrepareHuman ( false , i , skill ) ;
49083: LD_INT 0
49085: PPUSH
49086: LD_VAR 0 8
49090: PPUSH
49091: LD_VAR 0 4
49095: PPUSH
49096: CALL_OW 380
// un := CreateHuman ;
49100: LD_ADDR_VAR 0 14
49104: PUSH
49105: CALL_OW 44
49109: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49110: LD_ADDR_VAR 0 7
49114: PUSH
49115: LD_VAR 0 7
49119: PPUSH
49120: LD_INT 1
49122: PPUSH
49123: LD_VAR 0 14
49127: PPUSH
49128: CALL_OW 2
49132: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49133: LD_VAR 0 14
49137: PPUSH
49138: LD_VAR 0 1
49142: PPUSH
49143: CALL_OW 250
49147: PPUSH
49148: LD_VAR 0 1
49152: PPUSH
49153: CALL_OW 251
49157: PPUSH
49158: LD_INT 10
49160: PPUSH
49161: LD_INT 0
49163: PPUSH
49164: CALL_OW 50
// continue ;
49168: GO 49069
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49170: LD_VAR 0 12
49174: PUSH
49175: LD_INT 1
49177: ARRAY
49178: PPUSH
49179: CALL_OW 313
49183: PUSH
49184: LD_VAR 0 12
49188: PUSH
49189: LD_INT 1
49191: ARRAY
49192: PPUSH
49193: CALL_OW 266
49197: PUSH
49198: LD_INT 32
49200: PUSH
49201: LD_INT 31
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: IN
49208: AND
49209: PUSH
49210: LD_VAR 0 12
49214: PUSH
49215: LD_INT 1
49217: ARRAY
49218: PPUSH
49219: CALL_OW 313
49223: PUSH
49224: LD_INT 6
49226: EQUAL
49227: OR
49228: IFFALSE 49248
// f := Delete ( f , 1 ) ;
49230: LD_ADDR_VAR 0 12
49234: PUSH
49235: LD_VAR 0 12
49239: PPUSH
49240: LD_INT 1
49242: PPUSH
49243: CALL_OW 3
49247: ST_TO_ADDR
// if not f then
49248: LD_VAR 0 12
49252: NOT
49253: IFFALSE 49271
// begin x := x + 2 ;
49255: LD_ADDR_VAR 0 13
49259: PUSH
49260: LD_VAR 0 13
49264: PUSH
49265: LD_INT 2
49267: PLUS
49268: ST_TO_ADDR
// continue ;
49269: GO 49069
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49271: LD_VAR 0 12
49275: PUSH
49276: LD_INT 1
49278: ARRAY
49279: PPUSH
49280: CALL_OW 266
49284: PUSH
49285: LD_INT 5
49287: EQUAL
49288: IFFALSE 49362
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49290: LD_VAR 0 12
49294: PUSH
49295: LD_INT 1
49297: ARRAY
49298: PPUSH
49299: CALL_OW 313
49303: PUSH
49304: LD_INT 3
49306: LESS
49307: IFFALSE 49343
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49309: LD_INT 0
49311: PPUSH
49312: LD_INT 5
49314: PUSH
49315: LD_INT 8
49317: PUSH
49318: LD_INT 9
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: LIST
49325: PUSH
49326: LD_VAR 0 17
49330: ARRAY
49331: PPUSH
49332: LD_VAR 0 4
49336: PPUSH
49337: CALL_OW 380
49341: GO 49360
// PrepareHuman ( false , i , skill ) ;
49343: LD_INT 0
49345: PPUSH
49346: LD_VAR 0 8
49350: PPUSH
49351: LD_VAR 0 4
49355: PPUSH
49356: CALL_OW 380
// end else
49360: GO 49379
// PrepareHuman ( false , i , skill ) ;
49362: LD_INT 0
49364: PPUSH
49365: LD_VAR 0 8
49369: PPUSH
49370: LD_VAR 0 4
49374: PPUSH
49375: CALL_OW 380
// un := CreateHuman ;
49379: LD_ADDR_VAR 0 14
49383: PUSH
49384: CALL_OW 44
49388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49389: LD_ADDR_VAR 0 7
49393: PUSH
49394: LD_VAR 0 7
49398: PPUSH
49399: LD_INT 1
49401: PPUSH
49402: LD_VAR 0 14
49406: PPUSH
49407: CALL_OW 2
49411: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49412: LD_VAR 0 14
49416: PPUSH
49417: LD_VAR 0 12
49421: PUSH
49422: LD_INT 1
49424: ARRAY
49425: PPUSH
49426: CALL_OW 52
// end ;
49430: GO 49069
49432: POP
49433: POP
// end ;
49434: GO 48371
49436: POP
49437: POP
// result := result ^ buildings ;
49438: LD_ADDR_VAR 0 7
49442: PUSH
49443: LD_VAR 0 7
49447: PUSH
49448: LD_VAR 0 18
49452: ADD
49453: ST_TO_ADDR
// end else
49454: GO 49597
// begin for i = 1 to personel do
49456: LD_ADDR_VAR 0 8
49460: PUSH
49461: DOUBLE
49462: LD_INT 1
49464: DEC
49465: ST_TO_ADDR
49466: LD_VAR 0 6
49470: PUSH
49471: FOR_TO
49472: IFFALSE 49595
// begin if i > 4 then
49474: LD_VAR 0 8
49478: PUSH
49479: LD_INT 4
49481: GREATER
49482: IFFALSE 49486
// break ;
49484: GO 49595
// x := personel [ i ] ;
49486: LD_ADDR_VAR 0 13
49490: PUSH
49491: LD_VAR 0 6
49495: PUSH
49496: LD_VAR 0 8
49500: ARRAY
49501: ST_TO_ADDR
// if x = - 1 then
49502: LD_VAR 0 13
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: EQUAL
49511: IFFALSE 49515
// continue ;
49513: GO 49471
// PrepareHuman ( false , i , skill ) ;
49515: LD_INT 0
49517: PPUSH
49518: LD_VAR 0 8
49522: PPUSH
49523: LD_VAR 0 4
49527: PPUSH
49528: CALL_OW 380
// un := CreateHuman ;
49532: LD_ADDR_VAR 0 14
49536: PUSH
49537: CALL_OW 44
49541: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49542: LD_VAR 0 14
49546: PPUSH
49547: LD_VAR 0 1
49551: PPUSH
49552: CALL_OW 250
49556: PPUSH
49557: LD_VAR 0 1
49561: PPUSH
49562: CALL_OW 251
49566: PPUSH
49567: LD_INT 10
49569: PPUSH
49570: LD_INT 0
49572: PPUSH
49573: CALL_OW 50
// result := result ^ un ;
49577: LD_ADDR_VAR 0 7
49581: PUSH
49582: LD_VAR 0 7
49586: PUSH
49587: LD_VAR 0 14
49591: ADD
49592: ST_TO_ADDR
// end ;
49593: GO 49471
49595: POP
49596: POP
// end ; end ;
49597: LD_VAR 0 7
49601: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49602: LD_INT 0
49604: PPUSH
49605: PPUSH
49606: PPUSH
49607: PPUSH
49608: PPUSH
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
49615: PPUSH
49616: PPUSH
49617: PPUSH
49618: PPUSH
49619: PPUSH
// result := false ;
49620: LD_ADDR_VAR 0 3
49624: PUSH
49625: LD_INT 0
49627: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49628: LD_VAR 0 1
49632: NOT
49633: PUSH
49634: LD_VAR 0 1
49638: PPUSH
49639: CALL_OW 266
49643: PUSH
49644: LD_INT 32
49646: PUSH
49647: LD_INT 33
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: IN
49654: NOT
49655: OR
49656: IFFALSE 49660
// exit ;
49658: GO 50769
// nat := GetNation ( tower ) ;
49660: LD_ADDR_VAR 0 12
49664: PUSH
49665: LD_VAR 0 1
49669: PPUSH
49670: CALL_OW 248
49674: ST_TO_ADDR
// side := GetSide ( tower ) ;
49675: LD_ADDR_VAR 0 16
49679: PUSH
49680: LD_VAR 0 1
49684: PPUSH
49685: CALL_OW 255
49689: ST_TO_ADDR
// x := GetX ( tower ) ;
49690: LD_ADDR_VAR 0 10
49694: PUSH
49695: LD_VAR 0 1
49699: PPUSH
49700: CALL_OW 250
49704: ST_TO_ADDR
// y := GetY ( tower ) ;
49705: LD_ADDR_VAR 0 11
49709: PUSH
49710: LD_VAR 0 1
49714: PPUSH
49715: CALL_OW 251
49719: ST_TO_ADDR
// if not x or not y then
49720: LD_VAR 0 10
49724: NOT
49725: PUSH
49726: LD_VAR 0 11
49730: NOT
49731: OR
49732: IFFALSE 49736
// exit ;
49734: GO 50769
// weapon := 0 ;
49736: LD_ADDR_VAR 0 18
49740: PUSH
49741: LD_INT 0
49743: ST_TO_ADDR
// fac_list := [ ] ;
49744: LD_ADDR_VAR 0 17
49748: PUSH
49749: EMPTY
49750: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49751: LD_ADDR_VAR 0 6
49755: PUSH
49756: LD_VAR 0 1
49760: PPUSH
49761: CALL_OW 274
49765: PPUSH
49766: LD_VAR 0 2
49770: PPUSH
49771: LD_INT 0
49773: PPUSH
49774: CALL 47340 0 3
49778: PPUSH
49779: LD_INT 30
49781: PUSH
49782: LD_INT 3
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PPUSH
49789: CALL_OW 72
49793: ST_TO_ADDR
// if not factories then
49794: LD_VAR 0 6
49798: NOT
49799: IFFALSE 49803
// exit ;
49801: GO 50769
// for i in factories do
49803: LD_ADDR_VAR 0 8
49807: PUSH
49808: LD_VAR 0 6
49812: PUSH
49813: FOR_IN
49814: IFFALSE 49839
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49816: LD_ADDR_VAR 0 17
49820: PUSH
49821: LD_VAR 0 17
49825: PUSH
49826: LD_VAR 0 8
49830: PPUSH
49831: CALL_OW 478
49835: UNION
49836: ST_TO_ADDR
49837: GO 49813
49839: POP
49840: POP
// if not fac_list then
49841: LD_VAR 0 17
49845: NOT
49846: IFFALSE 49850
// exit ;
49848: GO 50769
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49850: LD_ADDR_VAR 0 5
49854: PUSH
49855: LD_INT 4
49857: PUSH
49858: LD_INT 5
49860: PUSH
49861: LD_INT 9
49863: PUSH
49864: LD_INT 10
49866: PUSH
49867: LD_INT 6
49869: PUSH
49870: LD_INT 7
49872: PUSH
49873: LD_INT 11
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 27
49887: PUSH
49888: LD_INT 28
49890: PUSH
49891: LD_INT 26
49893: PUSH
49894: LD_INT 30
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 43
49905: PUSH
49906: LD_INT 44
49908: PUSH
49909: LD_INT 46
49911: PUSH
49912: LD_INT 45
49914: PUSH
49915: LD_INT 47
49917: PUSH
49918: LD_INT 49
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: LIST
49933: PUSH
49934: LD_VAR 0 12
49938: ARRAY
49939: ST_TO_ADDR
// list := list isect fac_list ;
49940: LD_ADDR_VAR 0 5
49944: PUSH
49945: LD_VAR 0 5
49949: PUSH
49950: LD_VAR 0 17
49954: ISECT
49955: ST_TO_ADDR
// if not list then
49956: LD_VAR 0 5
49960: NOT
49961: IFFALSE 49965
// exit ;
49963: GO 50769
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49965: LD_VAR 0 12
49969: PUSH
49970: LD_INT 3
49972: EQUAL
49973: PUSH
49974: LD_INT 49
49976: PUSH
49977: LD_VAR 0 5
49981: IN
49982: AND
49983: PUSH
49984: LD_INT 31
49986: PPUSH
49987: LD_VAR 0 16
49991: PPUSH
49992: CALL_OW 321
49996: PUSH
49997: LD_INT 2
49999: EQUAL
50000: AND
50001: IFFALSE 50061
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50003: LD_INT 22
50005: PUSH
50006: LD_VAR 0 16
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 35
50017: PUSH
50018: LD_INT 49
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 91
50027: PUSH
50028: LD_VAR 0 1
50032: PUSH
50033: LD_INT 10
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: LIST
50045: PPUSH
50046: CALL_OW 69
50050: NOT
50051: IFFALSE 50061
// weapon := ru_time_lapser ;
50053: LD_ADDR_VAR 0 18
50057: PUSH
50058: LD_INT 49
50060: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50061: LD_VAR 0 12
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: IN
50076: PUSH
50077: LD_INT 11
50079: PUSH
50080: LD_VAR 0 5
50084: IN
50085: PUSH
50086: LD_INT 30
50088: PUSH
50089: LD_VAR 0 5
50093: IN
50094: OR
50095: AND
50096: PUSH
50097: LD_INT 6
50099: PPUSH
50100: LD_VAR 0 16
50104: PPUSH
50105: CALL_OW 321
50109: PUSH
50110: LD_INT 2
50112: EQUAL
50113: AND
50114: IFFALSE 50279
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50116: LD_INT 22
50118: PUSH
50119: LD_VAR 0 16
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 35
50133: PUSH
50134: LD_INT 11
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 35
50143: PUSH
50144: LD_INT 30
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 91
50158: PUSH
50159: LD_VAR 0 1
50163: PUSH
50164: LD_INT 18
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: LIST
50176: PPUSH
50177: CALL_OW 69
50181: NOT
50182: PUSH
50183: LD_INT 22
50185: PUSH
50186: LD_VAR 0 16
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: LD_INT 30
50200: PUSH
50201: LD_INT 32
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 30
50210: PUSH
50211: LD_INT 33
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 91
50225: PUSH
50226: LD_VAR 0 1
50230: PUSH
50231: LD_INT 12
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: LIST
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: PPUSH
50247: CALL_OW 69
50251: PUSH
50252: LD_INT 2
50254: GREATER
50255: AND
50256: IFFALSE 50279
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50258: LD_ADDR_VAR 0 18
50262: PUSH
50263: LD_INT 11
50265: PUSH
50266: LD_INT 30
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_VAR 0 12
50277: ARRAY
50278: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50279: LD_VAR 0 18
50283: NOT
50284: PUSH
50285: LD_INT 40
50287: PPUSH
50288: LD_VAR 0 16
50292: PPUSH
50293: CALL_OW 321
50297: PUSH
50298: LD_INT 2
50300: EQUAL
50301: AND
50302: PUSH
50303: LD_INT 7
50305: PUSH
50306: LD_VAR 0 5
50310: IN
50311: PUSH
50312: LD_INT 28
50314: PUSH
50315: LD_VAR 0 5
50319: IN
50320: OR
50321: PUSH
50322: LD_INT 45
50324: PUSH
50325: LD_VAR 0 5
50329: IN
50330: OR
50331: AND
50332: IFFALSE 50586
// begin hex := GetHexInfo ( x , y ) ;
50334: LD_ADDR_VAR 0 4
50338: PUSH
50339: LD_VAR 0 10
50343: PPUSH
50344: LD_VAR 0 11
50348: PPUSH
50349: CALL_OW 546
50353: ST_TO_ADDR
// if hex [ 1 ] then
50354: LD_VAR 0 4
50358: PUSH
50359: LD_INT 1
50361: ARRAY
50362: IFFALSE 50366
// exit ;
50364: GO 50769
// height := hex [ 2 ] ;
50366: LD_ADDR_VAR 0 15
50370: PUSH
50371: LD_VAR 0 4
50375: PUSH
50376: LD_INT 2
50378: ARRAY
50379: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50380: LD_ADDR_VAR 0 14
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: LD_INT 5
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: ST_TO_ADDR
// for i in tmp do
50403: LD_ADDR_VAR 0 8
50407: PUSH
50408: LD_VAR 0 14
50412: PUSH
50413: FOR_IN
50414: IFFALSE 50584
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50416: LD_ADDR_VAR 0 9
50420: PUSH
50421: LD_VAR 0 10
50425: PPUSH
50426: LD_VAR 0 8
50430: PPUSH
50431: LD_INT 5
50433: PPUSH
50434: CALL_OW 272
50438: PUSH
50439: LD_VAR 0 11
50443: PPUSH
50444: LD_VAR 0 8
50448: PPUSH
50449: LD_INT 5
50451: PPUSH
50452: CALL_OW 273
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50461: LD_VAR 0 9
50465: PUSH
50466: LD_INT 1
50468: ARRAY
50469: PPUSH
50470: LD_VAR 0 9
50474: PUSH
50475: LD_INT 2
50477: ARRAY
50478: PPUSH
50479: CALL_OW 488
50483: IFFALSE 50582
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50485: LD_ADDR_VAR 0 4
50489: PUSH
50490: LD_VAR 0 9
50494: PUSH
50495: LD_INT 1
50497: ARRAY
50498: PPUSH
50499: LD_VAR 0 9
50503: PUSH
50504: LD_INT 2
50506: ARRAY
50507: PPUSH
50508: CALL_OW 546
50512: ST_TO_ADDR
// if hex [ 1 ] then
50513: LD_VAR 0 4
50517: PUSH
50518: LD_INT 1
50520: ARRAY
50521: IFFALSE 50525
// continue ;
50523: GO 50413
// h := hex [ 2 ] ;
50525: LD_ADDR_VAR 0 13
50529: PUSH
50530: LD_VAR 0 4
50534: PUSH
50535: LD_INT 2
50537: ARRAY
50538: ST_TO_ADDR
// if h + 7 < height then
50539: LD_VAR 0 13
50543: PUSH
50544: LD_INT 7
50546: PLUS
50547: PUSH
50548: LD_VAR 0 15
50552: LESS
50553: IFFALSE 50582
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50555: LD_ADDR_VAR 0 18
50559: PUSH
50560: LD_INT 7
50562: PUSH
50563: LD_INT 28
50565: PUSH
50566: LD_INT 45
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: PUSH
50574: LD_VAR 0 12
50578: ARRAY
50579: ST_TO_ADDR
// break ;
50580: GO 50584
// end ; end ; end ;
50582: GO 50413
50584: POP
50585: POP
// end ; if not weapon then
50586: LD_VAR 0 18
50590: NOT
50591: IFFALSE 50651
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50593: LD_ADDR_VAR 0 5
50597: PUSH
50598: LD_VAR 0 5
50602: PUSH
50603: LD_INT 11
50605: PUSH
50606: LD_INT 30
50608: PUSH
50609: LD_INT 49
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: DIFF
50617: ST_TO_ADDR
// if not list then
50618: LD_VAR 0 5
50622: NOT
50623: IFFALSE 50627
// exit ;
50625: GO 50769
// weapon := list [ rand ( 1 , list ) ] ;
50627: LD_ADDR_VAR 0 18
50631: PUSH
50632: LD_VAR 0 5
50636: PUSH
50637: LD_INT 1
50639: PPUSH
50640: LD_VAR 0 5
50644: PPUSH
50645: CALL_OW 12
50649: ARRAY
50650: ST_TO_ADDR
// end ; if weapon then
50651: LD_VAR 0 18
50655: IFFALSE 50769
// begin tmp := CostOfWeapon ( weapon ) ;
50657: LD_ADDR_VAR 0 14
50661: PUSH
50662: LD_VAR 0 18
50666: PPUSH
50667: CALL_OW 451
50671: ST_TO_ADDR
// j := GetBase ( tower ) ;
50672: LD_ADDR_VAR 0 9
50676: PUSH
50677: LD_VAR 0 1
50681: PPUSH
50682: CALL_OW 274
50686: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50687: LD_VAR 0 9
50691: PPUSH
50692: LD_INT 1
50694: PPUSH
50695: CALL_OW 275
50699: PUSH
50700: LD_VAR 0 14
50704: PUSH
50705: LD_INT 1
50707: ARRAY
50708: GREATEREQUAL
50709: PUSH
50710: LD_VAR 0 9
50714: PPUSH
50715: LD_INT 2
50717: PPUSH
50718: CALL_OW 275
50722: PUSH
50723: LD_VAR 0 14
50727: PUSH
50728: LD_INT 2
50730: ARRAY
50731: GREATEREQUAL
50732: AND
50733: PUSH
50734: LD_VAR 0 9
50738: PPUSH
50739: LD_INT 3
50741: PPUSH
50742: CALL_OW 275
50746: PUSH
50747: LD_VAR 0 14
50751: PUSH
50752: LD_INT 3
50754: ARRAY
50755: GREATEREQUAL
50756: AND
50757: IFFALSE 50769
// result := weapon ;
50759: LD_ADDR_VAR 0 3
50763: PUSH
50764: LD_VAR 0 18
50768: ST_TO_ADDR
// end ; end ;
50769: LD_VAR 0 3
50773: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50774: LD_INT 0
50776: PPUSH
50777: PPUSH
// result := true ;
50778: LD_ADDR_VAR 0 3
50782: PUSH
50783: LD_INT 1
50785: ST_TO_ADDR
// if array1 = array2 then
50786: LD_VAR 0 1
50790: PUSH
50791: LD_VAR 0 2
50795: EQUAL
50796: IFFALSE 50856
// begin for i = 1 to array1 do
50798: LD_ADDR_VAR 0 4
50802: PUSH
50803: DOUBLE
50804: LD_INT 1
50806: DEC
50807: ST_TO_ADDR
50808: LD_VAR 0 1
50812: PUSH
50813: FOR_TO
50814: IFFALSE 50852
// if array1 [ i ] <> array2 [ i ] then
50816: LD_VAR 0 1
50820: PUSH
50821: LD_VAR 0 4
50825: ARRAY
50826: PUSH
50827: LD_VAR 0 2
50831: PUSH
50832: LD_VAR 0 4
50836: ARRAY
50837: NONEQUAL
50838: IFFALSE 50850
// begin result := false ;
50840: LD_ADDR_VAR 0 3
50844: PUSH
50845: LD_INT 0
50847: ST_TO_ADDR
// break ;
50848: GO 50852
// end ;
50850: GO 50813
50852: POP
50853: POP
// end else
50854: GO 50864
// result := false ;
50856: LD_ADDR_VAR 0 3
50860: PUSH
50861: LD_INT 0
50863: ST_TO_ADDR
// end ;
50864: LD_VAR 0 3
50868: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50869: LD_INT 0
50871: PPUSH
50872: PPUSH
// if not array1 or not array2 then
50873: LD_VAR 0 1
50877: NOT
50878: PUSH
50879: LD_VAR 0 2
50883: NOT
50884: OR
50885: IFFALSE 50889
// exit ;
50887: GO 50953
// result := true ;
50889: LD_ADDR_VAR 0 3
50893: PUSH
50894: LD_INT 1
50896: ST_TO_ADDR
// for i = 1 to array1 do
50897: LD_ADDR_VAR 0 4
50901: PUSH
50902: DOUBLE
50903: LD_INT 1
50905: DEC
50906: ST_TO_ADDR
50907: LD_VAR 0 1
50911: PUSH
50912: FOR_TO
50913: IFFALSE 50951
// if array1 [ i ] <> array2 [ i ] then
50915: LD_VAR 0 1
50919: PUSH
50920: LD_VAR 0 4
50924: ARRAY
50925: PUSH
50926: LD_VAR 0 2
50930: PUSH
50931: LD_VAR 0 4
50935: ARRAY
50936: NONEQUAL
50937: IFFALSE 50949
// begin result := false ;
50939: LD_ADDR_VAR 0 3
50943: PUSH
50944: LD_INT 0
50946: ST_TO_ADDR
// break ;
50947: GO 50951
// end ;
50949: GO 50912
50951: POP
50952: POP
// end ;
50953: LD_VAR 0 3
50957: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50958: LD_INT 0
50960: PPUSH
50961: PPUSH
50962: PPUSH
// pom := GetBase ( fac ) ;
50963: LD_ADDR_VAR 0 5
50967: PUSH
50968: LD_VAR 0 1
50972: PPUSH
50973: CALL_OW 274
50977: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50978: LD_ADDR_VAR 0 4
50982: PUSH
50983: LD_VAR 0 2
50987: PUSH
50988: LD_INT 1
50990: ARRAY
50991: PPUSH
50992: LD_VAR 0 2
50996: PUSH
50997: LD_INT 2
50999: ARRAY
51000: PPUSH
51001: LD_VAR 0 2
51005: PUSH
51006: LD_INT 3
51008: ARRAY
51009: PPUSH
51010: LD_VAR 0 2
51014: PUSH
51015: LD_INT 4
51017: ARRAY
51018: PPUSH
51019: CALL_OW 449
51023: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51024: LD_ADDR_VAR 0 3
51028: PUSH
51029: LD_VAR 0 5
51033: PPUSH
51034: LD_INT 1
51036: PPUSH
51037: CALL_OW 275
51041: PUSH
51042: LD_VAR 0 4
51046: PUSH
51047: LD_INT 1
51049: ARRAY
51050: GREATEREQUAL
51051: PUSH
51052: LD_VAR 0 5
51056: PPUSH
51057: LD_INT 2
51059: PPUSH
51060: CALL_OW 275
51064: PUSH
51065: LD_VAR 0 4
51069: PUSH
51070: LD_INT 2
51072: ARRAY
51073: GREATEREQUAL
51074: AND
51075: PUSH
51076: LD_VAR 0 5
51080: PPUSH
51081: LD_INT 3
51083: PPUSH
51084: CALL_OW 275
51088: PUSH
51089: LD_VAR 0 4
51093: PUSH
51094: LD_INT 3
51096: ARRAY
51097: GREATEREQUAL
51098: AND
51099: ST_TO_ADDR
// end ;
51100: LD_VAR 0 3
51104: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51105: LD_INT 0
51107: PPUSH
51108: PPUSH
51109: PPUSH
51110: PPUSH
// pom := GetBase ( building ) ;
51111: LD_ADDR_VAR 0 3
51115: PUSH
51116: LD_VAR 0 1
51120: PPUSH
51121: CALL_OW 274
51125: ST_TO_ADDR
// if not pom then
51126: LD_VAR 0 3
51130: NOT
51131: IFFALSE 51135
// exit ;
51133: GO 51305
// btype := GetBType ( building ) ;
51135: LD_ADDR_VAR 0 5
51139: PUSH
51140: LD_VAR 0 1
51144: PPUSH
51145: CALL_OW 266
51149: ST_TO_ADDR
// if btype = b_armoury then
51150: LD_VAR 0 5
51154: PUSH
51155: LD_INT 4
51157: EQUAL
51158: IFFALSE 51168
// btype := b_barracks ;
51160: LD_ADDR_VAR 0 5
51164: PUSH
51165: LD_INT 5
51167: ST_TO_ADDR
// if btype = b_depot then
51168: LD_VAR 0 5
51172: PUSH
51173: LD_INT 0
51175: EQUAL
51176: IFFALSE 51186
// btype := b_warehouse ;
51178: LD_ADDR_VAR 0 5
51182: PUSH
51183: LD_INT 1
51185: ST_TO_ADDR
// if btype = b_workshop then
51186: LD_VAR 0 5
51190: PUSH
51191: LD_INT 2
51193: EQUAL
51194: IFFALSE 51204
// btype := b_factory ;
51196: LD_ADDR_VAR 0 5
51200: PUSH
51201: LD_INT 3
51203: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51204: LD_ADDR_VAR 0 4
51208: PUSH
51209: LD_VAR 0 5
51213: PPUSH
51214: LD_VAR 0 1
51218: PPUSH
51219: CALL_OW 248
51223: PPUSH
51224: CALL_OW 450
51228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51229: LD_ADDR_VAR 0 2
51233: PUSH
51234: LD_VAR 0 3
51238: PPUSH
51239: LD_INT 1
51241: PPUSH
51242: CALL_OW 275
51246: PUSH
51247: LD_VAR 0 4
51251: PUSH
51252: LD_INT 1
51254: ARRAY
51255: GREATEREQUAL
51256: PUSH
51257: LD_VAR 0 3
51261: PPUSH
51262: LD_INT 2
51264: PPUSH
51265: CALL_OW 275
51269: PUSH
51270: LD_VAR 0 4
51274: PUSH
51275: LD_INT 2
51277: ARRAY
51278: GREATEREQUAL
51279: AND
51280: PUSH
51281: LD_VAR 0 3
51285: PPUSH
51286: LD_INT 3
51288: PPUSH
51289: CALL_OW 275
51293: PUSH
51294: LD_VAR 0 4
51298: PUSH
51299: LD_INT 3
51301: ARRAY
51302: GREATEREQUAL
51303: AND
51304: ST_TO_ADDR
// end ;
51305: LD_VAR 0 2
51309: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51310: LD_INT 0
51312: PPUSH
51313: PPUSH
51314: PPUSH
// pom := GetBase ( building ) ;
51315: LD_ADDR_VAR 0 4
51319: PUSH
51320: LD_VAR 0 1
51324: PPUSH
51325: CALL_OW 274
51329: ST_TO_ADDR
// if not pom then
51330: LD_VAR 0 4
51334: NOT
51335: IFFALSE 51339
// exit ;
51337: GO 51440
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51339: LD_ADDR_VAR 0 5
51343: PUSH
51344: LD_VAR 0 2
51348: PPUSH
51349: LD_VAR 0 1
51353: PPUSH
51354: CALL_OW 248
51358: PPUSH
51359: CALL_OW 450
51363: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51364: LD_ADDR_VAR 0 3
51368: PUSH
51369: LD_VAR 0 4
51373: PPUSH
51374: LD_INT 1
51376: PPUSH
51377: CALL_OW 275
51381: PUSH
51382: LD_VAR 0 5
51386: PUSH
51387: LD_INT 1
51389: ARRAY
51390: GREATEREQUAL
51391: PUSH
51392: LD_VAR 0 4
51396: PPUSH
51397: LD_INT 2
51399: PPUSH
51400: CALL_OW 275
51404: PUSH
51405: LD_VAR 0 5
51409: PUSH
51410: LD_INT 2
51412: ARRAY
51413: GREATEREQUAL
51414: AND
51415: PUSH
51416: LD_VAR 0 4
51420: PPUSH
51421: LD_INT 3
51423: PPUSH
51424: CALL_OW 275
51428: PUSH
51429: LD_VAR 0 5
51433: PUSH
51434: LD_INT 3
51436: ARRAY
51437: GREATEREQUAL
51438: AND
51439: ST_TO_ADDR
// end ;
51440: LD_VAR 0 3
51444: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51445: LD_INT 0
51447: PPUSH
51448: PPUSH
51449: PPUSH
51450: PPUSH
51451: PPUSH
51452: PPUSH
51453: PPUSH
51454: PPUSH
51455: PPUSH
51456: PPUSH
51457: PPUSH
// result := false ;
51458: LD_ADDR_VAR 0 8
51462: PUSH
51463: LD_INT 0
51465: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51466: LD_VAR 0 5
51470: NOT
51471: PUSH
51472: LD_VAR 0 1
51476: NOT
51477: OR
51478: PUSH
51479: LD_VAR 0 2
51483: NOT
51484: OR
51485: PUSH
51486: LD_VAR 0 3
51490: NOT
51491: OR
51492: IFFALSE 51496
// exit ;
51494: GO 52310
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51496: LD_ADDR_VAR 0 14
51500: PUSH
51501: LD_VAR 0 1
51505: PPUSH
51506: LD_VAR 0 2
51510: PPUSH
51511: LD_VAR 0 3
51515: PPUSH
51516: LD_VAR 0 4
51520: PPUSH
51521: LD_VAR 0 5
51525: PUSH
51526: LD_INT 1
51528: ARRAY
51529: PPUSH
51530: CALL_OW 248
51534: PPUSH
51535: LD_INT 0
51537: PPUSH
51538: CALL 53543 0 6
51542: ST_TO_ADDR
// if not hexes then
51543: LD_VAR 0 14
51547: NOT
51548: IFFALSE 51552
// exit ;
51550: GO 52310
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51552: LD_ADDR_VAR 0 17
51556: PUSH
51557: LD_VAR 0 5
51561: PPUSH
51562: LD_INT 22
51564: PUSH
51565: LD_VAR 0 13
51569: PPUSH
51570: CALL_OW 255
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: LD_INT 30
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 30
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PPUSH
51611: CALL_OW 72
51615: ST_TO_ADDR
// for i = 1 to hexes do
51616: LD_ADDR_VAR 0 9
51620: PUSH
51621: DOUBLE
51622: LD_INT 1
51624: DEC
51625: ST_TO_ADDR
51626: LD_VAR 0 14
51630: PUSH
51631: FOR_TO
51632: IFFALSE 52308
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51634: LD_ADDR_VAR 0 13
51638: PUSH
51639: LD_VAR 0 14
51643: PUSH
51644: LD_VAR 0 9
51648: ARRAY
51649: PUSH
51650: LD_INT 1
51652: ARRAY
51653: PPUSH
51654: LD_VAR 0 14
51658: PUSH
51659: LD_VAR 0 9
51663: ARRAY
51664: PUSH
51665: LD_INT 2
51667: ARRAY
51668: PPUSH
51669: CALL_OW 428
51673: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51674: LD_VAR 0 14
51678: PUSH
51679: LD_VAR 0 9
51683: ARRAY
51684: PUSH
51685: LD_INT 1
51687: ARRAY
51688: PPUSH
51689: LD_VAR 0 14
51693: PUSH
51694: LD_VAR 0 9
51698: ARRAY
51699: PUSH
51700: LD_INT 2
51702: ARRAY
51703: PPUSH
51704: CALL_OW 351
51708: PUSH
51709: LD_VAR 0 14
51713: PUSH
51714: LD_VAR 0 9
51718: ARRAY
51719: PUSH
51720: LD_INT 1
51722: ARRAY
51723: PPUSH
51724: LD_VAR 0 14
51728: PUSH
51729: LD_VAR 0 9
51733: ARRAY
51734: PUSH
51735: LD_INT 2
51737: ARRAY
51738: PPUSH
51739: CALL_OW 488
51743: NOT
51744: OR
51745: PUSH
51746: LD_VAR 0 13
51750: PPUSH
51751: CALL_OW 247
51755: PUSH
51756: LD_INT 3
51758: EQUAL
51759: OR
51760: IFFALSE 51766
// exit ;
51762: POP
51763: POP
51764: GO 52310
// if not tmp then
51766: LD_VAR 0 13
51770: NOT
51771: IFFALSE 51775
// continue ;
51773: GO 51631
// result := true ;
51775: LD_ADDR_VAR 0 8
51779: PUSH
51780: LD_INT 1
51782: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51783: LD_VAR 0 6
51787: PUSH
51788: LD_VAR 0 13
51792: PPUSH
51793: CALL_OW 247
51797: PUSH
51798: LD_INT 2
51800: EQUAL
51801: AND
51802: PUSH
51803: LD_VAR 0 13
51807: PPUSH
51808: CALL_OW 263
51812: PUSH
51813: LD_INT 1
51815: EQUAL
51816: AND
51817: IFFALSE 51981
// begin if IsDrivenBy ( tmp ) then
51819: LD_VAR 0 13
51823: PPUSH
51824: CALL_OW 311
51828: IFFALSE 51832
// continue ;
51830: GO 51631
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51832: LD_VAR 0 6
51836: PPUSH
51837: LD_INT 3
51839: PUSH
51840: LD_INT 60
51842: PUSH
51843: EMPTY
51844: LIST
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: LD_INT 55
51855: PUSH
51856: EMPTY
51857: LIST
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PPUSH
51867: CALL_OW 72
51871: IFFALSE 51979
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51873: LD_ADDR_VAR 0 18
51877: PUSH
51878: LD_VAR 0 6
51882: PPUSH
51883: LD_INT 3
51885: PUSH
51886: LD_INT 60
51888: PUSH
51889: EMPTY
51890: LIST
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: LD_INT 55
51901: PUSH
51902: EMPTY
51903: LIST
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PPUSH
51913: CALL_OW 72
51917: PUSH
51918: LD_INT 1
51920: ARRAY
51921: ST_TO_ADDR
// if IsInUnit ( driver ) then
51922: LD_VAR 0 18
51926: PPUSH
51927: CALL_OW 310
51931: IFFALSE 51942
// ComExit ( driver ) ;
51933: LD_VAR 0 18
51937: PPUSH
51938: CALL 77304 0 1
// AddComEnterUnit ( driver , tmp ) ;
51942: LD_VAR 0 18
51946: PPUSH
51947: LD_VAR 0 13
51951: PPUSH
51952: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51956: LD_VAR 0 18
51960: PPUSH
51961: LD_VAR 0 7
51965: PPUSH
51966: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51970: LD_VAR 0 18
51974: PPUSH
51975: CALL_OW 181
// end ; continue ;
51979: GO 51631
// end ; if not cleaners or not tmp in cleaners then
51981: LD_VAR 0 6
51985: NOT
51986: PUSH
51987: LD_VAR 0 13
51991: PUSH
51992: LD_VAR 0 6
51996: IN
51997: NOT
51998: OR
51999: IFFALSE 52306
// begin if dep then
52001: LD_VAR 0 17
52005: IFFALSE 52141
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52007: LD_ADDR_VAR 0 16
52011: PUSH
52012: LD_VAR 0 17
52016: PUSH
52017: LD_INT 1
52019: ARRAY
52020: PPUSH
52021: CALL_OW 250
52025: PPUSH
52026: LD_VAR 0 17
52030: PUSH
52031: LD_INT 1
52033: ARRAY
52034: PPUSH
52035: CALL_OW 254
52039: PPUSH
52040: LD_INT 5
52042: PPUSH
52043: CALL_OW 272
52047: PUSH
52048: LD_VAR 0 17
52052: PUSH
52053: LD_INT 1
52055: ARRAY
52056: PPUSH
52057: CALL_OW 251
52061: PPUSH
52062: LD_VAR 0 17
52066: PUSH
52067: LD_INT 1
52069: ARRAY
52070: PPUSH
52071: CALL_OW 254
52075: PPUSH
52076: LD_INT 5
52078: PPUSH
52079: CALL_OW 273
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52088: LD_VAR 0 16
52092: PUSH
52093: LD_INT 1
52095: ARRAY
52096: PPUSH
52097: LD_VAR 0 16
52101: PUSH
52102: LD_INT 2
52104: ARRAY
52105: PPUSH
52106: CALL_OW 488
52110: IFFALSE 52141
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52112: LD_VAR 0 13
52116: PPUSH
52117: LD_VAR 0 16
52121: PUSH
52122: LD_INT 1
52124: ARRAY
52125: PPUSH
52126: LD_VAR 0 16
52130: PUSH
52131: LD_INT 2
52133: ARRAY
52134: PPUSH
52135: CALL_OW 111
// continue ;
52139: GO 51631
// end ; end ; r := GetDir ( tmp ) ;
52141: LD_ADDR_VAR 0 15
52145: PUSH
52146: LD_VAR 0 13
52150: PPUSH
52151: CALL_OW 254
52155: ST_TO_ADDR
// if r = 5 then
52156: LD_VAR 0 15
52160: PUSH
52161: LD_INT 5
52163: EQUAL
52164: IFFALSE 52174
// r := 0 ;
52166: LD_ADDR_VAR 0 15
52170: PUSH
52171: LD_INT 0
52173: ST_TO_ADDR
// for j = r to 5 do
52174: LD_ADDR_VAR 0 10
52178: PUSH
52179: DOUBLE
52180: LD_VAR 0 15
52184: DEC
52185: ST_TO_ADDR
52186: LD_INT 5
52188: PUSH
52189: FOR_TO
52190: IFFALSE 52304
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52192: LD_ADDR_VAR 0 11
52196: PUSH
52197: LD_VAR 0 13
52201: PPUSH
52202: CALL_OW 250
52206: PPUSH
52207: LD_VAR 0 10
52211: PPUSH
52212: LD_INT 2
52214: PPUSH
52215: CALL_OW 272
52219: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52220: LD_ADDR_VAR 0 12
52224: PUSH
52225: LD_VAR 0 13
52229: PPUSH
52230: CALL_OW 251
52234: PPUSH
52235: LD_VAR 0 10
52239: PPUSH
52240: LD_INT 2
52242: PPUSH
52243: CALL_OW 273
52247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52248: LD_VAR 0 11
52252: PPUSH
52253: LD_VAR 0 12
52257: PPUSH
52258: CALL_OW 488
52262: PUSH
52263: LD_VAR 0 11
52267: PPUSH
52268: LD_VAR 0 12
52272: PPUSH
52273: CALL_OW 428
52277: NOT
52278: AND
52279: IFFALSE 52302
// begin ComMoveXY ( tmp , _x , _y ) ;
52281: LD_VAR 0 13
52285: PPUSH
52286: LD_VAR 0 11
52290: PPUSH
52291: LD_VAR 0 12
52295: PPUSH
52296: CALL_OW 111
// break ;
52300: GO 52304
// end ; end ;
52302: GO 52189
52304: POP
52305: POP
// end ; end ;
52306: GO 51631
52308: POP
52309: POP
// end ;
52310: LD_VAR 0 8
52314: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52315: LD_INT 0
52317: PPUSH
// result := true ;
52318: LD_ADDR_VAR 0 3
52322: PUSH
52323: LD_INT 1
52325: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52326: LD_VAR 0 2
52330: PUSH
52331: LD_INT 24
52333: DOUBLE
52334: EQUAL
52335: IFTRUE 52345
52337: LD_INT 33
52339: DOUBLE
52340: EQUAL
52341: IFTRUE 52345
52343: GO 52370
52345: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52346: LD_ADDR_VAR 0 3
52350: PUSH
52351: LD_INT 32
52353: PPUSH
52354: LD_VAR 0 1
52358: PPUSH
52359: CALL_OW 321
52363: PUSH
52364: LD_INT 2
52366: EQUAL
52367: ST_TO_ADDR
52368: GO 52686
52370: LD_INT 20
52372: DOUBLE
52373: EQUAL
52374: IFTRUE 52378
52376: GO 52403
52378: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52379: LD_ADDR_VAR 0 3
52383: PUSH
52384: LD_INT 6
52386: PPUSH
52387: LD_VAR 0 1
52391: PPUSH
52392: CALL_OW 321
52396: PUSH
52397: LD_INT 2
52399: EQUAL
52400: ST_TO_ADDR
52401: GO 52686
52403: LD_INT 22
52405: DOUBLE
52406: EQUAL
52407: IFTRUE 52417
52409: LD_INT 36
52411: DOUBLE
52412: EQUAL
52413: IFTRUE 52417
52415: GO 52442
52417: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52418: LD_ADDR_VAR 0 3
52422: PUSH
52423: LD_INT 15
52425: PPUSH
52426: LD_VAR 0 1
52430: PPUSH
52431: CALL_OW 321
52435: PUSH
52436: LD_INT 2
52438: EQUAL
52439: ST_TO_ADDR
52440: GO 52686
52442: LD_INT 30
52444: DOUBLE
52445: EQUAL
52446: IFTRUE 52450
52448: GO 52475
52450: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52451: LD_ADDR_VAR 0 3
52455: PUSH
52456: LD_INT 20
52458: PPUSH
52459: LD_VAR 0 1
52463: PPUSH
52464: CALL_OW 321
52468: PUSH
52469: LD_INT 2
52471: EQUAL
52472: ST_TO_ADDR
52473: GO 52686
52475: LD_INT 28
52477: DOUBLE
52478: EQUAL
52479: IFTRUE 52489
52481: LD_INT 21
52483: DOUBLE
52484: EQUAL
52485: IFTRUE 52489
52487: GO 52514
52489: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52490: LD_ADDR_VAR 0 3
52494: PUSH
52495: LD_INT 21
52497: PPUSH
52498: LD_VAR 0 1
52502: PPUSH
52503: CALL_OW 321
52507: PUSH
52508: LD_INT 2
52510: EQUAL
52511: ST_TO_ADDR
52512: GO 52686
52514: LD_INT 16
52516: DOUBLE
52517: EQUAL
52518: IFTRUE 52522
52520: GO 52547
52522: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52523: LD_ADDR_VAR 0 3
52527: PUSH
52528: LD_INT 84
52530: PPUSH
52531: LD_VAR 0 1
52535: PPUSH
52536: CALL_OW 321
52540: PUSH
52541: LD_INT 2
52543: EQUAL
52544: ST_TO_ADDR
52545: GO 52686
52547: LD_INT 19
52549: DOUBLE
52550: EQUAL
52551: IFTRUE 52561
52553: LD_INT 23
52555: DOUBLE
52556: EQUAL
52557: IFTRUE 52561
52559: GO 52586
52561: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52562: LD_ADDR_VAR 0 3
52566: PUSH
52567: LD_INT 83
52569: PPUSH
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL_OW 321
52579: PUSH
52580: LD_INT 2
52582: EQUAL
52583: ST_TO_ADDR
52584: GO 52686
52586: LD_INT 17
52588: DOUBLE
52589: EQUAL
52590: IFTRUE 52594
52592: GO 52619
52594: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52595: LD_ADDR_VAR 0 3
52599: PUSH
52600: LD_INT 39
52602: PPUSH
52603: LD_VAR 0 1
52607: PPUSH
52608: CALL_OW 321
52612: PUSH
52613: LD_INT 2
52615: EQUAL
52616: ST_TO_ADDR
52617: GO 52686
52619: LD_INT 18
52621: DOUBLE
52622: EQUAL
52623: IFTRUE 52627
52625: GO 52652
52627: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52628: LD_ADDR_VAR 0 3
52632: PUSH
52633: LD_INT 40
52635: PPUSH
52636: LD_VAR 0 1
52640: PPUSH
52641: CALL_OW 321
52645: PUSH
52646: LD_INT 2
52648: EQUAL
52649: ST_TO_ADDR
52650: GO 52686
52652: LD_INT 27
52654: DOUBLE
52655: EQUAL
52656: IFTRUE 52660
52658: GO 52685
52660: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52661: LD_ADDR_VAR 0 3
52665: PUSH
52666: LD_INT 35
52668: PPUSH
52669: LD_VAR 0 1
52673: PPUSH
52674: CALL_OW 321
52678: PUSH
52679: LD_INT 2
52681: EQUAL
52682: ST_TO_ADDR
52683: GO 52686
52685: POP
// end ;
52686: LD_VAR 0 3
52690: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52691: LD_INT 0
52693: PPUSH
52694: PPUSH
52695: PPUSH
52696: PPUSH
52697: PPUSH
52698: PPUSH
52699: PPUSH
52700: PPUSH
52701: PPUSH
52702: PPUSH
52703: PPUSH
// result := false ;
52704: LD_ADDR_VAR 0 6
52708: PUSH
52709: LD_INT 0
52711: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52712: LD_VAR 0 1
52716: NOT
52717: PUSH
52718: LD_VAR 0 1
52722: PPUSH
52723: CALL_OW 266
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: IN
52738: NOT
52739: OR
52740: PUSH
52741: LD_VAR 0 2
52745: NOT
52746: OR
52747: PUSH
52748: LD_VAR 0 5
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: LD_INT 4
52767: PUSH
52768: LD_INT 5
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: IN
52779: NOT
52780: OR
52781: PUSH
52782: LD_VAR 0 3
52786: PPUSH
52787: LD_VAR 0 4
52791: PPUSH
52792: CALL_OW 488
52796: NOT
52797: OR
52798: IFFALSE 52802
// exit ;
52800: GO 53538
// side := GetSide ( depot ) ;
52802: LD_ADDR_VAR 0 9
52806: PUSH
52807: LD_VAR 0 1
52811: PPUSH
52812: CALL_OW 255
52816: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52817: LD_VAR 0 9
52821: PPUSH
52822: LD_VAR 0 2
52826: PPUSH
52827: CALL 52315 0 2
52831: NOT
52832: IFFALSE 52836
// exit ;
52834: GO 53538
// pom := GetBase ( depot ) ;
52836: LD_ADDR_VAR 0 10
52840: PUSH
52841: LD_VAR 0 1
52845: PPUSH
52846: CALL_OW 274
52850: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52851: LD_ADDR_VAR 0 11
52855: PUSH
52856: LD_VAR 0 2
52860: PPUSH
52861: LD_VAR 0 1
52865: PPUSH
52866: CALL_OW 248
52870: PPUSH
52871: CALL_OW 450
52875: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52876: LD_VAR 0 10
52880: PPUSH
52881: LD_INT 1
52883: PPUSH
52884: CALL_OW 275
52888: PUSH
52889: LD_VAR 0 11
52893: PUSH
52894: LD_INT 1
52896: ARRAY
52897: GREATEREQUAL
52898: PUSH
52899: LD_VAR 0 10
52903: PPUSH
52904: LD_INT 2
52906: PPUSH
52907: CALL_OW 275
52911: PUSH
52912: LD_VAR 0 11
52916: PUSH
52917: LD_INT 2
52919: ARRAY
52920: GREATEREQUAL
52921: AND
52922: PUSH
52923: LD_VAR 0 10
52927: PPUSH
52928: LD_INT 3
52930: PPUSH
52931: CALL_OW 275
52935: PUSH
52936: LD_VAR 0 11
52940: PUSH
52941: LD_INT 3
52943: ARRAY
52944: GREATEREQUAL
52945: AND
52946: NOT
52947: IFFALSE 52951
// exit ;
52949: GO 53538
// if GetBType ( depot ) = b_depot then
52951: LD_VAR 0 1
52955: PPUSH
52956: CALL_OW 266
52960: PUSH
52961: LD_INT 0
52963: EQUAL
52964: IFFALSE 52976
// dist := 28 else
52966: LD_ADDR_VAR 0 14
52970: PUSH
52971: LD_INT 28
52973: ST_TO_ADDR
52974: GO 52984
// dist := 36 ;
52976: LD_ADDR_VAR 0 14
52980: PUSH
52981: LD_INT 36
52983: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52984: LD_VAR 0 1
52988: PPUSH
52989: LD_VAR 0 3
52993: PPUSH
52994: LD_VAR 0 4
52998: PPUSH
52999: CALL_OW 297
53003: PUSH
53004: LD_VAR 0 14
53008: GREATER
53009: IFFALSE 53013
// exit ;
53011: GO 53538
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53013: LD_ADDR_VAR 0 12
53017: PUSH
53018: LD_VAR 0 2
53022: PPUSH
53023: LD_VAR 0 3
53027: PPUSH
53028: LD_VAR 0 4
53032: PPUSH
53033: LD_VAR 0 5
53037: PPUSH
53038: LD_VAR 0 1
53042: PPUSH
53043: CALL_OW 248
53047: PPUSH
53048: LD_INT 0
53050: PPUSH
53051: CALL 53543 0 6
53055: ST_TO_ADDR
// if not hexes then
53056: LD_VAR 0 12
53060: NOT
53061: IFFALSE 53065
// exit ;
53063: GO 53538
// hex := GetHexInfo ( x , y ) ;
53065: LD_ADDR_VAR 0 15
53069: PUSH
53070: LD_VAR 0 3
53074: PPUSH
53075: LD_VAR 0 4
53079: PPUSH
53080: CALL_OW 546
53084: ST_TO_ADDR
// if hex [ 1 ] then
53085: LD_VAR 0 15
53089: PUSH
53090: LD_INT 1
53092: ARRAY
53093: IFFALSE 53097
// exit ;
53095: GO 53538
// height := hex [ 2 ] ;
53097: LD_ADDR_VAR 0 13
53101: PUSH
53102: LD_VAR 0 15
53106: PUSH
53107: LD_INT 2
53109: ARRAY
53110: ST_TO_ADDR
// for i = 1 to hexes do
53111: LD_ADDR_VAR 0 7
53115: PUSH
53116: DOUBLE
53117: LD_INT 1
53119: DEC
53120: ST_TO_ADDR
53121: LD_VAR 0 12
53125: PUSH
53126: FOR_TO
53127: IFFALSE 53457
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53129: LD_VAR 0 12
53133: PUSH
53134: LD_VAR 0 7
53138: ARRAY
53139: PUSH
53140: LD_INT 1
53142: ARRAY
53143: PPUSH
53144: LD_VAR 0 12
53148: PUSH
53149: LD_VAR 0 7
53153: ARRAY
53154: PUSH
53155: LD_INT 2
53157: ARRAY
53158: PPUSH
53159: CALL_OW 488
53163: NOT
53164: PUSH
53165: LD_VAR 0 12
53169: PUSH
53170: LD_VAR 0 7
53174: ARRAY
53175: PUSH
53176: LD_INT 1
53178: ARRAY
53179: PPUSH
53180: LD_VAR 0 12
53184: PUSH
53185: LD_VAR 0 7
53189: ARRAY
53190: PUSH
53191: LD_INT 2
53193: ARRAY
53194: PPUSH
53195: CALL_OW 428
53199: PUSH
53200: LD_INT 0
53202: GREATER
53203: OR
53204: PUSH
53205: LD_VAR 0 12
53209: PUSH
53210: LD_VAR 0 7
53214: ARRAY
53215: PUSH
53216: LD_INT 1
53218: ARRAY
53219: PPUSH
53220: LD_VAR 0 12
53224: PUSH
53225: LD_VAR 0 7
53229: ARRAY
53230: PUSH
53231: LD_INT 2
53233: ARRAY
53234: PPUSH
53235: CALL_OW 351
53239: OR
53240: IFFALSE 53246
// exit ;
53242: POP
53243: POP
53244: GO 53538
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53246: LD_ADDR_VAR 0 8
53250: PUSH
53251: LD_VAR 0 12
53255: PUSH
53256: LD_VAR 0 7
53260: ARRAY
53261: PUSH
53262: LD_INT 1
53264: ARRAY
53265: PPUSH
53266: LD_VAR 0 12
53270: PUSH
53271: LD_VAR 0 7
53275: ARRAY
53276: PUSH
53277: LD_INT 2
53279: ARRAY
53280: PPUSH
53281: CALL_OW 546
53285: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53286: LD_VAR 0 8
53290: PUSH
53291: LD_INT 1
53293: ARRAY
53294: PUSH
53295: LD_VAR 0 8
53299: PUSH
53300: LD_INT 2
53302: ARRAY
53303: PUSH
53304: LD_VAR 0 13
53308: PUSH
53309: LD_INT 2
53311: PLUS
53312: GREATER
53313: OR
53314: PUSH
53315: LD_VAR 0 8
53319: PUSH
53320: LD_INT 2
53322: ARRAY
53323: PUSH
53324: LD_VAR 0 13
53328: PUSH
53329: LD_INT 2
53331: MINUS
53332: LESS
53333: OR
53334: PUSH
53335: LD_VAR 0 8
53339: PUSH
53340: LD_INT 3
53342: ARRAY
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 8
53349: PUSH
53350: LD_INT 9
53352: PUSH
53353: LD_INT 10
53355: PUSH
53356: LD_INT 11
53358: PUSH
53359: LD_INT 12
53361: PUSH
53362: LD_INT 13
53364: PUSH
53365: LD_INT 16
53367: PUSH
53368: LD_INT 17
53370: PUSH
53371: LD_INT 18
53373: PUSH
53374: LD_INT 19
53376: PUSH
53377: LD_INT 20
53379: PUSH
53380: LD_INT 21
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: IN
53398: NOT
53399: OR
53400: PUSH
53401: LD_VAR 0 8
53405: PUSH
53406: LD_INT 5
53408: ARRAY
53409: NOT
53410: OR
53411: PUSH
53412: LD_VAR 0 8
53416: PUSH
53417: LD_INT 6
53419: ARRAY
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: LD_INT 7
53429: PUSH
53430: LD_INT 9
53432: PUSH
53433: LD_INT 10
53435: PUSH
53436: LD_INT 11
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: IN
53447: NOT
53448: OR
53449: IFFALSE 53455
// exit ;
53451: POP
53452: POP
53453: GO 53538
// end ;
53455: GO 53126
53457: POP
53458: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53459: LD_VAR 0 9
53463: PPUSH
53464: LD_VAR 0 3
53468: PPUSH
53469: LD_VAR 0 4
53473: PPUSH
53474: LD_INT 20
53476: PPUSH
53477: CALL 45490 0 4
53481: PUSH
53482: LD_INT 4
53484: ARRAY
53485: IFFALSE 53489
// exit ;
53487: GO 53538
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53489: LD_VAR 0 2
53493: PUSH
53494: LD_INT 29
53496: PUSH
53497: LD_INT 30
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: IN
53504: PUSH
53505: LD_VAR 0 3
53509: PPUSH
53510: LD_VAR 0 4
53514: PPUSH
53515: LD_VAR 0 9
53519: PPUSH
53520: CALL_OW 440
53524: NOT
53525: AND
53526: IFFALSE 53530
// exit ;
53528: GO 53538
// result := true ;
53530: LD_ADDR_VAR 0 6
53534: PUSH
53535: LD_INT 1
53537: ST_TO_ADDR
// end ;
53538: LD_VAR 0 6
53542: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53543: LD_INT 0
53545: PPUSH
53546: PPUSH
53547: PPUSH
53548: PPUSH
53549: PPUSH
53550: PPUSH
53551: PPUSH
53552: PPUSH
53553: PPUSH
53554: PPUSH
53555: PPUSH
53556: PPUSH
53557: PPUSH
53558: PPUSH
53559: PPUSH
53560: PPUSH
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
53568: PPUSH
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
53575: PPUSH
53576: PPUSH
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
53584: PPUSH
53585: PPUSH
53586: PPUSH
53587: PPUSH
53588: PPUSH
53589: PPUSH
53590: PPUSH
53591: PPUSH
53592: PPUSH
53593: PPUSH
53594: PPUSH
53595: PPUSH
53596: PPUSH
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
53601: PPUSH
53602: PPUSH
// result = [ ] ;
53603: LD_ADDR_VAR 0 7
53607: PUSH
53608: EMPTY
53609: ST_TO_ADDR
// temp_list = [ ] ;
53610: LD_ADDR_VAR 0 9
53614: PUSH
53615: EMPTY
53616: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53617: LD_VAR 0 4
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: LD_INT 3
53633: PUSH
53634: LD_INT 4
53636: PUSH
53637: LD_INT 5
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: IN
53648: NOT
53649: PUSH
53650: LD_VAR 0 1
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: IN
53665: PUSH
53666: LD_VAR 0 5
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: IN
53685: NOT
53686: AND
53687: OR
53688: IFFALSE 53692
// exit ;
53690: GO 72083
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53692: LD_VAR 0 1
53696: PUSH
53697: LD_INT 6
53699: PUSH
53700: LD_INT 7
53702: PUSH
53703: LD_INT 8
53705: PUSH
53706: LD_INT 13
53708: PUSH
53709: LD_INT 12
53711: PUSH
53712: LD_INT 15
53714: PUSH
53715: LD_INT 11
53717: PUSH
53718: LD_INT 14
53720: PUSH
53721: LD_INT 10
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: IN
53735: IFFALSE 53745
// btype = b_lab ;
53737: LD_ADDR_VAR 0 1
53741: PUSH
53742: LD_INT 6
53744: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53745: LD_VAR 0 6
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: IN
53764: NOT
53765: PUSH
53766: LD_VAR 0 1
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: LD_INT 6
53785: PUSH
53786: LD_INT 36
53788: PUSH
53789: LD_INT 4
53791: PUSH
53792: LD_INT 5
53794: PUSH
53795: LD_INT 31
53797: PUSH
53798: LD_INT 32
53800: PUSH
53801: LD_INT 33
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: IN
53817: NOT
53818: PUSH
53819: LD_VAR 0 6
53823: PUSH
53824: LD_INT 1
53826: EQUAL
53827: AND
53828: OR
53829: PUSH
53830: LD_VAR 0 1
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: IN
53845: NOT
53846: PUSH
53847: LD_VAR 0 6
53851: PUSH
53852: LD_INT 2
53854: EQUAL
53855: AND
53856: OR
53857: IFFALSE 53867
// mode = 0 ;
53859: LD_ADDR_VAR 0 6
53863: PUSH
53864: LD_INT 0
53866: ST_TO_ADDR
// case mode of 0 :
53867: LD_VAR 0 6
53871: PUSH
53872: LD_INT 0
53874: DOUBLE
53875: EQUAL
53876: IFTRUE 53880
53878: GO 65333
53880: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53881: LD_ADDR_VAR 0 11
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 3
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54074: LD_ADDR_VAR 0 12
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 3
54231: NEG
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54270: LD_ADDR_VAR 0 13
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 2
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: NEG
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 3
54429: NEG
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: NEG
54442: PUSH
54443: LD_INT 3
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54469: LD_ADDR_VAR 0 14
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 3
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54665: LD_ADDR_VAR 0 15
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 3
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 3
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54858: LD_ADDR_VAR 0 16
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 3
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55051: LD_ADDR_VAR 0 17
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55281: LD_ADDR_VAR 0 18
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55511: LD_ADDR_VAR 0 19
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55741: LD_ADDR_VAR 0 20
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55971: LD_ADDR_VAR 0 21
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56201: LD_ADDR_VAR 0 22
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 2
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: LD_INT 2
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: NEG
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56431: LD_ADDR_VAR 0 23
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 2
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 2
56607: NEG
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 2
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56711: LD_ADDR_VAR 0 24
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 3
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56987: LD_ADDR_VAR 0 25
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: LD_INT 3
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 3
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57261: LD_ADDR_VAR 0 26
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 2
57437: NEG
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 3
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 2
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57537: LD_ADDR_VAR 0 27
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57817: LD_ADDR_VAR 0 28
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: NEG
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: LD_INT 3
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 3
58052: NEG
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 3
58064: NEG
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58099: LD_ADDR_VAR 0 29
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: NEG
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58378: LD_ADDR_VAR 0 30
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: LD_INT 3
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 2
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58656: LD_ADDR_VAR 0 31
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: LD_INT 3
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58934: LD_ADDR_VAR 0 32
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: LD_INT 2
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 3
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: NEG
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59212: LD_ADDR_VAR 0 33
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 3
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59491: LD_ADDR_VAR 0 34
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 2
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 2
59658: NEG
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: LD_INT 2
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 3
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 3
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: LD_INT 3
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59771: LD_ADDR_VAR 0 35
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59883: LD_ADDR_VAR 0 36
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59995: LD_ADDR_VAR 0 37
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60107: LD_ADDR_VAR 0 38
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60219: LD_ADDR_VAR 0 39
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60331: LD_ADDR_VAR 0 40
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60443: LD_ADDR_VAR 0 41
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 2
60621: NEG
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 3
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: LD_INT 3
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 3
60740: NEG
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 3
60752: NEG
60753: PUSH
60754: LD_INT 3
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60793: LD_ADDR_VAR 0 42
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: LD_INT 2
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: LD_INT 3
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 3
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: LD_INT 2
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: NEG
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 3
61102: NEG
61103: PUSH
61104: LD_INT 3
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61143: LD_ADDR_VAR 0 43
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: LD_INT 2
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 3
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 2
61428: NEG
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 3
61439: NEG
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61491: LD_ADDR_VAR 0 44
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: LD_INT 2
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: LD_INT 1
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 2
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: LD_INT 2
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: LD_INT 2
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 3
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 3
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 3
61788: NEG
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 3
61800: NEG
61801: PUSH
61802: LD_INT 3
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61841: LD_ADDR_VAR 0 45
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 1
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 2
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 2
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: LD_INT 2
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: NEG
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: LD_INT 3
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 2
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 3
62087: PUSH
62088: LD_INT 3
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: LD_INT 3
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 3
62138: NEG
62139: PUSH
62140: LD_INT 2
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 3
62150: NEG
62151: PUSH
62152: LD_INT 3
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62191: LD_ADDR_VAR 0 46
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 2
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: NEG
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 2
62368: NEG
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 3
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 3
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: LD_INT 2
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 3
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: LD_INT 3
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_INT 3
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: LD_INT 2
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62539: LD_ADDR_VAR 0 47
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: LD_INT 2
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: LD_INT 2
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 2
62666: NEG
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62690: LD_ADDR_VAR 0 48
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: LD_INT 2
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 2
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 1
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 2
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 2
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62837: LD_ADDR_VAR 0 49
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62981: LD_ADDR_VAR 0 50
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: LD_INT 1
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63125: LD_ADDR_VAR 0 51
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: LD_INT 2
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 2
63248: NEG
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63272: LD_ADDR_VAR 0 52
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: LD_INT 2
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: LD_INT 2
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63423: LD_ADDR_VAR 0 53
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: LD_INT 1
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: LD_INT 2
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 2
63622: NEG
63623: PUSH
63624: LD_INT 2
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63653: LD_ADDR_VAR 0 54
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: LD_INT 2
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 2
63829: NEG
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 2
63840: NEG
63841: PUSH
63842: LD_INT 1
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 2
63852: NEG
63853: PUSH
63854: LD_INT 2
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63883: LD_ADDR_VAR 0 55
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: LD_INT 2
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: LD_INT 2
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 2
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 2
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 2
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: LD_INT 2
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: LD_INT 1
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 2
64059: NEG
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: LD_INT 2
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64113: LD_ADDR_VAR 0 56
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: LD_INT 2
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 2
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 2
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 2
64289: NEG
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 2
64300: NEG
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 2
64312: NEG
64313: PUSH
64314: LD_INT 2
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64343: LD_ADDR_VAR 0 57
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 2
64439: NEG
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 2
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: LD_INT 2
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: LD_INT 2
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 2
64519: NEG
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 2
64530: NEG
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 2
64542: NEG
64543: PUSH
64544: LD_INT 2
64546: NEG
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64573: LD_ADDR_VAR 0 58
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: LD_INT 1
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: LD_INT 2
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: LD_INT 2
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 2
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 2
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: LD_INT 2
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: LD_INT 2
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: LD_INT 1
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 2
64749: NEG
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 2
64760: NEG
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 2
64772: NEG
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64803: LD_ADDR_VAR 0 59
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: NEG
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64891: LD_ADDR_VAR 0 60
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64979: LD_ADDR_VAR 0 61
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 0
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 1
65037: NEG
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65067: LD_ADDR_VAR 0 62
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: NEG
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65155: LD_ADDR_VAR 0 63
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: LD_INT 1
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 1
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: LD_INT 1
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 1
65224: NEG
65225: PUSH
65226: LD_INT 1
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65243: LD_ADDR_VAR 0 64
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 0
65291: PUSH
65292: LD_INT 1
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 1
65301: NEG
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: ST_TO_ADDR
// end ; 1 :
65331: GO 71228
65333: LD_INT 1
65335: DOUBLE
65336: EQUAL
65337: IFTRUE 65341
65339: GO 67964
65341: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65342: LD_ADDR_VAR 0 11
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 3
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: LD_INT 2
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: LIST
65385: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65386: LD_ADDR_VAR 0 12
65390: PUSH
65391: LD_INT 2
65393: PUSH
65394: LD_INT 1
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 3
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65427: LD_ADDR_VAR 0 13
65431: PUSH
65432: LD_INT 3
65434: PUSH
65435: LD_INT 2
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 3
65444: PUSH
65445: LD_INT 3
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 2
65454: PUSH
65455: LD_INT 3
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: LIST
65466: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65467: LD_ADDR_VAR 0 14
65471: PUSH
65472: LD_INT 1
65474: PUSH
65475: LD_INT 3
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: LD_INT 3
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65508: LD_ADDR_VAR 0 15
65512: PUSH
65513: LD_INT 2
65515: NEG
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 3
65526: NEG
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 3
65537: NEG
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65552: LD_ADDR_VAR 0 16
65556: PUSH
65557: LD_INT 2
65559: NEG
65560: PUSH
65561: LD_INT 3
65563: NEG
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 3
65571: NEG
65572: PUSH
65573: LD_INT 2
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 3
65583: NEG
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65598: LD_ADDR_VAR 0 17
65602: PUSH
65603: LD_INT 1
65605: NEG
65606: PUSH
65607: LD_INT 3
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: LD_INT 3
65620: NEG
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65642: LD_ADDR_VAR 0 18
65646: PUSH
65647: LD_INT 2
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: LD_INT 1
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65683: LD_ADDR_VAR 0 19
65687: PUSH
65688: LD_INT 3
65690: PUSH
65691: LD_INT 2
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: LD_INT 3
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65723: LD_ADDR_VAR 0 20
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: LD_INT 3
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: LD_INT 3
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: LD_INT 2
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: LIST
65763: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65764: LD_ADDR_VAR 0 21
65768: PUSH
65769: LD_INT 2
65771: NEG
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 3
65782: NEG
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 3
65793: NEG
65794: PUSH
65795: LD_INT 1
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65808: LD_ADDR_VAR 0 22
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: LD_INT 3
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 3
65827: NEG
65828: PUSH
65829: LD_INT 2
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 3
65839: NEG
65840: PUSH
65841: LD_INT 3
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: LIST
65853: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65854: LD_ADDR_VAR 0 23
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: LD_INT 3
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 1
65872: NEG
65873: PUSH
65874: LD_INT 4
65876: NEG
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 3
65887: NEG
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: LIST
65897: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65898: LD_ADDR_VAR 0 24
65902: PUSH
65903: LD_INT 3
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 3
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 4
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: LIST
65938: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65939: LD_ADDR_VAR 0 25
65943: PUSH
65944: LD_INT 3
65946: PUSH
65947: LD_INT 3
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 4
65956: PUSH
65957: LD_INT 3
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 3
65966: PUSH
65967: LD_INT 4
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: LIST
65978: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65979: LD_ADDR_VAR 0 26
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_INT 3
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: LD_INT 4
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: NEG
66007: PUSH
66008: LD_INT 3
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66020: LD_ADDR_VAR 0 27
66024: PUSH
66025: LD_INT 3
66027: NEG
66028: PUSH
66029: LD_INT 0
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: NEG
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 4
66049: NEG
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66064: LD_ADDR_VAR 0 28
66068: PUSH
66069: LD_INT 3
66071: NEG
66072: PUSH
66073: LD_INT 3
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 3
66083: NEG
66084: PUSH
66085: LD_INT 4
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 4
66095: NEG
66096: PUSH
66097: LD_INT 3
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: LIST
66109: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66110: LD_ADDR_VAR 0 29
66114: PUSH
66115: LD_INT 1
66117: NEG
66118: PUSH
66119: LD_INT 3
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 3
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: LD_INT 2
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: PUSH
66153: LD_INT 4
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: LD_INT 4
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: LD_INT 3
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: LD_INT 5
66189: NEG
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: LD_INT 5
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 1
66208: PUSH
66209: LD_INT 4
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: LD_INT 6
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: LD_INT 6
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: LD_INT 5
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66265: LD_ADDR_VAR 0 30
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 3
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 3
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 3
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 4
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 4
66324: PUSH
66325: LD_INT 1
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 4
66334: PUSH
66335: LD_INT 1
66337: NEG
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 5
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 5
66355: PUSH
66356: LD_INT 1
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 5
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 6
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 6
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66408: LD_ADDR_VAR 0 31
66412: PUSH
66413: LD_INT 3
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 3
66425: PUSH
66426: LD_INT 3
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 2
66435: PUSH
66436: LD_INT 3
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 4
66445: PUSH
66446: LD_INT 3
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 4
66455: PUSH
66456: LD_INT 4
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 3
66465: PUSH
66466: LD_INT 4
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 5
66475: PUSH
66476: LD_INT 4
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 5
66485: PUSH
66486: LD_INT 5
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 4
66495: PUSH
66496: LD_INT 5
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 6
66505: PUSH
66506: LD_INT 5
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 6
66515: PUSH
66516: LD_INT 6
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 5
66525: PUSH
66526: LD_INT 6
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66547: LD_ADDR_VAR 0 32
66551: PUSH
66552: LD_INT 1
66554: PUSH
66555: LD_INT 3
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 3
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 1
66574: NEG
66575: PUSH
66576: LD_INT 2
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 1
66585: PUSH
66586: LD_INT 4
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: LD_INT 4
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 1
66605: NEG
66606: PUSH
66607: LD_INT 3
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: LD_INT 5
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: LD_INT 5
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: NEG
66637: PUSH
66638: LD_INT 4
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 1
66647: PUSH
66648: LD_INT 6
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: LD_INT 6
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: LD_INT 5
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66690: LD_ADDR_VAR 0 33
66694: PUSH
66695: LD_INT 2
66697: NEG
66698: PUSH
66699: LD_INT 1
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 3
66708: NEG
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 3
66719: NEG
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 3
66731: NEG
66732: PUSH
66733: LD_INT 1
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 4
66742: NEG
66743: PUSH
66744: LD_INT 0
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 4
66753: NEG
66754: PUSH
66755: LD_INT 1
66757: NEG
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 4
66765: NEG
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 5
66776: NEG
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 5
66787: NEG
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 5
66799: NEG
66800: PUSH
66801: LD_INT 1
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 6
66810: NEG
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 6
66821: NEG
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66845: LD_ADDR_VAR 0 34
66849: PUSH
66850: LD_INT 2
66852: NEG
66853: PUSH
66854: LD_INT 3
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 3
66864: NEG
66865: PUSH
66866: LD_INT 2
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 3
66876: NEG
66877: PUSH
66878: LD_INT 3
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 3
66888: NEG
66889: PUSH
66890: LD_INT 4
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 4
66900: NEG
66901: PUSH
66902: LD_INT 3
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 4
66912: NEG
66913: PUSH
66914: LD_INT 4
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 4
66924: NEG
66925: PUSH
66926: LD_INT 5
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 5
66936: NEG
66937: PUSH
66938: LD_INT 4
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 5
66948: NEG
66949: PUSH
66950: LD_INT 5
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 5
66960: NEG
66961: PUSH
66962: LD_INT 6
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 6
66972: NEG
66973: PUSH
66974: LD_INT 5
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 6
66984: NEG
66985: PUSH
66986: LD_INT 6
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67008: LD_ADDR_VAR 0 41
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: LD_INT 2
67018: NEG
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: LD_INT 3
67030: NEG
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: LD_INT 2
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67052: LD_ADDR_VAR 0 42
67056: PUSH
67057: LD_INT 2
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 2
67069: PUSH
67070: LD_INT 1
67072: NEG
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 3
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67093: LD_ADDR_VAR 0 43
67097: PUSH
67098: LD_INT 2
67100: PUSH
67101: LD_INT 2
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 3
67110: PUSH
67111: LD_INT 2
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 2
67120: PUSH
67121: LD_INT 3
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: LIST
67132: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67133: LD_ADDR_VAR 0 44
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: LD_INT 2
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: LD_INT 2
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: LIST
67173: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67174: LD_ADDR_VAR 0 45
67178: PUSH
67179: LD_INT 2
67181: NEG
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: NEG
67193: PUSH
67194: LD_INT 1
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 3
67203: NEG
67204: PUSH
67205: LD_INT 1
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: LIST
67217: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67218: LD_ADDR_VAR 0 46
67222: PUSH
67223: LD_INT 2
67225: NEG
67226: PUSH
67227: LD_INT 2
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 2
67237: NEG
67238: PUSH
67239: LD_INT 3
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 3
67249: NEG
67250: PUSH
67251: LD_INT 2
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: LIST
67263: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67264: LD_ADDR_VAR 0 47
67268: PUSH
67269: LD_INT 2
67271: NEG
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: LD_INT 3
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67297: LD_ADDR_VAR 0 48
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: LD_INT 2
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 2
67315: PUSH
67316: LD_INT 1
67318: NEG
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67328: LD_ADDR_VAR 0 49
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: LD_INT 1
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 3
67345: PUSH
67346: LD_INT 2
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67357: LD_ADDR_VAR 0 50
67361: PUSH
67362: LD_INT 2
67364: PUSH
67365: LD_INT 3
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 1
67374: PUSH
67375: LD_INT 3
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67386: LD_ADDR_VAR 0 51
67390: PUSH
67391: LD_INT 1
67393: NEG
67394: PUSH
67395: LD_INT 2
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67417: LD_ADDR_VAR 0 52
67421: PUSH
67422: LD_INT 3
67424: NEG
67425: PUSH
67426: LD_INT 1
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 3
67436: NEG
67437: PUSH
67438: LD_INT 2
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67450: LD_ADDR_VAR 0 53
67454: PUSH
67455: LD_INT 1
67457: NEG
67458: PUSH
67459: LD_INT 3
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: LD_INT 2
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: LIST
67493: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67494: LD_ADDR_VAR 0 54
67498: PUSH
67499: LD_INT 2
67501: PUSH
67502: LD_INT 1
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 3
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 3
67522: PUSH
67523: LD_INT 1
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67535: LD_ADDR_VAR 0 55
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: LD_INT 2
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 2
67562: PUSH
67563: LD_INT 3
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: LIST
67574: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67575: LD_ADDR_VAR 0 56
67579: PUSH
67580: LD_INT 1
67582: PUSH
67583: LD_INT 3
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 0
67592: PUSH
67593: LD_INT 3
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: LD_INT 2
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: LIST
67615: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67616: LD_ADDR_VAR 0 57
67620: PUSH
67621: LD_INT 2
67623: NEG
67624: PUSH
67625: LD_INT 1
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 3
67634: NEG
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 3
67645: NEG
67646: PUSH
67647: LD_INT 1
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: LIST
67659: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67660: LD_ADDR_VAR 0 58
67664: PUSH
67665: LD_INT 2
67667: NEG
67668: PUSH
67669: LD_INT 3
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 3
67679: NEG
67680: PUSH
67681: LD_INT 2
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 3
67691: NEG
67692: PUSH
67693: LD_INT 3
67695: NEG
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: LIST
67705: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67706: LD_ADDR_VAR 0 59
67710: PUSH
67711: LD_INT 1
67713: NEG
67714: PUSH
67715: LD_INT 2
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 0
67725: PUSH
67726: LD_INT 2
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67750: LD_ADDR_VAR 0 60
67754: PUSH
67755: LD_INT 1
67757: PUSH
67758: LD_INT 1
67760: NEG
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 2
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 2
67778: PUSH
67779: LD_INT 1
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: LIST
67790: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67791: LD_ADDR_VAR 0 61
67795: PUSH
67796: LD_INT 2
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 2
67808: PUSH
67809: LD_INT 2
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 1
67818: PUSH
67819: LD_INT 2
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67831: LD_ADDR_VAR 0 62
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: LD_INT 2
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: LD_INT 1
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: LIST
67871: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67872: LD_ADDR_VAR 0 63
67876: PUSH
67877: LD_INT 1
67879: NEG
67880: PUSH
67881: LD_INT 1
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 2
67890: NEG
67891: PUSH
67892: LD_INT 0
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 2
67901: NEG
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: LIST
67915: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67916: LD_ADDR_VAR 0 64
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: LD_INT 2
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 2
67935: NEG
67936: PUSH
67937: LD_INT 1
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 2
67947: NEG
67948: PUSH
67949: LD_INT 2
67951: NEG
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: LIST
67961: ST_TO_ADDR
// end ; 2 :
67962: GO 71228
67964: LD_INT 2
67966: DOUBLE
67967: EQUAL
67968: IFTRUE 67972
67970: GO 71227
67972: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67973: LD_ADDR_VAR 0 29
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 4
67990: PUSH
67991: LD_INT 1
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 5
68001: PUSH
68002: LD_INT 0
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 5
68011: PUSH
68012: LD_INT 1
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 4
68021: PUSH
68022: LD_INT 1
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 3
68031: PUSH
68032: LD_INT 0
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 3
68041: PUSH
68042: LD_INT 1
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 3
68052: PUSH
68053: LD_INT 2
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 5
68063: PUSH
68064: LD_INT 2
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 3
68073: PUSH
68074: LD_INT 3
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 3
68083: PUSH
68084: LD_INT 2
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 4
68093: PUSH
68094: LD_INT 3
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 4
68103: PUSH
68104: LD_INT 4
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 3
68113: PUSH
68114: LD_INT 4
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 2
68123: PUSH
68124: LD_INT 3
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 2
68133: PUSH
68134: LD_INT 2
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 4
68143: PUSH
68144: LD_INT 2
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 2
68153: PUSH
68154: LD_INT 4
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: LD_INT 4
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: LD_INT 3
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: LD_INT 4
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 1
68193: PUSH
68194: LD_INT 5
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_INT 5
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 1
68213: NEG
68214: PUSH
68215: LD_INT 4
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 1
68224: NEG
68225: PUSH
68226: LD_INT 3
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 2
68235: PUSH
68236: LD_INT 5
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 2
68245: NEG
68246: PUSH
68247: LD_INT 3
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 3
68256: NEG
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 3
68267: NEG
68268: PUSH
68269: LD_INT 1
68271: NEG
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 2
68279: NEG
68280: PUSH
68281: LD_INT 0
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 2
68290: NEG
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 3
68301: NEG
68302: PUSH
68303: LD_INT 1
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 4
68312: NEG
68313: PUSH
68314: LD_INT 0
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 4
68323: NEG
68324: PUSH
68325: LD_INT 1
68327: NEG
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 4
68335: NEG
68336: PUSH
68337: LD_INT 2
68339: NEG
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 2
68347: NEG
68348: PUSH
68349: LD_INT 2
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 4
68358: NEG
68359: PUSH
68360: LD_INT 4
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 4
68370: NEG
68371: PUSH
68372: LD_INT 5
68374: NEG
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 3
68382: NEG
68383: PUSH
68384: LD_INT 4
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 3
68394: NEG
68395: PUSH
68396: LD_INT 3
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 4
68406: NEG
68407: PUSH
68408: LD_INT 3
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 5
68418: NEG
68419: PUSH
68420: LD_INT 4
68422: NEG
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 5
68430: NEG
68431: PUSH
68432: LD_INT 5
68434: NEG
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 3
68442: NEG
68443: PUSH
68444: LD_INT 5
68446: NEG
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 5
68454: NEG
68455: PUSH
68456: LD_INT 3
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68511: LD_ADDR_VAR 0 30
68515: PUSH
68516: LD_INT 4
68518: PUSH
68519: LD_INT 4
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 4
68528: PUSH
68529: LD_INT 3
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 5
68538: PUSH
68539: LD_INT 4
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 5
68548: PUSH
68549: LD_INT 5
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 4
68558: PUSH
68559: LD_INT 5
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 3
68568: PUSH
68569: LD_INT 4
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 3
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 5
68588: PUSH
68589: LD_INT 3
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 3
68598: PUSH
68599: LD_INT 5
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: LD_INT 3
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: LD_INT 2
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 1
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 1
68638: PUSH
68639: LD_INT 4
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: LD_INT 4
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 1
68658: NEG
68659: PUSH
68660: LD_INT 3
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 1
68669: NEG
68670: PUSH
68671: LD_INT 2
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 2
68680: PUSH
68681: LD_INT 4
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 2
68690: NEG
68691: PUSH
68692: LD_INT 2
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 4
68701: NEG
68702: PUSH
68703: LD_INT 0
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 4
68712: NEG
68713: PUSH
68714: LD_INT 1
68716: NEG
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 3
68724: NEG
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 3
68735: NEG
68736: PUSH
68737: LD_INT 1
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 4
68746: NEG
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 5
68757: NEG
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 5
68768: NEG
68769: PUSH
68770: LD_INT 1
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 5
68780: NEG
68781: PUSH
68782: LD_INT 2
68784: NEG
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 3
68792: NEG
68793: PUSH
68794: LD_INT 2
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 3
68803: NEG
68804: PUSH
68805: LD_INT 3
68807: NEG
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 3
68815: NEG
68816: PUSH
68817: LD_INT 4
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 2
68827: NEG
68828: PUSH
68829: LD_INT 3
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 2
68839: NEG
68840: PUSH
68841: LD_INT 2
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 3
68851: NEG
68852: PUSH
68853: LD_INT 2
68855: NEG
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 4
68863: NEG
68864: PUSH
68865: LD_INT 3
68867: NEG
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 4
68875: NEG
68876: PUSH
68877: LD_INT 4
68879: NEG
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 2
68887: NEG
68888: PUSH
68889: LD_INT 4
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 4
68899: NEG
68900: PUSH
68901: LD_INT 2
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 0
68911: PUSH
68912: LD_INT 4
68914: NEG
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 0
68922: PUSH
68923: LD_INT 5
68925: NEG
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 1
68933: PUSH
68934: LD_INT 4
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 1
68944: PUSH
68945: LD_INT 3
68947: NEG
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 0
68955: PUSH
68956: LD_INT 3
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 1
68966: NEG
68967: PUSH
68968: LD_INT 4
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: LD_INT 5
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 2
68990: PUSH
68991: LD_INT 3
68993: NEG
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 2
69001: NEG
69002: PUSH
69003: LD_INT 5
69005: NEG
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69058: LD_ADDR_VAR 0 31
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: LD_INT 4
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 0
69075: PUSH
69076: LD_INT 3
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 1
69085: PUSH
69086: LD_INT 4
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 1
69095: PUSH
69096: LD_INT 5
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 0
69105: PUSH
69106: LD_INT 5
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 1
69115: NEG
69116: PUSH
69117: LD_INT 4
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 1
69126: NEG
69127: PUSH
69128: LD_INT 3
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 2
69137: PUSH
69138: LD_INT 5
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 2
69147: NEG
69148: PUSH
69149: LD_INT 3
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 3
69158: NEG
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 3
69169: NEG
69170: PUSH
69171: LD_INT 1
69173: NEG
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 2
69181: NEG
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 2
69192: NEG
69193: PUSH
69194: LD_INT 1
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 3
69203: NEG
69204: PUSH
69205: LD_INT 1
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 4
69214: NEG
69215: PUSH
69216: LD_INT 0
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 4
69225: NEG
69226: PUSH
69227: LD_INT 1
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 4
69237: NEG
69238: PUSH
69239: LD_INT 2
69241: NEG
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 2
69249: NEG
69250: PUSH
69251: LD_INT 2
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 4
69260: NEG
69261: PUSH
69262: LD_INT 4
69264: NEG
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 4
69272: NEG
69273: PUSH
69274: LD_INT 5
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 3
69284: NEG
69285: PUSH
69286: LD_INT 4
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 3
69296: NEG
69297: PUSH
69298: LD_INT 3
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 4
69308: NEG
69309: PUSH
69310: LD_INT 3
69312: NEG
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 5
69320: NEG
69321: PUSH
69322: LD_INT 4
69324: NEG
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 5
69332: NEG
69333: PUSH
69334: LD_INT 5
69336: NEG
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 3
69344: NEG
69345: PUSH
69346: LD_INT 5
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 5
69356: NEG
69357: PUSH
69358: LD_INT 3
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 0
69368: PUSH
69369: LD_INT 3
69371: NEG
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 0
69379: PUSH
69380: LD_INT 4
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 1
69390: PUSH
69391: LD_INT 3
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 1
69401: PUSH
69402: LD_INT 2
69404: NEG
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: LD_INT 2
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 1
69423: NEG
69424: PUSH
69425: LD_INT 3
69427: NEG
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 1
69435: NEG
69436: PUSH
69437: LD_INT 4
69439: NEG
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 2
69447: PUSH
69448: LD_INT 2
69450: NEG
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 2
69458: NEG
69459: PUSH
69460: LD_INT 4
69462: NEG
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 4
69470: PUSH
69471: LD_INT 0
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 4
69480: PUSH
69481: LD_INT 1
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 5
69491: PUSH
69492: LD_INT 0
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 5
69501: PUSH
69502: LD_INT 1
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 4
69511: PUSH
69512: LD_INT 1
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 3
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 3
69531: PUSH
69532: LD_INT 1
69534: NEG
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: PUSH
69543: LD_INT 2
69545: NEG
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 5
69553: PUSH
69554: LD_INT 2
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69608: LD_ADDR_VAR 0 32
69612: PUSH
69613: LD_INT 4
69615: NEG
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 4
69626: NEG
69627: PUSH
69628: LD_INT 1
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 3
69638: NEG
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 3
69649: NEG
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 4
69660: NEG
69661: PUSH
69662: LD_INT 1
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 5
69671: NEG
69672: PUSH
69673: LD_INT 0
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 5
69682: NEG
69683: PUSH
69684: LD_INT 1
69686: NEG
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 5
69694: NEG
69695: PUSH
69696: LD_INT 2
69698: NEG
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 3
69706: NEG
69707: PUSH
69708: LD_INT 2
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 3
69717: NEG
69718: PUSH
69719: LD_INT 3
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 3
69729: NEG
69730: PUSH
69731: LD_INT 4
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 2
69741: NEG
69742: PUSH
69743: LD_INT 3
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 2
69753: NEG
69754: PUSH
69755: LD_INT 2
69757: NEG
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 3
69765: NEG
69766: PUSH
69767: LD_INT 2
69769: NEG
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 4
69777: NEG
69778: PUSH
69779: LD_INT 3
69781: NEG
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 4
69789: NEG
69790: PUSH
69791: LD_INT 4
69793: NEG
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 2
69801: NEG
69802: PUSH
69803: LD_INT 4
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 4
69813: NEG
69814: PUSH
69815: LD_INT 2
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 0
69825: PUSH
69826: LD_INT 4
69828: NEG
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 0
69836: PUSH
69837: LD_INT 5
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 1
69847: PUSH
69848: LD_INT 4
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 1
69858: PUSH
69859: LD_INT 3
69861: NEG
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 0
69869: PUSH
69870: LD_INT 3
69872: NEG
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 1
69880: NEG
69881: PUSH
69882: LD_INT 4
69884: NEG
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 1
69892: NEG
69893: PUSH
69894: LD_INT 5
69896: NEG
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 2
69904: PUSH
69905: LD_INT 3
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 2
69915: NEG
69916: PUSH
69917: LD_INT 5
69919: NEG
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: LD_INT 0
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 3
69937: PUSH
69938: LD_INT 1
69940: NEG
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 4
69948: PUSH
69949: LD_INT 0
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 4
69958: PUSH
69959: LD_INT 1
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 3
69968: PUSH
69969: LD_INT 1
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 2
69978: PUSH
69979: LD_INT 0
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 2
69988: PUSH
69989: LD_INT 1
69991: NEG
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 2
69999: PUSH
70000: LD_INT 2
70002: NEG
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 4
70010: PUSH
70011: LD_INT 2
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 4
70020: PUSH
70021: LD_INT 4
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 4
70030: PUSH
70031: LD_INT 3
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 5
70040: PUSH
70041: LD_INT 4
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 5
70050: PUSH
70051: LD_INT 5
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 4
70060: PUSH
70061: LD_INT 5
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 3
70070: PUSH
70071: LD_INT 4
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 3
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 5
70090: PUSH
70091: LD_INT 3
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 3
70100: PUSH
70101: LD_INT 5
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70155: LD_ADDR_VAR 0 33
70159: PUSH
70160: LD_INT 4
70162: NEG
70163: PUSH
70164: LD_INT 4
70166: NEG
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 4
70174: NEG
70175: PUSH
70176: LD_INT 5
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 3
70186: NEG
70187: PUSH
70188: LD_INT 4
70190: NEG
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 3
70198: NEG
70199: PUSH
70200: LD_INT 3
70202: NEG
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 4
70210: NEG
70211: PUSH
70212: LD_INT 3
70214: NEG
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 5
70222: NEG
70223: PUSH
70224: LD_INT 4
70226: NEG
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 5
70234: NEG
70235: PUSH
70236: LD_INT 5
70238: NEG
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 3
70246: NEG
70247: PUSH
70248: LD_INT 5
70250: NEG
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 5
70258: NEG
70259: PUSH
70260: LD_INT 3
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 0
70270: PUSH
70271: LD_INT 3
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 0
70281: PUSH
70282: LD_INT 4
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 1
70292: PUSH
70293: LD_INT 3
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 1
70303: PUSH
70304: LD_INT 2
70306: NEG
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: LD_INT 2
70317: NEG
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 1
70325: NEG
70326: PUSH
70327: LD_INT 3
70329: NEG
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 1
70337: NEG
70338: PUSH
70339: LD_INT 4
70341: NEG
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 2
70349: PUSH
70350: LD_INT 2
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 2
70360: NEG
70361: PUSH
70362: LD_INT 4
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 4
70372: PUSH
70373: LD_INT 0
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 4
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 5
70393: PUSH
70394: LD_INT 0
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 5
70403: PUSH
70404: LD_INT 1
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 4
70413: PUSH
70414: LD_INT 1
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 3
70423: PUSH
70424: LD_INT 0
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 3
70433: PUSH
70434: LD_INT 1
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 3
70444: PUSH
70445: LD_INT 2
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 5
70455: PUSH
70456: LD_INT 2
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 3
70465: PUSH
70466: LD_INT 3
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 3
70475: PUSH
70476: LD_INT 2
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 4
70485: PUSH
70486: LD_INT 3
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 4
70495: PUSH
70496: LD_INT 4
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 3
70505: PUSH
70506: LD_INT 4
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 2
70515: PUSH
70516: LD_INT 3
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 2
70525: PUSH
70526: LD_INT 2
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: LD_INT 2
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 2
70545: PUSH
70546: LD_INT 4
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: LD_INT 4
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 0
70565: PUSH
70566: LD_INT 3
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 1
70575: PUSH
70576: LD_INT 4
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 1
70585: PUSH
70586: LD_INT 5
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 0
70595: PUSH
70596: LD_INT 5
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 1
70605: NEG
70606: PUSH
70607: LD_INT 4
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 1
70616: NEG
70617: PUSH
70618: LD_INT 3
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 2
70627: PUSH
70628: LD_INT 5
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 2
70637: NEG
70638: PUSH
70639: LD_INT 3
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70693: LD_ADDR_VAR 0 34
70697: PUSH
70698: LD_INT 0
70700: PUSH
70701: LD_INT 4
70703: NEG
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 0
70711: PUSH
70712: LD_INT 5
70714: NEG
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 1
70722: PUSH
70723: LD_INT 4
70725: NEG
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 1
70733: PUSH
70734: LD_INT 3
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 0
70744: PUSH
70745: LD_INT 3
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 1
70755: NEG
70756: PUSH
70757: LD_INT 4
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 1
70767: NEG
70768: PUSH
70769: LD_INT 5
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 2
70779: PUSH
70780: LD_INT 3
70782: NEG
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 2
70790: NEG
70791: PUSH
70792: LD_INT 5
70794: NEG
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 3
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 3
70812: PUSH
70813: LD_INT 1
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 4
70823: PUSH
70824: LD_INT 0
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 4
70833: PUSH
70834: LD_INT 1
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 3
70843: PUSH
70844: LD_INT 1
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 2
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 2
70863: PUSH
70864: LD_INT 1
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 2
70874: PUSH
70875: LD_INT 2
70877: NEG
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 4
70885: PUSH
70886: LD_INT 2
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 4
70895: PUSH
70896: LD_INT 4
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 4
70905: PUSH
70906: LD_INT 3
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 5
70915: PUSH
70916: LD_INT 4
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 5
70925: PUSH
70926: LD_INT 5
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 4
70935: PUSH
70936: LD_INT 5
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: LD_INT 4
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 3
70955: PUSH
70956: LD_INT 3
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 5
70965: PUSH
70966: LD_INT 3
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 3
70975: PUSH
70976: LD_INT 5
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 0
70985: PUSH
70986: LD_INT 3
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 0
70995: PUSH
70996: LD_INT 2
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 1
71005: PUSH
71006: LD_INT 3
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 1
71015: PUSH
71016: LD_INT 4
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 0
71025: PUSH
71026: LD_INT 4
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 1
71035: NEG
71036: PUSH
71037: LD_INT 3
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 1
71046: NEG
71047: PUSH
71048: LD_INT 2
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 2
71057: PUSH
71058: LD_INT 4
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 2
71067: NEG
71068: PUSH
71069: LD_INT 2
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 4
71078: NEG
71079: PUSH
71080: LD_INT 0
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 4
71089: NEG
71090: PUSH
71091: LD_INT 1
71093: NEG
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 3
71101: NEG
71102: PUSH
71103: LD_INT 0
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 3
71112: NEG
71113: PUSH
71114: LD_INT 1
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 4
71123: NEG
71124: PUSH
71125: LD_INT 1
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 5
71134: NEG
71135: PUSH
71136: LD_INT 0
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 5
71145: NEG
71146: PUSH
71147: LD_INT 1
71149: NEG
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 5
71157: NEG
71158: PUSH
71159: LD_INT 2
71161: NEG
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 3
71169: NEG
71170: PUSH
71171: LD_INT 2
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: ST_TO_ADDR
// end ; end ;
71225: GO 71228
71227: POP
// case btype of b_depot , b_warehouse :
71228: LD_VAR 0 1
71232: PUSH
71233: LD_INT 0
71235: DOUBLE
71236: EQUAL
71237: IFTRUE 71247
71239: LD_INT 1
71241: DOUBLE
71242: EQUAL
71243: IFTRUE 71247
71245: GO 71448
71247: POP
// case nation of nation_american :
71248: LD_VAR 0 5
71252: PUSH
71253: LD_INT 1
71255: DOUBLE
71256: EQUAL
71257: IFTRUE 71261
71259: GO 71317
71261: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71262: LD_ADDR_VAR 0 9
71266: PUSH
71267: LD_VAR 0 11
71271: PUSH
71272: LD_VAR 0 12
71276: PUSH
71277: LD_VAR 0 13
71281: PUSH
71282: LD_VAR 0 14
71286: PUSH
71287: LD_VAR 0 15
71291: PUSH
71292: LD_VAR 0 16
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: PUSH
71305: LD_VAR 0 4
71309: PUSH
71310: LD_INT 1
71312: PLUS
71313: ARRAY
71314: ST_TO_ADDR
71315: GO 71446
71317: LD_INT 2
71319: DOUBLE
71320: EQUAL
71321: IFTRUE 71325
71323: GO 71381
71325: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71326: LD_ADDR_VAR 0 9
71330: PUSH
71331: LD_VAR 0 17
71335: PUSH
71336: LD_VAR 0 18
71340: PUSH
71341: LD_VAR 0 19
71345: PUSH
71346: LD_VAR 0 20
71350: PUSH
71351: LD_VAR 0 21
71355: PUSH
71356: LD_VAR 0 22
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: PUSH
71369: LD_VAR 0 4
71373: PUSH
71374: LD_INT 1
71376: PLUS
71377: ARRAY
71378: ST_TO_ADDR
71379: GO 71446
71381: LD_INT 3
71383: DOUBLE
71384: EQUAL
71385: IFTRUE 71389
71387: GO 71445
71389: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71390: LD_ADDR_VAR 0 9
71394: PUSH
71395: LD_VAR 0 23
71399: PUSH
71400: LD_VAR 0 24
71404: PUSH
71405: LD_VAR 0 25
71409: PUSH
71410: LD_VAR 0 26
71414: PUSH
71415: LD_VAR 0 27
71419: PUSH
71420: LD_VAR 0 28
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: PUSH
71433: LD_VAR 0 4
71437: PUSH
71438: LD_INT 1
71440: PLUS
71441: ARRAY
71442: ST_TO_ADDR
71443: GO 71446
71445: POP
71446: GO 72001
71448: LD_INT 2
71450: DOUBLE
71451: EQUAL
71452: IFTRUE 71462
71454: LD_INT 3
71456: DOUBLE
71457: EQUAL
71458: IFTRUE 71462
71460: GO 71518
71462: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71463: LD_ADDR_VAR 0 9
71467: PUSH
71468: LD_VAR 0 29
71472: PUSH
71473: LD_VAR 0 30
71477: PUSH
71478: LD_VAR 0 31
71482: PUSH
71483: LD_VAR 0 32
71487: PUSH
71488: LD_VAR 0 33
71492: PUSH
71493: LD_VAR 0 34
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: PUSH
71506: LD_VAR 0 4
71510: PUSH
71511: LD_INT 1
71513: PLUS
71514: ARRAY
71515: ST_TO_ADDR
71516: GO 72001
71518: LD_INT 16
71520: DOUBLE
71521: EQUAL
71522: IFTRUE 71580
71524: LD_INT 17
71526: DOUBLE
71527: EQUAL
71528: IFTRUE 71580
71530: LD_INT 18
71532: DOUBLE
71533: EQUAL
71534: IFTRUE 71580
71536: LD_INT 19
71538: DOUBLE
71539: EQUAL
71540: IFTRUE 71580
71542: LD_INT 22
71544: DOUBLE
71545: EQUAL
71546: IFTRUE 71580
71548: LD_INT 20
71550: DOUBLE
71551: EQUAL
71552: IFTRUE 71580
71554: LD_INT 21
71556: DOUBLE
71557: EQUAL
71558: IFTRUE 71580
71560: LD_INT 23
71562: DOUBLE
71563: EQUAL
71564: IFTRUE 71580
71566: LD_INT 24
71568: DOUBLE
71569: EQUAL
71570: IFTRUE 71580
71572: LD_INT 25
71574: DOUBLE
71575: EQUAL
71576: IFTRUE 71580
71578: GO 71636
71580: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71581: LD_ADDR_VAR 0 9
71585: PUSH
71586: LD_VAR 0 35
71590: PUSH
71591: LD_VAR 0 36
71595: PUSH
71596: LD_VAR 0 37
71600: PUSH
71601: LD_VAR 0 38
71605: PUSH
71606: LD_VAR 0 39
71610: PUSH
71611: LD_VAR 0 40
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: PUSH
71624: LD_VAR 0 4
71628: PUSH
71629: LD_INT 1
71631: PLUS
71632: ARRAY
71633: ST_TO_ADDR
71634: GO 72001
71636: LD_INT 6
71638: DOUBLE
71639: EQUAL
71640: IFTRUE 71692
71642: LD_INT 7
71644: DOUBLE
71645: EQUAL
71646: IFTRUE 71692
71648: LD_INT 8
71650: DOUBLE
71651: EQUAL
71652: IFTRUE 71692
71654: LD_INT 13
71656: DOUBLE
71657: EQUAL
71658: IFTRUE 71692
71660: LD_INT 12
71662: DOUBLE
71663: EQUAL
71664: IFTRUE 71692
71666: LD_INT 15
71668: DOUBLE
71669: EQUAL
71670: IFTRUE 71692
71672: LD_INT 11
71674: DOUBLE
71675: EQUAL
71676: IFTRUE 71692
71678: LD_INT 14
71680: DOUBLE
71681: EQUAL
71682: IFTRUE 71692
71684: LD_INT 10
71686: DOUBLE
71687: EQUAL
71688: IFTRUE 71692
71690: GO 71748
71692: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71693: LD_ADDR_VAR 0 9
71697: PUSH
71698: LD_VAR 0 41
71702: PUSH
71703: LD_VAR 0 42
71707: PUSH
71708: LD_VAR 0 43
71712: PUSH
71713: LD_VAR 0 44
71717: PUSH
71718: LD_VAR 0 45
71722: PUSH
71723: LD_VAR 0 46
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: PUSH
71736: LD_VAR 0 4
71740: PUSH
71741: LD_INT 1
71743: PLUS
71744: ARRAY
71745: ST_TO_ADDR
71746: GO 72001
71748: LD_INT 36
71750: DOUBLE
71751: EQUAL
71752: IFTRUE 71756
71754: GO 71812
71756: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71757: LD_ADDR_VAR 0 9
71761: PUSH
71762: LD_VAR 0 47
71766: PUSH
71767: LD_VAR 0 48
71771: PUSH
71772: LD_VAR 0 49
71776: PUSH
71777: LD_VAR 0 50
71781: PUSH
71782: LD_VAR 0 51
71786: PUSH
71787: LD_VAR 0 52
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: PUSH
71800: LD_VAR 0 4
71804: PUSH
71805: LD_INT 1
71807: PLUS
71808: ARRAY
71809: ST_TO_ADDR
71810: GO 72001
71812: LD_INT 4
71814: DOUBLE
71815: EQUAL
71816: IFTRUE 71838
71818: LD_INT 5
71820: DOUBLE
71821: EQUAL
71822: IFTRUE 71838
71824: LD_INT 34
71826: DOUBLE
71827: EQUAL
71828: IFTRUE 71838
71830: LD_INT 37
71832: DOUBLE
71833: EQUAL
71834: IFTRUE 71838
71836: GO 71894
71838: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71839: LD_ADDR_VAR 0 9
71843: PUSH
71844: LD_VAR 0 53
71848: PUSH
71849: LD_VAR 0 54
71853: PUSH
71854: LD_VAR 0 55
71858: PUSH
71859: LD_VAR 0 56
71863: PUSH
71864: LD_VAR 0 57
71868: PUSH
71869: LD_VAR 0 58
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: PUSH
71882: LD_VAR 0 4
71886: PUSH
71887: LD_INT 1
71889: PLUS
71890: ARRAY
71891: ST_TO_ADDR
71892: GO 72001
71894: LD_INT 31
71896: DOUBLE
71897: EQUAL
71898: IFTRUE 71944
71900: LD_INT 32
71902: DOUBLE
71903: EQUAL
71904: IFTRUE 71944
71906: LD_INT 33
71908: DOUBLE
71909: EQUAL
71910: IFTRUE 71944
71912: LD_INT 27
71914: DOUBLE
71915: EQUAL
71916: IFTRUE 71944
71918: LD_INT 26
71920: DOUBLE
71921: EQUAL
71922: IFTRUE 71944
71924: LD_INT 28
71926: DOUBLE
71927: EQUAL
71928: IFTRUE 71944
71930: LD_INT 29
71932: DOUBLE
71933: EQUAL
71934: IFTRUE 71944
71936: LD_INT 30
71938: DOUBLE
71939: EQUAL
71940: IFTRUE 71944
71942: GO 72000
71944: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71945: LD_ADDR_VAR 0 9
71949: PUSH
71950: LD_VAR 0 59
71954: PUSH
71955: LD_VAR 0 60
71959: PUSH
71960: LD_VAR 0 61
71964: PUSH
71965: LD_VAR 0 62
71969: PUSH
71970: LD_VAR 0 63
71974: PUSH
71975: LD_VAR 0 64
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: PUSH
71988: LD_VAR 0 4
71992: PUSH
71993: LD_INT 1
71995: PLUS
71996: ARRAY
71997: ST_TO_ADDR
71998: GO 72001
72000: POP
// temp_list2 = [ ] ;
72001: LD_ADDR_VAR 0 10
72005: PUSH
72006: EMPTY
72007: ST_TO_ADDR
// for i in temp_list do
72008: LD_ADDR_VAR 0 8
72012: PUSH
72013: LD_VAR 0 9
72017: PUSH
72018: FOR_IN
72019: IFFALSE 72071
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72021: LD_ADDR_VAR 0 10
72025: PUSH
72026: LD_VAR 0 10
72030: PUSH
72031: LD_VAR 0 8
72035: PUSH
72036: LD_INT 1
72038: ARRAY
72039: PUSH
72040: LD_VAR 0 2
72044: PLUS
72045: PUSH
72046: LD_VAR 0 8
72050: PUSH
72051: LD_INT 2
72053: ARRAY
72054: PUSH
72055: LD_VAR 0 3
72059: PLUS
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: EMPTY
72066: LIST
72067: ADD
72068: ST_TO_ADDR
72069: GO 72018
72071: POP
72072: POP
// result = temp_list2 ;
72073: LD_ADDR_VAR 0 7
72077: PUSH
72078: LD_VAR 0 10
72082: ST_TO_ADDR
// end ;
72083: LD_VAR 0 7
72087: RET
// export function EnemyInRange ( unit , dist ) ; begin
72088: LD_INT 0
72090: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72091: LD_ADDR_VAR 0 3
72095: PUSH
72096: LD_VAR 0 1
72100: PPUSH
72101: CALL_OW 255
72105: PPUSH
72106: LD_VAR 0 1
72110: PPUSH
72111: CALL_OW 250
72115: PPUSH
72116: LD_VAR 0 1
72120: PPUSH
72121: CALL_OW 251
72125: PPUSH
72126: LD_VAR 0 2
72130: PPUSH
72131: CALL 45490 0 4
72135: PUSH
72136: LD_INT 4
72138: ARRAY
72139: ST_TO_ADDR
// end ;
72140: LD_VAR 0 3
72144: RET
// export function PlayerSeeMe ( unit ) ; begin
72145: LD_INT 0
72147: PPUSH
// result := See ( your_side , unit ) ;
72148: LD_ADDR_VAR 0 2
72152: PUSH
72153: LD_OWVAR 2
72157: PPUSH
72158: LD_VAR 0 1
72162: PPUSH
72163: CALL_OW 292
72167: ST_TO_ADDR
// end ;
72168: LD_VAR 0 2
72172: RET
// export function ReverseDir ( unit ) ; begin
72173: LD_INT 0
72175: PPUSH
// if not unit then
72176: LD_VAR 0 1
72180: NOT
72181: IFFALSE 72185
// exit ;
72183: GO 72208
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72185: LD_ADDR_VAR 0 2
72189: PUSH
72190: LD_VAR 0 1
72194: PPUSH
72195: CALL_OW 254
72199: PUSH
72200: LD_INT 3
72202: PLUS
72203: PUSH
72204: LD_INT 6
72206: MOD
72207: ST_TO_ADDR
// end ;
72208: LD_VAR 0 2
72212: RET
// export function ReverseArray ( array ) ; var i ; begin
72213: LD_INT 0
72215: PPUSH
72216: PPUSH
// if not array then
72217: LD_VAR 0 1
72221: NOT
72222: IFFALSE 72226
// exit ;
72224: GO 72281
// result := [ ] ;
72226: LD_ADDR_VAR 0 2
72230: PUSH
72231: EMPTY
72232: ST_TO_ADDR
// for i := array downto 1 do
72233: LD_ADDR_VAR 0 3
72237: PUSH
72238: DOUBLE
72239: LD_VAR 0 1
72243: INC
72244: ST_TO_ADDR
72245: LD_INT 1
72247: PUSH
72248: FOR_DOWNTO
72249: IFFALSE 72279
// result := Join ( result , array [ i ] ) ;
72251: LD_ADDR_VAR 0 2
72255: PUSH
72256: LD_VAR 0 2
72260: PPUSH
72261: LD_VAR 0 1
72265: PUSH
72266: LD_VAR 0 3
72270: ARRAY
72271: PPUSH
72272: CALL 76906 0 2
72276: ST_TO_ADDR
72277: GO 72248
72279: POP
72280: POP
// end ;
72281: LD_VAR 0 2
72285: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72286: LD_INT 0
72288: PPUSH
72289: PPUSH
72290: PPUSH
72291: PPUSH
72292: PPUSH
72293: PPUSH
// if not unit or not hexes then
72294: LD_VAR 0 1
72298: NOT
72299: PUSH
72300: LD_VAR 0 2
72304: NOT
72305: OR
72306: IFFALSE 72310
// exit ;
72308: GO 72433
// dist := 9999 ;
72310: LD_ADDR_VAR 0 5
72314: PUSH
72315: LD_INT 9999
72317: ST_TO_ADDR
// for i = 1 to hexes do
72318: LD_ADDR_VAR 0 4
72322: PUSH
72323: DOUBLE
72324: LD_INT 1
72326: DEC
72327: ST_TO_ADDR
72328: LD_VAR 0 2
72332: PUSH
72333: FOR_TO
72334: IFFALSE 72421
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72336: LD_ADDR_VAR 0 6
72340: PUSH
72341: LD_VAR 0 1
72345: PPUSH
72346: LD_VAR 0 2
72350: PUSH
72351: LD_VAR 0 4
72355: ARRAY
72356: PUSH
72357: LD_INT 1
72359: ARRAY
72360: PPUSH
72361: LD_VAR 0 2
72365: PUSH
72366: LD_VAR 0 4
72370: ARRAY
72371: PUSH
72372: LD_INT 2
72374: ARRAY
72375: PPUSH
72376: CALL_OW 297
72380: ST_TO_ADDR
// if tdist < dist then
72381: LD_VAR 0 6
72385: PUSH
72386: LD_VAR 0 5
72390: LESS
72391: IFFALSE 72419
// begin hex := hexes [ i ] ;
72393: LD_ADDR_VAR 0 8
72397: PUSH
72398: LD_VAR 0 2
72402: PUSH
72403: LD_VAR 0 4
72407: ARRAY
72408: ST_TO_ADDR
// dist := tdist ;
72409: LD_ADDR_VAR 0 5
72413: PUSH
72414: LD_VAR 0 6
72418: ST_TO_ADDR
// end ; end ;
72419: GO 72333
72421: POP
72422: POP
// result := hex ;
72423: LD_ADDR_VAR 0 3
72427: PUSH
72428: LD_VAR 0 8
72432: ST_TO_ADDR
// end ;
72433: LD_VAR 0 3
72437: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72438: LD_INT 0
72440: PPUSH
72441: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72442: LD_VAR 0 1
72446: NOT
72447: PUSH
72448: LD_VAR 0 1
72452: PUSH
72453: LD_INT 21
72455: PUSH
72456: LD_INT 2
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 23
72465: PUSH
72466: LD_INT 2
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PPUSH
72477: CALL_OW 69
72481: IN
72482: NOT
72483: OR
72484: IFFALSE 72488
// exit ;
72486: GO 72535
// for i = 1 to 3 do
72488: LD_ADDR_VAR 0 3
72492: PUSH
72493: DOUBLE
72494: LD_INT 1
72496: DEC
72497: ST_TO_ADDR
72498: LD_INT 3
72500: PUSH
72501: FOR_TO
72502: IFFALSE 72533
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72504: LD_VAR 0 1
72508: PPUSH
72509: CALL_OW 250
72513: PPUSH
72514: LD_VAR 0 1
72518: PPUSH
72519: CALL_OW 251
72523: PPUSH
72524: LD_INT 1
72526: PPUSH
72527: CALL_OW 453
72531: GO 72501
72533: POP
72534: POP
// end ;
72535: LD_VAR 0 2
72539: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72540: LD_INT 0
72542: PPUSH
72543: PPUSH
72544: PPUSH
72545: PPUSH
72546: PPUSH
72547: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72548: LD_VAR 0 1
72552: NOT
72553: PUSH
72554: LD_VAR 0 2
72558: NOT
72559: OR
72560: PUSH
72561: LD_VAR 0 1
72565: PPUSH
72566: CALL_OW 314
72570: OR
72571: IFFALSE 72575
// exit ;
72573: GO 73016
// x := GetX ( enemy_unit ) ;
72575: LD_ADDR_VAR 0 7
72579: PUSH
72580: LD_VAR 0 2
72584: PPUSH
72585: CALL_OW 250
72589: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72590: LD_ADDR_VAR 0 8
72594: PUSH
72595: LD_VAR 0 2
72599: PPUSH
72600: CALL_OW 251
72604: ST_TO_ADDR
// if not x or not y then
72605: LD_VAR 0 7
72609: NOT
72610: PUSH
72611: LD_VAR 0 8
72615: NOT
72616: OR
72617: IFFALSE 72621
// exit ;
72619: GO 73016
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72621: LD_ADDR_VAR 0 6
72625: PUSH
72626: LD_VAR 0 7
72630: PPUSH
72631: LD_INT 0
72633: PPUSH
72634: LD_INT 4
72636: PPUSH
72637: CALL_OW 272
72641: PUSH
72642: LD_VAR 0 8
72646: PPUSH
72647: LD_INT 0
72649: PPUSH
72650: LD_INT 4
72652: PPUSH
72653: CALL_OW 273
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_VAR 0 7
72666: PPUSH
72667: LD_INT 1
72669: PPUSH
72670: LD_INT 4
72672: PPUSH
72673: CALL_OW 272
72677: PUSH
72678: LD_VAR 0 8
72682: PPUSH
72683: LD_INT 1
72685: PPUSH
72686: LD_INT 4
72688: PPUSH
72689: CALL_OW 273
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PUSH
72698: LD_VAR 0 7
72702: PPUSH
72703: LD_INT 2
72705: PPUSH
72706: LD_INT 4
72708: PPUSH
72709: CALL_OW 272
72713: PUSH
72714: LD_VAR 0 8
72718: PPUSH
72719: LD_INT 2
72721: PPUSH
72722: LD_INT 4
72724: PPUSH
72725: CALL_OW 273
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_VAR 0 7
72738: PPUSH
72739: LD_INT 3
72741: PPUSH
72742: LD_INT 4
72744: PPUSH
72745: CALL_OW 272
72749: PUSH
72750: LD_VAR 0 8
72754: PPUSH
72755: LD_INT 3
72757: PPUSH
72758: LD_INT 4
72760: PPUSH
72761: CALL_OW 273
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PUSH
72770: LD_VAR 0 7
72774: PPUSH
72775: LD_INT 4
72777: PPUSH
72778: LD_INT 4
72780: PPUSH
72781: CALL_OW 272
72785: PUSH
72786: LD_VAR 0 8
72790: PPUSH
72791: LD_INT 4
72793: PPUSH
72794: LD_INT 4
72796: PPUSH
72797: CALL_OW 273
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_VAR 0 7
72810: PPUSH
72811: LD_INT 5
72813: PPUSH
72814: LD_INT 4
72816: PPUSH
72817: CALL_OW 272
72821: PUSH
72822: LD_VAR 0 8
72826: PPUSH
72827: LD_INT 5
72829: PPUSH
72830: LD_INT 4
72832: PPUSH
72833: CALL_OW 273
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: ST_TO_ADDR
// for i = tmp downto 1 do
72850: LD_ADDR_VAR 0 4
72854: PUSH
72855: DOUBLE
72856: LD_VAR 0 6
72860: INC
72861: ST_TO_ADDR
72862: LD_INT 1
72864: PUSH
72865: FOR_DOWNTO
72866: IFFALSE 72967
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72868: LD_VAR 0 6
72872: PUSH
72873: LD_VAR 0 4
72877: ARRAY
72878: PUSH
72879: LD_INT 1
72881: ARRAY
72882: PPUSH
72883: LD_VAR 0 6
72887: PUSH
72888: LD_VAR 0 4
72892: ARRAY
72893: PUSH
72894: LD_INT 2
72896: ARRAY
72897: PPUSH
72898: CALL_OW 488
72902: NOT
72903: PUSH
72904: LD_VAR 0 6
72908: PUSH
72909: LD_VAR 0 4
72913: ARRAY
72914: PUSH
72915: LD_INT 1
72917: ARRAY
72918: PPUSH
72919: LD_VAR 0 6
72923: PUSH
72924: LD_VAR 0 4
72928: ARRAY
72929: PUSH
72930: LD_INT 2
72932: ARRAY
72933: PPUSH
72934: CALL_OW 428
72938: PUSH
72939: LD_INT 0
72941: NONEQUAL
72942: OR
72943: IFFALSE 72965
// tmp := Delete ( tmp , i ) ;
72945: LD_ADDR_VAR 0 6
72949: PUSH
72950: LD_VAR 0 6
72954: PPUSH
72955: LD_VAR 0 4
72959: PPUSH
72960: CALL_OW 3
72964: ST_TO_ADDR
72965: GO 72865
72967: POP
72968: POP
// j := GetClosestHex ( unit , tmp ) ;
72969: LD_ADDR_VAR 0 5
72973: PUSH
72974: LD_VAR 0 1
72978: PPUSH
72979: LD_VAR 0 6
72983: PPUSH
72984: CALL 72286 0 2
72988: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72989: LD_VAR 0 1
72993: PPUSH
72994: LD_VAR 0 5
72998: PUSH
72999: LD_INT 1
73001: ARRAY
73002: PPUSH
73003: LD_VAR 0 5
73007: PUSH
73008: LD_INT 2
73010: ARRAY
73011: PPUSH
73012: CALL_OW 111
// end ;
73016: LD_VAR 0 3
73020: RET
// export function PrepareApemanSoldier ( ) ; begin
73021: LD_INT 0
73023: PPUSH
// uc_nation := 0 ;
73024: LD_ADDR_OWVAR 21
73028: PUSH
73029: LD_INT 0
73031: ST_TO_ADDR
// hc_sex := sex_male ;
73032: LD_ADDR_OWVAR 27
73036: PUSH
73037: LD_INT 1
73039: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73040: LD_ADDR_OWVAR 28
73044: PUSH
73045: LD_INT 15
73047: ST_TO_ADDR
// hc_gallery :=  ;
73048: LD_ADDR_OWVAR 33
73052: PUSH
73053: LD_STRING 
73055: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73056: LD_ADDR_OWVAR 31
73060: PUSH
73061: LD_INT 0
73063: PPUSH
73064: LD_INT 3
73066: PPUSH
73067: CALL_OW 12
73071: PUSH
73072: LD_INT 0
73074: PPUSH
73075: LD_INT 3
73077: PPUSH
73078: CALL_OW 12
73082: PUSH
73083: LD_INT 0
73085: PUSH
73086: LD_INT 0
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: ST_TO_ADDR
// end ;
73095: LD_VAR 0 1
73099: RET
// export function PrepareApemanEngineer ( ) ; begin
73100: LD_INT 0
73102: PPUSH
// uc_nation := 0 ;
73103: LD_ADDR_OWVAR 21
73107: PUSH
73108: LD_INT 0
73110: ST_TO_ADDR
// hc_sex := sex_male ;
73111: LD_ADDR_OWVAR 27
73115: PUSH
73116: LD_INT 1
73118: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73119: LD_ADDR_OWVAR 28
73123: PUSH
73124: LD_INT 16
73126: ST_TO_ADDR
// hc_gallery :=  ;
73127: LD_ADDR_OWVAR 33
73131: PUSH
73132: LD_STRING 
73134: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73135: LD_ADDR_OWVAR 31
73139: PUSH
73140: LD_INT 0
73142: PPUSH
73143: LD_INT 3
73145: PPUSH
73146: CALL_OW 12
73150: PUSH
73151: LD_INT 0
73153: PPUSH
73154: LD_INT 3
73156: PPUSH
73157: CALL_OW 12
73161: PUSH
73162: LD_INT 0
73164: PUSH
73165: LD_INT 0
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: ST_TO_ADDR
// end ;
73174: LD_VAR 0 1
73178: RET
// export function PrepareApeman ( agressivity ) ; begin
73179: LD_INT 0
73181: PPUSH
// uc_side := 0 ;
73182: LD_ADDR_OWVAR 20
73186: PUSH
73187: LD_INT 0
73189: ST_TO_ADDR
// uc_nation := 0 ;
73190: LD_ADDR_OWVAR 21
73194: PUSH
73195: LD_INT 0
73197: ST_TO_ADDR
// hc_sex := sex_male ;
73198: LD_ADDR_OWVAR 27
73202: PUSH
73203: LD_INT 1
73205: ST_TO_ADDR
// hc_class := class_apeman ;
73206: LD_ADDR_OWVAR 28
73210: PUSH
73211: LD_INT 12
73213: ST_TO_ADDR
// hc_gallery :=  ;
73214: LD_ADDR_OWVAR 33
73218: PUSH
73219: LD_STRING 
73221: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73222: LD_ADDR_OWVAR 35
73226: PUSH
73227: LD_VAR 0 1
73231: NEG
73232: PPUSH
73233: LD_VAR 0 1
73237: PPUSH
73238: CALL_OW 12
73242: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73243: LD_ADDR_OWVAR 31
73247: PUSH
73248: LD_INT 0
73250: PPUSH
73251: LD_INT 3
73253: PPUSH
73254: CALL_OW 12
73258: PUSH
73259: LD_INT 0
73261: PPUSH
73262: LD_INT 3
73264: PPUSH
73265: CALL_OW 12
73269: PUSH
73270: LD_INT 0
73272: PUSH
73273: LD_INT 0
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: ST_TO_ADDR
// end ;
73282: LD_VAR 0 2
73286: RET
// export function PrepareTiger ( agressivity ) ; begin
73287: LD_INT 0
73289: PPUSH
// uc_side := 0 ;
73290: LD_ADDR_OWVAR 20
73294: PUSH
73295: LD_INT 0
73297: ST_TO_ADDR
// uc_nation := 0 ;
73298: LD_ADDR_OWVAR 21
73302: PUSH
73303: LD_INT 0
73305: ST_TO_ADDR
// hc_class := class_tiger ;
73306: LD_ADDR_OWVAR 28
73310: PUSH
73311: LD_INT 14
73313: ST_TO_ADDR
// hc_gallery :=  ;
73314: LD_ADDR_OWVAR 33
73318: PUSH
73319: LD_STRING 
73321: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73322: LD_ADDR_OWVAR 35
73326: PUSH
73327: LD_VAR 0 1
73331: NEG
73332: PPUSH
73333: LD_VAR 0 1
73337: PPUSH
73338: CALL_OW 12
73342: ST_TO_ADDR
// end ;
73343: LD_VAR 0 2
73347: RET
// export function PrepareEnchidna ( ) ; begin
73348: LD_INT 0
73350: PPUSH
// uc_side := 0 ;
73351: LD_ADDR_OWVAR 20
73355: PUSH
73356: LD_INT 0
73358: ST_TO_ADDR
// uc_nation := 0 ;
73359: LD_ADDR_OWVAR 21
73363: PUSH
73364: LD_INT 0
73366: ST_TO_ADDR
// hc_class := class_baggie ;
73367: LD_ADDR_OWVAR 28
73371: PUSH
73372: LD_INT 13
73374: ST_TO_ADDR
// hc_gallery :=  ;
73375: LD_ADDR_OWVAR 33
73379: PUSH
73380: LD_STRING 
73382: ST_TO_ADDR
// end ;
73383: LD_VAR 0 1
73387: RET
// export function PrepareFrog ( ) ; begin
73388: LD_INT 0
73390: PPUSH
// uc_side := 0 ;
73391: LD_ADDR_OWVAR 20
73395: PUSH
73396: LD_INT 0
73398: ST_TO_ADDR
// uc_nation := 0 ;
73399: LD_ADDR_OWVAR 21
73403: PUSH
73404: LD_INT 0
73406: ST_TO_ADDR
// hc_class := class_frog ;
73407: LD_ADDR_OWVAR 28
73411: PUSH
73412: LD_INT 19
73414: ST_TO_ADDR
// hc_gallery :=  ;
73415: LD_ADDR_OWVAR 33
73419: PUSH
73420: LD_STRING 
73422: ST_TO_ADDR
// end ;
73423: LD_VAR 0 1
73427: RET
// export function PrepareFish ( ) ; begin
73428: LD_INT 0
73430: PPUSH
// uc_side := 0 ;
73431: LD_ADDR_OWVAR 20
73435: PUSH
73436: LD_INT 0
73438: ST_TO_ADDR
// uc_nation := 0 ;
73439: LD_ADDR_OWVAR 21
73443: PUSH
73444: LD_INT 0
73446: ST_TO_ADDR
// hc_class := class_fish ;
73447: LD_ADDR_OWVAR 28
73451: PUSH
73452: LD_INT 20
73454: ST_TO_ADDR
// hc_gallery :=  ;
73455: LD_ADDR_OWVAR 33
73459: PUSH
73460: LD_STRING 
73462: ST_TO_ADDR
// end ;
73463: LD_VAR 0 1
73467: RET
// export function PrepareBird ( ) ; begin
73468: LD_INT 0
73470: PPUSH
// uc_side := 0 ;
73471: LD_ADDR_OWVAR 20
73475: PUSH
73476: LD_INT 0
73478: ST_TO_ADDR
// uc_nation := 0 ;
73479: LD_ADDR_OWVAR 21
73483: PUSH
73484: LD_INT 0
73486: ST_TO_ADDR
// hc_class := class_phororhacos ;
73487: LD_ADDR_OWVAR 28
73491: PUSH
73492: LD_INT 18
73494: ST_TO_ADDR
// hc_gallery :=  ;
73495: LD_ADDR_OWVAR 33
73499: PUSH
73500: LD_STRING 
73502: ST_TO_ADDR
// end ;
73503: LD_VAR 0 1
73507: RET
// export function PrepareHorse ( ) ; begin
73508: LD_INT 0
73510: PPUSH
// uc_side := 0 ;
73511: LD_ADDR_OWVAR 20
73515: PUSH
73516: LD_INT 0
73518: ST_TO_ADDR
// uc_nation := 0 ;
73519: LD_ADDR_OWVAR 21
73523: PUSH
73524: LD_INT 0
73526: ST_TO_ADDR
// hc_class := class_horse ;
73527: LD_ADDR_OWVAR 28
73531: PUSH
73532: LD_INT 21
73534: ST_TO_ADDR
// hc_gallery :=  ;
73535: LD_ADDR_OWVAR 33
73539: PUSH
73540: LD_STRING 
73542: ST_TO_ADDR
// end ;
73543: LD_VAR 0 1
73547: RET
// export function PrepareMastodont ( ) ; begin
73548: LD_INT 0
73550: PPUSH
// uc_side := 0 ;
73551: LD_ADDR_OWVAR 20
73555: PUSH
73556: LD_INT 0
73558: ST_TO_ADDR
// uc_nation := 0 ;
73559: LD_ADDR_OWVAR 21
73563: PUSH
73564: LD_INT 0
73566: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73567: LD_ADDR_OWVAR 37
73571: PUSH
73572: LD_INT 31
73574: ST_TO_ADDR
// vc_control := control_rider ;
73575: LD_ADDR_OWVAR 38
73579: PUSH
73580: LD_INT 4
73582: ST_TO_ADDR
// end ;
73583: LD_VAR 0 1
73587: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73588: LD_INT 0
73590: PPUSH
73591: PPUSH
73592: PPUSH
// uc_side = 0 ;
73593: LD_ADDR_OWVAR 20
73597: PUSH
73598: LD_INT 0
73600: ST_TO_ADDR
// uc_nation = 0 ;
73601: LD_ADDR_OWVAR 21
73605: PUSH
73606: LD_INT 0
73608: ST_TO_ADDR
// InitHc_All ( ) ;
73609: CALL_OW 584
// InitVc ;
73613: CALL_OW 20
// if mastodonts then
73617: LD_VAR 0 6
73621: IFFALSE 73688
// for i = 1 to mastodonts do
73623: LD_ADDR_VAR 0 11
73627: PUSH
73628: DOUBLE
73629: LD_INT 1
73631: DEC
73632: ST_TO_ADDR
73633: LD_VAR 0 6
73637: PUSH
73638: FOR_TO
73639: IFFALSE 73686
// begin vc_chassis := 31 ;
73641: LD_ADDR_OWVAR 37
73645: PUSH
73646: LD_INT 31
73648: ST_TO_ADDR
// vc_control := control_rider ;
73649: LD_ADDR_OWVAR 38
73653: PUSH
73654: LD_INT 4
73656: ST_TO_ADDR
// animal := CreateVehicle ;
73657: LD_ADDR_VAR 0 12
73661: PUSH
73662: CALL_OW 45
73666: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73667: LD_VAR 0 12
73671: PPUSH
73672: LD_VAR 0 8
73676: PPUSH
73677: LD_INT 0
73679: PPUSH
73680: CALL 75823 0 3
// end ;
73684: GO 73638
73686: POP
73687: POP
// if horses then
73688: LD_VAR 0 5
73692: IFFALSE 73759
// for i = 1 to horses do
73694: LD_ADDR_VAR 0 11
73698: PUSH
73699: DOUBLE
73700: LD_INT 1
73702: DEC
73703: ST_TO_ADDR
73704: LD_VAR 0 5
73708: PUSH
73709: FOR_TO
73710: IFFALSE 73757
// begin hc_class := 21 ;
73712: LD_ADDR_OWVAR 28
73716: PUSH
73717: LD_INT 21
73719: ST_TO_ADDR
// hc_gallery :=  ;
73720: LD_ADDR_OWVAR 33
73724: PUSH
73725: LD_STRING 
73727: ST_TO_ADDR
// animal := CreateHuman ;
73728: LD_ADDR_VAR 0 12
73732: PUSH
73733: CALL_OW 44
73737: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73738: LD_VAR 0 12
73742: PPUSH
73743: LD_VAR 0 8
73747: PPUSH
73748: LD_INT 0
73750: PPUSH
73751: CALL 75823 0 3
// end ;
73755: GO 73709
73757: POP
73758: POP
// if birds then
73759: LD_VAR 0 1
73763: IFFALSE 73830
// for i = 1 to birds do
73765: LD_ADDR_VAR 0 11
73769: PUSH
73770: DOUBLE
73771: LD_INT 1
73773: DEC
73774: ST_TO_ADDR
73775: LD_VAR 0 1
73779: PUSH
73780: FOR_TO
73781: IFFALSE 73828
// begin hc_class = 18 ;
73783: LD_ADDR_OWVAR 28
73787: PUSH
73788: LD_INT 18
73790: ST_TO_ADDR
// hc_gallery =  ;
73791: LD_ADDR_OWVAR 33
73795: PUSH
73796: LD_STRING 
73798: ST_TO_ADDR
// animal := CreateHuman ;
73799: LD_ADDR_VAR 0 12
73803: PUSH
73804: CALL_OW 44
73808: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73809: LD_VAR 0 12
73813: PPUSH
73814: LD_VAR 0 8
73818: PPUSH
73819: LD_INT 0
73821: PPUSH
73822: CALL 75823 0 3
// end ;
73826: GO 73780
73828: POP
73829: POP
// if tigers then
73830: LD_VAR 0 2
73834: IFFALSE 73918
// for i = 1 to tigers do
73836: LD_ADDR_VAR 0 11
73840: PUSH
73841: DOUBLE
73842: LD_INT 1
73844: DEC
73845: ST_TO_ADDR
73846: LD_VAR 0 2
73850: PUSH
73851: FOR_TO
73852: IFFALSE 73916
// begin hc_class = class_tiger ;
73854: LD_ADDR_OWVAR 28
73858: PUSH
73859: LD_INT 14
73861: ST_TO_ADDR
// hc_gallery =  ;
73862: LD_ADDR_OWVAR 33
73866: PUSH
73867: LD_STRING 
73869: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73870: LD_ADDR_OWVAR 35
73874: PUSH
73875: LD_INT 7
73877: NEG
73878: PPUSH
73879: LD_INT 7
73881: PPUSH
73882: CALL_OW 12
73886: ST_TO_ADDR
// animal := CreateHuman ;
73887: LD_ADDR_VAR 0 12
73891: PUSH
73892: CALL_OW 44
73896: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73897: LD_VAR 0 12
73901: PPUSH
73902: LD_VAR 0 8
73906: PPUSH
73907: LD_INT 0
73909: PPUSH
73910: CALL 75823 0 3
// end ;
73914: GO 73851
73916: POP
73917: POP
// if apemans then
73918: LD_VAR 0 3
73922: IFFALSE 74045
// for i = 1 to apemans do
73924: LD_ADDR_VAR 0 11
73928: PUSH
73929: DOUBLE
73930: LD_INT 1
73932: DEC
73933: ST_TO_ADDR
73934: LD_VAR 0 3
73938: PUSH
73939: FOR_TO
73940: IFFALSE 74043
// begin hc_class = class_apeman ;
73942: LD_ADDR_OWVAR 28
73946: PUSH
73947: LD_INT 12
73949: ST_TO_ADDR
// hc_gallery =  ;
73950: LD_ADDR_OWVAR 33
73954: PUSH
73955: LD_STRING 
73957: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73958: LD_ADDR_OWVAR 35
73962: PUSH
73963: LD_INT 2
73965: NEG
73966: PPUSH
73967: LD_INT 2
73969: PPUSH
73970: CALL_OW 12
73974: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73975: LD_ADDR_OWVAR 31
73979: PUSH
73980: LD_INT 1
73982: PPUSH
73983: LD_INT 3
73985: PPUSH
73986: CALL_OW 12
73990: PUSH
73991: LD_INT 1
73993: PPUSH
73994: LD_INT 3
73996: PPUSH
73997: CALL_OW 12
74001: PUSH
74002: LD_INT 0
74004: PUSH
74005: LD_INT 0
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: ST_TO_ADDR
// animal := CreateHuman ;
74014: LD_ADDR_VAR 0 12
74018: PUSH
74019: CALL_OW 44
74023: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74024: LD_VAR 0 12
74028: PPUSH
74029: LD_VAR 0 8
74033: PPUSH
74034: LD_INT 0
74036: PPUSH
74037: CALL 75823 0 3
// end ;
74041: GO 73939
74043: POP
74044: POP
// if enchidnas then
74045: LD_VAR 0 4
74049: IFFALSE 74116
// for i = 1 to enchidnas do
74051: LD_ADDR_VAR 0 11
74055: PUSH
74056: DOUBLE
74057: LD_INT 1
74059: DEC
74060: ST_TO_ADDR
74061: LD_VAR 0 4
74065: PUSH
74066: FOR_TO
74067: IFFALSE 74114
// begin hc_class = 13 ;
74069: LD_ADDR_OWVAR 28
74073: PUSH
74074: LD_INT 13
74076: ST_TO_ADDR
// hc_gallery =  ;
74077: LD_ADDR_OWVAR 33
74081: PUSH
74082: LD_STRING 
74084: ST_TO_ADDR
// animal := CreateHuman ;
74085: LD_ADDR_VAR 0 12
74089: PUSH
74090: CALL_OW 44
74094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74095: LD_VAR 0 12
74099: PPUSH
74100: LD_VAR 0 8
74104: PPUSH
74105: LD_INT 0
74107: PPUSH
74108: CALL 75823 0 3
// end ;
74112: GO 74066
74114: POP
74115: POP
// if fishes then
74116: LD_VAR 0 7
74120: IFFALSE 74187
// for i = 1 to fishes do
74122: LD_ADDR_VAR 0 11
74126: PUSH
74127: DOUBLE
74128: LD_INT 1
74130: DEC
74131: ST_TO_ADDR
74132: LD_VAR 0 7
74136: PUSH
74137: FOR_TO
74138: IFFALSE 74185
// begin hc_class = 20 ;
74140: LD_ADDR_OWVAR 28
74144: PUSH
74145: LD_INT 20
74147: ST_TO_ADDR
// hc_gallery =  ;
74148: LD_ADDR_OWVAR 33
74152: PUSH
74153: LD_STRING 
74155: ST_TO_ADDR
// animal := CreateHuman ;
74156: LD_ADDR_VAR 0 12
74160: PUSH
74161: CALL_OW 44
74165: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74166: LD_VAR 0 12
74170: PPUSH
74171: LD_VAR 0 9
74175: PPUSH
74176: LD_INT 0
74178: PPUSH
74179: CALL 75823 0 3
// end ;
74183: GO 74137
74185: POP
74186: POP
// end ;
74187: LD_VAR 0 10
74191: RET
// export function WantHeal ( sci , unit ) ; begin
74192: LD_INT 0
74194: PPUSH
// if GetTaskList ( sci ) > 0 then
74195: LD_VAR 0 1
74199: PPUSH
74200: CALL_OW 437
74204: PUSH
74205: LD_INT 0
74207: GREATER
74208: IFFALSE 74278
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74210: LD_VAR 0 1
74214: PPUSH
74215: CALL_OW 437
74219: PUSH
74220: LD_INT 1
74222: ARRAY
74223: PUSH
74224: LD_INT 1
74226: ARRAY
74227: PUSH
74228: LD_STRING l
74230: EQUAL
74231: PUSH
74232: LD_VAR 0 1
74236: PPUSH
74237: CALL_OW 437
74241: PUSH
74242: LD_INT 1
74244: ARRAY
74245: PUSH
74246: LD_INT 4
74248: ARRAY
74249: PUSH
74250: LD_VAR 0 2
74254: EQUAL
74255: AND
74256: IFFALSE 74268
// result := true else
74258: LD_ADDR_VAR 0 3
74262: PUSH
74263: LD_INT 1
74265: ST_TO_ADDR
74266: GO 74276
// result := false ;
74268: LD_ADDR_VAR 0 3
74272: PUSH
74273: LD_INT 0
74275: ST_TO_ADDR
// end else
74276: GO 74286
// result := false ;
74278: LD_ADDR_VAR 0 3
74282: PUSH
74283: LD_INT 0
74285: ST_TO_ADDR
// end ;
74286: LD_VAR 0 3
74290: RET
// export function HealTarget ( sci ) ; begin
74291: LD_INT 0
74293: PPUSH
// if not sci then
74294: LD_VAR 0 1
74298: NOT
74299: IFFALSE 74303
// exit ;
74301: GO 74368
// result := 0 ;
74303: LD_ADDR_VAR 0 2
74307: PUSH
74308: LD_INT 0
74310: ST_TO_ADDR
// if GetTaskList ( sci ) then
74311: LD_VAR 0 1
74315: PPUSH
74316: CALL_OW 437
74320: IFFALSE 74368
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74322: LD_VAR 0 1
74326: PPUSH
74327: CALL_OW 437
74331: PUSH
74332: LD_INT 1
74334: ARRAY
74335: PUSH
74336: LD_INT 1
74338: ARRAY
74339: PUSH
74340: LD_STRING l
74342: EQUAL
74343: IFFALSE 74368
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74345: LD_ADDR_VAR 0 2
74349: PUSH
74350: LD_VAR 0 1
74354: PPUSH
74355: CALL_OW 437
74359: PUSH
74360: LD_INT 1
74362: ARRAY
74363: PUSH
74364: LD_INT 4
74366: ARRAY
74367: ST_TO_ADDR
// end ;
74368: LD_VAR 0 2
74372: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74373: LD_INT 0
74375: PPUSH
74376: PPUSH
74377: PPUSH
74378: PPUSH
// if not base_units then
74379: LD_VAR 0 1
74383: NOT
74384: IFFALSE 74388
// exit ;
74386: GO 74475
// result := false ;
74388: LD_ADDR_VAR 0 2
74392: PUSH
74393: LD_INT 0
74395: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74396: LD_ADDR_VAR 0 5
74400: PUSH
74401: LD_VAR 0 1
74405: PPUSH
74406: LD_INT 21
74408: PUSH
74409: LD_INT 3
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: PPUSH
74416: CALL_OW 72
74420: ST_TO_ADDR
// if not tmp then
74421: LD_VAR 0 5
74425: NOT
74426: IFFALSE 74430
// exit ;
74428: GO 74475
// for i in tmp do
74430: LD_ADDR_VAR 0 3
74434: PUSH
74435: LD_VAR 0 5
74439: PUSH
74440: FOR_IN
74441: IFFALSE 74473
// begin result := EnemyInRange ( i , 22 ) ;
74443: LD_ADDR_VAR 0 2
74447: PUSH
74448: LD_VAR 0 3
74452: PPUSH
74453: LD_INT 22
74455: PPUSH
74456: CALL 72088 0 2
74460: ST_TO_ADDR
// if result then
74461: LD_VAR 0 2
74465: IFFALSE 74471
// exit ;
74467: POP
74468: POP
74469: GO 74475
// end ;
74471: GO 74440
74473: POP
74474: POP
// end ;
74475: LD_VAR 0 2
74479: RET
// export function FilterByTag ( units , tag ) ; begin
74480: LD_INT 0
74482: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74483: LD_ADDR_VAR 0 3
74487: PUSH
74488: LD_VAR 0 1
74492: PPUSH
74493: LD_INT 120
74495: PUSH
74496: LD_VAR 0 2
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PPUSH
74505: CALL_OW 72
74509: ST_TO_ADDR
// end ;
74510: LD_VAR 0 3
74514: RET
// export function IsDriver ( un ) ; begin
74515: LD_INT 0
74517: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74518: LD_ADDR_VAR 0 2
74522: PUSH
74523: LD_VAR 0 1
74527: PUSH
74528: LD_INT 55
74530: PUSH
74531: EMPTY
74532: LIST
74533: PPUSH
74534: CALL_OW 69
74538: IN
74539: ST_TO_ADDR
// end ;
74540: LD_VAR 0 2
74544: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74545: LD_INT 0
74547: PPUSH
74548: PPUSH
// list := [ ] ;
74549: LD_ADDR_VAR 0 5
74553: PUSH
74554: EMPTY
74555: ST_TO_ADDR
// case d of 0 :
74556: LD_VAR 0 3
74560: PUSH
74561: LD_INT 0
74563: DOUBLE
74564: EQUAL
74565: IFTRUE 74569
74567: GO 74702
74569: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74570: LD_ADDR_VAR 0 5
74574: PUSH
74575: LD_VAR 0 1
74579: PUSH
74580: LD_INT 4
74582: MINUS
74583: PUSH
74584: LD_VAR 0 2
74588: PUSH
74589: LD_INT 4
74591: MINUS
74592: PUSH
74593: LD_INT 2
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: LIST
74600: PUSH
74601: LD_VAR 0 1
74605: PUSH
74606: LD_INT 3
74608: MINUS
74609: PUSH
74610: LD_VAR 0 2
74614: PUSH
74615: LD_INT 1
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: LIST
74622: PUSH
74623: LD_VAR 0 1
74627: PUSH
74628: LD_INT 4
74630: PLUS
74631: PUSH
74632: LD_VAR 0 2
74636: PUSH
74637: LD_INT 4
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: LIST
74644: PUSH
74645: LD_VAR 0 1
74649: PUSH
74650: LD_INT 3
74652: PLUS
74653: PUSH
74654: LD_VAR 0 2
74658: PUSH
74659: LD_INT 3
74661: PLUS
74662: PUSH
74663: LD_INT 5
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: LIST
74670: PUSH
74671: LD_VAR 0 1
74675: PUSH
74676: LD_VAR 0 2
74680: PUSH
74681: LD_INT 4
74683: PLUS
74684: PUSH
74685: LD_INT 0
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: LIST
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: LIST
74697: LIST
74698: LIST
74699: ST_TO_ADDR
// end ; 1 :
74700: GO 75400
74702: LD_INT 1
74704: DOUBLE
74705: EQUAL
74706: IFTRUE 74710
74708: GO 74843
74710: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74711: LD_ADDR_VAR 0 5
74715: PUSH
74716: LD_VAR 0 1
74720: PUSH
74721: LD_VAR 0 2
74725: PUSH
74726: LD_INT 4
74728: MINUS
74729: PUSH
74730: LD_INT 3
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: LIST
74737: PUSH
74738: LD_VAR 0 1
74742: PUSH
74743: LD_INT 3
74745: MINUS
74746: PUSH
74747: LD_VAR 0 2
74751: PUSH
74752: LD_INT 3
74754: MINUS
74755: PUSH
74756: LD_INT 2
74758: PUSH
74759: EMPTY
74760: LIST
74761: LIST
74762: LIST
74763: PUSH
74764: LD_VAR 0 1
74768: PUSH
74769: LD_INT 4
74771: MINUS
74772: PUSH
74773: LD_VAR 0 2
74777: PUSH
74778: LD_INT 1
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: LIST
74785: PUSH
74786: LD_VAR 0 1
74790: PUSH
74791: LD_VAR 0 2
74795: PUSH
74796: LD_INT 3
74798: PLUS
74799: PUSH
74800: LD_INT 0
74802: PUSH
74803: EMPTY
74804: LIST
74805: LIST
74806: LIST
74807: PUSH
74808: LD_VAR 0 1
74812: PUSH
74813: LD_INT 4
74815: PLUS
74816: PUSH
74817: LD_VAR 0 2
74821: PUSH
74822: LD_INT 4
74824: PLUS
74825: PUSH
74826: LD_INT 5
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: LIST
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: ST_TO_ADDR
// end ; 2 :
74841: GO 75400
74843: LD_INT 2
74845: DOUBLE
74846: EQUAL
74847: IFTRUE 74851
74849: GO 74980
74851: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74852: LD_ADDR_VAR 0 5
74856: PUSH
74857: LD_VAR 0 1
74861: PUSH
74862: LD_VAR 0 2
74866: PUSH
74867: LD_INT 3
74869: MINUS
74870: PUSH
74871: LD_INT 3
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: LIST
74878: PUSH
74879: LD_VAR 0 1
74883: PUSH
74884: LD_INT 4
74886: PLUS
74887: PUSH
74888: LD_VAR 0 2
74892: PUSH
74893: LD_INT 4
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: LIST
74900: PUSH
74901: LD_VAR 0 1
74905: PUSH
74906: LD_VAR 0 2
74910: PUSH
74911: LD_INT 4
74913: PLUS
74914: PUSH
74915: LD_INT 0
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: LIST
74922: PUSH
74923: LD_VAR 0 1
74927: PUSH
74928: LD_INT 3
74930: MINUS
74931: PUSH
74932: LD_VAR 0 2
74936: PUSH
74937: LD_INT 1
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: LIST
74944: PUSH
74945: LD_VAR 0 1
74949: PUSH
74950: LD_INT 4
74952: MINUS
74953: PUSH
74954: LD_VAR 0 2
74958: PUSH
74959: LD_INT 4
74961: MINUS
74962: PUSH
74963: LD_INT 2
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: LIST
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: ST_TO_ADDR
// end ; 3 :
74978: GO 75400
74980: LD_INT 3
74982: DOUBLE
74983: EQUAL
74984: IFTRUE 74988
74986: GO 75121
74988: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74989: LD_ADDR_VAR 0 5
74993: PUSH
74994: LD_VAR 0 1
74998: PUSH
74999: LD_INT 3
75001: PLUS
75002: PUSH
75003: LD_VAR 0 2
75007: PUSH
75008: LD_INT 4
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: LIST
75015: PUSH
75016: LD_VAR 0 1
75020: PUSH
75021: LD_INT 4
75023: PLUS
75024: PUSH
75025: LD_VAR 0 2
75029: PUSH
75030: LD_INT 4
75032: PLUS
75033: PUSH
75034: LD_INT 5
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: LIST
75041: PUSH
75042: LD_VAR 0 1
75046: PUSH
75047: LD_INT 4
75049: MINUS
75050: PUSH
75051: LD_VAR 0 2
75055: PUSH
75056: LD_INT 1
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: LIST
75063: PUSH
75064: LD_VAR 0 1
75068: PUSH
75069: LD_VAR 0 2
75073: PUSH
75074: LD_INT 4
75076: MINUS
75077: PUSH
75078: LD_INT 3
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: LIST
75085: PUSH
75086: LD_VAR 0 1
75090: PUSH
75091: LD_INT 3
75093: MINUS
75094: PUSH
75095: LD_VAR 0 2
75099: PUSH
75100: LD_INT 3
75102: MINUS
75103: PUSH
75104: LD_INT 2
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: LIST
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: ST_TO_ADDR
// end ; 4 :
75119: GO 75400
75121: LD_INT 4
75123: DOUBLE
75124: EQUAL
75125: IFTRUE 75129
75127: GO 75262
75129: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75130: LD_ADDR_VAR 0 5
75134: PUSH
75135: LD_VAR 0 1
75139: PUSH
75140: LD_VAR 0 2
75144: PUSH
75145: LD_INT 4
75147: PLUS
75148: PUSH
75149: LD_INT 0
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: LIST
75156: PUSH
75157: LD_VAR 0 1
75161: PUSH
75162: LD_INT 3
75164: PLUS
75165: PUSH
75166: LD_VAR 0 2
75170: PUSH
75171: LD_INT 3
75173: PLUS
75174: PUSH
75175: LD_INT 5
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: LIST
75182: PUSH
75183: LD_VAR 0 1
75187: PUSH
75188: LD_INT 4
75190: PLUS
75191: PUSH
75192: LD_VAR 0 2
75196: PUSH
75197: LD_INT 4
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: LIST
75204: PUSH
75205: LD_VAR 0 1
75209: PUSH
75210: LD_VAR 0 2
75214: PUSH
75215: LD_INT 3
75217: MINUS
75218: PUSH
75219: LD_INT 3
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: LIST
75226: PUSH
75227: LD_VAR 0 1
75231: PUSH
75232: LD_INT 4
75234: MINUS
75235: PUSH
75236: LD_VAR 0 2
75240: PUSH
75241: LD_INT 4
75243: MINUS
75244: PUSH
75245: LD_INT 2
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: LIST
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: LIST
75259: ST_TO_ADDR
// end ; 5 :
75260: GO 75400
75262: LD_INT 5
75264: DOUBLE
75265: EQUAL
75266: IFTRUE 75270
75268: GO 75399
75270: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75271: LD_ADDR_VAR 0 5
75275: PUSH
75276: LD_VAR 0 1
75280: PUSH
75281: LD_INT 4
75283: MINUS
75284: PUSH
75285: LD_VAR 0 2
75289: PUSH
75290: LD_INT 1
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: LIST
75297: PUSH
75298: LD_VAR 0 1
75302: PUSH
75303: LD_VAR 0 2
75307: PUSH
75308: LD_INT 4
75310: MINUS
75311: PUSH
75312: LD_INT 3
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: LIST
75319: PUSH
75320: LD_VAR 0 1
75324: PUSH
75325: LD_INT 4
75327: PLUS
75328: PUSH
75329: LD_VAR 0 2
75333: PUSH
75334: LD_INT 4
75336: PLUS
75337: PUSH
75338: LD_INT 5
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: LIST
75345: PUSH
75346: LD_VAR 0 1
75350: PUSH
75351: LD_INT 3
75353: PLUS
75354: PUSH
75355: LD_VAR 0 2
75359: PUSH
75360: LD_INT 4
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: LIST
75367: PUSH
75368: LD_VAR 0 1
75372: PUSH
75373: LD_VAR 0 2
75377: PUSH
75378: LD_INT 3
75380: PLUS
75381: PUSH
75382: LD_INT 0
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: LIST
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: ST_TO_ADDR
// end ; end ;
75397: GO 75400
75399: POP
// result := list ;
75400: LD_ADDR_VAR 0 4
75404: PUSH
75405: LD_VAR 0 5
75409: ST_TO_ADDR
// end ;
75410: LD_VAR 0 4
75414: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75415: LD_INT 0
75417: PPUSH
75418: PPUSH
75419: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75420: LD_VAR 0 1
75424: NOT
75425: PUSH
75426: LD_VAR 0 2
75430: PUSH
75431: LD_INT 1
75433: PUSH
75434: LD_INT 2
75436: PUSH
75437: LD_INT 3
75439: PUSH
75440: LD_INT 4
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: IN
75449: NOT
75450: OR
75451: IFFALSE 75455
// exit ;
75453: GO 75547
// tmp := [ ] ;
75455: LD_ADDR_VAR 0 5
75459: PUSH
75460: EMPTY
75461: ST_TO_ADDR
// for i in units do
75462: LD_ADDR_VAR 0 4
75466: PUSH
75467: LD_VAR 0 1
75471: PUSH
75472: FOR_IN
75473: IFFALSE 75516
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75475: LD_ADDR_VAR 0 5
75479: PUSH
75480: LD_VAR 0 5
75484: PPUSH
75485: LD_VAR 0 5
75489: PUSH
75490: LD_INT 1
75492: PLUS
75493: PPUSH
75494: LD_VAR 0 4
75498: PPUSH
75499: LD_VAR 0 2
75503: PPUSH
75504: CALL_OW 259
75508: PPUSH
75509: CALL_OW 2
75513: ST_TO_ADDR
75514: GO 75472
75516: POP
75517: POP
// if not tmp then
75518: LD_VAR 0 5
75522: NOT
75523: IFFALSE 75527
// exit ;
75525: GO 75547
// result := SortListByListDesc ( units , tmp ) ;
75527: LD_ADDR_VAR 0 3
75531: PUSH
75532: LD_VAR 0 1
75536: PPUSH
75537: LD_VAR 0 5
75541: PPUSH
75542: CALL_OW 77
75546: ST_TO_ADDR
// end ;
75547: LD_VAR 0 3
75551: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75552: LD_INT 0
75554: PPUSH
75555: PPUSH
75556: PPUSH
// result := false ;
75557: LD_ADDR_VAR 0 3
75561: PUSH
75562: LD_INT 0
75564: ST_TO_ADDR
// x := GetX ( building ) ;
75565: LD_ADDR_VAR 0 4
75569: PUSH
75570: LD_VAR 0 2
75574: PPUSH
75575: CALL_OW 250
75579: ST_TO_ADDR
// y := GetY ( building ) ;
75580: LD_ADDR_VAR 0 5
75584: PUSH
75585: LD_VAR 0 2
75589: PPUSH
75590: CALL_OW 251
75594: ST_TO_ADDR
// if not building or not x or not y then
75595: LD_VAR 0 2
75599: NOT
75600: PUSH
75601: LD_VAR 0 4
75605: NOT
75606: OR
75607: PUSH
75608: LD_VAR 0 5
75612: NOT
75613: OR
75614: IFFALSE 75618
// exit ;
75616: GO 75710
// if GetTaskList ( unit ) then
75618: LD_VAR 0 1
75622: PPUSH
75623: CALL_OW 437
75627: IFFALSE 75710
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75629: LD_STRING e
75631: PUSH
75632: LD_VAR 0 1
75636: PPUSH
75637: CALL_OW 437
75641: PUSH
75642: LD_INT 1
75644: ARRAY
75645: PUSH
75646: LD_INT 1
75648: ARRAY
75649: EQUAL
75650: PUSH
75651: LD_VAR 0 4
75655: PUSH
75656: LD_VAR 0 1
75660: PPUSH
75661: CALL_OW 437
75665: PUSH
75666: LD_INT 1
75668: ARRAY
75669: PUSH
75670: LD_INT 2
75672: ARRAY
75673: EQUAL
75674: AND
75675: PUSH
75676: LD_VAR 0 5
75680: PUSH
75681: LD_VAR 0 1
75685: PPUSH
75686: CALL_OW 437
75690: PUSH
75691: LD_INT 1
75693: ARRAY
75694: PUSH
75695: LD_INT 3
75697: ARRAY
75698: EQUAL
75699: AND
75700: IFFALSE 75710
// result := true end ;
75702: LD_ADDR_VAR 0 3
75706: PUSH
75707: LD_INT 1
75709: ST_TO_ADDR
// end ;
75710: LD_VAR 0 3
75714: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75715: LD_INT 0
75717: PPUSH
// result := false ;
75718: LD_ADDR_VAR 0 4
75722: PUSH
75723: LD_INT 0
75725: ST_TO_ADDR
// if GetTaskList ( unit ) then
75726: LD_VAR 0 1
75730: PPUSH
75731: CALL_OW 437
75735: IFFALSE 75818
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75737: LD_STRING M
75739: PUSH
75740: LD_VAR 0 1
75744: PPUSH
75745: CALL_OW 437
75749: PUSH
75750: LD_INT 1
75752: ARRAY
75753: PUSH
75754: LD_INT 1
75756: ARRAY
75757: EQUAL
75758: PUSH
75759: LD_VAR 0 2
75763: PUSH
75764: LD_VAR 0 1
75768: PPUSH
75769: CALL_OW 437
75773: PUSH
75774: LD_INT 1
75776: ARRAY
75777: PUSH
75778: LD_INT 2
75780: ARRAY
75781: EQUAL
75782: AND
75783: PUSH
75784: LD_VAR 0 3
75788: PUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 437
75798: PUSH
75799: LD_INT 1
75801: ARRAY
75802: PUSH
75803: LD_INT 3
75805: ARRAY
75806: EQUAL
75807: AND
75808: IFFALSE 75818
// result := true ;
75810: LD_ADDR_VAR 0 4
75814: PUSH
75815: LD_INT 1
75817: ST_TO_ADDR
// end ; end ;
75818: LD_VAR 0 4
75822: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75823: LD_INT 0
75825: PPUSH
75826: PPUSH
75827: PPUSH
75828: PPUSH
// if not unit or not area then
75829: LD_VAR 0 1
75833: NOT
75834: PUSH
75835: LD_VAR 0 2
75839: NOT
75840: OR
75841: IFFALSE 75845
// exit ;
75843: GO 76009
// tmp := AreaToList ( area , i ) ;
75845: LD_ADDR_VAR 0 6
75849: PUSH
75850: LD_VAR 0 2
75854: PPUSH
75855: LD_VAR 0 5
75859: PPUSH
75860: CALL_OW 517
75864: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75865: LD_ADDR_VAR 0 5
75869: PUSH
75870: DOUBLE
75871: LD_INT 1
75873: DEC
75874: ST_TO_ADDR
75875: LD_VAR 0 6
75879: PUSH
75880: LD_INT 1
75882: ARRAY
75883: PUSH
75884: FOR_TO
75885: IFFALSE 76007
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75887: LD_ADDR_VAR 0 7
75891: PUSH
75892: LD_VAR 0 6
75896: PUSH
75897: LD_INT 1
75899: ARRAY
75900: PUSH
75901: LD_VAR 0 5
75905: ARRAY
75906: PUSH
75907: LD_VAR 0 6
75911: PUSH
75912: LD_INT 2
75914: ARRAY
75915: PUSH
75916: LD_VAR 0 5
75920: ARRAY
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75926: LD_VAR 0 7
75930: PUSH
75931: LD_INT 1
75933: ARRAY
75934: PPUSH
75935: LD_VAR 0 7
75939: PUSH
75940: LD_INT 2
75942: ARRAY
75943: PPUSH
75944: CALL_OW 428
75948: PUSH
75949: LD_INT 0
75951: EQUAL
75952: IFFALSE 76005
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75954: LD_VAR 0 1
75958: PPUSH
75959: LD_VAR 0 7
75963: PUSH
75964: LD_INT 1
75966: ARRAY
75967: PPUSH
75968: LD_VAR 0 7
75972: PUSH
75973: LD_INT 2
75975: ARRAY
75976: PPUSH
75977: LD_VAR 0 3
75981: PPUSH
75982: CALL_OW 48
// result := IsPlaced ( unit ) ;
75986: LD_ADDR_VAR 0 4
75990: PUSH
75991: LD_VAR 0 1
75995: PPUSH
75996: CALL_OW 305
76000: ST_TO_ADDR
// exit ;
76001: POP
76002: POP
76003: GO 76009
// end ; end ;
76005: GO 75884
76007: POP
76008: POP
// end ;
76009: LD_VAR 0 4
76013: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76014: LD_INT 0
76016: PPUSH
76017: PPUSH
76018: PPUSH
// if not side or side > 8 then
76019: LD_VAR 0 1
76023: NOT
76024: PUSH
76025: LD_VAR 0 1
76029: PUSH
76030: LD_INT 8
76032: GREATER
76033: OR
76034: IFFALSE 76038
// exit ;
76036: GO 76225
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76038: LD_ADDR_VAR 0 4
76042: PUSH
76043: LD_INT 22
76045: PUSH
76046: LD_VAR 0 1
76050: PUSH
76051: EMPTY
76052: LIST
76053: LIST
76054: PUSH
76055: LD_INT 21
76057: PUSH
76058: LD_INT 3
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: PPUSH
76069: CALL_OW 69
76073: ST_TO_ADDR
// if not tmp then
76074: LD_VAR 0 4
76078: NOT
76079: IFFALSE 76083
// exit ;
76081: GO 76225
// enable_addtolog := true ;
76083: LD_ADDR_OWVAR 81
76087: PUSH
76088: LD_INT 1
76090: ST_TO_ADDR
// AddToLog ( [ ) ;
76091: LD_STRING [
76093: PPUSH
76094: CALL_OW 561
// for i in tmp do
76098: LD_ADDR_VAR 0 3
76102: PUSH
76103: LD_VAR 0 4
76107: PUSH
76108: FOR_IN
76109: IFFALSE 76216
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76111: LD_STRING [
76113: PUSH
76114: LD_VAR 0 3
76118: PPUSH
76119: CALL_OW 266
76123: STR
76124: PUSH
76125: LD_STRING , 
76127: STR
76128: PUSH
76129: LD_VAR 0 3
76133: PPUSH
76134: CALL_OW 250
76138: STR
76139: PUSH
76140: LD_STRING , 
76142: STR
76143: PUSH
76144: LD_VAR 0 3
76148: PPUSH
76149: CALL_OW 251
76153: STR
76154: PUSH
76155: LD_STRING , 
76157: STR
76158: PUSH
76159: LD_VAR 0 3
76163: PPUSH
76164: CALL_OW 254
76168: STR
76169: PUSH
76170: LD_STRING , 
76172: STR
76173: PUSH
76174: LD_VAR 0 3
76178: PPUSH
76179: LD_INT 1
76181: PPUSH
76182: CALL_OW 268
76186: STR
76187: PUSH
76188: LD_STRING , 
76190: STR
76191: PUSH
76192: LD_VAR 0 3
76196: PPUSH
76197: LD_INT 2
76199: PPUSH
76200: CALL_OW 268
76204: STR
76205: PUSH
76206: LD_STRING ],
76208: STR
76209: PPUSH
76210: CALL_OW 561
// end ;
76214: GO 76108
76216: POP
76217: POP
// AddToLog ( ]; ) ;
76218: LD_STRING ];
76220: PPUSH
76221: CALL_OW 561
// end ;
76225: LD_VAR 0 2
76229: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76230: LD_INT 0
76232: PPUSH
76233: PPUSH
76234: PPUSH
76235: PPUSH
76236: PPUSH
// if not area or not rate or not max then
76237: LD_VAR 0 1
76241: NOT
76242: PUSH
76243: LD_VAR 0 2
76247: NOT
76248: OR
76249: PUSH
76250: LD_VAR 0 4
76254: NOT
76255: OR
76256: IFFALSE 76260
// exit ;
76258: GO 76449
// while 1 do
76260: LD_INT 1
76262: IFFALSE 76449
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76264: LD_ADDR_VAR 0 9
76268: PUSH
76269: LD_VAR 0 1
76273: PPUSH
76274: LD_INT 1
76276: PPUSH
76277: CALL_OW 287
76281: PUSH
76282: LD_INT 10
76284: MUL
76285: ST_TO_ADDR
// r := rate / 10 ;
76286: LD_ADDR_VAR 0 7
76290: PUSH
76291: LD_VAR 0 2
76295: PUSH
76296: LD_INT 10
76298: DIVREAL
76299: ST_TO_ADDR
// time := 1 1$00 ;
76300: LD_ADDR_VAR 0 8
76304: PUSH
76305: LD_INT 2100
76307: ST_TO_ADDR
// if amount < min then
76308: LD_VAR 0 9
76312: PUSH
76313: LD_VAR 0 3
76317: LESS
76318: IFFALSE 76336
// r := r * 2 else
76320: LD_ADDR_VAR 0 7
76324: PUSH
76325: LD_VAR 0 7
76329: PUSH
76330: LD_INT 2
76332: MUL
76333: ST_TO_ADDR
76334: GO 76362
// if amount > max then
76336: LD_VAR 0 9
76340: PUSH
76341: LD_VAR 0 4
76345: GREATER
76346: IFFALSE 76362
// r := r / 2 ;
76348: LD_ADDR_VAR 0 7
76352: PUSH
76353: LD_VAR 0 7
76357: PUSH
76358: LD_INT 2
76360: DIVREAL
76361: ST_TO_ADDR
// time := time / r ;
76362: LD_ADDR_VAR 0 8
76366: PUSH
76367: LD_VAR 0 8
76371: PUSH
76372: LD_VAR 0 7
76376: DIVREAL
76377: ST_TO_ADDR
// if time < 0 then
76378: LD_VAR 0 8
76382: PUSH
76383: LD_INT 0
76385: LESS
76386: IFFALSE 76403
// time := time * - 1 ;
76388: LD_ADDR_VAR 0 8
76392: PUSH
76393: LD_VAR 0 8
76397: PUSH
76398: LD_INT 1
76400: NEG
76401: MUL
76402: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76403: LD_VAR 0 8
76407: PUSH
76408: LD_INT 35
76410: PPUSH
76411: LD_INT 875
76413: PPUSH
76414: CALL_OW 12
76418: PLUS
76419: PPUSH
76420: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76424: LD_INT 1
76426: PPUSH
76427: LD_INT 5
76429: PPUSH
76430: CALL_OW 12
76434: PPUSH
76435: LD_VAR 0 1
76439: PPUSH
76440: LD_INT 1
76442: PPUSH
76443: CALL_OW 55
// end ;
76447: GO 76260
// end ;
76449: LD_VAR 0 5
76453: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76454: LD_INT 0
76456: PPUSH
76457: PPUSH
76458: PPUSH
76459: PPUSH
76460: PPUSH
76461: PPUSH
76462: PPUSH
76463: PPUSH
// if not turrets or not factories then
76464: LD_VAR 0 1
76468: NOT
76469: PUSH
76470: LD_VAR 0 2
76474: NOT
76475: OR
76476: IFFALSE 76480
// exit ;
76478: GO 76787
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76480: LD_ADDR_VAR 0 10
76484: PUSH
76485: LD_INT 5
76487: PUSH
76488: LD_INT 6
76490: PUSH
76491: EMPTY
76492: LIST
76493: LIST
76494: PUSH
76495: LD_INT 2
76497: PUSH
76498: LD_INT 4
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: PUSH
76505: LD_INT 3
76507: PUSH
76508: LD_INT 5
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: PUSH
76520: LD_INT 24
76522: PUSH
76523: LD_INT 25
76525: PUSH
76526: EMPTY
76527: LIST
76528: LIST
76529: PUSH
76530: LD_INT 23
76532: PUSH
76533: LD_INT 27
76535: PUSH
76536: EMPTY
76537: LIST
76538: LIST
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: PUSH
76544: LD_INT 42
76546: PUSH
76547: LD_INT 43
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PUSH
76554: LD_INT 44
76556: PUSH
76557: LD_INT 46
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: PUSH
76564: LD_INT 45
76566: PUSH
76567: LD_INT 47
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PUSH
76574: EMPTY
76575: LIST
76576: LIST
76577: LIST
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: LIST
76583: ST_TO_ADDR
// result := [ ] ;
76584: LD_ADDR_VAR 0 3
76588: PUSH
76589: EMPTY
76590: ST_TO_ADDR
// for i in turrets do
76591: LD_ADDR_VAR 0 4
76595: PUSH
76596: LD_VAR 0 1
76600: PUSH
76601: FOR_IN
76602: IFFALSE 76785
// begin nat := GetNation ( i ) ;
76604: LD_ADDR_VAR 0 7
76608: PUSH
76609: LD_VAR 0 4
76613: PPUSH
76614: CALL_OW 248
76618: ST_TO_ADDR
// weapon := 0 ;
76619: LD_ADDR_VAR 0 8
76623: PUSH
76624: LD_INT 0
76626: ST_TO_ADDR
// if not nat then
76627: LD_VAR 0 7
76631: NOT
76632: IFFALSE 76636
// continue ;
76634: GO 76601
// for j in list [ nat ] do
76636: LD_ADDR_VAR 0 5
76640: PUSH
76641: LD_VAR 0 10
76645: PUSH
76646: LD_VAR 0 7
76650: ARRAY
76651: PUSH
76652: FOR_IN
76653: IFFALSE 76694
// if GetBWeapon ( i ) = j [ 1 ] then
76655: LD_VAR 0 4
76659: PPUSH
76660: CALL_OW 269
76664: PUSH
76665: LD_VAR 0 5
76669: PUSH
76670: LD_INT 1
76672: ARRAY
76673: EQUAL
76674: IFFALSE 76692
// begin weapon := j [ 2 ] ;
76676: LD_ADDR_VAR 0 8
76680: PUSH
76681: LD_VAR 0 5
76685: PUSH
76686: LD_INT 2
76688: ARRAY
76689: ST_TO_ADDR
// break ;
76690: GO 76694
// end ;
76692: GO 76652
76694: POP
76695: POP
// if not weapon then
76696: LD_VAR 0 8
76700: NOT
76701: IFFALSE 76705
// continue ;
76703: GO 76601
// for k in factories do
76705: LD_ADDR_VAR 0 6
76709: PUSH
76710: LD_VAR 0 2
76714: PUSH
76715: FOR_IN
76716: IFFALSE 76781
// begin weapons := AvailableWeaponList ( k ) ;
76718: LD_ADDR_VAR 0 9
76722: PUSH
76723: LD_VAR 0 6
76727: PPUSH
76728: CALL_OW 478
76732: ST_TO_ADDR
// if not weapons then
76733: LD_VAR 0 9
76737: NOT
76738: IFFALSE 76742
// continue ;
76740: GO 76715
// if weapon in weapons then
76742: LD_VAR 0 8
76746: PUSH
76747: LD_VAR 0 9
76751: IN
76752: IFFALSE 76779
// begin result := [ i , weapon ] ;
76754: LD_ADDR_VAR 0 3
76758: PUSH
76759: LD_VAR 0 4
76763: PUSH
76764: LD_VAR 0 8
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: ST_TO_ADDR
// exit ;
76773: POP
76774: POP
76775: POP
76776: POP
76777: GO 76787
// end ; end ;
76779: GO 76715
76781: POP
76782: POP
// end ;
76783: GO 76601
76785: POP
76786: POP
// end ;
76787: LD_VAR 0 3
76791: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76792: LD_INT 0
76794: PPUSH
// if not side or side > 8 then
76795: LD_VAR 0 3
76799: NOT
76800: PUSH
76801: LD_VAR 0 3
76805: PUSH
76806: LD_INT 8
76808: GREATER
76809: OR
76810: IFFALSE 76814
// exit ;
76812: GO 76873
// if not range then
76814: LD_VAR 0 4
76818: NOT
76819: IFFALSE 76830
// range := - 12 ;
76821: LD_ADDR_VAR 0 4
76825: PUSH
76826: LD_INT 12
76828: NEG
76829: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76830: LD_VAR 0 1
76834: PPUSH
76835: LD_VAR 0 2
76839: PPUSH
76840: LD_VAR 0 3
76844: PPUSH
76845: LD_VAR 0 4
76849: PPUSH
76850: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76854: LD_VAR 0 1
76858: PPUSH
76859: LD_VAR 0 2
76863: PPUSH
76864: LD_VAR 0 3
76868: PPUSH
76869: CALL_OW 331
// end ;
76873: LD_VAR 0 5
76877: RET
// export function Video ( mode ) ; begin
76878: LD_INT 0
76880: PPUSH
// ingame_video = mode ;
76881: LD_ADDR_OWVAR 52
76885: PUSH
76886: LD_VAR 0 1
76890: ST_TO_ADDR
// interface_hidden = mode ;
76891: LD_ADDR_OWVAR 54
76895: PUSH
76896: LD_VAR 0 1
76900: ST_TO_ADDR
// end ;
76901: LD_VAR 0 2
76905: RET
// export function Join ( array , element ) ; begin
76906: LD_INT 0
76908: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76909: LD_ADDR_VAR 0 3
76913: PUSH
76914: LD_VAR 0 1
76918: PPUSH
76919: LD_VAR 0 1
76923: PUSH
76924: LD_INT 1
76926: PLUS
76927: PPUSH
76928: LD_VAR 0 2
76932: PPUSH
76933: CALL_OW 1
76937: ST_TO_ADDR
// end ;
76938: LD_VAR 0 3
76942: RET
// export function JoinUnion ( array , element ) ; begin
76943: LD_INT 0
76945: PPUSH
// result := array union element ;
76946: LD_ADDR_VAR 0 3
76950: PUSH
76951: LD_VAR 0 1
76955: PUSH
76956: LD_VAR 0 2
76960: UNION
76961: ST_TO_ADDR
// end ;
76962: LD_VAR 0 3
76966: RET
// export function GetBehemoths ( side ) ; begin
76967: LD_INT 0
76969: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76970: LD_ADDR_VAR 0 2
76974: PUSH
76975: LD_INT 22
76977: PUSH
76978: LD_VAR 0 1
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 31
76989: PUSH
76990: LD_INT 25
76992: PUSH
76993: EMPTY
76994: LIST
76995: LIST
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: PPUSH
77001: CALL_OW 69
77005: ST_TO_ADDR
// end ;
77006: LD_VAR 0 2
77010: RET
// export function Shuffle ( array ) ; var i , index ; begin
77011: LD_INT 0
77013: PPUSH
77014: PPUSH
77015: PPUSH
// result := [ ] ;
77016: LD_ADDR_VAR 0 2
77020: PUSH
77021: EMPTY
77022: ST_TO_ADDR
// if not array then
77023: LD_VAR 0 1
77027: NOT
77028: IFFALSE 77032
// exit ;
77030: GO 77131
// Randomize ;
77032: CALL_OW 10
// for i = array downto 1 do
77036: LD_ADDR_VAR 0 3
77040: PUSH
77041: DOUBLE
77042: LD_VAR 0 1
77046: INC
77047: ST_TO_ADDR
77048: LD_INT 1
77050: PUSH
77051: FOR_DOWNTO
77052: IFFALSE 77129
// begin index := rand ( 1 , array ) ;
77054: LD_ADDR_VAR 0 4
77058: PUSH
77059: LD_INT 1
77061: PPUSH
77062: LD_VAR 0 1
77066: PPUSH
77067: CALL_OW 12
77071: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77072: LD_ADDR_VAR 0 2
77076: PUSH
77077: LD_VAR 0 2
77081: PPUSH
77082: LD_VAR 0 2
77086: PUSH
77087: LD_INT 1
77089: PLUS
77090: PPUSH
77091: LD_VAR 0 1
77095: PUSH
77096: LD_VAR 0 4
77100: ARRAY
77101: PPUSH
77102: CALL_OW 2
77106: ST_TO_ADDR
// array := Delete ( array , index ) ;
77107: LD_ADDR_VAR 0 1
77111: PUSH
77112: LD_VAR 0 1
77116: PPUSH
77117: LD_VAR 0 4
77121: PPUSH
77122: CALL_OW 3
77126: ST_TO_ADDR
// end ;
77127: GO 77051
77129: POP
77130: POP
// end ;
77131: LD_VAR 0 2
77135: RET
// export function GetBaseMaterials ( base ) ; begin
77136: LD_INT 0
77138: PPUSH
// result := [ 0 , 0 , 0 ] ;
77139: LD_ADDR_VAR 0 2
77143: PUSH
77144: LD_INT 0
77146: PUSH
77147: LD_INT 0
77149: PUSH
77150: LD_INT 0
77152: PUSH
77153: EMPTY
77154: LIST
77155: LIST
77156: LIST
77157: ST_TO_ADDR
// if not base then
77158: LD_VAR 0 1
77162: NOT
77163: IFFALSE 77167
// exit ;
77165: GO 77216
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77167: LD_ADDR_VAR 0 2
77171: PUSH
77172: LD_VAR 0 1
77176: PPUSH
77177: LD_INT 1
77179: PPUSH
77180: CALL_OW 275
77184: PUSH
77185: LD_VAR 0 1
77189: PPUSH
77190: LD_INT 2
77192: PPUSH
77193: CALL_OW 275
77197: PUSH
77198: LD_VAR 0 1
77202: PPUSH
77203: LD_INT 3
77205: PPUSH
77206: CALL_OW 275
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: LIST
77215: ST_TO_ADDR
// end ;
77216: LD_VAR 0 2
77220: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77221: LD_INT 0
77223: PPUSH
77224: PPUSH
// result := array ;
77225: LD_ADDR_VAR 0 3
77229: PUSH
77230: LD_VAR 0 1
77234: ST_TO_ADDR
// if size >= result then
77235: LD_VAR 0 2
77239: PUSH
77240: LD_VAR 0 3
77244: GREATEREQUAL
77245: IFFALSE 77249
// exit ;
77247: GO 77299
// if size then
77249: LD_VAR 0 2
77253: IFFALSE 77299
// for i := array downto size do
77255: LD_ADDR_VAR 0 4
77259: PUSH
77260: DOUBLE
77261: LD_VAR 0 1
77265: INC
77266: ST_TO_ADDR
77267: LD_VAR 0 2
77271: PUSH
77272: FOR_DOWNTO
77273: IFFALSE 77297
// result := Delete ( result , result ) ;
77275: LD_ADDR_VAR 0 3
77279: PUSH
77280: LD_VAR 0 3
77284: PPUSH
77285: LD_VAR 0 3
77289: PPUSH
77290: CALL_OW 3
77294: ST_TO_ADDR
77295: GO 77272
77297: POP
77298: POP
// end ;
77299: LD_VAR 0 3
77303: RET
// export function ComExit ( unit ) ; var tmp ; begin
77304: LD_INT 0
77306: PPUSH
77307: PPUSH
// if not IsInUnit ( unit ) then
77308: LD_VAR 0 1
77312: PPUSH
77313: CALL_OW 310
77317: NOT
77318: IFFALSE 77322
// exit ;
77320: GO 77382
// tmp := IsInUnit ( unit ) ;
77322: LD_ADDR_VAR 0 3
77326: PUSH
77327: LD_VAR 0 1
77331: PPUSH
77332: CALL_OW 310
77336: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77337: LD_VAR 0 3
77341: PPUSH
77342: CALL_OW 247
77346: PUSH
77347: LD_INT 2
77349: EQUAL
77350: IFFALSE 77363
// ComExitVehicle ( unit ) else
77352: LD_VAR 0 1
77356: PPUSH
77357: CALL_OW 121
77361: GO 77372
// ComExitBuilding ( unit ) ;
77363: LD_VAR 0 1
77367: PPUSH
77368: CALL_OW 122
// result := tmp ;
77372: LD_ADDR_VAR 0 2
77376: PUSH
77377: LD_VAR 0 3
77381: ST_TO_ADDR
// end ;
77382: LD_VAR 0 2
77386: RET
// export function ComExitAll ( units ) ; var i ; begin
77387: LD_INT 0
77389: PPUSH
77390: PPUSH
// if not units then
77391: LD_VAR 0 1
77395: NOT
77396: IFFALSE 77400
// exit ;
77398: GO 77426
// for i in units do
77400: LD_ADDR_VAR 0 3
77404: PUSH
77405: LD_VAR 0 1
77409: PUSH
77410: FOR_IN
77411: IFFALSE 77424
// ComExit ( i ) ;
77413: LD_VAR 0 3
77417: PPUSH
77418: CALL 77304 0 1
77422: GO 77410
77424: POP
77425: POP
// end ;
77426: LD_VAR 0 2
77430: RET
// export function ResetHc ; begin
77431: LD_INT 0
77433: PPUSH
// InitHc ;
77434: CALL_OW 19
// hc_importance := 0 ;
77438: LD_ADDR_OWVAR 32
77442: PUSH
77443: LD_INT 0
77445: ST_TO_ADDR
// end ;
77446: LD_VAR 0 1
77450: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77451: LD_INT 0
77453: PPUSH
77454: PPUSH
77455: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77456: LD_ADDR_VAR 0 6
77460: PUSH
77461: LD_VAR 0 1
77465: PUSH
77466: LD_VAR 0 3
77470: PLUS
77471: PUSH
77472: LD_INT 2
77474: DIV
77475: ST_TO_ADDR
// if _x < 0 then
77476: LD_VAR 0 6
77480: PUSH
77481: LD_INT 0
77483: LESS
77484: IFFALSE 77501
// _x := _x * - 1 ;
77486: LD_ADDR_VAR 0 6
77490: PUSH
77491: LD_VAR 0 6
77495: PUSH
77496: LD_INT 1
77498: NEG
77499: MUL
77500: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77501: LD_ADDR_VAR 0 7
77505: PUSH
77506: LD_VAR 0 2
77510: PUSH
77511: LD_VAR 0 4
77515: PLUS
77516: PUSH
77517: LD_INT 2
77519: DIV
77520: ST_TO_ADDR
// if _y < 0 then
77521: LD_VAR 0 7
77525: PUSH
77526: LD_INT 0
77528: LESS
77529: IFFALSE 77546
// _y := _y * - 1 ;
77531: LD_ADDR_VAR 0 7
77535: PUSH
77536: LD_VAR 0 7
77540: PUSH
77541: LD_INT 1
77543: NEG
77544: MUL
77545: ST_TO_ADDR
// result := [ _x , _y ] ;
77546: LD_ADDR_VAR 0 5
77550: PUSH
77551: LD_VAR 0 6
77555: PUSH
77556: LD_VAR 0 7
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: ST_TO_ADDR
// end ;
77565: LD_VAR 0 5
77569: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77570: LD_INT 0
77572: PPUSH
77573: PPUSH
77574: PPUSH
77575: PPUSH
// task := GetTaskList ( unit ) ;
77576: LD_ADDR_VAR 0 7
77580: PUSH
77581: LD_VAR 0 1
77585: PPUSH
77586: CALL_OW 437
77590: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77591: LD_VAR 0 7
77595: NOT
77596: PUSH
77597: LD_VAR 0 1
77601: PPUSH
77602: LD_VAR 0 2
77606: PPUSH
77607: CALL_OW 308
77611: NOT
77612: AND
77613: IFFALSE 77617
// exit ;
77615: GO 77735
// if IsInArea ( unit , area ) then
77617: LD_VAR 0 1
77621: PPUSH
77622: LD_VAR 0 2
77626: PPUSH
77627: CALL_OW 308
77631: IFFALSE 77649
// begin ComMoveToArea ( unit , goAway ) ;
77633: LD_VAR 0 1
77637: PPUSH
77638: LD_VAR 0 3
77642: PPUSH
77643: CALL_OW 113
// exit ;
77647: GO 77735
// end ; if task [ 1 ] [ 1 ] <> M then
77649: LD_VAR 0 7
77653: PUSH
77654: LD_INT 1
77656: ARRAY
77657: PUSH
77658: LD_INT 1
77660: ARRAY
77661: PUSH
77662: LD_STRING M
77664: NONEQUAL
77665: IFFALSE 77669
// exit ;
77667: GO 77735
// x := task [ 1 ] [ 2 ] ;
77669: LD_ADDR_VAR 0 5
77673: PUSH
77674: LD_VAR 0 7
77678: PUSH
77679: LD_INT 1
77681: ARRAY
77682: PUSH
77683: LD_INT 2
77685: ARRAY
77686: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77687: LD_ADDR_VAR 0 6
77691: PUSH
77692: LD_VAR 0 7
77696: PUSH
77697: LD_INT 1
77699: ARRAY
77700: PUSH
77701: LD_INT 3
77703: ARRAY
77704: ST_TO_ADDR
// if InArea ( x , y , area ) then
77705: LD_VAR 0 5
77709: PPUSH
77710: LD_VAR 0 6
77714: PPUSH
77715: LD_VAR 0 2
77719: PPUSH
77720: CALL_OW 309
77724: IFFALSE 77735
// ComStop ( unit ) ;
77726: LD_VAR 0 1
77730: PPUSH
77731: CALL_OW 141
// end ;
77735: LD_VAR 0 4
77739: RET
// export function Abs ( value ) ; begin
77740: LD_INT 0
77742: PPUSH
// result := value ;
77743: LD_ADDR_VAR 0 2
77747: PUSH
77748: LD_VAR 0 1
77752: ST_TO_ADDR
// if value < 0 then
77753: LD_VAR 0 1
77757: PUSH
77758: LD_INT 0
77760: LESS
77761: IFFALSE 77778
// result := value * - 1 ;
77763: LD_ADDR_VAR 0 2
77767: PUSH
77768: LD_VAR 0 1
77772: PUSH
77773: LD_INT 1
77775: NEG
77776: MUL
77777: ST_TO_ADDR
// end ;
77778: LD_VAR 0 2
77782: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77783: LD_INT 0
77785: PPUSH
77786: PPUSH
77787: PPUSH
77788: PPUSH
77789: PPUSH
77790: PPUSH
77791: PPUSH
77792: PPUSH
// if not unit or not building then
77793: LD_VAR 0 1
77797: NOT
77798: PUSH
77799: LD_VAR 0 2
77803: NOT
77804: OR
77805: IFFALSE 77809
// exit ;
77807: GO 78035
// x := GetX ( building ) ;
77809: LD_ADDR_VAR 0 4
77813: PUSH
77814: LD_VAR 0 2
77818: PPUSH
77819: CALL_OW 250
77823: ST_TO_ADDR
// y := GetY ( building ) ;
77824: LD_ADDR_VAR 0 6
77828: PUSH
77829: LD_VAR 0 2
77833: PPUSH
77834: CALL_OW 251
77838: ST_TO_ADDR
// d := GetDir ( building ) ;
77839: LD_ADDR_VAR 0 8
77843: PUSH
77844: LD_VAR 0 2
77848: PPUSH
77849: CALL_OW 254
77853: ST_TO_ADDR
// r := 4 ;
77854: LD_ADDR_VAR 0 9
77858: PUSH
77859: LD_INT 4
77861: ST_TO_ADDR
// for i := 1 to 5 do
77862: LD_ADDR_VAR 0 10
77866: PUSH
77867: DOUBLE
77868: LD_INT 1
77870: DEC
77871: ST_TO_ADDR
77872: LD_INT 5
77874: PUSH
77875: FOR_TO
77876: IFFALSE 78033
// begin _x := ShiftX ( x , d , r + i ) ;
77878: LD_ADDR_VAR 0 5
77882: PUSH
77883: LD_VAR 0 4
77887: PPUSH
77888: LD_VAR 0 8
77892: PPUSH
77893: LD_VAR 0 9
77897: PUSH
77898: LD_VAR 0 10
77902: PLUS
77903: PPUSH
77904: CALL_OW 272
77908: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77909: LD_ADDR_VAR 0 7
77913: PUSH
77914: LD_VAR 0 6
77918: PPUSH
77919: LD_VAR 0 8
77923: PPUSH
77924: LD_VAR 0 9
77928: PUSH
77929: LD_VAR 0 10
77933: PLUS
77934: PPUSH
77935: CALL_OW 273
77939: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77940: LD_VAR 0 5
77944: PPUSH
77945: LD_VAR 0 7
77949: PPUSH
77950: CALL_OW 488
77954: PUSH
77955: LD_VAR 0 5
77959: PPUSH
77960: LD_VAR 0 7
77964: PPUSH
77965: CALL_OW 428
77969: PPUSH
77970: CALL_OW 247
77974: PUSH
77975: LD_INT 3
77977: PUSH
77978: LD_INT 2
77980: PUSH
77981: EMPTY
77982: LIST
77983: LIST
77984: IN
77985: NOT
77986: AND
77987: IFFALSE 78031
// begin ComMoveXY ( unit , _x , _y ) ;
77989: LD_VAR 0 1
77993: PPUSH
77994: LD_VAR 0 5
77998: PPUSH
77999: LD_VAR 0 7
78003: PPUSH
78004: CALL_OW 111
// result := [ _x , _y ] ;
78008: LD_ADDR_VAR 0 3
78012: PUSH
78013: LD_VAR 0 5
78017: PUSH
78018: LD_VAR 0 7
78022: PUSH
78023: EMPTY
78024: LIST
78025: LIST
78026: ST_TO_ADDR
// exit ;
78027: POP
78028: POP
78029: GO 78035
// end ; end ;
78031: GO 77875
78033: POP
78034: POP
// end ;
78035: LD_VAR 0 3
78039: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78040: LD_INT 0
78042: PPUSH
78043: PPUSH
78044: PPUSH
// result := 0 ;
78045: LD_ADDR_VAR 0 3
78049: PUSH
78050: LD_INT 0
78052: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78053: LD_VAR 0 1
78057: PUSH
78058: LD_INT 0
78060: LESS
78061: PUSH
78062: LD_VAR 0 1
78066: PUSH
78067: LD_INT 8
78069: GREATER
78070: OR
78071: PUSH
78072: LD_VAR 0 2
78076: PUSH
78077: LD_INT 0
78079: LESS
78080: OR
78081: PUSH
78082: LD_VAR 0 2
78086: PUSH
78087: LD_INT 8
78089: GREATER
78090: OR
78091: IFFALSE 78095
// exit ;
78093: GO 78170
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78095: LD_ADDR_VAR 0 4
78099: PUSH
78100: LD_INT 22
78102: PUSH
78103: LD_VAR 0 2
78107: PUSH
78108: EMPTY
78109: LIST
78110: LIST
78111: PPUSH
78112: CALL_OW 69
78116: PUSH
78117: FOR_IN
78118: IFFALSE 78168
// begin un := UnitShoot ( i ) ;
78120: LD_ADDR_VAR 0 5
78124: PUSH
78125: LD_VAR 0 4
78129: PPUSH
78130: CALL_OW 504
78134: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78135: LD_VAR 0 5
78139: PPUSH
78140: CALL_OW 255
78144: PUSH
78145: LD_VAR 0 1
78149: EQUAL
78150: IFFALSE 78166
// begin result := un ;
78152: LD_ADDR_VAR 0 3
78156: PUSH
78157: LD_VAR 0 5
78161: ST_TO_ADDR
// exit ;
78162: POP
78163: POP
78164: GO 78170
// end ; end ;
78166: GO 78117
78168: POP
78169: POP
// end ;
78170: LD_VAR 0 3
78174: RET
// export function GetCargoBay ( units ) ; begin
78175: LD_INT 0
78177: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78178: LD_ADDR_VAR 0 2
78182: PUSH
78183: LD_VAR 0 1
78187: PPUSH
78188: LD_INT 2
78190: PUSH
78191: LD_INT 34
78193: PUSH
78194: LD_INT 12
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PUSH
78201: LD_INT 34
78203: PUSH
78204: LD_INT 51
78206: PUSH
78207: EMPTY
78208: LIST
78209: LIST
78210: PUSH
78211: LD_INT 34
78213: PUSH
78214: LD_INT 32
78216: PUSH
78217: EMPTY
78218: LIST
78219: LIST
78220: PUSH
78221: LD_INT 34
78223: PUSH
78224: LD_INT 89
78226: PUSH
78227: EMPTY
78228: LIST
78229: LIST
78230: PUSH
78231: EMPTY
78232: LIST
78233: LIST
78234: LIST
78235: LIST
78236: LIST
78237: PPUSH
78238: CALL_OW 72
78242: ST_TO_ADDR
// end ;
78243: LD_VAR 0 2
78247: RET
// export function Negate ( value ) ; begin
78248: LD_INT 0
78250: PPUSH
// result := not value ;
78251: LD_ADDR_VAR 0 2
78255: PUSH
78256: LD_VAR 0 1
78260: NOT
78261: ST_TO_ADDR
// end ;
78262: LD_VAR 0 2
78266: RET
// export function Inc ( value ) ; begin
78267: LD_INT 0
78269: PPUSH
// result := value + 1 ;
78270: LD_ADDR_VAR 0 2
78274: PUSH
78275: LD_VAR 0 1
78279: PUSH
78280: LD_INT 1
78282: PLUS
78283: ST_TO_ADDR
// end ;
78284: LD_VAR 0 2
78288: RET
// export function Dec ( value ) ; begin
78289: LD_INT 0
78291: PPUSH
// result := value - 1 ;
78292: LD_ADDR_VAR 0 2
78296: PUSH
78297: LD_VAR 0 1
78301: PUSH
78302: LD_INT 1
78304: MINUS
78305: ST_TO_ADDR
// end ;
78306: LD_VAR 0 2
78310: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78311: LD_INT 0
78313: PPUSH
78314: PPUSH
78315: PPUSH
78316: PPUSH
78317: PPUSH
78318: PPUSH
78319: PPUSH
78320: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78321: LD_VAR 0 1
78325: PPUSH
78326: LD_VAR 0 2
78330: PPUSH
78331: CALL_OW 488
78335: NOT
78336: PUSH
78337: LD_VAR 0 3
78341: PPUSH
78342: LD_VAR 0 4
78346: PPUSH
78347: CALL_OW 488
78351: NOT
78352: OR
78353: IFFALSE 78366
// begin result := - 1 ;
78355: LD_ADDR_VAR 0 5
78359: PUSH
78360: LD_INT 1
78362: NEG
78363: ST_TO_ADDR
// exit ;
78364: GO 78601
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78366: LD_ADDR_VAR 0 12
78370: PUSH
78371: LD_VAR 0 1
78375: PPUSH
78376: LD_VAR 0 2
78380: PPUSH
78381: LD_VAR 0 3
78385: PPUSH
78386: LD_VAR 0 4
78390: PPUSH
78391: CALL 77451 0 4
78395: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78396: LD_ADDR_VAR 0 11
78400: PUSH
78401: LD_VAR 0 1
78405: PPUSH
78406: LD_VAR 0 2
78410: PPUSH
78411: LD_VAR 0 12
78415: PUSH
78416: LD_INT 1
78418: ARRAY
78419: PPUSH
78420: LD_VAR 0 12
78424: PUSH
78425: LD_INT 2
78427: ARRAY
78428: PPUSH
78429: CALL_OW 298
78433: ST_TO_ADDR
// distance := 9999 ;
78434: LD_ADDR_VAR 0 10
78438: PUSH
78439: LD_INT 9999
78441: ST_TO_ADDR
// for i := 0 to 5 do
78442: LD_ADDR_VAR 0 6
78446: PUSH
78447: DOUBLE
78448: LD_INT 0
78450: DEC
78451: ST_TO_ADDR
78452: LD_INT 5
78454: PUSH
78455: FOR_TO
78456: IFFALSE 78599
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78458: LD_ADDR_VAR 0 7
78462: PUSH
78463: LD_VAR 0 1
78467: PPUSH
78468: LD_VAR 0 6
78472: PPUSH
78473: LD_VAR 0 11
78477: PPUSH
78478: CALL_OW 272
78482: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78483: LD_ADDR_VAR 0 8
78487: PUSH
78488: LD_VAR 0 2
78492: PPUSH
78493: LD_VAR 0 6
78497: PPUSH
78498: LD_VAR 0 11
78502: PPUSH
78503: CALL_OW 273
78507: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78508: LD_VAR 0 7
78512: PPUSH
78513: LD_VAR 0 8
78517: PPUSH
78518: CALL_OW 488
78522: NOT
78523: IFFALSE 78527
// continue ;
78525: GO 78455
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78527: LD_ADDR_VAR 0 9
78531: PUSH
78532: LD_VAR 0 12
78536: PUSH
78537: LD_INT 1
78539: ARRAY
78540: PPUSH
78541: LD_VAR 0 12
78545: PUSH
78546: LD_INT 2
78548: ARRAY
78549: PPUSH
78550: LD_VAR 0 7
78554: PPUSH
78555: LD_VAR 0 8
78559: PPUSH
78560: CALL_OW 298
78564: ST_TO_ADDR
// if tmp < distance then
78565: LD_VAR 0 9
78569: PUSH
78570: LD_VAR 0 10
78574: LESS
78575: IFFALSE 78597
// begin result := i ;
78577: LD_ADDR_VAR 0 5
78581: PUSH
78582: LD_VAR 0 6
78586: ST_TO_ADDR
// distance := tmp ;
78587: LD_ADDR_VAR 0 10
78591: PUSH
78592: LD_VAR 0 9
78596: ST_TO_ADDR
// end ; end ;
78597: GO 78455
78599: POP
78600: POP
// end ;
78601: LD_VAR 0 5
78605: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78606: LD_INT 0
78608: PPUSH
78609: PPUSH
// if not driver or not IsInUnit ( driver ) then
78610: LD_VAR 0 1
78614: NOT
78615: PUSH
78616: LD_VAR 0 1
78620: PPUSH
78621: CALL_OW 310
78625: NOT
78626: OR
78627: IFFALSE 78631
// exit ;
78629: GO 78721
// vehicle := IsInUnit ( driver ) ;
78631: LD_ADDR_VAR 0 3
78635: PUSH
78636: LD_VAR 0 1
78640: PPUSH
78641: CALL_OW 310
78645: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78646: LD_VAR 0 1
78650: PPUSH
78651: LD_STRING \
78653: PUSH
78654: LD_INT 0
78656: PUSH
78657: LD_INT 0
78659: PUSH
78660: LD_INT 0
78662: PUSH
78663: LD_INT 0
78665: PUSH
78666: LD_INT 0
78668: PUSH
78669: LD_INT 0
78671: PUSH
78672: EMPTY
78673: LIST
78674: LIST
78675: LIST
78676: LIST
78677: LIST
78678: LIST
78679: LIST
78680: PUSH
78681: LD_STRING E
78683: PUSH
78684: LD_INT 0
78686: PUSH
78687: LD_INT 0
78689: PUSH
78690: LD_VAR 0 3
78694: PUSH
78695: LD_INT 0
78697: PUSH
78698: LD_INT 0
78700: PUSH
78701: LD_INT 0
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: LIST
78712: PUSH
78713: EMPTY
78714: LIST
78715: LIST
78716: PPUSH
78717: CALL_OW 446
// end ;
78721: LD_VAR 0 2
78725: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78726: LD_INT 0
78728: PPUSH
78729: PPUSH
// if not driver or not IsInUnit ( driver ) then
78730: LD_VAR 0 1
78734: NOT
78735: PUSH
78736: LD_VAR 0 1
78740: PPUSH
78741: CALL_OW 310
78745: NOT
78746: OR
78747: IFFALSE 78751
// exit ;
78749: GO 78841
// vehicle := IsInUnit ( driver ) ;
78751: LD_ADDR_VAR 0 3
78755: PUSH
78756: LD_VAR 0 1
78760: PPUSH
78761: CALL_OW 310
78765: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78766: LD_VAR 0 1
78770: PPUSH
78771: LD_STRING \
78773: PUSH
78774: LD_INT 0
78776: PUSH
78777: LD_INT 0
78779: PUSH
78780: LD_INT 0
78782: PUSH
78783: LD_INT 0
78785: PUSH
78786: LD_INT 0
78788: PUSH
78789: LD_INT 0
78791: PUSH
78792: EMPTY
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: LIST
78800: PUSH
78801: LD_STRING E
78803: PUSH
78804: LD_INT 0
78806: PUSH
78807: LD_INT 0
78809: PUSH
78810: LD_VAR 0 3
78814: PUSH
78815: LD_INT 0
78817: PUSH
78818: LD_INT 0
78820: PUSH
78821: LD_INT 0
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: LIST
78828: LIST
78829: LIST
78830: LIST
78831: LIST
78832: PUSH
78833: EMPTY
78834: LIST
78835: LIST
78836: PPUSH
78837: CALL_OW 447
// end ;
78841: LD_VAR 0 2
78845: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78846: LD_INT 0
78848: PPUSH
78849: PPUSH
78850: PPUSH
// tmp := [ ] ;
78851: LD_ADDR_VAR 0 5
78855: PUSH
78856: EMPTY
78857: ST_TO_ADDR
// for i in units do
78858: LD_ADDR_VAR 0 4
78862: PUSH
78863: LD_VAR 0 1
78867: PUSH
78868: FOR_IN
78869: IFFALSE 78907
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78871: LD_ADDR_VAR 0 5
78875: PUSH
78876: LD_VAR 0 5
78880: PPUSH
78881: LD_VAR 0 5
78885: PUSH
78886: LD_INT 1
78888: PLUS
78889: PPUSH
78890: LD_VAR 0 4
78894: PPUSH
78895: CALL_OW 256
78899: PPUSH
78900: CALL_OW 2
78904: ST_TO_ADDR
78905: GO 78868
78907: POP
78908: POP
// if not tmp then
78909: LD_VAR 0 5
78913: NOT
78914: IFFALSE 78918
// exit ;
78916: GO 78966
// if asc then
78918: LD_VAR 0 2
78922: IFFALSE 78946
// result := SortListByListAsc ( units , tmp ) else
78924: LD_ADDR_VAR 0 3
78928: PUSH
78929: LD_VAR 0 1
78933: PPUSH
78934: LD_VAR 0 5
78938: PPUSH
78939: CALL_OW 76
78943: ST_TO_ADDR
78944: GO 78966
// result := SortListByListDesc ( units , tmp ) ;
78946: LD_ADDR_VAR 0 3
78950: PUSH
78951: LD_VAR 0 1
78955: PPUSH
78956: LD_VAR 0 5
78960: PPUSH
78961: CALL_OW 77
78965: ST_TO_ADDR
// end ;
78966: LD_VAR 0 3
78970: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78971: LD_INT 0
78973: PPUSH
78974: PPUSH
// task := GetTaskList ( mech ) ;
78975: LD_ADDR_VAR 0 4
78979: PUSH
78980: LD_VAR 0 1
78984: PPUSH
78985: CALL_OW 437
78989: ST_TO_ADDR
// if not task then
78990: LD_VAR 0 4
78994: NOT
78995: IFFALSE 78999
// exit ;
78997: GO 79041
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78999: LD_ADDR_VAR 0 3
79003: PUSH
79004: LD_VAR 0 4
79008: PUSH
79009: LD_INT 1
79011: ARRAY
79012: PUSH
79013: LD_INT 1
79015: ARRAY
79016: PUSH
79017: LD_STRING r
79019: EQUAL
79020: PUSH
79021: LD_VAR 0 4
79025: PUSH
79026: LD_INT 1
79028: ARRAY
79029: PUSH
79030: LD_INT 4
79032: ARRAY
79033: PUSH
79034: LD_VAR 0 2
79038: EQUAL
79039: AND
79040: ST_TO_ADDR
// end ;
79041: LD_VAR 0 3
79045: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79046: LD_INT 0
79048: PPUSH
// SetDir ( unit , d ) ;
79049: LD_VAR 0 1
79053: PPUSH
79054: LD_VAR 0 4
79058: PPUSH
79059: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79063: LD_VAR 0 1
79067: PPUSH
79068: LD_VAR 0 2
79072: PPUSH
79073: LD_VAR 0 3
79077: PPUSH
79078: LD_VAR 0 5
79082: PPUSH
79083: CALL_OW 48
// end ;
79087: LD_VAR 0 6
79091: RET
// export function ToNaturalNumber ( number ) ; begin
79092: LD_INT 0
79094: PPUSH
// result := number div 1 ;
79095: LD_ADDR_VAR 0 2
79099: PUSH
79100: LD_VAR 0 1
79104: PUSH
79105: LD_INT 1
79107: DIV
79108: ST_TO_ADDR
// if number < 0 then
79109: LD_VAR 0 1
79113: PUSH
79114: LD_INT 0
79116: LESS
79117: IFFALSE 79127
// result := 0 ;
79119: LD_ADDR_VAR 0 2
79123: PUSH
79124: LD_INT 0
79126: ST_TO_ADDR
// end ;
79127: LD_VAR 0 2
79131: RET
// export function SortByClass ( units , class ) ; var un ; begin
79132: LD_INT 0
79134: PPUSH
79135: PPUSH
// if not units or not class then
79136: LD_VAR 0 1
79140: NOT
79141: PUSH
79142: LD_VAR 0 2
79146: NOT
79147: OR
79148: IFFALSE 79152
// exit ;
79150: GO 79247
// result := [ ] ;
79152: LD_ADDR_VAR 0 3
79156: PUSH
79157: EMPTY
79158: ST_TO_ADDR
// for un in units do
79159: LD_ADDR_VAR 0 4
79163: PUSH
79164: LD_VAR 0 1
79168: PUSH
79169: FOR_IN
79170: IFFALSE 79245
// if GetClass ( un ) = class then
79172: LD_VAR 0 4
79176: PPUSH
79177: CALL_OW 257
79181: PUSH
79182: LD_VAR 0 2
79186: EQUAL
79187: IFFALSE 79214
// result := Insert ( result , 1 , un ) else
79189: LD_ADDR_VAR 0 3
79193: PUSH
79194: LD_VAR 0 3
79198: PPUSH
79199: LD_INT 1
79201: PPUSH
79202: LD_VAR 0 4
79206: PPUSH
79207: CALL_OW 2
79211: ST_TO_ADDR
79212: GO 79243
// result := Replace ( result , result + 1 , un ) ;
79214: LD_ADDR_VAR 0 3
79218: PUSH
79219: LD_VAR 0 3
79223: PPUSH
79224: LD_VAR 0 3
79228: PUSH
79229: LD_INT 1
79231: PLUS
79232: PPUSH
79233: LD_VAR 0 4
79237: PPUSH
79238: CALL_OW 1
79242: ST_TO_ADDR
79243: GO 79169
79245: POP
79246: POP
// end ;
79247: LD_VAR 0 3
79251: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79252: LD_INT 0
79254: PPUSH
79255: PPUSH
79256: PPUSH
79257: PPUSH
79258: PPUSH
79259: PPUSH
79260: PPUSH
// result := [ ] ;
79261: LD_ADDR_VAR 0 4
79265: PUSH
79266: EMPTY
79267: ST_TO_ADDR
// if x - r < 0 then
79268: LD_VAR 0 1
79272: PUSH
79273: LD_VAR 0 3
79277: MINUS
79278: PUSH
79279: LD_INT 0
79281: LESS
79282: IFFALSE 79294
// min_x := 0 else
79284: LD_ADDR_VAR 0 8
79288: PUSH
79289: LD_INT 0
79291: ST_TO_ADDR
79292: GO 79310
// min_x := x - r ;
79294: LD_ADDR_VAR 0 8
79298: PUSH
79299: LD_VAR 0 1
79303: PUSH
79304: LD_VAR 0 3
79308: MINUS
79309: ST_TO_ADDR
// if y - r < 0 then
79310: LD_VAR 0 2
79314: PUSH
79315: LD_VAR 0 3
79319: MINUS
79320: PUSH
79321: LD_INT 0
79323: LESS
79324: IFFALSE 79336
// min_y := 0 else
79326: LD_ADDR_VAR 0 7
79330: PUSH
79331: LD_INT 0
79333: ST_TO_ADDR
79334: GO 79352
// min_y := y - r ;
79336: LD_ADDR_VAR 0 7
79340: PUSH
79341: LD_VAR 0 2
79345: PUSH
79346: LD_VAR 0 3
79350: MINUS
79351: ST_TO_ADDR
// max_x := x + r ;
79352: LD_ADDR_VAR 0 9
79356: PUSH
79357: LD_VAR 0 1
79361: PUSH
79362: LD_VAR 0 3
79366: PLUS
79367: ST_TO_ADDR
// max_y := y + r ;
79368: LD_ADDR_VAR 0 10
79372: PUSH
79373: LD_VAR 0 2
79377: PUSH
79378: LD_VAR 0 3
79382: PLUS
79383: ST_TO_ADDR
// for _x = min_x to max_x do
79384: LD_ADDR_VAR 0 5
79388: PUSH
79389: DOUBLE
79390: LD_VAR 0 8
79394: DEC
79395: ST_TO_ADDR
79396: LD_VAR 0 9
79400: PUSH
79401: FOR_TO
79402: IFFALSE 79503
// for _y = min_y to max_y do
79404: LD_ADDR_VAR 0 6
79408: PUSH
79409: DOUBLE
79410: LD_VAR 0 7
79414: DEC
79415: ST_TO_ADDR
79416: LD_VAR 0 10
79420: PUSH
79421: FOR_TO
79422: IFFALSE 79499
// begin if not ValidHex ( _x , _y ) then
79424: LD_VAR 0 5
79428: PPUSH
79429: LD_VAR 0 6
79433: PPUSH
79434: CALL_OW 488
79438: NOT
79439: IFFALSE 79443
// continue ;
79441: GO 79421
// if GetResourceTypeXY ( _x , _y ) then
79443: LD_VAR 0 5
79447: PPUSH
79448: LD_VAR 0 6
79452: PPUSH
79453: CALL_OW 283
79457: IFFALSE 79497
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79459: LD_ADDR_VAR 0 4
79463: PUSH
79464: LD_VAR 0 4
79468: PPUSH
79469: LD_VAR 0 4
79473: PUSH
79474: LD_INT 1
79476: PLUS
79477: PPUSH
79478: LD_VAR 0 5
79482: PUSH
79483: LD_VAR 0 6
79487: PUSH
79488: EMPTY
79489: LIST
79490: LIST
79491: PPUSH
79492: CALL_OW 1
79496: ST_TO_ADDR
// end ;
79497: GO 79421
79499: POP
79500: POP
79501: GO 79401
79503: POP
79504: POP
// end ;
79505: LD_VAR 0 4
79509: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79510: LD_INT 0
79512: PPUSH
79513: PPUSH
79514: PPUSH
79515: PPUSH
79516: PPUSH
79517: PPUSH
79518: PPUSH
79519: PPUSH
// if not units then
79520: LD_VAR 0 1
79524: NOT
79525: IFFALSE 79529
// exit ;
79527: GO 80053
// result := UnitFilter ( units , [ f_ok ] ) ;
79529: LD_ADDR_VAR 0 3
79533: PUSH
79534: LD_VAR 0 1
79538: PPUSH
79539: LD_INT 50
79541: PUSH
79542: EMPTY
79543: LIST
79544: PPUSH
79545: CALL_OW 72
79549: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79550: LD_ADDR_VAR 0 8
79554: PUSH
79555: LD_VAR 0 1
79559: PUSH
79560: LD_INT 1
79562: ARRAY
79563: PPUSH
79564: CALL_OW 255
79568: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79569: LD_ADDR_VAR 0 10
79573: PUSH
79574: LD_INT 29
79576: PUSH
79577: LD_INT 91
79579: PUSH
79580: LD_INT 49
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: LIST
79587: ST_TO_ADDR
// if not result then
79588: LD_VAR 0 3
79592: NOT
79593: IFFALSE 79597
// exit ;
79595: GO 80053
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79597: LD_ADDR_VAR 0 5
79601: PUSH
79602: LD_INT 81
79604: PUSH
79605: LD_VAR 0 8
79609: PUSH
79610: EMPTY
79611: LIST
79612: LIST
79613: PPUSH
79614: CALL_OW 69
79618: ST_TO_ADDR
// for i in result do
79619: LD_ADDR_VAR 0 4
79623: PUSH
79624: LD_VAR 0 3
79628: PUSH
79629: FOR_IN
79630: IFFALSE 80051
// begin tag := GetTag ( i ) + 1 ;
79632: LD_ADDR_VAR 0 9
79636: PUSH
79637: LD_VAR 0 4
79641: PPUSH
79642: CALL_OW 110
79646: PUSH
79647: LD_INT 1
79649: PLUS
79650: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79651: LD_ADDR_VAR 0 7
79655: PUSH
79656: LD_VAR 0 4
79660: PPUSH
79661: CALL_OW 250
79665: PPUSH
79666: LD_VAR 0 4
79670: PPUSH
79671: CALL_OW 251
79675: PPUSH
79676: LD_INT 6
79678: PPUSH
79679: CALL 79252 0 3
79683: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79684: LD_VAR 0 4
79688: PPUSH
79689: CALL_OW 247
79693: PUSH
79694: LD_INT 2
79696: EQUAL
79697: PUSH
79698: LD_VAR 0 7
79702: AND
79703: PUSH
79704: LD_VAR 0 4
79708: PPUSH
79709: CALL_OW 264
79713: PUSH
79714: LD_VAR 0 10
79718: IN
79719: NOT
79720: AND
79721: IFFALSE 79760
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79723: LD_VAR 0 4
79727: PPUSH
79728: LD_VAR 0 7
79732: PUSH
79733: LD_INT 1
79735: ARRAY
79736: PUSH
79737: LD_INT 1
79739: ARRAY
79740: PPUSH
79741: LD_VAR 0 7
79745: PUSH
79746: LD_INT 1
79748: ARRAY
79749: PUSH
79750: LD_INT 2
79752: ARRAY
79753: PPUSH
79754: CALL_OW 116
79758: GO 80049
// if path > tag then
79760: LD_VAR 0 2
79764: PUSH
79765: LD_VAR 0 9
79769: GREATER
79770: IFFALSE 79978
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79772: LD_ADDR_VAR 0 6
79776: PUSH
79777: LD_VAR 0 5
79781: PPUSH
79782: LD_INT 91
79784: PUSH
79785: LD_VAR 0 4
79789: PUSH
79790: LD_INT 8
79792: PUSH
79793: EMPTY
79794: LIST
79795: LIST
79796: LIST
79797: PPUSH
79798: CALL_OW 72
79802: ST_TO_ADDR
// if nearEnemy then
79803: LD_VAR 0 6
79807: IFFALSE 79876
// begin if GetWeapon ( i ) = ru_time_lapser then
79809: LD_VAR 0 4
79813: PPUSH
79814: CALL_OW 264
79818: PUSH
79819: LD_INT 49
79821: EQUAL
79822: IFFALSE 79850
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79824: LD_VAR 0 4
79828: PPUSH
79829: LD_VAR 0 6
79833: PPUSH
79834: LD_VAR 0 4
79838: PPUSH
79839: CALL_OW 74
79843: PPUSH
79844: CALL_OW 112
79848: GO 79874
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79850: LD_VAR 0 4
79854: PPUSH
79855: LD_VAR 0 6
79859: PPUSH
79860: LD_VAR 0 4
79864: PPUSH
79865: CALL_OW 74
79869: PPUSH
79870: CALL_OW 115
// end else
79874: GO 79976
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79876: LD_VAR 0 4
79880: PPUSH
79881: LD_VAR 0 2
79885: PUSH
79886: LD_VAR 0 9
79890: ARRAY
79891: PUSH
79892: LD_INT 1
79894: ARRAY
79895: PPUSH
79896: LD_VAR 0 2
79900: PUSH
79901: LD_VAR 0 9
79905: ARRAY
79906: PUSH
79907: LD_INT 2
79909: ARRAY
79910: PPUSH
79911: CALL_OW 297
79915: PUSH
79916: LD_INT 6
79918: GREATER
79919: IFFALSE 79962
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79921: LD_VAR 0 4
79925: PPUSH
79926: LD_VAR 0 2
79930: PUSH
79931: LD_VAR 0 9
79935: ARRAY
79936: PUSH
79937: LD_INT 1
79939: ARRAY
79940: PPUSH
79941: LD_VAR 0 2
79945: PUSH
79946: LD_VAR 0 9
79950: ARRAY
79951: PUSH
79952: LD_INT 2
79954: ARRAY
79955: PPUSH
79956: CALL_OW 114
79960: GO 79976
// SetTag ( i , tag ) ;
79962: LD_VAR 0 4
79966: PPUSH
79967: LD_VAR 0 9
79971: PPUSH
79972: CALL_OW 109
// end else
79976: GO 80049
// if enemy then
79978: LD_VAR 0 5
79982: IFFALSE 80049
// begin if GetWeapon ( i ) = ru_time_lapser then
79984: LD_VAR 0 4
79988: PPUSH
79989: CALL_OW 264
79993: PUSH
79994: LD_INT 49
79996: EQUAL
79997: IFFALSE 80025
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79999: LD_VAR 0 4
80003: PPUSH
80004: LD_VAR 0 5
80008: PPUSH
80009: LD_VAR 0 4
80013: PPUSH
80014: CALL_OW 74
80018: PPUSH
80019: CALL_OW 112
80023: GO 80049
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80025: LD_VAR 0 4
80029: PPUSH
80030: LD_VAR 0 5
80034: PPUSH
80035: LD_VAR 0 4
80039: PPUSH
80040: CALL_OW 74
80044: PPUSH
80045: CALL_OW 115
// end ; end ;
80049: GO 79629
80051: POP
80052: POP
// end ;
80053: LD_VAR 0 3
80057: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80058: LD_INT 0
80060: PPUSH
80061: PPUSH
80062: PPUSH
// if not unit or IsInUnit ( unit ) then
80063: LD_VAR 0 1
80067: NOT
80068: PUSH
80069: LD_VAR 0 1
80073: PPUSH
80074: CALL_OW 310
80078: OR
80079: IFFALSE 80083
// exit ;
80081: GO 80174
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80083: LD_ADDR_VAR 0 4
80087: PUSH
80088: LD_VAR 0 1
80092: PPUSH
80093: CALL_OW 250
80097: PPUSH
80098: LD_VAR 0 2
80102: PPUSH
80103: LD_INT 1
80105: PPUSH
80106: CALL_OW 272
80110: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80111: LD_ADDR_VAR 0 5
80115: PUSH
80116: LD_VAR 0 1
80120: PPUSH
80121: CALL_OW 251
80125: PPUSH
80126: LD_VAR 0 2
80130: PPUSH
80131: LD_INT 1
80133: PPUSH
80134: CALL_OW 273
80138: ST_TO_ADDR
// if ValidHex ( x , y ) then
80139: LD_VAR 0 4
80143: PPUSH
80144: LD_VAR 0 5
80148: PPUSH
80149: CALL_OW 488
80153: IFFALSE 80174
// ComTurnXY ( unit , x , y ) ;
80155: LD_VAR 0 1
80159: PPUSH
80160: LD_VAR 0 4
80164: PPUSH
80165: LD_VAR 0 5
80169: PPUSH
80170: CALL_OW 118
// end ;
80174: LD_VAR 0 3
80178: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80179: LD_INT 0
80181: PPUSH
80182: PPUSH
// result := false ;
80183: LD_ADDR_VAR 0 3
80187: PUSH
80188: LD_INT 0
80190: ST_TO_ADDR
// if not units then
80191: LD_VAR 0 2
80195: NOT
80196: IFFALSE 80200
// exit ;
80198: GO 80245
// for i in units do
80200: LD_ADDR_VAR 0 4
80204: PUSH
80205: LD_VAR 0 2
80209: PUSH
80210: FOR_IN
80211: IFFALSE 80243
// if See ( side , i ) then
80213: LD_VAR 0 1
80217: PPUSH
80218: LD_VAR 0 4
80222: PPUSH
80223: CALL_OW 292
80227: IFFALSE 80241
// begin result := true ;
80229: LD_ADDR_VAR 0 3
80233: PUSH
80234: LD_INT 1
80236: ST_TO_ADDR
// exit ;
80237: POP
80238: POP
80239: GO 80245
// end ;
80241: GO 80210
80243: POP
80244: POP
// end ;
80245: LD_VAR 0 3
80249: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80250: LD_INT 0
80252: PPUSH
80253: PPUSH
80254: PPUSH
80255: PPUSH
// if not unit or not points then
80256: LD_VAR 0 1
80260: NOT
80261: PUSH
80262: LD_VAR 0 2
80266: NOT
80267: OR
80268: IFFALSE 80272
// exit ;
80270: GO 80362
// dist := 99999 ;
80272: LD_ADDR_VAR 0 5
80276: PUSH
80277: LD_INT 99999
80279: ST_TO_ADDR
// for i in points do
80280: LD_ADDR_VAR 0 4
80284: PUSH
80285: LD_VAR 0 2
80289: PUSH
80290: FOR_IN
80291: IFFALSE 80360
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80293: LD_ADDR_VAR 0 6
80297: PUSH
80298: LD_VAR 0 1
80302: PPUSH
80303: LD_VAR 0 4
80307: PUSH
80308: LD_INT 1
80310: ARRAY
80311: PPUSH
80312: LD_VAR 0 4
80316: PUSH
80317: LD_INT 2
80319: ARRAY
80320: PPUSH
80321: CALL_OW 297
80325: ST_TO_ADDR
// if tmpDist < dist then
80326: LD_VAR 0 6
80330: PUSH
80331: LD_VAR 0 5
80335: LESS
80336: IFFALSE 80358
// begin result := i ;
80338: LD_ADDR_VAR 0 3
80342: PUSH
80343: LD_VAR 0 4
80347: ST_TO_ADDR
// dist := tmpDist ;
80348: LD_ADDR_VAR 0 5
80352: PUSH
80353: LD_VAR 0 6
80357: ST_TO_ADDR
// end ; end ;
80358: GO 80290
80360: POP
80361: POP
// end ;
80362: LD_VAR 0 3
80366: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80367: LD_INT 0
80369: PPUSH
// uc_side := side ;
80370: LD_ADDR_OWVAR 20
80374: PUSH
80375: LD_VAR 0 1
80379: ST_TO_ADDR
// uc_nation := 3 ;
80380: LD_ADDR_OWVAR 21
80384: PUSH
80385: LD_INT 3
80387: ST_TO_ADDR
// vc_chassis := 25 ;
80388: LD_ADDR_OWVAR 37
80392: PUSH
80393: LD_INT 25
80395: ST_TO_ADDR
// vc_engine := engine_siberite ;
80396: LD_ADDR_OWVAR 39
80400: PUSH
80401: LD_INT 3
80403: ST_TO_ADDR
// vc_control := control_computer ;
80404: LD_ADDR_OWVAR 38
80408: PUSH
80409: LD_INT 3
80411: ST_TO_ADDR
// vc_weapon := 59 ;
80412: LD_ADDR_OWVAR 40
80416: PUSH
80417: LD_INT 59
80419: ST_TO_ADDR
// result := CreateVehicle ;
80420: LD_ADDR_VAR 0 5
80424: PUSH
80425: CALL_OW 45
80429: ST_TO_ADDR
// SetDir ( result , d ) ;
80430: LD_VAR 0 5
80434: PPUSH
80435: LD_VAR 0 4
80439: PPUSH
80440: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80444: LD_VAR 0 5
80448: PPUSH
80449: LD_VAR 0 2
80453: PPUSH
80454: LD_VAR 0 3
80458: PPUSH
80459: LD_INT 0
80461: PPUSH
80462: CALL_OW 48
// end ;
80466: LD_VAR 0 5
80470: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80471: LD_INT 0
80473: PPUSH
80474: PPUSH
80475: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80476: LD_ADDR_VAR 0 2
80480: PUSH
80481: LD_INT 0
80483: PUSH
80484: LD_INT 0
80486: PUSH
80487: LD_INT 0
80489: PUSH
80490: LD_INT 0
80492: PUSH
80493: EMPTY
80494: LIST
80495: LIST
80496: LIST
80497: LIST
80498: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80499: LD_VAR 0 1
80503: NOT
80504: PUSH
80505: LD_VAR 0 1
80509: PPUSH
80510: CALL_OW 264
80514: PUSH
80515: LD_INT 12
80517: PUSH
80518: LD_INT 51
80520: PUSH
80521: LD_INT 32
80523: PUSH
80524: LD_INT 89
80526: PUSH
80527: EMPTY
80528: LIST
80529: LIST
80530: LIST
80531: LIST
80532: IN
80533: NOT
80534: OR
80535: IFFALSE 80539
// exit ;
80537: GO 80637
// for i := 1 to 3 do
80539: LD_ADDR_VAR 0 3
80543: PUSH
80544: DOUBLE
80545: LD_INT 1
80547: DEC
80548: ST_TO_ADDR
80549: LD_INT 3
80551: PUSH
80552: FOR_TO
80553: IFFALSE 80635
// begin tmp := GetCargo ( cargo , i ) ;
80555: LD_ADDR_VAR 0 4
80559: PUSH
80560: LD_VAR 0 1
80564: PPUSH
80565: LD_VAR 0 3
80569: PPUSH
80570: CALL_OW 289
80574: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80575: LD_ADDR_VAR 0 2
80579: PUSH
80580: LD_VAR 0 2
80584: PPUSH
80585: LD_VAR 0 3
80589: PPUSH
80590: LD_VAR 0 4
80594: PPUSH
80595: CALL_OW 1
80599: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80600: LD_ADDR_VAR 0 2
80604: PUSH
80605: LD_VAR 0 2
80609: PPUSH
80610: LD_INT 4
80612: PPUSH
80613: LD_VAR 0 2
80617: PUSH
80618: LD_INT 4
80620: ARRAY
80621: PUSH
80622: LD_VAR 0 4
80626: PLUS
80627: PPUSH
80628: CALL_OW 1
80632: ST_TO_ADDR
// end ;
80633: GO 80552
80635: POP
80636: POP
// end ;
80637: LD_VAR 0 2
80641: RET
// export function Length ( array ) ; begin
80642: LD_INT 0
80644: PPUSH
// result := array + 0 ;
80645: LD_ADDR_VAR 0 2
80649: PUSH
80650: LD_VAR 0 1
80654: PUSH
80655: LD_INT 0
80657: PLUS
80658: ST_TO_ADDR
// end ;
80659: LD_VAR 0 2
80663: RET
// export function PrepareArray ( array ) ; begin
80664: LD_INT 0
80666: PPUSH
// result := array diff 0 ;
80667: LD_ADDR_VAR 0 2
80671: PUSH
80672: LD_VAR 0 1
80676: PUSH
80677: LD_INT 0
80679: DIFF
80680: ST_TO_ADDR
// if not result [ 1 ] then
80681: LD_VAR 0 2
80685: PUSH
80686: LD_INT 1
80688: ARRAY
80689: NOT
80690: IFFALSE 80710
// result := Delete ( result , 1 ) ;
80692: LD_ADDR_VAR 0 2
80696: PUSH
80697: LD_VAR 0 2
80701: PPUSH
80702: LD_INT 1
80704: PPUSH
80705: CALL_OW 3
80709: ST_TO_ADDR
// end ;
80710: LD_VAR 0 2
80714: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80715: LD_INT 0
80717: PPUSH
80718: PPUSH
80719: PPUSH
80720: PPUSH
// sibRocketRange := 25 ;
80721: LD_ADDR_VAR 0 6
80725: PUSH
80726: LD_INT 25
80728: ST_TO_ADDR
// result := false ;
80729: LD_ADDR_VAR 0 4
80733: PUSH
80734: LD_INT 0
80736: ST_TO_ADDR
// for i := 0 to 5 do
80737: LD_ADDR_VAR 0 5
80741: PUSH
80742: DOUBLE
80743: LD_INT 0
80745: DEC
80746: ST_TO_ADDR
80747: LD_INT 5
80749: PUSH
80750: FOR_TO
80751: IFFALSE 80818
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80753: LD_VAR 0 1
80757: PPUSH
80758: LD_VAR 0 5
80762: PPUSH
80763: LD_VAR 0 6
80767: PPUSH
80768: CALL_OW 272
80772: PPUSH
80773: LD_VAR 0 2
80777: PPUSH
80778: LD_VAR 0 5
80782: PPUSH
80783: LD_VAR 0 6
80787: PPUSH
80788: CALL_OW 273
80792: PPUSH
80793: LD_VAR 0 3
80797: PPUSH
80798: CALL_OW 309
80802: IFFALSE 80816
// begin result := true ;
80804: LD_ADDR_VAR 0 4
80808: PUSH
80809: LD_INT 1
80811: ST_TO_ADDR
// exit ;
80812: POP
80813: POP
80814: GO 80820
// end ;
80816: GO 80750
80818: POP
80819: POP
// end ;
80820: LD_VAR 0 4
80824: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80825: LD_INT 0
80827: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80828: LD_VAR 0 1
80832: PPUSH
80833: LD_VAR 0 2
80837: PPUSH
80838: LD_INT 0
80840: PPUSH
80841: LD_INT 0
80843: PPUSH
80844: LD_INT 1
80846: PPUSH
80847: LD_INT 0
80849: PPUSH
80850: CALL_OW 587
// end ; end_of_file
80854: LD_VAR 0 3
80858: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80859: LD_VAR 0 1
80863: PUSH
80864: LD_INT 200
80866: DOUBLE
80867: GREATEREQUAL
80868: IFFALSE 80876
80870: LD_INT 299
80872: DOUBLE
80873: LESSEQUAL
80874: IFTRUE 80878
80876: GO 80910
80878: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80879: LD_VAR 0 1
80883: PPUSH
80884: LD_VAR 0 2
80888: PPUSH
80889: LD_VAR 0 3
80893: PPUSH
80894: LD_VAR 0 4
80898: PPUSH
80899: LD_VAR 0 5
80903: PPUSH
80904: CALL 35544 0 5
80908: GO 80987
80910: LD_INT 300
80912: DOUBLE
80913: GREATEREQUAL
80914: IFFALSE 80922
80916: LD_INT 399
80918: DOUBLE
80919: LESSEQUAL
80920: IFTRUE 80924
80922: GO 80986
80924: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80925: LD_VAR 0 1
80929: PPUSH
80930: LD_VAR 0 2
80934: PPUSH
80935: LD_VAR 0 3
80939: PPUSH
80940: LD_VAR 0 4
80944: PPUSH
80945: LD_VAR 0 5
80949: PPUSH
80950: LD_VAR 0 6
80954: PPUSH
80955: LD_VAR 0 7
80959: PPUSH
80960: LD_VAR 0 8
80964: PPUSH
80965: LD_VAR 0 9
80969: PPUSH
80970: LD_VAR 0 10
80974: PPUSH
80975: LD_VAR 0 11
80979: PPUSH
80980: CALL 31877 0 11
80984: GO 80987
80986: POP
// end ;
80987: PPOPN 11
80989: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80990: LD_VAR 0 1
80994: PPUSH
80995: LD_VAR 0 2
80999: PPUSH
81000: LD_VAR 0 3
81004: PPUSH
81005: LD_VAR 0 4
81009: PPUSH
81010: LD_VAR 0 5
81014: PPUSH
81015: CALL 35280 0 5
// end ; end_of_file
81019: PPOPN 5
81021: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81022: LD_VAR 0 1
81026: PPUSH
81027: LD_VAR 0 2
81031: PPUSH
81032: LD_VAR 0 3
81036: PPUSH
81037: LD_VAR 0 4
81041: PPUSH
81042: LD_VAR 0 5
81046: PPUSH
81047: LD_VAR 0 6
81051: PPUSH
81052: CALL 19570 0 6
// end ;
81056: PPOPN 6
81058: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81059: LD_INT 0
81061: PPUSH
// begin if not units then
81062: LD_VAR 0 1
81066: NOT
81067: IFFALSE 81071
// exit ;
81069: GO 81071
// end ;
81071: PPOPN 7
81073: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81074: CALL 19541 0 0
// end ;
81078: PPOPN 1
81080: END
