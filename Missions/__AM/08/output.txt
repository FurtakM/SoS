// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 97 0 0
// PrepareAmerican ;
  19: CALL 318 0 0
// PrepareRussian ;
  23: CALL 9239 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 78055 0 9
// if debug then
  79: LD_EXP 1
  83: IFFALSE 92
// FogOff ( 1 ) ;
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 344
// Action ;
  92: CALL 15669 0 0
// end ;
  96: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  97: LD_INT 0
  99: PPUSH
// debug := false ;
 100: LD_ADDR_EXP 1
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// if debug then
 108: LD_EXP 1
 112: IFFALSE 122
// Difficulty := 4 ;
 114: LD_ADDR_OWVAR 67
 118: PUSH
 119: LD_INT 4
 121: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
 122: LD_ADDR_EXP 13
 126: PUSH
 127: LD_STRING GammaCommander
 129: PPUSH
 130: LD_INT 3
 132: PPUSH
 133: CALL_OW 30
 137: ST_TO_ADDR
// waitingForSikorski := false ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// deltaSupport := false ;
 146: LD_ADDR_EXP 6
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seenComputer := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// jmmArrival := false ;
 162: LD_ADDR_EXP 8
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 170: LD_ADDR_EXP 3
 174: PUSH
 175: LD_INT 21000
 177: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 178: LD_ADDR_EXP 4
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// sikorskiStatus := 1 ;
 186: LD_ADDR_EXP 9
 190: PUSH
 191: LD_INT 1
 193: ST_TO_ADDR
// sikorskiIsKilled := false ;
 194: LD_ADDR_EXP 10
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// invincibleMode := false ;
 202: LD_ADDR_EXP 5
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// captureRocketCounter := 0 ;
 210: LD_ADDR_EXP 11
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// killMechCounter := 0 ;
 218: LD_ADDR_EXP 12
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// end ;
 226: LD_VAR 0 1
 230: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 231: LD_INT 22
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 34
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PPUSH
 255: CALL_OW 69
 259: PUSH
 260: LD_INT 6
 262: GREATEREQUAL
 263: IFFALSE 275
 265: GO 267
 267: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 268: LD_STRING ACH_ARMOR
 270: PPUSH
 271: CALL_OW 543
 275: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 276: LD_EXP 11
 280: PUSH
 281: LD_INT 3
 283: GREATEREQUAL
 284: IFFALSE 296
 286: GO 288
 288: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 289: LD_STRING ACH_TOOL
 291: PPUSH
 292: CALL_OW 543
 296: END
// every 0 0$1 trigger killMechCounter >= 10 do
 297: LD_EXP 12
 301: PUSH
 302: LD_INT 10
 304: GREATEREQUAL
 305: IFFALSE 317
 307: GO 309
 309: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 310: LD_STRING ACH_MECH
 312: PPUSH
 313: CALL_OW 543
 317: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 318: LD_INT 0
 320: PPUSH
 321: PPUSH
 322: PPUSH
 323: PPUSH
 324: PPUSH
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_side := 1 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 1
 343: ST_TO_ADDR
// uc_nation := 1 ;
 344: LD_ADDR_OWVAR 21
 348: PUSH
 349: LD_INT 1
 351: ST_TO_ADDR
// PrepareGammaBase ;
 352: CALL 2481 0 0
// x := 52 ;
 356: LD_ADDR_VAR 0 13
 360: PUSH
 361: LD_INT 52
 363: ST_TO_ADDR
// y := 16 ;
 364: LD_ADDR_VAR 0 14
 368: PUSH
 369: LD_INT 16
 371: ST_TO_ADDR
// case gammaCommander of 1 :
 372: LD_EXP 13
 376: PUSH
 377: LD_INT 1
 379: DOUBLE
 380: EQUAL
 381: IFTRUE 385
 383: GO 470
 385: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 386: LD_ADDR_EXP 16
 390: PUSH
 391: LD_STRING Donaldson
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: LD_STRING 04_
 399: PPUSH
 400: CALL 43204 0 3
 404: ST_TO_ADDR
// if HexInfo ( x , y ) then
 405: LD_VAR 0 13
 409: PPUSH
 410: LD_VAR 0 14
 414: PPUSH
 415: CALL_OW 428
 419: IFFALSE 437
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 421: LD_EXP 16
 425: PPUSH
 426: LD_EXP 31
 430: PPUSH
 431: CALL_OW 52
 435: GO 459
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 437: LD_EXP 16
 441: PPUSH
 442: LD_VAR 0 13
 446: PPUSH
 447: LD_VAR 0 14
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL_OW 48
// ComHold ( Donaldson ) ;
 459: LD_EXP 16
 463: PPUSH
 464: CALL_OW 140
// end ; 2 :
 468: GO 657
 470: LD_INT 2
 472: DOUBLE
 473: EQUAL
 474: IFTRUE 478
 476: GO 563
 478: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 479: LD_ADDR_EXP 15
 483: PUSH
 484: LD_STRING Brown
 486: PPUSH
 487: LD_INT 1
 489: PPUSH
 490: LD_STRING 04_
 492: PPUSH
 493: CALL 43204 0 3
 497: ST_TO_ADDR
// if HexInfo ( x , y ) then
 498: LD_VAR 0 13
 502: PPUSH
 503: LD_VAR 0 14
 507: PPUSH
 508: CALL_OW 428
 512: IFFALSE 530
// PlaceHumanInUnit ( Brown , amDepot ) else
 514: LD_EXP 15
 518: PPUSH
 519: LD_EXP 31
 523: PPUSH
 524: CALL_OW 52
 528: GO 552
// PlaceUnitXY ( Brown , x , y , false ) ;
 530: LD_EXP 15
 534: PPUSH
 535: LD_VAR 0 13
 539: PPUSH
 540: LD_VAR 0 14
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL_OW 48
// ComHold ( Brown ) ;
 552: LD_EXP 15
 556: PPUSH
 557: CALL_OW 140
// end ; 3 :
 561: GO 657
 563: LD_INT 3
 565: DOUBLE
 566: EQUAL
 567: IFTRUE 571
 569: GO 656
 571: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 572: LD_ADDR_EXP 25
 576: PUSH
 577: LD_STRING VanHouten
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: LD_STRING 
 585: PPUSH
 586: CALL 43204 0 3
 590: ST_TO_ADDR
// if HexInfo ( x , y ) then
 591: LD_VAR 0 13
 595: PPUSH
 596: LD_VAR 0 14
 600: PPUSH
 601: CALL_OW 428
 605: IFFALSE 623
// PlaceHumanInUnit ( Houten , amDepot ) else
 607: LD_EXP 25
 611: PPUSH
 612: LD_EXP 31
 616: PPUSH
 617: CALL_OW 52
 621: GO 645
// PlaceUnitXY ( Houten , x , y , false ) ;
 623: LD_EXP 25
 627: PPUSH
 628: LD_VAR 0 13
 632: PPUSH
 633: LD_VAR 0 14
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 48
// ComHold ( Houten ) ;
 645: LD_EXP 25
 649: PPUSH
 650: CALL_OW 140
// end ; end ;
 654: GO 657
 656: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 657: LD_ADDR_EXP 29
 661: PUSH
 662: LD_STRING Harisson
 664: PPUSH
 665: LD_INT 0
 667: PPUSH
 668: LD_STRING 
 670: PPUSH
 671: CALL 43204 0 3
 675: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 676: LD_ADDR_EXP 30
 680: PUSH
 681: LD_STRING Powell
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: LD_STRING 
 689: PPUSH
 690: CALL 43204 0 3
 694: ST_TO_ADDR
// tmp := [ ] ;
 695: LD_ADDR_VAR 0 4
 699: PUSH
 700: EMPTY
 701: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 702: LD_STRING 04_Lisa
 704: PUSH
 705: EMPTY
 706: LIST
 707: PPUSH
 708: CALL_OW 28
 712: IFFALSE 821
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 714: LD_STRING LisaInDelta
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 30
 724: NOT
 725: IFFALSE 740
 727: PUSH
 728: LD_STRING 07_Lisa
 730: PUSH
 731: EMPTY
 732: LIST
 733: PPUSH
 734: CALL_OW 28
 738: NOT
 739: AND
 740: IFFALSE 763
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 742: LD_ADDR_EXP 19
 746: PUSH
 747: LD_STRING Lisa
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: LD_STRING 04_
 755: PPUSH
 756: CALL 43204 0 3
 760: ST_TO_ADDR
 761: GO 795
// if not LoadVariable ( LisaIn07 , false ) then
 763: LD_STRING LisaIn07
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: IFFALSE 795
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 776: LD_ADDR_EXP 19
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 07_
 789: PPUSH
 790: CALL 43204 0 3
 794: ST_TO_ADDR
// if Lisa then
 795: LD_EXP 19
 799: IFFALSE 821
// tmp2 := Join ( tmp2 , Lisa ) ;
 801: LD_ADDR_VAR 0 5
 805: PUSH
 806: LD_VAR 0 5
 810: PPUSH
 811: LD_EXP 19
 815: PPUSH
 816: CALL 81404 0 2
 820: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 821: LD_STRING 04_Bobby
 823: PUSH
 824: EMPTY
 825: LIST
 826: PPUSH
 827: CALL_OW 28
 831: IFFALSE 940
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 833: LD_STRING BobbyInDelta
 835: PPUSH
 836: LD_INT 0
 838: PPUSH
 839: CALL_OW 30
 843: NOT
 844: IFFALSE 859
 846: PUSH
 847: LD_STRING 07_Bobby
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 882
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 861: LD_ADDR_EXP 17
 865: PUSH
 866: LD_STRING Bobby
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 43204 0 3
 879: ST_TO_ADDR
 880: GO 914
// if not LoadVariable ( BobbyIn07 , false ) then
 882: LD_STRING BobbyIn07
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 30
 892: NOT
 893: IFFALSE 914
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 895: LD_ADDR_EXP 17
 899: PUSH
 900: LD_STRING Bobby
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_STRING 07_
 908: PPUSH
 909: CALL 43204 0 3
 913: ST_TO_ADDR
// if Bobby then
 914: LD_EXP 17
 918: IFFALSE 940
// tmp2 := Join ( tmp2 , Bobby ) ;
 920: LD_ADDR_VAR 0 5
 924: PUSH
 925: LD_VAR 0 5
 929: PPUSH
 930: LD_EXP 17
 934: PPUSH
 935: CALL 81404 0 2
 939: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 940: LD_STRING 04_Cyrus
 942: PUSH
 943: EMPTY
 944: LIST
 945: PPUSH
 946: CALL_OW 28
 950: IFFALSE 1059
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 952: LD_STRING CyrusInDelta
 954: PPUSH
 955: LD_INT 0
 957: PPUSH
 958: CALL_OW 30
 962: NOT
 963: IFFALSE 978
 965: PUSH
 966: LD_STRING 07_Cyrus
 968: PUSH
 969: EMPTY
 970: LIST
 971: PPUSH
 972: CALL_OW 28
 976: NOT
 977: AND
 978: IFFALSE 1001
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 980: LD_ADDR_EXP 18
 984: PUSH
 985: LD_STRING Cyrus
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: LD_STRING 04_
 993: PPUSH
 994: CALL 43204 0 3
 998: ST_TO_ADDR
 999: GO 1033
// if not LoadVariable ( CyrusIn07 , false ) then
1001: LD_STRING CyrusIn07
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 30
1011: NOT
1012: IFFALSE 1033
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1014: LD_ADDR_EXP 18
1018: PUSH
1019: LD_STRING Cyrus
1021: PPUSH
1022: LD_INT 1
1024: PPUSH
1025: LD_STRING 07_
1027: PPUSH
1028: CALL 43204 0 3
1032: ST_TO_ADDR
// if Cyrus then
1033: LD_EXP 18
1037: IFFALSE 1059
// tmp2 := Join ( tmp2 , Cyrus ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_VAR 0 5
1048: PPUSH
1049: LD_EXP 18
1053: PPUSH
1054: CALL 81404 0 2
1058: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1059: LD_STRING 04_Brown
1061: PUSH
1062: EMPTY
1063: LIST
1064: PPUSH
1065: CALL_OW 28
1069: IFFALSE 1084
1071: PUSH
1072: LD_STRING BrownInDelta
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 30
1082: NOT
1083: AND
1084: IFFALSE 1099
1086: PUSH
1087: LD_STRING 07_Brown
1089: PUSH
1090: EMPTY
1091: LIST
1092: PPUSH
1093: CALL_OW 28
1097: NOT
1098: AND
1099: IFFALSE 1111
1101: PUSH
1102: LD_EXP 13
1106: PUSH
1107: LD_INT 2
1109: NONEQUAL
1110: AND
1111: IFFALSE 1154
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1113: LD_ADDR_EXP 15
1117: PUSH
1118: LD_STRING Brown
1120: PPUSH
1121: LD_INT 1
1123: PPUSH
1124: LD_STRING 04_
1126: PPUSH
1127: CALL 43204 0 3
1131: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1132: LD_ADDR_VAR 0 5
1136: PUSH
1137: LD_VAR 0 5
1141: PPUSH
1142: LD_EXP 15
1146: PPUSH
1147: CALL 81404 0 2
1151: ST_TO_ADDR
// end else
1152: GO 1218
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1154: LD_STRING BrownIn07
1156: PPUSH
1157: LD_INT 0
1159: PPUSH
1160: CALL_OW 30
1164: NOT
1165: IFFALSE 1177
1167: PUSH
1168: LD_EXP 13
1172: PUSH
1173: LD_INT 2
1175: NONEQUAL
1176: AND
1177: IFFALSE 1218
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1179: LD_ADDR_EXP 15
1183: PUSH
1184: LD_STRING Brown
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_STRING 07_
1192: PPUSH
1193: CALL 43204 0 3
1197: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1198: LD_ADDR_VAR 0 5
1202: PUSH
1203: LD_VAR 0 5
1207: PPUSH
1208: LD_EXP 15
1212: PPUSH
1213: CALL 81404 0 2
1217: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1218: LD_STRING 04_Donaldson
1220: PUSH
1221: EMPTY
1222: LIST
1223: PPUSH
1224: CALL_OW 28
1228: IFFALSE 1243
1230: PUSH
1231: LD_STRING DonaldsonInDelta
1233: PPUSH
1234: LD_INT 0
1236: PPUSH
1237: CALL_OW 30
1241: NOT
1242: AND
1243: IFFALSE 1258
1245: PUSH
1246: LD_STRING 07_Donaldson
1248: PUSH
1249: EMPTY
1250: LIST
1251: PPUSH
1252: CALL_OW 28
1256: NOT
1257: AND
1258: IFFALSE 1270
1260: PUSH
1261: LD_EXP 13
1265: PUSH
1266: LD_INT 1
1268: NONEQUAL
1269: AND
1270: IFFALSE 1313
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1272: LD_ADDR_EXP 16
1276: PUSH
1277: LD_STRING Donaldson
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: LD_STRING 04_
1285: PPUSH
1286: CALL 43204 0 3
1290: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1291: LD_ADDR_VAR 0 5
1295: PUSH
1296: LD_VAR 0 5
1300: PPUSH
1301: LD_EXP 16
1305: PPUSH
1306: CALL 81404 0 2
1310: ST_TO_ADDR
// end else
1311: GO 1377
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1313: LD_STRING DonaldsonIn07
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: CALL_OW 30
1323: NOT
1324: IFFALSE 1336
1326: PUSH
1327: LD_EXP 13
1331: PUSH
1332: LD_INT 1
1334: NONEQUAL
1335: AND
1336: IFFALSE 1377
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1338: LD_ADDR_EXP 16
1342: PUSH
1343: LD_STRING Donaldson
1345: PPUSH
1346: LD_INT 1
1348: PPUSH
1349: LD_STRING 07_
1351: PPUSH
1352: CALL 43204 0 3
1356: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1357: LD_ADDR_VAR 0 5
1361: PUSH
1362: LD_VAR 0 5
1366: PPUSH
1367: LD_EXP 16
1371: PPUSH
1372: CALL 81404 0 2
1376: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1377: LD_STRING KhatamIn07
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL_OW 30
1387: NOT
1388: IFFALSE 1429
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1390: LD_ADDR_EXP 23
1394: PUSH
1395: LD_STRING Khatam
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_STRING 07_
1403: PPUSH
1404: CALL 43204 0 3
1408: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1409: LD_ADDR_VAR 0 5
1413: PUSH
1414: LD_VAR 0 5
1418: PPUSH
1419: LD_EXP 23
1423: PPUSH
1424: CALL 81404 0 2
1428: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1429: LD_ADDR_VAR 0 6
1433: PUSH
1434: LD_STRING 07_othersGamma
1436: PPUSH
1437: CALL_OW 31
1441: ST_TO_ADDR
// tmp := 5 - others ;
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_INT 5
1449: PUSH
1450: LD_VAR 0 6
1454: MINUS
1455: ST_TO_ADDR
// if tmp then
1456: LD_VAR 0 4
1460: IFFALSE 1517
// for i := tmp downto 1 do
1462: LD_ADDR_VAR 0 2
1466: PUSH
1467: DOUBLE
1468: LD_VAR 0 4
1472: INC
1473: ST_TO_ADDR
1474: LD_INT 1
1476: PUSH
1477: FOR_DOWNTO
1478: IFFALSE 1515
// begin PrepareHuman ( false , 1 , 5 ) ;
1480: LD_INT 0
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 5
1488: PPUSH
1489: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1493: LD_ADDR_VAR 0 6
1497: PUSH
1498: LD_VAR 0 6
1502: PPUSH
1503: CALL_OW 44
1507: PPUSH
1508: CALL 81404 0 2
1512: ST_TO_ADDR
// end ;
1513: GO 1477
1515: POP
1516: POP
// for i in others do
1517: LD_ADDR_VAR 0 2
1521: PUSH
1522: LD_VAR 0 6
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1544
// SetTag ( i , 106 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: LD_INT 106
1537: PPUSH
1538: CALL_OW 109
1542: GO 1527
1544: POP
1545: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1546: LD_ADDR_VAR 0 8
1550: PUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 30
1563: PUSH
1564: LD_INT 31
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 69
1579: ST_TO_ADDR
// for i in bun do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: LD_VAR 0 8
1589: PUSH
1590: FOR_IN
1591: IFFALSE 1723
// begin x := GetX ( i ) ;
1593: LD_ADDR_VAR 0 13
1597: PUSH
1598: LD_VAR 0 2
1602: PPUSH
1603: CALL_OW 250
1607: ST_TO_ADDR
// y := GetY ( i ) ;
1608: LD_ADDR_VAR 0 14
1612: PUSH
1613: LD_VAR 0 2
1617: PPUSH
1618: CALL_OW 251
1622: ST_TO_ADDR
// d := GetDir ( i ) ;
1623: LD_ADDR_VAR 0 15
1627: PUSH
1628: LD_VAR 0 2
1632: PPUSH
1633: CALL_OW 254
1637: ST_TO_ADDR
// RemoveUnit ( i ) ;
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 64
// bc_type := b_bunker ;
1647: LD_ADDR_OWVAR 42
1651: PUSH
1652: LD_INT 32
1654: ST_TO_ADDR
// bc_level := 6 ;
1655: LD_ADDR_OWVAR 43
1659: PUSH
1660: LD_INT 6
1662: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1663: LD_ADDR_VAR 0 16
1667: PUSH
1668: LD_VAR 0 13
1672: PPUSH
1673: LD_VAR 0 14
1677: PPUSH
1678: LD_VAR 0 15
1682: PPUSH
1683: CALL_OW 47
1687: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1688: LD_VAR 0 16
1692: PPUSH
1693: LD_INT 5
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_VAR 0 2
1707: PUSH
1708: LD_INT 2
1710: MOD
1711: PUSH
1712: LD_INT 1
1714: PLUS
1715: ARRAY
1716: PPUSH
1717: CALL_OW 431
// end ;
1721: GO 1590
1723: POP
1724: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1725: LD_ADDR_VAR 0 7
1729: PUSH
1730: LD_INT 22
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 30
1742: PUSH
1743: LD_INT 5
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PPUSH
1754: CALL_OW 69
1758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1759: LD_ADDR_VAR 0 9
1763: PUSH
1764: LD_INT 22
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 30
1779: PUSH
1780: LD_INT 6
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 30
1789: PUSH
1790: LD_INT 7
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 8
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PPUSH
1817: CALL_OW 69
1821: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1822: LD_ADDR_VAR 0 10
1826: PUSH
1827: LD_INT 22
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 3
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PPUSH
1851: CALL_OW 69
1855: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1856: LD_ADDR_VAR 0 11
1860: PUSH
1861: LD_INT 22
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 30
1873: PUSH
1874: LD_INT 36
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PPUSH
1885: CALL_OW 69
1889: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1890: LD_ADDR_VAR 0 8
1894: PUSH
1895: LD_INT 22
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 2
1907: PUSH
1908: LD_INT 30
1910: PUSH
1911: LD_INT 31
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 30
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PPUSH
1937: CALL_OW 69
1941: ST_TO_ADDR
// for i in others union tmp2 do
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 6
1951: PUSH
1952: LD_VAR 0 5
1956: UNION
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2403
// begin placed := false ;
1961: LD_ADDR_VAR 0 12
1965: PUSH
1966: LD_INT 0
1968: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1969: LD_VAR 0 2
1973: PPUSH
1974: CALL_OW 257
1978: PUSH
1979: LD_INT 1
1981: EQUAL
1982: IFFALSE 2109
// begin if UnitFilter ( bun , [ f_empty ] ) then
1984: LD_VAR 0 8
1988: PPUSH
1989: LD_INT 58
1991: PUSH
1992: EMPTY
1993: LIST
1994: PPUSH
1995: CALL_OW 72
1999: IFFALSE 2038
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2001: LD_VAR 0 2
2005: PPUSH
2006: LD_VAR 0 8
2010: PPUSH
2011: LD_INT 58
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 72
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PPUSH
2026: CALL_OW 52
// placed := true ;
2030: LD_ADDR_VAR 0 12
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// end ; if arm and not placed then
2038: LD_VAR 0 7
2042: IFFALSE 2051
2044: PUSH
2045: LD_VAR 0 12
2049: NOT
2050: AND
2051: IFFALSE 2109
// begin for j in arm do
2053: LD_ADDR_VAR 0 3
2057: PUSH
2058: LD_VAR 0 7
2062: PUSH
2063: FOR_IN
2064: IFFALSE 2107
// if UnitsInside ( j ) < 6 then
2066: LD_VAR 0 3
2070: PPUSH
2071: CALL_OW 313
2075: PUSH
2076: LD_INT 6
2078: LESS
2079: IFFALSE 2105
// begin PlaceHumanInUnit ( i , j ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_VAR 0 3
2090: PPUSH
2091: CALL_OW 52
// placed := true ;
2095: LD_ADDR_VAR 0 12
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// break ;
2103: GO 2107
// end ;
2105: GO 2063
2107: POP
2108: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 257
2118: PUSH
2119: LD_INT 2
2121: EQUAL
2122: IFFALSE 2155
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2124: LD_VAR 0 2
2128: PPUSH
2129: LD_INT 52
2131: PPUSH
2132: LD_INT 20
2134: PPUSH
2135: LD_INT 6
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL_OW 50
// placed := true ;
2145: LD_ADDR_VAR 0 12
2149: PUSH
2150: LD_INT 1
2152: ST_TO_ADDR
// continue ;
2153: GO 1958
// end ; if GetClass ( i ) = class_mechanic then
2155: LD_VAR 0 2
2159: PPUSH
2160: CALL_OW 257
2164: PUSH
2165: LD_INT 3
2167: EQUAL
2168: IFFALSE 2293
// begin if fac then
2170: LD_VAR 0 10
2174: IFFALSE 2293
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2176: LD_VAR 0 11
2180: IFFALSE 2201
2182: PUSH
2183: LD_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: CALL_OW 313
2196: PUSH
2197: LD_INT 3
2199: LESS
2200: AND
2201: IFFALSE 2229
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2203: LD_VAR 0 2
2207: PPUSH
2208: LD_VAR 0 11
2212: PUSH
2213: LD_INT 1
2215: ARRAY
2216: PPUSH
2217: CALL_OW 52
// placed := true ;
2221: LD_ADDR_VAR 0 12
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// end ; if placed then
2229: LD_VAR 0 12
2233: IFFALSE 2237
// continue ;
2235: GO 1958
// for j in fac do
2237: LD_ADDR_VAR 0 3
2241: PUSH
2242: LD_VAR 0 10
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2291
// if UnitsInside ( j ) < 6 then
2250: LD_VAR 0 3
2254: PPUSH
2255: CALL_OW 313
2259: PUSH
2260: LD_INT 6
2262: LESS
2263: IFFALSE 2289
// begin PlaceHumanInUnit ( i , j ) ;
2265: LD_VAR 0 2
2269: PPUSH
2270: LD_VAR 0 3
2274: PPUSH
2275: CALL_OW 52
// placed := true ;
2279: LD_ADDR_VAR 0 12
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// break ;
2287: GO 2291
// end ;
2289: GO 2247
2291: POP
2292: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2293: LD_VAR 0 2
2297: PPUSH
2298: CALL_OW 257
2302: PUSH
2303: LD_INT 4
2305: EQUAL
2306: IFFALSE 2370
// begin if lab then
2308: LD_VAR 0 9
2312: IFFALSE 2370
// begin for j in lab do
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_VAR 0 9
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2368
// if UnitsInside ( j ) < 6 then
2327: LD_VAR 0 3
2331: PPUSH
2332: CALL_OW 313
2336: PUSH
2337: LD_INT 6
2339: LESS
2340: IFFALSE 2366
// begin PlaceHumanInUnit ( i , j ) ;
2342: LD_VAR 0 2
2346: PPUSH
2347: LD_VAR 0 3
2351: PPUSH
2352: CALL_OW 52
// placed := true ;
2356: LD_ADDR_VAR 0 12
2360: PUSH
2361: LD_INT 1
2363: ST_TO_ADDR
// break ;
2364: GO 2368
// end ;
2366: GO 2324
2368: POP
2369: POP
// end ; end ; if not placed then
2370: LD_VAR 0 12
2374: NOT
2375: IFFALSE 2401
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2377: LD_VAR 0 2
2381: PPUSH
2382: LD_INT 3
2384: PPUSH
2385: LD_INT 0
2387: PPUSH
2388: CALL_OW 49
// ComHold ( i ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL_OW 140
// end ; end ;
2401: GO 1958
2403: POP
2404: POP
// if ct then
2405: LD_VAR 0 11
2409: IFFALSE 2476
// if UnitsInside ( ct [ 1 ] ) then
2411: LD_VAR 0 11
2415: PUSH
2416: LD_INT 1
2418: ARRAY
2419: PPUSH
2420: CALL_OW 313
2424: IFFALSE 2476
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: LD_INT 22
2433: PUSH
2434: LD_INT 1
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 33
2443: PUSH
2444: LD_INT 2
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PPUSH
2455: CALL_OW 69
2459: PUSH
2460: FOR_IN
2461: IFFALSE 2474
// Connect ( i ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: CALL 51706 0 1
2472: GO 2460
2474: POP
2475: POP
// end ; end ;
2476: LD_VAR 0 1
2480: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2489: LD_INT 71
2491: PPUSH
2492: LD_INT 5
2494: PPUSH
2495: LD_INT 1
2497: PPUSH
2498: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2502: LD_ADDR_VAR 0 2
2506: PUSH
2507: LD_STRING GammaBase
2509: PPUSH
2510: EMPTY
2511: PPUSH
2512: CALL_OW 30
2516: ST_TO_ADDR
// if not blist then
2517: LD_VAR 0 2
2521: NOT
2522: IFFALSE 2593
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] , [ b_lab_full , 41 , 13 , 2 , 0 , 0 , 0 ] ] ;
2524: LD_ADDR_VAR 0 2
2528: PUSH
2529: LD_INT 1
2531: PUSH
2532: LD_INT 52
2534: PUSH
2535: LD_INT 12
2537: PUSH
2538: LD_INT 3
2540: PUSH
2541: LD_INT 3
2543: PUSH
2544: LD_INT 0
2546: PUSH
2547: LD_INT 0
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 8
2561: PUSH
2562: LD_INT 41
2564: PUSH
2565: LD_INT 13
2567: PUSH
2568: LD_INT 2
2570: PUSH
2571: LD_INT 0
2573: PUSH
2574: LD_INT 0
2576: PUSH
2577: LD_INT 0
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// uc_side := 1 ;
2593: LD_ADDR_OWVAR 20
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// uc_nation := 1 ;
2601: LD_ADDR_OWVAR 21
2605: PUSH
2606: LD_INT 1
2608: ST_TO_ADDR
// for i in blist do
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: LD_VAR 0 2
2618: PUSH
2619: FOR_IN
2620: IFFALSE 2902
// begin InitBc ;
2622: CALL_OW 21
// bc_type := i [ 1 ] ;
2626: LD_ADDR_OWVAR 42
2630: PUSH
2631: LD_VAR 0 3
2635: PUSH
2636: LD_INT 1
2638: ARRAY
2639: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2640: LD_ADDR_OWVAR 43
2644: PUSH
2645: LD_VAR 0 3
2649: PUSH
2650: LD_INT 5
2652: ARRAY
2653: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2654: LD_OWVAR 42
2658: PUSH
2659: LD_INT 6
2661: PUSH
2662: LD_INT 7
2664: PUSH
2665: LD_INT 8
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: IN
2673: IFFALSE 2737
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2675: LD_STRING 06_remoteVehs_1
2677: PPUSH
2678: LD_INT 0
2680: PPUSH
2681: CALL_OW 30
2685: IFFALSE 2713
// begin bc_type := b_lab_full ;
2687: LD_ADDR_OWVAR 42
2691: PUSH
2692: LD_INT 8
2694: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2695: LD_ADDR_OWVAR 44
2699: PUSH
2700: LD_INT 10
2702: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2703: LD_ADDR_OWVAR 45
2707: PUSH
2708: LD_INT 15
2710: ST_TO_ADDR
// end else
2711: GO 2737
// begin bc_type := b_lab_half ;
2713: LD_ADDR_OWVAR 42
2717: PUSH
2718: LD_INT 7
2720: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2721: LD_ADDR_OWVAR 44
2725: PUSH
2726: LD_INT 10
2728: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2729: LD_ADDR_OWVAR 45
2733: PUSH
2734: LD_INT 9
2736: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2737: LD_OWVAR 42
2741: PUSH
2742: LD_INT 2
2744: EQUAL
2745: IFFALSE 2755
// bc_type := b_factory ;
2747: LD_ADDR_OWVAR 42
2751: PUSH
2752: LD_INT 3
2754: ST_TO_ADDR
// if bc_type = b_depot then
2755: LD_OWVAR 42
2759: PUSH
2760: LD_INT 0
2762: EQUAL
2763: IFFALSE 2812
// begin bc_type := b_warehouse ;
2765: LD_ADDR_OWVAR 42
2769: PUSH
2770: LD_INT 1
2772: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2773: LD_ADDR_EXP 31
2777: PUSH
2778: LD_VAR 0 3
2782: PUSH
2783: LD_INT 2
2785: ARRAY
2786: PPUSH
2787: LD_VAR 0 3
2791: PUSH
2792: LD_INT 3
2794: ARRAY
2795: PPUSH
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 4
2803: ARRAY
2804: PPUSH
2805: CALL_OW 47
2809: ST_TO_ADDR
// continue ;
2810: GO 2619
// end ; if bc_type = b_armoury then
2812: LD_OWVAR 42
2816: PUSH
2817: LD_INT 4
2819: EQUAL
2820: IFFALSE 2830
// bc_type = b_barracks ;
2822: LD_ADDR_OWVAR 42
2826: PUSH
2827: LD_INT 5
2829: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2830: LD_ADDR_VAR 0 4
2834: PUSH
2835: LD_VAR 0 3
2839: PUSH
2840: LD_INT 2
2842: ARRAY
2843: PPUSH
2844: LD_VAR 0 3
2848: PUSH
2849: LD_INT 3
2851: ARRAY
2852: PPUSH
2853: LD_VAR 0 3
2857: PUSH
2858: LD_INT 4
2860: ARRAY
2861: PPUSH
2862: CALL_OW 47
2866: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2867: LD_VAR 0 4
2871: PPUSH
2872: CALL_OW 266
2876: PUSH
2877: LD_INT 32
2879: EQUAL
2880: IFFALSE 2900
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2882: LD_VAR 0 4
2886: PPUSH
2887: LD_VAR 0 3
2891: PUSH
2892: LD_INT 7
2894: ARRAY
2895: PPUSH
2896: CALL_OW 431
// end ;
2900: GO 2619
2902: POP
2903: POP
// if not amDepot then
2904: LD_EXP 31
2908: NOT
2909: IFFALSE 2946
// begin bc_type := b_warehouse ;
2911: LD_ADDR_OWVAR 42
2915: PUSH
2916: LD_INT 1
2918: ST_TO_ADDR
// bc_level := 6 ;
2919: LD_ADDR_OWVAR 43
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2927: LD_ADDR_EXP 31
2931: PUSH
2932: LD_INT 52
2934: PPUSH
2935: LD_INT 12
2937: PPUSH
2938: LD_INT 3
2940: PPUSH
2941: CALL_OW 47
2945: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2946: LD_ADDR_OWVAR 42
2950: PUSH
2951: LD_INT 5
2953: ST_TO_ADDR
// bc_level := 6 ;
2954: LD_ADDR_OWVAR 43
2958: PUSH
2959: LD_INT 6
2961: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2962: LD_INT 61
2964: PPUSH
2965: LD_INT 29
2967: PPUSH
2968: LD_INT 5
2970: PPUSH
2971: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2975: LD_EXP 31
2979: PPUSH
2980: LD_STRING gamma
2982: PPUSH
2983: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2987: LD_EXP 31
2991: PPUSH
2992: CALL_OW 274
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 400
3002: PUSH
3003: LD_INT 320
3005: PUSH
3006: LD_INT 270
3008: PUSH
3009: LD_INT 230
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: PUSH
3018: LD_OWVAR 67
3022: ARRAY
3023: PPUSH
3024: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
3028: LD_EXP 31
3032: PPUSH
3033: CALL_OW 274
3037: PPUSH
3038: LD_INT 2
3040: PPUSH
3041: LD_INT 130
3043: PPUSH
3044: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 30
3060: PUSH
3061: LD_INT 3
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: IFFALSE 3324
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3078: LD_ADDR_VAR 0 4
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_INT 1
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PUSH
3093: LD_INT 30
3095: PUSH
3096: LD_INT 3
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PPUSH
3107: CALL_OW 69
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3116: LD_ADDR_VAR 0 6
3120: PUSH
3121: LD_VAR 0 4
3125: PPUSH
3126: CALL_OW 250
3130: PPUSH
3131: LD_VAR 0 4
3135: PPUSH
3136: CALL_OW 251
3140: PPUSH
3141: LD_VAR 0 4
3145: PPUSH
3146: CALL_OW 254
3150: PPUSH
3151: CALL 79014 0 3
3155: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3156: LD_ADDR_VAR 0 2
3160: PUSH
3161: LD_INT 19
3163: PUSH
3164: LD_INT 17
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3171: LD_STRING 06_remoteVehs_1
3173: PPUSH
3174: LD_INT 0
3176: PPUSH
3177: CALL_OW 30
3181: IFFALSE 3204
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3183: LD_ADDR_VAR 0 2
3187: PUSH
3188: LD_VAR 0 2
3192: PPUSH
3193: LD_INT 1
3195: PPUSH
3196: LD_INT 22
3198: PPUSH
3199: CALL_OW 2
3203: ST_TO_ADDR
// for i in tmp do
3204: LD_ADDR_VAR 0 3
3208: PUSH
3209: LD_VAR 0 6
3213: PUSH
3214: FOR_IN
3215: IFFALSE 3322
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3217: LD_VAR 0 3
3221: PUSH
3222: LD_INT 1
3224: ARRAY
3225: PPUSH
3226: LD_VAR 0 3
3230: PUSH
3231: LD_INT 2
3233: ARRAY
3234: PPUSH
3235: CALL_OW 428
3239: PUSH
3240: LD_INT 0
3242: EQUAL
3243: IFFALSE 3320
// begin bc_type := blist [ 1 ] ;
3245: LD_ADDR_OWVAR 42
3249: PUSH
3250: LD_VAR 0 2
3254: PUSH
3255: LD_INT 1
3257: ARRAY
3258: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3259: LD_VAR 0 3
3263: PUSH
3264: LD_INT 1
3266: ARRAY
3267: PPUSH
3268: LD_VAR 0 3
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: LD_VAR 0 3
3281: PUSH
3282: LD_INT 3
3284: ARRAY
3285: PPUSH
3286: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3290: LD_ADDR_VAR 0 2
3294: PUSH
3295: LD_VAR 0 2
3299: PPUSH
3300: LD_INT 1
3302: PPUSH
3303: CALL_OW 3
3307: ST_TO_ADDR
// if blist = 0 then
3308: LD_VAR 0 2
3312: PUSH
3313: LD_INT 0
3315: EQUAL
3316: IFFALSE 3320
// break ;
3318: GO 3322
// end ;
3320: GO 3214
3322: POP
3323: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3324: LD_STRING 06_remoteVehs_1
3326: PPUSH
3327: LD_INT 0
3329: PPUSH
3330: CALL_OW 30
3334: IFFALSE 3793
// begin bc_type := b_control_tower ;
3336: LD_ADDR_OWVAR 42
3340: PUSH
3341: LD_INT 36
3343: ST_TO_ADDR
// bc_level := 4 ;
3344: LD_ADDR_OWVAR 43
3348: PUSH
3349: LD_INT 4
3351: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3352: LD_EXP 31
3356: PPUSH
3357: LD_INT 36
3359: PPUSH
3360: LD_INT 62
3362: PPUSH
3363: LD_INT 12
3365: PPUSH
3366: LD_INT 3
3368: PPUSH
3369: CALL 56902 0 5
3373: IFFALSE 3400
3375: PUSH
3376: LD_INT 92
3378: PUSH
3379: LD_INT 62
3381: PUSH
3382: LD_INT 12
3384: PUSH
3385: LD_INT 3
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: PPUSH
3394: CALL_OW 69
3398: NOT
3399: AND
3400: IFFALSE 3417
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3402: LD_INT 62
3404: PPUSH
3405: LD_INT 12
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: CALL_OW 47
3415: GO 3583
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3417: LD_EXP 31
3421: PPUSH
3422: LD_INT 36
3424: PPUSH
3425: LD_INT 37
3427: PPUSH
3428: LD_INT 18
3430: PPUSH
3431: LD_INT 2
3433: PPUSH
3434: CALL 56902 0 5
3438: IFFALSE 3465
3440: PUSH
3441: LD_INT 92
3443: PUSH
3444: LD_INT 37
3446: PUSH
3447: LD_INT 18
3449: PUSH
3450: LD_INT 3
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: NOT
3464: AND
3465: IFFALSE 3482
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3467: LD_INT 37
3469: PPUSH
3470: LD_INT 18
3472: PPUSH
3473: LD_INT 2
3475: PPUSH
3476: CALL_OW 47
3480: GO 3583
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3482: LD_EXP 31
3486: PPUSH
3487: LD_INT 36
3489: PPUSH
3490: LD_INT 66
3492: PPUSH
3493: LD_INT 14
3495: PPUSH
3496: LD_INT 4
3498: PPUSH
3499: CALL 56902 0 5
3503: IFFALSE 3530
3505: PUSH
3506: LD_INT 92
3508: PUSH
3509: LD_INT 66
3511: PUSH
3512: LD_INT 14
3514: PUSH
3515: LD_INT 3
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 69
3528: NOT
3529: AND
3530: IFFALSE 3547
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3532: LD_INT 66
3534: PPUSH
3535: LD_INT 14
3537: PPUSH
3538: LD_INT 4
3540: PPUSH
3541: CALL_OW 47
3545: GO 3583
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3547: LD_EXP 31
3551: PPUSH
3552: LD_INT 36
3554: PPUSH
3555: LD_INT 74
3557: PPUSH
3558: LD_INT 26
3560: PPUSH
3561: LD_INT 4
3563: PPUSH
3564: CALL 56902 0 5
3568: IFFALSE 3583
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3570: LD_INT 74
3572: PPUSH
3573: LD_INT 26
3575: PPUSH
3576: LD_INT 4
3578: PPUSH
3579: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3583: LD_INT 22
3585: PUSH
3586: LD_INT 1
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 30
3595: PUSH
3596: LD_INT 36
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PPUSH
3607: CALL_OW 69
3611: NOT
3612: IFFALSE 3616
// exit ;
3614: GO 4141
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3616: LD_ADDR_VAR 0 3
3620: PUSH
3621: DOUBLE
3622: LD_INT 1
3624: DEC
3625: ST_TO_ADDR
3626: LD_INT 3
3628: PUSH
3629: LD_INT 2
3631: PUSH
3632: LD_INT 2
3634: PUSH
3635: LD_INT 2
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: PUSH
3644: LD_OWVAR 67
3648: ARRAY
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3791
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3653: LD_ADDR_OWVAR 37
3657: PUSH
3658: LD_INT 3
3660: PUSH
3661: LD_INT 2
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 1
3670: PPUSH
3671: LD_INT 2
3673: PPUSH
3674: CALL_OW 12
3678: ARRAY
3679: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3680: LD_ADDR_OWVAR 39
3684: PUSH
3685: LD_INT 1
3687: PUSH
3688: LD_INT 2
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 1
3697: PPUSH
3698: LD_INT 2
3700: PPUSH
3701: CALL_OW 12
3705: ARRAY
3706: ST_TO_ADDR
// vc_control := control_remote ;
3707: LD_ADDR_OWVAR 38
3711: PUSH
3712: LD_INT 2
3714: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3715: LD_ADDR_OWVAR 40
3719: PUSH
3720: LD_INT 4
3722: PUSH
3723: LD_INT 3
3725: PUSH
3726: LD_INT 5
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 3
3739: PPUSH
3740: CALL_OW 12
3744: ARRAY
3745: ST_TO_ADDR
// veh := CreateVehicle ;
3746: LD_ADDR_VAR 0 5
3750: PUSH
3751: CALL_OW 45
3755: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3756: LD_VAR 0 5
3760: PPUSH
3761: LD_INT 3
3763: PPUSH
3764: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3768: LD_VAR 0 5
3772: PPUSH
3773: LD_INT 61
3775: PPUSH
3776: LD_INT 23
3778: PPUSH
3779: LD_INT 9
3781: PPUSH
3782: LD_INT 0
3784: PPUSH
3785: CALL_OW 50
// end ;
3789: GO 3650
3791: POP
3792: POP
// end ; if gammaCommander = 1 then
3793: LD_EXP 13
3797: PUSH
3798: LD_INT 1
3800: EQUAL
3801: IFFALSE 3978
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: DOUBLE
3809: LD_INT 1
3811: DEC
3812: ST_TO_ADDR
3813: LD_INT 3
3815: PUSH
3816: LD_INT 3
3818: PUSH
3819: LD_INT 2
3821: PUSH
3822: LD_INT 2
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: LD_OWVAR 67
3835: ARRAY
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3974
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3840: LD_ADDR_OWVAR 37
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: LD_INT 2
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 2
3860: PPUSH
3861: CALL_OW 12
3865: ARRAY
3866: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3867: LD_ADDR_OWVAR 39
3871: PUSH
3872: LD_INT 1
3874: PUSH
3875: LD_INT 2
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 12
3892: ARRAY
3893: ST_TO_ADDR
// vc_control := control_manual ;
3894: LD_ADDR_OWVAR 38
3898: PUSH
3899: LD_INT 1
3901: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3902: LD_ADDR_OWVAR 40
3906: PUSH
3907: LD_INT 4
3909: PUSH
3910: LD_INT 5
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PUSH
3917: LD_INT 1
3919: PPUSH
3920: LD_INT 2
3922: PPUSH
3923: CALL_OW 12
3927: ARRAY
3928: ST_TO_ADDR
// veh := CreateVehicle ;
3929: LD_ADDR_VAR 0 5
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3939: LD_VAR 0 5
3943: PPUSH
3944: LD_INT 3
3946: PPUSH
3947: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3951: LD_VAR 0 5
3955: PPUSH
3956: LD_INT 61
3958: PPUSH
3959: LD_INT 23
3961: PPUSH
3962: LD_INT 9
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 50
// end ;
3972: GO 3837
3974: POP
3975: POP
// end else
3976: GO 4141
// if gammaCommander = 2 then
3978: LD_EXP 13
3982: PUSH
3983: LD_INT 2
3985: EQUAL
3986: IFFALSE 4141
// begin bc_type := b_bunker ;
3988: LD_ADDR_OWVAR 42
3992: PUSH
3993: LD_INT 32
3995: ST_TO_ADDR
// bc_level := 6 ;
3996: LD_ADDR_OWVAR 43
4000: PUSH
4001: LD_INT 6
4003: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
4004: LD_ADDR_VAR 0 4
4008: PUSH
4009: LD_INT 67
4011: PPUSH
4012: LD_INT 36
4014: PPUSH
4015: LD_INT 5
4017: PPUSH
4018: CALL_OW 47
4022: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
4023: LD_VAR 0 4
4027: PPUSH
4028: LD_INT 4
4030: PPUSH
4031: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
4035: LD_ADDR_VAR 0 4
4039: PUSH
4040: LD_INT 61
4042: PPUSH
4043: LD_INT 40
4045: PPUSH
4046: LD_INT 5
4048: PPUSH
4049: CALL_OW 47
4053: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
4054: LD_VAR 0 4
4058: PPUSH
4059: LD_INT 5
4061: PPUSH
4062: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
4066: LD_ADDR_OWVAR 37
4070: PUSH
4071: LD_INT 2
4073: ST_TO_ADDR
// vc_engine := engine_combustion ;
4074: LD_ADDR_OWVAR 39
4078: PUSH
4079: LD_INT 1
4081: ST_TO_ADDR
// vc_control := control_manual ;
4082: LD_ADDR_OWVAR 38
4086: PUSH
4087: LD_INT 1
4089: ST_TO_ADDR
// vc_weapon := us_crane ;
4090: LD_ADDR_OWVAR 40
4094: PUSH
4095: LD_INT 13
4097: ST_TO_ADDR
// veh := CreateVehicle ;
4098: LD_ADDR_VAR 0 5
4102: PUSH
4103: CALL_OW 45
4107: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4108: LD_VAR 0 5
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_INT 61
4127: PPUSH
4128: LD_INT 23
4130: PPUSH
4131: LD_INT 9
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: CALL_OW 50
// end ; end ;
4141: LD_VAR 0 1
4145: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4146: LD_INT 0
4148: PPUSH
4149: PPUSH
4150: PPUSH
4151: PPUSH
// uc_side := 1 ;
4152: LD_ADDR_OWVAR 20
4156: PUSH
4157: LD_INT 1
4159: ST_TO_ADDR
// uc_nation := 1 ;
4160: LD_ADDR_OWVAR 21
4164: PUSH
4165: LD_INT 1
4167: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4168: LD_ADDR_EXP 26
4172: PUSH
4173: LD_STRING Denis
4175: PPUSH
4176: LD_EXP 1
4180: NOT
4181: PPUSH
4182: LD_STRING 06c_
4184: PPUSH
4185: CALL 43204 0 3
4189: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4190: LD_EXP 26
4194: PPUSH
4195: LD_INT 4
4197: PPUSH
4198: LD_INT 0
4200: PPUSH
4201: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4205: LD_ADDR_EXP 27
4209: PUSH
4210: LD_STRING Joan
4212: PPUSH
4213: LD_EXP 1
4217: NOT
4218: PPUSH
4219: LD_STRING 06c_
4221: PPUSH
4222: CALL 43204 0 3
4226: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4227: LD_EXP 27
4231: PPUSH
4232: LD_INT 4
4234: PPUSH
4235: LD_INT 0
4237: PPUSH
4238: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4242: LD_ADDR_EXP 24
4246: PUSH
4247: LD_STRING Mike
4249: PPUSH
4250: LD_EXP 1
4254: NOT
4255: PPUSH
4256: LD_STRING 06c_
4258: PPUSH
4259: CALL 43204 0 3
4263: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4264: LD_EXP 24
4268: PPUSH
4269: LD_INT 4
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4279: LD_STRING GladstoneIn07
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 30
4289: NOT
4290: IFFALSE 4372
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4292: LD_ADDR_EXP 21
4296: PUSH
4297: LD_STRING Gladstone
4299: PPUSH
4300: LD_EXP 1
4304: NOT
4305: PPUSH
4306: LD_STRING 06c_
4308: PPUSH
4309: CALL 43204 0 3
4313: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4314: LD_EXP 21
4318: NOT
4319: IFFALSE 4333
4321: PUSH
4322: LD_STRING GladstoneStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: AND
4333: IFFALSE 4357
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4335: LD_ADDR_EXP 21
4339: PUSH
4340: LD_STRING Gladstone
4342: PPUSH
4343: LD_EXP 1
4347: NOT
4348: PPUSH
4349: LD_STRING 05_
4351: PPUSH
4352: CALL 43204 0 3
4356: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4357: LD_EXP 21
4361: PPUSH
4362: LD_INT 4
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4372: LD_STRING LisaStayInDelta
4374: PPUSH
4375: LD_INT 0
4377: PPUSH
4378: CALL_OW 30
4382: IFFALSE 4418
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4384: LD_ADDR_EXP 19
4388: PUSH
4389: LD_STRING Lisa
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: LD_STRING 05_
4397: PPUSH
4398: CALL 43204 0 3
4402: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4403: LD_EXP 19
4407: PPUSH
4408: LD_INT 4
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4418: LD_STRING BobbyStayInDelta
4420: PPUSH
4421: LD_INT 0
4423: PPUSH
4424: CALL_OW 30
4428: IFFALSE 4464
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4430: LD_ADDR_EXP 17
4434: PUSH
4435: LD_STRING Bobby
4437: PPUSH
4438: LD_INT 1
4440: PPUSH
4441: LD_STRING 05_
4443: PPUSH
4444: CALL 43204 0 3
4448: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4449: LD_EXP 17
4453: PPUSH
4454: LD_INT 4
4456: PPUSH
4457: LD_INT 0
4459: PPUSH
4460: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4464: LD_STRING CyrusStayInDelta
4466: PPUSH
4467: LD_INT 0
4469: PPUSH
4470: CALL_OW 30
4474: IFFALSE 4510
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4476: LD_ADDR_EXP 18
4480: PUSH
4481: LD_STRING Cyrus
4483: PPUSH
4484: LD_INT 1
4486: PPUSH
4487: LD_STRING 05_
4489: PPUSH
4490: CALL 43204 0 3
4494: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4495: LD_EXP 18
4499: PPUSH
4500: LD_INT 4
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4510: LD_STRING BrownStayInDelta
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: CALL_OW 30
4520: IFFALSE 4556
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4522: LD_ADDR_EXP 15
4526: PUSH
4527: LD_STRING Brown
4529: PPUSH
4530: LD_INT 1
4532: PPUSH
4533: LD_STRING 05_
4535: PPUSH
4536: CALL 43204 0 3
4540: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4541: LD_EXP 15
4545: PPUSH
4546: LD_INT 4
4548: PPUSH
4549: LD_INT 0
4551: PPUSH
4552: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4556: LD_STRING DonaldsonStayInDelta
4558: PPUSH
4559: LD_INT 0
4561: PPUSH
4562: CALL_OW 30
4566: IFFALSE 4602
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4568: LD_ADDR_EXP 16
4572: PUSH
4573: LD_STRING Donaldson
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_STRING 05_
4581: PPUSH
4582: CALL 43204 0 3
4586: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4587: LD_EXP 16
4591: PPUSH
4592: LD_INT 4
4594: PPUSH
4595: LD_INT 0
4597: PPUSH
4598: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4602: LD_ADDR_VAR 0 4
4606: PUSH
4607: LD_STRING OthersStayInDelta
4609: PPUSH
4610: CALL_OW 31
4614: ST_TO_ADDR
// if others > 2 then
4615: LD_VAR 0 4
4619: PUSH
4620: LD_INT 2
4622: GREATER
4623: IFFALSE 4686
// begin for j := 1 to 2 do
4625: LD_ADDR_VAR 0 3
4629: PUSH
4630: DOUBLE
4631: LD_INT 1
4633: DEC
4634: ST_TO_ADDR
4635: LD_INT 2
4637: PUSH
4638: FOR_TO
4639: IFFALSE 4682
// begin SetTag ( others [ j ] , 107 ) ;
4641: LD_VAR 0 4
4645: PUSH
4646: LD_VAR 0 3
4650: ARRAY
4651: PPUSH
4652: LD_INT 107
4654: PPUSH
4655: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4659: LD_VAR 0 4
4663: PUSH
4664: LD_VAR 0 3
4668: ARRAY
4669: PPUSH
4670: LD_INT 4
4672: PPUSH
4673: LD_INT 0
4675: PPUSH
4676: CALL_OW 49
// end ;
4680: GO 4638
4682: POP
4683: POP
// end else
4684: GO 4747
// begin for j := 1 to others do
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: DOUBLE
4692: LD_INT 1
4694: DEC
4695: ST_TO_ADDR
4696: LD_VAR 0 4
4700: PUSH
4701: FOR_TO
4702: IFFALSE 4745
// begin SetTag ( others [ i ] , 107 ) ;
4704: LD_VAR 0 4
4708: PUSH
4709: LD_VAR 0 2
4713: ARRAY
4714: PPUSH
4715: LD_INT 107
4717: PPUSH
4718: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4722: LD_VAR 0 4
4726: PUSH
4727: LD_VAR 0 3
4731: ARRAY
4732: PPUSH
4733: LD_INT 4
4735: PPUSH
4736: LD_INT 0
4738: PPUSH
4739: CALL_OW 49
// end ;
4743: GO 4701
4745: POP
4746: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4747: LD_ADDR_VAR 0 4
4751: PUSH
4752: LD_STRING 06_other_apemans
4754: PPUSH
4755: CALL_OW 31
4759: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4760: LD_VAR 0 4
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: LD_INT 2
4770: PUSH
4771: LD_INT 2
4773: PUSH
4774: LD_INT 1
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: PUSH
4783: LD_OWVAR 67
4787: ARRAY
4788: GREATEREQUAL
4789: IFFALSE 4822
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4791: LD_ADDR_VAR 0 3
4795: PUSH
4796: LD_INT 3
4798: PUSH
4799: LD_INT 2
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: LD_OWVAR 67
4818: ARRAY
4819: ST_TO_ADDR
4820: GO 4832
// j := others ;
4822: LD_ADDR_VAR 0 3
4826: PUSH
4827: LD_VAR 0 4
4831: ST_TO_ADDR
// for i := 1 to j do
4832: LD_ADDR_VAR 0 2
4836: PUSH
4837: DOUBLE
4838: LD_INT 1
4840: DEC
4841: ST_TO_ADDR
4842: LD_VAR 0 3
4846: PUSH
4847: FOR_TO
4848: IFFALSE 4873
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4850: LD_VAR 0 4
4854: PUSH
4855: LD_VAR 0 2
4859: ARRAY
4860: PPUSH
4861: LD_INT 4
4863: PPUSH
4864: LD_INT 0
4866: PPUSH
4867: CALL_OW 49
4871: GO 4847
4873: POP
4874: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4875: LD_INT 4
4877: PPUSH
4878: LD_INT 22
4880: PUSH
4881: LD_INT 1
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 1
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 70
4906: PPUSH
4907: LD_INT 53
4909: PPUSH
4910: LD_INT 19
4912: PPUSH
4913: CALL_OW 111
// end ;
4917: LD_VAR 0 1
4921: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
4926: PPUSH
4927: PPUSH
4928: PPUSH
4929: PPUSH
4930: PPUSH
4931: PPUSH
4932: PPUSH
4933: PPUSH
4934: PPUSH
4935: PPUSH
4936: PPUSH
4937: PPUSH
// prefix := 07c_ ;
4938: LD_ADDR_VAR 0 10
4942: PUSH
4943: LD_STRING 07c_
4945: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4946: LD_ADDR_VAR 0 8
4950: PUSH
4951: LD_STRING 07_vehicles
4953: PPUSH
4954: EMPTY
4955: PPUSH
4956: CALL_OW 30
4960: ST_TO_ADDR
// if not vehicles and debug then
4961: LD_VAR 0 8
4965: NOT
4966: IFFALSE 4974
4968: PUSH
4969: LD_EXP 1
4973: AND
4974: IFFALSE 5002
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4976: LD_ADDR_VAR 0 8
4980: PUSH
4981: LD_INT 2
4983: PUSH
4984: LD_INT 1
4986: PUSH
4987: LD_INT 1
4989: PUSH
4990: LD_INT 4
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: ST_TO_ADDR
// if not vehicles then
5002: LD_VAR 0 8
5006: NOT
5007: IFFALSE 5064
// begin area := westGammaSupportArea ;
5009: LD_ADDR_VAR 0 11
5013: PUSH
5014: LD_INT 16
5016: ST_TO_ADDR
// point := [ 37 , 70 ] ;
5017: LD_ADDR_VAR 0 14
5021: PUSH
5022: LD_INT 37
5024: PUSH
5025: LD_INT 70
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
5032: LD_ADDR_VAR 0 13
5036: PUSH
5037: LD_INT 43
5039: PUSH
5040: LD_INT 67
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: ST_TO_ADDR
// dir := 1 ;
5047: LD_ADDR_VAR 0 12
5051: PUSH
5052: LD_INT 1
5054: ST_TO_ADDR
// wait ( 2 2$00 ) ;
5055: LD_INT 4200
5057: PPUSH
5058: CALL_OW 67
// end else
5062: GO 5110
// begin area := southGammaSupportArea ;
5064: LD_ADDR_VAR 0 11
5068: PUSH
5069: LD_INT 5
5071: ST_TO_ADDR
// point := [ 87 , 147 ] ;
5072: LD_ADDR_VAR 0 14
5076: PUSH
5077: LD_INT 87
5079: PUSH
5080: LD_INT 147
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
5087: LD_ADDR_VAR 0 13
5091: PUSH
5092: LD_INT 74
5094: PUSH
5095: LD_INT 129
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: ST_TO_ADDR
// dir := 0 ;
5102: LD_ADDR_VAR 0 12
5106: PUSH
5107: LD_INT 0
5109: ST_TO_ADDR
// end ; EraseResourceArea ( mat_cans , area ) ;
5110: LD_INT 1
5112: PPUSH
5113: LD_VAR 0 11
5117: PPUSH
5118: CALL_OW 286
// squad := [ ] ;
5122: LD_ADDR_VAR 0 5
5126: PUSH
5127: EMPTY
5128: ST_TO_ADDR
// tmp := [ ] ;
5129: LD_ADDR_VAR 0 6
5133: PUSH
5134: EMPTY
5135: ST_TO_ADDR
// tmpVehs := [ ] ;
5136: LD_ADDR_VAR 0 7
5140: PUSH
5141: EMPTY
5142: ST_TO_ADDR
// uc_side := 1 ;
5143: LD_ADDR_OWVAR 20
5147: PUSH
5148: LD_INT 1
5150: ST_TO_ADDR
// uc_nation := 1 ;
5151: LD_ADDR_OWVAR 21
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// if vehicles then
5159: LD_VAR 0 8
5163: IFFALSE 5385
// begin for i := 1 to vehicles do
5165: LD_ADDR_VAR 0 2
5169: PUSH
5170: DOUBLE
5171: LD_INT 1
5173: DEC
5174: ST_TO_ADDR
5175: LD_VAR 0 8
5179: PUSH
5180: FOR_TO
5181: IFFALSE 5383
// begin if vehicles [ i ] then
5183: LD_VAR 0 8
5187: PUSH
5188: LD_VAR 0 2
5192: ARRAY
5193: IFFALSE 5381
// begin if not vehicles [ i ] [ 1 ] then
5195: LD_VAR 0 8
5199: PUSH
5200: LD_VAR 0 2
5204: ARRAY
5205: PUSH
5206: LD_INT 1
5208: ARRAY
5209: NOT
5210: IFFALSE 5214
// continue ;
5212: GO 5180
// if not vehicles [ i ] [ 2 ] then
5214: LD_VAR 0 8
5218: PUSH
5219: LD_VAR 0 2
5223: ARRAY
5224: PUSH
5225: LD_INT 2
5227: ARRAY
5228: NOT
5229: IFFALSE 5233
// continue ;
5231: GO 5180
// if not vehicles [ i ] [ 3 ] then
5233: LD_VAR 0 8
5237: PUSH
5238: LD_VAR 0 2
5242: ARRAY
5243: PUSH
5244: LD_INT 3
5246: ARRAY
5247: NOT
5248: IFFALSE 5252
// continue ;
5250: GO 5180
// if not vehicles [ i ] [ 4 ] then
5252: LD_VAR 0 8
5256: PUSH
5257: LD_VAR 0 2
5261: ARRAY
5262: PUSH
5263: LD_INT 4
5265: ARRAY
5266: NOT
5267: IFFALSE 5271
// continue ;
5269: GO 5180
// vc_chassis := vehicles [ i ] [ 1 ] ;
5271: LD_ADDR_OWVAR 37
5275: PUSH
5276: LD_VAR 0 8
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: LD_INT 1
5289: ARRAY
5290: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5291: LD_ADDR_OWVAR 39
5295: PUSH
5296: LD_VAR 0 8
5300: PUSH
5301: LD_VAR 0 2
5305: ARRAY
5306: PUSH
5307: LD_INT 2
5309: ARRAY
5310: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5311: LD_ADDR_OWVAR 38
5315: PUSH
5316: LD_VAR 0 8
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PUSH
5327: LD_INT 3
5329: ARRAY
5330: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5331: LD_ADDR_OWVAR 40
5335: PUSH
5336: LD_VAR 0 8
5340: PUSH
5341: LD_VAR 0 2
5345: ARRAY
5346: PUSH
5347: LD_INT 4
5349: ARRAY
5350: ST_TO_ADDR
// veh := CreateVehicle ;
5351: LD_ADDR_VAR 0 9
5355: PUSH
5356: CALL_OW 45
5360: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5361: LD_ADDR_VAR 0 7
5365: PUSH
5366: LD_VAR 0 7
5370: PPUSH
5371: LD_VAR 0 9
5375: PPUSH
5376: CALL 81404 0 2
5380: ST_TO_ADDR
// end ; end ;
5381: GO 5180
5383: POP
5384: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5385: LD_ADDR_EXP 14
5389: PUSH
5390: LD_STRING JMM
5392: PPUSH
5393: LD_EXP 1
5397: NOT
5398: PPUSH
5399: LD_VAR 0 10
5403: PPUSH
5404: CALL 43204 0 3
5408: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5409: LD_EXP 13
5413: PUSH
5414: LD_INT 1
5416: PUSH
5417: LD_INT 3
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: IN
5424: IFFALSE 5433
5426: PUSH
5427: LD_EXP 15
5431: NOT
5432: AND
5433: IFFALSE 5494
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5435: LD_ADDR_EXP 15
5439: PUSH
5440: LD_STRING Brown
5442: PPUSH
5443: LD_EXP 1
5447: NOT
5448: PPUSH
5449: LD_VAR 0 10
5453: PPUSH
5454: CALL 43204 0 3
5458: ST_TO_ADDR
// if Brown then
5459: LD_EXP 15
5463: IFFALSE 5494
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5465: LD_ADDR_VAR 0 6
5469: PUSH
5470: LD_VAR 0 6
5474: PPUSH
5475: LD_VAR 0 6
5479: PUSH
5480: LD_INT 1
5482: PLUS
5483: PPUSH
5484: LD_EXP 15
5488: PPUSH
5489: CALL_OW 1
5493: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5494: LD_EXP 13
5498: PUSH
5499: LD_INT 2
5501: PUSH
5502: LD_INT 3
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: IN
5509: IFFALSE 5518
5511: PUSH
5512: LD_EXP 16
5516: NOT
5517: AND
5518: IFFALSE 5579
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5520: LD_ADDR_EXP 16
5524: PUSH
5525: LD_STRING Donaldson
5527: PPUSH
5528: LD_EXP 1
5532: NOT
5533: PPUSH
5534: LD_VAR 0 10
5538: PPUSH
5539: CALL 43204 0 3
5543: ST_TO_ADDR
// if Donaldson then
5544: LD_EXP 16
5548: IFFALSE 5579
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5550: LD_ADDR_VAR 0 6
5554: PUSH
5555: LD_VAR 0 6
5559: PPUSH
5560: LD_VAR 0 6
5564: PUSH
5565: LD_INT 1
5567: PLUS
5568: PPUSH
5569: LD_EXP 16
5573: PPUSH
5574: CALL_OW 1
5578: ST_TO_ADDR
// end ; if not Bobby then
5579: LD_EXP 17
5583: NOT
5584: IFFALSE 5642
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5586: LD_ADDR_EXP 17
5590: PUSH
5591: LD_STRING Bobby
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_VAR 0 10
5601: PPUSH
5602: CALL 43204 0 3
5606: ST_TO_ADDR
// if Bobby then
5607: LD_EXP 17
5611: IFFALSE 5642
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 6
5627: PUSH
5628: LD_INT 1
5630: PLUS
5631: PPUSH
5632: LD_EXP 17
5636: PPUSH
5637: CALL_OW 1
5641: ST_TO_ADDR
// end ; if not Cyrus then
5642: LD_EXP 18
5646: NOT
5647: IFFALSE 5705
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5649: LD_ADDR_EXP 18
5653: PUSH
5654: LD_STRING Cyrus
5656: PPUSH
5657: LD_INT 1
5659: PPUSH
5660: LD_VAR 0 10
5664: PPUSH
5665: CALL 43204 0 3
5669: ST_TO_ADDR
// if Cyrus then
5670: LD_EXP 18
5674: IFFALSE 5705
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5676: LD_ADDR_VAR 0 6
5680: PUSH
5681: LD_VAR 0 6
5685: PPUSH
5686: LD_VAR 0 6
5690: PUSH
5691: LD_INT 1
5693: PLUS
5694: PPUSH
5695: LD_EXP 18
5699: PPUSH
5700: CALL_OW 1
5704: ST_TO_ADDR
// end ; if not Lisa then
5705: LD_EXP 19
5709: NOT
5710: IFFALSE 5771
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5712: LD_ADDR_EXP 19
5716: PUSH
5717: LD_STRING Lisa
5719: PPUSH
5720: LD_EXP 1
5724: NOT
5725: PPUSH
5726: LD_VAR 0 10
5730: PPUSH
5731: CALL 43204 0 3
5735: ST_TO_ADDR
// if Lisa then
5736: LD_EXP 19
5740: IFFALSE 5771
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5742: LD_ADDR_VAR 0 6
5746: PUSH
5747: LD_VAR 0 6
5751: PPUSH
5752: LD_VAR 0 6
5756: PUSH
5757: LD_INT 1
5759: PLUS
5760: PPUSH
5761: LD_EXP 19
5765: PPUSH
5766: CALL_OW 1
5770: ST_TO_ADDR
// end ; if not Frank then
5771: LD_EXP 20
5775: NOT
5776: IFFALSE 5837
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5778: LD_ADDR_EXP 20
5782: PUSH
5783: LD_STRING Frank
5785: PPUSH
5786: LD_EXP 1
5790: NOT
5791: PPUSH
5792: LD_VAR 0 10
5796: PPUSH
5797: CALL 43204 0 3
5801: ST_TO_ADDR
// if Frank then
5802: LD_EXP 20
5806: IFFALSE 5837
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5808: LD_ADDR_VAR 0 6
5812: PUSH
5813: LD_VAR 0 6
5817: PPUSH
5818: LD_VAR 0 6
5822: PUSH
5823: LD_INT 1
5825: PLUS
5826: PPUSH
5827: LD_EXP 20
5831: PPUSH
5832: CALL_OW 1
5836: ST_TO_ADDR
// end ; if not Kikuchi then
5837: LD_EXP 22
5841: NOT
5842: IFFALSE 5900
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5844: LD_ADDR_EXP 22
5848: PUSH
5849: LD_STRING Kikuchi
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: LD_VAR 0 10
5859: PPUSH
5860: CALL 43204 0 3
5864: ST_TO_ADDR
// if Kikuchi then
5865: LD_EXP 22
5869: IFFALSE 5900
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5871: LD_ADDR_VAR 0 6
5875: PUSH
5876: LD_VAR 0 6
5880: PPUSH
5881: LD_VAR 0 6
5885: PUSH
5886: LD_INT 1
5888: PLUS
5889: PPUSH
5890: LD_EXP 22
5894: PPUSH
5895: CALL_OW 1
5899: ST_TO_ADDR
// end ; if not Gladstone then
5900: LD_EXP 21
5904: NOT
5905: IFFALSE 5966
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5907: LD_ADDR_EXP 21
5911: PUSH
5912: LD_STRING Gladstone
5914: PPUSH
5915: LD_EXP 1
5919: NOT
5920: PPUSH
5921: LD_VAR 0 10
5925: PPUSH
5926: CALL 43204 0 3
5930: ST_TO_ADDR
// if Gladstone then
5931: LD_EXP 21
5935: IFFALSE 5966
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5937: LD_ADDR_VAR 0 6
5941: PUSH
5942: LD_VAR 0 6
5946: PPUSH
5947: LD_VAR 0 6
5951: PUSH
5952: LD_INT 1
5954: PLUS
5955: PPUSH
5956: LD_EXP 21
5960: PPUSH
5961: CALL_OW 1
5965: ST_TO_ADDR
// end ; if not Khatam then
5966: LD_EXP 23
5970: NOT
5971: IFFALSE 6029
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5973: LD_ADDR_EXP 23
5977: PUSH
5978: LD_STRING Khatam
5980: PPUSH
5981: LD_INT 1
5983: PPUSH
5984: LD_VAR 0 10
5988: PPUSH
5989: CALL 43204 0 3
5993: ST_TO_ADDR
// if Khatam then
5994: LD_EXP 23
5998: IFFALSE 6029
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
6000: LD_ADDR_VAR 0 6
6004: PUSH
6005: LD_VAR 0 6
6009: PPUSH
6010: LD_VAR 0 6
6014: PUSH
6015: LD_INT 1
6017: PLUS
6018: PPUSH
6019: LD_EXP 23
6023: PPUSH
6024: CALL_OW 1
6028: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
6029: LD_ADDR_VAR 0 4
6033: PUSH
6034: LD_STRING 07c_others
6036: PPUSH
6037: CALL_OW 31
6041: ST_TO_ADDR
// squad := others ;
6042: LD_ADDR_VAR 0 5
6046: PUSH
6047: LD_VAR 0 4
6051: ST_TO_ADDR
// if others then
6052: LD_VAR 0 4
6056: IFFALSE 6107
// for i in others do
6058: LD_ADDR_VAR 0 2
6062: PUSH
6063: LD_VAR 0 4
6067: PUSH
6068: FOR_IN
6069: IFFALSE 6105
// begin SetTag ( i , 108 ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_INT 108
6078: PPUSH
6079: CALL_OW 109
// tmp := Join ( tmp , i ) ;
6083: LD_ADDR_VAR 0 6
6087: PUSH
6088: LD_VAR 0 6
6092: PPUSH
6093: LD_VAR 0 2
6097: PPUSH
6098: CALL 81404 0 2
6102: ST_TO_ADDR
// end ;
6103: GO 6068
6105: POP
6106: POP
// if tmp then
6107: LD_VAR 0 6
6111: IFFALSE 6366
// begin tmp := Join ( tmp , JMM ) ;
6113: LD_ADDR_VAR 0 6
6117: PUSH
6118: LD_VAR 0 6
6122: PPUSH
6123: LD_EXP 14
6127: PPUSH
6128: CALL 81404 0 2
6132: ST_TO_ADDR
// for i in tmp do
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_VAR 0 6
6142: PUSH
6143: FOR_IN
6144: IFFALSE 6364
// begin SetDir ( i , dir ) ;
6146: LD_VAR 0 2
6150: PPUSH
6151: LD_VAR 0 12
6155: PPUSH
6156: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
6160: LD_VAR 0 2
6164: PPUSH
6165: CALL_OW 257
6169: PUSH
6170: LD_INT 3
6172: EQUAL
6173: IFFALSE 6181
6175: PUSH
6176: LD_VAR 0 7
6180: AND
6181: IFFALSE 6280
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
6183: LD_VAR 0 7
6187: PUSH
6188: LD_INT 1
6190: ARRAY
6191: PPUSH
6192: LD_INT 0
6194: PPUSH
6195: CALL_OW 233
// repeat wait ( 10 ) ;
6199: LD_INT 10
6201: PPUSH
6202: CALL_OW 67
// until PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6206: LD_VAR 0 7
6210: PUSH
6211: LD_INT 1
6213: ARRAY
6214: PPUSH
6215: LD_VAR 0 14
6219: PUSH
6220: LD_INT 1
6222: ARRAY
6223: PPUSH
6224: LD_VAR 0 14
6228: PUSH
6229: LD_INT 2
6231: ARRAY
6232: PPUSH
6233: LD_INT 0
6235: PPUSH
6236: CALL_OW 48
6240: IFFALSE 6199
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6242: LD_VAR 0 2
6246: PPUSH
6247: LD_VAR 0 7
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: PPUSH
6256: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6260: LD_ADDR_VAR 0 7
6264: PUSH
6265: LD_VAR 0 7
6269: PPUSH
6270: LD_INT 1
6272: PPUSH
6273: CALL_OW 3
6277: ST_TO_ADDR
// end else
6278: GO 6306
// begin repeat wait ( 10 ) ;
6280: LD_INT 10
6282: PPUSH
6283: CALL_OW 67
// until PlaceUnitArea ( i , area , false ) ;
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_VAR 0 11
6296: PPUSH
6297: LD_INT 0
6299: PPUSH
6300: CALL_OW 49
6304: IFFALSE 6280
// end ; ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6306: LD_VAR 0 2
6310: PPUSH
6311: LD_VAR 0 13
6315: PUSH
6316: LD_INT 1
6318: ARRAY
6319: PPUSH
6320: LD_VAR 0 13
6324: PUSH
6325: LD_INT 2
6327: ARRAY
6328: PPUSH
6329: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6333: LD_INT 35
6335: PPUSH
6336: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6340: LD_VAR 0 11
6344: PPUSH
6345: LD_INT 22
6347: PUSH
6348: LD_INT 1
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: PPUSH
6355: CALL_OW 70
6359: NOT
6360: IFFALSE 6333
// end ;
6362: GO 6143
6364: POP
6365: POP
// end ; wait ( 0 0$2 ) ;
6366: LD_INT 70
6368: PPUSH
6369: CALL_OW 67
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6373: LD_EXP 14
6377: PPUSH
6378: LD_VAR 0 13
6382: PUSH
6383: LD_INT 1
6385: ARRAY
6386: PPUSH
6387: LD_VAR 0 13
6391: PUSH
6392: LD_INT 2
6394: ARRAY
6395: PPUSH
6396: CALL_OW 111
// jmmArrival := true ;
6400: LD_ADDR_EXP 8
6404: PUSH
6405: LD_INT 1
6407: ST_TO_ADDR
// end ;
6408: LD_VAR 0 1
6412: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6413: LD_INT 0
6415: PPUSH
6416: PPUSH
6417: PPUSH
6418: PPUSH
6419: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6420: LD_INT 1
6422: PPUSH
6423: LD_INT 17
6425: PPUSH
6426: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6430: LD_INT 2
6432: PPUSH
6433: LD_INT 17
6435: PPUSH
6436: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6440: LD_ADDR_VAR 0 5
6444: PUSH
6445: LD_INT 6
6447: PPUSH
6448: LD_INT 58
6450: PUSH
6451: EMPTY
6452: LIST
6453: PPUSH
6454: CALL_OW 70
6458: ST_TO_ADDR
// if tmp then
6459: LD_VAR 0 5
6463: IFFALSE 6491
// for i in tmp do
6465: LD_ADDR_VAR 0 2
6469: PUSH
6470: LD_VAR 0 5
6474: PUSH
6475: FOR_IN
6476: IFFALSE 6489
// RemoveUnit ( i ) ;
6478: LD_VAR 0 2
6482: PPUSH
6483: CALL_OW 64
6487: GO 6475
6489: POP
6490: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6491: LD_ADDR_VAR 0 5
6495: PUSH
6496: LD_INT 6
6498: PPUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 21
6504: PUSH
6505: LD_INT 3
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PPUSH
6516: CALL_OW 70
6520: ST_TO_ADDR
// if tmp then
6521: LD_VAR 0 5
6525: IFFALSE 6549
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6527: LD_VAR 0 5
6531: PPUSH
6532: LD_INT 33
6534: PPUSH
6535: LD_INT 39
6537: PPUSH
6538: CALL_OW 111
// wait ( 0 0$3 ) ;
6542: LD_INT 105
6544: PPUSH
6545: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6549: LD_INT 70
6551: PPUSH
6552: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6556: LD_INT 6
6558: PPUSH
6559: LD_INT 50
6561: PUSH
6562: EMPTY
6563: LIST
6564: PPUSH
6565: CALL_OW 70
6569: NOT
6570: IFFALSE 6549
// uc_side := 4 ;
6572: LD_ADDR_OWVAR 20
6576: PUSH
6577: LD_INT 4
6579: ST_TO_ADDR
// uc_nation := 1 ;
6580: LD_ADDR_OWVAR 21
6584: PUSH
6585: LD_INT 1
6587: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6588: LD_ADDR_EXP 28
6592: PUSH
6593: LD_STRING Sikorski
6595: PPUSH
6596: LD_INT 0
6598: PPUSH
6599: LD_STRING 
6601: PPUSH
6602: CALL 43204 0 3
6606: ST_TO_ADDR
// vc_engine := engine_combustion ;
6607: LD_ADDR_OWVAR 39
6611: PUSH
6612: LD_INT 1
6614: ST_TO_ADDR
// vc_control := control_manual ;
6615: LD_ADDR_OWVAR 38
6619: PUSH
6620: LD_INT 1
6622: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6623: LD_ADDR_OWVAR 40
6627: PUSH
6628: LD_INT 6
6630: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6631: LD_ADDR_OWVAR 37
6635: PUSH
6636: LD_INT 4
6638: ST_TO_ADDR
// veh := CreateVehicle ;
6639: LD_ADDR_VAR 0 4
6643: PUSH
6644: CALL_OW 45
6648: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6649: LD_VAR 0 4
6653: PPUSH
6654: LD_INT 3
6656: PPUSH
6657: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6661: LD_VAR 0 4
6665: PPUSH
6666: LD_INT 4
6668: NEG
6669: PPUSH
6670: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6674: LD_VAR 0 4
6678: PPUSH
6679: LD_INT 70
6681: PPUSH
6682: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6686: LD_VAR 0 4
6690: PPUSH
6691: LD_INT 6
6693: PPUSH
6694: LD_INT 0
6696: PPUSH
6697: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6701: LD_EXP 28
6705: PPUSH
6706: LD_VAR 0 4
6710: PPUSH
6711: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6715: LD_EXP 28
6719: PPUSH
6720: LD_INT 37
6722: PPUSH
6723: LD_INT 30
6725: PPUSH
6726: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6730: LD_INT 10
6732: PPUSH
6733: CALL_OW 67
// InitHc_All ( ) ;
6737: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6741: LD_ADDR_VAR 0 2
6745: PUSH
6746: DOUBLE
6747: LD_INT 1
6749: DEC
6750: ST_TO_ADDR
6751: LD_INT 3
6753: PUSH
6754: LD_INT 2
6756: PUSH
6757: LD_INT 2
6759: PUSH
6760: LD_INT 2
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: PUSH
6769: LD_OWVAR 67
6773: ARRAY
6774: PUSH
6775: FOR_TO
6776: IFFALSE 6911
// begin repeat wait ( 0 0$2 ) ;
6778: LD_INT 70
6780: PPUSH
6781: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6785: LD_INT 6
6787: PPUSH
6788: LD_INT 50
6790: PUSH
6791: EMPTY
6792: LIST
6793: PPUSH
6794: CALL_OW 70
6798: NOT
6799: IFFALSE 6778
// uc_side := 4 ;
6801: LD_ADDR_OWVAR 20
6805: PUSH
6806: LD_INT 4
6808: ST_TO_ADDR
// uc_nation := 1 ;
6809: LD_ADDR_OWVAR 21
6813: PUSH
6814: LD_INT 1
6816: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6817: LD_INT 0
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: LD_INT 4
6825: PPUSH
6826: LD_INT 7
6828: PPUSH
6829: CALL_OW 12
6833: PPUSH
6834: CALL_OW 380
// un := CreateHuman ;
6838: LD_ADDR_VAR 0 3
6842: PUSH
6843: CALL_OW 44
6847: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6848: LD_VAR 0 3
6852: PPUSH
6853: LD_INT 3
6855: PPUSH
6856: CALL_OW 233
// SetTag ( un , 101 ) ;
6860: LD_VAR 0 3
6864: PPUSH
6865: LD_INT 101
6867: PPUSH
6868: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6872: LD_VAR 0 3
6876: PPUSH
6877: LD_INT 6
6879: PPUSH
6880: LD_INT 0
6882: PPUSH
6883: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6887: LD_VAR 0 3
6891: PPUSH
6892: LD_INT 25
6894: PPUSH
6895: LD_INT 27
6897: PPUSH
6898: CALL_OW 111
// wait ( 0 0$1 ) ;
6902: LD_INT 35
6904: PPUSH
6905: CALL_OW 67
// end ;
6909: GO 6775
6911: POP
6912: POP
// repeat wait ( 0 0$2 ) ;
6913: LD_INT 70
6915: PPUSH
6916: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6920: LD_ADDR_VAR 0 2
6924: PUSH
6925: LD_INT 22
6927: PUSH
6928: LD_INT 4
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 25
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 69
6953: PUSH
6954: FOR_IN
6955: IFFALSE 7018
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6957: LD_VAR 0 2
6961: PPUSH
6962: LD_INT 17
6964: PPUSH
6965: LD_INT 22
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: LD_INT 58
6980: PUSH
6981: EMPTY
6982: LIST
6983: PUSH
6984: LD_INT 33
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PPUSH
7003: CALL_OW 70
7007: PUSH
7008: LD_INT 1
7010: ARRAY
7011: PPUSH
7012: CALL_OW 115
7016: GO 6954
7018: POP
7019: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
7020: LD_INT 17
7022: PPUSH
7023: LD_INT 22
7025: PUSH
7026: LD_INT 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_INT 58
7038: PUSH
7039: EMPTY
7040: LIST
7041: PUSH
7042: LD_INT 33
7044: PUSH
7045: LD_INT 2
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 70
7065: NOT
7066: IFFALSE 6913
// for i := 1 to 2 do
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: DOUBLE
7074: LD_INT 1
7076: DEC
7077: ST_TO_ADDR
7078: LD_INT 2
7080: PUSH
7081: FOR_TO
7082: IFFALSE 7194
// begin uc_side := 4 ;
7084: LD_ADDR_OWVAR 20
7088: PUSH
7089: LD_INT 4
7091: ST_TO_ADDR
// uc_nation := 1 ;
7092: LD_ADDR_OWVAR 21
7096: PUSH
7097: LD_INT 1
7099: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
7100: LD_INT 0
7102: PPUSH
7103: LD_INT 4
7105: PPUSH
7106: LD_INT 3
7108: PPUSH
7109: LD_INT 5
7111: PPUSH
7112: CALL_OW 12
7116: PPUSH
7117: CALL_OW 380
// un := CreateHuman ;
7121: LD_ADDR_VAR 0 3
7125: PUSH
7126: CALL_OW 44
7130: ST_TO_ADDR
// SetDir ( un , 3 ) ;
7131: LD_VAR 0 3
7135: PPUSH
7136: LD_INT 3
7138: PPUSH
7139: CALL_OW 233
// SetTag ( un , 101 ) ;
7143: LD_VAR 0 3
7147: PPUSH
7148: LD_INT 101
7150: PPUSH
7151: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
7155: LD_VAR 0 3
7159: PPUSH
7160: LD_INT 6
7162: PPUSH
7163: LD_INT 0
7165: PPUSH
7166: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
7170: LD_VAR 0 3
7174: PPUSH
7175: LD_INT 25
7177: PPUSH
7178: LD_INT 27
7180: PPUSH
7181: CALL_OW 111
// wait ( 0 0$1 ) ;
7185: LD_INT 35
7187: PPUSH
7188: CALL_OW 67
// end ;
7192: GO 7081
7194: POP
7195: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: DOUBLE
7202: LD_INT 1
7204: DEC
7205: ST_TO_ADDR
7206: LD_INT 5
7208: PUSH
7209: LD_INT 4
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 3
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: LD_OWVAR 67
7228: ARRAY
7229: PUSH
7230: FOR_TO
7231: IFFALSE 7496
// begin repeat wait ( 0 0$2 ) ;
7233: LD_INT 70
7235: PPUSH
7236: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7240: LD_INT 6
7242: PPUSH
7243: LD_INT 50
7245: PUSH
7246: EMPTY
7247: LIST
7248: PPUSH
7249: CALL_OW 70
7253: NOT
7254: IFFALSE 7233
// uc_side := 4 ;
7256: LD_ADDR_OWVAR 20
7260: PUSH
7261: LD_INT 4
7263: ST_TO_ADDR
// uc_nation := 1 ;
7264: LD_ADDR_OWVAR 21
7268: PUSH
7269: LD_INT 1
7271: ST_TO_ADDR
// vc_engine := engine_combustion ;
7272: LD_ADDR_OWVAR 39
7276: PUSH
7277: LD_INT 1
7279: ST_TO_ADDR
// vc_control := control_manual ;
7280: LD_ADDR_OWVAR 38
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7288: LD_ADDR_OWVAR 40
7292: PUSH
7293: LD_INT 5
7295: PUSH
7296: LD_INT 7
7298: PUSH
7299: LD_INT 5
7301: PUSH
7302: LD_INT 4
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: PUSH
7311: LD_VAR 0 2
7315: PUSH
7316: LD_INT 4
7318: MOD
7319: PUSH
7320: LD_INT 1
7322: PLUS
7323: ARRAY
7324: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7325: LD_ADDR_OWVAR 37
7329: PUSH
7330: LD_INT 3
7332: PUSH
7333: LD_INT 3
7335: PUSH
7336: LD_INT 4
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: PUSH
7348: LD_VAR 0 2
7352: PUSH
7353: LD_INT 4
7355: MOD
7356: PUSH
7357: LD_INT 1
7359: PLUS
7360: ARRAY
7361: ST_TO_ADDR
// veh := CreateVehicle ;
7362: LD_ADDR_VAR 0 4
7366: PUSH
7367: CALL_OW 45
7371: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7372: LD_VAR 0 4
7376: PPUSH
7377: LD_INT 3
7379: PPUSH
7380: CALL_OW 233
// SetTag ( veh , 0 ) ;
7384: LD_VAR 0 4
7388: PPUSH
7389: LD_INT 0
7391: PPUSH
7392: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7396: LD_VAR 0 4
7400: PPUSH
7401: LD_INT 70
7403: PPUSH
7404: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7408: LD_VAR 0 4
7412: PPUSH
7413: LD_INT 6
7415: PPUSH
7416: LD_INT 0
7418: PPUSH
7419: CALL_OW 49
// InitHc ;
7423: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7427: LD_INT 0
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: LD_INT 4
7435: PPUSH
7436: LD_INT 7
7438: PPUSH
7439: CALL_OW 12
7443: PPUSH
7444: CALL_OW 380
// un := CreateHuman ;
7448: LD_ADDR_VAR 0 3
7452: PUSH
7453: CALL_OW 44
7457: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7458: LD_VAR 0 3
7462: PPUSH
7463: LD_VAR 0 4
7467: PPUSH
7468: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7472: LD_VAR 0 3
7476: PPUSH
7477: LD_INT 30
7479: PPUSH
7480: LD_INT 22
7482: PPUSH
7483: CALL_OW 111
// wait ( 0 0$3 ) ;
7487: LD_INT 105
7489: PPUSH
7490: CALL_OW 67
// end ;
7494: GO 7230
7496: POP
7497: POP
// wait ( 0 0$10 ) ;
7498: LD_INT 350
7500: PPUSH
7501: CALL_OW 67
// end ;
7505: LD_VAR 0 1
7509: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7510: LD_INT 0
7512: PPUSH
7513: PPUSH
7514: PPUSH
7515: PPUSH
// gammaBase := [ ] ;
7516: LD_ADDR_VAR 0 4
7520: PUSH
7521: EMPTY
7522: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7523: LD_ADDR_VAR 0 5
7527: PUSH
7528: LD_VAR 0 1
7532: PPUSH
7533: LD_INT 22
7535: PUSH
7536: LD_INT 1
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 21
7545: PUSH
7546: LD_INT 3
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: LD_INT 50
7555: PUSH
7556: EMPTY
7557: LIST
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: PPUSH
7564: CALL_OW 70
7568: ST_TO_ADDR
// for i in buildings do
7569: LD_ADDR_VAR 0 3
7573: PUSH
7574: LD_VAR 0 5
7578: PUSH
7579: FOR_IN
7580: IFFALSE 8017
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7582: LD_VAR 0 3
7586: PPUSH
7587: CALL_OW 266
7591: PUSH
7592: LD_INT 6
7594: PUSH
7595: LD_INT 7
7597: PUSH
7598: LD_INT 8
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: IN
7606: IFFALSE 7720
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7608: LD_ADDR_VAR 0 4
7612: PUSH
7613: LD_VAR 0 4
7617: PUSH
7618: LD_VAR 0 3
7622: PPUSH
7623: CALL_OW 266
7627: PUSH
7628: LD_VAR 0 3
7632: PPUSH
7633: CALL_OW 250
7637: PUSH
7638: LD_VAR 0 3
7642: PPUSH
7643: CALL_OW 251
7647: PUSH
7648: LD_VAR 0 3
7652: PPUSH
7653: CALL_OW 254
7657: PUSH
7658: LD_VAR 0 3
7662: PPUSH
7663: CALL_OW 267
7667: PUSH
7668: LD_VAR 0 3
7672: PPUSH
7673: CALL_OW 248
7677: PUSH
7678: LD_VAR 0 3
7682: PPUSH
7683: LD_INT 1
7685: PPUSH
7686: CALL_OW 268
7690: PUSH
7691: LD_VAR 0 3
7695: PPUSH
7696: LD_INT 2
7698: PPUSH
7699: CALL_OW 268
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: ADD
7717: ST_TO_ADDR
7718: GO 8015
// if GetBType ( i ) = b_bunker then
7720: LD_VAR 0 3
7724: PPUSH
7725: CALL_OW 266
7729: PUSH
7730: LD_INT 32
7732: EQUAL
7733: IFFALSE 7830
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7735: LD_ADDR_VAR 0 4
7739: PUSH
7740: LD_VAR 0 4
7744: PUSH
7745: LD_VAR 0 3
7749: PPUSH
7750: CALL_OW 266
7754: PUSH
7755: LD_VAR 0 3
7759: PPUSH
7760: CALL_OW 250
7764: PUSH
7765: LD_VAR 0 3
7769: PPUSH
7770: CALL_OW 251
7774: PUSH
7775: LD_VAR 0 3
7779: PPUSH
7780: CALL_OW 254
7784: PUSH
7785: LD_VAR 0 3
7789: PPUSH
7790: CALL_OW 267
7794: PUSH
7795: LD_VAR 0 3
7799: PPUSH
7800: CALL_OW 248
7804: PUSH
7805: LD_VAR 0 3
7809: PPUSH
7810: CALL_OW 269
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: EMPTY
7825: LIST
7826: ADD
7827: ST_TO_ADDR
7828: GO 8015
// if GetBType ( i ) = b_factory then
7830: LD_VAR 0 3
7834: PPUSH
7835: CALL_OW 266
7839: PUSH
7840: LD_INT 3
7842: EQUAL
7843: IFFALSE 7933
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7845: LD_ADDR_VAR 0 4
7849: PUSH
7850: LD_VAR 0 4
7854: PPUSH
7855: LD_INT 1
7857: PPUSH
7858: LD_VAR 0 3
7862: PPUSH
7863: CALL_OW 266
7867: PUSH
7868: LD_VAR 0 3
7872: PPUSH
7873: CALL_OW 250
7877: PUSH
7878: LD_VAR 0 3
7882: PPUSH
7883: CALL_OW 251
7887: PUSH
7888: LD_VAR 0 3
7892: PPUSH
7893: CALL_OW 254
7897: PUSH
7898: LD_VAR 0 3
7902: PPUSH
7903: CALL_OW 267
7907: PUSH
7908: LD_VAR 0 3
7912: PPUSH
7913: CALL_OW 248
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 2
7930: ST_TO_ADDR
7931: GO 8015
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7933: LD_ADDR_VAR 0 4
7937: PUSH
7938: LD_VAR 0 4
7942: PUSH
7943: LD_VAR 0 3
7947: PPUSH
7948: CALL_OW 266
7952: PUSH
7953: LD_VAR 0 3
7957: PPUSH
7958: CALL_OW 250
7962: PUSH
7963: LD_VAR 0 3
7967: PPUSH
7968: CALL_OW 251
7972: PUSH
7973: LD_VAR 0 3
7977: PPUSH
7978: CALL_OW 254
7982: PUSH
7983: LD_VAR 0 3
7987: PPUSH
7988: CALL_OW 267
7992: PUSH
7993: LD_VAR 0 3
7997: PPUSH
7998: CALL_OW 248
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: PUSH
8011: EMPTY
8012: LIST
8013: ADD
8014: ST_TO_ADDR
// end ;
8015: GO 7579
8017: POP
8018: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
8019: LD_VAR 0 4
8023: PPUSH
8024: LD_STRING 08_GammaBase
8026: PPUSH
8027: CALL_OW 39
// end ;
8031: LD_VAR 0 2
8035: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
8036: LD_INT 0
8038: PPUSH
8039: PPUSH
8040: PPUSH
8041: PPUSH
8042: PPUSH
8043: PPUSH
8044: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
8045: LD_ADDR_VAR 0 3
8049: PUSH
8050: LD_INT 17
8052: PPUSH
8053: LD_INT 22
8055: PUSH
8056: LD_INT 1
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: LD_INT 3
8065: PUSH
8066: LD_INT 21
8068: PUSH
8069: LD_INT 3
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 3
8082: PUSH
8083: LD_INT 33
8085: PUSH
8086: LD_INT 2
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: PPUSH
8102: CALL_OW 70
8106: ST_TO_ADDR
// if tmp then
8107: LD_VAR 0 3
8111: IFFALSE 8230
// begin for i in tmp do
8113: LD_ADDR_VAR 0 2
8117: PUSH
8118: LD_VAR 0 3
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8155
// begin SetSide ( i , 4 ) ;
8126: LD_VAR 0 2
8130: PPUSH
8131: LD_INT 4
8133: PPUSH
8134: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
8138: LD_VAR 0 2
8142: PPUSH
8143: LD_INT 42
8145: PPUSH
8146: LD_INT 22
8148: PPUSH
8149: CALL_OW 111
// end ;
8153: GO 8123
8155: POP
8156: POP
// repeat wait ( 0 0$3 ) ;
8157: LD_INT 105
8159: PPUSH
8160: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
8164: LD_VAR 0 3
8168: PPUSH
8169: LD_INT 51
8171: PPUSH
8172: LD_INT 16
8174: PPUSH
8175: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8179: LD_VAR 0 3
8183: PPUSH
8184: LD_INT 95
8186: PUSH
8187: LD_INT 17
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PPUSH
8194: CALL_OW 72
8198: NOT
8199: IFFALSE 8157
// for i in tmp do
8201: LD_ADDR_VAR 0 2
8205: PUSH
8206: LD_VAR 0 3
8210: PUSH
8211: FOR_IN
8212: IFFALSE 8228
// SetSide ( i , 1 ) ;
8214: LD_VAR 0 2
8218: PPUSH
8219: LD_INT 1
8221: PPUSH
8222: CALL_OW 235
8226: GO 8211
8228: POP
8229: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8230: LD_ADDR_VAR 0 3
8234: PUSH
8235: LD_INT 17
8237: PPUSH
8238: LD_INT 22
8240: PUSH
8241: LD_INT 1
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 33
8250: PUSH
8251: LD_INT 2
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 70
8266: ST_TO_ADDR
// if tmp then
8267: LD_VAR 0 3
8271: IFFALSE 8295
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8273: LD_VAR 0 3
8277: PPUSH
8278: LD_INT 40
8280: PPUSH
8281: LD_INT 32
8283: PPUSH
8284: CALL_OW 111
// wait ( 0 0$3 ) ;
8288: LD_INT 105
8290: PPUSH
8291: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8295: LD_ADDR_VAR 0 3
8299: PUSH
8300: LD_INT 17
8302: PPUSH
8303: LD_INT 22
8305: PUSH
8306: LD_INT 1
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 2
8315: PUSH
8316: LD_INT 21
8318: PUSH
8319: LD_INT 2
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: LD_INT 21
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: LIST
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PPUSH
8345: CALL_OW 70
8349: ST_TO_ADDR
// if tmp then
8350: LD_VAR 0 3
8354: IFFALSE 8502
// begin repeat wait ( 0 0$1 ) ;
8356: LD_INT 35
8358: PPUSH
8359: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8363: LD_ADDR_VAR 0 3
8367: PUSH
8368: LD_INT 17
8370: PPUSH
8371: LD_INT 22
8373: PUSH
8374: LD_INT 1
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PUSH
8381: LD_INT 2
8383: PUSH
8384: LD_INT 21
8386: PUSH
8387: LD_INT 2
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: LD_INT 21
8396: PUSH
8397: LD_INT 3
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: LIST
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PPUSH
8413: CALL_OW 70
8417: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8418: LD_ADDR_VAR 0 2
8422: PUSH
8423: LD_INT 22
8425: PUSH
8426: LD_INT 4
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PUSH
8433: LD_INT 2
8435: PUSH
8436: LD_INT 25
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 21
8448: PUSH
8449: LD_INT 2
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 69
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8493
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8473: LD_VAR 0 2
8477: PPUSH
8478: LD_VAR 0 3
8482: PUSH
8483: LD_INT 1
8485: ARRAY
8486: PPUSH
8487: CALL_OW 115
8491: GO 8470
8493: POP
8494: POP
// until not tmp ;
8495: LD_VAR 0 3
8499: NOT
8500: IFFALSE 8356
// end ; wait ( 0 0$2 ) ;
8502: LD_INT 70
8504: PPUSH
8505: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8509: LD_ADDR_VAR 0 3
8513: PUSH
8514: LD_INT 22
8516: PUSH
8517: LD_INT 4
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PPUSH
8524: CALL_OW 69
8528: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 52
8536: PPUSH
8537: LD_INT 54
8539: PPUSH
8540: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8544: LD_VAR 0 3
8548: PPUSH
8549: LD_INT 175
8551: PPUSH
8552: CALL_OW 202
// wait ( 0 0$5 ) ;
8556: LD_INT 175
8558: PPUSH
8559: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8563: LD_VAR 0 3
8567: PPUSH
8568: LD_INT 120
8570: PUSH
8571: LD_INT 101
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PPUSH
8578: CALL_OW 72
8582: PPUSH
8583: LD_INT 42
8585: PPUSH
8586: LD_INT 52
8588: PPUSH
8589: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8593: LD_VAR 0 3
8597: PPUSH
8598: LD_INT 120
8600: PUSH
8601: LD_INT 101
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PPUSH
8608: CALL_OW 72
8612: PPUSH
8613: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8617: LD_VAR 0 3
8621: PPUSH
8622: LD_INT 120
8624: PUSH
8625: LD_INT 101
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 25
8634: PUSH
8635: LD_INT 4
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PPUSH
8646: CALL_OW 72
8650: PPUSH
8651: LD_INT 34
8653: PPUSH
8654: LD_INT 47
8656: PPUSH
8657: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8661: LD_VAR 0 3
8665: PPUSH
8666: LD_INT 120
8668: PUSH
8669: LD_INT 101
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 25
8678: PUSH
8679: LD_INT 4
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 72
8694: PPUSH
8695: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8699: LD_ADDR_VAR 0 7
8703: PUSH
8704: LD_VAR 0 3
8708: PPUSH
8709: LD_INT 21
8711: PUSH
8712: LD_INT 2
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 72
8723: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_INT 81
8731: PUSH
8732: LD_INT 1
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PPUSH
8739: CALL_OW 69
8743: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8744: LD_ADDR_VAR 0 5
8748: PUSH
8749: LD_INT 57
8751: PUSH
8752: LD_INT 66
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 62
8761: PUSH
8762: LD_INT 58
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8773: LD_INT 35
8775: PPUSH
8776: CALL_OW 67
// for i in filter do
8780: LD_ADDR_VAR 0 2
8784: PUSH
8785: LD_VAR 0 7
8789: PUSH
8790: FOR_IN
8791: IFFALSE 9225
// begin if IsDead ( i ) then
8793: LD_VAR 0 2
8797: PPUSH
8798: CALL_OW 301
8802: IFFALSE 8822
// begin filter := filter diff i ;
8804: LD_ADDR_VAR 0 7
8808: PUSH
8809: LD_VAR 0 7
8813: PUSH
8814: LD_VAR 0 2
8818: DIFF
8819: ST_TO_ADDR
// continue ;
8820: GO 8790
// end ; tmp := IsDrivenBy ( i ) ;
8822: LD_ADDR_VAR 0 3
8826: PUSH
8827: LD_VAR 0 2
8831: PPUSH
8832: CALL_OW 311
8836: ST_TO_ADDR
// if not tmp then
8837: LD_VAR 0 3
8841: NOT
8842: IFFALSE 8846
// continue ;
8844: GO 8790
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8846: LD_VAR 0 2
8850: PPUSH
8851: CALL_OW 261
8855: PUSH
8856: LD_INT 30
8858: GREATER
8859: IFFALSE 8876
8861: PUSH
8862: LD_VAR 0 2
8866: PPUSH
8867: CALL_OW 110
8871: PUSH
8872: LD_INT 2
8874: EQUAL
8875: AND
8876: IFFALSE 8892
// SetTag ( i , 0 ) else
8878: LD_VAR 0 2
8882: PPUSH
8883: LD_INT 0
8885: PPUSH
8886: CALL_OW 109
8890: GO 8921
// if GetTag ( i ) = 2 then
8892: LD_VAR 0 2
8896: PPUSH
8897: CALL_OW 110
8901: PUSH
8902: LD_INT 2
8904: EQUAL
8905: IFFALSE 8921
// begin ComMoveUnit ( i , amDepot ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_EXP 31
8916: PPUSH
8917: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8921: LD_VAR 0 2
8925: PPUSH
8926: CALL_OW 256
8930: PUSH
8931: LD_INT 600
8933: GREATEREQUAL
8934: IFFALSE 8948
8936: PUSH
8937: LD_VAR 0 2
8941: PPUSH
8942: CALL_OW 110
8946: NOT
8947: AND
8948: IFFALSE 8974
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8950: LD_VAR 0 2
8954: PPUSH
8955: LD_VAR 0 4
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 74
8969: PPUSH
8970: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8974: LD_VAR 0 2
8978: PPUSH
8979: CALL_OW 256
8983: PUSH
8984: LD_INT 600
8986: LESS
8987: IFFALSE 9001
8989: PUSH
8990: LD_VAR 0 2
8994: PPUSH
8995: CALL_OW 110
8999: NOT
9000: AND
9001: IFFALSE 9077
// begin SetTag ( i , 1 ) ;
9003: LD_VAR 0 2
9007: PPUSH
9008: LD_INT 1
9010: PPUSH
9011: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
9015: LD_ADDR_VAR 0 6
9019: PUSH
9020: LD_VAR 0 2
9024: PPUSH
9025: LD_VAR 0 5
9029: PPUSH
9030: CALL 84920 0 2
9034: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_VAR 0 6
9044: PUSH
9045: LD_INT 1
9047: ARRAY
9048: PPUSH
9049: LD_VAR 0 6
9053: PUSH
9054: LD_INT 2
9056: ARRAY
9057: PPUSH
9058: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
9062: LD_VAR 0 2
9066: PPUSH
9067: LD_INT 40
9069: PPUSH
9070: LD_INT 49
9072: PPUSH
9073: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
9077: LD_VAR 0 2
9081: PPUSH
9082: CALL_OW 110
9086: PUSH
9087: LD_INT 1
9089: EQUAL
9090: IFFALSE 9113
9092: PUSH
9093: LD_VAR 0 2
9097: PPUSH
9098: LD_INT 40
9100: PPUSH
9101: LD_INT 49
9103: PPUSH
9104: CALL_OW 297
9108: PUSH
9109: LD_INT 9
9111: LESS
9112: AND
9113: IFFALSE 9121
9115: PUSH
9116: LD_VAR 0 3
9120: AND
9121: IFFALSE 9223
// begin ComExitVehicle ( tmp ) ;
9123: LD_VAR 0 3
9127: PPUSH
9128: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
9132: LD_VAR 0 3
9136: PPUSH
9137: LD_VAR 0 2
9141: PPUSH
9142: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9146: LD_INT 35
9148: PPUSH
9149: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9153: LD_VAR 0 2
9157: PPUSH
9158: CALL_OW 256
9162: PUSH
9163: LD_INT 1000
9165: EQUAL
9166: IFFALSE 9146
// ComEnterUnit ( tmp , i ) ;
9168: LD_VAR 0 3
9172: PPUSH
9173: LD_VAR 0 2
9177: PPUSH
9178: CALL_OW 120
// if GetFuel ( i ) <= 30 then
9182: LD_VAR 0 2
9186: PPUSH
9187: CALL_OW 261
9191: PUSH
9192: LD_INT 30
9194: LESSEQUAL
9195: IFFALSE 9211
// SetTag ( i , 2 ) else
9197: LD_VAR 0 2
9201: PPUSH
9202: LD_INT 2
9204: PPUSH
9205: CALL_OW 109
9209: GO 9223
// SetTag ( i , 0 ) ;
9211: LD_VAR 0 2
9215: PPUSH
9216: LD_INT 0
9218: PPUSH
9219: CALL_OW 109
// end ; end ;
9223: GO 8790
9225: POP
9226: POP
// until not filter ;
9227: LD_VAR 0 7
9231: NOT
9232: IFFALSE 8773
// end ; end_of_file
9234: LD_VAR 0 1
9238: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9239: LD_INT 0
9241: PPUSH
9242: PPUSH
9243: PPUSH
9244: PPUSH
9245: PPUSH
// uc_side := 3 ;
9246: LD_ADDR_OWVAR 20
9250: PUSH
9251: LD_INT 3
9253: ST_TO_ADDR
// uc_nation := 3 ;
9254: LD_ADDR_OWVAR 21
9258: PUSH
9259: LD_INT 3
9261: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9262: LD_ADDR_EXP 33
9266: PUSH
9267: LD_INT 8
9269: PUSH
9270: LD_INT 11
9272: PUSH
9273: LD_INT 14
9275: PUSH
9276: LD_INT 17
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: PUSH
9285: LD_OWVAR 67
9289: ARRAY
9290: ST_TO_ADDR
// ruMobile := [ ] ;
9291: LD_ADDR_EXP 34
9295: PUSH
9296: EMPTY
9297: ST_TO_ADDR
// ruBuildList := [ ] ;
9298: LD_ADDR_EXP 35
9302: PUSH
9303: EMPTY
9304: ST_TO_ADDR
// russianAttackers := [ ] ;
9305: LD_ADDR_EXP 36
9309: PUSH
9310: EMPTY
9311: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9312: LD_ADDR_VAR 0 5
9316: PUSH
9317: LD_INT 43
9319: PUSH
9320: LD_INT 44
9322: PUSH
9323: LD_INT 46
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: ST_TO_ADDR
// if Difficulty > 2 then
9331: LD_OWVAR 67
9335: PUSH
9336: LD_INT 2
9338: GREATER
9339: IFFALSE 9362
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9341: LD_ADDR_VAR 0 5
9345: PUSH
9346: LD_VAR 0 5
9350: PUSH
9351: LD_INT 45
9353: PUSH
9354: LD_INT 46
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: ADD
9361: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9362: LD_ADDR_EXP 32
9366: PUSH
9367: LD_STRING Borodin
9369: PPUSH
9370: CALL_OW 25
9374: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9375: LD_EXP 32
9379: PPUSH
9380: LD_INT 28
9382: PPUSH
9383: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3500 , 4500 , 5500 , 6000 ] [ Difficulty ] ) ;
9387: LD_INT 28
9389: PPUSH
9390: CALL_OW 274
9394: PPUSH
9395: LD_INT 1
9397: PPUSH
9398: LD_INT 3500
9400: PUSH
9401: LD_INT 4500
9403: PUSH
9404: LD_INT 5500
9406: PUSH
9407: LD_INT 6000
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PUSH
9416: LD_OWVAR 67
9420: ARRAY
9421: PPUSH
9422: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1500 ) ;
9426: LD_INT 28
9428: PPUSH
9429: CALL_OW 274
9433: PPUSH
9434: LD_INT 2
9436: PPUSH
9437: LD_INT 1500
9439: PPUSH
9440: CALL_OW 277
// if Difficulty > 2 then
9444: LD_OWVAR 67
9448: PUSH
9449: LD_INT 2
9451: GREATER
9452: IFFALSE 9576
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9454: LD_ADDR_VAR 0 4
9458: PUSH
9459: LD_INT 99
9461: PUSH
9462: LD_INT 130
9464: PUSH
9465: LD_INT 2
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 121
9475: PUSH
9476: LD_INT 127
9478: PUSH
9479: LD_INT 4
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 117
9489: PUSH
9490: LD_INT 121
9492: PUSH
9493: LD_INT 4
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: LIST
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: LIST
9505: ST_TO_ADDR
// for i in tmp do
9506: LD_ADDR_VAR 0 2
9510: PUSH
9511: LD_VAR 0 4
9515: PUSH
9516: FOR_IN
9517: IFFALSE 9574
// begin bc_type := b_turret ;
9519: LD_ADDR_OWVAR 42
9523: PUSH
9524: LD_INT 33
9526: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9527: LD_ADDR_OWVAR 43
9531: PUSH
9532: LD_INT 2
9534: PUSH
9535: LD_OWVAR 67
9539: PLUS
9540: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9541: LD_VAR 0 2
9545: PUSH
9546: LD_INT 1
9548: ARRAY
9549: PPUSH
9550: LD_VAR 0 2
9554: PUSH
9555: LD_INT 2
9557: ARRAY
9558: PPUSH
9559: LD_VAR 0 2
9563: PUSH
9564: LD_INT 3
9566: ARRAY
9567: PPUSH
9568: CALL_OW 47
// end ;
9572: GO 9516
9574: POP
9575: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9576: LD_ADDR_VAR 0 2
9580: PUSH
9581: LD_INT 22
9583: PUSH
9584: LD_INT 3
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 21
9593: PUSH
9594: LD_INT 3
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 69
9609: PUSH
9610: FOR_IN
9611: IFFALSE 9633
// SetBLevel ( i , 2 + Difficulty ) ;
9613: LD_VAR 0 2
9617: PPUSH
9618: LD_INT 2
9620: PUSH
9621: LD_OWVAR 67
9625: PLUS
9626: PPUSH
9627: CALL_OW 241
9631: GO 9610
9633: POP
9634: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9635: LD_ADDR_VAR 0 4
9639: PUSH
9640: LD_INT 22
9642: PUSH
9643: LD_INT 3
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 2
9652: PUSH
9653: LD_INT 30
9655: PUSH
9656: LD_INT 32
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 30
9665: PUSH
9666: LD_INT 33
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PPUSH
9682: CALL_OW 69
9686: ST_TO_ADDR
// for i in tmp do
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: LD_VAR 0 4
9696: PUSH
9697: FOR_IN
9698: IFFALSE 9730
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9700: LD_VAR 0 2
9704: PPUSH
9705: LD_VAR 0 5
9709: PUSH
9710: LD_INT 1
9712: PPUSH
9713: LD_VAR 0 5
9717: PPUSH
9718: CALL_OW 12
9722: ARRAY
9723: PPUSH
9724: CALL_OW 431
9728: GO 9697
9730: POP
9731: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9732: LD_ADDR_VAR 0 2
9736: PUSH
9737: LD_INT 22
9739: PUSH
9740: LD_INT 3
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 30
9749: PUSH
9750: LD_INT 32
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PPUSH
9761: CALL_OW 69
9765: PUSH
9766: FOR_IN
9767: IFFALSE 9816
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9769: LD_INT 0
9771: PPUSH
9772: LD_INT 5
9774: PUSH
9775: LD_INT 6
9777: PUSH
9778: LD_INT 7
9780: PUSH
9781: LD_INT 8
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: PUSH
9790: LD_OWVAR 67
9794: ARRAY
9795: PPUSH
9796: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9800: CALL_OW 44
9804: PPUSH
9805: LD_VAR 0 2
9809: PPUSH
9810: CALL_OW 52
// end ;
9814: GO 9766
9816: POP
9817: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9818: LD_ADDR_VAR 0 2
9822: PUSH
9823: LD_INT 22
9825: PUSH
9826: LD_INT 3
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 30
9835: PUSH
9836: LD_INT 5
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: PUSH
9852: FOR_IN
9853: IFFALSE 9943
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9855: LD_ADDR_VAR 0 3
9859: PUSH
9860: DOUBLE
9861: LD_INT 1
9863: DEC
9864: ST_TO_ADDR
9865: LD_INT 2
9867: PUSH
9868: LD_INT 3
9870: PUSH
9871: LD_INT 4
9873: PUSH
9874: LD_INT 5
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: LD_OWVAR 67
9887: ARRAY
9888: PUSH
9889: FOR_TO
9890: IFFALSE 9939
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9892: LD_INT 0
9894: PPUSH
9895: LD_INT 5
9897: PUSH
9898: LD_INT 6
9900: PUSH
9901: LD_INT 7
9903: PUSH
9904: LD_INT 8
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: PUSH
9913: LD_OWVAR 67
9917: ARRAY
9918: PPUSH
9919: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9923: CALL_OW 44
9927: PPUSH
9928: LD_VAR 0 2
9932: PPUSH
9933: CALL_OW 52
// end ;
9937: GO 9889
9939: POP
9940: POP
// end ;
9941: GO 9852
9943: POP
9944: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9945: LD_ADDR_VAR 0 2
9949: PUSH
9950: DOUBLE
9951: LD_INT 1
9953: DEC
9954: ST_TO_ADDR
9955: LD_INT 3
9957: PUSH
9958: LD_INT 4
9960: PUSH
9961: LD_INT 5
9963: PUSH
9964: LD_INT 5
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: PUSH
9973: LD_OWVAR 67
9977: ARRAY
9978: PUSH
9979: FOR_TO
9980: IFFALSE 10027
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9982: LD_INT 0
9984: PPUSH
9985: LD_INT 4
9987: PUSH
9988: LD_INT 5
9990: PUSH
9991: LD_INT 5
9993: PUSH
9994: LD_INT 6
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: PUSH
10003: LD_OWVAR 67
10007: ARRAY
10008: PPUSH
10009: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
10013: CALL_OW 44
10017: PPUSH
10018: LD_INT 28
10020: PPUSH
10021: CALL_OW 52
// end ;
10025: GO 9979
10027: POP
10028: POP
// for i := 1 to 2 do
10029: LD_ADDR_VAR 0 2
10033: PUSH
10034: DOUBLE
10035: LD_INT 1
10037: DEC
10038: ST_TO_ADDR
10039: LD_INT 2
10041: PUSH
10042: FOR_TO
10043: IFFALSE 10077
// begin PrepareScientist ( false , 6 ) ;
10045: LD_INT 0
10047: PPUSH
10048: LD_INT 6
10050: PPUSH
10051: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
10055: CALL_OW 44
10059: PPUSH
10060: LD_INT 81
10062: PPUSH
10063: LD_INT 93
10065: PPUSH
10066: CALL_OW 428
10070: PPUSH
10071: CALL_OW 52
// end ;
10075: GO 10042
10077: POP
10078: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
10079: LD_INT 22
10081: PPUSH
10082: LD_INT 1
10084: PPUSH
10085: LD_INT 3
10087: PPUSH
10088: LD_INT 51
10090: PPUSH
10091: LD_INT 100
10093: PPUSH
10094: CALL 48224 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
10098: CALL_OW 45
10102: PPUSH
10103: LD_INT 91
10105: PPUSH
10106: LD_INT 94
10108: PPUSH
10109: LD_INT 3
10111: PPUSH
10112: LD_INT 0
10114: PPUSH
10115: CALL_OW 50
// for i := 1 to 2 do
10119: LD_ADDR_VAR 0 2
10123: PUSH
10124: DOUBLE
10125: LD_INT 1
10127: DEC
10128: ST_TO_ADDR
10129: LD_INT 2
10131: PUSH
10132: FOR_TO
10133: IFFALSE 10177
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
10135: LD_INT 22
10137: PPUSH
10138: LD_INT 1
10140: PPUSH
10141: LD_INT 3
10143: PPUSH
10144: LD_INT 52
10146: PPUSH
10147: LD_INT 100
10149: PPUSH
10150: CALL 48224 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
10154: CALL_OW 45
10158: PPUSH
10159: LD_INT 91
10161: PPUSH
10162: LD_INT 94
10164: PPUSH
10165: LD_INT 4
10167: PPUSH
10168: LD_INT 0
10170: PPUSH
10171: CALL_OW 50
// end ;
10175: GO 10132
10177: POP
10178: POP
// end ;
10179: LD_VAR 0 1
10183: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10184: LD_INT 0
10186: PPUSH
10187: PPUSH
10188: PPUSH
10189: PPUSH
10190: PPUSH
// uc_side := 3 ;
10191: LD_ADDR_OWVAR 20
10195: PUSH
10196: LD_INT 3
10198: ST_TO_ADDR
// uc_nation := 3 ;
10199: LD_ADDR_OWVAR 21
10203: PUSH
10204: LD_INT 3
10206: ST_TO_ADDR
// for i := 1 to 4 do
10207: LD_ADDR_VAR 0 2
10211: PUSH
10212: DOUBLE
10213: LD_INT 1
10215: DEC
10216: ST_TO_ADDR
10217: LD_INT 4
10219: PUSH
10220: FOR_TO
10221: IFFALSE 10348
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10223: LD_INT 22
10225: PPUSH
10226: LD_INT 1
10228: PPUSH
10229: LD_INT 1
10231: PPUSH
10232: LD_INT 42
10234: PUSH
10235: LD_INT 43
10237: PUSH
10238: LD_INT 44
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 1
10248: PPUSH
10249: LD_INT 3
10251: PPUSH
10252: CALL_OW 12
10256: ARRAY
10257: PPUSH
10258: LD_INT 40
10260: PPUSH
10261: CALL 48224 0 5
// veh := CreateVehicle ;
10265: LD_ADDR_VAR 0 4
10269: PUSH
10270: CALL_OW 45
10274: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10275: LD_VAR 0 4
10279: PPUSH
10280: LD_INT 5
10282: PPUSH
10283: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10287: LD_VAR 0 4
10291: PPUSH
10292: LD_INT 7
10294: PPUSH
10295: LD_INT 0
10297: PPUSH
10298: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10302: LD_INT 0
10304: PPUSH
10305: LD_INT 5
10307: PPUSH
10308: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10312: CALL_OW 44
10316: PPUSH
10317: LD_VAR 0 4
10321: PPUSH
10322: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10326: LD_ADDR_VAR 0 5
10330: PUSH
10331: LD_VAR 0 5
10335: PPUSH
10336: LD_VAR 0 4
10340: PPUSH
10341: CALL 81404 0 2
10345: ST_TO_ADDR
// end ;
10346: GO 10220
10348: POP
10349: POP
// for i := 1 to 3 do
10350: LD_ADDR_VAR 0 2
10354: PUSH
10355: DOUBLE
10356: LD_INT 1
10358: DEC
10359: ST_TO_ADDR
10360: LD_INT 3
10362: PUSH
10363: FOR_TO
10364: IFFALSE 10491
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10366: LD_INT 22
10368: PPUSH
10369: LD_INT 1
10371: PPUSH
10372: LD_INT 1
10374: PPUSH
10375: LD_INT 42
10377: PUSH
10378: LD_INT 43
10380: PUSH
10381: LD_INT 44
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 1
10391: PPUSH
10392: LD_INT 3
10394: PPUSH
10395: CALL_OW 12
10399: ARRAY
10400: PPUSH
10401: LD_INT 40
10403: PPUSH
10404: CALL 48224 0 5
// veh := CreateVehicle ;
10408: LD_ADDR_VAR 0 4
10412: PUSH
10413: CALL_OW 45
10417: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10418: LD_VAR 0 4
10422: PPUSH
10423: LD_INT 5
10425: PPUSH
10426: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10430: LD_VAR 0 4
10434: PPUSH
10435: LD_INT 8
10437: PPUSH
10438: LD_INT 0
10440: PPUSH
10441: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10445: LD_INT 0
10447: PPUSH
10448: LD_INT 5
10450: PPUSH
10451: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10455: CALL_OW 44
10459: PPUSH
10460: LD_VAR 0 4
10464: PPUSH
10465: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10469: LD_ADDR_VAR 0 5
10473: PUSH
10474: LD_VAR 0 5
10478: PPUSH
10479: LD_VAR 0 4
10483: PPUSH
10484: CALL 81404 0 2
10488: ST_TO_ADDR
// end ;
10489: GO 10363
10491: POP
10492: POP
// for i := 1 to 2 do
10493: LD_ADDR_VAR 0 2
10497: PUSH
10498: DOUBLE
10499: LD_INT 1
10501: DEC
10502: ST_TO_ADDR
10503: LD_INT 2
10505: PUSH
10506: FOR_TO
10507: IFFALSE 10566
// begin PrepareSoldier ( false , 5 ) ;
10509: LD_INT 0
10511: PPUSH
10512: LD_INT 5
10514: PPUSH
10515: CALL_OW 381
// un := CreateHuman ;
10519: LD_ADDR_VAR 0 3
10523: PUSH
10524: CALL_OW 44
10528: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10529: LD_VAR 0 3
10533: PPUSH
10534: LD_INT 8
10536: PPUSH
10537: LD_INT 0
10539: PPUSH
10540: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10544: LD_ADDR_VAR 0 5
10548: PUSH
10549: LD_VAR 0 5
10553: PPUSH
10554: LD_VAR 0 3
10558: PPUSH
10559: CALL 81404 0 2
10563: ST_TO_ADDR
// end ;
10564: GO 10506
10566: POP
10567: POP
// for i in tmp do
10568: LD_ADDR_VAR 0 2
10572: PUSH
10573: LD_VAR 0 5
10577: PUSH
10578: FOR_IN
10579: IFFALSE 10598
// ComAgressiveMove ( i , 51 , 16 ) ;
10581: LD_VAR 0 2
10585: PPUSH
10586: LD_INT 51
10588: PPUSH
10589: LD_INT 16
10591: PPUSH
10592: CALL_OW 114
10596: GO 10578
10598: POP
10599: POP
// end ;
10600: LD_VAR 0 1
10604: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10605: LD_EXP 34
10609: IFFALSE 11186
10611: GO 10613
10613: DISABLE
10614: LD_INT 0
10616: PPUSH
10617: PPUSH
10618: PPUSH
// begin enable ;
10619: ENABLE
// if not ruMobile then
10620: LD_EXP 34
10624: NOT
10625: IFFALSE 10629
// exit ;
10627: GO 11186
// for i in ruMobile do
10629: LD_ADDR_VAR 0 1
10633: PUSH
10634: LD_EXP 34
10638: PUSH
10639: FOR_IN
10640: IFFALSE 11184
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10642: LD_VAR 0 1
10646: PPUSH
10647: CALL_OW 302
10651: NOT
10652: IFTRUE 10669
10654: PUSH
10655: LD_VAR 0 1
10659: PPUSH
10660: CALL_OW 255
10664: PUSH
10665: LD_INT 3
10667: NONEQUAL
10668: OR
10669: IFFALSE 10689
// begin ruMobile := ruMobile diff i ;
10671: LD_ADDR_EXP 34
10675: PUSH
10676: LD_EXP 34
10680: PUSH
10681: LD_VAR 0 1
10685: DIFF
10686: ST_TO_ADDR
// continue ;
10687: GO 10639
// end ; if GetTag ( i ) = 300 then
10689: LD_VAR 0 1
10693: PPUSH
10694: CALL_OW 110
10698: PUSH
10699: LD_INT 300
10701: EQUAL
10702: IFFALSE 10817
// begin if GetFuel ( i ) < 50 then
10704: LD_VAR 0 1
10708: PPUSH
10709: CALL_OW 261
10713: PUSH
10714: LD_INT 50
10716: LESS
10717: IFFALSE 10776
// begin ComMoveXY ( i , 93 , 100 ) ;
10719: LD_VAR 0 1
10723: PPUSH
10724: LD_INT 93
10726: PPUSH
10727: LD_INT 100
10729: PPUSH
10730: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10734: LD_INT 35
10736: PPUSH
10737: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10741: LD_VAR 0 1
10745: PPUSH
10746: LD_INT 93
10748: PPUSH
10749: LD_INT 100
10751: PPUSH
10752: CALL_OW 297
10756: PUSH
10757: LD_INT 4
10759: LESS
10760: IFFALSE 10734
// SetFuel ( i , 100 ) ;
10762: LD_VAR 0 1
10766: PPUSH
10767: LD_INT 100
10769: PPUSH
10770: CALL_OW 240
// end else
10774: GO 10817
// if not IsInArea ( i , ruParkingArea ) then
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_INT 10
10783: PPUSH
10784: CALL_OW 308
10788: NOT
10789: IFFALSE 10805
// ComMoveToArea ( i , ruParkingArea ) else
10791: LD_VAR 0 1
10795: PPUSH
10796: LD_INT 10
10798: PPUSH
10799: CALL_OW 113
10803: GO 10817
// SetTag ( i , 301 ) ;
10805: LD_VAR 0 1
10809: PPUSH
10810: LD_INT 301
10812: PPUSH
10813: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10817: LD_VAR 0 1
10821: PPUSH
10822: CALL_OW 110
10826: PUSH
10827: LD_INT 301
10829: EQUAL
10830: IFFALSE 10960
// begin if GetLives ( i ) < 1000 then
10832: LD_VAR 0 1
10836: PPUSH
10837: CALL_OW 256
10841: PUSH
10842: LD_INT 1000
10844: LESS
10845: IFFALSE 10937
// begin if not IsDrivenBy ( i ) then
10847: LD_VAR 0 1
10851: PPUSH
10852: CALL_OW 311
10856: NOT
10857: IFFALSE 10861
// continue ;
10859: GO 10639
// mech := IsDrivenBy ( i ) ;
10861: LD_ADDR_VAR 0 2
10865: PUSH
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 311
10875: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10876: LD_VAR 0 2
10880: PPUSH
10881: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10885: LD_VAR 0 2
10889: PPUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10899: LD_INT 35
10901: PPUSH
10902: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10906: LD_VAR 0 1
10910: PPUSH
10911: CALL_OW 256
10915: PUSH
10916: LD_INT 1000
10918: EQUAL
10919: IFFALSE 10899
// ComEnterUnit ( mech , i ) ;
10921: LD_VAR 0 2
10925: PPUSH
10926: LD_VAR 0 1
10930: PPUSH
10931: CALL_OW 120
// end else
10935: GO 10960
// if IsDrivenBy ( i ) then
10937: LD_VAR 0 1
10941: PPUSH
10942: CALL_OW 311
10946: IFFALSE 10960
// SetTag ( i , 0 ) ;
10948: LD_VAR 0 1
10952: PPUSH
10953: LD_INT 0
10955: PPUSH
10956: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10960: LD_VAR 0 1
10964: PPUSH
10965: CALL_OW 110
10969: PUSH
10970: LD_INT 300
10972: LESS
10973: IFFALSE 11182
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10975: LD_ADDR_VAR 0 3
10979: PUSH
10980: LD_INT 11
10982: PPUSH
10983: LD_INT 81
10985: PUSH
10986: LD_INT 3
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PPUSH
10993: CALL_OW 70
10997: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10998: LD_VAR 0 1
11002: PPUSH
11003: CALL_OW 256
11007: PUSH
11008: LD_INT 650
11010: LESS
11011: IFFALSE 11036
// begin ComStop ( i ) ;
11013: LD_VAR 0 1
11017: PPUSH
11018: CALL_OW 141
// SetTag ( i , 300 ) ;
11022: LD_VAR 0 1
11026: PPUSH
11027: LD_INT 300
11029: PPUSH
11030: CALL_OW 109
// continue ;
11034: GO 10639
// end ; if enemy then
11036: LD_VAR 0 3
11040: IFFALSE 11080
// begin if not HasTask ( i ) then
11042: LD_VAR 0 1
11046: PPUSH
11047: CALL_OW 314
11051: NOT
11052: IFFALSE 11078
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11054: LD_VAR 0 1
11058: PPUSH
11059: LD_VAR 0 3
11063: PPUSH
11064: LD_VAR 0 1
11068: PPUSH
11069: CALL_OW 74
11073: PPUSH
11074: CALL_OW 115
// end else
11078: GO 11182
// if ruMobile > 1 then
11080: LD_EXP 34
11084: PUSH
11085: LD_INT 1
11087: GREATER
11088: IFFALSE 11182
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
11090: LD_ADDR_VAR 0 3
11094: PUSH
11095: LD_INT 81
11097: PUSH
11098: LD_INT 3
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PPUSH
11105: CALL_OW 69
11109: ST_TO_ADDR
// if enemy then
11110: LD_VAR 0 3
11114: IFFALSE 11182
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
11116: LD_VAR 0 1
11120: PPUSH
11121: LD_INT 116
11123: PUSH
11124: LD_INT 95
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 84
11133: PUSH
11134: LD_INT 68
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 58
11143: PUSH
11144: LD_INT 53
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 44
11153: PUSH
11154: LD_INT 35
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 45
11163: PUSH
11164: LD_INT 23
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL 84170 0 2
// end ; end ; end ;
11182: GO 10639
11184: POP
11185: POP
// end ;
11186: PPOPN 3
11188: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11189: LD_INT 3
11191: PUSH
11192: LD_INT 22
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 32
11208: PUSH
11209: LD_INT 1
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PPUSH
11220: CALL_OW 69
11224: IFFALSE 11308
11226: GO 11228
11228: DISABLE
11229: LD_INT 0
11231: PPUSH
// begin enable ;
11232: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: LD_INT 22
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 32
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PPUSH
11269: CALL_OW 69
11273: PUSH
11274: FOR_IN
11275: IFFALSE 11306
// if GetFuel ( i ) < 3 then
11277: LD_VAR 0 1
11281: PPUSH
11282: CALL_OW 261
11286: PUSH
11287: LD_INT 3
11289: LESS
11290: IFFALSE 11304
// SetFuel ( i , 3 ) ;
11292: LD_VAR 0 1
11296: PPUSH
11297: LD_INT 3
11299: PPUSH
11300: CALL_OW 240
11304: GO 11274
11306: POP
11307: POP
// end ;
11308: PPOPN 1
11310: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11311: LD_INT 29
11313: PPUSH
11314: CALL_OW 302
11318: IFFALSE 11333
11320: PUSH
11321: LD_INT 29
11323: PPUSH
11324: CALL_OW 461
11328: PUSH
11329: LD_INT 2
11331: EQUAL
11332: AND
11333: IFFALSE 11572
11335: GO 11337
11337: DISABLE
11338: LD_INT 0
11340: PPUSH
11341: PPUSH
// begin enable ;
11342: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_INT 21
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_INT 23
11356: PUSH
11357: LD_INT 24
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 1
11368: PPUSH
11369: LD_INT 4
11371: PPUSH
11372: CALL_OW 12
11376: ARRAY
11377: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11378: LD_ADDR_VAR 0 2
11382: PUSH
11383: LD_INT 42
11385: PUSH
11386: LD_INT 44
11388: PUSH
11389: LD_INT 43
11391: PUSH
11392: LD_INT 46
11394: PUSH
11395: LD_INT 45
11397: PUSH
11398: LD_INT 46
11400: PUSH
11401: LD_INT 45
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: PUSH
11413: LD_OWVAR 67
11417: PUSH
11418: LD_INT 0
11420: PPUSH
11421: LD_INT 3
11423: PPUSH
11424: CALL_OW 12
11428: PLUS
11429: ARRAY
11430: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11431: LD_VAR 0 1
11435: PUSH
11436: LD_INT 21
11438: PUSH
11439: LD_INT 22
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: IN
11446: IFFALSE 11458
11448: PUSH
11449: LD_VAR 0 2
11453: PUSH
11454: LD_INT 46
11456: EQUAL
11457: AND
11458: IFFALSE 11491
// weapon := [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
11460: LD_ADDR_VAR 0 2
11464: PUSH
11465: LD_INT 44
11467: PUSH
11468: LD_INT 45
11470: PUSH
11471: LD_INT 45
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 1
11481: PPUSH
11482: LD_INT 3
11484: PPUSH
11485: CALL_OW 12
11489: ARRAY
11490: ST_TO_ADDR
// if tick < [ 15 15$00 , 12 12$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11491: LD_OWVAR 1
11495: PUSH
11496: LD_INT 31500
11498: PUSH
11499: LD_INT 25200
11501: PUSH
11502: LD_INT 21000
11504: PUSH
11505: LD_INT 18900
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: PUSH
11514: LD_OWVAR 67
11518: ARRAY
11519: LESS
11520: IFFALSE 11549
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 44
11529: PUSH
11530: LD_INT 43
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 1
11539: PPUSH
11540: LD_INT 2
11542: PPUSH
11543: CALL_OW 12
11547: ARRAY
11548: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11549: LD_INT 29
11551: PPUSH
11552: LD_VAR 0 1
11556: PPUSH
11557: LD_INT 1
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: LD_VAR 0 2
11567: PPUSH
11568: CALL_OW 185
// end ;
11572: PPOPN 2
11574: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11575: LD_INT 28
11577: PPUSH
11578: CALL_OW 302
11582: IFFALSE 13186
11584: GO 11586
11586: DISABLE
11587: LD_INT 0
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
11594: PPUSH
11595: PPUSH
11596: PPUSH
11597: PPUSH
11598: PPUSH
11599: PPUSH
11600: PPUSH
11601: PPUSH
// begin enable ;
11602: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11603: LD_ADDR_VAR 0 4
11607: PUSH
11608: LD_INT 12
11610: PPUSH
11611: LD_INT 3
11613: PUSH
11614: LD_INT 24
11616: PUSH
11617: LD_INT 1000
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 21
11630: PUSH
11631: LD_INT 3
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 70
11646: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11647: LD_ADDR_VAR 0 5
11651: PUSH
11652: LD_INT 22
11654: PUSH
11655: LD_INT 3
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 25
11664: PUSH
11665: LD_INT 2
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 69
11680: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11681: LD_ADDR_VAR 0 6
11685: PUSH
11686: LD_INT 22
11688: PUSH
11689: LD_INT 3
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 34
11698: PUSH
11699: LD_INT 52
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PPUSH
11710: CALL_OW 69
11714: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11715: LD_ADDR_VAR 0 8
11719: PUSH
11720: LD_INT 22
11722: PUSH
11723: LD_INT 3
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 25
11732: PUSH
11733: LD_INT 4
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 69
11748: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11749: LD_ADDR_VAR 0 9
11753: PUSH
11754: LD_INT 81
11756: PPUSH
11757: LD_INT 93
11759: PPUSH
11760: CALL_OW 428
11764: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11765: LD_ADDR_VAR 0 10
11769: PUSH
11770: LD_INT 22
11772: PUSH
11773: LD_INT 3
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 30
11782: PUSH
11783: LD_INT 32
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 50
11792: PUSH
11793: EMPTY
11794: LIST
11795: PUSH
11796: LD_INT 58
11798: PUSH
11799: EMPTY
11800: LIST
11801: PUSH
11802: LD_INT 3
11804: PUSH
11805: LD_INT 120
11807: PUSH
11808: LD_INT 701
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 69
11830: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11831: LD_ADDR_VAR 0 12
11835: PUSH
11836: LD_INT 22
11838: PUSH
11839: LD_INT 3
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 30
11848: PUSH
11849: LD_INT 5
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 50
11858: PUSH
11859: EMPTY
11860: LIST
11861: PUSH
11862: LD_INT 3
11864: PUSH
11865: LD_INT 62
11867: PUSH
11868: EMPTY
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: PPUSH
11881: CALL_OW 69
11885: ST_TO_ADDR
// if emptyTowers then
11886: LD_VAR 0 10
11890: IFFALSE 12153
// begin for i in emptyTowers do
11892: LD_ADDR_VAR 0 1
11896: PUSH
11897: LD_VAR 0 10
11901: PUSH
11902: FOR_IN
11903: IFFALSE 12149
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11905: LD_ADDR_VAR 0 11
11909: PUSH
11910: LD_INT 22
11912: PUSH
11913: LD_INT 3
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: LD_INT 54
11925: PUSH
11926: EMPTY
11927: LIST
11928: PUSH
11929: LD_INT 95
11931: PUSH
11932: LD_INT 12
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 25
11946: PUSH
11947: LD_INT 1
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 50
11956: PUSH
11957: EMPTY
11958: LIST
11959: PUSH
11960: LD_INT 3
11962: PUSH
11963: LD_INT 120
11965: PUSH
11966: LD_INT 701
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: PPUSH
11984: CALL_OW 69
11988: ST_TO_ADDR
// if not sol then
11989: LD_VAR 0 11
11993: NOT
11994: IFFALSE 11998
// break ;
11996: GO 12149
// for j in sol do
11998: LD_ADDR_VAR 0 2
12002: PUSH
12003: LD_VAR 0 11
12007: PUSH
12008: FOR_IN
12009: IFFALSE 12062
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
12011: LD_VAR 0 2
12015: PPUSH
12016: CALL_OW 310
12020: IFFALSE 12042
12022: PUSH
12023: LD_VAR 0 2
12027: PPUSH
12028: CALL_OW 310
12032: PPUSH
12033: CALL_OW 266
12037: PUSH
12038: LD_INT 32
12040: EQUAL
12041: AND
12042: IFFALSE 12060
// sol := sol diff j ;
12044: LD_ADDR_VAR 0 11
12048: PUSH
12049: LD_VAR 0 11
12053: PUSH
12054: LD_VAR 0 2
12058: DIFF
12059: ST_TO_ADDR
12060: GO 12008
12062: POP
12063: POP
// if not sol then
12064: LD_VAR 0 11
12068: NOT
12069: IFFALSE 12073
// break ;
12071: GO 12149
// if IsInUnit ( sol [ 1 ] ) then
12073: LD_VAR 0 11
12077: PUSH
12078: LD_INT 1
12080: ARRAY
12081: PPUSH
12082: CALL_OW 310
12086: IFFALSE 12101
// ComExit ( sol [ 1 ] ) ;
12088: LD_VAR 0 11
12092: PUSH
12093: LD_INT 1
12095: ARRAY
12096: PPUSH
12097: CALL 81802 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
12101: LD_VAR 0 11
12105: PUSH
12106: LD_INT 1
12108: ARRAY
12109: PPUSH
12110: LD_INT 701
12112: PPUSH
12113: CALL_OW 109
// SetTag ( i , 701 ) ;
12117: LD_VAR 0 1
12121: PPUSH
12122: LD_INT 701
12124: PPUSH
12125: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
12129: LD_VAR 0 11
12133: PUSH
12134: LD_INT 1
12136: ARRAY
12137: PPUSH
12138: LD_VAR 0 1
12142: PPUSH
12143: CALL_OW 180
// end ;
12147: GO 11902
12149: POP
12150: POP
// end else
12151: GO 12399
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
12153: LD_VAR 0 11
12157: PPUSH
12158: LD_INT 3
12160: PUSH
12161: LD_INT 54
12163: PUSH
12164: EMPTY
12165: LIST
12166: PUSH
12167: LD_INT 95
12169: PUSH
12170: LD_INT 12
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 72
12186: IFFALSE 12399
// begin if barracks then
12188: LD_VAR 0 12
12192: IFFALSE 12260
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12194: LD_ADDR_VAR 0 1
12198: PUSH
12199: LD_VAR 0 11
12203: PPUSH
12204: LD_INT 3
12206: PUSH
12207: LD_INT 54
12209: PUSH
12210: EMPTY
12211: LIST
12212: PUSH
12213: LD_INT 95
12215: PUSH
12216: LD_INT 12
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL_OW 72
12232: PUSH
12233: FOR_IN
12234: IFFALSE 12256
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12236: LD_VAR 0 1
12240: PPUSH
12241: LD_VAR 0 12
12245: PUSH
12246: LD_INT 1
12248: ARRAY
12249: PPUSH
12250: CALL_OW 120
12254: GO 12233
12256: POP
12257: POP
// end else
12258: GO 12399
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12260: LD_INT 12
12262: PPUSH
12263: LD_INT 81
12265: PUSH
12266: LD_INT 3
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PPUSH
12273: CALL_OW 70
12277: IFFALSE 12399
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12279: LD_ADDR_VAR 0 1
12283: PUSH
12284: LD_VAR 0 11
12288: PPUSH
12289: LD_INT 3
12291: PUSH
12292: LD_INT 54
12294: PUSH
12295: EMPTY
12296: LIST
12297: PUSH
12298: LD_INT 95
12300: PUSH
12301: LD_INT 12
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: PPUSH
12313: CALL_OW 72
12317: PUSH
12318: FOR_IN
12319: IFFALSE 12397
// begin SetTag ( i , 702 ) ;
12321: LD_VAR 0 1
12325: PPUSH
12326: LD_INT 702
12328: PPUSH
12329: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12333: LD_ADDR_VAR 0 13
12337: PUSH
12338: LD_INT 12
12340: PPUSH
12341: LD_INT 81
12343: PUSH
12344: LD_INT 3
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 70
12355: PPUSH
12356: LD_VAR 0 1
12360: PPUSH
12361: CALL_OW 74
12365: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12366: LD_VAR 0 1
12370: PPUSH
12371: LD_VAR 0 13
12375: PPUSH
12376: CALL_OW 250
12380: PPUSH
12381: LD_VAR 0 13
12385: PPUSH
12386: CALL_OW 251
12390: PPUSH
12391: CALL_OW 114
// end ;
12395: GO 12318
12397: POP
12398: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12399: LD_ADDR_VAR 0 3
12403: PUSH
12404: LD_INT 22
12406: PUSH
12407: LD_INT 3
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 95
12416: PUSH
12417: LD_INT 11
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 50
12426: PUSH
12427: EMPTY
12428: LIST
12429: PUSH
12430: LD_INT 25
12432: PUSH
12433: LD_INT 1
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 120
12442: PUSH
12443: LD_INT 702
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PPUSH
12457: CALL_OW 69
12461: ST_TO_ADDR
// if tmp then
12462: LD_VAR 0 3
12466: IFFALSE 12512
// for i in tmp do
12468: LD_ADDR_VAR 0 1
12472: PUSH
12473: LD_VAR 0 3
12477: PUSH
12478: FOR_IN
12479: IFFALSE 12510
// begin ComMoveXY ( i , 90 , 94 ) ;
12481: LD_VAR 0 1
12485: PPUSH
12486: LD_INT 90
12488: PPUSH
12489: LD_INT 94
12491: PPUSH
12492: CALL_OW 111
// SetTag ( i , 0 ) ;
12496: LD_VAR 0 1
12500: PPUSH
12501: LD_INT 0
12503: PPUSH
12504: CALL_OW 109
// end ;
12508: GO 12478
12510: POP
12511: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12512: LD_VAR 0 8
12516: IFFALSE 12539
12518: PUSH
12519: LD_VAR 0 5
12523: PPUSH
12524: LD_INT 120
12526: PUSH
12527: LD_INT 2
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PPUSH
12534: CALL_OW 72
12538: AND
12539: IFFALSE 12552
// ComExitAll ( sci ) else
12541: LD_VAR 0 8
12545: PPUSH
12546: CALL 81885 0 1
12550: GO 12627
// if sci then
12552: LD_VAR 0 8
12556: IFFALSE 12627
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12558: LD_VAR 0 8
12562: PPUSH
12563: LD_INT 3
12565: PUSH
12566: LD_INT 54
12568: PUSH
12569: EMPTY
12570: LIST
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PPUSH
12576: CALL_OW 72
12580: IFFALSE 12593
12582: PUSH
12583: LD_VAR 0 9
12587: PPUSH
12588: CALL_OW 302
12592: AND
12593: IFFALSE 12627
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12595: LD_VAR 0 8
12599: PPUSH
12600: LD_INT 3
12602: PUSH
12603: LD_INT 54
12605: PUSH
12606: EMPTY
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 72
12617: PPUSH
12618: LD_VAR 0 9
12622: PPUSH
12623: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12627: LD_VAR 0 6
12631: PPUSH
12632: LD_INT 50
12634: PUSH
12635: EMPTY
12636: LIST
12637: PPUSH
12638: CALL_OW 72
12642: IFFALSE 12650
12644: PUSH
12645: LD_VAR 0 4
12649: AND
12650: IFFALSE 12681
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12652: LD_VAR 0 6
12656: PPUSH
12657: LD_INT 50
12659: PUSH
12660: EMPTY
12661: LIST
12662: PPUSH
12663: CALL_OW 72
12667: PPUSH
12668: LD_VAR 0 4
12672: PUSH
12673: LD_INT 1
12675: ARRAY
12676: PPUSH
12677: CALL_OW 130
// if eng then
12681: LD_VAR 0 5
12685: IFFALSE 13186
// begin for i in eng do
12687: LD_ADDR_VAR 0 1
12691: PUSH
12692: LD_VAR 0 5
12696: PUSH
12697: FOR_IN
12698: IFFALSE 13184
// begin tag := GetTag ( i ) ;
12700: LD_ADDR_VAR 0 7
12704: PUSH
12705: LD_VAR 0 1
12709: PPUSH
12710: CALL_OW 110
12714: ST_TO_ADDR
// case tag of 0 :
12715: LD_VAR 0 7
12719: PUSH
12720: LD_INT 0
12722: DOUBLE
12723: EQUAL
12724: IFTRUE 12728
12726: GO 12941
12728: POP
// begin if b then
12729: LD_VAR 0 4
12733: IFFALSE 12749
// begin SetTag ( i , 1 ) ;
12735: LD_VAR 0 1
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 109
// continue ;
12747: GO 12697
// end ; if not ruBuildList then
12749: LD_EXP 35
12753: NOT
12754: IFFALSE 12770
// ComEnterUnit ( i , ruDep ) else
12756: LD_VAR 0 1
12760: PPUSH
12761: LD_INT 28
12763: PPUSH
12764: CALL_OW 120
12768: GO 12939
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12770: LD_INT 11
12772: PPUSH
12773: LD_INT 81
12775: PUSH
12776: LD_INT 3
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 70
12787: PUSH
12788: LD_INT 0
12790: EQUAL
12791: IFFALSE 12854
12793: PUSH
12794: LD_INT 28
12796: PPUSH
12797: LD_EXP 35
12801: PUSH
12802: LD_INT 1
12804: ARRAY
12805: PUSH
12806: LD_INT 1
12808: ARRAY
12809: PPUSH
12810: LD_EXP 35
12814: PUSH
12815: LD_INT 1
12817: ARRAY
12818: PUSH
12819: LD_INT 2
12821: ARRAY
12822: PPUSH
12823: LD_EXP 35
12827: PUSH
12828: LD_INT 1
12830: ARRAY
12831: PUSH
12832: LD_INT 3
12834: ARRAY
12835: PPUSH
12836: LD_EXP 35
12840: PUSH
12841: LD_INT 1
12843: ARRAY
12844: PUSH
12845: LD_INT 4
12847: ARRAY
12848: PPUSH
12849: CALL 56902 0 5
12853: AND
12854: IFFALSE 12939
// begin if IsInUnit ( i ) then
12856: LD_VAR 0 1
12860: PPUSH
12861: CALL_OW 310
12865: IFFALSE 12878
// ComExitBuilding ( i ) else
12867: LD_VAR 0 1
12871: PPUSH
12872: CALL_OW 122
12876: GO 12939
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12878: LD_VAR 0 1
12882: PPUSH
12883: LD_EXP 35
12887: PUSH
12888: LD_INT 1
12890: ARRAY
12891: PUSH
12892: LD_INT 1
12894: ARRAY
12895: PPUSH
12896: LD_EXP 35
12900: PUSH
12901: LD_INT 1
12903: ARRAY
12904: PUSH
12905: LD_INT 2
12907: ARRAY
12908: PPUSH
12909: LD_EXP 35
12913: PUSH
12914: LD_INT 1
12916: ARRAY
12917: PUSH
12918: LD_INT 3
12920: ARRAY
12921: PPUSH
12922: LD_EXP 35
12926: PUSH
12927: LD_INT 1
12929: ARRAY
12930: PUSH
12931: LD_INT 4
12933: ARRAY
12934: PPUSH
12935: CALL_OW 145
// end ; end ; 1 :
12939: GO 13138
12941: LD_INT 1
12943: DOUBLE
12944: EQUAL
12945: IFTRUE 12949
12947: GO 13052
12949: POP
// begin if not b then
12950: LD_VAR 0 4
12954: NOT
12955: IFFALSE 12971
// begin SetTag ( i , 0 ) ;
12957: LD_VAR 0 1
12961: PPUSH
12962: LD_INT 0
12964: PPUSH
12965: CALL_OW 109
// continue ;
12969: GO 12697
// end ; if IsInUnit ( i ) then
12971: LD_VAR 0 1
12975: PPUSH
12976: CALL_OW 310
12980: IFFALSE 12991
// ComExitBuilding ( i ) ;
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 122
// if GetLives ( i ) < 650 then
12991: LD_VAR 0 1
12995: PPUSH
12996: CALL_OW 256
13000: PUSH
13001: LD_INT 650
13003: LESS
13004: IFFALSE 13020
// begin SetTag ( i , 2 ) ;
13006: LD_VAR 0 1
13010: PPUSH
13011: LD_INT 2
13013: PPUSH
13014: CALL_OW 109
// continue ;
13018: GO 12697
// end ; if b then
13020: LD_VAR 0 4
13024: IFFALSE 13050
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_VAR 0 4
13035: PPUSH
13036: LD_VAR 0 1
13040: PPUSH
13041: CALL_OW 74
13045: PPUSH
13046: CALL_OW 130
// end ; 2 :
13050: GO 13138
13052: LD_INT 2
13054: DOUBLE
13055: EQUAL
13056: IFTRUE 13060
13058: GO 13137
13060: POP
// begin if GetLives ( i ) = 1000 then
13061: LD_VAR 0 1
13065: PPUSH
13066: CALL_OW 256
13070: PUSH
13071: LD_INT 1000
13073: EQUAL
13074: IFFALSE 13090
// begin SetTag ( i , 1 ) ;
13076: LD_VAR 0 1
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: CALL_OW 109
// continue ;
13088: GO 12697
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
13090: LD_VAR 0 1
13094: PPUSH
13095: LD_INT 84
13097: PPUSH
13098: LD_INT 93
13100: PPUSH
13101: CALL_OW 297
13105: PUSH
13106: LD_INT 6
13108: GREATER
13109: IFFALSE 13135
// begin ComMoveXY ( i , 84 , 93 ) ;
13111: LD_VAR 0 1
13115: PPUSH
13116: LD_INT 84
13118: PPUSH
13119: LD_INT 93
13121: PPUSH
13122: CALL_OW 111
// AddComHold ( i ) ;
13126: LD_VAR 0 1
13130: PPUSH
13131: CALL_OW 200
// end ; end ; end ;
13135: GO 13138
13137: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_INT 12
13145: PPUSH
13146: CALL_OW 308
13150: NOT
13151: IFFALSE 13165
13153: PUSH
13154: LD_VAR 0 1
13158: PPUSH
13159: CALL_OW 310
13163: NOT
13164: AND
13165: IFFALSE 13182
// ComMoveXY ( i , 91 , 95 ) ;
13167: LD_VAR 0 1
13171: PPUSH
13172: LD_INT 91
13174: PPUSH
13175: LD_INT 95
13177: PPUSH
13178: CALL_OW 111
// end ;
13182: GO 12697
13184: POP
13185: POP
// end ; end ;
13186: PPOPN 13
13188: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
13189: LD_INT 0
13191: PPUSH
13192: PPUSH
13193: PPUSH
13194: PPUSH
13195: PPUSH
13196: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13197: LD_ADDR_VAR 0 3
13201: PUSH
13202: DOUBLE
13203: LD_INT 1
13205: DEC
13206: ST_TO_ADDR
13207: LD_INT 3
13209: PUSH
13210: LD_INT 4
13212: PUSH
13213: LD_INT 5
13215: PUSH
13216: LD_INT 6
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: LD_OWVAR 67
13229: ARRAY
13230: PUSH
13231: LD_VAR 0 1
13235: PLUS
13236: PUSH
13237: FOR_TO
13238: IFFALSE 13557
// begin uc_side := 6 ;
13240: LD_ADDR_OWVAR 20
13244: PUSH
13245: LD_INT 6
13247: ST_TO_ADDR
// uc_nation := 3 ;
13248: LD_ADDR_OWVAR 21
13252: PUSH
13253: LD_INT 3
13255: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13256: LD_ADDR_VAR 0 6
13260: PUSH
13261: LD_INT 21
13263: PUSH
13264: LD_INT 22
13266: PUSH
13267: LD_INT 23
13269: PUSH
13270: LD_INT 24
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_INT 4
13284: PPUSH
13285: CALL_OW 12
13289: ARRAY
13290: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13291: LD_ADDR_VAR 0 7
13295: PUSH
13296: LD_INT 42
13298: PUSH
13299: LD_INT 44
13301: PUSH
13302: LD_INT 43
13304: PUSH
13305: LD_INT 46
13307: PUSH
13308: LD_INT 45
13310: PUSH
13311: LD_INT 46
13313: PUSH
13314: LD_INT 45
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: PUSH
13326: LD_OWVAR 67
13330: PUSH
13331: LD_INT 0
13333: PPUSH
13334: LD_INT 3
13336: PPUSH
13337: CALL_OW 12
13341: PLUS
13342: ARRAY
13343: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13344: LD_VAR 0 6
13348: PUSH
13349: LD_INT 21
13351: PUSH
13352: LD_INT 22
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: IN
13359: IFFALSE 13371
13361: PUSH
13362: LD_VAR 0 7
13366: PUSH
13367: LD_INT 46
13369: EQUAL
13370: AND
13371: IFFALSE 13400
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13373: LD_ADDR_VAR 0 7
13377: PUSH
13378: LD_INT 44
13380: PUSH
13381: LD_INT 45
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 1
13390: PPUSH
13391: LD_INT 2
13393: PPUSH
13394: CALL_OW 12
13398: ARRAY
13399: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13400: LD_OWVAR 1
13404: PUSH
13405: LD_INT 31500
13407: PUSH
13408: LD_INT 27300
13410: PUSH
13411: LD_INT 23100
13413: PUSH
13414: LD_INT 18900
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: LD_OWVAR 67
13427: ARRAY
13428: LESS
13429: IFFALSE 13462
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13431: LD_ADDR_VAR 0 7
13435: PUSH
13436: LD_INT 44
13438: PUSH
13439: LD_INT 43
13441: PUSH
13442: LD_INT 42
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 3
13455: PPUSH
13456: CALL_OW 12
13460: ARRAY
13461: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13462: LD_VAR 0 6
13466: PPUSH
13467: LD_INT 1
13469: PPUSH
13470: LD_INT 3
13472: PPUSH
13473: LD_VAR 0 7
13477: PPUSH
13478: LD_INT 90
13480: PPUSH
13481: CALL 48224 0 5
// un := CreateVehicle ;
13485: LD_ADDR_VAR 0 4
13489: PUSH
13490: CALL_OW 45
13494: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13495: LD_VAR 0 4
13499: PPUSH
13500: LD_INT 140
13502: PPUSH
13503: LD_INT 146
13505: PPUSH
13506: LD_INT 0
13508: PPUSH
13509: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13513: LD_VAR 0 4
13517: PPUSH
13518: LD_INT 131
13520: PPUSH
13521: LD_INT 128
13523: PPUSH
13524: CALL_OW 111
// wait ( 0 0$3 ) ;
13528: LD_INT 105
13530: PPUSH
13531: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13535: LD_ADDR_VAR 0 5
13539: PUSH
13540: LD_VAR 0 5
13544: PPUSH
13545: LD_VAR 0 4
13549: PPUSH
13550: CALL 81404 0 2
13554: ST_TO_ADDR
// end ;
13555: GO 13237
13557: POP
13558: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13559: LD_ADDR_EXP 36
13563: PUSH
13564: LD_EXP 36
13568: PPUSH
13569: LD_VAR 0 5
13573: PPUSH
13574: CALL 81441 0 2
13578: ST_TO_ADDR
// end ;
13579: LD_VAR 0 2
13583: RET
// every 0 0$3 trigger russianAttackers do
13584: LD_EXP 36
13588: IFFALSE 13671
13590: GO 13592
13592: DISABLE
// begin enable ;
13593: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13594: LD_EXP 36
13598: PPUSH
13599: LD_INT 126
13601: PUSH
13602: LD_INT 108
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PUSH
13609: LD_INT 107
13611: PUSH
13612: LD_INT 85
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 82
13621: PUSH
13622: LD_INT 62
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 73
13631: PUSH
13632: LD_INT 46
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 62
13641: PUSH
13642: LD_INT 31
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 52
13651: PUSH
13652: LD_INT 17
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: PPUSH
13667: CALL 84170 0 2
// end ;
13671: END
// every 20 20$0 trigger Difficulty > 2 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
13672: LD_OWVAR 67
13676: PUSH
13677: LD_INT 2
13679: GREATER
13680: IFFALSE 13723
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_INT 6
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 21
13695: PUSH
13696: LD_INT 2
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 50
13705: PUSH
13706: EMPTY
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: LIST
13713: PPUSH
13714: CALL_OW 69
13718: PUSH
13719: LD_INT 0
13721: EQUAL
13722: AND
13723: IFFALSE 13777
13725: GO 13727
13727: DISABLE
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
13728: LD_INT 51
13730: PPUSH
13731: LD_INT 6
13733: PPUSH
13734: LD_INT 2
13736: PPUSH
13737: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
13741: LD_INT 57
13743: PPUSH
13744: LD_INT 6
13746: PPUSH
13747: LD_INT 2
13749: PPUSH
13750: CALL_OW 322
// if Difficulty > 3 then
13754: LD_OWVAR 67
13758: PUSH
13759: LD_INT 3
13761: GREATER
13762: IFFALSE 13777
// SetTech ( tech_weap2 , 6 , state_researched ) ;
13764: LD_INT 52
13766: PPUSH
13767: LD_INT 6
13769: PPUSH
13770: LD_INT 2
13772: PPUSH
13773: CALL_OW 322
// end ; end_of_file
13777: END
// on SailEvent ( event ) do begin if event = 1 then
13778: LD_VAR 0 1
13782: PUSH
13783: LD_INT 1
13785: EQUAL
13786: IFFALSE 13816
// PrepareRussianAttack ( [ 2 , 4 , 6 , 8 ] [ Difficulty ] ) ;
13788: LD_INT 2
13790: PUSH
13791: LD_INT 4
13793: PUSH
13794: LD_INT 6
13796: PUSH
13797: LD_INT 8
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: LD_OWVAR 67
13810: ARRAY
13811: PPUSH
13812: CALL 13189 0 1
// end ;
13816: PPOPN 1
13818: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13819: LD_VAR 0 1
13823: PUSH
13824: LD_EXP 28
13828: EQUAL
13829: IFFALSE 13841
13831: PUSH
13832: LD_VAR 0 2
13836: PUSH
13837: LD_INT 1
13839: EQUAL
13840: AND
13841: IFFALSE 13847
// SikorskiKilledInAction ;
13843: CALL 19032 0 0
// end ;
13847: PPOPN 3
13849: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13850: LD_INT 0
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13857: LD_VAR 0 1
13861: PPUSH
13862: CALL 36730 0 1
// if un = JMM then
13866: LD_VAR 0 1
13870: PUSH
13871: LD_EXP 14
13875: EQUAL
13876: IFFALSE 13885
// YouLost ( JMM ) ;
13878: LD_STRING JMM
13880: PPUSH
13881: CALL_OW 104
// if un = Sikorski then
13885: LD_VAR 0 1
13889: PUSH
13890: LD_EXP 28
13894: EQUAL
13895: IFFALSE 13921
// if sikorskiStatus = 0 then
13897: LD_EXP 9
13901: PUSH
13902: LD_INT 0
13904: EQUAL
13905: IFFALSE 13913
// SikorskiKilledInAction else
13907: CALL 19032 0 0
13911: GO 13921
// sikorskiIsKilled := true ;
13913: LD_ADDR_EXP 10
13917: PUSH
13918: LD_INT 1
13920: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13921: LD_VAR 0 1
13925: PPUSH
13926: CALL_OW 255
13930: PUSH
13931: LD_INT 1
13933: EQUAL
13934: IFFALSE 13951
13936: PUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 248
13946: PUSH
13947: LD_INT 1
13949: EQUAL
13950: AND
13951: IFFALSE 13975
13953: PUSH
13954: LD_VAR 0 1
13958: PPUSH
13959: CALL_OW 266
13963: PUSH
13964: LD_INT 0
13966: PUSH
13967: LD_INT 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: IN
13974: AND
13975: IFFALSE 13984
// YouLost ( Destroyed ) ;
13977: LD_STRING Destroyed
13979: PPUSH
13980: CALL_OW 104
// if un = ruDep then
13984: LD_VAR 0 1
13988: PUSH
13989: LD_INT 28
13991: EQUAL
13992: IFFALSE 14126
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13994: LD_ADDR_VAR 0 2
13998: PUSH
13999: LD_INT 22
14001: PUSH
14002: LD_INT 3
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 25
14011: PUSH
14012: LD_INT 1
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PPUSH
14023: CALL_OW 69
14027: PUSH
14028: FOR_IN
14029: IFFALSE 14124
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_INT 11
14038: PPUSH
14039: LD_INT 81
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 70
14053: PPUSH
14054: LD_VAR 0 2
14058: PPUSH
14059: CALL_OW 74
14063: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
14064: LD_VAR 0 2
14068: PPUSH
14069: CALL_OW 310
14073: PPUSH
14074: CALL_OW 266
14078: PUSH
14079: LD_INT 32
14081: EQUAL
14082: IFFALSE 14122
// begin ComExitBuilding ( i ) ;
14084: LD_VAR 0 2
14088: PPUSH
14089: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
14093: LD_VAR 0 2
14097: PPUSH
14098: LD_VAR 0 3
14102: PPUSH
14103: CALL_OW 250
14107: PPUSH
14108: LD_VAR 0 3
14112: PPUSH
14113: CALL_OW 251
14117: PPUSH
14118: CALL_OW 174
// end ; end ;
14122: GO 14028
14124: POP
14125: POP
// end ; if un in ruMobile then
14126: LD_VAR 0 1
14130: PUSH
14131: LD_EXP 34
14135: IN
14136: IFFALSE 14154
// ruMobile := ruMobile diff un ;
14138: LD_ADDR_EXP 34
14142: PUSH
14143: LD_EXP 34
14147: PUSH
14148: LD_VAR 0 1
14152: DIFF
14153: ST_TO_ADDR
// if GetSide ( un ) = 3 then
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 255
14163: PUSH
14164: LD_INT 3
14166: EQUAL
14167: IFFALSE 14810
// begin if GetType ( un ) = unit_building then
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL_OW 247
14178: PUSH
14179: LD_INT 3
14181: EQUAL
14182: IFFALSE 14318
// begin btype := GetBType ( un ) ;
14184: LD_ADDR_VAR 0 6
14188: PUSH
14189: LD_VAR 0 1
14193: PPUSH
14194: CALL_OW 266
14198: ST_TO_ADDR
// if btype = b_warehouse then
14199: LD_VAR 0 6
14203: PUSH
14204: LD_INT 1
14206: EQUAL
14207: IFFALSE 14217
// btype := b_depot ;
14209: LD_ADDR_VAR 0 6
14213: PUSH
14214: LD_INT 0
14216: ST_TO_ADDR
// if btype = b_barracks then
14217: LD_VAR 0 6
14221: PUSH
14222: LD_INT 5
14224: EQUAL
14225: IFFALSE 14235
// btype := b_armoury ;
14227: LD_ADDR_VAR 0 6
14231: PUSH
14232: LD_INT 4
14234: ST_TO_ADDR
// if btype = b_lab_full then
14235: LD_VAR 0 6
14239: PUSH
14240: LD_INT 8
14242: EQUAL
14243: IFFALSE 14253
// btype := b_lab ;
14245: LD_ADDR_VAR 0 6
14249: PUSH
14250: LD_INT 6
14252: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
14253: LD_ADDR_EXP 35
14257: PUSH
14258: LD_EXP 35
14262: PPUSH
14263: LD_EXP 35
14267: PUSH
14268: LD_INT 1
14270: PLUS
14271: PPUSH
14272: LD_VAR 0 6
14276: PUSH
14277: LD_VAR 0 1
14281: PPUSH
14282: CALL_OW 250
14286: PUSH
14287: LD_VAR 0 1
14291: PPUSH
14292: CALL_OW 251
14296: PUSH
14297: LD_VAR 0 1
14301: PPUSH
14302: CALL_OW 254
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PPUSH
14313: CALL_OW 1
14317: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
14318: LD_VAR 0 1
14322: PPUSH
14323: CALL_OW 247
14327: PUSH
14328: LD_INT 2
14330: EQUAL
14331: IFFALSE 14612
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14333: LD_VAR 0 1
14337: PPUSH
14338: CALL_OW 264
14342: PUSH
14343: LD_INT 52
14345: PUSH
14346: LD_INT 51
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: IN
14353: IFFALSE 14383
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14355: LD_INT 29
14357: PPUSH
14358: LD_INT 22
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: LD_INT 3
14366: PPUSH
14367: LD_VAR 0 1
14371: PPUSH
14372: CALL_OW 264
14376: PPUSH
14377: CALL_OW 185
// end else
14381: GO 14612
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14383: LD_ADDR_VAR 0 4
14387: PUSH
14388: LD_INT 21
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_INT 23
14396: PUSH
14397: LD_INT 24
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 1
14408: PPUSH
14409: LD_INT 4
14411: PPUSH
14412: CALL_OW 12
14416: ARRAY
14417: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14418: LD_ADDR_VAR 0 5
14422: PUSH
14423: LD_INT 42
14425: PUSH
14426: LD_INT 44
14428: PUSH
14429: LD_INT 43
14431: PUSH
14432: LD_INT 46
14434: PUSH
14435: LD_INT 45
14437: PUSH
14438: LD_INT 46
14440: PUSH
14441: LD_INT 45
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_OWVAR 67
14457: PUSH
14458: LD_INT 0
14460: PPUSH
14461: LD_INT 3
14463: PPUSH
14464: CALL_OW 12
14468: PLUS
14469: ARRAY
14470: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14471: LD_VAR 0 4
14475: PUSH
14476: LD_INT 21
14478: PUSH
14479: LD_INT 22
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: IN
14486: IFFALSE 14498
14488: PUSH
14489: LD_VAR 0 5
14493: PUSH
14494: LD_INT 46
14496: EQUAL
14497: AND
14498: IFFALSE 14531
// weapon := [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
14500: LD_ADDR_VAR 0 5
14504: PUSH
14505: LD_INT 44
14507: PUSH
14508: LD_INT 45
14510: PUSH
14511: LD_INT 45
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 1
14521: PPUSH
14522: LD_INT 3
14524: PPUSH
14525: CALL_OW 12
14529: ARRAY
14530: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14531: LD_OWVAR 1
14535: PUSH
14536: LD_INT 31500
14538: PUSH
14539: LD_INT 27300
14541: PUSH
14542: LD_INT 23100
14544: PUSH
14545: LD_INT 21000
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: PUSH
14554: LD_OWVAR 67
14558: ARRAY
14559: LESS
14560: IFFALSE 14589
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14562: LD_ADDR_VAR 0 5
14566: PUSH
14567: LD_INT 44
14569: PUSH
14570: LD_INT 43
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 1
14579: PPUSH
14580: LD_INT 2
14582: PPUSH
14583: CALL_OW 12
14587: ARRAY
14588: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14589: LD_INT 29
14591: PPUSH
14592: LD_VAR 0 4
14596: PPUSH
14597: LD_INT 1
14599: PPUSH
14600: LD_INT 1
14602: PPUSH
14603: LD_VAR 0 5
14607: PPUSH
14608: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 257
14621: PUSH
14622: LD_INT 3
14624: EQUAL
14625: IFFALSE 14810
// begin killMechCounter := Inc ( killMechCounter ) ;
14627: LD_ADDR_EXP 12
14631: PUSH
14632: LD_EXP 12
14636: PPUSH
14637: CALL 82777 0 1
14641: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14642: LD_EXP 33
14646: PUSH
14647: LD_INT 0
14649: EQUAL
14650: IFTRUE 14662
14652: PUSH
14653: LD_INT 29
14655: PPUSH
14656: CALL_OW 302
14660: NOT
14661: OR
14662: IFFALSE 14666
// exit ;
14664: GO 14810
// ruMechCounter := Dec ( ruMechCounter ) ;
14666: LD_ADDR_EXP 33
14670: PUSH
14671: LD_EXP 33
14675: PPUSH
14676: CALL 82799 0 1
14680: ST_TO_ADDR
// uc_side := 3 ;
14681: LD_ADDR_OWVAR 20
14685: PUSH
14686: LD_INT 3
14688: ST_TO_ADDR
// uc_nation := 3 ;
14689: LD_ADDR_OWVAR 21
14693: PUSH
14694: LD_INT 3
14696: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14697: LD_INT 0
14699: PPUSH
14700: LD_INT 5
14702: PUSH
14703: LD_INT 6
14705: PUSH
14706: LD_INT 7
14708: PUSH
14709: LD_INT 8
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: LD_OWVAR 67
14722: ARRAY
14723: PPUSH
14724: CALL_OW 383
// tmp := CreateHuman ;
14728: LD_ADDR_VAR 0 3
14732: PUSH
14733: CALL_OW 44
14737: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14738: LD_VAR 0 3
14742: PPUSH
14743: LD_INT 145
14745: PPUSH
14746: LD_INT 133
14748: PPUSH
14749: LD_INT 0
14751: PPUSH
14752: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14756: LD_VAR 0 3
14760: PPUSH
14761: LD_INT 29
14763: PPUSH
14764: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14768: LD_INT 35
14770: PPUSH
14771: CALL_OW 67
// if not HasTask ( tmp ) then
14775: LD_VAR 0 3
14779: PPUSH
14780: CALL_OW 314
14784: NOT
14785: IFFALSE 14799
// ComEnterUnit ( tmp , ruFac ) ;
14787: LD_VAR 0 3
14791: PPUSH
14792: LD_INT 29
14794: PPUSH
14795: CALL_OW 120
// until IsInUnit ( tmp ) ;
14799: LD_VAR 0 3
14803: PPUSH
14804: CALL_OW 310
14808: IFFALSE 14768
// end ; end ; end ;
14810: PPOPN 6
14812: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 255
14822: PUSH
14823: LD_INT 4
14825: EQUAL
14826: IFFALSE 14843
// ComMoveXY ( driver , 40 , 47 ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: LD_INT 40
14835: PPUSH
14836: LD_INT 47
14838: PPUSH
14839: CALL_OW 111
// if GetSide ( driver ) = 3 then
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 255
14852: PUSH
14853: LD_INT 3
14855: EQUAL
14856: IFFALSE 15078
// begin ComMoveXY ( driver , 90 , 97 ) ;
14858: LD_VAR 0 1
14862: PPUSH
14863: LD_INT 90
14865: PPUSH
14866: LD_INT 97
14868: PPUSH
14869: CALL_OW 111
// if IsOk ( ruFac ) then
14873: LD_INT 29
14875: PPUSH
14876: CALL_OW 302
14880: IFFALSE 15000
// begin repeat wait ( 0 0$1 ) ;
14882: LD_INT 35
14884: PPUSH
14885: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14889: LD_INT 29
14891: PPUSH
14892: CALL_OW 313
14896: PUSH
14897: LD_INT 6
14899: LESS
14900: IFTRUE 14913
14902: PUSH
14903: LD_VAR 0 1
14907: PPUSH
14908: CALL_OW 301
14912: OR
14913: IFFALSE 14882
// if IsDead ( driver ) then
14915: LD_VAR 0 1
14919: PPUSH
14920: CALL_OW 301
14924: IFFALSE 14928
// exit ;
14926: GO 15078
// repeat wait ( 0 0$10 ) ;
14928: LD_INT 350
14930: PPUSH
14931: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14935: LD_VAR 0 1
14939: PPUSH
14940: CALL_OW 314
14944: NOT
14945: IFFALSE 14960
14947: PUSH
14948: LD_INT 29
14950: PPUSH
14951: CALL_OW 313
14955: PUSH
14956: LD_INT 6
14958: LESS
14959: AND
14960: IFFALSE 14974
// ComEnterUnit ( driver , ruFac ) ;
14962: LD_VAR 0 1
14966: PPUSH
14967: LD_INT 29
14969: PPUSH
14970: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14974: LD_VAR 0 1
14978: PPUSH
14979: CALL_OW 301
14983: IFTRUE 14996
14985: PUSH
14986: LD_VAR 0 1
14990: PPUSH
14991: CALL_OW 310
14995: OR
14996: IFFALSE 14928
// end else
14998: GO 15078
// begin ComMoveXY ( driver , 142 , 148 ) ;
15000: LD_VAR 0 1
15004: PPUSH
15005: LD_INT 142
15007: PPUSH
15008: LD_INT 148
15010: PPUSH
15011: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15015: LD_INT 35
15017: PPUSH
15018: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
15022: LD_VAR 0 1
15026: PPUSH
15027: CALL_OW 301
15031: IFTRUE 15050
15033: PUSH
15034: LD_VAR 0 1
15038: PPUSH
15039: LD_INT 142
15041: PPUSH
15042: LD_INT 148
15044: PPUSH
15045: CALL_OW 307
15049: OR
15050: IFFALSE 15015
// if IsAt ( driver , 142 , 148 ) then
15052: LD_VAR 0 1
15056: PPUSH
15057: LD_INT 142
15059: PPUSH
15060: LD_INT 148
15062: PPUSH
15063: CALL_OW 307
15067: IFFALSE 15078
// RemoveUnit ( driver ) ;
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 64
// end ; end ; end ;
15078: PPOPN 4
15080: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
15081: LD_VAR 0 2
15085: PPUSH
15086: CALL_OW 257
15090: PUSH
15091: LD_INT 3
15093: EQUAL
15094: IFFALSE 15111
15096: PUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: CALL_OW 255
15106: PUSH
15107: LD_INT 3
15109: EQUAL
15110: AND
15111: IFFALSE 15123
15113: PUSH
15114: LD_VAR 0 1
15118: PUSH
15119: LD_INT 29
15121: EQUAL
15122: AND
15123: IFFALSE 15137
// SetLives ( un , 1000 ) ;
15125: LD_VAR 0 2
15129: PPUSH
15130: LD_INT 1000
15132: PPUSH
15133: CALL_OW 234
// if GetTag ( b ) = 701 then
15137: LD_VAR 0 1
15141: PPUSH
15142: CALL_OW 110
15146: PUSH
15147: LD_INT 701
15149: EQUAL
15150: IFFALSE 15176
// begin SetTag ( b , 0 ) ;
15152: LD_VAR 0 1
15156: PPUSH
15157: LD_INT 0
15159: PPUSH
15160: CALL_OW 109
// SetTag ( un , 0 ) ;
15164: LD_VAR 0 2
15168: PPUSH
15169: LD_INT 0
15171: PPUSH
15172: CALL_OW 109
// end ; end ;
15176: PPOPN 2
15178: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 255
15188: PUSH
15189: LD_INT 3
15191: PUSH
15192: LD_INT 6
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: IN
15199: IFFALSE 15216
15201: PUSH
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 263
15211: PUSH
15212: LD_INT 3
15214: EQUAL
15215: AND
15216: IFFALSE 15225
15218: PUSH
15219: LD_EXP 7
15223: NOT
15224: AND
15225: IFFALSE 15244
// begin seenComputer := true ;
15227: LD_ADDR_EXP 7
15231: PUSH
15232: LD_INT 1
15234: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL 18209 0 1
// end ; end ;
15244: PPOPN 1
15246: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15247: LD_INT 0
15249: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15250: LD_VAR 0 1
15254: PPUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: CALL 36788 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 255
15273: PUSH
15274: LD_INT 3
15276: EQUAL
15277: IFFALSE 15294
15279: PUSH
15280: LD_VAR 0 1
15284: PPUSH
15285: CALL_OW 263
15289: PUSH
15290: LD_INT 1
15292: EQUAL
15293: AND
15294: IFFALSE 15330
15296: PUSH
15297: LD_VAR 0 1
15301: PPUSH
15302: CALL_OW 264
15306: PUSH
15307: LD_INT 42
15309: PUSH
15310: LD_INT 43
15312: PUSH
15313: LD_INT 44
15315: PUSH
15316: LD_INT 46
15318: PUSH
15319: LD_INT 45
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: IN
15329: AND
15330: IFFALSE 15360
// begin SetTag ( vehicle , 300 ) ;
15332: LD_VAR 0 1
15336: PPUSH
15337: LD_INT 300
15339: PPUSH
15340: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
15344: LD_ADDR_EXP 34
15348: PUSH
15349: LD_EXP 34
15353: PUSH
15354: LD_VAR 0 1
15358: UNION
15359: ST_TO_ADDR
// end ; end ;
15360: PPOPN 3
15362: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15363: LD_INT 0
15365: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15366: LD_VAR 0 2
15370: PPUSH
15371: LD_VAR 0 3
15375: PPUSH
15376: LD_INT 13
15378: PPUSH
15379: CALL_OW 309
15383: IFFALSE 15516
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15385: LD_ADDR_VAR 0 6
15389: PUSH
15390: LD_INT 22
15392: PUSH
15393: LD_INT 3
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 50
15402: PUSH
15403: EMPTY
15404: LIST
15405: PUSH
15406: LD_INT 34
15408: PUSH
15409: LD_INT 51
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: LIST
15420: PPUSH
15421: CALL_OW 69
15425: ST_TO_ADDR
// if not cargo then
15426: LD_VAR 0 6
15430: NOT
15431: IFFALSE 15435
// exit ;
15433: GO 15516
// wait ( 0 0$5 ) ;
15435: LD_INT 175
15437: PPUSH
15438: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15442: LD_VAR 0 6
15446: PUSH
15447: LD_INT 1
15449: ARRAY
15450: PPUSH
15451: LD_INT 28
15453: PPUSH
15454: CALL_OW 296
15458: PUSH
15459: LD_INT 6
15461: LESS
15462: IFFALSE 15483
15464: PUSH
15465: LD_VAR 0 6
15469: PUSH
15470: LD_INT 1
15472: ARRAY
15473: PPUSH
15474: CALL_OW 261
15478: PUSH
15479: LD_INT 50
15481: LESS
15482: AND
15483: IFFALSE 15497
// ComMoveUnit ( cargo , ruDep ) ;
15485: LD_VAR 0 6
15489: PPUSH
15490: LD_INT 28
15492: PPUSH
15493: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15497: LD_VAR 0 6
15501: PPUSH
15502: LD_VAR 0 2
15506: PPUSH
15507: LD_VAR 0 3
15511: PPUSH
15512: CALL_OW 177
// end ; end ;
15516: PPOPN 6
15518: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15519: LD_VAR 0 1
15523: PPUSH
15524: CALL_OW 264
15528: PUSH
15529: LD_INT 45
15531: EQUAL
15532: IFFALSE 15549
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15534: LD_ADDR_EXP 11
15538: PUSH
15539: LD_EXP 11
15543: PPUSH
15544: CALL 82777 0 1
15548: ST_TO_ADDR
// end ;
15549: PPOPN 4
15551: END
// on BuildingComplete ( b ) do var i , tmp ;
15552: LD_INT 0
15554: PPUSH
15555: PPUSH
// begin if GetSide ( b ) = 3 then
15556: LD_VAR 0 1
15560: PPUSH
15561: CALL_OW 255
15565: PUSH
15566: LD_INT 3
15568: EQUAL
15569: IFFALSE 15666
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15571: LD_ADDR_EXP 35
15575: PUSH
15576: LD_EXP 35
15580: PPUSH
15581: LD_INT 1
15583: PPUSH
15584: CALL_OW 3
15588: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15589: LD_VAR 0 1
15593: PPUSH
15594: CALL_OW 266
15598: PUSH
15599: LD_INT 4
15601: EQUAL
15602: IFFALSE 15613
// ComUpgrade ( b ) ;
15604: LD_VAR 0 1
15608: PPUSH
15609: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15613: LD_VAR 0 1
15617: PPUSH
15618: CALL_OW 266
15622: PUSH
15623: LD_INT 32
15625: PUSH
15626: LD_INT 33
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: IN
15633: IFFALSE 15666
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15635: LD_VAR 0 1
15639: PPUSH
15640: LD_INT 46
15642: PUSH
15643: LD_INT 45
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 1
15652: PPUSH
15653: LD_INT 2
15655: PPUSH
15656: CALL_OW 12
15660: ARRAY
15661: PPUSH
15662: CALL_OW 208
// end ; end ; end_of_file
15666: PPOPN 3
15668: END
// export function Action ; var i , tmp , un , inUnit ; begin
15669: LD_INT 0
15671: PPUSH
15672: PPUSH
15673: PPUSH
15674: PPUSH
15675: PPUSH
// Video ( true ) ;
15676: LD_INT 1
15678: PPUSH
15679: CALL 81376 0 1
// invincibleMode := true ;
15683: LD_ADDR_EXP 5
15687: PUSH
15688: LD_INT 1
15690: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15691: LD_INT 50
15693: PPUSH
15694: LD_INT 12
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: LD_INT 56
15702: NEG
15703: PPUSH
15704: CALL 81288 0 4
// CenterOnXY ( 50 , 12 ) ;
15708: LD_INT 50
15710: PPUSH
15711: LD_INT 12
15713: PPUSH
15714: CALL_OW 84
// wait ( 0 0$3 ) ;
15718: LD_INT 105
15720: PPUSH
15721: CALL_OW 67
// PrepareStartRussianAttack ;
15725: CALL 10184 0 0
// CenterOnXY ( 66 , 47 ) ;
15729: LD_INT 66
15731: PPUSH
15732: LD_INT 47
15734: PPUSH
15735: CALL_OW 84
// wait ( 0 0$5 ) ;
15739: LD_INT 175
15741: PPUSH
15742: CALL_OW 67
// case gammaCommander of 1 :
15746: LD_EXP 13
15750: PUSH
15751: LD_INT 1
15753: DOUBLE
15754: EQUAL
15755: IFTRUE 15759
15757: GO 15774
15759: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15760: LD_EXP 16
15764: PPUSH
15765: LD_STRING D1-Don-1
15767: PPUSH
15768: CALL_OW 88
15772: GO 15821
15774: LD_INT 2
15776: DOUBLE
15777: EQUAL
15778: IFTRUE 15782
15780: GO 15797
15782: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15783: LD_EXP 15
15787: PPUSH
15788: LD_STRING D1-Brown-1
15790: PPUSH
15791: CALL_OW 88
15795: GO 15821
15797: LD_INT 3
15799: DOUBLE
15800: EQUAL
15801: IFTRUE 15805
15803: GO 15820
15805: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15806: LD_EXP 25
15810: PPUSH
15811: LD_STRING D1-VanH-1
15813: PPUSH
15814: CALL_OW 88
15818: GO 15821
15820: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15821: LD_ADDR_VAR 0 3
15825: PUSH
15826: LD_INT 22
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 33
15838: PUSH
15839: LD_INT 2
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 61
15848: PUSH
15849: EMPTY
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 69
15861: ST_TO_ADDR
// if tmp then
15862: LD_VAR 0 3
15866: IFFALSE 15883
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15868: LD_VAR 0 3
15872: PPUSH
15873: LD_INT 74
15875: PPUSH
15876: LD_INT 44
15878: PPUSH
15879: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15883: LD_ADDR_VAR 0 3
15887: PUSH
15888: LD_INT 22
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 25
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PPUSH
15912: CALL_OW 69
15916: PUSH
15917: LD_EXP 16
15921: PUSH
15922: LD_EXP 15
15926: PUSH
15927: LD_EXP 25
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: LIST
15936: DIFF
15937: ST_TO_ADDR
// if tmp then
15938: LD_VAR 0 3
15942: IFFALSE 16022
// for i in tmp do
15944: LD_ADDR_VAR 0 2
15948: PUSH
15949: LD_VAR 0 3
15953: PUSH
15954: FOR_IN
15955: IFFALSE 16020
// begin inUnit := IsInUnit ( i ) ;
15957: LD_ADDR_VAR 0 5
15961: PUSH
15962: LD_VAR 0 2
15966: PPUSH
15967: CALL_OW 310
15971: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15972: LD_VAR 0 5
15976: IFFALSE 16000
15978: PUSH
15979: LD_VAR 0 5
15983: PPUSH
15984: CALL_OW 266
15988: PUSH
15989: LD_INT 32
15991: PUSH
15992: LD_INT 31
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: IN
15999: AND
16000: IFFALSE 16018
// tmp := tmp diff i ;
16002: LD_ADDR_VAR 0 3
16006: PUSH
16007: LD_VAR 0 3
16011: PUSH
16012: LD_VAR 0 2
16016: DIFF
16017: ST_TO_ADDR
// end ;
16018: GO 15954
16020: POP
16021: POP
// if tmp then
16022: LD_VAR 0 3
16026: IFFALSE 16116
// begin ComExitAll ( tmp ) ;
16028: LD_VAR 0 3
16032: PPUSH
16033: CALL 81885 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
16037: LD_VAR 0 3
16041: PPUSH
16042: LD_INT 74
16044: PPUSH
16045: LD_INT 44
16047: PPUSH
16048: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
16052: LD_ADDR_VAR 0 3
16056: PUSH
16057: LD_INT 22
16059: PUSH
16060: LD_INT 1
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 25
16069: PUSH
16070: LD_INT 4
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PPUSH
16081: CALL_OW 69
16085: ST_TO_ADDR
// if tmp then
16086: LD_VAR 0 3
16090: IFFALSE 16116
// begin ComExitAll ( tmp ) ;
16092: LD_VAR 0 3
16096: PPUSH
16097: CALL 81885 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
16101: LD_VAR 0 3
16105: PPUSH
16106: LD_INT 66
16108: PPUSH
16109: LD_INT 28
16111: PPUSH
16112: CALL_OW 171
// end ; end ; game_speed := 4 ;
16116: LD_ADDR_OWVAR 65
16120: PUSH
16121: LD_INT 4
16123: ST_TO_ADDR
// wait ( 0 0$2 ) ;
16124: LD_INT 70
16126: PPUSH
16127: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
16131: LD_EXP 29
16135: PPUSH
16136: LD_STRING D1-Har-1
16138: PPUSH
16139: CALL_OW 94
// case gammaCommander of 1 :
16143: LD_EXP 13
16147: PUSH
16148: LD_INT 1
16150: DOUBLE
16151: EQUAL
16152: IFTRUE 16156
16154: GO 16171
16156: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
16157: LD_EXP 16
16161: PPUSH
16162: LD_STRING D1-Don-2
16164: PPUSH
16165: CALL_OW 88
16169: GO 16218
16171: LD_INT 2
16173: DOUBLE
16174: EQUAL
16175: IFTRUE 16179
16177: GO 16194
16179: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
16180: LD_EXP 15
16184: PPUSH
16185: LD_STRING D1-Brown-2
16187: PPUSH
16188: CALL_OW 88
16192: GO 16218
16194: LD_INT 3
16196: DOUBLE
16197: EQUAL
16198: IFTRUE 16202
16200: GO 16217
16202: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
16203: LD_EXP 25
16207: PPUSH
16208: LD_STRING D1-VanH-2
16210: PPUSH
16211: CALL_OW 88
16215: GO 16218
16217: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
16218: LD_EXP 29
16222: PPUSH
16223: LD_STRING D1-Har-2
16225: PPUSH
16226: CALL_OW 94
// invincibleMode := false ;
16230: LD_ADDR_EXP 5
16234: PUSH
16235: LD_INT 0
16237: ST_TO_ADDR
// Video ( false ) ;
16238: LD_INT 0
16240: PPUSH
16241: CALL 81376 0 1
// ChangeMissionObjectives ( M1 ) ;
16245: LD_STRING M1
16247: PPUSH
16248: CALL_OW 337
// SaveForQuickRestart ;
16252: CALL_OW 22
// wait ( 2 2$30 ) ;
16256: LD_INT 5250
16258: PPUSH
16259: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
16263: LD_INT 1
16265: PPUSH
16266: CALL 13189 0 1
// wait ( 4 4$30 ) ;
16270: LD_INT 9450
16272: PPUSH
16273: CALL_OW 67
// if Difficulty > 1 then
16277: LD_OWVAR 67
16281: PUSH
16282: LD_INT 1
16284: GREATER
16285: IFFALSE 16294
// PrepareRussianAttack ( 2 ) ;
16287: LD_INT 2
16289: PPUSH
16290: CALL 13189 0 1
// if Difficulty > 2 then
16294: LD_OWVAR 67
16298: PUSH
16299: LD_INT 2
16301: GREATER
16302: IFFALSE 16461
// begin for i := 1 to 4 do
16304: LD_ADDR_VAR 0 2
16308: PUSH
16309: DOUBLE
16310: LD_INT 1
16312: DEC
16313: ST_TO_ADDR
16314: LD_INT 4
16316: PUSH
16317: FOR_TO
16318: IFFALSE 16403
// begin uc_side := 6 ;
16320: LD_ADDR_OWVAR 20
16324: PUSH
16325: LD_INT 6
16327: ST_TO_ADDR
// uc_nation := 3 ;
16328: LD_ADDR_OWVAR 21
16332: PUSH
16333: LD_INT 3
16335: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
16336: LD_INT 0
16338: PPUSH
16339: LD_INT 7
16341: PPUSH
16342: CALL_OW 381
// un := CreateHuman ;
16346: LD_ADDR_VAR 0 4
16350: PUSH
16351: CALL_OW 44
16355: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16356: LD_VAR 0 4
16360: PPUSH
16361: LD_INT 122
16363: PPUSH
16364: LD_INT 89
16366: PPUSH
16367: LD_INT 3
16369: PPUSH
16370: LD_INT 0
16372: PPUSH
16373: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16377: LD_VAR 0 4
16381: PPUSH
16382: LD_INT 88
16384: PPUSH
16385: LD_INT 42
16387: PPUSH
16388: CALL_OW 114
// AddComHold ( un ) ;
16392: LD_VAR 0 4
16396: PPUSH
16397: CALL_OW 200
// end ;
16401: GO 16317
16403: POP
16404: POP
// PrepareScientist ( false , 6 ) ;
16405: LD_INT 0
16407: PPUSH
16408: LD_INT 6
16410: PPUSH
16411: CALL_OW 384
// un := CreateHuman ;
16415: LD_ADDR_VAR 0 4
16419: PUSH
16420: CALL_OW 44
16424: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16425: LD_VAR 0 4
16429: PPUSH
16430: LD_INT 122
16432: PPUSH
16433: LD_INT 89
16435: PPUSH
16436: LD_INT 3
16438: PPUSH
16439: LD_INT 0
16441: PPUSH
16442: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16446: LD_VAR 0 4
16450: PPUSH
16451: LD_INT 91
16453: PPUSH
16454: LD_INT 48
16456: PPUSH
16457: CALL_OW 111
// end ; end ;
16461: LD_VAR 0 1
16465: RET
// every 0 0$1 trigger invincibleMode do var i ;
16466: LD_EXP 5
16470: IFFALSE 16567
16472: GO 16474
16474: DISABLE
16475: LD_INT 0
16477: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16478: LD_ADDR_VAR 0 1
16482: PUSH
16483: LD_INT 22
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 2
16495: PUSH
16496: LD_INT 21
16498: PUSH
16499: LD_INT 3
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 21
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 3
16523: PUSH
16524: LD_INT 24
16526: PUSH
16527: LD_INT 900
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: LIST
16542: PPUSH
16543: CALL_OW 69
16547: PUSH
16548: FOR_IN
16549: IFFALSE 16565
// SetLives ( i , 900 ) ;
16551: LD_VAR 0 1
16555: PPUSH
16556: LD_INT 900
16558: PPUSH
16559: CALL_OW 234
16563: GO 16548
16565: POP
16566: POP
// end ;
16567: PPOPN 1
16569: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16570: LD_OWVAR 1
16574: PUSH
16575: LD_INT 14700
16577: GREATER
16578: IFFALSE 18206
16580: GO 16582
16582: DISABLE
16583: LD_INT 0
16585: PPUSH
16586: PPUSH
// begin PrepareSupportFromDelta ;
16587: CALL 4146 0 0
// deltaSupport := true ;
16591: LD_ADDR_EXP 6
16595: PUSH
16596: LD_INT 1
16598: ST_TO_ADDR
// dialog := false ;
16599: LD_ADDR_VAR 0 1
16603: PUSH
16604: LD_INT 0
16606: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16607: LD_EXP 21
16611: PPUSH
16612: CALL_OW 302
16616: IFFALSE 16638
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16618: LD_ADDR_VAR 0 1
16622: PUSH
16623: LD_EXP 21
16627: PPUSH
16628: LD_STRING D2-Glad-1
16630: PPUSH
16631: CALL_OW 88
16635: ST_TO_ADDR
16636: GO 16720
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16638: LD_ADDR_VAR 0 1
16642: PUSH
16643: LD_INT 22
16645: PUSH
16646: LD_INT 1
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 120
16655: PUSH
16656: LD_INT 107
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 21
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 23
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: PPUSH
16689: CALL_OW 69
16693: PUSH
16694: LD_EXP 27
16698: PUSH
16699: LD_EXP 26
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: DIFF
16708: PPUSH
16709: LD_STRING D2-Sol1-1
16711: PPUSH
16712: LD_STRING D2-FSol1-1
16714: PPUSH
16715: CALL 20501 0 3
16719: ST_TO_ADDR
// if dialog then
16720: LD_VAR 0 1
16724: IFFALSE 16831
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16726: LD_EXP 16
16730: PPUSH
16731: CALL_OW 302
16735: IFFALSE 16747
16737: PUSH
16738: LD_EXP 13
16742: PUSH
16743: LD_INT 1
16745: EQUAL
16746: AND
16747: IFFALSE 16761
// Say ( Donaldson , D2-Don-1 ) ;
16749: LD_EXP 16
16753: PPUSH
16754: LD_STRING D2-Don-1
16756: PPUSH
16757: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16761: LD_EXP 15
16765: PPUSH
16766: CALL_OW 302
16770: IFFALSE 16782
16772: PUSH
16773: LD_EXP 13
16777: PUSH
16778: LD_INT 2
16780: EQUAL
16781: AND
16782: IFFALSE 16796
// Say ( Brown , D2-Brown-1 ) ;
16784: LD_EXP 15
16788: PPUSH
16789: LD_STRING D2-Brown-1
16791: PPUSH
16792: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16796: LD_EXP 25
16800: PPUSH
16801: CALL_OW 302
16805: IFFALSE 16817
16807: PUSH
16808: LD_EXP 13
16812: PUSH
16813: LD_INT 3
16815: EQUAL
16816: AND
16817: IFFALSE 16831
// Say ( Houten , D2-VanH-1 ) ;
16819: LD_EXP 25
16823: PPUSH
16824: LD_STRING D2-VanH-1
16826: PPUSH
16827: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16831: LD_INT 3
16833: PPUSH
16834: CALL 13189 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16838: LD_STRING 07_time
16840: PPUSH
16841: LD_INT 18900
16843: PPUSH
16844: CALL_OW 30
16848: PUSH
16849: LD_INT 3
16851: DIV
16852: PPUSH
16853: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16857: LD_INT 34
16859: PPUSH
16860: LD_INT 1
16862: PPUSH
16863: CALL_OW 321
16867: PUSH
16868: LD_INT 2
16870: EQUAL
16871: IFFALSE 16880
// SetAchievement ( ACH_HEAVYGUN ) ;
16873: LD_STRING ACH_HEAVYGUN
16875: PPUSH
16876: CALL_OW 543
// PrepareMacmillanSquad ;
16880: CALL 4922 0 0
// wait ( 0 0$1 ) ;
16884: LD_INT 35
16886: PPUSH
16887: CALL_OW 67
// DialogueOn ;
16891: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16895: LD_EXP 14
16899: PPUSH
16900: CALL_OW 87
// dwait ( 0 0$2 ) ;
16904: LD_INT 70
16906: PPUSH
16907: CALL_OW 68
// DialogueOff ;
16911: CALL_OW 7
// wait ( 0 0$10 ) ;
16915: LD_INT 350
16917: PPUSH
16918: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16922: LD_INT 1
16924: PPUSH
16925: CALL_OW 427
// p := 0 ;
16929: LD_ADDR_VAR 0 2
16933: PUSH
16934: LD_INT 0
16936: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16937: LD_INT 35
16939: PPUSH
16940: CALL_OW 67
// p := Inc ( p ) ;
16944: LD_ADDR_VAR 0 2
16948: PUSH
16949: LD_VAR 0 2
16953: PPUSH
16954: CALL 82777 0 1
16958: ST_TO_ADDR
// if p > 300 then
16959: LD_VAR 0 2
16963: PUSH
16964: LD_INT 300
16966: GREATER
16967: IFFALSE 16971
// exit ;
16969: GO 18206
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16971: LD_EXP 14
16975: PPUSH
16976: LD_INT 15
16978: PPUSH
16979: CALL_OW 308
16983: IFTRUE 17004
16985: PUSH
16986: LD_EXP 14
16990: PPUSH
16991: CALL_OW 310
16995: PPUSH
16996: LD_INT 15
16998: PPUSH
16999: CALL_OW 308
17003: OR
17004: IFTRUE 17026
17006: PUSH
17007: LD_EXP 14
17011: PPUSH
17012: LD_EXP 27
17016: PPUSH
17017: CALL_OW 296
17021: PUSH
17022: LD_INT 10
17024: LESS
17025: OR
17026: IFTRUE 17093
17028: PUSH
17029: LD_INT 22
17031: PUSH
17032: LD_INT 1
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 2
17041: PUSH
17042: LD_INT 120
17044: PUSH
17045: LD_INT 106
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 120
17054: PUSH
17055: LD_INT 107
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 91
17069: PUSH
17070: LD_EXP 14
17074: PUSH
17075: LD_INT 12
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: OR
17093: IFFALSE 16937
// DialogueOn ;
17095: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
17099: LD_EXP 14
17103: PPUSH
17104: LD_STRING D3-JMM-1
17106: PPUSH
17107: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17111: LD_EXP 16
17115: PPUSH
17116: CALL_OW 302
17120: IFFALSE 17132
17122: PUSH
17123: LD_EXP 13
17127: PUSH
17128: LD_INT 1
17130: EQUAL
17131: AND
17132: IFFALSE 17148
// Say ( Donaldson , D3-Don-1 ) else
17134: LD_EXP 16
17138: PPUSH
17139: LD_STRING D3-Don-1
17141: PPUSH
17142: CALL_OW 88
17146: GO 17244
// begin if gammaCommander = 1 then
17148: LD_EXP 13
17152: PUSH
17153: LD_INT 1
17155: EQUAL
17156: IFFALSE 17244
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
17158: LD_INT 22
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 21
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 23
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 120
17190: PUSH
17191: LD_INT 106
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 26
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: PPUSH
17215: CALL_OW 69
17219: PPUSH
17220: LD_STRING D3-Sol1-1
17222: PPUSH
17223: LD_STRING 
17225: PPUSH
17226: CALL 20501 0 3
17230: IFFALSE 17244
// Say ( JMM , D3-JMM-2 ) ;
17232: LD_EXP 14
17236: PPUSH
17237: LD_STRING D3-JMM-2
17239: PPUSH
17240: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17244: LD_EXP 15
17248: PPUSH
17249: CALL_OW 302
17253: IFFALSE 17265
17255: PUSH
17256: LD_EXP 13
17260: PUSH
17261: LD_INT 2
17263: EQUAL
17264: AND
17265: IFFALSE 17281
// Say ( Brown , D3-Brown-1 ) else
17267: LD_EXP 15
17271: PPUSH
17272: LD_STRING D3-Brown-1
17274: PPUSH
17275: CALL_OW 88
17279: GO 17377
// begin if gammaCommander = 2 then
17281: LD_EXP 13
17285: PUSH
17286: LD_INT 2
17288: EQUAL
17289: IFFALSE 17377
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
17291: LD_INT 22
17293: PUSH
17294: LD_INT 1
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 21
17303: PUSH
17304: LD_INT 1
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 23
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 120
17323: PUSH
17324: LD_INT 106
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 26
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 69
17352: PPUSH
17353: LD_STRING D3-Sol1-1a
17355: PPUSH
17356: LD_STRING 
17358: PPUSH
17359: CALL 20501 0 3
17363: IFFALSE 17377
// Say ( JMM , D3-JMM-2 ) ;
17365: LD_EXP 14
17369: PPUSH
17370: LD_STRING D3-JMM-2
17372: PPUSH
17373: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17377: LD_EXP 25
17381: PPUSH
17382: CALL_OW 302
17386: IFFALSE 17398
17388: PUSH
17389: LD_EXP 13
17393: PUSH
17394: LD_INT 3
17396: EQUAL
17397: AND
17398: IFFALSE 17414
// Say ( Houten , D3-VanH-1 ) else
17400: LD_EXP 25
17404: PPUSH
17405: LD_STRING D3-VanH-1
17407: PPUSH
17408: CALL_OW 88
17412: GO 17510
// begin if gammaCommander = 3 then
17414: LD_EXP 13
17418: PUSH
17419: LD_INT 3
17421: EQUAL
17422: IFFALSE 17510
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17424: LD_INT 22
17426: PUSH
17427: LD_INT 1
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 21
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 23
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 120
17456: PUSH
17457: LD_INT 106
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 26
17466: PUSH
17467: LD_INT 1
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: PPUSH
17481: CALL_OW 69
17485: PPUSH
17486: LD_STRING D3-Sol1-1b
17488: PPUSH
17489: LD_STRING 
17491: PPUSH
17492: CALL 20501 0 3
17496: IFFALSE 17510
// Say ( JMM , D3-JMM-2 ) ;
17498: LD_EXP 14
17502: PPUSH
17503: LD_STRING D3-JMM-2
17505: PPUSH
17506: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17510: LD_EXP 27
17514: PPUSH
17515: CALL_OW 302
17519: IFFALSE 17547
// begin Say ( Joan , D3a-Joan-1 ) ;
17521: LD_EXP 27
17525: PPUSH
17526: LD_STRING D3a-Joan-1
17528: PPUSH
17529: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17533: LD_EXP 14
17537: PPUSH
17538: LD_STRING D3a-JMM-1
17540: PPUSH
17541: CALL_OW 88
// end else
17545: GO 17981
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17547: LD_STRING 06_JoanStatus_1
17549: PPUSH
17550: LD_INT 0
17552: PPUSH
17553: CALL_OW 30
17557: PUSH
17558: LD_INT 1
17560: EQUAL
17561: IFFALSE 17981
// begin Say ( JMM , D3b-JMM-1 ) ;
17563: LD_EXP 14
17567: PPUSH
17568: LD_STRING D3b-JMM-1
17570: PPUSH
17571: CALL_OW 88
// dialog := false ;
17575: LD_ADDR_VAR 0 1
17579: PUSH
17580: LD_INT 0
17582: ST_TO_ADDR
// if gammaCommander = 1 then
17583: LD_EXP 13
17587: PUSH
17588: LD_INT 1
17590: EQUAL
17591: IFFALSE 17702
// if IsOK ( Donaldson ) then
17593: LD_EXP 16
17597: PPUSH
17598: CALL_OW 302
17602: IFFALSE 17624
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17604: LD_ADDR_VAR 0 1
17608: PUSH
17609: LD_EXP 16
17613: PPUSH
17614: LD_STRING D3b-Don-1
17616: PPUSH
17617: CALL_OW 88
17621: ST_TO_ADDR
17622: GO 17702
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_INT 22
17631: PUSH
17632: LD_INT 1
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 21
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 23
17651: PUSH
17652: LD_INT 1
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 120
17661: PUSH
17662: LD_INT 106
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 26
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: PPUSH
17686: CALL_OW 69
17690: PPUSH
17691: LD_STRING D3b-Sol1-1
17693: PPUSH
17694: LD_STRING 
17696: PPUSH
17697: CALL 20501 0 3
17701: ST_TO_ADDR
// if gammaCommander = 2 then
17702: LD_EXP 13
17706: PUSH
17707: LD_INT 2
17709: EQUAL
17710: IFFALSE 17821
// if IsOk ( Brown ) then
17712: LD_EXP 15
17716: PPUSH
17717: CALL_OW 302
17721: IFFALSE 17743
// dialog := Say ( Brown , D3b-Brown-1 ) else
17723: LD_ADDR_VAR 0 1
17727: PUSH
17728: LD_EXP 15
17732: PPUSH
17733: LD_STRING D3b-Brown-1
17735: PPUSH
17736: CALL_OW 88
17740: ST_TO_ADDR
17741: GO 17821
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17743: LD_ADDR_VAR 0 1
17747: PUSH
17748: LD_INT 22
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 21
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 23
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 120
17780: PUSH
17781: LD_INT 106
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 26
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: PPUSH
17805: CALL_OW 69
17809: PPUSH
17810: LD_STRING D3b-Sol1-1
17812: PPUSH
17813: LD_STRING 
17815: PPUSH
17816: CALL 20501 0 3
17820: ST_TO_ADDR
// if gammaCommander = 3 then
17821: LD_EXP 13
17825: PUSH
17826: LD_INT 3
17828: EQUAL
17829: IFFALSE 17940
// if IsOk ( Houten ) then
17831: LD_EXP 25
17835: PPUSH
17836: CALL_OW 302
17840: IFFALSE 17862
// dialog := Say ( Houten , D3b-VanH-1 ) else
17842: LD_ADDR_VAR 0 1
17846: PUSH
17847: LD_EXP 25
17851: PPUSH
17852: LD_STRING D3b-VanH-1
17854: PPUSH
17855: CALL_OW 88
17859: ST_TO_ADDR
17860: GO 17940
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17862: LD_ADDR_VAR 0 1
17866: PUSH
17867: LD_INT 22
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 21
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 23
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 120
17899: PUSH
17900: LD_INT 106
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 26
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: PPUSH
17924: CALL_OW 69
17928: PPUSH
17929: LD_STRING D3b-Sol1-1
17931: PPUSH
17932: LD_STRING 
17934: PPUSH
17935: CALL 20501 0 3
17939: ST_TO_ADDR
// if dialog then
17940: LD_VAR 0 1
17944: IFFALSE 17981
// begin Say ( JMM , D3b-JMM-2 ) ;
17946: LD_EXP 14
17950: PPUSH
17951: LD_STRING D3b-JMM-2
17953: PPUSH
17954: CALL_OW 88
// if IsOK ( Lisa ) then
17958: LD_EXP 19
17962: PPUSH
17963: CALL_OW 302
17967: IFFALSE 17981
// Say ( Lisa , D3b-Lisa-2 ) ;
17969: LD_EXP 19
17973: PPUSH
17974: LD_STRING D3b-Lisa-2
17976: PPUSH
17977: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17981: LD_EXP 7
17985: NOT
17986: IFFALSE 17994
// begin DialogueOff ;
17988: CALL_OW 7
// exit ;
17992: GO 18206
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17994: LD_INT 22
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 21
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 23
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 120
18029: PUSH
18030: LD_INT 106
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 120
18039: PUSH
18040: LD_INT 107
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 26
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: PPUSH
18069: CALL_OW 69
18073: PPUSH
18074: LD_STRING DCa-Sol1-1
18076: PPUSH
18077: LD_STRING 
18079: PPUSH
18080: CALL 20501 0 3
18084: IFFALSE 18098
// Say ( JMM , DCb-JMM-1 ) ;
18086: LD_EXP 14
18090: PPUSH
18091: LD_STRING DCb-JMM-1
18093: PPUSH
18094: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
18098: LD_INT 22
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 21
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 23
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: LD_INT 120
18133: PUSH
18134: LD_INT 106
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 120
18143: PUSH
18144: LD_INT 107
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 26
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: PPUSH
18173: CALL_OW 69
18177: PPUSH
18178: LD_STRING DCb-Sol1-1
18180: PPUSH
18181: LD_STRING 
18183: PPUSH
18184: CALL 20501 0 3
18188: IFFALSE 18202
// Say ( JMM , DCb-JMM-2 ) ;
18190: LD_EXP 14
18194: PPUSH
18195: LD_STRING DCb-JMM-2
18197: PPUSH
18198: CALL_OW 88
// DialogueOff ;
18202: CALL_OW 7
// end ;
18206: PPOPN 2
18208: END
// export function DialogSeenComputer ( un ) ; begin
18209: LD_INT 0
18211: PPUSH
// if jmmArrival then
18212: LD_EXP 8
18216: IFFALSE 18220
// exit ;
18218: GO 18286
// CenterOnUnits ( un ) ;
18220: LD_VAR 0 1
18224: PPUSH
18225: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
18229: LD_INT 22
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 2
18241: PUSH
18242: LD_INT 120
18244: PUSH
18245: LD_INT 106
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 120
18254: PUSH
18255: LD_INT 107
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: PPUSH
18276: LD_STRING DC-Sol1-1
18278: PPUSH
18279: LD_STRING DC-FSol1-1
18281: PPUSH
18282: CALL 20501 0 3
// end ;
18286: LD_VAR 0 2
18290: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
18291: LD_EXP 8
18295: IFFALSE 18307
18297: PUSH
18298: LD_OWVAR 1
18302: PUSH
18303: LD_INT 48300
18305: GREATEREQUAL
18306: AND
18307: IFFALSE 18320
18309: PUSH
18310: LD_EXP 14
18314: PPUSH
18315: CALL_OW 302
18319: AND
18320: IFFALSE 18810
18322: GO 18324
18324: DISABLE
// begin wait ( 2 2$00 ) ;
18325: LD_INT 4200
18327: PPUSH
18328: CALL_OW 67
// DialogueOn ;
18332: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18336: LD_EXP 30
18340: PPUSH
18341: LD_STRING D4-Pow-1
18343: PPUSH
18344: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18348: LD_EXP 14
18352: PPUSH
18353: LD_STRING D4-JMM-1
18355: PPUSH
18356: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18360: LD_EXP 30
18364: PPUSH
18365: LD_STRING D4-Pow-2
18367: PPUSH
18368: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18372: LD_EXP 14
18376: PPUSH
18377: LD_STRING D4-JMM-2
18379: PPUSH
18380: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18384: LD_EXP 30
18388: PPUSH
18389: LD_STRING D4-Pow-3
18391: PPUSH
18392: CALL_OW 94
// DialogueOff ;
18396: CALL_OW 7
// wait ( 1 1$00 ) ;
18400: LD_INT 2100
18402: PPUSH
18403: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18407: LD_INT 1
18409: PPUSH
18410: CALL_OW 427
// wait ( 7 7$30 ) ;
18414: LD_INT 15750
18416: PPUSH
18417: CALL_OW 67
// DialogueOn ;
18421: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18425: LD_EXP 30
18429: PPUSH
18430: LD_STRING D4a-Pow-1
18432: PPUSH
18433: CALL_OW 94
// DialogueOff ;
18437: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18441: LD_INT 1
18443: PPUSH
18444: CALL_OW 427
// SikorskiCounter ;
18448: CALL 20285 0 0
// PrepareSikorsky ;
18452: CALL 6413 0 0
// CenterNowOnUnits ( Sikorski ) ;
18456: LD_EXP 28
18460: PPUSH
18461: CALL_OW 87
// DialogueOn ;
18465: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18469: LD_EXP 28
18473: PPUSH
18474: LD_STRING D5-Sik-1
18476: PPUSH
18477: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18481: LD_INT 11
18483: PPUSH
18484: LD_INT 22
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PPUSH
18494: CALL_OW 70
18498: PUSH
18499: LD_INT 1
18501: GREATER
18502: IFTRUE 18514
18504: PUSH
18505: LD_INT 28
18507: PPUSH
18508: CALL_OW 302
18512: NOT
18513: OR
18514: IFTRUE 18529
18516: PUSH
18517: LD_INT 28
18519: PPUSH
18520: CALL_OW 255
18524: PUSH
18525: LD_INT 1
18527: EQUAL
18528: OR
18529: IFFALSE 18581
// begin Say ( JMM , D5-JMM-1 ) ;
18531: LD_EXP 14
18535: PPUSH
18536: LD_STRING D5-JMM-1
18538: PPUSH
18539: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18543: LD_EXP 28
18547: PPUSH
18548: LD_STRING D7a-Sik-1
18550: PPUSH
18551: CALL_OW 88
// DialogueOff ;
18555: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18559: LD_STRING M2
18561: PPUSH
18562: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18566: LD_INT 1
18568: PPUSH
18569: CALL_OW 427
// SikorskiAttack ;
18573: CALL 8036 0 0
// exit ;
18577: GO 18810
// end else
18579: GO 18626
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18581: LD_INT 15
18583: PPUSH
18584: LD_INT 81
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PPUSH
18594: CALL_OW 70
18598: IFFALSE 18614
// Say ( JMM , D5-JMM-1b ) else
18600: LD_EXP 14
18604: PPUSH
18605: LD_STRING D5-JMM-1b
18607: PPUSH
18608: CALL_OW 88
18612: GO 18626
// Say ( JMM , D5-JMM-1a ) ;
18614: LD_EXP 14
18618: PPUSH
18619: LD_STRING D5-JMM-1a
18621: PPUSH
18622: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18626: LD_EXP 28
18630: PPUSH
18631: LD_STRING D5-Sik-2
18633: PPUSH
18634: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18638: LD_STRING QSikorski
18640: PPUSH
18641: CALL_OW 97
18645: PUSH
18646: LD_INT 1
18648: DOUBLE
18649: EQUAL
18650: IFTRUE 18654
18652: GO 18677
18654: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18655: LD_EXP 28
18659: PPUSH
18660: LD_STRING D5a-Sik-1
18662: PPUSH
18663: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18667: LD_ADDR_EXP 4
18671: PUSH
18672: LD_INT 2100
18674: ST_TO_ADDR
// end ; 2 :
18675: GO 18764
18677: LD_INT 2
18679: DOUBLE
18680: EQUAL
18681: IFTRUE 18685
18683: GO 18708
18685: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18686: LD_EXP 28
18690: PPUSH
18691: LD_STRING D5b-Sik-1
18693: PPUSH
18694: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18698: LD_ADDR_EXP 4
18702: PUSH
18703: LD_INT 10500
18705: ST_TO_ADDR
// end ; 3 :
18706: GO 18764
18708: LD_INT 3
18710: DOUBLE
18711: EQUAL
18712: IFTRUE 18716
18714: GO 18763
18716: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18717: LD_EXP 28
18721: PPUSH
18722: LD_STRING D5c-Sik-1
18724: PPUSH
18725: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18729: LD_EXP 14
18733: PPUSH
18734: LD_STRING D5c-JMM-1
18736: PPUSH
18737: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18741: LD_EXP 28
18745: PPUSH
18746: LD_STRING D5c-Sik-2
18748: PPUSH
18749: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18753: LD_ADDR_EXP 4
18757: PUSH
18758: LD_INT 10500
18760: ST_TO_ADDR
// end ; end ;
18761: GO 18764
18763: POP
// DialogueOff ;
18764: CALL_OW 7
// SikorskiWaitCounter ;
18768: CALL 20348 0 0
// DialogueOn ;
18772: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18776: LD_EXP 28
18780: PPUSH
18781: LD_STRING D6-Sik-1
18783: PPUSH
18784: CALL_OW 88
// DialogueOff ;
18788: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18792: LD_STRING M2
18794: PPUSH
18795: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18799: LD_INT 1
18801: PPUSH
18802: CALL_OW 427
// SikorskiAttack ;
18806: CALL 8036 0 0
// end ;
18810: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18811: LD_INT 11
18813: PPUSH
18814: LD_INT 22
18816: PUSH
18817: LD_INT 4
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PPUSH
18824: CALL_OW 70
18828: PUSH
18829: LD_INT 2
18831: GREATER
18832: IFFALSE 19031
18834: GO 18836
18836: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18837: LD_EXP 28
18841: PPUSH
18842: LD_STRING D7-Sik-1
18844: PPUSH
18845: CALL_OW 88
// wait ( 0 0$10 ) ;
18849: LD_INT 350
18851: PPUSH
18852: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18856: LD_EXP 14
18860: PPUSH
18861: LD_INT 11
18863: PPUSH
18864: CALL_OW 308
18868: IFTRUE 18889
18870: PUSH
18871: LD_EXP 14
18875: PPUSH
18876: CALL_OW 310
18880: PPUSH
18881: LD_INT 11
18883: PPUSH
18884: CALL_OW 308
18888: OR
18889: IFFALSE 18913
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18891: LD_EXP 28
18895: PPUSH
18896: LD_STRING D7a-Sik-1
18898: PPUSH
18899: CALL_OW 88
// sikorskiStatus := 1 ;
18903: LD_ADDR_EXP 9
18907: PUSH
18908: LD_INT 1
18910: ST_TO_ADDR
// end else
18911: GO 18933
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18913: LD_EXP 28
18917: PPUSH
18918: LD_STRING D7b-Sik-1
18920: PPUSH
18921: CALL_OW 88
// sikorskiStatus := 0 ;
18925: LD_ADDR_EXP 9
18929: PUSH
18930: LD_INT 0
18932: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18933: LD_INT 1575
18935: PPUSH
18936: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18940: LD_EXP 14
18944: PPUSH
18945: LD_INT 11
18947: PPUSH
18948: CALL_OW 308
18952: IFTRUE 18973
18954: PUSH
18955: LD_EXP 14
18959: PPUSH
18960: CALL_OW 310
18964: PPUSH
18965: LD_INT 11
18967: PPUSH
18968: CALL_OW 308
18972: OR
18973: IFTRUE 18987
18975: PUSH
18976: LD_EXP 14
18980: PPUSH
18981: CALL_OW 302
18985: NOT
18986: OR
18987: IFFALSE 19011
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18989: LD_EXP 28
18993: PPUSH
18994: LD_STRING D7a-Sik-1
18996: PPUSH
18997: CALL_OW 88
// sikorskiStatus := 1 ;
19001: LD_ADDR_EXP 9
19005: PUSH
19006: LD_INT 1
19008: ST_TO_ADDR
// end else
19009: GO 19031
// begin Say ( Sikorski , D7b-Sik-1 ) ;
19011: LD_EXP 28
19015: PPUSH
19016: LD_STRING D7b-Sik-1
19018: PPUSH
19019: CALL_OW 88
// sikorskiStatus := 0 ;
19023: LD_ADDR_EXP 9
19027: PUSH
19028: LD_INT 0
19030: ST_TO_ADDR
// end ; end ;
19031: END
// export function SikorskiKilledInAction ; begin
19032: LD_INT 0
19034: PPUSH
// wait ( 0 0$2 ) ;
19035: LD_INT 70
19037: PPUSH
19038: CALL_OW 67
// DialogueOn ;
19042: CALL_OW 6
// dwait ( 0 0$1 ) ;
19046: LD_INT 35
19048: PPUSH
19049: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
19053: LD_EXP 30
19057: PPUSH
19058: LD_STRING D8b-Pow-1
19060: PPUSH
19061: CALL_OW 94
// YouLost ( Dismissed ) ;
19065: LD_STRING Dismissed
19067: PPUSH
19068: CALL_OW 104
// DialogueOff ;
19072: CALL_OW 7
// end ;
19076: LD_VAR 0 1
19080: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
19081: LD_EXP 8
19085: IFFALSE 19096
19087: PUSH
19088: LD_INT 28
19090: PPUSH
19091: CALL_OW 301
19095: AND
19096: IFFALSE 19109
19098: PUSH
19099: LD_EXP 32
19103: PPUSH
19104: CALL_OW 301
19108: AND
19109: IFFALSE 19152
19111: PUSH
19112: LD_INT 22
19114: PUSH
19115: LD_INT 3
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 50
19124: PUSH
19125: EMPTY
19126: LIST
19127: PUSH
19128: LD_INT 30
19130: PUSH
19131: LD_INT 5
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: LIST
19142: PPUSH
19143: CALL_OW 69
19147: PUSH
19148: LD_INT 0
19150: EQUAL
19151: AND
19152: IFFALSE 20282
19154: GO 19156
19156: DISABLE
19157: LD_INT 0
19159: PPUSH
19160: PPUSH
19161: PPUSH
// begin Video ( true ) ;
19162: LD_INT 1
19164: PPUSH
19165: CALL 81376 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
19169: LD_INT 104
19171: PPUSH
19172: LD_INT 108
19174: PPUSH
19175: LD_INT 1
19177: PPUSH
19178: LD_INT 36
19180: NEG
19181: PPUSH
19182: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
19186: LD_INT 104
19188: PPUSH
19189: LD_INT 108
19191: PPUSH
19192: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
19196: LD_ADDR_VAR 0 2
19200: PUSH
19201: LD_INT 22
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 21
19213: PUSH
19214: LD_INT 1
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 3
19223: PUSH
19224: LD_INT 24
19226: PUSH
19227: LD_INT 249
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: PPUSH
19243: CALL_OW 69
19247: ST_TO_ADDR
// if tmp then
19248: LD_VAR 0 2
19252: IFFALSE 19283
// for i in tmp do
19254: LD_ADDR_VAR 0 1
19258: PUSH
19259: LD_VAR 0 2
19263: PUSH
19264: FOR_IN
19265: IFFALSE 19281
// SetLives ( i , 249 ) ;
19267: LD_VAR 0 1
19271: PPUSH
19272: LD_INT 249
19274: PPUSH
19275: CALL_OW 234
19279: GO 19264
19281: POP
19282: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19283: LD_ADDR_VAR 0 1
19287: PUSH
19288: LD_INT 22
19290: PUSH
19291: LD_INT 3
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 21
19300: PUSH
19301: LD_INT 1
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PPUSH
19312: CALL_OW 69
19316: PUSH
19317: FOR_IN
19318: IFFALSE 19361
// begin ComExit ( i ) ;
19320: LD_VAR 0 1
19324: PPUSH
19325: CALL 81802 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
19329: LD_VAR 0 1
19333: PPUSH
19334: LD_INT 131
19336: PPUSH
19337: LD_INT 127
19339: PPUSH
19340: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
19344: LD_VAR 0 1
19348: PPUSH
19349: LD_INT 141
19351: PPUSH
19352: LD_INT 147
19354: PPUSH
19355: CALL_OW 171
// end ;
19359: GO 19317
19361: POP
19362: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
19363: LD_INT 81
19365: PUSH
19366: LD_INT 3
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 3
19375: PUSH
19376: LD_INT 21
19378: PUSH
19379: LD_INT 3
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PPUSH
19394: CALL_OW 69
19398: PPUSH
19399: LD_INT 131
19401: PPUSH
19402: LD_INT 127
19404: PPUSH
19405: CALL_OW 174
// wait ( 0 0$08 ) ;
19409: LD_INT 280
19411: PPUSH
19412: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19416: LD_INT 22
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 21
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 23
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 50
19448: PUSH
19449: EMPTY
19450: LIST
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: PPUSH
19458: CALL_OW 69
19462: PPUSH
19463: CALL 45428 0 1
19467: PUSH
19468: LD_INT 7
19470: LESS
19471: IFFALSE 19482
// begin YouLost ( LostVictory ) ;
19473: LD_STRING LostVictory
19475: PPUSH
19476: CALL_OW 104
// exit ;
19480: GO 20282
// end ; DialogueOn ;
19482: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19486: LD_EXP 9
19490: PUSH
19491: LD_INT 1
19493: EQUAL
19494: IFFALSE 19507
19496: PUSH
19497: LD_EXP 28
19501: PPUSH
19502: CALL_OW 302
19506: AND
19507: IFFALSE 19521
// Say ( Sikorski , D9-Sik-1 ) ;
19509: LD_EXP 28
19513: PPUSH
19514: LD_STRING D9-Sik-1
19516: PPUSH
19517: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19521: LD_INT 22
19523: PUSH
19524: LD_INT 4
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 69
19535: PUSH
19536: LD_INT 0
19538: EQUAL
19539: IFFALSE 19547
19541: PUSH
19542: LD_EXP 3
19546: AND
19547: IFFALSE 19556
// SetAchievement ( ACH_BLITZKRIEG ) ;
19549: LD_STRING ACH_BLITZKRIEG
19551: PPUSH
19552: CALL_OW 543
// if tick <= 45 45$10 then
19556: LD_OWVAR 1
19560: PUSH
19561: LD_INT 94850
19563: LESSEQUAL
19564: IFFALSE 19580
// begin wait ( 3 ) ;
19566: LD_INT 3
19568: PPUSH
19569: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19573: LD_STRING ACH_ASPEED_8
19575: PPUSH
19576: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19580: LD_STRING med1
19582: PPUSH
19583: LD_INT 1
19585: PPUSH
19586: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19590: LD_STRING med2
19592: PPUSH
19593: LD_INT 1
19595: PPUSH
19596: CALL_OW 101
// if sikorskiStatus = 1 then
19600: LD_EXP 9
19604: PUSH
19605: LD_INT 1
19607: EQUAL
19608: IFFALSE 19622
// AddMedal ( perfect , 1 ) else
19610: LD_STRING perfect
19612: PPUSH
19613: LD_INT 1
19615: PPUSH
19616: CALL_OW 101
19620: GO 19633
// AddMedal ( perfect , - 1 ) ;
19622: LD_STRING perfect
19624: PPUSH
19625: LD_INT 1
19627: NEG
19628: PPUSH
19629: CALL_OW 101
// if Difficulty >= 3 then
19633: LD_OWVAR 67
19637: PUSH
19638: LD_INT 3
19640: GREATEREQUAL
19641: IFFALSE 19653
// SetAchievementEX ( ACH_AMER , 8 ) ;
19643: LD_STRING ACH_AMER
19645: PPUSH
19646: LD_INT 8
19648: PPUSH
19649: CALL_OW 564
// GiveMedals ( Main ) ;
19653: LD_STRING Main
19655: PPUSH
19656: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19660: LD_INT 22
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 23
19672: PUSH
19673: LD_INT 1
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 21
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: PPUSH
19700: CALL_OW 43
// prefix := 08_ ;
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_STRING 08_
19711: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19712: LD_EXP 14
19716: PPUSH
19717: LD_VAR 0 3
19721: PUSH
19722: LD_STRING JMM
19724: STR
19725: PPUSH
19726: CALL_OW 38
// if IsLive ( Brown ) then
19730: LD_EXP 15
19734: PPUSH
19735: CALL_OW 300
19739: IFFALSE 19759
// SaveCharacters ( Brown , prefix & Brown ) ;
19741: LD_EXP 15
19745: PPUSH
19746: LD_VAR 0 3
19750: PUSH
19751: LD_STRING Brown
19753: STR
19754: PPUSH
19755: CALL_OW 38
// if IsLive ( Donaldson ) then
19759: LD_EXP 16
19763: PPUSH
19764: CALL_OW 300
19768: IFFALSE 19788
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19770: LD_EXP 16
19774: PPUSH
19775: LD_VAR 0 3
19779: PUSH
19780: LD_STRING Donaldson
19782: STR
19783: PPUSH
19784: CALL_OW 38
// if IsLive ( Bobby ) then
19788: LD_EXP 17
19792: PPUSH
19793: CALL_OW 300
19797: IFFALSE 19817
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19799: LD_EXP 17
19803: PPUSH
19804: LD_VAR 0 3
19808: PUSH
19809: LD_STRING Bobby
19811: STR
19812: PPUSH
19813: CALL_OW 38
// if IsLive ( Cyrus ) then
19817: LD_EXP 18
19821: PPUSH
19822: CALL_OW 300
19826: IFFALSE 19846
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19828: LD_EXP 18
19832: PPUSH
19833: LD_VAR 0 3
19837: PUSH
19838: LD_STRING Cyrus
19840: STR
19841: PPUSH
19842: CALL_OW 38
// if IsLive ( Lisa ) then
19846: LD_EXP 19
19850: PPUSH
19851: CALL_OW 300
19855: IFFALSE 19875
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19857: LD_EXP 19
19861: PPUSH
19862: LD_VAR 0 3
19866: PUSH
19867: LD_STRING Lisa
19869: STR
19870: PPUSH
19871: CALL_OW 38
// if IsLive ( Frank ) then
19875: LD_EXP 20
19879: PPUSH
19880: CALL_OW 300
19884: IFFALSE 19904
// SaveCharacters ( Frank , prefix & Frank ) ;
19886: LD_EXP 20
19890: PPUSH
19891: LD_VAR 0 3
19895: PUSH
19896: LD_STRING Frank
19898: STR
19899: PPUSH
19900: CALL_OW 38
// if IsLive ( Gladstone ) then
19904: LD_EXP 21
19908: PPUSH
19909: CALL_OW 300
19913: IFFALSE 19933
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19915: LD_EXP 21
19919: PPUSH
19920: LD_VAR 0 3
19924: PUSH
19925: LD_STRING Gladstone
19927: STR
19928: PPUSH
19929: CALL_OW 38
// if IsLive ( Kikuchi ) then
19933: LD_EXP 22
19937: PPUSH
19938: CALL_OW 300
19942: IFFALSE 19962
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19944: LD_EXP 22
19948: PPUSH
19949: LD_VAR 0 3
19953: PUSH
19954: LD_STRING Kikuchi
19956: STR
19957: PPUSH
19958: CALL_OW 38
// if IsLive ( Denis ) then
19962: LD_EXP 26
19966: PPUSH
19967: CALL_OW 300
19971: IFFALSE 19991
// SaveCharacters ( Denis , prefix & Denis ) ;
19973: LD_EXP 26
19977: PPUSH
19978: LD_VAR 0 3
19982: PUSH
19983: LD_STRING Denis
19985: STR
19986: PPUSH
19987: CALL_OW 38
// if IsLive ( Joan ) then
19991: LD_EXP 27
19995: PPUSH
19996: CALL_OW 300
20000: IFFALSE 20022
// SaveCharacters ( Joan , prefix & Joan ) else
20002: LD_EXP 27
20006: PPUSH
20007: LD_VAR 0 3
20011: PUSH
20012: LD_STRING Joan
20014: STR
20015: PPUSH
20016: CALL_OW 38
20020: GO 20029
// DeleteCharacters ( Joan ) ;
20022: LD_STRING Joan
20024: PPUSH
20025: CALL_OW 40
// if IsLive ( Khatam ) then
20029: LD_EXP 23
20033: PPUSH
20034: CALL_OW 300
20038: IFFALSE 20058
// SaveCharacters ( Khatam , prefix & Khatam ) ;
20040: LD_EXP 23
20044: PPUSH
20045: LD_VAR 0 3
20049: PUSH
20050: LD_STRING Khatam
20052: STR
20053: PPUSH
20054: CALL_OW 38
// if IsLive ( Houten ) then
20058: LD_EXP 25
20062: PPUSH
20063: CALL_OW 300
20067: IFFALSE 20094
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
20069: LD_STRING enableBioCharacter(BIO_HOUT)
20071: PPUSH
20072: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
20076: LD_EXP 25
20080: PPUSH
20081: LD_VAR 0 3
20085: PUSH
20086: LD_STRING Houten
20088: STR
20089: PPUSH
20090: CALL_OW 38
// end ; if IsLive ( Mike ) then
20094: LD_EXP 24
20098: PPUSH
20099: CALL_OW 300
20103: IFFALSE 20123
// SaveCharacters ( Mike , prefix & Mike ) ;
20105: LD_EXP 24
20109: PPUSH
20110: LD_VAR 0 3
20114: PUSH
20115: LD_STRING Mike
20117: STR
20118: PPUSH
20119: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
20123: LD_INT 22
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 21
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 23
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: LIST
20157: PPUSH
20158: CALL_OW 69
20162: PUSH
20163: LD_EXP 14
20167: PUSH
20168: LD_EXP 15
20172: PUSH
20173: LD_EXP 16
20177: PUSH
20178: LD_EXP 17
20182: PUSH
20183: LD_EXP 18
20187: PUSH
20188: LD_EXP 19
20192: PUSH
20193: LD_EXP 20
20197: PUSH
20198: LD_EXP 21
20202: PUSH
20203: LD_EXP 22
20207: PUSH
20208: LD_EXP 26
20212: PUSH
20213: LD_EXP 27
20217: PUSH
20218: LD_EXP 25
20222: PUSH
20223: LD_EXP 23
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: DIFF
20243: PPUSH
20244: LD_STRING 08_other_survivors
20246: PPUSH
20247: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
20251: LD_INT 15
20253: PPUSH
20254: CALL 7510 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
20258: LD_EXP 10
20262: NOT
20263: PPUSH
20264: LD_STRING 08_SikorskiStatus
20266: PPUSH
20267: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
20271: LD_STRING enableBioCharacter(BIO_SIK)
20273: PPUSH
20274: CALL_OW 559
// YouWin ;
20278: CALL_OW 103
// end ; end_of_file
20282: PPOPN 3
20284: END
// export function SikorskiCounter ; begin
20285: LD_INT 0
20287: PPUSH
// repeat wait ( 0 0$1 ) ;
20288: LD_INT 35
20290: PPUSH
20291: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
20295: LD_ADDR_OWVAR 47
20299: PUSH
20300: LD_STRING #Am08-2
20302: PUSH
20303: LD_EXP 3
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
20312: LD_ADDR_EXP 3
20316: PUSH
20317: LD_EXP 3
20321: PUSH
20322: LD_INT 35
20324: MINUS
20325: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
20326: LD_EXP 3
20330: PUSH
20331: LD_INT 0
20333: EQUAL
20334: IFFALSE 20288
// display_strings := [ ] ;
20336: LD_ADDR_OWVAR 47
20340: PUSH
20341: EMPTY
20342: ST_TO_ADDR
// end ;
20343: LD_VAR 0 1
20347: RET
// export function SikorskiWaitCounter ; begin
20348: LD_INT 0
20350: PPUSH
// repeat wait ( 0 0$1 ) ;
20351: LD_INT 35
20353: PPUSH
20354: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
20358: LD_ADDR_OWVAR 47
20362: PUSH
20363: LD_STRING #Am08-1
20365: PUSH
20366: LD_EXP 4
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
20375: LD_ADDR_EXP 4
20379: PUSH
20380: LD_EXP 4
20384: PUSH
20385: LD_INT 35
20387: MINUS
20388: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
20389: LD_EXP 4
20393: PUSH
20394: LD_INT 0
20396: EQUAL
20397: IFFALSE 20351
// display_strings := [ ] ;
20399: LD_ADDR_OWVAR 47
20403: PUSH
20404: EMPTY
20405: ST_TO_ADDR
// end ; end_of_file
20406: LD_VAR 0 1
20410: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
20411: LD_EXP 3
20415: IFFALSE 20455
20417: GO 20419
20419: DISABLE
// begin enable ;
20420: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20421: LD_INT 14
20423: PPUSH
20424: CALL_OW 435
20428: PUSH
20429: LD_INT 10
20431: LESS
20432: IFFALSE 20455
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20434: LD_INT 1
20436: PPUSH
20437: LD_INT 5
20439: PPUSH
20440: CALL_OW 12
20444: PPUSH
20445: LD_INT 14
20447: PPUSH
20448: LD_INT 1
20450: PPUSH
20451: CALL_OW 55
// end ;
20455: END
// every 0 0$55 trigger sikorskiArriveCounter do
20456: LD_EXP 3
20460: IFFALSE 20500
20462: GO 20464
20464: DISABLE
// begin enable ;
20465: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20466: LD_INT 13
20468: PPUSH
20469: CALL_OW 435
20473: PUSH
20474: LD_INT 10
20476: LESS
20477: IFFALSE 20500
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20479: LD_INT 1
20481: PPUSH
20482: LD_INT 5
20484: PPUSH
20485: CALL_OW 12
20489: PPUSH
20490: LD_INT 13
20492: PPUSH
20493: LD_INT 1
20495: PPUSH
20496: CALL_OW 55
// end ; end_of_file
20500: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20501: LD_INT 0
20503: PPUSH
20504: PPUSH
// if not units then
20505: LD_VAR 0 1
20509: NOT
20510: IFFALSE 20514
// exit ;
20512: GO 20639
// result := false ;
20514: LD_ADDR_VAR 0 4
20518: PUSH
20519: LD_INT 0
20521: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20522: LD_ADDR_VAR 0 5
20526: PUSH
20527: LD_VAR 0 1
20531: PPUSH
20532: LD_INT 26
20534: PUSH
20535: LD_INT 1
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PPUSH
20542: CALL_OW 72
20546: ST_TO_ADDR
// if tmp then
20547: LD_VAR 0 5
20551: IFFALSE 20577
// result := Say ( tmp [ 1 ] , menDialog ) ;
20553: LD_ADDR_VAR 0 4
20557: PUSH
20558: LD_VAR 0 5
20562: PUSH
20563: LD_INT 1
20565: ARRAY
20566: PPUSH
20567: LD_VAR 0 2
20571: PPUSH
20572: CALL_OW 88
20576: ST_TO_ADDR
// if not result then
20577: LD_VAR 0 4
20581: NOT
20582: IFFALSE 20639
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20584: LD_ADDR_VAR 0 5
20588: PUSH
20589: LD_VAR 0 1
20593: PPUSH
20594: LD_INT 26
20596: PUSH
20597: LD_INT 2
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PPUSH
20604: CALL_OW 72
20608: ST_TO_ADDR
// if tmp then
20609: LD_VAR 0 5
20613: IFFALSE 20639
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20615: LD_ADDR_VAR 0 4
20619: PUSH
20620: LD_VAR 0 5
20624: PUSH
20625: LD_INT 1
20627: ARRAY
20628: PPUSH
20629: LD_VAR 0 3
20633: PPUSH
20634: CALL_OW 88
20638: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20639: LD_VAR 0 4
20643: RET
// export globalGameSaveCounter ; every 0 0$1 do
20644: GO 20646
20646: DISABLE
// begin enable ;
20647: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20648: LD_STRING updateTimer(
20650: PUSH
20651: LD_OWVAR 1
20655: STR
20656: PUSH
20657: LD_STRING );
20659: STR
20660: PPUSH
20661: CALL_OW 559
// end ;
20665: END
// every 0 0$1 do
20666: GO 20668
20668: DISABLE
// begin globalGameSaveCounter := 0 ;
20669: LD_ADDR_EXP 37
20673: PUSH
20674: LD_INT 0
20676: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20677: LD_STRING setGameSaveCounter(0)
20679: PPUSH
20680: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20684: LD_STRING initStreamRollete();
20686: PPUSH
20687: CALL_OW 559
// InitStreamMode ;
20691: CALL 22043 0 0
// DefineStreamItems ( false ) ;
20695: LD_INT 0
20697: PPUSH
20698: CALL 22507 0 1
// end ;
20702: END
// export function SOS_MapStart ( ) ; begin
20703: LD_INT 0
20705: PPUSH
// if streamModeActive then
20706: LD_EXP 38
20710: IFFALSE 20719
// DefineStreamItems ( true ) ;
20712: LD_INT 1
20714: PPUSH
20715: CALL 22507 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
20719: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
20721: PPUSH
20722: CALL_OW 559
// UpdateLuaVariables ( ) ;
20726: CALL 20743 0 0
// UpdateFactoryWaypoints ( ) ;
20730: CALL 35629 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20734: CALL 35881 0 0
// end ;
20738: LD_VAR 0 1
20742: RET
// function UpdateLuaVariables ( ) ; begin
20743: LD_INT 0
20745: PPUSH
// if globalGameSaveCounter then
20746: LD_EXP 37
20750: IFFALSE 20784
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20752: LD_ADDR_EXP 37
20756: PUSH
20757: LD_EXP 37
20761: PPUSH
20762: CALL 82777 0 1
20766: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20767: LD_STRING setGameSaveCounter(
20769: PUSH
20770: LD_EXP 37
20774: STR
20775: PUSH
20776: LD_STRING )
20778: STR
20779: PPUSH
20780: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20784: LD_STRING setGameDifficulty(
20786: PUSH
20787: LD_OWVAR 67
20791: STR
20792: PUSH
20793: LD_STRING )
20795: STR
20796: PPUSH
20797: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20801: LD_STRING displayDifficulty(
20803: PUSH
20804: LD_OWVAR 67
20808: STR
20809: PUSH
20810: LD_STRING )
20812: STR
20813: PPUSH
20814: CALL_OW 559
// end ;
20818: LD_VAR 0 1
20822: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20823: LD_INT 0
20825: PPUSH
// if p2 = stream_mode then
20826: LD_VAR 0 2
20830: PUSH
20831: LD_INT 100
20833: EQUAL
20834: IFFALSE 21837
// begin if not StreamModeActive then
20836: LD_EXP 38
20840: NOT
20841: IFFALSE 20851
// StreamModeActive := true ;
20843: LD_ADDR_EXP 38
20847: PUSH
20848: LD_INT 1
20850: ST_TO_ADDR
// if p3 = 0 then
20851: LD_VAR 0 3
20855: PUSH
20856: LD_INT 0
20858: EQUAL
20859: IFFALSE 20865
// InitStreamMode ;
20861: CALL 22043 0 0
// if p3 = 1 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 1
20872: EQUAL
20873: IFFALSE 20883
// sRocket := true ;
20875: LD_ADDR_EXP 43
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 2 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 2
20890: EQUAL
20891: IFFALSE 20901
// sSpeed := true ;
20893: LD_ADDR_EXP 42
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 3 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 3
20908: EQUAL
20909: IFFALSE 20919
// sEngine := true ;
20911: LD_ADDR_EXP 44
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 4 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 4
20926: EQUAL
20927: IFFALSE 20937
// sSpec := true ;
20929: LD_ADDR_EXP 41
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 5 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 5
20944: EQUAL
20945: IFFALSE 20955
// sLevel := true ;
20947: LD_ADDR_EXP 45
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// if p3 = 6 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 6
20962: EQUAL
20963: IFFALSE 20973
// sArmoury := true ;
20965: LD_ADDR_EXP 46
20969: PUSH
20970: LD_INT 1
20972: ST_TO_ADDR
// if p3 = 7 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 7
20980: EQUAL
20981: IFFALSE 20991
// sRadar := true ;
20983: LD_ADDR_EXP 47
20987: PUSH
20988: LD_INT 1
20990: ST_TO_ADDR
// if p3 = 8 then
20991: LD_VAR 0 3
20995: PUSH
20996: LD_INT 8
20998: EQUAL
20999: IFFALSE 21009
// sBunker := true ;
21001: LD_ADDR_EXP 48
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// if p3 = 9 then
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 9
21016: EQUAL
21017: IFFALSE 21027
// sHack := true ;
21019: LD_ADDR_EXP 49
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if p3 = 10 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_INT 10
21034: EQUAL
21035: IFFALSE 21045
// sFire := true ;
21037: LD_ADDR_EXP 50
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// if p3 = 11 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 11
21052: EQUAL
21053: IFFALSE 21063
// sRefresh := true ;
21055: LD_ADDR_EXP 51
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// if p3 = 12 then
21063: LD_VAR 0 3
21067: PUSH
21068: LD_INT 12
21070: EQUAL
21071: IFFALSE 21081
// sExp := true ;
21073: LD_ADDR_EXP 52
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// if p3 = 13 then
21081: LD_VAR 0 3
21085: PUSH
21086: LD_INT 13
21088: EQUAL
21089: IFFALSE 21099
// sDepot := true ;
21091: LD_ADDR_EXP 53
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// if p3 = 14 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_INT 14
21106: EQUAL
21107: IFFALSE 21117
// sFlag := true ;
21109: LD_ADDR_EXP 54
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// if p3 = 15 then
21117: LD_VAR 0 3
21121: PUSH
21122: LD_INT 15
21124: EQUAL
21125: IFFALSE 21135
// sKamikadze := true ;
21127: LD_ADDR_EXP 62
21131: PUSH
21132: LD_INT 1
21134: ST_TO_ADDR
// if p3 = 16 then
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 16
21142: EQUAL
21143: IFFALSE 21153
// sTroll := true ;
21145: LD_ADDR_EXP 63
21149: PUSH
21150: LD_INT 1
21152: ST_TO_ADDR
// if p3 = 17 then
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 17
21160: EQUAL
21161: IFFALSE 21171
// sSlow := true ;
21163: LD_ADDR_EXP 64
21167: PUSH
21168: LD_INT 1
21170: ST_TO_ADDR
// if p3 = 18 then
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 18
21178: EQUAL
21179: IFFALSE 21189
// sLack := true ;
21181: LD_ADDR_EXP 65
21185: PUSH
21186: LD_INT 1
21188: ST_TO_ADDR
// if p3 = 19 then
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 19
21196: EQUAL
21197: IFFALSE 21207
// sTank := true ;
21199: LD_ADDR_EXP 67
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// if p3 = 20 then
21207: LD_VAR 0 3
21211: PUSH
21212: LD_INT 20
21214: EQUAL
21215: IFFALSE 21225
// sRemote := true ;
21217: LD_ADDR_EXP 68
21221: PUSH
21222: LD_INT 1
21224: ST_TO_ADDR
// if p3 = 21 then
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 21
21232: EQUAL
21233: IFFALSE 21243
// sPowell := true ;
21235: LD_ADDR_EXP 69
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
// if p3 = 22 then
21243: LD_VAR 0 3
21247: PUSH
21248: LD_INT 22
21250: EQUAL
21251: IFFALSE 21261
// sTeleport := true ;
21253: LD_ADDR_EXP 72
21257: PUSH
21258: LD_INT 1
21260: ST_TO_ADDR
// if p3 = 23 then
21261: LD_VAR 0 3
21265: PUSH
21266: LD_INT 23
21268: EQUAL
21269: IFFALSE 21279
// sOilTower := true ;
21271: LD_ADDR_EXP 74
21275: PUSH
21276: LD_INT 1
21278: ST_TO_ADDR
// if p3 = 24 then
21279: LD_VAR 0 3
21283: PUSH
21284: LD_INT 24
21286: EQUAL
21287: IFFALSE 21297
// sShovel := true ;
21289: LD_ADDR_EXP 75
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// if p3 = 25 then
21297: LD_VAR 0 3
21301: PUSH
21302: LD_INT 25
21304: EQUAL
21305: IFFALSE 21315
// sSheik := true ;
21307: LD_ADDR_EXP 76
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// if p3 = 26 then
21315: LD_VAR 0 3
21319: PUSH
21320: LD_INT 26
21322: EQUAL
21323: IFFALSE 21333
// sEarthquake := true ;
21325: LD_ADDR_EXP 78
21329: PUSH
21330: LD_INT 1
21332: ST_TO_ADDR
// if p3 = 27 then
21333: LD_VAR 0 3
21337: PUSH
21338: LD_INT 27
21340: EQUAL
21341: IFFALSE 21351
// sAI := true ;
21343: LD_ADDR_EXP 79
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// if p3 = 28 then
21351: LD_VAR 0 3
21355: PUSH
21356: LD_INT 28
21358: EQUAL
21359: IFFALSE 21369
// sCargo := true ;
21361: LD_ADDR_EXP 82
21365: PUSH
21366: LD_INT 1
21368: ST_TO_ADDR
// if p3 = 29 then
21369: LD_VAR 0 3
21373: PUSH
21374: LD_INT 29
21376: EQUAL
21377: IFFALSE 21387
// sDLaser := true ;
21379: LD_ADDR_EXP 83
21383: PUSH
21384: LD_INT 1
21386: ST_TO_ADDR
// if p3 = 30 then
21387: LD_VAR 0 3
21391: PUSH
21392: LD_INT 30
21394: EQUAL
21395: IFFALSE 21405
// sExchange := true ;
21397: LD_ADDR_EXP 84
21401: PUSH
21402: LD_INT 1
21404: ST_TO_ADDR
// if p3 = 31 then
21405: LD_VAR 0 3
21409: PUSH
21410: LD_INT 31
21412: EQUAL
21413: IFFALSE 21423
// sFac := true ;
21415: LD_ADDR_EXP 85
21419: PUSH
21420: LD_INT 1
21422: ST_TO_ADDR
// if p3 = 32 then
21423: LD_VAR 0 3
21427: PUSH
21428: LD_INT 32
21430: EQUAL
21431: IFFALSE 21441
// sPower := true ;
21433: LD_ADDR_EXP 86
21437: PUSH
21438: LD_INT 1
21440: ST_TO_ADDR
// if p3 = 33 then
21441: LD_VAR 0 3
21445: PUSH
21446: LD_INT 33
21448: EQUAL
21449: IFFALSE 21459
// sRandom := true ;
21451: LD_ADDR_EXP 87
21455: PUSH
21456: LD_INT 1
21458: ST_TO_ADDR
// if p3 = 34 then
21459: LD_VAR 0 3
21463: PUSH
21464: LD_INT 34
21466: EQUAL
21467: IFFALSE 21477
// sShield := true ;
21469: LD_ADDR_EXP 88
21473: PUSH
21474: LD_INT 1
21476: ST_TO_ADDR
// if p3 = 35 then
21477: LD_VAR 0 3
21481: PUSH
21482: LD_INT 35
21484: EQUAL
21485: IFFALSE 21495
// sTime := true ;
21487: LD_ADDR_EXP 89
21491: PUSH
21492: LD_INT 1
21494: ST_TO_ADDR
// if p3 = 36 then
21495: LD_VAR 0 3
21499: PUSH
21500: LD_INT 36
21502: EQUAL
21503: IFFALSE 21513
// sTools := true ;
21505: LD_ADDR_EXP 90
21509: PUSH
21510: LD_INT 1
21512: ST_TO_ADDR
// if p3 = 101 then
21513: LD_VAR 0 3
21517: PUSH
21518: LD_INT 101
21520: EQUAL
21521: IFFALSE 21531
// sSold := true ;
21523: LD_ADDR_EXP 55
21527: PUSH
21528: LD_INT 1
21530: ST_TO_ADDR
// if p3 = 102 then
21531: LD_VAR 0 3
21535: PUSH
21536: LD_INT 102
21538: EQUAL
21539: IFFALSE 21549
// sDiff := true ;
21541: LD_ADDR_EXP 56
21545: PUSH
21546: LD_INT 1
21548: ST_TO_ADDR
// if p3 = 103 then
21549: LD_VAR 0 3
21553: PUSH
21554: LD_INT 103
21556: EQUAL
21557: IFFALSE 21567
// sFog := true ;
21559: LD_ADDR_EXP 59
21563: PUSH
21564: LD_INT 1
21566: ST_TO_ADDR
// if p3 = 104 then
21567: LD_VAR 0 3
21571: PUSH
21572: LD_INT 104
21574: EQUAL
21575: IFFALSE 21585
// sReset := true ;
21577: LD_ADDR_EXP 60
21581: PUSH
21582: LD_INT 1
21584: ST_TO_ADDR
// if p3 = 105 then
21585: LD_VAR 0 3
21589: PUSH
21590: LD_INT 105
21592: EQUAL
21593: IFFALSE 21603
// sSun := true ;
21595: LD_ADDR_EXP 61
21599: PUSH
21600: LD_INT 1
21602: ST_TO_ADDR
// if p3 = 106 then
21603: LD_VAR 0 3
21607: PUSH
21608: LD_INT 106
21610: EQUAL
21611: IFFALSE 21621
// sTiger := true ;
21613: LD_ADDR_EXP 57
21617: PUSH
21618: LD_INT 1
21620: ST_TO_ADDR
// if p3 = 107 then
21621: LD_VAR 0 3
21625: PUSH
21626: LD_INT 107
21628: EQUAL
21629: IFFALSE 21639
// sBomb := true ;
21631: LD_ADDR_EXP 58
21635: PUSH
21636: LD_INT 1
21638: ST_TO_ADDR
// if p3 = 108 then
21639: LD_VAR 0 3
21643: PUSH
21644: LD_INT 108
21646: EQUAL
21647: IFFALSE 21657
// sWound := true ;
21649: LD_ADDR_EXP 66
21653: PUSH
21654: LD_INT 1
21656: ST_TO_ADDR
// if p3 = 109 then
21657: LD_VAR 0 3
21661: PUSH
21662: LD_INT 109
21664: EQUAL
21665: IFFALSE 21675
// sBetray := true ;
21667: LD_ADDR_EXP 70
21671: PUSH
21672: LD_INT 1
21674: ST_TO_ADDR
// if p3 = 110 then
21675: LD_VAR 0 3
21679: PUSH
21680: LD_INT 110
21682: EQUAL
21683: IFFALSE 21693
// sContamin := true ;
21685: LD_ADDR_EXP 71
21689: PUSH
21690: LD_INT 1
21692: ST_TO_ADDR
// if p3 = 111 then
21693: LD_VAR 0 3
21697: PUSH
21698: LD_INT 111
21700: EQUAL
21701: IFFALSE 21711
// sOil := true ;
21703: LD_ADDR_EXP 73
21707: PUSH
21708: LD_INT 1
21710: ST_TO_ADDR
// if p3 = 112 then
21711: LD_VAR 0 3
21715: PUSH
21716: LD_INT 112
21718: EQUAL
21719: IFFALSE 21729
// sStu := true ;
21721: LD_ADDR_EXP 77
21725: PUSH
21726: LD_INT 1
21728: ST_TO_ADDR
// if p3 = 113 then
21729: LD_VAR 0 3
21733: PUSH
21734: LD_INT 113
21736: EQUAL
21737: IFFALSE 21747
// sBazooka := true ;
21739: LD_ADDR_EXP 80
21743: PUSH
21744: LD_INT 1
21746: ST_TO_ADDR
// if p3 = 114 then
21747: LD_VAR 0 3
21751: PUSH
21752: LD_INT 114
21754: EQUAL
21755: IFFALSE 21765
// sMortar := true ;
21757: LD_ADDR_EXP 81
21761: PUSH
21762: LD_INT 1
21764: ST_TO_ADDR
// if p3 = 115 then
21765: LD_VAR 0 3
21769: PUSH
21770: LD_INT 115
21772: EQUAL
21773: IFFALSE 21783
// sRanger := true ;
21775: LD_ADDR_EXP 91
21779: PUSH
21780: LD_INT 1
21782: ST_TO_ADDR
// if p3 = 116 then
21783: LD_VAR 0 3
21787: PUSH
21788: LD_INT 116
21790: EQUAL
21791: IFFALSE 21801
// sComputer := true ;
21793: LD_ADDR_EXP 92
21797: PUSH
21798: LD_INT 1
21800: ST_TO_ADDR
// if p3 = 117 then
21801: LD_VAR 0 3
21805: PUSH
21806: LD_INT 117
21808: EQUAL
21809: IFFALSE 21819
// s30 := true ;
21811: LD_ADDR_EXP 93
21815: PUSH
21816: LD_INT 1
21818: ST_TO_ADDR
// if p3 = 118 then
21819: LD_VAR 0 3
21823: PUSH
21824: LD_INT 118
21826: EQUAL
21827: IFFALSE 21837
// s60 := true ;
21829: LD_ADDR_EXP 94
21833: PUSH
21834: LD_INT 1
21836: ST_TO_ADDR
// end ; if p2 = hack_mode then
21837: LD_VAR 0 2
21841: PUSH
21842: LD_INT 101
21844: EQUAL
21845: IFFALSE 21973
// begin case p3 of 1 :
21847: LD_VAR 0 3
21851: PUSH
21852: LD_INT 1
21854: DOUBLE
21855: EQUAL
21856: IFTRUE 21860
21858: GO 21867
21860: POP
// hHackUnlimitedResources ; 2 :
21861: CALL 34236 0 0
21865: GO 21973
21867: LD_INT 2
21869: DOUBLE
21870: EQUAL
21871: IFTRUE 21875
21873: GO 21882
21875: POP
// hHackSetLevel10 ; 3 :
21876: CALL 34369 0 0
21880: GO 21973
21882: LD_INT 3
21884: DOUBLE
21885: EQUAL
21886: IFTRUE 21890
21888: GO 21897
21890: POP
// hHackSetLevel10YourUnits ; 4 :
21891: CALL 34454 0 0
21895: GO 21973
21897: LD_INT 4
21899: DOUBLE
21900: EQUAL
21901: IFTRUE 21905
21903: GO 21912
21905: POP
// hHackInvincible ; 5 :
21906: CALL 34902 0 0
21910: GO 21973
21912: LD_INT 5
21914: DOUBLE
21915: EQUAL
21916: IFTRUE 21920
21918: GO 21927
21920: POP
// hHackInvisible ; 6 :
21921: CALL 35013 0 0
21925: GO 21973
21927: LD_INT 6
21929: DOUBLE
21930: EQUAL
21931: IFTRUE 21935
21933: GO 21942
21935: POP
// hHackChangeYourSide ; 7 :
21936: CALL 35070 0 0
21940: GO 21973
21942: LD_INT 7
21944: DOUBLE
21945: EQUAL
21946: IFTRUE 21950
21948: GO 21957
21950: POP
// hHackChangeUnitSide ; 8 :
21951: CALL 35112 0 0
21955: GO 21973
21957: LD_INT 8
21959: DOUBLE
21960: EQUAL
21961: IFTRUE 21965
21963: GO 21972
21965: POP
// hHackFog ; end ;
21966: CALL 35213 0 0
21970: GO 21973
21972: POP
// end ; if p2 = game_save_mode then
21973: LD_VAR 0 2
21977: PUSH
21978: LD_INT 102
21980: EQUAL
21981: IFFALSE 22038
// begin if p3 = 1 then
21983: LD_VAR 0 3
21987: PUSH
21988: LD_INT 1
21990: EQUAL
21991: IFFALSE 22003
// globalGameSaveCounter := p4 ;
21993: LD_ADDR_EXP 37
21997: PUSH
21998: LD_VAR 0 4
22002: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22003: LD_VAR 0 3
22007: PUSH
22008: LD_INT 2
22010: EQUAL
22011: IFFALSE 22019
22013: PUSH
22014: LD_EXP 37
22018: AND
22019: IFFALSE 22038
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22021: LD_STRING setGameSaveCounter(
22023: PUSH
22024: LD_EXP 37
22028: STR
22029: PUSH
22030: LD_STRING )
22032: STR
22033: PPUSH
22034: CALL_OW 559
// end ; end ;
22038: LD_VAR 0 7
22042: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22043: LD_INT 0
22045: PPUSH
// streamModeActive := false ;
22046: LD_ADDR_EXP 38
22050: PUSH
22051: LD_INT 0
22053: ST_TO_ADDR
// normalCounter := 36 ;
22054: LD_ADDR_EXP 39
22058: PUSH
22059: LD_INT 36
22061: ST_TO_ADDR
// hardcoreCounter := 18 ;
22062: LD_ADDR_EXP 40
22066: PUSH
22067: LD_INT 18
22069: ST_TO_ADDR
// sRocket := false ;
22070: LD_ADDR_EXP 43
22074: PUSH
22075: LD_INT 0
22077: ST_TO_ADDR
// sSpeed := false ;
22078: LD_ADDR_EXP 42
22082: PUSH
22083: LD_INT 0
22085: ST_TO_ADDR
// sEngine := false ;
22086: LD_ADDR_EXP 44
22090: PUSH
22091: LD_INT 0
22093: ST_TO_ADDR
// sSpec := false ;
22094: LD_ADDR_EXP 41
22098: PUSH
22099: LD_INT 0
22101: ST_TO_ADDR
// sLevel := false ;
22102: LD_ADDR_EXP 45
22106: PUSH
22107: LD_INT 0
22109: ST_TO_ADDR
// sArmoury := false ;
22110: LD_ADDR_EXP 46
22114: PUSH
22115: LD_INT 0
22117: ST_TO_ADDR
// sRadar := false ;
22118: LD_ADDR_EXP 47
22122: PUSH
22123: LD_INT 0
22125: ST_TO_ADDR
// sBunker := false ;
22126: LD_ADDR_EXP 48
22130: PUSH
22131: LD_INT 0
22133: ST_TO_ADDR
// sHack := false ;
22134: LD_ADDR_EXP 49
22138: PUSH
22139: LD_INT 0
22141: ST_TO_ADDR
// sFire := false ;
22142: LD_ADDR_EXP 50
22146: PUSH
22147: LD_INT 0
22149: ST_TO_ADDR
// sRefresh := false ;
22150: LD_ADDR_EXP 51
22154: PUSH
22155: LD_INT 0
22157: ST_TO_ADDR
// sExp := false ;
22158: LD_ADDR_EXP 52
22162: PUSH
22163: LD_INT 0
22165: ST_TO_ADDR
// sDepot := false ;
22166: LD_ADDR_EXP 53
22170: PUSH
22171: LD_INT 0
22173: ST_TO_ADDR
// sFlag := false ;
22174: LD_ADDR_EXP 54
22178: PUSH
22179: LD_INT 0
22181: ST_TO_ADDR
// sKamikadze := false ;
22182: LD_ADDR_EXP 62
22186: PUSH
22187: LD_INT 0
22189: ST_TO_ADDR
// sTroll := false ;
22190: LD_ADDR_EXP 63
22194: PUSH
22195: LD_INT 0
22197: ST_TO_ADDR
// sSlow := false ;
22198: LD_ADDR_EXP 64
22202: PUSH
22203: LD_INT 0
22205: ST_TO_ADDR
// sLack := false ;
22206: LD_ADDR_EXP 65
22210: PUSH
22211: LD_INT 0
22213: ST_TO_ADDR
// sTank := false ;
22214: LD_ADDR_EXP 67
22218: PUSH
22219: LD_INT 0
22221: ST_TO_ADDR
// sRemote := false ;
22222: LD_ADDR_EXP 68
22226: PUSH
22227: LD_INT 0
22229: ST_TO_ADDR
// sPowell := false ;
22230: LD_ADDR_EXP 69
22234: PUSH
22235: LD_INT 0
22237: ST_TO_ADDR
// sTeleport := false ;
22238: LD_ADDR_EXP 72
22242: PUSH
22243: LD_INT 0
22245: ST_TO_ADDR
// sOilTower := false ;
22246: LD_ADDR_EXP 74
22250: PUSH
22251: LD_INT 0
22253: ST_TO_ADDR
// sShovel := false ;
22254: LD_ADDR_EXP 75
22258: PUSH
22259: LD_INT 0
22261: ST_TO_ADDR
// sSheik := false ;
22262: LD_ADDR_EXP 76
22266: PUSH
22267: LD_INT 0
22269: ST_TO_ADDR
// sEarthquake := false ;
22270: LD_ADDR_EXP 78
22274: PUSH
22275: LD_INT 0
22277: ST_TO_ADDR
// sAI := false ;
22278: LD_ADDR_EXP 79
22282: PUSH
22283: LD_INT 0
22285: ST_TO_ADDR
// sCargo := false ;
22286: LD_ADDR_EXP 82
22290: PUSH
22291: LD_INT 0
22293: ST_TO_ADDR
// sDLaser := false ;
22294: LD_ADDR_EXP 83
22298: PUSH
22299: LD_INT 0
22301: ST_TO_ADDR
// sExchange := false ;
22302: LD_ADDR_EXP 84
22306: PUSH
22307: LD_INT 0
22309: ST_TO_ADDR
// sFac := false ;
22310: LD_ADDR_EXP 85
22314: PUSH
22315: LD_INT 0
22317: ST_TO_ADDR
// sPower := false ;
22318: LD_ADDR_EXP 86
22322: PUSH
22323: LD_INT 0
22325: ST_TO_ADDR
// sRandom := false ;
22326: LD_ADDR_EXP 87
22330: PUSH
22331: LD_INT 0
22333: ST_TO_ADDR
// sShield := false ;
22334: LD_ADDR_EXP 88
22338: PUSH
22339: LD_INT 0
22341: ST_TO_ADDR
// sTime := false ;
22342: LD_ADDR_EXP 89
22346: PUSH
22347: LD_INT 0
22349: ST_TO_ADDR
// sTools := false ;
22350: LD_ADDR_EXP 90
22354: PUSH
22355: LD_INT 0
22357: ST_TO_ADDR
// sSold := false ;
22358: LD_ADDR_EXP 55
22362: PUSH
22363: LD_INT 0
22365: ST_TO_ADDR
// sDiff := false ;
22366: LD_ADDR_EXP 56
22370: PUSH
22371: LD_INT 0
22373: ST_TO_ADDR
// sFog := false ;
22374: LD_ADDR_EXP 59
22378: PUSH
22379: LD_INT 0
22381: ST_TO_ADDR
// sReset := false ;
22382: LD_ADDR_EXP 60
22386: PUSH
22387: LD_INT 0
22389: ST_TO_ADDR
// sSun := false ;
22390: LD_ADDR_EXP 61
22394: PUSH
22395: LD_INT 0
22397: ST_TO_ADDR
// sTiger := false ;
22398: LD_ADDR_EXP 57
22402: PUSH
22403: LD_INT 0
22405: ST_TO_ADDR
// sBomb := false ;
22406: LD_ADDR_EXP 58
22410: PUSH
22411: LD_INT 0
22413: ST_TO_ADDR
// sWound := false ;
22414: LD_ADDR_EXP 66
22418: PUSH
22419: LD_INT 0
22421: ST_TO_ADDR
// sBetray := false ;
22422: LD_ADDR_EXP 70
22426: PUSH
22427: LD_INT 0
22429: ST_TO_ADDR
// sContamin := false ;
22430: LD_ADDR_EXP 71
22434: PUSH
22435: LD_INT 0
22437: ST_TO_ADDR
// sOil := false ;
22438: LD_ADDR_EXP 73
22442: PUSH
22443: LD_INT 0
22445: ST_TO_ADDR
// sStu := false ;
22446: LD_ADDR_EXP 77
22450: PUSH
22451: LD_INT 0
22453: ST_TO_ADDR
// sBazooka := false ;
22454: LD_ADDR_EXP 80
22458: PUSH
22459: LD_INT 0
22461: ST_TO_ADDR
// sMortar := false ;
22462: LD_ADDR_EXP 81
22466: PUSH
22467: LD_INT 0
22469: ST_TO_ADDR
// sRanger := false ;
22470: LD_ADDR_EXP 91
22474: PUSH
22475: LD_INT 0
22477: ST_TO_ADDR
// sComputer := false ;
22478: LD_ADDR_EXP 92
22482: PUSH
22483: LD_INT 0
22485: ST_TO_ADDR
// s30 := false ;
22486: LD_ADDR_EXP 93
22490: PUSH
22491: LD_INT 0
22493: ST_TO_ADDR
// s60 := false ;
22494: LD_ADDR_EXP 94
22498: PUSH
22499: LD_INT 0
22501: ST_TO_ADDR
// end ;
22502: LD_VAR 0 1
22506: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22507: LD_INT 0
22509: PPUSH
22510: PPUSH
22511: PPUSH
22512: PPUSH
22513: PPUSH
22514: PPUSH
22515: PPUSH
// result := [ ] ;
22516: LD_ADDR_VAR 0 2
22520: PUSH
22521: EMPTY
22522: ST_TO_ADDR
// if campaign_id = 1 then
22523: LD_OWVAR 69
22527: PUSH
22528: LD_INT 1
22530: EQUAL
22531: IFFALSE 25697
// begin case mission_number of 1 :
22533: LD_OWVAR 70
22537: PUSH
22538: LD_INT 1
22540: DOUBLE
22541: EQUAL
22542: IFTRUE 22546
22544: GO 22622
22546: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22547: LD_ADDR_VAR 0 2
22551: PUSH
22552: LD_INT 2
22554: PUSH
22555: LD_INT 4
22557: PUSH
22558: LD_INT 11
22560: PUSH
22561: LD_INT 12
22563: PUSH
22564: LD_INT 15
22566: PUSH
22567: LD_INT 16
22569: PUSH
22570: LD_INT 22
22572: PUSH
22573: LD_INT 23
22575: PUSH
22576: LD_INT 26
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 101
22592: PUSH
22593: LD_INT 102
22595: PUSH
22596: LD_INT 106
22598: PUSH
22599: LD_INT 116
22601: PUSH
22602: LD_INT 117
22604: PUSH
22605: LD_INT 118
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: ST_TO_ADDR
22620: GO 25695
22622: LD_INT 2
22624: DOUBLE
22625: EQUAL
22626: IFTRUE 22630
22628: GO 22714
22630: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22631: LD_ADDR_VAR 0 2
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: LD_INT 4
22641: PUSH
22642: LD_INT 11
22644: PUSH
22645: LD_INT 12
22647: PUSH
22648: LD_INT 15
22650: PUSH
22651: LD_INT 16
22653: PUSH
22654: LD_INT 22
22656: PUSH
22657: LD_INT 23
22659: PUSH
22660: LD_INT 26
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 101
22676: PUSH
22677: LD_INT 102
22679: PUSH
22680: LD_INT 105
22682: PUSH
22683: LD_INT 106
22685: PUSH
22686: LD_INT 108
22688: PUSH
22689: LD_INT 116
22691: PUSH
22692: LD_INT 117
22694: PUSH
22695: LD_INT 118
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: ST_TO_ADDR
22712: GO 25695
22714: LD_INT 3
22716: DOUBLE
22717: EQUAL
22718: IFTRUE 22722
22720: GO 22810
22722: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22723: LD_ADDR_VAR 0 2
22727: PUSH
22728: LD_INT 2
22730: PUSH
22731: LD_INT 4
22733: PUSH
22734: LD_INT 5
22736: PUSH
22737: LD_INT 11
22739: PUSH
22740: LD_INT 12
22742: PUSH
22743: LD_INT 15
22745: PUSH
22746: LD_INT 16
22748: PUSH
22749: LD_INT 22
22751: PUSH
22752: LD_INT 26
22754: PUSH
22755: LD_INT 36
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 101
22772: PUSH
22773: LD_INT 102
22775: PUSH
22776: LD_INT 105
22778: PUSH
22779: LD_INT 106
22781: PUSH
22782: LD_INT 108
22784: PUSH
22785: LD_INT 116
22787: PUSH
22788: LD_INT 117
22790: PUSH
22791: LD_INT 118
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: ST_TO_ADDR
22808: GO 25695
22810: LD_INT 4
22812: DOUBLE
22813: EQUAL
22814: IFTRUE 22818
22816: GO 22914
22818: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22819: LD_ADDR_VAR 0 2
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 4
22829: PUSH
22830: LD_INT 5
22832: PUSH
22833: LD_INT 8
22835: PUSH
22836: LD_INT 11
22838: PUSH
22839: LD_INT 12
22841: PUSH
22842: LD_INT 15
22844: PUSH
22845: LD_INT 16
22847: PUSH
22848: LD_INT 22
22850: PUSH
22851: LD_INT 23
22853: PUSH
22854: LD_INT 26
22856: PUSH
22857: LD_INT 36
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 101
22876: PUSH
22877: LD_INT 102
22879: PUSH
22880: LD_INT 105
22882: PUSH
22883: LD_INT 106
22885: PUSH
22886: LD_INT 108
22888: PUSH
22889: LD_INT 116
22891: PUSH
22892: LD_INT 117
22894: PUSH
22895: LD_INT 118
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: ST_TO_ADDR
22912: GO 25695
22914: LD_INT 5
22916: DOUBLE
22917: EQUAL
22918: IFTRUE 22922
22920: GO 23034
22922: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22923: LD_ADDR_VAR 0 2
22927: PUSH
22928: LD_INT 2
22930: PUSH
22931: LD_INT 4
22933: PUSH
22934: LD_INT 5
22936: PUSH
22937: LD_INT 6
22939: PUSH
22940: LD_INT 8
22942: PUSH
22943: LD_INT 11
22945: PUSH
22946: LD_INT 12
22948: PUSH
22949: LD_INT 15
22951: PUSH
22952: LD_INT 16
22954: PUSH
22955: LD_INT 22
22957: PUSH
22958: LD_INT 23
22960: PUSH
22961: LD_INT 25
22963: PUSH
22964: LD_INT 26
22966: PUSH
22967: LD_INT 36
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 101
22988: PUSH
22989: LD_INT 102
22991: PUSH
22992: LD_INT 105
22994: PUSH
22995: LD_INT 106
22997: PUSH
22998: LD_INT 108
23000: PUSH
23001: LD_INT 109
23003: PUSH
23004: LD_INT 112
23006: PUSH
23007: LD_INT 116
23009: PUSH
23010: LD_INT 117
23012: PUSH
23013: LD_INT 118
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: ST_TO_ADDR
23032: GO 25695
23034: LD_INT 6
23036: DOUBLE
23037: EQUAL
23038: IFTRUE 23042
23040: GO 23174
23042: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23043: LD_ADDR_VAR 0 2
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: LD_INT 4
23053: PUSH
23054: LD_INT 5
23056: PUSH
23057: LD_INT 6
23059: PUSH
23060: LD_INT 8
23062: PUSH
23063: LD_INT 11
23065: PUSH
23066: LD_INT 12
23068: PUSH
23069: LD_INT 15
23071: PUSH
23072: LD_INT 16
23074: PUSH
23075: LD_INT 20
23077: PUSH
23078: LD_INT 21
23080: PUSH
23081: LD_INT 22
23083: PUSH
23084: LD_INT 23
23086: PUSH
23087: LD_INT 25
23089: PUSH
23090: LD_INT 26
23092: PUSH
23093: LD_INT 30
23095: PUSH
23096: LD_INT 31
23098: PUSH
23099: LD_INT 32
23101: PUSH
23102: LD_INT 36
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 101
23128: PUSH
23129: LD_INT 102
23131: PUSH
23132: LD_INT 105
23134: PUSH
23135: LD_INT 106
23137: PUSH
23138: LD_INT 108
23140: PUSH
23141: LD_INT 109
23143: PUSH
23144: LD_INT 112
23146: PUSH
23147: LD_INT 116
23149: PUSH
23150: LD_INT 117
23152: PUSH
23153: LD_INT 118
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: ST_TO_ADDR
23172: GO 25695
23174: LD_INT 7
23176: DOUBLE
23177: EQUAL
23178: IFTRUE 23182
23180: GO 23294
23182: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23183: LD_ADDR_VAR 0 2
23187: PUSH
23188: LD_INT 2
23190: PUSH
23191: LD_INT 4
23193: PUSH
23194: LD_INT 5
23196: PUSH
23197: LD_INT 7
23199: PUSH
23200: LD_INT 11
23202: PUSH
23203: LD_INT 12
23205: PUSH
23206: LD_INT 15
23208: PUSH
23209: LD_INT 16
23211: PUSH
23212: LD_INT 20
23214: PUSH
23215: LD_INT 21
23217: PUSH
23218: LD_INT 22
23220: PUSH
23221: LD_INT 23
23223: PUSH
23224: LD_INT 25
23226: PUSH
23227: LD_INT 26
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 101
23248: PUSH
23249: LD_INT 102
23251: PUSH
23252: LD_INT 103
23254: PUSH
23255: LD_INT 105
23257: PUSH
23258: LD_INT 106
23260: PUSH
23261: LD_INT 108
23263: PUSH
23264: LD_INT 112
23266: PUSH
23267: LD_INT 116
23269: PUSH
23270: LD_INT 117
23272: PUSH
23273: LD_INT 118
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: ST_TO_ADDR
23292: GO 25695
23294: LD_INT 8
23296: DOUBLE
23297: EQUAL
23298: IFTRUE 23302
23300: GO 23442
23302: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23303: LD_ADDR_VAR 0 2
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: LD_INT 4
23313: PUSH
23314: LD_INT 5
23316: PUSH
23317: LD_INT 6
23319: PUSH
23320: LD_INT 7
23322: PUSH
23323: LD_INT 8
23325: PUSH
23326: LD_INT 11
23328: PUSH
23329: LD_INT 12
23331: PUSH
23332: LD_INT 15
23334: PUSH
23335: LD_INT 16
23337: PUSH
23338: LD_INT 20
23340: PUSH
23341: LD_INT 21
23343: PUSH
23344: LD_INT 22
23346: PUSH
23347: LD_INT 23
23349: PUSH
23350: LD_INT 25
23352: PUSH
23353: LD_INT 26
23355: PUSH
23356: LD_INT 30
23358: PUSH
23359: LD_INT 31
23361: PUSH
23362: LD_INT 32
23364: PUSH
23365: LD_INT 36
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 101
23392: PUSH
23393: LD_INT 102
23395: PUSH
23396: LD_INT 103
23398: PUSH
23399: LD_INT 105
23401: PUSH
23402: LD_INT 106
23404: PUSH
23405: LD_INT 108
23407: PUSH
23408: LD_INT 109
23410: PUSH
23411: LD_INT 112
23413: PUSH
23414: LD_INT 116
23416: PUSH
23417: LD_INT 117
23419: PUSH
23420: LD_INT 118
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: ST_TO_ADDR
23440: GO 25695
23442: LD_INT 9
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23598
23450: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23451: LD_ADDR_VAR 0 2
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: LD_INT 4
23461: PUSH
23462: LD_INT 5
23464: PUSH
23465: LD_INT 6
23467: PUSH
23468: LD_INT 7
23470: PUSH
23471: LD_INT 8
23473: PUSH
23474: LD_INT 11
23476: PUSH
23477: LD_INT 12
23479: PUSH
23480: LD_INT 15
23482: PUSH
23483: LD_INT 16
23485: PUSH
23486: LD_INT 20
23488: PUSH
23489: LD_INT 21
23491: PUSH
23492: LD_INT 22
23494: PUSH
23495: LD_INT 23
23497: PUSH
23498: LD_INT 25
23500: PUSH
23501: LD_INT 26
23503: PUSH
23504: LD_INT 28
23506: PUSH
23507: LD_INT 30
23509: PUSH
23510: LD_INT 31
23512: PUSH
23513: LD_INT 32
23515: PUSH
23516: LD_INT 36
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 101
23544: PUSH
23545: LD_INT 102
23547: PUSH
23548: LD_INT 103
23550: PUSH
23551: LD_INT 105
23553: PUSH
23554: LD_INT 106
23556: PUSH
23557: LD_INT 108
23559: PUSH
23560: LD_INT 109
23562: PUSH
23563: LD_INT 112
23565: PUSH
23566: LD_INT 114
23568: PUSH
23569: LD_INT 116
23571: PUSH
23572: LD_INT 117
23574: PUSH
23575: LD_INT 118
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: ST_TO_ADDR
23596: GO 25695
23598: LD_INT 10
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23802
23606: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23607: LD_ADDR_VAR 0 2
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 4
23617: PUSH
23618: LD_INT 5
23620: PUSH
23621: LD_INT 6
23623: PUSH
23624: LD_INT 7
23626: PUSH
23627: LD_INT 8
23629: PUSH
23630: LD_INT 9
23632: PUSH
23633: LD_INT 10
23635: PUSH
23636: LD_INT 11
23638: PUSH
23639: LD_INT 12
23641: PUSH
23642: LD_INT 13
23644: PUSH
23645: LD_INT 14
23647: PUSH
23648: LD_INT 15
23650: PUSH
23651: LD_INT 16
23653: PUSH
23654: LD_INT 17
23656: PUSH
23657: LD_INT 18
23659: PUSH
23660: LD_INT 19
23662: PUSH
23663: LD_INT 20
23665: PUSH
23666: LD_INT 21
23668: PUSH
23669: LD_INT 22
23671: PUSH
23672: LD_INT 23
23674: PUSH
23675: LD_INT 24
23677: PUSH
23678: LD_INT 25
23680: PUSH
23681: LD_INT 26
23683: PUSH
23684: LD_INT 28
23686: PUSH
23687: LD_INT 30
23689: PUSH
23690: LD_INT 31
23692: PUSH
23693: LD_INT 32
23695: PUSH
23696: LD_INT 36
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 101
23732: PUSH
23733: LD_INT 102
23735: PUSH
23736: LD_INT 103
23738: PUSH
23739: LD_INT 104
23741: PUSH
23742: LD_INT 105
23744: PUSH
23745: LD_INT 106
23747: PUSH
23748: LD_INT 107
23750: PUSH
23751: LD_INT 108
23753: PUSH
23754: LD_INT 109
23756: PUSH
23757: LD_INT 110
23759: PUSH
23760: LD_INT 111
23762: PUSH
23763: LD_INT 112
23765: PUSH
23766: LD_INT 114
23768: PUSH
23769: LD_INT 116
23771: PUSH
23772: LD_INT 117
23774: PUSH
23775: LD_INT 118
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: ST_TO_ADDR
23800: GO 25695
23802: LD_INT 11
23804: DOUBLE
23805: EQUAL
23806: IFTRUE 23810
23808: GO 24014
23810: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23811: LD_ADDR_VAR 0 2
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: LD_INT 3
23821: PUSH
23822: LD_INT 4
23824: PUSH
23825: LD_INT 5
23827: PUSH
23828: LD_INT 6
23830: PUSH
23831: LD_INT 7
23833: PUSH
23834: LD_INT 8
23836: PUSH
23837: LD_INT 9
23839: PUSH
23840: LD_INT 10
23842: PUSH
23843: LD_INT 11
23845: PUSH
23846: LD_INT 12
23848: PUSH
23849: LD_INT 13
23851: PUSH
23852: LD_INT 14
23854: PUSH
23855: LD_INT 15
23857: PUSH
23858: LD_INT 16
23860: PUSH
23861: LD_INT 17
23863: PUSH
23864: LD_INT 18
23866: PUSH
23867: LD_INT 19
23869: PUSH
23870: LD_INT 20
23872: PUSH
23873: LD_INT 21
23875: PUSH
23876: LD_INT 22
23878: PUSH
23879: LD_INT 23
23881: PUSH
23882: LD_INT 24
23884: PUSH
23885: LD_INT 25
23887: PUSH
23888: LD_INT 26
23890: PUSH
23891: LD_INT 28
23893: PUSH
23894: LD_INT 30
23896: PUSH
23897: LD_INT 31
23899: PUSH
23900: LD_INT 32
23902: PUSH
23903: LD_INT 34
23905: PUSH
23906: LD_INT 36
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 101
23944: PUSH
23945: LD_INT 102
23947: PUSH
23948: LD_INT 103
23950: PUSH
23951: LD_INT 104
23953: PUSH
23954: LD_INT 105
23956: PUSH
23957: LD_INT 106
23959: PUSH
23960: LD_INT 107
23962: PUSH
23963: LD_INT 108
23965: PUSH
23966: LD_INT 109
23968: PUSH
23969: LD_INT 110
23971: PUSH
23972: LD_INT 111
23974: PUSH
23975: LD_INT 112
23977: PUSH
23978: LD_INT 114
23980: PUSH
23981: LD_INT 116
23983: PUSH
23984: LD_INT 117
23986: PUSH
23987: LD_INT 118
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: ST_TO_ADDR
24012: GO 25695
24014: LD_INT 12
24016: DOUBLE
24017: EQUAL
24018: IFTRUE 24022
24020: GO 24242
24022: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24023: LD_ADDR_VAR 0 2
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: LD_INT 2
24033: PUSH
24034: LD_INT 3
24036: PUSH
24037: LD_INT 4
24039: PUSH
24040: LD_INT 5
24042: PUSH
24043: LD_INT 6
24045: PUSH
24046: LD_INT 7
24048: PUSH
24049: LD_INT 8
24051: PUSH
24052: LD_INT 9
24054: PUSH
24055: LD_INT 10
24057: PUSH
24058: LD_INT 11
24060: PUSH
24061: LD_INT 12
24063: PUSH
24064: LD_INT 13
24066: PUSH
24067: LD_INT 14
24069: PUSH
24070: LD_INT 15
24072: PUSH
24073: LD_INT 16
24075: PUSH
24076: LD_INT 17
24078: PUSH
24079: LD_INT 18
24081: PUSH
24082: LD_INT 19
24084: PUSH
24085: LD_INT 20
24087: PUSH
24088: LD_INT 21
24090: PUSH
24091: LD_INT 22
24093: PUSH
24094: LD_INT 23
24096: PUSH
24097: LD_INT 24
24099: PUSH
24100: LD_INT 25
24102: PUSH
24103: LD_INT 26
24105: PUSH
24106: LD_INT 27
24108: PUSH
24109: LD_INT 28
24111: PUSH
24112: LD_INT 30
24114: PUSH
24115: LD_INT 31
24117: PUSH
24118: LD_INT 32
24120: PUSH
24121: LD_INT 33
24123: PUSH
24124: LD_INT 34
24126: PUSH
24127: LD_INT 36
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 101
24168: PUSH
24169: LD_INT 102
24171: PUSH
24172: LD_INT 103
24174: PUSH
24175: LD_INT 104
24177: PUSH
24178: LD_INT 105
24180: PUSH
24181: LD_INT 106
24183: PUSH
24184: LD_INT 107
24186: PUSH
24187: LD_INT 108
24189: PUSH
24190: LD_INT 109
24192: PUSH
24193: LD_INT 110
24195: PUSH
24196: LD_INT 111
24198: PUSH
24199: LD_INT 112
24201: PUSH
24202: LD_INT 113
24204: PUSH
24205: LD_INT 114
24207: PUSH
24208: LD_INT 116
24210: PUSH
24211: LD_INT 117
24213: PUSH
24214: LD_INT 118
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: ST_TO_ADDR
24240: GO 25695
24242: LD_INT 13
24244: DOUBLE
24245: EQUAL
24246: IFTRUE 24250
24248: GO 24458
24250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24251: LD_ADDR_VAR 0 2
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: LD_INT 3
24264: PUSH
24265: LD_INT 4
24267: PUSH
24268: LD_INT 5
24270: PUSH
24271: LD_INT 8
24273: PUSH
24274: LD_INT 9
24276: PUSH
24277: LD_INT 10
24279: PUSH
24280: LD_INT 11
24282: PUSH
24283: LD_INT 12
24285: PUSH
24286: LD_INT 14
24288: PUSH
24289: LD_INT 15
24291: PUSH
24292: LD_INT 16
24294: PUSH
24295: LD_INT 17
24297: PUSH
24298: LD_INT 18
24300: PUSH
24301: LD_INT 19
24303: PUSH
24304: LD_INT 20
24306: PUSH
24307: LD_INT 21
24309: PUSH
24310: LD_INT 22
24312: PUSH
24313: LD_INT 23
24315: PUSH
24316: LD_INT 24
24318: PUSH
24319: LD_INT 25
24321: PUSH
24322: LD_INT 26
24324: PUSH
24325: LD_INT 27
24327: PUSH
24328: LD_INT 28
24330: PUSH
24331: LD_INT 30
24333: PUSH
24334: LD_INT 31
24336: PUSH
24337: LD_INT 32
24339: PUSH
24340: LD_INT 33
24342: PUSH
24343: LD_INT 34
24345: PUSH
24346: LD_INT 36
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 101
24384: PUSH
24385: LD_INT 102
24387: PUSH
24388: LD_INT 103
24390: PUSH
24391: LD_INT 104
24393: PUSH
24394: LD_INT 105
24396: PUSH
24397: LD_INT 106
24399: PUSH
24400: LD_INT 107
24402: PUSH
24403: LD_INT 108
24405: PUSH
24406: LD_INT 109
24408: PUSH
24409: LD_INT 110
24411: PUSH
24412: LD_INT 111
24414: PUSH
24415: LD_INT 112
24417: PUSH
24418: LD_INT 113
24420: PUSH
24421: LD_INT 114
24423: PUSH
24424: LD_INT 116
24426: PUSH
24427: LD_INT 117
24429: PUSH
24430: LD_INT 118
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: ST_TO_ADDR
24456: GO 25695
24458: LD_INT 14
24460: DOUBLE
24461: EQUAL
24462: IFTRUE 24466
24464: GO 24690
24466: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24467: LD_ADDR_VAR 0 2
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: LD_INT 3
24480: PUSH
24481: LD_INT 4
24483: PUSH
24484: LD_INT 5
24486: PUSH
24487: LD_INT 6
24489: PUSH
24490: LD_INT 7
24492: PUSH
24493: LD_INT 8
24495: PUSH
24496: LD_INT 9
24498: PUSH
24499: LD_INT 10
24501: PUSH
24502: LD_INT 11
24504: PUSH
24505: LD_INT 12
24507: PUSH
24508: LD_INT 13
24510: PUSH
24511: LD_INT 14
24513: PUSH
24514: LD_INT 15
24516: PUSH
24517: LD_INT 16
24519: PUSH
24520: LD_INT 17
24522: PUSH
24523: LD_INT 18
24525: PUSH
24526: LD_INT 19
24528: PUSH
24529: LD_INT 20
24531: PUSH
24532: LD_INT 21
24534: PUSH
24535: LD_INT 22
24537: PUSH
24538: LD_INT 23
24540: PUSH
24541: LD_INT 24
24543: PUSH
24544: LD_INT 25
24546: PUSH
24547: LD_INT 26
24549: PUSH
24550: LD_INT 27
24552: PUSH
24553: LD_INT 28
24555: PUSH
24556: LD_INT 29
24558: PUSH
24559: LD_INT 30
24561: PUSH
24562: LD_INT 31
24564: PUSH
24565: LD_INT 32
24567: PUSH
24568: LD_INT 33
24570: PUSH
24571: LD_INT 34
24573: PUSH
24574: LD_INT 36
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 101
24616: PUSH
24617: LD_INT 102
24619: PUSH
24620: LD_INT 103
24622: PUSH
24623: LD_INT 104
24625: PUSH
24626: LD_INT 105
24628: PUSH
24629: LD_INT 106
24631: PUSH
24632: LD_INT 107
24634: PUSH
24635: LD_INT 108
24637: PUSH
24638: LD_INT 109
24640: PUSH
24641: LD_INT 110
24643: PUSH
24644: LD_INT 111
24646: PUSH
24647: LD_INT 112
24649: PUSH
24650: LD_INT 113
24652: PUSH
24653: LD_INT 114
24655: PUSH
24656: LD_INT 116
24658: PUSH
24659: LD_INT 117
24661: PUSH
24662: LD_INT 118
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: ST_TO_ADDR
24688: GO 25695
24690: LD_INT 15
24692: DOUBLE
24693: EQUAL
24694: IFTRUE 24698
24696: GO 24922
24698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24699: LD_ADDR_VAR 0 2
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: LD_INT 3
24712: PUSH
24713: LD_INT 4
24715: PUSH
24716: LD_INT 5
24718: PUSH
24719: LD_INT 6
24721: PUSH
24722: LD_INT 7
24724: PUSH
24725: LD_INT 8
24727: PUSH
24728: LD_INT 9
24730: PUSH
24731: LD_INT 10
24733: PUSH
24734: LD_INT 11
24736: PUSH
24737: LD_INT 12
24739: PUSH
24740: LD_INT 13
24742: PUSH
24743: LD_INT 14
24745: PUSH
24746: LD_INT 15
24748: PUSH
24749: LD_INT 16
24751: PUSH
24752: LD_INT 17
24754: PUSH
24755: LD_INT 18
24757: PUSH
24758: LD_INT 19
24760: PUSH
24761: LD_INT 20
24763: PUSH
24764: LD_INT 21
24766: PUSH
24767: LD_INT 22
24769: PUSH
24770: LD_INT 23
24772: PUSH
24773: LD_INT 24
24775: PUSH
24776: LD_INT 25
24778: PUSH
24779: LD_INT 26
24781: PUSH
24782: LD_INT 27
24784: PUSH
24785: LD_INT 28
24787: PUSH
24788: LD_INT 29
24790: PUSH
24791: LD_INT 30
24793: PUSH
24794: LD_INT 31
24796: PUSH
24797: LD_INT 32
24799: PUSH
24800: LD_INT 33
24802: PUSH
24803: LD_INT 34
24805: PUSH
24806: LD_INT 36
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 101
24848: PUSH
24849: LD_INT 102
24851: PUSH
24852: LD_INT 103
24854: PUSH
24855: LD_INT 104
24857: PUSH
24858: LD_INT 105
24860: PUSH
24861: LD_INT 106
24863: PUSH
24864: LD_INT 107
24866: PUSH
24867: LD_INT 108
24869: PUSH
24870: LD_INT 109
24872: PUSH
24873: LD_INT 110
24875: PUSH
24876: LD_INT 111
24878: PUSH
24879: LD_INT 112
24881: PUSH
24882: LD_INT 113
24884: PUSH
24885: LD_INT 114
24887: PUSH
24888: LD_INT 116
24890: PUSH
24891: LD_INT 117
24893: PUSH
24894: LD_INT 118
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: ST_TO_ADDR
24920: GO 25695
24922: LD_INT 16
24924: DOUBLE
24925: EQUAL
24926: IFTRUE 24930
24928: GO 25066
24930: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24931: LD_ADDR_VAR 0 2
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: LD_INT 4
24941: PUSH
24942: LD_INT 5
24944: PUSH
24945: LD_INT 7
24947: PUSH
24948: LD_INT 11
24950: PUSH
24951: LD_INT 12
24953: PUSH
24954: LD_INT 15
24956: PUSH
24957: LD_INT 16
24959: PUSH
24960: LD_INT 20
24962: PUSH
24963: LD_INT 21
24965: PUSH
24966: LD_INT 22
24968: PUSH
24969: LD_INT 23
24971: PUSH
24972: LD_INT 25
24974: PUSH
24975: LD_INT 26
24977: PUSH
24978: LD_INT 30
24980: PUSH
24981: LD_INT 31
24983: PUSH
24984: LD_INT 32
24986: PUSH
24987: LD_INT 33
24989: PUSH
24990: LD_INT 34
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 101
25016: PUSH
25017: LD_INT 102
25019: PUSH
25020: LD_INT 103
25022: PUSH
25023: LD_INT 106
25025: PUSH
25026: LD_INT 108
25028: PUSH
25029: LD_INT 112
25031: PUSH
25032: LD_INT 113
25034: PUSH
25035: LD_INT 114
25037: PUSH
25038: LD_INT 116
25040: PUSH
25041: LD_INT 117
25043: PUSH
25044: LD_INT 118
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: ST_TO_ADDR
25064: GO 25695
25066: LD_INT 17
25068: DOUBLE
25069: EQUAL
25070: IFTRUE 25074
25072: GO 25298
25074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25075: LD_ADDR_VAR 0 2
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: LD_INT 3
25088: PUSH
25089: LD_INT 4
25091: PUSH
25092: LD_INT 5
25094: PUSH
25095: LD_INT 6
25097: PUSH
25098: LD_INT 7
25100: PUSH
25101: LD_INT 8
25103: PUSH
25104: LD_INT 9
25106: PUSH
25107: LD_INT 10
25109: PUSH
25110: LD_INT 11
25112: PUSH
25113: LD_INT 12
25115: PUSH
25116: LD_INT 13
25118: PUSH
25119: LD_INT 14
25121: PUSH
25122: LD_INT 15
25124: PUSH
25125: LD_INT 16
25127: PUSH
25128: LD_INT 17
25130: PUSH
25131: LD_INT 18
25133: PUSH
25134: LD_INT 19
25136: PUSH
25137: LD_INT 20
25139: PUSH
25140: LD_INT 21
25142: PUSH
25143: LD_INT 22
25145: PUSH
25146: LD_INT 23
25148: PUSH
25149: LD_INT 24
25151: PUSH
25152: LD_INT 25
25154: PUSH
25155: LD_INT 26
25157: PUSH
25158: LD_INT 27
25160: PUSH
25161: LD_INT 28
25163: PUSH
25164: LD_INT 29
25166: PUSH
25167: LD_INT 30
25169: PUSH
25170: LD_INT 31
25172: PUSH
25173: LD_INT 32
25175: PUSH
25176: LD_INT 33
25178: PUSH
25179: LD_INT 34
25181: PUSH
25182: LD_INT 36
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 101
25224: PUSH
25225: LD_INT 102
25227: PUSH
25228: LD_INT 103
25230: PUSH
25231: LD_INT 104
25233: PUSH
25234: LD_INT 105
25236: PUSH
25237: LD_INT 106
25239: PUSH
25240: LD_INT 107
25242: PUSH
25243: LD_INT 108
25245: PUSH
25246: LD_INT 109
25248: PUSH
25249: LD_INT 110
25251: PUSH
25252: LD_INT 111
25254: PUSH
25255: LD_INT 112
25257: PUSH
25258: LD_INT 113
25260: PUSH
25261: LD_INT 114
25263: PUSH
25264: LD_INT 116
25266: PUSH
25267: LD_INT 117
25269: PUSH
25270: LD_INT 118
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: ST_TO_ADDR
25296: GO 25695
25298: LD_INT 18
25300: DOUBLE
25301: EQUAL
25302: IFTRUE 25306
25304: GO 25454
25306: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25307: LD_ADDR_VAR 0 2
25311: PUSH
25312: LD_INT 2
25314: PUSH
25315: LD_INT 4
25317: PUSH
25318: LD_INT 5
25320: PUSH
25321: LD_INT 7
25323: PUSH
25324: LD_INT 11
25326: PUSH
25327: LD_INT 12
25329: PUSH
25330: LD_INT 15
25332: PUSH
25333: LD_INT 16
25335: PUSH
25336: LD_INT 20
25338: PUSH
25339: LD_INT 21
25341: PUSH
25342: LD_INT 22
25344: PUSH
25345: LD_INT 23
25347: PUSH
25348: LD_INT 25
25350: PUSH
25351: LD_INT 26
25353: PUSH
25354: LD_INT 30
25356: PUSH
25357: LD_INT 31
25359: PUSH
25360: LD_INT 32
25362: PUSH
25363: LD_INT 33
25365: PUSH
25366: LD_INT 34
25368: PUSH
25369: LD_INT 35
25371: PUSH
25372: LD_INT 36
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 101
25400: PUSH
25401: LD_INT 102
25403: PUSH
25404: LD_INT 103
25406: PUSH
25407: LD_INT 106
25409: PUSH
25410: LD_INT 108
25412: PUSH
25413: LD_INT 112
25415: PUSH
25416: LD_INT 113
25418: PUSH
25419: LD_INT 114
25421: PUSH
25422: LD_INT 115
25424: PUSH
25425: LD_INT 116
25427: PUSH
25428: LD_INT 117
25430: PUSH
25431: LD_INT 118
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: ST_TO_ADDR
25452: GO 25695
25454: LD_INT 19
25456: DOUBLE
25457: EQUAL
25458: IFTRUE 25462
25460: GO 25694
25462: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25463: LD_ADDR_VAR 0 2
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: LD_INT 3
25476: PUSH
25477: LD_INT 4
25479: PUSH
25480: LD_INT 5
25482: PUSH
25483: LD_INT 6
25485: PUSH
25486: LD_INT 7
25488: PUSH
25489: LD_INT 8
25491: PUSH
25492: LD_INT 9
25494: PUSH
25495: LD_INT 10
25497: PUSH
25498: LD_INT 11
25500: PUSH
25501: LD_INT 12
25503: PUSH
25504: LD_INT 13
25506: PUSH
25507: LD_INT 14
25509: PUSH
25510: LD_INT 15
25512: PUSH
25513: LD_INT 16
25515: PUSH
25516: LD_INT 17
25518: PUSH
25519: LD_INT 18
25521: PUSH
25522: LD_INT 19
25524: PUSH
25525: LD_INT 20
25527: PUSH
25528: LD_INT 21
25530: PUSH
25531: LD_INT 22
25533: PUSH
25534: LD_INT 23
25536: PUSH
25537: LD_INT 24
25539: PUSH
25540: LD_INT 25
25542: PUSH
25543: LD_INT 26
25545: PUSH
25546: LD_INT 27
25548: PUSH
25549: LD_INT 28
25551: PUSH
25552: LD_INT 29
25554: PUSH
25555: LD_INT 30
25557: PUSH
25558: LD_INT 31
25560: PUSH
25561: LD_INT 32
25563: PUSH
25564: LD_INT 33
25566: PUSH
25567: LD_INT 34
25569: PUSH
25570: LD_INT 35
25572: PUSH
25573: LD_INT 36
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 101
25616: PUSH
25617: LD_INT 102
25619: PUSH
25620: LD_INT 103
25622: PUSH
25623: LD_INT 104
25625: PUSH
25626: LD_INT 105
25628: PUSH
25629: LD_INT 106
25631: PUSH
25632: LD_INT 107
25634: PUSH
25635: LD_INT 108
25637: PUSH
25638: LD_INT 109
25640: PUSH
25641: LD_INT 110
25643: PUSH
25644: LD_INT 111
25646: PUSH
25647: LD_INT 112
25649: PUSH
25650: LD_INT 113
25652: PUSH
25653: LD_INT 114
25655: PUSH
25656: LD_INT 115
25658: PUSH
25659: LD_INT 116
25661: PUSH
25662: LD_INT 117
25664: PUSH
25665: LD_INT 118
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: ST_TO_ADDR
25692: GO 25695
25694: POP
// end else
25695: GO 25926
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25697: LD_ADDR_VAR 0 2
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: LD_INT 2
25707: PUSH
25708: LD_INT 3
25710: PUSH
25711: LD_INT 4
25713: PUSH
25714: LD_INT 5
25716: PUSH
25717: LD_INT 6
25719: PUSH
25720: LD_INT 7
25722: PUSH
25723: LD_INT 8
25725: PUSH
25726: LD_INT 9
25728: PUSH
25729: LD_INT 10
25731: PUSH
25732: LD_INT 11
25734: PUSH
25735: LD_INT 12
25737: PUSH
25738: LD_INT 13
25740: PUSH
25741: LD_INT 14
25743: PUSH
25744: LD_INT 15
25746: PUSH
25747: LD_INT 16
25749: PUSH
25750: LD_INT 17
25752: PUSH
25753: LD_INT 18
25755: PUSH
25756: LD_INT 19
25758: PUSH
25759: LD_INT 20
25761: PUSH
25762: LD_INT 21
25764: PUSH
25765: LD_INT 22
25767: PUSH
25768: LD_INT 23
25770: PUSH
25771: LD_INT 24
25773: PUSH
25774: LD_INT 25
25776: PUSH
25777: LD_INT 26
25779: PUSH
25780: LD_INT 27
25782: PUSH
25783: LD_INT 28
25785: PUSH
25786: LD_INT 29
25788: PUSH
25789: LD_INT 30
25791: PUSH
25792: LD_INT 31
25794: PUSH
25795: LD_INT 32
25797: PUSH
25798: LD_INT 33
25800: PUSH
25801: LD_INT 34
25803: PUSH
25804: LD_INT 35
25806: PUSH
25807: LD_INT 36
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 101
25850: PUSH
25851: LD_INT 102
25853: PUSH
25854: LD_INT 103
25856: PUSH
25857: LD_INT 104
25859: PUSH
25860: LD_INT 105
25862: PUSH
25863: LD_INT 106
25865: PUSH
25866: LD_INT 107
25868: PUSH
25869: LD_INT 108
25871: PUSH
25872: LD_INT 109
25874: PUSH
25875: LD_INT 110
25877: PUSH
25878: LD_INT 111
25880: PUSH
25881: LD_INT 112
25883: PUSH
25884: LD_INT 113
25886: PUSH
25887: LD_INT 114
25889: PUSH
25890: LD_INT 115
25892: PUSH
25893: LD_INT 116
25895: PUSH
25896: LD_INT 117
25898: PUSH
25899: LD_INT 118
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: ST_TO_ADDR
// if result then
25926: LD_VAR 0 2
25930: IFFALSE 26716
// begin normal :=  ;
25932: LD_ADDR_VAR 0 5
25936: PUSH
25937: LD_STRING 
25939: ST_TO_ADDR
// hardcore :=  ;
25940: LD_ADDR_VAR 0 6
25944: PUSH
25945: LD_STRING 
25947: ST_TO_ADDR
// active :=  ;
25948: LD_ADDR_VAR 0 7
25952: PUSH
25953: LD_STRING 
25955: ST_TO_ADDR
// for i = 1 to normalCounter do
25956: LD_ADDR_VAR 0 8
25960: PUSH
25961: DOUBLE
25962: LD_INT 1
25964: DEC
25965: ST_TO_ADDR
25966: LD_EXP 39
25970: PUSH
25971: FOR_TO
25972: IFFALSE 26073
// begin tmp := 0 ;
25974: LD_ADDR_VAR 0 3
25978: PUSH
25979: LD_STRING 0
25981: ST_TO_ADDR
// if result [ 1 ] then
25982: LD_VAR 0 2
25986: PUSH
25987: LD_INT 1
25989: ARRAY
25990: IFFALSE 26055
// if result [ 1 ] [ 1 ] = i then
25992: LD_VAR 0 2
25996: PUSH
25997: LD_INT 1
25999: ARRAY
26000: PUSH
26001: LD_INT 1
26003: ARRAY
26004: PUSH
26005: LD_VAR 0 8
26009: EQUAL
26010: IFFALSE 26055
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26012: LD_ADDR_VAR 0 2
26016: PUSH
26017: LD_VAR 0 2
26021: PPUSH
26022: LD_INT 1
26024: PPUSH
26025: LD_VAR 0 2
26029: PUSH
26030: LD_INT 1
26032: ARRAY
26033: PPUSH
26034: LD_INT 1
26036: PPUSH
26037: CALL_OW 3
26041: PPUSH
26042: CALL_OW 1
26046: ST_TO_ADDR
// tmp := 1 ;
26047: LD_ADDR_VAR 0 3
26051: PUSH
26052: LD_STRING 1
26054: ST_TO_ADDR
// end ; normal := normal & tmp ;
26055: LD_ADDR_VAR 0 5
26059: PUSH
26060: LD_VAR 0 5
26064: PUSH
26065: LD_VAR 0 3
26069: STR
26070: ST_TO_ADDR
// end ;
26071: GO 25971
26073: POP
26074: POP
// for i = 1 to hardcoreCounter do
26075: LD_ADDR_VAR 0 8
26079: PUSH
26080: DOUBLE
26081: LD_INT 1
26083: DEC
26084: ST_TO_ADDR
26085: LD_EXP 40
26089: PUSH
26090: FOR_TO
26091: IFFALSE 26196
// begin tmp := 0 ;
26093: LD_ADDR_VAR 0 3
26097: PUSH
26098: LD_STRING 0
26100: ST_TO_ADDR
// if result [ 2 ] then
26101: LD_VAR 0 2
26105: PUSH
26106: LD_INT 2
26108: ARRAY
26109: IFFALSE 26178
// if result [ 2 ] [ 1 ] = 100 + i then
26111: LD_VAR 0 2
26115: PUSH
26116: LD_INT 2
26118: ARRAY
26119: PUSH
26120: LD_INT 1
26122: ARRAY
26123: PUSH
26124: LD_INT 100
26126: PUSH
26127: LD_VAR 0 8
26131: PLUS
26132: EQUAL
26133: IFFALSE 26178
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26135: LD_ADDR_VAR 0 2
26139: PUSH
26140: LD_VAR 0 2
26144: PPUSH
26145: LD_INT 2
26147: PPUSH
26148: LD_VAR 0 2
26152: PUSH
26153: LD_INT 2
26155: ARRAY
26156: PPUSH
26157: LD_INT 1
26159: PPUSH
26160: CALL_OW 3
26164: PPUSH
26165: CALL_OW 1
26169: ST_TO_ADDR
// tmp := 1 ;
26170: LD_ADDR_VAR 0 3
26174: PUSH
26175: LD_STRING 1
26177: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26178: LD_ADDR_VAR 0 6
26182: PUSH
26183: LD_VAR 0 6
26187: PUSH
26188: LD_VAR 0 3
26192: STR
26193: ST_TO_ADDR
// end ;
26194: GO 26090
26196: POP
26197: POP
// if isGameLoad then
26198: LD_VAR 0 1
26202: IFFALSE 26677
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26204: LD_ADDR_VAR 0 4
26208: PUSH
26209: LD_EXP 43
26213: PUSH
26214: LD_EXP 42
26218: PUSH
26219: LD_EXP 44
26223: PUSH
26224: LD_EXP 41
26228: PUSH
26229: LD_EXP 45
26233: PUSH
26234: LD_EXP 46
26238: PUSH
26239: LD_EXP 47
26243: PUSH
26244: LD_EXP 48
26248: PUSH
26249: LD_EXP 49
26253: PUSH
26254: LD_EXP 50
26258: PUSH
26259: LD_EXP 51
26263: PUSH
26264: LD_EXP 52
26268: PUSH
26269: LD_EXP 53
26273: PUSH
26274: LD_EXP 54
26278: PUSH
26279: LD_EXP 62
26283: PUSH
26284: LD_EXP 63
26288: PUSH
26289: LD_EXP 64
26293: PUSH
26294: LD_EXP 65
26298: PUSH
26299: LD_EXP 67
26303: PUSH
26304: LD_EXP 68
26308: PUSH
26309: LD_EXP 69
26313: PUSH
26314: LD_EXP 72
26318: PUSH
26319: LD_EXP 74
26323: PUSH
26324: LD_EXP 75
26328: PUSH
26329: LD_EXP 76
26333: PUSH
26334: LD_EXP 78
26338: PUSH
26339: LD_EXP 79
26343: PUSH
26344: LD_EXP 82
26348: PUSH
26349: LD_EXP 83
26353: PUSH
26354: LD_EXP 84
26358: PUSH
26359: LD_EXP 85
26363: PUSH
26364: LD_EXP 86
26368: PUSH
26369: LD_EXP 87
26373: PUSH
26374: LD_EXP 88
26378: PUSH
26379: LD_EXP 89
26383: PUSH
26384: LD_EXP 90
26388: PUSH
26389: LD_EXP 55
26393: PUSH
26394: LD_EXP 56
26398: PUSH
26399: LD_EXP 59
26403: PUSH
26404: LD_EXP 60
26408: PUSH
26409: LD_EXP 61
26413: PUSH
26414: LD_EXP 57
26418: PUSH
26419: LD_EXP 58
26423: PUSH
26424: LD_EXP 66
26428: PUSH
26429: LD_EXP 70
26433: PUSH
26434: LD_EXP 71
26438: PUSH
26439: LD_EXP 73
26443: PUSH
26444: LD_EXP 77
26448: PUSH
26449: LD_EXP 80
26453: PUSH
26454: LD_EXP 81
26458: PUSH
26459: LD_EXP 91
26463: PUSH
26464: LD_EXP 92
26468: PUSH
26469: LD_EXP 93
26473: PUSH
26474: LD_EXP 94
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: ST_TO_ADDR
// tmp :=  ;
26535: LD_ADDR_VAR 0 3
26539: PUSH
26540: LD_STRING 
26542: ST_TO_ADDR
// for i = 1 to normalCounter do
26543: LD_ADDR_VAR 0 8
26547: PUSH
26548: DOUBLE
26549: LD_INT 1
26551: DEC
26552: ST_TO_ADDR
26553: LD_EXP 39
26557: PUSH
26558: FOR_TO
26559: IFFALSE 26595
// begin if flags [ i ] then
26561: LD_VAR 0 4
26565: PUSH
26566: LD_VAR 0 8
26570: ARRAY
26571: IFFALSE 26593
// tmp := tmp & i & ; ;
26573: LD_ADDR_VAR 0 3
26577: PUSH
26578: LD_VAR 0 3
26582: PUSH
26583: LD_VAR 0 8
26587: STR
26588: PUSH
26589: LD_STRING ;
26591: STR
26592: ST_TO_ADDR
// end ;
26593: GO 26558
26595: POP
26596: POP
// for i = 1 to hardcoreCounter do
26597: LD_ADDR_VAR 0 8
26601: PUSH
26602: DOUBLE
26603: LD_INT 1
26605: DEC
26606: ST_TO_ADDR
26607: LD_EXP 40
26611: PUSH
26612: FOR_TO
26613: IFFALSE 26659
// begin if flags [ normalCounter + i ] then
26615: LD_VAR 0 4
26619: PUSH
26620: LD_EXP 39
26624: PUSH
26625: LD_VAR 0 8
26629: PLUS
26630: ARRAY
26631: IFFALSE 26657
// tmp := tmp & ( 100 + i ) & ; ;
26633: LD_ADDR_VAR 0 3
26637: PUSH
26638: LD_VAR 0 3
26642: PUSH
26643: LD_INT 100
26645: PUSH
26646: LD_VAR 0 8
26650: PLUS
26651: STR
26652: PUSH
26653: LD_STRING ;
26655: STR
26656: ST_TO_ADDR
// end ;
26657: GO 26612
26659: POP
26660: POP
// if tmp then
26661: LD_VAR 0 3
26665: IFFALSE 26677
// active := tmp ;
26667: LD_ADDR_VAR 0 7
26671: PUSH
26672: LD_VAR 0 3
26676: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26677: LD_STRING getStreamItemsFromMission("
26679: PUSH
26680: LD_VAR 0 5
26684: STR
26685: PUSH
26686: LD_STRING ","
26688: STR
26689: PUSH
26690: LD_VAR 0 6
26694: STR
26695: PUSH
26696: LD_STRING ","
26698: STR
26699: PUSH
26700: LD_VAR 0 7
26704: STR
26705: PUSH
26706: LD_STRING ")
26708: STR
26709: PPUSH
26710: CALL_OW 559
// end else
26714: GO 26723
// ToLua ( getStreamItemsFromMission("","","") ) ;
26716: LD_STRING getStreamItemsFromMission("","","")
26718: PPUSH
26719: CALL_OW 559
// end ;
26723: LD_VAR 0 2
26727: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26728: LD_EXP 38
26732: IFFALSE 26740
26734: PUSH
26735: LD_EXP 43
26739: AND
26740: IFFALSE 26864
26742: GO 26744
26744: DISABLE
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
// begin enable ;
26749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26750: LD_ADDR_VAR 0 2
26754: PUSH
26755: LD_INT 22
26757: PUSH
26758: LD_OWVAR 2
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 2
26769: PUSH
26770: LD_INT 34
26772: PUSH
26773: LD_INT 7
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 34
26782: PUSH
26783: LD_INT 45
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 34
26792: PUSH
26793: LD_INT 28
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 34
26802: PUSH
26803: LD_INT 47
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PPUSH
26821: CALL_OW 69
26825: ST_TO_ADDR
// if not tmp then
26826: LD_VAR 0 2
26830: NOT
26831: IFFALSE 26835
// exit ;
26833: GO 26864
// for i in tmp do
26835: LD_ADDR_VAR 0 1
26839: PUSH
26840: LD_VAR 0 2
26844: PUSH
26845: FOR_IN
26846: IFFALSE 26862
// begin SetLives ( i , 0 ) ;
26848: LD_VAR 0 1
26852: PPUSH
26853: LD_INT 0
26855: PPUSH
26856: CALL_OW 234
// end ;
26860: GO 26845
26862: POP
26863: POP
// end ;
26864: PPOPN 2
26866: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26867: LD_EXP 38
26871: IFFALSE 26879
26873: PUSH
26874: LD_EXP 44
26878: AND
26879: IFFALSE 26963
26881: GO 26883
26883: DISABLE
26884: LD_INT 0
26886: PPUSH
26887: PPUSH
// begin enable ;
26888: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26889: LD_ADDR_VAR 0 2
26893: PUSH
26894: LD_INT 22
26896: PUSH
26897: LD_OWVAR 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 32
26908: PUSH
26909: LD_INT 3
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PPUSH
26920: CALL_OW 69
26924: ST_TO_ADDR
// if not tmp then
26925: LD_VAR 0 2
26929: NOT
26930: IFFALSE 26934
// exit ;
26932: GO 26963
// for i in tmp do
26934: LD_ADDR_VAR 0 1
26938: PUSH
26939: LD_VAR 0 2
26943: PUSH
26944: FOR_IN
26945: IFFALSE 26961
// begin SetLives ( i , 0 ) ;
26947: LD_VAR 0 1
26951: PPUSH
26952: LD_INT 0
26954: PPUSH
26955: CALL_OW 234
// end ;
26959: GO 26944
26961: POP
26962: POP
// end ;
26963: PPOPN 2
26965: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26966: LD_EXP 38
26970: IFFALSE 26978
26972: PUSH
26973: LD_EXP 41
26977: AND
26978: IFFALSE 27071
26980: GO 26982
26982: DISABLE
26983: LD_INT 0
26985: PPUSH
// begin enable ;
26986: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26987: LD_ADDR_VAR 0 1
26991: PUSH
26992: LD_INT 22
26994: PUSH
26995: LD_OWVAR 2
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: LD_INT 25
27009: PUSH
27010: LD_INT 5
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 25
27019: PUSH
27020: LD_INT 9
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 25
27029: PUSH
27030: LD_INT 8
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PPUSH
27047: CALL_OW 69
27051: PUSH
27052: FOR_IN
27053: IFFALSE 27069
// begin SetClass ( i , 1 ) ;
27055: LD_VAR 0 1
27059: PPUSH
27060: LD_INT 1
27062: PPUSH
27063: CALL_OW 336
// end ;
27067: GO 27052
27069: POP
27070: POP
// end ;
27071: PPOPN 1
27073: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27074: LD_EXP 38
27078: IFFALSE 27086
27080: PUSH
27081: LD_EXP 42
27085: AND
27086: IFFALSE 27098
27088: PUSH
27089: LD_OWVAR 65
27093: PUSH
27094: LD_INT 7
27096: LESS
27097: AND
27098: IFFALSE 27112
27100: GO 27102
27102: DISABLE
// begin enable ;
27103: ENABLE
// game_speed := 7 ;
27104: LD_ADDR_OWVAR 65
27108: PUSH
27109: LD_INT 7
27111: ST_TO_ADDR
// end ;
27112: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27113: LD_EXP 38
27117: IFFALSE 27125
27119: PUSH
27120: LD_EXP 45
27124: AND
27125: IFFALSE 27327
27127: GO 27129
27129: DISABLE
27130: LD_INT 0
27132: PPUSH
27133: PPUSH
27134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27135: LD_ADDR_VAR 0 3
27139: PUSH
27140: LD_INT 81
27142: PUSH
27143: LD_OWVAR 2
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 21
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PPUSH
27166: CALL_OW 69
27170: ST_TO_ADDR
// if not tmp then
27171: LD_VAR 0 3
27175: NOT
27176: IFFALSE 27180
// exit ;
27178: GO 27327
// if tmp > 5 then
27180: LD_VAR 0 3
27184: PUSH
27185: LD_INT 5
27187: GREATER
27188: IFFALSE 27200
// k := 5 else
27190: LD_ADDR_VAR 0 2
27194: PUSH
27195: LD_INT 5
27197: ST_TO_ADDR
27198: GO 27210
// k := tmp ;
27200: LD_ADDR_VAR 0 2
27204: PUSH
27205: LD_VAR 0 3
27209: ST_TO_ADDR
// for i := 1 to k do
27210: LD_ADDR_VAR 0 1
27214: PUSH
27215: DOUBLE
27216: LD_INT 1
27218: DEC
27219: ST_TO_ADDR
27220: LD_VAR 0 2
27224: PUSH
27225: FOR_TO
27226: IFFALSE 27325
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27228: LD_VAR 0 3
27232: PUSH
27233: LD_VAR 0 1
27237: ARRAY
27238: PPUSH
27239: LD_VAR 0 1
27243: PUSH
27244: LD_INT 4
27246: MOD
27247: PUSH
27248: LD_INT 1
27250: PLUS
27251: PPUSH
27252: CALL_OW 259
27256: PUSH
27257: LD_INT 10
27259: LESS
27260: IFFALSE 27323
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27262: LD_VAR 0 3
27266: PUSH
27267: LD_VAR 0 1
27271: ARRAY
27272: PPUSH
27273: LD_VAR 0 1
27277: PUSH
27278: LD_INT 4
27280: MOD
27281: PUSH
27282: LD_INT 1
27284: PLUS
27285: PPUSH
27286: LD_VAR 0 3
27290: PUSH
27291: LD_VAR 0 1
27295: ARRAY
27296: PPUSH
27297: LD_VAR 0 1
27301: PUSH
27302: LD_INT 4
27304: MOD
27305: PUSH
27306: LD_INT 1
27308: PLUS
27309: PPUSH
27310: CALL_OW 259
27314: PUSH
27315: LD_INT 1
27317: PLUS
27318: PPUSH
27319: CALL_OW 237
27323: GO 27225
27325: POP
27326: POP
// end ;
27327: PPOPN 3
27329: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27330: LD_EXP 38
27334: IFFALSE 27342
27336: PUSH
27337: LD_EXP 46
27341: AND
27342: IFFALSE 27362
27344: GO 27346
27346: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27347: LD_INT 4
27349: PPUSH
27350: LD_OWVAR 2
27354: PPUSH
27355: LD_INT 0
27357: PPUSH
27358: CALL_OW 324
27362: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27363: LD_EXP 38
27367: IFFALSE 27375
27369: PUSH
27370: LD_EXP 75
27374: AND
27375: IFFALSE 27395
27377: GO 27379
27379: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27380: LD_INT 19
27382: PPUSH
27383: LD_OWVAR 2
27387: PPUSH
27388: LD_INT 0
27390: PPUSH
27391: CALL_OW 324
27395: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27396: LD_EXP 38
27400: IFFALSE 27408
27402: PUSH
27403: LD_EXP 47
27407: AND
27408: IFFALSE 27510
27410: GO 27412
27412: DISABLE
27413: LD_INT 0
27415: PPUSH
27416: PPUSH
// begin enable ;
27417: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27418: LD_ADDR_VAR 0 2
27422: PUSH
27423: LD_INT 22
27425: PUSH
27426: LD_OWVAR 2
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 2
27437: PUSH
27438: LD_INT 34
27440: PUSH
27441: LD_INT 11
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 34
27450: PUSH
27451: LD_INT 30
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PPUSH
27467: CALL_OW 69
27471: ST_TO_ADDR
// if not tmp then
27472: LD_VAR 0 2
27476: NOT
27477: IFFALSE 27481
// exit ;
27479: GO 27510
// for i in tmp do
27481: LD_ADDR_VAR 0 1
27485: PUSH
27486: LD_VAR 0 2
27490: PUSH
27491: FOR_IN
27492: IFFALSE 27508
// begin SetLives ( i , 0 ) ;
27494: LD_VAR 0 1
27498: PPUSH
27499: LD_INT 0
27501: PPUSH
27502: CALL_OW 234
// end ;
27506: GO 27491
27508: POP
27509: POP
// end ;
27510: PPOPN 2
27512: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27513: LD_EXP 38
27517: IFFALSE 27525
27519: PUSH
27520: LD_EXP 48
27524: AND
27525: IFFALSE 27545
27527: GO 27529
27529: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27530: LD_INT 32
27532: PPUSH
27533: LD_OWVAR 2
27537: PPUSH
27538: LD_INT 0
27540: PPUSH
27541: CALL_OW 324
27545: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27546: LD_EXP 38
27550: IFFALSE 27558
27552: PUSH
27553: LD_EXP 49
27557: AND
27558: IFFALSE 27741
27560: GO 27562
27562: DISABLE
27563: LD_INT 0
27565: PPUSH
27566: PPUSH
27567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27568: LD_ADDR_VAR 0 2
27572: PUSH
27573: LD_INT 22
27575: PUSH
27576: LD_OWVAR 2
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 33
27587: PUSH
27588: LD_INT 3
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PPUSH
27599: CALL_OW 69
27603: ST_TO_ADDR
// if not tmp then
27604: LD_VAR 0 2
27608: NOT
27609: IFFALSE 27613
// exit ;
27611: GO 27741
// side := 0 ;
27613: LD_ADDR_VAR 0 3
27617: PUSH
27618: LD_INT 0
27620: ST_TO_ADDR
// for i := 1 to 8 do
27621: LD_ADDR_VAR 0 1
27625: PUSH
27626: DOUBLE
27627: LD_INT 1
27629: DEC
27630: ST_TO_ADDR
27631: LD_INT 8
27633: PUSH
27634: FOR_TO
27635: IFFALSE 27685
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27637: LD_OWVAR 2
27641: PUSH
27642: LD_VAR 0 1
27646: NONEQUAL
27647: IFFALSE 27669
27649: PUSH
27650: LD_OWVAR 2
27654: PPUSH
27655: LD_VAR 0 1
27659: PPUSH
27660: CALL_OW 81
27664: PUSH
27665: LD_INT 2
27667: EQUAL
27668: AND
27669: IFFALSE 27683
// begin side := i ;
27671: LD_ADDR_VAR 0 3
27675: PUSH
27676: LD_VAR 0 1
27680: ST_TO_ADDR
// break ;
27681: GO 27685
// end ;
27683: GO 27634
27685: POP
27686: POP
// if not side then
27687: LD_VAR 0 3
27691: NOT
27692: IFFALSE 27696
// exit ;
27694: GO 27741
// for i := 1 to tmp do
27696: LD_ADDR_VAR 0 1
27700: PUSH
27701: DOUBLE
27702: LD_INT 1
27704: DEC
27705: ST_TO_ADDR
27706: LD_VAR 0 2
27710: PUSH
27711: FOR_TO
27712: IFFALSE 27739
// if Prob ( 60 ) then
27714: LD_INT 60
27716: PPUSH
27717: CALL_OW 13
27721: IFFALSE 27737
// SetSide ( i , side ) ;
27723: LD_VAR 0 1
27727: PPUSH
27728: LD_VAR 0 3
27732: PPUSH
27733: CALL_OW 235
27737: GO 27711
27739: POP
27740: POP
// end ;
27741: PPOPN 3
27743: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27744: LD_EXP 38
27748: IFFALSE 27756
27750: PUSH
27751: LD_EXP 51
27755: AND
27756: IFFALSE 27875
27758: GO 27760
27760: DISABLE
27761: LD_INT 0
27763: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27764: LD_ADDR_VAR 0 1
27768: PUSH
27769: LD_INT 22
27771: PUSH
27772: LD_OWVAR 2
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 21
27783: PUSH
27784: LD_INT 1
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 3
27793: PUSH
27794: LD_INT 23
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: PPUSH
27813: CALL_OW 69
27817: PUSH
27818: FOR_IN
27819: IFFALSE 27873
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27821: LD_VAR 0 1
27825: PPUSH
27826: CALL_OW 257
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 3
27839: PUSH
27840: LD_INT 4
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: IN
27849: IFFALSE 27871
// SetClass ( un , rand ( 1 , 4 ) ) ;
27851: LD_VAR 0 1
27855: PPUSH
27856: LD_INT 1
27858: PPUSH
27859: LD_INT 4
27861: PPUSH
27862: CALL_OW 12
27866: PPUSH
27867: CALL_OW 336
27871: GO 27818
27873: POP
27874: POP
// end ;
27875: PPOPN 1
27877: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27878: LD_EXP 38
27882: IFFALSE 27890
27884: PUSH
27885: LD_EXP 50
27889: AND
27890: IFFALSE 27969
27892: GO 27894
27894: DISABLE
27895: LD_INT 0
27897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27898: LD_ADDR_VAR 0 1
27902: PUSH
27903: LD_INT 22
27905: PUSH
27906: LD_OWVAR 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 21
27917: PUSH
27918: LD_INT 3
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PPUSH
27929: CALL_OW 69
27933: ST_TO_ADDR
// if not tmp then
27934: LD_VAR 0 1
27938: NOT
27939: IFFALSE 27943
// exit ;
27941: GO 27969
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27943: LD_VAR 0 1
27947: PUSH
27948: LD_INT 1
27950: PPUSH
27951: LD_VAR 0 1
27955: PPUSH
27956: CALL_OW 12
27960: ARRAY
27961: PPUSH
27962: LD_INT 100
27964: PPUSH
27965: CALL_OW 234
// end ;
27969: PPOPN 1
27971: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27972: LD_EXP 38
27976: IFFALSE 27984
27978: PUSH
27979: LD_EXP 52
27983: AND
27984: IFFALSE 28082
27986: GO 27988
27988: DISABLE
27989: LD_INT 0
27991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27992: LD_ADDR_VAR 0 1
27996: PUSH
27997: LD_INT 22
27999: PUSH
28000: LD_OWVAR 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 21
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PPUSH
28023: CALL_OW 69
28027: ST_TO_ADDR
// if not tmp then
28028: LD_VAR 0 1
28032: NOT
28033: IFFALSE 28037
// exit ;
28035: GO 28082
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28037: LD_VAR 0 1
28041: PUSH
28042: LD_INT 1
28044: PPUSH
28045: LD_VAR 0 1
28049: PPUSH
28050: CALL_OW 12
28054: ARRAY
28055: PPUSH
28056: LD_INT 1
28058: PPUSH
28059: LD_INT 4
28061: PPUSH
28062: CALL_OW 12
28066: PPUSH
28067: LD_INT 3000
28069: PPUSH
28070: LD_INT 9000
28072: PPUSH
28073: CALL_OW 12
28077: PPUSH
28078: CALL_OW 492
// end ;
28082: PPOPN 1
28084: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28085: LD_EXP 38
28089: IFFALSE 28097
28091: PUSH
28092: LD_EXP 53
28096: AND
28097: IFFALSE 28117
28099: GO 28101
28101: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28102: LD_INT 1
28104: PPUSH
28105: LD_OWVAR 2
28109: PPUSH
28110: LD_INT 0
28112: PPUSH
28113: CALL_OW 324
28117: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28118: LD_EXP 38
28122: IFFALSE 28130
28124: PUSH
28125: LD_EXP 54
28129: AND
28130: IFFALSE 28213
28132: GO 28134
28134: DISABLE
28135: LD_INT 0
28137: PPUSH
28138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28139: LD_ADDR_VAR 0 2
28143: PUSH
28144: LD_INT 22
28146: PUSH
28147: LD_OWVAR 2
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 21
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PPUSH
28170: CALL_OW 69
28174: ST_TO_ADDR
// if not tmp then
28175: LD_VAR 0 2
28179: NOT
28180: IFFALSE 28184
// exit ;
28182: GO 28213
// for i in tmp do
28184: LD_ADDR_VAR 0 1
28188: PUSH
28189: LD_VAR 0 2
28193: PUSH
28194: FOR_IN
28195: IFFALSE 28211
// SetBLevel ( i , 10 ) ;
28197: LD_VAR 0 1
28201: PPUSH
28202: LD_INT 10
28204: PPUSH
28205: CALL_OW 241
28209: GO 28194
28211: POP
28212: POP
// end ;
28213: PPOPN 2
28215: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28216: LD_EXP 38
28220: IFFALSE 28228
28222: PUSH
28223: LD_EXP 55
28227: AND
28228: IFFALSE 28339
28230: GO 28232
28232: DISABLE
28233: LD_INT 0
28235: PPUSH
28236: PPUSH
28237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28238: LD_ADDR_VAR 0 3
28242: PUSH
28243: LD_INT 22
28245: PUSH
28246: LD_OWVAR 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 25
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PPUSH
28269: CALL_OW 69
28273: ST_TO_ADDR
// if not tmp then
28274: LD_VAR 0 3
28278: NOT
28279: IFFALSE 28283
// exit ;
28281: GO 28339
// un := tmp [ rand ( 1 , tmp ) ] ;
28283: LD_ADDR_VAR 0 2
28287: PUSH
28288: LD_VAR 0 3
28292: PUSH
28293: LD_INT 1
28295: PPUSH
28296: LD_VAR 0 3
28300: PPUSH
28301: CALL_OW 12
28305: ARRAY
28306: ST_TO_ADDR
// if Crawls ( un ) then
28307: LD_VAR 0 2
28311: PPUSH
28312: CALL_OW 318
28316: IFFALSE 28327
// ComWalk ( un ) ;
28318: LD_VAR 0 2
28322: PPUSH
28323: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28327: LD_VAR 0 2
28331: PPUSH
28332: LD_INT 5
28334: PPUSH
28335: CALL_OW 336
// end ;
28339: PPOPN 3
28341: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28342: LD_EXP 38
28346: IFFALSE 28354
28348: PUSH
28349: LD_EXP 56
28353: AND
28354: IFFALSE 28366
28356: PUSH
28357: LD_OWVAR 67
28361: PUSH
28362: LD_INT 4
28364: LESS
28365: AND
28366: IFFALSE 28385
28368: GO 28370
28370: DISABLE
// begin Difficulty := Difficulty + 1 ;
28371: LD_ADDR_OWVAR 67
28375: PUSH
28376: LD_OWVAR 67
28380: PUSH
28381: LD_INT 1
28383: PLUS
28384: ST_TO_ADDR
// end ;
28385: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28386: LD_EXP 38
28390: IFFALSE 28398
28392: PUSH
28393: LD_EXP 57
28397: AND
28398: IFFALSE 28501
28400: GO 28402
28402: DISABLE
28403: LD_INT 0
28405: PPUSH
// begin for i := 1 to 5 do
28406: LD_ADDR_VAR 0 1
28410: PUSH
28411: DOUBLE
28412: LD_INT 1
28414: DEC
28415: ST_TO_ADDR
28416: LD_INT 5
28418: PUSH
28419: FOR_TO
28420: IFFALSE 28499
// begin uc_nation := nation_nature ;
28422: LD_ADDR_OWVAR 21
28426: PUSH
28427: LD_INT 0
28429: ST_TO_ADDR
// uc_side := 0 ;
28430: LD_ADDR_OWVAR 20
28434: PUSH
28435: LD_INT 0
28437: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28438: LD_ADDR_OWVAR 29
28442: PUSH
28443: LD_INT 12
28445: PUSH
28446: LD_INT 12
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: ST_TO_ADDR
// hc_agressivity := 20 ;
28453: LD_ADDR_OWVAR 35
28457: PUSH
28458: LD_INT 20
28460: ST_TO_ADDR
// hc_class := class_tiger ;
28461: LD_ADDR_OWVAR 28
28465: PUSH
28466: LD_INT 14
28468: ST_TO_ADDR
// hc_gallery :=  ;
28469: LD_ADDR_OWVAR 33
28473: PUSH
28474: LD_STRING 
28476: ST_TO_ADDR
// hc_name :=  ;
28477: LD_ADDR_OWVAR 26
28481: PUSH
28482: LD_STRING 
28484: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28485: CALL_OW 44
28489: PPUSH
28490: LD_INT 0
28492: PPUSH
28493: CALL_OW 51
// end ;
28497: GO 28419
28499: POP
28500: POP
// end ;
28501: PPOPN 1
28503: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28504: LD_EXP 38
28508: IFFALSE 28516
28510: PUSH
28511: LD_EXP 58
28515: AND
28516: IFFALSE 28525
28518: GO 28520
28520: DISABLE
// StreamSibBomb ;
28521: CALL 28526 0 0
28525: END
// export function StreamSibBomb ; var i , x , y ; begin
28526: LD_INT 0
28528: PPUSH
28529: PPUSH
28530: PPUSH
28531: PPUSH
// result := false ;
28532: LD_ADDR_VAR 0 1
28536: PUSH
28537: LD_INT 0
28539: ST_TO_ADDR
// for i := 1 to 16 do
28540: LD_ADDR_VAR 0 2
28544: PUSH
28545: DOUBLE
28546: LD_INT 1
28548: DEC
28549: ST_TO_ADDR
28550: LD_INT 16
28552: PUSH
28553: FOR_TO
28554: IFFALSE 28753
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28556: LD_ADDR_VAR 0 3
28560: PUSH
28561: LD_INT 10
28563: PUSH
28564: LD_INT 20
28566: PUSH
28567: LD_INT 30
28569: PUSH
28570: LD_INT 40
28572: PUSH
28573: LD_INT 50
28575: PUSH
28576: LD_INT 60
28578: PUSH
28579: LD_INT 70
28581: PUSH
28582: LD_INT 80
28584: PUSH
28585: LD_INT 90
28587: PUSH
28588: LD_INT 100
28590: PUSH
28591: LD_INT 110
28593: PUSH
28594: LD_INT 120
28596: PUSH
28597: LD_INT 130
28599: PUSH
28600: LD_INT 140
28602: PUSH
28603: LD_INT 150
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: PPUSH
28626: LD_INT 15
28628: PPUSH
28629: CALL_OW 12
28633: ARRAY
28634: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28635: LD_ADDR_VAR 0 4
28639: PUSH
28640: LD_INT 10
28642: PUSH
28643: LD_INT 20
28645: PUSH
28646: LD_INT 30
28648: PUSH
28649: LD_INT 40
28651: PUSH
28652: LD_INT 50
28654: PUSH
28655: LD_INT 60
28657: PUSH
28658: LD_INT 70
28660: PUSH
28661: LD_INT 80
28663: PUSH
28664: LD_INT 90
28666: PUSH
28667: LD_INT 100
28669: PUSH
28670: LD_INT 110
28672: PUSH
28673: LD_INT 120
28675: PUSH
28676: LD_INT 130
28678: PUSH
28679: LD_INT 140
28681: PUSH
28682: LD_INT 150
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: PPUSH
28705: LD_INT 15
28707: PPUSH
28708: CALL_OW 12
28712: ARRAY
28713: ST_TO_ADDR
// if ValidHex ( x , y ) then
28714: LD_VAR 0 3
28718: PPUSH
28719: LD_VAR 0 4
28723: PPUSH
28724: CALL_OW 488
28728: IFFALSE 28751
// begin result := [ x , y ] ;
28730: LD_ADDR_VAR 0 1
28734: PUSH
28735: LD_VAR 0 3
28739: PUSH
28740: LD_VAR 0 4
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: ST_TO_ADDR
// break ;
28749: GO 28753
// end ; end ;
28751: GO 28553
28753: POP
28754: POP
// if result then
28755: LD_VAR 0 1
28759: IFFALSE 28819
// begin ToLua ( playSibBomb() ) ;
28761: LD_STRING playSibBomb()
28763: PPUSH
28764: CALL_OW 559
// wait ( 0 0$14 ) ;
28768: LD_INT 490
28770: PPUSH
28771: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28775: LD_VAR 0 1
28779: PUSH
28780: LD_INT 1
28782: ARRAY
28783: PPUSH
28784: LD_VAR 0 1
28788: PUSH
28789: LD_INT 2
28791: ARRAY
28792: PPUSH
28793: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28797: LD_VAR 0 1
28801: PUSH
28802: LD_INT 1
28804: ARRAY
28805: PPUSH
28806: LD_VAR 0 1
28810: PUSH
28811: LD_INT 2
28813: ARRAY
28814: PPUSH
28815: CALL_OW 429
// end ; end ;
28819: LD_VAR 0 1
28823: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28824: LD_EXP 38
28828: IFFALSE 28836
28830: PUSH
28831: LD_EXP 60
28835: AND
28836: IFFALSE 28848
28838: GO 28840
28840: DISABLE
// YouLost (  ) ;
28841: LD_STRING 
28843: PPUSH
28844: CALL_OW 104
28848: END
// every 0 0$1 trigger StreamModeActive and sFog do
28849: LD_EXP 38
28853: IFFALSE 28861
28855: PUSH
28856: LD_EXP 59
28860: AND
28861: IFFALSE 28875
28863: GO 28865
28865: DISABLE
// FogOff ( your_side ) ;
28866: LD_OWVAR 2
28870: PPUSH
28871: CALL_OW 344
28875: END
// every 0 0$1 trigger StreamModeActive and sSun do
28876: LD_EXP 38
28880: IFFALSE 28888
28882: PUSH
28883: LD_EXP 61
28887: AND
28888: IFFALSE 28916
28890: GO 28892
28892: DISABLE
// begin solar_recharge_percent := 0 ;
28893: LD_ADDR_OWVAR 79
28897: PUSH
28898: LD_INT 0
28900: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28901: LD_INT 10500
28903: PPUSH
28904: CALL_OW 67
// solar_recharge_percent := 100 ;
28908: LD_ADDR_OWVAR 79
28912: PUSH
28913: LD_INT 100
28915: ST_TO_ADDR
// end ;
28916: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28917: LD_EXP 38
28921: IFFALSE 28929
28923: PUSH
28924: LD_EXP 62
28928: AND
28929: IFFALSE 29168
28931: GO 28933
28933: DISABLE
28934: LD_INT 0
28936: PPUSH
28937: PPUSH
28938: PPUSH
// begin tmp := [ ] ;
28939: LD_ADDR_VAR 0 3
28943: PUSH
28944: EMPTY
28945: ST_TO_ADDR
// for i := 1 to 6 do
28946: LD_ADDR_VAR 0 1
28950: PUSH
28951: DOUBLE
28952: LD_INT 1
28954: DEC
28955: ST_TO_ADDR
28956: LD_INT 6
28958: PUSH
28959: FOR_TO
28960: IFFALSE 29065
// begin uc_nation := nation_nature ;
28962: LD_ADDR_OWVAR 21
28966: PUSH
28967: LD_INT 0
28969: ST_TO_ADDR
// uc_side := 0 ;
28970: LD_ADDR_OWVAR 20
28974: PUSH
28975: LD_INT 0
28977: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28978: LD_ADDR_OWVAR 29
28982: PUSH
28983: LD_INT 12
28985: PUSH
28986: LD_INT 12
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: ST_TO_ADDR
// hc_agressivity := 20 ;
28993: LD_ADDR_OWVAR 35
28997: PUSH
28998: LD_INT 20
29000: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29001: LD_ADDR_OWVAR 28
29005: PUSH
29006: LD_INT 17
29008: ST_TO_ADDR
// hc_gallery :=  ;
29009: LD_ADDR_OWVAR 33
29013: PUSH
29014: LD_STRING 
29016: ST_TO_ADDR
// hc_name :=  ;
29017: LD_ADDR_OWVAR 26
29021: PUSH
29022: LD_STRING 
29024: ST_TO_ADDR
// un := CreateHuman ;
29025: LD_ADDR_VAR 0 2
29029: PUSH
29030: CALL_OW 44
29034: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29035: LD_VAR 0 2
29039: PPUSH
29040: LD_INT 1
29042: PPUSH
29043: CALL_OW 51
// tmp := tmp ^ un ;
29047: LD_ADDR_VAR 0 3
29051: PUSH
29052: LD_VAR 0 3
29056: PUSH
29057: LD_VAR 0 2
29061: ADD
29062: ST_TO_ADDR
// end ;
29063: GO 28959
29065: POP
29066: POP
// repeat wait ( 0 0$1 ) ;
29067: LD_INT 35
29069: PPUSH
29070: CALL_OW 67
// for un in tmp do
29074: LD_ADDR_VAR 0 2
29078: PUSH
29079: LD_VAR 0 3
29083: PUSH
29084: FOR_IN
29085: IFFALSE 29159
// begin if IsDead ( un ) then
29087: LD_VAR 0 2
29091: PPUSH
29092: CALL_OW 301
29096: IFFALSE 29116
// begin tmp := tmp diff un ;
29098: LD_ADDR_VAR 0 3
29102: PUSH
29103: LD_VAR 0 3
29107: PUSH
29108: LD_VAR 0 2
29112: DIFF
29113: ST_TO_ADDR
// continue ;
29114: GO 29084
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29116: LD_VAR 0 2
29120: PPUSH
29121: LD_INT 3
29123: PUSH
29124: LD_INT 22
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PPUSH
29138: CALL_OW 69
29142: PPUSH
29143: LD_VAR 0 2
29147: PPUSH
29148: CALL_OW 74
29152: PPUSH
29153: CALL_OW 115
// end ;
29157: GO 29084
29159: POP
29160: POP
// until not tmp ;
29161: LD_VAR 0 3
29165: NOT
29166: IFFALSE 29067
// end ;
29168: PPOPN 3
29170: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29171: LD_EXP 38
29175: IFFALSE 29183
29177: PUSH
29178: LD_EXP 63
29182: AND
29183: IFFALSE 29237
29185: GO 29187
29187: DISABLE
// begin ToLua ( displayTroll(); ) ;
29188: LD_STRING displayTroll();
29190: PPUSH
29191: CALL_OW 559
// wait ( 3 3$00 ) ;
29195: LD_INT 6300
29197: PPUSH
29198: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29202: LD_STRING hideTroll();
29204: PPUSH
29205: CALL_OW 559
// wait ( 1 1$00 ) ;
29209: LD_INT 2100
29211: PPUSH
29212: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29216: LD_STRING displayTroll();
29218: PPUSH
29219: CALL_OW 559
// wait ( 1 1$00 ) ;
29223: LD_INT 2100
29225: PPUSH
29226: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29230: LD_STRING hideTroll();
29232: PPUSH
29233: CALL_OW 559
// end ;
29237: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29238: LD_EXP 38
29242: IFFALSE 29250
29244: PUSH
29245: LD_EXP 64
29249: AND
29250: IFFALSE 29313
29252: GO 29254
29254: DISABLE
29255: LD_INT 0
29257: PPUSH
// begin p := 0 ;
29258: LD_ADDR_VAR 0 1
29262: PUSH
29263: LD_INT 0
29265: ST_TO_ADDR
// repeat game_speed := 1 ;
29266: LD_ADDR_OWVAR 65
29270: PUSH
29271: LD_INT 1
29273: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29274: LD_INT 35
29276: PPUSH
29277: CALL_OW 67
// p := p + 1 ;
29281: LD_ADDR_VAR 0 1
29285: PUSH
29286: LD_VAR 0 1
29290: PUSH
29291: LD_INT 1
29293: PLUS
29294: ST_TO_ADDR
// until p >= 60 ;
29295: LD_VAR 0 1
29299: PUSH
29300: LD_INT 60
29302: GREATEREQUAL
29303: IFFALSE 29266
// game_speed := 4 ;
29305: LD_ADDR_OWVAR 65
29309: PUSH
29310: LD_INT 4
29312: ST_TO_ADDR
// end ;
29313: PPOPN 1
29315: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29316: LD_EXP 38
29320: IFFALSE 29328
29322: PUSH
29323: LD_EXP 65
29327: AND
29328: IFFALSE 29474
29330: GO 29332
29332: DISABLE
29333: LD_INT 0
29335: PPUSH
29336: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29337: LD_ADDR_VAR 0 1
29341: PUSH
29342: LD_INT 22
29344: PUSH
29345: LD_OWVAR 2
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: LD_INT 30
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 30
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PPUSH
29386: CALL_OW 69
29390: ST_TO_ADDR
// if not depot then
29391: LD_VAR 0 1
29395: NOT
29396: IFFALSE 29400
// exit ;
29398: GO 29474
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_VAR 0 1
29409: PUSH
29410: LD_INT 1
29412: PPUSH
29413: LD_VAR 0 1
29417: PPUSH
29418: CALL_OW 12
29422: ARRAY
29423: PPUSH
29424: CALL_OW 274
29428: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29429: LD_VAR 0 2
29433: PPUSH
29434: LD_INT 1
29436: PPUSH
29437: LD_INT 0
29439: PPUSH
29440: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29444: LD_VAR 0 2
29448: PPUSH
29449: LD_INT 2
29451: PPUSH
29452: LD_INT 0
29454: PPUSH
29455: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29459: LD_VAR 0 2
29463: PPUSH
29464: LD_INT 3
29466: PPUSH
29467: LD_INT 0
29469: PPUSH
29470: CALL_OW 277
// end ;
29474: PPOPN 2
29476: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29477: LD_EXP 38
29481: IFFALSE 29489
29483: PUSH
29484: LD_EXP 66
29488: AND
29489: IFFALSE 29586
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29497: LD_ADDR_VAR 0 1
29501: PUSH
29502: LD_INT 22
29504: PUSH
29505: LD_OWVAR 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 21
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 3
29526: PUSH
29527: LD_INT 23
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: PPUSH
29546: CALL_OW 69
29550: ST_TO_ADDR
// if not tmp then
29551: LD_VAR 0 1
29555: NOT
29556: IFFALSE 29560
// exit ;
29558: GO 29586
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29560: LD_VAR 0 1
29564: PUSH
29565: LD_INT 1
29567: PPUSH
29568: LD_VAR 0 1
29572: PPUSH
29573: CALL_OW 12
29577: ARRAY
29578: PPUSH
29579: LD_INT 200
29581: PPUSH
29582: CALL_OW 234
// end ;
29586: PPOPN 1
29588: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29589: LD_EXP 38
29593: IFFALSE 29601
29595: PUSH
29596: LD_EXP 67
29600: AND
29601: IFFALSE 29680
29603: GO 29605
29605: DISABLE
29606: LD_INT 0
29608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29609: LD_ADDR_VAR 0 1
29613: PUSH
29614: LD_INT 22
29616: PUSH
29617: LD_OWVAR 2
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 21
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PPUSH
29640: CALL_OW 69
29644: ST_TO_ADDR
// if not tmp then
29645: LD_VAR 0 1
29649: NOT
29650: IFFALSE 29654
// exit ;
29652: GO 29680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29654: LD_VAR 0 1
29658: PUSH
29659: LD_INT 1
29661: PPUSH
29662: LD_VAR 0 1
29666: PPUSH
29667: CALL_OW 12
29671: ARRAY
29672: PPUSH
29673: LD_INT 60
29675: PPUSH
29676: CALL_OW 234
// end ;
29680: PPOPN 1
29682: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29683: LD_EXP 38
29687: IFFALSE 29695
29689: PUSH
29690: LD_EXP 68
29694: AND
29695: IFFALSE 29794
29697: GO 29699
29699: DISABLE
29700: LD_INT 0
29702: PPUSH
29703: PPUSH
// begin enable ;
29704: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29705: LD_ADDR_VAR 0 1
29709: PUSH
29710: LD_INT 22
29712: PUSH
29713: LD_OWVAR 2
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 61
29724: PUSH
29725: EMPTY
29726: LIST
29727: PUSH
29728: LD_INT 33
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: PPUSH
29743: CALL_OW 69
29747: ST_TO_ADDR
// if not tmp then
29748: LD_VAR 0 1
29752: NOT
29753: IFFALSE 29757
// exit ;
29755: GO 29794
// for i in tmp do
29757: LD_ADDR_VAR 0 2
29761: PUSH
29762: LD_VAR 0 1
29766: PUSH
29767: FOR_IN
29768: IFFALSE 29792
// if IsControledBy ( i ) then
29770: LD_VAR 0 2
29774: PPUSH
29775: CALL_OW 312
29779: IFFALSE 29790
// ComUnlink ( i ) ;
29781: LD_VAR 0 2
29785: PPUSH
29786: CALL_OW 136
29790: GO 29767
29792: POP
29793: POP
// end ;
29794: PPOPN 2
29796: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29797: LD_EXP 38
29801: IFFALSE 29809
29803: PUSH
29804: LD_EXP 69
29808: AND
29809: IFFALSE 29949
29811: GO 29813
29813: DISABLE
29814: LD_INT 0
29816: PPUSH
29817: PPUSH
// begin ToLua ( displayPowell(); ) ;
29818: LD_STRING displayPowell();
29820: PPUSH
29821: CALL_OW 559
// uc_side := 0 ;
29825: LD_ADDR_OWVAR 20
29829: PUSH
29830: LD_INT 0
29832: ST_TO_ADDR
// uc_nation := 2 ;
29833: LD_ADDR_OWVAR 21
29837: PUSH
29838: LD_INT 2
29840: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29841: LD_ADDR_OWVAR 37
29845: PUSH
29846: LD_INT 14
29848: ST_TO_ADDR
// vc_engine := engine_siberite ;
29849: LD_ADDR_OWVAR 39
29853: PUSH
29854: LD_INT 3
29856: ST_TO_ADDR
// vc_control := control_apeman ;
29857: LD_ADDR_OWVAR 38
29861: PUSH
29862: LD_INT 5
29864: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29865: LD_ADDR_OWVAR 40
29869: PUSH
29870: LD_INT 29
29872: ST_TO_ADDR
// un := CreateVehicle ;
29873: LD_ADDR_VAR 0 2
29877: PUSH
29878: CALL_OW 45
29882: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29883: LD_VAR 0 2
29887: PPUSH
29888: LD_INT 1
29890: PPUSH
29891: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29895: LD_INT 35
29897: PPUSH
29898: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29902: LD_VAR 0 2
29906: PPUSH
29907: LD_INT 22
29909: PUSH
29910: LD_OWVAR 2
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PPUSH
29919: CALL_OW 69
29923: PPUSH
29924: LD_VAR 0 2
29928: PPUSH
29929: CALL_OW 74
29933: PPUSH
29934: CALL_OW 115
// until IsDead ( un ) ;
29938: LD_VAR 0 2
29942: PPUSH
29943: CALL_OW 301
29947: IFFALSE 29895
// end ;
29949: PPOPN 2
29951: END
// every 0 0$1 trigger StreamModeActive and sStu do
29952: LD_EXP 38
29956: IFFALSE 29964
29958: PUSH
29959: LD_EXP 77
29963: AND
29964: IFFALSE 29980
29966: GO 29968
29968: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29969: LD_STRING displayStucuk();
29971: PPUSH
29972: CALL_OW 559
// ResetFog ;
29976: CALL_OW 335
// end ;
29980: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29981: LD_EXP 38
29985: IFFALSE 29993
29987: PUSH
29988: LD_EXP 70
29992: AND
29993: IFFALSE 30134
29995: GO 29997
29997: DISABLE
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30002: LD_ADDR_VAR 0 2
30006: PUSH
30007: LD_INT 22
30009: PUSH
30010: LD_OWVAR 2
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 21
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PPUSH
30033: CALL_OW 69
30037: ST_TO_ADDR
// if not tmp then
30038: LD_VAR 0 2
30042: NOT
30043: IFFALSE 30047
// exit ;
30045: GO 30134
// un := tmp [ rand ( 1 , tmp ) ] ;
30047: LD_ADDR_VAR 0 1
30051: PUSH
30052: LD_VAR 0 2
30056: PUSH
30057: LD_INT 1
30059: PPUSH
30060: LD_VAR 0 2
30064: PPUSH
30065: CALL_OW 12
30069: ARRAY
30070: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30071: LD_VAR 0 1
30075: PPUSH
30076: LD_INT 0
30078: PPUSH
30079: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30083: LD_VAR 0 1
30087: PPUSH
30088: LD_OWVAR 3
30092: PUSH
30093: LD_VAR 0 1
30097: DIFF
30098: PPUSH
30099: LD_VAR 0 1
30103: PPUSH
30104: CALL_OW 74
30108: PPUSH
30109: CALL_OW 115
// wait ( 0 0$20 ) ;
30113: LD_INT 700
30115: PPUSH
30116: CALL_OW 67
// SetSide ( un , your_side ) ;
30120: LD_VAR 0 1
30124: PPUSH
30125: LD_OWVAR 2
30129: PPUSH
30130: CALL_OW 235
// end ;
30134: PPOPN 2
30136: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30137: LD_EXP 38
30141: IFFALSE 30149
30143: PUSH
30144: LD_EXP 71
30148: AND
30149: IFFALSE 30255
30151: GO 30153
30153: DISABLE
30154: LD_INT 0
30156: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30157: LD_ADDR_VAR 0 1
30161: PUSH
30162: LD_INT 22
30164: PUSH
30165: LD_OWVAR 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: LD_INT 30
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 30
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: LIST
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PPUSH
30206: CALL_OW 69
30210: ST_TO_ADDR
// if not depot then
30211: LD_VAR 0 1
30215: NOT
30216: IFFALSE 30220
// exit ;
30218: GO 30255
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30220: LD_VAR 0 1
30224: PUSH
30225: LD_INT 1
30227: ARRAY
30228: PPUSH
30229: CALL_OW 250
30233: PPUSH
30234: LD_VAR 0 1
30238: PUSH
30239: LD_INT 1
30241: ARRAY
30242: PPUSH
30243: CALL_OW 251
30247: PPUSH
30248: LD_INT 70
30250: PPUSH
30251: CALL_OW 495
// end ;
30255: PPOPN 1
30257: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30258: LD_EXP 38
30262: IFFALSE 30270
30264: PUSH
30265: LD_EXP 72
30269: AND
30270: IFFALSE 30481
30272: GO 30274
30274: DISABLE
30275: LD_INT 0
30277: PPUSH
30278: PPUSH
30279: PPUSH
30280: PPUSH
30281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30282: LD_ADDR_VAR 0 5
30286: PUSH
30287: LD_INT 22
30289: PUSH
30290: LD_OWVAR 2
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 21
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PPUSH
30313: CALL_OW 69
30317: ST_TO_ADDR
// if not tmp then
30318: LD_VAR 0 5
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30481
// for i in tmp do
30327: LD_ADDR_VAR 0 1
30331: PUSH
30332: LD_VAR 0 5
30336: PUSH
30337: FOR_IN
30338: IFFALSE 30479
// begin d := rand ( 0 , 5 ) ;
30340: LD_ADDR_VAR 0 4
30344: PUSH
30345: LD_INT 0
30347: PPUSH
30348: LD_INT 5
30350: PPUSH
30351: CALL_OW 12
30355: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30356: LD_ADDR_VAR 0 2
30360: PUSH
30361: LD_VAR 0 1
30365: PPUSH
30366: CALL_OW 250
30370: PPUSH
30371: LD_VAR 0 4
30375: PPUSH
30376: LD_INT 3
30378: PPUSH
30379: LD_INT 12
30381: PPUSH
30382: CALL_OW 12
30386: PPUSH
30387: CALL_OW 272
30391: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30392: LD_ADDR_VAR 0 3
30396: PUSH
30397: LD_VAR 0 1
30401: PPUSH
30402: CALL_OW 251
30406: PPUSH
30407: LD_VAR 0 4
30411: PPUSH
30412: LD_INT 3
30414: PPUSH
30415: LD_INT 12
30417: PPUSH
30418: CALL_OW 12
30422: PPUSH
30423: CALL_OW 273
30427: ST_TO_ADDR
// if ValidHex ( x , y ) then
30428: LD_VAR 0 2
30432: PPUSH
30433: LD_VAR 0 3
30437: PPUSH
30438: CALL_OW 488
30442: IFFALSE 30477
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30444: LD_VAR 0 1
30448: PPUSH
30449: LD_VAR 0 2
30453: PPUSH
30454: LD_VAR 0 3
30458: PPUSH
30459: LD_INT 3
30461: PPUSH
30462: LD_INT 6
30464: PPUSH
30465: CALL_OW 12
30469: PPUSH
30470: LD_INT 1
30472: PPUSH
30473: CALL_OW 483
// end ;
30477: GO 30337
30479: POP
30480: POP
// end ;
30481: PPOPN 5
30483: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30484: LD_EXP 38
30488: IFFALSE 30496
30490: PUSH
30491: LD_EXP 73
30495: AND
30496: IFFALSE 30590
30498: GO 30500
30500: DISABLE
30501: LD_INT 0
30503: PPUSH
30504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30505: LD_ADDR_VAR 0 2
30509: PUSH
30510: LD_INT 22
30512: PUSH
30513: LD_OWVAR 2
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 32
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 21
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: LIST
30546: PPUSH
30547: CALL_OW 69
30551: ST_TO_ADDR
// if not tmp then
30552: LD_VAR 0 2
30556: NOT
30557: IFFALSE 30561
// exit ;
30559: GO 30590
// for i in tmp do
30561: LD_ADDR_VAR 0 1
30565: PUSH
30566: LD_VAR 0 2
30570: PUSH
30571: FOR_IN
30572: IFFALSE 30588
// SetFuel ( i , 0 ) ;
30574: LD_VAR 0 1
30578: PPUSH
30579: LD_INT 0
30581: PPUSH
30582: CALL_OW 240
30586: GO 30571
30588: POP
30589: POP
// end ;
30590: PPOPN 2
30592: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30593: LD_EXP 38
30597: IFFALSE 30605
30599: PUSH
30600: LD_EXP 74
30604: AND
30605: IFFALSE 30671
30607: GO 30609
30609: DISABLE
30610: LD_INT 0
30612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30613: LD_ADDR_VAR 0 1
30617: PUSH
30618: LD_INT 22
30620: PUSH
30621: LD_OWVAR 2
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 30
30632: PUSH
30633: LD_INT 29
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PPUSH
30644: CALL_OW 69
30648: ST_TO_ADDR
// if not tmp then
30649: LD_VAR 0 1
30653: NOT
30654: IFFALSE 30658
// exit ;
30656: GO 30671
// DestroyUnit ( tmp [ 1 ] ) ;
30658: LD_VAR 0 1
30662: PUSH
30663: LD_INT 1
30665: ARRAY
30666: PPUSH
30667: CALL_OW 65
// end ;
30671: PPOPN 1
30673: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30674: LD_EXP 38
30678: IFFALSE 30686
30680: PUSH
30681: LD_EXP 76
30685: AND
30686: IFFALSE 30815
30688: GO 30690
30690: DISABLE
30691: LD_INT 0
30693: PPUSH
// begin uc_side := 0 ;
30694: LD_ADDR_OWVAR 20
30698: PUSH
30699: LD_INT 0
30701: ST_TO_ADDR
// uc_nation := nation_arabian ;
30702: LD_ADDR_OWVAR 21
30706: PUSH
30707: LD_INT 2
30709: ST_TO_ADDR
// hc_gallery :=  ;
30710: LD_ADDR_OWVAR 33
30714: PUSH
30715: LD_STRING 
30717: ST_TO_ADDR
// hc_name :=  ;
30718: LD_ADDR_OWVAR 26
30722: PUSH
30723: LD_STRING 
30725: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30726: LD_INT 1
30728: PPUSH
30729: LD_INT 11
30731: PPUSH
30732: LD_INT 10
30734: PPUSH
30735: CALL_OW 380
// un := CreateHuman ;
30739: LD_ADDR_VAR 0 1
30743: PUSH
30744: CALL_OW 44
30748: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30749: LD_VAR 0 1
30753: PPUSH
30754: LD_INT 1
30756: PPUSH
30757: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30761: LD_INT 35
30763: PPUSH
30764: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30768: LD_VAR 0 1
30772: PPUSH
30773: LD_INT 22
30775: PUSH
30776: LD_OWVAR 2
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PPUSH
30785: CALL_OW 69
30789: PPUSH
30790: LD_VAR 0 1
30794: PPUSH
30795: CALL_OW 74
30799: PPUSH
30800: CALL_OW 115
// until IsDead ( un ) ;
30804: LD_VAR 0 1
30808: PPUSH
30809: CALL_OW 301
30813: IFFALSE 30761
// end ;
30815: PPOPN 1
30817: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30818: LD_EXP 38
30822: IFFALSE 30830
30824: PUSH
30825: LD_EXP 78
30829: AND
30830: IFFALSE 30842
30832: GO 30834
30834: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30835: LD_STRING earthquake(getX(game), 0, 32)
30837: PPUSH
30838: CALL_OW 559
30842: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30843: LD_EXP 38
30847: IFFALSE 30855
30849: PUSH
30850: LD_EXP 79
30854: AND
30855: IFFALSE 30946
30857: GO 30859
30859: DISABLE
30860: LD_INT 0
30862: PPUSH
// begin enable ;
30863: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30864: LD_ADDR_VAR 0 1
30868: PUSH
30869: LD_INT 22
30871: PUSH
30872: LD_OWVAR 2
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 21
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 33
30893: PUSH
30894: LD_INT 3
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: PPUSH
30906: CALL_OW 69
30910: ST_TO_ADDR
// if not tmp then
30911: LD_VAR 0 1
30915: NOT
30916: IFFALSE 30920
// exit ;
30918: GO 30946
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30920: LD_VAR 0 1
30924: PUSH
30925: LD_INT 1
30927: PPUSH
30928: LD_VAR 0 1
30932: PPUSH
30933: CALL_OW 12
30937: ARRAY
30938: PPUSH
30939: LD_INT 1
30941: PPUSH
30942: CALL_OW 234
// end ;
30946: PPOPN 1
30948: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30949: LD_EXP 38
30953: IFFALSE 30961
30955: PUSH
30956: LD_EXP 80
30960: AND
30961: IFFALSE 31102
30963: GO 30965
30965: DISABLE
30966: LD_INT 0
30968: PPUSH
30969: PPUSH
30970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30971: LD_ADDR_VAR 0 3
30975: PUSH
30976: LD_INT 22
30978: PUSH
30979: LD_OWVAR 2
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 25
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PPUSH
31002: CALL_OW 69
31006: ST_TO_ADDR
// if not tmp then
31007: LD_VAR 0 3
31011: NOT
31012: IFFALSE 31016
// exit ;
31014: GO 31102
// un := tmp [ rand ( 1 , tmp ) ] ;
31016: LD_ADDR_VAR 0 2
31020: PUSH
31021: LD_VAR 0 3
31025: PUSH
31026: LD_INT 1
31028: PPUSH
31029: LD_VAR 0 3
31033: PPUSH
31034: CALL_OW 12
31038: ARRAY
31039: ST_TO_ADDR
// if Crawls ( un ) then
31040: LD_VAR 0 2
31044: PPUSH
31045: CALL_OW 318
31049: IFFALSE 31060
// ComWalk ( un ) ;
31051: LD_VAR 0 2
31055: PPUSH
31056: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31060: LD_VAR 0 2
31064: PPUSH
31065: LD_INT 9
31067: PPUSH
31068: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31072: LD_INT 28
31074: PPUSH
31075: LD_OWVAR 2
31079: PPUSH
31080: LD_INT 2
31082: PPUSH
31083: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31087: LD_INT 29
31089: PPUSH
31090: LD_OWVAR 2
31094: PPUSH
31095: LD_INT 2
31097: PPUSH
31098: CALL_OW 322
// end ;
31102: PPOPN 3
31104: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31105: LD_EXP 38
31109: IFFALSE 31117
31111: PUSH
31112: LD_EXP 81
31116: AND
31117: IFFALSE 31228
31119: GO 31121
31121: DISABLE
31122: LD_INT 0
31124: PPUSH
31125: PPUSH
31126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31127: LD_ADDR_VAR 0 3
31131: PUSH
31132: LD_INT 22
31134: PUSH
31135: LD_OWVAR 2
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 25
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PPUSH
31158: CALL_OW 69
31162: ST_TO_ADDR
// if not tmp then
31163: LD_VAR 0 3
31167: NOT
31168: IFFALSE 31172
// exit ;
31170: GO 31228
// un := tmp [ rand ( 1 , tmp ) ] ;
31172: LD_ADDR_VAR 0 2
31176: PUSH
31177: LD_VAR 0 3
31181: PUSH
31182: LD_INT 1
31184: PPUSH
31185: LD_VAR 0 3
31189: PPUSH
31190: CALL_OW 12
31194: ARRAY
31195: ST_TO_ADDR
// if Crawls ( un ) then
31196: LD_VAR 0 2
31200: PPUSH
31201: CALL_OW 318
31205: IFFALSE 31216
// ComWalk ( un ) ;
31207: LD_VAR 0 2
31211: PPUSH
31212: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31216: LD_VAR 0 2
31220: PPUSH
31221: LD_INT 8
31223: PPUSH
31224: CALL_OW 336
// end ;
31228: PPOPN 3
31230: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31231: LD_EXP 38
31235: IFFALSE 31243
31237: PUSH
31238: LD_EXP 82
31242: AND
31243: IFFALSE 31387
31245: GO 31247
31247: DISABLE
31248: LD_INT 0
31250: PPUSH
31251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31252: LD_ADDR_VAR 0 2
31256: PUSH
31257: LD_INT 22
31259: PUSH
31260: LD_OWVAR 2
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 21
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: LD_INT 34
31284: PUSH
31285: LD_INT 12
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 34
31294: PUSH
31295: LD_INT 51
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 34
31304: PUSH
31305: LD_INT 32
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: PPUSH
31323: CALL_OW 69
31327: ST_TO_ADDR
// if not tmp then
31328: LD_VAR 0 2
31332: NOT
31333: IFFALSE 31337
// exit ;
31335: GO 31387
// for i in tmp do
31337: LD_ADDR_VAR 0 1
31341: PUSH
31342: LD_VAR 0 2
31346: PUSH
31347: FOR_IN
31348: IFFALSE 31385
// if GetCargo ( i , mat_artifact ) = 0 then
31350: LD_VAR 0 1
31354: PPUSH
31355: LD_INT 4
31357: PPUSH
31358: CALL_OW 289
31362: PUSH
31363: LD_INT 0
31365: EQUAL
31366: IFFALSE 31383
// SetCargo ( i , mat_siberit , 100 ) ;
31368: LD_VAR 0 1
31372: PPUSH
31373: LD_INT 3
31375: PPUSH
31376: LD_INT 100
31378: PPUSH
31379: CALL_OW 290
31383: GO 31347
31385: POP
31386: POP
// end ;
31387: PPOPN 2
31389: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31390: LD_EXP 38
31394: IFFALSE 31402
31396: PUSH
31397: LD_EXP 83
31401: AND
31402: IFFALSE 31585
31404: GO 31406
31406: DISABLE
31407: LD_INT 0
31409: PPUSH
31410: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31411: LD_ADDR_VAR 0 2
31415: PUSH
31416: LD_INT 22
31418: PUSH
31419: LD_OWVAR 2
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PPUSH
31428: CALL_OW 69
31432: ST_TO_ADDR
// if not tmp then
31433: LD_VAR 0 2
31437: NOT
31438: IFFALSE 31442
// exit ;
31440: GO 31585
// for i := 1 to 2 do
31442: LD_ADDR_VAR 0 1
31446: PUSH
31447: DOUBLE
31448: LD_INT 1
31450: DEC
31451: ST_TO_ADDR
31452: LD_INT 2
31454: PUSH
31455: FOR_TO
31456: IFFALSE 31583
// begin uc_side := your_side ;
31458: LD_ADDR_OWVAR 20
31462: PUSH
31463: LD_OWVAR 2
31467: ST_TO_ADDR
// uc_nation := nation_american ;
31468: LD_ADDR_OWVAR 21
31472: PUSH
31473: LD_INT 1
31475: ST_TO_ADDR
// vc_chassis := us_morphling ;
31476: LD_ADDR_OWVAR 37
31480: PUSH
31481: LD_INT 5
31483: ST_TO_ADDR
// vc_engine := engine_siberite ;
31484: LD_ADDR_OWVAR 39
31488: PUSH
31489: LD_INT 3
31491: ST_TO_ADDR
// vc_control := control_computer ;
31492: LD_ADDR_OWVAR 38
31496: PUSH
31497: LD_INT 3
31499: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31500: LD_ADDR_OWVAR 40
31504: PUSH
31505: LD_INT 10
31507: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31508: LD_VAR 0 2
31512: PUSH
31513: LD_INT 1
31515: ARRAY
31516: PPUSH
31517: CALL_OW 310
31521: NOT
31522: IFFALSE 31569
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31524: CALL_OW 45
31528: PPUSH
31529: LD_VAR 0 2
31533: PUSH
31534: LD_INT 1
31536: ARRAY
31537: PPUSH
31538: CALL_OW 250
31542: PPUSH
31543: LD_VAR 0 2
31547: PUSH
31548: LD_INT 1
31550: ARRAY
31551: PPUSH
31552: CALL_OW 251
31556: PPUSH
31557: LD_INT 12
31559: PPUSH
31560: LD_INT 1
31562: PPUSH
31563: CALL_OW 50
31567: GO 31581
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31569: CALL_OW 45
31573: PPUSH
31574: LD_INT 1
31576: PPUSH
31577: CALL_OW 51
// end ;
31581: GO 31455
31583: POP
31584: POP
// end ;
31585: PPOPN 2
31587: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31588: LD_EXP 38
31592: IFFALSE 31600
31594: PUSH
31595: LD_EXP 84
31599: AND
31600: IFFALSE 31822
31602: GO 31604
31604: DISABLE
31605: LD_INT 0
31607: PPUSH
31608: PPUSH
31609: PPUSH
31610: PPUSH
31611: PPUSH
31612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31613: LD_ADDR_VAR 0 6
31617: PUSH
31618: LD_INT 22
31620: PUSH
31621: LD_OWVAR 2
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 21
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 23
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: LIST
31661: PPUSH
31662: CALL_OW 69
31666: ST_TO_ADDR
// if not tmp then
31667: LD_VAR 0 6
31671: NOT
31672: IFFALSE 31676
// exit ;
31674: GO 31822
// s1 := rand ( 1 , 4 ) ;
31676: LD_ADDR_VAR 0 2
31680: PUSH
31681: LD_INT 1
31683: PPUSH
31684: LD_INT 4
31686: PPUSH
31687: CALL_OW 12
31691: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31692: LD_ADDR_VAR 0 4
31696: PUSH
31697: LD_VAR 0 6
31701: PUSH
31702: LD_INT 1
31704: ARRAY
31705: PPUSH
31706: LD_VAR 0 2
31710: PPUSH
31711: CALL_OW 259
31715: ST_TO_ADDR
// if s1 = 1 then
31716: LD_VAR 0 2
31720: PUSH
31721: LD_INT 1
31723: EQUAL
31724: IFFALSE 31744
// s2 := rand ( 2 , 4 ) else
31726: LD_ADDR_VAR 0 3
31730: PUSH
31731: LD_INT 2
31733: PPUSH
31734: LD_INT 4
31736: PPUSH
31737: CALL_OW 12
31741: ST_TO_ADDR
31742: GO 31752
// s2 := 1 ;
31744: LD_ADDR_VAR 0 3
31748: PUSH
31749: LD_INT 1
31751: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31752: LD_ADDR_VAR 0 5
31756: PUSH
31757: LD_VAR 0 6
31761: PUSH
31762: LD_INT 1
31764: ARRAY
31765: PPUSH
31766: LD_VAR 0 3
31770: PPUSH
31771: CALL_OW 259
31775: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31776: LD_VAR 0 6
31780: PUSH
31781: LD_INT 1
31783: ARRAY
31784: PPUSH
31785: LD_VAR 0 2
31789: PPUSH
31790: LD_VAR 0 5
31794: PPUSH
31795: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31799: LD_VAR 0 6
31803: PUSH
31804: LD_INT 1
31806: ARRAY
31807: PPUSH
31808: LD_VAR 0 3
31812: PPUSH
31813: LD_VAR 0 4
31817: PPUSH
31818: CALL_OW 237
// end ;
31822: PPOPN 6
31824: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31825: LD_EXP 38
31829: IFFALSE 31837
31831: PUSH
31832: LD_EXP 85
31836: AND
31837: IFFALSE 31916
31839: GO 31841
31841: DISABLE
31842: LD_INT 0
31844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31845: LD_ADDR_VAR 0 1
31849: PUSH
31850: LD_INT 22
31852: PUSH
31853: LD_OWVAR 2
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 30
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PPUSH
31876: CALL_OW 69
31880: ST_TO_ADDR
// if not tmp then
31881: LD_VAR 0 1
31885: NOT
31886: IFFALSE 31890
// exit ;
31888: GO 31916
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31890: LD_VAR 0 1
31894: PUSH
31895: LD_INT 1
31897: PPUSH
31898: LD_VAR 0 1
31902: PPUSH
31903: CALL_OW 12
31907: ARRAY
31908: PPUSH
31909: LD_INT 1
31911: PPUSH
31912: CALL_OW 234
// end ;
31916: PPOPN 1
31918: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31919: LD_EXP 38
31923: IFFALSE 31931
31925: PUSH
31926: LD_EXP 86
31930: AND
31931: IFFALSE 32043
31933: GO 31935
31935: DISABLE
31936: LD_INT 0
31938: PPUSH
31939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31940: LD_ADDR_VAR 0 2
31944: PUSH
31945: LD_INT 22
31947: PUSH
31948: LD_OWVAR 2
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: LD_INT 30
31962: PUSH
31963: LD_INT 27
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 30
31972: PUSH
31973: LD_INT 26
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 30
31982: PUSH
31983: LD_INT 28
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PPUSH
32000: CALL_OW 69
32004: ST_TO_ADDR
// if not tmp then
32005: LD_VAR 0 2
32009: NOT
32010: IFFALSE 32014
// exit ;
32012: GO 32043
// for i in tmp do
32014: LD_ADDR_VAR 0 1
32018: PUSH
32019: LD_VAR 0 2
32023: PUSH
32024: FOR_IN
32025: IFFALSE 32041
// SetLives ( i , 1 ) ;
32027: LD_VAR 0 1
32031: PPUSH
32032: LD_INT 1
32034: PPUSH
32035: CALL_OW 234
32039: GO 32024
32041: POP
32042: POP
// end ;
32043: PPOPN 2
32045: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32046: LD_EXP 38
32050: IFFALSE 32058
32052: PUSH
32053: LD_EXP 87
32057: AND
32058: IFFALSE 32345
32060: GO 32062
32062: DISABLE
32063: LD_INT 0
32065: PPUSH
32066: PPUSH
32067: PPUSH
// begin i := rand ( 1 , 7 ) ;
32068: LD_ADDR_VAR 0 1
32072: PUSH
32073: LD_INT 1
32075: PPUSH
32076: LD_INT 7
32078: PPUSH
32079: CALL_OW 12
32083: ST_TO_ADDR
// case i of 1 :
32084: LD_VAR 0 1
32088: PUSH
32089: LD_INT 1
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32097
32095: GO 32107
32097: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32098: LD_STRING earthquake(getX(game), 0, 32)
32100: PPUSH
32101: CALL_OW 559
32105: GO 32345
32107: LD_INT 2
32109: DOUBLE
32110: EQUAL
32111: IFTRUE 32115
32113: GO 32129
32115: POP
// begin ToLua ( displayStucuk(); ) ;
32116: LD_STRING displayStucuk();
32118: PPUSH
32119: CALL_OW 559
// ResetFog ;
32123: CALL_OW 335
// end ; 3 :
32127: GO 32345
32129: LD_INT 3
32131: DOUBLE
32132: EQUAL
32133: IFTRUE 32137
32135: GO 32241
32137: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32138: LD_ADDR_VAR 0 2
32142: PUSH
32143: LD_INT 22
32145: PUSH
32146: LD_OWVAR 2
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 25
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PPUSH
32169: CALL_OW 69
32173: ST_TO_ADDR
// if not tmp then
32174: LD_VAR 0 2
32178: NOT
32179: IFFALSE 32183
// exit ;
32181: GO 32345
// un := tmp [ rand ( 1 , tmp ) ] ;
32183: LD_ADDR_VAR 0 3
32187: PUSH
32188: LD_VAR 0 2
32192: PUSH
32193: LD_INT 1
32195: PPUSH
32196: LD_VAR 0 2
32200: PPUSH
32201: CALL_OW 12
32205: ARRAY
32206: ST_TO_ADDR
// if Crawls ( un ) then
32207: LD_VAR 0 3
32211: PPUSH
32212: CALL_OW 318
32216: IFFALSE 32227
// ComWalk ( un ) ;
32218: LD_VAR 0 3
32222: PPUSH
32223: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32227: LD_VAR 0 3
32231: PPUSH
32232: LD_INT 8
32234: PPUSH
32235: CALL_OW 336
// end ; 4 :
32239: GO 32345
32241: LD_INT 4
32243: DOUBLE
32244: EQUAL
32245: IFTRUE 32249
32247: GO 32323
32249: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32250: LD_ADDR_VAR 0 2
32254: PUSH
32255: LD_INT 22
32257: PUSH
32258: LD_OWVAR 2
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 30
32269: PUSH
32270: LD_INT 29
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PPUSH
32281: CALL_OW 69
32285: ST_TO_ADDR
// if not tmp then
32286: LD_VAR 0 2
32290: NOT
32291: IFFALSE 32295
// exit ;
32293: GO 32345
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32295: LD_VAR 0 2
32299: PUSH
32300: LD_INT 1
32302: ARRAY
32303: PPUSH
32304: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32308: LD_VAR 0 2
32312: PUSH
32313: LD_INT 1
32315: ARRAY
32316: PPUSH
32317: CALL_OW 65
// end ; 5 .. 7 :
32321: GO 32345
32323: LD_INT 5
32325: DOUBLE
32326: GREATEREQUAL
32327: IFFALSE 32335
32329: LD_INT 7
32331: DOUBLE
32332: LESSEQUAL
32333: IFTRUE 32337
32335: GO 32344
32337: POP
// StreamSibBomb ; end ;
32338: CALL 28526 0 0
32342: GO 32345
32344: POP
// end ;
32345: PPOPN 3
32347: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32348: LD_EXP 38
32352: IFFALSE 32360
32354: PUSH
32355: LD_EXP 88
32359: AND
32360: IFFALSE 32516
32362: GO 32364
32364: DISABLE
32365: LD_INT 0
32367: PPUSH
32368: PPUSH
32369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32370: LD_ADDR_VAR 0 2
32374: PUSH
32375: LD_INT 81
32377: PUSH
32378: LD_OWVAR 2
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: LD_INT 21
32392: PUSH
32393: LD_INT 1
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 21
32402: PUSH
32403: LD_INT 2
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PPUSH
32419: CALL_OW 69
32423: ST_TO_ADDR
// if not tmp then
32424: LD_VAR 0 2
32428: NOT
32429: IFFALSE 32433
// exit ;
32431: GO 32516
// p := 0 ;
32433: LD_ADDR_VAR 0 3
32437: PUSH
32438: LD_INT 0
32440: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32441: LD_INT 35
32443: PPUSH
32444: CALL_OW 67
// p := p + 1 ;
32448: LD_ADDR_VAR 0 3
32452: PUSH
32453: LD_VAR 0 3
32457: PUSH
32458: LD_INT 1
32460: PLUS
32461: ST_TO_ADDR
// for i in tmp do
32462: LD_ADDR_VAR 0 1
32466: PUSH
32467: LD_VAR 0 2
32471: PUSH
32472: FOR_IN
32473: IFFALSE 32504
// if GetLives ( i ) < 1000 then
32475: LD_VAR 0 1
32479: PPUSH
32480: CALL_OW 256
32484: PUSH
32485: LD_INT 1000
32487: LESS
32488: IFFALSE 32502
// SetLives ( i , 1000 ) ;
32490: LD_VAR 0 1
32494: PPUSH
32495: LD_INT 1000
32497: PPUSH
32498: CALL_OW 234
32502: GO 32472
32504: POP
32505: POP
// until p > 20 ;
32506: LD_VAR 0 3
32510: PUSH
32511: LD_INT 20
32513: GREATER
32514: IFFALSE 32441
// end ;
32516: PPOPN 3
32518: END
// every 0 0$1 trigger StreamModeActive and sTime do
32519: LD_EXP 38
32523: IFFALSE 32531
32525: PUSH
32526: LD_EXP 89
32530: AND
32531: IFFALSE 32566
32533: GO 32535
32535: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32536: LD_INT 28
32538: PPUSH
32539: LD_OWVAR 2
32543: PPUSH
32544: LD_INT 2
32546: PPUSH
32547: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32551: LD_INT 30
32553: PPUSH
32554: LD_OWVAR 2
32558: PPUSH
32559: LD_INT 2
32561: PPUSH
32562: CALL_OW 322
// end ;
32566: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32567: LD_EXP 38
32571: IFFALSE 32579
32573: PUSH
32574: LD_EXP 90
32578: AND
32579: IFFALSE 32700
32581: GO 32583
32583: DISABLE
32584: LD_INT 0
32586: PPUSH
32587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32588: LD_ADDR_VAR 0 2
32592: PUSH
32593: LD_INT 22
32595: PUSH
32596: LD_OWVAR 2
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 21
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: LD_INT 23
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: PPUSH
32637: CALL_OW 69
32641: ST_TO_ADDR
// if not tmp then
32642: LD_VAR 0 2
32646: NOT
32647: IFFALSE 32651
// exit ;
32649: GO 32700
// for i in tmp do
32651: LD_ADDR_VAR 0 1
32655: PUSH
32656: LD_VAR 0 2
32660: PUSH
32661: FOR_IN
32662: IFFALSE 32698
// begin if Crawls ( i ) then
32664: LD_VAR 0 1
32668: PPUSH
32669: CALL_OW 318
32673: IFFALSE 32684
// ComWalk ( i ) ;
32675: LD_VAR 0 1
32679: PPUSH
32680: CALL_OW 138
// SetClass ( i , 2 ) ;
32684: LD_VAR 0 1
32688: PPUSH
32689: LD_INT 2
32691: PPUSH
32692: CALL_OW 336
// end ;
32696: GO 32661
32698: POP
32699: POP
// end ;
32700: PPOPN 2
32702: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32703: LD_EXP 38
32707: IFFALSE 32715
32709: PUSH
32710: LD_EXP 91
32714: AND
32715: IFFALSE 33005
32717: GO 32719
32719: DISABLE
32720: LD_INT 0
32722: PPUSH
32723: PPUSH
32724: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32725: LD_OWVAR 2
32729: PPUSH
32730: LD_INT 9
32732: PPUSH
32733: LD_INT 1
32735: PPUSH
32736: LD_INT 1
32738: PPUSH
32739: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32743: LD_INT 9
32745: PPUSH
32746: LD_OWVAR 2
32750: PPUSH
32751: CALL_OW 343
// uc_side := 9 ;
32755: LD_ADDR_OWVAR 20
32759: PUSH
32760: LD_INT 9
32762: ST_TO_ADDR
// uc_nation := 2 ;
32763: LD_ADDR_OWVAR 21
32767: PUSH
32768: LD_INT 2
32770: ST_TO_ADDR
// hc_name := Dark Warrior ;
32771: LD_ADDR_OWVAR 26
32775: PUSH
32776: LD_STRING Dark Warrior
32778: ST_TO_ADDR
// hc_gallery :=  ;
32779: LD_ADDR_OWVAR 33
32783: PUSH
32784: LD_STRING 
32786: ST_TO_ADDR
// hc_noskilllimit := true ;
32787: LD_ADDR_OWVAR 76
32791: PUSH
32792: LD_INT 1
32794: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32795: LD_ADDR_OWVAR 31
32799: PUSH
32800: LD_INT 30
32802: PUSH
32803: LD_INT 30
32805: PUSH
32806: LD_INT 30
32808: PUSH
32809: LD_INT 30
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: ST_TO_ADDR
// un := CreateHuman ;
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: CALL_OW 44
32827: ST_TO_ADDR
// hc_noskilllimit := false ;
32828: LD_ADDR_OWVAR 76
32832: PUSH
32833: LD_INT 0
32835: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32836: LD_VAR 0 3
32840: PPUSH
32841: LD_INT 1
32843: PPUSH
32844: CALL_OW 51
// ToLua ( playRanger() ) ;
32848: LD_STRING playRanger()
32850: PPUSH
32851: CALL_OW 559
// p := 0 ;
32855: LD_ADDR_VAR 0 2
32859: PUSH
32860: LD_INT 0
32862: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32863: LD_INT 35
32865: PPUSH
32866: CALL_OW 67
// p := p + 1 ;
32870: LD_ADDR_VAR 0 2
32874: PUSH
32875: LD_VAR 0 2
32879: PUSH
32880: LD_INT 1
32882: PLUS
32883: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32884: LD_VAR 0 3
32888: PPUSH
32889: CALL_OW 256
32893: PUSH
32894: LD_INT 1000
32896: LESS
32897: IFFALSE 32911
// SetLives ( un , 1000 ) ;
32899: LD_VAR 0 3
32903: PPUSH
32904: LD_INT 1000
32906: PPUSH
32907: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32911: LD_VAR 0 3
32915: PPUSH
32916: LD_INT 81
32918: PUSH
32919: LD_OWVAR 2
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 91
32930: PUSH
32931: LD_VAR 0 3
32935: PUSH
32936: LD_INT 30
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: LIST
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PPUSH
32948: CALL_OW 69
32952: PPUSH
32953: LD_VAR 0 3
32957: PPUSH
32958: CALL_OW 74
32962: PPUSH
32963: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32967: LD_VAR 0 2
32971: PUSH
32972: LD_INT 80
32974: GREATER
32975: IFTRUE 32988
32977: PUSH
32978: LD_VAR 0 3
32982: PPUSH
32983: CALL_OW 301
32987: OR
32988: IFFALSE 32863
// if un then
32990: LD_VAR 0 3
32994: IFFALSE 33005
// RemoveUnit ( un ) ;
32996: LD_VAR 0 3
33000: PPUSH
33001: CALL_OW 64
// end ;
33005: PPOPN 3
33007: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33008: LD_EXP 92
33012: IFFALSE 33128
33014: GO 33016
33016: DISABLE
33017: LD_INT 0
33019: PPUSH
33020: PPUSH
33021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33022: LD_ADDR_VAR 0 2
33026: PUSH
33027: LD_INT 81
33029: PUSH
33030: LD_OWVAR 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 21
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PPUSH
33053: CALL_OW 69
33057: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33058: LD_STRING playComputer()
33060: PPUSH
33061: CALL_OW 559
// if not tmp then
33065: LD_VAR 0 2
33069: NOT
33070: IFFALSE 33074
// exit ;
33072: GO 33128
// for i in tmp do
33074: LD_ADDR_VAR 0 1
33078: PUSH
33079: LD_VAR 0 2
33083: PUSH
33084: FOR_IN
33085: IFFALSE 33126
// for j := 1 to 4 do
33087: LD_ADDR_VAR 0 3
33091: PUSH
33092: DOUBLE
33093: LD_INT 1
33095: DEC
33096: ST_TO_ADDR
33097: LD_INT 4
33099: PUSH
33100: FOR_TO
33101: IFFALSE 33122
// SetSkill ( i , j , 10 ) ;
33103: LD_VAR 0 1
33107: PPUSH
33108: LD_VAR 0 3
33112: PPUSH
33113: LD_INT 10
33115: PPUSH
33116: CALL_OW 237
33120: GO 33100
33122: POP
33123: POP
33124: GO 33084
33126: POP
33127: POP
// end ;
33128: PPOPN 3
33130: END
// every 0 0$1 trigger s30 do var i , tmp ;
33131: LD_EXP 93
33135: IFFALSE 33204
33137: GO 33139
33139: DISABLE
33140: LD_INT 0
33142: PPUSH
33143: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33144: LD_ADDR_VAR 0 2
33148: PUSH
33149: LD_INT 22
33151: PUSH
33152: LD_OWVAR 2
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PPUSH
33161: CALL_OW 69
33165: ST_TO_ADDR
// if not tmp then
33166: LD_VAR 0 2
33170: NOT
33171: IFFALSE 33175
// exit ;
33173: GO 33204
// for i in tmp do
33175: LD_ADDR_VAR 0 1
33179: PUSH
33180: LD_VAR 0 2
33184: PUSH
33185: FOR_IN
33186: IFFALSE 33202
// SetLives ( i , 300 ) ;
33188: LD_VAR 0 1
33192: PPUSH
33193: LD_INT 300
33195: PPUSH
33196: CALL_OW 234
33200: GO 33185
33202: POP
33203: POP
// end ;
33204: PPOPN 2
33206: END
// every 0 0$1 trigger s60 do var i , tmp ;
33207: LD_EXP 94
33211: IFFALSE 33280
33213: GO 33215
33215: DISABLE
33216: LD_INT 0
33218: PPUSH
33219: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33220: LD_ADDR_VAR 0 2
33224: PUSH
33225: LD_INT 22
33227: PUSH
33228: LD_OWVAR 2
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PPUSH
33237: CALL_OW 69
33241: ST_TO_ADDR
// if not tmp then
33242: LD_VAR 0 2
33246: NOT
33247: IFFALSE 33251
// exit ;
33249: GO 33280
// for i in tmp do
33251: LD_ADDR_VAR 0 1
33255: PUSH
33256: LD_VAR 0 2
33260: PUSH
33261: FOR_IN
33262: IFFALSE 33278
// SetLives ( i , 600 ) ;
33264: LD_VAR 0 1
33268: PPUSH
33269: LD_INT 600
33271: PPUSH
33272: CALL_OW 234
33276: GO 33261
33278: POP
33279: POP
// end ;
33280: PPOPN 2
33282: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33283: LD_INT 0
33285: PPUSH
// case cmd of 301 :
33286: LD_VAR 0 1
33290: PUSH
33291: LD_INT 301
33293: DOUBLE
33294: EQUAL
33295: IFTRUE 33299
33297: GO 33331
33299: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33300: LD_VAR 0 6
33304: PPUSH
33305: LD_VAR 0 7
33309: PPUSH
33310: LD_VAR 0 8
33314: PPUSH
33315: LD_VAR 0 4
33319: PPUSH
33320: LD_VAR 0 5
33324: PPUSH
33325: CALL 34544 0 5
33329: GO 33452
33331: LD_INT 302
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33339
33337: GO 33376
33339: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33340: LD_VAR 0 6
33344: PPUSH
33345: LD_VAR 0 7
33349: PPUSH
33350: LD_VAR 0 8
33354: PPUSH
33355: LD_VAR 0 9
33359: PPUSH
33360: LD_VAR 0 4
33364: PPUSH
33365: LD_VAR 0 5
33369: PPUSH
33370: CALL 34635 0 6
33374: GO 33452
33376: LD_INT 303
33378: DOUBLE
33379: EQUAL
33380: IFTRUE 33384
33382: GO 33421
33384: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33385: LD_VAR 0 6
33389: PPUSH
33390: LD_VAR 0 7
33394: PPUSH
33395: LD_VAR 0 8
33399: PPUSH
33400: LD_VAR 0 9
33404: PPUSH
33405: LD_VAR 0 4
33409: PPUSH
33410: LD_VAR 0 5
33414: PPUSH
33415: CALL 33457 0 6
33419: GO 33452
33421: LD_INT 304
33423: DOUBLE
33424: EQUAL
33425: IFTRUE 33429
33427: GO 33451
33429: POP
// hHackTeleport ( unit , x , y ) ; end ;
33430: LD_VAR 0 2
33434: PPUSH
33435: LD_VAR 0 4
33439: PPUSH
33440: LD_VAR 0 5
33444: PPUSH
33445: CALL 35228 0 3
33449: GO 33452
33451: POP
// end ;
33452: LD_VAR 0 12
33456: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33461: LD_VAR 0 1
33465: PUSH
33466: LD_INT 1
33468: LESS
33469: IFTRUE 33481
33471: PUSH
33472: LD_VAR 0 1
33476: PUSH
33477: LD_INT 3
33479: GREATER
33480: OR
33481: IFTRUE 33499
33483: PUSH
33484: LD_VAR 0 5
33488: PPUSH
33489: LD_VAR 0 6
33493: PPUSH
33494: CALL_OW 428
33498: OR
33499: IFFALSE 33503
// exit ;
33501: GO 34231
// uc_side := your_side ;
33503: LD_ADDR_OWVAR 20
33507: PUSH
33508: LD_OWVAR 2
33512: ST_TO_ADDR
// uc_nation := nation ;
33513: LD_ADDR_OWVAR 21
33517: PUSH
33518: LD_VAR 0 1
33522: ST_TO_ADDR
// bc_level = 1 ;
33523: LD_ADDR_OWVAR 43
33527: PUSH
33528: LD_INT 1
33530: ST_TO_ADDR
// case btype of 1 :
33531: LD_VAR 0 2
33535: PUSH
33536: LD_INT 1
33538: DOUBLE
33539: EQUAL
33540: IFTRUE 33544
33542: GO 33555
33544: POP
// bc_type := b_depot ; 2 :
33545: LD_ADDR_OWVAR 42
33549: PUSH
33550: LD_INT 0
33552: ST_TO_ADDR
33553: GO 34175
33555: LD_INT 2
33557: DOUBLE
33558: EQUAL
33559: IFTRUE 33563
33561: GO 33574
33563: POP
// bc_type := b_warehouse ; 3 :
33564: LD_ADDR_OWVAR 42
33568: PUSH
33569: LD_INT 1
33571: ST_TO_ADDR
33572: GO 34175
33574: LD_INT 3
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33582
33580: GO 33593
33582: POP
// bc_type := b_lab ; 4 .. 9 :
33583: LD_ADDR_OWVAR 42
33587: PUSH
33588: LD_INT 6
33590: ST_TO_ADDR
33591: GO 34175
33593: LD_INT 4
33595: DOUBLE
33596: GREATEREQUAL
33597: IFFALSE 33605
33599: LD_INT 9
33601: DOUBLE
33602: LESSEQUAL
33603: IFTRUE 33607
33605: GO 33667
33607: POP
// begin bc_type := b_lab_half ;
33608: LD_ADDR_OWVAR 42
33612: PUSH
33613: LD_INT 7
33615: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33616: LD_ADDR_OWVAR 44
33620: PUSH
33621: LD_INT 10
33623: PUSH
33624: LD_INT 11
33626: PUSH
33627: LD_INT 12
33629: PUSH
33630: LD_INT 15
33632: PUSH
33633: LD_INT 14
33635: PUSH
33636: LD_INT 13
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: PUSH
33647: LD_VAR 0 2
33651: PUSH
33652: LD_INT 3
33654: MINUS
33655: ARRAY
33656: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33657: LD_ADDR_OWVAR 45
33661: PUSH
33662: LD_INT 9
33664: ST_TO_ADDR
// end ; 10 .. 13 :
33665: GO 34175
33667: LD_INT 10
33669: DOUBLE
33670: GREATEREQUAL
33671: IFFALSE 33679
33673: LD_INT 13
33675: DOUBLE
33676: LESSEQUAL
33677: IFTRUE 33681
33679: GO 33758
33681: POP
// begin bc_type := b_lab_full ;
33682: LD_ADDR_OWVAR 42
33686: PUSH
33687: LD_INT 8
33689: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33690: LD_ADDR_OWVAR 44
33694: PUSH
33695: LD_INT 10
33697: PUSH
33698: LD_INT 12
33700: PUSH
33701: LD_INT 14
33703: PUSH
33704: LD_INT 13
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: PUSH
33713: LD_VAR 0 2
33717: PUSH
33718: LD_INT 9
33720: MINUS
33721: ARRAY
33722: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33723: LD_ADDR_OWVAR 45
33727: PUSH
33728: LD_INT 11
33730: PUSH
33731: LD_INT 15
33733: PUSH
33734: LD_INT 12
33736: PUSH
33737: LD_INT 15
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: PUSH
33746: LD_VAR 0 2
33750: PUSH
33751: LD_INT 9
33753: MINUS
33754: ARRAY
33755: ST_TO_ADDR
// end ; 14 :
33756: GO 34175
33758: LD_INT 14
33760: DOUBLE
33761: EQUAL
33762: IFTRUE 33766
33764: GO 33777
33766: POP
// bc_type := b_workshop ; 15 :
33767: LD_ADDR_OWVAR 42
33771: PUSH
33772: LD_INT 2
33774: ST_TO_ADDR
33775: GO 34175
33777: LD_INT 15
33779: DOUBLE
33780: EQUAL
33781: IFTRUE 33785
33783: GO 33796
33785: POP
// bc_type := b_factory ; 16 :
33786: LD_ADDR_OWVAR 42
33790: PUSH
33791: LD_INT 3
33793: ST_TO_ADDR
33794: GO 34175
33796: LD_INT 16
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33804
33802: GO 33815
33804: POP
// bc_type := b_ext_gun ; 17 :
33805: LD_ADDR_OWVAR 42
33809: PUSH
33810: LD_INT 17
33812: ST_TO_ADDR
33813: GO 34175
33815: LD_INT 17
33817: DOUBLE
33818: EQUAL
33819: IFTRUE 33823
33821: GO 33851
33823: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33824: LD_ADDR_OWVAR 42
33828: PUSH
33829: LD_INT 19
33831: PUSH
33832: LD_INT 23
33834: PUSH
33835: LD_INT 19
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: PUSH
33843: LD_VAR 0 1
33847: ARRAY
33848: ST_TO_ADDR
33849: GO 34175
33851: LD_INT 18
33853: DOUBLE
33854: EQUAL
33855: IFTRUE 33859
33857: GO 33870
33859: POP
// bc_type := b_ext_radar ; 19 :
33860: LD_ADDR_OWVAR 42
33864: PUSH
33865: LD_INT 20
33867: ST_TO_ADDR
33868: GO 34175
33870: LD_INT 19
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 33889
33878: POP
// bc_type := b_ext_radio ; 20 :
33879: LD_ADDR_OWVAR 42
33883: PUSH
33884: LD_INT 22
33886: ST_TO_ADDR
33887: GO 34175
33889: LD_INT 20
33891: DOUBLE
33892: EQUAL
33893: IFTRUE 33897
33895: GO 33908
33897: POP
// bc_type := b_ext_siberium ; 21 :
33898: LD_ADDR_OWVAR 42
33902: PUSH
33903: LD_INT 21
33905: ST_TO_ADDR
33906: GO 34175
33908: LD_INT 21
33910: DOUBLE
33911: EQUAL
33912: IFTRUE 33916
33914: GO 33927
33916: POP
// bc_type := b_ext_computer ; 22 :
33917: LD_ADDR_OWVAR 42
33921: PUSH
33922: LD_INT 24
33924: ST_TO_ADDR
33925: GO 34175
33927: LD_INT 22
33929: DOUBLE
33930: EQUAL
33931: IFTRUE 33935
33933: GO 33946
33935: POP
// bc_type := b_ext_track ; 23 :
33936: LD_ADDR_OWVAR 42
33940: PUSH
33941: LD_INT 16
33943: ST_TO_ADDR
33944: GO 34175
33946: LD_INT 23
33948: DOUBLE
33949: EQUAL
33950: IFTRUE 33954
33952: GO 33965
33954: POP
// bc_type := b_ext_laser ; 24 :
33955: LD_ADDR_OWVAR 42
33959: PUSH
33960: LD_INT 25
33962: ST_TO_ADDR
33963: GO 34175
33965: LD_INT 24
33967: DOUBLE
33968: EQUAL
33969: IFTRUE 33973
33971: GO 33984
33973: POP
// bc_type := b_control_tower ; 25 :
33974: LD_ADDR_OWVAR 42
33978: PUSH
33979: LD_INT 36
33981: ST_TO_ADDR
33982: GO 34175
33984: LD_INT 25
33986: DOUBLE
33987: EQUAL
33988: IFTRUE 33992
33990: GO 34003
33992: POP
// bc_type := b_breastwork ; 26 :
33993: LD_ADDR_OWVAR 42
33997: PUSH
33998: LD_INT 31
34000: ST_TO_ADDR
34001: GO 34175
34003: LD_INT 26
34005: DOUBLE
34006: EQUAL
34007: IFTRUE 34011
34009: GO 34022
34011: POP
// bc_type := b_bunker ; 27 :
34012: LD_ADDR_OWVAR 42
34016: PUSH
34017: LD_INT 32
34019: ST_TO_ADDR
34020: GO 34175
34022: LD_INT 27
34024: DOUBLE
34025: EQUAL
34026: IFTRUE 34030
34028: GO 34041
34030: POP
// bc_type := b_turret ; 28 :
34031: LD_ADDR_OWVAR 42
34035: PUSH
34036: LD_INT 33
34038: ST_TO_ADDR
34039: GO 34175
34041: LD_INT 28
34043: DOUBLE
34044: EQUAL
34045: IFTRUE 34049
34047: GO 34060
34049: POP
// bc_type := b_armoury ; 29 :
34050: LD_ADDR_OWVAR 42
34054: PUSH
34055: LD_INT 4
34057: ST_TO_ADDR
34058: GO 34175
34060: LD_INT 29
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34079
34068: POP
// bc_type := b_barracks ; 30 :
34069: LD_ADDR_OWVAR 42
34073: PUSH
34074: LD_INT 5
34076: ST_TO_ADDR
34077: GO 34175
34079: LD_INT 30
34081: DOUBLE
34082: EQUAL
34083: IFTRUE 34087
34085: GO 34098
34087: POP
// bc_type := b_solar_power ; 31 :
34088: LD_ADDR_OWVAR 42
34092: PUSH
34093: LD_INT 27
34095: ST_TO_ADDR
34096: GO 34175
34098: LD_INT 31
34100: DOUBLE
34101: EQUAL
34102: IFTRUE 34106
34104: GO 34117
34106: POP
// bc_type := b_oil_power ; 32 :
34107: LD_ADDR_OWVAR 42
34111: PUSH
34112: LD_INT 26
34114: ST_TO_ADDR
34115: GO 34175
34117: LD_INT 32
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34125
34123: GO 34136
34125: POP
// bc_type := b_siberite_power ; 33 :
34126: LD_ADDR_OWVAR 42
34130: PUSH
34131: LD_INT 28
34133: ST_TO_ADDR
34134: GO 34175
34136: LD_INT 33
34138: DOUBLE
34139: EQUAL
34140: IFTRUE 34144
34142: GO 34155
34144: POP
// bc_type := b_oil_mine ; 34 :
34145: LD_ADDR_OWVAR 42
34149: PUSH
34150: LD_INT 29
34152: ST_TO_ADDR
34153: GO 34175
34155: LD_INT 34
34157: DOUBLE
34158: EQUAL
34159: IFTRUE 34163
34161: GO 34174
34163: POP
// bc_type := b_siberite_mine ; end ;
34164: LD_ADDR_OWVAR 42
34168: PUSH
34169: LD_INT 30
34171: ST_TO_ADDR
34172: GO 34175
34174: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34175: LD_ADDR_VAR 0 8
34179: PUSH
34180: LD_VAR 0 5
34184: PPUSH
34185: LD_VAR 0 6
34189: PPUSH
34190: LD_VAR 0 3
34194: PPUSH
34195: CALL_OW 47
34199: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34200: LD_OWVAR 42
34204: PUSH
34205: LD_INT 32
34207: PUSH
34208: LD_INT 33
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: IN
34215: IFFALSE 34231
// PlaceWeaponTurret ( b , weapon ) ;
34217: LD_VAR 0 8
34221: PPUSH
34222: LD_VAR 0 4
34226: PPUSH
34227: CALL_OW 431
// end ;
34231: LD_VAR 0 7
34235: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34236: LD_INT 0
34238: PPUSH
34239: PPUSH
34240: PPUSH
34241: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34242: LD_ADDR_VAR 0 4
34246: PUSH
34247: LD_INT 22
34249: PUSH
34250: LD_OWVAR 2
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: LD_INT 30
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 30
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PPUSH
34291: CALL_OW 69
34295: ST_TO_ADDR
// if not tmp then
34296: LD_VAR 0 4
34300: NOT
34301: IFFALSE 34305
// exit ;
34303: GO 34364
// for i in tmp do
34305: LD_ADDR_VAR 0 2
34309: PUSH
34310: LD_VAR 0 4
34314: PUSH
34315: FOR_IN
34316: IFFALSE 34362
// for j = 1 to 3 do
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: DOUBLE
34324: LD_INT 1
34326: DEC
34327: ST_TO_ADDR
34328: LD_INT 3
34330: PUSH
34331: FOR_TO
34332: IFFALSE 34358
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34334: LD_VAR 0 2
34338: PPUSH
34339: CALL_OW 274
34343: PPUSH
34344: LD_VAR 0 3
34348: PPUSH
34349: LD_INT 99999
34351: PPUSH
34352: CALL_OW 277
34356: GO 34331
34358: POP
34359: POP
34360: GO 34315
34362: POP
34363: POP
// end ;
34364: LD_VAR 0 1
34368: RET
// export function hHackSetLevel10 ; var i , j ; begin
34369: LD_INT 0
34371: PPUSH
34372: PPUSH
34373: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34374: LD_ADDR_VAR 0 2
34378: PUSH
34379: LD_INT 21
34381: PUSH
34382: LD_INT 1
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PPUSH
34389: CALL_OW 69
34393: PUSH
34394: FOR_IN
34395: IFFALSE 34447
// if IsSelected ( i ) then
34397: LD_VAR 0 2
34401: PPUSH
34402: CALL_OW 306
34406: IFFALSE 34445
// begin for j := 1 to 4 do
34408: LD_ADDR_VAR 0 3
34412: PUSH
34413: DOUBLE
34414: LD_INT 1
34416: DEC
34417: ST_TO_ADDR
34418: LD_INT 4
34420: PUSH
34421: FOR_TO
34422: IFFALSE 34443
// SetSkill ( i , j , 10 ) ;
34424: LD_VAR 0 2
34428: PPUSH
34429: LD_VAR 0 3
34433: PPUSH
34434: LD_INT 10
34436: PPUSH
34437: CALL_OW 237
34441: GO 34421
34443: POP
34444: POP
// end ;
34445: GO 34394
34447: POP
34448: POP
// end ;
34449: LD_VAR 0 1
34453: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34454: LD_INT 0
34456: PPUSH
34457: PPUSH
34458: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34459: LD_ADDR_VAR 0 2
34463: PUSH
34464: LD_INT 22
34466: PUSH
34467: LD_OWVAR 2
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 21
34478: PUSH
34479: LD_INT 1
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PPUSH
34490: CALL_OW 69
34494: PUSH
34495: FOR_IN
34496: IFFALSE 34537
// begin for j := 1 to 4 do
34498: LD_ADDR_VAR 0 3
34502: PUSH
34503: DOUBLE
34504: LD_INT 1
34506: DEC
34507: ST_TO_ADDR
34508: LD_INT 4
34510: PUSH
34511: FOR_TO
34512: IFFALSE 34533
// SetSkill ( i , j , 10 ) ;
34514: LD_VAR 0 2
34518: PPUSH
34519: LD_VAR 0 3
34523: PPUSH
34524: LD_INT 10
34526: PPUSH
34527: CALL_OW 237
34531: GO 34511
34533: POP
34534: POP
// end ;
34535: GO 34495
34537: POP
34538: POP
// end ;
34539: LD_VAR 0 1
34543: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34544: LD_INT 0
34546: PPUSH
// uc_side := your_side ;
34547: LD_ADDR_OWVAR 20
34551: PUSH
34552: LD_OWVAR 2
34556: ST_TO_ADDR
// uc_nation := nation ;
34557: LD_ADDR_OWVAR 21
34561: PUSH
34562: LD_VAR 0 1
34566: ST_TO_ADDR
// InitHc ;
34567: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34571: LD_INT 0
34573: PPUSH
34574: LD_VAR 0 2
34578: PPUSH
34579: LD_VAR 0 3
34583: PPUSH
34584: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34588: LD_VAR 0 4
34592: PPUSH
34593: LD_VAR 0 5
34597: PPUSH
34598: CALL_OW 428
34602: PUSH
34603: LD_INT 0
34605: EQUAL
34606: IFFALSE 34630
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34608: CALL_OW 44
34612: PPUSH
34613: LD_VAR 0 4
34617: PPUSH
34618: LD_VAR 0 5
34622: PPUSH
34623: LD_INT 1
34625: PPUSH
34626: CALL_OW 48
// end ;
34630: LD_VAR 0 6
34634: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34635: LD_INT 0
34637: PPUSH
34638: PPUSH
// uc_side := your_side ;
34639: LD_ADDR_OWVAR 20
34643: PUSH
34644: LD_OWVAR 2
34648: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34649: LD_VAR 0 1
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 3
34662: PUSH
34663: LD_INT 4
34665: PUSH
34666: LD_INT 5
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: IN
34676: IFFALSE 34688
// uc_nation := nation_american else
34678: LD_ADDR_OWVAR 21
34682: PUSH
34683: LD_INT 1
34685: ST_TO_ADDR
34686: GO 34731
// if chassis in [ 11 , 12 , 13 , 14 ] then
34688: LD_VAR 0 1
34692: PUSH
34693: LD_INT 11
34695: PUSH
34696: LD_INT 12
34698: PUSH
34699: LD_INT 13
34701: PUSH
34702: LD_INT 14
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: IN
34711: IFFALSE 34723
// uc_nation := nation_arabian else
34713: LD_ADDR_OWVAR 21
34717: PUSH
34718: LD_INT 2
34720: ST_TO_ADDR
34721: GO 34731
// uc_nation := nation_russian ;
34723: LD_ADDR_OWVAR 21
34727: PUSH
34728: LD_INT 3
34730: ST_TO_ADDR
// vc_chassis := chassis ;
34731: LD_ADDR_OWVAR 37
34735: PUSH
34736: LD_VAR 0 1
34740: ST_TO_ADDR
// vc_engine := engine ;
34741: LD_ADDR_OWVAR 39
34745: PUSH
34746: LD_VAR 0 2
34750: ST_TO_ADDR
// vc_control := control ;
34751: LD_ADDR_OWVAR 38
34755: PUSH
34756: LD_VAR 0 3
34760: ST_TO_ADDR
// vc_weapon := weapon ;
34761: LD_ADDR_OWVAR 40
34765: PUSH
34766: LD_VAR 0 4
34770: ST_TO_ADDR
// un := CreateVehicle ;
34771: LD_ADDR_VAR 0 8
34775: PUSH
34776: CALL_OW 45
34780: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34781: LD_VAR 0 8
34785: PPUSH
34786: LD_INT 0
34788: PPUSH
34789: LD_INT 5
34791: PPUSH
34792: CALL_OW 12
34796: PPUSH
34797: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34801: LD_VAR 0 8
34805: PPUSH
34806: LD_VAR 0 5
34810: PPUSH
34811: LD_VAR 0 6
34815: PPUSH
34816: LD_INT 1
34818: PPUSH
34819: CALL_OW 48
// end ;
34823: LD_VAR 0 7
34827: RET
// export hInvincible ; every 1 do
34828: GO 34830
34830: DISABLE
// hInvincible := [ ] ;
34831: LD_ADDR_EXP 95
34835: PUSH
34836: EMPTY
34837: ST_TO_ADDR
34838: END
// every 10 do var i ;
34839: GO 34841
34841: DISABLE
34842: LD_INT 0
34844: PPUSH
// begin enable ;
34845: ENABLE
// if not hInvincible then
34846: LD_EXP 95
34850: NOT
34851: IFFALSE 34855
// exit ;
34853: GO 34899
// for i in hInvincible do
34855: LD_ADDR_VAR 0 1
34859: PUSH
34860: LD_EXP 95
34864: PUSH
34865: FOR_IN
34866: IFFALSE 34897
// if GetLives ( i ) < 1000 then
34868: LD_VAR 0 1
34872: PPUSH
34873: CALL_OW 256
34877: PUSH
34878: LD_INT 1000
34880: LESS
34881: IFFALSE 34895
// SetLives ( i , 1000 ) ;
34883: LD_VAR 0 1
34887: PPUSH
34888: LD_INT 1000
34890: PPUSH
34891: CALL_OW 234
34895: GO 34865
34897: POP
34898: POP
// end ;
34899: PPOPN 1
34901: END
// export function hHackInvincible ; var i ; begin
34902: LD_INT 0
34904: PPUSH
34905: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34906: LD_ADDR_VAR 0 2
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: LD_INT 21
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 21
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: PPUSH
34939: CALL_OW 69
34943: PUSH
34944: FOR_IN
34945: IFFALSE 35006
// if IsSelected ( i ) then
34947: LD_VAR 0 2
34951: PPUSH
34952: CALL_OW 306
34956: IFFALSE 35004
// begin if i in hInvincible then
34958: LD_VAR 0 2
34962: PUSH
34963: LD_EXP 95
34967: IN
34968: IFFALSE 34988
// hInvincible := hInvincible diff i else
34970: LD_ADDR_EXP 95
34974: PUSH
34975: LD_EXP 95
34979: PUSH
34980: LD_VAR 0 2
34984: DIFF
34985: ST_TO_ADDR
34986: GO 35004
// hInvincible := hInvincible union i ;
34988: LD_ADDR_EXP 95
34992: PUSH
34993: LD_EXP 95
34997: PUSH
34998: LD_VAR 0 2
35002: UNION
35003: ST_TO_ADDR
// end ;
35004: GO 34944
35006: POP
35007: POP
// end ;
35008: LD_VAR 0 1
35012: RET
// export function hHackInvisible ; var i , j ; begin
35013: LD_INT 0
35015: PPUSH
35016: PPUSH
35017: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35018: LD_ADDR_VAR 0 2
35022: PUSH
35023: LD_INT 21
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PPUSH
35033: CALL_OW 69
35037: PUSH
35038: FOR_IN
35039: IFFALSE 35063
// if IsSelected ( i ) then
35041: LD_VAR 0 2
35045: PPUSH
35046: CALL_OW 306
35050: IFFALSE 35061
// ComForceInvisible ( i ) ;
35052: LD_VAR 0 2
35056: PPUSH
35057: CALL_OW 496
35061: GO 35038
35063: POP
35064: POP
// end ;
35065: LD_VAR 0 1
35069: RET
// export function hHackChangeYourSide ; begin
35070: LD_INT 0
35072: PPUSH
// if your_side = 8 then
35073: LD_OWVAR 2
35077: PUSH
35078: LD_INT 8
35080: EQUAL
35081: IFFALSE 35093
// your_side := 0 else
35083: LD_ADDR_OWVAR 2
35087: PUSH
35088: LD_INT 0
35090: ST_TO_ADDR
35091: GO 35107
// your_side := your_side + 1 ;
35093: LD_ADDR_OWVAR 2
35097: PUSH
35098: LD_OWVAR 2
35102: PUSH
35103: LD_INT 1
35105: PLUS
35106: ST_TO_ADDR
// end ;
35107: LD_VAR 0 1
35111: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35112: LD_INT 0
35114: PPUSH
35115: PPUSH
35116: PPUSH
// for i in all_units do
35117: LD_ADDR_VAR 0 2
35121: PUSH
35122: LD_OWVAR 3
35126: PUSH
35127: FOR_IN
35128: IFFALSE 35206
// if IsSelected ( i ) then
35130: LD_VAR 0 2
35134: PPUSH
35135: CALL_OW 306
35139: IFFALSE 35204
// begin j := GetSide ( i ) ;
35141: LD_ADDR_VAR 0 3
35145: PUSH
35146: LD_VAR 0 2
35150: PPUSH
35151: CALL_OW 255
35155: ST_TO_ADDR
// if j = 8 then
35156: LD_VAR 0 3
35160: PUSH
35161: LD_INT 8
35163: EQUAL
35164: IFFALSE 35176
// j := 0 else
35166: LD_ADDR_VAR 0 3
35170: PUSH
35171: LD_INT 0
35173: ST_TO_ADDR
35174: GO 35190
// j := j + 1 ;
35176: LD_ADDR_VAR 0 3
35180: PUSH
35181: LD_VAR 0 3
35185: PUSH
35186: LD_INT 1
35188: PLUS
35189: ST_TO_ADDR
// SetSide ( i , j ) ;
35190: LD_VAR 0 2
35194: PPUSH
35195: LD_VAR 0 3
35199: PPUSH
35200: CALL_OW 235
// end ;
35204: GO 35127
35206: POP
35207: POP
// end ;
35208: LD_VAR 0 1
35212: RET
// export function hHackFog ; begin
35213: LD_INT 0
35215: PPUSH
// FogOff ( true ) ;
35216: LD_INT 1
35218: PPUSH
35219: CALL_OW 344
// end ;
35223: LD_VAR 0 1
35227: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35228: LD_INT 0
35230: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35231: LD_VAR 0 1
35235: PPUSH
35236: LD_VAR 0 2
35240: PPUSH
35241: LD_VAR 0 3
35245: PPUSH
35246: LD_INT 1
35248: PPUSH
35249: LD_INT 1
35251: PPUSH
35252: CALL_OW 483
// CenterOnXY ( x , y ) ;
35256: LD_VAR 0 2
35260: PPUSH
35261: LD_VAR 0 3
35265: PPUSH
35266: CALL_OW 84
// end ;
35270: LD_VAR 0 4
35274: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35275: LD_INT 0
35277: PPUSH
35278: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35279: LD_VAR 0 1
35283: NOT
35284: IFTRUE 35303
35286: PUSH
35287: LD_VAR 0 2
35291: PPUSH
35292: LD_VAR 0 3
35296: PPUSH
35297: CALL_OW 488
35301: NOT
35302: OR
35303: IFTRUE 35338
35305: PUSH
35306: LD_VAR 0 1
35310: PPUSH
35311: CALL_OW 266
35315: PUSH
35316: LD_INT 3
35318: NONEQUAL
35319: IFFALSE 35337
35321: PUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: CALL_OW 247
35331: PUSH
35332: LD_INT 1
35334: EQUAL
35335: NOT
35336: AND
35337: OR
35338: IFFALSE 35342
// exit ;
35340: GO 35624
// if GetType ( factory ) = unit_human then
35342: LD_VAR 0 1
35346: PPUSH
35347: CALL_OW 247
35351: PUSH
35352: LD_INT 1
35354: EQUAL
35355: IFFALSE 35372
// factory := IsInUnit ( factory ) ;
35357: LD_ADDR_VAR 0 1
35361: PUSH
35362: LD_VAR 0 1
35366: PPUSH
35367: CALL_OW 310
35371: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35372: LD_VAR 0 1
35376: PPUSH
35377: CALL_OW 266
35381: PUSH
35382: LD_INT 3
35384: NONEQUAL
35385: IFFALSE 35389
// exit ;
35387: GO 35624
// for i := 1 to Count ( factoryWaypoints ) do
35389: LD_ADDR_VAR 0 5
35393: PUSH
35394: DOUBLE
35395: LD_INT 1
35397: DEC
35398: ST_TO_ADDR
35399: LD_EXP 96
35403: PPUSH
35404: CALL 45428 0 1
35408: PUSH
35409: FOR_TO
35410: IFFALSE 35572
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35412: LD_VAR 0 2
35416: PPUSH
35417: LD_VAR 0 3
35421: PPUSH
35422: CALL_OW 428
35426: PUSH
35427: LD_EXP 96
35431: PUSH
35432: LD_VAR 0 5
35436: ARRAY
35437: PUSH
35438: LD_INT 2
35440: ARRAY
35441: EQUAL
35442: IFFALSE 35474
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35444: LD_ADDR_EXP 96
35448: PUSH
35449: LD_EXP 96
35453: PPUSH
35454: LD_VAR 0 5
35458: PPUSH
35459: CALL_OW 3
35463: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35464: CALL 35629 0 0
// exit ;
35468: POP
35469: POP
35470: GO 35624
// end else
35472: GO 35570
// if factory = factoryWaypoints [ i ] [ 2 ] then
35474: LD_VAR 0 1
35478: PUSH
35479: LD_EXP 96
35483: PUSH
35484: LD_VAR 0 5
35488: ARRAY
35489: PUSH
35490: LD_INT 2
35492: ARRAY
35493: EQUAL
35494: IFFALSE 35570
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35496: LD_ADDR_EXP 96
35500: PUSH
35501: LD_EXP 96
35505: PPUSH
35506: LD_VAR 0 5
35510: PPUSH
35511: CALL_OW 3
35515: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35516: LD_ADDR_EXP 96
35520: PUSH
35521: LD_EXP 96
35525: PPUSH
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 255
35535: PUSH
35536: LD_VAR 0 1
35540: PUSH
35541: LD_VAR 0 2
35545: PUSH
35546: LD_VAR 0 3
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: PPUSH
35557: CALL 81404 0 2
35561: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35562: CALL 35629 0 0
// exit ;
35566: POP
35567: POP
35568: GO 35624
// end ; end ;
35570: GO 35409
35572: POP
35573: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35574: LD_ADDR_EXP 96
35578: PUSH
35579: LD_EXP 96
35583: PPUSH
35584: LD_VAR 0 1
35588: PPUSH
35589: CALL_OW 255
35593: PUSH
35594: LD_VAR 0 1
35598: PUSH
35599: LD_VAR 0 2
35603: PUSH
35604: LD_VAR 0 3
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: PPUSH
35615: CALL 81404 0 2
35619: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35620: CALL 35629 0 0
// end ;
35624: LD_VAR 0 4
35628: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35629: LD_INT 0
35631: PPUSH
35632: PPUSH
35633: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35634: LD_STRING resetFactoryWaypoint();
35636: PPUSH
35637: CALL_OW 559
// if factoryWaypoints then
35641: LD_EXP 96
35645: IFFALSE 35766
// begin list := factoryWaypoints ;
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_EXP 96
35656: ST_TO_ADDR
// for i := 1 to list do
35657: LD_ADDR_VAR 0 2
35661: PUSH
35662: DOUBLE
35663: LD_INT 1
35665: DEC
35666: ST_TO_ADDR
35667: LD_VAR 0 3
35671: PUSH
35672: FOR_TO
35673: IFFALSE 35764
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35675: LD_STRING setFactoryWaypointXY(
35677: PUSH
35678: LD_VAR 0 3
35682: PUSH
35683: LD_VAR 0 2
35687: ARRAY
35688: PUSH
35689: LD_INT 1
35691: ARRAY
35692: STR
35693: PUSH
35694: LD_STRING ,
35696: STR
35697: PUSH
35698: LD_VAR 0 3
35702: PUSH
35703: LD_VAR 0 2
35707: ARRAY
35708: PUSH
35709: LD_INT 2
35711: ARRAY
35712: STR
35713: PUSH
35714: LD_STRING ,
35716: STR
35717: PUSH
35718: LD_VAR 0 3
35722: PUSH
35723: LD_VAR 0 2
35727: ARRAY
35728: PUSH
35729: LD_INT 3
35731: ARRAY
35732: STR
35733: PUSH
35734: LD_STRING ,
35736: STR
35737: PUSH
35738: LD_VAR 0 3
35742: PUSH
35743: LD_VAR 0 2
35747: ARRAY
35748: PUSH
35749: LD_INT 4
35751: ARRAY
35752: STR
35753: PUSH
35754: LD_STRING )
35756: STR
35757: PPUSH
35758: CALL_OW 559
35762: GO 35672
35764: POP
35765: POP
// end ; end ;
35766: LD_VAR 0 1
35770: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35771: LD_INT 0
35773: PPUSH
// if HexInfo ( x , y ) = warehouse then
35774: LD_VAR 0 2
35778: PPUSH
35779: LD_VAR 0 3
35783: PPUSH
35784: CALL_OW 428
35788: PUSH
35789: LD_VAR 0 1
35793: EQUAL
35794: IFFALSE 35821
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35796: LD_ADDR_EXP 98
35800: PUSH
35801: LD_EXP 98
35805: PPUSH
35806: LD_VAR 0 1
35810: PPUSH
35811: LD_INT 0
35813: PPUSH
35814: CALL_OW 1
35818: ST_TO_ADDR
35819: GO 35872
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35821: LD_ADDR_EXP 98
35825: PUSH
35826: LD_EXP 98
35830: PPUSH
35831: LD_VAR 0 1
35835: PPUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: CALL_OW 255
35845: PUSH
35846: LD_VAR 0 1
35850: PUSH
35851: LD_VAR 0 2
35855: PUSH
35856: LD_VAR 0 3
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: PPUSH
35867: CALL_OW 1
35871: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35872: CALL 35881 0 0
// end ;
35876: LD_VAR 0 4
35880: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35881: LD_INT 0
35883: PPUSH
35884: PPUSH
35885: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35886: LD_STRING resetWarehouseGatheringPoints();
35888: PPUSH
35889: CALL_OW 559
// if warehouseGatheringPoints then
35893: LD_EXP 98
35897: IFFALSE 36023
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35899: LD_ADDR_VAR 0 3
35903: PUSH
35904: LD_EXP 98
35908: PPUSH
35909: CALL 85338 0 1
35913: ST_TO_ADDR
// for i := 1 to list do
35914: LD_ADDR_VAR 0 2
35918: PUSH
35919: DOUBLE
35920: LD_INT 1
35922: DEC
35923: ST_TO_ADDR
35924: LD_VAR 0 3
35928: PUSH
35929: FOR_TO
35930: IFFALSE 36021
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35932: LD_STRING setWarehouseGatheringPointXY(
35934: PUSH
35935: LD_VAR 0 3
35939: PUSH
35940: LD_VAR 0 2
35944: ARRAY
35945: PUSH
35946: LD_INT 1
35948: ARRAY
35949: STR
35950: PUSH
35951: LD_STRING ,
35953: STR
35954: PUSH
35955: LD_VAR 0 3
35959: PUSH
35960: LD_VAR 0 2
35964: ARRAY
35965: PUSH
35966: LD_INT 2
35968: ARRAY
35969: STR
35970: PUSH
35971: LD_STRING ,
35973: STR
35974: PUSH
35975: LD_VAR 0 3
35979: PUSH
35980: LD_VAR 0 2
35984: ARRAY
35985: PUSH
35986: LD_INT 3
35988: ARRAY
35989: STR
35990: PUSH
35991: LD_STRING ,
35993: STR
35994: PUSH
35995: LD_VAR 0 3
35999: PUSH
36000: LD_VAR 0 2
36004: ARRAY
36005: PUSH
36006: LD_INT 4
36008: ARRAY
36009: STR
36010: PUSH
36011: LD_STRING )
36013: STR
36014: PPUSH
36015: CALL_OW 559
36019: GO 35929
36021: POP
36022: POP
// end ; end ;
36023: LD_VAR 0 1
36027: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36028: LD_EXP 98
36032: IFFALSE 36727
36034: GO 36036
36036: DISABLE
36037: LD_INT 0
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
// begin enable ;
36048: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36049: LD_ADDR_VAR 0 3
36053: PUSH
36054: LD_EXP 98
36058: PPUSH
36059: CALL 85338 0 1
36063: ST_TO_ADDR
// if not list then
36064: LD_VAR 0 3
36068: NOT
36069: IFFALSE 36073
// exit ;
36071: GO 36727
// for i := 1 to list do
36073: LD_ADDR_VAR 0 1
36077: PUSH
36078: DOUBLE
36079: LD_INT 1
36081: DEC
36082: ST_TO_ADDR
36083: LD_VAR 0 3
36087: PUSH
36088: FOR_TO
36089: IFFALSE 36725
// begin depot := list [ i ] [ 2 ] ;
36091: LD_ADDR_VAR 0 8
36095: PUSH
36096: LD_VAR 0 3
36100: PUSH
36101: LD_VAR 0 1
36105: ARRAY
36106: PUSH
36107: LD_INT 2
36109: ARRAY
36110: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36111: LD_ADDR_VAR 0 5
36115: PUSH
36116: LD_VAR 0 3
36120: PUSH
36121: LD_VAR 0 1
36125: ARRAY
36126: PUSH
36127: LD_INT 1
36129: ARRAY
36130: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36131: LD_VAR 0 8
36135: PPUSH
36136: CALL_OW 301
36140: IFTRUE 36159
36142: PUSH
36143: LD_VAR 0 5
36147: PUSH
36148: LD_VAR 0 8
36152: PPUSH
36153: CALL_OW 255
36157: NONEQUAL
36158: OR
36159: IFFALSE 36188
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36161: LD_ADDR_EXP 98
36165: PUSH
36166: LD_EXP 98
36170: PPUSH
36171: LD_VAR 0 8
36175: PPUSH
36176: LD_INT 0
36178: PPUSH
36179: CALL_OW 1
36183: ST_TO_ADDR
// exit ;
36184: POP
36185: POP
36186: GO 36727
// end ; x := list [ i ] [ 3 ] ;
36188: LD_ADDR_VAR 0 6
36192: PUSH
36193: LD_VAR 0 3
36197: PUSH
36198: LD_VAR 0 1
36202: ARRAY
36203: PUSH
36204: LD_INT 3
36206: ARRAY
36207: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36208: LD_ADDR_VAR 0 7
36212: PUSH
36213: LD_VAR 0 3
36217: PUSH
36218: LD_VAR 0 1
36222: ARRAY
36223: PUSH
36224: LD_INT 4
36226: ARRAY
36227: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36228: LD_ADDR_VAR 0 9
36232: PUSH
36233: LD_VAR 0 6
36237: PPUSH
36238: LD_VAR 0 7
36242: PPUSH
36243: LD_INT 16
36245: PPUSH
36246: CALL 83912 0 3
36250: ST_TO_ADDR
// if not cratesNearbyPoint then
36251: LD_VAR 0 9
36255: NOT
36256: IFFALSE 36262
// exit ;
36258: POP
36259: POP
36260: GO 36727
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36262: LD_ADDR_VAR 0 4
36266: PUSH
36267: LD_INT 22
36269: PUSH
36270: LD_VAR 0 5
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 3
36281: PUSH
36282: LD_INT 60
36284: PUSH
36285: EMPTY
36286: LIST
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 91
36294: PUSH
36295: LD_VAR 0 8
36299: PUSH
36300: LD_INT 6
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 2
36310: PUSH
36311: LD_INT 25
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 25
36323: PUSH
36324: LD_INT 16
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: LIST
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: PPUSH
36342: CALL_OW 69
36346: PUSH
36347: LD_VAR 0 8
36351: PPUSH
36352: CALL_OW 313
36356: PPUSH
36357: LD_INT 3
36359: PUSH
36360: LD_INT 60
36362: PUSH
36363: EMPTY
36364: LIST
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: LD_INT 25
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 25
36385: PUSH
36386: LD_INT 16
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: LIST
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PPUSH
36402: CALL_OW 72
36406: UNION
36407: ST_TO_ADDR
// if tmp then
36408: LD_VAR 0 4
36412: IFFALSE 36492
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36414: LD_ADDR_VAR 0 4
36418: PUSH
36419: LD_VAR 0 4
36423: PPUSH
36424: LD_INT 3
36426: PPUSH
36427: CALL 81719 0 2
36431: ST_TO_ADDR
// for j in tmp do
36432: LD_ADDR_VAR 0 2
36436: PUSH
36437: LD_VAR 0 4
36441: PUSH
36442: FOR_IN
36443: IFFALSE 36486
// begin if IsInUnit ( j ) then
36445: LD_VAR 0 2
36449: PPUSH
36450: CALL_OW 310
36454: IFFALSE 36465
// ComExit ( j ) ;
36456: LD_VAR 0 2
36460: PPUSH
36461: CALL 81802 0 1
// AddComCollect ( j , x , y ) ;
36465: LD_VAR 0 2
36469: PPUSH
36470: LD_VAR 0 6
36474: PPUSH
36475: LD_VAR 0 7
36479: PPUSH
36480: CALL_OW 177
// end ;
36484: GO 36442
36486: POP
36487: POP
// exit ;
36488: POP
36489: POP
36490: GO 36727
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36492: LD_ADDR_VAR 0 4
36496: PUSH
36497: LD_INT 22
36499: PUSH
36500: LD_VAR 0 5
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 91
36511: PUSH
36512: LD_VAR 0 8
36516: PUSH
36517: LD_INT 8
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: LD_INT 34
36530: PUSH
36531: LD_INT 12
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 34
36540: PUSH
36541: LD_INT 51
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 34
36550: PUSH
36551: LD_INT 32
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 34
36560: PUSH
36561: LD_INT 89
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: PPUSH
36580: CALL_OW 69
36584: ST_TO_ADDR
// if tmp then
36585: LD_VAR 0 4
36589: IFFALSE 36723
// begin for j in tmp do
36591: LD_ADDR_VAR 0 2
36595: PUSH
36596: LD_VAR 0 4
36600: PUSH
36601: FOR_IN
36602: IFFALSE 36721
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36604: LD_VAR 0 2
36608: PPUSH
36609: CALL_OW 262
36613: PUSH
36614: LD_INT 3
36616: EQUAL
36617: IFTRUE 36634
36619: PUSH
36620: LD_VAR 0 2
36624: PPUSH
36625: CALL_OW 261
36629: PUSH
36630: LD_INT 20
36632: GREATER
36633: OR
36634: IFFALSE 36648
36636: PUSH
36637: LD_VAR 0 2
36641: PPUSH
36642: CALL_OW 314
36646: NOT
36647: AND
36648: IFFALSE 36678
36650: PUSH
36651: LD_VAR 0 2
36655: PPUSH
36656: CALL_OW 263
36660: PUSH
36661: LD_INT 1
36663: NONEQUAL
36664: IFTRUE 36677
36666: PUSH
36667: LD_VAR 0 2
36671: PPUSH
36672: CALL_OW 311
36676: OR
36677: AND
36678: IFFALSE 36719
// begin ComCollect ( j , x , y ) ;
36680: LD_VAR 0 2
36684: PPUSH
36685: LD_VAR 0 6
36689: PPUSH
36690: LD_VAR 0 7
36694: PPUSH
36695: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36699: LD_VAR 0 2
36703: PPUSH
36704: LD_VAR 0 8
36708: PPUSH
36709: CALL_OW 172
// exit ;
36713: POP
36714: POP
36715: POP
36716: POP
36717: GO 36727
// end ;
36719: GO 36601
36721: POP
36722: POP
// end ; end ;
36723: GO 36088
36725: POP
36726: POP
// end ; end_of_file
36727: PPOPN 9
36729: END
// export function SOS_UnitDestroyed ( un ) ; begin
36730: LD_INT 0
36732: PPUSH
// ComRadiation ( un ) ;
36733: LD_VAR 0 1
36737: PPUSH
36738: CALL 37900 0 1
// end ;
36742: LD_VAR 0 2
36746: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36747: LD_INT 0
36749: PPUSH
// ComRadiation ( un ) ;
36750: LD_VAR 0 1
36754: PPUSH
36755: CALL 37900 0 1
// end ;
36759: LD_VAR 0 2
36763: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36764: LD_INT 0
36766: PPUSH
// end ;
36767: LD_VAR 0 4
36771: RET
// export function SOS_Command ( cmd ) ; begin
36772: LD_INT 0
36774: PPUSH
// end ;
36775: LD_VAR 0 2
36779: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36780: LD_INT 0
36782: PPUSH
// end ;
36783: LD_VAR 0 6
36787: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
36788: LD_INT 0
36790: PPUSH
36791: PPUSH
36792: PPUSH
36793: PPUSH
36794: PPUSH
// if not vehicle or not factory then
36795: LD_VAR 0 1
36799: NOT
36800: IFTRUE 36809
36802: PUSH
36803: LD_VAR 0 2
36807: NOT
36808: OR
36809: IFFALSE 36813
// exit ;
36811: GO 37475
// weapon := GetWeapon ( vehicle ) ;
36813: LD_ADDR_VAR 0 7
36817: PUSH
36818: LD_VAR 0 1
36822: PPUSH
36823: CALL_OW 264
36827: ST_TO_ADDR
// if weapon = ar_miner then
36828: LD_VAR 0 7
36832: PUSH
36833: LD_INT 81
36835: EQUAL
36836: IFFALSE 36893
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
36838: LD_ADDR_EXP 107
36842: PUSH
36843: LD_EXP 107
36847: PPUSH
36848: LD_EXP 107
36852: PUSH
36853: LD_INT 1
36855: PLUS
36856: PPUSH
36857: LD_VAR 0 1
36861: PPUSH
36862: CALL_OW 1
36866: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36867: LD_ADDR_EXP 108
36871: PUSH
36872: LD_EXP 108
36876: PPUSH
36877: LD_EXP 108
36881: PUSH
36882: LD_INT 1
36884: PLUS
36885: PPUSH
36886: EMPTY
36887: PPUSH
36888: CALL_OW 1
36892: ST_TO_ADDR
// end ; if not factoryWaypoints then
36893: LD_EXP 96
36897: NOT
36898: IFFALSE 36902
// exit ;
36900: GO 37475
// for i := 1 to Count ( factoryWaypoints ) do
36902: LD_ADDR_VAR 0 4
36906: PUSH
36907: DOUBLE
36908: LD_INT 1
36910: DEC
36911: ST_TO_ADDR
36912: LD_EXP 96
36916: PPUSH
36917: CALL 45428 0 1
36921: PUSH
36922: FOR_TO
36923: IFFALSE 37473
// if factoryWaypoints [ i ] [ 2 ] = factory then
36925: LD_EXP 96
36929: PUSH
36930: LD_VAR 0 4
36934: ARRAY
36935: PUSH
36936: LD_INT 2
36938: ARRAY
36939: PUSH
36940: LD_VAR 0 2
36944: EQUAL
36945: IFFALSE 37471
// begin if GetControl ( vehicle ) = control_manual then
36947: LD_VAR 0 1
36951: PPUSH
36952: CALL_OW 263
36956: PUSH
36957: LD_INT 1
36959: EQUAL
36960: IFFALSE 37324
// begin driver := IsDrivenBy ( vehicle ) ;
36962: LD_ADDR_VAR 0 5
36966: PUSH
36967: LD_VAR 0 1
36971: PPUSH
36972: CALL_OW 311
36976: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36977: LD_VAR 0 5
36981: PUSH
36982: LD_EXP 97
36986: IN
36987: IFTRUE 37001
36989: PUSH
36990: LD_VAR 0 1
36994: PUSH
36995: LD_EXP 97
36999: IN
37000: OR
37001: IFFALSE 37007
// exit ;
37003: POP
37004: POP
37005: GO 37475
// if not HasTask ( driver ) then
37007: LD_VAR 0 5
37011: PPUSH
37012: CALL_OW 314
37016: NOT
37017: IFFALSE 37322
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
37019: LD_ADDR_EXP 97
37023: PUSH
37024: LD_EXP 97
37028: PPUSH
37029: LD_VAR 0 5
37033: PPUSH
37034: CALL 81404 0 2
37038: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
37039: LD_ADDR_EXP 97
37043: PUSH
37044: LD_EXP 97
37048: PPUSH
37049: LD_VAR 0 1
37053: PPUSH
37054: CALL 81404 0 2
37058: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37059: LD_ADDR_VAR 0 6
37063: PUSH
37064: LD_EXP 96
37068: PUSH
37069: LD_VAR 0 4
37073: ARRAY
37074: PUSH
37075: LD_INT 3
37077: ARRAY
37078: PPUSH
37079: LD_EXP 96
37083: PUSH
37084: LD_VAR 0 4
37088: ARRAY
37089: PUSH
37090: LD_INT 4
37092: ARRAY
37093: PPUSH
37094: CALL_OW 428
37098: ST_TO_ADDR
// if hex then
37099: LD_VAR 0 6
37103: IFFALSE 37121
// ComMoveUnit ( driver , hex ) else
37105: LD_VAR 0 5
37109: PPUSH
37110: LD_VAR 0 6
37114: PPUSH
37115: CALL_OW 112
37119: GO 37205
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
37121: LD_VAR 0 1
37125: PPUSH
37126: LD_EXP 96
37130: PUSH
37131: LD_VAR 0 4
37135: ARRAY
37136: PUSH
37137: LD_INT 3
37139: ARRAY
37140: PPUSH
37141: LD_EXP 96
37145: PUSH
37146: LD_VAR 0 4
37150: ARRAY
37151: PUSH
37152: LD_INT 4
37154: ARRAY
37155: PPUSH
37156: CALL_OW 297
37160: PUSH
37161: LD_INT 0
37163: GREATER
37164: IFFALSE 37205
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37166: LD_VAR 0 5
37170: PPUSH
37171: LD_EXP 96
37175: PUSH
37176: LD_VAR 0 4
37180: ARRAY
37181: PUSH
37182: LD_INT 3
37184: ARRAY
37185: PPUSH
37186: LD_EXP 96
37190: PUSH
37191: LD_VAR 0 4
37195: ARRAY
37196: PUSH
37197: LD_INT 4
37199: ARRAY
37200: PPUSH
37201: CALL_OW 111
// AddComExitVehicle ( driver ) ;
37205: LD_VAR 0 5
37209: PPUSH
37210: CALL_OW 181
// if Multiplayer then
37214: LD_OWVAR 4
37218: IFFALSE 37267
// begin repeat wait ( 10 ) ;
37220: LD_INT 10
37222: PPUSH
37223: CALL_OW 67
// until not IsInUnit ( driver ) ;
37227: LD_VAR 0 5
37231: PPUSH
37232: CALL_OW 310
37236: NOT
37237: IFFALSE 37220
// if not HasTask ( driver ) then
37239: LD_VAR 0 5
37243: PPUSH
37244: CALL_OW 314
37248: NOT
37249: IFFALSE 37265
// ComEnterUnit ( driver , factory ) ;
37251: LD_VAR 0 5
37255: PPUSH
37256: LD_VAR 0 2
37260: PPUSH
37261: CALL_OW 120
// end else
37265: GO 37281
// AddComEnterUnit ( driver , factory ) ;
37267: LD_VAR 0 5
37271: PPUSH
37272: LD_VAR 0 2
37276: PPUSH
37277: CALL_OW 180
// wait ( 0 0$1 ) ;
37281: LD_INT 35
37283: PPUSH
37284: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
37288: LD_ADDR_EXP 97
37292: PUSH
37293: LD_EXP 97
37297: PUSH
37298: LD_VAR 0 5
37302: DIFF
37303: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
37304: LD_ADDR_EXP 97
37308: PUSH
37309: LD_EXP 97
37313: PUSH
37314: LD_VAR 0 1
37318: DIFF
37319: ST_TO_ADDR
// break ;
37320: GO 37473
// end ; end else
37322: GO 37471
// if GetControl ( vehicle ) = control_remote then
37324: LD_VAR 0 1
37328: PPUSH
37329: CALL_OW 263
37333: PUSH
37334: LD_INT 2
37336: EQUAL
37337: IFFALSE 37423
// begin wait ( 0 0$2 ) ;
37339: LD_INT 70
37341: PPUSH
37342: CALL_OW 67
// repeat wait ( 10 ) ;
37346: LD_INT 10
37348: PPUSH
37349: CALL_OW 67
// Connect ( vehicle ) ;
37353: LD_VAR 0 1
37357: PPUSH
37358: CALL 51706 0 1
// until IsControledBy ( vehicle ) ;
37362: LD_VAR 0 1
37366: PPUSH
37367: CALL_OW 312
37371: IFFALSE 37346
// wait ( 10 ) ;
37373: LD_INT 10
37375: PPUSH
37376: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37380: LD_VAR 0 1
37384: PPUSH
37385: LD_EXP 96
37389: PUSH
37390: LD_VAR 0 4
37394: ARRAY
37395: PUSH
37396: LD_INT 3
37398: ARRAY
37399: PPUSH
37400: LD_EXP 96
37404: PUSH
37405: LD_VAR 0 4
37409: ARRAY
37410: PUSH
37411: LD_INT 4
37413: ARRAY
37414: PPUSH
37415: CALL_OW 111
// break ;
37419: GO 37473
// end else
37421: GO 37471
// begin wait ( 0 0$3 ) ;
37423: LD_INT 105
37425: PPUSH
37426: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37430: LD_VAR 0 1
37434: PPUSH
37435: LD_EXP 96
37439: PUSH
37440: LD_VAR 0 4
37444: ARRAY
37445: PUSH
37446: LD_INT 3
37448: ARRAY
37449: PPUSH
37450: LD_EXP 96
37454: PUSH
37455: LD_VAR 0 4
37459: ARRAY
37460: PUSH
37461: LD_INT 4
37463: ARRAY
37464: PPUSH
37465: CALL_OW 111
// break ;
37469: GO 37473
// end ; end ;
37471: GO 36922
37473: POP
37474: POP
// end ;
37475: LD_VAR 0 3
37479: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37480: LD_INT 0
37482: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37483: LD_VAR 0 1
37487: PUSH
37488: LD_INT 250
37490: EQUAL
37491: IFFALSE 37508
37493: PUSH
37494: LD_VAR 0 2
37498: PPUSH
37499: CALL_OW 264
37503: PUSH
37504: LD_INT 81
37506: EQUAL
37507: AND
37508: IFFALSE 37529
// MinerPlaceMine ( unit , x , y ) ;
37510: LD_VAR 0 2
37514: PPUSH
37515: LD_VAR 0 4
37519: PPUSH
37520: LD_VAR 0 5
37524: PPUSH
37525: CALL 40875 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37529: LD_VAR 0 1
37533: PUSH
37534: LD_INT 251
37536: EQUAL
37537: IFFALSE 37554
37539: PUSH
37540: LD_VAR 0 2
37544: PPUSH
37545: CALL_OW 264
37549: PUSH
37550: LD_INT 81
37552: EQUAL
37553: AND
37554: IFFALSE 37575
// MinerDetonateMine ( unit , x , y ) ;
37556: LD_VAR 0 2
37560: PPUSH
37561: LD_VAR 0 4
37565: PPUSH
37566: LD_VAR 0 5
37570: PPUSH
37571: CALL 41282 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37575: LD_VAR 0 1
37579: PUSH
37580: LD_INT 252
37582: EQUAL
37583: IFFALSE 37600
37585: PUSH
37586: LD_VAR 0 2
37590: PPUSH
37591: CALL_OW 264
37595: PUSH
37596: LD_INT 81
37598: EQUAL
37599: AND
37600: IFFALSE 37621
// MinerCreateMinefield ( unit , x , y ) ;
37602: LD_VAR 0 2
37606: PPUSH
37607: LD_VAR 0 4
37611: PPUSH
37612: LD_VAR 0 5
37616: PPUSH
37617: CALL 41514 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37621: LD_VAR 0 1
37625: PUSH
37626: LD_INT 253
37628: EQUAL
37629: IFFALSE 37646
37631: PUSH
37632: LD_VAR 0 2
37636: PPUSH
37637: CALL_OW 257
37641: PUSH
37642: LD_INT 5
37644: EQUAL
37645: AND
37646: IFFALSE 37667
// ComBinocular ( unit , x , y ) ;
37648: LD_VAR 0 2
37652: PPUSH
37653: LD_VAR 0 4
37657: PPUSH
37658: LD_VAR 0 5
37662: PPUSH
37663: CALL 41889 0 3
// if selectedUnit then
37667: LD_VAR 0 3
37671: IFFALSE 37731
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37673: LD_VAR 0 1
37677: PUSH
37678: LD_INT 254
37680: EQUAL
37681: IFFALSE 37698
37683: PUSH
37684: LD_VAR 0 2
37688: PPUSH
37689: CALL_OW 264
37693: PUSH
37694: LD_INT 99
37696: EQUAL
37697: AND
37698: IFFALSE 37715
37700: PUSH
37701: LD_VAR 0 3
37705: PPUSH
37706: CALL_OW 263
37710: PUSH
37711: LD_INT 3
37713: EQUAL
37714: AND
37715: IFFALSE 37731
// HackDestroyVehicle ( unit , selectedUnit ) ;
37717: LD_VAR 0 2
37721: PPUSH
37722: LD_VAR 0 3
37726: PPUSH
37727: CALL 40065 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37731: LD_VAR 0 1
37735: PUSH
37736: LD_INT 255
37738: EQUAL
37739: IFFALSE 37763
37741: PUSH
37742: LD_VAR 0 2
37746: PPUSH
37747: CALL_OW 264
37751: PUSH
37752: LD_INT 14
37754: PUSH
37755: LD_INT 53
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: IN
37762: AND
37763: IFFALSE 37781
37765: PUSH
37766: LD_VAR 0 4
37770: PPUSH
37771: LD_VAR 0 5
37775: PPUSH
37776: CALL_OW 488
37780: AND
37781: IFFALSE 37805
// CutTreeXYR ( unit , x , y , 12 ) ;
37783: LD_VAR 0 2
37787: PPUSH
37788: LD_VAR 0 4
37792: PPUSH
37793: LD_VAR 0 5
37797: PPUSH
37798: LD_INT 12
37800: PPUSH
37801: CALL 37996 0 4
// if cmd = 256 then
37805: LD_VAR 0 1
37809: PUSH
37810: LD_INT 256
37812: EQUAL
37813: IFFALSE 37834
// SetFactoryWaypoint ( unit , x , y ) ;
37815: LD_VAR 0 2
37819: PPUSH
37820: LD_VAR 0 4
37824: PPUSH
37825: LD_VAR 0 5
37829: PPUSH
37830: CALL 35275 0 3
// if cmd = 257 then
37834: LD_VAR 0 1
37838: PUSH
37839: LD_INT 257
37841: EQUAL
37842: IFFALSE 37863
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37844: LD_VAR 0 2
37848: PPUSH
37849: LD_VAR 0 4
37853: PPUSH
37854: LD_VAR 0 5
37858: PPUSH
37859: CALL 35771 0 3
// if cmd = 258 then
37863: LD_VAR 0 1
37867: PUSH
37868: LD_INT 258
37870: EQUAL
37871: IFFALSE 37895
// BurnTreeXYR ( unit , x , y , 8 ) ;
37873: LD_VAR 0 2
37877: PPUSH
37878: LD_VAR 0 4
37882: PPUSH
37883: LD_VAR 0 5
37887: PPUSH
37888: LD_INT 8
37890: PPUSH
37891: CALL 38418 0 4
// end ;
37895: LD_VAR 0 6
37899: RET
// export function ComRadiation ( un ) ; var eff ; begin
37900: LD_INT 0
37902: PPUSH
37903: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37904: LD_VAR 0 1
37908: PPUSH
37909: CALL_OW 264
37913: PUSH
37914: LD_INT 91
37916: NONEQUAL
37917: IFFALSE 37921
// exit ;
37919: GO 37991
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37921: LD_INT 68
37923: PPUSH
37924: LD_VAR 0 1
37928: PPUSH
37929: CALL_OW 255
37933: PPUSH
37934: CALL_OW 321
37938: PUSH
37939: LD_INT 2
37941: EQUAL
37942: IFFALSE 37954
// eff := 50 else
37944: LD_ADDR_VAR 0 3
37948: PUSH
37949: LD_INT 50
37951: ST_TO_ADDR
37952: GO 37962
// eff := 25 ;
37954: LD_ADDR_VAR 0 3
37958: PUSH
37959: LD_INT 25
37961: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37962: LD_VAR 0 1
37966: PPUSH
37967: CALL_OW 250
37971: PPUSH
37972: LD_VAR 0 1
37976: PPUSH
37977: CALL_OW 251
37981: PPUSH
37982: LD_VAR 0 3
37986: PPUSH
37987: CALL_OW 495
// end ;
37991: LD_VAR 0 2
37995: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37996: LD_INT 0
37998: PPUSH
37999: PPUSH
38000: PPUSH
38001: PPUSH
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
38006: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 302
38016: NOT
38017: IFTRUE 38036
38019: PUSH
38020: LD_VAR 0 2
38024: PPUSH
38025: LD_VAR 0 3
38029: PPUSH
38030: CALL_OW 488
38034: NOT
38035: OR
38036: IFTRUE 38045
38038: PUSH
38039: LD_VAR 0 4
38043: NOT
38044: OR
38045: IFFALSE 38049
// exit ;
38047: GO 38413
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
38049: LD_VAR 0 1
38053: PPUSH
38054: CALL_OW 437
38058: PPUSH
38059: CALL 45428 0 1
38063: PUSH
38064: LD_INT 10
38066: GREATER
38067: IFFALSE 38071
// exit ;
38069: GO 38413
// list := [ ] ;
38071: LD_ADDR_VAR 0 13
38075: PUSH
38076: EMPTY
38077: ST_TO_ADDR
// if x - r < 0 then
38078: LD_VAR 0 2
38082: PUSH
38083: LD_VAR 0 4
38087: MINUS
38088: PUSH
38089: LD_INT 0
38091: LESS
38092: IFFALSE 38104
// min_x := 0 else
38094: LD_ADDR_VAR 0 7
38098: PUSH
38099: LD_INT 0
38101: ST_TO_ADDR
38102: GO 38120
// min_x := x - r ;
38104: LD_ADDR_VAR 0 7
38108: PUSH
38109: LD_VAR 0 2
38113: PUSH
38114: LD_VAR 0 4
38118: MINUS
38119: ST_TO_ADDR
// if y - r < 0 then
38120: LD_VAR 0 3
38124: PUSH
38125: LD_VAR 0 4
38129: MINUS
38130: PUSH
38131: LD_INT 0
38133: LESS
38134: IFFALSE 38146
// min_y := 0 else
38136: LD_ADDR_VAR 0 8
38140: PUSH
38141: LD_INT 0
38143: ST_TO_ADDR
38144: GO 38162
// min_y := y - r ;
38146: LD_ADDR_VAR 0 8
38150: PUSH
38151: LD_VAR 0 3
38155: PUSH
38156: LD_VAR 0 4
38160: MINUS
38161: ST_TO_ADDR
// max_x := x + r ;
38162: LD_ADDR_VAR 0 9
38166: PUSH
38167: LD_VAR 0 2
38171: PUSH
38172: LD_VAR 0 4
38176: PLUS
38177: ST_TO_ADDR
// max_y := y + r ;
38178: LD_ADDR_VAR 0 10
38182: PUSH
38183: LD_VAR 0 3
38187: PUSH
38188: LD_VAR 0 4
38192: PLUS
38193: ST_TO_ADDR
// for _x = min_x to max_x do
38194: LD_ADDR_VAR 0 11
38198: PUSH
38199: DOUBLE
38200: LD_VAR 0 7
38204: DEC
38205: ST_TO_ADDR
38206: LD_VAR 0 9
38210: PUSH
38211: FOR_TO
38212: IFFALSE 38331
// for _y = min_y to max_y do
38214: LD_ADDR_VAR 0 12
38218: PUSH
38219: DOUBLE
38220: LD_VAR 0 8
38224: DEC
38225: ST_TO_ADDR
38226: LD_VAR 0 10
38230: PUSH
38231: FOR_TO
38232: IFFALSE 38327
// begin if not ValidHex ( _x , _y ) then
38234: LD_VAR 0 11
38238: PPUSH
38239: LD_VAR 0 12
38243: PPUSH
38244: CALL_OW 488
38248: NOT
38249: IFFALSE 38253
// continue ;
38251: GO 38231
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38253: LD_VAR 0 11
38257: PPUSH
38258: LD_VAR 0 12
38262: PPUSH
38263: CALL_OW 351
38267: IFFALSE 38285
38269: PUSH
38270: LD_VAR 0 11
38274: PPUSH
38275: LD_VAR 0 12
38279: PPUSH
38280: CALL_OW 554
38284: AND
38285: IFFALSE 38325
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38287: LD_ADDR_VAR 0 13
38291: PUSH
38292: LD_VAR 0 13
38296: PPUSH
38297: LD_VAR 0 13
38301: PUSH
38302: LD_INT 1
38304: PLUS
38305: PPUSH
38306: LD_VAR 0 11
38310: PUSH
38311: LD_VAR 0 12
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PPUSH
38320: CALL_OW 2
38324: ST_TO_ADDR
// end ;
38325: GO 38231
38327: POP
38328: POP
38329: GO 38211
38331: POP
38332: POP
// if not list then
38333: LD_VAR 0 13
38337: NOT
38338: IFFALSE 38342
// exit ;
38340: GO 38413
// for i in list do
38342: LD_ADDR_VAR 0 6
38346: PUSH
38347: LD_VAR 0 13
38351: PUSH
38352: FOR_IN
38353: IFFALSE 38411
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38355: LD_VAR 0 1
38359: PPUSH
38360: LD_STRING M
38362: PUSH
38363: LD_VAR 0 6
38367: PUSH
38368: LD_INT 1
38370: ARRAY
38371: PUSH
38372: LD_VAR 0 6
38376: PUSH
38377: LD_INT 2
38379: ARRAY
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: PPUSH
38405: CALL_OW 447
38409: GO 38352
38411: POP
38412: POP
// end ;
38413: LD_VAR 0 5
38417: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38418: LD_INT 0
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
38427: PPUSH
38428: PPUSH
38429: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38430: LD_VAR 0 1
38434: PPUSH
38435: CALL_OW 302
38439: NOT
38440: IFTRUE 38459
38442: PUSH
38443: LD_VAR 0 2
38447: PPUSH
38448: LD_VAR 0 3
38452: PPUSH
38453: CALL_OW 488
38457: NOT
38458: OR
38459: IFTRUE 38468
38461: PUSH
38462: LD_VAR 0 4
38466: NOT
38467: OR
38468: IFFALSE 38472
// exit ;
38470: GO 39011
// if Count ( GetTaskList ( flame ) ) > 10 then
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 437
38481: PPUSH
38482: CALL 45428 0 1
38486: PUSH
38487: LD_INT 10
38489: GREATER
38490: IFFALSE 38494
// exit ;
38492: GO 39011
// list := [ ] ;
38494: LD_ADDR_VAR 0 13
38498: PUSH
38499: EMPTY
38500: ST_TO_ADDR
// if x - r < 0 then
38501: LD_VAR 0 2
38505: PUSH
38506: LD_VAR 0 4
38510: MINUS
38511: PUSH
38512: LD_INT 0
38514: LESS
38515: IFFALSE 38527
// min_x := 0 else
38517: LD_ADDR_VAR 0 7
38521: PUSH
38522: LD_INT 0
38524: ST_TO_ADDR
38525: GO 38543
// min_x := x - r ;
38527: LD_ADDR_VAR 0 7
38531: PUSH
38532: LD_VAR 0 2
38536: PUSH
38537: LD_VAR 0 4
38541: MINUS
38542: ST_TO_ADDR
// if y - r < 0 then
38543: LD_VAR 0 3
38547: PUSH
38548: LD_VAR 0 4
38552: MINUS
38553: PUSH
38554: LD_INT 0
38556: LESS
38557: IFFALSE 38569
// min_y := 0 else
38559: LD_ADDR_VAR 0 8
38563: PUSH
38564: LD_INT 0
38566: ST_TO_ADDR
38567: GO 38585
// min_y := y - r ;
38569: LD_ADDR_VAR 0 8
38573: PUSH
38574: LD_VAR 0 3
38578: PUSH
38579: LD_VAR 0 4
38583: MINUS
38584: ST_TO_ADDR
// max_x := x + r ;
38585: LD_ADDR_VAR 0 9
38589: PUSH
38590: LD_VAR 0 2
38594: PUSH
38595: LD_VAR 0 4
38599: PLUS
38600: ST_TO_ADDR
// max_y := y + r ;
38601: LD_ADDR_VAR 0 10
38605: PUSH
38606: LD_VAR 0 3
38610: PUSH
38611: LD_VAR 0 4
38615: PLUS
38616: ST_TO_ADDR
// for _x = min_x to max_x do
38617: LD_ADDR_VAR 0 11
38621: PUSH
38622: DOUBLE
38623: LD_VAR 0 7
38627: DEC
38628: ST_TO_ADDR
38629: LD_VAR 0 9
38633: PUSH
38634: FOR_TO
38635: IFFALSE 38754
// for _y = min_y to max_y do
38637: LD_ADDR_VAR 0 12
38641: PUSH
38642: DOUBLE
38643: LD_VAR 0 8
38647: DEC
38648: ST_TO_ADDR
38649: LD_VAR 0 10
38653: PUSH
38654: FOR_TO
38655: IFFALSE 38750
// begin if not ValidHex ( _x , _y ) then
38657: LD_VAR 0 11
38661: PPUSH
38662: LD_VAR 0 12
38666: PPUSH
38667: CALL_OW 488
38671: NOT
38672: IFFALSE 38676
// continue ;
38674: GO 38654
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38676: LD_VAR 0 11
38680: PPUSH
38681: LD_VAR 0 12
38685: PPUSH
38686: CALL_OW 351
38690: IFFALSE 38708
38692: PUSH
38693: LD_VAR 0 11
38697: PPUSH
38698: LD_VAR 0 12
38702: PPUSH
38703: CALL_OW 554
38707: AND
38708: IFFALSE 38748
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38710: LD_ADDR_VAR 0 13
38714: PUSH
38715: LD_VAR 0 13
38719: PPUSH
38720: LD_VAR 0 13
38724: PUSH
38725: LD_INT 1
38727: PLUS
38728: PPUSH
38729: LD_VAR 0 11
38733: PUSH
38734: LD_VAR 0 12
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PPUSH
38743: CALL_OW 2
38747: ST_TO_ADDR
// end ;
38748: GO 38654
38750: POP
38751: POP
38752: GO 38634
38754: POP
38755: POP
// if not list then
38756: LD_VAR 0 13
38760: NOT
38761: IFFALSE 38765
// exit ;
38763: GO 39011
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38765: LD_ADDR_VAR 0 13
38769: PUSH
38770: LD_VAR 0 1
38774: PPUSH
38775: LD_VAR 0 13
38779: PPUSH
38780: LD_INT 1
38782: PPUSH
38783: LD_INT 1
38785: PPUSH
38786: CALL 48834 0 4
38790: ST_TO_ADDR
// ComStop ( flame ) ;
38791: LD_VAR 0 1
38795: PPUSH
38796: CALL_OW 141
// for i in list do
38800: LD_ADDR_VAR 0 6
38804: PUSH
38805: LD_VAR 0 13
38809: PUSH
38810: FOR_IN
38811: IFFALSE 38842
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38813: LD_VAR 0 1
38817: PPUSH
38818: LD_VAR 0 6
38822: PUSH
38823: LD_INT 1
38825: ARRAY
38826: PPUSH
38827: LD_VAR 0 6
38831: PUSH
38832: LD_INT 2
38834: ARRAY
38835: PPUSH
38836: CALL_OW 176
38840: GO 38810
38842: POP
38843: POP
// repeat wait ( 0 0$1 ) ;
38844: LD_INT 35
38846: PPUSH
38847: CALL_OW 67
// task := GetTaskList ( flame ) ;
38851: LD_ADDR_VAR 0 14
38855: PUSH
38856: LD_VAR 0 1
38860: PPUSH
38861: CALL_OW 437
38865: ST_TO_ADDR
// if not task then
38866: LD_VAR 0 14
38870: NOT
38871: IFFALSE 38875
// exit ;
38873: GO 39011
// if task [ 1 ] [ 1 ] <> | then
38875: LD_VAR 0 14
38879: PUSH
38880: LD_INT 1
38882: ARRAY
38883: PUSH
38884: LD_INT 1
38886: ARRAY
38887: PUSH
38888: LD_STRING |
38890: NONEQUAL
38891: IFFALSE 38895
// exit ;
38893: GO 39011
// _x := task [ 1 ] [ 2 ] ;
38895: LD_ADDR_VAR 0 11
38899: PUSH
38900: LD_VAR 0 14
38904: PUSH
38905: LD_INT 1
38907: ARRAY
38908: PUSH
38909: LD_INT 2
38911: ARRAY
38912: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38913: LD_ADDR_VAR 0 12
38917: PUSH
38918: LD_VAR 0 14
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PUSH
38927: LD_INT 3
38929: ARRAY
38930: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38931: LD_VAR 0 11
38935: PPUSH
38936: LD_VAR 0 12
38940: PPUSH
38941: CALL_OW 351
38945: NOT
38946: IFTRUE 38965
38948: PUSH
38949: LD_VAR 0 11
38953: PPUSH
38954: LD_VAR 0 12
38958: PPUSH
38959: CALL_OW 554
38963: NOT
38964: OR
38965: IFFALSE 38999
// begin task := Delete ( task , 1 ) ;
38967: LD_ADDR_VAR 0 14
38971: PUSH
38972: LD_VAR 0 14
38976: PPUSH
38977: LD_INT 1
38979: PPUSH
38980: CALL_OW 3
38984: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38985: LD_VAR 0 1
38989: PPUSH
38990: LD_VAR 0 14
38994: PPUSH
38995: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38999: LD_VAR 0 1
39003: PPUSH
39004: CALL_OW 314
39008: NOT
39009: IFFALSE 38844
// end ;
39011: LD_VAR 0 5
39015: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
39016: LD_EXP 100
39020: NOT
39021: IFFALSE 39071
39023: GO 39025
39025: DISABLE
// begin initHack := true ;
39026: LD_ADDR_EXP 100
39030: PUSH
39031: LD_INT 1
39033: ST_TO_ADDR
// hackTanks := [ ] ;
39034: LD_ADDR_EXP 101
39038: PUSH
39039: EMPTY
39040: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39041: LD_ADDR_EXP 102
39045: PUSH
39046: EMPTY
39047: ST_TO_ADDR
// hackLimit := 3 ;
39048: LD_ADDR_EXP 103
39052: PUSH
39053: LD_INT 3
39055: ST_TO_ADDR
// hackDist := 12 ;
39056: LD_ADDR_EXP 104
39060: PUSH
39061: LD_INT 12
39063: ST_TO_ADDR
// hackCounter := [ ] ;
39064: LD_ADDR_EXP 105
39068: PUSH
39069: EMPTY
39070: ST_TO_ADDR
// end ;
39071: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39072: LD_EXP 100
39076: IFFALSE 39094
39078: PUSH
39079: LD_INT 34
39081: PUSH
39082: LD_INT 99
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PPUSH
39089: CALL_OW 69
39093: AND
39094: IFFALSE 39347
39096: GO 39098
39098: DISABLE
39099: LD_INT 0
39101: PPUSH
39102: PPUSH
// begin enable ;
39103: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39104: LD_ADDR_VAR 0 1
39108: PUSH
39109: LD_INT 34
39111: PUSH
39112: LD_INT 99
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PPUSH
39119: CALL_OW 69
39123: PUSH
39124: FOR_IN
39125: IFFALSE 39345
// begin if not i in hackTanks then
39127: LD_VAR 0 1
39131: PUSH
39132: LD_EXP 101
39136: IN
39137: NOT
39138: IFFALSE 39221
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39140: LD_ADDR_EXP 101
39144: PUSH
39145: LD_EXP 101
39149: PPUSH
39150: LD_EXP 101
39154: PUSH
39155: LD_INT 1
39157: PLUS
39158: PPUSH
39159: LD_VAR 0 1
39163: PPUSH
39164: CALL_OW 1
39168: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39169: LD_ADDR_EXP 102
39173: PUSH
39174: LD_EXP 102
39178: PPUSH
39179: LD_EXP 102
39183: PUSH
39184: LD_INT 1
39186: PLUS
39187: PPUSH
39188: EMPTY
39189: PPUSH
39190: CALL_OW 1
39194: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39195: LD_ADDR_EXP 105
39199: PUSH
39200: LD_EXP 105
39204: PPUSH
39205: LD_EXP 105
39209: PUSH
39210: LD_INT 1
39212: PLUS
39213: PPUSH
39214: EMPTY
39215: PPUSH
39216: CALL_OW 1
39220: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39221: LD_VAR 0 1
39225: PPUSH
39226: CALL_OW 302
39230: NOT
39231: IFFALSE 39244
// begin HackUnlinkAll ( i ) ;
39233: LD_VAR 0 1
39237: PPUSH
39238: CALL 39350 0 1
// continue ;
39242: GO 39124
// end ; HackCheckCapturedStatus ( i ) ;
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL 39795 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39253: LD_ADDR_VAR 0 2
39257: PUSH
39258: LD_INT 81
39260: PUSH
39261: LD_VAR 0 1
39265: PPUSH
39266: CALL_OW 255
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 33
39277: PUSH
39278: LD_INT 3
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 91
39287: PUSH
39288: LD_VAR 0 1
39292: PUSH
39293: LD_EXP 104
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 50
39305: PUSH
39306: EMPTY
39307: LIST
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: PPUSH
39315: CALL_OW 69
39319: ST_TO_ADDR
// if not tmp then
39320: LD_VAR 0 2
39324: NOT
39325: IFFALSE 39329
// continue ;
39327: GO 39124
// HackLink ( i , tmp ) ;
39329: LD_VAR 0 1
39333: PPUSH
39334: LD_VAR 0 2
39338: PPUSH
39339: CALL 39486 0 2
// end ;
39343: GO 39124
39345: POP
39346: POP
// end ;
39347: PPOPN 2
39349: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39350: LD_INT 0
39352: PPUSH
39353: PPUSH
39354: PPUSH
// if not hack in hackTanks then
39355: LD_VAR 0 1
39359: PUSH
39360: LD_EXP 101
39364: IN
39365: NOT
39366: IFFALSE 39370
// exit ;
39368: GO 39481
// index := GetElementIndex ( hackTanks , hack ) ;
39370: LD_ADDR_VAR 0 4
39374: PUSH
39375: LD_EXP 101
39379: PPUSH
39380: LD_VAR 0 1
39384: PPUSH
39385: CALL 48129 0 2
39389: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39390: LD_EXP 102
39394: PUSH
39395: LD_VAR 0 4
39399: ARRAY
39400: IFFALSE 39481
// begin for i in hackTanksCaptured [ index ] do
39402: LD_ADDR_VAR 0 3
39406: PUSH
39407: LD_EXP 102
39411: PUSH
39412: LD_VAR 0 4
39416: ARRAY
39417: PUSH
39418: FOR_IN
39419: IFFALSE 39445
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39421: LD_VAR 0 3
39425: PUSH
39426: LD_INT 1
39428: ARRAY
39429: PPUSH
39430: LD_VAR 0 3
39434: PUSH
39435: LD_INT 2
39437: ARRAY
39438: PPUSH
39439: CALL_OW 235
39443: GO 39418
39445: POP
39446: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39447: LD_ADDR_EXP 102
39451: PUSH
39452: LD_EXP 102
39456: PPUSH
39457: LD_VAR 0 4
39461: PPUSH
39462: EMPTY
39463: PPUSH
39464: CALL_OW 1
39468: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39469: LD_VAR 0 1
39473: PPUSH
39474: LD_INT 0
39476: PPUSH
39477: CALL_OW 505
// end ; end ;
39481: LD_VAR 0 2
39485: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39486: LD_INT 0
39488: PPUSH
39489: PPUSH
39490: PPUSH
// if not hack in hackTanks or not vehicles then
39491: LD_VAR 0 1
39495: PUSH
39496: LD_EXP 101
39500: IN
39501: NOT
39502: IFTRUE 39511
39504: PUSH
39505: LD_VAR 0 2
39509: NOT
39510: OR
39511: IFFALSE 39515
// exit ;
39513: GO 39790
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39515: LD_ADDR_VAR 0 2
39519: PUSH
39520: LD_VAR 0 1
39524: PPUSH
39525: LD_VAR 0 2
39529: PPUSH
39530: LD_INT 1
39532: PPUSH
39533: LD_INT 1
39535: PPUSH
39536: CALL 48781 0 4
39540: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39541: LD_ADDR_VAR 0 5
39545: PUSH
39546: LD_EXP 101
39550: PPUSH
39551: LD_VAR 0 1
39555: PPUSH
39556: CALL 48129 0 2
39560: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39561: LD_EXP 102
39565: PUSH
39566: LD_VAR 0 5
39570: ARRAY
39571: PUSH
39572: LD_EXP 103
39576: LESS
39577: IFFALSE 39766
// begin for i := 1 to vehicles do
39579: LD_ADDR_VAR 0 4
39583: PUSH
39584: DOUBLE
39585: LD_INT 1
39587: DEC
39588: ST_TO_ADDR
39589: LD_VAR 0 2
39593: PUSH
39594: FOR_TO
39595: IFFALSE 39764
// begin if hackTanksCaptured [ index ] = hackLimit then
39597: LD_EXP 102
39601: PUSH
39602: LD_VAR 0 5
39606: ARRAY
39607: PUSH
39608: LD_EXP 103
39612: EQUAL
39613: IFFALSE 39617
// break ;
39615: GO 39764
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39617: LD_ADDR_EXP 105
39621: PUSH
39622: LD_EXP 105
39626: PPUSH
39627: LD_VAR 0 5
39631: PPUSH
39632: LD_EXP 105
39636: PUSH
39637: LD_VAR 0 5
39641: ARRAY
39642: PUSH
39643: LD_INT 1
39645: PLUS
39646: PPUSH
39647: CALL_OW 1
39651: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39652: LD_ADDR_EXP 102
39656: PUSH
39657: LD_EXP 102
39661: PPUSH
39662: LD_VAR 0 5
39666: PUSH
39667: LD_EXP 102
39671: PUSH
39672: LD_VAR 0 5
39676: ARRAY
39677: PUSH
39678: LD_INT 1
39680: PLUS
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PPUSH
39686: LD_VAR 0 2
39690: PUSH
39691: LD_VAR 0 4
39695: ARRAY
39696: PUSH
39697: LD_VAR 0 2
39701: PUSH
39702: LD_VAR 0 4
39706: ARRAY
39707: PPUSH
39708: CALL_OW 255
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PPUSH
39717: CALL 48346 0 3
39721: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39722: LD_VAR 0 2
39726: PUSH
39727: LD_VAR 0 4
39731: ARRAY
39732: PPUSH
39733: LD_VAR 0 1
39737: PPUSH
39738: CALL_OW 255
39742: PPUSH
39743: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39747: LD_VAR 0 2
39751: PUSH
39752: LD_VAR 0 4
39756: ARRAY
39757: PPUSH
39758: CALL_OW 141
// end ;
39762: GO 39594
39764: POP
39765: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39766: LD_VAR 0 1
39770: PPUSH
39771: LD_EXP 102
39775: PUSH
39776: LD_VAR 0 5
39780: ARRAY
39781: PUSH
39782: LD_INT 0
39784: PLUS
39785: PPUSH
39786: CALL_OW 505
// end ;
39790: LD_VAR 0 3
39794: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39795: LD_INT 0
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
// if not hack in hackTanks then
39801: LD_VAR 0 1
39805: PUSH
39806: LD_EXP 101
39810: IN
39811: NOT
39812: IFFALSE 39816
// exit ;
39814: GO 40060
// index := GetElementIndex ( hackTanks , hack ) ;
39816: LD_ADDR_VAR 0 4
39820: PUSH
39821: LD_EXP 101
39825: PPUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: CALL 48129 0 2
39835: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39836: LD_ADDR_VAR 0 3
39840: PUSH
39841: DOUBLE
39842: LD_EXP 102
39846: PUSH
39847: LD_VAR 0 4
39851: ARRAY
39852: INC
39853: ST_TO_ADDR
39854: LD_INT 1
39856: PUSH
39857: FOR_DOWNTO
39858: IFFALSE 40034
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39860: LD_ADDR_VAR 0 5
39864: PUSH
39865: LD_EXP 102
39869: PUSH
39870: LD_VAR 0 4
39874: ARRAY
39875: PUSH
39876: LD_VAR 0 3
39880: ARRAY
39881: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39882: LD_VAR 0 5
39886: PUSH
39887: LD_INT 1
39889: ARRAY
39890: PPUSH
39891: CALL_OW 302
39895: NOT
39896: IFTRUE 39924
39898: PUSH
39899: LD_VAR 0 5
39903: PUSH
39904: LD_INT 1
39906: ARRAY
39907: PPUSH
39908: CALL_OW 255
39912: PUSH
39913: LD_VAR 0 1
39917: PPUSH
39918: CALL_OW 255
39922: NONEQUAL
39923: OR
39924: IFFALSE 40032
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39926: LD_VAR 0 5
39930: PUSH
39931: LD_INT 1
39933: ARRAY
39934: PPUSH
39935: CALL_OW 305
39939: IFFALSE 39967
39941: PUSH
39942: LD_VAR 0 5
39946: PUSH
39947: LD_INT 1
39949: ARRAY
39950: PPUSH
39951: CALL_OW 255
39955: PUSH
39956: LD_VAR 0 1
39960: PPUSH
39961: CALL_OW 255
39965: EQUAL
39966: AND
39967: IFFALSE 39991
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39969: LD_VAR 0 5
39973: PUSH
39974: LD_INT 1
39976: ARRAY
39977: PPUSH
39978: LD_VAR 0 5
39982: PUSH
39983: LD_INT 2
39985: ARRAY
39986: PPUSH
39987: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39991: LD_ADDR_EXP 102
39995: PUSH
39996: LD_EXP 102
40000: PPUSH
40001: LD_VAR 0 4
40005: PPUSH
40006: LD_EXP 102
40010: PUSH
40011: LD_VAR 0 4
40015: ARRAY
40016: PPUSH
40017: LD_VAR 0 3
40021: PPUSH
40022: CALL_OW 3
40026: PPUSH
40027: CALL_OW 1
40031: ST_TO_ADDR
// end ; end ;
40032: GO 39857
40034: POP
40035: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40036: LD_VAR 0 1
40040: PPUSH
40041: LD_EXP 102
40045: PUSH
40046: LD_VAR 0 4
40050: ARRAY
40051: PUSH
40052: LD_INT 0
40054: PLUS
40055: PPUSH
40056: CALL_OW 505
// end ;
40060: LD_VAR 0 2
40064: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
40065: LD_INT 0
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
// if not hack in hackTanks then
40071: LD_VAR 0 1
40075: PUSH
40076: LD_EXP 101
40080: IN
40081: NOT
40082: IFFALSE 40086
// exit ;
40084: GO 40171
// index := GetElementIndex ( hackTanks , hack ) ;
40086: LD_ADDR_VAR 0 5
40090: PUSH
40091: LD_EXP 101
40095: PPUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL 48129 0 2
40105: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
40106: LD_ADDR_VAR 0 4
40110: PUSH
40111: DOUBLE
40112: LD_INT 1
40114: DEC
40115: ST_TO_ADDR
40116: LD_EXP 102
40120: PUSH
40121: LD_VAR 0 5
40125: ARRAY
40126: PUSH
40127: FOR_TO
40128: IFFALSE 40169
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40130: LD_EXP 102
40134: PUSH
40135: LD_VAR 0 5
40139: ARRAY
40140: PUSH
40141: LD_VAR 0 4
40145: ARRAY
40146: PUSH
40147: LD_INT 1
40149: ARRAY
40150: PUSH
40151: LD_VAR 0 2
40155: EQUAL
40156: IFFALSE 40167
// KillUnit ( vehicle ) ;
40158: LD_VAR 0 2
40162: PPUSH
40163: CALL_OW 66
40167: GO 40127
40169: POP
40170: POP
// end ;
40171: LD_VAR 0 3
40175: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
40176: LD_EXP 106
40180: NOT
40181: IFFALSE 40314
40183: GO 40185
40185: DISABLE
40186: LD_INT 0
40188: PPUSH
// begin initMiner := true ;
40189: LD_ADDR_EXP 106
40193: PUSH
40194: LD_INT 1
40196: ST_TO_ADDR
// minersList := [ ] ;
40197: LD_ADDR_EXP 107
40201: PUSH
40202: EMPTY
40203: ST_TO_ADDR
// minerMinesList := [ ] ;
40204: LD_ADDR_EXP 108
40208: PUSH
40209: EMPTY
40210: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
40211: LD_ADDR_EXP 109
40215: PUSH
40216: LD_INT 10
40218: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40219: LD_ADDR_VAR 0 1
40223: PUSH
40224: LD_INT 34
40226: PUSH
40227: LD_INT 81
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PPUSH
40234: CALL_OW 69
40238: PUSH
40239: FOR_IN
40240: IFFALSE 40312
// begin if not i in minersList then
40242: LD_VAR 0 1
40246: PUSH
40247: LD_EXP 107
40251: IN
40252: NOT
40253: IFFALSE 40310
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40255: LD_ADDR_EXP 107
40259: PUSH
40260: LD_EXP 107
40264: PPUSH
40265: LD_EXP 107
40269: PUSH
40270: LD_INT 1
40272: PLUS
40273: PPUSH
40274: LD_VAR 0 1
40278: PPUSH
40279: CALL_OW 1
40283: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40284: LD_ADDR_EXP 108
40288: PUSH
40289: LD_EXP 108
40293: PPUSH
40294: LD_EXP 108
40298: PUSH
40299: LD_INT 1
40301: PLUS
40302: PPUSH
40303: EMPTY
40304: PPUSH
40305: CALL_OW 1
40309: ST_TO_ADDR
// end end ;
40310: GO 40239
40312: POP
40313: POP
// end ;
40314: PPOPN 1
40316: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
40317: LD_EXP 106
40321: IFFALSE 40352
40323: PUSH
40324: LD_EXP 108
40328: PPUSH
40329: CALL 45428 0 1
40333: IFTRUE 40351
40335: PUSH
40336: LD_INT 34
40338: PUSH
40339: LD_INT 81
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PPUSH
40346: CALL_OW 69
40350: OR
40351: AND
40352: IFFALSE 40872
40354: GO 40356
40356: DISABLE
40357: LD_INT 0
40359: PPUSH
40360: PPUSH
40361: PPUSH
40362: PPUSH
// begin enable ;
40363: ENABLE
// for i := minerMinesList downto 1 do
40364: LD_ADDR_VAR 0 1
40368: PUSH
40369: DOUBLE
40370: LD_EXP 108
40374: INC
40375: ST_TO_ADDR
40376: LD_INT 1
40378: PUSH
40379: FOR_DOWNTO
40380: IFFALSE 40870
// begin side := GetSide ( minersList [ i ] ) ;
40382: LD_ADDR_VAR 0 3
40386: PUSH
40387: LD_EXP 107
40391: PUSH
40392: LD_VAR 0 1
40396: ARRAY
40397: PPUSH
40398: CALL_OW 255
40402: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
40403: LD_EXP 107
40407: PUSH
40408: LD_VAR 0 1
40412: ARRAY
40413: PPUSH
40414: CALL_OW 300
40418: IFFALSE 40439
40420: PUSH
40421: LD_VAR 0 3
40425: PUSH
40426: LD_OWVAR 2
40430: PUSH
40431: LD_INT 9
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: IN
40438: AND
40439: IFFALSE 40472
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
40441: LD_EXP 107
40445: PUSH
40446: LD_VAR 0 1
40450: ARRAY
40451: PPUSH
40452: LD_EXP 108
40456: PUSH
40457: LD_VAR 0 1
40461: ARRAY
40462: PPUSH
40463: CALL 45428 0 1
40467: PPUSH
40468: CALL_OW 505
// if not minerMinesList [ i ] then
40472: LD_EXP 108
40476: PUSH
40477: LD_VAR 0 1
40481: ARRAY
40482: NOT
40483: IFFALSE 40487
// continue ;
40485: GO 40379
// for j := minerMinesList [ i ] downto 1 do
40487: LD_ADDR_VAR 0 2
40491: PUSH
40492: DOUBLE
40493: LD_EXP 108
40497: PUSH
40498: LD_VAR 0 1
40502: ARRAY
40503: INC
40504: ST_TO_ADDR
40505: LD_INT 1
40507: PUSH
40508: FOR_DOWNTO
40509: IFFALSE 40866
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
40511: LD_EXP 107
40515: PUSH
40516: LD_VAR 0 1
40520: ARRAY
40521: PPUSH
40522: CALL_OW 301
40526: IFTRUE 40546
40528: PUSH
40529: LD_EXP 107
40533: PUSH
40534: LD_VAR 0 1
40538: ARRAY
40539: PPUSH
40540: CALL_OW 305
40544: NOT
40545: OR
40546: IFFALSE 40637
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40548: LD_EXP 108
40552: PUSH
40553: LD_VAR 0 1
40557: ARRAY
40558: PUSH
40559: LD_VAR 0 2
40563: ARRAY
40564: PUSH
40565: LD_INT 1
40567: ARRAY
40568: PPUSH
40569: LD_EXP 108
40573: PUSH
40574: LD_VAR 0 1
40578: ARRAY
40579: PUSH
40580: LD_VAR 0 2
40584: ARRAY
40585: PUSH
40586: LD_INT 2
40588: ARRAY
40589: PPUSH
40590: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40594: LD_ADDR_EXP 108
40598: PUSH
40599: LD_EXP 108
40603: PPUSH
40604: LD_VAR 0 1
40608: PPUSH
40609: LD_EXP 108
40613: PUSH
40614: LD_VAR 0 1
40618: ARRAY
40619: PPUSH
40620: LD_VAR 0 2
40624: PPUSH
40625: CALL_OW 3
40629: PPUSH
40630: CALL_OW 1
40634: ST_TO_ADDR
// continue ;
40635: GO 40508
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40637: LD_ADDR_VAR 0 4
40641: PUSH
40642: LD_EXP 108
40646: PUSH
40647: LD_VAR 0 1
40651: ARRAY
40652: PUSH
40653: LD_VAR 0 2
40657: ARRAY
40658: PUSH
40659: LD_INT 1
40661: ARRAY
40662: PPUSH
40663: LD_EXP 108
40667: PUSH
40668: LD_VAR 0 1
40672: ARRAY
40673: PUSH
40674: LD_VAR 0 2
40678: ARRAY
40679: PUSH
40680: LD_INT 2
40682: ARRAY
40683: PPUSH
40684: CALL_OW 428
40688: ST_TO_ADDR
// if not tmp then
40689: LD_VAR 0 4
40693: NOT
40694: IFFALSE 40698
// continue ;
40696: GO 40508
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40698: LD_VAR 0 4
40702: PUSH
40703: LD_INT 81
40705: PUSH
40706: LD_VAR 0 3
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PPUSH
40715: CALL_OW 69
40719: IN
40720: IFFALSE 40770
40722: PUSH
40723: LD_EXP 108
40727: PUSH
40728: LD_VAR 0 1
40732: ARRAY
40733: PUSH
40734: LD_VAR 0 2
40738: ARRAY
40739: PUSH
40740: LD_INT 1
40742: ARRAY
40743: PPUSH
40744: LD_EXP 108
40748: PUSH
40749: LD_VAR 0 1
40753: ARRAY
40754: PUSH
40755: LD_VAR 0 2
40759: ARRAY
40760: PUSH
40761: LD_INT 2
40763: ARRAY
40764: PPUSH
40765: CALL_OW 458
40769: AND
40770: IFFALSE 40864
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40772: LD_EXP 108
40776: PUSH
40777: LD_VAR 0 1
40781: ARRAY
40782: PUSH
40783: LD_VAR 0 2
40787: ARRAY
40788: PUSH
40789: LD_INT 1
40791: ARRAY
40792: PPUSH
40793: LD_EXP 108
40797: PUSH
40798: LD_VAR 0 1
40802: ARRAY
40803: PUSH
40804: LD_VAR 0 2
40808: ARRAY
40809: PUSH
40810: LD_INT 2
40812: ARRAY
40813: PPUSH
40814: LD_VAR 0 3
40818: PPUSH
40819: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40823: LD_ADDR_EXP 108
40827: PUSH
40828: LD_EXP 108
40832: PPUSH
40833: LD_VAR 0 1
40837: PPUSH
40838: LD_EXP 108
40842: PUSH
40843: LD_VAR 0 1
40847: ARRAY
40848: PPUSH
40849: LD_VAR 0 2
40853: PPUSH
40854: CALL_OW 3
40858: PPUSH
40859: CALL_OW 1
40863: ST_TO_ADDR
// end ; end ;
40864: GO 40508
40866: POP
40867: POP
// end ;
40868: GO 40379
40870: POP
40871: POP
// end ;
40872: PPOPN 4
40874: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
40875: LD_INT 0
40877: PPUSH
40878: PPUSH
40879: PPUSH
40880: PPUSH
// result := false ;
40881: LD_ADDR_VAR 0 4
40885: PUSH
40886: LD_INT 0
40888: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40889: LD_VAR 0 1
40893: PPUSH
40894: CALL_OW 264
40898: PUSH
40899: LD_INT 81
40901: EQUAL
40902: NOT
40903: IFFALSE 40907
// exit ;
40905: GO 41277
// side := GetSide ( unit ) ;
40907: LD_ADDR_VAR 0 6
40911: PUSH
40912: LD_VAR 0 1
40916: PPUSH
40917: CALL_OW 255
40921: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
40922: LD_ADDR_VAR 0 5
40926: PUSH
40927: LD_EXP 107
40931: PPUSH
40932: LD_VAR 0 1
40936: PPUSH
40937: CALL 48129 0 2
40941: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40942: LD_EXP 108
40946: PUSH
40947: LD_VAR 0 5
40951: ARRAY
40952: PUSH
40953: LD_EXP 109
40957: GREATEREQUAL
40958: IFFALSE 40962
// exit ;
40960: GO 41277
// ComMoveXY ( unit , x , y ) ;
40962: LD_VAR 0 1
40966: PPUSH
40967: LD_VAR 0 2
40971: PPUSH
40972: LD_VAR 0 3
40976: PPUSH
40977: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40981: LD_INT 35
40983: PPUSH
40984: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40988: LD_VAR 0 1
40992: PPUSH
40993: LD_VAR 0 2
40997: PPUSH
40998: LD_VAR 0 3
41002: PPUSH
41003: CALL 80185 0 3
41007: NOT
41008: IFFALSE 41021
41010: PUSH
41011: LD_VAR 0 1
41015: PPUSH
41016: CALL_OW 314
41020: AND
41021: IFFALSE 41025
// exit ;
41023: GO 41277
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
41025: LD_VAR 0 2
41029: PPUSH
41030: LD_VAR 0 3
41034: PPUSH
41035: CALL_OW 428
41039: PUSH
41040: LD_VAR 0 1
41044: EQUAL
41045: IFFALSE 41059
41047: PUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: CALL_OW 314
41057: NOT
41058: AND
41059: IFFALSE 40981
// if MineAtPos ( x , y ) then
41061: LD_VAR 0 2
41065: PPUSH
41066: LD_VAR 0 3
41070: PPUSH
41071: CALL_OW 458
41075: IFFALSE 41079
// exit ;
41077: GO 41277
// if your_side = side then
41079: LD_OWVAR 2
41083: PUSH
41084: LD_VAR 0 6
41088: EQUAL
41089: IFFALSE 41108
// PlaySoundXY ( x , y , PlantMine ) ;
41091: LD_VAR 0 2
41095: PPUSH
41096: LD_VAR 0 3
41100: PPUSH
41101: LD_STRING PlantMine
41103: PPUSH
41104: CALL_OW 366
// repeat wait ( 1 ) ;
41108: LD_INT 1
41110: PPUSH
41111: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
41115: LD_VAR 0 2
41119: PPUSH
41120: LD_VAR 0 3
41124: PPUSH
41125: LD_VAR 0 6
41129: PPUSH
41130: LD_INT 0
41132: PPUSH
41133: CALL_OW 454
41137: IFFALSE 41108
// if MineAtPos ( x , y ) then
41139: LD_VAR 0 2
41143: PPUSH
41144: LD_VAR 0 3
41148: PPUSH
41149: CALL_OW 458
41153: IFFALSE 41269
// begin for i in minerMinesList [ index ] do
41155: LD_ADDR_VAR 0 7
41159: PUSH
41160: LD_EXP 108
41164: PUSH
41165: LD_VAR 0 5
41169: ARRAY
41170: PUSH
41171: FOR_IN
41172: IFFALSE 41214
// if i [ 1 ] = x and i [ 2 ] = y then
41174: LD_VAR 0 7
41178: PUSH
41179: LD_INT 1
41181: ARRAY
41182: PUSH
41183: LD_VAR 0 2
41187: EQUAL
41188: IFFALSE 41206
41190: PUSH
41191: LD_VAR 0 7
41195: PUSH
41196: LD_INT 2
41198: ARRAY
41199: PUSH
41200: LD_VAR 0 3
41204: EQUAL
41205: AND
41206: IFFALSE 41212
// exit ;
41208: POP
41209: POP
41210: GO 41277
41212: GO 41171
41214: POP
41215: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41216: LD_ADDR_EXP 108
41220: PUSH
41221: LD_EXP 108
41225: PPUSH
41226: LD_VAR 0 5
41230: PUSH
41231: LD_EXP 108
41235: PUSH
41236: LD_VAR 0 5
41240: ARRAY
41241: PUSH
41242: LD_INT 1
41244: PLUS
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PPUSH
41250: LD_VAR 0 2
41254: PUSH
41255: LD_VAR 0 3
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PPUSH
41264: CALL 48346 0 3
41268: ST_TO_ADDR
// end ; result := true ;
41269: LD_ADDR_VAR 0 4
41273: PUSH
41274: LD_INT 1
41276: ST_TO_ADDR
// end ;
41277: LD_VAR 0 4
41281: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41282: LD_INT 0
41284: PPUSH
41285: PPUSH
41286: PPUSH
// if not unit in minersList then
41287: LD_VAR 0 1
41291: PUSH
41292: LD_EXP 107
41296: IN
41297: NOT
41298: IFFALSE 41302
// exit ;
41300: GO 41509
// index := GetElementIndex ( minersList , unit ) ;
41302: LD_ADDR_VAR 0 6
41306: PUSH
41307: LD_EXP 107
41311: PPUSH
41312: LD_VAR 0 1
41316: PPUSH
41317: CALL 48129 0 2
41321: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41322: LD_ADDR_VAR 0 5
41326: PUSH
41327: DOUBLE
41328: LD_EXP 108
41332: PUSH
41333: LD_VAR 0 6
41337: ARRAY
41338: INC
41339: ST_TO_ADDR
41340: LD_INT 1
41342: PUSH
41343: FOR_DOWNTO
41344: IFFALSE 41507
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41346: LD_EXP 108
41350: PUSH
41351: LD_VAR 0 6
41355: ARRAY
41356: PUSH
41357: LD_VAR 0 5
41361: ARRAY
41362: PUSH
41363: LD_INT 1
41365: ARRAY
41366: PPUSH
41367: LD_EXP 108
41371: PUSH
41372: LD_VAR 0 6
41376: ARRAY
41377: PUSH
41378: LD_VAR 0 5
41382: ARRAY
41383: PUSH
41384: LD_INT 2
41386: ARRAY
41387: PPUSH
41388: LD_VAR 0 2
41392: PPUSH
41393: LD_VAR 0 3
41397: PPUSH
41398: CALL_OW 298
41402: PUSH
41403: LD_INT 6
41405: LESS
41406: IFFALSE 41505
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41408: LD_EXP 108
41412: PUSH
41413: LD_VAR 0 6
41417: ARRAY
41418: PUSH
41419: LD_VAR 0 5
41423: ARRAY
41424: PUSH
41425: LD_INT 1
41427: ARRAY
41428: PPUSH
41429: LD_EXP 108
41433: PUSH
41434: LD_VAR 0 6
41438: ARRAY
41439: PUSH
41440: LD_VAR 0 5
41444: ARRAY
41445: PUSH
41446: LD_INT 2
41448: ARRAY
41449: PPUSH
41450: LD_VAR 0 1
41454: PPUSH
41455: CALL_OW 255
41459: PPUSH
41460: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41464: LD_ADDR_EXP 108
41468: PUSH
41469: LD_EXP 108
41473: PPUSH
41474: LD_VAR 0 6
41478: PPUSH
41479: LD_EXP 108
41483: PUSH
41484: LD_VAR 0 6
41488: ARRAY
41489: PPUSH
41490: LD_VAR 0 5
41494: PPUSH
41495: CALL_OW 3
41499: PPUSH
41500: CALL_OW 1
41504: ST_TO_ADDR
// end ; end ;
41505: GO 41343
41507: POP
41508: POP
// end ;
41509: LD_VAR 0 4
41513: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41514: LD_INT 0
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
41524: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41525: LD_VAR 0 1
41529: PPUSH
41530: CALL_OW 264
41534: PUSH
41535: LD_INT 81
41537: EQUAL
41538: NOT
41539: IFTRUE 41554
41541: PUSH
41542: LD_VAR 0 1
41546: PUSH
41547: LD_EXP 107
41551: IN
41552: NOT
41553: OR
41554: IFFALSE 41558
// exit ;
41556: GO 41884
// index := GetElementIndex ( minersList , unit ) ;
41558: LD_ADDR_VAR 0 6
41562: PUSH
41563: LD_EXP 107
41567: PPUSH
41568: LD_VAR 0 1
41572: PPUSH
41573: CALL 48129 0 2
41577: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41578: LD_ADDR_VAR 0 8
41582: PUSH
41583: LD_EXP 109
41587: PUSH
41588: LD_EXP 108
41592: PUSH
41593: LD_VAR 0 6
41597: ARRAY
41598: MINUS
41599: ST_TO_ADDR
// if not minesFreeAmount then
41600: LD_VAR 0 8
41604: NOT
41605: IFFALSE 41609
// exit ;
41607: GO 41884
// tmp := [ ] ;
41609: LD_ADDR_VAR 0 7
41613: PUSH
41614: EMPTY
41615: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41616: LD_ADDR_VAR 0 5
41620: PUSH
41621: DOUBLE
41622: LD_INT 1
41624: DEC
41625: ST_TO_ADDR
41626: LD_VAR 0 8
41630: PUSH
41631: FOR_TO
41632: IFFALSE 41831
// begin _d := rand ( 0 , 5 ) ;
41634: LD_ADDR_VAR 0 11
41638: PUSH
41639: LD_INT 0
41641: PPUSH
41642: LD_INT 5
41644: PPUSH
41645: CALL_OW 12
41649: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41650: LD_ADDR_VAR 0 12
41654: PUSH
41655: LD_INT 2
41657: PPUSH
41658: LD_INT 6
41660: PPUSH
41661: CALL_OW 12
41665: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41666: LD_ADDR_VAR 0 9
41670: PUSH
41671: LD_VAR 0 2
41675: PPUSH
41676: LD_VAR 0 11
41680: PPUSH
41681: LD_VAR 0 12
41685: PPUSH
41686: CALL_OW 272
41690: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41691: LD_ADDR_VAR 0 10
41695: PUSH
41696: LD_VAR 0 3
41700: PPUSH
41701: LD_VAR 0 11
41705: PPUSH
41706: LD_VAR 0 12
41710: PPUSH
41711: CALL_OW 273
41715: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41716: LD_VAR 0 9
41720: PPUSH
41721: LD_VAR 0 10
41725: PPUSH
41726: CALL_OW 488
41730: IFFALSE 41754
41732: PUSH
41733: LD_VAR 0 9
41737: PUSH
41738: LD_VAR 0 10
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_VAR 0 7
41751: IN
41752: NOT
41753: AND
41754: IFFALSE 41773
41756: PUSH
41757: LD_VAR 0 9
41761: PPUSH
41762: LD_VAR 0 10
41766: PPUSH
41767: CALL_OW 458
41771: NOT
41772: AND
41773: IFFALSE 41815
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41775: LD_ADDR_VAR 0 7
41779: PUSH
41780: LD_VAR 0 7
41784: PPUSH
41785: LD_VAR 0 7
41789: PUSH
41790: LD_INT 1
41792: PLUS
41793: PPUSH
41794: LD_VAR 0 9
41798: PUSH
41799: LD_VAR 0 10
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PPUSH
41808: CALL_OW 1
41812: ST_TO_ADDR
41813: GO 41829
// i := i - 1 ;
41815: LD_ADDR_VAR 0 5
41819: PUSH
41820: LD_VAR 0 5
41824: PUSH
41825: LD_INT 1
41827: MINUS
41828: ST_TO_ADDR
// end ;
41829: GO 41631
41831: POP
41832: POP
// for i in tmp do
41833: LD_ADDR_VAR 0 5
41837: PUSH
41838: LD_VAR 0 7
41842: PUSH
41843: FOR_IN
41844: IFFALSE 41882
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41846: LD_VAR 0 1
41850: PPUSH
41851: LD_VAR 0 5
41855: PUSH
41856: LD_INT 1
41858: ARRAY
41859: PPUSH
41860: LD_VAR 0 5
41864: PUSH
41865: LD_INT 2
41867: ARRAY
41868: PPUSH
41869: CALL 40875 0 3
41873: NOT
41874: IFFALSE 41880
// exit ;
41876: POP
41877: POP
41878: GO 41884
41880: GO 41843
41882: POP
41883: POP
// end ;
41884: LD_VAR 0 4
41888: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41889: LD_INT 0
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
// if GetClass ( unit ) <> class_sniper then
41900: LD_VAR 0 1
41904: PPUSH
41905: CALL_OW 257
41909: PUSH
41910: LD_INT 5
41912: NONEQUAL
41913: IFFALSE 41917
// exit ;
41915: GO 42387
// dist := 8 ;
41917: LD_ADDR_VAR 0 5
41921: PUSH
41922: LD_INT 8
41924: ST_TO_ADDR
// viewRange := 12 ;
41925: LD_ADDR_VAR 0 8
41929: PUSH
41930: LD_INT 12
41932: ST_TO_ADDR
// side := GetSide ( unit ) ;
41933: LD_ADDR_VAR 0 6
41937: PUSH
41938: LD_VAR 0 1
41942: PPUSH
41943: CALL_OW 255
41947: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41948: LD_INT 61
41950: PPUSH
41951: LD_VAR 0 6
41955: PPUSH
41956: CALL_OW 321
41960: PUSH
41961: LD_INT 2
41963: EQUAL
41964: IFFALSE 41974
// viewRange := 16 ;
41966: LD_ADDR_VAR 0 8
41970: PUSH
41971: LD_INT 16
41973: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41974: LD_VAR 0 1
41978: PPUSH
41979: LD_VAR 0 2
41983: PPUSH
41984: LD_VAR 0 3
41988: PPUSH
41989: CALL_OW 297
41993: PUSH
41994: LD_VAR 0 5
41998: GREATER
41999: IFFALSE 42078
// begin ComMoveXY ( unit , x , y ) ;
42001: LD_VAR 0 1
42005: PPUSH
42006: LD_VAR 0 2
42010: PPUSH
42011: LD_VAR 0 3
42015: PPUSH
42016: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42020: LD_INT 35
42022: PPUSH
42023: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
42027: LD_VAR 0 1
42031: PPUSH
42032: LD_VAR 0 2
42036: PPUSH
42037: LD_VAR 0 3
42041: PPUSH
42042: CALL 80185 0 3
42046: NOT
42047: IFFALSE 42051
// exit ;
42049: GO 42387
// until GetDistUnitXY ( unit , x , y ) < dist ;
42051: LD_VAR 0 1
42055: PPUSH
42056: LD_VAR 0 2
42060: PPUSH
42061: LD_VAR 0 3
42065: PPUSH
42066: CALL_OW 297
42070: PUSH
42071: LD_VAR 0 5
42075: LESS
42076: IFFALSE 42020
// end ; ComTurnXY ( unit , x , y ) ;
42078: LD_VAR 0 1
42082: PPUSH
42083: LD_VAR 0 2
42087: PPUSH
42088: LD_VAR 0 3
42092: PPUSH
42093: CALL_OW 118
// repeat if Multiplayer then
42097: LD_OWVAR 4
42101: IFFALSE 42112
// wait ( 35 ) else
42103: LD_INT 35
42105: PPUSH
42106: CALL_OW 67
42110: GO 42119
// wait ( 5 ) ;
42112: LD_INT 5
42114: PPUSH
42115: CALL_OW 67
// _d := GetDir ( unit ) ;
42119: LD_ADDR_VAR 0 11
42123: PUSH
42124: LD_VAR 0 1
42128: PPUSH
42129: CALL_OW 254
42133: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
42134: LD_ADDR_VAR 0 7
42138: PUSH
42139: LD_VAR 0 1
42143: PPUSH
42144: CALL_OW 250
42148: PPUSH
42149: LD_VAR 0 1
42153: PPUSH
42154: CALL_OW 251
42158: PPUSH
42159: LD_VAR 0 2
42163: PPUSH
42164: LD_VAR 0 3
42168: PPUSH
42169: CALL 82821 0 4
42173: ST_TO_ADDR
// until dir = _d ;
42174: LD_VAR 0 7
42178: PUSH
42179: LD_VAR 0 11
42183: EQUAL
42184: IFFALSE 42097
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
42186: LD_ADDR_VAR 0 9
42190: PUSH
42191: LD_VAR 0 1
42195: PPUSH
42196: CALL_OW 250
42200: PPUSH
42201: LD_VAR 0 7
42205: PPUSH
42206: LD_VAR 0 5
42210: PPUSH
42211: CALL_OW 272
42215: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
42216: LD_ADDR_VAR 0 10
42220: PUSH
42221: LD_VAR 0 1
42225: PPUSH
42226: CALL_OW 251
42230: PPUSH
42231: LD_VAR 0 7
42235: PPUSH
42236: LD_VAR 0 5
42240: PPUSH
42241: CALL_OW 273
42245: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42246: LD_VAR 0 9
42250: PPUSH
42251: LD_VAR 0 10
42255: PPUSH
42256: CALL_OW 488
42260: NOT
42261: IFFALSE 42265
// exit ;
42263: GO 42387
// ComAnimCustom ( unit , 1 ) ;
42265: LD_VAR 0 1
42269: PPUSH
42270: LD_INT 1
42272: PPUSH
42273: CALL_OW 592
// p := 0 ;
42277: LD_ADDR_VAR 0 12
42281: PUSH
42282: LD_INT 0
42284: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42285: LD_VAR 0 9
42289: PPUSH
42290: LD_VAR 0 10
42294: PPUSH
42295: LD_VAR 0 6
42299: PPUSH
42300: LD_VAR 0 8
42304: PPUSH
42305: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
42309: LD_INT 35
42311: PPUSH
42312: CALL_OW 67
// p := Inc ( p ) ;
42316: LD_ADDR_VAR 0 12
42320: PUSH
42321: LD_VAR 0 12
42325: PPUSH
42326: CALL 82777 0 1
42330: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
42331: LD_VAR 0 12
42335: PUSH
42336: LD_INT 3
42338: EQUAL
42339: IFTRUE 42353
42341: PUSH
42342: LD_VAR 0 1
42346: PPUSH
42347: CALL_OW 302
42351: NOT
42352: OR
42353: IFTRUE 42366
42355: PUSH
42356: LD_VAR 0 1
42360: PPUSH
42361: CALL_OW 301
42365: OR
42366: IFFALSE 42309
// RemoveSeeing ( _x , _y , side ) ;
42368: LD_VAR 0 9
42372: PPUSH
42373: LD_VAR 0 10
42377: PPUSH
42378: LD_VAR 0 6
42382: PPUSH
42383: CALL_OW 331
// end ;
42387: LD_VAR 0 4
42391: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
42392: LD_INT 0
42394: PPUSH
42395: PPUSH
42396: PPUSH
42397: PPUSH
42398: PPUSH
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
42403: PPUSH
42404: PPUSH
// if not unit then
42405: LD_VAR 0 1
42409: NOT
42410: IFFALSE 42414
// exit ;
42412: GO 42685
// side := GetSide ( unit ) ;
42414: LD_ADDR_VAR 0 3
42418: PUSH
42419: LD_VAR 0 1
42423: PPUSH
42424: CALL_OW 255
42428: ST_TO_ADDR
// x := GetX ( unit ) ;
42429: LD_ADDR_VAR 0 5
42433: PUSH
42434: LD_VAR 0 1
42438: PPUSH
42439: CALL_OW 250
42443: ST_TO_ADDR
// y := GetY ( unit ) ;
42444: LD_ADDR_VAR 0 6
42448: PUSH
42449: LD_VAR 0 1
42453: PPUSH
42454: CALL_OW 251
42458: ST_TO_ADDR
// r := 8 ;
42459: LD_ADDR_VAR 0 4
42463: PUSH
42464: LD_INT 8
42466: ST_TO_ADDR
// if x - r < 0 then
42467: LD_VAR 0 5
42471: PUSH
42472: LD_VAR 0 4
42476: MINUS
42477: PUSH
42478: LD_INT 0
42480: LESS
42481: IFFALSE 42493
// min_x := 0 else
42483: LD_ADDR_VAR 0 7
42487: PUSH
42488: LD_INT 0
42490: ST_TO_ADDR
42491: GO 42509
// min_x := x - r ;
42493: LD_ADDR_VAR 0 7
42497: PUSH
42498: LD_VAR 0 5
42502: PUSH
42503: LD_VAR 0 4
42507: MINUS
42508: ST_TO_ADDR
// if y - r < 0 then
42509: LD_VAR 0 6
42513: PUSH
42514: LD_VAR 0 4
42518: MINUS
42519: PUSH
42520: LD_INT 0
42522: LESS
42523: IFFALSE 42535
// min_y := 0 else
42525: LD_ADDR_VAR 0 8
42529: PUSH
42530: LD_INT 0
42532: ST_TO_ADDR
42533: GO 42551
// min_y := y - r ;
42535: LD_ADDR_VAR 0 8
42539: PUSH
42540: LD_VAR 0 6
42544: PUSH
42545: LD_VAR 0 4
42549: MINUS
42550: ST_TO_ADDR
// max_x := x + r ;
42551: LD_ADDR_VAR 0 9
42555: PUSH
42556: LD_VAR 0 5
42560: PUSH
42561: LD_VAR 0 4
42565: PLUS
42566: ST_TO_ADDR
// max_y := y + r ;
42567: LD_ADDR_VAR 0 10
42571: PUSH
42572: LD_VAR 0 6
42576: PUSH
42577: LD_VAR 0 4
42581: PLUS
42582: ST_TO_ADDR
// for _x = min_x to max_x do
42583: LD_ADDR_VAR 0 11
42587: PUSH
42588: DOUBLE
42589: LD_VAR 0 7
42593: DEC
42594: ST_TO_ADDR
42595: LD_VAR 0 9
42599: PUSH
42600: FOR_TO
42601: IFFALSE 42683
// for _y = min_y to max_y do
42603: LD_ADDR_VAR 0 12
42607: PUSH
42608: DOUBLE
42609: LD_VAR 0 8
42613: DEC
42614: ST_TO_ADDR
42615: LD_VAR 0 10
42619: PUSH
42620: FOR_TO
42621: IFFALSE 42679
// begin if not ValidHex ( _x , _y ) then
42623: LD_VAR 0 11
42627: PPUSH
42628: LD_VAR 0 12
42632: PPUSH
42633: CALL_OW 488
42637: NOT
42638: IFFALSE 42642
// continue ;
42640: GO 42620
// if MineAtPos ( _x , _y ) then
42642: LD_VAR 0 11
42646: PPUSH
42647: LD_VAR 0 12
42651: PPUSH
42652: CALL_OW 458
42656: IFFALSE 42677
// ViewMineAtPos ( _x , _y , side ) ;
42658: LD_VAR 0 11
42662: PPUSH
42663: LD_VAR 0 12
42667: PPUSH
42668: LD_VAR 0 3
42672: PPUSH
42673: CALL_OW 457
// end ;
42677: GO 42620
42679: POP
42680: POP
42681: GO 42600
42683: POP
42684: POP
// end ;
42685: LD_VAR 0 2
42689: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
42690: LD_INT 0
42692: PPUSH
42693: PPUSH
42694: PPUSH
42695: PPUSH
42696: PPUSH
42697: PPUSH
42698: PPUSH
// if not units then
42699: LD_VAR 0 1
42703: NOT
42704: IFFALSE 42708
// exit ;
42706: GO 43172
// scaners := [ ] ;
42708: LD_ADDR_VAR 0 6
42712: PUSH
42713: EMPTY
42714: ST_TO_ADDR
// for i in units do
42715: LD_ADDR_VAR 0 3
42719: PUSH
42720: LD_VAR 0 1
42724: PUSH
42725: FOR_IN
42726: IFFALSE 42883
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
42728: LD_VAR 0 3
42732: PPUSH
42733: CALL_OW 264
42737: PUSH
42738: LD_INT 11
42740: NONEQUAL
42741: IFTRUE 42755
42743: PUSH
42744: LD_VAR 0 3
42748: PPUSH
42749: CALL_OW 302
42753: NOT
42754: OR
42755: IFTRUE 42772
42757: PUSH
42758: LD_VAR 0 3
42762: PPUSH
42763: CALL_OW 110
42767: PUSH
42768: LD_INT 502
42770: EQUAL
42771: OR
42772: IFFALSE 42776
// continue ;
42774: GO 42725
// ComStop ( i ) ;
42776: LD_VAR 0 3
42780: PPUSH
42781: CALL_OW 141
// x := GetX ( i ) ;
42785: LD_ADDR_VAR 0 4
42789: PUSH
42790: LD_VAR 0 3
42794: PPUSH
42795: CALL_OW 250
42799: ST_TO_ADDR
// y := GetY ( i ) ;
42800: LD_ADDR_VAR 0 5
42804: PUSH
42805: LD_VAR 0 3
42809: PPUSH
42810: CALL_OW 251
42814: ST_TO_ADDR
// if GetSide ( i ) = your_side then
42815: LD_VAR 0 3
42819: PPUSH
42820: CALL_OW 255
42824: PUSH
42825: LD_OWVAR 2
42829: EQUAL
42830: IFFALSE 42849
// PlaySoundXY ( x , y , mineDetector ) ;
42832: LD_VAR 0 4
42836: PPUSH
42837: LD_VAR 0 5
42841: PPUSH
42842: LD_STRING mineDetector
42844: PPUSH
42845: CALL_OW 366
// scaners := Join ( scaners , i ) ;
42849: LD_ADDR_VAR 0 6
42853: PUSH
42854: LD_VAR 0 6
42858: PPUSH
42859: LD_VAR 0 3
42863: PPUSH
42864: CALL 81404 0 2
42868: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
42869: LD_VAR 0 3
42873: PPUSH
42874: LD_INT 502
42876: PPUSH
42877: CALL_OW 109
// end ;
42881: GO 42725
42883: POP
42884: POP
// if not scaners then
42885: LD_VAR 0 6
42889: NOT
42890: IFFALSE 42894
// exit ;
42892: GO 43172
// wait ( 3 ) ;
42894: LD_INT 3
42896: PPUSH
42897: CALL_OW 67
// timer := 6 ;
42901: LD_ADDR_VAR 0 7
42905: PUSH
42906: LD_INT 6
42908: ST_TO_ADDR
// repeat for i in scaners do
42909: LD_ADDR_VAR 0 3
42913: PUSH
42914: LD_VAR 0 6
42918: PUSH
42919: FOR_IN
42920: IFFALSE 43070
// begin side := GetSide ( i ) ;
42922: LD_ADDR_VAR 0 8
42926: PUSH
42927: LD_VAR 0 3
42931: PPUSH
42932: CALL_OW 255
42936: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
42937: LD_VAR 0 3
42941: PPUSH
42942: CALL_OW 302
42946: NOT
42947: IFTRUE 42960
42949: PUSH
42950: LD_VAR 0 3
42954: PPUSH
42955: CALL_OW 314
42959: OR
42960: IFTRUE 42991
42962: PUSH
42963: LD_VAR 0 3
42967: PPUSH
42968: CALL_OW 263
42972: PUSH
42973: LD_INT 1
42975: EQUAL
42976: IFFALSE 42990
42978: PUSH
42979: LD_VAR 0 3
42983: PPUSH
42984: CALL_OW 311
42988: NOT
42989: AND
42990: OR
42991: IFFALSE 43035
// begin SetUnitDisplayNumber ( i , 0 ) ;
42993: LD_VAR 0 3
42997: PPUSH
42998: LD_INT 0
43000: PPUSH
43001: CALL_OW 505
// SetTag ( i , 0 ) ;
43005: LD_VAR 0 3
43009: PPUSH
43010: LD_INT 0
43012: PPUSH
43013: CALL_OW 109
// scaners := scaners diff i ;
43017: LD_ADDR_VAR 0 6
43021: PUSH
43022: LD_VAR 0 6
43026: PUSH
43027: LD_VAR 0 3
43031: DIFF
43032: ST_TO_ADDR
// continue ;
43033: GO 42919
// end ; if side in [ your_side , 9 ] then
43035: LD_VAR 0 8
43039: PUSH
43040: LD_OWVAR 2
43044: PUSH
43045: LD_INT 9
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: IN
43052: IFFALSE 43068
// SetUnitDisplayNumber ( i , timer ) ;
43054: LD_VAR 0 3
43058: PPUSH
43059: LD_VAR 0 7
43063: PPUSH
43064: CALL_OW 505
// end ;
43068: GO 42919
43070: POP
43071: POP
// if not scaners then
43072: LD_VAR 0 6
43076: NOT
43077: IFFALSE 43081
// exit ;
43079: GO 43172
// timer := Dec ( timer ) ;
43081: LD_ADDR_VAR 0 7
43085: PUSH
43086: LD_VAR 0 7
43090: PPUSH
43091: CALL 82799 0 1
43095: ST_TO_ADDR
// wait ( 0 0$1 ) ;
43096: LD_INT 35
43098: PPUSH
43099: CALL_OW 67
// until timer = 0 ;
43103: LD_VAR 0 7
43107: PUSH
43108: LD_INT 0
43110: EQUAL
43111: IFFALSE 42909
// if not scaners then
43113: LD_VAR 0 6
43117: NOT
43118: IFFALSE 43122
// exit ;
43120: GO 43172
// for i in scaners do
43122: LD_ADDR_VAR 0 3
43126: PUSH
43127: LD_VAR 0 6
43131: PUSH
43132: FOR_IN
43133: IFFALSE 43170
// begin SetUnitDisplayNumber ( i , 0 ) ;
43135: LD_VAR 0 3
43139: PPUSH
43140: LD_INT 0
43142: PPUSH
43143: CALL_OW 505
// SetTag ( i , 0 ) ;
43147: LD_VAR 0 3
43151: PPUSH
43152: LD_INT 0
43154: PPUSH
43155: CALL_OW 109
// RevealDetectorMine ( i ) ;
43159: LD_VAR 0 3
43163: PPUSH
43164: CALL 42392 0 1
// end ;
43168: GO 43132
43170: POP
43171: POP
// end ;
43172: LD_VAR 0 2
43176: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
43177: LD_INT 0
43179: PPUSH
// if p1 = mine_detector_mode then
43180: LD_VAR 0 2
43184: PUSH
43185: LD_INT 103
43187: EQUAL
43188: IFFALSE 43199
// DetectMine ( units ) ;
43190: LD_VAR 0 1
43194: PPUSH
43195: CALL 42690 0 1
// end ; end_of_file
43199: LD_VAR 0 7
43203: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43204: LD_INT 0
43206: PPUSH
43207: PPUSH
// if exist_mode then
43208: LD_VAR 0 2
43212: IFFALSE 43258
// begin unit := CreateCharacter ( prefix & ident ) ;
43214: LD_ADDR_VAR 0 5
43218: PUSH
43219: LD_VAR 0 3
43223: PUSH
43224: LD_VAR 0 1
43228: STR
43229: PPUSH
43230: CALL_OW 34
43234: ST_TO_ADDR
// if unit then
43235: LD_VAR 0 5
43239: IFFALSE 43256
// DeleteCharacters ( prefix & ident ) ;
43241: LD_VAR 0 3
43245: PUSH
43246: LD_VAR 0 1
43250: STR
43251: PPUSH
43252: CALL_OW 40
// end else
43256: GO 43273
// unit := NewCharacter ( ident ) ;
43258: LD_ADDR_VAR 0 5
43262: PUSH
43263: LD_VAR 0 1
43267: PPUSH
43268: CALL_OW 25
43272: ST_TO_ADDR
// result := unit ;
43273: LD_ADDR_VAR 0 4
43277: PUSH
43278: LD_VAR 0 5
43282: ST_TO_ADDR
// end ;
43283: LD_VAR 0 4
43287: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
43288: LD_INT 0
43290: PPUSH
43291: PPUSH
// if exist_mode then
43292: LD_VAR 0 2
43296: IFFALSE 43321
// unit := CreateCharacter ( prefix & ident ) else
43298: LD_ADDR_VAR 0 5
43302: PUSH
43303: LD_VAR 0 3
43307: PUSH
43308: LD_VAR 0 1
43312: STR
43313: PPUSH
43314: CALL_OW 34
43318: ST_TO_ADDR
43319: GO 43336
// unit := NewCharacter ( ident ) ;
43321: LD_ADDR_VAR 0 5
43325: PUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 25
43335: ST_TO_ADDR
// result := unit ;
43336: LD_ADDR_VAR 0 4
43340: PUSH
43341: LD_VAR 0 5
43345: ST_TO_ADDR
// end ;
43346: LD_VAR 0 4
43350: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43351: LD_INT 0
43353: PPUSH
43354: PPUSH
// if not side or not nation then
43355: LD_VAR 0 1
43359: NOT
43360: IFTRUE 43369
43362: PUSH
43363: LD_VAR 0 2
43367: NOT
43368: OR
43369: IFFALSE 43373
// exit ;
43371: GO 44167
// case nation of nation_american :
43373: LD_VAR 0 2
43377: PUSH
43378: LD_INT 1
43380: DOUBLE
43381: EQUAL
43382: IFTRUE 43386
43384: GO 43608
43386: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
43387: LD_ADDR_VAR 0 4
43391: PUSH
43392: LD_INT 35
43394: PUSH
43395: LD_INT 45
43397: PUSH
43398: LD_INT 46
43400: PUSH
43401: LD_INT 47
43403: PUSH
43404: LD_INT 82
43406: PUSH
43407: LD_INT 83
43409: PUSH
43410: LD_INT 84
43412: PUSH
43413: LD_INT 85
43415: PUSH
43416: LD_INT 86
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 6
43427: PUSH
43428: LD_INT 15
43430: PUSH
43431: LD_INT 16
43433: PUSH
43434: LD_INT 7
43436: PUSH
43437: LD_INT 12
43439: PUSH
43440: LD_INT 13
43442: PUSH
43443: LD_INT 10
43445: PUSH
43446: LD_INT 14
43448: PUSH
43449: LD_INT 20
43451: PUSH
43452: LD_INT 21
43454: PUSH
43455: LD_INT 22
43457: PUSH
43458: LD_INT 25
43460: PUSH
43461: LD_INT 32
43463: PUSH
43464: LD_INT 27
43466: PUSH
43467: LD_INT 36
43469: PUSH
43470: LD_INT 69
43472: PUSH
43473: LD_INT 39
43475: PUSH
43476: LD_INT 34
43478: PUSH
43479: LD_INT 40
43481: PUSH
43482: LD_INT 48
43484: PUSH
43485: LD_INT 49
43487: PUSH
43488: LD_INT 50
43490: PUSH
43491: LD_INT 51
43493: PUSH
43494: LD_INT 52
43496: PUSH
43497: LD_INT 53
43499: PUSH
43500: LD_INT 54
43502: PUSH
43503: LD_INT 55
43505: PUSH
43506: LD_INT 56
43508: PUSH
43509: LD_INT 57
43511: PUSH
43512: LD_INT 58
43514: PUSH
43515: LD_INT 59
43517: PUSH
43518: LD_INT 60
43520: PUSH
43521: LD_INT 61
43523: PUSH
43524: LD_INT 62
43526: PUSH
43527: LD_INT 80
43529: PUSH
43530: LD_INT 82
43532: PUSH
43533: LD_INT 83
43535: PUSH
43536: LD_INT 84
43538: PUSH
43539: LD_INT 85
43541: PUSH
43542: LD_INT 86
43544: PUSH
43545: LD_INT 90
43547: PUSH
43548: LD_INT 93
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: ST_TO_ADDR
43606: GO 44089
43608: LD_INT 2
43610: DOUBLE
43611: EQUAL
43612: IFTRUE 43616
43614: GO 43850
43616: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
43617: LD_ADDR_VAR 0 4
43621: PUSH
43622: LD_INT 35
43624: PUSH
43625: LD_INT 45
43627: PUSH
43628: LD_INT 46
43630: PUSH
43631: LD_INT 47
43633: PUSH
43634: LD_INT 82
43636: PUSH
43637: LD_INT 83
43639: PUSH
43640: LD_INT 84
43642: PUSH
43643: LD_INT 85
43645: PUSH
43646: LD_INT 87
43648: PUSH
43649: LD_INT 70
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 11
43657: PUSH
43658: LD_INT 3
43660: PUSH
43661: LD_INT 4
43663: PUSH
43664: LD_INT 5
43666: PUSH
43667: LD_INT 6
43669: PUSH
43670: LD_INT 15
43672: PUSH
43673: LD_INT 18
43675: PUSH
43676: LD_INT 7
43678: PUSH
43679: LD_INT 17
43681: PUSH
43682: LD_INT 8
43684: PUSH
43685: LD_INT 20
43687: PUSH
43688: LD_INT 21
43690: PUSH
43691: LD_INT 22
43693: PUSH
43694: LD_INT 72
43696: PUSH
43697: LD_INT 26
43699: PUSH
43700: LD_INT 69
43702: PUSH
43703: LD_INT 39
43705: PUSH
43706: LD_INT 40
43708: PUSH
43709: LD_INT 41
43711: PUSH
43712: LD_INT 42
43714: PUSH
43715: LD_INT 43
43717: PUSH
43718: LD_INT 48
43720: PUSH
43721: LD_INT 49
43723: PUSH
43724: LD_INT 50
43726: PUSH
43727: LD_INT 51
43729: PUSH
43730: LD_INT 52
43732: PUSH
43733: LD_INT 53
43735: PUSH
43736: LD_INT 54
43738: PUSH
43739: LD_INT 55
43741: PUSH
43742: LD_INT 56
43744: PUSH
43745: LD_INT 60
43747: PUSH
43748: LD_INT 61
43750: PUSH
43751: LD_INT 62
43753: PUSH
43754: LD_INT 66
43756: PUSH
43757: LD_INT 67
43759: PUSH
43760: LD_INT 68
43762: PUSH
43763: LD_INT 81
43765: PUSH
43766: LD_INT 82
43768: PUSH
43769: LD_INT 83
43771: PUSH
43772: LD_INT 84
43774: PUSH
43775: LD_INT 85
43777: PUSH
43778: LD_INT 87
43780: PUSH
43781: LD_INT 88
43783: PUSH
43784: LD_INT 92
43786: PUSH
43787: LD_INT 94
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
43848: GO 44089
43850: LD_INT 3
43852: DOUBLE
43853: EQUAL
43854: IFTRUE 43858
43856: GO 44088
43858: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
43859: LD_ADDR_VAR 0 4
43863: PUSH
43864: LD_INT 46
43866: PUSH
43867: LD_INT 47
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: LD_INT 82
43878: PUSH
43879: LD_INT 83
43881: PUSH
43882: LD_INT 84
43884: PUSH
43885: LD_INT 85
43887: PUSH
43888: LD_INT 86
43890: PUSH
43891: LD_INT 11
43893: PUSH
43894: LD_INT 9
43896: PUSH
43897: LD_INT 20
43899: PUSH
43900: LD_INT 19
43902: PUSH
43903: LD_INT 21
43905: PUSH
43906: LD_INT 24
43908: PUSH
43909: LD_INT 22
43911: PUSH
43912: LD_INT 25
43914: PUSH
43915: LD_INT 28
43917: PUSH
43918: LD_INT 29
43920: PUSH
43921: LD_INT 30
43923: PUSH
43924: LD_INT 31
43926: PUSH
43927: LD_INT 37
43929: PUSH
43930: LD_INT 38
43932: PUSH
43933: LD_INT 32
43935: PUSH
43936: LD_INT 27
43938: PUSH
43939: LD_INT 33
43941: PUSH
43942: LD_INT 69
43944: PUSH
43945: LD_INT 39
43947: PUSH
43948: LD_INT 34
43950: PUSH
43951: LD_INT 40
43953: PUSH
43954: LD_INT 71
43956: PUSH
43957: LD_INT 23
43959: PUSH
43960: LD_INT 44
43962: PUSH
43963: LD_INT 48
43965: PUSH
43966: LD_INT 49
43968: PUSH
43969: LD_INT 50
43971: PUSH
43972: LD_INT 51
43974: PUSH
43975: LD_INT 52
43977: PUSH
43978: LD_INT 53
43980: PUSH
43981: LD_INT 54
43983: PUSH
43984: LD_INT 55
43986: PUSH
43987: LD_INT 56
43989: PUSH
43990: LD_INT 57
43992: PUSH
43993: LD_INT 58
43995: PUSH
43996: LD_INT 59
43998: PUSH
43999: LD_INT 63
44001: PUSH
44002: LD_INT 64
44004: PUSH
44005: LD_INT 65
44007: PUSH
44008: LD_INT 82
44010: PUSH
44011: LD_INT 83
44013: PUSH
44014: LD_INT 84
44016: PUSH
44017: LD_INT 85
44019: PUSH
44020: LD_INT 86
44022: PUSH
44023: LD_INT 89
44025: PUSH
44026: LD_INT 91
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: ST_TO_ADDR
44086: GO 44089
44088: POP
// if state > - 1 and state < 3 then
44089: LD_VAR 0 3
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: GREATER
44098: IFFALSE 44110
44100: PUSH
44101: LD_VAR 0 3
44105: PUSH
44106: LD_INT 3
44108: LESS
44109: AND
44110: IFFALSE 44167
// for i in result do
44112: LD_ADDR_VAR 0 5
44116: PUSH
44117: LD_VAR 0 4
44121: PUSH
44122: FOR_IN
44123: IFFALSE 44165
// if GetTech ( i , side ) <> state then
44125: LD_VAR 0 5
44129: PPUSH
44130: LD_VAR 0 1
44134: PPUSH
44135: CALL_OW 321
44139: PUSH
44140: LD_VAR 0 3
44144: NONEQUAL
44145: IFFALSE 44163
// result := result diff i ;
44147: LD_ADDR_VAR 0 4
44151: PUSH
44152: LD_VAR 0 4
44156: PUSH
44157: LD_VAR 0 5
44161: DIFF
44162: ST_TO_ADDR
44163: GO 44122
44165: POP
44166: POP
// end ;
44167: LD_VAR 0 4
44171: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44172: LD_INT 0
44174: PPUSH
44175: PPUSH
44176: PPUSH
// result := true ;
44177: LD_ADDR_VAR 0 3
44181: PUSH
44182: LD_INT 1
44184: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44185: LD_ADDR_VAR 0 5
44189: PUSH
44190: LD_VAR 0 2
44194: PPUSH
44195: CALL_OW 480
44199: ST_TO_ADDR
// if not tmp then
44200: LD_VAR 0 5
44204: NOT
44205: IFFALSE 44209
// exit ;
44207: GO 44258
// for i in tmp do
44209: LD_ADDR_VAR 0 4
44213: PUSH
44214: LD_VAR 0 5
44218: PUSH
44219: FOR_IN
44220: IFFALSE 44256
// if GetTech ( i , side ) <> state_researched then
44222: LD_VAR 0 4
44226: PPUSH
44227: LD_VAR 0 1
44231: PPUSH
44232: CALL_OW 321
44236: PUSH
44237: LD_INT 2
44239: NONEQUAL
44240: IFFALSE 44254
// begin result := false ;
44242: LD_ADDR_VAR 0 3
44246: PUSH
44247: LD_INT 0
44249: ST_TO_ADDR
// exit ;
44250: POP
44251: POP
44252: GO 44258
// end ;
44254: GO 44219
44256: POP
44257: POP
// end ;
44258: LD_VAR 0 3
44262: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44263: LD_INT 0
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44278: LD_VAR 0 1
44282: NOT
44283: IFTRUE 44300
44285: PUSH
44286: LD_VAR 0 1
44290: PPUSH
44291: CALL_OW 257
44295: PUSH
44296: LD_INT 9
44298: NONEQUAL
44299: OR
44300: IFFALSE 44304
// exit ;
44302: GO 44883
// side := GetSide ( unit ) ;
44304: LD_ADDR_VAR 0 9
44308: PUSH
44309: LD_VAR 0 1
44313: PPUSH
44314: CALL_OW 255
44318: ST_TO_ADDR
// tech_space := tech_spacanom ;
44319: LD_ADDR_VAR 0 12
44323: PUSH
44324: LD_INT 29
44326: ST_TO_ADDR
// tech_time := tech_taurad ;
44327: LD_ADDR_VAR 0 13
44331: PUSH
44332: LD_INT 28
44334: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44335: LD_ADDR_VAR 0 11
44339: PUSH
44340: LD_VAR 0 1
44344: PPUSH
44345: CALL_OW 310
44349: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44350: LD_VAR 0 11
44354: PPUSH
44355: CALL_OW 247
44359: PUSH
44360: LD_INT 2
44362: EQUAL
44363: IFFALSE 44367
// exit ;
44365: GO 44883
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44367: LD_ADDR_VAR 0 8
44371: PUSH
44372: LD_INT 81
44374: PUSH
44375: LD_VAR 0 9
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: LD_INT 21
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PPUSH
44405: CALL_OW 69
44409: ST_TO_ADDR
// if not tmp then
44410: LD_VAR 0 8
44414: NOT
44415: IFFALSE 44419
// exit ;
44417: GO 44883
// if in_unit then
44419: LD_VAR 0 11
44423: IFFALSE 44447
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44425: LD_ADDR_VAR 0 10
44429: PUSH
44430: LD_VAR 0 8
44434: PPUSH
44435: LD_VAR 0 11
44439: PPUSH
44440: CALL_OW 74
44444: ST_TO_ADDR
44445: GO 44467
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44447: LD_ADDR_VAR 0 10
44451: PUSH
44452: LD_VAR 0 8
44456: PPUSH
44457: LD_VAR 0 1
44461: PPUSH
44462: CALL_OW 74
44466: ST_TO_ADDR
// if not enemy then
44467: LD_VAR 0 10
44471: NOT
44472: IFFALSE 44476
// exit ;
44474: GO 44883
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44476: LD_VAR 0 11
44480: IFFALSE 44502
44482: PUSH
44483: LD_VAR 0 11
44487: PPUSH
44488: LD_VAR 0 10
44492: PPUSH
44493: CALL_OW 296
44497: PUSH
44498: LD_INT 13
44500: GREATER
44501: AND
44502: IFTRUE 44524
44504: PUSH
44505: LD_VAR 0 1
44509: PPUSH
44510: LD_VAR 0 10
44514: PPUSH
44515: CALL_OW 296
44519: PUSH
44520: LD_INT 12
44522: GREATER
44523: OR
44524: IFFALSE 44528
// exit ;
44526: GO 44883
// missile := [ 1 ] ;
44528: LD_ADDR_VAR 0 14
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: EMPTY
44537: LIST
44538: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44539: LD_VAR 0 9
44543: PPUSH
44544: LD_VAR 0 12
44548: PPUSH
44549: CALL_OW 325
44553: IFFALSE 44582
// missile := Replace ( missile , missile + 1 , 2 ) ;
44555: LD_ADDR_VAR 0 14
44559: PUSH
44560: LD_VAR 0 14
44564: PPUSH
44565: LD_VAR 0 14
44569: PUSH
44570: LD_INT 1
44572: PLUS
44573: PPUSH
44574: LD_INT 2
44576: PPUSH
44577: CALL_OW 1
44581: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44582: LD_VAR 0 9
44586: PPUSH
44587: LD_VAR 0 13
44591: PPUSH
44592: CALL_OW 325
44596: IFFALSE 44620
44598: PUSH
44599: LD_VAR 0 10
44603: PPUSH
44604: CALL_OW 255
44608: PPUSH
44609: LD_VAR 0 13
44613: PPUSH
44614: CALL_OW 325
44618: NOT
44619: AND
44620: IFFALSE 44649
// missile := Replace ( missile , missile + 1 , 3 ) ;
44622: LD_ADDR_VAR 0 14
44626: PUSH
44627: LD_VAR 0 14
44631: PPUSH
44632: LD_VAR 0 14
44636: PUSH
44637: LD_INT 1
44639: PLUS
44640: PPUSH
44641: LD_INT 3
44643: PPUSH
44644: CALL_OW 1
44648: ST_TO_ADDR
// if missile < 2 then
44649: LD_VAR 0 14
44653: PUSH
44654: LD_INT 2
44656: LESS
44657: IFFALSE 44661
// exit ;
44659: GO 44883
// x := GetX ( enemy ) ;
44661: LD_ADDR_VAR 0 4
44665: PUSH
44666: LD_VAR 0 10
44670: PPUSH
44671: CALL_OW 250
44675: ST_TO_ADDR
// y := GetY ( enemy ) ;
44676: LD_ADDR_VAR 0 5
44680: PUSH
44681: LD_VAR 0 10
44685: PPUSH
44686: CALL_OW 251
44690: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44691: LD_ADDR_VAR 0 6
44695: PUSH
44696: LD_VAR 0 4
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PPUSH
44705: LD_INT 1
44707: PPUSH
44708: CALL_OW 12
44712: PLUS
44713: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44714: LD_ADDR_VAR 0 7
44718: PUSH
44719: LD_VAR 0 5
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PPUSH
44728: LD_INT 1
44730: PPUSH
44731: CALL_OW 12
44735: PLUS
44736: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44737: LD_VAR 0 6
44741: PPUSH
44742: LD_VAR 0 7
44746: PPUSH
44747: CALL_OW 488
44751: NOT
44752: IFFALSE 44774
// begin _x := x ;
44754: LD_ADDR_VAR 0 6
44758: PUSH
44759: LD_VAR 0 4
44763: ST_TO_ADDR
// _y := y ;
44764: LD_ADDR_VAR 0 7
44768: PUSH
44769: LD_VAR 0 5
44773: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44774: LD_ADDR_VAR 0 3
44778: PUSH
44779: LD_INT 1
44781: PPUSH
44782: LD_VAR 0 14
44786: PPUSH
44787: CALL_OW 12
44791: ST_TO_ADDR
// case i of 1 :
44792: LD_VAR 0 3
44796: PUSH
44797: LD_INT 1
44799: DOUBLE
44800: EQUAL
44801: IFTRUE 44805
44803: GO 44822
44805: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44806: LD_VAR 0 1
44810: PPUSH
44811: LD_VAR 0 10
44815: PPUSH
44816: CALL_OW 115
44820: GO 44883
44822: LD_INT 2
44824: DOUBLE
44825: EQUAL
44826: IFTRUE 44830
44828: GO 44852
44830: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44831: LD_VAR 0 1
44835: PPUSH
44836: LD_VAR 0 6
44840: PPUSH
44841: LD_VAR 0 7
44845: PPUSH
44846: CALL_OW 153
44850: GO 44883
44852: LD_INT 3
44854: DOUBLE
44855: EQUAL
44856: IFTRUE 44860
44858: GO 44882
44860: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44861: LD_VAR 0 1
44865: PPUSH
44866: LD_VAR 0 6
44870: PPUSH
44871: LD_VAR 0 7
44875: PPUSH
44876: CALL_OW 154
44880: GO 44883
44882: POP
// end ;
44883: LD_VAR 0 2
44887: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44888: LD_INT 0
44890: PPUSH
44891: PPUSH
44892: PPUSH
44893: PPUSH
44894: PPUSH
44895: PPUSH
// if not unit or not building then
44896: LD_VAR 0 1
44900: NOT
44901: IFTRUE 44910
44903: PUSH
44904: LD_VAR 0 2
44908: NOT
44909: OR
44910: IFFALSE 44914
// exit ;
44912: GO 45072
// x := GetX ( building ) ;
44914: LD_ADDR_VAR 0 5
44918: PUSH
44919: LD_VAR 0 2
44923: PPUSH
44924: CALL_OW 250
44928: ST_TO_ADDR
// y := GetY ( building ) ;
44929: LD_ADDR_VAR 0 6
44933: PUSH
44934: LD_VAR 0 2
44938: PPUSH
44939: CALL_OW 251
44943: ST_TO_ADDR
// for i := 0 to 5 do
44944: LD_ADDR_VAR 0 4
44948: PUSH
44949: DOUBLE
44950: LD_INT 0
44952: DEC
44953: ST_TO_ADDR
44954: LD_INT 5
44956: PUSH
44957: FOR_TO
44958: IFFALSE 45070
// begin _x := ShiftX ( x , i , 3 ) ;
44960: LD_ADDR_VAR 0 7
44964: PUSH
44965: LD_VAR 0 5
44969: PPUSH
44970: LD_VAR 0 4
44974: PPUSH
44975: LD_INT 3
44977: PPUSH
44978: CALL_OW 272
44982: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44983: LD_ADDR_VAR 0 8
44987: PUSH
44988: LD_VAR 0 6
44992: PPUSH
44993: LD_VAR 0 4
44997: PPUSH
44998: LD_INT 3
45000: PPUSH
45001: CALL_OW 273
45005: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45006: LD_VAR 0 7
45010: PPUSH
45011: LD_VAR 0 8
45015: PPUSH
45016: CALL_OW 488
45020: NOT
45021: IFFALSE 45025
// continue ;
45023: GO 44957
// if HexInfo ( _x , _y ) = 0 then
45025: LD_VAR 0 7
45029: PPUSH
45030: LD_VAR 0 8
45034: PPUSH
45035: CALL_OW 428
45039: PUSH
45040: LD_INT 0
45042: EQUAL
45043: IFFALSE 45068
// begin ComMoveXY ( unit , _x , _y ) ;
45045: LD_VAR 0 1
45049: PPUSH
45050: LD_VAR 0 7
45054: PPUSH
45055: LD_VAR 0 8
45059: PPUSH
45060: CALL_OW 111
// exit ;
45064: POP
45065: POP
45066: GO 45072
// end ; end ;
45068: GO 44957
45070: POP
45071: POP
// end ;
45072: LD_VAR 0 3
45076: RET
// export function ScanBase ( side , base_area ) ; begin
45077: LD_INT 0
45079: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45080: LD_ADDR_VAR 0 3
45084: PUSH
45085: LD_VAR 0 2
45089: PPUSH
45090: LD_INT 81
45092: PUSH
45093: LD_VAR 0 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PPUSH
45102: CALL_OW 70
45106: ST_TO_ADDR
// end ;
45107: LD_VAR 0 3
45111: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45112: LD_INT 0
45114: PPUSH
45115: PPUSH
45116: PPUSH
45117: PPUSH
// result := false ;
45118: LD_ADDR_VAR 0 2
45122: PUSH
45123: LD_INT 0
45125: ST_TO_ADDR
// side := GetSide ( unit ) ;
45126: LD_ADDR_VAR 0 3
45130: PUSH
45131: LD_VAR 0 1
45135: PPUSH
45136: CALL_OW 255
45140: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45141: LD_ADDR_VAR 0 4
45145: PUSH
45146: LD_VAR 0 1
45150: PPUSH
45151: CALL_OW 248
45155: ST_TO_ADDR
// case nat of 1 :
45156: LD_VAR 0 4
45160: PUSH
45161: LD_INT 1
45163: DOUBLE
45164: EQUAL
45165: IFTRUE 45169
45167: GO 45180
45169: POP
// tech := tech_lassight ; 2 :
45170: LD_ADDR_VAR 0 5
45174: PUSH
45175: LD_INT 12
45177: ST_TO_ADDR
45178: GO 45219
45180: LD_INT 2
45182: DOUBLE
45183: EQUAL
45184: IFTRUE 45188
45186: GO 45199
45188: POP
// tech := tech_mortar ; 3 :
45189: LD_ADDR_VAR 0 5
45193: PUSH
45194: LD_INT 41
45196: ST_TO_ADDR
45197: GO 45219
45199: LD_INT 3
45201: DOUBLE
45202: EQUAL
45203: IFTRUE 45207
45205: GO 45218
45207: POP
// tech := tech_bazooka ; end ;
45208: LD_ADDR_VAR 0 5
45212: PUSH
45213: LD_INT 44
45215: ST_TO_ADDR
45216: GO 45219
45218: POP
// if Researched ( side , tech ) then
45219: LD_VAR 0 3
45223: PPUSH
45224: LD_VAR 0 5
45228: PPUSH
45229: CALL_OW 325
45233: IFFALSE 45260
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45235: LD_ADDR_VAR 0 2
45239: PUSH
45240: LD_INT 5
45242: PUSH
45243: LD_INT 8
45245: PUSH
45246: LD_INT 9
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: PUSH
45254: LD_VAR 0 4
45258: ARRAY
45259: ST_TO_ADDR
// end ;
45260: LD_VAR 0 2
45264: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45265: LD_INT 0
45267: PPUSH
45268: PPUSH
45269: PPUSH
// if not mines then
45270: LD_VAR 0 2
45274: NOT
45275: IFFALSE 45279
// exit ;
45277: GO 45423
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45279: LD_ADDR_VAR 0 5
45283: PUSH
45284: LD_INT 81
45286: PUSH
45287: LD_VAR 0 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 21
45301: PUSH
45302: LD_INT 3
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PPUSH
45317: CALL_OW 69
45321: ST_TO_ADDR
// for i in mines do
45322: LD_ADDR_VAR 0 4
45326: PUSH
45327: LD_VAR 0 2
45331: PUSH
45332: FOR_IN
45333: IFFALSE 45421
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45335: LD_VAR 0 4
45339: PUSH
45340: LD_INT 1
45342: ARRAY
45343: PPUSH
45344: LD_VAR 0 4
45348: PUSH
45349: LD_INT 2
45351: ARRAY
45352: PPUSH
45353: CALL_OW 458
45357: NOT
45358: IFFALSE 45362
// continue ;
45360: GO 45332
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45362: LD_VAR 0 4
45366: PUSH
45367: LD_INT 1
45369: ARRAY
45370: PPUSH
45371: LD_VAR 0 4
45375: PUSH
45376: LD_INT 2
45378: ARRAY
45379: PPUSH
45380: CALL_OW 428
45384: PUSH
45385: LD_VAR 0 5
45389: IN
45390: IFFALSE 45419
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45392: LD_VAR 0 4
45396: PUSH
45397: LD_INT 1
45399: ARRAY
45400: PPUSH
45401: LD_VAR 0 4
45405: PUSH
45406: LD_INT 2
45408: ARRAY
45409: PPUSH
45410: LD_VAR 0 1
45414: PPUSH
45415: CALL_OW 456
// end ;
45419: GO 45332
45421: POP
45422: POP
// end ;
45423: LD_VAR 0 3
45427: RET
// export function Count ( array ) ; begin
45428: LD_INT 0
45430: PPUSH
// result := array + 0 ;
45431: LD_ADDR_VAR 0 2
45435: PUSH
45436: LD_VAR 0 1
45440: PUSH
45441: LD_INT 0
45443: PLUS
45444: ST_TO_ADDR
// end ;
45445: LD_VAR 0 2
45449: RET
// export function IsEmpty ( building ) ; begin
45450: LD_INT 0
45452: PPUSH
// if not building then
45453: LD_VAR 0 1
45457: NOT
45458: IFFALSE 45462
// exit ;
45460: GO 45505
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45462: LD_ADDR_VAR 0 2
45466: PUSH
45467: LD_VAR 0 1
45471: PUSH
45472: LD_INT 22
45474: PUSH
45475: LD_VAR 0 1
45479: PPUSH
45480: CALL_OW 255
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 58
45491: PUSH
45492: EMPTY
45493: LIST
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PPUSH
45499: CALL_OW 69
45503: IN
45504: ST_TO_ADDR
// end ;
45505: LD_VAR 0 2
45509: RET
// export function IsNotFull ( building ) ; var places ; begin
45510: LD_INT 0
45512: PPUSH
45513: PPUSH
// if not building then
45514: LD_VAR 0 1
45518: NOT
45519: IFFALSE 45523
// exit ;
45521: GO 45551
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
45523: LD_ADDR_VAR 0 2
45527: PUSH
45528: LD_VAR 0 1
45532: PPUSH
45533: LD_INT 3
45535: PUSH
45536: LD_INT 62
45538: PUSH
45539: EMPTY
45540: LIST
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PPUSH
45546: CALL_OW 72
45550: ST_TO_ADDR
// end ;
45551: LD_VAR 0 2
45555: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
45556: LD_INT 0
45558: PPUSH
45559: PPUSH
45560: PPUSH
45561: PPUSH
// tmp := [ ] ;
45562: LD_ADDR_VAR 0 3
45566: PUSH
45567: EMPTY
45568: ST_TO_ADDR
// list := [ ] ;
45569: LD_ADDR_VAR 0 5
45573: PUSH
45574: EMPTY
45575: ST_TO_ADDR
// for i = 16 to 25 do
45576: LD_ADDR_VAR 0 4
45580: PUSH
45581: DOUBLE
45582: LD_INT 16
45584: DEC
45585: ST_TO_ADDR
45586: LD_INT 25
45588: PUSH
45589: FOR_TO
45590: IFFALSE 45663
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
45592: LD_ADDR_VAR 0 3
45596: PUSH
45597: LD_VAR 0 3
45601: PUSH
45602: LD_INT 22
45604: PUSH
45605: LD_VAR 0 1
45609: PPUSH
45610: CALL_OW 255
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 91
45621: PUSH
45622: LD_VAR 0 1
45626: PUSH
45627: LD_INT 6
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 30
45637: PUSH
45638: LD_VAR 0 4
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: PUSH
45652: EMPTY
45653: LIST
45654: PPUSH
45655: CALL_OW 69
45659: ADD
45660: ST_TO_ADDR
45661: GO 45589
45663: POP
45664: POP
// for i = 1 to tmp do
45665: LD_ADDR_VAR 0 4
45669: PUSH
45670: DOUBLE
45671: LD_INT 1
45673: DEC
45674: ST_TO_ADDR
45675: LD_VAR 0 3
45679: PUSH
45680: FOR_TO
45681: IFFALSE 45769
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45683: LD_ADDR_VAR 0 5
45687: PUSH
45688: LD_VAR 0 5
45692: PUSH
45693: LD_VAR 0 3
45697: PUSH
45698: LD_VAR 0 4
45702: ARRAY
45703: PPUSH
45704: CALL_OW 266
45708: PUSH
45709: LD_VAR 0 3
45713: PUSH
45714: LD_VAR 0 4
45718: ARRAY
45719: PPUSH
45720: CALL_OW 250
45724: PUSH
45725: LD_VAR 0 3
45729: PUSH
45730: LD_VAR 0 4
45734: ARRAY
45735: PPUSH
45736: CALL_OW 251
45740: PUSH
45741: LD_VAR 0 3
45745: PUSH
45746: LD_VAR 0 4
45750: ARRAY
45751: PPUSH
45752: CALL_OW 254
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: PUSH
45763: EMPTY
45764: LIST
45765: ADD
45766: ST_TO_ADDR
45767: GO 45680
45769: POP
45770: POP
// result := list ;
45771: LD_ADDR_VAR 0 2
45775: PUSH
45776: LD_VAR 0 5
45780: ST_TO_ADDR
// end ;
45781: LD_VAR 0 2
45785: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45786: LD_INT 0
45788: PPUSH
45789: PPUSH
45790: PPUSH
45791: PPUSH
45792: PPUSH
45793: PPUSH
45794: PPUSH
// if not factory then
45795: LD_VAR 0 1
45799: NOT
45800: IFFALSE 45804
// exit ;
45802: GO 46407
// if control = control_apeman then
45804: LD_VAR 0 4
45808: PUSH
45809: LD_INT 5
45811: EQUAL
45812: IFFALSE 45921
// begin tmp := UnitsInside ( factory ) ;
45814: LD_ADDR_VAR 0 8
45818: PUSH
45819: LD_VAR 0 1
45823: PPUSH
45824: CALL_OW 313
45828: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45829: LD_VAR 0 8
45833: PPUSH
45834: LD_INT 25
45836: PUSH
45837: LD_INT 12
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PPUSH
45844: CALL_OW 72
45848: NOT
45849: IFFALSE 45859
// control := control_manual ;
45851: LD_ADDR_VAR 0 4
45855: PUSH
45856: LD_INT 1
45858: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45859: LD_ADDR_VAR 0 8
45863: PUSH
45864: LD_VAR 0 1
45868: PPUSH
45869: CALL 45556 0 1
45873: ST_TO_ADDR
// if tmp then
45874: LD_VAR 0 8
45878: IFFALSE 45921
// begin for i in tmp do
45880: LD_ADDR_VAR 0 7
45884: PUSH
45885: LD_VAR 0 8
45889: PUSH
45890: FOR_IN
45891: IFFALSE 45919
// if i [ 1 ] = b_ext_radio then
45893: LD_VAR 0 7
45897: PUSH
45898: LD_INT 1
45900: ARRAY
45901: PUSH
45902: LD_INT 22
45904: EQUAL
45905: IFFALSE 45917
// begin control := control_remote ;
45907: LD_ADDR_VAR 0 4
45911: PUSH
45912: LD_INT 2
45914: ST_TO_ADDR
// break ;
45915: GO 45919
// end ;
45917: GO 45890
45919: POP
45920: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45921: LD_VAR 0 1
45925: PPUSH
45926: LD_VAR 0 2
45930: PPUSH
45931: LD_VAR 0 3
45935: PPUSH
45936: LD_VAR 0 4
45940: PPUSH
45941: LD_VAR 0 5
45945: PPUSH
45946: CALL_OW 448
45950: IFFALSE 45985
// begin result := [ chassis , engine , control , weapon ] ;
45952: LD_ADDR_VAR 0 6
45956: PUSH
45957: LD_VAR 0 2
45961: PUSH
45962: LD_VAR 0 3
45966: PUSH
45967: LD_VAR 0 4
45971: PUSH
45972: LD_VAR 0 5
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: ST_TO_ADDR
// exit ;
45983: GO 46407
// end ; _chassis := AvailableChassisList ( factory ) ;
45985: LD_ADDR_VAR 0 9
45989: PUSH
45990: LD_VAR 0 1
45994: PPUSH
45995: CALL_OW 475
45999: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46000: LD_ADDR_VAR 0 11
46004: PUSH
46005: LD_VAR 0 1
46009: PPUSH
46010: CALL_OW 476
46014: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46015: LD_ADDR_VAR 0 12
46019: PUSH
46020: LD_VAR 0 1
46024: PPUSH
46025: CALL_OW 477
46029: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46030: LD_ADDR_VAR 0 10
46034: PUSH
46035: LD_VAR 0 1
46039: PPUSH
46040: CALL_OW 478
46044: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46045: LD_VAR 0 9
46049: NOT
46050: IFTRUE 46059
46052: PUSH
46053: LD_VAR 0 11
46057: NOT
46058: OR
46059: IFTRUE 46068
46061: PUSH
46062: LD_VAR 0 12
46066: NOT
46067: OR
46068: IFTRUE 46077
46070: PUSH
46071: LD_VAR 0 10
46075: NOT
46076: OR
46077: IFFALSE 46112
// begin result := [ chassis , engine , control , weapon ] ;
46079: LD_ADDR_VAR 0 6
46083: PUSH
46084: LD_VAR 0 2
46088: PUSH
46089: LD_VAR 0 3
46093: PUSH
46094: LD_VAR 0 4
46098: PUSH
46099: LD_VAR 0 5
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: ST_TO_ADDR
// exit ;
46110: GO 46407
// end ; if not chassis in _chassis then
46112: LD_VAR 0 2
46116: PUSH
46117: LD_VAR 0 9
46121: IN
46122: NOT
46123: IFFALSE 46149
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46125: LD_ADDR_VAR 0 2
46129: PUSH
46130: LD_VAR 0 9
46134: PUSH
46135: LD_INT 1
46137: PPUSH
46138: LD_VAR 0 9
46142: PPUSH
46143: CALL_OW 12
46147: ARRAY
46148: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46149: LD_VAR 0 2
46153: PPUSH
46154: LD_VAR 0 3
46158: PPUSH
46159: CALL 46412 0 2
46163: NOT
46164: IFFALSE 46225
// repeat engine := _engine [ 1 ] ;
46166: LD_ADDR_VAR 0 3
46170: PUSH
46171: LD_VAR 0 11
46175: PUSH
46176: LD_INT 1
46178: ARRAY
46179: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46180: LD_ADDR_VAR 0 11
46184: PUSH
46185: LD_VAR 0 11
46189: PPUSH
46190: LD_INT 1
46192: PPUSH
46193: CALL_OW 3
46197: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46198: LD_VAR 0 2
46202: PPUSH
46203: LD_VAR 0 3
46207: PPUSH
46208: CALL 46412 0 2
46212: IFTRUE 46223
46214: PUSH
46215: LD_VAR 0 11
46219: PUSH
46220: EMPTY
46221: EQUAL
46222: OR
46223: IFFALSE 46166
// if not control in _control then
46225: LD_VAR 0 4
46229: PUSH
46230: LD_VAR 0 12
46234: IN
46235: NOT
46236: IFFALSE 46262
// control := _control [ rand ( 1 , _control ) ] ;
46238: LD_ADDR_VAR 0 4
46242: PUSH
46243: LD_VAR 0 12
46247: PUSH
46248: LD_INT 1
46250: PPUSH
46251: LD_VAR 0 12
46255: PPUSH
46256: CALL_OW 12
46260: ARRAY
46261: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46262: LD_VAR 0 2
46266: PPUSH
46267: LD_VAR 0 5
46271: PPUSH
46272: CALL 46634 0 2
46276: NOT
46277: IFFALSE 46338
// repeat weapon := _weapon [ 1 ] ;
46279: LD_ADDR_VAR 0 5
46283: PUSH
46284: LD_VAR 0 10
46288: PUSH
46289: LD_INT 1
46291: ARRAY
46292: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46293: LD_ADDR_VAR 0 10
46297: PUSH
46298: LD_VAR 0 10
46302: PPUSH
46303: LD_INT 1
46305: PPUSH
46306: CALL_OW 3
46310: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46311: LD_VAR 0 2
46315: PPUSH
46316: LD_VAR 0 5
46320: PPUSH
46321: CALL 46634 0 2
46325: IFTRUE 46336
46327: PUSH
46328: LD_VAR 0 10
46332: PUSH
46333: EMPTY
46334: EQUAL
46335: OR
46336: IFFALSE 46279
// result := [ ] ;
46338: LD_ADDR_VAR 0 6
46342: PUSH
46343: EMPTY
46344: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46345: LD_VAR 0 1
46349: PPUSH
46350: LD_VAR 0 2
46354: PPUSH
46355: LD_VAR 0 3
46359: PPUSH
46360: LD_VAR 0 4
46364: PPUSH
46365: LD_VAR 0 5
46369: PPUSH
46370: CALL_OW 448
46374: IFFALSE 46407
// result := [ chassis , engine , control , weapon ] ;
46376: LD_ADDR_VAR 0 6
46380: PUSH
46381: LD_VAR 0 2
46385: PUSH
46386: LD_VAR 0 3
46390: PUSH
46391: LD_VAR 0 4
46395: PUSH
46396: LD_VAR 0 5
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: ST_TO_ADDR
// end ;
46407: LD_VAR 0 6
46411: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46412: LD_INT 0
46414: PPUSH
// if not chassis or not engine then
46415: LD_VAR 0 1
46419: NOT
46420: IFTRUE 46429
46422: PUSH
46423: LD_VAR 0 2
46427: NOT
46428: OR
46429: IFFALSE 46433
// exit ;
46431: GO 46629
// case engine of engine_solar :
46433: LD_VAR 0 2
46437: PUSH
46438: LD_INT 2
46440: DOUBLE
46441: EQUAL
46442: IFTRUE 46446
46444: GO 46484
46446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
46447: LD_ADDR_VAR 0 3
46451: PUSH
46452: LD_INT 11
46454: PUSH
46455: LD_INT 12
46457: PUSH
46458: LD_INT 13
46460: PUSH
46461: LD_INT 14
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: ST_TO_ADDR
46482: GO 46613
46484: LD_INT 1
46486: DOUBLE
46487: EQUAL
46488: IFTRUE 46492
46490: GO 46554
46492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
46493: LD_ADDR_VAR 0 3
46497: PUSH
46498: LD_INT 11
46500: PUSH
46501: LD_INT 12
46503: PUSH
46504: LD_INT 13
46506: PUSH
46507: LD_INT 14
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: LD_INT 4
46521: PUSH
46522: LD_INT 5
46524: PUSH
46525: LD_INT 21
46527: PUSH
46528: LD_INT 23
46530: PUSH
46531: LD_INT 22
46533: PUSH
46534: LD_INT 24
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: ST_TO_ADDR
46552: GO 46613
46554: LD_INT 3
46556: DOUBLE
46557: EQUAL
46558: IFTRUE 46562
46560: GO 46612
46562: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46563: LD_ADDR_VAR 0 3
46567: PUSH
46568: LD_INT 13
46570: PUSH
46571: LD_INT 14
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: LD_INT 4
46582: PUSH
46583: LD_INT 5
46585: PUSH
46586: LD_INT 21
46588: PUSH
46589: LD_INT 22
46591: PUSH
46592: LD_INT 23
46594: PUSH
46595: LD_INT 24
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: ST_TO_ADDR
46610: GO 46613
46612: POP
// result := ( chassis in result ) ;
46613: LD_ADDR_VAR 0 3
46617: PUSH
46618: LD_VAR 0 1
46622: PUSH
46623: LD_VAR 0 3
46627: IN
46628: ST_TO_ADDR
// end ;
46629: LD_VAR 0 3
46633: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46634: LD_INT 0
46636: PPUSH
// if not chassis or not weapon then
46637: LD_VAR 0 1
46641: NOT
46642: IFTRUE 46651
46644: PUSH
46645: LD_VAR 0 2
46649: NOT
46650: OR
46651: IFFALSE 46655
// exit ;
46653: GO 47749
// case weapon of us_machine_gun :
46655: LD_VAR 0 2
46659: PUSH
46660: LD_INT 2
46662: DOUBLE
46663: EQUAL
46664: IFTRUE 46668
46666: GO 46698
46668: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46669: LD_ADDR_VAR 0 3
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: LD_INT 4
46685: PUSH
46686: LD_INT 5
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: ST_TO_ADDR
46696: GO 47733
46698: LD_INT 3
46700: DOUBLE
46701: EQUAL
46702: IFTRUE 46706
46704: GO 46736
46706: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46707: LD_ADDR_VAR 0 3
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: LD_INT 3
46720: PUSH
46721: LD_INT 4
46723: PUSH
46724: LD_INT 5
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: ST_TO_ADDR
46734: GO 47733
46736: LD_INT 11
46738: DOUBLE
46739: EQUAL
46740: IFTRUE 46744
46742: GO 46774
46744: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46745: LD_ADDR_VAR 0 3
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: LD_INT 3
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: LD_INT 5
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: ST_TO_ADDR
46772: GO 47733
46774: LD_INT 4
46776: DOUBLE
46777: EQUAL
46778: IFTRUE 46782
46780: GO 46808
46782: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46783: LD_ADDR_VAR 0 3
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: LD_INT 3
46793: PUSH
46794: LD_INT 4
46796: PUSH
46797: LD_INT 5
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: ST_TO_ADDR
46806: GO 47733
46808: LD_INT 5
46810: DOUBLE
46811: EQUAL
46812: IFTRUE 46816
46814: GO 46842
46816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46817: LD_ADDR_VAR 0 3
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: LD_INT 3
46827: PUSH
46828: LD_INT 4
46830: PUSH
46831: LD_INT 5
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: ST_TO_ADDR
46840: GO 47733
46842: LD_INT 9
46844: DOUBLE
46845: EQUAL
46846: IFTRUE 46850
46848: GO 46876
46850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46851: LD_ADDR_VAR 0 3
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 3
46861: PUSH
46862: LD_INT 4
46864: PUSH
46865: LD_INT 5
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: ST_TO_ADDR
46874: GO 47733
46876: LD_INT 7
46878: DOUBLE
46879: EQUAL
46880: IFTRUE 46884
46882: GO 46910
46884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46885: LD_ADDR_VAR 0 3
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 3
46895: PUSH
46896: LD_INT 4
46898: PUSH
46899: LD_INT 5
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: ST_TO_ADDR
46908: GO 47733
46910: LD_INT 12
46912: DOUBLE
46913: EQUAL
46914: IFTRUE 46918
46916: GO 46944
46918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46919: LD_ADDR_VAR 0 3
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 3
46929: PUSH
46930: LD_INT 4
46932: PUSH
46933: LD_INT 5
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: ST_TO_ADDR
46942: GO 47733
46944: LD_INT 13
46946: DOUBLE
46947: EQUAL
46948: IFTRUE 46952
46950: GO 46978
46952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46953: LD_ADDR_VAR 0 3
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: LD_INT 3
46963: PUSH
46964: LD_INT 4
46966: PUSH
46967: LD_INT 5
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: ST_TO_ADDR
46976: GO 47733
46978: LD_INT 14
46980: DOUBLE
46981: EQUAL
46982: IFTRUE 46986
46984: GO 47004
46986: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46987: LD_ADDR_VAR 0 3
46991: PUSH
46992: LD_INT 4
46994: PUSH
46995: LD_INT 5
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: ST_TO_ADDR
47002: GO 47733
47004: LD_INT 6
47006: DOUBLE
47007: EQUAL
47008: IFTRUE 47012
47010: GO 47030
47012: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47013: LD_ADDR_VAR 0 3
47017: PUSH
47018: LD_INT 4
47020: PUSH
47021: LD_INT 5
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: ST_TO_ADDR
47028: GO 47733
47030: LD_INT 10
47032: DOUBLE
47033: EQUAL
47034: IFTRUE 47038
47036: GO 47056
47038: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47039: LD_ADDR_VAR 0 3
47043: PUSH
47044: LD_INT 4
47046: PUSH
47047: LD_INT 5
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: ST_TO_ADDR
47054: GO 47733
47056: LD_INT 22
47058: DOUBLE
47059: EQUAL
47060: IFTRUE 47064
47062: GO 47090
47064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47065: LD_ADDR_VAR 0 3
47069: PUSH
47070: LD_INT 11
47072: PUSH
47073: LD_INT 12
47075: PUSH
47076: LD_INT 13
47078: PUSH
47079: LD_INT 14
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
47088: GO 47733
47090: LD_INT 23
47092: DOUBLE
47093: EQUAL
47094: IFTRUE 47098
47096: GO 47124
47098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47099: LD_ADDR_VAR 0 3
47103: PUSH
47104: LD_INT 11
47106: PUSH
47107: LD_INT 12
47109: PUSH
47110: LD_INT 13
47112: PUSH
47113: LD_INT 14
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: ST_TO_ADDR
47122: GO 47733
47124: LD_INT 24
47126: DOUBLE
47127: EQUAL
47128: IFTRUE 47132
47130: GO 47158
47132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47133: LD_ADDR_VAR 0 3
47137: PUSH
47138: LD_INT 11
47140: PUSH
47141: LD_INT 12
47143: PUSH
47144: LD_INT 13
47146: PUSH
47147: LD_INT 14
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: ST_TO_ADDR
47156: GO 47733
47158: LD_INT 30
47160: DOUBLE
47161: EQUAL
47162: IFTRUE 47166
47164: GO 47192
47166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47167: LD_ADDR_VAR 0 3
47171: PUSH
47172: LD_INT 11
47174: PUSH
47175: LD_INT 12
47177: PUSH
47178: LD_INT 13
47180: PUSH
47181: LD_INT 14
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: ST_TO_ADDR
47190: GO 47733
47192: LD_INT 25
47194: DOUBLE
47195: EQUAL
47196: IFTRUE 47200
47198: GO 47218
47200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47201: LD_ADDR_VAR 0 3
47205: PUSH
47206: LD_INT 13
47208: PUSH
47209: LD_INT 14
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: ST_TO_ADDR
47216: GO 47733
47218: LD_INT 27
47220: DOUBLE
47221: EQUAL
47222: IFTRUE 47226
47224: GO 47244
47226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47227: LD_ADDR_VAR 0 3
47231: PUSH
47232: LD_INT 13
47234: PUSH
47235: LD_INT 14
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: ST_TO_ADDR
47242: GO 47733
47244: LD_INT 92
47246: DOUBLE
47247: EQUAL
47248: IFTRUE 47252
47250: GO 47278
47252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47253: LD_ADDR_VAR 0 3
47257: PUSH
47258: LD_INT 11
47260: PUSH
47261: LD_INT 12
47263: PUSH
47264: LD_INT 13
47266: PUSH
47267: LD_INT 14
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: ST_TO_ADDR
47276: GO 47733
47278: LD_INT 28
47280: DOUBLE
47281: EQUAL
47282: IFTRUE 47286
47284: GO 47304
47286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47287: LD_ADDR_VAR 0 3
47291: PUSH
47292: LD_INT 13
47294: PUSH
47295: LD_INT 14
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: ST_TO_ADDR
47302: GO 47733
47304: LD_INT 29
47306: DOUBLE
47307: EQUAL
47308: IFTRUE 47312
47310: GO 47330
47312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47313: LD_ADDR_VAR 0 3
47317: PUSH
47318: LD_INT 13
47320: PUSH
47321: LD_INT 14
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: ST_TO_ADDR
47328: GO 47733
47330: LD_INT 31
47332: DOUBLE
47333: EQUAL
47334: IFTRUE 47338
47336: GO 47356
47338: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47339: LD_ADDR_VAR 0 3
47343: PUSH
47344: LD_INT 13
47346: PUSH
47347: LD_INT 14
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: ST_TO_ADDR
47354: GO 47733
47356: LD_INT 26
47358: DOUBLE
47359: EQUAL
47360: IFTRUE 47364
47362: GO 47382
47364: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47365: LD_ADDR_VAR 0 3
47369: PUSH
47370: LD_INT 13
47372: PUSH
47373: LD_INT 14
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: ST_TO_ADDR
47380: GO 47733
47382: LD_INT 42
47384: DOUBLE
47385: EQUAL
47386: IFTRUE 47390
47388: GO 47416
47390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47391: LD_ADDR_VAR 0 3
47395: PUSH
47396: LD_INT 21
47398: PUSH
47399: LD_INT 22
47401: PUSH
47402: LD_INT 23
47404: PUSH
47405: LD_INT 24
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: ST_TO_ADDR
47414: GO 47733
47416: LD_INT 43
47418: DOUBLE
47419: EQUAL
47420: IFTRUE 47424
47422: GO 47450
47424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47425: LD_ADDR_VAR 0 3
47429: PUSH
47430: LD_INT 21
47432: PUSH
47433: LD_INT 22
47435: PUSH
47436: LD_INT 23
47438: PUSH
47439: LD_INT 24
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: ST_TO_ADDR
47448: GO 47733
47450: LD_INT 44
47452: DOUBLE
47453: EQUAL
47454: IFTRUE 47458
47456: GO 47484
47458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
47459: LD_ADDR_VAR 0 3
47463: PUSH
47464: LD_INT 21
47466: PUSH
47467: LD_INT 22
47469: PUSH
47470: LD_INT 23
47472: PUSH
47473: LD_INT 24
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: ST_TO_ADDR
47482: GO 47733
47484: LD_INT 45
47486: DOUBLE
47487: EQUAL
47488: IFTRUE 47492
47490: GO 47518
47492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
47493: LD_ADDR_VAR 0 3
47497: PUSH
47498: LD_INT 21
47500: PUSH
47501: LD_INT 22
47503: PUSH
47504: LD_INT 23
47506: PUSH
47507: LD_INT 24
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: ST_TO_ADDR
47516: GO 47733
47518: LD_INT 49
47520: DOUBLE
47521: EQUAL
47522: IFTRUE 47526
47524: GO 47552
47526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
47527: LD_ADDR_VAR 0 3
47531: PUSH
47532: LD_INT 21
47534: PUSH
47535: LD_INT 22
47537: PUSH
47538: LD_INT 23
47540: PUSH
47541: LD_INT 24
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: ST_TO_ADDR
47550: GO 47733
47552: LD_INT 51
47554: DOUBLE
47555: EQUAL
47556: IFTRUE 47560
47558: GO 47586
47560: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
47561: LD_ADDR_VAR 0 3
47565: PUSH
47566: LD_INT 21
47568: PUSH
47569: LD_INT 22
47571: PUSH
47572: LD_INT 23
47574: PUSH
47575: LD_INT 24
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: ST_TO_ADDR
47584: GO 47733
47586: LD_INT 52
47588: DOUBLE
47589: EQUAL
47590: IFTRUE 47594
47592: GO 47620
47594: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
47595: LD_ADDR_VAR 0 3
47599: PUSH
47600: LD_INT 21
47602: PUSH
47603: LD_INT 22
47605: PUSH
47606: LD_INT 23
47608: PUSH
47609: LD_INT 24
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: ST_TO_ADDR
47618: GO 47733
47620: LD_INT 53
47622: DOUBLE
47623: EQUAL
47624: IFTRUE 47628
47626: GO 47646
47628: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47629: LD_ADDR_VAR 0 3
47633: PUSH
47634: LD_INT 23
47636: PUSH
47637: LD_INT 24
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: ST_TO_ADDR
47644: GO 47733
47646: LD_INT 46
47648: DOUBLE
47649: EQUAL
47650: IFTRUE 47654
47652: GO 47672
47654: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47655: LD_ADDR_VAR 0 3
47659: PUSH
47660: LD_INT 23
47662: PUSH
47663: LD_INT 24
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: ST_TO_ADDR
47670: GO 47733
47672: LD_INT 47
47674: DOUBLE
47675: EQUAL
47676: IFTRUE 47680
47678: GO 47698
47680: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
47681: LD_ADDR_VAR 0 3
47685: PUSH
47686: LD_INT 23
47688: PUSH
47689: LD_INT 24
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: ST_TO_ADDR
47696: GO 47733
47698: LD_INT 98
47700: DOUBLE
47701: EQUAL
47702: IFTRUE 47706
47704: GO 47732
47706: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47707: LD_ADDR_VAR 0 3
47711: PUSH
47712: LD_INT 21
47714: PUSH
47715: LD_INT 22
47717: PUSH
47718: LD_INT 23
47720: PUSH
47721: LD_INT 24
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: ST_TO_ADDR
47730: GO 47733
47732: POP
// result := ( chassis in result ) ;
47733: LD_ADDR_VAR 0 3
47737: PUSH
47738: LD_VAR 0 1
47742: PUSH
47743: LD_VAR 0 3
47747: IN
47748: ST_TO_ADDR
// end ;
47749: LD_VAR 0 3
47753: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47754: LD_INT 0
47756: PPUSH
47757: PPUSH
47758: PPUSH
47759: PPUSH
47760: PPUSH
47761: PPUSH
47762: PPUSH
// result := array ;
47763: LD_ADDR_VAR 0 5
47767: PUSH
47768: LD_VAR 0 1
47772: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47773: LD_VAR 0 1
47777: NOT
47778: IFTRUE 47787
47780: PUSH
47781: LD_VAR 0 2
47785: NOT
47786: OR
47787: IFTRUE 47796
47789: PUSH
47790: LD_VAR 0 3
47794: NOT
47795: OR
47796: IFTRUE 47810
47798: PUSH
47799: LD_VAR 0 2
47803: PUSH
47804: LD_VAR 0 1
47808: GREATER
47809: OR
47810: IFTRUE 47824
47812: PUSH
47813: LD_VAR 0 3
47817: PUSH
47818: LD_VAR 0 1
47822: GREATER
47823: OR
47824: IFFALSE 47828
// exit ;
47826: GO 48124
// if direction then
47828: LD_VAR 0 4
47832: IFFALSE 47896
// begin d := 1 ;
47834: LD_ADDR_VAR 0 9
47838: PUSH
47839: LD_INT 1
47841: ST_TO_ADDR
// if i_from > i_to then
47842: LD_VAR 0 2
47846: PUSH
47847: LD_VAR 0 3
47851: GREATER
47852: IFFALSE 47878
// length := ( array - i_from ) + i_to else
47854: LD_ADDR_VAR 0 11
47858: PUSH
47859: LD_VAR 0 1
47863: PUSH
47864: LD_VAR 0 2
47868: MINUS
47869: PUSH
47870: LD_VAR 0 3
47874: PLUS
47875: ST_TO_ADDR
47876: GO 47894
// length := i_to - i_from ;
47878: LD_ADDR_VAR 0 11
47882: PUSH
47883: LD_VAR 0 3
47887: PUSH
47888: LD_VAR 0 2
47892: MINUS
47893: ST_TO_ADDR
// end else
47894: GO 47957
// begin d := - 1 ;
47896: LD_ADDR_VAR 0 9
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: ST_TO_ADDR
// if i_from > i_to then
47905: LD_VAR 0 2
47909: PUSH
47910: LD_VAR 0 3
47914: GREATER
47915: IFFALSE 47935
// length := i_from - i_to else
47917: LD_ADDR_VAR 0 11
47921: PUSH
47922: LD_VAR 0 2
47926: PUSH
47927: LD_VAR 0 3
47931: MINUS
47932: ST_TO_ADDR
47933: GO 47957
// length := ( array - i_to ) + i_from ;
47935: LD_ADDR_VAR 0 11
47939: PUSH
47940: LD_VAR 0 1
47944: PUSH
47945: LD_VAR 0 3
47949: MINUS
47950: PUSH
47951: LD_VAR 0 2
47955: PLUS
47956: ST_TO_ADDR
// end ; if not length then
47957: LD_VAR 0 11
47961: NOT
47962: IFFALSE 47966
// exit ;
47964: GO 48124
// tmp := array ;
47966: LD_ADDR_VAR 0 10
47970: PUSH
47971: LD_VAR 0 1
47975: ST_TO_ADDR
// for i = 1 to length do
47976: LD_ADDR_VAR 0 6
47980: PUSH
47981: DOUBLE
47982: LD_INT 1
47984: DEC
47985: ST_TO_ADDR
47986: LD_VAR 0 11
47990: PUSH
47991: FOR_TO
47992: IFFALSE 48112
// begin for j = 1 to array do
47994: LD_ADDR_VAR 0 7
47998: PUSH
47999: DOUBLE
48000: LD_INT 1
48002: DEC
48003: ST_TO_ADDR
48004: LD_VAR 0 1
48008: PUSH
48009: FOR_TO
48010: IFFALSE 48098
// begin k := j + d ;
48012: LD_ADDR_VAR 0 8
48016: PUSH
48017: LD_VAR 0 7
48021: PUSH
48022: LD_VAR 0 9
48026: PLUS
48027: ST_TO_ADDR
// if k > array then
48028: LD_VAR 0 8
48032: PUSH
48033: LD_VAR 0 1
48037: GREATER
48038: IFFALSE 48048
// k := 1 ;
48040: LD_ADDR_VAR 0 8
48044: PUSH
48045: LD_INT 1
48047: ST_TO_ADDR
// if not k then
48048: LD_VAR 0 8
48052: NOT
48053: IFFALSE 48065
// k := array ;
48055: LD_ADDR_VAR 0 8
48059: PUSH
48060: LD_VAR 0 1
48064: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48065: LD_ADDR_VAR 0 10
48069: PUSH
48070: LD_VAR 0 10
48074: PPUSH
48075: LD_VAR 0 8
48079: PPUSH
48080: LD_VAR 0 1
48084: PUSH
48085: LD_VAR 0 7
48089: ARRAY
48090: PPUSH
48091: CALL_OW 1
48095: ST_TO_ADDR
// end ;
48096: GO 48009
48098: POP
48099: POP
// array := tmp ;
48100: LD_ADDR_VAR 0 1
48104: PUSH
48105: LD_VAR 0 10
48109: ST_TO_ADDR
// end ;
48110: GO 47991
48112: POP
48113: POP
// result := array ;
48114: LD_ADDR_VAR 0 5
48118: PUSH
48119: LD_VAR 0 1
48123: ST_TO_ADDR
// end ;
48124: LD_VAR 0 5
48128: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48129: LD_INT 0
48131: PPUSH
48132: PPUSH
// result := 0 ;
48133: LD_ADDR_VAR 0 3
48137: PUSH
48138: LD_INT 0
48140: ST_TO_ADDR
// if not array or not value in array then
48141: LD_VAR 0 1
48145: NOT
48146: IFTRUE 48161
48148: PUSH
48149: LD_VAR 0 2
48153: PUSH
48154: LD_VAR 0 1
48158: IN
48159: NOT
48160: OR
48161: IFFALSE 48165
// exit ;
48163: GO 48219
// for i = 1 to array do
48165: LD_ADDR_VAR 0 4
48169: PUSH
48170: DOUBLE
48171: LD_INT 1
48173: DEC
48174: ST_TO_ADDR
48175: LD_VAR 0 1
48179: PUSH
48180: FOR_TO
48181: IFFALSE 48217
// if value = array [ i ] then
48183: LD_VAR 0 2
48187: PUSH
48188: LD_VAR 0 1
48192: PUSH
48193: LD_VAR 0 4
48197: ARRAY
48198: EQUAL
48199: IFFALSE 48215
// begin result := i ;
48201: LD_ADDR_VAR 0 3
48205: PUSH
48206: LD_VAR 0 4
48210: ST_TO_ADDR
// exit ;
48211: POP
48212: POP
48213: GO 48219
// end ;
48215: GO 48180
48217: POP
48218: POP
// end ;
48219: LD_VAR 0 3
48223: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48224: LD_INT 0
48226: PPUSH
// vc_chassis := chassis ;
48227: LD_ADDR_OWVAR 37
48231: PUSH
48232: LD_VAR 0 1
48236: ST_TO_ADDR
// vc_engine := engine ;
48237: LD_ADDR_OWVAR 39
48241: PUSH
48242: LD_VAR 0 2
48246: ST_TO_ADDR
// vc_control := control ;
48247: LD_ADDR_OWVAR 38
48251: PUSH
48252: LD_VAR 0 3
48256: ST_TO_ADDR
// vc_weapon := weapon ;
48257: LD_ADDR_OWVAR 40
48261: PUSH
48262: LD_VAR 0 4
48266: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48267: LD_ADDR_OWVAR 41
48271: PUSH
48272: LD_VAR 0 5
48276: ST_TO_ADDR
// end ;
48277: LD_VAR 0 6
48281: RET
// export function WantPlant ( unit ) ; var task ; begin
48282: LD_INT 0
48284: PPUSH
48285: PPUSH
// result := false ;
48286: LD_ADDR_VAR 0 2
48290: PUSH
48291: LD_INT 0
48293: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48294: LD_ADDR_VAR 0 3
48298: PUSH
48299: LD_VAR 0 1
48303: PPUSH
48304: CALL_OW 437
48308: ST_TO_ADDR
// if task then
48309: LD_VAR 0 3
48313: IFFALSE 48341
// if task [ 1 ] [ 1 ] = p then
48315: LD_VAR 0 3
48319: PUSH
48320: LD_INT 1
48322: ARRAY
48323: PUSH
48324: LD_INT 1
48326: ARRAY
48327: PUSH
48328: LD_STRING p
48330: EQUAL
48331: IFFALSE 48341
// result := true ;
48333: LD_ADDR_VAR 0 2
48337: PUSH
48338: LD_INT 1
48340: ST_TO_ADDR
// end ;
48341: LD_VAR 0 2
48345: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48346: LD_INT 0
48348: PPUSH
48349: PPUSH
48350: PPUSH
48351: PPUSH
// if pos < 1 then
48352: LD_VAR 0 2
48356: PUSH
48357: LD_INT 1
48359: LESS
48360: IFFALSE 48364
// exit ;
48362: GO 48667
// if pos = 1 then
48364: LD_VAR 0 2
48368: PUSH
48369: LD_INT 1
48371: EQUAL
48372: IFFALSE 48405
// result := Replace ( arr , pos [ 1 ] , value ) else
48374: LD_ADDR_VAR 0 4
48378: PUSH
48379: LD_VAR 0 1
48383: PPUSH
48384: LD_VAR 0 2
48388: PUSH
48389: LD_INT 1
48391: ARRAY
48392: PPUSH
48393: LD_VAR 0 3
48397: PPUSH
48398: CALL_OW 1
48402: ST_TO_ADDR
48403: GO 48667
// begin tmp := arr ;
48405: LD_ADDR_VAR 0 6
48409: PUSH
48410: LD_VAR 0 1
48414: ST_TO_ADDR
// s_arr := [ tmp ] ;
48415: LD_ADDR_VAR 0 7
48419: PUSH
48420: LD_VAR 0 6
48424: PUSH
48425: EMPTY
48426: LIST
48427: ST_TO_ADDR
// for i = 1 to pos - 1 do
48428: LD_ADDR_VAR 0 5
48432: PUSH
48433: DOUBLE
48434: LD_INT 1
48436: DEC
48437: ST_TO_ADDR
48438: LD_VAR 0 2
48442: PUSH
48443: LD_INT 1
48445: MINUS
48446: PUSH
48447: FOR_TO
48448: IFFALSE 48493
// begin tmp := tmp [ pos [ i ] ] ;
48450: LD_ADDR_VAR 0 6
48454: PUSH
48455: LD_VAR 0 6
48459: PUSH
48460: LD_VAR 0 2
48464: PUSH
48465: LD_VAR 0 5
48469: ARRAY
48470: ARRAY
48471: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48472: LD_ADDR_VAR 0 7
48476: PUSH
48477: LD_VAR 0 7
48481: PUSH
48482: LD_VAR 0 6
48486: PUSH
48487: EMPTY
48488: LIST
48489: ADD
48490: ST_TO_ADDR
// end ;
48491: GO 48447
48493: POP
48494: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
48495: LD_ADDR_VAR 0 6
48499: PUSH
48500: LD_VAR 0 6
48504: PPUSH
48505: LD_VAR 0 2
48509: PUSH
48510: LD_VAR 0 2
48514: ARRAY
48515: PPUSH
48516: LD_VAR 0 3
48520: PPUSH
48521: CALL_OW 1
48525: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
48526: LD_ADDR_VAR 0 7
48530: PUSH
48531: LD_VAR 0 7
48535: PPUSH
48536: LD_VAR 0 7
48540: PPUSH
48541: LD_VAR 0 6
48545: PPUSH
48546: CALL_OW 1
48550: ST_TO_ADDR
// for i = s_arr downto 2 do
48551: LD_ADDR_VAR 0 5
48555: PUSH
48556: DOUBLE
48557: LD_VAR 0 7
48561: INC
48562: ST_TO_ADDR
48563: LD_INT 2
48565: PUSH
48566: FOR_DOWNTO
48567: IFFALSE 48651
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
48569: LD_ADDR_VAR 0 6
48573: PUSH
48574: LD_VAR 0 7
48578: PUSH
48579: LD_VAR 0 5
48583: PUSH
48584: LD_INT 1
48586: MINUS
48587: ARRAY
48588: PPUSH
48589: LD_VAR 0 2
48593: PUSH
48594: LD_VAR 0 5
48598: PUSH
48599: LD_INT 1
48601: MINUS
48602: ARRAY
48603: PPUSH
48604: LD_VAR 0 7
48608: PUSH
48609: LD_VAR 0 5
48613: ARRAY
48614: PPUSH
48615: CALL_OW 1
48619: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48620: LD_ADDR_VAR 0 7
48624: PUSH
48625: LD_VAR 0 7
48629: PPUSH
48630: LD_VAR 0 5
48634: PUSH
48635: LD_INT 1
48637: MINUS
48638: PPUSH
48639: LD_VAR 0 6
48643: PPUSH
48644: CALL_OW 1
48648: ST_TO_ADDR
// end ;
48649: GO 48566
48651: POP
48652: POP
// result := s_arr [ 1 ] ;
48653: LD_ADDR_VAR 0 4
48657: PUSH
48658: LD_VAR 0 7
48662: PUSH
48663: LD_INT 1
48665: ARRAY
48666: ST_TO_ADDR
// end ; end ;
48667: LD_VAR 0 4
48671: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48672: LD_INT 0
48674: PPUSH
48675: PPUSH
// if not list then
48676: LD_VAR 0 1
48680: NOT
48681: IFFALSE 48685
// exit ;
48683: GO 48776
// i := list [ pos1 ] ;
48685: LD_ADDR_VAR 0 5
48689: PUSH
48690: LD_VAR 0 1
48694: PUSH
48695: LD_VAR 0 2
48699: ARRAY
48700: ST_TO_ADDR
// if not i then
48701: LD_VAR 0 5
48705: NOT
48706: IFFALSE 48710
// exit ;
48708: GO 48776
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48710: LD_ADDR_VAR 0 1
48714: PUSH
48715: LD_VAR 0 1
48719: PPUSH
48720: LD_VAR 0 2
48724: PPUSH
48725: LD_VAR 0 1
48729: PUSH
48730: LD_VAR 0 3
48734: ARRAY
48735: PPUSH
48736: CALL_OW 1
48740: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48741: LD_ADDR_VAR 0 1
48745: PUSH
48746: LD_VAR 0 1
48750: PPUSH
48751: LD_VAR 0 3
48755: PPUSH
48756: LD_VAR 0 5
48760: PPUSH
48761: CALL_OW 1
48765: ST_TO_ADDR
// result := list ;
48766: LD_ADDR_VAR 0 4
48770: PUSH
48771: LD_VAR 0 1
48775: ST_TO_ADDR
// end ;
48776: LD_VAR 0 4
48780: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48781: LD_INT 0
48783: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48784: LD_ADDR_VAR 0 5
48788: PUSH
48789: LD_VAR 0 1
48793: PPUSH
48794: CALL_OW 250
48798: PPUSH
48799: LD_VAR 0 1
48803: PPUSH
48804: CALL_OW 251
48808: PPUSH
48809: LD_VAR 0 2
48813: PPUSH
48814: LD_VAR 0 3
48818: PPUSH
48819: LD_VAR 0 4
48823: PPUSH
48824: CALL 49206 0 5
48828: ST_TO_ADDR
// end ;
48829: LD_VAR 0 5
48833: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48834: LD_INT 0
48836: PPUSH
48837: PPUSH
48838: PPUSH
48839: PPUSH
// if not list or not unit then
48840: LD_VAR 0 2
48844: NOT
48845: IFTRUE 48854
48847: PUSH
48848: LD_VAR 0 1
48852: NOT
48853: OR
48854: IFFALSE 48858
// exit ;
48856: GO 49201
// result := [ ] ;
48858: LD_ADDR_VAR 0 5
48862: PUSH
48863: EMPTY
48864: ST_TO_ADDR
// for i in list do
48865: LD_ADDR_VAR 0 6
48869: PUSH
48870: LD_VAR 0 2
48874: PUSH
48875: FOR_IN
48876: IFFALSE 49094
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48878: LD_ADDR_VAR 0 8
48882: PUSH
48883: LD_VAR 0 1
48887: PPUSH
48888: LD_VAR 0 6
48892: PUSH
48893: LD_INT 1
48895: ARRAY
48896: PPUSH
48897: LD_VAR 0 6
48901: PUSH
48902: LD_INT 2
48904: ARRAY
48905: PPUSH
48906: CALL_OW 297
48910: ST_TO_ADDR
// if not Count ( result ) then
48911: LD_VAR 0 5
48915: PPUSH
48916: CALL 45428 0 1
48920: NOT
48921: IFFALSE 48954
// begin result := Join ( result , [ i , tmp ] ) ;
48923: LD_ADDR_VAR 0 5
48927: PUSH
48928: LD_VAR 0 5
48932: PPUSH
48933: LD_VAR 0 6
48937: PUSH
48938: LD_VAR 0 8
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PPUSH
48947: CALL 81404 0 2
48951: ST_TO_ADDR
// continue ;
48952: GO 48875
// end ; if result [ result ] [ 2 ] <= tmp then
48954: LD_VAR 0 5
48958: PUSH
48959: LD_VAR 0 5
48963: ARRAY
48964: PUSH
48965: LD_INT 2
48967: ARRAY
48968: PUSH
48969: LD_VAR 0 8
48973: LESSEQUAL
48974: IFFALSE 49007
// result := Join ( result , [ i , tmp ] ) else
48976: LD_ADDR_VAR 0 5
48980: PUSH
48981: LD_VAR 0 5
48985: PPUSH
48986: LD_VAR 0 6
48990: PUSH
48991: LD_VAR 0 8
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PPUSH
49000: CALL 81404 0 2
49004: ST_TO_ADDR
49005: GO 49092
// begin for j := 1 to Count ( result ) do
49007: LD_ADDR_VAR 0 7
49011: PUSH
49012: DOUBLE
49013: LD_INT 1
49015: DEC
49016: ST_TO_ADDR
49017: LD_VAR 0 5
49021: PPUSH
49022: CALL 45428 0 1
49026: PUSH
49027: FOR_TO
49028: IFFALSE 49090
// begin if tmp < result [ j ] [ 2 ] then
49030: LD_VAR 0 8
49034: PUSH
49035: LD_VAR 0 5
49039: PUSH
49040: LD_VAR 0 7
49044: ARRAY
49045: PUSH
49046: LD_INT 2
49048: ARRAY
49049: LESS
49050: IFFALSE 49088
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49052: LD_ADDR_VAR 0 5
49056: PUSH
49057: LD_VAR 0 5
49061: PPUSH
49062: LD_VAR 0 7
49066: PPUSH
49067: LD_VAR 0 6
49071: PUSH
49072: LD_VAR 0 8
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PPUSH
49081: CALL_OW 2
49085: ST_TO_ADDR
// break ;
49086: GO 49090
// end ; end ;
49088: GO 49027
49090: POP
49091: POP
// end ; end ;
49092: GO 48875
49094: POP
49095: POP
// if result and not asc then
49096: LD_VAR 0 5
49100: IFFALSE 49109
49102: PUSH
49103: LD_VAR 0 3
49107: NOT
49108: AND
49109: IFFALSE 49126
// result := ReverseArray ( result ) ;
49111: LD_ADDR_VAR 0 5
49115: PUSH
49116: LD_VAR 0 5
49120: PPUSH
49121: CALL 76484 0 1
49125: ST_TO_ADDR
// tmp := [ ] ;
49126: LD_ADDR_VAR 0 8
49130: PUSH
49131: EMPTY
49132: ST_TO_ADDR
// if mode then
49133: LD_VAR 0 4
49137: IFFALSE 49201
// begin for i := 1 to result do
49139: LD_ADDR_VAR 0 6
49143: PUSH
49144: DOUBLE
49145: LD_INT 1
49147: DEC
49148: ST_TO_ADDR
49149: LD_VAR 0 5
49153: PUSH
49154: FOR_TO
49155: IFFALSE 49189
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
49157: LD_ADDR_VAR 0 8
49161: PUSH
49162: LD_VAR 0 8
49166: PPUSH
49167: LD_VAR 0 5
49171: PUSH
49172: LD_VAR 0 6
49176: ARRAY
49177: PUSH
49178: LD_INT 1
49180: ARRAY
49181: PPUSH
49182: CALL 81404 0 2
49186: ST_TO_ADDR
49187: GO 49154
49189: POP
49190: POP
// result := tmp ;
49191: LD_ADDR_VAR 0 5
49195: PUSH
49196: LD_VAR 0 8
49200: ST_TO_ADDR
// end ; end ;
49201: LD_VAR 0 5
49205: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49206: LD_INT 0
49208: PPUSH
49209: PPUSH
49210: PPUSH
49211: PPUSH
// if not list then
49212: LD_VAR 0 3
49216: NOT
49217: IFFALSE 49221
// exit ;
49219: GO 49611
// result := [ ] ;
49221: LD_ADDR_VAR 0 6
49225: PUSH
49226: EMPTY
49227: ST_TO_ADDR
// for i in list do
49228: LD_ADDR_VAR 0 7
49232: PUSH
49233: LD_VAR 0 3
49237: PUSH
49238: FOR_IN
49239: IFFALSE 49441
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49241: LD_ADDR_VAR 0 9
49245: PUSH
49246: LD_VAR 0 7
49250: PPUSH
49251: LD_VAR 0 1
49255: PPUSH
49256: LD_VAR 0 2
49260: PPUSH
49261: CALL_OW 297
49265: ST_TO_ADDR
// if not result then
49266: LD_VAR 0 6
49270: NOT
49271: IFFALSE 49297
// result := [ [ i , tmp ] ] else
49273: LD_ADDR_VAR 0 6
49277: PUSH
49278: LD_VAR 0 7
49282: PUSH
49283: LD_VAR 0 9
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: EMPTY
49293: LIST
49294: ST_TO_ADDR
49295: GO 49439
// begin if result [ result ] [ 2 ] <= tmp then
49297: LD_VAR 0 6
49301: PUSH
49302: LD_VAR 0 6
49306: ARRAY
49307: PUSH
49308: LD_INT 2
49310: ARRAY
49311: PUSH
49312: LD_VAR 0 9
49316: LESSEQUAL
49317: IFFALSE 49359
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49319: LD_ADDR_VAR 0 6
49323: PUSH
49324: LD_VAR 0 6
49328: PPUSH
49329: LD_VAR 0 6
49333: PUSH
49334: LD_INT 1
49336: PLUS
49337: PPUSH
49338: LD_VAR 0 7
49342: PUSH
49343: LD_VAR 0 9
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PPUSH
49352: CALL_OW 2
49356: ST_TO_ADDR
49357: GO 49439
// for j := 1 to result do
49359: LD_ADDR_VAR 0 8
49363: PUSH
49364: DOUBLE
49365: LD_INT 1
49367: DEC
49368: ST_TO_ADDR
49369: LD_VAR 0 6
49373: PUSH
49374: FOR_TO
49375: IFFALSE 49437
// begin if tmp < result [ j ] [ 2 ] then
49377: LD_VAR 0 9
49381: PUSH
49382: LD_VAR 0 6
49386: PUSH
49387: LD_VAR 0 8
49391: ARRAY
49392: PUSH
49393: LD_INT 2
49395: ARRAY
49396: LESS
49397: IFFALSE 49435
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49399: LD_ADDR_VAR 0 6
49403: PUSH
49404: LD_VAR 0 6
49408: PPUSH
49409: LD_VAR 0 8
49413: PPUSH
49414: LD_VAR 0 7
49418: PUSH
49419: LD_VAR 0 9
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PPUSH
49428: CALL_OW 2
49432: ST_TO_ADDR
// break ;
49433: GO 49437
// end ; end ;
49435: GO 49374
49437: POP
49438: POP
// end ; end ;
49439: GO 49238
49441: POP
49442: POP
// if result and not asc then
49443: LD_VAR 0 6
49447: IFFALSE 49456
49449: PUSH
49450: LD_VAR 0 4
49454: NOT
49455: AND
49456: IFFALSE 49531
// begin tmp := result ;
49458: LD_ADDR_VAR 0 9
49462: PUSH
49463: LD_VAR 0 6
49467: ST_TO_ADDR
// for i = tmp downto 1 do
49468: LD_ADDR_VAR 0 7
49472: PUSH
49473: DOUBLE
49474: LD_VAR 0 9
49478: INC
49479: ST_TO_ADDR
49480: LD_INT 1
49482: PUSH
49483: FOR_DOWNTO
49484: IFFALSE 49529
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49486: LD_ADDR_VAR 0 6
49490: PUSH
49491: LD_VAR 0 6
49495: PPUSH
49496: LD_VAR 0 9
49500: PUSH
49501: LD_VAR 0 7
49505: MINUS
49506: PUSH
49507: LD_INT 1
49509: PLUS
49510: PPUSH
49511: LD_VAR 0 9
49515: PUSH
49516: LD_VAR 0 7
49520: ARRAY
49521: PPUSH
49522: CALL_OW 1
49526: ST_TO_ADDR
49527: GO 49483
49529: POP
49530: POP
// end ; tmp := [ ] ;
49531: LD_ADDR_VAR 0 9
49535: PUSH
49536: EMPTY
49537: ST_TO_ADDR
// if mode then
49538: LD_VAR 0 5
49542: IFFALSE 49611
// begin for i = 1 to result do
49544: LD_ADDR_VAR 0 7
49548: PUSH
49549: DOUBLE
49550: LD_INT 1
49552: DEC
49553: ST_TO_ADDR
49554: LD_VAR 0 6
49558: PUSH
49559: FOR_TO
49560: IFFALSE 49599
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49562: LD_ADDR_VAR 0 9
49566: PUSH
49567: LD_VAR 0 9
49571: PPUSH
49572: LD_VAR 0 7
49576: PPUSH
49577: LD_VAR 0 6
49581: PUSH
49582: LD_VAR 0 7
49586: ARRAY
49587: PUSH
49588: LD_INT 1
49590: ARRAY
49591: PPUSH
49592: CALL_OW 1
49596: ST_TO_ADDR
49597: GO 49559
49599: POP
49600: POP
// result := tmp ;
49601: LD_ADDR_VAR 0 6
49605: PUSH
49606: LD_VAR 0 9
49610: ST_TO_ADDR
// end ; end ;
49611: LD_VAR 0 6
49615: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49616: LD_INT 0
49618: PPUSH
49619: PPUSH
49620: PPUSH
49621: PPUSH
49622: PPUSH
49623: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49624: LD_ADDR_VAR 0 5
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: ST_TO_ADDR
// if not x or not y then
49646: LD_VAR 0 2
49650: NOT
49651: IFTRUE 49660
49653: PUSH
49654: LD_VAR 0 3
49658: NOT
49659: OR
49660: IFFALSE 49664
// exit ;
49662: GO 51320
// if not range then
49664: LD_VAR 0 4
49668: NOT
49669: IFFALSE 49679
// range := 10 ;
49671: LD_ADDR_VAR 0 4
49675: PUSH
49676: LD_INT 10
49678: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49679: LD_ADDR_VAR 0 8
49683: PUSH
49684: LD_INT 81
49686: PUSH
49687: LD_VAR 0 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 92
49698: PUSH
49699: LD_VAR 0 2
49703: PUSH
49704: LD_VAR 0 3
49708: PUSH
49709: LD_VAR 0 4
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 3
49722: PUSH
49723: LD_INT 21
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: PPUSH
49742: CALL_OW 69
49746: ST_TO_ADDR
// if not tmp then
49747: LD_VAR 0 8
49751: NOT
49752: IFFALSE 49756
// exit ;
49754: GO 51320
// for i in tmp do
49756: LD_ADDR_VAR 0 6
49760: PUSH
49761: LD_VAR 0 8
49765: PUSH
49766: FOR_IN
49767: IFFALSE 51295
// begin points := [ 0 , 0 , 0 ] ;
49769: LD_ADDR_VAR 0 9
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// bpoints := 1 ;
49788: LD_ADDR_VAR 0 10
49792: PUSH
49793: LD_INT 1
49795: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49796: LD_VAR 0 6
49800: PPUSH
49801: CALL_OW 247
49805: PUSH
49806: LD_INT 1
49808: DOUBLE
49809: EQUAL
49810: IFTRUE 49814
49812: GO 50396
49814: POP
// begin if GetClass ( i ) = 1 then
49815: LD_VAR 0 6
49819: PPUSH
49820: CALL_OW 257
49824: PUSH
49825: LD_INT 1
49827: EQUAL
49828: IFFALSE 49849
// points := [ 10 , 5 , 3 ] ;
49830: LD_ADDR_VAR 0 9
49834: PUSH
49835: LD_INT 10
49837: PUSH
49838: LD_INT 5
49840: PUSH
49841: LD_INT 3
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: LIST
49848: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49849: LD_VAR 0 6
49853: PPUSH
49854: CALL_OW 257
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 4
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: LIST
49872: IN
49873: IFFALSE 49894
// points := [ 3 , 2 , 1 ] ;
49875: LD_ADDR_VAR 0 9
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49894: LD_VAR 0 6
49898: PPUSH
49899: CALL_OW 257
49903: PUSH
49904: LD_INT 5
49906: EQUAL
49907: IFFALSE 49928
// points := [ 130 , 5 , 2 ] ;
49909: LD_ADDR_VAR 0 9
49913: PUSH
49914: LD_INT 130
49916: PUSH
49917: LD_INT 5
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: LIST
49927: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49928: LD_VAR 0 6
49932: PPUSH
49933: CALL_OW 257
49937: PUSH
49938: LD_INT 8
49940: EQUAL
49941: IFFALSE 49962
// points := [ 35 , 35 , 30 ] ;
49943: LD_ADDR_VAR 0 9
49947: PUSH
49948: LD_INT 35
49950: PUSH
49951: LD_INT 35
49953: PUSH
49954: LD_INT 30
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: LIST
49961: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49962: LD_VAR 0 6
49966: PPUSH
49967: CALL_OW 257
49971: PUSH
49972: LD_INT 9
49974: EQUAL
49975: IFFALSE 49996
// points := [ 20 , 55 , 40 ] ;
49977: LD_ADDR_VAR 0 9
49981: PUSH
49982: LD_INT 20
49984: PUSH
49985: LD_INT 55
49987: PUSH
49988: LD_INT 40
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: LIST
49995: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49996: LD_VAR 0 6
50000: PPUSH
50001: CALL_OW 257
50005: PUSH
50006: LD_INT 12
50008: PUSH
50009: LD_INT 16
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: IN
50016: IFFALSE 50037
// points := [ 5 , 3 , 2 ] ;
50018: LD_ADDR_VAR 0 9
50022: PUSH
50023: LD_INT 5
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: LIST
50036: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50037: LD_VAR 0 6
50041: PPUSH
50042: CALL_OW 257
50046: PUSH
50047: LD_INT 17
50049: EQUAL
50050: IFFALSE 50071
// points := [ 100 , 50 , 75 ] ;
50052: LD_ADDR_VAR 0 9
50056: PUSH
50057: LD_INT 100
50059: PUSH
50060: LD_INT 50
50062: PUSH
50063: LD_INT 75
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: LIST
50070: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50071: LD_VAR 0 6
50075: PPUSH
50076: CALL_OW 257
50080: PUSH
50081: LD_INT 15
50083: EQUAL
50084: IFFALSE 50105
// points := [ 10 , 5 , 3 ] ;
50086: LD_ADDR_VAR 0 9
50090: PUSH
50091: LD_INT 10
50093: PUSH
50094: LD_INT 5
50096: PUSH
50097: LD_INT 3
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50105: LD_VAR 0 6
50109: PPUSH
50110: CALL_OW 257
50114: PUSH
50115: LD_INT 14
50117: EQUAL
50118: IFFALSE 50139
// points := [ 10 , 0 , 0 ] ;
50120: LD_ADDR_VAR 0 9
50124: PUSH
50125: LD_INT 10
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: LIST
50138: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50139: LD_VAR 0 6
50143: PPUSH
50144: CALL_OW 257
50148: PUSH
50149: LD_INT 11
50151: EQUAL
50152: IFFALSE 50173
// points := [ 30 , 10 , 5 ] ;
50154: LD_ADDR_VAR 0 9
50158: PUSH
50159: LD_INT 30
50161: PUSH
50162: LD_INT 10
50164: PUSH
50165: LD_INT 5
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: LIST
50172: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50173: LD_VAR 0 1
50177: PPUSH
50178: LD_INT 5
50180: PPUSH
50181: CALL_OW 321
50185: PUSH
50186: LD_INT 2
50188: EQUAL
50189: IFFALSE 50206
// bpoints := bpoints * 1.8 ;
50191: LD_ADDR_VAR 0 10
50195: PUSH
50196: LD_VAR 0 10
50200: PUSH
50201: LD_REAL  1.80000000000000E+0000
50204: MUL
50205: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50206: LD_VAR 0 6
50210: PPUSH
50211: CALL_OW 257
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: LD_INT 4
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: IN
50234: IFFALSE 50254
50236: PUSH
50237: LD_VAR 0 1
50241: PPUSH
50242: LD_INT 51
50244: PPUSH
50245: CALL_OW 321
50249: PUSH
50250: LD_INT 2
50252: EQUAL
50253: AND
50254: IFFALSE 50271
// bpoints := bpoints * 1.2 ;
50256: LD_ADDR_VAR 0 10
50260: PUSH
50261: LD_VAR 0 10
50265: PUSH
50266: LD_REAL  1.20000000000000E+0000
50269: MUL
50270: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50271: LD_VAR 0 6
50275: PPUSH
50276: CALL_OW 257
50280: PUSH
50281: LD_INT 5
50283: PUSH
50284: LD_INT 7
50286: PUSH
50287: LD_INT 9
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: IN
50295: IFFALSE 50315
50297: PUSH
50298: LD_VAR 0 1
50302: PPUSH
50303: LD_INT 52
50305: PPUSH
50306: CALL_OW 321
50310: PUSH
50311: LD_INT 2
50313: EQUAL
50314: AND
50315: IFFALSE 50332
// bpoints := bpoints * 1.5 ;
50317: LD_ADDR_VAR 0 10
50321: PUSH
50322: LD_VAR 0 10
50326: PUSH
50327: LD_REAL  1.50000000000000E+0000
50330: MUL
50331: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50332: LD_VAR 0 1
50336: PPUSH
50337: LD_INT 66
50339: PPUSH
50340: CALL_OW 321
50344: PUSH
50345: LD_INT 2
50347: EQUAL
50348: IFFALSE 50365
// bpoints := bpoints * 1.1 ;
50350: LD_ADDR_VAR 0 10
50354: PUSH
50355: LD_VAR 0 10
50359: PUSH
50360: LD_REAL  1.10000000000000E+0000
50363: MUL
50364: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50365: LD_ADDR_VAR 0 10
50369: PUSH
50370: LD_VAR 0 10
50374: PUSH
50375: LD_VAR 0 6
50379: PPUSH
50380: LD_INT 1
50382: PPUSH
50383: CALL_OW 259
50387: PUSH
50388: LD_REAL  1.15000000000000E+0000
50391: MUL
50392: MUL
50393: ST_TO_ADDR
// end ; unit_vehicle :
50394: GO 51224
50396: LD_INT 2
50398: DOUBLE
50399: EQUAL
50400: IFTRUE 50404
50402: GO 51212
50404: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50405: LD_VAR 0 6
50409: PPUSH
50410: CALL_OW 264
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: LD_INT 42
50420: PUSH
50421: LD_INT 24
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: LIST
50428: IN
50429: IFFALSE 50450
// points := [ 25 , 5 , 3 ] ;
50431: LD_ADDR_VAR 0 9
50435: PUSH
50436: LD_INT 25
50438: PUSH
50439: LD_INT 5
50441: PUSH
50442: LD_INT 3
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: LIST
50449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50450: LD_VAR 0 6
50454: PPUSH
50455: CALL_OW 264
50459: PUSH
50460: LD_INT 4
50462: PUSH
50463: LD_INT 43
50465: PUSH
50466: LD_INT 25
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: LIST
50473: IN
50474: IFFALSE 50495
// points := [ 40 , 15 , 5 ] ;
50476: LD_ADDR_VAR 0 9
50480: PUSH
50481: LD_INT 40
50483: PUSH
50484: LD_INT 15
50486: PUSH
50487: LD_INT 5
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50495: LD_VAR 0 6
50499: PPUSH
50500: CALL_OW 264
50504: PUSH
50505: LD_INT 3
50507: PUSH
50508: LD_INT 23
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: IN
50515: IFFALSE 50536
// points := [ 7 , 25 , 8 ] ;
50517: LD_ADDR_VAR 0 9
50521: PUSH
50522: LD_INT 7
50524: PUSH
50525: LD_INT 25
50527: PUSH
50528: LD_INT 8
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50536: LD_VAR 0 6
50540: PPUSH
50541: CALL_OW 264
50545: PUSH
50546: LD_INT 5
50548: PUSH
50549: LD_INT 27
50551: PUSH
50552: LD_INT 44
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: LIST
50559: IN
50560: IFFALSE 50581
// points := [ 14 , 50 , 16 ] ;
50562: LD_ADDR_VAR 0 9
50566: PUSH
50567: LD_INT 14
50569: PUSH
50570: LD_INT 50
50572: PUSH
50573: LD_INT 16
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50581: LD_VAR 0 6
50585: PPUSH
50586: CALL_OW 264
50590: PUSH
50591: LD_INT 6
50593: PUSH
50594: LD_INT 46
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: IN
50601: IFFALSE 50622
// points := [ 32 , 120 , 70 ] ;
50603: LD_ADDR_VAR 0 9
50607: PUSH
50608: LD_INT 32
50610: PUSH
50611: LD_INT 120
50613: PUSH
50614: LD_INT 70
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: LIST
50621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50622: LD_VAR 0 6
50626: PPUSH
50627: CALL_OW 264
50631: PUSH
50632: LD_INT 7
50634: PUSH
50635: LD_INT 28
50637: PUSH
50638: LD_INT 45
50640: PUSH
50641: LD_INT 92
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: IN
50650: IFFALSE 50671
// points := [ 35 , 20 , 45 ] ;
50652: LD_ADDR_VAR 0 9
50656: PUSH
50657: LD_INT 35
50659: PUSH
50660: LD_INT 20
50662: PUSH
50663: LD_INT 45
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: LIST
50670: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50671: LD_VAR 0 6
50675: PPUSH
50676: CALL_OW 264
50680: PUSH
50681: LD_INT 47
50683: PUSH
50684: EMPTY
50685: LIST
50686: IN
50687: IFFALSE 50708
// points := [ 67 , 45 , 75 ] ;
50689: LD_ADDR_VAR 0 9
50693: PUSH
50694: LD_INT 67
50696: PUSH
50697: LD_INT 45
50699: PUSH
50700: LD_INT 75
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: LIST
50707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50708: LD_VAR 0 6
50712: PPUSH
50713: CALL_OW 264
50717: PUSH
50718: LD_INT 26
50720: PUSH
50721: EMPTY
50722: LIST
50723: IN
50724: IFFALSE 50745
// points := [ 120 , 30 , 80 ] ;
50726: LD_ADDR_VAR 0 9
50730: PUSH
50731: LD_INT 120
50733: PUSH
50734: LD_INT 30
50736: PUSH
50737: LD_INT 80
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50745: LD_VAR 0 6
50749: PPUSH
50750: CALL_OW 264
50754: PUSH
50755: LD_INT 22
50757: PUSH
50758: EMPTY
50759: LIST
50760: IN
50761: IFFALSE 50782
// points := [ 40 , 1 , 1 ] ;
50763: LD_ADDR_VAR 0 9
50767: PUSH
50768: LD_INT 40
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50782: LD_VAR 0 6
50786: PPUSH
50787: CALL_OW 264
50791: PUSH
50792: LD_INT 29
50794: PUSH
50795: EMPTY
50796: LIST
50797: IN
50798: IFFALSE 50819
// points := [ 70 , 200 , 400 ] ;
50800: LD_ADDR_VAR 0 9
50804: PUSH
50805: LD_INT 70
50807: PUSH
50808: LD_INT 200
50810: PUSH
50811: LD_INT 400
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: LIST
50818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50819: LD_VAR 0 6
50823: PPUSH
50824: CALL_OW 264
50828: PUSH
50829: LD_INT 14
50831: PUSH
50832: LD_INT 53
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: IN
50839: IFFALSE 50860
// points := [ 40 , 10 , 20 ] ;
50841: LD_ADDR_VAR 0 9
50845: PUSH
50846: LD_INT 40
50848: PUSH
50849: LD_INT 10
50851: PUSH
50852: LD_INT 20
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: LIST
50859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50860: LD_VAR 0 6
50864: PPUSH
50865: CALL_OW 264
50869: PUSH
50870: LD_INT 9
50872: PUSH
50873: EMPTY
50874: LIST
50875: IN
50876: IFFALSE 50897
// points := [ 5 , 70 , 20 ] ;
50878: LD_ADDR_VAR 0 9
50882: PUSH
50883: LD_INT 5
50885: PUSH
50886: LD_INT 70
50888: PUSH
50889: LD_INT 20
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50897: LD_VAR 0 6
50901: PPUSH
50902: CALL_OW 264
50906: PUSH
50907: LD_INT 10
50909: PUSH
50910: EMPTY
50911: LIST
50912: IN
50913: IFFALSE 50934
// points := [ 35 , 110 , 70 ] ;
50915: LD_ADDR_VAR 0 9
50919: PUSH
50920: LD_INT 35
50922: PUSH
50923: LD_INT 110
50925: PUSH
50926: LD_INT 70
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50934: LD_VAR 0 6
50938: PPUSH
50939: CALL_OW 265
50943: PUSH
50944: LD_INT 25
50946: EQUAL
50947: IFFALSE 50968
// points := [ 80 , 65 , 100 ] ;
50949: LD_ADDR_VAR 0 9
50953: PUSH
50954: LD_INT 80
50956: PUSH
50957: LD_INT 65
50959: PUSH
50960: LD_INT 100
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50968: LD_VAR 0 6
50972: PPUSH
50973: CALL_OW 263
50977: PUSH
50978: LD_INT 1
50980: EQUAL
50981: IFFALSE 51016
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50983: LD_ADDR_VAR 0 10
50987: PUSH
50988: LD_VAR 0 10
50992: PUSH
50993: LD_VAR 0 6
50997: PPUSH
50998: CALL_OW 311
51002: PPUSH
51003: LD_INT 3
51005: PPUSH
51006: CALL_OW 259
51010: PUSH
51011: LD_INT 4
51013: MUL
51014: MUL
51015: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51016: LD_VAR 0 6
51020: PPUSH
51021: CALL_OW 263
51025: PUSH
51026: LD_INT 2
51028: EQUAL
51029: IFFALSE 51080
// begin j := IsControledBy ( i ) ;
51031: LD_ADDR_VAR 0 7
51035: PUSH
51036: LD_VAR 0 6
51040: PPUSH
51041: CALL_OW 312
51045: ST_TO_ADDR
// if j then
51046: LD_VAR 0 7
51050: IFFALSE 51080
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51052: LD_ADDR_VAR 0 10
51056: PUSH
51057: LD_VAR 0 10
51061: PUSH
51062: LD_VAR 0 7
51066: PPUSH
51067: LD_INT 3
51069: PPUSH
51070: CALL_OW 259
51074: PUSH
51075: LD_INT 3
51077: MUL
51078: MUL
51079: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51080: LD_VAR 0 6
51084: PPUSH
51085: CALL_OW 264
51089: PUSH
51090: LD_INT 5
51092: PUSH
51093: LD_INT 6
51095: PUSH
51096: LD_INT 46
51098: PUSH
51099: LD_INT 44
51101: PUSH
51102: LD_INT 47
51104: PUSH
51105: LD_INT 45
51107: PUSH
51108: LD_INT 28
51110: PUSH
51111: LD_INT 7
51113: PUSH
51114: LD_INT 27
51116: PUSH
51117: LD_INT 29
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: IN
51132: IFFALSE 51152
51134: PUSH
51135: LD_VAR 0 1
51139: PPUSH
51140: LD_INT 52
51142: PPUSH
51143: CALL_OW 321
51147: PUSH
51148: LD_INT 2
51150: EQUAL
51151: AND
51152: IFFALSE 51169
// bpoints := bpoints * 1.2 ;
51154: LD_ADDR_VAR 0 10
51158: PUSH
51159: LD_VAR 0 10
51163: PUSH
51164: LD_REAL  1.20000000000000E+0000
51167: MUL
51168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51169: LD_VAR 0 6
51173: PPUSH
51174: CALL_OW 264
51178: PUSH
51179: LD_INT 6
51181: PUSH
51182: LD_INT 46
51184: PUSH
51185: LD_INT 47
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: LIST
51192: IN
51193: IFFALSE 51210
// bpoints := bpoints * 1.2 ;
51195: LD_ADDR_VAR 0 10
51199: PUSH
51200: LD_VAR 0 10
51204: PUSH
51205: LD_REAL  1.20000000000000E+0000
51208: MUL
51209: ST_TO_ADDR
// end ; unit_building :
51210: GO 51224
51212: LD_INT 3
51214: DOUBLE
51215: EQUAL
51216: IFTRUE 51220
51218: GO 51223
51220: POP
// ; end ;
51221: GO 51224
51223: POP
// for j = 1 to 3 do
51224: LD_ADDR_VAR 0 7
51228: PUSH
51229: DOUBLE
51230: LD_INT 1
51232: DEC
51233: ST_TO_ADDR
51234: LD_INT 3
51236: PUSH
51237: FOR_TO
51238: IFFALSE 51291
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51240: LD_ADDR_VAR 0 5
51244: PUSH
51245: LD_VAR 0 5
51249: PPUSH
51250: LD_VAR 0 7
51254: PPUSH
51255: LD_VAR 0 5
51259: PUSH
51260: LD_VAR 0 7
51264: ARRAY
51265: PUSH
51266: LD_VAR 0 9
51270: PUSH
51271: LD_VAR 0 7
51275: ARRAY
51276: PUSH
51277: LD_VAR 0 10
51281: MUL
51282: PLUS
51283: PPUSH
51284: CALL_OW 1
51288: ST_TO_ADDR
51289: GO 51237
51291: POP
51292: POP
// end ;
51293: GO 49766
51295: POP
51296: POP
// result := Replace ( result , 4 , tmp ) ;
51297: LD_ADDR_VAR 0 5
51301: PUSH
51302: LD_VAR 0 5
51306: PPUSH
51307: LD_INT 4
51309: PPUSH
51310: LD_VAR 0 8
51314: PPUSH
51315: CALL_OW 1
51319: ST_TO_ADDR
// end ;
51320: LD_VAR 0 5
51324: RET
// export function DangerAtRange ( unit , range ) ; begin
51325: LD_INT 0
51327: PPUSH
// if not unit then
51328: LD_VAR 0 1
51332: NOT
51333: IFFALSE 51337
// exit ;
51335: GO 51382
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51337: LD_ADDR_VAR 0 3
51341: PUSH
51342: LD_VAR 0 1
51346: PPUSH
51347: CALL_OW 255
51351: PPUSH
51352: LD_VAR 0 1
51356: PPUSH
51357: CALL_OW 250
51361: PPUSH
51362: LD_VAR 0 1
51366: PPUSH
51367: CALL_OW 251
51371: PPUSH
51372: LD_VAR 0 2
51376: PPUSH
51377: CALL 49616 0 4
51381: ST_TO_ADDR
// end ;
51382: LD_VAR 0 3
51386: RET
// export function DangerInArea ( side , area ) ; begin
51387: LD_INT 0
51389: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51390: LD_ADDR_VAR 0 3
51394: PUSH
51395: LD_VAR 0 2
51399: PPUSH
51400: LD_INT 81
51402: PUSH
51403: LD_VAR 0 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PPUSH
51412: CALL_OW 70
51416: ST_TO_ADDR
// end ;
51417: LD_VAR 0 3
51421: RET
// export function IsExtension ( b ) ; begin
51422: LD_INT 0
51424: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51425: LD_ADDR_VAR 0 2
51429: PUSH
51430: LD_VAR 0 1
51434: PUSH
51435: LD_INT 23
51437: PUSH
51438: LD_INT 20
51440: PUSH
51441: LD_INT 22
51443: PUSH
51444: LD_INT 17
51446: PUSH
51447: LD_INT 24
51449: PUSH
51450: LD_INT 21
51452: PUSH
51453: LD_INT 19
51455: PUSH
51456: LD_INT 16
51458: PUSH
51459: LD_INT 25
51461: PUSH
51462: LD_INT 18
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: IN
51477: ST_TO_ADDR
// end ;
51478: LD_VAR 0 2
51482: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51483: LD_INT 0
51485: PPUSH
51486: PPUSH
51487: PPUSH
// result := [ ] ;
51488: LD_ADDR_VAR 0 4
51492: PUSH
51493: EMPTY
51494: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51495: LD_ADDR_VAR 0 5
51499: PUSH
51500: LD_VAR 0 2
51504: PPUSH
51505: LD_INT 21
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PPUSH
51515: CALL_OW 70
51519: ST_TO_ADDR
// if not tmp then
51520: LD_VAR 0 5
51524: NOT
51525: IFFALSE 51529
// exit ;
51527: GO 51593
// if checkLink then
51529: LD_VAR 0 3
51533: IFFALSE 51583
// begin for i in tmp do
51535: LD_ADDR_VAR 0 6
51539: PUSH
51540: LD_VAR 0 5
51544: PUSH
51545: FOR_IN
51546: IFFALSE 51581
// if GetBase ( i ) <> base then
51548: LD_VAR 0 6
51552: PPUSH
51553: CALL_OW 274
51557: PUSH
51558: LD_VAR 0 1
51562: NONEQUAL
51563: IFFALSE 51579
// ComLinkToBase ( base , i ) ;
51565: LD_VAR 0 1
51569: PPUSH
51570: LD_VAR 0 6
51574: PPUSH
51575: CALL_OW 169
51579: GO 51545
51581: POP
51582: POP
// end ; result := tmp ;
51583: LD_ADDR_VAR 0 4
51587: PUSH
51588: LD_VAR 0 5
51592: ST_TO_ADDR
// end ;
51593: LD_VAR 0 4
51597: RET
// export function ComComplete ( units , b ) ; var i ; begin
51598: LD_INT 0
51600: PPUSH
51601: PPUSH
// if not units then
51602: LD_VAR 0 1
51606: NOT
51607: IFFALSE 51611
// exit ;
51609: GO 51701
// for i in units do
51611: LD_ADDR_VAR 0 4
51615: PUSH
51616: LD_VAR 0 1
51620: PUSH
51621: FOR_IN
51622: IFFALSE 51699
// if BuildingStatus ( b ) = bs_build then
51624: LD_VAR 0 2
51628: PPUSH
51629: CALL_OW 461
51633: PUSH
51634: LD_INT 1
51636: EQUAL
51637: IFFALSE 51697
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51639: LD_VAR 0 4
51643: PPUSH
51644: LD_STRING h
51646: PUSH
51647: LD_VAR 0 2
51651: PPUSH
51652: CALL_OW 250
51656: PUSH
51657: LD_VAR 0 2
51661: PPUSH
51662: CALL_OW 251
51666: PUSH
51667: LD_VAR 0 2
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: PUSH
51690: EMPTY
51691: LIST
51692: PPUSH
51693: CALL_OW 446
51697: GO 51621
51699: POP
51700: POP
// end ;
51701: LD_VAR 0 3
51705: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51706: LD_INT 0
51708: PPUSH
51709: PPUSH
51710: PPUSH
51711: PPUSH
51712: PPUSH
51713: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51714: LD_VAR 0 1
51718: NOT
51719: IFTRUE 51736
51721: PUSH
51722: LD_VAR 0 1
51726: PPUSH
51727: CALL_OW 263
51731: PUSH
51732: LD_INT 2
51734: NONEQUAL
51735: OR
51736: IFFALSE 51740
// exit ;
51738: GO 52056
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51740: LD_ADDR_VAR 0 6
51744: PUSH
51745: LD_INT 22
51747: PUSH
51748: LD_VAR 0 1
51752: PPUSH
51753: CALL_OW 255
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 30
51767: PUSH
51768: LD_INT 36
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 34
51777: PUSH
51778: LD_INT 31
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PPUSH
51794: CALL_OW 69
51798: ST_TO_ADDR
// if not tmp then
51799: LD_VAR 0 6
51803: NOT
51804: IFFALSE 51808
// exit ;
51806: GO 52056
// result := [ ] ;
51808: LD_ADDR_VAR 0 2
51812: PUSH
51813: EMPTY
51814: ST_TO_ADDR
// for i in tmp do
51815: LD_ADDR_VAR 0 3
51819: PUSH
51820: LD_VAR 0 6
51824: PUSH
51825: FOR_IN
51826: IFFALSE 51897
// begin t := UnitsInside ( i ) ;
51828: LD_ADDR_VAR 0 4
51832: PUSH
51833: LD_VAR 0 3
51837: PPUSH
51838: CALL_OW 313
51842: ST_TO_ADDR
// if t then
51843: LD_VAR 0 4
51847: IFFALSE 51895
// for j in t do
51849: LD_ADDR_VAR 0 7
51853: PUSH
51854: LD_VAR 0 4
51858: PUSH
51859: FOR_IN
51860: IFFALSE 51893
// result := Replace ( result , result + 1 , j ) ;
51862: LD_ADDR_VAR 0 2
51866: PUSH
51867: LD_VAR 0 2
51871: PPUSH
51872: LD_VAR 0 2
51876: PUSH
51877: LD_INT 1
51879: PLUS
51880: PPUSH
51881: LD_VAR 0 7
51885: PPUSH
51886: CALL_OW 1
51890: ST_TO_ADDR
51891: GO 51859
51893: POP
51894: POP
// end ;
51895: GO 51825
51897: POP
51898: POP
// if not result then
51899: LD_VAR 0 2
51903: NOT
51904: IFFALSE 51908
// exit ;
51906: GO 52056
// mech := result [ 1 ] ;
51908: LD_ADDR_VAR 0 5
51912: PUSH
51913: LD_VAR 0 2
51917: PUSH
51918: LD_INT 1
51920: ARRAY
51921: ST_TO_ADDR
// if result > 1 then
51922: LD_VAR 0 2
51926: PUSH
51927: LD_INT 1
51929: GREATER
51930: IFFALSE 52042
// begin for i = 2 to result do
51932: LD_ADDR_VAR 0 3
51936: PUSH
51937: DOUBLE
51938: LD_INT 2
51940: DEC
51941: ST_TO_ADDR
51942: LD_VAR 0 2
51946: PUSH
51947: FOR_TO
51948: IFFALSE 52040
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51950: LD_ADDR_VAR 0 4
51954: PUSH
51955: LD_VAR 0 2
51959: PUSH
51960: LD_VAR 0 3
51964: ARRAY
51965: PPUSH
51966: LD_INT 3
51968: PPUSH
51969: CALL_OW 259
51973: PUSH
51974: LD_VAR 0 2
51978: PUSH
51979: LD_VAR 0 3
51983: ARRAY
51984: PPUSH
51985: CALL_OW 432
51989: MINUS
51990: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51991: LD_VAR 0 4
51995: PUSH
51996: LD_VAR 0 5
52000: PPUSH
52001: LD_INT 3
52003: PPUSH
52004: CALL_OW 259
52008: PUSH
52009: LD_VAR 0 5
52013: PPUSH
52014: CALL_OW 432
52018: MINUS
52019: GREATEREQUAL
52020: IFFALSE 52038
// mech := result [ i ] ;
52022: LD_ADDR_VAR 0 5
52026: PUSH
52027: LD_VAR 0 2
52031: PUSH
52032: LD_VAR 0 3
52036: ARRAY
52037: ST_TO_ADDR
// end ;
52038: GO 51947
52040: POP
52041: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52042: LD_VAR 0 1
52046: PPUSH
52047: LD_VAR 0 5
52051: PPUSH
52052: CALL_OW 135
// end ;
52056: LD_VAR 0 2
52060: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52061: LD_INT 0
52063: PPUSH
52064: PPUSH
52065: PPUSH
52066: PPUSH
52067: PPUSH
52068: PPUSH
52069: PPUSH
52070: PPUSH
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
// result := [ ] ;
52076: LD_ADDR_VAR 0 7
52080: PUSH
52081: EMPTY
52082: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52083: LD_VAR 0 1
52087: PPUSH
52088: CALL_OW 266
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: IN
52103: NOT
52104: IFFALSE 52108
// exit ;
52106: GO 53748
// if name then
52108: LD_VAR 0 3
52112: IFFALSE 52128
// SetBName ( base_dep , name ) ;
52114: LD_VAR 0 1
52118: PPUSH
52119: LD_VAR 0 3
52123: PPUSH
52124: CALL_OW 500
// base := GetBase ( base_dep ) ;
52128: LD_ADDR_VAR 0 15
52132: PUSH
52133: LD_VAR 0 1
52137: PPUSH
52138: CALL_OW 274
52142: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52143: LD_ADDR_VAR 0 16
52147: PUSH
52148: LD_VAR 0 1
52152: PPUSH
52153: CALL_OW 255
52157: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52158: LD_ADDR_VAR 0 17
52162: PUSH
52163: LD_VAR 0 1
52167: PPUSH
52168: CALL_OW 248
52172: ST_TO_ADDR
// if sources then
52173: LD_VAR 0 5
52177: IFFALSE 52224
// for i = 1 to 3 do
52179: LD_ADDR_VAR 0 8
52183: PUSH
52184: DOUBLE
52185: LD_INT 1
52187: DEC
52188: ST_TO_ADDR
52189: LD_INT 3
52191: PUSH
52192: FOR_TO
52193: IFFALSE 52222
// AddResourceType ( base , i , sources [ i ] ) ;
52195: LD_VAR 0 15
52199: PPUSH
52200: LD_VAR 0 8
52204: PPUSH
52205: LD_VAR 0 5
52209: PUSH
52210: LD_VAR 0 8
52214: ARRAY
52215: PPUSH
52216: CALL_OW 276
52220: GO 52192
52222: POP
52223: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52224: LD_ADDR_VAR 0 18
52228: PUSH
52229: LD_VAR 0 15
52233: PPUSH
52234: LD_VAR 0 2
52238: PPUSH
52239: LD_INT 1
52241: PPUSH
52242: CALL 51483 0 3
52246: ST_TO_ADDR
// InitHc ;
52247: CALL_OW 19
// InitUc ;
52251: CALL_OW 18
// uc_side := side ;
52255: LD_ADDR_OWVAR 20
52259: PUSH
52260: LD_VAR 0 16
52264: ST_TO_ADDR
// uc_nation := nation ;
52265: LD_ADDR_OWVAR 21
52269: PUSH
52270: LD_VAR 0 17
52274: ST_TO_ADDR
// if buildings then
52275: LD_VAR 0 18
52279: IFFALSE 53607
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52281: LD_ADDR_VAR 0 19
52285: PUSH
52286: LD_VAR 0 18
52290: PPUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 30
52296: PUSH
52297: LD_INT 29
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 30
52306: PUSH
52307: LD_INT 30
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: PPUSH
52319: CALL_OW 72
52323: ST_TO_ADDR
// if tmp then
52324: LD_VAR 0 19
52328: IFFALSE 52376
// for i in tmp do
52330: LD_ADDR_VAR 0 8
52334: PUSH
52335: LD_VAR 0 19
52339: PUSH
52340: FOR_IN
52341: IFFALSE 52374
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52343: LD_VAR 0 8
52347: PPUSH
52348: CALL_OW 250
52352: PPUSH
52353: LD_VAR 0 8
52357: PPUSH
52358: CALL_OW 251
52362: PPUSH
52363: LD_VAR 0 16
52367: PPUSH
52368: CALL_OW 441
52372: GO 52340
52374: POP
52375: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52376: LD_VAR 0 18
52380: PPUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 30
52386: PUSH
52387: LD_INT 32
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 30
52396: PUSH
52397: LD_INT 33
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: PPUSH
52409: CALL_OW 72
52413: IFFALSE 52501
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52415: LD_ADDR_VAR 0 8
52419: PUSH
52420: LD_VAR 0 18
52424: PPUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 30
52430: PUSH
52431: LD_INT 32
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 30
52440: PUSH
52441: LD_INT 33
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: LIST
52452: PPUSH
52453: CALL_OW 72
52457: PUSH
52458: FOR_IN
52459: IFFALSE 52499
// begin if not GetBWeapon ( i ) then
52461: LD_VAR 0 8
52465: PPUSH
52466: CALL_OW 269
52470: NOT
52471: IFFALSE 52497
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52473: LD_VAR 0 8
52477: PPUSH
52478: LD_VAR 0 8
52482: PPUSH
52483: LD_VAR 0 2
52487: PPUSH
52488: CALL 53753 0 2
52492: PPUSH
52493: CALL_OW 431
// end ;
52497: GO 52458
52499: POP
52500: POP
// end ; for i = 1 to personel do
52501: LD_ADDR_VAR 0 8
52505: PUSH
52506: DOUBLE
52507: LD_INT 1
52509: DEC
52510: ST_TO_ADDR
52511: LD_VAR 0 6
52515: PUSH
52516: FOR_TO
52517: IFFALSE 53587
// begin if i > 4 then
52519: LD_VAR 0 8
52523: PUSH
52524: LD_INT 4
52526: GREATER
52527: IFFALSE 52531
// break ;
52529: GO 53587
// case i of 1 :
52531: LD_VAR 0 8
52535: PUSH
52536: LD_INT 1
52538: DOUBLE
52539: EQUAL
52540: IFTRUE 52544
52542: GO 52624
52544: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52545: LD_ADDR_VAR 0 12
52549: PUSH
52550: LD_VAR 0 18
52554: PPUSH
52555: LD_INT 22
52557: PUSH
52558: LD_VAR 0 16
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 58
52569: PUSH
52570: EMPTY
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: LD_INT 30
52578: PUSH
52579: LD_INT 32
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 30
52588: PUSH
52589: LD_INT 4
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 30
52598: PUSH
52599: LD_INT 5
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: LIST
52616: PPUSH
52617: CALL_OW 72
52621: ST_TO_ADDR
52622: GO 52846
52624: LD_INT 2
52626: DOUBLE
52627: EQUAL
52628: IFTRUE 52632
52630: GO 52694
52632: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52633: LD_ADDR_VAR 0 12
52637: PUSH
52638: LD_VAR 0 18
52642: PPUSH
52643: LD_INT 22
52645: PUSH
52646: LD_VAR 0 16
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: LD_INT 30
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 30
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PPUSH
52687: CALL_OW 72
52691: ST_TO_ADDR
52692: GO 52846
52694: LD_INT 3
52696: DOUBLE
52697: EQUAL
52698: IFTRUE 52702
52700: GO 52764
52702: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52703: LD_ADDR_VAR 0 12
52707: PUSH
52708: LD_VAR 0 18
52712: PPUSH
52713: LD_INT 22
52715: PUSH
52716: LD_VAR 0 16
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 30
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 30
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PPUSH
52757: CALL_OW 72
52761: ST_TO_ADDR
52762: GO 52846
52764: LD_INT 4
52766: DOUBLE
52767: EQUAL
52768: IFTRUE 52772
52770: GO 52845
52772: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52773: LD_ADDR_VAR 0 12
52777: PUSH
52778: LD_VAR 0 18
52782: PPUSH
52783: LD_INT 22
52785: PUSH
52786: LD_VAR 0 16
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 30
52800: PUSH
52801: LD_INT 6
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 30
52810: PUSH
52811: LD_INT 7
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 30
52820: PUSH
52821: LD_INT 8
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PPUSH
52838: CALL_OW 72
52842: ST_TO_ADDR
52843: GO 52846
52845: POP
// if i = 1 then
52846: LD_VAR 0 8
52850: PUSH
52851: LD_INT 1
52853: EQUAL
52854: IFFALSE 52965
// begin tmp := [ ] ;
52856: LD_ADDR_VAR 0 19
52860: PUSH
52861: EMPTY
52862: ST_TO_ADDR
// for j in f do
52863: LD_ADDR_VAR 0 9
52867: PUSH
52868: LD_VAR 0 12
52872: PUSH
52873: FOR_IN
52874: IFFALSE 52947
// if GetBType ( j ) = b_bunker then
52876: LD_VAR 0 9
52880: PPUSH
52881: CALL_OW 266
52885: PUSH
52886: LD_INT 32
52888: EQUAL
52889: IFFALSE 52916
// tmp := Insert ( tmp , 1 , j ) else
52891: LD_ADDR_VAR 0 19
52895: PUSH
52896: LD_VAR 0 19
52900: PPUSH
52901: LD_INT 1
52903: PPUSH
52904: LD_VAR 0 9
52908: PPUSH
52909: CALL_OW 2
52913: ST_TO_ADDR
52914: GO 52945
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52916: LD_ADDR_VAR 0 19
52920: PUSH
52921: LD_VAR 0 19
52925: PPUSH
52926: LD_VAR 0 19
52930: PUSH
52931: LD_INT 1
52933: PLUS
52934: PPUSH
52935: LD_VAR 0 9
52939: PPUSH
52940: CALL_OW 2
52944: ST_TO_ADDR
52945: GO 52873
52947: POP
52948: POP
// if tmp then
52949: LD_VAR 0 19
52953: IFFALSE 52965
// f := tmp ;
52955: LD_ADDR_VAR 0 12
52959: PUSH
52960: LD_VAR 0 19
52964: ST_TO_ADDR
// end ; x := personel [ i ] ;
52965: LD_ADDR_VAR 0 13
52969: PUSH
52970: LD_VAR 0 6
52974: PUSH
52975: LD_VAR 0 8
52979: ARRAY
52980: ST_TO_ADDR
// if x = - 1 then
52981: LD_VAR 0 13
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: EQUAL
52990: IFFALSE 53201
// begin for j in f do
52992: LD_ADDR_VAR 0 9
52996: PUSH
52997: LD_VAR 0 12
53001: PUSH
53002: FOR_IN
53003: IFFALSE 53197
// repeat InitHc ;
53005: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53009: LD_VAR 0 9
53013: PPUSH
53014: CALL_OW 266
53018: PUSH
53019: LD_INT 5
53021: EQUAL
53022: IFFALSE 53092
// begin if UnitsInside ( j ) < 3 then
53024: LD_VAR 0 9
53028: PPUSH
53029: CALL_OW 313
53033: PUSH
53034: LD_INT 3
53036: LESS
53037: IFFALSE 53073
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53039: LD_INT 0
53041: PPUSH
53042: LD_INT 5
53044: PUSH
53045: LD_INT 8
53047: PUSH
53048: LD_INT 9
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: LIST
53055: PUSH
53056: LD_VAR 0 17
53060: ARRAY
53061: PPUSH
53062: LD_VAR 0 4
53066: PPUSH
53067: CALL_OW 380
53071: GO 53090
// PrepareHuman ( false , i , skill ) ;
53073: LD_INT 0
53075: PPUSH
53076: LD_VAR 0 8
53080: PPUSH
53081: LD_VAR 0 4
53085: PPUSH
53086: CALL_OW 380
// end else
53090: GO 53109
// PrepareHuman ( false , i , skill ) ;
53092: LD_INT 0
53094: PPUSH
53095: LD_VAR 0 8
53099: PPUSH
53100: LD_VAR 0 4
53104: PPUSH
53105: CALL_OW 380
// un := CreateHuman ;
53109: LD_ADDR_VAR 0 14
53113: PUSH
53114: CALL_OW 44
53118: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53119: LD_ADDR_VAR 0 7
53123: PUSH
53124: LD_VAR 0 7
53128: PPUSH
53129: LD_INT 1
53131: PPUSH
53132: LD_VAR 0 14
53136: PPUSH
53137: CALL_OW 2
53141: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53142: LD_VAR 0 14
53146: PPUSH
53147: LD_VAR 0 9
53151: PPUSH
53152: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53156: LD_VAR 0 9
53160: PPUSH
53161: CALL_OW 313
53165: PUSH
53166: LD_INT 6
53168: EQUAL
53169: IFTRUE 53193
53171: PUSH
53172: LD_VAR 0 9
53176: PPUSH
53177: CALL_OW 266
53181: PUSH
53182: LD_INT 32
53184: PUSH
53185: LD_INT 31
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: IN
53192: OR
53193: IFFALSE 53005
53195: GO 53002
53197: POP
53198: POP
// end else
53199: GO 53585
// for j = 1 to x do
53201: LD_ADDR_VAR 0 9
53205: PUSH
53206: DOUBLE
53207: LD_INT 1
53209: DEC
53210: ST_TO_ADDR
53211: LD_VAR 0 13
53215: PUSH
53216: FOR_TO
53217: IFFALSE 53583
// begin InitHc ;
53219: CALL_OW 19
// if not f then
53223: LD_VAR 0 12
53227: NOT
53228: IFFALSE 53317
// begin PrepareHuman ( false , i , skill ) ;
53230: LD_INT 0
53232: PPUSH
53233: LD_VAR 0 8
53237: PPUSH
53238: LD_VAR 0 4
53242: PPUSH
53243: CALL_OW 380
// un := CreateHuman ;
53247: LD_ADDR_VAR 0 14
53251: PUSH
53252: CALL_OW 44
53256: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53257: LD_ADDR_VAR 0 7
53261: PUSH
53262: LD_VAR 0 7
53266: PPUSH
53267: LD_INT 1
53269: PPUSH
53270: LD_VAR 0 14
53274: PPUSH
53275: CALL_OW 2
53279: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53280: LD_VAR 0 14
53284: PPUSH
53285: LD_VAR 0 1
53289: PPUSH
53290: CALL_OW 250
53294: PPUSH
53295: LD_VAR 0 1
53299: PPUSH
53300: CALL_OW 251
53304: PPUSH
53305: LD_INT 10
53307: PPUSH
53308: LD_INT 0
53310: PPUSH
53311: CALL_OW 50
// continue ;
53315: GO 53216
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53317: LD_VAR 0 12
53321: PUSH
53322: LD_INT 1
53324: ARRAY
53325: PPUSH
53326: CALL_OW 313
53330: IFFALSE 53358
53332: PUSH
53333: LD_VAR 0 12
53337: PUSH
53338: LD_INT 1
53340: ARRAY
53341: PPUSH
53342: CALL_OW 266
53346: PUSH
53347: LD_INT 32
53349: PUSH
53350: LD_INT 31
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: IN
53357: AND
53358: IFTRUE 53379
53360: PUSH
53361: LD_VAR 0 12
53365: PUSH
53366: LD_INT 1
53368: ARRAY
53369: PPUSH
53370: CALL_OW 313
53374: PUSH
53375: LD_INT 6
53377: EQUAL
53378: OR
53379: IFFALSE 53399
// f := Delete ( f , 1 ) ;
53381: LD_ADDR_VAR 0 12
53385: PUSH
53386: LD_VAR 0 12
53390: PPUSH
53391: LD_INT 1
53393: PPUSH
53394: CALL_OW 3
53398: ST_TO_ADDR
// if not f then
53399: LD_VAR 0 12
53403: NOT
53404: IFFALSE 53422
// begin x := x + 2 ;
53406: LD_ADDR_VAR 0 13
53410: PUSH
53411: LD_VAR 0 13
53415: PUSH
53416: LD_INT 2
53418: PLUS
53419: ST_TO_ADDR
// continue ;
53420: GO 53216
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53422: LD_VAR 0 12
53426: PUSH
53427: LD_INT 1
53429: ARRAY
53430: PPUSH
53431: CALL_OW 266
53435: PUSH
53436: LD_INT 5
53438: EQUAL
53439: IFFALSE 53513
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53441: LD_VAR 0 12
53445: PUSH
53446: LD_INT 1
53448: ARRAY
53449: PPUSH
53450: CALL_OW 313
53454: PUSH
53455: LD_INT 3
53457: LESS
53458: IFFALSE 53494
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53460: LD_INT 0
53462: PPUSH
53463: LD_INT 5
53465: PUSH
53466: LD_INT 8
53468: PUSH
53469: LD_INT 9
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: PUSH
53477: LD_VAR 0 17
53481: ARRAY
53482: PPUSH
53483: LD_VAR 0 4
53487: PPUSH
53488: CALL_OW 380
53492: GO 53511
// PrepareHuman ( false , i , skill ) ;
53494: LD_INT 0
53496: PPUSH
53497: LD_VAR 0 8
53501: PPUSH
53502: LD_VAR 0 4
53506: PPUSH
53507: CALL_OW 380
// end else
53511: GO 53530
// PrepareHuman ( false , i , skill ) ;
53513: LD_INT 0
53515: PPUSH
53516: LD_VAR 0 8
53520: PPUSH
53521: LD_VAR 0 4
53525: PPUSH
53526: CALL_OW 380
// un := CreateHuman ;
53530: LD_ADDR_VAR 0 14
53534: PUSH
53535: CALL_OW 44
53539: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53540: LD_ADDR_VAR 0 7
53544: PUSH
53545: LD_VAR 0 7
53549: PPUSH
53550: LD_INT 1
53552: PPUSH
53553: LD_VAR 0 14
53557: PPUSH
53558: CALL_OW 2
53562: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53563: LD_VAR 0 14
53567: PPUSH
53568: LD_VAR 0 12
53572: PUSH
53573: LD_INT 1
53575: ARRAY
53576: PPUSH
53577: CALL_OW 52
// end ;
53581: GO 53216
53583: POP
53584: POP
// end ;
53585: GO 52516
53587: POP
53588: POP
// result := result ^ buildings ;
53589: LD_ADDR_VAR 0 7
53593: PUSH
53594: LD_VAR 0 7
53598: PUSH
53599: LD_VAR 0 18
53603: ADD
53604: ST_TO_ADDR
// end else
53605: GO 53748
// begin for i = 1 to personel do
53607: LD_ADDR_VAR 0 8
53611: PUSH
53612: DOUBLE
53613: LD_INT 1
53615: DEC
53616: ST_TO_ADDR
53617: LD_VAR 0 6
53621: PUSH
53622: FOR_TO
53623: IFFALSE 53746
// begin if i > 4 then
53625: LD_VAR 0 8
53629: PUSH
53630: LD_INT 4
53632: GREATER
53633: IFFALSE 53637
// break ;
53635: GO 53746
// x := personel [ i ] ;
53637: LD_ADDR_VAR 0 13
53641: PUSH
53642: LD_VAR 0 6
53646: PUSH
53647: LD_VAR 0 8
53651: ARRAY
53652: ST_TO_ADDR
// if x = - 1 then
53653: LD_VAR 0 13
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: EQUAL
53662: IFFALSE 53666
// continue ;
53664: GO 53622
// PrepareHuman ( false , i , skill ) ;
53666: LD_INT 0
53668: PPUSH
53669: LD_VAR 0 8
53673: PPUSH
53674: LD_VAR 0 4
53678: PPUSH
53679: CALL_OW 380
// un := CreateHuman ;
53683: LD_ADDR_VAR 0 14
53687: PUSH
53688: CALL_OW 44
53692: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53693: LD_VAR 0 14
53697: PPUSH
53698: LD_VAR 0 1
53702: PPUSH
53703: CALL_OW 250
53707: PPUSH
53708: LD_VAR 0 1
53712: PPUSH
53713: CALL_OW 251
53717: PPUSH
53718: LD_INT 10
53720: PPUSH
53721: LD_INT 0
53723: PPUSH
53724: CALL_OW 50
// result := result ^ un ;
53728: LD_ADDR_VAR 0 7
53732: PUSH
53733: LD_VAR 0 7
53737: PUSH
53738: LD_VAR 0 14
53742: ADD
53743: ST_TO_ADDR
// end ;
53744: GO 53622
53746: POP
53747: POP
// end ; end ;
53748: LD_VAR 0 7
53752: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53753: LD_INT 0
53755: PPUSH
53756: PPUSH
53757: PPUSH
53758: PPUSH
53759: PPUSH
53760: PPUSH
53761: PPUSH
53762: PPUSH
53763: PPUSH
53764: PPUSH
53765: PPUSH
53766: PPUSH
53767: PPUSH
53768: PPUSH
53769: PPUSH
53770: PPUSH
// result := false ;
53771: LD_ADDR_VAR 0 3
53775: PUSH
53776: LD_INT 0
53778: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53779: LD_VAR 0 1
53783: NOT
53784: IFTRUE 53809
53786: PUSH
53787: LD_VAR 0 1
53791: PPUSH
53792: CALL_OW 266
53796: PUSH
53797: LD_INT 32
53799: PUSH
53800: LD_INT 33
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: IN
53807: NOT
53808: OR
53809: IFFALSE 53813
// exit ;
53811: GO 54948
// nat := GetNation ( tower ) ;
53813: LD_ADDR_VAR 0 12
53817: PUSH
53818: LD_VAR 0 1
53822: PPUSH
53823: CALL_OW 248
53827: ST_TO_ADDR
// side := GetSide ( tower ) ;
53828: LD_ADDR_VAR 0 16
53832: PUSH
53833: LD_VAR 0 1
53837: PPUSH
53838: CALL_OW 255
53842: ST_TO_ADDR
// x := GetX ( tower ) ;
53843: LD_ADDR_VAR 0 10
53847: PUSH
53848: LD_VAR 0 1
53852: PPUSH
53853: CALL_OW 250
53857: ST_TO_ADDR
// y := GetY ( tower ) ;
53858: LD_ADDR_VAR 0 11
53862: PUSH
53863: LD_VAR 0 1
53867: PPUSH
53868: CALL_OW 251
53872: ST_TO_ADDR
// if not x or not y then
53873: LD_VAR 0 10
53877: NOT
53878: IFTRUE 53887
53880: PUSH
53881: LD_VAR 0 11
53885: NOT
53886: OR
53887: IFFALSE 53891
// exit ;
53889: GO 54948
// weapon := 0 ;
53891: LD_ADDR_VAR 0 18
53895: PUSH
53896: LD_INT 0
53898: ST_TO_ADDR
// fac_list := [ ] ;
53899: LD_ADDR_VAR 0 17
53903: PUSH
53904: EMPTY
53905: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53906: LD_ADDR_VAR 0 6
53910: PUSH
53911: LD_VAR 0 1
53915: PPUSH
53916: CALL_OW 274
53920: PPUSH
53921: LD_VAR 0 2
53925: PPUSH
53926: LD_INT 0
53928: PPUSH
53929: CALL 51483 0 3
53933: PPUSH
53934: LD_INT 30
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PPUSH
53944: CALL_OW 72
53948: ST_TO_ADDR
// if not factories then
53949: LD_VAR 0 6
53953: NOT
53954: IFFALSE 53958
// exit ;
53956: GO 54948
// for i in factories do
53958: LD_ADDR_VAR 0 8
53962: PUSH
53963: LD_VAR 0 6
53967: PUSH
53968: FOR_IN
53969: IFFALSE 53994
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53971: LD_ADDR_VAR 0 17
53975: PUSH
53976: LD_VAR 0 17
53980: PUSH
53981: LD_VAR 0 8
53985: PPUSH
53986: CALL_OW 478
53990: UNION
53991: ST_TO_ADDR
53992: GO 53968
53994: POP
53995: POP
// if not fac_list then
53996: LD_VAR 0 17
54000: NOT
54001: IFFALSE 54005
// exit ;
54003: GO 54948
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54005: LD_ADDR_VAR 0 5
54009: PUSH
54010: LD_INT 4
54012: PUSH
54013: LD_INT 5
54015: PUSH
54016: LD_INT 9
54018: PUSH
54019: LD_INT 10
54021: PUSH
54022: LD_INT 6
54024: PUSH
54025: LD_INT 7
54027: PUSH
54028: LD_INT 11
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 27
54042: PUSH
54043: LD_INT 28
54045: PUSH
54046: LD_INT 26
54048: PUSH
54049: LD_INT 30
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 43
54060: PUSH
54061: LD_INT 44
54063: PUSH
54064: LD_INT 46
54066: PUSH
54067: LD_INT 45
54069: PUSH
54070: LD_INT 47
54072: PUSH
54073: LD_INT 49
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: LIST
54088: PUSH
54089: LD_VAR 0 12
54093: ARRAY
54094: ST_TO_ADDR
// list := list isect fac_list ;
54095: LD_ADDR_VAR 0 5
54099: PUSH
54100: LD_VAR 0 5
54104: PUSH
54105: LD_VAR 0 17
54109: ISECT
54110: ST_TO_ADDR
// if not list then
54111: LD_VAR 0 5
54115: NOT
54116: IFFALSE 54120
// exit ;
54118: GO 54948
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54120: LD_VAR 0 12
54124: PUSH
54125: LD_INT 3
54127: EQUAL
54128: IFFALSE 54140
54130: PUSH
54131: LD_INT 49
54133: PUSH
54134: LD_VAR 0 5
54138: IN
54139: AND
54140: IFFALSE 54160
54142: PUSH
54143: LD_INT 31
54145: PPUSH
54146: LD_VAR 0 16
54150: PPUSH
54151: CALL_OW 321
54155: PUSH
54156: LD_INT 2
54158: EQUAL
54159: AND
54160: IFFALSE 54220
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54162: LD_INT 22
54164: PUSH
54165: LD_VAR 0 16
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 35
54176: PUSH
54177: LD_INT 49
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 91
54186: PUSH
54187: LD_VAR 0 1
54191: PUSH
54192: LD_INT 10
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: LIST
54204: PPUSH
54205: CALL_OW 69
54209: NOT
54210: IFFALSE 54220
// weapon := ru_time_lapser ;
54212: LD_ADDR_VAR 0 18
54216: PUSH
54217: LD_INT 49
54219: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54220: LD_VAR 0 12
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: IN
54235: IFFALSE 54259
54237: PUSH
54238: LD_INT 11
54240: PUSH
54241: LD_VAR 0 5
54245: IN
54246: IFTRUE 54258
54248: PUSH
54249: LD_INT 30
54251: PUSH
54252: LD_VAR 0 5
54256: IN
54257: OR
54258: AND
54259: IFFALSE 54279
54261: PUSH
54262: LD_INT 6
54264: PPUSH
54265: LD_VAR 0 16
54269: PPUSH
54270: CALL_OW 321
54274: PUSH
54275: LD_INT 2
54277: EQUAL
54278: AND
54279: IFFALSE 54446
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54281: LD_INT 22
54283: PUSH
54284: LD_VAR 0 16
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: LD_INT 35
54298: PUSH
54299: LD_INT 11
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 35
54308: PUSH
54309: LD_INT 30
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 91
54323: PUSH
54324: LD_VAR 0 1
54328: PUSH
54329: LD_INT 18
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: LIST
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: LIST
54341: PPUSH
54342: CALL_OW 69
54346: NOT
54347: IFFALSE 54423
54349: PUSH
54350: LD_INT 22
54352: PUSH
54353: LD_VAR 0 16
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: LD_INT 30
54367: PUSH
54368: LD_INT 32
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 30
54377: PUSH
54378: LD_INT 33
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 91
54392: PUSH
54393: LD_VAR 0 1
54397: PUSH
54398: LD_INT 12
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: LIST
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: LIST
54410: PUSH
54411: EMPTY
54412: LIST
54413: PPUSH
54414: CALL_OW 69
54418: PUSH
54419: LD_INT 2
54421: GREATER
54422: AND
54423: IFFALSE 54446
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54425: LD_ADDR_VAR 0 18
54429: PUSH
54430: LD_INT 11
54432: PUSH
54433: LD_INT 30
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_VAR 0 12
54444: ARRAY
54445: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54446: LD_VAR 0 18
54450: NOT
54451: IFFALSE 54471
54453: PUSH
54454: LD_INT 40
54456: PPUSH
54457: LD_VAR 0 16
54461: PPUSH
54462: CALL_OW 321
54466: PUSH
54467: LD_INT 2
54469: EQUAL
54470: AND
54471: IFFALSE 54507
54473: PUSH
54474: LD_INT 7
54476: PUSH
54477: LD_VAR 0 5
54481: IN
54482: IFTRUE 54494
54484: PUSH
54485: LD_INT 28
54487: PUSH
54488: LD_VAR 0 5
54492: IN
54493: OR
54494: IFTRUE 54506
54496: PUSH
54497: LD_INT 45
54499: PUSH
54500: LD_VAR 0 5
54504: IN
54505: OR
54506: AND
54507: IFFALSE 54761
// begin hex := GetHexInfo ( x , y ) ;
54509: LD_ADDR_VAR 0 4
54513: PUSH
54514: LD_VAR 0 10
54518: PPUSH
54519: LD_VAR 0 11
54523: PPUSH
54524: CALL_OW 546
54528: ST_TO_ADDR
// if hex [ 1 ] then
54529: LD_VAR 0 4
54533: PUSH
54534: LD_INT 1
54536: ARRAY
54537: IFFALSE 54541
// exit ;
54539: GO 54948
// height := hex [ 2 ] ;
54541: LD_ADDR_VAR 0 15
54545: PUSH
54546: LD_VAR 0 4
54550: PUSH
54551: LD_INT 2
54553: ARRAY
54554: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54555: LD_ADDR_VAR 0 14
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: LD_INT 5
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: ST_TO_ADDR
// for i in tmp do
54578: LD_ADDR_VAR 0 8
54582: PUSH
54583: LD_VAR 0 14
54587: PUSH
54588: FOR_IN
54589: IFFALSE 54759
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54591: LD_ADDR_VAR 0 9
54595: PUSH
54596: LD_VAR 0 10
54600: PPUSH
54601: LD_VAR 0 8
54605: PPUSH
54606: LD_INT 5
54608: PPUSH
54609: CALL_OW 272
54613: PUSH
54614: LD_VAR 0 11
54618: PPUSH
54619: LD_VAR 0 8
54623: PPUSH
54624: LD_INT 5
54626: PPUSH
54627: CALL_OW 273
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54636: LD_VAR 0 9
54640: PUSH
54641: LD_INT 1
54643: ARRAY
54644: PPUSH
54645: LD_VAR 0 9
54649: PUSH
54650: LD_INT 2
54652: ARRAY
54653: PPUSH
54654: CALL_OW 488
54658: IFFALSE 54757
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54660: LD_ADDR_VAR 0 4
54664: PUSH
54665: LD_VAR 0 9
54669: PUSH
54670: LD_INT 1
54672: ARRAY
54673: PPUSH
54674: LD_VAR 0 9
54678: PUSH
54679: LD_INT 2
54681: ARRAY
54682: PPUSH
54683: CALL_OW 546
54687: ST_TO_ADDR
// if hex [ 1 ] then
54688: LD_VAR 0 4
54692: PUSH
54693: LD_INT 1
54695: ARRAY
54696: IFFALSE 54700
// continue ;
54698: GO 54588
// h := hex [ 2 ] ;
54700: LD_ADDR_VAR 0 13
54704: PUSH
54705: LD_VAR 0 4
54709: PUSH
54710: LD_INT 2
54712: ARRAY
54713: ST_TO_ADDR
// if h + 7 < height then
54714: LD_VAR 0 13
54718: PUSH
54719: LD_INT 7
54721: PLUS
54722: PUSH
54723: LD_VAR 0 15
54727: LESS
54728: IFFALSE 54757
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54730: LD_ADDR_VAR 0 18
54734: PUSH
54735: LD_INT 7
54737: PUSH
54738: LD_INT 28
54740: PUSH
54741: LD_INT 45
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: LIST
54748: PUSH
54749: LD_VAR 0 12
54753: ARRAY
54754: ST_TO_ADDR
// break ;
54755: GO 54759
// end ; end ; end ;
54757: GO 54588
54759: POP
54760: POP
// end ; if not weapon then
54761: LD_VAR 0 18
54765: NOT
54766: IFFALSE 54826
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54768: LD_ADDR_VAR 0 5
54772: PUSH
54773: LD_VAR 0 5
54777: PUSH
54778: LD_INT 11
54780: PUSH
54781: LD_INT 30
54783: PUSH
54784: LD_INT 49
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: DIFF
54792: ST_TO_ADDR
// if not list then
54793: LD_VAR 0 5
54797: NOT
54798: IFFALSE 54802
// exit ;
54800: GO 54948
// weapon := list [ rand ( 1 , list ) ] ;
54802: LD_ADDR_VAR 0 18
54806: PUSH
54807: LD_VAR 0 5
54811: PUSH
54812: LD_INT 1
54814: PPUSH
54815: LD_VAR 0 5
54819: PPUSH
54820: CALL_OW 12
54824: ARRAY
54825: ST_TO_ADDR
// end ; if weapon then
54826: LD_VAR 0 18
54830: IFFALSE 54948
// begin tmp := CostOfWeapon ( weapon ) ;
54832: LD_ADDR_VAR 0 14
54836: PUSH
54837: LD_VAR 0 18
54841: PPUSH
54842: CALL_OW 451
54846: ST_TO_ADDR
// j := GetBase ( tower ) ;
54847: LD_ADDR_VAR 0 9
54851: PUSH
54852: LD_VAR 0 1
54856: PPUSH
54857: CALL_OW 274
54861: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54862: LD_VAR 0 9
54866: PPUSH
54867: LD_INT 1
54869: PPUSH
54870: CALL_OW 275
54874: PUSH
54875: LD_VAR 0 14
54879: PUSH
54880: LD_INT 1
54882: ARRAY
54883: GREATEREQUAL
54884: IFFALSE 54910
54886: PUSH
54887: LD_VAR 0 9
54891: PPUSH
54892: LD_INT 2
54894: PPUSH
54895: CALL_OW 275
54899: PUSH
54900: LD_VAR 0 14
54904: PUSH
54905: LD_INT 2
54907: ARRAY
54908: GREATEREQUAL
54909: AND
54910: IFFALSE 54936
54912: PUSH
54913: LD_VAR 0 9
54917: PPUSH
54918: LD_INT 3
54920: PPUSH
54921: CALL_OW 275
54925: PUSH
54926: LD_VAR 0 14
54930: PUSH
54931: LD_INT 3
54933: ARRAY
54934: GREATEREQUAL
54935: AND
54936: IFFALSE 54948
// result := weapon ;
54938: LD_ADDR_VAR 0 3
54942: PUSH
54943: LD_VAR 0 18
54947: ST_TO_ADDR
// end ; end ;
54948: LD_VAR 0 3
54952: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54953: LD_INT 0
54955: PPUSH
54956: PPUSH
// result := true ;
54957: LD_ADDR_VAR 0 3
54961: PUSH
54962: LD_INT 1
54964: ST_TO_ADDR
// if array1 = array2 then
54965: LD_VAR 0 1
54969: PUSH
54970: LD_VAR 0 2
54974: EQUAL
54975: IFFALSE 55035
// begin for i = 1 to array1 do
54977: LD_ADDR_VAR 0 4
54981: PUSH
54982: DOUBLE
54983: LD_INT 1
54985: DEC
54986: ST_TO_ADDR
54987: LD_VAR 0 1
54991: PUSH
54992: FOR_TO
54993: IFFALSE 55031
// if array1 [ i ] <> array2 [ i ] then
54995: LD_VAR 0 1
54999: PUSH
55000: LD_VAR 0 4
55004: ARRAY
55005: PUSH
55006: LD_VAR 0 2
55010: PUSH
55011: LD_VAR 0 4
55015: ARRAY
55016: NONEQUAL
55017: IFFALSE 55029
// begin result := false ;
55019: LD_ADDR_VAR 0 3
55023: PUSH
55024: LD_INT 0
55026: ST_TO_ADDR
// break ;
55027: GO 55031
// end ;
55029: GO 54992
55031: POP
55032: POP
// end else
55033: GO 55043
// result := false ;
55035: LD_ADDR_VAR 0 3
55039: PUSH
55040: LD_INT 0
55042: ST_TO_ADDR
// end ;
55043: LD_VAR 0 3
55047: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55048: LD_INT 0
55050: PPUSH
55051: PPUSH
// if not array1 or not array2 then
55052: LD_VAR 0 1
55056: NOT
55057: IFTRUE 55066
55059: PUSH
55060: LD_VAR 0 2
55064: NOT
55065: OR
55066: IFFALSE 55070
// exit ;
55068: GO 55134
// result := true ;
55070: LD_ADDR_VAR 0 3
55074: PUSH
55075: LD_INT 1
55077: ST_TO_ADDR
// for i = 1 to array1 do
55078: LD_ADDR_VAR 0 4
55082: PUSH
55083: DOUBLE
55084: LD_INT 1
55086: DEC
55087: ST_TO_ADDR
55088: LD_VAR 0 1
55092: PUSH
55093: FOR_TO
55094: IFFALSE 55132
// if array1 [ i ] <> array2 [ i ] then
55096: LD_VAR 0 1
55100: PUSH
55101: LD_VAR 0 4
55105: ARRAY
55106: PUSH
55107: LD_VAR 0 2
55111: PUSH
55112: LD_VAR 0 4
55116: ARRAY
55117: NONEQUAL
55118: IFFALSE 55130
// begin result := false ;
55120: LD_ADDR_VAR 0 3
55124: PUSH
55125: LD_INT 0
55127: ST_TO_ADDR
// break ;
55128: GO 55132
// end ;
55130: GO 55093
55132: POP
55133: POP
// end ;
55134: LD_VAR 0 3
55138: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55139: LD_INT 0
55141: PPUSH
55142: PPUSH
55143: PPUSH
// pom := GetBase ( fac ) ;
55144: LD_ADDR_VAR 0 5
55148: PUSH
55149: LD_VAR 0 1
55153: PPUSH
55154: CALL_OW 274
55158: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55159: LD_ADDR_VAR 0 4
55163: PUSH
55164: LD_VAR 0 2
55168: PUSH
55169: LD_INT 1
55171: ARRAY
55172: PPUSH
55173: LD_VAR 0 2
55177: PUSH
55178: LD_INT 2
55180: ARRAY
55181: PPUSH
55182: LD_VAR 0 2
55186: PUSH
55187: LD_INT 3
55189: ARRAY
55190: PPUSH
55191: LD_VAR 0 2
55195: PUSH
55196: LD_INT 4
55198: ARRAY
55199: PPUSH
55200: CALL_OW 449
55204: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55205: LD_ADDR_VAR 0 3
55209: PUSH
55210: LD_VAR 0 5
55214: PPUSH
55215: LD_INT 1
55217: PPUSH
55218: CALL_OW 275
55222: PUSH
55223: LD_VAR 0 4
55227: PUSH
55228: LD_INT 1
55230: ARRAY
55231: GREATEREQUAL
55232: IFFALSE 55258
55234: PUSH
55235: LD_VAR 0 5
55239: PPUSH
55240: LD_INT 2
55242: PPUSH
55243: CALL_OW 275
55247: PUSH
55248: LD_VAR 0 4
55252: PUSH
55253: LD_INT 2
55255: ARRAY
55256: GREATEREQUAL
55257: AND
55258: IFFALSE 55284
55260: PUSH
55261: LD_VAR 0 5
55265: PPUSH
55266: LD_INT 3
55268: PPUSH
55269: CALL_OW 275
55273: PUSH
55274: LD_VAR 0 4
55278: PUSH
55279: LD_INT 3
55281: ARRAY
55282: GREATEREQUAL
55283: AND
55284: ST_TO_ADDR
// end ;
55285: LD_VAR 0 3
55289: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55290: LD_INT 0
55292: PPUSH
55293: PPUSH
55294: PPUSH
55295: PPUSH
// pom := GetBase ( building ) ;
55296: LD_ADDR_VAR 0 3
55300: PUSH
55301: LD_VAR 0 1
55305: PPUSH
55306: CALL_OW 274
55310: ST_TO_ADDR
// if not pom then
55311: LD_VAR 0 3
55315: NOT
55316: IFFALSE 55320
// exit ;
55318: GO 55494
// btype := GetBType ( building ) ;
55320: LD_ADDR_VAR 0 5
55324: PUSH
55325: LD_VAR 0 1
55329: PPUSH
55330: CALL_OW 266
55334: ST_TO_ADDR
// if btype = b_armoury then
55335: LD_VAR 0 5
55339: PUSH
55340: LD_INT 4
55342: EQUAL
55343: IFFALSE 55353
// btype := b_barracks ;
55345: LD_ADDR_VAR 0 5
55349: PUSH
55350: LD_INT 5
55352: ST_TO_ADDR
// if btype = b_depot then
55353: LD_VAR 0 5
55357: PUSH
55358: LD_INT 0
55360: EQUAL
55361: IFFALSE 55371
// btype := b_warehouse ;
55363: LD_ADDR_VAR 0 5
55367: PUSH
55368: LD_INT 1
55370: ST_TO_ADDR
// if btype = b_workshop then
55371: LD_VAR 0 5
55375: PUSH
55376: LD_INT 2
55378: EQUAL
55379: IFFALSE 55389
// btype := b_factory ;
55381: LD_ADDR_VAR 0 5
55385: PUSH
55386: LD_INT 3
55388: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55389: LD_ADDR_VAR 0 4
55393: PUSH
55394: LD_VAR 0 5
55398: PPUSH
55399: LD_VAR 0 1
55403: PPUSH
55404: CALL_OW 248
55408: PPUSH
55409: CALL_OW 450
55413: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55414: LD_ADDR_VAR 0 2
55418: PUSH
55419: LD_VAR 0 3
55423: PPUSH
55424: LD_INT 1
55426: PPUSH
55427: CALL_OW 275
55431: PUSH
55432: LD_VAR 0 4
55436: PUSH
55437: LD_INT 1
55439: ARRAY
55440: GREATEREQUAL
55441: IFFALSE 55467
55443: PUSH
55444: LD_VAR 0 3
55448: PPUSH
55449: LD_INT 2
55451: PPUSH
55452: CALL_OW 275
55456: PUSH
55457: LD_VAR 0 4
55461: PUSH
55462: LD_INT 2
55464: ARRAY
55465: GREATEREQUAL
55466: AND
55467: IFFALSE 55493
55469: PUSH
55470: LD_VAR 0 3
55474: PPUSH
55475: LD_INT 3
55477: PPUSH
55478: CALL_OW 275
55482: PUSH
55483: LD_VAR 0 4
55487: PUSH
55488: LD_INT 3
55490: ARRAY
55491: GREATEREQUAL
55492: AND
55493: ST_TO_ADDR
// end ;
55494: LD_VAR 0 2
55498: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55499: LD_INT 0
55501: PPUSH
55502: PPUSH
55503: PPUSH
// pom := GetBase ( building ) ;
55504: LD_ADDR_VAR 0 4
55508: PUSH
55509: LD_VAR 0 1
55513: PPUSH
55514: CALL_OW 274
55518: ST_TO_ADDR
// if not pom then
55519: LD_VAR 0 4
55523: NOT
55524: IFFALSE 55528
// exit ;
55526: GO 55633
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55528: LD_ADDR_VAR 0 5
55532: PUSH
55533: LD_VAR 0 2
55537: PPUSH
55538: LD_VAR 0 1
55542: PPUSH
55543: CALL_OW 248
55547: PPUSH
55548: CALL_OW 450
55552: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55553: LD_ADDR_VAR 0 3
55557: PUSH
55558: LD_VAR 0 4
55562: PPUSH
55563: LD_INT 1
55565: PPUSH
55566: CALL_OW 275
55570: PUSH
55571: LD_VAR 0 5
55575: PUSH
55576: LD_INT 1
55578: ARRAY
55579: GREATEREQUAL
55580: IFFALSE 55606
55582: PUSH
55583: LD_VAR 0 4
55587: PPUSH
55588: LD_INT 2
55590: PPUSH
55591: CALL_OW 275
55595: PUSH
55596: LD_VAR 0 5
55600: PUSH
55601: LD_INT 2
55603: ARRAY
55604: GREATEREQUAL
55605: AND
55606: IFFALSE 55632
55608: PUSH
55609: LD_VAR 0 4
55613: PPUSH
55614: LD_INT 3
55616: PPUSH
55617: CALL_OW 275
55621: PUSH
55622: LD_VAR 0 5
55626: PUSH
55627: LD_INT 3
55629: ARRAY
55630: GREATEREQUAL
55631: AND
55632: ST_TO_ADDR
// end ;
55633: LD_VAR 0 3
55637: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55638: LD_INT 0
55640: PPUSH
55641: PPUSH
55642: PPUSH
55643: PPUSH
55644: PPUSH
55645: PPUSH
55646: PPUSH
55647: PPUSH
55648: PPUSH
55649: PPUSH
55650: PPUSH
// result := false ;
55651: LD_ADDR_VAR 0 8
55655: PUSH
55656: LD_INT 0
55658: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55659: LD_VAR 0 5
55663: NOT
55664: IFTRUE 55673
55666: PUSH
55667: LD_VAR 0 1
55671: NOT
55672: OR
55673: IFTRUE 55682
55675: PUSH
55676: LD_VAR 0 2
55680: NOT
55681: OR
55682: IFTRUE 55691
55684: PUSH
55685: LD_VAR 0 3
55689: NOT
55690: OR
55691: IFFALSE 55695
// exit ;
55693: GO 56521
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55695: LD_ADDR_VAR 0 14
55699: PUSH
55700: LD_VAR 0 1
55704: PPUSH
55705: LD_VAR 0 2
55709: PPUSH
55710: LD_VAR 0 3
55714: PPUSH
55715: LD_VAR 0 4
55719: PPUSH
55720: LD_VAR 0 5
55724: PUSH
55725: LD_INT 1
55727: ARRAY
55728: PPUSH
55729: CALL_OW 248
55733: PPUSH
55734: LD_INT 0
55736: PPUSH
55737: CALL 57802 0 6
55741: ST_TO_ADDR
// if not hexes then
55742: LD_VAR 0 14
55746: NOT
55747: IFFALSE 55751
// exit ;
55749: GO 56521
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55751: LD_ADDR_VAR 0 17
55755: PUSH
55756: LD_VAR 0 5
55760: PPUSH
55761: LD_INT 22
55763: PUSH
55764: LD_VAR 0 13
55768: PPUSH
55769: CALL_OW 255
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 30
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 30
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PPUSH
55810: CALL_OW 72
55814: ST_TO_ADDR
// for i = 1 to hexes do
55815: LD_ADDR_VAR 0 9
55819: PUSH
55820: DOUBLE
55821: LD_INT 1
55823: DEC
55824: ST_TO_ADDR
55825: LD_VAR 0 14
55829: PUSH
55830: FOR_TO
55831: IFFALSE 56519
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55833: LD_ADDR_VAR 0 13
55837: PUSH
55838: LD_VAR 0 14
55842: PUSH
55843: LD_VAR 0 9
55847: ARRAY
55848: PUSH
55849: LD_INT 1
55851: ARRAY
55852: PPUSH
55853: LD_VAR 0 14
55857: PUSH
55858: LD_VAR 0 9
55862: ARRAY
55863: PUSH
55864: LD_INT 2
55866: ARRAY
55867: PPUSH
55868: CALL_OW 428
55872: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55873: LD_VAR 0 14
55877: PUSH
55878: LD_VAR 0 9
55882: ARRAY
55883: PUSH
55884: LD_INT 1
55886: ARRAY
55887: PPUSH
55888: LD_VAR 0 14
55892: PUSH
55893: LD_VAR 0 9
55897: ARRAY
55898: PUSH
55899: LD_INT 2
55901: ARRAY
55902: PPUSH
55903: CALL_OW 351
55907: IFTRUE 55946
55909: PUSH
55910: LD_VAR 0 14
55914: PUSH
55915: LD_VAR 0 9
55919: ARRAY
55920: PUSH
55921: LD_INT 1
55923: ARRAY
55924: PPUSH
55925: LD_VAR 0 14
55929: PUSH
55930: LD_VAR 0 9
55934: ARRAY
55935: PUSH
55936: LD_INT 2
55938: ARRAY
55939: PPUSH
55940: CALL_OW 488
55944: NOT
55945: OR
55946: IFTRUE 55963
55948: PUSH
55949: LD_VAR 0 13
55953: PPUSH
55954: CALL_OW 247
55958: PUSH
55959: LD_INT 3
55961: EQUAL
55962: OR
55963: IFFALSE 55969
// exit ;
55965: POP
55966: POP
55967: GO 56521
// if not tmp then
55969: LD_VAR 0 13
55973: NOT
55974: IFFALSE 55978
// continue ;
55976: GO 55830
// result := true ;
55978: LD_ADDR_VAR 0 8
55982: PUSH
55983: LD_INT 1
55985: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55986: LD_VAR 0 6
55990: IFFALSE 56007
55992: PUSH
55993: LD_VAR 0 13
55997: PPUSH
55998: CALL_OW 247
56002: PUSH
56003: LD_INT 2
56005: EQUAL
56006: AND
56007: IFFALSE 56024
56009: PUSH
56010: LD_VAR 0 13
56014: PPUSH
56015: CALL_OW 263
56019: PUSH
56020: LD_INT 1
56022: EQUAL
56023: AND
56024: IFFALSE 56188
// begin if IsDrivenBy ( tmp ) then
56026: LD_VAR 0 13
56030: PPUSH
56031: CALL_OW 311
56035: IFFALSE 56039
// continue ;
56037: GO 55830
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56039: LD_VAR 0 6
56043: PPUSH
56044: LD_INT 3
56046: PUSH
56047: LD_INT 60
56049: PUSH
56050: EMPTY
56051: LIST
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: LD_INT 55
56062: PUSH
56063: EMPTY
56064: LIST
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PPUSH
56074: CALL_OW 72
56078: IFFALSE 56186
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56080: LD_ADDR_VAR 0 18
56084: PUSH
56085: LD_VAR 0 6
56089: PPUSH
56090: LD_INT 3
56092: PUSH
56093: LD_INT 60
56095: PUSH
56096: EMPTY
56097: LIST
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: LD_INT 55
56108: PUSH
56109: EMPTY
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PPUSH
56120: CALL_OW 72
56124: PUSH
56125: LD_INT 1
56127: ARRAY
56128: ST_TO_ADDR
// if IsInUnit ( driver ) then
56129: LD_VAR 0 18
56133: PPUSH
56134: CALL_OW 310
56138: IFFALSE 56149
// ComExit ( driver ) ;
56140: LD_VAR 0 18
56144: PPUSH
56145: CALL 81802 0 1
// AddComEnterUnit ( driver , tmp ) ;
56149: LD_VAR 0 18
56153: PPUSH
56154: LD_VAR 0 13
56158: PPUSH
56159: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56163: LD_VAR 0 18
56167: PPUSH
56168: LD_VAR 0 7
56172: PPUSH
56173: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56177: LD_VAR 0 18
56181: PPUSH
56182: CALL_OW 181
// end ; continue ;
56186: GO 55830
// end ; if not cleaners or not tmp in cleaners then
56188: LD_VAR 0 6
56192: NOT
56193: IFTRUE 56208
56195: PUSH
56196: LD_VAR 0 13
56200: PUSH
56201: LD_VAR 0 6
56205: IN
56206: NOT
56207: OR
56208: IFFALSE 56517
// begin if dep then
56210: LD_VAR 0 17
56214: IFFALSE 56350
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56216: LD_ADDR_VAR 0 16
56220: PUSH
56221: LD_VAR 0 17
56225: PUSH
56226: LD_INT 1
56228: ARRAY
56229: PPUSH
56230: CALL_OW 250
56234: PPUSH
56235: LD_VAR 0 17
56239: PUSH
56240: LD_INT 1
56242: ARRAY
56243: PPUSH
56244: CALL_OW 254
56248: PPUSH
56249: LD_INT 5
56251: PPUSH
56252: CALL_OW 272
56256: PUSH
56257: LD_VAR 0 17
56261: PUSH
56262: LD_INT 1
56264: ARRAY
56265: PPUSH
56266: CALL_OW 251
56270: PPUSH
56271: LD_VAR 0 17
56275: PUSH
56276: LD_INT 1
56278: ARRAY
56279: PPUSH
56280: CALL_OW 254
56284: PPUSH
56285: LD_INT 5
56287: PPUSH
56288: CALL_OW 273
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56297: LD_VAR 0 16
56301: PUSH
56302: LD_INT 1
56304: ARRAY
56305: PPUSH
56306: LD_VAR 0 16
56310: PUSH
56311: LD_INT 2
56313: ARRAY
56314: PPUSH
56315: CALL_OW 488
56319: IFFALSE 56350
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56321: LD_VAR 0 13
56325: PPUSH
56326: LD_VAR 0 16
56330: PUSH
56331: LD_INT 1
56333: ARRAY
56334: PPUSH
56335: LD_VAR 0 16
56339: PUSH
56340: LD_INT 2
56342: ARRAY
56343: PPUSH
56344: CALL_OW 111
// continue ;
56348: GO 55830
// end ; end ; r := GetDir ( tmp ) ;
56350: LD_ADDR_VAR 0 15
56354: PUSH
56355: LD_VAR 0 13
56359: PPUSH
56360: CALL_OW 254
56364: ST_TO_ADDR
// if r = 5 then
56365: LD_VAR 0 15
56369: PUSH
56370: LD_INT 5
56372: EQUAL
56373: IFFALSE 56383
// r := 0 ;
56375: LD_ADDR_VAR 0 15
56379: PUSH
56380: LD_INT 0
56382: ST_TO_ADDR
// for j = r to 5 do
56383: LD_ADDR_VAR 0 10
56387: PUSH
56388: DOUBLE
56389: LD_VAR 0 15
56393: DEC
56394: ST_TO_ADDR
56395: LD_INT 5
56397: PUSH
56398: FOR_TO
56399: IFFALSE 56515
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56401: LD_ADDR_VAR 0 11
56405: PUSH
56406: LD_VAR 0 13
56410: PPUSH
56411: CALL_OW 250
56415: PPUSH
56416: LD_VAR 0 10
56420: PPUSH
56421: LD_INT 2
56423: PPUSH
56424: CALL_OW 272
56428: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56429: LD_ADDR_VAR 0 12
56433: PUSH
56434: LD_VAR 0 13
56438: PPUSH
56439: CALL_OW 251
56443: PPUSH
56444: LD_VAR 0 10
56448: PPUSH
56449: LD_INT 2
56451: PPUSH
56452: CALL_OW 273
56456: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56457: LD_VAR 0 11
56461: PPUSH
56462: LD_VAR 0 12
56466: PPUSH
56467: CALL_OW 488
56471: IFFALSE 56490
56473: PUSH
56474: LD_VAR 0 11
56478: PPUSH
56479: LD_VAR 0 12
56483: PPUSH
56484: CALL_OW 428
56488: NOT
56489: AND
56490: IFFALSE 56513
// begin ComMoveXY ( tmp , _x , _y ) ;
56492: LD_VAR 0 13
56496: PPUSH
56497: LD_VAR 0 11
56501: PPUSH
56502: LD_VAR 0 12
56506: PPUSH
56507: CALL_OW 111
// break ;
56511: GO 56515
// end ; end ;
56513: GO 56398
56515: POP
56516: POP
// end ; end ;
56517: GO 55830
56519: POP
56520: POP
// end ;
56521: LD_VAR 0 8
56525: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56526: LD_INT 0
56528: PPUSH
// result := true ;
56529: LD_ADDR_VAR 0 3
56533: PUSH
56534: LD_INT 1
56536: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56537: LD_VAR 0 2
56541: PUSH
56542: LD_INT 24
56544: DOUBLE
56545: EQUAL
56546: IFTRUE 56556
56548: LD_INT 33
56550: DOUBLE
56551: EQUAL
56552: IFTRUE 56556
56554: GO 56581
56556: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56557: LD_ADDR_VAR 0 3
56561: PUSH
56562: LD_INT 32
56564: PPUSH
56565: LD_VAR 0 1
56569: PPUSH
56570: CALL_OW 321
56574: PUSH
56575: LD_INT 2
56577: EQUAL
56578: ST_TO_ADDR
56579: GO 56897
56581: LD_INT 20
56583: DOUBLE
56584: EQUAL
56585: IFTRUE 56589
56587: GO 56614
56589: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56590: LD_ADDR_VAR 0 3
56594: PUSH
56595: LD_INT 6
56597: PPUSH
56598: LD_VAR 0 1
56602: PPUSH
56603: CALL_OW 321
56607: PUSH
56608: LD_INT 2
56610: EQUAL
56611: ST_TO_ADDR
56612: GO 56897
56614: LD_INT 22
56616: DOUBLE
56617: EQUAL
56618: IFTRUE 56628
56620: LD_INT 36
56622: DOUBLE
56623: EQUAL
56624: IFTRUE 56628
56626: GO 56653
56628: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56629: LD_ADDR_VAR 0 3
56633: PUSH
56634: LD_INT 15
56636: PPUSH
56637: LD_VAR 0 1
56641: PPUSH
56642: CALL_OW 321
56646: PUSH
56647: LD_INT 2
56649: EQUAL
56650: ST_TO_ADDR
56651: GO 56897
56653: LD_INT 30
56655: DOUBLE
56656: EQUAL
56657: IFTRUE 56661
56659: GO 56686
56661: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56662: LD_ADDR_VAR 0 3
56666: PUSH
56667: LD_INT 20
56669: PPUSH
56670: LD_VAR 0 1
56674: PPUSH
56675: CALL_OW 321
56679: PUSH
56680: LD_INT 2
56682: EQUAL
56683: ST_TO_ADDR
56684: GO 56897
56686: LD_INT 28
56688: DOUBLE
56689: EQUAL
56690: IFTRUE 56700
56692: LD_INT 21
56694: DOUBLE
56695: EQUAL
56696: IFTRUE 56700
56698: GO 56725
56700: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56701: LD_ADDR_VAR 0 3
56705: PUSH
56706: LD_INT 21
56708: PPUSH
56709: LD_VAR 0 1
56713: PPUSH
56714: CALL_OW 321
56718: PUSH
56719: LD_INT 2
56721: EQUAL
56722: ST_TO_ADDR
56723: GO 56897
56725: LD_INT 16
56727: DOUBLE
56728: EQUAL
56729: IFTRUE 56733
56731: GO 56758
56733: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56734: LD_ADDR_VAR 0 3
56738: PUSH
56739: LD_INT 84
56741: PPUSH
56742: LD_VAR 0 1
56746: PPUSH
56747: CALL_OW 321
56751: PUSH
56752: LD_INT 2
56754: EQUAL
56755: ST_TO_ADDR
56756: GO 56897
56758: LD_INT 19
56760: DOUBLE
56761: EQUAL
56762: IFTRUE 56772
56764: LD_INT 23
56766: DOUBLE
56767: EQUAL
56768: IFTRUE 56772
56770: GO 56797
56772: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56773: LD_ADDR_VAR 0 3
56777: PUSH
56778: LD_INT 83
56780: PPUSH
56781: LD_VAR 0 1
56785: PPUSH
56786: CALL_OW 321
56790: PUSH
56791: LD_INT 2
56793: EQUAL
56794: ST_TO_ADDR
56795: GO 56897
56797: LD_INT 17
56799: DOUBLE
56800: EQUAL
56801: IFTRUE 56805
56803: GO 56830
56805: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56806: LD_ADDR_VAR 0 3
56810: PUSH
56811: LD_INT 39
56813: PPUSH
56814: LD_VAR 0 1
56818: PPUSH
56819: CALL_OW 321
56823: PUSH
56824: LD_INT 2
56826: EQUAL
56827: ST_TO_ADDR
56828: GO 56897
56830: LD_INT 18
56832: DOUBLE
56833: EQUAL
56834: IFTRUE 56838
56836: GO 56863
56838: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56839: LD_ADDR_VAR 0 3
56843: PUSH
56844: LD_INT 40
56846: PPUSH
56847: LD_VAR 0 1
56851: PPUSH
56852: CALL_OW 321
56856: PUSH
56857: LD_INT 2
56859: EQUAL
56860: ST_TO_ADDR
56861: GO 56897
56863: LD_INT 27
56865: DOUBLE
56866: EQUAL
56867: IFTRUE 56871
56869: GO 56896
56871: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56872: LD_ADDR_VAR 0 3
56876: PUSH
56877: LD_INT 35
56879: PPUSH
56880: LD_VAR 0 1
56884: PPUSH
56885: CALL_OW 321
56889: PUSH
56890: LD_INT 2
56892: EQUAL
56893: ST_TO_ADDR
56894: GO 56897
56896: POP
// end ;
56897: LD_VAR 0 3
56901: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56902: LD_INT 0
56904: PPUSH
56905: PPUSH
56906: PPUSH
56907: PPUSH
56908: PPUSH
56909: PPUSH
56910: PPUSH
56911: PPUSH
56912: PPUSH
56913: PPUSH
56914: PPUSH
// result := false ;
56915: LD_ADDR_VAR 0 6
56919: PUSH
56920: LD_INT 0
56922: ST_TO_ADDR
// if btype = b_depot then
56923: LD_VAR 0 2
56927: PUSH
56928: LD_INT 0
56930: EQUAL
56931: IFFALSE 56943
// begin result := true ;
56933: LD_ADDR_VAR 0 6
56937: PUSH
56938: LD_INT 1
56940: ST_TO_ADDR
// exit ;
56941: GO 57797
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56943: LD_VAR 0 1
56947: NOT
56948: IFTRUE 56973
56950: PUSH
56951: LD_VAR 0 1
56955: PPUSH
56956: CALL_OW 266
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: IN
56971: NOT
56972: OR
56973: IFTRUE 56982
56975: PUSH
56976: LD_VAR 0 2
56980: NOT
56981: OR
56982: IFTRUE 57018
56984: PUSH
56985: LD_VAR 0 5
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: LD_INT 4
57004: PUSH
57005: LD_INT 5
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: IN
57016: NOT
57017: OR
57018: IFTRUE 57037
57020: PUSH
57021: LD_VAR 0 3
57025: PPUSH
57026: LD_VAR 0 4
57030: PPUSH
57031: CALL_OW 488
57035: NOT
57036: OR
57037: IFFALSE 57041
// exit ;
57039: GO 57797
// side := GetSide ( depot ) ;
57041: LD_ADDR_VAR 0 9
57045: PUSH
57046: LD_VAR 0 1
57050: PPUSH
57051: CALL_OW 255
57055: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
57056: LD_VAR 0 9
57060: PPUSH
57061: LD_VAR 0 2
57065: PPUSH
57066: CALL 56526 0 2
57070: NOT
57071: IFFALSE 57075
// exit ;
57073: GO 57797
// pom := GetBase ( depot ) ;
57075: LD_ADDR_VAR 0 10
57079: PUSH
57080: LD_VAR 0 1
57084: PPUSH
57085: CALL_OW 274
57089: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57090: LD_ADDR_VAR 0 11
57094: PUSH
57095: LD_VAR 0 2
57099: PPUSH
57100: LD_VAR 0 1
57104: PPUSH
57105: CALL_OW 248
57109: PPUSH
57110: CALL_OW 450
57114: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57115: LD_VAR 0 10
57119: PPUSH
57120: LD_INT 1
57122: PPUSH
57123: CALL_OW 275
57127: PUSH
57128: LD_VAR 0 11
57132: PUSH
57133: LD_INT 1
57135: ARRAY
57136: GREATEREQUAL
57137: IFFALSE 57163
57139: PUSH
57140: LD_VAR 0 10
57144: PPUSH
57145: LD_INT 2
57147: PPUSH
57148: CALL_OW 275
57152: PUSH
57153: LD_VAR 0 11
57157: PUSH
57158: LD_INT 2
57160: ARRAY
57161: GREATEREQUAL
57162: AND
57163: IFFALSE 57189
57165: PUSH
57166: LD_VAR 0 10
57170: PPUSH
57171: LD_INT 3
57173: PPUSH
57174: CALL_OW 275
57178: PUSH
57179: LD_VAR 0 11
57183: PUSH
57184: LD_INT 3
57186: ARRAY
57187: GREATEREQUAL
57188: AND
57189: NOT
57190: IFFALSE 57194
// exit ;
57192: GO 57797
// if GetBType ( depot ) = b_depot then
57194: LD_VAR 0 1
57198: PPUSH
57199: CALL_OW 266
57203: PUSH
57204: LD_INT 0
57206: EQUAL
57207: IFFALSE 57219
// dist := 28 else
57209: LD_ADDR_VAR 0 14
57213: PUSH
57214: LD_INT 28
57216: ST_TO_ADDR
57217: GO 57227
// dist := 36 ;
57219: LD_ADDR_VAR 0 14
57223: PUSH
57224: LD_INT 36
57226: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57227: LD_VAR 0 1
57231: PPUSH
57232: LD_VAR 0 3
57236: PPUSH
57237: LD_VAR 0 4
57241: PPUSH
57242: CALL_OW 297
57246: PUSH
57247: LD_VAR 0 14
57251: GREATER
57252: IFFALSE 57256
// exit ;
57254: GO 57797
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57256: LD_ADDR_VAR 0 12
57260: PUSH
57261: LD_VAR 0 2
57265: PPUSH
57266: LD_VAR 0 3
57270: PPUSH
57271: LD_VAR 0 4
57275: PPUSH
57276: LD_VAR 0 5
57280: PPUSH
57281: LD_VAR 0 1
57285: PPUSH
57286: CALL_OW 248
57290: PPUSH
57291: LD_INT 0
57293: PPUSH
57294: CALL 57802 0 6
57298: ST_TO_ADDR
// if not hexes then
57299: LD_VAR 0 12
57303: NOT
57304: IFFALSE 57308
// exit ;
57306: GO 57797
// hex := GetHexInfo ( x , y ) ;
57308: LD_ADDR_VAR 0 15
57312: PUSH
57313: LD_VAR 0 3
57317: PPUSH
57318: LD_VAR 0 4
57322: PPUSH
57323: CALL_OW 546
57327: ST_TO_ADDR
// if hex [ 1 ] then
57328: LD_VAR 0 15
57332: PUSH
57333: LD_INT 1
57335: ARRAY
57336: IFFALSE 57340
// exit ;
57338: GO 57797
// height := hex [ 2 ] ;
57340: LD_ADDR_VAR 0 13
57344: PUSH
57345: LD_VAR 0 15
57349: PUSH
57350: LD_INT 2
57352: ARRAY
57353: ST_TO_ADDR
// for i = 1 to hexes do
57354: LD_ADDR_VAR 0 7
57358: PUSH
57359: DOUBLE
57360: LD_INT 1
57362: DEC
57363: ST_TO_ADDR
57364: LD_VAR 0 12
57368: PUSH
57369: FOR_TO
57370: IFFALSE 57714
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57372: LD_VAR 0 12
57376: PUSH
57377: LD_VAR 0 7
57381: ARRAY
57382: PUSH
57383: LD_INT 1
57385: ARRAY
57386: PPUSH
57387: LD_VAR 0 12
57391: PUSH
57392: LD_VAR 0 7
57396: ARRAY
57397: PUSH
57398: LD_INT 2
57400: ARRAY
57401: PPUSH
57402: CALL_OW 488
57406: NOT
57407: IFTRUE 57449
57409: PUSH
57410: LD_VAR 0 12
57414: PUSH
57415: LD_VAR 0 7
57419: ARRAY
57420: PUSH
57421: LD_INT 1
57423: ARRAY
57424: PPUSH
57425: LD_VAR 0 12
57429: PUSH
57430: LD_VAR 0 7
57434: ARRAY
57435: PUSH
57436: LD_INT 2
57438: ARRAY
57439: PPUSH
57440: CALL_OW 428
57444: PUSH
57445: LD_INT 0
57447: GREATER
57448: OR
57449: IFTRUE 57487
57451: PUSH
57452: LD_VAR 0 12
57456: PUSH
57457: LD_VAR 0 7
57461: ARRAY
57462: PUSH
57463: LD_INT 1
57465: ARRAY
57466: PPUSH
57467: LD_VAR 0 12
57471: PUSH
57472: LD_VAR 0 7
57476: ARRAY
57477: PUSH
57478: LD_INT 2
57480: ARRAY
57481: PPUSH
57482: CALL_OW 351
57486: OR
57487: IFFALSE 57493
// exit ;
57489: POP
57490: POP
57491: GO 57797
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57493: LD_ADDR_VAR 0 8
57497: PUSH
57498: LD_VAR 0 12
57502: PUSH
57503: LD_VAR 0 7
57507: ARRAY
57508: PUSH
57509: LD_INT 1
57511: ARRAY
57512: PPUSH
57513: LD_VAR 0 12
57517: PUSH
57518: LD_VAR 0 7
57522: ARRAY
57523: PUSH
57524: LD_INT 2
57526: ARRAY
57527: PPUSH
57528: CALL_OW 546
57532: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57533: LD_VAR 0 8
57537: PUSH
57538: LD_INT 1
57540: ARRAY
57541: IFTRUE 57563
57543: PUSH
57544: LD_VAR 0 8
57548: PUSH
57549: LD_INT 2
57551: ARRAY
57552: PUSH
57553: LD_VAR 0 13
57557: PUSH
57558: LD_INT 2
57560: PLUS
57561: GREATER
57562: OR
57563: IFTRUE 57585
57565: PUSH
57566: LD_VAR 0 8
57570: PUSH
57571: LD_INT 2
57573: ARRAY
57574: PUSH
57575: LD_VAR 0 13
57579: PUSH
57580: LD_INT 2
57582: MINUS
57583: LESS
57584: OR
57585: IFTRUE 57653
57587: PUSH
57588: LD_VAR 0 8
57592: PUSH
57593: LD_INT 3
57595: ARRAY
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: LD_INT 8
57602: PUSH
57603: LD_INT 9
57605: PUSH
57606: LD_INT 10
57608: PUSH
57609: LD_INT 11
57611: PUSH
57612: LD_INT 12
57614: PUSH
57615: LD_INT 13
57617: PUSH
57618: LD_INT 16
57620: PUSH
57621: LD_INT 17
57623: PUSH
57624: LD_INT 18
57626: PUSH
57627: LD_INT 19
57629: PUSH
57630: LD_INT 20
57632: PUSH
57633: LD_INT 21
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: IN
57651: NOT
57652: OR
57653: IFTRUE 57666
57655: PUSH
57656: LD_VAR 0 8
57660: PUSH
57661: LD_INT 5
57663: ARRAY
57664: NOT
57665: OR
57666: IFTRUE 57706
57668: PUSH
57669: LD_VAR 0 8
57673: PUSH
57674: LD_INT 6
57676: ARRAY
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: LD_INT 7
57686: PUSH
57687: LD_INT 9
57689: PUSH
57690: LD_INT 10
57692: PUSH
57693: LD_INT 11
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: IN
57704: NOT
57705: OR
57706: IFFALSE 57712
// exit ;
57708: POP
57709: POP
57710: GO 57797
// end ;
57712: GO 57369
57714: POP
57715: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57716: LD_VAR 0 9
57720: PPUSH
57721: LD_VAR 0 3
57725: PPUSH
57726: LD_VAR 0 4
57730: PPUSH
57731: LD_INT 20
57733: PPUSH
57734: CALL 49616 0 4
57738: PUSH
57739: LD_INT 4
57741: ARRAY
57742: IFFALSE 57746
// exit ;
57744: GO 57797
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57746: LD_VAR 0 2
57750: PUSH
57751: LD_INT 29
57753: PUSH
57754: LD_INT 30
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: IN
57761: IFFALSE 57785
57763: PUSH
57764: LD_VAR 0 3
57768: PPUSH
57769: LD_VAR 0 4
57773: PPUSH
57774: LD_VAR 0 9
57778: PPUSH
57779: CALL_OW 440
57783: NOT
57784: AND
57785: IFFALSE 57789
// exit ;
57787: GO 57797
// result := true ;
57789: LD_ADDR_VAR 0 6
57793: PUSH
57794: LD_INT 1
57796: ST_TO_ADDR
// end ;
57797: LD_VAR 0 6
57801: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57802: LD_INT 0
57804: PPUSH
57805: PPUSH
57806: PPUSH
57807: PPUSH
57808: PPUSH
57809: PPUSH
57810: PPUSH
57811: PPUSH
57812: PPUSH
57813: PPUSH
57814: PPUSH
57815: PPUSH
57816: PPUSH
57817: PPUSH
57818: PPUSH
57819: PPUSH
57820: PPUSH
57821: PPUSH
57822: PPUSH
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
57827: PPUSH
57828: PPUSH
57829: PPUSH
57830: PPUSH
57831: PPUSH
57832: PPUSH
57833: PPUSH
57834: PPUSH
57835: PPUSH
57836: PPUSH
57837: PPUSH
57838: PPUSH
57839: PPUSH
57840: PPUSH
57841: PPUSH
57842: PPUSH
57843: PPUSH
57844: PPUSH
57845: PPUSH
57846: PPUSH
57847: PPUSH
57848: PPUSH
57849: PPUSH
57850: PPUSH
57851: PPUSH
57852: PPUSH
57853: PPUSH
57854: PPUSH
57855: PPUSH
57856: PPUSH
57857: PPUSH
57858: PPUSH
57859: PPUSH
57860: PPUSH
57861: PPUSH
// result = [ ] ;
57862: LD_ADDR_VAR 0 7
57866: PUSH
57867: EMPTY
57868: ST_TO_ADDR
// temp_list = [ ] ;
57869: LD_ADDR_VAR 0 9
57873: PUSH
57874: EMPTY
57875: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57876: LD_VAR 0 4
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: LD_INT 4
57895: PUSH
57896: LD_INT 5
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: IN
57907: NOT
57908: IFTRUE 57951
57910: PUSH
57911: LD_VAR 0 1
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: IN
57926: IFFALSE 57950
57928: PUSH
57929: LD_VAR 0 5
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: LIST
57947: IN
57948: NOT
57949: AND
57950: OR
57951: IFFALSE 57955
// exit ;
57953: GO 76354
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57955: LD_VAR 0 1
57959: PUSH
57960: LD_INT 6
57962: PUSH
57963: LD_INT 7
57965: PUSH
57966: LD_INT 8
57968: PUSH
57969: LD_INT 13
57971: PUSH
57972: LD_INT 12
57974: PUSH
57975: LD_INT 15
57977: PUSH
57978: LD_INT 11
57980: PUSH
57981: LD_INT 14
57983: PUSH
57984: LD_INT 10
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: IN
57998: IFFALSE 58008
// btype = b_lab ;
58000: LD_ADDR_VAR 0 1
58004: PUSH
58005: LD_INT 6
58007: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58008: LD_VAR 0 6
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: IN
58027: NOT
58028: IFTRUE 58096
58030: PUSH
58031: LD_VAR 0 1
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: LD_INT 6
58050: PUSH
58051: LD_INT 36
58053: PUSH
58054: LD_INT 4
58056: PUSH
58057: LD_INT 5
58059: PUSH
58060: LD_INT 31
58062: PUSH
58063: LD_INT 32
58065: PUSH
58066: LD_INT 33
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: IN
58082: NOT
58083: IFFALSE 58095
58085: PUSH
58086: LD_VAR 0 6
58090: PUSH
58091: LD_INT 1
58093: EQUAL
58094: AND
58095: OR
58096: IFTRUE 58128
58098: PUSH
58099: LD_VAR 0 1
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: IN
58114: NOT
58115: IFFALSE 58127
58117: PUSH
58118: LD_VAR 0 6
58122: PUSH
58123: LD_INT 2
58125: EQUAL
58126: AND
58127: OR
58128: IFFALSE 58138
// mode = 0 ;
58130: LD_ADDR_VAR 0 6
58134: PUSH
58135: LD_INT 0
58137: ST_TO_ADDR
// case mode of 0 :
58138: LD_VAR 0 6
58142: PUSH
58143: LD_INT 0
58145: DOUBLE
58146: EQUAL
58147: IFTRUE 58151
58149: GO 69604
58151: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58152: LD_ADDR_VAR 0 11
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58345: LD_ADDR_VAR 0 12
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58541: LD_ADDR_VAR 0 13
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 2
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 3
58700: NEG
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 3
58712: NEG
58713: PUSH
58714: LD_INT 3
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58740: LD_ADDR_VAR 0 14
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: LD_INT 2
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: NEG
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 3
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58936: LD_ADDR_VAR 0 15
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 3
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59129: LD_ADDR_VAR 0 16
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: LD_INT 3
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59322: LD_ADDR_VAR 0 17
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59552: LD_ADDR_VAR 0 18
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59782: LD_ADDR_VAR 0 19
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: LD_INT 2
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60012: LD_ADDR_VAR 0 20
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: NEG
60212: PUSH
60213: LD_INT 2
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60242: LD_ADDR_VAR 0 21
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 2
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 2
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 2
60418: NEG
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: NEG
60430: PUSH
60431: LD_INT 1
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: LD_INT 2
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60472: LD_ADDR_VAR 0 22
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: LD_INT 2
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 2
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 2
60671: NEG
60672: PUSH
60673: LD_INT 2
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60702: LD_ADDR_VAR 0 23
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 2
60901: NEG
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: NEG
60914: PUSH
60915: LD_INT 3
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: LD_INT 3
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60982: LD_ADDR_VAR 0 24
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 2
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 2
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: NEG
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: NEG
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61258: LD_ADDR_VAR 0 25
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: LD_INT 2
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 1
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 3
61479: PUSH
61480: LD_INT 2
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 2
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61532: LD_ADDR_VAR 0 26
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: LD_INT 2
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: LD_INT 1
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: NEG
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61808: LD_ADDR_VAR 0 27
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: LD_INT 2
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: PUSH
61944: LD_INT 2
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: LD_INT 2
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: NEG
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 3
62053: NEG
62054: PUSH
62055: LD_INT 2
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62088: LD_ADDR_VAR 0 28
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: LD_INT 2
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 2
62299: NEG
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: LD_INT 3
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 3
62323: NEG
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 3
62335: NEG
62336: PUSH
62337: LD_INT 2
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62370: LD_ADDR_VAR 0 29
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 2
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: NEG
62549: PUSH
62550: LD_INT 2
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62649: LD_ADDR_VAR 0 30
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: LD_INT 3
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 2
62871: PUSH
62872: LD_INT 3
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 3
62892: NEG
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62927: LD_ADDR_VAR 0 31
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 1
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 2
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 2
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 2
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 2
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 2
63092: NEG
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 2
63104: NEG
63105: PUSH
63106: LD_INT 2
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 2
63116: NEG
63117: PUSH
63118: LD_INT 3
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 3
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 3
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 3
63170: NEG
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63205: LD_ADDR_VAR 0 32
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 1
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: LD_INT 2
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 2
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 2
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 2
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: LD_INT 3
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: PUSH
63407: LD_INT 2
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 3
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 3
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: NEG
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 3
63448: NEG
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63483: LD_ADDR_VAR 0 33
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 1
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: LD_INT 2
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 2
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 2
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 2
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 2
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 1
63627: NEG
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 2
63638: NEG
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 2
63649: NEG
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 2
63673: NEG
63674: PUSH
63675: LD_INT 3
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 2
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 3
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 3
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: LD_INT 2
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 3
63727: NEG
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63762: LD_ADDR_VAR 0 34
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: LD_INT 2
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: LD_INT 2
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 2
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: NEG
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 2
63918: NEG
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 2
63929: NEG
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 2
63941: NEG
63942: PUSH
63943: LD_INT 2
63945: NEG
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: LD_INT 3
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: LD_INT 2
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: LD_INT 3
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 3
64007: NEG
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64042: LD_ADDR_VAR 0 35
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: LD_INT 1
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 1
64111: NEG
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 2
64133: NEG
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64154: LD_ADDR_VAR 0 36
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: LD_INT 2
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 1
64247: PUSH
64248: LD_INT 2
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64266: LD_ADDR_VAR 0 37
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 1
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: NEG
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 1
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64378: LD_ADDR_VAR 0 38
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 2
64469: NEG
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64490: LD_ADDR_VAR 0 39
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: LD_INT 2
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: LD_INT 2
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64602: LD_ADDR_VAR 0 40
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: LD_INT 1
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: LD_INT 1
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64714: LD_ADDR_VAR 0 41
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: LD_INT 2
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 2
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 2
64838: PUSH
64839: LD_INT 2
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 1
64858: NEG
64859: PUSH
64860: LD_INT 1
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 2
64880: NEG
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 2
64892: NEG
64893: PUSH
64894: LD_INT 2
64896: NEG
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 2
64904: NEG
64905: PUSH
64906: LD_INT 3
64908: NEG
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 2
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 3
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 3
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: LD_INT 3
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: PUSH
64968: LD_INT 3
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 2
64977: NEG
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 3
64988: NEG
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 3
64999: NEG
65000: PUSH
65001: LD_INT 1
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 3
65011: NEG
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 3
65023: NEG
65024: PUSH
65025: LD_INT 3
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65064: LD_ADDR_VAR 0 42
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 1
65133: NEG
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 1
65145: NEG
65146: PUSH
65147: LD_INT 2
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 2
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 2
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 2
65189: PUSH
65190: LD_INT 2
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: LD_INT 2
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: LD_INT 2
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 2
65230: NEG
65231: PUSH
65232: LD_INT 1
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 2
65242: NEG
65243: PUSH
65244: LD_INT 2
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 2
65254: NEG
65255: PUSH
65256: LD_INT 3
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 1
65266: NEG
65267: PUSH
65268: LD_INT 3
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: LD_INT 3
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 1
65289: PUSH
65290: LD_INT 2
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 3
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 2
65320: PUSH
65321: LD_INT 3
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: LD_INT 3
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: LD_INT 2
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 3
65361: NEG
65362: PUSH
65363: LD_INT 2
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 3
65373: NEG
65374: PUSH
65375: LD_INT 3
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65414: LD_ADDR_VAR 0 43
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 1
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: LD_INT 1
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: LD_INT 2
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: LD_INT 2
65510: NEG
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 1
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 2
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 2
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: LD_INT 2
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 2
65580: NEG
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 2
65591: NEG
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: LD_INT 3
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: LD_INT 3
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: LD_INT 2
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: LD_INT 1
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: LD_INT 3
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 2
65699: NEG
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 3
65710: NEG
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 3
65721: NEG
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65762: LD_ADDR_VAR 0 44
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 1
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: NEG
65821: PUSH
65822: LD_INT 0
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: NEG
65844: PUSH
65845: LD_INT 2
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 1
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 2
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 2
65876: PUSH
65877: LD_INT 1
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 2
65886: PUSH
65887: LD_INT 2
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 1
65896: PUSH
65897: LD_INT 2
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: LD_INT 1
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 2
65928: NEG
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: NEG
65941: PUSH
65942: LD_INT 2
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 2
65952: NEG
65953: PUSH
65954: LD_INT 3
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 2
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 3
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: LD_INT 2
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 3
66005: PUSH
66006: LD_INT 3
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: LD_INT 3
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 2
66025: NEG
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 3
66036: NEG
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 3
66047: NEG
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 3
66059: NEG
66060: PUSH
66061: LD_INT 2
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 3
66071: NEG
66072: PUSH
66073: LD_INT 3
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66112: LD_ADDR_VAR 0 45
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 1
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: NEG
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: LD_INT 2
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 2
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 2
66227: PUSH
66228: LD_INT 1
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 2
66237: PUSH
66238: LD_INT 2
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 1
66247: PUSH
66248: LD_INT 2
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: LD_INT 2
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 2
66278: NEG
66279: PUSH
66280: LD_INT 1
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 2
66290: NEG
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 2
66302: NEG
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 1
66314: NEG
66315: PUSH
66316: LD_INT 3
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: LD_INT 3
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 1
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 3
66348: PUSH
66349: LD_INT 2
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 3
66358: PUSH
66359: LD_INT 3
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 2
66368: PUSH
66369: LD_INT 3
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: LD_INT 3
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 3
66409: NEG
66410: PUSH
66411: LD_INT 2
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 3
66421: NEG
66422: PUSH
66423: LD_INT 3
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66462: LD_ADDR_VAR 0 46
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: LD_INT 0
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 1
66500: PUSH
66501: LD_INT 1
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 0
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 1
66520: NEG
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: LD_INT 2
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: LD_INT 2
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: LD_INT 1
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 2
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 2
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 1
66597: PUSH
66598: LD_INT 2
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: LD_INT 1
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 2
66628: NEG
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 2
66639: NEG
66640: PUSH
66641: LD_INT 1
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 1
66651: NEG
66652: PUSH
66653: LD_INT 3
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: LD_INT 3
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 1
66674: PUSH
66675: LD_INT 2
66677: NEG
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 2
66685: PUSH
66686: LD_INT 1
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 3
66696: PUSH
66697: LD_INT 0
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 3
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: LD_INT 3
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 3
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 1
66736: NEG
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 2
66747: NEG
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 3
66758: NEG
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 3
66769: NEG
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66810: LD_ADDR_VAR 0 47
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: LD_INT 0
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 0
66827: PUSH
66828: LD_INT 1
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 1
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: LD_INT 1
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: LD_INT 0
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 1
66879: NEG
66880: PUSH
66881: LD_INT 1
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: PUSH
66893: LD_INT 2
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: LD_INT 2
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 2
66925: NEG
66926: PUSH
66927: LD_INT 1
66929: NEG
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 2
66937: NEG
66938: PUSH
66939: LD_INT 2
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66961: LD_ADDR_VAR 0 48
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: LD_INT 1
66981: NEG
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 1
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 1
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 1
67019: NEG
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: NEG
67031: PUSH
67032: LD_INT 1
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: LD_INT 2
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: LD_INT 2
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 2
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: LD_INT 1
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67108: LD_ADDR_VAR 0 49
67112: PUSH
67113: LD_INT 0
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: LD_INT 0
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: LD_INT 1
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: LD_INT 1
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 1
67166: NEG
67167: PUSH
67168: LD_INT 0
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 1
67177: NEG
67178: PUSH
67179: LD_INT 1
67181: NEG
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 1
67189: PUSH
67190: LD_INT 1
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: LD_INT 0
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 2
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 2
67220: PUSH
67221: LD_INT 2
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: LD_INT 2
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67252: LD_ADDR_VAR 0 50
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: LD_INT 0
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 0
67269: PUSH
67270: LD_INT 1
67272: NEG
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 1
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: LD_INT 1
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 0
67300: PUSH
67301: LD_INT 1
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: LD_INT 0
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 1
67321: NEG
67322: PUSH
67323: LD_INT 1
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 2
67333: PUSH
67334: LD_INT 1
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: LD_INT 2
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 1
67353: PUSH
67354: LD_INT 2
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 1
67373: NEG
67374: PUSH
67375: LD_INT 1
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67396: LD_ADDR_VAR 0 51
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 0
67413: PUSH
67414: LD_INT 1
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 1
67465: NEG
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 1
67477: PUSH
67478: LD_INT 2
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 0
67487: PUSH
67488: LD_INT 2
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 2
67508: NEG
67509: PUSH
67510: LD_INT 0
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 2
67519: NEG
67520: PUSH
67521: LD_INT 1
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67543: LD_ADDR_VAR 0 52
67547: PUSH
67548: LD_INT 0
67550: PUSH
67551: LD_INT 0
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: LD_INT 1
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 1
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: LD_INT 1
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 1
67612: NEG
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: LD_INT 2
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 1
67636: NEG
67637: PUSH
67638: LD_INT 1
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 2
67647: NEG
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 2
67658: NEG
67659: PUSH
67660: LD_INT 1
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 2
67670: NEG
67671: PUSH
67672: LD_INT 2
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67694: LD_ADDR_VAR 0 53
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: LD_INT 1
67714: NEG
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 1
67722: PUSH
67723: LD_INT 0
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 1
67732: PUSH
67733: LD_INT 1
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: LD_INT 1
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 1
67752: NEG
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: NEG
67764: PUSH
67765: LD_INT 1
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: NEG
67776: PUSH
67777: LD_INT 2
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 0
67787: PUSH
67788: LD_INT 2
67790: NEG
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 1
67798: PUSH
67799: LD_INT 1
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 2
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 2
67819: PUSH
67820: LD_INT 1
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 2
67829: PUSH
67830: LD_INT 2
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: LD_INT 2
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: LD_INT 2
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 1
67859: NEG
67860: PUSH
67861: LD_INT 1
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 2
67870: NEG
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 2
67881: NEG
67882: PUSH
67883: LD_INT 1
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 2
67893: NEG
67894: PUSH
67895: LD_INT 2
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67924: LD_ADDR_VAR 0 54
67928: PUSH
67929: LD_INT 0
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: LD_INT 1
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 1
67952: PUSH
67953: LD_INT 0
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 1
67962: PUSH
67963: LD_INT 1
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 0
67972: PUSH
67973: LD_INT 1
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 1
67982: NEG
67983: PUSH
67984: LD_INT 0
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 1
67993: NEG
67994: PUSH
67995: LD_INT 1
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 1
68005: NEG
68006: PUSH
68007: LD_INT 2
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_INT 2
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 2
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 2
68049: PUSH
68050: LD_INT 1
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 2
68059: PUSH
68060: LD_INT 2
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: LD_INT 2
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: LD_INT 2
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 1
68089: NEG
68090: PUSH
68091: LD_INT 1
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 2
68100: NEG
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 2
68111: NEG
68112: PUSH
68113: LD_INT 1
68115: NEG
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 2
68123: NEG
68124: PUSH
68125: LD_INT 2
68127: NEG
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68154: LD_ADDR_VAR 0 55
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 0
68171: PUSH
68172: LD_INT 1
68174: NEG
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 1
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 1
68192: PUSH
68193: LD_INT 1
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 0
68202: PUSH
68203: LD_INT 1
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 1
68212: NEG
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: PUSH
68225: LD_INT 1
68227: NEG
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 1
68235: NEG
68236: PUSH
68237: LD_INT 2
68239: NEG
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 0
68247: PUSH
68248: LD_INT 2
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 2
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 2
68279: PUSH
68280: LD_INT 1
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 2
68289: PUSH
68290: LD_INT 2
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: LD_INT 2
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: LD_INT 2
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 1
68319: NEG
68320: PUSH
68321: LD_INT 1
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 2
68330: NEG
68331: PUSH
68332: LD_INT 0
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 2
68341: NEG
68342: PUSH
68343: LD_INT 1
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 2
68353: NEG
68354: PUSH
68355: LD_INT 2
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68384: LD_ADDR_VAR 0 56
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 0
68401: PUSH
68402: LD_INT 1
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 1
68412: PUSH
68413: LD_INT 0
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 1
68422: PUSH
68423: LD_INT 1
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 0
68432: PUSH
68433: LD_INT 1
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 1
68442: NEG
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 1
68453: NEG
68454: PUSH
68455: LD_INT 1
68457: NEG
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 1
68465: NEG
68466: PUSH
68467: LD_INT 2
68469: NEG
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: LD_INT 2
68480: NEG
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 1
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 2
68499: PUSH
68500: LD_INT 0
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 2
68509: PUSH
68510: LD_INT 1
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 2
68519: PUSH
68520: LD_INT 2
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: LD_INT 2
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: LD_INT 2
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 1
68549: NEG
68550: PUSH
68551: LD_INT 1
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 2
68560: NEG
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 2
68571: NEG
68572: PUSH
68573: LD_INT 1
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: LD_INT 2
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68614: LD_ADDR_VAR 0 57
68618: PUSH
68619: LD_INT 0
68621: PUSH
68622: LD_INT 0
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: LD_INT 1
68634: NEG
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 1
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: LD_INT 1
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: LD_INT 1
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 1
68672: NEG
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 1
68683: NEG
68684: PUSH
68685: LD_INT 1
68687: NEG
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 1
68695: NEG
68696: PUSH
68697: LD_INT 2
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: LD_INT 2
68710: NEG
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 1
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 2
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 2
68739: PUSH
68740: LD_INT 1
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 2
68749: PUSH
68750: LD_INT 2
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: LD_INT 2
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 0
68769: PUSH
68770: LD_INT 2
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 1
68779: NEG
68780: PUSH
68781: LD_INT 1
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 2
68790: NEG
68791: PUSH
68792: LD_INT 0
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 2
68801: NEG
68802: PUSH
68803: LD_INT 1
68805: NEG
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 2
68813: NEG
68814: PUSH
68815: LD_INT 2
68817: NEG
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68844: LD_ADDR_VAR 0 58
68848: PUSH
68849: LD_INT 0
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 0
68861: PUSH
68862: LD_INT 1
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 1
68882: PUSH
68883: LD_INT 1
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: LD_INT 1
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 1
68902: NEG
68903: PUSH
68904: LD_INT 0
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 1
68913: NEG
68914: PUSH
68915: LD_INT 1
68917: NEG
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 1
68925: NEG
68926: PUSH
68927: LD_INT 2
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 0
68937: PUSH
68938: LD_INT 2
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 1
68948: PUSH
68949: LD_INT 1
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 2
68959: PUSH
68960: LD_INT 0
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 2
68969: PUSH
68970: LD_INT 1
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 2
68979: PUSH
68980: LD_INT 2
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 1
68989: PUSH
68990: LD_INT 2
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: LD_INT 2
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 1
69009: NEG
69010: PUSH
69011: LD_INT 1
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 2
69020: NEG
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: LD_INT 1
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 2
69043: NEG
69044: PUSH
69045: LD_INT 2
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69074: LD_ADDR_VAR 0 59
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 0
69091: PUSH
69092: LD_INT 1
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 1
69102: PUSH
69103: LD_INT 0
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: LD_INT 1
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: LD_INT 1
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: PUSH
69134: LD_INT 0
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: PUSH
69145: LD_INT 1
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69162: LD_ADDR_VAR 0 60
69166: PUSH
69167: LD_INT 0
69169: PUSH
69170: LD_INT 0
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 0
69179: PUSH
69180: LD_INT 1
69182: NEG
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 1
69190: PUSH
69191: LD_INT 0
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 1
69200: PUSH
69201: LD_INT 1
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 0
69210: PUSH
69211: LD_INT 1
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 1
69220: NEG
69221: PUSH
69222: LD_INT 0
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 1
69231: NEG
69232: PUSH
69233: LD_INT 1
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69250: LD_ADDR_VAR 0 61
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: LD_INT 0
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 0
69267: PUSH
69268: LD_INT 1
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 1
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 1
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 0
69298: PUSH
69299: LD_INT 1
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 1
69308: NEG
69309: PUSH
69310: LD_INT 0
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 1
69319: NEG
69320: PUSH
69321: LD_INT 1
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69338: LD_ADDR_VAR 0 62
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: LD_INT 0
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 0
69355: PUSH
69356: LD_INT 1
69358: NEG
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: LD_INT 0
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 1
69376: PUSH
69377: LD_INT 1
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: LD_INT 1
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 1
69396: NEG
69397: PUSH
69398: LD_INT 0
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 1
69407: NEG
69408: PUSH
69409: LD_INT 1
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69426: LD_ADDR_VAR 0 63
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: LD_INT 0
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 0
69443: PUSH
69444: LD_INT 1
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 1
69454: PUSH
69455: LD_INT 0
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 1
69464: PUSH
69465: LD_INT 1
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 0
69474: PUSH
69475: LD_INT 1
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 1
69484: NEG
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 1
69495: NEG
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69514: LD_ADDR_VAR 0 64
69518: PUSH
69519: LD_INT 0
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 0
69531: PUSH
69532: LD_INT 1
69534: NEG
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 1
69542: PUSH
69543: LD_INT 0
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 1
69552: PUSH
69553: LD_INT 1
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 0
69562: PUSH
69563: LD_INT 1
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 1
69572: NEG
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 1
69583: NEG
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: ST_TO_ADDR
// end ; 1 :
69602: GO 75499
69604: LD_INT 1
69606: DOUBLE
69607: EQUAL
69608: IFTRUE 69612
69610: GO 72235
69612: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69613: LD_ADDR_VAR 0 11
69617: PUSH
69618: LD_INT 1
69620: NEG
69621: PUSH
69622: LD_INT 3
69624: NEG
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 3
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 1
69643: PUSH
69644: LD_INT 2
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: LIST
69656: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69657: LD_ADDR_VAR 0 12
69661: PUSH
69662: LD_INT 2
69664: PUSH
69665: LD_INT 1
69667: NEG
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: LD_INT 0
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 3
69685: PUSH
69686: LD_INT 1
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: LIST
69697: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69698: LD_ADDR_VAR 0 13
69702: PUSH
69703: LD_INT 3
69705: PUSH
69706: LD_INT 2
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 3
69715: PUSH
69716: LD_INT 3
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 2
69725: PUSH
69726: LD_INT 3
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: LIST
69737: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69738: LD_ADDR_VAR 0 14
69742: PUSH
69743: LD_INT 1
69745: PUSH
69746: LD_INT 3
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: LD_INT 3
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 1
69765: NEG
69766: PUSH
69767: LD_INT 2
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: LIST
69778: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69779: LD_ADDR_VAR 0 15
69783: PUSH
69784: LD_INT 2
69786: NEG
69787: PUSH
69788: LD_INT 1
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 3
69797: NEG
69798: PUSH
69799: LD_INT 0
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 3
69808: NEG
69809: PUSH
69810: LD_INT 1
69812: NEG
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: LIST
69822: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69823: LD_ADDR_VAR 0 16
69827: PUSH
69828: LD_INT 2
69830: NEG
69831: PUSH
69832: LD_INT 3
69834: NEG
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 3
69842: NEG
69843: PUSH
69844: LD_INT 2
69846: NEG
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 3
69854: NEG
69855: PUSH
69856: LD_INT 3
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: LIST
69868: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69869: LD_ADDR_VAR 0 17
69873: PUSH
69874: LD_INT 1
69876: NEG
69877: PUSH
69878: LD_INT 3
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 0
69888: PUSH
69889: LD_INT 3
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 1
69899: PUSH
69900: LD_INT 2
69902: NEG
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: LIST
69912: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69913: LD_ADDR_VAR 0 18
69917: PUSH
69918: LD_INT 2
69920: PUSH
69921: LD_INT 1
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 3
69931: PUSH
69932: LD_INT 0
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 3
69941: PUSH
69942: LD_INT 1
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: LIST
69953: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69954: LD_ADDR_VAR 0 19
69958: PUSH
69959: LD_INT 3
69961: PUSH
69962: LD_INT 2
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 3
69971: PUSH
69972: LD_INT 3
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 2
69981: PUSH
69982: LD_INT 3
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69994: LD_ADDR_VAR 0 20
69998: PUSH
69999: LD_INT 1
70001: PUSH
70002: LD_INT 3
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 0
70011: PUSH
70012: LD_INT 3
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 1
70021: NEG
70022: PUSH
70023: LD_INT 2
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: LIST
70034: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70035: LD_ADDR_VAR 0 21
70039: PUSH
70040: LD_INT 2
70042: NEG
70043: PUSH
70044: LD_INT 1
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 3
70053: NEG
70054: PUSH
70055: LD_INT 0
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 3
70064: NEG
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: LIST
70078: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70079: LD_ADDR_VAR 0 22
70083: PUSH
70084: LD_INT 2
70086: NEG
70087: PUSH
70088: LD_INT 3
70090: NEG
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 3
70098: NEG
70099: PUSH
70100: LD_INT 2
70102: NEG
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 3
70110: NEG
70111: PUSH
70112: LD_INT 3
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: LIST
70124: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70125: LD_ADDR_VAR 0 23
70129: PUSH
70130: LD_INT 0
70132: PUSH
70133: LD_INT 3
70135: NEG
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 1
70143: NEG
70144: PUSH
70145: LD_INT 4
70147: NEG
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 1
70155: PUSH
70156: LD_INT 3
70158: NEG
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: LIST
70168: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70169: LD_ADDR_VAR 0 24
70173: PUSH
70174: LD_INT 3
70176: PUSH
70177: LD_INT 0
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 3
70186: PUSH
70187: LD_INT 1
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 4
70197: PUSH
70198: LD_INT 1
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: LIST
70209: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70210: LD_ADDR_VAR 0 25
70214: PUSH
70215: LD_INT 3
70217: PUSH
70218: LD_INT 3
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 4
70227: PUSH
70228: LD_INT 3
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 3
70237: PUSH
70238: LD_INT 4
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: LIST
70249: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70250: LD_ADDR_VAR 0 26
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: LD_INT 3
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 1
70267: PUSH
70268: LD_INT 4
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 1
70277: NEG
70278: PUSH
70279: LD_INT 3
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: LIST
70290: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70291: LD_ADDR_VAR 0 27
70295: PUSH
70296: LD_INT 3
70298: NEG
70299: PUSH
70300: LD_INT 0
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 3
70309: NEG
70310: PUSH
70311: LD_INT 1
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 4
70320: NEG
70321: PUSH
70322: LD_INT 1
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: LIST
70334: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70335: LD_ADDR_VAR 0 28
70339: PUSH
70340: LD_INT 3
70342: NEG
70343: PUSH
70344: LD_INT 3
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 3
70354: NEG
70355: PUSH
70356: LD_INT 4
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 4
70366: NEG
70367: PUSH
70368: LD_INT 3
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: LIST
70380: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70381: LD_ADDR_VAR 0 29
70385: PUSH
70386: LD_INT 1
70388: NEG
70389: PUSH
70390: LD_INT 3
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 0
70400: PUSH
70401: LD_INT 3
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 1
70411: PUSH
70412: LD_INT 2
70414: NEG
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 1
70422: NEG
70423: PUSH
70424: LD_INT 4
70426: NEG
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: LD_INT 4
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 1
70445: PUSH
70446: LD_INT 3
70448: NEG
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 1
70456: NEG
70457: PUSH
70458: LD_INT 5
70460: NEG
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 0
70468: PUSH
70469: LD_INT 5
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 1
70479: PUSH
70480: LD_INT 4
70482: NEG
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 1
70490: NEG
70491: PUSH
70492: LD_INT 6
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: LD_INT 6
70505: NEG
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 1
70513: PUSH
70514: LD_INT 5
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70536: LD_ADDR_VAR 0 30
70540: PUSH
70541: LD_INT 2
70543: PUSH
70544: LD_INT 1
70546: NEG
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: PUSH
70552: LD_INT 3
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 3
70564: PUSH
70565: LD_INT 1
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 3
70574: PUSH
70575: LD_INT 1
70577: NEG
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 4
70585: PUSH
70586: LD_INT 0
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 4
70595: PUSH
70596: LD_INT 1
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 4
70605: PUSH
70606: LD_INT 1
70608: NEG
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 5
70616: PUSH
70617: LD_INT 0
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 5
70626: PUSH
70627: LD_INT 1
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 5
70636: PUSH
70637: LD_INT 1
70639: NEG
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 6
70647: PUSH
70648: LD_INT 0
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 6
70657: PUSH
70658: LD_INT 1
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70679: LD_ADDR_VAR 0 31
70683: PUSH
70684: LD_INT 3
70686: PUSH
70687: LD_INT 2
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 3
70696: PUSH
70697: LD_INT 3
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 2
70706: PUSH
70707: LD_INT 3
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 4
70716: PUSH
70717: LD_INT 3
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 4
70726: PUSH
70727: LD_INT 4
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 3
70736: PUSH
70737: LD_INT 4
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 5
70746: PUSH
70747: LD_INT 4
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 5
70756: PUSH
70757: LD_INT 5
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 4
70766: PUSH
70767: LD_INT 5
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 6
70776: PUSH
70777: LD_INT 5
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 6
70786: PUSH
70787: LD_INT 6
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 5
70796: PUSH
70797: LD_INT 6
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70818: LD_ADDR_VAR 0 32
70822: PUSH
70823: LD_INT 1
70825: PUSH
70826: LD_INT 3
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 0
70835: PUSH
70836: LD_INT 3
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 1
70845: NEG
70846: PUSH
70847: LD_INT 2
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 1
70856: PUSH
70857: LD_INT 4
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 0
70866: PUSH
70867: LD_INT 4
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 1
70876: NEG
70877: PUSH
70878: LD_INT 3
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 1
70887: PUSH
70888: LD_INT 5
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 0
70897: PUSH
70898: LD_INT 5
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 1
70907: NEG
70908: PUSH
70909: LD_INT 4
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 1
70918: PUSH
70919: LD_INT 6
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 0
70928: PUSH
70929: LD_INT 6
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 1
70938: NEG
70939: PUSH
70940: LD_INT 5
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70961: LD_ADDR_VAR 0 33
70965: PUSH
70966: LD_INT 2
70968: NEG
70969: PUSH
70970: LD_INT 1
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 3
70979: NEG
70980: PUSH
70981: LD_INT 0
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 3
70990: NEG
70991: PUSH
70992: LD_INT 1
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 3
71002: NEG
71003: PUSH
71004: LD_INT 1
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 4
71013: NEG
71014: PUSH
71015: LD_INT 0
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 4
71024: NEG
71025: PUSH
71026: LD_INT 1
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 4
71036: NEG
71037: PUSH
71038: LD_INT 1
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 5
71047: NEG
71048: PUSH
71049: LD_INT 0
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 5
71058: NEG
71059: PUSH
71060: LD_INT 1
71062: NEG
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 5
71070: NEG
71071: PUSH
71072: LD_INT 1
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 6
71081: NEG
71082: PUSH
71083: LD_INT 0
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 6
71092: NEG
71093: PUSH
71094: LD_INT 1
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71116: LD_ADDR_VAR 0 34
71120: PUSH
71121: LD_INT 2
71123: NEG
71124: PUSH
71125: LD_INT 3
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 3
71135: NEG
71136: PUSH
71137: LD_INT 2
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 3
71147: NEG
71148: PUSH
71149: LD_INT 3
71151: NEG
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 3
71159: NEG
71160: PUSH
71161: LD_INT 4
71163: NEG
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 4
71171: NEG
71172: PUSH
71173: LD_INT 3
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 4
71183: NEG
71184: PUSH
71185: LD_INT 4
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 4
71195: NEG
71196: PUSH
71197: LD_INT 5
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 5
71207: NEG
71208: PUSH
71209: LD_INT 4
71211: NEG
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 5
71219: NEG
71220: PUSH
71221: LD_INT 5
71223: NEG
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 5
71231: NEG
71232: PUSH
71233: LD_INT 6
71235: NEG
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 6
71243: NEG
71244: PUSH
71245: LD_INT 5
71247: NEG
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 6
71255: NEG
71256: PUSH
71257: LD_INT 6
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71279: LD_ADDR_VAR 0 41
71283: PUSH
71284: LD_INT 0
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 1
71297: NEG
71298: PUSH
71299: LD_INT 3
71301: NEG
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 1
71309: PUSH
71310: LD_INT 2
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: LIST
71322: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71323: LD_ADDR_VAR 0 42
71327: PUSH
71328: LD_INT 2
71330: PUSH
71331: LD_INT 0
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 2
71340: PUSH
71341: LD_INT 1
71343: NEG
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 3
71351: PUSH
71352: LD_INT 1
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: LIST
71363: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71364: LD_ADDR_VAR 0 43
71368: PUSH
71369: LD_INT 2
71371: PUSH
71372: LD_INT 2
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 3
71381: PUSH
71382: LD_INT 2
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 2
71391: PUSH
71392: LD_INT 3
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: LIST
71403: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71404: LD_ADDR_VAR 0 44
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: LD_INT 2
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 1
71421: PUSH
71422: LD_INT 3
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 1
71431: NEG
71432: PUSH
71433: LD_INT 2
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: LIST
71444: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71445: LD_ADDR_VAR 0 45
71449: PUSH
71450: LD_INT 2
71452: NEG
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 2
71463: NEG
71464: PUSH
71465: LD_INT 1
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 3
71474: NEG
71475: PUSH
71476: LD_INT 1
71478: NEG
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: LIST
71488: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71489: LD_ADDR_VAR 0 46
71493: PUSH
71494: LD_INT 2
71496: NEG
71497: PUSH
71498: LD_INT 2
71500: NEG
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 2
71508: NEG
71509: PUSH
71510: LD_INT 3
71512: NEG
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 3
71520: NEG
71521: PUSH
71522: LD_INT 2
71524: NEG
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: LIST
71534: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71535: LD_ADDR_VAR 0 47
71539: PUSH
71540: LD_INT 2
71542: NEG
71543: PUSH
71544: LD_INT 3
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 1
71554: NEG
71555: PUSH
71556: LD_INT 3
71558: NEG
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71568: LD_ADDR_VAR 0 48
71572: PUSH
71573: LD_INT 1
71575: PUSH
71576: LD_INT 2
71578: NEG
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 2
71586: PUSH
71587: LD_INT 1
71589: NEG
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71599: LD_ADDR_VAR 0 49
71603: PUSH
71604: LD_INT 3
71606: PUSH
71607: LD_INT 1
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 3
71616: PUSH
71617: LD_INT 2
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71628: LD_ADDR_VAR 0 50
71632: PUSH
71633: LD_INT 2
71635: PUSH
71636: LD_INT 3
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 1
71645: PUSH
71646: LD_INT 3
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71657: LD_ADDR_VAR 0 51
71661: PUSH
71662: LD_INT 1
71664: NEG
71665: PUSH
71666: LD_INT 2
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 2
71675: NEG
71676: PUSH
71677: LD_INT 1
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71688: LD_ADDR_VAR 0 52
71692: PUSH
71693: LD_INT 3
71695: NEG
71696: PUSH
71697: LD_INT 1
71699: NEG
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 3
71707: NEG
71708: PUSH
71709: LD_INT 2
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71721: LD_ADDR_VAR 0 53
71725: PUSH
71726: LD_INT 1
71728: NEG
71729: PUSH
71730: LD_INT 3
71732: NEG
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 0
71740: PUSH
71741: LD_INT 3
71743: NEG
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 1
71751: PUSH
71752: LD_INT 2
71754: NEG
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: LIST
71764: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71765: LD_ADDR_VAR 0 54
71769: PUSH
71770: LD_INT 2
71772: PUSH
71773: LD_INT 1
71775: NEG
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 3
71783: PUSH
71784: LD_INT 0
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 3
71793: PUSH
71794: LD_INT 1
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: LIST
71805: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71806: LD_ADDR_VAR 0 55
71810: PUSH
71811: LD_INT 3
71813: PUSH
71814: LD_INT 2
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 3
71823: PUSH
71824: LD_INT 3
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_INT 2
71833: PUSH
71834: LD_INT 3
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: LIST
71845: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71846: LD_ADDR_VAR 0 56
71850: PUSH
71851: LD_INT 1
71853: PUSH
71854: LD_INT 3
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: LD_INT 0
71863: PUSH
71864: LD_INT 3
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 1
71873: NEG
71874: PUSH
71875: LD_INT 2
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: LIST
71886: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71887: LD_ADDR_VAR 0 57
71891: PUSH
71892: LD_INT 2
71894: NEG
71895: PUSH
71896: LD_INT 1
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 3
71905: NEG
71906: PUSH
71907: LD_INT 0
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 3
71916: NEG
71917: PUSH
71918: LD_INT 1
71920: NEG
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: LIST
71930: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71931: LD_ADDR_VAR 0 58
71935: PUSH
71936: LD_INT 2
71938: NEG
71939: PUSH
71940: LD_INT 3
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 3
71950: NEG
71951: PUSH
71952: LD_INT 2
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 3
71962: NEG
71963: PUSH
71964: LD_INT 3
71966: NEG
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: LIST
71976: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71977: LD_ADDR_VAR 0 59
71981: PUSH
71982: LD_INT 1
71984: NEG
71985: PUSH
71986: LD_INT 2
71988: NEG
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 0
71996: PUSH
71997: LD_INT 2
71999: NEG
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 1
72007: PUSH
72008: LD_INT 1
72010: NEG
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: LIST
72020: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72021: LD_ADDR_VAR 0 60
72025: PUSH
72026: LD_INT 1
72028: PUSH
72029: LD_INT 1
72031: NEG
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 2
72039: PUSH
72040: LD_INT 0
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 2
72049: PUSH
72050: LD_INT 1
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: LIST
72061: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72062: LD_ADDR_VAR 0 61
72066: PUSH
72067: LD_INT 2
72069: PUSH
72070: LD_INT 1
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 2
72079: PUSH
72080: LD_INT 2
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 1
72089: PUSH
72090: LD_INT 2
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: LIST
72101: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72102: LD_ADDR_VAR 0 62
72106: PUSH
72107: LD_INT 1
72109: PUSH
72110: LD_INT 2
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 0
72119: PUSH
72120: LD_INT 2
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 1
72129: NEG
72130: PUSH
72131: LD_INT 1
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: LIST
72142: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72143: LD_ADDR_VAR 0 63
72147: PUSH
72148: LD_INT 1
72150: NEG
72151: PUSH
72152: LD_INT 1
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PUSH
72159: LD_INT 2
72161: NEG
72162: PUSH
72163: LD_INT 0
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 2
72172: NEG
72173: PUSH
72174: LD_INT 1
72176: NEG
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: LIST
72186: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72187: LD_ADDR_VAR 0 64
72191: PUSH
72192: LD_INT 1
72194: NEG
72195: PUSH
72196: LD_INT 2
72198: NEG
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 2
72206: NEG
72207: PUSH
72208: LD_INT 1
72210: NEG
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 2
72218: NEG
72219: PUSH
72220: LD_INT 2
72222: NEG
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: LIST
72232: ST_TO_ADDR
// end ; 2 :
72233: GO 75499
72235: LD_INT 2
72237: DOUBLE
72238: EQUAL
72239: IFTRUE 72243
72241: GO 75498
72243: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72244: LD_ADDR_VAR 0 29
72248: PUSH
72249: LD_INT 4
72251: PUSH
72252: LD_INT 0
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 4
72261: PUSH
72262: LD_INT 1
72264: NEG
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: LD_INT 5
72272: PUSH
72273: LD_INT 0
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_INT 5
72282: PUSH
72283: LD_INT 1
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 4
72292: PUSH
72293: LD_INT 1
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 3
72302: PUSH
72303: LD_INT 0
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 3
72312: PUSH
72313: LD_INT 1
72315: NEG
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 3
72323: PUSH
72324: LD_INT 2
72326: NEG
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 5
72334: PUSH
72335: LD_INT 2
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: LD_INT 3
72344: PUSH
72345: LD_INT 3
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: PUSH
72352: LD_INT 3
72354: PUSH
72355: LD_INT 2
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 4
72364: PUSH
72365: LD_INT 3
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 4
72374: PUSH
72375: LD_INT 4
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 3
72384: PUSH
72385: LD_INT 4
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: PUSH
72392: LD_INT 2
72394: PUSH
72395: LD_INT 3
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 2
72404: PUSH
72405: LD_INT 2
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 4
72414: PUSH
72415: LD_INT 2
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 2
72424: PUSH
72425: LD_INT 4
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 0
72434: PUSH
72435: LD_INT 4
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 0
72444: PUSH
72445: LD_INT 3
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 1
72454: PUSH
72455: LD_INT 4
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 1
72464: PUSH
72465: LD_INT 5
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 0
72474: PUSH
72475: LD_INT 5
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 1
72484: NEG
72485: PUSH
72486: LD_INT 4
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: LD_INT 1
72495: NEG
72496: PUSH
72497: LD_INT 3
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 2
72506: PUSH
72507: LD_INT 5
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 2
72516: NEG
72517: PUSH
72518: LD_INT 3
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 3
72527: NEG
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 3
72538: NEG
72539: PUSH
72540: LD_INT 1
72542: NEG
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 2
72550: NEG
72551: PUSH
72552: LD_INT 0
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 2
72561: NEG
72562: PUSH
72563: LD_INT 1
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: LD_INT 3
72572: NEG
72573: PUSH
72574: LD_INT 1
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 4
72583: NEG
72584: PUSH
72585: LD_INT 0
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: LD_INT 4
72594: NEG
72595: PUSH
72596: LD_INT 1
72598: NEG
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 4
72606: NEG
72607: PUSH
72608: LD_INT 2
72610: NEG
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 2
72618: NEG
72619: PUSH
72620: LD_INT 2
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 4
72629: NEG
72630: PUSH
72631: LD_INT 4
72633: NEG
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 4
72641: NEG
72642: PUSH
72643: LD_INT 5
72645: NEG
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 3
72653: NEG
72654: PUSH
72655: LD_INT 4
72657: NEG
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 3
72665: NEG
72666: PUSH
72667: LD_INT 3
72669: NEG
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 4
72677: NEG
72678: PUSH
72679: LD_INT 3
72681: NEG
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 5
72689: NEG
72690: PUSH
72691: LD_INT 4
72693: NEG
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: LD_INT 5
72701: NEG
72702: PUSH
72703: LD_INT 5
72705: NEG
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 3
72713: NEG
72714: PUSH
72715: LD_INT 5
72717: NEG
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 5
72725: NEG
72726: PUSH
72727: LD_INT 3
72729: NEG
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72782: LD_ADDR_VAR 0 30
72786: PUSH
72787: LD_INT 4
72789: PUSH
72790: LD_INT 4
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 4
72799: PUSH
72800: LD_INT 3
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 5
72809: PUSH
72810: LD_INT 4
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 5
72819: PUSH
72820: LD_INT 5
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 4
72829: PUSH
72830: LD_INT 5
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PUSH
72837: LD_INT 3
72839: PUSH
72840: LD_INT 4
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 3
72849: PUSH
72850: LD_INT 3
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 5
72859: PUSH
72860: LD_INT 3
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 3
72869: PUSH
72870: LD_INT 5
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 0
72879: PUSH
72880: LD_INT 3
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 0
72889: PUSH
72890: LD_INT 2
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 1
72899: PUSH
72900: LD_INT 3
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 1
72909: PUSH
72910: LD_INT 4
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 0
72919: PUSH
72920: LD_INT 4
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 1
72929: NEG
72930: PUSH
72931: LD_INT 3
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 1
72940: NEG
72941: PUSH
72942: LD_INT 2
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_INT 2
72951: PUSH
72952: LD_INT 4
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 2
72961: NEG
72962: PUSH
72963: LD_INT 2
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 4
72972: NEG
72973: PUSH
72974: LD_INT 0
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 4
72983: NEG
72984: PUSH
72985: LD_INT 1
72987: NEG
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 3
72995: NEG
72996: PUSH
72997: LD_INT 0
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 3
73006: NEG
73007: PUSH
73008: LD_INT 1
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: LD_INT 4
73017: NEG
73018: PUSH
73019: LD_INT 1
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_INT 5
73028: NEG
73029: PUSH
73030: LD_INT 0
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PUSH
73037: LD_INT 5
73039: NEG
73040: PUSH
73041: LD_INT 1
73043: NEG
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 5
73051: NEG
73052: PUSH
73053: LD_INT 2
73055: NEG
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 3
73063: NEG
73064: PUSH
73065: LD_INT 2
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 3
73074: NEG
73075: PUSH
73076: LD_INT 3
73078: NEG
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 3
73086: NEG
73087: PUSH
73088: LD_INT 4
73090: NEG
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: LD_INT 2
73098: NEG
73099: PUSH
73100: LD_INT 3
73102: NEG
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: PUSH
73108: LD_INT 2
73110: NEG
73111: PUSH
73112: LD_INT 2
73114: NEG
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: LD_INT 3
73122: NEG
73123: PUSH
73124: LD_INT 2
73126: NEG
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 4
73134: NEG
73135: PUSH
73136: LD_INT 3
73138: NEG
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 4
73146: NEG
73147: PUSH
73148: LD_INT 4
73150: NEG
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: PUSH
73156: LD_INT 2
73158: NEG
73159: PUSH
73160: LD_INT 4
73162: NEG
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 4
73170: NEG
73171: PUSH
73172: LD_INT 2
73174: NEG
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 0
73182: PUSH
73183: LD_INT 4
73185: NEG
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: LD_INT 0
73193: PUSH
73194: LD_INT 5
73196: NEG
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 1
73204: PUSH
73205: LD_INT 4
73207: NEG
73208: PUSH
73209: EMPTY
73210: LIST
73211: LIST
73212: PUSH
73213: LD_INT 1
73215: PUSH
73216: LD_INT 3
73218: NEG
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 0
73226: PUSH
73227: LD_INT 3
73229: NEG
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: PUSH
73235: LD_INT 1
73237: NEG
73238: PUSH
73239: LD_INT 4
73241: NEG
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 1
73249: NEG
73250: PUSH
73251: LD_INT 5
73253: NEG
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: LD_INT 2
73261: PUSH
73262: LD_INT 3
73264: NEG
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 2
73272: NEG
73273: PUSH
73274: LD_INT 5
73276: NEG
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73329: LD_ADDR_VAR 0 31
73333: PUSH
73334: LD_INT 0
73336: PUSH
73337: LD_INT 4
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 0
73346: PUSH
73347: LD_INT 3
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 1
73356: PUSH
73357: LD_INT 4
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 1
73366: PUSH
73367: LD_INT 5
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: PUSH
73374: LD_INT 0
73376: PUSH
73377: LD_INT 5
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 1
73386: NEG
73387: PUSH
73388: LD_INT 4
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 1
73397: NEG
73398: PUSH
73399: LD_INT 3
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 2
73408: PUSH
73409: LD_INT 5
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 2
73418: NEG
73419: PUSH
73420: LD_INT 3
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 3
73429: NEG
73430: PUSH
73431: LD_INT 0
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: LD_INT 3
73440: NEG
73441: PUSH
73442: LD_INT 1
73444: NEG
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PUSH
73450: LD_INT 2
73452: NEG
73453: PUSH
73454: LD_INT 0
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 2
73463: NEG
73464: PUSH
73465: LD_INT 1
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 3
73474: NEG
73475: PUSH
73476: LD_INT 1
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 4
73485: NEG
73486: PUSH
73487: LD_INT 0
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 4
73496: NEG
73497: PUSH
73498: LD_INT 1
73500: NEG
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 4
73508: NEG
73509: PUSH
73510: LD_INT 2
73512: NEG
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 2
73520: NEG
73521: PUSH
73522: LD_INT 2
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 4
73531: NEG
73532: PUSH
73533: LD_INT 4
73535: NEG
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: PUSH
73541: LD_INT 4
73543: NEG
73544: PUSH
73545: LD_INT 5
73547: NEG
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: LD_INT 3
73555: NEG
73556: PUSH
73557: LD_INT 4
73559: NEG
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 3
73567: NEG
73568: PUSH
73569: LD_INT 3
73571: NEG
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: LD_INT 4
73579: NEG
73580: PUSH
73581: LD_INT 3
73583: NEG
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PUSH
73589: LD_INT 5
73591: NEG
73592: PUSH
73593: LD_INT 4
73595: NEG
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: LD_INT 5
73603: NEG
73604: PUSH
73605: LD_INT 5
73607: NEG
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: LD_INT 3
73615: NEG
73616: PUSH
73617: LD_INT 5
73619: NEG
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 5
73627: NEG
73628: PUSH
73629: LD_INT 3
73631: NEG
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: LD_INT 0
73639: PUSH
73640: LD_INT 3
73642: NEG
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: LD_INT 0
73650: PUSH
73651: LD_INT 4
73653: NEG
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: LD_INT 1
73661: PUSH
73662: LD_INT 3
73664: NEG
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: LD_INT 1
73672: PUSH
73673: LD_INT 2
73675: NEG
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 0
73683: PUSH
73684: LD_INT 2
73686: NEG
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PUSH
73692: LD_INT 1
73694: NEG
73695: PUSH
73696: LD_INT 3
73698: NEG
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 1
73706: NEG
73707: PUSH
73708: LD_INT 4
73710: NEG
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 2
73718: PUSH
73719: LD_INT 2
73721: NEG
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 2
73729: NEG
73730: PUSH
73731: LD_INT 4
73733: NEG
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: PUSH
73739: LD_INT 4
73741: PUSH
73742: LD_INT 0
73744: PUSH
73745: EMPTY
73746: LIST
73747: LIST
73748: PUSH
73749: LD_INT 4
73751: PUSH
73752: LD_INT 1
73754: NEG
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PUSH
73760: LD_INT 5
73762: PUSH
73763: LD_INT 0
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: PUSH
73770: LD_INT 5
73772: PUSH
73773: LD_INT 1
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PUSH
73780: LD_INT 4
73782: PUSH
73783: LD_INT 1
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: PUSH
73790: LD_INT 3
73792: PUSH
73793: LD_INT 0
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: PUSH
73800: LD_INT 3
73802: PUSH
73803: LD_INT 1
73805: NEG
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 3
73813: PUSH
73814: LD_INT 2
73816: NEG
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: PUSH
73822: LD_INT 5
73824: PUSH
73825: LD_INT 2
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73879: LD_ADDR_VAR 0 32
73883: PUSH
73884: LD_INT 4
73886: NEG
73887: PUSH
73888: LD_INT 0
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: PUSH
73895: LD_INT 4
73897: NEG
73898: PUSH
73899: LD_INT 1
73901: NEG
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: PUSH
73907: LD_INT 3
73909: NEG
73910: PUSH
73911: LD_INT 0
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: PUSH
73918: LD_INT 3
73920: NEG
73921: PUSH
73922: LD_INT 1
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: PUSH
73929: LD_INT 4
73931: NEG
73932: PUSH
73933: LD_INT 1
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: LD_INT 5
73942: NEG
73943: PUSH
73944: LD_INT 0
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PUSH
73951: LD_INT 5
73953: NEG
73954: PUSH
73955: LD_INT 1
73957: NEG
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: PUSH
73963: LD_INT 5
73965: NEG
73966: PUSH
73967: LD_INT 2
73969: NEG
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: PUSH
73975: LD_INT 3
73977: NEG
73978: PUSH
73979: LD_INT 2
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PUSH
73986: LD_INT 3
73988: NEG
73989: PUSH
73990: LD_INT 3
73992: NEG
73993: PUSH
73994: EMPTY
73995: LIST
73996: LIST
73997: PUSH
73998: LD_INT 3
74000: NEG
74001: PUSH
74002: LD_INT 4
74004: NEG
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 2
74012: NEG
74013: PUSH
74014: LD_INT 3
74016: NEG
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PUSH
74022: LD_INT 2
74024: NEG
74025: PUSH
74026: LD_INT 2
74028: NEG
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PUSH
74034: LD_INT 3
74036: NEG
74037: PUSH
74038: LD_INT 2
74040: NEG
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 4
74048: NEG
74049: PUSH
74050: LD_INT 3
74052: NEG
74053: PUSH
74054: EMPTY
74055: LIST
74056: LIST
74057: PUSH
74058: LD_INT 4
74060: NEG
74061: PUSH
74062: LD_INT 4
74064: NEG
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 2
74072: NEG
74073: PUSH
74074: LD_INT 4
74076: NEG
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 4
74084: NEG
74085: PUSH
74086: LD_INT 2
74088: NEG
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 0
74096: PUSH
74097: LD_INT 4
74099: NEG
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_INT 0
74107: PUSH
74108: LD_INT 5
74110: NEG
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: LD_INT 1
74118: PUSH
74119: LD_INT 4
74121: NEG
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 1
74129: PUSH
74130: LD_INT 3
74132: NEG
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 0
74140: PUSH
74141: LD_INT 3
74143: NEG
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 1
74151: NEG
74152: PUSH
74153: LD_INT 4
74155: NEG
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_INT 1
74163: NEG
74164: PUSH
74165: LD_INT 5
74167: NEG
74168: PUSH
74169: EMPTY
74170: LIST
74171: LIST
74172: PUSH
74173: LD_INT 2
74175: PUSH
74176: LD_INT 3
74178: NEG
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: PUSH
74184: LD_INT 2
74186: NEG
74187: PUSH
74188: LD_INT 5
74190: NEG
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 3
74198: PUSH
74199: LD_INT 0
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 3
74208: PUSH
74209: LD_INT 1
74211: NEG
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 4
74219: PUSH
74220: LD_INT 0
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: LD_INT 4
74229: PUSH
74230: LD_INT 1
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 3
74239: PUSH
74240: LD_INT 1
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: PUSH
74247: LD_INT 2
74249: PUSH
74250: LD_INT 0
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 2
74259: PUSH
74260: LD_INT 1
74262: NEG
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 2
74270: PUSH
74271: LD_INT 2
74273: NEG
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: LD_INT 4
74281: PUSH
74282: LD_INT 2
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 4
74291: PUSH
74292: LD_INT 4
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 4
74301: PUSH
74302: LD_INT 3
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: LD_INT 5
74311: PUSH
74312: LD_INT 4
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: LD_INT 5
74321: PUSH
74322: LD_INT 5
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: LD_INT 4
74331: PUSH
74332: LD_INT 5
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 3
74341: PUSH
74342: LD_INT 4
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: LD_INT 3
74351: PUSH
74352: LD_INT 3
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 5
74361: PUSH
74362: LD_INT 3
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: PUSH
74369: LD_INT 3
74371: PUSH
74372: LD_INT 5
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74426: LD_ADDR_VAR 0 33
74430: PUSH
74431: LD_INT 4
74433: NEG
74434: PUSH
74435: LD_INT 4
74437: NEG
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: PUSH
74443: LD_INT 4
74445: NEG
74446: PUSH
74447: LD_INT 5
74449: NEG
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 3
74457: NEG
74458: PUSH
74459: LD_INT 4
74461: NEG
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: PUSH
74467: LD_INT 3
74469: NEG
74470: PUSH
74471: LD_INT 3
74473: NEG
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 4
74481: NEG
74482: PUSH
74483: LD_INT 3
74485: NEG
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: PUSH
74491: LD_INT 5
74493: NEG
74494: PUSH
74495: LD_INT 4
74497: NEG
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: LD_INT 5
74505: NEG
74506: PUSH
74507: LD_INT 5
74509: NEG
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 3
74517: NEG
74518: PUSH
74519: LD_INT 5
74521: NEG
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 5
74529: NEG
74530: PUSH
74531: LD_INT 3
74533: NEG
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: PUSH
74539: LD_INT 0
74541: PUSH
74542: LD_INT 3
74544: NEG
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PUSH
74550: LD_INT 0
74552: PUSH
74553: LD_INT 4
74555: NEG
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: PUSH
74561: LD_INT 1
74563: PUSH
74564: LD_INT 3
74566: NEG
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: PUSH
74572: LD_INT 1
74574: PUSH
74575: LD_INT 2
74577: NEG
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: PUSH
74583: LD_INT 0
74585: PUSH
74586: LD_INT 2
74588: NEG
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: PUSH
74594: LD_INT 1
74596: NEG
74597: PUSH
74598: LD_INT 3
74600: NEG
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: LD_INT 1
74608: NEG
74609: PUSH
74610: LD_INT 4
74612: NEG
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 2
74620: PUSH
74621: LD_INT 2
74623: NEG
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 2
74631: NEG
74632: PUSH
74633: LD_INT 4
74635: NEG
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_INT 4
74643: PUSH
74644: LD_INT 0
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 4
74653: PUSH
74654: LD_INT 1
74656: NEG
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: LD_INT 5
74664: PUSH
74665: LD_INT 0
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: PUSH
74672: LD_INT 5
74674: PUSH
74675: LD_INT 1
74677: PUSH
74678: EMPTY
74679: LIST
74680: LIST
74681: PUSH
74682: LD_INT 4
74684: PUSH
74685: LD_INT 1
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: PUSH
74692: LD_INT 3
74694: PUSH
74695: LD_INT 0
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: PUSH
74702: LD_INT 3
74704: PUSH
74705: LD_INT 1
74707: NEG
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: PUSH
74713: LD_INT 3
74715: PUSH
74716: LD_INT 2
74718: NEG
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PUSH
74724: LD_INT 5
74726: PUSH
74727: LD_INT 2
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: LD_INT 3
74736: PUSH
74737: LD_INT 3
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: LD_INT 3
74746: PUSH
74747: LD_INT 2
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: PUSH
74754: LD_INT 4
74756: PUSH
74757: LD_INT 3
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: PUSH
74764: LD_INT 4
74766: PUSH
74767: LD_INT 4
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: LD_INT 3
74776: PUSH
74777: LD_INT 4
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: PUSH
74784: LD_INT 2
74786: PUSH
74787: LD_INT 3
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PUSH
74794: LD_INT 2
74796: PUSH
74797: LD_INT 2
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: LD_INT 4
74806: PUSH
74807: LD_INT 2
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: PUSH
74814: LD_INT 2
74816: PUSH
74817: LD_INT 4
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: PUSH
74824: LD_INT 0
74826: PUSH
74827: LD_INT 4
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: PUSH
74834: LD_INT 0
74836: PUSH
74837: LD_INT 3
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: LD_INT 1
74846: PUSH
74847: LD_INT 4
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: PUSH
74854: LD_INT 1
74856: PUSH
74857: LD_INT 5
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: PUSH
74864: LD_INT 0
74866: PUSH
74867: LD_INT 5
74869: PUSH
74870: EMPTY
74871: LIST
74872: LIST
74873: PUSH
74874: LD_INT 1
74876: NEG
74877: PUSH
74878: LD_INT 4
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PUSH
74885: LD_INT 1
74887: NEG
74888: PUSH
74889: LD_INT 3
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: PUSH
74896: LD_INT 2
74898: PUSH
74899: LD_INT 5
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: PUSH
74906: LD_INT 2
74908: NEG
74909: PUSH
74910: LD_INT 3
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: EMPTY
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74964: LD_ADDR_VAR 0 34
74968: PUSH
74969: LD_INT 0
74971: PUSH
74972: LD_INT 4
74974: NEG
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 0
74982: PUSH
74983: LD_INT 5
74985: NEG
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 1
74993: PUSH
74994: LD_INT 4
74996: NEG
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 1
75004: PUSH
75005: LD_INT 3
75007: NEG
75008: PUSH
75009: EMPTY
75010: LIST
75011: LIST
75012: PUSH
75013: LD_INT 0
75015: PUSH
75016: LD_INT 3
75018: NEG
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: PUSH
75024: LD_INT 1
75026: NEG
75027: PUSH
75028: LD_INT 4
75030: NEG
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: PUSH
75036: LD_INT 1
75038: NEG
75039: PUSH
75040: LD_INT 5
75042: NEG
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PUSH
75048: LD_INT 2
75050: PUSH
75051: LD_INT 3
75053: NEG
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: PUSH
75059: LD_INT 2
75061: NEG
75062: PUSH
75063: LD_INT 5
75065: NEG
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: LD_INT 3
75073: PUSH
75074: LD_INT 0
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 3
75083: PUSH
75084: LD_INT 1
75086: NEG
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: LD_INT 4
75094: PUSH
75095: LD_INT 0
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 4
75104: PUSH
75105: LD_INT 1
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: LD_INT 3
75114: PUSH
75115: LD_INT 1
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: PUSH
75122: LD_INT 2
75124: PUSH
75125: LD_INT 0
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 2
75134: PUSH
75135: LD_INT 1
75137: NEG
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: PUSH
75143: LD_INT 2
75145: PUSH
75146: LD_INT 2
75148: NEG
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: LD_INT 4
75156: PUSH
75157: LD_INT 2
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 4
75166: PUSH
75167: LD_INT 4
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: PUSH
75174: LD_INT 4
75176: PUSH
75177: LD_INT 3
75179: PUSH
75180: EMPTY
75181: LIST
75182: LIST
75183: PUSH
75184: LD_INT 5
75186: PUSH
75187: LD_INT 4
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: PUSH
75194: LD_INT 5
75196: PUSH
75197: LD_INT 5
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: PUSH
75204: LD_INT 4
75206: PUSH
75207: LD_INT 5
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: PUSH
75214: LD_INT 3
75216: PUSH
75217: LD_INT 4
75219: PUSH
75220: EMPTY
75221: LIST
75222: LIST
75223: PUSH
75224: LD_INT 3
75226: PUSH
75227: LD_INT 3
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: LD_INT 5
75236: PUSH
75237: LD_INT 3
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PUSH
75244: LD_INT 3
75246: PUSH
75247: LD_INT 5
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PUSH
75254: LD_INT 0
75256: PUSH
75257: LD_INT 3
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: PUSH
75264: LD_INT 0
75266: PUSH
75267: LD_INT 2
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: PUSH
75274: LD_INT 1
75276: PUSH
75277: LD_INT 3
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PUSH
75284: LD_INT 1
75286: PUSH
75287: LD_INT 4
75289: PUSH
75290: EMPTY
75291: LIST
75292: LIST
75293: PUSH
75294: LD_INT 0
75296: PUSH
75297: LD_INT 4
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: PUSH
75304: LD_INT 1
75306: NEG
75307: PUSH
75308: LD_INT 3
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: LD_INT 1
75317: NEG
75318: PUSH
75319: LD_INT 2
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PUSH
75326: LD_INT 2
75328: PUSH
75329: LD_INT 4
75331: PUSH
75332: EMPTY
75333: LIST
75334: LIST
75335: PUSH
75336: LD_INT 2
75338: NEG
75339: PUSH
75340: LD_INT 2
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: PUSH
75347: LD_INT 4
75349: NEG
75350: PUSH
75351: LD_INT 0
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: LD_INT 4
75360: NEG
75361: PUSH
75362: LD_INT 1
75364: NEG
75365: PUSH
75366: EMPTY
75367: LIST
75368: LIST
75369: PUSH
75370: LD_INT 3
75372: NEG
75373: PUSH
75374: LD_INT 0
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PUSH
75381: LD_INT 3
75383: NEG
75384: PUSH
75385: LD_INT 1
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PUSH
75392: LD_INT 4
75394: NEG
75395: PUSH
75396: LD_INT 1
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PUSH
75403: LD_INT 5
75405: NEG
75406: PUSH
75407: LD_INT 0
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: LD_INT 5
75416: NEG
75417: PUSH
75418: LD_INT 1
75420: NEG
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 5
75428: NEG
75429: PUSH
75430: LD_INT 2
75432: NEG
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: LD_INT 3
75440: NEG
75441: PUSH
75442: LD_INT 2
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: LIST
75472: LIST
75473: LIST
75474: LIST
75475: LIST
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: ST_TO_ADDR
// end ; end ;
75496: GO 75499
75498: POP
// case btype of b_depot , b_warehouse :
75499: LD_VAR 0 1
75503: PUSH
75504: LD_INT 0
75506: DOUBLE
75507: EQUAL
75508: IFTRUE 75518
75510: LD_INT 1
75512: DOUBLE
75513: EQUAL
75514: IFTRUE 75518
75516: GO 75719
75518: POP
// case nation of nation_american :
75519: LD_VAR 0 5
75523: PUSH
75524: LD_INT 1
75526: DOUBLE
75527: EQUAL
75528: IFTRUE 75532
75530: GO 75588
75532: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75533: LD_ADDR_VAR 0 9
75537: PUSH
75538: LD_VAR 0 11
75542: PUSH
75543: LD_VAR 0 12
75547: PUSH
75548: LD_VAR 0 13
75552: PUSH
75553: LD_VAR 0 14
75557: PUSH
75558: LD_VAR 0 15
75562: PUSH
75563: LD_VAR 0 16
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: PUSH
75576: LD_VAR 0 4
75580: PUSH
75581: LD_INT 1
75583: PLUS
75584: ARRAY
75585: ST_TO_ADDR
75586: GO 75717
75588: LD_INT 2
75590: DOUBLE
75591: EQUAL
75592: IFTRUE 75596
75594: GO 75652
75596: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75597: LD_ADDR_VAR 0 9
75601: PUSH
75602: LD_VAR 0 17
75606: PUSH
75607: LD_VAR 0 18
75611: PUSH
75612: LD_VAR 0 19
75616: PUSH
75617: LD_VAR 0 20
75621: PUSH
75622: LD_VAR 0 21
75626: PUSH
75627: LD_VAR 0 22
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: PUSH
75640: LD_VAR 0 4
75644: PUSH
75645: LD_INT 1
75647: PLUS
75648: ARRAY
75649: ST_TO_ADDR
75650: GO 75717
75652: LD_INT 3
75654: DOUBLE
75655: EQUAL
75656: IFTRUE 75660
75658: GO 75716
75660: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75661: LD_ADDR_VAR 0 9
75665: PUSH
75666: LD_VAR 0 23
75670: PUSH
75671: LD_VAR 0 24
75675: PUSH
75676: LD_VAR 0 25
75680: PUSH
75681: LD_VAR 0 26
75685: PUSH
75686: LD_VAR 0 27
75690: PUSH
75691: LD_VAR 0 28
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: PUSH
75704: LD_VAR 0 4
75708: PUSH
75709: LD_INT 1
75711: PLUS
75712: ARRAY
75713: ST_TO_ADDR
75714: GO 75717
75716: POP
75717: GO 76272
75719: LD_INT 2
75721: DOUBLE
75722: EQUAL
75723: IFTRUE 75733
75725: LD_INT 3
75727: DOUBLE
75728: EQUAL
75729: IFTRUE 75733
75731: GO 75789
75733: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75734: LD_ADDR_VAR 0 9
75738: PUSH
75739: LD_VAR 0 29
75743: PUSH
75744: LD_VAR 0 30
75748: PUSH
75749: LD_VAR 0 31
75753: PUSH
75754: LD_VAR 0 32
75758: PUSH
75759: LD_VAR 0 33
75763: PUSH
75764: LD_VAR 0 34
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: LIST
75773: LIST
75774: LIST
75775: LIST
75776: PUSH
75777: LD_VAR 0 4
75781: PUSH
75782: LD_INT 1
75784: PLUS
75785: ARRAY
75786: ST_TO_ADDR
75787: GO 76272
75789: LD_INT 16
75791: DOUBLE
75792: EQUAL
75793: IFTRUE 75851
75795: LD_INT 17
75797: DOUBLE
75798: EQUAL
75799: IFTRUE 75851
75801: LD_INT 18
75803: DOUBLE
75804: EQUAL
75805: IFTRUE 75851
75807: LD_INT 19
75809: DOUBLE
75810: EQUAL
75811: IFTRUE 75851
75813: LD_INT 22
75815: DOUBLE
75816: EQUAL
75817: IFTRUE 75851
75819: LD_INT 20
75821: DOUBLE
75822: EQUAL
75823: IFTRUE 75851
75825: LD_INT 21
75827: DOUBLE
75828: EQUAL
75829: IFTRUE 75851
75831: LD_INT 23
75833: DOUBLE
75834: EQUAL
75835: IFTRUE 75851
75837: LD_INT 24
75839: DOUBLE
75840: EQUAL
75841: IFTRUE 75851
75843: LD_INT 25
75845: DOUBLE
75846: EQUAL
75847: IFTRUE 75851
75849: GO 75907
75851: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75852: LD_ADDR_VAR 0 9
75856: PUSH
75857: LD_VAR 0 35
75861: PUSH
75862: LD_VAR 0 36
75866: PUSH
75867: LD_VAR 0 37
75871: PUSH
75872: LD_VAR 0 38
75876: PUSH
75877: LD_VAR 0 39
75881: PUSH
75882: LD_VAR 0 40
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: LIST
75894: PUSH
75895: LD_VAR 0 4
75899: PUSH
75900: LD_INT 1
75902: PLUS
75903: ARRAY
75904: ST_TO_ADDR
75905: GO 76272
75907: LD_INT 6
75909: DOUBLE
75910: EQUAL
75911: IFTRUE 75963
75913: LD_INT 7
75915: DOUBLE
75916: EQUAL
75917: IFTRUE 75963
75919: LD_INT 8
75921: DOUBLE
75922: EQUAL
75923: IFTRUE 75963
75925: LD_INT 13
75927: DOUBLE
75928: EQUAL
75929: IFTRUE 75963
75931: LD_INT 12
75933: DOUBLE
75934: EQUAL
75935: IFTRUE 75963
75937: LD_INT 15
75939: DOUBLE
75940: EQUAL
75941: IFTRUE 75963
75943: LD_INT 11
75945: DOUBLE
75946: EQUAL
75947: IFTRUE 75963
75949: LD_INT 14
75951: DOUBLE
75952: EQUAL
75953: IFTRUE 75963
75955: LD_INT 10
75957: DOUBLE
75958: EQUAL
75959: IFTRUE 75963
75961: GO 76019
75963: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75964: LD_ADDR_VAR 0 9
75968: PUSH
75969: LD_VAR 0 41
75973: PUSH
75974: LD_VAR 0 42
75978: PUSH
75979: LD_VAR 0 43
75983: PUSH
75984: LD_VAR 0 44
75988: PUSH
75989: LD_VAR 0 45
75993: PUSH
75994: LD_VAR 0 46
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: LIST
76005: LIST
76006: PUSH
76007: LD_VAR 0 4
76011: PUSH
76012: LD_INT 1
76014: PLUS
76015: ARRAY
76016: ST_TO_ADDR
76017: GO 76272
76019: LD_INT 36
76021: DOUBLE
76022: EQUAL
76023: IFTRUE 76027
76025: GO 76083
76027: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76028: LD_ADDR_VAR 0 9
76032: PUSH
76033: LD_VAR 0 47
76037: PUSH
76038: LD_VAR 0 48
76042: PUSH
76043: LD_VAR 0 49
76047: PUSH
76048: LD_VAR 0 50
76052: PUSH
76053: LD_VAR 0 51
76057: PUSH
76058: LD_VAR 0 52
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: PUSH
76071: LD_VAR 0 4
76075: PUSH
76076: LD_INT 1
76078: PLUS
76079: ARRAY
76080: ST_TO_ADDR
76081: GO 76272
76083: LD_INT 4
76085: DOUBLE
76086: EQUAL
76087: IFTRUE 76109
76089: LD_INT 5
76091: DOUBLE
76092: EQUAL
76093: IFTRUE 76109
76095: LD_INT 34
76097: DOUBLE
76098: EQUAL
76099: IFTRUE 76109
76101: LD_INT 37
76103: DOUBLE
76104: EQUAL
76105: IFTRUE 76109
76107: GO 76165
76109: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76110: LD_ADDR_VAR 0 9
76114: PUSH
76115: LD_VAR 0 53
76119: PUSH
76120: LD_VAR 0 54
76124: PUSH
76125: LD_VAR 0 55
76129: PUSH
76130: LD_VAR 0 56
76134: PUSH
76135: LD_VAR 0 57
76139: PUSH
76140: LD_VAR 0 58
76144: PUSH
76145: EMPTY
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: PUSH
76153: LD_VAR 0 4
76157: PUSH
76158: LD_INT 1
76160: PLUS
76161: ARRAY
76162: ST_TO_ADDR
76163: GO 76272
76165: LD_INT 31
76167: DOUBLE
76168: EQUAL
76169: IFTRUE 76215
76171: LD_INT 32
76173: DOUBLE
76174: EQUAL
76175: IFTRUE 76215
76177: LD_INT 33
76179: DOUBLE
76180: EQUAL
76181: IFTRUE 76215
76183: LD_INT 27
76185: DOUBLE
76186: EQUAL
76187: IFTRUE 76215
76189: LD_INT 26
76191: DOUBLE
76192: EQUAL
76193: IFTRUE 76215
76195: LD_INT 28
76197: DOUBLE
76198: EQUAL
76199: IFTRUE 76215
76201: LD_INT 29
76203: DOUBLE
76204: EQUAL
76205: IFTRUE 76215
76207: LD_INT 30
76209: DOUBLE
76210: EQUAL
76211: IFTRUE 76215
76213: GO 76271
76215: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76216: LD_ADDR_VAR 0 9
76220: PUSH
76221: LD_VAR 0 59
76225: PUSH
76226: LD_VAR 0 60
76230: PUSH
76231: LD_VAR 0 61
76235: PUSH
76236: LD_VAR 0 62
76240: PUSH
76241: LD_VAR 0 63
76245: PUSH
76246: LD_VAR 0 64
76250: PUSH
76251: EMPTY
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: PUSH
76259: LD_VAR 0 4
76263: PUSH
76264: LD_INT 1
76266: PLUS
76267: ARRAY
76268: ST_TO_ADDR
76269: GO 76272
76271: POP
// temp_list2 = [ ] ;
76272: LD_ADDR_VAR 0 10
76276: PUSH
76277: EMPTY
76278: ST_TO_ADDR
// for i in temp_list do
76279: LD_ADDR_VAR 0 8
76283: PUSH
76284: LD_VAR 0 9
76288: PUSH
76289: FOR_IN
76290: IFFALSE 76342
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76292: LD_ADDR_VAR 0 10
76296: PUSH
76297: LD_VAR 0 10
76301: PUSH
76302: LD_VAR 0 8
76306: PUSH
76307: LD_INT 1
76309: ARRAY
76310: PUSH
76311: LD_VAR 0 2
76315: PLUS
76316: PUSH
76317: LD_VAR 0 8
76321: PUSH
76322: LD_INT 2
76324: ARRAY
76325: PUSH
76326: LD_VAR 0 3
76330: PLUS
76331: PUSH
76332: EMPTY
76333: LIST
76334: LIST
76335: PUSH
76336: EMPTY
76337: LIST
76338: ADD
76339: ST_TO_ADDR
76340: GO 76289
76342: POP
76343: POP
// result = temp_list2 ;
76344: LD_ADDR_VAR 0 7
76348: PUSH
76349: LD_VAR 0 10
76353: ST_TO_ADDR
// end ;
76354: LD_VAR 0 7
76358: RET
// export function EnemyInRange ( unit , dist ) ; begin
76359: LD_INT 0
76361: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76362: LD_ADDR_VAR 0 3
76366: PUSH
76367: LD_VAR 0 1
76371: PPUSH
76372: CALL_OW 255
76376: PPUSH
76377: LD_VAR 0 1
76381: PPUSH
76382: CALL_OW 250
76386: PPUSH
76387: LD_VAR 0 1
76391: PPUSH
76392: CALL_OW 251
76396: PPUSH
76397: LD_VAR 0 2
76401: PPUSH
76402: CALL 49616 0 4
76406: PUSH
76407: LD_INT 4
76409: ARRAY
76410: ST_TO_ADDR
// end ;
76411: LD_VAR 0 3
76415: RET
// export function PlayerSeeMe ( unit ) ; begin
76416: LD_INT 0
76418: PPUSH
// result := See ( your_side , unit ) ;
76419: LD_ADDR_VAR 0 2
76423: PUSH
76424: LD_OWVAR 2
76428: PPUSH
76429: LD_VAR 0 1
76433: PPUSH
76434: CALL_OW 292
76438: ST_TO_ADDR
// end ;
76439: LD_VAR 0 2
76443: RET
// export function ReverseDir ( unit ) ; begin
76444: LD_INT 0
76446: PPUSH
// if not unit then
76447: LD_VAR 0 1
76451: NOT
76452: IFFALSE 76456
// exit ;
76454: GO 76479
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76456: LD_ADDR_VAR 0 2
76460: PUSH
76461: LD_VAR 0 1
76465: PPUSH
76466: CALL_OW 254
76470: PUSH
76471: LD_INT 3
76473: PLUS
76474: PUSH
76475: LD_INT 6
76477: MOD
76478: ST_TO_ADDR
// end ;
76479: LD_VAR 0 2
76483: RET
// export function ReverseArray ( array ) ; var i ; begin
76484: LD_INT 0
76486: PPUSH
76487: PPUSH
// if not array then
76488: LD_VAR 0 1
76492: NOT
76493: IFFALSE 76497
// exit ;
76495: GO 76552
// result := [ ] ;
76497: LD_ADDR_VAR 0 2
76501: PUSH
76502: EMPTY
76503: ST_TO_ADDR
// for i := array downto 1 do
76504: LD_ADDR_VAR 0 3
76508: PUSH
76509: DOUBLE
76510: LD_VAR 0 1
76514: INC
76515: ST_TO_ADDR
76516: LD_INT 1
76518: PUSH
76519: FOR_DOWNTO
76520: IFFALSE 76550
// result := Join ( result , array [ i ] ) ;
76522: LD_ADDR_VAR 0 2
76526: PUSH
76527: LD_VAR 0 2
76531: PPUSH
76532: LD_VAR 0 1
76536: PUSH
76537: LD_VAR 0 3
76541: ARRAY
76542: PPUSH
76543: CALL 81404 0 2
76547: ST_TO_ADDR
76548: GO 76519
76550: POP
76551: POP
// end ;
76552: LD_VAR 0 2
76556: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76557: LD_INT 0
76559: PPUSH
76560: PPUSH
76561: PPUSH
76562: PPUSH
76563: PPUSH
76564: PPUSH
// if not unit or not hexes then
76565: LD_VAR 0 1
76569: NOT
76570: IFTRUE 76579
76572: PUSH
76573: LD_VAR 0 2
76577: NOT
76578: OR
76579: IFFALSE 76583
// exit ;
76581: GO 76706
// dist := 9999 ;
76583: LD_ADDR_VAR 0 5
76587: PUSH
76588: LD_INT 9999
76590: ST_TO_ADDR
// for i = 1 to hexes do
76591: LD_ADDR_VAR 0 4
76595: PUSH
76596: DOUBLE
76597: LD_INT 1
76599: DEC
76600: ST_TO_ADDR
76601: LD_VAR 0 2
76605: PUSH
76606: FOR_TO
76607: IFFALSE 76694
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76609: LD_ADDR_VAR 0 6
76613: PUSH
76614: LD_VAR 0 1
76618: PPUSH
76619: LD_VAR 0 2
76623: PUSH
76624: LD_VAR 0 4
76628: ARRAY
76629: PUSH
76630: LD_INT 1
76632: ARRAY
76633: PPUSH
76634: LD_VAR 0 2
76638: PUSH
76639: LD_VAR 0 4
76643: ARRAY
76644: PUSH
76645: LD_INT 2
76647: ARRAY
76648: PPUSH
76649: CALL_OW 297
76653: ST_TO_ADDR
// if tdist < dist then
76654: LD_VAR 0 6
76658: PUSH
76659: LD_VAR 0 5
76663: LESS
76664: IFFALSE 76692
// begin hex := hexes [ i ] ;
76666: LD_ADDR_VAR 0 8
76670: PUSH
76671: LD_VAR 0 2
76675: PUSH
76676: LD_VAR 0 4
76680: ARRAY
76681: ST_TO_ADDR
// dist := tdist ;
76682: LD_ADDR_VAR 0 5
76686: PUSH
76687: LD_VAR 0 6
76691: ST_TO_ADDR
// end ; end ;
76692: GO 76606
76694: POP
76695: POP
// result := hex ;
76696: LD_ADDR_VAR 0 3
76700: PUSH
76701: LD_VAR 0 8
76705: ST_TO_ADDR
// end ;
76706: LD_VAR 0 3
76710: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76711: LD_INT 0
76713: PPUSH
76714: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76715: LD_VAR 0 1
76719: NOT
76720: IFTRUE 76759
76722: PUSH
76723: LD_VAR 0 1
76727: PUSH
76728: LD_INT 21
76730: PUSH
76731: LD_INT 2
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: LD_INT 23
76740: PUSH
76741: LD_INT 2
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: PUSH
76748: EMPTY
76749: LIST
76750: LIST
76751: PPUSH
76752: CALL_OW 69
76756: IN
76757: NOT
76758: OR
76759: IFFALSE 76763
// exit ;
76761: GO 76810
// for i = 1 to 3 do
76763: LD_ADDR_VAR 0 3
76767: PUSH
76768: DOUBLE
76769: LD_INT 1
76771: DEC
76772: ST_TO_ADDR
76773: LD_INT 3
76775: PUSH
76776: FOR_TO
76777: IFFALSE 76808
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76779: LD_VAR 0 1
76783: PPUSH
76784: CALL_OW 250
76788: PPUSH
76789: LD_VAR 0 1
76793: PPUSH
76794: CALL_OW 251
76798: PPUSH
76799: LD_INT 1
76801: PPUSH
76802: CALL_OW 453
76806: GO 76776
76808: POP
76809: POP
// end ;
76810: LD_VAR 0 2
76814: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76815: LD_INT 0
76817: PPUSH
76818: PPUSH
76819: PPUSH
76820: PPUSH
76821: PPUSH
76822: PPUSH
// if not unit or not enemy_unit then
76823: LD_VAR 0 1
76827: NOT
76828: IFTRUE 76837
76830: PUSH
76831: LD_VAR 0 2
76835: NOT
76836: OR
76837: IFFALSE 76841
// exit ;
76839: GO 77322
// if GetLives ( i ) < 250 then
76841: LD_VAR 0 4
76845: PPUSH
76846: CALL_OW 256
76850: PUSH
76851: LD_INT 250
76853: LESS
76854: IFFALSE 76867
// begin ComAutodestruct ( i ) ;
76856: LD_VAR 0 4
76860: PPUSH
76861: CALL 76711 0 1
// exit ;
76865: GO 77322
// end ; x := GetX ( enemy_unit ) ;
76867: LD_ADDR_VAR 0 7
76871: PUSH
76872: LD_VAR 0 2
76876: PPUSH
76877: CALL_OW 250
76881: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76882: LD_ADDR_VAR 0 8
76886: PUSH
76887: LD_VAR 0 2
76891: PPUSH
76892: CALL_OW 251
76896: ST_TO_ADDR
// if not x or not y then
76897: LD_VAR 0 7
76901: NOT
76902: IFTRUE 76911
76904: PUSH
76905: LD_VAR 0 8
76909: NOT
76910: OR
76911: IFFALSE 76915
// exit ;
76913: GO 77322
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76915: LD_ADDR_VAR 0 6
76919: PUSH
76920: LD_VAR 0 7
76924: PPUSH
76925: LD_INT 0
76927: PPUSH
76928: LD_INT 4
76930: PPUSH
76931: CALL_OW 272
76935: PUSH
76936: LD_VAR 0 8
76940: PPUSH
76941: LD_INT 0
76943: PPUSH
76944: LD_INT 4
76946: PPUSH
76947: CALL_OW 273
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: PUSH
76956: LD_VAR 0 7
76960: PPUSH
76961: LD_INT 1
76963: PPUSH
76964: LD_INT 4
76966: PPUSH
76967: CALL_OW 272
76971: PUSH
76972: LD_VAR 0 8
76976: PPUSH
76977: LD_INT 1
76979: PPUSH
76980: LD_INT 4
76982: PPUSH
76983: CALL_OW 273
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PUSH
76992: LD_VAR 0 7
76996: PPUSH
76997: LD_INT 2
76999: PPUSH
77000: LD_INT 4
77002: PPUSH
77003: CALL_OW 272
77007: PUSH
77008: LD_VAR 0 8
77012: PPUSH
77013: LD_INT 2
77015: PPUSH
77016: LD_INT 4
77018: PPUSH
77019: CALL_OW 273
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: PUSH
77028: LD_VAR 0 7
77032: PPUSH
77033: LD_INT 3
77035: PPUSH
77036: LD_INT 4
77038: PPUSH
77039: CALL_OW 272
77043: PUSH
77044: LD_VAR 0 8
77048: PPUSH
77049: LD_INT 3
77051: PPUSH
77052: LD_INT 4
77054: PPUSH
77055: CALL_OW 273
77059: PUSH
77060: EMPTY
77061: LIST
77062: LIST
77063: PUSH
77064: LD_VAR 0 7
77068: PPUSH
77069: LD_INT 4
77071: PPUSH
77072: LD_INT 4
77074: PPUSH
77075: CALL_OW 272
77079: PUSH
77080: LD_VAR 0 8
77084: PPUSH
77085: LD_INT 4
77087: PPUSH
77088: LD_INT 4
77090: PPUSH
77091: CALL_OW 273
77095: PUSH
77096: EMPTY
77097: LIST
77098: LIST
77099: PUSH
77100: LD_VAR 0 7
77104: PPUSH
77105: LD_INT 5
77107: PPUSH
77108: LD_INT 4
77110: PPUSH
77111: CALL_OW 272
77115: PUSH
77116: LD_VAR 0 8
77120: PPUSH
77121: LD_INT 5
77123: PPUSH
77124: LD_INT 4
77126: PPUSH
77127: CALL_OW 273
77131: PUSH
77132: EMPTY
77133: LIST
77134: LIST
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: LIST
77140: LIST
77141: LIST
77142: LIST
77143: ST_TO_ADDR
// for i = tmp downto 1 do
77144: LD_ADDR_VAR 0 4
77148: PUSH
77149: DOUBLE
77150: LD_VAR 0 6
77154: INC
77155: ST_TO_ADDR
77156: LD_INT 1
77158: PUSH
77159: FOR_DOWNTO
77160: IFFALSE 77263
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77162: LD_VAR 0 6
77166: PUSH
77167: LD_VAR 0 4
77171: ARRAY
77172: PUSH
77173: LD_INT 1
77175: ARRAY
77176: PPUSH
77177: LD_VAR 0 6
77181: PUSH
77182: LD_VAR 0 4
77186: ARRAY
77187: PUSH
77188: LD_INT 2
77190: ARRAY
77191: PPUSH
77192: CALL_OW 488
77196: NOT
77197: IFTRUE 77239
77199: PUSH
77200: LD_VAR 0 6
77204: PUSH
77205: LD_VAR 0 4
77209: ARRAY
77210: PUSH
77211: LD_INT 1
77213: ARRAY
77214: PPUSH
77215: LD_VAR 0 6
77219: PUSH
77220: LD_VAR 0 4
77224: ARRAY
77225: PUSH
77226: LD_INT 2
77228: ARRAY
77229: PPUSH
77230: CALL_OW 428
77234: PUSH
77235: LD_INT 0
77237: NONEQUAL
77238: OR
77239: IFFALSE 77261
// tmp := Delete ( tmp , i ) ;
77241: LD_ADDR_VAR 0 6
77245: PUSH
77246: LD_VAR 0 6
77250: PPUSH
77251: LD_VAR 0 4
77255: PPUSH
77256: CALL_OW 3
77260: ST_TO_ADDR
77261: GO 77159
77263: POP
77264: POP
// j := GetClosestHex ( unit , tmp ) ;
77265: LD_ADDR_VAR 0 5
77269: PUSH
77270: LD_VAR 0 1
77274: PPUSH
77275: LD_VAR 0 6
77279: PPUSH
77280: CALL 76557 0 2
77284: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77285: LD_VAR 0 1
77289: PPUSH
77290: LD_VAR 0 5
77294: PUSH
77295: LD_INT 1
77297: ARRAY
77298: PPUSH
77299: LD_VAR 0 5
77303: PUSH
77304: LD_INT 2
77306: ARRAY
77307: PPUSH
77308: CALL_OW 111
// result := j ;
77312: LD_ADDR_VAR 0 3
77316: PUSH
77317: LD_VAR 0 5
77321: ST_TO_ADDR
// end ;
77322: LD_VAR 0 3
77326: RET
// export function PrepareApemanSoldier ( ) ; begin
77327: LD_INT 0
77329: PPUSH
// uc_nation := 0 ;
77330: LD_ADDR_OWVAR 21
77334: PUSH
77335: LD_INT 0
77337: ST_TO_ADDR
// hc_sex := sex_male ;
77338: LD_ADDR_OWVAR 27
77342: PUSH
77343: LD_INT 1
77345: ST_TO_ADDR
// hc_name :=  ;
77346: LD_ADDR_OWVAR 26
77350: PUSH
77351: LD_STRING 
77353: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77354: LD_ADDR_OWVAR 28
77358: PUSH
77359: LD_INT 15
77361: ST_TO_ADDR
// hc_gallery :=  ;
77362: LD_ADDR_OWVAR 33
77366: PUSH
77367: LD_STRING 
77369: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77370: LD_ADDR_OWVAR 31
77374: PUSH
77375: LD_INT 0
77377: PPUSH
77378: LD_INT 3
77380: PPUSH
77381: CALL_OW 12
77385: PUSH
77386: LD_INT 0
77388: PPUSH
77389: LD_INT 3
77391: PPUSH
77392: CALL_OW 12
77396: PUSH
77397: LD_INT 0
77399: PUSH
77400: LD_INT 0
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: LIST
77407: LIST
77408: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
77409: LD_ADDR_OWVAR 29
77413: PUSH
77414: LD_INT 10
77416: PUSH
77417: LD_INT 12
77419: PUSH
77420: EMPTY
77421: LIST
77422: LIST
77423: ST_TO_ADDR
// end ;
77424: LD_VAR 0 1
77428: RET
// export function PrepareApemanEngineer ( ) ; begin
77429: LD_INT 0
77431: PPUSH
// uc_nation := 0 ;
77432: LD_ADDR_OWVAR 21
77436: PUSH
77437: LD_INT 0
77439: ST_TO_ADDR
// hc_sex := sex_male ;
77440: LD_ADDR_OWVAR 27
77444: PUSH
77445: LD_INT 1
77447: ST_TO_ADDR
// hc_name :=  ;
77448: LD_ADDR_OWVAR 26
77452: PUSH
77453: LD_STRING 
77455: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77456: LD_ADDR_OWVAR 28
77460: PUSH
77461: LD_INT 16
77463: ST_TO_ADDR
// hc_gallery :=  ;
77464: LD_ADDR_OWVAR 33
77468: PUSH
77469: LD_STRING 
77471: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77472: LD_ADDR_OWVAR 31
77476: PUSH
77477: LD_INT 0
77479: PPUSH
77480: LD_INT 3
77482: PPUSH
77483: CALL_OW 12
77487: PUSH
77488: LD_INT 0
77490: PPUSH
77491: LD_INT 3
77493: PPUSH
77494: CALL_OW 12
77498: PUSH
77499: LD_INT 0
77501: PUSH
77502: LD_INT 0
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: LIST
77509: LIST
77510: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
77511: LD_ADDR_OWVAR 29
77515: PUSH
77516: LD_INT 10
77518: PUSH
77519: LD_INT 12
77521: PUSH
77522: EMPTY
77523: LIST
77524: LIST
77525: ST_TO_ADDR
// end ;
77526: LD_VAR 0 1
77530: RET
// export function PrepareApeman ( agressivity ) ; begin
77531: LD_INT 0
77533: PPUSH
// uc_side := 0 ;
77534: LD_ADDR_OWVAR 20
77538: PUSH
77539: LD_INT 0
77541: ST_TO_ADDR
// uc_nation := 0 ;
77542: LD_ADDR_OWVAR 21
77546: PUSH
77547: LD_INT 0
77549: ST_TO_ADDR
// hc_sex := sex_male ;
77550: LD_ADDR_OWVAR 27
77554: PUSH
77555: LD_INT 1
77557: ST_TO_ADDR
// hc_class := class_apeman ;
77558: LD_ADDR_OWVAR 28
77562: PUSH
77563: LD_INT 12
77565: ST_TO_ADDR
// hc_gallery :=  ;
77566: LD_ADDR_OWVAR 33
77570: PUSH
77571: LD_STRING 
77573: ST_TO_ADDR
// hc_name :=  ;
77574: LD_ADDR_OWVAR 26
77578: PUSH
77579: LD_STRING 
77581: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
77582: LD_ADDR_OWVAR 29
77586: PUSH
77587: LD_INT 10
77589: PUSH
77590: LD_INT 12
77592: PUSH
77593: EMPTY
77594: LIST
77595: LIST
77596: ST_TO_ADDR
// if agressivity = 0 then
77597: LD_VAR 0 1
77601: PUSH
77602: LD_INT 0
77604: EQUAL
77605: IFFALSE 77617
// hc_agressivity := 0 else
77607: LD_ADDR_OWVAR 35
77611: PUSH
77612: LD_INT 0
77614: ST_TO_ADDR
77615: GO 77638
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77617: LD_ADDR_OWVAR 35
77621: PUSH
77622: LD_VAR 0 1
77626: NEG
77627: PPUSH
77628: LD_VAR 0 1
77632: PPUSH
77633: CALL_OW 12
77637: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77638: LD_ADDR_OWVAR 31
77642: PUSH
77643: LD_INT 0
77645: PPUSH
77646: LD_INT 3
77648: PPUSH
77649: CALL_OW 12
77653: PUSH
77654: LD_INT 0
77656: PPUSH
77657: LD_INT 3
77659: PPUSH
77660: CALL_OW 12
77664: PUSH
77665: LD_INT 0
77667: PUSH
77668: LD_INT 0
77670: PUSH
77671: EMPTY
77672: LIST
77673: LIST
77674: LIST
77675: LIST
77676: ST_TO_ADDR
// end ;
77677: LD_VAR 0 2
77681: RET
// export function PrepareTiger ( agressivity ) ; begin
77682: LD_INT 0
77684: PPUSH
// uc_side := 0 ;
77685: LD_ADDR_OWVAR 20
77689: PUSH
77690: LD_INT 0
77692: ST_TO_ADDR
// uc_nation := 0 ;
77693: LD_ADDR_OWVAR 21
77697: PUSH
77698: LD_INT 0
77700: ST_TO_ADDR
// InitHc ;
77701: CALL_OW 19
// hc_class := class_tiger ;
77705: LD_ADDR_OWVAR 28
77709: PUSH
77710: LD_INT 14
77712: ST_TO_ADDR
// hc_gallery :=  ;
77713: LD_ADDR_OWVAR 33
77717: PUSH
77718: LD_STRING 
77720: ST_TO_ADDR
// hc_name :=  ;
77721: LD_ADDR_OWVAR 26
77725: PUSH
77726: LD_STRING 
77728: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77729: LD_ADDR_OWVAR 35
77733: PUSH
77734: LD_VAR 0 1
77738: NEG
77739: PPUSH
77740: LD_VAR 0 1
77744: PPUSH
77745: CALL_OW 12
77749: ST_TO_ADDR
// end ;
77750: LD_VAR 0 2
77754: RET
// export function PrepareEnchidna ( ) ; begin
77755: LD_INT 0
77757: PPUSH
// uc_side := 0 ;
77758: LD_ADDR_OWVAR 20
77762: PUSH
77763: LD_INT 0
77765: ST_TO_ADDR
// uc_nation := 0 ;
77766: LD_ADDR_OWVAR 21
77770: PUSH
77771: LD_INT 0
77773: ST_TO_ADDR
// InitHc ;
77774: CALL_OW 19
// hc_class := class_baggie ;
77778: LD_ADDR_OWVAR 28
77782: PUSH
77783: LD_INT 13
77785: ST_TO_ADDR
// hc_gallery :=  ;
77786: LD_ADDR_OWVAR 33
77790: PUSH
77791: LD_STRING 
77793: ST_TO_ADDR
// hc_name :=  ;
77794: LD_ADDR_OWVAR 26
77798: PUSH
77799: LD_STRING 
77801: ST_TO_ADDR
// end ;
77802: LD_VAR 0 1
77806: RET
// export function PrepareFrog ( ) ; begin
77807: LD_INT 0
77809: PPUSH
// uc_side := 0 ;
77810: LD_ADDR_OWVAR 20
77814: PUSH
77815: LD_INT 0
77817: ST_TO_ADDR
// uc_nation := 0 ;
77818: LD_ADDR_OWVAR 21
77822: PUSH
77823: LD_INT 0
77825: ST_TO_ADDR
// InitHc ;
77826: CALL_OW 19
// hc_class := class_frog ;
77830: LD_ADDR_OWVAR 28
77834: PUSH
77835: LD_INT 19
77837: ST_TO_ADDR
// hc_gallery :=  ;
77838: LD_ADDR_OWVAR 33
77842: PUSH
77843: LD_STRING 
77845: ST_TO_ADDR
// hc_name :=  ;
77846: LD_ADDR_OWVAR 26
77850: PUSH
77851: LD_STRING 
77853: ST_TO_ADDR
// end ;
77854: LD_VAR 0 1
77858: RET
// export function PrepareFish ( ) ; begin
77859: LD_INT 0
77861: PPUSH
// uc_side := 0 ;
77862: LD_ADDR_OWVAR 20
77866: PUSH
77867: LD_INT 0
77869: ST_TO_ADDR
// uc_nation := 0 ;
77870: LD_ADDR_OWVAR 21
77874: PUSH
77875: LD_INT 0
77877: ST_TO_ADDR
// InitHc ;
77878: CALL_OW 19
// hc_class := class_fish ;
77882: LD_ADDR_OWVAR 28
77886: PUSH
77887: LD_INT 20
77889: ST_TO_ADDR
// hc_gallery :=  ;
77890: LD_ADDR_OWVAR 33
77894: PUSH
77895: LD_STRING 
77897: ST_TO_ADDR
// hc_name :=  ;
77898: LD_ADDR_OWVAR 26
77902: PUSH
77903: LD_STRING 
77905: ST_TO_ADDR
// end ;
77906: LD_VAR 0 1
77910: RET
// export function PrepareBird ( ) ; begin
77911: LD_INT 0
77913: PPUSH
// uc_side := 0 ;
77914: LD_ADDR_OWVAR 20
77918: PUSH
77919: LD_INT 0
77921: ST_TO_ADDR
// uc_nation := 0 ;
77922: LD_ADDR_OWVAR 21
77926: PUSH
77927: LD_INT 0
77929: ST_TO_ADDR
// InitHc ;
77930: CALL_OW 19
// hc_class := class_phororhacos ;
77934: LD_ADDR_OWVAR 28
77938: PUSH
77939: LD_INT 18
77941: ST_TO_ADDR
// hc_gallery :=  ;
77942: LD_ADDR_OWVAR 33
77946: PUSH
77947: LD_STRING 
77949: ST_TO_ADDR
// hc_name :=  ;
77950: LD_ADDR_OWVAR 26
77954: PUSH
77955: LD_STRING 
77957: ST_TO_ADDR
// end ;
77958: LD_VAR 0 1
77962: RET
// export function PrepareHorse ( ) ; begin
77963: LD_INT 0
77965: PPUSH
// uc_side := 0 ;
77966: LD_ADDR_OWVAR 20
77970: PUSH
77971: LD_INT 0
77973: ST_TO_ADDR
// uc_nation := 0 ;
77974: LD_ADDR_OWVAR 21
77978: PUSH
77979: LD_INT 0
77981: ST_TO_ADDR
// InitHc ;
77982: CALL_OW 19
// hc_class := class_horse ;
77986: LD_ADDR_OWVAR 28
77990: PUSH
77991: LD_INT 21
77993: ST_TO_ADDR
// hc_gallery :=  ;
77994: LD_ADDR_OWVAR 33
77998: PUSH
77999: LD_STRING 
78001: ST_TO_ADDR
// hc_name :=  ;
78002: LD_ADDR_OWVAR 26
78006: PUSH
78007: LD_STRING 
78009: ST_TO_ADDR
// end ;
78010: LD_VAR 0 1
78014: RET
// export function PrepareMastodont ( ) ; begin
78015: LD_INT 0
78017: PPUSH
// uc_side := 0 ;
78018: LD_ADDR_OWVAR 20
78022: PUSH
78023: LD_INT 0
78025: ST_TO_ADDR
// uc_nation := 0 ;
78026: LD_ADDR_OWVAR 21
78030: PUSH
78031: LD_INT 0
78033: ST_TO_ADDR
// vc_chassis := class_mastodont ;
78034: LD_ADDR_OWVAR 37
78038: PUSH
78039: LD_INT 31
78041: ST_TO_ADDR
// vc_control := control_rider ;
78042: LD_ADDR_OWVAR 38
78046: PUSH
78047: LD_INT 4
78049: ST_TO_ADDR
// end ;
78050: LD_VAR 0 1
78054: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78055: LD_INT 0
78057: PPUSH
78058: PPUSH
78059: PPUSH
// uc_side = 0 ;
78060: LD_ADDR_OWVAR 20
78064: PUSH
78065: LD_INT 0
78067: ST_TO_ADDR
// uc_nation = 0 ;
78068: LD_ADDR_OWVAR 21
78072: PUSH
78073: LD_INT 0
78075: ST_TO_ADDR
// InitHc_All ( ) ;
78076: CALL_OW 584
// InitVc ;
78080: CALL_OW 20
// if mastodonts then
78084: LD_VAR 0 6
78088: IFFALSE 78155
// for i = 1 to mastodonts do
78090: LD_ADDR_VAR 0 11
78094: PUSH
78095: DOUBLE
78096: LD_INT 1
78098: DEC
78099: ST_TO_ADDR
78100: LD_VAR 0 6
78104: PUSH
78105: FOR_TO
78106: IFFALSE 78153
// begin vc_chassis := 31 ;
78108: LD_ADDR_OWVAR 37
78112: PUSH
78113: LD_INT 31
78115: ST_TO_ADDR
// vc_control := control_rider ;
78116: LD_ADDR_OWVAR 38
78120: PUSH
78121: LD_INT 4
78123: ST_TO_ADDR
// animal := CreateVehicle ;
78124: LD_ADDR_VAR 0 12
78128: PUSH
78129: CALL_OW 45
78133: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78134: LD_VAR 0 12
78138: PPUSH
78139: LD_VAR 0 8
78143: PPUSH
78144: LD_INT 0
78146: PPUSH
78147: CALL 80297 0 3
// end ;
78151: GO 78105
78153: POP
78154: POP
// if horses then
78155: LD_VAR 0 5
78159: IFFALSE 78226
// for i = 1 to horses do
78161: LD_ADDR_VAR 0 11
78165: PUSH
78166: DOUBLE
78167: LD_INT 1
78169: DEC
78170: ST_TO_ADDR
78171: LD_VAR 0 5
78175: PUSH
78176: FOR_TO
78177: IFFALSE 78224
// begin hc_class := 21 ;
78179: LD_ADDR_OWVAR 28
78183: PUSH
78184: LD_INT 21
78186: ST_TO_ADDR
// hc_gallery :=  ;
78187: LD_ADDR_OWVAR 33
78191: PUSH
78192: LD_STRING 
78194: ST_TO_ADDR
// animal := CreateHuman ;
78195: LD_ADDR_VAR 0 12
78199: PUSH
78200: CALL_OW 44
78204: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78205: LD_VAR 0 12
78209: PPUSH
78210: LD_VAR 0 8
78214: PPUSH
78215: LD_INT 0
78217: PPUSH
78218: CALL 80297 0 3
// end ;
78222: GO 78176
78224: POP
78225: POP
// if birds then
78226: LD_VAR 0 1
78230: IFFALSE 78297
// for i = 1 to birds do
78232: LD_ADDR_VAR 0 11
78236: PUSH
78237: DOUBLE
78238: LD_INT 1
78240: DEC
78241: ST_TO_ADDR
78242: LD_VAR 0 1
78246: PUSH
78247: FOR_TO
78248: IFFALSE 78295
// begin hc_class := 18 ;
78250: LD_ADDR_OWVAR 28
78254: PUSH
78255: LD_INT 18
78257: ST_TO_ADDR
// hc_gallery =  ;
78258: LD_ADDR_OWVAR 33
78262: PUSH
78263: LD_STRING 
78265: ST_TO_ADDR
// animal := CreateHuman ;
78266: LD_ADDR_VAR 0 12
78270: PUSH
78271: CALL_OW 44
78275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78276: LD_VAR 0 12
78280: PPUSH
78281: LD_VAR 0 8
78285: PPUSH
78286: LD_INT 0
78288: PPUSH
78289: CALL 80297 0 3
// end ;
78293: GO 78247
78295: POP
78296: POP
// if tigers then
78297: LD_VAR 0 2
78301: IFFALSE 78385
// for i = 1 to tigers do
78303: LD_ADDR_VAR 0 11
78307: PUSH
78308: DOUBLE
78309: LD_INT 1
78311: DEC
78312: ST_TO_ADDR
78313: LD_VAR 0 2
78317: PUSH
78318: FOR_TO
78319: IFFALSE 78383
// begin hc_class = class_tiger ;
78321: LD_ADDR_OWVAR 28
78325: PUSH
78326: LD_INT 14
78328: ST_TO_ADDR
// hc_gallery =  ;
78329: LD_ADDR_OWVAR 33
78333: PUSH
78334: LD_STRING 
78336: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78337: LD_ADDR_OWVAR 35
78341: PUSH
78342: LD_INT 7
78344: NEG
78345: PPUSH
78346: LD_INT 7
78348: PPUSH
78349: CALL_OW 12
78353: ST_TO_ADDR
// animal := CreateHuman ;
78354: LD_ADDR_VAR 0 12
78358: PUSH
78359: CALL_OW 44
78363: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78364: LD_VAR 0 12
78368: PPUSH
78369: LD_VAR 0 8
78373: PPUSH
78374: LD_INT 0
78376: PPUSH
78377: CALL 80297 0 3
// end ;
78381: GO 78318
78383: POP
78384: POP
// if apemans then
78385: LD_VAR 0 3
78389: IFFALSE 78512
// for i = 1 to apemans do
78391: LD_ADDR_VAR 0 11
78395: PUSH
78396: DOUBLE
78397: LD_INT 1
78399: DEC
78400: ST_TO_ADDR
78401: LD_VAR 0 3
78405: PUSH
78406: FOR_TO
78407: IFFALSE 78510
// begin hc_class = class_apeman ;
78409: LD_ADDR_OWVAR 28
78413: PUSH
78414: LD_INT 12
78416: ST_TO_ADDR
// hc_gallery =  ;
78417: LD_ADDR_OWVAR 33
78421: PUSH
78422: LD_STRING 
78424: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78425: LD_ADDR_OWVAR 35
78429: PUSH
78430: LD_INT 2
78432: NEG
78433: PPUSH
78434: LD_INT 2
78436: PPUSH
78437: CALL_OW 12
78441: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78442: LD_ADDR_OWVAR 31
78446: PUSH
78447: LD_INT 1
78449: PPUSH
78450: LD_INT 3
78452: PPUSH
78453: CALL_OW 12
78457: PUSH
78458: LD_INT 1
78460: PPUSH
78461: LD_INT 3
78463: PPUSH
78464: CALL_OW 12
78468: PUSH
78469: LD_INT 0
78471: PUSH
78472: LD_INT 0
78474: PUSH
78475: EMPTY
78476: LIST
78477: LIST
78478: LIST
78479: LIST
78480: ST_TO_ADDR
// animal := CreateHuman ;
78481: LD_ADDR_VAR 0 12
78485: PUSH
78486: CALL_OW 44
78490: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78491: LD_VAR 0 12
78495: PPUSH
78496: LD_VAR 0 8
78500: PPUSH
78501: LD_INT 0
78503: PPUSH
78504: CALL 80297 0 3
// end ;
78508: GO 78406
78510: POP
78511: POP
// if enchidnas then
78512: LD_VAR 0 4
78516: IFFALSE 78583
// for i = 1 to enchidnas do
78518: LD_ADDR_VAR 0 11
78522: PUSH
78523: DOUBLE
78524: LD_INT 1
78526: DEC
78527: ST_TO_ADDR
78528: LD_VAR 0 4
78532: PUSH
78533: FOR_TO
78534: IFFALSE 78581
// begin hc_class = 13 ;
78536: LD_ADDR_OWVAR 28
78540: PUSH
78541: LD_INT 13
78543: ST_TO_ADDR
// hc_gallery =  ;
78544: LD_ADDR_OWVAR 33
78548: PUSH
78549: LD_STRING 
78551: ST_TO_ADDR
// animal := CreateHuman ;
78552: LD_ADDR_VAR 0 12
78556: PUSH
78557: CALL_OW 44
78561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78562: LD_VAR 0 12
78566: PPUSH
78567: LD_VAR 0 8
78571: PPUSH
78572: LD_INT 0
78574: PPUSH
78575: CALL 80297 0 3
// end ;
78579: GO 78533
78581: POP
78582: POP
// if fishes then
78583: LD_VAR 0 7
78587: IFFALSE 78654
// for i = 1 to fishes do
78589: LD_ADDR_VAR 0 11
78593: PUSH
78594: DOUBLE
78595: LD_INT 1
78597: DEC
78598: ST_TO_ADDR
78599: LD_VAR 0 7
78603: PUSH
78604: FOR_TO
78605: IFFALSE 78652
// begin hc_class = 20 ;
78607: LD_ADDR_OWVAR 28
78611: PUSH
78612: LD_INT 20
78614: ST_TO_ADDR
// hc_gallery =  ;
78615: LD_ADDR_OWVAR 33
78619: PUSH
78620: LD_STRING 
78622: ST_TO_ADDR
// animal := CreateHuman ;
78623: LD_ADDR_VAR 0 12
78627: PUSH
78628: CALL_OW 44
78632: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78633: LD_VAR 0 12
78637: PPUSH
78638: LD_VAR 0 9
78642: PPUSH
78643: LD_INT 0
78645: PPUSH
78646: CALL 80297 0 3
// end ;
78650: GO 78604
78652: POP
78653: POP
// end ;
78654: LD_VAR 0 10
78658: RET
// export function WantHeal ( sci , unit ) ; begin
78659: LD_INT 0
78661: PPUSH
// if GetTaskList ( sci ) > 0 then
78662: LD_VAR 0 1
78666: PPUSH
78667: CALL_OW 437
78671: PUSH
78672: LD_INT 0
78674: GREATER
78675: IFFALSE 78747
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78677: LD_VAR 0 1
78681: PPUSH
78682: CALL_OW 437
78686: PUSH
78687: LD_INT 1
78689: ARRAY
78690: PUSH
78691: LD_INT 1
78693: ARRAY
78694: PUSH
78695: LD_STRING l
78697: EQUAL
78698: IFFALSE 78725
78700: PUSH
78701: LD_VAR 0 1
78705: PPUSH
78706: CALL_OW 437
78710: PUSH
78711: LD_INT 1
78713: ARRAY
78714: PUSH
78715: LD_INT 4
78717: ARRAY
78718: PUSH
78719: LD_VAR 0 2
78723: EQUAL
78724: AND
78725: IFFALSE 78737
// result := true else
78727: LD_ADDR_VAR 0 3
78731: PUSH
78732: LD_INT 1
78734: ST_TO_ADDR
78735: GO 78745
// result := false ;
78737: LD_ADDR_VAR 0 3
78741: PUSH
78742: LD_INT 0
78744: ST_TO_ADDR
// end else
78745: GO 78755
// result := false ;
78747: LD_ADDR_VAR 0 3
78751: PUSH
78752: LD_INT 0
78754: ST_TO_ADDR
// end ;
78755: LD_VAR 0 3
78759: RET
// export function HealTarget ( sci ) ; begin
78760: LD_INT 0
78762: PPUSH
// if not sci then
78763: LD_VAR 0 1
78767: NOT
78768: IFFALSE 78772
// exit ;
78770: GO 78837
// result := 0 ;
78772: LD_ADDR_VAR 0 2
78776: PUSH
78777: LD_INT 0
78779: ST_TO_ADDR
// if GetTaskList ( sci ) then
78780: LD_VAR 0 1
78784: PPUSH
78785: CALL_OW 437
78789: IFFALSE 78837
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78791: LD_VAR 0 1
78795: PPUSH
78796: CALL_OW 437
78800: PUSH
78801: LD_INT 1
78803: ARRAY
78804: PUSH
78805: LD_INT 1
78807: ARRAY
78808: PUSH
78809: LD_STRING l
78811: EQUAL
78812: IFFALSE 78837
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78814: LD_ADDR_VAR 0 2
78818: PUSH
78819: LD_VAR 0 1
78823: PPUSH
78824: CALL_OW 437
78828: PUSH
78829: LD_INT 1
78831: ARRAY
78832: PUSH
78833: LD_INT 4
78835: ARRAY
78836: ST_TO_ADDR
// end ;
78837: LD_VAR 0 2
78841: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78842: LD_INT 0
78844: PPUSH
78845: PPUSH
78846: PPUSH
78847: PPUSH
// if not base_units then
78848: LD_VAR 0 1
78852: NOT
78853: IFFALSE 78857
// exit ;
78855: GO 78944
// result := false ;
78857: LD_ADDR_VAR 0 2
78861: PUSH
78862: LD_INT 0
78864: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78865: LD_ADDR_VAR 0 5
78869: PUSH
78870: LD_VAR 0 1
78874: PPUSH
78875: LD_INT 21
78877: PUSH
78878: LD_INT 3
78880: PUSH
78881: EMPTY
78882: LIST
78883: LIST
78884: PPUSH
78885: CALL_OW 72
78889: ST_TO_ADDR
// if not tmp then
78890: LD_VAR 0 5
78894: NOT
78895: IFFALSE 78899
// exit ;
78897: GO 78944
// for i in tmp do
78899: LD_ADDR_VAR 0 3
78903: PUSH
78904: LD_VAR 0 5
78908: PUSH
78909: FOR_IN
78910: IFFALSE 78942
// begin result := EnemyInRange ( i , 22 ) ;
78912: LD_ADDR_VAR 0 2
78916: PUSH
78917: LD_VAR 0 3
78921: PPUSH
78922: LD_INT 22
78924: PPUSH
78925: CALL 76359 0 2
78929: ST_TO_ADDR
// if result then
78930: LD_VAR 0 2
78934: IFFALSE 78940
// exit ;
78936: POP
78937: POP
78938: GO 78944
// end ;
78940: GO 78909
78942: POP
78943: POP
// end ;
78944: LD_VAR 0 2
78948: RET
// export function FilterByTag ( units , tag ) ; begin
78949: LD_INT 0
78951: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78952: LD_ADDR_VAR 0 3
78956: PUSH
78957: LD_VAR 0 1
78961: PPUSH
78962: LD_INT 120
78964: PUSH
78965: LD_VAR 0 2
78969: PUSH
78970: EMPTY
78971: LIST
78972: LIST
78973: PPUSH
78974: CALL_OW 72
78978: ST_TO_ADDR
// end ;
78979: LD_VAR 0 3
78983: RET
// export function IsDriver ( un ) ; begin
78984: LD_INT 0
78986: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78987: LD_ADDR_VAR 0 2
78991: PUSH
78992: LD_VAR 0 1
78996: PUSH
78997: LD_INT 55
78999: PUSH
79000: EMPTY
79001: LIST
79002: PPUSH
79003: CALL_OW 69
79007: IN
79008: ST_TO_ADDR
// end ;
79009: LD_VAR 0 2
79013: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
79014: LD_INT 0
79016: PPUSH
79017: PPUSH
// list := [ ] ;
79018: LD_ADDR_VAR 0 5
79022: PUSH
79023: EMPTY
79024: ST_TO_ADDR
// case d of 0 :
79025: LD_VAR 0 3
79029: PUSH
79030: LD_INT 0
79032: DOUBLE
79033: EQUAL
79034: IFTRUE 79038
79036: GO 79171
79038: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
79039: LD_ADDR_VAR 0 5
79043: PUSH
79044: LD_VAR 0 1
79048: PUSH
79049: LD_INT 4
79051: MINUS
79052: PUSH
79053: LD_VAR 0 2
79057: PUSH
79058: LD_INT 4
79060: MINUS
79061: PUSH
79062: LD_INT 2
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: LIST
79069: PUSH
79070: LD_VAR 0 1
79074: PUSH
79075: LD_INT 3
79077: MINUS
79078: PUSH
79079: LD_VAR 0 2
79083: PUSH
79084: LD_INT 1
79086: PUSH
79087: EMPTY
79088: LIST
79089: LIST
79090: LIST
79091: PUSH
79092: LD_VAR 0 1
79096: PUSH
79097: LD_INT 4
79099: PLUS
79100: PUSH
79101: LD_VAR 0 2
79105: PUSH
79106: LD_INT 4
79108: PUSH
79109: EMPTY
79110: LIST
79111: LIST
79112: LIST
79113: PUSH
79114: LD_VAR 0 1
79118: PUSH
79119: LD_INT 3
79121: PLUS
79122: PUSH
79123: LD_VAR 0 2
79127: PUSH
79128: LD_INT 3
79130: PLUS
79131: PUSH
79132: LD_INT 5
79134: PUSH
79135: EMPTY
79136: LIST
79137: LIST
79138: LIST
79139: PUSH
79140: LD_VAR 0 1
79144: PUSH
79145: LD_VAR 0 2
79149: PUSH
79150: LD_INT 4
79152: PLUS
79153: PUSH
79154: LD_INT 0
79156: PUSH
79157: EMPTY
79158: LIST
79159: LIST
79160: LIST
79161: PUSH
79162: EMPTY
79163: LIST
79164: LIST
79165: LIST
79166: LIST
79167: LIST
79168: ST_TO_ADDR
// end ; 1 :
79169: GO 79869
79171: LD_INT 1
79173: DOUBLE
79174: EQUAL
79175: IFTRUE 79179
79177: GO 79312
79179: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79180: LD_ADDR_VAR 0 5
79184: PUSH
79185: LD_VAR 0 1
79189: PUSH
79190: LD_VAR 0 2
79194: PUSH
79195: LD_INT 4
79197: MINUS
79198: PUSH
79199: LD_INT 3
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: LIST
79206: PUSH
79207: LD_VAR 0 1
79211: PUSH
79212: LD_INT 3
79214: MINUS
79215: PUSH
79216: LD_VAR 0 2
79220: PUSH
79221: LD_INT 3
79223: MINUS
79224: PUSH
79225: LD_INT 2
79227: PUSH
79228: EMPTY
79229: LIST
79230: LIST
79231: LIST
79232: PUSH
79233: LD_VAR 0 1
79237: PUSH
79238: LD_INT 4
79240: MINUS
79241: PUSH
79242: LD_VAR 0 2
79246: PUSH
79247: LD_INT 1
79249: PUSH
79250: EMPTY
79251: LIST
79252: LIST
79253: LIST
79254: PUSH
79255: LD_VAR 0 1
79259: PUSH
79260: LD_VAR 0 2
79264: PUSH
79265: LD_INT 3
79267: PLUS
79268: PUSH
79269: LD_INT 0
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: LIST
79276: PUSH
79277: LD_VAR 0 1
79281: PUSH
79282: LD_INT 4
79284: PLUS
79285: PUSH
79286: LD_VAR 0 2
79290: PUSH
79291: LD_INT 4
79293: PLUS
79294: PUSH
79295: LD_INT 5
79297: PUSH
79298: EMPTY
79299: LIST
79300: LIST
79301: LIST
79302: PUSH
79303: EMPTY
79304: LIST
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: ST_TO_ADDR
// end ; 2 :
79310: GO 79869
79312: LD_INT 2
79314: DOUBLE
79315: EQUAL
79316: IFTRUE 79320
79318: GO 79449
79320: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79321: LD_ADDR_VAR 0 5
79325: PUSH
79326: LD_VAR 0 1
79330: PUSH
79331: LD_VAR 0 2
79335: PUSH
79336: LD_INT 3
79338: MINUS
79339: PUSH
79340: LD_INT 3
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: LIST
79347: PUSH
79348: LD_VAR 0 1
79352: PUSH
79353: LD_INT 4
79355: PLUS
79356: PUSH
79357: LD_VAR 0 2
79361: PUSH
79362: LD_INT 4
79364: PUSH
79365: EMPTY
79366: LIST
79367: LIST
79368: LIST
79369: PUSH
79370: LD_VAR 0 1
79374: PUSH
79375: LD_VAR 0 2
79379: PUSH
79380: LD_INT 4
79382: PLUS
79383: PUSH
79384: LD_INT 0
79386: PUSH
79387: EMPTY
79388: LIST
79389: LIST
79390: LIST
79391: PUSH
79392: LD_VAR 0 1
79396: PUSH
79397: LD_INT 3
79399: MINUS
79400: PUSH
79401: LD_VAR 0 2
79405: PUSH
79406: LD_INT 1
79408: PUSH
79409: EMPTY
79410: LIST
79411: LIST
79412: LIST
79413: PUSH
79414: LD_VAR 0 1
79418: PUSH
79419: LD_INT 4
79421: MINUS
79422: PUSH
79423: LD_VAR 0 2
79427: PUSH
79428: LD_INT 4
79430: MINUS
79431: PUSH
79432: LD_INT 2
79434: PUSH
79435: EMPTY
79436: LIST
79437: LIST
79438: LIST
79439: PUSH
79440: EMPTY
79441: LIST
79442: LIST
79443: LIST
79444: LIST
79445: LIST
79446: ST_TO_ADDR
// end ; 3 :
79447: GO 79869
79449: LD_INT 3
79451: DOUBLE
79452: EQUAL
79453: IFTRUE 79457
79455: GO 79590
79457: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79458: LD_ADDR_VAR 0 5
79462: PUSH
79463: LD_VAR 0 1
79467: PUSH
79468: LD_INT 3
79470: PLUS
79471: PUSH
79472: LD_VAR 0 2
79476: PUSH
79477: LD_INT 4
79479: PUSH
79480: EMPTY
79481: LIST
79482: LIST
79483: LIST
79484: PUSH
79485: LD_VAR 0 1
79489: PUSH
79490: LD_INT 4
79492: PLUS
79493: PUSH
79494: LD_VAR 0 2
79498: PUSH
79499: LD_INT 4
79501: PLUS
79502: PUSH
79503: LD_INT 5
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: LIST
79510: PUSH
79511: LD_VAR 0 1
79515: PUSH
79516: LD_INT 4
79518: MINUS
79519: PUSH
79520: LD_VAR 0 2
79524: PUSH
79525: LD_INT 1
79527: PUSH
79528: EMPTY
79529: LIST
79530: LIST
79531: LIST
79532: PUSH
79533: LD_VAR 0 1
79537: PUSH
79538: LD_VAR 0 2
79542: PUSH
79543: LD_INT 4
79545: MINUS
79546: PUSH
79547: LD_INT 3
79549: PUSH
79550: EMPTY
79551: LIST
79552: LIST
79553: LIST
79554: PUSH
79555: LD_VAR 0 1
79559: PUSH
79560: LD_INT 3
79562: MINUS
79563: PUSH
79564: LD_VAR 0 2
79568: PUSH
79569: LD_INT 3
79571: MINUS
79572: PUSH
79573: LD_INT 2
79575: PUSH
79576: EMPTY
79577: LIST
79578: LIST
79579: LIST
79580: PUSH
79581: EMPTY
79582: LIST
79583: LIST
79584: LIST
79585: LIST
79586: LIST
79587: ST_TO_ADDR
// end ; 4 :
79588: GO 79869
79590: LD_INT 4
79592: DOUBLE
79593: EQUAL
79594: IFTRUE 79598
79596: GO 79731
79598: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79599: LD_ADDR_VAR 0 5
79603: PUSH
79604: LD_VAR 0 1
79608: PUSH
79609: LD_VAR 0 2
79613: PUSH
79614: LD_INT 4
79616: PLUS
79617: PUSH
79618: LD_INT 0
79620: PUSH
79621: EMPTY
79622: LIST
79623: LIST
79624: LIST
79625: PUSH
79626: LD_VAR 0 1
79630: PUSH
79631: LD_INT 3
79633: PLUS
79634: PUSH
79635: LD_VAR 0 2
79639: PUSH
79640: LD_INT 3
79642: PLUS
79643: PUSH
79644: LD_INT 5
79646: PUSH
79647: EMPTY
79648: LIST
79649: LIST
79650: LIST
79651: PUSH
79652: LD_VAR 0 1
79656: PUSH
79657: LD_INT 4
79659: PLUS
79660: PUSH
79661: LD_VAR 0 2
79665: PUSH
79666: LD_INT 4
79668: PUSH
79669: EMPTY
79670: LIST
79671: LIST
79672: LIST
79673: PUSH
79674: LD_VAR 0 1
79678: PUSH
79679: LD_VAR 0 2
79683: PUSH
79684: LD_INT 3
79686: MINUS
79687: PUSH
79688: LD_INT 3
79690: PUSH
79691: EMPTY
79692: LIST
79693: LIST
79694: LIST
79695: PUSH
79696: LD_VAR 0 1
79700: PUSH
79701: LD_INT 4
79703: MINUS
79704: PUSH
79705: LD_VAR 0 2
79709: PUSH
79710: LD_INT 4
79712: MINUS
79713: PUSH
79714: LD_INT 2
79716: PUSH
79717: EMPTY
79718: LIST
79719: LIST
79720: LIST
79721: PUSH
79722: EMPTY
79723: LIST
79724: LIST
79725: LIST
79726: LIST
79727: LIST
79728: ST_TO_ADDR
// end ; 5 :
79729: GO 79869
79731: LD_INT 5
79733: DOUBLE
79734: EQUAL
79735: IFTRUE 79739
79737: GO 79868
79739: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79740: LD_ADDR_VAR 0 5
79744: PUSH
79745: LD_VAR 0 1
79749: PUSH
79750: LD_INT 4
79752: MINUS
79753: PUSH
79754: LD_VAR 0 2
79758: PUSH
79759: LD_INT 1
79761: PUSH
79762: EMPTY
79763: LIST
79764: LIST
79765: LIST
79766: PUSH
79767: LD_VAR 0 1
79771: PUSH
79772: LD_VAR 0 2
79776: PUSH
79777: LD_INT 4
79779: MINUS
79780: PUSH
79781: LD_INT 3
79783: PUSH
79784: EMPTY
79785: LIST
79786: LIST
79787: LIST
79788: PUSH
79789: LD_VAR 0 1
79793: PUSH
79794: LD_INT 4
79796: PLUS
79797: PUSH
79798: LD_VAR 0 2
79802: PUSH
79803: LD_INT 4
79805: PLUS
79806: PUSH
79807: LD_INT 5
79809: PUSH
79810: EMPTY
79811: LIST
79812: LIST
79813: LIST
79814: PUSH
79815: LD_VAR 0 1
79819: PUSH
79820: LD_INT 3
79822: PLUS
79823: PUSH
79824: LD_VAR 0 2
79828: PUSH
79829: LD_INT 4
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: LIST
79836: PUSH
79837: LD_VAR 0 1
79841: PUSH
79842: LD_VAR 0 2
79846: PUSH
79847: LD_INT 3
79849: PLUS
79850: PUSH
79851: LD_INT 0
79853: PUSH
79854: EMPTY
79855: LIST
79856: LIST
79857: LIST
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: ST_TO_ADDR
// end ; end ;
79866: GO 79869
79868: POP
// result := list ;
79869: LD_ADDR_VAR 0 4
79873: PUSH
79874: LD_VAR 0 5
79878: ST_TO_ADDR
// end ;
79879: LD_VAR 0 4
79883: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79884: LD_INT 0
79886: PPUSH
79887: PPUSH
79888: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79889: LD_VAR 0 1
79893: NOT
79894: IFTRUE 79922
79896: PUSH
79897: LD_VAR 0 2
79901: PUSH
79902: LD_INT 1
79904: PUSH
79905: LD_INT 2
79907: PUSH
79908: LD_INT 3
79910: PUSH
79911: LD_INT 4
79913: PUSH
79914: EMPTY
79915: LIST
79916: LIST
79917: LIST
79918: LIST
79919: IN
79920: NOT
79921: OR
79922: IFFALSE 79926
// exit ;
79924: GO 80009
// tmp := [ ] ;
79926: LD_ADDR_VAR 0 5
79930: PUSH
79931: EMPTY
79932: ST_TO_ADDR
// for i in units do
79933: LD_ADDR_VAR 0 4
79937: PUSH
79938: LD_VAR 0 1
79942: PUSH
79943: FOR_IN
79944: IFFALSE 79978
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79946: LD_ADDR_VAR 0 5
79950: PUSH
79951: LD_VAR 0 5
79955: PPUSH
79956: LD_VAR 0 4
79960: PPUSH
79961: LD_VAR 0 2
79965: PPUSH
79966: CALL_OW 259
79970: PPUSH
79971: CALL 81404 0 2
79975: ST_TO_ADDR
79976: GO 79943
79978: POP
79979: POP
// if not tmp then
79980: LD_VAR 0 5
79984: NOT
79985: IFFALSE 79989
// exit ;
79987: GO 80009
// result := SortListByListDesc ( units , tmp ) ;
79989: LD_ADDR_VAR 0 3
79993: PUSH
79994: LD_VAR 0 1
79998: PPUSH
79999: LD_VAR 0 5
80003: PPUSH
80004: CALL_OW 77
80008: ST_TO_ADDR
// end ;
80009: LD_VAR 0 3
80013: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
80014: LD_INT 0
80016: PPUSH
80017: PPUSH
80018: PPUSH
// result := false ;
80019: LD_ADDR_VAR 0 3
80023: PUSH
80024: LD_INT 0
80026: ST_TO_ADDR
// if not building then
80027: LD_VAR 0 2
80031: NOT
80032: IFFALSE 80036
// exit ;
80034: GO 80180
// x := GetX ( building ) ;
80036: LD_ADDR_VAR 0 4
80040: PUSH
80041: LD_VAR 0 2
80045: PPUSH
80046: CALL_OW 250
80050: ST_TO_ADDR
// y := GetY ( building ) ;
80051: LD_ADDR_VAR 0 5
80055: PUSH
80056: LD_VAR 0 2
80060: PPUSH
80061: CALL_OW 251
80065: ST_TO_ADDR
// if not x or not y then
80066: LD_VAR 0 4
80070: NOT
80071: IFTRUE 80080
80073: PUSH
80074: LD_VAR 0 5
80078: NOT
80079: OR
80080: IFFALSE 80084
// exit ;
80082: GO 80180
// if GetTaskList ( unit ) then
80084: LD_VAR 0 1
80088: PPUSH
80089: CALL_OW 437
80093: IFFALSE 80180
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80095: LD_STRING e
80097: PUSH
80098: LD_VAR 0 1
80102: PPUSH
80103: CALL_OW 437
80107: PUSH
80108: LD_INT 1
80110: ARRAY
80111: PUSH
80112: LD_INT 1
80114: ARRAY
80115: EQUAL
80116: IFFALSE 80143
80118: PUSH
80119: LD_VAR 0 4
80123: PUSH
80124: LD_VAR 0 1
80128: PPUSH
80129: CALL_OW 437
80133: PUSH
80134: LD_INT 1
80136: ARRAY
80137: PUSH
80138: LD_INT 2
80140: ARRAY
80141: EQUAL
80142: AND
80143: IFFALSE 80170
80145: PUSH
80146: LD_VAR 0 5
80150: PUSH
80151: LD_VAR 0 1
80155: PPUSH
80156: CALL_OW 437
80160: PUSH
80161: LD_INT 1
80163: ARRAY
80164: PUSH
80165: LD_INT 3
80167: ARRAY
80168: EQUAL
80169: AND
80170: IFFALSE 80180
// result := true end ;
80172: LD_ADDR_VAR 0 3
80176: PUSH
80177: LD_INT 1
80179: ST_TO_ADDR
// end ;
80180: LD_VAR 0 3
80184: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80185: LD_INT 0
80187: PPUSH
// result := false ;
80188: LD_ADDR_VAR 0 4
80192: PUSH
80193: LD_INT 0
80195: ST_TO_ADDR
// if GetTaskList ( unit ) then
80196: LD_VAR 0 1
80200: PPUSH
80201: CALL_OW 437
80205: IFFALSE 80292
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80207: LD_STRING M
80209: PUSH
80210: LD_VAR 0 1
80214: PPUSH
80215: CALL_OW 437
80219: PUSH
80220: LD_INT 1
80222: ARRAY
80223: PUSH
80224: LD_INT 1
80226: ARRAY
80227: EQUAL
80228: IFFALSE 80255
80230: PUSH
80231: LD_VAR 0 2
80235: PUSH
80236: LD_VAR 0 1
80240: PPUSH
80241: CALL_OW 437
80245: PUSH
80246: LD_INT 1
80248: ARRAY
80249: PUSH
80250: LD_INT 2
80252: ARRAY
80253: EQUAL
80254: AND
80255: IFFALSE 80282
80257: PUSH
80258: LD_VAR 0 3
80262: PUSH
80263: LD_VAR 0 1
80267: PPUSH
80268: CALL_OW 437
80272: PUSH
80273: LD_INT 1
80275: ARRAY
80276: PUSH
80277: LD_INT 3
80279: ARRAY
80280: EQUAL
80281: AND
80282: IFFALSE 80292
// result := true ;
80284: LD_ADDR_VAR 0 4
80288: PUSH
80289: LD_INT 1
80291: ST_TO_ADDR
// end ; end ;
80292: LD_VAR 0 4
80296: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80297: LD_INT 0
80299: PPUSH
80300: PPUSH
80301: PPUSH
80302: PPUSH
// if not unit or not area then
80303: LD_VAR 0 1
80307: NOT
80308: IFTRUE 80317
80310: PUSH
80311: LD_VAR 0 2
80315: NOT
80316: OR
80317: IFFALSE 80321
// exit ;
80319: GO 80497
// tmp := AreaToList ( area , i ) ;
80321: LD_ADDR_VAR 0 6
80325: PUSH
80326: LD_VAR 0 2
80330: PPUSH
80331: LD_VAR 0 5
80335: PPUSH
80336: CALL_OW 517
80340: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80341: LD_ADDR_VAR 0 5
80345: PUSH
80346: DOUBLE
80347: LD_INT 1
80349: DEC
80350: ST_TO_ADDR
80351: LD_VAR 0 6
80355: PUSH
80356: LD_INT 1
80358: ARRAY
80359: PUSH
80360: FOR_TO
80361: IFFALSE 80495
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80363: LD_ADDR_VAR 0 7
80367: PUSH
80368: LD_VAR 0 6
80372: PUSH
80373: LD_INT 1
80375: ARRAY
80376: PUSH
80377: LD_VAR 0 5
80381: ARRAY
80382: PUSH
80383: LD_VAR 0 6
80387: PUSH
80388: LD_INT 2
80390: ARRAY
80391: PUSH
80392: LD_VAR 0 5
80396: ARRAY
80397: PUSH
80398: EMPTY
80399: LIST
80400: LIST
80401: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
80402: LD_INT 92
80404: PUSH
80405: LD_VAR 0 7
80409: PUSH
80410: LD_INT 1
80412: ARRAY
80413: PUSH
80414: LD_VAR 0 7
80418: PUSH
80419: LD_INT 2
80421: ARRAY
80422: PUSH
80423: LD_INT 2
80425: PUSH
80426: EMPTY
80427: LIST
80428: LIST
80429: LIST
80430: LIST
80431: PPUSH
80432: CALL_OW 69
80436: PUSH
80437: LD_INT 0
80439: EQUAL
80440: IFFALSE 80493
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80442: LD_VAR 0 1
80446: PPUSH
80447: LD_VAR 0 7
80451: PUSH
80452: LD_INT 1
80454: ARRAY
80455: PPUSH
80456: LD_VAR 0 7
80460: PUSH
80461: LD_INT 2
80463: ARRAY
80464: PPUSH
80465: LD_VAR 0 3
80469: PPUSH
80470: CALL_OW 48
// result := IsPlaced ( unit ) ;
80474: LD_ADDR_VAR 0 4
80478: PUSH
80479: LD_VAR 0 1
80483: PPUSH
80484: CALL_OW 305
80488: ST_TO_ADDR
// exit ;
80489: POP
80490: POP
80491: GO 80497
// end ; end ;
80493: GO 80360
80495: POP
80496: POP
// end ;
80497: LD_VAR 0 4
80501: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80502: LD_INT 0
80504: PPUSH
80505: PPUSH
80506: PPUSH
// if not side or side > 8 then
80507: LD_VAR 0 1
80511: NOT
80512: IFTRUE 80524
80514: PUSH
80515: LD_VAR 0 1
80519: PUSH
80520: LD_INT 8
80522: GREATER
80523: OR
80524: IFFALSE 80528
// exit ;
80526: GO 80715
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80528: LD_ADDR_VAR 0 4
80532: PUSH
80533: LD_INT 22
80535: PUSH
80536: LD_VAR 0 1
80540: PUSH
80541: EMPTY
80542: LIST
80543: LIST
80544: PUSH
80545: LD_INT 21
80547: PUSH
80548: LD_INT 3
80550: PUSH
80551: EMPTY
80552: LIST
80553: LIST
80554: PUSH
80555: EMPTY
80556: LIST
80557: LIST
80558: PPUSH
80559: CALL_OW 69
80563: ST_TO_ADDR
// if not tmp then
80564: LD_VAR 0 4
80568: NOT
80569: IFFALSE 80573
// exit ;
80571: GO 80715
// enable_addtolog := true ;
80573: LD_ADDR_OWVAR 81
80577: PUSH
80578: LD_INT 1
80580: ST_TO_ADDR
// AddToLog ( [ ) ;
80581: LD_STRING [
80583: PPUSH
80584: CALL_OW 561
// for i in tmp do
80588: LD_ADDR_VAR 0 3
80592: PUSH
80593: LD_VAR 0 4
80597: PUSH
80598: FOR_IN
80599: IFFALSE 80706
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80601: LD_STRING [
80603: PUSH
80604: LD_VAR 0 3
80608: PPUSH
80609: CALL_OW 266
80613: STR
80614: PUSH
80615: LD_STRING , 
80617: STR
80618: PUSH
80619: LD_VAR 0 3
80623: PPUSH
80624: CALL_OW 250
80628: STR
80629: PUSH
80630: LD_STRING , 
80632: STR
80633: PUSH
80634: LD_VAR 0 3
80638: PPUSH
80639: CALL_OW 251
80643: STR
80644: PUSH
80645: LD_STRING , 
80647: STR
80648: PUSH
80649: LD_VAR 0 3
80653: PPUSH
80654: CALL_OW 254
80658: STR
80659: PUSH
80660: LD_STRING , 
80662: STR
80663: PUSH
80664: LD_VAR 0 3
80668: PPUSH
80669: LD_INT 1
80671: PPUSH
80672: CALL_OW 268
80676: STR
80677: PUSH
80678: LD_STRING , 
80680: STR
80681: PUSH
80682: LD_VAR 0 3
80686: PPUSH
80687: LD_INT 2
80689: PPUSH
80690: CALL_OW 268
80694: STR
80695: PUSH
80696: LD_STRING ],
80698: STR
80699: PPUSH
80700: CALL_OW 561
// end ;
80704: GO 80598
80706: POP
80707: POP
// AddToLog ( ]; ) ;
80708: LD_STRING ];
80710: PPUSH
80711: CALL_OW 561
// end ;
80715: LD_VAR 0 2
80719: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80720: LD_INT 0
80722: PPUSH
80723: PPUSH
80724: PPUSH
80725: PPUSH
80726: PPUSH
// if not area or not rate or not max then
80727: LD_VAR 0 1
80731: NOT
80732: IFTRUE 80741
80734: PUSH
80735: LD_VAR 0 2
80739: NOT
80740: OR
80741: IFTRUE 80750
80743: PUSH
80744: LD_VAR 0 4
80748: NOT
80749: OR
80750: IFFALSE 80754
// exit ;
80752: GO 80943
// while 1 do
80754: LD_INT 1
80756: IFFALSE 80943
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80758: LD_ADDR_VAR 0 9
80762: PUSH
80763: LD_VAR 0 1
80767: PPUSH
80768: LD_INT 1
80770: PPUSH
80771: CALL_OW 287
80775: PUSH
80776: LD_INT 10
80778: MUL
80779: ST_TO_ADDR
// r := rate / 10 ;
80780: LD_ADDR_VAR 0 7
80784: PUSH
80785: LD_VAR 0 2
80789: PUSH
80790: LD_INT 10
80792: DIVREAL
80793: ST_TO_ADDR
// time := 1 1$00 ;
80794: LD_ADDR_VAR 0 8
80798: PUSH
80799: LD_INT 2100
80801: ST_TO_ADDR
// if amount < min then
80802: LD_VAR 0 9
80806: PUSH
80807: LD_VAR 0 3
80811: LESS
80812: IFFALSE 80830
// r := r * 2 else
80814: LD_ADDR_VAR 0 7
80818: PUSH
80819: LD_VAR 0 7
80823: PUSH
80824: LD_INT 2
80826: MUL
80827: ST_TO_ADDR
80828: GO 80856
// if amount > max then
80830: LD_VAR 0 9
80834: PUSH
80835: LD_VAR 0 4
80839: GREATER
80840: IFFALSE 80856
// r := r / 2 ;
80842: LD_ADDR_VAR 0 7
80846: PUSH
80847: LD_VAR 0 7
80851: PUSH
80852: LD_INT 2
80854: DIVREAL
80855: ST_TO_ADDR
// time := time / r ;
80856: LD_ADDR_VAR 0 8
80860: PUSH
80861: LD_VAR 0 8
80865: PUSH
80866: LD_VAR 0 7
80870: DIVREAL
80871: ST_TO_ADDR
// if time < 0 then
80872: LD_VAR 0 8
80876: PUSH
80877: LD_INT 0
80879: LESS
80880: IFFALSE 80897
// time := time * - 1 ;
80882: LD_ADDR_VAR 0 8
80886: PUSH
80887: LD_VAR 0 8
80891: PUSH
80892: LD_INT 1
80894: NEG
80895: MUL
80896: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80897: LD_VAR 0 8
80901: PUSH
80902: LD_INT 35
80904: PPUSH
80905: LD_INT 875
80907: PPUSH
80908: CALL_OW 12
80912: PLUS
80913: PPUSH
80914: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80918: LD_INT 1
80920: PPUSH
80921: LD_INT 5
80923: PPUSH
80924: CALL_OW 12
80928: PPUSH
80929: LD_VAR 0 1
80933: PPUSH
80934: LD_INT 1
80936: PPUSH
80937: CALL_OW 55
// end ;
80941: GO 80754
// end ;
80943: LD_VAR 0 5
80947: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80948: LD_INT 0
80950: PPUSH
80951: PPUSH
80952: PPUSH
80953: PPUSH
80954: PPUSH
80955: PPUSH
80956: PPUSH
80957: PPUSH
// if not turrets or not factories then
80958: LD_VAR 0 1
80962: NOT
80963: IFTRUE 80972
80965: PUSH
80966: LD_VAR 0 2
80970: NOT
80971: OR
80972: IFFALSE 80976
// exit ;
80974: GO 81283
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80976: LD_ADDR_VAR 0 10
80980: PUSH
80981: LD_INT 5
80983: PUSH
80984: LD_INT 6
80986: PUSH
80987: EMPTY
80988: LIST
80989: LIST
80990: PUSH
80991: LD_INT 2
80993: PUSH
80994: LD_INT 4
80996: PUSH
80997: EMPTY
80998: LIST
80999: LIST
81000: PUSH
81001: LD_INT 3
81003: PUSH
81004: LD_INT 5
81006: PUSH
81007: EMPTY
81008: LIST
81009: LIST
81010: PUSH
81011: EMPTY
81012: LIST
81013: LIST
81014: LIST
81015: PUSH
81016: LD_INT 24
81018: PUSH
81019: LD_INT 25
81021: PUSH
81022: EMPTY
81023: LIST
81024: LIST
81025: PUSH
81026: LD_INT 23
81028: PUSH
81029: LD_INT 27
81031: PUSH
81032: EMPTY
81033: LIST
81034: LIST
81035: PUSH
81036: EMPTY
81037: LIST
81038: LIST
81039: PUSH
81040: LD_INT 42
81042: PUSH
81043: LD_INT 43
81045: PUSH
81046: EMPTY
81047: LIST
81048: LIST
81049: PUSH
81050: LD_INT 44
81052: PUSH
81053: LD_INT 46
81055: PUSH
81056: EMPTY
81057: LIST
81058: LIST
81059: PUSH
81060: LD_INT 45
81062: PUSH
81063: LD_INT 47
81065: PUSH
81066: EMPTY
81067: LIST
81068: LIST
81069: PUSH
81070: EMPTY
81071: LIST
81072: LIST
81073: LIST
81074: PUSH
81075: EMPTY
81076: LIST
81077: LIST
81078: LIST
81079: ST_TO_ADDR
// result := [ ] ;
81080: LD_ADDR_VAR 0 3
81084: PUSH
81085: EMPTY
81086: ST_TO_ADDR
// for i in turrets do
81087: LD_ADDR_VAR 0 4
81091: PUSH
81092: LD_VAR 0 1
81096: PUSH
81097: FOR_IN
81098: IFFALSE 81281
// begin nat := GetNation ( i ) ;
81100: LD_ADDR_VAR 0 7
81104: PUSH
81105: LD_VAR 0 4
81109: PPUSH
81110: CALL_OW 248
81114: ST_TO_ADDR
// weapon := 0 ;
81115: LD_ADDR_VAR 0 8
81119: PUSH
81120: LD_INT 0
81122: ST_TO_ADDR
// if not nat then
81123: LD_VAR 0 7
81127: NOT
81128: IFFALSE 81132
// continue ;
81130: GO 81097
// for j in list [ nat ] do
81132: LD_ADDR_VAR 0 5
81136: PUSH
81137: LD_VAR 0 10
81141: PUSH
81142: LD_VAR 0 7
81146: ARRAY
81147: PUSH
81148: FOR_IN
81149: IFFALSE 81190
// if GetBWeapon ( i ) = j [ 1 ] then
81151: LD_VAR 0 4
81155: PPUSH
81156: CALL_OW 269
81160: PUSH
81161: LD_VAR 0 5
81165: PUSH
81166: LD_INT 1
81168: ARRAY
81169: EQUAL
81170: IFFALSE 81188
// begin weapon := j [ 2 ] ;
81172: LD_ADDR_VAR 0 8
81176: PUSH
81177: LD_VAR 0 5
81181: PUSH
81182: LD_INT 2
81184: ARRAY
81185: ST_TO_ADDR
// break ;
81186: GO 81190
// end ;
81188: GO 81148
81190: POP
81191: POP
// if not weapon then
81192: LD_VAR 0 8
81196: NOT
81197: IFFALSE 81201
// continue ;
81199: GO 81097
// for k in factories do
81201: LD_ADDR_VAR 0 6
81205: PUSH
81206: LD_VAR 0 2
81210: PUSH
81211: FOR_IN
81212: IFFALSE 81277
// begin weapons := AvailableWeaponList ( k ) ;
81214: LD_ADDR_VAR 0 9
81218: PUSH
81219: LD_VAR 0 6
81223: PPUSH
81224: CALL_OW 478
81228: ST_TO_ADDR
// if not weapons then
81229: LD_VAR 0 9
81233: NOT
81234: IFFALSE 81238
// continue ;
81236: GO 81211
// if weapon in weapons then
81238: LD_VAR 0 8
81242: PUSH
81243: LD_VAR 0 9
81247: IN
81248: IFFALSE 81275
// begin result := [ i , weapon ] ;
81250: LD_ADDR_VAR 0 3
81254: PUSH
81255: LD_VAR 0 4
81259: PUSH
81260: LD_VAR 0 8
81264: PUSH
81265: EMPTY
81266: LIST
81267: LIST
81268: ST_TO_ADDR
// exit ;
81269: POP
81270: POP
81271: POP
81272: POP
81273: GO 81283
// end ; end ;
81275: GO 81211
81277: POP
81278: POP
// end ;
81279: GO 81097
81281: POP
81282: POP
// end ;
81283: LD_VAR 0 3
81287: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81288: LD_INT 0
81290: PPUSH
// if not side or side > 8 then
81291: LD_VAR 0 3
81295: NOT
81296: IFTRUE 81308
81298: PUSH
81299: LD_VAR 0 3
81303: PUSH
81304: LD_INT 8
81306: GREATER
81307: OR
81308: IFFALSE 81312
// exit ;
81310: GO 81371
// if not range then
81312: LD_VAR 0 4
81316: NOT
81317: IFFALSE 81328
// range := - 12 ;
81319: LD_ADDR_VAR 0 4
81323: PUSH
81324: LD_INT 12
81326: NEG
81327: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81328: LD_VAR 0 1
81332: PPUSH
81333: LD_VAR 0 2
81337: PPUSH
81338: LD_VAR 0 3
81342: PPUSH
81343: LD_VAR 0 4
81347: PPUSH
81348: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81352: LD_VAR 0 1
81356: PPUSH
81357: LD_VAR 0 2
81361: PPUSH
81362: LD_VAR 0 3
81366: PPUSH
81367: CALL_OW 331
// end ;
81371: LD_VAR 0 5
81375: RET
// export function Video ( mode ) ; begin
81376: LD_INT 0
81378: PPUSH
// ingame_video = mode ;
81379: LD_ADDR_OWVAR 52
81383: PUSH
81384: LD_VAR 0 1
81388: ST_TO_ADDR
// interface_hidden = mode ;
81389: LD_ADDR_OWVAR 54
81393: PUSH
81394: LD_VAR 0 1
81398: ST_TO_ADDR
// end ;
81399: LD_VAR 0 2
81403: RET
// export function Join ( array , element ) ; begin
81404: LD_INT 0
81406: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81407: LD_ADDR_VAR 0 3
81411: PUSH
81412: LD_VAR 0 1
81416: PPUSH
81417: LD_VAR 0 1
81421: PUSH
81422: LD_INT 1
81424: PLUS
81425: PPUSH
81426: LD_VAR 0 2
81430: PPUSH
81431: CALL_OW 1
81435: ST_TO_ADDR
// end ;
81436: LD_VAR 0 3
81440: RET
// export function JoinUnion ( array , element ) ; begin
81441: LD_INT 0
81443: PPUSH
// result := array union element ;
81444: LD_ADDR_VAR 0 3
81448: PUSH
81449: LD_VAR 0 1
81453: PUSH
81454: LD_VAR 0 2
81458: UNION
81459: ST_TO_ADDR
// end ;
81460: LD_VAR 0 3
81464: RET
// export function GetBehemoths ( side ) ; begin
81465: LD_INT 0
81467: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81468: LD_ADDR_VAR 0 2
81472: PUSH
81473: LD_INT 22
81475: PUSH
81476: LD_VAR 0 1
81480: PUSH
81481: EMPTY
81482: LIST
81483: LIST
81484: PUSH
81485: LD_INT 31
81487: PUSH
81488: LD_INT 25
81490: PUSH
81491: EMPTY
81492: LIST
81493: LIST
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: PPUSH
81499: CALL_OW 69
81503: ST_TO_ADDR
// end ;
81504: LD_VAR 0 2
81508: RET
// export function Shuffle ( array ) ; var i , index ; begin
81509: LD_INT 0
81511: PPUSH
81512: PPUSH
81513: PPUSH
// result := [ ] ;
81514: LD_ADDR_VAR 0 2
81518: PUSH
81519: EMPTY
81520: ST_TO_ADDR
// if not array then
81521: LD_VAR 0 1
81525: NOT
81526: IFFALSE 81530
// exit ;
81528: GO 81629
// Randomize ;
81530: CALL_OW 10
// for i = array downto 1 do
81534: LD_ADDR_VAR 0 3
81538: PUSH
81539: DOUBLE
81540: LD_VAR 0 1
81544: INC
81545: ST_TO_ADDR
81546: LD_INT 1
81548: PUSH
81549: FOR_DOWNTO
81550: IFFALSE 81627
// begin index := rand ( 1 , array ) ;
81552: LD_ADDR_VAR 0 4
81556: PUSH
81557: LD_INT 1
81559: PPUSH
81560: LD_VAR 0 1
81564: PPUSH
81565: CALL_OW 12
81569: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81570: LD_ADDR_VAR 0 2
81574: PUSH
81575: LD_VAR 0 2
81579: PPUSH
81580: LD_VAR 0 2
81584: PUSH
81585: LD_INT 1
81587: PLUS
81588: PPUSH
81589: LD_VAR 0 1
81593: PUSH
81594: LD_VAR 0 4
81598: ARRAY
81599: PPUSH
81600: CALL_OW 2
81604: ST_TO_ADDR
// array := Delete ( array , index ) ;
81605: LD_ADDR_VAR 0 1
81609: PUSH
81610: LD_VAR 0 1
81614: PPUSH
81615: LD_VAR 0 4
81619: PPUSH
81620: CALL_OW 3
81624: ST_TO_ADDR
// end ;
81625: GO 81549
81627: POP
81628: POP
// end ;
81629: LD_VAR 0 2
81633: RET
// export function GetBaseMaterials ( base ) ; begin
81634: LD_INT 0
81636: PPUSH
// result := [ 0 , 0 , 0 ] ;
81637: LD_ADDR_VAR 0 2
81641: PUSH
81642: LD_INT 0
81644: PUSH
81645: LD_INT 0
81647: PUSH
81648: LD_INT 0
81650: PUSH
81651: EMPTY
81652: LIST
81653: LIST
81654: LIST
81655: ST_TO_ADDR
// if not base then
81656: LD_VAR 0 1
81660: NOT
81661: IFFALSE 81665
// exit ;
81663: GO 81714
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81665: LD_ADDR_VAR 0 2
81669: PUSH
81670: LD_VAR 0 1
81674: PPUSH
81675: LD_INT 1
81677: PPUSH
81678: CALL_OW 275
81682: PUSH
81683: LD_VAR 0 1
81687: PPUSH
81688: LD_INT 2
81690: PPUSH
81691: CALL_OW 275
81695: PUSH
81696: LD_VAR 0 1
81700: PPUSH
81701: LD_INT 3
81703: PPUSH
81704: CALL_OW 275
81708: PUSH
81709: EMPTY
81710: LIST
81711: LIST
81712: LIST
81713: ST_TO_ADDR
// end ;
81714: LD_VAR 0 2
81718: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81719: LD_INT 0
81721: PPUSH
81722: PPUSH
// result := array ;
81723: LD_ADDR_VAR 0 3
81727: PUSH
81728: LD_VAR 0 1
81732: ST_TO_ADDR
// if size >= result then
81733: LD_VAR 0 2
81737: PUSH
81738: LD_VAR 0 3
81742: GREATEREQUAL
81743: IFFALSE 81747
// exit ;
81745: GO 81797
// if size then
81747: LD_VAR 0 2
81751: IFFALSE 81797
// for i := array downto size do
81753: LD_ADDR_VAR 0 4
81757: PUSH
81758: DOUBLE
81759: LD_VAR 0 1
81763: INC
81764: ST_TO_ADDR
81765: LD_VAR 0 2
81769: PUSH
81770: FOR_DOWNTO
81771: IFFALSE 81795
// result := Delete ( result , result ) ;
81773: LD_ADDR_VAR 0 3
81777: PUSH
81778: LD_VAR 0 3
81782: PPUSH
81783: LD_VAR 0 3
81787: PPUSH
81788: CALL_OW 3
81792: ST_TO_ADDR
81793: GO 81770
81795: POP
81796: POP
// end ;
81797: LD_VAR 0 3
81801: RET
// export function ComExit ( unit ) ; var tmp ; begin
81802: LD_INT 0
81804: PPUSH
81805: PPUSH
// if not IsInUnit ( unit ) then
81806: LD_VAR 0 1
81810: PPUSH
81811: CALL_OW 310
81815: NOT
81816: IFFALSE 81820
// exit ;
81818: GO 81880
// tmp := IsInUnit ( unit ) ;
81820: LD_ADDR_VAR 0 3
81824: PUSH
81825: LD_VAR 0 1
81829: PPUSH
81830: CALL_OW 310
81834: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81835: LD_VAR 0 3
81839: PPUSH
81840: CALL_OW 247
81844: PUSH
81845: LD_INT 2
81847: EQUAL
81848: IFFALSE 81861
// ComExitVehicle ( unit ) else
81850: LD_VAR 0 1
81854: PPUSH
81855: CALL_OW 121
81859: GO 81870
// ComExitBuilding ( unit ) ;
81861: LD_VAR 0 1
81865: PPUSH
81866: CALL_OW 122
// result := tmp ;
81870: LD_ADDR_VAR 0 2
81874: PUSH
81875: LD_VAR 0 3
81879: ST_TO_ADDR
// end ;
81880: LD_VAR 0 2
81884: RET
// export function ComExitAll ( units ) ; var i ; begin
81885: LD_INT 0
81887: PPUSH
81888: PPUSH
// if not units then
81889: LD_VAR 0 1
81893: NOT
81894: IFFALSE 81898
// exit ;
81896: GO 81924
// for i in units do
81898: LD_ADDR_VAR 0 3
81902: PUSH
81903: LD_VAR 0 1
81907: PUSH
81908: FOR_IN
81909: IFFALSE 81922
// ComExit ( i ) ;
81911: LD_VAR 0 3
81915: PPUSH
81916: CALL 81802 0 1
81920: GO 81908
81922: POP
81923: POP
// end ;
81924: LD_VAR 0 2
81928: RET
// export function ResetHc ; begin
81929: LD_INT 0
81931: PPUSH
// InitHc ;
81932: CALL_OW 19
// hc_importance := 0 ;
81936: LD_ADDR_OWVAR 32
81940: PUSH
81941: LD_INT 0
81943: ST_TO_ADDR
// end ;
81944: LD_VAR 0 1
81948: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81949: LD_INT 0
81951: PPUSH
81952: PPUSH
81953: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81954: LD_ADDR_VAR 0 6
81958: PUSH
81959: LD_VAR 0 1
81963: PUSH
81964: LD_VAR 0 3
81968: PLUS
81969: PUSH
81970: LD_INT 2
81972: DIV
81973: ST_TO_ADDR
// if _x < 0 then
81974: LD_VAR 0 6
81978: PUSH
81979: LD_INT 0
81981: LESS
81982: IFFALSE 81999
// _x := _x * - 1 ;
81984: LD_ADDR_VAR 0 6
81988: PUSH
81989: LD_VAR 0 6
81993: PUSH
81994: LD_INT 1
81996: NEG
81997: MUL
81998: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81999: LD_ADDR_VAR 0 7
82003: PUSH
82004: LD_VAR 0 2
82008: PUSH
82009: LD_VAR 0 4
82013: PLUS
82014: PUSH
82015: LD_INT 2
82017: DIV
82018: ST_TO_ADDR
// if _y < 0 then
82019: LD_VAR 0 7
82023: PUSH
82024: LD_INT 0
82026: LESS
82027: IFFALSE 82044
// _y := _y * - 1 ;
82029: LD_ADDR_VAR 0 7
82033: PUSH
82034: LD_VAR 0 7
82038: PUSH
82039: LD_INT 1
82041: NEG
82042: MUL
82043: ST_TO_ADDR
// result := [ _x , _y ] ;
82044: LD_ADDR_VAR 0 5
82048: PUSH
82049: LD_VAR 0 6
82053: PUSH
82054: LD_VAR 0 7
82058: PUSH
82059: EMPTY
82060: LIST
82061: LIST
82062: ST_TO_ADDR
// end ;
82063: LD_VAR 0 5
82067: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
82068: LD_INT 0
82070: PPUSH
82071: PPUSH
82072: PPUSH
82073: PPUSH
// task := GetTaskList ( unit ) ;
82074: LD_ADDR_VAR 0 7
82078: PUSH
82079: LD_VAR 0 1
82083: PPUSH
82084: CALL_OW 437
82088: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
82089: LD_VAR 0 7
82093: NOT
82094: IFFALSE 82113
82096: PUSH
82097: LD_VAR 0 1
82101: PPUSH
82102: LD_VAR 0 2
82106: PPUSH
82107: CALL_OW 308
82111: NOT
82112: AND
82113: IFFALSE 82117
// exit ;
82115: GO 82235
// if IsInArea ( unit , area ) then
82117: LD_VAR 0 1
82121: PPUSH
82122: LD_VAR 0 2
82126: PPUSH
82127: CALL_OW 308
82131: IFFALSE 82149
// begin ComMoveToArea ( unit , goAway ) ;
82133: LD_VAR 0 1
82137: PPUSH
82138: LD_VAR 0 3
82142: PPUSH
82143: CALL_OW 113
// exit ;
82147: GO 82235
// end ; if task [ 1 ] [ 1 ] <> M then
82149: LD_VAR 0 7
82153: PUSH
82154: LD_INT 1
82156: ARRAY
82157: PUSH
82158: LD_INT 1
82160: ARRAY
82161: PUSH
82162: LD_STRING M
82164: NONEQUAL
82165: IFFALSE 82169
// exit ;
82167: GO 82235
// x := task [ 1 ] [ 2 ] ;
82169: LD_ADDR_VAR 0 5
82173: PUSH
82174: LD_VAR 0 7
82178: PUSH
82179: LD_INT 1
82181: ARRAY
82182: PUSH
82183: LD_INT 2
82185: ARRAY
82186: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
82187: LD_ADDR_VAR 0 6
82191: PUSH
82192: LD_VAR 0 7
82196: PUSH
82197: LD_INT 1
82199: ARRAY
82200: PUSH
82201: LD_INT 3
82203: ARRAY
82204: ST_TO_ADDR
// if InArea ( x , y , area ) then
82205: LD_VAR 0 5
82209: PPUSH
82210: LD_VAR 0 6
82214: PPUSH
82215: LD_VAR 0 2
82219: PPUSH
82220: CALL_OW 309
82224: IFFALSE 82235
// ComStop ( unit ) ;
82226: LD_VAR 0 1
82230: PPUSH
82231: CALL_OW 141
// end ;
82235: LD_VAR 0 4
82239: RET
// export function Abs ( value ) ; begin
82240: LD_INT 0
82242: PPUSH
// result := value ;
82243: LD_ADDR_VAR 0 2
82247: PUSH
82248: LD_VAR 0 1
82252: ST_TO_ADDR
// if value < 0 then
82253: LD_VAR 0 1
82257: PUSH
82258: LD_INT 0
82260: LESS
82261: IFFALSE 82278
// result := value * - 1 ;
82263: LD_ADDR_VAR 0 2
82267: PUSH
82268: LD_VAR 0 1
82272: PUSH
82273: LD_INT 1
82275: NEG
82276: MUL
82277: ST_TO_ADDR
// end ;
82278: LD_VAR 0 2
82282: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82283: LD_INT 0
82285: PPUSH
82286: PPUSH
82287: PPUSH
82288: PPUSH
82289: PPUSH
82290: PPUSH
82291: PPUSH
82292: PPUSH
// if not unit or not building then
82293: LD_VAR 0 1
82297: NOT
82298: IFTRUE 82307
82300: PUSH
82301: LD_VAR 0 2
82305: NOT
82306: OR
82307: IFFALSE 82311
// exit ;
82309: GO 82539
// x := GetX ( building ) ;
82311: LD_ADDR_VAR 0 4
82315: PUSH
82316: LD_VAR 0 2
82320: PPUSH
82321: CALL_OW 250
82325: ST_TO_ADDR
// y := GetY ( building ) ;
82326: LD_ADDR_VAR 0 6
82330: PUSH
82331: LD_VAR 0 2
82335: PPUSH
82336: CALL_OW 251
82340: ST_TO_ADDR
// d := GetDir ( building ) ;
82341: LD_ADDR_VAR 0 8
82345: PUSH
82346: LD_VAR 0 2
82350: PPUSH
82351: CALL_OW 254
82355: ST_TO_ADDR
// r := 4 ;
82356: LD_ADDR_VAR 0 9
82360: PUSH
82361: LD_INT 4
82363: ST_TO_ADDR
// for i := 1 to 5 do
82364: LD_ADDR_VAR 0 10
82368: PUSH
82369: DOUBLE
82370: LD_INT 1
82372: DEC
82373: ST_TO_ADDR
82374: LD_INT 5
82376: PUSH
82377: FOR_TO
82378: IFFALSE 82537
// begin _x := ShiftX ( x , d , r + i ) ;
82380: LD_ADDR_VAR 0 5
82384: PUSH
82385: LD_VAR 0 4
82389: PPUSH
82390: LD_VAR 0 8
82394: PPUSH
82395: LD_VAR 0 9
82399: PUSH
82400: LD_VAR 0 10
82404: PLUS
82405: PPUSH
82406: CALL_OW 272
82410: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82411: LD_ADDR_VAR 0 7
82415: PUSH
82416: LD_VAR 0 6
82420: PPUSH
82421: LD_VAR 0 8
82425: PPUSH
82426: LD_VAR 0 9
82430: PUSH
82431: LD_VAR 0 10
82435: PLUS
82436: PPUSH
82437: CALL_OW 273
82441: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82442: LD_VAR 0 5
82446: PPUSH
82447: LD_VAR 0 7
82451: PPUSH
82452: CALL_OW 488
82456: IFFALSE 82491
82458: PUSH
82459: LD_VAR 0 5
82463: PPUSH
82464: LD_VAR 0 7
82468: PPUSH
82469: CALL_OW 428
82473: PPUSH
82474: CALL_OW 247
82478: PUSH
82479: LD_INT 3
82481: PUSH
82482: LD_INT 2
82484: PUSH
82485: EMPTY
82486: LIST
82487: LIST
82488: IN
82489: NOT
82490: AND
82491: IFFALSE 82535
// begin ComMoveXY ( unit , _x , _y ) ;
82493: LD_VAR 0 1
82497: PPUSH
82498: LD_VAR 0 5
82502: PPUSH
82503: LD_VAR 0 7
82507: PPUSH
82508: CALL_OW 111
// result := [ _x , _y ] ;
82512: LD_ADDR_VAR 0 3
82516: PUSH
82517: LD_VAR 0 5
82521: PUSH
82522: LD_VAR 0 7
82526: PUSH
82527: EMPTY
82528: LIST
82529: LIST
82530: ST_TO_ADDR
// exit ;
82531: POP
82532: POP
82533: GO 82539
// end ; end ;
82535: GO 82377
82537: POP
82538: POP
// end ;
82539: LD_VAR 0 3
82543: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82544: LD_INT 0
82546: PPUSH
82547: PPUSH
82548: PPUSH
// result := 0 ;
82549: LD_ADDR_VAR 0 3
82553: PUSH
82554: LD_INT 0
82556: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82557: LD_VAR 0 1
82561: PUSH
82562: LD_INT 0
82564: LESS
82565: IFTRUE 82577
82567: PUSH
82568: LD_VAR 0 1
82572: PUSH
82573: LD_INT 8
82575: GREATER
82576: OR
82577: IFTRUE 82589
82579: PUSH
82580: LD_VAR 0 2
82584: PUSH
82585: LD_INT 0
82587: LESS
82588: OR
82589: IFTRUE 82601
82591: PUSH
82592: LD_VAR 0 2
82596: PUSH
82597: LD_INT 8
82599: GREATER
82600: OR
82601: IFFALSE 82605
// exit ;
82603: GO 82680
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82605: LD_ADDR_VAR 0 4
82609: PUSH
82610: LD_INT 22
82612: PUSH
82613: LD_VAR 0 2
82617: PUSH
82618: EMPTY
82619: LIST
82620: LIST
82621: PPUSH
82622: CALL_OW 69
82626: PUSH
82627: FOR_IN
82628: IFFALSE 82678
// begin un := UnitShoot ( i ) ;
82630: LD_ADDR_VAR 0 5
82634: PUSH
82635: LD_VAR 0 4
82639: PPUSH
82640: CALL_OW 504
82644: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82645: LD_VAR 0 5
82649: PPUSH
82650: CALL_OW 255
82654: PUSH
82655: LD_VAR 0 1
82659: EQUAL
82660: IFFALSE 82676
// begin result := un ;
82662: LD_ADDR_VAR 0 3
82666: PUSH
82667: LD_VAR 0 5
82671: ST_TO_ADDR
// exit ;
82672: POP
82673: POP
82674: GO 82680
// end ; end ;
82676: GO 82627
82678: POP
82679: POP
// end ;
82680: LD_VAR 0 3
82684: RET
// export function GetCargoBay ( units ) ; begin
82685: LD_INT 0
82687: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82688: LD_ADDR_VAR 0 2
82692: PUSH
82693: LD_VAR 0 1
82697: PPUSH
82698: LD_INT 2
82700: PUSH
82701: LD_INT 34
82703: PUSH
82704: LD_INT 12
82706: PUSH
82707: EMPTY
82708: LIST
82709: LIST
82710: PUSH
82711: LD_INT 34
82713: PUSH
82714: LD_INT 51
82716: PUSH
82717: EMPTY
82718: LIST
82719: LIST
82720: PUSH
82721: LD_INT 34
82723: PUSH
82724: LD_INT 32
82726: PUSH
82727: EMPTY
82728: LIST
82729: LIST
82730: PUSH
82731: LD_INT 34
82733: PUSH
82734: LD_INT 89
82736: PUSH
82737: EMPTY
82738: LIST
82739: LIST
82740: PUSH
82741: EMPTY
82742: LIST
82743: LIST
82744: LIST
82745: LIST
82746: LIST
82747: PPUSH
82748: CALL_OW 72
82752: ST_TO_ADDR
// end ;
82753: LD_VAR 0 2
82757: RET
// export function Negate ( value ) ; begin
82758: LD_INT 0
82760: PPUSH
// result := not value ;
82761: LD_ADDR_VAR 0 2
82765: PUSH
82766: LD_VAR 0 1
82770: NOT
82771: ST_TO_ADDR
// end ;
82772: LD_VAR 0 2
82776: RET
// export function Inc ( value ) ; begin
82777: LD_INT 0
82779: PPUSH
// result := value + 1 ;
82780: LD_ADDR_VAR 0 2
82784: PUSH
82785: LD_VAR 0 1
82789: PUSH
82790: LD_INT 1
82792: PLUS
82793: ST_TO_ADDR
// end ;
82794: LD_VAR 0 2
82798: RET
// export function Dec ( value ) ; begin
82799: LD_INT 0
82801: PPUSH
// result := value - 1 ;
82802: LD_ADDR_VAR 0 2
82806: PUSH
82807: LD_VAR 0 1
82811: PUSH
82812: LD_INT 1
82814: MINUS
82815: ST_TO_ADDR
// end ;
82816: LD_VAR 0 2
82820: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82821: LD_INT 0
82823: PPUSH
82824: PPUSH
82825: PPUSH
82826: PPUSH
82827: PPUSH
82828: PPUSH
82829: PPUSH
82830: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82831: LD_VAR 0 1
82835: PPUSH
82836: LD_VAR 0 2
82840: PPUSH
82841: CALL_OW 488
82845: NOT
82846: IFTRUE 82865
82848: PUSH
82849: LD_VAR 0 3
82853: PPUSH
82854: LD_VAR 0 4
82858: PPUSH
82859: CALL_OW 488
82863: NOT
82864: OR
82865: IFFALSE 82878
// begin result := - 1 ;
82867: LD_ADDR_VAR 0 5
82871: PUSH
82872: LD_INT 1
82874: NEG
82875: ST_TO_ADDR
// exit ;
82876: GO 83113
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82878: LD_ADDR_VAR 0 12
82882: PUSH
82883: LD_VAR 0 1
82887: PPUSH
82888: LD_VAR 0 2
82892: PPUSH
82893: LD_VAR 0 3
82897: PPUSH
82898: LD_VAR 0 4
82902: PPUSH
82903: CALL 81949 0 4
82907: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82908: LD_ADDR_VAR 0 11
82912: PUSH
82913: LD_VAR 0 1
82917: PPUSH
82918: LD_VAR 0 2
82922: PPUSH
82923: LD_VAR 0 12
82927: PUSH
82928: LD_INT 1
82930: ARRAY
82931: PPUSH
82932: LD_VAR 0 12
82936: PUSH
82937: LD_INT 2
82939: ARRAY
82940: PPUSH
82941: CALL_OW 298
82945: ST_TO_ADDR
// distance := 9999 ;
82946: LD_ADDR_VAR 0 10
82950: PUSH
82951: LD_INT 9999
82953: ST_TO_ADDR
// for i := 0 to 5 do
82954: LD_ADDR_VAR 0 6
82958: PUSH
82959: DOUBLE
82960: LD_INT 0
82962: DEC
82963: ST_TO_ADDR
82964: LD_INT 5
82966: PUSH
82967: FOR_TO
82968: IFFALSE 83111
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82970: LD_ADDR_VAR 0 7
82974: PUSH
82975: LD_VAR 0 1
82979: PPUSH
82980: LD_VAR 0 6
82984: PPUSH
82985: LD_VAR 0 11
82989: PPUSH
82990: CALL_OW 272
82994: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82995: LD_ADDR_VAR 0 8
82999: PUSH
83000: LD_VAR 0 2
83004: PPUSH
83005: LD_VAR 0 6
83009: PPUSH
83010: LD_VAR 0 11
83014: PPUSH
83015: CALL_OW 273
83019: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
83020: LD_VAR 0 7
83024: PPUSH
83025: LD_VAR 0 8
83029: PPUSH
83030: CALL_OW 488
83034: NOT
83035: IFFALSE 83039
// continue ;
83037: GO 82967
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
83039: LD_ADDR_VAR 0 9
83043: PUSH
83044: LD_VAR 0 12
83048: PUSH
83049: LD_INT 1
83051: ARRAY
83052: PPUSH
83053: LD_VAR 0 12
83057: PUSH
83058: LD_INT 2
83060: ARRAY
83061: PPUSH
83062: LD_VAR 0 7
83066: PPUSH
83067: LD_VAR 0 8
83071: PPUSH
83072: CALL_OW 298
83076: ST_TO_ADDR
// if tmp < distance then
83077: LD_VAR 0 9
83081: PUSH
83082: LD_VAR 0 10
83086: LESS
83087: IFFALSE 83109
// begin result := i ;
83089: LD_ADDR_VAR 0 5
83093: PUSH
83094: LD_VAR 0 6
83098: ST_TO_ADDR
// distance := tmp ;
83099: LD_ADDR_VAR 0 10
83103: PUSH
83104: LD_VAR 0 9
83108: ST_TO_ADDR
// end ; end ;
83109: GO 82967
83111: POP
83112: POP
// end ;
83113: LD_VAR 0 5
83117: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83118: LD_INT 0
83120: PPUSH
83121: PPUSH
// if not driver or not IsInUnit ( driver ) then
83122: LD_VAR 0 1
83126: NOT
83127: IFTRUE 83141
83129: PUSH
83130: LD_VAR 0 1
83134: PPUSH
83135: CALL_OW 310
83139: NOT
83140: OR
83141: IFFALSE 83145
// exit ;
83143: GO 83235
// vehicle := IsInUnit ( driver ) ;
83145: LD_ADDR_VAR 0 3
83149: PUSH
83150: LD_VAR 0 1
83154: PPUSH
83155: CALL_OW 310
83159: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83160: LD_VAR 0 1
83164: PPUSH
83165: LD_STRING \
83167: PUSH
83168: LD_INT 0
83170: PUSH
83171: LD_INT 0
83173: PUSH
83174: LD_INT 0
83176: PUSH
83177: LD_INT 0
83179: PUSH
83180: LD_INT 0
83182: PUSH
83183: LD_INT 0
83185: PUSH
83186: EMPTY
83187: LIST
83188: LIST
83189: LIST
83190: LIST
83191: LIST
83192: LIST
83193: LIST
83194: PUSH
83195: LD_STRING E
83197: PUSH
83198: LD_INT 0
83200: PUSH
83201: LD_INT 0
83203: PUSH
83204: LD_VAR 0 3
83208: PUSH
83209: LD_INT 0
83211: PUSH
83212: LD_INT 0
83214: PUSH
83215: LD_INT 0
83217: PUSH
83218: EMPTY
83219: LIST
83220: LIST
83221: LIST
83222: LIST
83223: LIST
83224: LIST
83225: LIST
83226: PUSH
83227: EMPTY
83228: LIST
83229: LIST
83230: PPUSH
83231: CALL_OW 446
// end ;
83235: LD_VAR 0 2
83239: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83240: LD_INT 0
83242: PPUSH
83243: PPUSH
// if not driver or not IsInUnit ( driver ) then
83244: LD_VAR 0 1
83248: NOT
83249: IFTRUE 83263
83251: PUSH
83252: LD_VAR 0 1
83256: PPUSH
83257: CALL_OW 310
83261: NOT
83262: OR
83263: IFFALSE 83267
// exit ;
83265: GO 83357
// vehicle := IsInUnit ( driver ) ;
83267: LD_ADDR_VAR 0 3
83271: PUSH
83272: LD_VAR 0 1
83276: PPUSH
83277: CALL_OW 310
83281: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83282: LD_VAR 0 1
83286: PPUSH
83287: LD_STRING \
83289: PUSH
83290: LD_INT 0
83292: PUSH
83293: LD_INT 0
83295: PUSH
83296: LD_INT 0
83298: PUSH
83299: LD_INT 0
83301: PUSH
83302: LD_INT 0
83304: PUSH
83305: LD_INT 0
83307: PUSH
83308: EMPTY
83309: LIST
83310: LIST
83311: LIST
83312: LIST
83313: LIST
83314: LIST
83315: LIST
83316: PUSH
83317: LD_STRING E
83319: PUSH
83320: LD_INT 0
83322: PUSH
83323: LD_INT 0
83325: PUSH
83326: LD_VAR 0 3
83330: PUSH
83331: LD_INT 0
83333: PUSH
83334: LD_INT 0
83336: PUSH
83337: LD_INT 0
83339: PUSH
83340: EMPTY
83341: LIST
83342: LIST
83343: LIST
83344: LIST
83345: LIST
83346: LIST
83347: LIST
83348: PUSH
83349: EMPTY
83350: LIST
83351: LIST
83352: PPUSH
83353: CALL_OW 447
// end ;
83357: LD_VAR 0 2
83361: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83362: LD_INT 0
83364: PPUSH
83365: PPUSH
83366: PPUSH
// tmp := [ ] ;
83367: LD_ADDR_VAR 0 5
83371: PUSH
83372: EMPTY
83373: ST_TO_ADDR
// for i in units do
83374: LD_ADDR_VAR 0 4
83378: PUSH
83379: LD_VAR 0 1
83383: PUSH
83384: FOR_IN
83385: IFFALSE 83423
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83387: LD_ADDR_VAR 0 5
83391: PUSH
83392: LD_VAR 0 5
83396: PPUSH
83397: LD_VAR 0 5
83401: PUSH
83402: LD_INT 1
83404: PLUS
83405: PPUSH
83406: LD_VAR 0 4
83410: PPUSH
83411: CALL_OW 256
83415: PPUSH
83416: CALL_OW 2
83420: ST_TO_ADDR
83421: GO 83384
83423: POP
83424: POP
// if not tmp then
83425: LD_VAR 0 5
83429: NOT
83430: IFFALSE 83434
// exit ;
83432: GO 83482
// if asc then
83434: LD_VAR 0 2
83438: IFFALSE 83462
// result := SortListByListAsc ( units , tmp ) else
83440: LD_ADDR_VAR 0 3
83444: PUSH
83445: LD_VAR 0 1
83449: PPUSH
83450: LD_VAR 0 5
83454: PPUSH
83455: CALL_OW 76
83459: ST_TO_ADDR
83460: GO 83482
// result := SortListByListDesc ( units , tmp ) ;
83462: LD_ADDR_VAR 0 3
83466: PUSH
83467: LD_VAR 0 1
83471: PPUSH
83472: LD_VAR 0 5
83476: PPUSH
83477: CALL_OW 77
83481: ST_TO_ADDR
// end ;
83482: LD_VAR 0 3
83486: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83487: LD_INT 0
83489: PPUSH
83490: PPUSH
// task := GetTaskList ( mech ) ;
83491: LD_ADDR_VAR 0 4
83495: PUSH
83496: LD_VAR 0 1
83500: PPUSH
83501: CALL_OW 437
83505: ST_TO_ADDR
// if not task then
83506: LD_VAR 0 4
83510: NOT
83511: IFFALSE 83515
// exit ;
83513: GO 83559
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83515: LD_ADDR_VAR 0 3
83519: PUSH
83520: LD_VAR 0 4
83524: PUSH
83525: LD_INT 1
83527: ARRAY
83528: PUSH
83529: LD_INT 1
83531: ARRAY
83532: PUSH
83533: LD_STRING r
83535: EQUAL
83536: IFFALSE 83558
83538: PUSH
83539: LD_VAR 0 4
83543: PUSH
83544: LD_INT 1
83546: ARRAY
83547: PUSH
83548: LD_INT 4
83550: ARRAY
83551: PUSH
83552: LD_VAR 0 2
83556: EQUAL
83557: AND
83558: ST_TO_ADDR
// end ;
83559: LD_VAR 0 3
83563: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83564: LD_INT 0
83566: PPUSH
// SetDir ( unit , d ) ;
83567: LD_VAR 0 1
83571: PPUSH
83572: LD_VAR 0 4
83576: PPUSH
83577: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
83581: LD_ADDR_VAR 0 6
83585: PUSH
83586: LD_VAR 0 1
83590: PPUSH
83591: LD_VAR 0 2
83595: PPUSH
83596: LD_VAR 0 3
83600: PPUSH
83601: LD_VAR 0 5
83605: PPUSH
83606: CALL_OW 48
83610: ST_TO_ADDR
// end ;
83611: LD_VAR 0 6
83615: RET
// export function ToNaturalNumber ( number ) ; begin
83616: LD_INT 0
83618: PPUSH
// result := number div 1 ;
83619: LD_ADDR_VAR 0 2
83623: PUSH
83624: LD_VAR 0 1
83628: PUSH
83629: LD_INT 1
83631: DIV
83632: ST_TO_ADDR
// if number < 0 then
83633: LD_VAR 0 1
83637: PUSH
83638: LD_INT 0
83640: LESS
83641: IFFALSE 83651
// result := 0 ;
83643: LD_ADDR_VAR 0 2
83647: PUSH
83648: LD_INT 0
83650: ST_TO_ADDR
// end ;
83651: LD_VAR 0 2
83655: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
83656: LD_INT 0
83658: PPUSH
83659: PPUSH
83660: PPUSH
// if not buildings then
83661: LD_VAR 0 1
83665: NOT
83666: IFFALSE 83670
// exit ;
83668: GO 83785
// tmp := [ ] ;
83670: LD_ADDR_VAR 0 5
83674: PUSH
83675: EMPTY
83676: ST_TO_ADDR
// for b in buildings do
83677: LD_ADDR_VAR 0 4
83681: PUSH
83682: LD_VAR 0 1
83686: PUSH
83687: FOR_IN
83688: IFFALSE 83726
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
83690: LD_ADDR_VAR 0 5
83694: PUSH
83695: LD_VAR 0 5
83699: PPUSH
83700: LD_VAR 0 5
83704: PUSH
83705: LD_INT 1
83707: PLUS
83708: PPUSH
83709: LD_VAR 0 4
83713: PPUSH
83714: CALL_OW 266
83718: PPUSH
83719: CALL_OW 1
83723: ST_TO_ADDR
83724: GO 83687
83726: POP
83727: POP
// if not tmp then
83728: LD_VAR 0 5
83732: NOT
83733: IFFALSE 83737
// exit ;
83735: GO 83785
// if asc then
83737: LD_VAR 0 2
83741: IFFALSE 83765
// result := SortListByListAsc ( buildings , tmp ) else
83743: LD_ADDR_VAR 0 3
83747: PUSH
83748: LD_VAR 0 1
83752: PPUSH
83753: LD_VAR 0 5
83757: PPUSH
83758: CALL_OW 76
83762: ST_TO_ADDR
83763: GO 83785
// result := SortListByListDesc ( buildings , tmp ) ;
83765: LD_ADDR_VAR 0 3
83769: PUSH
83770: LD_VAR 0 1
83774: PPUSH
83775: LD_VAR 0 5
83779: PPUSH
83780: CALL_OW 77
83784: ST_TO_ADDR
// end ;
83785: LD_VAR 0 3
83789: RET
// export function SortByClass ( units , class ) ; var un ; begin
83790: LD_INT 0
83792: PPUSH
83793: PPUSH
// if not units or not class then
83794: LD_VAR 0 1
83798: NOT
83799: IFTRUE 83808
83801: PUSH
83802: LD_VAR 0 2
83806: NOT
83807: OR
83808: IFFALSE 83812
// exit ;
83810: GO 83907
// result := [ ] ;
83812: LD_ADDR_VAR 0 3
83816: PUSH
83817: EMPTY
83818: ST_TO_ADDR
// for un in units do
83819: LD_ADDR_VAR 0 4
83823: PUSH
83824: LD_VAR 0 1
83828: PUSH
83829: FOR_IN
83830: IFFALSE 83905
// if GetClass ( un ) = class then
83832: LD_VAR 0 4
83836: PPUSH
83837: CALL_OW 257
83841: PUSH
83842: LD_VAR 0 2
83846: EQUAL
83847: IFFALSE 83874
// result := Insert ( result , 1 , un ) else
83849: LD_ADDR_VAR 0 3
83853: PUSH
83854: LD_VAR 0 3
83858: PPUSH
83859: LD_INT 1
83861: PPUSH
83862: LD_VAR 0 4
83866: PPUSH
83867: CALL_OW 2
83871: ST_TO_ADDR
83872: GO 83903
// result := Replace ( result , result + 1 , un ) ;
83874: LD_ADDR_VAR 0 3
83878: PUSH
83879: LD_VAR 0 3
83883: PPUSH
83884: LD_VAR 0 3
83888: PUSH
83889: LD_INT 1
83891: PLUS
83892: PPUSH
83893: LD_VAR 0 4
83897: PPUSH
83898: CALL_OW 1
83902: ST_TO_ADDR
83903: GO 83829
83905: POP
83906: POP
// end ;
83907: LD_VAR 0 3
83911: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83912: LD_INT 0
83914: PPUSH
83915: PPUSH
83916: PPUSH
83917: PPUSH
83918: PPUSH
83919: PPUSH
83920: PPUSH
// result := [ ] ;
83921: LD_ADDR_VAR 0 4
83925: PUSH
83926: EMPTY
83927: ST_TO_ADDR
// if x - r < 0 then
83928: LD_VAR 0 1
83932: PUSH
83933: LD_VAR 0 3
83937: MINUS
83938: PUSH
83939: LD_INT 0
83941: LESS
83942: IFFALSE 83954
// min_x := 0 else
83944: LD_ADDR_VAR 0 8
83948: PUSH
83949: LD_INT 0
83951: ST_TO_ADDR
83952: GO 83970
// min_x := x - r ;
83954: LD_ADDR_VAR 0 8
83958: PUSH
83959: LD_VAR 0 1
83963: PUSH
83964: LD_VAR 0 3
83968: MINUS
83969: ST_TO_ADDR
// if y - r < 0 then
83970: LD_VAR 0 2
83974: PUSH
83975: LD_VAR 0 3
83979: MINUS
83980: PUSH
83981: LD_INT 0
83983: LESS
83984: IFFALSE 83996
// min_y := 0 else
83986: LD_ADDR_VAR 0 7
83990: PUSH
83991: LD_INT 0
83993: ST_TO_ADDR
83994: GO 84012
// min_y := y - r ;
83996: LD_ADDR_VAR 0 7
84000: PUSH
84001: LD_VAR 0 2
84005: PUSH
84006: LD_VAR 0 3
84010: MINUS
84011: ST_TO_ADDR
// max_x := x + r ;
84012: LD_ADDR_VAR 0 9
84016: PUSH
84017: LD_VAR 0 1
84021: PUSH
84022: LD_VAR 0 3
84026: PLUS
84027: ST_TO_ADDR
// max_y := y + r ;
84028: LD_ADDR_VAR 0 10
84032: PUSH
84033: LD_VAR 0 2
84037: PUSH
84038: LD_VAR 0 3
84042: PLUS
84043: ST_TO_ADDR
// for _x = min_x to max_x do
84044: LD_ADDR_VAR 0 5
84048: PUSH
84049: DOUBLE
84050: LD_VAR 0 8
84054: DEC
84055: ST_TO_ADDR
84056: LD_VAR 0 9
84060: PUSH
84061: FOR_TO
84062: IFFALSE 84163
// for _y = min_y to max_y do
84064: LD_ADDR_VAR 0 6
84068: PUSH
84069: DOUBLE
84070: LD_VAR 0 7
84074: DEC
84075: ST_TO_ADDR
84076: LD_VAR 0 10
84080: PUSH
84081: FOR_TO
84082: IFFALSE 84159
// begin if not ValidHex ( _x , _y ) then
84084: LD_VAR 0 5
84088: PPUSH
84089: LD_VAR 0 6
84093: PPUSH
84094: CALL_OW 488
84098: NOT
84099: IFFALSE 84103
// continue ;
84101: GO 84081
// if GetResourceTypeXY ( _x , _y ) then
84103: LD_VAR 0 5
84107: PPUSH
84108: LD_VAR 0 6
84112: PPUSH
84113: CALL_OW 283
84117: IFFALSE 84157
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
84119: LD_ADDR_VAR 0 4
84123: PUSH
84124: LD_VAR 0 4
84128: PPUSH
84129: LD_VAR 0 4
84133: PUSH
84134: LD_INT 1
84136: PLUS
84137: PPUSH
84138: LD_VAR 0 5
84142: PUSH
84143: LD_VAR 0 6
84147: PUSH
84148: EMPTY
84149: LIST
84150: LIST
84151: PPUSH
84152: CALL_OW 1
84156: ST_TO_ADDR
// end ;
84157: GO 84081
84159: POP
84160: POP
84161: GO 84061
84163: POP
84164: POP
// end ;
84165: LD_VAR 0 4
84169: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
84170: LD_INT 0
84172: PPUSH
84173: PPUSH
84174: PPUSH
84175: PPUSH
84176: PPUSH
84177: PPUSH
84178: PPUSH
84179: PPUSH
// if not units then
84180: LD_VAR 0 1
84184: NOT
84185: IFFALSE 84189
// exit ;
84187: GO 84721
// result := UnitFilter ( units , [ f_ok ] ) ;
84189: LD_ADDR_VAR 0 3
84193: PUSH
84194: LD_VAR 0 1
84198: PPUSH
84199: LD_INT 50
84201: PUSH
84202: EMPTY
84203: LIST
84204: PPUSH
84205: CALL_OW 72
84209: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
84210: LD_ADDR_VAR 0 8
84214: PUSH
84215: LD_VAR 0 1
84219: PUSH
84220: LD_INT 1
84222: ARRAY
84223: PPUSH
84224: CALL_OW 255
84228: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
84229: LD_ADDR_VAR 0 10
84233: PUSH
84234: LD_INT 29
84236: PUSH
84237: LD_INT 91
84239: PUSH
84240: LD_INT 49
84242: PUSH
84243: EMPTY
84244: LIST
84245: LIST
84246: LIST
84247: ST_TO_ADDR
// if not result then
84248: LD_VAR 0 3
84252: NOT
84253: IFFALSE 84257
// exit ;
84255: GO 84721
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
84257: LD_ADDR_VAR 0 5
84261: PUSH
84262: LD_INT 81
84264: PUSH
84265: LD_VAR 0 8
84269: PUSH
84270: EMPTY
84271: LIST
84272: LIST
84273: PPUSH
84274: CALL_OW 69
84278: ST_TO_ADDR
// for i in result do
84279: LD_ADDR_VAR 0 4
84283: PUSH
84284: LD_VAR 0 3
84288: PUSH
84289: FOR_IN
84290: IFFALSE 84719
// begin tag := GetTag ( i ) + 1 ;
84292: LD_ADDR_VAR 0 9
84296: PUSH
84297: LD_VAR 0 4
84301: PPUSH
84302: CALL_OW 110
84306: PUSH
84307: LD_INT 1
84309: PLUS
84310: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
84311: LD_ADDR_VAR 0 7
84315: PUSH
84316: LD_VAR 0 4
84320: PPUSH
84321: CALL_OW 250
84325: PPUSH
84326: LD_VAR 0 4
84330: PPUSH
84331: CALL_OW 251
84335: PPUSH
84336: LD_INT 4
84338: PPUSH
84339: CALL 83912 0 3
84343: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
84344: LD_VAR 0 4
84348: PPUSH
84349: CALL_OW 247
84353: PUSH
84354: LD_INT 2
84356: EQUAL
84357: IFFALSE 84369
84359: PUSH
84360: LD_VAR 0 7
84364: PUSH
84365: LD_INT 2
84367: GREATER
84368: AND
84369: IFFALSE 84389
84371: PUSH
84372: LD_VAR 0 4
84376: PPUSH
84377: CALL_OW 264
84381: PUSH
84382: LD_VAR 0 10
84386: IN
84387: NOT
84388: AND
84389: IFFALSE 84428
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84391: LD_VAR 0 4
84395: PPUSH
84396: LD_VAR 0 7
84400: PUSH
84401: LD_INT 1
84403: ARRAY
84404: PUSH
84405: LD_INT 1
84407: ARRAY
84408: PPUSH
84409: LD_VAR 0 7
84413: PUSH
84414: LD_INT 1
84416: ARRAY
84417: PUSH
84418: LD_INT 2
84420: ARRAY
84421: PPUSH
84422: CALL_OW 116
84426: GO 84717
// if path > tag then
84428: LD_VAR 0 2
84432: PUSH
84433: LD_VAR 0 9
84437: GREATER
84438: IFFALSE 84646
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
84440: LD_ADDR_VAR 0 6
84444: PUSH
84445: LD_VAR 0 5
84449: PPUSH
84450: LD_INT 91
84452: PUSH
84453: LD_VAR 0 4
84457: PUSH
84458: LD_INT 8
84460: PUSH
84461: EMPTY
84462: LIST
84463: LIST
84464: LIST
84465: PPUSH
84466: CALL_OW 72
84470: ST_TO_ADDR
// if nearEnemy then
84471: LD_VAR 0 6
84475: IFFALSE 84544
// begin if GetWeapon ( i ) = ru_time_lapser then
84477: LD_VAR 0 4
84481: PPUSH
84482: CALL_OW 264
84486: PUSH
84487: LD_INT 49
84489: EQUAL
84490: IFFALSE 84518
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84492: LD_VAR 0 4
84496: PPUSH
84497: LD_VAR 0 6
84501: PPUSH
84502: LD_VAR 0 4
84506: PPUSH
84507: CALL_OW 74
84511: PPUSH
84512: CALL_OW 112
84516: GO 84542
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84518: LD_VAR 0 4
84522: PPUSH
84523: LD_VAR 0 6
84527: PPUSH
84528: LD_VAR 0 4
84532: PPUSH
84533: CALL_OW 74
84537: PPUSH
84538: CALL 85802 0 2
// end else
84542: GO 84644
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84544: LD_VAR 0 4
84548: PPUSH
84549: LD_VAR 0 2
84553: PUSH
84554: LD_VAR 0 9
84558: ARRAY
84559: PUSH
84560: LD_INT 1
84562: ARRAY
84563: PPUSH
84564: LD_VAR 0 2
84568: PUSH
84569: LD_VAR 0 9
84573: ARRAY
84574: PUSH
84575: LD_INT 2
84577: ARRAY
84578: PPUSH
84579: CALL_OW 297
84583: PUSH
84584: LD_INT 6
84586: GREATER
84587: IFFALSE 84630
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84589: LD_VAR 0 4
84593: PPUSH
84594: LD_VAR 0 2
84598: PUSH
84599: LD_VAR 0 9
84603: ARRAY
84604: PUSH
84605: LD_INT 1
84607: ARRAY
84608: PPUSH
84609: LD_VAR 0 2
84613: PUSH
84614: LD_VAR 0 9
84618: ARRAY
84619: PUSH
84620: LD_INT 2
84622: ARRAY
84623: PPUSH
84624: CALL_OW 114
84628: GO 84644
// SetTag ( i , tag ) ;
84630: LD_VAR 0 4
84634: PPUSH
84635: LD_VAR 0 9
84639: PPUSH
84640: CALL_OW 109
// end else
84644: GO 84717
// if enemy then
84646: LD_VAR 0 5
84650: IFFALSE 84717
// begin if GetWeapon ( i ) = ru_time_lapser then
84652: LD_VAR 0 4
84656: PPUSH
84657: CALL_OW 264
84661: PUSH
84662: LD_INT 49
84664: EQUAL
84665: IFFALSE 84693
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84667: LD_VAR 0 4
84671: PPUSH
84672: LD_VAR 0 5
84676: PPUSH
84677: LD_VAR 0 4
84681: PPUSH
84682: CALL_OW 74
84686: PPUSH
84687: CALL_OW 112
84691: GO 84717
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84693: LD_VAR 0 4
84697: PPUSH
84698: LD_VAR 0 5
84702: PPUSH
84703: LD_VAR 0 4
84707: PPUSH
84708: CALL_OW 74
84712: PPUSH
84713: CALL 85802 0 2
// end ; end ;
84717: GO 84289
84719: POP
84720: POP
// end ;
84721: LD_VAR 0 3
84725: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84726: LD_INT 0
84728: PPUSH
84729: PPUSH
84730: PPUSH
// if not unit or IsInUnit ( unit ) then
84731: LD_VAR 0 1
84735: NOT
84736: IFTRUE 84749
84738: PUSH
84739: LD_VAR 0 1
84743: PPUSH
84744: CALL_OW 310
84748: OR
84749: IFFALSE 84753
// exit ;
84751: GO 84844
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84753: LD_ADDR_VAR 0 4
84757: PUSH
84758: LD_VAR 0 1
84762: PPUSH
84763: CALL_OW 250
84767: PPUSH
84768: LD_VAR 0 2
84772: PPUSH
84773: LD_INT 1
84775: PPUSH
84776: CALL_OW 272
84780: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84781: LD_ADDR_VAR 0 5
84785: PUSH
84786: LD_VAR 0 1
84790: PPUSH
84791: CALL_OW 251
84795: PPUSH
84796: LD_VAR 0 2
84800: PPUSH
84801: LD_INT 1
84803: PPUSH
84804: CALL_OW 273
84808: ST_TO_ADDR
// if ValidHex ( x , y ) then
84809: LD_VAR 0 4
84813: PPUSH
84814: LD_VAR 0 5
84818: PPUSH
84819: CALL_OW 488
84823: IFFALSE 84844
// ComTurnXY ( unit , x , y ) ;
84825: LD_VAR 0 1
84829: PPUSH
84830: LD_VAR 0 4
84834: PPUSH
84835: LD_VAR 0 5
84839: PPUSH
84840: CALL_OW 118
// end ;
84844: LD_VAR 0 3
84848: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84849: LD_INT 0
84851: PPUSH
84852: PPUSH
// result := false ;
84853: LD_ADDR_VAR 0 3
84857: PUSH
84858: LD_INT 0
84860: ST_TO_ADDR
// if not units then
84861: LD_VAR 0 2
84865: NOT
84866: IFFALSE 84870
// exit ;
84868: GO 84915
// for i in units do
84870: LD_ADDR_VAR 0 4
84874: PUSH
84875: LD_VAR 0 2
84879: PUSH
84880: FOR_IN
84881: IFFALSE 84913
// if See ( side , i ) then
84883: LD_VAR 0 1
84887: PPUSH
84888: LD_VAR 0 4
84892: PPUSH
84893: CALL_OW 292
84897: IFFALSE 84911
// begin result := true ;
84899: LD_ADDR_VAR 0 3
84903: PUSH
84904: LD_INT 1
84906: ST_TO_ADDR
// exit ;
84907: POP
84908: POP
84909: GO 84915
// end ;
84911: GO 84880
84913: POP
84914: POP
// end ;
84915: LD_VAR 0 3
84919: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84920: LD_INT 0
84922: PPUSH
84923: PPUSH
84924: PPUSH
84925: PPUSH
// if not unit or not points then
84926: LD_VAR 0 1
84930: NOT
84931: IFTRUE 84940
84933: PUSH
84934: LD_VAR 0 2
84938: NOT
84939: OR
84940: IFFALSE 84944
// exit ;
84942: GO 85034
// dist := 99999 ;
84944: LD_ADDR_VAR 0 5
84948: PUSH
84949: LD_INT 99999
84951: ST_TO_ADDR
// for i in points do
84952: LD_ADDR_VAR 0 4
84956: PUSH
84957: LD_VAR 0 2
84961: PUSH
84962: FOR_IN
84963: IFFALSE 85032
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84965: LD_ADDR_VAR 0 6
84969: PUSH
84970: LD_VAR 0 1
84974: PPUSH
84975: LD_VAR 0 4
84979: PUSH
84980: LD_INT 1
84982: ARRAY
84983: PPUSH
84984: LD_VAR 0 4
84988: PUSH
84989: LD_INT 2
84991: ARRAY
84992: PPUSH
84993: CALL_OW 297
84997: ST_TO_ADDR
// if tmpDist < dist then
84998: LD_VAR 0 6
85002: PUSH
85003: LD_VAR 0 5
85007: LESS
85008: IFFALSE 85030
// begin result := i ;
85010: LD_ADDR_VAR 0 3
85014: PUSH
85015: LD_VAR 0 4
85019: ST_TO_ADDR
// dist := tmpDist ;
85020: LD_ADDR_VAR 0 5
85024: PUSH
85025: LD_VAR 0 6
85029: ST_TO_ADDR
// end ; end ;
85030: GO 84962
85032: POP
85033: POP
// end ;
85034: LD_VAR 0 3
85038: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
85039: LD_INT 0
85041: PPUSH
// uc_side := side ;
85042: LD_ADDR_OWVAR 20
85046: PUSH
85047: LD_VAR 0 1
85051: ST_TO_ADDR
// uc_nation := 3 ;
85052: LD_ADDR_OWVAR 21
85056: PUSH
85057: LD_INT 3
85059: ST_TO_ADDR
// vc_chassis := 25 ;
85060: LD_ADDR_OWVAR 37
85064: PUSH
85065: LD_INT 25
85067: ST_TO_ADDR
// vc_engine := engine_siberite ;
85068: LD_ADDR_OWVAR 39
85072: PUSH
85073: LD_INT 3
85075: ST_TO_ADDR
// vc_control := control_computer ;
85076: LD_ADDR_OWVAR 38
85080: PUSH
85081: LD_INT 3
85083: ST_TO_ADDR
// vc_weapon := 59 ;
85084: LD_ADDR_OWVAR 40
85088: PUSH
85089: LD_INT 59
85091: ST_TO_ADDR
// result := CreateVehicle ;
85092: LD_ADDR_VAR 0 5
85096: PUSH
85097: CALL_OW 45
85101: ST_TO_ADDR
// SetDir ( result , d ) ;
85102: LD_VAR 0 5
85106: PPUSH
85107: LD_VAR 0 4
85111: PPUSH
85112: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
85116: LD_VAR 0 5
85120: PPUSH
85121: LD_VAR 0 2
85125: PPUSH
85126: LD_VAR 0 3
85130: PPUSH
85131: LD_INT 0
85133: PPUSH
85134: CALL_OW 48
// end ;
85138: LD_VAR 0 5
85142: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
85143: LD_INT 0
85145: PPUSH
85146: PPUSH
85147: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
85148: LD_ADDR_VAR 0 2
85152: PUSH
85153: LD_INT 0
85155: PUSH
85156: LD_INT 0
85158: PUSH
85159: LD_INT 0
85161: PUSH
85162: LD_INT 0
85164: PUSH
85165: EMPTY
85166: LIST
85167: LIST
85168: LIST
85169: LIST
85170: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
85171: LD_VAR 0 1
85175: NOT
85176: IFTRUE 85209
85178: PUSH
85179: LD_VAR 0 1
85183: PPUSH
85184: CALL_OW 264
85188: PUSH
85189: LD_INT 12
85191: PUSH
85192: LD_INT 51
85194: PUSH
85195: LD_INT 32
85197: PUSH
85198: LD_INT 89
85200: PUSH
85201: EMPTY
85202: LIST
85203: LIST
85204: LIST
85205: LIST
85206: IN
85207: NOT
85208: OR
85209: IFFALSE 85213
// exit ;
85211: GO 85311
// for i := 1 to 3 do
85213: LD_ADDR_VAR 0 3
85217: PUSH
85218: DOUBLE
85219: LD_INT 1
85221: DEC
85222: ST_TO_ADDR
85223: LD_INT 3
85225: PUSH
85226: FOR_TO
85227: IFFALSE 85309
// begin tmp := GetCargo ( cargo , i ) ;
85229: LD_ADDR_VAR 0 4
85233: PUSH
85234: LD_VAR 0 1
85238: PPUSH
85239: LD_VAR 0 3
85243: PPUSH
85244: CALL_OW 289
85248: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
85249: LD_ADDR_VAR 0 2
85253: PUSH
85254: LD_VAR 0 2
85258: PPUSH
85259: LD_VAR 0 3
85263: PPUSH
85264: LD_VAR 0 4
85268: PPUSH
85269: CALL_OW 1
85273: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
85274: LD_ADDR_VAR 0 2
85278: PUSH
85279: LD_VAR 0 2
85283: PPUSH
85284: LD_INT 4
85286: PPUSH
85287: LD_VAR 0 2
85291: PUSH
85292: LD_INT 4
85294: ARRAY
85295: PUSH
85296: LD_VAR 0 4
85300: PLUS
85301: PPUSH
85302: CALL_OW 1
85306: ST_TO_ADDR
// end ;
85307: GO 85226
85309: POP
85310: POP
// end ;
85311: LD_VAR 0 2
85315: RET
// export function Length ( array ) ; begin
85316: LD_INT 0
85318: PPUSH
// result := array + 0 ;
85319: LD_ADDR_VAR 0 2
85323: PUSH
85324: LD_VAR 0 1
85328: PUSH
85329: LD_INT 0
85331: PLUS
85332: ST_TO_ADDR
// end ;
85333: LD_VAR 0 2
85337: RET
// export function PrepareArray ( array ) ; begin
85338: LD_INT 0
85340: PPUSH
// result := array diff 0 ;
85341: LD_ADDR_VAR 0 2
85345: PUSH
85346: LD_VAR 0 1
85350: PUSH
85351: LD_INT 0
85353: DIFF
85354: ST_TO_ADDR
// if not result [ 1 ] then
85355: LD_VAR 0 2
85359: PUSH
85360: LD_INT 1
85362: ARRAY
85363: NOT
85364: IFFALSE 85384
// result := Delete ( result , 1 ) ;
85366: LD_ADDR_VAR 0 2
85370: PUSH
85371: LD_VAR 0 2
85375: PPUSH
85376: LD_INT 1
85378: PPUSH
85379: CALL_OW 3
85383: ST_TO_ADDR
// end ;
85384: LD_VAR 0 2
85388: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
85389: LD_INT 0
85391: PPUSH
85392: PPUSH
85393: PPUSH
85394: PPUSH
// sibRocketRange := 25 ;
85395: LD_ADDR_VAR 0 6
85399: PUSH
85400: LD_INT 25
85402: ST_TO_ADDR
// result := false ;
85403: LD_ADDR_VAR 0 4
85407: PUSH
85408: LD_INT 0
85410: ST_TO_ADDR
// for i := 0 to 5 do
85411: LD_ADDR_VAR 0 5
85415: PUSH
85416: DOUBLE
85417: LD_INT 0
85419: DEC
85420: ST_TO_ADDR
85421: LD_INT 5
85423: PUSH
85424: FOR_TO
85425: IFFALSE 85492
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
85427: LD_VAR 0 1
85431: PPUSH
85432: LD_VAR 0 5
85436: PPUSH
85437: LD_VAR 0 6
85441: PPUSH
85442: CALL_OW 272
85446: PPUSH
85447: LD_VAR 0 2
85451: PPUSH
85452: LD_VAR 0 5
85456: PPUSH
85457: LD_VAR 0 6
85461: PPUSH
85462: CALL_OW 273
85466: PPUSH
85467: LD_VAR 0 3
85471: PPUSH
85472: CALL_OW 309
85476: IFFALSE 85490
// begin result := true ;
85478: LD_ADDR_VAR 0 4
85482: PUSH
85483: LD_INT 1
85485: ST_TO_ADDR
// exit ;
85486: POP
85487: POP
85488: GO 85494
// end ;
85490: GO 85424
85492: POP
85493: POP
// end ;
85494: LD_VAR 0 4
85498: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
85499: LD_INT 0
85501: PPUSH
85502: PPUSH
85503: PPUSH
// if btype = b_depot then
85504: LD_VAR 0 2
85508: PUSH
85509: LD_INT 0
85511: EQUAL
85512: IFFALSE 85524
// begin result := true ;
85514: LD_ADDR_VAR 0 3
85518: PUSH
85519: LD_INT 1
85521: ST_TO_ADDR
// exit ;
85522: GO 85644
// end ; pom := GetBase ( depot ) ;
85524: LD_ADDR_VAR 0 4
85528: PUSH
85529: LD_VAR 0 1
85533: PPUSH
85534: CALL_OW 274
85538: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
85539: LD_ADDR_VAR 0 5
85543: PUSH
85544: LD_VAR 0 2
85548: PPUSH
85549: LD_VAR 0 1
85553: PPUSH
85554: CALL_OW 248
85558: PPUSH
85559: CALL_OW 450
85563: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
85564: LD_ADDR_VAR 0 3
85568: PUSH
85569: LD_VAR 0 4
85573: PPUSH
85574: LD_INT 1
85576: PPUSH
85577: CALL_OW 275
85581: PUSH
85582: LD_VAR 0 5
85586: PUSH
85587: LD_INT 1
85589: ARRAY
85590: GREATEREQUAL
85591: IFFALSE 85617
85593: PUSH
85594: LD_VAR 0 4
85598: PPUSH
85599: LD_INT 2
85601: PPUSH
85602: CALL_OW 275
85606: PUSH
85607: LD_VAR 0 5
85611: PUSH
85612: LD_INT 2
85614: ARRAY
85615: GREATEREQUAL
85616: AND
85617: IFFALSE 85643
85619: PUSH
85620: LD_VAR 0 4
85624: PPUSH
85625: LD_INT 3
85627: PPUSH
85628: CALL_OW 275
85632: PUSH
85633: LD_VAR 0 5
85637: PUSH
85638: LD_INT 3
85640: ARRAY
85641: GREATEREQUAL
85642: AND
85643: ST_TO_ADDR
// end ;
85644: LD_VAR 0 3
85648: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
85649: LD_INT 0
85651: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
85652: LD_VAR 0 1
85656: PPUSH
85657: LD_VAR 0 2
85661: PPUSH
85662: LD_INT 0
85664: PPUSH
85665: LD_INT 0
85667: PPUSH
85668: LD_INT 1
85670: PPUSH
85671: LD_INT 0
85673: PPUSH
85674: CALL_OW 587
// end ;
85678: LD_VAR 0 3
85682: RET
// export function CenterOnNow ( unit ) ; begin
85683: LD_INT 0
85685: PPUSH
// result := IsInUnit ( unit ) ;
85686: LD_ADDR_VAR 0 2
85690: PUSH
85691: LD_VAR 0 1
85695: PPUSH
85696: CALL_OW 310
85700: ST_TO_ADDR
// if not result then
85701: LD_VAR 0 2
85705: NOT
85706: IFFALSE 85718
// result := unit ;
85708: LD_ADDR_VAR 0 2
85712: PUSH
85713: LD_VAR 0 1
85717: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
85718: LD_VAR 0 1
85722: PPUSH
85723: CALL_OW 87
// end ;
85727: LD_VAR 0 2
85731: RET
// export function ComMoveHex ( unit , hex ) ; begin
85732: LD_INT 0
85734: PPUSH
// if not hex then
85735: LD_VAR 0 2
85739: NOT
85740: IFFALSE 85744
// exit ;
85742: GO 85797
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
85744: LD_VAR 0 2
85748: PUSH
85749: LD_INT 1
85751: ARRAY
85752: PPUSH
85753: LD_VAR 0 2
85757: PUSH
85758: LD_INT 2
85760: ARRAY
85761: PPUSH
85762: CALL_OW 428
85766: IFFALSE 85770
// exit ;
85768: GO 85797
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
85770: LD_VAR 0 1
85774: PPUSH
85775: LD_VAR 0 2
85779: PUSH
85780: LD_INT 1
85782: ARRAY
85783: PPUSH
85784: LD_VAR 0 2
85788: PUSH
85789: LD_INT 2
85791: ARRAY
85792: PPUSH
85793: CALL_OW 111
// end ;
85797: LD_VAR 0 3
85801: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
85802: LD_INT 0
85804: PPUSH
85805: PPUSH
85806: PPUSH
// if not unit or not enemy then
85807: LD_VAR 0 1
85811: NOT
85812: IFTRUE 85821
85814: PUSH
85815: LD_VAR 0 2
85819: NOT
85820: OR
85821: IFFALSE 85825
// exit ;
85823: GO 85951
// x := GetX ( enemy ) ;
85825: LD_ADDR_VAR 0 4
85829: PUSH
85830: LD_VAR 0 2
85834: PPUSH
85835: CALL_OW 250
85839: ST_TO_ADDR
// y := GetY ( enemy ) ;
85840: LD_ADDR_VAR 0 5
85844: PUSH
85845: LD_VAR 0 2
85849: PPUSH
85850: CALL_OW 251
85854: ST_TO_ADDR
// if ValidHex ( x , y ) then
85855: LD_VAR 0 4
85859: PPUSH
85860: LD_VAR 0 5
85864: PPUSH
85865: CALL_OW 488
85869: IFFALSE 85951
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
85871: LD_VAR 0 2
85875: PPUSH
85876: CALL_OW 247
85880: PUSH
85881: LD_INT 3
85883: PUSH
85884: LD_INT 2
85886: PUSH
85887: EMPTY
85888: LIST
85889: LIST
85890: IN
85891: IFTRUE 85914
85893: PUSH
85894: LD_VAR 0 1
85898: PPUSH
85899: CALL_OW 255
85903: PPUSH
85904: LD_VAR 0 2
85908: PPUSH
85909: CALL_OW 292
85913: OR
85914: IFFALSE 85932
// ComAttackUnit ( unit , enemy ) else
85916: LD_VAR 0 1
85920: PPUSH
85921: LD_VAR 0 2
85925: PPUSH
85926: CALL_OW 115
85930: GO 85951
// ComAgressiveMove ( unit , x , y ) ;
85932: LD_VAR 0 1
85936: PPUSH
85937: LD_VAR 0 4
85941: PPUSH
85942: LD_VAR 0 5
85946: PPUSH
85947: CALL_OW 114
// end ;
85951: LD_VAR 0 3
85955: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
85956: LD_INT 0
85958: PPUSH
85959: PPUSH
85960: PPUSH
// list := AreaToList ( area , 0 ) ;
85961: LD_ADDR_VAR 0 5
85965: PUSH
85966: LD_VAR 0 1
85970: PPUSH
85971: LD_INT 0
85973: PPUSH
85974: CALL_OW 517
85978: ST_TO_ADDR
// if not list then
85979: LD_VAR 0 5
85983: NOT
85984: IFFALSE 85988
// exit ;
85986: GO 86118
// if all then
85988: LD_VAR 0 2
85992: IFFALSE 86080
// begin for i := 1 to list [ 1 ] do
85994: LD_ADDR_VAR 0 4
85998: PUSH
85999: DOUBLE
86000: LD_INT 1
86002: DEC
86003: ST_TO_ADDR
86004: LD_VAR 0 5
86008: PUSH
86009: LD_INT 1
86011: ARRAY
86012: PUSH
86013: FOR_TO
86014: IFFALSE 86076
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
86016: LD_ADDR_VAR 0 3
86020: PUSH
86021: LD_VAR 0 3
86025: PPUSH
86026: LD_VAR 0 3
86030: PUSH
86031: LD_INT 1
86033: PLUS
86034: PPUSH
86035: LD_VAR 0 5
86039: PUSH
86040: LD_INT 1
86042: ARRAY
86043: PUSH
86044: LD_VAR 0 4
86048: ARRAY
86049: PUSH
86050: LD_VAR 0 5
86054: PUSH
86055: LD_INT 2
86057: ARRAY
86058: PUSH
86059: LD_VAR 0 4
86063: ARRAY
86064: PUSH
86065: EMPTY
86066: LIST
86067: LIST
86068: PPUSH
86069: CALL_OW 1
86073: ST_TO_ADDR
86074: GO 86013
86076: POP
86077: POP
// exit ;
86078: GO 86118
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
86080: LD_ADDR_VAR 0 3
86084: PUSH
86085: LD_VAR 0 5
86089: PUSH
86090: LD_INT 1
86092: ARRAY
86093: PUSH
86094: LD_INT 1
86096: ARRAY
86097: PUSH
86098: LD_VAR 0 5
86102: PUSH
86103: LD_INT 2
86105: ARRAY
86106: PUSH
86107: LD_INT 1
86109: ARRAY
86110: PUSH
86111: EMPTY
86112: LIST
86113: LIST
86114: PUSH
86115: EMPTY
86116: LIST
86117: ST_TO_ADDR
// end ;
86118: LD_VAR 0 3
86122: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
86123: LD_INT 0
86125: PPUSH
86126: PPUSH
// list := AreaToList ( area , 0 ) ;
86127: LD_ADDR_VAR 0 4
86131: PUSH
86132: LD_VAR 0 1
86136: PPUSH
86137: LD_INT 0
86139: PPUSH
86140: CALL_OW 517
86144: ST_TO_ADDR
// if not list then
86145: LD_VAR 0 4
86149: NOT
86150: IFFALSE 86154
// exit ;
86152: GO 86195
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
86154: LD_ADDR_VAR 0 3
86158: PUSH
86159: LD_VAR 0 4
86163: PUSH
86164: LD_INT 1
86166: ARRAY
86167: PUSH
86168: LD_INT 1
86170: ARRAY
86171: PUSH
86172: LD_VAR 0 4
86176: PUSH
86177: LD_INT 2
86179: ARRAY
86180: PUSH
86181: LD_INT 1
86183: ARRAY
86184: PUSH
86185: LD_VAR 0 2
86189: PUSH
86190: EMPTY
86191: LIST
86192: LIST
86193: LIST
86194: ST_TO_ADDR
// end ;
86195: LD_VAR 0 3
86199: RET
// export function First ( array ) ; begin
86200: LD_INT 0
86202: PPUSH
// if not array then
86203: LD_VAR 0 1
86207: NOT
86208: IFFALSE 86212
// exit ;
86210: GO 86226
// result := array [ 1 ] ;
86212: LD_ADDR_VAR 0 2
86216: PUSH
86217: LD_VAR 0 1
86221: PUSH
86222: LD_INT 1
86224: ARRAY
86225: ST_TO_ADDR
// end ;
86226: LD_VAR 0 2
86230: RET
// export function Last ( array ) ; begin
86231: LD_INT 0
86233: PPUSH
// if not array then
86234: LD_VAR 0 1
86238: NOT
86239: IFFALSE 86243
// exit ;
86241: GO 86259
// result := array [ array ] ;
86243: LD_ADDR_VAR 0 2
86247: PUSH
86248: LD_VAR 0 1
86252: PUSH
86253: LD_VAR 0 1
86257: ARRAY
86258: ST_TO_ADDR
// end ;
86259: LD_VAR 0 2
86263: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
86264: LD_INT 0
86266: PPUSH
86267: PPUSH
// result := [ ] ;
86268: LD_ADDR_VAR 0 5
86272: PUSH
86273: EMPTY
86274: ST_TO_ADDR
// if not array then
86275: LD_VAR 0 1
86279: NOT
86280: IFFALSE 86284
// exit ;
86282: GO 86396
// for i := 1 to array do
86284: LD_ADDR_VAR 0 6
86288: PUSH
86289: DOUBLE
86290: LD_INT 1
86292: DEC
86293: ST_TO_ADDR
86294: LD_VAR 0 1
86298: PUSH
86299: FOR_TO
86300: IFFALSE 86394
// if array [ i ] [ index ] = value then
86302: LD_VAR 0 1
86306: PUSH
86307: LD_VAR 0 6
86311: ARRAY
86312: PUSH
86313: LD_VAR 0 2
86317: ARRAY
86318: PUSH
86319: LD_VAR 0 3
86323: EQUAL
86324: IFFALSE 86392
// begin if indexColumn then
86326: LD_VAR 0 4
86330: IFFALSE 86366
// result := Join ( result , array [ i ] [ indexColumn ] ) else
86332: LD_ADDR_VAR 0 5
86336: PUSH
86337: LD_VAR 0 5
86341: PPUSH
86342: LD_VAR 0 1
86346: PUSH
86347: LD_VAR 0 6
86351: ARRAY
86352: PUSH
86353: LD_VAR 0 4
86357: ARRAY
86358: PPUSH
86359: CALL 81404 0 2
86363: ST_TO_ADDR
86364: GO 86392
// result := Join ( result , array [ i ] ) ;
86366: LD_ADDR_VAR 0 5
86370: PUSH
86371: LD_VAR 0 5
86375: PPUSH
86376: LD_VAR 0 1
86380: PUSH
86381: LD_VAR 0 6
86385: ARRAY
86386: PPUSH
86387: CALL 81404 0 2
86391: ST_TO_ADDR
// end ;
86392: GO 86299
86394: POP
86395: POP
// end ;
86396: LD_VAR 0 5
86400: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
86401: LD_INT 0
86403: PPUSH
// if not vehicles or not parkingPoint then
86404: LD_VAR 0 1
86408: NOT
86409: IFTRUE 86418
86411: PUSH
86412: LD_VAR 0 2
86416: NOT
86417: OR
86418: IFFALSE 86422
// exit ;
86420: GO 86520
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
86422: LD_ADDR_VAR 0 1
86426: PUSH
86427: LD_VAR 0 1
86431: PPUSH
86432: LD_INT 50
86434: PUSH
86435: EMPTY
86436: LIST
86437: PUSH
86438: LD_INT 3
86440: PUSH
86441: LD_INT 92
86443: PUSH
86444: LD_VAR 0 2
86448: PUSH
86449: LD_INT 1
86451: ARRAY
86452: PUSH
86453: LD_VAR 0 2
86457: PUSH
86458: LD_INT 2
86460: ARRAY
86461: PUSH
86462: LD_INT 8
86464: PUSH
86465: EMPTY
86466: LIST
86467: LIST
86468: LIST
86469: LIST
86470: PUSH
86471: EMPTY
86472: LIST
86473: LIST
86474: PUSH
86475: EMPTY
86476: LIST
86477: LIST
86478: PPUSH
86479: CALL_OW 72
86483: ST_TO_ADDR
// if not vehicles then
86484: LD_VAR 0 1
86488: NOT
86489: IFFALSE 86493
// exit ;
86491: GO 86520
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
86493: LD_VAR 0 1
86497: PPUSH
86498: LD_VAR 0 2
86502: PUSH
86503: LD_INT 1
86505: ARRAY
86506: PPUSH
86507: LD_VAR 0 2
86511: PUSH
86512: LD_INT 2
86514: ARRAY
86515: PPUSH
86516: CALL_OW 111
// end ;
86520: LD_VAR 0 3
86524: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
86525: LD_INT 0
86527: PPUSH
86528: PPUSH
86529: PPUSH
// if not side or not area then
86530: LD_VAR 0 1
86534: NOT
86535: IFTRUE 86544
86537: PUSH
86538: LD_VAR 0 2
86542: NOT
86543: OR
86544: IFFALSE 86548
// exit ;
86546: GO 86667
// tmp := AreaToList ( area , 0 ) ;
86548: LD_ADDR_VAR 0 5
86552: PUSH
86553: LD_VAR 0 2
86557: PPUSH
86558: LD_INT 0
86560: PPUSH
86561: CALL_OW 517
86565: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
86566: LD_ADDR_VAR 0 4
86570: PUSH
86571: DOUBLE
86572: LD_INT 1
86574: DEC
86575: ST_TO_ADDR
86576: LD_VAR 0 5
86580: PUSH
86581: LD_INT 1
86583: ARRAY
86584: PUSH
86585: FOR_TO
86586: IFFALSE 86665
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
86588: LD_VAR 0 5
86592: PUSH
86593: LD_INT 1
86595: ARRAY
86596: PUSH
86597: LD_VAR 0 4
86601: ARRAY
86602: PPUSH
86603: LD_VAR 0 5
86607: PUSH
86608: LD_INT 2
86610: ARRAY
86611: PUSH
86612: LD_VAR 0 4
86616: ARRAY
86617: PPUSH
86618: CALL_OW 351
86622: IFFALSE 86663
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
86624: LD_VAR 0 5
86628: PUSH
86629: LD_INT 1
86631: ARRAY
86632: PUSH
86633: LD_VAR 0 4
86637: ARRAY
86638: PPUSH
86639: LD_VAR 0 5
86643: PUSH
86644: LD_INT 2
86646: ARRAY
86647: PUSH
86648: LD_VAR 0 4
86652: ARRAY
86653: PPUSH
86654: LD_VAR 0 1
86658: PPUSH
86659: CALL_OW 244
// end ;
86663: GO 86585
86665: POP
86666: POP
// end ;
86667: LD_VAR 0 3
86671: RET
// export function UniqueArray ( array ) ; var i ; begin
86672: LD_INT 0
86674: PPUSH
86675: PPUSH
// result := [ ] ;
86676: LD_ADDR_VAR 0 2
86680: PUSH
86681: EMPTY
86682: ST_TO_ADDR
// if not array then
86683: LD_VAR 0 1
86687: NOT
86688: IFFALSE 86692
// exit ;
86690: GO 86753
// for i := 1 to array do
86692: LD_ADDR_VAR 0 3
86696: PUSH
86697: DOUBLE
86698: LD_INT 1
86700: DEC
86701: ST_TO_ADDR
86702: LD_VAR 0 1
86706: PUSH
86707: FOR_TO
86708: IFFALSE 86751
// if not array [ i ] in result then
86710: LD_VAR 0 1
86714: PUSH
86715: LD_VAR 0 3
86719: ARRAY
86720: PUSH
86721: LD_VAR 0 2
86725: IN
86726: NOT
86727: IFFALSE 86749
// result := Join ( result , i ) ;
86729: LD_ADDR_VAR 0 2
86733: PUSH
86734: LD_VAR 0 2
86738: PPUSH
86739: LD_VAR 0 3
86743: PPUSH
86744: CALL 81404 0 2
86748: ST_TO_ADDR
86749: GO 86707
86751: POP
86752: POP
// end ; end_of_file
86753: LD_VAR 0 2
86757: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86758: LD_VAR 0 1
86762: PUSH
86763: LD_INT 200
86765: DOUBLE
86766: GREATEREQUAL
86767: IFFALSE 86775
86769: LD_INT 299
86771: DOUBLE
86772: LESSEQUAL
86773: IFTRUE 86777
86775: GO 86809
86777: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86778: LD_VAR 0 1
86782: PPUSH
86783: LD_VAR 0 2
86787: PPUSH
86788: LD_VAR 0 3
86792: PPUSH
86793: LD_VAR 0 4
86797: PPUSH
86798: LD_VAR 0 5
86802: PPUSH
86803: CALL 37480 0 5
86807: GO 86886
86809: LD_INT 300
86811: DOUBLE
86812: GREATEREQUAL
86813: IFFALSE 86821
86815: LD_INT 399
86817: DOUBLE
86818: LESSEQUAL
86819: IFTRUE 86823
86821: GO 86885
86823: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86824: LD_VAR 0 1
86828: PPUSH
86829: LD_VAR 0 2
86833: PPUSH
86834: LD_VAR 0 3
86838: PPUSH
86839: LD_VAR 0 4
86843: PPUSH
86844: LD_VAR 0 5
86848: PPUSH
86849: LD_VAR 0 6
86853: PPUSH
86854: LD_VAR 0 7
86858: PPUSH
86859: LD_VAR 0 8
86863: PPUSH
86864: LD_VAR 0 9
86868: PPUSH
86869: LD_VAR 0 10
86873: PPUSH
86874: LD_VAR 0 11
86878: PPUSH
86879: CALL 33283 0 11
86883: GO 86886
86885: POP
// end ;
86886: PPOPN 11
86888: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86889: LD_VAR 0 1
86893: PPUSH
86894: LD_VAR 0 2
86898: PPUSH
86899: LD_VAR 0 3
86903: PPUSH
86904: LD_VAR 0 4
86908: PPUSH
86909: LD_VAR 0 5
86913: PPUSH
86914: CALL 36780 0 5
// end ; end_of_file
86918: PPOPN 5
86920: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86921: LD_VAR 0 1
86925: PPUSH
86926: LD_VAR 0 2
86930: PPUSH
86931: LD_VAR 0 3
86935: PPUSH
86936: LD_VAR 0 4
86940: PPUSH
86941: LD_VAR 0 5
86945: PPUSH
86946: LD_VAR 0 6
86950: PPUSH
86951: CALL 20823 0 6
// end ;
86955: PPOPN 6
86957: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86958: LD_INT 0
86960: PPUSH
// begin if not units then
86961: LD_VAR 0 1
86965: NOT
86966: IFFALSE 86970
// exit ;
86968: GO 87004
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
86970: LD_VAR 0 1
86974: PPUSH
86975: LD_VAR 0 2
86979: PPUSH
86980: LD_VAR 0 3
86984: PPUSH
86985: LD_VAR 0 4
86989: PPUSH
86990: LD_VAR 0 5
86994: PPUSH
86995: LD_VAR 0 6
86999: PPUSH
87000: CALL 43177 0 6
// end ;
87004: PPOPN 7
87006: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
87007: CALL 20703 0 0
// end ;
87011: PPOPN 1
87013: END
