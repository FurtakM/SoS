// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// debugMode = 0 ;
 182: LD_ADDR_EXP 45
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// PrepareDifficulty ;
 190: CALL 7587 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 194: LD_INT 43
 196: PPUSH
 197: LD_INT 22
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: LD_INT 333
 205: NEG
 206: PPUSH
 207: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 211: LD_INT 43
 213: PPUSH
 214: LD_INT 22
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 331
// PrepareGammaBase ;
 224: CALL 2635 0 0
// PrepareHeroes ;
 228: CALL 571 0 0
// PrepareRussianCommander ;
 232: CALL 6443 0 0
// PrepareRussians ;
 236: CALL 6761 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 240: LD_INT 22
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 25
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 90
 274: PPUSH
 275: LD_INT 86
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 285: LD_INT 3
 287: PPUSH
 288: LD_INT 24
 290: PPUSH
 291: LD_INT 3
 293: PPUSH
 294: LD_EXP 25
 298: PPUSH
 299: LD_EXP 26
 303: PPUSH
 304: CALL_OW 12
 308: PPUSH
 309: LD_INT 6
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL 8997 0 6
// PrepareCutsceneAttack ;
 319: CALL 6495 0 0
// end ;
 323: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 324: LD_INT 22
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 6
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: PUSH
 353: LD_INT 6
 355: GREATEREQUAL
 356: IFFALSE 368
 358: GO 360
 360: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 361: LD_STRING ACH_ARMOR
 363: PPUSH
 364: CALL_OW 543
 368: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 369: LD_EXP 45
 373: PUSH
 374: LD_INT 1
 376: EQUAL
 377: IFFALSE 568
 379: GO 381
 381: DISABLE
 382: LD_INT 0
 384: PPUSH
// begin enable ;
 385: ENABLE
// fogoff ( true ) ;
 386: LD_INT 1
 388: PPUSH
 389: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 393: LD_ADDR_VAR 0 1
 397: PUSH
 398: LD_INT 22
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 21
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PPUSH
 422: CALL_OW 69
 426: PUSH
 427: FOR_IN
 428: IFFALSE 444
// SetLives ( i , 1000 ) ;
 430: LD_VAR 0 1
 434: PPUSH
 435: LD_INT 1000
 437: PPUSH
 438: CALL_OW 234
 442: GO 427
 444: POP
 445: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 446: LD_ADDR_VAR 0 1
 450: PUSH
 451: LD_INT 22
 453: PUSH
 454: LD_INT 1
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PPUSH
 475: CALL_OW 69
 479: PUSH
 480: FOR_IN
 481: IFFALSE 505
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 483: LD_VAR 0 1
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: LD_INT 9999
 498: PPUSH
 499: CALL_OW 277
 503: GO 480
 505: POP
 506: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 507: LD_ADDR_VAR 0 1
 511: PUSH
 512: LD_INT 22
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 1
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PPUSH
 536: CALL_OW 69
 540: PUSH
 541: FOR_IN
 542: IFFALSE 566
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 544: LD_VAR 0 1
 548: PPUSH
 549: CALL_OW 274
 553: PPUSH
 554: LD_INT 2
 556: PPUSH
 557: LD_INT 9999
 559: PPUSH
 560: CALL_OW 277
 564: GO 541
 566: POP
 567: POP
// end ; end_of_file
 568: PPOPN 1
 570: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side = 1 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// uc_nation = 1 ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if gammaCommander = 1 then
 604: LD_EXP 12
 608: PUSH
 609: LD_INT 1
 611: EQUAL
 612: IFFALSE 663
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 614: LD_ADDR_EXP 3
 618: PUSH
 619: LD_STRING Donaldson
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_STRING 04_
 627: PPUSH
 628: CALL 41404 0 3
 632: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 633: LD_EXP 3
 637: PPUSH
 638: LD_INT 54
 640: PPUSH
 641: LD_INT 25
 643: PPUSH
 644: LD_INT 8
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 50
// ComHold ( Donaldson ) ;
 654: LD_EXP 3
 658: PPUSH
 659: CALL_OW 140
// end ; if gammaCommander = 2 then
 663: LD_EXP 12
 667: PUSH
 668: LD_INT 2
 670: EQUAL
 671: IFFALSE 722
// begin Brown = PrepareUnit ( Brown , true , _04 ) ;
 673: LD_ADDR_EXP 2
 677: PUSH
 678: LD_STRING Brown
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_STRING _04
 686: PPUSH
 687: CALL 41404 0 3
 691: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 54
 699: PPUSH
 700: LD_INT 25
 702: PPUSH
 703: LD_INT 8
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 50
// ComHold ( Brown ) ;
 713: LD_EXP 2
 717: PPUSH
 718: CALL_OW 140
// end ; if gammaCommander = 3 then
 722: LD_EXP 12
 726: PUSH
 727: LD_INT 3
 729: EQUAL
 730: IFFALSE 781
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 732: LD_ADDR_EXP 13
 736: PUSH
 737: LD_STRING VanHouten
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: LD_STRING 
 745: PPUSH
 746: CALL 41404 0 3
 750: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_INT 54
 758: PPUSH
 759: LD_INT 25
 761: PPUSH
 762: LD_INT 8
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 50
// ComHold ( Houten ) ;
 772: LD_EXP 13
 776: PPUSH
 777: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 781: LD_ADDR_EXP 22
 785: PUSH
 786: LD_STRING Harisson
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 41404 0 3
 799: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 23
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 41404 0 3
 818: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 819: LD_STRING 04_Lisa
 821: PUSH
 822: EMPTY
 823: LIST
 824: PPUSH
 825: CALL_OW 28
 829: PUSH
 830: LD_STRING LisaInDelta
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: PUSH
 843: LD_STRING 07_Lisa
 845: PUSH
 846: EMPTY
 847: LIST
 848: PPUSH
 849: CALL_OW 28
 853: NOT
 854: AND
 855: IFFALSE 894
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 857: LD_ADDR_EXP 6
 861: PUSH
 862: LD_STRING Lisa
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_STRING 04_
 870: PPUSH
 871: CALL 41404 0 3
 875: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 876: LD_ADDR_VAR 0 15
 880: PUSH
 881: LD_VAR 0 15
 885: PUSH
 886: LD_EXP 6
 890: ADD
 891: ST_TO_ADDR
// end else
 892: GO 949
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 894: LD_EXP 6
 898: NOT
 899: PUSH
 900: LD_STRING LisaIn07
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: NOT
 911: AND
 912: IFFALSE 949
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 914: LD_ADDR_EXP 6
 918: PUSH
 919: LD_STRING Lisa
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: LD_STRING 07_
 927: PPUSH
 928: CALL 41404 0 3
 932: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 933: LD_ADDR_VAR 0 15
 937: PUSH
 938: LD_VAR 0 15
 942: PUSH
 943: LD_EXP 6
 947: ADD
 948: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 949: LD_STRING 04_Bobby
 951: PUSH
 952: EMPTY
 953: LIST
 954: PPUSH
 955: CALL_OW 28
 959: PUSH
 960: LD_STRING BobbyInDelta
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 30
 970: NOT
 971: AND
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PUSH
 976: EMPTY
 977: LIST
 978: PPUSH
 979: CALL_OW 28
 983: NOT
 984: AND
 985: IFFALSE 1024
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 987: LD_ADDR_EXP 4
 991: PUSH
 992: LD_STRING Bobby
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_STRING 04_
1000: PPUSH
1001: CALL 41404 0 3
1005: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1006: LD_ADDR_VAR 0 15
1010: PUSH
1011: LD_VAR 0 15
1015: PUSH
1016: LD_EXP 4
1020: ADD
1021: ST_TO_ADDR
// end else
1022: GO 1079
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1024: LD_EXP 4
1028: NOT
1029: PUSH
1030: LD_STRING BobbyIn07
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: CALL_OW 30
1040: NOT
1041: AND
1042: IFFALSE 1079
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1044: LD_ADDR_EXP 4
1048: PUSH
1049: LD_STRING Bobby
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_STRING 07_
1057: PPUSH
1058: CALL 41404 0 3
1062: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1063: LD_ADDR_VAR 0 15
1067: PUSH
1068: LD_VAR 0 15
1072: PUSH
1073: LD_EXP 4
1077: ADD
1078: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1079: LD_STRING 04_Cyrus
1081: PUSH
1082: EMPTY
1083: LIST
1084: PPUSH
1085: CALL_OW 28
1089: PUSH
1090: LD_STRING CyrusInDelta
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL_OW 30
1100: NOT
1101: AND
1102: PUSH
1103: LD_STRING 07_Cyrus
1105: PUSH
1106: EMPTY
1107: LIST
1108: PPUSH
1109: CALL_OW 28
1113: NOT
1114: AND
1115: IFFALSE 1154
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1117: LD_ADDR_EXP 5
1121: PUSH
1122: LD_STRING Cyrus
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: LD_STRING 04_
1130: PPUSH
1131: CALL 41404 0 3
1135: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1136: LD_ADDR_VAR 0 15
1140: PUSH
1141: LD_VAR 0 15
1145: PUSH
1146: LD_EXP 5
1150: ADD
1151: ST_TO_ADDR
// end else
1152: GO 1209
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1154: LD_EXP 5
1158: NOT
1159: PUSH
1160: LD_STRING CyrusIn07
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: NOT
1171: AND
1172: IFFALSE 1209
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1174: LD_ADDR_EXP 5
1178: PUSH
1179: LD_STRING Cyrus
1181: PPUSH
1182: LD_INT 1
1184: PPUSH
1185: LD_STRING 07_
1187: PPUSH
1188: CALL 41404 0 3
1192: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1193: LD_ADDR_VAR 0 15
1197: PUSH
1198: LD_VAR 0 15
1202: PUSH
1203: LD_EXP 5
1207: ADD
1208: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1209: LD_STRING 04_Brown
1211: PUSH
1212: EMPTY
1213: LIST
1214: PPUSH
1215: CALL_OW 28
1219: PUSH
1220: LD_STRING BrownInDelta
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 30
1230: NOT
1231: AND
1232: PUSH
1233: LD_STRING 07_Brown
1235: PUSH
1236: EMPTY
1237: LIST
1238: PPUSH
1239: CALL_OW 28
1243: NOT
1244: AND
1245: PUSH
1246: LD_EXP 12
1250: PUSH
1251: LD_INT 2
1253: NONEQUAL
1254: AND
1255: IFFALSE 1294
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1257: LD_ADDR_EXP 2
1261: PUSH
1262: LD_STRING Brown
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_STRING 04_
1270: PPUSH
1271: CALL 41404 0 3
1275: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1276: LD_ADDR_VAR 0 15
1280: PUSH
1281: LD_VAR 0 15
1285: PUSH
1286: LD_EXP 2
1290: ADD
1291: ST_TO_ADDR
// end else
1292: GO 1359
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1294: LD_EXP 2
1298: NOT
1299: PUSH
1300: LD_STRING BrownIn07
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 30
1310: NOT
1311: AND
1312: PUSH
1313: LD_EXP 12
1317: PUSH
1318: LD_INT 2
1320: NONEQUAL
1321: AND
1322: IFFALSE 1359
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1324: LD_ADDR_EXP 2
1328: PUSH
1329: LD_STRING Brown
1331: PPUSH
1332: LD_INT 1
1334: PPUSH
1335: LD_STRING 07_
1337: PPUSH
1338: CALL 41404 0 3
1342: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1343: LD_ADDR_VAR 0 15
1347: PUSH
1348: LD_VAR 0 15
1352: PUSH
1353: LD_EXP 2
1357: ADD
1358: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1359: LD_STRING 04_Donaldson
1361: PUSH
1362: EMPTY
1363: LIST
1364: PPUSH
1365: CALL_OW 28
1369: PUSH
1370: LD_STRING DonaldsonInDelta
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 30
1380: NOT
1381: AND
1382: PUSH
1383: LD_STRING 07_Donaldson
1385: PUSH
1386: EMPTY
1387: LIST
1388: PPUSH
1389: CALL_OW 28
1393: NOT
1394: AND
1395: PUSH
1396: LD_EXP 12
1400: PUSH
1401: LD_INT 1
1403: NONEQUAL
1404: AND
1405: IFFALSE 1444
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1407: LD_ADDR_EXP 3
1411: PUSH
1412: LD_STRING Donaldson
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_STRING 04_
1420: PPUSH
1421: CALL 41404 0 3
1425: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1426: LD_ADDR_VAR 0 15
1430: PUSH
1431: LD_VAR 0 15
1435: PUSH
1436: LD_EXP 3
1440: ADD
1441: ST_TO_ADDR
// end else
1442: GO 1509
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1444: LD_EXP 3
1448: NOT
1449: PUSH
1450: LD_STRING DonaldsonIn07
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL_OW 30
1460: NOT
1461: AND
1462: PUSH
1463: LD_EXP 12
1467: PUSH
1468: LD_INT 1
1470: NONEQUAL
1471: AND
1472: IFFALSE 1509
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1474: LD_ADDR_EXP 3
1478: PUSH
1479: LD_STRING Donaldson
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: LD_STRING 07_
1487: PPUSH
1488: CALL 41404 0 3
1492: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1493: LD_ADDR_VAR 0 15
1497: PUSH
1498: LD_VAR 0 15
1502: PUSH
1503: LD_EXP 3
1507: ADD
1508: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1509: LD_STRING KhatamIn07
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 30
1519: NOT
1520: IFFALSE 1557
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1522: LD_ADDR_EXP 10
1526: PUSH
1527: LD_STRING Khatam
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_STRING 07_
1535: PPUSH
1536: CALL 41404 0 3
1540: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1541: LD_ADDR_VAR 0 15
1545: PUSH
1546: LD_VAR 0 15
1550: PUSH
1551: LD_EXP 10
1555: ADD
1556: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1557: LD_ADDR_EXP 11
1561: PUSH
1562: LD_STRING 07_othersGamma
1564: PPUSH
1565: CALL_OW 31
1569: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1570: LD_ADDR_VAR 0 14
1574: PUSH
1575: LD_INT 8
1577: PUSH
1578: LD_EXP 11
1582: MINUS
1583: ST_TO_ADDR
// if tmp then
1584: LD_VAR 0 14
1588: IFFALSE 1641
// for i = 1 to tmp do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_VAR 0 14
1604: PUSH
1605: FOR_TO
1606: IFFALSE 1639
// begin PrepareHuman ( false , 1 , 5 ) ;
1608: LD_INT 0
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 5
1616: PPUSH
1617: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1621: LD_ADDR_EXP 11
1625: PUSH
1626: LD_EXP 11
1630: PUSH
1631: CALL_OW 44
1635: ADD
1636: ST_TO_ADDR
// end ;
1637: GO 1605
1639: POP
1640: POP
// if HexInfo ( 61 , 29 ) = 0 then
1641: LD_INT 61
1643: PPUSH
1644: LD_INT 29
1646: PPUSH
1647: CALL_OW 428
1651: PUSH
1652: LD_INT 0
1654: EQUAL
1655: IFFALSE 1686
// begin bc_type := b_barracks ;
1657: LD_ADDR_OWVAR 42
1661: PUSH
1662: LD_INT 5
1664: ST_TO_ADDR
// bc_level := 6 ;
1665: LD_ADDR_OWVAR 43
1669: PUSH
1670: LD_INT 6
1672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1673: LD_INT 61
1675: PPUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_INT 5
1681: PPUSH
1682: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1686: LD_ADDR_VAR 0 13
1690: PUSH
1691: LD_INT 22
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 30
1703: PUSH
1704: LD_INT 31
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PPUSH
1715: CALL_OW 69
1719: ST_TO_ADDR
// for i in bun do
1720: LD_ADDR_VAR 0 2
1724: PUSH
1725: LD_VAR 0 13
1729: PUSH
1730: FOR_IN
1731: IFFALSE 1863
// begin x := GetX ( i ) ;
1733: LD_ADDR_VAR 0 3
1737: PUSH
1738: LD_VAR 0 2
1742: PPUSH
1743: CALL_OW 250
1747: ST_TO_ADDR
// y := GetY ( i ) ;
1748: LD_ADDR_VAR 0 4
1752: PUSH
1753: LD_VAR 0 2
1757: PPUSH
1758: CALL_OW 251
1762: ST_TO_ADDR
// d := GetDir ( i ) ;
1763: LD_ADDR_VAR 0 5
1767: PUSH
1768: LD_VAR 0 2
1772: PPUSH
1773: CALL_OW 254
1777: ST_TO_ADDR
// RemoveUnit ( i ) ;
1778: LD_VAR 0 2
1782: PPUSH
1783: CALL_OW 64
// bc_type := b_bunker ;
1787: LD_ADDR_OWVAR 42
1791: PUSH
1792: LD_INT 32
1794: ST_TO_ADDR
// bc_level := 6 ;
1795: LD_ADDR_OWVAR 43
1799: PUSH
1800: LD_INT 6
1802: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1803: LD_ADDR_VAR 0 6
1807: PUSH
1808: LD_VAR 0 3
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: LD_VAR 0 5
1822: PPUSH
1823: CALL_OW 47
1827: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1828: LD_VAR 0 6
1832: PPUSH
1833: LD_INT 5
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_VAR 0 2
1847: PUSH
1848: LD_INT 2
1850: MOD
1851: PUSH
1852: LD_INT 1
1854: PLUS
1855: ARRAY
1856: PPUSH
1857: CALL_OW 431
// end ;
1861: GO 1730
1863: POP
1864: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1865: LD_ADDR_VAR 0 9
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 30
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL_OW 69
1898: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1899: LD_ADDR_VAR 0 8
1903: PUSH
1904: LD_INT 22
1906: PUSH
1907: LD_INT 1
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 6
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 30
1929: PUSH
1930: LD_INT 7
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 30
1939: PUSH
1940: LD_INT 8
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PPUSH
1957: CALL_OW 69
1961: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1962: LD_ADDR_VAR 0 7
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 30
1979: PUSH
1980: LD_INT 3
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1996: LD_ADDR_VAR 0 12
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 30
2013: PUSH
2014: LD_INT 36
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 69
2029: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2030: LD_ADDR_VAR 0 13
2034: PUSH
2035: LD_INT 22
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 2
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 30
2060: PUSH
2061: LD_INT 32
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PPUSH
2077: CALL_OW 69
2081: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: LD_EXP 11
2091: PUSH
2092: LD_VAR 0 15
2096: ADD
2097: PUSH
2098: FOR_IN
2099: IFFALSE 2520
// begin placed := false ;
2101: LD_ADDR_VAR 0 11
2105: PUSH
2106: LD_INT 0
2108: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 257
2118: PUSH
2119: LD_INT 1
2121: EQUAL
2122: IFFALSE 2247
// begin if UnitFilter ( bun , [ f_empty ] ) then
2124: LD_VAR 0 13
2128: PPUSH
2129: LD_INT 58
2131: PUSH
2132: EMPTY
2133: LIST
2134: PPUSH
2135: CALL_OW 72
2139: IFFALSE 2178
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2141: LD_VAR 0 2
2145: PPUSH
2146: LD_VAR 0 13
2150: PPUSH
2151: LD_INT 58
2153: PUSH
2154: EMPTY
2155: LIST
2156: PPUSH
2157: CALL_OW 72
2161: PUSH
2162: LD_INT 1
2164: ARRAY
2165: PPUSH
2166: CALL_OW 52
// placed := true ;
2170: LD_ADDR_VAR 0 11
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// end ; if arm and not placed then
2178: LD_VAR 0 9
2182: PUSH
2183: LD_VAR 0 11
2187: NOT
2188: AND
2189: IFFALSE 2247
// begin for j in arm do
2191: LD_ADDR_VAR 0 10
2195: PUSH
2196: LD_VAR 0 9
2200: PUSH
2201: FOR_IN
2202: IFFALSE 2245
// if UnitsInside ( j ) < 6 then
2204: LD_VAR 0 10
2208: PPUSH
2209: CALL_OW 313
2213: PUSH
2214: LD_INT 6
2216: LESS
2217: IFFALSE 2243
// begin PlaceHumanInUnit ( i , j ) ;
2219: LD_VAR 0 2
2223: PPUSH
2224: LD_VAR 0 10
2228: PPUSH
2229: CALL_OW 52
// placed := true ;
2233: LD_ADDR_VAR 0 11
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// break ;
2241: GO 2245
// end ;
2243: GO 2201
2245: POP
2246: POP
// end ; end ; if GetClass ( i ) = 2 then
2247: LD_VAR 0 2
2251: PPUSH
2252: CALL_OW 257
2256: PUSH
2257: LD_INT 2
2259: EQUAL
2260: IFFALSE 2293
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 52
2269: PPUSH
2270: LD_INT 20
2272: PPUSH
2273: LD_INT 6
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 50
// placed := true ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// continue ;
2291: GO 2098
// end ; if GetClass ( i ) = 3 then
2293: LD_VAR 0 2
2297: PPUSH
2298: CALL_OW 257
2302: PUSH
2303: LD_INT 3
2305: EQUAL
2306: IFFALSE 2410
// if fac then
2308: LD_VAR 0 7
2312: IFFALSE 2410
// begin if ct then
2314: LD_VAR 0 12
2318: IFFALSE 2346
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: LD_VAR 0 12
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: CALL_OW 52
// placed := true ;
2338: LD_ADDR_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ST_TO_ADDR
// end ; if placed then
2346: LD_VAR 0 11
2350: IFFALSE 2354
// continue ;
2352: GO 2098
// for j in fac do
2354: LD_ADDR_VAR 0 10
2358: PUSH
2359: LD_VAR 0 7
2363: PUSH
2364: FOR_IN
2365: IFFALSE 2408
// if UnitsInside ( j ) < 6 then
2367: LD_VAR 0 10
2371: PPUSH
2372: CALL_OW 313
2376: PUSH
2377: LD_INT 6
2379: LESS
2380: IFFALSE 2406
// begin PlaceHumanInUnit ( i , j ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_VAR 0 10
2391: PPUSH
2392: CALL_OW 52
// placed := true ;
2396: LD_ADDR_VAR 0 11
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// break ;
2404: GO 2408
// end ;
2406: GO 2364
2408: POP
2409: POP
// end ; if GetClass ( i ) = 4 then
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL_OW 257
2419: PUSH
2420: LD_INT 4
2422: EQUAL
2423: IFFALSE 2487
// if lab then
2425: LD_VAR 0 8
2429: IFFALSE 2487
// begin for j in lab do
2431: LD_ADDR_VAR 0 10
2435: PUSH
2436: LD_VAR 0 8
2440: PUSH
2441: FOR_IN
2442: IFFALSE 2485
// if UnitsInside ( j ) < 6 then
2444: LD_VAR 0 10
2448: PPUSH
2449: CALL_OW 313
2453: PUSH
2454: LD_INT 6
2456: LESS
2457: IFFALSE 2483
// begin PlaceHumanInUnit ( i , j ) ;
2459: LD_VAR 0 2
2463: PPUSH
2464: LD_VAR 0 10
2468: PPUSH
2469: CALL_OW 52
// placed := true ;
2473: LD_ADDR_VAR 0 11
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// break ;
2481: GO 2485
// end ;
2483: GO 2441
2485: POP
2486: POP
// end ; if not placed then
2487: LD_VAR 0 11
2491: NOT
2492: IFFALSE 2518
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_INT 5
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: CALL_OW 49
// ComHold ( i ) ;
2509: LD_VAR 0 2
2513: PPUSH
2514: CALL_OW 140
// end ; end ;
2518: GO 2098
2520: POP
2521: POP
// if ct then
2522: LD_VAR 0 12
2526: IFFALSE 2630
// if UnitsInside ( ct [ 1 ] ) then
2528: LD_VAR 0 12
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: CALL_OW 313
2541: IFFALSE 2630
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2543: LD_ADDR_VAR 0 2
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_INT 1
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 33
2560: PUSH
2561: LD_INT 2
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL_OW 69
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2628
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2580: LD_VAR 0 2
2584: PPUSH
2585: LD_VAR 0 12
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: CALL_OW 313
2598: PUSH
2599: LD_INT 1
2601: PPUSH
2602: LD_VAR 0 12
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 313
2615: PPUSH
2616: CALL_OW 12
2620: ARRAY
2621: PPUSH
2622: CALL_OW 135
2626: GO 2577
2628: POP
2629: POP
// end ; end ;
2630: LD_VAR 0 1
2634: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2635: LD_INT 0
2637: PPUSH
2638: PPUSH
2639: PPUSH
2640: PPUSH
2641: PPUSH
2642: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2643: LD_INT 71
2645: PPUSH
2646: LD_INT 5
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2656: LD_ADDR_VAR 0 2
2660: PUSH
2661: LD_STRING GammaBase
2663: PPUSH
2664: EMPTY
2665: PPUSH
2666: CALL_OW 30
2670: ST_TO_ADDR
// if not blist then
2671: LD_VAR 0 2
2675: NOT
2676: IFFALSE 2716
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 1
2685: PUSH
2686: LD_INT 52
2688: PUSH
2689: LD_INT 12
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: LD_INT 0
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: ST_TO_ADDR
// uc_side := 1 ;
2716: LD_ADDR_OWVAR 20
2720: PUSH
2721: LD_INT 1
2723: ST_TO_ADDR
// uc_nation := 1 ;
2724: LD_ADDR_OWVAR 21
2728: PUSH
2729: LD_INT 1
2731: ST_TO_ADDR
// bc_kind1 := - 1 ;
2732: LD_ADDR_OWVAR 44
2736: PUSH
2737: LD_INT 1
2739: NEG
2740: ST_TO_ADDR
// bc_kind2 := - 1 ;
2741: LD_ADDR_OWVAR 45
2745: PUSH
2746: LD_INT 1
2748: NEG
2749: ST_TO_ADDR
// for i in blist do
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_VAR 0 2
2759: PUSH
2760: FOR_IN
2761: IFFALSE 3037
// begin bc_type := i [ 1 ] ;
2763: LD_ADDR_OWVAR 42
2767: PUSH
2768: LD_VAR 0 3
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2777: LD_ADDR_OWVAR 43
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 5
2789: ARRAY
2790: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2791: LD_OWVAR 42
2795: PUSH
2796: LD_INT 6
2798: PUSH
2799: LD_INT 7
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: IN
2806: IFFALSE 2872
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2808: LD_STRING 06_remoteVehs_1
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 30
2818: NOT
2819: IFFALSE 2847
// begin bc_type := b_lab_full ;
2821: LD_ADDR_OWVAR 42
2825: PUSH
2826: LD_INT 8
2828: ST_TO_ADDR
// bc_kind1 := 10 ;
2829: LD_ADDR_OWVAR 44
2833: PUSH
2834: LD_INT 10
2836: ST_TO_ADDR
// bc_kind2 := 15 ;
2837: LD_ADDR_OWVAR 45
2841: PUSH
2842: LD_INT 15
2844: ST_TO_ADDR
// end else
2845: GO 2872
// begin bc_type := b_lab_half ;
2847: LD_ADDR_OWVAR 42
2851: PUSH
2852: LD_INT 7
2854: ST_TO_ADDR
// bc_kind1 := 10 ;
2855: LD_ADDR_OWVAR 44
2859: PUSH
2860: LD_INT 10
2862: ST_TO_ADDR
// bc_kind2 := - 1 ;
2863: LD_ADDR_OWVAR 45
2867: PUSH
2868: LD_INT 1
2870: NEG
2871: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2872: LD_OWVAR 42
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: IFFALSE 2890
// bc_type := b_factory ;
2882: LD_ADDR_OWVAR 42
2886: PUSH
2887: LD_INT 3
2889: ST_TO_ADDR
// if bc_type = b_depot then
2890: LD_OWVAR 42
2894: PUSH
2895: LD_INT 0
2897: EQUAL
2898: IFFALSE 2947
// begin bc_type := b_warehouse ;
2900: LD_ADDR_OWVAR 42
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2908: LD_ADDR_EXP 37
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PUSH
2927: LD_INT 3
2929: ARRAY
2930: PPUSH
2931: LD_VAR 0 3
2935: PUSH
2936: LD_INT 4
2938: ARRAY
2939: PPUSH
2940: CALL_OW 47
2944: ST_TO_ADDR
// continue ;
2945: GO 2760
// end ; if bc_type = b_armoury then
2947: LD_OWVAR 42
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2965
// bc_type = b_barracks ;
2957: LD_ADDR_OWVAR 42
2961: PUSH
2962: LD_INT 5
2964: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2965: LD_ADDR_VAR 0 4
2969: PUSH
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 3
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 4
2995: ARRAY
2996: PPUSH
2997: CALL_OW 47
3001: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3002: LD_VAR 0 4
3006: PPUSH
3007: CALL_OW 266
3011: PUSH
3012: LD_INT 32
3014: EQUAL
3015: IFFALSE 3035
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3017: LD_VAR 0 4
3021: PPUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_INT 7
3029: ARRAY
3030: PPUSH
3031: CALL_OW 431
// end ;
3035: GO 2760
3037: POP
3038: POP
// if not amDepot then
3039: LD_EXP 37
3043: NOT
3044: IFFALSE 3081
// begin bc_type := b_warehouse ;
3046: LD_ADDR_OWVAR 42
3050: PUSH
3051: LD_INT 1
3053: ST_TO_ADDR
// bc_level := 6 ;
3054: LD_ADDR_OWVAR 43
3058: PUSH
3059: LD_INT 6
3061: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3062: LD_ADDR_EXP 37
3066: PUSH
3067: LD_INT 52
3069: PPUSH
3070: LD_INT 12
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: CALL_OW 47
3080: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3081: LD_EXP 37
3085: PPUSH
3086: LD_STRING gamma
3088: PPUSH
3089: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3093: LD_EXP 37
3097: PPUSH
3098: CALL_OW 274
3102: PPUSH
3103: LD_INT 1
3105: PPUSH
3106: LD_INT 500
3108: PUSH
3109: LD_INT 420
3111: PUSH
3112: LD_INT 350
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_OWVAR 67
3124: ARRAY
3125: PPUSH
3126: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3130: LD_EXP 37
3134: PPUSH
3135: CALL_OW 274
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: LD_INT 200
3145: PPUSH
3146: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3150: LD_INT 22
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: IFFALSE 3426
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3180: LD_ADDR_VAR 0 4
3184: PUSH
3185: LD_INT 22
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 30
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 1
3216: ARRAY
3217: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3218: LD_ADDR_VAR 0 6
3222: PUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: CALL_OW 250
3232: PPUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: CALL_OW 251
3242: PPUSH
3243: LD_VAR 0 4
3247: PPUSH
3248: CALL_OW 254
3252: PPUSH
3253: CALL 75029 0 3
3257: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3258: LD_ADDR_VAR 0 2
3262: PUSH
3263: LD_INT 19
3265: PUSH
3266: LD_INT 17
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3273: LD_STRING 06_remoteVehs_1
3275: PPUSH
3276: LD_INT 0
3278: PPUSH
3279: CALL_OW 30
3283: IFFALSE 3306
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3285: LD_ADDR_VAR 0 2
3289: PUSH
3290: LD_VAR 0 2
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 22
3300: PPUSH
3301: CALL_OW 2
3305: ST_TO_ADDR
// for i in tmp do
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_VAR 0 6
3315: PUSH
3316: FOR_IN
3317: IFFALSE 3424
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3319: LD_VAR 0 3
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: LD_VAR 0 3
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: CALL_OW 428
3341: PUSH
3342: LD_INT 0
3344: EQUAL
3345: IFFALSE 3422
// begin bc_type := blist [ 1 ] ;
3347: LD_ADDR_OWVAR 42
3351: PUSH
3352: LD_VAR 0 2
3356: PUSH
3357: LD_INT 1
3359: ARRAY
3360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3361: LD_VAR 0 3
3365: PUSH
3366: LD_INT 1
3368: ARRAY
3369: PPUSH
3370: LD_VAR 0 3
3374: PUSH
3375: LD_INT 2
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 3
3383: PUSH
3384: LD_INT 3
3386: ARRAY
3387: PPUSH
3388: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3392: LD_ADDR_VAR 0 2
3396: PUSH
3397: LD_VAR 0 2
3401: PPUSH
3402: LD_INT 1
3404: PPUSH
3405: CALL_OW 3
3409: ST_TO_ADDR
// if blist = 0 then
3410: LD_VAR 0 2
3414: PUSH
3415: LD_INT 0
3417: EQUAL
3418: IFFALSE 3422
// break ;
3420: GO 3424
// end ;
3422: GO 3316
3424: POP
3425: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3426: LD_STRING 06_remoteVehs_1
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 30
3436: IFFALSE 3895
// begin bc_type = 36 ;
3438: LD_ADDR_OWVAR 42
3442: PUSH
3443: LD_INT 36
3445: ST_TO_ADDR
// bc_level = 4 ;
3446: LD_ADDR_OWVAR 43
3450: PUSH
3451: LD_INT 4
3453: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3454: LD_EXP 37
3458: PPUSH
3459: LD_INT 36
3461: PPUSH
3462: LD_INT 62
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 3
3470: PPUSH
3471: LD_INT 0
3473: PPUSH
3474: CALL 16964 0 6
3478: PUSH
3479: LD_INT 92
3481: PUSH
3482: LD_INT 62
3484: PUSH
3485: LD_INT 12
3487: PUSH
3488: LD_INT 3
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PPUSH
3497: CALL_OW 69
3501: NOT
3502: AND
3503: IFFALSE 3520
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3505: LD_INT 62
3507: PPUSH
3508: LD_INT 12
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: CALL_OW 47
3518: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3520: LD_EXP 37
3524: PPUSH
3525: LD_INT 36
3527: PPUSH
3528: LD_INT 37
3530: PPUSH
3531: LD_INT 18
3533: PPUSH
3534: LD_INT 2
3536: PPUSH
3537: LD_INT 0
3539: PPUSH
3540: CALL 16964 0 6
3544: PUSH
3545: LD_INT 92
3547: PUSH
3548: LD_INT 37
3550: PUSH
3551: LD_INT 18
3553: PUSH
3554: LD_INT 3
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PPUSH
3563: CALL_OW 69
3567: NOT
3568: AND
3569: IFFALSE 3586
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3571: LD_INT 37
3573: PPUSH
3574: LD_INT 18
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 47
3584: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3586: LD_EXP 37
3590: PPUSH
3591: LD_INT 36
3593: PPUSH
3594: LD_INT 66
3596: PPUSH
3597: LD_INT 14
3599: PPUSH
3600: LD_INT 4
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 16964 0 6
3610: PUSH
3611: LD_INT 92
3613: PUSH
3614: LD_INT 66
3616: PUSH
3617: LD_INT 14
3619: PUSH
3620: LD_INT 3
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: CALL_OW 69
3633: NOT
3634: AND
3635: IFFALSE 3652
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3637: LD_INT 66
3639: PPUSH
3640: LD_INT 14
3642: PPUSH
3643: LD_INT 4
3645: PPUSH
3646: CALL_OW 47
3650: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3652: LD_EXP 37
3656: PPUSH
3657: LD_INT 36
3659: PPUSH
3660: LD_INT 74
3662: PPUSH
3663: LD_INT 26
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: LD_INT 0
3671: PPUSH
3672: CALL 16964 0 6
3676: IFFALSE 3691
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3678: LD_INT 74
3680: PPUSH
3681: LD_INT 26
3683: PPUSH
3684: LD_INT 4
3686: PPUSH
3687: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3691: LD_INT 22
3693: PUSH
3694: LD_INT 1
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 30
3703: PUSH
3704: LD_INT 36
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: NOT
3720: IFFALSE 3724
// exit ;
3722: GO 3895
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: DOUBLE
3730: LD_INT 1
3732: DEC
3733: ST_TO_ADDR
3734: LD_INT 3
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: PUSH
3748: LD_OWVAR 67
3752: ARRAY
3753: PUSH
3754: FOR_TO
3755: IFFALSE 3893
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3757: LD_ADDR_OWVAR 37
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 3
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 1
3777: PPUSH
3778: LD_INT 2
3780: PPUSH
3781: CALL_OW 12
3785: ARRAY
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_OWVAR 67
3799: ARRAY
3800: ST_TO_ADDR
// vc_engine = 1 ;
3801: LD_ADDR_OWVAR 39
3805: PUSH
3806: LD_INT 1
3808: ST_TO_ADDR
// vc_control = 2 ;
3809: LD_ADDR_OWVAR 38
3813: PUSH
3814: LD_INT 2
3816: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3817: LD_ADDR_OWVAR 40
3821: PUSH
3822: LD_INT 3
3824: PUSH
3825: LD_INT 4
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 3
3841: PPUSH
3842: CALL_OW 12
3846: ARRAY
3847: ST_TO_ADDR
// veh = CreateVehicle ;
3848: LD_ADDR_VAR 0 5
3852: PUSH
3853: CALL_OW 45
3857: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_INT 4
3865: PPUSH
3866: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_INT 56
3877: PPUSH
3878: LD_INT 17
3880: PPUSH
3881: LD_INT 9
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 50
// end ;
3891: GO 3754
3893: POP
3894: POP
// end ; end ;
3895: LD_VAR 0 1
3899: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3900: LD_INT 0
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
// uc_side = 1 ;
3906: LD_ADDR_OWVAR 20
3910: PUSH
3911: LD_INT 1
3913: ST_TO_ADDR
// uc_nation = 1 ;
3914: LD_ADDR_OWVAR 21
3918: PUSH
3919: LD_INT 1
3921: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3922: LD_ADDR_EXP 14
3926: PUSH
3927: LD_STRING Denis
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_STRING 06c_
3935: PPUSH
3936: CALL 41404 0 3
3940: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3941: LD_EXP 14
3945: PPUSH
3946: LD_INT 4
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3956: LD_ADDR_EXP 15
3960: PUSH
3961: LD_STRING Joan
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: LD_STRING 06c_
3969: PPUSH
3970: CALL 41404 0 3
3974: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3975: LD_EXP 15
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: LD_INT 0
3985: PPUSH
3986: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3990: LD_STRING GladstoneIn07
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: CALL_OW 30
4000: NOT
4001: IFFALSE 4075
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4003: LD_ADDR_EXP 8
4007: PUSH
4008: LD_STRING Gladstone
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING 06c_
4016: PPUSH
4017: CALL 41404 0 3
4021: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4022: LD_EXP 8
4026: NOT
4027: PUSH
4028: LD_STRING GladstoneStayInDelta
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 30
4038: AND
4039: IFFALSE 4060
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4041: LD_ADDR_EXP 8
4045: PUSH
4046: LD_STRING Gladstone
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: LD_STRING 05_
4054: PPUSH
4055: CALL 41404 0 3
4059: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4060: LD_EXP 8
4064: PPUSH
4065: LD_INT 4
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4075: LD_STRING LisaStayInDelta
4077: PPUSH
4078: LD_INT 0
4080: PPUSH
4081: CALL_OW 30
4085: IFFALSE 4121
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4087: LD_ADDR_EXP 6
4091: PUSH
4092: LD_STRING Lisa
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: LD_STRING 05_
4100: PPUSH
4101: CALL 41404 0 3
4105: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4106: LD_EXP 6
4110: PPUSH
4111: LD_INT 4
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4121: LD_STRING BobbyStayInDelta
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 30
4131: IFFALSE 4167
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_STRING Bobby
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_STRING 05_
4146: PPUSH
4147: CALL 41404 0 3
4151: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4152: LD_EXP 4
4156: PPUSH
4157: LD_INT 4
4159: PPUSH
4160: LD_INT 0
4162: PPUSH
4163: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4167: LD_STRING CyrusStayInDelta
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL_OW 30
4177: IFFALSE 4213
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4179: LD_ADDR_EXP 5
4183: PUSH
4184: LD_STRING Cyrus
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: LD_STRING 05_
4192: PPUSH
4193: CALL 41404 0 3
4197: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4198: LD_EXP 5
4202: PPUSH
4203: LD_INT 4
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4213: LD_STRING BrownStayInDelta
4215: PPUSH
4216: LD_INT 0
4218: PPUSH
4219: CALL_OW 30
4223: IFFALSE 4259
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4225: LD_ADDR_EXP 2
4229: PUSH
4230: LD_STRING Brown
4232: PPUSH
4233: LD_INT 1
4235: PPUSH
4236: LD_STRING 05_
4238: PPUSH
4239: CALL 41404 0 3
4243: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4244: LD_EXP 2
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_INT 0
4254: PPUSH
4255: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4259: LD_STRING DonaldsonStayInDelta
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL_OW 30
4269: IFFALSE 4305
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4271: LD_ADDR_EXP 3
4275: PUSH
4276: LD_STRING Donaldson
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_STRING 05_
4284: PPUSH
4285: CALL 41404 0 3
4289: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4290: LD_EXP 3
4294: PPUSH
4295: LD_INT 4
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4305: LD_ADDR_VAR 0 4
4309: PUSH
4310: LD_STRING OthersStayInDelta
4312: PPUSH
4313: CALL_OW 31
4317: ST_TO_ADDR
// if other > 2 then
4318: LD_VAR 0 4
4322: PUSH
4323: LD_INT 2
4325: GREATER
4326: IFFALSE 4371
// begin for j = 1 to 2 do
4328: LD_ADDR_VAR 0 3
4332: PUSH
4333: DOUBLE
4334: LD_INT 1
4336: DEC
4337: ST_TO_ADDR
4338: LD_INT 2
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4367
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4344: LD_VAR 0 4
4348: PUSH
4349: LD_VAR 0 3
4353: ARRAY
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
4365: GO 4341
4367: POP
4368: POP
// end else
4369: GO 4414
// begin for j = 1 to other do
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: DOUBLE
4377: LD_INT 1
4379: DEC
4380: ST_TO_ADDR
4381: LD_VAR 0 4
4385: PUSH
4386: FOR_TO
4387: IFFALSE 4412
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4389: LD_VAR 0 4
4393: PUSH
4394: LD_VAR 0 3
4398: ARRAY
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 49
4410: GO 4386
4412: POP
4413: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4414: LD_ADDR_VAR 0 4
4418: PUSH
4419: LD_STRING 06_other_apemans
4421: PPUSH
4422: CALL_OW 31
4426: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4427: LD_VAR 0 4
4431: PUSH
4432: LD_INT 5
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_OWVAR 67
4450: ARRAY
4451: GREATEREQUAL
4452: IFFALSE 4481
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 5
4461: PUSH
4462: LD_INT 4
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: ST_TO_ADDR
4479: GO 4491
// j := other ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: LD_VAR 0 4
4490: ST_TO_ADDR
// for i = 1 to j do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 3
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4532
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4509: LD_VAR 0 4
4513: PUSH
4514: LD_VAR 0 2
4518: ARRAY
4519: PPUSH
4520: LD_INT 4
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
4530: GO 4506
4532: POP
4533: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 22
4539: PUSH
4540: LD_INT 1
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 21
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 70
4565: PPUSH
4566: LD_INT 53
4568: PPUSH
4569: LD_INT 19
4571: PPUSH
4572: CALL_OW 111
// firstAttack = 1 ;
4576: LD_ADDR_EXP 33
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// end ;
4584: LD_VAR 0 1
4588: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4589: LD_INT 0
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4600: LD_ADDR_VAR 0 8
4604: PUSH
4605: LD_STRING 07_vehicles
4607: PPUSH
4608: EMPTY
4609: PPUSH
4610: CALL_OW 30
4614: ST_TO_ADDR
// macmilan_squad := [ ] ;
4615: LD_ADDR_EXP 42
4619: PUSH
4620: EMPTY
4621: ST_TO_ADDR
// tmp_vehs := [ ] ;
4622: LD_ADDR_VAR 0 7
4626: PUSH
4627: EMPTY
4628: ST_TO_ADDR
// uc_side := 1 ;
4629: LD_ADDR_OWVAR 20
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// uc_nation := 1 ;
4637: LD_ADDR_OWVAR 21
4641: PUSH
4642: LD_INT 1
4644: ST_TO_ADDR
// if vehicles then
4645: LD_VAR 0 8
4649: IFFALSE 4808
// begin k := 1 ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_VAR 0 8
4673: PUSH
4674: LD_INT 4
4676: DIV
4677: PUSH
4678: FOR_TO
4679: IFFALSE 4806
// begin vc_chassis = vehicles [ k ] ;
4681: LD_ADDR_OWVAR 37
4685: PUSH
4686: LD_VAR 0 8
4690: PUSH
4691: LD_VAR 0 3
4695: ARRAY
4696: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4697: LD_ADDR_OWVAR 39
4701: PUSH
4702: LD_VAR 0 8
4706: PUSH
4707: LD_VAR 0 3
4711: PUSH
4712: LD_INT 1
4714: PLUS
4715: ARRAY
4716: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4717: LD_ADDR_OWVAR 38
4721: PUSH
4722: LD_VAR 0 8
4726: PUSH
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 2
4734: PLUS
4735: ARRAY
4736: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4737: LD_ADDR_OWVAR 40
4741: PUSH
4742: LD_VAR 0 8
4746: PUSH
4747: LD_VAR 0 3
4751: PUSH
4752: LD_INT 3
4754: PLUS
4755: ARRAY
4756: ST_TO_ADDR
// k := k + 4 ;
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 4
4769: PLUS
4770: ST_TO_ADDR
// veh := CreateVehicle ;
4771: LD_ADDR_VAR 0 9
4775: PUSH
4776: CALL_OW 45
4780: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4781: LD_ADDR_VAR 0 7
4785: PUSH
4786: LD_VAR 0 7
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: LD_VAR 0 9
4798: PPUSH
4799: CALL_OW 2
4803: ST_TO_ADDR
// end ;
4804: GO 4678
4806: POP
4807: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4808: LD_ADDR_EXP 1
4812: PUSH
4813: LD_STRING JMM
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: LD_EXP 44
4823: PPUSH
4824: CALL 41404 0 3
4828: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4829: LD_EXP 12
4833: PUSH
4834: LD_INT 1
4836: EQUAL
4837: PUSH
4838: LD_EXP 12
4842: PUSH
4843: LD_INT 3
4845: EQUAL
4846: OR
4847: PUSH
4848: LD_EXP 2
4852: NOT
4853: AND
4854: IFFALSE 4906
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4856: LD_ADDR_EXP 2
4860: PUSH
4861: LD_STRING Brown
4863: PPUSH
4864: LD_INT 1
4866: PPUSH
4867: LD_EXP 44
4871: PPUSH
4872: CALL 41404 0 3
4876: ST_TO_ADDR
// if Brown then
4877: LD_EXP 2
4881: IFFALSE 4906
// tmp := Insert ( tmp , 1 , Brown ) ;
4883: LD_ADDR_VAR 0 6
4887: PUSH
4888: LD_VAR 0 6
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_EXP 2
4900: PPUSH
4901: CALL_OW 2
4905: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4906: LD_EXP 12
4910: PUSH
4911: LD_INT 2
4913: EQUAL
4914: PUSH
4915: LD_EXP 12
4919: PUSH
4920: LD_INT 3
4922: EQUAL
4923: OR
4924: PUSH
4925: LD_EXP 3
4929: NOT
4930: AND
4931: IFFALSE 4983
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4933: LD_ADDR_EXP 3
4937: PUSH
4938: LD_STRING Donaldson
4940: PPUSH
4941: LD_INT 1
4943: PPUSH
4944: LD_EXP 44
4948: PPUSH
4949: CALL 41404 0 3
4953: ST_TO_ADDR
// if Donaldson then
4954: LD_EXP 3
4958: IFFALSE 4983
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4960: LD_ADDR_VAR 0 6
4964: PUSH
4965: LD_VAR 0 6
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_EXP 3
4977: PPUSH
4978: CALL_OW 2
4982: ST_TO_ADDR
// end ; if not Bobby then
4983: LD_EXP 4
4987: NOT
4988: IFFALSE 5040
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
4990: LD_ADDR_EXP 4
4994: PUSH
4995: LD_STRING Bobby
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: LD_EXP 44
5005: PPUSH
5006: CALL 41404 0 3
5010: ST_TO_ADDR
// if Bobby then
5011: LD_EXP 4
5015: IFFALSE 5040
// tmp := Insert ( tmp , 1 , Bobby ) ;
5017: LD_ADDR_VAR 0 6
5021: PUSH
5022: LD_VAR 0 6
5026: PPUSH
5027: LD_INT 1
5029: PPUSH
5030: LD_EXP 4
5034: PPUSH
5035: CALL_OW 2
5039: ST_TO_ADDR
// end ; if not Cyrus then
5040: LD_EXP 5
5044: NOT
5045: IFFALSE 5097
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5047: LD_ADDR_EXP 5
5051: PUSH
5052: LD_STRING Cyrus
5054: PPUSH
5055: LD_INT 1
5057: PPUSH
5058: LD_EXP 44
5062: PPUSH
5063: CALL 41404 0 3
5067: ST_TO_ADDR
// if Cyrus then
5068: LD_EXP 5
5072: IFFALSE 5097
// tmp := Insert ( tmp , 1 , Cyrus ) ;
5074: LD_ADDR_VAR 0 6
5078: PUSH
5079: LD_VAR 0 6
5083: PPUSH
5084: LD_INT 1
5086: PPUSH
5087: LD_EXP 5
5091: PPUSH
5092: CALL_OW 2
5096: ST_TO_ADDR
// end ; if not Lisa then
5097: LD_EXP 6
5101: NOT
5102: IFFALSE 5154
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5104: LD_ADDR_EXP 6
5108: PUSH
5109: LD_STRING Lisa
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: LD_EXP 44
5119: PPUSH
5120: CALL 41404 0 3
5124: ST_TO_ADDR
// if Lisa then
5125: LD_EXP 6
5129: IFFALSE 5154
// tmp := Insert ( tmp , 1 , Lisa ) ;
5131: LD_ADDR_VAR 0 6
5135: PUSH
5136: LD_VAR 0 6
5140: PPUSH
5141: LD_INT 1
5143: PPUSH
5144: LD_EXP 6
5148: PPUSH
5149: CALL_OW 2
5153: ST_TO_ADDR
// end ; if not Frank then
5154: LD_EXP 7
5158: NOT
5159: IFFALSE 5211
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5161: LD_ADDR_EXP 7
5165: PUSH
5166: LD_STRING Frank
5168: PPUSH
5169: LD_INT 1
5171: PPUSH
5172: LD_EXP 44
5176: PPUSH
5177: CALL 41404 0 3
5181: ST_TO_ADDR
// if Frank then
5182: LD_EXP 7
5186: IFFALSE 5211
// tmp := Insert ( tmp , 1 , Frank ) ;
5188: LD_ADDR_VAR 0 6
5192: PUSH
5193: LD_VAR 0 6
5197: PPUSH
5198: LD_INT 1
5200: PPUSH
5201: LD_EXP 7
5205: PPUSH
5206: CALL_OW 2
5210: ST_TO_ADDR
// end ; if not Kikuchi then
5211: LD_EXP 9
5215: NOT
5216: IFFALSE 5268
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5218: LD_ADDR_EXP 9
5222: PUSH
5223: LD_STRING Kikuchi
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: LD_EXP 44
5233: PPUSH
5234: CALL 41404 0 3
5238: ST_TO_ADDR
// if Kikuchi then
5239: LD_EXP 9
5243: IFFALSE 5268
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5245: LD_ADDR_VAR 0 6
5249: PUSH
5250: LD_VAR 0 6
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: LD_EXP 9
5262: PPUSH
5263: CALL_OW 2
5267: ST_TO_ADDR
// end ; if not Gladstone then
5268: LD_EXP 8
5272: NOT
5273: IFFALSE 5325
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5275: LD_ADDR_EXP 8
5279: PUSH
5280: LD_STRING Gladstone
5282: PPUSH
5283: LD_INT 1
5285: PPUSH
5286: LD_EXP 44
5290: PPUSH
5291: CALL 41404 0 3
5295: ST_TO_ADDR
// if Gladstone then
5296: LD_EXP 8
5300: IFFALSE 5325
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5302: LD_ADDR_VAR 0 6
5306: PUSH
5307: LD_VAR 0 6
5311: PPUSH
5312: LD_INT 1
5314: PPUSH
5315: LD_EXP 8
5319: PPUSH
5320: CALL_OW 2
5324: ST_TO_ADDR
// end ; if not Khatam then
5325: LD_EXP 10
5329: NOT
5330: IFFALSE 5382
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5332: LD_ADDR_EXP 10
5336: PUSH
5337: LD_STRING Khatam
5339: PPUSH
5340: LD_INT 1
5342: PPUSH
5343: LD_EXP 44
5347: PPUSH
5348: CALL 41404 0 3
5352: ST_TO_ADDR
// if Khatam then
5353: LD_EXP 10
5357: IFFALSE 5382
// tmp := Insert ( tmp , 1 , Khatam ) ;
5359: LD_ADDR_VAR 0 6
5363: PUSH
5364: LD_VAR 0 6
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_EXP 10
5376: PPUSH
5377: CALL_OW 2
5381: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_STRING 07c_others
5389: PPUSH
5390: CALL_OW 31
5394: ST_TO_ADDR
// macmilan_squad := others ;
5395: LD_ADDR_EXP 42
5399: PUSH
5400: LD_VAR 0 5
5404: ST_TO_ADDR
// if others then
5405: LD_VAR 0 5
5409: IFFALSE 5497
// for i in others do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 5
5420: PUSH
5421: FOR_IN
5422: IFFALSE 5495
// if GetClass ( i ) = 3 then
5424: LD_VAR 0 2
5428: PPUSH
5429: CALL_OW 257
5433: PUSH
5434: LD_INT 3
5436: EQUAL
5437: IFFALSE 5464
// tmp := Insert ( tmp , 1 , i ) else
5439: LD_ADDR_VAR 0 6
5443: PUSH
5444: LD_VAR 0 6
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_VAR 0 2
5456: PPUSH
5457: CALL_OW 2
5461: ST_TO_ADDR
5462: GO 5493
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_VAR 0 6
5473: PPUSH
5474: LD_VAR 0 6
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: PPUSH
5483: LD_VAR 0 2
5487: PPUSH
5488: CALL_OW 2
5492: ST_TO_ADDR
5493: GO 5421
5495: POP
5496: POP
// wait ( 0 0$1 ) ;
5497: LD_INT 35
5499: PPUSH
5500: CALL_OW 67
// for i in tmp do
5504: LD_ADDR_VAR 0 2
5508: PUSH
5509: LD_VAR 0 6
5513: PUSH
5514: FOR_IN
5515: IFFALSE 5667
// begin SetDir ( i , 3 ) ;
5517: LD_VAR 0 2
5521: PPUSH
5522: LD_INT 3
5524: PPUSH
5525: CALL_OW 233
// if tmp_vehs then
5529: LD_VAR 0 7
5533: IFFALSE 5608
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5535: LD_VAR 0 7
5539: PUSH
5540: LD_INT 1
5542: ARRAY
5543: PPUSH
5544: LD_INT 3
5546: PPUSH
5547: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5551: LD_VAR 0 7
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: LD_INT 4
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5570: LD_VAR 0 2
5574: PPUSH
5575: LD_VAR 0 7
5579: PUSH
5580: LD_INT 1
5582: ARRAY
5583: PPUSH
5584: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5588: LD_ADDR_VAR 0 7
5592: PUSH
5593: LD_VAR 0 7
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: CALL_OW 3
5605: ST_TO_ADDR
// end else
5606: GO 5623
// PlaceUnitArea ( i , GammaSupport , false ) ;
5608: LD_VAR 0 2
5612: PPUSH
5613: LD_INT 4
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5623: LD_VAR 0 2
5627: PPUSH
5628: LD_INT 77
5630: PPUSH
5631: LD_INT 16
5633: PPUSH
5634: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5638: LD_INT 35
5640: PPUSH
5641: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5645: LD_INT 4
5647: PPUSH
5648: LD_INT 22
5650: PUSH
5651: LD_INT 1
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 70
5662: NOT
5663: IFFALSE 5638
// end ;
5665: GO 5514
5667: POP
5668: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5669: LD_EXP 1
5673: PPUSH
5674: LD_INT 4
5676: PPUSH
5677: LD_INT 0
5679: PPUSH
5680: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5684: LD_EXP 1
5688: PPUSH
5689: LD_INT 77
5691: PPUSH
5692: LD_INT 16
5694: PPUSH
5695: CALL_OW 111
// end ;
5699: LD_VAR 0 1
5703: RET
// export function PrepareSikorsky ; begin
5704: LD_INT 0
5706: PPUSH
// uc_side = 4 ;
5707: LD_ADDR_OWVAR 20
5711: PUSH
5712: LD_INT 4
5714: ST_TO_ADDR
// uc_nation = 1 ;
5715: LD_ADDR_OWVAR 21
5719: PUSH
5720: LD_INT 1
5722: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5723: LD_ADDR_EXP 16
5727: PUSH
5728: LD_STRING Sikorski
5730: PPUSH
5731: LD_INT 0
5733: PPUSH
5734: LD_STRING 
5736: PPUSH
5737: CALL 41404 0 3
5741: ST_TO_ADDR
// vc_engine = 1 ;
5742: LD_ADDR_OWVAR 39
5746: PUSH
5747: LD_INT 1
5749: ST_TO_ADDR
// vc_control = 1 ;
5750: LD_ADDR_OWVAR 38
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5758: LD_ADDR_OWVAR 40
5762: PUSH
5763: LD_INT 5
5765: PUSH
5766: LD_INT 3
5768: PUSH
5769: LD_INT 4
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: LIST
5776: PUSH
5777: LD_OWVAR 67
5781: ARRAY
5782: ST_TO_ADDR
// vc_chassis = 4 ;
5783: LD_ADDR_OWVAR 37
5787: PUSH
5788: LD_INT 4
5790: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5791: LD_ADDR_EXP 17
5795: PUSH
5796: CALL_OW 45
5800: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5801: LD_EXP 17
5805: PPUSH
5806: LD_INT 3
5808: PPUSH
5809: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5813: LD_INT 35
5815: PPUSH
5816: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5820: LD_EXP 17
5824: PPUSH
5825: LD_INT 18
5827: PPUSH
5828: LD_INT 5
5830: PPUSH
5831: LD_INT 0
5833: PPUSH
5834: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5838: LD_EXP 17
5842: PPUSH
5843: CALL_OW 305
5847: IFFALSE 5813
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5849: LD_EXP 16
5853: PPUSH
5854: LD_EXP 17
5858: PPUSH
5859: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5863: LD_EXP 17
5867: PPUSH
5868: LD_INT 5
5870: PPUSH
5871: CALL_OW 113
// end ;
5875: LD_VAR 0 1
5879: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// InitHc ;
5886: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 ] [ Difficulty ] do
5890: LD_ADDR_VAR 0 2
5894: PUSH
5895: DOUBLE
5896: LD_INT 1
5898: DEC
5899: ST_TO_ADDR
5900: LD_INT 5
5902: PUSH
5903: LD_INT 4
5905: PUSH
5906: LD_INT 4
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: PUSH
5914: LD_OWVAR 67
5918: ARRAY
5919: PUSH
5920: FOR_TO
5921: IFFALSE 6037
// begin uc_side = 4 ;
5923: LD_ADDR_OWVAR 20
5927: PUSH
5928: LD_INT 4
5930: ST_TO_ADDR
// uc_nation = 1 ;
5931: LD_ADDR_OWVAR 21
5935: PUSH
5936: LD_INT 1
5938: ST_TO_ADDR
// hc_name =  ;
5939: LD_ADDR_OWVAR 26
5943: PUSH
5944: LD_STRING 
5946: ST_TO_ADDR
// hc_gallery =  ;
5947: LD_ADDR_OWVAR 33
5951: PUSH
5952: LD_STRING 
5954: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5955: LD_INT 0
5957: PPUSH
5958: LD_INT 1
5960: PPUSH
5961: LD_INT 5
5963: PPUSH
5964: LD_INT 8
5966: PPUSH
5967: CALL_OW 12
5971: PPUSH
5972: CALL_OW 380
// un = CreateHuman ;
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: CALL_OW 44
5985: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5986: LD_VAR 0 3
5990: PPUSH
5991: LD_INT 3
5993: PPUSH
5994: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5998: LD_VAR 0 3
6002: PPUSH
6003: LD_INT 9
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6013: LD_VAR 0 3
6017: PPUSH
6018: LD_INT 53
6020: PPUSH
6021: LD_INT 23
6023: PPUSH
6024: CALL_OW 111
// wait ( 0 0$1 ) ;
6028: LD_INT 35
6030: PPUSH
6031: CALL_OW 67
// end ;
6035: GO 5920
6037: POP
6038: POP
// for i = 1 to 2 do
6039: LD_ADDR_VAR 0 2
6043: PUSH
6044: DOUBLE
6045: LD_INT 1
6047: DEC
6048: ST_TO_ADDR
6049: LD_INT 2
6051: PUSH
6052: FOR_TO
6053: IFFALSE 6169
// begin uc_side = 4 ;
6055: LD_ADDR_OWVAR 20
6059: PUSH
6060: LD_INT 4
6062: ST_TO_ADDR
// uc_nation = 1 ;
6063: LD_ADDR_OWVAR 21
6067: PUSH
6068: LD_INT 1
6070: ST_TO_ADDR
// hc_name =  ;
6071: LD_ADDR_OWVAR 26
6075: PUSH
6076: LD_STRING 
6078: ST_TO_ADDR
// hc_gallery =  ;
6079: LD_ADDR_OWVAR 33
6083: PUSH
6084: LD_STRING 
6086: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6087: LD_INT 0
6089: PPUSH
6090: LD_INT 4
6092: PPUSH
6093: LD_INT 5
6095: PPUSH
6096: LD_INT 8
6098: PPUSH
6099: CALL_OW 12
6103: PPUSH
6104: CALL_OW 380
// un = CreateHuman ;
6108: LD_ADDR_VAR 0 3
6112: PUSH
6113: CALL_OW 44
6117: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6118: LD_VAR 0 3
6122: PPUSH
6123: LD_INT 3
6125: PPUSH
6126: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6130: LD_VAR 0 3
6134: PPUSH
6135: LD_INT 9
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6145: LD_VAR 0 3
6149: PPUSH
6150: LD_INT 53
6152: PPUSH
6153: LD_INT 23
6155: PPUSH
6156: CALL_OW 111
// wait ( 0 0$1 ) ;
6160: LD_INT 35
6162: PPUSH
6163: CALL_OW 67
// end ;
6167: GO 6052
6169: POP
6170: POP
// for i = 1 to [ 5 , 5 , 4 ] [ Difficulty ] do
6171: LD_ADDR_VAR 0 2
6175: PUSH
6176: DOUBLE
6177: LD_INT 1
6179: DEC
6180: ST_TO_ADDR
6181: LD_INT 5
6183: PUSH
6184: LD_INT 5
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: PUSH
6195: LD_OWVAR 67
6199: ARRAY
6200: PUSH
6201: FOR_TO
6202: IFFALSE 6436
// begin uc_side = 4 ;
6204: LD_ADDR_OWVAR 20
6208: PUSH
6209: LD_INT 4
6211: ST_TO_ADDR
// uc_nation = 1 ;
6212: LD_ADDR_OWVAR 21
6216: PUSH
6217: LD_INT 1
6219: ST_TO_ADDR
// vc_engine = 1 ;
6220: LD_ADDR_OWVAR 39
6224: PUSH
6225: LD_INT 1
6227: ST_TO_ADDR
// vc_control = 1 ;
6228: LD_ADDR_OWVAR 38
6232: PUSH
6233: LD_INT 1
6235: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6236: LD_ADDR_OWVAR 40
6240: PUSH
6241: LD_INT 7
6243: PUSH
6244: LD_INT 4
6246: PUSH
6247: LD_INT 5
6249: PUSH
6250: LD_INT 6
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_VAR 0 2
6263: PUSH
6264: LD_INT 4
6266: MOD
6267: PUSH
6268: LD_INT 1
6270: PLUS
6271: ARRAY
6272: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6273: LD_ADDR_OWVAR 37
6277: PUSH
6278: LD_INT 3
6280: PUSH
6281: LD_INT 3
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: LD_INT 4
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: LD_VAR 0 2
6300: PUSH
6301: LD_INT 4
6303: MOD
6304: PUSH
6305: LD_INT 1
6307: PLUS
6308: ARRAY
6309: ST_TO_ADDR
// veh = CreateVehicle ;
6310: LD_ADDR_VAR 0 4
6314: PUSH
6315: CALL_OW 45
6319: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6320: LD_VAR 0 4
6324: PPUSH
6325: LD_INT 3
6327: PPUSH
6328: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6332: LD_VAR 0 4
6336: PPUSH
6337: LD_INT 9
6339: PPUSH
6340: LD_INT 0
6342: PPUSH
6343: CALL_OW 49
// InitHc ;
6347: CALL_OW 19
// hc_name =  ;
6351: LD_ADDR_OWVAR 26
6355: PUSH
6356: LD_STRING 
6358: ST_TO_ADDR
// hc_gallery =  ;
6359: LD_ADDR_OWVAR 33
6363: PUSH
6364: LD_STRING 
6366: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6367: LD_INT 0
6369: PPUSH
6370: LD_INT 3
6372: PPUSH
6373: LD_INT 5
6375: PPUSH
6376: LD_INT 8
6378: PPUSH
6379: CALL_OW 12
6383: PPUSH
6384: CALL_OW 380
// un = CreateHuman ;
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: CALL_OW 44
6397: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6398: LD_VAR 0 3
6402: PPUSH
6403: LD_VAR 0 4
6407: PPUSH
6408: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6412: LD_VAR 0 3
6416: PPUSH
6417: LD_INT 53
6419: PPUSH
6420: LD_INT 23
6422: PPUSH
6423: CALL_OW 111
// wait ( 0 0$5 ) ;
6427: LD_INT 175
6429: PPUSH
6430: CALL_OW 67
// end ;
6434: GO 6201
6436: POP
6437: POP
// end ; end_of_file
6438: LD_VAR 0 1
6442: RET
// export function PrepareRussianCommander ; begin
6443: LD_INT 0
6445: PPUSH
// uc_side = 3 ;
6446: LD_ADDR_OWVAR 20
6450: PUSH
6451: LD_INT 3
6453: ST_TO_ADDR
// uc_nation = 3 ;
6454: LD_ADDR_OWVAR 21
6458: PUSH
6459: LD_INT 3
6461: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6462: LD_ADDR_EXP 24
6466: PUSH
6467: LD_STRING Borodin
6469: PPUSH
6470: CALL_OW 25
6474: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6475: LD_EXP 24
6479: PPUSH
6480: LD_INT 25
6482: PPUSH
6483: LD_INT 0
6485: PPUSH
6486: CALL_OW 49
// end ;
6490: LD_VAR 0 1
6494: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6495: LD_INT 0
6497: PPUSH
6498: PPUSH
6499: PPUSH
6500: PPUSH
// for i = 1 to 10 do
6501: LD_ADDR_VAR 0 2
6505: PUSH
6506: DOUBLE
6507: LD_INT 1
6509: DEC
6510: ST_TO_ADDR
6511: LD_INT 10
6513: PUSH
6514: FOR_TO
6515: IFFALSE 6589
// begin uc_side = 6 ;
6517: LD_ADDR_OWVAR 20
6521: PUSH
6522: LD_INT 6
6524: ST_TO_ADDR
// uc_nation = 3 ;
6525: LD_ADDR_OWVAR 21
6529: PUSH
6530: LD_INT 3
6532: ST_TO_ADDR
// hc_gallery =  ;
6533: LD_ADDR_OWVAR 33
6537: PUSH
6538: LD_STRING 
6540: ST_TO_ADDR
// hc_name =  ;
6541: LD_ADDR_OWVAR 26
6545: PUSH
6546: LD_STRING 
6548: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6549: LD_INT 0
6551: PPUSH
6552: LD_INT 1
6554: PPUSH
6555: LD_INT 3
6557: PPUSH
6558: CALL_OW 380
// un = CreateHuman ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: CALL_OW 44
6571: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6572: LD_VAR 0 3
6576: PPUSH
6577: LD_INT 1
6579: PPUSH
6580: LD_INT 0
6582: PPUSH
6583: CALL_OW 49
// end ;
6587: GO 6514
6589: POP
6590: POP
// for i = 1 to 3 do
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: DOUBLE
6597: LD_INT 1
6599: DEC
6600: ST_TO_ADDR
6601: LD_INT 3
6603: PUSH
6604: FOR_TO
6605: IFFALSE 6754
// begin uc_side = 6 ;
6607: LD_ADDR_OWVAR 20
6611: PUSH
6612: LD_INT 6
6614: ST_TO_ADDR
// uc_nation = 3 ;
6615: LD_ADDR_OWVAR 21
6619: PUSH
6620: LD_INT 3
6622: ST_TO_ADDR
// vc_engine = 1 ;
6623: LD_ADDR_OWVAR 39
6627: PUSH
6628: LD_INT 1
6630: ST_TO_ADDR
// vc_control = 1 ;
6631: LD_ADDR_OWVAR 38
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6639: LD_ADDR_OWVAR 40
6643: PUSH
6644: LD_INT 43
6646: PUSH
6647: LD_INT 44
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 1
6656: PPUSH
6657: LD_INT 2
6659: PPUSH
6660: CALL_OW 12
6664: ARRAY
6665: ST_TO_ADDR
// vc_chassis = 22 ;
6666: LD_ADDR_OWVAR 37
6670: PUSH
6671: LD_INT 22
6673: ST_TO_ADDR
// veh = CreateVehicle ;
6674: LD_ADDR_VAR 0 4
6678: PUSH
6679: CALL_OW 45
6683: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6684: LD_VAR 0 4
6688: PPUSH
6689: LD_INT 2
6691: PPUSH
6692: LD_INT 0
6694: PPUSH
6695: CALL_OW 49
// hc_gallery =  ;
6699: LD_ADDR_OWVAR 33
6703: PUSH
6704: LD_STRING 
6706: ST_TO_ADDR
// hc_name =  ;
6707: LD_ADDR_OWVAR 26
6711: PUSH
6712: LD_STRING 
6714: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6715: LD_INT 0
6717: PPUSH
6718: LD_INT 3
6720: PPUSH
6721: LD_INT 4
6723: PPUSH
6724: CALL_OW 380
// un = CreateHuman ;
6728: LD_ADDR_VAR 0 3
6732: PUSH
6733: CALL_OW 44
6737: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6738: LD_VAR 0 3
6742: PPUSH
6743: LD_VAR 0 4
6747: PPUSH
6748: CALL_OW 52
// end ;
6752: GO 6604
6754: POP
6755: POP
// end ;
6756: LD_VAR 0 1
6760: RET
// export function PrepareRussians ; var i , un ; begin
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
6765: PPUSH
// for i = 1 to 8 do
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: DOUBLE
6772: LD_INT 1
6774: DEC
6775: ST_TO_ADDR
6776: LD_INT 8
6778: PUSH
6779: FOR_TO
6780: IFFALSE 6866
// begin uc_side = 3 ;
6782: LD_ADDR_OWVAR 20
6786: PUSH
6787: LD_INT 3
6789: ST_TO_ADDR
// uc_nation = 3 ;
6790: LD_ADDR_OWVAR 21
6794: PUSH
6795: LD_INT 3
6797: ST_TO_ADDR
// hc_gallery =  ;
6798: LD_ADDR_OWVAR 33
6802: PUSH
6803: LD_STRING 
6805: ST_TO_ADDR
// hc_name =  ;
6806: LD_ADDR_OWVAR 26
6810: PUSH
6811: LD_STRING 
6813: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6814: LD_INT 0
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: LD_EXP 25
6824: PPUSH
6825: LD_EXP 26
6829: PPUSH
6830: CALL_OW 12
6834: PPUSH
6835: CALL_OW 380
// un = CreateHuman ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: CALL_OW 44
6848: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6849: LD_VAR 0 3
6853: PPUSH
6854: LD_INT 3
6856: PPUSH
6857: LD_INT 0
6859: PPUSH
6860: CALL_OW 49
// end ;
6864: GO 6779
6866: POP
6867: POP
// for i = 1 to 4 do
6868: LD_ADDR_VAR 0 2
6872: PUSH
6873: DOUBLE
6874: LD_INT 1
6876: DEC
6877: ST_TO_ADDR
6878: LD_INT 4
6880: PUSH
6881: FOR_TO
6882: IFFALSE 6968
// begin uc_side = 3 ;
6884: LD_ADDR_OWVAR 20
6888: PUSH
6889: LD_INT 3
6891: ST_TO_ADDR
// uc_nation = 3 ;
6892: LD_ADDR_OWVAR 21
6896: PUSH
6897: LD_INT 3
6899: ST_TO_ADDR
// hc_gallery =  ;
6900: LD_ADDR_OWVAR 33
6904: PUSH
6905: LD_STRING 
6907: ST_TO_ADDR
// hc_name =  ;
6908: LD_ADDR_OWVAR 26
6912: PUSH
6913: LD_STRING 
6915: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6916: LD_INT 0
6918: PPUSH
6919: LD_INT 2
6921: PPUSH
6922: LD_EXP 25
6926: PPUSH
6927: LD_EXP 26
6931: PPUSH
6932: CALL_OW 12
6936: PPUSH
6937: CALL_OW 380
// un = CreateHuman ;
6941: LD_ADDR_VAR 0 3
6945: PUSH
6946: CALL_OW 44
6950: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6951: LD_VAR 0 3
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: LD_INT 0
6961: PPUSH
6962: CALL_OW 49
// end ;
6966: GO 6881
6968: POP
6969: POP
// for i = 1 to 3 do
6970: LD_ADDR_VAR 0 2
6974: PUSH
6975: DOUBLE
6976: LD_INT 1
6978: DEC
6979: ST_TO_ADDR
6980: LD_INT 3
6982: PUSH
6983: FOR_TO
6984: IFFALSE 7070
// begin uc_side = 3 ;
6986: LD_ADDR_OWVAR 20
6990: PUSH
6991: LD_INT 3
6993: ST_TO_ADDR
// uc_nation = 3 ;
6994: LD_ADDR_OWVAR 21
6998: PUSH
6999: LD_INT 3
7001: ST_TO_ADDR
// hc_gallery =  ;
7002: LD_ADDR_OWVAR 33
7006: PUSH
7007: LD_STRING 
7009: ST_TO_ADDR
// hc_name =  ;
7010: LD_ADDR_OWVAR 26
7014: PUSH
7015: LD_STRING 
7017: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7018: LD_INT 0
7020: PPUSH
7021: LD_INT 3
7023: PPUSH
7024: LD_EXP 25
7028: PPUSH
7029: LD_EXP 26
7033: PPUSH
7034: CALL_OW 12
7038: PPUSH
7039: CALL_OW 380
// un = CreateHuman ;
7043: LD_ADDR_VAR 0 3
7047: PUSH
7048: CALL_OW 44
7052: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7053: LD_VAR 0 3
7057: PPUSH
7058: LD_INT 3
7060: PPUSH
7061: LD_INT 0
7063: PPUSH
7064: CALL_OW 49
// end ;
7068: GO 6983
7070: POP
7071: POP
// for i = 1 to 2 do
7072: LD_ADDR_VAR 0 2
7076: PUSH
7077: DOUBLE
7078: LD_INT 1
7080: DEC
7081: ST_TO_ADDR
7082: LD_INT 2
7084: PUSH
7085: FOR_TO
7086: IFFALSE 7172
// begin uc_side = 3 ;
7088: LD_ADDR_OWVAR 20
7092: PUSH
7093: LD_INT 3
7095: ST_TO_ADDR
// uc_nation = 3 ;
7096: LD_ADDR_OWVAR 21
7100: PUSH
7101: LD_INT 3
7103: ST_TO_ADDR
// hc_gallery =  ;
7104: LD_ADDR_OWVAR 33
7108: PUSH
7109: LD_STRING 
7111: ST_TO_ADDR
// hc_name =  ;
7112: LD_ADDR_OWVAR 26
7116: PUSH
7117: LD_STRING 
7119: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7120: LD_INT 0
7122: PPUSH
7123: LD_INT 4
7125: PPUSH
7126: LD_EXP 25
7130: PPUSH
7131: LD_EXP 26
7135: PPUSH
7136: CALL_OW 12
7140: PPUSH
7141: CALL_OW 380
// un = CreateHuman ;
7145: LD_ADDR_VAR 0 3
7149: PUSH
7150: CALL_OW 44
7154: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7155: LD_VAR 0 3
7159: PPUSH
7160: LD_INT 3
7162: PPUSH
7163: LD_INT 0
7165: PPUSH
7166: CALL_OW 49
// end ;
7170: GO 7085
7172: POP
7173: POP
// end ; end_of_file
7174: LD_VAR 0 1
7178: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7179: LD_INT 0
7181: PPUSH
7182: PPUSH
7183: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7184: LD_ADDR_VAR 0 1
7188: PUSH
7189: LD_VAR 0 1
7193: PUSH
7194: LD_EXP 1
7198: PUSH
7199: LD_EXP 2
7203: PUSH
7204: LD_EXP 3
7208: PUSH
7209: LD_EXP 4
7213: PUSH
7214: LD_EXP 5
7218: PUSH
7219: LD_EXP 6
7223: PUSH
7224: LD_EXP 7
7228: PUSH
7229: LD_EXP 8
7233: PUSH
7234: LD_EXP 9
7238: PUSH
7239: LD_EXP 10
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: DIFF
7256: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7257: LD_ADDR_VAR 0 6
7261: PUSH
7262: LD_VAR 0 1
7266: PUSH
7267: LD_INT 1
7269: PPUSH
7270: LD_VAR 0 1
7274: PPUSH
7275: CALL_OW 12
7279: ARRAY
7280: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7281: LD_VAR 0 6
7285: PPUSH
7286: CALL_OW 258
7290: PUSH
7291: LD_INT 1
7293: EQUAL
7294: IFFALSE 7312
// Say ( speaker , dialogMID ) else
7296: LD_VAR 0 6
7300: PPUSH
7301: LD_VAR 0 2
7305: PPUSH
7306: CALL_OW 88
7310: GO 7326
// Say ( speaker , dialogFID ) ;
7312: LD_VAR 0 6
7316: PPUSH
7317: LD_VAR 0 3
7321: PPUSH
7322: CALL_OW 88
// result := speaker ;
7326: LD_ADDR_VAR 0 4
7330: PUSH
7331: LD_VAR 0 6
7335: ST_TO_ADDR
// end ;
7336: LD_VAR 0 4
7340: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7341: LD_INT 0
7343: PPUSH
7344: PPUSH
7345: PPUSH
// uc_side := GetSide ( b ) ;
7346: LD_ADDR_OWVAR 20
7350: PUSH
7351: LD_VAR 0 2
7355: PPUSH
7356: CALL_OW 255
7360: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7361: LD_ADDR_OWVAR 21
7365: PUSH
7366: LD_VAR 0 2
7370: PPUSH
7371: CALL_OW 248
7375: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7376: LD_INT 0
7378: PPUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_VAR 0 1
7386: PPUSH
7387: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7391: LD_ADDR_VAR 0 5
7395: PUSH
7396: LD_VAR 0 2
7400: PPUSH
7401: CALL_OW 254
7405: PUSH
7406: LD_INT 3
7408: MINUS
7409: ST_TO_ADDR
// if dir < 0 then
7410: LD_VAR 0 5
7414: PUSH
7415: LD_INT 0
7417: LESS
7418: IFFALSE 7434
// dir := 6 + dir ;
7420: LD_ADDR_VAR 0 5
7424: PUSH
7425: LD_INT 6
7427: PUSH
7428: LD_VAR 0 5
7432: PLUS
7433: ST_TO_ADDR
// un := CreateHuman ;
7434: LD_ADDR_VAR 0 4
7438: PUSH
7439: CALL_OW 44
7443: ST_TO_ADDR
// SetDir ( un , dir ) ;
7444: LD_VAR 0 4
7448: PPUSH
7449: LD_VAR 0 5
7453: PPUSH
7454: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7458: LD_VAR 0 4
7462: PPUSH
7463: LD_VAR 0 2
7467: PPUSH
7468: CALL_OW 52
// end ;
7472: LD_VAR 0 3
7476: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7477: LD_INT 0
7479: PPUSH
7480: PPUSH
7481: PPUSH
7482: PPUSH
// for i = 1 to count do
7483: LD_ADDR_VAR 0 8
7487: PUSH
7488: DOUBLE
7489: LD_INT 1
7491: DEC
7492: ST_TO_ADDR
7493: LD_VAR 0 6
7497: PUSH
7498: FOR_TO
7499: IFFALSE 7580
// begin uc_side = side ;
7501: LD_ADDR_OWVAR 20
7505: PUSH
7506: LD_VAR 0 1
7510: ST_TO_ADDR
// uc_nation = nation ;
7511: LD_ADDR_OWVAR 21
7515: PUSH
7516: LD_VAR 0 2
7520: ST_TO_ADDR
// hc_gallery =  ;
7521: LD_ADDR_OWVAR 33
7525: PUSH
7526: LD_STRING 
7528: ST_TO_ADDR
// hc_name =  ;
7529: LD_ADDR_OWVAR 26
7533: PUSH
7534: LD_STRING 
7536: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7537: LD_INT 0
7539: PPUSH
7540: LD_VAR 0 5
7544: PPUSH
7545: LD_VAR 0 4
7549: PPUSH
7550: CALL_OW 380
// un = CreateHuman ;
7554: LD_ADDR_VAR 0 10
7558: PUSH
7559: CALL_OW 44
7563: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7564: LD_VAR 0 10
7568: PPUSH
7569: LD_VAR 0 3
7573: PPUSH
7574: CALL_OW 52
// end ;
7578: GO 7498
7580: POP
7581: POP
// end ;
7582: LD_VAR 0 7
7586: RET
// export function PrepareDifficulty ; begin
7587: LD_INT 0
7589: PPUSH
// if Difficulty = 1 then
7590: LD_OWVAR 67
7594: PUSH
7595: LD_INT 1
7597: EQUAL
7598: IFFALSE 7616
// begin RuSolMinLevel = 3 ;
7600: LD_ADDR_EXP 25
7604: PUSH
7605: LD_INT 3
7607: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7608: LD_ADDR_EXP 26
7612: PUSH
7613: LD_INT 5
7615: ST_TO_ADDR
// end ; if Difficulty = 2 then
7616: LD_OWVAR 67
7620: PUSH
7621: LD_INT 2
7623: EQUAL
7624: IFFALSE 7694
// begin RuSolMinLevel = 5 ;
7626: LD_ADDR_EXP 25
7630: PUSH
7631: LD_INT 5
7633: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7634: LD_ADDR_EXP 26
7638: PUSH
7639: LD_INT 6
7641: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7642: LD_INT 51
7644: PPUSH
7645: LD_INT 3
7647: PPUSH
7648: LD_INT 1
7650: PPUSH
7651: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7655: LD_INT 57
7657: PPUSH
7658: LD_INT 3
7660: PPUSH
7661: LD_INT 1
7663: PPUSH
7664: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7668: LD_INT 57
7670: PPUSH
7671: LD_INT 6
7673: PPUSH
7674: LD_INT 2
7676: PPUSH
7677: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7681: LD_INT 51
7683: PPUSH
7684: LD_INT 6
7686: PPUSH
7687: LD_INT 2
7689: PPUSH
7690: CALL_OW 322
// end ; if Difficulty = 3 then
7694: LD_OWVAR 67
7698: PUSH
7699: LD_INT 3
7701: EQUAL
7702: IFFALSE 7785
// begin RuSolMinLevel = 5 ;
7704: LD_ADDR_EXP 25
7708: PUSH
7709: LD_INT 5
7711: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7712: LD_ADDR_EXP 26
7716: PUSH
7717: LD_INT 6
7719: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7720: LD_INT 57
7722: PPUSH
7723: LD_INT 3
7725: PPUSH
7726: LD_INT 1
7728: PPUSH
7729: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7733: LD_INT 51
7735: PPUSH
7736: LD_INT 3
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7746: LD_INT 52
7748: PPUSH
7749: LD_INT 3
7751: PPUSH
7752: LD_INT 1
7754: PPUSH
7755: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7759: LD_INT 57
7761: PPUSH
7762: LD_INT 6
7764: PPUSH
7765: LD_INT 2
7767: PPUSH
7768: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7772: LD_INT 52
7774: PPUSH
7775: LD_INT 6
7777: PPUSH
7778: LD_INT 2
7780: PPUSH
7781: CALL_OW 322
// end ; end ;
7785: LD_VAR 0 1
7789: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7790: LD_INT 0
7792: PPUSH
7793: PPUSH
7794: PPUSH
7795: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7796: LD_ADDR_VAR 0 3
7800: PUSH
7801: LD_INT 22
7803: PUSH
7804: LD_INT 3
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 25
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 69
7829: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7830: LD_ADDR_VAR 0 4
7834: PUSH
7835: LD_INT 4
7837: PUSH
7838: LD_INT 75
7840: PUSH
7841: LD_INT 79
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 4
7855: PUSH
7856: LD_INT 113
7858: PUSH
7859: LD_INT 94
7861: PUSH
7862: LD_INT 4
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 29
7873: PUSH
7874: LD_INT 106
7876: PUSH
7877: LD_INT 97
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 26
7891: PUSH
7892: LD_INT 93
7894: PUSH
7895: LD_INT 97
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: LD_INT 100
7912: PUSH
7913: LD_INT 89
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 17
7927: PUSH
7928: LD_INT 96
7930: PUSH
7931: LD_INT 89
7933: PUSH
7934: LD_INT 1
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 32
7945: PUSH
7946: LD_INT 78
7948: PUSH
7949: LD_INT 94
7951: PUSH
7952: LD_INT 1
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 32
7963: PUSH
7964: LD_INT 95
7966: PUSH
7967: LD_INT 82
7969: PUSH
7970: LD_INT 3
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 32
7981: PUSH
7982: LD_INT 104
7984: PUSH
7985: LD_INT 85
7987: PUSH
7988: LD_INT 2
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 32
7999: PUSH
8000: LD_INT 81
8002: PUSH
8003: LD_INT 78
8005: PUSH
8006: LD_INT 2
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 33
8017: PUSH
8018: LD_INT 109
8020: PUSH
8021: LD_INT 90
8023: PUSH
8024: LD_INT 3
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 33
8035: PUSH
8036: LD_INT 88
8038: PUSH
8039: LD_INT 79
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 33
8053: PUSH
8054: LD_INT 76
8056: PUSH
8057: LD_INT 87
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 26
8071: PUSH
8072: LD_INT 96
8074: PUSH
8075: LD_INT 97
8077: PUSH
8078: LD_INT 5
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 26
8089: PUSH
8090: LD_INT 85
8092: PUSH
8093: LD_INT 84
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: PUSH
8105: LD_INT 6
8107: PUSH
8108: LD_INT 88
8110: PUSH
8111: LD_INT 95
8113: PUSH
8114: LD_INT 0
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 19
8125: PUSH
8126: LD_INT 103
8128: PUSH
8129: LD_INT 89
8131: PUSH
8132: LD_INT 4
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 16
8143: PUSH
8144: LD_INT 97
8146: PUSH
8147: LD_INT 86
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PUSH
8159: LD_INT 24
8161: PUSH
8162: LD_INT 100
8164: PUSH
8165: LD_INT 85
8167: PUSH
8168: LD_INT 3
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: ST_TO_ADDR
// for i := 1 to buildingsTab do
8198: LD_ADDR_VAR 0 2
8202: PUSH
8203: DOUBLE
8204: LD_INT 1
8206: DEC
8207: ST_TO_ADDR
8208: LD_VAR 0 4
8212: PUSH
8213: FOR_TO
8214: IFFALSE 8287
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8216: LD_VAR 0 3
8220: PPUSH
8221: LD_VAR 0 4
8225: PUSH
8226: LD_VAR 0 2
8230: ARRAY
8231: PUSH
8232: LD_INT 1
8234: ARRAY
8235: PPUSH
8236: LD_VAR 0 4
8240: PUSH
8241: LD_VAR 0 2
8245: ARRAY
8246: PUSH
8247: LD_INT 2
8249: ARRAY
8250: PPUSH
8251: LD_VAR 0 4
8255: PUSH
8256: LD_VAR 0 2
8260: ARRAY
8261: PUSH
8262: LD_INT 3
8264: ARRAY
8265: PPUSH
8266: LD_VAR 0 4
8270: PUSH
8271: LD_VAR 0 2
8275: ARRAY
8276: PUSH
8277: LD_INT 4
8279: ARRAY
8280: PPUSH
8281: CALL_OW 205
8285: GO 8213
8287: POP
8288: POP
// end ;
8289: LD_VAR 0 1
8293: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8294: LD_INT 0
8296: PPUSH
8297: PPUSH
// for i in charactersList do
8298: LD_ADDR_VAR 0 4
8302: PUSH
8303: LD_VAR 0 1
8307: PUSH
8308: FOR_IN
8309: IFFALSE 8327
// SaveCharacters ( i , ident ) ;
8311: LD_VAR 0 4
8315: PPUSH
8316: LD_VAR 0 2
8320: PPUSH
8321: CALL_OW 38
8325: GO 8308
8327: POP
8328: POP
// end ;
8329: LD_VAR 0 3
8333: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8334: LD_INT 0
8336: PPUSH
8337: PPUSH
8338: PPUSH
8339: PPUSH
8340: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8341: LD_ADDR_VAR 0 8
8345: PUSH
8346: LD_INT 48
8348: PUSH
8349: LD_INT 49
8351: PUSH
8352: LD_INT 50
8354: PUSH
8355: LD_INT 20
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: LD_INT 51
8363: PUSH
8364: LD_INT 52
8366: PUSH
8367: LD_INT 69
8369: PUSH
8370: LD_INT 39
8372: PUSH
8373: LD_INT 34
8375: PUSH
8376: LD_INT 40
8378: PUSH
8379: LD_INT 53
8381: PUSH
8382: LD_INT 71
8384: PUSH
8385: LD_INT 57
8387: PUSH
8388: LD_INT 58
8390: PUSH
8391: LD_INT 44
8393: PUSH
8394: LD_INT 32
8396: PUSH
8397: LD_INT 27
8399: PUSH
8400: LD_INT 23
8402: PUSH
8403: LD_INT 33
8405: PUSH
8406: LD_INT 59
8408: PUSH
8409: LD_INT 54
8411: PUSH
8412: LD_INT 55
8414: PUSH
8415: LD_INT 56
8417: PUSH
8418: LD_INT 63
8420: PUSH
8421: LD_INT 64
8423: PUSH
8424: LD_INT 65
8426: PUSH
8427: LD_INT 30
8429: PUSH
8430: LD_INT 31
8432: PUSH
8433: LD_INT 21
8435: PUSH
8436: LD_INT 22
8438: PUSH
8439: LD_INT 25
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8476: LD_ADDR_VAR 0 5
8480: PUSH
8481: DOUBLE
8482: LD_INT 1
8484: DEC
8485: ST_TO_ADDR
8486: LD_VAR 0 8
8490: PUSH
8491: FOR_TO
8492: IFFALSE 8568
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8494: LD_VAR 0 8
8498: PUSH
8499: LD_VAR 0 5
8503: ARRAY
8504: PPUSH
8505: LD_VAR 0 1
8509: PPUSH
8510: CALL_OW 321
8514: PUSH
8515: LD_INT 1
8517: EQUAL
8518: PUSH
8519: LD_VAR 0 8
8523: PUSH
8524: LD_VAR 0 5
8528: ARRAY
8529: PPUSH
8530: LD_VAR 0 3
8534: PPUSH
8535: CALL_OW 482
8539: PUSH
8540: LD_INT 1
8542: EQUAL
8543: AND
8544: IFFALSE 8566
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_VAR 0 8
8555: PUSH
8556: LD_VAR 0 5
8560: ARRAY
8561: PPUSH
8562: CALL_OW 184
8566: GO 8491
8568: POP
8569: POP
// end ;
8570: LD_VAR 0 4
8574: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8575: LD_INT 0
8577: PPUSH
8578: PPUSH
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
8583: PPUSH
8584: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8585: LD_ADDR_VAR 0 6
8589: PUSH
8590: LD_VAR 0 2
8594: PPUSH
8595: LD_INT 22
8597: PUSH
8598: LD_VAR 0 1
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 56
8609: PUSH
8610: EMPTY
8611: LIST
8612: PUSH
8613: LD_INT 24
8615: PUSH
8616: LD_INT 700
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 3
8625: PUSH
8626: LD_INT 60
8628: PUSH
8629: EMPTY
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 2
8638: PUSH
8639: LD_INT 25
8641: PUSH
8642: LD_INT 1
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 25
8651: PUSH
8652: LD_INT 5
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 25
8661: PUSH
8662: LD_INT 8
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 25
8671: PUSH
8672: LD_INT 9
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: PPUSH
8693: CALL_OW 70
8697: PUSH
8698: LD_EXP 24
8702: PUSH
8703: EMPTY
8704: LIST
8705: DIFF
8706: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8707: LD_ADDR_VAR 0 7
8711: PUSH
8712: LD_VAR 0 2
8716: PPUSH
8717: LD_INT 22
8719: PUSH
8720: LD_VAR 0 1
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: LD_INT 30
8731: PUSH
8732: LD_INT 32
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 58
8741: PUSH
8742: EMPTY
8743: LIST
8744: PUSH
8745: LD_INT 24
8747: PUSH
8748: LD_INT 251
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 70
8765: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8766: LD_ADDR_VAR 0 9
8770: PUSH
8771: LD_VAR 0 2
8775: PPUSH
8776: LD_INT 22
8778: PUSH
8779: LD_VAR 0 1
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 2
8790: PUSH
8791: LD_INT 30
8793: PUSH
8794: LD_INT 4
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 30
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 24
8818: PUSH
8819: LD_INT 251
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 70
8835: ST_TO_ADDR
// if barrackList > 0 then
8836: LD_VAR 0 9
8840: PUSH
8841: LD_INT 0
8843: GREATER
8844: IFFALSE 8992
// begin if turretList = 0 then
8846: LD_VAR 0 7
8850: PUSH
8851: LD_INT 0
8853: EQUAL
8854: IFFALSE 8896
// begin if soldiers_list > 0 then
8856: LD_VAR 0 6
8860: PUSH
8861: LD_INT 0
8863: GREATER
8864: IFFALSE 8894
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8866: LD_VAR 0 6
8870: PPUSH
8871: LD_VAR 0 9
8875: PUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 9
8883: PPUSH
8884: CALL_OW 12
8888: ARRAY
8889: PPUSH
8890: CALL_OW 120
// end else
8894: GO 8992
// begin for i in barrackList do
8896: LD_ADDR_VAR 0 4
8900: PUSH
8901: LD_VAR 0 9
8905: PUSH
8906: FOR_IN
8907: IFFALSE 8990
// begin insideUnits = UnitsInside ( i ) ;
8909: LD_ADDR_VAR 0 10
8913: PUSH
8914: LD_VAR 0 4
8918: PPUSH
8919: CALL_OW 313
8923: ST_TO_ADDR
// if insideUnits > 0 then
8924: LD_VAR 0 10
8928: PUSH
8929: LD_INT 0
8931: GREATER
8932: IFFALSE 8956
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8934: LD_VAR 0 10
8938: PUSH
8939: LD_INT 1
8941: ARRAY
8942: PPUSH
8943: LD_VAR 0 7
8947: PUSH
8948: LD_INT 1
8950: ARRAY
8951: PPUSH
8952: CALL_OW 120
// if soldiers_list > 0 then
8956: LD_VAR 0 6
8960: PUSH
8961: LD_INT 0
8963: GREATER
8964: IFFALSE 8988
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8966: LD_VAR 0 6
8970: PUSH
8971: LD_INT 1
8973: ARRAY
8974: PPUSH
8975: LD_VAR 0 7
8979: PUSH
8980: LD_INT 1
8982: ARRAY
8983: PPUSH
8984: CALL_OW 120
// end ;
8988: GO 8906
8990: POP
8991: POP
// end ; end ; end ;
8992: LD_VAR 0 3
8996: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8997: LD_INT 0
8999: PPUSH
9000: PPUSH
9001: PPUSH
9002: PPUSH
9003: PPUSH
9004: PPUSH
// for i = 1 to vehCount do
9005: LD_ADDR_VAR 0 8
9009: PUSH
9010: DOUBLE
9011: LD_INT 1
9013: DEC
9014: ST_TO_ADDR
9015: LD_VAR 0 6
9019: PUSH
9020: FOR_TO
9021: IFFALSE 9228
// begin uc_side = side ;
9023: LD_ADDR_OWVAR 20
9027: PUSH
9028: LD_VAR 0 1
9032: ST_TO_ADDR
// uc_nation = nation ;
9033: LD_ADDR_OWVAR 21
9037: PUSH
9038: LD_VAR 0 3
9042: ST_TO_ADDR
// vc_Chassis = 22 ;
9043: LD_ADDR_OWVAR 37
9047: PUSH
9048: LD_INT 22
9050: ST_TO_ADDR
// vc_engine = 1 ;
9051: LD_ADDR_OWVAR 39
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// vc_control = 1 ;
9059: LD_ADDR_OWVAR 38
9063: PUSH
9064: LD_INT 1
9066: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9067: LD_ADDR_OWVAR 40
9071: PUSH
9072: LD_INT 43
9074: PUSH
9075: LD_INT 44
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 1
9084: PPUSH
9085: LD_INT 2
9087: PPUSH
9088: CALL_OW 12
9092: ARRAY
9093: ST_TO_ADDR
// veh = CreateVehicle ;
9094: LD_ADDR_VAR 0 12
9098: PUSH
9099: CALL_OW 45
9103: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9104: LD_VAR 0 12
9108: PPUSH
9109: LD_VAR 0 2
9113: PPUSH
9114: LD_INT 0
9116: PPUSH
9117: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9121: LD_ADDR_EXP 32
9125: PUSH
9126: LD_EXP 32
9130: PUSH
9131: LD_VAR 0 12
9135: ADD
9136: ST_TO_ADDR
// hc_class = 3 ;
9137: LD_ADDR_OWVAR 28
9141: PUSH
9142: LD_INT 3
9144: ST_TO_ADDR
// hc_name =  ;
9145: LD_ADDR_OWVAR 26
9149: PUSH
9150: LD_STRING 
9152: ST_TO_ADDR
// hc_gallery =  ;
9153: LD_ADDR_OWVAR 33
9157: PUSH
9158: LD_STRING 
9160: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9161: LD_INT 0
9163: PPUSH
9164: LD_INT 3
9166: PPUSH
9167: LD_EXP 25
9171: PPUSH
9172: LD_EXP 26
9176: PPUSH
9177: CALL_OW 12
9181: PPUSH
9182: CALL_OW 380
// un = CreateHuman ;
9186: LD_ADDR_VAR 0 10
9190: PUSH
9191: CALL_OW 44
9195: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9196: LD_VAR 0 10
9200: PPUSH
9201: LD_VAR 0 12
9205: PPUSH
9206: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9210: LD_ADDR_EXP 32
9214: PUSH
9215: LD_EXP 32
9219: PUSH
9220: LD_VAR 0 10
9224: ADD
9225: ST_TO_ADDR
// end ;
9226: GO 9020
9228: POP
9229: POP
// end ;
9230: LD_VAR 0 7
9234: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9235: LD_INT 0
9237: PPUSH
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
9242: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9243: LD_VAR 0 2
9247: PPUSH
9248: LD_INT 22
9250: PUSH
9251: LD_VAR 0 1
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: PPUSH
9263: CALL_OW 70
9267: PUSH
9268: LD_INT 0
9270: EQUAL
9271: PUSH
9272: LD_EXP 32
9276: AND
9277: IFFALSE 9564
// begin for i in defenders_list do
9279: LD_ADDR_VAR 0 4
9283: PUSH
9284: LD_EXP 32
9288: PUSH
9289: FOR_IN
9290: IFFALSE 9562
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9292: LD_VAR 0 4
9296: PPUSH
9297: LD_INT 63
9299: PPUSH
9300: LD_INT 75
9302: PPUSH
9303: CALL_OW 297
9307: PUSH
9308: LD_INT 8
9310: GREATER
9311: PUSH
9312: LD_VAR 0 4
9316: PPUSH
9317: CALL_OW 314
9321: NOT
9322: AND
9323: IFFALSE 9342
// ComMoveXY ( i , 63 , 75 ) else
9325: LD_VAR 0 4
9329: PPUSH
9330: LD_INT 63
9332: PPUSH
9333: LD_INT 75
9335: PPUSH
9336: CALL_OW 111
9340: GO 9560
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9342: LD_VAR 0 4
9346: PPUSH
9347: CALL_OW 257
9351: PUSH
9352: LD_INT 3
9354: EQUAL
9355: PUSH
9356: LD_VAR 0 4
9360: PPUSH
9361: CALL_OW 310
9365: NOT
9366: AND
9367: PUSH
9368: LD_VAR 0 4
9372: PPUSH
9373: CALL_OW 314
9377: NOT
9378: AND
9379: IFFALSE 9432
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9381: LD_VAR 0 4
9385: PPUSH
9386: LD_EXP 32
9390: PPUSH
9391: LD_INT 58
9393: PUSH
9394: EMPTY
9395: LIST
9396: PUSH
9397: LD_INT 24
9399: PUSH
9400: LD_INT 1000
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PPUSH
9411: CALL_OW 72
9415: PPUSH
9416: LD_VAR 0 4
9420: PPUSH
9421: CALL_OW 74
9425: PPUSH
9426: CALL_OW 120
9430: GO 9560
// if GetFuel ( i ) < 100 then
9432: LD_VAR 0 4
9436: PPUSH
9437: CALL_OW 261
9441: PUSH
9442: LD_INT 100
9444: LESS
9445: IFFALSE 9461
// SetFuel ( defenders_list , 100 ) else
9447: LD_EXP 32
9451: PPUSH
9452: LD_INT 100
9454: PPUSH
9455: CALL_OW 240
9459: GO 9560
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9461: LD_VAR 0 4
9465: PPUSH
9466: CALL_OW 263
9470: PUSH
9471: LD_INT 1
9473: EQUAL
9474: PUSH
9475: LD_VAR 0 4
9479: PPUSH
9480: CALL_OW 256
9484: PUSH
9485: LD_INT 990
9487: LESS
9488: AND
9489: IFFALSE 9560
// begin veh := i ;
9491: LD_ADDR_VAR 0 7
9495: PUSH
9496: LD_VAR 0 4
9500: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9501: LD_ADDR_VAR 0 8
9505: PUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 311
9515: ST_TO_ADDR
// if veh then
9516: LD_VAR 0 7
9520: IFFALSE 9560
// begin ComMoveXY ( i , 63 , 75 ) ;
9522: LD_VAR 0 4
9526: PPUSH
9527: LD_INT 63
9529: PPUSH
9530: LD_INT 75
9532: PPUSH
9533: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9537: LD_VAR 0 7
9541: PPUSH
9542: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9546: LD_VAR 0 8
9550: PPUSH
9551: LD_VAR 0 7
9555: PPUSH
9556: CALL_OW 189
// end ; end ; end ;
9560: GO 9289
9562: POP
9563: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9564: LD_ADDR_VAR 0 6
9568: PUSH
9569: LD_VAR 0 2
9573: PPUSH
9574: LD_INT 22
9576: PUSH
9577: LD_VAR 0 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: PPUSH
9589: CALL_OW 70
9593: ST_TO_ADDR
// if tmp and defenders_list then
9594: LD_VAR 0 6
9598: PUSH
9599: LD_EXP 32
9603: AND
9604: IFFALSE 9773
// for i in defenders_list do
9606: LD_ADDR_VAR 0 4
9610: PUSH
9611: LD_EXP 32
9615: PUSH
9616: FOR_IN
9617: IFFALSE 9771
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9619: LD_VAR 0 4
9623: PPUSH
9624: CALL_OW 257
9628: PUSH
9629: LD_INT 3
9631: EQUAL
9632: PUSH
9633: LD_VAR 0 4
9637: PPUSH
9638: CALL_OW 310
9642: NOT
9643: AND
9644: IFFALSE 9683
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9646: LD_VAR 0 4
9650: PPUSH
9651: LD_EXP 32
9655: PPUSH
9656: LD_INT 58
9658: PUSH
9659: EMPTY
9660: LIST
9661: PPUSH
9662: CALL_OW 72
9666: PPUSH
9667: LD_VAR 0 4
9671: PPUSH
9672: CALL_OW 74
9676: PPUSH
9677: CALL_OW 120
9681: GO 9769
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9683: LD_VAR 0 4
9687: PPUSH
9688: CALL_OW 314
9692: NOT
9693: PUSH
9694: LD_VAR 0 4
9698: PPUSH
9699: LD_VAR 0 2
9703: PPUSH
9704: CALL_OW 308
9708: AND
9709: IFFALSE 9737
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9711: LD_VAR 0 4
9715: PPUSH
9716: LD_VAR 0 6
9720: PPUSH
9721: LD_VAR 0 4
9725: PPUSH
9726: CALL_OW 74
9730: PPUSH
9731: CALL_OW 115
9735: GO 9769
// if not IsInArea ( i , defenseArea ) then
9737: LD_VAR 0 4
9741: PPUSH
9742: LD_VAR 0 2
9746: PPUSH
9747: CALL_OW 308
9751: NOT
9752: IFFALSE 9769
// ComMoveXY ( i , 63 , 75 ) ;
9754: LD_VAR 0 4
9758: PPUSH
9759: LD_INT 63
9761: PPUSH
9762: LD_INT 75
9764: PPUSH
9765: CALL_OW 111
// end ;
9769: GO 9616
9771: POP
9772: POP
// end ;
9773: LD_VAR 0 3
9777: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9778: LD_INT 0
9780: PPUSH
9781: PPUSH
9782: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9783: LD_INT 22
9785: PUSH
9786: LD_VAR 0 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 21
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PPUSH
9809: CALL_OW 69
9813: PUSH
9814: LD_VAR 0 3
9818: LESSEQUAL
9819: IFFALSE 9927
// begin for i = 1 to vehCount do
9821: LD_ADDR_VAR 0 9
9825: PUSH
9826: DOUBLE
9827: LD_INT 1
9829: DEC
9830: ST_TO_ADDR
9831: LD_VAR 0 3
9835: PUSH
9836: FOR_TO
9837: IFFALSE 9925
// begin weapon = weaponTab [ i ] ;
9839: LD_ADDR_VAR 0 10
9843: PUSH
9844: LD_VAR 0 4
9848: PUSH
9849: LD_VAR 0 9
9853: ARRAY
9854: ST_TO_ADDR
// if weapon = 46 then
9855: LD_VAR 0 10
9859: PUSH
9860: LD_INT 46
9862: EQUAL
9863: IFFALSE 9894
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9865: LD_VAR 0 2
9869: PPUSH
9870: LD_INT 24
9872: PPUSH
9873: LD_VAR 0 5
9877: PPUSH
9878: LD_VAR 0 6
9882: PPUSH
9883: LD_VAR 0 10
9887: PPUSH
9888: CALL_OW 185
// end else
9892: GO 9923
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9894: LD_VAR 0 2
9898: PPUSH
9899: LD_VAR 0 7
9903: PPUSH
9904: LD_VAR 0 5
9908: PPUSH
9909: LD_VAR 0 6
9913: PPUSH
9914: LD_VAR 0 10
9918: PPUSH
9919: CALL_OW 185
// end ; end ;
9923: GO 9836
9925: POP
9926: POP
// end ; end ;
9927: LD_VAR 0 8
9931: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9932: LD_INT 0
9934: PPUSH
9935: PPUSH
9936: PPUSH
9937: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9938: LD_ADDR_VAR 0 8
9942: PUSH
9943: LD_INT 22
9945: PUSH
9946: LD_VAR 0 1
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 21
9957: PUSH
9958: LD_INT 2
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: LD_INT 24
9970: PUSH
9971: LD_INT 650
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: ST_TO_ADDR
// if damageVehicles > 0 then
9992: LD_VAR 0 8
9996: PUSH
9997: LD_INT 0
9999: GREATER
10000: IFFALSE 10021
// ComMoveXY ( damageVehicles , repX , repY ) ;
10002: LD_VAR 0 8
10006: PPUSH
10007: LD_VAR 0 3
10011: PPUSH
10012: LD_VAR 0 4
10016: PPUSH
10017: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10021: LD_VAR 0 8
10025: PPUSH
10026: LD_INT 95
10028: PUSH
10029: LD_VAR 0 2
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 3
10040: PUSH
10041: LD_INT 58
10043: PUSH
10044: EMPTY
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 72
10059: PUSH
10060: LD_INT 0
10062: GREATER
10063: IFFALSE 10130
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10065: LD_ADDR_VAR 0 6
10069: PUSH
10070: LD_VAR 0 8
10074: PPUSH
10075: LD_INT 95
10077: PUSH
10078: LD_VAR 0 2
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 3
10089: PUSH
10090: LD_INT 58
10092: PUSH
10093: EMPTY
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PPUSH
10104: CALL_OW 72
10108: PUSH
10109: FOR_IN
10110: IFFALSE 10128
// ComExitVehicle ( UnitsInside ( i ) ) ;
10112: LD_VAR 0 6
10116: PPUSH
10117: CALL_OW 313
10121: PPUSH
10122: CALL_OW 121
10126: GO 10109
10128: POP
10129: POP
// end ;
10130: LD_VAR 0 5
10134: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10135: LD_INT 0
10137: PPUSH
10138: PPUSH
10139: PPUSH
10140: PPUSH
10141: PPUSH
10142: PPUSH
10143: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10144: LD_ADDR_VAR 0 8
10148: PUSH
10149: LD_INT 22
10151: PUSH
10152: LD_VAR 0 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 21
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 24
10173: PUSH
10174: LD_INT 250
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 3
10183: PUSH
10184: LD_INT 58
10186: PUSH
10187: EMPTY
10188: LIST
10189: PUSH
10190: LD_INT 2
10192: PUSH
10193: LD_INT 34
10195: PUSH
10196: LD_INT 43
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: LD_INT 34
10205: PUSH
10206: LD_INT 44
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 34
10215: PUSH
10216: LD_INT 46
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: PPUSH
10240: CALL_OW 69
10244: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10245: LD_INT 22
10247: PUSH
10248: LD_VAR 0 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 21
10259: PUSH
10260: LD_INT 2
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 24
10269: PUSH
10270: LD_INT 1000
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 3
10279: PUSH
10280: LD_INT 58
10282: PUSH
10283: EMPTY
10284: LIST
10285: PUSH
10286: LD_INT 2
10288: PUSH
10289: LD_INT 34
10291: PUSH
10292: LD_INT 43
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 34
10301: PUSH
10302: LD_INT 44
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 34
10311: PUSH
10312: LD_INT 46
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PPUSH
10336: CALL_OW 69
10340: PUSH
10341: LD_INT 5
10343: PUSH
10344: LD_INT 6
10346: PUSH
10347: LD_INT 7
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: PUSH
10355: LD_OWVAR 67
10359: ARRAY
10360: GREATEREQUAL
10361: IFFALSE 10926
// repeat wait ( 0 0$1 ) ;
10363: LD_INT 35
10365: PPUSH
10366: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10370: LD_ADDR_VAR 0 8
10374: PUSH
10375: LD_INT 22
10377: PUSH
10378: LD_VAR 0 1
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 21
10389: PUSH
10390: LD_INT 2
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 24
10399: PUSH
10400: LD_INT 250
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 2
10409: PUSH
10410: LD_INT 34
10412: PUSH
10413: LD_INT 43
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 34
10422: PUSH
10423: LD_INT 44
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 34
10432: PUSH
10433: LD_INT 46
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 3
10448: PUSH
10449: LD_INT 58
10451: PUSH
10452: EMPTY
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 69
10470: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10471: LD_INT 22
10473: PUSH
10474: LD_VAR 0 1
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 95
10485: PUSH
10486: LD_VAR 0 2
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 69
10503: NOT
10504: PUSH
10505: LD_VAR 0 11
10509: PUSH
10510: LD_INT 0
10512: EQUAL
10513: AND
10514: IFFALSE 10569
// for i := 1 to wayX do
10516: LD_ADDR_VAR 0 6
10520: PUSH
10521: DOUBLE
10522: LD_INT 1
10524: DEC
10525: ST_TO_ADDR
10526: LD_VAR 0 3
10530: PUSH
10531: FOR_TO
10532: IFFALSE 10567
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10534: LD_VAR 0 8
10538: PPUSH
10539: LD_VAR 0 3
10543: PUSH
10544: LD_VAR 0 6
10548: ARRAY
10549: PPUSH
10550: LD_VAR 0 4
10554: PUSH
10555: LD_VAR 0 6
10559: ARRAY
10560: PPUSH
10561: CALL_OW 114
10565: GO 10531
10567: POP
10568: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10569: LD_INT 22
10571: PUSH
10572: LD_VAR 0 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 95
10583: PUSH
10584: LD_VAR 0 2
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: IFFALSE 10825
// begin seeEnemy = 1 ;
10603: LD_ADDR_VAR 0 11
10607: PUSH
10608: LD_INT 1
10610: ST_TO_ADDR
// for j in vehiclesOK do
10611: LD_ADDR_VAR 0 7
10615: PUSH
10616: LD_VAR 0 8
10620: PUSH
10621: FOR_IN
10622: IFFALSE 10823
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10624: LD_ADDR_VAR 0 9
10628: PUSH
10629: LD_INT 81
10631: PUSH
10632: LD_VAR 0 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 101
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PPUSH
10655: CALL_OW 69
10659: PPUSH
10660: LD_VAR 0 7
10664: PPUSH
10665: CALL_OW 74
10669: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10670: LD_ADDR_VAR 0 10
10674: PUSH
10675: LD_INT 81
10677: PUSH
10678: LD_VAR 0 1
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 101
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 59
10702: PUSH
10703: EMPTY
10704: LIST
10705: PUSH
10706: LD_INT 21
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 21
10718: PUSH
10719: LD_INT 2
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: PUSH
10737: EMPTY
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: PPUSH
10745: LD_VAR 0 7
10749: PPUSH
10750: CALL_OW 74
10754: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10755: LD_VAR 0 7
10759: PPUSH
10760: LD_VAR 0 9
10764: PPUSH
10765: CALL_OW 296
10769: PUSH
10770: LD_INT 8
10772: PLUS
10773: PUSH
10774: LD_VAR 0 7
10778: PPUSH
10779: LD_VAR 0 10
10783: PPUSH
10784: CALL_OW 296
10788: LESS
10789: IFFALSE 10807
// ComAttackUnit ( j , target1 ) else
10791: LD_VAR 0 7
10795: PPUSH
10796: LD_VAR 0 9
10800: PPUSH
10801: CALL_OW 115
10805: GO 10821
// ComAttackUnit ( j , target2 ) ;
10807: LD_VAR 0 7
10811: PPUSH
10812: LD_VAR 0 10
10816: PPUSH
10817: CALL_OW 115
// end ;
10821: GO 10621
10823: POP
10824: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10825: LD_INT 22
10827: PUSH
10828: LD_VAR 0 1
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 21
10839: PUSH
10840: LD_INT 2
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 24
10849: PUSH
10850: LD_INT 250
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: LD_INT 34
10862: PUSH
10863: LD_INT 43
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 34
10872: PUSH
10873: LD_INT 44
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 34
10882: PUSH
10883: LD_INT 46
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 3
10898: PUSH
10899: LD_INT 58
10901: PUSH
10902: EMPTY
10903: LIST
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: PPUSH
10916: CALL_OW 69
10920: PUSH
10921: LD_INT 0
10923: EQUAL
10924: IFFALSE 10363
// seeEnemy = 0 ;
10926: LD_ADDR_VAR 0 11
10930: PUSH
10931: LD_INT 0
10933: ST_TO_ADDR
// end ;
10934: LD_VAR 0 5
10938: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10939: LD_INT 0
10941: PPUSH
10942: PPUSH
10943: PPUSH
10944: PPUSH
10945: PPUSH
10946: PPUSH
// repeat wait ( 0 0$1 ) ;
10947: LD_INT 35
10949: PPUSH
10950: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: LD_INT 22
10961: PUSH
10962: LD_VAR 0 1
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 21
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 24
10983: PUSH
10984: LD_INT 651
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 69
11000: ST_TO_ADDR
// for j in vehiclesOK do
11001: LD_ADDR_VAR 0 4
11005: PUSH
11006: LD_VAR 0 7
11010: PUSH
11011: FOR_IN
11012: IFFALSE 11213
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11014: LD_ADDR_VAR 0 5
11018: PUSH
11019: LD_INT 81
11021: PUSH
11022: LD_VAR 0 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 69
11049: PPUSH
11050: LD_VAR 0 4
11054: PPUSH
11055: CALL_OW 74
11059: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11060: LD_ADDR_VAR 0 6
11064: PUSH
11065: LD_INT 81
11067: PUSH
11068: LD_VAR 0 1
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 101
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 2
11089: PUSH
11090: LD_INT 59
11092: PUSH
11093: EMPTY
11094: LIST
11095: PUSH
11096: LD_INT 21
11098: PUSH
11099: LD_INT 1
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 21
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: PPUSH
11130: CALL_OW 69
11134: PPUSH
11135: LD_VAR 0 4
11139: PPUSH
11140: CALL_OW 74
11144: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11145: LD_VAR 0 4
11149: PPUSH
11150: LD_VAR 0 5
11154: PPUSH
11155: CALL_OW 296
11159: PUSH
11160: LD_INT 8
11162: PLUS
11163: PUSH
11164: LD_VAR 0 4
11168: PPUSH
11169: LD_VAR 0 6
11173: PPUSH
11174: CALL_OW 296
11178: LESS
11179: IFFALSE 11197
// ComAttackUnit ( j , target1 ) else
11181: LD_VAR 0 4
11185: PPUSH
11186: LD_VAR 0 5
11190: PPUSH
11191: CALL_OW 115
11195: GO 11211
// ComAttackUnit ( j , target2 ) ;
11197: LD_VAR 0 4
11201: PPUSH
11202: LD_VAR 0 6
11206: PPUSH
11207: CALL_OW 115
// end ;
11211: GO 11011
11213: POP
11214: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11215: LD_INT 22
11217: PUSH
11218: LD_VAR 0 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 21
11229: PUSH
11230: LD_INT 2
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 24
11239: PUSH
11240: LD_INT 250
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: PUSH
11257: LD_INT 0
11259: EQUAL
11260: IFFALSE 10947
// end ;
11262: LD_VAR 0 2
11266: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11267: LD_INT 0
11269: PPUSH
11270: PPUSH
11271: PPUSH
11272: PPUSH
11273: PPUSH
11274: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11275: LD_ADDR_VAR 0 8
11279: PUSH
11280: LD_VAR 0 2
11284: PPUSH
11285: CALL_OW 313
11289: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11290: LD_ADDR_VAR 0 9
11294: PUSH
11295: LD_VAR 0 3
11299: PPUSH
11300: LD_INT 22
11302: PUSH
11303: LD_VAR 0 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 25
11314: PUSH
11315: LD_INT 2
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 24
11324: PUSH
11325: LD_INT 750
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 3
11334: PUSH
11335: LD_INT 54
11337: PUSH
11338: EMPTY
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 70
11355: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11356: LD_ADDR_VAR 0 6
11360: PUSH
11361: LD_VAR 0 3
11365: PPUSH
11366: LD_INT 22
11368: PUSH
11369: LD_VAR 0 1
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 21
11380: PUSH
11381: LD_INT 3
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 3
11390: PUSH
11391: LD_INT 24
11393: PUSH
11394: LD_INT 1000
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: PPUSH
11413: CALL_OW 70
11417: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11418: LD_VAR 0 6
11422: NOT
11423: PUSH
11424: LD_INT 22
11426: PUSH
11427: LD_VAR 0 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 25
11438: PUSH
11439: LD_INT 2
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 24
11448: PUSH
11449: LD_INT 250
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: PPUSH
11461: CALL_OW 69
11465: NOT
11466: AND
11467: IFFALSE 11471
// exit ;
11469: GO 11668
// if buildings_list > 0 and engineerOkInside then
11471: LD_VAR 0 6
11475: PUSH
11476: LD_INT 0
11478: GREATER
11479: PUSH
11480: LD_VAR 0 8
11484: AND
11485: IFFALSE 11511
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11487: LD_VAR 0 8
11491: PPUSH
11492: LD_INT 25
11494: PUSH
11495: LD_INT 2
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 72
11506: PPUSH
11507: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11511: LD_VAR 0 6
11515: PUSH
11516: LD_INT 0
11518: GREATER
11519: PUSH
11520: LD_VAR 0 9
11524: PUSH
11525: LD_INT 0
11527: GREATER
11528: AND
11529: IFFALSE 11549
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11531: LD_VAR 0 9
11535: PPUSH
11536: LD_VAR 0 6
11540: PUSH
11541: LD_INT 1
11543: ARRAY
11544: PPUSH
11545: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11549: LD_VAR 0 6
11553: PUSH
11554: LD_INT 0
11556: EQUAL
11557: PUSH
11558: LD_VAR 0 4
11562: PUSH
11563: LD_INT 0
11565: EQUAL
11566: AND
11567: PUSH
11568: LD_VAR 0 9
11572: PUSH
11573: LD_INT 0
11575: GREATER
11576: AND
11577: IFFALSE 11593
// ComEnterUnit ( engineerOkOutside , building ) ;
11579: LD_VAR 0 9
11583: PPUSH
11584: LD_VAR 0 2
11588: PPUSH
11589: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11593: LD_VAR 0 9
11597: PUSH
11598: LD_INT 0
11600: GREATER
11601: PUSH
11602: LD_VAR 0 6
11606: PUSH
11607: LD_INT 0
11609: EQUAL
11610: AND
11611: PUSH
11612: LD_VAR 0 4
11616: PUSH
11617: LD_INT 0
11619: GREATER
11620: AND
11621: IFFALSE 11668
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11623: LD_VAR 0 9
11627: PPUSH
11628: LD_VAR 0 4
11632: PUSH
11633: LD_INT 1
11635: ARRAY
11636: PPUSH
11637: LD_VAR 0 4
11641: PUSH
11642: LD_INT 2
11644: ARRAY
11645: PPUSH
11646: LD_VAR 0 4
11650: PUSH
11651: LD_INT 3
11653: ARRAY
11654: PPUSH
11655: LD_VAR 0 4
11659: PUSH
11660: LD_INT 4
11662: ARRAY
11663: PPUSH
11664: CALL_OW 145
// end ;
11668: LD_VAR 0 5
11672: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11673: LD_INT 0
11675: PPUSH
11676: PPUSH
11677: PPUSH
11678: PPUSH
11679: PPUSH
11680: PPUSH
11681: PPUSH
11682: PPUSH
11683: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11684: LD_ADDR_VAR 0 6
11688: PUSH
11689: LD_INT 22
11691: PUSH
11692: LD_VAR 0 1
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 4
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 23
11713: PUSH
11714: LD_INT 2
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 24
11723: PUSH
11724: LD_INT 251
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: PPUSH
11737: CALL_OW 69
11741: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11742: LD_ADDR_VAR 0 7
11746: PUSH
11747: LD_VAR 0 3
11751: PPUSH
11752: LD_INT 22
11754: PUSH
11755: LD_VAR 0 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 23
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 4
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 50
11786: PUSH
11787: EMPTY
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: PPUSH
11796: CALL_OW 70
11800: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11801: LD_ADDR_VAR 0 10
11805: PUSH
11806: LD_VAR 0 3
11810: PPUSH
11811: LD_INT 22
11813: PUSH
11814: LD_VAR 0 1
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 21
11825: PUSH
11826: LD_INT 1
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 3
11835: PUSH
11836: LD_INT 25
11838: PUSH
11839: LD_INT 3
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 3
11852: PUSH
11853: LD_INT 24
11855: PUSH
11856: LD_INT 750
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: PPUSH
11873: CALL_OW 70
11877: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11878: LD_ADDR_VAR 0 11
11882: PUSH
11883: LD_VAR 0 2
11887: PPUSH
11888: LD_INT 22
11890: PUSH
11891: LD_VAR 0 1
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 21
11902: PUSH
11903: LD_INT 1
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 3
11912: PUSH
11913: LD_INT 25
11915: PUSH
11916: LD_INT 3
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 3
11929: PUSH
11930: LD_INT 24
11932: PUSH
11933: LD_INT 1000
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 70
11954: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11955: LD_VAR 0 10
11959: NOT
11960: PUSH
11961: LD_VAR 0 11
11965: NOT
11966: AND
11967: PUSH
11968: LD_VAR 0 6
11972: NOT
11973: AND
11974: IFFALSE 11978
// exit ;
11976: GO 12212
// if damageUnits > 0 and sci_list > 0 then
11978: LD_VAR 0 10
11982: PUSH
11983: LD_INT 0
11985: GREATER
11986: PUSH
11987: LD_VAR 0 6
11991: PUSH
11992: LD_INT 0
11994: GREATER
11995: AND
11996: IFFALSE 12012
// ComMoveToArea ( damageUnits , healArea ) ;
11998: LD_VAR 0 10
12002: PPUSH
12003: LD_VAR 0 2
12007: PPUSH
12008: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12012: LD_VAR 0 11
12016: PUSH
12017: LD_INT 0
12019: GREATER
12020: PUSH
12021: LD_VAR 0 6
12025: PUSH
12026: LD_INT 0
12028: GREATER
12029: AND
12030: IFFALSE 12041
// ComExitBuilding ( sci_list ) ;
12032: LD_VAR 0 6
12036: PPUSH
12037: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12041: LD_VAR 0 11
12045: PUSH
12046: LD_INT 0
12048: GREATER
12049: PUSH
12050: LD_VAR 0 7
12054: PUSH
12055: LD_INT 0
12057: GREATER
12058: AND
12059: IFFALSE 12079
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12061: LD_VAR 0 7
12065: PPUSH
12066: LD_VAR 0 11
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: PPUSH
12075: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12079: LD_VAR 0 10
12083: PUSH
12084: LD_INT 0
12086: EQUAL
12087: PUSH
12088: LD_VAR 0 11
12092: PUSH
12093: LD_INT 0
12095: EQUAL
12096: AND
12097: PUSH
12098: LD_VAR 0 7
12102: PUSH
12103: LD_INT 0
12105: GREATER
12106: AND
12107: IFFALSE 12212
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12109: LD_ADDR_VAR 0 12
12113: PUSH
12114: LD_INT 22
12116: PUSH
12117: LD_VAR 0 1
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 3
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 30
12138: PUSH
12139: LD_INT 8
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: PPUSH
12151: CALL_OW 69
12155: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12156: LD_ADDR_VAR 0 13
12160: PUSH
12161: LD_INT 1
12163: PPUSH
12164: LD_VAR 0 12
12168: PPUSH
12169: CALL_OW 12
12173: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12174: LD_VAR 0 7
12178: PPUSH
12179: LD_INT 3
12181: PUSH
12182: LD_INT 60
12184: PUSH
12185: EMPTY
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 72
12196: PPUSH
12197: LD_VAR 0 12
12201: PUSH
12202: LD_VAR 0 13
12206: ARRAY
12207: PPUSH
12208: CALL_OW 120
// end ; end ;
12212: LD_VAR 0 5
12216: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12217: LD_INT 0
12219: PPUSH
12220: PPUSH
12221: PPUSH
12222: PPUSH
12223: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12224: LD_ADDR_VAR 0 6
12228: PUSH
12229: LD_INT 22
12231: PUSH
12232: LD_VAR 0 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 2
12243: PUSH
12244: LD_INT 30
12246: PUSH
12247: LD_INT 31
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 30
12256: PUSH
12257: LD_INT 32
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 30
12266: PUSH
12267: LD_INT 33
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 30
12276: PUSH
12277: LD_INT 4
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 30
12286: PUSH
12287: LD_INT 5
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PPUSH
12306: CALL_OW 69
12310: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12311: LD_ADDR_VAR 0 7
12315: PUSH
12316: LD_INT 22
12318: PUSH
12319: LD_VAR 0 2
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 21
12330: PUSH
12331: LD_INT 3
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 58
12340: PUSH
12341: EMPTY
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12354: LD_VAR 0 6
12358: PUSH
12359: LD_INT 0
12361: GREATER
12362: PUSH
12363: LD_VAR 0 7
12367: PUSH
12368: LD_INT 0
12370: GREATER
12371: AND
12372: IFFALSE 12442
// begin for i in turretsList do
12374: LD_ADDR_VAR 0 4
12378: PUSH
12379: LD_VAR 0 6
12383: PUSH
12384: FOR_IN
12385: IFFALSE 12440
// begin for j in enemyBuildings do
12387: LD_ADDR_VAR 0 5
12391: PUSH
12392: LD_VAR 0 7
12396: PUSH
12397: FOR_IN
12398: IFFALSE 12436
// begin if GetDistUnits ( i , j ) < 20 then
12400: LD_VAR 0 4
12404: PPUSH
12405: LD_VAR 0 5
12409: PPUSH
12410: CALL_OW 296
12414: PUSH
12415: LD_INT 20
12417: LESS
12418: IFFALSE 12434
// begin ComAttackUnit ( i , j ) ;
12420: LD_VAR 0 4
12424: PPUSH
12425: LD_VAR 0 5
12429: PPUSH
12430: CALL_OW 115
// end ; end ;
12434: GO 12397
12436: POP
12437: POP
// end ;
12438: GO 12384
12440: POP
12441: POP
// end ; end ;
12442: LD_VAR 0 3
12446: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12447: LD_INT 0
12449: PPUSH
12450: PPUSH
12451: PPUSH
12452: PPUSH
12453: PPUSH
12454: PPUSH
12455: PPUSH
12456: PPUSH
12457: PPUSH
12458: PPUSH
12459: PPUSH
// for i = 1 to medicCount do
12460: LD_ADDR_VAR 0 14
12464: PUSH
12465: DOUBLE
12466: LD_INT 1
12468: DEC
12469: ST_TO_ADDR
12470: LD_VAR 0 7
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12558
// begin uc_side = side ;
12478: LD_ADDR_OWVAR 20
12482: PUSH
12483: LD_VAR 0 1
12487: ST_TO_ADDR
// uc_nation = nation ;
12488: LD_ADDR_OWVAR 21
12492: PUSH
12493: LD_VAR 0 2
12497: ST_TO_ADDR
// hc_name =  ;
12498: LD_ADDR_OWVAR 26
12502: PUSH
12503: LD_STRING 
12505: ST_TO_ADDR
// hc_gallery =  ;
12506: LD_ADDR_OWVAR 33
12510: PUSH
12511: LD_STRING 
12513: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12514: LD_INT 0
12516: PPUSH
12517: LD_INT 4
12519: PPUSH
12520: LD_VAR 0 8
12524: PPUSH
12525: CALL_OW 380
// un = CreateHuman ;
12529: LD_ADDR_VAR 0 16
12533: PUSH
12534: CALL_OW 44
12538: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12539: LD_VAR 0 16
12543: PPUSH
12544: LD_VAR 0 9
12548: PPUSH
12549: LD_INT 0
12551: PPUSH
12552: CALL_OW 49
// end ;
12556: GO 12475
12558: POP
12559: POP
// for i = 1 to soldierCount do
12560: LD_ADDR_VAR 0 14
12564: PUSH
12565: DOUBLE
12566: LD_INT 1
12568: DEC
12569: ST_TO_ADDR
12570: LD_VAR 0 3
12574: PUSH
12575: FOR_TO
12576: IFFALSE 12658
// begin uc_side = side ;
12578: LD_ADDR_OWVAR 20
12582: PUSH
12583: LD_VAR 0 1
12587: ST_TO_ADDR
// uc_nation = nation ;
12588: LD_ADDR_OWVAR 21
12592: PUSH
12593: LD_VAR 0 2
12597: ST_TO_ADDR
// hc_name =  ;
12598: LD_ADDR_OWVAR 26
12602: PUSH
12603: LD_STRING 
12605: ST_TO_ADDR
// hc_gallery =  ;
12606: LD_ADDR_OWVAR 33
12610: PUSH
12611: LD_STRING 
12613: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12614: LD_INT 0
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: LD_VAR 0 8
12624: PPUSH
12625: CALL_OW 380
// un = CreateHuman ;
12629: LD_ADDR_VAR 0 16
12633: PUSH
12634: CALL_OW 44
12638: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12639: LD_VAR 0 16
12643: PPUSH
12644: LD_VAR 0 9
12648: PPUSH
12649: LD_INT 0
12651: PPUSH
12652: CALL_OW 49
// end ;
12656: GO 12575
12658: POP
12659: POP
// for i = 1 to sniperCount do
12660: LD_ADDR_VAR 0 14
12664: PUSH
12665: DOUBLE
12666: LD_INT 1
12668: DEC
12669: ST_TO_ADDR
12670: LD_VAR 0 4
12674: PUSH
12675: FOR_TO
12676: IFFALSE 12758
// begin uc_side = side ;
12678: LD_ADDR_OWVAR 20
12682: PUSH
12683: LD_VAR 0 1
12687: ST_TO_ADDR
// uc_nation = nation ;
12688: LD_ADDR_OWVAR 21
12692: PUSH
12693: LD_VAR 0 2
12697: ST_TO_ADDR
// hc_name =  ;
12698: LD_ADDR_OWVAR 26
12702: PUSH
12703: LD_STRING 
12705: ST_TO_ADDR
// hc_gallery =  ;
12706: LD_ADDR_OWVAR 33
12710: PUSH
12711: LD_STRING 
12713: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12714: LD_INT 0
12716: PPUSH
12717: LD_INT 5
12719: PPUSH
12720: LD_VAR 0 8
12724: PPUSH
12725: CALL_OW 380
// un = CreateHuman ;
12729: LD_ADDR_VAR 0 16
12733: PUSH
12734: CALL_OW 44
12738: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12739: LD_VAR 0 16
12743: PPUSH
12744: LD_VAR 0 9
12748: PPUSH
12749: LD_INT 0
12751: PPUSH
12752: CALL_OW 49
// end ;
12756: GO 12675
12758: POP
12759: POP
// for i = 1 to bazookCount do
12760: LD_ADDR_VAR 0 14
12764: PUSH
12765: DOUBLE
12766: LD_INT 1
12768: DEC
12769: ST_TO_ADDR
12770: LD_VAR 0 5
12774: PUSH
12775: FOR_TO
12776: IFFALSE 12858
// begin uc_side = side ;
12778: LD_ADDR_OWVAR 20
12782: PUSH
12783: LD_VAR 0 1
12787: ST_TO_ADDR
// uc_nation = nation ;
12788: LD_ADDR_OWVAR 21
12792: PUSH
12793: LD_VAR 0 2
12797: ST_TO_ADDR
// hc_name =  ;
12798: LD_ADDR_OWVAR 26
12802: PUSH
12803: LD_STRING 
12805: ST_TO_ADDR
// hc_gallery =  ;
12806: LD_ADDR_OWVAR 33
12810: PUSH
12811: LD_STRING 
12813: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12814: LD_INT 0
12816: PPUSH
12817: LD_INT 9
12819: PPUSH
12820: LD_VAR 0 8
12824: PPUSH
12825: CALL_OW 380
// un = CreateHuman ;
12829: LD_ADDR_VAR 0 16
12833: PUSH
12834: CALL_OW 44
12838: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12839: LD_VAR 0 16
12843: PPUSH
12844: LD_VAR 0 9
12848: PPUSH
12849: LD_INT 0
12851: PPUSH
12852: CALL_OW 49
// end ;
12856: GO 12775
12858: POP
12859: POP
// for i = 1 to mortalCount do
12860: LD_ADDR_VAR 0 14
12864: PUSH
12865: DOUBLE
12866: LD_INT 1
12868: DEC
12869: ST_TO_ADDR
12870: LD_VAR 0 6
12874: PUSH
12875: FOR_TO
12876: IFFALSE 12958
// begin uc_side = side ;
12878: LD_ADDR_OWVAR 20
12882: PUSH
12883: LD_VAR 0 1
12887: ST_TO_ADDR
// uc_nation = nation ;
12888: LD_ADDR_OWVAR 21
12892: PUSH
12893: LD_VAR 0 2
12897: ST_TO_ADDR
// hc_name =  ;
12898: LD_ADDR_OWVAR 26
12902: PUSH
12903: LD_STRING 
12905: ST_TO_ADDR
// hc_gallery =  ;
12906: LD_ADDR_OWVAR 33
12910: PUSH
12911: LD_STRING 
12913: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12914: LD_INT 0
12916: PPUSH
12917: LD_INT 8
12919: PPUSH
12920: LD_VAR 0 8
12924: PPUSH
12925: CALL_OW 380
// un = CreateHuman ;
12929: LD_ADDR_VAR 0 16
12933: PUSH
12934: CALL_OW 44
12938: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12939: LD_VAR 0 16
12943: PPUSH
12944: LD_VAR 0 9
12948: PPUSH
12949: LD_INT 0
12951: PPUSH
12952: CALL_OW 49
// end ;
12956: GO 12875
12958: POP
12959: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12960: LD_ADDR_VAR 0 19
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_VAR 0 1
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 2
12979: PUSH
12980: LD_INT 25
12982: PUSH
12983: LD_INT 1
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 25
12992: PUSH
12993: LD_INT 5
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 25
13002: PUSH
13003: LD_INT 8
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 25
13012: PUSH
13013: LD_INT 9
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13036: LD_ADDR_VAR 0 18
13040: PUSH
13041: LD_INT 22
13043: PUSH
13044: LD_VAR 0 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 25
13055: PUSH
13056: LD_INT 4
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PPUSH
13067: CALL_OW 69
13071: ST_TO_ADDR
// for i in medic_list do
13072: LD_ADDR_VAR 0 14
13076: PUSH
13077: LD_VAR 0 18
13081: PUSH
13082: FOR_IN
13083: IFFALSE 13101
// ComMoveToArea ( i , healArea ) ;
13085: LD_VAR 0 14
13089: PPUSH
13090: LD_VAR 0 10
13094: PPUSH
13095: CALL_OW 113
13099: GO 13082
13101: POP
13102: POP
// if strategy = 1 then
13103: LD_VAR 0 12
13107: PUSH
13108: LD_INT 1
13110: EQUAL
13111: IFFALSE 13657
// begin repeat wait ( 0 0$3 ) ;
13113: LD_INT 105
13115: PPUSH
13116: CALL_OW 67
// for i in soldiersOK_list do
13120: LD_ADDR_VAR 0 14
13124: PUSH
13125: LD_VAR 0 19
13129: PUSH
13130: FOR_IN
13131: IFFALSE 13195
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13133: LD_VAR 0 14
13137: PPUSH
13138: LD_INT 91
13140: PPUSH
13141: LD_INT 63
13143: PPUSH
13144: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13148: LD_VAR 0 14
13152: PPUSH
13153: LD_INT 101
13155: PPUSH
13156: LD_INT 53
13158: PPUSH
13159: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13163: LD_VAR 0 14
13167: PPUSH
13168: LD_INT 75
13170: PPUSH
13171: LD_INT 23
13173: PPUSH
13174: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13178: LD_VAR 0 14
13182: PPUSH
13183: LD_INT 78
13185: PPUSH
13186: LD_INT 8
13188: PPUSH
13189: CALL_OW 174
// end ;
13193: GO 13130
13195: POP
13196: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13197: LD_INT 12
13199: PPUSH
13200: LD_INT 22
13202: PUSH
13203: LD_VAR 0 1
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PPUSH
13212: CALL_OW 70
13216: PUSH
13217: LD_INT 2
13219: GREATER
13220: IFFALSE 13113
// repeat wait ( 0 0$1 ) ;
13222: LD_INT 35
13224: PPUSH
13225: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13229: LD_ADDR_VAR 0 17
13233: PUSH
13234: LD_INT 22
13236: PUSH
13237: LD_VAR 0 1
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 1
13248: PUSH
13249: LD_INT 3
13251: PUSH
13252: LD_INT 24
13254: PUSH
13255: LD_INT 550
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 24
13268: PUSH
13269: LD_INT 250
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PPUSH
13285: CALL_OW 69
13289: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13290: LD_ADDR_VAR 0 19
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_VAR 0 1
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: LD_INT 25
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 25
13322: PUSH
13323: LD_INT 5
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 25
13332: PUSH
13333: LD_INT 8
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 25
13342: PUSH
13343: LD_INT 9
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 24
13359: PUSH
13360: LD_INT 1000
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: PPUSH
13372: CALL_OW 69
13376: ST_TO_ADDR
// if medicCount > 0 then
13377: LD_VAR 0 7
13381: PUSH
13382: LD_INT 0
13384: GREATER
13385: IFFALSE 13459
// begin if damageUnit_list > 0 then
13387: LD_VAR 0 17
13391: PUSH
13392: LD_INT 0
13394: GREATER
13395: IFFALSE 13459
// begin for i in damageUnit_list do
13397: LD_ADDR_VAR 0 14
13401: PUSH
13402: LD_VAR 0 17
13406: PUSH
13407: FOR_IN
13408: IFFALSE 13457
// begin ComMoveToArea ( i , healArea ) ;
13410: LD_VAR 0 14
13414: PPUSH
13415: LD_VAR 0 10
13419: PPUSH
13420: CALL_OW 113
// for j in medic_list do
13424: LD_ADDR_VAR 0 15
13428: PUSH
13429: LD_VAR 0 18
13433: PUSH
13434: FOR_IN
13435: IFFALSE 13453
// AddComHeal ( j , i ) ;
13437: LD_VAR 0 15
13441: PPUSH
13442: LD_VAR 0 14
13446: PPUSH
13447: CALL_OW 188
13451: GO 13434
13453: POP
13454: POP
// end ;
13455: GO 13407
13457: POP
13458: POP
// end ; end ; for i in soldiersOK_list do
13459: LD_ADDR_VAR 0 14
13463: PUSH
13464: LD_VAR 0 19
13468: PUSH
13469: FOR_IN
13470: IFFALSE 13646
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13472: LD_ADDR_VAR 0 22
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_VAR 0 11
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: PPUSH
13494: LD_VAR 0 14
13498: PPUSH
13499: CALL_OW 74
13503: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13504: LD_ADDR_VAR 0 23
13508: PUSH
13509: LD_INT 22
13511: PUSH
13512: LD_VAR 0 11
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 2
13523: PUSH
13524: LD_INT 59
13526: PUSH
13527: EMPTY
13528: LIST
13529: PUSH
13530: LD_INT 21
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 21
13542: PUSH
13543: LD_INT 2
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: EMPTY
13561: LIST
13562: PPUSH
13563: CALL_OW 69
13567: PPUSH
13568: LD_VAR 0 14
13572: PPUSH
13573: CALL_OW 74
13577: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13578: LD_VAR 0 14
13582: PPUSH
13583: LD_VAR 0 22
13587: PPUSH
13588: CALL_OW 296
13592: PUSH
13593: LD_INT 6
13595: PLUS
13596: PUSH
13597: LD_VAR 0 14
13601: PPUSH
13602: LD_VAR 0 23
13606: PPUSH
13607: CALL_OW 296
13611: LESS
13612: IFFALSE 13630
// begin ComAttackUnit ( i , target1 ) ;
13614: LD_VAR 0 14
13618: PPUSH
13619: LD_VAR 0 22
13623: PPUSH
13624: CALL_OW 115
// end else
13628: GO 13644
// begin ComAttackUnit ( i , target2 ) ;
13630: LD_VAR 0 14
13634: PPUSH
13635: LD_VAR 0 23
13639: PPUSH
13640: CALL_OW 115
// end ; end ;
13644: GO 13469
13646: POP
13647: POP
// until soldiersOK_list = [ ] ;
13648: LD_VAR 0 19
13652: PUSH
13653: EMPTY
13654: EQUAL
13655: IFFALSE 13222
// end ; if strategy = 2 then
13657: LD_VAR 0 12
13661: PUSH
13662: LD_INT 2
13664: EQUAL
13665: IFFALSE 14181
// begin repeat wait ( 0 0$1 ) ;
13667: LD_INT 35
13669: PPUSH
13670: CALL_OW 67
// for i in soldiersOK_list do
13674: LD_ADDR_VAR 0 14
13678: PUSH
13679: LD_VAR 0 19
13683: PUSH
13684: FOR_IN
13685: IFFALSE 13719
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13687: LD_VAR 0 14
13691: PPUSH
13692: LD_INT 91
13694: PPUSH
13695: LD_INT 63
13697: PPUSH
13698: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13702: LD_VAR 0 14
13706: PPUSH
13707: LD_INT 75
13709: PPUSH
13710: LD_INT 33
13712: PPUSH
13713: CALL_OW 174
// end ;
13717: GO 13684
13719: POP
13720: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13721: LD_INT 13
13723: PPUSH
13724: LD_INT 22
13726: PUSH
13727: LD_VAR 0 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PPUSH
13736: CALL_OW 70
13740: PUSH
13741: LD_INT 2
13743: GREATER
13744: IFFALSE 13667
// repeat wait ( 0 0$3 ) ;
13746: LD_INT 105
13748: PPUSH
13749: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13753: LD_ADDR_VAR 0 17
13757: PUSH
13758: LD_INT 22
13760: PUSH
13761: LD_VAR 0 1
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 1
13772: PUSH
13773: LD_INT 3
13775: PUSH
13776: LD_INT 24
13778: PUSH
13779: LD_INT 550
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 24
13792: PUSH
13793: LD_INT 250
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PPUSH
13809: CALL_OW 69
13813: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13814: LD_ADDR_VAR 0 19
13818: PUSH
13819: LD_INT 22
13821: PUSH
13822: LD_VAR 0 1
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 2
13833: PUSH
13834: LD_INT 25
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 25
13846: PUSH
13847: LD_INT 5
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 25
13856: PUSH
13857: LD_INT 8
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 25
13866: PUSH
13867: LD_INT 9
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 24
13883: PUSH
13884: LD_INT 1000
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: LIST
13895: PPUSH
13896: CALL_OW 69
13900: ST_TO_ADDR
// if medicCount > 0 then
13901: LD_VAR 0 7
13905: PUSH
13906: LD_INT 0
13908: GREATER
13909: IFFALSE 13983
// begin if damageUnit_list > 0 then
13911: LD_VAR 0 17
13915: PUSH
13916: LD_INT 0
13918: GREATER
13919: IFFALSE 13983
// begin for i in damageUnit_list do
13921: LD_ADDR_VAR 0 14
13925: PUSH
13926: LD_VAR 0 17
13930: PUSH
13931: FOR_IN
13932: IFFALSE 13981
// begin ComMoveToArea ( i , healArea ) ;
13934: LD_VAR 0 14
13938: PPUSH
13939: LD_VAR 0 10
13943: PPUSH
13944: CALL_OW 113
// for j in medic_list do
13948: LD_ADDR_VAR 0 15
13952: PUSH
13953: LD_VAR 0 18
13957: PUSH
13958: FOR_IN
13959: IFFALSE 13977
// AddComHeal ( j , i ) ;
13961: LD_VAR 0 15
13965: PPUSH
13966: LD_VAR 0 14
13970: PPUSH
13971: CALL_OW 188
13975: GO 13958
13977: POP
13978: POP
// end ;
13979: GO 13931
13981: POP
13982: POP
// end ; end ; for i in soldiersOK_list do
13983: LD_ADDR_VAR 0 14
13987: PUSH
13988: LD_VAR 0 19
13992: PUSH
13993: FOR_IN
13994: IFFALSE 14170
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13996: LD_ADDR_VAR 0 22
14000: PUSH
14001: LD_INT 22
14003: PUSH
14004: LD_VAR 0 11
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 69
14017: PPUSH
14018: LD_VAR 0 14
14022: PPUSH
14023: CALL_OW 74
14027: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14028: LD_ADDR_VAR 0 23
14032: PUSH
14033: LD_INT 22
14035: PUSH
14036: LD_VAR 0 11
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 2
14047: PUSH
14048: LD_INT 59
14050: PUSH
14051: EMPTY
14052: LIST
14053: PUSH
14054: LD_INT 21
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 21
14066: PUSH
14067: LD_INT 2
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: PPUSH
14087: CALL_OW 69
14091: PPUSH
14092: LD_VAR 0 14
14096: PPUSH
14097: CALL_OW 74
14101: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14102: LD_VAR 0 14
14106: PPUSH
14107: LD_VAR 0 22
14111: PPUSH
14112: CALL_OW 296
14116: PUSH
14117: LD_INT 6
14119: PLUS
14120: PUSH
14121: LD_VAR 0 14
14125: PPUSH
14126: LD_VAR 0 23
14130: PPUSH
14131: CALL_OW 296
14135: LESS
14136: IFFALSE 14154
// begin ComAttackUnit ( i , target1 ) ;
14138: LD_VAR 0 14
14142: PPUSH
14143: LD_VAR 0 22
14147: PPUSH
14148: CALL_OW 115
// end else
14152: GO 14168
// begin ComAttackUnit ( i , target2 ) ;
14154: LD_VAR 0 14
14158: PPUSH
14159: LD_VAR 0 23
14163: PPUSH
14164: CALL_OW 115
// end ; end ;
14168: GO 13993
14170: POP
14171: POP
// until soldiersOK_list = [ ] ;
14172: LD_VAR 0 19
14176: PUSH
14177: EMPTY
14178: EQUAL
14179: IFFALSE 13746
// end ; if strategy = 3 then
14181: LD_VAR 0 12
14185: PUSH
14186: LD_INT 3
14188: EQUAL
14189: IFFALSE 14735
// begin repeat wait ( 0 0$3 ) ;
14191: LD_INT 105
14193: PPUSH
14194: CALL_OW 67
// for i in soldiersOK_list do
14198: LD_ADDR_VAR 0 14
14202: PUSH
14203: LD_VAR 0 19
14207: PUSH
14208: FOR_IN
14209: IFFALSE 14273
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14211: LD_VAR 0 14
14215: PPUSH
14216: LD_INT 63
14218: PPUSH
14219: LD_INT 71
14221: PPUSH
14222: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14226: LD_VAR 0 14
14230: PPUSH
14231: LD_INT 35
14233: PPUSH
14234: LD_INT 44
14236: PPUSH
14237: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14241: LD_VAR 0 14
14245: PPUSH
14246: LD_INT 23
14248: PPUSH
14249: LD_INT 18
14251: PPUSH
14252: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14256: LD_VAR 0 14
14260: PPUSH
14261: LD_INT 26
14263: PPUSH
14264: LD_INT 12
14266: PPUSH
14267: CALL_OW 174
// end ;
14271: GO 14208
14273: POP
14274: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14275: LD_INT 14
14277: PPUSH
14278: LD_INT 22
14280: PUSH
14281: LD_VAR 0 1
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PPUSH
14290: CALL_OW 70
14294: PUSH
14295: LD_INT 2
14297: GREATER
14298: IFFALSE 14191
// repeat wait ( 0 0$1 ) ;
14300: LD_INT 35
14302: PPUSH
14303: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14307: LD_ADDR_VAR 0 17
14311: PUSH
14312: LD_INT 22
14314: PUSH
14315: LD_VAR 0 1
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 1
14326: PUSH
14327: LD_INT 3
14329: PUSH
14330: LD_INT 24
14332: PUSH
14333: LD_INT 550
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 24
14346: PUSH
14347: LD_INT 250
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PPUSH
14363: CALL_OW 69
14367: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14368: LD_ADDR_VAR 0 19
14372: PUSH
14373: LD_INT 22
14375: PUSH
14376: LD_VAR 0 1
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: LD_INT 25
14390: PUSH
14391: LD_INT 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 25
14400: PUSH
14401: LD_INT 5
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 25
14410: PUSH
14411: LD_INT 8
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 25
14420: PUSH
14421: LD_INT 9
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 24
14437: PUSH
14438: LD_INT 1000
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: PPUSH
14450: CALL_OW 69
14454: ST_TO_ADDR
// if medicCount > 0 then
14455: LD_VAR 0 7
14459: PUSH
14460: LD_INT 0
14462: GREATER
14463: IFFALSE 14537
// begin if damageUnit_list > 0 then
14465: LD_VAR 0 17
14469: PUSH
14470: LD_INT 0
14472: GREATER
14473: IFFALSE 14537
// begin for i in damageUnit_list do
14475: LD_ADDR_VAR 0 14
14479: PUSH
14480: LD_VAR 0 17
14484: PUSH
14485: FOR_IN
14486: IFFALSE 14535
// begin ComMoveToArea ( i , healArea ) ;
14488: LD_VAR 0 14
14492: PPUSH
14493: LD_VAR 0 10
14497: PPUSH
14498: CALL_OW 113
// for j in medic_list do
14502: LD_ADDR_VAR 0 15
14506: PUSH
14507: LD_VAR 0 18
14511: PUSH
14512: FOR_IN
14513: IFFALSE 14531
// AddComHeal ( j , i ) ;
14515: LD_VAR 0 15
14519: PPUSH
14520: LD_VAR 0 14
14524: PPUSH
14525: CALL_OW 188
14529: GO 14512
14531: POP
14532: POP
// end ;
14533: GO 14485
14535: POP
14536: POP
// end ; end ; for i in soldiersOK_list do
14537: LD_ADDR_VAR 0 14
14541: PUSH
14542: LD_VAR 0 19
14546: PUSH
14547: FOR_IN
14548: IFFALSE 14724
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14550: LD_ADDR_VAR 0 22
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_VAR 0 11
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 69
14571: PPUSH
14572: LD_VAR 0 14
14576: PPUSH
14577: CALL_OW 74
14581: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14582: LD_ADDR_VAR 0 23
14586: PUSH
14587: LD_INT 22
14589: PUSH
14590: LD_VAR 0 11
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 2
14601: PUSH
14602: LD_INT 59
14604: PUSH
14605: EMPTY
14606: LIST
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 1
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 21
14620: PUSH
14621: LD_INT 2
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: PPUSH
14641: CALL_OW 69
14645: PPUSH
14646: LD_VAR 0 14
14650: PPUSH
14651: CALL_OW 74
14655: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14656: LD_VAR 0 14
14660: PPUSH
14661: LD_VAR 0 22
14665: PPUSH
14666: CALL_OW 296
14670: PUSH
14671: LD_INT 6
14673: PLUS
14674: PUSH
14675: LD_VAR 0 14
14679: PPUSH
14680: LD_VAR 0 23
14684: PPUSH
14685: CALL_OW 296
14689: LESS
14690: IFFALSE 14708
// begin ComAttackUnit ( i , target1 ) ;
14692: LD_VAR 0 14
14696: PPUSH
14697: LD_VAR 0 22
14701: PPUSH
14702: CALL_OW 115
// end else
14706: GO 14722
// begin ComAttackUnit ( i , target2 ) ;
14708: LD_VAR 0 14
14712: PPUSH
14713: LD_VAR 0 23
14717: PPUSH
14718: CALL_OW 115
// end ; end ;
14722: GO 14547
14724: POP
14725: POP
// until soldiersOK_list = [ ] ;
14726: LD_VAR 0 19
14730: PUSH
14731: EMPTY
14732: EQUAL
14733: IFFALSE 14300
// end ; end ;
14735: LD_VAR 0 13
14739: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14740: LD_INT 0
14742: PPUSH
14743: PPUSH
14744: PPUSH
14745: PPUSH
14746: PPUSH
14747: PPUSH
14748: PPUSH
14749: PPUSH
14750: PPUSH
14751: PPUSH
14752: PPUSH
// amChassisTab = [ ] ;
14753: LD_ADDR_VAR 0 19
14757: PUSH
14758: EMPTY
14759: ST_TO_ADDR
// arChassisTab = [ ] ;
14760: LD_ADDR_VAR 0 18
14764: PUSH
14765: EMPTY
14766: ST_TO_ADDR
// ruChassisTab = [ ] ;
14767: LD_ADDR_VAR 0 17
14771: PUSH
14772: EMPTY
14773: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14774: LD_INT 35
14776: PPUSH
14777: CALL_OW 67
// if nation = 1 then
14781: LD_VAR 0 5
14785: PUSH
14786: LD_INT 1
14788: EQUAL
14789: IFFALSE 15280
// begin uc_side = side ;
14791: LD_ADDR_OWVAR 20
14795: PUSH
14796: LD_VAR 0 2
14800: ST_TO_ADDR
// uc_nation = nation ;
14801: LD_ADDR_OWVAR 21
14805: PUSH
14806: LD_VAR 0 5
14810: ST_TO_ADDR
// vc_engine = vehengine ;
14811: LD_ADDR_OWVAR 39
14815: PUSH
14816: LD_VAR 0 6
14820: ST_TO_ADDR
// vc_control = vehcontrol ;
14821: LD_ADDR_OWVAR 38
14825: PUSH
14826: LD_VAR 0 7
14830: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14831: LD_ADDR_OWVAR 40
14835: PUSH
14836: LD_VAR 0 10
14840: PUSH
14841: LD_INT 1
14843: PPUSH
14844: LD_VAR 0 10
14848: PPUSH
14849: CALL_OW 12
14853: ARRAY
14854: ST_TO_ADDR
// for j = 1 to AMWeapon do
14855: LD_ADDR_VAR 0 14
14859: PUSH
14860: DOUBLE
14861: LD_INT 1
14863: DEC
14864: ST_TO_ADDR
14865: LD_VAR 0 10
14869: PUSH
14870: FOR_TO
14871: IFFALSE 15172
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14873: LD_VAR 0 10
14877: PUSH
14878: LD_VAR 0 14
14882: ARRAY
14883: PUSH
14884: LD_INT 2
14886: EQUAL
14887: PUSH
14888: LD_VAR 0 10
14892: PUSH
14893: LD_VAR 0 14
14897: ARRAY
14898: PUSH
14899: LD_INT 3
14901: EQUAL
14902: OR
14903: IFFALSE 14956
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14905: LD_ADDR_VAR 0 19
14909: PUSH
14910: LD_INT 1
14912: PUSH
14913: LD_INT 2
14915: PUSH
14916: LD_INT 3
14918: PUSH
14919: LD_INT 4
14921: PUSH
14922: LD_INT 5
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14932: LD_ADDR_OWVAR 37
14936: PUSH
14937: LD_VAR 0 19
14941: PUSH
14942: LD_INT 1
14944: PPUSH
14945: LD_VAR 0 19
14949: PPUSH
14950: CALL_OW 12
14954: ARRAY
14955: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14956: LD_VAR 0 10
14960: PUSH
14961: LD_VAR 0 14
14965: ARRAY
14966: PUSH
14967: LD_INT 4
14969: EQUAL
14970: PUSH
14971: LD_VAR 0 10
14975: PUSH
14976: LD_VAR 0 14
14980: ARRAY
14981: PUSH
14982: LD_INT 5
14984: EQUAL
14985: OR
14986: PUSH
14987: LD_VAR 0 10
14991: PUSH
14992: LD_VAR 0 14
14996: ARRAY
14997: PUSH
14998: LD_INT 9
15000: EQUAL
15001: OR
15002: PUSH
15003: LD_VAR 0 10
15007: PUSH
15008: LD_VAR 0 14
15012: ARRAY
15013: PUSH
15014: LD_INT 11
15016: EQUAL
15017: OR
15018: PUSH
15019: LD_VAR 0 10
15023: PUSH
15024: LD_VAR 0 14
15028: ARRAY
15029: PUSH
15030: LD_INT 7
15032: EQUAL
15033: OR
15034: IFFALSE 15083
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15036: LD_ADDR_VAR 0 19
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: LD_INT 3
15046: PUSH
15047: LD_INT 4
15049: PUSH
15050: LD_INT 5
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15059: LD_ADDR_OWVAR 37
15063: PUSH
15064: LD_VAR 0 19
15068: PUSH
15069: LD_INT 1
15071: PPUSH
15072: LD_VAR 0 19
15076: PPUSH
15077: CALL_OW 12
15081: ARRAY
15082: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15083: LD_VAR 0 10
15087: PUSH
15088: LD_VAR 0 14
15092: ARRAY
15093: PUSH
15094: LD_INT 8
15096: EQUAL
15097: PUSH
15098: LD_VAR 0 10
15102: PUSH
15103: LD_VAR 0 14
15107: ARRAY
15108: PUSH
15109: LD_INT 6
15111: EQUAL
15112: OR
15113: PUSH
15114: LD_VAR 0 10
15118: PUSH
15119: LD_VAR 0 14
15123: ARRAY
15124: PUSH
15125: LD_INT 10
15127: EQUAL
15128: OR
15129: IFFALSE 15170
// begin amChassisTab = [ 4 , 5 ] ;
15131: LD_ADDR_VAR 0 19
15135: PUSH
15136: LD_INT 4
15138: PUSH
15139: LD_INT 5
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15146: LD_ADDR_OWVAR 37
15150: PUSH
15151: LD_VAR 0 19
15155: PUSH
15156: LD_INT 1
15158: PPUSH
15159: LD_VAR 0 19
15163: PPUSH
15164: CALL_OW 12
15168: ARRAY
15169: ST_TO_ADDR
// end ; end ;
15170: GO 14870
15172: POP
15173: POP
// veh = CreateVehicle ;
15174: LD_ADDR_VAR 0 16
15178: PUSH
15179: CALL_OW 45
15183: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15184: LD_VAR 0 16
15188: PPUSH
15189: LD_VAR 0 1
15193: PPUSH
15194: LD_INT 0
15196: PPUSH
15197: CALL_OW 49
// if vehControl = 1 then
15201: LD_VAR 0 7
15205: PUSH
15206: LD_INT 1
15208: EQUAL
15209: IFFALSE 15266
// begin hc_gallery =  ;
15211: LD_ADDR_OWVAR 33
15215: PUSH
15216: LD_STRING 
15218: ST_TO_ADDR
// hc_name =  ;
15219: LD_ADDR_OWVAR 26
15223: PUSH
15224: LD_STRING 
15226: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15227: LD_INT 0
15229: PPUSH
15230: LD_INT 3
15232: PPUSH
15233: LD_VAR 0 4
15237: PPUSH
15238: CALL_OW 380
// un = CreateHuman ;
15242: LD_ADDR_VAR 0 15
15246: PUSH
15247: CALL_OW 44
15251: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15252: LD_VAR 0 15
15256: PPUSH
15257: LD_VAR 0 16
15261: PPUSH
15262: CALL_OW 52
// end ; i = i + 1 ;
15266: LD_ADDR_VAR 0 13
15270: PUSH
15271: LD_VAR 0 13
15275: PUSH
15276: LD_INT 1
15278: PLUS
15279: ST_TO_ADDR
// end ; if nation = 2 then
15280: LD_VAR 0 5
15284: PUSH
15285: LD_INT 2
15287: EQUAL
15288: IFFALSE 15712
// begin uc_side = side ;
15290: LD_ADDR_OWVAR 20
15294: PUSH
15295: LD_VAR 0 2
15299: ST_TO_ADDR
// uc_nation = nation ;
15300: LD_ADDR_OWVAR 21
15304: PUSH
15305: LD_VAR 0 5
15309: ST_TO_ADDR
// vc_engine = vehengine ;
15310: LD_ADDR_OWVAR 39
15314: PUSH
15315: LD_VAR 0 6
15319: ST_TO_ADDR
// vc_control = vehcontrol ;
15320: LD_ADDR_OWVAR 38
15324: PUSH
15325: LD_VAR 0 7
15329: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15330: LD_ADDR_OWVAR 40
15334: PUSH
15335: LD_VAR 0 9
15339: PUSH
15340: LD_INT 1
15342: PPUSH
15343: LD_VAR 0 9
15347: PPUSH
15348: CALL_OW 12
15352: ARRAY
15353: ST_TO_ADDR
// for j = 1 to ARWeapons do
15354: LD_ADDR_VAR 0 14
15358: PUSH
15359: DOUBLE
15360: LD_INT 1
15362: DEC
15363: ST_TO_ADDR
15364: LD_VAR 0 9
15368: PUSH
15369: FOR_TO
15370: IFFALSE 15604
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15372: LD_VAR 0 9
15376: PUSH
15377: LD_VAR 0 14
15381: ARRAY
15382: PUSH
15383: LD_INT 24
15385: EQUAL
15386: PUSH
15387: LD_VAR 0 9
15391: PUSH
15392: LD_VAR 0 14
15396: ARRAY
15397: PUSH
15398: LD_INT 22
15400: EQUAL
15401: OR
15402: PUSH
15403: LD_VAR 0 9
15407: PUSH
15408: LD_VAR 0 14
15412: ARRAY
15413: PUSH
15414: LD_INT 23
15416: EQUAL
15417: OR
15418: PUSH
15419: LD_VAR 0 9
15423: PUSH
15424: LD_VAR 0 14
15428: ARRAY
15429: PUSH
15430: LD_INT 30
15432: EQUAL
15433: OR
15434: IFFALSE 15483
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15436: LD_ADDR_VAR 0 18
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: LD_INT 12
15446: PUSH
15447: LD_INT 13
15449: PUSH
15450: LD_INT 14
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15459: LD_ADDR_OWVAR 37
15463: PUSH
15464: LD_VAR 0 18
15468: PUSH
15469: LD_INT 1
15471: PPUSH
15472: LD_VAR 0 18
15476: PPUSH
15477: CALL_OW 12
15481: ARRAY
15482: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15483: LD_VAR 0 9
15487: PUSH
15488: LD_VAR 0 14
15492: ARRAY
15493: PUSH
15494: LD_INT 29
15496: EQUAL
15497: PUSH
15498: LD_VAR 0 9
15502: PUSH
15503: LD_VAR 0 14
15507: ARRAY
15508: PUSH
15509: LD_INT 28
15511: EQUAL
15512: OR
15513: PUSH
15514: LD_VAR 0 9
15518: PUSH
15519: LD_VAR 0 14
15523: ARRAY
15524: PUSH
15525: LD_INT 27
15527: EQUAL
15528: OR
15529: PUSH
15530: LD_VAR 0 9
15534: PUSH
15535: LD_VAR 0 14
15539: ARRAY
15540: PUSH
15541: LD_INT 26
15543: EQUAL
15544: OR
15545: PUSH
15546: LD_VAR 0 9
15550: PUSH
15551: LD_VAR 0 14
15555: ARRAY
15556: PUSH
15557: LD_INT 25
15559: EQUAL
15560: OR
15561: IFFALSE 15602
// begin arChassisTab = [ 13 , 14 ] ;
15563: LD_ADDR_VAR 0 18
15567: PUSH
15568: LD_INT 13
15570: PUSH
15571: LD_INT 14
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15578: LD_ADDR_OWVAR 37
15582: PUSH
15583: LD_VAR 0 18
15587: PUSH
15588: LD_INT 1
15590: PPUSH
15591: LD_VAR 0 18
15595: PPUSH
15596: CALL_OW 12
15600: ARRAY
15601: ST_TO_ADDR
// end ; end ;
15602: GO 15369
15604: POP
15605: POP
// veh = CreateVehicle ;
15606: LD_ADDR_VAR 0 16
15610: PUSH
15611: CALL_OW 45
15615: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15616: LD_VAR 0 16
15620: PPUSH
15621: LD_VAR 0 1
15625: PPUSH
15626: LD_INT 0
15628: PPUSH
15629: CALL_OW 49
// if vehcontrol = 1 then
15633: LD_VAR 0 7
15637: PUSH
15638: LD_INT 1
15640: EQUAL
15641: IFFALSE 15698
// begin hc_gallery =  ;
15643: LD_ADDR_OWVAR 33
15647: PUSH
15648: LD_STRING 
15650: ST_TO_ADDR
// hc_name =  ;
15651: LD_ADDR_OWVAR 26
15655: PUSH
15656: LD_STRING 
15658: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15659: LD_INT 0
15661: PPUSH
15662: LD_INT 3
15664: PPUSH
15665: LD_VAR 0 4
15669: PPUSH
15670: CALL_OW 380
// un = CreateHuman ;
15674: LD_ADDR_VAR 0 15
15678: PUSH
15679: CALL_OW 44
15683: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15684: LD_VAR 0 15
15688: PPUSH
15689: LD_VAR 0 16
15693: PPUSH
15694: CALL_OW 52
// end ; i = i + 1 ;
15698: LD_ADDR_VAR 0 13
15702: PUSH
15703: LD_VAR 0 13
15707: PUSH
15708: LD_INT 1
15710: PLUS
15711: ST_TO_ADDR
// end ; if nation = 3 then
15712: LD_VAR 0 5
15716: PUSH
15717: LD_INT 3
15719: EQUAL
15720: IFFALSE 16112
// begin uc_side = side ;
15722: LD_ADDR_OWVAR 20
15726: PUSH
15727: LD_VAR 0 2
15731: ST_TO_ADDR
// uc_nation = nation ;
15732: LD_ADDR_OWVAR 21
15736: PUSH
15737: LD_VAR 0 5
15741: ST_TO_ADDR
// vc_engine = vehengine ;
15742: LD_ADDR_OWVAR 39
15746: PUSH
15747: LD_VAR 0 6
15751: ST_TO_ADDR
// vc_control = vehcontrol ;
15752: LD_ADDR_OWVAR 38
15756: PUSH
15757: LD_VAR 0 7
15761: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15762: LD_ADDR_OWVAR 40
15766: PUSH
15767: LD_VAR 0 8
15771: PUSH
15772: LD_INT 1
15774: PPUSH
15775: LD_VAR 0 8
15779: PPUSH
15780: CALL_OW 12
15784: ARRAY
15785: ST_TO_ADDR
// for j = 1 to RuWeapons do
15786: LD_ADDR_VAR 0 14
15790: PUSH
15791: DOUBLE
15792: LD_INT 1
15794: DEC
15795: ST_TO_ADDR
15796: LD_VAR 0 8
15800: PUSH
15801: FOR_TO
15802: IFFALSE 16004
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15804: LD_VAR 0 8
15808: PUSH
15809: LD_VAR 0 14
15813: ARRAY
15814: PUSH
15815: LD_INT 42
15817: EQUAL
15818: PUSH
15819: LD_VAR 0 8
15823: PUSH
15824: LD_VAR 0 14
15828: ARRAY
15829: PUSH
15830: LD_INT 43
15832: EQUAL
15833: OR
15834: PUSH
15835: LD_VAR 0 8
15839: PUSH
15840: LD_VAR 0 14
15844: ARRAY
15845: PUSH
15846: LD_INT 44
15848: EQUAL
15849: OR
15850: PUSH
15851: LD_VAR 0 8
15855: PUSH
15856: LD_VAR 0 14
15860: ARRAY
15861: PUSH
15862: LD_INT 45
15864: EQUAL
15865: OR
15866: PUSH
15867: LD_VAR 0 8
15871: PUSH
15872: LD_VAR 0 14
15876: ARRAY
15877: PUSH
15878: LD_INT 49
15880: EQUAL
15881: OR
15882: IFFALSE 15931
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15884: LD_ADDR_VAR 0 17
15888: PUSH
15889: LD_INT 21
15891: PUSH
15892: LD_INT 22
15894: PUSH
15895: LD_INT 23
15897: PUSH
15898: LD_INT 24
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15907: LD_ADDR_OWVAR 37
15911: PUSH
15912: LD_VAR 0 17
15916: PUSH
15917: LD_INT 1
15919: PPUSH
15920: LD_VAR 0 17
15924: PPUSH
15925: CALL_OW 12
15929: ARRAY
15930: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15931: LD_VAR 0 8
15935: PUSH
15936: LD_VAR 0 14
15940: ARRAY
15941: PUSH
15942: LD_INT 46
15944: EQUAL
15945: PUSH
15946: LD_VAR 0 8
15950: PUSH
15951: LD_VAR 0 14
15955: ARRAY
15956: PUSH
15957: LD_INT 47
15959: EQUAL
15960: OR
15961: IFFALSE 16002
// begin ruChassisTab = [ 23 , 24 ] ;
15963: LD_ADDR_VAR 0 17
15967: PUSH
15968: LD_INT 23
15970: PUSH
15971: LD_INT 24
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15978: LD_ADDR_OWVAR 37
15982: PUSH
15983: LD_VAR 0 17
15987: PUSH
15988: LD_INT 1
15990: PPUSH
15991: LD_VAR 0 17
15995: PPUSH
15996: CALL_OW 12
16000: ARRAY
16001: ST_TO_ADDR
// end ; end ;
16002: GO 15801
16004: POP
16005: POP
// veh = CreateVehicle ;
16006: LD_ADDR_VAR 0 16
16010: PUSH
16011: CALL_OW 45
16015: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16016: LD_VAR 0 16
16020: PPUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: LD_INT 0
16028: PPUSH
16029: CALL_OW 49
// if vehcontrol = 1 then
16033: LD_VAR 0 7
16037: PUSH
16038: LD_INT 1
16040: EQUAL
16041: IFFALSE 16098
// begin hc_gallery =  ;
16043: LD_ADDR_OWVAR 33
16047: PUSH
16048: LD_STRING 
16050: ST_TO_ADDR
// hc_name =  ;
16051: LD_ADDR_OWVAR 26
16055: PUSH
16056: LD_STRING 
16058: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16059: LD_INT 0
16061: PPUSH
16062: LD_INT 3
16064: PPUSH
16065: LD_VAR 0 4
16069: PPUSH
16070: CALL_OW 380
// un = CreateHuman ;
16074: LD_ADDR_VAR 0 15
16078: PUSH
16079: CALL_OW 44
16083: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16084: LD_VAR 0 15
16088: PPUSH
16089: LD_VAR 0 16
16093: PPUSH
16094: CALL_OW 52
// end ; i = i + 1 ;
16098: LD_ADDR_VAR 0 13
16102: PUSH
16103: LD_VAR 0 13
16107: PUSH
16108: LD_INT 1
16110: PLUS
16111: ST_TO_ADDR
// end ; until i = vehCount ;
16112: LD_VAR 0 13
16116: PUSH
16117: LD_VAR 0 3
16121: EQUAL
16122: IFFALSE 14774
// repeat wait ( 0 0$1 ) ;
16124: LD_INT 35
16126: PPUSH
16127: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16131: LD_ADDR_VAR 0 20
16135: PUSH
16136: LD_INT 22
16138: PUSH
16139: LD_VAR 0 2
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 21
16150: PUSH
16151: LD_INT 2
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 24
16160: PUSH
16161: LD_INT 250
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: PPUSH
16173: CALL_OW 69
16177: ST_TO_ADDR
// if vehicleOK_list > 0 then
16178: LD_VAR 0 20
16182: PUSH
16183: LD_INT 0
16185: GREATER
16186: IFFALSE 16377
// begin for i in vehicleOK_list do
16188: LD_ADDR_VAR 0 13
16192: PUSH
16193: LD_VAR 0 20
16197: PUSH
16198: FOR_IN
16199: IFFALSE 16375
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16201: LD_ADDR_VAR 0 21
16205: PUSH
16206: LD_INT 22
16208: PUSH
16209: LD_VAR 0 11
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PPUSH
16218: CALL_OW 69
16222: PPUSH
16223: LD_VAR 0 13
16227: PPUSH
16228: CALL_OW 74
16232: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16233: LD_ADDR_VAR 0 22
16237: PUSH
16238: LD_INT 22
16240: PUSH
16241: LD_VAR 0 11
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 2
16252: PUSH
16253: LD_INT 59
16255: PUSH
16256: EMPTY
16257: LIST
16258: PUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 1
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 21
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: EMPTY
16290: LIST
16291: PPUSH
16292: CALL_OW 69
16296: PPUSH
16297: LD_VAR 0 13
16301: PPUSH
16302: CALL_OW 74
16306: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16307: LD_VAR 0 13
16311: PPUSH
16312: LD_VAR 0 21
16316: PPUSH
16317: CALL_OW 296
16321: PUSH
16322: LD_INT 6
16324: PLUS
16325: PUSH
16326: LD_VAR 0 13
16330: PPUSH
16331: LD_VAR 0 22
16335: PPUSH
16336: CALL_OW 296
16340: LESS
16341: IFFALSE 16359
// begin ComAttackUnit ( i , target1 ) ;
16343: LD_VAR 0 13
16347: PPUSH
16348: LD_VAR 0 21
16352: PPUSH
16353: CALL_OW 115
// end else
16357: GO 16373
// begin ComAttackUnit ( i , target2 ) ;
16359: LD_VAR 0 13
16363: PPUSH
16364: LD_VAR 0 22
16368: PPUSH
16369: CALL_OW 115
// end ; end ;
16373: GO 16198
16375: POP
16376: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16377: LD_INT 22
16379: PUSH
16380: LD_VAR 0 2
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 21
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 24
16401: PUSH
16402: LD_INT 250
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: PPUSH
16414: CALL_OW 69
16418: PUSH
16419: LD_INT 0
16421: EQUAL
16422: IFFALSE 16124
// end ;
16424: LD_VAR 0 12
16428: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16429: LD_INT 0
16431: PPUSH
16432: PPUSH
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
16437: PPUSH
16438: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16439: LD_ADDR_VAR 0 7
16443: PUSH
16444: LD_INT 22
16446: PUSH
16447: LD_VAR 0 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: LD_INT 3
16461: PUSH
16462: LD_INT 24
16464: PUSH
16465: LD_INT 550
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 24
16478: PUSH
16479: LD_INT 250
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PPUSH
16495: CALL_OW 69
16499: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16500: LD_ADDR_VAR 0 8
16504: PUSH
16505: LD_INT 22
16507: PUSH
16508: LD_VAR 0 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 25
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 25
16532: PUSH
16533: LD_INT 5
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 25
16542: PUSH
16543: LD_INT 8
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 25
16552: PUSH
16553: LD_INT 9
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 24
16569: PUSH
16570: LD_INT 1000
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: PPUSH
16582: CALL_OW 69
16586: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16587: LD_ADDR_VAR 0 9
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_VAR 0 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 25
16606: PUSH
16607: LD_INT 4
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: ST_TO_ADDR
// if medicCount > 0 then
16623: LD_VAR 0 9
16627: PUSH
16628: LD_INT 0
16630: GREATER
16631: IFFALSE 16705
// begin if damageUnit_list > 0 then
16633: LD_VAR 0 7
16637: PUSH
16638: LD_INT 0
16640: GREATER
16641: IFFALSE 16705
// begin for i in damageUnit_list do
16643: LD_ADDR_VAR 0 5
16647: PUSH
16648: LD_VAR 0 7
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16703
// begin ComMoveToArea ( i , healArea ) ;
16656: LD_VAR 0 5
16660: PPUSH
16661: LD_VAR 0 2
16665: PPUSH
16666: CALL_OW 113
// for j in medicCount do
16670: LD_ADDR_VAR 0 6
16674: PUSH
16675: LD_VAR 0 9
16679: PUSH
16680: FOR_IN
16681: IFFALSE 16699
// AddComHeal ( j , i ) ;
16683: LD_VAR 0 6
16687: PPUSH
16688: LD_VAR 0 5
16692: PPUSH
16693: CALL_OW 188
16697: GO 16680
16699: POP
16700: POP
// end ;
16701: GO 16653
16703: POP
16704: POP
// end ; end ; if soldiersOK_list > 0 then
16705: LD_VAR 0 8
16709: PUSH
16710: LD_INT 0
16712: GREATER
16713: IFFALSE 16904
// begin for i in soldiersOK_list do
16715: LD_ADDR_VAR 0 5
16719: PUSH
16720: LD_VAR 0 8
16724: PUSH
16725: FOR_IN
16726: IFFALSE 16902
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16728: LD_ADDR_VAR 0 10
16732: PUSH
16733: LD_INT 22
16735: PUSH
16736: LD_VAR 0 3
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 69
16749: PPUSH
16750: LD_VAR 0 5
16754: PPUSH
16755: CALL_OW 74
16759: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16760: LD_ADDR_VAR 0 11
16764: PUSH
16765: LD_INT 22
16767: PUSH
16768: LD_VAR 0 3
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 2
16779: PUSH
16780: LD_INT 59
16782: PUSH
16783: EMPTY
16784: LIST
16785: PUSH
16786: LD_INT 21
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 21
16798: PUSH
16799: LD_INT 2
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: PPUSH
16819: CALL_OW 69
16823: PPUSH
16824: LD_VAR 0 5
16828: PPUSH
16829: CALL_OW 74
16833: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16834: LD_VAR 0 5
16838: PPUSH
16839: LD_VAR 0 10
16843: PPUSH
16844: CALL_OW 296
16848: PUSH
16849: LD_INT 8
16851: PLUS
16852: PUSH
16853: LD_VAR 0 5
16857: PPUSH
16858: LD_VAR 0 11
16862: PPUSH
16863: CALL_OW 296
16867: LESS
16868: IFFALSE 16886
// begin ComAttackUnit ( i , target1 ) ;
16870: LD_VAR 0 5
16874: PPUSH
16875: LD_VAR 0 10
16879: PPUSH
16880: CALL_OW 115
// end else
16884: GO 16900
// begin ComAttackUnit ( i , target2 ) ;
16886: LD_VAR 0 5
16890: PPUSH
16891: LD_VAR 0 11
16895: PPUSH
16896: CALL_OW 115
// end ; end ;
16900: GO 16725
16902: POP
16903: POP
// end ; end ;
16904: LD_VAR 0 4
16908: RET
// export function GetDriverVehicle ( unit ) ; begin
16909: LD_INT 0
16911: PPUSH
// if not unit then
16912: LD_VAR 0 1
16916: NOT
16917: IFFALSE 16921
// exit ;
16919: GO 16959
// result := IsInUnit ( unit ) ;
16921: LD_ADDR_VAR 0 2
16925: PUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 310
16935: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
16936: LD_VAR 0 2
16940: PPUSH
16941: CALL_OW 247
16945: PUSH
16946: LD_INT 2
16948: NONEQUAL
16949: IFFALSE 16959
// result := 0 ;
16951: LD_ADDR_VAR 0 2
16955: PUSH
16956: LD_INT 0
16958: ST_TO_ADDR
// end ;
16959: LD_VAR 0 2
16963: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
16964: LD_INT 0
16966: PPUSH
16967: PPUSH
16968: PPUSH
16969: PPUSH
16970: PPUSH
16971: PPUSH
16972: PPUSH
16973: PPUSH
16974: PPUSH
// result := false ;
16975: LD_ADDR_VAR 0 7
16979: PUSH
16980: LD_INT 0
16982: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16983: LD_VAR 0 1
16987: NOT
16988: PUSH
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 266
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: IN
17009: NOT
17010: OR
17011: PUSH
17012: LD_VAR 0 2
17016: NOT
17017: OR
17018: PUSH
17019: LD_VAR 0 5
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: LD_INT 3
17035: PUSH
17036: LD_INT 4
17038: PUSH
17039: LD_INT 5
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: IN
17050: NOT
17051: OR
17052: PUSH
17053: LD_VAR 0 3
17057: PPUSH
17058: LD_VAR 0 4
17062: PPUSH
17063: CALL_OW 488
17067: NOT
17068: OR
17069: IFFALSE 17073
// exit ;
17071: GO 17754
// pom := GetBase ( bdepot ) ;
17073: LD_ADDR_VAR 0 10
17077: PUSH
17078: LD_VAR 0 1
17082: PPUSH
17083: CALL_OW 274
17087: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17088: LD_ADDR_VAR 0 11
17092: PUSH
17093: LD_VAR 0 2
17097: PPUSH
17098: LD_VAR 0 1
17102: PPUSH
17103: CALL_OW 248
17107: PPUSH
17108: CALL_OW 450
17112: ST_TO_ADDR
// if check_cost then
17113: LD_VAR 0 6
17117: IFFALSE 17194
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17119: LD_VAR 0 10
17123: PPUSH
17124: LD_INT 1
17126: PPUSH
17127: CALL_OW 275
17131: PUSH
17132: LD_VAR 0 11
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: GREATEREQUAL
17141: PUSH
17142: LD_VAR 0 10
17146: PPUSH
17147: LD_INT 2
17149: PPUSH
17150: CALL_OW 275
17154: PUSH
17155: LD_VAR 0 11
17159: PUSH
17160: LD_INT 2
17162: ARRAY
17163: GREATEREQUAL
17164: AND
17165: PUSH
17166: LD_VAR 0 10
17170: PPUSH
17171: LD_INT 3
17173: PPUSH
17174: CALL_OW 275
17178: PUSH
17179: LD_VAR 0 11
17183: PUSH
17184: LD_INT 3
17186: ARRAY
17187: GREATEREQUAL
17188: AND
17189: NOT
17190: IFFALSE 17194
// exit ;
17192: GO 17754
// if GetBType ( bdepot ) = b_depot then
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 266
17203: PUSH
17204: LD_INT 0
17206: EQUAL
17207: IFFALSE 17219
// dist := 28 else
17209: LD_ADDR_VAR 0 14
17213: PUSH
17214: LD_INT 28
17216: ST_TO_ADDR
17217: GO 17227
// dist := 36 ;
17219: LD_ADDR_VAR 0 14
17223: PUSH
17224: LD_INT 36
17226: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17227: LD_VAR 0 1
17231: PPUSH
17232: LD_VAR 0 3
17236: PPUSH
17237: LD_VAR 0 4
17241: PPUSH
17242: CALL_OW 297
17246: PUSH
17247: LD_VAR 0 14
17251: GREATER
17252: IFFALSE 17256
// exit ;
17254: GO 17754
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17256: LD_ADDR_VAR 0 12
17260: PUSH
17261: LD_VAR 0 2
17265: PPUSH
17266: LD_VAR 0 3
17270: PPUSH
17271: LD_VAR 0 4
17275: PPUSH
17276: LD_VAR 0 5
17280: PPUSH
17281: LD_VAR 0 1
17285: PPUSH
17286: CALL_OW 248
17290: PPUSH
17291: LD_INT 0
17293: PPUSH
17294: CALL 54597 0 6
17298: ST_TO_ADDR
// if not hexes then
17299: LD_VAR 0 12
17303: NOT
17304: IFFALSE 17308
// exit ;
17306: GO 17754
// hex := GetHexInfo ( x , y ) ;
17308: LD_ADDR_VAR 0 15
17312: PUSH
17313: LD_VAR 0 3
17317: PPUSH
17318: LD_VAR 0 4
17322: PPUSH
17323: CALL_OW 546
17327: ST_TO_ADDR
// if hex [ 1 ] then
17328: LD_VAR 0 15
17332: PUSH
17333: LD_INT 1
17335: ARRAY
17336: IFFALSE 17340
// exit ;
17338: GO 17754
// height := hex [ 2 ] ;
17340: LD_ADDR_VAR 0 13
17344: PUSH
17345: LD_VAR 0 15
17349: PUSH
17350: LD_INT 2
17352: ARRAY
17353: ST_TO_ADDR
// for i = 1 to hexes do
17354: LD_ADDR_VAR 0 8
17358: PUSH
17359: DOUBLE
17360: LD_INT 1
17362: DEC
17363: ST_TO_ADDR
17364: LD_VAR 0 12
17368: PUSH
17369: FOR_TO
17370: IFFALSE 17698
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17372: LD_VAR 0 12
17376: PUSH
17377: LD_VAR 0 8
17381: ARRAY
17382: PUSH
17383: LD_INT 1
17385: ARRAY
17386: PPUSH
17387: LD_VAR 0 12
17391: PUSH
17392: LD_VAR 0 8
17396: ARRAY
17397: PUSH
17398: LD_INT 2
17400: ARRAY
17401: PPUSH
17402: CALL_OW 488
17406: NOT
17407: IFFALSE 17411
// continue ;
17409: GO 17369
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17411: LD_ADDR_VAR 0 9
17415: PUSH
17416: LD_VAR 0 12
17420: PUSH
17421: LD_VAR 0 8
17425: ARRAY
17426: PUSH
17427: LD_INT 1
17429: ARRAY
17430: PPUSH
17431: LD_VAR 0 12
17435: PUSH
17436: LD_VAR 0 8
17440: ARRAY
17441: PUSH
17442: LD_INT 2
17444: ARRAY
17445: PPUSH
17446: CALL_OW 546
17450: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17451: LD_VAR 0 9
17455: PUSH
17456: LD_INT 1
17458: ARRAY
17459: PUSH
17460: LD_VAR 0 9
17464: PUSH
17465: LD_INT 2
17467: ARRAY
17468: PUSH
17469: LD_VAR 0 13
17473: PUSH
17474: LD_INT 2
17476: PLUS
17477: GREATER
17478: OR
17479: PUSH
17480: LD_VAR 0 9
17484: PUSH
17485: LD_INT 2
17487: ARRAY
17488: PUSH
17489: LD_VAR 0 13
17493: PUSH
17494: LD_INT 2
17496: MINUS
17497: LESS
17498: OR
17499: PUSH
17500: LD_VAR 0 9
17504: PUSH
17505: LD_INT 3
17507: ARRAY
17508: PUSH
17509: LD_INT 0
17511: PUSH
17512: LD_INT 8
17514: PUSH
17515: LD_INT 9
17517: PUSH
17518: LD_INT 10
17520: PUSH
17521: LD_INT 11
17523: PUSH
17524: LD_INT 12
17526: PUSH
17527: LD_INT 13
17529: PUSH
17530: LD_INT 16
17532: PUSH
17533: LD_INT 17
17535: PUSH
17536: LD_INT 18
17538: PUSH
17539: LD_INT 19
17541: PUSH
17542: LD_INT 20
17544: PUSH
17545: LD_INT 21
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: IN
17563: NOT
17564: OR
17565: PUSH
17566: LD_VAR 0 9
17570: PUSH
17571: LD_INT 5
17573: ARRAY
17574: NOT
17575: OR
17576: PUSH
17577: LD_VAR 0 9
17581: PUSH
17582: LD_INT 6
17584: ARRAY
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 7
17594: PUSH
17595: LD_INT 9
17597: PUSH
17598: LD_INT 10
17600: PUSH
17601: LD_INT 11
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: IN
17612: NOT
17613: OR
17614: PUSH
17615: LD_VAR 0 12
17619: PUSH
17620: LD_VAR 0 8
17624: ARRAY
17625: PUSH
17626: LD_INT 1
17628: ARRAY
17629: PPUSH
17630: LD_VAR 0 12
17634: PUSH
17635: LD_VAR 0 8
17639: ARRAY
17640: PUSH
17641: LD_INT 2
17643: ARRAY
17644: PPUSH
17645: CALL_OW 428
17649: PUSH
17650: LD_INT 0
17652: GREATER
17653: OR
17654: PUSH
17655: LD_VAR 0 12
17659: PUSH
17660: LD_VAR 0 8
17664: ARRAY
17665: PUSH
17666: LD_INT 1
17668: ARRAY
17669: PPUSH
17670: LD_VAR 0 12
17674: PUSH
17675: LD_VAR 0 8
17679: ARRAY
17680: PUSH
17681: LD_INT 2
17683: ARRAY
17684: PPUSH
17685: CALL_OW 351
17689: OR
17690: IFFALSE 17696
// exit ;
17692: POP
17693: POP
17694: GO 17754
// end ;
17696: GO 17369
17698: POP
17699: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17700: LD_VAR 0 2
17704: PUSH
17705: LD_INT 29
17707: PUSH
17708: LD_INT 30
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: IN
17715: PUSH
17716: LD_VAR 0 3
17720: PPUSH
17721: LD_VAR 0 4
17725: PPUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 255
17735: PPUSH
17736: CALL_OW 440
17740: NOT
17741: AND
17742: IFFALSE 17746
// exit ;
17744: GO 17754
// result := true ;
17746: LD_ADDR_VAR 0 7
17750: PUSH
17751: LD_INT 1
17753: ST_TO_ADDR
// end ; end_of_file
17754: LD_VAR 0 7
17758: RET
// every 1 do var i ;
17759: GO 17761
17761: DISABLE
17762: LD_INT 0
17764: PPUSH
// begin Video ( true ) ;
17765: LD_INT 1
17767: PPUSH
17768: CALL 77246 0 1
// CenterOnXY ( 53 , 40 ) ;
17772: LD_INT 53
17774: PPUSH
17775: LD_INT 40
17777: PPUSH
17778: CALL_OW 84
// wait ( 0 0$5 ) ;
17782: LD_INT 175
17784: PPUSH
17785: CALL_OW 67
// if gammaCommander = 1 then
17789: LD_EXP 12
17793: PUSH
17794: LD_INT 1
17796: EQUAL
17797: IFFALSE 17811
// Say ( Donaldson , D1-Don-1 ) ;
17799: LD_EXP 3
17803: PPUSH
17804: LD_STRING D1-Don-1
17806: PPUSH
17807: CALL_OW 88
// if gammaCommander = 2 then
17811: LD_EXP 12
17815: PUSH
17816: LD_INT 2
17818: EQUAL
17819: IFFALSE 17833
// Say ( Brown , D1-Brown-1 ) ;
17821: LD_EXP 2
17825: PPUSH
17826: LD_STRING D1-Brown-1
17828: PPUSH
17829: CALL_OW 88
// if gammaCommander = 3 then
17833: LD_EXP 12
17837: PUSH
17838: LD_INT 3
17840: EQUAL
17841: IFFALSE 17855
// Say ( Houten , D1-VanH-1 ) ;
17843: LD_EXP 13
17847: PPUSH
17848: LD_STRING D1-VanH-1
17850: PPUSH
17851: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17855: LD_EXP 22
17859: PPUSH
17860: LD_STRING D1-Har-1
17862: PPUSH
17863: CALL_OW 94
// if gammaCommander = 1 then
17867: LD_EXP 12
17871: PUSH
17872: LD_INT 1
17874: EQUAL
17875: IFFALSE 17889
// Say ( Donaldson , D1-Don-2 ) ;
17877: LD_EXP 3
17881: PPUSH
17882: LD_STRING D1-Don-2
17884: PPUSH
17885: CALL_OW 88
// if gammaCommander = 2 then
17889: LD_EXP 12
17893: PUSH
17894: LD_INT 2
17896: EQUAL
17897: IFFALSE 17911
// Say ( Brown , D1-Brown-2 ) ;
17899: LD_EXP 2
17903: PPUSH
17904: LD_STRING D1-Brown-2
17906: PPUSH
17907: CALL_OW 88
// if gammaCommander = 3 then
17911: LD_EXP 12
17915: PUSH
17916: LD_INT 3
17918: EQUAL
17919: IFFALSE 17933
// Say ( Houten , D1-VanH-2 ) ;
17921: LD_EXP 13
17925: PPUSH
17926: LD_STRING D1-VanH-2
17928: PPUSH
17929: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
17933: LD_EXP 22
17937: PPUSH
17938: LD_STRING D1-Har-2
17940: PPUSH
17941: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
17945: LD_INT 22
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 33
17957: PUSH
17958: LD_INT 2
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 61
17967: PUSH
17968: EMPTY
17969: LIST
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 69
17980: IFFALSE 18045
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
17982: LD_ADDR_VAR 0 1
17986: PUSH
17987: LD_INT 22
17989: PUSH
17990: LD_INT 1
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 33
17999: PUSH
18000: LD_INT 2
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 61
18009: PUSH
18010: EMPTY
18011: LIST
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: PPUSH
18018: CALL_OW 69
18022: PUSH
18023: FOR_IN
18024: IFFALSE 18043
// ComAgressiveMove ( i , 70 , 41 ) ;
18026: LD_VAR 0 1
18030: PPUSH
18031: LD_INT 70
18033: PPUSH
18034: LD_INT 41
18036: PPUSH
18037: CALL_OW 114
18041: GO 18023
18043: POP
18044: POP
// repeat wait ( 0 0$1 ) ;
18045: LD_INT 35
18047: PPUSH
18048: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18052: LD_ADDR_VAR 0 1
18056: PUSH
18057: LD_INT 22
18059: PUSH
18060: LD_INT 6
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: EMPTY
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18095
// ComAgressiveMove ( i , 54 , 20 ) ;
18078: LD_VAR 0 1
18082: PPUSH
18083: LD_INT 54
18085: PPUSH
18086: LD_INT 20
18088: PPUSH
18089: CALL_OW 114
18093: GO 18075
18095: POP
18096: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18097: LD_ADDR_VAR 0 1
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_INT 1
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 25
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 3
18124: PUSH
18125: LD_INT 54
18127: PUSH
18128: EMPTY
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 69
18144: PUSH
18145: FOR_IN
18146: IFFALSE 18180
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18148: LD_VAR 0 1
18152: PPUSH
18153: LD_INT 70
18155: PPUSH
18156: LD_INT 41
18158: PPUSH
18159: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18163: LD_VAR 0 1
18167: PPUSH
18168: LD_INT 46
18170: PPUSH
18171: LD_INT 39
18173: PPUSH
18174: CALL_OW 174
// end ;
18178: GO 18145
18180: POP
18181: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18182: LD_ADDR_VAR 0 1
18186: PUSH
18187: LD_INT 22
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 21
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: LD_INT 24
18212: PUSH
18213: LD_INT 500
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: LIST
18228: PPUSH
18229: CALL_OW 69
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18268
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18237: LD_VAR 0 1
18241: PPUSH
18242: LD_EXP 37
18246: PPUSH
18247: CALL_OW 250
18251: PPUSH
18252: LD_EXP 37
18256: PPUSH
18257: CALL_OW 251
18261: PPUSH
18262: CALL_OW 111
18266: GO 18234
18268: POP
18269: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18270: LD_INT 22
18272: PUSH
18273: LD_INT 6
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 21
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 24
18292: PUSH
18293: LD_INT 250
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: PUSH
18310: LD_INT 5
18312: LESS
18313: IFFALSE 18045
// Video ( false ) ;
18315: LD_INT 0
18317: PPUSH
18318: CALL 77246 0 1
// ChangeMissionObjectives ( M1 ) ;
18322: LD_STRING M1
18324: PPUSH
18325: CALL_OW 337
// wait ( 0 0$2 ) ;
18329: LD_INT 70
18331: PPUSH
18332: CALL_OW 67
// SaveForQuickRestart ;
18336: CALL_OW 22
// startCutscene = 0 ;
18340: LD_ADDR_EXP 38
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// end ;
18348: PPOPN 1
18350: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18351: LD_EXP 38
18355: IFFALSE 18446
18357: GO 18359
18359: DISABLE
18360: LD_INT 0
18362: PPUSH
18363: PPUSH
// begin enable ;
18364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18365: LD_ADDR_VAR 0 1
18369: PUSH
18370: LD_INT 22
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 21
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 3
18392: PUSH
18393: LD_INT 24
18395: PUSH
18396: LD_INT 700
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: LIST
18411: PPUSH
18412: CALL_OW 69
18416: ST_TO_ADDR
// for i in tmp do
18417: LD_ADDR_VAR 0 2
18421: PUSH
18422: LD_VAR 0 1
18426: PUSH
18427: FOR_IN
18428: IFFALSE 18444
// SetLives ( i , 700 ) ;
18430: LD_VAR 0 2
18434: PPUSH
18435: LD_INT 700
18437: PPUSH
18438: CALL_OW 234
18442: GO 18427
18444: POP
18445: POP
// end ;
18446: PPOPN 2
18448: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18449: LD_INT 22
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 101
18461: PUSH
18462: LD_INT 6
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: PUSH
18478: LD_INT 0
18480: EQUAL
18481: PUSH
18482: LD_OWVAR 1
18486: PUSH
18487: LD_INT 6300
18489: GREATER
18490: OR
18491: IFFALSE 18740
18493: GO 18495
18495: DISABLE
// begin PrepareSupportFromDelta ;
18496: CALL 3900 0 0
// firstAttack = 1 ;
18500: LD_ADDR_EXP 33
18504: PUSH
18505: LD_INT 1
18507: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18508: LD_EXP 8
18512: PPUSH
18513: CALL_OW 302
18517: IFFALSE 18533
// Say ( Gladstone , D2-Glad-1 ) else
18519: LD_EXP 8
18523: PPUSH
18524: LD_STRING D2-Glad-1
18526: PPUSH
18527: CALL_OW 88
18531: GO 18641
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18533: LD_INT 4
18535: PPUSH
18536: LD_INT 22
18538: PUSH
18539: LD_INT 1
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 21
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 25
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 25
18571: PUSH
18572: LD_INT 2
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 25
18581: PUSH
18582: LD_INT 3
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 25
18591: PUSH
18592: LD_INT 4
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: PPUSH
18611: CALL_OW 70
18615: PUSH
18616: LD_EXP 15
18620: PUSH
18621: LD_EXP 14
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: DIFF
18630: PPUSH
18631: LD_STRING D2-Sol1-1
18633: PPUSH
18634: LD_STRING D2-FSol1-1
18636: PPUSH
18637: CALL 7179 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18641: LD_EXP 3
18645: PPUSH
18646: CALL_OW 302
18650: PUSH
18651: LD_EXP 12
18655: PUSH
18656: LD_INT 1
18658: EQUAL
18659: AND
18660: IFFALSE 18674
// Say ( Donaldson , D2-Don-1 ) ;
18662: LD_EXP 3
18666: PPUSH
18667: LD_STRING D2-Don-1
18669: PPUSH
18670: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18674: LD_EXP 2
18678: PPUSH
18679: CALL_OW 302
18683: PUSH
18684: LD_EXP 12
18688: PUSH
18689: LD_INT 2
18691: EQUAL
18692: AND
18693: IFFALSE 18707
// Say ( Brown , D2-Brown-1 ) ;
18695: LD_EXP 2
18699: PPUSH
18700: LD_STRING D2-Brown-1
18702: PPUSH
18703: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18707: LD_EXP 13
18711: PPUSH
18712: CALL_OW 302
18716: PUSH
18717: LD_EXP 12
18721: PUSH
18722: LD_INT 3
18724: EQUAL
18725: AND
18726: IFFALSE 18740
// Say ( Houten , D2-VanH-1 ) ;
18728: LD_EXP 13
18732: PPUSH
18733: LD_STRING D2-VanH-1
18735: PPUSH
18736: CALL_OW 88
// end ;
18740: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18741: LD_OWVAR 1
18745: PUSH
18746: LD_INT 6300
18748: GREATER
18749: IFFALSE 19803
18751: GO 18753
18753: DISABLE
18754: LD_INT 0
18756: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18757: LD_STRING 07_time
18759: PPUSH
18760: LD_INT 12600
18762: PPUSH
18763: CALL_OW 30
18767: PUSH
18768: LD_INT 3
18770: DIV
18771: PPUSH
18772: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18776: LD_INT 34
18778: PPUSH
18779: LD_INT 1
18781: PPUSH
18782: CALL_OW 321
18786: PUSH
18787: LD_INT 2
18789: EQUAL
18790: IFFALSE 18799
// SetAchievement ( ACH_HEAVYGUN ) ;
18792: LD_STRING ACH_HEAVYGUN
18794: PPUSH
18795: CALL_OW 543
// PrepareMacmillanSquad ;
18799: CALL 4589 0 0
// CenterNowOnUnits ( JMM ) ;
18803: LD_EXP 1
18807: PPUSH
18808: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
18812: LD_EXP 1
18816: PPUSH
18817: LD_STRING D3-JMM-1
18819: PPUSH
18820: CALL_OW 88
// JMMArrive = 1 ;
18824: LD_ADDR_EXP 39
18828: PUSH
18829: LD_INT 1
18831: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18832: LD_EXP 3
18836: PPUSH
18837: CALL_OW 302
18841: PUSH
18842: LD_EXP 12
18846: PUSH
18847: LD_INT 1
18849: EQUAL
18850: AND
18851: IFFALSE 18867
// begin Say ( Donaldson , D3-Don-1 ) ;
18853: LD_EXP 3
18857: PPUSH
18858: LD_STRING D3-Don-1
18860: PPUSH
18861: CALL_OW 88
// end else
18865: GO 18919
// begin if gammaCommander = 1 then
18867: LD_EXP 12
18871: PUSH
18872: LD_INT 1
18874: EQUAL
18875: IFFALSE 18919
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
18877: LD_EXP 11
18881: PPUSH
18882: LD_INT 26
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PPUSH
18892: CALL_OW 72
18896: PPUSH
18897: LD_STRING D3-Sol1-1
18899: PPUSH
18900: LD_STRING D3-Sol1-1
18902: PPUSH
18903: CALL 7179 0 3
// Say ( JMM , D3-JMM-2 ) ;
18907: LD_EXP 1
18911: PPUSH
18912: LD_STRING D3-JMM-2
18914: PPUSH
18915: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
18919: LD_EXP 2
18923: PPUSH
18924: CALL_OW 302
18928: PUSH
18929: LD_EXP 12
18933: PUSH
18934: LD_INT 2
18936: EQUAL
18937: AND
18938: IFFALSE 18954
// begin Say ( Brown , D3-Brown-1 ) ;
18940: LD_EXP 2
18944: PPUSH
18945: LD_STRING D3-Brown-1
18947: PPUSH
18948: CALL_OW 88
// end else
18952: GO 19006
// begin if gammaCommander = 2 then
18954: LD_EXP 12
18958: PUSH
18959: LD_INT 2
18961: EQUAL
18962: IFFALSE 19006
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
18964: LD_EXP 11
18968: PPUSH
18969: LD_INT 26
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PPUSH
18979: CALL_OW 72
18983: PPUSH
18984: LD_STRING D3-Sol1-1a
18986: PPUSH
18987: LD_STRING D3-Sol1-1a
18989: PPUSH
18990: CALL 7179 0 3
// Say ( JMM , D3-JMM-2 ) ;
18994: LD_EXP 1
18998: PPUSH
18999: LD_STRING D3-JMM-2
19001: PPUSH
19002: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19006: LD_EXP 13
19010: PPUSH
19011: CALL_OW 302
19015: PUSH
19016: LD_EXP 12
19020: PUSH
19021: LD_INT 3
19023: EQUAL
19024: AND
19025: IFFALSE 19041
// begin Say ( Houten , D3-VanH-1 ) ;
19027: LD_EXP 13
19031: PPUSH
19032: LD_STRING D3-VanH-1
19034: PPUSH
19035: CALL_OW 88
// end else
19039: GO 19093
// begin if gammaCommander = 3 then
19041: LD_EXP 12
19045: PUSH
19046: LD_INT 3
19048: EQUAL
19049: IFFALSE 19093
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19051: LD_EXP 11
19055: PPUSH
19056: LD_INT 26
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 72
19070: PPUSH
19071: LD_STRING D3-Sol1-1b
19073: PPUSH
19074: LD_STRING D3-Sol1-1b
19076: PPUSH
19077: CALL 7179 0 3
// Say ( JMM , D3-JMM-2 ) ;
19081: LD_EXP 1
19085: PPUSH
19086: LD_STRING D3-JMM-2
19088: PPUSH
19089: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19093: LD_EXP 15
19097: PPUSH
19098: CALL_OW 302
19102: IFFALSE 19130
// begin Say ( Joan , D3a-Joan-1 ) ;
19104: LD_EXP 15
19108: PPUSH
19109: LD_STRING D3a-Joan-1
19111: PPUSH
19112: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19116: LD_EXP 1
19120: PPUSH
19121: LD_STRING D3a-JMM-1
19123: PPUSH
19124: CALL_OW 88
// end else
19128: GO 19472
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19130: LD_STRING 06_JoanStatus_1
19132: PPUSH
19133: LD_INT 0
19135: PPUSH
19136: CALL_OW 30
19140: PUSH
19141: LD_INT 1
19143: EQUAL
19144: IFFALSE 19472
// begin Say ( JMM , D3b-JMM-1 ) ;
19146: LD_EXP 1
19150: PPUSH
19151: LD_STRING D3b-JMM-1
19153: PPUSH
19154: CALL_OW 88
// if gammaCommander = 1 then
19158: LD_EXP 12
19162: PUSH
19163: LD_INT 1
19165: EQUAL
19166: IFFALSE 19223
// if IsOK ( Donaldson ) then
19168: LD_EXP 3
19172: PPUSH
19173: CALL_OW 302
19177: IFFALSE 19193
// Say ( Donaldson , D3b-Don-1 ) else
19179: LD_EXP 3
19183: PPUSH
19184: LD_STRING D3b-Don-1
19186: PPUSH
19187: CALL_OW 88
19191: GO 19223
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19193: LD_EXP 11
19197: PPUSH
19198: LD_INT 26
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 72
19212: PPUSH
19213: LD_STRING D3b-Sol1-1
19215: PPUSH
19216: LD_STRING D3b-Sol1-1
19218: PPUSH
19219: CALL 7179 0 3
// if gammaCommander = 2 then
19223: LD_EXP 12
19227: PUSH
19228: LD_INT 2
19230: EQUAL
19231: IFFALSE 19288
// if IsOk ( Brown ) then
19233: LD_EXP 2
19237: PPUSH
19238: CALL_OW 302
19242: IFFALSE 19258
// Say ( Brown , D3b-Brown-1 ) else
19244: LD_EXP 2
19248: PPUSH
19249: LD_STRING D3b-Brown-1
19251: PPUSH
19252: CALL_OW 88
19256: GO 19288
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19258: LD_EXP 11
19262: PPUSH
19263: LD_INT 26
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PPUSH
19273: CALL_OW 72
19277: PPUSH
19278: LD_STRING D3b-Sol1-1
19280: PPUSH
19281: LD_STRING D3b-Sol1-1
19283: PPUSH
19284: CALL 7179 0 3
// if gammaCommander = 3 then
19288: LD_EXP 12
19292: PUSH
19293: LD_INT 3
19295: EQUAL
19296: IFFALSE 19353
// if IsOk ( Houten ) then
19298: LD_EXP 13
19302: PPUSH
19303: CALL_OW 302
19307: IFFALSE 19323
// Say ( Houten , D3b-VanH-1 ) else
19309: LD_EXP 13
19313: PPUSH
19314: LD_STRING D3b-VanH-1
19316: PPUSH
19317: CALL_OW 88
19321: GO 19353
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19323: LD_EXP 11
19327: PPUSH
19328: LD_INT 26
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 72
19342: PPUSH
19343: LD_STRING D3b-Sol1-1
19345: PPUSH
19346: LD_STRING D3b-Sol1-1
19348: PPUSH
19349: CALL 7179 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19353: LD_EXP 11
19357: PPUSH
19358: LD_INT 26
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PPUSH
19368: CALL_OW 72
19372: PUSH
19373: LD_EXP 12
19377: PUSH
19378: LD_INT 1
19380: EQUAL
19381: PUSH
19382: LD_EXP 3
19386: PPUSH
19387: CALL_OW 302
19391: AND
19392: OR
19393: PUSH
19394: LD_EXP 12
19398: PUSH
19399: LD_INT 2
19401: EQUAL
19402: PUSH
19403: LD_EXP 2
19407: PPUSH
19408: CALL_OW 302
19412: AND
19413: OR
19414: PUSH
19415: LD_EXP 12
19419: PUSH
19420: LD_INT 3
19422: EQUAL
19423: PUSH
19424: LD_EXP 13
19428: PPUSH
19429: CALL_OW 302
19433: AND
19434: OR
19435: IFFALSE 19449
// Say ( JMM , D3b-JMM-2 ) ;
19437: LD_EXP 1
19441: PPUSH
19442: LD_STRING D3b-JMM-2
19444: PPUSH
19445: CALL_OW 88
// if IsOK ( Lisa ) then
19449: LD_EXP 6
19453: PPUSH
19454: CALL_OW 302
19458: IFFALSE 19472
// Say ( Lisa , D3b-Lisa-2 ) ;
19460: LD_EXP 6
19464: PPUSH
19465: LD_STRING D3b-Lisa-2
19467: PPUSH
19468: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19472: LD_ADDR_VAR 0 1
19476: PUSH
19477: LD_EXP 1
19481: PUSH
19482: LD_EXP 2
19486: PUSH
19487: LD_EXP 3
19491: PUSH
19492: LD_EXP 4
19496: PUSH
19497: LD_EXP 5
19501: PUSH
19502: LD_EXP 6
19506: PUSH
19507: LD_EXP 7
19511: PUSH
19512: LD_EXP 8
19516: PUSH
19517: LD_EXP 9
19521: PUSH
19522: LD_EXP 10
19526: PUSH
19527: LD_EXP 15
19531: PUSH
19532: LD_EXP 14
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: PUSH
19551: LD_EXP 42
19555: ADD
19556: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19557: LD_INT 22
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 21
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 26
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: LD_INT 25
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 25
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 25
19612: PUSH
19613: LD_INT 3
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 25
19622: PUSH
19623: LD_INT 4
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: PPUSH
19643: CALL_OW 69
19647: PUSH
19648: LD_VAR 0 1
19652: DIFF
19653: PPUSH
19654: LD_STRING DCa-Sol1-1
19656: PPUSH
19657: LD_STRING DCa-Sol1-1
19659: PPUSH
19660: CALL 7179 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19664: LD_EXP 1
19668: PPUSH
19669: LD_STRING DCb-JMM-1
19671: PPUSH
19672: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19676: LD_INT 22
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 21
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 26
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: LD_INT 25
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 25
19721: PUSH
19722: LD_INT 2
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 25
19731: PUSH
19732: LD_INT 3
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 25
19741: PUSH
19742: LD_INT 4
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: PPUSH
19762: CALL_OW 69
19766: PUSH
19767: LD_VAR 0 1
19771: DIFF
19772: PPUSH
19773: LD_STRING DCb-Sol1-1
19775: PPUSH
19776: LD_STRING DCb-Sol1-1
19778: PPUSH
19779: CALL 7179 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19783: LD_EXP 1
19787: PPUSH
19788: LD_STRING DCb-JMM-2
19790: PPUSH
19791: CALL_OW 88
// secondAttack = 1 ;
19795: LD_ADDR_EXP 34
19799: PUSH
19800: LD_INT 1
19802: ST_TO_ADDR
// end ;
19803: PPOPN 1
19805: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
19806: LD_EXP 39
19810: PUSH
19811: LD_INT 1
19813: EQUAL
19814: PUSH
19815: LD_OWVAR 1
19819: PUSH
19820: LD_INT 37800
19822: GREATEREQUAL
19823: AND
19824: IFFALSE 19897
19826: GO 19828
19828: DISABLE
// begin DialogueOn ;
19829: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
19833: LD_EXP 23
19837: PPUSH
19838: LD_STRING D4-Pow-1
19840: PPUSH
19841: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
19845: LD_EXP 1
19849: PPUSH
19850: LD_STRING D4-JMM-1
19852: PPUSH
19853: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
19857: LD_EXP 23
19861: PPUSH
19862: LD_STRING D4-Pow-2
19864: PPUSH
19865: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
19869: LD_EXP 1
19873: PPUSH
19874: LD_STRING D4-JMM-2
19876: PPUSH
19877: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
19881: LD_EXP 23
19885: PPUSH
19886: LD_STRING D4-Pow-3
19888: PPUSH
19889: CALL_OW 94
// DialogueOff ;
19893: CALL_OW 7
// end ;
19897: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
19898: LD_EXP 39
19902: PUSH
19903: LD_INT 1
19905: EQUAL
19906: PUSH
19907: LD_OWVAR 1
19911: PUSH
19912: LD_INT 50400
19914: GREATEREQUAL
19915: AND
19916: IFFALSE 19941
19918: GO 19920
19920: DISABLE
// begin DialogueOn ;
19921: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
19925: LD_EXP 23
19929: PPUSH
19930: LD_STRING D4a-Pow-1
19932: PPUSH
19933: CALL_OW 94
// DialogueOff ;
19937: CALL_OW 7
// end ;
19941: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
19942: LD_EXP 39
19946: PUSH
19947: LD_INT 1
19949: EQUAL
19950: PUSH
19951: LD_OWVAR 1
19955: PUSH
19956: LD_INT 73500
19958: GREATEREQUAL
19959: AND
19960: IFFALSE 19981
19962: GO 19964
19964: DISABLE
// begin PrepareSikorsky ;
19965: CALL 5704 0 0
// SikorskyArrive = 1 ;
19969: LD_ADDR_EXP 18
19973: PUSH
19974: LD_INT 1
19976: ST_TO_ADDR
// PrepareSikorskyArmy ;
19977: CALL 5880 0 0
// end ;
19981: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
19982: LD_EXP 17
19986: PPUSH
19987: LD_INT 5
19989: PPUSH
19990: CALL_OW 308
19994: IFFALSE 20186
19996: GO 19998
19998: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
19999: LD_EXP 17
20003: PPUSH
20004: CALL_OW 87
// DialogueOn ;
20008: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20012: LD_EXP 16
20016: PPUSH
20017: LD_STRING D5-Sik-1
20019: PPUSH
20020: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20024: LD_EXP 1
20028: PPUSH
20029: LD_STRING D5-JMM-1a
20031: PPUSH
20032: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20036: LD_EXP 16
20040: PPUSH
20041: LD_STRING D5-Sik-2
20043: PPUSH
20044: CALL_OW 88
// case query ( QSikorski ) of 1 :
20048: LD_STRING QSikorski
20050: PPUSH
20051: CALL_OW 97
20055: PUSH
20056: LD_INT 1
20058: DOUBLE
20059: EQUAL
20060: IFTRUE 20064
20062: GO 20087
20064: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20065: LD_EXP 16
20069: PPUSH
20070: LD_STRING D5a-Sik-1
20072: PPUSH
20073: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20077: LD_ADDR_EXP 19
20081: PUSH
20082: LD_INT 2100
20084: ST_TO_ADDR
// end ; 2 :
20085: GO 20174
20087: LD_INT 2
20089: DOUBLE
20090: EQUAL
20091: IFTRUE 20095
20093: GO 20118
20095: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20096: LD_EXP 16
20100: PPUSH
20101: LD_STRING D5b-Sik-1
20103: PPUSH
20104: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20108: LD_ADDR_EXP 19
20112: PUSH
20113: LD_INT 10500
20115: ST_TO_ADDR
// end ; 3 :
20116: GO 20174
20118: LD_INT 3
20120: DOUBLE
20121: EQUAL
20122: IFTRUE 20126
20124: GO 20173
20126: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20127: LD_EXP 16
20131: PPUSH
20132: LD_STRING D5c-Sik-1
20134: PPUSH
20135: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20139: LD_EXP 1
20143: PPUSH
20144: LD_STRING D5c-JMM-1
20146: PPUSH
20147: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20151: LD_EXP 16
20155: PPUSH
20156: LD_STRING D5c-Sik-2
20158: PPUSH
20159: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20163: LD_ADDR_EXP 19
20167: PUSH
20168: LD_INT 10500
20170: ST_TO_ADDR
// end ; end ;
20171: GO 20174
20173: POP
// DialogueOff ;
20174: CALL_OW 7
// timerStatus = 1 ;
20178: LD_ADDR_EXP 35
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// end ;
20186: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20187: LD_EXP 19
20191: PUSH
20192: LD_INT 35
20194: LESS
20195: IFFALSE 20243
20197: GO 20199
20199: DISABLE
// begin timerStatus = 0 ;
20200: LD_ADDR_EXP 35
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// DialogueOn ;
20208: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20212: LD_EXP 16
20216: PPUSH
20217: LD_STRING D6-Sik-1
20219: PPUSH
20220: CALL_OW 88
// DialogueOff ;
20224: CALL_OW 7
// SikorskyAI = 1 ;
20228: LD_ADDR_EXP 20
20232: PUSH
20233: LD_INT 1
20235: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20236: LD_STRING M2
20238: PPUSH
20239: CALL_OW 337
// end ;
20243: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20244: LD_EXP 17
20248: PPUSH
20249: LD_INT 18
20251: PPUSH
20252: CALL_OW 308
20256: IFFALSE 20366
20258: GO 20260
20260: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20261: LD_EXP 16
20265: PPUSH
20266: LD_STRING D7-Sik-1
20268: PPUSH
20269: CALL_OW 88
// wait ( 0 0$10 ) ;
20273: LD_INT 350
20275: PPUSH
20276: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20280: LD_EXP 1
20284: PPUSH
20285: LD_INT 24
20287: PPUSH
20288: CALL_OW 308
20292: PUSH
20293: LD_EXP 1
20297: PPUSH
20298: CALL 16909 0 1
20302: PUSH
20303: LD_EXP 1
20307: PPUSH
20308: CALL 16909 0 1
20312: PPUSH
20313: LD_INT 24
20315: PPUSH
20316: CALL_OW 308
20320: AND
20321: OR
20322: IFFALSE 20346
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20324: LD_EXP 16
20328: PPUSH
20329: LD_STRING D7a-Sik-1
20331: PPUSH
20332: CALL_OW 88
// SikorskyStatus = 1 ;
20336: LD_ADDR_EXP 21
20340: PUSH
20341: LD_INT 1
20343: ST_TO_ADDR
// end else
20344: GO 20366
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20346: LD_EXP 16
20350: PPUSH
20351: LD_STRING D7b-Sik-1
20353: PPUSH
20354: CALL_OW 88
// SikorskyStatus = 2 ;
20358: LD_ADDR_EXP 21
20362: PUSH
20363: LD_INT 2
20365: ST_TO_ADDR
// end ; end ; end_of_file
20366: END
// on BuildingComplete ( building ) do var tmp , un ;
20367: LD_INT 0
20369: PPUSH
20370: PPUSH
// begin if GetSide ( building ) = 3 then
20371: LD_VAR 0 1
20375: PPUSH
20376: CALL_OW 255
20380: PUSH
20381: LD_INT 3
20383: EQUAL
20384: IFFALSE 20921
// begin if GetBType ( building ) = b_depot then
20386: LD_VAR 0 1
20390: PPUSH
20391: CALL_OW 266
20395: PUSH
20396: LD_INT 0
20398: EQUAL
20399: IFFALSE 20467
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20401: LD_VAR 0 1
20405: PPUSH
20406: CALL_OW 274
20410: PPUSH
20411: LD_INT 1
20413: PPUSH
20414: LD_INT 5000
20416: PPUSH
20417: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20421: LD_VAR 0 1
20425: PPUSH
20426: CALL_OW 274
20430: PPUSH
20431: LD_INT 2
20433: PPUSH
20434: LD_INT 5000
20436: PPUSH
20437: CALL_OW 277
// SetBName ( building , konev ) ;
20441: LD_VAR 0 1
20445: PPUSH
20446: LD_STRING konev
20448: PPUSH
20449: CALL_OW 500
// ruDepot = building ;
20453: LD_ADDR_EXP 28
20457: PUSH
20458: LD_VAR 0 1
20462: ST_TO_ADDR
// BuildRussianBase ;
20463: CALL 7790 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20467: LD_VAR 0 1
20471: PPUSH
20472: CALL_OW 266
20476: PUSH
20477: LD_INT 0
20479: EQUAL
20480: PUSH
20481: LD_VAR 0 1
20485: PPUSH
20486: CALL_OW 266
20490: PUSH
20491: LD_INT 2
20493: EQUAL
20494: OR
20495: PUSH
20496: LD_VAR 0 1
20500: PPUSH
20501: CALL_OW 266
20505: PUSH
20506: LD_INT 4
20508: EQUAL
20509: OR
20510: IFFALSE 20521
// ComUpgrade ( building ) ;
20512: LD_VAR 0 1
20516: PPUSH
20517: CALL_OW 146
// if GetBType ( building ) = b_lab then
20521: LD_VAR 0 1
20525: PPUSH
20526: CALL_OW 266
20530: PUSH
20531: LD_INT 6
20533: EQUAL
20534: IFFALSE 20585
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20536: LD_VAR 0 1
20540: PPUSH
20541: LD_INT 10
20543: PPUSH
20544: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20548: LD_VAR 0 1
20552: PPUSH
20553: LD_INT 12
20555: PPUSH
20556: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20560: LD_INT 3
20562: PPUSH
20563: LD_VAR 0 1
20567: PPUSH
20568: LD_INT 3
20570: PPUSH
20571: CALL 8334 0 3
// ruLab = building ;
20575: LD_ADDR_EXP 29
20579: PUSH
20580: LD_VAR 0 1
20584: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20585: LD_VAR 0 1
20589: PPUSH
20590: CALL_OW 266
20594: PUSH
20595: LD_INT 32
20597: EQUAL
20598: IFFALSE 20716
// begin uc_side = 3 ;
20600: LD_ADDR_OWVAR 20
20604: PUSH
20605: LD_INT 3
20607: ST_TO_ADDR
// uc_nation = 3 ;
20608: LD_ADDR_OWVAR 21
20612: PUSH
20613: LD_INT 3
20615: ST_TO_ADDR
// hc_gallery =  ;
20616: LD_ADDR_OWVAR 33
20620: PUSH
20621: LD_STRING 
20623: ST_TO_ADDR
// hc_name =  ;
20624: LD_ADDR_OWVAR 26
20628: PUSH
20629: LD_STRING 
20631: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20632: LD_INT 0
20634: PPUSH
20635: LD_INT 1
20637: PPUSH
20638: LD_EXP 25
20642: PPUSH
20643: LD_EXP 26
20647: PPUSH
20648: CALL_OW 12
20652: PPUSH
20653: CALL_OW 380
// un = CreateHuman ;
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: CALL_OW 44
20666: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20667: LD_VAR 0 3
20671: PPUSH
20672: LD_VAR 0 1
20676: PPUSH
20677: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20681: LD_VAR 0 1
20685: PPUSH
20686: LD_INT 43
20688: PUSH
20689: LD_INT 44
20691: PUSH
20692: LD_INT 46
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: PPUSH
20703: LD_INT 3
20705: PPUSH
20706: CALL_OW 12
20710: ARRAY
20711: PPUSH
20712: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 266
20725: PUSH
20726: LD_INT 33
20728: EQUAL
20729: IFFALSE 20766
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20731: LD_VAR 0 1
20735: PPUSH
20736: LD_INT 43
20738: PUSH
20739: LD_INT 44
20741: PUSH
20742: LD_INT 46
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: PPUSH
20753: LD_INT 3
20755: PPUSH
20756: CALL_OW 12
20760: ARRAY
20761: PPUSH
20762: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20766: LD_VAR 0 1
20770: PPUSH
20771: CALL_OW 266
20775: PUSH
20776: LD_INT 32
20778: EQUAL
20779: IFFALSE 20816
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_INT 43
20788: PUSH
20789: LD_INT 44
20791: PUSH
20792: LD_INT 46
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: PPUSH
20803: LD_INT 3
20805: PPUSH
20806: CALL_OW 12
20810: ARRAY
20811: PPUSH
20812: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
20816: LD_VAR 0 1
20820: PPUSH
20821: CALL_OW 266
20825: PUSH
20826: LD_INT 24
20828: EQUAL
20829: IFFALSE 20839
// russianAI = 1 ;
20831: LD_ADDR_EXP 27
20835: PUSH
20836: LD_INT 1
20838: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
20839: LD_EXP 31
20843: PUSH
20844: LD_INT 0
20846: GREATER
20847: IFFALSE 20921
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20849: LD_ADDR_EXP 31
20853: PUSH
20854: LD_EXP 31
20858: PPUSH
20859: LD_INT 1
20861: PPUSH
20862: CALL_OW 3
20866: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20867: LD_ADDR_EXP 31
20871: PUSH
20872: LD_EXP 31
20876: PPUSH
20877: LD_INT 1
20879: PPUSH
20880: CALL_OW 3
20884: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20885: LD_ADDR_EXP 31
20889: PUSH
20890: LD_EXP 31
20894: PPUSH
20895: LD_INT 1
20897: PPUSH
20898: CALL_OW 3
20902: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20903: LD_ADDR_EXP 31
20907: PUSH
20908: LD_EXP 31
20912: PPUSH
20913: LD_INT 1
20915: PPUSH
20916: CALL_OW 3
20920: ST_TO_ADDR
// end ; end ; end ;
20921: PPOPN 3
20923: END
// on UpgradeComplete ( building ) do var i ;
20924: LD_INT 0
20926: PPUSH
// begin if GetSide ( building ) = 3 then
20927: LD_VAR 0 1
20931: PPUSH
20932: CALL_OW 255
20936: PUSH
20937: LD_INT 3
20939: EQUAL
20940: IFFALSE 21121
// begin if GetBType ( building ) = b_factory then
20942: LD_VAR 0 1
20946: PPUSH
20947: CALL_OW 266
20951: PUSH
20952: LD_INT 3
20954: EQUAL
20955: IFFALSE 21022
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
20957: LD_ADDR_VAR 0 2
20961: PUSH
20962: LD_INT 22
20964: PUSH
20965: LD_INT 3
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 25
20974: PUSH
20975: LD_INT 3
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PPUSH
20986: CALL_OW 69
20990: PUSH
20991: FOR_IN
20992: IFFALSE 21010
// ComEnterUnit ( i , building ) ;
20994: LD_VAR 0 2
20998: PPUSH
20999: LD_VAR 0 1
21003: PPUSH
21004: CALL_OW 120
21008: GO 20991
21010: POP
21011: POP
// ruFab = building ;
21012: LD_ADDR_EXP 30
21016: PUSH
21017: LD_VAR 0 1
21021: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21022: LD_VAR 0 1
21026: PPUSH
21027: CALL_OW 266
21031: PUSH
21032: LD_INT 8
21034: EQUAL
21035: IFFALSE 21092
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21037: LD_ADDR_VAR 0 2
21041: PUSH
21042: LD_INT 22
21044: PUSH
21045: LD_INT 3
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 25
21054: PUSH
21055: LD_INT 4
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PPUSH
21066: CALL_OW 69
21070: PUSH
21071: FOR_IN
21072: IFFALSE 21090
// ComEnterUnit ( i , building ) ;
21074: LD_VAR 0 2
21078: PPUSH
21079: LD_VAR 0 1
21083: PPUSH
21084: CALL_OW 120
21088: GO 21071
21090: POP
21091: POP
// if GetBType ( building ) = b_warehouse then
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 266
21101: PUSH
21102: LD_INT 1
21104: EQUAL
21105: IFFALSE 21121
// begin ComEnterUnit ( Borodin , building ) ;
21107: LD_EXP 24
21111: PPUSH
21112: LD_VAR 0 1
21116: PPUSH
21117: CALL_OW 120
// end ; end ; end ;
21121: PPOPN 2
21123: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21124: LD_VAR 0 1
21128: PPUSH
21129: CALL_OW 247
21133: PUSH
21134: LD_INT 2
21136: EQUAL
21137: PUSH
21138: LD_VAR 0 1
21142: PPUSH
21143: CALL_OW 263
21147: PUSH
21148: LD_INT 3
21150: EQUAL
21151: AND
21152: PUSH
21153: LD_EXP 41
21157: PUSH
21158: LD_INT 0
21160: EQUAL
21161: AND
21162: IFFALSE 21280
// begin varEvent1 = 1 ;
21164: LD_ADDR_EXP 41
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21181: LD_INT 22
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 21
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: LD_INT 25
21206: PUSH
21207: LD_INT 1
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 25
21216: PUSH
21217: LD_INT 2
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 25
21226: PUSH
21227: LD_INT 3
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 25
21236: PUSH
21237: LD_INT 4
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: PPUSH
21256: CALL_OW 69
21260: PUSH
21261: LD_EXP 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: DIFF
21269: PPUSH
21270: LD_STRING DC-Sol1-1
21272: PPUSH
21273: LD_STRING DC-FSol1-1
21275: PPUSH
21276: CALL 7179 0 3
// end ; end ;
21280: PPOPN 1
21282: END
// on UnitDestroyed ( unit ) do var i ;
21283: LD_INT 0
21285: PPUSH
// begin if unit = Joan then
21286: LD_VAR 0 1
21290: PUSH
21291: LD_EXP 15
21295: EQUAL
21296: IFFALSE 21305
// DeleteCharacters ( Joan ) ;
21298: LD_STRING Joan
21300: PPUSH
21301: CALL_OW 40
// if GetSide ( unit ) = 3 then
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 255
21314: PUSH
21315: LD_INT 3
21317: EQUAL
21318: IFFALSE 22088
// begin if GetType ( unit ) = unit_building then
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 247
21329: PUSH
21330: LD_INT 3
21332: EQUAL
21333: IFFALSE 22025
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21335: LD_VAR 0 1
21339: PPUSH
21340: CALL_OW 266
21344: PUSH
21345: LD_INT 31
21347: EQUAL
21348: PUSH
21349: LD_VAR 0 1
21353: PPUSH
21354: CALL_OW 266
21358: PUSH
21359: LD_INT 32
21361: EQUAL
21362: OR
21363: PUSH
21364: LD_VAR 0 1
21368: PPUSH
21369: CALL_OW 266
21373: PUSH
21374: LD_INT 36
21376: EQUAL
21377: OR
21378: PUSH
21379: LD_VAR 0 1
21383: PPUSH
21384: CALL_OW 266
21388: PUSH
21389: LD_INT 0
21391: EQUAL
21392: OR
21393: PUSH
21394: LD_VAR 0 1
21398: PPUSH
21399: CALL_OW 266
21403: PUSH
21404: LD_INT 24
21406: EQUAL
21407: OR
21408: PUSH
21409: LD_VAR 0 1
21413: PPUSH
21414: CALL_OW 266
21418: PUSH
21419: LD_INT 17
21421: EQUAL
21422: OR
21423: PUSH
21424: LD_VAR 0 1
21428: PPUSH
21429: CALL_OW 266
21433: PUSH
21434: LD_INT 25
21436: EQUAL
21437: OR
21438: PUSH
21439: LD_VAR 0 1
21443: PPUSH
21444: CALL_OW 266
21448: PUSH
21449: LD_INT 19
21451: EQUAL
21452: OR
21453: PUSH
21454: LD_VAR 0 1
21458: PPUSH
21459: CALL_OW 266
21463: PUSH
21464: LD_INT 20
21466: EQUAL
21467: OR
21468: PUSH
21469: LD_VAR 0 1
21473: PPUSH
21474: CALL_OW 266
21478: PUSH
21479: LD_INT 18
21481: EQUAL
21482: OR
21483: PUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL_OW 266
21493: PUSH
21494: LD_INT 21
21496: EQUAL
21497: OR
21498: PUSH
21499: LD_VAR 0 1
21503: PPUSH
21504: CALL_OW 266
21508: PUSH
21509: LD_INT 23
21511: EQUAL
21512: OR
21513: PUSH
21514: LD_VAR 0 1
21518: PPUSH
21519: CALL_OW 266
21523: PUSH
21524: LD_INT 16
21526: EQUAL
21527: OR
21528: PUSH
21529: LD_VAR 0 1
21533: PPUSH
21534: CALL_OW 266
21538: PUSH
21539: LD_INT 6
21541: EQUAL
21542: OR
21543: PUSH
21544: LD_VAR 0 1
21548: PPUSH
21549: CALL_OW 266
21553: PUSH
21554: LD_INT 29
21556: EQUAL
21557: OR
21558: PUSH
21559: LD_VAR 0 1
21563: PPUSH
21564: CALL_OW 266
21568: PUSH
21569: LD_INT 26
21571: EQUAL
21572: OR
21573: PUSH
21574: LD_VAR 0 1
21578: PPUSH
21579: CALL_OW 266
21583: PUSH
21584: LD_INT 30
21586: EQUAL
21587: OR
21588: PUSH
21589: LD_VAR 0 1
21593: PPUSH
21594: CALL_OW 266
21598: PUSH
21599: LD_INT 28
21601: EQUAL
21602: OR
21603: PUSH
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 266
21613: PUSH
21614: LD_INT 27
21616: EQUAL
21617: OR
21618: PUSH
21619: LD_VAR 0 1
21623: PPUSH
21624: CALL_OW 266
21628: PUSH
21629: LD_INT 33
21631: EQUAL
21632: OR
21633: PUSH
21634: LD_VAR 0 1
21638: PPUSH
21639: CALL_OW 266
21643: PUSH
21644: LD_INT 2
21646: EQUAL
21647: OR
21648: PUSH
21649: LD_VAR 0 1
21653: PPUSH
21654: CALL_OW 266
21658: PUSH
21659: LD_INT 4
21661: EQUAL
21662: OR
21663: IFFALSE 21749
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21665: LD_ADDR_EXP 31
21669: PUSH
21670: LD_EXP 31
21674: PUSH
21675: LD_VAR 0 1
21679: PPUSH
21680: CALL_OW 266
21684: ADD
21685: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21686: LD_ADDR_EXP 31
21690: PUSH
21691: LD_EXP 31
21695: PUSH
21696: LD_VAR 0 1
21700: PPUSH
21701: CALL_OW 250
21705: ADD
21706: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21707: LD_ADDR_EXP 31
21711: PUSH
21712: LD_EXP 31
21716: PUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 251
21726: ADD
21727: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21728: LD_ADDR_EXP 31
21732: PUSH
21733: LD_EXP 31
21737: PUSH
21738: LD_VAR 0 1
21742: PPUSH
21743: CALL_OW 254
21747: ADD
21748: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21749: LD_VAR 0 1
21753: PPUSH
21754: CALL_OW 266
21758: PUSH
21759: LD_INT 1
21761: EQUAL
21762: IFFALSE 21841
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21764: LD_ADDR_EXP 31
21768: PUSH
21769: LD_EXP 31
21773: PUSH
21774: LD_INT 0
21776: ADD
21777: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21778: LD_ADDR_EXP 31
21782: PUSH
21783: LD_EXP 31
21787: PUSH
21788: LD_VAR 0 1
21792: PPUSH
21793: CALL_OW 250
21797: ADD
21798: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21799: LD_ADDR_EXP 31
21803: PUSH
21804: LD_EXP 31
21808: PUSH
21809: LD_VAR 0 1
21813: PPUSH
21814: CALL_OW 251
21818: ADD
21819: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21820: LD_ADDR_EXP 31
21824: PUSH
21825: LD_EXP 31
21829: PUSH
21830: LD_VAR 0 1
21834: PPUSH
21835: CALL_OW 254
21839: ADD
21840: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
21841: LD_VAR 0 1
21845: PPUSH
21846: CALL_OW 266
21850: PUSH
21851: LD_INT 3
21853: EQUAL
21854: IFFALSE 21933
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
21856: LD_ADDR_EXP 31
21860: PUSH
21861: LD_EXP 31
21865: PUSH
21866: LD_INT 2
21868: ADD
21869: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21870: LD_ADDR_EXP 31
21874: PUSH
21875: LD_EXP 31
21879: PUSH
21880: LD_VAR 0 1
21884: PPUSH
21885: CALL_OW 250
21889: ADD
21890: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21891: LD_ADDR_EXP 31
21895: PUSH
21896: LD_EXP 31
21900: PUSH
21901: LD_VAR 0 1
21905: PPUSH
21906: CALL_OW 251
21910: ADD
21911: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21912: LD_ADDR_EXP 31
21916: PUSH
21917: LD_EXP 31
21921: PUSH
21922: LD_VAR 0 1
21926: PPUSH
21927: CALL_OW 254
21931: ADD
21932: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 266
21942: PUSH
21943: LD_INT 5
21945: EQUAL
21946: IFFALSE 22025
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
21948: LD_ADDR_EXP 31
21952: PUSH
21953: LD_EXP 31
21957: PUSH
21958: LD_INT 4
21960: ADD
21961: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21962: LD_ADDR_EXP 31
21966: PUSH
21967: LD_EXP 31
21971: PUSH
21972: LD_VAR 0 1
21976: PPUSH
21977: CALL_OW 250
21981: ADD
21982: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21983: LD_ADDR_EXP 31
21987: PUSH
21988: LD_EXP 31
21992: PUSH
21993: LD_VAR 0 1
21997: PPUSH
21998: CALL_OW 251
22002: ADD
22003: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22004: LD_ADDR_EXP 31
22008: PUSH
22009: LD_EXP 31
22013: PUSH
22014: LD_VAR 0 1
22018: PPUSH
22019: CALL_OW 254
22023: ADD
22024: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22025: LD_VAR 0 1
22029: PPUSH
22030: CALL_OW 247
22034: PUSH
22035: LD_INT 1
22037: EQUAL
22038: IFFALSE 22088
// begin for i in defenders_list do
22040: LD_ADDR_VAR 0 2
22044: PUSH
22045: LD_EXP 32
22049: PUSH
22050: FOR_IN
22051: IFFALSE 22086
// if i = unit then
22053: LD_VAR 0 2
22057: PUSH
22058: LD_VAR 0 1
22062: EQUAL
22063: IFFALSE 22084
// defenders_list = defenders_list diff [ unit ] ;
22065: LD_ADDR_EXP 32
22069: PUSH
22070: LD_EXP 32
22074: PUSH
22075: LD_VAR 0 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: DIFF
22083: ST_TO_ADDR
22084: GO 22050
22086: POP
22087: POP
// end ; end ; end ;
22088: PPOPN 2
22090: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22091: LD_VAR 0 1
22095: PPUSH
22096: CALL 39722 0 1
// end ; end_of_file
22100: PPOPN 1
22102: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22103: GO 22105
22105: DISABLE
22106: LD_INT 0
22108: PPUSH
// begin enemyWayX = [ ] ;
22109: LD_ADDR_EXP 46
22113: PUSH
22114: EMPTY
22115: ST_TO_ADDR
// enemyWayY = [ ] ;
22116: LD_ADDR_EXP 47
22120: PUSH
22121: EMPTY
22122: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22123: LD_ADDR_VAR 0 1
22127: PUSH
22128: LD_INT 1
22130: PPUSH
22131: LD_INT 3
22133: PPUSH
22134: CALL_OW 12
22138: ST_TO_ADDR
// if rnd = 1 then
22139: LD_VAR 0 1
22143: PUSH
22144: LD_INT 1
22146: EQUAL
22147: IFFALSE 22187
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22149: LD_ADDR_EXP 46
22153: PUSH
22154: LD_INT 73
22156: PUSH
22157: LD_INT 46
22159: PUSH
22160: LD_INT 29
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22168: LD_ADDR_EXP 47
22172: PUSH
22173: LD_INT 71
22175: PUSH
22176: LD_INT 43
22178: PUSH
22179: LD_INT 29
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: LIST
22186: ST_TO_ADDR
// end ; if rnd = 2 then
22187: LD_VAR 0 1
22191: PUSH
22192: LD_INT 2
22194: EQUAL
22195: IFFALSE 22219
// begin enemyWayX = [ 64 ] ;
22197: LD_ADDR_EXP 46
22201: PUSH
22202: LD_INT 64
22204: PUSH
22205: EMPTY
22206: LIST
22207: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22208: LD_ADDR_EXP 47
22212: PUSH
22213: LD_INT 43
22215: PUSH
22216: EMPTY
22217: LIST
22218: ST_TO_ADDR
// end ; if rnd = 3 then
22219: LD_VAR 0 1
22223: PUSH
22224: LD_INT 3
22226: EQUAL
22227: IFFALSE 22251
// begin enemyWayX = [ 80 ] ;
22229: LD_ADDR_EXP 46
22233: PUSH
22234: LD_INT 80
22236: PUSH
22237: EMPTY
22238: LIST
22239: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22240: LD_ADDR_EXP 47
22244: PUSH
22245: LD_INT 28
22247: PUSH
22248: EMPTY
22249: LIST
22250: ST_TO_ADDR
// end ; enable ;
22251: ENABLE
// end ;
22252: PPOPN 1
22254: END
// every 0 0$1 do
22255: GO 22257
22257: DISABLE
// begin enable ;
22258: ENABLE
// if escapeAvalaible = 0 then
22259: LD_EXP 36
22263: PUSH
22264: LD_INT 0
22266: EQUAL
22267: IFFALSE 22279
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22269: LD_INT 3
22271: PPUSH
22272: LD_INT 6
22274: PPUSH
22275: CALL 8575 0 2
// if escapeAvalaible = 0 then
22279: LD_EXP 36
22283: PUSH
22284: LD_INT 0
22286: EQUAL
22287: IFFALSE 22299
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22289: LD_INT 1
22291: PPUSH
22292: LD_INT 24
22294: PPUSH
22295: CALL 9235 0 2
// if russianAI = 1 then
22299: LD_EXP 27
22303: PUSH
22304: LD_INT 1
22306: EQUAL
22307: IFFALSE 22377
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22309: LD_INT 3
22311: PPUSH
22312: LD_INT 7
22314: PPUSH
22315: LD_INT 6
22317: PPUSH
22318: LD_EXP 29
22322: PPUSH
22323: CALL 11673 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22327: LD_INT 3
22329: PPUSH
22330: LD_EXP 28
22334: PPUSH
22335: LD_INT 6
22337: PPUSH
22338: LD_EXP 31
22342: PPUSH
22343: CALL 11267 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22347: LD_INT 3
22349: PPUSH
22350: LD_INT 26
22352: PPUSH
22353: LD_EXP 46
22357: PPUSH
22358: LD_EXP 47
22362: PPUSH
22363: CALL 10135 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22367: LD_INT 3
22369: PPUSH
22370: LD_INT 1
22372: PPUSH
22373: CALL 12217 0 2
// end ; if SikorskyArrive = 1 then
22377: LD_EXP 18
22381: PUSH
22382: LD_INT 1
22384: EQUAL
22385: IFFALSE 22403
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22387: LD_INT 3
22389: PPUSH
22390: LD_INT 10
22392: PPUSH
22393: LD_INT 53
22395: PPUSH
22396: LD_INT 59
22398: PPUSH
22399: CALL 9932 0 4
// end ;
22403: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22404: LD_EXP 27
22408: PUSH
22409: LD_INT 1
22411: EQUAL
22412: IFFALSE 22688
22414: GO 22416
22416: DISABLE
22417: LD_INT 0
22419: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22420: LD_ADDR_VAR 0 1
22424: PUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 3
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 21
22437: PUSH
22438: LD_INT 3
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 30
22447: PUSH
22448: LD_INT 32
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 3
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: LD_INT 35
22463: PUSH
22464: LD_INT 43
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 35
22473: PUSH
22474: LD_INT 44
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 35
22483: PUSH
22484: LD_INT 46
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: PPUSH
22507: CALL_OW 69
22511: PUSH
22512: FOR_IN
22513: IFFALSE 22552
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22515: LD_VAR 0 1
22519: PPUSH
22520: LD_INT 43
22522: PUSH
22523: LD_INT 44
22525: PUSH
22526: LD_INT 46
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 1
22536: PPUSH
22537: LD_INT 3
22539: PPUSH
22540: CALL_OW 12
22544: ARRAY
22545: PPUSH
22546: CALL_OW 431
22550: GO 22512
22552: POP
22553: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22554: LD_ADDR_VAR 0 1
22558: PUSH
22559: LD_INT 22
22561: PUSH
22562: LD_INT 3
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 21
22571: PUSH
22572: LD_INT 3
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 30
22581: PUSH
22582: LD_INT 33
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: LD_INT 35
22597: PUSH
22598: LD_INT 43
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 35
22607: PUSH
22608: LD_INT 44
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 35
22617: PUSH
22618: LD_INT 46
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 69
22645: PUSH
22646: FOR_IN
22647: IFFALSE 22686
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22649: LD_VAR 0 1
22653: PPUSH
22654: LD_INT 43
22656: PUSH
22657: LD_INT 44
22659: PUSH
22660: LD_INT 46
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 1
22670: PPUSH
22671: LD_INT 3
22673: PPUSH
22674: CALL_OW 12
22678: ARRAY
22679: PPUSH
22680: CALL_OW 431
22684: GO 22646
22686: POP
22687: POP
// end ;
22688: PPOPN 1
22690: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22691: LD_EXP 24
22695: PPUSH
22696: CALL_OW 310
22700: NOT
22701: PUSH
22702: LD_EXP 28
22706: PPUSH
22707: CALL_OW 302
22711: AND
22712: PUSH
22713: LD_EXP 28
22717: PPUSH
22718: CALL_OW 255
22722: PUSH
22723: LD_INT 3
22725: EQUAL
22726: AND
22727: IFFALSE 22747
22729: GO 22731
22731: DISABLE
// begin enable ;
22732: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22733: LD_EXP 24
22737: PPUSH
22738: LD_EXP 28
22742: PPUSH
22743: CALL_OW 120
// end ;
22747: END
// every 0 0$1 trigger SikorskyAI = 1 do
22748: LD_EXP 20
22752: PUSH
22753: LD_INT 1
22755: EQUAL
22756: IFFALSE 22791
22758: GO 22760
22760: DISABLE
// begin enable ;
22761: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22762: LD_INT 4
22764: PPUSH
22765: LD_INT 10
22767: PPUSH
22768: LD_INT 93
22770: PPUSH
22771: LD_INT 93
22773: PPUSH
22774: CALL 9932 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22778: LD_INT 4
22780: PPUSH
22781: LD_INT 11
22783: PPUSH
22784: LD_INT 3
22786: PPUSH
22787: CALL 16429 0 3
// end ;
22791: END
// every 0 0$1 trigger SikorskyAI = 1 do
22792: LD_EXP 20
22796: PUSH
22797: LD_INT 1
22799: EQUAL
22800: IFFALSE 22812
22802: GO 22804
22804: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
22805: LD_INT 4
22807: PPUSH
22808: CALL 10939 0 1
22812: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22813: LD_EXP 27
22817: PUSH
22818: LD_INT 1
22820: EQUAL
22821: PUSH
22822: LD_EXP 30
22826: PPUSH
22827: CALL_OW 302
22831: AND
22832: PUSH
22833: LD_EXP 30
22837: PPUSH
22838: CALL_OW 255
22842: PUSH
22843: LD_INT 3
22845: EQUAL
22846: AND
22847: PUSH
22848: LD_INT 22
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 21
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 33
22870: PUSH
22871: LD_INT 3
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 69
22887: PUSH
22888: LD_INT 0
22890: EQUAL
22891: AND
22892: IFFALSE 23126
22894: GO 22896
22896: DISABLE
// begin enable ;
22897: ENABLE
// if Difficulty = 1 then
22898: LD_OWVAR 67
22902: PUSH
22903: LD_INT 1
22905: EQUAL
22906: IFFALSE 22974
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
22908: LD_INT 3
22910: PPUSH
22911: LD_EXP 30
22915: PPUSH
22916: LD_INT 5
22918: PPUSH
22919: LD_INT 8
22921: PPUSH
22922: CALL_OW 12
22926: PPUSH
22927: LD_INT 43
22929: PUSH
22930: LD_INT 43
22932: PUSH
22933: LD_INT 43
22935: PUSH
22936: LD_INT 43
22938: PUSH
22939: LD_INT 44
22941: PUSH
22942: LD_INT 44
22944: PUSH
22945: LD_INT 44
22947: PUSH
22948: LD_INT 46
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: PPUSH
22961: LD_INT 1
22963: PPUSH
22964: LD_INT 3
22966: PPUSH
22967: LD_INT 24
22969: PPUSH
22970: CALL 9778 0 7
// if Difficulty = 2 then
22974: LD_OWVAR 67
22978: PUSH
22979: LD_INT 2
22981: EQUAL
22982: IFFALSE 23050
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
22984: LD_INT 3
22986: PPUSH
22987: LD_EXP 30
22991: PPUSH
22992: LD_INT 6
22994: PPUSH
22995: LD_INT 8
22997: PPUSH
22998: CALL_OW 12
23002: PPUSH
23003: LD_INT 43
23005: PUSH
23006: LD_INT 43
23008: PUSH
23009: LD_INT 44
23011: PUSH
23012: LD_INT 44
23014: PUSH
23015: LD_INT 44
23017: PUSH
23018: LD_INT 44
23020: PUSH
23021: LD_INT 46
23023: PUSH
23024: LD_INT 46
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: LD_INT 3
23042: PPUSH
23043: LD_INT 24
23045: PPUSH
23046: CALL 9778 0 7
// if Difficulty = 3 then
23050: LD_OWVAR 67
23054: PUSH
23055: LD_INT 3
23057: EQUAL
23058: IFFALSE 23126
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23060: LD_INT 3
23062: PPUSH
23063: LD_EXP 30
23067: PPUSH
23068: LD_INT 7
23070: PPUSH
23071: LD_INT 8
23073: PPUSH
23074: CALL_OW 12
23078: PPUSH
23079: LD_INT 43
23081: PUSH
23082: LD_INT 43
23084: PUSH
23085: LD_INT 44
23087: PUSH
23088: LD_INT 44
23090: PUSH
23091: LD_INT 44
23093: PUSH
23094: LD_INT 46
23096: PUSH
23097: LD_INT 46
23099: PUSH
23100: LD_INT 46
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: PPUSH
23113: LD_INT 1
23115: PPUSH
23116: LD_INT 3
23118: PPUSH
23119: LD_INT 24
23121: PPUSH
23122: CALL 9778 0 7
// end ;
23126: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23127: LD_EXP 38
23131: PUSH
23132: LD_INT 1
23134: EQUAL
23135: IFFALSE 23217
23137: GO 23139
23139: DISABLE
23140: LD_INT 0
23142: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23143: LD_ADDR_VAR 0 1
23147: PUSH
23148: LD_INT 22
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 21
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 3
23170: PUSH
23171: LD_INT 24
23173: PUSH
23174: LD_INT 650
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: PPUSH
23190: CALL_OW 69
23194: PUSH
23195: FOR_IN
23196: IFFALSE 23215
// ComMoveXY ( i , 51 , 12 ) ;
23198: LD_VAR 0 1
23202: PPUSH
23203: LD_INT 51
23205: PPUSH
23206: LD_INT 12
23208: PPUSH
23209: CALL_OW 111
23213: GO 23195
23215: POP
23216: POP
// end ; end_of_file
23217: PPOPN 1
23219: END
// every 1 1$20 trigger firstAttack = 1 do
23220: LD_EXP 33
23224: PUSH
23225: LD_INT 1
23227: EQUAL
23228: IFFALSE 23334
23230: GO 23232
23232: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23233: LD_INT 6
23235: PPUSH
23236: LD_INT 3
23238: PPUSH
23239: LD_INT 3
23241: PPUSH
23242: LD_INT 4
23244: PPUSH
23245: CALL_OW 12
23249: PUSH
23250: LD_INT 4
23252: PPUSH
23253: LD_INT 6
23255: PPUSH
23256: CALL_OW 12
23260: PUSH
23261: LD_INT 5
23263: PPUSH
23264: LD_INT 6
23266: PPUSH
23267: CALL_OW 12
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: LD_OWVAR 67
23281: ARRAY
23282: PPUSH
23283: LD_INT 0
23285: PPUSH
23286: LD_INT 0
23288: PPUSH
23289: LD_INT 0
23291: PPUSH
23292: LD_INT 0
23294: PPUSH
23295: LD_EXP 25
23299: PPUSH
23300: LD_EXP 26
23304: PPUSH
23305: CALL_OW 12
23309: PPUSH
23310: LD_INT 16
23312: PPUSH
23313: LD_INT 7
23315: PPUSH
23316: LD_INT 1
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: LD_INT 3
23324: PPUSH
23325: CALL_OW 12
23329: PPUSH
23330: CALL 12447 0 12
23334: END
// every 1 1$40 trigger firstAttack = 1 do
23335: LD_EXP 33
23339: PUSH
23340: LD_INT 1
23342: EQUAL
23343: IFFALSE 23435
23345: GO 23347
23347: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23348: LD_INT 16
23350: PPUSH
23351: LD_INT 6
23353: PPUSH
23354: LD_INT 3
23356: PPUSH
23357: LD_INT 4
23359: PPUSH
23360: CALL_OW 12
23364: PUSH
23365: LD_INT 4
23367: PPUSH
23368: LD_INT 5
23370: PPUSH
23371: CALL_OW 12
23375: PUSH
23376: LD_INT 5
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: LIST
23383: PUSH
23384: LD_OWVAR 67
23388: ARRAY
23389: PPUSH
23390: LD_EXP 25
23394: PPUSH
23395: LD_EXP 26
23399: PPUSH
23400: CALL_OW 12
23404: PPUSH
23405: LD_INT 3
23407: PPUSH
23408: LD_INT 1
23410: PPUSH
23411: LD_INT 3
23413: PPUSH
23414: LD_INT 44
23416: PUSH
23417: LD_INT 46
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PPUSH
23424: EMPTY
23425: PPUSH
23426: EMPTY
23427: PPUSH
23428: LD_INT 1
23430: PPUSH
23431: CALL 14740 0 11
23435: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23436: LD_EXP 33
23440: PUSH
23441: LD_INT 1
23443: EQUAL
23444: PUSH
23445: LD_EXP 39
23449: PUSH
23450: LD_INT 0
23452: EQUAL
23453: AND
23454: IFFALSE 23560
23456: GO 23458
23458: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23459: LD_INT 6
23461: PPUSH
23462: LD_INT 3
23464: PPUSH
23465: LD_INT 4
23467: PPUSH
23468: LD_INT 5
23470: PPUSH
23471: CALL_OW 12
23475: PUSH
23476: LD_INT 5
23478: PPUSH
23479: LD_INT 6
23481: PPUSH
23482: CALL_OW 12
23486: PUSH
23487: LD_INT 5
23489: PPUSH
23490: LD_INT 6
23492: PPUSH
23493: CALL_OW 12
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: PUSH
23503: LD_OWVAR 67
23507: ARRAY
23508: PPUSH
23509: LD_INT 0
23511: PPUSH
23512: LD_INT 0
23514: PPUSH
23515: LD_INT 0
23517: PPUSH
23518: LD_INT 0
23520: PPUSH
23521: LD_EXP 25
23525: PPUSH
23526: LD_EXP 26
23530: PPUSH
23531: CALL_OW 12
23535: PPUSH
23536: LD_INT 16
23538: PPUSH
23539: LD_INT 7
23541: PPUSH
23542: LD_INT 1
23544: PPUSH
23545: LD_INT 1
23547: PPUSH
23548: LD_INT 3
23550: PPUSH
23551: CALL_OW 12
23555: PPUSH
23556: CALL 12447 0 12
23560: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23561: LD_EXP 33
23565: PUSH
23566: LD_INT 1
23568: EQUAL
23569: PUSH
23570: LD_EXP 39
23574: PUSH
23575: LD_INT 0
23577: EQUAL
23578: AND
23579: IFFALSE 23675
23581: GO 23583
23583: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23584: LD_INT 16
23586: PPUSH
23587: LD_INT 6
23589: PPUSH
23590: LD_INT 4
23592: PPUSH
23593: LD_INT 5
23595: PPUSH
23596: CALL_OW 12
23600: PUSH
23601: LD_INT 6
23603: PPUSH
23604: LD_INT 7
23606: PPUSH
23607: CALL_OW 12
23611: PUSH
23612: LD_INT 7
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: LD_OWVAR 67
23624: ARRAY
23625: PPUSH
23626: LD_EXP 25
23630: PPUSH
23631: LD_EXP 26
23635: PPUSH
23636: CALL_OW 12
23640: PPUSH
23641: LD_INT 3
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: LD_INT 3
23649: PPUSH
23650: LD_INT 43
23652: PUSH
23653: LD_INT 44
23655: PUSH
23656: LD_INT 46
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: PPUSH
23664: EMPTY
23665: PPUSH
23666: EMPTY
23667: PPUSH
23668: LD_INT 1
23670: PPUSH
23671: CALL 14740 0 11
23675: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23676: LD_EXP 33
23680: PUSH
23681: LD_INT 1
23683: EQUAL
23684: PUSH
23685: LD_EXP 39
23689: PUSH
23690: LD_INT 0
23692: EQUAL
23693: AND
23694: IFFALSE 23790
23696: GO 23698
23698: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23699: LD_INT 16
23701: PPUSH
23702: LD_INT 6
23704: PPUSH
23705: LD_INT 4
23707: PPUSH
23708: LD_INT 5
23710: PPUSH
23711: CALL_OW 12
23715: PUSH
23716: LD_INT 6
23718: PPUSH
23719: LD_INT 7
23721: PPUSH
23722: CALL_OW 12
23726: PUSH
23727: LD_INT 7
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: PUSH
23735: LD_OWVAR 67
23739: ARRAY
23740: PPUSH
23741: LD_EXP 25
23745: PPUSH
23746: LD_EXP 26
23750: PPUSH
23751: CALL_OW 12
23755: PPUSH
23756: LD_INT 3
23758: PPUSH
23759: LD_INT 1
23761: PPUSH
23762: LD_INT 3
23764: PPUSH
23765: LD_INT 43
23767: PUSH
23768: LD_INT 44
23770: PUSH
23771: LD_INT 46
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: LIST
23778: PPUSH
23779: EMPTY
23780: PPUSH
23781: EMPTY
23782: PPUSH
23783: LD_INT 1
23785: PPUSH
23786: CALL 14740 0 11
23790: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
23791: LD_EXP 33
23795: PUSH
23796: LD_INT 1
23798: EQUAL
23799: PUSH
23800: LD_EXP 39
23804: PUSH
23805: LD_INT 0
23807: EQUAL
23808: AND
23809: IFFALSE 23885
23811: GO 23813
23813: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23814: LD_INT 16
23816: PPUSH
23817: LD_INT 6
23819: PPUSH
23820: LD_INT 4
23822: PUSH
23823: LD_INT 6
23825: PUSH
23826: LD_INT 7
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: PUSH
23834: LD_OWVAR 67
23838: ARRAY
23839: PPUSH
23840: LD_EXP 25
23844: PPUSH
23845: LD_EXP 26
23849: PPUSH
23850: CALL_OW 12
23854: PPUSH
23855: LD_INT 3
23857: PPUSH
23858: LD_INT 1
23860: PPUSH
23861: LD_INT 3
23863: PPUSH
23864: LD_INT 44
23866: PUSH
23867: LD_INT 46
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PPUSH
23874: EMPTY
23875: PPUSH
23876: EMPTY
23877: PPUSH
23878: LD_INT 1
23880: PPUSH
23881: CALL 14740 0 11
23885: END
// every 1 1$00 trigger secondAttack = 1 do
23886: LD_EXP 34
23890: PUSH
23891: LD_INT 1
23893: EQUAL
23894: IFFALSE 23976
23896: GO 23898
23898: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23899: LD_INT 6
23901: PPUSH
23902: LD_INT 3
23904: PPUSH
23905: LD_INT 3
23907: PUSH
23908: LD_INT 4
23910: PUSH
23911: LD_INT 5
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: PUSH
23919: LD_OWVAR 67
23923: ARRAY
23924: PPUSH
23925: LD_INT 0
23927: PPUSH
23928: LD_INT 0
23930: PPUSH
23931: LD_INT 0
23933: PPUSH
23934: LD_INT 0
23936: PPUSH
23937: LD_EXP 25
23941: PPUSH
23942: LD_EXP 26
23946: PPUSH
23947: CALL_OW 12
23951: PPUSH
23952: LD_INT 16
23954: PPUSH
23955: LD_INT 7
23957: PPUSH
23958: LD_INT 1
23960: PPUSH
23961: LD_INT 1
23963: PPUSH
23964: LD_INT 3
23966: PPUSH
23967: CALL_OW 12
23971: PPUSH
23972: CALL 12447 0 12
23976: END
// every 1 1$00 trigger secondAttack = 1 do
23977: LD_EXP 34
23981: PUSH
23982: LD_INT 1
23984: EQUAL
23985: IFFALSE 24089
23987: GO 23989
23989: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23990: LD_INT 16
23992: PPUSH
23993: LD_INT 6
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: LD_INT 6
24001: PPUSH
24002: CALL_OW 12
24006: PUSH
24007: LD_INT 6
24009: PPUSH
24010: LD_INT 9
24012: PPUSH
24013: CALL_OW 12
24017: PUSH
24018: LD_INT 7
24020: PPUSH
24021: LD_INT 9
24023: PPUSH
24024: CALL_OW 12
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: PUSH
24034: LD_OWVAR 67
24038: ARRAY
24039: PPUSH
24040: LD_EXP 25
24044: PPUSH
24045: LD_EXP 26
24049: PPUSH
24050: CALL_OW 12
24054: PPUSH
24055: LD_INT 3
24057: PPUSH
24058: LD_INT 1
24060: PPUSH
24061: LD_INT 3
24063: PPUSH
24064: LD_INT 43
24066: PUSH
24067: LD_INT 44
24069: PUSH
24070: LD_INT 46
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: LIST
24077: PPUSH
24078: EMPTY
24079: PPUSH
24080: EMPTY
24081: PPUSH
24082: LD_INT 1
24084: PPUSH
24085: CALL 14740 0 11
24089: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24090: LD_EXP 18
24094: PUSH
24095: LD_INT 0
24097: EQUAL
24098: IFFALSE 24180
24100: GO 24102
24102: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24103: LD_INT 6
24105: PPUSH
24106: LD_INT 3
24108: PPUSH
24109: LD_INT 3
24111: PUSH
24112: LD_INT 4
24114: PUSH
24115: LD_INT 5
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: LIST
24122: PUSH
24123: LD_OWVAR 67
24127: ARRAY
24128: PPUSH
24129: LD_INT 0
24131: PPUSH
24132: LD_INT 0
24134: PPUSH
24135: LD_INT 0
24137: PPUSH
24138: LD_INT 0
24140: PPUSH
24141: LD_EXP 25
24145: PPUSH
24146: LD_EXP 26
24150: PPUSH
24151: CALL_OW 12
24155: PPUSH
24156: LD_INT 16
24158: PPUSH
24159: LD_INT 7
24161: PPUSH
24162: LD_INT 1
24164: PPUSH
24165: LD_INT 1
24167: PPUSH
24168: LD_INT 3
24170: PPUSH
24171: CALL_OW 12
24175: PPUSH
24176: CALL 12447 0 12
24180: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24181: LD_EXP 18
24185: PUSH
24186: LD_INT 0
24188: EQUAL
24189: IFFALSE 24289
24191: GO 24193
24193: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24194: LD_INT 16
24196: PPUSH
24197: LD_INT 6
24199: PPUSH
24200: LD_INT 5
24202: PPUSH
24203: LD_INT 6
24205: PPUSH
24206: CALL_OW 12
24210: PUSH
24211: LD_INT 6
24213: PPUSH
24214: LD_INT 9
24216: PPUSH
24217: CALL_OW 12
24221: PUSH
24222: LD_INT 7
24224: PPUSH
24225: LD_INT 9
24227: PPUSH
24228: CALL_OW 12
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: LIST
24237: PUSH
24238: LD_OWVAR 67
24242: ARRAY
24243: PPUSH
24244: LD_EXP 25
24248: PPUSH
24249: LD_EXP 26
24253: PPUSH
24254: CALL_OW 12
24258: PPUSH
24259: LD_INT 3
24261: PPUSH
24262: LD_INT 1
24264: PPUSH
24265: LD_INT 3
24267: PPUSH
24268: LD_INT 44
24270: PUSH
24271: LD_INT 46
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PPUSH
24278: EMPTY
24279: PPUSH
24280: EMPTY
24281: PPUSH
24282: LD_INT 1
24284: PPUSH
24285: CALL 14740 0 11
24289: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24290: LD_EXP 18
24294: PUSH
24295: LD_INT 0
24297: EQUAL
24298: IFFALSE 24380
24300: GO 24302
24302: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24303: LD_INT 6
24305: PPUSH
24306: LD_INT 3
24308: PPUSH
24309: LD_INT 3
24311: PUSH
24312: LD_INT 4
24314: PUSH
24315: LD_INT 5
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: PUSH
24323: LD_OWVAR 67
24327: ARRAY
24328: PPUSH
24329: LD_INT 0
24331: PPUSH
24332: LD_INT 0
24334: PPUSH
24335: LD_INT 0
24337: PPUSH
24338: LD_INT 0
24340: PPUSH
24341: LD_EXP 25
24345: PPUSH
24346: LD_EXP 26
24350: PPUSH
24351: CALL_OW 12
24355: PPUSH
24356: LD_INT 16
24358: PPUSH
24359: LD_INT 7
24361: PPUSH
24362: LD_INT 1
24364: PPUSH
24365: LD_INT 1
24367: PPUSH
24368: LD_INT 3
24370: PPUSH
24371: CALL_OW 12
24375: PPUSH
24376: CALL 12447 0 12
24380: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24381: LD_EXP 18
24385: PUSH
24386: LD_INT 0
24388: EQUAL
24389: IFFALSE 24489
24391: GO 24393
24393: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24394: LD_INT 16
24396: PPUSH
24397: LD_INT 6
24399: PPUSH
24400: LD_INT 5
24402: PPUSH
24403: LD_INT 6
24405: PPUSH
24406: CALL_OW 12
24410: PUSH
24411: LD_INT 6
24413: PPUSH
24414: LD_INT 9
24416: PPUSH
24417: CALL_OW 12
24421: PUSH
24422: LD_INT 7
24424: PPUSH
24425: LD_INT 9
24427: PPUSH
24428: CALL_OW 12
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: LIST
24437: PUSH
24438: LD_OWVAR 67
24442: ARRAY
24443: PPUSH
24444: LD_EXP 25
24448: PPUSH
24449: LD_EXP 26
24453: PPUSH
24454: CALL_OW 12
24458: PPUSH
24459: LD_INT 3
24461: PPUSH
24462: LD_INT 1
24464: PPUSH
24465: LD_INT 3
24467: PPUSH
24468: LD_INT 44
24470: PUSH
24471: LD_INT 46
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PPUSH
24478: EMPTY
24479: PPUSH
24480: EMPTY
24481: PPUSH
24482: LD_INT 1
24484: PPUSH
24485: CALL 14740 0 11
24489: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24490: LD_EXP 18
24494: PUSH
24495: LD_INT 0
24497: EQUAL
24498: IFFALSE 24580
24500: GO 24502
24502: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24503: LD_INT 6
24505: PPUSH
24506: LD_INT 3
24508: PPUSH
24509: LD_INT 3
24511: PUSH
24512: LD_INT 4
24514: PUSH
24515: LD_INT 5
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: PUSH
24523: LD_OWVAR 67
24527: ARRAY
24528: PPUSH
24529: LD_INT 0
24531: PPUSH
24532: LD_INT 0
24534: PPUSH
24535: LD_INT 0
24537: PPUSH
24538: LD_INT 0
24540: PPUSH
24541: LD_EXP 25
24545: PPUSH
24546: LD_EXP 26
24550: PPUSH
24551: CALL_OW 12
24555: PPUSH
24556: LD_INT 16
24558: PPUSH
24559: LD_INT 7
24561: PPUSH
24562: LD_INT 1
24564: PPUSH
24565: LD_INT 1
24567: PPUSH
24568: LD_INT 3
24570: PPUSH
24571: CALL_OW 12
24575: PPUSH
24576: CALL 12447 0 12
24580: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24581: LD_EXP 18
24585: PUSH
24586: LD_INT 0
24588: EQUAL
24589: IFFALSE 24665
24591: GO 24593
24593: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24594: LD_INT 16
24596: PPUSH
24597: LD_INT 6
24599: PPUSH
24600: LD_INT 7
24602: PUSH
24603: LD_INT 8
24605: PUSH
24606: LD_INT 9
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: LIST
24613: PUSH
24614: LD_OWVAR 67
24618: ARRAY
24619: PPUSH
24620: LD_EXP 25
24624: PPUSH
24625: LD_EXP 26
24629: PPUSH
24630: CALL_OW 12
24634: PPUSH
24635: LD_INT 3
24637: PPUSH
24638: LD_INT 1
24640: PPUSH
24641: LD_INT 3
24643: PPUSH
24644: LD_INT 44
24646: PUSH
24647: LD_INT 46
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PPUSH
24654: EMPTY
24655: PPUSH
24656: EMPTY
24657: PPUSH
24658: LD_INT 1
24660: PPUSH
24661: CALL 14740 0 11
24665: END
// every 0 0$1 trigger timerStatus = 1 do
24666: LD_EXP 35
24670: PUSH
24671: LD_INT 1
24673: EQUAL
24674: IFFALSE 24734
24676: GO 24678
24678: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24679: LD_INT 35
24681: PPUSH
24682: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24686: LD_ADDR_OWVAR 47
24690: PUSH
24691: LD_STRING #Am08-1
24693: PUSH
24694: LD_EXP 19
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24703: LD_ADDR_EXP 19
24707: PUSH
24708: LD_EXP 19
24712: PUSH
24713: LD_INT 35
24715: MINUS
24716: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24717: LD_EXP 19
24721: PUSH
24722: LD_INT 0
24724: EQUAL
24725: IFFALSE 24679
// display_strings := [ ] ;
24727: LD_ADDR_OWVAR 47
24731: PUSH
24732: EMPTY
24733: ST_TO_ADDR
// end ; end_of_file
24734: END
// every 1 1$0 do
24735: GO 24737
24737: DISABLE
// begin if supply <= 13 and supply > 7 then
24738: LD_EXP 40
24742: PUSH
24743: LD_INT 13
24745: LESSEQUAL
24746: PUSH
24747: LD_EXP 40
24751: PUSH
24752: LD_INT 7
24754: GREATER
24755: AND
24756: IFFALSE 24779
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
24758: LD_INT 3
24760: PPUSH
24761: LD_INT 5
24763: PPUSH
24764: CALL_OW 12
24768: PPUSH
24769: LD_INT 5
24771: PPUSH
24772: LD_INT 1
24774: PPUSH
24775: CALL_OW 55
// if supply <= 7 and supply > 4 then
24779: LD_EXP 40
24783: PUSH
24784: LD_INT 7
24786: LESSEQUAL
24787: PUSH
24788: LD_EXP 40
24792: PUSH
24793: LD_INT 4
24795: GREATER
24796: AND
24797: IFFALSE 24820
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
24799: LD_INT 3
24801: PPUSH
24802: LD_INT 5
24804: PPUSH
24805: CALL_OW 12
24809: PPUSH
24810: LD_INT 20
24812: PPUSH
24813: LD_INT 1
24815: PPUSH
24816: CALL_OW 55
// if supply <= 4 and supply > 0 then
24820: LD_EXP 40
24824: PUSH
24825: LD_INT 4
24827: LESSEQUAL
24828: PUSH
24829: LD_EXP 40
24833: PUSH
24834: LD_INT 0
24836: GREATER
24837: AND
24838: IFFALSE 24861
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
24840: LD_INT 3
24842: PPUSH
24843: LD_INT 5
24845: PPUSH
24846: CALL_OW 12
24850: PPUSH
24851: LD_INT 21
24853: PPUSH
24854: LD_INT 1
24856: PPUSH
24857: CALL_OW 55
// if supply > 0 then
24861: LD_EXP 40
24865: PUSH
24866: LD_INT 0
24868: GREATER
24869: IFFALSE 24886
// begin supply = supply - 1 ;
24871: LD_ADDR_EXP 40
24875: PUSH
24876: LD_EXP 40
24880: PUSH
24881: LD_INT 1
24883: MINUS
24884: ST_TO_ADDR
// enable ;
24885: ENABLE
// end ; end ; end_of_file
24886: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
24887: LD_EXP 39
24891: PUSH
24892: LD_INT 1
24894: EQUAL
24895: PUSH
24896: LD_EXP 1
24900: PPUSH
24901: CALL_OW 301
24905: AND
24906: IFFALSE 24918
24908: GO 24910
24910: DISABLE
// YouLost ( JMM ) ;
24911: LD_STRING JMM
24913: PPUSH
24914: CALL_OW 104
24918: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
24919: LD_EXP 18
24923: PUSH
24924: LD_INT 1
24926: EQUAL
24927: PUSH
24928: LD_EXP 16
24932: PPUSH
24933: CALL_OW 301
24937: AND
24938: IFFALSE 24970
24940: GO 24942
24942: DISABLE
// begin DialogueOn ;
24943: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
24947: LD_EXP 23
24951: PPUSH
24952: LD_STRING D8a-Pow-1
24954: PPUSH
24955: CALL_OW 94
// DialogueOff ;
24959: CALL_OW 7
// YouLost ( Dismissed ) ;
24963: LD_STRING Dismissed
24965: PPUSH
24966: CALL_OW 104
// end ;
24970: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
24971: LD_INT 22
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: LD_INT 30
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 30
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PPUSH
25013: CALL_OW 69
25017: PUSH
25018: LD_INT 0
25020: EQUAL
25021: IFFALSE 25033
25023: GO 25025
25025: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25026: LD_STRING Destroyed
25028: PPUSH
25029: CALL_OW 104
25033: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25034: LD_EXP 24
25038: PPUSH
25039: CALL_OW 301
25043: PUSH
25044: LD_INT 22
25046: PUSH
25047: LD_INT 3
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 21
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PPUSH
25068: CALL_OW 69
25072: PUSH
25073: LD_INT 7
25075: PUSH
25076: LD_INT 6
25078: PUSH
25079: LD_INT 5
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: PUSH
25087: LD_OWVAR 67
25091: ARRAY
25092: LESS
25093: AND
25094: PUSH
25095: LD_EXP 1
25099: PPUSH
25100: CALL_OW 305
25104: AND
25105: IFFALSE 25661
25107: GO 25109
25109: DISABLE
25110: LD_INT 0
25112: PPUSH
25113: PPUSH
25114: PPUSH
// begin russianAI = 0 ;
25115: LD_ADDR_EXP 27
25119: PUSH
25120: LD_INT 0
25122: ST_TO_ADDR
// escapeAvalaible = 1 ;
25123: LD_ADDR_EXP 36
25127: PUSH
25128: LD_INT 1
25130: ST_TO_ADDR
// Video ( true ) ;
25131: LD_INT 1
25133: PPUSH
25134: CALL 77246 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25138: LD_INT 3
25140: PPUSH
25141: LD_INT 1
25143: PPUSH
25144: LD_INT 1
25146: PPUSH
25147: LD_INT 0
25149: PPUSH
25150: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25154: LD_INT 6
25156: PPUSH
25157: LD_INT 1
25159: PPUSH
25160: LD_INT 1
25162: PPUSH
25163: LD_INT 0
25165: PPUSH
25166: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25170: LD_INT 3
25172: PPUSH
25173: LD_INT 1
25175: PPUSH
25176: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25180: LD_INT 97
25182: PPUSH
25183: LD_INT 91
25185: PPUSH
25186: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25190: LD_INT 22
25192: PUSH
25193: LD_INT 3
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 21
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PPUSH
25214: CALL_OW 69
25218: PPUSH
25219: CALL_OW 121
// wait ( 0 0$01 ) ;
25223: LD_INT 35
25225: PPUSH
25226: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25230: LD_INT 22
25232: PUSH
25233: LD_INT 3
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 21
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PPUSH
25254: CALL_OW 69
25258: PPUSH
25259: LD_INT 124
25261: PPUSH
25262: LD_INT 98
25264: PPUSH
25265: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25269: LD_INT 22
25271: PUSH
25272: LD_INT 6
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 21
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PPUSH
25293: CALL_OW 69
25297: PPUSH
25298: CALL_OW 121
// wait ( 0 0$01 ) ;
25302: LD_INT 35
25304: PPUSH
25305: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25309: LD_INT 22
25311: PUSH
25312: LD_INT 6
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 21
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PPUSH
25333: CALL_OW 69
25337: PPUSH
25338: LD_INT 124
25340: PPUSH
25341: LD_INT 98
25343: PPUSH
25344: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25348: LD_INT 22
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 21
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: LD_INT 54
25373: PUSH
25374: EMPTY
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: PPUSH
25386: CALL_OW 69
25390: PPUSH
25391: LD_INT 124
25393: PPUSH
25394: LD_INT 98
25396: PPUSH
25397: CALL_OW 114
// wait ( 0 0$4 ) ;
25401: LD_INT 140
25403: PPUSH
25404: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25408: LD_INT 124
25410: PPUSH
25411: LD_INT 98
25413: PPUSH
25414: CALL_OW 84
// if SikorskyStatus = 1 then
25418: LD_EXP 21
25422: PUSH
25423: LD_INT 1
25425: EQUAL
25426: IFFALSE 25440
// Say ( Sikorski , D9-Sik-1 ) ;
25428: LD_EXP 16
25432: PPUSH
25433: LD_STRING D9-Sik-1
25435: PPUSH
25436: CALL_OW 88
// if SikorskyStatus = 2 then
25440: LD_EXP 21
25444: PUSH
25445: LD_INT 2
25447: EQUAL
25448: IFFALSE 25469
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25450: LD_EXP 23
25454: PPUSH
25455: LD_STRING D8b-Pow-1
25457: PPUSH
25458: CALL_OW 94
// YouLost ( Dismissed ) ;
25462: LD_STRING Dismissed
25464: PPUSH
25465: CALL_OW 104
// end ; p := 0 0$0 ;
25469: LD_ADDR_VAR 0 3
25473: PUSH
25474: LD_INT 0
25476: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25477: LD_ADDR_VAR 0 2
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: LD_INT 22
25487: PUSH
25488: LD_INT 3
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 22
25497: PUSH
25498: LD_INT 6
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 21
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 69
25528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25529: LD_INT 35
25531: PPUSH
25532: CALL_OW 67
// p := p + 0 0$1 ;
25536: LD_ADDR_VAR 0 3
25540: PUSH
25541: LD_VAR 0 3
25545: PUSH
25546: LD_INT 35
25548: PLUS
25549: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25550: LD_VAR 0 2
25554: PPUSH
25555: LD_INT 22
25557: PPUSH
25558: CALL_OW 113
// for i in tmp do
25562: LD_ADDR_VAR 0 1
25566: PUSH
25567: LD_VAR 0 2
25571: PUSH
25572: FOR_IN
25573: IFFALSE 25600
// if IsInArea ( i , RussianEscape ) then
25575: LD_VAR 0 1
25579: PPUSH
25580: LD_INT 22
25582: PPUSH
25583: CALL_OW 308
25587: IFFALSE 25598
// RemoveUnit ( i ) ;
25589: LD_VAR 0 1
25593: PPUSH
25594: CALL_OW 64
25598: GO 25572
25600: POP
25601: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25602: LD_INT 23
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 21
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 24
25624: PUSH
25625: LD_INT 250
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: PPUSH
25637: CALL_OW 69
25641: PUSH
25642: LD_INT 0
25644: EQUAL
25645: PUSH
25646: LD_VAR 0 3
25650: PUSH
25651: LD_INT 245
25653: GREATEREQUAL
25654: OR
25655: IFFALSE 25529
// FinishMission ;
25657: CALL 25664 0 0
// end ;
25661: PPOPN 3
25663: END
// export function FinishMission ; var tmp ; begin
25664: LD_INT 0
25666: PPUSH
25667: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25668: LD_INT 22
25670: PUSH
25671: LD_INT 4
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PPUSH
25678: CALL_OW 69
25682: PUSH
25683: LD_INT 0
25685: EQUAL
25686: IFFALSE 25695
// SetAchievement ( ACH_BLITZKRIEG ) ;
25688: LD_STRING ACH_BLITZKRIEG
25690: PPUSH
25691: CALL_OW 543
// if tick <= 25 25$00 then
25695: LD_OWVAR 1
25699: PUSH
25700: LD_INT 52500
25702: LESSEQUAL
25703: IFFALSE 25719
// begin wait ( 3 ) ;
25705: LD_INT 3
25707: PPUSH
25708: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25712: LD_STRING ACH_ASPEED_8
25714: PPUSH
25715: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25719: LD_STRING med1
25721: PPUSH
25722: LD_INT 1
25724: PPUSH
25725: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
25729: LD_STRING med2
25731: PPUSH
25732: LD_INT 1
25734: PPUSH
25735: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
25739: LD_STRING perfect
25741: PPUSH
25742: LD_INT 1
25744: PPUSH
25745: CALL_OW 101
// if Difficulty = 3 then
25749: LD_OWVAR 67
25753: PUSH
25754: LD_INT 3
25756: EQUAL
25757: IFFALSE 25769
// SetAchievementEX ( ACH_AMER , 8 ) ;
25759: LD_STRING ACH_AMER
25761: PPUSH
25762: LD_INT 8
25764: PPUSH
25765: CALL_OW 564
// GiveMedals ( Main ) ;
25769: LD_STRING Main
25771: PPUSH
25772: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
25776: LD_INT 22
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 23
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 21
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: LD_INT 25
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 25
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 25
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 25
25841: PUSH
25842: LD_INT 4
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: PPUSH
25862: CALL_OW 69
25866: PPUSH
25867: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
25871: LD_EXP 1
25875: PPUSH
25876: LD_EXP 43
25880: PUSH
25881: LD_STRING JMM
25883: STR
25884: PPUSH
25885: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
25889: LD_EXP 2
25893: PPUSH
25894: LD_EXP 43
25898: PUSH
25899: LD_STRING Brown
25901: STR
25902: PPUSH
25903: CALL 8294 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
25907: LD_EXP 3
25911: PPUSH
25912: LD_EXP 43
25916: PUSH
25917: LD_STRING Donaldson
25919: STR
25920: PPUSH
25921: CALL 8294 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
25925: LD_EXP 4
25929: PPUSH
25930: LD_EXP 43
25934: PUSH
25935: LD_STRING Bobby
25937: STR
25938: PPUSH
25939: CALL 8294 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
25943: LD_EXP 5
25947: PPUSH
25948: LD_EXP 43
25952: PUSH
25953: LD_STRING Cyrus
25955: STR
25956: PPUSH
25957: CALL 8294 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
25961: LD_EXP 6
25965: PPUSH
25966: LD_EXP 43
25970: PUSH
25971: LD_STRING Lisa
25973: STR
25974: PPUSH
25975: CALL 8294 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
25979: LD_EXP 7
25983: PPUSH
25984: LD_EXP 43
25988: PUSH
25989: LD_STRING Frank
25991: STR
25992: PPUSH
25993: CALL 8294 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
25997: LD_EXP 8
26001: PPUSH
26002: LD_EXP 43
26006: PUSH
26007: LD_STRING Gladstone
26009: STR
26010: PPUSH
26011: CALL 8294 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26015: LD_EXP 9
26019: PPUSH
26020: LD_EXP 43
26024: PUSH
26025: LD_STRING Kikuchi
26027: STR
26028: PPUSH
26029: CALL 8294 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26033: LD_EXP 14
26037: PPUSH
26038: LD_EXP 43
26042: PUSH
26043: LD_STRING Denis
26045: STR
26046: PPUSH
26047: CALL 8294 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26051: LD_EXP 15
26055: PPUSH
26056: LD_EXP 43
26060: PUSH
26061: LD_STRING Joan
26063: STR
26064: PPUSH
26065: CALL 8294 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26069: LD_EXP 10
26073: PPUSH
26074: LD_EXP 43
26078: PUSH
26079: LD_STRING Khatam
26081: STR
26082: PPUSH
26083: CALL 8294 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26087: LD_EXP 13
26091: PPUSH
26092: LD_EXP 43
26096: PUSH
26097: LD_STRING Houten
26099: STR
26100: PPUSH
26101: CALL 8294 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26105: LD_INT 50
26107: PUSH
26108: EMPTY
26109: LIST
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 21
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: LD_INT 25
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 25
26146: PUSH
26147: LD_INT 2
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 25
26156: PUSH
26157: LD_INT 3
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 25
26166: PUSH
26167: LD_INT 4
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: PPUSH
26187: CALL_OW 69
26191: PUSH
26192: LD_EXP 1
26196: PUSH
26197: LD_EXP 2
26201: PUSH
26202: LD_EXP 3
26206: PUSH
26207: LD_EXP 4
26211: PUSH
26212: LD_EXP 5
26216: PUSH
26217: LD_EXP 6
26221: PUSH
26222: LD_EXP 7
26226: PUSH
26227: LD_EXP 8
26231: PUSH
26232: LD_EXP 9
26236: PUSH
26237: LD_EXP 14
26241: PUSH
26242: LD_EXP 15
26246: PUSH
26247: LD_EXP 13
26251: PUSH
26252: LD_EXP 10
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: DIFF
26272: PPUSH
26273: LD_STRING 08_other_survivors
26275: PPUSH
26276: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26280: LD_INT 23
26282: PPUSH
26283: CALL 26296 0 1
// YouWin ;
26287: CALL_OW 103
// end ;
26291: LD_VAR 0 1
26295: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26296: LD_INT 0
26298: PPUSH
26299: PPUSH
26300: PPUSH
26301: PPUSH
// gammaBase = [ ] ;
26302: LD_ADDR_VAR 0 4
26306: PUSH
26307: EMPTY
26308: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26309: LD_ADDR_VAR 0 5
26313: PUSH
26314: LD_VAR 0 1
26318: PPUSH
26319: LD_INT 22
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 21
26331: PUSH
26332: LD_INT 3
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 50
26341: PUSH
26342: EMPTY
26343: LIST
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: LIST
26349: PPUSH
26350: CALL_OW 70
26354: ST_TO_ADDR
// for i in buildings do
26355: LD_ADDR_VAR 0 3
26359: PUSH
26360: LD_VAR 0 5
26364: PUSH
26365: FOR_IN
26366: IFFALSE 26803
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26368: LD_VAR 0 3
26372: PPUSH
26373: CALL_OW 266
26377: PUSH
26378: LD_INT 6
26380: PUSH
26381: LD_INT 7
26383: PUSH
26384: LD_INT 8
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: IN
26392: IFFALSE 26506
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26394: LD_ADDR_VAR 0 4
26398: PUSH
26399: LD_VAR 0 4
26403: PUSH
26404: LD_VAR 0 3
26408: PPUSH
26409: CALL_OW 266
26413: PUSH
26414: LD_VAR 0 3
26418: PPUSH
26419: CALL_OW 250
26423: PUSH
26424: LD_VAR 0 3
26428: PPUSH
26429: CALL_OW 251
26433: PUSH
26434: LD_VAR 0 3
26438: PPUSH
26439: CALL_OW 254
26443: PUSH
26444: LD_VAR 0 3
26448: PPUSH
26449: CALL_OW 267
26453: PUSH
26454: LD_VAR 0 3
26458: PPUSH
26459: CALL_OW 248
26463: PUSH
26464: LD_VAR 0 3
26468: PPUSH
26469: LD_INT 1
26471: PPUSH
26472: CALL_OW 268
26476: PUSH
26477: LD_VAR 0 3
26481: PPUSH
26482: LD_INT 2
26484: PPUSH
26485: CALL_OW 268
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: ADD
26503: ST_TO_ADDR
26504: GO 26801
// if GetBType ( i ) = b_bunker then
26506: LD_VAR 0 3
26510: PPUSH
26511: CALL_OW 266
26515: PUSH
26516: LD_INT 32
26518: EQUAL
26519: IFFALSE 26616
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26521: LD_ADDR_VAR 0 4
26525: PUSH
26526: LD_VAR 0 4
26530: PUSH
26531: LD_VAR 0 3
26535: PPUSH
26536: CALL_OW 266
26540: PUSH
26541: LD_VAR 0 3
26545: PPUSH
26546: CALL_OW 250
26550: PUSH
26551: LD_VAR 0 3
26555: PPUSH
26556: CALL_OW 251
26560: PUSH
26561: LD_VAR 0 3
26565: PPUSH
26566: CALL_OW 254
26570: PUSH
26571: LD_VAR 0 3
26575: PPUSH
26576: CALL_OW 267
26580: PUSH
26581: LD_VAR 0 3
26585: PPUSH
26586: CALL_OW 248
26590: PUSH
26591: LD_VAR 0 3
26595: PPUSH
26596: CALL_OW 269
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: PUSH
26610: EMPTY
26611: LIST
26612: ADD
26613: ST_TO_ADDR
26614: GO 26801
// if GetBType ( i ) = b_factory then
26616: LD_VAR 0 3
26620: PPUSH
26621: CALL_OW 266
26625: PUSH
26626: LD_INT 3
26628: EQUAL
26629: IFFALSE 26719
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26631: LD_ADDR_VAR 0 4
26635: PUSH
26636: LD_VAR 0 4
26640: PPUSH
26641: LD_INT 1
26643: PPUSH
26644: LD_VAR 0 3
26648: PPUSH
26649: CALL_OW 266
26653: PUSH
26654: LD_VAR 0 3
26658: PPUSH
26659: CALL_OW 250
26663: PUSH
26664: LD_VAR 0 3
26668: PPUSH
26669: CALL_OW 251
26673: PUSH
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 254
26683: PUSH
26684: LD_VAR 0 3
26688: PPUSH
26689: CALL_OW 267
26693: PUSH
26694: LD_VAR 0 3
26698: PPUSH
26699: CALL_OW 248
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: PPUSH
26712: CALL_OW 2
26716: ST_TO_ADDR
26717: GO 26801
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26719: LD_ADDR_VAR 0 4
26723: PUSH
26724: LD_VAR 0 4
26728: PUSH
26729: LD_VAR 0 3
26733: PPUSH
26734: CALL_OW 266
26738: PUSH
26739: LD_VAR 0 3
26743: PPUSH
26744: CALL_OW 250
26748: PUSH
26749: LD_VAR 0 3
26753: PPUSH
26754: CALL_OW 251
26758: PUSH
26759: LD_VAR 0 3
26763: PPUSH
26764: CALL_OW 254
26768: PUSH
26769: LD_VAR 0 3
26773: PPUSH
26774: CALL_OW 267
26778: PUSH
26779: LD_VAR 0 3
26783: PPUSH
26784: CALL_OW 248
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: PUSH
26797: EMPTY
26798: LIST
26799: ADD
26800: ST_TO_ADDR
// end ;
26801: GO 26365
26803: POP
26804: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
26805: LD_VAR 0 4
26809: PPUSH
26810: LD_STRING 08_GammaBase
26812: PPUSH
26813: CALL_OW 39
// end ; end_of_file
26817: LD_VAR 0 2
26821: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
26822: LD_INT 0
26824: PPUSH
// ar_crane := 88 ;
26825: LD_ADDR_EXP 54
26829: PUSH
26830: LD_INT 88
26832: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
26833: LD_ADDR_EXP 49
26837: PUSH
26838: LD_INT 89
26840: ST_TO_ADDR
// us_hack := 99 ;
26841: LD_ADDR_EXP 50
26845: PUSH
26846: LD_INT 99
26848: ST_TO_ADDR
// us_artillery := 97 ;
26849: LD_ADDR_EXP 51
26853: PUSH
26854: LD_INT 97
26856: ST_TO_ADDR
// ar_bio_bomb := 91 ;
26857: LD_ADDR_EXP 52
26861: PUSH
26862: LD_INT 91
26864: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
26865: LD_ADDR_EXP 53
26869: PUSH
26870: LD_INT 92
26872: ST_TO_ADDR
// ru_radar := 98 ;
26873: LD_ADDR_EXP 48
26877: PUSH
26878: LD_INT 98
26880: ST_TO_ADDR
// tech_Artillery := 80 ;
26881: LD_ADDR_EXP 55
26885: PUSH
26886: LD_INT 80
26888: ST_TO_ADDR
// tech_RadMat := 81 ;
26889: LD_ADDR_EXP 56
26893: PUSH
26894: LD_INT 81
26896: ST_TO_ADDR
// tech_BasicTools := 82 ;
26897: LD_ADDR_EXP 57
26901: PUSH
26902: LD_INT 82
26904: ST_TO_ADDR
// tech_Cargo := 83 ;
26905: LD_ADDR_EXP 58
26909: PUSH
26910: LD_INT 83
26912: ST_TO_ADDR
// tech_Track := 84 ;
26913: LD_ADDR_EXP 59
26917: PUSH
26918: LD_INT 84
26920: ST_TO_ADDR
// tech_Crane := 85 ;
26921: LD_ADDR_EXP 60
26925: PUSH
26926: LD_INT 85
26928: ST_TO_ADDR
// tech_Bulldozer := 86 ;
26929: LD_ADDR_EXP 61
26933: PUSH
26934: LD_INT 86
26936: ST_TO_ADDR
// tech_Hovercraft := 87 ;
26937: LD_ADDR_EXP 62
26941: PUSH
26942: LD_INT 87
26944: ST_TO_ADDR
// end ;
26945: LD_VAR 0 1
26949: RET
// every 1 do
26950: GO 26952
26952: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
26953: CALL 26822 0 0
26957: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
26958: LD_VAR 0 2
26962: PUSH
26963: LD_INT 100
26965: EQUAL
26966: IFFALSE 27915
// begin if not StreamModeActive then
26968: LD_EXP 63
26972: NOT
26973: IFFALSE 26983
// StreamModeActive := true ;
26975: LD_ADDR_EXP 63
26979: PUSH
26980: LD_INT 1
26982: ST_TO_ADDR
// if p3 = 0 then
26983: LD_VAR 0 3
26987: PUSH
26988: LD_INT 0
26990: EQUAL
26991: IFFALSE 26997
// InitStreamMode ;
26993: CALL 28148 0 0
// if p3 = 1 then
26997: LD_VAR 0 3
27001: PUSH
27002: LD_INT 1
27004: EQUAL
27005: IFFALSE 27015
// sRocket := true ;
27007: LD_ADDR_EXP 68
27011: PUSH
27012: LD_INT 1
27014: ST_TO_ADDR
// if p3 = 2 then
27015: LD_VAR 0 3
27019: PUSH
27020: LD_INT 2
27022: EQUAL
27023: IFFALSE 27033
// sSpeed := true ;
27025: LD_ADDR_EXP 67
27029: PUSH
27030: LD_INT 1
27032: ST_TO_ADDR
// if p3 = 3 then
27033: LD_VAR 0 3
27037: PUSH
27038: LD_INT 3
27040: EQUAL
27041: IFFALSE 27051
// sEngine := true ;
27043: LD_ADDR_EXP 69
27047: PUSH
27048: LD_INT 1
27050: ST_TO_ADDR
// if p3 = 4 then
27051: LD_VAR 0 3
27055: PUSH
27056: LD_INT 4
27058: EQUAL
27059: IFFALSE 27069
// sSpec := true ;
27061: LD_ADDR_EXP 66
27065: PUSH
27066: LD_INT 1
27068: ST_TO_ADDR
// if p3 = 5 then
27069: LD_VAR 0 3
27073: PUSH
27074: LD_INT 5
27076: EQUAL
27077: IFFALSE 27087
// sLevel := true ;
27079: LD_ADDR_EXP 70
27083: PUSH
27084: LD_INT 1
27086: ST_TO_ADDR
// if p3 = 6 then
27087: LD_VAR 0 3
27091: PUSH
27092: LD_INT 6
27094: EQUAL
27095: IFFALSE 27105
// sArmoury := true ;
27097: LD_ADDR_EXP 71
27101: PUSH
27102: LD_INT 1
27104: ST_TO_ADDR
// if p3 = 7 then
27105: LD_VAR 0 3
27109: PUSH
27110: LD_INT 7
27112: EQUAL
27113: IFFALSE 27123
// sRadar := true ;
27115: LD_ADDR_EXP 72
27119: PUSH
27120: LD_INT 1
27122: ST_TO_ADDR
// if p3 = 8 then
27123: LD_VAR 0 3
27127: PUSH
27128: LD_INT 8
27130: EQUAL
27131: IFFALSE 27141
// sBunker := true ;
27133: LD_ADDR_EXP 73
27137: PUSH
27138: LD_INT 1
27140: ST_TO_ADDR
// if p3 = 9 then
27141: LD_VAR 0 3
27145: PUSH
27146: LD_INT 9
27148: EQUAL
27149: IFFALSE 27159
// sHack := true ;
27151: LD_ADDR_EXP 74
27155: PUSH
27156: LD_INT 1
27158: ST_TO_ADDR
// if p3 = 10 then
27159: LD_VAR 0 3
27163: PUSH
27164: LD_INT 10
27166: EQUAL
27167: IFFALSE 27177
// sFire := true ;
27169: LD_ADDR_EXP 75
27173: PUSH
27174: LD_INT 1
27176: ST_TO_ADDR
// if p3 = 11 then
27177: LD_VAR 0 3
27181: PUSH
27182: LD_INT 11
27184: EQUAL
27185: IFFALSE 27195
// sRefresh := true ;
27187: LD_ADDR_EXP 76
27191: PUSH
27192: LD_INT 1
27194: ST_TO_ADDR
// if p3 = 12 then
27195: LD_VAR 0 3
27199: PUSH
27200: LD_INT 12
27202: EQUAL
27203: IFFALSE 27213
// sExp := true ;
27205: LD_ADDR_EXP 77
27209: PUSH
27210: LD_INT 1
27212: ST_TO_ADDR
// if p3 = 13 then
27213: LD_VAR 0 3
27217: PUSH
27218: LD_INT 13
27220: EQUAL
27221: IFFALSE 27231
// sDepot := true ;
27223: LD_ADDR_EXP 78
27227: PUSH
27228: LD_INT 1
27230: ST_TO_ADDR
// if p3 = 14 then
27231: LD_VAR 0 3
27235: PUSH
27236: LD_INT 14
27238: EQUAL
27239: IFFALSE 27249
// sFlag := true ;
27241: LD_ADDR_EXP 79
27245: PUSH
27246: LD_INT 1
27248: ST_TO_ADDR
// if p3 = 15 then
27249: LD_VAR 0 3
27253: PUSH
27254: LD_INT 15
27256: EQUAL
27257: IFFALSE 27267
// sKamikadze := true ;
27259: LD_ADDR_EXP 87
27263: PUSH
27264: LD_INT 1
27266: ST_TO_ADDR
// if p3 = 16 then
27267: LD_VAR 0 3
27271: PUSH
27272: LD_INT 16
27274: EQUAL
27275: IFFALSE 27285
// sTroll := true ;
27277: LD_ADDR_EXP 88
27281: PUSH
27282: LD_INT 1
27284: ST_TO_ADDR
// if p3 = 17 then
27285: LD_VAR 0 3
27289: PUSH
27290: LD_INT 17
27292: EQUAL
27293: IFFALSE 27303
// sSlow := true ;
27295: LD_ADDR_EXP 89
27299: PUSH
27300: LD_INT 1
27302: ST_TO_ADDR
// if p3 = 18 then
27303: LD_VAR 0 3
27307: PUSH
27308: LD_INT 18
27310: EQUAL
27311: IFFALSE 27321
// sLack := true ;
27313: LD_ADDR_EXP 90
27317: PUSH
27318: LD_INT 1
27320: ST_TO_ADDR
// if p3 = 19 then
27321: LD_VAR 0 3
27325: PUSH
27326: LD_INT 19
27328: EQUAL
27329: IFFALSE 27339
// sTank := true ;
27331: LD_ADDR_EXP 92
27335: PUSH
27336: LD_INT 1
27338: ST_TO_ADDR
// if p3 = 20 then
27339: LD_VAR 0 3
27343: PUSH
27344: LD_INT 20
27346: EQUAL
27347: IFFALSE 27357
// sRemote := true ;
27349: LD_ADDR_EXP 93
27353: PUSH
27354: LD_INT 1
27356: ST_TO_ADDR
// if p3 = 21 then
27357: LD_VAR 0 3
27361: PUSH
27362: LD_INT 21
27364: EQUAL
27365: IFFALSE 27375
// sPowell := true ;
27367: LD_ADDR_EXP 94
27371: PUSH
27372: LD_INT 1
27374: ST_TO_ADDR
// if p3 = 22 then
27375: LD_VAR 0 3
27379: PUSH
27380: LD_INT 22
27382: EQUAL
27383: IFFALSE 27393
// sTeleport := true ;
27385: LD_ADDR_EXP 97
27389: PUSH
27390: LD_INT 1
27392: ST_TO_ADDR
// if p3 = 23 then
27393: LD_VAR 0 3
27397: PUSH
27398: LD_INT 23
27400: EQUAL
27401: IFFALSE 27411
// sOilTower := true ;
27403: LD_ADDR_EXP 99
27407: PUSH
27408: LD_INT 1
27410: ST_TO_ADDR
// if p3 = 24 then
27411: LD_VAR 0 3
27415: PUSH
27416: LD_INT 24
27418: EQUAL
27419: IFFALSE 27429
// sShovel := true ;
27421: LD_ADDR_EXP 100
27425: PUSH
27426: LD_INT 1
27428: ST_TO_ADDR
// if p3 = 25 then
27429: LD_VAR 0 3
27433: PUSH
27434: LD_INT 25
27436: EQUAL
27437: IFFALSE 27447
// sSheik := true ;
27439: LD_ADDR_EXP 101
27443: PUSH
27444: LD_INT 1
27446: ST_TO_ADDR
// if p3 = 26 then
27447: LD_VAR 0 3
27451: PUSH
27452: LD_INT 26
27454: EQUAL
27455: IFFALSE 27465
// sEarthquake := true ;
27457: LD_ADDR_EXP 103
27461: PUSH
27462: LD_INT 1
27464: ST_TO_ADDR
// if p3 = 27 then
27465: LD_VAR 0 3
27469: PUSH
27470: LD_INT 27
27472: EQUAL
27473: IFFALSE 27483
// sAI := true ;
27475: LD_ADDR_EXP 104
27479: PUSH
27480: LD_INT 1
27482: ST_TO_ADDR
// if p3 = 28 then
27483: LD_VAR 0 3
27487: PUSH
27488: LD_INT 28
27490: EQUAL
27491: IFFALSE 27501
// sCargo := true ;
27493: LD_ADDR_EXP 107
27497: PUSH
27498: LD_INT 1
27500: ST_TO_ADDR
// if p3 = 29 then
27501: LD_VAR 0 3
27505: PUSH
27506: LD_INT 29
27508: EQUAL
27509: IFFALSE 27519
// sDLaser := true ;
27511: LD_ADDR_EXP 108
27515: PUSH
27516: LD_INT 1
27518: ST_TO_ADDR
// if p3 = 30 then
27519: LD_VAR 0 3
27523: PUSH
27524: LD_INT 30
27526: EQUAL
27527: IFFALSE 27537
// sExchange := true ;
27529: LD_ADDR_EXP 109
27533: PUSH
27534: LD_INT 1
27536: ST_TO_ADDR
// if p3 = 31 then
27537: LD_VAR 0 3
27541: PUSH
27542: LD_INT 31
27544: EQUAL
27545: IFFALSE 27555
// sFac := true ;
27547: LD_ADDR_EXP 110
27551: PUSH
27552: LD_INT 1
27554: ST_TO_ADDR
// if p3 = 32 then
27555: LD_VAR 0 3
27559: PUSH
27560: LD_INT 32
27562: EQUAL
27563: IFFALSE 27573
// sPower := true ;
27565: LD_ADDR_EXP 111
27569: PUSH
27570: LD_INT 1
27572: ST_TO_ADDR
// if p3 = 33 then
27573: LD_VAR 0 3
27577: PUSH
27578: LD_INT 33
27580: EQUAL
27581: IFFALSE 27591
// sRandom := true ;
27583: LD_ADDR_EXP 112
27587: PUSH
27588: LD_INT 1
27590: ST_TO_ADDR
// if p3 = 34 then
27591: LD_VAR 0 3
27595: PUSH
27596: LD_INT 34
27598: EQUAL
27599: IFFALSE 27609
// sShield := true ;
27601: LD_ADDR_EXP 113
27605: PUSH
27606: LD_INT 1
27608: ST_TO_ADDR
// if p3 = 35 then
27609: LD_VAR 0 3
27613: PUSH
27614: LD_INT 35
27616: EQUAL
27617: IFFALSE 27627
// sTime := true ;
27619: LD_ADDR_EXP 114
27623: PUSH
27624: LD_INT 1
27626: ST_TO_ADDR
// if p3 = 36 then
27627: LD_VAR 0 3
27631: PUSH
27632: LD_INT 36
27634: EQUAL
27635: IFFALSE 27645
// sTools := true ;
27637: LD_ADDR_EXP 115
27641: PUSH
27642: LD_INT 1
27644: ST_TO_ADDR
// if p3 = 101 then
27645: LD_VAR 0 3
27649: PUSH
27650: LD_INT 101
27652: EQUAL
27653: IFFALSE 27663
// sSold := true ;
27655: LD_ADDR_EXP 80
27659: PUSH
27660: LD_INT 1
27662: ST_TO_ADDR
// if p3 = 102 then
27663: LD_VAR 0 3
27667: PUSH
27668: LD_INT 102
27670: EQUAL
27671: IFFALSE 27681
// sDiff := true ;
27673: LD_ADDR_EXP 81
27677: PUSH
27678: LD_INT 1
27680: ST_TO_ADDR
// if p3 = 103 then
27681: LD_VAR 0 3
27685: PUSH
27686: LD_INT 103
27688: EQUAL
27689: IFFALSE 27699
// sFog := true ;
27691: LD_ADDR_EXP 84
27695: PUSH
27696: LD_INT 1
27698: ST_TO_ADDR
// if p3 = 104 then
27699: LD_VAR 0 3
27703: PUSH
27704: LD_INT 104
27706: EQUAL
27707: IFFALSE 27717
// sReset := true ;
27709: LD_ADDR_EXP 85
27713: PUSH
27714: LD_INT 1
27716: ST_TO_ADDR
// if p3 = 105 then
27717: LD_VAR 0 3
27721: PUSH
27722: LD_INT 105
27724: EQUAL
27725: IFFALSE 27735
// sSun := true ;
27727: LD_ADDR_EXP 86
27731: PUSH
27732: LD_INT 1
27734: ST_TO_ADDR
// if p3 = 106 then
27735: LD_VAR 0 3
27739: PUSH
27740: LD_INT 106
27742: EQUAL
27743: IFFALSE 27753
// sTiger := true ;
27745: LD_ADDR_EXP 82
27749: PUSH
27750: LD_INT 1
27752: ST_TO_ADDR
// if p3 = 107 then
27753: LD_VAR 0 3
27757: PUSH
27758: LD_INT 107
27760: EQUAL
27761: IFFALSE 27771
// sBomb := true ;
27763: LD_ADDR_EXP 83
27767: PUSH
27768: LD_INT 1
27770: ST_TO_ADDR
// if p3 = 108 then
27771: LD_VAR 0 3
27775: PUSH
27776: LD_INT 108
27778: EQUAL
27779: IFFALSE 27789
// sWound := true ;
27781: LD_ADDR_EXP 91
27785: PUSH
27786: LD_INT 1
27788: ST_TO_ADDR
// if p3 = 109 then
27789: LD_VAR 0 3
27793: PUSH
27794: LD_INT 109
27796: EQUAL
27797: IFFALSE 27807
// sBetray := true ;
27799: LD_ADDR_EXP 95
27803: PUSH
27804: LD_INT 1
27806: ST_TO_ADDR
// if p3 = 110 then
27807: LD_VAR 0 3
27811: PUSH
27812: LD_INT 110
27814: EQUAL
27815: IFFALSE 27825
// sContamin := true ;
27817: LD_ADDR_EXP 96
27821: PUSH
27822: LD_INT 1
27824: ST_TO_ADDR
// if p3 = 111 then
27825: LD_VAR 0 3
27829: PUSH
27830: LD_INT 111
27832: EQUAL
27833: IFFALSE 27843
// sOil := true ;
27835: LD_ADDR_EXP 98
27839: PUSH
27840: LD_INT 1
27842: ST_TO_ADDR
// if p3 = 112 then
27843: LD_VAR 0 3
27847: PUSH
27848: LD_INT 112
27850: EQUAL
27851: IFFALSE 27861
// sStu := true ;
27853: LD_ADDR_EXP 102
27857: PUSH
27858: LD_INT 1
27860: ST_TO_ADDR
// if p3 = 113 then
27861: LD_VAR 0 3
27865: PUSH
27866: LD_INT 113
27868: EQUAL
27869: IFFALSE 27879
// sBazooka := true ;
27871: LD_ADDR_EXP 105
27875: PUSH
27876: LD_INT 1
27878: ST_TO_ADDR
// if p3 = 114 then
27879: LD_VAR 0 3
27883: PUSH
27884: LD_INT 114
27886: EQUAL
27887: IFFALSE 27897
// sMortar := true ;
27889: LD_ADDR_EXP 106
27893: PUSH
27894: LD_INT 1
27896: ST_TO_ADDR
// if p3 = 115 then
27897: LD_VAR 0 3
27901: PUSH
27902: LD_INT 115
27904: EQUAL
27905: IFFALSE 27915
// sRanger := true ;
27907: LD_ADDR_EXP 116
27911: PUSH
27912: LD_INT 1
27914: ST_TO_ADDR
// end ; if p2 = 101 then
27915: LD_VAR 0 2
27919: PUSH
27920: LD_INT 101
27922: EQUAL
27923: IFFALSE 28126
// begin case p3 of 1 :
27925: LD_VAR 0 3
27929: PUSH
27930: LD_INT 1
27932: DOUBLE
27933: EQUAL
27934: IFTRUE 27938
27936: GO 27945
27938: POP
// hHackUnlimitedResources ; 2 :
27939: CALL 38220 0 0
27943: GO 28126
27945: LD_INT 2
27947: DOUBLE
27948: EQUAL
27949: IFTRUE 27953
27951: GO 27960
27953: POP
// hHackSetLevel10 ; 3 :
27954: CALL 38353 0 0
27958: GO 28126
27960: LD_INT 3
27962: DOUBLE
27963: EQUAL
27964: IFTRUE 27968
27966: GO 27975
27968: POP
// hHackSetLevel10YourUnits ; 4 :
27969: CALL 38438 0 0
27973: GO 28126
27975: LD_INT 4
27977: DOUBLE
27978: EQUAL
27979: IFTRUE 27983
27981: GO 28005
27983: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
27984: LD_VAR 0 4
27988: PPUSH
27989: LD_VAR 0 5
27993: PPUSH
27994: LD_VAR 0 6
27998: PPUSH
27999: CALL 38528 0 3
28003: GO 28126
28005: LD_INT 5
28007: DOUBLE
28008: EQUAL
28009: IFTRUE 28013
28011: GO 28020
28013: POP
// hHackSpawnVehicle ; 6 :
28014: CALL 38589 0 0
28018: GO 28126
28020: LD_INT 6
28022: DOUBLE
28023: EQUAL
28024: IFTRUE 28028
28026: GO 28035
28028: POP
// hHackInvincible ; 7 :
28029: CALL 39135 0 0
28033: GO 28126
28035: LD_INT 7
28037: DOUBLE
28038: EQUAL
28039: IFTRUE 28043
28041: GO 28050
28043: POP
// hHackInvisible ; 8 :
28044: CALL 39246 0 0
28048: GO 28126
28050: LD_INT 8
28052: DOUBLE
28053: EQUAL
28054: IFTRUE 28058
28056: GO 28065
28058: POP
// hHackChangeYourSide ; 9 :
28059: CALL 39303 0 0
28063: GO 28126
28065: LD_INT 9
28067: DOUBLE
28068: EQUAL
28069: IFTRUE 28073
28071: GO 28080
28073: POP
// hHackChangeUnitSide ; 10 :
28074: CALL 39345 0 0
28078: GO 28126
28080: LD_INT 10
28082: DOUBLE
28083: EQUAL
28084: IFTRUE 28088
28086: GO 28095
28088: POP
// hHackFog ; 11 :
28089: CALL 39446 0 0
28093: GO 28126
28095: LD_INT 11
28097: DOUBLE
28098: EQUAL
28099: IFTRUE 28103
28101: GO 28110
28103: POP
// hHackApeman ; 12 :
28104: CALL 39461 0 0
28108: GO 28126
28110: LD_INT 12
28112: DOUBLE
28113: EQUAL
28114: IFTRUE 28118
28116: GO 28125
28118: POP
// hHackBoom ; end ;
28119: CALL 39546 0 0
28123: GO 28126
28125: POP
// end ; end ;
28126: PPOPN 6
28128: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
28129: GO 28131
28131: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28132: LD_STRING initStreamRollete();
28134: PPUSH
28135: CALL_OW 559
// InitStreamMode ;
28139: CALL 28148 0 0
// DefineStreamItems ( ) ;
28143: CALL 28588 0 0
// end ;
28147: END
// function InitStreamMode ; begin
28148: LD_INT 0
28150: PPUSH
// streamModeActive := false ;
28151: LD_ADDR_EXP 63
28155: PUSH
28156: LD_INT 0
28158: ST_TO_ADDR
// normalCounter := 36 ;
28159: LD_ADDR_EXP 64
28163: PUSH
28164: LD_INT 36
28166: ST_TO_ADDR
// hardcoreCounter := 16 ;
28167: LD_ADDR_EXP 65
28171: PUSH
28172: LD_INT 16
28174: ST_TO_ADDR
// sRocket := false ;
28175: LD_ADDR_EXP 68
28179: PUSH
28180: LD_INT 0
28182: ST_TO_ADDR
// sSpeed := false ;
28183: LD_ADDR_EXP 67
28187: PUSH
28188: LD_INT 0
28190: ST_TO_ADDR
// sEngine := false ;
28191: LD_ADDR_EXP 69
28195: PUSH
28196: LD_INT 0
28198: ST_TO_ADDR
// sSpec := false ;
28199: LD_ADDR_EXP 66
28203: PUSH
28204: LD_INT 0
28206: ST_TO_ADDR
// sLevel := false ;
28207: LD_ADDR_EXP 70
28211: PUSH
28212: LD_INT 0
28214: ST_TO_ADDR
// sArmoury := false ;
28215: LD_ADDR_EXP 71
28219: PUSH
28220: LD_INT 0
28222: ST_TO_ADDR
// sRadar := false ;
28223: LD_ADDR_EXP 72
28227: PUSH
28228: LD_INT 0
28230: ST_TO_ADDR
// sBunker := false ;
28231: LD_ADDR_EXP 73
28235: PUSH
28236: LD_INT 0
28238: ST_TO_ADDR
// sHack := false ;
28239: LD_ADDR_EXP 74
28243: PUSH
28244: LD_INT 0
28246: ST_TO_ADDR
// sFire := false ;
28247: LD_ADDR_EXP 75
28251: PUSH
28252: LD_INT 0
28254: ST_TO_ADDR
// sRefresh := false ;
28255: LD_ADDR_EXP 76
28259: PUSH
28260: LD_INT 0
28262: ST_TO_ADDR
// sExp := false ;
28263: LD_ADDR_EXP 77
28267: PUSH
28268: LD_INT 0
28270: ST_TO_ADDR
// sDepot := false ;
28271: LD_ADDR_EXP 78
28275: PUSH
28276: LD_INT 0
28278: ST_TO_ADDR
// sFlag := false ;
28279: LD_ADDR_EXP 79
28283: PUSH
28284: LD_INT 0
28286: ST_TO_ADDR
// sKamikadze := false ;
28287: LD_ADDR_EXP 87
28291: PUSH
28292: LD_INT 0
28294: ST_TO_ADDR
// sTroll := false ;
28295: LD_ADDR_EXP 88
28299: PUSH
28300: LD_INT 0
28302: ST_TO_ADDR
// sSlow := false ;
28303: LD_ADDR_EXP 89
28307: PUSH
28308: LD_INT 0
28310: ST_TO_ADDR
// sLack := false ;
28311: LD_ADDR_EXP 90
28315: PUSH
28316: LD_INT 0
28318: ST_TO_ADDR
// sTank := false ;
28319: LD_ADDR_EXP 92
28323: PUSH
28324: LD_INT 0
28326: ST_TO_ADDR
// sRemote := false ;
28327: LD_ADDR_EXP 93
28331: PUSH
28332: LD_INT 0
28334: ST_TO_ADDR
// sPowell := false ;
28335: LD_ADDR_EXP 94
28339: PUSH
28340: LD_INT 0
28342: ST_TO_ADDR
// sTeleport := false ;
28343: LD_ADDR_EXP 97
28347: PUSH
28348: LD_INT 0
28350: ST_TO_ADDR
// sOilTower := false ;
28351: LD_ADDR_EXP 99
28355: PUSH
28356: LD_INT 0
28358: ST_TO_ADDR
// sShovel := false ;
28359: LD_ADDR_EXP 100
28363: PUSH
28364: LD_INT 0
28366: ST_TO_ADDR
// sSheik := false ;
28367: LD_ADDR_EXP 101
28371: PUSH
28372: LD_INT 0
28374: ST_TO_ADDR
// sEarthquake := false ;
28375: LD_ADDR_EXP 103
28379: PUSH
28380: LD_INT 0
28382: ST_TO_ADDR
// sAI := false ;
28383: LD_ADDR_EXP 104
28387: PUSH
28388: LD_INT 0
28390: ST_TO_ADDR
// sCargo := false ;
28391: LD_ADDR_EXP 107
28395: PUSH
28396: LD_INT 0
28398: ST_TO_ADDR
// sDLaser := false ;
28399: LD_ADDR_EXP 108
28403: PUSH
28404: LD_INT 0
28406: ST_TO_ADDR
// sExchange := false ;
28407: LD_ADDR_EXP 109
28411: PUSH
28412: LD_INT 0
28414: ST_TO_ADDR
// sFac := false ;
28415: LD_ADDR_EXP 110
28419: PUSH
28420: LD_INT 0
28422: ST_TO_ADDR
// sPower := false ;
28423: LD_ADDR_EXP 111
28427: PUSH
28428: LD_INT 0
28430: ST_TO_ADDR
// sRandom := false ;
28431: LD_ADDR_EXP 112
28435: PUSH
28436: LD_INT 0
28438: ST_TO_ADDR
// sShield := false ;
28439: LD_ADDR_EXP 113
28443: PUSH
28444: LD_INT 0
28446: ST_TO_ADDR
// sTime := false ;
28447: LD_ADDR_EXP 114
28451: PUSH
28452: LD_INT 0
28454: ST_TO_ADDR
// sTools := false ;
28455: LD_ADDR_EXP 115
28459: PUSH
28460: LD_INT 0
28462: ST_TO_ADDR
// sSold := false ;
28463: LD_ADDR_EXP 80
28467: PUSH
28468: LD_INT 0
28470: ST_TO_ADDR
// sDiff := false ;
28471: LD_ADDR_EXP 81
28475: PUSH
28476: LD_INT 0
28478: ST_TO_ADDR
// sFog := false ;
28479: LD_ADDR_EXP 84
28483: PUSH
28484: LD_INT 0
28486: ST_TO_ADDR
// sReset := false ;
28487: LD_ADDR_EXP 85
28491: PUSH
28492: LD_INT 0
28494: ST_TO_ADDR
// sSun := false ;
28495: LD_ADDR_EXP 86
28499: PUSH
28500: LD_INT 0
28502: ST_TO_ADDR
// sTiger := false ;
28503: LD_ADDR_EXP 82
28507: PUSH
28508: LD_INT 0
28510: ST_TO_ADDR
// sBomb := false ;
28511: LD_ADDR_EXP 83
28515: PUSH
28516: LD_INT 0
28518: ST_TO_ADDR
// sWound := false ;
28519: LD_ADDR_EXP 91
28523: PUSH
28524: LD_INT 0
28526: ST_TO_ADDR
// sBetray := false ;
28527: LD_ADDR_EXP 95
28531: PUSH
28532: LD_INT 0
28534: ST_TO_ADDR
// sContamin := false ;
28535: LD_ADDR_EXP 96
28539: PUSH
28540: LD_INT 0
28542: ST_TO_ADDR
// sOil := false ;
28543: LD_ADDR_EXP 98
28547: PUSH
28548: LD_INT 0
28550: ST_TO_ADDR
// sStu := false ;
28551: LD_ADDR_EXP 102
28555: PUSH
28556: LD_INT 0
28558: ST_TO_ADDR
// sBazooka := false ;
28559: LD_ADDR_EXP 105
28563: PUSH
28564: LD_INT 0
28566: ST_TO_ADDR
// sMortar := false ;
28567: LD_ADDR_EXP 106
28571: PUSH
28572: LD_INT 0
28574: ST_TO_ADDR
// sRanger := false ;
28575: LD_ADDR_EXP 116
28579: PUSH
28580: LD_INT 0
28582: ST_TO_ADDR
// end ;
28583: LD_VAR 0 1
28587: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
28588: LD_INT 0
28590: PPUSH
28591: PPUSH
28592: PPUSH
28593: PPUSH
28594: PPUSH
// result := [ ] ;
28595: LD_ADDR_VAR 0 1
28599: PUSH
28600: EMPTY
28601: ST_TO_ADDR
// if campaign_id = 1 then
28602: LD_OWVAR 69
28606: PUSH
28607: LD_INT 1
28609: EQUAL
28610: IFFALSE 31548
// begin case mission_number of 1 :
28612: LD_OWVAR 70
28616: PUSH
28617: LD_INT 1
28619: DOUBLE
28620: EQUAL
28621: IFTRUE 28625
28623: GO 28689
28625: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
28626: LD_ADDR_VAR 0 1
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: LD_INT 4
28636: PUSH
28637: LD_INT 11
28639: PUSH
28640: LD_INT 12
28642: PUSH
28643: LD_INT 15
28645: PUSH
28646: LD_INT 16
28648: PUSH
28649: LD_INT 22
28651: PUSH
28652: LD_INT 23
28654: PUSH
28655: LD_INT 26
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 101
28671: PUSH
28672: LD_INT 102
28674: PUSH
28675: LD_INT 106
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: ST_TO_ADDR
28687: GO 31546
28689: LD_INT 2
28691: DOUBLE
28692: EQUAL
28693: IFTRUE 28697
28695: GO 28769
28697: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
28698: LD_ADDR_VAR 0 1
28702: PUSH
28703: LD_INT 2
28705: PUSH
28706: LD_INT 4
28708: PUSH
28709: LD_INT 11
28711: PUSH
28712: LD_INT 12
28714: PUSH
28715: LD_INT 15
28717: PUSH
28718: LD_INT 16
28720: PUSH
28721: LD_INT 22
28723: PUSH
28724: LD_INT 23
28726: PUSH
28727: LD_INT 26
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 101
28743: PUSH
28744: LD_INT 102
28746: PUSH
28747: LD_INT 105
28749: PUSH
28750: LD_INT 106
28752: PUSH
28753: LD_INT 108
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: ST_TO_ADDR
28767: GO 31546
28769: LD_INT 3
28771: DOUBLE
28772: EQUAL
28773: IFTRUE 28777
28775: GO 28853
28777: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
28778: LD_ADDR_VAR 0 1
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: LD_INT 4
28788: PUSH
28789: LD_INT 5
28791: PUSH
28792: LD_INT 11
28794: PUSH
28795: LD_INT 12
28797: PUSH
28798: LD_INT 15
28800: PUSH
28801: LD_INT 16
28803: PUSH
28804: LD_INT 22
28806: PUSH
28807: LD_INT 26
28809: PUSH
28810: LD_INT 36
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 101
28827: PUSH
28828: LD_INT 102
28830: PUSH
28831: LD_INT 105
28833: PUSH
28834: LD_INT 106
28836: PUSH
28837: LD_INT 108
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: ST_TO_ADDR
28851: GO 31546
28853: LD_INT 4
28855: DOUBLE
28856: EQUAL
28857: IFTRUE 28861
28859: GO 28945
28861: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
28862: LD_ADDR_VAR 0 1
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: LD_INT 4
28872: PUSH
28873: LD_INT 5
28875: PUSH
28876: LD_INT 8
28878: PUSH
28879: LD_INT 11
28881: PUSH
28882: LD_INT 12
28884: PUSH
28885: LD_INT 15
28887: PUSH
28888: LD_INT 16
28890: PUSH
28891: LD_INT 22
28893: PUSH
28894: LD_INT 23
28896: PUSH
28897: LD_INT 26
28899: PUSH
28900: LD_INT 36
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 101
28919: PUSH
28920: LD_INT 102
28922: PUSH
28923: LD_INT 105
28925: PUSH
28926: LD_INT 106
28928: PUSH
28929: LD_INT 108
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: ST_TO_ADDR
28943: GO 31546
28945: LD_INT 5
28947: DOUBLE
28948: EQUAL
28949: IFTRUE 28953
28951: GO 29053
28953: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
28954: LD_ADDR_VAR 0 1
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 4
28964: PUSH
28965: LD_INT 5
28967: PUSH
28968: LD_INT 6
28970: PUSH
28971: LD_INT 8
28973: PUSH
28974: LD_INT 11
28976: PUSH
28977: LD_INT 12
28979: PUSH
28980: LD_INT 15
28982: PUSH
28983: LD_INT 16
28985: PUSH
28986: LD_INT 22
28988: PUSH
28989: LD_INT 23
28991: PUSH
28992: LD_INT 25
28994: PUSH
28995: LD_INT 26
28997: PUSH
28998: LD_INT 36
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 101
29019: PUSH
29020: LD_INT 102
29022: PUSH
29023: LD_INT 105
29025: PUSH
29026: LD_INT 106
29028: PUSH
29029: LD_INT 108
29031: PUSH
29032: LD_INT 109
29034: PUSH
29035: LD_INT 112
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: ST_TO_ADDR
29051: GO 31546
29053: LD_INT 6
29055: DOUBLE
29056: EQUAL
29057: IFTRUE 29061
29059: GO 29181
29061: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
29062: LD_ADDR_VAR 0 1
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: LD_INT 4
29072: PUSH
29073: LD_INT 5
29075: PUSH
29076: LD_INT 6
29078: PUSH
29079: LD_INT 8
29081: PUSH
29082: LD_INT 11
29084: PUSH
29085: LD_INT 12
29087: PUSH
29088: LD_INT 15
29090: PUSH
29091: LD_INT 16
29093: PUSH
29094: LD_INT 20
29096: PUSH
29097: LD_INT 21
29099: PUSH
29100: LD_INT 22
29102: PUSH
29103: LD_INT 23
29105: PUSH
29106: LD_INT 25
29108: PUSH
29109: LD_INT 26
29111: PUSH
29112: LD_INT 30
29114: PUSH
29115: LD_INT 31
29117: PUSH
29118: LD_INT 32
29120: PUSH
29121: LD_INT 36
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 101
29147: PUSH
29148: LD_INT 102
29150: PUSH
29151: LD_INT 105
29153: PUSH
29154: LD_INT 106
29156: PUSH
29157: LD_INT 108
29159: PUSH
29160: LD_INT 109
29162: PUSH
29163: LD_INT 112
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: ST_TO_ADDR
29179: GO 31546
29181: LD_INT 7
29183: DOUBLE
29184: EQUAL
29185: IFTRUE 29189
29187: GO 29289
29189: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
29190: LD_ADDR_VAR 0 1
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: LD_INT 4
29200: PUSH
29201: LD_INT 5
29203: PUSH
29204: LD_INT 7
29206: PUSH
29207: LD_INT 11
29209: PUSH
29210: LD_INT 12
29212: PUSH
29213: LD_INT 15
29215: PUSH
29216: LD_INT 16
29218: PUSH
29219: LD_INT 20
29221: PUSH
29222: LD_INT 21
29224: PUSH
29225: LD_INT 22
29227: PUSH
29228: LD_INT 23
29230: PUSH
29231: LD_INT 25
29233: PUSH
29234: LD_INT 26
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 101
29255: PUSH
29256: LD_INT 102
29258: PUSH
29259: LD_INT 103
29261: PUSH
29262: LD_INT 105
29264: PUSH
29265: LD_INT 106
29267: PUSH
29268: LD_INT 108
29270: PUSH
29271: LD_INT 112
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: ST_TO_ADDR
29287: GO 31546
29289: LD_INT 8
29291: DOUBLE
29292: EQUAL
29293: IFTRUE 29297
29295: GO 29425
29297: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
29298: LD_ADDR_VAR 0 1
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: LD_INT 4
29308: PUSH
29309: LD_INT 5
29311: PUSH
29312: LD_INT 6
29314: PUSH
29315: LD_INT 7
29317: PUSH
29318: LD_INT 8
29320: PUSH
29321: LD_INT 11
29323: PUSH
29324: LD_INT 12
29326: PUSH
29327: LD_INT 15
29329: PUSH
29330: LD_INT 16
29332: PUSH
29333: LD_INT 20
29335: PUSH
29336: LD_INT 21
29338: PUSH
29339: LD_INT 22
29341: PUSH
29342: LD_INT 23
29344: PUSH
29345: LD_INT 25
29347: PUSH
29348: LD_INT 26
29350: PUSH
29351: LD_INT 30
29353: PUSH
29354: LD_INT 31
29356: PUSH
29357: LD_INT 32
29359: PUSH
29360: LD_INT 36
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 101
29387: PUSH
29388: LD_INT 102
29390: PUSH
29391: LD_INT 103
29393: PUSH
29394: LD_INT 105
29396: PUSH
29397: LD_INT 106
29399: PUSH
29400: LD_INT 108
29402: PUSH
29403: LD_INT 109
29405: PUSH
29406: LD_INT 112
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: ST_TO_ADDR
29423: GO 31546
29425: LD_INT 9
29427: DOUBLE
29428: EQUAL
29429: IFTRUE 29433
29431: GO 29569
29433: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
29434: LD_ADDR_VAR 0 1
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: LD_INT 4
29444: PUSH
29445: LD_INT 5
29447: PUSH
29448: LD_INT 6
29450: PUSH
29451: LD_INT 7
29453: PUSH
29454: LD_INT 8
29456: PUSH
29457: LD_INT 11
29459: PUSH
29460: LD_INT 12
29462: PUSH
29463: LD_INT 15
29465: PUSH
29466: LD_INT 16
29468: PUSH
29469: LD_INT 20
29471: PUSH
29472: LD_INT 21
29474: PUSH
29475: LD_INT 22
29477: PUSH
29478: LD_INT 23
29480: PUSH
29481: LD_INT 25
29483: PUSH
29484: LD_INT 26
29486: PUSH
29487: LD_INT 28
29489: PUSH
29490: LD_INT 30
29492: PUSH
29493: LD_INT 31
29495: PUSH
29496: LD_INT 32
29498: PUSH
29499: LD_INT 36
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 101
29527: PUSH
29528: LD_INT 102
29530: PUSH
29531: LD_INT 103
29533: PUSH
29534: LD_INT 105
29536: PUSH
29537: LD_INT 106
29539: PUSH
29540: LD_INT 108
29542: PUSH
29543: LD_INT 109
29545: PUSH
29546: LD_INT 112
29548: PUSH
29549: LD_INT 114
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: ST_TO_ADDR
29567: GO 31546
29569: LD_INT 10
29571: DOUBLE
29572: EQUAL
29573: IFTRUE 29577
29575: GO 29761
29577: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
29578: LD_ADDR_VAR 0 1
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: LD_INT 4
29588: PUSH
29589: LD_INT 5
29591: PUSH
29592: LD_INT 6
29594: PUSH
29595: LD_INT 7
29597: PUSH
29598: LD_INT 8
29600: PUSH
29601: LD_INT 9
29603: PUSH
29604: LD_INT 10
29606: PUSH
29607: LD_INT 11
29609: PUSH
29610: LD_INT 12
29612: PUSH
29613: LD_INT 13
29615: PUSH
29616: LD_INT 14
29618: PUSH
29619: LD_INT 15
29621: PUSH
29622: LD_INT 16
29624: PUSH
29625: LD_INT 17
29627: PUSH
29628: LD_INT 18
29630: PUSH
29631: LD_INT 19
29633: PUSH
29634: LD_INT 20
29636: PUSH
29637: LD_INT 21
29639: PUSH
29640: LD_INT 22
29642: PUSH
29643: LD_INT 23
29645: PUSH
29646: LD_INT 24
29648: PUSH
29649: LD_INT 25
29651: PUSH
29652: LD_INT 26
29654: PUSH
29655: LD_INT 28
29657: PUSH
29658: LD_INT 30
29660: PUSH
29661: LD_INT 31
29663: PUSH
29664: LD_INT 32
29666: PUSH
29667: LD_INT 36
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 101
29703: PUSH
29704: LD_INT 102
29706: PUSH
29707: LD_INT 103
29709: PUSH
29710: LD_INT 104
29712: PUSH
29713: LD_INT 105
29715: PUSH
29716: LD_INT 106
29718: PUSH
29719: LD_INT 107
29721: PUSH
29722: LD_INT 108
29724: PUSH
29725: LD_INT 109
29727: PUSH
29728: LD_INT 110
29730: PUSH
29731: LD_INT 111
29733: PUSH
29734: LD_INT 112
29736: PUSH
29737: LD_INT 114
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: ST_TO_ADDR
29759: GO 31546
29761: LD_INT 11
29763: DOUBLE
29764: EQUAL
29765: IFTRUE 29769
29767: GO 29961
29769: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
29770: LD_ADDR_VAR 0 1
29774: PUSH
29775: LD_INT 2
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: LD_INT 4
29783: PUSH
29784: LD_INT 5
29786: PUSH
29787: LD_INT 6
29789: PUSH
29790: LD_INT 7
29792: PUSH
29793: LD_INT 8
29795: PUSH
29796: LD_INT 9
29798: PUSH
29799: LD_INT 10
29801: PUSH
29802: LD_INT 11
29804: PUSH
29805: LD_INT 12
29807: PUSH
29808: LD_INT 13
29810: PUSH
29811: LD_INT 14
29813: PUSH
29814: LD_INT 15
29816: PUSH
29817: LD_INT 16
29819: PUSH
29820: LD_INT 17
29822: PUSH
29823: LD_INT 18
29825: PUSH
29826: LD_INT 19
29828: PUSH
29829: LD_INT 20
29831: PUSH
29832: LD_INT 21
29834: PUSH
29835: LD_INT 22
29837: PUSH
29838: LD_INT 23
29840: PUSH
29841: LD_INT 24
29843: PUSH
29844: LD_INT 25
29846: PUSH
29847: LD_INT 26
29849: PUSH
29850: LD_INT 28
29852: PUSH
29853: LD_INT 30
29855: PUSH
29856: LD_INT 31
29858: PUSH
29859: LD_INT 32
29861: PUSH
29862: LD_INT 34
29864: PUSH
29865: LD_INT 36
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 101
29903: PUSH
29904: LD_INT 102
29906: PUSH
29907: LD_INT 103
29909: PUSH
29910: LD_INT 104
29912: PUSH
29913: LD_INT 105
29915: PUSH
29916: LD_INT 106
29918: PUSH
29919: LD_INT 107
29921: PUSH
29922: LD_INT 108
29924: PUSH
29925: LD_INT 109
29927: PUSH
29928: LD_INT 110
29930: PUSH
29931: LD_INT 111
29933: PUSH
29934: LD_INT 112
29936: PUSH
29937: LD_INT 114
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: ST_TO_ADDR
29959: GO 31546
29961: LD_INT 12
29963: DOUBLE
29964: EQUAL
29965: IFTRUE 29969
29967: GO 30177
29969: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
29970: LD_ADDR_VAR 0 1
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 2
29980: PUSH
29981: LD_INT 3
29983: PUSH
29984: LD_INT 4
29986: PUSH
29987: LD_INT 5
29989: PUSH
29990: LD_INT 6
29992: PUSH
29993: LD_INT 7
29995: PUSH
29996: LD_INT 8
29998: PUSH
29999: LD_INT 9
30001: PUSH
30002: LD_INT 10
30004: PUSH
30005: LD_INT 11
30007: PUSH
30008: LD_INT 12
30010: PUSH
30011: LD_INT 13
30013: PUSH
30014: LD_INT 14
30016: PUSH
30017: LD_INT 15
30019: PUSH
30020: LD_INT 16
30022: PUSH
30023: LD_INT 17
30025: PUSH
30026: LD_INT 18
30028: PUSH
30029: LD_INT 19
30031: PUSH
30032: LD_INT 20
30034: PUSH
30035: LD_INT 21
30037: PUSH
30038: LD_INT 22
30040: PUSH
30041: LD_INT 23
30043: PUSH
30044: LD_INT 24
30046: PUSH
30047: LD_INT 25
30049: PUSH
30050: LD_INT 26
30052: PUSH
30053: LD_INT 27
30055: PUSH
30056: LD_INT 28
30058: PUSH
30059: LD_INT 30
30061: PUSH
30062: LD_INT 31
30064: PUSH
30065: LD_INT 32
30067: PUSH
30068: LD_INT 33
30070: PUSH
30071: LD_INT 34
30073: PUSH
30074: LD_INT 36
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 101
30115: PUSH
30116: LD_INT 102
30118: PUSH
30119: LD_INT 103
30121: PUSH
30122: LD_INT 104
30124: PUSH
30125: LD_INT 105
30127: PUSH
30128: LD_INT 106
30130: PUSH
30131: LD_INT 107
30133: PUSH
30134: LD_INT 108
30136: PUSH
30137: LD_INT 109
30139: PUSH
30140: LD_INT 110
30142: PUSH
30143: LD_INT 111
30145: PUSH
30146: LD_INT 112
30148: PUSH
30149: LD_INT 113
30151: PUSH
30152: LD_INT 114
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: ST_TO_ADDR
30175: GO 31546
30177: LD_INT 13
30179: DOUBLE
30180: EQUAL
30181: IFTRUE 30185
30183: GO 30381
30185: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
30186: LD_ADDR_VAR 0 1
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: LD_INT 2
30196: PUSH
30197: LD_INT 3
30199: PUSH
30200: LD_INT 4
30202: PUSH
30203: LD_INT 5
30205: PUSH
30206: LD_INT 8
30208: PUSH
30209: LD_INT 9
30211: PUSH
30212: LD_INT 10
30214: PUSH
30215: LD_INT 11
30217: PUSH
30218: LD_INT 12
30220: PUSH
30221: LD_INT 14
30223: PUSH
30224: LD_INT 15
30226: PUSH
30227: LD_INT 16
30229: PUSH
30230: LD_INT 17
30232: PUSH
30233: LD_INT 18
30235: PUSH
30236: LD_INT 19
30238: PUSH
30239: LD_INT 20
30241: PUSH
30242: LD_INT 21
30244: PUSH
30245: LD_INT 22
30247: PUSH
30248: LD_INT 23
30250: PUSH
30251: LD_INT 24
30253: PUSH
30254: LD_INT 25
30256: PUSH
30257: LD_INT 26
30259: PUSH
30260: LD_INT 27
30262: PUSH
30263: LD_INT 28
30265: PUSH
30266: LD_INT 30
30268: PUSH
30269: LD_INT 31
30271: PUSH
30272: LD_INT 32
30274: PUSH
30275: LD_INT 33
30277: PUSH
30278: LD_INT 34
30280: PUSH
30281: LD_INT 36
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 101
30319: PUSH
30320: LD_INT 102
30322: PUSH
30323: LD_INT 103
30325: PUSH
30326: LD_INT 104
30328: PUSH
30329: LD_INT 105
30331: PUSH
30332: LD_INT 106
30334: PUSH
30335: LD_INT 107
30337: PUSH
30338: LD_INT 108
30340: PUSH
30341: LD_INT 109
30343: PUSH
30344: LD_INT 110
30346: PUSH
30347: LD_INT 111
30349: PUSH
30350: LD_INT 112
30352: PUSH
30353: LD_INT 113
30355: PUSH
30356: LD_INT 114
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: ST_TO_ADDR
30379: GO 31546
30381: LD_INT 14
30383: DOUBLE
30384: EQUAL
30385: IFTRUE 30389
30387: GO 30601
30389: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
30390: LD_ADDR_VAR 0 1
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: LD_INT 4
30406: PUSH
30407: LD_INT 5
30409: PUSH
30410: LD_INT 6
30412: PUSH
30413: LD_INT 7
30415: PUSH
30416: LD_INT 8
30418: PUSH
30419: LD_INT 9
30421: PUSH
30422: LD_INT 10
30424: PUSH
30425: LD_INT 11
30427: PUSH
30428: LD_INT 12
30430: PUSH
30431: LD_INT 13
30433: PUSH
30434: LD_INT 14
30436: PUSH
30437: LD_INT 15
30439: PUSH
30440: LD_INT 16
30442: PUSH
30443: LD_INT 17
30445: PUSH
30446: LD_INT 18
30448: PUSH
30449: LD_INT 19
30451: PUSH
30452: LD_INT 20
30454: PUSH
30455: LD_INT 21
30457: PUSH
30458: LD_INT 22
30460: PUSH
30461: LD_INT 23
30463: PUSH
30464: LD_INT 24
30466: PUSH
30467: LD_INT 25
30469: PUSH
30470: LD_INT 26
30472: PUSH
30473: LD_INT 27
30475: PUSH
30476: LD_INT 28
30478: PUSH
30479: LD_INT 29
30481: PUSH
30482: LD_INT 30
30484: PUSH
30485: LD_INT 31
30487: PUSH
30488: LD_INT 32
30490: PUSH
30491: LD_INT 33
30493: PUSH
30494: LD_INT 34
30496: PUSH
30497: LD_INT 36
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 101
30539: PUSH
30540: LD_INT 102
30542: PUSH
30543: LD_INT 103
30545: PUSH
30546: LD_INT 104
30548: PUSH
30549: LD_INT 105
30551: PUSH
30552: LD_INT 106
30554: PUSH
30555: LD_INT 107
30557: PUSH
30558: LD_INT 108
30560: PUSH
30561: LD_INT 109
30563: PUSH
30564: LD_INT 110
30566: PUSH
30567: LD_INT 111
30569: PUSH
30570: LD_INT 112
30572: PUSH
30573: LD_INT 113
30575: PUSH
30576: LD_INT 114
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: ST_TO_ADDR
30599: GO 31546
30601: LD_INT 15
30603: DOUBLE
30604: EQUAL
30605: IFTRUE 30609
30607: GO 30821
30609: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
30610: LD_ADDR_VAR 0 1
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: LD_INT 4
30626: PUSH
30627: LD_INT 5
30629: PUSH
30630: LD_INT 6
30632: PUSH
30633: LD_INT 7
30635: PUSH
30636: LD_INT 8
30638: PUSH
30639: LD_INT 9
30641: PUSH
30642: LD_INT 10
30644: PUSH
30645: LD_INT 11
30647: PUSH
30648: LD_INT 12
30650: PUSH
30651: LD_INT 13
30653: PUSH
30654: LD_INT 14
30656: PUSH
30657: LD_INT 15
30659: PUSH
30660: LD_INT 16
30662: PUSH
30663: LD_INT 17
30665: PUSH
30666: LD_INT 18
30668: PUSH
30669: LD_INT 19
30671: PUSH
30672: LD_INT 20
30674: PUSH
30675: LD_INT 21
30677: PUSH
30678: LD_INT 22
30680: PUSH
30681: LD_INT 23
30683: PUSH
30684: LD_INT 24
30686: PUSH
30687: LD_INT 25
30689: PUSH
30690: LD_INT 26
30692: PUSH
30693: LD_INT 27
30695: PUSH
30696: LD_INT 28
30698: PUSH
30699: LD_INT 29
30701: PUSH
30702: LD_INT 30
30704: PUSH
30705: LD_INT 31
30707: PUSH
30708: LD_INT 32
30710: PUSH
30711: LD_INT 33
30713: PUSH
30714: LD_INT 34
30716: PUSH
30717: LD_INT 36
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 101
30759: PUSH
30760: LD_INT 102
30762: PUSH
30763: LD_INT 103
30765: PUSH
30766: LD_INT 104
30768: PUSH
30769: LD_INT 105
30771: PUSH
30772: LD_INT 106
30774: PUSH
30775: LD_INT 107
30777: PUSH
30778: LD_INT 108
30780: PUSH
30781: LD_INT 109
30783: PUSH
30784: LD_INT 110
30786: PUSH
30787: LD_INT 111
30789: PUSH
30790: LD_INT 112
30792: PUSH
30793: LD_INT 113
30795: PUSH
30796: LD_INT 114
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: ST_TO_ADDR
30819: GO 31546
30821: LD_INT 16
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30829
30827: GO 30953
30829: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
30830: LD_ADDR_VAR 0 1
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: LD_INT 4
30840: PUSH
30841: LD_INT 5
30843: PUSH
30844: LD_INT 7
30846: PUSH
30847: LD_INT 11
30849: PUSH
30850: LD_INT 12
30852: PUSH
30853: LD_INT 15
30855: PUSH
30856: LD_INT 16
30858: PUSH
30859: LD_INT 20
30861: PUSH
30862: LD_INT 21
30864: PUSH
30865: LD_INT 22
30867: PUSH
30868: LD_INT 23
30870: PUSH
30871: LD_INT 25
30873: PUSH
30874: LD_INT 26
30876: PUSH
30877: LD_INT 30
30879: PUSH
30880: LD_INT 31
30882: PUSH
30883: LD_INT 32
30885: PUSH
30886: LD_INT 33
30888: PUSH
30889: LD_INT 34
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 101
30915: PUSH
30916: LD_INT 102
30918: PUSH
30919: LD_INT 103
30921: PUSH
30922: LD_INT 106
30924: PUSH
30925: LD_INT 108
30927: PUSH
30928: LD_INT 112
30930: PUSH
30931: LD_INT 113
30933: PUSH
30934: LD_INT 114
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: ST_TO_ADDR
30951: GO 31546
30953: LD_INT 17
30955: DOUBLE
30956: EQUAL
30957: IFTRUE 30961
30959: GO 31173
30961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
30962: LD_ADDR_VAR 0 1
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: LD_INT 3
30975: PUSH
30976: LD_INT 4
30978: PUSH
30979: LD_INT 5
30981: PUSH
30982: LD_INT 6
30984: PUSH
30985: LD_INT 7
30987: PUSH
30988: LD_INT 8
30990: PUSH
30991: LD_INT 9
30993: PUSH
30994: LD_INT 10
30996: PUSH
30997: LD_INT 11
30999: PUSH
31000: LD_INT 12
31002: PUSH
31003: LD_INT 13
31005: PUSH
31006: LD_INT 14
31008: PUSH
31009: LD_INT 15
31011: PUSH
31012: LD_INT 16
31014: PUSH
31015: LD_INT 17
31017: PUSH
31018: LD_INT 18
31020: PUSH
31021: LD_INT 19
31023: PUSH
31024: LD_INT 20
31026: PUSH
31027: LD_INT 21
31029: PUSH
31030: LD_INT 22
31032: PUSH
31033: LD_INT 23
31035: PUSH
31036: LD_INT 24
31038: PUSH
31039: LD_INT 25
31041: PUSH
31042: LD_INT 26
31044: PUSH
31045: LD_INT 27
31047: PUSH
31048: LD_INT 28
31050: PUSH
31051: LD_INT 29
31053: PUSH
31054: LD_INT 30
31056: PUSH
31057: LD_INT 31
31059: PUSH
31060: LD_INT 32
31062: PUSH
31063: LD_INT 33
31065: PUSH
31066: LD_INT 34
31068: PUSH
31069: LD_INT 36
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 101
31111: PUSH
31112: LD_INT 102
31114: PUSH
31115: LD_INT 103
31117: PUSH
31118: LD_INT 104
31120: PUSH
31121: LD_INT 105
31123: PUSH
31124: LD_INT 106
31126: PUSH
31127: LD_INT 107
31129: PUSH
31130: LD_INT 108
31132: PUSH
31133: LD_INT 109
31135: PUSH
31136: LD_INT 110
31138: PUSH
31139: LD_INT 111
31141: PUSH
31142: LD_INT 112
31144: PUSH
31145: LD_INT 113
31147: PUSH
31148: LD_INT 114
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: ST_TO_ADDR
31171: GO 31546
31173: LD_INT 18
31175: DOUBLE
31176: EQUAL
31177: IFTRUE 31181
31179: GO 31317
31181: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
31182: LD_ADDR_VAR 0 1
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: LD_INT 4
31192: PUSH
31193: LD_INT 5
31195: PUSH
31196: LD_INT 7
31198: PUSH
31199: LD_INT 11
31201: PUSH
31202: LD_INT 12
31204: PUSH
31205: LD_INT 15
31207: PUSH
31208: LD_INT 16
31210: PUSH
31211: LD_INT 20
31213: PUSH
31214: LD_INT 21
31216: PUSH
31217: LD_INT 22
31219: PUSH
31220: LD_INT 23
31222: PUSH
31223: LD_INT 25
31225: PUSH
31226: LD_INT 26
31228: PUSH
31229: LD_INT 30
31231: PUSH
31232: LD_INT 31
31234: PUSH
31235: LD_INT 32
31237: PUSH
31238: LD_INT 33
31240: PUSH
31241: LD_INT 34
31243: PUSH
31244: LD_INT 35
31246: PUSH
31247: LD_INT 36
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 101
31275: PUSH
31276: LD_INT 102
31278: PUSH
31279: LD_INT 103
31281: PUSH
31282: LD_INT 106
31284: PUSH
31285: LD_INT 108
31287: PUSH
31288: LD_INT 112
31290: PUSH
31291: LD_INT 113
31293: PUSH
31294: LD_INT 114
31296: PUSH
31297: LD_INT 115
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: ST_TO_ADDR
31315: GO 31546
31317: LD_INT 19
31319: DOUBLE
31320: EQUAL
31321: IFTRUE 31325
31323: GO 31545
31325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
31326: LD_ADDR_VAR 0 1
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: LD_INT 3
31339: PUSH
31340: LD_INT 4
31342: PUSH
31343: LD_INT 5
31345: PUSH
31346: LD_INT 6
31348: PUSH
31349: LD_INT 7
31351: PUSH
31352: LD_INT 8
31354: PUSH
31355: LD_INT 9
31357: PUSH
31358: LD_INT 10
31360: PUSH
31361: LD_INT 11
31363: PUSH
31364: LD_INT 12
31366: PUSH
31367: LD_INT 13
31369: PUSH
31370: LD_INT 14
31372: PUSH
31373: LD_INT 15
31375: PUSH
31376: LD_INT 16
31378: PUSH
31379: LD_INT 17
31381: PUSH
31382: LD_INT 18
31384: PUSH
31385: LD_INT 19
31387: PUSH
31388: LD_INT 20
31390: PUSH
31391: LD_INT 21
31393: PUSH
31394: LD_INT 22
31396: PUSH
31397: LD_INT 23
31399: PUSH
31400: LD_INT 24
31402: PUSH
31403: LD_INT 25
31405: PUSH
31406: LD_INT 26
31408: PUSH
31409: LD_INT 27
31411: PUSH
31412: LD_INT 28
31414: PUSH
31415: LD_INT 29
31417: PUSH
31418: LD_INT 30
31420: PUSH
31421: LD_INT 31
31423: PUSH
31424: LD_INT 32
31426: PUSH
31427: LD_INT 33
31429: PUSH
31430: LD_INT 34
31432: PUSH
31433: LD_INT 35
31435: PUSH
31436: LD_INT 36
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 101
31479: PUSH
31480: LD_INT 102
31482: PUSH
31483: LD_INT 103
31485: PUSH
31486: LD_INT 104
31488: PUSH
31489: LD_INT 105
31491: PUSH
31492: LD_INT 106
31494: PUSH
31495: LD_INT 107
31497: PUSH
31498: LD_INT 108
31500: PUSH
31501: LD_INT 109
31503: PUSH
31504: LD_INT 110
31506: PUSH
31507: LD_INT 111
31509: PUSH
31510: LD_INT 112
31512: PUSH
31513: LD_INT 113
31515: PUSH
31516: LD_INT 114
31518: PUSH
31519: LD_INT 115
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: ST_TO_ADDR
31543: GO 31546
31545: POP
// end else
31546: GO 31765
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
31548: LD_ADDR_VAR 0 1
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: LD_INT 3
31561: PUSH
31562: LD_INT 4
31564: PUSH
31565: LD_INT 5
31567: PUSH
31568: LD_INT 6
31570: PUSH
31571: LD_INT 7
31573: PUSH
31574: LD_INT 8
31576: PUSH
31577: LD_INT 9
31579: PUSH
31580: LD_INT 10
31582: PUSH
31583: LD_INT 11
31585: PUSH
31586: LD_INT 12
31588: PUSH
31589: LD_INT 13
31591: PUSH
31592: LD_INT 14
31594: PUSH
31595: LD_INT 15
31597: PUSH
31598: LD_INT 16
31600: PUSH
31601: LD_INT 17
31603: PUSH
31604: LD_INT 18
31606: PUSH
31607: LD_INT 19
31609: PUSH
31610: LD_INT 20
31612: PUSH
31613: LD_INT 21
31615: PUSH
31616: LD_INT 22
31618: PUSH
31619: LD_INT 23
31621: PUSH
31622: LD_INT 24
31624: PUSH
31625: LD_INT 25
31627: PUSH
31628: LD_INT 26
31630: PUSH
31631: LD_INT 27
31633: PUSH
31634: LD_INT 28
31636: PUSH
31637: LD_INT 29
31639: PUSH
31640: LD_INT 30
31642: PUSH
31643: LD_INT 31
31645: PUSH
31646: LD_INT 32
31648: PUSH
31649: LD_INT 33
31651: PUSH
31652: LD_INT 34
31654: PUSH
31655: LD_INT 35
31657: PUSH
31658: LD_INT 36
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 101
31701: PUSH
31702: LD_INT 102
31704: PUSH
31705: LD_INT 103
31707: PUSH
31708: LD_INT 104
31710: PUSH
31711: LD_INT 105
31713: PUSH
31714: LD_INT 106
31716: PUSH
31717: LD_INT 107
31719: PUSH
31720: LD_INT 108
31722: PUSH
31723: LD_INT 109
31725: PUSH
31726: LD_INT 110
31728: PUSH
31729: LD_INT 111
31731: PUSH
31732: LD_INT 112
31734: PUSH
31735: LD_INT 113
31737: PUSH
31738: LD_INT 114
31740: PUSH
31741: LD_INT 115
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: ST_TO_ADDR
// if result then
31765: LD_VAR 0 1
31769: IFFALSE 32058
// begin normal :=  ;
31771: LD_ADDR_VAR 0 3
31775: PUSH
31776: LD_STRING 
31778: ST_TO_ADDR
// hardcore :=  ;
31779: LD_ADDR_VAR 0 4
31783: PUSH
31784: LD_STRING 
31786: ST_TO_ADDR
// for i = 1 to normalCounter do
31787: LD_ADDR_VAR 0 5
31791: PUSH
31792: DOUBLE
31793: LD_INT 1
31795: DEC
31796: ST_TO_ADDR
31797: LD_EXP 64
31801: PUSH
31802: FOR_TO
31803: IFFALSE 31904
// begin tmp := 0 ;
31805: LD_ADDR_VAR 0 2
31809: PUSH
31810: LD_STRING 0
31812: ST_TO_ADDR
// if result [ 1 ] then
31813: LD_VAR 0 1
31817: PUSH
31818: LD_INT 1
31820: ARRAY
31821: IFFALSE 31886
// if result [ 1 ] [ 1 ] = i then
31823: LD_VAR 0 1
31827: PUSH
31828: LD_INT 1
31830: ARRAY
31831: PUSH
31832: LD_INT 1
31834: ARRAY
31835: PUSH
31836: LD_VAR 0 5
31840: EQUAL
31841: IFFALSE 31886
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
31843: LD_ADDR_VAR 0 1
31847: PUSH
31848: LD_VAR 0 1
31852: PPUSH
31853: LD_INT 1
31855: PPUSH
31856: LD_VAR 0 1
31860: PUSH
31861: LD_INT 1
31863: ARRAY
31864: PPUSH
31865: LD_INT 1
31867: PPUSH
31868: CALL_OW 3
31872: PPUSH
31873: CALL_OW 1
31877: ST_TO_ADDR
// tmp := 1 ;
31878: LD_ADDR_VAR 0 2
31882: PUSH
31883: LD_STRING 1
31885: ST_TO_ADDR
// end ; normal := normal & tmp ;
31886: LD_ADDR_VAR 0 3
31890: PUSH
31891: LD_VAR 0 3
31895: PUSH
31896: LD_VAR 0 2
31900: STR
31901: ST_TO_ADDR
// end ;
31902: GO 31802
31904: POP
31905: POP
// for i = 1 to hardcoreCounter do
31906: LD_ADDR_VAR 0 5
31910: PUSH
31911: DOUBLE
31912: LD_INT 1
31914: DEC
31915: ST_TO_ADDR
31916: LD_EXP 65
31920: PUSH
31921: FOR_TO
31922: IFFALSE 32027
// begin tmp := 0 ;
31924: LD_ADDR_VAR 0 2
31928: PUSH
31929: LD_STRING 0
31931: ST_TO_ADDR
// if result [ 2 ] then
31932: LD_VAR 0 1
31936: PUSH
31937: LD_INT 2
31939: ARRAY
31940: IFFALSE 32009
// if result [ 2 ] [ 1 ] = 100 + i then
31942: LD_VAR 0 1
31946: PUSH
31947: LD_INT 2
31949: ARRAY
31950: PUSH
31951: LD_INT 1
31953: ARRAY
31954: PUSH
31955: LD_INT 100
31957: PUSH
31958: LD_VAR 0 5
31962: PLUS
31963: EQUAL
31964: IFFALSE 32009
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
31966: LD_ADDR_VAR 0 1
31970: PUSH
31971: LD_VAR 0 1
31975: PPUSH
31976: LD_INT 2
31978: PPUSH
31979: LD_VAR 0 1
31983: PUSH
31984: LD_INT 2
31986: ARRAY
31987: PPUSH
31988: LD_INT 1
31990: PPUSH
31991: CALL_OW 3
31995: PPUSH
31996: CALL_OW 1
32000: ST_TO_ADDR
// tmp := 1 ;
32001: LD_ADDR_VAR 0 2
32005: PUSH
32006: LD_STRING 1
32008: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32009: LD_ADDR_VAR 0 4
32013: PUSH
32014: LD_VAR 0 4
32018: PUSH
32019: LD_VAR 0 2
32023: STR
32024: ST_TO_ADDR
// end ;
32025: GO 31921
32027: POP
32028: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32029: LD_STRING getStreamItemsFromMission("
32031: PUSH
32032: LD_VAR 0 3
32036: STR
32037: PUSH
32038: LD_STRING ","
32040: STR
32041: PUSH
32042: LD_VAR 0 4
32046: STR
32047: PUSH
32048: LD_STRING ")
32050: STR
32051: PPUSH
32052: CALL_OW 559
// end else
32056: GO 32065
// ToLua ( getStreamItemsFromMission("","") ) ;
32058: LD_STRING getStreamItemsFromMission("","")
32060: PPUSH
32061: CALL_OW 559
// end ;
32065: LD_VAR 0 1
32069: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32070: LD_EXP 63
32074: PUSH
32075: LD_EXP 68
32079: AND
32080: IFFALSE 32204
32082: GO 32084
32084: DISABLE
32085: LD_INT 0
32087: PPUSH
32088: PPUSH
// begin enable ;
32089: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32090: LD_ADDR_VAR 0 2
32094: PUSH
32095: LD_INT 22
32097: PUSH
32098: LD_OWVAR 2
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: LD_INT 34
32112: PUSH
32113: LD_INT 7
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 34
32122: PUSH
32123: LD_INT 45
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 34
32132: PUSH
32133: LD_INT 28
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 34
32142: PUSH
32143: LD_INT 47
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PPUSH
32161: CALL_OW 69
32165: ST_TO_ADDR
// if not tmp then
32166: LD_VAR 0 2
32170: NOT
32171: IFFALSE 32175
// exit ;
32173: GO 32204
// for i in tmp do
32175: LD_ADDR_VAR 0 1
32179: PUSH
32180: LD_VAR 0 2
32184: PUSH
32185: FOR_IN
32186: IFFALSE 32202
// begin SetLives ( i , 0 ) ;
32188: LD_VAR 0 1
32192: PPUSH
32193: LD_INT 0
32195: PPUSH
32196: CALL_OW 234
// end ;
32200: GO 32185
32202: POP
32203: POP
// end ;
32204: PPOPN 2
32206: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
32207: LD_EXP 63
32211: PUSH
32212: LD_EXP 69
32216: AND
32217: IFFALSE 32301
32219: GO 32221
32221: DISABLE
32222: LD_INT 0
32224: PPUSH
32225: PPUSH
// begin enable ;
32226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
32227: LD_ADDR_VAR 0 2
32231: PUSH
32232: LD_INT 22
32234: PUSH
32235: LD_OWVAR 2
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 32
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PPUSH
32258: CALL_OW 69
32262: ST_TO_ADDR
// if not tmp then
32263: LD_VAR 0 2
32267: NOT
32268: IFFALSE 32272
// exit ;
32270: GO 32301
// for i in tmp do
32272: LD_ADDR_VAR 0 1
32276: PUSH
32277: LD_VAR 0 2
32281: PUSH
32282: FOR_IN
32283: IFFALSE 32299
// begin SetLives ( i , 0 ) ;
32285: LD_VAR 0 1
32289: PPUSH
32290: LD_INT 0
32292: PPUSH
32293: CALL_OW 234
// end ;
32297: GO 32282
32299: POP
32300: POP
// end ;
32301: PPOPN 2
32303: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
32304: LD_EXP 63
32308: PUSH
32309: LD_EXP 66
32313: AND
32314: IFFALSE 32407
32316: GO 32318
32318: DISABLE
32319: LD_INT 0
32321: PPUSH
// begin enable ;
32322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
32323: LD_ADDR_VAR 0 1
32327: PUSH
32328: LD_INT 22
32330: PUSH
32331: LD_OWVAR 2
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: PUSH
32343: LD_INT 25
32345: PUSH
32346: LD_INT 5
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 25
32355: PUSH
32356: LD_INT 9
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 25
32365: PUSH
32366: LD_INT 8
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PPUSH
32383: CALL_OW 69
32387: PUSH
32388: FOR_IN
32389: IFFALSE 32405
// begin SetClass ( i , 1 ) ;
32391: LD_VAR 0 1
32395: PPUSH
32396: LD_INT 1
32398: PPUSH
32399: CALL_OW 336
// end ;
32403: GO 32388
32405: POP
32406: POP
// end ;
32407: PPOPN 1
32409: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
32410: LD_EXP 63
32414: PUSH
32415: LD_EXP 67
32419: AND
32420: PUSH
32421: LD_OWVAR 65
32425: PUSH
32426: LD_INT 7
32428: LESS
32429: AND
32430: IFFALSE 32444
32432: GO 32434
32434: DISABLE
// begin enable ;
32435: ENABLE
// game_speed := 7 ;
32436: LD_ADDR_OWVAR 65
32440: PUSH
32441: LD_INT 7
32443: ST_TO_ADDR
// end ;
32444: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
32445: LD_EXP 63
32449: PUSH
32450: LD_EXP 70
32454: AND
32455: IFFALSE 32657
32457: GO 32459
32459: DISABLE
32460: LD_INT 0
32462: PPUSH
32463: PPUSH
32464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32465: LD_ADDR_VAR 0 3
32469: PUSH
32470: LD_INT 81
32472: PUSH
32473: LD_OWVAR 2
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 21
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PPUSH
32496: CALL_OW 69
32500: ST_TO_ADDR
// if not tmp then
32501: LD_VAR 0 3
32505: NOT
32506: IFFALSE 32510
// exit ;
32508: GO 32657
// if tmp > 5 then
32510: LD_VAR 0 3
32514: PUSH
32515: LD_INT 5
32517: GREATER
32518: IFFALSE 32530
// k := 5 else
32520: LD_ADDR_VAR 0 2
32524: PUSH
32525: LD_INT 5
32527: ST_TO_ADDR
32528: GO 32540
// k := tmp ;
32530: LD_ADDR_VAR 0 2
32534: PUSH
32535: LD_VAR 0 3
32539: ST_TO_ADDR
// for i := 1 to k do
32540: LD_ADDR_VAR 0 1
32544: PUSH
32545: DOUBLE
32546: LD_INT 1
32548: DEC
32549: ST_TO_ADDR
32550: LD_VAR 0 2
32554: PUSH
32555: FOR_TO
32556: IFFALSE 32655
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
32558: LD_VAR 0 3
32562: PUSH
32563: LD_VAR 0 1
32567: ARRAY
32568: PPUSH
32569: LD_VAR 0 1
32573: PUSH
32574: LD_INT 4
32576: MOD
32577: PUSH
32578: LD_INT 1
32580: PLUS
32581: PPUSH
32582: CALL_OW 259
32586: PUSH
32587: LD_INT 10
32589: LESS
32590: IFFALSE 32653
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
32592: LD_VAR 0 3
32596: PUSH
32597: LD_VAR 0 1
32601: ARRAY
32602: PPUSH
32603: LD_VAR 0 1
32607: PUSH
32608: LD_INT 4
32610: MOD
32611: PUSH
32612: LD_INT 1
32614: PLUS
32615: PPUSH
32616: LD_VAR 0 3
32620: PUSH
32621: LD_VAR 0 1
32625: ARRAY
32626: PPUSH
32627: LD_VAR 0 1
32631: PUSH
32632: LD_INT 4
32634: MOD
32635: PUSH
32636: LD_INT 1
32638: PLUS
32639: PPUSH
32640: CALL_OW 259
32644: PUSH
32645: LD_INT 1
32647: PLUS
32648: PPUSH
32649: CALL_OW 237
32653: GO 32555
32655: POP
32656: POP
// end ;
32657: PPOPN 3
32659: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
32660: LD_EXP 63
32664: PUSH
32665: LD_EXP 71
32669: AND
32670: IFFALSE 32690
32672: GO 32674
32674: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
32675: LD_INT 4
32677: PPUSH
32678: LD_OWVAR 2
32682: PPUSH
32683: LD_INT 0
32685: PPUSH
32686: CALL_OW 324
32690: END
// every 0 0$1 trigger StreamModeActive and sShovel do
32691: LD_EXP 63
32695: PUSH
32696: LD_EXP 100
32700: AND
32701: IFFALSE 32721
32703: GO 32705
32705: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
32706: LD_INT 19
32708: PPUSH
32709: LD_OWVAR 2
32713: PPUSH
32714: LD_INT 0
32716: PPUSH
32717: CALL_OW 324
32721: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
32722: LD_EXP 63
32726: PUSH
32727: LD_EXP 72
32731: AND
32732: IFFALSE 32834
32734: GO 32736
32736: DISABLE
32737: LD_INT 0
32739: PPUSH
32740: PPUSH
// begin enable ;
32741: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
32742: LD_ADDR_VAR 0 2
32746: PUSH
32747: LD_INT 22
32749: PUSH
32750: LD_OWVAR 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 34
32764: PUSH
32765: LD_INT 11
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 34
32774: PUSH
32775: LD_INT 30
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PPUSH
32791: CALL_OW 69
32795: ST_TO_ADDR
// if not tmp then
32796: LD_VAR 0 2
32800: NOT
32801: IFFALSE 32805
// exit ;
32803: GO 32834
// for i in tmp do
32805: LD_ADDR_VAR 0 1
32809: PUSH
32810: LD_VAR 0 2
32814: PUSH
32815: FOR_IN
32816: IFFALSE 32832
// begin SetLives ( i , 0 ) ;
32818: LD_VAR 0 1
32822: PPUSH
32823: LD_INT 0
32825: PPUSH
32826: CALL_OW 234
// end ;
32830: GO 32815
32832: POP
32833: POP
// end ;
32834: PPOPN 2
32836: END
// every 0 0$1 trigger StreamModeActive and sBunker do
32837: LD_EXP 63
32841: PUSH
32842: LD_EXP 73
32846: AND
32847: IFFALSE 32867
32849: GO 32851
32851: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
32852: LD_INT 32
32854: PPUSH
32855: LD_OWVAR 2
32859: PPUSH
32860: LD_INT 0
32862: PPUSH
32863: CALL_OW 324
32867: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
32868: LD_EXP 63
32872: PUSH
32873: LD_EXP 74
32877: AND
32878: IFFALSE 33059
32880: GO 32882
32882: DISABLE
32883: LD_INT 0
32885: PPUSH
32886: PPUSH
32887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
32888: LD_ADDR_VAR 0 2
32892: PUSH
32893: LD_INT 22
32895: PUSH
32896: LD_OWVAR 2
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 33
32907: PUSH
32908: LD_INT 3
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PPUSH
32919: CALL_OW 69
32923: ST_TO_ADDR
// if not tmp then
32924: LD_VAR 0 2
32928: NOT
32929: IFFALSE 32933
// exit ;
32931: GO 33059
// side := 0 ;
32933: LD_ADDR_VAR 0 3
32937: PUSH
32938: LD_INT 0
32940: ST_TO_ADDR
// for i := 1 to 8 do
32941: LD_ADDR_VAR 0 1
32945: PUSH
32946: DOUBLE
32947: LD_INT 1
32949: DEC
32950: ST_TO_ADDR
32951: LD_INT 8
32953: PUSH
32954: FOR_TO
32955: IFFALSE 33003
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
32957: LD_OWVAR 2
32961: PUSH
32962: LD_VAR 0 1
32966: NONEQUAL
32967: PUSH
32968: LD_OWVAR 2
32972: PPUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 81
32982: PUSH
32983: LD_INT 2
32985: EQUAL
32986: AND
32987: IFFALSE 33001
// begin side := i ;
32989: LD_ADDR_VAR 0 3
32993: PUSH
32994: LD_VAR 0 1
32998: ST_TO_ADDR
// break ;
32999: GO 33003
// end ;
33001: GO 32954
33003: POP
33004: POP
// if not side then
33005: LD_VAR 0 3
33009: NOT
33010: IFFALSE 33014
// exit ;
33012: GO 33059
// for i := 1 to tmp do
33014: LD_ADDR_VAR 0 1
33018: PUSH
33019: DOUBLE
33020: LD_INT 1
33022: DEC
33023: ST_TO_ADDR
33024: LD_VAR 0 2
33028: PUSH
33029: FOR_TO
33030: IFFALSE 33057
// if Prob ( 60 ) then
33032: LD_INT 60
33034: PPUSH
33035: CALL_OW 13
33039: IFFALSE 33055
// SetSide ( i , side ) ;
33041: LD_VAR 0 1
33045: PPUSH
33046: LD_VAR 0 3
33050: PPUSH
33051: CALL_OW 235
33055: GO 33029
33057: POP
33058: POP
// end ;
33059: PPOPN 3
33061: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33062: LD_EXP 63
33066: PUSH
33067: LD_EXP 76
33071: AND
33072: IFFALSE 33191
33074: GO 33076
33076: DISABLE
33077: LD_INT 0
33079: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33080: LD_ADDR_VAR 0 1
33084: PUSH
33085: LD_INT 22
33087: PUSH
33088: LD_OWVAR 2
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 21
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 3
33109: PUSH
33110: LD_INT 23
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: PPUSH
33129: CALL_OW 69
33133: PUSH
33134: FOR_IN
33135: IFFALSE 33189
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33137: LD_VAR 0 1
33141: PPUSH
33142: CALL_OW 257
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: LD_INT 2
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: LD_INT 4
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: IN
33165: IFFALSE 33187
// SetClass ( un , rand ( 1 , 4 ) ) ;
33167: LD_VAR 0 1
33171: PPUSH
33172: LD_INT 1
33174: PPUSH
33175: LD_INT 4
33177: PPUSH
33178: CALL_OW 12
33182: PPUSH
33183: CALL_OW 336
33187: GO 33134
33189: POP
33190: POP
// end ;
33191: PPOPN 1
33193: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
33194: LD_EXP 63
33198: PUSH
33199: LD_EXP 75
33203: AND
33204: IFFALSE 33283
33206: GO 33208
33208: DISABLE
33209: LD_INT 0
33211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33212: LD_ADDR_VAR 0 1
33216: PUSH
33217: LD_INT 22
33219: PUSH
33220: LD_OWVAR 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 21
33231: PUSH
33232: LD_INT 3
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PPUSH
33243: CALL_OW 69
33247: ST_TO_ADDR
// if not tmp then
33248: LD_VAR 0 1
33252: NOT
33253: IFFALSE 33257
// exit ;
33255: GO 33283
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
33257: LD_VAR 0 1
33261: PUSH
33262: LD_INT 1
33264: PPUSH
33265: LD_VAR 0 1
33269: PPUSH
33270: CALL_OW 12
33274: ARRAY
33275: PPUSH
33276: LD_INT 100
33278: PPUSH
33279: CALL_OW 234
// end ;
33283: PPOPN 1
33285: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
33286: LD_EXP 63
33290: PUSH
33291: LD_EXP 77
33295: AND
33296: IFFALSE 33394
33298: GO 33300
33300: DISABLE
33301: LD_INT 0
33303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33304: LD_ADDR_VAR 0 1
33308: PUSH
33309: LD_INT 22
33311: PUSH
33312: LD_OWVAR 2
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 21
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PPUSH
33335: CALL_OW 69
33339: ST_TO_ADDR
// if not tmp then
33340: LD_VAR 0 1
33344: NOT
33345: IFFALSE 33349
// exit ;
33347: GO 33394
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
33349: LD_VAR 0 1
33353: PUSH
33354: LD_INT 1
33356: PPUSH
33357: LD_VAR 0 1
33361: PPUSH
33362: CALL_OW 12
33366: ARRAY
33367: PPUSH
33368: LD_INT 1
33370: PPUSH
33371: LD_INT 4
33373: PPUSH
33374: CALL_OW 12
33378: PPUSH
33379: LD_INT 3000
33381: PPUSH
33382: LD_INT 9000
33384: PPUSH
33385: CALL_OW 12
33389: PPUSH
33390: CALL_OW 492
// end ;
33394: PPOPN 1
33396: END
// every 0 0$1 trigger StreamModeActive and sDepot do
33397: LD_EXP 63
33401: PUSH
33402: LD_EXP 78
33406: AND
33407: IFFALSE 33427
33409: GO 33411
33411: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
33412: LD_INT 1
33414: PPUSH
33415: LD_OWVAR 2
33419: PPUSH
33420: LD_INT 0
33422: PPUSH
33423: CALL_OW 324
33427: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
33428: LD_EXP 63
33432: PUSH
33433: LD_EXP 79
33437: AND
33438: IFFALSE 33521
33440: GO 33442
33442: DISABLE
33443: LD_INT 0
33445: PPUSH
33446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33447: LD_ADDR_VAR 0 2
33451: PUSH
33452: LD_INT 22
33454: PUSH
33455: LD_OWVAR 2
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 21
33466: PUSH
33467: LD_INT 3
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PPUSH
33478: CALL_OW 69
33482: ST_TO_ADDR
// if not tmp then
33483: LD_VAR 0 2
33487: NOT
33488: IFFALSE 33492
// exit ;
33490: GO 33521
// for i in tmp do
33492: LD_ADDR_VAR 0 1
33496: PUSH
33497: LD_VAR 0 2
33501: PUSH
33502: FOR_IN
33503: IFFALSE 33519
// SetBLevel ( i , 10 ) ;
33505: LD_VAR 0 1
33509: PPUSH
33510: LD_INT 10
33512: PPUSH
33513: CALL_OW 241
33517: GO 33502
33519: POP
33520: POP
// end ;
33521: PPOPN 2
33523: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
33524: LD_EXP 63
33528: PUSH
33529: LD_EXP 80
33533: AND
33534: IFFALSE 33645
33536: GO 33538
33538: DISABLE
33539: LD_INT 0
33541: PPUSH
33542: PPUSH
33543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33544: LD_ADDR_VAR 0 3
33548: PUSH
33549: LD_INT 22
33551: PUSH
33552: LD_OWVAR 2
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 25
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PPUSH
33575: CALL_OW 69
33579: ST_TO_ADDR
// if not tmp then
33580: LD_VAR 0 3
33584: NOT
33585: IFFALSE 33589
// exit ;
33587: GO 33645
// un := tmp [ rand ( 1 , tmp ) ] ;
33589: LD_ADDR_VAR 0 2
33593: PUSH
33594: LD_VAR 0 3
33598: PUSH
33599: LD_INT 1
33601: PPUSH
33602: LD_VAR 0 3
33606: PPUSH
33607: CALL_OW 12
33611: ARRAY
33612: ST_TO_ADDR
// if Crawls ( un ) then
33613: LD_VAR 0 2
33617: PPUSH
33618: CALL_OW 318
33622: IFFALSE 33633
// ComWalk ( un ) ;
33624: LD_VAR 0 2
33628: PPUSH
33629: CALL_OW 138
// SetClass ( un , class_sniper ) ;
33633: LD_VAR 0 2
33637: PPUSH
33638: LD_INT 5
33640: PPUSH
33641: CALL_OW 336
// end ;
33645: PPOPN 3
33647: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
33648: LD_EXP 63
33652: PUSH
33653: LD_EXP 81
33657: AND
33658: PUSH
33659: LD_OWVAR 67
33663: PUSH
33664: LD_INT 3
33666: LESS
33667: AND
33668: IFFALSE 33687
33670: GO 33672
33672: DISABLE
// Difficulty := Difficulty + 1 ;
33673: LD_ADDR_OWVAR 67
33677: PUSH
33678: LD_OWVAR 67
33682: PUSH
33683: LD_INT 1
33685: PLUS
33686: ST_TO_ADDR
33687: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
33688: LD_EXP 63
33692: PUSH
33693: LD_EXP 82
33697: AND
33698: IFFALSE 33801
33700: GO 33702
33702: DISABLE
33703: LD_INT 0
33705: PPUSH
// begin for i := 1 to 5 do
33706: LD_ADDR_VAR 0 1
33710: PUSH
33711: DOUBLE
33712: LD_INT 1
33714: DEC
33715: ST_TO_ADDR
33716: LD_INT 5
33718: PUSH
33719: FOR_TO
33720: IFFALSE 33799
// begin uc_nation := nation_nature ;
33722: LD_ADDR_OWVAR 21
33726: PUSH
33727: LD_INT 0
33729: ST_TO_ADDR
// uc_side := 0 ;
33730: LD_ADDR_OWVAR 20
33734: PUSH
33735: LD_INT 0
33737: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
33738: LD_ADDR_OWVAR 29
33742: PUSH
33743: LD_INT 12
33745: PUSH
33746: LD_INT 12
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: ST_TO_ADDR
// hc_agressivity := 20 ;
33753: LD_ADDR_OWVAR 35
33757: PUSH
33758: LD_INT 20
33760: ST_TO_ADDR
// hc_class := class_tiger ;
33761: LD_ADDR_OWVAR 28
33765: PUSH
33766: LD_INT 14
33768: ST_TO_ADDR
// hc_gallery :=  ;
33769: LD_ADDR_OWVAR 33
33773: PUSH
33774: LD_STRING 
33776: ST_TO_ADDR
// hc_name :=  ;
33777: LD_ADDR_OWVAR 26
33781: PUSH
33782: LD_STRING 
33784: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
33785: CALL_OW 44
33789: PPUSH
33790: LD_INT 0
33792: PPUSH
33793: CALL_OW 51
// end ;
33797: GO 33719
33799: POP
33800: POP
// end ;
33801: PPOPN 1
33803: END
// every 0 0$1 trigger StreamModeActive and sBomb do
33804: LD_EXP 63
33808: PUSH
33809: LD_EXP 83
33813: AND
33814: IFFALSE 33823
33816: GO 33818
33818: DISABLE
// StreamSibBomb ;
33819: CALL 33824 0 0
33823: END
// export function StreamSibBomb ; var i , x , y ; begin
33824: LD_INT 0
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
// result := false ;
33830: LD_ADDR_VAR 0 1
33834: PUSH
33835: LD_INT 0
33837: ST_TO_ADDR
// for i := 1 to 16 do
33838: LD_ADDR_VAR 0 2
33842: PUSH
33843: DOUBLE
33844: LD_INT 1
33846: DEC
33847: ST_TO_ADDR
33848: LD_INT 16
33850: PUSH
33851: FOR_TO
33852: IFFALSE 34051
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33854: LD_ADDR_VAR 0 3
33858: PUSH
33859: LD_INT 10
33861: PUSH
33862: LD_INT 20
33864: PUSH
33865: LD_INT 30
33867: PUSH
33868: LD_INT 40
33870: PUSH
33871: LD_INT 50
33873: PUSH
33874: LD_INT 60
33876: PUSH
33877: LD_INT 70
33879: PUSH
33880: LD_INT 80
33882: PUSH
33883: LD_INT 90
33885: PUSH
33886: LD_INT 100
33888: PUSH
33889: LD_INT 110
33891: PUSH
33892: LD_INT 120
33894: PUSH
33895: LD_INT 130
33897: PUSH
33898: LD_INT 140
33900: PUSH
33901: LD_INT 150
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 1
33923: PPUSH
33924: LD_INT 15
33926: PPUSH
33927: CALL_OW 12
33931: ARRAY
33932: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33933: LD_ADDR_VAR 0 4
33937: PUSH
33938: LD_INT 10
33940: PUSH
33941: LD_INT 20
33943: PUSH
33944: LD_INT 30
33946: PUSH
33947: LD_INT 40
33949: PUSH
33950: LD_INT 50
33952: PUSH
33953: LD_INT 60
33955: PUSH
33956: LD_INT 70
33958: PUSH
33959: LD_INT 80
33961: PUSH
33962: LD_INT 90
33964: PUSH
33965: LD_INT 100
33967: PUSH
33968: LD_INT 110
33970: PUSH
33971: LD_INT 120
33973: PUSH
33974: LD_INT 130
33976: PUSH
33977: LD_INT 140
33979: PUSH
33980: LD_INT 150
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: PPUSH
34003: LD_INT 15
34005: PPUSH
34006: CALL_OW 12
34010: ARRAY
34011: ST_TO_ADDR
// if ValidHex ( x , y ) then
34012: LD_VAR 0 3
34016: PPUSH
34017: LD_VAR 0 4
34021: PPUSH
34022: CALL_OW 488
34026: IFFALSE 34049
// begin result := [ x , y ] ;
34028: LD_ADDR_VAR 0 1
34032: PUSH
34033: LD_VAR 0 3
34037: PUSH
34038: LD_VAR 0 4
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: ST_TO_ADDR
// break ;
34047: GO 34051
// end ; end ;
34049: GO 33851
34051: POP
34052: POP
// if result then
34053: LD_VAR 0 1
34057: IFFALSE 34117
// begin ToLua ( playSibBomb() ) ;
34059: LD_STRING playSibBomb()
34061: PPUSH
34062: CALL_OW 559
// wait ( 0 0$14 ) ;
34066: LD_INT 490
34068: PPUSH
34069: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34073: LD_VAR 0 1
34077: PUSH
34078: LD_INT 1
34080: ARRAY
34081: PPUSH
34082: LD_VAR 0 1
34086: PUSH
34087: LD_INT 2
34089: ARRAY
34090: PPUSH
34091: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34095: LD_VAR 0 1
34099: PUSH
34100: LD_INT 1
34102: ARRAY
34103: PPUSH
34104: LD_VAR 0 1
34108: PUSH
34109: LD_INT 2
34111: ARRAY
34112: PPUSH
34113: CALL_OW 429
// end ; end ;
34117: LD_VAR 0 1
34121: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34122: LD_EXP 63
34126: PUSH
34127: LD_EXP 85
34131: AND
34132: IFFALSE 34144
34134: GO 34136
34136: DISABLE
// YouLost (  ) ;
34137: LD_STRING 
34139: PPUSH
34140: CALL_OW 104
34144: END
// every 0 0$1 trigger StreamModeActive and sFog do
34145: LD_EXP 63
34149: PUSH
34150: LD_EXP 84
34154: AND
34155: IFFALSE 34169
34157: GO 34159
34159: DISABLE
// FogOff ( your_side ) ;
34160: LD_OWVAR 2
34164: PPUSH
34165: CALL_OW 344
34169: END
// every 0 0$1 trigger StreamModeActive and sSun do
34170: LD_EXP 63
34174: PUSH
34175: LD_EXP 86
34179: AND
34180: IFFALSE 34208
34182: GO 34184
34184: DISABLE
// begin solar_recharge_percent := 0 ;
34185: LD_ADDR_OWVAR 79
34189: PUSH
34190: LD_INT 0
34192: ST_TO_ADDR
// wait ( 5 5$00 ) ;
34193: LD_INT 10500
34195: PPUSH
34196: CALL_OW 67
// solar_recharge_percent := 100 ;
34200: LD_ADDR_OWVAR 79
34204: PUSH
34205: LD_INT 100
34207: ST_TO_ADDR
// end ;
34208: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
34209: LD_EXP 63
34213: PUSH
34214: LD_EXP 87
34218: AND
34219: IFFALSE 34458
34221: GO 34223
34223: DISABLE
34224: LD_INT 0
34226: PPUSH
34227: PPUSH
34228: PPUSH
// begin tmp := [ ] ;
34229: LD_ADDR_VAR 0 3
34233: PUSH
34234: EMPTY
34235: ST_TO_ADDR
// for i := 1 to 6 do
34236: LD_ADDR_VAR 0 1
34240: PUSH
34241: DOUBLE
34242: LD_INT 1
34244: DEC
34245: ST_TO_ADDR
34246: LD_INT 6
34248: PUSH
34249: FOR_TO
34250: IFFALSE 34355
// begin uc_nation := nation_nature ;
34252: LD_ADDR_OWVAR 21
34256: PUSH
34257: LD_INT 0
34259: ST_TO_ADDR
// uc_side := 0 ;
34260: LD_ADDR_OWVAR 20
34264: PUSH
34265: LD_INT 0
34267: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34268: LD_ADDR_OWVAR 29
34272: PUSH
34273: LD_INT 12
34275: PUSH
34276: LD_INT 12
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: ST_TO_ADDR
// hc_agressivity := 20 ;
34283: LD_ADDR_OWVAR 35
34287: PUSH
34288: LD_INT 20
34290: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
34291: LD_ADDR_OWVAR 28
34295: PUSH
34296: LD_INT 17
34298: ST_TO_ADDR
// hc_gallery :=  ;
34299: LD_ADDR_OWVAR 33
34303: PUSH
34304: LD_STRING 
34306: ST_TO_ADDR
// hc_name :=  ;
34307: LD_ADDR_OWVAR 26
34311: PUSH
34312: LD_STRING 
34314: ST_TO_ADDR
// un := CreateHuman ;
34315: LD_ADDR_VAR 0 2
34319: PUSH
34320: CALL_OW 44
34324: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
34325: LD_VAR 0 2
34329: PPUSH
34330: LD_INT 1
34332: PPUSH
34333: CALL_OW 51
// tmp := tmp ^ un ;
34337: LD_ADDR_VAR 0 3
34341: PUSH
34342: LD_VAR 0 3
34346: PUSH
34347: LD_VAR 0 2
34351: ADD
34352: ST_TO_ADDR
// end ;
34353: GO 34249
34355: POP
34356: POP
// repeat wait ( 0 0$1 ) ;
34357: LD_INT 35
34359: PPUSH
34360: CALL_OW 67
// for un in tmp do
34364: LD_ADDR_VAR 0 2
34368: PUSH
34369: LD_VAR 0 3
34373: PUSH
34374: FOR_IN
34375: IFFALSE 34449
// begin if IsDead ( un ) then
34377: LD_VAR 0 2
34381: PPUSH
34382: CALL_OW 301
34386: IFFALSE 34406
// begin tmp := tmp diff un ;
34388: LD_ADDR_VAR 0 3
34392: PUSH
34393: LD_VAR 0 3
34397: PUSH
34398: LD_VAR 0 2
34402: DIFF
34403: ST_TO_ADDR
// continue ;
34404: GO 34374
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
34406: LD_VAR 0 2
34410: PPUSH
34411: LD_INT 3
34413: PUSH
34414: LD_INT 22
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PPUSH
34428: CALL_OW 69
34432: PPUSH
34433: LD_VAR 0 2
34437: PPUSH
34438: CALL_OW 74
34442: PPUSH
34443: CALL_OW 115
// end ;
34447: GO 34374
34449: POP
34450: POP
// until not tmp ;
34451: LD_VAR 0 3
34455: NOT
34456: IFFALSE 34357
// end ;
34458: PPOPN 3
34460: END
// every 0 0$1 trigger StreamModeActive and sTroll do
34461: LD_EXP 63
34465: PUSH
34466: LD_EXP 88
34470: AND
34471: IFFALSE 34525
34473: GO 34475
34475: DISABLE
// begin ToLua ( displayTroll(); ) ;
34476: LD_STRING displayTroll();
34478: PPUSH
34479: CALL_OW 559
// wait ( 3 3$00 ) ;
34483: LD_INT 6300
34485: PPUSH
34486: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34490: LD_STRING hideTroll();
34492: PPUSH
34493: CALL_OW 559
// wait ( 1 1$00 ) ;
34497: LD_INT 2100
34499: PPUSH
34500: CALL_OW 67
// ToLua ( displayTroll(); ) ;
34504: LD_STRING displayTroll();
34506: PPUSH
34507: CALL_OW 559
// wait ( 1 1$00 ) ;
34511: LD_INT 2100
34513: PPUSH
34514: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34518: LD_STRING hideTroll();
34520: PPUSH
34521: CALL_OW 559
// end ;
34525: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
34526: LD_EXP 63
34530: PUSH
34531: LD_EXP 89
34535: AND
34536: IFFALSE 34599
34538: GO 34540
34540: DISABLE
34541: LD_INT 0
34543: PPUSH
// begin p := 0 ;
34544: LD_ADDR_VAR 0 1
34548: PUSH
34549: LD_INT 0
34551: ST_TO_ADDR
// repeat game_speed := 1 ;
34552: LD_ADDR_OWVAR 65
34556: PUSH
34557: LD_INT 1
34559: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34560: LD_INT 35
34562: PPUSH
34563: CALL_OW 67
// p := p + 1 ;
34567: LD_ADDR_VAR 0 1
34571: PUSH
34572: LD_VAR 0 1
34576: PUSH
34577: LD_INT 1
34579: PLUS
34580: ST_TO_ADDR
// until p >= 60 ;
34581: LD_VAR 0 1
34585: PUSH
34586: LD_INT 60
34588: GREATEREQUAL
34589: IFFALSE 34552
// game_speed := 4 ;
34591: LD_ADDR_OWVAR 65
34595: PUSH
34596: LD_INT 4
34598: ST_TO_ADDR
// end ;
34599: PPOPN 1
34601: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
34602: LD_EXP 63
34606: PUSH
34607: LD_EXP 90
34611: AND
34612: IFFALSE 34758
34614: GO 34616
34616: DISABLE
34617: LD_INT 0
34619: PPUSH
34620: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34621: LD_ADDR_VAR 0 1
34625: PUSH
34626: LD_INT 22
34628: PUSH
34629: LD_OWVAR 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: LD_INT 30
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 30
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: LIST
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PPUSH
34670: CALL_OW 69
34674: ST_TO_ADDR
// if not depot then
34675: LD_VAR 0 1
34679: NOT
34680: IFFALSE 34684
// exit ;
34682: GO 34758
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
34684: LD_ADDR_VAR 0 2
34688: PUSH
34689: LD_VAR 0 1
34693: PUSH
34694: LD_INT 1
34696: PPUSH
34697: LD_VAR 0 1
34701: PPUSH
34702: CALL_OW 12
34706: ARRAY
34707: PPUSH
34708: CALL_OW 274
34712: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
34713: LD_VAR 0 2
34717: PPUSH
34718: LD_INT 1
34720: PPUSH
34721: LD_INT 0
34723: PPUSH
34724: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
34728: LD_VAR 0 2
34732: PPUSH
34733: LD_INT 2
34735: PPUSH
34736: LD_INT 0
34738: PPUSH
34739: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
34743: LD_VAR 0 2
34747: PPUSH
34748: LD_INT 3
34750: PPUSH
34751: LD_INT 0
34753: PPUSH
34754: CALL_OW 277
// end ;
34758: PPOPN 2
34760: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
34761: LD_EXP 63
34765: PUSH
34766: LD_EXP 91
34770: AND
34771: IFFALSE 34868
34773: GO 34775
34775: DISABLE
34776: LD_INT 0
34778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34779: LD_ADDR_VAR 0 1
34783: PUSH
34784: LD_INT 22
34786: PUSH
34787: LD_OWVAR 2
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 21
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 3
34808: PUSH
34809: LD_INT 23
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: PPUSH
34828: CALL_OW 69
34832: ST_TO_ADDR
// if not tmp then
34833: LD_VAR 0 1
34837: NOT
34838: IFFALSE 34842
// exit ;
34840: GO 34868
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
34842: LD_VAR 0 1
34846: PUSH
34847: LD_INT 1
34849: PPUSH
34850: LD_VAR 0 1
34854: PPUSH
34855: CALL_OW 12
34859: ARRAY
34860: PPUSH
34861: LD_INT 200
34863: PPUSH
34864: CALL_OW 234
// end ;
34868: PPOPN 1
34870: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
34871: LD_EXP 63
34875: PUSH
34876: LD_EXP 92
34880: AND
34881: IFFALSE 34960
34883: GO 34885
34885: DISABLE
34886: LD_INT 0
34888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
34889: LD_ADDR_VAR 0 1
34893: PUSH
34894: LD_INT 22
34896: PUSH
34897: LD_OWVAR 2
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 21
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PPUSH
34920: CALL_OW 69
34924: ST_TO_ADDR
// if not tmp then
34925: LD_VAR 0 1
34929: NOT
34930: IFFALSE 34934
// exit ;
34932: GO 34960
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
34934: LD_VAR 0 1
34938: PUSH
34939: LD_INT 1
34941: PPUSH
34942: LD_VAR 0 1
34946: PPUSH
34947: CALL_OW 12
34951: ARRAY
34952: PPUSH
34953: LD_INT 60
34955: PPUSH
34956: CALL_OW 234
// end ;
34960: PPOPN 1
34962: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
34963: LD_EXP 63
34967: PUSH
34968: LD_EXP 93
34972: AND
34973: IFFALSE 35072
34975: GO 34977
34977: DISABLE
34978: LD_INT 0
34980: PPUSH
34981: PPUSH
// begin enable ;
34982: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
34983: LD_ADDR_VAR 0 1
34987: PUSH
34988: LD_INT 22
34990: PUSH
34991: LD_OWVAR 2
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 61
35002: PUSH
35003: EMPTY
35004: LIST
35005: PUSH
35006: LD_INT 33
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: PPUSH
35021: CALL_OW 69
35025: ST_TO_ADDR
// if not tmp then
35026: LD_VAR 0 1
35030: NOT
35031: IFFALSE 35035
// exit ;
35033: GO 35072
// for i in tmp do
35035: LD_ADDR_VAR 0 2
35039: PUSH
35040: LD_VAR 0 1
35044: PUSH
35045: FOR_IN
35046: IFFALSE 35070
// if IsControledBy ( i ) then
35048: LD_VAR 0 2
35052: PPUSH
35053: CALL_OW 312
35057: IFFALSE 35068
// ComUnlink ( i ) ;
35059: LD_VAR 0 2
35063: PPUSH
35064: CALL_OW 136
35068: GO 35045
35070: POP
35071: POP
// end ;
35072: PPOPN 2
35074: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35075: LD_EXP 63
35079: PUSH
35080: LD_EXP 94
35084: AND
35085: IFFALSE 35225
35087: GO 35089
35089: DISABLE
35090: LD_INT 0
35092: PPUSH
35093: PPUSH
// begin ToLua ( displayPowell(); ) ;
35094: LD_STRING displayPowell();
35096: PPUSH
35097: CALL_OW 559
// uc_side := 0 ;
35101: LD_ADDR_OWVAR 20
35105: PUSH
35106: LD_INT 0
35108: ST_TO_ADDR
// uc_nation := 2 ;
35109: LD_ADDR_OWVAR 21
35113: PUSH
35114: LD_INT 2
35116: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35117: LD_ADDR_OWVAR 37
35121: PUSH
35122: LD_INT 14
35124: ST_TO_ADDR
// vc_engine := engine_siberite ;
35125: LD_ADDR_OWVAR 39
35129: PUSH
35130: LD_INT 3
35132: ST_TO_ADDR
// vc_control := control_apeman ;
35133: LD_ADDR_OWVAR 38
35137: PUSH
35138: LD_INT 5
35140: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
35141: LD_ADDR_OWVAR 40
35145: PUSH
35146: LD_INT 29
35148: ST_TO_ADDR
// un := CreateVehicle ;
35149: LD_ADDR_VAR 0 2
35153: PUSH
35154: CALL_OW 45
35158: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35159: LD_VAR 0 2
35163: PPUSH
35164: LD_INT 1
35166: PPUSH
35167: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35171: LD_INT 35
35173: PPUSH
35174: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35178: LD_VAR 0 2
35182: PPUSH
35183: LD_INT 22
35185: PUSH
35186: LD_OWVAR 2
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PPUSH
35195: CALL_OW 69
35199: PPUSH
35200: LD_VAR 0 2
35204: PPUSH
35205: CALL_OW 74
35209: PPUSH
35210: CALL_OW 115
// until IsDead ( un ) ;
35214: LD_VAR 0 2
35218: PPUSH
35219: CALL_OW 301
35223: IFFALSE 35171
// end ;
35225: PPOPN 2
35227: END
// every 0 0$1 trigger StreamModeActive and sStu do
35228: LD_EXP 63
35232: PUSH
35233: LD_EXP 102
35237: AND
35238: IFFALSE 35254
35240: GO 35242
35242: DISABLE
// begin ToLua ( displayStucuk(); ) ;
35243: LD_STRING displayStucuk();
35245: PPUSH
35246: CALL_OW 559
// ResetFog ;
35250: CALL_OW 335
// end ;
35254: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
35255: LD_EXP 63
35259: PUSH
35260: LD_EXP 95
35264: AND
35265: IFFALSE 35406
35267: GO 35269
35269: DISABLE
35270: LD_INT 0
35272: PPUSH
35273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35274: LD_ADDR_VAR 0 2
35278: PUSH
35279: LD_INT 22
35281: PUSH
35282: LD_OWVAR 2
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 21
35293: PUSH
35294: LD_INT 1
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PPUSH
35305: CALL_OW 69
35309: ST_TO_ADDR
// if not tmp then
35310: LD_VAR 0 2
35314: NOT
35315: IFFALSE 35319
// exit ;
35317: GO 35406
// un := tmp [ rand ( 1 , tmp ) ] ;
35319: LD_ADDR_VAR 0 1
35323: PUSH
35324: LD_VAR 0 2
35328: PUSH
35329: LD_INT 1
35331: PPUSH
35332: LD_VAR 0 2
35336: PPUSH
35337: CALL_OW 12
35341: ARRAY
35342: ST_TO_ADDR
// SetSide ( un , 0 ) ;
35343: LD_VAR 0 1
35347: PPUSH
35348: LD_INT 0
35350: PPUSH
35351: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
35355: LD_VAR 0 1
35359: PPUSH
35360: LD_OWVAR 3
35364: PUSH
35365: LD_VAR 0 1
35369: DIFF
35370: PPUSH
35371: LD_VAR 0 1
35375: PPUSH
35376: CALL_OW 74
35380: PPUSH
35381: CALL_OW 115
// wait ( 0 0$20 ) ;
35385: LD_INT 700
35387: PPUSH
35388: CALL_OW 67
// SetSide ( un , your_side ) ;
35392: LD_VAR 0 1
35396: PPUSH
35397: LD_OWVAR 2
35401: PPUSH
35402: CALL_OW 235
// end ;
35406: PPOPN 2
35408: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
35409: LD_EXP 63
35413: PUSH
35414: LD_EXP 96
35418: AND
35419: IFFALSE 35525
35421: GO 35423
35423: DISABLE
35424: LD_INT 0
35426: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35427: LD_ADDR_VAR 0 1
35431: PUSH
35432: LD_INT 22
35434: PUSH
35435: LD_OWVAR 2
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: LD_INT 30
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 30
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: LIST
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PPUSH
35476: CALL_OW 69
35480: ST_TO_ADDR
// if not depot then
35481: LD_VAR 0 1
35485: NOT
35486: IFFALSE 35490
// exit ;
35488: GO 35525
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
35490: LD_VAR 0 1
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: PPUSH
35499: CALL_OW 250
35503: PPUSH
35504: LD_VAR 0 1
35508: PUSH
35509: LD_INT 1
35511: ARRAY
35512: PPUSH
35513: CALL_OW 251
35517: PPUSH
35518: LD_INT 70
35520: PPUSH
35521: CALL_OW 495
// end ;
35525: PPOPN 1
35527: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
35528: LD_EXP 63
35532: PUSH
35533: LD_EXP 97
35537: AND
35538: IFFALSE 35749
35540: GO 35542
35542: DISABLE
35543: LD_INT 0
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35550: LD_ADDR_VAR 0 5
35554: PUSH
35555: LD_INT 22
35557: PUSH
35558: LD_OWVAR 2
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 21
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PPUSH
35581: CALL_OW 69
35585: ST_TO_ADDR
// if not tmp then
35586: LD_VAR 0 5
35590: NOT
35591: IFFALSE 35595
// exit ;
35593: GO 35749
// for i in tmp do
35595: LD_ADDR_VAR 0 1
35599: PUSH
35600: LD_VAR 0 5
35604: PUSH
35605: FOR_IN
35606: IFFALSE 35747
// begin d := rand ( 0 , 5 ) ;
35608: LD_ADDR_VAR 0 4
35612: PUSH
35613: LD_INT 0
35615: PPUSH
35616: LD_INT 5
35618: PPUSH
35619: CALL_OW 12
35623: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
35624: LD_ADDR_VAR 0 2
35628: PUSH
35629: LD_VAR 0 1
35633: PPUSH
35634: CALL_OW 250
35638: PPUSH
35639: LD_VAR 0 4
35643: PPUSH
35644: LD_INT 3
35646: PPUSH
35647: LD_INT 12
35649: PPUSH
35650: CALL_OW 12
35654: PPUSH
35655: CALL_OW 272
35659: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
35660: LD_ADDR_VAR 0 3
35664: PUSH
35665: LD_VAR 0 1
35669: PPUSH
35670: CALL_OW 251
35674: PPUSH
35675: LD_VAR 0 4
35679: PPUSH
35680: LD_INT 3
35682: PPUSH
35683: LD_INT 12
35685: PPUSH
35686: CALL_OW 12
35690: PPUSH
35691: CALL_OW 273
35695: ST_TO_ADDR
// if ValidHex ( x , y ) then
35696: LD_VAR 0 2
35700: PPUSH
35701: LD_VAR 0 3
35705: PPUSH
35706: CALL_OW 488
35710: IFFALSE 35745
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
35712: LD_VAR 0 1
35716: PPUSH
35717: LD_VAR 0 2
35721: PPUSH
35722: LD_VAR 0 3
35726: PPUSH
35727: LD_INT 3
35729: PPUSH
35730: LD_INT 6
35732: PPUSH
35733: CALL_OW 12
35737: PPUSH
35738: LD_INT 1
35740: PPUSH
35741: CALL_OW 483
// end ;
35745: GO 35605
35747: POP
35748: POP
// end ;
35749: PPOPN 5
35751: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
35752: LD_EXP 63
35756: PUSH
35757: LD_EXP 98
35761: AND
35762: IFFALSE 35856
35764: GO 35766
35766: DISABLE
35767: LD_INT 0
35769: PPUSH
35770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
35771: LD_ADDR_VAR 0 2
35775: PUSH
35776: LD_INT 22
35778: PUSH
35779: LD_OWVAR 2
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 32
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 21
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: PPUSH
35813: CALL_OW 69
35817: ST_TO_ADDR
// if not tmp then
35818: LD_VAR 0 2
35822: NOT
35823: IFFALSE 35827
// exit ;
35825: GO 35856
// for i in tmp do
35827: LD_ADDR_VAR 0 1
35831: PUSH
35832: LD_VAR 0 2
35836: PUSH
35837: FOR_IN
35838: IFFALSE 35854
// SetFuel ( i , 0 ) ;
35840: LD_VAR 0 1
35844: PPUSH
35845: LD_INT 0
35847: PPUSH
35848: CALL_OW 240
35852: GO 35837
35854: POP
35855: POP
// end ;
35856: PPOPN 2
35858: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
35859: LD_EXP 63
35863: PUSH
35864: LD_EXP 99
35868: AND
35869: IFFALSE 35935
35871: GO 35873
35873: DISABLE
35874: LD_INT 0
35876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35877: LD_ADDR_VAR 0 1
35881: PUSH
35882: LD_INT 22
35884: PUSH
35885: LD_OWVAR 2
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 30
35896: PUSH
35897: LD_INT 29
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PPUSH
35908: CALL_OW 69
35912: ST_TO_ADDR
// if not tmp then
35913: LD_VAR 0 1
35917: NOT
35918: IFFALSE 35922
// exit ;
35920: GO 35935
// DestroyUnit ( tmp [ 1 ] ) ;
35922: LD_VAR 0 1
35926: PUSH
35927: LD_INT 1
35929: ARRAY
35930: PPUSH
35931: CALL_OW 65
// end ;
35935: PPOPN 1
35937: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
35938: LD_EXP 63
35942: PUSH
35943: LD_EXP 101
35947: AND
35948: IFFALSE 36077
35950: GO 35952
35952: DISABLE
35953: LD_INT 0
35955: PPUSH
// begin uc_side := 0 ;
35956: LD_ADDR_OWVAR 20
35960: PUSH
35961: LD_INT 0
35963: ST_TO_ADDR
// uc_nation := nation_arabian ;
35964: LD_ADDR_OWVAR 21
35968: PUSH
35969: LD_INT 2
35971: ST_TO_ADDR
// hc_gallery :=  ;
35972: LD_ADDR_OWVAR 33
35976: PUSH
35977: LD_STRING 
35979: ST_TO_ADDR
// hc_name :=  ;
35980: LD_ADDR_OWVAR 26
35984: PUSH
35985: LD_STRING 
35987: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
35988: LD_INT 1
35990: PPUSH
35991: LD_INT 11
35993: PPUSH
35994: LD_INT 10
35996: PPUSH
35997: CALL_OW 380
// un := CreateHuman ;
36001: LD_ADDR_VAR 0 1
36005: PUSH
36006: CALL_OW 44
36010: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36011: LD_VAR 0 1
36015: PPUSH
36016: LD_INT 1
36018: PPUSH
36019: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36023: LD_INT 35
36025: PPUSH
36026: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36030: LD_VAR 0 1
36034: PPUSH
36035: LD_INT 22
36037: PUSH
36038: LD_OWVAR 2
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PPUSH
36047: CALL_OW 69
36051: PPUSH
36052: LD_VAR 0 1
36056: PPUSH
36057: CALL_OW 74
36061: PPUSH
36062: CALL_OW 115
// until IsDead ( un ) ;
36066: LD_VAR 0 1
36070: PPUSH
36071: CALL_OW 301
36075: IFFALSE 36023
// end ;
36077: PPOPN 1
36079: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36080: LD_EXP 63
36084: PUSH
36085: LD_EXP 103
36089: AND
36090: IFFALSE 36102
36092: GO 36094
36094: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36095: LD_STRING earthquake(getX(game), 0, 32)
36097: PPUSH
36098: CALL_OW 559
36102: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36103: LD_EXP 63
36107: PUSH
36108: LD_EXP 104
36112: AND
36113: IFFALSE 36204
36115: GO 36117
36117: DISABLE
36118: LD_INT 0
36120: PPUSH
// begin enable ;
36121: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36122: LD_ADDR_VAR 0 1
36126: PUSH
36127: LD_INT 22
36129: PUSH
36130: LD_OWVAR 2
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 21
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 33
36151: PUSH
36152: LD_INT 3
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: LIST
36163: PPUSH
36164: CALL_OW 69
36168: ST_TO_ADDR
// if not tmp then
36169: LD_VAR 0 1
36173: NOT
36174: IFFALSE 36178
// exit ;
36176: GO 36204
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
36178: LD_VAR 0 1
36182: PUSH
36183: LD_INT 1
36185: PPUSH
36186: LD_VAR 0 1
36190: PPUSH
36191: CALL_OW 12
36195: ARRAY
36196: PPUSH
36197: LD_INT 1
36199: PPUSH
36200: CALL_OW 234
// end ;
36204: PPOPN 1
36206: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
36207: LD_EXP 63
36211: PUSH
36212: LD_EXP 105
36216: AND
36217: IFFALSE 36358
36219: GO 36221
36221: DISABLE
36222: LD_INT 0
36224: PPUSH
36225: PPUSH
36226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36227: LD_ADDR_VAR 0 3
36231: PUSH
36232: LD_INT 22
36234: PUSH
36235: LD_OWVAR 2
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 25
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PPUSH
36258: CALL_OW 69
36262: ST_TO_ADDR
// if not tmp then
36263: LD_VAR 0 3
36267: NOT
36268: IFFALSE 36272
// exit ;
36270: GO 36358
// un := tmp [ rand ( 1 , tmp ) ] ;
36272: LD_ADDR_VAR 0 2
36276: PUSH
36277: LD_VAR 0 3
36281: PUSH
36282: LD_INT 1
36284: PPUSH
36285: LD_VAR 0 3
36289: PPUSH
36290: CALL_OW 12
36294: ARRAY
36295: ST_TO_ADDR
// if Crawls ( un ) then
36296: LD_VAR 0 2
36300: PPUSH
36301: CALL_OW 318
36305: IFFALSE 36316
// ComWalk ( un ) ;
36307: LD_VAR 0 2
36311: PPUSH
36312: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
36316: LD_VAR 0 2
36320: PPUSH
36321: LD_INT 9
36323: PPUSH
36324: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
36328: LD_INT 28
36330: PPUSH
36331: LD_OWVAR 2
36335: PPUSH
36336: LD_INT 2
36338: PPUSH
36339: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
36343: LD_INT 29
36345: PPUSH
36346: LD_OWVAR 2
36350: PPUSH
36351: LD_INT 2
36353: PPUSH
36354: CALL_OW 322
// end ;
36358: PPOPN 3
36360: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
36361: LD_EXP 63
36365: PUSH
36366: LD_EXP 106
36370: AND
36371: IFFALSE 36482
36373: GO 36375
36375: DISABLE
36376: LD_INT 0
36378: PPUSH
36379: PPUSH
36380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36381: LD_ADDR_VAR 0 3
36385: PUSH
36386: LD_INT 22
36388: PUSH
36389: LD_OWVAR 2
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 25
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PPUSH
36412: CALL_OW 69
36416: ST_TO_ADDR
// if not tmp then
36417: LD_VAR 0 3
36421: NOT
36422: IFFALSE 36426
// exit ;
36424: GO 36482
// un := tmp [ rand ( 1 , tmp ) ] ;
36426: LD_ADDR_VAR 0 2
36430: PUSH
36431: LD_VAR 0 3
36435: PUSH
36436: LD_INT 1
36438: PPUSH
36439: LD_VAR 0 3
36443: PPUSH
36444: CALL_OW 12
36448: ARRAY
36449: ST_TO_ADDR
// if Crawls ( un ) then
36450: LD_VAR 0 2
36454: PPUSH
36455: CALL_OW 318
36459: IFFALSE 36470
// ComWalk ( un ) ;
36461: LD_VAR 0 2
36465: PPUSH
36466: CALL_OW 138
// SetClass ( un , class_mortar ) ;
36470: LD_VAR 0 2
36474: PPUSH
36475: LD_INT 8
36477: PPUSH
36478: CALL_OW 336
// end ;
36482: PPOPN 3
36484: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
36485: LD_EXP 63
36489: PUSH
36490: LD_EXP 107
36494: AND
36495: IFFALSE 36639
36497: GO 36499
36499: DISABLE
36500: LD_INT 0
36502: PPUSH
36503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
36504: LD_ADDR_VAR 0 2
36508: PUSH
36509: LD_INT 22
36511: PUSH
36512: LD_OWVAR 2
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 21
36523: PUSH
36524: LD_INT 2
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: LD_INT 34
36536: PUSH
36537: LD_INT 12
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 34
36546: PUSH
36547: LD_INT 51
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 34
36556: PUSH
36557: LD_INT 32
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: LIST
36574: PPUSH
36575: CALL_OW 69
36579: ST_TO_ADDR
// if not tmp then
36580: LD_VAR 0 2
36584: NOT
36585: IFFALSE 36589
// exit ;
36587: GO 36639
// for i in tmp do
36589: LD_ADDR_VAR 0 1
36593: PUSH
36594: LD_VAR 0 2
36598: PUSH
36599: FOR_IN
36600: IFFALSE 36637
// if GetCargo ( i , mat_artifact ) = 0 then
36602: LD_VAR 0 1
36606: PPUSH
36607: LD_INT 4
36609: PPUSH
36610: CALL_OW 289
36614: PUSH
36615: LD_INT 0
36617: EQUAL
36618: IFFALSE 36635
// SetCargo ( i , mat_siberit , 100 ) ;
36620: LD_VAR 0 1
36624: PPUSH
36625: LD_INT 3
36627: PPUSH
36628: LD_INT 100
36630: PPUSH
36631: CALL_OW 290
36635: GO 36599
36637: POP
36638: POP
// end ;
36639: PPOPN 2
36641: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
36642: LD_EXP 63
36646: PUSH
36647: LD_EXP 108
36651: AND
36652: IFFALSE 36835
36654: GO 36656
36656: DISABLE
36657: LD_INT 0
36659: PPUSH
36660: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36661: LD_ADDR_VAR 0 2
36665: PUSH
36666: LD_INT 22
36668: PUSH
36669: LD_OWVAR 2
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PPUSH
36678: CALL_OW 69
36682: ST_TO_ADDR
// if not tmp then
36683: LD_VAR 0 2
36687: NOT
36688: IFFALSE 36692
// exit ;
36690: GO 36835
// for i := 1 to 2 do
36692: LD_ADDR_VAR 0 1
36696: PUSH
36697: DOUBLE
36698: LD_INT 1
36700: DEC
36701: ST_TO_ADDR
36702: LD_INT 2
36704: PUSH
36705: FOR_TO
36706: IFFALSE 36833
// begin uc_side := your_side ;
36708: LD_ADDR_OWVAR 20
36712: PUSH
36713: LD_OWVAR 2
36717: ST_TO_ADDR
// uc_nation := nation_american ;
36718: LD_ADDR_OWVAR 21
36722: PUSH
36723: LD_INT 1
36725: ST_TO_ADDR
// vc_chassis := us_morphling ;
36726: LD_ADDR_OWVAR 37
36730: PUSH
36731: LD_INT 5
36733: ST_TO_ADDR
// vc_engine := engine_siberite ;
36734: LD_ADDR_OWVAR 39
36738: PUSH
36739: LD_INT 3
36741: ST_TO_ADDR
// vc_control := control_computer ;
36742: LD_ADDR_OWVAR 38
36746: PUSH
36747: LD_INT 3
36749: ST_TO_ADDR
// vc_weapon := us_double_laser ;
36750: LD_ADDR_OWVAR 40
36754: PUSH
36755: LD_INT 10
36757: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
36758: LD_VAR 0 2
36762: PUSH
36763: LD_INT 1
36765: ARRAY
36766: PPUSH
36767: CALL_OW 310
36771: NOT
36772: IFFALSE 36819
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
36774: CALL_OW 45
36778: PPUSH
36779: LD_VAR 0 2
36783: PUSH
36784: LD_INT 1
36786: ARRAY
36787: PPUSH
36788: CALL_OW 250
36792: PPUSH
36793: LD_VAR 0 2
36797: PUSH
36798: LD_INT 1
36800: ARRAY
36801: PPUSH
36802: CALL_OW 251
36806: PPUSH
36807: LD_INT 12
36809: PPUSH
36810: LD_INT 1
36812: PPUSH
36813: CALL_OW 50
36817: GO 36831
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
36819: CALL_OW 45
36823: PPUSH
36824: LD_INT 1
36826: PPUSH
36827: CALL_OW 51
// end ;
36831: GO 36705
36833: POP
36834: POP
// end ;
36835: PPOPN 2
36837: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
36838: LD_EXP 63
36842: PUSH
36843: LD_EXP 109
36847: AND
36848: IFFALSE 37070
36850: GO 36852
36852: DISABLE
36853: LD_INT 0
36855: PPUSH
36856: PPUSH
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36861: LD_ADDR_VAR 0 6
36865: PUSH
36866: LD_INT 22
36868: PUSH
36869: LD_OWVAR 2
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 21
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 3
36890: PUSH
36891: LD_INT 23
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: PPUSH
36910: CALL_OW 69
36914: ST_TO_ADDR
// if not tmp then
36915: LD_VAR 0 6
36919: NOT
36920: IFFALSE 36924
// exit ;
36922: GO 37070
// s1 := rand ( 1 , 4 ) ;
36924: LD_ADDR_VAR 0 2
36928: PUSH
36929: LD_INT 1
36931: PPUSH
36932: LD_INT 4
36934: PPUSH
36935: CALL_OW 12
36939: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
36940: LD_ADDR_VAR 0 4
36944: PUSH
36945: LD_VAR 0 6
36949: PUSH
36950: LD_INT 1
36952: ARRAY
36953: PPUSH
36954: LD_VAR 0 2
36958: PPUSH
36959: CALL_OW 259
36963: ST_TO_ADDR
// if s1 = 1 then
36964: LD_VAR 0 2
36968: PUSH
36969: LD_INT 1
36971: EQUAL
36972: IFFALSE 36992
// s2 := rand ( 2 , 4 ) else
36974: LD_ADDR_VAR 0 3
36978: PUSH
36979: LD_INT 2
36981: PPUSH
36982: LD_INT 4
36984: PPUSH
36985: CALL_OW 12
36989: ST_TO_ADDR
36990: GO 37000
// s2 := 1 ;
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_INT 1
36999: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37000: LD_ADDR_VAR 0 5
37004: PUSH
37005: LD_VAR 0 6
37009: PUSH
37010: LD_INT 1
37012: ARRAY
37013: PPUSH
37014: LD_VAR 0 3
37018: PPUSH
37019: CALL_OW 259
37023: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37024: LD_VAR 0 6
37028: PUSH
37029: LD_INT 1
37031: ARRAY
37032: PPUSH
37033: LD_VAR 0 2
37037: PPUSH
37038: LD_VAR 0 5
37042: PPUSH
37043: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37047: LD_VAR 0 6
37051: PUSH
37052: LD_INT 1
37054: ARRAY
37055: PPUSH
37056: LD_VAR 0 3
37060: PPUSH
37061: LD_VAR 0 4
37065: PPUSH
37066: CALL_OW 237
// end ;
37070: PPOPN 6
37072: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37073: LD_EXP 63
37077: PUSH
37078: LD_EXP 110
37082: AND
37083: IFFALSE 37162
37085: GO 37087
37087: DISABLE
37088: LD_INT 0
37090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37091: LD_ADDR_VAR 0 1
37095: PUSH
37096: LD_INT 22
37098: PUSH
37099: LD_OWVAR 2
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 30
37110: PUSH
37111: LD_INT 3
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PPUSH
37122: CALL_OW 69
37126: ST_TO_ADDR
// if not tmp then
37127: LD_VAR 0 1
37131: NOT
37132: IFFALSE 37136
// exit ;
37134: GO 37162
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37136: LD_VAR 0 1
37140: PUSH
37141: LD_INT 1
37143: PPUSH
37144: LD_VAR 0 1
37148: PPUSH
37149: CALL_OW 12
37153: ARRAY
37154: PPUSH
37155: LD_INT 1
37157: PPUSH
37158: CALL_OW 234
// end ;
37162: PPOPN 1
37164: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
37165: LD_EXP 63
37169: PUSH
37170: LD_EXP 111
37174: AND
37175: IFFALSE 37287
37177: GO 37179
37179: DISABLE
37180: LD_INT 0
37182: PPUSH
37183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
37184: LD_ADDR_VAR 0 2
37188: PUSH
37189: LD_INT 22
37191: PUSH
37192: LD_OWVAR 2
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: LD_INT 30
37206: PUSH
37207: LD_INT 27
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 30
37216: PUSH
37217: LD_INT 26
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 30
37226: PUSH
37227: LD_INT 28
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PPUSH
37244: CALL_OW 69
37248: ST_TO_ADDR
// if not tmp then
37249: LD_VAR 0 2
37253: NOT
37254: IFFALSE 37258
// exit ;
37256: GO 37287
// for i in tmp do
37258: LD_ADDR_VAR 0 1
37262: PUSH
37263: LD_VAR 0 2
37267: PUSH
37268: FOR_IN
37269: IFFALSE 37285
// SetLives ( i , 1 ) ;
37271: LD_VAR 0 1
37275: PPUSH
37276: LD_INT 1
37278: PPUSH
37279: CALL_OW 234
37283: GO 37268
37285: POP
37286: POP
// end ;
37287: PPOPN 2
37289: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
37290: LD_EXP 63
37294: PUSH
37295: LD_EXP 112
37299: AND
37300: IFFALSE 37574
37302: GO 37304
37304: DISABLE
37305: LD_INT 0
37307: PPUSH
37308: PPUSH
37309: PPUSH
// begin i := rand ( 1 , 7 ) ;
37310: LD_ADDR_VAR 0 1
37314: PUSH
37315: LD_INT 1
37317: PPUSH
37318: LD_INT 7
37320: PPUSH
37321: CALL_OW 12
37325: ST_TO_ADDR
// case i of 1 :
37326: LD_VAR 0 1
37330: PUSH
37331: LD_INT 1
37333: DOUBLE
37334: EQUAL
37335: IFTRUE 37339
37337: GO 37349
37339: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
37340: LD_STRING earthquake(getX(game), 0, 32)
37342: PPUSH
37343: CALL_OW 559
37347: GO 37574
37349: LD_INT 2
37351: DOUBLE
37352: EQUAL
37353: IFTRUE 37357
37355: GO 37371
37357: POP
// begin ToLua ( displayStucuk(); ) ;
37358: LD_STRING displayStucuk();
37360: PPUSH
37361: CALL_OW 559
// ResetFog ;
37365: CALL_OW 335
// end ; 3 :
37369: GO 37574
37371: LD_INT 3
37373: DOUBLE
37374: EQUAL
37375: IFTRUE 37379
37377: GO 37483
37379: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37380: LD_ADDR_VAR 0 2
37384: PUSH
37385: LD_INT 22
37387: PUSH
37388: LD_OWVAR 2
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 25
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PPUSH
37411: CALL_OW 69
37415: ST_TO_ADDR
// if not tmp then
37416: LD_VAR 0 2
37420: NOT
37421: IFFALSE 37425
// exit ;
37423: GO 37574
// un := tmp [ rand ( 1 , tmp ) ] ;
37425: LD_ADDR_VAR 0 3
37429: PUSH
37430: LD_VAR 0 2
37434: PUSH
37435: LD_INT 1
37437: PPUSH
37438: LD_VAR 0 2
37442: PPUSH
37443: CALL_OW 12
37447: ARRAY
37448: ST_TO_ADDR
// if Crawls ( un ) then
37449: LD_VAR 0 3
37453: PPUSH
37454: CALL_OW 318
37458: IFFALSE 37469
// ComWalk ( un ) ;
37460: LD_VAR 0 3
37464: PPUSH
37465: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37469: LD_VAR 0 3
37473: PPUSH
37474: LD_INT 8
37476: PPUSH
37477: CALL_OW 336
// end ; 4 :
37481: GO 37574
37483: LD_INT 4
37485: DOUBLE
37486: EQUAL
37487: IFTRUE 37491
37489: GO 37552
37491: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37492: LD_ADDR_VAR 0 2
37496: PUSH
37497: LD_INT 22
37499: PUSH
37500: LD_OWVAR 2
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 30
37511: PUSH
37512: LD_INT 29
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PPUSH
37523: CALL_OW 69
37527: ST_TO_ADDR
// if not tmp then
37528: LD_VAR 0 2
37532: NOT
37533: IFFALSE 37537
// exit ;
37535: GO 37574
// DestroyUnit ( tmp [ 1 ] ) ;
37537: LD_VAR 0 2
37541: PUSH
37542: LD_INT 1
37544: ARRAY
37545: PPUSH
37546: CALL_OW 65
// end ; 5 .. 7 :
37550: GO 37574
37552: LD_INT 5
37554: DOUBLE
37555: GREATEREQUAL
37556: IFFALSE 37564
37558: LD_INT 7
37560: DOUBLE
37561: LESSEQUAL
37562: IFTRUE 37566
37564: GO 37573
37566: POP
// StreamSibBomb ; end ;
37567: CALL 33824 0 0
37571: GO 37574
37573: POP
// end ;
37574: PPOPN 3
37576: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
37577: LD_EXP 63
37581: PUSH
37582: LD_EXP 113
37586: AND
37587: IFFALSE 37743
37589: GO 37591
37591: DISABLE
37592: LD_INT 0
37594: PPUSH
37595: PPUSH
37596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
37597: LD_ADDR_VAR 0 2
37601: PUSH
37602: LD_INT 81
37604: PUSH
37605: LD_OWVAR 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: LD_INT 21
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 21
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: LIST
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PPUSH
37646: CALL_OW 69
37650: ST_TO_ADDR
// if not tmp then
37651: LD_VAR 0 2
37655: NOT
37656: IFFALSE 37660
// exit ;
37658: GO 37743
// p := 0 ;
37660: LD_ADDR_VAR 0 3
37664: PUSH
37665: LD_INT 0
37667: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37668: LD_INT 35
37670: PPUSH
37671: CALL_OW 67
// p := p + 1 ;
37675: LD_ADDR_VAR 0 3
37679: PUSH
37680: LD_VAR 0 3
37684: PUSH
37685: LD_INT 1
37687: PLUS
37688: ST_TO_ADDR
// for i in tmp do
37689: LD_ADDR_VAR 0 1
37693: PUSH
37694: LD_VAR 0 2
37698: PUSH
37699: FOR_IN
37700: IFFALSE 37731
// if GetLives ( i ) < 1000 then
37702: LD_VAR 0 1
37706: PPUSH
37707: CALL_OW 256
37711: PUSH
37712: LD_INT 1000
37714: LESS
37715: IFFALSE 37729
// SetLives ( i , 1000 ) ;
37717: LD_VAR 0 1
37721: PPUSH
37722: LD_INT 1000
37724: PPUSH
37725: CALL_OW 234
37729: GO 37699
37731: POP
37732: POP
// until p > 20 ;
37733: LD_VAR 0 3
37737: PUSH
37738: LD_INT 20
37740: GREATER
37741: IFFALSE 37668
// end ;
37743: PPOPN 3
37745: END
// every 0 0$1 trigger StreamModeActive and sTime do
37746: LD_EXP 63
37750: PUSH
37751: LD_EXP 114
37755: AND
37756: IFFALSE 37791
37758: GO 37760
37760: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
37761: LD_INT 28
37763: PPUSH
37764: LD_OWVAR 2
37768: PPUSH
37769: LD_INT 2
37771: PPUSH
37772: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
37776: LD_INT 30
37778: PPUSH
37779: LD_OWVAR 2
37783: PPUSH
37784: LD_INT 2
37786: PPUSH
37787: CALL_OW 322
// end ;
37791: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
37792: LD_EXP 63
37796: PUSH
37797: LD_EXP 115
37801: AND
37802: IFFALSE 37923
37804: GO 37806
37806: DISABLE
37807: LD_INT 0
37809: PPUSH
37810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37811: LD_ADDR_VAR 0 2
37815: PUSH
37816: LD_INT 22
37818: PUSH
37819: LD_OWVAR 2
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 21
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: LD_INT 23
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: PPUSH
37860: CALL_OW 69
37864: ST_TO_ADDR
// if not tmp then
37865: LD_VAR 0 2
37869: NOT
37870: IFFALSE 37874
// exit ;
37872: GO 37923
// for i in tmp do
37874: LD_ADDR_VAR 0 1
37878: PUSH
37879: LD_VAR 0 2
37883: PUSH
37884: FOR_IN
37885: IFFALSE 37921
// begin if Crawls ( i ) then
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL_OW 318
37896: IFFALSE 37907
// ComWalk ( i ) ;
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 138
// SetClass ( i , 2 ) ;
37907: LD_VAR 0 1
37911: PPUSH
37912: LD_INT 2
37914: PPUSH
37915: CALL_OW 336
// end ;
37919: GO 37884
37921: POP
37922: POP
// end ;
37923: PPOPN 2
37925: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
37926: LD_EXP 63
37930: PUSH
37931: LD_EXP 116
37935: AND
37936: IFFALSE 38217
37938: GO 37940
37940: DISABLE
37941: LD_INT 0
37943: PPUSH
37944: PPUSH
37945: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
37946: LD_OWVAR 2
37950: PPUSH
37951: LD_INT 9
37953: PPUSH
37954: LD_INT 1
37956: PPUSH
37957: LD_INT 1
37959: PPUSH
37960: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
37964: LD_INT 9
37966: PPUSH
37967: LD_OWVAR 2
37971: PPUSH
37972: CALL_OW 343
// uc_side := 9 ;
37976: LD_ADDR_OWVAR 20
37980: PUSH
37981: LD_INT 9
37983: ST_TO_ADDR
// uc_nation := 2 ;
37984: LD_ADDR_OWVAR 21
37988: PUSH
37989: LD_INT 2
37991: ST_TO_ADDR
// hc_name := Dark Warrior ;
37992: LD_ADDR_OWVAR 26
37996: PUSH
37997: LD_STRING Dark Warrior
37999: ST_TO_ADDR
// hc_gallery :=  ;
38000: LD_ADDR_OWVAR 33
38004: PUSH
38005: LD_STRING 
38007: ST_TO_ADDR
// hc_noskilllimit := true ;
38008: LD_ADDR_OWVAR 76
38012: PUSH
38013: LD_INT 1
38015: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38016: LD_ADDR_OWVAR 31
38020: PUSH
38021: LD_INT 30
38023: PUSH
38024: LD_INT 30
38026: PUSH
38027: LD_INT 30
38029: PUSH
38030: LD_INT 30
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: ST_TO_ADDR
// un := CreateHuman ;
38039: LD_ADDR_VAR 0 3
38043: PUSH
38044: CALL_OW 44
38048: ST_TO_ADDR
// hc_noskilllimit := false ;
38049: LD_ADDR_OWVAR 76
38053: PUSH
38054: LD_INT 0
38056: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38057: LD_VAR 0 3
38061: PPUSH
38062: LD_INT 1
38064: PPUSH
38065: CALL_OW 51
// p := 0 ;
38069: LD_ADDR_VAR 0 2
38073: PUSH
38074: LD_INT 0
38076: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38077: LD_INT 35
38079: PPUSH
38080: CALL_OW 67
// p := p + 1 ;
38084: LD_ADDR_VAR 0 2
38088: PUSH
38089: LD_VAR 0 2
38093: PUSH
38094: LD_INT 1
38096: PLUS
38097: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38098: LD_VAR 0 3
38102: PPUSH
38103: CALL_OW 256
38107: PUSH
38108: LD_INT 1000
38110: LESS
38111: IFFALSE 38125
// SetLives ( un , 1000 ) ;
38113: LD_VAR 0 3
38117: PPUSH
38118: LD_INT 1000
38120: PPUSH
38121: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38125: LD_VAR 0 3
38129: PPUSH
38130: LD_INT 81
38132: PUSH
38133: LD_OWVAR 2
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 91
38144: PUSH
38145: LD_VAR 0 3
38149: PUSH
38150: LD_INT 30
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PPUSH
38162: CALL_OW 69
38166: PPUSH
38167: LD_VAR 0 3
38171: PPUSH
38172: CALL_OW 74
38176: PPUSH
38177: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
38181: LD_VAR 0 2
38185: PUSH
38186: LD_INT 60
38188: GREATER
38189: PUSH
38190: LD_VAR 0 3
38194: PPUSH
38195: CALL_OW 301
38199: OR
38200: IFFALSE 38077
// if un then
38202: LD_VAR 0 3
38206: IFFALSE 38217
// RemoveUnit ( un ) ;
38208: LD_VAR 0 3
38212: PPUSH
38213: CALL_OW 64
// end ;
38217: PPOPN 3
38219: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
38220: LD_INT 0
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38226: LD_ADDR_VAR 0 4
38230: PUSH
38231: LD_INT 22
38233: PUSH
38234: LD_OWVAR 2
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 30
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 30
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PPUSH
38275: CALL_OW 69
38279: ST_TO_ADDR
// if not tmp then
38280: LD_VAR 0 4
38284: NOT
38285: IFFALSE 38289
// exit ;
38287: GO 38348
// for i in tmp do
38289: LD_ADDR_VAR 0 2
38293: PUSH
38294: LD_VAR 0 4
38298: PUSH
38299: FOR_IN
38300: IFFALSE 38346
// for j = 1 to 3 do
38302: LD_ADDR_VAR 0 3
38306: PUSH
38307: DOUBLE
38308: LD_INT 1
38310: DEC
38311: ST_TO_ADDR
38312: LD_INT 3
38314: PUSH
38315: FOR_TO
38316: IFFALSE 38342
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
38318: LD_VAR 0 2
38322: PPUSH
38323: CALL_OW 274
38327: PPUSH
38328: LD_VAR 0 3
38332: PPUSH
38333: LD_INT 99999
38335: PPUSH
38336: CALL_OW 277
38340: GO 38315
38342: POP
38343: POP
38344: GO 38299
38346: POP
38347: POP
// end ;
38348: LD_VAR 0 1
38352: RET
// export function hHackSetLevel10 ; var i , j ; begin
38353: LD_INT 0
38355: PPUSH
38356: PPUSH
38357: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
38358: LD_ADDR_VAR 0 2
38362: PUSH
38363: LD_INT 21
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PPUSH
38373: CALL_OW 69
38377: PUSH
38378: FOR_IN
38379: IFFALSE 38431
// if IsSelected ( i ) then
38381: LD_VAR 0 2
38385: PPUSH
38386: CALL_OW 306
38390: IFFALSE 38429
// begin for j := 1 to 4 do
38392: LD_ADDR_VAR 0 3
38396: PUSH
38397: DOUBLE
38398: LD_INT 1
38400: DEC
38401: ST_TO_ADDR
38402: LD_INT 4
38404: PUSH
38405: FOR_TO
38406: IFFALSE 38427
// SetSkill ( i , j , 10 ) ;
38408: LD_VAR 0 2
38412: PPUSH
38413: LD_VAR 0 3
38417: PPUSH
38418: LD_INT 10
38420: PPUSH
38421: CALL_OW 237
38425: GO 38405
38427: POP
38428: POP
// end ;
38429: GO 38378
38431: POP
38432: POP
// end ;
38433: LD_VAR 0 1
38437: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
38438: LD_INT 0
38440: PPUSH
38441: PPUSH
38442: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
38443: LD_ADDR_VAR 0 2
38447: PUSH
38448: LD_INT 22
38450: PUSH
38451: LD_OWVAR 2
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 21
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PPUSH
38474: CALL_OW 69
38478: PUSH
38479: FOR_IN
38480: IFFALSE 38521
// begin for j := 1 to 4 do
38482: LD_ADDR_VAR 0 3
38486: PUSH
38487: DOUBLE
38488: LD_INT 1
38490: DEC
38491: ST_TO_ADDR
38492: LD_INT 4
38494: PUSH
38495: FOR_TO
38496: IFFALSE 38517
// SetSkill ( i , j , 10 ) ;
38498: LD_VAR 0 2
38502: PPUSH
38503: LD_VAR 0 3
38507: PPUSH
38508: LD_INT 10
38510: PPUSH
38511: CALL_OW 237
38515: GO 38495
38517: POP
38518: POP
// end ;
38519: GO 38479
38521: POP
38522: POP
// end ;
38523: LD_VAR 0 1
38527: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
38528: LD_INT 0
38530: PPUSH
// uc_side := your_side ;
38531: LD_ADDR_OWVAR 20
38535: PUSH
38536: LD_OWVAR 2
38540: ST_TO_ADDR
// uc_nation := nation ;
38541: LD_ADDR_OWVAR 21
38545: PUSH
38546: LD_VAR 0 1
38550: ST_TO_ADDR
// InitHc ;
38551: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
38555: LD_INT 0
38557: PPUSH
38558: LD_VAR 0 2
38562: PPUSH
38563: LD_VAR 0 3
38567: PPUSH
38568: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
38572: CALL_OW 44
38576: PPUSH
38577: LD_INT 1
38579: PPUSH
38580: CALL_OW 51
// end ;
38584: LD_VAR 0 4
38588: RET
// export function hHackSpawnVehicle ; begin
38589: LD_INT 0
38591: PPUSH
// uc_side := your_side ;
38592: LD_ADDR_OWVAR 20
38596: PUSH
38597: LD_OWVAR 2
38601: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
38602: LD_ADDR_OWVAR 21
38606: PUSH
38607: LD_INT 1
38609: PPUSH
38610: LD_INT 3
38612: PPUSH
38613: CALL_OW 12
38617: ST_TO_ADDR
// InitVc ;
38618: CALL_OW 20
// case uc_nation of 1 :
38622: LD_OWVAR 21
38626: PUSH
38627: LD_INT 1
38629: DOUBLE
38630: EQUAL
38631: IFTRUE 38635
38633: GO 38779
38635: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
38636: LD_ADDR_OWVAR 37
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: LD_INT 2
38646: PUSH
38647: LD_INT 3
38649: PUSH
38650: LD_INT 4
38652: PUSH
38653: LD_INT 5
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PPUSH
38666: LD_INT 5
38668: PPUSH
38669: CALL_OW 12
38673: ARRAY
38674: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
38675: LD_ADDR_OWVAR 39
38679: PUSH
38680: LD_INT 1
38682: PPUSH
38683: LD_INT 3
38685: PPUSH
38686: CALL_OW 12
38690: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
38691: LD_ADDR_OWVAR 38
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: LD_INT 3
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: PPUSH
38713: LD_INT 3
38715: PPUSH
38716: CALL_OW 12
38720: ARRAY
38721: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
38722: LD_ADDR_OWVAR 40
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: LD_INT 4
38732: PUSH
38733: LD_INT 5
38735: PUSH
38736: LD_INT 3
38738: PUSH
38739: LD_INT 7
38741: PUSH
38742: LD_INT 8
38744: PUSH
38745: LD_INT 9
38747: PUSH
38748: LD_INT 10
38750: PUSH
38751: LD_INT 6
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: PPUSH
38768: LD_INT 9
38770: PPUSH
38771: CALL_OW 12
38775: ARRAY
38776: ST_TO_ADDR
// end ; 2 :
38777: GO 39044
38779: LD_INT 2
38781: DOUBLE
38782: EQUAL
38783: IFTRUE 38787
38785: GO 38911
38787: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
38788: LD_ADDR_OWVAR 37
38792: PUSH
38793: LD_INT 11
38795: PUSH
38796: LD_INT 12
38798: PUSH
38799: LD_INT 13
38801: PUSH
38802: LD_INT 14
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: PPUSH
38814: LD_INT 4
38816: PPUSH
38817: CALL_OW 12
38821: ARRAY
38822: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
38823: LD_ADDR_OWVAR 39
38827: PUSH
38828: LD_INT 1
38830: PPUSH
38831: LD_INT 3
38833: PPUSH
38834: CALL_OW 12
38838: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
38839: LD_ADDR_OWVAR 38
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 5
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 1
38860: PPUSH
38861: LD_INT 3
38863: PPUSH
38864: CALL_OW 12
38868: ARRAY
38869: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
38870: LD_ADDR_OWVAR 40
38874: PUSH
38875: LD_INT 24
38877: PUSH
38878: LD_INT 26
38880: PUSH
38881: LD_INT 27
38883: PUSH
38884: LD_INT 28
38886: PUSH
38887: LD_INT 29
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: PPUSH
38900: LD_INT 5
38902: PPUSH
38903: CALL_OW 12
38907: ARRAY
38908: ST_TO_ADDR
// end ; 3 :
38909: GO 39044
38911: LD_INT 3
38913: DOUBLE
38914: EQUAL
38915: IFTRUE 38919
38917: GO 39043
38919: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
38920: LD_ADDR_OWVAR 37
38924: PUSH
38925: LD_INT 21
38927: PUSH
38928: LD_INT 23
38930: PUSH
38931: LD_INT 22
38933: PUSH
38934: LD_INT 24
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PPUSH
38946: LD_INT 4
38948: PPUSH
38949: CALL_OW 12
38953: ARRAY
38954: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
38955: LD_ADDR_OWVAR 39
38959: PUSH
38960: LD_INT 1
38962: PPUSH
38963: LD_INT 3
38965: PPUSH
38966: CALL_OW 12
38970: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
38971: LD_ADDR_OWVAR 38
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: LD_INT 3
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: PPUSH
38989: LD_INT 2
38991: PPUSH
38992: CALL_OW 12
38996: ARRAY
38997: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
38998: LD_ADDR_OWVAR 40
39002: PUSH
39003: LD_INT 42
39005: PUSH
39006: LD_INT 43
39008: PUSH
39009: LD_INT 44
39011: PUSH
39012: LD_INT 46
39014: PUSH
39015: LD_INT 48
39017: PUSH
39018: LD_INT 47
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PPUSH
39032: LD_INT 6
39034: PPUSH
39035: CALL_OW 12
39039: ARRAY
39040: ST_TO_ADDR
// end ; end ;
39041: GO 39044
39043: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39044: CALL_OW 45
39048: PPUSH
39049: LD_INT 1
39051: PPUSH
39052: CALL_OW 51
// end ;
39056: LD_VAR 0 1
39060: RET
// export hInvincible ; every 1 do
39061: GO 39063
39063: DISABLE
// hInvincible := [ ] ;
39064: LD_ADDR_EXP 117
39068: PUSH
39069: EMPTY
39070: ST_TO_ADDR
39071: END
// every 10 do var i ;
39072: GO 39074
39074: DISABLE
39075: LD_INT 0
39077: PPUSH
// begin enable ;
39078: ENABLE
// if not hInvincible then
39079: LD_EXP 117
39083: NOT
39084: IFFALSE 39088
// exit ;
39086: GO 39132
// for i in hInvincible do
39088: LD_ADDR_VAR 0 1
39092: PUSH
39093: LD_EXP 117
39097: PUSH
39098: FOR_IN
39099: IFFALSE 39130
// if GetLives ( i ) < 1000 then
39101: LD_VAR 0 1
39105: PPUSH
39106: CALL_OW 256
39110: PUSH
39111: LD_INT 1000
39113: LESS
39114: IFFALSE 39128
// SetLives ( i , 1000 ) ;
39116: LD_VAR 0 1
39120: PPUSH
39121: LD_INT 1000
39123: PPUSH
39124: CALL_OW 234
39128: GO 39098
39130: POP
39131: POP
// end ;
39132: PPOPN 1
39134: END
// export function hHackInvincible ; var i ; begin
39135: LD_INT 0
39137: PPUSH
39138: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
39139: LD_ADDR_VAR 0 2
39143: PUSH
39144: LD_INT 2
39146: PUSH
39147: LD_INT 21
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 21
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: LIST
39171: PPUSH
39172: CALL_OW 69
39176: PUSH
39177: FOR_IN
39178: IFFALSE 39239
// if IsSelected ( i ) then
39180: LD_VAR 0 2
39184: PPUSH
39185: CALL_OW 306
39189: IFFALSE 39237
// begin if i in hInvincible then
39191: LD_VAR 0 2
39195: PUSH
39196: LD_EXP 117
39200: IN
39201: IFFALSE 39221
// hInvincible := hInvincible diff i else
39203: LD_ADDR_EXP 117
39207: PUSH
39208: LD_EXP 117
39212: PUSH
39213: LD_VAR 0 2
39217: DIFF
39218: ST_TO_ADDR
39219: GO 39237
// hInvincible := hInvincible union i ;
39221: LD_ADDR_EXP 117
39225: PUSH
39226: LD_EXP 117
39230: PUSH
39231: LD_VAR 0 2
39235: UNION
39236: ST_TO_ADDR
// end ;
39237: GO 39177
39239: POP
39240: POP
// end ;
39241: LD_VAR 0 1
39245: RET
// export function hHackInvisible ; var i , j ; begin
39246: LD_INT 0
39248: PPUSH
39249: PPUSH
39250: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39251: LD_ADDR_VAR 0 2
39255: PUSH
39256: LD_INT 21
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PPUSH
39266: CALL_OW 69
39270: PUSH
39271: FOR_IN
39272: IFFALSE 39296
// if IsSelected ( i ) then
39274: LD_VAR 0 2
39278: PPUSH
39279: CALL_OW 306
39283: IFFALSE 39294
// ComForceInvisible ( i ) ;
39285: LD_VAR 0 2
39289: PPUSH
39290: CALL_OW 496
39294: GO 39271
39296: POP
39297: POP
// end ;
39298: LD_VAR 0 1
39302: RET
// export function hHackChangeYourSide ; begin
39303: LD_INT 0
39305: PPUSH
// if your_side = 8 then
39306: LD_OWVAR 2
39310: PUSH
39311: LD_INT 8
39313: EQUAL
39314: IFFALSE 39326
// your_side := 0 else
39316: LD_ADDR_OWVAR 2
39320: PUSH
39321: LD_INT 0
39323: ST_TO_ADDR
39324: GO 39340
// your_side := your_side + 1 ;
39326: LD_ADDR_OWVAR 2
39330: PUSH
39331: LD_OWVAR 2
39335: PUSH
39336: LD_INT 1
39338: PLUS
39339: ST_TO_ADDR
// end ;
39340: LD_VAR 0 1
39344: RET
// export function hHackChangeUnitSide ; var i , j ; begin
39345: LD_INT 0
39347: PPUSH
39348: PPUSH
39349: PPUSH
// for i in all_units do
39350: LD_ADDR_VAR 0 2
39354: PUSH
39355: LD_OWVAR 3
39359: PUSH
39360: FOR_IN
39361: IFFALSE 39439
// if IsSelected ( i ) then
39363: LD_VAR 0 2
39367: PPUSH
39368: CALL_OW 306
39372: IFFALSE 39437
// begin j := GetSide ( i ) ;
39374: LD_ADDR_VAR 0 3
39378: PUSH
39379: LD_VAR 0 2
39383: PPUSH
39384: CALL_OW 255
39388: ST_TO_ADDR
// if j = 8 then
39389: LD_VAR 0 3
39393: PUSH
39394: LD_INT 8
39396: EQUAL
39397: IFFALSE 39409
// j := 0 else
39399: LD_ADDR_VAR 0 3
39403: PUSH
39404: LD_INT 0
39406: ST_TO_ADDR
39407: GO 39423
// j := j + 1 ;
39409: LD_ADDR_VAR 0 3
39413: PUSH
39414: LD_VAR 0 3
39418: PUSH
39419: LD_INT 1
39421: PLUS
39422: ST_TO_ADDR
// SetSide ( i , j ) ;
39423: LD_VAR 0 2
39427: PPUSH
39428: LD_VAR 0 3
39432: PPUSH
39433: CALL_OW 235
// end ;
39437: GO 39360
39439: POP
39440: POP
// end ;
39441: LD_VAR 0 1
39445: RET
// export function hHackFog ; begin
39446: LD_INT 0
39448: PPUSH
// FogOff ( true ) ;
39449: LD_INT 1
39451: PPUSH
39452: CALL_OW 344
// end ;
39456: LD_VAR 0 1
39460: RET
// export function hHackApeman ; begin
39461: LD_INT 0
39463: PPUSH
// uc_side := your_side ;
39464: LD_ADDR_OWVAR 20
39468: PUSH
39469: LD_OWVAR 2
39473: ST_TO_ADDR
// uc_nation := 0 ;
39474: LD_ADDR_OWVAR 21
39478: PUSH
39479: LD_INT 0
39481: ST_TO_ADDR
// hc_name :=  ;
39482: LD_ADDR_OWVAR 26
39486: PUSH
39487: LD_STRING 
39489: ST_TO_ADDR
// hc_gallery :=  ;
39490: LD_ADDR_OWVAR 33
39494: PUSH
39495: LD_STRING 
39497: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
39498: LD_ADDR_OWVAR 31
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: ST_TO_ADDR
// hc_class := class_apeman ;
39521: LD_ADDR_OWVAR 28
39525: PUSH
39526: LD_INT 12
39528: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
39529: CALL_OW 44
39533: PPUSH
39534: LD_INT 1
39536: PPUSH
39537: CALL_OW 51
// end ;
39541: LD_VAR 0 1
39545: RET
// export function hHackBoom ; begin
39546: LD_INT 0
39548: PPUSH
// uc_side := your_side ;
39549: LD_ADDR_OWVAR 20
39553: PUSH
39554: LD_OWVAR 2
39558: ST_TO_ADDR
// uc_nation := 1 ;
39559: LD_ADDR_OWVAR 21
39563: PUSH
39564: LD_INT 1
39566: ST_TO_ADDR
// vc_chassis := us_morphling ;
39567: LD_ADDR_OWVAR 37
39571: PUSH
39572: LD_INT 5
39574: ST_TO_ADDR
// vc_engine := engine_siberite ;
39575: LD_ADDR_OWVAR 39
39579: PUSH
39580: LD_INT 3
39582: ST_TO_ADDR
// vc_control := control_computer ;
39583: LD_ADDR_OWVAR 38
39587: PUSH
39588: LD_INT 3
39590: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
39591: LD_ADDR_OWVAR 40
39595: PUSH
39596: LD_INT 8
39598: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39599: CALL_OW 45
39603: PPUSH
39604: LD_INT 1
39606: PPUSH
39607: CALL_OW 51
// end ; end_of_file
39611: LD_VAR 0 1
39615: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
39616: LD_INT 0
39618: PPUSH
39619: PPUSH
39620: PPUSH
39621: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
39622: LD_VAR 0 1
39626: PPUSH
39627: CALL_OW 264
39631: PUSH
39632: LD_EXP 52
39636: EQUAL
39637: IFFALSE 39709
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39639: LD_INT 68
39641: PPUSH
39642: LD_VAR 0 1
39646: PPUSH
39647: CALL_OW 255
39651: PPUSH
39652: CALL_OW 321
39656: PUSH
39657: LD_INT 2
39659: EQUAL
39660: IFFALSE 39672
// eff := 70 else
39662: LD_ADDR_VAR 0 4
39666: PUSH
39667: LD_INT 70
39669: ST_TO_ADDR
39670: GO 39680
// eff := 30 ;
39672: LD_ADDR_VAR 0 4
39676: PUSH
39677: LD_INT 30
39679: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
39680: LD_VAR 0 1
39684: PPUSH
39685: CALL_OW 250
39689: PPUSH
39690: LD_VAR 0 1
39694: PPUSH
39695: CALL_OW 251
39699: PPUSH
39700: LD_VAR 0 4
39704: PPUSH
39705: CALL_OW 495
// end ; end ;
39709: LD_VAR 0 2
39713: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
39714: LD_INT 0
39716: PPUSH
// end ;
39717: LD_VAR 0 4
39721: RET
// export function SOS_Command ( cmd ) ; begin
39722: LD_INT 0
39724: PPUSH
// end ;
39725: LD_VAR 0 2
39729: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
39730: LD_VAR 0 1
39734: PUSH
39735: LD_INT 254
39737: EQUAL
39738: PUSH
39739: LD_VAR 0 2
39743: PPUSH
39744: CALL_OW 264
39748: PUSH
39749: LD_EXP 50
39753: EQUAL
39754: AND
39755: PUSH
39756: LD_VAR 0 3
39760: PPUSH
39761: CALL_OW 263
39765: PUSH
39766: LD_INT 3
39768: EQUAL
39769: AND
39770: IFFALSE 39786
// HackDestroyVehicle ( unit , selectedUnit ) ;
39772: LD_VAR 0 2
39776: PPUSH
39777: LD_VAR 0 3
39781: PPUSH
39782: CALL 41293 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
39786: LD_VAR 0 1
39790: PUSH
39791: LD_INT 255
39793: EQUAL
39794: PUSH
39795: LD_VAR 0 2
39799: PPUSH
39800: CALL_OW 264
39804: PUSH
39805: LD_INT 14
39807: PUSH
39808: LD_INT 53
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: IN
39815: AND
39816: PUSH
39817: LD_VAR 0 4
39821: PPUSH
39822: LD_VAR 0 5
39826: PPUSH
39827: CALL_OW 488
39831: AND
39832: IFFALSE 39856
// CutTreeXYR ( unit , x , y , 12 ) ;
39834: LD_VAR 0 2
39838: PPUSH
39839: LD_VAR 0 4
39843: PPUSH
39844: LD_VAR 0 5
39848: PPUSH
39849: LD_INT 12
39851: PPUSH
39852: CALL 39859 0 4
// end ;
39856: PPOPN 5
39858: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
39859: LD_INT 0
39861: PPUSH
39862: PPUSH
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
39870: LD_VAR 0 1
39874: NOT
39875: PUSH
39876: LD_VAR 0 2
39880: PPUSH
39881: LD_VAR 0 3
39885: PPUSH
39886: CALL_OW 488
39890: NOT
39891: OR
39892: PUSH
39893: LD_VAR 0 4
39897: NOT
39898: OR
39899: IFFALSE 39903
// exit ;
39901: GO 40243
// list := [ ] ;
39903: LD_ADDR_VAR 0 13
39907: PUSH
39908: EMPTY
39909: ST_TO_ADDR
// if x - r < 0 then
39910: LD_VAR 0 2
39914: PUSH
39915: LD_VAR 0 4
39919: MINUS
39920: PUSH
39921: LD_INT 0
39923: LESS
39924: IFFALSE 39936
// min_x := 0 else
39926: LD_ADDR_VAR 0 7
39930: PUSH
39931: LD_INT 0
39933: ST_TO_ADDR
39934: GO 39952
// min_x := x - r ;
39936: LD_ADDR_VAR 0 7
39940: PUSH
39941: LD_VAR 0 2
39945: PUSH
39946: LD_VAR 0 4
39950: MINUS
39951: ST_TO_ADDR
// if y - r < 0 then
39952: LD_VAR 0 3
39956: PUSH
39957: LD_VAR 0 4
39961: MINUS
39962: PUSH
39963: LD_INT 0
39965: LESS
39966: IFFALSE 39978
// min_y := 0 else
39968: LD_ADDR_VAR 0 8
39972: PUSH
39973: LD_INT 0
39975: ST_TO_ADDR
39976: GO 39994
// min_y := y - r ;
39978: LD_ADDR_VAR 0 8
39982: PUSH
39983: LD_VAR 0 3
39987: PUSH
39988: LD_VAR 0 4
39992: MINUS
39993: ST_TO_ADDR
// max_x := x + r ;
39994: LD_ADDR_VAR 0 9
39998: PUSH
39999: LD_VAR 0 2
40003: PUSH
40004: LD_VAR 0 4
40008: PLUS
40009: ST_TO_ADDR
// max_y := y + r ;
40010: LD_ADDR_VAR 0 10
40014: PUSH
40015: LD_VAR 0 3
40019: PUSH
40020: LD_VAR 0 4
40024: PLUS
40025: ST_TO_ADDR
// for _x = min_x to max_x do
40026: LD_ADDR_VAR 0 11
40030: PUSH
40031: DOUBLE
40032: LD_VAR 0 7
40036: DEC
40037: ST_TO_ADDR
40038: LD_VAR 0 9
40042: PUSH
40043: FOR_TO
40044: IFFALSE 40161
// for _y = min_y to max_y do
40046: LD_ADDR_VAR 0 12
40050: PUSH
40051: DOUBLE
40052: LD_VAR 0 8
40056: DEC
40057: ST_TO_ADDR
40058: LD_VAR 0 10
40062: PUSH
40063: FOR_TO
40064: IFFALSE 40157
// begin if not ValidHex ( _x , _y ) then
40066: LD_VAR 0 11
40070: PPUSH
40071: LD_VAR 0 12
40075: PPUSH
40076: CALL_OW 488
40080: NOT
40081: IFFALSE 40085
// continue ;
40083: GO 40063
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40085: LD_VAR 0 11
40089: PPUSH
40090: LD_VAR 0 12
40094: PPUSH
40095: CALL_OW 351
40099: PUSH
40100: LD_VAR 0 11
40104: PPUSH
40105: LD_VAR 0 12
40109: PPUSH
40110: CALL_OW 554
40114: AND
40115: IFFALSE 40155
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
40117: LD_ADDR_VAR 0 13
40121: PUSH
40122: LD_VAR 0 13
40126: PPUSH
40127: LD_VAR 0 13
40131: PUSH
40132: LD_INT 1
40134: PLUS
40135: PPUSH
40136: LD_VAR 0 11
40140: PUSH
40141: LD_VAR 0 12
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PPUSH
40150: CALL_OW 2
40154: ST_TO_ADDR
// end ;
40155: GO 40063
40157: POP
40158: POP
40159: GO 40043
40161: POP
40162: POP
// if not list then
40163: LD_VAR 0 13
40167: NOT
40168: IFFALSE 40172
// exit ;
40170: GO 40243
// for i in list do
40172: LD_ADDR_VAR 0 6
40176: PUSH
40177: LD_VAR 0 13
40181: PUSH
40182: FOR_IN
40183: IFFALSE 40241
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
40185: LD_VAR 0 1
40189: PPUSH
40190: LD_STRING M
40192: PUSH
40193: LD_VAR 0 6
40197: PUSH
40198: LD_INT 1
40200: ARRAY
40201: PUSH
40202: LD_VAR 0 6
40206: PUSH
40207: LD_INT 2
40209: ARRAY
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: PPUSH
40235: CALL_OW 447
40239: GO 40182
40241: POP
40242: POP
// end ;
40243: LD_VAR 0 5
40247: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40248: LD_EXP 118
40252: NOT
40253: IFFALSE 40303
40255: GO 40257
40257: DISABLE
// begin initHack := true ;
40258: LD_ADDR_EXP 118
40262: PUSH
40263: LD_INT 1
40265: ST_TO_ADDR
// hackTanks := [ ] ;
40266: LD_ADDR_EXP 119
40270: PUSH
40271: EMPTY
40272: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40273: LD_ADDR_EXP 120
40277: PUSH
40278: EMPTY
40279: ST_TO_ADDR
// hackLimit := 3 ;
40280: LD_ADDR_EXP 121
40284: PUSH
40285: LD_INT 3
40287: ST_TO_ADDR
// hackDist := 12 ;
40288: LD_ADDR_EXP 122
40292: PUSH
40293: LD_INT 12
40295: ST_TO_ADDR
// hackCounter := [ ] ;
40296: LD_ADDR_EXP 123
40300: PUSH
40301: EMPTY
40302: ST_TO_ADDR
// end ;
40303: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
40304: LD_EXP 118
40308: PUSH
40309: LD_INT 34
40311: PUSH
40312: LD_EXP 50
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PPUSH
40321: CALL_OW 69
40325: AND
40326: IFFALSE 40581
40328: GO 40330
40330: DISABLE
40331: LD_INT 0
40333: PPUSH
40334: PPUSH
// begin enable ;
40335: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
40336: LD_ADDR_VAR 0 1
40340: PUSH
40341: LD_INT 34
40343: PUSH
40344: LD_EXP 50
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PPUSH
40353: CALL_OW 69
40357: PUSH
40358: FOR_IN
40359: IFFALSE 40579
// begin if not i in hackTanks then
40361: LD_VAR 0 1
40365: PUSH
40366: LD_EXP 119
40370: IN
40371: NOT
40372: IFFALSE 40455
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
40374: LD_ADDR_EXP 119
40378: PUSH
40379: LD_EXP 119
40383: PPUSH
40384: LD_EXP 119
40388: PUSH
40389: LD_INT 1
40391: PLUS
40392: PPUSH
40393: LD_VAR 0 1
40397: PPUSH
40398: CALL_OW 1
40402: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
40403: LD_ADDR_EXP 120
40407: PUSH
40408: LD_EXP 120
40412: PPUSH
40413: LD_EXP 120
40417: PUSH
40418: LD_INT 1
40420: PLUS
40421: PPUSH
40422: EMPTY
40423: PPUSH
40424: CALL_OW 1
40428: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
40429: LD_ADDR_EXP 123
40433: PUSH
40434: LD_EXP 123
40438: PPUSH
40439: LD_EXP 123
40443: PUSH
40444: LD_INT 1
40446: PLUS
40447: PPUSH
40448: EMPTY
40449: PPUSH
40450: CALL_OW 1
40454: ST_TO_ADDR
// end ; if not IsOk ( i ) then
40455: LD_VAR 0 1
40459: PPUSH
40460: CALL_OW 302
40464: NOT
40465: IFFALSE 40478
// begin HackUnlinkAll ( i ) ;
40467: LD_VAR 0 1
40471: PPUSH
40472: CALL 40584 0 1
// continue ;
40476: GO 40358
// end ; HackCheckCapturedStatus ( i ) ;
40478: LD_VAR 0 1
40482: PPUSH
40483: CALL 41027 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
40487: LD_ADDR_VAR 0 2
40491: PUSH
40492: LD_INT 81
40494: PUSH
40495: LD_VAR 0 1
40499: PPUSH
40500: CALL_OW 255
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 33
40511: PUSH
40512: LD_INT 3
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 91
40521: PUSH
40522: LD_VAR 0 1
40526: PUSH
40527: LD_EXP 122
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 50
40539: PUSH
40540: EMPTY
40541: LIST
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: PPUSH
40549: CALL_OW 69
40553: ST_TO_ADDR
// if not tmp then
40554: LD_VAR 0 2
40558: NOT
40559: IFFALSE 40563
// continue ;
40561: GO 40358
// HackLink ( i , tmp ) ;
40563: LD_VAR 0 1
40567: PPUSH
40568: LD_VAR 0 2
40572: PPUSH
40573: CALL 40720 0 2
// end ;
40577: GO 40358
40579: POP
40580: POP
// end ;
40581: PPOPN 2
40583: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
40584: LD_INT 0
40586: PPUSH
40587: PPUSH
40588: PPUSH
// if not hack in hackTanks then
40589: LD_VAR 0 1
40593: PUSH
40594: LD_EXP 119
40598: IN
40599: NOT
40600: IFFALSE 40604
// exit ;
40602: GO 40715
// index := GetElementIndex ( hackTanks , hack ) ;
40604: LD_ADDR_VAR 0 4
40608: PUSH
40609: LD_EXP 119
40613: PPUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: CALL 46135 0 2
40623: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
40624: LD_EXP 120
40628: PUSH
40629: LD_VAR 0 4
40633: ARRAY
40634: IFFALSE 40715
// begin for i in hackTanksCaptured [ index ] do
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_EXP 120
40645: PUSH
40646: LD_VAR 0 4
40650: ARRAY
40651: PUSH
40652: FOR_IN
40653: IFFALSE 40679
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
40655: LD_VAR 0 3
40659: PUSH
40660: LD_INT 1
40662: ARRAY
40663: PPUSH
40664: LD_VAR 0 3
40668: PUSH
40669: LD_INT 2
40671: ARRAY
40672: PPUSH
40673: CALL_OW 235
40677: GO 40652
40679: POP
40680: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
40681: LD_ADDR_EXP 120
40685: PUSH
40686: LD_EXP 120
40690: PPUSH
40691: LD_VAR 0 4
40695: PPUSH
40696: EMPTY
40697: PPUSH
40698: CALL_OW 1
40702: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
40703: LD_VAR 0 1
40707: PPUSH
40708: LD_INT 0
40710: PPUSH
40711: CALL_OW 505
// end ; end ;
40715: LD_VAR 0 2
40719: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
40720: LD_INT 0
40722: PPUSH
40723: PPUSH
40724: PPUSH
// if not hack in hackTanks or not vehicles then
40725: LD_VAR 0 1
40729: PUSH
40730: LD_EXP 119
40734: IN
40735: NOT
40736: PUSH
40737: LD_VAR 0 2
40741: NOT
40742: OR
40743: IFFALSE 40747
// exit ;
40745: GO 41022
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
40747: LD_ADDR_VAR 0 2
40751: PUSH
40752: LD_VAR 0 1
40756: PPUSH
40757: LD_VAR 0 2
40761: PPUSH
40762: LD_INT 1
40764: PPUSH
40765: LD_INT 1
40767: PPUSH
40768: CALL 46785 0 4
40772: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
40773: LD_ADDR_VAR 0 5
40777: PUSH
40778: LD_EXP 119
40782: PPUSH
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL 46135 0 2
40792: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40793: LD_EXP 120
40797: PUSH
40798: LD_VAR 0 5
40802: ARRAY
40803: PUSH
40804: LD_EXP 121
40808: LESS
40809: IFFALSE 40998
// begin for i := 1 to vehicles do
40811: LD_ADDR_VAR 0 4
40815: PUSH
40816: DOUBLE
40817: LD_INT 1
40819: DEC
40820: ST_TO_ADDR
40821: LD_VAR 0 2
40825: PUSH
40826: FOR_TO
40827: IFFALSE 40996
// begin if hackTanksCaptured [ index ] = hackLimit then
40829: LD_EXP 120
40833: PUSH
40834: LD_VAR 0 5
40838: ARRAY
40839: PUSH
40840: LD_EXP 121
40844: EQUAL
40845: IFFALSE 40849
// break ;
40847: GO 40996
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40849: LD_ADDR_EXP 123
40853: PUSH
40854: LD_EXP 123
40858: PPUSH
40859: LD_VAR 0 5
40863: PPUSH
40864: LD_EXP 123
40868: PUSH
40869: LD_VAR 0 5
40873: ARRAY
40874: PUSH
40875: LD_INT 1
40877: PLUS
40878: PPUSH
40879: CALL_OW 1
40883: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40884: LD_ADDR_EXP 120
40888: PUSH
40889: LD_EXP 120
40893: PPUSH
40894: LD_VAR 0 5
40898: PUSH
40899: LD_EXP 120
40903: PUSH
40904: LD_VAR 0 5
40908: ARRAY
40909: PUSH
40910: LD_INT 1
40912: PLUS
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PPUSH
40918: LD_VAR 0 2
40922: PUSH
40923: LD_VAR 0 4
40927: ARRAY
40928: PUSH
40929: LD_VAR 0 2
40933: PUSH
40934: LD_VAR 0 4
40938: ARRAY
40939: PPUSH
40940: CALL_OW 255
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PPUSH
40949: CALL 46350 0 3
40953: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40954: LD_VAR 0 2
40958: PUSH
40959: LD_VAR 0 4
40963: ARRAY
40964: PPUSH
40965: LD_VAR 0 1
40969: PPUSH
40970: CALL_OW 255
40974: PPUSH
40975: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40979: LD_VAR 0 2
40983: PUSH
40984: LD_VAR 0 4
40988: ARRAY
40989: PPUSH
40990: CALL_OW 141
// end ;
40994: GO 40826
40996: POP
40997: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40998: LD_VAR 0 1
41002: PPUSH
41003: LD_EXP 120
41007: PUSH
41008: LD_VAR 0 5
41012: ARRAY
41013: PUSH
41014: LD_INT 0
41016: PLUS
41017: PPUSH
41018: CALL_OW 505
// end ;
41022: LD_VAR 0 3
41026: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41027: LD_INT 0
41029: PPUSH
41030: PPUSH
41031: PPUSH
41032: PPUSH
// if not hack in hackTanks then
41033: LD_VAR 0 1
41037: PUSH
41038: LD_EXP 119
41042: IN
41043: NOT
41044: IFFALSE 41048
// exit ;
41046: GO 41288
// index := GetElementIndex ( hackTanks , hack ) ;
41048: LD_ADDR_VAR 0 4
41052: PUSH
41053: LD_EXP 119
41057: PPUSH
41058: LD_VAR 0 1
41062: PPUSH
41063: CALL 46135 0 2
41067: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41068: LD_ADDR_VAR 0 3
41072: PUSH
41073: DOUBLE
41074: LD_EXP 120
41078: PUSH
41079: LD_VAR 0 4
41083: ARRAY
41084: INC
41085: ST_TO_ADDR
41086: LD_INT 1
41088: PUSH
41089: FOR_DOWNTO
41090: IFFALSE 41262
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41092: LD_ADDR_VAR 0 5
41096: PUSH
41097: LD_EXP 120
41101: PUSH
41102: LD_VAR 0 4
41106: ARRAY
41107: PUSH
41108: LD_VAR 0 3
41112: ARRAY
41113: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
41114: LD_VAR 0 5
41118: PUSH
41119: LD_INT 1
41121: ARRAY
41122: PPUSH
41123: CALL_OW 302
41127: NOT
41128: PUSH
41129: LD_VAR 0 5
41133: PUSH
41134: LD_INT 1
41136: ARRAY
41137: PPUSH
41138: CALL_OW 255
41142: PUSH
41143: LD_VAR 0 1
41147: PPUSH
41148: CALL_OW 255
41152: NONEQUAL
41153: OR
41154: IFFALSE 41260
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
41156: LD_VAR 0 5
41160: PUSH
41161: LD_INT 1
41163: ARRAY
41164: PPUSH
41165: CALL_OW 305
41169: PUSH
41170: LD_VAR 0 5
41174: PUSH
41175: LD_INT 1
41177: ARRAY
41178: PPUSH
41179: CALL_OW 255
41183: PUSH
41184: LD_VAR 0 1
41188: PPUSH
41189: CALL_OW 255
41193: EQUAL
41194: AND
41195: IFFALSE 41219
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
41197: LD_VAR 0 5
41201: PUSH
41202: LD_INT 1
41204: ARRAY
41205: PPUSH
41206: LD_VAR 0 5
41210: PUSH
41211: LD_INT 2
41213: ARRAY
41214: PPUSH
41215: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41219: LD_ADDR_EXP 120
41223: PUSH
41224: LD_EXP 120
41228: PPUSH
41229: LD_VAR 0 4
41233: PPUSH
41234: LD_EXP 120
41238: PUSH
41239: LD_VAR 0 4
41243: ARRAY
41244: PPUSH
41245: LD_VAR 0 3
41249: PPUSH
41250: CALL_OW 3
41254: PPUSH
41255: CALL_OW 1
41259: ST_TO_ADDR
// end ; end ;
41260: GO 41089
41262: POP
41263: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41264: LD_VAR 0 1
41268: PPUSH
41269: LD_EXP 120
41273: PUSH
41274: LD_VAR 0 4
41278: ARRAY
41279: PUSH
41280: LD_INT 0
41282: PLUS
41283: PPUSH
41284: CALL_OW 505
// end ;
41288: LD_VAR 0 2
41292: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
41293: LD_INT 0
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
// if not hack in hackTanks then
41299: LD_VAR 0 1
41303: PUSH
41304: LD_EXP 119
41308: IN
41309: NOT
41310: IFFALSE 41314
// exit ;
41312: GO 41399
// index := GetElementIndex ( hackTanks , hack ) ;
41314: LD_ADDR_VAR 0 5
41318: PUSH
41319: LD_EXP 119
41323: PPUSH
41324: LD_VAR 0 1
41328: PPUSH
41329: CALL 46135 0 2
41333: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
41334: LD_ADDR_VAR 0 4
41338: PUSH
41339: DOUBLE
41340: LD_INT 1
41342: DEC
41343: ST_TO_ADDR
41344: LD_EXP 120
41348: PUSH
41349: LD_VAR 0 5
41353: ARRAY
41354: PUSH
41355: FOR_TO
41356: IFFALSE 41397
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
41358: LD_EXP 120
41362: PUSH
41363: LD_VAR 0 5
41367: ARRAY
41368: PUSH
41369: LD_VAR 0 4
41373: ARRAY
41374: PUSH
41375: LD_INT 1
41377: ARRAY
41378: PUSH
41379: LD_VAR 0 2
41383: EQUAL
41384: IFFALSE 41395
// KillUnit ( vehicle ) ;
41386: LD_VAR 0 2
41390: PPUSH
41391: CALL_OW 66
41395: GO 41355
41397: POP
41398: POP
// end ; end_of_file
41399: LD_VAR 0 3
41403: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41404: LD_INT 0
41406: PPUSH
41407: PPUSH
// if exist_mode then
41408: LD_VAR 0 2
41412: IFFALSE 41437
// unit := CreateCharacter ( prefix & ident ) else
41414: LD_ADDR_VAR 0 5
41418: PUSH
41419: LD_VAR 0 3
41423: PUSH
41424: LD_VAR 0 1
41428: STR
41429: PPUSH
41430: CALL_OW 34
41434: ST_TO_ADDR
41435: GO 41452
// unit := NewCharacter ( ident ) ;
41437: LD_ADDR_VAR 0 5
41441: PUSH
41442: LD_VAR 0 1
41446: PPUSH
41447: CALL_OW 25
41451: ST_TO_ADDR
// result := unit ;
41452: LD_ADDR_VAR 0 4
41456: PUSH
41457: LD_VAR 0 5
41461: ST_TO_ADDR
// end ;
41462: LD_VAR 0 4
41466: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41467: LD_INT 0
41469: PPUSH
41470: PPUSH
// if not side or not nation then
41471: LD_VAR 0 1
41475: NOT
41476: PUSH
41477: LD_VAR 0 2
41481: NOT
41482: OR
41483: IFFALSE 41487
// exit ;
41485: GO 42251
// case nation of nation_american :
41487: LD_VAR 0 2
41491: PUSH
41492: LD_INT 1
41494: DOUBLE
41495: EQUAL
41496: IFTRUE 41500
41498: GO 41714
41500: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41501: LD_ADDR_VAR 0 4
41505: PUSH
41506: LD_INT 35
41508: PUSH
41509: LD_INT 45
41511: PUSH
41512: LD_INT 46
41514: PUSH
41515: LD_INT 47
41517: PUSH
41518: LD_INT 82
41520: PUSH
41521: LD_INT 83
41523: PUSH
41524: LD_INT 84
41526: PUSH
41527: LD_INT 85
41529: PUSH
41530: LD_INT 86
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 6
41541: PUSH
41542: LD_INT 15
41544: PUSH
41545: LD_INT 16
41547: PUSH
41548: LD_INT 7
41550: PUSH
41551: LD_INT 12
41553: PUSH
41554: LD_INT 13
41556: PUSH
41557: LD_INT 10
41559: PUSH
41560: LD_INT 14
41562: PUSH
41563: LD_INT 20
41565: PUSH
41566: LD_INT 21
41568: PUSH
41569: LD_INT 22
41571: PUSH
41572: LD_INT 25
41574: PUSH
41575: LD_INT 32
41577: PUSH
41578: LD_INT 27
41580: PUSH
41581: LD_INT 36
41583: PUSH
41584: LD_INT 69
41586: PUSH
41587: LD_INT 39
41589: PUSH
41590: LD_INT 34
41592: PUSH
41593: LD_INT 40
41595: PUSH
41596: LD_INT 48
41598: PUSH
41599: LD_INT 49
41601: PUSH
41602: LD_INT 50
41604: PUSH
41605: LD_INT 51
41607: PUSH
41608: LD_INT 52
41610: PUSH
41611: LD_INT 53
41613: PUSH
41614: LD_INT 54
41616: PUSH
41617: LD_INT 55
41619: PUSH
41620: LD_INT 56
41622: PUSH
41623: LD_INT 57
41625: PUSH
41626: LD_INT 58
41628: PUSH
41629: LD_INT 59
41631: PUSH
41632: LD_INT 60
41634: PUSH
41635: LD_INT 61
41637: PUSH
41638: LD_INT 62
41640: PUSH
41641: LD_INT 80
41643: PUSH
41644: LD_INT 82
41646: PUSH
41647: LD_INT 83
41649: PUSH
41650: LD_INT 84
41652: PUSH
41653: LD_INT 85
41655: PUSH
41656: LD_INT 86
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: ST_TO_ADDR
41712: GO 42175
41714: LD_INT 2
41716: DOUBLE
41717: EQUAL
41718: IFTRUE 41722
41720: GO 41944
41722: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
41723: LD_ADDR_VAR 0 4
41727: PUSH
41728: LD_INT 35
41730: PUSH
41731: LD_INT 45
41733: PUSH
41734: LD_INT 46
41736: PUSH
41737: LD_INT 47
41739: PUSH
41740: LD_INT 82
41742: PUSH
41743: LD_INT 83
41745: PUSH
41746: LD_INT 84
41748: PUSH
41749: LD_INT 85
41751: PUSH
41752: LD_INT 87
41754: PUSH
41755: LD_INT 70
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: LD_INT 11
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: LD_INT 4
41769: PUSH
41770: LD_INT 5
41772: PUSH
41773: LD_INT 6
41775: PUSH
41776: LD_INT 15
41778: PUSH
41779: LD_INT 18
41781: PUSH
41782: LD_INT 7
41784: PUSH
41785: LD_INT 17
41787: PUSH
41788: LD_INT 8
41790: PUSH
41791: LD_INT 20
41793: PUSH
41794: LD_INT 21
41796: PUSH
41797: LD_INT 22
41799: PUSH
41800: LD_INT 72
41802: PUSH
41803: LD_INT 26
41805: PUSH
41806: LD_INT 69
41808: PUSH
41809: LD_INT 39
41811: PUSH
41812: LD_INT 40
41814: PUSH
41815: LD_INT 41
41817: PUSH
41818: LD_INT 42
41820: PUSH
41821: LD_INT 43
41823: PUSH
41824: LD_INT 48
41826: PUSH
41827: LD_INT 49
41829: PUSH
41830: LD_INT 50
41832: PUSH
41833: LD_INT 51
41835: PUSH
41836: LD_INT 52
41838: PUSH
41839: LD_INT 53
41841: PUSH
41842: LD_INT 54
41844: PUSH
41845: LD_INT 55
41847: PUSH
41848: LD_INT 56
41850: PUSH
41851: LD_INT 60
41853: PUSH
41854: LD_INT 61
41856: PUSH
41857: LD_INT 62
41859: PUSH
41860: LD_INT 66
41862: PUSH
41863: LD_INT 67
41865: PUSH
41866: LD_INT 68
41868: PUSH
41869: LD_INT 81
41871: PUSH
41872: LD_INT 82
41874: PUSH
41875: LD_INT 83
41877: PUSH
41878: LD_INT 84
41880: PUSH
41881: LD_INT 85
41883: PUSH
41884: LD_INT 87
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: ST_TO_ADDR
41942: GO 42175
41944: LD_INT 3
41946: DOUBLE
41947: EQUAL
41948: IFTRUE 41952
41950: GO 42174
41952: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41953: LD_ADDR_VAR 0 4
41957: PUSH
41958: LD_INT 46
41960: PUSH
41961: LD_INT 47
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: LD_INT 82
41972: PUSH
41973: LD_INT 83
41975: PUSH
41976: LD_INT 84
41978: PUSH
41979: LD_INT 85
41981: PUSH
41982: LD_INT 86
41984: PUSH
41985: LD_INT 11
41987: PUSH
41988: LD_INT 9
41990: PUSH
41991: LD_INT 20
41993: PUSH
41994: LD_INT 19
41996: PUSH
41997: LD_INT 21
41999: PUSH
42000: LD_INT 24
42002: PUSH
42003: LD_INT 22
42005: PUSH
42006: LD_INT 25
42008: PUSH
42009: LD_INT 28
42011: PUSH
42012: LD_INT 29
42014: PUSH
42015: LD_INT 30
42017: PUSH
42018: LD_INT 31
42020: PUSH
42021: LD_INT 37
42023: PUSH
42024: LD_INT 38
42026: PUSH
42027: LD_INT 32
42029: PUSH
42030: LD_INT 27
42032: PUSH
42033: LD_INT 33
42035: PUSH
42036: LD_INT 69
42038: PUSH
42039: LD_INT 39
42041: PUSH
42042: LD_INT 34
42044: PUSH
42045: LD_INT 40
42047: PUSH
42048: LD_INT 71
42050: PUSH
42051: LD_INT 23
42053: PUSH
42054: LD_INT 44
42056: PUSH
42057: LD_INT 48
42059: PUSH
42060: LD_INT 49
42062: PUSH
42063: LD_INT 50
42065: PUSH
42066: LD_INT 51
42068: PUSH
42069: LD_INT 52
42071: PUSH
42072: LD_INT 53
42074: PUSH
42075: LD_INT 54
42077: PUSH
42078: LD_INT 55
42080: PUSH
42081: LD_INT 56
42083: PUSH
42084: LD_INT 57
42086: PUSH
42087: LD_INT 58
42089: PUSH
42090: LD_INT 59
42092: PUSH
42093: LD_INT 63
42095: PUSH
42096: LD_INT 64
42098: PUSH
42099: LD_INT 65
42101: PUSH
42102: LD_INT 82
42104: PUSH
42105: LD_INT 83
42107: PUSH
42108: LD_INT 84
42110: PUSH
42111: LD_INT 85
42113: PUSH
42114: LD_INT 86
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: ST_TO_ADDR
42172: GO 42175
42174: POP
// if state > - 1 and state < 3 then
42175: LD_VAR 0 3
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: GREATER
42184: PUSH
42185: LD_VAR 0 3
42189: PUSH
42190: LD_INT 3
42192: LESS
42193: AND
42194: IFFALSE 42251
// for i in result do
42196: LD_ADDR_VAR 0 5
42200: PUSH
42201: LD_VAR 0 4
42205: PUSH
42206: FOR_IN
42207: IFFALSE 42249
// if GetTech ( i , side ) <> state then
42209: LD_VAR 0 5
42213: PPUSH
42214: LD_VAR 0 1
42218: PPUSH
42219: CALL_OW 321
42223: PUSH
42224: LD_VAR 0 3
42228: NONEQUAL
42229: IFFALSE 42247
// result := result diff i ;
42231: LD_ADDR_VAR 0 4
42235: PUSH
42236: LD_VAR 0 4
42240: PUSH
42241: LD_VAR 0 5
42245: DIFF
42246: ST_TO_ADDR
42247: GO 42206
42249: POP
42250: POP
// end ;
42251: LD_VAR 0 4
42255: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42256: LD_INT 0
42258: PPUSH
42259: PPUSH
42260: PPUSH
// result := true ;
42261: LD_ADDR_VAR 0 3
42265: PUSH
42266: LD_INT 1
42268: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42269: LD_ADDR_VAR 0 5
42273: PUSH
42274: LD_VAR 0 2
42278: PPUSH
42279: CALL_OW 480
42283: ST_TO_ADDR
// if not tmp then
42284: LD_VAR 0 5
42288: NOT
42289: IFFALSE 42293
// exit ;
42291: GO 42342
// for i in tmp do
42293: LD_ADDR_VAR 0 4
42297: PUSH
42298: LD_VAR 0 5
42302: PUSH
42303: FOR_IN
42304: IFFALSE 42340
// if GetTech ( i , side ) <> state_researched then
42306: LD_VAR 0 4
42310: PPUSH
42311: LD_VAR 0 1
42315: PPUSH
42316: CALL_OW 321
42320: PUSH
42321: LD_INT 2
42323: NONEQUAL
42324: IFFALSE 42338
// begin result := false ;
42326: LD_ADDR_VAR 0 3
42330: PUSH
42331: LD_INT 0
42333: ST_TO_ADDR
// exit ;
42334: POP
42335: POP
42336: GO 42342
// end ;
42338: GO 42303
42340: POP
42341: POP
// end ;
42342: LD_VAR 0 3
42346: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42347: LD_INT 0
42349: PPUSH
42350: PPUSH
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
42357: PPUSH
42358: PPUSH
42359: PPUSH
42360: PPUSH
42361: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42362: LD_VAR 0 1
42366: NOT
42367: PUSH
42368: LD_VAR 0 1
42372: PPUSH
42373: CALL_OW 257
42377: PUSH
42378: LD_INT 9
42380: NONEQUAL
42381: OR
42382: IFFALSE 42386
// exit ;
42384: GO 42959
// side := GetSide ( unit ) ;
42386: LD_ADDR_VAR 0 9
42390: PUSH
42391: LD_VAR 0 1
42395: PPUSH
42396: CALL_OW 255
42400: ST_TO_ADDR
// tech_space := tech_spacanom ;
42401: LD_ADDR_VAR 0 12
42405: PUSH
42406: LD_INT 29
42408: ST_TO_ADDR
// tech_time := tech_taurad ;
42409: LD_ADDR_VAR 0 13
42413: PUSH
42414: LD_INT 28
42416: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42417: LD_ADDR_VAR 0 11
42421: PUSH
42422: LD_VAR 0 1
42426: PPUSH
42427: CALL_OW 310
42431: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42432: LD_VAR 0 11
42436: PPUSH
42437: CALL_OW 247
42441: PUSH
42442: LD_INT 2
42444: EQUAL
42445: IFFALSE 42449
// exit ;
42447: GO 42959
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42449: LD_ADDR_VAR 0 8
42453: PUSH
42454: LD_INT 81
42456: PUSH
42457: LD_VAR 0 9
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: LD_INT 21
42471: PUSH
42472: LD_INT 3
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PPUSH
42487: CALL_OW 69
42491: ST_TO_ADDR
// if not tmp then
42492: LD_VAR 0 8
42496: NOT
42497: IFFALSE 42501
// exit ;
42499: GO 42959
// if in_unit then
42501: LD_VAR 0 11
42505: IFFALSE 42529
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42507: LD_ADDR_VAR 0 10
42511: PUSH
42512: LD_VAR 0 8
42516: PPUSH
42517: LD_VAR 0 11
42521: PPUSH
42522: CALL_OW 74
42526: ST_TO_ADDR
42527: GO 42549
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42529: LD_ADDR_VAR 0 10
42533: PUSH
42534: LD_VAR 0 8
42538: PPUSH
42539: LD_VAR 0 1
42543: PPUSH
42544: CALL_OW 74
42548: ST_TO_ADDR
// if not enemy then
42549: LD_VAR 0 10
42553: NOT
42554: IFFALSE 42558
// exit ;
42556: GO 42959
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42558: LD_VAR 0 11
42562: PUSH
42563: LD_VAR 0 11
42567: PPUSH
42568: LD_VAR 0 10
42572: PPUSH
42573: CALL_OW 296
42577: PUSH
42578: LD_INT 13
42580: GREATER
42581: AND
42582: PUSH
42583: LD_VAR 0 1
42587: PPUSH
42588: LD_VAR 0 10
42592: PPUSH
42593: CALL_OW 296
42597: PUSH
42598: LD_INT 12
42600: GREATER
42601: OR
42602: IFFALSE 42606
// exit ;
42604: GO 42959
// missile := [ 1 ] ;
42606: LD_ADDR_VAR 0 14
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42617: LD_VAR 0 9
42621: PPUSH
42622: LD_VAR 0 12
42626: PPUSH
42627: CALL_OW 325
42631: IFFALSE 42660
// missile := Insert ( missile , missile + 1 , 2 ) ;
42633: LD_ADDR_VAR 0 14
42637: PUSH
42638: LD_VAR 0 14
42642: PPUSH
42643: LD_VAR 0 14
42647: PUSH
42648: LD_INT 1
42650: PLUS
42651: PPUSH
42652: LD_INT 2
42654: PPUSH
42655: CALL_OW 2
42659: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42660: LD_VAR 0 9
42664: PPUSH
42665: LD_VAR 0 13
42669: PPUSH
42670: CALL_OW 325
42674: PUSH
42675: LD_VAR 0 10
42679: PPUSH
42680: CALL_OW 255
42684: PPUSH
42685: LD_VAR 0 13
42689: PPUSH
42690: CALL_OW 325
42694: NOT
42695: AND
42696: IFFALSE 42725
// missile := Insert ( missile , missile + 1 , 3 ) ;
42698: LD_ADDR_VAR 0 14
42702: PUSH
42703: LD_VAR 0 14
42707: PPUSH
42708: LD_VAR 0 14
42712: PUSH
42713: LD_INT 1
42715: PLUS
42716: PPUSH
42717: LD_INT 3
42719: PPUSH
42720: CALL_OW 2
42724: ST_TO_ADDR
// if missile < 2 then
42725: LD_VAR 0 14
42729: PUSH
42730: LD_INT 2
42732: LESS
42733: IFFALSE 42737
// exit ;
42735: GO 42959
// x := GetX ( enemy ) ;
42737: LD_ADDR_VAR 0 4
42741: PUSH
42742: LD_VAR 0 10
42746: PPUSH
42747: CALL_OW 250
42751: ST_TO_ADDR
// y := GetY ( enemy ) ;
42752: LD_ADDR_VAR 0 5
42756: PUSH
42757: LD_VAR 0 10
42761: PPUSH
42762: CALL_OW 251
42766: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42767: LD_ADDR_VAR 0 6
42771: PUSH
42772: LD_VAR 0 4
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PPUSH
42781: LD_INT 1
42783: PPUSH
42784: CALL_OW 12
42788: PLUS
42789: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42790: LD_ADDR_VAR 0 7
42794: PUSH
42795: LD_VAR 0 5
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PPUSH
42804: LD_INT 1
42806: PPUSH
42807: CALL_OW 12
42811: PLUS
42812: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42813: LD_VAR 0 6
42817: PPUSH
42818: LD_VAR 0 7
42822: PPUSH
42823: CALL_OW 488
42827: NOT
42828: IFFALSE 42850
// begin _x := x ;
42830: LD_ADDR_VAR 0 6
42834: PUSH
42835: LD_VAR 0 4
42839: ST_TO_ADDR
// _y := y ;
42840: LD_ADDR_VAR 0 7
42844: PUSH
42845: LD_VAR 0 5
42849: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_INT 1
42857: PPUSH
42858: LD_VAR 0 14
42862: PPUSH
42863: CALL_OW 12
42867: ST_TO_ADDR
// case i of 1 :
42868: LD_VAR 0 3
42872: PUSH
42873: LD_INT 1
42875: DOUBLE
42876: EQUAL
42877: IFTRUE 42881
42879: GO 42898
42881: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42882: LD_VAR 0 1
42886: PPUSH
42887: LD_VAR 0 10
42891: PPUSH
42892: CALL_OW 115
42896: GO 42959
42898: LD_INT 2
42900: DOUBLE
42901: EQUAL
42902: IFTRUE 42906
42904: GO 42928
42906: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42907: LD_VAR 0 1
42911: PPUSH
42912: LD_VAR 0 6
42916: PPUSH
42917: LD_VAR 0 7
42921: PPUSH
42922: CALL_OW 153
42926: GO 42959
42928: LD_INT 3
42930: DOUBLE
42931: EQUAL
42932: IFTRUE 42936
42934: GO 42958
42936: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42937: LD_VAR 0 1
42941: PPUSH
42942: LD_VAR 0 6
42946: PPUSH
42947: LD_VAR 0 7
42951: PPUSH
42952: CALL_OW 154
42956: GO 42959
42958: POP
// end ;
42959: LD_VAR 0 2
42963: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42964: LD_INT 0
42966: PPUSH
42967: PPUSH
42968: PPUSH
42969: PPUSH
42970: PPUSH
42971: PPUSH
// if not unit or not building then
42972: LD_VAR 0 1
42976: NOT
42977: PUSH
42978: LD_VAR 0 2
42982: NOT
42983: OR
42984: IFFALSE 42988
// exit ;
42986: GO 43146
// x := GetX ( building ) ;
42988: LD_ADDR_VAR 0 5
42992: PUSH
42993: LD_VAR 0 2
42997: PPUSH
42998: CALL_OW 250
43002: ST_TO_ADDR
// y := GetY ( building ) ;
43003: LD_ADDR_VAR 0 6
43007: PUSH
43008: LD_VAR 0 2
43012: PPUSH
43013: CALL_OW 251
43017: ST_TO_ADDR
// for i = 0 to 5 do
43018: LD_ADDR_VAR 0 4
43022: PUSH
43023: DOUBLE
43024: LD_INT 0
43026: DEC
43027: ST_TO_ADDR
43028: LD_INT 5
43030: PUSH
43031: FOR_TO
43032: IFFALSE 43144
// begin _x := ShiftX ( x , i , 3 ) ;
43034: LD_ADDR_VAR 0 7
43038: PUSH
43039: LD_VAR 0 5
43043: PPUSH
43044: LD_VAR 0 4
43048: PPUSH
43049: LD_INT 3
43051: PPUSH
43052: CALL_OW 272
43056: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43057: LD_ADDR_VAR 0 8
43061: PUSH
43062: LD_VAR 0 6
43066: PPUSH
43067: LD_VAR 0 4
43071: PPUSH
43072: LD_INT 3
43074: PPUSH
43075: CALL_OW 273
43079: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43080: LD_VAR 0 7
43084: PPUSH
43085: LD_VAR 0 8
43089: PPUSH
43090: CALL_OW 488
43094: NOT
43095: IFFALSE 43099
// continue ;
43097: GO 43031
// if HexInfo ( _x , _y ) = 0 then
43099: LD_VAR 0 7
43103: PPUSH
43104: LD_VAR 0 8
43108: PPUSH
43109: CALL_OW 428
43113: PUSH
43114: LD_INT 0
43116: EQUAL
43117: IFFALSE 43142
// begin ComMoveXY ( unit , _x , _y ) ;
43119: LD_VAR 0 1
43123: PPUSH
43124: LD_VAR 0 7
43128: PPUSH
43129: LD_VAR 0 8
43133: PPUSH
43134: CALL_OW 111
// exit ;
43138: POP
43139: POP
43140: GO 43146
// end ; end ;
43142: GO 43031
43144: POP
43145: POP
// end ;
43146: LD_VAR 0 3
43150: RET
// export function ScanBase ( side , base_area ) ; begin
43151: LD_INT 0
43153: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43154: LD_ADDR_VAR 0 3
43158: PUSH
43159: LD_VAR 0 2
43163: PPUSH
43164: LD_INT 81
43166: PUSH
43167: LD_VAR 0 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PPUSH
43176: CALL_OW 70
43180: ST_TO_ADDR
// end ;
43181: LD_VAR 0 3
43185: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43186: LD_INT 0
43188: PPUSH
43189: PPUSH
43190: PPUSH
43191: PPUSH
// result := false ;
43192: LD_ADDR_VAR 0 2
43196: PUSH
43197: LD_INT 0
43199: ST_TO_ADDR
// side := GetSide ( unit ) ;
43200: LD_ADDR_VAR 0 3
43204: PUSH
43205: LD_VAR 0 1
43209: PPUSH
43210: CALL_OW 255
43214: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43215: LD_ADDR_VAR 0 4
43219: PUSH
43220: LD_VAR 0 1
43224: PPUSH
43225: CALL_OW 248
43229: ST_TO_ADDR
// case nat of 1 :
43230: LD_VAR 0 4
43234: PUSH
43235: LD_INT 1
43237: DOUBLE
43238: EQUAL
43239: IFTRUE 43243
43241: GO 43254
43243: POP
// tech := tech_lassight ; 2 :
43244: LD_ADDR_VAR 0 5
43248: PUSH
43249: LD_INT 12
43251: ST_TO_ADDR
43252: GO 43293
43254: LD_INT 2
43256: DOUBLE
43257: EQUAL
43258: IFTRUE 43262
43260: GO 43273
43262: POP
// tech := tech_mortar ; 3 :
43263: LD_ADDR_VAR 0 5
43267: PUSH
43268: LD_INT 41
43270: ST_TO_ADDR
43271: GO 43293
43273: LD_INT 3
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43281
43279: GO 43292
43281: POP
// tech := tech_bazooka ; end ;
43282: LD_ADDR_VAR 0 5
43286: PUSH
43287: LD_INT 44
43289: ST_TO_ADDR
43290: GO 43293
43292: POP
// if Researched ( side , tech ) then
43293: LD_VAR 0 3
43297: PPUSH
43298: LD_VAR 0 5
43302: PPUSH
43303: CALL_OW 325
43307: IFFALSE 43334
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43309: LD_ADDR_VAR 0 2
43313: PUSH
43314: LD_INT 5
43316: PUSH
43317: LD_INT 8
43319: PUSH
43320: LD_INT 9
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: PUSH
43328: LD_VAR 0 4
43332: ARRAY
43333: ST_TO_ADDR
// end ;
43334: LD_VAR 0 2
43338: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43339: LD_INT 0
43341: PPUSH
43342: PPUSH
43343: PPUSH
// if not mines then
43344: LD_VAR 0 2
43348: NOT
43349: IFFALSE 43353
// exit ;
43351: GO 43497
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43353: LD_ADDR_VAR 0 5
43357: PUSH
43358: LD_INT 81
43360: PUSH
43361: LD_VAR 0 1
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 3
43372: PUSH
43373: LD_INT 21
43375: PUSH
43376: LD_INT 3
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PPUSH
43391: CALL_OW 69
43395: ST_TO_ADDR
// for i in mines do
43396: LD_ADDR_VAR 0 4
43400: PUSH
43401: LD_VAR 0 2
43405: PUSH
43406: FOR_IN
43407: IFFALSE 43495
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43409: LD_VAR 0 4
43413: PUSH
43414: LD_INT 1
43416: ARRAY
43417: PPUSH
43418: LD_VAR 0 4
43422: PUSH
43423: LD_INT 2
43425: ARRAY
43426: PPUSH
43427: CALL_OW 458
43431: NOT
43432: IFFALSE 43436
// continue ;
43434: GO 43406
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43436: LD_VAR 0 4
43440: PUSH
43441: LD_INT 1
43443: ARRAY
43444: PPUSH
43445: LD_VAR 0 4
43449: PUSH
43450: LD_INT 2
43452: ARRAY
43453: PPUSH
43454: CALL_OW 428
43458: PUSH
43459: LD_VAR 0 5
43463: IN
43464: IFFALSE 43493
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43466: LD_VAR 0 4
43470: PUSH
43471: LD_INT 1
43473: ARRAY
43474: PPUSH
43475: LD_VAR 0 4
43479: PUSH
43480: LD_INT 2
43482: ARRAY
43483: PPUSH
43484: LD_VAR 0 1
43488: PPUSH
43489: CALL_OW 456
// end ;
43493: GO 43406
43495: POP
43496: POP
// end ;
43497: LD_VAR 0 3
43501: RET
// export function Count ( array ) ; var i ; begin
43502: LD_INT 0
43504: PPUSH
43505: PPUSH
// result := 0 ;
43506: LD_ADDR_VAR 0 2
43510: PUSH
43511: LD_INT 0
43513: ST_TO_ADDR
// for i in array do
43514: LD_ADDR_VAR 0 3
43518: PUSH
43519: LD_VAR 0 1
43523: PUSH
43524: FOR_IN
43525: IFFALSE 43549
// if i then
43527: LD_VAR 0 3
43531: IFFALSE 43547
// result := result + 1 ;
43533: LD_ADDR_VAR 0 2
43537: PUSH
43538: LD_VAR 0 2
43542: PUSH
43543: LD_INT 1
43545: PLUS
43546: ST_TO_ADDR
43547: GO 43524
43549: POP
43550: POP
// end ;
43551: LD_VAR 0 2
43555: RET
// export function IsEmpty ( building ) ; begin
43556: LD_INT 0
43558: PPUSH
// if not building then
43559: LD_VAR 0 1
43563: NOT
43564: IFFALSE 43568
// exit ;
43566: GO 43611
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43568: LD_ADDR_VAR 0 2
43572: PUSH
43573: LD_VAR 0 1
43577: PUSH
43578: LD_INT 22
43580: PUSH
43581: LD_VAR 0 1
43585: PPUSH
43586: CALL_OW 255
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 58
43597: PUSH
43598: EMPTY
43599: LIST
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PPUSH
43605: CALL_OW 69
43609: IN
43610: ST_TO_ADDR
// end ;
43611: LD_VAR 0 2
43615: RET
// export function IsNotFull ( building ) ; begin
43616: LD_INT 0
43618: PPUSH
// if not building then
43619: LD_VAR 0 1
43623: NOT
43624: IFFALSE 43628
// exit ;
43626: GO 43647
// result := UnitsInside ( building ) < 6 ;
43628: LD_ADDR_VAR 0 2
43632: PUSH
43633: LD_VAR 0 1
43637: PPUSH
43638: CALL_OW 313
43642: PUSH
43643: LD_INT 6
43645: LESS
43646: ST_TO_ADDR
// end ;
43647: LD_VAR 0 2
43651: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43652: LD_INT 0
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
// tmp := [ ] ;
43658: LD_ADDR_VAR 0 3
43662: PUSH
43663: EMPTY
43664: ST_TO_ADDR
// list := [ ] ;
43665: LD_ADDR_VAR 0 5
43669: PUSH
43670: EMPTY
43671: ST_TO_ADDR
// for i = 16 to 25 do
43672: LD_ADDR_VAR 0 4
43676: PUSH
43677: DOUBLE
43678: LD_INT 16
43680: DEC
43681: ST_TO_ADDR
43682: LD_INT 25
43684: PUSH
43685: FOR_TO
43686: IFFALSE 43759
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43688: LD_ADDR_VAR 0 3
43692: PUSH
43693: LD_VAR 0 3
43697: PUSH
43698: LD_INT 22
43700: PUSH
43701: LD_VAR 0 1
43705: PPUSH
43706: CALL_OW 255
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 91
43717: PUSH
43718: LD_VAR 0 1
43722: PUSH
43723: LD_INT 6
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 30
43733: PUSH
43734: LD_VAR 0 4
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: LIST
43747: PUSH
43748: EMPTY
43749: LIST
43750: PPUSH
43751: CALL_OW 69
43755: ADD
43756: ST_TO_ADDR
43757: GO 43685
43759: POP
43760: POP
// for i = 1 to tmp do
43761: LD_ADDR_VAR 0 4
43765: PUSH
43766: DOUBLE
43767: LD_INT 1
43769: DEC
43770: ST_TO_ADDR
43771: LD_VAR 0 3
43775: PUSH
43776: FOR_TO
43777: IFFALSE 43865
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43779: LD_ADDR_VAR 0 5
43783: PUSH
43784: LD_VAR 0 5
43788: PUSH
43789: LD_VAR 0 3
43793: PUSH
43794: LD_VAR 0 4
43798: ARRAY
43799: PPUSH
43800: CALL_OW 266
43804: PUSH
43805: LD_VAR 0 3
43809: PUSH
43810: LD_VAR 0 4
43814: ARRAY
43815: PPUSH
43816: CALL_OW 250
43820: PUSH
43821: LD_VAR 0 3
43825: PUSH
43826: LD_VAR 0 4
43830: ARRAY
43831: PPUSH
43832: CALL_OW 251
43836: PUSH
43837: LD_VAR 0 3
43841: PUSH
43842: LD_VAR 0 4
43846: ARRAY
43847: PPUSH
43848: CALL_OW 254
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: PUSH
43859: EMPTY
43860: LIST
43861: ADD
43862: ST_TO_ADDR
43863: GO 43776
43865: POP
43866: POP
// result := list ;
43867: LD_ADDR_VAR 0 2
43871: PUSH
43872: LD_VAR 0 5
43876: ST_TO_ADDR
// end ;
43877: LD_VAR 0 2
43881: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43882: LD_INT 0
43884: PPUSH
43885: PPUSH
43886: PPUSH
43887: PPUSH
43888: PPUSH
43889: PPUSH
43890: PPUSH
// if not factory then
43891: LD_VAR 0 1
43895: NOT
43896: IFFALSE 43900
// exit ;
43898: GO 44493
// if control = control_apeman then
43900: LD_VAR 0 4
43904: PUSH
43905: LD_INT 5
43907: EQUAL
43908: IFFALSE 44017
// begin tmp := UnitsInside ( factory ) ;
43910: LD_ADDR_VAR 0 8
43914: PUSH
43915: LD_VAR 0 1
43919: PPUSH
43920: CALL_OW 313
43924: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43925: LD_VAR 0 8
43929: PPUSH
43930: LD_INT 25
43932: PUSH
43933: LD_INT 12
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PPUSH
43940: CALL_OW 72
43944: NOT
43945: IFFALSE 43955
// control := control_manual ;
43947: LD_ADDR_VAR 0 4
43951: PUSH
43952: LD_INT 1
43954: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43955: LD_ADDR_VAR 0 8
43959: PUSH
43960: LD_VAR 0 1
43964: PPUSH
43965: CALL 43652 0 1
43969: ST_TO_ADDR
// if tmp then
43970: LD_VAR 0 8
43974: IFFALSE 44017
// begin for i in tmp do
43976: LD_ADDR_VAR 0 7
43980: PUSH
43981: LD_VAR 0 8
43985: PUSH
43986: FOR_IN
43987: IFFALSE 44015
// if i [ 1 ] = b_ext_radio then
43989: LD_VAR 0 7
43993: PUSH
43994: LD_INT 1
43996: ARRAY
43997: PUSH
43998: LD_INT 22
44000: EQUAL
44001: IFFALSE 44013
// begin control := control_remote ;
44003: LD_ADDR_VAR 0 4
44007: PUSH
44008: LD_INT 2
44010: ST_TO_ADDR
// break ;
44011: GO 44015
// end ;
44013: GO 43986
44015: POP
44016: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44017: LD_VAR 0 1
44021: PPUSH
44022: LD_VAR 0 2
44026: PPUSH
44027: LD_VAR 0 3
44031: PPUSH
44032: LD_VAR 0 4
44036: PPUSH
44037: LD_VAR 0 5
44041: PPUSH
44042: CALL_OW 448
44046: IFFALSE 44081
// begin result := [ chassis , engine , control , weapon ] ;
44048: LD_ADDR_VAR 0 6
44052: PUSH
44053: LD_VAR 0 2
44057: PUSH
44058: LD_VAR 0 3
44062: PUSH
44063: LD_VAR 0 4
44067: PUSH
44068: LD_VAR 0 5
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: ST_TO_ADDR
// exit ;
44079: GO 44493
// end ; _chassis := AvailableChassisList ( factory ) ;
44081: LD_ADDR_VAR 0 9
44085: PUSH
44086: LD_VAR 0 1
44090: PPUSH
44091: CALL_OW 475
44095: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44096: LD_ADDR_VAR 0 11
44100: PUSH
44101: LD_VAR 0 1
44105: PPUSH
44106: CALL_OW 476
44110: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44111: LD_ADDR_VAR 0 12
44115: PUSH
44116: LD_VAR 0 1
44120: PPUSH
44121: CALL_OW 477
44125: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44126: LD_ADDR_VAR 0 10
44130: PUSH
44131: LD_VAR 0 1
44135: PPUSH
44136: CALL_OW 478
44140: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44141: LD_VAR 0 9
44145: NOT
44146: PUSH
44147: LD_VAR 0 11
44151: NOT
44152: OR
44153: PUSH
44154: LD_VAR 0 12
44158: NOT
44159: OR
44160: PUSH
44161: LD_VAR 0 10
44165: NOT
44166: OR
44167: IFFALSE 44202
// begin result := [ chassis , engine , control , weapon ] ;
44169: LD_ADDR_VAR 0 6
44173: PUSH
44174: LD_VAR 0 2
44178: PUSH
44179: LD_VAR 0 3
44183: PUSH
44184: LD_VAR 0 4
44188: PUSH
44189: LD_VAR 0 5
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: ST_TO_ADDR
// exit ;
44200: GO 44493
// end ; if not chassis in _chassis then
44202: LD_VAR 0 2
44206: PUSH
44207: LD_VAR 0 9
44211: IN
44212: NOT
44213: IFFALSE 44239
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44215: LD_ADDR_VAR 0 2
44219: PUSH
44220: LD_VAR 0 9
44224: PUSH
44225: LD_INT 1
44227: PPUSH
44228: LD_VAR 0 9
44232: PPUSH
44233: CALL_OW 12
44237: ARRAY
44238: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44239: LD_VAR 0 2
44243: PPUSH
44244: LD_VAR 0 3
44248: PPUSH
44249: CALL 44498 0 2
44253: NOT
44254: IFFALSE 44313
// repeat engine := _engine [ 1 ] ;
44256: LD_ADDR_VAR 0 3
44260: PUSH
44261: LD_VAR 0 11
44265: PUSH
44266: LD_INT 1
44268: ARRAY
44269: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44270: LD_ADDR_VAR 0 11
44274: PUSH
44275: LD_VAR 0 11
44279: PPUSH
44280: LD_INT 1
44282: PPUSH
44283: CALL_OW 3
44287: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44288: LD_VAR 0 2
44292: PPUSH
44293: LD_VAR 0 3
44297: PPUSH
44298: CALL 44498 0 2
44302: PUSH
44303: LD_VAR 0 11
44307: PUSH
44308: EMPTY
44309: EQUAL
44310: OR
44311: IFFALSE 44256
// if not control in _control then
44313: LD_VAR 0 4
44317: PUSH
44318: LD_VAR 0 12
44322: IN
44323: NOT
44324: IFFALSE 44350
// control := _control [ rand ( 1 , _control ) ] ;
44326: LD_ADDR_VAR 0 4
44330: PUSH
44331: LD_VAR 0 12
44335: PUSH
44336: LD_INT 1
44338: PPUSH
44339: LD_VAR 0 12
44343: PPUSH
44344: CALL_OW 12
44348: ARRAY
44349: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44350: LD_VAR 0 2
44354: PPUSH
44355: LD_VAR 0 5
44359: PPUSH
44360: CALL 44718 0 2
44364: NOT
44365: IFFALSE 44424
// repeat weapon := _weapon [ 1 ] ;
44367: LD_ADDR_VAR 0 5
44371: PUSH
44372: LD_VAR 0 10
44376: PUSH
44377: LD_INT 1
44379: ARRAY
44380: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44381: LD_ADDR_VAR 0 10
44385: PUSH
44386: LD_VAR 0 10
44390: PPUSH
44391: LD_INT 1
44393: PPUSH
44394: CALL_OW 3
44398: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44399: LD_VAR 0 2
44403: PPUSH
44404: LD_VAR 0 5
44408: PPUSH
44409: CALL 44718 0 2
44413: PUSH
44414: LD_VAR 0 10
44418: PUSH
44419: EMPTY
44420: EQUAL
44421: OR
44422: IFFALSE 44367
// result := [ ] ;
44424: LD_ADDR_VAR 0 6
44428: PUSH
44429: EMPTY
44430: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44431: LD_VAR 0 1
44435: PPUSH
44436: LD_VAR 0 2
44440: PPUSH
44441: LD_VAR 0 3
44445: PPUSH
44446: LD_VAR 0 4
44450: PPUSH
44451: LD_VAR 0 5
44455: PPUSH
44456: CALL_OW 448
44460: IFFALSE 44493
// result := [ chassis , engine , control , weapon ] ;
44462: LD_ADDR_VAR 0 6
44466: PUSH
44467: LD_VAR 0 2
44471: PUSH
44472: LD_VAR 0 3
44476: PUSH
44477: LD_VAR 0 4
44481: PUSH
44482: LD_VAR 0 5
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: ST_TO_ADDR
// end ;
44493: LD_VAR 0 6
44497: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44498: LD_INT 0
44500: PPUSH
// if not chassis or not engine then
44501: LD_VAR 0 1
44505: NOT
44506: PUSH
44507: LD_VAR 0 2
44511: NOT
44512: OR
44513: IFFALSE 44517
// exit ;
44515: GO 44713
// case engine of engine_solar :
44517: LD_VAR 0 2
44521: PUSH
44522: LD_INT 2
44524: DOUBLE
44525: EQUAL
44526: IFTRUE 44530
44528: GO 44568
44530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44531: LD_ADDR_VAR 0 3
44535: PUSH
44536: LD_INT 11
44538: PUSH
44539: LD_INT 12
44541: PUSH
44542: LD_INT 13
44544: PUSH
44545: LD_INT 14
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 3
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: ST_TO_ADDR
44566: GO 44697
44568: LD_INT 1
44570: DOUBLE
44571: EQUAL
44572: IFTRUE 44576
44574: GO 44638
44576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44577: LD_ADDR_VAR 0 3
44581: PUSH
44582: LD_INT 11
44584: PUSH
44585: LD_INT 12
44587: PUSH
44588: LD_INT 13
44590: PUSH
44591: LD_INT 14
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: LD_INT 4
44605: PUSH
44606: LD_INT 5
44608: PUSH
44609: LD_INT 21
44611: PUSH
44612: LD_INT 23
44614: PUSH
44615: LD_INT 22
44617: PUSH
44618: LD_INT 24
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: ST_TO_ADDR
44636: GO 44697
44638: LD_INT 3
44640: DOUBLE
44641: EQUAL
44642: IFTRUE 44646
44644: GO 44696
44646: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44647: LD_ADDR_VAR 0 3
44651: PUSH
44652: LD_INT 13
44654: PUSH
44655: LD_INT 14
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: LD_INT 4
44666: PUSH
44667: LD_INT 5
44669: PUSH
44670: LD_INT 21
44672: PUSH
44673: LD_INT 22
44675: PUSH
44676: LD_INT 23
44678: PUSH
44679: LD_INT 24
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
44694: GO 44697
44696: POP
// result := ( chassis in result ) ;
44697: LD_ADDR_VAR 0 3
44701: PUSH
44702: LD_VAR 0 1
44706: PUSH
44707: LD_VAR 0 3
44711: IN
44712: ST_TO_ADDR
// end ;
44713: LD_VAR 0 3
44717: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44718: LD_INT 0
44720: PPUSH
// if not chassis or not weapon then
44721: LD_VAR 0 1
44725: NOT
44726: PUSH
44727: LD_VAR 0 2
44731: NOT
44732: OR
44733: IFFALSE 44737
// exit ;
44735: GO 45763
// case weapon of us_machine_gun :
44737: LD_VAR 0 2
44741: PUSH
44742: LD_INT 2
44744: DOUBLE
44745: EQUAL
44746: IFTRUE 44750
44748: GO 44780
44750: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44751: LD_ADDR_VAR 0 3
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 3
44764: PUSH
44765: LD_INT 4
44767: PUSH
44768: LD_INT 5
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: ST_TO_ADDR
44778: GO 45747
44780: LD_INT 3
44782: DOUBLE
44783: EQUAL
44784: IFTRUE 44788
44786: GO 44818
44788: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44789: LD_ADDR_VAR 0 3
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: LD_INT 4
44805: PUSH
44806: LD_INT 5
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
44816: GO 45747
44818: LD_INT 11
44820: DOUBLE
44821: EQUAL
44822: IFTRUE 44826
44824: GO 44856
44826: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44827: LD_ADDR_VAR 0 3
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: LD_INT 3
44840: PUSH
44841: LD_INT 4
44843: PUSH
44844: LD_INT 5
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: ST_TO_ADDR
44854: GO 45747
44856: LD_INT 4
44858: DOUBLE
44859: EQUAL
44860: IFTRUE 44864
44862: GO 44890
44864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44865: LD_ADDR_VAR 0 3
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 3
44875: PUSH
44876: LD_INT 4
44878: PUSH
44879: LD_INT 5
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
44888: GO 45747
44890: LD_INT 5
44892: DOUBLE
44893: EQUAL
44894: IFTRUE 44898
44896: GO 44924
44898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44899: LD_ADDR_VAR 0 3
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 3
44909: PUSH
44910: LD_INT 4
44912: PUSH
44913: LD_INT 5
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: ST_TO_ADDR
44922: GO 45747
44924: LD_INT 9
44926: DOUBLE
44927: EQUAL
44928: IFTRUE 44932
44930: GO 44958
44932: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44933: LD_ADDR_VAR 0 3
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 3
44943: PUSH
44944: LD_INT 4
44946: PUSH
44947: LD_INT 5
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: ST_TO_ADDR
44956: GO 45747
44958: LD_INT 7
44960: DOUBLE
44961: EQUAL
44962: IFTRUE 44966
44964: GO 44992
44966: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44967: LD_ADDR_VAR 0 3
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: LD_INT 3
44977: PUSH
44978: LD_INT 4
44980: PUSH
44981: LD_INT 5
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
44990: GO 45747
44992: LD_INT 12
44994: DOUBLE
44995: EQUAL
44996: IFTRUE 45000
44998: GO 45026
45000: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45001: LD_ADDR_VAR 0 3
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: LD_INT 4
45014: PUSH
45015: LD_INT 5
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: ST_TO_ADDR
45024: GO 45747
45026: LD_INT 13
45028: DOUBLE
45029: EQUAL
45030: IFTRUE 45034
45032: GO 45060
45034: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45035: LD_ADDR_VAR 0 3
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: LD_INT 4
45048: PUSH
45049: LD_INT 5
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
45058: GO 45747
45060: LD_INT 14
45062: DOUBLE
45063: EQUAL
45064: IFTRUE 45068
45066: GO 45086
45068: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45069: LD_ADDR_VAR 0 3
45073: PUSH
45074: LD_INT 4
45076: PUSH
45077: LD_INT 5
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: ST_TO_ADDR
45084: GO 45747
45086: LD_INT 6
45088: DOUBLE
45089: EQUAL
45090: IFTRUE 45094
45092: GO 45112
45094: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45095: LD_ADDR_VAR 0 3
45099: PUSH
45100: LD_INT 4
45102: PUSH
45103: LD_INT 5
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: ST_TO_ADDR
45110: GO 45747
45112: LD_INT 10
45114: DOUBLE
45115: EQUAL
45116: IFTRUE 45120
45118: GO 45138
45120: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45121: LD_ADDR_VAR 0 3
45125: PUSH
45126: LD_INT 4
45128: PUSH
45129: LD_INT 5
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: ST_TO_ADDR
45136: GO 45747
45138: LD_INT 22
45140: DOUBLE
45141: EQUAL
45142: IFTRUE 45146
45144: GO 45172
45146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45147: LD_ADDR_VAR 0 3
45151: PUSH
45152: LD_INT 11
45154: PUSH
45155: LD_INT 12
45157: PUSH
45158: LD_INT 13
45160: PUSH
45161: LD_INT 14
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: ST_TO_ADDR
45170: GO 45747
45172: LD_INT 23
45174: DOUBLE
45175: EQUAL
45176: IFTRUE 45180
45178: GO 45206
45180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45181: LD_ADDR_VAR 0 3
45185: PUSH
45186: LD_INT 11
45188: PUSH
45189: LD_INT 12
45191: PUSH
45192: LD_INT 13
45194: PUSH
45195: LD_INT 14
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: ST_TO_ADDR
45204: GO 45747
45206: LD_INT 24
45208: DOUBLE
45209: EQUAL
45210: IFTRUE 45214
45212: GO 45240
45214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45215: LD_ADDR_VAR 0 3
45219: PUSH
45220: LD_INT 11
45222: PUSH
45223: LD_INT 12
45225: PUSH
45226: LD_INT 13
45228: PUSH
45229: LD_INT 14
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: ST_TO_ADDR
45238: GO 45747
45240: LD_INT 30
45242: DOUBLE
45243: EQUAL
45244: IFTRUE 45248
45246: GO 45274
45248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45249: LD_ADDR_VAR 0 3
45253: PUSH
45254: LD_INT 11
45256: PUSH
45257: LD_INT 12
45259: PUSH
45260: LD_INT 13
45262: PUSH
45263: LD_INT 14
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: ST_TO_ADDR
45272: GO 45747
45274: LD_INT 25
45276: DOUBLE
45277: EQUAL
45278: IFTRUE 45282
45280: GO 45300
45282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45283: LD_ADDR_VAR 0 3
45287: PUSH
45288: LD_INT 13
45290: PUSH
45291: LD_INT 14
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: ST_TO_ADDR
45298: GO 45747
45300: LD_INT 27
45302: DOUBLE
45303: EQUAL
45304: IFTRUE 45308
45306: GO 45326
45308: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45309: LD_ADDR_VAR 0 3
45313: PUSH
45314: LD_INT 13
45316: PUSH
45317: LD_INT 14
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: ST_TO_ADDR
45324: GO 45747
45326: LD_INT 28
45328: DOUBLE
45329: EQUAL
45330: IFTRUE 45334
45332: GO 45352
45334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45335: LD_ADDR_VAR 0 3
45339: PUSH
45340: LD_INT 13
45342: PUSH
45343: LD_INT 14
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: ST_TO_ADDR
45350: GO 45747
45352: LD_INT 29
45354: DOUBLE
45355: EQUAL
45356: IFTRUE 45360
45358: GO 45378
45360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45361: LD_ADDR_VAR 0 3
45365: PUSH
45366: LD_INT 13
45368: PUSH
45369: LD_INT 14
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: ST_TO_ADDR
45376: GO 45747
45378: LD_INT 31
45380: DOUBLE
45381: EQUAL
45382: IFTRUE 45386
45384: GO 45404
45386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45387: LD_ADDR_VAR 0 3
45391: PUSH
45392: LD_INT 13
45394: PUSH
45395: LD_INT 14
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: ST_TO_ADDR
45402: GO 45747
45404: LD_INT 26
45406: DOUBLE
45407: EQUAL
45408: IFTRUE 45412
45410: GO 45430
45412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45413: LD_ADDR_VAR 0 3
45417: PUSH
45418: LD_INT 13
45420: PUSH
45421: LD_INT 14
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: ST_TO_ADDR
45428: GO 45747
45430: LD_INT 42
45432: DOUBLE
45433: EQUAL
45434: IFTRUE 45438
45436: GO 45464
45438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45439: LD_ADDR_VAR 0 3
45443: PUSH
45444: LD_INT 21
45446: PUSH
45447: LD_INT 22
45449: PUSH
45450: LD_INT 23
45452: PUSH
45453: LD_INT 24
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: ST_TO_ADDR
45462: GO 45747
45464: LD_INT 43
45466: DOUBLE
45467: EQUAL
45468: IFTRUE 45472
45470: GO 45498
45472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45473: LD_ADDR_VAR 0 3
45477: PUSH
45478: LD_INT 21
45480: PUSH
45481: LD_INT 22
45483: PUSH
45484: LD_INT 23
45486: PUSH
45487: LD_INT 24
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: ST_TO_ADDR
45496: GO 45747
45498: LD_INT 44
45500: DOUBLE
45501: EQUAL
45502: IFTRUE 45506
45504: GO 45532
45506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45507: LD_ADDR_VAR 0 3
45511: PUSH
45512: LD_INT 21
45514: PUSH
45515: LD_INT 22
45517: PUSH
45518: LD_INT 23
45520: PUSH
45521: LD_INT 24
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: ST_TO_ADDR
45530: GO 45747
45532: LD_INT 45
45534: DOUBLE
45535: EQUAL
45536: IFTRUE 45540
45538: GO 45566
45540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45541: LD_ADDR_VAR 0 3
45545: PUSH
45546: LD_INT 21
45548: PUSH
45549: LD_INT 22
45551: PUSH
45552: LD_INT 23
45554: PUSH
45555: LD_INT 24
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: ST_TO_ADDR
45564: GO 45747
45566: LD_INT 49
45568: DOUBLE
45569: EQUAL
45570: IFTRUE 45574
45572: GO 45600
45574: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45575: LD_ADDR_VAR 0 3
45579: PUSH
45580: LD_INT 21
45582: PUSH
45583: LD_INT 22
45585: PUSH
45586: LD_INT 23
45588: PUSH
45589: LD_INT 24
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: ST_TO_ADDR
45598: GO 45747
45600: LD_INT 51
45602: DOUBLE
45603: EQUAL
45604: IFTRUE 45608
45606: GO 45634
45608: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45609: LD_ADDR_VAR 0 3
45613: PUSH
45614: LD_INT 21
45616: PUSH
45617: LD_INT 22
45619: PUSH
45620: LD_INT 23
45622: PUSH
45623: LD_INT 24
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: ST_TO_ADDR
45632: GO 45747
45634: LD_INT 52
45636: DOUBLE
45637: EQUAL
45638: IFTRUE 45642
45640: GO 45668
45642: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45643: LD_ADDR_VAR 0 3
45647: PUSH
45648: LD_INT 21
45650: PUSH
45651: LD_INT 22
45653: PUSH
45654: LD_INT 23
45656: PUSH
45657: LD_INT 24
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: ST_TO_ADDR
45666: GO 45747
45668: LD_INT 53
45670: DOUBLE
45671: EQUAL
45672: IFTRUE 45676
45674: GO 45694
45676: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45677: LD_ADDR_VAR 0 3
45681: PUSH
45682: LD_INT 23
45684: PUSH
45685: LD_INT 24
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: ST_TO_ADDR
45692: GO 45747
45694: LD_INT 46
45696: DOUBLE
45697: EQUAL
45698: IFTRUE 45702
45700: GO 45720
45702: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45703: LD_ADDR_VAR 0 3
45707: PUSH
45708: LD_INT 23
45710: PUSH
45711: LD_INT 24
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: ST_TO_ADDR
45718: GO 45747
45720: LD_INT 47
45722: DOUBLE
45723: EQUAL
45724: IFTRUE 45728
45726: GO 45746
45728: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45729: LD_ADDR_VAR 0 3
45733: PUSH
45734: LD_INT 23
45736: PUSH
45737: LD_INT 24
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: ST_TO_ADDR
45744: GO 45747
45746: POP
// result := ( chassis in result ) ;
45747: LD_ADDR_VAR 0 3
45751: PUSH
45752: LD_VAR 0 1
45756: PUSH
45757: LD_VAR 0 3
45761: IN
45762: ST_TO_ADDR
// end ;
45763: LD_VAR 0 3
45767: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45768: LD_INT 0
45770: PPUSH
45771: PPUSH
45772: PPUSH
45773: PPUSH
45774: PPUSH
45775: PPUSH
45776: PPUSH
// result := array ;
45777: LD_ADDR_VAR 0 5
45781: PUSH
45782: LD_VAR 0 1
45786: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45787: LD_VAR 0 1
45791: NOT
45792: PUSH
45793: LD_VAR 0 2
45797: NOT
45798: OR
45799: PUSH
45800: LD_VAR 0 3
45804: NOT
45805: OR
45806: PUSH
45807: LD_VAR 0 2
45811: PUSH
45812: LD_VAR 0 1
45816: GREATER
45817: OR
45818: PUSH
45819: LD_VAR 0 3
45823: PUSH
45824: LD_VAR 0 1
45828: GREATER
45829: OR
45830: IFFALSE 45834
// exit ;
45832: GO 46130
// if direction then
45834: LD_VAR 0 4
45838: IFFALSE 45902
// begin d := 1 ;
45840: LD_ADDR_VAR 0 9
45844: PUSH
45845: LD_INT 1
45847: ST_TO_ADDR
// if i_from > i_to then
45848: LD_VAR 0 2
45852: PUSH
45853: LD_VAR 0 3
45857: GREATER
45858: IFFALSE 45884
// length := ( array - i_from ) + i_to else
45860: LD_ADDR_VAR 0 11
45864: PUSH
45865: LD_VAR 0 1
45869: PUSH
45870: LD_VAR 0 2
45874: MINUS
45875: PUSH
45876: LD_VAR 0 3
45880: PLUS
45881: ST_TO_ADDR
45882: GO 45900
// length := i_to - i_from ;
45884: LD_ADDR_VAR 0 11
45888: PUSH
45889: LD_VAR 0 3
45893: PUSH
45894: LD_VAR 0 2
45898: MINUS
45899: ST_TO_ADDR
// end else
45900: GO 45963
// begin d := - 1 ;
45902: LD_ADDR_VAR 0 9
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: ST_TO_ADDR
// if i_from > i_to then
45911: LD_VAR 0 2
45915: PUSH
45916: LD_VAR 0 3
45920: GREATER
45921: IFFALSE 45941
// length := i_from - i_to else
45923: LD_ADDR_VAR 0 11
45927: PUSH
45928: LD_VAR 0 2
45932: PUSH
45933: LD_VAR 0 3
45937: MINUS
45938: ST_TO_ADDR
45939: GO 45963
// length := ( array - i_to ) + i_from ;
45941: LD_ADDR_VAR 0 11
45945: PUSH
45946: LD_VAR 0 1
45950: PUSH
45951: LD_VAR 0 3
45955: MINUS
45956: PUSH
45957: LD_VAR 0 2
45961: PLUS
45962: ST_TO_ADDR
// end ; if not length then
45963: LD_VAR 0 11
45967: NOT
45968: IFFALSE 45972
// exit ;
45970: GO 46130
// tmp := array ;
45972: LD_ADDR_VAR 0 10
45976: PUSH
45977: LD_VAR 0 1
45981: ST_TO_ADDR
// for i = 1 to length do
45982: LD_ADDR_VAR 0 6
45986: PUSH
45987: DOUBLE
45988: LD_INT 1
45990: DEC
45991: ST_TO_ADDR
45992: LD_VAR 0 11
45996: PUSH
45997: FOR_TO
45998: IFFALSE 46118
// begin for j = 1 to array do
46000: LD_ADDR_VAR 0 7
46004: PUSH
46005: DOUBLE
46006: LD_INT 1
46008: DEC
46009: ST_TO_ADDR
46010: LD_VAR 0 1
46014: PUSH
46015: FOR_TO
46016: IFFALSE 46104
// begin k := j + d ;
46018: LD_ADDR_VAR 0 8
46022: PUSH
46023: LD_VAR 0 7
46027: PUSH
46028: LD_VAR 0 9
46032: PLUS
46033: ST_TO_ADDR
// if k > array then
46034: LD_VAR 0 8
46038: PUSH
46039: LD_VAR 0 1
46043: GREATER
46044: IFFALSE 46054
// k := 1 ;
46046: LD_ADDR_VAR 0 8
46050: PUSH
46051: LD_INT 1
46053: ST_TO_ADDR
// if not k then
46054: LD_VAR 0 8
46058: NOT
46059: IFFALSE 46071
// k := array ;
46061: LD_ADDR_VAR 0 8
46065: PUSH
46066: LD_VAR 0 1
46070: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46071: LD_ADDR_VAR 0 10
46075: PUSH
46076: LD_VAR 0 10
46080: PPUSH
46081: LD_VAR 0 8
46085: PPUSH
46086: LD_VAR 0 1
46090: PUSH
46091: LD_VAR 0 7
46095: ARRAY
46096: PPUSH
46097: CALL_OW 1
46101: ST_TO_ADDR
// end ;
46102: GO 46015
46104: POP
46105: POP
// array := tmp ;
46106: LD_ADDR_VAR 0 1
46110: PUSH
46111: LD_VAR 0 10
46115: ST_TO_ADDR
// end ;
46116: GO 45997
46118: POP
46119: POP
// result := array ;
46120: LD_ADDR_VAR 0 5
46124: PUSH
46125: LD_VAR 0 1
46129: ST_TO_ADDR
// end ;
46130: LD_VAR 0 5
46134: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46135: LD_INT 0
46137: PPUSH
46138: PPUSH
// result := 0 ;
46139: LD_ADDR_VAR 0 3
46143: PUSH
46144: LD_INT 0
46146: ST_TO_ADDR
// if not array or not value in array then
46147: LD_VAR 0 1
46151: NOT
46152: PUSH
46153: LD_VAR 0 2
46157: PUSH
46158: LD_VAR 0 1
46162: IN
46163: NOT
46164: OR
46165: IFFALSE 46169
// exit ;
46167: GO 46223
// for i = 1 to array do
46169: LD_ADDR_VAR 0 4
46173: PUSH
46174: DOUBLE
46175: LD_INT 1
46177: DEC
46178: ST_TO_ADDR
46179: LD_VAR 0 1
46183: PUSH
46184: FOR_TO
46185: IFFALSE 46221
// if value = array [ i ] then
46187: LD_VAR 0 2
46191: PUSH
46192: LD_VAR 0 1
46196: PUSH
46197: LD_VAR 0 4
46201: ARRAY
46202: EQUAL
46203: IFFALSE 46219
// begin result := i ;
46205: LD_ADDR_VAR 0 3
46209: PUSH
46210: LD_VAR 0 4
46214: ST_TO_ADDR
// exit ;
46215: POP
46216: POP
46217: GO 46223
// end ;
46219: GO 46184
46221: POP
46222: POP
// end ;
46223: LD_VAR 0 3
46227: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46228: LD_INT 0
46230: PPUSH
// vc_chassis := chassis ;
46231: LD_ADDR_OWVAR 37
46235: PUSH
46236: LD_VAR 0 1
46240: ST_TO_ADDR
// vc_engine := engine ;
46241: LD_ADDR_OWVAR 39
46245: PUSH
46246: LD_VAR 0 2
46250: ST_TO_ADDR
// vc_control := control ;
46251: LD_ADDR_OWVAR 38
46255: PUSH
46256: LD_VAR 0 3
46260: ST_TO_ADDR
// vc_weapon := weapon ;
46261: LD_ADDR_OWVAR 40
46265: PUSH
46266: LD_VAR 0 4
46270: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46271: LD_ADDR_OWVAR 41
46275: PUSH
46276: LD_VAR 0 5
46280: ST_TO_ADDR
// end ;
46281: LD_VAR 0 6
46285: RET
// export function WantPlant ( unit ) ; var task ; begin
46286: LD_INT 0
46288: PPUSH
46289: PPUSH
// result := false ;
46290: LD_ADDR_VAR 0 2
46294: PUSH
46295: LD_INT 0
46297: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46298: LD_ADDR_VAR 0 3
46302: PUSH
46303: LD_VAR 0 1
46307: PPUSH
46308: CALL_OW 437
46312: ST_TO_ADDR
// if task then
46313: LD_VAR 0 3
46317: IFFALSE 46345
// if task [ 1 ] [ 1 ] = p then
46319: LD_VAR 0 3
46323: PUSH
46324: LD_INT 1
46326: ARRAY
46327: PUSH
46328: LD_INT 1
46330: ARRAY
46331: PUSH
46332: LD_STRING p
46334: EQUAL
46335: IFFALSE 46345
// result := true ;
46337: LD_ADDR_VAR 0 2
46341: PUSH
46342: LD_INT 1
46344: ST_TO_ADDR
// end ;
46345: LD_VAR 0 2
46349: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46350: LD_INT 0
46352: PPUSH
46353: PPUSH
46354: PPUSH
46355: PPUSH
// if pos < 1 then
46356: LD_VAR 0 2
46360: PUSH
46361: LD_INT 1
46363: LESS
46364: IFFALSE 46368
// exit ;
46366: GO 46671
// if pos = 1 then
46368: LD_VAR 0 2
46372: PUSH
46373: LD_INT 1
46375: EQUAL
46376: IFFALSE 46409
// result := Replace ( arr , pos [ 1 ] , value ) else
46378: LD_ADDR_VAR 0 4
46382: PUSH
46383: LD_VAR 0 1
46387: PPUSH
46388: LD_VAR 0 2
46392: PUSH
46393: LD_INT 1
46395: ARRAY
46396: PPUSH
46397: LD_VAR 0 3
46401: PPUSH
46402: CALL_OW 1
46406: ST_TO_ADDR
46407: GO 46671
// begin tmp := arr ;
46409: LD_ADDR_VAR 0 6
46413: PUSH
46414: LD_VAR 0 1
46418: ST_TO_ADDR
// s_arr := [ tmp ] ;
46419: LD_ADDR_VAR 0 7
46423: PUSH
46424: LD_VAR 0 6
46428: PUSH
46429: EMPTY
46430: LIST
46431: ST_TO_ADDR
// for i = 1 to pos - 1 do
46432: LD_ADDR_VAR 0 5
46436: PUSH
46437: DOUBLE
46438: LD_INT 1
46440: DEC
46441: ST_TO_ADDR
46442: LD_VAR 0 2
46446: PUSH
46447: LD_INT 1
46449: MINUS
46450: PUSH
46451: FOR_TO
46452: IFFALSE 46497
// begin tmp := tmp [ pos [ i ] ] ;
46454: LD_ADDR_VAR 0 6
46458: PUSH
46459: LD_VAR 0 6
46463: PUSH
46464: LD_VAR 0 2
46468: PUSH
46469: LD_VAR 0 5
46473: ARRAY
46474: ARRAY
46475: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46476: LD_ADDR_VAR 0 7
46480: PUSH
46481: LD_VAR 0 7
46485: PUSH
46486: LD_VAR 0 6
46490: PUSH
46491: EMPTY
46492: LIST
46493: ADD
46494: ST_TO_ADDR
// end ;
46495: GO 46451
46497: POP
46498: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46499: LD_ADDR_VAR 0 6
46503: PUSH
46504: LD_VAR 0 6
46508: PPUSH
46509: LD_VAR 0 2
46513: PUSH
46514: LD_VAR 0 2
46518: ARRAY
46519: PPUSH
46520: LD_VAR 0 3
46524: PPUSH
46525: CALL_OW 1
46529: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46530: LD_ADDR_VAR 0 7
46534: PUSH
46535: LD_VAR 0 7
46539: PPUSH
46540: LD_VAR 0 7
46544: PPUSH
46545: LD_VAR 0 6
46549: PPUSH
46550: CALL_OW 1
46554: ST_TO_ADDR
// for i = s_arr downto 2 do
46555: LD_ADDR_VAR 0 5
46559: PUSH
46560: DOUBLE
46561: LD_VAR 0 7
46565: INC
46566: ST_TO_ADDR
46567: LD_INT 2
46569: PUSH
46570: FOR_DOWNTO
46571: IFFALSE 46655
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46573: LD_ADDR_VAR 0 6
46577: PUSH
46578: LD_VAR 0 7
46582: PUSH
46583: LD_VAR 0 5
46587: PUSH
46588: LD_INT 1
46590: MINUS
46591: ARRAY
46592: PPUSH
46593: LD_VAR 0 2
46597: PUSH
46598: LD_VAR 0 5
46602: PUSH
46603: LD_INT 1
46605: MINUS
46606: ARRAY
46607: PPUSH
46608: LD_VAR 0 7
46612: PUSH
46613: LD_VAR 0 5
46617: ARRAY
46618: PPUSH
46619: CALL_OW 1
46623: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46624: LD_ADDR_VAR 0 7
46628: PUSH
46629: LD_VAR 0 7
46633: PPUSH
46634: LD_VAR 0 5
46638: PUSH
46639: LD_INT 1
46641: MINUS
46642: PPUSH
46643: LD_VAR 0 6
46647: PPUSH
46648: CALL_OW 1
46652: ST_TO_ADDR
// end ;
46653: GO 46570
46655: POP
46656: POP
// result := s_arr [ 1 ] ;
46657: LD_ADDR_VAR 0 4
46661: PUSH
46662: LD_VAR 0 7
46666: PUSH
46667: LD_INT 1
46669: ARRAY
46670: ST_TO_ADDR
// end ; end ;
46671: LD_VAR 0 4
46675: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46676: LD_INT 0
46678: PPUSH
46679: PPUSH
// if not list then
46680: LD_VAR 0 1
46684: NOT
46685: IFFALSE 46689
// exit ;
46687: GO 46780
// i := list [ pos1 ] ;
46689: LD_ADDR_VAR 0 5
46693: PUSH
46694: LD_VAR 0 1
46698: PUSH
46699: LD_VAR 0 2
46703: ARRAY
46704: ST_TO_ADDR
// if not i then
46705: LD_VAR 0 5
46709: NOT
46710: IFFALSE 46714
// exit ;
46712: GO 46780
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46714: LD_ADDR_VAR 0 1
46718: PUSH
46719: LD_VAR 0 1
46723: PPUSH
46724: LD_VAR 0 2
46728: PPUSH
46729: LD_VAR 0 1
46733: PUSH
46734: LD_VAR 0 3
46738: ARRAY
46739: PPUSH
46740: CALL_OW 1
46744: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46745: LD_ADDR_VAR 0 1
46749: PUSH
46750: LD_VAR 0 1
46754: PPUSH
46755: LD_VAR 0 3
46759: PPUSH
46760: LD_VAR 0 5
46764: PPUSH
46765: CALL_OW 1
46769: ST_TO_ADDR
// result := list ;
46770: LD_ADDR_VAR 0 4
46774: PUSH
46775: LD_VAR 0 1
46779: ST_TO_ADDR
// end ;
46780: LD_VAR 0 4
46784: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46785: LD_INT 0
46787: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46788: LD_ADDR_VAR 0 5
46792: PUSH
46793: LD_VAR 0 1
46797: PPUSH
46798: CALL_OW 250
46802: PPUSH
46803: LD_VAR 0 1
46807: PPUSH
46808: CALL_OW 251
46812: PPUSH
46813: LD_VAR 0 2
46817: PPUSH
46818: LD_VAR 0 3
46822: PPUSH
46823: LD_VAR 0 4
46827: PPUSH
46828: CALL 46838 0 5
46832: ST_TO_ADDR
// end ;
46833: LD_VAR 0 5
46837: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46838: LD_INT 0
46840: PPUSH
46841: PPUSH
46842: PPUSH
46843: PPUSH
// if not list then
46844: LD_VAR 0 3
46848: NOT
46849: IFFALSE 46853
// exit ;
46851: GO 47241
// result := [ ] ;
46853: LD_ADDR_VAR 0 6
46857: PUSH
46858: EMPTY
46859: ST_TO_ADDR
// for i in list do
46860: LD_ADDR_VAR 0 7
46864: PUSH
46865: LD_VAR 0 3
46869: PUSH
46870: FOR_IN
46871: IFFALSE 47073
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46873: LD_ADDR_VAR 0 9
46877: PUSH
46878: LD_VAR 0 7
46882: PPUSH
46883: LD_VAR 0 1
46887: PPUSH
46888: LD_VAR 0 2
46892: PPUSH
46893: CALL_OW 297
46897: ST_TO_ADDR
// if not result then
46898: LD_VAR 0 6
46902: NOT
46903: IFFALSE 46929
// result := [ [ i , tmp ] ] else
46905: LD_ADDR_VAR 0 6
46909: PUSH
46910: LD_VAR 0 7
46914: PUSH
46915: LD_VAR 0 9
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: ST_TO_ADDR
46927: GO 47071
// begin if result [ result ] [ 2 ] < tmp then
46929: LD_VAR 0 6
46933: PUSH
46934: LD_VAR 0 6
46938: ARRAY
46939: PUSH
46940: LD_INT 2
46942: ARRAY
46943: PUSH
46944: LD_VAR 0 9
46948: LESS
46949: IFFALSE 46991
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46951: LD_ADDR_VAR 0 6
46955: PUSH
46956: LD_VAR 0 6
46960: PPUSH
46961: LD_VAR 0 6
46965: PUSH
46966: LD_INT 1
46968: PLUS
46969: PPUSH
46970: LD_VAR 0 7
46974: PUSH
46975: LD_VAR 0 9
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PPUSH
46984: CALL_OW 2
46988: ST_TO_ADDR
46989: GO 47071
// for j = 1 to result do
46991: LD_ADDR_VAR 0 8
46995: PUSH
46996: DOUBLE
46997: LD_INT 1
46999: DEC
47000: ST_TO_ADDR
47001: LD_VAR 0 6
47005: PUSH
47006: FOR_TO
47007: IFFALSE 47069
// begin if tmp < result [ j ] [ 2 ] then
47009: LD_VAR 0 9
47013: PUSH
47014: LD_VAR 0 6
47018: PUSH
47019: LD_VAR 0 8
47023: ARRAY
47024: PUSH
47025: LD_INT 2
47027: ARRAY
47028: LESS
47029: IFFALSE 47067
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47031: LD_ADDR_VAR 0 6
47035: PUSH
47036: LD_VAR 0 6
47040: PPUSH
47041: LD_VAR 0 8
47045: PPUSH
47046: LD_VAR 0 7
47050: PUSH
47051: LD_VAR 0 9
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PPUSH
47060: CALL_OW 2
47064: ST_TO_ADDR
// break ;
47065: GO 47069
// end ; end ;
47067: GO 47006
47069: POP
47070: POP
// end ; end ;
47071: GO 46870
47073: POP
47074: POP
// if result and not asc then
47075: LD_VAR 0 6
47079: PUSH
47080: LD_VAR 0 4
47084: NOT
47085: AND
47086: IFFALSE 47161
// begin tmp := result ;
47088: LD_ADDR_VAR 0 9
47092: PUSH
47093: LD_VAR 0 6
47097: ST_TO_ADDR
// for i = tmp downto 1 do
47098: LD_ADDR_VAR 0 7
47102: PUSH
47103: DOUBLE
47104: LD_VAR 0 9
47108: INC
47109: ST_TO_ADDR
47110: LD_INT 1
47112: PUSH
47113: FOR_DOWNTO
47114: IFFALSE 47159
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47116: LD_ADDR_VAR 0 6
47120: PUSH
47121: LD_VAR 0 6
47125: PPUSH
47126: LD_VAR 0 9
47130: PUSH
47131: LD_VAR 0 7
47135: MINUS
47136: PUSH
47137: LD_INT 1
47139: PLUS
47140: PPUSH
47141: LD_VAR 0 9
47145: PUSH
47146: LD_VAR 0 7
47150: ARRAY
47151: PPUSH
47152: CALL_OW 1
47156: ST_TO_ADDR
47157: GO 47113
47159: POP
47160: POP
// end ; tmp := [ ] ;
47161: LD_ADDR_VAR 0 9
47165: PUSH
47166: EMPTY
47167: ST_TO_ADDR
// if mode then
47168: LD_VAR 0 5
47172: IFFALSE 47241
// begin for i = 1 to result do
47174: LD_ADDR_VAR 0 7
47178: PUSH
47179: DOUBLE
47180: LD_INT 1
47182: DEC
47183: ST_TO_ADDR
47184: LD_VAR 0 6
47188: PUSH
47189: FOR_TO
47190: IFFALSE 47229
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47192: LD_ADDR_VAR 0 9
47196: PUSH
47197: LD_VAR 0 9
47201: PPUSH
47202: LD_VAR 0 7
47206: PPUSH
47207: LD_VAR 0 6
47211: PUSH
47212: LD_VAR 0 7
47216: ARRAY
47217: PUSH
47218: LD_INT 1
47220: ARRAY
47221: PPUSH
47222: CALL_OW 1
47226: ST_TO_ADDR
47227: GO 47189
47229: POP
47230: POP
// result := tmp ;
47231: LD_ADDR_VAR 0 6
47235: PUSH
47236: LD_VAR 0 9
47240: ST_TO_ADDR
// end ; end ;
47241: LD_VAR 0 6
47245: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47246: LD_INT 0
47248: PPUSH
47249: PPUSH
47250: PPUSH
47251: PPUSH
47252: PPUSH
47253: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47254: LD_ADDR_VAR 0 5
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: ST_TO_ADDR
// if not x or not y then
47276: LD_VAR 0 2
47280: NOT
47281: PUSH
47282: LD_VAR 0 3
47286: NOT
47287: OR
47288: IFFALSE 47292
// exit ;
47290: GO 48938
// if not range then
47292: LD_VAR 0 4
47296: NOT
47297: IFFALSE 47307
// range := 10 ;
47299: LD_ADDR_VAR 0 4
47303: PUSH
47304: LD_INT 10
47306: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47307: LD_ADDR_VAR 0 8
47311: PUSH
47312: LD_INT 81
47314: PUSH
47315: LD_VAR 0 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 92
47326: PUSH
47327: LD_VAR 0 2
47331: PUSH
47332: LD_VAR 0 3
47336: PUSH
47337: LD_VAR 0 4
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: LD_INT 21
47353: PUSH
47354: LD_INT 3
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: PPUSH
47370: CALL_OW 69
47374: ST_TO_ADDR
// if not tmp then
47375: LD_VAR 0 8
47379: NOT
47380: IFFALSE 47384
// exit ;
47382: GO 48938
// for i in tmp do
47384: LD_ADDR_VAR 0 6
47388: PUSH
47389: LD_VAR 0 8
47393: PUSH
47394: FOR_IN
47395: IFFALSE 48913
// begin points := [ 0 , 0 , 0 ] ;
47397: LD_ADDR_VAR 0 9
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: LIST
47415: ST_TO_ADDR
// bpoints := 1 ;
47416: LD_ADDR_VAR 0 10
47420: PUSH
47421: LD_INT 1
47423: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47424: LD_VAR 0 6
47428: PPUSH
47429: CALL_OW 247
47433: PUSH
47434: LD_INT 1
47436: DOUBLE
47437: EQUAL
47438: IFTRUE 47442
47440: GO 48020
47442: POP
// begin if GetClass ( i ) = 1 then
47443: LD_VAR 0 6
47447: PPUSH
47448: CALL_OW 257
47452: PUSH
47453: LD_INT 1
47455: EQUAL
47456: IFFALSE 47477
// points := [ 10 , 5 , 3 ] ;
47458: LD_ADDR_VAR 0 9
47462: PUSH
47463: LD_INT 10
47465: PUSH
47466: LD_INT 5
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47477: LD_VAR 0 6
47481: PPUSH
47482: CALL_OW 257
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: LD_INT 3
47492: PUSH
47493: LD_INT 4
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: IN
47501: IFFALSE 47522
// points := [ 3 , 2 , 1 ] ;
47503: LD_ADDR_VAR 0 9
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47522: LD_VAR 0 6
47526: PPUSH
47527: CALL_OW 257
47531: PUSH
47532: LD_INT 5
47534: EQUAL
47535: IFFALSE 47556
// points := [ 130 , 5 , 2 ] ;
47537: LD_ADDR_VAR 0 9
47541: PUSH
47542: LD_INT 130
47544: PUSH
47545: LD_INT 5
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: LIST
47555: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47556: LD_VAR 0 6
47560: PPUSH
47561: CALL_OW 257
47565: PUSH
47566: LD_INT 8
47568: EQUAL
47569: IFFALSE 47590
// points := [ 35 , 35 , 30 ] ;
47571: LD_ADDR_VAR 0 9
47575: PUSH
47576: LD_INT 35
47578: PUSH
47579: LD_INT 35
47581: PUSH
47582: LD_INT 30
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: LIST
47589: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47590: LD_VAR 0 6
47594: PPUSH
47595: CALL_OW 257
47599: PUSH
47600: LD_INT 9
47602: EQUAL
47603: IFFALSE 47624
// points := [ 20 , 55 , 40 ] ;
47605: LD_ADDR_VAR 0 9
47609: PUSH
47610: LD_INT 20
47612: PUSH
47613: LD_INT 55
47615: PUSH
47616: LD_INT 40
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47624: LD_VAR 0 6
47628: PPUSH
47629: CALL_OW 257
47633: PUSH
47634: LD_INT 12
47636: PUSH
47637: LD_INT 16
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: IN
47644: IFFALSE 47665
// points := [ 5 , 3 , 2 ] ;
47646: LD_ADDR_VAR 0 9
47650: PUSH
47651: LD_INT 5
47653: PUSH
47654: LD_INT 3
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47665: LD_VAR 0 6
47669: PPUSH
47670: CALL_OW 257
47674: PUSH
47675: LD_INT 17
47677: EQUAL
47678: IFFALSE 47699
// points := [ 100 , 50 , 75 ] ;
47680: LD_ADDR_VAR 0 9
47684: PUSH
47685: LD_INT 100
47687: PUSH
47688: LD_INT 50
47690: PUSH
47691: LD_INT 75
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: LIST
47698: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47699: LD_VAR 0 6
47703: PPUSH
47704: CALL_OW 257
47708: PUSH
47709: LD_INT 15
47711: EQUAL
47712: IFFALSE 47733
// points := [ 10 , 5 , 3 ] ;
47714: LD_ADDR_VAR 0 9
47718: PUSH
47719: LD_INT 10
47721: PUSH
47722: LD_INT 5
47724: PUSH
47725: LD_INT 3
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47733: LD_VAR 0 6
47737: PPUSH
47738: CALL_OW 257
47742: PUSH
47743: LD_INT 14
47745: EQUAL
47746: IFFALSE 47767
// points := [ 10 , 0 , 0 ] ;
47748: LD_ADDR_VAR 0 9
47752: PUSH
47753: LD_INT 10
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47767: LD_VAR 0 6
47771: PPUSH
47772: CALL_OW 257
47776: PUSH
47777: LD_INT 11
47779: EQUAL
47780: IFFALSE 47801
// points := [ 30 , 10 , 5 ] ;
47782: LD_ADDR_VAR 0 9
47786: PUSH
47787: LD_INT 30
47789: PUSH
47790: LD_INT 10
47792: PUSH
47793: LD_INT 5
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: LIST
47800: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47801: LD_VAR 0 1
47805: PPUSH
47806: LD_INT 5
47808: PPUSH
47809: CALL_OW 321
47813: PUSH
47814: LD_INT 2
47816: EQUAL
47817: IFFALSE 47834
// bpoints := bpoints * 1.8 ;
47819: LD_ADDR_VAR 0 10
47823: PUSH
47824: LD_VAR 0 10
47828: PUSH
47829: LD_REAL  1.80000000000000E+0000
47832: MUL
47833: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47834: LD_VAR 0 6
47838: PPUSH
47839: CALL_OW 257
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 3
47852: PUSH
47853: LD_INT 4
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: IN
47862: PUSH
47863: LD_VAR 0 1
47867: PPUSH
47868: LD_INT 51
47870: PPUSH
47871: CALL_OW 321
47875: PUSH
47876: LD_INT 2
47878: EQUAL
47879: AND
47880: IFFALSE 47897
// bpoints := bpoints * 1.2 ;
47882: LD_ADDR_VAR 0 10
47886: PUSH
47887: LD_VAR 0 10
47891: PUSH
47892: LD_REAL  1.20000000000000E+0000
47895: MUL
47896: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47897: LD_VAR 0 6
47901: PPUSH
47902: CALL_OW 257
47906: PUSH
47907: LD_INT 5
47909: PUSH
47910: LD_INT 7
47912: PUSH
47913: LD_INT 9
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: IN
47921: PUSH
47922: LD_VAR 0 1
47926: PPUSH
47927: LD_INT 52
47929: PPUSH
47930: CALL_OW 321
47934: PUSH
47935: LD_INT 2
47937: EQUAL
47938: AND
47939: IFFALSE 47956
// bpoints := bpoints * 1.5 ;
47941: LD_ADDR_VAR 0 10
47945: PUSH
47946: LD_VAR 0 10
47950: PUSH
47951: LD_REAL  1.50000000000000E+0000
47954: MUL
47955: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47956: LD_VAR 0 1
47960: PPUSH
47961: LD_INT 66
47963: PPUSH
47964: CALL_OW 321
47968: PUSH
47969: LD_INT 2
47971: EQUAL
47972: IFFALSE 47989
// bpoints := bpoints * 1.1 ;
47974: LD_ADDR_VAR 0 10
47978: PUSH
47979: LD_VAR 0 10
47983: PUSH
47984: LD_REAL  1.10000000000000E+0000
47987: MUL
47988: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47989: LD_ADDR_VAR 0 10
47993: PUSH
47994: LD_VAR 0 10
47998: PUSH
47999: LD_VAR 0 6
48003: PPUSH
48004: LD_INT 1
48006: PPUSH
48007: CALL_OW 259
48011: PUSH
48012: LD_REAL  1.15000000000000E+0000
48015: MUL
48016: MUL
48017: ST_TO_ADDR
// end ; unit_vehicle :
48018: GO 48842
48020: LD_INT 2
48022: DOUBLE
48023: EQUAL
48024: IFTRUE 48028
48026: GO 48830
48028: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48029: LD_VAR 0 6
48033: PPUSH
48034: CALL_OW 264
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: LD_INT 42
48044: PUSH
48045: LD_INT 24
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: IN
48053: IFFALSE 48074
// points := [ 25 , 5 , 3 ] ;
48055: LD_ADDR_VAR 0 9
48059: PUSH
48060: LD_INT 25
48062: PUSH
48063: LD_INT 5
48065: PUSH
48066: LD_INT 3
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48074: LD_VAR 0 6
48078: PPUSH
48079: CALL_OW 264
48083: PUSH
48084: LD_INT 4
48086: PUSH
48087: LD_INT 43
48089: PUSH
48090: LD_INT 25
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: IN
48098: IFFALSE 48119
// points := [ 40 , 15 , 5 ] ;
48100: LD_ADDR_VAR 0 9
48104: PUSH
48105: LD_INT 40
48107: PUSH
48108: LD_INT 15
48110: PUSH
48111: LD_INT 5
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: LIST
48118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48119: LD_VAR 0 6
48123: PPUSH
48124: CALL_OW 264
48128: PUSH
48129: LD_INT 3
48131: PUSH
48132: LD_INT 23
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: IN
48139: IFFALSE 48160
// points := [ 7 , 25 , 8 ] ;
48141: LD_ADDR_VAR 0 9
48145: PUSH
48146: LD_INT 7
48148: PUSH
48149: LD_INT 25
48151: PUSH
48152: LD_INT 8
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48160: LD_VAR 0 6
48164: PPUSH
48165: CALL_OW 264
48169: PUSH
48170: LD_INT 5
48172: PUSH
48173: LD_INT 27
48175: PUSH
48176: LD_INT 44
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: LIST
48183: IN
48184: IFFALSE 48205
// points := [ 14 , 50 , 16 ] ;
48186: LD_ADDR_VAR 0 9
48190: PUSH
48191: LD_INT 14
48193: PUSH
48194: LD_INT 50
48196: PUSH
48197: LD_INT 16
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48205: LD_VAR 0 6
48209: PPUSH
48210: CALL_OW 264
48214: PUSH
48215: LD_INT 6
48217: PUSH
48218: LD_INT 46
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: IN
48225: IFFALSE 48246
// points := [ 32 , 120 , 70 ] ;
48227: LD_ADDR_VAR 0 9
48231: PUSH
48232: LD_INT 32
48234: PUSH
48235: LD_INT 120
48237: PUSH
48238: LD_INT 70
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
48246: LD_VAR 0 6
48250: PPUSH
48251: CALL_OW 264
48255: PUSH
48256: LD_INT 7
48258: PUSH
48259: LD_INT 28
48261: PUSH
48262: LD_INT 45
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: LIST
48269: IN
48270: IFFALSE 48291
// points := [ 35 , 20 , 45 ] ;
48272: LD_ADDR_VAR 0 9
48276: PUSH
48277: LD_INT 35
48279: PUSH
48280: LD_INT 20
48282: PUSH
48283: LD_INT 45
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48291: LD_VAR 0 6
48295: PPUSH
48296: CALL_OW 264
48300: PUSH
48301: LD_INT 47
48303: PUSH
48304: EMPTY
48305: LIST
48306: IN
48307: IFFALSE 48328
// points := [ 67 , 45 , 75 ] ;
48309: LD_ADDR_VAR 0 9
48313: PUSH
48314: LD_INT 67
48316: PUSH
48317: LD_INT 45
48319: PUSH
48320: LD_INT 75
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48328: LD_VAR 0 6
48332: PPUSH
48333: CALL_OW 264
48337: PUSH
48338: LD_INT 26
48340: PUSH
48341: EMPTY
48342: LIST
48343: IN
48344: IFFALSE 48365
// points := [ 120 , 30 , 80 ] ;
48346: LD_ADDR_VAR 0 9
48350: PUSH
48351: LD_INT 120
48353: PUSH
48354: LD_INT 30
48356: PUSH
48357: LD_INT 80
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48365: LD_VAR 0 6
48369: PPUSH
48370: CALL_OW 264
48374: PUSH
48375: LD_INT 22
48377: PUSH
48378: EMPTY
48379: LIST
48380: IN
48381: IFFALSE 48402
// points := [ 40 , 1 , 1 ] ;
48383: LD_ADDR_VAR 0 9
48387: PUSH
48388: LD_INT 40
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: LIST
48401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48402: LD_VAR 0 6
48406: PPUSH
48407: CALL_OW 264
48411: PUSH
48412: LD_INT 29
48414: PUSH
48415: EMPTY
48416: LIST
48417: IN
48418: IFFALSE 48439
// points := [ 70 , 200 , 400 ] ;
48420: LD_ADDR_VAR 0 9
48424: PUSH
48425: LD_INT 70
48427: PUSH
48428: LD_INT 200
48430: PUSH
48431: LD_INT 400
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48439: LD_VAR 0 6
48443: PPUSH
48444: CALL_OW 264
48448: PUSH
48449: LD_INT 14
48451: PUSH
48452: LD_INT 53
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: IN
48459: IFFALSE 48480
// points := [ 40 , 10 , 20 ] ;
48461: LD_ADDR_VAR 0 9
48465: PUSH
48466: LD_INT 40
48468: PUSH
48469: LD_INT 10
48471: PUSH
48472: LD_INT 20
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48480: LD_VAR 0 6
48484: PPUSH
48485: CALL_OW 264
48489: PUSH
48490: LD_INT 9
48492: PUSH
48493: EMPTY
48494: LIST
48495: IN
48496: IFFALSE 48517
// points := [ 5 , 70 , 20 ] ;
48498: LD_ADDR_VAR 0 9
48502: PUSH
48503: LD_INT 5
48505: PUSH
48506: LD_INT 70
48508: PUSH
48509: LD_INT 20
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: LIST
48516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48517: LD_VAR 0 6
48521: PPUSH
48522: CALL_OW 264
48526: PUSH
48527: LD_INT 10
48529: PUSH
48530: EMPTY
48531: LIST
48532: IN
48533: IFFALSE 48554
// points := [ 35 , 110 , 70 ] ;
48535: LD_ADDR_VAR 0 9
48539: PUSH
48540: LD_INT 35
48542: PUSH
48543: LD_INT 110
48545: PUSH
48546: LD_INT 70
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48554: LD_VAR 0 6
48558: PPUSH
48559: CALL_OW 265
48563: PUSH
48564: LD_INT 25
48566: EQUAL
48567: IFFALSE 48588
// points := [ 80 , 65 , 100 ] ;
48569: LD_ADDR_VAR 0 9
48573: PUSH
48574: LD_INT 80
48576: PUSH
48577: LD_INT 65
48579: PUSH
48580: LD_INT 100
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48588: LD_VAR 0 6
48592: PPUSH
48593: CALL_OW 263
48597: PUSH
48598: LD_INT 1
48600: EQUAL
48601: IFFALSE 48636
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48603: LD_ADDR_VAR 0 10
48607: PUSH
48608: LD_VAR 0 10
48612: PUSH
48613: LD_VAR 0 6
48617: PPUSH
48618: CALL_OW 311
48622: PPUSH
48623: LD_INT 3
48625: PPUSH
48626: CALL_OW 259
48630: PUSH
48631: LD_INT 4
48633: MUL
48634: MUL
48635: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48636: LD_VAR 0 6
48640: PPUSH
48641: CALL_OW 263
48645: PUSH
48646: LD_INT 2
48648: EQUAL
48649: IFFALSE 48700
// begin j := IsControledBy ( i ) ;
48651: LD_ADDR_VAR 0 7
48655: PUSH
48656: LD_VAR 0 6
48660: PPUSH
48661: CALL_OW 312
48665: ST_TO_ADDR
// if j then
48666: LD_VAR 0 7
48670: IFFALSE 48700
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48672: LD_ADDR_VAR 0 10
48676: PUSH
48677: LD_VAR 0 10
48681: PUSH
48682: LD_VAR 0 7
48686: PPUSH
48687: LD_INT 3
48689: PPUSH
48690: CALL_OW 259
48694: PUSH
48695: LD_INT 3
48697: MUL
48698: MUL
48699: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48700: LD_VAR 0 6
48704: PPUSH
48705: CALL_OW 264
48709: PUSH
48710: LD_INT 5
48712: PUSH
48713: LD_INT 6
48715: PUSH
48716: LD_INT 46
48718: PUSH
48719: LD_INT 44
48721: PUSH
48722: LD_INT 47
48724: PUSH
48725: LD_INT 45
48727: PUSH
48728: LD_INT 28
48730: PUSH
48731: LD_INT 7
48733: PUSH
48734: LD_INT 27
48736: PUSH
48737: LD_INT 29
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: IN
48752: PUSH
48753: LD_VAR 0 1
48757: PPUSH
48758: LD_INT 52
48760: PPUSH
48761: CALL_OW 321
48765: PUSH
48766: LD_INT 2
48768: EQUAL
48769: AND
48770: IFFALSE 48787
// bpoints := bpoints * 1.2 ;
48772: LD_ADDR_VAR 0 10
48776: PUSH
48777: LD_VAR 0 10
48781: PUSH
48782: LD_REAL  1.20000000000000E+0000
48785: MUL
48786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48787: LD_VAR 0 6
48791: PPUSH
48792: CALL_OW 264
48796: PUSH
48797: LD_INT 6
48799: PUSH
48800: LD_INT 46
48802: PUSH
48803: LD_INT 47
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: IN
48811: IFFALSE 48828
// bpoints := bpoints * 1.2 ;
48813: LD_ADDR_VAR 0 10
48817: PUSH
48818: LD_VAR 0 10
48822: PUSH
48823: LD_REAL  1.20000000000000E+0000
48826: MUL
48827: ST_TO_ADDR
// end ; unit_building :
48828: GO 48842
48830: LD_INT 3
48832: DOUBLE
48833: EQUAL
48834: IFTRUE 48838
48836: GO 48841
48838: POP
// ; end ;
48839: GO 48842
48841: POP
// for j = 1 to 3 do
48842: LD_ADDR_VAR 0 7
48846: PUSH
48847: DOUBLE
48848: LD_INT 1
48850: DEC
48851: ST_TO_ADDR
48852: LD_INT 3
48854: PUSH
48855: FOR_TO
48856: IFFALSE 48909
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48858: LD_ADDR_VAR 0 5
48862: PUSH
48863: LD_VAR 0 5
48867: PPUSH
48868: LD_VAR 0 7
48872: PPUSH
48873: LD_VAR 0 5
48877: PUSH
48878: LD_VAR 0 7
48882: ARRAY
48883: PUSH
48884: LD_VAR 0 9
48888: PUSH
48889: LD_VAR 0 7
48893: ARRAY
48894: PUSH
48895: LD_VAR 0 10
48899: MUL
48900: PLUS
48901: PPUSH
48902: CALL_OW 1
48906: ST_TO_ADDR
48907: GO 48855
48909: POP
48910: POP
// end ;
48911: GO 47394
48913: POP
48914: POP
// result := Replace ( result , 4 , tmp ) ;
48915: LD_ADDR_VAR 0 5
48919: PUSH
48920: LD_VAR 0 5
48924: PPUSH
48925: LD_INT 4
48927: PPUSH
48928: LD_VAR 0 8
48932: PPUSH
48933: CALL_OW 1
48937: ST_TO_ADDR
// end ;
48938: LD_VAR 0 5
48942: RET
// export function DangerAtRange ( unit , range ) ; begin
48943: LD_INT 0
48945: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48946: LD_ADDR_VAR 0 3
48950: PUSH
48951: LD_VAR 0 1
48955: PPUSH
48956: CALL_OW 255
48960: PPUSH
48961: LD_VAR 0 1
48965: PPUSH
48966: CALL_OW 250
48970: PPUSH
48971: LD_VAR 0 1
48975: PPUSH
48976: CALL_OW 251
48980: PPUSH
48981: LD_VAR 0 2
48985: PPUSH
48986: CALL 47246 0 4
48990: ST_TO_ADDR
// end ;
48991: LD_VAR 0 3
48995: RET
// export function DangerInArea ( side , area ) ; begin
48996: LD_INT 0
48998: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48999: LD_ADDR_VAR 0 3
49003: PUSH
49004: LD_VAR 0 2
49008: PPUSH
49009: LD_INT 81
49011: PUSH
49012: LD_VAR 0 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PPUSH
49021: CALL_OW 70
49025: ST_TO_ADDR
// end ;
49026: LD_VAR 0 3
49030: RET
// export function IsExtension ( b ) ; begin
49031: LD_INT 0
49033: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49034: LD_ADDR_VAR 0 2
49038: PUSH
49039: LD_VAR 0 1
49043: PUSH
49044: LD_INT 23
49046: PUSH
49047: LD_INT 20
49049: PUSH
49050: LD_INT 22
49052: PUSH
49053: LD_INT 17
49055: PUSH
49056: LD_INT 24
49058: PUSH
49059: LD_INT 21
49061: PUSH
49062: LD_INT 19
49064: PUSH
49065: LD_INT 16
49067: PUSH
49068: LD_INT 25
49070: PUSH
49071: LD_INT 18
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: IN
49086: ST_TO_ADDR
// end ;
49087: LD_VAR 0 2
49091: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
49092: LD_INT 0
49094: PPUSH
49095: PPUSH
49096: PPUSH
// result := [ ] ;
49097: LD_ADDR_VAR 0 3
49101: PUSH
49102: EMPTY
49103: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49104: LD_ADDR_VAR 0 4
49108: PUSH
49109: LD_VAR 0 2
49113: PPUSH
49114: LD_INT 21
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PPUSH
49124: CALL_OW 70
49128: ST_TO_ADDR
// if not tmp then
49129: LD_VAR 0 4
49133: NOT
49134: IFFALSE 49138
// exit ;
49136: GO 49196
// for i in tmp do
49138: LD_ADDR_VAR 0 5
49142: PUSH
49143: LD_VAR 0 4
49147: PUSH
49148: FOR_IN
49149: IFFALSE 49184
// if GetBase ( i ) <> base then
49151: LD_VAR 0 5
49155: PPUSH
49156: CALL_OW 274
49160: PUSH
49161: LD_VAR 0 1
49165: NONEQUAL
49166: IFFALSE 49182
// ComLinkToBase ( base , i ) ;
49168: LD_VAR 0 1
49172: PPUSH
49173: LD_VAR 0 5
49177: PPUSH
49178: CALL_OW 169
49182: GO 49148
49184: POP
49185: POP
// result := tmp ;
49186: LD_ADDR_VAR 0 3
49190: PUSH
49191: LD_VAR 0 4
49195: ST_TO_ADDR
// end ;
49196: LD_VAR 0 3
49200: RET
// export function ComComplete ( unit , b ) ; var i ; begin
49201: LD_INT 0
49203: PPUSH
49204: PPUSH
// if BuildingStatus ( b ) = bs_build then
49205: LD_VAR 0 2
49209: PPUSH
49210: CALL_OW 461
49214: PUSH
49215: LD_INT 1
49217: EQUAL
49218: IFFALSE 49278
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49220: LD_VAR 0 1
49224: PPUSH
49225: LD_STRING h
49227: PUSH
49228: LD_VAR 0 2
49232: PPUSH
49233: CALL_OW 250
49237: PUSH
49238: LD_VAR 0 2
49242: PPUSH
49243: CALL_OW 251
49247: PUSH
49248: LD_VAR 0 2
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: PUSH
49271: EMPTY
49272: LIST
49273: PPUSH
49274: CALL_OW 446
// end ;
49278: LD_VAR 0 3
49282: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49283: LD_INT 0
49285: PPUSH
49286: PPUSH
49287: PPUSH
49288: PPUSH
49289: PPUSH
49290: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
49291: LD_VAR 0 1
49295: NOT
49296: PUSH
49297: LD_VAR 0 1
49301: PPUSH
49302: CALL_OW 263
49306: PUSH
49307: LD_INT 2
49309: EQUAL
49310: NOT
49311: OR
49312: IFFALSE 49316
// exit ;
49314: GO 49632
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49316: LD_ADDR_VAR 0 6
49320: PUSH
49321: LD_INT 22
49323: PUSH
49324: LD_VAR 0 1
49328: PPUSH
49329: CALL_OW 255
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: LD_INT 30
49343: PUSH
49344: LD_INT 36
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 34
49353: PUSH
49354: LD_INT 31
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: LIST
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PPUSH
49370: CALL_OW 69
49374: ST_TO_ADDR
// if not tmp then
49375: LD_VAR 0 6
49379: NOT
49380: IFFALSE 49384
// exit ;
49382: GO 49632
// result := [ ] ;
49384: LD_ADDR_VAR 0 2
49388: PUSH
49389: EMPTY
49390: ST_TO_ADDR
// for i in tmp do
49391: LD_ADDR_VAR 0 3
49395: PUSH
49396: LD_VAR 0 6
49400: PUSH
49401: FOR_IN
49402: IFFALSE 49473
// begin t := UnitsInside ( i ) ;
49404: LD_ADDR_VAR 0 4
49408: PUSH
49409: LD_VAR 0 3
49413: PPUSH
49414: CALL_OW 313
49418: ST_TO_ADDR
// if t then
49419: LD_VAR 0 4
49423: IFFALSE 49471
// for j in t do
49425: LD_ADDR_VAR 0 7
49429: PUSH
49430: LD_VAR 0 4
49434: PUSH
49435: FOR_IN
49436: IFFALSE 49469
// result := Insert ( result , result + 1 , j ) ;
49438: LD_ADDR_VAR 0 2
49442: PUSH
49443: LD_VAR 0 2
49447: PPUSH
49448: LD_VAR 0 2
49452: PUSH
49453: LD_INT 1
49455: PLUS
49456: PPUSH
49457: LD_VAR 0 7
49461: PPUSH
49462: CALL_OW 2
49466: ST_TO_ADDR
49467: GO 49435
49469: POP
49470: POP
// end ;
49471: GO 49401
49473: POP
49474: POP
// if not result then
49475: LD_VAR 0 2
49479: NOT
49480: IFFALSE 49484
// exit ;
49482: GO 49632
// mech := result [ 1 ] ;
49484: LD_ADDR_VAR 0 5
49488: PUSH
49489: LD_VAR 0 2
49493: PUSH
49494: LD_INT 1
49496: ARRAY
49497: ST_TO_ADDR
// if result > 1 then
49498: LD_VAR 0 2
49502: PUSH
49503: LD_INT 1
49505: GREATER
49506: IFFALSE 49618
// for i = 2 to result do
49508: LD_ADDR_VAR 0 3
49512: PUSH
49513: DOUBLE
49514: LD_INT 2
49516: DEC
49517: ST_TO_ADDR
49518: LD_VAR 0 2
49522: PUSH
49523: FOR_TO
49524: IFFALSE 49616
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49526: LD_ADDR_VAR 0 4
49530: PUSH
49531: LD_VAR 0 2
49535: PUSH
49536: LD_VAR 0 3
49540: ARRAY
49541: PPUSH
49542: LD_INT 3
49544: PPUSH
49545: CALL_OW 259
49549: PUSH
49550: LD_VAR 0 2
49554: PUSH
49555: LD_VAR 0 3
49559: ARRAY
49560: PPUSH
49561: CALL_OW 432
49565: MINUS
49566: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49567: LD_VAR 0 4
49571: PUSH
49572: LD_VAR 0 5
49576: PPUSH
49577: LD_INT 3
49579: PPUSH
49580: CALL_OW 259
49584: PUSH
49585: LD_VAR 0 5
49589: PPUSH
49590: CALL_OW 432
49594: MINUS
49595: GREATEREQUAL
49596: IFFALSE 49614
// mech := result [ i ] ;
49598: LD_ADDR_VAR 0 5
49602: PUSH
49603: LD_VAR 0 2
49607: PUSH
49608: LD_VAR 0 3
49612: ARRAY
49613: ST_TO_ADDR
// end ;
49614: GO 49523
49616: POP
49617: POP
// ComLinkTo ( vehicle , mech ) ;
49618: LD_VAR 0 1
49622: PPUSH
49623: LD_VAR 0 5
49627: PPUSH
49628: CALL_OW 135
// end ;
49632: LD_VAR 0 2
49636: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49637: LD_INT 0
49639: PPUSH
49640: PPUSH
49641: PPUSH
49642: PPUSH
49643: PPUSH
49644: PPUSH
49645: PPUSH
49646: PPUSH
49647: PPUSH
49648: PPUSH
49649: PPUSH
49650: PPUSH
49651: PPUSH
// result := [ ] ;
49652: LD_ADDR_VAR 0 7
49656: PUSH
49657: EMPTY
49658: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49659: LD_VAR 0 1
49663: PPUSH
49664: CALL_OW 266
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: IN
49679: NOT
49680: IFFALSE 49684
// exit ;
49682: GO 51315
// if name then
49684: LD_VAR 0 3
49688: IFFALSE 49704
// SetBName ( base_dep , name ) ;
49690: LD_VAR 0 1
49694: PPUSH
49695: LD_VAR 0 3
49699: PPUSH
49700: CALL_OW 500
// base := GetBase ( base_dep ) ;
49704: LD_ADDR_VAR 0 15
49708: PUSH
49709: LD_VAR 0 1
49713: PPUSH
49714: CALL_OW 274
49718: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49719: LD_ADDR_VAR 0 16
49723: PUSH
49724: LD_VAR 0 1
49728: PPUSH
49729: CALL_OW 255
49733: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49734: LD_ADDR_VAR 0 17
49738: PUSH
49739: LD_VAR 0 1
49743: PPUSH
49744: CALL_OW 248
49748: ST_TO_ADDR
// if sources then
49749: LD_VAR 0 5
49753: IFFALSE 49800
// for i = 1 to 3 do
49755: LD_ADDR_VAR 0 8
49759: PUSH
49760: DOUBLE
49761: LD_INT 1
49763: DEC
49764: ST_TO_ADDR
49765: LD_INT 3
49767: PUSH
49768: FOR_TO
49769: IFFALSE 49798
// AddResourceType ( base , i , sources [ i ] ) ;
49771: LD_VAR 0 15
49775: PPUSH
49776: LD_VAR 0 8
49780: PPUSH
49781: LD_VAR 0 5
49785: PUSH
49786: LD_VAR 0 8
49790: ARRAY
49791: PPUSH
49792: CALL_OW 276
49796: GO 49768
49798: POP
49799: POP
// buildings := GetBaseBuildings ( base , area ) ;
49800: LD_ADDR_VAR 0 18
49804: PUSH
49805: LD_VAR 0 15
49809: PPUSH
49810: LD_VAR 0 2
49814: PPUSH
49815: CALL 49092 0 2
49819: ST_TO_ADDR
// InitHc ;
49820: CALL_OW 19
// InitUc ;
49824: CALL_OW 18
// uc_side := side ;
49828: LD_ADDR_OWVAR 20
49832: PUSH
49833: LD_VAR 0 16
49837: ST_TO_ADDR
// uc_nation := nation ;
49838: LD_ADDR_OWVAR 21
49842: PUSH
49843: LD_VAR 0 17
49847: ST_TO_ADDR
// if buildings then
49848: LD_VAR 0 18
49852: IFFALSE 51174
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49854: LD_ADDR_VAR 0 19
49858: PUSH
49859: LD_VAR 0 18
49863: PPUSH
49864: LD_INT 2
49866: PUSH
49867: LD_INT 30
49869: PUSH
49870: LD_INT 29
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 30
49879: PUSH
49880: LD_INT 30
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: PPUSH
49892: CALL_OW 72
49896: ST_TO_ADDR
// if tmp then
49897: LD_VAR 0 19
49901: IFFALSE 49949
// for i in tmp do
49903: LD_ADDR_VAR 0 8
49907: PUSH
49908: LD_VAR 0 19
49912: PUSH
49913: FOR_IN
49914: IFFALSE 49947
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49916: LD_VAR 0 8
49920: PPUSH
49921: CALL_OW 250
49925: PPUSH
49926: LD_VAR 0 8
49930: PPUSH
49931: CALL_OW 251
49935: PPUSH
49936: LD_VAR 0 16
49940: PPUSH
49941: CALL_OW 441
49945: GO 49913
49947: POP
49948: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49949: LD_VAR 0 18
49953: PPUSH
49954: LD_INT 2
49956: PUSH
49957: LD_INT 30
49959: PUSH
49960: LD_INT 32
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 30
49969: PUSH
49970: LD_INT 33
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: PPUSH
49982: CALL_OW 72
49986: IFFALSE 50074
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49988: LD_ADDR_VAR 0 8
49992: PUSH
49993: LD_VAR 0 18
49997: PPUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 30
50003: PUSH
50004: LD_INT 32
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 30
50013: PUSH
50014: LD_INT 33
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: LIST
50025: PPUSH
50026: CALL_OW 72
50030: PUSH
50031: FOR_IN
50032: IFFALSE 50072
// begin if not GetBWeapon ( i ) then
50034: LD_VAR 0 8
50038: PPUSH
50039: CALL_OW 269
50043: NOT
50044: IFFALSE 50070
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50046: LD_VAR 0 8
50050: PPUSH
50051: LD_VAR 0 8
50055: PPUSH
50056: LD_VAR 0 2
50060: PPUSH
50061: CALL 51320 0 2
50065: PPUSH
50066: CALL_OW 431
// end ;
50070: GO 50031
50072: POP
50073: POP
// end ; for i = 1 to personel do
50074: LD_ADDR_VAR 0 8
50078: PUSH
50079: DOUBLE
50080: LD_INT 1
50082: DEC
50083: ST_TO_ADDR
50084: LD_VAR 0 6
50088: PUSH
50089: FOR_TO
50090: IFFALSE 51154
// begin if i > 4 then
50092: LD_VAR 0 8
50096: PUSH
50097: LD_INT 4
50099: GREATER
50100: IFFALSE 50104
// break ;
50102: GO 51154
// case i of 1 :
50104: LD_VAR 0 8
50108: PUSH
50109: LD_INT 1
50111: DOUBLE
50112: EQUAL
50113: IFTRUE 50117
50115: GO 50197
50117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50118: LD_ADDR_VAR 0 12
50122: PUSH
50123: LD_VAR 0 18
50127: PPUSH
50128: LD_INT 22
50130: PUSH
50131: LD_VAR 0 16
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 58
50142: PUSH
50143: EMPTY
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: LD_INT 30
50151: PUSH
50152: LD_INT 32
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 30
50161: PUSH
50162: LD_INT 4
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 30
50171: PUSH
50172: LD_INT 5
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: LIST
50189: PPUSH
50190: CALL_OW 72
50194: ST_TO_ADDR
50195: GO 50419
50197: LD_INT 2
50199: DOUBLE
50200: EQUAL
50201: IFTRUE 50205
50203: GO 50267
50205: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50206: LD_ADDR_VAR 0 12
50210: PUSH
50211: LD_VAR 0 18
50215: PPUSH
50216: LD_INT 22
50218: PUSH
50219: LD_VAR 0 16
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 30
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 30
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PPUSH
50260: CALL_OW 72
50264: ST_TO_ADDR
50265: GO 50419
50267: LD_INT 3
50269: DOUBLE
50270: EQUAL
50271: IFTRUE 50275
50273: GO 50337
50275: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50276: LD_ADDR_VAR 0 12
50280: PUSH
50281: LD_VAR 0 18
50285: PPUSH
50286: LD_INT 22
50288: PUSH
50289: LD_VAR 0 16
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: LD_INT 30
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 30
50313: PUSH
50314: LD_INT 3
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PPUSH
50330: CALL_OW 72
50334: ST_TO_ADDR
50335: GO 50419
50337: LD_INT 4
50339: DOUBLE
50340: EQUAL
50341: IFTRUE 50345
50343: GO 50418
50345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50346: LD_ADDR_VAR 0 12
50350: PUSH
50351: LD_VAR 0 18
50355: PPUSH
50356: LD_INT 22
50358: PUSH
50359: LD_VAR 0 16
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 30
50373: PUSH
50374: LD_INT 6
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 30
50383: PUSH
50384: LD_INT 7
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 30
50393: PUSH
50394: LD_INT 8
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PPUSH
50411: CALL_OW 72
50415: ST_TO_ADDR
50416: GO 50419
50418: POP
// if i = 1 then
50419: LD_VAR 0 8
50423: PUSH
50424: LD_INT 1
50426: EQUAL
50427: IFFALSE 50538
// begin tmp := [ ] ;
50429: LD_ADDR_VAR 0 19
50433: PUSH
50434: EMPTY
50435: ST_TO_ADDR
// for j in f do
50436: LD_ADDR_VAR 0 9
50440: PUSH
50441: LD_VAR 0 12
50445: PUSH
50446: FOR_IN
50447: IFFALSE 50520
// if GetBType ( j ) = b_bunker then
50449: LD_VAR 0 9
50453: PPUSH
50454: CALL_OW 266
50458: PUSH
50459: LD_INT 32
50461: EQUAL
50462: IFFALSE 50489
// tmp := Insert ( tmp , 1 , j ) else
50464: LD_ADDR_VAR 0 19
50468: PUSH
50469: LD_VAR 0 19
50473: PPUSH
50474: LD_INT 1
50476: PPUSH
50477: LD_VAR 0 9
50481: PPUSH
50482: CALL_OW 2
50486: ST_TO_ADDR
50487: GO 50518
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50489: LD_ADDR_VAR 0 19
50493: PUSH
50494: LD_VAR 0 19
50498: PPUSH
50499: LD_VAR 0 19
50503: PUSH
50504: LD_INT 1
50506: PLUS
50507: PPUSH
50508: LD_VAR 0 9
50512: PPUSH
50513: CALL_OW 2
50517: ST_TO_ADDR
50518: GO 50446
50520: POP
50521: POP
// if tmp then
50522: LD_VAR 0 19
50526: IFFALSE 50538
// f := tmp ;
50528: LD_ADDR_VAR 0 12
50532: PUSH
50533: LD_VAR 0 19
50537: ST_TO_ADDR
// end ; x := personel [ i ] ;
50538: LD_ADDR_VAR 0 13
50542: PUSH
50543: LD_VAR 0 6
50547: PUSH
50548: LD_VAR 0 8
50552: ARRAY
50553: ST_TO_ADDR
// if x = - 1 then
50554: LD_VAR 0 13
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: EQUAL
50563: IFFALSE 50772
// begin for j in f do
50565: LD_ADDR_VAR 0 9
50569: PUSH
50570: LD_VAR 0 12
50574: PUSH
50575: FOR_IN
50576: IFFALSE 50768
// repeat InitHc ;
50578: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50582: LD_VAR 0 9
50586: PPUSH
50587: CALL_OW 266
50591: PUSH
50592: LD_INT 5
50594: EQUAL
50595: IFFALSE 50665
// begin if UnitsInside ( j ) < 3 then
50597: LD_VAR 0 9
50601: PPUSH
50602: CALL_OW 313
50606: PUSH
50607: LD_INT 3
50609: LESS
50610: IFFALSE 50646
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50612: LD_INT 0
50614: PPUSH
50615: LD_INT 5
50617: PUSH
50618: LD_INT 8
50620: PUSH
50621: LD_INT 9
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: PUSH
50629: LD_VAR 0 17
50633: ARRAY
50634: PPUSH
50635: LD_VAR 0 4
50639: PPUSH
50640: CALL_OW 380
50644: GO 50663
// PrepareHuman ( false , i , skill ) ;
50646: LD_INT 0
50648: PPUSH
50649: LD_VAR 0 8
50653: PPUSH
50654: LD_VAR 0 4
50658: PPUSH
50659: CALL_OW 380
// end else
50663: GO 50682
// PrepareHuman ( false , i , skill ) ;
50665: LD_INT 0
50667: PPUSH
50668: LD_VAR 0 8
50672: PPUSH
50673: LD_VAR 0 4
50677: PPUSH
50678: CALL_OW 380
// un := CreateHuman ;
50682: LD_ADDR_VAR 0 14
50686: PUSH
50687: CALL_OW 44
50691: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50692: LD_ADDR_VAR 0 7
50696: PUSH
50697: LD_VAR 0 7
50701: PPUSH
50702: LD_INT 1
50704: PPUSH
50705: LD_VAR 0 14
50709: PPUSH
50710: CALL_OW 2
50714: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50715: LD_VAR 0 14
50719: PPUSH
50720: LD_VAR 0 9
50724: PPUSH
50725: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50729: LD_VAR 0 9
50733: PPUSH
50734: CALL_OW 313
50738: PUSH
50739: LD_INT 6
50741: EQUAL
50742: PUSH
50743: LD_VAR 0 9
50747: PPUSH
50748: CALL_OW 266
50752: PUSH
50753: LD_INT 32
50755: PUSH
50756: LD_INT 31
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: IN
50763: OR
50764: IFFALSE 50578
50766: GO 50575
50768: POP
50769: POP
// end else
50770: GO 51152
// for j = 1 to x do
50772: LD_ADDR_VAR 0 9
50776: PUSH
50777: DOUBLE
50778: LD_INT 1
50780: DEC
50781: ST_TO_ADDR
50782: LD_VAR 0 13
50786: PUSH
50787: FOR_TO
50788: IFFALSE 51150
// begin InitHc ;
50790: CALL_OW 19
// if not f then
50794: LD_VAR 0 12
50798: NOT
50799: IFFALSE 50888
// begin PrepareHuman ( false , i , skill ) ;
50801: LD_INT 0
50803: PPUSH
50804: LD_VAR 0 8
50808: PPUSH
50809: LD_VAR 0 4
50813: PPUSH
50814: CALL_OW 380
// un := CreateHuman ;
50818: LD_ADDR_VAR 0 14
50822: PUSH
50823: CALL_OW 44
50827: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50828: LD_ADDR_VAR 0 7
50832: PUSH
50833: LD_VAR 0 7
50837: PPUSH
50838: LD_INT 1
50840: PPUSH
50841: LD_VAR 0 14
50845: PPUSH
50846: CALL_OW 2
50850: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50851: LD_VAR 0 14
50855: PPUSH
50856: LD_VAR 0 1
50860: PPUSH
50861: CALL_OW 250
50865: PPUSH
50866: LD_VAR 0 1
50870: PPUSH
50871: CALL_OW 251
50875: PPUSH
50876: LD_INT 10
50878: PPUSH
50879: LD_INT 0
50881: PPUSH
50882: CALL_OW 50
// continue ;
50886: GO 50787
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50888: LD_VAR 0 12
50892: PUSH
50893: LD_INT 1
50895: ARRAY
50896: PPUSH
50897: CALL_OW 313
50901: PUSH
50902: LD_VAR 0 12
50906: PUSH
50907: LD_INT 1
50909: ARRAY
50910: PPUSH
50911: CALL_OW 266
50915: PUSH
50916: LD_INT 32
50918: PUSH
50919: LD_INT 31
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: IN
50926: AND
50927: PUSH
50928: LD_VAR 0 12
50932: PUSH
50933: LD_INT 1
50935: ARRAY
50936: PPUSH
50937: CALL_OW 313
50941: PUSH
50942: LD_INT 6
50944: EQUAL
50945: OR
50946: IFFALSE 50966
// f := Delete ( f , 1 ) ;
50948: LD_ADDR_VAR 0 12
50952: PUSH
50953: LD_VAR 0 12
50957: PPUSH
50958: LD_INT 1
50960: PPUSH
50961: CALL_OW 3
50965: ST_TO_ADDR
// if not f then
50966: LD_VAR 0 12
50970: NOT
50971: IFFALSE 50989
// begin x := x + 2 ;
50973: LD_ADDR_VAR 0 13
50977: PUSH
50978: LD_VAR 0 13
50982: PUSH
50983: LD_INT 2
50985: PLUS
50986: ST_TO_ADDR
// continue ;
50987: GO 50787
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50989: LD_VAR 0 12
50993: PUSH
50994: LD_INT 1
50996: ARRAY
50997: PPUSH
50998: CALL_OW 266
51002: PUSH
51003: LD_INT 5
51005: EQUAL
51006: IFFALSE 51080
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51008: LD_VAR 0 12
51012: PUSH
51013: LD_INT 1
51015: ARRAY
51016: PPUSH
51017: CALL_OW 313
51021: PUSH
51022: LD_INT 3
51024: LESS
51025: IFFALSE 51061
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51027: LD_INT 0
51029: PPUSH
51030: LD_INT 5
51032: PUSH
51033: LD_INT 8
51035: PUSH
51036: LD_INT 9
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: LIST
51043: PUSH
51044: LD_VAR 0 17
51048: ARRAY
51049: PPUSH
51050: LD_VAR 0 4
51054: PPUSH
51055: CALL_OW 380
51059: GO 51078
// PrepareHuman ( false , i , skill ) ;
51061: LD_INT 0
51063: PPUSH
51064: LD_VAR 0 8
51068: PPUSH
51069: LD_VAR 0 4
51073: PPUSH
51074: CALL_OW 380
// end else
51078: GO 51097
// PrepareHuman ( false , i , skill ) ;
51080: LD_INT 0
51082: PPUSH
51083: LD_VAR 0 8
51087: PPUSH
51088: LD_VAR 0 4
51092: PPUSH
51093: CALL_OW 380
// un := CreateHuman ;
51097: LD_ADDR_VAR 0 14
51101: PUSH
51102: CALL_OW 44
51106: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51107: LD_ADDR_VAR 0 7
51111: PUSH
51112: LD_VAR 0 7
51116: PPUSH
51117: LD_INT 1
51119: PPUSH
51120: LD_VAR 0 14
51124: PPUSH
51125: CALL_OW 2
51129: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51130: LD_VAR 0 14
51134: PPUSH
51135: LD_VAR 0 12
51139: PUSH
51140: LD_INT 1
51142: ARRAY
51143: PPUSH
51144: CALL_OW 52
// end ;
51148: GO 50787
51150: POP
51151: POP
// end ;
51152: GO 50089
51154: POP
51155: POP
// result := result ^ buildings ;
51156: LD_ADDR_VAR 0 7
51160: PUSH
51161: LD_VAR 0 7
51165: PUSH
51166: LD_VAR 0 18
51170: ADD
51171: ST_TO_ADDR
// end else
51172: GO 51315
// begin for i = 1 to personel do
51174: LD_ADDR_VAR 0 8
51178: PUSH
51179: DOUBLE
51180: LD_INT 1
51182: DEC
51183: ST_TO_ADDR
51184: LD_VAR 0 6
51188: PUSH
51189: FOR_TO
51190: IFFALSE 51313
// begin if i > 4 then
51192: LD_VAR 0 8
51196: PUSH
51197: LD_INT 4
51199: GREATER
51200: IFFALSE 51204
// break ;
51202: GO 51313
// x := personel [ i ] ;
51204: LD_ADDR_VAR 0 13
51208: PUSH
51209: LD_VAR 0 6
51213: PUSH
51214: LD_VAR 0 8
51218: ARRAY
51219: ST_TO_ADDR
// if x = - 1 then
51220: LD_VAR 0 13
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: EQUAL
51229: IFFALSE 51233
// continue ;
51231: GO 51189
// PrepareHuman ( false , i , skill ) ;
51233: LD_INT 0
51235: PPUSH
51236: LD_VAR 0 8
51240: PPUSH
51241: LD_VAR 0 4
51245: PPUSH
51246: CALL_OW 380
// un := CreateHuman ;
51250: LD_ADDR_VAR 0 14
51254: PUSH
51255: CALL_OW 44
51259: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51260: LD_VAR 0 14
51264: PPUSH
51265: LD_VAR 0 1
51269: PPUSH
51270: CALL_OW 250
51274: PPUSH
51275: LD_VAR 0 1
51279: PPUSH
51280: CALL_OW 251
51284: PPUSH
51285: LD_INT 10
51287: PPUSH
51288: LD_INT 0
51290: PPUSH
51291: CALL_OW 50
// result := result ^ un ;
51295: LD_ADDR_VAR 0 7
51299: PUSH
51300: LD_VAR 0 7
51304: PUSH
51305: LD_VAR 0 14
51309: ADD
51310: ST_TO_ADDR
// end ;
51311: GO 51189
51313: POP
51314: POP
// end ; end ;
51315: LD_VAR 0 7
51319: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51320: LD_INT 0
51322: PPUSH
51323: PPUSH
51324: PPUSH
51325: PPUSH
51326: PPUSH
51327: PPUSH
51328: PPUSH
51329: PPUSH
51330: PPUSH
51331: PPUSH
51332: PPUSH
51333: PPUSH
51334: PPUSH
51335: PPUSH
51336: PPUSH
51337: PPUSH
// result := false ;
51338: LD_ADDR_VAR 0 3
51342: PUSH
51343: LD_INT 0
51345: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51346: LD_VAR 0 1
51350: NOT
51351: PUSH
51352: LD_VAR 0 1
51356: PPUSH
51357: CALL_OW 266
51361: PUSH
51362: LD_INT 32
51364: PUSH
51365: LD_INT 33
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: IN
51372: NOT
51373: OR
51374: IFFALSE 51378
// exit ;
51376: GO 52514
// nat := GetNation ( tower ) ;
51378: LD_ADDR_VAR 0 12
51382: PUSH
51383: LD_VAR 0 1
51387: PPUSH
51388: CALL_OW 248
51392: ST_TO_ADDR
// side := GetSide ( tower ) ;
51393: LD_ADDR_VAR 0 16
51397: PUSH
51398: LD_VAR 0 1
51402: PPUSH
51403: CALL_OW 255
51407: ST_TO_ADDR
// x := GetX ( tower ) ;
51408: LD_ADDR_VAR 0 10
51412: PUSH
51413: LD_VAR 0 1
51417: PPUSH
51418: CALL_OW 250
51422: ST_TO_ADDR
// y := GetY ( tower ) ;
51423: LD_ADDR_VAR 0 11
51427: PUSH
51428: LD_VAR 0 1
51432: PPUSH
51433: CALL_OW 251
51437: ST_TO_ADDR
// if not x or not y then
51438: LD_VAR 0 10
51442: NOT
51443: PUSH
51444: LD_VAR 0 11
51448: NOT
51449: OR
51450: IFFALSE 51454
// exit ;
51452: GO 52514
// weapon := 0 ;
51454: LD_ADDR_VAR 0 18
51458: PUSH
51459: LD_INT 0
51461: ST_TO_ADDR
// fac_list := [ ] ;
51462: LD_ADDR_VAR 0 17
51466: PUSH
51467: EMPTY
51468: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
51469: LD_ADDR_VAR 0 6
51473: PUSH
51474: LD_VAR 0 1
51478: PPUSH
51479: CALL_OW 274
51483: PPUSH
51484: LD_VAR 0 2
51488: PPUSH
51489: CALL 49092 0 2
51493: PPUSH
51494: LD_INT 30
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PPUSH
51504: CALL_OW 72
51508: ST_TO_ADDR
// if not factories then
51509: LD_VAR 0 6
51513: NOT
51514: IFFALSE 51518
// exit ;
51516: GO 52514
// for i in factories do
51518: LD_ADDR_VAR 0 8
51522: PUSH
51523: LD_VAR 0 6
51527: PUSH
51528: FOR_IN
51529: IFFALSE 51554
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51531: LD_ADDR_VAR 0 17
51535: PUSH
51536: LD_VAR 0 17
51540: PUSH
51541: LD_VAR 0 8
51545: PPUSH
51546: CALL_OW 478
51550: UNION
51551: ST_TO_ADDR
51552: GO 51528
51554: POP
51555: POP
// if not fac_list then
51556: LD_VAR 0 17
51560: NOT
51561: IFFALSE 51565
// exit ;
51563: GO 52514
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51565: LD_ADDR_VAR 0 5
51569: PUSH
51570: LD_INT 4
51572: PUSH
51573: LD_INT 5
51575: PUSH
51576: LD_INT 9
51578: PUSH
51579: LD_INT 10
51581: PUSH
51582: LD_INT 6
51584: PUSH
51585: LD_INT 7
51587: PUSH
51588: LD_INT 11
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 27
51602: PUSH
51603: LD_INT 28
51605: PUSH
51606: LD_INT 26
51608: PUSH
51609: LD_INT 30
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 43
51620: PUSH
51621: LD_INT 44
51623: PUSH
51624: LD_INT 46
51626: PUSH
51627: LD_INT 45
51629: PUSH
51630: LD_INT 47
51632: PUSH
51633: LD_INT 49
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: PUSH
51649: LD_VAR 0 12
51653: ARRAY
51654: ST_TO_ADDR
// for i in list do
51655: LD_ADDR_VAR 0 8
51659: PUSH
51660: LD_VAR 0 5
51664: PUSH
51665: FOR_IN
51666: IFFALSE 51699
// if not i in fac_list then
51668: LD_VAR 0 8
51672: PUSH
51673: LD_VAR 0 17
51677: IN
51678: NOT
51679: IFFALSE 51697
// list := list diff i ;
51681: LD_ADDR_VAR 0 5
51685: PUSH
51686: LD_VAR 0 5
51690: PUSH
51691: LD_VAR 0 8
51695: DIFF
51696: ST_TO_ADDR
51697: GO 51665
51699: POP
51700: POP
// if not list then
51701: LD_VAR 0 5
51705: NOT
51706: IFFALSE 51710
// exit ;
51708: GO 52514
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51710: LD_VAR 0 12
51714: PUSH
51715: LD_INT 3
51717: EQUAL
51718: PUSH
51719: LD_INT 49
51721: PUSH
51722: LD_VAR 0 5
51726: IN
51727: AND
51728: PUSH
51729: LD_INT 31
51731: PPUSH
51732: LD_VAR 0 16
51736: PPUSH
51737: CALL_OW 321
51741: PUSH
51742: LD_INT 2
51744: EQUAL
51745: AND
51746: IFFALSE 51806
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51748: LD_INT 22
51750: PUSH
51751: LD_VAR 0 16
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 35
51762: PUSH
51763: LD_INT 49
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 91
51772: PUSH
51773: LD_VAR 0 1
51777: PUSH
51778: LD_INT 10
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: PPUSH
51791: CALL_OW 69
51795: NOT
51796: IFFALSE 51806
// weapon := ru_time_lapser ;
51798: LD_ADDR_VAR 0 18
51802: PUSH
51803: LD_INT 49
51805: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51806: LD_VAR 0 12
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: IN
51821: PUSH
51822: LD_INT 11
51824: PUSH
51825: LD_VAR 0 5
51829: IN
51830: PUSH
51831: LD_INT 30
51833: PUSH
51834: LD_VAR 0 5
51838: IN
51839: OR
51840: AND
51841: PUSH
51842: LD_INT 6
51844: PPUSH
51845: LD_VAR 0 16
51849: PPUSH
51850: CALL_OW 321
51854: PUSH
51855: LD_INT 2
51857: EQUAL
51858: AND
51859: IFFALSE 52024
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51861: LD_INT 22
51863: PUSH
51864: LD_VAR 0 16
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 35
51878: PUSH
51879: LD_INT 11
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 35
51888: PUSH
51889: LD_INT 30
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 91
51903: PUSH
51904: LD_VAR 0 1
51908: PUSH
51909: LD_INT 18
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: PPUSH
51922: CALL_OW 69
51926: NOT
51927: PUSH
51928: LD_INT 22
51930: PUSH
51931: LD_VAR 0 16
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: LD_INT 30
51945: PUSH
51946: LD_INT 32
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 30
51955: PUSH
51956: LD_INT 33
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 91
51970: PUSH
51971: LD_VAR 0 1
51975: PUSH
51976: LD_INT 12
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: LIST
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: LIST
51988: PUSH
51989: EMPTY
51990: LIST
51991: PPUSH
51992: CALL_OW 69
51996: PUSH
51997: LD_INT 2
51999: GREATER
52000: AND
52001: IFFALSE 52024
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52003: LD_ADDR_VAR 0 18
52007: PUSH
52008: LD_INT 11
52010: PUSH
52011: LD_INT 30
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_VAR 0 12
52022: ARRAY
52023: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52024: LD_VAR 0 18
52028: NOT
52029: PUSH
52030: LD_INT 40
52032: PPUSH
52033: LD_VAR 0 16
52037: PPUSH
52038: CALL_OW 321
52042: PUSH
52043: LD_INT 2
52045: EQUAL
52046: AND
52047: PUSH
52048: LD_INT 7
52050: PUSH
52051: LD_VAR 0 5
52055: IN
52056: PUSH
52057: LD_INT 28
52059: PUSH
52060: LD_VAR 0 5
52064: IN
52065: OR
52066: PUSH
52067: LD_INT 45
52069: PUSH
52070: LD_VAR 0 5
52074: IN
52075: OR
52076: AND
52077: IFFALSE 52331
// begin hex := GetHexInfo ( x , y ) ;
52079: LD_ADDR_VAR 0 4
52083: PUSH
52084: LD_VAR 0 10
52088: PPUSH
52089: LD_VAR 0 11
52093: PPUSH
52094: CALL_OW 546
52098: ST_TO_ADDR
// if hex [ 1 ] then
52099: LD_VAR 0 4
52103: PUSH
52104: LD_INT 1
52106: ARRAY
52107: IFFALSE 52111
// exit ;
52109: GO 52514
// height := hex [ 2 ] ;
52111: LD_ADDR_VAR 0 15
52115: PUSH
52116: LD_VAR 0 4
52120: PUSH
52121: LD_INT 2
52123: ARRAY
52124: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52125: LD_ADDR_VAR 0 14
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: LD_INT 5
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: ST_TO_ADDR
// for i in tmp do
52148: LD_ADDR_VAR 0 8
52152: PUSH
52153: LD_VAR 0 14
52157: PUSH
52158: FOR_IN
52159: IFFALSE 52329
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52161: LD_ADDR_VAR 0 9
52165: PUSH
52166: LD_VAR 0 10
52170: PPUSH
52171: LD_VAR 0 8
52175: PPUSH
52176: LD_INT 5
52178: PPUSH
52179: CALL_OW 272
52183: PUSH
52184: LD_VAR 0 11
52188: PPUSH
52189: LD_VAR 0 8
52193: PPUSH
52194: LD_INT 5
52196: PPUSH
52197: CALL_OW 273
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52206: LD_VAR 0 9
52210: PUSH
52211: LD_INT 1
52213: ARRAY
52214: PPUSH
52215: LD_VAR 0 9
52219: PUSH
52220: LD_INT 2
52222: ARRAY
52223: PPUSH
52224: CALL_OW 488
52228: IFFALSE 52327
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52230: LD_ADDR_VAR 0 4
52234: PUSH
52235: LD_VAR 0 9
52239: PUSH
52240: LD_INT 1
52242: ARRAY
52243: PPUSH
52244: LD_VAR 0 9
52248: PUSH
52249: LD_INT 2
52251: ARRAY
52252: PPUSH
52253: CALL_OW 546
52257: ST_TO_ADDR
// if hex [ 1 ] then
52258: LD_VAR 0 4
52262: PUSH
52263: LD_INT 1
52265: ARRAY
52266: IFFALSE 52270
// continue ;
52268: GO 52158
// h := hex [ 2 ] ;
52270: LD_ADDR_VAR 0 13
52274: PUSH
52275: LD_VAR 0 4
52279: PUSH
52280: LD_INT 2
52282: ARRAY
52283: ST_TO_ADDR
// if h + 7 < height then
52284: LD_VAR 0 13
52288: PUSH
52289: LD_INT 7
52291: PLUS
52292: PUSH
52293: LD_VAR 0 15
52297: LESS
52298: IFFALSE 52327
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52300: LD_ADDR_VAR 0 18
52304: PUSH
52305: LD_INT 7
52307: PUSH
52308: LD_INT 28
52310: PUSH
52311: LD_INT 45
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: PUSH
52319: LD_VAR 0 12
52323: ARRAY
52324: ST_TO_ADDR
// break ;
52325: GO 52329
// end ; end ; end ;
52327: GO 52158
52329: POP
52330: POP
// end ; if not weapon then
52331: LD_VAR 0 18
52335: NOT
52336: IFFALSE 52396
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52338: LD_ADDR_VAR 0 5
52342: PUSH
52343: LD_VAR 0 5
52347: PUSH
52348: LD_INT 11
52350: PUSH
52351: LD_INT 30
52353: PUSH
52354: LD_INT 49
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: LIST
52361: DIFF
52362: ST_TO_ADDR
// if not list then
52363: LD_VAR 0 5
52367: NOT
52368: IFFALSE 52372
// exit ;
52370: GO 52514
// weapon := list [ rand ( 1 , list ) ] ;
52372: LD_ADDR_VAR 0 18
52376: PUSH
52377: LD_VAR 0 5
52381: PUSH
52382: LD_INT 1
52384: PPUSH
52385: LD_VAR 0 5
52389: PPUSH
52390: CALL_OW 12
52394: ARRAY
52395: ST_TO_ADDR
// end ; if weapon then
52396: LD_VAR 0 18
52400: IFFALSE 52514
// begin tmp := CostOfWeapon ( weapon ) ;
52402: LD_ADDR_VAR 0 14
52406: PUSH
52407: LD_VAR 0 18
52411: PPUSH
52412: CALL_OW 451
52416: ST_TO_ADDR
// j := GetBase ( tower ) ;
52417: LD_ADDR_VAR 0 9
52421: PUSH
52422: LD_VAR 0 1
52426: PPUSH
52427: CALL_OW 274
52431: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52432: LD_VAR 0 9
52436: PPUSH
52437: LD_INT 1
52439: PPUSH
52440: CALL_OW 275
52444: PUSH
52445: LD_VAR 0 14
52449: PUSH
52450: LD_INT 1
52452: ARRAY
52453: GREATEREQUAL
52454: PUSH
52455: LD_VAR 0 9
52459: PPUSH
52460: LD_INT 2
52462: PPUSH
52463: CALL_OW 275
52467: PUSH
52468: LD_VAR 0 14
52472: PUSH
52473: LD_INT 2
52475: ARRAY
52476: GREATEREQUAL
52477: AND
52478: PUSH
52479: LD_VAR 0 9
52483: PPUSH
52484: LD_INT 3
52486: PPUSH
52487: CALL_OW 275
52491: PUSH
52492: LD_VAR 0 14
52496: PUSH
52497: LD_INT 3
52499: ARRAY
52500: GREATEREQUAL
52501: AND
52502: IFFALSE 52514
// result := weapon ;
52504: LD_ADDR_VAR 0 3
52508: PUSH
52509: LD_VAR 0 18
52513: ST_TO_ADDR
// end ; end ;
52514: LD_VAR 0 3
52518: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52519: LD_INT 0
52521: PPUSH
52522: PPUSH
// result := true ;
52523: LD_ADDR_VAR 0 3
52527: PUSH
52528: LD_INT 1
52530: ST_TO_ADDR
// if array1 = array2 then
52531: LD_VAR 0 1
52535: PUSH
52536: LD_VAR 0 2
52540: EQUAL
52541: IFFALSE 52601
// begin for i = 1 to array1 do
52543: LD_ADDR_VAR 0 4
52547: PUSH
52548: DOUBLE
52549: LD_INT 1
52551: DEC
52552: ST_TO_ADDR
52553: LD_VAR 0 1
52557: PUSH
52558: FOR_TO
52559: IFFALSE 52597
// if array1 [ i ] <> array2 [ i ] then
52561: LD_VAR 0 1
52565: PUSH
52566: LD_VAR 0 4
52570: ARRAY
52571: PUSH
52572: LD_VAR 0 2
52576: PUSH
52577: LD_VAR 0 4
52581: ARRAY
52582: NONEQUAL
52583: IFFALSE 52595
// begin result := false ;
52585: LD_ADDR_VAR 0 3
52589: PUSH
52590: LD_INT 0
52592: ST_TO_ADDR
// break ;
52593: GO 52597
// end ;
52595: GO 52558
52597: POP
52598: POP
// end else
52599: GO 52609
// result := false ;
52601: LD_ADDR_VAR 0 3
52605: PUSH
52606: LD_INT 0
52608: ST_TO_ADDR
// end ;
52609: LD_VAR 0 3
52613: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52614: LD_INT 0
52616: PPUSH
52617: PPUSH
52618: PPUSH
// pom := GetBase ( fac ) ;
52619: LD_ADDR_VAR 0 5
52623: PUSH
52624: LD_VAR 0 1
52628: PPUSH
52629: CALL_OW 274
52633: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52634: LD_ADDR_VAR 0 4
52638: PUSH
52639: LD_VAR 0 2
52643: PUSH
52644: LD_INT 1
52646: ARRAY
52647: PPUSH
52648: LD_VAR 0 2
52652: PUSH
52653: LD_INT 2
52655: ARRAY
52656: PPUSH
52657: LD_VAR 0 2
52661: PUSH
52662: LD_INT 3
52664: ARRAY
52665: PPUSH
52666: LD_VAR 0 2
52670: PUSH
52671: LD_INT 4
52673: ARRAY
52674: PPUSH
52675: CALL_OW 449
52679: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52680: LD_ADDR_VAR 0 3
52684: PUSH
52685: LD_VAR 0 5
52689: PPUSH
52690: LD_INT 1
52692: PPUSH
52693: CALL_OW 275
52697: PUSH
52698: LD_VAR 0 4
52702: PUSH
52703: LD_INT 1
52705: ARRAY
52706: GREATEREQUAL
52707: PUSH
52708: LD_VAR 0 5
52712: PPUSH
52713: LD_INT 2
52715: PPUSH
52716: CALL_OW 275
52720: PUSH
52721: LD_VAR 0 4
52725: PUSH
52726: LD_INT 2
52728: ARRAY
52729: GREATEREQUAL
52730: AND
52731: PUSH
52732: LD_VAR 0 5
52736: PPUSH
52737: LD_INT 3
52739: PPUSH
52740: CALL_OW 275
52744: PUSH
52745: LD_VAR 0 4
52749: PUSH
52750: LD_INT 3
52752: ARRAY
52753: GREATEREQUAL
52754: AND
52755: ST_TO_ADDR
// end ;
52756: LD_VAR 0 3
52760: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52761: LD_INT 0
52763: PPUSH
52764: PPUSH
52765: PPUSH
52766: PPUSH
// pom := GetBase ( building ) ;
52767: LD_ADDR_VAR 0 3
52771: PUSH
52772: LD_VAR 0 1
52776: PPUSH
52777: CALL_OW 274
52781: ST_TO_ADDR
// if not pom then
52782: LD_VAR 0 3
52786: NOT
52787: IFFALSE 52791
// exit ;
52789: GO 52961
// btype := GetBType ( building ) ;
52791: LD_ADDR_VAR 0 5
52795: PUSH
52796: LD_VAR 0 1
52800: PPUSH
52801: CALL_OW 266
52805: ST_TO_ADDR
// if btype = b_armoury then
52806: LD_VAR 0 5
52810: PUSH
52811: LD_INT 4
52813: EQUAL
52814: IFFALSE 52824
// btype := b_barracks ;
52816: LD_ADDR_VAR 0 5
52820: PUSH
52821: LD_INT 5
52823: ST_TO_ADDR
// if btype = b_depot then
52824: LD_VAR 0 5
52828: PUSH
52829: LD_INT 0
52831: EQUAL
52832: IFFALSE 52842
// btype := b_warehouse ;
52834: LD_ADDR_VAR 0 5
52838: PUSH
52839: LD_INT 1
52841: ST_TO_ADDR
// if btype = b_workshop then
52842: LD_VAR 0 5
52846: PUSH
52847: LD_INT 2
52849: EQUAL
52850: IFFALSE 52860
// btype := b_factory ;
52852: LD_ADDR_VAR 0 5
52856: PUSH
52857: LD_INT 3
52859: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52860: LD_ADDR_VAR 0 4
52864: PUSH
52865: LD_VAR 0 5
52869: PPUSH
52870: LD_VAR 0 1
52874: PPUSH
52875: CALL_OW 248
52879: PPUSH
52880: CALL_OW 450
52884: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52885: LD_ADDR_VAR 0 2
52889: PUSH
52890: LD_VAR 0 3
52894: PPUSH
52895: LD_INT 1
52897: PPUSH
52898: CALL_OW 275
52902: PUSH
52903: LD_VAR 0 4
52907: PUSH
52908: LD_INT 1
52910: ARRAY
52911: GREATEREQUAL
52912: PUSH
52913: LD_VAR 0 3
52917: PPUSH
52918: LD_INT 2
52920: PPUSH
52921: CALL_OW 275
52925: PUSH
52926: LD_VAR 0 4
52930: PUSH
52931: LD_INT 2
52933: ARRAY
52934: GREATEREQUAL
52935: AND
52936: PUSH
52937: LD_VAR 0 3
52941: PPUSH
52942: LD_INT 3
52944: PPUSH
52945: CALL_OW 275
52949: PUSH
52950: LD_VAR 0 4
52954: PUSH
52955: LD_INT 3
52957: ARRAY
52958: GREATEREQUAL
52959: AND
52960: ST_TO_ADDR
// end ;
52961: LD_VAR 0 2
52965: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52966: LD_INT 0
52968: PPUSH
52969: PPUSH
52970: PPUSH
// pom := GetBase ( building ) ;
52971: LD_ADDR_VAR 0 4
52975: PUSH
52976: LD_VAR 0 1
52980: PPUSH
52981: CALL_OW 274
52985: ST_TO_ADDR
// if not pom then
52986: LD_VAR 0 4
52990: NOT
52991: IFFALSE 52995
// exit ;
52993: GO 53096
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52995: LD_ADDR_VAR 0 5
52999: PUSH
53000: LD_VAR 0 2
53004: PPUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: CALL_OW 248
53014: PPUSH
53015: CALL_OW 450
53019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53020: LD_ADDR_VAR 0 3
53024: PUSH
53025: LD_VAR 0 4
53029: PPUSH
53030: LD_INT 1
53032: PPUSH
53033: CALL_OW 275
53037: PUSH
53038: LD_VAR 0 5
53042: PUSH
53043: LD_INT 1
53045: ARRAY
53046: GREATEREQUAL
53047: PUSH
53048: LD_VAR 0 4
53052: PPUSH
53053: LD_INT 2
53055: PPUSH
53056: CALL_OW 275
53060: PUSH
53061: LD_VAR 0 5
53065: PUSH
53066: LD_INT 2
53068: ARRAY
53069: GREATEREQUAL
53070: AND
53071: PUSH
53072: LD_VAR 0 4
53076: PPUSH
53077: LD_INT 3
53079: PPUSH
53080: CALL_OW 275
53084: PUSH
53085: LD_VAR 0 5
53089: PUSH
53090: LD_INT 3
53092: ARRAY
53093: GREATEREQUAL
53094: AND
53095: ST_TO_ADDR
// end ;
53096: LD_VAR 0 3
53100: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
53101: LD_INT 0
53103: PPUSH
53104: PPUSH
53105: PPUSH
53106: PPUSH
53107: PPUSH
53108: PPUSH
53109: PPUSH
53110: PPUSH
53111: PPUSH
53112: PPUSH
// result := false ;
53113: LD_ADDR_VAR 0 6
53117: PUSH
53118: LD_INT 0
53120: ST_TO_ADDR
// if not base or not btype or not x or not y then
53121: LD_VAR 0 1
53125: NOT
53126: PUSH
53127: LD_VAR 0 2
53131: NOT
53132: OR
53133: PUSH
53134: LD_VAR 0 3
53138: NOT
53139: OR
53140: PUSH
53141: LD_VAR 0 4
53145: NOT
53146: OR
53147: IFFALSE 53151
// exit ;
53149: GO 53760
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
53151: LD_ADDR_VAR 0 12
53155: PUSH
53156: LD_VAR 0 2
53160: PPUSH
53161: LD_VAR 0 3
53165: PPUSH
53166: LD_VAR 0 4
53170: PPUSH
53171: LD_VAR 0 5
53175: PPUSH
53176: LD_VAR 0 1
53180: PUSH
53181: LD_INT 1
53183: ARRAY
53184: PPUSH
53185: CALL_OW 248
53189: PPUSH
53190: LD_INT 0
53192: PPUSH
53193: CALL 54597 0 6
53197: ST_TO_ADDR
// if not hexes then
53198: LD_VAR 0 12
53202: NOT
53203: IFFALSE 53207
// exit ;
53205: GO 53760
// for i = 1 to hexes do
53207: LD_ADDR_VAR 0 7
53211: PUSH
53212: DOUBLE
53213: LD_INT 1
53215: DEC
53216: ST_TO_ADDR
53217: LD_VAR 0 12
53221: PUSH
53222: FOR_TO
53223: IFFALSE 53758
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53225: LD_ADDR_VAR 0 11
53229: PUSH
53230: LD_VAR 0 12
53234: PUSH
53235: LD_VAR 0 7
53239: ARRAY
53240: PUSH
53241: LD_INT 1
53243: ARRAY
53244: PPUSH
53245: LD_VAR 0 12
53249: PUSH
53250: LD_VAR 0 7
53254: ARRAY
53255: PUSH
53256: LD_INT 2
53258: ARRAY
53259: PPUSH
53260: CALL_OW 428
53264: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53265: LD_VAR 0 12
53269: PUSH
53270: LD_VAR 0 7
53274: ARRAY
53275: PUSH
53276: LD_INT 1
53278: ARRAY
53279: PPUSH
53280: LD_VAR 0 12
53284: PUSH
53285: LD_VAR 0 7
53289: ARRAY
53290: PUSH
53291: LD_INT 2
53293: ARRAY
53294: PPUSH
53295: CALL_OW 351
53299: PUSH
53300: LD_VAR 0 12
53304: PUSH
53305: LD_VAR 0 7
53309: ARRAY
53310: PUSH
53311: LD_INT 1
53313: ARRAY
53314: PPUSH
53315: LD_VAR 0 12
53319: PUSH
53320: LD_VAR 0 7
53324: ARRAY
53325: PUSH
53326: LD_INT 2
53328: ARRAY
53329: PPUSH
53330: CALL_OW 488
53334: NOT
53335: OR
53336: PUSH
53337: LD_VAR 0 11
53341: PPUSH
53342: CALL_OW 247
53346: PUSH
53347: LD_INT 3
53349: EQUAL
53350: OR
53351: IFFALSE 53357
// exit ;
53353: POP
53354: POP
53355: GO 53760
// if not tmp or not tmp in base then
53357: LD_VAR 0 11
53361: NOT
53362: PUSH
53363: LD_VAR 0 11
53367: PUSH
53368: LD_VAR 0 1
53372: IN
53373: NOT
53374: OR
53375: IFFALSE 53379
// continue ;
53377: GO 53222
// result := true ;
53379: LD_ADDR_VAR 0 6
53383: PUSH
53384: LD_INT 1
53386: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53387: LD_ADDR_VAR 0 15
53391: PUSH
53392: LD_VAR 0 1
53396: PPUSH
53397: LD_INT 22
53399: PUSH
53400: LD_VAR 0 11
53404: PPUSH
53405: CALL_OW 255
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: LD_INT 30
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 30
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PPUSH
53446: CALL_OW 72
53450: ST_TO_ADDR
// if dep then
53451: LD_VAR 0 15
53455: IFFALSE 53591
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53457: LD_ADDR_VAR 0 14
53461: PUSH
53462: LD_VAR 0 15
53466: PUSH
53467: LD_INT 1
53469: ARRAY
53470: PPUSH
53471: CALL_OW 250
53475: PPUSH
53476: LD_VAR 0 15
53480: PUSH
53481: LD_INT 1
53483: ARRAY
53484: PPUSH
53485: CALL_OW 254
53489: PPUSH
53490: LD_INT 5
53492: PPUSH
53493: CALL_OW 272
53497: PUSH
53498: LD_VAR 0 15
53502: PUSH
53503: LD_INT 1
53505: ARRAY
53506: PPUSH
53507: CALL_OW 251
53511: PPUSH
53512: LD_VAR 0 15
53516: PUSH
53517: LD_INT 1
53519: ARRAY
53520: PPUSH
53521: CALL_OW 254
53525: PPUSH
53526: LD_INT 5
53528: PPUSH
53529: CALL_OW 273
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53538: LD_VAR 0 14
53542: PUSH
53543: LD_INT 1
53545: ARRAY
53546: PPUSH
53547: LD_VAR 0 14
53551: PUSH
53552: LD_INT 2
53554: ARRAY
53555: PPUSH
53556: CALL_OW 488
53560: IFFALSE 53591
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53562: LD_VAR 0 11
53566: PPUSH
53567: LD_VAR 0 14
53571: PUSH
53572: LD_INT 1
53574: ARRAY
53575: PPUSH
53576: LD_VAR 0 14
53580: PUSH
53581: LD_INT 2
53583: ARRAY
53584: PPUSH
53585: CALL_OW 111
// continue ;
53589: GO 53222
// end ; end ; r := GetDir ( tmp ) ;
53591: LD_ADDR_VAR 0 13
53595: PUSH
53596: LD_VAR 0 11
53600: PPUSH
53601: CALL_OW 254
53605: ST_TO_ADDR
// if r = 5 then
53606: LD_VAR 0 13
53610: PUSH
53611: LD_INT 5
53613: EQUAL
53614: IFFALSE 53624
// r := 0 ;
53616: LD_ADDR_VAR 0 13
53620: PUSH
53621: LD_INT 0
53623: ST_TO_ADDR
// for j = r to 5 do
53624: LD_ADDR_VAR 0 8
53628: PUSH
53629: DOUBLE
53630: LD_VAR 0 13
53634: DEC
53635: ST_TO_ADDR
53636: LD_INT 5
53638: PUSH
53639: FOR_TO
53640: IFFALSE 53754
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53642: LD_ADDR_VAR 0 9
53646: PUSH
53647: LD_VAR 0 11
53651: PPUSH
53652: CALL_OW 250
53656: PPUSH
53657: LD_VAR 0 8
53661: PPUSH
53662: LD_INT 2
53664: PPUSH
53665: CALL_OW 272
53669: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53670: LD_ADDR_VAR 0 10
53674: PUSH
53675: LD_VAR 0 11
53679: PPUSH
53680: CALL_OW 251
53684: PPUSH
53685: LD_VAR 0 8
53689: PPUSH
53690: LD_INT 2
53692: PPUSH
53693: CALL_OW 273
53697: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53698: LD_VAR 0 9
53702: PPUSH
53703: LD_VAR 0 10
53707: PPUSH
53708: CALL_OW 488
53712: PUSH
53713: LD_VAR 0 9
53717: PPUSH
53718: LD_VAR 0 10
53722: PPUSH
53723: CALL_OW 428
53727: NOT
53728: AND
53729: IFFALSE 53752
// begin ComMoveXY ( tmp , _x , _y ) ;
53731: LD_VAR 0 11
53735: PPUSH
53736: LD_VAR 0 9
53740: PPUSH
53741: LD_VAR 0 10
53745: PPUSH
53746: CALL_OW 111
// break ;
53750: GO 53754
// end ; end ;
53752: GO 53639
53754: POP
53755: POP
// end ;
53756: GO 53222
53758: POP
53759: POP
// end ;
53760: LD_VAR 0 6
53764: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
53765: LD_INT 0
53767: PPUSH
53768: PPUSH
53769: PPUSH
53770: PPUSH
53771: PPUSH
53772: PPUSH
53773: PPUSH
53774: PPUSH
53775: PPUSH
53776: PPUSH
// result := false ;
53777: LD_ADDR_VAR 0 6
53781: PUSH
53782: LD_INT 0
53784: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53785: LD_VAR 0 1
53789: NOT
53790: PUSH
53791: LD_VAR 0 1
53795: PPUSH
53796: CALL_OW 266
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: IN
53811: NOT
53812: OR
53813: PUSH
53814: LD_VAR 0 2
53818: NOT
53819: OR
53820: PUSH
53821: LD_VAR 0 5
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: LD_INT 4
53840: PUSH
53841: LD_INT 5
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: IN
53852: NOT
53853: OR
53854: PUSH
53855: LD_VAR 0 3
53859: PPUSH
53860: LD_VAR 0 4
53864: PPUSH
53865: CALL_OW 488
53869: NOT
53870: OR
53871: IFFALSE 53875
// exit ;
53873: GO 54592
// pom := GetBase ( depot ) ;
53875: LD_ADDR_VAR 0 10
53879: PUSH
53880: LD_VAR 0 1
53884: PPUSH
53885: CALL_OW 274
53889: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53890: LD_ADDR_VAR 0 11
53894: PUSH
53895: LD_VAR 0 2
53899: PPUSH
53900: LD_VAR 0 1
53904: PPUSH
53905: CALL_OW 248
53909: PPUSH
53910: CALL_OW 450
53914: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53915: LD_VAR 0 10
53919: PPUSH
53920: LD_INT 1
53922: PPUSH
53923: CALL_OW 275
53927: PUSH
53928: LD_VAR 0 11
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: GREATEREQUAL
53937: PUSH
53938: LD_VAR 0 10
53942: PPUSH
53943: LD_INT 2
53945: PPUSH
53946: CALL_OW 275
53950: PUSH
53951: LD_VAR 0 11
53955: PUSH
53956: LD_INT 2
53958: ARRAY
53959: GREATEREQUAL
53960: AND
53961: PUSH
53962: LD_VAR 0 10
53966: PPUSH
53967: LD_INT 3
53969: PPUSH
53970: CALL_OW 275
53974: PUSH
53975: LD_VAR 0 11
53979: PUSH
53980: LD_INT 3
53982: ARRAY
53983: GREATEREQUAL
53984: AND
53985: NOT
53986: IFFALSE 53990
// exit ;
53988: GO 54592
// if GetBType ( depot ) = b_depot then
53990: LD_VAR 0 1
53994: PPUSH
53995: CALL_OW 266
53999: PUSH
54000: LD_INT 0
54002: EQUAL
54003: IFFALSE 54015
// dist := 28 else
54005: LD_ADDR_VAR 0 14
54009: PUSH
54010: LD_INT 28
54012: ST_TO_ADDR
54013: GO 54023
// dist := 36 ;
54015: LD_ADDR_VAR 0 14
54019: PUSH
54020: LD_INT 36
54022: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54023: LD_VAR 0 1
54027: PPUSH
54028: LD_VAR 0 3
54032: PPUSH
54033: LD_VAR 0 4
54037: PPUSH
54038: CALL_OW 297
54042: PUSH
54043: LD_VAR 0 14
54047: GREATER
54048: IFFALSE 54052
// exit ;
54050: GO 54592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54052: LD_ADDR_VAR 0 12
54056: PUSH
54057: LD_VAR 0 2
54061: PPUSH
54062: LD_VAR 0 3
54066: PPUSH
54067: LD_VAR 0 4
54071: PPUSH
54072: LD_VAR 0 5
54076: PPUSH
54077: LD_VAR 0 1
54081: PPUSH
54082: CALL_OW 248
54086: PPUSH
54087: LD_INT 0
54089: PPUSH
54090: CALL 54597 0 6
54094: ST_TO_ADDR
// if not hexes then
54095: LD_VAR 0 12
54099: NOT
54100: IFFALSE 54104
// exit ;
54102: GO 54592
// hex := GetHexInfo ( x , y ) ;
54104: LD_ADDR_VAR 0 15
54108: PUSH
54109: LD_VAR 0 3
54113: PPUSH
54114: LD_VAR 0 4
54118: PPUSH
54119: CALL_OW 546
54123: ST_TO_ADDR
// if hex [ 1 ] then
54124: LD_VAR 0 15
54128: PUSH
54129: LD_INT 1
54131: ARRAY
54132: IFFALSE 54136
// exit ;
54134: GO 54592
// height := hex [ 2 ] ;
54136: LD_ADDR_VAR 0 13
54140: PUSH
54141: LD_VAR 0 15
54145: PUSH
54146: LD_INT 2
54148: ARRAY
54149: ST_TO_ADDR
// for i = 1 to hexes do
54150: LD_ADDR_VAR 0 7
54154: PUSH
54155: DOUBLE
54156: LD_INT 1
54158: DEC
54159: ST_TO_ADDR
54160: LD_VAR 0 12
54164: PUSH
54165: FOR_TO
54166: IFFALSE 54496
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54168: LD_VAR 0 12
54172: PUSH
54173: LD_VAR 0 7
54177: ARRAY
54178: PUSH
54179: LD_INT 1
54181: ARRAY
54182: PPUSH
54183: LD_VAR 0 12
54187: PUSH
54188: LD_VAR 0 7
54192: ARRAY
54193: PUSH
54194: LD_INT 2
54196: ARRAY
54197: PPUSH
54198: CALL_OW 488
54202: NOT
54203: PUSH
54204: LD_VAR 0 12
54208: PUSH
54209: LD_VAR 0 7
54213: ARRAY
54214: PUSH
54215: LD_INT 1
54217: ARRAY
54218: PPUSH
54219: LD_VAR 0 12
54223: PUSH
54224: LD_VAR 0 7
54228: ARRAY
54229: PUSH
54230: LD_INT 2
54232: ARRAY
54233: PPUSH
54234: CALL_OW 428
54238: PUSH
54239: LD_INT 0
54241: GREATER
54242: OR
54243: PUSH
54244: LD_VAR 0 12
54248: PUSH
54249: LD_VAR 0 7
54253: ARRAY
54254: PUSH
54255: LD_INT 1
54257: ARRAY
54258: PPUSH
54259: LD_VAR 0 12
54263: PUSH
54264: LD_VAR 0 7
54268: ARRAY
54269: PUSH
54270: LD_INT 2
54272: ARRAY
54273: PPUSH
54274: CALL_OW 351
54278: OR
54279: IFFALSE 54285
// exit ;
54281: POP
54282: POP
54283: GO 54592
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54285: LD_ADDR_VAR 0 8
54289: PUSH
54290: LD_VAR 0 12
54294: PUSH
54295: LD_VAR 0 7
54299: ARRAY
54300: PUSH
54301: LD_INT 1
54303: ARRAY
54304: PPUSH
54305: LD_VAR 0 12
54309: PUSH
54310: LD_VAR 0 7
54314: ARRAY
54315: PUSH
54316: LD_INT 2
54318: ARRAY
54319: PPUSH
54320: CALL_OW 546
54324: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54325: LD_VAR 0 8
54329: PUSH
54330: LD_INT 1
54332: ARRAY
54333: PUSH
54334: LD_VAR 0 8
54338: PUSH
54339: LD_INT 2
54341: ARRAY
54342: PUSH
54343: LD_VAR 0 13
54347: PUSH
54348: LD_INT 2
54350: PLUS
54351: GREATER
54352: OR
54353: PUSH
54354: LD_VAR 0 8
54358: PUSH
54359: LD_INT 2
54361: ARRAY
54362: PUSH
54363: LD_VAR 0 13
54367: PUSH
54368: LD_INT 2
54370: MINUS
54371: LESS
54372: OR
54373: PUSH
54374: LD_VAR 0 8
54378: PUSH
54379: LD_INT 3
54381: ARRAY
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 8
54388: PUSH
54389: LD_INT 9
54391: PUSH
54392: LD_INT 10
54394: PUSH
54395: LD_INT 11
54397: PUSH
54398: LD_INT 12
54400: PUSH
54401: LD_INT 13
54403: PUSH
54404: LD_INT 16
54406: PUSH
54407: LD_INT 17
54409: PUSH
54410: LD_INT 18
54412: PUSH
54413: LD_INT 19
54415: PUSH
54416: LD_INT 20
54418: PUSH
54419: LD_INT 21
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: IN
54437: NOT
54438: OR
54439: PUSH
54440: LD_VAR 0 8
54444: PUSH
54445: LD_INT 5
54447: ARRAY
54448: NOT
54449: OR
54450: PUSH
54451: LD_VAR 0 8
54455: PUSH
54456: LD_INT 6
54458: ARRAY
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 7
54468: PUSH
54469: LD_INT 9
54471: PUSH
54472: LD_INT 10
54474: PUSH
54475: LD_INT 11
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: IN
54486: NOT
54487: OR
54488: IFFALSE 54494
// exit ;
54490: POP
54491: POP
54492: GO 54592
// end ;
54494: GO 54165
54496: POP
54497: POP
// side := GetSide ( depot ) ;
54498: LD_ADDR_VAR 0 9
54502: PUSH
54503: LD_VAR 0 1
54507: PPUSH
54508: CALL_OW 255
54512: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54513: LD_VAR 0 9
54517: PPUSH
54518: LD_VAR 0 3
54522: PPUSH
54523: LD_VAR 0 4
54527: PPUSH
54528: LD_INT 20
54530: PPUSH
54531: CALL 47246 0 4
54535: PUSH
54536: LD_INT 4
54538: ARRAY
54539: IFFALSE 54543
// exit ;
54541: GO 54592
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54543: LD_VAR 0 2
54547: PUSH
54548: LD_INT 29
54550: PUSH
54551: LD_INT 30
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: IN
54558: PUSH
54559: LD_VAR 0 3
54563: PPUSH
54564: LD_VAR 0 4
54568: PPUSH
54569: LD_VAR 0 9
54573: PPUSH
54574: CALL_OW 440
54578: NOT
54579: AND
54580: IFFALSE 54584
// exit ;
54582: GO 54592
// result := true ;
54584: LD_ADDR_VAR 0 6
54588: PUSH
54589: LD_INT 1
54591: ST_TO_ADDR
// end ;
54592: LD_VAR 0 6
54596: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
54597: LD_INT 0
54599: PPUSH
54600: PPUSH
54601: PPUSH
54602: PPUSH
54603: PPUSH
54604: PPUSH
54605: PPUSH
54606: PPUSH
54607: PPUSH
54608: PPUSH
54609: PPUSH
54610: PPUSH
54611: PPUSH
54612: PPUSH
54613: PPUSH
54614: PPUSH
54615: PPUSH
54616: PPUSH
54617: PPUSH
54618: PPUSH
54619: PPUSH
54620: PPUSH
54621: PPUSH
54622: PPUSH
54623: PPUSH
54624: PPUSH
54625: PPUSH
54626: PPUSH
54627: PPUSH
54628: PPUSH
54629: PPUSH
54630: PPUSH
54631: PPUSH
54632: PPUSH
54633: PPUSH
54634: PPUSH
54635: PPUSH
54636: PPUSH
54637: PPUSH
54638: PPUSH
54639: PPUSH
54640: PPUSH
54641: PPUSH
54642: PPUSH
54643: PPUSH
54644: PPUSH
54645: PPUSH
54646: PPUSH
54647: PPUSH
54648: PPUSH
54649: PPUSH
54650: PPUSH
54651: PPUSH
54652: PPUSH
54653: PPUSH
54654: PPUSH
54655: PPUSH
54656: PPUSH
// result = [ ] ;
54657: LD_ADDR_VAR 0 7
54661: PUSH
54662: EMPTY
54663: ST_TO_ADDR
// temp_list = [ ] ;
54664: LD_ADDR_VAR 0 9
54668: PUSH
54669: EMPTY
54670: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54671: LD_VAR 0 4
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: LD_INT 3
54687: PUSH
54688: LD_INT 4
54690: PUSH
54691: LD_INT 5
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: IN
54702: NOT
54703: PUSH
54704: LD_VAR 0 1
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: IN
54719: PUSH
54720: LD_VAR 0 5
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: LD_INT 3
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: LIST
54738: IN
54739: NOT
54740: AND
54741: OR
54742: IFFALSE 54746
// exit ;
54744: GO 73137
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54746: LD_VAR 0 1
54750: PUSH
54751: LD_INT 6
54753: PUSH
54754: LD_INT 7
54756: PUSH
54757: LD_INT 8
54759: PUSH
54760: LD_INT 13
54762: PUSH
54763: LD_INT 12
54765: PUSH
54766: LD_INT 15
54768: PUSH
54769: LD_INT 11
54771: PUSH
54772: LD_INT 14
54774: PUSH
54775: LD_INT 10
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: IN
54789: IFFALSE 54799
// btype = b_lab ;
54791: LD_ADDR_VAR 0 1
54795: PUSH
54796: LD_INT 6
54798: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54799: LD_VAR 0 6
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: IN
54818: NOT
54819: PUSH
54820: LD_VAR 0 1
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: LD_INT 6
54839: PUSH
54840: LD_INT 36
54842: PUSH
54843: LD_INT 4
54845: PUSH
54846: LD_INT 5
54848: PUSH
54849: LD_INT 31
54851: PUSH
54852: LD_INT 32
54854: PUSH
54855: LD_INT 33
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: IN
54871: NOT
54872: PUSH
54873: LD_VAR 0 6
54877: PUSH
54878: LD_INT 1
54880: EQUAL
54881: AND
54882: OR
54883: PUSH
54884: LD_VAR 0 1
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: LD_INT 3
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: IN
54899: NOT
54900: PUSH
54901: LD_VAR 0 6
54905: PUSH
54906: LD_INT 2
54908: EQUAL
54909: AND
54910: OR
54911: IFFALSE 54921
// mode = 0 ;
54913: LD_ADDR_VAR 0 6
54917: PUSH
54918: LD_INT 0
54920: ST_TO_ADDR
// case mode of 0 :
54921: LD_VAR 0 6
54925: PUSH
54926: LD_INT 0
54928: DOUBLE
54929: EQUAL
54930: IFTRUE 54934
54932: GO 66387
54934: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54935: LD_ADDR_VAR 0 11
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: LD_INT 3
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 3
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55128: LD_ADDR_VAR 0 12
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: NEG
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55324: LD_ADDR_VAR 0 13
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 3
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 3
55495: NEG
55496: PUSH
55497: LD_INT 3
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55523: LD_ADDR_VAR 0 14
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55719: LD_ADDR_VAR 0 15
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55912: LD_ADDR_VAR 0 16
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56105: LD_ADDR_VAR 0 17
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56335: LD_ADDR_VAR 0 18
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56565: LD_ADDR_VAR 0 19
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: LD_INT 2
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56795: LD_ADDR_VAR 0 20
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57025: LD_ADDR_VAR 0 21
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57255: LD_ADDR_VAR 0 22
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57485: LD_ADDR_VAR 0 23
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 3
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57765: LD_ADDR_VAR 0 24
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 3
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58041: LD_ADDR_VAR 0 25
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: NEG
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 3
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: LD_INT 3
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58315: LD_ADDR_VAR 0 26
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 2
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58591: LD_ADDR_VAR 0 27
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: LD_INT 2
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 3
58836: NEG
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58871: LD_ADDR_VAR 0 28
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 2
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 2
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 3
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: NEG
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59153: LD_ADDR_VAR 0 29
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 3
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 3
59397: NEG
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59432: LD_ADDR_VAR 0 30
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 3
59675: NEG
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59710: LD_ADDR_VAR 0 31
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 3
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 3
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 3
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59988: LD_ADDR_VAR 0 32
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: LD_INT 3
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: LD_INT 2
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60266: LD_ADDR_VAR 0 33
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 2
60456: NEG
60457: PUSH
60458: LD_INT 3
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 2
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: LD_INT 3
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60545: LD_ADDR_VAR 0 34
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: LD_INT 2
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: LD_INT 2
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: LD_INT 3
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: LD_INT 2
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 3
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 3
60790: NEG
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60825: LD_ADDR_VAR 0 35
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60937: LD_ADDR_VAR 0 36
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61049: LD_ADDR_VAR 0 37
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61161: LD_ADDR_VAR 0 38
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61273: LD_ADDR_VAR 0 39
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61385: LD_ADDR_VAR 0 40
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61497: LD_ADDR_VAR 0 41
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: LD_INT 2
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: LD_INT 2
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 2
61652: NEG
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: NEG
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 2
61675: NEG
61676: PUSH
61677: LD_INT 2
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 3
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 2
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: LD_INT 2
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 3
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 3
61771: NEG
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 3
61782: NEG
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 3
61794: NEG
61795: PUSH
61796: LD_INT 2
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 3
61806: NEG
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61847: LD_ADDR_VAR 0 42
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: LD_INT 2
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: LD_INT 3
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: LD_INT 3
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 3
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 3
62093: PUSH
62094: LD_INT 3
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 2
62103: PUSH
62104: LD_INT 3
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 3
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_INT 3
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 3
62144: NEG
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 3
62156: NEG
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62197: LD_ADDR_VAR 0 43
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: NEG
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 2
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 2
62363: NEG
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: LD_INT 3
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 3
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 2
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 3
62493: NEG
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 3
62504: NEG
62505: PUSH
62506: LD_INT 1
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62545: LD_ADDR_VAR 0 44
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 2
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 2
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: LD_INT 2
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: NEG
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 2
62711: NEG
62712: PUSH
62713: LD_INT 1
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: LD_INT 2
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: NEG
62736: PUSH
62737: LD_INT 3
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 3
62778: PUSH
62779: LD_INT 2
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: LD_INT 3
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 2
62808: NEG
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 3
62819: NEG
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 3
62830: NEG
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 3
62842: NEG
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 3
62854: NEG
62855: PUSH
62856: LD_INT 3
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62895: LD_ADDR_VAR 0 45
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: LD_INT 2
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: LD_INT 2
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: LD_INT 3
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: LD_INT 3
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: LD_INT 3
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: LD_INT 2
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 3
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 3
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 3
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: NEG
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: NEG
63205: PUSH
63206: LD_INT 3
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63245: LD_ADDR_VAR 0 46
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 1
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: LD_INT 2
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 2
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 2
63411: NEG
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: NEG
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: LD_INT 3
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 3
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 2
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 3
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: LD_INT 3
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: LD_INT 3
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 1
63519: NEG
63520: PUSH
63521: LD_INT 2
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 2
63530: NEG
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 3
63541: NEG
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 3
63552: NEG
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63593: LD_ADDR_VAR 0 47
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 1
63651: NEG
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: NEG
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: LD_INT 2
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63744: LD_ADDR_VAR 0 48
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: NEG
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: LD_INT 2
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: LD_INT 2
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 2
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63891: LD_ADDR_VAR 0 49
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: LD_INT 1
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: PUSH
64004: LD_INT 2
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64035: LD_ADDR_VAR 0 50
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 1
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: LD_INT 1
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: LD_INT 1
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: LD_INT 1
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: LD_INT 2
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64179: LD_ADDR_VAR 0 51
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 2
64302: NEG
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64326: LD_ADDR_VAR 0 52
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: LD_INT 0
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: LD_INT 1
64346: NEG
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: NEG
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: LD_INT 2
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 2
64430: NEG
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 2
64441: NEG
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 2
64453: NEG
64454: PUSH
64455: LD_INT 2
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64477: LD_ADDR_VAR 0 53
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 2
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 2
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 2
64676: NEG
64677: PUSH
64678: LD_INT 2
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64707: LD_ADDR_VAR 0 54
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: NEG
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 2
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64937: LD_ADDR_VAR 0 55
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: LD_INT 2
65022: NEG
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 2
65033: NEG
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 2
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 2
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: LD_INT 2
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: NEG
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 2
65136: NEG
65137: PUSH
65138: LD_INT 2
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65167: LD_ADDR_VAR 0 56
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: LD_INT 2
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: LD_INT 2
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: LD_INT 1
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: LD_INT 2
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: LD_INT 2
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 2
65343: NEG
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 2
65354: NEG
65355: PUSH
65356: LD_INT 1
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: LD_INT 2
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65397: LD_ADDR_VAR 0 57
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: LD_INT 1
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: NEG
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: LD_INT 2
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: LD_INT 2
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: LD_INT 1
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 2
65522: PUSH
65523: LD_INT 1
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 2
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: LD_INT 2
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 1
65562: NEG
65563: PUSH
65564: LD_INT 1
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 2
65573: NEG
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 2
65584: NEG
65585: PUSH
65586: LD_INT 1
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 2
65596: NEG
65597: PUSH
65598: LD_INT 2
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65627: LD_ADDR_VAR 0 58
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: LD_INT 1
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: NEG
65686: PUSH
65687: LD_INT 0
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: LD_INT 1
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: LD_INT 2
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: LD_INT 2
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 1
65772: PUSH
65773: LD_INT 2
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 2
65803: NEG
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 2
65814: NEG
65815: PUSH
65816: LD_INT 1
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 2
65826: NEG
65827: PUSH
65828: LD_INT 2
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65857: LD_ADDR_VAR 0 59
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 1
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: LD_INT 1
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: LD_INT 1
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65945: LD_ADDR_VAR 0 60
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 1
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 1
66003: NEG
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66033: LD_ADDR_VAR 0 61
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 1
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 1
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 0
66081: PUSH
66082: LD_INT 1
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: NEG
66092: PUSH
66093: LD_INT 0
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: LD_INT 1
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66121: LD_ADDR_VAR 0 62
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 0
66169: PUSH
66170: LD_INT 1
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: LD_INT 0
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 1
66190: NEG
66191: PUSH
66192: LD_INT 1
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66209: LD_ADDR_VAR 0 63
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: LD_INT 1
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 1
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: LD_INT 1
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: LD_INT 1
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66297: LD_ADDR_VAR 0 64
66301: PUSH
66302: LD_INT 0
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 1
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 1
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 1
66355: NEG
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: ST_TO_ADDR
// end ; 1 :
66385: GO 72282
66387: LD_INT 1
66389: DOUBLE
66390: EQUAL
66391: IFTRUE 66395
66393: GO 69018
66395: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66396: LD_ADDR_VAR 0 11
66400: PUSH
66401: LD_INT 1
66403: NEG
66404: PUSH
66405: LD_INT 3
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: LD_INT 3
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: LD_INT 2
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: LIST
66439: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66440: LD_ADDR_VAR 0 12
66444: PUSH
66445: LD_INT 2
66447: PUSH
66448: LD_INT 1
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 3
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 3
66468: PUSH
66469: LD_INT 1
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: LIST
66480: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66481: LD_ADDR_VAR 0 13
66485: PUSH
66486: LD_INT 3
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 3
66498: PUSH
66499: LD_INT 3
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 2
66508: PUSH
66509: LD_INT 3
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: LIST
66520: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66521: LD_ADDR_VAR 0 14
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: LD_INT 3
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: LD_INT 3
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: NEG
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66562: LD_ADDR_VAR 0 15
66566: PUSH
66567: LD_INT 2
66569: NEG
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: NEG
66592: PUSH
66593: LD_INT 1
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: LIST
66605: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66606: LD_ADDR_VAR 0 16
66610: PUSH
66611: LD_INT 2
66613: NEG
66614: PUSH
66615: LD_INT 3
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: NEG
66626: PUSH
66627: LD_INT 2
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 3
66637: NEG
66638: PUSH
66639: LD_INT 3
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: LIST
66651: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66652: LD_ADDR_VAR 0 17
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: LD_INT 3
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 3
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: LD_INT 2
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: LIST
66695: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66696: LD_ADDR_VAR 0 18
66700: PUSH
66701: LD_INT 2
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 3
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 3
66724: PUSH
66725: LD_INT 1
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: LIST
66736: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66737: LD_ADDR_VAR 0 19
66741: PUSH
66742: LD_INT 3
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 3
66754: PUSH
66755: LD_INT 3
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 2
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: LIST
66776: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66777: LD_ADDR_VAR 0 20
66781: PUSH
66782: LD_INT 1
66784: PUSH
66785: LD_INT 3
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 3
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: LIST
66817: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66818: LD_ADDR_VAR 0 21
66822: PUSH
66823: LD_INT 2
66825: NEG
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 3
66836: NEG
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 3
66847: NEG
66848: PUSH
66849: LD_INT 1
66851: NEG
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66862: LD_ADDR_VAR 0 22
66866: PUSH
66867: LD_INT 2
66869: NEG
66870: PUSH
66871: LD_INT 3
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 3
66881: NEG
66882: PUSH
66883: LD_INT 2
66885: NEG
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 3
66893: NEG
66894: PUSH
66895: LD_INT 3
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66908: LD_ADDR_VAR 0 23
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: LD_INT 3
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: LD_INT 4
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 1
66938: PUSH
66939: LD_INT 3
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: LIST
66951: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66952: LD_ADDR_VAR 0 24
66956: PUSH
66957: LD_INT 3
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 3
66969: PUSH
66970: LD_INT 1
66972: NEG
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 4
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: LIST
66992: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66993: LD_ADDR_VAR 0 25
66997: PUSH
66998: LD_INT 3
67000: PUSH
67001: LD_INT 3
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 4
67010: PUSH
67011: LD_INT 3
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 3
67020: PUSH
67021: LD_INT 4
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: LIST
67032: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67033: LD_ADDR_VAR 0 26
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 1
67050: PUSH
67051: LD_INT 4
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: NEG
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67074: LD_ADDR_VAR 0 27
67078: PUSH
67079: LD_INT 3
67081: NEG
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 3
67092: NEG
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 4
67103: NEG
67104: PUSH
67105: LD_INT 1
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: LIST
67117: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67118: LD_ADDR_VAR 0 28
67122: PUSH
67123: LD_INT 3
67125: NEG
67126: PUSH
67127: LD_INT 3
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: NEG
67138: PUSH
67139: LD_INT 4
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 4
67149: NEG
67150: PUSH
67151: LD_INT 3
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: LIST
67163: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67164: LD_ADDR_VAR 0 29
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: LD_INT 3
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 3
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: PUSH
67195: LD_INT 2
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 1
67205: NEG
67206: PUSH
67207: LD_INT 4
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: LD_INT 4
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 1
67228: PUSH
67229: LD_INT 3
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: LD_INT 5
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: LD_INT 5
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: LD_INT 4
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: LD_INT 6
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: LD_INT 6
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 1
67296: PUSH
67297: LD_INT 5
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67319: LD_ADDR_VAR 0 30
67323: PUSH
67324: LD_INT 2
67326: PUSH
67327: LD_INT 1
67329: NEG
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 3
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 3
67347: PUSH
67348: LD_INT 1
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 3
67357: PUSH
67358: LD_INT 1
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 4
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 4
67378: PUSH
67379: LD_INT 1
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 4
67388: PUSH
67389: LD_INT 1
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 5
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 5
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 5
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 6
67430: PUSH
67431: LD_INT 0
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 6
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67462: LD_ADDR_VAR 0 31
67466: PUSH
67467: LD_INT 3
67469: PUSH
67470: LD_INT 2
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 3
67479: PUSH
67480: LD_INT 3
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 2
67489: PUSH
67490: LD_INT 3
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 4
67499: PUSH
67500: LD_INT 3
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 4
67509: PUSH
67510: LD_INT 4
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 3
67519: PUSH
67520: LD_INT 4
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 5
67529: PUSH
67530: LD_INT 4
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 5
67539: PUSH
67540: LD_INT 5
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 4
67549: PUSH
67550: LD_INT 5
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 6
67559: PUSH
67560: LD_INT 5
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 6
67569: PUSH
67570: LD_INT 6
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 5
67579: PUSH
67580: LD_INT 6
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67601: LD_ADDR_VAR 0 32
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: LD_INT 3
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_INT 3
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 1
67639: PUSH
67640: LD_INT 4
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: LD_INT 4
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 1
67659: NEG
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 1
67670: PUSH
67671: LD_INT 5
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: LD_INT 5
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 1
67690: NEG
67691: PUSH
67692: LD_INT 4
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: PUSH
67702: LD_INT 6
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: LD_INT 6
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 1
67721: NEG
67722: PUSH
67723: LD_INT 5
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67744: LD_ADDR_VAR 0 33
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 3
67762: NEG
67763: PUSH
67764: LD_INT 0
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 3
67773: NEG
67774: PUSH
67775: LD_INT 1
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 3
67785: NEG
67786: PUSH
67787: LD_INT 1
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 4
67796: NEG
67797: PUSH
67798: LD_INT 0
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 4
67807: NEG
67808: PUSH
67809: LD_INT 1
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 4
67819: NEG
67820: PUSH
67821: LD_INT 1
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 5
67830: NEG
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 5
67841: NEG
67842: PUSH
67843: LD_INT 1
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 5
67853: NEG
67854: PUSH
67855: LD_INT 1
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 6
67864: NEG
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 6
67875: NEG
67876: PUSH
67877: LD_INT 1
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67899: LD_ADDR_VAR 0 34
67903: PUSH
67904: LD_INT 2
67906: NEG
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 3
67918: NEG
67919: PUSH
67920: LD_INT 2
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 3
67930: NEG
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 3
67942: NEG
67943: PUSH
67944: LD_INT 4
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 4
67954: NEG
67955: PUSH
67956: LD_INT 3
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 4
67966: NEG
67967: PUSH
67968: LD_INT 4
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 4
67978: NEG
67979: PUSH
67980: LD_INT 5
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 5
67990: NEG
67991: PUSH
67992: LD_INT 4
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 5
68002: NEG
68003: PUSH
68004: LD_INT 5
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 5
68014: NEG
68015: PUSH
68016: LD_INT 6
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 6
68026: NEG
68027: PUSH
68028: LD_INT 5
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 6
68038: NEG
68039: PUSH
68040: LD_INT 6
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68062: LD_ADDR_VAR 0 41
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: LD_INT 2
68072: NEG
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 1
68080: NEG
68081: PUSH
68082: LD_INT 3
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: LD_INT 2
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68106: LD_ADDR_VAR 0 42
68110: PUSH
68111: LD_INT 2
68113: PUSH
68114: LD_INT 0
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 2
68123: PUSH
68124: LD_INT 1
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 3
68134: PUSH
68135: LD_INT 1
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: LIST
68146: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68147: LD_ADDR_VAR 0 43
68151: PUSH
68152: LD_INT 2
68154: PUSH
68155: LD_INT 2
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 3
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 2
68174: PUSH
68175: LD_INT 3
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: LIST
68186: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68187: LD_ADDR_VAR 0 44
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: LD_INT 2
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: LD_INT 3
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: LD_INT 2
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: LIST
68227: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68228: LD_ADDR_VAR 0 45
68232: PUSH
68233: LD_INT 2
68235: NEG
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 2
68246: NEG
68247: PUSH
68248: LD_INT 1
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 3
68257: NEG
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: LIST
68271: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68272: LD_ADDR_VAR 0 46
68276: PUSH
68277: LD_INT 2
68279: NEG
68280: PUSH
68281: LD_INT 2
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 2
68291: NEG
68292: PUSH
68293: LD_INT 3
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 3
68303: NEG
68304: PUSH
68305: LD_INT 2
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: LIST
68317: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68318: LD_ADDR_VAR 0 47
68322: PUSH
68323: LD_INT 2
68325: NEG
68326: PUSH
68327: LD_INT 3
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 1
68337: NEG
68338: PUSH
68339: LD_INT 3
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68351: LD_ADDR_VAR 0 48
68355: PUSH
68356: LD_INT 1
68358: PUSH
68359: LD_INT 2
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 2
68369: PUSH
68370: LD_INT 1
68372: NEG
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68382: LD_ADDR_VAR 0 49
68386: PUSH
68387: LD_INT 3
68389: PUSH
68390: LD_INT 1
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 3
68399: PUSH
68400: LD_INT 2
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68411: LD_ADDR_VAR 0 50
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: LD_INT 3
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: LD_INT 3
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68440: LD_ADDR_VAR 0 51
68444: PUSH
68445: LD_INT 1
68447: NEG
68448: PUSH
68449: LD_INT 2
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 2
68458: NEG
68459: PUSH
68460: LD_INT 1
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68471: LD_ADDR_VAR 0 52
68475: PUSH
68476: LD_INT 3
68478: NEG
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 3
68490: NEG
68491: PUSH
68492: LD_INT 2
68494: NEG
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68504: LD_ADDR_VAR 0 53
68508: PUSH
68509: LD_INT 1
68511: NEG
68512: PUSH
68513: LD_INT 3
68515: NEG
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: LD_INT 3
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 1
68534: PUSH
68535: LD_INT 2
68537: NEG
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: LIST
68547: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68548: LD_ADDR_VAR 0 54
68552: PUSH
68553: LD_INT 2
68555: PUSH
68556: LD_INT 1
68558: NEG
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 3
68566: PUSH
68567: LD_INT 0
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 3
68576: PUSH
68577: LD_INT 1
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: LIST
68588: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68589: LD_ADDR_VAR 0 55
68593: PUSH
68594: LD_INT 3
68596: PUSH
68597: LD_INT 2
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 3
68606: PUSH
68607: LD_INT 3
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 2
68616: PUSH
68617: LD_INT 3
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: LIST
68628: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68629: LD_ADDR_VAR 0 56
68633: PUSH
68634: LD_INT 1
68636: PUSH
68637: LD_INT 3
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 0
68646: PUSH
68647: LD_INT 3
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 1
68656: NEG
68657: PUSH
68658: LD_INT 2
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: LIST
68669: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68670: LD_ADDR_VAR 0 57
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PUSH
68679: LD_INT 1
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 3
68688: NEG
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 3
68699: NEG
68700: PUSH
68701: LD_INT 1
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: LIST
68713: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68714: LD_ADDR_VAR 0 58
68718: PUSH
68719: LD_INT 2
68721: NEG
68722: PUSH
68723: LD_INT 3
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 3
68733: NEG
68734: PUSH
68735: LD_INT 2
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 3
68745: NEG
68746: PUSH
68747: LD_INT 3
68749: NEG
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: LIST
68759: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68760: LD_ADDR_VAR 0 59
68764: PUSH
68765: LD_INT 1
68767: NEG
68768: PUSH
68769: LD_INT 2
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: LD_INT 2
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 1
68790: PUSH
68791: LD_INT 1
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: LIST
68803: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68804: LD_ADDR_VAR 0 60
68808: PUSH
68809: LD_INT 1
68811: PUSH
68812: LD_INT 1
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 2
68822: PUSH
68823: LD_INT 0
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: LD_INT 1
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: LIST
68844: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68845: LD_ADDR_VAR 0 61
68849: PUSH
68850: LD_INT 2
68852: PUSH
68853: LD_INT 1
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 2
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: LD_INT 2
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68885: LD_ADDR_VAR 0 62
68889: PUSH
68890: LD_INT 1
68892: PUSH
68893: LD_INT 2
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 1
68912: NEG
68913: PUSH
68914: LD_INT 1
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: LIST
68925: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68926: LD_ADDR_VAR 0 63
68930: PUSH
68931: LD_INT 1
68933: NEG
68934: PUSH
68935: LD_INT 1
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 2
68944: NEG
68945: PUSH
68946: LD_INT 0
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: LD_INT 1
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68970: LD_ADDR_VAR 0 64
68974: PUSH
68975: LD_INT 1
68977: NEG
68978: PUSH
68979: LD_INT 2
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 2
68989: NEG
68990: PUSH
68991: LD_INT 1
68993: NEG
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 2
69001: NEG
69002: PUSH
69003: LD_INT 2
69005: NEG
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: LIST
69015: ST_TO_ADDR
// end ; 2 :
69016: GO 72282
69018: LD_INT 2
69020: DOUBLE
69021: EQUAL
69022: IFTRUE 69026
69024: GO 72281
69026: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69027: LD_ADDR_VAR 0 29
69031: PUSH
69032: LD_INT 4
69034: PUSH
69035: LD_INT 0
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 4
69044: PUSH
69045: LD_INT 1
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 5
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 5
69065: PUSH
69066: LD_INT 1
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 4
69075: PUSH
69076: LD_INT 1
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 3
69085: PUSH
69086: LD_INT 0
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: LD_INT 1
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 3
69106: PUSH
69107: LD_INT 2
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 5
69117: PUSH
69118: LD_INT 2
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: PUSH
69128: LD_INT 3
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 3
69137: PUSH
69138: LD_INT 2
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 4
69147: PUSH
69148: LD_INT 3
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 4
69157: PUSH
69158: LD_INT 4
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 3
69167: PUSH
69168: LD_INT 4
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: LD_INT 3
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 2
69187: PUSH
69188: LD_INT 2
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 4
69197: PUSH
69198: LD_INT 2
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 2
69207: PUSH
69208: LD_INT 4
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 0
69217: PUSH
69218: LD_INT 4
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 0
69227: PUSH
69228: LD_INT 3
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: LD_INT 4
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: LD_INT 5
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: LD_INT 5
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 1
69267: NEG
69268: PUSH
69269: LD_INT 4
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 1
69278: NEG
69279: PUSH
69280: LD_INT 3
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 2
69289: PUSH
69290: LD_INT 5
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 2
69299: NEG
69300: PUSH
69301: LD_INT 3
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 3
69310: NEG
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 3
69321: NEG
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 2
69333: NEG
69334: PUSH
69335: LD_INT 0
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: LD_INT 1
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 3
69355: NEG
69356: PUSH
69357: LD_INT 1
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 4
69366: NEG
69367: PUSH
69368: LD_INT 0
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 4
69377: NEG
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 4
69389: NEG
69390: PUSH
69391: LD_INT 2
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 2
69401: NEG
69402: PUSH
69403: LD_INT 2
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 4
69412: NEG
69413: PUSH
69414: LD_INT 4
69416: NEG
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 4
69424: NEG
69425: PUSH
69426: LD_INT 5
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 3
69436: NEG
69437: PUSH
69438: LD_INT 4
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 3
69448: NEG
69449: PUSH
69450: LD_INT 3
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 4
69460: NEG
69461: PUSH
69462: LD_INT 3
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 5
69472: NEG
69473: PUSH
69474: LD_INT 4
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 5
69484: NEG
69485: PUSH
69486: LD_INT 5
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 3
69496: NEG
69497: PUSH
69498: LD_INT 5
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 5
69508: NEG
69509: PUSH
69510: LD_INT 3
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69565: LD_ADDR_VAR 0 30
69569: PUSH
69570: LD_INT 4
69572: PUSH
69573: LD_INT 4
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 4
69582: PUSH
69583: LD_INT 3
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 5
69592: PUSH
69593: LD_INT 4
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 5
69602: PUSH
69603: LD_INT 5
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 4
69612: PUSH
69613: LD_INT 5
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: PUSH
69623: LD_INT 4
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: LD_INT 3
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 5
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 3
69652: PUSH
69653: LD_INT 5
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 0
69662: PUSH
69663: LD_INT 3
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 0
69672: PUSH
69673: LD_INT 2
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 1
69682: PUSH
69683: LD_INT 3
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: LD_INT 4
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 0
69702: PUSH
69703: LD_INT 4
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 1
69712: NEG
69713: PUSH
69714: LD_INT 3
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 1
69723: NEG
69724: PUSH
69725: LD_INT 2
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 2
69734: PUSH
69735: LD_INT 4
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 2
69744: NEG
69745: PUSH
69746: LD_INT 2
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 4
69755: NEG
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 4
69766: NEG
69767: PUSH
69768: LD_INT 1
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 3
69778: NEG
69779: PUSH
69780: LD_INT 0
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 3
69789: NEG
69790: PUSH
69791: LD_INT 1
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 4
69800: NEG
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 5
69811: NEG
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 5
69822: NEG
69823: PUSH
69824: LD_INT 1
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 5
69834: NEG
69835: PUSH
69836: LD_INT 2
69838: NEG
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 3
69846: NEG
69847: PUSH
69848: LD_INT 2
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 3
69857: NEG
69858: PUSH
69859: LD_INT 3
69861: NEG
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 3
69869: NEG
69870: PUSH
69871: LD_INT 4
69873: NEG
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 2
69881: NEG
69882: PUSH
69883: LD_INT 3
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 2
69893: NEG
69894: PUSH
69895: LD_INT 2
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 3
69905: NEG
69906: PUSH
69907: LD_INT 2
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 4
69917: NEG
69918: PUSH
69919: LD_INT 3
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 4
69929: NEG
69930: PUSH
69931: LD_INT 4
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 2
69941: NEG
69942: PUSH
69943: LD_INT 4
69945: NEG
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 4
69953: NEG
69954: PUSH
69955: LD_INT 2
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 0
69965: PUSH
69966: LD_INT 4
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 0
69976: PUSH
69977: LD_INT 5
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 1
69987: PUSH
69988: LD_INT 4
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 1
69998: PUSH
69999: LD_INT 3
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 0
70009: PUSH
70010: LD_INT 3
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 1
70020: NEG
70021: PUSH
70022: LD_INT 4
70024: NEG
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 1
70032: NEG
70033: PUSH
70034: LD_INT 5
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 2
70044: PUSH
70045: LD_INT 3
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 2
70055: NEG
70056: PUSH
70057: LD_INT 5
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70112: LD_ADDR_VAR 0 31
70116: PUSH
70117: LD_INT 0
70119: PUSH
70120: LD_INT 4
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 0
70129: PUSH
70130: LD_INT 3
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 1
70139: PUSH
70140: LD_INT 4
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 1
70149: PUSH
70150: LD_INT 5
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: LD_INT 5
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 1
70169: NEG
70170: PUSH
70171: LD_INT 4
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 1
70180: NEG
70181: PUSH
70182: LD_INT 3
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 2
70191: PUSH
70192: LD_INT 5
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 2
70201: NEG
70202: PUSH
70203: LD_INT 3
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 3
70212: NEG
70213: PUSH
70214: LD_INT 0
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 3
70223: NEG
70224: PUSH
70225: LD_INT 1
70227: NEG
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 2
70235: NEG
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 2
70246: NEG
70247: PUSH
70248: LD_INT 1
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 3
70257: NEG
70258: PUSH
70259: LD_INT 1
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 4
70268: NEG
70269: PUSH
70270: LD_INT 0
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 4
70279: NEG
70280: PUSH
70281: LD_INT 1
70283: NEG
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 4
70291: NEG
70292: PUSH
70293: LD_INT 2
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 2
70303: NEG
70304: PUSH
70305: LD_INT 2
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 4
70314: NEG
70315: PUSH
70316: LD_INT 4
70318: NEG
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 4
70326: NEG
70327: PUSH
70328: LD_INT 5
70330: NEG
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 3
70338: NEG
70339: PUSH
70340: LD_INT 4
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 3
70350: NEG
70351: PUSH
70352: LD_INT 3
70354: NEG
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 4
70362: NEG
70363: PUSH
70364: LD_INT 3
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 5
70374: NEG
70375: PUSH
70376: LD_INT 4
70378: NEG
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 5
70386: NEG
70387: PUSH
70388: LD_INT 5
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 3
70398: NEG
70399: PUSH
70400: LD_INT 5
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 5
70410: NEG
70411: PUSH
70412: LD_INT 3
70414: NEG
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 0
70422: PUSH
70423: LD_INT 3
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 0
70433: PUSH
70434: LD_INT 4
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 1
70444: PUSH
70445: LD_INT 3
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 1
70455: PUSH
70456: LD_INT 2
70458: NEG
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 0
70466: PUSH
70467: LD_INT 2
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 1
70477: NEG
70478: PUSH
70479: LD_INT 3
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 1
70489: NEG
70490: PUSH
70491: LD_INT 4
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 2
70501: PUSH
70502: LD_INT 2
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 2
70512: NEG
70513: PUSH
70514: LD_INT 4
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 4
70524: PUSH
70525: LD_INT 0
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 4
70534: PUSH
70535: LD_INT 1
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 5
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 5
70555: PUSH
70556: LD_INT 1
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 4
70565: PUSH
70566: LD_INT 1
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 3
70575: PUSH
70576: LD_INT 0
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 3
70585: PUSH
70586: LD_INT 1
70588: NEG
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 3
70596: PUSH
70597: LD_INT 2
70599: NEG
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 5
70607: PUSH
70608: LD_INT 2
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70662: LD_ADDR_VAR 0 32
70666: PUSH
70667: LD_INT 4
70669: NEG
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 4
70680: NEG
70681: PUSH
70682: LD_INT 1
70684: NEG
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 3
70692: NEG
70693: PUSH
70694: LD_INT 0
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 3
70703: NEG
70704: PUSH
70705: LD_INT 1
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 4
70714: NEG
70715: PUSH
70716: LD_INT 1
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 5
70725: NEG
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 5
70736: NEG
70737: PUSH
70738: LD_INT 1
70740: NEG
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 5
70748: NEG
70749: PUSH
70750: LD_INT 2
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 3
70760: NEG
70761: PUSH
70762: LD_INT 2
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 3
70771: NEG
70772: PUSH
70773: LD_INT 3
70775: NEG
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: PUSH
70781: LD_INT 3
70783: NEG
70784: PUSH
70785: LD_INT 4
70787: NEG
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 2
70795: NEG
70796: PUSH
70797: LD_INT 3
70799: NEG
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 2
70807: NEG
70808: PUSH
70809: LD_INT 2
70811: NEG
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 3
70819: NEG
70820: PUSH
70821: LD_INT 2
70823: NEG
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 4
70831: NEG
70832: PUSH
70833: LD_INT 3
70835: NEG
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 4
70843: NEG
70844: PUSH
70845: LD_INT 4
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 2
70855: NEG
70856: PUSH
70857: LD_INT 4
70859: NEG
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 4
70867: NEG
70868: PUSH
70869: LD_INT 2
70871: NEG
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 0
70879: PUSH
70880: LD_INT 4
70882: NEG
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 0
70890: PUSH
70891: LD_INT 5
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 1
70901: PUSH
70902: LD_INT 4
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 1
70912: PUSH
70913: LD_INT 3
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: LD_INT 3
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 1
70934: NEG
70935: PUSH
70936: LD_INT 4
70938: NEG
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 1
70946: NEG
70947: PUSH
70948: LD_INT 5
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 2
70958: PUSH
70959: LD_INT 3
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 2
70969: NEG
70970: PUSH
70971: LD_INT 5
70973: NEG
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 3
70981: PUSH
70982: LD_INT 0
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 3
70991: PUSH
70992: LD_INT 1
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 4
71002: PUSH
71003: LD_INT 0
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 4
71012: PUSH
71013: LD_INT 1
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 3
71022: PUSH
71023: LD_INT 1
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 2
71032: PUSH
71033: LD_INT 0
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 2
71042: PUSH
71043: LD_INT 1
71045: NEG
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 2
71053: PUSH
71054: LD_INT 2
71056: NEG
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 4
71064: PUSH
71065: LD_INT 2
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 4
71074: PUSH
71075: LD_INT 4
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 4
71084: PUSH
71085: LD_INT 3
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 5
71094: PUSH
71095: LD_INT 4
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 5
71104: PUSH
71105: LD_INT 5
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 4
71114: PUSH
71115: LD_INT 5
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 3
71124: PUSH
71125: LD_INT 4
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 3
71134: PUSH
71135: LD_INT 3
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 5
71144: PUSH
71145: LD_INT 3
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 3
71154: PUSH
71155: LD_INT 5
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71209: LD_ADDR_VAR 0 33
71213: PUSH
71214: LD_INT 4
71216: NEG
71217: PUSH
71218: LD_INT 4
71220: NEG
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 4
71228: NEG
71229: PUSH
71230: LD_INT 5
71232: NEG
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PUSH
71238: LD_INT 3
71240: NEG
71241: PUSH
71242: LD_INT 4
71244: NEG
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 3
71252: NEG
71253: PUSH
71254: LD_INT 3
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 4
71264: NEG
71265: PUSH
71266: LD_INT 3
71268: NEG
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 5
71276: NEG
71277: PUSH
71278: LD_INT 4
71280: NEG
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 5
71288: NEG
71289: PUSH
71290: LD_INT 5
71292: NEG
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 3
71300: NEG
71301: PUSH
71302: LD_INT 5
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 5
71312: NEG
71313: PUSH
71314: LD_INT 3
71316: NEG
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 0
71324: PUSH
71325: LD_INT 3
71327: NEG
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 0
71335: PUSH
71336: LD_INT 4
71338: NEG
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 1
71346: PUSH
71347: LD_INT 3
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 1
71357: PUSH
71358: LD_INT 2
71360: NEG
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 0
71368: PUSH
71369: LD_INT 2
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 1
71379: NEG
71380: PUSH
71381: LD_INT 3
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 1
71391: NEG
71392: PUSH
71393: LD_INT 4
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 2
71403: PUSH
71404: LD_INT 2
71406: NEG
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 2
71414: NEG
71415: PUSH
71416: LD_INT 4
71418: NEG
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 4
71426: PUSH
71427: LD_INT 0
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 4
71436: PUSH
71437: LD_INT 1
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 5
71447: PUSH
71448: LD_INT 0
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 5
71457: PUSH
71458: LD_INT 1
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 4
71467: PUSH
71468: LD_INT 1
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 3
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 3
71487: PUSH
71488: LD_INT 1
71490: NEG
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 3
71498: PUSH
71499: LD_INT 2
71501: NEG
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 5
71509: PUSH
71510: LD_INT 2
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 3
71519: PUSH
71520: LD_INT 3
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 3
71529: PUSH
71530: LD_INT 2
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 4
71539: PUSH
71540: LD_INT 3
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 4
71549: PUSH
71550: LD_INT 4
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 3
71559: PUSH
71560: LD_INT 4
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 2
71569: PUSH
71570: LD_INT 3
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 2
71579: PUSH
71580: LD_INT 2
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 4
71589: PUSH
71590: LD_INT 2
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 2
71599: PUSH
71600: LD_INT 4
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 0
71609: PUSH
71610: LD_INT 4
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 0
71619: PUSH
71620: LD_INT 3
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 1
71629: PUSH
71630: LD_INT 4
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 1
71639: PUSH
71640: LD_INT 5
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 0
71649: PUSH
71650: LD_INT 5
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 1
71659: NEG
71660: PUSH
71661: LD_INT 4
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 1
71670: NEG
71671: PUSH
71672: LD_INT 3
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 2
71681: PUSH
71682: LD_INT 5
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 2
71691: NEG
71692: PUSH
71693: LD_INT 3
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71747: LD_ADDR_VAR 0 34
71751: PUSH
71752: LD_INT 0
71754: PUSH
71755: LD_INT 4
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 0
71765: PUSH
71766: LD_INT 5
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 1
71776: PUSH
71777: LD_INT 4
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 1
71787: PUSH
71788: LD_INT 3
71790: NEG
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 0
71798: PUSH
71799: LD_INT 3
71801: NEG
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 1
71809: NEG
71810: PUSH
71811: LD_INT 4
71813: NEG
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 1
71821: NEG
71822: PUSH
71823: LD_INT 5
71825: NEG
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_INT 2
71833: PUSH
71834: LD_INT 3
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 2
71844: NEG
71845: PUSH
71846: LD_INT 5
71848: NEG
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 3
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 3
71866: PUSH
71867: LD_INT 1
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 4
71877: PUSH
71878: LD_INT 0
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 4
71887: PUSH
71888: LD_INT 1
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 3
71897: PUSH
71898: LD_INT 1
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 2
71907: PUSH
71908: LD_INT 0
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 2
71917: PUSH
71918: LD_INT 1
71920: NEG
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 2
71928: PUSH
71929: LD_INT 2
71931: NEG
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 4
71939: PUSH
71940: LD_INT 2
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 4
71949: PUSH
71950: LD_INT 4
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 4
71959: PUSH
71960: LD_INT 3
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 5
71969: PUSH
71970: LD_INT 4
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 5
71979: PUSH
71980: LD_INT 5
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 4
71989: PUSH
71990: LD_INT 5
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 3
71999: PUSH
72000: LD_INT 4
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 3
72009: PUSH
72010: LD_INT 3
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 5
72019: PUSH
72020: LD_INT 3
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 3
72029: PUSH
72030: LD_INT 5
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 0
72039: PUSH
72040: LD_INT 3
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 0
72049: PUSH
72050: LD_INT 2
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: LD_INT 3
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 1
72069: PUSH
72070: LD_INT 4
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 0
72079: PUSH
72080: LD_INT 4
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 1
72089: NEG
72090: PUSH
72091: LD_INT 3
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 1
72100: NEG
72101: PUSH
72102: LD_INT 2
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 2
72111: PUSH
72112: LD_INT 4
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 2
72121: NEG
72122: PUSH
72123: LD_INT 2
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 4
72132: NEG
72133: PUSH
72134: LD_INT 0
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 4
72143: NEG
72144: PUSH
72145: LD_INT 1
72147: NEG
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 3
72155: NEG
72156: PUSH
72157: LD_INT 0
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 3
72166: NEG
72167: PUSH
72168: LD_INT 1
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 4
72177: NEG
72178: PUSH
72179: LD_INT 1
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 5
72188: NEG
72189: PUSH
72190: LD_INT 0
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 5
72199: NEG
72200: PUSH
72201: LD_INT 1
72203: NEG
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 5
72211: NEG
72212: PUSH
72213: LD_INT 2
72215: NEG
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 3
72223: NEG
72224: PUSH
72225: LD_INT 2
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: ST_TO_ADDR
// end ; end ;
72279: GO 72282
72281: POP
// case btype of b_depot , b_warehouse :
72282: LD_VAR 0 1
72286: PUSH
72287: LD_INT 0
72289: DOUBLE
72290: EQUAL
72291: IFTRUE 72301
72293: LD_INT 1
72295: DOUBLE
72296: EQUAL
72297: IFTRUE 72301
72299: GO 72502
72301: POP
// case nation of nation_american :
72302: LD_VAR 0 5
72306: PUSH
72307: LD_INT 1
72309: DOUBLE
72310: EQUAL
72311: IFTRUE 72315
72313: GO 72371
72315: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
72316: LD_ADDR_VAR 0 9
72320: PUSH
72321: LD_VAR 0 11
72325: PUSH
72326: LD_VAR 0 12
72330: PUSH
72331: LD_VAR 0 13
72335: PUSH
72336: LD_VAR 0 14
72340: PUSH
72341: LD_VAR 0 15
72345: PUSH
72346: LD_VAR 0 16
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: PUSH
72359: LD_VAR 0 4
72363: PUSH
72364: LD_INT 1
72366: PLUS
72367: ARRAY
72368: ST_TO_ADDR
72369: GO 72500
72371: LD_INT 2
72373: DOUBLE
72374: EQUAL
72375: IFTRUE 72379
72377: GO 72435
72379: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
72380: LD_ADDR_VAR 0 9
72384: PUSH
72385: LD_VAR 0 17
72389: PUSH
72390: LD_VAR 0 18
72394: PUSH
72395: LD_VAR 0 19
72399: PUSH
72400: LD_VAR 0 20
72404: PUSH
72405: LD_VAR 0 21
72409: PUSH
72410: LD_VAR 0 22
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: PUSH
72423: LD_VAR 0 4
72427: PUSH
72428: LD_INT 1
72430: PLUS
72431: ARRAY
72432: ST_TO_ADDR
72433: GO 72500
72435: LD_INT 3
72437: DOUBLE
72438: EQUAL
72439: IFTRUE 72443
72441: GO 72499
72443: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72444: LD_ADDR_VAR 0 9
72448: PUSH
72449: LD_VAR 0 23
72453: PUSH
72454: LD_VAR 0 24
72458: PUSH
72459: LD_VAR 0 25
72463: PUSH
72464: LD_VAR 0 26
72468: PUSH
72469: LD_VAR 0 27
72473: PUSH
72474: LD_VAR 0 28
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: PUSH
72487: LD_VAR 0 4
72491: PUSH
72492: LD_INT 1
72494: PLUS
72495: ARRAY
72496: ST_TO_ADDR
72497: GO 72500
72499: POP
72500: GO 73055
72502: LD_INT 2
72504: DOUBLE
72505: EQUAL
72506: IFTRUE 72516
72508: LD_INT 3
72510: DOUBLE
72511: EQUAL
72512: IFTRUE 72516
72514: GO 72572
72516: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72517: LD_ADDR_VAR 0 9
72521: PUSH
72522: LD_VAR 0 29
72526: PUSH
72527: LD_VAR 0 30
72531: PUSH
72532: LD_VAR 0 31
72536: PUSH
72537: LD_VAR 0 32
72541: PUSH
72542: LD_VAR 0 33
72546: PUSH
72547: LD_VAR 0 34
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: PUSH
72560: LD_VAR 0 4
72564: PUSH
72565: LD_INT 1
72567: PLUS
72568: ARRAY
72569: ST_TO_ADDR
72570: GO 73055
72572: LD_INT 16
72574: DOUBLE
72575: EQUAL
72576: IFTRUE 72634
72578: LD_INT 17
72580: DOUBLE
72581: EQUAL
72582: IFTRUE 72634
72584: LD_INT 18
72586: DOUBLE
72587: EQUAL
72588: IFTRUE 72634
72590: LD_INT 19
72592: DOUBLE
72593: EQUAL
72594: IFTRUE 72634
72596: LD_INT 22
72598: DOUBLE
72599: EQUAL
72600: IFTRUE 72634
72602: LD_INT 20
72604: DOUBLE
72605: EQUAL
72606: IFTRUE 72634
72608: LD_INT 21
72610: DOUBLE
72611: EQUAL
72612: IFTRUE 72634
72614: LD_INT 23
72616: DOUBLE
72617: EQUAL
72618: IFTRUE 72634
72620: LD_INT 24
72622: DOUBLE
72623: EQUAL
72624: IFTRUE 72634
72626: LD_INT 25
72628: DOUBLE
72629: EQUAL
72630: IFTRUE 72634
72632: GO 72690
72634: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72635: LD_ADDR_VAR 0 9
72639: PUSH
72640: LD_VAR 0 35
72644: PUSH
72645: LD_VAR 0 36
72649: PUSH
72650: LD_VAR 0 37
72654: PUSH
72655: LD_VAR 0 38
72659: PUSH
72660: LD_VAR 0 39
72664: PUSH
72665: LD_VAR 0 40
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: PUSH
72678: LD_VAR 0 4
72682: PUSH
72683: LD_INT 1
72685: PLUS
72686: ARRAY
72687: ST_TO_ADDR
72688: GO 73055
72690: LD_INT 6
72692: DOUBLE
72693: EQUAL
72694: IFTRUE 72746
72696: LD_INT 7
72698: DOUBLE
72699: EQUAL
72700: IFTRUE 72746
72702: LD_INT 8
72704: DOUBLE
72705: EQUAL
72706: IFTRUE 72746
72708: LD_INT 13
72710: DOUBLE
72711: EQUAL
72712: IFTRUE 72746
72714: LD_INT 12
72716: DOUBLE
72717: EQUAL
72718: IFTRUE 72746
72720: LD_INT 15
72722: DOUBLE
72723: EQUAL
72724: IFTRUE 72746
72726: LD_INT 11
72728: DOUBLE
72729: EQUAL
72730: IFTRUE 72746
72732: LD_INT 14
72734: DOUBLE
72735: EQUAL
72736: IFTRUE 72746
72738: LD_INT 10
72740: DOUBLE
72741: EQUAL
72742: IFTRUE 72746
72744: GO 72802
72746: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
72747: LD_ADDR_VAR 0 9
72751: PUSH
72752: LD_VAR 0 41
72756: PUSH
72757: LD_VAR 0 42
72761: PUSH
72762: LD_VAR 0 43
72766: PUSH
72767: LD_VAR 0 44
72771: PUSH
72772: LD_VAR 0 45
72776: PUSH
72777: LD_VAR 0 46
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: PUSH
72790: LD_VAR 0 4
72794: PUSH
72795: LD_INT 1
72797: PLUS
72798: ARRAY
72799: ST_TO_ADDR
72800: GO 73055
72802: LD_INT 36
72804: DOUBLE
72805: EQUAL
72806: IFTRUE 72810
72808: GO 72866
72810: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72811: LD_ADDR_VAR 0 9
72815: PUSH
72816: LD_VAR 0 47
72820: PUSH
72821: LD_VAR 0 48
72825: PUSH
72826: LD_VAR 0 49
72830: PUSH
72831: LD_VAR 0 50
72835: PUSH
72836: LD_VAR 0 51
72840: PUSH
72841: LD_VAR 0 52
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: PUSH
72854: LD_VAR 0 4
72858: PUSH
72859: LD_INT 1
72861: PLUS
72862: ARRAY
72863: ST_TO_ADDR
72864: GO 73055
72866: LD_INT 4
72868: DOUBLE
72869: EQUAL
72870: IFTRUE 72892
72872: LD_INT 5
72874: DOUBLE
72875: EQUAL
72876: IFTRUE 72892
72878: LD_INT 34
72880: DOUBLE
72881: EQUAL
72882: IFTRUE 72892
72884: LD_INT 37
72886: DOUBLE
72887: EQUAL
72888: IFTRUE 72892
72890: GO 72948
72892: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72893: LD_ADDR_VAR 0 9
72897: PUSH
72898: LD_VAR 0 53
72902: PUSH
72903: LD_VAR 0 54
72907: PUSH
72908: LD_VAR 0 55
72912: PUSH
72913: LD_VAR 0 56
72917: PUSH
72918: LD_VAR 0 57
72922: PUSH
72923: LD_VAR 0 58
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: LIST
72932: LIST
72933: LIST
72934: LIST
72935: PUSH
72936: LD_VAR 0 4
72940: PUSH
72941: LD_INT 1
72943: PLUS
72944: ARRAY
72945: ST_TO_ADDR
72946: GO 73055
72948: LD_INT 31
72950: DOUBLE
72951: EQUAL
72952: IFTRUE 72998
72954: LD_INT 32
72956: DOUBLE
72957: EQUAL
72958: IFTRUE 72998
72960: LD_INT 33
72962: DOUBLE
72963: EQUAL
72964: IFTRUE 72998
72966: LD_INT 27
72968: DOUBLE
72969: EQUAL
72970: IFTRUE 72998
72972: LD_INT 26
72974: DOUBLE
72975: EQUAL
72976: IFTRUE 72998
72978: LD_INT 28
72980: DOUBLE
72981: EQUAL
72982: IFTRUE 72998
72984: LD_INT 29
72986: DOUBLE
72987: EQUAL
72988: IFTRUE 72998
72990: LD_INT 30
72992: DOUBLE
72993: EQUAL
72994: IFTRUE 72998
72996: GO 73054
72998: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
72999: LD_ADDR_VAR 0 9
73003: PUSH
73004: LD_VAR 0 59
73008: PUSH
73009: LD_VAR 0 60
73013: PUSH
73014: LD_VAR 0 61
73018: PUSH
73019: LD_VAR 0 62
73023: PUSH
73024: LD_VAR 0 63
73028: PUSH
73029: LD_VAR 0 64
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: PUSH
73042: LD_VAR 0 4
73046: PUSH
73047: LD_INT 1
73049: PLUS
73050: ARRAY
73051: ST_TO_ADDR
73052: GO 73055
73054: POP
// temp_list2 = [ ] ;
73055: LD_ADDR_VAR 0 10
73059: PUSH
73060: EMPTY
73061: ST_TO_ADDR
// for i in temp_list do
73062: LD_ADDR_VAR 0 8
73066: PUSH
73067: LD_VAR 0 9
73071: PUSH
73072: FOR_IN
73073: IFFALSE 73125
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73075: LD_ADDR_VAR 0 10
73079: PUSH
73080: LD_VAR 0 10
73084: PUSH
73085: LD_VAR 0 8
73089: PUSH
73090: LD_INT 1
73092: ARRAY
73093: PUSH
73094: LD_VAR 0 2
73098: PLUS
73099: PUSH
73100: LD_VAR 0 8
73104: PUSH
73105: LD_INT 2
73107: ARRAY
73108: PUSH
73109: LD_VAR 0 3
73113: PLUS
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: EMPTY
73120: LIST
73121: ADD
73122: ST_TO_ADDR
73123: GO 73072
73125: POP
73126: POP
// result = temp_list2 ;
73127: LD_ADDR_VAR 0 7
73131: PUSH
73132: LD_VAR 0 10
73136: ST_TO_ADDR
// end ;
73137: LD_VAR 0 7
73141: RET
// export function EnemyInRange ( unit , dist ) ; begin
73142: LD_INT 0
73144: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73145: LD_ADDR_VAR 0 3
73149: PUSH
73150: LD_VAR 0 1
73154: PPUSH
73155: CALL_OW 255
73159: PPUSH
73160: LD_VAR 0 1
73164: PPUSH
73165: CALL_OW 250
73169: PPUSH
73170: LD_VAR 0 1
73174: PPUSH
73175: CALL_OW 251
73179: PPUSH
73180: LD_VAR 0 2
73184: PPUSH
73185: CALL 47246 0 4
73189: PUSH
73190: LD_INT 4
73192: ARRAY
73193: ST_TO_ADDR
// end ;
73194: LD_VAR 0 3
73198: RET
// export function PlayerSeeMe ( unit ) ; begin
73199: LD_INT 0
73201: PPUSH
// result := See ( your_side , unit ) ;
73202: LD_ADDR_VAR 0 2
73206: PUSH
73207: LD_OWVAR 2
73211: PPUSH
73212: LD_VAR 0 1
73216: PPUSH
73217: CALL_OW 292
73221: ST_TO_ADDR
// end ;
73222: LD_VAR 0 2
73226: RET
// export function ReverseDir ( unit ) ; begin
73227: LD_INT 0
73229: PPUSH
// if not unit then
73230: LD_VAR 0 1
73234: NOT
73235: IFFALSE 73239
// exit ;
73237: GO 73262
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73239: LD_ADDR_VAR 0 2
73243: PUSH
73244: LD_VAR 0 1
73248: PPUSH
73249: CALL_OW 254
73253: PUSH
73254: LD_INT 3
73256: PLUS
73257: PUSH
73258: LD_INT 6
73260: MOD
73261: ST_TO_ADDR
// end ;
73262: LD_VAR 0 2
73266: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
73267: LD_INT 0
73269: PPUSH
73270: PPUSH
73271: PPUSH
73272: PPUSH
73273: PPUSH
// if not hexes then
73274: LD_VAR 0 2
73278: NOT
73279: IFFALSE 73283
// exit ;
73281: GO 73431
// dist := 9999 ;
73283: LD_ADDR_VAR 0 5
73287: PUSH
73288: LD_INT 9999
73290: ST_TO_ADDR
// for i = 1 to hexes do
73291: LD_ADDR_VAR 0 4
73295: PUSH
73296: DOUBLE
73297: LD_INT 1
73299: DEC
73300: ST_TO_ADDR
73301: LD_VAR 0 2
73305: PUSH
73306: FOR_TO
73307: IFFALSE 73419
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
73309: LD_VAR 0 1
73313: PPUSH
73314: LD_VAR 0 2
73318: PUSH
73319: LD_VAR 0 4
73323: ARRAY
73324: PUSH
73325: LD_INT 1
73327: ARRAY
73328: PPUSH
73329: LD_VAR 0 2
73333: PUSH
73334: LD_VAR 0 4
73338: ARRAY
73339: PUSH
73340: LD_INT 2
73342: ARRAY
73343: PPUSH
73344: CALL_OW 297
73348: PUSH
73349: LD_VAR 0 5
73353: LESS
73354: IFFALSE 73417
// begin hex := hexes [ i ] ;
73356: LD_ADDR_VAR 0 7
73360: PUSH
73361: LD_VAR 0 2
73365: PUSH
73366: LD_VAR 0 4
73370: ARRAY
73371: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73372: LD_ADDR_VAR 0 5
73376: PUSH
73377: LD_VAR 0 1
73381: PPUSH
73382: LD_VAR 0 2
73386: PUSH
73387: LD_VAR 0 4
73391: ARRAY
73392: PUSH
73393: LD_INT 1
73395: ARRAY
73396: PPUSH
73397: LD_VAR 0 2
73401: PUSH
73402: LD_VAR 0 4
73406: ARRAY
73407: PUSH
73408: LD_INT 2
73410: ARRAY
73411: PPUSH
73412: CALL_OW 297
73416: ST_TO_ADDR
// end ; end ;
73417: GO 73306
73419: POP
73420: POP
// result := hex ;
73421: LD_ADDR_VAR 0 3
73425: PUSH
73426: LD_VAR 0 7
73430: ST_TO_ADDR
// end ;
73431: LD_VAR 0 3
73435: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73436: LD_INT 0
73438: PPUSH
73439: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73440: LD_VAR 0 1
73444: NOT
73445: PUSH
73446: LD_VAR 0 1
73450: PUSH
73451: LD_INT 21
73453: PUSH
73454: LD_INT 2
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 23
73463: PUSH
73464: LD_INT 2
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: PPUSH
73475: CALL_OW 69
73479: IN
73480: NOT
73481: OR
73482: IFFALSE 73486
// exit ;
73484: GO 73533
// for i = 1 to 3 do
73486: LD_ADDR_VAR 0 3
73490: PUSH
73491: DOUBLE
73492: LD_INT 1
73494: DEC
73495: ST_TO_ADDR
73496: LD_INT 3
73498: PUSH
73499: FOR_TO
73500: IFFALSE 73531
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73502: LD_VAR 0 1
73506: PPUSH
73507: CALL_OW 250
73511: PPUSH
73512: LD_VAR 0 1
73516: PPUSH
73517: CALL_OW 251
73521: PPUSH
73522: LD_INT 1
73524: PPUSH
73525: CALL_OW 453
73529: GO 73499
73531: POP
73532: POP
// end ;
73533: LD_VAR 0 2
73537: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73538: LD_INT 0
73540: PPUSH
73541: PPUSH
73542: PPUSH
73543: PPUSH
73544: PPUSH
73545: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73546: LD_VAR 0 1
73550: NOT
73551: PUSH
73552: LD_VAR 0 2
73556: NOT
73557: OR
73558: PUSH
73559: LD_VAR 0 1
73563: PPUSH
73564: CALL_OW 314
73568: OR
73569: IFFALSE 73573
// exit ;
73571: GO 74014
// x := GetX ( enemy_unit ) ;
73573: LD_ADDR_VAR 0 7
73577: PUSH
73578: LD_VAR 0 2
73582: PPUSH
73583: CALL_OW 250
73587: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73588: LD_ADDR_VAR 0 8
73592: PUSH
73593: LD_VAR 0 2
73597: PPUSH
73598: CALL_OW 251
73602: ST_TO_ADDR
// if not x or not y then
73603: LD_VAR 0 7
73607: NOT
73608: PUSH
73609: LD_VAR 0 8
73613: NOT
73614: OR
73615: IFFALSE 73619
// exit ;
73617: GO 74014
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73619: LD_ADDR_VAR 0 6
73623: PUSH
73624: LD_VAR 0 7
73628: PPUSH
73629: LD_INT 0
73631: PPUSH
73632: LD_INT 4
73634: PPUSH
73635: CALL_OW 272
73639: PUSH
73640: LD_VAR 0 8
73644: PPUSH
73645: LD_INT 0
73647: PPUSH
73648: LD_INT 4
73650: PPUSH
73651: CALL_OW 273
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_VAR 0 7
73664: PPUSH
73665: LD_INT 1
73667: PPUSH
73668: LD_INT 4
73670: PPUSH
73671: CALL_OW 272
73675: PUSH
73676: LD_VAR 0 8
73680: PPUSH
73681: LD_INT 1
73683: PPUSH
73684: LD_INT 4
73686: PPUSH
73687: CALL_OW 273
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_VAR 0 7
73700: PPUSH
73701: LD_INT 2
73703: PPUSH
73704: LD_INT 4
73706: PPUSH
73707: CALL_OW 272
73711: PUSH
73712: LD_VAR 0 8
73716: PPUSH
73717: LD_INT 2
73719: PPUSH
73720: LD_INT 4
73722: PPUSH
73723: CALL_OW 273
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_VAR 0 7
73736: PPUSH
73737: LD_INT 3
73739: PPUSH
73740: LD_INT 4
73742: PPUSH
73743: CALL_OW 272
73747: PUSH
73748: LD_VAR 0 8
73752: PPUSH
73753: LD_INT 3
73755: PPUSH
73756: LD_INT 4
73758: PPUSH
73759: CALL_OW 273
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_VAR 0 7
73772: PPUSH
73773: LD_INT 4
73775: PPUSH
73776: LD_INT 4
73778: PPUSH
73779: CALL_OW 272
73783: PUSH
73784: LD_VAR 0 8
73788: PPUSH
73789: LD_INT 4
73791: PPUSH
73792: LD_INT 4
73794: PPUSH
73795: CALL_OW 273
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PUSH
73804: LD_VAR 0 7
73808: PPUSH
73809: LD_INT 5
73811: PPUSH
73812: LD_INT 4
73814: PPUSH
73815: CALL_OW 272
73819: PUSH
73820: LD_VAR 0 8
73824: PPUSH
73825: LD_INT 5
73827: PPUSH
73828: LD_INT 4
73830: PPUSH
73831: CALL_OW 273
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: ST_TO_ADDR
// for i = tmp downto 1 do
73848: LD_ADDR_VAR 0 4
73852: PUSH
73853: DOUBLE
73854: LD_VAR 0 6
73858: INC
73859: ST_TO_ADDR
73860: LD_INT 1
73862: PUSH
73863: FOR_DOWNTO
73864: IFFALSE 73965
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73866: LD_VAR 0 6
73870: PUSH
73871: LD_VAR 0 4
73875: ARRAY
73876: PUSH
73877: LD_INT 1
73879: ARRAY
73880: PPUSH
73881: LD_VAR 0 6
73885: PUSH
73886: LD_VAR 0 4
73890: ARRAY
73891: PUSH
73892: LD_INT 2
73894: ARRAY
73895: PPUSH
73896: CALL_OW 488
73900: NOT
73901: PUSH
73902: LD_VAR 0 6
73906: PUSH
73907: LD_VAR 0 4
73911: ARRAY
73912: PUSH
73913: LD_INT 1
73915: ARRAY
73916: PPUSH
73917: LD_VAR 0 6
73921: PUSH
73922: LD_VAR 0 4
73926: ARRAY
73927: PUSH
73928: LD_INT 2
73930: ARRAY
73931: PPUSH
73932: CALL_OW 428
73936: PUSH
73937: LD_INT 0
73939: NONEQUAL
73940: OR
73941: IFFALSE 73963
// tmp := Delete ( tmp , i ) ;
73943: LD_ADDR_VAR 0 6
73947: PUSH
73948: LD_VAR 0 6
73952: PPUSH
73953: LD_VAR 0 4
73957: PPUSH
73958: CALL_OW 3
73962: ST_TO_ADDR
73963: GO 73863
73965: POP
73966: POP
// j := GetClosestHex ( unit , tmp ) ;
73967: LD_ADDR_VAR 0 5
73971: PUSH
73972: LD_VAR 0 1
73976: PPUSH
73977: LD_VAR 0 6
73981: PPUSH
73982: CALL 73267 0 2
73986: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73987: LD_VAR 0 1
73991: PPUSH
73992: LD_VAR 0 5
73996: PUSH
73997: LD_INT 1
73999: ARRAY
74000: PPUSH
74001: LD_VAR 0 5
74005: PUSH
74006: LD_INT 2
74008: ARRAY
74009: PPUSH
74010: CALL_OW 111
// end ;
74014: LD_VAR 0 3
74018: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74019: LD_INT 0
74021: PPUSH
74022: PPUSH
74023: PPUSH
// uc_side = 0 ;
74024: LD_ADDR_OWVAR 20
74028: PUSH
74029: LD_INT 0
74031: ST_TO_ADDR
// uc_nation = 0 ;
74032: LD_ADDR_OWVAR 21
74036: PUSH
74037: LD_INT 0
74039: ST_TO_ADDR
// InitHc ;
74040: CALL_OW 19
// InitVc ;
74044: CALL_OW 20
// if mastodonts then
74048: LD_VAR 0 6
74052: IFFALSE 74119
// for i = 1 to mastodonts do
74054: LD_ADDR_VAR 0 11
74058: PUSH
74059: DOUBLE
74060: LD_INT 1
74062: DEC
74063: ST_TO_ADDR
74064: LD_VAR 0 6
74068: PUSH
74069: FOR_TO
74070: IFFALSE 74117
// begin vc_chassis := 31 ;
74072: LD_ADDR_OWVAR 37
74076: PUSH
74077: LD_INT 31
74079: ST_TO_ADDR
// vc_control := control_rider ;
74080: LD_ADDR_OWVAR 38
74084: PUSH
74085: LD_INT 4
74087: ST_TO_ADDR
// animal := CreateVehicle ;
74088: LD_ADDR_VAR 0 12
74092: PUSH
74093: CALL_OW 45
74097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74098: LD_VAR 0 12
74102: PPUSH
74103: LD_VAR 0 8
74107: PPUSH
74108: LD_INT 0
74110: PPUSH
74111: CALL 76188 0 3
// end ;
74115: GO 74069
74117: POP
74118: POP
// if horses then
74119: LD_VAR 0 5
74123: IFFALSE 74190
// for i = 1 to horses do
74125: LD_ADDR_VAR 0 11
74129: PUSH
74130: DOUBLE
74131: LD_INT 1
74133: DEC
74134: ST_TO_ADDR
74135: LD_VAR 0 5
74139: PUSH
74140: FOR_TO
74141: IFFALSE 74188
// begin hc_class := 21 ;
74143: LD_ADDR_OWVAR 28
74147: PUSH
74148: LD_INT 21
74150: ST_TO_ADDR
// hc_gallery :=  ;
74151: LD_ADDR_OWVAR 33
74155: PUSH
74156: LD_STRING 
74158: ST_TO_ADDR
// animal := CreateHuman ;
74159: LD_ADDR_VAR 0 12
74163: PUSH
74164: CALL_OW 44
74168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74169: LD_VAR 0 12
74173: PPUSH
74174: LD_VAR 0 8
74178: PPUSH
74179: LD_INT 0
74181: PPUSH
74182: CALL 76188 0 3
// end ;
74186: GO 74140
74188: POP
74189: POP
// if birds then
74190: LD_VAR 0 1
74194: IFFALSE 74261
// for i = 1 to birds do
74196: LD_ADDR_VAR 0 11
74200: PUSH
74201: DOUBLE
74202: LD_INT 1
74204: DEC
74205: ST_TO_ADDR
74206: LD_VAR 0 1
74210: PUSH
74211: FOR_TO
74212: IFFALSE 74259
// begin hc_class = 18 ;
74214: LD_ADDR_OWVAR 28
74218: PUSH
74219: LD_INT 18
74221: ST_TO_ADDR
// hc_gallery =  ;
74222: LD_ADDR_OWVAR 33
74226: PUSH
74227: LD_STRING 
74229: ST_TO_ADDR
// animal := CreateHuman ;
74230: LD_ADDR_VAR 0 12
74234: PUSH
74235: CALL_OW 44
74239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74240: LD_VAR 0 12
74244: PPUSH
74245: LD_VAR 0 8
74249: PPUSH
74250: LD_INT 0
74252: PPUSH
74253: CALL 76188 0 3
// end ;
74257: GO 74211
74259: POP
74260: POP
// if tigers then
74261: LD_VAR 0 2
74265: IFFALSE 74349
// for i = 1 to tigers do
74267: LD_ADDR_VAR 0 11
74271: PUSH
74272: DOUBLE
74273: LD_INT 1
74275: DEC
74276: ST_TO_ADDR
74277: LD_VAR 0 2
74281: PUSH
74282: FOR_TO
74283: IFFALSE 74347
// begin hc_class = class_tiger ;
74285: LD_ADDR_OWVAR 28
74289: PUSH
74290: LD_INT 14
74292: ST_TO_ADDR
// hc_gallery =  ;
74293: LD_ADDR_OWVAR 33
74297: PUSH
74298: LD_STRING 
74300: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74301: LD_ADDR_OWVAR 35
74305: PUSH
74306: LD_INT 7
74308: NEG
74309: PPUSH
74310: LD_INT 7
74312: PPUSH
74313: CALL_OW 12
74317: ST_TO_ADDR
// animal := CreateHuman ;
74318: LD_ADDR_VAR 0 12
74322: PUSH
74323: CALL_OW 44
74327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74328: LD_VAR 0 12
74332: PPUSH
74333: LD_VAR 0 8
74337: PPUSH
74338: LD_INT 0
74340: PPUSH
74341: CALL 76188 0 3
// end ;
74345: GO 74282
74347: POP
74348: POP
// if apemans then
74349: LD_VAR 0 3
74353: IFFALSE 74476
// for i = 1 to apemans do
74355: LD_ADDR_VAR 0 11
74359: PUSH
74360: DOUBLE
74361: LD_INT 1
74363: DEC
74364: ST_TO_ADDR
74365: LD_VAR 0 3
74369: PUSH
74370: FOR_TO
74371: IFFALSE 74474
// begin hc_class = class_apeman ;
74373: LD_ADDR_OWVAR 28
74377: PUSH
74378: LD_INT 12
74380: ST_TO_ADDR
// hc_gallery =  ;
74381: LD_ADDR_OWVAR 33
74385: PUSH
74386: LD_STRING 
74388: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
74389: LD_ADDR_OWVAR 35
74393: PUSH
74394: LD_INT 5
74396: NEG
74397: PPUSH
74398: LD_INT 5
74400: PPUSH
74401: CALL_OW 12
74405: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74406: LD_ADDR_OWVAR 31
74410: PUSH
74411: LD_INT 1
74413: PPUSH
74414: LD_INT 3
74416: PPUSH
74417: CALL_OW 12
74421: PUSH
74422: LD_INT 1
74424: PPUSH
74425: LD_INT 3
74427: PPUSH
74428: CALL_OW 12
74432: PUSH
74433: LD_INT 0
74435: PUSH
74436: LD_INT 0
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: ST_TO_ADDR
// animal := CreateHuman ;
74445: LD_ADDR_VAR 0 12
74449: PUSH
74450: CALL_OW 44
74454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74455: LD_VAR 0 12
74459: PPUSH
74460: LD_VAR 0 8
74464: PPUSH
74465: LD_INT 0
74467: PPUSH
74468: CALL 76188 0 3
// end ;
74472: GO 74370
74474: POP
74475: POP
// if enchidnas then
74476: LD_VAR 0 4
74480: IFFALSE 74547
// for i = 1 to enchidnas do
74482: LD_ADDR_VAR 0 11
74486: PUSH
74487: DOUBLE
74488: LD_INT 1
74490: DEC
74491: ST_TO_ADDR
74492: LD_VAR 0 4
74496: PUSH
74497: FOR_TO
74498: IFFALSE 74545
// begin hc_class = 13 ;
74500: LD_ADDR_OWVAR 28
74504: PUSH
74505: LD_INT 13
74507: ST_TO_ADDR
// hc_gallery =  ;
74508: LD_ADDR_OWVAR 33
74512: PUSH
74513: LD_STRING 
74515: ST_TO_ADDR
// animal := CreateHuman ;
74516: LD_ADDR_VAR 0 12
74520: PUSH
74521: CALL_OW 44
74525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74526: LD_VAR 0 12
74530: PPUSH
74531: LD_VAR 0 8
74535: PPUSH
74536: LD_INT 0
74538: PPUSH
74539: CALL 76188 0 3
// end ;
74543: GO 74497
74545: POP
74546: POP
// if fishes then
74547: LD_VAR 0 7
74551: IFFALSE 74618
// for i = 1 to fishes do
74553: LD_ADDR_VAR 0 11
74557: PUSH
74558: DOUBLE
74559: LD_INT 1
74561: DEC
74562: ST_TO_ADDR
74563: LD_VAR 0 7
74567: PUSH
74568: FOR_TO
74569: IFFALSE 74616
// begin hc_class = 20 ;
74571: LD_ADDR_OWVAR 28
74575: PUSH
74576: LD_INT 20
74578: ST_TO_ADDR
// hc_gallery =  ;
74579: LD_ADDR_OWVAR 33
74583: PUSH
74584: LD_STRING 
74586: ST_TO_ADDR
// animal := CreateHuman ;
74587: LD_ADDR_VAR 0 12
74591: PUSH
74592: CALL_OW 44
74596: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74597: LD_VAR 0 12
74601: PPUSH
74602: LD_VAR 0 9
74606: PPUSH
74607: LD_INT 0
74609: PPUSH
74610: CALL 76188 0 3
// end ;
74614: GO 74568
74616: POP
74617: POP
// end ;
74618: LD_VAR 0 10
74622: RET
// export function WantHeal ( sci , unit ) ; begin
74623: LD_INT 0
74625: PPUSH
// if GetTaskList ( sci ) > 0 then
74626: LD_VAR 0 1
74630: PPUSH
74631: CALL_OW 437
74635: PUSH
74636: LD_INT 0
74638: GREATER
74639: IFFALSE 74709
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74641: LD_VAR 0 1
74645: PPUSH
74646: CALL_OW 437
74650: PUSH
74651: LD_INT 1
74653: ARRAY
74654: PUSH
74655: LD_INT 1
74657: ARRAY
74658: PUSH
74659: LD_STRING l
74661: EQUAL
74662: PUSH
74663: LD_VAR 0 1
74667: PPUSH
74668: CALL_OW 437
74672: PUSH
74673: LD_INT 1
74675: ARRAY
74676: PUSH
74677: LD_INT 4
74679: ARRAY
74680: PUSH
74681: LD_VAR 0 2
74685: EQUAL
74686: AND
74687: IFFALSE 74699
// result := true else
74689: LD_ADDR_VAR 0 3
74693: PUSH
74694: LD_INT 1
74696: ST_TO_ADDR
74697: GO 74707
// result := false ;
74699: LD_ADDR_VAR 0 3
74703: PUSH
74704: LD_INT 0
74706: ST_TO_ADDR
// end else
74707: GO 74717
// result := false ;
74709: LD_ADDR_VAR 0 3
74713: PUSH
74714: LD_INT 0
74716: ST_TO_ADDR
// end ;
74717: LD_VAR 0 3
74721: RET
// export function HealTarget ( sci ) ; begin
74722: LD_INT 0
74724: PPUSH
// if not sci then
74725: LD_VAR 0 1
74729: NOT
74730: IFFALSE 74734
// exit ;
74732: GO 74799
// result := 0 ;
74734: LD_ADDR_VAR 0 2
74738: PUSH
74739: LD_INT 0
74741: ST_TO_ADDR
// if GetTaskList ( sci ) then
74742: LD_VAR 0 1
74746: PPUSH
74747: CALL_OW 437
74751: IFFALSE 74799
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74753: LD_VAR 0 1
74757: PPUSH
74758: CALL_OW 437
74762: PUSH
74763: LD_INT 1
74765: ARRAY
74766: PUSH
74767: LD_INT 1
74769: ARRAY
74770: PUSH
74771: LD_STRING l
74773: EQUAL
74774: IFFALSE 74799
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74776: LD_ADDR_VAR 0 2
74780: PUSH
74781: LD_VAR 0 1
74785: PPUSH
74786: CALL_OW 437
74790: PUSH
74791: LD_INT 1
74793: ARRAY
74794: PUSH
74795: LD_INT 4
74797: ARRAY
74798: ST_TO_ADDR
// end ;
74799: LD_VAR 0 2
74803: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74804: LD_INT 0
74806: PPUSH
74807: PPUSH
74808: PPUSH
74809: PPUSH
// if not base_units then
74810: LD_VAR 0 1
74814: NOT
74815: IFFALSE 74819
// exit ;
74817: GO 74906
// result := false ;
74819: LD_ADDR_VAR 0 2
74823: PUSH
74824: LD_INT 0
74826: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74827: LD_ADDR_VAR 0 5
74831: PUSH
74832: LD_VAR 0 1
74836: PPUSH
74837: LD_INT 21
74839: PUSH
74840: LD_INT 3
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: PPUSH
74847: CALL_OW 72
74851: ST_TO_ADDR
// if not tmp then
74852: LD_VAR 0 5
74856: NOT
74857: IFFALSE 74861
// exit ;
74859: GO 74906
// for i in tmp do
74861: LD_ADDR_VAR 0 3
74865: PUSH
74866: LD_VAR 0 5
74870: PUSH
74871: FOR_IN
74872: IFFALSE 74904
// begin result := EnemyInRange ( i , 22 ) ;
74874: LD_ADDR_VAR 0 2
74878: PUSH
74879: LD_VAR 0 3
74883: PPUSH
74884: LD_INT 22
74886: PPUSH
74887: CALL 73142 0 2
74891: ST_TO_ADDR
// if result then
74892: LD_VAR 0 2
74896: IFFALSE 74902
// exit ;
74898: POP
74899: POP
74900: GO 74906
// end ;
74902: GO 74871
74904: POP
74905: POP
// end ;
74906: LD_VAR 0 2
74910: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
74911: LD_INT 0
74913: PPUSH
74914: PPUSH
// if not units then
74915: LD_VAR 0 1
74919: NOT
74920: IFFALSE 74924
// exit ;
74922: GO 74994
// result := [ ] ;
74924: LD_ADDR_VAR 0 3
74928: PUSH
74929: EMPTY
74930: ST_TO_ADDR
// for i in units do
74931: LD_ADDR_VAR 0 4
74935: PUSH
74936: LD_VAR 0 1
74940: PUSH
74941: FOR_IN
74942: IFFALSE 74992
// if GetTag ( i ) = tag then
74944: LD_VAR 0 4
74948: PPUSH
74949: CALL_OW 110
74953: PUSH
74954: LD_VAR 0 2
74958: EQUAL
74959: IFFALSE 74990
// result := Insert ( result , result + 1 , i ) ;
74961: LD_ADDR_VAR 0 3
74965: PUSH
74966: LD_VAR 0 3
74970: PPUSH
74971: LD_VAR 0 3
74975: PUSH
74976: LD_INT 1
74978: PLUS
74979: PPUSH
74980: LD_VAR 0 4
74984: PPUSH
74985: CALL_OW 2
74989: ST_TO_ADDR
74990: GO 74941
74992: POP
74993: POP
// end ;
74994: LD_VAR 0 3
74998: RET
// export function IsDriver ( un ) ; begin
74999: LD_INT 0
75001: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75002: LD_ADDR_VAR 0 2
75006: PUSH
75007: LD_VAR 0 1
75011: PUSH
75012: LD_INT 55
75014: PUSH
75015: EMPTY
75016: LIST
75017: PPUSH
75018: CALL_OW 69
75022: IN
75023: ST_TO_ADDR
// end ;
75024: LD_VAR 0 2
75028: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75029: LD_INT 0
75031: PPUSH
75032: PPUSH
// list := [ ] ;
75033: LD_ADDR_VAR 0 5
75037: PUSH
75038: EMPTY
75039: ST_TO_ADDR
// case d of 0 :
75040: LD_VAR 0 3
75044: PUSH
75045: LD_INT 0
75047: DOUBLE
75048: EQUAL
75049: IFTRUE 75053
75051: GO 75186
75053: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75054: LD_ADDR_VAR 0 5
75058: PUSH
75059: LD_VAR 0 1
75063: PUSH
75064: LD_INT 4
75066: MINUS
75067: PUSH
75068: LD_VAR 0 2
75072: PUSH
75073: LD_INT 4
75075: MINUS
75076: PUSH
75077: LD_INT 2
75079: PUSH
75080: EMPTY
75081: LIST
75082: LIST
75083: LIST
75084: PUSH
75085: LD_VAR 0 1
75089: PUSH
75090: LD_INT 3
75092: MINUS
75093: PUSH
75094: LD_VAR 0 2
75098: PUSH
75099: LD_INT 1
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: LIST
75106: PUSH
75107: LD_VAR 0 1
75111: PUSH
75112: LD_INT 4
75114: PLUS
75115: PUSH
75116: LD_VAR 0 2
75120: PUSH
75121: LD_INT 4
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: LIST
75128: PUSH
75129: LD_VAR 0 1
75133: PUSH
75134: LD_INT 3
75136: PLUS
75137: PUSH
75138: LD_VAR 0 2
75142: PUSH
75143: LD_INT 3
75145: PLUS
75146: PUSH
75147: LD_INT 5
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: LIST
75154: PUSH
75155: LD_VAR 0 1
75159: PUSH
75160: LD_VAR 0 2
75164: PUSH
75165: LD_INT 4
75167: PLUS
75168: PUSH
75169: LD_INT 0
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: LIST
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: ST_TO_ADDR
// end ; 1 :
75184: GO 75884
75186: LD_INT 1
75188: DOUBLE
75189: EQUAL
75190: IFTRUE 75194
75192: GO 75327
75194: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75195: LD_ADDR_VAR 0 5
75199: PUSH
75200: LD_VAR 0 1
75204: PUSH
75205: LD_VAR 0 2
75209: PUSH
75210: LD_INT 4
75212: MINUS
75213: PUSH
75214: LD_INT 3
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: LIST
75221: PUSH
75222: LD_VAR 0 1
75226: PUSH
75227: LD_INT 3
75229: MINUS
75230: PUSH
75231: LD_VAR 0 2
75235: PUSH
75236: LD_INT 3
75238: MINUS
75239: PUSH
75240: LD_INT 2
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: LIST
75247: PUSH
75248: LD_VAR 0 1
75252: PUSH
75253: LD_INT 4
75255: MINUS
75256: PUSH
75257: LD_VAR 0 2
75261: PUSH
75262: LD_INT 1
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: LIST
75269: PUSH
75270: LD_VAR 0 1
75274: PUSH
75275: LD_VAR 0 2
75279: PUSH
75280: LD_INT 3
75282: PLUS
75283: PUSH
75284: LD_INT 0
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: LIST
75291: PUSH
75292: LD_VAR 0 1
75296: PUSH
75297: LD_INT 4
75299: PLUS
75300: PUSH
75301: LD_VAR 0 2
75305: PUSH
75306: LD_INT 4
75308: PLUS
75309: PUSH
75310: LD_INT 5
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: LIST
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: ST_TO_ADDR
// end ; 2 :
75325: GO 75884
75327: LD_INT 2
75329: DOUBLE
75330: EQUAL
75331: IFTRUE 75335
75333: GO 75464
75335: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75336: LD_ADDR_VAR 0 5
75340: PUSH
75341: LD_VAR 0 1
75345: PUSH
75346: LD_VAR 0 2
75350: PUSH
75351: LD_INT 3
75353: MINUS
75354: PUSH
75355: LD_INT 3
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: LIST
75362: PUSH
75363: LD_VAR 0 1
75367: PUSH
75368: LD_INT 4
75370: PLUS
75371: PUSH
75372: LD_VAR 0 2
75376: PUSH
75377: LD_INT 4
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: LIST
75384: PUSH
75385: LD_VAR 0 1
75389: PUSH
75390: LD_VAR 0 2
75394: PUSH
75395: LD_INT 4
75397: PLUS
75398: PUSH
75399: LD_INT 0
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: LIST
75406: PUSH
75407: LD_VAR 0 1
75411: PUSH
75412: LD_INT 3
75414: MINUS
75415: PUSH
75416: LD_VAR 0 2
75420: PUSH
75421: LD_INT 1
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: LIST
75428: PUSH
75429: LD_VAR 0 1
75433: PUSH
75434: LD_INT 4
75436: MINUS
75437: PUSH
75438: LD_VAR 0 2
75442: PUSH
75443: LD_INT 4
75445: MINUS
75446: PUSH
75447: LD_INT 2
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: LIST
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: ST_TO_ADDR
// end ; 3 :
75462: GO 75884
75464: LD_INT 3
75466: DOUBLE
75467: EQUAL
75468: IFTRUE 75472
75470: GO 75605
75472: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75473: LD_ADDR_VAR 0 5
75477: PUSH
75478: LD_VAR 0 1
75482: PUSH
75483: LD_INT 3
75485: PLUS
75486: PUSH
75487: LD_VAR 0 2
75491: PUSH
75492: LD_INT 4
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: LIST
75499: PUSH
75500: LD_VAR 0 1
75504: PUSH
75505: LD_INT 4
75507: PLUS
75508: PUSH
75509: LD_VAR 0 2
75513: PUSH
75514: LD_INT 4
75516: PLUS
75517: PUSH
75518: LD_INT 5
75520: PUSH
75521: EMPTY
75522: LIST
75523: LIST
75524: LIST
75525: PUSH
75526: LD_VAR 0 1
75530: PUSH
75531: LD_INT 4
75533: MINUS
75534: PUSH
75535: LD_VAR 0 2
75539: PUSH
75540: LD_INT 1
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: LIST
75547: PUSH
75548: LD_VAR 0 1
75552: PUSH
75553: LD_VAR 0 2
75557: PUSH
75558: LD_INT 4
75560: MINUS
75561: PUSH
75562: LD_INT 3
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: LIST
75569: PUSH
75570: LD_VAR 0 1
75574: PUSH
75575: LD_INT 3
75577: MINUS
75578: PUSH
75579: LD_VAR 0 2
75583: PUSH
75584: LD_INT 3
75586: MINUS
75587: PUSH
75588: LD_INT 2
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: LIST
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: ST_TO_ADDR
// end ; 4 :
75603: GO 75884
75605: LD_INT 4
75607: DOUBLE
75608: EQUAL
75609: IFTRUE 75613
75611: GO 75746
75613: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75614: LD_ADDR_VAR 0 5
75618: PUSH
75619: LD_VAR 0 1
75623: PUSH
75624: LD_VAR 0 2
75628: PUSH
75629: LD_INT 4
75631: PLUS
75632: PUSH
75633: LD_INT 0
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: LIST
75640: PUSH
75641: LD_VAR 0 1
75645: PUSH
75646: LD_INT 3
75648: PLUS
75649: PUSH
75650: LD_VAR 0 2
75654: PUSH
75655: LD_INT 3
75657: PLUS
75658: PUSH
75659: LD_INT 5
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: LIST
75666: PUSH
75667: LD_VAR 0 1
75671: PUSH
75672: LD_INT 4
75674: PLUS
75675: PUSH
75676: LD_VAR 0 2
75680: PUSH
75681: LD_INT 4
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: LIST
75688: PUSH
75689: LD_VAR 0 1
75693: PUSH
75694: LD_VAR 0 2
75698: PUSH
75699: LD_INT 3
75701: MINUS
75702: PUSH
75703: LD_INT 3
75705: PUSH
75706: EMPTY
75707: LIST
75708: LIST
75709: LIST
75710: PUSH
75711: LD_VAR 0 1
75715: PUSH
75716: LD_INT 4
75718: MINUS
75719: PUSH
75720: LD_VAR 0 2
75724: PUSH
75725: LD_INT 4
75727: MINUS
75728: PUSH
75729: LD_INT 2
75731: PUSH
75732: EMPTY
75733: LIST
75734: LIST
75735: LIST
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: ST_TO_ADDR
// end ; 5 :
75744: GO 75884
75746: LD_INT 5
75748: DOUBLE
75749: EQUAL
75750: IFTRUE 75754
75752: GO 75883
75754: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75755: LD_ADDR_VAR 0 5
75759: PUSH
75760: LD_VAR 0 1
75764: PUSH
75765: LD_INT 4
75767: MINUS
75768: PUSH
75769: LD_VAR 0 2
75773: PUSH
75774: LD_INT 1
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: LIST
75781: PUSH
75782: LD_VAR 0 1
75786: PUSH
75787: LD_VAR 0 2
75791: PUSH
75792: LD_INT 4
75794: MINUS
75795: PUSH
75796: LD_INT 3
75798: PUSH
75799: EMPTY
75800: LIST
75801: LIST
75802: LIST
75803: PUSH
75804: LD_VAR 0 1
75808: PUSH
75809: LD_INT 4
75811: PLUS
75812: PUSH
75813: LD_VAR 0 2
75817: PUSH
75818: LD_INT 4
75820: PLUS
75821: PUSH
75822: LD_INT 5
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: LIST
75829: PUSH
75830: LD_VAR 0 1
75834: PUSH
75835: LD_INT 3
75837: PLUS
75838: PUSH
75839: LD_VAR 0 2
75843: PUSH
75844: LD_INT 4
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: LIST
75851: PUSH
75852: LD_VAR 0 1
75856: PUSH
75857: LD_VAR 0 2
75861: PUSH
75862: LD_INT 3
75864: PLUS
75865: PUSH
75866: LD_INT 0
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: LIST
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: ST_TO_ADDR
// end ; end ;
75881: GO 75884
75883: POP
// result := list ;
75884: LD_ADDR_VAR 0 4
75888: PUSH
75889: LD_VAR 0 5
75893: ST_TO_ADDR
// end ;
75894: LD_VAR 0 4
75898: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75899: LD_INT 0
75901: PPUSH
75902: PPUSH
75903: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75904: LD_VAR 0 1
75908: NOT
75909: PUSH
75910: LD_VAR 0 2
75914: PUSH
75915: LD_INT 1
75917: PUSH
75918: LD_INT 2
75920: PUSH
75921: LD_INT 3
75923: PUSH
75924: LD_INT 4
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: IN
75933: NOT
75934: OR
75935: IFFALSE 75939
// exit ;
75937: GO 76031
// tmp := [ ] ;
75939: LD_ADDR_VAR 0 5
75943: PUSH
75944: EMPTY
75945: ST_TO_ADDR
// for i in units do
75946: LD_ADDR_VAR 0 4
75950: PUSH
75951: LD_VAR 0 1
75955: PUSH
75956: FOR_IN
75957: IFFALSE 76000
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75959: LD_ADDR_VAR 0 5
75963: PUSH
75964: LD_VAR 0 5
75968: PPUSH
75969: LD_VAR 0 5
75973: PUSH
75974: LD_INT 1
75976: PLUS
75977: PPUSH
75978: LD_VAR 0 4
75982: PPUSH
75983: LD_VAR 0 2
75987: PPUSH
75988: CALL_OW 259
75992: PPUSH
75993: CALL_OW 2
75997: ST_TO_ADDR
75998: GO 75956
76000: POP
76001: POP
// if not tmp then
76002: LD_VAR 0 5
76006: NOT
76007: IFFALSE 76011
// exit ;
76009: GO 76031
// result := SortListByListDesc ( units , tmp ) ;
76011: LD_ADDR_VAR 0 3
76015: PUSH
76016: LD_VAR 0 1
76020: PPUSH
76021: LD_VAR 0 5
76025: PPUSH
76026: CALL_OW 77
76030: ST_TO_ADDR
// end ;
76031: LD_VAR 0 3
76035: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76036: LD_INT 0
76038: PPUSH
76039: PPUSH
76040: PPUSH
// x := GetX ( building ) ;
76041: LD_ADDR_VAR 0 4
76045: PUSH
76046: LD_VAR 0 2
76050: PPUSH
76051: CALL_OW 250
76055: ST_TO_ADDR
// y := GetY ( building ) ;
76056: LD_ADDR_VAR 0 5
76060: PUSH
76061: LD_VAR 0 2
76065: PPUSH
76066: CALL_OW 251
76070: ST_TO_ADDR
// if GetTaskList ( unit ) then
76071: LD_VAR 0 1
76075: PPUSH
76076: CALL_OW 437
76080: IFFALSE 76175
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76082: LD_STRING e
76084: PUSH
76085: LD_VAR 0 1
76089: PPUSH
76090: CALL_OW 437
76094: PUSH
76095: LD_INT 1
76097: ARRAY
76098: PUSH
76099: LD_INT 1
76101: ARRAY
76102: EQUAL
76103: PUSH
76104: LD_VAR 0 4
76108: PUSH
76109: LD_VAR 0 1
76113: PPUSH
76114: CALL_OW 437
76118: PUSH
76119: LD_INT 1
76121: ARRAY
76122: PUSH
76123: LD_INT 2
76125: ARRAY
76126: EQUAL
76127: AND
76128: PUSH
76129: LD_VAR 0 5
76133: PUSH
76134: LD_VAR 0 1
76138: PPUSH
76139: CALL_OW 437
76143: PUSH
76144: LD_INT 1
76146: ARRAY
76147: PUSH
76148: LD_INT 3
76150: ARRAY
76151: EQUAL
76152: AND
76153: IFFALSE 76165
// result := true else
76155: LD_ADDR_VAR 0 3
76159: PUSH
76160: LD_INT 1
76162: ST_TO_ADDR
76163: GO 76173
// result := false ;
76165: LD_ADDR_VAR 0 3
76169: PUSH
76170: LD_INT 0
76172: ST_TO_ADDR
// end else
76173: GO 76183
// result := false ;
76175: LD_ADDR_VAR 0 3
76179: PUSH
76180: LD_INT 0
76182: ST_TO_ADDR
// end ;
76183: LD_VAR 0 3
76187: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76188: LD_INT 0
76190: PPUSH
76191: PPUSH
76192: PPUSH
76193: PPUSH
// if not unit or not area then
76194: LD_VAR 0 1
76198: NOT
76199: PUSH
76200: LD_VAR 0 2
76204: NOT
76205: OR
76206: IFFALSE 76210
// exit ;
76208: GO 76374
// tmp := AreaToList ( area , i ) ;
76210: LD_ADDR_VAR 0 6
76214: PUSH
76215: LD_VAR 0 2
76219: PPUSH
76220: LD_VAR 0 5
76224: PPUSH
76225: CALL_OW 517
76229: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76230: LD_ADDR_VAR 0 5
76234: PUSH
76235: DOUBLE
76236: LD_INT 1
76238: DEC
76239: ST_TO_ADDR
76240: LD_VAR 0 6
76244: PUSH
76245: LD_INT 1
76247: ARRAY
76248: PUSH
76249: FOR_TO
76250: IFFALSE 76372
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76252: LD_ADDR_VAR 0 7
76256: PUSH
76257: LD_VAR 0 6
76261: PUSH
76262: LD_INT 1
76264: ARRAY
76265: PUSH
76266: LD_VAR 0 5
76270: ARRAY
76271: PUSH
76272: LD_VAR 0 6
76276: PUSH
76277: LD_INT 2
76279: ARRAY
76280: PUSH
76281: LD_VAR 0 5
76285: ARRAY
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76291: LD_VAR 0 7
76295: PUSH
76296: LD_INT 1
76298: ARRAY
76299: PPUSH
76300: LD_VAR 0 7
76304: PUSH
76305: LD_INT 2
76307: ARRAY
76308: PPUSH
76309: CALL_OW 428
76313: PUSH
76314: LD_INT 0
76316: EQUAL
76317: IFFALSE 76370
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76319: LD_VAR 0 1
76323: PPUSH
76324: LD_VAR 0 7
76328: PUSH
76329: LD_INT 1
76331: ARRAY
76332: PPUSH
76333: LD_VAR 0 7
76337: PUSH
76338: LD_INT 2
76340: ARRAY
76341: PPUSH
76342: LD_VAR 0 3
76346: PPUSH
76347: CALL_OW 48
// result := IsPlaced ( unit ) ;
76351: LD_ADDR_VAR 0 4
76355: PUSH
76356: LD_VAR 0 1
76360: PPUSH
76361: CALL_OW 305
76365: ST_TO_ADDR
// exit ;
76366: POP
76367: POP
76368: GO 76374
// end ; end ;
76370: GO 76249
76372: POP
76373: POP
// end ;
76374: LD_VAR 0 4
76378: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76379: LD_INT 0
76381: PPUSH
76382: PPUSH
76383: PPUSH
// if not side or side > 8 then
76384: LD_VAR 0 1
76388: NOT
76389: PUSH
76390: LD_VAR 0 1
76394: PUSH
76395: LD_INT 8
76397: GREATER
76398: OR
76399: IFFALSE 76403
// exit ;
76401: GO 76590
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76403: LD_ADDR_VAR 0 4
76407: PUSH
76408: LD_INT 22
76410: PUSH
76411: LD_VAR 0 1
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: PUSH
76420: LD_INT 21
76422: PUSH
76423: LD_INT 3
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PUSH
76430: EMPTY
76431: LIST
76432: LIST
76433: PPUSH
76434: CALL_OW 69
76438: ST_TO_ADDR
// if not tmp then
76439: LD_VAR 0 4
76443: NOT
76444: IFFALSE 76448
// exit ;
76446: GO 76590
// enable_addtolog := true ;
76448: LD_ADDR_OWVAR 81
76452: PUSH
76453: LD_INT 1
76455: ST_TO_ADDR
// AddToLog ( [ ) ;
76456: LD_STRING [
76458: PPUSH
76459: CALL_OW 561
// for i in tmp do
76463: LD_ADDR_VAR 0 3
76467: PUSH
76468: LD_VAR 0 4
76472: PUSH
76473: FOR_IN
76474: IFFALSE 76581
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76476: LD_STRING [
76478: PUSH
76479: LD_VAR 0 3
76483: PPUSH
76484: CALL_OW 266
76488: STR
76489: PUSH
76490: LD_STRING , 
76492: STR
76493: PUSH
76494: LD_VAR 0 3
76498: PPUSH
76499: CALL_OW 250
76503: STR
76504: PUSH
76505: LD_STRING , 
76507: STR
76508: PUSH
76509: LD_VAR 0 3
76513: PPUSH
76514: CALL_OW 251
76518: STR
76519: PUSH
76520: LD_STRING , 
76522: STR
76523: PUSH
76524: LD_VAR 0 3
76528: PPUSH
76529: CALL_OW 254
76533: STR
76534: PUSH
76535: LD_STRING , 
76537: STR
76538: PUSH
76539: LD_VAR 0 3
76543: PPUSH
76544: LD_INT 1
76546: PPUSH
76547: CALL_OW 268
76551: STR
76552: PUSH
76553: LD_STRING , 
76555: STR
76556: PUSH
76557: LD_VAR 0 3
76561: PPUSH
76562: LD_INT 2
76564: PPUSH
76565: CALL_OW 268
76569: STR
76570: PUSH
76571: LD_STRING ],
76573: STR
76574: PPUSH
76575: CALL_OW 561
// end ;
76579: GO 76473
76581: POP
76582: POP
// AddToLog ( ]; ) ;
76583: LD_STRING ];
76585: PPUSH
76586: CALL_OW 561
// end ;
76590: LD_VAR 0 2
76594: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76595: LD_INT 0
76597: PPUSH
76598: PPUSH
76599: PPUSH
76600: PPUSH
76601: PPUSH
// if not area or not rate or not max then
76602: LD_VAR 0 1
76606: NOT
76607: PUSH
76608: LD_VAR 0 2
76612: NOT
76613: OR
76614: PUSH
76615: LD_VAR 0 4
76619: NOT
76620: OR
76621: IFFALSE 76625
// exit ;
76623: GO 76817
// while 1 do
76625: LD_INT 1
76627: IFFALSE 76817
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76629: LD_ADDR_VAR 0 9
76633: PUSH
76634: LD_VAR 0 1
76638: PPUSH
76639: LD_INT 1
76641: PPUSH
76642: CALL_OW 287
76646: PUSH
76647: LD_INT 10
76649: MUL
76650: ST_TO_ADDR
// r := rate / 10 ;
76651: LD_ADDR_VAR 0 7
76655: PUSH
76656: LD_VAR 0 2
76660: PUSH
76661: LD_INT 10
76663: DIVREAL
76664: ST_TO_ADDR
// time := 1 1$00 ;
76665: LD_ADDR_VAR 0 8
76669: PUSH
76670: LD_INT 2100
76672: ST_TO_ADDR
// if amount < min then
76673: LD_VAR 0 9
76677: PUSH
76678: LD_VAR 0 3
76682: LESS
76683: IFFALSE 76701
// r := r * 2 else
76685: LD_ADDR_VAR 0 7
76689: PUSH
76690: LD_VAR 0 7
76694: PUSH
76695: LD_INT 2
76697: MUL
76698: ST_TO_ADDR
76699: GO 76727
// if amount > max then
76701: LD_VAR 0 9
76705: PUSH
76706: LD_VAR 0 4
76710: GREATER
76711: IFFALSE 76727
// r := r / 2 ;
76713: LD_ADDR_VAR 0 7
76717: PUSH
76718: LD_VAR 0 7
76722: PUSH
76723: LD_INT 2
76725: DIVREAL
76726: ST_TO_ADDR
// time := time / r ;
76727: LD_ADDR_VAR 0 8
76731: PUSH
76732: LD_VAR 0 8
76736: PUSH
76737: LD_VAR 0 7
76741: DIVREAL
76742: ST_TO_ADDR
// if time < 0 then
76743: LD_VAR 0 8
76747: PUSH
76748: LD_INT 0
76750: LESS
76751: IFFALSE 76768
// time := time * - 1 ;
76753: LD_ADDR_VAR 0 8
76757: PUSH
76758: LD_VAR 0 8
76762: PUSH
76763: LD_INT 1
76765: NEG
76766: MUL
76767: ST_TO_ADDR
// wait ( time ) ;
76768: LD_VAR 0 8
76772: PPUSH
76773: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
76777: LD_INT 35
76779: PPUSH
76780: LD_INT 875
76782: PPUSH
76783: CALL_OW 12
76787: PPUSH
76788: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76792: LD_INT 1
76794: PPUSH
76795: LD_INT 5
76797: PPUSH
76798: CALL_OW 12
76802: PPUSH
76803: LD_VAR 0 1
76807: PPUSH
76808: LD_INT 1
76810: PPUSH
76811: CALL_OW 55
// end ;
76815: GO 76625
// end ;
76817: LD_VAR 0 5
76821: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76822: LD_INT 0
76824: PPUSH
76825: PPUSH
76826: PPUSH
76827: PPUSH
76828: PPUSH
76829: PPUSH
76830: PPUSH
76831: PPUSH
// if not turrets or not factories then
76832: LD_VAR 0 1
76836: NOT
76837: PUSH
76838: LD_VAR 0 2
76842: NOT
76843: OR
76844: IFFALSE 76848
// exit ;
76846: GO 77155
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76848: LD_ADDR_VAR 0 10
76852: PUSH
76853: LD_INT 5
76855: PUSH
76856: LD_INT 6
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: LD_INT 2
76865: PUSH
76866: LD_INT 4
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: PUSH
76873: LD_INT 3
76875: PUSH
76876: LD_INT 5
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 24
76890: PUSH
76891: LD_INT 25
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: PUSH
76898: LD_INT 23
76900: PUSH
76901: LD_INT 27
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: PUSH
76912: LD_INT 42
76914: PUSH
76915: LD_INT 43
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: PUSH
76922: LD_INT 44
76924: PUSH
76925: LD_INT 46
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: PUSH
76932: LD_INT 45
76934: PUSH
76935: LD_INT 47
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: LIST
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: LIST
76951: ST_TO_ADDR
// result := [ ] ;
76952: LD_ADDR_VAR 0 3
76956: PUSH
76957: EMPTY
76958: ST_TO_ADDR
// for i in turrets do
76959: LD_ADDR_VAR 0 4
76963: PUSH
76964: LD_VAR 0 1
76968: PUSH
76969: FOR_IN
76970: IFFALSE 77153
// begin nat := GetNation ( i ) ;
76972: LD_ADDR_VAR 0 7
76976: PUSH
76977: LD_VAR 0 4
76981: PPUSH
76982: CALL_OW 248
76986: ST_TO_ADDR
// weapon := 0 ;
76987: LD_ADDR_VAR 0 8
76991: PUSH
76992: LD_INT 0
76994: ST_TO_ADDR
// if not nat then
76995: LD_VAR 0 7
76999: NOT
77000: IFFALSE 77004
// continue ;
77002: GO 76969
// for j in list [ nat ] do
77004: LD_ADDR_VAR 0 5
77008: PUSH
77009: LD_VAR 0 10
77013: PUSH
77014: LD_VAR 0 7
77018: ARRAY
77019: PUSH
77020: FOR_IN
77021: IFFALSE 77062
// if GetBWeapon ( i ) = j [ 1 ] then
77023: LD_VAR 0 4
77027: PPUSH
77028: CALL_OW 269
77032: PUSH
77033: LD_VAR 0 5
77037: PUSH
77038: LD_INT 1
77040: ARRAY
77041: EQUAL
77042: IFFALSE 77060
// begin weapon := j [ 2 ] ;
77044: LD_ADDR_VAR 0 8
77048: PUSH
77049: LD_VAR 0 5
77053: PUSH
77054: LD_INT 2
77056: ARRAY
77057: ST_TO_ADDR
// break ;
77058: GO 77062
// end ;
77060: GO 77020
77062: POP
77063: POP
// if not weapon then
77064: LD_VAR 0 8
77068: NOT
77069: IFFALSE 77073
// continue ;
77071: GO 76969
// for k in factories do
77073: LD_ADDR_VAR 0 6
77077: PUSH
77078: LD_VAR 0 2
77082: PUSH
77083: FOR_IN
77084: IFFALSE 77149
// begin weapons := AvailableWeaponList ( k ) ;
77086: LD_ADDR_VAR 0 9
77090: PUSH
77091: LD_VAR 0 6
77095: PPUSH
77096: CALL_OW 478
77100: ST_TO_ADDR
// if not weapons then
77101: LD_VAR 0 9
77105: NOT
77106: IFFALSE 77110
// continue ;
77108: GO 77083
// if weapon in weapons then
77110: LD_VAR 0 8
77114: PUSH
77115: LD_VAR 0 9
77119: IN
77120: IFFALSE 77147
// begin result := [ i , weapon ] ;
77122: LD_ADDR_VAR 0 3
77126: PUSH
77127: LD_VAR 0 4
77131: PUSH
77132: LD_VAR 0 8
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: ST_TO_ADDR
// exit ;
77141: POP
77142: POP
77143: POP
77144: POP
77145: GO 77155
// end ; end ;
77147: GO 77083
77149: POP
77150: POP
// end ;
77151: GO 76969
77153: POP
77154: POP
// end ;
77155: LD_VAR 0 3
77159: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77160: LD_INT 0
77162: PPUSH
// if not side or side > 8 then
77163: LD_VAR 0 3
77167: NOT
77168: PUSH
77169: LD_VAR 0 3
77173: PUSH
77174: LD_INT 8
77176: GREATER
77177: OR
77178: IFFALSE 77182
// exit ;
77180: GO 77241
// if not range then
77182: LD_VAR 0 4
77186: NOT
77187: IFFALSE 77198
// range := - 12 ;
77189: LD_ADDR_VAR 0 4
77193: PUSH
77194: LD_INT 12
77196: NEG
77197: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77198: LD_VAR 0 1
77202: PPUSH
77203: LD_VAR 0 2
77207: PPUSH
77208: LD_VAR 0 3
77212: PPUSH
77213: LD_VAR 0 4
77217: PPUSH
77218: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77222: LD_VAR 0 1
77226: PPUSH
77227: LD_VAR 0 2
77231: PPUSH
77232: LD_VAR 0 3
77236: PPUSH
77237: CALL_OW 331
// end ;
77241: LD_VAR 0 5
77245: RET
// export function Video ( mode ) ; begin
77246: LD_INT 0
77248: PPUSH
// ingame_video = mode ;
77249: LD_ADDR_OWVAR 52
77253: PUSH
77254: LD_VAR 0 1
77258: ST_TO_ADDR
// interface_hidden = mode ;
77259: LD_ADDR_OWVAR 54
77263: PUSH
77264: LD_VAR 0 1
77268: ST_TO_ADDR
// end ;
77269: LD_VAR 0 2
77273: RET
// export function Join ( array , element ) ; begin
77274: LD_INT 0
77276: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77277: LD_ADDR_VAR 0 3
77281: PUSH
77282: LD_VAR 0 1
77286: PPUSH
77287: LD_VAR 0 1
77291: PUSH
77292: LD_INT 1
77294: PLUS
77295: PPUSH
77296: LD_VAR 0 2
77300: PPUSH
77301: CALL_OW 1
77305: ST_TO_ADDR
// end ;
77306: LD_VAR 0 3
77310: RET
// export function JoinUnion ( array , element ) ; begin
77311: LD_INT 0
77313: PPUSH
// result := array union element ;
77314: LD_ADDR_VAR 0 3
77318: PUSH
77319: LD_VAR 0 1
77323: PUSH
77324: LD_VAR 0 2
77328: UNION
77329: ST_TO_ADDR
// end ;
77330: LD_VAR 0 3
77334: RET
// export function GetBehemoths ( side ) ; begin
77335: LD_INT 0
77337: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
77338: LD_ADDR_VAR 0 2
77342: PUSH
77343: LD_INT 22
77345: PUSH
77346: LD_VAR 0 1
77350: PUSH
77351: EMPTY
77352: LIST
77353: LIST
77354: PUSH
77355: LD_INT 31
77357: PUSH
77358: LD_INT 25
77360: PUSH
77361: EMPTY
77362: LIST
77363: LIST
77364: PUSH
77365: EMPTY
77366: LIST
77367: LIST
77368: PPUSH
77369: CALL_OW 69
77373: ST_TO_ADDR
// end ;
77374: LD_VAR 0 2
77378: RET
// export function Shuffle ( array ) ; var i , index ; begin
77379: LD_INT 0
77381: PPUSH
77382: PPUSH
77383: PPUSH
// result := [ ] ;
77384: LD_ADDR_VAR 0 2
77388: PUSH
77389: EMPTY
77390: ST_TO_ADDR
// if not array then
77391: LD_VAR 0 1
77395: NOT
77396: IFFALSE 77400
// exit ;
77398: GO 77499
// Randomize ;
77400: CALL_OW 10
// for i = array downto 1 do
77404: LD_ADDR_VAR 0 3
77408: PUSH
77409: DOUBLE
77410: LD_VAR 0 1
77414: INC
77415: ST_TO_ADDR
77416: LD_INT 1
77418: PUSH
77419: FOR_DOWNTO
77420: IFFALSE 77497
// begin index := rand ( 1 , array ) ;
77422: LD_ADDR_VAR 0 4
77426: PUSH
77427: LD_INT 1
77429: PPUSH
77430: LD_VAR 0 1
77434: PPUSH
77435: CALL_OW 12
77439: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77440: LD_ADDR_VAR 0 2
77444: PUSH
77445: LD_VAR 0 2
77449: PPUSH
77450: LD_VAR 0 2
77454: PUSH
77455: LD_INT 1
77457: PLUS
77458: PPUSH
77459: LD_VAR 0 1
77463: PUSH
77464: LD_VAR 0 4
77468: ARRAY
77469: PPUSH
77470: CALL_OW 2
77474: ST_TO_ADDR
// array := Delete ( array , index ) ;
77475: LD_ADDR_VAR 0 1
77479: PUSH
77480: LD_VAR 0 1
77484: PPUSH
77485: LD_VAR 0 4
77489: PPUSH
77490: CALL_OW 3
77494: ST_TO_ADDR
// end ;
77495: GO 77419
77497: POP
77498: POP
// end ;
77499: LD_VAR 0 2
77503: RET
// export function GetBaseMaterials ( base ) ; begin
77504: LD_INT 0
77506: PPUSH
// result := [ 0 , 0 , 0 ] ;
77507: LD_ADDR_VAR 0 2
77511: PUSH
77512: LD_INT 0
77514: PUSH
77515: LD_INT 0
77517: PUSH
77518: LD_INT 0
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: LIST
77525: ST_TO_ADDR
// if not base then
77526: LD_VAR 0 1
77530: NOT
77531: IFFALSE 77535
// exit ;
77533: GO 77584
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77535: LD_ADDR_VAR 0 2
77539: PUSH
77540: LD_VAR 0 1
77544: PPUSH
77545: LD_INT 1
77547: PPUSH
77548: CALL_OW 275
77552: PUSH
77553: LD_VAR 0 1
77557: PPUSH
77558: LD_INT 2
77560: PPUSH
77561: CALL_OW 275
77565: PUSH
77566: LD_VAR 0 1
77570: PPUSH
77571: LD_INT 3
77573: PPUSH
77574: CALL_OW 275
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: LIST
77583: ST_TO_ADDR
// end ;
77584: LD_VAR 0 2
77588: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77589: LD_INT 0
77591: PPUSH
77592: PPUSH
// result := array ;
77593: LD_ADDR_VAR 0 3
77597: PUSH
77598: LD_VAR 0 1
77602: ST_TO_ADDR
// if size > 0 then
77603: LD_VAR 0 2
77607: PUSH
77608: LD_INT 0
77610: GREATER
77611: IFFALSE 77657
// for i := array downto size do
77613: LD_ADDR_VAR 0 4
77617: PUSH
77618: DOUBLE
77619: LD_VAR 0 1
77623: INC
77624: ST_TO_ADDR
77625: LD_VAR 0 2
77629: PUSH
77630: FOR_DOWNTO
77631: IFFALSE 77655
// result := Delete ( result , result ) ;
77633: LD_ADDR_VAR 0 3
77637: PUSH
77638: LD_VAR 0 3
77642: PPUSH
77643: LD_VAR 0 3
77647: PPUSH
77648: CALL_OW 3
77652: ST_TO_ADDR
77653: GO 77630
77655: POP
77656: POP
// end ;
77657: LD_VAR 0 3
77661: RET
// export function ComExit ( unit ) ; var tmp ; begin
77662: LD_INT 0
77664: PPUSH
77665: PPUSH
// if not IsInUnit ( unit ) then
77666: LD_VAR 0 1
77670: PPUSH
77671: CALL_OW 310
77675: NOT
77676: IFFALSE 77680
// exit ;
77678: GO 77740
// tmp := IsInUnit ( unit ) ;
77680: LD_ADDR_VAR 0 3
77684: PUSH
77685: LD_VAR 0 1
77689: PPUSH
77690: CALL_OW 310
77694: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77695: LD_VAR 0 3
77699: PPUSH
77700: CALL_OW 247
77704: PUSH
77705: LD_INT 2
77707: EQUAL
77708: IFFALSE 77721
// ComExitVehicle ( unit ) else
77710: LD_VAR 0 1
77714: PPUSH
77715: CALL_OW 121
77719: GO 77730
// ComExitBuilding ( unit ) ;
77721: LD_VAR 0 1
77725: PPUSH
77726: CALL_OW 122
// result := tmp ;
77730: LD_ADDR_VAR 0 2
77734: PUSH
77735: LD_VAR 0 3
77739: ST_TO_ADDR
// end ;
77740: LD_VAR 0 2
77744: RET
// export function ResetHc ; begin
77745: LD_INT 0
77747: PPUSH
// InitHc ;
77748: CALL_OW 19
// hc_importance := 0 ;
77752: LD_ADDR_OWVAR 32
77756: PUSH
77757: LD_INT 0
77759: ST_TO_ADDR
// end ;
77760: LD_VAR 0 1
77764: RET
