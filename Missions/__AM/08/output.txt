// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 8754 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 73633 0 9
// Action ;
  79: CALL 14578 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2409 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 39476 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 39476 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 39476 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 39476 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 39476 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 39476 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 39476 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 76944 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 39476 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 39476 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 76944 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 39476 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 39476 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 76944 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 39476 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 76944 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 39476 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 76944 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 39476 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 76944 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 39476 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 76944 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 39476 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 76944 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 76944 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2402
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2221
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2221
// begin if ct then
2125: LD_VAR 0 11
2129: IFFALSE 2157
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2131: LD_VAR 0 2
2135: PPUSH
2136: LD_VAR 0 11
2140: PUSH
2141: LD_INT 1
2143: ARRAY
2144: PPUSH
2145: CALL_OW 52
// placed := true ;
2149: LD_ADDR_VAR 0 12
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// end ; if placed then
2157: LD_VAR 0 12
2161: IFFALSE 2165
// continue ;
2163: GO 1909
// for j in fac do
2165: LD_ADDR_VAR 0 3
2169: PUSH
2170: LD_VAR 0 10
2174: PUSH
2175: FOR_IN
2176: IFFALSE 2219
// if UnitsInside ( j ) < 6 then
2178: LD_VAR 0 3
2182: PPUSH
2183: CALL_OW 313
2187: PUSH
2188: LD_INT 6
2190: LESS
2191: IFFALSE 2217
// begin PlaceHumanInUnit ( i , j ) ;
2193: LD_VAR 0 2
2197: PPUSH
2198: LD_VAR 0 3
2202: PPUSH
2203: CALL_OW 52
// placed := true ;
2207: LD_ADDR_VAR 0 12
2211: PUSH
2212: LD_INT 1
2214: ST_TO_ADDR
// break ;
2215: GO 2219
// end ;
2217: GO 2175
2219: POP
2220: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2221: LD_VAR 0 2
2225: PPUSH
2226: CALL_OW 257
2230: PUSH
2231: LD_INT 4
2233: EQUAL
2234: IFFALSE 2329
// begin if lab then
2236: LD_VAR 0 9
2240: IFFALSE 2298
// begin for j in lab do
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: LD_VAR 0 9
2251: PUSH
2252: FOR_IN
2253: IFFALSE 2296
// if UnitsInside ( j ) < 6 then
2255: LD_VAR 0 3
2259: PPUSH
2260: CALL_OW 313
2264: PUSH
2265: LD_INT 6
2267: LESS
2268: IFFALSE 2294
// begin PlaceHumanInUnit ( i , j ) ;
2270: LD_VAR 0 2
2274: PPUSH
2275: LD_VAR 0 3
2279: PPUSH
2280: CALL_OW 52
// placed := true ;
2284: LD_ADDR_VAR 0 12
2288: PUSH
2289: LD_INT 1
2291: ST_TO_ADDR
// break ;
2292: GO 2296
// end ;
2294: GO 2252
2296: POP
2297: POP
// end ; if not placed then
2298: LD_VAR 0 12
2302: NOT
2303: IFFALSE 2329
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2305: LD_VAR 0 2
2309: PPUSH
2310: LD_INT 3
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: CALL_OW 49
// ComHold ( i ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: CALL_OW 140
// end ; end ; if ct then
2329: LD_VAR 0 11
2333: IFFALSE 2400
// if UnitsInside ( ct [ 1 ] ) then
2335: LD_VAR 0 11
2339: PUSH
2340: LD_INT 1
2342: ARRAY
2343: PPUSH
2344: CALL_OW 313
2348: IFFALSE 2400
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2350: LD_ADDR_VAR 0 2
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 1
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 33
2367: PUSH
2368: LD_INT 2
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: FOR_IN
2385: IFFALSE 2398
// Connect ( i ) ;
2387: LD_VAR 0 2
2391: PPUSH
2392: CALL 47582 0 1
2396: GO 2384
2398: POP
2399: POP
// end ; end ;
2400: GO 1909
2402: POP
2403: POP
// end ;
2404: LD_VAR 0 1
2408: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2409: LD_INT 0
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2417: LD_INT 71
2419: PPUSH
2420: LD_INT 5
2422: PPUSH
2423: LD_INT 1
2425: PPUSH
2426: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_STRING GammaBase
2437: PPUSH
2438: EMPTY
2439: PPUSH
2440: CALL_OW 30
2444: ST_TO_ADDR
// if not blist then
2445: LD_VAR 0 2
2449: NOT
2450: IFFALSE 2490
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_INT 1
2459: PUSH
2460: LD_INT 52
2462: PUSH
2463: LD_INT 12
2465: PUSH
2466: LD_INT 3
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: LD_INT 0
2474: PUSH
2475: LD_INT 0
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: ST_TO_ADDR
// uc_side := 1 ;
2490: LD_ADDR_OWVAR 20
2494: PUSH
2495: LD_INT 1
2497: ST_TO_ADDR
// uc_nation := 1 ;
2498: LD_ADDR_OWVAR 21
2502: PUSH
2503: LD_INT 1
2505: ST_TO_ADDR
// bc_kind1 := - 1 ;
2506: LD_ADDR_OWVAR 44
2510: PUSH
2511: LD_INT 1
2513: NEG
2514: ST_TO_ADDR
// bc_kind2 := - 1 ;
2515: LD_ADDR_OWVAR 45
2519: PUSH
2520: LD_INT 1
2522: NEG
2523: ST_TO_ADDR
// for i in blist do
2524: LD_ADDR_VAR 0 3
2528: PUSH
2529: LD_VAR 0 2
2533: PUSH
2534: FOR_IN
2535: IFFALSE 2811
// begin bc_type := i [ 1 ] ;
2537: LD_ADDR_OWVAR 42
2541: PUSH
2542: LD_VAR 0 3
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2551: LD_ADDR_OWVAR 43
2555: PUSH
2556: LD_VAR 0 3
2560: PUSH
2561: LD_INT 5
2563: ARRAY
2564: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2565: LD_OWVAR 42
2569: PUSH
2570: LD_INT 6
2572: PUSH
2573: LD_INT 7
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: IN
2580: IFFALSE 2646
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2582: LD_STRING 06_remoteVehs_1
2584: PPUSH
2585: LD_INT 0
2587: PPUSH
2588: CALL_OW 30
2592: NOT
2593: IFFALSE 2621
// begin bc_type := b_lab_full ;
2595: LD_ADDR_OWVAR 42
2599: PUSH
2600: LD_INT 8
2602: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2603: LD_ADDR_OWVAR 44
2607: PUSH
2608: LD_INT 10
2610: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2611: LD_ADDR_OWVAR 45
2615: PUSH
2616: LD_INT 15
2618: ST_TO_ADDR
// end else
2619: GO 2646
// begin bc_type := b_lab_half ;
2621: LD_ADDR_OWVAR 42
2625: PUSH
2626: LD_INT 7
2628: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2629: LD_ADDR_OWVAR 44
2633: PUSH
2634: LD_INT 10
2636: ST_TO_ADDR
// bc_kind2 := - 1 ;
2637: LD_ADDR_OWVAR 45
2641: PUSH
2642: LD_INT 1
2644: NEG
2645: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2646: LD_OWVAR 42
2650: PUSH
2651: LD_INT 2
2653: EQUAL
2654: IFFALSE 2664
// bc_type := b_factory ;
2656: LD_ADDR_OWVAR 42
2660: PUSH
2661: LD_INT 3
2663: ST_TO_ADDR
// if bc_type = b_depot then
2664: LD_OWVAR 42
2668: PUSH
2669: LD_INT 0
2671: EQUAL
2672: IFFALSE 2721
// begin bc_type := b_warehouse ;
2674: LD_ADDR_OWVAR 42
2678: PUSH
2679: LD_INT 1
2681: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2682: LD_ADDR_EXP 31
2686: PUSH
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 2
2694: ARRAY
2695: PPUSH
2696: LD_VAR 0 3
2700: PUSH
2701: LD_INT 3
2703: ARRAY
2704: PPUSH
2705: LD_VAR 0 3
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: CALL_OW 47
2718: ST_TO_ADDR
// continue ;
2719: GO 2534
// end ; if bc_type = b_armoury then
2721: LD_OWVAR 42
2725: PUSH
2726: LD_INT 4
2728: EQUAL
2729: IFFALSE 2739
// bc_type = b_barracks ;
2731: LD_ADDR_OWVAR 42
2735: PUSH
2736: LD_INT 5
2738: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2739: LD_ADDR_VAR 0 4
2743: PUSH
2744: LD_VAR 0 3
2748: PUSH
2749: LD_INT 2
2751: ARRAY
2752: PPUSH
2753: LD_VAR 0 3
2757: PUSH
2758: LD_INT 3
2760: ARRAY
2761: PPUSH
2762: LD_VAR 0 3
2766: PUSH
2767: LD_INT 4
2769: ARRAY
2770: PPUSH
2771: CALL_OW 47
2775: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2776: LD_VAR 0 4
2780: PPUSH
2781: CALL_OW 266
2785: PUSH
2786: LD_INT 32
2788: EQUAL
2789: IFFALSE 2809
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2791: LD_VAR 0 4
2795: PPUSH
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 7
2803: ARRAY
2804: PPUSH
2805: CALL_OW 431
// end ;
2809: GO 2534
2811: POP
2812: POP
// if not amDepot then
2813: LD_EXP 31
2817: NOT
2818: IFFALSE 2855
// begin bc_type := b_warehouse ;
2820: LD_ADDR_OWVAR 42
2824: PUSH
2825: LD_INT 1
2827: ST_TO_ADDR
// bc_level := 6 ;
2828: LD_ADDR_OWVAR 43
2832: PUSH
2833: LD_INT 6
2835: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2836: LD_ADDR_EXP 31
2840: PUSH
2841: LD_INT 52
2843: PPUSH
2844: LD_INT 12
2846: PPUSH
2847: LD_INT 3
2849: PPUSH
2850: CALL_OW 47
2854: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2855: LD_ADDR_OWVAR 42
2859: PUSH
2860: LD_INT 5
2862: ST_TO_ADDR
// bc_level := 6 ;
2863: LD_ADDR_OWVAR 43
2867: PUSH
2868: LD_INT 6
2870: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2871: LD_INT 61
2873: PPUSH
2874: LD_INT 29
2876: PPUSH
2877: LD_INT 5
2879: PPUSH
2880: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2884: LD_EXP 31
2888: PPUSH
2889: LD_STRING gamma
2891: PPUSH
2892: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2896: LD_EXP 31
2900: PPUSH
2901: CALL_OW 274
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 400
2911: PUSH
2912: LD_INT 320
2914: PUSH
2915: LD_INT 270
2917: PUSH
2918: LD_INT 230
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: PUSH
2927: LD_OWVAR 67
2931: ARRAY
2932: PPUSH
2933: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2937: LD_EXP 31
2941: PPUSH
2942: CALL_OW 274
2946: PPUSH
2947: LD_INT 2
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2957: LD_INT 22
2959: PUSH
2960: LD_INT 1
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 30
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: IFFALSE 3233
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2987: LD_ADDR_VAR 0 4
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 30
3004: PUSH
3005: LD_INT 3
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PPUSH
3016: CALL_OW 69
3020: PUSH
3021: LD_INT 1
3023: ARRAY
3024: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3025: LD_ADDR_VAR 0 6
3029: PUSH
3030: LD_VAR 0 4
3034: PPUSH
3035: CALL_OW 250
3039: PPUSH
3040: LD_VAR 0 4
3044: PPUSH
3045: CALL_OW 251
3049: PPUSH
3050: LD_VAR 0 4
3054: PPUSH
3055: CALL_OW 254
3059: PPUSH
3060: CALL 74590 0 3
3064: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3065: LD_ADDR_VAR 0 2
3069: PUSH
3070: LD_INT 19
3072: PUSH
3073: LD_INT 17
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3080: LD_STRING 06_remoteVehs_1
3082: PPUSH
3083: LD_INT 0
3085: PPUSH
3086: CALL_OW 30
3090: IFFALSE 3113
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: LD_VAR 0 2
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: LD_INT 22
3107: PPUSH
3108: CALL_OW 2
3112: ST_TO_ADDR
// for i in tmp do
3113: LD_ADDR_VAR 0 3
3117: PUSH
3118: LD_VAR 0 6
3122: PUSH
3123: FOR_IN
3124: IFFALSE 3231
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3126: LD_VAR 0 3
3130: PUSH
3131: LD_INT 1
3133: ARRAY
3134: PPUSH
3135: LD_VAR 0 3
3139: PUSH
3140: LD_INT 2
3142: ARRAY
3143: PPUSH
3144: CALL_OW 428
3148: PUSH
3149: LD_INT 0
3151: EQUAL
3152: IFFALSE 3229
// begin bc_type := blist [ 1 ] ;
3154: LD_ADDR_OWVAR 42
3158: PUSH
3159: LD_VAR 0 2
3163: PUSH
3164: LD_INT 1
3166: ARRAY
3167: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3168: LD_VAR 0 3
3172: PUSH
3173: LD_INT 1
3175: ARRAY
3176: PPUSH
3177: LD_VAR 0 3
3181: PUSH
3182: LD_INT 2
3184: ARRAY
3185: PPUSH
3186: LD_VAR 0 3
3190: PUSH
3191: LD_INT 3
3193: ARRAY
3194: PPUSH
3195: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3199: LD_ADDR_VAR 0 2
3203: PUSH
3204: LD_VAR 0 2
3208: PPUSH
3209: LD_INT 1
3211: PPUSH
3212: CALL_OW 3
3216: ST_TO_ADDR
// if blist = 0 then
3217: LD_VAR 0 2
3221: PUSH
3222: LD_INT 0
3224: EQUAL
3225: IFFALSE 3229
// break ;
3227: GO 3231
// end ;
3229: GO 3123
3231: POP
3232: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3233: LD_STRING 06_remoteVehs_1
3235: PPUSH
3236: LD_INT 0
3238: PPUSH
3239: CALL_OW 30
3243: IFFALSE 3696
// begin bc_type := b_control_tower ;
3245: LD_ADDR_OWVAR 42
3249: PUSH
3250: LD_INT 36
3252: ST_TO_ADDR
// bc_level := 4 ;
3253: LD_ADDR_OWVAR 43
3257: PUSH
3258: LD_INT 4
3260: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3261: LD_EXP 31
3265: PPUSH
3266: LD_INT 36
3268: PPUSH
3269: LD_INT 62
3271: PPUSH
3272: LD_INT 12
3274: PPUSH
3275: LD_INT 3
3277: PPUSH
3278: CALL 52710 0 5
3282: PUSH
3283: LD_INT 92
3285: PUSH
3286: LD_INT 62
3288: PUSH
3289: LD_INT 12
3291: PUSH
3292: LD_INT 3
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: PPUSH
3301: CALL_OW 69
3305: NOT
3306: AND
3307: IFFALSE 3324
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3309: LD_INT 62
3311: PPUSH
3312: LD_INT 12
3314: PPUSH
3315: LD_INT 3
3317: PPUSH
3318: CALL_OW 47
3322: GO 3486
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3324: LD_EXP 31
3328: PPUSH
3329: LD_INT 36
3331: PPUSH
3332: LD_INT 37
3334: PPUSH
3335: LD_INT 18
3337: PPUSH
3338: LD_INT 2
3340: PPUSH
3341: CALL 52710 0 5
3345: PUSH
3346: LD_INT 92
3348: PUSH
3349: LD_INT 37
3351: PUSH
3352: LD_INT 18
3354: PUSH
3355: LD_INT 3
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: NOT
3369: AND
3370: IFFALSE 3387
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3372: LD_INT 37
3374: PPUSH
3375: LD_INT 18
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 47
3385: GO 3486
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3387: LD_EXP 31
3391: PPUSH
3392: LD_INT 36
3394: PPUSH
3395: LD_INT 66
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: LD_INT 4
3403: PPUSH
3404: CALL 52710 0 5
3408: PUSH
3409: LD_INT 92
3411: PUSH
3412: LD_INT 66
3414: PUSH
3415: LD_INT 14
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: PPUSH
3427: CALL_OW 69
3431: NOT
3432: AND
3433: IFFALSE 3450
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3435: LD_INT 66
3437: PPUSH
3438: LD_INT 14
3440: PPUSH
3441: LD_INT 4
3443: PPUSH
3444: CALL_OW 47
3448: GO 3486
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3450: LD_EXP 31
3454: PPUSH
3455: LD_INT 36
3457: PPUSH
3458: LD_INT 74
3460: PPUSH
3461: LD_INT 26
3463: PPUSH
3464: LD_INT 4
3466: PPUSH
3467: CALL 52710 0 5
3471: IFFALSE 3486
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3473: LD_INT 74
3475: PPUSH
3476: LD_INT 26
3478: PPUSH
3479: LD_INT 4
3481: PPUSH
3482: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3486: LD_INT 22
3488: PUSH
3489: LD_INT 1
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: LD_INT 30
3498: PUSH
3499: LD_INT 36
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PPUSH
3510: CALL_OW 69
3514: NOT
3515: IFFALSE 3519
// exit ;
3517: GO 4044
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3519: LD_ADDR_VAR 0 3
3523: PUSH
3524: DOUBLE
3525: LD_INT 1
3527: DEC
3528: ST_TO_ADDR
3529: LD_INT 3
3531: PUSH
3532: LD_INT 2
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: PUSH
3547: LD_OWVAR 67
3551: ARRAY
3552: PUSH
3553: FOR_TO
3554: IFFALSE 3694
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3556: LD_ADDR_OWVAR 37
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 1
3573: PPUSH
3574: LD_INT 2
3576: PPUSH
3577: CALL_OW 12
3581: ARRAY
3582: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3583: LD_ADDR_OWVAR 39
3587: PUSH
3588: LD_INT 1
3590: PUSH
3591: LD_INT 2
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 12
3608: ARRAY
3609: ST_TO_ADDR
// vc_control := control_remote ;
3610: LD_ADDR_OWVAR 38
3614: PUSH
3615: LD_INT 2
3617: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3618: LD_ADDR_OWVAR 40
3622: PUSH
3623: LD_INT 4
3625: PUSH
3626: LD_INT 3
3628: PUSH
3629: LD_INT 5
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: PUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: CALL_OW 12
3647: ARRAY
3648: ST_TO_ADDR
// veh := CreateVehicle ;
3649: LD_ADDR_VAR 0 5
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3659: LD_VAR 0 5
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3671: LD_VAR 0 5
3675: PPUSH
3676: LD_INT 61
3678: PPUSH
3679: LD_INT 23
3681: PPUSH
3682: LD_INT 9
3684: PPUSH
3685: LD_INT 0
3687: PPUSH
3688: CALL_OW 50
// end ;
3692: GO 3553
3694: POP
3695: POP
// end ; if gammaCommander = 1 then
3696: LD_EXP 13
3700: PUSH
3701: LD_INT 1
3703: EQUAL
3704: IFFALSE 3881
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3706: LD_ADDR_VAR 0 3
3710: PUSH
3711: DOUBLE
3712: LD_INT 1
3714: DEC
3715: ST_TO_ADDR
3716: LD_INT 3
3718: PUSH
3719: LD_INT 3
3721: PUSH
3722: LD_INT 2
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_OWVAR 67
3738: ARRAY
3739: PUSH
3740: FOR_TO
3741: IFFALSE 3877
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3743: LD_ADDR_OWVAR 37
3747: PUSH
3748: LD_INT 3
3750: PUSH
3751: LD_INT 2
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 2
3763: PPUSH
3764: CALL_OW 12
3768: ARRAY
3769: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3770: LD_ADDR_OWVAR 39
3774: PUSH
3775: LD_INT 1
3777: PUSH
3778: LD_INT 2
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 1
3787: PPUSH
3788: LD_INT 2
3790: PPUSH
3791: CALL_OW 12
3795: ARRAY
3796: ST_TO_ADDR
// vc_control := control_manual ;
3797: LD_ADDR_OWVAR 38
3801: PUSH
3802: LD_INT 1
3804: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3805: LD_ADDR_OWVAR 40
3809: PUSH
3810: LD_INT 4
3812: PUSH
3813: LD_INT 5
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 12
3830: ARRAY
3831: ST_TO_ADDR
// veh := CreateVehicle ;
3832: LD_ADDR_VAR 0 5
3836: PUSH
3837: CALL_OW 45
3841: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3842: LD_VAR 0 5
3846: PPUSH
3847: LD_INT 3
3849: PPUSH
3850: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3854: LD_VAR 0 5
3858: PPUSH
3859: LD_INT 61
3861: PPUSH
3862: LD_INT 23
3864: PPUSH
3865: LD_INT 9
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 50
// end ;
3875: GO 3740
3877: POP
3878: POP
// end else
3879: GO 4044
// if gammaCommander = 2 then
3881: LD_EXP 13
3885: PUSH
3886: LD_INT 2
3888: EQUAL
3889: IFFALSE 4044
// begin bc_type := b_bunker ;
3891: LD_ADDR_OWVAR 42
3895: PUSH
3896: LD_INT 32
3898: ST_TO_ADDR
// bc_level := 6 ;
3899: LD_ADDR_OWVAR 43
3903: PUSH
3904: LD_INT 6
3906: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3907: LD_ADDR_VAR 0 4
3911: PUSH
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 36
3917: PPUSH
3918: LD_INT 5
3920: PPUSH
3921: CALL_OW 47
3925: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_INT 4
3933: PPUSH
3934: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3938: LD_ADDR_VAR 0 4
3942: PUSH
3943: LD_INT 61
3945: PPUSH
3946: LD_INT 40
3948: PPUSH
3949: LD_INT 5
3951: PPUSH
3952: CALL_OW 47
3956: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3957: LD_VAR 0 4
3961: PPUSH
3962: LD_INT 5
3964: PPUSH
3965: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3969: LD_ADDR_OWVAR 37
3973: PUSH
3974: LD_INT 2
3976: ST_TO_ADDR
// vc_engine := engine_combustion ;
3977: LD_ADDR_OWVAR 39
3981: PUSH
3982: LD_INT 1
3984: ST_TO_ADDR
// vc_control := control_manual ;
3985: LD_ADDR_OWVAR 38
3989: PUSH
3990: LD_INT 1
3992: ST_TO_ADDR
// vc_weapon := us_crane ;
3993: LD_ADDR_OWVAR 40
3997: PUSH
3998: LD_INT 13
4000: ST_TO_ADDR
// veh := CreateVehicle ;
4001: LD_ADDR_VAR 0 5
4005: PUSH
4006: CALL_OW 45
4010: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4011: LD_VAR 0 5
4015: PPUSH
4016: LD_INT 3
4018: PPUSH
4019: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4023: LD_VAR 0 5
4027: PPUSH
4028: LD_INT 61
4030: PPUSH
4031: LD_INT 23
4033: PPUSH
4034: LD_INT 9
4036: PPUSH
4037: LD_INT 0
4039: PPUSH
4040: CALL_OW 50
// end ; end ;
4044: LD_VAR 0 1
4048: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4049: LD_INT 0
4051: PPUSH
4052: PPUSH
4053: PPUSH
4054: PPUSH
// uc_side := 1 ;
4055: LD_ADDR_OWVAR 20
4059: PUSH
4060: LD_INT 1
4062: ST_TO_ADDR
// uc_nation := 1 ;
4063: LD_ADDR_OWVAR 21
4067: PUSH
4068: LD_INT 1
4070: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4071: LD_ADDR_EXP 26
4075: PUSH
4076: LD_STRING Denis
4078: PPUSH
4079: LD_EXP 1
4083: NOT
4084: PPUSH
4085: LD_STRING 06c_
4087: PPUSH
4088: CALL 39476 0 3
4092: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4093: LD_EXP 26
4097: PPUSH
4098: LD_INT 4
4100: PPUSH
4101: LD_INT 0
4103: PPUSH
4104: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4108: LD_ADDR_EXP 27
4112: PUSH
4113: LD_STRING Joan
4115: PPUSH
4116: LD_EXP 1
4120: NOT
4121: PPUSH
4122: LD_STRING 06c_
4124: PPUSH
4125: CALL 39476 0 3
4129: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4130: LD_EXP 27
4134: PPUSH
4135: LD_INT 4
4137: PPUSH
4138: LD_INT 0
4140: PPUSH
4141: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4145: LD_ADDR_EXP 24
4149: PUSH
4150: LD_STRING Mike
4152: PPUSH
4153: LD_EXP 1
4157: NOT
4158: PPUSH
4159: LD_STRING 06c_
4161: PPUSH
4162: CALL 39476 0 3
4166: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4167: LD_EXP 24
4171: PPUSH
4172: LD_INT 4
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4182: LD_STRING GladstoneIn07
4184: PPUSH
4185: LD_INT 0
4187: PPUSH
4188: CALL_OW 30
4192: NOT
4193: IFFALSE 4273
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4195: LD_ADDR_EXP 21
4199: PUSH
4200: LD_STRING Gladstone
4202: PPUSH
4203: LD_EXP 1
4207: NOT
4208: PPUSH
4209: LD_STRING 06c_
4211: PPUSH
4212: CALL 39476 0 3
4216: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4217: LD_EXP 21
4221: NOT
4222: PUSH
4223: LD_STRING GladstoneStayInDelta
4225: PPUSH
4226: LD_INT 0
4228: PPUSH
4229: CALL_OW 30
4233: AND
4234: IFFALSE 4258
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4236: LD_ADDR_EXP 21
4240: PUSH
4241: LD_STRING Gladstone
4243: PPUSH
4244: LD_EXP 1
4248: NOT
4249: PPUSH
4250: LD_STRING 05_
4252: PPUSH
4253: CALL 39476 0 3
4257: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4258: LD_EXP 21
4262: PPUSH
4263: LD_INT 4
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4273: LD_STRING LisaStayInDelta
4275: PPUSH
4276: LD_INT 0
4278: PPUSH
4279: CALL_OW 30
4283: IFFALSE 4319
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4285: LD_ADDR_EXP 19
4289: PUSH
4290: LD_STRING Lisa
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_STRING 05_
4298: PPUSH
4299: CALL 39476 0 3
4303: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4304: LD_EXP 19
4308: PPUSH
4309: LD_INT 4
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4319: LD_STRING BobbyStayInDelta
4321: PPUSH
4322: LD_INT 0
4324: PPUSH
4325: CALL_OW 30
4329: IFFALSE 4365
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4331: LD_ADDR_EXP 17
4335: PUSH
4336: LD_STRING Bobby
4338: PPUSH
4339: LD_INT 1
4341: PPUSH
4342: LD_STRING 05_
4344: PPUSH
4345: CALL 39476 0 3
4349: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4350: LD_EXP 17
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4365: LD_STRING CyrusStayInDelta
4367: PPUSH
4368: LD_INT 0
4370: PPUSH
4371: CALL_OW 30
4375: IFFALSE 4411
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4377: LD_ADDR_EXP 18
4381: PUSH
4382: LD_STRING Cyrus
4384: PPUSH
4385: LD_INT 1
4387: PPUSH
4388: LD_STRING 05_
4390: PPUSH
4391: CALL 39476 0 3
4395: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4396: LD_EXP 18
4400: PPUSH
4401: LD_INT 4
4403: PPUSH
4404: LD_INT 0
4406: PPUSH
4407: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4411: LD_STRING BrownStayInDelta
4413: PPUSH
4414: LD_INT 0
4416: PPUSH
4417: CALL_OW 30
4421: IFFALSE 4457
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4423: LD_ADDR_EXP 15
4427: PUSH
4428: LD_STRING Brown
4430: PPUSH
4431: LD_INT 1
4433: PPUSH
4434: LD_STRING 05_
4436: PPUSH
4437: CALL 39476 0 3
4441: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4442: LD_EXP 15
4446: PPUSH
4447: LD_INT 4
4449: PPUSH
4450: LD_INT 0
4452: PPUSH
4453: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4457: LD_STRING DonaldsonStayInDelta
4459: PPUSH
4460: LD_INT 0
4462: PPUSH
4463: CALL_OW 30
4467: IFFALSE 4503
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4469: LD_ADDR_EXP 16
4473: PUSH
4474: LD_STRING Donaldson
4476: PPUSH
4477: LD_INT 1
4479: PPUSH
4480: LD_STRING 05_
4482: PPUSH
4483: CALL 39476 0 3
4487: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4488: LD_EXP 16
4492: PPUSH
4493: LD_INT 4
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4503: LD_ADDR_VAR 0 4
4507: PUSH
4508: LD_STRING OthersStayInDelta
4510: PPUSH
4511: CALL_OW 31
4515: ST_TO_ADDR
// if others > 2 then
4516: LD_VAR 0 4
4520: PUSH
4521: LD_INT 2
4523: GREATER
4524: IFFALSE 4587
// begin for j := 1 to 2 do
4526: LD_ADDR_VAR 0 3
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 2
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4583
// begin SetTag ( others [ j ] , 107 ) ;
4542: LD_VAR 0 4
4546: PUSH
4547: LD_VAR 0 3
4551: ARRAY
4552: PPUSH
4553: LD_INT 107
4555: PPUSH
4556: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4560: LD_VAR 0 4
4564: PUSH
4565: LD_VAR 0 3
4569: ARRAY
4570: PPUSH
4571: LD_INT 4
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 49
// end ;
4581: GO 4539
4583: POP
4584: POP
// end else
4585: GO 4648
// begin for j := 1 to others do
4587: LD_ADDR_VAR 0 3
4591: PUSH
4592: DOUBLE
4593: LD_INT 1
4595: DEC
4596: ST_TO_ADDR
4597: LD_VAR 0 4
4601: PUSH
4602: FOR_TO
4603: IFFALSE 4646
// begin SetTag ( others [ i ] , 107 ) ;
4605: LD_VAR 0 4
4609: PUSH
4610: LD_VAR 0 2
4614: ARRAY
4615: PPUSH
4616: LD_INT 107
4618: PPUSH
4619: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4623: LD_VAR 0 4
4627: PUSH
4628: LD_VAR 0 3
4632: ARRAY
4633: PPUSH
4634: LD_INT 4
4636: PPUSH
4637: LD_INT 0
4639: PPUSH
4640: CALL_OW 49
// end ;
4644: GO 4602
4646: POP
4647: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4648: LD_ADDR_VAR 0 4
4652: PUSH
4653: LD_STRING 06_other_apemans
4655: PPUSH
4656: CALL_OW 31
4660: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4661: LD_VAR 0 4
4665: PUSH
4666: LD_INT 3
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 1
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: PUSH
4684: LD_OWVAR 67
4688: ARRAY
4689: GREATEREQUAL
4690: IFFALSE 4723
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 2
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 1
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: PUSH
4715: LD_OWVAR 67
4719: ARRAY
4720: ST_TO_ADDR
4721: GO 4733
// j := others ;
4723: LD_ADDR_VAR 0 3
4727: PUSH
4728: LD_VAR 0 4
4732: ST_TO_ADDR
// for i := 1 to j do
4733: LD_ADDR_VAR 0 2
4737: PUSH
4738: DOUBLE
4739: LD_INT 1
4741: DEC
4742: ST_TO_ADDR
4743: LD_VAR 0 3
4747: PUSH
4748: FOR_TO
4749: IFFALSE 4774
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4751: LD_VAR 0 4
4755: PUSH
4756: LD_VAR 0 2
4760: ARRAY
4761: PPUSH
4762: LD_INT 4
4764: PPUSH
4765: LD_INT 0
4767: PPUSH
4768: CALL_OW 49
4772: GO 4748
4774: POP
4775: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4776: LD_INT 4
4778: PPUSH
4779: LD_INT 22
4781: PUSH
4782: LD_INT 1
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 21
4791: PUSH
4792: LD_INT 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PPUSH
4803: CALL_OW 70
4807: PPUSH
4808: LD_INT 53
4810: PPUSH
4811: LD_INT 19
4813: PPUSH
4814: CALL_OW 111
// end ;
4818: LD_VAR 0 1
4822: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4823: LD_INT 0
4825: PPUSH
4826: PPUSH
4827: PPUSH
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
// prefix := 07c_ ;
4839: LD_ADDR_VAR 0 10
4843: PUSH
4844: LD_STRING 07c_
4846: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4847: LD_ADDR_VAR 0 8
4851: PUSH
4852: LD_STRING 07_vehicles
4854: PPUSH
4855: EMPTY
4856: PPUSH
4857: CALL_OW 30
4861: ST_TO_ADDR
// if not vehicles and debug then
4862: LD_VAR 0 8
4866: NOT
4867: PUSH
4868: LD_EXP 1
4872: AND
4873: IFFALSE 4901
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4875: LD_ADDR_VAR 0 8
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: LD_INT 1
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 4
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: ST_TO_ADDR
// if not vehicles then
4901: LD_VAR 0 8
4905: NOT
4906: IFFALSE 4963
// begin area := westGammaSupportArea ;
4908: LD_ADDR_VAR 0 11
4912: PUSH
4913: LD_INT 16
4915: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4916: LD_ADDR_VAR 0 14
4920: PUSH
4921: LD_INT 37
4923: PUSH
4924: LD_INT 70
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4931: LD_ADDR_VAR 0 13
4935: PUSH
4936: LD_INT 43
4938: PUSH
4939: LD_INT 67
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: ST_TO_ADDR
// dir := 1 ;
4946: LD_ADDR_VAR 0 12
4950: PUSH
4951: LD_INT 1
4953: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4954: LD_INT 4200
4956: PPUSH
4957: CALL_OW 67
// end else
4961: GO 5009
// begin area := southGammaSupportArea ;
4963: LD_ADDR_VAR 0 11
4967: PUSH
4968: LD_INT 5
4970: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4971: LD_ADDR_VAR 0 14
4975: PUSH
4976: LD_INT 87
4978: PUSH
4979: LD_INT 147
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4986: LD_ADDR_VAR 0 13
4990: PUSH
4991: LD_INT 74
4993: PUSH
4994: LD_INT 129
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: ST_TO_ADDR
// dir := 0 ;
5001: LD_ADDR_VAR 0 12
5005: PUSH
5006: LD_INT 0
5008: ST_TO_ADDR
// end ; squad := [ ] ;
5009: LD_ADDR_VAR 0 5
5013: PUSH
5014: EMPTY
5015: ST_TO_ADDR
// tmp := [ ] ;
5016: LD_ADDR_VAR 0 6
5020: PUSH
5021: EMPTY
5022: ST_TO_ADDR
// tmpVehs := [ ] ;
5023: LD_ADDR_VAR 0 7
5027: PUSH
5028: EMPTY
5029: ST_TO_ADDR
// uc_side := 1 ;
5030: LD_ADDR_OWVAR 20
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// uc_nation := 1 ;
5038: LD_ADDR_OWVAR 21
5042: PUSH
5043: LD_INT 1
5045: ST_TO_ADDR
// if vehicles then
5046: LD_VAR 0 8
5050: IFFALSE 5184
// begin for i := 1 to vehicles do
5052: LD_ADDR_VAR 0 2
5056: PUSH
5057: DOUBLE
5058: LD_INT 1
5060: DEC
5061: ST_TO_ADDR
5062: LD_VAR 0 8
5066: PUSH
5067: FOR_TO
5068: IFFALSE 5182
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5070: LD_ADDR_OWVAR 37
5074: PUSH
5075: LD_VAR 0 8
5079: PUSH
5080: LD_VAR 0 2
5084: ARRAY
5085: PUSH
5086: LD_INT 1
5088: ARRAY
5089: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5090: LD_ADDR_OWVAR 39
5094: PUSH
5095: LD_VAR 0 8
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PUSH
5106: LD_INT 2
5108: ARRAY
5109: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5110: LD_ADDR_OWVAR 38
5114: PUSH
5115: LD_VAR 0 8
5119: PUSH
5120: LD_VAR 0 2
5124: ARRAY
5125: PUSH
5126: LD_INT 3
5128: ARRAY
5129: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5130: LD_ADDR_OWVAR 40
5134: PUSH
5135: LD_VAR 0 8
5139: PUSH
5140: LD_VAR 0 2
5144: ARRAY
5145: PUSH
5146: LD_INT 4
5148: ARRAY
5149: ST_TO_ADDR
// veh := CreateVehicle ;
5150: LD_ADDR_VAR 0 9
5154: PUSH
5155: CALL_OW 45
5159: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5160: LD_ADDR_VAR 0 7
5164: PUSH
5165: LD_VAR 0 7
5169: PPUSH
5170: LD_VAR 0 9
5174: PPUSH
5175: CALL 76944 0 2
5179: ST_TO_ADDR
// end ;
5180: GO 5067
5182: POP
5183: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5184: LD_ADDR_EXP 14
5188: PUSH
5189: LD_STRING JMM
5191: PPUSH
5192: LD_EXP 1
5196: NOT
5197: PPUSH
5198: LD_VAR 0 10
5202: PPUSH
5203: CALL 39476 0 3
5207: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5208: LD_EXP 13
5212: PUSH
5213: LD_INT 1
5215: PUSH
5216: LD_INT 3
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: IN
5223: PUSH
5224: LD_EXP 15
5228: NOT
5229: AND
5230: IFFALSE 5291
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5232: LD_ADDR_EXP 15
5236: PUSH
5237: LD_STRING Brown
5239: PPUSH
5240: LD_EXP 1
5244: NOT
5245: PPUSH
5246: LD_VAR 0 10
5250: PPUSH
5251: CALL 39476 0 3
5255: ST_TO_ADDR
// if Brown then
5256: LD_EXP 15
5260: IFFALSE 5291
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5262: LD_ADDR_VAR 0 6
5266: PUSH
5267: LD_VAR 0 6
5271: PPUSH
5272: LD_VAR 0 6
5276: PUSH
5277: LD_INT 1
5279: PLUS
5280: PPUSH
5281: LD_EXP 15
5285: PPUSH
5286: CALL_OW 1
5290: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5291: LD_EXP 13
5295: PUSH
5296: LD_INT 2
5298: PUSH
5299: LD_INT 3
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: IN
5306: PUSH
5307: LD_EXP 16
5311: NOT
5312: AND
5313: IFFALSE 5374
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5315: LD_ADDR_EXP 16
5319: PUSH
5320: LD_STRING Donaldson
5322: PPUSH
5323: LD_EXP 1
5327: NOT
5328: PPUSH
5329: LD_VAR 0 10
5333: PPUSH
5334: CALL 39476 0 3
5338: ST_TO_ADDR
// if Donaldson then
5339: LD_EXP 16
5343: IFFALSE 5374
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5345: LD_ADDR_VAR 0 6
5349: PUSH
5350: LD_VAR 0 6
5354: PPUSH
5355: LD_VAR 0 6
5359: PUSH
5360: LD_INT 1
5362: PLUS
5363: PPUSH
5364: LD_EXP 16
5368: PPUSH
5369: CALL_OW 1
5373: ST_TO_ADDR
// end ; if not Bobby then
5374: LD_EXP 17
5378: NOT
5379: IFFALSE 5437
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5381: LD_ADDR_EXP 17
5385: PUSH
5386: LD_STRING Bobby
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: LD_VAR 0 10
5396: PPUSH
5397: CALL 39476 0 3
5401: ST_TO_ADDR
// if Bobby then
5402: LD_EXP 17
5406: IFFALSE 5437
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5408: LD_ADDR_VAR 0 6
5412: PUSH
5413: LD_VAR 0 6
5417: PPUSH
5418: LD_VAR 0 6
5422: PUSH
5423: LD_INT 1
5425: PLUS
5426: PPUSH
5427: LD_EXP 17
5431: PPUSH
5432: CALL_OW 1
5436: ST_TO_ADDR
// end ; if not Cyrus then
5437: LD_EXP 18
5441: NOT
5442: IFFALSE 5500
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5444: LD_ADDR_EXP 18
5448: PUSH
5449: LD_STRING Cyrus
5451: PPUSH
5452: LD_INT 1
5454: PPUSH
5455: LD_VAR 0 10
5459: PPUSH
5460: CALL 39476 0 3
5464: ST_TO_ADDR
// if Cyrus then
5465: LD_EXP 18
5469: IFFALSE 5500
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5471: LD_ADDR_VAR 0 6
5475: PUSH
5476: LD_VAR 0 6
5480: PPUSH
5481: LD_VAR 0 6
5485: PUSH
5486: LD_INT 1
5488: PLUS
5489: PPUSH
5490: LD_EXP 18
5494: PPUSH
5495: CALL_OW 1
5499: ST_TO_ADDR
// end ; if not Lisa then
5500: LD_EXP 19
5504: NOT
5505: IFFALSE 5566
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5507: LD_ADDR_EXP 19
5511: PUSH
5512: LD_STRING Lisa
5514: PPUSH
5515: LD_EXP 1
5519: NOT
5520: PPUSH
5521: LD_VAR 0 10
5525: PPUSH
5526: CALL 39476 0 3
5530: ST_TO_ADDR
// if Lisa then
5531: LD_EXP 19
5535: IFFALSE 5566
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5537: LD_ADDR_VAR 0 6
5541: PUSH
5542: LD_VAR 0 6
5546: PPUSH
5547: LD_VAR 0 6
5551: PUSH
5552: LD_INT 1
5554: PLUS
5555: PPUSH
5556: LD_EXP 19
5560: PPUSH
5561: CALL_OW 1
5565: ST_TO_ADDR
// end ; if not Frank then
5566: LD_EXP 20
5570: NOT
5571: IFFALSE 5632
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5573: LD_ADDR_EXP 20
5577: PUSH
5578: LD_STRING Frank
5580: PPUSH
5581: LD_EXP 1
5585: NOT
5586: PPUSH
5587: LD_VAR 0 10
5591: PPUSH
5592: CALL 39476 0 3
5596: ST_TO_ADDR
// if Frank then
5597: LD_EXP 20
5601: IFFALSE 5632
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5603: LD_ADDR_VAR 0 6
5607: PUSH
5608: LD_VAR 0 6
5612: PPUSH
5613: LD_VAR 0 6
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: PPUSH
5622: LD_EXP 20
5626: PPUSH
5627: CALL_OW 1
5631: ST_TO_ADDR
// end ; if not Kikuchi then
5632: LD_EXP 22
5636: NOT
5637: IFFALSE 5695
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5639: LD_ADDR_EXP 22
5643: PUSH
5644: LD_STRING Kikuchi
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: LD_VAR 0 10
5654: PPUSH
5655: CALL 39476 0 3
5659: ST_TO_ADDR
// if Kikuchi then
5660: LD_EXP 22
5664: IFFALSE 5695
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5666: LD_ADDR_VAR 0 6
5670: PUSH
5671: LD_VAR 0 6
5675: PPUSH
5676: LD_VAR 0 6
5680: PUSH
5681: LD_INT 1
5683: PLUS
5684: PPUSH
5685: LD_EXP 22
5689: PPUSH
5690: CALL_OW 1
5694: ST_TO_ADDR
// end ; if not Gladstone then
5695: LD_EXP 21
5699: NOT
5700: IFFALSE 5761
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5702: LD_ADDR_EXP 21
5706: PUSH
5707: LD_STRING Gladstone
5709: PPUSH
5710: LD_EXP 1
5714: NOT
5715: PPUSH
5716: LD_VAR 0 10
5720: PPUSH
5721: CALL 39476 0 3
5725: ST_TO_ADDR
// if Gladstone then
5726: LD_EXP 21
5730: IFFALSE 5761
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5732: LD_ADDR_VAR 0 6
5736: PUSH
5737: LD_VAR 0 6
5741: PPUSH
5742: LD_VAR 0 6
5746: PUSH
5747: LD_INT 1
5749: PLUS
5750: PPUSH
5751: LD_EXP 21
5755: PPUSH
5756: CALL_OW 1
5760: ST_TO_ADDR
// end ; if not Khatam then
5761: LD_EXP 23
5765: NOT
5766: IFFALSE 5824
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5768: LD_ADDR_EXP 23
5772: PUSH
5773: LD_STRING Khatam
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: LD_VAR 0 10
5783: PPUSH
5784: CALL 39476 0 3
5788: ST_TO_ADDR
// if Khatam then
5789: LD_EXP 23
5793: IFFALSE 5824
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5795: LD_ADDR_VAR 0 6
5799: PUSH
5800: LD_VAR 0 6
5804: PPUSH
5805: LD_VAR 0 6
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: PPUSH
5814: LD_EXP 23
5818: PPUSH
5819: CALL_OW 1
5823: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5824: LD_ADDR_VAR 0 4
5828: PUSH
5829: LD_STRING 07c_others
5831: PPUSH
5832: CALL_OW 31
5836: ST_TO_ADDR
// squad := others ;
5837: LD_ADDR_VAR 0 5
5841: PUSH
5842: LD_VAR 0 4
5846: ST_TO_ADDR
// if others then
5847: LD_VAR 0 4
5851: IFFALSE 5902
// for i in others do
5853: LD_ADDR_VAR 0 2
5857: PUSH
5858: LD_VAR 0 4
5862: PUSH
5863: FOR_IN
5864: IFFALSE 5900
// begin SetTag ( i , 108 ) ;
5866: LD_VAR 0 2
5870: PPUSH
5871: LD_INT 108
5873: PPUSH
5874: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5878: LD_ADDR_VAR 0 6
5882: PUSH
5883: LD_VAR 0 6
5887: PPUSH
5888: LD_VAR 0 2
5892: PPUSH
5893: CALL 76944 0 2
5897: ST_TO_ADDR
// end ;
5898: GO 5863
5900: POP
5901: POP
// if tmp then
5902: LD_VAR 0 6
5906: IFFALSE 6121
// begin for i in tmp do
5908: LD_ADDR_VAR 0 2
5912: PUSH
5913: LD_VAR 0 6
5917: PUSH
5918: FOR_IN
5919: IFFALSE 6119
// begin SetDir ( i , dir ) ;
5921: LD_VAR 0 2
5925: PPUSH
5926: LD_VAR 0 12
5930: PPUSH
5931: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5935: LD_VAR 0 2
5939: PPUSH
5940: CALL_OW 257
5944: PUSH
5945: LD_INT 3
5947: EQUAL
5948: PUSH
5949: LD_VAR 0 7
5953: AND
5954: IFFALSE 6044
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5956: LD_VAR 0 7
5960: PUSH
5961: LD_INT 1
5963: ARRAY
5964: PPUSH
5965: LD_INT 0
5967: PPUSH
5968: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5972: LD_VAR 0 7
5976: PUSH
5977: LD_INT 1
5979: ARRAY
5980: PPUSH
5981: LD_VAR 0 14
5985: PUSH
5986: LD_INT 1
5988: ARRAY
5989: PPUSH
5990: LD_VAR 0 14
5994: PUSH
5995: LD_INT 2
5997: ARRAY
5998: PPUSH
5999: LD_INT 0
6001: PPUSH
6002: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_VAR 0 7
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PPUSH
6020: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6024: LD_ADDR_VAR 0 7
6028: PUSH
6029: LD_VAR 0 7
6033: PPUSH
6034: LD_INT 1
6036: PPUSH
6037: CALL_OW 3
6041: ST_TO_ADDR
// end else
6042: GO 6061
// PlaceUnitArea ( i , area , false ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_VAR 0 11
6053: PPUSH
6054: LD_INT 0
6056: PPUSH
6057: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6061: LD_VAR 0 2
6065: PPUSH
6066: LD_VAR 0 13
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_VAR 0 13
6079: PUSH
6080: LD_INT 2
6082: ARRAY
6083: PPUSH
6084: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6088: LD_INT 35
6090: PPUSH
6091: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6095: LD_VAR 0 11
6099: PPUSH
6100: LD_INT 22
6102: PUSH
6103: LD_INT 1
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PPUSH
6110: CALL_OW 70
6114: NOT
6115: IFFALSE 6088
// end ;
6117: GO 5918
6119: POP
6120: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6121: LD_EXP 14
6125: PPUSH
6126: LD_VAR 0 14
6130: PUSH
6131: LD_INT 1
6133: ARRAY
6134: PPUSH
6135: LD_VAR 0 14
6139: PUSH
6140: LD_INT 2
6142: ARRAY
6143: PPUSH
6144: LD_INT 0
6146: PPUSH
6147: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6151: LD_EXP 14
6155: PPUSH
6156: LD_VAR 0 13
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PPUSH
6165: LD_VAR 0 13
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PPUSH
6174: CALL_OW 111
// jmmArrival := true ;
6178: LD_ADDR_EXP 8
6182: PUSH
6183: LD_INT 1
6185: ST_TO_ADDR
// end ;
6186: LD_VAR 0 1
6190: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6191: LD_INT 0
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6198: LD_INT 1
6200: PPUSH
6201: LD_INT 17
6203: PPUSH
6204: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6208: LD_INT 2
6210: PPUSH
6211: LD_INT 17
6213: PPUSH
6214: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6218: LD_ADDR_VAR 0 5
6222: PUSH
6223: LD_INT 6
6225: PPUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 21
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 70
6247: ST_TO_ADDR
// if tmp then
6248: LD_VAR 0 5
6252: IFFALSE 6276
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 33
6261: PPUSH
6262: LD_INT 39
6264: PPUSH
6265: CALL_OW 111
// wait ( 0 0$3 ) ;
6269: LD_INT 105
6271: PPUSH
6272: CALL_OW 67
// end ; uc_side := 4 ;
6276: LD_ADDR_OWVAR 20
6280: PUSH
6281: LD_INT 4
6283: ST_TO_ADDR
// uc_nation := 1 ;
6284: LD_ADDR_OWVAR 21
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6292: LD_ADDR_EXP 28
6296: PUSH
6297: LD_STRING Sikorski
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_STRING 
6305: PPUSH
6306: CALL 39476 0 3
6310: ST_TO_ADDR
// vc_engine := engine_combustion ;
6311: LD_ADDR_OWVAR 39
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// vc_control := control_manual ;
6319: LD_ADDR_OWVAR 38
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6327: LD_ADDR_OWVAR 40
6331: PUSH
6332: LD_INT 6
6334: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6335: LD_ADDR_OWVAR 37
6339: PUSH
6340: LD_INT 4
6342: ST_TO_ADDR
// veh := CreateVehicle ;
6343: LD_ADDR_VAR 0 4
6347: PUSH
6348: CALL_OW 45
6352: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6353: LD_VAR 0 4
6357: PPUSH
6358: LD_INT 3
6360: PPUSH
6361: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6365: LD_VAR 0 4
6369: PPUSH
6370: LD_INT 4
6372: NEG
6373: PPUSH
6374: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6378: LD_VAR 0 4
6382: PPUSH
6383: LD_INT 70
6385: PPUSH
6386: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6390: LD_VAR 0 4
6394: PPUSH
6395: LD_INT 6
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6405: LD_EXP 28
6409: PPUSH
6410: LD_VAR 0 4
6414: PPUSH
6415: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6419: LD_EXP 28
6423: PPUSH
6424: LD_INT 37
6426: PPUSH
6427: LD_INT 30
6429: PPUSH
6430: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6434: LD_INT 10
6436: PPUSH
6437: CALL_OW 67
// InitHc_All ( ) ;
6441: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6445: LD_ADDR_VAR 0 2
6449: PUSH
6450: DOUBLE
6451: LD_INT 1
6453: DEC
6454: ST_TO_ADDR
6455: LD_INT 3
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 2
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: LD_OWVAR 67
6477: ARRAY
6478: PUSH
6479: FOR_TO
6480: IFFALSE 6592
// begin uc_side := 4 ;
6482: LD_ADDR_OWVAR 20
6486: PUSH
6487: LD_INT 4
6489: ST_TO_ADDR
// uc_nation := 1 ;
6490: LD_ADDR_OWVAR 21
6494: PUSH
6495: LD_INT 1
6497: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6498: LD_INT 0
6500: PPUSH
6501: LD_INT 1
6503: PPUSH
6504: LD_INT 4
6506: PPUSH
6507: LD_INT 7
6509: PPUSH
6510: CALL_OW 12
6514: PPUSH
6515: CALL_OW 380
// un := CreateHuman ;
6519: LD_ADDR_VAR 0 3
6523: PUSH
6524: CALL_OW 44
6528: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6529: LD_VAR 0 3
6533: PPUSH
6534: LD_INT 3
6536: PPUSH
6537: CALL_OW 233
// SetTag ( un , 101 ) ;
6541: LD_VAR 0 3
6545: PPUSH
6546: LD_INT 101
6548: PPUSH
6549: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6553: LD_VAR 0 3
6557: PPUSH
6558: LD_INT 6
6560: PPUSH
6561: LD_INT 0
6563: PPUSH
6564: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6568: LD_VAR 0 3
6572: PPUSH
6573: LD_INT 25
6575: PPUSH
6576: LD_INT 27
6578: PPUSH
6579: CALL_OW 111
// wait ( 0 0$1 ) ;
6583: LD_INT 35
6585: PPUSH
6586: CALL_OW 67
// end ;
6590: GO 6479
6592: POP
6593: POP
// for i := 1 to 2 do
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: DOUBLE
6600: LD_INT 1
6602: DEC
6603: ST_TO_ADDR
6604: LD_INT 2
6606: PUSH
6607: FOR_TO
6608: IFFALSE 6720
// begin uc_side := 4 ;
6610: LD_ADDR_OWVAR 20
6614: PUSH
6615: LD_INT 4
6617: ST_TO_ADDR
// uc_nation := 1 ;
6618: LD_ADDR_OWVAR 21
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6626: LD_INT 0
6628: PPUSH
6629: LD_INT 4
6631: PPUSH
6632: LD_INT 3
6634: PPUSH
6635: LD_INT 5
6637: PPUSH
6638: CALL_OW 12
6642: PPUSH
6643: CALL_OW 380
// un := CreateHuman ;
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: CALL_OW 44
6656: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6657: LD_VAR 0 3
6661: PPUSH
6662: LD_INT 3
6664: PPUSH
6665: CALL_OW 233
// SetTag ( un , 101 ) ;
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_INT 101
6676: PPUSH
6677: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6681: LD_VAR 0 3
6685: PPUSH
6686: LD_INT 6
6688: PPUSH
6689: LD_INT 0
6691: PPUSH
6692: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6696: LD_VAR 0 3
6700: PPUSH
6701: LD_INT 25
6703: PPUSH
6704: LD_INT 27
6706: PPUSH
6707: CALL_OW 111
// wait ( 0 0$1 ) ;
6711: LD_INT 35
6713: PPUSH
6714: CALL_OW 67
// end ;
6718: GO 6607
6720: POP
6721: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6722: LD_ADDR_VAR 0 2
6726: PUSH
6727: DOUBLE
6728: LD_INT 1
6730: DEC
6731: ST_TO_ADDR
6732: LD_INT 5
6734: PUSH
6735: LD_INT 4
6737: PUSH
6738: LD_INT 3
6740: PUSH
6741: LD_INT 3
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: LD_OWVAR 67
6754: ARRAY
6755: PUSH
6756: FOR_TO
6757: IFFALSE 6999
// begin uc_side := 4 ;
6759: LD_ADDR_OWVAR 20
6763: PUSH
6764: LD_INT 4
6766: ST_TO_ADDR
// uc_nation := 1 ;
6767: LD_ADDR_OWVAR 21
6771: PUSH
6772: LD_INT 1
6774: ST_TO_ADDR
// vc_engine := engine_combustion ;
6775: LD_ADDR_OWVAR 39
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// vc_control := control_manual ;
6783: LD_ADDR_OWVAR 38
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6791: LD_ADDR_OWVAR 40
6795: PUSH
6796: LD_INT 5
6798: PUSH
6799: LD_INT 7
6801: PUSH
6802: LD_INT 5
6804: PUSH
6805: LD_INT 4
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: LD_VAR 0 2
6818: PUSH
6819: LD_INT 4
6821: MOD
6822: PUSH
6823: LD_INT 1
6825: PLUS
6826: ARRAY
6827: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6828: LD_ADDR_OWVAR 37
6832: PUSH
6833: LD_INT 3
6835: PUSH
6836: LD_INT 3
6838: PUSH
6839: LD_INT 4
6841: PUSH
6842: LD_INT 4
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: PUSH
6851: LD_VAR 0 2
6855: PUSH
6856: LD_INT 4
6858: MOD
6859: PUSH
6860: LD_INT 1
6862: PLUS
6863: ARRAY
6864: ST_TO_ADDR
// veh := CreateVehicle ;
6865: LD_ADDR_VAR 0 4
6869: PUSH
6870: CALL_OW 45
6874: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6875: LD_VAR 0 4
6879: PPUSH
6880: LD_INT 3
6882: PPUSH
6883: CALL_OW 233
// SetTag ( veh , 0 ) ;
6887: LD_VAR 0 4
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 70
6906: PPUSH
6907: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6911: LD_VAR 0 4
6915: PPUSH
6916: LD_INT 6
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: CALL_OW 49
// InitHc ;
6926: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6930: LD_INT 0
6932: PPUSH
6933: LD_INT 3
6935: PPUSH
6936: LD_INT 4
6938: PPUSH
6939: LD_INT 7
6941: PPUSH
6942: CALL_OW 12
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 3
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6961: LD_VAR 0 3
6965: PPUSH
6966: LD_VAR 0 4
6970: PPUSH
6971: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6975: LD_VAR 0 3
6979: PPUSH
6980: LD_INT 30
6982: PPUSH
6983: LD_INT 22
6985: PPUSH
6986: CALL_OW 111
// wait ( 0 0$3 ) ;
6990: LD_INT 105
6992: PPUSH
6993: CALL_OW 67
// end ;
6997: GO 6756
6999: POP
7000: POP
// wait ( 0 0$10 ) ;
7001: LD_INT 350
7003: PPUSH
7004: CALL_OW 67
// end ;
7008: LD_VAR 0 1
7012: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7013: LD_INT 0
7015: PPUSH
7016: PPUSH
7017: PPUSH
7018: PPUSH
// gammaBase := [ ] ;
7019: LD_ADDR_VAR 0 4
7023: PUSH
7024: EMPTY
7025: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7026: LD_ADDR_VAR 0 5
7030: PUSH
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 22
7038: PUSH
7039: LD_INT 1
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 21
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 50
7058: PUSH
7059: EMPTY
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: PPUSH
7067: CALL_OW 70
7071: ST_TO_ADDR
// for i in buildings do
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: LD_VAR 0 5
7081: PUSH
7082: FOR_IN
7083: IFFALSE 7520
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7085: LD_VAR 0 3
7089: PPUSH
7090: CALL_OW 266
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 7
7100: PUSH
7101: LD_INT 8
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: IN
7109: IFFALSE 7223
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7111: LD_ADDR_VAR 0 4
7115: PUSH
7116: LD_VAR 0 4
7120: PUSH
7121: LD_VAR 0 3
7125: PPUSH
7126: CALL_OW 266
7130: PUSH
7131: LD_VAR 0 3
7135: PPUSH
7136: CALL_OW 250
7140: PUSH
7141: LD_VAR 0 3
7145: PPUSH
7146: CALL_OW 251
7150: PUSH
7151: LD_VAR 0 3
7155: PPUSH
7156: CALL_OW 254
7160: PUSH
7161: LD_VAR 0 3
7165: PPUSH
7166: CALL_OW 267
7170: PUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: CALL_OW 248
7180: PUSH
7181: LD_VAR 0 3
7185: PPUSH
7186: LD_INT 1
7188: PPUSH
7189: CALL_OW 268
7193: PUSH
7194: LD_VAR 0 3
7198: PPUSH
7199: LD_INT 2
7201: PPUSH
7202: CALL_OW 268
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: ADD
7220: ST_TO_ADDR
7221: GO 7518
// if GetBType ( i ) = b_bunker then
7223: LD_VAR 0 3
7227: PPUSH
7228: CALL_OW 266
7232: PUSH
7233: LD_INT 32
7235: EQUAL
7236: IFFALSE 7333
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7238: LD_ADDR_VAR 0 4
7242: PUSH
7243: LD_VAR 0 4
7247: PUSH
7248: LD_VAR 0 3
7252: PPUSH
7253: CALL_OW 266
7257: PUSH
7258: LD_VAR 0 3
7262: PPUSH
7263: CALL_OW 250
7267: PUSH
7268: LD_VAR 0 3
7272: PPUSH
7273: CALL_OW 251
7277: PUSH
7278: LD_VAR 0 3
7282: PPUSH
7283: CALL_OW 254
7287: PUSH
7288: LD_VAR 0 3
7292: PPUSH
7293: CALL_OW 267
7297: PUSH
7298: LD_VAR 0 3
7302: PPUSH
7303: CALL_OW 248
7307: PUSH
7308: LD_VAR 0 3
7312: PPUSH
7313: CALL_OW 269
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: ADD
7330: ST_TO_ADDR
7331: GO 7518
// if GetBType ( i ) = b_factory then
7333: LD_VAR 0 3
7337: PPUSH
7338: CALL_OW 266
7342: PUSH
7343: LD_INT 3
7345: EQUAL
7346: IFFALSE 7436
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7348: LD_ADDR_VAR 0 4
7352: PUSH
7353: LD_VAR 0 4
7357: PPUSH
7358: LD_INT 1
7360: PPUSH
7361: LD_VAR 0 3
7365: PPUSH
7366: CALL_OW 266
7370: PUSH
7371: LD_VAR 0 3
7375: PPUSH
7376: CALL_OW 250
7380: PUSH
7381: LD_VAR 0 3
7385: PPUSH
7386: CALL_OW 251
7390: PUSH
7391: LD_VAR 0 3
7395: PPUSH
7396: CALL_OW 254
7400: PUSH
7401: LD_VAR 0 3
7405: PPUSH
7406: CALL_OW 267
7410: PUSH
7411: LD_VAR 0 3
7415: PPUSH
7416: CALL_OW 248
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 2
7433: ST_TO_ADDR
7434: GO 7518
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7436: LD_ADDR_VAR 0 4
7440: PUSH
7441: LD_VAR 0 4
7445: PUSH
7446: LD_VAR 0 3
7450: PPUSH
7451: CALL_OW 266
7455: PUSH
7456: LD_VAR 0 3
7460: PPUSH
7461: CALL_OW 250
7465: PUSH
7466: LD_VAR 0 3
7470: PPUSH
7471: CALL_OW 251
7475: PUSH
7476: LD_VAR 0 3
7480: PPUSH
7481: CALL_OW 254
7485: PUSH
7486: LD_VAR 0 3
7490: PPUSH
7491: CALL_OW 267
7495: PUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 248
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: ADD
7517: ST_TO_ADDR
// end ;
7518: GO 7082
7520: POP
7521: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7522: LD_VAR 0 4
7526: PPUSH
7527: LD_STRING 08_GammaBase
7529: PPUSH
7530: CALL_OW 39
// end ;
7534: LD_VAR 0 2
7538: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
7546: PPUSH
7547: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7548: LD_ADDR_VAR 0 3
7552: PUSH
7553: LD_INT 17
7555: PPUSH
7556: LD_INT 22
7558: PUSH
7559: LD_INT 1
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 3
7568: PUSH
7569: LD_INT 21
7571: PUSH
7572: LD_INT 3
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: LD_INT 33
7588: PUSH
7589: LD_INT 2
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 70
7609: ST_TO_ADDR
// if tmp then
7610: LD_VAR 0 3
7614: IFFALSE 7733
// begin for i in tmp do
7616: LD_ADDR_VAR 0 2
7620: PUSH
7621: LD_VAR 0 3
7625: PUSH
7626: FOR_IN
7627: IFFALSE 7658
// begin SetSide ( i , 4 ) ;
7629: LD_VAR 0 2
7633: PPUSH
7634: LD_INT 4
7636: PPUSH
7637: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7641: LD_VAR 0 2
7645: PPUSH
7646: LD_INT 42
7648: PPUSH
7649: LD_INT 22
7651: PPUSH
7652: CALL_OW 111
// end ;
7656: GO 7626
7658: POP
7659: POP
// repeat wait ( 0 0$3 ) ;
7660: LD_INT 105
7662: PPUSH
7663: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7667: LD_VAR 0 3
7671: PPUSH
7672: LD_INT 51
7674: PPUSH
7675: LD_INT 16
7677: PPUSH
7678: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
7682: LD_VAR 0 3
7686: PPUSH
7687: LD_INT 95
7689: PUSH
7690: LD_INT 17
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PPUSH
7697: CALL_OW 72
7701: NOT
7702: IFFALSE 7660
// for i in tmp do
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: LD_VAR 0 3
7713: PUSH
7714: FOR_IN
7715: IFFALSE 7731
// SetSide ( i , 1 ) ;
7717: LD_VAR 0 2
7721: PPUSH
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 235
7729: GO 7714
7731: POP
7732: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
7733: LD_ADDR_VAR 0 3
7737: PUSH
7738: LD_INT 17
7740: PPUSH
7741: LD_INT 22
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 33
7753: PUSH
7754: LD_INT 2
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 70
7769: ST_TO_ADDR
// if tmp then
7770: LD_VAR 0 3
7774: IFFALSE 7798
// begin ComMoveXY ( tmp , 40 , 32 ) ;
7776: LD_VAR 0 3
7780: PPUSH
7781: LD_INT 40
7783: PPUSH
7784: LD_INT 32
7786: PPUSH
7787: CALL_OW 111
// wait ( 0 0$3 ) ;
7791: LD_INT 105
7793: PPUSH
7794: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7798: LD_ADDR_VAR 0 3
7802: PUSH
7803: LD_INT 17
7805: PPUSH
7806: LD_INT 22
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 2
7818: PUSH
7819: LD_INT 21
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 21
7831: PUSH
7832: LD_INT 3
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PPUSH
7848: CALL_OW 70
7852: ST_TO_ADDR
// if tmp then
7853: LD_VAR 0 3
7857: IFFALSE 8005
// begin repeat wait ( 0 0$1 ) ;
7859: LD_INT 35
7861: PPUSH
7862: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_INT 17
7873: PPUSH
7874: LD_INT 22
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 2
7886: PUSH
7887: LD_INT 21
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 21
7899: PUSH
7900: LD_INT 3
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PPUSH
7916: CALL_OW 70
7920: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: LD_INT 22
7928: PUSH
7929: LD_INT 4
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: LD_INT 25
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 21
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 69
7972: PUSH
7973: FOR_IN
7974: IFFALSE 7996
// ComAttackUnit ( i , tmp [ 1 ] ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_VAR 0 3
7985: PUSH
7986: LD_INT 1
7988: ARRAY
7989: PPUSH
7990: CALL_OW 115
7994: GO 7973
7996: POP
7997: POP
// until not tmp ;
7998: LD_VAR 0 3
8002: NOT
8003: IFFALSE 7859
// end ; wait ( 0 0$2 ) ;
8005: LD_INT 70
8007: PPUSH
8008: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8012: LD_ADDR_VAR 0 3
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_INT 4
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PPUSH
8027: CALL_OW 69
8031: ST_TO_ADDR
// AgressiveMove ( tmp , [ [ 55 , 62 ] ] ) ;
8032: LD_VAR 0 3
8036: PPUSH
8037: LD_INT 55
8039: PUSH
8040: LD_INT 62
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: PPUSH
8050: CALL 79548 0 2
// AddComWait ( tmp , 0 0$05 ) ;
8054: LD_VAR 0 3
8058: PPUSH
8059: LD_INT 175
8061: PPUSH
8062: CALL_OW 202
// wait ( 0 0$5 ) ;
8066: LD_INT 175
8068: PPUSH
8069: CALL_OW 67
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
8073: LD_VAR 0 3
8077: PPUSH
8078: LD_INT 120
8080: PUSH
8081: LD_INT 101
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PPUSH
8088: CALL_OW 72
8092: PPUSH
8093: LD_INT 58
8095: PPUSH
8096: LD_INT 96
8098: PPUSH
8099: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8103: LD_VAR 0 3
8107: PPUSH
8108: LD_INT 120
8110: PUSH
8111: LD_INT 101
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 72
8122: PPUSH
8123: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
8127: LD_VAR 0 3
8131: PPUSH
8132: LD_INT 120
8134: PUSH
8135: LD_INT 101
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: LD_INT 25
8144: PUSH
8145: LD_INT 4
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PPUSH
8156: CALL_OW 72
8160: PPUSH
8161: LD_INT 52
8163: PPUSH
8164: LD_INT 93
8166: PPUSH
8167: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8171: LD_VAR 0 3
8175: PPUSH
8176: LD_INT 120
8178: PUSH
8179: LD_INT 101
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: LD_INT 25
8188: PUSH
8189: LD_INT 4
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 72
8204: PPUSH
8205: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8209: LD_ADDR_VAR 0 7
8213: PUSH
8214: LD_VAR 0 3
8218: PPUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 2
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PPUSH
8229: CALL_OW 72
8233: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8234: LD_ADDR_VAR 0 4
8238: PUSH
8239: LD_INT 81
8241: PUSH
8242: LD_INT 1
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 69
8253: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8254: LD_ADDR_VAR 0 5
8258: PUSH
8259: LD_INT 57
8261: PUSH
8262: LD_INT 66
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 62
8271: PUSH
8272: LD_INT 58
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8283: LD_INT 35
8285: PPUSH
8286: CALL_OW 67
// for i in filter do
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: LD_VAR 0 7
8299: PUSH
8300: FOR_IN
8301: IFFALSE 8740
// begin if IsDead ( i ) then
8303: LD_VAR 0 2
8307: PPUSH
8308: CALL_OW 301
8312: IFFALSE 8332
// begin filter := filter diff i ;
8314: LD_ADDR_VAR 0 7
8318: PUSH
8319: LD_VAR 0 7
8323: PUSH
8324: LD_VAR 0 2
8328: DIFF
8329: ST_TO_ADDR
// continue ;
8330: GO 8300
// end ; tmp := IsDrivenBy ( i ) ;
8332: LD_ADDR_VAR 0 3
8336: PUSH
8337: LD_VAR 0 2
8341: PPUSH
8342: CALL_OW 311
8346: ST_TO_ADDR
// if not tmp then
8347: LD_VAR 0 3
8351: NOT
8352: IFFALSE 8356
// continue ;
8354: GO 8300
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8356: LD_VAR 0 2
8360: PPUSH
8361: CALL_OW 261
8365: PUSH
8366: LD_INT 30
8368: GREATER
8369: PUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: CALL_OW 110
8379: PUSH
8380: LD_INT 2
8382: EQUAL
8383: AND
8384: IFFALSE 8400
// SetTag ( i , 0 ) else
8386: LD_VAR 0 2
8390: PPUSH
8391: LD_INT 0
8393: PPUSH
8394: CALL_OW 109
8398: GO 8444
// if GetTag ( i ) = 2 then
8400: LD_VAR 0 2
8404: PPUSH
8405: CALL_OW 110
8409: PUSH
8410: LD_INT 2
8412: EQUAL
8413: IFFALSE 8444
// begin ComMoveXY ( i , 52 , 50 ) ;
8415: LD_VAR 0 2
8419: PPUSH
8420: LD_INT 52
8422: PPUSH
8423: LD_INT 50
8425: PPUSH
8426: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8430: LD_VAR 0 2
8434: PPUSH
8435: LD_EXP 31
8439: PPUSH
8440: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8444: LD_VAR 0 2
8448: PPUSH
8449: CALL_OW 256
8453: PUSH
8454: LD_INT 600
8456: GREATEREQUAL
8457: PUSH
8458: LD_VAR 0 2
8462: PPUSH
8463: CALL_OW 110
8467: NOT
8468: AND
8469: IFFALSE 8495
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8471: LD_VAR 0 2
8475: PPUSH
8476: LD_VAR 0 4
8480: PPUSH
8481: LD_VAR 0 2
8485: PPUSH
8486: CALL_OW 74
8490: PPUSH
8491: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8495: LD_VAR 0 2
8499: PPUSH
8500: CALL_OW 256
8504: PUSH
8505: LD_INT 600
8507: LESS
8508: PUSH
8509: LD_VAR 0 2
8513: PPUSH
8514: CALL_OW 110
8518: NOT
8519: AND
8520: IFFALSE 8596
// begin SetTag ( i , 1 ) ;
8522: LD_VAR 0 2
8526: PPUSH
8527: LD_INT 1
8529: PPUSH
8530: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8534: LD_ADDR_VAR 0 6
8538: PUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: LD_VAR 0 5
8548: PPUSH
8549: CALL 80288 0 2
8553: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_VAR 0 6
8563: PUSH
8564: LD_INT 1
8566: ARRAY
8567: PPUSH
8568: LD_VAR 0 6
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8581: LD_VAR 0 2
8585: PPUSH
8586: LD_INT 40
8588: PPUSH
8589: LD_INT 49
8591: PPUSH
8592: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8596: LD_VAR 0 2
8600: PPUSH
8601: CALL_OW 110
8605: PUSH
8606: LD_INT 1
8608: EQUAL
8609: PUSH
8610: LD_VAR 0 2
8614: PPUSH
8615: LD_INT 40
8617: PPUSH
8618: LD_INT 49
8620: PPUSH
8621: CALL_OW 297
8625: PUSH
8626: LD_INT 9
8628: LESS
8629: AND
8630: PUSH
8631: LD_VAR 0 3
8635: AND
8636: IFFALSE 8738
// begin ComExitVehicle ( tmp ) ;
8638: LD_VAR 0 3
8642: PPUSH
8643: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8647: LD_VAR 0 3
8651: PPUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8661: LD_INT 35
8663: PPUSH
8664: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8668: LD_VAR 0 2
8672: PPUSH
8673: CALL_OW 256
8677: PUSH
8678: LD_INT 1000
8680: EQUAL
8681: IFFALSE 8661
// ComEnterUnit ( tmp , i ) ;
8683: LD_VAR 0 3
8687: PPUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8697: LD_VAR 0 2
8701: PPUSH
8702: CALL_OW 261
8706: PUSH
8707: LD_INT 40
8709: LESSEQUAL
8710: IFFALSE 8726
// SetTag ( i , 2 ) else
8712: LD_VAR 0 2
8716: PPUSH
8717: LD_INT 2
8719: PPUSH
8720: CALL_OW 109
8724: GO 8738
// SetTag ( i , 0 ) ;
8726: LD_VAR 0 2
8730: PPUSH
8731: LD_INT 0
8733: PPUSH
8734: CALL_OW 109
// end ; end ;
8738: GO 8300
8740: POP
8741: POP
// until not filter ;
8742: LD_VAR 0 7
8746: NOT
8747: IFFALSE 8283
// end ; end_of_file
8749: LD_VAR 0 1
8753: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8754: LD_INT 0
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
// uc_side := 3 ;
8761: LD_ADDR_OWVAR 20
8765: PUSH
8766: LD_INT 3
8768: ST_TO_ADDR
// uc_nation := 3 ;
8769: LD_ADDR_OWVAR 21
8773: PUSH
8774: LD_INT 3
8776: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
8777: LD_ADDR_EXP 33
8781: PUSH
8782: LD_INT 8
8784: PUSH
8785: LD_INT 11
8787: PUSH
8788: LD_INT 14
8790: PUSH
8791: LD_INT 17
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: PUSH
8800: LD_OWVAR 67
8804: ARRAY
8805: ST_TO_ADDR
// ruMobile := [ ] ;
8806: LD_ADDR_EXP 34
8810: PUSH
8811: EMPTY
8812: ST_TO_ADDR
// ruBuildList := [ ] ;
8813: LD_ADDR_EXP 35
8817: PUSH
8818: EMPTY
8819: ST_TO_ADDR
// russianAttackers := [ ] ;
8820: LD_ADDR_EXP 36
8824: PUSH
8825: EMPTY
8826: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8827: LD_ADDR_VAR 0 5
8831: PUSH
8832: LD_INT 43
8834: PUSH
8835: LD_INT 44
8837: PUSH
8838: LD_INT 46
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: ST_TO_ADDR
// if Difficulty > 2 then
8846: LD_OWVAR 67
8850: PUSH
8851: LD_INT 2
8853: GREATER
8854: IFFALSE 8877
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8856: LD_ADDR_VAR 0 5
8860: PUSH
8861: LD_VAR 0 5
8865: PUSH
8866: LD_INT 45
8868: PUSH
8869: LD_INT 46
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: ADD
8876: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8877: LD_ADDR_EXP 32
8881: PUSH
8882: LD_STRING Borodin
8884: PPUSH
8885: CALL_OW 25
8889: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8890: LD_EXP 32
8894: PPUSH
8895: LD_INT 28
8897: PPUSH
8898: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8902: LD_INT 28
8904: PPUSH
8905: CALL_OW 274
8909: PPUSH
8910: LD_INT 1
8912: PPUSH
8913: LD_INT 3000
8915: PUSH
8916: LD_INT 4000
8918: PUSH
8919: LD_INT 5000
8921: PUSH
8922: LD_INT 6000
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: LD_OWVAR 67
8935: ARRAY
8936: PPUSH
8937: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8941: LD_INT 28
8943: PPUSH
8944: CALL_OW 274
8948: PPUSH
8949: LD_INT 2
8951: PPUSH
8952: LD_INT 1000
8954: PPUSH
8955: CALL_OW 277
// if Difficulty > 2 then
8959: LD_OWVAR 67
8963: PUSH
8964: LD_INT 2
8966: GREATER
8967: IFFALSE 9091
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8969: LD_ADDR_VAR 0 4
8973: PUSH
8974: LD_INT 99
8976: PUSH
8977: LD_INT 130
8979: PUSH
8980: LD_INT 2
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 121
8990: PUSH
8991: LD_INT 127
8993: PUSH
8994: LD_INT 4
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 117
9004: PUSH
9005: LD_INT 121
9007: PUSH
9008: LD_INT 4
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: LIST
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: LIST
9020: ST_TO_ADDR
// for i in tmp do
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: LD_VAR 0 4
9030: PUSH
9031: FOR_IN
9032: IFFALSE 9089
// begin bc_type := b_turret ;
9034: LD_ADDR_OWVAR 42
9038: PUSH
9039: LD_INT 33
9041: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9042: LD_ADDR_OWVAR 43
9046: PUSH
9047: LD_INT 2
9049: PUSH
9050: LD_OWVAR 67
9054: PLUS
9055: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9056: LD_VAR 0 2
9060: PUSH
9061: LD_INT 1
9063: ARRAY
9064: PPUSH
9065: LD_VAR 0 2
9069: PUSH
9070: LD_INT 2
9072: ARRAY
9073: PPUSH
9074: LD_VAR 0 2
9078: PUSH
9079: LD_INT 3
9081: ARRAY
9082: PPUSH
9083: CALL_OW 47
// end ;
9087: GO 9031
9089: POP
9090: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9091: LD_ADDR_VAR 0 2
9095: PUSH
9096: LD_INT 22
9098: PUSH
9099: LD_INT 3
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 21
9108: PUSH
9109: LD_INT 3
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 69
9124: PUSH
9125: FOR_IN
9126: IFFALSE 9148
// SetBLevel ( i , 2 + Difficulty ) ;
9128: LD_VAR 0 2
9132: PPUSH
9133: LD_INT 2
9135: PUSH
9136: LD_OWVAR 67
9140: PLUS
9141: PPUSH
9142: CALL_OW 241
9146: GO 9125
9148: POP
9149: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: LD_INT 22
9157: PUSH
9158: LD_INT 3
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 2
9167: PUSH
9168: LD_INT 30
9170: PUSH
9171: LD_INT 32
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 30
9180: PUSH
9181: LD_INT 33
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PPUSH
9197: CALL_OW 69
9201: ST_TO_ADDR
// for i in tmp do
9202: LD_ADDR_VAR 0 2
9206: PUSH
9207: LD_VAR 0 4
9211: PUSH
9212: FOR_IN
9213: IFFALSE 9245
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9215: LD_VAR 0 2
9219: PPUSH
9220: LD_VAR 0 5
9224: PUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_VAR 0 5
9232: PPUSH
9233: CALL_OW 12
9237: ARRAY
9238: PPUSH
9239: CALL_OW 431
9243: GO 9212
9245: POP
9246: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9247: LD_ADDR_VAR 0 2
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 3
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 30
9264: PUSH
9265: LD_INT 32
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9331
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9284: LD_INT 0
9286: PPUSH
9287: LD_INT 5
9289: PUSH
9290: LD_INT 6
9292: PUSH
9293: LD_INT 7
9295: PUSH
9296: LD_INT 8
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: PUSH
9305: LD_OWVAR 67
9309: ARRAY
9310: PPUSH
9311: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9315: CALL_OW 44
9319: PPUSH
9320: LD_VAR 0 2
9324: PPUSH
9325: CALL_OW 52
// end ;
9329: GO 9281
9331: POP
9332: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9333: LD_ADDR_VAR 0 2
9337: PUSH
9338: LD_INT 22
9340: PUSH
9341: LD_INT 3
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: LD_INT 30
9350: PUSH
9351: LD_INT 5
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PPUSH
9362: CALL_OW 69
9366: PUSH
9367: FOR_IN
9368: IFFALSE 9458
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9370: LD_ADDR_VAR 0 3
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_INT 2
9382: PUSH
9383: LD_INT 3
9385: PUSH
9386: LD_INT 4
9388: PUSH
9389: LD_INT 5
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: PUSH
9398: LD_OWVAR 67
9402: ARRAY
9403: PUSH
9404: FOR_TO
9405: IFFALSE 9454
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9407: LD_INT 0
9409: PPUSH
9410: LD_INT 5
9412: PUSH
9413: LD_INT 6
9415: PUSH
9416: LD_INT 7
9418: PUSH
9419: LD_INT 8
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: PUSH
9428: LD_OWVAR 67
9432: ARRAY
9433: PPUSH
9434: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9438: CALL_OW 44
9442: PPUSH
9443: LD_VAR 0 2
9447: PPUSH
9448: CALL_OW 52
// end ;
9452: GO 9404
9454: POP
9455: POP
// end ;
9456: GO 9367
9458: POP
9459: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9460: LD_ADDR_VAR 0 2
9464: PUSH
9465: DOUBLE
9466: LD_INT 1
9468: DEC
9469: ST_TO_ADDR
9470: LD_INT 3
9472: PUSH
9473: LD_INT 4
9475: PUSH
9476: LD_INT 5
9478: PUSH
9479: LD_INT 5
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: PUSH
9488: LD_OWVAR 67
9492: ARRAY
9493: PUSH
9494: FOR_TO
9495: IFFALSE 9542
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9497: LD_INT 0
9499: PPUSH
9500: LD_INT 4
9502: PUSH
9503: LD_INT 5
9505: PUSH
9506: LD_INT 5
9508: PUSH
9509: LD_INT 6
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_OWVAR 67
9522: ARRAY
9523: PPUSH
9524: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9528: CALL_OW 44
9532: PPUSH
9533: LD_INT 28
9535: PPUSH
9536: CALL_OW 52
// end ;
9540: GO 9494
9542: POP
9543: POP
// for i := 1 to 2 do
9544: LD_ADDR_VAR 0 2
9548: PUSH
9549: DOUBLE
9550: LD_INT 1
9552: DEC
9553: ST_TO_ADDR
9554: LD_INT 2
9556: PUSH
9557: FOR_TO
9558: IFFALSE 9592
// begin PrepareScientist ( false , 6 ) ;
9560: LD_INT 0
9562: PPUSH
9563: LD_INT 6
9565: PPUSH
9566: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9570: CALL_OW 44
9574: PPUSH
9575: LD_INT 81
9577: PPUSH
9578: LD_INT 93
9580: PPUSH
9581: CALL_OW 428
9585: PPUSH
9586: CALL_OW 52
// end ;
9590: GO 9557
9592: POP
9593: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9594: LD_INT 22
9596: PPUSH
9597: LD_INT 1
9599: PPUSH
9600: LD_INT 3
9602: PPUSH
9603: LD_INT 51
9605: PPUSH
9606: LD_INT 100
9608: PPUSH
9609: CALL 44491 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9613: CALL_OW 45
9617: PPUSH
9618: LD_INT 91
9620: PPUSH
9621: LD_INT 94
9623: PPUSH
9624: LD_INT 3
9626: PPUSH
9627: LD_INT 0
9629: PPUSH
9630: CALL_OW 50
// for i := 1 to 2 do
9634: LD_ADDR_VAR 0 2
9638: PUSH
9639: DOUBLE
9640: LD_INT 1
9642: DEC
9643: ST_TO_ADDR
9644: LD_INT 2
9646: PUSH
9647: FOR_TO
9648: IFFALSE 9692
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9650: LD_INT 22
9652: PPUSH
9653: LD_INT 1
9655: PPUSH
9656: LD_INT 3
9658: PPUSH
9659: LD_INT 52
9661: PPUSH
9662: LD_INT 100
9664: PPUSH
9665: CALL 44491 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9669: CALL_OW 45
9673: PPUSH
9674: LD_INT 91
9676: PPUSH
9677: LD_INT 94
9679: PPUSH
9680: LD_INT 4
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: CALL_OW 50
// end ;
9690: GO 9647
9692: POP
9693: POP
// end ;
9694: LD_VAR 0 1
9698: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9699: LD_INT 0
9701: PPUSH
9702: PPUSH
9703: PPUSH
9704: PPUSH
9705: PPUSH
// uc_side := 3 ;
9706: LD_ADDR_OWVAR 20
9710: PUSH
9711: LD_INT 3
9713: ST_TO_ADDR
// uc_nation := 3 ;
9714: LD_ADDR_OWVAR 21
9718: PUSH
9719: LD_INT 3
9721: ST_TO_ADDR
// for i := 1 to 4 do
9722: LD_ADDR_VAR 0 2
9726: PUSH
9727: DOUBLE
9728: LD_INT 1
9730: DEC
9731: ST_TO_ADDR
9732: LD_INT 4
9734: PUSH
9735: FOR_TO
9736: IFFALSE 9863
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9738: LD_INT 22
9740: PPUSH
9741: LD_INT 1
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: LD_INT 42
9749: PUSH
9750: LD_INT 43
9752: PUSH
9753: LD_INT 44
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 1
9763: PPUSH
9764: LD_INT 3
9766: PPUSH
9767: CALL_OW 12
9771: ARRAY
9772: PPUSH
9773: LD_INT 40
9775: PPUSH
9776: CALL 44491 0 5
// veh := CreateVehicle ;
9780: LD_ADDR_VAR 0 4
9784: PUSH
9785: CALL_OW 45
9789: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9790: LD_VAR 0 4
9794: PPUSH
9795: LD_INT 5
9797: PPUSH
9798: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9802: LD_VAR 0 4
9806: PPUSH
9807: LD_INT 7
9809: PPUSH
9810: LD_INT 0
9812: PPUSH
9813: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9817: LD_INT 0
9819: PPUSH
9820: LD_INT 5
9822: PPUSH
9823: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9827: CALL_OW 44
9831: PPUSH
9832: LD_VAR 0 4
9836: PPUSH
9837: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9841: LD_ADDR_VAR 0 5
9845: PUSH
9846: LD_VAR 0 5
9850: PPUSH
9851: LD_VAR 0 4
9855: PPUSH
9856: CALL 76944 0 2
9860: ST_TO_ADDR
// end ;
9861: GO 9735
9863: POP
9864: POP
// for i := 1 to 3 do
9865: LD_ADDR_VAR 0 2
9869: PUSH
9870: DOUBLE
9871: LD_INT 1
9873: DEC
9874: ST_TO_ADDR
9875: LD_INT 3
9877: PUSH
9878: FOR_TO
9879: IFFALSE 10006
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9881: LD_INT 22
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: LD_INT 42
9892: PUSH
9893: LD_INT 43
9895: PUSH
9896: LD_INT 44
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PUSH
9904: LD_INT 1
9906: PPUSH
9907: LD_INT 3
9909: PPUSH
9910: CALL_OW 12
9914: ARRAY
9915: PPUSH
9916: LD_INT 40
9918: PPUSH
9919: CALL 44491 0 5
// veh := CreateVehicle ;
9923: LD_ADDR_VAR 0 4
9927: PUSH
9928: CALL_OW 45
9932: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9933: LD_VAR 0 4
9937: PPUSH
9938: LD_INT 5
9940: PPUSH
9941: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9945: LD_VAR 0 4
9949: PPUSH
9950: LD_INT 8
9952: PPUSH
9953: LD_INT 0
9955: PPUSH
9956: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9960: LD_INT 0
9962: PPUSH
9963: LD_INT 5
9965: PPUSH
9966: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9970: CALL_OW 44
9974: PPUSH
9975: LD_VAR 0 4
9979: PPUSH
9980: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9984: LD_ADDR_VAR 0 5
9988: PUSH
9989: LD_VAR 0 5
9993: PPUSH
9994: LD_VAR 0 4
9998: PPUSH
9999: CALL 76944 0 2
10003: ST_TO_ADDR
// end ;
10004: GO 9878
10006: POP
10007: POP
// for i := 1 to 2 do
10008: LD_ADDR_VAR 0 2
10012: PUSH
10013: DOUBLE
10014: LD_INT 1
10016: DEC
10017: ST_TO_ADDR
10018: LD_INT 2
10020: PUSH
10021: FOR_TO
10022: IFFALSE 10081
// begin PrepareSoldier ( false , 5 ) ;
10024: LD_INT 0
10026: PPUSH
10027: LD_INT 5
10029: PPUSH
10030: CALL_OW 381
// un := CreateHuman ;
10034: LD_ADDR_VAR 0 3
10038: PUSH
10039: CALL_OW 44
10043: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10044: LD_VAR 0 3
10048: PPUSH
10049: LD_INT 8
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10059: LD_ADDR_VAR 0 5
10063: PUSH
10064: LD_VAR 0 5
10068: PPUSH
10069: LD_VAR 0 3
10073: PPUSH
10074: CALL 76944 0 2
10078: ST_TO_ADDR
// end ;
10079: GO 10021
10081: POP
10082: POP
// for i in tmp do
10083: LD_ADDR_VAR 0 2
10087: PUSH
10088: LD_VAR 0 5
10092: PUSH
10093: FOR_IN
10094: IFFALSE 10113
// ComAgressiveMove ( i , 51 , 16 ) ;
10096: LD_VAR 0 2
10100: PPUSH
10101: LD_INT 51
10103: PPUSH
10104: LD_INT 16
10106: PPUSH
10107: CALL_OW 114
10111: GO 10093
10113: POP
10114: POP
// end ;
10115: LD_VAR 0 1
10119: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10120: LD_EXP 34
10124: IFFALSE 10699
10126: GO 10128
10128: DISABLE
10129: LD_INT 0
10131: PPUSH
10132: PPUSH
10133: PPUSH
// begin enable ;
10134: ENABLE
// if not ruMobile then
10135: LD_EXP 34
10139: NOT
10140: IFFALSE 10144
// exit ;
10142: GO 10699
// for i in ruMobile do
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: LD_EXP 34
10153: PUSH
10154: FOR_IN
10155: IFFALSE 10697
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10157: LD_VAR 0 1
10161: PPUSH
10162: CALL_OW 302
10166: NOT
10167: PUSH
10168: LD_VAR 0 1
10172: PPUSH
10173: CALL_OW 255
10177: PUSH
10178: LD_INT 3
10180: NONEQUAL
10181: OR
10182: IFFALSE 10202
// begin ruMobile := ruMobile diff i ;
10184: LD_ADDR_EXP 34
10188: PUSH
10189: LD_EXP 34
10193: PUSH
10194: LD_VAR 0 1
10198: DIFF
10199: ST_TO_ADDR
// continue ;
10200: GO 10154
// end ; if GetTag ( i ) = 300 then
10202: LD_VAR 0 1
10206: PPUSH
10207: CALL_OW 110
10211: PUSH
10212: LD_INT 300
10214: EQUAL
10215: IFFALSE 10330
// begin if GetFuel ( i ) < 50 then
10217: LD_VAR 0 1
10221: PPUSH
10222: CALL_OW 261
10226: PUSH
10227: LD_INT 50
10229: LESS
10230: IFFALSE 10289
// begin ComMoveXY ( i , 93 , 100 ) ;
10232: LD_VAR 0 1
10236: PPUSH
10237: LD_INT 93
10239: PPUSH
10240: LD_INT 100
10242: PPUSH
10243: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10247: LD_INT 35
10249: PPUSH
10250: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10254: LD_VAR 0 1
10258: PPUSH
10259: LD_INT 93
10261: PPUSH
10262: LD_INT 100
10264: PPUSH
10265: CALL_OW 297
10269: PUSH
10270: LD_INT 4
10272: LESS
10273: IFFALSE 10247
// SetFuel ( i , 100 ) ;
10275: LD_VAR 0 1
10279: PPUSH
10280: LD_INT 100
10282: PPUSH
10283: CALL_OW 240
// end else
10287: GO 10330
// if not IsInArea ( i , ruParkingArea ) then
10289: LD_VAR 0 1
10293: PPUSH
10294: LD_INT 10
10296: PPUSH
10297: CALL_OW 308
10301: NOT
10302: IFFALSE 10318
// ComMoveToArea ( i , ruParkingArea ) else
10304: LD_VAR 0 1
10308: PPUSH
10309: LD_INT 10
10311: PPUSH
10312: CALL_OW 113
10316: GO 10330
// SetTag ( i , 301 ) ;
10318: LD_VAR 0 1
10322: PPUSH
10323: LD_INT 301
10325: PPUSH
10326: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10330: LD_VAR 0 1
10334: PPUSH
10335: CALL_OW 110
10339: PUSH
10340: LD_INT 301
10342: EQUAL
10343: IFFALSE 10473
// begin if GetLives ( i ) < 1000 then
10345: LD_VAR 0 1
10349: PPUSH
10350: CALL_OW 256
10354: PUSH
10355: LD_INT 1000
10357: LESS
10358: IFFALSE 10450
// begin if not IsDrivenBy ( i ) then
10360: LD_VAR 0 1
10364: PPUSH
10365: CALL_OW 311
10369: NOT
10370: IFFALSE 10374
// continue ;
10372: GO 10154
// mech := IsDrivenBy ( i ) ;
10374: LD_ADDR_VAR 0 2
10378: PUSH
10379: LD_VAR 0 1
10383: PPUSH
10384: CALL_OW 311
10388: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10389: LD_VAR 0 2
10393: PPUSH
10394: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10398: LD_VAR 0 2
10402: PPUSH
10403: LD_VAR 0 1
10407: PPUSH
10408: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10412: LD_INT 35
10414: PPUSH
10415: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10419: LD_VAR 0 1
10423: PPUSH
10424: CALL_OW 256
10428: PUSH
10429: LD_INT 1000
10431: EQUAL
10432: IFFALSE 10412
// ComEnterUnit ( mech , i ) ;
10434: LD_VAR 0 2
10438: PPUSH
10439: LD_VAR 0 1
10443: PPUSH
10444: CALL_OW 120
// end else
10448: GO 10473
// if IsDrivenBy ( i ) then
10450: LD_VAR 0 1
10454: PPUSH
10455: CALL_OW 311
10459: IFFALSE 10473
// SetTag ( i , 0 ) ;
10461: LD_VAR 0 1
10465: PPUSH
10466: LD_INT 0
10468: PPUSH
10469: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10473: LD_VAR 0 1
10477: PPUSH
10478: CALL_OW 110
10482: PUSH
10483: LD_INT 300
10485: LESS
10486: IFFALSE 10695
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10488: LD_ADDR_VAR 0 3
10492: PUSH
10493: LD_INT 11
10495: PPUSH
10496: LD_INT 81
10498: PUSH
10499: LD_INT 3
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 70
10510: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10511: LD_VAR 0 1
10515: PPUSH
10516: CALL_OW 256
10520: PUSH
10521: LD_INT 650
10523: LESS
10524: IFFALSE 10549
// begin ComStop ( i ) ;
10526: LD_VAR 0 1
10530: PPUSH
10531: CALL_OW 141
// SetTag ( i , 300 ) ;
10535: LD_VAR 0 1
10539: PPUSH
10540: LD_INT 300
10542: PPUSH
10543: CALL_OW 109
// continue ;
10547: GO 10154
// end ; if enemy then
10549: LD_VAR 0 3
10553: IFFALSE 10593
// begin if not HasTask ( i ) then
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL_OW 314
10564: NOT
10565: IFFALSE 10591
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_VAR 0 3
10576: PPUSH
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL_OW 74
10586: PPUSH
10587: CALL_OW 115
// end else
10591: GO 10695
// if ruMobile > 2 then
10593: LD_EXP 34
10597: PUSH
10598: LD_INT 2
10600: GREATER
10601: IFFALSE 10695
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10603: LD_ADDR_VAR 0 3
10607: PUSH
10608: LD_INT 81
10610: PUSH
10611: LD_INT 3
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PPUSH
10618: CALL_OW 69
10622: ST_TO_ADDR
// if enemy then
10623: LD_VAR 0 3
10627: IFFALSE 10695
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10629: LD_VAR 0 1
10633: PPUSH
10634: LD_INT 116
10636: PUSH
10637: LD_INT 95
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 84
10646: PUSH
10647: LD_INT 68
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 58
10656: PUSH
10657: LD_INT 53
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 44
10666: PUSH
10667: LD_INT 35
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 45
10676: PUSH
10677: LD_INT 23
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL 79548 0 2
// end ; end ; end ;
10695: GO 10154
10697: POP
10698: POP
// end ;
10699: PPOPN 3
10701: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10702: LD_INT 3
10704: PUSH
10705: LD_INT 22
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 32
10721: PUSH
10722: LD_INT 1
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PPUSH
10733: CALL_OW 69
10737: IFFALSE 10821
10739: GO 10741
10741: DISABLE
10742: LD_INT 0
10744: PPUSH
// begin enable ;
10745: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10746: LD_ADDR_VAR 0 1
10750: PUSH
10751: LD_INT 3
10753: PUSH
10754: LD_INT 22
10756: PUSH
10757: LD_INT 1
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 32
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PPUSH
10782: CALL_OW 69
10786: PUSH
10787: FOR_IN
10788: IFFALSE 10819
// if GetFuel ( i ) < 3 then
10790: LD_VAR 0 1
10794: PPUSH
10795: CALL_OW 261
10799: PUSH
10800: LD_INT 3
10802: LESS
10803: IFFALSE 10817
// SetFuel ( i , 3 ) ;
10805: LD_VAR 0 1
10809: PPUSH
10810: LD_INT 3
10812: PPUSH
10813: CALL_OW 240
10817: GO 10787
10819: POP
10820: POP
// end ;
10821: PPOPN 1
10823: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10824: LD_INT 29
10826: PPUSH
10827: CALL_OW 302
10831: PUSH
10832: LD_INT 29
10834: PPUSH
10835: CALL_OW 461
10839: PUSH
10840: LD_INT 2
10842: EQUAL
10843: AND
10844: IFFALSE 11077
10846: GO 10848
10848: DISABLE
10849: LD_INT 0
10851: PPUSH
10852: PPUSH
// begin enable ;
10853: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10854: LD_ADDR_VAR 0 1
10858: PUSH
10859: LD_INT 21
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_INT 23
10867: PUSH
10868: LD_INT 24
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 1
10879: PPUSH
10880: LD_INT 4
10882: PPUSH
10883: CALL_OW 12
10887: ARRAY
10888: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10889: LD_ADDR_VAR 0 2
10893: PUSH
10894: LD_INT 42
10896: PUSH
10897: LD_INT 44
10899: PUSH
10900: LD_INT 43
10902: PUSH
10903: LD_INT 46
10905: PUSH
10906: LD_INT 45
10908: PUSH
10909: LD_INT 46
10911: PUSH
10912: LD_INT 45
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: PUSH
10924: LD_OWVAR 67
10928: PUSH
10929: LD_INT 0
10931: PPUSH
10932: LD_INT 3
10934: PPUSH
10935: CALL_OW 12
10939: PLUS
10940: ARRAY
10941: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10942: LD_VAR 0 1
10946: PUSH
10947: LD_INT 21
10949: PUSH
10950: LD_INT 22
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: IN
10957: PUSH
10958: LD_VAR 0 2
10962: PUSH
10963: LD_INT 46
10965: EQUAL
10966: AND
10967: IFFALSE 10996
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10969: LD_ADDR_VAR 0 2
10973: PUSH
10974: LD_INT 44
10976: PUSH
10977: LD_INT 45
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 1
10986: PPUSH
10987: LD_INT 2
10989: PPUSH
10990: CALL_OW 12
10994: ARRAY
10995: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
10996: LD_OWVAR 1
11000: PUSH
11001: LD_INT 25200
11003: PUSH
11004: LD_INT 23100
11006: PUSH
11007: LD_INT 21000
11009: PUSH
11010: LD_INT 18900
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: PUSH
11019: LD_OWVAR 67
11023: ARRAY
11024: LESS
11025: IFFALSE 11054
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11027: LD_ADDR_VAR 0 2
11031: PUSH
11032: LD_INT 44
11034: PUSH
11035: LD_INT 43
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 1
11044: PPUSH
11045: LD_INT 2
11047: PPUSH
11048: CALL_OW 12
11052: ARRAY
11053: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11054: LD_INT 29
11056: PPUSH
11057: LD_VAR 0 1
11061: PPUSH
11062: LD_INT 1
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: LD_VAR 0 2
11072: PPUSH
11073: CALL_OW 185
// end ;
11077: PPOPN 2
11079: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
11080: LD_INT 28
11082: PPUSH
11083: CALL_OW 302
11087: IFFALSE 11929
11089: GO 11091
11091: DISABLE
11092: LD_INT 0
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
// begin enable ;
11102: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11103: LD_ADDR_VAR 0 3
11107: PUSH
11108: LD_INT 12
11110: PPUSH
11111: LD_INT 3
11113: PUSH
11114: LD_INT 24
11116: PUSH
11117: LD_INT 1000
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 21
11130: PUSH
11131: LD_INT 3
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PPUSH
11142: CALL_OW 70
11146: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11147: LD_ADDR_VAR 0 4
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_INT 3
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 25
11164: PUSH
11165: LD_INT 2
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PPUSH
11176: CALL_OW 69
11180: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11181: LD_ADDR_VAR 0 5
11185: PUSH
11186: LD_INT 22
11188: PUSH
11189: LD_INT 3
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 34
11198: PUSH
11199: LD_INT 52
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PPUSH
11210: CALL_OW 69
11214: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11215: LD_ADDR_VAR 0 7
11219: PUSH
11220: LD_INT 22
11222: PUSH
11223: LD_INT 3
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 25
11232: PUSH
11233: LD_INT 4
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11249: LD_ADDR_VAR 0 8
11253: PUSH
11254: LD_INT 81
11256: PPUSH
11257: LD_INT 93
11259: PPUSH
11260: CALL_OW 428
11264: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
11265: LD_VAR 0 7
11269: PUSH
11270: LD_VAR 0 4
11274: PPUSH
11275: LD_INT 120
11277: PUSH
11278: LD_INT 2
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 72
11289: AND
11290: IFFALSE 11303
// ComExitAll ( sci ) else
11292: LD_VAR 0 7
11296: PPUSH
11297: CALL 77425 0 1
11301: GO 11376
// if sci then
11303: LD_VAR 0 7
11307: IFFALSE 11376
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
11309: LD_VAR 0 7
11313: PPUSH
11314: LD_INT 3
11316: PUSH
11317: LD_INT 54
11319: PUSH
11320: EMPTY
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL_OW 72
11331: PUSH
11332: LD_VAR 0 8
11336: PPUSH
11337: CALL_OW 302
11341: AND
11342: IFFALSE 11376
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
11344: LD_VAR 0 7
11348: PPUSH
11349: LD_INT 3
11351: PUSH
11352: LD_INT 54
11354: PUSH
11355: EMPTY
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PPUSH
11362: CALL_OW 72
11366: PPUSH
11367: LD_VAR 0 8
11371: PPUSH
11372: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
11376: LD_VAR 0 5
11380: PPUSH
11381: LD_INT 50
11383: PUSH
11384: EMPTY
11385: LIST
11386: PPUSH
11387: CALL_OW 72
11391: PUSH
11392: LD_VAR 0 3
11396: AND
11397: IFFALSE 11428
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
11399: LD_VAR 0 5
11403: PPUSH
11404: LD_INT 50
11406: PUSH
11407: EMPTY
11408: LIST
11409: PPUSH
11410: CALL_OW 72
11414: PPUSH
11415: LD_VAR 0 3
11419: PUSH
11420: LD_INT 1
11422: ARRAY
11423: PPUSH
11424: CALL_OW 130
// if eng then
11428: LD_VAR 0 4
11432: IFFALSE 11929
// begin for i in eng do
11434: LD_ADDR_VAR 0 1
11438: PUSH
11439: LD_VAR 0 4
11443: PUSH
11444: FOR_IN
11445: IFFALSE 11927
// begin tag := GetTag ( i ) ;
11447: LD_ADDR_VAR 0 6
11451: PUSH
11452: LD_VAR 0 1
11456: PPUSH
11457: CALL_OW 110
11461: ST_TO_ADDR
// case tag of 0 :
11462: LD_VAR 0 6
11466: PUSH
11467: LD_INT 0
11469: DOUBLE
11470: EQUAL
11471: IFTRUE 11475
11473: GO 11686
11475: POP
// begin if b then
11476: LD_VAR 0 3
11480: IFFALSE 11496
// begin SetTag ( i , 1 ) ;
11482: LD_VAR 0 1
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: CALL_OW 109
// continue ;
11494: GO 11444
// end ; if not ruBuildList then
11496: LD_EXP 35
11500: NOT
11501: IFFALSE 11517
// ComEnterUnit ( i , ruDep ) else
11503: LD_VAR 0 1
11507: PPUSH
11508: LD_INT 28
11510: PPUSH
11511: CALL_OW 120
11515: GO 11684
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11517: LD_INT 11
11519: PPUSH
11520: LD_INT 81
11522: PUSH
11523: LD_INT 3
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 70
11534: PUSH
11535: LD_INT 0
11537: EQUAL
11538: PUSH
11539: LD_INT 28
11541: PPUSH
11542: LD_EXP 35
11546: PUSH
11547: LD_INT 1
11549: ARRAY
11550: PUSH
11551: LD_INT 1
11553: ARRAY
11554: PPUSH
11555: LD_EXP 35
11559: PUSH
11560: LD_INT 1
11562: ARRAY
11563: PUSH
11564: LD_INT 2
11566: ARRAY
11567: PPUSH
11568: LD_EXP 35
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: PUSH
11577: LD_INT 3
11579: ARRAY
11580: PPUSH
11581: LD_EXP 35
11585: PUSH
11586: LD_INT 1
11588: ARRAY
11589: PUSH
11590: LD_INT 4
11592: ARRAY
11593: PPUSH
11594: CALL 52710 0 5
11598: AND
11599: IFFALSE 11684
// begin if IsInUnit ( i ) then
11601: LD_VAR 0 1
11605: PPUSH
11606: CALL_OW 310
11610: IFFALSE 11623
// ComExitBuilding ( i ) else
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 122
11621: GO 11684
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11623: LD_VAR 0 1
11627: PPUSH
11628: LD_EXP 35
11632: PUSH
11633: LD_INT 1
11635: ARRAY
11636: PUSH
11637: LD_INT 1
11639: ARRAY
11640: PPUSH
11641: LD_EXP 35
11645: PUSH
11646: LD_INT 1
11648: ARRAY
11649: PUSH
11650: LD_INT 2
11652: ARRAY
11653: PPUSH
11654: LD_EXP 35
11658: PUSH
11659: LD_INT 1
11661: ARRAY
11662: PUSH
11663: LD_INT 3
11665: ARRAY
11666: PPUSH
11667: LD_EXP 35
11671: PUSH
11672: LD_INT 1
11674: ARRAY
11675: PUSH
11676: LD_INT 4
11678: ARRAY
11679: PPUSH
11680: CALL_OW 145
// end ; end ; 1 :
11684: GO 11883
11686: LD_INT 1
11688: DOUBLE
11689: EQUAL
11690: IFTRUE 11694
11692: GO 11797
11694: POP
// begin if not b then
11695: LD_VAR 0 3
11699: NOT
11700: IFFALSE 11716
// begin SetTag ( i , 0 ) ;
11702: LD_VAR 0 1
11706: PPUSH
11707: LD_INT 0
11709: PPUSH
11710: CALL_OW 109
// continue ;
11714: GO 11444
// end ; if IsInUnit ( i ) then
11716: LD_VAR 0 1
11720: PPUSH
11721: CALL_OW 310
11725: IFFALSE 11736
// ComExitBuilding ( i ) ;
11727: LD_VAR 0 1
11731: PPUSH
11732: CALL_OW 122
// if GetLives ( i ) < 650 then
11736: LD_VAR 0 1
11740: PPUSH
11741: CALL_OW 256
11745: PUSH
11746: LD_INT 650
11748: LESS
11749: IFFALSE 11765
// begin SetTag ( i , 2 ) ;
11751: LD_VAR 0 1
11755: PPUSH
11756: LD_INT 2
11758: PPUSH
11759: CALL_OW 109
// continue ;
11763: GO 11444
// end ; if b then
11765: LD_VAR 0 3
11769: IFFALSE 11795
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
11771: LD_VAR 0 1
11775: PPUSH
11776: LD_VAR 0 3
11780: PPUSH
11781: LD_VAR 0 1
11785: PPUSH
11786: CALL_OW 74
11790: PPUSH
11791: CALL_OW 130
// end ; 2 :
11795: GO 11883
11797: LD_INT 2
11799: DOUBLE
11800: EQUAL
11801: IFTRUE 11805
11803: GO 11882
11805: POP
// begin if GetLives ( i ) = 1000 then
11806: LD_VAR 0 1
11810: PPUSH
11811: CALL_OW 256
11815: PUSH
11816: LD_INT 1000
11818: EQUAL
11819: IFFALSE 11835
// begin SetTag ( i , 1 ) ;
11821: LD_VAR 0 1
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 109
// continue ;
11833: GO 11444
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11835: LD_VAR 0 1
11839: PPUSH
11840: LD_INT 84
11842: PPUSH
11843: LD_INT 93
11845: PPUSH
11846: CALL_OW 297
11850: PUSH
11851: LD_INT 6
11853: GREATER
11854: IFFALSE 11880
// begin ComMoveXY ( i , 84 , 93 ) ;
11856: LD_VAR 0 1
11860: PPUSH
11861: LD_INT 84
11863: PPUSH
11864: LD_INT 93
11866: PPUSH
11867: CALL_OW 111
// AddComHold ( i ) ;
11871: LD_VAR 0 1
11875: PPUSH
11876: CALL_OW 200
// end ; end ; end ;
11880: GO 11883
11882: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
11883: LD_VAR 0 1
11887: PPUSH
11888: LD_INT 12
11890: PPUSH
11891: CALL_OW 308
11895: NOT
11896: PUSH
11897: LD_VAR 0 1
11901: PPUSH
11902: CALL_OW 310
11906: NOT
11907: AND
11908: IFFALSE 11925
// ComMoveXY ( i , 91 , 95 ) ;
11910: LD_VAR 0 1
11914: PPUSH
11915: LD_INT 91
11917: PPUSH
11918: LD_INT 95
11920: PPUSH
11921: CALL_OW 111
// end ;
11925: GO 11444
11927: POP
11928: POP
// end ; end ;
11929: PPOPN 8
11931: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
11932: LD_INT 0
11934: PPUSH
11935: PPUSH
11936: PPUSH
11937: PPUSH
11938: PPUSH
11939: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
11940: LD_ADDR_VAR 0 3
11944: PUSH
11945: DOUBLE
11946: LD_INT 1
11948: DEC
11949: ST_TO_ADDR
11950: LD_INT 3
11952: PUSH
11953: LD_INT 4
11955: PUSH
11956: LD_INT 5
11958: PUSH
11959: LD_INT 6
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: PUSH
11968: LD_OWVAR 67
11972: ARRAY
11973: PUSH
11974: LD_VAR 0 1
11978: PLUS
11979: PUSH
11980: FOR_TO
11981: IFFALSE 12298
// begin uc_side := 6 ;
11983: LD_ADDR_OWVAR 20
11987: PUSH
11988: LD_INT 6
11990: ST_TO_ADDR
// uc_nation := 3 ;
11991: LD_ADDR_OWVAR 21
11995: PUSH
11996: LD_INT 3
11998: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11999: LD_ADDR_VAR 0 6
12003: PUSH
12004: LD_INT 21
12006: PUSH
12007: LD_INT 22
12009: PUSH
12010: LD_INT 23
12012: PUSH
12013: LD_INT 24
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 1
12024: PPUSH
12025: LD_INT 4
12027: PPUSH
12028: CALL_OW 12
12032: ARRAY
12033: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12034: LD_ADDR_VAR 0 7
12038: PUSH
12039: LD_INT 42
12041: PUSH
12042: LD_INT 44
12044: PUSH
12045: LD_INT 43
12047: PUSH
12048: LD_INT 46
12050: PUSH
12051: LD_INT 45
12053: PUSH
12054: LD_INT 46
12056: PUSH
12057: LD_INT 45
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: LD_OWVAR 67
12073: PUSH
12074: LD_INT 0
12076: PPUSH
12077: LD_INT 3
12079: PPUSH
12080: CALL_OW 12
12084: PLUS
12085: ARRAY
12086: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12087: LD_VAR 0 6
12091: PUSH
12092: LD_INT 21
12094: PUSH
12095: LD_INT 22
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: IN
12102: PUSH
12103: LD_VAR 0 7
12107: PUSH
12108: LD_INT 46
12110: EQUAL
12111: AND
12112: IFFALSE 12141
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12114: LD_ADDR_VAR 0 7
12118: PUSH
12119: LD_INT 44
12121: PUSH
12122: LD_INT 45
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 1
12131: PPUSH
12132: LD_INT 2
12134: PPUSH
12135: CALL_OW 12
12139: ARRAY
12140: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
12141: LD_OWVAR 1
12145: PUSH
12146: LD_INT 31500
12148: PUSH
12149: LD_INT 27300
12151: PUSH
12152: LD_INT 23100
12154: PUSH
12155: LD_INT 18900
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: PUSH
12164: LD_OWVAR 67
12168: ARRAY
12169: LESS
12170: IFFALSE 12203
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
12172: LD_ADDR_VAR 0 7
12176: PUSH
12177: LD_INT 44
12179: PUSH
12180: LD_INT 43
12182: PUSH
12183: LD_INT 42
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 1
12193: PPUSH
12194: LD_INT 3
12196: PPUSH
12197: CALL_OW 12
12201: ARRAY
12202: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
12203: LD_VAR 0 6
12207: PPUSH
12208: LD_INT 1
12210: PPUSH
12211: LD_INT 3
12213: PPUSH
12214: LD_VAR 0 7
12218: PPUSH
12219: LD_INT 90
12221: PPUSH
12222: CALL 44491 0 5
// un := CreateVehicle ;
12226: LD_ADDR_VAR 0 4
12230: PUSH
12231: CALL_OW 45
12235: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
12236: LD_VAR 0 4
12240: PPUSH
12241: LD_INT 140
12243: PPUSH
12244: LD_INT 146
12246: PPUSH
12247: LD_INT 0
12249: PPUSH
12250: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
12254: LD_VAR 0 4
12258: PPUSH
12259: LD_INT 131
12261: PPUSH
12262: LD_INT 128
12264: PPUSH
12265: CALL_OW 111
// wait ( 0 0$3 ) ;
12269: LD_INT 105
12271: PPUSH
12272: CALL_OW 67
// tmp := Join ( tmp , un ) ;
12276: LD_ADDR_VAR 0 5
12280: PUSH
12281: LD_VAR 0 5
12285: PPUSH
12286: LD_VAR 0 4
12290: PPUSH
12291: CALL 76944 0 2
12295: ST_TO_ADDR
// end ;
12296: GO 11980
12298: POP
12299: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
12300: LD_ADDR_EXP 36
12304: PUSH
12305: LD_EXP 36
12309: PPUSH
12310: LD_VAR 0 5
12314: PPUSH
12315: CALL 76981 0 2
12319: ST_TO_ADDR
// end ;
12320: LD_VAR 0 2
12324: RET
// every 0 0$3 trigger russianAttackers do
12325: LD_EXP 36
12329: IFFALSE 12412
12331: GO 12333
12333: DISABLE
// begin enable ;
12334: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
12335: LD_EXP 36
12339: PPUSH
12340: LD_INT 126
12342: PUSH
12343: LD_INT 108
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 107
12352: PUSH
12353: LD_INT 85
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 82
12362: PUSH
12363: LD_INT 62
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 73
12372: PUSH
12373: LD_INT 46
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 62
12382: PUSH
12383: LD_INT 31
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 52
12392: PUSH
12393: LD_INT 17
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: PPUSH
12408: CALL 79548 0 2
// end ; end_of_file
12412: END
// on SailEvent ( event ) do begin if event = 1 then
12413: LD_VAR 0 1
12417: PUSH
12418: LD_INT 1
12420: EQUAL
12421: IFFALSE 12436
// PrepareRussianAttack ( Difficulty + 3 ) ;
12423: LD_OWVAR 67
12427: PUSH
12428: LD_INT 3
12430: PLUS
12431: PPUSH
12432: CALL 11932 0 1
// end ;
12436: PPOPN 1
12438: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
12439: LD_INT 0
12441: PPUSH
12442: PPUSH
12443: PPUSH
12444: PPUSH
12445: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: CALL 35187 0 1
// if un = JMM then
12455: LD_VAR 0 1
12459: PUSH
12460: LD_EXP 14
12464: EQUAL
12465: IFFALSE 12474
// YouLost ( JMM ) ;
12467: LD_STRING JMM
12469: PPUSH
12470: CALL_OW 104
// if un = Sikorski then
12474: LD_VAR 0 1
12478: PUSH
12479: LD_EXP 28
12483: EQUAL
12484: IFFALSE 12510
// if sikorskiStatus = 0 then
12486: LD_EXP 9
12490: PUSH
12491: LD_INT 0
12493: EQUAL
12494: IFFALSE 12502
// SikorskiKilledInAction else
12496: CALL 17866 0 0
12500: GO 12510
// sikorskiIsKilled := true ;
12502: LD_ADDR_EXP 10
12506: PUSH
12507: LD_INT 1
12509: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12510: LD_VAR 0 1
12514: PPUSH
12515: CALL_OW 255
12519: PUSH
12520: LD_INT 1
12522: EQUAL
12523: PUSH
12524: LD_VAR 0 1
12528: PPUSH
12529: CALL_OW 248
12533: PUSH
12534: LD_INT 1
12536: EQUAL
12537: AND
12538: PUSH
12539: LD_VAR 0 1
12543: PPUSH
12544: CALL_OW 266
12548: PUSH
12549: LD_INT 0
12551: PUSH
12552: LD_INT 1
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: IN
12559: AND
12560: IFFALSE 12569
// YouLost ( Destroyed ) ;
12562: LD_STRING Destroyed
12564: PPUSH
12565: CALL_OW 104
// if un = ruDep then
12569: LD_VAR 0 1
12573: PUSH
12574: LD_INT 28
12576: EQUAL
12577: IFFALSE 12711
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
12579: LD_ADDR_VAR 0 2
12583: PUSH
12584: LD_INT 22
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 25
12596: PUSH
12597: LD_INT 1
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 69
12612: PUSH
12613: FOR_IN
12614: IFFALSE 12709
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
12616: LD_ADDR_VAR 0 3
12620: PUSH
12621: LD_INT 11
12623: PPUSH
12624: LD_INT 81
12626: PUSH
12627: LD_INT 3
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PPUSH
12634: CALL_OW 70
12638: PPUSH
12639: LD_VAR 0 2
12643: PPUSH
12644: CALL_OW 74
12648: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
12649: LD_VAR 0 2
12653: PPUSH
12654: CALL_OW 310
12658: PPUSH
12659: CALL_OW 266
12663: PUSH
12664: LD_INT 32
12666: EQUAL
12667: IFFALSE 12707
// begin ComExitBuilding ( i ) ;
12669: LD_VAR 0 2
12673: PPUSH
12674: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
12678: LD_VAR 0 2
12682: PPUSH
12683: LD_VAR 0 3
12687: PPUSH
12688: CALL_OW 250
12692: PPUSH
12693: LD_VAR 0 3
12697: PPUSH
12698: CALL_OW 251
12702: PPUSH
12703: CALL_OW 174
// end ; end ;
12707: GO 12613
12709: POP
12710: POP
// end ; if un in ruMobile then
12711: LD_VAR 0 1
12715: PUSH
12716: LD_EXP 34
12720: IN
12721: IFFALSE 12739
// ruMobile := ruMobile diff un ;
12723: LD_ADDR_EXP 34
12727: PUSH
12728: LD_EXP 34
12732: PUSH
12733: LD_VAR 0 1
12737: DIFF
12738: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12739: LD_VAR 0 1
12743: PPUSH
12744: CALL_OW 255
12748: PUSH
12749: LD_INT 3
12751: EQUAL
12752: IFFALSE 13387
// begin if GetType ( un ) = unit_building then
12754: LD_VAR 0 1
12758: PPUSH
12759: CALL_OW 247
12763: PUSH
12764: LD_INT 3
12766: EQUAL
12767: IFFALSE 12903
// begin btype := GetBType ( un ) ;
12769: LD_ADDR_VAR 0 6
12773: PUSH
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 266
12783: ST_TO_ADDR
// if btype = b_warehouse then
12784: LD_VAR 0 6
12788: PUSH
12789: LD_INT 1
12791: EQUAL
12792: IFFALSE 12802
// btype := b_depot ;
12794: LD_ADDR_VAR 0 6
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// if btype = b_barracks then
12802: LD_VAR 0 6
12806: PUSH
12807: LD_INT 5
12809: EQUAL
12810: IFFALSE 12820
// btype := b_armoury ;
12812: LD_ADDR_VAR 0 6
12816: PUSH
12817: LD_INT 4
12819: ST_TO_ADDR
// if btype = b_lab_full then
12820: LD_VAR 0 6
12824: PUSH
12825: LD_INT 8
12827: EQUAL
12828: IFFALSE 12838
// btype := b_lab ;
12830: LD_ADDR_VAR 0 6
12834: PUSH
12835: LD_INT 6
12837: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12838: LD_ADDR_EXP 35
12842: PUSH
12843: LD_EXP 35
12847: PPUSH
12848: LD_EXP 35
12852: PUSH
12853: LD_INT 1
12855: PLUS
12856: PPUSH
12857: LD_VAR 0 6
12861: PUSH
12862: LD_VAR 0 1
12866: PPUSH
12867: CALL_OW 250
12871: PUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 251
12881: PUSH
12882: LD_VAR 0 1
12886: PPUSH
12887: CALL_OW 254
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 1
12902: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12903: LD_VAR 0 1
12907: PPUSH
12908: CALL_OW 247
12912: PUSH
12913: LD_INT 2
12915: EQUAL
12916: IFFALSE 13191
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
12918: LD_VAR 0 1
12922: PPUSH
12923: CALL_OW 264
12927: PUSH
12928: LD_INT 52
12930: PUSH
12931: LD_INT 51
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: IN
12938: IFFALSE 12968
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
12940: LD_INT 29
12942: PPUSH
12943: LD_INT 22
12945: PPUSH
12946: LD_INT 1
12948: PPUSH
12949: LD_INT 3
12951: PPUSH
12952: LD_VAR 0 1
12956: PPUSH
12957: CALL_OW 264
12961: PPUSH
12962: CALL_OW 185
// end else
12966: GO 13191
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12968: LD_ADDR_VAR 0 4
12972: PUSH
12973: LD_INT 21
12975: PUSH
12976: LD_INT 22
12978: PUSH
12979: LD_INT 23
12981: PUSH
12982: LD_INT 24
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: PUSH
12991: LD_INT 1
12993: PPUSH
12994: LD_INT 4
12996: PPUSH
12997: CALL_OW 12
13001: ARRAY
13002: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13003: LD_ADDR_VAR 0 5
13007: PUSH
13008: LD_INT 42
13010: PUSH
13011: LD_INT 44
13013: PUSH
13014: LD_INT 43
13016: PUSH
13017: LD_INT 46
13019: PUSH
13020: LD_INT 45
13022: PUSH
13023: LD_INT 46
13025: PUSH
13026: LD_INT 45
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: LD_OWVAR 67
13042: PUSH
13043: LD_INT 0
13045: PPUSH
13046: LD_INT 3
13048: PPUSH
13049: CALL_OW 12
13053: PLUS
13054: ARRAY
13055: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13056: LD_VAR 0 4
13060: PUSH
13061: LD_INT 21
13063: PUSH
13064: LD_INT 22
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: IN
13071: PUSH
13072: LD_VAR 0 5
13076: PUSH
13077: LD_INT 46
13079: EQUAL
13080: AND
13081: IFFALSE 13110
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13083: LD_ADDR_VAR 0 5
13087: PUSH
13088: LD_INT 44
13090: PUSH
13091: LD_INT 45
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: LD_INT 1
13100: PPUSH
13101: LD_INT 2
13103: PPUSH
13104: CALL_OW 12
13108: ARRAY
13109: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
13110: LD_OWVAR 1
13114: PUSH
13115: LD_INT 31500
13117: PUSH
13118: LD_INT 27300
13120: PUSH
13121: LD_INT 23100
13123: PUSH
13124: LD_INT 21000
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: PUSH
13133: LD_OWVAR 67
13137: ARRAY
13138: LESS
13139: IFFALSE 13168
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13141: LD_ADDR_VAR 0 5
13145: PUSH
13146: LD_INT 44
13148: PUSH
13149: LD_INT 43
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 1
13158: PPUSH
13159: LD_INT 2
13161: PPUSH
13162: CALL_OW 12
13166: ARRAY
13167: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
13168: LD_INT 29
13170: PPUSH
13171: LD_VAR 0 4
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 1
13181: PPUSH
13182: LD_VAR 0 5
13186: PPUSH
13187: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
13191: LD_VAR 0 1
13195: PPUSH
13196: CALL_OW 257
13200: PUSH
13201: LD_INT 3
13203: EQUAL
13204: IFFALSE 13387
// begin killMechCounter := Inc ( killMechCounter ) ;
13206: LD_ADDR_EXP 12
13210: PUSH
13211: LD_EXP 12
13215: PPUSH
13216: CALL 78305 0 1
13220: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
13221: LD_EXP 33
13225: PUSH
13226: LD_INT 0
13228: EQUAL
13229: PUSH
13230: LD_INT 29
13232: PPUSH
13233: CALL_OW 302
13237: NOT
13238: OR
13239: IFFALSE 13243
// exit ;
13241: GO 13387
// ruMechCounter := Dec ( ruMechCounter ) ;
13243: LD_ADDR_EXP 33
13247: PUSH
13248: LD_EXP 33
13252: PPUSH
13253: CALL 78327 0 1
13257: ST_TO_ADDR
// uc_side := 3 ;
13258: LD_ADDR_OWVAR 20
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// uc_nation := 3 ;
13266: LD_ADDR_OWVAR 21
13270: PUSH
13271: LD_INT 3
13273: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
13274: LD_INT 0
13276: PPUSH
13277: LD_INT 5
13279: PUSH
13280: LD_INT 6
13282: PUSH
13283: LD_INT 7
13285: PUSH
13286: LD_INT 8
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: PUSH
13295: LD_OWVAR 67
13299: ARRAY
13300: PPUSH
13301: CALL_OW 383
// tmp := CreateHuman ;
13305: LD_ADDR_VAR 0 3
13309: PUSH
13310: CALL_OW 44
13314: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 145
13322: PPUSH
13323: LD_INT 133
13325: PPUSH
13326: LD_INT 0
13328: PPUSH
13329: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
13333: LD_VAR 0 3
13337: PPUSH
13338: LD_INT 29
13340: PPUSH
13341: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13345: LD_INT 35
13347: PPUSH
13348: CALL_OW 67
// if not HasTask ( tmp ) then
13352: LD_VAR 0 3
13356: PPUSH
13357: CALL_OW 314
13361: NOT
13362: IFFALSE 13376
// ComEnterUnit ( tmp , ruFac ) ;
13364: LD_VAR 0 3
13368: PPUSH
13369: LD_INT 29
13371: PPUSH
13372: CALL_OW 120
// until IsInUnit ( tmp ) ;
13376: LD_VAR 0 3
13380: PPUSH
13381: CALL_OW 310
13385: IFFALSE 13345
// end ; end ; end ;
13387: PPOPN 6
13389: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
13390: LD_VAR 0 1
13394: PPUSH
13395: CALL_OW 255
13399: PUSH
13400: LD_INT 4
13402: EQUAL
13403: IFFALSE 13420
// ComMoveXY ( driver , 40 , 47 ) ;
13405: LD_VAR 0 1
13409: PPUSH
13410: LD_INT 40
13412: PPUSH
13413: LD_INT 47
13415: PPUSH
13416: CALL_OW 111
// if GetSide ( driver ) = 3 then
13420: LD_VAR 0 1
13424: PPUSH
13425: CALL_OW 255
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: IFFALSE 13647
// begin ComMoveXY ( driver , 90 , 97 ) ;
13435: LD_VAR 0 1
13439: PPUSH
13440: LD_INT 90
13442: PPUSH
13443: LD_INT 97
13445: PPUSH
13446: CALL_OW 111
// if IsOk ( ruFac ) then
13450: LD_INT 29
13452: PPUSH
13453: CALL_OW 302
13457: IFFALSE 13571
// begin repeat wait ( 0 0$1 ) ;
13459: LD_INT 35
13461: PPUSH
13462: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
13466: LD_INT 29
13468: PPUSH
13469: CALL_OW 313
13473: PUSH
13474: LD_INT 6
13476: LESS
13477: PUSH
13478: LD_VAR 0 1
13482: PPUSH
13483: CALL_OW 301
13487: OR
13488: IFFALSE 13459
// if IsDead ( driver ) then
13490: LD_VAR 0 1
13494: PPUSH
13495: CALL_OW 301
13499: IFFALSE 13503
// exit ;
13501: GO 13647
// repeat wait ( 0 0$10 ) ;
13503: LD_INT 350
13505: PPUSH
13506: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
13510: LD_VAR 0 1
13514: PPUSH
13515: CALL_OW 314
13519: NOT
13520: PUSH
13521: LD_INT 29
13523: PPUSH
13524: CALL_OW 313
13528: PUSH
13529: LD_INT 6
13531: LESS
13532: AND
13533: IFFALSE 13547
// ComEnterUnit ( driver , ruFac ) ;
13535: LD_VAR 0 1
13539: PPUSH
13540: LD_INT 29
13542: PPUSH
13543: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
13547: LD_VAR 0 1
13551: PPUSH
13552: CALL_OW 301
13556: PUSH
13557: LD_VAR 0 1
13561: PPUSH
13562: CALL_OW 310
13566: OR
13567: IFFALSE 13503
// end else
13569: GO 13647
// begin ComMoveXY ( driver , 142 , 148 ) ;
13571: LD_VAR 0 1
13575: PPUSH
13576: LD_INT 142
13578: PPUSH
13579: LD_INT 148
13581: PPUSH
13582: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13586: LD_INT 35
13588: PPUSH
13589: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
13593: LD_VAR 0 1
13597: PPUSH
13598: CALL_OW 301
13602: PUSH
13603: LD_VAR 0 1
13607: PPUSH
13608: LD_INT 142
13610: PPUSH
13611: LD_INT 148
13613: PPUSH
13614: CALL_OW 307
13618: OR
13619: IFFALSE 13586
// if IsAt ( driver , 142 , 148 ) then
13621: LD_VAR 0 1
13625: PPUSH
13626: LD_INT 142
13628: PPUSH
13629: LD_INT 148
13631: PPUSH
13632: CALL_OW 307
13636: IFFALSE 13647
// RemoveUnit ( driver ) ;
13638: LD_VAR 0 1
13642: PPUSH
13643: CALL_OW 64
// end ; end ; end ;
13647: PPOPN 4
13649: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
13650: LD_VAR 0 2
13654: PPUSH
13655: CALL_OW 257
13659: PUSH
13660: LD_INT 3
13662: EQUAL
13663: PUSH
13664: LD_VAR 0 1
13668: PPUSH
13669: CALL_OW 255
13673: PUSH
13674: LD_INT 3
13676: EQUAL
13677: AND
13678: PUSH
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 29
13686: EQUAL
13687: AND
13688: IFFALSE 13702
// SetLives ( un , 1000 ) ;
13690: LD_VAR 0 2
13694: PPUSH
13695: LD_INT 1000
13697: PPUSH
13698: CALL_OW 234
// end ;
13702: PPOPN 2
13704: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
13705: LD_INT 0
13707: PPUSH
13708: PPUSH
// begin if GetSide ( b ) = 3 then
13709: LD_VAR 0 1
13713: PPUSH
13714: CALL_OW 255
13718: PUSH
13719: LD_INT 3
13721: EQUAL
13722: IFFALSE 13953
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 266
13733: PUSH
13734: LD_INT 32
13736: PUSH
13737: LD_INT 5
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: IN
13744: IFFALSE 13953
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13746: LD_ADDR_VAR 0 4
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_INT 3
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 50
13763: PUSH
13764: EMPTY
13765: LIST
13766: PUSH
13767: LD_INT 30
13769: PUSH
13770: LD_INT 32
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 58
13779: PUSH
13780: EMPTY
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: PPUSH
13789: CALL_OW 69
13793: ST_TO_ADDR
// if tmp then
13794: LD_VAR 0 4
13798: IFFALSE 13820
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_VAR 0 4
13809: PUSH
13810: LD_INT 1
13812: ARRAY
13813: PPUSH
13814: CALL_OW 120
// exit ;
13818: GO 13953
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13820: LD_ADDR_VAR 0 4
13824: PUSH
13825: LD_INT 22
13827: PUSH
13828: LD_INT 3
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 50
13837: PUSH
13838: EMPTY
13839: LIST
13840: PUSH
13841: LD_INT 2
13843: PUSH
13844: LD_INT 30
13846: PUSH
13847: LD_INT 4
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 30
13856: PUSH
13857: LD_INT 5
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: PPUSH
13874: CALL_OW 69
13878: ST_TO_ADDR
// if not tmp then
13879: LD_VAR 0 4
13883: NOT
13884: IFFALSE 13903
// begin ComMoveXY ( un , 92 , 99 ) ;
13886: LD_VAR 0 2
13890: PPUSH
13891: LD_INT 92
13893: PPUSH
13894: LD_INT 99
13896: PPUSH
13897: CALL_OW 111
// exit ;
13901: GO 13953
// end ; for i in tmp do
13903: LD_ADDR_VAR 0 3
13907: PUSH
13908: LD_VAR 0 4
13912: PUSH
13913: FOR_IN
13914: IFFALSE 13951
// if UnitsInside ( i ) < 6 then
13916: LD_VAR 0 3
13920: PPUSH
13921: CALL_OW 313
13925: PUSH
13926: LD_INT 6
13928: LESS
13929: IFFALSE 13949
// begin ComEnterUnit ( un , i ) ;
13931: LD_VAR 0 2
13935: PPUSH
13936: LD_VAR 0 3
13940: PPUSH
13941: CALL_OW 120
// exit ;
13945: POP
13946: POP
13947: GO 13953
// end ;
13949: GO 13913
13951: POP
13952: POP
// end ; end ; end ;
13953: PPOPN 4
13955: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 255
13965: PUSH
13966: LD_INT 3
13968: PUSH
13969: LD_INT 6
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: IN
13976: PUSH
13977: LD_VAR 0 1
13981: PPUSH
13982: CALL_OW 263
13986: PUSH
13987: LD_INT 3
13989: EQUAL
13990: AND
13991: PUSH
13992: LD_EXP 7
13996: NOT
13997: AND
13998: IFFALSE 14017
// begin seenComputer := true ;
14000: LD_ADDR_EXP 7
14004: PUSH
14005: LD_INT 1
14007: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14008: LD_VAR 0 1
14012: PPUSH
14013: CALL 17080 0 1
// end ; end ;
14017: PPOPN 1
14019: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14020: LD_INT 0
14022: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14023: LD_VAR 0 1
14027: PPUSH
14028: LD_VAR 0 2
14032: PPUSH
14033: CALL 35307 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14037: LD_VAR 0 1
14041: PPUSH
14042: CALL_OW 255
14046: PUSH
14047: LD_INT 3
14049: EQUAL
14050: PUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 263
14060: PUSH
14061: LD_INT 1
14063: EQUAL
14064: AND
14065: PUSH
14066: LD_VAR 0 1
14070: PPUSH
14071: CALL_OW 264
14075: PUSH
14076: LD_INT 42
14078: PUSH
14079: LD_INT 43
14081: PUSH
14082: LD_INT 44
14084: PUSH
14085: LD_INT 46
14087: PUSH
14088: LD_INT 45
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: IN
14098: AND
14099: IFFALSE 14129
// begin SetTag ( vehicle , 300 ) ;
14101: LD_VAR 0 1
14105: PPUSH
14106: LD_INT 300
14108: PPUSH
14109: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14113: LD_ADDR_EXP 34
14117: PUSH
14118: LD_EXP 34
14122: PUSH
14123: LD_VAR 0 1
14127: UNION
14128: ST_TO_ADDR
// end ; end ;
14129: PPOPN 3
14131: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
14132: LD_INT 0
14134: PPUSH
// begin if InArea ( x , y , ruCrates ) then
14135: LD_VAR 0 2
14139: PPUSH
14140: LD_VAR 0 3
14144: PPUSH
14145: LD_INT 13
14147: PPUSH
14148: CALL_OW 309
14152: IFFALSE 14283
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
14154: LD_ADDR_VAR 0 6
14158: PUSH
14159: LD_INT 22
14161: PUSH
14162: LD_INT 3
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 50
14171: PUSH
14172: EMPTY
14173: LIST
14174: PUSH
14175: LD_INT 34
14177: PUSH
14178: LD_INT 51
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PPUSH
14190: CALL_OW 69
14194: ST_TO_ADDR
// if not cargo then
14195: LD_VAR 0 6
14199: NOT
14200: IFFALSE 14204
// exit ;
14202: GO 14283
// wait ( 0 0$5 ) ;
14204: LD_INT 175
14206: PPUSH
14207: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
14211: LD_VAR 0 6
14215: PUSH
14216: LD_INT 1
14218: ARRAY
14219: PPUSH
14220: LD_INT 28
14222: PPUSH
14223: CALL_OW 296
14227: PUSH
14228: LD_INT 6
14230: LESS
14231: PUSH
14232: LD_VAR 0 6
14236: PUSH
14237: LD_INT 1
14239: ARRAY
14240: PPUSH
14241: CALL_OW 261
14245: PUSH
14246: LD_INT 50
14248: LESS
14249: AND
14250: IFFALSE 14264
// ComMoveUnit ( cargo , ruDep ) ;
14252: LD_VAR 0 6
14256: PPUSH
14257: LD_INT 28
14259: PPUSH
14260: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
14264: LD_VAR 0 6
14268: PPUSH
14269: LD_VAR 0 2
14273: PPUSH
14274: LD_VAR 0 3
14278: PPUSH
14279: CALL_OW 177
// end ; end ;
14283: PPOPN 6
14285: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
14286: LD_VAR 0 1
14290: PPUSH
14291: CALL_OW 264
14295: PUSH
14296: LD_INT 45
14298: EQUAL
14299: IFFALSE 14316
// captureRocketCounter := Inc ( captureRocketCounter ) ;
14301: LD_ADDR_EXP 11
14305: PUSH
14306: LD_EXP 11
14310: PPUSH
14311: CALL 78305 0 1
14315: ST_TO_ADDR
// end ;
14316: PPOPN 4
14318: END
// on BuildingComplete ( b ) do var i , tmp ;
14319: LD_INT 0
14321: PPUSH
14322: PPUSH
// begin if GetSide ( b ) = 3 then
14323: LD_VAR 0 1
14327: PPUSH
14328: CALL_OW 255
14332: PUSH
14333: LD_INT 3
14335: EQUAL
14336: IFFALSE 14575
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
14338: LD_ADDR_EXP 35
14342: PUSH
14343: LD_EXP 35
14347: PPUSH
14348: LD_INT 1
14350: PPUSH
14351: CALL_OW 3
14355: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 266
14365: PUSH
14366: LD_INT 4
14368: EQUAL
14369: IFFALSE 14380
// ComUpgrade ( b ) ;
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 266
14389: PUSH
14390: LD_INT 32
14392: PUSH
14393: LD_INT 33
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: IN
14400: IFFALSE 14575
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
14402: LD_VAR 0 1
14406: PPUSH
14407: LD_INT 46
14409: PUSH
14410: LD_INT 45
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 1
14419: PPUSH
14420: LD_INT 2
14422: PPUSH
14423: CALL_OW 12
14427: ARRAY
14428: PPUSH
14429: CALL_OW 208
// if GetBType ( b ) = b_bunker then
14433: LD_VAR 0 1
14437: PPUSH
14438: CALL_OW 266
14442: PUSH
14443: LD_INT 32
14445: EQUAL
14446: IFFALSE 14575
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
14448: LD_ADDR_VAR 0 3
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_INT 3
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: LD_INT 25
14465: PUSH
14466: LD_INT 1
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 120
14475: PUSH
14476: LD_INT 0
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 69
14492: ST_TO_ADDR
// if tmp then
14493: LD_VAR 0 3
14497: IFFALSE 14575
// for i in tmp do
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: LD_VAR 0 3
14508: PUSH
14509: FOR_IN
14510: IFFALSE 14573
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
14512: LD_VAR 0 2
14516: PPUSH
14517: CALL_OW 310
14521: NOT
14522: PUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: CALL_OW 310
14532: PPUSH
14533: CALL_OW 266
14537: PUSH
14538: LD_INT 32
14540: NONEQUAL
14541: OR
14542: IFFALSE 14571
// begin ComExit ( i ) ;
14544: LD_VAR 0 2
14548: PPUSH
14549: CALL 77342 0 1
// AddComEnterUnit ( i , b ) ;
14553: LD_VAR 0 2
14557: PPUSH
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 180
// exit ;
14567: POP
14568: POP
14569: GO 14575
// end ;
14571: GO 14509
14573: POP
14574: POP
// end ; end ; end ; end ; end_of_file
14575: PPOPN 3
14577: END
// export function Action ; var i , tmp , un , inUnit ; begin
14578: LD_INT 0
14580: PPUSH
14581: PPUSH
14582: PPUSH
14583: PPUSH
14584: PPUSH
// Video ( true ) ;
14585: LD_INT 1
14587: PPUSH
14588: CALL 76916 0 1
// invincibleMode := true ;
14592: LD_ADDR_EXP 5
14596: PUSH
14597: LD_INT 1
14599: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
14600: LD_INT 50
14602: PPUSH
14603: LD_INT 12
14605: PPUSH
14606: LD_INT 1
14608: PPUSH
14609: LD_INT 56
14611: NEG
14612: PPUSH
14613: CALL 76830 0 4
// CenterOnXY ( 50 , 12 ) ;
14617: LD_INT 50
14619: PPUSH
14620: LD_INT 12
14622: PPUSH
14623: CALL_OW 84
// wait ( 0 0$3 ) ;
14627: LD_INT 105
14629: PPUSH
14630: CALL_OW 67
// PrepareStartRussianAttack ;
14634: CALL 9699 0 0
// CenterOnXY ( 66 , 47 ) ;
14638: LD_INT 66
14640: PPUSH
14641: LD_INT 47
14643: PPUSH
14644: CALL_OW 84
// wait ( 0 0$5 ) ;
14648: LD_INT 175
14650: PPUSH
14651: CALL_OW 67
// case gammaCommander of 1 :
14655: LD_EXP 13
14659: PUSH
14660: LD_INT 1
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14683
14668: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
14669: LD_EXP 16
14673: PPUSH
14674: LD_STRING D1-Don-1
14676: PPUSH
14677: CALL_OW 88
14681: GO 14730
14683: LD_INT 2
14685: DOUBLE
14686: EQUAL
14687: IFTRUE 14691
14689: GO 14706
14691: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
14692: LD_EXP 15
14696: PPUSH
14697: LD_STRING D1-Brown-1
14699: PPUSH
14700: CALL_OW 88
14704: GO 14730
14706: LD_INT 3
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14729
14714: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
14715: LD_EXP 25
14719: PPUSH
14720: LD_STRING D1-VanH-1
14722: PPUSH
14723: CALL_OW 88
14727: GO 14730
14729: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
14730: LD_ADDR_VAR 0 3
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 33
14747: PUSH
14748: LD_INT 2
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 61
14757: PUSH
14758: EMPTY
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: LIST
14765: PPUSH
14766: CALL_OW 69
14770: ST_TO_ADDR
// if tmp then
14771: LD_VAR 0 3
14775: IFFALSE 14792
// ComAgressiveMove ( tmp , 74 , 44 ) ;
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_INT 74
14784: PPUSH
14785: LD_INT 44
14787: PPUSH
14788: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14792: LD_ADDR_VAR 0 3
14796: PUSH
14797: LD_INT 22
14799: PUSH
14800: LD_INT 1
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 25
14809: PUSH
14810: LD_INT 1
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PPUSH
14821: CALL_OW 69
14825: PUSH
14826: LD_EXP 16
14830: PUSH
14831: LD_EXP 15
14835: PUSH
14836: LD_EXP 25
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: DIFF
14846: ST_TO_ADDR
// if tmp then
14847: LD_VAR 0 3
14851: IFFALSE 14929
// for i in tmp do
14853: LD_ADDR_VAR 0 2
14857: PUSH
14858: LD_VAR 0 3
14862: PUSH
14863: FOR_IN
14864: IFFALSE 14927
// begin inUnit := IsInUnit ( i ) ;
14866: LD_ADDR_VAR 0 5
14870: PUSH
14871: LD_VAR 0 2
14875: PPUSH
14876: CALL_OW 310
14880: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14881: LD_VAR 0 5
14885: PUSH
14886: LD_VAR 0 5
14890: PPUSH
14891: CALL_OW 266
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 31
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: IN
14906: AND
14907: IFFALSE 14925
// tmp := tmp diff i ;
14909: LD_ADDR_VAR 0 3
14913: PUSH
14914: LD_VAR 0 3
14918: PUSH
14919: LD_VAR 0 2
14923: DIFF
14924: ST_TO_ADDR
// end ;
14925: GO 14863
14927: POP
14928: POP
// if tmp then
14929: LD_VAR 0 3
14933: IFFALSE 15023
// begin ComExitAll ( tmp ) ;
14935: LD_VAR 0 3
14939: PPUSH
14940: CALL 77425 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
14944: LD_VAR 0 3
14948: PPUSH
14949: LD_INT 74
14951: PPUSH
14952: LD_INT 44
14954: PPUSH
14955: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_INT 22
14966: PUSH
14967: LD_INT 1
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 25
14976: PUSH
14977: LD_INT 4
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 69
14992: ST_TO_ADDR
// if tmp then
14993: LD_VAR 0 3
14997: IFFALSE 15023
// begin ComExitAll ( tmp ) ;
14999: LD_VAR 0 3
15003: PPUSH
15004: CALL 77425 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15008: LD_VAR 0 3
15012: PPUSH
15013: LD_INT 66
15015: PPUSH
15016: LD_INT 28
15018: PPUSH
15019: CALL_OW 171
// end ; end ; game_speed := 4 ;
15023: LD_ADDR_OWVAR 65
15027: PUSH
15028: LD_INT 4
15030: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15031: LD_INT 70
15033: PPUSH
15034: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15038: LD_EXP 29
15042: PPUSH
15043: LD_STRING D1-Har-1
15045: PPUSH
15046: CALL_OW 94
// case gammaCommander of 1 :
15050: LD_EXP 13
15054: PUSH
15055: LD_INT 1
15057: DOUBLE
15058: EQUAL
15059: IFTRUE 15063
15061: GO 15078
15063: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15064: LD_EXP 16
15068: PPUSH
15069: LD_STRING D1-Don-2
15071: PPUSH
15072: CALL_OW 88
15076: GO 15125
15078: LD_INT 2
15080: DOUBLE
15081: EQUAL
15082: IFTRUE 15086
15084: GO 15101
15086: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15087: LD_EXP 15
15091: PPUSH
15092: LD_STRING D1-Brown-2
15094: PPUSH
15095: CALL_OW 88
15099: GO 15125
15101: LD_INT 3
15103: DOUBLE
15104: EQUAL
15105: IFTRUE 15109
15107: GO 15124
15109: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15110: LD_EXP 25
15114: PPUSH
15115: LD_STRING D1-VanH-2
15117: PPUSH
15118: CALL_OW 88
15122: GO 15125
15124: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15125: LD_EXP 29
15129: PPUSH
15130: LD_STRING D1-Har-2
15132: PPUSH
15133: CALL_OW 94
// invincibleMode := false ;
15137: LD_ADDR_EXP 5
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// Video ( false ) ;
15145: LD_INT 0
15147: PPUSH
15148: CALL 76916 0 1
// ChangeMissionObjectives ( M1 ) ;
15152: LD_STRING M1
15154: PPUSH
15155: CALL_OW 337
// SaveForQuickRestart ;
15159: CALL_OW 22
// wait ( 2 2$30 ) ;
15163: LD_INT 5250
15165: PPUSH
15166: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15170: LD_INT 1
15172: PPUSH
15173: CALL 11932 0 1
// wait ( 4 4$30 ) ;
15177: LD_INT 9450
15179: PPUSH
15180: CALL_OW 67
// if Difficulty > 1 then
15184: LD_OWVAR 67
15188: PUSH
15189: LD_INT 1
15191: GREATER
15192: IFFALSE 15201
// PrepareRussianAttack ( 2 ) ;
15194: LD_INT 2
15196: PPUSH
15197: CALL 11932 0 1
// if Difficulty > 2 then
15201: LD_OWVAR 67
15205: PUSH
15206: LD_INT 2
15208: GREATER
15209: IFFALSE 15368
// begin for i := 1 to 4 do
15211: LD_ADDR_VAR 0 2
15215: PUSH
15216: DOUBLE
15217: LD_INT 1
15219: DEC
15220: ST_TO_ADDR
15221: LD_INT 4
15223: PUSH
15224: FOR_TO
15225: IFFALSE 15310
// begin uc_side := 6 ;
15227: LD_ADDR_OWVAR 20
15231: PUSH
15232: LD_INT 6
15234: ST_TO_ADDR
// uc_nation := 3 ;
15235: LD_ADDR_OWVAR 21
15239: PUSH
15240: LD_INT 3
15242: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15243: LD_INT 0
15245: PPUSH
15246: LD_INT 7
15248: PPUSH
15249: CALL_OW 381
// un := CreateHuman ;
15253: LD_ADDR_VAR 0 4
15257: PUSH
15258: CALL_OW 44
15262: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15263: LD_VAR 0 4
15267: PPUSH
15268: LD_INT 122
15270: PPUSH
15271: LD_INT 89
15273: PPUSH
15274: LD_INT 3
15276: PPUSH
15277: LD_INT 0
15279: PPUSH
15280: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
15284: LD_VAR 0 4
15288: PPUSH
15289: LD_INT 88
15291: PPUSH
15292: LD_INT 42
15294: PPUSH
15295: CALL_OW 114
// AddComHold ( un ) ;
15299: LD_VAR 0 4
15303: PPUSH
15304: CALL_OW 200
// end ;
15308: GO 15224
15310: POP
15311: POP
// PrepareScientist ( false , 6 ) ;
15312: LD_INT 0
15314: PPUSH
15315: LD_INT 6
15317: PPUSH
15318: CALL_OW 384
// un := CreateHuman ;
15322: LD_ADDR_VAR 0 4
15326: PUSH
15327: CALL_OW 44
15331: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15332: LD_VAR 0 4
15336: PPUSH
15337: LD_INT 122
15339: PPUSH
15340: LD_INT 89
15342: PPUSH
15343: LD_INT 3
15345: PPUSH
15346: LD_INT 0
15348: PPUSH
15349: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
15353: LD_VAR 0 4
15357: PPUSH
15358: LD_INT 91
15360: PPUSH
15361: LD_INT 48
15363: PPUSH
15364: CALL_OW 111
// end ; end ;
15368: LD_VAR 0 1
15372: RET
// every 0 0$1 trigger invincibleMode do var i ;
15373: LD_EXP 5
15377: IFFALSE 15456
15379: GO 15381
15381: DISABLE
15382: LD_INT 0
15384: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15385: LD_ADDR_VAR 0 1
15389: PUSH
15390: LD_INT 22
15392: PUSH
15393: LD_INT 1
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 21
15402: PUSH
15403: LD_INT 1
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 3
15412: PUSH
15413: LD_INT 24
15415: PUSH
15416: LD_INT 1000
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: FOR_IN
15438: IFFALSE 15454
// SetLives ( i , 1000 ) ;
15440: LD_VAR 0 1
15444: PPUSH
15445: LD_INT 1000
15447: PPUSH
15448: CALL_OW 234
15452: GO 15437
15454: POP
15455: POP
// end ;
15456: PPOPN 1
15458: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
15459: LD_OWVAR 1
15463: PUSH
15464: LD_INT 14700
15466: GREATER
15467: IFFALSE 17077
15469: GO 15471
15471: DISABLE
15472: LD_INT 0
15474: PPUSH
15475: PPUSH
// begin PrepareSupportFromDelta ;
15476: CALL 4049 0 0
// deltaSupport := true ;
15480: LD_ADDR_EXP 6
15484: PUSH
15485: LD_INT 1
15487: ST_TO_ADDR
// dialog := false ;
15488: LD_ADDR_VAR 0 1
15492: PUSH
15493: LD_INT 0
15495: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15496: LD_EXP 21
15500: PPUSH
15501: CALL_OW 302
15505: IFFALSE 15527
// dialog := Say ( Gladstone , D2-Glad-1 ) else
15507: LD_ADDR_VAR 0 1
15511: PUSH
15512: LD_EXP 21
15516: PPUSH
15517: LD_STRING D2-Glad-1
15519: PPUSH
15520: CALL_OW 88
15524: ST_TO_ADDR
15525: GO 15609
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15527: LD_ADDR_VAR 0 1
15531: PUSH
15532: LD_INT 22
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 120
15544: PUSH
15545: LD_INT 107
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 21
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 23
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: PUSH
15583: LD_EXP 27
15587: PUSH
15588: LD_EXP 26
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: DIFF
15597: PPUSH
15598: LD_STRING D2-Sol1-1
15600: PPUSH
15601: LD_STRING D2-FSol1-1
15603: PPUSH
15604: CALL 19245 0 3
15608: ST_TO_ADDR
// if dialog then
15609: LD_VAR 0 1
15613: IFFALSE 15714
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
15615: LD_EXP 16
15619: PPUSH
15620: CALL_OW 302
15624: PUSH
15625: LD_EXP 13
15629: PUSH
15630: LD_INT 1
15632: EQUAL
15633: AND
15634: IFFALSE 15648
// Say ( Donaldson , D2-Don-1 ) ;
15636: LD_EXP 16
15640: PPUSH
15641: LD_STRING D2-Don-1
15643: PPUSH
15644: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15648: LD_EXP 15
15652: PPUSH
15653: CALL_OW 302
15657: PUSH
15658: LD_EXP 13
15662: PUSH
15663: LD_INT 2
15665: EQUAL
15666: AND
15667: IFFALSE 15681
// Say ( Brown , D2-Brown-1 ) ;
15669: LD_EXP 15
15673: PPUSH
15674: LD_STRING D2-Brown-1
15676: PPUSH
15677: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15681: LD_EXP 25
15685: PPUSH
15686: CALL_OW 302
15690: PUSH
15691: LD_EXP 13
15695: PUSH
15696: LD_INT 3
15698: EQUAL
15699: AND
15700: IFFALSE 15714
// Say ( Houten , D2-VanH-1 ) ;
15702: LD_EXP 25
15706: PPUSH
15707: LD_STRING D2-VanH-1
15709: PPUSH
15710: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
15714: LD_INT 3
15716: PPUSH
15717: CALL 11932 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
15721: LD_STRING 07_time
15723: PPUSH
15724: LD_INT 18900
15726: PPUSH
15727: CALL_OW 30
15731: PUSH
15732: LD_INT 3
15734: DIV
15735: PPUSH
15736: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
15740: LD_INT 34
15742: PPUSH
15743: LD_INT 1
15745: PPUSH
15746: CALL_OW 321
15750: PUSH
15751: LD_INT 2
15753: EQUAL
15754: IFFALSE 15763
// SetAchievement ( ACH_HEAVYGUN ) ;
15756: LD_STRING ACH_HEAVYGUN
15758: PPUSH
15759: CALL_OW 543
// PrepareMacmillanSquad ;
15763: CALL 4823 0 0
// wait ( 0 0$1 ) ;
15767: LD_INT 35
15769: PPUSH
15770: CALL_OW 67
// DialogueOn ;
15774: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
15778: LD_EXP 14
15782: PPUSH
15783: CALL_OW 87
// dwait ( 0 0$2 ) ;
15787: LD_INT 70
15789: PPUSH
15790: CALL_OW 68
// DialogueOff ;
15794: CALL_OW 7
// wait ( 0 0$10 ) ;
15798: LD_INT 350
15800: PPUSH
15801: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
15805: LD_INT 1
15807: PPUSH
15808: CALL_OW 427
// p := 0 ;
15812: LD_ADDR_VAR 0 2
15816: PUSH
15817: LD_INT 0
15819: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15820: LD_INT 35
15822: PPUSH
15823: CALL_OW 67
// p := Inc ( p ) ;
15827: LD_ADDR_VAR 0 2
15831: PUSH
15832: LD_VAR 0 2
15836: PPUSH
15837: CALL 78305 0 1
15841: ST_TO_ADDR
// if p > 120 then
15842: LD_VAR 0 2
15846: PUSH
15847: LD_INT 120
15849: GREATER
15850: IFFALSE 15854
// exit ;
15852: GO 17077
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
15854: LD_EXP 14
15858: PPUSH
15859: LD_INT 15
15861: PPUSH
15862: CALL_OW 308
15866: PUSH
15867: LD_EXP 14
15871: PPUSH
15872: CALL_OW 310
15876: PPUSH
15877: LD_INT 15
15879: PPUSH
15880: CALL_OW 308
15884: OR
15885: PUSH
15886: LD_EXP 14
15890: PPUSH
15891: LD_EXP 27
15895: PPUSH
15896: CALL_OW 296
15900: PUSH
15901: LD_INT 10
15903: LESS
15904: OR
15905: PUSH
15906: LD_INT 22
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: LD_INT 120
15921: PUSH
15922: LD_INT 106
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 120
15931: PUSH
15932: LD_INT 107
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 91
15946: PUSH
15947: LD_EXP 14
15951: PUSH
15952: LD_INT 12
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: LIST
15964: PPUSH
15965: CALL_OW 69
15969: OR
15970: IFFALSE 15820
// DialogueOn ;
15972: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
15976: LD_EXP 14
15980: PPUSH
15981: LD_STRING D3-JMM-1
15983: PPUSH
15984: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15988: LD_EXP 16
15992: PPUSH
15993: CALL_OW 302
15997: PUSH
15998: LD_EXP 13
16002: PUSH
16003: LD_INT 1
16005: EQUAL
16006: AND
16007: IFFALSE 16023
// Say ( Donaldson , D3-Don-1 ) else
16009: LD_EXP 16
16013: PPUSH
16014: LD_STRING D3-Don-1
16016: PPUSH
16017: CALL_OW 88
16021: GO 16119
// begin if gammaCommander = 1 then
16023: LD_EXP 13
16027: PUSH
16028: LD_INT 1
16030: EQUAL
16031: IFFALSE 16119
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16033: LD_INT 22
16035: PUSH
16036: LD_INT 1
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 21
16045: PUSH
16046: LD_INT 1
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 23
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 120
16065: PUSH
16066: LD_INT 106
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 26
16075: PUSH
16076: LD_INT 1
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: PPUSH
16090: CALL_OW 69
16094: PPUSH
16095: LD_STRING D3-Sol1-1
16097: PPUSH
16098: LD_STRING 
16100: PPUSH
16101: CALL 19245 0 3
16105: IFFALSE 16119
// Say ( JMM , D3-JMM-2 ) ;
16107: LD_EXP 14
16111: PPUSH
16112: LD_STRING D3-JMM-2
16114: PPUSH
16115: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16119: LD_EXP 15
16123: PPUSH
16124: CALL_OW 302
16128: PUSH
16129: LD_EXP 13
16133: PUSH
16134: LD_INT 2
16136: EQUAL
16137: AND
16138: IFFALSE 16154
// Say ( Brown , D3-Brown-1 ) else
16140: LD_EXP 15
16144: PPUSH
16145: LD_STRING D3-Brown-1
16147: PPUSH
16148: CALL_OW 88
16152: GO 16250
// begin if gammaCommander = 2 then
16154: LD_EXP 13
16158: PUSH
16159: LD_INT 2
16161: EQUAL
16162: IFFALSE 16250
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16164: LD_INT 22
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 21
16176: PUSH
16177: LD_INT 1
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 23
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 120
16196: PUSH
16197: LD_INT 106
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 26
16206: PUSH
16207: LD_INT 1
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: PPUSH
16226: LD_STRING D3-Sol1-1a
16228: PPUSH
16229: LD_STRING 
16231: PPUSH
16232: CALL 19245 0 3
16236: IFFALSE 16250
// Say ( JMM , D3-JMM-2 ) ;
16238: LD_EXP 14
16242: PPUSH
16243: LD_STRING D3-JMM-2
16245: PPUSH
16246: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16250: LD_EXP 25
16254: PPUSH
16255: CALL_OW 302
16259: PUSH
16260: LD_EXP 13
16264: PUSH
16265: LD_INT 3
16267: EQUAL
16268: AND
16269: IFFALSE 16285
// Say ( Houten , D3-VanH-1 ) else
16271: LD_EXP 25
16275: PPUSH
16276: LD_STRING D3-VanH-1
16278: PPUSH
16279: CALL_OW 88
16283: GO 16381
// begin if gammaCommander = 3 then
16285: LD_EXP 13
16289: PUSH
16290: LD_INT 3
16292: EQUAL
16293: IFFALSE 16381
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
16295: LD_INT 22
16297: PUSH
16298: LD_INT 1
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 21
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 23
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 120
16327: PUSH
16328: LD_INT 106
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 26
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: PPUSH
16352: CALL_OW 69
16356: PPUSH
16357: LD_STRING D3-Sol1-1b
16359: PPUSH
16360: LD_STRING 
16362: PPUSH
16363: CALL 19245 0 3
16367: IFFALSE 16381
// Say ( JMM , D3-JMM-2 ) ;
16369: LD_EXP 14
16373: PPUSH
16374: LD_STRING D3-JMM-2
16376: PPUSH
16377: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
16381: LD_EXP 27
16385: PPUSH
16386: CALL_OW 302
16390: IFFALSE 16418
// begin Say ( Joan , D3a-Joan-1 ) ;
16392: LD_EXP 27
16396: PPUSH
16397: LD_STRING D3a-Joan-1
16399: PPUSH
16400: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
16404: LD_EXP 14
16408: PPUSH
16409: LD_STRING D3a-JMM-1
16411: PPUSH
16412: CALL_OW 88
// end else
16416: GO 16852
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16418: LD_STRING 06_JoanStatus_1
16420: PPUSH
16421: LD_INT 0
16423: PPUSH
16424: CALL_OW 30
16428: PUSH
16429: LD_INT 1
16431: EQUAL
16432: IFFALSE 16852
// begin Say ( JMM , D3b-JMM-1 ) ;
16434: LD_EXP 14
16438: PPUSH
16439: LD_STRING D3b-JMM-1
16441: PPUSH
16442: CALL_OW 88
// dialog := false ;
16446: LD_ADDR_VAR 0 1
16450: PUSH
16451: LD_INT 0
16453: ST_TO_ADDR
// if gammaCommander = 1 then
16454: LD_EXP 13
16458: PUSH
16459: LD_INT 1
16461: EQUAL
16462: IFFALSE 16573
// if IsOK ( Donaldson ) then
16464: LD_EXP 16
16468: PPUSH
16469: CALL_OW 302
16473: IFFALSE 16495
// dialog := Say ( Donaldson , D3b-Don-1 ) else
16475: LD_ADDR_VAR 0 1
16479: PUSH
16480: LD_EXP 16
16484: PPUSH
16485: LD_STRING D3b-Don-1
16487: PPUSH
16488: CALL_OW 88
16492: ST_TO_ADDR
16493: GO 16573
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16495: LD_ADDR_VAR 0 1
16499: PUSH
16500: LD_INT 22
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 21
16512: PUSH
16513: LD_INT 1
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 23
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 120
16532: PUSH
16533: LD_INT 106
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 26
16542: PUSH
16543: LD_INT 1
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: PPUSH
16557: CALL_OW 69
16561: PPUSH
16562: LD_STRING D3b-Sol1-1
16564: PPUSH
16565: LD_STRING 
16567: PPUSH
16568: CALL 19245 0 3
16572: ST_TO_ADDR
// if gammaCommander = 2 then
16573: LD_EXP 13
16577: PUSH
16578: LD_INT 2
16580: EQUAL
16581: IFFALSE 16692
// if IsOk ( Brown ) then
16583: LD_EXP 15
16587: PPUSH
16588: CALL_OW 302
16592: IFFALSE 16614
// dialog := Say ( Brown , D3b-Brown-1 ) else
16594: LD_ADDR_VAR 0 1
16598: PUSH
16599: LD_EXP 15
16603: PPUSH
16604: LD_STRING D3b-Brown-1
16606: PPUSH
16607: CALL_OW 88
16611: ST_TO_ADDR
16612: GO 16692
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16614: LD_ADDR_VAR 0 1
16618: PUSH
16619: LD_INT 22
16621: PUSH
16622: LD_INT 1
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 21
16631: PUSH
16632: LD_INT 1
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 23
16641: PUSH
16642: LD_INT 1
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 120
16651: PUSH
16652: LD_INT 106
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 26
16661: PUSH
16662: LD_INT 1
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: PPUSH
16681: LD_STRING D3b-Sol1-1
16683: PPUSH
16684: LD_STRING 
16686: PPUSH
16687: CALL 19245 0 3
16691: ST_TO_ADDR
// if gammaCommander = 3 then
16692: LD_EXP 13
16696: PUSH
16697: LD_INT 3
16699: EQUAL
16700: IFFALSE 16811
// if IsOk ( Houten ) then
16702: LD_EXP 25
16706: PPUSH
16707: CALL_OW 302
16711: IFFALSE 16733
// dialog := Say ( Houten , D3b-VanH-1 ) else
16713: LD_ADDR_VAR 0 1
16717: PUSH
16718: LD_EXP 25
16722: PPUSH
16723: LD_STRING D3b-VanH-1
16725: PPUSH
16726: CALL_OW 88
16730: ST_TO_ADDR
16731: GO 16811
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16733: LD_ADDR_VAR 0 1
16737: PUSH
16738: LD_INT 22
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 21
16750: PUSH
16751: LD_INT 1
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 23
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 120
16770: PUSH
16771: LD_INT 106
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 26
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PPUSH
16795: CALL_OW 69
16799: PPUSH
16800: LD_STRING D3b-Sol1-1
16802: PPUSH
16803: LD_STRING 
16805: PPUSH
16806: CALL 19245 0 3
16810: ST_TO_ADDR
// if dialog then
16811: LD_VAR 0 1
16815: IFFALSE 16852
// begin Say ( JMM , D3b-JMM-2 ) ;
16817: LD_EXP 14
16821: PPUSH
16822: LD_STRING D3b-JMM-2
16824: PPUSH
16825: CALL_OW 88
// if IsOK ( Lisa ) then
16829: LD_EXP 19
16833: PPUSH
16834: CALL_OW 302
16838: IFFALSE 16852
// Say ( Lisa , D3b-Lisa-2 ) ;
16840: LD_EXP 19
16844: PPUSH
16845: LD_STRING D3b-Lisa-2
16847: PPUSH
16848: CALL_OW 88
// end ; end ; end ; if not seenComputer then
16852: LD_EXP 7
16856: NOT
16857: IFFALSE 16865
// begin DialogueOff ;
16859: CALL_OW 7
// exit ;
16863: GO 17077
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16865: LD_INT 22
16867: PUSH
16868: LD_INT 1
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 21
16877: PUSH
16878: LD_INT 1
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 23
16887: PUSH
16888: LD_INT 1
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: LD_INT 120
16900: PUSH
16901: LD_INT 106
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 120
16910: PUSH
16911: LD_INT 107
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 26
16925: PUSH
16926: LD_INT 1
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: PPUSH
16940: CALL_OW 69
16944: PPUSH
16945: LD_STRING DCa-Sol1-1
16947: PPUSH
16948: LD_STRING 
16950: PPUSH
16951: CALL 19245 0 3
16955: IFFALSE 16969
// Say ( JMM , DCb-JMM-1 ) ;
16957: LD_EXP 14
16961: PPUSH
16962: LD_STRING DCb-JMM-1
16964: PPUSH
16965: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
16969: LD_INT 22
16971: PUSH
16972: LD_INT 1
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 21
16981: PUSH
16982: LD_INT 1
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 23
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 2
17001: PUSH
17002: LD_INT 120
17004: PUSH
17005: LD_INT 106
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 120
17014: PUSH
17015: LD_INT 107
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 26
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: PPUSH
17049: LD_STRING DCb-Sol1-1
17051: PPUSH
17052: LD_STRING 
17054: PPUSH
17055: CALL 19245 0 3
17059: IFFALSE 17073
// Say ( JMM , DCb-JMM-2 ) ;
17061: LD_EXP 14
17065: PPUSH
17066: LD_STRING DCb-JMM-2
17068: PPUSH
17069: CALL_OW 88
// DialogueOff ;
17073: CALL_OW 7
// end ;
17077: PPOPN 2
17079: END
// export function DialogSeenComputer ( un ) ; begin
17080: LD_INT 0
17082: PPUSH
// if jmmArrival then
17083: LD_EXP 8
17087: IFFALSE 17091
// exit ;
17089: GO 17157
// CenterOnUnits ( un ) ;
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17100: LD_INT 22
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: LD_INT 120
17115: PUSH
17116: LD_INT 106
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 120
17125: PUSH
17126: LD_INT 107
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PPUSH
17142: CALL_OW 69
17146: PPUSH
17147: LD_STRING DC-Sol1-1
17149: PPUSH
17150: LD_STRING DC-FSol1-1
17152: PPUSH
17153: CALL 19245 0 3
// end ;
17157: LD_VAR 0 2
17161: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17162: LD_EXP 8
17166: PUSH
17167: LD_OWVAR 1
17171: PUSH
17172: LD_INT 48300
17174: GREATEREQUAL
17175: AND
17176: PUSH
17177: LD_EXP 14
17181: PPUSH
17182: CALL_OW 302
17186: AND
17187: IFFALSE 17650
17189: GO 17191
17191: DISABLE
// begin wait ( 2 2$00 ) ;
17192: LD_INT 4200
17194: PPUSH
17195: CALL_OW 67
// DialogueOn ;
17199: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17203: LD_EXP 30
17207: PPUSH
17208: LD_STRING D4-Pow-1
17210: PPUSH
17211: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17215: LD_EXP 14
17219: PPUSH
17220: LD_STRING D4-JMM-1
17222: PPUSH
17223: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17227: LD_EXP 30
17231: PPUSH
17232: LD_STRING D4-Pow-2
17234: PPUSH
17235: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17239: LD_EXP 14
17243: PPUSH
17244: LD_STRING D4-JMM-2
17246: PPUSH
17247: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17251: LD_EXP 30
17255: PPUSH
17256: LD_STRING D4-Pow-3
17258: PPUSH
17259: CALL_OW 94
// DialogueOff ;
17263: CALL_OW 7
// wait ( 1 1$00 ) ;
17267: LD_INT 2100
17269: PPUSH
17270: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
17274: LD_INT 1
17276: PPUSH
17277: CALL_OW 427
// wait ( 7 7$30 ) ;
17281: LD_INT 15750
17283: PPUSH
17284: CALL_OW 67
// DialogueOn ;
17288: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
17292: LD_EXP 30
17296: PPUSH
17297: LD_STRING D4a-Pow-1
17299: PPUSH
17300: CALL_OW 94
// DialogueOff ;
17304: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
17308: LD_INT 1
17310: PPUSH
17311: CALL_OW 427
// SikorskiCounter ;
17315: CALL 19029 0 0
// PrepareSikorsky ;
17319: CALL 6191 0 0
// CenterNowOnUnits ( Sikorski ) ;
17323: LD_EXP 28
17327: PPUSH
17328: CALL_OW 87
// DialogueOn ;
17332: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
17336: LD_EXP 28
17340: PPUSH
17341: LD_STRING D5-Sik-1
17343: PPUSH
17344: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 then
17348: LD_INT 11
17350: PPUSH
17351: LD_INT 22
17353: PUSH
17354: LD_INT 1
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 70
17365: PUSH
17366: LD_INT 1
17368: GREATER
17369: IFFALSE 17421
// begin Say ( JMM , D5-JMM-1 ) ;
17371: LD_EXP 14
17375: PPUSH
17376: LD_STRING D5-JMM-1
17378: PPUSH
17379: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
17383: LD_EXP 28
17387: PPUSH
17388: LD_STRING D7a-Sik-1
17390: PPUSH
17391: CALL_OW 88
// DialogueOff ;
17395: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17399: LD_STRING M2
17401: PPUSH
17402: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17406: LD_INT 1
17408: PPUSH
17409: CALL_OW 427
// SikorskiAttack ;
17413: CALL 7539 0 0
// exit ;
17417: GO 17650
// end else
17419: GO 17466
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
17421: LD_INT 15
17423: PPUSH
17424: LD_INT 81
17426: PUSH
17427: LD_INT 1
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 70
17438: IFFALSE 17454
// Say ( JMM , D5-JMM-1b ) else
17440: LD_EXP 14
17444: PPUSH
17445: LD_STRING D5-JMM-1b
17447: PPUSH
17448: CALL_OW 88
17452: GO 17466
// Say ( JMM , D5-JMM-1a ) ;
17454: LD_EXP 14
17458: PPUSH
17459: LD_STRING D5-JMM-1a
17461: PPUSH
17462: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
17466: LD_EXP 28
17470: PPUSH
17471: LD_STRING D5-Sik-2
17473: PPUSH
17474: CALL_OW 88
// case Query ( QSikorski ) of 1 :
17478: LD_STRING QSikorski
17480: PPUSH
17481: CALL_OW 97
17485: PUSH
17486: LD_INT 1
17488: DOUBLE
17489: EQUAL
17490: IFTRUE 17494
17492: GO 17517
17494: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
17495: LD_EXP 28
17499: PPUSH
17500: LD_STRING D5a-Sik-1
17502: PPUSH
17503: CALL_OW 88
// sikorskiWait := 1 1$00 ;
17507: LD_ADDR_EXP 4
17511: PUSH
17512: LD_INT 2100
17514: ST_TO_ADDR
// end ; 2 :
17515: GO 17604
17517: LD_INT 2
17519: DOUBLE
17520: EQUAL
17521: IFTRUE 17525
17523: GO 17548
17525: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
17526: LD_EXP 28
17530: PPUSH
17531: LD_STRING D5b-Sik-1
17533: PPUSH
17534: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17538: LD_ADDR_EXP 4
17542: PUSH
17543: LD_INT 10500
17545: ST_TO_ADDR
// end ; 3 :
17546: GO 17604
17548: LD_INT 3
17550: DOUBLE
17551: EQUAL
17552: IFTRUE 17556
17554: GO 17603
17556: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
17557: LD_EXP 28
17561: PPUSH
17562: LD_STRING D5c-Sik-1
17564: PPUSH
17565: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
17569: LD_EXP 14
17573: PPUSH
17574: LD_STRING D5c-JMM-1
17576: PPUSH
17577: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
17581: LD_EXP 28
17585: PPUSH
17586: LD_STRING D5c-Sik-2
17588: PPUSH
17589: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17593: LD_ADDR_EXP 4
17597: PUSH
17598: LD_INT 10500
17600: ST_TO_ADDR
// end ; end ;
17601: GO 17604
17603: POP
// DialogueOff ;
17604: CALL_OW 7
// SikorskiWaitCounter ;
17608: CALL 19092 0 0
// DialogueOn ;
17612: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
17616: LD_EXP 28
17620: PPUSH
17621: LD_STRING D6-Sik-1
17623: PPUSH
17624: CALL_OW 88
// DialogueOff ;
17628: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17632: LD_STRING M2
17634: PPUSH
17635: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17639: LD_INT 1
17641: PPUSH
17642: CALL_OW 427
// SikorskiAttack ;
17646: CALL 7539 0 0
// end ;
17650: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
17651: LD_INT 11
17653: PPUSH
17654: LD_INT 22
17656: PUSH
17657: LD_INT 4
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PPUSH
17664: CALL_OW 70
17668: PUSH
17669: LD_INT 2
17671: GREATER
17672: IFFALSE 17865
17674: GO 17676
17676: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
17677: LD_EXP 28
17681: PPUSH
17682: LD_STRING D7-Sik-1
17684: PPUSH
17685: CALL_OW 88
// wait ( 0 0$10 ) ;
17689: LD_INT 350
17691: PPUSH
17692: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
17696: LD_EXP 14
17700: PPUSH
17701: LD_INT 11
17703: PPUSH
17704: CALL_OW 308
17708: PUSH
17709: LD_EXP 14
17713: PPUSH
17714: CALL_OW 310
17718: PPUSH
17719: LD_INT 11
17721: PPUSH
17722: CALL_OW 308
17726: OR
17727: IFFALSE 17751
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17729: LD_EXP 28
17733: PPUSH
17734: LD_STRING D7a-Sik-1
17736: PPUSH
17737: CALL_OW 88
// sikorskiStatus := 1 ;
17741: LD_ADDR_EXP 9
17745: PUSH
17746: LD_INT 1
17748: ST_TO_ADDR
// end else
17749: GO 17771
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17751: LD_EXP 28
17755: PPUSH
17756: LD_STRING D7b-Sik-1
17758: PPUSH
17759: CALL_OW 88
// sikorskiStatus := 0 ;
17763: LD_ADDR_EXP 9
17767: PUSH
17768: LD_INT 0
17770: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
17771: LD_INT 1575
17773: PPUSH
17774: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
17778: LD_EXP 14
17782: PPUSH
17783: LD_INT 11
17785: PPUSH
17786: CALL_OW 308
17790: PUSH
17791: LD_EXP 14
17795: PPUSH
17796: CALL_OW 310
17800: PPUSH
17801: LD_INT 11
17803: PPUSH
17804: CALL_OW 308
17808: OR
17809: PUSH
17810: LD_EXP 14
17814: PPUSH
17815: CALL_OW 302
17819: NOT
17820: OR
17821: IFFALSE 17845
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17823: LD_EXP 28
17827: PPUSH
17828: LD_STRING D7a-Sik-1
17830: PPUSH
17831: CALL_OW 88
// sikorskiStatus := 1 ;
17835: LD_ADDR_EXP 9
17839: PUSH
17840: LD_INT 1
17842: ST_TO_ADDR
// end else
17843: GO 17865
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17845: LD_EXP 28
17849: PPUSH
17850: LD_STRING D7b-Sik-1
17852: PPUSH
17853: CALL_OW 88
// sikorskiStatus := 0 ;
17857: LD_ADDR_EXP 9
17861: PUSH
17862: LD_INT 0
17864: ST_TO_ADDR
// end ; end ;
17865: END
// export function SikorskiKilledInAction ; begin
17866: LD_INT 0
17868: PPUSH
// wait ( 0 0$2 ) ;
17869: LD_INT 70
17871: PPUSH
17872: CALL_OW 67
// DialogueOn ;
17876: CALL_OW 6
// dwait ( 0 0$1 ) ;
17880: LD_INT 35
17882: PPUSH
17883: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
17887: LD_EXP 30
17891: PPUSH
17892: LD_STRING D8b-Pow-1
17894: PPUSH
17895: CALL_OW 94
// YouLost ( Dismissed ) ;
17899: LD_STRING Dismissed
17901: PPUSH
17902: CALL_OW 104
// DialogueOff ;
17906: CALL_OW 7
// end ;
17910: LD_VAR 0 1
17914: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
17915: LD_EXP 8
17919: PUSH
17920: LD_INT 28
17922: PPUSH
17923: CALL_OW 301
17927: AND
17928: PUSH
17929: LD_EXP 32
17933: PPUSH
17934: CALL_OW 301
17938: AND
17939: PUSH
17940: LD_INT 22
17942: PUSH
17943: LD_INT 3
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 50
17952: PUSH
17953: EMPTY
17954: LIST
17955: PUSH
17956: LD_INT 30
17958: PUSH
17959: LD_INT 5
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: PPUSH
17971: CALL_OW 69
17975: PUSH
17976: LD_INT 0
17978: EQUAL
17979: AND
17980: IFFALSE 19026
17982: GO 17984
17984: DISABLE
17985: LD_INT 0
17987: PPUSH
17988: PPUSH
17989: PPUSH
// begin Video ( true ) ;
17990: LD_INT 1
17992: PPUSH
17993: CALL 76916 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
17997: LD_INT 104
17999: PPUSH
18000: LD_INT 108
18002: PPUSH
18003: LD_INT 1
18005: PPUSH
18006: LD_INT 36
18008: NEG
18009: PPUSH
18010: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18014: LD_INT 104
18016: PPUSH
18017: LD_INT 108
18019: PPUSH
18020: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18024: LD_ADDR_VAR 0 2
18028: PUSH
18029: LD_INT 22
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 21
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 3
18051: PUSH
18052: LD_INT 24
18054: PUSH
18055: LD_INT 249
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 69
18075: ST_TO_ADDR
// if tmp then
18076: LD_VAR 0 2
18080: IFFALSE 18111
// for i in tmp do
18082: LD_ADDR_VAR 0 1
18086: PUSH
18087: LD_VAR 0 2
18091: PUSH
18092: FOR_IN
18093: IFFALSE 18109
// SetLives ( i , 249 ) ;
18095: LD_VAR 0 1
18099: PPUSH
18100: LD_INT 249
18102: PPUSH
18103: CALL_OW 234
18107: GO 18092
18109: POP
18110: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18111: LD_ADDR_VAR 0 1
18115: PUSH
18116: LD_INT 22
18118: PUSH
18119: LD_INT 3
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 21
18128: PUSH
18129: LD_INT 1
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 69
18144: PUSH
18145: FOR_IN
18146: IFFALSE 18189
// begin ComExit ( i ) ;
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL 77342 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18157: LD_VAR 0 1
18161: PPUSH
18162: LD_INT 131
18164: PPUSH
18165: LD_INT 127
18167: PPUSH
18168: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18172: LD_VAR 0 1
18176: PPUSH
18177: LD_INT 141
18179: PPUSH
18180: LD_INT 147
18182: PPUSH
18183: CALL_OW 171
// end ;
18187: GO 18145
18189: POP
18190: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18191: LD_INT 81
18193: PUSH
18194: LD_INT 3
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 3
18203: PUSH
18204: LD_INT 21
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PPUSH
18222: CALL_OW 69
18226: PPUSH
18227: LD_INT 131
18229: PPUSH
18230: LD_INT 127
18232: PPUSH
18233: CALL_OW 174
// wait ( 0 0$08 ) ;
18237: LD_INT 280
18239: PPUSH
18240: CALL_OW 67
// DialogueOn ;
18244: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
18248: LD_EXP 9
18252: PUSH
18253: LD_INT 1
18255: EQUAL
18256: PUSH
18257: LD_EXP 28
18261: PPUSH
18262: CALL_OW 302
18266: AND
18267: IFFALSE 18281
// Say ( Sikorski , D9-Sik-1 ) ;
18269: LD_EXP 28
18273: PPUSH
18274: LD_STRING D9-Sik-1
18276: PPUSH
18277: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
18281: LD_INT 22
18283: PUSH
18284: LD_INT 4
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 69
18295: PUSH
18296: LD_INT 0
18298: EQUAL
18299: PUSH
18300: LD_EXP 3
18304: AND
18305: IFFALSE 18314
// SetAchievement ( ACH_BLITZKRIEG ) ;
18307: LD_STRING ACH_BLITZKRIEG
18309: PPUSH
18310: CALL_OW 543
// if tick <= 45 45$10 then
18314: LD_OWVAR 1
18318: PUSH
18319: LD_INT 94850
18321: LESSEQUAL
18322: IFFALSE 18338
// begin wait ( 3 ) ;
18324: LD_INT 3
18326: PPUSH
18327: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
18331: LD_STRING ACH_ASPEED_8
18333: PPUSH
18334: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
18338: LD_STRING med1
18340: PPUSH
18341: LD_INT 1
18343: PPUSH
18344: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
18348: LD_STRING med2
18350: PPUSH
18351: LD_INT 1
18353: PPUSH
18354: CALL_OW 101
// if sikorskiStatus = 1 then
18358: LD_EXP 9
18362: PUSH
18363: LD_INT 1
18365: EQUAL
18366: IFFALSE 18380
// AddMedal ( perfect , 1 ) else
18368: LD_STRING perfect
18370: PPUSH
18371: LD_INT 1
18373: PPUSH
18374: CALL_OW 101
18378: GO 18391
// AddMedal ( perfect , - 1 ) ;
18380: LD_STRING perfect
18382: PPUSH
18383: LD_INT 1
18385: NEG
18386: PPUSH
18387: CALL_OW 101
// if Difficulty >= 3 then
18391: LD_OWVAR 67
18395: PUSH
18396: LD_INT 3
18398: GREATEREQUAL
18399: IFFALSE 18411
// SetAchievementEX ( ACH_AMER , 8 ) ;
18401: LD_STRING ACH_AMER
18403: PPUSH
18404: LD_INT 8
18406: PPUSH
18407: CALL_OW 564
// GiveMedals ( Main ) ;
18411: LD_STRING Main
18413: PPUSH
18414: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18418: LD_INT 22
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 23
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 21
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: LIST
18452: PPUSH
18453: CALL_OW 69
18457: PPUSH
18458: CALL_OW 43
// prefix := 08_ ;
18462: LD_ADDR_VAR 0 3
18466: PUSH
18467: LD_STRING 08_
18469: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
18470: LD_EXP 14
18474: PPUSH
18475: LD_VAR 0 3
18479: PUSH
18480: LD_STRING JMM
18482: STR
18483: PPUSH
18484: CALL_OW 38
// if IsLive ( Brown ) then
18488: LD_EXP 15
18492: PPUSH
18493: CALL_OW 300
18497: IFFALSE 18517
// SaveCharacters ( Brown , prefix & Brown ) ;
18499: LD_EXP 15
18503: PPUSH
18504: LD_VAR 0 3
18508: PUSH
18509: LD_STRING Brown
18511: STR
18512: PPUSH
18513: CALL_OW 38
// if IsLive ( Donaldson ) then
18517: LD_EXP 16
18521: PPUSH
18522: CALL_OW 300
18526: IFFALSE 18546
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
18528: LD_EXP 16
18532: PPUSH
18533: LD_VAR 0 3
18537: PUSH
18538: LD_STRING Donaldson
18540: STR
18541: PPUSH
18542: CALL_OW 38
// if IsLive ( Bobby ) then
18546: LD_EXP 17
18550: PPUSH
18551: CALL_OW 300
18555: IFFALSE 18575
// SaveCharacters ( Bobby , prefix & Bobby ) ;
18557: LD_EXP 17
18561: PPUSH
18562: LD_VAR 0 3
18566: PUSH
18567: LD_STRING Bobby
18569: STR
18570: PPUSH
18571: CALL_OW 38
// if IsLive ( Cyrus ) then
18575: LD_EXP 18
18579: PPUSH
18580: CALL_OW 300
18584: IFFALSE 18604
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
18586: LD_EXP 18
18590: PPUSH
18591: LD_VAR 0 3
18595: PUSH
18596: LD_STRING Cyrus
18598: STR
18599: PPUSH
18600: CALL_OW 38
// if IsLive ( Lisa ) then
18604: LD_EXP 19
18608: PPUSH
18609: CALL_OW 300
18613: IFFALSE 18633
// SaveCharacters ( Lisa , prefix & Lisa ) ;
18615: LD_EXP 19
18619: PPUSH
18620: LD_VAR 0 3
18624: PUSH
18625: LD_STRING Lisa
18627: STR
18628: PPUSH
18629: CALL_OW 38
// if IsLive ( Frank ) then
18633: LD_EXP 20
18637: PPUSH
18638: CALL_OW 300
18642: IFFALSE 18662
// SaveCharacters ( Frank , prefix & Frank ) ;
18644: LD_EXP 20
18648: PPUSH
18649: LD_VAR 0 3
18653: PUSH
18654: LD_STRING Frank
18656: STR
18657: PPUSH
18658: CALL_OW 38
// if IsLive ( Gladstone ) then
18662: LD_EXP 21
18666: PPUSH
18667: CALL_OW 300
18671: IFFALSE 18691
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
18673: LD_EXP 21
18677: PPUSH
18678: LD_VAR 0 3
18682: PUSH
18683: LD_STRING Gladstone
18685: STR
18686: PPUSH
18687: CALL_OW 38
// if IsLive ( Kikuchi ) then
18691: LD_EXP 22
18695: PPUSH
18696: CALL_OW 300
18700: IFFALSE 18720
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
18702: LD_EXP 22
18706: PPUSH
18707: LD_VAR 0 3
18711: PUSH
18712: LD_STRING Kikuchi
18714: STR
18715: PPUSH
18716: CALL_OW 38
// if IsLive ( Denis ) then
18720: LD_EXP 26
18724: PPUSH
18725: CALL_OW 300
18729: IFFALSE 18749
// SaveCharacters ( Denis , prefix & Denis ) ;
18731: LD_EXP 26
18735: PPUSH
18736: LD_VAR 0 3
18740: PUSH
18741: LD_STRING Denis
18743: STR
18744: PPUSH
18745: CALL_OW 38
// if IsLive ( Joan ) then
18749: LD_EXP 27
18753: PPUSH
18754: CALL_OW 300
18758: IFFALSE 18780
// SaveCharacters ( Joan , prefix & Joan ) else
18760: LD_EXP 27
18764: PPUSH
18765: LD_VAR 0 3
18769: PUSH
18770: LD_STRING Joan
18772: STR
18773: PPUSH
18774: CALL_OW 38
18778: GO 18787
// DeleteCharacters ( Joan ) ;
18780: LD_STRING Joan
18782: PPUSH
18783: CALL_OW 40
// if IsLive ( Khatam ) then
18787: LD_EXP 23
18791: PPUSH
18792: CALL_OW 300
18796: IFFALSE 18816
// SaveCharacters ( Khatam , prefix & Khatam ) ;
18798: LD_EXP 23
18802: PPUSH
18803: LD_VAR 0 3
18807: PUSH
18808: LD_STRING Khatam
18810: STR
18811: PPUSH
18812: CALL_OW 38
// if IsLive ( Houten ) then
18816: LD_EXP 25
18820: PPUSH
18821: CALL_OW 300
18825: IFFALSE 18845
// SaveCharacters ( Houten , prefix & Houten ) ;
18827: LD_EXP 25
18831: PPUSH
18832: LD_VAR 0 3
18836: PUSH
18837: LD_STRING Houten
18839: STR
18840: PPUSH
18841: CALL_OW 38
// if IsLive ( Mike ) then
18845: LD_EXP 24
18849: PPUSH
18850: CALL_OW 300
18854: IFFALSE 18874
// SaveCharacters ( Mike , prefix & Mike ) ;
18856: LD_EXP 24
18860: PPUSH
18861: LD_VAR 0 3
18865: PUSH
18866: LD_STRING Mike
18868: STR
18869: PPUSH
18870: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
18874: LD_INT 22
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 21
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 23
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: PUSH
18914: LD_EXP 14
18918: PUSH
18919: LD_EXP 15
18923: PUSH
18924: LD_EXP 16
18928: PUSH
18929: LD_EXP 17
18933: PUSH
18934: LD_EXP 18
18938: PUSH
18939: LD_EXP 19
18943: PUSH
18944: LD_EXP 20
18948: PUSH
18949: LD_EXP 21
18953: PUSH
18954: LD_EXP 22
18958: PUSH
18959: LD_EXP 26
18963: PUSH
18964: LD_EXP 27
18968: PUSH
18969: LD_EXP 25
18973: PUSH
18974: LD_EXP 23
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: DIFF
18994: PPUSH
18995: LD_STRING 08_other_survivors
18997: PPUSH
18998: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19002: LD_INT 15
19004: PPUSH
19005: CALL 7013 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19009: LD_EXP 10
19013: NOT
19014: PPUSH
19015: LD_STRING 08_SikorskiStatus
19017: PPUSH
19018: CALL_OW 39
// YouWin ;
19022: CALL_OW 103
// end ; end_of_file
19026: PPOPN 3
19028: END
// export function SikorskiCounter ; begin
19029: LD_INT 0
19031: PPUSH
// repeat wait ( 0 0$1 ) ;
19032: LD_INT 35
19034: PPUSH
19035: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19039: LD_ADDR_OWVAR 47
19043: PUSH
19044: LD_STRING #Am08-2
19046: PUSH
19047: LD_EXP 3
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19056: LD_ADDR_EXP 3
19060: PUSH
19061: LD_EXP 3
19065: PUSH
19066: LD_INT 35
19068: MINUS
19069: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19070: LD_EXP 3
19074: PUSH
19075: LD_INT 0
19077: EQUAL
19078: IFFALSE 19032
// display_strings := [ ] ;
19080: LD_ADDR_OWVAR 47
19084: PUSH
19085: EMPTY
19086: ST_TO_ADDR
// end ;
19087: LD_VAR 0 1
19091: RET
// export function SikorskiWaitCounter ; begin
19092: LD_INT 0
19094: PPUSH
// repeat wait ( 0 0$1 ) ;
19095: LD_INT 35
19097: PPUSH
19098: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19102: LD_ADDR_OWVAR 47
19106: PUSH
19107: LD_STRING #Am08-1
19109: PUSH
19110: LD_EXP 4
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19119: LD_ADDR_EXP 4
19123: PUSH
19124: LD_EXP 4
19128: PUSH
19129: LD_INT 35
19131: MINUS
19132: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19133: LD_EXP 4
19137: PUSH
19138: LD_INT 0
19140: EQUAL
19141: IFFALSE 19095
// display_strings := [ ] ;
19143: LD_ADDR_OWVAR 47
19147: PUSH
19148: EMPTY
19149: ST_TO_ADDR
// end ; end_of_file
19150: LD_VAR 0 1
19154: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19155: LD_EXP 3
19159: IFFALSE 19199
19161: GO 19163
19163: DISABLE
// begin enable ;
19164: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19165: LD_INT 14
19167: PPUSH
19168: CALL_OW 435
19172: PUSH
19173: LD_INT 10
19175: LESS
19176: IFFALSE 19199
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19178: LD_INT 1
19180: PPUSH
19181: LD_INT 5
19183: PPUSH
19184: CALL_OW 12
19188: PPUSH
19189: LD_INT 14
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 55
// end ;
19199: END
// every 0 0$55 trigger sikorskiArriveCounter do
19200: LD_EXP 3
19204: IFFALSE 19244
19206: GO 19208
19208: DISABLE
// begin enable ;
19209: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
19210: LD_INT 13
19212: PPUSH
19213: CALL_OW 435
19217: PUSH
19218: LD_INT 10
19220: LESS
19221: IFFALSE 19244
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
19223: LD_INT 1
19225: PPUSH
19226: LD_INT 5
19228: PPUSH
19229: CALL_OW 12
19233: PPUSH
19234: LD_INT 13
19236: PPUSH
19237: LD_INT 1
19239: PPUSH
19240: CALL_OW 55
// end ; end_of_file
19244: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
19245: LD_INT 0
19247: PPUSH
19248: PPUSH
// if not units then
19249: LD_VAR 0 1
19253: NOT
19254: IFFALSE 19258
// exit ;
19256: GO 19383
// result := false ;
19258: LD_ADDR_VAR 0 4
19262: PUSH
19263: LD_INT 0
19265: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
19266: LD_ADDR_VAR 0 5
19270: PUSH
19271: LD_VAR 0 1
19275: PPUSH
19276: LD_INT 26
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 72
19290: ST_TO_ADDR
// if tmp then
19291: LD_VAR 0 5
19295: IFFALSE 19321
// result := Say ( tmp [ 1 ] , menDialog ) ;
19297: LD_ADDR_VAR 0 4
19301: PUSH
19302: LD_VAR 0 5
19306: PUSH
19307: LD_INT 1
19309: ARRAY
19310: PPUSH
19311: LD_VAR 0 2
19315: PPUSH
19316: CALL_OW 88
19320: ST_TO_ADDR
// if not result then
19321: LD_VAR 0 4
19325: NOT
19326: IFFALSE 19383
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
19328: LD_ADDR_VAR 0 5
19332: PUSH
19333: LD_VAR 0 1
19337: PPUSH
19338: LD_INT 26
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PPUSH
19348: CALL_OW 72
19352: ST_TO_ADDR
// if tmp then
19353: LD_VAR 0 5
19357: IFFALSE 19383
// result := Say ( tmp [ 1 ] , womenDialog ) ;
19359: LD_ADDR_VAR 0 4
19363: PUSH
19364: LD_VAR 0 5
19368: PUSH
19369: LD_INT 1
19371: ARRAY
19372: PPUSH
19373: LD_VAR 0 3
19377: PPUSH
19378: CALL_OW 88
19382: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
19383: LD_VAR 0 4
19387: RET
// every 0 0$1 do
19388: GO 19390
19390: DISABLE
// begin enable ;
19391: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19392: LD_STRING updateTimer(
19394: PUSH
19395: LD_OWVAR 1
19399: STR
19400: PUSH
19401: LD_STRING );
19403: STR
19404: PPUSH
19405: CALL_OW 559
// end ;
19409: END
// export function SOS_MapStart ( ) ; begin
19410: LD_INT 0
19412: PPUSH
// if streamModeActive then
19413: LD_EXP 38
19417: IFFALSE 19426
// DefineStreamItems ( true ) ;
19419: LD_INT 1
19421: PPUSH
19422: CALL 21230 0 1
// UpdateLuaVariables ( ) ;
19426: CALL 19443 0 0
// UpdateFactoryWaypoints ( ) ;
19430: CALL 34091 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19434: CALL 34348 0 0
// end ;
19438: LD_VAR 0 1
19442: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
19443: LD_INT 0
19445: PPUSH
// if not globalGameSaveCounter then
19446: LD_EXP 37
19450: NOT
19451: IFFALSE 19462
// ToLua ( setGameSaveCounter(0) ) else
19453: LD_STRING setGameSaveCounter(0)
19455: PPUSH
19456: CALL_OW 559
19460: GO 19494
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19462: LD_ADDR_EXP 37
19466: PUSH
19467: LD_EXP 37
19471: PPUSH
19472: CALL 78305 0 1
19476: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19477: LD_STRING setGameSaveCounter(
19479: PUSH
19480: LD_EXP 37
19484: STR
19485: PUSH
19486: LD_STRING )
19488: STR
19489: PPUSH
19490: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19494: LD_STRING setGameDifficulty(
19496: PUSH
19497: LD_OWVAR 67
19501: STR
19502: PUSH
19503: LD_STRING )
19505: STR
19506: PPUSH
19507: CALL_OW 559
// end ;
19511: LD_VAR 0 1
19515: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19516: LD_INT 0
19518: PPUSH
// if p2 = stream_mode then
19519: LD_VAR 0 2
19523: PUSH
19524: LD_INT 100
19526: EQUAL
19527: IFFALSE 20530
// begin if not StreamModeActive then
19529: LD_EXP 38
19533: NOT
19534: IFFALSE 19544
// StreamModeActive := true ;
19536: LD_ADDR_EXP 38
19540: PUSH
19541: LD_INT 1
19543: ST_TO_ADDR
// if p3 = 0 then
19544: LD_VAR 0 3
19548: PUSH
19549: LD_INT 0
19551: EQUAL
19552: IFFALSE 19558
// InitStreamMode ;
19554: CALL 20766 0 0
// if p3 = 1 then
19558: LD_VAR 0 3
19562: PUSH
19563: LD_INT 1
19565: EQUAL
19566: IFFALSE 19576
// sRocket := true ;
19568: LD_ADDR_EXP 43
19572: PUSH
19573: LD_INT 1
19575: ST_TO_ADDR
// if p3 = 2 then
19576: LD_VAR 0 3
19580: PUSH
19581: LD_INT 2
19583: EQUAL
19584: IFFALSE 19594
// sSpeed := true ;
19586: LD_ADDR_EXP 42
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// if p3 = 3 then
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 3
19601: EQUAL
19602: IFFALSE 19612
// sEngine := true ;
19604: LD_ADDR_EXP 44
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// if p3 = 4 then
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 4
19619: EQUAL
19620: IFFALSE 19630
// sSpec := true ;
19622: LD_ADDR_EXP 41
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// if p3 = 5 then
19630: LD_VAR 0 3
19634: PUSH
19635: LD_INT 5
19637: EQUAL
19638: IFFALSE 19648
// sLevel := true ;
19640: LD_ADDR_EXP 45
19644: PUSH
19645: LD_INT 1
19647: ST_TO_ADDR
// if p3 = 6 then
19648: LD_VAR 0 3
19652: PUSH
19653: LD_INT 6
19655: EQUAL
19656: IFFALSE 19666
// sArmoury := true ;
19658: LD_ADDR_EXP 46
19662: PUSH
19663: LD_INT 1
19665: ST_TO_ADDR
// if p3 = 7 then
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 7
19673: EQUAL
19674: IFFALSE 19684
// sRadar := true ;
19676: LD_ADDR_EXP 47
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// if p3 = 8 then
19684: LD_VAR 0 3
19688: PUSH
19689: LD_INT 8
19691: EQUAL
19692: IFFALSE 19702
// sBunker := true ;
19694: LD_ADDR_EXP 48
19698: PUSH
19699: LD_INT 1
19701: ST_TO_ADDR
// if p3 = 9 then
19702: LD_VAR 0 3
19706: PUSH
19707: LD_INT 9
19709: EQUAL
19710: IFFALSE 19720
// sHack := true ;
19712: LD_ADDR_EXP 49
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// if p3 = 10 then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 10
19727: EQUAL
19728: IFFALSE 19738
// sFire := true ;
19730: LD_ADDR_EXP 50
19734: PUSH
19735: LD_INT 1
19737: ST_TO_ADDR
// if p3 = 11 then
19738: LD_VAR 0 3
19742: PUSH
19743: LD_INT 11
19745: EQUAL
19746: IFFALSE 19756
// sRefresh := true ;
19748: LD_ADDR_EXP 51
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if p3 = 12 then
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 12
19763: EQUAL
19764: IFFALSE 19774
// sExp := true ;
19766: LD_ADDR_EXP 52
19770: PUSH
19771: LD_INT 1
19773: ST_TO_ADDR
// if p3 = 13 then
19774: LD_VAR 0 3
19778: PUSH
19779: LD_INT 13
19781: EQUAL
19782: IFFALSE 19792
// sDepot := true ;
19784: LD_ADDR_EXP 53
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// if p3 = 14 then
19792: LD_VAR 0 3
19796: PUSH
19797: LD_INT 14
19799: EQUAL
19800: IFFALSE 19810
// sFlag := true ;
19802: LD_ADDR_EXP 54
19806: PUSH
19807: LD_INT 1
19809: ST_TO_ADDR
// if p3 = 15 then
19810: LD_VAR 0 3
19814: PUSH
19815: LD_INT 15
19817: EQUAL
19818: IFFALSE 19828
// sKamikadze := true ;
19820: LD_ADDR_EXP 62
19824: PUSH
19825: LD_INT 1
19827: ST_TO_ADDR
// if p3 = 16 then
19828: LD_VAR 0 3
19832: PUSH
19833: LD_INT 16
19835: EQUAL
19836: IFFALSE 19846
// sTroll := true ;
19838: LD_ADDR_EXP 63
19842: PUSH
19843: LD_INT 1
19845: ST_TO_ADDR
// if p3 = 17 then
19846: LD_VAR 0 3
19850: PUSH
19851: LD_INT 17
19853: EQUAL
19854: IFFALSE 19864
// sSlow := true ;
19856: LD_ADDR_EXP 64
19860: PUSH
19861: LD_INT 1
19863: ST_TO_ADDR
// if p3 = 18 then
19864: LD_VAR 0 3
19868: PUSH
19869: LD_INT 18
19871: EQUAL
19872: IFFALSE 19882
// sLack := true ;
19874: LD_ADDR_EXP 65
19878: PUSH
19879: LD_INT 1
19881: ST_TO_ADDR
// if p3 = 19 then
19882: LD_VAR 0 3
19886: PUSH
19887: LD_INT 19
19889: EQUAL
19890: IFFALSE 19900
// sTank := true ;
19892: LD_ADDR_EXP 67
19896: PUSH
19897: LD_INT 1
19899: ST_TO_ADDR
// if p3 = 20 then
19900: LD_VAR 0 3
19904: PUSH
19905: LD_INT 20
19907: EQUAL
19908: IFFALSE 19918
// sRemote := true ;
19910: LD_ADDR_EXP 68
19914: PUSH
19915: LD_INT 1
19917: ST_TO_ADDR
// if p3 = 21 then
19918: LD_VAR 0 3
19922: PUSH
19923: LD_INT 21
19925: EQUAL
19926: IFFALSE 19936
// sPowell := true ;
19928: LD_ADDR_EXP 69
19932: PUSH
19933: LD_INT 1
19935: ST_TO_ADDR
// if p3 = 22 then
19936: LD_VAR 0 3
19940: PUSH
19941: LD_INT 22
19943: EQUAL
19944: IFFALSE 19954
// sTeleport := true ;
19946: LD_ADDR_EXP 72
19950: PUSH
19951: LD_INT 1
19953: ST_TO_ADDR
// if p3 = 23 then
19954: LD_VAR 0 3
19958: PUSH
19959: LD_INT 23
19961: EQUAL
19962: IFFALSE 19972
// sOilTower := true ;
19964: LD_ADDR_EXP 74
19968: PUSH
19969: LD_INT 1
19971: ST_TO_ADDR
// if p3 = 24 then
19972: LD_VAR 0 3
19976: PUSH
19977: LD_INT 24
19979: EQUAL
19980: IFFALSE 19990
// sShovel := true ;
19982: LD_ADDR_EXP 75
19986: PUSH
19987: LD_INT 1
19989: ST_TO_ADDR
// if p3 = 25 then
19990: LD_VAR 0 3
19994: PUSH
19995: LD_INT 25
19997: EQUAL
19998: IFFALSE 20008
// sSheik := true ;
20000: LD_ADDR_EXP 76
20004: PUSH
20005: LD_INT 1
20007: ST_TO_ADDR
// if p3 = 26 then
20008: LD_VAR 0 3
20012: PUSH
20013: LD_INT 26
20015: EQUAL
20016: IFFALSE 20026
// sEarthquake := true ;
20018: LD_ADDR_EXP 78
20022: PUSH
20023: LD_INT 1
20025: ST_TO_ADDR
// if p3 = 27 then
20026: LD_VAR 0 3
20030: PUSH
20031: LD_INT 27
20033: EQUAL
20034: IFFALSE 20044
// sAI := true ;
20036: LD_ADDR_EXP 79
20040: PUSH
20041: LD_INT 1
20043: ST_TO_ADDR
// if p3 = 28 then
20044: LD_VAR 0 3
20048: PUSH
20049: LD_INT 28
20051: EQUAL
20052: IFFALSE 20062
// sCargo := true ;
20054: LD_ADDR_EXP 82
20058: PUSH
20059: LD_INT 1
20061: ST_TO_ADDR
// if p3 = 29 then
20062: LD_VAR 0 3
20066: PUSH
20067: LD_INT 29
20069: EQUAL
20070: IFFALSE 20080
// sDLaser := true ;
20072: LD_ADDR_EXP 83
20076: PUSH
20077: LD_INT 1
20079: ST_TO_ADDR
// if p3 = 30 then
20080: LD_VAR 0 3
20084: PUSH
20085: LD_INT 30
20087: EQUAL
20088: IFFALSE 20098
// sExchange := true ;
20090: LD_ADDR_EXP 84
20094: PUSH
20095: LD_INT 1
20097: ST_TO_ADDR
// if p3 = 31 then
20098: LD_VAR 0 3
20102: PUSH
20103: LD_INT 31
20105: EQUAL
20106: IFFALSE 20116
// sFac := true ;
20108: LD_ADDR_EXP 85
20112: PUSH
20113: LD_INT 1
20115: ST_TO_ADDR
// if p3 = 32 then
20116: LD_VAR 0 3
20120: PUSH
20121: LD_INT 32
20123: EQUAL
20124: IFFALSE 20134
// sPower := true ;
20126: LD_ADDR_EXP 86
20130: PUSH
20131: LD_INT 1
20133: ST_TO_ADDR
// if p3 = 33 then
20134: LD_VAR 0 3
20138: PUSH
20139: LD_INT 33
20141: EQUAL
20142: IFFALSE 20152
// sRandom := true ;
20144: LD_ADDR_EXP 87
20148: PUSH
20149: LD_INT 1
20151: ST_TO_ADDR
// if p3 = 34 then
20152: LD_VAR 0 3
20156: PUSH
20157: LD_INT 34
20159: EQUAL
20160: IFFALSE 20170
// sShield := true ;
20162: LD_ADDR_EXP 88
20166: PUSH
20167: LD_INT 1
20169: ST_TO_ADDR
// if p3 = 35 then
20170: LD_VAR 0 3
20174: PUSH
20175: LD_INT 35
20177: EQUAL
20178: IFFALSE 20188
// sTime := true ;
20180: LD_ADDR_EXP 89
20184: PUSH
20185: LD_INT 1
20187: ST_TO_ADDR
// if p3 = 36 then
20188: LD_VAR 0 3
20192: PUSH
20193: LD_INT 36
20195: EQUAL
20196: IFFALSE 20206
// sTools := true ;
20198: LD_ADDR_EXP 90
20202: PUSH
20203: LD_INT 1
20205: ST_TO_ADDR
// if p3 = 101 then
20206: LD_VAR 0 3
20210: PUSH
20211: LD_INT 101
20213: EQUAL
20214: IFFALSE 20224
// sSold := true ;
20216: LD_ADDR_EXP 55
20220: PUSH
20221: LD_INT 1
20223: ST_TO_ADDR
// if p3 = 102 then
20224: LD_VAR 0 3
20228: PUSH
20229: LD_INT 102
20231: EQUAL
20232: IFFALSE 20242
// sDiff := true ;
20234: LD_ADDR_EXP 56
20238: PUSH
20239: LD_INT 1
20241: ST_TO_ADDR
// if p3 = 103 then
20242: LD_VAR 0 3
20246: PUSH
20247: LD_INT 103
20249: EQUAL
20250: IFFALSE 20260
// sFog := true ;
20252: LD_ADDR_EXP 59
20256: PUSH
20257: LD_INT 1
20259: ST_TO_ADDR
// if p3 = 104 then
20260: LD_VAR 0 3
20264: PUSH
20265: LD_INT 104
20267: EQUAL
20268: IFFALSE 20278
// sReset := true ;
20270: LD_ADDR_EXP 60
20274: PUSH
20275: LD_INT 1
20277: ST_TO_ADDR
// if p3 = 105 then
20278: LD_VAR 0 3
20282: PUSH
20283: LD_INT 105
20285: EQUAL
20286: IFFALSE 20296
// sSun := true ;
20288: LD_ADDR_EXP 61
20292: PUSH
20293: LD_INT 1
20295: ST_TO_ADDR
// if p3 = 106 then
20296: LD_VAR 0 3
20300: PUSH
20301: LD_INT 106
20303: EQUAL
20304: IFFALSE 20314
// sTiger := true ;
20306: LD_ADDR_EXP 57
20310: PUSH
20311: LD_INT 1
20313: ST_TO_ADDR
// if p3 = 107 then
20314: LD_VAR 0 3
20318: PUSH
20319: LD_INT 107
20321: EQUAL
20322: IFFALSE 20332
// sBomb := true ;
20324: LD_ADDR_EXP 58
20328: PUSH
20329: LD_INT 1
20331: ST_TO_ADDR
// if p3 = 108 then
20332: LD_VAR 0 3
20336: PUSH
20337: LD_INT 108
20339: EQUAL
20340: IFFALSE 20350
// sWound := true ;
20342: LD_ADDR_EXP 66
20346: PUSH
20347: LD_INT 1
20349: ST_TO_ADDR
// if p3 = 109 then
20350: LD_VAR 0 3
20354: PUSH
20355: LD_INT 109
20357: EQUAL
20358: IFFALSE 20368
// sBetray := true ;
20360: LD_ADDR_EXP 70
20364: PUSH
20365: LD_INT 1
20367: ST_TO_ADDR
// if p3 = 110 then
20368: LD_VAR 0 3
20372: PUSH
20373: LD_INT 110
20375: EQUAL
20376: IFFALSE 20386
// sContamin := true ;
20378: LD_ADDR_EXP 71
20382: PUSH
20383: LD_INT 1
20385: ST_TO_ADDR
// if p3 = 111 then
20386: LD_VAR 0 3
20390: PUSH
20391: LD_INT 111
20393: EQUAL
20394: IFFALSE 20404
// sOil := true ;
20396: LD_ADDR_EXP 73
20400: PUSH
20401: LD_INT 1
20403: ST_TO_ADDR
// if p3 = 112 then
20404: LD_VAR 0 3
20408: PUSH
20409: LD_INT 112
20411: EQUAL
20412: IFFALSE 20422
// sStu := true ;
20414: LD_ADDR_EXP 77
20418: PUSH
20419: LD_INT 1
20421: ST_TO_ADDR
// if p3 = 113 then
20422: LD_VAR 0 3
20426: PUSH
20427: LD_INT 113
20429: EQUAL
20430: IFFALSE 20440
// sBazooka := true ;
20432: LD_ADDR_EXP 80
20436: PUSH
20437: LD_INT 1
20439: ST_TO_ADDR
// if p3 = 114 then
20440: LD_VAR 0 3
20444: PUSH
20445: LD_INT 114
20447: EQUAL
20448: IFFALSE 20458
// sMortar := true ;
20450: LD_ADDR_EXP 81
20454: PUSH
20455: LD_INT 1
20457: ST_TO_ADDR
// if p3 = 115 then
20458: LD_VAR 0 3
20462: PUSH
20463: LD_INT 115
20465: EQUAL
20466: IFFALSE 20476
// sRanger := true ;
20468: LD_ADDR_EXP 91
20472: PUSH
20473: LD_INT 1
20475: ST_TO_ADDR
// if p3 = 116 then
20476: LD_VAR 0 3
20480: PUSH
20481: LD_INT 116
20483: EQUAL
20484: IFFALSE 20494
// sComputer := true ;
20486: LD_ADDR_EXP 92
20490: PUSH
20491: LD_INT 1
20493: ST_TO_ADDR
// if p3 = 117 then
20494: LD_VAR 0 3
20498: PUSH
20499: LD_INT 117
20501: EQUAL
20502: IFFALSE 20512
// s30 := true ;
20504: LD_ADDR_EXP 93
20508: PUSH
20509: LD_INT 1
20511: ST_TO_ADDR
// if p3 = 118 then
20512: LD_VAR 0 3
20516: PUSH
20517: LD_INT 118
20519: EQUAL
20520: IFFALSE 20530
// s60 := true ;
20522: LD_ADDR_EXP 94
20526: PUSH
20527: LD_INT 1
20529: ST_TO_ADDR
// end ; if p2 = hack_mode then
20530: LD_VAR 0 2
20534: PUSH
20535: LD_INT 101
20537: EQUAL
20538: IFFALSE 20666
// begin case p3 of 1 :
20540: LD_VAR 0 3
20544: PUSH
20545: LD_INT 1
20547: DOUBLE
20548: EQUAL
20549: IFTRUE 20553
20551: GO 20560
20553: POP
// hHackUnlimitedResources ; 2 :
20554: CALL 32837 0 0
20558: GO 20666
20560: LD_INT 2
20562: DOUBLE
20563: EQUAL
20564: IFTRUE 20568
20566: GO 20575
20568: POP
// hHackSetLevel10 ; 3 :
20569: CALL 32970 0 0
20573: GO 20666
20575: LD_INT 3
20577: DOUBLE
20578: EQUAL
20579: IFTRUE 20583
20581: GO 20590
20583: POP
// hHackSetLevel10YourUnits ; 4 :
20584: CALL 33055 0 0
20588: GO 20666
20590: LD_INT 4
20592: DOUBLE
20593: EQUAL
20594: IFTRUE 20598
20596: GO 20605
20598: POP
// hHackInvincible ; 5 :
20599: CALL 33503 0 0
20603: GO 20666
20605: LD_INT 5
20607: DOUBLE
20608: EQUAL
20609: IFTRUE 20613
20611: GO 20620
20613: POP
// hHackInvisible ; 6 :
20614: CALL 33614 0 0
20618: GO 20666
20620: LD_INT 6
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20635
20628: POP
// hHackChangeYourSide ; 7 :
20629: CALL 33671 0 0
20633: GO 20666
20635: LD_INT 7
20637: DOUBLE
20638: EQUAL
20639: IFTRUE 20643
20641: GO 20650
20643: POP
// hHackChangeUnitSide ; 8 :
20644: CALL 33713 0 0
20648: GO 20666
20650: LD_INT 8
20652: DOUBLE
20653: EQUAL
20654: IFTRUE 20658
20656: GO 20665
20658: POP
// hHackFog ; end ;
20659: CALL 33814 0 0
20663: GO 20666
20665: POP
// end ; if p2 = game_save_mode then
20666: LD_VAR 0 2
20670: PUSH
20671: LD_INT 102
20673: EQUAL
20674: IFFALSE 20739
// begin if p3 = 1 then
20676: LD_VAR 0 3
20680: PUSH
20681: LD_INT 1
20683: EQUAL
20684: IFFALSE 20696
// globalGameSaveCounter := p4 ;
20686: LD_ADDR_EXP 37
20690: PUSH
20691: LD_VAR 0 4
20695: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20696: LD_VAR 0 3
20700: PUSH
20701: LD_INT 2
20703: EQUAL
20704: PUSH
20705: LD_EXP 37
20709: AND
20710: IFFALSE 20729
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20712: LD_STRING setGameSaveCounter(
20714: PUSH
20715: LD_EXP 37
20719: STR
20720: PUSH
20721: LD_STRING )
20723: STR
20724: PPUSH
20725: CALL_OW 559
// display_strings := globalGameSaveCounter ;
20729: LD_ADDR_OWVAR 47
20733: PUSH
20734: LD_EXP 37
20738: ST_TO_ADDR
// end ; end ;
20739: LD_VAR 0 7
20743: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20744: GO 20746
20746: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20747: LD_STRING initStreamRollete();
20749: PPUSH
20750: CALL_OW 559
// InitStreamMode ;
20754: CALL 20766 0 0
// DefineStreamItems ( false ) ;
20758: LD_INT 0
20760: PPUSH
20761: CALL 21230 0 1
// end ;
20765: END
// function InitStreamMode ; begin
20766: LD_INT 0
20768: PPUSH
// streamModeActive := false ;
20769: LD_ADDR_EXP 38
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// normalCounter := 36 ;
20777: LD_ADDR_EXP 39
20781: PUSH
20782: LD_INT 36
20784: ST_TO_ADDR
// hardcoreCounter := 18 ;
20785: LD_ADDR_EXP 40
20789: PUSH
20790: LD_INT 18
20792: ST_TO_ADDR
// sRocket := false ;
20793: LD_ADDR_EXP 43
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sSpeed := false ;
20801: LD_ADDR_EXP 42
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sEngine := false ;
20809: LD_ADDR_EXP 44
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sSpec := false ;
20817: LD_ADDR_EXP 41
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// sLevel := false ;
20825: LD_ADDR_EXP 45
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// sArmoury := false ;
20833: LD_ADDR_EXP 46
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// sRadar := false ;
20841: LD_ADDR_EXP 47
20845: PUSH
20846: LD_INT 0
20848: ST_TO_ADDR
// sBunker := false ;
20849: LD_ADDR_EXP 48
20853: PUSH
20854: LD_INT 0
20856: ST_TO_ADDR
// sHack := false ;
20857: LD_ADDR_EXP 49
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// sFire := false ;
20865: LD_ADDR_EXP 50
20869: PUSH
20870: LD_INT 0
20872: ST_TO_ADDR
// sRefresh := false ;
20873: LD_ADDR_EXP 51
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// sExp := false ;
20881: LD_ADDR_EXP 52
20885: PUSH
20886: LD_INT 0
20888: ST_TO_ADDR
// sDepot := false ;
20889: LD_ADDR_EXP 53
20893: PUSH
20894: LD_INT 0
20896: ST_TO_ADDR
// sFlag := false ;
20897: LD_ADDR_EXP 54
20901: PUSH
20902: LD_INT 0
20904: ST_TO_ADDR
// sKamikadze := false ;
20905: LD_ADDR_EXP 62
20909: PUSH
20910: LD_INT 0
20912: ST_TO_ADDR
// sTroll := false ;
20913: LD_ADDR_EXP 63
20917: PUSH
20918: LD_INT 0
20920: ST_TO_ADDR
// sSlow := false ;
20921: LD_ADDR_EXP 64
20925: PUSH
20926: LD_INT 0
20928: ST_TO_ADDR
// sLack := false ;
20929: LD_ADDR_EXP 65
20933: PUSH
20934: LD_INT 0
20936: ST_TO_ADDR
// sTank := false ;
20937: LD_ADDR_EXP 67
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
// sRemote := false ;
20945: LD_ADDR_EXP 68
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// sPowell := false ;
20953: LD_ADDR_EXP 69
20957: PUSH
20958: LD_INT 0
20960: ST_TO_ADDR
// sTeleport := false ;
20961: LD_ADDR_EXP 72
20965: PUSH
20966: LD_INT 0
20968: ST_TO_ADDR
// sOilTower := false ;
20969: LD_ADDR_EXP 74
20973: PUSH
20974: LD_INT 0
20976: ST_TO_ADDR
// sShovel := false ;
20977: LD_ADDR_EXP 75
20981: PUSH
20982: LD_INT 0
20984: ST_TO_ADDR
// sSheik := false ;
20985: LD_ADDR_EXP 76
20989: PUSH
20990: LD_INT 0
20992: ST_TO_ADDR
// sEarthquake := false ;
20993: LD_ADDR_EXP 78
20997: PUSH
20998: LD_INT 0
21000: ST_TO_ADDR
// sAI := false ;
21001: LD_ADDR_EXP 79
21005: PUSH
21006: LD_INT 0
21008: ST_TO_ADDR
// sCargo := false ;
21009: LD_ADDR_EXP 82
21013: PUSH
21014: LD_INT 0
21016: ST_TO_ADDR
// sDLaser := false ;
21017: LD_ADDR_EXP 83
21021: PUSH
21022: LD_INT 0
21024: ST_TO_ADDR
// sExchange := false ;
21025: LD_ADDR_EXP 84
21029: PUSH
21030: LD_INT 0
21032: ST_TO_ADDR
// sFac := false ;
21033: LD_ADDR_EXP 85
21037: PUSH
21038: LD_INT 0
21040: ST_TO_ADDR
// sPower := false ;
21041: LD_ADDR_EXP 86
21045: PUSH
21046: LD_INT 0
21048: ST_TO_ADDR
// sRandom := false ;
21049: LD_ADDR_EXP 87
21053: PUSH
21054: LD_INT 0
21056: ST_TO_ADDR
// sShield := false ;
21057: LD_ADDR_EXP 88
21061: PUSH
21062: LD_INT 0
21064: ST_TO_ADDR
// sTime := false ;
21065: LD_ADDR_EXP 89
21069: PUSH
21070: LD_INT 0
21072: ST_TO_ADDR
// sTools := false ;
21073: LD_ADDR_EXP 90
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
// sSold := false ;
21081: LD_ADDR_EXP 55
21085: PUSH
21086: LD_INT 0
21088: ST_TO_ADDR
// sDiff := false ;
21089: LD_ADDR_EXP 56
21093: PUSH
21094: LD_INT 0
21096: ST_TO_ADDR
// sFog := false ;
21097: LD_ADDR_EXP 59
21101: PUSH
21102: LD_INT 0
21104: ST_TO_ADDR
// sReset := false ;
21105: LD_ADDR_EXP 60
21109: PUSH
21110: LD_INT 0
21112: ST_TO_ADDR
// sSun := false ;
21113: LD_ADDR_EXP 61
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// sTiger := false ;
21121: LD_ADDR_EXP 57
21125: PUSH
21126: LD_INT 0
21128: ST_TO_ADDR
// sBomb := false ;
21129: LD_ADDR_EXP 58
21133: PUSH
21134: LD_INT 0
21136: ST_TO_ADDR
// sWound := false ;
21137: LD_ADDR_EXP 66
21141: PUSH
21142: LD_INT 0
21144: ST_TO_ADDR
// sBetray := false ;
21145: LD_ADDR_EXP 70
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// sContamin := false ;
21153: LD_ADDR_EXP 71
21157: PUSH
21158: LD_INT 0
21160: ST_TO_ADDR
// sOil := false ;
21161: LD_ADDR_EXP 73
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
// sStu := false ;
21169: LD_ADDR_EXP 77
21173: PUSH
21174: LD_INT 0
21176: ST_TO_ADDR
// sBazooka := false ;
21177: LD_ADDR_EXP 80
21181: PUSH
21182: LD_INT 0
21184: ST_TO_ADDR
// sMortar := false ;
21185: LD_ADDR_EXP 81
21189: PUSH
21190: LD_INT 0
21192: ST_TO_ADDR
// sRanger := false ;
21193: LD_ADDR_EXP 91
21197: PUSH
21198: LD_INT 0
21200: ST_TO_ADDR
// sComputer := false ;
21201: LD_ADDR_EXP 92
21205: PUSH
21206: LD_INT 0
21208: ST_TO_ADDR
// s30 := false ;
21209: LD_ADDR_EXP 93
21213: PUSH
21214: LD_INT 0
21216: ST_TO_ADDR
// s60 := false ;
21217: LD_ADDR_EXP 94
21221: PUSH
21222: LD_INT 0
21224: ST_TO_ADDR
// end ;
21225: LD_VAR 0 1
21229: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21230: LD_INT 0
21232: PPUSH
21233: PPUSH
21234: PPUSH
21235: PPUSH
21236: PPUSH
21237: PPUSH
21238: PPUSH
// result := [ ] ;
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: EMPTY
21245: ST_TO_ADDR
// if campaign_id = 1 then
21246: LD_OWVAR 69
21250: PUSH
21251: LD_INT 1
21253: EQUAL
21254: IFFALSE 24420
// begin case mission_number of 1 :
21256: LD_OWVAR 70
21260: PUSH
21261: LD_INT 1
21263: DOUBLE
21264: EQUAL
21265: IFTRUE 21269
21267: GO 21345
21269: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_INT 2
21277: PUSH
21278: LD_INT 4
21280: PUSH
21281: LD_INT 11
21283: PUSH
21284: LD_INT 12
21286: PUSH
21287: LD_INT 15
21289: PUSH
21290: LD_INT 16
21292: PUSH
21293: LD_INT 22
21295: PUSH
21296: LD_INT 23
21298: PUSH
21299: LD_INT 26
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 101
21315: PUSH
21316: LD_INT 102
21318: PUSH
21319: LD_INT 106
21321: PUSH
21322: LD_INT 116
21324: PUSH
21325: LD_INT 117
21327: PUSH
21328: LD_INT 118
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: ST_TO_ADDR
21343: GO 24418
21345: LD_INT 2
21347: DOUBLE
21348: EQUAL
21349: IFTRUE 21353
21351: GO 21437
21353: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21354: LD_ADDR_VAR 0 2
21358: PUSH
21359: LD_INT 2
21361: PUSH
21362: LD_INT 4
21364: PUSH
21365: LD_INT 11
21367: PUSH
21368: LD_INT 12
21370: PUSH
21371: LD_INT 15
21373: PUSH
21374: LD_INT 16
21376: PUSH
21377: LD_INT 22
21379: PUSH
21380: LD_INT 23
21382: PUSH
21383: LD_INT 26
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 101
21399: PUSH
21400: LD_INT 102
21402: PUSH
21403: LD_INT 105
21405: PUSH
21406: LD_INT 106
21408: PUSH
21409: LD_INT 108
21411: PUSH
21412: LD_INT 116
21414: PUSH
21415: LD_INT 117
21417: PUSH
21418: LD_INT 118
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: ST_TO_ADDR
21435: GO 24418
21437: LD_INT 3
21439: DOUBLE
21440: EQUAL
21441: IFTRUE 21445
21443: GO 21533
21445: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21446: LD_ADDR_VAR 0 2
21450: PUSH
21451: LD_INT 2
21453: PUSH
21454: LD_INT 4
21456: PUSH
21457: LD_INT 5
21459: PUSH
21460: LD_INT 11
21462: PUSH
21463: LD_INT 12
21465: PUSH
21466: LD_INT 15
21468: PUSH
21469: LD_INT 16
21471: PUSH
21472: LD_INT 22
21474: PUSH
21475: LD_INT 26
21477: PUSH
21478: LD_INT 36
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 101
21495: PUSH
21496: LD_INT 102
21498: PUSH
21499: LD_INT 105
21501: PUSH
21502: LD_INT 106
21504: PUSH
21505: LD_INT 108
21507: PUSH
21508: LD_INT 116
21510: PUSH
21511: LD_INT 117
21513: PUSH
21514: LD_INT 118
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: ST_TO_ADDR
21531: GO 24418
21533: LD_INT 4
21535: DOUBLE
21536: EQUAL
21537: IFTRUE 21541
21539: GO 21637
21541: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21542: LD_ADDR_VAR 0 2
21546: PUSH
21547: LD_INT 2
21549: PUSH
21550: LD_INT 4
21552: PUSH
21553: LD_INT 5
21555: PUSH
21556: LD_INT 8
21558: PUSH
21559: LD_INT 11
21561: PUSH
21562: LD_INT 12
21564: PUSH
21565: LD_INT 15
21567: PUSH
21568: LD_INT 16
21570: PUSH
21571: LD_INT 22
21573: PUSH
21574: LD_INT 23
21576: PUSH
21577: LD_INT 26
21579: PUSH
21580: LD_INT 36
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 101
21599: PUSH
21600: LD_INT 102
21602: PUSH
21603: LD_INT 105
21605: PUSH
21606: LD_INT 106
21608: PUSH
21609: LD_INT 108
21611: PUSH
21612: LD_INT 116
21614: PUSH
21615: LD_INT 117
21617: PUSH
21618: LD_INT 118
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: ST_TO_ADDR
21635: GO 24418
21637: LD_INT 5
21639: DOUBLE
21640: EQUAL
21641: IFTRUE 21645
21643: GO 21757
21645: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21646: LD_ADDR_VAR 0 2
21650: PUSH
21651: LD_INT 2
21653: PUSH
21654: LD_INT 4
21656: PUSH
21657: LD_INT 5
21659: PUSH
21660: LD_INT 6
21662: PUSH
21663: LD_INT 8
21665: PUSH
21666: LD_INT 11
21668: PUSH
21669: LD_INT 12
21671: PUSH
21672: LD_INT 15
21674: PUSH
21675: LD_INT 16
21677: PUSH
21678: LD_INT 22
21680: PUSH
21681: LD_INT 23
21683: PUSH
21684: LD_INT 25
21686: PUSH
21687: LD_INT 26
21689: PUSH
21690: LD_INT 36
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 101
21711: PUSH
21712: LD_INT 102
21714: PUSH
21715: LD_INT 105
21717: PUSH
21718: LD_INT 106
21720: PUSH
21721: LD_INT 108
21723: PUSH
21724: LD_INT 109
21726: PUSH
21727: LD_INT 112
21729: PUSH
21730: LD_INT 116
21732: PUSH
21733: LD_INT 117
21735: PUSH
21736: LD_INT 118
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: ST_TO_ADDR
21755: GO 24418
21757: LD_INT 6
21759: DOUBLE
21760: EQUAL
21761: IFTRUE 21765
21763: GO 21897
21765: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 4
21776: PUSH
21777: LD_INT 5
21779: PUSH
21780: LD_INT 6
21782: PUSH
21783: LD_INT 8
21785: PUSH
21786: LD_INT 11
21788: PUSH
21789: LD_INT 12
21791: PUSH
21792: LD_INT 15
21794: PUSH
21795: LD_INT 16
21797: PUSH
21798: LD_INT 20
21800: PUSH
21801: LD_INT 21
21803: PUSH
21804: LD_INT 22
21806: PUSH
21807: LD_INT 23
21809: PUSH
21810: LD_INT 25
21812: PUSH
21813: LD_INT 26
21815: PUSH
21816: LD_INT 30
21818: PUSH
21819: LD_INT 31
21821: PUSH
21822: LD_INT 32
21824: PUSH
21825: LD_INT 36
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 101
21851: PUSH
21852: LD_INT 102
21854: PUSH
21855: LD_INT 105
21857: PUSH
21858: LD_INT 106
21860: PUSH
21861: LD_INT 108
21863: PUSH
21864: LD_INT 109
21866: PUSH
21867: LD_INT 112
21869: PUSH
21870: LD_INT 116
21872: PUSH
21873: LD_INT 117
21875: PUSH
21876: LD_INT 118
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: ST_TO_ADDR
21895: GO 24418
21897: LD_INT 7
21899: DOUBLE
21900: EQUAL
21901: IFTRUE 21905
21903: GO 22017
21905: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21906: LD_ADDR_VAR 0 2
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: LD_INT 4
21916: PUSH
21917: LD_INT 5
21919: PUSH
21920: LD_INT 7
21922: PUSH
21923: LD_INT 11
21925: PUSH
21926: LD_INT 12
21928: PUSH
21929: LD_INT 15
21931: PUSH
21932: LD_INT 16
21934: PUSH
21935: LD_INT 20
21937: PUSH
21938: LD_INT 21
21940: PUSH
21941: LD_INT 22
21943: PUSH
21944: LD_INT 23
21946: PUSH
21947: LD_INT 25
21949: PUSH
21950: LD_INT 26
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 101
21971: PUSH
21972: LD_INT 102
21974: PUSH
21975: LD_INT 103
21977: PUSH
21978: LD_INT 105
21980: PUSH
21981: LD_INT 106
21983: PUSH
21984: LD_INT 108
21986: PUSH
21987: LD_INT 112
21989: PUSH
21990: LD_INT 116
21992: PUSH
21993: LD_INT 117
21995: PUSH
21996: LD_INT 118
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: ST_TO_ADDR
22015: GO 24418
22017: LD_INT 8
22019: DOUBLE
22020: EQUAL
22021: IFTRUE 22025
22023: GO 22165
22025: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: LD_INT 4
22036: PUSH
22037: LD_INT 5
22039: PUSH
22040: LD_INT 6
22042: PUSH
22043: LD_INT 7
22045: PUSH
22046: LD_INT 8
22048: PUSH
22049: LD_INT 11
22051: PUSH
22052: LD_INT 12
22054: PUSH
22055: LD_INT 15
22057: PUSH
22058: LD_INT 16
22060: PUSH
22061: LD_INT 20
22063: PUSH
22064: LD_INT 21
22066: PUSH
22067: LD_INT 22
22069: PUSH
22070: LD_INT 23
22072: PUSH
22073: LD_INT 25
22075: PUSH
22076: LD_INT 26
22078: PUSH
22079: LD_INT 30
22081: PUSH
22082: LD_INT 31
22084: PUSH
22085: LD_INT 32
22087: PUSH
22088: LD_INT 36
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 101
22115: PUSH
22116: LD_INT 102
22118: PUSH
22119: LD_INT 103
22121: PUSH
22122: LD_INT 105
22124: PUSH
22125: LD_INT 106
22127: PUSH
22128: LD_INT 108
22130: PUSH
22131: LD_INT 109
22133: PUSH
22134: LD_INT 112
22136: PUSH
22137: LD_INT 116
22139: PUSH
22140: LD_INT 117
22142: PUSH
22143: LD_INT 118
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: ST_TO_ADDR
22163: GO 24418
22165: LD_INT 9
22167: DOUBLE
22168: EQUAL
22169: IFTRUE 22173
22171: GO 22321
22173: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22174: LD_ADDR_VAR 0 2
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: LD_INT 4
22184: PUSH
22185: LD_INT 5
22187: PUSH
22188: LD_INT 6
22190: PUSH
22191: LD_INT 7
22193: PUSH
22194: LD_INT 8
22196: PUSH
22197: LD_INT 11
22199: PUSH
22200: LD_INT 12
22202: PUSH
22203: LD_INT 15
22205: PUSH
22206: LD_INT 16
22208: PUSH
22209: LD_INT 20
22211: PUSH
22212: LD_INT 21
22214: PUSH
22215: LD_INT 22
22217: PUSH
22218: LD_INT 23
22220: PUSH
22221: LD_INT 25
22223: PUSH
22224: LD_INT 26
22226: PUSH
22227: LD_INT 28
22229: PUSH
22230: LD_INT 30
22232: PUSH
22233: LD_INT 31
22235: PUSH
22236: LD_INT 32
22238: PUSH
22239: LD_INT 36
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 101
22267: PUSH
22268: LD_INT 102
22270: PUSH
22271: LD_INT 103
22273: PUSH
22274: LD_INT 105
22276: PUSH
22277: LD_INT 106
22279: PUSH
22280: LD_INT 108
22282: PUSH
22283: LD_INT 109
22285: PUSH
22286: LD_INT 112
22288: PUSH
22289: LD_INT 114
22291: PUSH
22292: LD_INT 116
22294: PUSH
22295: LD_INT 117
22297: PUSH
22298: LD_INT 118
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: ST_TO_ADDR
22319: GO 24418
22321: LD_INT 10
22323: DOUBLE
22324: EQUAL
22325: IFTRUE 22329
22327: GO 22525
22329: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22330: LD_ADDR_VAR 0 2
22334: PUSH
22335: LD_INT 2
22337: PUSH
22338: LD_INT 4
22340: PUSH
22341: LD_INT 5
22343: PUSH
22344: LD_INT 6
22346: PUSH
22347: LD_INT 7
22349: PUSH
22350: LD_INT 8
22352: PUSH
22353: LD_INT 9
22355: PUSH
22356: LD_INT 10
22358: PUSH
22359: LD_INT 11
22361: PUSH
22362: LD_INT 12
22364: PUSH
22365: LD_INT 13
22367: PUSH
22368: LD_INT 14
22370: PUSH
22371: LD_INT 15
22373: PUSH
22374: LD_INT 16
22376: PUSH
22377: LD_INT 17
22379: PUSH
22380: LD_INT 18
22382: PUSH
22383: LD_INT 19
22385: PUSH
22386: LD_INT 20
22388: PUSH
22389: LD_INT 21
22391: PUSH
22392: LD_INT 22
22394: PUSH
22395: LD_INT 23
22397: PUSH
22398: LD_INT 24
22400: PUSH
22401: LD_INT 25
22403: PUSH
22404: LD_INT 26
22406: PUSH
22407: LD_INT 28
22409: PUSH
22410: LD_INT 30
22412: PUSH
22413: LD_INT 31
22415: PUSH
22416: LD_INT 32
22418: PUSH
22419: LD_INT 36
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 101
22455: PUSH
22456: LD_INT 102
22458: PUSH
22459: LD_INT 103
22461: PUSH
22462: LD_INT 104
22464: PUSH
22465: LD_INT 105
22467: PUSH
22468: LD_INT 106
22470: PUSH
22471: LD_INT 107
22473: PUSH
22474: LD_INT 108
22476: PUSH
22477: LD_INT 109
22479: PUSH
22480: LD_INT 110
22482: PUSH
22483: LD_INT 111
22485: PUSH
22486: LD_INT 112
22488: PUSH
22489: LD_INT 114
22491: PUSH
22492: LD_INT 116
22494: PUSH
22495: LD_INT 117
22497: PUSH
22498: LD_INT 118
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: ST_TO_ADDR
22523: GO 24418
22525: LD_INT 11
22527: DOUBLE
22528: EQUAL
22529: IFTRUE 22533
22531: GO 22737
22533: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22534: LD_ADDR_VAR 0 2
22538: PUSH
22539: LD_INT 2
22541: PUSH
22542: LD_INT 3
22544: PUSH
22545: LD_INT 4
22547: PUSH
22548: LD_INT 5
22550: PUSH
22551: LD_INT 6
22553: PUSH
22554: LD_INT 7
22556: PUSH
22557: LD_INT 8
22559: PUSH
22560: LD_INT 9
22562: PUSH
22563: LD_INT 10
22565: PUSH
22566: LD_INT 11
22568: PUSH
22569: LD_INT 12
22571: PUSH
22572: LD_INT 13
22574: PUSH
22575: LD_INT 14
22577: PUSH
22578: LD_INT 15
22580: PUSH
22581: LD_INT 16
22583: PUSH
22584: LD_INT 17
22586: PUSH
22587: LD_INT 18
22589: PUSH
22590: LD_INT 19
22592: PUSH
22593: LD_INT 20
22595: PUSH
22596: LD_INT 21
22598: PUSH
22599: LD_INT 22
22601: PUSH
22602: LD_INT 23
22604: PUSH
22605: LD_INT 24
22607: PUSH
22608: LD_INT 25
22610: PUSH
22611: LD_INT 26
22613: PUSH
22614: LD_INT 28
22616: PUSH
22617: LD_INT 30
22619: PUSH
22620: LD_INT 31
22622: PUSH
22623: LD_INT 32
22625: PUSH
22626: LD_INT 34
22628: PUSH
22629: LD_INT 36
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 101
22667: PUSH
22668: LD_INT 102
22670: PUSH
22671: LD_INT 103
22673: PUSH
22674: LD_INT 104
22676: PUSH
22677: LD_INT 105
22679: PUSH
22680: LD_INT 106
22682: PUSH
22683: LD_INT 107
22685: PUSH
22686: LD_INT 108
22688: PUSH
22689: LD_INT 109
22691: PUSH
22692: LD_INT 110
22694: PUSH
22695: LD_INT 111
22697: PUSH
22698: LD_INT 112
22700: PUSH
22701: LD_INT 114
22703: PUSH
22704: LD_INT 116
22706: PUSH
22707: LD_INT 117
22709: PUSH
22710: LD_INT 118
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: ST_TO_ADDR
22735: GO 24418
22737: LD_INT 12
22739: DOUBLE
22740: EQUAL
22741: IFTRUE 22745
22743: GO 22965
22745: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22746: LD_ADDR_VAR 0 2
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: LD_INT 2
22756: PUSH
22757: LD_INT 3
22759: PUSH
22760: LD_INT 4
22762: PUSH
22763: LD_INT 5
22765: PUSH
22766: LD_INT 6
22768: PUSH
22769: LD_INT 7
22771: PUSH
22772: LD_INT 8
22774: PUSH
22775: LD_INT 9
22777: PUSH
22778: LD_INT 10
22780: PUSH
22781: LD_INT 11
22783: PUSH
22784: LD_INT 12
22786: PUSH
22787: LD_INT 13
22789: PUSH
22790: LD_INT 14
22792: PUSH
22793: LD_INT 15
22795: PUSH
22796: LD_INT 16
22798: PUSH
22799: LD_INT 17
22801: PUSH
22802: LD_INT 18
22804: PUSH
22805: LD_INT 19
22807: PUSH
22808: LD_INT 20
22810: PUSH
22811: LD_INT 21
22813: PUSH
22814: LD_INT 22
22816: PUSH
22817: LD_INT 23
22819: PUSH
22820: LD_INT 24
22822: PUSH
22823: LD_INT 25
22825: PUSH
22826: LD_INT 26
22828: PUSH
22829: LD_INT 27
22831: PUSH
22832: LD_INT 28
22834: PUSH
22835: LD_INT 30
22837: PUSH
22838: LD_INT 31
22840: PUSH
22841: LD_INT 32
22843: PUSH
22844: LD_INT 33
22846: PUSH
22847: LD_INT 34
22849: PUSH
22850: LD_INT 36
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 101
22891: PUSH
22892: LD_INT 102
22894: PUSH
22895: LD_INT 103
22897: PUSH
22898: LD_INT 104
22900: PUSH
22901: LD_INT 105
22903: PUSH
22904: LD_INT 106
22906: PUSH
22907: LD_INT 107
22909: PUSH
22910: LD_INT 108
22912: PUSH
22913: LD_INT 109
22915: PUSH
22916: LD_INT 110
22918: PUSH
22919: LD_INT 111
22921: PUSH
22922: LD_INT 112
22924: PUSH
22925: LD_INT 113
22927: PUSH
22928: LD_INT 114
22930: PUSH
22931: LD_INT 116
22933: PUSH
22934: LD_INT 117
22936: PUSH
22937: LD_INT 118
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: ST_TO_ADDR
22963: GO 24418
22965: LD_INT 13
22967: DOUBLE
22968: EQUAL
22969: IFTRUE 22973
22971: GO 23181
22973: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22974: LD_ADDR_VAR 0 2
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: LD_INT 3
22987: PUSH
22988: LD_INT 4
22990: PUSH
22991: LD_INT 5
22993: PUSH
22994: LD_INT 8
22996: PUSH
22997: LD_INT 9
22999: PUSH
23000: LD_INT 10
23002: PUSH
23003: LD_INT 11
23005: PUSH
23006: LD_INT 12
23008: PUSH
23009: LD_INT 14
23011: PUSH
23012: LD_INT 15
23014: PUSH
23015: LD_INT 16
23017: PUSH
23018: LD_INT 17
23020: PUSH
23021: LD_INT 18
23023: PUSH
23024: LD_INT 19
23026: PUSH
23027: LD_INT 20
23029: PUSH
23030: LD_INT 21
23032: PUSH
23033: LD_INT 22
23035: PUSH
23036: LD_INT 23
23038: PUSH
23039: LD_INT 24
23041: PUSH
23042: LD_INT 25
23044: PUSH
23045: LD_INT 26
23047: PUSH
23048: LD_INT 27
23050: PUSH
23051: LD_INT 28
23053: PUSH
23054: LD_INT 30
23056: PUSH
23057: LD_INT 31
23059: PUSH
23060: LD_INT 32
23062: PUSH
23063: LD_INT 33
23065: PUSH
23066: LD_INT 34
23068: PUSH
23069: LD_INT 36
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 101
23107: PUSH
23108: LD_INT 102
23110: PUSH
23111: LD_INT 103
23113: PUSH
23114: LD_INT 104
23116: PUSH
23117: LD_INT 105
23119: PUSH
23120: LD_INT 106
23122: PUSH
23123: LD_INT 107
23125: PUSH
23126: LD_INT 108
23128: PUSH
23129: LD_INT 109
23131: PUSH
23132: LD_INT 110
23134: PUSH
23135: LD_INT 111
23137: PUSH
23138: LD_INT 112
23140: PUSH
23141: LD_INT 113
23143: PUSH
23144: LD_INT 114
23146: PUSH
23147: LD_INT 116
23149: PUSH
23150: LD_INT 117
23152: PUSH
23153: LD_INT 118
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: ST_TO_ADDR
23179: GO 24418
23181: LD_INT 14
23183: DOUBLE
23184: EQUAL
23185: IFTRUE 23189
23187: GO 23413
23189: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23190: LD_ADDR_VAR 0 2
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: LD_INT 2
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: LD_INT 4
23206: PUSH
23207: LD_INT 5
23209: PUSH
23210: LD_INT 6
23212: PUSH
23213: LD_INT 7
23215: PUSH
23216: LD_INT 8
23218: PUSH
23219: LD_INT 9
23221: PUSH
23222: LD_INT 10
23224: PUSH
23225: LD_INT 11
23227: PUSH
23228: LD_INT 12
23230: PUSH
23231: LD_INT 13
23233: PUSH
23234: LD_INT 14
23236: PUSH
23237: LD_INT 15
23239: PUSH
23240: LD_INT 16
23242: PUSH
23243: LD_INT 17
23245: PUSH
23246: LD_INT 18
23248: PUSH
23249: LD_INT 19
23251: PUSH
23252: LD_INT 20
23254: PUSH
23255: LD_INT 21
23257: PUSH
23258: LD_INT 22
23260: PUSH
23261: LD_INT 23
23263: PUSH
23264: LD_INT 24
23266: PUSH
23267: LD_INT 25
23269: PUSH
23270: LD_INT 26
23272: PUSH
23273: LD_INT 27
23275: PUSH
23276: LD_INT 28
23278: PUSH
23279: LD_INT 29
23281: PUSH
23282: LD_INT 30
23284: PUSH
23285: LD_INT 31
23287: PUSH
23288: LD_INT 32
23290: PUSH
23291: LD_INT 33
23293: PUSH
23294: LD_INT 34
23296: PUSH
23297: LD_INT 36
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 101
23339: PUSH
23340: LD_INT 102
23342: PUSH
23343: LD_INT 103
23345: PUSH
23346: LD_INT 104
23348: PUSH
23349: LD_INT 105
23351: PUSH
23352: LD_INT 106
23354: PUSH
23355: LD_INT 107
23357: PUSH
23358: LD_INT 108
23360: PUSH
23361: LD_INT 109
23363: PUSH
23364: LD_INT 110
23366: PUSH
23367: LD_INT 111
23369: PUSH
23370: LD_INT 112
23372: PUSH
23373: LD_INT 113
23375: PUSH
23376: LD_INT 114
23378: PUSH
23379: LD_INT 116
23381: PUSH
23382: LD_INT 117
23384: PUSH
23385: LD_INT 118
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: ST_TO_ADDR
23411: GO 24418
23413: LD_INT 15
23415: DOUBLE
23416: EQUAL
23417: IFTRUE 23421
23419: GO 23645
23421: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23422: LD_ADDR_VAR 0 2
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: LD_INT 3
23435: PUSH
23436: LD_INT 4
23438: PUSH
23439: LD_INT 5
23441: PUSH
23442: LD_INT 6
23444: PUSH
23445: LD_INT 7
23447: PUSH
23448: LD_INT 8
23450: PUSH
23451: LD_INT 9
23453: PUSH
23454: LD_INT 10
23456: PUSH
23457: LD_INT 11
23459: PUSH
23460: LD_INT 12
23462: PUSH
23463: LD_INT 13
23465: PUSH
23466: LD_INT 14
23468: PUSH
23469: LD_INT 15
23471: PUSH
23472: LD_INT 16
23474: PUSH
23475: LD_INT 17
23477: PUSH
23478: LD_INT 18
23480: PUSH
23481: LD_INT 19
23483: PUSH
23484: LD_INT 20
23486: PUSH
23487: LD_INT 21
23489: PUSH
23490: LD_INT 22
23492: PUSH
23493: LD_INT 23
23495: PUSH
23496: LD_INT 24
23498: PUSH
23499: LD_INT 25
23501: PUSH
23502: LD_INT 26
23504: PUSH
23505: LD_INT 27
23507: PUSH
23508: LD_INT 28
23510: PUSH
23511: LD_INT 29
23513: PUSH
23514: LD_INT 30
23516: PUSH
23517: LD_INT 31
23519: PUSH
23520: LD_INT 32
23522: PUSH
23523: LD_INT 33
23525: PUSH
23526: LD_INT 34
23528: PUSH
23529: LD_INT 36
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 101
23571: PUSH
23572: LD_INT 102
23574: PUSH
23575: LD_INT 103
23577: PUSH
23578: LD_INT 104
23580: PUSH
23581: LD_INT 105
23583: PUSH
23584: LD_INT 106
23586: PUSH
23587: LD_INT 107
23589: PUSH
23590: LD_INT 108
23592: PUSH
23593: LD_INT 109
23595: PUSH
23596: LD_INT 110
23598: PUSH
23599: LD_INT 111
23601: PUSH
23602: LD_INT 112
23604: PUSH
23605: LD_INT 113
23607: PUSH
23608: LD_INT 114
23610: PUSH
23611: LD_INT 116
23613: PUSH
23614: LD_INT 117
23616: PUSH
23617: LD_INT 118
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: ST_TO_ADDR
23643: GO 24418
23645: LD_INT 16
23647: DOUBLE
23648: EQUAL
23649: IFTRUE 23653
23651: GO 23789
23653: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23654: LD_ADDR_VAR 0 2
23658: PUSH
23659: LD_INT 2
23661: PUSH
23662: LD_INT 4
23664: PUSH
23665: LD_INT 5
23667: PUSH
23668: LD_INT 7
23670: PUSH
23671: LD_INT 11
23673: PUSH
23674: LD_INT 12
23676: PUSH
23677: LD_INT 15
23679: PUSH
23680: LD_INT 16
23682: PUSH
23683: LD_INT 20
23685: PUSH
23686: LD_INT 21
23688: PUSH
23689: LD_INT 22
23691: PUSH
23692: LD_INT 23
23694: PUSH
23695: LD_INT 25
23697: PUSH
23698: LD_INT 26
23700: PUSH
23701: LD_INT 30
23703: PUSH
23704: LD_INT 31
23706: PUSH
23707: LD_INT 32
23709: PUSH
23710: LD_INT 33
23712: PUSH
23713: LD_INT 34
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 101
23739: PUSH
23740: LD_INT 102
23742: PUSH
23743: LD_INT 103
23745: PUSH
23746: LD_INT 106
23748: PUSH
23749: LD_INT 108
23751: PUSH
23752: LD_INT 112
23754: PUSH
23755: LD_INT 113
23757: PUSH
23758: LD_INT 114
23760: PUSH
23761: LD_INT 116
23763: PUSH
23764: LD_INT 117
23766: PUSH
23767: LD_INT 118
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: ST_TO_ADDR
23787: GO 24418
23789: LD_INT 17
23791: DOUBLE
23792: EQUAL
23793: IFTRUE 23797
23795: GO 24021
23797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23798: LD_ADDR_VAR 0 2
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: LD_INT 3
23811: PUSH
23812: LD_INT 4
23814: PUSH
23815: LD_INT 5
23817: PUSH
23818: LD_INT 6
23820: PUSH
23821: LD_INT 7
23823: PUSH
23824: LD_INT 8
23826: PUSH
23827: LD_INT 9
23829: PUSH
23830: LD_INT 10
23832: PUSH
23833: LD_INT 11
23835: PUSH
23836: LD_INT 12
23838: PUSH
23839: LD_INT 13
23841: PUSH
23842: LD_INT 14
23844: PUSH
23845: LD_INT 15
23847: PUSH
23848: LD_INT 16
23850: PUSH
23851: LD_INT 17
23853: PUSH
23854: LD_INT 18
23856: PUSH
23857: LD_INT 19
23859: PUSH
23860: LD_INT 20
23862: PUSH
23863: LD_INT 21
23865: PUSH
23866: LD_INT 22
23868: PUSH
23869: LD_INT 23
23871: PUSH
23872: LD_INT 24
23874: PUSH
23875: LD_INT 25
23877: PUSH
23878: LD_INT 26
23880: PUSH
23881: LD_INT 27
23883: PUSH
23884: LD_INT 28
23886: PUSH
23887: LD_INT 29
23889: PUSH
23890: LD_INT 30
23892: PUSH
23893: LD_INT 31
23895: PUSH
23896: LD_INT 32
23898: PUSH
23899: LD_INT 33
23901: PUSH
23902: LD_INT 34
23904: PUSH
23905: LD_INT 36
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 101
23947: PUSH
23948: LD_INT 102
23950: PUSH
23951: LD_INT 103
23953: PUSH
23954: LD_INT 104
23956: PUSH
23957: LD_INT 105
23959: PUSH
23960: LD_INT 106
23962: PUSH
23963: LD_INT 107
23965: PUSH
23966: LD_INT 108
23968: PUSH
23969: LD_INT 109
23971: PUSH
23972: LD_INT 110
23974: PUSH
23975: LD_INT 111
23977: PUSH
23978: LD_INT 112
23980: PUSH
23981: LD_INT 113
23983: PUSH
23984: LD_INT 114
23986: PUSH
23987: LD_INT 116
23989: PUSH
23990: LD_INT 117
23992: PUSH
23993: LD_INT 118
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: ST_TO_ADDR
24019: GO 24418
24021: LD_INT 18
24023: DOUBLE
24024: EQUAL
24025: IFTRUE 24029
24027: GO 24177
24029: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24030: LD_ADDR_VAR 0 2
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: LD_INT 4
24040: PUSH
24041: LD_INT 5
24043: PUSH
24044: LD_INT 7
24046: PUSH
24047: LD_INT 11
24049: PUSH
24050: LD_INT 12
24052: PUSH
24053: LD_INT 15
24055: PUSH
24056: LD_INT 16
24058: PUSH
24059: LD_INT 20
24061: PUSH
24062: LD_INT 21
24064: PUSH
24065: LD_INT 22
24067: PUSH
24068: LD_INT 23
24070: PUSH
24071: LD_INT 25
24073: PUSH
24074: LD_INT 26
24076: PUSH
24077: LD_INT 30
24079: PUSH
24080: LD_INT 31
24082: PUSH
24083: LD_INT 32
24085: PUSH
24086: LD_INT 33
24088: PUSH
24089: LD_INT 34
24091: PUSH
24092: LD_INT 35
24094: PUSH
24095: LD_INT 36
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 101
24123: PUSH
24124: LD_INT 102
24126: PUSH
24127: LD_INT 103
24129: PUSH
24130: LD_INT 106
24132: PUSH
24133: LD_INT 108
24135: PUSH
24136: LD_INT 112
24138: PUSH
24139: LD_INT 113
24141: PUSH
24142: LD_INT 114
24144: PUSH
24145: LD_INT 115
24147: PUSH
24148: LD_INT 116
24150: PUSH
24151: LD_INT 117
24153: PUSH
24154: LD_INT 118
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: ST_TO_ADDR
24175: GO 24418
24177: LD_INT 19
24179: DOUBLE
24180: EQUAL
24181: IFTRUE 24185
24183: GO 24417
24185: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24186: LD_ADDR_VAR 0 2
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: LD_INT 2
24196: PUSH
24197: LD_INT 3
24199: PUSH
24200: LD_INT 4
24202: PUSH
24203: LD_INT 5
24205: PUSH
24206: LD_INT 6
24208: PUSH
24209: LD_INT 7
24211: PUSH
24212: LD_INT 8
24214: PUSH
24215: LD_INT 9
24217: PUSH
24218: LD_INT 10
24220: PUSH
24221: LD_INT 11
24223: PUSH
24224: LD_INT 12
24226: PUSH
24227: LD_INT 13
24229: PUSH
24230: LD_INT 14
24232: PUSH
24233: LD_INT 15
24235: PUSH
24236: LD_INT 16
24238: PUSH
24239: LD_INT 17
24241: PUSH
24242: LD_INT 18
24244: PUSH
24245: LD_INT 19
24247: PUSH
24248: LD_INT 20
24250: PUSH
24251: LD_INT 21
24253: PUSH
24254: LD_INT 22
24256: PUSH
24257: LD_INT 23
24259: PUSH
24260: LD_INT 24
24262: PUSH
24263: LD_INT 25
24265: PUSH
24266: LD_INT 26
24268: PUSH
24269: LD_INT 27
24271: PUSH
24272: LD_INT 28
24274: PUSH
24275: LD_INT 29
24277: PUSH
24278: LD_INT 30
24280: PUSH
24281: LD_INT 31
24283: PUSH
24284: LD_INT 32
24286: PUSH
24287: LD_INT 33
24289: PUSH
24290: LD_INT 34
24292: PUSH
24293: LD_INT 35
24295: PUSH
24296: LD_INT 36
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 101
24339: PUSH
24340: LD_INT 102
24342: PUSH
24343: LD_INT 103
24345: PUSH
24346: LD_INT 104
24348: PUSH
24349: LD_INT 105
24351: PUSH
24352: LD_INT 106
24354: PUSH
24355: LD_INT 107
24357: PUSH
24358: LD_INT 108
24360: PUSH
24361: LD_INT 109
24363: PUSH
24364: LD_INT 110
24366: PUSH
24367: LD_INT 111
24369: PUSH
24370: LD_INT 112
24372: PUSH
24373: LD_INT 113
24375: PUSH
24376: LD_INT 114
24378: PUSH
24379: LD_INT 115
24381: PUSH
24382: LD_INT 116
24384: PUSH
24385: LD_INT 117
24387: PUSH
24388: LD_INT 118
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: ST_TO_ADDR
24415: GO 24418
24417: POP
// end else
24418: GO 24649
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24420: LD_ADDR_VAR 0 2
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: LD_INT 2
24430: PUSH
24431: LD_INT 3
24433: PUSH
24434: LD_INT 4
24436: PUSH
24437: LD_INT 5
24439: PUSH
24440: LD_INT 6
24442: PUSH
24443: LD_INT 7
24445: PUSH
24446: LD_INT 8
24448: PUSH
24449: LD_INT 9
24451: PUSH
24452: LD_INT 10
24454: PUSH
24455: LD_INT 11
24457: PUSH
24458: LD_INT 12
24460: PUSH
24461: LD_INT 13
24463: PUSH
24464: LD_INT 14
24466: PUSH
24467: LD_INT 15
24469: PUSH
24470: LD_INT 16
24472: PUSH
24473: LD_INT 17
24475: PUSH
24476: LD_INT 18
24478: PUSH
24479: LD_INT 19
24481: PUSH
24482: LD_INT 20
24484: PUSH
24485: LD_INT 21
24487: PUSH
24488: LD_INT 22
24490: PUSH
24491: LD_INT 23
24493: PUSH
24494: LD_INT 24
24496: PUSH
24497: LD_INT 25
24499: PUSH
24500: LD_INT 26
24502: PUSH
24503: LD_INT 27
24505: PUSH
24506: LD_INT 28
24508: PUSH
24509: LD_INT 29
24511: PUSH
24512: LD_INT 30
24514: PUSH
24515: LD_INT 31
24517: PUSH
24518: LD_INT 32
24520: PUSH
24521: LD_INT 33
24523: PUSH
24524: LD_INT 34
24526: PUSH
24527: LD_INT 35
24529: PUSH
24530: LD_INT 36
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 101
24573: PUSH
24574: LD_INT 102
24576: PUSH
24577: LD_INT 103
24579: PUSH
24580: LD_INT 104
24582: PUSH
24583: LD_INT 105
24585: PUSH
24586: LD_INT 106
24588: PUSH
24589: LD_INT 107
24591: PUSH
24592: LD_INT 108
24594: PUSH
24595: LD_INT 109
24597: PUSH
24598: LD_INT 110
24600: PUSH
24601: LD_INT 111
24603: PUSH
24604: LD_INT 112
24606: PUSH
24607: LD_INT 113
24609: PUSH
24610: LD_INT 114
24612: PUSH
24613: LD_INT 115
24615: PUSH
24616: LD_INT 116
24618: PUSH
24619: LD_INT 117
24621: PUSH
24622: LD_INT 118
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: ST_TO_ADDR
// if result then
24649: LD_VAR 0 2
24653: IFFALSE 25439
// begin normal :=  ;
24655: LD_ADDR_VAR 0 5
24659: PUSH
24660: LD_STRING 
24662: ST_TO_ADDR
// hardcore :=  ;
24663: LD_ADDR_VAR 0 6
24667: PUSH
24668: LD_STRING 
24670: ST_TO_ADDR
// active :=  ;
24671: LD_ADDR_VAR 0 7
24675: PUSH
24676: LD_STRING 
24678: ST_TO_ADDR
// for i = 1 to normalCounter do
24679: LD_ADDR_VAR 0 8
24683: PUSH
24684: DOUBLE
24685: LD_INT 1
24687: DEC
24688: ST_TO_ADDR
24689: LD_EXP 39
24693: PUSH
24694: FOR_TO
24695: IFFALSE 24796
// begin tmp := 0 ;
24697: LD_ADDR_VAR 0 3
24701: PUSH
24702: LD_STRING 0
24704: ST_TO_ADDR
// if result [ 1 ] then
24705: LD_VAR 0 2
24709: PUSH
24710: LD_INT 1
24712: ARRAY
24713: IFFALSE 24778
// if result [ 1 ] [ 1 ] = i then
24715: LD_VAR 0 2
24719: PUSH
24720: LD_INT 1
24722: ARRAY
24723: PUSH
24724: LD_INT 1
24726: ARRAY
24727: PUSH
24728: LD_VAR 0 8
24732: EQUAL
24733: IFFALSE 24778
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24735: LD_ADDR_VAR 0 2
24739: PUSH
24740: LD_VAR 0 2
24744: PPUSH
24745: LD_INT 1
24747: PPUSH
24748: LD_VAR 0 2
24752: PUSH
24753: LD_INT 1
24755: ARRAY
24756: PPUSH
24757: LD_INT 1
24759: PPUSH
24760: CALL_OW 3
24764: PPUSH
24765: CALL_OW 1
24769: ST_TO_ADDR
// tmp := 1 ;
24770: LD_ADDR_VAR 0 3
24774: PUSH
24775: LD_STRING 1
24777: ST_TO_ADDR
// end ; normal := normal & tmp ;
24778: LD_ADDR_VAR 0 5
24782: PUSH
24783: LD_VAR 0 5
24787: PUSH
24788: LD_VAR 0 3
24792: STR
24793: ST_TO_ADDR
// end ;
24794: GO 24694
24796: POP
24797: POP
// for i = 1 to hardcoreCounter do
24798: LD_ADDR_VAR 0 8
24802: PUSH
24803: DOUBLE
24804: LD_INT 1
24806: DEC
24807: ST_TO_ADDR
24808: LD_EXP 40
24812: PUSH
24813: FOR_TO
24814: IFFALSE 24919
// begin tmp := 0 ;
24816: LD_ADDR_VAR 0 3
24820: PUSH
24821: LD_STRING 0
24823: ST_TO_ADDR
// if result [ 2 ] then
24824: LD_VAR 0 2
24828: PUSH
24829: LD_INT 2
24831: ARRAY
24832: IFFALSE 24901
// if result [ 2 ] [ 1 ] = 100 + i then
24834: LD_VAR 0 2
24838: PUSH
24839: LD_INT 2
24841: ARRAY
24842: PUSH
24843: LD_INT 1
24845: ARRAY
24846: PUSH
24847: LD_INT 100
24849: PUSH
24850: LD_VAR 0 8
24854: PLUS
24855: EQUAL
24856: IFFALSE 24901
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24858: LD_ADDR_VAR 0 2
24862: PUSH
24863: LD_VAR 0 2
24867: PPUSH
24868: LD_INT 2
24870: PPUSH
24871: LD_VAR 0 2
24875: PUSH
24876: LD_INT 2
24878: ARRAY
24879: PPUSH
24880: LD_INT 1
24882: PPUSH
24883: CALL_OW 3
24887: PPUSH
24888: CALL_OW 1
24892: ST_TO_ADDR
// tmp := 1 ;
24893: LD_ADDR_VAR 0 3
24897: PUSH
24898: LD_STRING 1
24900: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24901: LD_ADDR_VAR 0 6
24905: PUSH
24906: LD_VAR 0 6
24910: PUSH
24911: LD_VAR 0 3
24915: STR
24916: ST_TO_ADDR
// end ;
24917: GO 24813
24919: POP
24920: POP
// if isGameLoad then
24921: LD_VAR 0 1
24925: IFFALSE 25400
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24927: LD_ADDR_VAR 0 4
24931: PUSH
24932: LD_EXP 43
24936: PUSH
24937: LD_EXP 42
24941: PUSH
24942: LD_EXP 44
24946: PUSH
24947: LD_EXP 41
24951: PUSH
24952: LD_EXP 45
24956: PUSH
24957: LD_EXP 46
24961: PUSH
24962: LD_EXP 47
24966: PUSH
24967: LD_EXP 48
24971: PUSH
24972: LD_EXP 49
24976: PUSH
24977: LD_EXP 50
24981: PUSH
24982: LD_EXP 51
24986: PUSH
24987: LD_EXP 52
24991: PUSH
24992: LD_EXP 53
24996: PUSH
24997: LD_EXP 54
25001: PUSH
25002: LD_EXP 62
25006: PUSH
25007: LD_EXP 63
25011: PUSH
25012: LD_EXP 64
25016: PUSH
25017: LD_EXP 65
25021: PUSH
25022: LD_EXP 67
25026: PUSH
25027: LD_EXP 68
25031: PUSH
25032: LD_EXP 69
25036: PUSH
25037: LD_EXP 72
25041: PUSH
25042: LD_EXP 74
25046: PUSH
25047: LD_EXP 75
25051: PUSH
25052: LD_EXP 76
25056: PUSH
25057: LD_EXP 78
25061: PUSH
25062: LD_EXP 79
25066: PUSH
25067: LD_EXP 82
25071: PUSH
25072: LD_EXP 83
25076: PUSH
25077: LD_EXP 84
25081: PUSH
25082: LD_EXP 85
25086: PUSH
25087: LD_EXP 86
25091: PUSH
25092: LD_EXP 87
25096: PUSH
25097: LD_EXP 88
25101: PUSH
25102: LD_EXP 89
25106: PUSH
25107: LD_EXP 90
25111: PUSH
25112: LD_EXP 55
25116: PUSH
25117: LD_EXP 56
25121: PUSH
25122: LD_EXP 59
25126: PUSH
25127: LD_EXP 60
25131: PUSH
25132: LD_EXP 61
25136: PUSH
25137: LD_EXP 57
25141: PUSH
25142: LD_EXP 58
25146: PUSH
25147: LD_EXP 66
25151: PUSH
25152: LD_EXP 70
25156: PUSH
25157: LD_EXP 71
25161: PUSH
25162: LD_EXP 73
25166: PUSH
25167: LD_EXP 77
25171: PUSH
25172: LD_EXP 80
25176: PUSH
25177: LD_EXP 81
25181: PUSH
25182: LD_EXP 91
25186: PUSH
25187: LD_EXP 92
25191: PUSH
25192: LD_EXP 93
25196: PUSH
25197: LD_EXP 94
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: ST_TO_ADDR
// tmp :=  ;
25258: LD_ADDR_VAR 0 3
25262: PUSH
25263: LD_STRING 
25265: ST_TO_ADDR
// for i = 1 to normalCounter do
25266: LD_ADDR_VAR 0 8
25270: PUSH
25271: DOUBLE
25272: LD_INT 1
25274: DEC
25275: ST_TO_ADDR
25276: LD_EXP 39
25280: PUSH
25281: FOR_TO
25282: IFFALSE 25318
// begin if flags [ i ] then
25284: LD_VAR 0 4
25288: PUSH
25289: LD_VAR 0 8
25293: ARRAY
25294: IFFALSE 25316
// tmp := tmp & i & ; ;
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_VAR 0 3
25305: PUSH
25306: LD_VAR 0 8
25310: STR
25311: PUSH
25312: LD_STRING ;
25314: STR
25315: ST_TO_ADDR
// end ;
25316: GO 25281
25318: POP
25319: POP
// for i = 1 to hardcoreCounter do
25320: LD_ADDR_VAR 0 8
25324: PUSH
25325: DOUBLE
25326: LD_INT 1
25328: DEC
25329: ST_TO_ADDR
25330: LD_EXP 40
25334: PUSH
25335: FOR_TO
25336: IFFALSE 25382
// begin if flags [ normalCounter + i ] then
25338: LD_VAR 0 4
25342: PUSH
25343: LD_EXP 39
25347: PUSH
25348: LD_VAR 0 8
25352: PLUS
25353: ARRAY
25354: IFFALSE 25380
// tmp := tmp & ( 100 + i ) & ; ;
25356: LD_ADDR_VAR 0 3
25360: PUSH
25361: LD_VAR 0 3
25365: PUSH
25366: LD_INT 100
25368: PUSH
25369: LD_VAR 0 8
25373: PLUS
25374: STR
25375: PUSH
25376: LD_STRING ;
25378: STR
25379: ST_TO_ADDR
// end ;
25380: GO 25335
25382: POP
25383: POP
// if tmp then
25384: LD_VAR 0 3
25388: IFFALSE 25400
// active := tmp ;
25390: LD_ADDR_VAR 0 7
25394: PUSH
25395: LD_VAR 0 3
25399: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25400: LD_STRING getStreamItemsFromMission("
25402: PUSH
25403: LD_VAR 0 5
25407: STR
25408: PUSH
25409: LD_STRING ","
25411: STR
25412: PUSH
25413: LD_VAR 0 6
25417: STR
25418: PUSH
25419: LD_STRING ","
25421: STR
25422: PUSH
25423: LD_VAR 0 7
25427: STR
25428: PUSH
25429: LD_STRING ")
25431: STR
25432: PPUSH
25433: CALL_OW 559
// end else
25437: GO 25446
// ToLua ( getStreamItemsFromMission("","","") ) ;
25439: LD_STRING getStreamItemsFromMission("","","")
25441: PPUSH
25442: CALL_OW 559
// end ;
25446: LD_VAR 0 2
25450: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25451: LD_EXP 38
25455: PUSH
25456: LD_EXP 43
25460: AND
25461: IFFALSE 25585
25463: GO 25465
25465: DISABLE
25466: LD_INT 0
25468: PPUSH
25469: PPUSH
// begin enable ;
25470: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25471: LD_ADDR_VAR 0 2
25475: PUSH
25476: LD_INT 22
25478: PUSH
25479: LD_OWVAR 2
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: LD_INT 34
25493: PUSH
25494: LD_INT 7
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 34
25503: PUSH
25504: LD_INT 45
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 34
25513: PUSH
25514: LD_INT 28
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 34
25523: PUSH
25524: LD_INT 47
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PPUSH
25542: CALL_OW 69
25546: ST_TO_ADDR
// if not tmp then
25547: LD_VAR 0 2
25551: NOT
25552: IFFALSE 25556
// exit ;
25554: GO 25585
// for i in tmp do
25556: LD_ADDR_VAR 0 1
25560: PUSH
25561: LD_VAR 0 2
25565: PUSH
25566: FOR_IN
25567: IFFALSE 25583
// begin SetLives ( i , 0 ) ;
25569: LD_VAR 0 1
25573: PPUSH
25574: LD_INT 0
25576: PPUSH
25577: CALL_OW 234
// end ;
25581: GO 25566
25583: POP
25584: POP
// end ;
25585: PPOPN 2
25587: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25588: LD_EXP 38
25592: PUSH
25593: LD_EXP 44
25597: AND
25598: IFFALSE 25682
25600: GO 25602
25602: DISABLE
25603: LD_INT 0
25605: PPUSH
25606: PPUSH
// begin enable ;
25607: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25608: LD_ADDR_VAR 0 2
25612: PUSH
25613: LD_INT 22
25615: PUSH
25616: LD_OWVAR 2
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 32
25627: PUSH
25628: LD_INT 3
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PPUSH
25639: CALL_OW 69
25643: ST_TO_ADDR
// if not tmp then
25644: LD_VAR 0 2
25648: NOT
25649: IFFALSE 25653
// exit ;
25651: GO 25682
// for i in tmp do
25653: LD_ADDR_VAR 0 1
25657: PUSH
25658: LD_VAR 0 2
25662: PUSH
25663: FOR_IN
25664: IFFALSE 25680
// begin SetLives ( i , 0 ) ;
25666: LD_VAR 0 1
25670: PPUSH
25671: LD_INT 0
25673: PPUSH
25674: CALL_OW 234
// end ;
25678: GO 25663
25680: POP
25681: POP
// end ;
25682: PPOPN 2
25684: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25685: LD_EXP 38
25689: PUSH
25690: LD_EXP 41
25694: AND
25695: IFFALSE 25788
25697: GO 25699
25699: DISABLE
25700: LD_INT 0
25702: PPUSH
// begin enable ;
25703: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25704: LD_ADDR_VAR 0 1
25708: PUSH
25709: LD_INT 22
25711: PUSH
25712: LD_OWVAR 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 2
25723: PUSH
25724: LD_INT 25
25726: PUSH
25727: LD_INT 5
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 25
25736: PUSH
25737: LD_INT 9
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 25
25746: PUSH
25747: LD_INT 8
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PPUSH
25764: CALL_OW 69
25768: PUSH
25769: FOR_IN
25770: IFFALSE 25786
// begin SetClass ( i , 1 ) ;
25772: LD_VAR 0 1
25776: PPUSH
25777: LD_INT 1
25779: PPUSH
25780: CALL_OW 336
// end ;
25784: GO 25769
25786: POP
25787: POP
// end ;
25788: PPOPN 1
25790: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25791: LD_EXP 38
25795: PUSH
25796: LD_EXP 42
25800: AND
25801: PUSH
25802: LD_OWVAR 65
25806: PUSH
25807: LD_INT 7
25809: LESS
25810: AND
25811: IFFALSE 25825
25813: GO 25815
25815: DISABLE
// begin enable ;
25816: ENABLE
// game_speed := 7 ;
25817: LD_ADDR_OWVAR 65
25821: PUSH
25822: LD_INT 7
25824: ST_TO_ADDR
// end ;
25825: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25826: LD_EXP 38
25830: PUSH
25831: LD_EXP 45
25835: AND
25836: IFFALSE 26038
25838: GO 25840
25840: DISABLE
25841: LD_INT 0
25843: PPUSH
25844: PPUSH
25845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25846: LD_ADDR_VAR 0 3
25850: PUSH
25851: LD_INT 81
25853: PUSH
25854: LD_OWVAR 2
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 21
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PPUSH
25877: CALL_OW 69
25881: ST_TO_ADDR
// if not tmp then
25882: LD_VAR 0 3
25886: NOT
25887: IFFALSE 25891
// exit ;
25889: GO 26038
// if tmp > 5 then
25891: LD_VAR 0 3
25895: PUSH
25896: LD_INT 5
25898: GREATER
25899: IFFALSE 25911
// k := 5 else
25901: LD_ADDR_VAR 0 2
25905: PUSH
25906: LD_INT 5
25908: ST_TO_ADDR
25909: GO 25921
// k := tmp ;
25911: LD_ADDR_VAR 0 2
25915: PUSH
25916: LD_VAR 0 3
25920: ST_TO_ADDR
// for i := 1 to k do
25921: LD_ADDR_VAR 0 1
25925: PUSH
25926: DOUBLE
25927: LD_INT 1
25929: DEC
25930: ST_TO_ADDR
25931: LD_VAR 0 2
25935: PUSH
25936: FOR_TO
25937: IFFALSE 26036
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25939: LD_VAR 0 3
25943: PUSH
25944: LD_VAR 0 1
25948: ARRAY
25949: PPUSH
25950: LD_VAR 0 1
25954: PUSH
25955: LD_INT 4
25957: MOD
25958: PUSH
25959: LD_INT 1
25961: PLUS
25962: PPUSH
25963: CALL_OW 259
25967: PUSH
25968: LD_INT 10
25970: LESS
25971: IFFALSE 26034
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25973: LD_VAR 0 3
25977: PUSH
25978: LD_VAR 0 1
25982: ARRAY
25983: PPUSH
25984: LD_VAR 0 1
25988: PUSH
25989: LD_INT 4
25991: MOD
25992: PUSH
25993: LD_INT 1
25995: PLUS
25996: PPUSH
25997: LD_VAR 0 3
26001: PUSH
26002: LD_VAR 0 1
26006: ARRAY
26007: PPUSH
26008: LD_VAR 0 1
26012: PUSH
26013: LD_INT 4
26015: MOD
26016: PUSH
26017: LD_INT 1
26019: PLUS
26020: PPUSH
26021: CALL_OW 259
26025: PUSH
26026: LD_INT 1
26028: PLUS
26029: PPUSH
26030: CALL_OW 237
26034: GO 25936
26036: POP
26037: POP
// end ;
26038: PPOPN 3
26040: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26041: LD_EXP 38
26045: PUSH
26046: LD_EXP 46
26050: AND
26051: IFFALSE 26071
26053: GO 26055
26055: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26056: LD_INT 4
26058: PPUSH
26059: LD_OWVAR 2
26063: PPUSH
26064: LD_INT 0
26066: PPUSH
26067: CALL_OW 324
26071: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26072: LD_EXP 38
26076: PUSH
26077: LD_EXP 75
26081: AND
26082: IFFALSE 26102
26084: GO 26086
26086: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26087: LD_INT 19
26089: PPUSH
26090: LD_OWVAR 2
26094: PPUSH
26095: LD_INT 0
26097: PPUSH
26098: CALL_OW 324
26102: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26103: LD_EXP 38
26107: PUSH
26108: LD_EXP 47
26112: AND
26113: IFFALSE 26215
26115: GO 26117
26117: DISABLE
26118: LD_INT 0
26120: PPUSH
26121: PPUSH
// begin enable ;
26122: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26123: LD_ADDR_VAR 0 2
26127: PUSH
26128: LD_INT 22
26130: PUSH
26131: LD_OWVAR 2
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 2
26142: PUSH
26143: LD_INT 34
26145: PUSH
26146: LD_INT 11
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 34
26155: PUSH
26156: LD_INT 30
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PPUSH
26172: CALL_OW 69
26176: ST_TO_ADDR
// if not tmp then
26177: LD_VAR 0 2
26181: NOT
26182: IFFALSE 26186
// exit ;
26184: GO 26215
// for i in tmp do
26186: LD_ADDR_VAR 0 1
26190: PUSH
26191: LD_VAR 0 2
26195: PUSH
26196: FOR_IN
26197: IFFALSE 26213
// begin SetLives ( i , 0 ) ;
26199: LD_VAR 0 1
26203: PPUSH
26204: LD_INT 0
26206: PPUSH
26207: CALL_OW 234
// end ;
26211: GO 26196
26213: POP
26214: POP
// end ;
26215: PPOPN 2
26217: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26218: LD_EXP 38
26222: PUSH
26223: LD_EXP 48
26227: AND
26228: IFFALSE 26248
26230: GO 26232
26232: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26233: LD_INT 32
26235: PPUSH
26236: LD_OWVAR 2
26240: PPUSH
26241: LD_INT 0
26243: PPUSH
26244: CALL_OW 324
26248: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26249: LD_EXP 38
26253: PUSH
26254: LD_EXP 49
26258: AND
26259: IFFALSE 26440
26261: GO 26263
26263: DISABLE
26264: LD_INT 0
26266: PPUSH
26267: PPUSH
26268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26269: LD_ADDR_VAR 0 2
26273: PUSH
26274: LD_INT 22
26276: PUSH
26277: LD_OWVAR 2
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 33
26288: PUSH
26289: LD_INT 3
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PPUSH
26300: CALL_OW 69
26304: ST_TO_ADDR
// if not tmp then
26305: LD_VAR 0 2
26309: NOT
26310: IFFALSE 26314
// exit ;
26312: GO 26440
// side := 0 ;
26314: LD_ADDR_VAR 0 3
26318: PUSH
26319: LD_INT 0
26321: ST_TO_ADDR
// for i := 1 to 8 do
26322: LD_ADDR_VAR 0 1
26326: PUSH
26327: DOUBLE
26328: LD_INT 1
26330: DEC
26331: ST_TO_ADDR
26332: LD_INT 8
26334: PUSH
26335: FOR_TO
26336: IFFALSE 26384
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26338: LD_OWVAR 2
26342: PUSH
26343: LD_VAR 0 1
26347: NONEQUAL
26348: PUSH
26349: LD_OWVAR 2
26353: PPUSH
26354: LD_VAR 0 1
26358: PPUSH
26359: CALL_OW 81
26363: PUSH
26364: LD_INT 2
26366: EQUAL
26367: AND
26368: IFFALSE 26382
// begin side := i ;
26370: LD_ADDR_VAR 0 3
26374: PUSH
26375: LD_VAR 0 1
26379: ST_TO_ADDR
// break ;
26380: GO 26384
// end ;
26382: GO 26335
26384: POP
26385: POP
// if not side then
26386: LD_VAR 0 3
26390: NOT
26391: IFFALSE 26395
// exit ;
26393: GO 26440
// for i := 1 to tmp do
26395: LD_ADDR_VAR 0 1
26399: PUSH
26400: DOUBLE
26401: LD_INT 1
26403: DEC
26404: ST_TO_ADDR
26405: LD_VAR 0 2
26409: PUSH
26410: FOR_TO
26411: IFFALSE 26438
// if Prob ( 60 ) then
26413: LD_INT 60
26415: PPUSH
26416: CALL_OW 13
26420: IFFALSE 26436
// SetSide ( i , side ) ;
26422: LD_VAR 0 1
26426: PPUSH
26427: LD_VAR 0 3
26431: PPUSH
26432: CALL_OW 235
26436: GO 26410
26438: POP
26439: POP
// end ;
26440: PPOPN 3
26442: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26443: LD_EXP 38
26447: PUSH
26448: LD_EXP 51
26452: AND
26453: IFFALSE 26572
26455: GO 26457
26457: DISABLE
26458: LD_INT 0
26460: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26461: LD_ADDR_VAR 0 1
26465: PUSH
26466: LD_INT 22
26468: PUSH
26469: LD_OWVAR 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 21
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 3
26490: PUSH
26491: LD_INT 23
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: LIST
26509: PPUSH
26510: CALL_OW 69
26514: PUSH
26515: FOR_IN
26516: IFFALSE 26570
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26518: LD_VAR 0 1
26522: PPUSH
26523: CALL_OW 257
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: LD_INT 3
26536: PUSH
26537: LD_INT 4
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: IN
26546: IFFALSE 26568
// SetClass ( un , rand ( 1 , 4 ) ) ;
26548: LD_VAR 0 1
26552: PPUSH
26553: LD_INT 1
26555: PPUSH
26556: LD_INT 4
26558: PPUSH
26559: CALL_OW 12
26563: PPUSH
26564: CALL_OW 336
26568: GO 26515
26570: POP
26571: POP
// end ;
26572: PPOPN 1
26574: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26575: LD_EXP 38
26579: PUSH
26580: LD_EXP 50
26584: AND
26585: IFFALSE 26664
26587: GO 26589
26589: DISABLE
26590: LD_INT 0
26592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26593: LD_ADDR_VAR 0 1
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_OWVAR 2
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 21
26612: PUSH
26613: LD_INT 3
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PPUSH
26624: CALL_OW 69
26628: ST_TO_ADDR
// if not tmp then
26629: LD_VAR 0 1
26633: NOT
26634: IFFALSE 26638
// exit ;
26636: GO 26664
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26638: LD_VAR 0 1
26642: PUSH
26643: LD_INT 1
26645: PPUSH
26646: LD_VAR 0 1
26650: PPUSH
26651: CALL_OW 12
26655: ARRAY
26656: PPUSH
26657: LD_INT 100
26659: PPUSH
26660: CALL_OW 234
// end ;
26664: PPOPN 1
26666: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26667: LD_EXP 38
26671: PUSH
26672: LD_EXP 52
26676: AND
26677: IFFALSE 26775
26679: GO 26681
26681: DISABLE
26682: LD_INT 0
26684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26685: LD_ADDR_VAR 0 1
26689: PUSH
26690: LD_INT 22
26692: PUSH
26693: LD_OWVAR 2
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 21
26704: PUSH
26705: LD_INT 1
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PPUSH
26716: CALL_OW 69
26720: ST_TO_ADDR
// if not tmp then
26721: LD_VAR 0 1
26725: NOT
26726: IFFALSE 26730
// exit ;
26728: GO 26775
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26730: LD_VAR 0 1
26734: PUSH
26735: LD_INT 1
26737: PPUSH
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 12
26747: ARRAY
26748: PPUSH
26749: LD_INT 1
26751: PPUSH
26752: LD_INT 4
26754: PPUSH
26755: CALL_OW 12
26759: PPUSH
26760: LD_INT 3000
26762: PPUSH
26763: LD_INT 9000
26765: PPUSH
26766: CALL_OW 12
26770: PPUSH
26771: CALL_OW 492
// end ;
26775: PPOPN 1
26777: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26778: LD_EXP 38
26782: PUSH
26783: LD_EXP 53
26787: AND
26788: IFFALSE 26808
26790: GO 26792
26792: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26793: LD_INT 1
26795: PPUSH
26796: LD_OWVAR 2
26800: PPUSH
26801: LD_INT 0
26803: PPUSH
26804: CALL_OW 324
26808: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26809: LD_EXP 38
26813: PUSH
26814: LD_EXP 54
26818: AND
26819: IFFALSE 26902
26821: GO 26823
26823: DISABLE
26824: LD_INT 0
26826: PPUSH
26827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26828: LD_ADDR_VAR 0 2
26832: PUSH
26833: LD_INT 22
26835: PUSH
26836: LD_OWVAR 2
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 21
26847: PUSH
26848: LD_INT 3
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PPUSH
26859: CALL_OW 69
26863: ST_TO_ADDR
// if not tmp then
26864: LD_VAR 0 2
26868: NOT
26869: IFFALSE 26873
// exit ;
26871: GO 26902
// for i in tmp do
26873: LD_ADDR_VAR 0 1
26877: PUSH
26878: LD_VAR 0 2
26882: PUSH
26883: FOR_IN
26884: IFFALSE 26900
// SetBLevel ( i , 10 ) ;
26886: LD_VAR 0 1
26890: PPUSH
26891: LD_INT 10
26893: PPUSH
26894: CALL_OW 241
26898: GO 26883
26900: POP
26901: POP
// end ;
26902: PPOPN 2
26904: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26905: LD_EXP 38
26909: PUSH
26910: LD_EXP 55
26914: AND
26915: IFFALSE 27026
26917: GO 26919
26919: DISABLE
26920: LD_INT 0
26922: PPUSH
26923: PPUSH
26924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26925: LD_ADDR_VAR 0 3
26929: PUSH
26930: LD_INT 22
26932: PUSH
26933: LD_OWVAR 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 25
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PPUSH
26956: CALL_OW 69
26960: ST_TO_ADDR
// if not tmp then
26961: LD_VAR 0 3
26965: NOT
26966: IFFALSE 26970
// exit ;
26968: GO 27026
// un := tmp [ rand ( 1 , tmp ) ] ;
26970: LD_ADDR_VAR 0 2
26974: PUSH
26975: LD_VAR 0 3
26979: PUSH
26980: LD_INT 1
26982: PPUSH
26983: LD_VAR 0 3
26987: PPUSH
26988: CALL_OW 12
26992: ARRAY
26993: ST_TO_ADDR
// if Crawls ( un ) then
26994: LD_VAR 0 2
26998: PPUSH
26999: CALL_OW 318
27003: IFFALSE 27014
// ComWalk ( un ) ;
27005: LD_VAR 0 2
27009: PPUSH
27010: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27014: LD_VAR 0 2
27018: PPUSH
27019: LD_INT 5
27021: PPUSH
27022: CALL_OW 336
// end ;
27026: PPOPN 3
27028: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27029: LD_EXP 38
27033: PUSH
27034: LD_EXP 56
27038: AND
27039: PUSH
27040: LD_OWVAR 67
27044: PUSH
27045: LD_INT 4
27047: LESS
27048: AND
27049: IFFALSE 27068
27051: GO 27053
27053: DISABLE
// begin Difficulty := Difficulty + 1 ;
27054: LD_ADDR_OWVAR 67
27058: PUSH
27059: LD_OWVAR 67
27063: PUSH
27064: LD_INT 1
27066: PLUS
27067: ST_TO_ADDR
// end ;
27068: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27069: LD_EXP 38
27073: PUSH
27074: LD_EXP 57
27078: AND
27079: IFFALSE 27182
27081: GO 27083
27083: DISABLE
27084: LD_INT 0
27086: PPUSH
// begin for i := 1 to 5 do
27087: LD_ADDR_VAR 0 1
27091: PUSH
27092: DOUBLE
27093: LD_INT 1
27095: DEC
27096: ST_TO_ADDR
27097: LD_INT 5
27099: PUSH
27100: FOR_TO
27101: IFFALSE 27180
// begin uc_nation := nation_nature ;
27103: LD_ADDR_OWVAR 21
27107: PUSH
27108: LD_INT 0
27110: ST_TO_ADDR
// uc_side := 0 ;
27111: LD_ADDR_OWVAR 20
27115: PUSH
27116: LD_INT 0
27118: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27119: LD_ADDR_OWVAR 29
27123: PUSH
27124: LD_INT 12
27126: PUSH
27127: LD_INT 12
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: ST_TO_ADDR
// hc_agressivity := 20 ;
27134: LD_ADDR_OWVAR 35
27138: PUSH
27139: LD_INT 20
27141: ST_TO_ADDR
// hc_class := class_tiger ;
27142: LD_ADDR_OWVAR 28
27146: PUSH
27147: LD_INT 14
27149: ST_TO_ADDR
// hc_gallery :=  ;
27150: LD_ADDR_OWVAR 33
27154: PUSH
27155: LD_STRING 
27157: ST_TO_ADDR
// hc_name :=  ;
27158: LD_ADDR_OWVAR 26
27162: PUSH
27163: LD_STRING 
27165: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27166: CALL_OW 44
27170: PPUSH
27171: LD_INT 0
27173: PPUSH
27174: CALL_OW 51
// end ;
27178: GO 27100
27180: POP
27181: POP
// end ;
27182: PPOPN 1
27184: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27185: LD_EXP 38
27189: PUSH
27190: LD_EXP 58
27194: AND
27195: IFFALSE 27204
27197: GO 27199
27199: DISABLE
// StreamSibBomb ;
27200: CALL 27205 0 0
27204: END
// export function StreamSibBomb ; var i , x , y ; begin
27205: LD_INT 0
27207: PPUSH
27208: PPUSH
27209: PPUSH
27210: PPUSH
// result := false ;
27211: LD_ADDR_VAR 0 1
27215: PUSH
27216: LD_INT 0
27218: ST_TO_ADDR
// for i := 1 to 16 do
27219: LD_ADDR_VAR 0 2
27223: PUSH
27224: DOUBLE
27225: LD_INT 1
27227: DEC
27228: ST_TO_ADDR
27229: LD_INT 16
27231: PUSH
27232: FOR_TO
27233: IFFALSE 27432
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27235: LD_ADDR_VAR 0 3
27239: PUSH
27240: LD_INT 10
27242: PUSH
27243: LD_INT 20
27245: PUSH
27246: LD_INT 30
27248: PUSH
27249: LD_INT 40
27251: PUSH
27252: LD_INT 50
27254: PUSH
27255: LD_INT 60
27257: PUSH
27258: LD_INT 70
27260: PUSH
27261: LD_INT 80
27263: PUSH
27264: LD_INT 90
27266: PUSH
27267: LD_INT 100
27269: PUSH
27270: LD_INT 110
27272: PUSH
27273: LD_INT 120
27275: PUSH
27276: LD_INT 130
27278: PUSH
27279: LD_INT 140
27281: PUSH
27282: LD_INT 150
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: PPUSH
27305: LD_INT 15
27307: PPUSH
27308: CALL_OW 12
27312: ARRAY
27313: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27314: LD_ADDR_VAR 0 4
27318: PUSH
27319: LD_INT 10
27321: PUSH
27322: LD_INT 20
27324: PUSH
27325: LD_INT 30
27327: PUSH
27328: LD_INT 40
27330: PUSH
27331: LD_INT 50
27333: PUSH
27334: LD_INT 60
27336: PUSH
27337: LD_INT 70
27339: PUSH
27340: LD_INT 80
27342: PUSH
27343: LD_INT 90
27345: PUSH
27346: LD_INT 100
27348: PUSH
27349: LD_INT 110
27351: PUSH
27352: LD_INT 120
27354: PUSH
27355: LD_INT 130
27357: PUSH
27358: LD_INT 140
27360: PUSH
27361: LD_INT 150
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: PPUSH
27384: LD_INT 15
27386: PPUSH
27387: CALL_OW 12
27391: ARRAY
27392: ST_TO_ADDR
// if ValidHex ( x , y ) then
27393: LD_VAR 0 3
27397: PPUSH
27398: LD_VAR 0 4
27402: PPUSH
27403: CALL_OW 488
27407: IFFALSE 27430
// begin result := [ x , y ] ;
27409: LD_ADDR_VAR 0 1
27413: PUSH
27414: LD_VAR 0 3
27418: PUSH
27419: LD_VAR 0 4
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: ST_TO_ADDR
// break ;
27428: GO 27432
// end ; end ;
27430: GO 27232
27432: POP
27433: POP
// if result then
27434: LD_VAR 0 1
27438: IFFALSE 27498
// begin ToLua ( playSibBomb() ) ;
27440: LD_STRING playSibBomb()
27442: PPUSH
27443: CALL_OW 559
// wait ( 0 0$14 ) ;
27447: LD_INT 490
27449: PPUSH
27450: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27454: LD_VAR 0 1
27458: PUSH
27459: LD_INT 1
27461: ARRAY
27462: PPUSH
27463: LD_VAR 0 1
27467: PUSH
27468: LD_INT 2
27470: ARRAY
27471: PPUSH
27472: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27476: LD_VAR 0 1
27480: PUSH
27481: LD_INT 1
27483: ARRAY
27484: PPUSH
27485: LD_VAR 0 1
27489: PUSH
27490: LD_INT 2
27492: ARRAY
27493: PPUSH
27494: CALL_OW 429
// end ; end ;
27498: LD_VAR 0 1
27502: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27503: LD_EXP 38
27507: PUSH
27508: LD_EXP 60
27512: AND
27513: IFFALSE 27525
27515: GO 27517
27517: DISABLE
// YouLost (  ) ;
27518: LD_STRING 
27520: PPUSH
27521: CALL_OW 104
27525: END
// every 0 0$1 trigger StreamModeActive and sFog do
27526: LD_EXP 38
27530: PUSH
27531: LD_EXP 59
27535: AND
27536: IFFALSE 27550
27538: GO 27540
27540: DISABLE
// FogOff ( your_side ) ;
27541: LD_OWVAR 2
27545: PPUSH
27546: CALL_OW 344
27550: END
// every 0 0$1 trigger StreamModeActive and sSun do
27551: LD_EXP 38
27555: PUSH
27556: LD_EXP 61
27560: AND
27561: IFFALSE 27589
27563: GO 27565
27565: DISABLE
// begin solar_recharge_percent := 0 ;
27566: LD_ADDR_OWVAR 79
27570: PUSH
27571: LD_INT 0
27573: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27574: LD_INT 10500
27576: PPUSH
27577: CALL_OW 67
// solar_recharge_percent := 100 ;
27581: LD_ADDR_OWVAR 79
27585: PUSH
27586: LD_INT 100
27588: ST_TO_ADDR
// end ;
27589: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27590: LD_EXP 38
27594: PUSH
27595: LD_EXP 62
27599: AND
27600: IFFALSE 27839
27602: GO 27604
27604: DISABLE
27605: LD_INT 0
27607: PPUSH
27608: PPUSH
27609: PPUSH
// begin tmp := [ ] ;
27610: LD_ADDR_VAR 0 3
27614: PUSH
27615: EMPTY
27616: ST_TO_ADDR
// for i := 1 to 6 do
27617: LD_ADDR_VAR 0 1
27621: PUSH
27622: DOUBLE
27623: LD_INT 1
27625: DEC
27626: ST_TO_ADDR
27627: LD_INT 6
27629: PUSH
27630: FOR_TO
27631: IFFALSE 27736
// begin uc_nation := nation_nature ;
27633: LD_ADDR_OWVAR 21
27637: PUSH
27638: LD_INT 0
27640: ST_TO_ADDR
// uc_side := 0 ;
27641: LD_ADDR_OWVAR 20
27645: PUSH
27646: LD_INT 0
27648: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27649: LD_ADDR_OWVAR 29
27653: PUSH
27654: LD_INT 12
27656: PUSH
27657: LD_INT 12
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: ST_TO_ADDR
// hc_agressivity := 20 ;
27664: LD_ADDR_OWVAR 35
27668: PUSH
27669: LD_INT 20
27671: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27672: LD_ADDR_OWVAR 28
27676: PUSH
27677: LD_INT 17
27679: ST_TO_ADDR
// hc_gallery :=  ;
27680: LD_ADDR_OWVAR 33
27684: PUSH
27685: LD_STRING 
27687: ST_TO_ADDR
// hc_name :=  ;
27688: LD_ADDR_OWVAR 26
27692: PUSH
27693: LD_STRING 
27695: ST_TO_ADDR
// un := CreateHuman ;
27696: LD_ADDR_VAR 0 2
27700: PUSH
27701: CALL_OW 44
27705: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27706: LD_VAR 0 2
27710: PPUSH
27711: LD_INT 1
27713: PPUSH
27714: CALL_OW 51
// tmp := tmp ^ un ;
27718: LD_ADDR_VAR 0 3
27722: PUSH
27723: LD_VAR 0 3
27727: PUSH
27728: LD_VAR 0 2
27732: ADD
27733: ST_TO_ADDR
// end ;
27734: GO 27630
27736: POP
27737: POP
// repeat wait ( 0 0$1 ) ;
27738: LD_INT 35
27740: PPUSH
27741: CALL_OW 67
// for un in tmp do
27745: LD_ADDR_VAR 0 2
27749: PUSH
27750: LD_VAR 0 3
27754: PUSH
27755: FOR_IN
27756: IFFALSE 27830
// begin if IsDead ( un ) then
27758: LD_VAR 0 2
27762: PPUSH
27763: CALL_OW 301
27767: IFFALSE 27787
// begin tmp := tmp diff un ;
27769: LD_ADDR_VAR 0 3
27773: PUSH
27774: LD_VAR 0 3
27778: PUSH
27779: LD_VAR 0 2
27783: DIFF
27784: ST_TO_ADDR
// continue ;
27785: GO 27755
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27787: LD_VAR 0 2
27791: PPUSH
27792: LD_INT 3
27794: PUSH
27795: LD_INT 22
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PPUSH
27809: CALL_OW 69
27813: PPUSH
27814: LD_VAR 0 2
27818: PPUSH
27819: CALL_OW 74
27823: PPUSH
27824: CALL_OW 115
// end ;
27828: GO 27755
27830: POP
27831: POP
// until not tmp ;
27832: LD_VAR 0 3
27836: NOT
27837: IFFALSE 27738
// end ;
27839: PPOPN 3
27841: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27842: LD_EXP 38
27846: PUSH
27847: LD_EXP 63
27851: AND
27852: IFFALSE 27906
27854: GO 27856
27856: DISABLE
// begin ToLua ( displayTroll(); ) ;
27857: LD_STRING displayTroll();
27859: PPUSH
27860: CALL_OW 559
// wait ( 3 3$00 ) ;
27864: LD_INT 6300
27866: PPUSH
27867: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27871: LD_STRING hideTroll();
27873: PPUSH
27874: CALL_OW 559
// wait ( 1 1$00 ) ;
27878: LD_INT 2100
27880: PPUSH
27881: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27885: LD_STRING displayTroll();
27887: PPUSH
27888: CALL_OW 559
// wait ( 1 1$00 ) ;
27892: LD_INT 2100
27894: PPUSH
27895: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27899: LD_STRING hideTroll();
27901: PPUSH
27902: CALL_OW 559
// end ;
27906: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27907: LD_EXP 38
27911: PUSH
27912: LD_EXP 64
27916: AND
27917: IFFALSE 27980
27919: GO 27921
27921: DISABLE
27922: LD_INT 0
27924: PPUSH
// begin p := 0 ;
27925: LD_ADDR_VAR 0 1
27929: PUSH
27930: LD_INT 0
27932: ST_TO_ADDR
// repeat game_speed := 1 ;
27933: LD_ADDR_OWVAR 65
27937: PUSH
27938: LD_INT 1
27940: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27941: LD_INT 35
27943: PPUSH
27944: CALL_OW 67
// p := p + 1 ;
27948: LD_ADDR_VAR 0 1
27952: PUSH
27953: LD_VAR 0 1
27957: PUSH
27958: LD_INT 1
27960: PLUS
27961: ST_TO_ADDR
// until p >= 60 ;
27962: LD_VAR 0 1
27966: PUSH
27967: LD_INT 60
27969: GREATEREQUAL
27970: IFFALSE 27933
// game_speed := 4 ;
27972: LD_ADDR_OWVAR 65
27976: PUSH
27977: LD_INT 4
27979: ST_TO_ADDR
// end ;
27980: PPOPN 1
27982: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27983: LD_EXP 38
27987: PUSH
27988: LD_EXP 65
27992: AND
27993: IFFALSE 28139
27995: GO 27997
27997: DISABLE
27998: LD_INT 0
28000: PPUSH
28001: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28002: LD_ADDR_VAR 0 1
28006: PUSH
28007: LD_INT 22
28009: PUSH
28010: LD_OWVAR 2
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: LD_INT 30
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 30
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PPUSH
28051: CALL_OW 69
28055: ST_TO_ADDR
// if not depot then
28056: LD_VAR 0 1
28060: NOT
28061: IFFALSE 28065
// exit ;
28063: GO 28139
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28065: LD_ADDR_VAR 0 2
28069: PUSH
28070: LD_VAR 0 1
28074: PUSH
28075: LD_INT 1
28077: PPUSH
28078: LD_VAR 0 1
28082: PPUSH
28083: CALL_OW 12
28087: ARRAY
28088: PPUSH
28089: CALL_OW 274
28093: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28094: LD_VAR 0 2
28098: PPUSH
28099: LD_INT 1
28101: PPUSH
28102: LD_INT 0
28104: PPUSH
28105: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28109: LD_VAR 0 2
28113: PPUSH
28114: LD_INT 2
28116: PPUSH
28117: LD_INT 0
28119: PPUSH
28120: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28124: LD_VAR 0 2
28128: PPUSH
28129: LD_INT 3
28131: PPUSH
28132: LD_INT 0
28134: PPUSH
28135: CALL_OW 277
// end ;
28139: PPOPN 2
28141: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28142: LD_EXP 38
28146: PUSH
28147: LD_EXP 66
28151: AND
28152: IFFALSE 28249
28154: GO 28156
28156: DISABLE
28157: LD_INT 0
28159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28160: LD_ADDR_VAR 0 1
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 21
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 3
28189: PUSH
28190: LD_INT 23
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: LIST
28208: PPUSH
28209: CALL_OW 69
28213: ST_TO_ADDR
// if not tmp then
28214: LD_VAR 0 1
28218: NOT
28219: IFFALSE 28223
// exit ;
28221: GO 28249
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28223: LD_VAR 0 1
28227: PUSH
28228: LD_INT 1
28230: PPUSH
28231: LD_VAR 0 1
28235: PPUSH
28236: CALL_OW 12
28240: ARRAY
28241: PPUSH
28242: LD_INT 200
28244: PPUSH
28245: CALL_OW 234
// end ;
28249: PPOPN 1
28251: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28252: LD_EXP 38
28256: PUSH
28257: LD_EXP 67
28261: AND
28262: IFFALSE 28341
28264: GO 28266
28266: DISABLE
28267: LD_INT 0
28269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28270: LD_ADDR_VAR 0 1
28274: PUSH
28275: LD_INT 22
28277: PUSH
28278: LD_OWVAR 2
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 21
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PPUSH
28301: CALL_OW 69
28305: ST_TO_ADDR
// if not tmp then
28306: LD_VAR 0 1
28310: NOT
28311: IFFALSE 28315
// exit ;
28313: GO 28341
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28315: LD_VAR 0 1
28319: PUSH
28320: LD_INT 1
28322: PPUSH
28323: LD_VAR 0 1
28327: PPUSH
28328: CALL_OW 12
28332: ARRAY
28333: PPUSH
28334: LD_INT 60
28336: PPUSH
28337: CALL_OW 234
// end ;
28341: PPOPN 1
28343: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28344: LD_EXP 38
28348: PUSH
28349: LD_EXP 68
28353: AND
28354: IFFALSE 28453
28356: GO 28358
28358: DISABLE
28359: LD_INT 0
28361: PPUSH
28362: PPUSH
// begin enable ;
28363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28364: LD_ADDR_VAR 0 1
28368: PUSH
28369: LD_INT 22
28371: PUSH
28372: LD_OWVAR 2
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 61
28383: PUSH
28384: EMPTY
28385: LIST
28386: PUSH
28387: LD_INT 33
28389: PUSH
28390: LD_INT 2
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: LIST
28401: PPUSH
28402: CALL_OW 69
28406: ST_TO_ADDR
// if not tmp then
28407: LD_VAR 0 1
28411: NOT
28412: IFFALSE 28416
// exit ;
28414: GO 28453
// for i in tmp do
28416: LD_ADDR_VAR 0 2
28420: PUSH
28421: LD_VAR 0 1
28425: PUSH
28426: FOR_IN
28427: IFFALSE 28451
// if IsControledBy ( i ) then
28429: LD_VAR 0 2
28433: PPUSH
28434: CALL_OW 312
28438: IFFALSE 28449
// ComUnlink ( i ) ;
28440: LD_VAR 0 2
28444: PPUSH
28445: CALL_OW 136
28449: GO 28426
28451: POP
28452: POP
// end ;
28453: PPOPN 2
28455: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28456: LD_EXP 38
28460: PUSH
28461: LD_EXP 69
28465: AND
28466: IFFALSE 28606
28468: GO 28470
28470: DISABLE
28471: LD_INT 0
28473: PPUSH
28474: PPUSH
// begin ToLua ( displayPowell(); ) ;
28475: LD_STRING displayPowell();
28477: PPUSH
28478: CALL_OW 559
// uc_side := 0 ;
28482: LD_ADDR_OWVAR 20
28486: PUSH
28487: LD_INT 0
28489: ST_TO_ADDR
// uc_nation := 2 ;
28490: LD_ADDR_OWVAR 21
28494: PUSH
28495: LD_INT 2
28497: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28498: LD_ADDR_OWVAR 37
28502: PUSH
28503: LD_INT 14
28505: ST_TO_ADDR
// vc_engine := engine_siberite ;
28506: LD_ADDR_OWVAR 39
28510: PUSH
28511: LD_INT 3
28513: ST_TO_ADDR
// vc_control := control_apeman ;
28514: LD_ADDR_OWVAR 38
28518: PUSH
28519: LD_INT 5
28521: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28522: LD_ADDR_OWVAR 40
28526: PUSH
28527: LD_INT 29
28529: ST_TO_ADDR
// un := CreateVehicle ;
28530: LD_ADDR_VAR 0 2
28534: PUSH
28535: CALL_OW 45
28539: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28540: LD_VAR 0 2
28544: PPUSH
28545: LD_INT 1
28547: PPUSH
28548: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28552: LD_INT 35
28554: PPUSH
28555: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28559: LD_VAR 0 2
28563: PPUSH
28564: LD_INT 22
28566: PUSH
28567: LD_OWVAR 2
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PPUSH
28576: CALL_OW 69
28580: PPUSH
28581: LD_VAR 0 2
28585: PPUSH
28586: CALL_OW 74
28590: PPUSH
28591: CALL_OW 115
// until IsDead ( un ) ;
28595: LD_VAR 0 2
28599: PPUSH
28600: CALL_OW 301
28604: IFFALSE 28552
// end ;
28606: PPOPN 2
28608: END
// every 0 0$1 trigger StreamModeActive and sStu do
28609: LD_EXP 38
28613: PUSH
28614: LD_EXP 77
28618: AND
28619: IFFALSE 28635
28621: GO 28623
28623: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28624: LD_STRING displayStucuk();
28626: PPUSH
28627: CALL_OW 559
// ResetFog ;
28631: CALL_OW 335
// end ;
28635: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28636: LD_EXP 38
28640: PUSH
28641: LD_EXP 70
28645: AND
28646: IFFALSE 28787
28648: GO 28650
28650: DISABLE
28651: LD_INT 0
28653: PPUSH
28654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28655: LD_ADDR_VAR 0 2
28659: PUSH
28660: LD_INT 22
28662: PUSH
28663: LD_OWVAR 2
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 21
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PPUSH
28686: CALL_OW 69
28690: ST_TO_ADDR
// if not tmp then
28691: LD_VAR 0 2
28695: NOT
28696: IFFALSE 28700
// exit ;
28698: GO 28787
// un := tmp [ rand ( 1 , tmp ) ] ;
28700: LD_ADDR_VAR 0 1
28704: PUSH
28705: LD_VAR 0 2
28709: PUSH
28710: LD_INT 1
28712: PPUSH
28713: LD_VAR 0 2
28717: PPUSH
28718: CALL_OW 12
28722: ARRAY
28723: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28724: LD_VAR 0 1
28728: PPUSH
28729: LD_INT 0
28731: PPUSH
28732: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28736: LD_VAR 0 1
28740: PPUSH
28741: LD_OWVAR 3
28745: PUSH
28746: LD_VAR 0 1
28750: DIFF
28751: PPUSH
28752: LD_VAR 0 1
28756: PPUSH
28757: CALL_OW 74
28761: PPUSH
28762: CALL_OW 115
// wait ( 0 0$20 ) ;
28766: LD_INT 700
28768: PPUSH
28769: CALL_OW 67
// SetSide ( un , your_side ) ;
28773: LD_VAR 0 1
28777: PPUSH
28778: LD_OWVAR 2
28782: PPUSH
28783: CALL_OW 235
// end ;
28787: PPOPN 2
28789: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28790: LD_EXP 38
28794: PUSH
28795: LD_EXP 71
28799: AND
28800: IFFALSE 28906
28802: GO 28804
28804: DISABLE
28805: LD_INT 0
28807: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28808: LD_ADDR_VAR 0 1
28812: PUSH
28813: LD_INT 22
28815: PUSH
28816: LD_OWVAR 2
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 2
28827: PUSH
28828: LD_INT 30
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 30
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: LIST
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PPUSH
28857: CALL_OW 69
28861: ST_TO_ADDR
// if not depot then
28862: LD_VAR 0 1
28866: NOT
28867: IFFALSE 28871
// exit ;
28869: GO 28906
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28871: LD_VAR 0 1
28875: PUSH
28876: LD_INT 1
28878: ARRAY
28879: PPUSH
28880: CALL_OW 250
28884: PPUSH
28885: LD_VAR 0 1
28889: PUSH
28890: LD_INT 1
28892: ARRAY
28893: PPUSH
28894: CALL_OW 251
28898: PPUSH
28899: LD_INT 70
28901: PPUSH
28902: CALL_OW 495
// end ;
28906: PPOPN 1
28908: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28909: LD_EXP 38
28913: PUSH
28914: LD_EXP 72
28918: AND
28919: IFFALSE 29130
28921: GO 28923
28923: DISABLE
28924: LD_INT 0
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
28930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28931: LD_ADDR_VAR 0 5
28935: PUSH
28936: LD_INT 22
28938: PUSH
28939: LD_OWVAR 2
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 21
28950: PUSH
28951: LD_INT 1
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PPUSH
28962: CALL_OW 69
28966: ST_TO_ADDR
// if not tmp then
28967: LD_VAR 0 5
28971: NOT
28972: IFFALSE 28976
// exit ;
28974: GO 29130
// for i in tmp do
28976: LD_ADDR_VAR 0 1
28980: PUSH
28981: LD_VAR 0 5
28985: PUSH
28986: FOR_IN
28987: IFFALSE 29128
// begin d := rand ( 0 , 5 ) ;
28989: LD_ADDR_VAR 0 4
28993: PUSH
28994: LD_INT 0
28996: PPUSH
28997: LD_INT 5
28999: PPUSH
29000: CALL_OW 12
29004: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29005: LD_ADDR_VAR 0 2
29009: PUSH
29010: LD_VAR 0 1
29014: PPUSH
29015: CALL_OW 250
29019: PPUSH
29020: LD_VAR 0 4
29024: PPUSH
29025: LD_INT 3
29027: PPUSH
29028: LD_INT 12
29030: PPUSH
29031: CALL_OW 12
29035: PPUSH
29036: CALL_OW 272
29040: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_VAR 0 1
29050: PPUSH
29051: CALL_OW 251
29055: PPUSH
29056: LD_VAR 0 4
29060: PPUSH
29061: LD_INT 3
29063: PPUSH
29064: LD_INT 12
29066: PPUSH
29067: CALL_OW 12
29071: PPUSH
29072: CALL_OW 273
29076: ST_TO_ADDR
// if ValidHex ( x , y ) then
29077: LD_VAR 0 2
29081: PPUSH
29082: LD_VAR 0 3
29086: PPUSH
29087: CALL_OW 488
29091: IFFALSE 29126
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29093: LD_VAR 0 1
29097: PPUSH
29098: LD_VAR 0 2
29102: PPUSH
29103: LD_VAR 0 3
29107: PPUSH
29108: LD_INT 3
29110: PPUSH
29111: LD_INT 6
29113: PPUSH
29114: CALL_OW 12
29118: PPUSH
29119: LD_INT 1
29121: PPUSH
29122: CALL_OW 483
// end ;
29126: GO 28986
29128: POP
29129: POP
// end ;
29130: PPOPN 5
29132: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29133: LD_EXP 38
29137: PUSH
29138: LD_EXP 73
29142: AND
29143: IFFALSE 29237
29145: GO 29147
29147: DISABLE
29148: LD_INT 0
29150: PPUSH
29151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29152: LD_ADDR_VAR 0 2
29156: PUSH
29157: LD_INT 22
29159: PUSH
29160: LD_OWVAR 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 32
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 21
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: LIST
29193: PPUSH
29194: CALL_OW 69
29198: ST_TO_ADDR
// if not tmp then
29199: LD_VAR 0 2
29203: NOT
29204: IFFALSE 29208
// exit ;
29206: GO 29237
// for i in tmp do
29208: LD_ADDR_VAR 0 1
29212: PUSH
29213: LD_VAR 0 2
29217: PUSH
29218: FOR_IN
29219: IFFALSE 29235
// SetFuel ( i , 0 ) ;
29221: LD_VAR 0 1
29225: PPUSH
29226: LD_INT 0
29228: PPUSH
29229: CALL_OW 240
29233: GO 29218
29235: POP
29236: POP
// end ;
29237: PPOPN 2
29239: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29240: LD_EXP 38
29244: PUSH
29245: LD_EXP 74
29249: AND
29250: IFFALSE 29316
29252: GO 29254
29254: DISABLE
29255: LD_INT 0
29257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29258: LD_ADDR_VAR 0 1
29262: PUSH
29263: LD_INT 22
29265: PUSH
29266: LD_OWVAR 2
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 30
29277: PUSH
29278: LD_INT 29
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PPUSH
29289: CALL_OW 69
29293: ST_TO_ADDR
// if not tmp then
29294: LD_VAR 0 1
29298: NOT
29299: IFFALSE 29303
// exit ;
29301: GO 29316
// DestroyUnit ( tmp [ 1 ] ) ;
29303: LD_VAR 0 1
29307: PUSH
29308: LD_INT 1
29310: ARRAY
29311: PPUSH
29312: CALL_OW 65
// end ;
29316: PPOPN 1
29318: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29319: LD_EXP 38
29323: PUSH
29324: LD_EXP 76
29328: AND
29329: IFFALSE 29458
29331: GO 29333
29333: DISABLE
29334: LD_INT 0
29336: PPUSH
// begin uc_side := 0 ;
29337: LD_ADDR_OWVAR 20
29341: PUSH
29342: LD_INT 0
29344: ST_TO_ADDR
// uc_nation := nation_arabian ;
29345: LD_ADDR_OWVAR 21
29349: PUSH
29350: LD_INT 2
29352: ST_TO_ADDR
// hc_gallery :=  ;
29353: LD_ADDR_OWVAR 33
29357: PUSH
29358: LD_STRING 
29360: ST_TO_ADDR
// hc_name :=  ;
29361: LD_ADDR_OWVAR 26
29365: PUSH
29366: LD_STRING 
29368: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29369: LD_INT 1
29371: PPUSH
29372: LD_INT 11
29374: PPUSH
29375: LD_INT 10
29377: PPUSH
29378: CALL_OW 380
// un := CreateHuman ;
29382: LD_ADDR_VAR 0 1
29386: PUSH
29387: CALL_OW 44
29391: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29392: LD_VAR 0 1
29396: PPUSH
29397: LD_INT 1
29399: PPUSH
29400: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29404: LD_INT 35
29406: PPUSH
29407: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29411: LD_VAR 0 1
29415: PPUSH
29416: LD_INT 22
29418: PUSH
29419: LD_OWVAR 2
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PPUSH
29428: CALL_OW 69
29432: PPUSH
29433: LD_VAR 0 1
29437: PPUSH
29438: CALL_OW 74
29442: PPUSH
29443: CALL_OW 115
// until IsDead ( un ) ;
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL_OW 301
29456: IFFALSE 29404
// end ;
29458: PPOPN 1
29460: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29461: LD_EXP 38
29465: PUSH
29466: LD_EXP 78
29470: AND
29471: IFFALSE 29483
29473: GO 29475
29475: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29476: LD_STRING earthquake(getX(game), 0, 32)
29478: PPUSH
29479: CALL_OW 559
29483: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29484: LD_EXP 38
29488: PUSH
29489: LD_EXP 79
29493: AND
29494: IFFALSE 29585
29496: GO 29498
29498: DISABLE
29499: LD_INT 0
29501: PPUSH
// begin enable ;
29502: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29503: LD_ADDR_VAR 0 1
29507: PUSH
29508: LD_INT 22
29510: PUSH
29511: LD_OWVAR 2
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 21
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 33
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: LIST
29544: PPUSH
29545: CALL_OW 69
29549: ST_TO_ADDR
// if not tmp then
29550: LD_VAR 0 1
29554: NOT
29555: IFFALSE 29559
// exit ;
29557: GO 29585
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29559: LD_VAR 0 1
29563: PUSH
29564: LD_INT 1
29566: PPUSH
29567: LD_VAR 0 1
29571: PPUSH
29572: CALL_OW 12
29576: ARRAY
29577: PPUSH
29578: LD_INT 1
29580: PPUSH
29581: CALL_OW 234
// end ;
29585: PPOPN 1
29587: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29588: LD_EXP 38
29592: PUSH
29593: LD_EXP 80
29597: AND
29598: IFFALSE 29739
29600: GO 29602
29602: DISABLE
29603: LD_INT 0
29605: PPUSH
29606: PPUSH
29607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29608: LD_ADDR_VAR 0 3
29612: PUSH
29613: LD_INT 22
29615: PUSH
29616: LD_OWVAR 2
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 25
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PPUSH
29639: CALL_OW 69
29643: ST_TO_ADDR
// if not tmp then
29644: LD_VAR 0 3
29648: NOT
29649: IFFALSE 29653
// exit ;
29651: GO 29739
// un := tmp [ rand ( 1 , tmp ) ] ;
29653: LD_ADDR_VAR 0 2
29657: PUSH
29658: LD_VAR 0 3
29662: PUSH
29663: LD_INT 1
29665: PPUSH
29666: LD_VAR 0 3
29670: PPUSH
29671: CALL_OW 12
29675: ARRAY
29676: ST_TO_ADDR
// if Crawls ( un ) then
29677: LD_VAR 0 2
29681: PPUSH
29682: CALL_OW 318
29686: IFFALSE 29697
// ComWalk ( un ) ;
29688: LD_VAR 0 2
29692: PPUSH
29693: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29697: LD_VAR 0 2
29701: PPUSH
29702: LD_INT 9
29704: PPUSH
29705: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29709: LD_INT 28
29711: PPUSH
29712: LD_OWVAR 2
29716: PPUSH
29717: LD_INT 2
29719: PPUSH
29720: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29724: LD_INT 29
29726: PPUSH
29727: LD_OWVAR 2
29731: PPUSH
29732: LD_INT 2
29734: PPUSH
29735: CALL_OW 322
// end ;
29739: PPOPN 3
29741: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29742: LD_EXP 38
29746: PUSH
29747: LD_EXP 81
29751: AND
29752: IFFALSE 29863
29754: GO 29756
29756: DISABLE
29757: LD_INT 0
29759: PPUSH
29760: PPUSH
29761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29762: LD_ADDR_VAR 0 3
29766: PUSH
29767: LD_INT 22
29769: PUSH
29770: LD_OWVAR 2
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 25
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PPUSH
29793: CALL_OW 69
29797: ST_TO_ADDR
// if not tmp then
29798: LD_VAR 0 3
29802: NOT
29803: IFFALSE 29807
// exit ;
29805: GO 29863
// un := tmp [ rand ( 1 , tmp ) ] ;
29807: LD_ADDR_VAR 0 2
29811: PUSH
29812: LD_VAR 0 3
29816: PUSH
29817: LD_INT 1
29819: PPUSH
29820: LD_VAR 0 3
29824: PPUSH
29825: CALL_OW 12
29829: ARRAY
29830: ST_TO_ADDR
// if Crawls ( un ) then
29831: LD_VAR 0 2
29835: PPUSH
29836: CALL_OW 318
29840: IFFALSE 29851
// ComWalk ( un ) ;
29842: LD_VAR 0 2
29846: PPUSH
29847: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29851: LD_VAR 0 2
29855: PPUSH
29856: LD_INT 8
29858: PPUSH
29859: CALL_OW 336
// end ;
29863: PPOPN 3
29865: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29866: LD_EXP 38
29870: PUSH
29871: LD_EXP 82
29875: AND
29876: IFFALSE 30020
29878: GO 29880
29880: DISABLE
29881: LD_INT 0
29883: PPUSH
29884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29885: LD_ADDR_VAR 0 2
29889: PUSH
29890: LD_INT 22
29892: PUSH
29893: LD_OWVAR 2
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 21
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: LD_INT 34
29917: PUSH
29918: LD_INT 12
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 34
29927: PUSH
29928: LD_INT 51
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 34
29937: PUSH
29938: LD_INT 32
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: LIST
29955: PPUSH
29956: CALL_OW 69
29960: ST_TO_ADDR
// if not tmp then
29961: LD_VAR 0 2
29965: NOT
29966: IFFALSE 29970
// exit ;
29968: GO 30020
// for i in tmp do
29970: LD_ADDR_VAR 0 1
29974: PUSH
29975: LD_VAR 0 2
29979: PUSH
29980: FOR_IN
29981: IFFALSE 30018
// if GetCargo ( i , mat_artifact ) = 0 then
29983: LD_VAR 0 1
29987: PPUSH
29988: LD_INT 4
29990: PPUSH
29991: CALL_OW 289
29995: PUSH
29996: LD_INT 0
29998: EQUAL
29999: IFFALSE 30016
// SetCargo ( i , mat_siberit , 100 ) ;
30001: LD_VAR 0 1
30005: PPUSH
30006: LD_INT 3
30008: PPUSH
30009: LD_INT 100
30011: PPUSH
30012: CALL_OW 290
30016: GO 29980
30018: POP
30019: POP
// end ;
30020: PPOPN 2
30022: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30023: LD_EXP 38
30027: PUSH
30028: LD_EXP 83
30032: AND
30033: IFFALSE 30216
30035: GO 30037
30037: DISABLE
30038: LD_INT 0
30040: PPUSH
30041: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30042: LD_ADDR_VAR 0 2
30046: PUSH
30047: LD_INT 22
30049: PUSH
30050: LD_OWVAR 2
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PPUSH
30059: CALL_OW 69
30063: ST_TO_ADDR
// if not tmp then
30064: LD_VAR 0 2
30068: NOT
30069: IFFALSE 30073
// exit ;
30071: GO 30216
// for i := 1 to 2 do
30073: LD_ADDR_VAR 0 1
30077: PUSH
30078: DOUBLE
30079: LD_INT 1
30081: DEC
30082: ST_TO_ADDR
30083: LD_INT 2
30085: PUSH
30086: FOR_TO
30087: IFFALSE 30214
// begin uc_side := your_side ;
30089: LD_ADDR_OWVAR 20
30093: PUSH
30094: LD_OWVAR 2
30098: ST_TO_ADDR
// uc_nation := nation_american ;
30099: LD_ADDR_OWVAR 21
30103: PUSH
30104: LD_INT 1
30106: ST_TO_ADDR
// vc_chassis := us_morphling ;
30107: LD_ADDR_OWVAR 37
30111: PUSH
30112: LD_INT 5
30114: ST_TO_ADDR
// vc_engine := engine_siberite ;
30115: LD_ADDR_OWVAR 39
30119: PUSH
30120: LD_INT 3
30122: ST_TO_ADDR
// vc_control := control_computer ;
30123: LD_ADDR_OWVAR 38
30127: PUSH
30128: LD_INT 3
30130: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30131: LD_ADDR_OWVAR 40
30135: PUSH
30136: LD_INT 10
30138: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30139: LD_VAR 0 2
30143: PUSH
30144: LD_INT 1
30146: ARRAY
30147: PPUSH
30148: CALL_OW 310
30152: NOT
30153: IFFALSE 30200
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30155: CALL_OW 45
30159: PPUSH
30160: LD_VAR 0 2
30164: PUSH
30165: LD_INT 1
30167: ARRAY
30168: PPUSH
30169: CALL_OW 250
30173: PPUSH
30174: LD_VAR 0 2
30178: PUSH
30179: LD_INT 1
30181: ARRAY
30182: PPUSH
30183: CALL_OW 251
30187: PPUSH
30188: LD_INT 12
30190: PPUSH
30191: LD_INT 1
30193: PPUSH
30194: CALL_OW 50
30198: GO 30212
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30200: CALL_OW 45
30204: PPUSH
30205: LD_INT 1
30207: PPUSH
30208: CALL_OW 51
// end ;
30212: GO 30086
30214: POP
30215: POP
// end ;
30216: PPOPN 2
30218: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30219: LD_EXP 38
30223: PUSH
30224: LD_EXP 84
30228: AND
30229: IFFALSE 30451
30231: GO 30233
30233: DISABLE
30234: LD_INT 0
30236: PPUSH
30237: PPUSH
30238: PPUSH
30239: PPUSH
30240: PPUSH
30241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30242: LD_ADDR_VAR 0 6
30246: PUSH
30247: LD_INT 22
30249: PUSH
30250: LD_OWVAR 2
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 21
30261: PUSH
30262: LD_INT 1
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 3
30271: PUSH
30272: LD_INT 23
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: PPUSH
30291: CALL_OW 69
30295: ST_TO_ADDR
// if not tmp then
30296: LD_VAR 0 6
30300: NOT
30301: IFFALSE 30305
// exit ;
30303: GO 30451
// s1 := rand ( 1 , 4 ) ;
30305: LD_ADDR_VAR 0 2
30309: PUSH
30310: LD_INT 1
30312: PPUSH
30313: LD_INT 4
30315: PPUSH
30316: CALL_OW 12
30320: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30321: LD_ADDR_VAR 0 4
30325: PUSH
30326: LD_VAR 0 6
30330: PUSH
30331: LD_INT 1
30333: ARRAY
30334: PPUSH
30335: LD_VAR 0 2
30339: PPUSH
30340: CALL_OW 259
30344: ST_TO_ADDR
// if s1 = 1 then
30345: LD_VAR 0 2
30349: PUSH
30350: LD_INT 1
30352: EQUAL
30353: IFFALSE 30373
// s2 := rand ( 2 , 4 ) else
30355: LD_ADDR_VAR 0 3
30359: PUSH
30360: LD_INT 2
30362: PPUSH
30363: LD_INT 4
30365: PPUSH
30366: CALL_OW 12
30370: ST_TO_ADDR
30371: GO 30381
// s2 := 1 ;
30373: LD_ADDR_VAR 0 3
30377: PUSH
30378: LD_INT 1
30380: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30381: LD_ADDR_VAR 0 5
30385: PUSH
30386: LD_VAR 0 6
30390: PUSH
30391: LD_INT 1
30393: ARRAY
30394: PPUSH
30395: LD_VAR 0 3
30399: PPUSH
30400: CALL_OW 259
30404: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30405: LD_VAR 0 6
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PPUSH
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_VAR 0 5
30423: PPUSH
30424: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30428: LD_VAR 0 6
30432: PUSH
30433: LD_INT 1
30435: ARRAY
30436: PPUSH
30437: LD_VAR 0 3
30441: PPUSH
30442: LD_VAR 0 4
30446: PPUSH
30447: CALL_OW 237
// end ;
30451: PPOPN 6
30453: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30454: LD_EXP 38
30458: PUSH
30459: LD_EXP 85
30463: AND
30464: IFFALSE 30543
30466: GO 30468
30468: DISABLE
30469: LD_INT 0
30471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30472: LD_ADDR_VAR 0 1
30476: PUSH
30477: LD_INT 22
30479: PUSH
30480: LD_OWVAR 2
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 30
30491: PUSH
30492: LD_INT 3
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PPUSH
30503: CALL_OW 69
30507: ST_TO_ADDR
// if not tmp then
30508: LD_VAR 0 1
30512: NOT
30513: IFFALSE 30517
// exit ;
30515: GO 30543
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30517: LD_VAR 0 1
30521: PUSH
30522: LD_INT 1
30524: PPUSH
30525: LD_VAR 0 1
30529: PPUSH
30530: CALL_OW 12
30534: ARRAY
30535: PPUSH
30536: LD_INT 1
30538: PPUSH
30539: CALL_OW 234
// end ;
30543: PPOPN 1
30545: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30546: LD_EXP 38
30550: PUSH
30551: LD_EXP 86
30555: AND
30556: IFFALSE 30668
30558: GO 30560
30560: DISABLE
30561: LD_INT 0
30563: PPUSH
30564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30565: LD_ADDR_VAR 0 2
30569: PUSH
30570: LD_INT 22
30572: PUSH
30573: LD_OWVAR 2
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 2
30584: PUSH
30585: LD_INT 30
30587: PUSH
30588: LD_INT 27
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 30
30597: PUSH
30598: LD_INT 26
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 30
30607: PUSH
30608: LD_INT 28
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PPUSH
30625: CALL_OW 69
30629: ST_TO_ADDR
// if not tmp then
30630: LD_VAR 0 2
30634: NOT
30635: IFFALSE 30639
// exit ;
30637: GO 30668
// for i in tmp do
30639: LD_ADDR_VAR 0 1
30643: PUSH
30644: LD_VAR 0 2
30648: PUSH
30649: FOR_IN
30650: IFFALSE 30666
// SetLives ( i , 1 ) ;
30652: LD_VAR 0 1
30656: PPUSH
30657: LD_INT 1
30659: PPUSH
30660: CALL_OW 234
30664: GO 30649
30666: POP
30667: POP
// end ;
30668: PPOPN 2
30670: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30671: LD_EXP 38
30675: PUSH
30676: LD_EXP 87
30680: AND
30681: IFFALSE 30968
30683: GO 30685
30685: DISABLE
30686: LD_INT 0
30688: PPUSH
30689: PPUSH
30690: PPUSH
// begin i := rand ( 1 , 7 ) ;
30691: LD_ADDR_VAR 0 1
30695: PUSH
30696: LD_INT 1
30698: PPUSH
30699: LD_INT 7
30701: PPUSH
30702: CALL_OW 12
30706: ST_TO_ADDR
// case i of 1 :
30707: LD_VAR 0 1
30711: PUSH
30712: LD_INT 1
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30730
30720: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30721: LD_STRING earthquake(getX(game), 0, 32)
30723: PPUSH
30724: CALL_OW 559
30728: GO 30968
30730: LD_INT 2
30732: DOUBLE
30733: EQUAL
30734: IFTRUE 30738
30736: GO 30752
30738: POP
// begin ToLua ( displayStucuk(); ) ;
30739: LD_STRING displayStucuk();
30741: PPUSH
30742: CALL_OW 559
// ResetFog ;
30746: CALL_OW 335
// end ; 3 :
30750: GO 30968
30752: LD_INT 3
30754: DOUBLE
30755: EQUAL
30756: IFTRUE 30760
30758: GO 30864
30760: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30761: LD_ADDR_VAR 0 2
30765: PUSH
30766: LD_INT 22
30768: PUSH
30769: LD_OWVAR 2
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 25
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PPUSH
30792: CALL_OW 69
30796: ST_TO_ADDR
// if not tmp then
30797: LD_VAR 0 2
30801: NOT
30802: IFFALSE 30806
// exit ;
30804: GO 30968
// un := tmp [ rand ( 1 , tmp ) ] ;
30806: LD_ADDR_VAR 0 3
30810: PUSH
30811: LD_VAR 0 2
30815: PUSH
30816: LD_INT 1
30818: PPUSH
30819: LD_VAR 0 2
30823: PPUSH
30824: CALL_OW 12
30828: ARRAY
30829: ST_TO_ADDR
// if Crawls ( un ) then
30830: LD_VAR 0 3
30834: PPUSH
30835: CALL_OW 318
30839: IFFALSE 30850
// ComWalk ( un ) ;
30841: LD_VAR 0 3
30845: PPUSH
30846: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30850: LD_VAR 0 3
30854: PPUSH
30855: LD_INT 8
30857: PPUSH
30858: CALL_OW 336
// end ; 4 :
30862: GO 30968
30864: LD_INT 4
30866: DOUBLE
30867: EQUAL
30868: IFTRUE 30872
30870: GO 30946
30872: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30873: LD_ADDR_VAR 0 2
30877: PUSH
30878: LD_INT 22
30880: PUSH
30881: LD_OWVAR 2
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 30
30892: PUSH
30893: LD_INT 29
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PPUSH
30904: CALL_OW 69
30908: ST_TO_ADDR
// if not tmp then
30909: LD_VAR 0 2
30913: NOT
30914: IFFALSE 30918
// exit ;
30916: GO 30968
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30918: LD_VAR 0 2
30922: PUSH
30923: LD_INT 1
30925: ARRAY
30926: PPUSH
30927: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30931: LD_VAR 0 2
30935: PUSH
30936: LD_INT 1
30938: ARRAY
30939: PPUSH
30940: CALL_OW 65
// end ; 5 .. 7 :
30944: GO 30968
30946: LD_INT 5
30948: DOUBLE
30949: GREATEREQUAL
30950: IFFALSE 30958
30952: LD_INT 7
30954: DOUBLE
30955: LESSEQUAL
30956: IFTRUE 30960
30958: GO 30967
30960: POP
// StreamSibBomb ; end ;
30961: CALL 27205 0 0
30965: GO 30968
30967: POP
// end ;
30968: PPOPN 3
30970: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30971: LD_EXP 38
30975: PUSH
30976: LD_EXP 88
30980: AND
30981: IFFALSE 31137
30983: GO 30985
30985: DISABLE
30986: LD_INT 0
30988: PPUSH
30989: PPUSH
30990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30991: LD_ADDR_VAR 0 2
30995: PUSH
30996: LD_INT 81
30998: PUSH
30999: LD_OWVAR 2
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: LD_INT 21
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 21
31023: PUSH
31024: LD_INT 2
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PPUSH
31040: CALL_OW 69
31044: ST_TO_ADDR
// if not tmp then
31045: LD_VAR 0 2
31049: NOT
31050: IFFALSE 31054
// exit ;
31052: GO 31137
// p := 0 ;
31054: LD_ADDR_VAR 0 3
31058: PUSH
31059: LD_INT 0
31061: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31062: LD_INT 35
31064: PPUSH
31065: CALL_OW 67
// p := p + 1 ;
31069: LD_ADDR_VAR 0 3
31073: PUSH
31074: LD_VAR 0 3
31078: PUSH
31079: LD_INT 1
31081: PLUS
31082: ST_TO_ADDR
// for i in tmp do
31083: LD_ADDR_VAR 0 1
31087: PUSH
31088: LD_VAR 0 2
31092: PUSH
31093: FOR_IN
31094: IFFALSE 31125
// if GetLives ( i ) < 1000 then
31096: LD_VAR 0 1
31100: PPUSH
31101: CALL_OW 256
31105: PUSH
31106: LD_INT 1000
31108: LESS
31109: IFFALSE 31123
// SetLives ( i , 1000 ) ;
31111: LD_VAR 0 1
31115: PPUSH
31116: LD_INT 1000
31118: PPUSH
31119: CALL_OW 234
31123: GO 31093
31125: POP
31126: POP
// until p > 20 ;
31127: LD_VAR 0 3
31131: PUSH
31132: LD_INT 20
31134: GREATER
31135: IFFALSE 31062
// end ;
31137: PPOPN 3
31139: END
// every 0 0$1 trigger StreamModeActive and sTime do
31140: LD_EXP 38
31144: PUSH
31145: LD_EXP 89
31149: AND
31150: IFFALSE 31185
31152: GO 31154
31154: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31155: LD_INT 28
31157: PPUSH
31158: LD_OWVAR 2
31162: PPUSH
31163: LD_INT 2
31165: PPUSH
31166: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31170: LD_INT 30
31172: PPUSH
31173: LD_OWVAR 2
31177: PPUSH
31178: LD_INT 2
31180: PPUSH
31181: CALL_OW 322
// end ;
31185: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31186: LD_EXP 38
31190: PUSH
31191: LD_EXP 90
31195: AND
31196: IFFALSE 31317
31198: GO 31200
31200: DISABLE
31201: LD_INT 0
31203: PPUSH
31204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31205: LD_ADDR_VAR 0 2
31209: PUSH
31210: LD_INT 22
31212: PUSH
31213: LD_OWVAR 2
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 21
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 3
31234: PUSH
31235: LD_INT 23
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: PPUSH
31254: CALL_OW 69
31258: ST_TO_ADDR
// if not tmp then
31259: LD_VAR 0 2
31263: NOT
31264: IFFALSE 31268
// exit ;
31266: GO 31317
// for i in tmp do
31268: LD_ADDR_VAR 0 1
31272: PUSH
31273: LD_VAR 0 2
31277: PUSH
31278: FOR_IN
31279: IFFALSE 31315
// begin if Crawls ( i ) then
31281: LD_VAR 0 1
31285: PPUSH
31286: CALL_OW 318
31290: IFFALSE 31301
// ComWalk ( i ) ;
31292: LD_VAR 0 1
31296: PPUSH
31297: CALL_OW 138
// SetClass ( i , 2 ) ;
31301: LD_VAR 0 1
31305: PPUSH
31306: LD_INT 2
31308: PPUSH
31309: CALL_OW 336
// end ;
31313: GO 31278
31315: POP
31316: POP
// end ;
31317: PPOPN 2
31319: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31320: LD_EXP 38
31324: PUSH
31325: LD_EXP 91
31329: AND
31330: IFFALSE 31618
31332: GO 31334
31334: DISABLE
31335: LD_INT 0
31337: PPUSH
31338: PPUSH
31339: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31340: LD_OWVAR 2
31344: PPUSH
31345: LD_INT 9
31347: PPUSH
31348: LD_INT 1
31350: PPUSH
31351: LD_INT 1
31353: PPUSH
31354: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31358: LD_INT 9
31360: PPUSH
31361: LD_OWVAR 2
31365: PPUSH
31366: CALL_OW 343
// uc_side := 9 ;
31370: LD_ADDR_OWVAR 20
31374: PUSH
31375: LD_INT 9
31377: ST_TO_ADDR
// uc_nation := 2 ;
31378: LD_ADDR_OWVAR 21
31382: PUSH
31383: LD_INT 2
31385: ST_TO_ADDR
// hc_name := Dark Warrior ;
31386: LD_ADDR_OWVAR 26
31390: PUSH
31391: LD_STRING Dark Warrior
31393: ST_TO_ADDR
// hc_gallery :=  ;
31394: LD_ADDR_OWVAR 33
31398: PUSH
31399: LD_STRING 
31401: ST_TO_ADDR
// hc_noskilllimit := true ;
31402: LD_ADDR_OWVAR 76
31406: PUSH
31407: LD_INT 1
31409: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31410: LD_ADDR_OWVAR 31
31414: PUSH
31415: LD_INT 30
31417: PUSH
31418: LD_INT 30
31420: PUSH
31421: LD_INT 30
31423: PUSH
31424: LD_INT 30
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// un := CreateHuman ;
31433: LD_ADDR_VAR 0 3
31437: PUSH
31438: CALL_OW 44
31442: ST_TO_ADDR
// hc_noskilllimit := false ;
31443: LD_ADDR_OWVAR 76
31447: PUSH
31448: LD_INT 0
31450: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31451: LD_VAR 0 3
31455: PPUSH
31456: LD_INT 1
31458: PPUSH
31459: CALL_OW 51
// ToLua ( playRanger() ) ;
31463: LD_STRING playRanger()
31465: PPUSH
31466: CALL_OW 559
// p := 0 ;
31470: LD_ADDR_VAR 0 2
31474: PUSH
31475: LD_INT 0
31477: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31478: LD_INT 35
31480: PPUSH
31481: CALL_OW 67
// p := p + 1 ;
31485: LD_ADDR_VAR 0 2
31489: PUSH
31490: LD_VAR 0 2
31494: PUSH
31495: LD_INT 1
31497: PLUS
31498: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31499: LD_VAR 0 3
31503: PPUSH
31504: CALL_OW 256
31508: PUSH
31509: LD_INT 1000
31511: LESS
31512: IFFALSE 31526
// SetLives ( un , 1000 ) ;
31514: LD_VAR 0 3
31518: PPUSH
31519: LD_INT 1000
31521: PPUSH
31522: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31526: LD_VAR 0 3
31530: PPUSH
31531: LD_INT 81
31533: PUSH
31534: LD_OWVAR 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 91
31545: PUSH
31546: LD_VAR 0 3
31550: PUSH
31551: LD_INT 30
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PPUSH
31563: CALL_OW 69
31567: PPUSH
31568: LD_VAR 0 3
31572: PPUSH
31573: CALL_OW 74
31577: PPUSH
31578: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31582: LD_VAR 0 2
31586: PUSH
31587: LD_INT 80
31589: GREATER
31590: PUSH
31591: LD_VAR 0 3
31595: PPUSH
31596: CALL_OW 301
31600: OR
31601: IFFALSE 31478
// if un then
31603: LD_VAR 0 3
31607: IFFALSE 31618
// RemoveUnit ( un ) ;
31609: LD_VAR 0 3
31613: PPUSH
31614: CALL_OW 64
// end ;
31618: PPOPN 3
31620: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31621: LD_EXP 92
31625: IFFALSE 31741
31627: GO 31629
31629: DISABLE
31630: LD_INT 0
31632: PPUSH
31633: PPUSH
31634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31635: LD_ADDR_VAR 0 2
31639: PUSH
31640: LD_INT 81
31642: PUSH
31643: LD_OWVAR 2
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 21
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PPUSH
31666: CALL_OW 69
31670: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31671: LD_STRING playComputer()
31673: PPUSH
31674: CALL_OW 559
// if not tmp then
31678: LD_VAR 0 2
31682: NOT
31683: IFFALSE 31687
// exit ;
31685: GO 31741
// for i in tmp do
31687: LD_ADDR_VAR 0 1
31691: PUSH
31692: LD_VAR 0 2
31696: PUSH
31697: FOR_IN
31698: IFFALSE 31739
// for j := 1 to 4 do
31700: LD_ADDR_VAR 0 3
31704: PUSH
31705: DOUBLE
31706: LD_INT 1
31708: DEC
31709: ST_TO_ADDR
31710: LD_INT 4
31712: PUSH
31713: FOR_TO
31714: IFFALSE 31735
// SetSkill ( i , j , 10 ) ;
31716: LD_VAR 0 1
31720: PPUSH
31721: LD_VAR 0 3
31725: PPUSH
31726: LD_INT 10
31728: PPUSH
31729: CALL_OW 237
31733: GO 31713
31735: POP
31736: POP
31737: GO 31697
31739: POP
31740: POP
// end ;
31741: PPOPN 3
31743: END
// every 0 0$1 trigger s30 do var i , tmp ;
31744: LD_EXP 93
31748: IFFALSE 31817
31750: GO 31752
31752: DISABLE
31753: LD_INT 0
31755: PPUSH
31756: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31757: LD_ADDR_VAR 0 2
31761: PUSH
31762: LD_INT 22
31764: PUSH
31765: LD_OWVAR 2
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PPUSH
31774: CALL_OW 69
31778: ST_TO_ADDR
// if not tmp then
31779: LD_VAR 0 2
31783: NOT
31784: IFFALSE 31788
// exit ;
31786: GO 31817
// for i in tmp do
31788: LD_ADDR_VAR 0 1
31792: PUSH
31793: LD_VAR 0 2
31797: PUSH
31798: FOR_IN
31799: IFFALSE 31815
// SetLives ( i , 300 ) ;
31801: LD_VAR 0 1
31805: PPUSH
31806: LD_INT 300
31808: PPUSH
31809: CALL_OW 234
31813: GO 31798
31815: POP
31816: POP
// end ;
31817: PPOPN 2
31819: END
// every 0 0$1 trigger s60 do var i , tmp ;
31820: LD_EXP 94
31824: IFFALSE 31893
31826: GO 31828
31828: DISABLE
31829: LD_INT 0
31831: PPUSH
31832: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31833: LD_ADDR_VAR 0 2
31837: PUSH
31838: LD_INT 22
31840: PUSH
31841: LD_OWVAR 2
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PPUSH
31850: CALL_OW 69
31854: ST_TO_ADDR
// if not tmp then
31855: LD_VAR 0 2
31859: NOT
31860: IFFALSE 31864
// exit ;
31862: GO 31893
// for i in tmp do
31864: LD_ADDR_VAR 0 1
31868: PUSH
31869: LD_VAR 0 2
31873: PUSH
31874: FOR_IN
31875: IFFALSE 31891
// SetLives ( i , 600 ) ;
31877: LD_VAR 0 1
31881: PPUSH
31882: LD_INT 600
31884: PPUSH
31885: CALL_OW 234
31889: GO 31874
31891: POP
31892: POP
// end ;
31893: PPOPN 2
31895: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31896: LD_INT 0
31898: PPUSH
// case cmd of 301 :
31899: LD_VAR 0 1
31903: PUSH
31904: LD_INT 301
31906: DOUBLE
31907: EQUAL
31908: IFTRUE 31912
31910: GO 31944
31912: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31913: LD_VAR 0 6
31917: PPUSH
31918: LD_VAR 0 7
31922: PPUSH
31923: LD_VAR 0 8
31927: PPUSH
31928: LD_VAR 0 4
31932: PPUSH
31933: LD_VAR 0 5
31937: PPUSH
31938: CALL 33145 0 5
31942: GO 32065
31944: LD_INT 302
31946: DOUBLE
31947: EQUAL
31948: IFTRUE 31952
31950: GO 31989
31952: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31953: LD_VAR 0 6
31957: PPUSH
31958: LD_VAR 0 7
31962: PPUSH
31963: LD_VAR 0 8
31967: PPUSH
31968: LD_VAR 0 9
31972: PPUSH
31973: LD_VAR 0 4
31977: PPUSH
31978: LD_VAR 0 5
31982: PPUSH
31983: CALL 33236 0 6
31987: GO 32065
31989: LD_INT 303
31991: DOUBLE
31992: EQUAL
31993: IFTRUE 31997
31995: GO 32034
31997: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31998: LD_VAR 0 6
32002: PPUSH
32003: LD_VAR 0 7
32007: PPUSH
32008: LD_VAR 0 8
32012: PPUSH
32013: LD_VAR 0 9
32017: PPUSH
32018: LD_VAR 0 4
32022: PPUSH
32023: LD_VAR 0 5
32027: PPUSH
32028: CALL 32070 0 6
32032: GO 32065
32034: LD_INT 304
32036: DOUBLE
32037: EQUAL
32038: IFTRUE 32042
32040: GO 32064
32042: POP
// hHackTeleport ( unit , x , y ) ; end ;
32043: LD_VAR 0 2
32047: PPUSH
32048: LD_VAR 0 4
32052: PPUSH
32053: LD_VAR 0 5
32057: PPUSH
32058: CALL 33829 0 3
32062: GO 32065
32064: POP
// end ;
32065: LD_VAR 0 12
32069: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32070: LD_INT 0
32072: PPUSH
32073: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32074: LD_VAR 0 1
32078: PUSH
32079: LD_INT 1
32081: LESS
32082: PUSH
32083: LD_VAR 0 1
32087: PUSH
32088: LD_INT 3
32090: GREATER
32091: OR
32092: PUSH
32093: LD_VAR 0 5
32097: PPUSH
32098: LD_VAR 0 6
32102: PPUSH
32103: CALL_OW 428
32107: OR
32108: IFFALSE 32112
// exit ;
32110: GO 32832
// uc_side := your_side ;
32112: LD_ADDR_OWVAR 20
32116: PUSH
32117: LD_OWVAR 2
32121: ST_TO_ADDR
// uc_nation := nation ;
32122: LD_ADDR_OWVAR 21
32126: PUSH
32127: LD_VAR 0 1
32131: ST_TO_ADDR
// bc_level = 1 ;
32132: LD_ADDR_OWVAR 43
32136: PUSH
32137: LD_INT 1
32139: ST_TO_ADDR
// case btype of 1 :
32140: LD_VAR 0 2
32144: PUSH
32145: LD_INT 1
32147: DOUBLE
32148: EQUAL
32149: IFTRUE 32153
32151: GO 32164
32153: POP
// bc_type := b_depot ; 2 :
32154: LD_ADDR_OWVAR 42
32158: PUSH
32159: LD_INT 0
32161: ST_TO_ADDR
32162: GO 32776
32164: LD_INT 2
32166: DOUBLE
32167: EQUAL
32168: IFTRUE 32172
32170: GO 32183
32172: POP
// bc_type := b_warehouse ; 3 :
32173: LD_ADDR_OWVAR 42
32177: PUSH
32178: LD_INT 1
32180: ST_TO_ADDR
32181: GO 32776
32183: LD_INT 3
32185: DOUBLE
32186: EQUAL
32187: IFTRUE 32191
32189: GO 32202
32191: POP
// bc_type := b_lab ; 4 .. 9 :
32192: LD_ADDR_OWVAR 42
32196: PUSH
32197: LD_INT 6
32199: ST_TO_ADDR
32200: GO 32776
32202: LD_INT 4
32204: DOUBLE
32205: GREATEREQUAL
32206: IFFALSE 32214
32208: LD_INT 9
32210: DOUBLE
32211: LESSEQUAL
32212: IFTRUE 32216
32214: GO 32268
32216: POP
// begin bc_type := b_lab_half ;
32217: LD_ADDR_OWVAR 42
32221: PUSH
32222: LD_INT 7
32224: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32225: LD_ADDR_OWVAR 44
32229: PUSH
32230: LD_INT 10
32232: PUSH
32233: LD_INT 11
32235: PUSH
32236: LD_INT 12
32238: PUSH
32239: LD_INT 15
32241: PUSH
32242: LD_INT 14
32244: PUSH
32245: LD_INT 13
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: PUSH
32256: LD_VAR 0 2
32260: PUSH
32261: LD_INT 3
32263: MINUS
32264: ARRAY
32265: ST_TO_ADDR
// end ; 10 .. 13 :
32266: GO 32776
32268: LD_INT 10
32270: DOUBLE
32271: GREATEREQUAL
32272: IFFALSE 32280
32274: LD_INT 13
32276: DOUBLE
32277: LESSEQUAL
32278: IFTRUE 32282
32280: GO 32359
32282: POP
// begin bc_type := b_lab_full ;
32283: LD_ADDR_OWVAR 42
32287: PUSH
32288: LD_INT 8
32290: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32291: LD_ADDR_OWVAR 44
32295: PUSH
32296: LD_INT 10
32298: PUSH
32299: LD_INT 12
32301: PUSH
32302: LD_INT 14
32304: PUSH
32305: LD_INT 13
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: PUSH
32314: LD_VAR 0 2
32318: PUSH
32319: LD_INT 9
32321: MINUS
32322: ARRAY
32323: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32324: LD_ADDR_OWVAR 45
32328: PUSH
32329: LD_INT 11
32331: PUSH
32332: LD_INT 15
32334: PUSH
32335: LD_INT 12
32337: PUSH
32338: LD_INT 15
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: PUSH
32347: LD_VAR 0 2
32351: PUSH
32352: LD_INT 9
32354: MINUS
32355: ARRAY
32356: ST_TO_ADDR
// end ; 14 :
32357: GO 32776
32359: LD_INT 14
32361: DOUBLE
32362: EQUAL
32363: IFTRUE 32367
32365: GO 32378
32367: POP
// bc_type := b_workshop ; 15 :
32368: LD_ADDR_OWVAR 42
32372: PUSH
32373: LD_INT 2
32375: ST_TO_ADDR
32376: GO 32776
32378: LD_INT 15
32380: DOUBLE
32381: EQUAL
32382: IFTRUE 32386
32384: GO 32397
32386: POP
// bc_type := b_factory ; 16 :
32387: LD_ADDR_OWVAR 42
32391: PUSH
32392: LD_INT 3
32394: ST_TO_ADDR
32395: GO 32776
32397: LD_INT 16
32399: DOUBLE
32400: EQUAL
32401: IFTRUE 32405
32403: GO 32416
32405: POP
// bc_type := b_ext_gun ; 17 :
32406: LD_ADDR_OWVAR 42
32410: PUSH
32411: LD_INT 17
32413: ST_TO_ADDR
32414: GO 32776
32416: LD_INT 17
32418: DOUBLE
32419: EQUAL
32420: IFTRUE 32424
32422: GO 32452
32424: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32425: LD_ADDR_OWVAR 42
32429: PUSH
32430: LD_INT 19
32432: PUSH
32433: LD_INT 23
32435: PUSH
32436: LD_INT 19
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: PUSH
32444: LD_VAR 0 1
32448: ARRAY
32449: ST_TO_ADDR
32450: GO 32776
32452: LD_INT 18
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32460
32458: GO 32471
32460: POP
// bc_type := b_ext_radar ; 19 :
32461: LD_ADDR_OWVAR 42
32465: PUSH
32466: LD_INT 20
32468: ST_TO_ADDR
32469: GO 32776
32471: LD_INT 19
32473: DOUBLE
32474: EQUAL
32475: IFTRUE 32479
32477: GO 32490
32479: POP
// bc_type := b_ext_radio ; 20 :
32480: LD_ADDR_OWVAR 42
32484: PUSH
32485: LD_INT 22
32487: ST_TO_ADDR
32488: GO 32776
32490: LD_INT 20
32492: DOUBLE
32493: EQUAL
32494: IFTRUE 32498
32496: GO 32509
32498: POP
// bc_type := b_ext_siberium ; 21 :
32499: LD_ADDR_OWVAR 42
32503: PUSH
32504: LD_INT 21
32506: ST_TO_ADDR
32507: GO 32776
32509: LD_INT 21
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 32528
32517: POP
// bc_type := b_ext_computer ; 22 :
32518: LD_ADDR_OWVAR 42
32522: PUSH
32523: LD_INT 24
32525: ST_TO_ADDR
32526: GO 32776
32528: LD_INT 22
32530: DOUBLE
32531: EQUAL
32532: IFTRUE 32536
32534: GO 32547
32536: POP
// bc_type := b_ext_track ; 23 :
32537: LD_ADDR_OWVAR 42
32541: PUSH
32542: LD_INT 16
32544: ST_TO_ADDR
32545: GO 32776
32547: LD_INT 23
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32555
32553: GO 32566
32555: POP
// bc_type := b_ext_laser ; 24 :
32556: LD_ADDR_OWVAR 42
32560: PUSH
32561: LD_INT 25
32563: ST_TO_ADDR
32564: GO 32776
32566: LD_INT 24
32568: DOUBLE
32569: EQUAL
32570: IFTRUE 32574
32572: GO 32585
32574: POP
// bc_type := b_control_tower ; 25 :
32575: LD_ADDR_OWVAR 42
32579: PUSH
32580: LD_INT 36
32582: ST_TO_ADDR
32583: GO 32776
32585: LD_INT 25
32587: DOUBLE
32588: EQUAL
32589: IFTRUE 32593
32591: GO 32604
32593: POP
// bc_type := b_breastwork ; 26 :
32594: LD_ADDR_OWVAR 42
32598: PUSH
32599: LD_INT 31
32601: ST_TO_ADDR
32602: GO 32776
32604: LD_INT 26
32606: DOUBLE
32607: EQUAL
32608: IFTRUE 32612
32610: GO 32623
32612: POP
// bc_type := b_bunker ; 27 :
32613: LD_ADDR_OWVAR 42
32617: PUSH
32618: LD_INT 32
32620: ST_TO_ADDR
32621: GO 32776
32623: LD_INT 27
32625: DOUBLE
32626: EQUAL
32627: IFTRUE 32631
32629: GO 32642
32631: POP
// bc_type := b_turret ; 28 :
32632: LD_ADDR_OWVAR 42
32636: PUSH
32637: LD_INT 33
32639: ST_TO_ADDR
32640: GO 32776
32642: LD_INT 28
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32650
32648: GO 32661
32650: POP
// bc_type := b_armoury ; 29 :
32651: LD_ADDR_OWVAR 42
32655: PUSH
32656: LD_INT 4
32658: ST_TO_ADDR
32659: GO 32776
32661: LD_INT 29
32663: DOUBLE
32664: EQUAL
32665: IFTRUE 32669
32667: GO 32680
32669: POP
// bc_type := b_barracks ; 30 :
32670: LD_ADDR_OWVAR 42
32674: PUSH
32675: LD_INT 5
32677: ST_TO_ADDR
32678: GO 32776
32680: LD_INT 30
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32699
32688: POP
// bc_type := b_solar_power ; 31 :
32689: LD_ADDR_OWVAR 42
32693: PUSH
32694: LD_INT 27
32696: ST_TO_ADDR
32697: GO 32776
32699: LD_INT 31
32701: DOUBLE
32702: EQUAL
32703: IFTRUE 32707
32705: GO 32718
32707: POP
// bc_type := b_oil_power ; 32 :
32708: LD_ADDR_OWVAR 42
32712: PUSH
32713: LD_INT 26
32715: ST_TO_ADDR
32716: GO 32776
32718: LD_INT 32
32720: DOUBLE
32721: EQUAL
32722: IFTRUE 32726
32724: GO 32737
32726: POP
// bc_type := b_siberite_power ; 33 :
32727: LD_ADDR_OWVAR 42
32731: PUSH
32732: LD_INT 28
32734: ST_TO_ADDR
32735: GO 32776
32737: LD_INT 33
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32745
32743: GO 32756
32745: POP
// bc_type := b_oil_mine ; 34 :
32746: LD_ADDR_OWVAR 42
32750: PUSH
32751: LD_INT 29
32753: ST_TO_ADDR
32754: GO 32776
32756: LD_INT 34
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32764
32762: GO 32775
32764: POP
// bc_type := b_siberite_mine ; end ;
32765: LD_ADDR_OWVAR 42
32769: PUSH
32770: LD_INT 30
32772: ST_TO_ADDR
32773: GO 32776
32775: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32776: LD_ADDR_VAR 0 8
32780: PUSH
32781: LD_VAR 0 5
32785: PPUSH
32786: LD_VAR 0 6
32790: PPUSH
32791: LD_VAR 0 3
32795: PPUSH
32796: CALL_OW 47
32800: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32801: LD_OWVAR 42
32805: PUSH
32806: LD_INT 32
32808: PUSH
32809: LD_INT 33
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: IN
32816: IFFALSE 32832
// PlaceWeaponTurret ( b , weapon ) ;
32818: LD_VAR 0 8
32822: PPUSH
32823: LD_VAR 0 4
32827: PPUSH
32828: CALL_OW 431
// end ;
32832: LD_VAR 0 7
32836: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32837: LD_INT 0
32839: PPUSH
32840: PPUSH
32841: PPUSH
32842: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32843: LD_ADDR_VAR 0 4
32847: PUSH
32848: LD_INT 22
32850: PUSH
32851: LD_OWVAR 2
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 2
32862: PUSH
32863: LD_INT 30
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 30
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PPUSH
32892: CALL_OW 69
32896: ST_TO_ADDR
// if not tmp then
32897: LD_VAR 0 4
32901: NOT
32902: IFFALSE 32906
// exit ;
32904: GO 32965
// for i in tmp do
32906: LD_ADDR_VAR 0 2
32910: PUSH
32911: LD_VAR 0 4
32915: PUSH
32916: FOR_IN
32917: IFFALSE 32963
// for j = 1 to 3 do
32919: LD_ADDR_VAR 0 3
32923: PUSH
32924: DOUBLE
32925: LD_INT 1
32927: DEC
32928: ST_TO_ADDR
32929: LD_INT 3
32931: PUSH
32932: FOR_TO
32933: IFFALSE 32959
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32935: LD_VAR 0 2
32939: PPUSH
32940: CALL_OW 274
32944: PPUSH
32945: LD_VAR 0 3
32949: PPUSH
32950: LD_INT 99999
32952: PPUSH
32953: CALL_OW 277
32957: GO 32932
32959: POP
32960: POP
32961: GO 32916
32963: POP
32964: POP
// end ;
32965: LD_VAR 0 1
32969: RET
// export function hHackSetLevel10 ; var i , j ; begin
32970: LD_INT 0
32972: PPUSH
32973: PPUSH
32974: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32975: LD_ADDR_VAR 0 2
32979: PUSH
32980: LD_INT 21
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PPUSH
32990: CALL_OW 69
32994: PUSH
32995: FOR_IN
32996: IFFALSE 33048
// if IsSelected ( i ) then
32998: LD_VAR 0 2
33002: PPUSH
33003: CALL_OW 306
33007: IFFALSE 33046
// begin for j := 1 to 4 do
33009: LD_ADDR_VAR 0 3
33013: PUSH
33014: DOUBLE
33015: LD_INT 1
33017: DEC
33018: ST_TO_ADDR
33019: LD_INT 4
33021: PUSH
33022: FOR_TO
33023: IFFALSE 33044
// SetSkill ( i , j , 10 ) ;
33025: LD_VAR 0 2
33029: PPUSH
33030: LD_VAR 0 3
33034: PPUSH
33035: LD_INT 10
33037: PPUSH
33038: CALL_OW 237
33042: GO 33022
33044: POP
33045: POP
// end ;
33046: GO 32995
33048: POP
33049: POP
// end ;
33050: LD_VAR 0 1
33054: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33055: LD_INT 0
33057: PPUSH
33058: PPUSH
33059: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33060: LD_ADDR_VAR 0 2
33064: PUSH
33065: LD_INT 22
33067: PUSH
33068: LD_OWVAR 2
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 21
33079: PUSH
33080: LD_INT 1
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PPUSH
33091: CALL_OW 69
33095: PUSH
33096: FOR_IN
33097: IFFALSE 33138
// begin for j := 1 to 4 do
33099: LD_ADDR_VAR 0 3
33103: PUSH
33104: DOUBLE
33105: LD_INT 1
33107: DEC
33108: ST_TO_ADDR
33109: LD_INT 4
33111: PUSH
33112: FOR_TO
33113: IFFALSE 33134
// SetSkill ( i , j , 10 ) ;
33115: LD_VAR 0 2
33119: PPUSH
33120: LD_VAR 0 3
33124: PPUSH
33125: LD_INT 10
33127: PPUSH
33128: CALL_OW 237
33132: GO 33112
33134: POP
33135: POP
// end ;
33136: GO 33096
33138: POP
33139: POP
// end ;
33140: LD_VAR 0 1
33144: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33145: LD_INT 0
33147: PPUSH
// uc_side := your_side ;
33148: LD_ADDR_OWVAR 20
33152: PUSH
33153: LD_OWVAR 2
33157: ST_TO_ADDR
// uc_nation := nation ;
33158: LD_ADDR_OWVAR 21
33162: PUSH
33163: LD_VAR 0 1
33167: ST_TO_ADDR
// InitHc ;
33168: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33172: LD_INT 0
33174: PPUSH
33175: LD_VAR 0 2
33179: PPUSH
33180: LD_VAR 0 3
33184: PPUSH
33185: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33189: LD_VAR 0 4
33193: PPUSH
33194: LD_VAR 0 5
33198: PPUSH
33199: CALL_OW 428
33203: PUSH
33204: LD_INT 0
33206: EQUAL
33207: IFFALSE 33231
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33209: CALL_OW 44
33213: PPUSH
33214: LD_VAR 0 4
33218: PPUSH
33219: LD_VAR 0 5
33223: PPUSH
33224: LD_INT 1
33226: PPUSH
33227: CALL_OW 48
// end ;
33231: LD_VAR 0 6
33235: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33236: LD_INT 0
33238: PPUSH
33239: PPUSH
// uc_side := your_side ;
33240: LD_ADDR_OWVAR 20
33244: PUSH
33245: LD_OWVAR 2
33249: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33250: LD_VAR 0 1
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: LD_INT 3
33263: PUSH
33264: LD_INT 4
33266: PUSH
33267: LD_INT 5
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: IN
33277: IFFALSE 33289
// uc_nation := nation_american else
33279: LD_ADDR_OWVAR 21
33283: PUSH
33284: LD_INT 1
33286: ST_TO_ADDR
33287: GO 33332
// if chassis in [ 11 , 12 , 13 , 14 ] then
33289: LD_VAR 0 1
33293: PUSH
33294: LD_INT 11
33296: PUSH
33297: LD_INT 12
33299: PUSH
33300: LD_INT 13
33302: PUSH
33303: LD_INT 14
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: IN
33312: IFFALSE 33324
// uc_nation := nation_arabian else
33314: LD_ADDR_OWVAR 21
33318: PUSH
33319: LD_INT 2
33321: ST_TO_ADDR
33322: GO 33332
// uc_nation := nation_russian ;
33324: LD_ADDR_OWVAR 21
33328: PUSH
33329: LD_INT 3
33331: ST_TO_ADDR
// vc_chassis := chassis ;
33332: LD_ADDR_OWVAR 37
33336: PUSH
33337: LD_VAR 0 1
33341: ST_TO_ADDR
// vc_engine := engine ;
33342: LD_ADDR_OWVAR 39
33346: PUSH
33347: LD_VAR 0 2
33351: ST_TO_ADDR
// vc_control := control ;
33352: LD_ADDR_OWVAR 38
33356: PUSH
33357: LD_VAR 0 3
33361: ST_TO_ADDR
// vc_weapon := weapon ;
33362: LD_ADDR_OWVAR 40
33366: PUSH
33367: LD_VAR 0 4
33371: ST_TO_ADDR
// un := CreateVehicle ;
33372: LD_ADDR_VAR 0 8
33376: PUSH
33377: CALL_OW 45
33381: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33382: LD_VAR 0 8
33386: PPUSH
33387: LD_INT 0
33389: PPUSH
33390: LD_INT 5
33392: PPUSH
33393: CALL_OW 12
33397: PPUSH
33398: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33402: LD_VAR 0 8
33406: PPUSH
33407: LD_VAR 0 5
33411: PPUSH
33412: LD_VAR 0 6
33416: PPUSH
33417: LD_INT 1
33419: PPUSH
33420: CALL_OW 48
// end ;
33424: LD_VAR 0 7
33428: RET
// export hInvincible ; every 1 do
33429: GO 33431
33431: DISABLE
// hInvincible := [ ] ;
33432: LD_ADDR_EXP 95
33436: PUSH
33437: EMPTY
33438: ST_TO_ADDR
33439: END
// every 10 do var i ;
33440: GO 33442
33442: DISABLE
33443: LD_INT 0
33445: PPUSH
// begin enable ;
33446: ENABLE
// if not hInvincible then
33447: LD_EXP 95
33451: NOT
33452: IFFALSE 33456
// exit ;
33454: GO 33500
// for i in hInvincible do
33456: LD_ADDR_VAR 0 1
33460: PUSH
33461: LD_EXP 95
33465: PUSH
33466: FOR_IN
33467: IFFALSE 33498
// if GetLives ( i ) < 1000 then
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL_OW 256
33478: PUSH
33479: LD_INT 1000
33481: LESS
33482: IFFALSE 33496
// SetLives ( i , 1000 ) ;
33484: LD_VAR 0 1
33488: PPUSH
33489: LD_INT 1000
33491: PPUSH
33492: CALL_OW 234
33496: GO 33466
33498: POP
33499: POP
// end ;
33500: PPOPN 1
33502: END
// export function hHackInvincible ; var i ; begin
33503: LD_INT 0
33505: PPUSH
33506: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33507: LD_ADDR_VAR 0 2
33511: PUSH
33512: LD_INT 2
33514: PUSH
33515: LD_INT 21
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 21
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: PPUSH
33540: CALL_OW 69
33544: PUSH
33545: FOR_IN
33546: IFFALSE 33607
// if IsSelected ( i ) then
33548: LD_VAR 0 2
33552: PPUSH
33553: CALL_OW 306
33557: IFFALSE 33605
// begin if i in hInvincible then
33559: LD_VAR 0 2
33563: PUSH
33564: LD_EXP 95
33568: IN
33569: IFFALSE 33589
// hInvincible := hInvincible diff i else
33571: LD_ADDR_EXP 95
33575: PUSH
33576: LD_EXP 95
33580: PUSH
33581: LD_VAR 0 2
33585: DIFF
33586: ST_TO_ADDR
33587: GO 33605
// hInvincible := hInvincible union i ;
33589: LD_ADDR_EXP 95
33593: PUSH
33594: LD_EXP 95
33598: PUSH
33599: LD_VAR 0 2
33603: UNION
33604: ST_TO_ADDR
// end ;
33605: GO 33545
33607: POP
33608: POP
// end ;
33609: LD_VAR 0 1
33613: RET
// export function hHackInvisible ; var i , j ; begin
33614: LD_INT 0
33616: PPUSH
33617: PPUSH
33618: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33619: LD_ADDR_VAR 0 2
33623: PUSH
33624: LD_INT 21
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PPUSH
33634: CALL_OW 69
33638: PUSH
33639: FOR_IN
33640: IFFALSE 33664
// if IsSelected ( i ) then
33642: LD_VAR 0 2
33646: PPUSH
33647: CALL_OW 306
33651: IFFALSE 33662
// ComForceInvisible ( i ) ;
33653: LD_VAR 0 2
33657: PPUSH
33658: CALL_OW 496
33662: GO 33639
33664: POP
33665: POP
// end ;
33666: LD_VAR 0 1
33670: RET
// export function hHackChangeYourSide ; begin
33671: LD_INT 0
33673: PPUSH
// if your_side = 8 then
33674: LD_OWVAR 2
33678: PUSH
33679: LD_INT 8
33681: EQUAL
33682: IFFALSE 33694
// your_side := 0 else
33684: LD_ADDR_OWVAR 2
33688: PUSH
33689: LD_INT 0
33691: ST_TO_ADDR
33692: GO 33708
// your_side := your_side + 1 ;
33694: LD_ADDR_OWVAR 2
33698: PUSH
33699: LD_OWVAR 2
33703: PUSH
33704: LD_INT 1
33706: PLUS
33707: ST_TO_ADDR
// end ;
33708: LD_VAR 0 1
33712: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33713: LD_INT 0
33715: PPUSH
33716: PPUSH
33717: PPUSH
// for i in all_units do
33718: LD_ADDR_VAR 0 2
33722: PUSH
33723: LD_OWVAR 3
33727: PUSH
33728: FOR_IN
33729: IFFALSE 33807
// if IsSelected ( i ) then
33731: LD_VAR 0 2
33735: PPUSH
33736: CALL_OW 306
33740: IFFALSE 33805
// begin j := GetSide ( i ) ;
33742: LD_ADDR_VAR 0 3
33746: PUSH
33747: LD_VAR 0 2
33751: PPUSH
33752: CALL_OW 255
33756: ST_TO_ADDR
// if j = 8 then
33757: LD_VAR 0 3
33761: PUSH
33762: LD_INT 8
33764: EQUAL
33765: IFFALSE 33777
// j := 0 else
33767: LD_ADDR_VAR 0 3
33771: PUSH
33772: LD_INT 0
33774: ST_TO_ADDR
33775: GO 33791
// j := j + 1 ;
33777: LD_ADDR_VAR 0 3
33781: PUSH
33782: LD_VAR 0 3
33786: PUSH
33787: LD_INT 1
33789: PLUS
33790: ST_TO_ADDR
// SetSide ( i , j ) ;
33791: LD_VAR 0 2
33795: PPUSH
33796: LD_VAR 0 3
33800: PPUSH
33801: CALL_OW 235
// end ;
33805: GO 33728
33807: POP
33808: POP
// end ;
33809: LD_VAR 0 1
33813: RET
// export function hHackFog ; begin
33814: LD_INT 0
33816: PPUSH
// FogOff ( true ) ;
33817: LD_INT 1
33819: PPUSH
33820: CALL_OW 344
// end ;
33824: LD_VAR 0 1
33828: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33829: LD_INT 0
33831: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33832: LD_VAR 0 1
33836: PPUSH
33837: LD_VAR 0 2
33841: PPUSH
33842: LD_VAR 0 3
33846: PPUSH
33847: LD_INT 1
33849: PPUSH
33850: LD_INT 1
33852: PPUSH
33853: CALL_OW 483
// CenterOnXY ( x , y ) ;
33857: LD_VAR 0 2
33861: PPUSH
33862: LD_VAR 0 3
33866: PPUSH
33867: CALL_OW 84
// end ;
33871: LD_VAR 0 4
33875: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33876: LD_INT 0
33878: PPUSH
33879: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33880: LD_VAR 0 1
33884: NOT
33885: PUSH
33886: LD_VAR 0 2
33890: PPUSH
33891: LD_VAR 0 3
33895: PPUSH
33896: CALL_OW 488
33900: NOT
33901: OR
33902: PUSH
33903: LD_VAR 0 1
33907: PPUSH
33908: CALL_OW 266
33912: PUSH
33913: LD_INT 3
33915: NONEQUAL
33916: PUSH
33917: LD_VAR 0 1
33921: PPUSH
33922: CALL_OW 247
33926: PUSH
33927: LD_INT 1
33929: EQUAL
33930: NOT
33931: AND
33932: OR
33933: IFFALSE 33937
// exit ;
33935: GO 34086
// if GetType ( factory ) = unit_human then
33937: LD_VAR 0 1
33941: PPUSH
33942: CALL_OW 247
33946: PUSH
33947: LD_INT 1
33949: EQUAL
33950: IFFALSE 33967
// factory := IsInUnit ( factory ) ;
33952: LD_ADDR_VAR 0 1
33956: PUSH
33957: LD_VAR 0 1
33961: PPUSH
33962: CALL_OW 310
33966: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33967: LD_VAR 0 1
33971: PPUSH
33972: CALL_OW 266
33976: PUSH
33977: LD_INT 3
33979: NONEQUAL
33980: IFFALSE 33984
// exit ;
33982: GO 34086
// if HexInfo ( x , y ) = factory then
33984: LD_VAR 0 2
33988: PPUSH
33989: LD_VAR 0 3
33993: PPUSH
33994: CALL_OW 428
33998: PUSH
33999: LD_VAR 0 1
34003: EQUAL
34004: IFFALSE 34031
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34006: LD_ADDR_EXP 96
34010: PUSH
34011: LD_EXP 96
34015: PPUSH
34016: LD_VAR 0 1
34020: PPUSH
34021: LD_INT 0
34023: PPUSH
34024: CALL_OW 1
34028: ST_TO_ADDR
34029: GO 34082
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34031: LD_ADDR_EXP 96
34035: PUSH
34036: LD_EXP 96
34040: PPUSH
34041: LD_VAR 0 1
34045: PPUSH
34046: LD_VAR 0 1
34050: PPUSH
34051: CALL_OW 255
34055: PUSH
34056: LD_VAR 0 1
34060: PUSH
34061: LD_VAR 0 2
34065: PUSH
34066: LD_VAR 0 3
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: PPUSH
34077: CALL_OW 1
34081: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34082: CALL 34091 0 0
// end ;
34086: LD_VAR 0 4
34090: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34091: LD_INT 0
34093: PPUSH
34094: PPUSH
34095: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34096: LD_STRING resetFactoryWaypoint();
34098: PPUSH
34099: CALL_OW 559
// if factoryWaypoints then
34103: LD_EXP 96
34107: IFFALSE 34233
// begin list := PrepareArray ( factoryWaypoints ) ;
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: LD_EXP 96
34118: PPUSH
34119: CALL 80702 0 1
34123: ST_TO_ADDR
// for i := 1 to list do
34124: LD_ADDR_VAR 0 2
34128: PUSH
34129: DOUBLE
34130: LD_INT 1
34132: DEC
34133: ST_TO_ADDR
34134: LD_VAR 0 3
34138: PUSH
34139: FOR_TO
34140: IFFALSE 34231
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34142: LD_STRING setFactoryWaypointXY(
34144: PUSH
34145: LD_VAR 0 3
34149: PUSH
34150: LD_VAR 0 2
34154: ARRAY
34155: PUSH
34156: LD_INT 1
34158: ARRAY
34159: STR
34160: PUSH
34161: LD_STRING ,
34163: STR
34164: PUSH
34165: LD_VAR 0 3
34169: PUSH
34170: LD_VAR 0 2
34174: ARRAY
34175: PUSH
34176: LD_INT 2
34178: ARRAY
34179: STR
34180: PUSH
34181: LD_STRING ,
34183: STR
34184: PUSH
34185: LD_VAR 0 3
34189: PUSH
34190: LD_VAR 0 2
34194: ARRAY
34195: PUSH
34196: LD_INT 3
34198: ARRAY
34199: STR
34200: PUSH
34201: LD_STRING ,
34203: STR
34204: PUSH
34205: LD_VAR 0 3
34209: PUSH
34210: LD_VAR 0 2
34214: ARRAY
34215: PUSH
34216: LD_INT 4
34218: ARRAY
34219: STR
34220: PUSH
34221: LD_STRING )
34223: STR
34224: PPUSH
34225: CALL_OW 559
34229: GO 34139
34231: POP
34232: POP
// end ; end ;
34233: LD_VAR 0 1
34237: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34238: LD_INT 0
34240: PPUSH
// if HexInfo ( x , y ) = warehouse then
34241: LD_VAR 0 2
34245: PPUSH
34246: LD_VAR 0 3
34250: PPUSH
34251: CALL_OW 428
34255: PUSH
34256: LD_VAR 0 1
34260: EQUAL
34261: IFFALSE 34288
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34263: LD_ADDR_EXP 97
34267: PUSH
34268: LD_EXP 97
34272: PPUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: LD_INT 0
34280: PPUSH
34281: CALL_OW 1
34285: ST_TO_ADDR
34286: GO 34339
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34288: LD_ADDR_EXP 97
34292: PUSH
34293: LD_EXP 97
34297: PPUSH
34298: LD_VAR 0 1
34302: PPUSH
34303: LD_VAR 0 1
34307: PPUSH
34308: CALL_OW 255
34312: PUSH
34313: LD_VAR 0 1
34317: PUSH
34318: LD_VAR 0 2
34322: PUSH
34323: LD_VAR 0 3
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: PPUSH
34334: CALL_OW 1
34338: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34339: CALL 34348 0 0
// end ;
34343: LD_VAR 0 4
34347: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34348: LD_INT 0
34350: PPUSH
34351: PPUSH
34352: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34353: LD_STRING resetWarehouseGatheringPoints();
34355: PPUSH
34356: CALL_OW 559
// if warehouseGatheringPoints then
34360: LD_EXP 97
34364: IFFALSE 34490
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34366: LD_ADDR_VAR 0 3
34370: PUSH
34371: LD_EXP 97
34375: PPUSH
34376: CALL 80702 0 1
34380: ST_TO_ADDR
// for i := 1 to list do
34381: LD_ADDR_VAR 0 2
34385: PUSH
34386: DOUBLE
34387: LD_INT 1
34389: DEC
34390: ST_TO_ADDR
34391: LD_VAR 0 3
34395: PUSH
34396: FOR_TO
34397: IFFALSE 34488
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34399: LD_STRING setWarehouseGatheringPointXY(
34401: PUSH
34402: LD_VAR 0 3
34406: PUSH
34407: LD_VAR 0 2
34411: ARRAY
34412: PUSH
34413: LD_INT 1
34415: ARRAY
34416: STR
34417: PUSH
34418: LD_STRING ,
34420: STR
34421: PUSH
34422: LD_VAR 0 3
34426: PUSH
34427: LD_VAR 0 2
34431: ARRAY
34432: PUSH
34433: LD_INT 2
34435: ARRAY
34436: STR
34437: PUSH
34438: LD_STRING ,
34440: STR
34441: PUSH
34442: LD_VAR 0 3
34446: PUSH
34447: LD_VAR 0 2
34451: ARRAY
34452: PUSH
34453: LD_INT 3
34455: ARRAY
34456: STR
34457: PUSH
34458: LD_STRING ,
34460: STR
34461: PUSH
34462: LD_VAR 0 3
34466: PUSH
34467: LD_VAR 0 2
34471: ARRAY
34472: PUSH
34473: LD_INT 4
34475: ARRAY
34476: STR
34477: PUSH
34478: LD_STRING )
34480: STR
34481: PPUSH
34482: CALL_OW 559
34486: GO 34396
34488: POP
34489: POP
// end ; end ;
34490: LD_VAR 0 1
34494: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34495: LD_EXP 97
34499: IFFALSE 35184
34501: GO 34503
34503: DISABLE
34504: LD_INT 0
34506: PPUSH
34507: PPUSH
34508: PPUSH
34509: PPUSH
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
34514: PPUSH
// begin enable ;
34515: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34516: LD_ADDR_VAR 0 3
34520: PUSH
34521: LD_EXP 97
34525: PPUSH
34526: CALL 80702 0 1
34530: ST_TO_ADDR
// if not list then
34531: LD_VAR 0 3
34535: NOT
34536: IFFALSE 34540
// exit ;
34538: GO 35184
// for i := 1 to list do
34540: LD_ADDR_VAR 0 1
34544: PUSH
34545: DOUBLE
34546: LD_INT 1
34548: DEC
34549: ST_TO_ADDR
34550: LD_VAR 0 3
34554: PUSH
34555: FOR_TO
34556: IFFALSE 35182
// begin depot := list [ i ] [ 2 ] ;
34558: LD_ADDR_VAR 0 8
34562: PUSH
34563: LD_VAR 0 3
34567: PUSH
34568: LD_VAR 0 1
34572: ARRAY
34573: PUSH
34574: LD_INT 2
34576: ARRAY
34577: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34578: LD_ADDR_VAR 0 5
34582: PUSH
34583: LD_VAR 0 3
34587: PUSH
34588: LD_VAR 0 1
34592: ARRAY
34593: PUSH
34594: LD_INT 1
34596: ARRAY
34597: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34598: LD_VAR 0 8
34602: PPUSH
34603: CALL_OW 301
34607: PUSH
34608: LD_VAR 0 5
34612: PUSH
34613: LD_VAR 0 8
34617: PPUSH
34618: CALL_OW 255
34622: NONEQUAL
34623: OR
34624: IFFALSE 34653
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34626: LD_ADDR_EXP 97
34630: PUSH
34631: LD_EXP 97
34635: PPUSH
34636: LD_VAR 0 8
34640: PPUSH
34641: LD_INT 0
34643: PPUSH
34644: CALL_OW 1
34648: ST_TO_ADDR
// exit ;
34649: POP
34650: POP
34651: GO 35184
// end ; x := list [ i ] [ 3 ] ;
34653: LD_ADDR_VAR 0 6
34657: PUSH
34658: LD_VAR 0 3
34662: PUSH
34663: LD_VAR 0 1
34667: ARRAY
34668: PUSH
34669: LD_INT 3
34671: ARRAY
34672: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34673: LD_ADDR_VAR 0 7
34677: PUSH
34678: LD_VAR 0 3
34682: PUSH
34683: LD_VAR 0 1
34687: ARRAY
34688: PUSH
34689: LD_INT 4
34691: ARRAY
34692: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34693: LD_ADDR_VAR 0 9
34697: PUSH
34698: LD_VAR 0 6
34702: PPUSH
34703: LD_VAR 0 7
34707: PPUSH
34708: LD_INT 16
34710: PPUSH
34711: CALL 79290 0 3
34715: ST_TO_ADDR
// if not cratesNearbyPoint then
34716: LD_VAR 0 9
34720: NOT
34721: IFFALSE 34727
// exit ;
34723: POP
34724: POP
34725: GO 35184
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34727: LD_ADDR_VAR 0 4
34731: PUSH
34732: LD_INT 22
34734: PUSH
34735: LD_VAR 0 5
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 60
34749: PUSH
34750: EMPTY
34751: LIST
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 91
34759: PUSH
34760: LD_VAR 0 8
34764: PUSH
34765: LD_INT 6
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: LD_INT 25
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 25
34788: PUSH
34789: LD_INT 16
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: LIST
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: PPUSH
34807: CALL_OW 69
34811: PUSH
34812: LD_VAR 0 8
34816: PPUSH
34817: CALL_OW 313
34821: PPUSH
34822: LD_INT 3
34824: PUSH
34825: LD_INT 60
34827: PUSH
34828: EMPTY
34829: LIST
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: PUSH
34838: LD_INT 25
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 25
34850: PUSH
34851: LD_INT 16
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PPUSH
34867: CALL_OW 72
34871: UNION
34872: ST_TO_ADDR
// if tmp then
34873: LD_VAR 0 4
34877: IFFALSE 34957
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34879: LD_ADDR_VAR 0 4
34883: PUSH
34884: LD_VAR 0 4
34888: PPUSH
34889: LD_INT 3
34891: PPUSH
34892: CALL 77259 0 2
34896: ST_TO_ADDR
// for j in tmp do
34897: LD_ADDR_VAR 0 2
34901: PUSH
34902: LD_VAR 0 4
34906: PUSH
34907: FOR_IN
34908: IFFALSE 34951
// begin if IsInUnit ( j ) then
34910: LD_VAR 0 2
34914: PPUSH
34915: CALL_OW 310
34919: IFFALSE 34930
// ComExit ( j ) ;
34921: LD_VAR 0 2
34925: PPUSH
34926: CALL 77342 0 1
// AddComCollect ( j , x , y ) ;
34930: LD_VAR 0 2
34934: PPUSH
34935: LD_VAR 0 6
34939: PPUSH
34940: LD_VAR 0 7
34944: PPUSH
34945: CALL_OW 177
// end ;
34949: GO 34907
34951: POP
34952: POP
// exit ;
34953: POP
34954: POP
34955: GO 35184
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34957: LD_ADDR_VAR 0 4
34961: PUSH
34962: LD_INT 22
34964: PUSH
34965: LD_VAR 0 5
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 91
34976: PUSH
34977: LD_VAR 0 8
34981: PUSH
34982: LD_INT 8
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: PUSH
34993: LD_INT 34
34995: PUSH
34996: LD_INT 12
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 34
35005: PUSH
35006: LD_INT 51
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 34
35015: PUSH
35016: LD_INT 32
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 34
35025: PUSH
35026: LD_INT 89
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: PPUSH
35045: CALL_OW 69
35049: ST_TO_ADDR
// if tmp then
35050: LD_VAR 0 4
35054: IFFALSE 35180
// begin for j in tmp do
35056: LD_ADDR_VAR 0 2
35060: PUSH
35061: LD_VAR 0 4
35065: PUSH
35066: FOR_IN
35067: IFFALSE 35178
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35069: LD_VAR 0 2
35073: PPUSH
35074: CALL_OW 262
35078: PUSH
35079: LD_INT 3
35081: EQUAL
35082: PUSH
35083: LD_VAR 0 2
35087: PPUSH
35088: CALL_OW 261
35092: PUSH
35093: LD_INT 20
35095: GREATER
35096: OR
35097: PUSH
35098: LD_VAR 0 2
35102: PPUSH
35103: CALL_OW 314
35107: NOT
35108: AND
35109: PUSH
35110: LD_VAR 0 2
35114: PPUSH
35115: CALL_OW 263
35119: PUSH
35120: LD_INT 1
35122: NONEQUAL
35123: PUSH
35124: LD_VAR 0 2
35128: PPUSH
35129: CALL_OW 311
35133: OR
35134: AND
35135: IFFALSE 35176
// begin ComCollect ( j , x , y ) ;
35137: LD_VAR 0 2
35141: PPUSH
35142: LD_VAR 0 6
35146: PPUSH
35147: LD_VAR 0 7
35151: PPUSH
35152: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35156: LD_VAR 0 2
35160: PPUSH
35161: LD_VAR 0 8
35165: PPUSH
35166: CALL_OW 172
// exit ;
35170: POP
35171: POP
35172: POP
35173: POP
35174: GO 35184
// end ;
35176: GO 35066
35178: POP
35179: POP
// end ; end ;
35180: GO 34555
35182: POP
35183: POP
// end ; end_of_file
35184: PPOPN 9
35186: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35187: LD_INT 0
35189: PPUSH
35190: PPUSH
35191: PPUSH
35192: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35193: LD_VAR 0 1
35197: PPUSH
35198: CALL_OW 264
35202: PUSH
35203: LD_INT 91
35205: EQUAL
35206: IFFALSE 35278
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35208: LD_INT 68
35210: PPUSH
35211: LD_VAR 0 1
35215: PPUSH
35216: CALL_OW 255
35220: PPUSH
35221: CALL_OW 321
35225: PUSH
35226: LD_INT 2
35228: EQUAL
35229: IFFALSE 35241
// eff := 70 else
35231: LD_ADDR_VAR 0 4
35235: PUSH
35236: LD_INT 70
35238: ST_TO_ADDR
35239: GO 35249
// eff := 30 ;
35241: LD_ADDR_VAR 0 4
35245: PUSH
35246: LD_INT 30
35248: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35249: LD_VAR 0 1
35253: PPUSH
35254: CALL_OW 250
35258: PPUSH
35259: LD_VAR 0 1
35263: PPUSH
35264: CALL_OW 251
35268: PPUSH
35269: LD_VAR 0 4
35273: PPUSH
35274: CALL_OW 495
// end ; end ;
35278: LD_VAR 0 2
35282: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35283: LD_INT 0
35285: PPUSH
// end ;
35286: LD_VAR 0 4
35290: RET
// export function SOS_Command ( cmd ) ; begin
35291: LD_INT 0
35293: PPUSH
// end ;
35294: LD_VAR 0 2
35298: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35299: LD_INT 0
35301: PPUSH
// end ;
35302: LD_VAR 0 6
35306: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35307: LD_INT 0
35309: PPUSH
35310: PPUSH
// if not vehicle or not factory then
35311: LD_VAR 0 1
35315: NOT
35316: PUSH
35317: LD_VAR 0 2
35321: NOT
35322: OR
35323: IFFALSE 35327
// exit ;
35325: GO 35558
// if factoryWaypoints >= factory then
35327: LD_EXP 96
35331: PUSH
35332: LD_VAR 0 2
35336: GREATEREQUAL
35337: IFFALSE 35558
// if factoryWaypoints [ factory ] then
35339: LD_EXP 96
35343: PUSH
35344: LD_VAR 0 2
35348: ARRAY
35349: IFFALSE 35558
// begin if GetControl ( vehicle ) = control_manual then
35351: LD_VAR 0 1
35355: PPUSH
35356: CALL_OW 263
35360: PUSH
35361: LD_INT 1
35363: EQUAL
35364: IFFALSE 35445
// begin driver := IsDrivenBy ( vehicle ) ;
35366: LD_ADDR_VAR 0 4
35370: PUSH
35371: LD_VAR 0 1
35375: PPUSH
35376: CALL_OW 311
35380: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35381: LD_VAR 0 4
35385: PPUSH
35386: LD_EXP 96
35390: PUSH
35391: LD_VAR 0 2
35395: ARRAY
35396: PUSH
35397: LD_INT 3
35399: ARRAY
35400: PPUSH
35401: LD_EXP 96
35405: PUSH
35406: LD_VAR 0 2
35410: ARRAY
35411: PUSH
35412: LD_INT 4
35414: ARRAY
35415: PPUSH
35416: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35420: LD_VAR 0 4
35424: PPUSH
35425: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35429: LD_VAR 0 4
35433: PPUSH
35434: LD_VAR 0 2
35438: PPUSH
35439: CALL_OW 180
// end else
35443: GO 35558
// if GetControl ( vehicle ) = control_remote then
35445: LD_VAR 0 1
35449: PPUSH
35450: CALL_OW 263
35454: PUSH
35455: LD_INT 2
35457: EQUAL
35458: IFFALSE 35519
// begin wait ( 0 0$2 ) ;
35460: LD_INT 70
35462: PPUSH
35463: CALL_OW 67
// if Connect ( vehicle ) then
35467: LD_VAR 0 1
35471: PPUSH
35472: CALL 47582 0 1
35476: IFFALSE 35517
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35478: LD_VAR 0 1
35482: PPUSH
35483: LD_EXP 96
35487: PUSH
35488: LD_VAR 0 2
35492: ARRAY
35493: PUSH
35494: LD_INT 3
35496: ARRAY
35497: PPUSH
35498: LD_EXP 96
35502: PUSH
35503: LD_VAR 0 2
35507: ARRAY
35508: PUSH
35509: LD_INT 4
35511: ARRAY
35512: PPUSH
35513: CALL_OW 171
// end else
35517: GO 35558
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35519: LD_VAR 0 1
35523: PPUSH
35524: LD_EXP 96
35528: PUSH
35529: LD_VAR 0 2
35533: ARRAY
35534: PUSH
35535: LD_INT 3
35537: ARRAY
35538: PPUSH
35539: LD_EXP 96
35543: PUSH
35544: LD_VAR 0 2
35548: ARRAY
35549: PUSH
35550: LD_INT 4
35552: ARRAY
35553: PPUSH
35554: CALL_OW 171
// end ; end ;
35558: LD_VAR 0 3
35562: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35563: LD_INT 0
35565: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35566: LD_VAR 0 1
35570: PUSH
35571: LD_INT 250
35573: EQUAL
35574: PUSH
35575: LD_VAR 0 2
35579: PPUSH
35580: CALL_OW 264
35584: PUSH
35585: LD_INT 81
35587: EQUAL
35588: AND
35589: IFFALSE 35610
// MinerPlaceMine ( unit , x , y ) ;
35591: LD_VAR 0 2
35595: PPUSH
35596: LD_VAR 0 4
35600: PPUSH
35601: LD_VAR 0 5
35605: PPUSH
35606: CALL 37995 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35610: LD_VAR 0 1
35614: PUSH
35615: LD_INT 251
35617: EQUAL
35618: PUSH
35619: LD_VAR 0 2
35623: PPUSH
35624: CALL_OW 264
35628: PUSH
35629: LD_INT 81
35631: EQUAL
35632: AND
35633: IFFALSE 35654
// MinerDetonateMine ( unit , x , y ) ;
35635: LD_VAR 0 2
35639: PPUSH
35640: LD_VAR 0 4
35644: PPUSH
35645: LD_VAR 0 5
35649: PPUSH
35650: CALL 38270 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35654: LD_VAR 0 1
35658: PUSH
35659: LD_INT 252
35661: EQUAL
35662: PUSH
35663: LD_VAR 0 2
35667: PPUSH
35668: CALL_OW 264
35672: PUSH
35673: LD_INT 81
35675: EQUAL
35676: AND
35677: IFFALSE 35698
// MinerCreateMinefield ( unit , x , y ) ;
35679: LD_VAR 0 2
35683: PPUSH
35684: LD_VAR 0 4
35688: PPUSH
35689: LD_VAR 0 5
35693: PPUSH
35694: CALL 38687 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35698: LD_VAR 0 1
35702: PUSH
35703: LD_INT 253
35705: EQUAL
35706: PUSH
35707: LD_VAR 0 2
35711: PPUSH
35712: CALL_OW 257
35716: PUSH
35717: LD_INT 5
35719: EQUAL
35720: AND
35721: IFFALSE 35742
// ComBinocular ( unit , x , y ) ;
35723: LD_VAR 0 2
35727: PPUSH
35728: LD_VAR 0 4
35732: PPUSH
35733: LD_VAR 0 5
35737: PPUSH
35738: CALL 39056 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35742: LD_VAR 0 1
35746: PUSH
35747: LD_INT 254
35749: EQUAL
35750: PUSH
35751: LD_VAR 0 2
35755: PPUSH
35756: CALL_OW 264
35760: PUSH
35761: LD_INT 99
35763: EQUAL
35764: AND
35765: PUSH
35766: LD_VAR 0 3
35770: PPUSH
35771: CALL_OW 263
35775: PUSH
35776: LD_INT 3
35778: EQUAL
35779: AND
35780: IFFALSE 35796
// HackDestroyVehicle ( unit , selectedUnit ) ;
35782: LD_VAR 0 2
35786: PPUSH
35787: LD_VAR 0 3
35791: PPUSH
35792: CALL 37359 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35796: LD_VAR 0 1
35800: PUSH
35801: LD_INT 255
35803: EQUAL
35804: PUSH
35805: LD_VAR 0 2
35809: PPUSH
35810: CALL_OW 264
35814: PUSH
35815: LD_INT 14
35817: PUSH
35818: LD_INT 53
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: IN
35825: AND
35826: PUSH
35827: LD_VAR 0 4
35831: PPUSH
35832: LD_VAR 0 5
35836: PPUSH
35837: CALL_OW 488
35841: AND
35842: IFFALSE 35866
// CutTreeXYR ( unit , x , y , 12 ) ;
35844: LD_VAR 0 2
35848: PPUSH
35849: LD_VAR 0 4
35853: PPUSH
35854: LD_VAR 0 5
35858: PPUSH
35859: LD_INT 12
35861: PPUSH
35862: CALL 35929 0 4
// if cmd = 256 then
35866: LD_VAR 0 1
35870: PUSH
35871: LD_INT 256
35873: EQUAL
35874: IFFALSE 35895
// SetFactoryWaypoint ( unit , x , y ) ;
35876: LD_VAR 0 2
35880: PPUSH
35881: LD_VAR 0 4
35885: PPUSH
35886: LD_VAR 0 5
35890: PPUSH
35891: CALL 33876 0 3
// if cmd = 257 then
35895: LD_VAR 0 1
35899: PUSH
35900: LD_INT 257
35902: EQUAL
35903: IFFALSE 35924
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35905: LD_VAR 0 2
35909: PPUSH
35910: LD_VAR 0 4
35914: PPUSH
35915: LD_VAR 0 5
35919: PPUSH
35920: CALL 34238 0 3
// end ;
35924: LD_VAR 0 6
35928: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35929: LD_INT 0
35931: PPUSH
35932: PPUSH
35933: PPUSH
35934: PPUSH
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35940: LD_VAR 0 1
35944: NOT
35945: PUSH
35946: LD_VAR 0 2
35950: PPUSH
35951: LD_VAR 0 3
35955: PPUSH
35956: CALL_OW 488
35960: NOT
35961: OR
35962: PUSH
35963: LD_VAR 0 4
35967: NOT
35968: OR
35969: IFFALSE 35973
// exit ;
35971: GO 36313
// list := [ ] ;
35973: LD_ADDR_VAR 0 13
35977: PUSH
35978: EMPTY
35979: ST_TO_ADDR
// if x - r < 0 then
35980: LD_VAR 0 2
35984: PUSH
35985: LD_VAR 0 4
35989: MINUS
35990: PUSH
35991: LD_INT 0
35993: LESS
35994: IFFALSE 36006
// min_x := 0 else
35996: LD_ADDR_VAR 0 7
36000: PUSH
36001: LD_INT 0
36003: ST_TO_ADDR
36004: GO 36022
// min_x := x - r ;
36006: LD_ADDR_VAR 0 7
36010: PUSH
36011: LD_VAR 0 2
36015: PUSH
36016: LD_VAR 0 4
36020: MINUS
36021: ST_TO_ADDR
// if y - r < 0 then
36022: LD_VAR 0 3
36026: PUSH
36027: LD_VAR 0 4
36031: MINUS
36032: PUSH
36033: LD_INT 0
36035: LESS
36036: IFFALSE 36048
// min_y := 0 else
36038: LD_ADDR_VAR 0 8
36042: PUSH
36043: LD_INT 0
36045: ST_TO_ADDR
36046: GO 36064
// min_y := y - r ;
36048: LD_ADDR_VAR 0 8
36052: PUSH
36053: LD_VAR 0 3
36057: PUSH
36058: LD_VAR 0 4
36062: MINUS
36063: ST_TO_ADDR
// max_x := x + r ;
36064: LD_ADDR_VAR 0 9
36068: PUSH
36069: LD_VAR 0 2
36073: PUSH
36074: LD_VAR 0 4
36078: PLUS
36079: ST_TO_ADDR
// max_y := y + r ;
36080: LD_ADDR_VAR 0 10
36084: PUSH
36085: LD_VAR 0 3
36089: PUSH
36090: LD_VAR 0 4
36094: PLUS
36095: ST_TO_ADDR
// for _x = min_x to max_x do
36096: LD_ADDR_VAR 0 11
36100: PUSH
36101: DOUBLE
36102: LD_VAR 0 7
36106: DEC
36107: ST_TO_ADDR
36108: LD_VAR 0 9
36112: PUSH
36113: FOR_TO
36114: IFFALSE 36231
// for _y = min_y to max_y do
36116: LD_ADDR_VAR 0 12
36120: PUSH
36121: DOUBLE
36122: LD_VAR 0 8
36126: DEC
36127: ST_TO_ADDR
36128: LD_VAR 0 10
36132: PUSH
36133: FOR_TO
36134: IFFALSE 36227
// begin if not ValidHex ( _x , _y ) then
36136: LD_VAR 0 11
36140: PPUSH
36141: LD_VAR 0 12
36145: PPUSH
36146: CALL_OW 488
36150: NOT
36151: IFFALSE 36155
// continue ;
36153: GO 36133
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36155: LD_VAR 0 11
36159: PPUSH
36160: LD_VAR 0 12
36164: PPUSH
36165: CALL_OW 351
36169: PUSH
36170: LD_VAR 0 11
36174: PPUSH
36175: LD_VAR 0 12
36179: PPUSH
36180: CALL_OW 554
36184: AND
36185: IFFALSE 36225
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36187: LD_ADDR_VAR 0 13
36191: PUSH
36192: LD_VAR 0 13
36196: PPUSH
36197: LD_VAR 0 13
36201: PUSH
36202: LD_INT 1
36204: PLUS
36205: PPUSH
36206: LD_VAR 0 11
36210: PUSH
36211: LD_VAR 0 12
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PPUSH
36220: CALL_OW 2
36224: ST_TO_ADDR
// end ;
36225: GO 36133
36227: POP
36228: POP
36229: GO 36113
36231: POP
36232: POP
// if not list then
36233: LD_VAR 0 13
36237: NOT
36238: IFFALSE 36242
// exit ;
36240: GO 36313
// for i in list do
36242: LD_ADDR_VAR 0 6
36246: PUSH
36247: LD_VAR 0 13
36251: PUSH
36252: FOR_IN
36253: IFFALSE 36311
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36255: LD_VAR 0 1
36259: PPUSH
36260: LD_STRING M
36262: PUSH
36263: LD_VAR 0 6
36267: PUSH
36268: LD_INT 1
36270: ARRAY
36271: PUSH
36272: LD_VAR 0 6
36276: PUSH
36277: LD_INT 2
36279: ARRAY
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: PUSH
36302: EMPTY
36303: LIST
36304: PPUSH
36305: CALL_OW 447
36309: GO 36252
36311: POP
36312: POP
// end ;
36313: LD_VAR 0 5
36317: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36318: LD_EXP 99
36322: NOT
36323: IFFALSE 36373
36325: GO 36327
36327: DISABLE
// begin initHack := true ;
36328: LD_ADDR_EXP 99
36332: PUSH
36333: LD_INT 1
36335: ST_TO_ADDR
// hackTanks := [ ] ;
36336: LD_ADDR_EXP 100
36340: PUSH
36341: EMPTY
36342: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36343: LD_ADDR_EXP 101
36347: PUSH
36348: EMPTY
36349: ST_TO_ADDR
// hackLimit := 3 ;
36350: LD_ADDR_EXP 102
36354: PUSH
36355: LD_INT 3
36357: ST_TO_ADDR
// hackDist := 12 ;
36358: LD_ADDR_EXP 103
36362: PUSH
36363: LD_INT 12
36365: ST_TO_ADDR
// hackCounter := [ ] ;
36366: LD_ADDR_EXP 104
36370: PUSH
36371: EMPTY
36372: ST_TO_ADDR
// end ;
36373: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36374: LD_EXP 99
36378: PUSH
36379: LD_INT 34
36381: PUSH
36382: LD_INT 99
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PPUSH
36389: CALL_OW 69
36393: AND
36394: IFFALSE 36647
36396: GO 36398
36398: DISABLE
36399: LD_INT 0
36401: PPUSH
36402: PPUSH
// begin enable ;
36403: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36404: LD_ADDR_VAR 0 1
36408: PUSH
36409: LD_INT 34
36411: PUSH
36412: LD_INT 99
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PPUSH
36419: CALL_OW 69
36423: PUSH
36424: FOR_IN
36425: IFFALSE 36645
// begin if not i in hackTanks then
36427: LD_VAR 0 1
36431: PUSH
36432: LD_EXP 100
36436: IN
36437: NOT
36438: IFFALSE 36521
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36440: LD_ADDR_EXP 100
36444: PUSH
36445: LD_EXP 100
36449: PPUSH
36450: LD_EXP 100
36454: PUSH
36455: LD_INT 1
36457: PLUS
36458: PPUSH
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 1
36468: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36469: LD_ADDR_EXP 101
36473: PUSH
36474: LD_EXP 101
36478: PPUSH
36479: LD_EXP 101
36483: PUSH
36484: LD_INT 1
36486: PLUS
36487: PPUSH
36488: EMPTY
36489: PPUSH
36490: CALL_OW 1
36494: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36495: LD_ADDR_EXP 104
36499: PUSH
36500: LD_EXP 104
36504: PPUSH
36505: LD_EXP 104
36509: PUSH
36510: LD_INT 1
36512: PLUS
36513: PPUSH
36514: EMPTY
36515: PPUSH
36516: CALL_OW 1
36520: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL_OW 302
36530: NOT
36531: IFFALSE 36544
// begin HackUnlinkAll ( i ) ;
36533: LD_VAR 0 1
36537: PPUSH
36538: CALL 36650 0 1
// continue ;
36542: GO 36424
// end ; HackCheckCapturedStatus ( i ) ;
36544: LD_VAR 0 1
36548: PPUSH
36549: CALL 37093 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36553: LD_ADDR_VAR 0 2
36557: PUSH
36558: LD_INT 81
36560: PUSH
36561: LD_VAR 0 1
36565: PPUSH
36566: CALL_OW 255
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 33
36577: PUSH
36578: LD_INT 3
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 91
36587: PUSH
36588: LD_VAR 0 1
36592: PUSH
36593: LD_EXP 103
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 50
36605: PUSH
36606: EMPTY
36607: LIST
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: PPUSH
36615: CALL_OW 69
36619: ST_TO_ADDR
// if not tmp then
36620: LD_VAR 0 2
36624: NOT
36625: IFFALSE 36629
// continue ;
36627: GO 36424
// HackLink ( i , tmp ) ;
36629: LD_VAR 0 1
36633: PPUSH
36634: LD_VAR 0 2
36638: PPUSH
36639: CALL 36786 0 2
// end ;
36643: GO 36424
36645: POP
36646: POP
// end ;
36647: PPOPN 2
36649: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36650: LD_INT 0
36652: PPUSH
36653: PPUSH
36654: PPUSH
// if not hack in hackTanks then
36655: LD_VAR 0 1
36659: PUSH
36660: LD_EXP 100
36664: IN
36665: NOT
36666: IFFALSE 36670
// exit ;
36668: GO 36781
// index := GetElementIndex ( hackTanks , hack ) ;
36670: LD_ADDR_VAR 0 4
36674: PUSH
36675: LD_EXP 100
36679: PPUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: CALL 44398 0 2
36689: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36690: LD_EXP 101
36694: PUSH
36695: LD_VAR 0 4
36699: ARRAY
36700: IFFALSE 36781
// begin for i in hackTanksCaptured [ index ] do
36702: LD_ADDR_VAR 0 3
36706: PUSH
36707: LD_EXP 101
36711: PUSH
36712: LD_VAR 0 4
36716: ARRAY
36717: PUSH
36718: FOR_IN
36719: IFFALSE 36745
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36721: LD_VAR 0 3
36725: PUSH
36726: LD_INT 1
36728: ARRAY
36729: PPUSH
36730: LD_VAR 0 3
36734: PUSH
36735: LD_INT 2
36737: ARRAY
36738: PPUSH
36739: CALL_OW 235
36743: GO 36718
36745: POP
36746: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36747: LD_ADDR_EXP 101
36751: PUSH
36752: LD_EXP 101
36756: PPUSH
36757: LD_VAR 0 4
36761: PPUSH
36762: EMPTY
36763: PPUSH
36764: CALL_OW 1
36768: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36769: LD_VAR 0 1
36773: PPUSH
36774: LD_INT 0
36776: PPUSH
36777: CALL_OW 505
// end ; end ;
36781: LD_VAR 0 2
36785: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36786: LD_INT 0
36788: PPUSH
36789: PPUSH
36790: PPUSH
// if not hack in hackTanks or not vehicles then
36791: LD_VAR 0 1
36795: PUSH
36796: LD_EXP 100
36800: IN
36801: NOT
36802: PUSH
36803: LD_VAR 0 2
36807: NOT
36808: OR
36809: IFFALSE 36813
// exit ;
36811: GO 37088
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36813: LD_ADDR_VAR 0 2
36817: PUSH
36818: LD_VAR 0 1
36822: PPUSH
36823: LD_VAR 0 2
36827: PPUSH
36828: LD_INT 1
36830: PPUSH
36831: LD_INT 1
36833: PPUSH
36834: CALL 45048 0 4
36838: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36839: LD_ADDR_VAR 0 5
36843: PUSH
36844: LD_EXP 100
36848: PPUSH
36849: LD_VAR 0 1
36853: PPUSH
36854: CALL 44398 0 2
36858: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36859: LD_EXP 101
36863: PUSH
36864: LD_VAR 0 5
36868: ARRAY
36869: PUSH
36870: LD_EXP 102
36874: LESS
36875: IFFALSE 37064
// begin for i := 1 to vehicles do
36877: LD_ADDR_VAR 0 4
36881: PUSH
36882: DOUBLE
36883: LD_INT 1
36885: DEC
36886: ST_TO_ADDR
36887: LD_VAR 0 2
36891: PUSH
36892: FOR_TO
36893: IFFALSE 37062
// begin if hackTanksCaptured [ index ] = hackLimit then
36895: LD_EXP 101
36899: PUSH
36900: LD_VAR 0 5
36904: ARRAY
36905: PUSH
36906: LD_EXP 102
36910: EQUAL
36911: IFFALSE 36915
// break ;
36913: GO 37062
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36915: LD_ADDR_EXP 104
36919: PUSH
36920: LD_EXP 104
36924: PPUSH
36925: LD_VAR 0 5
36929: PPUSH
36930: LD_EXP 104
36934: PUSH
36935: LD_VAR 0 5
36939: ARRAY
36940: PUSH
36941: LD_INT 1
36943: PLUS
36944: PPUSH
36945: CALL_OW 1
36949: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36950: LD_ADDR_EXP 101
36954: PUSH
36955: LD_EXP 101
36959: PPUSH
36960: LD_VAR 0 5
36964: PUSH
36965: LD_EXP 101
36969: PUSH
36970: LD_VAR 0 5
36974: ARRAY
36975: PUSH
36976: LD_INT 1
36978: PLUS
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PPUSH
36984: LD_VAR 0 2
36988: PUSH
36989: LD_VAR 0 4
36993: ARRAY
36994: PUSH
36995: LD_VAR 0 2
36999: PUSH
37000: LD_VAR 0 4
37004: ARRAY
37005: PPUSH
37006: CALL_OW 255
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PPUSH
37015: CALL 44613 0 3
37019: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37020: LD_VAR 0 2
37024: PUSH
37025: LD_VAR 0 4
37029: ARRAY
37030: PPUSH
37031: LD_VAR 0 1
37035: PPUSH
37036: CALL_OW 255
37040: PPUSH
37041: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37045: LD_VAR 0 2
37049: PUSH
37050: LD_VAR 0 4
37054: ARRAY
37055: PPUSH
37056: CALL_OW 141
// end ;
37060: GO 36892
37062: POP
37063: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37064: LD_VAR 0 1
37068: PPUSH
37069: LD_EXP 101
37073: PUSH
37074: LD_VAR 0 5
37078: ARRAY
37079: PUSH
37080: LD_INT 0
37082: PLUS
37083: PPUSH
37084: CALL_OW 505
// end ;
37088: LD_VAR 0 3
37092: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37093: LD_INT 0
37095: PPUSH
37096: PPUSH
37097: PPUSH
37098: PPUSH
// if not hack in hackTanks then
37099: LD_VAR 0 1
37103: PUSH
37104: LD_EXP 100
37108: IN
37109: NOT
37110: IFFALSE 37114
// exit ;
37112: GO 37354
// index := GetElementIndex ( hackTanks , hack ) ;
37114: LD_ADDR_VAR 0 4
37118: PUSH
37119: LD_EXP 100
37123: PPUSH
37124: LD_VAR 0 1
37128: PPUSH
37129: CALL 44398 0 2
37133: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37134: LD_ADDR_VAR 0 3
37138: PUSH
37139: DOUBLE
37140: LD_EXP 101
37144: PUSH
37145: LD_VAR 0 4
37149: ARRAY
37150: INC
37151: ST_TO_ADDR
37152: LD_INT 1
37154: PUSH
37155: FOR_DOWNTO
37156: IFFALSE 37328
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37158: LD_ADDR_VAR 0 5
37162: PUSH
37163: LD_EXP 101
37167: PUSH
37168: LD_VAR 0 4
37172: ARRAY
37173: PUSH
37174: LD_VAR 0 3
37178: ARRAY
37179: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37180: LD_VAR 0 5
37184: PUSH
37185: LD_INT 1
37187: ARRAY
37188: PPUSH
37189: CALL_OW 302
37193: NOT
37194: PUSH
37195: LD_VAR 0 5
37199: PUSH
37200: LD_INT 1
37202: ARRAY
37203: PPUSH
37204: CALL_OW 255
37208: PUSH
37209: LD_VAR 0 1
37213: PPUSH
37214: CALL_OW 255
37218: NONEQUAL
37219: OR
37220: IFFALSE 37326
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37222: LD_VAR 0 5
37226: PUSH
37227: LD_INT 1
37229: ARRAY
37230: PPUSH
37231: CALL_OW 305
37235: PUSH
37236: LD_VAR 0 5
37240: PUSH
37241: LD_INT 1
37243: ARRAY
37244: PPUSH
37245: CALL_OW 255
37249: PUSH
37250: LD_VAR 0 1
37254: PPUSH
37255: CALL_OW 255
37259: EQUAL
37260: AND
37261: IFFALSE 37285
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37263: LD_VAR 0 5
37267: PUSH
37268: LD_INT 1
37270: ARRAY
37271: PPUSH
37272: LD_VAR 0 5
37276: PUSH
37277: LD_INT 2
37279: ARRAY
37280: PPUSH
37281: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37285: LD_ADDR_EXP 101
37289: PUSH
37290: LD_EXP 101
37294: PPUSH
37295: LD_VAR 0 4
37299: PPUSH
37300: LD_EXP 101
37304: PUSH
37305: LD_VAR 0 4
37309: ARRAY
37310: PPUSH
37311: LD_VAR 0 3
37315: PPUSH
37316: CALL_OW 3
37320: PPUSH
37321: CALL_OW 1
37325: ST_TO_ADDR
// end ; end ;
37326: GO 37155
37328: POP
37329: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37330: LD_VAR 0 1
37334: PPUSH
37335: LD_EXP 101
37339: PUSH
37340: LD_VAR 0 4
37344: ARRAY
37345: PUSH
37346: LD_INT 0
37348: PLUS
37349: PPUSH
37350: CALL_OW 505
// end ;
37354: LD_VAR 0 2
37358: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37359: LD_INT 0
37361: PPUSH
37362: PPUSH
37363: PPUSH
37364: PPUSH
// if not hack in hackTanks then
37365: LD_VAR 0 1
37369: PUSH
37370: LD_EXP 100
37374: IN
37375: NOT
37376: IFFALSE 37380
// exit ;
37378: GO 37465
// index := GetElementIndex ( hackTanks , hack ) ;
37380: LD_ADDR_VAR 0 5
37384: PUSH
37385: LD_EXP 100
37389: PPUSH
37390: LD_VAR 0 1
37394: PPUSH
37395: CALL 44398 0 2
37399: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37400: LD_ADDR_VAR 0 4
37404: PUSH
37405: DOUBLE
37406: LD_INT 1
37408: DEC
37409: ST_TO_ADDR
37410: LD_EXP 101
37414: PUSH
37415: LD_VAR 0 5
37419: ARRAY
37420: PUSH
37421: FOR_TO
37422: IFFALSE 37463
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37424: LD_EXP 101
37428: PUSH
37429: LD_VAR 0 5
37433: ARRAY
37434: PUSH
37435: LD_VAR 0 4
37439: ARRAY
37440: PUSH
37441: LD_INT 1
37443: ARRAY
37444: PUSH
37445: LD_VAR 0 2
37449: EQUAL
37450: IFFALSE 37461
// KillUnit ( vehicle ) ;
37452: LD_VAR 0 2
37456: PPUSH
37457: CALL_OW 66
37461: GO 37421
37463: POP
37464: POP
// end ;
37465: LD_VAR 0 3
37469: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37470: LD_EXP 105
37474: NOT
37475: IFFALSE 37510
37477: GO 37479
37479: DISABLE
// begin initMiner := true ;
37480: LD_ADDR_EXP 105
37484: PUSH
37485: LD_INT 1
37487: ST_TO_ADDR
// minersList := [ ] ;
37488: LD_ADDR_EXP 106
37492: PUSH
37493: EMPTY
37494: ST_TO_ADDR
// minerMinesList := [ ] ;
37495: LD_ADDR_EXP 107
37499: PUSH
37500: EMPTY
37501: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37502: LD_ADDR_EXP 108
37506: PUSH
37507: LD_INT 5
37509: ST_TO_ADDR
// end ;
37510: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37511: LD_EXP 105
37515: PUSH
37516: LD_INT 34
37518: PUSH
37519: LD_INT 81
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PPUSH
37526: CALL_OW 69
37530: AND
37531: IFFALSE 37992
37533: GO 37535
37535: DISABLE
37536: LD_INT 0
37538: PPUSH
37539: PPUSH
37540: PPUSH
37541: PPUSH
// begin enable ;
37542: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37543: LD_ADDR_VAR 0 1
37547: PUSH
37548: LD_INT 34
37550: PUSH
37551: LD_INT 81
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PPUSH
37558: CALL_OW 69
37562: PUSH
37563: FOR_IN
37564: IFFALSE 37636
// begin if not i in minersList then
37566: LD_VAR 0 1
37570: PUSH
37571: LD_EXP 106
37575: IN
37576: NOT
37577: IFFALSE 37634
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37579: LD_ADDR_EXP 106
37583: PUSH
37584: LD_EXP 106
37588: PPUSH
37589: LD_EXP 106
37593: PUSH
37594: LD_INT 1
37596: PLUS
37597: PPUSH
37598: LD_VAR 0 1
37602: PPUSH
37603: CALL_OW 1
37607: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37608: LD_ADDR_EXP 107
37612: PUSH
37613: LD_EXP 107
37617: PPUSH
37618: LD_EXP 107
37622: PUSH
37623: LD_INT 1
37625: PLUS
37626: PPUSH
37627: EMPTY
37628: PPUSH
37629: CALL_OW 1
37633: ST_TO_ADDR
// end end ;
37634: GO 37563
37636: POP
37637: POP
// for i := minerMinesList downto 1 do
37638: LD_ADDR_VAR 0 1
37642: PUSH
37643: DOUBLE
37644: LD_EXP 107
37648: INC
37649: ST_TO_ADDR
37650: LD_INT 1
37652: PUSH
37653: FOR_DOWNTO
37654: IFFALSE 37990
// begin if IsLive ( minersList [ i ] ) then
37656: LD_EXP 106
37660: PUSH
37661: LD_VAR 0 1
37665: ARRAY
37666: PPUSH
37667: CALL_OW 300
37671: IFFALSE 37699
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37673: LD_EXP 106
37677: PUSH
37678: LD_VAR 0 1
37682: ARRAY
37683: PPUSH
37684: LD_EXP 107
37688: PUSH
37689: LD_VAR 0 1
37693: ARRAY
37694: PPUSH
37695: CALL_OW 505
// if not minerMinesList [ i ] then
37699: LD_EXP 107
37703: PUSH
37704: LD_VAR 0 1
37708: ARRAY
37709: NOT
37710: IFFALSE 37714
// continue ;
37712: GO 37653
// for j := minerMinesList [ i ] downto 1 do
37714: LD_ADDR_VAR 0 2
37718: PUSH
37719: DOUBLE
37720: LD_EXP 107
37724: PUSH
37725: LD_VAR 0 1
37729: ARRAY
37730: INC
37731: ST_TO_ADDR
37732: LD_INT 1
37734: PUSH
37735: FOR_DOWNTO
37736: IFFALSE 37986
// begin side := GetSide ( minersList [ i ] ) ;
37738: LD_ADDR_VAR 0 3
37742: PUSH
37743: LD_EXP 106
37747: PUSH
37748: LD_VAR 0 1
37752: ARRAY
37753: PPUSH
37754: CALL_OW 255
37758: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37759: LD_ADDR_VAR 0 4
37763: PUSH
37764: LD_EXP 107
37768: PUSH
37769: LD_VAR 0 1
37773: ARRAY
37774: PUSH
37775: LD_VAR 0 2
37779: ARRAY
37780: PUSH
37781: LD_INT 1
37783: ARRAY
37784: PPUSH
37785: LD_EXP 107
37789: PUSH
37790: LD_VAR 0 1
37794: ARRAY
37795: PUSH
37796: LD_VAR 0 2
37800: ARRAY
37801: PUSH
37802: LD_INT 2
37804: ARRAY
37805: PPUSH
37806: CALL_OW 428
37810: ST_TO_ADDR
// if not tmp then
37811: LD_VAR 0 4
37815: NOT
37816: IFFALSE 37820
// continue ;
37818: GO 37735
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37820: LD_VAR 0 4
37824: PUSH
37825: LD_INT 81
37827: PUSH
37828: LD_VAR 0 3
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PPUSH
37837: CALL_OW 69
37841: IN
37842: PUSH
37843: LD_EXP 107
37847: PUSH
37848: LD_VAR 0 1
37852: ARRAY
37853: PUSH
37854: LD_VAR 0 2
37858: ARRAY
37859: PUSH
37860: LD_INT 1
37862: ARRAY
37863: PPUSH
37864: LD_EXP 107
37868: PUSH
37869: LD_VAR 0 1
37873: ARRAY
37874: PUSH
37875: LD_VAR 0 2
37879: ARRAY
37880: PUSH
37881: LD_INT 2
37883: ARRAY
37884: PPUSH
37885: CALL_OW 458
37889: AND
37890: IFFALSE 37984
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37892: LD_EXP 107
37896: PUSH
37897: LD_VAR 0 1
37901: ARRAY
37902: PUSH
37903: LD_VAR 0 2
37907: ARRAY
37908: PUSH
37909: LD_INT 1
37911: ARRAY
37912: PPUSH
37913: LD_EXP 107
37917: PUSH
37918: LD_VAR 0 1
37922: ARRAY
37923: PUSH
37924: LD_VAR 0 2
37928: ARRAY
37929: PUSH
37930: LD_INT 2
37932: ARRAY
37933: PPUSH
37934: LD_VAR 0 3
37938: PPUSH
37939: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37943: LD_ADDR_EXP 107
37947: PUSH
37948: LD_EXP 107
37952: PPUSH
37953: LD_VAR 0 1
37957: PPUSH
37958: LD_EXP 107
37962: PUSH
37963: LD_VAR 0 1
37967: ARRAY
37968: PPUSH
37969: LD_VAR 0 2
37973: PPUSH
37974: CALL_OW 3
37978: PPUSH
37979: CALL_OW 1
37983: ST_TO_ADDR
// end ; end ;
37984: GO 37735
37986: POP
37987: POP
// end ;
37988: GO 37653
37990: POP
37991: POP
// end ;
37992: PPOPN 4
37994: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37995: LD_INT 0
37997: PPUSH
37998: PPUSH
// result := false ;
37999: LD_ADDR_VAR 0 4
38003: PUSH
38004: LD_INT 0
38006: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 264
38016: PUSH
38017: LD_INT 81
38019: EQUAL
38020: NOT
38021: IFFALSE 38025
// exit ;
38023: GO 38265
// index := GetElementIndex ( minersList , unit ) ;
38025: LD_ADDR_VAR 0 5
38029: PUSH
38030: LD_EXP 106
38034: PPUSH
38035: LD_VAR 0 1
38039: PPUSH
38040: CALL 44398 0 2
38044: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38045: LD_EXP 107
38049: PUSH
38050: LD_VAR 0 5
38054: ARRAY
38055: PUSH
38056: LD_EXP 108
38060: GREATEREQUAL
38061: IFFALSE 38065
// exit ;
38063: GO 38265
// ComMoveXY ( unit , x , y ) ;
38065: LD_VAR 0 1
38069: PPUSH
38070: LD_VAR 0 2
38074: PPUSH
38075: LD_VAR 0 3
38079: PPUSH
38080: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38084: LD_INT 35
38086: PPUSH
38087: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38091: LD_VAR 0 1
38095: PPUSH
38096: LD_VAR 0 2
38100: PPUSH
38101: LD_VAR 0 3
38105: PPUSH
38106: CALL 75753 0 3
38110: NOT
38111: PUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL_OW 314
38121: AND
38122: IFFALSE 38126
// exit ;
38124: GO 38265
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38126: LD_VAR 0 2
38130: PPUSH
38131: LD_VAR 0 3
38135: PPUSH
38136: CALL_OW 428
38140: PUSH
38141: LD_VAR 0 1
38145: EQUAL
38146: PUSH
38147: LD_VAR 0 1
38151: PPUSH
38152: CALL_OW 314
38156: NOT
38157: AND
38158: IFFALSE 38084
// PlaySoundXY ( x , y , PlantMine ) ;
38160: LD_VAR 0 2
38164: PPUSH
38165: LD_VAR 0 3
38169: PPUSH
38170: LD_STRING PlantMine
38172: PPUSH
38173: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38177: LD_VAR 0 2
38181: PPUSH
38182: LD_VAR 0 3
38186: PPUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 255
38196: PPUSH
38197: LD_INT 0
38199: PPUSH
38200: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38204: LD_ADDR_EXP 107
38208: PUSH
38209: LD_EXP 107
38213: PPUSH
38214: LD_VAR 0 5
38218: PUSH
38219: LD_EXP 107
38223: PUSH
38224: LD_VAR 0 5
38228: ARRAY
38229: PUSH
38230: LD_INT 1
38232: PLUS
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PPUSH
38238: LD_VAR 0 2
38242: PUSH
38243: LD_VAR 0 3
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PPUSH
38252: CALL 44613 0 3
38256: ST_TO_ADDR
// result := true ;
38257: LD_ADDR_VAR 0 4
38261: PUSH
38262: LD_INT 1
38264: ST_TO_ADDR
// end ;
38265: LD_VAR 0 4
38269: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38270: LD_INT 0
38272: PPUSH
38273: PPUSH
38274: PPUSH
// if not unit in minersList then
38275: LD_VAR 0 1
38279: PUSH
38280: LD_EXP 106
38284: IN
38285: NOT
38286: IFFALSE 38290
// exit ;
38288: GO 38682
// index := GetElementIndex ( minersList , unit ) ;
38290: LD_ADDR_VAR 0 6
38294: PUSH
38295: LD_EXP 106
38299: PPUSH
38300: LD_VAR 0 1
38304: PPUSH
38305: CALL 44398 0 2
38309: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38310: LD_ADDR_VAR 0 5
38314: PUSH
38315: DOUBLE
38316: LD_EXP 107
38320: PUSH
38321: LD_VAR 0 6
38325: ARRAY
38326: INC
38327: ST_TO_ADDR
38328: LD_INT 1
38330: PUSH
38331: FOR_DOWNTO
38332: IFFALSE 38493
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38334: LD_EXP 107
38338: PUSH
38339: LD_VAR 0 6
38343: ARRAY
38344: PUSH
38345: LD_VAR 0 5
38349: ARRAY
38350: PUSH
38351: LD_INT 1
38353: ARRAY
38354: PUSH
38355: LD_VAR 0 2
38359: EQUAL
38360: PUSH
38361: LD_EXP 107
38365: PUSH
38366: LD_VAR 0 6
38370: ARRAY
38371: PUSH
38372: LD_VAR 0 5
38376: ARRAY
38377: PUSH
38378: LD_INT 2
38380: ARRAY
38381: PUSH
38382: LD_VAR 0 3
38386: EQUAL
38387: AND
38388: IFFALSE 38491
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38390: LD_EXP 107
38394: PUSH
38395: LD_VAR 0 6
38399: ARRAY
38400: PUSH
38401: LD_VAR 0 5
38405: ARRAY
38406: PUSH
38407: LD_INT 1
38409: ARRAY
38410: PPUSH
38411: LD_EXP 107
38415: PUSH
38416: LD_VAR 0 6
38420: ARRAY
38421: PUSH
38422: LD_VAR 0 5
38426: ARRAY
38427: PUSH
38428: LD_INT 2
38430: ARRAY
38431: PPUSH
38432: LD_VAR 0 1
38436: PPUSH
38437: CALL_OW 255
38441: PPUSH
38442: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38446: LD_ADDR_EXP 107
38450: PUSH
38451: LD_EXP 107
38455: PPUSH
38456: LD_VAR 0 6
38460: PPUSH
38461: LD_EXP 107
38465: PUSH
38466: LD_VAR 0 6
38470: ARRAY
38471: PPUSH
38472: LD_VAR 0 5
38476: PPUSH
38477: CALL_OW 3
38481: PPUSH
38482: CALL_OW 1
38486: ST_TO_ADDR
// exit ;
38487: POP
38488: POP
38489: GO 38682
// end ; end ;
38491: GO 38331
38493: POP
38494: POP
// for i := minerMinesList [ index ] downto 1 do
38495: LD_ADDR_VAR 0 5
38499: PUSH
38500: DOUBLE
38501: LD_EXP 107
38505: PUSH
38506: LD_VAR 0 6
38510: ARRAY
38511: INC
38512: ST_TO_ADDR
38513: LD_INT 1
38515: PUSH
38516: FOR_DOWNTO
38517: IFFALSE 38680
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38519: LD_EXP 107
38523: PUSH
38524: LD_VAR 0 6
38528: ARRAY
38529: PUSH
38530: LD_VAR 0 5
38534: ARRAY
38535: PUSH
38536: LD_INT 1
38538: ARRAY
38539: PPUSH
38540: LD_EXP 107
38544: PUSH
38545: LD_VAR 0 6
38549: ARRAY
38550: PUSH
38551: LD_VAR 0 5
38555: ARRAY
38556: PUSH
38557: LD_INT 2
38559: ARRAY
38560: PPUSH
38561: LD_VAR 0 2
38565: PPUSH
38566: LD_VAR 0 3
38570: PPUSH
38571: CALL_OW 298
38575: PUSH
38576: LD_INT 6
38578: LESS
38579: IFFALSE 38678
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38581: LD_EXP 107
38585: PUSH
38586: LD_VAR 0 6
38590: ARRAY
38591: PUSH
38592: LD_VAR 0 5
38596: ARRAY
38597: PUSH
38598: LD_INT 1
38600: ARRAY
38601: PPUSH
38602: LD_EXP 107
38606: PUSH
38607: LD_VAR 0 6
38611: ARRAY
38612: PUSH
38613: LD_VAR 0 5
38617: ARRAY
38618: PUSH
38619: LD_INT 2
38621: ARRAY
38622: PPUSH
38623: LD_VAR 0 1
38627: PPUSH
38628: CALL_OW 255
38632: PPUSH
38633: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38637: LD_ADDR_EXP 107
38641: PUSH
38642: LD_EXP 107
38646: PPUSH
38647: LD_VAR 0 6
38651: PPUSH
38652: LD_EXP 107
38656: PUSH
38657: LD_VAR 0 6
38661: ARRAY
38662: PPUSH
38663: LD_VAR 0 5
38667: PPUSH
38668: CALL_OW 3
38672: PPUSH
38673: CALL_OW 1
38677: ST_TO_ADDR
// end ; end ;
38678: GO 38516
38680: POP
38681: POP
// end ;
38682: LD_VAR 0 4
38686: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38687: LD_INT 0
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
38697: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38698: LD_VAR 0 1
38702: PPUSH
38703: CALL_OW 264
38707: PUSH
38708: LD_INT 81
38710: EQUAL
38711: NOT
38712: PUSH
38713: LD_VAR 0 1
38717: PUSH
38718: LD_EXP 106
38722: IN
38723: NOT
38724: OR
38725: IFFALSE 38729
// exit ;
38727: GO 39051
// index := GetElementIndex ( minersList , unit ) ;
38729: LD_ADDR_VAR 0 6
38733: PUSH
38734: LD_EXP 106
38738: PPUSH
38739: LD_VAR 0 1
38743: PPUSH
38744: CALL 44398 0 2
38748: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38749: LD_ADDR_VAR 0 8
38753: PUSH
38754: LD_EXP 108
38758: PUSH
38759: LD_EXP 107
38763: PUSH
38764: LD_VAR 0 6
38768: ARRAY
38769: MINUS
38770: ST_TO_ADDR
// if not minesFreeAmount then
38771: LD_VAR 0 8
38775: NOT
38776: IFFALSE 38780
// exit ;
38778: GO 39051
// tmp := [ ] ;
38780: LD_ADDR_VAR 0 7
38784: PUSH
38785: EMPTY
38786: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38787: LD_ADDR_VAR 0 5
38791: PUSH
38792: DOUBLE
38793: LD_INT 1
38795: DEC
38796: ST_TO_ADDR
38797: LD_VAR 0 8
38801: PUSH
38802: FOR_TO
38803: IFFALSE 38998
// begin _d := rand ( 0 , 5 ) ;
38805: LD_ADDR_VAR 0 11
38809: PUSH
38810: LD_INT 0
38812: PPUSH
38813: LD_INT 5
38815: PPUSH
38816: CALL_OW 12
38820: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38821: LD_ADDR_VAR 0 12
38825: PUSH
38826: LD_INT 2
38828: PPUSH
38829: LD_INT 6
38831: PPUSH
38832: CALL_OW 12
38836: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38837: LD_ADDR_VAR 0 9
38841: PUSH
38842: LD_VAR 0 2
38846: PPUSH
38847: LD_VAR 0 11
38851: PPUSH
38852: LD_VAR 0 12
38856: PPUSH
38857: CALL_OW 272
38861: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38862: LD_ADDR_VAR 0 10
38866: PUSH
38867: LD_VAR 0 3
38871: PPUSH
38872: LD_VAR 0 11
38876: PPUSH
38877: LD_VAR 0 12
38881: PPUSH
38882: CALL_OW 273
38886: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38887: LD_VAR 0 9
38891: PPUSH
38892: LD_VAR 0 10
38896: PPUSH
38897: CALL_OW 488
38901: PUSH
38902: LD_VAR 0 9
38906: PUSH
38907: LD_VAR 0 10
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_VAR 0 7
38920: IN
38921: NOT
38922: AND
38923: PUSH
38924: LD_VAR 0 9
38928: PPUSH
38929: LD_VAR 0 10
38933: PPUSH
38934: CALL_OW 458
38938: NOT
38939: AND
38940: IFFALSE 38982
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38942: LD_ADDR_VAR 0 7
38946: PUSH
38947: LD_VAR 0 7
38951: PPUSH
38952: LD_VAR 0 7
38956: PUSH
38957: LD_INT 1
38959: PLUS
38960: PPUSH
38961: LD_VAR 0 9
38965: PUSH
38966: LD_VAR 0 10
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PPUSH
38975: CALL_OW 1
38979: ST_TO_ADDR
38980: GO 38996
// i := i - 1 ;
38982: LD_ADDR_VAR 0 5
38986: PUSH
38987: LD_VAR 0 5
38991: PUSH
38992: LD_INT 1
38994: MINUS
38995: ST_TO_ADDR
// end ;
38996: GO 38802
38998: POP
38999: POP
// for i in tmp do
39000: LD_ADDR_VAR 0 5
39004: PUSH
39005: LD_VAR 0 7
39009: PUSH
39010: FOR_IN
39011: IFFALSE 39049
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39013: LD_VAR 0 1
39017: PPUSH
39018: LD_VAR 0 5
39022: PUSH
39023: LD_INT 1
39025: ARRAY
39026: PPUSH
39027: LD_VAR 0 5
39031: PUSH
39032: LD_INT 2
39034: ARRAY
39035: PPUSH
39036: CALL 37995 0 3
39040: NOT
39041: IFFALSE 39047
// exit ;
39043: POP
39044: POP
39045: GO 39051
39047: GO 39010
39049: POP
39050: POP
// end ;
39051: LD_VAR 0 4
39055: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39056: LD_INT 0
39058: PPUSH
39059: PPUSH
39060: PPUSH
39061: PPUSH
39062: PPUSH
39063: PPUSH
39064: PPUSH
// if not GetClass ( unit ) = class_sniper then
39065: LD_VAR 0 1
39069: PPUSH
39070: CALL_OW 257
39074: PUSH
39075: LD_INT 5
39077: EQUAL
39078: NOT
39079: IFFALSE 39083
// exit ;
39081: GO 39471
// dist := 8 ;
39083: LD_ADDR_VAR 0 5
39087: PUSH
39088: LD_INT 8
39090: ST_TO_ADDR
// viewRange := 12 ;
39091: LD_ADDR_VAR 0 7
39095: PUSH
39096: LD_INT 12
39098: ST_TO_ADDR
// side := GetSide ( unit ) ;
39099: LD_ADDR_VAR 0 6
39103: PUSH
39104: LD_VAR 0 1
39108: PPUSH
39109: CALL_OW 255
39113: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39114: LD_INT 61
39116: PPUSH
39117: LD_VAR 0 6
39121: PPUSH
39122: CALL_OW 321
39126: PUSH
39127: LD_INT 2
39129: EQUAL
39130: IFFALSE 39140
// viewRange := 16 ;
39132: LD_ADDR_VAR 0 7
39136: PUSH
39137: LD_INT 16
39139: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39140: LD_VAR 0 1
39144: PPUSH
39145: LD_VAR 0 2
39149: PPUSH
39150: LD_VAR 0 3
39154: PPUSH
39155: CALL_OW 297
39159: PUSH
39160: LD_VAR 0 5
39164: GREATER
39165: IFFALSE 39244
// begin ComMoveXY ( unit , x , y ) ;
39167: LD_VAR 0 1
39171: PPUSH
39172: LD_VAR 0 2
39176: PPUSH
39177: LD_VAR 0 3
39181: PPUSH
39182: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39186: LD_INT 35
39188: PPUSH
39189: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39193: LD_VAR 0 1
39197: PPUSH
39198: LD_VAR 0 2
39202: PPUSH
39203: LD_VAR 0 3
39207: PPUSH
39208: CALL 75753 0 3
39212: NOT
39213: IFFALSE 39217
// exit ;
39215: GO 39471
// until GetDistUnitXY ( unit , x , y ) < dist ;
39217: LD_VAR 0 1
39221: PPUSH
39222: LD_VAR 0 2
39226: PPUSH
39227: LD_VAR 0 3
39231: PPUSH
39232: CALL_OW 297
39236: PUSH
39237: LD_VAR 0 5
39241: LESS
39242: IFFALSE 39186
// end ; ComTurnXY ( unit , x , y ) ;
39244: LD_VAR 0 1
39248: PPUSH
39249: LD_VAR 0 2
39253: PPUSH
39254: LD_VAR 0 3
39258: PPUSH
39259: CALL_OW 118
// wait ( 5 ) ;
39263: LD_INT 5
39265: PPUSH
39266: CALL_OW 67
// _d := GetDir ( unit ) ;
39270: LD_ADDR_VAR 0 10
39274: PUSH
39275: LD_VAR 0 1
39279: PPUSH
39280: CALL_OW 254
39284: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39285: LD_ADDR_VAR 0 8
39289: PUSH
39290: LD_VAR 0 1
39294: PPUSH
39295: CALL_OW 250
39299: PPUSH
39300: LD_VAR 0 10
39304: PPUSH
39305: LD_VAR 0 5
39309: PPUSH
39310: CALL_OW 272
39314: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39315: LD_ADDR_VAR 0 9
39319: PUSH
39320: LD_VAR 0 1
39324: PPUSH
39325: CALL_OW 251
39329: PPUSH
39330: LD_VAR 0 10
39334: PPUSH
39335: LD_VAR 0 5
39339: PPUSH
39340: CALL_OW 273
39344: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39345: LD_VAR 0 8
39349: PPUSH
39350: LD_VAR 0 9
39354: PPUSH
39355: CALL_OW 488
39359: NOT
39360: IFFALSE 39364
// exit ;
39362: GO 39471
// ComAnimCustom ( unit , 1 ) ;
39364: LD_VAR 0 1
39368: PPUSH
39369: LD_INT 1
39371: PPUSH
39372: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39376: LD_VAR 0 8
39380: PPUSH
39381: LD_VAR 0 9
39385: PPUSH
39386: LD_VAR 0 6
39390: PPUSH
39391: LD_VAR 0 7
39395: PPUSH
39396: CALL_OW 330
// repeat wait ( 1 ) ;
39400: LD_INT 1
39402: PPUSH
39403: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39407: LD_VAR 0 1
39411: PPUSH
39412: CALL_OW 316
39416: PUSH
39417: LD_VAR 0 1
39421: PPUSH
39422: CALL_OW 314
39426: OR
39427: PUSH
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL_OW 302
39437: NOT
39438: OR
39439: PUSH
39440: LD_VAR 0 1
39444: PPUSH
39445: CALL_OW 301
39449: OR
39450: IFFALSE 39400
// RemoveSeeing ( _x , _y , side ) ;
39452: LD_VAR 0 8
39456: PPUSH
39457: LD_VAR 0 9
39461: PPUSH
39462: LD_VAR 0 6
39466: PPUSH
39467: CALL_OW 331
// end ; end_of_file
39471: LD_VAR 0 4
39475: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39476: LD_INT 0
39478: PPUSH
39479: PPUSH
// if exist_mode then
39480: LD_VAR 0 2
39484: IFFALSE 39509
// unit := CreateCharacter ( prefix & ident ) else
39486: LD_ADDR_VAR 0 5
39490: PUSH
39491: LD_VAR 0 3
39495: PUSH
39496: LD_VAR 0 1
39500: STR
39501: PPUSH
39502: CALL_OW 34
39506: ST_TO_ADDR
39507: GO 39524
// unit := NewCharacter ( ident ) ;
39509: LD_ADDR_VAR 0 5
39513: PUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: CALL_OW 25
39523: ST_TO_ADDR
// result := unit ;
39524: LD_ADDR_VAR 0 4
39528: PUSH
39529: LD_VAR 0 5
39533: ST_TO_ADDR
// end ;
39534: LD_VAR 0 4
39538: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39539: LD_INT 0
39541: PPUSH
39542: PPUSH
// if not side or not nation then
39543: LD_VAR 0 1
39547: NOT
39548: PUSH
39549: LD_VAR 0 2
39553: NOT
39554: OR
39555: IFFALSE 39559
// exit ;
39557: GO 40327
// case nation of nation_american :
39559: LD_VAR 0 2
39563: PUSH
39564: LD_INT 1
39566: DOUBLE
39567: EQUAL
39568: IFTRUE 39572
39570: GO 39786
39572: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39573: LD_ADDR_VAR 0 4
39577: PUSH
39578: LD_INT 35
39580: PUSH
39581: LD_INT 45
39583: PUSH
39584: LD_INT 46
39586: PUSH
39587: LD_INT 47
39589: PUSH
39590: LD_INT 82
39592: PUSH
39593: LD_INT 83
39595: PUSH
39596: LD_INT 84
39598: PUSH
39599: LD_INT 85
39601: PUSH
39602: LD_INT 86
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: LD_INT 6
39613: PUSH
39614: LD_INT 15
39616: PUSH
39617: LD_INT 16
39619: PUSH
39620: LD_INT 7
39622: PUSH
39623: LD_INT 12
39625: PUSH
39626: LD_INT 13
39628: PUSH
39629: LD_INT 10
39631: PUSH
39632: LD_INT 14
39634: PUSH
39635: LD_INT 20
39637: PUSH
39638: LD_INT 21
39640: PUSH
39641: LD_INT 22
39643: PUSH
39644: LD_INT 25
39646: PUSH
39647: LD_INT 32
39649: PUSH
39650: LD_INT 27
39652: PUSH
39653: LD_INT 36
39655: PUSH
39656: LD_INT 69
39658: PUSH
39659: LD_INT 39
39661: PUSH
39662: LD_INT 34
39664: PUSH
39665: LD_INT 40
39667: PUSH
39668: LD_INT 48
39670: PUSH
39671: LD_INT 49
39673: PUSH
39674: LD_INT 50
39676: PUSH
39677: LD_INT 51
39679: PUSH
39680: LD_INT 52
39682: PUSH
39683: LD_INT 53
39685: PUSH
39686: LD_INT 54
39688: PUSH
39689: LD_INT 55
39691: PUSH
39692: LD_INT 56
39694: PUSH
39695: LD_INT 57
39697: PUSH
39698: LD_INT 58
39700: PUSH
39701: LD_INT 59
39703: PUSH
39704: LD_INT 60
39706: PUSH
39707: LD_INT 61
39709: PUSH
39710: LD_INT 62
39712: PUSH
39713: LD_INT 80
39715: PUSH
39716: LD_INT 82
39718: PUSH
39719: LD_INT 83
39721: PUSH
39722: LD_INT 84
39724: PUSH
39725: LD_INT 85
39727: PUSH
39728: LD_INT 86
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: ST_TO_ADDR
39784: GO 40251
39786: LD_INT 2
39788: DOUBLE
39789: EQUAL
39790: IFTRUE 39794
39792: GO 40020
39794: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39795: LD_ADDR_VAR 0 4
39799: PUSH
39800: LD_INT 35
39802: PUSH
39803: LD_INT 45
39805: PUSH
39806: LD_INT 46
39808: PUSH
39809: LD_INT 47
39811: PUSH
39812: LD_INT 82
39814: PUSH
39815: LD_INT 83
39817: PUSH
39818: LD_INT 84
39820: PUSH
39821: LD_INT 85
39823: PUSH
39824: LD_INT 87
39826: PUSH
39827: LD_INT 70
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: LD_INT 11
39835: PUSH
39836: LD_INT 3
39838: PUSH
39839: LD_INT 4
39841: PUSH
39842: LD_INT 5
39844: PUSH
39845: LD_INT 6
39847: PUSH
39848: LD_INT 15
39850: PUSH
39851: LD_INT 18
39853: PUSH
39854: LD_INT 7
39856: PUSH
39857: LD_INT 17
39859: PUSH
39860: LD_INT 8
39862: PUSH
39863: LD_INT 20
39865: PUSH
39866: LD_INT 21
39868: PUSH
39869: LD_INT 22
39871: PUSH
39872: LD_INT 72
39874: PUSH
39875: LD_INT 26
39877: PUSH
39878: LD_INT 69
39880: PUSH
39881: LD_INT 39
39883: PUSH
39884: LD_INT 40
39886: PUSH
39887: LD_INT 41
39889: PUSH
39890: LD_INT 42
39892: PUSH
39893: LD_INT 43
39895: PUSH
39896: LD_INT 48
39898: PUSH
39899: LD_INT 49
39901: PUSH
39902: LD_INT 50
39904: PUSH
39905: LD_INT 51
39907: PUSH
39908: LD_INT 52
39910: PUSH
39911: LD_INT 53
39913: PUSH
39914: LD_INT 54
39916: PUSH
39917: LD_INT 55
39919: PUSH
39920: LD_INT 56
39922: PUSH
39923: LD_INT 60
39925: PUSH
39926: LD_INT 61
39928: PUSH
39929: LD_INT 62
39931: PUSH
39932: LD_INT 66
39934: PUSH
39935: LD_INT 67
39937: PUSH
39938: LD_INT 68
39940: PUSH
39941: LD_INT 81
39943: PUSH
39944: LD_INT 82
39946: PUSH
39947: LD_INT 83
39949: PUSH
39950: LD_INT 84
39952: PUSH
39953: LD_INT 85
39955: PUSH
39956: LD_INT 87
39958: PUSH
39959: LD_INT 88
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: ST_TO_ADDR
40018: GO 40251
40020: LD_INT 3
40022: DOUBLE
40023: EQUAL
40024: IFTRUE 40028
40026: GO 40250
40028: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40029: LD_ADDR_VAR 0 4
40033: PUSH
40034: LD_INT 46
40036: PUSH
40037: LD_INT 47
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: LD_INT 82
40048: PUSH
40049: LD_INT 83
40051: PUSH
40052: LD_INT 84
40054: PUSH
40055: LD_INT 85
40057: PUSH
40058: LD_INT 86
40060: PUSH
40061: LD_INT 11
40063: PUSH
40064: LD_INT 9
40066: PUSH
40067: LD_INT 20
40069: PUSH
40070: LD_INT 19
40072: PUSH
40073: LD_INT 21
40075: PUSH
40076: LD_INT 24
40078: PUSH
40079: LD_INT 22
40081: PUSH
40082: LD_INT 25
40084: PUSH
40085: LD_INT 28
40087: PUSH
40088: LD_INT 29
40090: PUSH
40091: LD_INT 30
40093: PUSH
40094: LD_INT 31
40096: PUSH
40097: LD_INT 37
40099: PUSH
40100: LD_INT 38
40102: PUSH
40103: LD_INT 32
40105: PUSH
40106: LD_INT 27
40108: PUSH
40109: LD_INT 33
40111: PUSH
40112: LD_INT 69
40114: PUSH
40115: LD_INT 39
40117: PUSH
40118: LD_INT 34
40120: PUSH
40121: LD_INT 40
40123: PUSH
40124: LD_INT 71
40126: PUSH
40127: LD_INT 23
40129: PUSH
40130: LD_INT 44
40132: PUSH
40133: LD_INT 48
40135: PUSH
40136: LD_INT 49
40138: PUSH
40139: LD_INT 50
40141: PUSH
40142: LD_INT 51
40144: PUSH
40145: LD_INT 52
40147: PUSH
40148: LD_INT 53
40150: PUSH
40151: LD_INT 54
40153: PUSH
40154: LD_INT 55
40156: PUSH
40157: LD_INT 56
40159: PUSH
40160: LD_INT 57
40162: PUSH
40163: LD_INT 58
40165: PUSH
40166: LD_INT 59
40168: PUSH
40169: LD_INT 63
40171: PUSH
40172: LD_INT 64
40174: PUSH
40175: LD_INT 65
40177: PUSH
40178: LD_INT 82
40180: PUSH
40181: LD_INT 83
40183: PUSH
40184: LD_INT 84
40186: PUSH
40187: LD_INT 85
40189: PUSH
40190: LD_INT 86
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: ST_TO_ADDR
40248: GO 40251
40250: POP
// if state > - 1 and state < 3 then
40251: LD_VAR 0 3
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: GREATER
40260: PUSH
40261: LD_VAR 0 3
40265: PUSH
40266: LD_INT 3
40268: LESS
40269: AND
40270: IFFALSE 40327
// for i in result do
40272: LD_ADDR_VAR 0 5
40276: PUSH
40277: LD_VAR 0 4
40281: PUSH
40282: FOR_IN
40283: IFFALSE 40325
// if GetTech ( i , side ) <> state then
40285: LD_VAR 0 5
40289: PPUSH
40290: LD_VAR 0 1
40294: PPUSH
40295: CALL_OW 321
40299: PUSH
40300: LD_VAR 0 3
40304: NONEQUAL
40305: IFFALSE 40323
// result := result diff i ;
40307: LD_ADDR_VAR 0 4
40311: PUSH
40312: LD_VAR 0 4
40316: PUSH
40317: LD_VAR 0 5
40321: DIFF
40322: ST_TO_ADDR
40323: GO 40282
40325: POP
40326: POP
// end ;
40327: LD_VAR 0 4
40331: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40332: LD_INT 0
40334: PPUSH
40335: PPUSH
40336: PPUSH
// result := true ;
40337: LD_ADDR_VAR 0 3
40341: PUSH
40342: LD_INT 1
40344: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40345: LD_ADDR_VAR 0 5
40349: PUSH
40350: LD_VAR 0 2
40354: PPUSH
40355: CALL_OW 480
40359: ST_TO_ADDR
// if not tmp then
40360: LD_VAR 0 5
40364: NOT
40365: IFFALSE 40369
// exit ;
40367: GO 40418
// for i in tmp do
40369: LD_ADDR_VAR 0 4
40373: PUSH
40374: LD_VAR 0 5
40378: PUSH
40379: FOR_IN
40380: IFFALSE 40416
// if GetTech ( i , side ) <> state_researched then
40382: LD_VAR 0 4
40386: PPUSH
40387: LD_VAR 0 1
40391: PPUSH
40392: CALL_OW 321
40396: PUSH
40397: LD_INT 2
40399: NONEQUAL
40400: IFFALSE 40414
// begin result := false ;
40402: LD_ADDR_VAR 0 3
40406: PUSH
40407: LD_INT 0
40409: ST_TO_ADDR
// exit ;
40410: POP
40411: POP
40412: GO 40418
// end ;
40414: GO 40379
40416: POP
40417: POP
// end ;
40418: LD_VAR 0 3
40422: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40423: LD_INT 0
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
40437: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40438: LD_VAR 0 1
40442: NOT
40443: PUSH
40444: LD_VAR 0 1
40448: PPUSH
40449: CALL_OW 257
40453: PUSH
40454: LD_INT 9
40456: NONEQUAL
40457: OR
40458: IFFALSE 40462
// exit ;
40460: GO 41035
// side := GetSide ( unit ) ;
40462: LD_ADDR_VAR 0 9
40466: PUSH
40467: LD_VAR 0 1
40471: PPUSH
40472: CALL_OW 255
40476: ST_TO_ADDR
// tech_space := tech_spacanom ;
40477: LD_ADDR_VAR 0 12
40481: PUSH
40482: LD_INT 29
40484: ST_TO_ADDR
// tech_time := tech_taurad ;
40485: LD_ADDR_VAR 0 13
40489: PUSH
40490: LD_INT 28
40492: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40493: LD_ADDR_VAR 0 11
40497: PUSH
40498: LD_VAR 0 1
40502: PPUSH
40503: CALL_OW 310
40507: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40508: LD_VAR 0 11
40512: PPUSH
40513: CALL_OW 247
40517: PUSH
40518: LD_INT 2
40520: EQUAL
40521: IFFALSE 40525
// exit ;
40523: GO 41035
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40525: LD_ADDR_VAR 0 8
40529: PUSH
40530: LD_INT 81
40532: PUSH
40533: LD_VAR 0 9
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 3
40544: PUSH
40545: LD_INT 21
40547: PUSH
40548: LD_INT 3
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PPUSH
40563: CALL_OW 69
40567: ST_TO_ADDR
// if not tmp then
40568: LD_VAR 0 8
40572: NOT
40573: IFFALSE 40577
// exit ;
40575: GO 41035
// if in_unit then
40577: LD_VAR 0 11
40581: IFFALSE 40605
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40583: LD_ADDR_VAR 0 10
40587: PUSH
40588: LD_VAR 0 8
40592: PPUSH
40593: LD_VAR 0 11
40597: PPUSH
40598: CALL_OW 74
40602: ST_TO_ADDR
40603: GO 40625
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40605: LD_ADDR_VAR 0 10
40609: PUSH
40610: LD_VAR 0 8
40614: PPUSH
40615: LD_VAR 0 1
40619: PPUSH
40620: CALL_OW 74
40624: ST_TO_ADDR
// if not enemy then
40625: LD_VAR 0 10
40629: NOT
40630: IFFALSE 40634
// exit ;
40632: GO 41035
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40634: LD_VAR 0 11
40638: PUSH
40639: LD_VAR 0 11
40643: PPUSH
40644: LD_VAR 0 10
40648: PPUSH
40649: CALL_OW 296
40653: PUSH
40654: LD_INT 13
40656: GREATER
40657: AND
40658: PUSH
40659: LD_VAR 0 1
40663: PPUSH
40664: LD_VAR 0 10
40668: PPUSH
40669: CALL_OW 296
40673: PUSH
40674: LD_INT 12
40676: GREATER
40677: OR
40678: IFFALSE 40682
// exit ;
40680: GO 41035
// missile := [ 1 ] ;
40682: LD_ADDR_VAR 0 14
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: EMPTY
40691: LIST
40692: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40693: LD_VAR 0 9
40697: PPUSH
40698: LD_VAR 0 12
40702: PPUSH
40703: CALL_OW 325
40707: IFFALSE 40736
// missile := Replace ( missile , missile + 1 , 2 ) ;
40709: LD_ADDR_VAR 0 14
40713: PUSH
40714: LD_VAR 0 14
40718: PPUSH
40719: LD_VAR 0 14
40723: PUSH
40724: LD_INT 1
40726: PLUS
40727: PPUSH
40728: LD_INT 2
40730: PPUSH
40731: CALL_OW 1
40735: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40736: LD_VAR 0 9
40740: PPUSH
40741: LD_VAR 0 13
40745: PPUSH
40746: CALL_OW 325
40750: PUSH
40751: LD_VAR 0 10
40755: PPUSH
40756: CALL_OW 255
40760: PPUSH
40761: LD_VAR 0 13
40765: PPUSH
40766: CALL_OW 325
40770: NOT
40771: AND
40772: IFFALSE 40801
// missile := Replace ( missile , missile + 1 , 3 ) ;
40774: LD_ADDR_VAR 0 14
40778: PUSH
40779: LD_VAR 0 14
40783: PPUSH
40784: LD_VAR 0 14
40788: PUSH
40789: LD_INT 1
40791: PLUS
40792: PPUSH
40793: LD_INT 3
40795: PPUSH
40796: CALL_OW 1
40800: ST_TO_ADDR
// if missile < 2 then
40801: LD_VAR 0 14
40805: PUSH
40806: LD_INT 2
40808: LESS
40809: IFFALSE 40813
// exit ;
40811: GO 41035
// x := GetX ( enemy ) ;
40813: LD_ADDR_VAR 0 4
40817: PUSH
40818: LD_VAR 0 10
40822: PPUSH
40823: CALL_OW 250
40827: ST_TO_ADDR
// y := GetY ( enemy ) ;
40828: LD_ADDR_VAR 0 5
40832: PUSH
40833: LD_VAR 0 10
40837: PPUSH
40838: CALL_OW 251
40842: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40843: LD_ADDR_VAR 0 6
40847: PUSH
40848: LD_VAR 0 4
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PPUSH
40857: LD_INT 1
40859: PPUSH
40860: CALL_OW 12
40864: PLUS
40865: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40866: LD_ADDR_VAR 0 7
40870: PUSH
40871: LD_VAR 0 5
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PPUSH
40880: LD_INT 1
40882: PPUSH
40883: CALL_OW 12
40887: PLUS
40888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40889: LD_VAR 0 6
40893: PPUSH
40894: LD_VAR 0 7
40898: PPUSH
40899: CALL_OW 488
40903: NOT
40904: IFFALSE 40926
// begin _x := x ;
40906: LD_ADDR_VAR 0 6
40910: PUSH
40911: LD_VAR 0 4
40915: ST_TO_ADDR
// _y := y ;
40916: LD_ADDR_VAR 0 7
40920: PUSH
40921: LD_VAR 0 5
40925: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40926: LD_ADDR_VAR 0 3
40930: PUSH
40931: LD_INT 1
40933: PPUSH
40934: LD_VAR 0 14
40938: PPUSH
40939: CALL_OW 12
40943: ST_TO_ADDR
// case i of 1 :
40944: LD_VAR 0 3
40948: PUSH
40949: LD_INT 1
40951: DOUBLE
40952: EQUAL
40953: IFTRUE 40957
40955: GO 40974
40957: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40958: LD_VAR 0 1
40962: PPUSH
40963: LD_VAR 0 10
40967: PPUSH
40968: CALL_OW 115
40972: GO 41035
40974: LD_INT 2
40976: DOUBLE
40977: EQUAL
40978: IFTRUE 40982
40980: GO 41004
40982: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40983: LD_VAR 0 1
40987: PPUSH
40988: LD_VAR 0 6
40992: PPUSH
40993: LD_VAR 0 7
40997: PPUSH
40998: CALL_OW 153
41002: GO 41035
41004: LD_INT 3
41006: DOUBLE
41007: EQUAL
41008: IFTRUE 41012
41010: GO 41034
41012: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41013: LD_VAR 0 1
41017: PPUSH
41018: LD_VAR 0 6
41022: PPUSH
41023: LD_VAR 0 7
41027: PPUSH
41028: CALL_OW 154
41032: GO 41035
41034: POP
// end ;
41035: LD_VAR 0 2
41039: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41040: LD_INT 0
41042: PPUSH
41043: PPUSH
41044: PPUSH
41045: PPUSH
41046: PPUSH
41047: PPUSH
// if not unit or not building then
41048: LD_VAR 0 1
41052: NOT
41053: PUSH
41054: LD_VAR 0 2
41058: NOT
41059: OR
41060: IFFALSE 41064
// exit ;
41062: GO 41222
// x := GetX ( building ) ;
41064: LD_ADDR_VAR 0 5
41068: PUSH
41069: LD_VAR 0 2
41073: PPUSH
41074: CALL_OW 250
41078: ST_TO_ADDR
// y := GetY ( building ) ;
41079: LD_ADDR_VAR 0 6
41083: PUSH
41084: LD_VAR 0 2
41088: PPUSH
41089: CALL_OW 251
41093: ST_TO_ADDR
// for i = 0 to 5 do
41094: LD_ADDR_VAR 0 4
41098: PUSH
41099: DOUBLE
41100: LD_INT 0
41102: DEC
41103: ST_TO_ADDR
41104: LD_INT 5
41106: PUSH
41107: FOR_TO
41108: IFFALSE 41220
// begin _x := ShiftX ( x , i , 3 ) ;
41110: LD_ADDR_VAR 0 7
41114: PUSH
41115: LD_VAR 0 5
41119: PPUSH
41120: LD_VAR 0 4
41124: PPUSH
41125: LD_INT 3
41127: PPUSH
41128: CALL_OW 272
41132: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41133: LD_ADDR_VAR 0 8
41137: PUSH
41138: LD_VAR 0 6
41142: PPUSH
41143: LD_VAR 0 4
41147: PPUSH
41148: LD_INT 3
41150: PPUSH
41151: CALL_OW 273
41155: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41156: LD_VAR 0 7
41160: PPUSH
41161: LD_VAR 0 8
41165: PPUSH
41166: CALL_OW 488
41170: NOT
41171: IFFALSE 41175
// continue ;
41173: GO 41107
// if HexInfo ( _x , _y ) = 0 then
41175: LD_VAR 0 7
41179: PPUSH
41180: LD_VAR 0 8
41184: PPUSH
41185: CALL_OW 428
41189: PUSH
41190: LD_INT 0
41192: EQUAL
41193: IFFALSE 41218
// begin ComMoveXY ( unit , _x , _y ) ;
41195: LD_VAR 0 1
41199: PPUSH
41200: LD_VAR 0 7
41204: PPUSH
41205: LD_VAR 0 8
41209: PPUSH
41210: CALL_OW 111
// exit ;
41214: POP
41215: POP
41216: GO 41222
// end ; end ;
41218: GO 41107
41220: POP
41221: POP
// end ;
41222: LD_VAR 0 3
41226: RET
// export function ScanBase ( side , base_area ) ; begin
41227: LD_INT 0
41229: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_VAR 0 2
41239: PPUSH
41240: LD_INT 81
41242: PUSH
41243: LD_VAR 0 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PPUSH
41252: CALL_OW 70
41256: ST_TO_ADDR
// end ;
41257: LD_VAR 0 3
41261: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
// result := false ;
41268: LD_ADDR_VAR 0 2
41272: PUSH
41273: LD_INT 0
41275: ST_TO_ADDR
// side := GetSide ( unit ) ;
41276: LD_ADDR_VAR 0 3
41280: PUSH
41281: LD_VAR 0 1
41285: PPUSH
41286: CALL_OW 255
41290: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41291: LD_ADDR_VAR 0 4
41295: PUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 248
41305: ST_TO_ADDR
// case nat of 1 :
41306: LD_VAR 0 4
41310: PUSH
41311: LD_INT 1
41313: DOUBLE
41314: EQUAL
41315: IFTRUE 41319
41317: GO 41330
41319: POP
// tech := tech_lassight ; 2 :
41320: LD_ADDR_VAR 0 5
41324: PUSH
41325: LD_INT 12
41327: ST_TO_ADDR
41328: GO 41369
41330: LD_INT 2
41332: DOUBLE
41333: EQUAL
41334: IFTRUE 41338
41336: GO 41349
41338: POP
// tech := tech_mortar ; 3 :
41339: LD_ADDR_VAR 0 5
41343: PUSH
41344: LD_INT 41
41346: ST_TO_ADDR
41347: GO 41369
41349: LD_INT 3
41351: DOUBLE
41352: EQUAL
41353: IFTRUE 41357
41355: GO 41368
41357: POP
// tech := tech_bazooka ; end ;
41358: LD_ADDR_VAR 0 5
41362: PUSH
41363: LD_INT 44
41365: ST_TO_ADDR
41366: GO 41369
41368: POP
// if Researched ( side , tech ) then
41369: LD_VAR 0 3
41373: PPUSH
41374: LD_VAR 0 5
41378: PPUSH
41379: CALL_OW 325
41383: IFFALSE 41410
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41385: LD_ADDR_VAR 0 2
41389: PUSH
41390: LD_INT 5
41392: PUSH
41393: LD_INT 8
41395: PUSH
41396: LD_INT 9
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: PUSH
41404: LD_VAR 0 4
41408: ARRAY
41409: ST_TO_ADDR
// end ;
41410: LD_VAR 0 2
41414: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41415: LD_INT 0
41417: PPUSH
41418: PPUSH
41419: PPUSH
// if not mines then
41420: LD_VAR 0 2
41424: NOT
41425: IFFALSE 41429
// exit ;
41427: GO 41573
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41429: LD_ADDR_VAR 0 5
41433: PUSH
41434: LD_INT 81
41436: PUSH
41437: LD_VAR 0 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: LD_INT 21
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PPUSH
41467: CALL_OW 69
41471: ST_TO_ADDR
// for i in mines do
41472: LD_ADDR_VAR 0 4
41476: PUSH
41477: LD_VAR 0 2
41481: PUSH
41482: FOR_IN
41483: IFFALSE 41571
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41485: LD_VAR 0 4
41489: PUSH
41490: LD_INT 1
41492: ARRAY
41493: PPUSH
41494: LD_VAR 0 4
41498: PUSH
41499: LD_INT 2
41501: ARRAY
41502: PPUSH
41503: CALL_OW 458
41507: NOT
41508: IFFALSE 41512
// continue ;
41510: GO 41482
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41512: LD_VAR 0 4
41516: PUSH
41517: LD_INT 1
41519: ARRAY
41520: PPUSH
41521: LD_VAR 0 4
41525: PUSH
41526: LD_INT 2
41528: ARRAY
41529: PPUSH
41530: CALL_OW 428
41534: PUSH
41535: LD_VAR 0 5
41539: IN
41540: IFFALSE 41569
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41542: LD_VAR 0 4
41546: PUSH
41547: LD_INT 1
41549: ARRAY
41550: PPUSH
41551: LD_VAR 0 4
41555: PUSH
41556: LD_INT 2
41558: ARRAY
41559: PPUSH
41560: LD_VAR 0 1
41564: PPUSH
41565: CALL_OW 456
// end ;
41569: GO 41482
41571: POP
41572: POP
// end ;
41573: LD_VAR 0 3
41577: RET
// export function Count ( array ) ; var i ; begin
41578: LD_INT 0
41580: PPUSH
41581: PPUSH
// result := 0 ;
41582: LD_ADDR_VAR 0 2
41586: PUSH
41587: LD_INT 0
41589: ST_TO_ADDR
// for i in array do
41590: LD_ADDR_VAR 0 3
41594: PUSH
41595: LD_VAR 0 1
41599: PUSH
41600: FOR_IN
41601: IFFALSE 41625
// if i then
41603: LD_VAR 0 3
41607: IFFALSE 41623
// result := result + 1 ;
41609: LD_ADDR_VAR 0 2
41613: PUSH
41614: LD_VAR 0 2
41618: PUSH
41619: LD_INT 1
41621: PLUS
41622: ST_TO_ADDR
41623: GO 41600
41625: POP
41626: POP
// end ;
41627: LD_VAR 0 2
41631: RET
// export function IsEmpty ( building ) ; begin
41632: LD_INT 0
41634: PPUSH
// if not building then
41635: LD_VAR 0 1
41639: NOT
41640: IFFALSE 41644
// exit ;
41642: GO 41687
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41644: LD_ADDR_VAR 0 2
41648: PUSH
41649: LD_VAR 0 1
41653: PUSH
41654: LD_INT 22
41656: PUSH
41657: LD_VAR 0 1
41661: PPUSH
41662: CALL_OW 255
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 58
41673: PUSH
41674: EMPTY
41675: LIST
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PPUSH
41681: CALL_OW 69
41685: IN
41686: ST_TO_ADDR
// end ;
41687: LD_VAR 0 2
41691: RET
// export function IsNotFull ( building ) ; var places ; begin
41692: LD_INT 0
41694: PPUSH
41695: PPUSH
// if not building then
41696: LD_VAR 0 1
41700: NOT
41701: IFFALSE 41705
// exit ;
41703: GO 41876
// result := false ;
41705: LD_ADDR_VAR 0 2
41709: PUSH
41710: LD_INT 0
41712: ST_TO_ADDR
// places := 0 ;
41713: LD_ADDR_VAR 0 3
41717: PUSH
41718: LD_INT 0
41720: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41721: LD_VAR 0 1
41725: PPUSH
41726: CALL_OW 266
41730: PUSH
41731: LD_INT 0
41733: DOUBLE
41734: EQUAL
41735: IFTRUE 41793
41737: LD_INT 1
41739: DOUBLE
41740: EQUAL
41741: IFTRUE 41793
41743: LD_INT 6
41745: DOUBLE
41746: EQUAL
41747: IFTRUE 41793
41749: LD_INT 7
41751: DOUBLE
41752: EQUAL
41753: IFTRUE 41793
41755: LD_INT 8
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41793
41761: LD_INT 4
41763: DOUBLE
41764: EQUAL
41765: IFTRUE 41793
41767: LD_INT 5
41769: DOUBLE
41770: EQUAL
41771: IFTRUE 41793
41773: LD_INT 2
41775: DOUBLE
41776: EQUAL
41777: IFTRUE 41793
41779: LD_INT 3
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41793
41785: LD_INT 35
41787: DOUBLE
41788: EQUAL
41789: IFTRUE 41793
41791: GO 41804
41793: POP
// places := 6 ; b_bunker , b_breastwork :
41794: LD_ADDR_VAR 0 3
41798: PUSH
41799: LD_INT 6
41801: ST_TO_ADDR
41802: GO 41849
41804: LD_INT 32
41806: DOUBLE
41807: EQUAL
41808: IFTRUE 41818
41810: LD_INT 31
41812: DOUBLE
41813: EQUAL
41814: IFTRUE 41818
41816: GO 41829
41818: POP
// places := 1 ; b_control_tower :
41819: LD_ADDR_VAR 0 3
41823: PUSH
41824: LD_INT 1
41826: ST_TO_ADDR
41827: GO 41849
41829: LD_INT 36
41831: DOUBLE
41832: EQUAL
41833: IFTRUE 41837
41835: GO 41848
41837: POP
// places := 3 ; end ;
41838: LD_ADDR_VAR 0 3
41842: PUSH
41843: LD_INT 3
41845: ST_TO_ADDR
41846: GO 41849
41848: POP
// if places then
41849: LD_VAR 0 3
41853: IFFALSE 41876
// result := UnitsInside ( building ) < places ;
41855: LD_ADDR_VAR 0 2
41859: PUSH
41860: LD_VAR 0 1
41864: PPUSH
41865: CALL_OW 313
41869: PUSH
41870: LD_VAR 0 3
41874: LESS
41875: ST_TO_ADDR
// end ;
41876: LD_VAR 0 2
41880: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41881: LD_INT 0
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
// tmp := [ ] ;
41887: LD_ADDR_VAR 0 3
41891: PUSH
41892: EMPTY
41893: ST_TO_ADDR
// list := [ ] ;
41894: LD_ADDR_VAR 0 5
41898: PUSH
41899: EMPTY
41900: ST_TO_ADDR
// for i = 16 to 25 do
41901: LD_ADDR_VAR 0 4
41905: PUSH
41906: DOUBLE
41907: LD_INT 16
41909: DEC
41910: ST_TO_ADDR
41911: LD_INT 25
41913: PUSH
41914: FOR_TO
41915: IFFALSE 41988
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41917: LD_ADDR_VAR 0 3
41921: PUSH
41922: LD_VAR 0 3
41926: PUSH
41927: LD_INT 22
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: CALL_OW 255
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 91
41946: PUSH
41947: LD_VAR 0 1
41951: PUSH
41952: LD_INT 6
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 30
41962: PUSH
41963: LD_VAR 0 4
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: PUSH
41977: EMPTY
41978: LIST
41979: PPUSH
41980: CALL_OW 69
41984: ADD
41985: ST_TO_ADDR
41986: GO 41914
41988: POP
41989: POP
// for i = 1 to tmp do
41990: LD_ADDR_VAR 0 4
41994: PUSH
41995: DOUBLE
41996: LD_INT 1
41998: DEC
41999: ST_TO_ADDR
42000: LD_VAR 0 3
42004: PUSH
42005: FOR_TO
42006: IFFALSE 42094
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42008: LD_ADDR_VAR 0 5
42012: PUSH
42013: LD_VAR 0 5
42017: PUSH
42018: LD_VAR 0 3
42022: PUSH
42023: LD_VAR 0 4
42027: ARRAY
42028: PPUSH
42029: CALL_OW 266
42033: PUSH
42034: LD_VAR 0 3
42038: PUSH
42039: LD_VAR 0 4
42043: ARRAY
42044: PPUSH
42045: CALL_OW 250
42049: PUSH
42050: LD_VAR 0 3
42054: PUSH
42055: LD_VAR 0 4
42059: ARRAY
42060: PPUSH
42061: CALL_OW 251
42065: PUSH
42066: LD_VAR 0 3
42070: PUSH
42071: LD_VAR 0 4
42075: ARRAY
42076: PPUSH
42077: CALL_OW 254
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: ADD
42091: ST_TO_ADDR
42092: GO 42005
42094: POP
42095: POP
// result := list ;
42096: LD_ADDR_VAR 0 2
42100: PUSH
42101: LD_VAR 0 5
42105: ST_TO_ADDR
// end ;
42106: LD_VAR 0 2
42110: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42111: LD_INT 0
42113: PPUSH
42114: PPUSH
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
42119: PPUSH
// if not factory then
42120: LD_VAR 0 1
42124: NOT
42125: IFFALSE 42129
// exit ;
42127: GO 42722
// if control = control_apeman then
42129: LD_VAR 0 4
42133: PUSH
42134: LD_INT 5
42136: EQUAL
42137: IFFALSE 42246
// begin tmp := UnitsInside ( factory ) ;
42139: LD_ADDR_VAR 0 8
42143: PUSH
42144: LD_VAR 0 1
42148: PPUSH
42149: CALL_OW 313
42153: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42154: LD_VAR 0 8
42158: PPUSH
42159: LD_INT 25
42161: PUSH
42162: LD_INT 12
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PPUSH
42169: CALL_OW 72
42173: NOT
42174: IFFALSE 42184
// control := control_manual ;
42176: LD_ADDR_VAR 0 4
42180: PUSH
42181: LD_INT 1
42183: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42184: LD_ADDR_VAR 0 8
42188: PUSH
42189: LD_VAR 0 1
42193: PPUSH
42194: CALL 41881 0 1
42198: ST_TO_ADDR
// if tmp then
42199: LD_VAR 0 8
42203: IFFALSE 42246
// begin for i in tmp do
42205: LD_ADDR_VAR 0 7
42209: PUSH
42210: LD_VAR 0 8
42214: PUSH
42215: FOR_IN
42216: IFFALSE 42244
// if i [ 1 ] = b_ext_radio then
42218: LD_VAR 0 7
42222: PUSH
42223: LD_INT 1
42225: ARRAY
42226: PUSH
42227: LD_INT 22
42229: EQUAL
42230: IFFALSE 42242
// begin control := control_remote ;
42232: LD_ADDR_VAR 0 4
42236: PUSH
42237: LD_INT 2
42239: ST_TO_ADDR
// break ;
42240: GO 42244
// end ;
42242: GO 42215
42244: POP
42245: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42246: LD_VAR 0 1
42250: PPUSH
42251: LD_VAR 0 2
42255: PPUSH
42256: LD_VAR 0 3
42260: PPUSH
42261: LD_VAR 0 4
42265: PPUSH
42266: LD_VAR 0 5
42270: PPUSH
42271: CALL_OW 448
42275: IFFALSE 42310
// begin result := [ chassis , engine , control , weapon ] ;
42277: LD_ADDR_VAR 0 6
42281: PUSH
42282: LD_VAR 0 2
42286: PUSH
42287: LD_VAR 0 3
42291: PUSH
42292: LD_VAR 0 4
42296: PUSH
42297: LD_VAR 0 5
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: ST_TO_ADDR
// exit ;
42308: GO 42722
// end ; _chassis := AvailableChassisList ( factory ) ;
42310: LD_ADDR_VAR 0 9
42314: PUSH
42315: LD_VAR 0 1
42319: PPUSH
42320: CALL_OW 475
42324: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42325: LD_ADDR_VAR 0 11
42329: PUSH
42330: LD_VAR 0 1
42334: PPUSH
42335: CALL_OW 476
42339: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42340: LD_ADDR_VAR 0 12
42344: PUSH
42345: LD_VAR 0 1
42349: PPUSH
42350: CALL_OW 477
42354: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42355: LD_ADDR_VAR 0 10
42359: PUSH
42360: LD_VAR 0 1
42364: PPUSH
42365: CALL_OW 478
42369: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42370: LD_VAR 0 9
42374: NOT
42375: PUSH
42376: LD_VAR 0 11
42380: NOT
42381: OR
42382: PUSH
42383: LD_VAR 0 12
42387: NOT
42388: OR
42389: PUSH
42390: LD_VAR 0 10
42394: NOT
42395: OR
42396: IFFALSE 42431
// begin result := [ chassis , engine , control , weapon ] ;
42398: LD_ADDR_VAR 0 6
42402: PUSH
42403: LD_VAR 0 2
42407: PUSH
42408: LD_VAR 0 3
42412: PUSH
42413: LD_VAR 0 4
42417: PUSH
42418: LD_VAR 0 5
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: ST_TO_ADDR
// exit ;
42429: GO 42722
// end ; if not chassis in _chassis then
42431: LD_VAR 0 2
42435: PUSH
42436: LD_VAR 0 9
42440: IN
42441: NOT
42442: IFFALSE 42468
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42444: LD_ADDR_VAR 0 2
42448: PUSH
42449: LD_VAR 0 9
42453: PUSH
42454: LD_INT 1
42456: PPUSH
42457: LD_VAR 0 9
42461: PPUSH
42462: CALL_OW 12
42466: ARRAY
42467: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42468: LD_VAR 0 2
42472: PPUSH
42473: LD_VAR 0 3
42477: PPUSH
42478: CALL 42727 0 2
42482: NOT
42483: IFFALSE 42542
// repeat engine := _engine [ 1 ] ;
42485: LD_ADDR_VAR 0 3
42489: PUSH
42490: LD_VAR 0 11
42494: PUSH
42495: LD_INT 1
42497: ARRAY
42498: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42499: LD_ADDR_VAR 0 11
42503: PUSH
42504: LD_VAR 0 11
42508: PPUSH
42509: LD_INT 1
42511: PPUSH
42512: CALL_OW 3
42516: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42517: LD_VAR 0 2
42521: PPUSH
42522: LD_VAR 0 3
42526: PPUSH
42527: CALL 42727 0 2
42531: PUSH
42532: LD_VAR 0 11
42536: PUSH
42537: EMPTY
42538: EQUAL
42539: OR
42540: IFFALSE 42485
// if not control in _control then
42542: LD_VAR 0 4
42546: PUSH
42547: LD_VAR 0 12
42551: IN
42552: NOT
42553: IFFALSE 42579
// control := _control [ rand ( 1 , _control ) ] ;
42555: LD_ADDR_VAR 0 4
42559: PUSH
42560: LD_VAR 0 12
42564: PUSH
42565: LD_INT 1
42567: PPUSH
42568: LD_VAR 0 12
42572: PPUSH
42573: CALL_OW 12
42577: ARRAY
42578: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42579: LD_VAR 0 2
42583: PPUSH
42584: LD_VAR 0 5
42588: PPUSH
42589: CALL 42947 0 2
42593: NOT
42594: IFFALSE 42653
// repeat weapon := _weapon [ 1 ] ;
42596: LD_ADDR_VAR 0 5
42600: PUSH
42601: LD_VAR 0 10
42605: PUSH
42606: LD_INT 1
42608: ARRAY
42609: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42610: LD_ADDR_VAR 0 10
42614: PUSH
42615: LD_VAR 0 10
42619: PPUSH
42620: LD_INT 1
42622: PPUSH
42623: CALL_OW 3
42627: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42628: LD_VAR 0 2
42632: PPUSH
42633: LD_VAR 0 5
42637: PPUSH
42638: CALL 42947 0 2
42642: PUSH
42643: LD_VAR 0 10
42647: PUSH
42648: EMPTY
42649: EQUAL
42650: OR
42651: IFFALSE 42596
// result := [ ] ;
42653: LD_ADDR_VAR 0 6
42657: PUSH
42658: EMPTY
42659: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42660: LD_VAR 0 1
42664: PPUSH
42665: LD_VAR 0 2
42669: PPUSH
42670: LD_VAR 0 3
42674: PPUSH
42675: LD_VAR 0 4
42679: PPUSH
42680: LD_VAR 0 5
42684: PPUSH
42685: CALL_OW 448
42689: IFFALSE 42722
// result := [ chassis , engine , control , weapon ] ;
42691: LD_ADDR_VAR 0 6
42695: PUSH
42696: LD_VAR 0 2
42700: PUSH
42701: LD_VAR 0 3
42705: PUSH
42706: LD_VAR 0 4
42710: PUSH
42711: LD_VAR 0 5
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: ST_TO_ADDR
// end ;
42722: LD_VAR 0 6
42726: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42727: LD_INT 0
42729: PPUSH
// if not chassis or not engine then
42730: LD_VAR 0 1
42734: NOT
42735: PUSH
42736: LD_VAR 0 2
42740: NOT
42741: OR
42742: IFFALSE 42746
// exit ;
42744: GO 42942
// case engine of engine_solar :
42746: LD_VAR 0 2
42750: PUSH
42751: LD_INT 2
42753: DOUBLE
42754: EQUAL
42755: IFTRUE 42759
42757: GO 42797
42759: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42760: LD_ADDR_VAR 0 3
42764: PUSH
42765: LD_INT 11
42767: PUSH
42768: LD_INT 12
42770: PUSH
42771: LD_INT 13
42773: PUSH
42774: LD_INT 14
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 3
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: ST_TO_ADDR
42795: GO 42926
42797: LD_INT 1
42799: DOUBLE
42800: EQUAL
42801: IFTRUE 42805
42803: GO 42867
42805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_INT 11
42813: PUSH
42814: LD_INT 12
42816: PUSH
42817: LD_INT 13
42819: PUSH
42820: LD_INT 14
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: LD_INT 4
42834: PUSH
42835: LD_INT 5
42837: PUSH
42838: LD_INT 21
42840: PUSH
42841: LD_INT 23
42843: PUSH
42844: LD_INT 22
42846: PUSH
42847: LD_INT 24
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: ST_TO_ADDR
42865: GO 42926
42867: LD_INT 3
42869: DOUBLE
42870: EQUAL
42871: IFTRUE 42875
42873: GO 42925
42875: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42876: LD_ADDR_VAR 0 3
42880: PUSH
42881: LD_INT 13
42883: PUSH
42884: LD_INT 14
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: LD_INT 4
42895: PUSH
42896: LD_INT 5
42898: PUSH
42899: LD_INT 21
42901: PUSH
42902: LD_INT 22
42904: PUSH
42905: LD_INT 23
42907: PUSH
42908: LD_INT 24
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
42923: GO 42926
42925: POP
// result := ( chassis in result ) ;
42926: LD_ADDR_VAR 0 3
42930: PUSH
42931: LD_VAR 0 1
42935: PUSH
42936: LD_VAR 0 3
42940: IN
42941: ST_TO_ADDR
// end ;
42942: LD_VAR 0 3
42946: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42947: LD_INT 0
42949: PPUSH
// if not chassis or not weapon then
42950: LD_VAR 0 1
42954: NOT
42955: PUSH
42956: LD_VAR 0 2
42960: NOT
42961: OR
42962: IFFALSE 42966
// exit ;
42964: GO 44026
// case weapon of us_machine_gun :
42966: LD_VAR 0 2
42970: PUSH
42971: LD_INT 2
42973: DOUBLE
42974: EQUAL
42975: IFTRUE 42979
42977: GO 43009
42979: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42980: LD_ADDR_VAR 0 3
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 3
42993: PUSH
42994: LD_INT 4
42996: PUSH
42997: LD_INT 5
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: ST_TO_ADDR
43007: GO 44010
43009: LD_INT 3
43011: DOUBLE
43012: EQUAL
43013: IFTRUE 43017
43015: GO 43047
43017: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43018: LD_ADDR_VAR 0 3
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: LD_INT 3
43031: PUSH
43032: LD_INT 4
43034: PUSH
43035: LD_INT 5
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: ST_TO_ADDR
43045: GO 44010
43047: LD_INT 11
43049: DOUBLE
43050: EQUAL
43051: IFTRUE 43055
43053: GO 43085
43055: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43056: LD_ADDR_VAR 0 3
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 3
43069: PUSH
43070: LD_INT 4
43072: PUSH
43073: LD_INT 5
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: ST_TO_ADDR
43083: GO 44010
43085: LD_INT 4
43087: DOUBLE
43088: EQUAL
43089: IFTRUE 43093
43091: GO 43119
43093: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43094: LD_ADDR_VAR 0 3
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: LD_INT 4
43107: PUSH
43108: LD_INT 5
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: ST_TO_ADDR
43117: GO 44010
43119: LD_INT 5
43121: DOUBLE
43122: EQUAL
43123: IFTRUE 43127
43125: GO 43153
43127: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43128: LD_ADDR_VAR 0 3
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: LD_INT 4
43141: PUSH
43142: LD_INT 5
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: ST_TO_ADDR
43151: GO 44010
43153: LD_INT 9
43155: DOUBLE
43156: EQUAL
43157: IFTRUE 43161
43159: GO 43187
43161: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43162: LD_ADDR_VAR 0 3
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: LD_INT 4
43175: PUSH
43176: LD_INT 5
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: ST_TO_ADDR
43185: GO 44010
43187: LD_INT 7
43189: DOUBLE
43190: EQUAL
43191: IFTRUE 43195
43193: GO 43221
43195: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43196: LD_ADDR_VAR 0 3
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: LD_INT 3
43206: PUSH
43207: LD_INT 4
43209: PUSH
43210: LD_INT 5
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: ST_TO_ADDR
43219: GO 44010
43221: LD_INT 12
43223: DOUBLE
43224: EQUAL
43225: IFTRUE 43229
43227: GO 43255
43229: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43230: LD_ADDR_VAR 0 3
43234: PUSH
43235: LD_INT 2
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: LD_INT 4
43243: PUSH
43244: LD_INT 5
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
43253: GO 44010
43255: LD_INT 13
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43263
43261: GO 43289
43263: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43264: LD_ADDR_VAR 0 3
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: LD_INT 3
43274: PUSH
43275: LD_INT 4
43277: PUSH
43278: LD_INT 5
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: ST_TO_ADDR
43287: GO 44010
43289: LD_INT 14
43291: DOUBLE
43292: EQUAL
43293: IFTRUE 43297
43295: GO 43315
43297: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43298: LD_ADDR_VAR 0 3
43302: PUSH
43303: LD_INT 4
43305: PUSH
43306: LD_INT 5
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: ST_TO_ADDR
43313: GO 44010
43315: LD_INT 6
43317: DOUBLE
43318: EQUAL
43319: IFTRUE 43323
43321: GO 43341
43323: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43324: LD_ADDR_VAR 0 3
43328: PUSH
43329: LD_INT 4
43331: PUSH
43332: LD_INT 5
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: ST_TO_ADDR
43339: GO 44010
43341: LD_INT 10
43343: DOUBLE
43344: EQUAL
43345: IFTRUE 43349
43347: GO 43367
43349: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43350: LD_ADDR_VAR 0 3
43354: PUSH
43355: LD_INT 4
43357: PUSH
43358: LD_INT 5
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: ST_TO_ADDR
43365: GO 44010
43367: LD_INT 22
43369: DOUBLE
43370: EQUAL
43371: IFTRUE 43375
43373: GO 43401
43375: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43376: LD_ADDR_VAR 0 3
43380: PUSH
43381: LD_INT 11
43383: PUSH
43384: LD_INT 12
43386: PUSH
43387: LD_INT 13
43389: PUSH
43390: LD_INT 14
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
43399: GO 44010
43401: LD_INT 23
43403: DOUBLE
43404: EQUAL
43405: IFTRUE 43409
43407: GO 43435
43409: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: LD_INT 11
43417: PUSH
43418: LD_INT 12
43420: PUSH
43421: LD_INT 13
43423: PUSH
43424: LD_INT 14
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: ST_TO_ADDR
43433: GO 44010
43435: LD_INT 24
43437: DOUBLE
43438: EQUAL
43439: IFTRUE 43443
43441: GO 43469
43443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43444: LD_ADDR_VAR 0 3
43448: PUSH
43449: LD_INT 11
43451: PUSH
43452: LD_INT 12
43454: PUSH
43455: LD_INT 13
43457: PUSH
43458: LD_INT 14
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: ST_TO_ADDR
43467: GO 44010
43469: LD_INT 30
43471: DOUBLE
43472: EQUAL
43473: IFTRUE 43477
43475: GO 43503
43477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43478: LD_ADDR_VAR 0 3
43482: PUSH
43483: LD_INT 11
43485: PUSH
43486: LD_INT 12
43488: PUSH
43489: LD_INT 13
43491: PUSH
43492: LD_INT 14
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: ST_TO_ADDR
43501: GO 44010
43503: LD_INT 25
43505: DOUBLE
43506: EQUAL
43507: IFTRUE 43511
43509: GO 43529
43511: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43512: LD_ADDR_VAR 0 3
43516: PUSH
43517: LD_INT 13
43519: PUSH
43520: LD_INT 14
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: ST_TO_ADDR
43527: GO 44010
43529: LD_INT 27
43531: DOUBLE
43532: EQUAL
43533: IFTRUE 43537
43535: GO 43555
43537: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43538: LD_ADDR_VAR 0 3
43542: PUSH
43543: LD_INT 13
43545: PUSH
43546: LD_INT 14
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: ST_TO_ADDR
43553: GO 44010
43555: LD_INT 92
43557: DOUBLE
43558: EQUAL
43559: IFTRUE 43563
43561: GO 43589
43563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43564: LD_ADDR_VAR 0 3
43568: PUSH
43569: LD_INT 11
43571: PUSH
43572: LD_INT 12
43574: PUSH
43575: LD_INT 13
43577: PUSH
43578: LD_INT 14
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: ST_TO_ADDR
43587: GO 44010
43589: LD_INT 28
43591: DOUBLE
43592: EQUAL
43593: IFTRUE 43597
43595: GO 43615
43597: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43598: LD_ADDR_VAR 0 3
43602: PUSH
43603: LD_INT 13
43605: PUSH
43606: LD_INT 14
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: ST_TO_ADDR
43613: GO 44010
43615: LD_INT 29
43617: DOUBLE
43618: EQUAL
43619: IFTRUE 43623
43621: GO 43641
43623: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43624: LD_ADDR_VAR 0 3
43628: PUSH
43629: LD_INT 13
43631: PUSH
43632: LD_INT 14
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: ST_TO_ADDR
43639: GO 44010
43641: LD_INT 31
43643: DOUBLE
43644: EQUAL
43645: IFTRUE 43649
43647: GO 43667
43649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43650: LD_ADDR_VAR 0 3
43654: PUSH
43655: LD_INT 13
43657: PUSH
43658: LD_INT 14
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: ST_TO_ADDR
43665: GO 44010
43667: LD_INT 26
43669: DOUBLE
43670: EQUAL
43671: IFTRUE 43675
43673: GO 43693
43675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43676: LD_ADDR_VAR 0 3
43680: PUSH
43681: LD_INT 13
43683: PUSH
43684: LD_INT 14
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: ST_TO_ADDR
43691: GO 44010
43693: LD_INT 42
43695: DOUBLE
43696: EQUAL
43697: IFTRUE 43701
43699: GO 43727
43701: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43702: LD_ADDR_VAR 0 3
43706: PUSH
43707: LD_INT 21
43709: PUSH
43710: LD_INT 22
43712: PUSH
43713: LD_INT 23
43715: PUSH
43716: LD_INT 24
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: ST_TO_ADDR
43725: GO 44010
43727: LD_INT 43
43729: DOUBLE
43730: EQUAL
43731: IFTRUE 43735
43733: GO 43761
43735: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43736: LD_ADDR_VAR 0 3
43740: PUSH
43741: LD_INT 21
43743: PUSH
43744: LD_INT 22
43746: PUSH
43747: LD_INT 23
43749: PUSH
43750: LD_INT 24
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: ST_TO_ADDR
43759: GO 44010
43761: LD_INT 44
43763: DOUBLE
43764: EQUAL
43765: IFTRUE 43769
43767: GO 43795
43769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_INT 21
43777: PUSH
43778: LD_INT 22
43780: PUSH
43781: LD_INT 23
43783: PUSH
43784: LD_INT 24
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: ST_TO_ADDR
43793: GO 44010
43795: LD_INT 45
43797: DOUBLE
43798: EQUAL
43799: IFTRUE 43803
43801: GO 43829
43803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43804: LD_ADDR_VAR 0 3
43808: PUSH
43809: LD_INT 21
43811: PUSH
43812: LD_INT 22
43814: PUSH
43815: LD_INT 23
43817: PUSH
43818: LD_INT 24
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
43827: GO 44010
43829: LD_INT 49
43831: DOUBLE
43832: EQUAL
43833: IFTRUE 43837
43835: GO 43863
43837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43838: LD_ADDR_VAR 0 3
43842: PUSH
43843: LD_INT 21
43845: PUSH
43846: LD_INT 22
43848: PUSH
43849: LD_INT 23
43851: PUSH
43852: LD_INT 24
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: ST_TO_ADDR
43861: GO 44010
43863: LD_INT 51
43865: DOUBLE
43866: EQUAL
43867: IFTRUE 43871
43869: GO 43897
43871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43872: LD_ADDR_VAR 0 3
43876: PUSH
43877: LD_INT 21
43879: PUSH
43880: LD_INT 22
43882: PUSH
43883: LD_INT 23
43885: PUSH
43886: LD_INT 24
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: ST_TO_ADDR
43895: GO 44010
43897: LD_INT 52
43899: DOUBLE
43900: EQUAL
43901: IFTRUE 43905
43903: GO 43931
43905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43906: LD_ADDR_VAR 0 3
43910: PUSH
43911: LD_INT 21
43913: PUSH
43914: LD_INT 22
43916: PUSH
43917: LD_INT 23
43919: PUSH
43920: LD_INT 24
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: ST_TO_ADDR
43929: GO 44010
43931: LD_INT 53
43933: DOUBLE
43934: EQUAL
43935: IFTRUE 43939
43937: GO 43957
43939: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43940: LD_ADDR_VAR 0 3
43944: PUSH
43945: LD_INT 23
43947: PUSH
43948: LD_INT 24
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: ST_TO_ADDR
43955: GO 44010
43957: LD_INT 46
43959: DOUBLE
43960: EQUAL
43961: IFTRUE 43965
43963: GO 43983
43965: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43966: LD_ADDR_VAR 0 3
43970: PUSH
43971: LD_INT 23
43973: PUSH
43974: LD_INT 24
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: ST_TO_ADDR
43981: GO 44010
43983: LD_INT 47
43985: DOUBLE
43986: EQUAL
43987: IFTRUE 43991
43989: GO 44009
43991: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43992: LD_ADDR_VAR 0 3
43996: PUSH
43997: LD_INT 23
43999: PUSH
44000: LD_INT 24
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: ST_TO_ADDR
44007: GO 44010
44009: POP
// result := ( chassis in result ) ;
44010: LD_ADDR_VAR 0 3
44014: PUSH
44015: LD_VAR 0 1
44019: PUSH
44020: LD_VAR 0 3
44024: IN
44025: ST_TO_ADDR
// end ;
44026: LD_VAR 0 3
44030: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44031: LD_INT 0
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
// result := array ;
44040: LD_ADDR_VAR 0 5
44044: PUSH
44045: LD_VAR 0 1
44049: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44050: LD_VAR 0 1
44054: NOT
44055: PUSH
44056: LD_VAR 0 2
44060: NOT
44061: OR
44062: PUSH
44063: LD_VAR 0 3
44067: NOT
44068: OR
44069: PUSH
44070: LD_VAR 0 2
44074: PUSH
44075: LD_VAR 0 1
44079: GREATER
44080: OR
44081: PUSH
44082: LD_VAR 0 3
44086: PUSH
44087: LD_VAR 0 1
44091: GREATER
44092: OR
44093: IFFALSE 44097
// exit ;
44095: GO 44393
// if direction then
44097: LD_VAR 0 4
44101: IFFALSE 44165
// begin d := 1 ;
44103: LD_ADDR_VAR 0 9
44107: PUSH
44108: LD_INT 1
44110: ST_TO_ADDR
// if i_from > i_to then
44111: LD_VAR 0 2
44115: PUSH
44116: LD_VAR 0 3
44120: GREATER
44121: IFFALSE 44147
// length := ( array - i_from ) + i_to else
44123: LD_ADDR_VAR 0 11
44127: PUSH
44128: LD_VAR 0 1
44132: PUSH
44133: LD_VAR 0 2
44137: MINUS
44138: PUSH
44139: LD_VAR 0 3
44143: PLUS
44144: ST_TO_ADDR
44145: GO 44163
// length := i_to - i_from ;
44147: LD_ADDR_VAR 0 11
44151: PUSH
44152: LD_VAR 0 3
44156: PUSH
44157: LD_VAR 0 2
44161: MINUS
44162: ST_TO_ADDR
// end else
44163: GO 44226
// begin d := - 1 ;
44165: LD_ADDR_VAR 0 9
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: ST_TO_ADDR
// if i_from > i_to then
44174: LD_VAR 0 2
44178: PUSH
44179: LD_VAR 0 3
44183: GREATER
44184: IFFALSE 44204
// length := i_from - i_to else
44186: LD_ADDR_VAR 0 11
44190: PUSH
44191: LD_VAR 0 2
44195: PUSH
44196: LD_VAR 0 3
44200: MINUS
44201: ST_TO_ADDR
44202: GO 44226
// length := ( array - i_to ) + i_from ;
44204: LD_ADDR_VAR 0 11
44208: PUSH
44209: LD_VAR 0 1
44213: PUSH
44214: LD_VAR 0 3
44218: MINUS
44219: PUSH
44220: LD_VAR 0 2
44224: PLUS
44225: ST_TO_ADDR
// end ; if not length then
44226: LD_VAR 0 11
44230: NOT
44231: IFFALSE 44235
// exit ;
44233: GO 44393
// tmp := array ;
44235: LD_ADDR_VAR 0 10
44239: PUSH
44240: LD_VAR 0 1
44244: ST_TO_ADDR
// for i = 1 to length do
44245: LD_ADDR_VAR 0 6
44249: PUSH
44250: DOUBLE
44251: LD_INT 1
44253: DEC
44254: ST_TO_ADDR
44255: LD_VAR 0 11
44259: PUSH
44260: FOR_TO
44261: IFFALSE 44381
// begin for j = 1 to array do
44263: LD_ADDR_VAR 0 7
44267: PUSH
44268: DOUBLE
44269: LD_INT 1
44271: DEC
44272: ST_TO_ADDR
44273: LD_VAR 0 1
44277: PUSH
44278: FOR_TO
44279: IFFALSE 44367
// begin k := j + d ;
44281: LD_ADDR_VAR 0 8
44285: PUSH
44286: LD_VAR 0 7
44290: PUSH
44291: LD_VAR 0 9
44295: PLUS
44296: ST_TO_ADDR
// if k > array then
44297: LD_VAR 0 8
44301: PUSH
44302: LD_VAR 0 1
44306: GREATER
44307: IFFALSE 44317
// k := 1 ;
44309: LD_ADDR_VAR 0 8
44313: PUSH
44314: LD_INT 1
44316: ST_TO_ADDR
// if not k then
44317: LD_VAR 0 8
44321: NOT
44322: IFFALSE 44334
// k := array ;
44324: LD_ADDR_VAR 0 8
44328: PUSH
44329: LD_VAR 0 1
44333: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44334: LD_ADDR_VAR 0 10
44338: PUSH
44339: LD_VAR 0 10
44343: PPUSH
44344: LD_VAR 0 8
44348: PPUSH
44349: LD_VAR 0 1
44353: PUSH
44354: LD_VAR 0 7
44358: ARRAY
44359: PPUSH
44360: CALL_OW 1
44364: ST_TO_ADDR
// end ;
44365: GO 44278
44367: POP
44368: POP
// array := tmp ;
44369: LD_ADDR_VAR 0 1
44373: PUSH
44374: LD_VAR 0 10
44378: ST_TO_ADDR
// end ;
44379: GO 44260
44381: POP
44382: POP
// result := array ;
44383: LD_ADDR_VAR 0 5
44387: PUSH
44388: LD_VAR 0 1
44392: ST_TO_ADDR
// end ;
44393: LD_VAR 0 5
44397: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44398: LD_INT 0
44400: PPUSH
44401: PPUSH
// result := 0 ;
44402: LD_ADDR_VAR 0 3
44406: PUSH
44407: LD_INT 0
44409: ST_TO_ADDR
// if not array or not value in array then
44410: LD_VAR 0 1
44414: NOT
44415: PUSH
44416: LD_VAR 0 2
44420: PUSH
44421: LD_VAR 0 1
44425: IN
44426: NOT
44427: OR
44428: IFFALSE 44432
// exit ;
44430: GO 44486
// for i = 1 to array do
44432: LD_ADDR_VAR 0 4
44436: PUSH
44437: DOUBLE
44438: LD_INT 1
44440: DEC
44441: ST_TO_ADDR
44442: LD_VAR 0 1
44446: PUSH
44447: FOR_TO
44448: IFFALSE 44484
// if value = array [ i ] then
44450: LD_VAR 0 2
44454: PUSH
44455: LD_VAR 0 1
44459: PUSH
44460: LD_VAR 0 4
44464: ARRAY
44465: EQUAL
44466: IFFALSE 44482
// begin result := i ;
44468: LD_ADDR_VAR 0 3
44472: PUSH
44473: LD_VAR 0 4
44477: ST_TO_ADDR
// exit ;
44478: POP
44479: POP
44480: GO 44486
// end ;
44482: GO 44447
44484: POP
44485: POP
// end ;
44486: LD_VAR 0 3
44490: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44491: LD_INT 0
44493: PPUSH
// vc_chassis := chassis ;
44494: LD_ADDR_OWVAR 37
44498: PUSH
44499: LD_VAR 0 1
44503: ST_TO_ADDR
// vc_engine := engine ;
44504: LD_ADDR_OWVAR 39
44508: PUSH
44509: LD_VAR 0 2
44513: ST_TO_ADDR
// vc_control := control ;
44514: LD_ADDR_OWVAR 38
44518: PUSH
44519: LD_VAR 0 3
44523: ST_TO_ADDR
// vc_weapon := weapon ;
44524: LD_ADDR_OWVAR 40
44528: PUSH
44529: LD_VAR 0 4
44533: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44534: LD_ADDR_OWVAR 41
44538: PUSH
44539: LD_VAR 0 5
44543: ST_TO_ADDR
// end ;
44544: LD_VAR 0 6
44548: RET
// export function WantPlant ( unit ) ; var task ; begin
44549: LD_INT 0
44551: PPUSH
44552: PPUSH
// result := false ;
44553: LD_ADDR_VAR 0 2
44557: PUSH
44558: LD_INT 0
44560: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44561: LD_ADDR_VAR 0 3
44565: PUSH
44566: LD_VAR 0 1
44570: PPUSH
44571: CALL_OW 437
44575: ST_TO_ADDR
// if task then
44576: LD_VAR 0 3
44580: IFFALSE 44608
// if task [ 1 ] [ 1 ] = p then
44582: LD_VAR 0 3
44586: PUSH
44587: LD_INT 1
44589: ARRAY
44590: PUSH
44591: LD_INT 1
44593: ARRAY
44594: PUSH
44595: LD_STRING p
44597: EQUAL
44598: IFFALSE 44608
// result := true ;
44600: LD_ADDR_VAR 0 2
44604: PUSH
44605: LD_INT 1
44607: ST_TO_ADDR
// end ;
44608: LD_VAR 0 2
44612: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44613: LD_INT 0
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
// if pos < 1 then
44619: LD_VAR 0 2
44623: PUSH
44624: LD_INT 1
44626: LESS
44627: IFFALSE 44631
// exit ;
44629: GO 44934
// if pos = 1 then
44631: LD_VAR 0 2
44635: PUSH
44636: LD_INT 1
44638: EQUAL
44639: IFFALSE 44672
// result := Replace ( arr , pos [ 1 ] , value ) else
44641: LD_ADDR_VAR 0 4
44645: PUSH
44646: LD_VAR 0 1
44650: PPUSH
44651: LD_VAR 0 2
44655: PUSH
44656: LD_INT 1
44658: ARRAY
44659: PPUSH
44660: LD_VAR 0 3
44664: PPUSH
44665: CALL_OW 1
44669: ST_TO_ADDR
44670: GO 44934
// begin tmp := arr ;
44672: LD_ADDR_VAR 0 6
44676: PUSH
44677: LD_VAR 0 1
44681: ST_TO_ADDR
// s_arr := [ tmp ] ;
44682: LD_ADDR_VAR 0 7
44686: PUSH
44687: LD_VAR 0 6
44691: PUSH
44692: EMPTY
44693: LIST
44694: ST_TO_ADDR
// for i = 1 to pos - 1 do
44695: LD_ADDR_VAR 0 5
44699: PUSH
44700: DOUBLE
44701: LD_INT 1
44703: DEC
44704: ST_TO_ADDR
44705: LD_VAR 0 2
44709: PUSH
44710: LD_INT 1
44712: MINUS
44713: PUSH
44714: FOR_TO
44715: IFFALSE 44760
// begin tmp := tmp [ pos [ i ] ] ;
44717: LD_ADDR_VAR 0 6
44721: PUSH
44722: LD_VAR 0 6
44726: PUSH
44727: LD_VAR 0 2
44731: PUSH
44732: LD_VAR 0 5
44736: ARRAY
44737: ARRAY
44738: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44739: LD_ADDR_VAR 0 7
44743: PUSH
44744: LD_VAR 0 7
44748: PUSH
44749: LD_VAR 0 6
44753: PUSH
44754: EMPTY
44755: LIST
44756: ADD
44757: ST_TO_ADDR
// end ;
44758: GO 44714
44760: POP
44761: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44762: LD_ADDR_VAR 0 6
44766: PUSH
44767: LD_VAR 0 6
44771: PPUSH
44772: LD_VAR 0 2
44776: PUSH
44777: LD_VAR 0 2
44781: ARRAY
44782: PPUSH
44783: LD_VAR 0 3
44787: PPUSH
44788: CALL_OW 1
44792: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44793: LD_ADDR_VAR 0 7
44797: PUSH
44798: LD_VAR 0 7
44802: PPUSH
44803: LD_VAR 0 7
44807: PPUSH
44808: LD_VAR 0 6
44812: PPUSH
44813: CALL_OW 1
44817: ST_TO_ADDR
// for i = s_arr downto 2 do
44818: LD_ADDR_VAR 0 5
44822: PUSH
44823: DOUBLE
44824: LD_VAR 0 7
44828: INC
44829: ST_TO_ADDR
44830: LD_INT 2
44832: PUSH
44833: FOR_DOWNTO
44834: IFFALSE 44918
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44836: LD_ADDR_VAR 0 6
44840: PUSH
44841: LD_VAR 0 7
44845: PUSH
44846: LD_VAR 0 5
44850: PUSH
44851: LD_INT 1
44853: MINUS
44854: ARRAY
44855: PPUSH
44856: LD_VAR 0 2
44860: PUSH
44861: LD_VAR 0 5
44865: PUSH
44866: LD_INT 1
44868: MINUS
44869: ARRAY
44870: PPUSH
44871: LD_VAR 0 7
44875: PUSH
44876: LD_VAR 0 5
44880: ARRAY
44881: PPUSH
44882: CALL_OW 1
44886: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44887: LD_ADDR_VAR 0 7
44891: PUSH
44892: LD_VAR 0 7
44896: PPUSH
44897: LD_VAR 0 5
44901: PUSH
44902: LD_INT 1
44904: MINUS
44905: PPUSH
44906: LD_VAR 0 6
44910: PPUSH
44911: CALL_OW 1
44915: ST_TO_ADDR
// end ;
44916: GO 44833
44918: POP
44919: POP
// result := s_arr [ 1 ] ;
44920: LD_ADDR_VAR 0 4
44924: PUSH
44925: LD_VAR 0 7
44929: PUSH
44930: LD_INT 1
44932: ARRAY
44933: ST_TO_ADDR
// end ; end ;
44934: LD_VAR 0 4
44938: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44939: LD_INT 0
44941: PPUSH
44942: PPUSH
// if not list then
44943: LD_VAR 0 1
44947: NOT
44948: IFFALSE 44952
// exit ;
44950: GO 45043
// i := list [ pos1 ] ;
44952: LD_ADDR_VAR 0 5
44956: PUSH
44957: LD_VAR 0 1
44961: PUSH
44962: LD_VAR 0 2
44966: ARRAY
44967: ST_TO_ADDR
// if not i then
44968: LD_VAR 0 5
44972: NOT
44973: IFFALSE 44977
// exit ;
44975: GO 45043
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44977: LD_ADDR_VAR 0 1
44981: PUSH
44982: LD_VAR 0 1
44986: PPUSH
44987: LD_VAR 0 2
44991: PPUSH
44992: LD_VAR 0 1
44996: PUSH
44997: LD_VAR 0 3
45001: ARRAY
45002: PPUSH
45003: CALL_OW 1
45007: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45008: LD_ADDR_VAR 0 1
45012: PUSH
45013: LD_VAR 0 1
45017: PPUSH
45018: LD_VAR 0 3
45022: PPUSH
45023: LD_VAR 0 5
45027: PPUSH
45028: CALL_OW 1
45032: ST_TO_ADDR
// result := list ;
45033: LD_ADDR_VAR 0 4
45037: PUSH
45038: LD_VAR 0 1
45042: ST_TO_ADDR
// end ;
45043: LD_VAR 0 4
45047: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45048: LD_INT 0
45050: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45051: LD_ADDR_VAR 0 5
45055: PUSH
45056: LD_VAR 0 1
45060: PPUSH
45061: CALL_OW 250
45065: PPUSH
45066: LD_VAR 0 1
45070: PPUSH
45071: CALL_OW 251
45075: PPUSH
45076: LD_VAR 0 2
45080: PPUSH
45081: LD_VAR 0 3
45085: PPUSH
45086: LD_VAR 0 4
45090: PPUSH
45091: CALL 45101 0 5
45095: ST_TO_ADDR
// end ;
45096: LD_VAR 0 5
45100: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45101: LD_INT 0
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
// if not list then
45107: LD_VAR 0 3
45111: NOT
45112: IFFALSE 45116
// exit ;
45114: GO 45504
// result := [ ] ;
45116: LD_ADDR_VAR 0 6
45120: PUSH
45121: EMPTY
45122: ST_TO_ADDR
// for i in list do
45123: LD_ADDR_VAR 0 7
45127: PUSH
45128: LD_VAR 0 3
45132: PUSH
45133: FOR_IN
45134: IFFALSE 45336
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45136: LD_ADDR_VAR 0 9
45140: PUSH
45141: LD_VAR 0 7
45145: PPUSH
45146: LD_VAR 0 1
45150: PPUSH
45151: LD_VAR 0 2
45155: PPUSH
45156: CALL_OW 297
45160: ST_TO_ADDR
// if not result then
45161: LD_VAR 0 6
45165: NOT
45166: IFFALSE 45192
// result := [ [ i , tmp ] ] else
45168: LD_ADDR_VAR 0 6
45172: PUSH
45173: LD_VAR 0 7
45177: PUSH
45178: LD_VAR 0 9
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: EMPTY
45188: LIST
45189: ST_TO_ADDR
45190: GO 45334
// begin if result [ result ] [ 2 ] < tmp then
45192: LD_VAR 0 6
45196: PUSH
45197: LD_VAR 0 6
45201: ARRAY
45202: PUSH
45203: LD_INT 2
45205: ARRAY
45206: PUSH
45207: LD_VAR 0 9
45211: LESS
45212: IFFALSE 45254
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45214: LD_ADDR_VAR 0 6
45218: PUSH
45219: LD_VAR 0 6
45223: PPUSH
45224: LD_VAR 0 6
45228: PUSH
45229: LD_INT 1
45231: PLUS
45232: PPUSH
45233: LD_VAR 0 7
45237: PUSH
45238: LD_VAR 0 9
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PPUSH
45247: CALL_OW 2
45251: ST_TO_ADDR
45252: GO 45334
// for j = 1 to result do
45254: LD_ADDR_VAR 0 8
45258: PUSH
45259: DOUBLE
45260: LD_INT 1
45262: DEC
45263: ST_TO_ADDR
45264: LD_VAR 0 6
45268: PUSH
45269: FOR_TO
45270: IFFALSE 45332
// begin if tmp < result [ j ] [ 2 ] then
45272: LD_VAR 0 9
45276: PUSH
45277: LD_VAR 0 6
45281: PUSH
45282: LD_VAR 0 8
45286: ARRAY
45287: PUSH
45288: LD_INT 2
45290: ARRAY
45291: LESS
45292: IFFALSE 45330
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45294: LD_ADDR_VAR 0 6
45298: PUSH
45299: LD_VAR 0 6
45303: PPUSH
45304: LD_VAR 0 8
45308: PPUSH
45309: LD_VAR 0 7
45313: PUSH
45314: LD_VAR 0 9
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PPUSH
45323: CALL_OW 2
45327: ST_TO_ADDR
// break ;
45328: GO 45332
// end ; end ;
45330: GO 45269
45332: POP
45333: POP
// end ; end ;
45334: GO 45133
45336: POP
45337: POP
// if result and not asc then
45338: LD_VAR 0 6
45342: PUSH
45343: LD_VAR 0 4
45347: NOT
45348: AND
45349: IFFALSE 45424
// begin tmp := result ;
45351: LD_ADDR_VAR 0 9
45355: PUSH
45356: LD_VAR 0 6
45360: ST_TO_ADDR
// for i = tmp downto 1 do
45361: LD_ADDR_VAR 0 7
45365: PUSH
45366: DOUBLE
45367: LD_VAR 0 9
45371: INC
45372: ST_TO_ADDR
45373: LD_INT 1
45375: PUSH
45376: FOR_DOWNTO
45377: IFFALSE 45422
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45379: LD_ADDR_VAR 0 6
45383: PUSH
45384: LD_VAR 0 6
45388: PPUSH
45389: LD_VAR 0 9
45393: PUSH
45394: LD_VAR 0 7
45398: MINUS
45399: PUSH
45400: LD_INT 1
45402: PLUS
45403: PPUSH
45404: LD_VAR 0 9
45408: PUSH
45409: LD_VAR 0 7
45413: ARRAY
45414: PPUSH
45415: CALL_OW 1
45419: ST_TO_ADDR
45420: GO 45376
45422: POP
45423: POP
// end ; tmp := [ ] ;
45424: LD_ADDR_VAR 0 9
45428: PUSH
45429: EMPTY
45430: ST_TO_ADDR
// if mode then
45431: LD_VAR 0 5
45435: IFFALSE 45504
// begin for i = 1 to result do
45437: LD_ADDR_VAR 0 7
45441: PUSH
45442: DOUBLE
45443: LD_INT 1
45445: DEC
45446: ST_TO_ADDR
45447: LD_VAR 0 6
45451: PUSH
45452: FOR_TO
45453: IFFALSE 45492
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45455: LD_ADDR_VAR 0 9
45459: PUSH
45460: LD_VAR 0 9
45464: PPUSH
45465: LD_VAR 0 7
45469: PPUSH
45470: LD_VAR 0 6
45474: PUSH
45475: LD_VAR 0 7
45479: ARRAY
45480: PUSH
45481: LD_INT 1
45483: ARRAY
45484: PPUSH
45485: CALL_OW 1
45489: ST_TO_ADDR
45490: GO 45452
45492: POP
45493: POP
// result := tmp ;
45494: LD_ADDR_VAR 0 6
45498: PUSH
45499: LD_VAR 0 9
45503: ST_TO_ADDR
// end ; end ;
45504: LD_VAR 0 6
45508: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45509: LD_INT 0
45511: PPUSH
45512: PPUSH
45513: PPUSH
45514: PPUSH
45515: PPUSH
45516: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45517: LD_ADDR_VAR 0 5
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: ST_TO_ADDR
// if not x or not y then
45539: LD_VAR 0 2
45543: NOT
45544: PUSH
45545: LD_VAR 0 3
45549: NOT
45550: OR
45551: IFFALSE 45555
// exit ;
45553: GO 47205
// if not range then
45555: LD_VAR 0 4
45559: NOT
45560: IFFALSE 45570
// range := 10 ;
45562: LD_ADDR_VAR 0 4
45566: PUSH
45567: LD_INT 10
45569: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45570: LD_ADDR_VAR 0 8
45574: PUSH
45575: LD_INT 81
45577: PUSH
45578: LD_VAR 0 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 92
45589: PUSH
45590: LD_VAR 0 2
45594: PUSH
45595: LD_VAR 0 3
45599: PUSH
45600: LD_VAR 0 4
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 3
45613: PUSH
45614: LD_INT 21
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: PPUSH
45633: CALL_OW 69
45637: ST_TO_ADDR
// if not tmp then
45638: LD_VAR 0 8
45642: NOT
45643: IFFALSE 45647
// exit ;
45645: GO 47205
// for i in tmp do
45647: LD_ADDR_VAR 0 6
45651: PUSH
45652: LD_VAR 0 8
45656: PUSH
45657: FOR_IN
45658: IFFALSE 47180
// begin points := [ 0 , 0 , 0 ] ;
45660: LD_ADDR_VAR 0 9
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
// bpoints := 1 ;
45679: LD_ADDR_VAR 0 10
45683: PUSH
45684: LD_INT 1
45686: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45687: LD_VAR 0 6
45691: PPUSH
45692: CALL_OW 247
45696: PUSH
45697: LD_INT 1
45699: DOUBLE
45700: EQUAL
45701: IFTRUE 45705
45703: GO 46283
45705: POP
// begin if GetClass ( i ) = 1 then
45706: LD_VAR 0 6
45710: PPUSH
45711: CALL_OW 257
45715: PUSH
45716: LD_INT 1
45718: EQUAL
45719: IFFALSE 45740
// points := [ 10 , 5 , 3 ] ;
45721: LD_ADDR_VAR 0 9
45725: PUSH
45726: LD_INT 10
45728: PUSH
45729: LD_INT 5
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45740: LD_VAR 0 6
45744: PPUSH
45745: CALL_OW 257
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: LD_INT 3
45755: PUSH
45756: LD_INT 4
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: IN
45764: IFFALSE 45785
// points := [ 3 , 2 , 1 ] ;
45766: LD_ADDR_VAR 0 9
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45785: LD_VAR 0 6
45789: PPUSH
45790: CALL_OW 257
45794: PUSH
45795: LD_INT 5
45797: EQUAL
45798: IFFALSE 45819
// points := [ 130 , 5 , 2 ] ;
45800: LD_ADDR_VAR 0 9
45804: PUSH
45805: LD_INT 130
45807: PUSH
45808: LD_INT 5
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45819: LD_VAR 0 6
45823: PPUSH
45824: CALL_OW 257
45828: PUSH
45829: LD_INT 8
45831: EQUAL
45832: IFFALSE 45853
// points := [ 35 , 35 , 30 ] ;
45834: LD_ADDR_VAR 0 9
45838: PUSH
45839: LD_INT 35
45841: PUSH
45842: LD_INT 35
45844: PUSH
45845: LD_INT 30
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45853: LD_VAR 0 6
45857: PPUSH
45858: CALL_OW 257
45862: PUSH
45863: LD_INT 9
45865: EQUAL
45866: IFFALSE 45887
// points := [ 20 , 55 , 40 ] ;
45868: LD_ADDR_VAR 0 9
45872: PUSH
45873: LD_INT 20
45875: PUSH
45876: LD_INT 55
45878: PUSH
45879: LD_INT 40
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45887: LD_VAR 0 6
45891: PPUSH
45892: CALL_OW 257
45896: PUSH
45897: LD_INT 12
45899: PUSH
45900: LD_INT 16
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: IN
45907: IFFALSE 45928
// points := [ 5 , 3 , 2 ] ;
45909: LD_ADDR_VAR 0 9
45913: PUSH
45914: LD_INT 5
45916: PUSH
45917: LD_INT 3
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: LIST
45927: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45928: LD_VAR 0 6
45932: PPUSH
45933: CALL_OW 257
45937: PUSH
45938: LD_INT 17
45940: EQUAL
45941: IFFALSE 45962
// points := [ 100 , 50 , 75 ] ;
45943: LD_ADDR_VAR 0 9
45947: PUSH
45948: LD_INT 100
45950: PUSH
45951: LD_INT 50
45953: PUSH
45954: LD_INT 75
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: LIST
45961: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45962: LD_VAR 0 6
45966: PPUSH
45967: CALL_OW 257
45971: PUSH
45972: LD_INT 15
45974: EQUAL
45975: IFFALSE 45996
// points := [ 10 , 5 , 3 ] ;
45977: LD_ADDR_VAR 0 9
45981: PUSH
45982: LD_INT 10
45984: PUSH
45985: LD_INT 5
45987: PUSH
45988: LD_INT 3
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45996: LD_VAR 0 6
46000: PPUSH
46001: CALL_OW 257
46005: PUSH
46006: LD_INT 14
46008: EQUAL
46009: IFFALSE 46030
// points := [ 10 , 0 , 0 ] ;
46011: LD_ADDR_VAR 0 9
46015: PUSH
46016: LD_INT 10
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46030: LD_VAR 0 6
46034: PPUSH
46035: CALL_OW 257
46039: PUSH
46040: LD_INT 11
46042: EQUAL
46043: IFFALSE 46064
// points := [ 30 , 10 , 5 ] ;
46045: LD_ADDR_VAR 0 9
46049: PUSH
46050: LD_INT 30
46052: PUSH
46053: LD_INT 10
46055: PUSH
46056: LD_INT 5
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46064: LD_VAR 0 1
46068: PPUSH
46069: LD_INT 5
46071: PPUSH
46072: CALL_OW 321
46076: PUSH
46077: LD_INT 2
46079: EQUAL
46080: IFFALSE 46097
// bpoints := bpoints * 1.8 ;
46082: LD_ADDR_VAR 0 10
46086: PUSH
46087: LD_VAR 0 10
46091: PUSH
46092: LD_REAL  1.80000000000000E+0000
46095: MUL
46096: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46097: LD_VAR 0 6
46101: PPUSH
46102: CALL_OW 257
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: LD_INT 4
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: IN
46125: PUSH
46126: LD_VAR 0 1
46130: PPUSH
46131: LD_INT 51
46133: PPUSH
46134: CALL_OW 321
46138: PUSH
46139: LD_INT 2
46141: EQUAL
46142: AND
46143: IFFALSE 46160
// bpoints := bpoints * 1.2 ;
46145: LD_ADDR_VAR 0 10
46149: PUSH
46150: LD_VAR 0 10
46154: PUSH
46155: LD_REAL  1.20000000000000E+0000
46158: MUL
46159: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46160: LD_VAR 0 6
46164: PPUSH
46165: CALL_OW 257
46169: PUSH
46170: LD_INT 5
46172: PUSH
46173: LD_INT 7
46175: PUSH
46176: LD_INT 9
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: IN
46184: PUSH
46185: LD_VAR 0 1
46189: PPUSH
46190: LD_INT 52
46192: PPUSH
46193: CALL_OW 321
46197: PUSH
46198: LD_INT 2
46200: EQUAL
46201: AND
46202: IFFALSE 46219
// bpoints := bpoints * 1.5 ;
46204: LD_ADDR_VAR 0 10
46208: PUSH
46209: LD_VAR 0 10
46213: PUSH
46214: LD_REAL  1.50000000000000E+0000
46217: MUL
46218: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46219: LD_VAR 0 1
46223: PPUSH
46224: LD_INT 66
46226: PPUSH
46227: CALL_OW 321
46231: PUSH
46232: LD_INT 2
46234: EQUAL
46235: IFFALSE 46252
// bpoints := bpoints * 1.1 ;
46237: LD_ADDR_VAR 0 10
46241: PUSH
46242: LD_VAR 0 10
46246: PUSH
46247: LD_REAL  1.10000000000000E+0000
46250: MUL
46251: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46252: LD_ADDR_VAR 0 10
46256: PUSH
46257: LD_VAR 0 10
46261: PUSH
46262: LD_VAR 0 6
46266: PPUSH
46267: LD_INT 1
46269: PPUSH
46270: CALL_OW 259
46274: PUSH
46275: LD_REAL  1.15000000000000E+0000
46278: MUL
46279: MUL
46280: ST_TO_ADDR
// end ; unit_vehicle :
46281: GO 47109
46283: LD_INT 2
46285: DOUBLE
46286: EQUAL
46287: IFTRUE 46291
46289: GO 47097
46291: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46292: LD_VAR 0 6
46296: PPUSH
46297: CALL_OW 264
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 42
46307: PUSH
46308: LD_INT 24
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: LIST
46315: IN
46316: IFFALSE 46337
// points := [ 25 , 5 , 3 ] ;
46318: LD_ADDR_VAR 0 9
46322: PUSH
46323: LD_INT 25
46325: PUSH
46326: LD_INT 5
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: LIST
46336: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46337: LD_VAR 0 6
46341: PPUSH
46342: CALL_OW 264
46346: PUSH
46347: LD_INT 4
46349: PUSH
46350: LD_INT 43
46352: PUSH
46353: LD_INT 25
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: IN
46361: IFFALSE 46382
// points := [ 40 , 15 , 5 ] ;
46363: LD_ADDR_VAR 0 9
46367: PUSH
46368: LD_INT 40
46370: PUSH
46371: LD_INT 15
46373: PUSH
46374: LD_INT 5
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46382: LD_VAR 0 6
46386: PPUSH
46387: CALL_OW 264
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: LD_INT 23
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: IN
46402: IFFALSE 46423
// points := [ 7 , 25 , 8 ] ;
46404: LD_ADDR_VAR 0 9
46408: PUSH
46409: LD_INT 7
46411: PUSH
46412: LD_INT 25
46414: PUSH
46415: LD_INT 8
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46423: LD_VAR 0 6
46427: PPUSH
46428: CALL_OW 264
46432: PUSH
46433: LD_INT 5
46435: PUSH
46436: LD_INT 27
46438: PUSH
46439: LD_INT 44
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: IN
46447: IFFALSE 46468
// points := [ 14 , 50 , 16 ] ;
46449: LD_ADDR_VAR 0 9
46453: PUSH
46454: LD_INT 14
46456: PUSH
46457: LD_INT 50
46459: PUSH
46460: LD_INT 16
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46468: LD_VAR 0 6
46472: PPUSH
46473: CALL_OW 264
46477: PUSH
46478: LD_INT 6
46480: PUSH
46481: LD_INT 46
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: IN
46488: IFFALSE 46509
// points := [ 32 , 120 , 70 ] ;
46490: LD_ADDR_VAR 0 9
46494: PUSH
46495: LD_INT 32
46497: PUSH
46498: LD_INT 120
46500: PUSH
46501: LD_INT 70
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46509: LD_VAR 0 6
46513: PPUSH
46514: CALL_OW 264
46518: PUSH
46519: LD_INT 7
46521: PUSH
46522: LD_INT 28
46524: PUSH
46525: LD_INT 45
46527: PUSH
46528: LD_INT 92
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: IN
46537: IFFALSE 46558
// points := [ 35 , 20 , 45 ] ;
46539: LD_ADDR_VAR 0 9
46543: PUSH
46544: LD_INT 35
46546: PUSH
46547: LD_INT 20
46549: PUSH
46550: LD_INT 45
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: LIST
46557: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46558: LD_VAR 0 6
46562: PPUSH
46563: CALL_OW 264
46567: PUSH
46568: LD_INT 47
46570: PUSH
46571: EMPTY
46572: LIST
46573: IN
46574: IFFALSE 46595
// points := [ 67 , 45 , 75 ] ;
46576: LD_ADDR_VAR 0 9
46580: PUSH
46581: LD_INT 67
46583: PUSH
46584: LD_INT 45
46586: PUSH
46587: LD_INT 75
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46595: LD_VAR 0 6
46599: PPUSH
46600: CALL_OW 264
46604: PUSH
46605: LD_INT 26
46607: PUSH
46608: EMPTY
46609: LIST
46610: IN
46611: IFFALSE 46632
// points := [ 120 , 30 , 80 ] ;
46613: LD_ADDR_VAR 0 9
46617: PUSH
46618: LD_INT 120
46620: PUSH
46621: LD_INT 30
46623: PUSH
46624: LD_INT 80
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46632: LD_VAR 0 6
46636: PPUSH
46637: CALL_OW 264
46641: PUSH
46642: LD_INT 22
46644: PUSH
46645: EMPTY
46646: LIST
46647: IN
46648: IFFALSE 46669
// points := [ 40 , 1 , 1 ] ;
46650: LD_ADDR_VAR 0 9
46654: PUSH
46655: LD_INT 40
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46669: LD_VAR 0 6
46673: PPUSH
46674: CALL_OW 264
46678: PUSH
46679: LD_INT 29
46681: PUSH
46682: EMPTY
46683: LIST
46684: IN
46685: IFFALSE 46706
// points := [ 70 , 200 , 400 ] ;
46687: LD_ADDR_VAR 0 9
46691: PUSH
46692: LD_INT 70
46694: PUSH
46695: LD_INT 200
46697: PUSH
46698: LD_INT 400
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46706: LD_VAR 0 6
46710: PPUSH
46711: CALL_OW 264
46715: PUSH
46716: LD_INT 14
46718: PUSH
46719: LD_INT 53
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: IN
46726: IFFALSE 46747
// points := [ 40 , 10 , 20 ] ;
46728: LD_ADDR_VAR 0 9
46732: PUSH
46733: LD_INT 40
46735: PUSH
46736: LD_INT 10
46738: PUSH
46739: LD_INT 20
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46747: LD_VAR 0 6
46751: PPUSH
46752: CALL_OW 264
46756: PUSH
46757: LD_INT 9
46759: PUSH
46760: EMPTY
46761: LIST
46762: IN
46763: IFFALSE 46784
// points := [ 5 , 70 , 20 ] ;
46765: LD_ADDR_VAR 0 9
46769: PUSH
46770: LD_INT 5
46772: PUSH
46773: LD_INT 70
46775: PUSH
46776: LD_INT 20
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46784: LD_VAR 0 6
46788: PPUSH
46789: CALL_OW 264
46793: PUSH
46794: LD_INT 10
46796: PUSH
46797: EMPTY
46798: LIST
46799: IN
46800: IFFALSE 46821
// points := [ 35 , 110 , 70 ] ;
46802: LD_ADDR_VAR 0 9
46806: PUSH
46807: LD_INT 35
46809: PUSH
46810: LD_INT 110
46812: PUSH
46813: LD_INT 70
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46821: LD_VAR 0 6
46825: PPUSH
46826: CALL_OW 265
46830: PUSH
46831: LD_INT 25
46833: EQUAL
46834: IFFALSE 46855
// points := [ 80 , 65 , 100 ] ;
46836: LD_ADDR_VAR 0 9
46840: PUSH
46841: LD_INT 80
46843: PUSH
46844: LD_INT 65
46846: PUSH
46847: LD_INT 100
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: LIST
46854: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46855: LD_VAR 0 6
46859: PPUSH
46860: CALL_OW 263
46864: PUSH
46865: LD_INT 1
46867: EQUAL
46868: IFFALSE 46903
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46870: LD_ADDR_VAR 0 10
46874: PUSH
46875: LD_VAR 0 10
46879: PUSH
46880: LD_VAR 0 6
46884: PPUSH
46885: CALL_OW 311
46889: PPUSH
46890: LD_INT 3
46892: PPUSH
46893: CALL_OW 259
46897: PUSH
46898: LD_INT 4
46900: MUL
46901: MUL
46902: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46903: LD_VAR 0 6
46907: PPUSH
46908: CALL_OW 263
46912: PUSH
46913: LD_INT 2
46915: EQUAL
46916: IFFALSE 46967
// begin j := IsControledBy ( i ) ;
46918: LD_ADDR_VAR 0 7
46922: PUSH
46923: LD_VAR 0 6
46927: PPUSH
46928: CALL_OW 312
46932: ST_TO_ADDR
// if j then
46933: LD_VAR 0 7
46937: IFFALSE 46967
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46939: LD_ADDR_VAR 0 10
46943: PUSH
46944: LD_VAR 0 10
46948: PUSH
46949: LD_VAR 0 7
46953: PPUSH
46954: LD_INT 3
46956: PPUSH
46957: CALL_OW 259
46961: PUSH
46962: LD_INT 3
46964: MUL
46965: MUL
46966: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46967: LD_VAR 0 6
46971: PPUSH
46972: CALL_OW 264
46976: PUSH
46977: LD_INT 5
46979: PUSH
46980: LD_INT 6
46982: PUSH
46983: LD_INT 46
46985: PUSH
46986: LD_INT 44
46988: PUSH
46989: LD_INT 47
46991: PUSH
46992: LD_INT 45
46994: PUSH
46995: LD_INT 28
46997: PUSH
46998: LD_INT 7
47000: PUSH
47001: LD_INT 27
47003: PUSH
47004: LD_INT 29
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: IN
47019: PUSH
47020: LD_VAR 0 1
47024: PPUSH
47025: LD_INT 52
47027: PPUSH
47028: CALL_OW 321
47032: PUSH
47033: LD_INT 2
47035: EQUAL
47036: AND
47037: IFFALSE 47054
// bpoints := bpoints * 1.2 ;
47039: LD_ADDR_VAR 0 10
47043: PUSH
47044: LD_VAR 0 10
47048: PUSH
47049: LD_REAL  1.20000000000000E+0000
47052: MUL
47053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47054: LD_VAR 0 6
47058: PPUSH
47059: CALL_OW 264
47063: PUSH
47064: LD_INT 6
47066: PUSH
47067: LD_INT 46
47069: PUSH
47070: LD_INT 47
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: LIST
47077: IN
47078: IFFALSE 47095
// bpoints := bpoints * 1.2 ;
47080: LD_ADDR_VAR 0 10
47084: PUSH
47085: LD_VAR 0 10
47089: PUSH
47090: LD_REAL  1.20000000000000E+0000
47093: MUL
47094: ST_TO_ADDR
// end ; unit_building :
47095: GO 47109
47097: LD_INT 3
47099: DOUBLE
47100: EQUAL
47101: IFTRUE 47105
47103: GO 47108
47105: POP
// ; end ;
47106: GO 47109
47108: POP
// for j = 1 to 3 do
47109: LD_ADDR_VAR 0 7
47113: PUSH
47114: DOUBLE
47115: LD_INT 1
47117: DEC
47118: ST_TO_ADDR
47119: LD_INT 3
47121: PUSH
47122: FOR_TO
47123: IFFALSE 47176
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47125: LD_ADDR_VAR 0 5
47129: PUSH
47130: LD_VAR 0 5
47134: PPUSH
47135: LD_VAR 0 7
47139: PPUSH
47140: LD_VAR 0 5
47144: PUSH
47145: LD_VAR 0 7
47149: ARRAY
47150: PUSH
47151: LD_VAR 0 9
47155: PUSH
47156: LD_VAR 0 7
47160: ARRAY
47161: PUSH
47162: LD_VAR 0 10
47166: MUL
47167: PLUS
47168: PPUSH
47169: CALL_OW 1
47173: ST_TO_ADDR
47174: GO 47122
47176: POP
47177: POP
// end ;
47178: GO 45657
47180: POP
47181: POP
// result := Replace ( result , 4 , tmp ) ;
47182: LD_ADDR_VAR 0 5
47186: PUSH
47187: LD_VAR 0 5
47191: PPUSH
47192: LD_INT 4
47194: PPUSH
47195: LD_VAR 0 8
47199: PPUSH
47200: CALL_OW 1
47204: ST_TO_ADDR
// end ;
47205: LD_VAR 0 5
47209: RET
// export function DangerAtRange ( unit , range ) ; begin
47210: LD_INT 0
47212: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47213: LD_ADDR_VAR 0 3
47217: PUSH
47218: LD_VAR 0 1
47222: PPUSH
47223: CALL_OW 255
47227: PPUSH
47228: LD_VAR 0 1
47232: PPUSH
47233: CALL_OW 250
47237: PPUSH
47238: LD_VAR 0 1
47242: PPUSH
47243: CALL_OW 251
47247: PPUSH
47248: LD_VAR 0 2
47252: PPUSH
47253: CALL 45509 0 4
47257: ST_TO_ADDR
// end ;
47258: LD_VAR 0 3
47262: RET
// export function DangerInArea ( side , area ) ; begin
47263: LD_INT 0
47265: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47266: LD_ADDR_VAR 0 3
47270: PUSH
47271: LD_VAR 0 2
47275: PPUSH
47276: LD_INT 81
47278: PUSH
47279: LD_VAR 0 1
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PPUSH
47288: CALL_OW 70
47292: ST_TO_ADDR
// end ;
47293: LD_VAR 0 3
47297: RET
// export function IsExtension ( b ) ; begin
47298: LD_INT 0
47300: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47301: LD_ADDR_VAR 0 2
47305: PUSH
47306: LD_VAR 0 1
47310: PUSH
47311: LD_INT 23
47313: PUSH
47314: LD_INT 20
47316: PUSH
47317: LD_INT 22
47319: PUSH
47320: LD_INT 17
47322: PUSH
47323: LD_INT 24
47325: PUSH
47326: LD_INT 21
47328: PUSH
47329: LD_INT 19
47331: PUSH
47332: LD_INT 16
47334: PUSH
47335: LD_INT 25
47337: PUSH
47338: LD_INT 18
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: IN
47353: ST_TO_ADDR
// end ;
47354: LD_VAR 0 2
47358: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47359: LD_INT 0
47361: PPUSH
47362: PPUSH
47363: PPUSH
// result := [ ] ;
47364: LD_ADDR_VAR 0 4
47368: PUSH
47369: EMPTY
47370: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47371: LD_ADDR_VAR 0 5
47375: PUSH
47376: LD_VAR 0 2
47380: PPUSH
47381: LD_INT 21
47383: PUSH
47384: LD_INT 3
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PPUSH
47391: CALL_OW 70
47395: ST_TO_ADDR
// if not tmp then
47396: LD_VAR 0 5
47400: NOT
47401: IFFALSE 47405
// exit ;
47403: GO 47469
// if checkLink then
47405: LD_VAR 0 3
47409: IFFALSE 47459
// begin for i in tmp do
47411: LD_ADDR_VAR 0 6
47415: PUSH
47416: LD_VAR 0 5
47420: PUSH
47421: FOR_IN
47422: IFFALSE 47457
// if GetBase ( i ) <> base then
47424: LD_VAR 0 6
47428: PPUSH
47429: CALL_OW 274
47433: PUSH
47434: LD_VAR 0 1
47438: NONEQUAL
47439: IFFALSE 47455
// ComLinkToBase ( base , i ) ;
47441: LD_VAR 0 1
47445: PPUSH
47446: LD_VAR 0 6
47450: PPUSH
47451: CALL_OW 169
47455: GO 47421
47457: POP
47458: POP
// end ; result := tmp ;
47459: LD_ADDR_VAR 0 4
47463: PUSH
47464: LD_VAR 0 5
47468: ST_TO_ADDR
// end ;
47469: LD_VAR 0 4
47473: RET
// export function ComComplete ( units , b ) ; var i ; begin
47474: LD_INT 0
47476: PPUSH
47477: PPUSH
// if not units then
47478: LD_VAR 0 1
47482: NOT
47483: IFFALSE 47487
// exit ;
47485: GO 47577
// for i in units do
47487: LD_ADDR_VAR 0 4
47491: PUSH
47492: LD_VAR 0 1
47496: PUSH
47497: FOR_IN
47498: IFFALSE 47575
// if BuildingStatus ( b ) = bs_build then
47500: LD_VAR 0 2
47504: PPUSH
47505: CALL_OW 461
47509: PUSH
47510: LD_INT 1
47512: EQUAL
47513: IFFALSE 47573
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47515: LD_VAR 0 4
47519: PPUSH
47520: LD_STRING h
47522: PUSH
47523: LD_VAR 0 2
47527: PPUSH
47528: CALL_OW 250
47532: PUSH
47533: LD_VAR 0 2
47537: PPUSH
47538: CALL_OW 251
47542: PUSH
47543: LD_VAR 0 2
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: PUSH
47566: EMPTY
47567: LIST
47568: PPUSH
47569: CALL_OW 446
47573: GO 47497
47575: POP
47576: POP
// end ;
47577: LD_VAR 0 3
47581: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47582: LD_INT 0
47584: PPUSH
47585: PPUSH
47586: PPUSH
47587: PPUSH
47588: PPUSH
47589: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47590: LD_VAR 0 1
47594: NOT
47595: PUSH
47596: LD_VAR 0 1
47600: PPUSH
47601: CALL_OW 263
47605: PUSH
47606: LD_INT 2
47608: NONEQUAL
47609: OR
47610: IFFALSE 47614
// exit ;
47612: GO 47930
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47614: LD_ADDR_VAR 0 6
47618: PUSH
47619: LD_INT 22
47621: PUSH
47622: LD_VAR 0 1
47626: PPUSH
47627: CALL_OW 255
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: LD_INT 30
47641: PUSH
47642: LD_INT 36
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 34
47651: PUSH
47652: LD_INT 31
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PPUSH
47668: CALL_OW 69
47672: ST_TO_ADDR
// if not tmp then
47673: LD_VAR 0 6
47677: NOT
47678: IFFALSE 47682
// exit ;
47680: GO 47930
// result := [ ] ;
47682: LD_ADDR_VAR 0 2
47686: PUSH
47687: EMPTY
47688: ST_TO_ADDR
// for i in tmp do
47689: LD_ADDR_VAR 0 3
47693: PUSH
47694: LD_VAR 0 6
47698: PUSH
47699: FOR_IN
47700: IFFALSE 47771
// begin t := UnitsInside ( i ) ;
47702: LD_ADDR_VAR 0 4
47706: PUSH
47707: LD_VAR 0 3
47711: PPUSH
47712: CALL_OW 313
47716: ST_TO_ADDR
// if t then
47717: LD_VAR 0 4
47721: IFFALSE 47769
// for j in t do
47723: LD_ADDR_VAR 0 7
47727: PUSH
47728: LD_VAR 0 4
47732: PUSH
47733: FOR_IN
47734: IFFALSE 47767
// result := Replace ( result , result + 1 , j ) ;
47736: LD_ADDR_VAR 0 2
47740: PUSH
47741: LD_VAR 0 2
47745: PPUSH
47746: LD_VAR 0 2
47750: PUSH
47751: LD_INT 1
47753: PLUS
47754: PPUSH
47755: LD_VAR 0 7
47759: PPUSH
47760: CALL_OW 1
47764: ST_TO_ADDR
47765: GO 47733
47767: POP
47768: POP
// end ;
47769: GO 47699
47771: POP
47772: POP
// if not result then
47773: LD_VAR 0 2
47777: NOT
47778: IFFALSE 47782
// exit ;
47780: GO 47930
// mech := result [ 1 ] ;
47782: LD_ADDR_VAR 0 5
47786: PUSH
47787: LD_VAR 0 2
47791: PUSH
47792: LD_INT 1
47794: ARRAY
47795: ST_TO_ADDR
// if result > 1 then
47796: LD_VAR 0 2
47800: PUSH
47801: LD_INT 1
47803: GREATER
47804: IFFALSE 47916
// begin for i = 2 to result do
47806: LD_ADDR_VAR 0 3
47810: PUSH
47811: DOUBLE
47812: LD_INT 2
47814: DEC
47815: ST_TO_ADDR
47816: LD_VAR 0 2
47820: PUSH
47821: FOR_TO
47822: IFFALSE 47914
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47824: LD_ADDR_VAR 0 4
47828: PUSH
47829: LD_VAR 0 2
47833: PUSH
47834: LD_VAR 0 3
47838: ARRAY
47839: PPUSH
47840: LD_INT 3
47842: PPUSH
47843: CALL_OW 259
47847: PUSH
47848: LD_VAR 0 2
47852: PUSH
47853: LD_VAR 0 3
47857: ARRAY
47858: PPUSH
47859: CALL_OW 432
47863: MINUS
47864: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47865: LD_VAR 0 4
47869: PUSH
47870: LD_VAR 0 5
47874: PPUSH
47875: LD_INT 3
47877: PPUSH
47878: CALL_OW 259
47882: PUSH
47883: LD_VAR 0 5
47887: PPUSH
47888: CALL_OW 432
47892: MINUS
47893: GREATEREQUAL
47894: IFFALSE 47912
// mech := result [ i ] ;
47896: LD_ADDR_VAR 0 5
47900: PUSH
47901: LD_VAR 0 2
47905: PUSH
47906: LD_VAR 0 3
47910: ARRAY
47911: ST_TO_ADDR
// end ;
47912: GO 47821
47914: POP
47915: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47916: LD_VAR 0 1
47920: PPUSH
47921: LD_VAR 0 5
47925: PPUSH
47926: CALL_OW 135
// end ;
47930: LD_VAR 0 2
47934: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47935: LD_INT 0
47937: PPUSH
47938: PPUSH
47939: PPUSH
47940: PPUSH
47941: PPUSH
47942: PPUSH
47943: PPUSH
47944: PPUSH
47945: PPUSH
47946: PPUSH
47947: PPUSH
47948: PPUSH
47949: PPUSH
// result := [ ] ;
47950: LD_ADDR_VAR 0 7
47954: PUSH
47955: EMPTY
47956: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47957: LD_VAR 0 1
47961: PPUSH
47962: CALL_OW 266
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: IN
47977: NOT
47978: IFFALSE 47982
// exit ;
47980: GO 49616
// if name then
47982: LD_VAR 0 3
47986: IFFALSE 48002
// SetBName ( base_dep , name ) ;
47988: LD_VAR 0 1
47992: PPUSH
47993: LD_VAR 0 3
47997: PPUSH
47998: CALL_OW 500
// base := GetBase ( base_dep ) ;
48002: LD_ADDR_VAR 0 15
48006: PUSH
48007: LD_VAR 0 1
48011: PPUSH
48012: CALL_OW 274
48016: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48017: LD_ADDR_VAR 0 16
48021: PUSH
48022: LD_VAR 0 1
48026: PPUSH
48027: CALL_OW 255
48031: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48032: LD_ADDR_VAR 0 17
48036: PUSH
48037: LD_VAR 0 1
48041: PPUSH
48042: CALL_OW 248
48046: ST_TO_ADDR
// if sources then
48047: LD_VAR 0 5
48051: IFFALSE 48098
// for i = 1 to 3 do
48053: LD_ADDR_VAR 0 8
48057: PUSH
48058: DOUBLE
48059: LD_INT 1
48061: DEC
48062: ST_TO_ADDR
48063: LD_INT 3
48065: PUSH
48066: FOR_TO
48067: IFFALSE 48096
// AddResourceType ( base , i , sources [ i ] ) ;
48069: LD_VAR 0 15
48073: PPUSH
48074: LD_VAR 0 8
48078: PPUSH
48079: LD_VAR 0 5
48083: PUSH
48084: LD_VAR 0 8
48088: ARRAY
48089: PPUSH
48090: CALL_OW 276
48094: GO 48066
48096: POP
48097: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48098: LD_ADDR_VAR 0 18
48102: PUSH
48103: LD_VAR 0 15
48107: PPUSH
48108: LD_VAR 0 2
48112: PPUSH
48113: LD_INT 1
48115: PPUSH
48116: CALL 47359 0 3
48120: ST_TO_ADDR
// InitHc ;
48121: CALL_OW 19
// InitUc ;
48125: CALL_OW 18
// uc_side := side ;
48129: LD_ADDR_OWVAR 20
48133: PUSH
48134: LD_VAR 0 16
48138: ST_TO_ADDR
// uc_nation := nation ;
48139: LD_ADDR_OWVAR 21
48143: PUSH
48144: LD_VAR 0 17
48148: ST_TO_ADDR
// if buildings then
48149: LD_VAR 0 18
48153: IFFALSE 49475
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48155: LD_ADDR_VAR 0 19
48159: PUSH
48160: LD_VAR 0 18
48164: PPUSH
48165: LD_INT 2
48167: PUSH
48168: LD_INT 30
48170: PUSH
48171: LD_INT 29
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 30
48180: PUSH
48181: LD_INT 30
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: LIST
48192: PPUSH
48193: CALL_OW 72
48197: ST_TO_ADDR
// if tmp then
48198: LD_VAR 0 19
48202: IFFALSE 48250
// for i in tmp do
48204: LD_ADDR_VAR 0 8
48208: PUSH
48209: LD_VAR 0 19
48213: PUSH
48214: FOR_IN
48215: IFFALSE 48248
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48217: LD_VAR 0 8
48221: PPUSH
48222: CALL_OW 250
48226: PPUSH
48227: LD_VAR 0 8
48231: PPUSH
48232: CALL_OW 251
48236: PPUSH
48237: LD_VAR 0 16
48241: PPUSH
48242: CALL_OW 441
48246: GO 48214
48248: POP
48249: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48250: LD_VAR 0 18
48254: PPUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 30
48260: PUSH
48261: LD_INT 32
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 30
48270: PUSH
48271: LD_INT 33
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: PPUSH
48283: CALL_OW 72
48287: IFFALSE 48375
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48289: LD_ADDR_VAR 0 8
48293: PUSH
48294: LD_VAR 0 18
48298: PPUSH
48299: LD_INT 2
48301: PUSH
48302: LD_INT 30
48304: PUSH
48305: LD_INT 32
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 30
48314: PUSH
48315: LD_INT 33
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: PPUSH
48327: CALL_OW 72
48331: PUSH
48332: FOR_IN
48333: IFFALSE 48373
// begin if not GetBWeapon ( i ) then
48335: LD_VAR 0 8
48339: PPUSH
48340: CALL_OW 269
48344: NOT
48345: IFFALSE 48371
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48347: LD_VAR 0 8
48351: PPUSH
48352: LD_VAR 0 8
48356: PPUSH
48357: LD_VAR 0 2
48361: PPUSH
48362: CALL 49621 0 2
48366: PPUSH
48367: CALL_OW 431
// end ;
48371: GO 48332
48373: POP
48374: POP
// end ; for i = 1 to personel do
48375: LD_ADDR_VAR 0 8
48379: PUSH
48380: DOUBLE
48381: LD_INT 1
48383: DEC
48384: ST_TO_ADDR
48385: LD_VAR 0 6
48389: PUSH
48390: FOR_TO
48391: IFFALSE 49455
// begin if i > 4 then
48393: LD_VAR 0 8
48397: PUSH
48398: LD_INT 4
48400: GREATER
48401: IFFALSE 48405
// break ;
48403: GO 49455
// case i of 1 :
48405: LD_VAR 0 8
48409: PUSH
48410: LD_INT 1
48412: DOUBLE
48413: EQUAL
48414: IFTRUE 48418
48416: GO 48498
48418: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48419: LD_ADDR_VAR 0 12
48423: PUSH
48424: LD_VAR 0 18
48428: PPUSH
48429: LD_INT 22
48431: PUSH
48432: LD_VAR 0 16
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 58
48443: PUSH
48444: EMPTY
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 30
48452: PUSH
48453: LD_INT 32
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 30
48462: PUSH
48463: LD_INT 4
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 30
48472: PUSH
48473: LD_INT 5
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: PPUSH
48491: CALL_OW 72
48495: ST_TO_ADDR
48496: GO 48720
48498: LD_INT 2
48500: DOUBLE
48501: EQUAL
48502: IFTRUE 48506
48504: GO 48568
48506: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48507: LD_ADDR_VAR 0 12
48511: PUSH
48512: LD_VAR 0 18
48516: PPUSH
48517: LD_INT 22
48519: PUSH
48520: LD_VAR 0 16
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: LD_INT 30
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 30
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: LIST
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PPUSH
48561: CALL_OW 72
48565: ST_TO_ADDR
48566: GO 48720
48568: LD_INT 3
48570: DOUBLE
48571: EQUAL
48572: IFTRUE 48576
48574: GO 48638
48576: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48577: LD_ADDR_VAR 0 12
48581: PUSH
48582: LD_VAR 0 18
48586: PPUSH
48587: LD_INT 22
48589: PUSH
48590: LD_VAR 0 16
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 30
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 30
48614: PUSH
48615: LD_INT 3
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PPUSH
48631: CALL_OW 72
48635: ST_TO_ADDR
48636: GO 48720
48638: LD_INT 4
48640: DOUBLE
48641: EQUAL
48642: IFTRUE 48646
48644: GO 48719
48646: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48647: LD_ADDR_VAR 0 12
48651: PUSH
48652: LD_VAR 0 18
48656: PPUSH
48657: LD_INT 22
48659: PUSH
48660: LD_VAR 0 16
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 30
48674: PUSH
48675: LD_INT 6
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 30
48684: PUSH
48685: LD_INT 7
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 30
48694: PUSH
48695: LD_INT 8
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PPUSH
48712: CALL_OW 72
48716: ST_TO_ADDR
48717: GO 48720
48719: POP
// if i = 1 then
48720: LD_VAR 0 8
48724: PUSH
48725: LD_INT 1
48727: EQUAL
48728: IFFALSE 48839
// begin tmp := [ ] ;
48730: LD_ADDR_VAR 0 19
48734: PUSH
48735: EMPTY
48736: ST_TO_ADDR
// for j in f do
48737: LD_ADDR_VAR 0 9
48741: PUSH
48742: LD_VAR 0 12
48746: PUSH
48747: FOR_IN
48748: IFFALSE 48821
// if GetBType ( j ) = b_bunker then
48750: LD_VAR 0 9
48754: PPUSH
48755: CALL_OW 266
48759: PUSH
48760: LD_INT 32
48762: EQUAL
48763: IFFALSE 48790
// tmp := Insert ( tmp , 1 , j ) else
48765: LD_ADDR_VAR 0 19
48769: PUSH
48770: LD_VAR 0 19
48774: PPUSH
48775: LD_INT 1
48777: PPUSH
48778: LD_VAR 0 9
48782: PPUSH
48783: CALL_OW 2
48787: ST_TO_ADDR
48788: GO 48819
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48790: LD_ADDR_VAR 0 19
48794: PUSH
48795: LD_VAR 0 19
48799: PPUSH
48800: LD_VAR 0 19
48804: PUSH
48805: LD_INT 1
48807: PLUS
48808: PPUSH
48809: LD_VAR 0 9
48813: PPUSH
48814: CALL_OW 2
48818: ST_TO_ADDR
48819: GO 48747
48821: POP
48822: POP
// if tmp then
48823: LD_VAR 0 19
48827: IFFALSE 48839
// f := tmp ;
48829: LD_ADDR_VAR 0 12
48833: PUSH
48834: LD_VAR 0 19
48838: ST_TO_ADDR
// end ; x := personel [ i ] ;
48839: LD_ADDR_VAR 0 13
48843: PUSH
48844: LD_VAR 0 6
48848: PUSH
48849: LD_VAR 0 8
48853: ARRAY
48854: ST_TO_ADDR
// if x = - 1 then
48855: LD_VAR 0 13
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: EQUAL
48864: IFFALSE 49073
// begin for j in f do
48866: LD_ADDR_VAR 0 9
48870: PUSH
48871: LD_VAR 0 12
48875: PUSH
48876: FOR_IN
48877: IFFALSE 49069
// repeat InitHc ;
48879: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48883: LD_VAR 0 9
48887: PPUSH
48888: CALL_OW 266
48892: PUSH
48893: LD_INT 5
48895: EQUAL
48896: IFFALSE 48966
// begin if UnitsInside ( j ) < 3 then
48898: LD_VAR 0 9
48902: PPUSH
48903: CALL_OW 313
48907: PUSH
48908: LD_INT 3
48910: LESS
48911: IFFALSE 48947
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48913: LD_INT 0
48915: PPUSH
48916: LD_INT 5
48918: PUSH
48919: LD_INT 8
48921: PUSH
48922: LD_INT 9
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: LIST
48929: PUSH
48930: LD_VAR 0 17
48934: ARRAY
48935: PPUSH
48936: LD_VAR 0 4
48940: PPUSH
48941: CALL_OW 380
48945: GO 48964
// PrepareHuman ( false , i , skill ) ;
48947: LD_INT 0
48949: PPUSH
48950: LD_VAR 0 8
48954: PPUSH
48955: LD_VAR 0 4
48959: PPUSH
48960: CALL_OW 380
// end else
48964: GO 48983
// PrepareHuman ( false , i , skill ) ;
48966: LD_INT 0
48968: PPUSH
48969: LD_VAR 0 8
48973: PPUSH
48974: LD_VAR 0 4
48978: PPUSH
48979: CALL_OW 380
// un := CreateHuman ;
48983: LD_ADDR_VAR 0 14
48987: PUSH
48988: CALL_OW 44
48992: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48993: LD_ADDR_VAR 0 7
48997: PUSH
48998: LD_VAR 0 7
49002: PPUSH
49003: LD_INT 1
49005: PPUSH
49006: LD_VAR 0 14
49010: PPUSH
49011: CALL_OW 2
49015: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49016: LD_VAR 0 14
49020: PPUSH
49021: LD_VAR 0 9
49025: PPUSH
49026: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49030: LD_VAR 0 9
49034: PPUSH
49035: CALL_OW 313
49039: PUSH
49040: LD_INT 6
49042: EQUAL
49043: PUSH
49044: LD_VAR 0 9
49048: PPUSH
49049: CALL_OW 266
49053: PUSH
49054: LD_INT 32
49056: PUSH
49057: LD_INT 31
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: IN
49064: OR
49065: IFFALSE 48879
49067: GO 48876
49069: POP
49070: POP
// end else
49071: GO 49453
// for j = 1 to x do
49073: LD_ADDR_VAR 0 9
49077: PUSH
49078: DOUBLE
49079: LD_INT 1
49081: DEC
49082: ST_TO_ADDR
49083: LD_VAR 0 13
49087: PUSH
49088: FOR_TO
49089: IFFALSE 49451
// begin InitHc ;
49091: CALL_OW 19
// if not f then
49095: LD_VAR 0 12
49099: NOT
49100: IFFALSE 49189
// begin PrepareHuman ( false , i , skill ) ;
49102: LD_INT 0
49104: PPUSH
49105: LD_VAR 0 8
49109: PPUSH
49110: LD_VAR 0 4
49114: PPUSH
49115: CALL_OW 380
// un := CreateHuman ;
49119: LD_ADDR_VAR 0 14
49123: PUSH
49124: CALL_OW 44
49128: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49129: LD_ADDR_VAR 0 7
49133: PUSH
49134: LD_VAR 0 7
49138: PPUSH
49139: LD_INT 1
49141: PPUSH
49142: LD_VAR 0 14
49146: PPUSH
49147: CALL_OW 2
49151: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49152: LD_VAR 0 14
49156: PPUSH
49157: LD_VAR 0 1
49161: PPUSH
49162: CALL_OW 250
49166: PPUSH
49167: LD_VAR 0 1
49171: PPUSH
49172: CALL_OW 251
49176: PPUSH
49177: LD_INT 10
49179: PPUSH
49180: LD_INT 0
49182: PPUSH
49183: CALL_OW 50
// continue ;
49187: GO 49088
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49189: LD_VAR 0 12
49193: PUSH
49194: LD_INT 1
49196: ARRAY
49197: PPUSH
49198: CALL_OW 313
49202: PUSH
49203: LD_VAR 0 12
49207: PUSH
49208: LD_INT 1
49210: ARRAY
49211: PPUSH
49212: CALL_OW 266
49216: PUSH
49217: LD_INT 32
49219: PUSH
49220: LD_INT 31
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: IN
49227: AND
49228: PUSH
49229: LD_VAR 0 12
49233: PUSH
49234: LD_INT 1
49236: ARRAY
49237: PPUSH
49238: CALL_OW 313
49242: PUSH
49243: LD_INT 6
49245: EQUAL
49246: OR
49247: IFFALSE 49267
// f := Delete ( f , 1 ) ;
49249: LD_ADDR_VAR 0 12
49253: PUSH
49254: LD_VAR 0 12
49258: PPUSH
49259: LD_INT 1
49261: PPUSH
49262: CALL_OW 3
49266: ST_TO_ADDR
// if not f then
49267: LD_VAR 0 12
49271: NOT
49272: IFFALSE 49290
// begin x := x + 2 ;
49274: LD_ADDR_VAR 0 13
49278: PUSH
49279: LD_VAR 0 13
49283: PUSH
49284: LD_INT 2
49286: PLUS
49287: ST_TO_ADDR
// continue ;
49288: GO 49088
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49290: LD_VAR 0 12
49294: PUSH
49295: LD_INT 1
49297: ARRAY
49298: PPUSH
49299: CALL_OW 266
49303: PUSH
49304: LD_INT 5
49306: EQUAL
49307: IFFALSE 49381
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49309: LD_VAR 0 12
49313: PUSH
49314: LD_INT 1
49316: ARRAY
49317: PPUSH
49318: CALL_OW 313
49322: PUSH
49323: LD_INT 3
49325: LESS
49326: IFFALSE 49362
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49328: LD_INT 0
49330: PPUSH
49331: LD_INT 5
49333: PUSH
49334: LD_INT 8
49336: PUSH
49337: LD_INT 9
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: LIST
49344: PUSH
49345: LD_VAR 0 17
49349: ARRAY
49350: PPUSH
49351: LD_VAR 0 4
49355: PPUSH
49356: CALL_OW 380
49360: GO 49379
// PrepareHuman ( false , i , skill ) ;
49362: LD_INT 0
49364: PPUSH
49365: LD_VAR 0 8
49369: PPUSH
49370: LD_VAR 0 4
49374: PPUSH
49375: CALL_OW 380
// end else
49379: GO 49398
// PrepareHuman ( false , i , skill ) ;
49381: LD_INT 0
49383: PPUSH
49384: LD_VAR 0 8
49388: PPUSH
49389: LD_VAR 0 4
49393: PPUSH
49394: CALL_OW 380
// un := CreateHuman ;
49398: LD_ADDR_VAR 0 14
49402: PUSH
49403: CALL_OW 44
49407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49408: LD_ADDR_VAR 0 7
49412: PUSH
49413: LD_VAR 0 7
49417: PPUSH
49418: LD_INT 1
49420: PPUSH
49421: LD_VAR 0 14
49425: PPUSH
49426: CALL_OW 2
49430: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49431: LD_VAR 0 14
49435: PPUSH
49436: LD_VAR 0 12
49440: PUSH
49441: LD_INT 1
49443: ARRAY
49444: PPUSH
49445: CALL_OW 52
// end ;
49449: GO 49088
49451: POP
49452: POP
// end ;
49453: GO 48390
49455: POP
49456: POP
// result := result ^ buildings ;
49457: LD_ADDR_VAR 0 7
49461: PUSH
49462: LD_VAR 0 7
49466: PUSH
49467: LD_VAR 0 18
49471: ADD
49472: ST_TO_ADDR
// end else
49473: GO 49616
// begin for i = 1 to personel do
49475: LD_ADDR_VAR 0 8
49479: PUSH
49480: DOUBLE
49481: LD_INT 1
49483: DEC
49484: ST_TO_ADDR
49485: LD_VAR 0 6
49489: PUSH
49490: FOR_TO
49491: IFFALSE 49614
// begin if i > 4 then
49493: LD_VAR 0 8
49497: PUSH
49498: LD_INT 4
49500: GREATER
49501: IFFALSE 49505
// break ;
49503: GO 49614
// x := personel [ i ] ;
49505: LD_ADDR_VAR 0 13
49509: PUSH
49510: LD_VAR 0 6
49514: PUSH
49515: LD_VAR 0 8
49519: ARRAY
49520: ST_TO_ADDR
// if x = - 1 then
49521: LD_VAR 0 13
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: EQUAL
49530: IFFALSE 49534
// continue ;
49532: GO 49490
// PrepareHuman ( false , i , skill ) ;
49534: LD_INT 0
49536: PPUSH
49537: LD_VAR 0 8
49541: PPUSH
49542: LD_VAR 0 4
49546: PPUSH
49547: CALL_OW 380
// un := CreateHuman ;
49551: LD_ADDR_VAR 0 14
49555: PUSH
49556: CALL_OW 44
49560: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49561: LD_VAR 0 14
49565: PPUSH
49566: LD_VAR 0 1
49570: PPUSH
49571: CALL_OW 250
49575: PPUSH
49576: LD_VAR 0 1
49580: PPUSH
49581: CALL_OW 251
49585: PPUSH
49586: LD_INT 10
49588: PPUSH
49589: LD_INT 0
49591: PPUSH
49592: CALL_OW 50
// result := result ^ un ;
49596: LD_ADDR_VAR 0 7
49600: PUSH
49601: LD_VAR 0 7
49605: PUSH
49606: LD_VAR 0 14
49610: ADD
49611: ST_TO_ADDR
// end ;
49612: GO 49490
49614: POP
49615: POP
// end ; end ;
49616: LD_VAR 0 7
49620: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49621: LD_INT 0
49623: PPUSH
49624: PPUSH
49625: PPUSH
49626: PPUSH
49627: PPUSH
49628: PPUSH
49629: PPUSH
49630: PPUSH
49631: PPUSH
49632: PPUSH
49633: PPUSH
49634: PPUSH
49635: PPUSH
49636: PPUSH
49637: PPUSH
49638: PPUSH
// result := false ;
49639: LD_ADDR_VAR 0 3
49643: PUSH
49644: LD_INT 0
49646: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49647: LD_VAR 0 1
49651: NOT
49652: PUSH
49653: LD_VAR 0 1
49657: PPUSH
49658: CALL_OW 266
49662: PUSH
49663: LD_INT 32
49665: PUSH
49666: LD_INT 33
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: IN
49673: NOT
49674: OR
49675: IFFALSE 49679
// exit ;
49677: GO 50788
// nat := GetNation ( tower ) ;
49679: LD_ADDR_VAR 0 12
49683: PUSH
49684: LD_VAR 0 1
49688: PPUSH
49689: CALL_OW 248
49693: ST_TO_ADDR
// side := GetSide ( tower ) ;
49694: LD_ADDR_VAR 0 16
49698: PUSH
49699: LD_VAR 0 1
49703: PPUSH
49704: CALL_OW 255
49708: ST_TO_ADDR
// x := GetX ( tower ) ;
49709: LD_ADDR_VAR 0 10
49713: PUSH
49714: LD_VAR 0 1
49718: PPUSH
49719: CALL_OW 250
49723: ST_TO_ADDR
// y := GetY ( tower ) ;
49724: LD_ADDR_VAR 0 11
49728: PUSH
49729: LD_VAR 0 1
49733: PPUSH
49734: CALL_OW 251
49738: ST_TO_ADDR
// if not x or not y then
49739: LD_VAR 0 10
49743: NOT
49744: PUSH
49745: LD_VAR 0 11
49749: NOT
49750: OR
49751: IFFALSE 49755
// exit ;
49753: GO 50788
// weapon := 0 ;
49755: LD_ADDR_VAR 0 18
49759: PUSH
49760: LD_INT 0
49762: ST_TO_ADDR
// fac_list := [ ] ;
49763: LD_ADDR_VAR 0 17
49767: PUSH
49768: EMPTY
49769: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49770: LD_ADDR_VAR 0 6
49774: PUSH
49775: LD_VAR 0 1
49779: PPUSH
49780: CALL_OW 274
49784: PPUSH
49785: LD_VAR 0 2
49789: PPUSH
49790: LD_INT 0
49792: PPUSH
49793: CALL 47359 0 3
49797: PPUSH
49798: LD_INT 30
49800: PUSH
49801: LD_INT 3
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PPUSH
49808: CALL_OW 72
49812: ST_TO_ADDR
// if not factories then
49813: LD_VAR 0 6
49817: NOT
49818: IFFALSE 49822
// exit ;
49820: GO 50788
// for i in factories do
49822: LD_ADDR_VAR 0 8
49826: PUSH
49827: LD_VAR 0 6
49831: PUSH
49832: FOR_IN
49833: IFFALSE 49858
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49835: LD_ADDR_VAR 0 17
49839: PUSH
49840: LD_VAR 0 17
49844: PUSH
49845: LD_VAR 0 8
49849: PPUSH
49850: CALL_OW 478
49854: UNION
49855: ST_TO_ADDR
49856: GO 49832
49858: POP
49859: POP
// if not fac_list then
49860: LD_VAR 0 17
49864: NOT
49865: IFFALSE 49869
// exit ;
49867: GO 50788
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49869: LD_ADDR_VAR 0 5
49873: PUSH
49874: LD_INT 4
49876: PUSH
49877: LD_INT 5
49879: PUSH
49880: LD_INT 9
49882: PUSH
49883: LD_INT 10
49885: PUSH
49886: LD_INT 6
49888: PUSH
49889: LD_INT 7
49891: PUSH
49892: LD_INT 11
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 27
49906: PUSH
49907: LD_INT 28
49909: PUSH
49910: LD_INT 26
49912: PUSH
49913: LD_INT 30
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 43
49924: PUSH
49925: LD_INT 44
49927: PUSH
49928: LD_INT 46
49930: PUSH
49931: LD_INT 45
49933: PUSH
49934: LD_INT 47
49936: PUSH
49937: LD_INT 49
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: PUSH
49953: LD_VAR 0 12
49957: ARRAY
49958: ST_TO_ADDR
// list := list isect fac_list ;
49959: LD_ADDR_VAR 0 5
49963: PUSH
49964: LD_VAR 0 5
49968: PUSH
49969: LD_VAR 0 17
49973: ISECT
49974: ST_TO_ADDR
// if not list then
49975: LD_VAR 0 5
49979: NOT
49980: IFFALSE 49984
// exit ;
49982: GO 50788
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49984: LD_VAR 0 12
49988: PUSH
49989: LD_INT 3
49991: EQUAL
49992: PUSH
49993: LD_INT 49
49995: PUSH
49996: LD_VAR 0 5
50000: IN
50001: AND
50002: PUSH
50003: LD_INT 31
50005: PPUSH
50006: LD_VAR 0 16
50010: PPUSH
50011: CALL_OW 321
50015: PUSH
50016: LD_INT 2
50018: EQUAL
50019: AND
50020: IFFALSE 50080
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50022: LD_INT 22
50024: PUSH
50025: LD_VAR 0 16
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 35
50036: PUSH
50037: LD_INT 49
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 91
50046: PUSH
50047: LD_VAR 0 1
50051: PUSH
50052: LD_INT 10
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: LIST
50064: PPUSH
50065: CALL_OW 69
50069: NOT
50070: IFFALSE 50080
// weapon := ru_time_lapser ;
50072: LD_ADDR_VAR 0 18
50076: PUSH
50077: LD_INT 49
50079: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50080: LD_VAR 0 12
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: IN
50095: PUSH
50096: LD_INT 11
50098: PUSH
50099: LD_VAR 0 5
50103: IN
50104: PUSH
50105: LD_INT 30
50107: PUSH
50108: LD_VAR 0 5
50112: IN
50113: OR
50114: AND
50115: PUSH
50116: LD_INT 6
50118: PPUSH
50119: LD_VAR 0 16
50123: PPUSH
50124: CALL_OW 321
50128: PUSH
50129: LD_INT 2
50131: EQUAL
50132: AND
50133: IFFALSE 50298
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50135: LD_INT 22
50137: PUSH
50138: LD_VAR 0 16
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: LD_INT 35
50152: PUSH
50153: LD_INT 11
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 35
50162: PUSH
50163: LD_INT 30
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 91
50177: PUSH
50178: LD_VAR 0 1
50182: PUSH
50183: LD_INT 18
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: LIST
50195: PPUSH
50196: CALL_OW 69
50200: NOT
50201: PUSH
50202: LD_INT 22
50204: PUSH
50205: LD_VAR 0 16
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 30
50219: PUSH
50220: LD_INT 32
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 30
50229: PUSH
50230: LD_INT 33
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 91
50244: PUSH
50245: LD_VAR 0 1
50249: PUSH
50250: LD_INT 12
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: PPUSH
50266: CALL_OW 69
50270: PUSH
50271: LD_INT 2
50273: GREATER
50274: AND
50275: IFFALSE 50298
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50277: LD_ADDR_VAR 0 18
50281: PUSH
50282: LD_INT 11
50284: PUSH
50285: LD_INT 30
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_VAR 0 12
50296: ARRAY
50297: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50298: LD_VAR 0 18
50302: NOT
50303: PUSH
50304: LD_INT 40
50306: PPUSH
50307: LD_VAR 0 16
50311: PPUSH
50312: CALL_OW 321
50316: PUSH
50317: LD_INT 2
50319: EQUAL
50320: AND
50321: PUSH
50322: LD_INT 7
50324: PUSH
50325: LD_VAR 0 5
50329: IN
50330: PUSH
50331: LD_INT 28
50333: PUSH
50334: LD_VAR 0 5
50338: IN
50339: OR
50340: PUSH
50341: LD_INT 45
50343: PUSH
50344: LD_VAR 0 5
50348: IN
50349: OR
50350: AND
50351: IFFALSE 50605
// begin hex := GetHexInfo ( x , y ) ;
50353: LD_ADDR_VAR 0 4
50357: PUSH
50358: LD_VAR 0 10
50362: PPUSH
50363: LD_VAR 0 11
50367: PPUSH
50368: CALL_OW 546
50372: ST_TO_ADDR
// if hex [ 1 ] then
50373: LD_VAR 0 4
50377: PUSH
50378: LD_INT 1
50380: ARRAY
50381: IFFALSE 50385
// exit ;
50383: GO 50788
// height := hex [ 2 ] ;
50385: LD_ADDR_VAR 0 15
50389: PUSH
50390: LD_VAR 0 4
50394: PUSH
50395: LD_INT 2
50397: ARRAY
50398: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50399: LD_ADDR_VAR 0 14
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: LD_INT 5
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: ST_TO_ADDR
// for i in tmp do
50422: LD_ADDR_VAR 0 8
50426: PUSH
50427: LD_VAR 0 14
50431: PUSH
50432: FOR_IN
50433: IFFALSE 50603
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50435: LD_ADDR_VAR 0 9
50439: PUSH
50440: LD_VAR 0 10
50444: PPUSH
50445: LD_VAR 0 8
50449: PPUSH
50450: LD_INT 5
50452: PPUSH
50453: CALL_OW 272
50457: PUSH
50458: LD_VAR 0 11
50462: PPUSH
50463: LD_VAR 0 8
50467: PPUSH
50468: LD_INT 5
50470: PPUSH
50471: CALL_OW 273
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50480: LD_VAR 0 9
50484: PUSH
50485: LD_INT 1
50487: ARRAY
50488: PPUSH
50489: LD_VAR 0 9
50493: PUSH
50494: LD_INT 2
50496: ARRAY
50497: PPUSH
50498: CALL_OW 488
50502: IFFALSE 50601
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50504: LD_ADDR_VAR 0 4
50508: PUSH
50509: LD_VAR 0 9
50513: PUSH
50514: LD_INT 1
50516: ARRAY
50517: PPUSH
50518: LD_VAR 0 9
50522: PUSH
50523: LD_INT 2
50525: ARRAY
50526: PPUSH
50527: CALL_OW 546
50531: ST_TO_ADDR
// if hex [ 1 ] then
50532: LD_VAR 0 4
50536: PUSH
50537: LD_INT 1
50539: ARRAY
50540: IFFALSE 50544
// continue ;
50542: GO 50432
// h := hex [ 2 ] ;
50544: LD_ADDR_VAR 0 13
50548: PUSH
50549: LD_VAR 0 4
50553: PUSH
50554: LD_INT 2
50556: ARRAY
50557: ST_TO_ADDR
// if h + 7 < height then
50558: LD_VAR 0 13
50562: PUSH
50563: LD_INT 7
50565: PLUS
50566: PUSH
50567: LD_VAR 0 15
50571: LESS
50572: IFFALSE 50601
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50574: LD_ADDR_VAR 0 18
50578: PUSH
50579: LD_INT 7
50581: PUSH
50582: LD_INT 28
50584: PUSH
50585: LD_INT 45
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: PUSH
50593: LD_VAR 0 12
50597: ARRAY
50598: ST_TO_ADDR
// break ;
50599: GO 50603
// end ; end ; end ;
50601: GO 50432
50603: POP
50604: POP
// end ; if not weapon then
50605: LD_VAR 0 18
50609: NOT
50610: IFFALSE 50670
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50612: LD_ADDR_VAR 0 5
50616: PUSH
50617: LD_VAR 0 5
50621: PUSH
50622: LD_INT 11
50624: PUSH
50625: LD_INT 30
50627: PUSH
50628: LD_INT 49
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: DIFF
50636: ST_TO_ADDR
// if not list then
50637: LD_VAR 0 5
50641: NOT
50642: IFFALSE 50646
// exit ;
50644: GO 50788
// weapon := list [ rand ( 1 , list ) ] ;
50646: LD_ADDR_VAR 0 18
50650: PUSH
50651: LD_VAR 0 5
50655: PUSH
50656: LD_INT 1
50658: PPUSH
50659: LD_VAR 0 5
50663: PPUSH
50664: CALL_OW 12
50668: ARRAY
50669: ST_TO_ADDR
// end ; if weapon then
50670: LD_VAR 0 18
50674: IFFALSE 50788
// begin tmp := CostOfWeapon ( weapon ) ;
50676: LD_ADDR_VAR 0 14
50680: PUSH
50681: LD_VAR 0 18
50685: PPUSH
50686: CALL_OW 451
50690: ST_TO_ADDR
// j := GetBase ( tower ) ;
50691: LD_ADDR_VAR 0 9
50695: PUSH
50696: LD_VAR 0 1
50700: PPUSH
50701: CALL_OW 274
50705: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50706: LD_VAR 0 9
50710: PPUSH
50711: LD_INT 1
50713: PPUSH
50714: CALL_OW 275
50718: PUSH
50719: LD_VAR 0 14
50723: PUSH
50724: LD_INT 1
50726: ARRAY
50727: GREATEREQUAL
50728: PUSH
50729: LD_VAR 0 9
50733: PPUSH
50734: LD_INT 2
50736: PPUSH
50737: CALL_OW 275
50741: PUSH
50742: LD_VAR 0 14
50746: PUSH
50747: LD_INT 2
50749: ARRAY
50750: GREATEREQUAL
50751: AND
50752: PUSH
50753: LD_VAR 0 9
50757: PPUSH
50758: LD_INT 3
50760: PPUSH
50761: CALL_OW 275
50765: PUSH
50766: LD_VAR 0 14
50770: PUSH
50771: LD_INT 3
50773: ARRAY
50774: GREATEREQUAL
50775: AND
50776: IFFALSE 50788
// result := weapon ;
50778: LD_ADDR_VAR 0 3
50782: PUSH
50783: LD_VAR 0 18
50787: ST_TO_ADDR
// end ; end ;
50788: LD_VAR 0 3
50792: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50793: LD_INT 0
50795: PPUSH
50796: PPUSH
// result := true ;
50797: LD_ADDR_VAR 0 3
50801: PUSH
50802: LD_INT 1
50804: ST_TO_ADDR
// if array1 = array2 then
50805: LD_VAR 0 1
50809: PUSH
50810: LD_VAR 0 2
50814: EQUAL
50815: IFFALSE 50875
// begin for i = 1 to array1 do
50817: LD_ADDR_VAR 0 4
50821: PUSH
50822: DOUBLE
50823: LD_INT 1
50825: DEC
50826: ST_TO_ADDR
50827: LD_VAR 0 1
50831: PUSH
50832: FOR_TO
50833: IFFALSE 50871
// if array1 [ i ] <> array2 [ i ] then
50835: LD_VAR 0 1
50839: PUSH
50840: LD_VAR 0 4
50844: ARRAY
50845: PUSH
50846: LD_VAR 0 2
50850: PUSH
50851: LD_VAR 0 4
50855: ARRAY
50856: NONEQUAL
50857: IFFALSE 50869
// begin result := false ;
50859: LD_ADDR_VAR 0 3
50863: PUSH
50864: LD_INT 0
50866: ST_TO_ADDR
// break ;
50867: GO 50871
// end ;
50869: GO 50832
50871: POP
50872: POP
// end else
50873: GO 50883
// result := false ;
50875: LD_ADDR_VAR 0 3
50879: PUSH
50880: LD_INT 0
50882: ST_TO_ADDR
// end ;
50883: LD_VAR 0 3
50887: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50888: LD_INT 0
50890: PPUSH
50891: PPUSH
// if not array1 or not array2 then
50892: LD_VAR 0 1
50896: NOT
50897: PUSH
50898: LD_VAR 0 2
50902: NOT
50903: OR
50904: IFFALSE 50908
// exit ;
50906: GO 50972
// result := true ;
50908: LD_ADDR_VAR 0 3
50912: PUSH
50913: LD_INT 1
50915: ST_TO_ADDR
// for i = 1 to array1 do
50916: LD_ADDR_VAR 0 4
50920: PUSH
50921: DOUBLE
50922: LD_INT 1
50924: DEC
50925: ST_TO_ADDR
50926: LD_VAR 0 1
50930: PUSH
50931: FOR_TO
50932: IFFALSE 50970
// if array1 [ i ] <> array2 [ i ] then
50934: LD_VAR 0 1
50938: PUSH
50939: LD_VAR 0 4
50943: ARRAY
50944: PUSH
50945: LD_VAR 0 2
50949: PUSH
50950: LD_VAR 0 4
50954: ARRAY
50955: NONEQUAL
50956: IFFALSE 50968
// begin result := false ;
50958: LD_ADDR_VAR 0 3
50962: PUSH
50963: LD_INT 0
50965: ST_TO_ADDR
// break ;
50966: GO 50970
// end ;
50968: GO 50931
50970: POP
50971: POP
// end ;
50972: LD_VAR 0 3
50976: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50977: LD_INT 0
50979: PPUSH
50980: PPUSH
50981: PPUSH
// pom := GetBase ( fac ) ;
50982: LD_ADDR_VAR 0 5
50986: PUSH
50987: LD_VAR 0 1
50991: PPUSH
50992: CALL_OW 274
50996: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50997: LD_ADDR_VAR 0 4
51001: PUSH
51002: LD_VAR 0 2
51006: PUSH
51007: LD_INT 1
51009: ARRAY
51010: PPUSH
51011: LD_VAR 0 2
51015: PUSH
51016: LD_INT 2
51018: ARRAY
51019: PPUSH
51020: LD_VAR 0 2
51024: PUSH
51025: LD_INT 3
51027: ARRAY
51028: PPUSH
51029: LD_VAR 0 2
51033: PUSH
51034: LD_INT 4
51036: ARRAY
51037: PPUSH
51038: CALL_OW 449
51042: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51043: LD_ADDR_VAR 0 3
51047: PUSH
51048: LD_VAR 0 5
51052: PPUSH
51053: LD_INT 1
51055: PPUSH
51056: CALL_OW 275
51060: PUSH
51061: LD_VAR 0 4
51065: PUSH
51066: LD_INT 1
51068: ARRAY
51069: GREATEREQUAL
51070: PUSH
51071: LD_VAR 0 5
51075: PPUSH
51076: LD_INT 2
51078: PPUSH
51079: CALL_OW 275
51083: PUSH
51084: LD_VAR 0 4
51088: PUSH
51089: LD_INT 2
51091: ARRAY
51092: GREATEREQUAL
51093: AND
51094: PUSH
51095: LD_VAR 0 5
51099: PPUSH
51100: LD_INT 3
51102: PPUSH
51103: CALL_OW 275
51107: PUSH
51108: LD_VAR 0 4
51112: PUSH
51113: LD_INT 3
51115: ARRAY
51116: GREATEREQUAL
51117: AND
51118: ST_TO_ADDR
// end ;
51119: LD_VAR 0 3
51123: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51124: LD_INT 0
51126: PPUSH
51127: PPUSH
51128: PPUSH
51129: PPUSH
// pom := GetBase ( building ) ;
51130: LD_ADDR_VAR 0 3
51134: PUSH
51135: LD_VAR 0 1
51139: PPUSH
51140: CALL_OW 274
51144: ST_TO_ADDR
// if not pom then
51145: LD_VAR 0 3
51149: NOT
51150: IFFALSE 51154
// exit ;
51152: GO 51324
// btype := GetBType ( building ) ;
51154: LD_ADDR_VAR 0 5
51158: PUSH
51159: LD_VAR 0 1
51163: PPUSH
51164: CALL_OW 266
51168: ST_TO_ADDR
// if btype = b_armoury then
51169: LD_VAR 0 5
51173: PUSH
51174: LD_INT 4
51176: EQUAL
51177: IFFALSE 51187
// btype := b_barracks ;
51179: LD_ADDR_VAR 0 5
51183: PUSH
51184: LD_INT 5
51186: ST_TO_ADDR
// if btype = b_depot then
51187: LD_VAR 0 5
51191: PUSH
51192: LD_INT 0
51194: EQUAL
51195: IFFALSE 51205
// btype := b_warehouse ;
51197: LD_ADDR_VAR 0 5
51201: PUSH
51202: LD_INT 1
51204: ST_TO_ADDR
// if btype = b_workshop then
51205: LD_VAR 0 5
51209: PUSH
51210: LD_INT 2
51212: EQUAL
51213: IFFALSE 51223
// btype := b_factory ;
51215: LD_ADDR_VAR 0 5
51219: PUSH
51220: LD_INT 3
51222: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51223: LD_ADDR_VAR 0 4
51227: PUSH
51228: LD_VAR 0 5
51232: PPUSH
51233: LD_VAR 0 1
51237: PPUSH
51238: CALL_OW 248
51242: PPUSH
51243: CALL_OW 450
51247: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51248: LD_ADDR_VAR 0 2
51252: PUSH
51253: LD_VAR 0 3
51257: PPUSH
51258: LD_INT 1
51260: PPUSH
51261: CALL_OW 275
51265: PUSH
51266: LD_VAR 0 4
51270: PUSH
51271: LD_INT 1
51273: ARRAY
51274: GREATEREQUAL
51275: PUSH
51276: LD_VAR 0 3
51280: PPUSH
51281: LD_INT 2
51283: PPUSH
51284: CALL_OW 275
51288: PUSH
51289: LD_VAR 0 4
51293: PUSH
51294: LD_INT 2
51296: ARRAY
51297: GREATEREQUAL
51298: AND
51299: PUSH
51300: LD_VAR 0 3
51304: PPUSH
51305: LD_INT 3
51307: PPUSH
51308: CALL_OW 275
51312: PUSH
51313: LD_VAR 0 4
51317: PUSH
51318: LD_INT 3
51320: ARRAY
51321: GREATEREQUAL
51322: AND
51323: ST_TO_ADDR
// end ;
51324: LD_VAR 0 2
51328: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51329: LD_INT 0
51331: PPUSH
51332: PPUSH
51333: PPUSH
// pom := GetBase ( building ) ;
51334: LD_ADDR_VAR 0 4
51338: PUSH
51339: LD_VAR 0 1
51343: PPUSH
51344: CALL_OW 274
51348: ST_TO_ADDR
// if not pom then
51349: LD_VAR 0 4
51353: NOT
51354: IFFALSE 51358
// exit ;
51356: GO 51459
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51358: LD_ADDR_VAR 0 5
51362: PUSH
51363: LD_VAR 0 2
51367: PPUSH
51368: LD_VAR 0 1
51372: PPUSH
51373: CALL_OW 248
51377: PPUSH
51378: CALL_OW 450
51382: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51383: LD_ADDR_VAR 0 3
51387: PUSH
51388: LD_VAR 0 4
51392: PPUSH
51393: LD_INT 1
51395: PPUSH
51396: CALL_OW 275
51400: PUSH
51401: LD_VAR 0 5
51405: PUSH
51406: LD_INT 1
51408: ARRAY
51409: GREATEREQUAL
51410: PUSH
51411: LD_VAR 0 4
51415: PPUSH
51416: LD_INT 2
51418: PPUSH
51419: CALL_OW 275
51423: PUSH
51424: LD_VAR 0 5
51428: PUSH
51429: LD_INT 2
51431: ARRAY
51432: GREATEREQUAL
51433: AND
51434: PUSH
51435: LD_VAR 0 4
51439: PPUSH
51440: LD_INT 3
51442: PPUSH
51443: CALL_OW 275
51447: PUSH
51448: LD_VAR 0 5
51452: PUSH
51453: LD_INT 3
51455: ARRAY
51456: GREATEREQUAL
51457: AND
51458: ST_TO_ADDR
// end ;
51459: LD_VAR 0 3
51463: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51464: LD_INT 0
51466: PPUSH
51467: PPUSH
51468: PPUSH
51469: PPUSH
51470: PPUSH
51471: PPUSH
51472: PPUSH
51473: PPUSH
51474: PPUSH
51475: PPUSH
51476: PPUSH
// result := false ;
51477: LD_ADDR_VAR 0 8
51481: PUSH
51482: LD_INT 0
51484: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51485: LD_VAR 0 5
51489: NOT
51490: PUSH
51491: LD_VAR 0 1
51495: NOT
51496: OR
51497: PUSH
51498: LD_VAR 0 2
51502: NOT
51503: OR
51504: PUSH
51505: LD_VAR 0 3
51509: NOT
51510: OR
51511: IFFALSE 51515
// exit ;
51513: GO 52329
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51515: LD_ADDR_VAR 0 14
51519: PUSH
51520: LD_VAR 0 1
51524: PPUSH
51525: LD_VAR 0 2
51529: PPUSH
51530: LD_VAR 0 3
51534: PPUSH
51535: LD_VAR 0 4
51539: PPUSH
51540: LD_VAR 0 5
51544: PUSH
51545: LD_INT 1
51547: ARRAY
51548: PPUSH
51549: CALL_OW 248
51553: PPUSH
51554: LD_INT 0
51556: PPUSH
51557: CALL 53562 0 6
51561: ST_TO_ADDR
// if not hexes then
51562: LD_VAR 0 14
51566: NOT
51567: IFFALSE 51571
// exit ;
51569: GO 52329
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51571: LD_ADDR_VAR 0 17
51575: PUSH
51576: LD_VAR 0 5
51580: PPUSH
51581: LD_INT 22
51583: PUSH
51584: LD_VAR 0 13
51588: PPUSH
51589: CALL_OW 255
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: LD_INT 30
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 30
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: LIST
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PPUSH
51630: CALL_OW 72
51634: ST_TO_ADDR
// for i = 1 to hexes do
51635: LD_ADDR_VAR 0 9
51639: PUSH
51640: DOUBLE
51641: LD_INT 1
51643: DEC
51644: ST_TO_ADDR
51645: LD_VAR 0 14
51649: PUSH
51650: FOR_TO
51651: IFFALSE 52327
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51653: LD_ADDR_VAR 0 13
51657: PUSH
51658: LD_VAR 0 14
51662: PUSH
51663: LD_VAR 0 9
51667: ARRAY
51668: PUSH
51669: LD_INT 1
51671: ARRAY
51672: PPUSH
51673: LD_VAR 0 14
51677: PUSH
51678: LD_VAR 0 9
51682: ARRAY
51683: PUSH
51684: LD_INT 2
51686: ARRAY
51687: PPUSH
51688: CALL_OW 428
51692: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51693: LD_VAR 0 14
51697: PUSH
51698: LD_VAR 0 9
51702: ARRAY
51703: PUSH
51704: LD_INT 1
51706: ARRAY
51707: PPUSH
51708: LD_VAR 0 14
51712: PUSH
51713: LD_VAR 0 9
51717: ARRAY
51718: PUSH
51719: LD_INT 2
51721: ARRAY
51722: PPUSH
51723: CALL_OW 351
51727: PUSH
51728: LD_VAR 0 14
51732: PUSH
51733: LD_VAR 0 9
51737: ARRAY
51738: PUSH
51739: LD_INT 1
51741: ARRAY
51742: PPUSH
51743: LD_VAR 0 14
51747: PUSH
51748: LD_VAR 0 9
51752: ARRAY
51753: PUSH
51754: LD_INT 2
51756: ARRAY
51757: PPUSH
51758: CALL_OW 488
51762: NOT
51763: OR
51764: PUSH
51765: LD_VAR 0 13
51769: PPUSH
51770: CALL_OW 247
51774: PUSH
51775: LD_INT 3
51777: EQUAL
51778: OR
51779: IFFALSE 51785
// exit ;
51781: POP
51782: POP
51783: GO 52329
// if not tmp then
51785: LD_VAR 0 13
51789: NOT
51790: IFFALSE 51794
// continue ;
51792: GO 51650
// result := true ;
51794: LD_ADDR_VAR 0 8
51798: PUSH
51799: LD_INT 1
51801: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51802: LD_VAR 0 6
51806: PUSH
51807: LD_VAR 0 13
51811: PPUSH
51812: CALL_OW 247
51816: PUSH
51817: LD_INT 2
51819: EQUAL
51820: AND
51821: PUSH
51822: LD_VAR 0 13
51826: PPUSH
51827: CALL_OW 263
51831: PUSH
51832: LD_INT 1
51834: EQUAL
51835: AND
51836: IFFALSE 52000
// begin if IsDrivenBy ( tmp ) then
51838: LD_VAR 0 13
51842: PPUSH
51843: CALL_OW 311
51847: IFFALSE 51851
// continue ;
51849: GO 51650
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51851: LD_VAR 0 6
51855: PPUSH
51856: LD_INT 3
51858: PUSH
51859: LD_INT 60
51861: PUSH
51862: EMPTY
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 3
51871: PUSH
51872: LD_INT 55
51874: PUSH
51875: EMPTY
51876: LIST
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PPUSH
51886: CALL_OW 72
51890: IFFALSE 51998
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51892: LD_ADDR_VAR 0 18
51896: PUSH
51897: LD_VAR 0 6
51901: PPUSH
51902: LD_INT 3
51904: PUSH
51905: LD_INT 60
51907: PUSH
51908: EMPTY
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: LD_INT 55
51920: PUSH
51921: EMPTY
51922: LIST
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PPUSH
51932: CALL_OW 72
51936: PUSH
51937: LD_INT 1
51939: ARRAY
51940: ST_TO_ADDR
// if IsInUnit ( driver ) then
51941: LD_VAR 0 18
51945: PPUSH
51946: CALL_OW 310
51950: IFFALSE 51961
// ComExit ( driver ) ;
51952: LD_VAR 0 18
51956: PPUSH
51957: CALL 77342 0 1
// AddComEnterUnit ( driver , tmp ) ;
51961: LD_VAR 0 18
51965: PPUSH
51966: LD_VAR 0 13
51970: PPUSH
51971: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51975: LD_VAR 0 18
51979: PPUSH
51980: LD_VAR 0 7
51984: PPUSH
51985: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51989: LD_VAR 0 18
51993: PPUSH
51994: CALL_OW 181
// end ; continue ;
51998: GO 51650
// end ; if not cleaners or not tmp in cleaners then
52000: LD_VAR 0 6
52004: NOT
52005: PUSH
52006: LD_VAR 0 13
52010: PUSH
52011: LD_VAR 0 6
52015: IN
52016: NOT
52017: OR
52018: IFFALSE 52325
// begin if dep then
52020: LD_VAR 0 17
52024: IFFALSE 52160
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52026: LD_ADDR_VAR 0 16
52030: PUSH
52031: LD_VAR 0 17
52035: PUSH
52036: LD_INT 1
52038: ARRAY
52039: PPUSH
52040: CALL_OW 250
52044: PPUSH
52045: LD_VAR 0 17
52049: PUSH
52050: LD_INT 1
52052: ARRAY
52053: PPUSH
52054: CALL_OW 254
52058: PPUSH
52059: LD_INT 5
52061: PPUSH
52062: CALL_OW 272
52066: PUSH
52067: LD_VAR 0 17
52071: PUSH
52072: LD_INT 1
52074: ARRAY
52075: PPUSH
52076: CALL_OW 251
52080: PPUSH
52081: LD_VAR 0 17
52085: PUSH
52086: LD_INT 1
52088: ARRAY
52089: PPUSH
52090: CALL_OW 254
52094: PPUSH
52095: LD_INT 5
52097: PPUSH
52098: CALL_OW 273
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52107: LD_VAR 0 16
52111: PUSH
52112: LD_INT 1
52114: ARRAY
52115: PPUSH
52116: LD_VAR 0 16
52120: PUSH
52121: LD_INT 2
52123: ARRAY
52124: PPUSH
52125: CALL_OW 488
52129: IFFALSE 52160
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52131: LD_VAR 0 13
52135: PPUSH
52136: LD_VAR 0 16
52140: PUSH
52141: LD_INT 1
52143: ARRAY
52144: PPUSH
52145: LD_VAR 0 16
52149: PUSH
52150: LD_INT 2
52152: ARRAY
52153: PPUSH
52154: CALL_OW 111
// continue ;
52158: GO 51650
// end ; end ; r := GetDir ( tmp ) ;
52160: LD_ADDR_VAR 0 15
52164: PUSH
52165: LD_VAR 0 13
52169: PPUSH
52170: CALL_OW 254
52174: ST_TO_ADDR
// if r = 5 then
52175: LD_VAR 0 15
52179: PUSH
52180: LD_INT 5
52182: EQUAL
52183: IFFALSE 52193
// r := 0 ;
52185: LD_ADDR_VAR 0 15
52189: PUSH
52190: LD_INT 0
52192: ST_TO_ADDR
// for j = r to 5 do
52193: LD_ADDR_VAR 0 10
52197: PUSH
52198: DOUBLE
52199: LD_VAR 0 15
52203: DEC
52204: ST_TO_ADDR
52205: LD_INT 5
52207: PUSH
52208: FOR_TO
52209: IFFALSE 52323
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52211: LD_ADDR_VAR 0 11
52215: PUSH
52216: LD_VAR 0 13
52220: PPUSH
52221: CALL_OW 250
52225: PPUSH
52226: LD_VAR 0 10
52230: PPUSH
52231: LD_INT 2
52233: PPUSH
52234: CALL_OW 272
52238: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52239: LD_ADDR_VAR 0 12
52243: PUSH
52244: LD_VAR 0 13
52248: PPUSH
52249: CALL_OW 251
52253: PPUSH
52254: LD_VAR 0 10
52258: PPUSH
52259: LD_INT 2
52261: PPUSH
52262: CALL_OW 273
52266: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52267: LD_VAR 0 11
52271: PPUSH
52272: LD_VAR 0 12
52276: PPUSH
52277: CALL_OW 488
52281: PUSH
52282: LD_VAR 0 11
52286: PPUSH
52287: LD_VAR 0 12
52291: PPUSH
52292: CALL_OW 428
52296: NOT
52297: AND
52298: IFFALSE 52321
// begin ComMoveXY ( tmp , _x , _y ) ;
52300: LD_VAR 0 13
52304: PPUSH
52305: LD_VAR 0 11
52309: PPUSH
52310: LD_VAR 0 12
52314: PPUSH
52315: CALL_OW 111
// break ;
52319: GO 52323
// end ; end ;
52321: GO 52208
52323: POP
52324: POP
// end ; end ;
52325: GO 51650
52327: POP
52328: POP
// end ;
52329: LD_VAR 0 8
52333: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52334: LD_INT 0
52336: PPUSH
// result := true ;
52337: LD_ADDR_VAR 0 3
52341: PUSH
52342: LD_INT 1
52344: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52345: LD_VAR 0 2
52349: PUSH
52350: LD_INT 24
52352: DOUBLE
52353: EQUAL
52354: IFTRUE 52364
52356: LD_INT 33
52358: DOUBLE
52359: EQUAL
52360: IFTRUE 52364
52362: GO 52389
52364: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52365: LD_ADDR_VAR 0 3
52369: PUSH
52370: LD_INT 32
52372: PPUSH
52373: LD_VAR 0 1
52377: PPUSH
52378: CALL_OW 321
52382: PUSH
52383: LD_INT 2
52385: EQUAL
52386: ST_TO_ADDR
52387: GO 52705
52389: LD_INT 20
52391: DOUBLE
52392: EQUAL
52393: IFTRUE 52397
52395: GO 52422
52397: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52398: LD_ADDR_VAR 0 3
52402: PUSH
52403: LD_INT 6
52405: PPUSH
52406: LD_VAR 0 1
52410: PPUSH
52411: CALL_OW 321
52415: PUSH
52416: LD_INT 2
52418: EQUAL
52419: ST_TO_ADDR
52420: GO 52705
52422: LD_INT 22
52424: DOUBLE
52425: EQUAL
52426: IFTRUE 52436
52428: LD_INT 36
52430: DOUBLE
52431: EQUAL
52432: IFTRUE 52436
52434: GO 52461
52436: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52437: LD_ADDR_VAR 0 3
52441: PUSH
52442: LD_INT 15
52444: PPUSH
52445: LD_VAR 0 1
52449: PPUSH
52450: CALL_OW 321
52454: PUSH
52455: LD_INT 2
52457: EQUAL
52458: ST_TO_ADDR
52459: GO 52705
52461: LD_INT 30
52463: DOUBLE
52464: EQUAL
52465: IFTRUE 52469
52467: GO 52494
52469: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52470: LD_ADDR_VAR 0 3
52474: PUSH
52475: LD_INT 20
52477: PPUSH
52478: LD_VAR 0 1
52482: PPUSH
52483: CALL_OW 321
52487: PUSH
52488: LD_INT 2
52490: EQUAL
52491: ST_TO_ADDR
52492: GO 52705
52494: LD_INT 28
52496: DOUBLE
52497: EQUAL
52498: IFTRUE 52508
52500: LD_INT 21
52502: DOUBLE
52503: EQUAL
52504: IFTRUE 52508
52506: GO 52533
52508: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52509: LD_ADDR_VAR 0 3
52513: PUSH
52514: LD_INT 21
52516: PPUSH
52517: LD_VAR 0 1
52521: PPUSH
52522: CALL_OW 321
52526: PUSH
52527: LD_INT 2
52529: EQUAL
52530: ST_TO_ADDR
52531: GO 52705
52533: LD_INT 16
52535: DOUBLE
52536: EQUAL
52537: IFTRUE 52541
52539: GO 52566
52541: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52542: LD_ADDR_VAR 0 3
52546: PUSH
52547: LD_INT 84
52549: PPUSH
52550: LD_VAR 0 1
52554: PPUSH
52555: CALL_OW 321
52559: PUSH
52560: LD_INT 2
52562: EQUAL
52563: ST_TO_ADDR
52564: GO 52705
52566: LD_INT 19
52568: DOUBLE
52569: EQUAL
52570: IFTRUE 52580
52572: LD_INT 23
52574: DOUBLE
52575: EQUAL
52576: IFTRUE 52580
52578: GO 52605
52580: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52581: LD_ADDR_VAR 0 3
52585: PUSH
52586: LD_INT 83
52588: PPUSH
52589: LD_VAR 0 1
52593: PPUSH
52594: CALL_OW 321
52598: PUSH
52599: LD_INT 2
52601: EQUAL
52602: ST_TO_ADDR
52603: GO 52705
52605: LD_INT 17
52607: DOUBLE
52608: EQUAL
52609: IFTRUE 52613
52611: GO 52638
52613: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52614: LD_ADDR_VAR 0 3
52618: PUSH
52619: LD_INT 39
52621: PPUSH
52622: LD_VAR 0 1
52626: PPUSH
52627: CALL_OW 321
52631: PUSH
52632: LD_INT 2
52634: EQUAL
52635: ST_TO_ADDR
52636: GO 52705
52638: LD_INT 18
52640: DOUBLE
52641: EQUAL
52642: IFTRUE 52646
52644: GO 52671
52646: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52647: LD_ADDR_VAR 0 3
52651: PUSH
52652: LD_INT 40
52654: PPUSH
52655: LD_VAR 0 1
52659: PPUSH
52660: CALL_OW 321
52664: PUSH
52665: LD_INT 2
52667: EQUAL
52668: ST_TO_ADDR
52669: GO 52705
52671: LD_INT 27
52673: DOUBLE
52674: EQUAL
52675: IFTRUE 52679
52677: GO 52704
52679: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52680: LD_ADDR_VAR 0 3
52684: PUSH
52685: LD_INT 35
52687: PPUSH
52688: LD_VAR 0 1
52692: PPUSH
52693: CALL_OW 321
52697: PUSH
52698: LD_INT 2
52700: EQUAL
52701: ST_TO_ADDR
52702: GO 52705
52704: POP
// end ;
52705: LD_VAR 0 3
52709: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52710: LD_INT 0
52712: PPUSH
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
52717: PPUSH
52718: PPUSH
52719: PPUSH
52720: PPUSH
52721: PPUSH
52722: PPUSH
// result := false ;
52723: LD_ADDR_VAR 0 6
52727: PUSH
52728: LD_INT 0
52730: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52731: LD_VAR 0 1
52735: NOT
52736: PUSH
52737: LD_VAR 0 1
52741: PPUSH
52742: CALL_OW 266
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: IN
52757: NOT
52758: OR
52759: PUSH
52760: LD_VAR 0 2
52764: NOT
52765: OR
52766: PUSH
52767: LD_VAR 0 5
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: LD_INT 3
52783: PUSH
52784: LD_INT 4
52786: PUSH
52787: LD_INT 5
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: IN
52798: NOT
52799: OR
52800: PUSH
52801: LD_VAR 0 3
52805: PPUSH
52806: LD_VAR 0 4
52810: PPUSH
52811: CALL_OW 488
52815: NOT
52816: OR
52817: IFFALSE 52821
// exit ;
52819: GO 53557
// side := GetSide ( depot ) ;
52821: LD_ADDR_VAR 0 9
52825: PUSH
52826: LD_VAR 0 1
52830: PPUSH
52831: CALL_OW 255
52835: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52836: LD_VAR 0 9
52840: PPUSH
52841: LD_VAR 0 2
52845: PPUSH
52846: CALL 52334 0 2
52850: NOT
52851: IFFALSE 52855
// exit ;
52853: GO 53557
// pom := GetBase ( depot ) ;
52855: LD_ADDR_VAR 0 10
52859: PUSH
52860: LD_VAR 0 1
52864: PPUSH
52865: CALL_OW 274
52869: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52870: LD_ADDR_VAR 0 11
52874: PUSH
52875: LD_VAR 0 2
52879: PPUSH
52880: LD_VAR 0 1
52884: PPUSH
52885: CALL_OW 248
52889: PPUSH
52890: CALL_OW 450
52894: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52895: LD_VAR 0 10
52899: PPUSH
52900: LD_INT 1
52902: PPUSH
52903: CALL_OW 275
52907: PUSH
52908: LD_VAR 0 11
52912: PUSH
52913: LD_INT 1
52915: ARRAY
52916: GREATEREQUAL
52917: PUSH
52918: LD_VAR 0 10
52922: PPUSH
52923: LD_INT 2
52925: PPUSH
52926: CALL_OW 275
52930: PUSH
52931: LD_VAR 0 11
52935: PUSH
52936: LD_INT 2
52938: ARRAY
52939: GREATEREQUAL
52940: AND
52941: PUSH
52942: LD_VAR 0 10
52946: PPUSH
52947: LD_INT 3
52949: PPUSH
52950: CALL_OW 275
52954: PUSH
52955: LD_VAR 0 11
52959: PUSH
52960: LD_INT 3
52962: ARRAY
52963: GREATEREQUAL
52964: AND
52965: NOT
52966: IFFALSE 52970
// exit ;
52968: GO 53557
// if GetBType ( depot ) = b_depot then
52970: LD_VAR 0 1
52974: PPUSH
52975: CALL_OW 266
52979: PUSH
52980: LD_INT 0
52982: EQUAL
52983: IFFALSE 52995
// dist := 28 else
52985: LD_ADDR_VAR 0 14
52989: PUSH
52990: LD_INT 28
52992: ST_TO_ADDR
52993: GO 53003
// dist := 36 ;
52995: LD_ADDR_VAR 0 14
52999: PUSH
53000: LD_INT 36
53002: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53003: LD_VAR 0 1
53007: PPUSH
53008: LD_VAR 0 3
53012: PPUSH
53013: LD_VAR 0 4
53017: PPUSH
53018: CALL_OW 297
53022: PUSH
53023: LD_VAR 0 14
53027: GREATER
53028: IFFALSE 53032
// exit ;
53030: GO 53557
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53032: LD_ADDR_VAR 0 12
53036: PUSH
53037: LD_VAR 0 2
53041: PPUSH
53042: LD_VAR 0 3
53046: PPUSH
53047: LD_VAR 0 4
53051: PPUSH
53052: LD_VAR 0 5
53056: PPUSH
53057: LD_VAR 0 1
53061: PPUSH
53062: CALL_OW 248
53066: PPUSH
53067: LD_INT 0
53069: PPUSH
53070: CALL 53562 0 6
53074: ST_TO_ADDR
// if not hexes then
53075: LD_VAR 0 12
53079: NOT
53080: IFFALSE 53084
// exit ;
53082: GO 53557
// hex := GetHexInfo ( x , y ) ;
53084: LD_ADDR_VAR 0 15
53088: PUSH
53089: LD_VAR 0 3
53093: PPUSH
53094: LD_VAR 0 4
53098: PPUSH
53099: CALL_OW 546
53103: ST_TO_ADDR
// if hex [ 1 ] then
53104: LD_VAR 0 15
53108: PUSH
53109: LD_INT 1
53111: ARRAY
53112: IFFALSE 53116
// exit ;
53114: GO 53557
// height := hex [ 2 ] ;
53116: LD_ADDR_VAR 0 13
53120: PUSH
53121: LD_VAR 0 15
53125: PUSH
53126: LD_INT 2
53128: ARRAY
53129: ST_TO_ADDR
// for i = 1 to hexes do
53130: LD_ADDR_VAR 0 7
53134: PUSH
53135: DOUBLE
53136: LD_INT 1
53138: DEC
53139: ST_TO_ADDR
53140: LD_VAR 0 12
53144: PUSH
53145: FOR_TO
53146: IFFALSE 53476
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53148: LD_VAR 0 12
53152: PUSH
53153: LD_VAR 0 7
53157: ARRAY
53158: PUSH
53159: LD_INT 1
53161: ARRAY
53162: PPUSH
53163: LD_VAR 0 12
53167: PUSH
53168: LD_VAR 0 7
53172: ARRAY
53173: PUSH
53174: LD_INT 2
53176: ARRAY
53177: PPUSH
53178: CALL_OW 488
53182: NOT
53183: PUSH
53184: LD_VAR 0 12
53188: PUSH
53189: LD_VAR 0 7
53193: ARRAY
53194: PUSH
53195: LD_INT 1
53197: ARRAY
53198: PPUSH
53199: LD_VAR 0 12
53203: PUSH
53204: LD_VAR 0 7
53208: ARRAY
53209: PUSH
53210: LD_INT 2
53212: ARRAY
53213: PPUSH
53214: CALL_OW 428
53218: PUSH
53219: LD_INT 0
53221: GREATER
53222: OR
53223: PUSH
53224: LD_VAR 0 12
53228: PUSH
53229: LD_VAR 0 7
53233: ARRAY
53234: PUSH
53235: LD_INT 1
53237: ARRAY
53238: PPUSH
53239: LD_VAR 0 12
53243: PUSH
53244: LD_VAR 0 7
53248: ARRAY
53249: PUSH
53250: LD_INT 2
53252: ARRAY
53253: PPUSH
53254: CALL_OW 351
53258: OR
53259: IFFALSE 53265
// exit ;
53261: POP
53262: POP
53263: GO 53557
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53265: LD_ADDR_VAR 0 8
53269: PUSH
53270: LD_VAR 0 12
53274: PUSH
53275: LD_VAR 0 7
53279: ARRAY
53280: PUSH
53281: LD_INT 1
53283: ARRAY
53284: PPUSH
53285: LD_VAR 0 12
53289: PUSH
53290: LD_VAR 0 7
53294: ARRAY
53295: PUSH
53296: LD_INT 2
53298: ARRAY
53299: PPUSH
53300: CALL_OW 546
53304: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53305: LD_VAR 0 8
53309: PUSH
53310: LD_INT 1
53312: ARRAY
53313: PUSH
53314: LD_VAR 0 8
53318: PUSH
53319: LD_INT 2
53321: ARRAY
53322: PUSH
53323: LD_VAR 0 13
53327: PUSH
53328: LD_INT 2
53330: PLUS
53331: GREATER
53332: OR
53333: PUSH
53334: LD_VAR 0 8
53338: PUSH
53339: LD_INT 2
53341: ARRAY
53342: PUSH
53343: LD_VAR 0 13
53347: PUSH
53348: LD_INT 2
53350: MINUS
53351: LESS
53352: OR
53353: PUSH
53354: LD_VAR 0 8
53358: PUSH
53359: LD_INT 3
53361: ARRAY
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 8
53368: PUSH
53369: LD_INT 9
53371: PUSH
53372: LD_INT 10
53374: PUSH
53375: LD_INT 11
53377: PUSH
53378: LD_INT 12
53380: PUSH
53381: LD_INT 13
53383: PUSH
53384: LD_INT 16
53386: PUSH
53387: LD_INT 17
53389: PUSH
53390: LD_INT 18
53392: PUSH
53393: LD_INT 19
53395: PUSH
53396: LD_INT 20
53398: PUSH
53399: LD_INT 21
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: IN
53417: NOT
53418: OR
53419: PUSH
53420: LD_VAR 0 8
53424: PUSH
53425: LD_INT 5
53427: ARRAY
53428: NOT
53429: OR
53430: PUSH
53431: LD_VAR 0 8
53435: PUSH
53436: LD_INT 6
53438: ARRAY
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: LD_INT 7
53448: PUSH
53449: LD_INT 9
53451: PUSH
53452: LD_INT 10
53454: PUSH
53455: LD_INT 11
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: IN
53466: NOT
53467: OR
53468: IFFALSE 53474
// exit ;
53470: POP
53471: POP
53472: GO 53557
// end ;
53474: GO 53145
53476: POP
53477: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53478: LD_VAR 0 9
53482: PPUSH
53483: LD_VAR 0 3
53487: PPUSH
53488: LD_VAR 0 4
53492: PPUSH
53493: LD_INT 20
53495: PPUSH
53496: CALL 45509 0 4
53500: PUSH
53501: LD_INT 4
53503: ARRAY
53504: IFFALSE 53508
// exit ;
53506: GO 53557
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53508: LD_VAR 0 2
53512: PUSH
53513: LD_INT 29
53515: PUSH
53516: LD_INT 30
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: IN
53523: PUSH
53524: LD_VAR 0 3
53528: PPUSH
53529: LD_VAR 0 4
53533: PPUSH
53534: LD_VAR 0 9
53538: PPUSH
53539: CALL_OW 440
53543: NOT
53544: AND
53545: IFFALSE 53549
// exit ;
53547: GO 53557
// result := true ;
53549: LD_ADDR_VAR 0 6
53553: PUSH
53554: LD_INT 1
53556: ST_TO_ADDR
// end ;
53557: LD_VAR 0 6
53561: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53562: LD_INT 0
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
53568: PPUSH
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
53575: PPUSH
53576: PPUSH
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
53584: PPUSH
53585: PPUSH
53586: PPUSH
53587: PPUSH
53588: PPUSH
53589: PPUSH
53590: PPUSH
53591: PPUSH
53592: PPUSH
53593: PPUSH
53594: PPUSH
53595: PPUSH
53596: PPUSH
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
53601: PPUSH
53602: PPUSH
53603: PPUSH
53604: PPUSH
53605: PPUSH
53606: PPUSH
53607: PPUSH
53608: PPUSH
53609: PPUSH
53610: PPUSH
53611: PPUSH
53612: PPUSH
53613: PPUSH
53614: PPUSH
53615: PPUSH
53616: PPUSH
53617: PPUSH
53618: PPUSH
53619: PPUSH
53620: PPUSH
53621: PPUSH
// result = [ ] ;
53622: LD_ADDR_VAR 0 7
53626: PUSH
53627: EMPTY
53628: ST_TO_ADDR
// temp_list = [ ] ;
53629: LD_ADDR_VAR 0 9
53633: PUSH
53634: EMPTY
53635: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53636: LD_VAR 0 4
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: LD_INT 4
53655: PUSH
53656: LD_INT 5
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: IN
53667: NOT
53668: PUSH
53669: LD_VAR 0 1
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: IN
53684: PUSH
53685: LD_VAR 0 5
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: LD_INT 3
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: IN
53704: NOT
53705: AND
53706: OR
53707: IFFALSE 53711
// exit ;
53709: GO 72102
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53711: LD_VAR 0 1
53715: PUSH
53716: LD_INT 6
53718: PUSH
53719: LD_INT 7
53721: PUSH
53722: LD_INT 8
53724: PUSH
53725: LD_INT 13
53727: PUSH
53728: LD_INT 12
53730: PUSH
53731: LD_INT 15
53733: PUSH
53734: LD_INT 11
53736: PUSH
53737: LD_INT 14
53739: PUSH
53740: LD_INT 10
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: IN
53754: IFFALSE 53764
// btype = b_lab ;
53756: LD_ADDR_VAR 0 1
53760: PUSH
53761: LD_INT 6
53763: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53764: LD_VAR 0 6
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: IN
53783: NOT
53784: PUSH
53785: LD_VAR 0 1
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: LD_INT 3
53801: PUSH
53802: LD_INT 6
53804: PUSH
53805: LD_INT 36
53807: PUSH
53808: LD_INT 4
53810: PUSH
53811: LD_INT 5
53813: PUSH
53814: LD_INT 31
53816: PUSH
53817: LD_INT 32
53819: PUSH
53820: LD_INT 33
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: IN
53836: NOT
53837: PUSH
53838: LD_VAR 0 6
53842: PUSH
53843: LD_INT 1
53845: EQUAL
53846: AND
53847: OR
53848: PUSH
53849: LD_VAR 0 1
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: LD_INT 3
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: IN
53864: NOT
53865: PUSH
53866: LD_VAR 0 6
53870: PUSH
53871: LD_INT 2
53873: EQUAL
53874: AND
53875: OR
53876: IFFALSE 53886
// mode = 0 ;
53878: LD_ADDR_VAR 0 6
53882: PUSH
53883: LD_INT 0
53885: ST_TO_ADDR
// case mode of 0 :
53886: LD_VAR 0 6
53890: PUSH
53891: LD_INT 0
53893: DOUBLE
53894: EQUAL
53895: IFTRUE 53899
53897: GO 65352
53899: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53900: LD_ADDR_VAR 0 11
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54093: LD_ADDR_VAR 0 12
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 3
54250: NEG
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 3
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54289: LD_ADDR_VAR 0 13
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: LD_INT 3
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 3
54448: NEG
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 3
54460: NEG
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54488: LD_ADDR_VAR 0 14
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54684: LD_ADDR_VAR 0 15
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54877: LD_ADDR_VAR 0 16
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: LD_INT 3
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 3
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55070: LD_ADDR_VAR 0 17
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55300: LD_ADDR_VAR 0 18
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55530: LD_ADDR_VAR 0 19
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55760: LD_ADDR_VAR 0 20
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55990: LD_ADDR_VAR 0 21
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56220: LD_ADDR_VAR 0 22
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56450: LD_ADDR_VAR 0 23
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 3
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: LD_INT 3
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56730: LD_ADDR_VAR 0 24
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 3
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57006: LD_ADDR_VAR 0 25
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 3
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 3
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57280: LD_ADDR_VAR 0 26
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57556: LD_ADDR_VAR 0 27
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: NEG
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: NEG
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57836: LD_ADDR_VAR 0 28
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: LD_INT 2
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 2
58012: NEG
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: LD_INT 2
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: NEG
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58118: LD_ADDR_VAR 0 29
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: LD_INT 3
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 3
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: LD_INT 2
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58397: LD_ADDR_VAR 0 30
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 2
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 3
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 3
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: LD_INT 3
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 3
58640: NEG
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58675: LD_ADDR_VAR 0 31
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 3
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 3
58918: NEG
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58953: LD_ADDR_VAR 0 32
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 3
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: LD_INT 3
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 3
59196: NEG
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59231: LD_ADDR_VAR 0 33
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: NEG
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 2
59409: NEG
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: LD_INT 3
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 3
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 3
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 3
59475: NEG
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59510: LD_ADDR_VAR 0 34
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: NEG
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: LD_INT 2
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: LD_INT 3
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 3
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 3
59755: NEG
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59790: LD_ADDR_VAR 0 35
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59902: LD_ADDR_VAR 0 36
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: LD_INT 2
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60014: LD_ADDR_VAR 0 37
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60126: LD_ADDR_VAR 0 38
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60238: LD_ADDR_VAR 0 39
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60350: LD_ADDR_VAR 0 40
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60462: LD_ADDR_VAR 0 41
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: LD_INT 3
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 3
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 3
60705: PUSH
60706: LD_INT 3
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 2
60725: NEG
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: NEG
60760: PUSH
60761: LD_INT 2
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 3
60771: NEG
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60812: LD_ADDR_VAR 0 42
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: NEG
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 3
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 3
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: LD_INT 3
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: LD_INT 3
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 3
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 3
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 2
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 3
61109: NEG
61110: PUSH
61111: LD_INT 2
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 3
61121: NEG
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61162: LD_ADDR_VAR 0 43
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 3
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 3
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 3
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: NEG
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: NEG
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 3
61469: NEG
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61510: LD_ADDR_VAR 0 44
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 2
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: NEG
61701: PUSH
61702: LD_INT 3
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 2
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 3
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: LD_INT 2
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 2
61763: PUSH
61764: LD_INT 3
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 2
61773: NEG
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: LD_INT 2
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 3
61819: NEG
61820: PUSH
61821: LD_INT 3
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61860: LD_ADDR_VAR 0 45
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: LD_INT 2
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: LD_INT 2
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 2
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 2
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: LD_INT 2
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: NEG
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: LD_INT 2
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: LD_INT 3
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 3
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: LD_INT 2
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 3
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 3
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: LD_INT 3
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: LD_INT 3
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 3
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 2
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: LD_INT 2
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62210: LD_ADDR_VAR 0 46
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 2
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 3
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 3
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: LD_INT 1
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: LD_INT 3
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: NEG
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 3
62517: NEG
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62558: LD_ADDR_VAR 0 47
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: LD_INT 2
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 2
62673: NEG
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62709: LD_ADDR_VAR 0 48
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: LD_INT 2
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 2
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 2
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62856: LD_ADDR_VAR 0 49
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 2
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 2
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63000: LD_ADDR_VAR 0 50
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 1
63058: NEG
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 1
63069: NEG
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 2
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 2
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: LD_INT 2
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 2
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63144: LD_ADDR_VAR 0 51
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: LD_INT 2
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: NEG
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63291: LD_ADDR_VAR 0 52
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 1
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 2
63395: NEG
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 2
63418: NEG
63419: PUSH
63420: LD_INT 2
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63442: LD_ADDR_VAR 0 53
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 1
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 1
63500: NEG
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 1
63511: NEG
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: LD_INT 2
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: LD_INT 2
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: PUSH
63588: LD_INT 2
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 2
63618: NEG
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: NEG
63630: PUSH
63631: LD_INT 1
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 2
63641: NEG
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63672: LD_ADDR_VAR 0 54
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: LD_INT 1
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: LD_INT 2
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 2
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: LD_INT 2
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: LD_INT 2
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 2
63848: NEG
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: NEG
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: LD_INT 2
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63902: LD_ADDR_VAR 0 55
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: LD_INT 1
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: LD_INT 1
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: LD_INT 1
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 2
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 2
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 2
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: LD_INT 2
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 2
64078: NEG
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 2
64101: NEG
64102: PUSH
64103: LD_INT 2
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64132: LD_ADDR_VAR 0 56
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: LD_INT 1
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: LD_INT 1
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: LD_INT 2
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: LD_INT 2
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 2
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 2
64267: PUSH
64268: LD_INT 2
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 1
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: NEG
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 2
64308: NEG
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 2
64319: NEG
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: NEG
64332: PUSH
64333: LD_INT 2
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64362: LD_ADDR_VAR 0 57
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: PUSH
64401: LD_INT 1
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 1
64431: NEG
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: LD_INT 2
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: LD_INT 1
64469: NEG
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 2
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 2
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 2
64497: PUSH
64498: LD_INT 2
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: LD_INT 2
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: LD_INT 2
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 2
64538: NEG
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 2
64549: NEG
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 2
64561: NEG
64562: PUSH
64563: LD_INT 2
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64592: LD_ADDR_VAR 0 58
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: LD_INT 0
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: LD_INT 1
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: LD_INT 1
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: LD_INT 2
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: LD_INT 2
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 1
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 2
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 2
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 2
64727: PUSH
64728: LD_INT 2
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 1
64737: PUSH
64738: LD_INT 2
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: LD_INT 2
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: LD_INT 1
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 2
64768: NEG
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 2
64779: NEG
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 2
64791: NEG
64792: PUSH
64793: LD_INT 2
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64822: LD_ADDR_VAR 0 59
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64910: LD_ADDR_VAR 0 60
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: NEG
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64998: LD_ADDR_VAR 0 61
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 0
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 1
65067: NEG
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65086: LD_ADDR_VAR 0 62
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 1
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 1
65155: NEG
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65174: LD_ADDR_VAR 0 63
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 1
65212: PUSH
65213: LD_INT 1
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: LD_INT 1
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: LD_INT 0
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65262: LD_ADDR_VAR 0 64
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 1
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 1
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: LD_INT 1
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: ST_TO_ADDR
// end ; 1 :
65350: GO 71247
65352: LD_INT 1
65354: DOUBLE
65355: EQUAL
65356: IFTRUE 65360
65358: GO 67983
65360: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65361: LD_ADDR_VAR 0 11
65365: PUSH
65366: LD_INT 1
65368: NEG
65369: PUSH
65370: LD_INT 3
65372: NEG
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: LD_INT 3
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: LIST
65404: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65405: LD_ADDR_VAR 0 12
65409: PUSH
65410: LD_INT 2
65412: PUSH
65413: LD_INT 1
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 3
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 3
65433: PUSH
65434: LD_INT 1
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: LIST
65445: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65446: LD_ADDR_VAR 0 13
65450: PUSH
65451: LD_INT 3
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 3
65463: PUSH
65464: LD_INT 3
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: LD_INT 3
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65486: LD_ADDR_VAR 0 14
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: LD_INT 3
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 0
65503: PUSH
65504: LD_INT 3
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: LD_INT 2
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: LIST
65526: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65527: LD_ADDR_VAR 0 15
65531: PUSH
65532: LD_INT 2
65534: NEG
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 3
65545: NEG
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 3
65556: NEG
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: LIST
65570: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65571: LD_ADDR_VAR 0 16
65575: PUSH
65576: LD_INT 2
65578: NEG
65579: PUSH
65580: LD_INT 3
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 3
65590: NEG
65591: PUSH
65592: LD_INT 2
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 3
65602: NEG
65603: PUSH
65604: LD_INT 3
65606: NEG
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65617: LD_ADDR_VAR 0 17
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: LD_INT 3
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 0
65636: PUSH
65637: LD_INT 3
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 2
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: LIST
65660: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65661: LD_ADDR_VAR 0 18
65665: PUSH
65666: LD_INT 2
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 3
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 3
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: LIST
65701: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65702: LD_ADDR_VAR 0 19
65706: PUSH
65707: LD_INT 3
65709: PUSH
65710: LD_INT 2
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 3
65719: PUSH
65720: LD_INT 3
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 2
65729: PUSH
65730: LD_INT 3
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: LIST
65741: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65742: LD_ADDR_VAR 0 20
65746: PUSH
65747: LD_INT 1
65749: PUSH
65750: LD_INT 3
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: LD_INT 3
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: LD_INT 2
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: LIST
65782: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65783: LD_ADDR_VAR 0 21
65787: PUSH
65788: LD_INT 2
65790: NEG
65791: PUSH
65792: LD_INT 1
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 3
65801: NEG
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 3
65812: NEG
65813: PUSH
65814: LD_INT 1
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: LIST
65826: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65827: LD_ADDR_VAR 0 22
65831: PUSH
65832: LD_INT 2
65834: NEG
65835: PUSH
65836: LD_INT 3
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 3
65846: NEG
65847: PUSH
65848: LD_INT 2
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 3
65858: NEG
65859: PUSH
65860: LD_INT 3
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: LIST
65872: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65873: LD_ADDR_VAR 0 23
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: LD_INT 3
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 1
65891: NEG
65892: PUSH
65893: LD_INT 4
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 1
65903: PUSH
65904: LD_INT 3
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: LIST
65916: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65917: LD_ADDR_VAR 0 24
65921: PUSH
65922: LD_INT 3
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 3
65934: PUSH
65935: LD_INT 1
65937: NEG
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 4
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: LIST
65957: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65958: LD_ADDR_VAR 0 25
65962: PUSH
65963: LD_INT 3
65965: PUSH
65966: LD_INT 3
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 4
65975: PUSH
65976: LD_INT 3
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: LD_INT 4
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65998: LD_ADDR_VAR 0 26
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: LD_INT 3
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: LD_INT 4
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: LD_INT 3
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: LIST
66038: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66039: LD_ADDR_VAR 0 27
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 3
66057: NEG
66058: PUSH
66059: LD_INT 1
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 4
66068: NEG
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66083: LD_ADDR_VAR 0 28
66087: PUSH
66088: LD_INT 3
66090: NEG
66091: PUSH
66092: LD_INT 3
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 3
66102: NEG
66103: PUSH
66104: LD_INT 4
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 4
66114: NEG
66115: PUSH
66116: LD_INT 3
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66129: LD_ADDR_VAR 0 29
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: LD_INT 3
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 3
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: LD_INT 2
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: LD_INT 4
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 4
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: LD_INT 3
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: LD_INT 5
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: LD_INT 5
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: LD_INT 4
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 1
66238: NEG
66239: PUSH
66240: LD_INT 6
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 6
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 1
66261: PUSH
66262: LD_INT 5
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66284: LD_ADDR_VAR 0 30
66288: PUSH
66289: LD_INT 2
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 3
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 3
66322: PUSH
66323: LD_INT 1
66325: NEG
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 4
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 4
66343: PUSH
66344: LD_INT 1
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 4
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 5
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 5
66374: PUSH
66375: LD_INT 1
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 5
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 6
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 6
66405: PUSH
66406: LD_INT 1
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66427: LD_ADDR_VAR 0 31
66431: PUSH
66432: LD_INT 3
66434: PUSH
66435: LD_INT 2
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 3
66444: PUSH
66445: LD_INT 3
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 2
66454: PUSH
66455: LD_INT 3
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 4
66464: PUSH
66465: LD_INT 3
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 4
66474: PUSH
66475: LD_INT 4
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: LD_INT 4
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 5
66494: PUSH
66495: LD_INT 4
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 5
66504: PUSH
66505: LD_INT 5
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 4
66514: PUSH
66515: LD_INT 5
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 6
66524: PUSH
66525: LD_INT 5
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 6
66534: PUSH
66535: LD_INT 6
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 5
66544: PUSH
66545: LD_INT 6
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66566: LD_ADDR_VAR 0 32
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: LD_INT 3
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: LD_INT 3
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: LD_INT 4
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: LD_INT 4
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 1
66624: NEG
66625: PUSH
66626: LD_INT 3
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: LD_INT 5
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 5
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: LD_INT 4
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 1
66666: PUSH
66667: LD_INT 6
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: LD_INT 6
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: LD_INT 5
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66709: LD_ADDR_VAR 0 33
66713: PUSH
66714: LD_INT 2
66716: NEG
66717: PUSH
66718: LD_INT 1
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 3
66727: NEG
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 3
66738: NEG
66739: PUSH
66740: LD_INT 1
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 3
66750: NEG
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 4
66761: NEG
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 4
66772: NEG
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 4
66784: NEG
66785: PUSH
66786: LD_INT 1
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 5
66795: NEG
66796: PUSH
66797: LD_INT 0
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 5
66806: NEG
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 5
66818: NEG
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 6
66829: NEG
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 6
66840: NEG
66841: PUSH
66842: LD_INT 1
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66864: LD_ADDR_VAR 0 34
66868: PUSH
66869: LD_INT 2
66871: NEG
66872: PUSH
66873: LD_INT 3
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 3
66883: NEG
66884: PUSH
66885: LD_INT 2
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 3
66895: NEG
66896: PUSH
66897: LD_INT 3
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 3
66907: NEG
66908: PUSH
66909: LD_INT 4
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 4
66919: NEG
66920: PUSH
66921: LD_INT 3
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 4
66931: NEG
66932: PUSH
66933: LD_INT 4
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 4
66943: NEG
66944: PUSH
66945: LD_INT 5
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 5
66955: NEG
66956: PUSH
66957: LD_INT 4
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 5
66967: NEG
66968: PUSH
66969: LD_INT 5
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 5
66979: NEG
66980: PUSH
66981: LD_INT 6
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 6
66991: NEG
66992: PUSH
66993: LD_INT 5
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 6
67003: NEG
67004: PUSH
67005: LD_INT 6
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67027: LD_ADDR_VAR 0 41
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 2
67037: NEG
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 1
67045: NEG
67046: PUSH
67047: LD_INT 3
67049: NEG
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 1
67057: PUSH
67058: LD_INT 2
67060: NEG
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: LIST
67070: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67071: LD_ADDR_VAR 0 42
67075: PUSH
67076: LD_INT 2
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 2
67088: PUSH
67089: LD_INT 1
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 3
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: LIST
67111: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67112: LD_ADDR_VAR 0 43
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: LD_INT 2
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 3
67129: PUSH
67130: LD_INT 2
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 2
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: LIST
67151: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67152: LD_ADDR_VAR 0 44
67156: PUSH
67157: LD_INT 0
67159: PUSH
67160: LD_INT 2
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 1
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 1
67179: NEG
67180: PUSH
67181: LD_INT 2
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: LIST
67192: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67193: LD_ADDR_VAR 0 45
67197: PUSH
67198: LD_INT 2
67200: NEG
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 2
67211: NEG
67212: PUSH
67213: LD_INT 1
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 3
67222: NEG
67223: PUSH
67224: LD_INT 1
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: LIST
67236: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67237: LD_ADDR_VAR 0 46
67241: PUSH
67242: LD_INT 2
67244: NEG
67245: PUSH
67246: LD_INT 2
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 2
67256: NEG
67257: PUSH
67258: LD_INT 3
67260: NEG
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 3
67268: NEG
67269: PUSH
67270: LD_INT 2
67272: NEG
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: LIST
67282: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67283: LD_ADDR_VAR 0 47
67287: PUSH
67288: LD_INT 2
67290: NEG
67291: PUSH
67292: LD_INT 3
67294: NEG
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: LD_INT 3
67306: NEG
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67316: LD_ADDR_VAR 0 48
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: LD_INT 2
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 2
67334: PUSH
67335: LD_INT 1
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67347: LD_ADDR_VAR 0 49
67351: PUSH
67352: LD_INT 3
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 3
67364: PUSH
67365: LD_INT 2
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67376: LD_ADDR_VAR 0 50
67380: PUSH
67381: LD_INT 2
67383: PUSH
67384: LD_INT 3
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: LD_INT 3
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67405: LD_ADDR_VAR 0 51
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 2
67423: NEG
67424: PUSH
67425: LD_INT 1
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67436: LD_ADDR_VAR 0 52
67440: PUSH
67441: LD_INT 3
67443: NEG
67444: PUSH
67445: LD_INT 1
67447: NEG
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 3
67455: NEG
67456: PUSH
67457: LD_INT 2
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67469: LD_ADDR_VAR 0 53
67473: PUSH
67474: LD_INT 1
67476: NEG
67477: PUSH
67478: LD_INT 3
67480: NEG
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 0
67488: PUSH
67489: LD_INT 3
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67513: LD_ADDR_VAR 0 54
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: LD_INT 1
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 3
67541: PUSH
67542: LD_INT 1
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: LIST
67553: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67554: LD_ADDR_VAR 0 55
67558: PUSH
67559: LD_INT 3
67561: PUSH
67562: LD_INT 2
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 3
67571: PUSH
67572: LD_INT 3
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 2
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67594: LD_ADDR_VAR 0 56
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: LIST
67634: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67635: LD_ADDR_VAR 0 57
67639: PUSH
67640: LD_INT 2
67642: NEG
67643: PUSH
67644: LD_INT 1
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 3
67653: NEG
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 3
67664: NEG
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: LIST
67678: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67679: LD_ADDR_VAR 0 58
67683: PUSH
67684: LD_INT 2
67686: NEG
67687: PUSH
67688: LD_INT 3
67690: NEG
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 3
67698: NEG
67699: PUSH
67700: LD_INT 2
67702: NEG
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 3
67710: NEG
67711: PUSH
67712: LD_INT 3
67714: NEG
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: LIST
67724: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67725: LD_ADDR_VAR 0 59
67729: PUSH
67730: LD_INT 1
67732: NEG
67733: PUSH
67734: LD_INT 2
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 0
67744: PUSH
67745: LD_INT 2
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: LD_INT 1
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: LIST
67768: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67769: LD_ADDR_VAR 0 60
67773: PUSH
67774: LD_INT 1
67776: PUSH
67777: LD_INT 1
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 2
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67810: LD_ADDR_VAR 0 61
67814: PUSH
67815: LD_INT 2
67817: PUSH
67818: LD_INT 1
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 2
67827: PUSH
67828: LD_INT 2
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: LD_INT 2
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: LIST
67849: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67850: LD_ADDR_VAR 0 62
67854: PUSH
67855: LD_INT 1
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 0
67867: PUSH
67868: LD_INT 2
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 1
67877: NEG
67878: PUSH
67879: LD_INT 1
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: LIST
67890: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67891: LD_ADDR_VAR 0 63
67895: PUSH
67896: LD_INT 1
67898: NEG
67899: PUSH
67900: LD_INT 1
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: NEG
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: NEG
67921: PUSH
67922: LD_INT 1
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: LIST
67934: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67935: LD_ADDR_VAR 0 64
67939: PUSH
67940: LD_INT 1
67942: NEG
67943: PUSH
67944: LD_INT 2
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 2
67954: NEG
67955: PUSH
67956: LD_INT 1
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: LD_INT 2
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: LIST
67980: ST_TO_ADDR
// end ; 2 :
67981: GO 71247
67983: LD_INT 2
67985: DOUBLE
67986: EQUAL
67987: IFTRUE 67991
67989: GO 71246
67991: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67992: LD_ADDR_VAR 0 29
67996: PUSH
67997: LD_INT 4
67999: PUSH
68000: LD_INT 0
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 4
68009: PUSH
68010: LD_INT 1
68012: NEG
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 5
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 5
68030: PUSH
68031: LD_INT 1
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 4
68040: PUSH
68041: LD_INT 1
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 3
68060: PUSH
68061: LD_INT 1
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 3
68071: PUSH
68072: LD_INT 2
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 5
68082: PUSH
68083: LD_INT 2
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 3
68092: PUSH
68093: LD_INT 3
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 3
68102: PUSH
68103: LD_INT 2
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 4
68112: PUSH
68113: LD_INT 3
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 4
68122: PUSH
68123: LD_INT 4
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 3
68132: PUSH
68133: LD_INT 4
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: LD_INT 3
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 2
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 4
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 2
68172: PUSH
68173: LD_INT 4
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 0
68182: PUSH
68183: LD_INT 4
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: LD_INT 3
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 1
68202: PUSH
68203: LD_INT 4
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 1
68212: PUSH
68213: LD_INT 5
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: LD_INT 5
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: NEG
68233: PUSH
68234: LD_INT 4
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 1
68243: NEG
68244: PUSH
68245: LD_INT 3
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 2
68254: PUSH
68255: LD_INT 5
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 2
68264: NEG
68265: PUSH
68266: LD_INT 3
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 3
68275: NEG
68276: PUSH
68277: LD_INT 0
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 3
68286: NEG
68287: PUSH
68288: LD_INT 1
68290: NEG
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 2
68298: NEG
68299: PUSH
68300: LD_INT 0
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 2
68309: NEG
68310: PUSH
68311: LD_INT 1
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 3
68320: NEG
68321: PUSH
68322: LD_INT 1
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 4
68331: NEG
68332: PUSH
68333: LD_INT 0
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 4
68342: NEG
68343: PUSH
68344: LD_INT 1
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 4
68354: NEG
68355: PUSH
68356: LD_INT 2
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 2
68366: NEG
68367: PUSH
68368: LD_INT 2
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 4
68377: NEG
68378: PUSH
68379: LD_INT 4
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 4
68389: NEG
68390: PUSH
68391: LD_INT 5
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 3
68401: NEG
68402: PUSH
68403: LD_INT 4
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 3
68413: NEG
68414: PUSH
68415: LD_INT 3
68417: NEG
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 4
68425: NEG
68426: PUSH
68427: LD_INT 3
68429: NEG
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 5
68437: NEG
68438: PUSH
68439: LD_INT 4
68441: NEG
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 5
68449: NEG
68450: PUSH
68451: LD_INT 5
68453: NEG
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 3
68461: NEG
68462: PUSH
68463: LD_INT 5
68465: NEG
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 5
68473: NEG
68474: PUSH
68475: LD_INT 3
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68530: LD_ADDR_VAR 0 30
68534: PUSH
68535: LD_INT 4
68537: PUSH
68538: LD_INT 4
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 4
68547: PUSH
68548: LD_INT 3
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 5
68557: PUSH
68558: LD_INT 4
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 5
68567: PUSH
68568: LD_INT 5
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 4
68577: PUSH
68578: LD_INT 5
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 3
68587: PUSH
68588: LD_INT 4
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 3
68597: PUSH
68598: LD_INT 3
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 5
68607: PUSH
68608: LD_INT 3
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 3
68617: PUSH
68618: LD_INT 5
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: LD_INT 3
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: LD_INT 2
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 1
68647: PUSH
68648: LD_INT 3
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 1
68657: PUSH
68658: LD_INT 4
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 0
68667: PUSH
68668: LD_INT 4
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 1
68677: NEG
68678: PUSH
68679: LD_INT 3
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 1
68688: NEG
68689: PUSH
68690: LD_INT 2
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 2
68699: PUSH
68700: LD_INT 4
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 2
68709: NEG
68710: PUSH
68711: LD_INT 2
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 4
68720: NEG
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 4
68731: NEG
68732: PUSH
68733: LD_INT 1
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 3
68743: NEG
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 3
68754: NEG
68755: PUSH
68756: LD_INT 1
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 4
68765: NEG
68766: PUSH
68767: LD_INT 1
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 5
68776: NEG
68777: PUSH
68778: LD_INT 0
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 5
68787: NEG
68788: PUSH
68789: LD_INT 1
68791: NEG
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 5
68799: NEG
68800: PUSH
68801: LD_INT 2
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 3
68811: NEG
68812: PUSH
68813: LD_INT 2
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 3
68822: NEG
68823: PUSH
68824: LD_INT 3
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 3
68834: NEG
68835: PUSH
68836: LD_INT 4
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 2
68846: NEG
68847: PUSH
68848: LD_INT 3
68850: NEG
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 2
68858: NEG
68859: PUSH
68860: LD_INT 2
68862: NEG
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 3
68870: NEG
68871: PUSH
68872: LD_INT 2
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 4
68882: NEG
68883: PUSH
68884: LD_INT 3
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 4
68894: NEG
68895: PUSH
68896: LD_INT 4
68898: NEG
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 2
68906: NEG
68907: PUSH
68908: LD_INT 4
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 4
68918: NEG
68919: PUSH
68920: LD_INT 2
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: LD_INT 4
68933: NEG
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 0
68941: PUSH
68942: LD_INT 5
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 1
68952: PUSH
68953: LD_INT 4
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 1
68963: PUSH
68964: LD_INT 3
68966: NEG
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: LD_INT 3
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 1
68985: NEG
68986: PUSH
68987: LD_INT 4
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 1
68997: NEG
68998: PUSH
68999: LD_INT 5
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 2
69009: PUSH
69010: LD_INT 3
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 2
69020: NEG
69021: PUSH
69022: LD_INT 5
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69077: LD_ADDR_VAR 0 31
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: LD_INT 4
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 0
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 1
69104: PUSH
69105: LD_INT 4
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 1
69114: PUSH
69115: LD_INT 5
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: LD_INT 5
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 1
69134: NEG
69135: PUSH
69136: LD_INT 4
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 1
69145: NEG
69146: PUSH
69147: LD_INT 3
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 2
69156: PUSH
69157: LD_INT 5
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 2
69166: NEG
69167: PUSH
69168: LD_INT 3
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 3
69177: NEG
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 3
69188: NEG
69189: PUSH
69190: LD_INT 1
69192: NEG
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 2
69200: NEG
69201: PUSH
69202: LD_INT 0
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 2
69211: NEG
69212: PUSH
69213: LD_INT 1
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 3
69222: NEG
69223: PUSH
69224: LD_INT 1
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 4
69233: NEG
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 4
69244: NEG
69245: PUSH
69246: LD_INT 1
69248: NEG
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 4
69256: NEG
69257: PUSH
69258: LD_INT 2
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 2
69268: NEG
69269: PUSH
69270: LD_INT 2
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 4
69279: NEG
69280: PUSH
69281: LD_INT 4
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 4
69291: NEG
69292: PUSH
69293: LD_INT 5
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 3
69303: NEG
69304: PUSH
69305: LD_INT 4
69307: NEG
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 3
69315: NEG
69316: PUSH
69317: LD_INT 3
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 4
69327: NEG
69328: PUSH
69329: LD_INT 3
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 5
69339: NEG
69340: PUSH
69341: LD_INT 4
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 5
69351: NEG
69352: PUSH
69353: LD_INT 5
69355: NEG
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 3
69363: NEG
69364: PUSH
69365: LD_INT 5
69367: NEG
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 5
69375: NEG
69376: PUSH
69377: LD_INT 3
69379: NEG
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 0
69387: PUSH
69388: LD_INT 3
69390: NEG
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 0
69398: PUSH
69399: LD_INT 4
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 1
69409: PUSH
69410: LD_INT 3
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 1
69420: PUSH
69421: LD_INT 2
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 0
69431: PUSH
69432: LD_INT 2
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 1
69442: NEG
69443: PUSH
69444: LD_INT 3
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 1
69454: NEG
69455: PUSH
69456: LD_INT 4
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 2
69466: PUSH
69467: LD_INT 2
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 2
69477: NEG
69478: PUSH
69479: LD_INT 4
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 4
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 4
69499: PUSH
69500: LD_INT 1
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 5
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 5
69520: PUSH
69521: LD_INT 1
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 4
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 3
69540: PUSH
69541: LD_INT 0
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 3
69550: PUSH
69551: LD_INT 1
69553: NEG
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 3
69561: PUSH
69562: LD_INT 2
69564: NEG
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 5
69572: PUSH
69573: LD_INT 2
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69627: LD_ADDR_VAR 0 32
69631: PUSH
69632: LD_INT 4
69634: NEG
69635: PUSH
69636: LD_INT 0
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 4
69645: NEG
69646: PUSH
69647: LD_INT 1
69649: NEG
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 3
69657: NEG
69658: PUSH
69659: LD_INT 0
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 3
69668: NEG
69669: PUSH
69670: LD_INT 1
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 4
69679: NEG
69680: PUSH
69681: LD_INT 1
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 5
69690: NEG
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 5
69701: NEG
69702: PUSH
69703: LD_INT 1
69705: NEG
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 5
69713: NEG
69714: PUSH
69715: LD_INT 2
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 3
69725: NEG
69726: PUSH
69727: LD_INT 2
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 3
69736: NEG
69737: PUSH
69738: LD_INT 3
69740: NEG
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 3
69748: NEG
69749: PUSH
69750: LD_INT 4
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 2
69760: NEG
69761: PUSH
69762: LD_INT 3
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 2
69772: NEG
69773: PUSH
69774: LD_INT 2
69776: NEG
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 3
69784: NEG
69785: PUSH
69786: LD_INT 2
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 4
69796: NEG
69797: PUSH
69798: LD_INT 3
69800: NEG
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 4
69808: NEG
69809: PUSH
69810: LD_INT 4
69812: NEG
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 2
69820: NEG
69821: PUSH
69822: LD_INT 4
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 4
69832: NEG
69833: PUSH
69834: LD_INT 2
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 0
69844: PUSH
69845: LD_INT 4
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: LD_INT 5
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 1
69866: PUSH
69867: LD_INT 4
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 1
69877: PUSH
69878: LD_INT 3
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 0
69888: PUSH
69889: LD_INT 3
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 1
69899: NEG
69900: PUSH
69901: LD_INT 4
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 1
69911: NEG
69912: PUSH
69913: LD_INT 5
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 2
69923: PUSH
69924: LD_INT 3
69926: NEG
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 2
69934: NEG
69935: PUSH
69936: LD_INT 5
69938: NEG
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 3
69946: PUSH
69947: LD_INT 0
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 3
69956: PUSH
69957: LD_INT 1
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 4
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 4
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 3
69987: PUSH
69988: LD_INT 1
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 2
69997: PUSH
69998: LD_INT 0
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 2
70007: PUSH
70008: LD_INT 1
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 2
70018: PUSH
70019: LD_INT 2
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 4
70029: PUSH
70030: LD_INT 2
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 4
70039: PUSH
70040: LD_INT 4
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 4
70049: PUSH
70050: LD_INT 3
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 5
70059: PUSH
70060: LD_INT 4
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 5
70069: PUSH
70070: LD_INT 5
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 4
70079: PUSH
70080: LD_INT 5
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 3
70089: PUSH
70090: LD_INT 4
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 3
70099: PUSH
70100: LD_INT 3
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 5
70109: PUSH
70110: LD_INT 3
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 3
70119: PUSH
70120: LD_INT 5
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70174: LD_ADDR_VAR 0 33
70178: PUSH
70179: LD_INT 4
70181: NEG
70182: PUSH
70183: LD_INT 4
70185: NEG
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 4
70193: NEG
70194: PUSH
70195: LD_INT 5
70197: NEG
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 3
70205: NEG
70206: PUSH
70207: LD_INT 4
70209: NEG
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 3
70217: NEG
70218: PUSH
70219: LD_INT 3
70221: NEG
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 4
70229: NEG
70230: PUSH
70231: LD_INT 3
70233: NEG
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 5
70241: NEG
70242: PUSH
70243: LD_INT 4
70245: NEG
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 5
70253: NEG
70254: PUSH
70255: LD_INT 5
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 3
70265: NEG
70266: PUSH
70267: LD_INT 5
70269: NEG
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 5
70277: NEG
70278: PUSH
70279: LD_INT 3
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: LD_INT 3
70292: NEG
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 4
70303: NEG
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 1
70311: PUSH
70312: LD_INT 3
70314: NEG
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 1
70322: PUSH
70323: LD_INT 2
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: LD_INT 2
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 1
70344: NEG
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 1
70356: NEG
70357: PUSH
70358: LD_INT 4
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 2
70368: PUSH
70369: LD_INT 2
70371: NEG
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 2
70379: NEG
70380: PUSH
70381: LD_INT 4
70383: NEG
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 4
70391: PUSH
70392: LD_INT 0
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 4
70401: PUSH
70402: LD_INT 1
70404: NEG
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 5
70412: PUSH
70413: LD_INT 0
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 5
70422: PUSH
70423: LD_INT 1
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 4
70432: PUSH
70433: LD_INT 1
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 3
70442: PUSH
70443: LD_INT 0
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 3
70452: PUSH
70453: LD_INT 1
70455: NEG
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 3
70463: PUSH
70464: LD_INT 2
70466: NEG
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 5
70474: PUSH
70475: LD_INT 2
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 3
70484: PUSH
70485: LD_INT 3
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 3
70494: PUSH
70495: LD_INT 2
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 4
70504: PUSH
70505: LD_INT 3
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 4
70514: PUSH
70515: LD_INT 4
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 3
70524: PUSH
70525: LD_INT 4
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 2
70534: PUSH
70535: LD_INT 3
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 2
70544: PUSH
70545: LD_INT 2
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: PUSH
70552: LD_INT 4
70554: PUSH
70555: LD_INT 2
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 2
70564: PUSH
70565: LD_INT 4
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 0
70574: PUSH
70575: LD_INT 4
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 0
70584: PUSH
70585: LD_INT 3
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 1
70594: PUSH
70595: LD_INT 4
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 1
70604: PUSH
70605: LD_INT 5
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: LD_INT 5
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 1
70624: NEG
70625: PUSH
70626: LD_INT 4
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 1
70635: NEG
70636: PUSH
70637: LD_INT 3
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 2
70646: PUSH
70647: LD_INT 5
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 2
70656: NEG
70657: PUSH
70658: LD_INT 3
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70712: LD_ADDR_VAR 0 34
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: LD_INT 4
70722: NEG
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 0
70730: PUSH
70731: LD_INT 5
70733: NEG
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 1
70741: PUSH
70742: LD_INT 4
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 1
70752: PUSH
70753: LD_INT 3
70755: NEG
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 0
70763: PUSH
70764: LD_INT 3
70766: NEG
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 1
70774: NEG
70775: PUSH
70776: LD_INT 4
70778: NEG
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 1
70786: NEG
70787: PUSH
70788: LD_INT 5
70790: NEG
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 2
70798: PUSH
70799: LD_INT 3
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 2
70809: NEG
70810: PUSH
70811: LD_INT 5
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 3
70821: PUSH
70822: LD_INT 0
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 3
70831: PUSH
70832: LD_INT 1
70834: NEG
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 4
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 4
70852: PUSH
70853: LD_INT 1
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 3
70862: PUSH
70863: LD_INT 1
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 2
70872: PUSH
70873: LD_INT 0
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 2
70882: PUSH
70883: LD_INT 1
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 2
70893: PUSH
70894: LD_INT 2
70896: NEG
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 4
70904: PUSH
70905: LD_INT 2
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 4
70914: PUSH
70915: LD_INT 4
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 4
70924: PUSH
70925: LD_INT 3
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 5
70934: PUSH
70935: LD_INT 4
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 5
70944: PUSH
70945: LD_INT 5
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 4
70954: PUSH
70955: LD_INT 5
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 3
70964: PUSH
70965: LD_INT 4
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 3
70974: PUSH
70975: LD_INT 3
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 5
70984: PUSH
70985: LD_INT 3
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 3
70994: PUSH
70995: LD_INT 5
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 0
71004: PUSH
71005: LD_INT 3
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 0
71014: PUSH
71015: LD_INT 2
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 1
71024: PUSH
71025: LD_INT 3
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 1
71034: PUSH
71035: LD_INT 4
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 0
71044: PUSH
71045: LD_INT 4
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 1
71054: NEG
71055: PUSH
71056: LD_INT 3
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 1
71065: NEG
71066: PUSH
71067: LD_INT 2
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 2
71076: PUSH
71077: LD_INT 4
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 2
71086: NEG
71087: PUSH
71088: LD_INT 2
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 4
71097: NEG
71098: PUSH
71099: LD_INT 0
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 4
71108: NEG
71109: PUSH
71110: LD_INT 1
71112: NEG
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 3
71120: NEG
71121: PUSH
71122: LD_INT 0
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 3
71131: NEG
71132: PUSH
71133: LD_INT 1
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 4
71142: NEG
71143: PUSH
71144: LD_INT 1
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 5
71153: NEG
71154: PUSH
71155: LD_INT 0
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 5
71164: NEG
71165: PUSH
71166: LD_INT 1
71168: NEG
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 5
71176: NEG
71177: PUSH
71178: LD_INT 2
71180: NEG
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 3
71188: NEG
71189: PUSH
71190: LD_INT 2
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: ST_TO_ADDR
// end ; end ;
71244: GO 71247
71246: POP
// case btype of b_depot , b_warehouse :
71247: LD_VAR 0 1
71251: PUSH
71252: LD_INT 0
71254: DOUBLE
71255: EQUAL
71256: IFTRUE 71266
71258: LD_INT 1
71260: DOUBLE
71261: EQUAL
71262: IFTRUE 71266
71264: GO 71467
71266: POP
// case nation of nation_american :
71267: LD_VAR 0 5
71271: PUSH
71272: LD_INT 1
71274: DOUBLE
71275: EQUAL
71276: IFTRUE 71280
71278: GO 71336
71280: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71281: LD_ADDR_VAR 0 9
71285: PUSH
71286: LD_VAR 0 11
71290: PUSH
71291: LD_VAR 0 12
71295: PUSH
71296: LD_VAR 0 13
71300: PUSH
71301: LD_VAR 0 14
71305: PUSH
71306: LD_VAR 0 15
71310: PUSH
71311: LD_VAR 0 16
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: PUSH
71324: LD_VAR 0 4
71328: PUSH
71329: LD_INT 1
71331: PLUS
71332: ARRAY
71333: ST_TO_ADDR
71334: GO 71465
71336: LD_INT 2
71338: DOUBLE
71339: EQUAL
71340: IFTRUE 71344
71342: GO 71400
71344: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71345: LD_ADDR_VAR 0 9
71349: PUSH
71350: LD_VAR 0 17
71354: PUSH
71355: LD_VAR 0 18
71359: PUSH
71360: LD_VAR 0 19
71364: PUSH
71365: LD_VAR 0 20
71369: PUSH
71370: LD_VAR 0 21
71374: PUSH
71375: LD_VAR 0 22
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: PUSH
71388: LD_VAR 0 4
71392: PUSH
71393: LD_INT 1
71395: PLUS
71396: ARRAY
71397: ST_TO_ADDR
71398: GO 71465
71400: LD_INT 3
71402: DOUBLE
71403: EQUAL
71404: IFTRUE 71408
71406: GO 71464
71408: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71409: LD_ADDR_VAR 0 9
71413: PUSH
71414: LD_VAR 0 23
71418: PUSH
71419: LD_VAR 0 24
71423: PUSH
71424: LD_VAR 0 25
71428: PUSH
71429: LD_VAR 0 26
71433: PUSH
71434: LD_VAR 0 27
71438: PUSH
71439: LD_VAR 0 28
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: PUSH
71452: LD_VAR 0 4
71456: PUSH
71457: LD_INT 1
71459: PLUS
71460: ARRAY
71461: ST_TO_ADDR
71462: GO 71465
71464: POP
71465: GO 72020
71467: LD_INT 2
71469: DOUBLE
71470: EQUAL
71471: IFTRUE 71481
71473: LD_INT 3
71475: DOUBLE
71476: EQUAL
71477: IFTRUE 71481
71479: GO 71537
71481: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71482: LD_ADDR_VAR 0 9
71486: PUSH
71487: LD_VAR 0 29
71491: PUSH
71492: LD_VAR 0 30
71496: PUSH
71497: LD_VAR 0 31
71501: PUSH
71502: LD_VAR 0 32
71506: PUSH
71507: LD_VAR 0 33
71511: PUSH
71512: LD_VAR 0 34
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: PUSH
71525: LD_VAR 0 4
71529: PUSH
71530: LD_INT 1
71532: PLUS
71533: ARRAY
71534: ST_TO_ADDR
71535: GO 72020
71537: LD_INT 16
71539: DOUBLE
71540: EQUAL
71541: IFTRUE 71599
71543: LD_INT 17
71545: DOUBLE
71546: EQUAL
71547: IFTRUE 71599
71549: LD_INT 18
71551: DOUBLE
71552: EQUAL
71553: IFTRUE 71599
71555: LD_INT 19
71557: DOUBLE
71558: EQUAL
71559: IFTRUE 71599
71561: LD_INT 22
71563: DOUBLE
71564: EQUAL
71565: IFTRUE 71599
71567: LD_INT 20
71569: DOUBLE
71570: EQUAL
71571: IFTRUE 71599
71573: LD_INT 21
71575: DOUBLE
71576: EQUAL
71577: IFTRUE 71599
71579: LD_INT 23
71581: DOUBLE
71582: EQUAL
71583: IFTRUE 71599
71585: LD_INT 24
71587: DOUBLE
71588: EQUAL
71589: IFTRUE 71599
71591: LD_INT 25
71593: DOUBLE
71594: EQUAL
71595: IFTRUE 71599
71597: GO 71655
71599: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71600: LD_ADDR_VAR 0 9
71604: PUSH
71605: LD_VAR 0 35
71609: PUSH
71610: LD_VAR 0 36
71614: PUSH
71615: LD_VAR 0 37
71619: PUSH
71620: LD_VAR 0 38
71624: PUSH
71625: LD_VAR 0 39
71629: PUSH
71630: LD_VAR 0 40
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: PUSH
71643: LD_VAR 0 4
71647: PUSH
71648: LD_INT 1
71650: PLUS
71651: ARRAY
71652: ST_TO_ADDR
71653: GO 72020
71655: LD_INT 6
71657: DOUBLE
71658: EQUAL
71659: IFTRUE 71711
71661: LD_INT 7
71663: DOUBLE
71664: EQUAL
71665: IFTRUE 71711
71667: LD_INT 8
71669: DOUBLE
71670: EQUAL
71671: IFTRUE 71711
71673: LD_INT 13
71675: DOUBLE
71676: EQUAL
71677: IFTRUE 71711
71679: LD_INT 12
71681: DOUBLE
71682: EQUAL
71683: IFTRUE 71711
71685: LD_INT 15
71687: DOUBLE
71688: EQUAL
71689: IFTRUE 71711
71691: LD_INT 11
71693: DOUBLE
71694: EQUAL
71695: IFTRUE 71711
71697: LD_INT 14
71699: DOUBLE
71700: EQUAL
71701: IFTRUE 71711
71703: LD_INT 10
71705: DOUBLE
71706: EQUAL
71707: IFTRUE 71711
71709: GO 71767
71711: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71712: LD_ADDR_VAR 0 9
71716: PUSH
71717: LD_VAR 0 41
71721: PUSH
71722: LD_VAR 0 42
71726: PUSH
71727: LD_VAR 0 43
71731: PUSH
71732: LD_VAR 0 44
71736: PUSH
71737: LD_VAR 0 45
71741: PUSH
71742: LD_VAR 0 46
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: PUSH
71755: LD_VAR 0 4
71759: PUSH
71760: LD_INT 1
71762: PLUS
71763: ARRAY
71764: ST_TO_ADDR
71765: GO 72020
71767: LD_INT 36
71769: DOUBLE
71770: EQUAL
71771: IFTRUE 71775
71773: GO 71831
71775: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71776: LD_ADDR_VAR 0 9
71780: PUSH
71781: LD_VAR 0 47
71785: PUSH
71786: LD_VAR 0 48
71790: PUSH
71791: LD_VAR 0 49
71795: PUSH
71796: LD_VAR 0 50
71800: PUSH
71801: LD_VAR 0 51
71805: PUSH
71806: LD_VAR 0 52
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: PUSH
71819: LD_VAR 0 4
71823: PUSH
71824: LD_INT 1
71826: PLUS
71827: ARRAY
71828: ST_TO_ADDR
71829: GO 72020
71831: LD_INT 4
71833: DOUBLE
71834: EQUAL
71835: IFTRUE 71857
71837: LD_INT 5
71839: DOUBLE
71840: EQUAL
71841: IFTRUE 71857
71843: LD_INT 34
71845: DOUBLE
71846: EQUAL
71847: IFTRUE 71857
71849: LD_INT 37
71851: DOUBLE
71852: EQUAL
71853: IFTRUE 71857
71855: GO 71913
71857: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71858: LD_ADDR_VAR 0 9
71862: PUSH
71863: LD_VAR 0 53
71867: PUSH
71868: LD_VAR 0 54
71872: PUSH
71873: LD_VAR 0 55
71877: PUSH
71878: LD_VAR 0 56
71882: PUSH
71883: LD_VAR 0 57
71887: PUSH
71888: LD_VAR 0 58
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: PUSH
71901: LD_VAR 0 4
71905: PUSH
71906: LD_INT 1
71908: PLUS
71909: ARRAY
71910: ST_TO_ADDR
71911: GO 72020
71913: LD_INT 31
71915: DOUBLE
71916: EQUAL
71917: IFTRUE 71963
71919: LD_INT 32
71921: DOUBLE
71922: EQUAL
71923: IFTRUE 71963
71925: LD_INT 33
71927: DOUBLE
71928: EQUAL
71929: IFTRUE 71963
71931: LD_INT 27
71933: DOUBLE
71934: EQUAL
71935: IFTRUE 71963
71937: LD_INT 26
71939: DOUBLE
71940: EQUAL
71941: IFTRUE 71963
71943: LD_INT 28
71945: DOUBLE
71946: EQUAL
71947: IFTRUE 71963
71949: LD_INT 29
71951: DOUBLE
71952: EQUAL
71953: IFTRUE 71963
71955: LD_INT 30
71957: DOUBLE
71958: EQUAL
71959: IFTRUE 71963
71961: GO 72019
71963: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71964: LD_ADDR_VAR 0 9
71968: PUSH
71969: LD_VAR 0 59
71973: PUSH
71974: LD_VAR 0 60
71978: PUSH
71979: LD_VAR 0 61
71983: PUSH
71984: LD_VAR 0 62
71988: PUSH
71989: LD_VAR 0 63
71993: PUSH
71994: LD_VAR 0 64
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: PUSH
72007: LD_VAR 0 4
72011: PUSH
72012: LD_INT 1
72014: PLUS
72015: ARRAY
72016: ST_TO_ADDR
72017: GO 72020
72019: POP
// temp_list2 = [ ] ;
72020: LD_ADDR_VAR 0 10
72024: PUSH
72025: EMPTY
72026: ST_TO_ADDR
// for i in temp_list do
72027: LD_ADDR_VAR 0 8
72031: PUSH
72032: LD_VAR 0 9
72036: PUSH
72037: FOR_IN
72038: IFFALSE 72090
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72040: LD_ADDR_VAR 0 10
72044: PUSH
72045: LD_VAR 0 10
72049: PUSH
72050: LD_VAR 0 8
72054: PUSH
72055: LD_INT 1
72057: ARRAY
72058: PUSH
72059: LD_VAR 0 2
72063: PLUS
72064: PUSH
72065: LD_VAR 0 8
72069: PUSH
72070: LD_INT 2
72072: ARRAY
72073: PUSH
72074: LD_VAR 0 3
72078: PLUS
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: EMPTY
72085: LIST
72086: ADD
72087: ST_TO_ADDR
72088: GO 72037
72090: POP
72091: POP
// result = temp_list2 ;
72092: LD_ADDR_VAR 0 7
72096: PUSH
72097: LD_VAR 0 10
72101: ST_TO_ADDR
// end ;
72102: LD_VAR 0 7
72106: RET
// export function EnemyInRange ( unit , dist ) ; begin
72107: LD_INT 0
72109: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72110: LD_ADDR_VAR 0 3
72114: PUSH
72115: LD_VAR 0 1
72119: PPUSH
72120: CALL_OW 255
72124: PPUSH
72125: LD_VAR 0 1
72129: PPUSH
72130: CALL_OW 250
72134: PPUSH
72135: LD_VAR 0 1
72139: PPUSH
72140: CALL_OW 251
72144: PPUSH
72145: LD_VAR 0 2
72149: PPUSH
72150: CALL 45509 0 4
72154: PUSH
72155: LD_INT 4
72157: ARRAY
72158: ST_TO_ADDR
// end ;
72159: LD_VAR 0 3
72163: RET
// export function PlayerSeeMe ( unit ) ; begin
72164: LD_INT 0
72166: PPUSH
// result := See ( your_side , unit ) ;
72167: LD_ADDR_VAR 0 2
72171: PUSH
72172: LD_OWVAR 2
72176: PPUSH
72177: LD_VAR 0 1
72181: PPUSH
72182: CALL_OW 292
72186: ST_TO_ADDR
// end ;
72187: LD_VAR 0 2
72191: RET
// export function ReverseDir ( unit ) ; begin
72192: LD_INT 0
72194: PPUSH
// if not unit then
72195: LD_VAR 0 1
72199: NOT
72200: IFFALSE 72204
// exit ;
72202: GO 72227
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72204: LD_ADDR_VAR 0 2
72208: PUSH
72209: LD_VAR 0 1
72213: PPUSH
72214: CALL_OW 254
72218: PUSH
72219: LD_INT 3
72221: PLUS
72222: PUSH
72223: LD_INT 6
72225: MOD
72226: ST_TO_ADDR
// end ;
72227: LD_VAR 0 2
72231: RET
// export function ReverseArray ( array ) ; var i ; begin
72232: LD_INT 0
72234: PPUSH
72235: PPUSH
// if not array then
72236: LD_VAR 0 1
72240: NOT
72241: IFFALSE 72245
// exit ;
72243: GO 72300
// result := [ ] ;
72245: LD_ADDR_VAR 0 2
72249: PUSH
72250: EMPTY
72251: ST_TO_ADDR
// for i := array downto 1 do
72252: LD_ADDR_VAR 0 3
72256: PUSH
72257: DOUBLE
72258: LD_VAR 0 1
72262: INC
72263: ST_TO_ADDR
72264: LD_INT 1
72266: PUSH
72267: FOR_DOWNTO
72268: IFFALSE 72298
// result := Join ( result , array [ i ] ) ;
72270: LD_ADDR_VAR 0 2
72274: PUSH
72275: LD_VAR 0 2
72279: PPUSH
72280: LD_VAR 0 1
72284: PUSH
72285: LD_VAR 0 3
72289: ARRAY
72290: PPUSH
72291: CALL 76944 0 2
72295: ST_TO_ADDR
72296: GO 72267
72298: POP
72299: POP
// end ;
72300: LD_VAR 0 2
72304: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72305: LD_INT 0
72307: PPUSH
72308: PPUSH
72309: PPUSH
72310: PPUSH
72311: PPUSH
72312: PPUSH
// if not unit or not hexes then
72313: LD_VAR 0 1
72317: NOT
72318: PUSH
72319: LD_VAR 0 2
72323: NOT
72324: OR
72325: IFFALSE 72329
// exit ;
72327: GO 72452
// dist := 9999 ;
72329: LD_ADDR_VAR 0 5
72333: PUSH
72334: LD_INT 9999
72336: ST_TO_ADDR
// for i = 1 to hexes do
72337: LD_ADDR_VAR 0 4
72341: PUSH
72342: DOUBLE
72343: LD_INT 1
72345: DEC
72346: ST_TO_ADDR
72347: LD_VAR 0 2
72351: PUSH
72352: FOR_TO
72353: IFFALSE 72440
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72355: LD_ADDR_VAR 0 6
72359: PUSH
72360: LD_VAR 0 1
72364: PPUSH
72365: LD_VAR 0 2
72369: PUSH
72370: LD_VAR 0 4
72374: ARRAY
72375: PUSH
72376: LD_INT 1
72378: ARRAY
72379: PPUSH
72380: LD_VAR 0 2
72384: PUSH
72385: LD_VAR 0 4
72389: ARRAY
72390: PUSH
72391: LD_INT 2
72393: ARRAY
72394: PPUSH
72395: CALL_OW 297
72399: ST_TO_ADDR
// if tdist < dist then
72400: LD_VAR 0 6
72404: PUSH
72405: LD_VAR 0 5
72409: LESS
72410: IFFALSE 72438
// begin hex := hexes [ i ] ;
72412: LD_ADDR_VAR 0 8
72416: PUSH
72417: LD_VAR 0 2
72421: PUSH
72422: LD_VAR 0 4
72426: ARRAY
72427: ST_TO_ADDR
// dist := tdist ;
72428: LD_ADDR_VAR 0 5
72432: PUSH
72433: LD_VAR 0 6
72437: ST_TO_ADDR
// end ; end ;
72438: GO 72352
72440: POP
72441: POP
// result := hex ;
72442: LD_ADDR_VAR 0 3
72446: PUSH
72447: LD_VAR 0 8
72451: ST_TO_ADDR
// end ;
72452: LD_VAR 0 3
72456: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72457: LD_INT 0
72459: PPUSH
72460: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72461: LD_VAR 0 1
72465: NOT
72466: PUSH
72467: LD_VAR 0 1
72471: PUSH
72472: LD_INT 21
72474: PUSH
72475: LD_INT 2
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 23
72484: PUSH
72485: LD_INT 2
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PPUSH
72496: CALL_OW 69
72500: IN
72501: NOT
72502: OR
72503: IFFALSE 72507
// exit ;
72505: GO 72554
// for i = 1 to 3 do
72507: LD_ADDR_VAR 0 3
72511: PUSH
72512: DOUBLE
72513: LD_INT 1
72515: DEC
72516: ST_TO_ADDR
72517: LD_INT 3
72519: PUSH
72520: FOR_TO
72521: IFFALSE 72552
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72523: LD_VAR 0 1
72527: PPUSH
72528: CALL_OW 250
72532: PPUSH
72533: LD_VAR 0 1
72537: PPUSH
72538: CALL_OW 251
72542: PPUSH
72543: LD_INT 1
72545: PPUSH
72546: CALL_OW 453
72550: GO 72520
72552: POP
72553: POP
// end ;
72554: LD_VAR 0 2
72558: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72559: LD_INT 0
72561: PPUSH
72562: PPUSH
72563: PPUSH
72564: PPUSH
72565: PPUSH
72566: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72567: LD_VAR 0 1
72571: NOT
72572: PUSH
72573: LD_VAR 0 2
72577: NOT
72578: OR
72579: PUSH
72580: LD_VAR 0 1
72584: PPUSH
72585: CALL_OW 314
72589: OR
72590: IFFALSE 72594
// exit ;
72592: GO 73061
// if GetLives ( i ) < 250 then
72594: LD_VAR 0 4
72598: PPUSH
72599: CALL_OW 256
72603: PUSH
72604: LD_INT 250
72606: LESS
72607: IFFALSE 72620
// begin ComAutodestruct ( i ) ;
72609: LD_VAR 0 4
72613: PPUSH
72614: CALL 72457 0 1
// exit ;
72618: GO 73061
// end ; x := GetX ( enemy_unit ) ;
72620: LD_ADDR_VAR 0 7
72624: PUSH
72625: LD_VAR 0 2
72629: PPUSH
72630: CALL_OW 250
72634: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72635: LD_ADDR_VAR 0 8
72639: PUSH
72640: LD_VAR 0 2
72644: PPUSH
72645: CALL_OW 251
72649: ST_TO_ADDR
// if not x or not y then
72650: LD_VAR 0 7
72654: NOT
72655: PUSH
72656: LD_VAR 0 8
72660: NOT
72661: OR
72662: IFFALSE 72666
// exit ;
72664: GO 73061
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72666: LD_ADDR_VAR 0 6
72670: PUSH
72671: LD_VAR 0 7
72675: PPUSH
72676: LD_INT 0
72678: PPUSH
72679: LD_INT 4
72681: PPUSH
72682: CALL_OW 272
72686: PUSH
72687: LD_VAR 0 8
72691: PPUSH
72692: LD_INT 0
72694: PPUSH
72695: LD_INT 4
72697: PPUSH
72698: CALL_OW 273
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_VAR 0 7
72711: PPUSH
72712: LD_INT 1
72714: PPUSH
72715: LD_INT 4
72717: PPUSH
72718: CALL_OW 272
72722: PUSH
72723: LD_VAR 0 8
72727: PPUSH
72728: LD_INT 1
72730: PPUSH
72731: LD_INT 4
72733: PPUSH
72734: CALL_OW 273
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_VAR 0 7
72747: PPUSH
72748: LD_INT 2
72750: PPUSH
72751: LD_INT 4
72753: PPUSH
72754: CALL_OW 272
72758: PUSH
72759: LD_VAR 0 8
72763: PPUSH
72764: LD_INT 2
72766: PPUSH
72767: LD_INT 4
72769: PPUSH
72770: CALL_OW 273
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_VAR 0 7
72783: PPUSH
72784: LD_INT 3
72786: PPUSH
72787: LD_INT 4
72789: PPUSH
72790: CALL_OW 272
72794: PUSH
72795: LD_VAR 0 8
72799: PPUSH
72800: LD_INT 3
72802: PPUSH
72803: LD_INT 4
72805: PPUSH
72806: CALL_OW 273
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: LD_VAR 0 7
72819: PPUSH
72820: LD_INT 4
72822: PPUSH
72823: LD_INT 4
72825: PPUSH
72826: CALL_OW 272
72830: PUSH
72831: LD_VAR 0 8
72835: PPUSH
72836: LD_INT 4
72838: PPUSH
72839: LD_INT 4
72841: PPUSH
72842: CALL_OW 273
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_VAR 0 7
72855: PPUSH
72856: LD_INT 5
72858: PPUSH
72859: LD_INT 4
72861: PPUSH
72862: CALL_OW 272
72866: PUSH
72867: LD_VAR 0 8
72871: PPUSH
72872: LD_INT 5
72874: PPUSH
72875: LD_INT 4
72877: PPUSH
72878: CALL_OW 273
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: ST_TO_ADDR
// for i = tmp downto 1 do
72895: LD_ADDR_VAR 0 4
72899: PUSH
72900: DOUBLE
72901: LD_VAR 0 6
72905: INC
72906: ST_TO_ADDR
72907: LD_INT 1
72909: PUSH
72910: FOR_DOWNTO
72911: IFFALSE 73012
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72913: LD_VAR 0 6
72917: PUSH
72918: LD_VAR 0 4
72922: ARRAY
72923: PUSH
72924: LD_INT 1
72926: ARRAY
72927: PPUSH
72928: LD_VAR 0 6
72932: PUSH
72933: LD_VAR 0 4
72937: ARRAY
72938: PUSH
72939: LD_INT 2
72941: ARRAY
72942: PPUSH
72943: CALL_OW 488
72947: NOT
72948: PUSH
72949: LD_VAR 0 6
72953: PUSH
72954: LD_VAR 0 4
72958: ARRAY
72959: PUSH
72960: LD_INT 1
72962: ARRAY
72963: PPUSH
72964: LD_VAR 0 6
72968: PUSH
72969: LD_VAR 0 4
72973: ARRAY
72974: PUSH
72975: LD_INT 2
72977: ARRAY
72978: PPUSH
72979: CALL_OW 428
72983: PUSH
72984: LD_INT 0
72986: NONEQUAL
72987: OR
72988: IFFALSE 73010
// tmp := Delete ( tmp , i ) ;
72990: LD_ADDR_VAR 0 6
72994: PUSH
72995: LD_VAR 0 6
72999: PPUSH
73000: LD_VAR 0 4
73004: PPUSH
73005: CALL_OW 3
73009: ST_TO_ADDR
73010: GO 72910
73012: POP
73013: POP
// j := GetClosestHex ( unit , tmp ) ;
73014: LD_ADDR_VAR 0 5
73018: PUSH
73019: LD_VAR 0 1
73023: PPUSH
73024: LD_VAR 0 6
73028: PPUSH
73029: CALL 72305 0 2
73033: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73034: LD_VAR 0 1
73038: PPUSH
73039: LD_VAR 0 5
73043: PUSH
73044: LD_INT 1
73046: ARRAY
73047: PPUSH
73048: LD_VAR 0 5
73052: PUSH
73053: LD_INT 2
73055: ARRAY
73056: PPUSH
73057: CALL_OW 111
// end ;
73061: LD_VAR 0 3
73065: RET
// export function PrepareApemanSoldier ( ) ; begin
73066: LD_INT 0
73068: PPUSH
// uc_nation := 0 ;
73069: LD_ADDR_OWVAR 21
73073: PUSH
73074: LD_INT 0
73076: ST_TO_ADDR
// hc_sex := sex_male ;
73077: LD_ADDR_OWVAR 27
73081: PUSH
73082: LD_INT 1
73084: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73085: LD_ADDR_OWVAR 28
73089: PUSH
73090: LD_INT 15
73092: ST_TO_ADDR
// hc_gallery :=  ;
73093: LD_ADDR_OWVAR 33
73097: PUSH
73098: LD_STRING 
73100: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73101: LD_ADDR_OWVAR 31
73105: PUSH
73106: LD_INT 0
73108: PPUSH
73109: LD_INT 3
73111: PPUSH
73112: CALL_OW 12
73116: PUSH
73117: LD_INT 0
73119: PPUSH
73120: LD_INT 3
73122: PPUSH
73123: CALL_OW 12
73127: PUSH
73128: LD_INT 0
73130: PUSH
73131: LD_INT 0
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: ST_TO_ADDR
// end ;
73140: LD_VAR 0 1
73144: RET
// export function PrepareApemanEngineer ( ) ; begin
73145: LD_INT 0
73147: PPUSH
// uc_nation := 0 ;
73148: LD_ADDR_OWVAR 21
73152: PUSH
73153: LD_INT 0
73155: ST_TO_ADDR
// hc_sex := sex_male ;
73156: LD_ADDR_OWVAR 27
73160: PUSH
73161: LD_INT 1
73163: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73164: LD_ADDR_OWVAR 28
73168: PUSH
73169: LD_INT 16
73171: ST_TO_ADDR
// hc_gallery :=  ;
73172: LD_ADDR_OWVAR 33
73176: PUSH
73177: LD_STRING 
73179: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73180: LD_ADDR_OWVAR 31
73184: PUSH
73185: LD_INT 0
73187: PPUSH
73188: LD_INT 3
73190: PPUSH
73191: CALL_OW 12
73195: PUSH
73196: LD_INT 0
73198: PPUSH
73199: LD_INT 3
73201: PPUSH
73202: CALL_OW 12
73206: PUSH
73207: LD_INT 0
73209: PUSH
73210: LD_INT 0
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: ST_TO_ADDR
// end ;
73219: LD_VAR 0 1
73223: RET
// export function PrepareApeman ( agressivity ) ; begin
73224: LD_INT 0
73226: PPUSH
// uc_side := 0 ;
73227: LD_ADDR_OWVAR 20
73231: PUSH
73232: LD_INT 0
73234: ST_TO_ADDR
// uc_nation := 0 ;
73235: LD_ADDR_OWVAR 21
73239: PUSH
73240: LD_INT 0
73242: ST_TO_ADDR
// hc_sex := sex_male ;
73243: LD_ADDR_OWVAR 27
73247: PUSH
73248: LD_INT 1
73250: ST_TO_ADDR
// hc_class := class_apeman ;
73251: LD_ADDR_OWVAR 28
73255: PUSH
73256: LD_INT 12
73258: ST_TO_ADDR
// hc_gallery :=  ;
73259: LD_ADDR_OWVAR 33
73263: PUSH
73264: LD_STRING 
73266: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73267: LD_ADDR_OWVAR 35
73271: PUSH
73272: LD_VAR 0 1
73276: NEG
73277: PPUSH
73278: LD_VAR 0 1
73282: PPUSH
73283: CALL_OW 12
73287: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73288: LD_ADDR_OWVAR 31
73292: PUSH
73293: LD_INT 0
73295: PPUSH
73296: LD_INT 3
73298: PPUSH
73299: CALL_OW 12
73303: PUSH
73304: LD_INT 0
73306: PPUSH
73307: LD_INT 3
73309: PPUSH
73310: CALL_OW 12
73314: PUSH
73315: LD_INT 0
73317: PUSH
73318: LD_INT 0
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: ST_TO_ADDR
// end ;
73327: LD_VAR 0 2
73331: RET
// export function PrepareTiger ( agressivity ) ; begin
73332: LD_INT 0
73334: PPUSH
// uc_side := 0 ;
73335: LD_ADDR_OWVAR 20
73339: PUSH
73340: LD_INT 0
73342: ST_TO_ADDR
// uc_nation := 0 ;
73343: LD_ADDR_OWVAR 21
73347: PUSH
73348: LD_INT 0
73350: ST_TO_ADDR
// hc_class := class_tiger ;
73351: LD_ADDR_OWVAR 28
73355: PUSH
73356: LD_INT 14
73358: ST_TO_ADDR
// hc_gallery :=  ;
73359: LD_ADDR_OWVAR 33
73363: PUSH
73364: LD_STRING 
73366: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73367: LD_ADDR_OWVAR 35
73371: PUSH
73372: LD_VAR 0 1
73376: NEG
73377: PPUSH
73378: LD_VAR 0 1
73382: PPUSH
73383: CALL_OW 12
73387: ST_TO_ADDR
// end ;
73388: LD_VAR 0 2
73392: RET
// export function PrepareEnchidna ( ) ; begin
73393: LD_INT 0
73395: PPUSH
// uc_side := 0 ;
73396: LD_ADDR_OWVAR 20
73400: PUSH
73401: LD_INT 0
73403: ST_TO_ADDR
// uc_nation := 0 ;
73404: LD_ADDR_OWVAR 21
73408: PUSH
73409: LD_INT 0
73411: ST_TO_ADDR
// hc_class := class_baggie ;
73412: LD_ADDR_OWVAR 28
73416: PUSH
73417: LD_INT 13
73419: ST_TO_ADDR
// hc_gallery :=  ;
73420: LD_ADDR_OWVAR 33
73424: PUSH
73425: LD_STRING 
73427: ST_TO_ADDR
// end ;
73428: LD_VAR 0 1
73432: RET
// export function PrepareFrog ( ) ; begin
73433: LD_INT 0
73435: PPUSH
// uc_side := 0 ;
73436: LD_ADDR_OWVAR 20
73440: PUSH
73441: LD_INT 0
73443: ST_TO_ADDR
// uc_nation := 0 ;
73444: LD_ADDR_OWVAR 21
73448: PUSH
73449: LD_INT 0
73451: ST_TO_ADDR
// hc_class := class_frog ;
73452: LD_ADDR_OWVAR 28
73456: PUSH
73457: LD_INT 19
73459: ST_TO_ADDR
// hc_gallery :=  ;
73460: LD_ADDR_OWVAR 33
73464: PUSH
73465: LD_STRING 
73467: ST_TO_ADDR
// end ;
73468: LD_VAR 0 1
73472: RET
// export function PrepareFish ( ) ; begin
73473: LD_INT 0
73475: PPUSH
// uc_side := 0 ;
73476: LD_ADDR_OWVAR 20
73480: PUSH
73481: LD_INT 0
73483: ST_TO_ADDR
// uc_nation := 0 ;
73484: LD_ADDR_OWVAR 21
73488: PUSH
73489: LD_INT 0
73491: ST_TO_ADDR
// hc_class := class_fish ;
73492: LD_ADDR_OWVAR 28
73496: PUSH
73497: LD_INT 20
73499: ST_TO_ADDR
// hc_gallery :=  ;
73500: LD_ADDR_OWVAR 33
73504: PUSH
73505: LD_STRING 
73507: ST_TO_ADDR
// end ;
73508: LD_VAR 0 1
73512: RET
// export function PrepareBird ( ) ; begin
73513: LD_INT 0
73515: PPUSH
// uc_side := 0 ;
73516: LD_ADDR_OWVAR 20
73520: PUSH
73521: LD_INT 0
73523: ST_TO_ADDR
// uc_nation := 0 ;
73524: LD_ADDR_OWVAR 21
73528: PUSH
73529: LD_INT 0
73531: ST_TO_ADDR
// hc_class := class_phororhacos ;
73532: LD_ADDR_OWVAR 28
73536: PUSH
73537: LD_INT 18
73539: ST_TO_ADDR
// hc_gallery :=  ;
73540: LD_ADDR_OWVAR 33
73544: PUSH
73545: LD_STRING 
73547: ST_TO_ADDR
// end ;
73548: LD_VAR 0 1
73552: RET
// export function PrepareHorse ( ) ; begin
73553: LD_INT 0
73555: PPUSH
// uc_side := 0 ;
73556: LD_ADDR_OWVAR 20
73560: PUSH
73561: LD_INT 0
73563: ST_TO_ADDR
// uc_nation := 0 ;
73564: LD_ADDR_OWVAR 21
73568: PUSH
73569: LD_INT 0
73571: ST_TO_ADDR
// hc_class := class_horse ;
73572: LD_ADDR_OWVAR 28
73576: PUSH
73577: LD_INT 21
73579: ST_TO_ADDR
// hc_gallery :=  ;
73580: LD_ADDR_OWVAR 33
73584: PUSH
73585: LD_STRING 
73587: ST_TO_ADDR
// end ;
73588: LD_VAR 0 1
73592: RET
// export function PrepareMastodont ( ) ; begin
73593: LD_INT 0
73595: PPUSH
// uc_side := 0 ;
73596: LD_ADDR_OWVAR 20
73600: PUSH
73601: LD_INT 0
73603: ST_TO_ADDR
// uc_nation := 0 ;
73604: LD_ADDR_OWVAR 21
73608: PUSH
73609: LD_INT 0
73611: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73612: LD_ADDR_OWVAR 37
73616: PUSH
73617: LD_INT 31
73619: ST_TO_ADDR
// vc_control := control_rider ;
73620: LD_ADDR_OWVAR 38
73624: PUSH
73625: LD_INT 4
73627: ST_TO_ADDR
// end ;
73628: LD_VAR 0 1
73632: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73633: LD_INT 0
73635: PPUSH
73636: PPUSH
73637: PPUSH
// uc_side = 0 ;
73638: LD_ADDR_OWVAR 20
73642: PUSH
73643: LD_INT 0
73645: ST_TO_ADDR
// uc_nation = 0 ;
73646: LD_ADDR_OWVAR 21
73650: PUSH
73651: LD_INT 0
73653: ST_TO_ADDR
// InitHc_All ( ) ;
73654: CALL_OW 584
// InitVc ;
73658: CALL_OW 20
// if mastodonts then
73662: LD_VAR 0 6
73666: IFFALSE 73733
// for i = 1 to mastodonts do
73668: LD_ADDR_VAR 0 11
73672: PUSH
73673: DOUBLE
73674: LD_INT 1
73676: DEC
73677: ST_TO_ADDR
73678: LD_VAR 0 6
73682: PUSH
73683: FOR_TO
73684: IFFALSE 73731
// begin vc_chassis := 31 ;
73686: LD_ADDR_OWVAR 37
73690: PUSH
73691: LD_INT 31
73693: ST_TO_ADDR
// vc_control := control_rider ;
73694: LD_ADDR_OWVAR 38
73698: PUSH
73699: LD_INT 4
73701: ST_TO_ADDR
// animal := CreateVehicle ;
73702: LD_ADDR_VAR 0 12
73706: PUSH
73707: CALL_OW 45
73711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73712: LD_VAR 0 12
73716: PPUSH
73717: LD_VAR 0 8
73721: PPUSH
73722: LD_INT 0
73724: PPUSH
73725: CALL 75861 0 3
// end ;
73729: GO 73683
73731: POP
73732: POP
// if horses then
73733: LD_VAR 0 5
73737: IFFALSE 73804
// for i = 1 to horses do
73739: LD_ADDR_VAR 0 11
73743: PUSH
73744: DOUBLE
73745: LD_INT 1
73747: DEC
73748: ST_TO_ADDR
73749: LD_VAR 0 5
73753: PUSH
73754: FOR_TO
73755: IFFALSE 73802
// begin hc_class := 21 ;
73757: LD_ADDR_OWVAR 28
73761: PUSH
73762: LD_INT 21
73764: ST_TO_ADDR
// hc_gallery :=  ;
73765: LD_ADDR_OWVAR 33
73769: PUSH
73770: LD_STRING 
73772: ST_TO_ADDR
// animal := CreateHuman ;
73773: LD_ADDR_VAR 0 12
73777: PUSH
73778: CALL_OW 44
73782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73783: LD_VAR 0 12
73787: PPUSH
73788: LD_VAR 0 8
73792: PPUSH
73793: LD_INT 0
73795: PPUSH
73796: CALL 75861 0 3
// end ;
73800: GO 73754
73802: POP
73803: POP
// if birds then
73804: LD_VAR 0 1
73808: IFFALSE 73875
// for i = 1 to birds do
73810: LD_ADDR_VAR 0 11
73814: PUSH
73815: DOUBLE
73816: LD_INT 1
73818: DEC
73819: ST_TO_ADDR
73820: LD_VAR 0 1
73824: PUSH
73825: FOR_TO
73826: IFFALSE 73873
// begin hc_class = 18 ;
73828: LD_ADDR_OWVAR 28
73832: PUSH
73833: LD_INT 18
73835: ST_TO_ADDR
// hc_gallery =  ;
73836: LD_ADDR_OWVAR 33
73840: PUSH
73841: LD_STRING 
73843: ST_TO_ADDR
// animal := CreateHuman ;
73844: LD_ADDR_VAR 0 12
73848: PUSH
73849: CALL_OW 44
73853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73854: LD_VAR 0 12
73858: PPUSH
73859: LD_VAR 0 8
73863: PPUSH
73864: LD_INT 0
73866: PPUSH
73867: CALL 75861 0 3
// end ;
73871: GO 73825
73873: POP
73874: POP
// if tigers then
73875: LD_VAR 0 2
73879: IFFALSE 73963
// for i = 1 to tigers do
73881: LD_ADDR_VAR 0 11
73885: PUSH
73886: DOUBLE
73887: LD_INT 1
73889: DEC
73890: ST_TO_ADDR
73891: LD_VAR 0 2
73895: PUSH
73896: FOR_TO
73897: IFFALSE 73961
// begin hc_class = class_tiger ;
73899: LD_ADDR_OWVAR 28
73903: PUSH
73904: LD_INT 14
73906: ST_TO_ADDR
// hc_gallery =  ;
73907: LD_ADDR_OWVAR 33
73911: PUSH
73912: LD_STRING 
73914: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73915: LD_ADDR_OWVAR 35
73919: PUSH
73920: LD_INT 7
73922: NEG
73923: PPUSH
73924: LD_INT 7
73926: PPUSH
73927: CALL_OW 12
73931: ST_TO_ADDR
// animal := CreateHuman ;
73932: LD_ADDR_VAR 0 12
73936: PUSH
73937: CALL_OW 44
73941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73942: LD_VAR 0 12
73946: PPUSH
73947: LD_VAR 0 8
73951: PPUSH
73952: LD_INT 0
73954: PPUSH
73955: CALL 75861 0 3
// end ;
73959: GO 73896
73961: POP
73962: POP
// if apemans then
73963: LD_VAR 0 3
73967: IFFALSE 74090
// for i = 1 to apemans do
73969: LD_ADDR_VAR 0 11
73973: PUSH
73974: DOUBLE
73975: LD_INT 1
73977: DEC
73978: ST_TO_ADDR
73979: LD_VAR 0 3
73983: PUSH
73984: FOR_TO
73985: IFFALSE 74088
// begin hc_class = class_apeman ;
73987: LD_ADDR_OWVAR 28
73991: PUSH
73992: LD_INT 12
73994: ST_TO_ADDR
// hc_gallery =  ;
73995: LD_ADDR_OWVAR 33
73999: PUSH
74000: LD_STRING 
74002: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74003: LD_ADDR_OWVAR 35
74007: PUSH
74008: LD_INT 2
74010: NEG
74011: PPUSH
74012: LD_INT 2
74014: PPUSH
74015: CALL_OW 12
74019: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74020: LD_ADDR_OWVAR 31
74024: PUSH
74025: LD_INT 1
74027: PPUSH
74028: LD_INT 3
74030: PPUSH
74031: CALL_OW 12
74035: PUSH
74036: LD_INT 1
74038: PPUSH
74039: LD_INT 3
74041: PPUSH
74042: CALL_OW 12
74046: PUSH
74047: LD_INT 0
74049: PUSH
74050: LD_INT 0
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: LIST
74057: LIST
74058: ST_TO_ADDR
// animal := CreateHuman ;
74059: LD_ADDR_VAR 0 12
74063: PUSH
74064: CALL_OW 44
74068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74069: LD_VAR 0 12
74073: PPUSH
74074: LD_VAR 0 8
74078: PPUSH
74079: LD_INT 0
74081: PPUSH
74082: CALL 75861 0 3
// end ;
74086: GO 73984
74088: POP
74089: POP
// if enchidnas then
74090: LD_VAR 0 4
74094: IFFALSE 74161
// for i = 1 to enchidnas do
74096: LD_ADDR_VAR 0 11
74100: PUSH
74101: DOUBLE
74102: LD_INT 1
74104: DEC
74105: ST_TO_ADDR
74106: LD_VAR 0 4
74110: PUSH
74111: FOR_TO
74112: IFFALSE 74159
// begin hc_class = 13 ;
74114: LD_ADDR_OWVAR 28
74118: PUSH
74119: LD_INT 13
74121: ST_TO_ADDR
// hc_gallery =  ;
74122: LD_ADDR_OWVAR 33
74126: PUSH
74127: LD_STRING 
74129: ST_TO_ADDR
// animal := CreateHuman ;
74130: LD_ADDR_VAR 0 12
74134: PUSH
74135: CALL_OW 44
74139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74140: LD_VAR 0 12
74144: PPUSH
74145: LD_VAR 0 8
74149: PPUSH
74150: LD_INT 0
74152: PPUSH
74153: CALL 75861 0 3
// end ;
74157: GO 74111
74159: POP
74160: POP
// if fishes then
74161: LD_VAR 0 7
74165: IFFALSE 74232
// for i = 1 to fishes do
74167: LD_ADDR_VAR 0 11
74171: PUSH
74172: DOUBLE
74173: LD_INT 1
74175: DEC
74176: ST_TO_ADDR
74177: LD_VAR 0 7
74181: PUSH
74182: FOR_TO
74183: IFFALSE 74230
// begin hc_class = 20 ;
74185: LD_ADDR_OWVAR 28
74189: PUSH
74190: LD_INT 20
74192: ST_TO_ADDR
// hc_gallery =  ;
74193: LD_ADDR_OWVAR 33
74197: PUSH
74198: LD_STRING 
74200: ST_TO_ADDR
// animal := CreateHuman ;
74201: LD_ADDR_VAR 0 12
74205: PUSH
74206: CALL_OW 44
74210: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74211: LD_VAR 0 12
74215: PPUSH
74216: LD_VAR 0 9
74220: PPUSH
74221: LD_INT 0
74223: PPUSH
74224: CALL 75861 0 3
// end ;
74228: GO 74182
74230: POP
74231: POP
// end ;
74232: LD_VAR 0 10
74236: RET
// export function WantHeal ( sci , unit ) ; begin
74237: LD_INT 0
74239: PPUSH
// if GetTaskList ( sci ) > 0 then
74240: LD_VAR 0 1
74244: PPUSH
74245: CALL_OW 437
74249: PUSH
74250: LD_INT 0
74252: GREATER
74253: IFFALSE 74323
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74255: LD_VAR 0 1
74259: PPUSH
74260: CALL_OW 437
74264: PUSH
74265: LD_INT 1
74267: ARRAY
74268: PUSH
74269: LD_INT 1
74271: ARRAY
74272: PUSH
74273: LD_STRING l
74275: EQUAL
74276: PUSH
74277: LD_VAR 0 1
74281: PPUSH
74282: CALL_OW 437
74286: PUSH
74287: LD_INT 1
74289: ARRAY
74290: PUSH
74291: LD_INT 4
74293: ARRAY
74294: PUSH
74295: LD_VAR 0 2
74299: EQUAL
74300: AND
74301: IFFALSE 74313
// result := true else
74303: LD_ADDR_VAR 0 3
74307: PUSH
74308: LD_INT 1
74310: ST_TO_ADDR
74311: GO 74321
// result := false ;
74313: LD_ADDR_VAR 0 3
74317: PUSH
74318: LD_INT 0
74320: ST_TO_ADDR
// end else
74321: GO 74331
// result := false ;
74323: LD_ADDR_VAR 0 3
74327: PUSH
74328: LD_INT 0
74330: ST_TO_ADDR
// end ;
74331: LD_VAR 0 3
74335: RET
// export function HealTarget ( sci ) ; begin
74336: LD_INT 0
74338: PPUSH
// if not sci then
74339: LD_VAR 0 1
74343: NOT
74344: IFFALSE 74348
// exit ;
74346: GO 74413
// result := 0 ;
74348: LD_ADDR_VAR 0 2
74352: PUSH
74353: LD_INT 0
74355: ST_TO_ADDR
// if GetTaskList ( sci ) then
74356: LD_VAR 0 1
74360: PPUSH
74361: CALL_OW 437
74365: IFFALSE 74413
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74367: LD_VAR 0 1
74371: PPUSH
74372: CALL_OW 437
74376: PUSH
74377: LD_INT 1
74379: ARRAY
74380: PUSH
74381: LD_INT 1
74383: ARRAY
74384: PUSH
74385: LD_STRING l
74387: EQUAL
74388: IFFALSE 74413
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74390: LD_ADDR_VAR 0 2
74394: PUSH
74395: LD_VAR 0 1
74399: PPUSH
74400: CALL_OW 437
74404: PUSH
74405: LD_INT 1
74407: ARRAY
74408: PUSH
74409: LD_INT 4
74411: ARRAY
74412: ST_TO_ADDR
// end ;
74413: LD_VAR 0 2
74417: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74418: LD_INT 0
74420: PPUSH
74421: PPUSH
74422: PPUSH
74423: PPUSH
// if not base_units then
74424: LD_VAR 0 1
74428: NOT
74429: IFFALSE 74433
// exit ;
74431: GO 74520
// result := false ;
74433: LD_ADDR_VAR 0 2
74437: PUSH
74438: LD_INT 0
74440: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74441: LD_ADDR_VAR 0 5
74445: PUSH
74446: LD_VAR 0 1
74450: PPUSH
74451: LD_INT 21
74453: PUSH
74454: LD_INT 3
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PPUSH
74461: CALL_OW 72
74465: ST_TO_ADDR
// if not tmp then
74466: LD_VAR 0 5
74470: NOT
74471: IFFALSE 74475
// exit ;
74473: GO 74520
// for i in tmp do
74475: LD_ADDR_VAR 0 3
74479: PUSH
74480: LD_VAR 0 5
74484: PUSH
74485: FOR_IN
74486: IFFALSE 74518
// begin result := EnemyInRange ( i , 22 ) ;
74488: LD_ADDR_VAR 0 2
74492: PUSH
74493: LD_VAR 0 3
74497: PPUSH
74498: LD_INT 22
74500: PPUSH
74501: CALL 72107 0 2
74505: ST_TO_ADDR
// if result then
74506: LD_VAR 0 2
74510: IFFALSE 74516
// exit ;
74512: POP
74513: POP
74514: GO 74520
// end ;
74516: GO 74485
74518: POP
74519: POP
// end ;
74520: LD_VAR 0 2
74524: RET
// export function FilterByTag ( units , tag ) ; begin
74525: LD_INT 0
74527: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74528: LD_ADDR_VAR 0 3
74532: PUSH
74533: LD_VAR 0 1
74537: PPUSH
74538: LD_INT 120
74540: PUSH
74541: LD_VAR 0 2
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PPUSH
74550: CALL_OW 72
74554: ST_TO_ADDR
// end ;
74555: LD_VAR 0 3
74559: RET
// export function IsDriver ( un ) ; begin
74560: LD_INT 0
74562: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74563: LD_ADDR_VAR 0 2
74567: PUSH
74568: LD_VAR 0 1
74572: PUSH
74573: LD_INT 55
74575: PUSH
74576: EMPTY
74577: LIST
74578: PPUSH
74579: CALL_OW 69
74583: IN
74584: ST_TO_ADDR
// end ;
74585: LD_VAR 0 2
74589: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74590: LD_INT 0
74592: PPUSH
74593: PPUSH
// list := [ ] ;
74594: LD_ADDR_VAR 0 5
74598: PUSH
74599: EMPTY
74600: ST_TO_ADDR
// case d of 0 :
74601: LD_VAR 0 3
74605: PUSH
74606: LD_INT 0
74608: DOUBLE
74609: EQUAL
74610: IFTRUE 74614
74612: GO 74747
74614: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74615: LD_ADDR_VAR 0 5
74619: PUSH
74620: LD_VAR 0 1
74624: PUSH
74625: LD_INT 4
74627: MINUS
74628: PUSH
74629: LD_VAR 0 2
74633: PUSH
74634: LD_INT 4
74636: MINUS
74637: PUSH
74638: LD_INT 2
74640: PUSH
74641: EMPTY
74642: LIST
74643: LIST
74644: LIST
74645: PUSH
74646: LD_VAR 0 1
74650: PUSH
74651: LD_INT 3
74653: MINUS
74654: PUSH
74655: LD_VAR 0 2
74659: PUSH
74660: LD_INT 1
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: LIST
74667: PUSH
74668: LD_VAR 0 1
74672: PUSH
74673: LD_INT 4
74675: PLUS
74676: PUSH
74677: LD_VAR 0 2
74681: PUSH
74682: LD_INT 4
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: LIST
74689: PUSH
74690: LD_VAR 0 1
74694: PUSH
74695: LD_INT 3
74697: PLUS
74698: PUSH
74699: LD_VAR 0 2
74703: PUSH
74704: LD_INT 3
74706: PLUS
74707: PUSH
74708: LD_INT 5
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: LIST
74715: PUSH
74716: LD_VAR 0 1
74720: PUSH
74721: LD_VAR 0 2
74725: PUSH
74726: LD_INT 4
74728: PLUS
74729: PUSH
74730: LD_INT 0
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: LIST
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: LIST
74742: LIST
74743: LIST
74744: ST_TO_ADDR
// end ; 1 :
74745: GO 75445
74747: LD_INT 1
74749: DOUBLE
74750: EQUAL
74751: IFTRUE 74755
74753: GO 74888
74755: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74756: LD_ADDR_VAR 0 5
74760: PUSH
74761: LD_VAR 0 1
74765: PUSH
74766: LD_VAR 0 2
74770: PUSH
74771: LD_INT 4
74773: MINUS
74774: PUSH
74775: LD_INT 3
74777: PUSH
74778: EMPTY
74779: LIST
74780: LIST
74781: LIST
74782: PUSH
74783: LD_VAR 0 1
74787: PUSH
74788: LD_INT 3
74790: MINUS
74791: PUSH
74792: LD_VAR 0 2
74796: PUSH
74797: LD_INT 3
74799: MINUS
74800: PUSH
74801: LD_INT 2
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: LIST
74808: PUSH
74809: LD_VAR 0 1
74813: PUSH
74814: LD_INT 4
74816: MINUS
74817: PUSH
74818: LD_VAR 0 2
74822: PUSH
74823: LD_INT 1
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: LIST
74830: PUSH
74831: LD_VAR 0 1
74835: PUSH
74836: LD_VAR 0 2
74840: PUSH
74841: LD_INT 3
74843: PLUS
74844: PUSH
74845: LD_INT 0
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: LIST
74852: PUSH
74853: LD_VAR 0 1
74857: PUSH
74858: LD_INT 4
74860: PLUS
74861: PUSH
74862: LD_VAR 0 2
74866: PUSH
74867: LD_INT 4
74869: PLUS
74870: PUSH
74871: LD_INT 5
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: LIST
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: ST_TO_ADDR
// end ; 2 :
74886: GO 75445
74888: LD_INT 2
74890: DOUBLE
74891: EQUAL
74892: IFTRUE 74896
74894: GO 75025
74896: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74897: LD_ADDR_VAR 0 5
74901: PUSH
74902: LD_VAR 0 1
74906: PUSH
74907: LD_VAR 0 2
74911: PUSH
74912: LD_INT 3
74914: MINUS
74915: PUSH
74916: LD_INT 3
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: LIST
74923: PUSH
74924: LD_VAR 0 1
74928: PUSH
74929: LD_INT 4
74931: PLUS
74932: PUSH
74933: LD_VAR 0 2
74937: PUSH
74938: LD_INT 4
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: LIST
74945: PUSH
74946: LD_VAR 0 1
74950: PUSH
74951: LD_VAR 0 2
74955: PUSH
74956: LD_INT 4
74958: PLUS
74959: PUSH
74960: LD_INT 0
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: LIST
74967: PUSH
74968: LD_VAR 0 1
74972: PUSH
74973: LD_INT 3
74975: MINUS
74976: PUSH
74977: LD_VAR 0 2
74981: PUSH
74982: LD_INT 1
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: LIST
74989: PUSH
74990: LD_VAR 0 1
74994: PUSH
74995: LD_INT 4
74997: MINUS
74998: PUSH
74999: LD_VAR 0 2
75003: PUSH
75004: LD_INT 4
75006: MINUS
75007: PUSH
75008: LD_INT 2
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: LIST
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: ST_TO_ADDR
// end ; 3 :
75023: GO 75445
75025: LD_INT 3
75027: DOUBLE
75028: EQUAL
75029: IFTRUE 75033
75031: GO 75166
75033: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75034: LD_ADDR_VAR 0 5
75038: PUSH
75039: LD_VAR 0 1
75043: PUSH
75044: LD_INT 3
75046: PLUS
75047: PUSH
75048: LD_VAR 0 2
75052: PUSH
75053: LD_INT 4
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: LIST
75060: PUSH
75061: LD_VAR 0 1
75065: PUSH
75066: LD_INT 4
75068: PLUS
75069: PUSH
75070: LD_VAR 0 2
75074: PUSH
75075: LD_INT 4
75077: PLUS
75078: PUSH
75079: LD_INT 5
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: LIST
75086: PUSH
75087: LD_VAR 0 1
75091: PUSH
75092: LD_INT 4
75094: MINUS
75095: PUSH
75096: LD_VAR 0 2
75100: PUSH
75101: LD_INT 1
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: LIST
75108: PUSH
75109: LD_VAR 0 1
75113: PUSH
75114: LD_VAR 0 2
75118: PUSH
75119: LD_INT 4
75121: MINUS
75122: PUSH
75123: LD_INT 3
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: LIST
75130: PUSH
75131: LD_VAR 0 1
75135: PUSH
75136: LD_INT 3
75138: MINUS
75139: PUSH
75140: LD_VAR 0 2
75144: PUSH
75145: LD_INT 3
75147: MINUS
75148: PUSH
75149: LD_INT 2
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: LIST
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: LIST
75161: LIST
75162: LIST
75163: ST_TO_ADDR
// end ; 4 :
75164: GO 75445
75166: LD_INT 4
75168: DOUBLE
75169: EQUAL
75170: IFTRUE 75174
75172: GO 75307
75174: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75175: LD_ADDR_VAR 0 5
75179: PUSH
75180: LD_VAR 0 1
75184: PUSH
75185: LD_VAR 0 2
75189: PUSH
75190: LD_INT 4
75192: PLUS
75193: PUSH
75194: LD_INT 0
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: LIST
75201: PUSH
75202: LD_VAR 0 1
75206: PUSH
75207: LD_INT 3
75209: PLUS
75210: PUSH
75211: LD_VAR 0 2
75215: PUSH
75216: LD_INT 3
75218: PLUS
75219: PUSH
75220: LD_INT 5
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: LIST
75227: PUSH
75228: LD_VAR 0 1
75232: PUSH
75233: LD_INT 4
75235: PLUS
75236: PUSH
75237: LD_VAR 0 2
75241: PUSH
75242: LD_INT 4
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: LIST
75249: PUSH
75250: LD_VAR 0 1
75254: PUSH
75255: LD_VAR 0 2
75259: PUSH
75260: LD_INT 3
75262: MINUS
75263: PUSH
75264: LD_INT 3
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: LIST
75271: PUSH
75272: LD_VAR 0 1
75276: PUSH
75277: LD_INT 4
75279: MINUS
75280: PUSH
75281: LD_VAR 0 2
75285: PUSH
75286: LD_INT 4
75288: MINUS
75289: PUSH
75290: LD_INT 2
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: LIST
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: LIST
75302: LIST
75303: LIST
75304: ST_TO_ADDR
// end ; 5 :
75305: GO 75445
75307: LD_INT 5
75309: DOUBLE
75310: EQUAL
75311: IFTRUE 75315
75313: GO 75444
75315: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75316: LD_ADDR_VAR 0 5
75320: PUSH
75321: LD_VAR 0 1
75325: PUSH
75326: LD_INT 4
75328: MINUS
75329: PUSH
75330: LD_VAR 0 2
75334: PUSH
75335: LD_INT 1
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: LIST
75342: PUSH
75343: LD_VAR 0 1
75347: PUSH
75348: LD_VAR 0 2
75352: PUSH
75353: LD_INT 4
75355: MINUS
75356: PUSH
75357: LD_INT 3
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: LIST
75364: PUSH
75365: LD_VAR 0 1
75369: PUSH
75370: LD_INT 4
75372: PLUS
75373: PUSH
75374: LD_VAR 0 2
75378: PUSH
75379: LD_INT 4
75381: PLUS
75382: PUSH
75383: LD_INT 5
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: LIST
75390: PUSH
75391: LD_VAR 0 1
75395: PUSH
75396: LD_INT 3
75398: PLUS
75399: PUSH
75400: LD_VAR 0 2
75404: PUSH
75405: LD_INT 4
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: LIST
75412: PUSH
75413: LD_VAR 0 1
75417: PUSH
75418: LD_VAR 0 2
75422: PUSH
75423: LD_INT 3
75425: PLUS
75426: PUSH
75427: LD_INT 0
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: LIST
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: ST_TO_ADDR
// end ; end ;
75442: GO 75445
75444: POP
// result := list ;
75445: LD_ADDR_VAR 0 4
75449: PUSH
75450: LD_VAR 0 5
75454: ST_TO_ADDR
// end ;
75455: LD_VAR 0 4
75459: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75460: LD_INT 0
75462: PPUSH
75463: PPUSH
75464: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75465: LD_VAR 0 1
75469: NOT
75470: PUSH
75471: LD_VAR 0 2
75475: PUSH
75476: LD_INT 1
75478: PUSH
75479: LD_INT 2
75481: PUSH
75482: LD_INT 3
75484: PUSH
75485: LD_INT 4
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: IN
75494: NOT
75495: OR
75496: IFFALSE 75500
// exit ;
75498: GO 75583
// tmp := [ ] ;
75500: LD_ADDR_VAR 0 5
75504: PUSH
75505: EMPTY
75506: ST_TO_ADDR
// for i in units do
75507: LD_ADDR_VAR 0 4
75511: PUSH
75512: LD_VAR 0 1
75516: PUSH
75517: FOR_IN
75518: IFFALSE 75552
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75520: LD_ADDR_VAR 0 5
75524: PUSH
75525: LD_VAR 0 5
75529: PPUSH
75530: LD_VAR 0 4
75534: PPUSH
75535: LD_VAR 0 2
75539: PPUSH
75540: CALL_OW 259
75544: PPUSH
75545: CALL 76944 0 2
75549: ST_TO_ADDR
75550: GO 75517
75552: POP
75553: POP
// if not tmp then
75554: LD_VAR 0 5
75558: NOT
75559: IFFALSE 75563
// exit ;
75561: GO 75583
// result := SortListByListDesc ( units , tmp ) ;
75563: LD_ADDR_VAR 0 3
75567: PUSH
75568: LD_VAR 0 1
75572: PPUSH
75573: LD_VAR 0 5
75577: PPUSH
75578: CALL_OW 77
75582: ST_TO_ADDR
// end ;
75583: LD_VAR 0 3
75587: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75588: LD_INT 0
75590: PPUSH
75591: PPUSH
75592: PPUSH
// result := false ;
75593: LD_ADDR_VAR 0 3
75597: PUSH
75598: LD_INT 0
75600: ST_TO_ADDR
// if not building then
75601: LD_VAR 0 2
75605: NOT
75606: IFFALSE 75610
// exit ;
75608: GO 75748
// x := GetX ( building ) ;
75610: LD_ADDR_VAR 0 4
75614: PUSH
75615: LD_VAR 0 2
75619: PPUSH
75620: CALL_OW 250
75624: ST_TO_ADDR
// y := GetY ( building ) ;
75625: LD_ADDR_VAR 0 5
75629: PUSH
75630: LD_VAR 0 2
75634: PPUSH
75635: CALL_OW 251
75639: ST_TO_ADDR
// if not x or not y then
75640: LD_VAR 0 4
75644: NOT
75645: PUSH
75646: LD_VAR 0 5
75650: NOT
75651: OR
75652: IFFALSE 75656
// exit ;
75654: GO 75748
// if GetTaskList ( unit ) then
75656: LD_VAR 0 1
75660: PPUSH
75661: CALL_OW 437
75665: IFFALSE 75748
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75667: LD_STRING e
75669: PUSH
75670: LD_VAR 0 1
75674: PPUSH
75675: CALL_OW 437
75679: PUSH
75680: LD_INT 1
75682: ARRAY
75683: PUSH
75684: LD_INT 1
75686: ARRAY
75687: EQUAL
75688: PUSH
75689: LD_VAR 0 4
75693: PUSH
75694: LD_VAR 0 1
75698: PPUSH
75699: CALL_OW 437
75703: PUSH
75704: LD_INT 1
75706: ARRAY
75707: PUSH
75708: LD_INT 2
75710: ARRAY
75711: EQUAL
75712: AND
75713: PUSH
75714: LD_VAR 0 5
75718: PUSH
75719: LD_VAR 0 1
75723: PPUSH
75724: CALL_OW 437
75728: PUSH
75729: LD_INT 1
75731: ARRAY
75732: PUSH
75733: LD_INT 3
75735: ARRAY
75736: EQUAL
75737: AND
75738: IFFALSE 75748
// result := true end ;
75740: LD_ADDR_VAR 0 3
75744: PUSH
75745: LD_INT 1
75747: ST_TO_ADDR
// end ;
75748: LD_VAR 0 3
75752: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75753: LD_INT 0
75755: PPUSH
// result := false ;
75756: LD_ADDR_VAR 0 4
75760: PUSH
75761: LD_INT 0
75763: ST_TO_ADDR
// if GetTaskList ( unit ) then
75764: LD_VAR 0 1
75768: PPUSH
75769: CALL_OW 437
75773: IFFALSE 75856
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75775: LD_STRING M
75777: PUSH
75778: LD_VAR 0 1
75782: PPUSH
75783: CALL_OW 437
75787: PUSH
75788: LD_INT 1
75790: ARRAY
75791: PUSH
75792: LD_INT 1
75794: ARRAY
75795: EQUAL
75796: PUSH
75797: LD_VAR 0 2
75801: PUSH
75802: LD_VAR 0 1
75806: PPUSH
75807: CALL_OW 437
75811: PUSH
75812: LD_INT 1
75814: ARRAY
75815: PUSH
75816: LD_INT 2
75818: ARRAY
75819: EQUAL
75820: AND
75821: PUSH
75822: LD_VAR 0 3
75826: PUSH
75827: LD_VAR 0 1
75831: PPUSH
75832: CALL_OW 437
75836: PUSH
75837: LD_INT 1
75839: ARRAY
75840: PUSH
75841: LD_INT 3
75843: ARRAY
75844: EQUAL
75845: AND
75846: IFFALSE 75856
// result := true ;
75848: LD_ADDR_VAR 0 4
75852: PUSH
75853: LD_INT 1
75855: ST_TO_ADDR
// end ; end ;
75856: LD_VAR 0 4
75860: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75861: LD_INT 0
75863: PPUSH
75864: PPUSH
75865: PPUSH
75866: PPUSH
// if not unit or not area then
75867: LD_VAR 0 1
75871: NOT
75872: PUSH
75873: LD_VAR 0 2
75877: NOT
75878: OR
75879: IFFALSE 75883
// exit ;
75881: GO 76047
// tmp := AreaToList ( area , i ) ;
75883: LD_ADDR_VAR 0 6
75887: PUSH
75888: LD_VAR 0 2
75892: PPUSH
75893: LD_VAR 0 5
75897: PPUSH
75898: CALL_OW 517
75902: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75903: LD_ADDR_VAR 0 5
75907: PUSH
75908: DOUBLE
75909: LD_INT 1
75911: DEC
75912: ST_TO_ADDR
75913: LD_VAR 0 6
75917: PUSH
75918: LD_INT 1
75920: ARRAY
75921: PUSH
75922: FOR_TO
75923: IFFALSE 76045
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75925: LD_ADDR_VAR 0 7
75929: PUSH
75930: LD_VAR 0 6
75934: PUSH
75935: LD_INT 1
75937: ARRAY
75938: PUSH
75939: LD_VAR 0 5
75943: ARRAY
75944: PUSH
75945: LD_VAR 0 6
75949: PUSH
75950: LD_INT 2
75952: ARRAY
75953: PUSH
75954: LD_VAR 0 5
75958: ARRAY
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75964: LD_VAR 0 7
75968: PUSH
75969: LD_INT 1
75971: ARRAY
75972: PPUSH
75973: LD_VAR 0 7
75977: PUSH
75978: LD_INT 2
75980: ARRAY
75981: PPUSH
75982: CALL_OW 428
75986: PUSH
75987: LD_INT 0
75989: EQUAL
75990: IFFALSE 76043
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75992: LD_VAR 0 1
75996: PPUSH
75997: LD_VAR 0 7
76001: PUSH
76002: LD_INT 1
76004: ARRAY
76005: PPUSH
76006: LD_VAR 0 7
76010: PUSH
76011: LD_INT 2
76013: ARRAY
76014: PPUSH
76015: LD_VAR 0 3
76019: PPUSH
76020: CALL_OW 48
// result := IsPlaced ( unit ) ;
76024: LD_ADDR_VAR 0 4
76028: PUSH
76029: LD_VAR 0 1
76033: PPUSH
76034: CALL_OW 305
76038: ST_TO_ADDR
// exit ;
76039: POP
76040: POP
76041: GO 76047
// end ; end ;
76043: GO 75922
76045: POP
76046: POP
// end ;
76047: LD_VAR 0 4
76051: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76052: LD_INT 0
76054: PPUSH
76055: PPUSH
76056: PPUSH
// if not side or side > 8 then
76057: LD_VAR 0 1
76061: NOT
76062: PUSH
76063: LD_VAR 0 1
76067: PUSH
76068: LD_INT 8
76070: GREATER
76071: OR
76072: IFFALSE 76076
// exit ;
76074: GO 76263
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76076: LD_ADDR_VAR 0 4
76080: PUSH
76081: LD_INT 22
76083: PUSH
76084: LD_VAR 0 1
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 21
76095: PUSH
76096: LD_INT 3
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: PPUSH
76107: CALL_OW 69
76111: ST_TO_ADDR
// if not tmp then
76112: LD_VAR 0 4
76116: NOT
76117: IFFALSE 76121
// exit ;
76119: GO 76263
// enable_addtolog := true ;
76121: LD_ADDR_OWVAR 81
76125: PUSH
76126: LD_INT 1
76128: ST_TO_ADDR
// AddToLog ( [ ) ;
76129: LD_STRING [
76131: PPUSH
76132: CALL_OW 561
// for i in tmp do
76136: LD_ADDR_VAR 0 3
76140: PUSH
76141: LD_VAR 0 4
76145: PUSH
76146: FOR_IN
76147: IFFALSE 76254
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76149: LD_STRING [
76151: PUSH
76152: LD_VAR 0 3
76156: PPUSH
76157: CALL_OW 266
76161: STR
76162: PUSH
76163: LD_STRING , 
76165: STR
76166: PUSH
76167: LD_VAR 0 3
76171: PPUSH
76172: CALL_OW 250
76176: STR
76177: PUSH
76178: LD_STRING , 
76180: STR
76181: PUSH
76182: LD_VAR 0 3
76186: PPUSH
76187: CALL_OW 251
76191: STR
76192: PUSH
76193: LD_STRING , 
76195: STR
76196: PUSH
76197: LD_VAR 0 3
76201: PPUSH
76202: CALL_OW 254
76206: STR
76207: PUSH
76208: LD_STRING , 
76210: STR
76211: PUSH
76212: LD_VAR 0 3
76216: PPUSH
76217: LD_INT 1
76219: PPUSH
76220: CALL_OW 268
76224: STR
76225: PUSH
76226: LD_STRING , 
76228: STR
76229: PUSH
76230: LD_VAR 0 3
76234: PPUSH
76235: LD_INT 2
76237: PPUSH
76238: CALL_OW 268
76242: STR
76243: PUSH
76244: LD_STRING ],
76246: STR
76247: PPUSH
76248: CALL_OW 561
// end ;
76252: GO 76146
76254: POP
76255: POP
// AddToLog ( ]; ) ;
76256: LD_STRING ];
76258: PPUSH
76259: CALL_OW 561
// end ;
76263: LD_VAR 0 2
76267: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76268: LD_INT 0
76270: PPUSH
76271: PPUSH
76272: PPUSH
76273: PPUSH
76274: PPUSH
// if not area or not rate or not max then
76275: LD_VAR 0 1
76279: NOT
76280: PUSH
76281: LD_VAR 0 2
76285: NOT
76286: OR
76287: PUSH
76288: LD_VAR 0 4
76292: NOT
76293: OR
76294: IFFALSE 76298
// exit ;
76296: GO 76487
// while 1 do
76298: LD_INT 1
76300: IFFALSE 76487
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76302: LD_ADDR_VAR 0 9
76306: PUSH
76307: LD_VAR 0 1
76311: PPUSH
76312: LD_INT 1
76314: PPUSH
76315: CALL_OW 287
76319: PUSH
76320: LD_INT 10
76322: MUL
76323: ST_TO_ADDR
// r := rate / 10 ;
76324: LD_ADDR_VAR 0 7
76328: PUSH
76329: LD_VAR 0 2
76333: PUSH
76334: LD_INT 10
76336: DIVREAL
76337: ST_TO_ADDR
// time := 1 1$00 ;
76338: LD_ADDR_VAR 0 8
76342: PUSH
76343: LD_INT 2100
76345: ST_TO_ADDR
// if amount < min then
76346: LD_VAR 0 9
76350: PUSH
76351: LD_VAR 0 3
76355: LESS
76356: IFFALSE 76374
// r := r * 2 else
76358: LD_ADDR_VAR 0 7
76362: PUSH
76363: LD_VAR 0 7
76367: PUSH
76368: LD_INT 2
76370: MUL
76371: ST_TO_ADDR
76372: GO 76400
// if amount > max then
76374: LD_VAR 0 9
76378: PUSH
76379: LD_VAR 0 4
76383: GREATER
76384: IFFALSE 76400
// r := r / 2 ;
76386: LD_ADDR_VAR 0 7
76390: PUSH
76391: LD_VAR 0 7
76395: PUSH
76396: LD_INT 2
76398: DIVREAL
76399: ST_TO_ADDR
// time := time / r ;
76400: LD_ADDR_VAR 0 8
76404: PUSH
76405: LD_VAR 0 8
76409: PUSH
76410: LD_VAR 0 7
76414: DIVREAL
76415: ST_TO_ADDR
// if time < 0 then
76416: LD_VAR 0 8
76420: PUSH
76421: LD_INT 0
76423: LESS
76424: IFFALSE 76441
// time := time * - 1 ;
76426: LD_ADDR_VAR 0 8
76430: PUSH
76431: LD_VAR 0 8
76435: PUSH
76436: LD_INT 1
76438: NEG
76439: MUL
76440: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76441: LD_VAR 0 8
76445: PUSH
76446: LD_INT 35
76448: PPUSH
76449: LD_INT 875
76451: PPUSH
76452: CALL_OW 12
76456: PLUS
76457: PPUSH
76458: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76462: LD_INT 1
76464: PPUSH
76465: LD_INT 5
76467: PPUSH
76468: CALL_OW 12
76472: PPUSH
76473: LD_VAR 0 1
76477: PPUSH
76478: LD_INT 1
76480: PPUSH
76481: CALL_OW 55
// end ;
76485: GO 76298
// end ;
76487: LD_VAR 0 5
76491: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76492: LD_INT 0
76494: PPUSH
76495: PPUSH
76496: PPUSH
76497: PPUSH
76498: PPUSH
76499: PPUSH
76500: PPUSH
76501: PPUSH
// if not turrets or not factories then
76502: LD_VAR 0 1
76506: NOT
76507: PUSH
76508: LD_VAR 0 2
76512: NOT
76513: OR
76514: IFFALSE 76518
// exit ;
76516: GO 76825
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76518: LD_ADDR_VAR 0 10
76522: PUSH
76523: LD_INT 5
76525: PUSH
76526: LD_INT 6
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: PUSH
76533: LD_INT 2
76535: PUSH
76536: LD_INT 4
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: PUSH
76543: LD_INT 3
76545: PUSH
76546: LD_INT 5
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: LIST
76557: PUSH
76558: LD_INT 24
76560: PUSH
76561: LD_INT 25
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: PUSH
76568: LD_INT 23
76570: PUSH
76571: LD_INT 27
76573: PUSH
76574: EMPTY
76575: LIST
76576: LIST
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PUSH
76582: LD_INT 42
76584: PUSH
76585: LD_INT 43
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 44
76594: PUSH
76595: LD_INT 46
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: LD_INT 45
76604: PUSH
76605: LD_INT 47
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: LIST
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: LIST
76621: ST_TO_ADDR
// result := [ ] ;
76622: LD_ADDR_VAR 0 3
76626: PUSH
76627: EMPTY
76628: ST_TO_ADDR
// for i in turrets do
76629: LD_ADDR_VAR 0 4
76633: PUSH
76634: LD_VAR 0 1
76638: PUSH
76639: FOR_IN
76640: IFFALSE 76823
// begin nat := GetNation ( i ) ;
76642: LD_ADDR_VAR 0 7
76646: PUSH
76647: LD_VAR 0 4
76651: PPUSH
76652: CALL_OW 248
76656: ST_TO_ADDR
// weapon := 0 ;
76657: LD_ADDR_VAR 0 8
76661: PUSH
76662: LD_INT 0
76664: ST_TO_ADDR
// if not nat then
76665: LD_VAR 0 7
76669: NOT
76670: IFFALSE 76674
// continue ;
76672: GO 76639
// for j in list [ nat ] do
76674: LD_ADDR_VAR 0 5
76678: PUSH
76679: LD_VAR 0 10
76683: PUSH
76684: LD_VAR 0 7
76688: ARRAY
76689: PUSH
76690: FOR_IN
76691: IFFALSE 76732
// if GetBWeapon ( i ) = j [ 1 ] then
76693: LD_VAR 0 4
76697: PPUSH
76698: CALL_OW 269
76702: PUSH
76703: LD_VAR 0 5
76707: PUSH
76708: LD_INT 1
76710: ARRAY
76711: EQUAL
76712: IFFALSE 76730
// begin weapon := j [ 2 ] ;
76714: LD_ADDR_VAR 0 8
76718: PUSH
76719: LD_VAR 0 5
76723: PUSH
76724: LD_INT 2
76726: ARRAY
76727: ST_TO_ADDR
// break ;
76728: GO 76732
// end ;
76730: GO 76690
76732: POP
76733: POP
// if not weapon then
76734: LD_VAR 0 8
76738: NOT
76739: IFFALSE 76743
// continue ;
76741: GO 76639
// for k in factories do
76743: LD_ADDR_VAR 0 6
76747: PUSH
76748: LD_VAR 0 2
76752: PUSH
76753: FOR_IN
76754: IFFALSE 76819
// begin weapons := AvailableWeaponList ( k ) ;
76756: LD_ADDR_VAR 0 9
76760: PUSH
76761: LD_VAR 0 6
76765: PPUSH
76766: CALL_OW 478
76770: ST_TO_ADDR
// if not weapons then
76771: LD_VAR 0 9
76775: NOT
76776: IFFALSE 76780
// continue ;
76778: GO 76753
// if weapon in weapons then
76780: LD_VAR 0 8
76784: PUSH
76785: LD_VAR 0 9
76789: IN
76790: IFFALSE 76817
// begin result := [ i , weapon ] ;
76792: LD_ADDR_VAR 0 3
76796: PUSH
76797: LD_VAR 0 4
76801: PUSH
76802: LD_VAR 0 8
76806: PUSH
76807: EMPTY
76808: LIST
76809: LIST
76810: ST_TO_ADDR
// exit ;
76811: POP
76812: POP
76813: POP
76814: POP
76815: GO 76825
// end ; end ;
76817: GO 76753
76819: POP
76820: POP
// end ;
76821: GO 76639
76823: POP
76824: POP
// end ;
76825: LD_VAR 0 3
76829: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76830: LD_INT 0
76832: PPUSH
// if not side or side > 8 then
76833: LD_VAR 0 3
76837: NOT
76838: PUSH
76839: LD_VAR 0 3
76843: PUSH
76844: LD_INT 8
76846: GREATER
76847: OR
76848: IFFALSE 76852
// exit ;
76850: GO 76911
// if not range then
76852: LD_VAR 0 4
76856: NOT
76857: IFFALSE 76868
// range := - 12 ;
76859: LD_ADDR_VAR 0 4
76863: PUSH
76864: LD_INT 12
76866: NEG
76867: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76868: LD_VAR 0 1
76872: PPUSH
76873: LD_VAR 0 2
76877: PPUSH
76878: LD_VAR 0 3
76882: PPUSH
76883: LD_VAR 0 4
76887: PPUSH
76888: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76892: LD_VAR 0 1
76896: PPUSH
76897: LD_VAR 0 2
76901: PPUSH
76902: LD_VAR 0 3
76906: PPUSH
76907: CALL_OW 331
// end ;
76911: LD_VAR 0 5
76915: RET
// export function Video ( mode ) ; begin
76916: LD_INT 0
76918: PPUSH
// ingame_video = mode ;
76919: LD_ADDR_OWVAR 52
76923: PUSH
76924: LD_VAR 0 1
76928: ST_TO_ADDR
// interface_hidden = mode ;
76929: LD_ADDR_OWVAR 54
76933: PUSH
76934: LD_VAR 0 1
76938: ST_TO_ADDR
// end ;
76939: LD_VAR 0 2
76943: RET
// export function Join ( array , element ) ; begin
76944: LD_INT 0
76946: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76947: LD_ADDR_VAR 0 3
76951: PUSH
76952: LD_VAR 0 1
76956: PPUSH
76957: LD_VAR 0 1
76961: PUSH
76962: LD_INT 1
76964: PLUS
76965: PPUSH
76966: LD_VAR 0 2
76970: PPUSH
76971: CALL_OW 1
76975: ST_TO_ADDR
// end ;
76976: LD_VAR 0 3
76980: RET
// export function JoinUnion ( array , element ) ; begin
76981: LD_INT 0
76983: PPUSH
// result := array union element ;
76984: LD_ADDR_VAR 0 3
76988: PUSH
76989: LD_VAR 0 1
76993: PUSH
76994: LD_VAR 0 2
76998: UNION
76999: ST_TO_ADDR
// end ;
77000: LD_VAR 0 3
77004: RET
// export function GetBehemoths ( side ) ; begin
77005: LD_INT 0
77007: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77008: LD_ADDR_VAR 0 2
77012: PUSH
77013: LD_INT 22
77015: PUSH
77016: LD_VAR 0 1
77020: PUSH
77021: EMPTY
77022: LIST
77023: LIST
77024: PUSH
77025: LD_INT 31
77027: PUSH
77028: LD_INT 25
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PPUSH
77039: CALL_OW 69
77043: ST_TO_ADDR
// end ;
77044: LD_VAR 0 2
77048: RET
// export function Shuffle ( array ) ; var i , index ; begin
77049: LD_INT 0
77051: PPUSH
77052: PPUSH
77053: PPUSH
// result := [ ] ;
77054: LD_ADDR_VAR 0 2
77058: PUSH
77059: EMPTY
77060: ST_TO_ADDR
// if not array then
77061: LD_VAR 0 1
77065: NOT
77066: IFFALSE 77070
// exit ;
77068: GO 77169
// Randomize ;
77070: CALL_OW 10
// for i = array downto 1 do
77074: LD_ADDR_VAR 0 3
77078: PUSH
77079: DOUBLE
77080: LD_VAR 0 1
77084: INC
77085: ST_TO_ADDR
77086: LD_INT 1
77088: PUSH
77089: FOR_DOWNTO
77090: IFFALSE 77167
// begin index := rand ( 1 , array ) ;
77092: LD_ADDR_VAR 0 4
77096: PUSH
77097: LD_INT 1
77099: PPUSH
77100: LD_VAR 0 1
77104: PPUSH
77105: CALL_OW 12
77109: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77110: LD_ADDR_VAR 0 2
77114: PUSH
77115: LD_VAR 0 2
77119: PPUSH
77120: LD_VAR 0 2
77124: PUSH
77125: LD_INT 1
77127: PLUS
77128: PPUSH
77129: LD_VAR 0 1
77133: PUSH
77134: LD_VAR 0 4
77138: ARRAY
77139: PPUSH
77140: CALL_OW 2
77144: ST_TO_ADDR
// array := Delete ( array , index ) ;
77145: LD_ADDR_VAR 0 1
77149: PUSH
77150: LD_VAR 0 1
77154: PPUSH
77155: LD_VAR 0 4
77159: PPUSH
77160: CALL_OW 3
77164: ST_TO_ADDR
// end ;
77165: GO 77089
77167: POP
77168: POP
// end ;
77169: LD_VAR 0 2
77173: RET
// export function GetBaseMaterials ( base ) ; begin
77174: LD_INT 0
77176: PPUSH
// result := [ 0 , 0 , 0 ] ;
77177: LD_ADDR_VAR 0 2
77181: PUSH
77182: LD_INT 0
77184: PUSH
77185: LD_INT 0
77187: PUSH
77188: LD_INT 0
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: LIST
77195: ST_TO_ADDR
// if not base then
77196: LD_VAR 0 1
77200: NOT
77201: IFFALSE 77205
// exit ;
77203: GO 77254
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77205: LD_ADDR_VAR 0 2
77209: PUSH
77210: LD_VAR 0 1
77214: PPUSH
77215: LD_INT 1
77217: PPUSH
77218: CALL_OW 275
77222: PUSH
77223: LD_VAR 0 1
77227: PPUSH
77228: LD_INT 2
77230: PPUSH
77231: CALL_OW 275
77235: PUSH
77236: LD_VAR 0 1
77240: PPUSH
77241: LD_INT 3
77243: PPUSH
77244: CALL_OW 275
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: LIST
77253: ST_TO_ADDR
// end ;
77254: LD_VAR 0 2
77258: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77259: LD_INT 0
77261: PPUSH
77262: PPUSH
// result := array ;
77263: LD_ADDR_VAR 0 3
77267: PUSH
77268: LD_VAR 0 1
77272: ST_TO_ADDR
// if size >= result then
77273: LD_VAR 0 2
77277: PUSH
77278: LD_VAR 0 3
77282: GREATEREQUAL
77283: IFFALSE 77287
// exit ;
77285: GO 77337
// if size then
77287: LD_VAR 0 2
77291: IFFALSE 77337
// for i := array downto size do
77293: LD_ADDR_VAR 0 4
77297: PUSH
77298: DOUBLE
77299: LD_VAR 0 1
77303: INC
77304: ST_TO_ADDR
77305: LD_VAR 0 2
77309: PUSH
77310: FOR_DOWNTO
77311: IFFALSE 77335
// result := Delete ( result , result ) ;
77313: LD_ADDR_VAR 0 3
77317: PUSH
77318: LD_VAR 0 3
77322: PPUSH
77323: LD_VAR 0 3
77327: PPUSH
77328: CALL_OW 3
77332: ST_TO_ADDR
77333: GO 77310
77335: POP
77336: POP
// end ;
77337: LD_VAR 0 3
77341: RET
// export function ComExit ( unit ) ; var tmp ; begin
77342: LD_INT 0
77344: PPUSH
77345: PPUSH
// if not IsInUnit ( unit ) then
77346: LD_VAR 0 1
77350: PPUSH
77351: CALL_OW 310
77355: NOT
77356: IFFALSE 77360
// exit ;
77358: GO 77420
// tmp := IsInUnit ( unit ) ;
77360: LD_ADDR_VAR 0 3
77364: PUSH
77365: LD_VAR 0 1
77369: PPUSH
77370: CALL_OW 310
77374: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77375: LD_VAR 0 3
77379: PPUSH
77380: CALL_OW 247
77384: PUSH
77385: LD_INT 2
77387: EQUAL
77388: IFFALSE 77401
// ComExitVehicle ( unit ) else
77390: LD_VAR 0 1
77394: PPUSH
77395: CALL_OW 121
77399: GO 77410
// ComExitBuilding ( unit ) ;
77401: LD_VAR 0 1
77405: PPUSH
77406: CALL_OW 122
// result := tmp ;
77410: LD_ADDR_VAR 0 2
77414: PUSH
77415: LD_VAR 0 3
77419: ST_TO_ADDR
// end ;
77420: LD_VAR 0 2
77424: RET
// export function ComExitAll ( units ) ; var i ; begin
77425: LD_INT 0
77427: PPUSH
77428: PPUSH
// if not units then
77429: LD_VAR 0 1
77433: NOT
77434: IFFALSE 77438
// exit ;
77436: GO 77464
// for i in units do
77438: LD_ADDR_VAR 0 3
77442: PUSH
77443: LD_VAR 0 1
77447: PUSH
77448: FOR_IN
77449: IFFALSE 77462
// ComExit ( i ) ;
77451: LD_VAR 0 3
77455: PPUSH
77456: CALL 77342 0 1
77460: GO 77448
77462: POP
77463: POP
// end ;
77464: LD_VAR 0 2
77468: RET
// export function ResetHc ; begin
77469: LD_INT 0
77471: PPUSH
// InitHc ;
77472: CALL_OW 19
// hc_importance := 0 ;
77476: LD_ADDR_OWVAR 32
77480: PUSH
77481: LD_INT 0
77483: ST_TO_ADDR
// end ;
77484: LD_VAR 0 1
77488: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77489: LD_INT 0
77491: PPUSH
77492: PPUSH
77493: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77494: LD_ADDR_VAR 0 6
77498: PUSH
77499: LD_VAR 0 1
77503: PUSH
77504: LD_VAR 0 3
77508: PLUS
77509: PUSH
77510: LD_INT 2
77512: DIV
77513: ST_TO_ADDR
// if _x < 0 then
77514: LD_VAR 0 6
77518: PUSH
77519: LD_INT 0
77521: LESS
77522: IFFALSE 77539
// _x := _x * - 1 ;
77524: LD_ADDR_VAR 0 6
77528: PUSH
77529: LD_VAR 0 6
77533: PUSH
77534: LD_INT 1
77536: NEG
77537: MUL
77538: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77539: LD_ADDR_VAR 0 7
77543: PUSH
77544: LD_VAR 0 2
77548: PUSH
77549: LD_VAR 0 4
77553: PLUS
77554: PUSH
77555: LD_INT 2
77557: DIV
77558: ST_TO_ADDR
// if _y < 0 then
77559: LD_VAR 0 7
77563: PUSH
77564: LD_INT 0
77566: LESS
77567: IFFALSE 77584
// _y := _y * - 1 ;
77569: LD_ADDR_VAR 0 7
77573: PUSH
77574: LD_VAR 0 7
77578: PUSH
77579: LD_INT 1
77581: NEG
77582: MUL
77583: ST_TO_ADDR
// result := [ _x , _y ] ;
77584: LD_ADDR_VAR 0 5
77588: PUSH
77589: LD_VAR 0 6
77593: PUSH
77594: LD_VAR 0 7
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: ST_TO_ADDR
// end ;
77603: LD_VAR 0 5
77607: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77608: LD_INT 0
77610: PPUSH
77611: PPUSH
77612: PPUSH
77613: PPUSH
// task := GetTaskList ( unit ) ;
77614: LD_ADDR_VAR 0 7
77618: PUSH
77619: LD_VAR 0 1
77623: PPUSH
77624: CALL_OW 437
77628: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77629: LD_VAR 0 7
77633: NOT
77634: PUSH
77635: LD_VAR 0 1
77639: PPUSH
77640: LD_VAR 0 2
77644: PPUSH
77645: CALL_OW 308
77649: NOT
77650: AND
77651: IFFALSE 77655
// exit ;
77653: GO 77773
// if IsInArea ( unit , area ) then
77655: LD_VAR 0 1
77659: PPUSH
77660: LD_VAR 0 2
77664: PPUSH
77665: CALL_OW 308
77669: IFFALSE 77687
// begin ComMoveToArea ( unit , goAway ) ;
77671: LD_VAR 0 1
77675: PPUSH
77676: LD_VAR 0 3
77680: PPUSH
77681: CALL_OW 113
// exit ;
77685: GO 77773
// end ; if task [ 1 ] [ 1 ] <> M then
77687: LD_VAR 0 7
77691: PUSH
77692: LD_INT 1
77694: ARRAY
77695: PUSH
77696: LD_INT 1
77698: ARRAY
77699: PUSH
77700: LD_STRING M
77702: NONEQUAL
77703: IFFALSE 77707
// exit ;
77705: GO 77773
// x := task [ 1 ] [ 2 ] ;
77707: LD_ADDR_VAR 0 5
77711: PUSH
77712: LD_VAR 0 7
77716: PUSH
77717: LD_INT 1
77719: ARRAY
77720: PUSH
77721: LD_INT 2
77723: ARRAY
77724: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77725: LD_ADDR_VAR 0 6
77729: PUSH
77730: LD_VAR 0 7
77734: PUSH
77735: LD_INT 1
77737: ARRAY
77738: PUSH
77739: LD_INT 3
77741: ARRAY
77742: ST_TO_ADDR
// if InArea ( x , y , area ) then
77743: LD_VAR 0 5
77747: PPUSH
77748: LD_VAR 0 6
77752: PPUSH
77753: LD_VAR 0 2
77757: PPUSH
77758: CALL_OW 309
77762: IFFALSE 77773
// ComStop ( unit ) ;
77764: LD_VAR 0 1
77768: PPUSH
77769: CALL_OW 141
// end ;
77773: LD_VAR 0 4
77777: RET
// export function Abs ( value ) ; begin
77778: LD_INT 0
77780: PPUSH
// result := value ;
77781: LD_ADDR_VAR 0 2
77785: PUSH
77786: LD_VAR 0 1
77790: ST_TO_ADDR
// if value < 0 then
77791: LD_VAR 0 1
77795: PUSH
77796: LD_INT 0
77798: LESS
77799: IFFALSE 77816
// result := value * - 1 ;
77801: LD_ADDR_VAR 0 2
77805: PUSH
77806: LD_VAR 0 1
77810: PUSH
77811: LD_INT 1
77813: NEG
77814: MUL
77815: ST_TO_ADDR
// end ;
77816: LD_VAR 0 2
77820: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77821: LD_INT 0
77823: PPUSH
77824: PPUSH
77825: PPUSH
77826: PPUSH
77827: PPUSH
77828: PPUSH
77829: PPUSH
77830: PPUSH
// if not unit or not building then
77831: LD_VAR 0 1
77835: NOT
77836: PUSH
77837: LD_VAR 0 2
77841: NOT
77842: OR
77843: IFFALSE 77847
// exit ;
77845: GO 78073
// x := GetX ( building ) ;
77847: LD_ADDR_VAR 0 4
77851: PUSH
77852: LD_VAR 0 2
77856: PPUSH
77857: CALL_OW 250
77861: ST_TO_ADDR
// y := GetY ( building ) ;
77862: LD_ADDR_VAR 0 6
77866: PUSH
77867: LD_VAR 0 2
77871: PPUSH
77872: CALL_OW 251
77876: ST_TO_ADDR
// d := GetDir ( building ) ;
77877: LD_ADDR_VAR 0 8
77881: PUSH
77882: LD_VAR 0 2
77886: PPUSH
77887: CALL_OW 254
77891: ST_TO_ADDR
// r := 4 ;
77892: LD_ADDR_VAR 0 9
77896: PUSH
77897: LD_INT 4
77899: ST_TO_ADDR
// for i := 1 to 5 do
77900: LD_ADDR_VAR 0 10
77904: PUSH
77905: DOUBLE
77906: LD_INT 1
77908: DEC
77909: ST_TO_ADDR
77910: LD_INT 5
77912: PUSH
77913: FOR_TO
77914: IFFALSE 78071
// begin _x := ShiftX ( x , d , r + i ) ;
77916: LD_ADDR_VAR 0 5
77920: PUSH
77921: LD_VAR 0 4
77925: PPUSH
77926: LD_VAR 0 8
77930: PPUSH
77931: LD_VAR 0 9
77935: PUSH
77936: LD_VAR 0 10
77940: PLUS
77941: PPUSH
77942: CALL_OW 272
77946: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77947: LD_ADDR_VAR 0 7
77951: PUSH
77952: LD_VAR 0 6
77956: PPUSH
77957: LD_VAR 0 8
77961: PPUSH
77962: LD_VAR 0 9
77966: PUSH
77967: LD_VAR 0 10
77971: PLUS
77972: PPUSH
77973: CALL_OW 273
77977: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77978: LD_VAR 0 5
77982: PPUSH
77983: LD_VAR 0 7
77987: PPUSH
77988: CALL_OW 488
77992: PUSH
77993: LD_VAR 0 5
77997: PPUSH
77998: LD_VAR 0 7
78002: PPUSH
78003: CALL_OW 428
78007: PPUSH
78008: CALL_OW 247
78012: PUSH
78013: LD_INT 3
78015: PUSH
78016: LD_INT 2
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: IN
78023: NOT
78024: AND
78025: IFFALSE 78069
// begin ComMoveXY ( unit , _x , _y ) ;
78027: LD_VAR 0 1
78031: PPUSH
78032: LD_VAR 0 5
78036: PPUSH
78037: LD_VAR 0 7
78041: PPUSH
78042: CALL_OW 111
// result := [ _x , _y ] ;
78046: LD_ADDR_VAR 0 3
78050: PUSH
78051: LD_VAR 0 5
78055: PUSH
78056: LD_VAR 0 7
78060: PUSH
78061: EMPTY
78062: LIST
78063: LIST
78064: ST_TO_ADDR
// exit ;
78065: POP
78066: POP
78067: GO 78073
// end ; end ;
78069: GO 77913
78071: POP
78072: POP
// end ;
78073: LD_VAR 0 3
78077: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78078: LD_INT 0
78080: PPUSH
78081: PPUSH
78082: PPUSH
// result := 0 ;
78083: LD_ADDR_VAR 0 3
78087: PUSH
78088: LD_INT 0
78090: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78091: LD_VAR 0 1
78095: PUSH
78096: LD_INT 0
78098: LESS
78099: PUSH
78100: LD_VAR 0 1
78104: PUSH
78105: LD_INT 8
78107: GREATER
78108: OR
78109: PUSH
78110: LD_VAR 0 2
78114: PUSH
78115: LD_INT 0
78117: LESS
78118: OR
78119: PUSH
78120: LD_VAR 0 2
78124: PUSH
78125: LD_INT 8
78127: GREATER
78128: OR
78129: IFFALSE 78133
// exit ;
78131: GO 78208
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78133: LD_ADDR_VAR 0 4
78137: PUSH
78138: LD_INT 22
78140: PUSH
78141: LD_VAR 0 2
78145: PUSH
78146: EMPTY
78147: LIST
78148: LIST
78149: PPUSH
78150: CALL_OW 69
78154: PUSH
78155: FOR_IN
78156: IFFALSE 78206
// begin un := UnitShoot ( i ) ;
78158: LD_ADDR_VAR 0 5
78162: PUSH
78163: LD_VAR 0 4
78167: PPUSH
78168: CALL_OW 504
78172: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78173: LD_VAR 0 5
78177: PPUSH
78178: CALL_OW 255
78182: PUSH
78183: LD_VAR 0 1
78187: EQUAL
78188: IFFALSE 78204
// begin result := un ;
78190: LD_ADDR_VAR 0 3
78194: PUSH
78195: LD_VAR 0 5
78199: ST_TO_ADDR
// exit ;
78200: POP
78201: POP
78202: GO 78208
// end ; end ;
78204: GO 78155
78206: POP
78207: POP
// end ;
78208: LD_VAR 0 3
78212: RET
// export function GetCargoBay ( units ) ; begin
78213: LD_INT 0
78215: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78216: LD_ADDR_VAR 0 2
78220: PUSH
78221: LD_VAR 0 1
78225: PPUSH
78226: LD_INT 2
78228: PUSH
78229: LD_INT 34
78231: PUSH
78232: LD_INT 12
78234: PUSH
78235: EMPTY
78236: LIST
78237: LIST
78238: PUSH
78239: LD_INT 34
78241: PUSH
78242: LD_INT 51
78244: PUSH
78245: EMPTY
78246: LIST
78247: LIST
78248: PUSH
78249: LD_INT 34
78251: PUSH
78252: LD_INT 32
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PUSH
78259: LD_INT 34
78261: PUSH
78262: LD_INT 89
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: PUSH
78269: EMPTY
78270: LIST
78271: LIST
78272: LIST
78273: LIST
78274: LIST
78275: PPUSH
78276: CALL_OW 72
78280: ST_TO_ADDR
// end ;
78281: LD_VAR 0 2
78285: RET
// export function Negate ( value ) ; begin
78286: LD_INT 0
78288: PPUSH
// result := not value ;
78289: LD_ADDR_VAR 0 2
78293: PUSH
78294: LD_VAR 0 1
78298: NOT
78299: ST_TO_ADDR
// end ;
78300: LD_VAR 0 2
78304: RET
// export function Inc ( value ) ; begin
78305: LD_INT 0
78307: PPUSH
// result := value + 1 ;
78308: LD_ADDR_VAR 0 2
78312: PUSH
78313: LD_VAR 0 1
78317: PUSH
78318: LD_INT 1
78320: PLUS
78321: ST_TO_ADDR
// end ;
78322: LD_VAR 0 2
78326: RET
// export function Dec ( value ) ; begin
78327: LD_INT 0
78329: PPUSH
// result := value - 1 ;
78330: LD_ADDR_VAR 0 2
78334: PUSH
78335: LD_VAR 0 1
78339: PUSH
78340: LD_INT 1
78342: MINUS
78343: ST_TO_ADDR
// end ;
78344: LD_VAR 0 2
78348: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78349: LD_INT 0
78351: PPUSH
78352: PPUSH
78353: PPUSH
78354: PPUSH
78355: PPUSH
78356: PPUSH
78357: PPUSH
78358: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78359: LD_VAR 0 1
78363: PPUSH
78364: LD_VAR 0 2
78368: PPUSH
78369: CALL_OW 488
78373: NOT
78374: PUSH
78375: LD_VAR 0 3
78379: PPUSH
78380: LD_VAR 0 4
78384: PPUSH
78385: CALL_OW 488
78389: NOT
78390: OR
78391: IFFALSE 78404
// begin result := - 1 ;
78393: LD_ADDR_VAR 0 5
78397: PUSH
78398: LD_INT 1
78400: NEG
78401: ST_TO_ADDR
// exit ;
78402: GO 78639
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78404: LD_ADDR_VAR 0 12
78408: PUSH
78409: LD_VAR 0 1
78413: PPUSH
78414: LD_VAR 0 2
78418: PPUSH
78419: LD_VAR 0 3
78423: PPUSH
78424: LD_VAR 0 4
78428: PPUSH
78429: CALL 77489 0 4
78433: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78434: LD_ADDR_VAR 0 11
78438: PUSH
78439: LD_VAR 0 1
78443: PPUSH
78444: LD_VAR 0 2
78448: PPUSH
78449: LD_VAR 0 12
78453: PUSH
78454: LD_INT 1
78456: ARRAY
78457: PPUSH
78458: LD_VAR 0 12
78462: PUSH
78463: LD_INT 2
78465: ARRAY
78466: PPUSH
78467: CALL_OW 298
78471: ST_TO_ADDR
// distance := 9999 ;
78472: LD_ADDR_VAR 0 10
78476: PUSH
78477: LD_INT 9999
78479: ST_TO_ADDR
// for i := 0 to 5 do
78480: LD_ADDR_VAR 0 6
78484: PUSH
78485: DOUBLE
78486: LD_INT 0
78488: DEC
78489: ST_TO_ADDR
78490: LD_INT 5
78492: PUSH
78493: FOR_TO
78494: IFFALSE 78637
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78496: LD_ADDR_VAR 0 7
78500: PUSH
78501: LD_VAR 0 1
78505: PPUSH
78506: LD_VAR 0 6
78510: PPUSH
78511: LD_VAR 0 11
78515: PPUSH
78516: CALL_OW 272
78520: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78521: LD_ADDR_VAR 0 8
78525: PUSH
78526: LD_VAR 0 2
78530: PPUSH
78531: LD_VAR 0 6
78535: PPUSH
78536: LD_VAR 0 11
78540: PPUSH
78541: CALL_OW 273
78545: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78546: LD_VAR 0 7
78550: PPUSH
78551: LD_VAR 0 8
78555: PPUSH
78556: CALL_OW 488
78560: NOT
78561: IFFALSE 78565
// continue ;
78563: GO 78493
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78565: LD_ADDR_VAR 0 9
78569: PUSH
78570: LD_VAR 0 12
78574: PUSH
78575: LD_INT 1
78577: ARRAY
78578: PPUSH
78579: LD_VAR 0 12
78583: PUSH
78584: LD_INT 2
78586: ARRAY
78587: PPUSH
78588: LD_VAR 0 7
78592: PPUSH
78593: LD_VAR 0 8
78597: PPUSH
78598: CALL_OW 298
78602: ST_TO_ADDR
// if tmp < distance then
78603: LD_VAR 0 9
78607: PUSH
78608: LD_VAR 0 10
78612: LESS
78613: IFFALSE 78635
// begin result := i ;
78615: LD_ADDR_VAR 0 5
78619: PUSH
78620: LD_VAR 0 6
78624: ST_TO_ADDR
// distance := tmp ;
78625: LD_ADDR_VAR 0 10
78629: PUSH
78630: LD_VAR 0 9
78634: ST_TO_ADDR
// end ; end ;
78635: GO 78493
78637: POP
78638: POP
// end ;
78639: LD_VAR 0 5
78643: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78644: LD_INT 0
78646: PPUSH
78647: PPUSH
// if not driver or not IsInUnit ( driver ) then
78648: LD_VAR 0 1
78652: NOT
78653: PUSH
78654: LD_VAR 0 1
78658: PPUSH
78659: CALL_OW 310
78663: NOT
78664: OR
78665: IFFALSE 78669
// exit ;
78667: GO 78759
// vehicle := IsInUnit ( driver ) ;
78669: LD_ADDR_VAR 0 3
78673: PUSH
78674: LD_VAR 0 1
78678: PPUSH
78679: CALL_OW 310
78683: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78684: LD_VAR 0 1
78688: PPUSH
78689: LD_STRING \
78691: PUSH
78692: LD_INT 0
78694: PUSH
78695: LD_INT 0
78697: PUSH
78698: LD_INT 0
78700: PUSH
78701: LD_INT 0
78703: PUSH
78704: LD_INT 0
78706: PUSH
78707: LD_INT 0
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: LIST
78714: LIST
78715: LIST
78716: LIST
78717: LIST
78718: PUSH
78719: LD_STRING E
78721: PUSH
78722: LD_INT 0
78724: PUSH
78725: LD_INT 0
78727: PUSH
78728: LD_VAR 0 3
78732: PUSH
78733: LD_INT 0
78735: PUSH
78736: LD_INT 0
78738: PUSH
78739: LD_INT 0
78741: PUSH
78742: EMPTY
78743: LIST
78744: LIST
78745: LIST
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: PUSH
78751: EMPTY
78752: LIST
78753: LIST
78754: PPUSH
78755: CALL_OW 446
// end ;
78759: LD_VAR 0 2
78763: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78764: LD_INT 0
78766: PPUSH
78767: PPUSH
// if not driver or not IsInUnit ( driver ) then
78768: LD_VAR 0 1
78772: NOT
78773: PUSH
78774: LD_VAR 0 1
78778: PPUSH
78779: CALL_OW 310
78783: NOT
78784: OR
78785: IFFALSE 78789
// exit ;
78787: GO 78879
// vehicle := IsInUnit ( driver ) ;
78789: LD_ADDR_VAR 0 3
78793: PUSH
78794: LD_VAR 0 1
78798: PPUSH
78799: CALL_OW 310
78803: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78804: LD_VAR 0 1
78808: PPUSH
78809: LD_STRING \
78811: PUSH
78812: LD_INT 0
78814: PUSH
78815: LD_INT 0
78817: PUSH
78818: LD_INT 0
78820: PUSH
78821: LD_INT 0
78823: PUSH
78824: LD_INT 0
78826: PUSH
78827: LD_INT 0
78829: PUSH
78830: EMPTY
78831: LIST
78832: LIST
78833: LIST
78834: LIST
78835: LIST
78836: LIST
78837: LIST
78838: PUSH
78839: LD_STRING E
78841: PUSH
78842: LD_INT 0
78844: PUSH
78845: LD_INT 0
78847: PUSH
78848: LD_VAR 0 3
78852: PUSH
78853: LD_INT 0
78855: PUSH
78856: LD_INT 0
78858: PUSH
78859: LD_INT 0
78861: PUSH
78862: EMPTY
78863: LIST
78864: LIST
78865: LIST
78866: LIST
78867: LIST
78868: LIST
78869: LIST
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: PPUSH
78875: CALL_OW 447
// end ;
78879: LD_VAR 0 2
78883: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78884: LD_INT 0
78886: PPUSH
78887: PPUSH
78888: PPUSH
// tmp := [ ] ;
78889: LD_ADDR_VAR 0 5
78893: PUSH
78894: EMPTY
78895: ST_TO_ADDR
// for i in units do
78896: LD_ADDR_VAR 0 4
78900: PUSH
78901: LD_VAR 0 1
78905: PUSH
78906: FOR_IN
78907: IFFALSE 78945
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78909: LD_ADDR_VAR 0 5
78913: PUSH
78914: LD_VAR 0 5
78918: PPUSH
78919: LD_VAR 0 5
78923: PUSH
78924: LD_INT 1
78926: PLUS
78927: PPUSH
78928: LD_VAR 0 4
78932: PPUSH
78933: CALL_OW 256
78937: PPUSH
78938: CALL_OW 2
78942: ST_TO_ADDR
78943: GO 78906
78945: POP
78946: POP
// if not tmp then
78947: LD_VAR 0 5
78951: NOT
78952: IFFALSE 78956
// exit ;
78954: GO 79004
// if asc then
78956: LD_VAR 0 2
78960: IFFALSE 78984
// result := SortListByListAsc ( units , tmp ) else
78962: LD_ADDR_VAR 0 3
78966: PUSH
78967: LD_VAR 0 1
78971: PPUSH
78972: LD_VAR 0 5
78976: PPUSH
78977: CALL_OW 76
78981: ST_TO_ADDR
78982: GO 79004
// result := SortListByListDesc ( units , tmp ) ;
78984: LD_ADDR_VAR 0 3
78988: PUSH
78989: LD_VAR 0 1
78993: PPUSH
78994: LD_VAR 0 5
78998: PPUSH
78999: CALL_OW 77
79003: ST_TO_ADDR
// end ;
79004: LD_VAR 0 3
79008: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79009: LD_INT 0
79011: PPUSH
79012: PPUSH
// task := GetTaskList ( mech ) ;
79013: LD_ADDR_VAR 0 4
79017: PUSH
79018: LD_VAR 0 1
79022: PPUSH
79023: CALL_OW 437
79027: ST_TO_ADDR
// if not task then
79028: LD_VAR 0 4
79032: NOT
79033: IFFALSE 79037
// exit ;
79035: GO 79079
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79037: LD_ADDR_VAR 0 3
79041: PUSH
79042: LD_VAR 0 4
79046: PUSH
79047: LD_INT 1
79049: ARRAY
79050: PUSH
79051: LD_INT 1
79053: ARRAY
79054: PUSH
79055: LD_STRING r
79057: EQUAL
79058: PUSH
79059: LD_VAR 0 4
79063: PUSH
79064: LD_INT 1
79066: ARRAY
79067: PUSH
79068: LD_INT 4
79070: ARRAY
79071: PUSH
79072: LD_VAR 0 2
79076: EQUAL
79077: AND
79078: ST_TO_ADDR
// end ;
79079: LD_VAR 0 3
79083: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79084: LD_INT 0
79086: PPUSH
// SetDir ( unit , d ) ;
79087: LD_VAR 0 1
79091: PPUSH
79092: LD_VAR 0 4
79096: PPUSH
79097: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79101: LD_VAR 0 1
79105: PPUSH
79106: LD_VAR 0 2
79110: PPUSH
79111: LD_VAR 0 3
79115: PPUSH
79116: LD_VAR 0 5
79120: PPUSH
79121: CALL_OW 48
// end ;
79125: LD_VAR 0 6
79129: RET
// export function ToNaturalNumber ( number ) ; begin
79130: LD_INT 0
79132: PPUSH
// result := number div 1 ;
79133: LD_ADDR_VAR 0 2
79137: PUSH
79138: LD_VAR 0 1
79142: PUSH
79143: LD_INT 1
79145: DIV
79146: ST_TO_ADDR
// if number < 0 then
79147: LD_VAR 0 1
79151: PUSH
79152: LD_INT 0
79154: LESS
79155: IFFALSE 79165
// result := 0 ;
79157: LD_ADDR_VAR 0 2
79161: PUSH
79162: LD_INT 0
79164: ST_TO_ADDR
// end ;
79165: LD_VAR 0 2
79169: RET
// export function SortByClass ( units , class ) ; var un ; begin
79170: LD_INT 0
79172: PPUSH
79173: PPUSH
// if not units or not class then
79174: LD_VAR 0 1
79178: NOT
79179: PUSH
79180: LD_VAR 0 2
79184: NOT
79185: OR
79186: IFFALSE 79190
// exit ;
79188: GO 79285
// result := [ ] ;
79190: LD_ADDR_VAR 0 3
79194: PUSH
79195: EMPTY
79196: ST_TO_ADDR
// for un in units do
79197: LD_ADDR_VAR 0 4
79201: PUSH
79202: LD_VAR 0 1
79206: PUSH
79207: FOR_IN
79208: IFFALSE 79283
// if GetClass ( un ) = class then
79210: LD_VAR 0 4
79214: PPUSH
79215: CALL_OW 257
79219: PUSH
79220: LD_VAR 0 2
79224: EQUAL
79225: IFFALSE 79252
// result := Insert ( result , 1 , un ) else
79227: LD_ADDR_VAR 0 3
79231: PUSH
79232: LD_VAR 0 3
79236: PPUSH
79237: LD_INT 1
79239: PPUSH
79240: LD_VAR 0 4
79244: PPUSH
79245: CALL_OW 2
79249: ST_TO_ADDR
79250: GO 79281
// result := Replace ( result , result + 1 , un ) ;
79252: LD_ADDR_VAR 0 3
79256: PUSH
79257: LD_VAR 0 3
79261: PPUSH
79262: LD_VAR 0 3
79266: PUSH
79267: LD_INT 1
79269: PLUS
79270: PPUSH
79271: LD_VAR 0 4
79275: PPUSH
79276: CALL_OW 1
79280: ST_TO_ADDR
79281: GO 79207
79283: POP
79284: POP
// end ;
79285: LD_VAR 0 3
79289: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79290: LD_INT 0
79292: PPUSH
79293: PPUSH
79294: PPUSH
79295: PPUSH
79296: PPUSH
79297: PPUSH
79298: PPUSH
// result := [ ] ;
79299: LD_ADDR_VAR 0 4
79303: PUSH
79304: EMPTY
79305: ST_TO_ADDR
// if x - r < 0 then
79306: LD_VAR 0 1
79310: PUSH
79311: LD_VAR 0 3
79315: MINUS
79316: PUSH
79317: LD_INT 0
79319: LESS
79320: IFFALSE 79332
// min_x := 0 else
79322: LD_ADDR_VAR 0 8
79326: PUSH
79327: LD_INT 0
79329: ST_TO_ADDR
79330: GO 79348
// min_x := x - r ;
79332: LD_ADDR_VAR 0 8
79336: PUSH
79337: LD_VAR 0 1
79341: PUSH
79342: LD_VAR 0 3
79346: MINUS
79347: ST_TO_ADDR
// if y - r < 0 then
79348: LD_VAR 0 2
79352: PUSH
79353: LD_VAR 0 3
79357: MINUS
79358: PUSH
79359: LD_INT 0
79361: LESS
79362: IFFALSE 79374
// min_y := 0 else
79364: LD_ADDR_VAR 0 7
79368: PUSH
79369: LD_INT 0
79371: ST_TO_ADDR
79372: GO 79390
// min_y := y - r ;
79374: LD_ADDR_VAR 0 7
79378: PUSH
79379: LD_VAR 0 2
79383: PUSH
79384: LD_VAR 0 3
79388: MINUS
79389: ST_TO_ADDR
// max_x := x + r ;
79390: LD_ADDR_VAR 0 9
79394: PUSH
79395: LD_VAR 0 1
79399: PUSH
79400: LD_VAR 0 3
79404: PLUS
79405: ST_TO_ADDR
// max_y := y + r ;
79406: LD_ADDR_VAR 0 10
79410: PUSH
79411: LD_VAR 0 2
79415: PUSH
79416: LD_VAR 0 3
79420: PLUS
79421: ST_TO_ADDR
// for _x = min_x to max_x do
79422: LD_ADDR_VAR 0 5
79426: PUSH
79427: DOUBLE
79428: LD_VAR 0 8
79432: DEC
79433: ST_TO_ADDR
79434: LD_VAR 0 9
79438: PUSH
79439: FOR_TO
79440: IFFALSE 79541
// for _y = min_y to max_y do
79442: LD_ADDR_VAR 0 6
79446: PUSH
79447: DOUBLE
79448: LD_VAR 0 7
79452: DEC
79453: ST_TO_ADDR
79454: LD_VAR 0 10
79458: PUSH
79459: FOR_TO
79460: IFFALSE 79537
// begin if not ValidHex ( _x , _y ) then
79462: LD_VAR 0 5
79466: PPUSH
79467: LD_VAR 0 6
79471: PPUSH
79472: CALL_OW 488
79476: NOT
79477: IFFALSE 79481
// continue ;
79479: GO 79459
// if GetResourceTypeXY ( _x , _y ) then
79481: LD_VAR 0 5
79485: PPUSH
79486: LD_VAR 0 6
79490: PPUSH
79491: CALL_OW 283
79495: IFFALSE 79535
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79497: LD_ADDR_VAR 0 4
79501: PUSH
79502: LD_VAR 0 4
79506: PPUSH
79507: LD_VAR 0 4
79511: PUSH
79512: LD_INT 1
79514: PLUS
79515: PPUSH
79516: LD_VAR 0 5
79520: PUSH
79521: LD_VAR 0 6
79525: PUSH
79526: EMPTY
79527: LIST
79528: LIST
79529: PPUSH
79530: CALL_OW 1
79534: ST_TO_ADDR
// end ;
79535: GO 79459
79537: POP
79538: POP
79539: GO 79439
79541: POP
79542: POP
// end ;
79543: LD_VAR 0 4
79547: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79548: LD_INT 0
79550: PPUSH
79551: PPUSH
79552: PPUSH
79553: PPUSH
79554: PPUSH
79555: PPUSH
79556: PPUSH
79557: PPUSH
// if not units then
79558: LD_VAR 0 1
79562: NOT
79563: IFFALSE 79567
// exit ;
79565: GO 80091
// result := UnitFilter ( units , [ f_ok ] ) ;
79567: LD_ADDR_VAR 0 3
79571: PUSH
79572: LD_VAR 0 1
79576: PPUSH
79577: LD_INT 50
79579: PUSH
79580: EMPTY
79581: LIST
79582: PPUSH
79583: CALL_OW 72
79587: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79588: LD_ADDR_VAR 0 8
79592: PUSH
79593: LD_VAR 0 1
79597: PUSH
79598: LD_INT 1
79600: ARRAY
79601: PPUSH
79602: CALL_OW 255
79606: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79607: LD_ADDR_VAR 0 10
79611: PUSH
79612: LD_INT 29
79614: PUSH
79615: LD_INT 91
79617: PUSH
79618: LD_INT 49
79620: PUSH
79621: EMPTY
79622: LIST
79623: LIST
79624: LIST
79625: ST_TO_ADDR
// if not result then
79626: LD_VAR 0 3
79630: NOT
79631: IFFALSE 79635
// exit ;
79633: GO 80091
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79635: LD_ADDR_VAR 0 5
79639: PUSH
79640: LD_INT 81
79642: PUSH
79643: LD_VAR 0 8
79647: PUSH
79648: EMPTY
79649: LIST
79650: LIST
79651: PPUSH
79652: CALL_OW 69
79656: ST_TO_ADDR
// for i in result do
79657: LD_ADDR_VAR 0 4
79661: PUSH
79662: LD_VAR 0 3
79666: PUSH
79667: FOR_IN
79668: IFFALSE 80089
// begin tag := GetTag ( i ) + 1 ;
79670: LD_ADDR_VAR 0 9
79674: PUSH
79675: LD_VAR 0 4
79679: PPUSH
79680: CALL_OW 110
79684: PUSH
79685: LD_INT 1
79687: PLUS
79688: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79689: LD_ADDR_VAR 0 7
79693: PUSH
79694: LD_VAR 0 4
79698: PPUSH
79699: CALL_OW 250
79703: PPUSH
79704: LD_VAR 0 4
79708: PPUSH
79709: CALL_OW 251
79713: PPUSH
79714: LD_INT 6
79716: PPUSH
79717: CALL 79290 0 3
79721: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79722: LD_VAR 0 4
79726: PPUSH
79727: CALL_OW 247
79731: PUSH
79732: LD_INT 2
79734: EQUAL
79735: PUSH
79736: LD_VAR 0 7
79740: AND
79741: PUSH
79742: LD_VAR 0 4
79746: PPUSH
79747: CALL_OW 264
79751: PUSH
79752: LD_VAR 0 10
79756: IN
79757: NOT
79758: AND
79759: IFFALSE 79798
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79761: LD_VAR 0 4
79765: PPUSH
79766: LD_VAR 0 7
79770: PUSH
79771: LD_INT 1
79773: ARRAY
79774: PUSH
79775: LD_INT 1
79777: ARRAY
79778: PPUSH
79779: LD_VAR 0 7
79783: PUSH
79784: LD_INT 1
79786: ARRAY
79787: PUSH
79788: LD_INT 2
79790: ARRAY
79791: PPUSH
79792: CALL_OW 116
79796: GO 80087
// if path > tag then
79798: LD_VAR 0 2
79802: PUSH
79803: LD_VAR 0 9
79807: GREATER
79808: IFFALSE 80016
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79810: LD_ADDR_VAR 0 6
79814: PUSH
79815: LD_VAR 0 5
79819: PPUSH
79820: LD_INT 91
79822: PUSH
79823: LD_VAR 0 4
79827: PUSH
79828: LD_INT 8
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: LIST
79835: PPUSH
79836: CALL_OW 72
79840: ST_TO_ADDR
// if nearEnemy then
79841: LD_VAR 0 6
79845: IFFALSE 79914
// begin if GetWeapon ( i ) = ru_time_lapser then
79847: LD_VAR 0 4
79851: PPUSH
79852: CALL_OW 264
79856: PUSH
79857: LD_INT 49
79859: EQUAL
79860: IFFALSE 79888
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79862: LD_VAR 0 4
79866: PPUSH
79867: LD_VAR 0 6
79871: PPUSH
79872: LD_VAR 0 4
79876: PPUSH
79877: CALL_OW 74
79881: PPUSH
79882: CALL_OW 112
79886: GO 79912
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79888: LD_VAR 0 4
79892: PPUSH
79893: LD_VAR 0 6
79897: PPUSH
79898: LD_VAR 0 4
79902: PPUSH
79903: CALL_OW 74
79907: PPUSH
79908: CALL_OW 115
// end else
79912: GO 80014
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79914: LD_VAR 0 4
79918: PPUSH
79919: LD_VAR 0 2
79923: PUSH
79924: LD_VAR 0 9
79928: ARRAY
79929: PUSH
79930: LD_INT 1
79932: ARRAY
79933: PPUSH
79934: LD_VAR 0 2
79938: PUSH
79939: LD_VAR 0 9
79943: ARRAY
79944: PUSH
79945: LD_INT 2
79947: ARRAY
79948: PPUSH
79949: CALL_OW 297
79953: PUSH
79954: LD_INT 6
79956: GREATER
79957: IFFALSE 80000
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79959: LD_VAR 0 4
79963: PPUSH
79964: LD_VAR 0 2
79968: PUSH
79969: LD_VAR 0 9
79973: ARRAY
79974: PUSH
79975: LD_INT 1
79977: ARRAY
79978: PPUSH
79979: LD_VAR 0 2
79983: PUSH
79984: LD_VAR 0 9
79988: ARRAY
79989: PUSH
79990: LD_INT 2
79992: ARRAY
79993: PPUSH
79994: CALL_OW 114
79998: GO 80014
// SetTag ( i , tag ) ;
80000: LD_VAR 0 4
80004: PPUSH
80005: LD_VAR 0 9
80009: PPUSH
80010: CALL_OW 109
// end else
80014: GO 80087
// if enemy then
80016: LD_VAR 0 5
80020: IFFALSE 80087
// begin if GetWeapon ( i ) = ru_time_lapser then
80022: LD_VAR 0 4
80026: PPUSH
80027: CALL_OW 264
80031: PUSH
80032: LD_INT 49
80034: EQUAL
80035: IFFALSE 80063
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80037: LD_VAR 0 4
80041: PPUSH
80042: LD_VAR 0 5
80046: PPUSH
80047: LD_VAR 0 4
80051: PPUSH
80052: CALL_OW 74
80056: PPUSH
80057: CALL_OW 112
80061: GO 80087
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80063: LD_VAR 0 4
80067: PPUSH
80068: LD_VAR 0 5
80072: PPUSH
80073: LD_VAR 0 4
80077: PPUSH
80078: CALL_OW 74
80082: PPUSH
80083: CALL_OW 115
// end ; end ;
80087: GO 79667
80089: POP
80090: POP
// end ;
80091: LD_VAR 0 3
80095: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80096: LD_INT 0
80098: PPUSH
80099: PPUSH
80100: PPUSH
// if not unit or IsInUnit ( unit ) then
80101: LD_VAR 0 1
80105: NOT
80106: PUSH
80107: LD_VAR 0 1
80111: PPUSH
80112: CALL_OW 310
80116: OR
80117: IFFALSE 80121
// exit ;
80119: GO 80212
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80121: LD_ADDR_VAR 0 4
80125: PUSH
80126: LD_VAR 0 1
80130: PPUSH
80131: CALL_OW 250
80135: PPUSH
80136: LD_VAR 0 2
80140: PPUSH
80141: LD_INT 1
80143: PPUSH
80144: CALL_OW 272
80148: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80149: LD_ADDR_VAR 0 5
80153: PUSH
80154: LD_VAR 0 1
80158: PPUSH
80159: CALL_OW 251
80163: PPUSH
80164: LD_VAR 0 2
80168: PPUSH
80169: LD_INT 1
80171: PPUSH
80172: CALL_OW 273
80176: ST_TO_ADDR
// if ValidHex ( x , y ) then
80177: LD_VAR 0 4
80181: PPUSH
80182: LD_VAR 0 5
80186: PPUSH
80187: CALL_OW 488
80191: IFFALSE 80212
// ComTurnXY ( unit , x , y ) ;
80193: LD_VAR 0 1
80197: PPUSH
80198: LD_VAR 0 4
80202: PPUSH
80203: LD_VAR 0 5
80207: PPUSH
80208: CALL_OW 118
// end ;
80212: LD_VAR 0 3
80216: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80217: LD_INT 0
80219: PPUSH
80220: PPUSH
// result := false ;
80221: LD_ADDR_VAR 0 3
80225: PUSH
80226: LD_INT 0
80228: ST_TO_ADDR
// if not units then
80229: LD_VAR 0 2
80233: NOT
80234: IFFALSE 80238
// exit ;
80236: GO 80283
// for i in units do
80238: LD_ADDR_VAR 0 4
80242: PUSH
80243: LD_VAR 0 2
80247: PUSH
80248: FOR_IN
80249: IFFALSE 80281
// if See ( side , i ) then
80251: LD_VAR 0 1
80255: PPUSH
80256: LD_VAR 0 4
80260: PPUSH
80261: CALL_OW 292
80265: IFFALSE 80279
// begin result := true ;
80267: LD_ADDR_VAR 0 3
80271: PUSH
80272: LD_INT 1
80274: ST_TO_ADDR
// exit ;
80275: POP
80276: POP
80277: GO 80283
// end ;
80279: GO 80248
80281: POP
80282: POP
// end ;
80283: LD_VAR 0 3
80287: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80288: LD_INT 0
80290: PPUSH
80291: PPUSH
80292: PPUSH
80293: PPUSH
// if not unit or not points then
80294: LD_VAR 0 1
80298: NOT
80299: PUSH
80300: LD_VAR 0 2
80304: NOT
80305: OR
80306: IFFALSE 80310
// exit ;
80308: GO 80400
// dist := 99999 ;
80310: LD_ADDR_VAR 0 5
80314: PUSH
80315: LD_INT 99999
80317: ST_TO_ADDR
// for i in points do
80318: LD_ADDR_VAR 0 4
80322: PUSH
80323: LD_VAR 0 2
80327: PUSH
80328: FOR_IN
80329: IFFALSE 80398
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80331: LD_ADDR_VAR 0 6
80335: PUSH
80336: LD_VAR 0 1
80340: PPUSH
80341: LD_VAR 0 4
80345: PUSH
80346: LD_INT 1
80348: ARRAY
80349: PPUSH
80350: LD_VAR 0 4
80354: PUSH
80355: LD_INT 2
80357: ARRAY
80358: PPUSH
80359: CALL_OW 297
80363: ST_TO_ADDR
// if tmpDist < dist then
80364: LD_VAR 0 6
80368: PUSH
80369: LD_VAR 0 5
80373: LESS
80374: IFFALSE 80396
// begin result := i ;
80376: LD_ADDR_VAR 0 3
80380: PUSH
80381: LD_VAR 0 4
80385: ST_TO_ADDR
// dist := tmpDist ;
80386: LD_ADDR_VAR 0 5
80390: PUSH
80391: LD_VAR 0 6
80395: ST_TO_ADDR
// end ; end ;
80396: GO 80328
80398: POP
80399: POP
// end ;
80400: LD_VAR 0 3
80404: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80405: LD_INT 0
80407: PPUSH
// uc_side := side ;
80408: LD_ADDR_OWVAR 20
80412: PUSH
80413: LD_VAR 0 1
80417: ST_TO_ADDR
// uc_nation := 3 ;
80418: LD_ADDR_OWVAR 21
80422: PUSH
80423: LD_INT 3
80425: ST_TO_ADDR
// vc_chassis := 25 ;
80426: LD_ADDR_OWVAR 37
80430: PUSH
80431: LD_INT 25
80433: ST_TO_ADDR
// vc_engine := engine_siberite ;
80434: LD_ADDR_OWVAR 39
80438: PUSH
80439: LD_INT 3
80441: ST_TO_ADDR
// vc_control := control_computer ;
80442: LD_ADDR_OWVAR 38
80446: PUSH
80447: LD_INT 3
80449: ST_TO_ADDR
// vc_weapon := 59 ;
80450: LD_ADDR_OWVAR 40
80454: PUSH
80455: LD_INT 59
80457: ST_TO_ADDR
// result := CreateVehicle ;
80458: LD_ADDR_VAR 0 5
80462: PUSH
80463: CALL_OW 45
80467: ST_TO_ADDR
// SetDir ( result , d ) ;
80468: LD_VAR 0 5
80472: PPUSH
80473: LD_VAR 0 4
80477: PPUSH
80478: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80482: LD_VAR 0 5
80486: PPUSH
80487: LD_VAR 0 2
80491: PPUSH
80492: LD_VAR 0 3
80496: PPUSH
80497: LD_INT 0
80499: PPUSH
80500: CALL_OW 48
// end ;
80504: LD_VAR 0 5
80508: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80509: LD_INT 0
80511: PPUSH
80512: PPUSH
80513: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80514: LD_ADDR_VAR 0 2
80518: PUSH
80519: LD_INT 0
80521: PUSH
80522: LD_INT 0
80524: PUSH
80525: LD_INT 0
80527: PUSH
80528: LD_INT 0
80530: PUSH
80531: EMPTY
80532: LIST
80533: LIST
80534: LIST
80535: LIST
80536: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80537: LD_VAR 0 1
80541: NOT
80542: PUSH
80543: LD_VAR 0 1
80547: PPUSH
80548: CALL_OW 264
80552: PUSH
80553: LD_INT 12
80555: PUSH
80556: LD_INT 51
80558: PUSH
80559: LD_INT 32
80561: PUSH
80562: LD_INT 89
80564: PUSH
80565: EMPTY
80566: LIST
80567: LIST
80568: LIST
80569: LIST
80570: IN
80571: NOT
80572: OR
80573: IFFALSE 80577
// exit ;
80575: GO 80675
// for i := 1 to 3 do
80577: LD_ADDR_VAR 0 3
80581: PUSH
80582: DOUBLE
80583: LD_INT 1
80585: DEC
80586: ST_TO_ADDR
80587: LD_INT 3
80589: PUSH
80590: FOR_TO
80591: IFFALSE 80673
// begin tmp := GetCargo ( cargo , i ) ;
80593: LD_ADDR_VAR 0 4
80597: PUSH
80598: LD_VAR 0 1
80602: PPUSH
80603: LD_VAR 0 3
80607: PPUSH
80608: CALL_OW 289
80612: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80613: LD_ADDR_VAR 0 2
80617: PUSH
80618: LD_VAR 0 2
80622: PPUSH
80623: LD_VAR 0 3
80627: PPUSH
80628: LD_VAR 0 4
80632: PPUSH
80633: CALL_OW 1
80637: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80638: LD_ADDR_VAR 0 2
80642: PUSH
80643: LD_VAR 0 2
80647: PPUSH
80648: LD_INT 4
80650: PPUSH
80651: LD_VAR 0 2
80655: PUSH
80656: LD_INT 4
80658: ARRAY
80659: PUSH
80660: LD_VAR 0 4
80664: PLUS
80665: PPUSH
80666: CALL_OW 1
80670: ST_TO_ADDR
// end ;
80671: GO 80590
80673: POP
80674: POP
// end ;
80675: LD_VAR 0 2
80679: RET
// export function Length ( array ) ; begin
80680: LD_INT 0
80682: PPUSH
// result := array + 0 ;
80683: LD_ADDR_VAR 0 2
80687: PUSH
80688: LD_VAR 0 1
80692: PUSH
80693: LD_INT 0
80695: PLUS
80696: ST_TO_ADDR
// end ;
80697: LD_VAR 0 2
80701: RET
// export function PrepareArray ( array ) ; begin
80702: LD_INT 0
80704: PPUSH
// result := array diff 0 ;
80705: LD_ADDR_VAR 0 2
80709: PUSH
80710: LD_VAR 0 1
80714: PUSH
80715: LD_INT 0
80717: DIFF
80718: ST_TO_ADDR
// if not result [ 1 ] then
80719: LD_VAR 0 2
80723: PUSH
80724: LD_INT 1
80726: ARRAY
80727: NOT
80728: IFFALSE 80748
// result := Delete ( result , 1 ) ;
80730: LD_ADDR_VAR 0 2
80734: PUSH
80735: LD_VAR 0 2
80739: PPUSH
80740: LD_INT 1
80742: PPUSH
80743: CALL_OW 3
80747: ST_TO_ADDR
// end ;
80748: LD_VAR 0 2
80752: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80753: LD_INT 0
80755: PPUSH
80756: PPUSH
80757: PPUSH
80758: PPUSH
// sibRocketRange := 25 ;
80759: LD_ADDR_VAR 0 6
80763: PUSH
80764: LD_INT 25
80766: ST_TO_ADDR
// result := false ;
80767: LD_ADDR_VAR 0 4
80771: PUSH
80772: LD_INT 0
80774: ST_TO_ADDR
// for i := 0 to 5 do
80775: LD_ADDR_VAR 0 5
80779: PUSH
80780: DOUBLE
80781: LD_INT 0
80783: DEC
80784: ST_TO_ADDR
80785: LD_INT 5
80787: PUSH
80788: FOR_TO
80789: IFFALSE 80856
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80791: LD_VAR 0 1
80795: PPUSH
80796: LD_VAR 0 5
80800: PPUSH
80801: LD_VAR 0 6
80805: PPUSH
80806: CALL_OW 272
80810: PPUSH
80811: LD_VAR 0 2
80815: PPUSH
80816: LD_VAR 0 5
80820: PPUSH
80821: LD_VAR 0 6
80825: PPUSH
80826: CALL_OW 273
80830: PPUSH
80831: LD_VAR 0 3
80835: PPUSH
80836: CALL_OW 309
80840: IFFALSE 80854
// begin result := true ;
80842: LD_ADDR_VAR 0 4
80846: PUSH
80847: LD_INT 1
80849: ST_TO_ADDR
// exit ;
80850: POP
80851: POP
80852: GO 80858
// end ;
80854: GO 80788
80856: POP
80857: POP
// end ;
80858: LD_VAR 0 4
80862: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80863: LD_INT 0
80865: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80866: LD_VAR 0 1
80870: PPUSH
80871: LD_VAR 0 2
80875: PPUSH
80876: LD_INT 0
80878: PPUSH
80879: LD_INT 0
80881: PPUSH
80882: LD_INT 1
80884: PPUSH
80885: LD_INT 0
80887: PPUSH
80888: CALL_OW 587
// end ; end_of_file
80892: LD_VAR 0 3
80896: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80897: LD_VAR 0 1
80901: PUSH
80902: LD_INT 200
80904: DOUBLE
80905: GREATEREQUAL
80906: IFFALSE 80914
80908: LD_INT 299
80910: DOUBLE
80911: LESSEQUAL
80912: IFTRUE 80916
80914: GO 80948
80916: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80917: LD_VAR 0 1
80921: PPUSH
80922: LD_VAR 0 2
80926: PPUSH
80927: LD_VAR 0 3
80931: PPUSH
80932: LD_VAR 0 4
80936: PPUSH
80937: LD_VAR 0 5
80941: PPUSH
80942: CALL 35563 0 5
80946: GO 81025
80948: LD_INT 300
80950: DOUBLE
80951: GREATEREQUAL
80952: IFFALSE 80960
80954: LD_INT 399
80956: DOUBLE
80957: LESSEQUAL
80958: IFTRUE 80962
80960: GO 81024
80962: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80963: LD_VAR 0 1
80967: PPUSH
80968: LD_VAR 0 2
80972: PPUSH
80973: LD_VAR 0 3
80977: PPUSH
80978: LD_VAR 0 4
80982: PPUSH
80983: LD_VAR 0 5
80987: PPUSH
80988: LD_VAR 0 6
80992: PPUSH
80993: LD_VAR 0 7
80997: PPUSH
80998: LD_VAR 0 8
81002: PPUSH
81003: LD_VAR 0 9
81007: PPUSH
81008: LD_VAR 0 10
81012: PPUSH
81013: LD_VAR 0 11
81017: PPUSH
81018: CALL 31896 0 11
81022: GO 81025
81024: POP
// end ;
81025: PPOPN 11
81027: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81028: LD_VAR 0 1
81032: PPUSH
81033: LD_VAR 0 2
81037: PPUSH
81038: LD_VAR 0 3
81042: PPUSH
81043: LD_VAR 0 4
81047: PPUSH
81048: LD_VAR 0 5
81052: PPUSH
81053: CALL 35299 0 5
// end ; end_of_file
81057: PPOPN 5
81059: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81060: LD_VAR 0 1
81064: PPUSH
81065: LD_VAR 0 2
81069: PPUSH
81070: LD_VAR 0 3
81074: PPUSH
81075: LD_VAR 0 4
81079: PPUSH
81080: LD_VAR 0 5
81084: PPUSH
81085: LD_VAR 0 6
81089: PPUSH
81090: CALL 19516 0 6
// end ;
81094: PPOPN 6
81096: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81097: LD_INT 0
81099: PPUSH
// begin if not units then
81100: LD_VAR 0 1
81104: NOT
81105: IFFALSE 81109
// exit ;
81107: GO 81109
// end ;
81109: PPOPN 7
81111: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81112: CALL 19410 0 0
// end ;
81116: PPOPN 1
81118: END
