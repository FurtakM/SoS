// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9054 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 75415 0 9
// Action ;
  79: CALL 15422 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 41047 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 41047 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 41047 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 41047 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 41047 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 41047 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 41047 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 78738 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 41047 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 41047 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 78738 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 41047 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 41047 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 78738 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 41047 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 78738 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 41047 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 78738 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 41047 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 78738 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 41047 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 78738 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 41047 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 78738 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 78738 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 49355 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 76372 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 54483 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 54483 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 54483 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 54483 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 41047 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 41047 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 41047 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 41047 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 41047 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 41047 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 41047 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 41047 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 41047 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 41047 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; squad := [ ] ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: EMPTY
5018: ST_TO_ADDR
// tmp := [ ] ;
5019: LD_ADDR_VAR 0 6
5023: PUSH
5024: EMPTY
5025: ST_TO_ADDR
// tmpVehs := [ ] ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: EMPTY
5032: ST_TO_ADDR
// uc_side := 1 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// uc_nation := 1 ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if vehicles then
5049: LD_VAR 0 8
5053: IFFALSE 5187
// begin for i := 1 to vehicles do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_VAR 0 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5185
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5073: LD_ADDR_OWVAR 37
5077: PUSH
5078: LD_VAR 0 8
5082: PUSH
5083: LD_VAR 0 2
5087: ARRAY
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5093: LD_ADDR_OWVAR 39
5097: PUSH
5098: LD_VAR 0 8
5102: PUSH
5103: LD_VAR 0 2
5107: ARRAY
5108: PUSH
5109: LD_INT 2
5111: ARRAY
5112: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5113: LD_ADDR_OWVAR 38
5117: PUSH
5118: LD_VAR 0 8
5122: PUSH
5123: LD_VAR 0 2
5127: ARRAY
5128: PUSH
5129: LD_INT 3
5131: ARRAY
5132: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5133: LD_ADDR_OWVAR 40
5137: PUSH
5138: LD_VAR 0 8
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_INT 4
5151: ARRAY
5152: ST_TO_ADDR
// veh := CreateVehicle ;
5153: LD_ADDR_VAR 0 9
5157: PUSH
5158: CALL_OW 45
5162: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5163: LD_ADDR_VAR 0 7
5167: PUSH
5168: LD_VAR 0 7
5172: PPUSH
5173: LD_VAR 0 9
5177: PPUSH
5178: CALL 78738 0 2
5182: ST_TO_ADDR
// end ;
5183: GO 5070
5185: POP
5186: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5187: LD_ADDR_EXP 14
5191: PUSH
5192: LD_STRING JMM
5194: PPUSH
5195: LD_EXP 1
5199: NOT
5200: PPUSH
5201: LD_VAR 0 10
5205: PPUSH
5206: CALL 41047 0 3
5210: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5211: LD_EXP 13
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: IN
5226: PUSH
5227: LD_EXP 15
5231: NOT
5232: AND
5233: IFFALSE 5294
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5235: LD_ADDR_EXP 15
5239: PUSH
5240: LD_STRING Brown
5242: PPUSH
5243: LD_EXP 1
5247: NOT
5248: PPUSH
5249: LD_VAR 0 10
5253: PPUSH
5254: CALL 41047 0 3
5258: ST_TO_ADDR
// if Brown then
5259: LD_EXP 15
5263: IFFALSE 5294
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_VAR 0 6
5274: PPUSH
5275: LD_VAR 0 6
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: PPUSH
5284: LD_EXP 15
5288: PPUSH
5289: CALL_OW 1
5293: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5294: LD_EXP 13
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: IN
5309: PUSH
5310: LD_EXP 16
5314: NOT
5315: AND
5316: IFFALSE 5377
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5318: LD_ADDR_EXP 16
5322: PUSH
5323: LD_STRING Donaldson
5325: PPUSH
5326: LD_EXP 1
5330: NOT
5331: PPUSH
5332: LD_VAR 0 10
5336: PPUSH
5337: CALL 41047 0 3
5341: ST_TO_ADDR
// if Donaldson then
5342: LD_EXP 16
5346: IFFALSE 5377
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_VAR 0 6
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: PPUSH
5367: LD_EXP 16
5371: PPUSH
5372: CALL_OW 1
5376: ST_TO_ADDR
// end ; if not Bobby then
5377: LD_EXP 17
5381: NOT
5382: IFFALSE 5440
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5384: LD_ADDR_EXP 17
5388: PUSH
5389: LD_STRING Bobby
5391: PPUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_VAR 0 10
5399: PPUSH
5400: CALL 41047 0 3
5404: ST_TO_ADDR
// if Bobby then
5405: LD_EXP 17
5409: IFFALSE 5440
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: LD_VAR 0 6
5420: PPUSH
5421: LD_VAR 0 6
5425: PUSH
5426: LD_INT 1
5428: PLUS
5429: PPUSH
5430: LD_EXP 17
5434: PPUSH
5435: CALL_OW 1
5439: ST_TO_ADDR
// end ; if not Cyrus then
5440: LD_EXP 18
5444: NOT
5445: IFFALSE 5503
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5447: LD_ADDR_EXP 18
5451: PUSH
5452: LD_STRING Cyrus
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: LD_VAR 0 10
5462: PPUSH
5463: CALL 41047 0 3
5467: ST_TO_ADDR
// if Cyrus then
5468: LD_EXP 18
5472: IFFALSE 5503
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5474: LD_ADDR_VAR 0 6
5478: PUSH
5479: LD_VAR 0 6
5483: PPUSH
5484: LD_VAR 0 6
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: PPUSH
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 1
5502: ST_TO_ADDR
// end ; if not Lisa then
5503: LD_EXP 19
5507: NOT
5508: IFFALSE 5569
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5510: LD_ADDR_EXP 19
5514: PUSH
5515: LD_STRING Lisa
5517: PPUSH
5518: LD_EXP 1
5522: NOT
5523: PPUSH
5524: LD_VAR 0 10
5528: PPUSH
5529: CALL 41047 0 3
5533: ST_TO_ADDR
// if Lisa then
5534: LD_EXP 19
5538: IFFALSE 5569
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5540: LD_ADDR_VAR 0 6
5544: PUSH
5545: LD_VAR 0 6
5549: PPUSH
5550: LD_VAR 0 6
5554: PUSH
5555: LD_INT 1
5557: PLUS
5558: PPUSH
5559: LD_EXP 19
5563: PPUSH
5564: CALL_OW 1
5568: ST_TO_ADDR
// end ; if not Frank then
5569: LD_EXP 20
5573: NOT
5574: IFFALSE 5635
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5576: LD_ADDR_EXP 20
5580: PUSH
5581: LD_STRING Frank
5583: PPUSH
5584: LD_EXP 1
5588: NOT
5589: PPUSH
5590: LD_VAR 0 10
5594: PPUSH
5595: CALL 41047 0 3
5599: ST_TO_ADDR
// if Frank then
5600: LD_EXP 20
5604: IFFALSE 5635
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 6
5615: PPUSH
5616: LD_VAR 0 6
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PPUSH
5625: LD_EXP 20
5629: PPUSH
5630: CALL_OW 1
5634: ST_TO_ADDR
// end ; if not Kikuchi then
5635: LD_EXP 22
5639: NOT
5640: IFFALSE 5698
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5642: LD_ADDR_EXP 22
5646: PUSH
5647: LD_STRING Kikuchi
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_VAR 0 10
5657: PPUSH
5658: CALL 41047 0 3
5662: ST_TO_ADDR
// if Kikuchi then
5663: LD_EXP 22
5667: IFFALSE 5698
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 1
5686: PLUS
5687: PPUSH
5688: LD_EXP 22
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; if not Gladstone then
5698: LD_EXP 21
5702: NOT
5703: IFFALSE 5764
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5705: LD_ADDR_EXP 21
5709: PUSH
5710: LD_STRING Gladstone
5712: PPUSH
5713: LD_EXP 1
5717: NOT
5718: PPUSH
5719: LD_VAR 0 10
5723: PPUSH
5724: CALL 41047 0 3
5728: ST_TO_ADDR
// if Gladstone then
5729: LD_EXP 21
5733: IFFALSE 5764
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_VAR 0 6
5744: PPUSH
5745: LD_VAR 0 6
5749: PUSH
5750: LD_INT 1
5752: PLUS
5753: PPUSH
5754: LD_EXP 21
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// end ; if not Khatam then
5764: LD_EXP 23
5768: NOT
5769: IFFALSE 5827
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5771: LD_ADDR_EXP 23
5775: PUSH
5776: LD_STRING Khatam
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_VAR 0 10
5786: PPUSH
5787: CALL 41047 0 3
5791: ST_TO_ADDR
// if Khatam then
5792: LD_EXP 23
5796: IFFALSE 5827
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5798: LD_ADDR_VAR 0 6
5802: PUSH
5803: LD_VAR 0 6
5807: PPUSH
5808: LD_VAR 0 6
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_EXP 23
5821: PPUSH
5822: CALL_OW 1
5826: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: LD_STRING 07c_others
5834: PPUSH
5835: CALL_OW 31
5839: ST_TO_ADDR
// squad := others ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: ST_TO_ADDR
// if others then
5850: LD_VAR 0 4
5854: IFFALSE 5905
// for i in others do
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_VAR 0 4
5865: PUSH
5866: FOR_IN
5867: IFFALSE 5903
// begin SetTag ( i , 108 ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_INT 108
5876: PPUSH
5877: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: PPUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: CALL 78738 0 2
5900: ST_TO_ADDR
// end ;
5901: GO 5866
5903: POP
5904: POP
// if tmp then
5905: LD_VAR 0 6
5909: IFFALSE 6144
// begin tmp := Join ( tmp , JMM ) ;
5911: LD_ADDR_VAR 0 6
5915: PUSH
5916: LD_VAR 0 6
5920: PPUSH
5921: LD_EXP 14
5925: PPUSH
5926: CALL 78738 0 2
5930: ST_TO_ADDR
// for i in tmp do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 6
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6142
// begin SetDir ( i , dir ) ;
5944: LD_VAR 0 2
5948: PPUSH
5949: LD_VAR 0 12
5953: PPUSH
5954: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 257
5967: PUSH
5968: LD_INT 3
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 7
5976: AND
5977: IFFALSE 6067
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5979: LD_VAR 0 7
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5995: LD_VAR 0 7
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 14
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_VAR 0 14
6017: PUSH
6018: LD_INT 2
6020: ARRAY
6021: PPUSH
6022: LD_INT 0
6024: PPUSH
6025: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_VAR 0 7
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6047: LD_ADDR_VAR 0 7
6051: PUSH
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 3
6064: ST_TO_ADDR
// end else
6065: GO 6084
// PlaceUnitArea ( i , area , false ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 11
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6084: LD_VAR 0 2
6088: PPUSH
6089: LD_VAR 0 13
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: PPUSH
6098: LD_VAR 0 13
6102: PUSH
6103: LD_INT 2
6105: ARRAY
6106: PPUSH
6107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6118: LD_VAR 0 11
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: NOT
6138: IFFALSE 6111
// end ;
6140: GO 5941
6142: POP
6143: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 305
6153: NOT
6154: PUSH
6155: LD_EXP 14
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: OR
6166: IFFALSE 6198
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6168: LD_EXP 14
6172: PPUSH
6173: LD_VAR 0 14
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 14
6186: PUSH
6187: LD_INT 2
6189: ARRAY
6190: PPUSH
6191: LD_INT 0
6193: PPUSH
6194: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_VAR 0 13
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: PPUSH
6212: LD_VAR 0 13
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: PPUSH
6221: CALL_OW 111
// jmmArrival := true ;
6225: LD_ADDR_EXP 8
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 1
6237: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6245: LD_INT 1
6247: PPUSH
6248: LD_INT 17
6250: PPUSH
6251: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6255: LD_INT 2
6257: PPUSH
6258: LD_INT 17
6260: PPUSH
6261: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: LD_INT 6
6272: PPUSH
6273: LD_INT 58
6275: PUSH
6276: EMPTY
6277: LIST
6278: PPUSH
6279: CALL_OW 70
6283: ST_TO_ADDR
// if tmp then
6284: LD_VAR 0 5
6288: IFFALSE 6316
// for i in tmp do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 5
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6314
// RemoveUnit ( i ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: CALL_OW 64
6312: GO 6300
6314: POP
6315: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6316: LD_ADDR_VAR 0 5
6320: PUSH
6321: LD_INT 6
6323: PPUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 3
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 70
6345: ST_TO_ADDR
// if tmp then
6346: LD_VAR 0 5
6350: IFFALSE 6374
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6352: LD_VAR 0 5
6356: PPUSH
6357: LD_INT 33
6359: PPUSH
6360: LD_INT 39
6362: PPUSH
6363: CALL_OW 111
// wait ( 0 0$3 ) ;
6367: LD_INT 105
6369: PPUSH
6370: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6374: LD_INT 70
6376: PPUSH
6377: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6381: LD_INT 6
6383: PPUSH
6384: LD_INT 50
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 70
6394: NOT
6395: IFFALSE 6374
// uc_side := 4 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 4
6404: ST_TO_ADDR
// uc_nation := 1 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6413: LD_ADDR_EXP 28
6417: PUSH
6418: LD_STRING Sikorski
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_STRING 
6426: PPUSH
6427: CALL 41047 0 3
6431: ST_TO_ADDR
// vc_engine := engine_combustion ;
6432: LD_ADDR_OWVAR 39
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// vc_control := control_manual ;
6440: LD_ADDR_OWVAR 38
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6448: LD_ADDR_OWVAR 40
6452: PUSH
6453: LD_INT 6
6455: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6456: LD_ADDR_OWVAR 37
6460: PUSH
6461: LD_INT 4
6463: ST_TO_ADDR
// veh := CreateVehicle ;
6464: LD_ADDR_VAR 0 4
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6474: LD_VAR 0 4
6478: PPUSH
6479: LD_INT 3
6481: PPUSH
6482: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6486: LD_VAR 0 4
6490: PPUSH
6491: LD_INT 4
6493: NEG
6494: PPUSH
6495: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 70
6506: PPUSH
6507: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 6
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6526: LD_EXP 28
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6540: LD_EXP 28
6544: PPUSH
6545: LD_INT 37
6547: PPUSH
6548: LD_INT 30
6550: PPUSH
6551: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6555: LD_INT 10
6557: PPUSH
6558: CALL_OW 67
// InitHc_All ( ) ;
6562: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 3
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_OWVAR 67
6598: ARRAY
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6736
// begin repeat wait ( 0 0$2 ) ;
6603: LD_INT 70
6605: PPUSH
6606: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6610: LD_INT 6
6612: PPUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: NOT
6624: IFFALSE 6603
// uc_side := 4 ;
6626: LD_ADDR_OWVAR 20
6630: PUSH
6631: LD_INT 4
6633: ST_TO_ADDR
// uc_nation := 1 ;
6634: LD_ADDR_OWVAR 21
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 4
6650: PPUSH
6651: LD_INT 7
6653: PPUSH
6654: CALL_OW 12
6658: PPUSH
6659: CALL_OW 380
// un := CreateHuman ;
6663: LD_ADDR_VAR 0 3
6667: PUSH
6668: CALL_OW 44
6672: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 233
// SetTag ( un , 101 ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 101
6692: PPUSH
6693: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6697: LD_VAR 0 3
6701: PPUSH
6702: LD_INT 6
6704: PPUSH
6705: LD_INT 0
6707: PPUSH
6708: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6712: LD_VAR 0 3
6716: PPUSH
6717: LD_INT 25
6719: PPUSH
6720: LD_INT 27
6722: PPUSH
6723: CALL_OW 111
// wait ( 0 0$1 ) ;
6727: LD_INT 35
6729: PPUSH
6730: CALL_OW 67
// end ;
6734: GO 6600
6736: POP
6737: POP
// repeat wait ( 0 0$2 ) ;
6738: LD_INT 70
6740: PPUSH
6741: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PUSH
6779: FOR_IN
6780: IFFALSE 6843
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_INT 17
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 58
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: LD_INT 33
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PPUSH
6837: CALL_OW 115
6841: GO 6779
6843: POP
6844: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6845: LD_INT 17
6847: PPUSH
6848: LD_INT 22
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: LD_INT 58
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: LD_INT 33
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 70
6890: NOT
6891: IFFALSE 6738
// for i := 1 to 2 do
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_INT 2
6905: PUSH
6906: FOR_TO
6907: IFFALSE 7019
// begin uc_side := 4 ;
6909: LD_ADDR_OWVAR 20
6913: PUSH
6914: LD_INT 4
6916: ST_TO_ADDR
// uc_nation := 1 ;
6917: LD_ADDR_OWVAR 21
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 4
6930: PPUSH
6931: LD_INT 3
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 380
// un := CreateHuman ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: CALL_OW 44
6955: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 233
// SetTag ( un , 101 ) ;
6968: LD_VAR 0 3
6972: PPUSH
6973: LD_INT 101
6975: PPUSH
6976: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_INT 6
6987: PPUSH
6988: LD_INT 0
6990: PPUSH
6991: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_INT 25
7002: PPUSH
7003: LD_INT 27
7005: PPUSH
7006: CALL_OW 111
// wait ( 0 0$1 ) ;
7010: LD_INT 35
7012: PPUSH
7013: CALL_OW 67
// end ;
7017: GO 6906
7019: POP
7020: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: DOUBLE
7027: LD_INT 1
7029: DEC
7030: ST_TO_ADDR
7031: LD_INT 5
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7321
// begin repeat wait ( 0 0$2 ) ;
7058: LD_INT 70
7060: PPUSH
7061: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7065: LD_INT 6
7067: PPUSH
7068: LD_INT 50
7070: PUSH
7071: EMPTY
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: NOT
7079: IFFALSE 7058
// uc_side := 4 ;
7081: LD_ADDR_OWVAR 20
7085: PUSH
7086: LD_INT 4
7088: ST_TO_ADDR
// uc_nation := 1 ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// vc_engine := engine_combustion ;
7097: LD_ADDR_OWVAR 39
7101: PUSH
7102: LD_INT 1
7104: ST_TO_ADDR
// vc_control := control_manual ;
7105: LD_ADDR_OWVAR 38
7109: PUSH
7110: LD_INT 1
7112: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7113: LD_ADDR_OWVAR 40
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 7
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 4
7143: MOD
7144: PUSH
7145: LD_INT 1
7147: PLUS
7148: ARRAY
7149: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7150: LD_ADDR_OWVAR 37
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: LD_INT 4
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_VAR 0 2
7177: PUSH
7178: LD_INT 4
7180: MOD
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: ST_TO_ADDR
// veh := CreateVehicle ;
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: CALL_OW 45
7196: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7197: LD_VAR 0 4
7201: PPUSH
7202: LD_INT 3
7204: PPUSH
7205: CALL_OW 233
// SetTag ( veh , 0 ) ;
7209: LD_VAR 0 4
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 70
7228: PPUSH
7229: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7233: LD_VAR 0 4
7237: PPUSH
7238: LD_INT 6
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// InitHc ;
7248: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 4
7260: PPUSH
7261: LD_INT 7
7263: PPUSH
7264: CALL_OW 12
7268: PPUSH
7269: CALL_OW 380
// un := CreateHuman ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: CALL_OW 44
7282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7283: LD_VAR 0 3
7287: PPUSH
7288: LD_VAR 0 4
7292: PPUSH
7293: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_INT 30
7304: PPUSH
7305: LD_INT 22
7307: PPUSH
7308: CALL_OW 111
// wait ( 0 0$3 ) ;
7312: LD_INT 105
7314: PPUSH
7315: CALL_OW 67
// end ;
7319: GO 7055
7321: POP
7322: POP
// wait ( 0 0$10 ) ;
7323: LD_INT 350
7325: PPUSH
7326: CALL_OW 67
// end ;
7330: LD_VAR 0 1
7334: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// gammaBase := [ ] ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: EMPTY
7347: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 50
7380: PUSH
7381: EMPTY
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 70
7393: ST_TO_ADDR
// for i in buildings do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 5
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7842
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 266
7416: PUSH
7417: LD_INT 6
7419: PUSH
7420: LD_INT 7
7422: PUSH
7423: LD_INT 8
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: IN
7431: IFFALSE 7545
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7433: LD_ADDR_VAR 0 4
7437: PUSH
7438: LD_VAR 0 4
7442: PUSH
7443: LD_VAR 0 3
7447: PPUSH
7448: CALL_OW 266
7452: PUSH
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 250
7462: PUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: CALL_OW 251
7472: PUSH
7473: LD_VAR 0 3
7477: PPUSH
7478: CALL_OW 254
7482: PUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: CALL_OW 267
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 248
7502: PUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 268
7515: PUSH
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: CALL_OW 268
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: ADD
7542: ST_TO_ADDR
7543: GO 7840
// if GetBType ( i ) = b_bunker then
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 266
7554: PUSH
7555: LD_INT 32
7557: EQUAL
7558: IFFALSE 7655
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7560: LD_ADDR_VAR 0 4
7564: PUSH
7565: LD_VAR 0 4
7569: PUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: CALL_OW 266
7579: PUSH
7580: LD_VAR 0 3
7584: PPUSH
7585: CALL_OW 250
7589: PUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 251
7599: PUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL_OW 254
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: CALL_OW 267
7619: PUSH
7620: LD_VAR 0 3
7624: PPUSH
7625: CALL_OW 248
7629: PUSH
7630: LD_VAR 0 3
7634: PPUSH
7635: CALL_OW 269
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: ADD
7652: ST_TO_ADDR
7653: GO 7840
// if GetBType ( i ) = b_factory then
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 266
7664: PUSH
7665: LD_INT 3
7667: EQUAL
7668: IFFALSE 7758
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_VAR 0 3
7697: PPUSH
7698: CALL_OW 250
7702: PUSH
7703: LD_VAR 0 3
7707: PPUSH
7708: CALL_OW 251
7712: PUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 254
7722: PUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 267
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 248
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 2
7755: ST_TO_ADDR
7756: GO 7840
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 266
7777: PUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 250
7787: PUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: CALL_OW 251
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 254
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 267
7817: PUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 248
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: ADD
7839: ST_TO_ADDR
// end ;
7840: GO 7404
7842: POP
7843: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7844: LD_VAR 0 4
7848: PPUSH
7849: LD_STRING 08_GammaBase
7851: PPUSH
7852: CALL_OW 39
// end ;
7856: LD_VAR 0 2
7860: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 17
7877: PPUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 70
7931: ST_TO_ADDR
// if tmp then
7932: LD_VAR 0 3
7936: IFFALSE 8055
// begin for i in tmp do
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_VAR 0 3
7947: PUSH
7948: FOR_IN
7949: IFFALSE 7980
// begin SetSide ( i , 4 ) ;
7951: LD_VAR 0 2
7955: PPUSH
7956: LD_INT 4
7958: PPUSH
7959: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_INT 42
7970: PPUSH
7971: LD_INT 22
7973: PPUSH
7974: CALL_OW 111
// end ;
7978: GO 7948
7980: POP
7981: POP
// repeat wait ( 0 0$3 ) ;
7982: LD_INT 105
7984: PPUSH
7985: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 51
7996: PPUSH
7997: LD_INT 16
7999: PPUSH
8000: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_INT 95
8011: PUSH
8012: LD_INT 17
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 72
8023: NOT
8024: IFFALSE 7982
// for i in tmp do
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8053
// SetSide ( i , 1 ) ;
8039: LD_VAR 0 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 235
8051: GO 8036
8053: POP
8054: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 17
8062: PPUSH
8063: LD_INT 22
8065: PUSH
8066: LD_INT 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: ST_TO_ADDR
// if tmp then
8092: LD_VAR 0 3
8096: IFFALSE 8120
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_INT 40
8105: PPUSH
8106: LD_INT 32
8108: PPUSH
8109: CALL_OW 111
// wait ( 0 0$3 ) ;
8113: LD_INT 105
8115: PPUSH
8116: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8120: LD_ADDR_VAR 0 3
8124: PUSH
8125: LD_INT 17
8127: PPUSH
8128: LD_INT 22
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// if tmp then
8175: LD_VAR 0 3
8179: IFFALSE 8327
// begin repeat wait ( 0 0$1 ) ;
8181: LD_INT 35
8183: PPUSH
8184: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 17
8195: PPUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: FOR_IN
8296: IFFALSE 8318
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 115
8316: GO 8295
8318: POP
8319: POP
// until not tmp ;
8320: LD_VAR 0 3
8324: NOT
8325: IFFALSE 8181
// end ; wait ( 0 0$2 ) ;
8327: LD_INT 70
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8334: LD_ADDR_VAR 0 3
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 4
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8354: LD_VAR 0 3
8358: PPUSH
8359: LD_INT 52
8361: PPUSH
8362: LD_INT 54
8364: PPUSH
8365: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8369: LD_VAR 0 3
8373: PPUSH
8374: LD_INT 175
8376: PPUSH
8377: CALL_OW 202
// wait ( 0 0$5 ) ;
8381: LD_INT 175
8383: PPUSH
8384: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_INT 120
8395: PUSH
8396: LD_INT 101
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 72
8407: PPUSH
8408: LD_INT 42
8410: PPUSH
8411: LD_INT 52
8413: PPUSH
8414: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_INT 120
8425: PUSH
8426: LD_INT 101
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 72
8437: PPUSH
8438: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 120
8449: PUSH
8450: LD_INT 101
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 72
8475: PPUSH
8476: LD_INT 34
8478: PPUSH
8479: LD_INT 47
8481: PPUSH
8482: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8486: LD_VAR 0 3
8490: PPUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 101
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 4
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 72
8519: PPUSH
8520: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8524: LD_ADDR_VAR 0 7
8528: PUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8549: LD_ADDR_VAR 0 4
8553: PUSH
8554: LD_INT 81
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_INT 57
8576: PUSH
8577: LD_INT 66
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 62
8586: PUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8598: LD_INT 35
8600: PPUSH
8601: CALL_OW 67
// for i in filter do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 7
8614: PUSH
8615: FOR_IN
8616: IFFALSE 9040
// begin if IsDead ( i ) then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 301
8627: IFFALSE 8647
// begin filter := filter diff i ;
8629: LD_ADDR_VAR 0 7
8633: PUSH
8634: LD_VAR 0 7
8638: PUSH
8639: LD_VAR 0 2
8643: DIFF
8644: ST_TO_ADDR
// continue ;
8645: GO 8615
// end ; tmp := IsDrivenBy ( i ) ;
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 311
8661: ST_TO_ADDR
// if not tmp then
8662: LD_VAR 0 3
8666: NOT
8667: IFFALSE 8671
// continue ;
8669: GO 8615
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 261
8680: PUSH
8681: LD_INT 30
8683: GREATER
8684: PUSH
8685: LD_VAR 0 2
8689: PPUSH
8690: CALL_OW 110
8694: PUSH
8695: LD_INT 2
8697: EQUAL
8698: AND
8699: IFFALSE 8715
// SetTag ( i , 0 ) else
8701: LD_VAR 0 2
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 109
8713: GO 8744
// if GetTag ( i ) = 2 then
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 110
8724: PUSH
8725: LD_INT 2
8727: EQUAL
8728: IFFALSE 8744
// begin ComMoveUnit ( i , amDepot ) ;
8730: LD_VAR 0 2
8734: PPUSH
8735: LD_EXP 31
8739: PPUSH
8740: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8744: LD_VAR 0 2
8748: PPUSH
8749: CALL_OW 256
8753: PUSH
8754: LD_INT 600
8756: GREATEREQUAL
8757: PUSH
8758: LD_VAR 0 2
8762: PPUSH
8763: CALL_OW 110
8767: NOT
8768: AND
8769: IFFALSE 8795
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8771: LD_VAR 0 2
8775: PPUSH
8776: LD_VAR 0 4
8780: PPUSH
8781: LD_VAR 0 2
8785: PPUSH
8786: CALL_OW 74
8790: PPUSH
8791: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8795: LD_VAR 0 2
8799: PPUSH
8800: CALL_OW 256
8804: PUSH
8805: LD_INT 600
8807: LESS
8808: PUSH
8809: LD_VAR 0 2
8813: PPUSH
8814: CALL_OW 110
8818: NOT
8819: AND
8820: IFFALSE 8896
// begin SetTag ( i , 1 ) ;
8822: LD_VAR 0 2
8826: PPUSH
8827: LD_INT 1
8829: PPUSH
8830: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8834: LD_ADDR_VAR 0 6
8838: PUSH
8839: LD_VAR 0 2
8843: PPUSH
8844: LD_VAR 0 5
8848: PPUSH
8849: CALL 82082 0 2
8853: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8854: LD_VAR 0 2
8858: PPUSH
8859: LD_VAR 0 6
8863: PUSH
8864: LD_INT 1
8866: ARRAY
8867: PPUSH
8868: LD_VAR 0 6
8872: PUSH
8873: LD_INT 2
8875: ARRAY
8876: PPUSH
8877: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8881: LD_VAR 0 2
8885: PPUSH
8886: LD_INT 40
8888: PPUSH
8889: LD_INT 49
8891: PPUSH
8892: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8896: LD_VAR 0 2
8900: PPUSH
8901: CALL_OW 110
8905: PUSH
8906: LD_INT 1
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 2
8914: PPUSH
8915: LD_INT 40
8917: PPUSH
8918: LD_INT 49
8920: PPUSH
8921: CALL_OW 297
8925: PUSH
8926: LD_INT 9
8928: LESS
8929: AND
8930: PUSH
8931: LD_VAR 0 3
8935: AND
8936: IFFALSE 9038
// begin ComExitVehicle ( tmp ) ;
8938: LD_VAR 0 3
8942: PPUSH
8943: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 2
8956: PPUSH
8957: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8961: LD_INT 35
8963: PPUSH
8964: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 256
8977: PUSH
8978: LD_INT 1000
8980: EQUAL
8981: IFFALSE 8961
// ComEnterUnit ( tmp , i ) ;
8983: LD_VAR 0 3
8987: PPUSH
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 120
// if GetFuel ( i ) <= 30 then
8997: LD_VAR 0 2
9001: PPUSH
9002: CALL_OW 261
9006: PUSH
9007: LD_INT 30
9009: LESSEQUAL
9010: IFFALSE 9026
// SetTag ( i , 2 ) else
9012: LD_VAR 0 2
9016: PPUSH
9017: LD_INT 2
9019: PPUSH
9020: CALL_OW 109
9024: GO 9038
// SetTag ( i , 0 ) ;
9026: LD_VAR 0 2
9030: PPUSH
9031: LD_INT 0
9033: PPUSH
9034: CALL_OW 109
// end ; end ;
9038: GO 8615
9040: POP
9041: POP
// until not filter ;
9042: LD_VAR 0 7
9046: NOT
9047: IFFALSE 8598
// end ; end_of_file
9049: LD_VAR 0 1
9053: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9054: LD_INT 0
9056: PPUSH
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
// uc_side := 3 ;
9061: LD_ADDR_OWVAR 20
9065: PUSH
9066: LD_INT 3
9068: ST_TO_ADDR
// uc_nation := 3 ;
9069: LD_ADDR_OWVAR 21
9073: PUSH
9074: LD_INT 3
9076: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9077: LD_ADDR_EXP 33
9081: PUSH
9082: LD_INT 8
9084: PUSH
9085: LD_INT 11
9087: PUSH
9088: LD_INT 14
9090: PUSH
9091: LD_INT 17
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: PUSH
9100: LD_OWVAR 67
9104: ARRAY
9105: ST_TO_ADDR
// ruMobile := [ ] ;
9106: LD_ADDR_EXP 34
9110: PUSH
9111: EMPTY
9112: ST_TO_ADDR
// ruBuildList := [ ] ;
9113: LD_ADDR_EXP 35
9117: PUSH
9118: EMPTY
9119: ST_TO_ADDR
// russianAttackers := [ ] ;
9120: LD_ADDR_EXP 36
9124: PUSH
9125: EMPTY
9126: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9127: LD_ADDR_VAR 0 5
9131: PUSH
9132: LD_INT 43
9134: PUSH
9135: LD_INT 44
9137: PUSH
9138: LD_INT 46
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: ST_TO_ADDR
// if Difficulty > 2 then
9146: LD_OWVAR 67
9150: PUSH
9151: LD_INT 2
9153: GREATER
9154: IFFALSE 9177
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9156: LD_ADDR_VAR 0 5
9160: PUSH
9161: LD_VAR 0 5
9165: PUSH
9166: LD_INT 45
9168: PUSH
9169: LD_INT 46
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: ADD
9176: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9177: LD_ADDR_EXP 32
9181: PUSH
9182: LD_STRING Borodin
9184: PPUSH
9185: CALL_OW 25
9189: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9190: LD_EXP 32
9194: PPUSH
9195: LD_INT 28
9197: PPUSH
9198: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9202: LD_INT 28
9204: PPUSH
9205: CALL_OW 274
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_INT 3000
9215: PUSH
9216: LD_INT 4000
9218: PUSH
9219: LD_INT 5000
9221: PUSH
9222: LD_INT 6000
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: PUSH
9231: LD_OWVAR 67
9235: ARRAY
9236: PPUSH
9237: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9241: LD_INT 28
9243: PPUSH
9244: CALL_OW 274
9248: PPUSH
9249: LD_INT 2
9251: PPUSH
9252: LD_INT 1000
9254: PPUSH
9255: CALL_OW 277
// if Difficulty > 2 then
9259: LD_OWVAR 67
9263: PUSH
9264: LD_INT 2
9266: GREATER
9267: IFFALSE 9391
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9269: LD_ADDR_VAR 0 4
9273: PUSH
9274: LD_INT 99
9276: PUSH
9277: LD_INT 130
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 121
9290: PUSH
9291: LD_INT 127
9293: PUSH
9294: LD_INT 4
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 117
9304: PUSH
9305: LD_INT 121
9307: PUSH
9308: LD_INT 4
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: ST_TO_ADDR
// for i in tmp do
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: LD_VAR 0 4
9330: PUSH
9331: FOR_IN
9332: IFFALSE 9389
// begin bc_type := b_turret ;
9334: LD_ADDR_OWVAR 42
9338: PUSH
9339: LD_INT 33
9341: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9342: LD_ADDR_OWVAR 43
9346: PUSH
9347: LD_INT 2
9349: PUSH
9350: LD_OWVAR 67
9354: PLUS
9355: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9356: LD_VAR 0 2
9360: PUSH
9361: LD_INT 1
9363: ARRAY
9364: PPUSH
9365: LD_VAR 0 2
9369: PUSH
9370: LD_INT 2
9372: ARRAY
9373: PPUSH
9374: LD_VAR 0 2
9378: PUSH
9379: LD_INT 3
9381: ARRAY
9382: PPUSH
9383: CALL_OW 47
// end ;
9387: GO 9331
9389: POP
9390: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9391: LD_ADDR_VAR 0 2
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: PUSH
9425: FOR_IN
9426: IFFALSE 9448
// SetBLevel ( i , 2 + Difficulty ) ;
9428: LD_VAR 0 2
9432: PPUSH
9433: LD_INT 2
9435: PUSH
9436: LD_OWVAR 67
9440: PLUS
9441: PPUSH
9442: CALL_OW 241
9446: GO 9425
9448: POP
9449: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9450: LD_ADDR_VAR 0 4
9454: PUSH
9455: LD_INT 22
9457: PUSH
9458: LD_INT 3
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 2
9467: PUSH
9468: LD_INT 30
9470: PUSH
9471: LD_INT 32
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 30
9480: PUSH
9481: LD_INT 33
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PPUSH
9497: CALL_OW 69
9501: ST_TO_ADDR
// for i in tmp do
9502: LD_ADDR_VAR 0 2
9506: PUSH
9507: LD_VAR 0 4
9511: PUSH
9512: FOR_IN
9513: IFFALSE 9545
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9515: LD_VAR 0 2
9519: PPUSH
9520: LD_VAR 0 5
9524: PUSH
9525: LD_INT 1
9527: PPUSH
9528: LD_VAR 0 5
9532: PPUSH
9533: CALL_OW 12
9537: ARRAY
9538: PPUSH
9539: CALL_OW 431
9543: GO 9512
9545: POP
9546: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9547: LD_ADDR_VAR 0 2
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 32
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PPUSH
9576: CALL_OW 69
9580: PUSH
9581: FOR_IN
9582: IFFALSE 9631
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9584: LD_INT 0
9586: PPUSH
9587: LD_INT 5
9589: PUSH
9590: LD_INT 6
9592: PUSH
9593: LD_INT 7
9595: PUSH
9596: LD_INT 8
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: PUSH
9605: LD_OWVAR 67
9609: ARRAY
9610: PPUSH
9611: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9615: CALL_OW 44
9619: PPUSH
9620: LD_VAR 0 2
9624: PPUSH
9625: CALL_OW 52
// end ;
9629: GO 9581
9631: POP
9632: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: LD_INT 22
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 69
9666: PUSH
9667: FOR_IN
9668: IFFALSE 9758
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9670: LD_ADDR_VAR 0 3
9674: PUSH
9675: DOUBLE
9676: LD_INT 1
9678: DEC
9679: ST_TO_ADDR
9680: LD_INT 2
9682: PUSH
9683: LD_INT 3
9685: PUSH
9686: LD_INT 4
9688: PUSH
9689: LD_INT 5
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_OWVAR 67
9702: ARRAY
9703: PUSH
9704: FOR_TO
9705: IFFALSE 9754
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9707: LD_INT 0
9709: PPUSH
9710: LD_INT 5
9712: PUSH
9713: LD_INT 6
9715: PUSH
9716: LD_INT 7
9718: PUSH
9719: LD_INT 8
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: LD_OWVAR 67
9732: ARRAY
9733: PPUSH
9734: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9738: CALL_OW 44
9742: PPUSH
9743: LD_VAR 0 2
9747: PPUSH
9748: CALL_OW 52
// end ;
9752: GO 9704
9754: POP
9755: POP
// end ;
9756: GO 9667
9758: POP
9759: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9760: LD_ADDR_VAR 0 2
9764: PUSH
9765: DOUBLE
9766: LD_INT 1
9768: DEC
9769: ST_TO_ADDR
9770: LD_INT 3
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: LD_INT 5
9778: PUSH
9779: LD_INT 5
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_OWVAR 67
9792: ARRAY
9793: PUSH
9794: FOR_TO
9795: IFFALSE 9842
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9797: LD_INT 0
9799: PPUSH
9800: LD_INT 4
9802: PUSH
9803: LD_INT 5
9805: PUSH
9806: LD_INT 5
9808: PUSH
9809: LD_INT 6
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: PUSH
9818: LD_OWVAR 67
9822: ARRAY
9823: PPUSH
9824: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9828: CALL_OW 44
9832: PPUSH
9833: LD_INT 28
9835: PPUSH
9836: CALL_OW 52
// end ;
9840: GO 9794
9842: POP
9843: POP
// for i := 1 to 2 do
9844: LD_ADDR_VAR 0 2
9848: PUSH
9849: DOUBLE
9850: LD_INT 1
9852: DEC
9853: ST_TO_ADDR
9854: LD_INT 2
9856: PUSH
9857: FOR_TO
9858: IFFALSE 9892
// begin PrepareScientist ( false , 6 ) ;
9860: LD_INT 0
9862: PPUSH
9863: LD_INT 6
9865: PPUSH
9866: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9870: CALL_OW 44
9874: PPUSH
9875: LD_INT 81
9877: PPUSH
9878: LD_INT 93
9880: PPUSH
9881: CALL_OW 428
9885: PPUSH
9886: CALL_OW 52
// end ;
9890: GO 9857
9892: POP
9893: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9894: LD_INT 22
9896: PPUSH
9897: LD_INT 1
9899: PPUSH
9900: LD_INT 3
9902: PPUSH
9903: LD_INT 51
9905: PPUSH
9906: LD_INT 100
9908: PPUSH
9909: CALL 45887 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9913: CALL_OW 45
9917: PPUSH
9918: LD_INT 91
9920: PPUSH
9921: LD_INT 94
9923: PPUSH
9924: LD_INT 3
9926: PPUSH
9927: LD_INT 0
9929: PPUSH
9930: CALL_OW 50
// for i := 1 to 2 do
9934: LD_ADDR_VAR 0 2
9938: PUSH
9939: DOUBLE
9940: LD_INT 1
9942: DEC
9943: ST_TO_ADDR
9944: LD_INT 2
9946: PUSH
9947: FOR_TO
9948: IFFALSE 9992
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9950: LD_INT 22
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: LD_INT 3
9958: PPUSH
9959: LD_INT 52
9961: PPUSH
9962: LD_INT 100
9964: PPUSH
9965: CALL 45887 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9969: CALL_OW 45
9973: PPUSH
9974: LD_INT 91
9976: PPUSH
9977: LD_INT 94
9979: PPUSH
9980: LD_INT 4
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: CALL_OW 50
// end ;
9990: GO 9947
9992: POP
9993: POP
// end ;
9994: LD_VAR 0 1
9998: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9999: LD_INT 0
10001: PPUSH
10002: PPUSH
10003: PPUSH
10004: PPUSH
10005: PPUSH
// uc_side := 3 ;
10006: LD_ADDR_OWVAR 20
10010: PUSH
10011: LD_INT 3
10013: ST_TO_ADDR
// uc_nation := 3 ;
10014: LD_ADDR_OWVAR 21
10018: PUSH
10019: LD_INT 3
10021: ST_TO_ADDR
// for i := 1 to 4 do
10022: LD_ADDR_VAR 0 2
10026: PUSH
10027: DOUBLE
10028: LD_INT 1
10030: DEC
10031: ST_TO_ADDR
10032: LD_INT 4
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10163
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10038: LD_INT 22
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: LD_INT 1
10046: PPUSH
10047: LD_INT 42
10049: PUSH
10050: LD_INT 43
10052: PUSH
10053: LD_INT 44
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 1
10063: PPUSH
10064: LD_INT 3
10066: PPUSH
10067: CALL_OW 12
10071: ARRAY
10072: PPUSH
10073: LD_INT 40
10075: PPUSH
10076: CALL 45887 0 5
// veh := CreateVehicle ;
10080: LD_ADDR_VAR 0 4
10084: PUSH
10085: CALL_OW 45
10089: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10090: LD_VAR 0 4
10094: PPUSH
10095: LD_INT 5
10097: PPUSH
10098: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10102: LD_VAR 0 4
10106: PPUSH
10107: LD_INT 7
10109: PPUSH
10110: LD_INT 0
10112: PPUSH
10113: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10117: LD_INT 0
10119: PPUSH
10120: LD_INT 5
10122: PPUSH
10123: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10127: CALL_OW 44
10131: PPUSH
10132: LD_VAR 0 4
10136: PPUSH
10137: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10141: LD_ADDR_VAR 0 5
10145: PUSH
10146: LD_VAR 0 5
10150: PPUSH
10151: LD_VAR 0 4
10155: PPUSH
10156: CALL 78738 0 2
10160: ST_TO_ADDR
// end ;
10161: GO 10035
10163: POP
10164: POP
// for i := 1 to 3 do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: DOUBLE
10171: LD_INT 1
10173: DEC
10174: ST_TO_ADDR
10175: LD_INT 3
10177: PUSH
10178: FOR_TO
10179: IFFALSE 10306
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10181: LD_INT 22
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: LD_INT 42
10192: PUSH
10193: LD_INT 43
10195: PUSH
10196: LD_INT 44
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 1
10206: PPUSH
10207: LD_INT 3
10209: PPUSH
10210: CALL_OW 12
10214: ARRAY
10215: PPUSH
10216: LD_INT 40
10218: PPUSH
10219: CALL 45887 0 5
// veh := CreateVehicle ;
10223: LD_ADDR_VAR 0 4
10227: PUSH
10228: CALL_OW 45
10232: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10233: LD_VAR 0 4
10237: PPUSH
10238: LD_INT 5
10240: PPUSH
10241: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10245: LD_VAR 0 4
10249: PPUSH
10250: LD_INT 8
10252: PPUSH
10253: LD_INT 0
10255: PPUSH
10256: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10260: LD_INT 0
10262: PPUSH
10263: LD_INT 5
10265: PPUSH
10266: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10270: CALL_OW 44
10274: PPUSH
10275: LD_VAR 0 4
10279: PPUSH
10280: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10284: LD_ADDR_VAR 0 5
10288: PUSH
10289: LD_VAR 0 5
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: CALL 78738 0 2
10303: ST_TO_ADDR
// end ;
10304: GO 10178
10306: POP
10307: POP
// for i := 1 to 2 do
10308: LD_ADDR_VAR 0 2
10312: PUSH
10313: DOUBLE
10314: LD_INT 1
10316: DEC
10317: ST_TO_ADDR
10318: LD_INT 2
10320: PUSH
10321: FOR_TO
10322: IFFALSE 10381
// begin PrepareSoldier ( false , 5 ) ;
10324: LD_INT 0
10326: PPUSH
10327: LD_INT 5
10329: PPUSH
10330: CALL_OW 381
// un := CreateHuman ;
10334: LD_ADDR_VAR 0 3
10338: PUSH
10339: CALL_OW 44
10343: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10344: LD_VAR 0 3
10348: PPUSH
10349: LD_INT 8
10351: PPUSH
10352: LD_INT 0
10354: PPUSH
10355: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10359: LD_ADDR_VAR 0 5
10363: PUSH
10364: LD_VAR 0 5
10368: PPUSH
10369: LD_VAR 0 3
10373: PPUSH
10374: CALL 78738 0 2
10378: ST_TO_ADDR
// end ;
10379: GO 10321
10381: POP
10382: POP
// for i in tmp do
10383: LD_ADDR_VAR 0 2
10387: PUSH
10388: LD_VAR 0 5
10392: PUSH
10393: FOR_IN
10394: IFFALSE 10413
// ComAgressiveMove ( i , 51 , 16 ) ;
10396: LD_VAR 0 2
10400: PPUSH
10401: LD_INT 51
10403: PPUSH
10404: LD_INT 16
10406: PPUSH
10407: CALL_OW 114
10411: GO 10393
10413: POP
10414: POP
// end ;
10415: LD_VAR 0 1
10419: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10420: LD_EXP 34
10424: IFFALSE 10999
10426: GO 10428
10428: DISABLE
10429: LD_INT 0
10431: PPUSH
10432: PPUSH
10433: PPUSH
// begin enable ;
10434: ENABLE
// if not ruMobile then
10435: LD_EXP 34
10439: NOT
10440: IFFALSE 10444
// exit ;
10442: GO 10999
// for i in ruMobile do
10444: LD_ADDR_VAR 0 1
10448: PUSH
10449: LD_EXP 34
10453: PUSH
10454: FOR_IN
10455: IFFALSE 10997
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10457: LD_VAR 0 1
10461: PPUSH
10462: CALL_OW 302
10466: NOT
10467: PUSH
10468: LD_VAR 0 1
10472: PPUSH
10473: CALL_OW 255
10477: PUSH
10478: LD_INT 3
10480: NONEQUAL
10481: OR
10482: IFFALSE 10502
// begin ruMobile := ruMobile diff i ;
10484: LD_ADDR_EXP 34
10488: PUSH
10489: LD_EXP 34
10493: PUSH
10494: LD_VAR 0 1
10498: DIFF
10499: ST_TO_ADDR
// continue ;
10500: GO 10454
// end ; if GetTag ( i ) = 300 then
10502: LD_VAR 0 1
10506: PPUSH
10507: CALL_OW 110
10511: PUSH
10512: LD_INT 300
10514: EQUAL
10515: IFFALSE 10630
// begin if GetFuel ( i ) < 50 then
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 261
10526: PUSH
10527: LD_INT 50
10529: LESS
10530: IFFALSE 10589
// begin ComMoveXY ( i , 93 , 100 ) ;
10532: LD_VAR 0 1
10536: PPUSH
10537: LD_INT 93
10539: PPUSH
10540: LD_INT 100
10542: PPUSH
10543: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10547: LD_INT 35
10549: PPUSH
10550: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10554: LD_VAR 0 1
10558: PPUSH
10559: LD_INT 93
10561: PPUSH
10562: LD_INT 100
10564: PPUSH
10565: CALL_OW 297
10569: PUSH
10570: LD_INT 4
10572: LESS
10573: IFFALSE 10547
// SetFuel ( i , 100 ) ;
10575: LD_VAR 0 1
10579: PPUSH
10580: LD_INT 100
10582: PPUSH
10583: CALL_OW 240
// end else
10587: GO 10630
// if not IsInArea ( i , ruParkingArea ) then
10589: LD_VAR 0 1
10593: PPUSH
10594: LD_INT 10
10596: PPUSH
10597: CALL_OW 308
10601: NOT
10602: IFFALSE 10618
// ComMoveToArea ( i , ruParkingArea ) else
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 10
10611: PPUSH
10612: CALL_OW 113
10616: GO 10630
// SetTag ( i , 301 ) ;
10618: LD_VAR 0 1
10622: PPUSH
10623: LD_INT 301
10625: PPUSH
10626: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 110
10639: PUSH
10640: LD_INT 301
10642: EQUAL
10643: IFFALSE 10773
// begin if GetLives ( i ) < 1000 then
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 256
10654: PUSH
10655: LD_INT 1000
10657: LESS
10658: IFFALSE 10750
// begin if not IsDrivenBy ( i ) then
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL_OW 311
10669: NOT
10670: IFFALSE 10674
// continue ;
10672: GO 10454
// mech := IsDrivenBy ( i ) ;
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: CALL_OW 311
10688: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10689: LD_VAR 0 2
10693: PPUSH
10694: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10698: LD_VAR 0 2
10702: PPUSH
10703: LD_VAR 0 1
10707: PPUSH
10708: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10712: LD_INT 35
10714: PPUSH
10715: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10719: LD_VAR 0 1
10723: PPUSH
10724: CALL_OW 256
10728: PUSH
10729: LD_INT 1000
10731: EQUAL
10732: IFFALSE 10712
// ComEnterUnit ( mech , i ) ;
10734: LD_VAR 0 2
10738: PPUSH
10739: LD_VAR 0 1
10743: PPUSH
10744: CALL_OW 120
// end else
10748: GO 10773
// if IsDrivenBy ( i ) then
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 311
10759: IFFALSE 10773
// SetTag ( i , 0 ) ;
10761: LD_VAR 0 1
10765: PPUSH
10766: LD_INT 0
10768: PPUSH
10769: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 110
10782: PUSH
10783: LD_INT 300
10785: LESS
10786: IFFALSE 10995
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10788: LD_ADDR_VAR 0 3
10792: PUSH
10793: LD_INT 11
10795: PPUSH
10796: LD_INT 81
10798: PUSH
10799: LD_INT 3
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PPUSH
10806: CALL_OW 70
10810: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 256
10820: PUSH
10821: LD_INT 650
10823: LESS
10824: IFFALSE 10849
// begin ComStop ( i ) ;
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 141
// SetTag ( i , 300 ) ;
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 300
10842: PPUSH
10843: CALL_OW 109
// continue ;
10847: GO 10454
// end ; if enemy then
10849: LD_VAR 0 3
10853: IFFALSE 10893
// begin if not HasTask ( i ) then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 314
10864: NOT
10865: IFFALSE 10891
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10867: LD_VAR 0 1
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: LD_VAR 0 1
10881: PPUSH
10882: CALL_OW 74
10886: PPUSH
10887: CALL_OW 115
// end else
10891: GO 10995
// if ruMobile > 1 then
10893: LD_EXP 34
10897: PUSH
10898: LD_INT 1
10900: GREATER
10901: IFFALSE 10995
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10903: LD_ADDR_VAR 0 3
10907: PUSH
10908: LD_INT 81
10910: PUSH
10911: LD_INT 3
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 69
10922: ST_TO_ADDR
// if enemy then
10923: LD_VAR 0 3
10927: IFFALSE 10995
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10929: LD_VAR 0 1
10933: PPUSH
10934: LD_INT 116
10936: PUSH
10937: LD_INT 95
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 84
10946: PUSH
10947: LD_INT 68
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 58
10956: PUSH
10957: LD_INT 53
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 44
10966: PUSH
10967: LD_INT 35
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 45
10976: PUSH
10977: LD_INT 23
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: PPUSH
10991: CALL 81342 0 2
// end ; end ; end ;
10995: GO 10454
10997: POP
10998: POP
// end ;
10999: PPOPN 3
11001: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11002: LD_INT 3
11004: PUSH
11005: LD_INT 22
11007: PUSH
11008: LD_INT 1
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 32
11021: PUSH
11022: LD_INT 1
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PPUSH
11033: CALL_OW 69
11037: IFFALSE 11121
11039: GO 11041
11041: DISABLE
11042: LD_INT 0
11044: PPUSH
// begin enable ;
11045: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11046: LD_ADDR_VAR 0 1
11050: PUSH
11051: LD_INT 3
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 1
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 32
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 69
11086: PUSH
11087: FOR_IN
11088: IFFALSE 11119
// if GetFuel ( i ) < 3 then
11090: LD_VAR 0 1
11094: PPUSH
11095: CALL_OW 261
11099: PUSH
11100: LD_INT 3
11102: LESS
11103: IFFALSE 11117
// SetFuel ( i , 3 ) ;
11105: LD_VAR 0 1
11109: PPUSH
11110: LD_INT 3
11112: PPUSH
11113: CALL_OW 240
11117: GO 11087
11119: POP
11120: POP
// end ;
11121: PPOPN 1
11123: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11124: LD_INT 29
11126: PPUSH
11127: CALL_OW 302
11131: PUSH
11132: LD_INT 29
11134: PPUSH
11135: CALL_OW 461
11139: PUSH
11140: LD_INT 2
11142: EQUAL
11143: AND
11144: IFFALSE 11377
11146: GO 11148
11148: DISABLE
11149: LD_INT 0
11151: PPUSH
11152: PPUSH
// begin enable ;
11153: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11154: LD_ADDR_VAR 0 1
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_INT 23
11167: PUSH
11168: LD_INT 24
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 1
11179: PPUSH
11180: LD_INT 4
11182: PPUSH
11183: CALL_OW 12
11187: ARRAY
11188: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11189: LD_ADDR_VAR 0 2
11193: PUSH
11194: LD_INT 42
11196: PUSH
11197: LD_INT 44
11199: PUSH
11200: LD_INT 43
11202: PUSH
11203: LD_INT 46
11205: PUSH
11206: LD_INT 45
11208: PUSH
11209: LD_INT 46
11211: PUSH
11212: LD_INT 45
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: PUSH
11224: LD_OWVAR 67
11228: PUSH
11229: LD_INT 0
11231: PPUSH
11232: LD_INT 3
11234: PPUSH
11235: CALL_OW 12
11239: PLUS
11240: ARRAY
11241: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11242: LD_VAR 0 1
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 22
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: IN
11257: PUSH
11258: LD_VAR 0 2
11262: PUSH
11263: LD_INT 46
11265: EQUAL
11266: AND
11267: IFFALSE 11296
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11269: LD_ADDR_VAR 0 2
11273: PUSH
11274: LD_INT 44
11276: PUSH
11277: LD_INT 45
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_INT 2
11289: PPUSH
11290: CALL_OW 12
11294: ARRAY
11295: ST_TO_ADDR
// if tick < [ 15 15$00 , 12 12$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11296: LD_OWVAR 1
11300: PUSH
11301: LD_INT 31500
11303: PUSH
11304: LD_INT 25200
11306: PUSH
11307: LD_INT 21000
11309: PUSH
11310: LD_INT 18900
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: PUSH
11319: LD_OWVAR 67
11323: ARRAY
11324: LESS
11325: IFFALSE 11354
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 44
11334: PUSH
11335: LD_INT 43
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 1
11344: PPUSH
11345: LD_INT 2
11347: PPUSH
11348: CALL_OW 12
11352: ARRAY
11353: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11354: LD_INT 29
11356: PPUSH
11357: LD_VAR 0 1
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: LD_VAR 0 2
11372: PPUSH
11373: CALL_OW 185
// end ;
11377: PPOPN 2
11379: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11380: LD_INT 28
11382: PPUSH
11383: CALL_OW 302
11387: IFFALSE 12979
11389: GO 11391
11391: DISABLE
11392: LD_INT 0
11394: PPUSH
11395: PPUSH
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
11405: PPUSH
11406: PPUSH
// begin enable ;
11407: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: LD_INT 12
11415: PPUSH
11416: LD_INT 3
11418: PUSH
11419: LD_INT 24
11421: PUSH
11422: LD_INT 1000
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 21
11435: PUSH
11436: LD_INT 3
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 70
11451: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: LD_INT 22
11459: PUSH
11460: LD_INT 3
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 25
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PPUSH
11481: CALL_OW 69
11485: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11486: LD_ADDR_VAR 0 6
11490: PUSH
11491: LD_INT 22
11493: PUSH
11494: LD_INT 3
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 34
11503: PUSH
11504: LD_INT 52
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11520: LD_ADDR_VAR 0 8
11524: PUSH
11525: LD_INT 22
11527: PUSH
11528: LD_INT 3
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 25
11537: PUSH
11538: LD_INT 4
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 69
11553: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11554: LD_ADDR_VAR 0 9
11558: PUSH
11559: LD_INT 81
11561: PPUSH
11562: LD_INT 93
11564: PPUSH
11565: CALL_OW 428
11569: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11570: LD_ADDR_VAR 0 10
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 32
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 50
11597: PUSH
11598: EMPTY
11599: LIST
11600: PUSH
11601: LD_INT 58
11603: PUSH
11604: EMPTY
11605: LIST
11606: PUSH
11607: LD_INT 3
11609: PUSH
11610: LD_INT 120
11612: PUSH
11613: LD_INT 701
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 69
11635: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11636: LD_ADDR_VAR 0 12
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 30
11653: PUSH
11654: LD_INT 5
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 50
11663: PUSH
11664: EMPTY
11665: LIST
11666: PUSH
11667: LD_INT 3
11669: PUSH
11670: LD_INT 62
11672: PUSH
11673: EMPTY
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 69
11690: ST_TO_ADDR
// if emptyTowers then
11691: LD_VAR 0 10
11695: IFFALSE 11956
// begin for i in emptyTowers do
11697: LD_ADDR_VAR 0 1
11701: PUSH
11702: LD_VAR 0 10
11706: PUSH
11707: FOR_IN
11708: IFFALSE 11952
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11710: LD_ADDR_VAR 0 11
11714: PUSH
11715: LD_INT 22
11717: PUSH
11718: LD_INT 3
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 2
11727: PUSH
11728: LD_INT 54
11730: PUSH
11731: EMPTY
11732: LIST
11733: PUSH
11734: LD_INT 95
11736: PUSH
11737: LD_INT 12
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 1
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 50
11761: PUSH
11762: EMPTY
11763: LIST
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: LD_INT 120
11770: PUSH
11771: LD_INT 701
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: ST_TO_ADDR
// if not sol then
11794: LD_VAR 0 11
11798: NOT
11799: IFFALSE 11803
// break ;
11801: GO 11952
// for j in sol do
11803: LD_ADDR_VAR 0 2
11807: PUSH
11808: LD_VAR 0 11
11812: PUSH
11813: FOR_IN
11814: IFFALSE 11865
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11816: LD_VAR 0 2
11820: PPUSH
11821: CALL_OW 310
11825: PUSH
11826: LD_VAR 0 2
11830: PPUSH
11831: CALL_OW 310
11835: PPUSH
11836: CALL_OW 266
11840: PUSH
11841: LD_INT 32
11843: EQUAL
11844: AND
11845: IFFALSE 11863
// sol := sol diff j ;
11847: LD_ADDR_VAR 0 11
11851: PUSH
11852: LD_VAR 0 11
11856: PUSH
11857: LD_VAR 0 2
11861: DIFF
11862: ST_TO_ADDR
11863: GO 11813
11865: POP
11866: POP
// if not sol then
11867: LD_VAR 0 11
11871: NOT
11872: IFFALSE 11876
// break ;
11874: GO 11952
// if IsInUnit ( sol [ 1 ] ) then
11876: LD_VAR 0 11
11880: PUSH
11881: LD_INT 1
11883: ARRAY
11884: PPUSH
11885: CALL_OW 310
11889: IFFALSE 11904
// ComExit ( sol [ 1 ] ) ;
11891: LD_VAR 0 11
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: CALL 79136 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11904: LD_VAR 0 11
11908: PUSH
11909: LD_INT 1
11911: ARRAY
11912: PPUSH
11913: LD_INT 701
11915: PPUSH
11916: CALL_OW 109
// SetTag ( i , 701 ) ;
11920: LD_VAR 0 1
11924: PPUSH
11925: LD_INT 701
11927: PPUSH
11928: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
11932: LD_VAR 0 11
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 180
// end ;
11950: GO 11707
11952: POP
11953: POP
// end else
11954: GO 12202
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
11956: LD_VAR 0 11
11960: PPUSH
11961: LD_INT 3
11963: PUSH
11964: LD_INT 54
11966: PUSH
11967: EMPTY
11968: LIST
11969: PUSH
11970: LD_INT 95
11972: PUSH
11973: LD_INT 12
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 72
11989: IFFALSE 12202
// begin if barracks then
11991: LD_VAR 0 12
11995: IFFALSE 12063
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
11997: LD_ADDR_VAR 0 1
12001: PUSH
12002: LD_VAR 0 11
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: LD_INT 95
12018: PUSH
12019: LD_INT 12
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: LIST
12030: PPUSH
12031: CALL_OW 72
12035: PUSH
12036: FOR_IN
12037: IFFALSE 12059
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12039: LD_VAR 0 1
12043: PPUSH
12044: LD_VAR 0 12
12048: PUSH
12049: LD_INT 1
12051: ARRAY
12052: PPUSH
12053: CALL_OW 120
12057: GO 12036
12059: POP
12060: POP
// end else
12061: GO 12202
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12063: LD_INT 12
12065: PPUSH
12066: LD_INT 81
12068: PUSH
12069: LD_INT 3
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PPUSH
12076: CALL_OW 70
12080: IFFALSE 12202
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12082: LD_ADDR_VAR 0 1
12086: PUSH
12087: LD_VAR 0 11
12091: PPUSH
12092: LD_INT 3
12094: PUSH
12095: LD_INT 54
12097: PUSH
12098: EMPTY
12099: LIST
12100: PUSH
12101: LD_INT 95
12103: PUSH
12104: LD_INT 12
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 72
12120: PUSH
12121: FOR_IN
12122: IFFALSE 12200
// begin SetTag ( i , 702 ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: LD_INT 702
12131: PPUSH
12132: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12136: LD_ADDR_VAR 0 13
12140: PUSH
12141: LD_INT 12
12143: PPUSH
12144: LD_INT 81
12146: PUSH
12147: LD_INT 3
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 70
12158: PPUSH
12159: LD_VAR 0 1
12163: PPUSH
12164: CALL_OW 74
12168: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12169: LD_VAR 0 1
12173: PPUSH
12174: LD_VAR 0 13
12178: PPUSH
12179: CALL_OW 250
12183: PPUSH
12184: LD_VAR 0 13
12188: PPUSH
12189: CALL_OW 251
12193: PPUSH
12194: CALL_OW 114
// end ;
12198: GO 12121
12200: POP
12201: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12202: LD_ADDR_VAR 0 3
12206: PUSH
12207: LD_INT 22
12209: PUSH
12210: LD_INT 3
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 95
12219: PUSH
12220: LD_INT 11
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 50
12229: PUSH
12230: EMPTY
12231: LIST
12232: PUSH
12233: LD_INT 25
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 120
12245: PUSH
12246: LD_INT 702
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: ST_TO_ADDR
// if tmp then
12265: LD_VAR 0 3
12269: IFFALSE 12315
// for i in tmp do
12271: LD_ADDR_VAR 0 1
12275: PUSH
12276: LD_VAR 0 3
12280: PUSH
12281: FOR_IN
12282: IFFALSE 12313
// begin ComMoveXY ( i , 90 , 94 ) ;
12284: LD_VAR 0 1
12288: PPUSH
12289: LD_INT 90
12291: PPUSH
12292: LD_INT 94
12294: PPUSH
12295: CALL_OW 111
// SetTag ( i , 0 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 0
12306: PPUSH
12307: CALL_OW 109
// end ;
12311: GO 12281
12313: POP
12314: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12315: LD_VAR 0 8
12319: PUSH
12320: LD_VAR 0 5
12324: PPUSH
12325: LD_INT 120
12327: PUSH
12328: LD_INT 2
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: AND
12340: IFFALSE 12353
// ComExitAll ( sci ) else
12342: LD_VAR 0 8
12346: PPUSH
12347: CALL 79219 0 1
12351: GO 12426
// if sci then
12353: LD_VAR 0 8
12357: IFFALSE 12426
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12359: LD_VAR 0 8
12363: PPUSH
12364: LD_INT 3
12366: PUSH
12367: LD_INT 54
12369: PUSH
12370: EMPTY
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 72
12381: PUSH
12382: LD_VAR 0 9
12386: PPUSH
12387: CALL_OW 302
12391: AND
12392: IFFALSE 12426
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12394: LD_VAR 0 8
12398: PPUSH
12399: LD_INT 3
12401: PUSH
12402: LD_INT 54
12404: PUSH
12405: EMPTY
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 72
12416: PPUSH
12417: LD_VAR 0 9
12421: PPUSH
12422: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12426: LD_VAR 0 6
12430: PPUSH
12431: LD_INT 50
12433: PUSH
12434: EMPTY
12435: LIST
12436: PPUSH
12437: CALL_OW 72
12441: PUSH
12442: LD_VAR 0 4
12446: AND
12447: IFFALSE 12478
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12449: LD_VAR 0 6
12453: PPUSH
12454: LD_INT 50
12456: PUSH
12457: EMPTY
12458: LIST
12459: PPUSH
12460: CALL_OW 72
12464: PPUSH
12465: LD_VAR 0 4
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 130
// if eng then
12478: LD_VAR 0 5
12482: IFFALSE 12979
// begin for i in eng do
12484: LD_ADDR_VAR 0 1
12488: PUSH
12489: LD_VAR 0 5
12493: PUSH
12494: FOR_IN
12495: IFFALSE 12977
// begin tag := GetTag ( i ) ;
12497: LD_ADDR_VAR 0 7
12501: PUSH
12502: LD_VAR 0 1
12506: PPUSH
12507: CALL_OW 110
12511: ST_TO_ADDR
// case tag of 0 :
12512: LD_VAR 0 7
12516: PUSH
12517: LD_INT 0
12519: DOUBLE
12520: EQUAL
12521: IFTRUE 12525
12523: GO 12736
12525: POP
// begin if b then
12526: LD_VAR 0 4
12530: IFFALSE 12546
// begin SetTag ( i , 1 ) ;
12532: LD_VAR 0 1
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL_OW 109
// continue ;
12544: GO 12494
// end ; if not ruBuildList then
12546: LD_EXP 35
12550: NOT
12551: IFFALSE 12567
// ComEnterUnit ( i , ruDep ) else
12553: LD_VAR 0 1
12557: PPUSH
12558: LD_INT 28
12560: PPUSH
12561: CALL_OW 120
12565: GO 12734
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12567: LD_INT 11
12569: PPUSH
12570: LD_INT 81
12572: PUSH
12573: LD_INT 3
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 70
12584: PUSH
12585: LD_INT 0
12587: EQUAL
12588: PUSH
12589: LD_INT 28
12591: PPUSH
12592: LD_EXP 35
12596: PUSH
12597: LD_INT 1
12599: ARRAY
12600: PUSH
12601: LD_INT 1
12603: ARRAY
12604: PPUSH
12605: LD_EXP 35
12609: PUSH
12610: LD_INT 1
12612: ARRAY
12613: PUSH
12614: LD_INT 2
12616: ARRAY
12617: PPUSH
12618: LD_EXP 35
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: PUSH
12627: LD_INT 3
12629: ARRAY
12630: PPUSH
12631: LD_EXP 35
12635: PUSH
12636: LD_INT 1
12638: ARRAY
12639: PUSH
12640: LD_INT 4
12642: ARRAY
12643: PPUSH
12644: CALL 54483 0 5
12648: AND
12649: IFFALSE 12734
// begin if IsInUnit ( i ) then
12651: LD_VAR 0 1
12655: PPUSH
12656: CALL_OW 310
12660: IFFALSE 12673
// ComExitBuilding ( i ) else
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL_OW 122
12671: GO 12734
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12673: LD_VAR 0 1
12677: PPUSH
12678: LD_EXP 35
12682: PUSH
12683: LD_INT 1
12685: ARRAY
12686: PUSH
12687: LD_INT 1
12689: ARRAY
12690: PPUSH
12691: LD_EXP 35
12695: PUSH
12696: LD_INT 1
12698: ARRAY
12699: PUSH
12700: LD_INT 2
12702: ARRAY
12703: PPUSH
12704: LD_EXP 35
12708: PUSH
12709: LD_INT 1
12711: ARRAY
12712: PUSH
12713: LD_INT 3
12715: ARRAY
12716: PPUSH
12717: LD_EXP 35
12721: PUSH
12722: LD_INT 1
12724: ARRAY
12725: PUSH
12726: LD_INT 4
12728: ARRAY
12729: PPUSH
12730: CALL_OW 145
// end ; end ; 1 :
12734: GO 12933
12736: LD_INT 1
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12847
12744: POP
// begin if not b then
12745: LD_VAR 0 4
12749: NOT
12750: IFFALSE 12766
// begin SetTag ( i , 0 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 0
12759: PPUSH
12760: CALL_OW 109
// continue ;
12764: GO 12494
// end ; if IsInUnit ( i ) then
12766: LD_VAR 0 1
12770: PPUSH
12771: CALL_OW 310
12775: IFFALSE 12786
// ComExitBuilding ( i ) ;
12777: LD_VAR 0 1
12781: PPUSH
12782: CALL_OW 122
// if GetLives ( i ) < 650 then
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 256
12795: PUSH
12796: LD_INT 650
12798: LESS
12799: IFFALSE 12815
// begin SetTag ( i , 2 ) ;
12801: LD_VAR 0 1
12805: PPUSH
12806: LD_INT 2
12808: PPUSH
12809: CALL_OW 109
// continue ;
12813: GO 12494
// end ; if b then
12815: LD_VAR 0 4
12819: IFFALSE 12845
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: LD_VAR 0 1
12835: PPUSH
12836: CALL_OW 74
12840: PPUSH
12841: CALL_OW 130
// end ; 2 :
12845: GO 12933
12847: LD_INT 2
12849: DOUBLE
12850: EQUAL
12851: IFTRUE 12855
12853: GO 12932
12855: POP
// begin if GetLives ( i ) = 1000 then
12856: LD_VAR 0 1
12860: PPUSH
12861: CALL_OW 256
12865: PUSH
12866: LD_INT 1000
12868: EQUAL
12869: IFFALSE 12885
// begin SetTag ( i , 1 ) ;
12871: LD_VAR 0 1
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: CALL_OW 109
// continue ;
12883: GO 12494
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12885: LD_VAR 0 1
12889: PPUSH
12890: LD_INT 84
12892: PPUSH
12893: LD_INT 93
12895: PPUSH
12896: CALL_OW 297
12900: PUSH
12901: LD_INT 6
12903: GREATER
12904: IFFALSE 12930
// begin ComMoveXY ( i , 84 , 93 ) ;
12906: LD_VAR 0 1
12910: PPUSH
12911: LD_INT 84
12913: PPUSH
12914: LD_INT 93
12916: PPUSH
12917: CALL_OW 111
// AddComHold ( i ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 200
// end ; end ; end ;
12930: GO 12933
12932: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12933: LD_VAR 0 1
12937: PPUSH
12938: LD_INT 12
12940: PPUSH
12941: CALL_OW 308
12945: NOT
12946: PUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 310
12956: NOT
12957: AND
12958: IFFALSE 12975
// ComMoveXY ( i , 91 , 95 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 91
12967: PPUSH
12968: LD_INT 95
12970: PPUSH
12971: CALL_OW 111
// end ;
12975: GO 12494
12977: POP
12978: POP
// end ; end ;
12979: PPOPN 13
12981: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12982: LD_INT 0
12984: PPUSH
12985: PPUSH
12986: PPUSH
12987: PPUSH
12988: PPUSH
12989: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
12990: LD_ADDR_VAR 0 3
12994: PUSH
12995: DOUBLE
12996: LD_INT 1
12998: DEC
12999: ST_TO_ADDR
13000: LD_INT 3
13002: PUSH
13003: LD_INT 4
13005: PUSH
13006: LD_INT 5
13008: PUSH
13009: LD_INT 6
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_OWVAR 67
13022: ARRAY
13023: PUSH
13024: LD_VAR 0 1
13028: PLUS
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13348
// begin uc_side := 6 ;
13033: LD_ADDR_OWVAR 20
13037: PUSH
13038: LD_INT 6
13040: ST_TO_ADDR
// uc_nation := 3 ;
13041: LD_ADDR_OWVAR 21
13045: PUSH
13046: LD_INT 3
13048: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13049: LD_ADDR_VAR 0 6
13053: PUSH
13054: LD_INT 21
13056: PUSH
13057: LD_INT 22
13059: PUSH
13060: LD_INT 23
13062: PUSH
13063: LD_INT 24
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 1
13074: PPUSH
13075: LD_INT 4
13077: PPUSH
13078: CALL_OW 12
13082: ARRAY
13083: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13084: LD_ADDR_VAR 0 7
13088: PUSH
13089: LD_INT 42
13091: PUSH
13092: LD_INT 44
13094: PUSH
13095: LD_INT 43
13097: PUSH
13098: LD_INT 46
13100: PUSH
13101: LD_INT 45
13103: PUSH
13104: LD_INT 46
13106: PUSH
13107: LD_INT 45
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: LD_OWVAR 67
13123: PUSH
13124: LD_INT 0
13126: PPUSH
13127: LD_INT 3
13129: PPUSH
13130: CALL_OW 12
13134: PLUS
13135: ARRAY
13136: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13137: LD_VAR 0 6
13141: PUSH
13142: LD_INT 21
13144: PUSH
13145: LD_INT 22
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: IN
13152: PUSH
13153: LD_VAR 0 7
13157: PUSH
13158: LD_INT 46
13160: EQUAL
13161: AND
13162: IFFALSE 13191
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13164: LD_ADDR_VAR 0 7
13168: PUSH
13169: LD_INT 44
13171: PUSH
13172: LD_INT 45
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 1
13181: PPUSH
13182: LD_INT 2
13184: PPUSH
13185: CALL_OW 12
13189: ARRAY
13190: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13191: LD_OWVAR 1
13195: PUSH
13196: LD_INT 31500
13198: PUSH
13199: LD_INT 27300
13201: PUSH
13202: LD_INT 23100
13204: PUSH
13205: LD_INT 18900
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_OWVAR 67
13218: ARRAY
13219: LESS
13220: IFFALSE 13253
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13222: LD_ADDR_VAR 0 7
13226: PUSH
13227: LD_INT 44
13229: PUSH
13230: LD_INT 43
13232: PUSH
13233: LD_INT 42
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 1
13243: PPUSH
13244: LD_INT 3
13246: PPUSH
13247: CALL_OW 12
13251: ARRAY
13252: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13253: LD_VAR 0 6
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_INT 3
13263: PPUSH
13264: LD_VAR 0 7
13268: PPUSH
13269: LD_INT 90
13271: PPUSH
13272: CALL 45887 0 5
// un := CreateVehicle ;
13276: LD_ADDR_VAR 0 4
13280: PUSH
13281: CALL_OW 45
13285: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13286: LD_VAR 0 4
13290: PPUSH
13291: LD_INT 140
13293: PPUSH
13294: LD_INT 146
13296: PPUSH
13297: LD_INT 0
13299: PPUSH
13300: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13304: LD_VAR 0 4
13308: PPUSH
13309: LD_INT 131
13311: PPUSH
13312: LD_INT 128
13314: PPUSH
13315: CALL_OW 111
// wait ( 0 0$3 ) ;
13319: LD_INT 105
13321: PPUSH
13322: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13326: LD_ADDR_VAR 0 5
13330: PUSH
13331: LD_VAR 0 5
13335: PPUSH
13336: LD_VAR 0 4
13340: PPUSH
13341: CALL 78738 0 2
13345: ST_TO_ADDR
// end ;
13346: GO 13030
13348: POP
13349: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13350: LD_ADDR_EXP 36
13354: PUSH
13355: LD_EXP 36
13359: PPUSH
13360: LD_VAR 0 5
13364: PPUSH
13365: CALL 78775 0 2
13369: ST_TO_ADDR
// end ;
13370: LD_VAR 0 2
13374: RET
// every 0 0$3 trigger russianAttackers do
13375: LD_EXP 36
13379: IFFALSE 13462
13381: GO 13383
13383: DISABLE
// begin enable ;
13384: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13385: LD_EXP 36
13389: PPUSH
13390: LD_INT 126
13392: PUSH
13393: LD_INT 108
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 107
13402: PUSH
13403: LD_INT 85
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 82
13412: PUSH
13413: LD_INT 62
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 73
13422: PUSH
13423: LD_INT 46
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 62
13432: PUSH
13433: LD_INT 31
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 52
13442: PUSH
13443: LD_INT 17
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL 81342 0 2
// end ;
13462: END
// every 20 20$0 trigger Difficulty > 2 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
13463: LD_OWVAR 67
13467: PUSH
13468: LD_INT 2
13470: GREATER
13471: PUSH
13472: LD_INT 22
13474: PUSH
13475: LD_INT 6
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 21
13484: PUSH
13485: LD_INT 2
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 50
13494: PUSH
13495: EMPTY
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: PUSH
13508: LD_INT 0
13510: EQUAL
13511: AND
13512: IFFALSE 13566
13514: GO 13516
13516: DISABLE
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
13517: LD_INT 51
13519: PPUSH
13520: LD_INT 6
13522: PPUSH
13523: LD_INT 2
13525: PPUSH
13526: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
13530: LD_INT 57
13532: PPUSH
13533: LD_INT 6
13535: PPUSH
13536: LD_INT 2
13538: PPUSH
13539: CALL_OW 322
// if Difficulty > 3 then
13543: LD_OWVAR 67
13547: PUSH
13548: LD_INT 3
13550: GREATER
13551: IFFALSE 13566
// SetTech ( tech_weap2 , 6 , state_researched ) ;
13553: LD_INT 52
13555: PPUSH
13556: LD_INT 6
13558: PPUSH
13559: LD_INT 2
13561: PPUSH
13562: CALL_OW 322
// end ; end_of_file
13566: END
// on SailEvent ( event ) do begin if event = 1 then
13567: LD_VAR 0 1
13571: PUSH
13572: LD_INT 1
13574: EQUAL
13575: IFFALSE 13605
// PrepareRussianAttack ( [ 2 , 4 , 6 , 8 ] [ Difficulty ] ) ;
13577: LD_INT 2
13579: PUSH
13580: LD_INT 4
13582: PUSH
13583: LD_INT 6
13585: PUSH
13586: LD_INT 8
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_OWVAR 67
13599: ARRAY
13600: PPUSH
13601: CALL 12982 0 1
// end ;
13605: PPOPN 1
13607: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13608: LD_VAR 0 1
13612: PUSH
13613: LD_EXP 28
13617: EQUAL
13618: PUSH
13619: LD_VAR 0 2
13623: PUSH
13624: LD_INT 1
13626: EQUAL
13627: AND
13628: IFFALSE 13634
// SikorskiKilledInAction ;
13630: CALL 18751 0 0
// end ;
13634: PPOPN 3
13636: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13637: LD_INT 0
13639: PPUSH
13640: PPUSH
13641: PPUSH
13642: PPUSH
13643: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13644: LD_VAR 0 1
13648: PPUSH
13649: CALL 36153 0 1
// if un = JMM then
13653: LD_VAR 0 1
13657: PUSH
13658: LD_EXP 14
13662: EQUAL
13663: IFFALSE 13672
// YouLost ( JMM ) ;
13665: LD_STRING JMM
13667: PPUSH
13668: CALL_OW 104
// if un = Sikorski then
13672: LD_VAR 0 1
13676: PUSH
13677: LD_EXP 28
13681: EQUAL
13682: IFFALSE 13708
// if sikorskiStatus = 0 then
13684: LD_EXP 9
13688: PUSH
13689: LD_INT 0
13691: EQUAL
13692: IFFALSE 13700
// SikorskiKilledInAction else
13694: CALL 18751 0 0
13698: GO 13708
// sikorskiIsKilled := true ;
13700: LD_ADDR_EXP 10
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 255
13717: PUSH
13718: LD_INT 1
13720: EQUAL
13721: PUSH
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 248
13731: PUSH
13732: LD_INT 1
13734: EQUAL
13735: AND
13736: PUSH
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 266
13746: PUSH
13747: LD_INT 0
13749: PUSH
13750: LD_INT 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: IN
13757: AND
13758: IFFALSE 13767
// YouLost ( Destroyed ) ;
13760: LD_STRING Destroyed
13762: PPUSH
13763: CALL_OW 104
// if un = ruDep then
13767: LD_VAR 0 1
13771: PUSH
13772: LD_INT 28
13774: EQUAL
13775: IFFALSE 13909
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13777: LD_ADDR_VAR 0 2
13781: PUSH
13782: LD_INT 22
13784: PUSH
13785: LD_INT 3
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 25
13794: PUSH
13795: LD_INT 1
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: PUSH
13811: FOR_IN
13812: IFFALSE 13907
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13814: LD_ADDR_VAR 0 3
13818: PUSH
13819: LD_INT 11
13821: PPUSH
13822: LD_INT 81
13824: PUSH
13825: LD_INT 3
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PPUSH
13832: CALL_OW 70
13836: PPUSH
13837: LD_VAR 0 2
13841: PPUSH
13842: CALL_OW 74
13846: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13847: LD_VAR 0 2
13851: PPUSH
13852: CALL_OW 310
13856: PPUSH
13857: CALL_OW 266
13861: PUSH
13862: LD_INT 32
13864: EQUAL
13865: IFFALSE 13905
// begin ComExitBuilding ( i ) ;
13867: LD_VAR 0 2
13871: PPUSH
13872: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13876: LD_VAR 0 2
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: CALL_OW 250
13890: PPUSH
13891: LD_VAR 0 3
13895: PPUSH
13896: CALL_OW 251
13900: PPUSH
13901: CALL_OW 174
// end ; end ;
13905: GO 13811
13907: POP
13908: POP
// end ; if un in ruMobile then
13909: LD_VAR 0 1
13913: PUSH
13914: LD_EXP 34
13918: IN
13919: IFFALSE 13937
// ruMobile := ruMobile diff un ;
13921: LD_ADDR_EXP 34
13925: PUSH
13926: LD_EXP 34
13930: PUSH
13931: LD_VAR 0 1
13935: DIFF
13936: ST_TO_ADDR
// if GetSide ( un ) = 3 then
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 255
13946: PUSH
13947: LD_INT 3
13949: EQUAL
13950: IFFALSE 14585
// begin if GetType ( un ) = unit_building then
13952: LD_VAR 0 1
13956: PPUSH
13957: CALL_OW 247
13961: PUSH
13962: LD_INT 3
13964: EQUAL
13965: IFFALSE 14101
// begin btype := GetBType ( un ) ;
13967: LD_ADDR_VAR 0 6
13971: PUSH
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 266
13981: ST_TO_ADDR
// if btype = b_warehouse then
13982: LD_VAR 0 6
13986: PUSH
13987: LD_INT 1
13989: EQUAL
13990: IFFALSE 14000
// btype := b_depot ;
13992: LD_ADDR_VAR 0 6
13996: PUSH
13997: LD_INT 0
13999: ST_TO_ADDR
// if btype = b_barracks then
14000: LD_VAR 0 6
14004: PUSH
14005: LD_INT 5
14007: EQUAL
14008: IFFALSE 14018
// btype := b_armoury ;
14010: LD_ADDR_VAR 0 6
14014: PUSH
14015: LD_INT 4
14017: ST_TO_ADDR
// if btype = b_lab_full then
14018: LD_VAR 0 6
14022: PUSH
14023: LD_INT 8
14025: EQUAL
14026: IFFALSE 14036
// btype := b_lab ;
14028: LD_ADDR_VAR 0 6
14032: PUSH
14033: LD_INT 6
14035: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
14036: LD_ADDR_EXP 35
14040: PUSH
14041: LD_EXP 35
14045: PPUSH
14046: LD_EXP 35
14050: PUSH
14051: LD_INT 1
14053: PLUS
14054: PPUSH
14055: LD_VAR 0 6
14059: PUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 250
14069: PUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 251
14079: PUSH
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 254
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PPUSH
14096: CALL_OW 1
14100: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 247
14110: PUSH
14111: LD_INT 2
14113: EQUAL
14114: IFFALSE 14389
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 264
14125: PUSH
14126: LD_INT 52
14128: PUSH
14129: LD_INT 51
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: IN
14136: IFFALSE 14166
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14138: LD_INT 29
14140: PPUSH
14141: LD_INT 22
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_INT 3
14149: PPUSH
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL_OW 264
14159: PPUSH
14160: CALL_OW 185
// end else
14164: GO 14389
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14166: LD_ADDR_VAR 0 4
14170: PUSH
14171: LD_INT 21
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_INT 23
14179: PUSH
14180: LD_INT 24
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 1
14191: PPUSH
14192: LD_INT 4
14194: PPUSH
14195: CALL_OW 12
14199: ARRAY
14200: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14201: LD_ADDR_VAR 0 5
14205: PUSH
14206: LD_INT 42
14208: PUSH
14209: LD_INT 44
14211: PUSH
14212: LD_INT 43
14214: PUSH
14215: LD_INT 46
14217: PUSH
14218: LD_INT 45
14220: PUSH
14221: LD_INT 46
14223: PUSH
14224: LD_INT 45
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: PUSH
14236: LD_OWVAR 67
14240: PUSH
14241: LD_INT 0
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 12
14251: PLUS
14252: ARRAY
14253: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14254: LD_VAR 0 4
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 22
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: IN
14269: PUSH
14270: LD_VAR 0 5
14274: PUSH
14275: LD_INT 46
14277: EQUAL
14278: AND
14279: IFFALSE 14308
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14281: LD_ADDR_VAR 0 5
14285: PUSH
14286: LD_INT 44
14288: PUSH
14289: LD_INT 45
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 1
14298: PPUSH
14299: LD_INT 2
14301: PPUSH
14302: CALL_OW 12
14306: ARRAY
14307: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14308: LD_OWVAR 1
14312: PUSH
14313: LD_INT 31500
14315: PUSH
14316: LD_INT 27300
14318: PUSH
14319: LD_INT 23100
14321: PUSH
14322: LD_INT 21000
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: PUSH
14331: LD_OWVAR 67
14335: ARRAY
14336: LESS
14337: IFFALSE 14366
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14339: LD_ADDR_VAR 0 5
14343: PUSH
14344: LD_INT 44
14346: PUSH
14347: LD_INT 43
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 1
14356: PPUSH
14357: LD_INT 2
14359: PPUSH
14360: CALL_OW 12
14364: ARRAY
14365: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14366: LD_INT 29
14368: PPUSH
14369: LD_VAR 0 4
14373: PPUSH
14374: LD_INT 1
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: LD_VAR 0 5
14384: PPUSH
14385: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14389: LD_VAR 0 1
14393: PPUSH
14394: CALL_OW 257
14398: PUSH
14399: LD_INT 3
14401: EQUAL
14402: IFFALSE 14585
// begin killMechCounter := Inc ( killMechCounter ) ;
14404: LD_ADDR_EXP 12
14408: PUSH
14409: LD_EXP 12
14413: PPUSH
14414: CALL 80099 0 1
14418: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14419: LD_EXP 33
14423: PUSH
14424: LD_INT 0
14426: EQUAL
14427: PUSH
14428: LD_INT 29
14430: PPUSH
14431: CALL_OW 302
14435: NOT
14436: OR
14437: IFFALSE 14441
// exit ;
14439: GO 14585
// ruMechCounter := Dec ( ruMechCounter ) ;
14441: LD_ADDR_EXP 33
14445: PUSH
14446: LD_EXP 33
14450: PPUSH
14451: CALL 80121 0 1
14455: ST_TO_ADDR
// uc_side := 3 ;
14456: LD_ADDR_OWVAR 20
14460: PUSH
14461: LD_INT 3
14463: ST_TO_ADDR
// uc_nation := 3 ;
14464: LD_ADDR_OWVAR 21
14468: PUSH
14469: LD_INT 3
14471: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14472: LD_INT 0
14474: PPUSH
14475: LD_INT 5
14477: PUSH
14478: LD_INT 6
14480: PUSH
14481: LD_INT 7
14483: PUSH
14484: LD_INT 8
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: PUSH
14493: LD_OWVAR 67
14497: ARRAY
14498: PPUSH
14499: CALL_OW 383
// tmp := CreateHuman ;
14503: LD_ADDR_VAR 0 3
14507: PUSH
14508: CALL_OW 44
14512: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14513: LD_VAR 0 3
14517: PPUSH
14518: LD_INT 145
14520: PPUSH
14521: LD_INT 133
14523: PPUSH
14524: LD_INT 0
14526: PPUSH
14527: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14531: LD_VAR 0 3
14535: PPUSH
14536: LD_INT 29
14538: PPUSH
14539: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14543: LD_INT 35
14545: PPUSH
14546: CALL_OW 67
// if not HasTask ( tmp ) then
14550: LD_VAR 0 3
14554: PPUSH
14555: CALL_OW 314
14559: NOT
14560: IFFALSE 14574
// ComEnterUnit ( tmp , ruFac ) ;
14562: LD_VAR 0 3
14566: PPUSH
14567: LD_INT 29
14569: PPUSH
14570: CALL_OW 120
// until IsInUnit ( tmp ) ;
14574: LD_VAR 0 3
14578: PPUSH
14579: CALL_OW 310
14583: IFFALSE 14543
// end ; end ; end ;
14585: PPOPN 6
14587: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 255
14597: PUSH
14598: LD_INT 4
14600: EQUAL
14601: IFFALSE 14618
// ComMoveXY ( driver , 40 , 47 ) ;
14603: LD_VAR 0 1
14607: PPUSH
14608: LD_INT 40
14610: PPUSH
14611: LD_INT 47
14613: PPUSH
14614: CALL_OW 111
// if GetSide ( driver ) = 3 then
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 255
14627: PUSH
14628: LD_INT 3
14630: EQUAL
14631: IFFALSE 14845
// begin ComMoveXY ( driver , 90 , 97 ) ;
14633: LD_VAR 0 1
14637: PPUSH
14638: LD_INT 90
14640: PPUSH
14641: LD_INT 97
14643: PPUSH
14644: CALL_OW 111
// if IsOk ( ruFac ) then
14648: LD_INT 29
14650: PPUSH
14651: CALL_OW 302
14655: IFFALSE 14769
// begin repeat wait ( 0 0$1 ) ;
14657: LD_INT 35
14659: PPUSH
14660: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14664: LD_INT 29
14666: PPUSH
14667: CALL_OW 313
14671: PUSH
14672: LD_INT 6
14674: LESS
14675: PUSH
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 301
14685: OR
14686: IFFALSE 14657
// if IsDead ( driver ) then
14688: LD_VAR 0 1
14692: PPUSH
14693: CALL_OW 301
14697: IFFALSE 14701
// exit ;
14699: GO 14845
// repeat wait ( 0 0$10 ) ;
14701: LD_INT 350
14703: PPUSH
14704: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14708: LD_VAR 0 1
14712: PPUSH
14713: CALL_OW 314
14717: NOT
14718: PUSH
14719: LD_INT 29
14721: PPUSH
14722: CALL_OW 313
14726: PUSH
14727: LD_INT 6
14729: LESS
14730: AND
14731: IFFALSE 14745
// ComEnterUnit ( driver , ruFac ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: LD_INT 29
14740: PPUSH
14741: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 301
14754: PUSH
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 310
14764: OR
14765: IFFALSE 14701
// end else
14767: GO 14845
// begin ComMoveXY ( driver , 142 , 148 ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 142
14776: PPUSH
14777: LD_INT 148
14779: PPUSH
14780: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14784: LD_INT 35
14786: PPUSH
14787: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 301
14800: PUSH
14801: LD_VAR 0 1
14805: PPUSH
14806: LD_INT 142
14808: PPUSH
14809: LD_INT 148
14811: PPUSH
14812: CALL_OW 307
14816: OR
14817: IFFALSE 14784
// if IsAt ( driver , 142 , 148 ) then
14819: LD_VAR 0 1
14823: PPUSH
14824: LD_INT 142
14826: PPUSH
14827: LD_INT 148
14829: PPUSH
14830: CALL_OW 307
14834: IFFALSE 14845
// RemoveUnit ( driver ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 64
// end ; end ; end ;
14845: PPOPN 4
14847: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14848: LD_VAR 0 2
14852: PPUSH
14853: CALL_OW 257
14857: PUSH
14858: LD_INT 3
14860: EQUAL
14861: PUSH
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 255
14871: PUSH
14872: LD_INT 3
14874: EQUAL
14875: AND
14876: PUSH
14877: LD_VAR 0 1
14881: PUSH
14882: LD_INT 29
14884: EQUAL
14885: AND
14886: IFFALSE 14900
// SetLives ( un , 1000 ) ;
14888: LD_VAR 0 2
14892: PPUSH
14893: LD_INT 1000
14895: PPUSH
14896: CALL_OW 234
// if GetTag ( b ) = 701 then
14900: LD_VAR 0 1
14904: PPUSH
14905: CALL_OW 110
14909: PUSH
14910: LD_INT 701
14912: EQUAL
14913: IFFALSE 14939
// begin SetTag ( b , 0 ) ;
14915: LD_VAR 0 1
14919: PPUSH
14920: LD_INT 0
14922: PPUSH
14923: CALL_OW 109
// SetTag ( un , 0 ) ;
14927: LD_VAR 0 2
14931: PPUSH
14932: LD_INT 0
14934: PPUSH
14935: CALL_OW 109
// end ; end ;
14939: PPOPN 2
14941: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 255
14951: PUSH
14952: LD_INT 3
14954: PUSH
14955: LD_INT 6
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: IN
14962: PUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 263
14972: PUSH
14973: LD_INT 3
14975: EQUAL
14976: AND
14977: PUSH
14978: LD_EXP 7
14982: NOT
14983: AND
14984: IFFALSE 15003
// begin seenComputer := true ;
14986: LD_ADDR_EXP 7
14990: PUSH
14991: LD_INT 1
14993: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14994: LD_VAR 0 1
14998: PPUSH
14999: CALL 17942 0 1
// end ; end ;
15003: PPOPN 1
15005: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15006: LD_INT 0
15008: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15009: LD_VAR 0 1
15013: PPUSH
15014: LD_VAR 0 2
15018: PPUSH
15019: CALL 36273 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 255
15032: PUSH
15033: LD_INT 3
15035: EQUAL
15036: PUSH
15037: LD_VAR 0 1
15041: PPUSH
15042: CALL_OW 263
15046: PUSH
15047: LD_INT 1
15049: EQUAL
15050: AND
15051: PUSH
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 264
15061: PUSH
15062: LD_INT 42
15064: PUSH
15065: LD_INT 43
15067: PUSH
15068: LD_INT 44
15070: PUSH
15071: LD_INT 46
15073: PUSH
15074: LD_INT 45
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: IN
15084: AND
15085: IFFALSE 15115
// begin SetTag ( vehicle , 300 ) ;
15087: LD_VAR 0 1
15091: PPUSH
15092: LD_INT 300
15094: PPUSH
15095: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
15099: LD_ADDR_EXP 34
15103: PUSH
15104: LD_EXP 34
15108: PUSH
15109: LD_VAR 0 1
15113: UNION
15114: ST_TO_ADDR
// end ; end ;
15115: PPOPN 3
15117: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15118: LD_INT 0
15120: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15121: LD_VAR 0 2
15125: PPUSH
15126: LD_VAR 0 3
15130: PPUSH
15131: LD_INT 13
15133: PPUSH
15134: CALL_OW 309
15138: IFFALSE 15269
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15140: LD_ADDR_VAR 0 6
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_INT 3
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 50
15157: PUSH
15158: EMPTY
15159: LIST
15160: PUSH
15161: LD_INT 34
15163: PUSH
15164: LD_INT 51
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: ST_TO_ADDR
// if not cargo then
15181: LD_VAR 0 6
15185: NOT
15186: IFFALSE 15190
// exit ;
15188: GO 15269
// wait ( 0 0$5 ) ;
15190: LD_INT 175
15192: PPUSH
15193: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15197: LD_VAR 0 6
15201: PUSH
15202: LD_INT 1
15204: ARRAY
15205: PPUSH
15206: LD_INT 28
15208: PPUSH
15209: CALL_OW 296
15213: PUSH
15214: LD_INT 6
15216: LESS
15217: PUSH
15218: LD_VAR 0 6
15222: PUSH
15223: LD_INT 1
15225: ARRAY
15226: PPUSH
15227: CALL_OW 261
15231: PUSH
15232: LD_INT 50
15234: LESS
15235: AND
15236: IFFALSE 15250
// ComMoveUnit ( cargo , ruDep ) ;
15238: LD_VAR 0 6
15242: PPUSH
15243: LD_INT 28
15245: PPUSH
15246: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15250: LD_VAR 0 6
15254: PPUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: LD_VAR 0 3
15264: PPUSH
15265: CALL_OW 177
// end ; end ;
15269: PPOPN 6
15271: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 264
15281: PUSH
15282: LD_INT 45
15284: EQUAL
15285: IFFALSE 15302
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15287: LD_ADDR_EXP 11
15291: PUSH
15292: LD_EXP 11
15296: PPUSH
15297: CALL 80099 0 1
15301: ST_TO_ADDR
// end ;
15302: PPOPN 4
15304: END
// on BuildingComplete ( b ) do var i , tmp ;
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
// begin if GetSide ( b ) = 3 then
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL_OW 255
15318: PUSH
15319: LD_INT 3
15321: EQUAL
15322: IFFALSE 15419
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15324: LD_ADDR_EXP 35
15328: PUSH
15329: LD_EXP 35
15333: PPUSH
15334: LD_INT 1
15336: PPUSH
15337: CALL_OW 3
15341: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 266
15351: PUSH
15352: LD_INT 4
15354: EQUAL
15355: IFFALSE 15366
// ComUpgrade ( b ) ;
15357: LD_VAR 0 1
15361: PPUSH
15362: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15366: LD_VAR 0 1
15370: PPUSH
15371: CALL_OW 266
15375: PUSH
15376: LD_INT 32
15378: PUSH
15379: LD_INT 33
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: IN
15386: IFFALSE 15419
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15388: LD_VAR 0 1
15392: PPUSH
15393: LD_INT 46
15395: PUSH
15396: LD_INT 45
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 1
15405: PPUSH
15406: LD_INT 2
15408: PPUSH
15409: CALL_OW 12
15413: ARRAY
15414: PPUSH
15415: CALL_OW 208
// end ; end ; end_of_file
15419: PPOPN 3
15421: END
// export function Action ; var i , tmp , un , inUnit ; begin
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
// Video ( true ) ;
15429: LD_INT 1
15431: PPUSH
15432: CALL 78710 0 1
// invincibleMode := true ;
15436: LD_ADDR_EXP 5
15440: PUSH
15441: LD_INT 1
15443: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15444: LD_INT 50
15446: PPUSH
15447: LD_INT 12
15449: PPUSH
15450: LD_INT 1
15452: PPUSH
15453: LD_INT 56
15455: NEG
15456: PPUSH
15457: CALL 78624 0 4
// CenterOnXY ( 50 , 12 ) ;
15461: LD_INT 50
15463: PPUSH
15464: LD_INT 12
15466: PPUSH
15467: CALL_OW 84
// wait ( 0 0$3 ) ;
15471: LD_INT 105
15473: PPUSH
15474: CALL_OW 67
// PrepareStartRussianAttack ;
15478: CALL 9999 0 0
// CenterOnXY ( 66 , 47 ) ;
15482: LD_INT 66
15484: PPUSH
15485: LD_INT 47
15487: PPUSH
15488: CALL_OW 84
// wait ( 0 0$5 ) ;
15492: LD_INT 175
15494: PPUSH
15495: CALL_OW 67
// case gammaCommander of 1 :
15499: LD_EXP 13
15503: PUSH
15504: LD_INT 1
15506: DOUBLE
15507: EQUAL
15508: IFTRUE 15512
15510: GO 15527
15512: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15513: LD_EXP 16
15517: PPUSH
15518: LD_STRING D1-Don-1
15520: PPUSH
15521: CALL_OW 88
15525: GO 15574
15527: LD_INT 2
15529: DOUBLE
15530: EQUAL
15531: IFTRUE 15535
15533: GO 15550
15535: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15536: LD_EXP 15
15540: PPUSH
15541: LD_STRING D1-Brown-1
15543: PPUSH
15544: CALL_OW 88
15548: GO 15574
15550: LD_INT 3
15552: DOUBLE
15553: EQUAL
15554: IFTRUE 15558
15556: GO 15573
15558: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15559: LD_EXP 25
15563: PPUSH
15564: LD_STRING D1-VanH-1
15566: PPUSH
15567: CALL_OW 88
15571: GO 15574
15573: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15574: LD_ADDR_VAR 0 3
15578: PUSH
15579: LD_INT 22
15581: PUSH
15582: LD_INT 1
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 33
15591: PUSH
15592: LD_INT 2
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 61
15601: PUSH
15602: EMPTY
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: PPUSH
15610: CALL_OW 69
15614: ST_TO_ADDR
// if tmp then
15615: LD_VAR 0 3
15619: IFFALSE 15636
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15621: LD_VAR 0 3
15625: PPUSH
15626: LD_INT 74
15628: PPUSH
15629: LD_INT 44
15631: PPUSH
15632: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15636: LD_ADDR_VAR 0 3
15640: PUSH
15641: LD_INT 22
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 25
15653: PUSH
15654: LD_INT 1
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: PUSH
15670: LD_EXP 16
15674: PUSH
15675: LD_EXP 15
15679: PUSH
15680: LD_EXP 25
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: DIFF
15690: ST_TO_ADDR
// if tmp then
15691: LD_VAR 0 3
15695: IFFALSE 15773
// for i in tmp do
15697: LD_ADDR_VAR 0 2
15701: PUSH
15702: LD_VAR 0 3
15706: PUSH
15707: FOR_IN
15708: IFFALSE 15771
// begin inUnit := IsInUnit ( i ) ;
15710: LD_ADDR_VAR 0 5
15714: PUSH
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 310
15724: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15725: LD_VAR 0 5
15729: PUSH
15730: LD_VAR 0 5
15734: PPUSH
15735: CALL_OW 266
15739: PUSH
15740: LD_INT 32
15742: PUSH
15743: LD_INT 31
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: IN
15750: AND
15751: IFFALSE 15769
// tmp := tmp diff i ;
15753: LD_ADDR_VAR 0 3
15757: PUSH
15758: LD_VAR 0 3
15762: PUSH
15763: LD_VAR 0 2
15767: DIFF
15768: ST_TO_ADDR
// end ;
15769: GO 15707
15771: POP
15772: POP
// if tmp then
15773: LD_VAR 0 3
15777: IFFALSE 15867
// begin ComExitAll ( tmp ) ;
15779: LD_VAR 0 3
15783: PPUSH
15784: CALL 79219 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15788: LD_VAR 0 3
15792: PPUSH
15793: LD_INT 74
15795: PPUSH
15796: LD_INT 44
15798: PPUSH
15799: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15803: LD_ADDR_VAR 0 3
15807: PUSH
15808: LD_INT 22
15810: PUSH
15811: LD_INT 1
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 25
15820: PUSH
15821: LD_INT 4
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PPUSH
15832: CALL_OW 69
15836: ST_TO_ADDR
// if tmp then
15837: LD_VAR 0 3
15841: IFFALSE 15867
// begin ComExitAll ( tmp ) ;
15843: LD_VAR 0 3
15847: PPUSH
15848: CALL 79219 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 66
15859: PPUSH
15860: LD_INT 28
15862: PPUSH
15863: CALL_OW 171
// end ; end ; game_speed := 4 ;
15867: LD_ADDR_OWVAR 65
15871: PUSH
15872: LD_INT 4
15874: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15875: LD_INT 70
15877: PPUSH
15878: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15882: LD_EXP 29
15886: PPUSH
15887: LD_STRING D1-Har-1
15889: PPUSH
15890: CALL_OW 94
// case gammaCommander of 1 :
15894: LD_EXP 13
15898: PUSH
15899: LD_INT 1
15901: DOUBLE
15902: EQUAL
15903: IFTRUE 15907
15905: GO 15922
15907: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15908: LD_EXP 16
15912: PPUSH
15913: LD_STRING D1-Don-2
15915: PPUSH
15916: CALL_OW 88
15920: GO 15969
15922: LD_INT 2
15924: DOUBLE
15925: EQUAL
15926: IFTRUE 15930
15928: GO 15945
15930: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15931: LD_EXP 15
15935: PPUSH
15936: LD_STRING D1-Brown-2
15938: PPUSH
15939: CALL_OW 88
15943: GO 15969
15945: LD_INT 3
15947: DOUBLE
15948: EQUAL
15949: IFTRUE 15953
15951: GO 15968
15953: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15954: LD_EXP 25
15958: PPUSH
15959: LD_STRING D1-VanH-2
15961: PPUSH
15962: CALL_OW 88
15966: GO 15969
15968: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15969: LD_EXP 29
15973: PPUSH
15974: LD_STRING D1-Har-2
15976: PPUSH
15977: CALL_OW 94
// invincibleMode := false ;
15981: LD_ADDR_EXP 5
15985: PUSH
15986: LD_INT 0
15988: ST_TO_ADDR
// Video ( false ) ;
15989: LD_INT 0
15991: PPUSH
15992: CALL 78710 0 1
// ChangeMissionObjectives ( M1 ) ;
15996: LD_STRING M1
15998: PPUSH
15999: CALL_OW 337
// SaveForQuickRestart ;
16003: CALL_OW 22
// wait ( 2 2$30 ) ;
16007: LD_INT 5250
16009: PPUSH
16010: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
16014: LD_INT 1
16016: PPUSH
16017: CALL 12982 0 1
// wait ( 4 4$30 ) ;
16021: LD_INT 9450
16023: PPUSH
16024: CALL_OW 67
// if Difficulty > 1 then
16028: LD_OWVAR 67
16032: PUSH
16033: LD_INT 1
16035: GREATER
16036: IFFALSE 16045
// PrepareRussianAttack ( 2 ) ;
16038: LD_INT 2
16040: PPUSH
16041: CALL 12982 0 1
// if Difficulty > 2 then
16045: LD_OWVAR 67
16049: PUSH
16050: LD_INT 2
16052: GREATER
16053: IFFALSE 16212
// begin for i := 1 to 4 do
16055: LD_ADDR_VAR 0 2
16059: PUSH
16060: DOUBLE
16061: LD_INT 1
16063: DEC
16064: ST_TO_ADDR
16065: LD_INT 4
16067: PUSH
16068: FOR_TO
16069: IFFALSE 16154
// begin uc_side := 6 ;
16071: LD_ADDR_OWVAR 20
16075: PUSH
16076: LD_INT 6
16078: ST_TO_ADDR
// uc_nation := 3 ;
16079: LD_ADDR_OWVAR 21
16083: PUSH
16084: LD_INT 3
16086: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
16087: LD_INT 0
16089: PPUSH
16090: LD_INT 7
16092: PPUSH
16093: CALL_OW 381
// un := CreateHuman ;
16097: LD_ADDR_VAR 0 4
16101: PUSH
16102: CALL_OW 44
16106: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16107: LD_VAR 0 4
16111: PPUSH
16112: LD_INT 122
16114: PPUSH
16115: LD_INT 89
16117: PPUSH
16118: LD_INT 3
16120: PPUSH
16121: LD_INT 0
16123: PPUSH
16124: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16128: LD_VAR 0 4
16132: PPUSH
16133: LD_INT 88
16135: PPUSH
16136: LD_INT 42
16138: PPUSH
16139: CALL_OW 114
// AddComHold ( un ) ;
16143: LD_VAR 0 4
16147: PPUSH
16148: CALL_OW 200
// end ;
16152: GO 16068
16154: POP
16155: POP
// PrepareScientist ( false , 6 ) ;
16156: LD_INT 0
16158: PPUSH
16159: LD_INT 6
16161: PPUSH
16162: CALL_OW 384
// un := CreateHuman ;
16166: LD_ADDR_VAR 0 4
16170: PUSH
16171: CALL_OW 44
16175: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16176: LD_VAR 0 4
16180: PPUSH
16181: LD_INT 122
16183: PPUSH
16184: LD_INT 89
16186: PPUSH
16187: LD_INT 3
16189: PPUSH
16190: LD_INT 0
16192: PPUSH
16193: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16197: LD_VAR 0 4
16201: PPUSH
16202: LD_INT 91
16204: PPUSH
16205: LD_INT 48
16207: PPUSH
16208: CALL_OW 111
// end ; end ;
16212: LD_VAR 0 1
16216: RET
// every 0 0$1 trigger invincibleMode do var i ;
16217: LD_EXP 5
16221: IFFALSE 16318
16223: GO 16225
16225: DISABLE
16226: LD_INT 0
16228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16229: LD_ADDR_VAR 0 1
16233: PUSH
16234: LD_INT 22
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 2
16246: PUSH
16247: LD_INT 21
16249: PUSH
16250: LD_INT 3
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 3
16274: PUSH
16275: LD_INT 24
16277: PUSH
16278: LD_INT 900
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: PPUSH
16294: CALL_OW 69
16298: PUSH
16299: FOR_IN
16300: IFFALSE 16316
// SetLives ( i , 900 ) ;
16302: LD_VAR 0 1
16306: PPUSH
16307: LD_INT 900
16309: PPUSH
16310: CALL_OW 234
16314: GO 16299
16316: POP
16317: POP
// end ;
16318: PPOPN 1
16320: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16321: LD_OWVAR 1
16325: PUSH
16326: LD_INT 14700
16328: GREATER
16329: IFFALSE 17939
16331: GO 16333
16333: DISABLE
16334: LD_INT 0
16336: PPUSH
16337: PPUSH
// begin PrepareSupportFromDelta ;
16338: CALL 4052 0 0
// deltaSupport := true ;
16342: LD_ADDR_EXP 6
16346: PUSH
16347: LD_INT 1
16349: ST_TO_ADDR
// dialog := false ;
16350: LD_ADDR_VAR 0 1
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16358: LD_EXP 21
16362: PPUSH
16363: CALL_OW 302
16367: IFFALSE 16389
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16369: LD_ADDR_VAR 0 1
16373: PUSH
16374: LD_EXP 21
16378: PPUSH
16379: LD_STRING D2-Glad-1
16381: PPUSH
16382: CALL_OW 88
16386: ST_TO_ADDR
16387: GO 16471
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16389: LD_ADDR_VAR 0 1
16393: PUSH
16394: LD_INT 22
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 120
16406: PUSH
16407: LD_INT 107
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 21
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 23
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PPUSH
16440: CALL_OW 69
16444: PUSH
16445: LD_EXP 27
16449: PUSH
16450: LD_EXP 26
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: DIFF
16459: PPUSH
16460: LD_STRING D2-Sol1-1
16462: PPUSH
16463: LD_STRING D2-FSol1-1
16465: PPUSH
16466: CALL 20208 0 3
16470: ST_TO_ADDR
// if dialog then
16471: LD_VAR 0 1
16475: IFFALSE 16576
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16477: LD_EXP 16
16481: PPUSH
16482: CALL_OW 302
16486: PUSH
16487: LD_EXP 13
16491: PUSH
16492: LD_INT 1
16494: EQUAL
16495: AND
16496: IFFALSE 16510
// Say ( Donaldson , D2-Don-1 ) ;
16498: LD_EXP 16
16502: PPUSH
16503: LD_STRING D2-Don-1
16505: PPUSH
16506: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16510: LD_EXP 15
16514: PPUSH
16515: CALL_OW 302
16519: PUSH
16520: LD_EXP 13
16524: PUSH
16525: LD_INT 2
16527: EQUAL
16528: AND
16529: IFFALSE 16543
// Say ( Brown , D2-Brown-1 ) ;
16531: LD_EXP 15
16535: PPUSH
16536: LD_STRING D2-Brown-1
16538: PPUSH
16539: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16543: LD_EXP 25
16547: PPUSH
16548: CALL_OW 302
16552: PUSH
16553: LD_EXP 13
16557: PUSH
16558: LD_INT 3
16560: EQUAL
16561: AND
16562: IFFALSE 16576
// Say ( Houten , D2-VanH-1 ) ;
16564: LD_EXP 25
16568: PPUSH
16569: LD_STRING D2-VanH-1
16571: PPUSH
16572: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16576: LD_INT 3
16578: PPUSH
16579: CALL 12982 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16583: LD_STRING 07_time
16585: PPUSH
16586: LD_INT 18900
16588: PPUSH
16589: CALL_OW 30
16593: PUSH
16594: LD_INT 3
16596: DIV
16597: PPUSH
16598: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16602: LD_INT 34
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: CALL_OW 321
16612: PUSH
16613: LD_INT 2
16615: EQUAL
16616: IFFALSE 16625
// SetAchievement ( ACH_HEAVYGUN ) ;
16618: LD_STRING ACH_HEAVYGUN
16620: PPUSH
16621: CALL_OW 543
// PrepareMacmillanSquad ;
16625: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16629: LD_INT 35
16631: PPUSH
16632: CALL_OW 67
// DialogueOn ;
16636: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16640: LD_EXP 14
16644: PPUSH
16645: CALL_OW 87
// dwait ( 0 0$2 ) ;
16649: LD_INT 70
16651: PPUSH
16652: CALL_OW 68
// DialogueOff ;
16656: CALL_OW 7
// wait ( 0 0$10 ) ;
16660: LD_INT 350
16662: PPUSH
16663: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16667: LD_INT 1
16669: PPUSH
16670: CALL_OW 427
// p := 0 ;
16674: LD_ADDR_VAR 0 2
16678: PUSH
16679: LD_INT 0
16681: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16682: LD_INT 35
16684: PPUSH
16685: CALL_OW 67
// p := Inc ( p ) ;
16689: LD_ADDR_VAR 0 2
16693: PUSH
16694: LD_VAR 0 2
16698: PPUSH
16699: CALL 80099 0 1
16703: ST_TO_ADDR
// if p > 300 then
16704: LD_VAR 0 2
16708: PUSH
16709: LD_INT 300
16711: GREATER
16712: IFFALSE 16716
// exit ;
16714: GO 17939
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16716: LD_EXP 14
16720: PPUSH
16721: LD_INT 15
16723: PPUSH
16724: CALL_OW 308
16728: PUSH
16729: LD_EXP 14
16733: PPUSH
16734: CALL_OW 310
16738: PPUSH
16739: LD_INT 15
16741: PPUSH
16742: CALL_OW 308
16746: OR
16747: PUSH
16748: LD_EXP 14
16752: PPUSH
16753: LD_EXP 27
16757: PPUSH
16758: CALL_OW 296
16762: PUSH
16763: LD_INT 10
16765: LESS
16766: OR
16767: PUSH
16768: LD_INT 22
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 120
16783: PUSH
16784: LD_INT 106
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 120
16793: PUSH
16794: LD_INT 107
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 91
16808: PUSH
16809: LD_EXP 14
16813: PUSH
16814: LD_INT 12
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: PPUSH
16827: CALL_OW 69
16831: OR
16832: IFFALSE 16682
// DialogueOn ;
16834: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16838: LD_EXP 14
16842: PPUSH
16843: LD_STRING D3-JMM-1
16845: PPUSH
16846: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16850: LD_EXP 16
16854: PPUSH
16855: CALL_OW 302
16859: PUSH
16860: LD_EXP 13
16864: PUSH
16865: LD_INT 1
16867: EQUAL
16868: AND
16869: IFFALSE 16885
// Say ( Donaldson , D3-Don-1 ) else
16871: LD_EXP 16
16875: PPUSH
16876: LD_STRING D3-Don-1
16878: PPUSH
16879: CALL_OW 88
16883: GO 16981
// begin if gammaCommander = 1 then
16885: LD_EXP 13
16889: PUSH
16890: LD_INT 1
16892: EQUAL
16893: IFFALSE 16981
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16895: LD_INT 22
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 21
16907: PUSH
16908: LD_INT 1
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 23
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 120
16927: PUSH
16928: LD_INT 106
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 26
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: PPUSH
16952: CALL_OW 69
16956: PPUSH
16957: LD_STRING D3-Sol1-1
16959: PPUSH
16960: LD_STRING 
16962: PPUSH
16963: CALL 20208 0 3
16967: IFFALSE 16981
// Say ( JMM , D3-JMM-2 ) ;
16969: LD_EXP 14
16973: PPUSH
16974: LD_STRING D3-JMM-2
16976: PPUSH
16977: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16981: LD_EXP 15
16985: PPUSH
16986: CALL_OW 302
16990: PUSH
16991: LD_EXP 13
16995: PUSH
16996: LD_INT 2
16998: EQUAL
16999: AND
17000: IFFALSE 17016
// Say ( Brown , D3-Brown-1 ) else
17002: LD_EXP 15
17006: PPUSH
17007: LD_STRING D3-Brown-1
17009: PPUSH
17010: CALL_OW 88
17014: GO 17112
// begin if gammaCommander = 2 then
17016: LD_EXP 13
17020: PUSH
17021: LD_INT 2
17023: EQUAL
17024: IFFALSE 17112
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
17026: LD_INT 22
17028: PUSH
17029: LD_INT 1
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 21
17038: PUSH
17039: LD_INT 1
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 23
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 120
17058: PUSH
17059: LD_INT 106
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 26
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: PPUSH
17083: CALL_OW 69
17087: PPUSH
17088: LD_STRING D3-Sol1-1a
17090: PPUSH
17091: LD_STRING 
17093: PPUSH
17094: CALL 20208 0 3
17098: IFFALSE 17112
// Say ( JMM , D3-JMM-2 ) ;
17100: LD_EXP 14
17104: PPUSH
17105: LD_STRING D3-JMM-2
17107: PPUSH
17108: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17112: LD_EXP 25
17116: PPUSH
17117: CALL_OW 302
17121: PUSH
17122: LD_EXP 13
17126: PUSH
17127: LD_INT 3
17129: EQUAL
17130: AND
17131: IFFALSE 17147
// Say ( Houten , D3-VanH-1 ) else
17133: LD_EXP 25
17137: PPUSH
17138: LD_STRING D3-VanH-1
17140: PPUSH
17141: CALL_OW 88
17145: GO 17243
// begin if gammaCommander = 3 then
17147: LD_EXP 13
17151: PUSH
17152: LD_INT 3
17154: EQUAL
17155: IFFALSE 17243
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17157: LD_INT 22
17159: PUSH
17160: LD_INT 1
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 21
17169: PUSH
17170: LD_INT 1
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 23
17179: PUSH
17180: LD_INT 1
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 120
17189: PUSH
17190: LD_INT 106
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 26
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PPUSH
17214: CALL_OW 69
17218: PPUSH
17219: LD_STRING D3-Sol1-1b
17221: PPUSH
17222: LD_STRING 
17224: PPUSH
17225: CALL 20208 0 3
17229: IFFALSE 17243
// Say ( JMM , D3-JMM-2 ) ;
17231: LD_EXP 14
17235: PPUSH
17236: LD_STRING D3-JMM-2
17238: PPUSH
17239: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17243: LD_EXP 27
17247: PPUSH
17248: CALL_OW 302
17252: IFFALSE 17280
// begin Say ( Joan , D3a-Joan-1 ) ;
17254: LD_EXP 27
17258: PPUSH
17259: LD_STRING D3a-Joan-1
17261: PPUSH
17262: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17266: LD_EXP 14
17270: PPUSH
17271: LD_STRING D3a-JMM-1
17273: PPUSH
17274: CALL_OW 88
// end else
17278: GO 17714
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17280: LD_STRING 06_JoanStatus_1
17282: PPUSH
17283: LD_INT 0
17285: PPUSH
17286: CALL_OW 30
17290: PUSH
17291: LD_INT 1
17293: EQUAL
17294: IFFALSE 17714
// begin Say ( JMM , D3b-JMM-1 ) ;
17296: LD_EXP 14
17300: PPUSH
17301: LD_STRING D3b-JMM-1
17303: PPUSH
17304: CALL_OW 88
// dialog := false ;
17308: LD_ADDR_VAR 0 1
17312: PUSH
17313: LD_INT 0
17315: ST_TO_ADDR
// if gammaCommander = 1 then
17316: LD_EXP 13
17320: PUSH
17321: LD_INT 1
17323: EQUAL
17324: IFFALSE 17435
// if IsOK ( Donaldson ) then
17326: LD_EXP 16
17330: PPUSH
17331: CALL_OW 302
17335: IFFALSE 17357
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17337: LD_ADDR_VAR 0 1
17341: PUSH
17342: LD_EXP 16
17346: PPUSH
17347: LD_STRING D3b-Don-1
17349: PPUSH
17350: CALL_OW 88
17354: ST_TO_ADDR
17355: GO 17435
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17357: LD_ADDR_VAR 0 1
17361: PUSH
17362: LD_INT 22
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 21
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 23
17384: PUSH
17385: LD_INT 1
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 120
17394: PUSH
17395: LD_INT 106
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 26
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: PPUSH
17419: CALL_OW 69
17423: PPUSH
17424: LD_STRING D3b-Sol1-1
17426: PPUSH
17427: LD_STRING 
17429: PPUSH
17430: CALL 20208 0 3
17434: ST_TO_ADDR
// if gammaCommander = 2 then
17435: LD_EXP 13
17439: PUSH
17440: LD_INT 2
17442: EQUAL
17443: IFFALSE 17554
// if IsOk ( Brown ) then
17445: LD_EXP 15
17449: PPUSH
17450: CALL_OW 302
17454: IFFALSE 17476
// dialog := Say ( Brown , D3b-Brown-1 ) else
17456: LD_ADDR_VAR 0 1
17460: PUSH
17461: LD_EXP 15
17465: PPUSH
17466: LD_STRING D3b-Brown-1
17468: PPUSH
17469: CALL_OW 88
17473: ST_TO_ADDR
17474: GO 17554
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_INT 22
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 21
17493: PUSH
17494: LD_INT 1
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 23
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 120
17513: PUSH
17514: LD_INT 106
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PPUSH
17538: CALL_OW 69
17542: PPUSH
17543: LD_STRING D3b-Sol1-1
17545: PPUSH
17546: LD_STRING 
17548: PPUSH
17549: CALL 20208 0 3
17553: ST_TO_ADDR
// if gammaCommander = 3 then
17554: LD_EXP 13
17558: PUSH
17559: LD_INT 3
17561: EQUAL
17562: IFFALSE 17673
// if IsOk ( Houten ) then
17564: LD_EXP 25
17568: PPUSH
17569: CALL_OW 302
17573: IFFALSE 17595
// dialog := Say ( Houten , D3b-VanH-1 ) else
17575: LD_ADDR_VAR 0 1
17579: PUSH
17580: LD_EXP 25
17584: PPUSH
17585: LD_STRING D3b-VanH-1
17587: PPUSH
17588: CALL_OW 88
17592: ST_TO_ADDR
17593: GO 17673
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17595: LD_ADDR_VAR 0 1
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_INT 1
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 1
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 23
17622: PUSH
17623: LD_INT 1
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 120
17632: PUSH
17633: LD_INT 106
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 26
17642: PUSH
17643: LD_INT 1
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 69
17661: PPUSH
17662: LD_STRING D3b-Sol1-1
17664: PPUSH
17665: LD_STRING 
17667: PPUSH
17668: CALL 20208 0 3
17672: ST_TO_ADDR
// if dialog then
17673: LD_VAR 0 1
17677: IFFALSE 17714
// begin Say ( JMM , D3b-JMM-2 ) ;
17679: LD_EXP 14
17683: PPUSH
17684: LD_STRING D3b-JMM-2
17686: PPUSH
17687: CALL_OW 88
// if IsOK ( Lisa ) then
17691: LD_EXP 19
17695: PPUSH
17696: CALL_OW 302
17700: IFFALSE 17714
// Say ( Lisa , D3b-Lisa-2 ) ;
17702: LD_EXP 19
17706: PPUSH
17707: LD_STRING D3b-Lisa-2
17709: PPUSH
17710: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17714: LD_EXP 7
17718: NOT
17719: IFFALSE 17727
// begin DialogueOff ;
17721: CALL_OW 7
// exit ;
17725: GO 17939
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17727: LD_INT 22
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 23
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: LD_INT 120
17762: PUSH
17763: LD_INT 106
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 120
17772: PUSH
17773: LD_INT 107
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 26
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: PPUSH
17807: LD_STRING DCa-Sol1-1
17809: PPUSH
17810: LD_STRING 
17812: PPUSH
17813: CALL 20208 0 3
17817: IFFALSE 17831
// Say ( JMM , DCb-JMM-1 ) ;
17819: LD_EXP 14
17823: PPUSH
17824: LD_STRING DCb-JMM-1
17826: PPUSH
17827: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17831: LD_INT 22
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 21
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 23
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: LD_INT 120
17866: PUSH
17867: LD_INT 106
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 120
17876: PUSH
17877: LD_INT 107
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 26
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: PPUSH
17906: CALL_OW 69
17910: PPUSH
17911: LD_STRING DCb-Sol1-1
17913: PPUSH
17914: LD_STRING 
17916: PPUSH
17917: CALL 20208 0 3
17921: IFFALSE 17935
// Say ( JMM , DCb-JMM-2 ) ;
17923: LD_EXP 14
17927: PPUSH
17928: LD_STRING DCb-JMM-2
17930: PPUSH
17931: CALL_OW 88
// DialogueOff ;
17935: CALL_OW 7
// end ;
17939: PPOPN 2
17941: END
// export function DialogSeenComputer ( un ) ; begin
17942: LD_INT 0
17944: PPUSH
// if jmmArrival then
17945: LD_EXP 8
17949: IFFALSE 17953
// exit ;
17951: GO 18019
// CenterOnUnits ( un ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17962: LD_INT 22
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 120
17977: PUSH
17978: LD_INT 106
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 120
17987: PUSH
17988: LD_INT 107
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PPUSH
18004: CALL_OW 69
18008: PPUSH
18009: LD_STRING DC-Sol1-1
18011: PPUSH
18012: LD_STRING DC-FSol1-1
18014: PPUSH
18015: CALL 20208 0 3
// end ;
18019: LD_VAR 0 2
18023: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
18024: LD_EXP 8
18028: PUSH
18029: LD_OWVAR 1
18033: PUSH
18034: LD_INT 48300
18036: GREATEREQUAL
18037: AND
18038: PUSH
18039: LD_EXP 14
18043: PPUSH
18044: CALL_OW 302
18048: AND
18049: IFFALSE 18535
18051: GO 18053
18053: DISABLE
// begin wait ( 2 2$00 ) ;
18054: LD_INT 4200
18056: PPUSH
18057: CALL_OW 67
// DialogueOn ;
18061: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18065: LD_EXP 30
18069: PPUSH
18070: LD_STRING D4-Pow-1
18072: PPUSH
18073: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18077: LD_EXP 14
18081: PPUSH
18082: LD_STRING D4-JMM-1
18084: PPUSH
18085: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18089: LD_EXP 30
18093: PPUSH
18094: LD_STRING D4-Pow-2
18096: PPUSH
18097: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18101: LD_EXP 14
18105: PPUSH
18106: LD_STRING D4-JMM-2
18108: PPUSH
18109: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18113: LD_EXP 30
18117: PPUSH
18118: LD_STRING D4-Pow-3
18120: PPUSH
18121: CALL_OW 94
// DialogueOff ;
18125: CALL_OW 7
// wait ( 1 1$00 ) ;
18129: LD_INT 2100
18131: PPUSH
18132: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18136: LD_INT 1
18138: PPUSH
18139: CALL_OW 427
// wait ( 7 7$30 ) ;
18143: LD_INT 15750
18145: PPUSH
18146: CALL_OW 67
// DialogueOn ;
18150: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18154: LD_EXP 30
18158: PPUSH
18159: LD_STRING D4a-Pow-1
18161: PPUSH
18162: CALL_OW 94
// DialogueOff ;
18166: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18170: LD_INT 1
18172: PPUSH
18173: CALL_OW 427
// SikorskiCounter ;
18177: CALL 19992 0 0
// PrepareSikorsky ;
18181: CALL 6238 0 0
// CenterNowOnUnits ( Sikorski ) ;
18185: LD_EXP 28
18189: PPUSH
18190: CALL_OW 87
// DialogueOn ;
18194: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18198: LD_EXP 28
18202: PPUSH
18203: LD_STRING D5-Sik-1
18205: PPUSH
18206: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18210: LD_INT 11
18212: PPUSH
18213: LD_INT 22
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PPUSH
18223: CALL_OW 70
18227: PUSH
18228: LD_INT 1
18230: GREATER
18231: PUSH
18232: LD_INT 28
18234: PPUSH
18235: CALL_OW 302
18239: NOT
18240: OR
18241: PUSH
18242: LD_INT 28
18244: PPUSH
18245: CALL_OW 255
18249: PUSH
18250: LD_INT 1
18252: EQUAL
18253: OR
18254: IFFALSE 18306
// begin Say ( JMM , D5-JMM-1 ) ;
18256: LD_EXP 14
18260: PPUSH
18261: LD_STRING D5-JMM-1
18263: PPUSH
18264: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18268: LD_EXP 28
18272: PPUSH
18273: LD_STRING D7a-Sik-1
18275: PPUSH
18276: CALL_OW 88
// DialogueOff ;
18280: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18284: LD_STRING M2
18286: PPUSH
18287: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18291: LD_INT 1
18293: PPUSH
18294: CALL_OW 427
// SikorskiAttack ;
18298: CALL 7861 0 0
// exit ;
18302: GO 18535
// end else
18304: GO 18351
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18306: LD_INT 15
18308: PPUSH
18309: LD_INT 81
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PPUSH
18319: CALL_OW 70
18323: IFFALSE 18339
// Say ( JMM , D5-JMM-1b ) else
18325: LD_EXP 14
18329: PPUSH
18330: LD_STRING D5-JMM-1b
18332: PPUSH
18333: CALL_OW 88
18337: GO 18351
// Say ( JMM , D5-JMM-1a ) ;
18339: LD_EXP 14
18343: PPUSH
18344: LD_STRING D5-JMM-1a
18346: PPUSH
18347: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18351: LD_EXP 28
18355: PPUSH
18356: LD_STRING D5-Sik-2
18358: PPUSH
18359: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18363: LD_STRING QSikorski
18365: PPUSH
18366: CALL_OW 97
18370: PUSH
18371: LD_INT 1
18373: DOUBLE
18374: EQUAL
18375: IFTRUE 18379
18377: GO 18402
18379: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18380: LD_EXP 28
18384: PPUSH
18385: LD_STRING D5a-Sik-1
18387: PPUSH
18388: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18392: LD_ADDR_EXP 4
18396: PUSH
18397: LD_INT 2100
18399: ST_TO_ADDR
// end ; 2 :
18400: GO 18489
18402: LD_INT 2
18404: DOUBLE
18405: EQUAL
18406: IFTRUE 18410
18408: GO 18433
18410: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18411: LD_EXP 28
18415: PPUSH
18416: LD_STRING D5b-Sik-1
18418: PPUSH
18419: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18423: LD_ADDR_EXP 4
18427: PUSH
18428: LD_INT 10500
18430: ST_TO_ADDR
// end ; 3 :
18431: GO 18489
18433: LD_INT 3
18435: DOUBLE
18436: EQUAL
18437: IFTRUE 18441
18439: GO 18488
18441: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18442: LD_EXP 28
18446: PPUSH
18447: LD_STRING D5c-Sik-1
18449: PPUSH
18450: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18454: LD_EXP 14
18458: PPUSH
18459: LD_STRING D5c-JMM-1
18461: PPUSH
18462: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18466: LD_EXP 28
18470: PPUSH
18471: LD_STRING D5c-Sik-2
18473: PPUSH
18474: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18478: LD_ADDR_EXP 4
18482: PUSH
18483: LD_INT 10500
18485: ST_TO_ADDR
// end ; end ;
18486: GO 18489
18488: POP
// DialogueOff ;
18489: CALL_OW 7
// SikorskiWaitCounter ;
18493: CALL 20055 0 0
// DialogueOn ;
18497: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18501: LD_EXP 28
18505: PPUSH
18506: LD_STRING D6-Sik-1
18508: PPUSH
18509: CALL_OW 88
// DialogueOff ;
18513: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18517: LD_STRING M2
18519: PPUSH
18520: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18524: LD_INT 1
18526: PPUSH
18527: CALL_OW 427
// SikorskiAttack ;
18531: CALL 7861 0 0
// end ;
18535: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18536: LD_INT 11
18538: PPUSH
18539: LD_INT 22
18541: PUSH
18542: LD_INT 4
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 70
18553: PUSH
18554: LD_INT 2
18556: GREATER
18557: IFFALSE 18750
18559: GO 18561
18561: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18562: LD_EXP 28
18566: PPUSH
18567: LD_STRING D7-Sik-1
18569: PPUSH
18570: CALL_OW 88
// wait ( 0 0$10 ) ;
18574: LD_INT 350
18576: PPUSH
18577: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18581: LD_EXP 14
18585: PPUSH
18586: LD_INT 11
18588: PPUSH
18589: CALL_OW 308
18593: PUSH
18594: LD_EXP 14
18598: PPUSH
18599: CALL_OW 310
18603: PPUSH
18604: LD_INT 11
18606: PPUSH
18607: CALL_OW 308
18611: OR
18612: IFFALSE 18636
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18614: LD_EXP 28
18618: PPUSH
18619: LD_STRING D7a-Sik-1
18621: PPUSH
18622: CALL_OW 88
// sikorskiStatus := 1 ;
18626: LD_ADDR_EXP 9
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// end else
18634: GO 18656
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18636: LD_EXP 28
18640: PPUSH
18641: LD_STRING D7b-Sik-1
18643: PPUSH
18644: CALL_OW 88
// sikorskiStatus := 0 ;
18648: LD_ADDR_EXP 9
18652: PUSH
18653: LD_INT 0
18655: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18656: LD_INT 1575
18658: PPUSH
18659: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18663: LD_EXP 14
18667: PPUSH
18668: LD_INT 11
18670: PPUSH
18671: CALL_OW 308
18675: PUSH
18676: LD_EXP 14
18680: PPUSH
18681: CALL_OW 310
18685: PPUSH
18686: LD_INT 11
18688: PPUSH
18689: CALL_OW 308
18693: OR
18694: PUSH
18695: LD_EXP 14
18699: PPUSH
18700: CALL_OW 302
18704: NOT
18705: OR
18706: IFFALSE 18730
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18708: LD_EXP 28
18712: PPUSH
18713: LD_STRING D7a-Sik-1
18715: PPUSH
18716: CALL_OW 88
// sikorskiStatus := 1 ;
18720: LD_ADDR_EXP 9
18724: PUSH
18725: LD_INT 1
18727: ST_TO_ADDR
// end else
18728: GO 18750
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18730: LD_EXP 28
18734: PPUSH
18735: LD_STRING D7b-Sik-1
18737: PPUSH
18738: CALL_OW 88
// sikorskiStatus := 0 ;
18742: LD_ADDR_EXP 9
18746: PUSH
18747: LD_INT 0
18749: ST_TO_ADDR
// end ; end ;
18750: END
// export function SikorskiKilledInAction ; begin
18751: LD_INT 0
18753: PPUSH
// wait ( 0 0$2 ) ;
18754: LD_INT 70
18756: PPUSH
18757: CALL_OW 67
// DialogueOn ;
18761: CALL_OW 6
// dwait ( 0 0$1 ) ;
18765: LD_INT 35
18767: PPUSH
18768: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18772: LD_EXP 30
18776: PPUSH
18777: LD_STRING D8b-Pow-1
18779: PPUSH
18780: CALL_OW 94
// YouLost ( Dismissed ) ;
18784: LD_STRING Dismissed
18786: PPUSH
18787: CALL_OW 104
// DialogueOff ;
18791: CALL_OW 7
// end ;
18795: LD_VAR 0 1
18799: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18800: LD_EXP 8
18804: PUSH
18805: LD_INT 28
18807: PPUSH
18808: CALL_OW 301
18812: AND
18813: PUSH
18814: LD_EXP 32
18818: PPUSH
18819: CALL_OW 301
18823: AND
18824: PUSH
18825: LD_INT 22
18827: PUSH
18828: LD_INT 3
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 50
18837: PUSH
18838: EMPTY
18839: LIST
18840: PUSH
18841: LD_INT 30
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: PUSH
18861: LD_INT 0
18863: EQUAL
18864: AND
18865: IFFALSE 19989
18867: GO 18869
18869: DISABLE
18870: LD_INT 0
18872: PPUSH
18873: PPUSH
18874: PPUSH
// begin Video ( true ) ;
18875: LD_INT 1
18877: PPUSH
18878: CALL 78710 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18882: LD_INT 104
18884: PPUSH
18885: LD_INT 108
18887: PPUSH
18888: LD_INT 1
18890: PPUSH
18891: LD_INT 36
18893: NEG
18894: PPUSH
18895: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18899: LD_INT 104
18901: PPUSH
18902: LD_INT 108
18904: PPUSH
18905: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18909: LD_ADDR_VAR 0 2
18913: PUSH
18914: LD_INT 22
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 3
18936: PUSH
18937: LD_INT 24
18939: PUSH
18940: LD_INT 249
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: PPUSH
18956: CALL_OW 69
18960: ST_TO_ADDR
// if tmp then
18961: LD_VAR 0 2
18965: IFFALSE 18996
// for i in tmp do
18967: LD_ADDR_VAR 0 1
18971: PUSH
18972: LD_VAR 0 2
18976: PUSH
18977: FOR_IN
18978: IFFALSE 18994
// SetLives ( i , 249 ) ;
18980: LD_VAR 0 1
18984: PPUSH
18985: LD_INT 249
18987: PPUSH
18988: CALL_OW 234
18992: GO 18977
18994: POP
18995: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18996: LD_ADDR_VAR 0 1
19000: PUSH
19001: LD_INT 22
19003: PUSH
19004: LD_INT 3
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 21
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PPUSH
19025: CALL_OW 69
19029: PUSH
19030: FOR_IN
19031: IFFALSE 19074
// begin ComExit ( i ) ;
19033: LD_VAR 0 1
19037: PPUSH
19038: CALL 79136 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
19042: LD_VAR 0 1
19046: PPUSH
19047: LD_INT 131
19049: PPUSH
19050: LD_INT 127
19052: PPUSH
19053: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
19057: LD_VAR 0 1
19061: PPUSH
19062: LD_INT 141
19064: PPUSH
19065: LD_INT 147
19067: PPUSH
19068: CALL_OW 171
// end ;
19072: GO 19030
19074: POP
19075: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
19076: LD_INT 81
19078: PUSH
19079: LD_INT 3
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 3
19088: PUSH
19089: LD_INT 21
19091: PUSH
19092: LD_INT 3
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 69
19111: PPUSH
19112: LD_INT 131
19114: PPUSH
19115: LD_INT 127
19117: PPUSH
19118: CALL_OW 174
// wait ( 0 0$08 ) ;
19122: LD_INT 280
19124: PPUSH
19125: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19129: LD_INT 22
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 21
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 23
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 50
19161: PUSH
19162: EMPTY
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: PPUSH
19171: CALL_OW 69
19175: PPUSH
19176: CALL 43149 0 1
19180: PUSH
19181: LD_INT 7
19183: LESS
19184: IFFALSE 19193
// YouLost ( LostVictory ) ;
19186: LD_STRING LostVictory
19188: PPUSH
19189: CALL_OW 104
// DialogueOn ;
19193: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19197: LD_EXP 9
19201: PUSH
19202: LD_INT 1
19204: EQUAL
19205: PUSH
19206: LD_EXP 28
19210: PPUSH
19211: CALL_OW 302
19215: AND
19216: IFFALSE 19230
// Say ( Sikorski , D9-Sik-1 ) ;
19218: LD_EXP 28
19222: PPUSH
19223: LD_STRING D9-Sik-1
19225: PPUSH
19226: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19230: LD_INT 22
19232: PUSH
19233: LD_INT 4
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PPUSH
19240: CALL_OW 69
19244: PUSH
19245: LD_INT 0
19247: EQUAL
19248: PUSH
19249: LD_EXP 3
19253: AND
19254: IFFALSE 19263
// SetAchievement ( ACH_BLITZKRIEG ) ;
19256: LD_STRING ACH_BLITZKRIEG
19258: PPUSH
19259: CALL_OW 543
// if tick <= 45 45$10 then
19263: LD_OWVAR 1
19267: PUSH
19268: LD_INT 94850
19270: LESSEQUAL
19271: IFFALSE 19287
// begin wait ( 3 ) ;
19273: LD_INT 3
19275: PPUSH
19276: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19280: LD_STRING ACH_ASPEED_8
19282: PPUSH
19283: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19287: LD_STRING med1
19289: PPUSH
19290: LD_INT 1
19292: PPUSH
19293: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19297: LD_STRING med2
19299: PPUSH
19300: LD_INT 1
19302: PPUSH
19303: CALL_OW 101
// if sikorskiStatus = 1 then
19307: LD_EXP 9
19311: PUSH
19312: LD_INT 1
19314: EQUAL
19315: IFFALSE 19329
// AddMedal ( perfect , 1 ) else
19317: LD_STRING perfect
19319: PPUSH
19320: LD_INT 1
19322: PPUSH
19323: CALL_OW 101
19327: GO 19340
// AddMedal ( perfect , - 1 ) ;
19329: LD_STRING perfect
19331: PPUSH
19332: LD_INT 1
19334: NEG
19335: PPUSH
19336: CALL_OW 101
// if Difficulty >= 3 then
19340: LD_OWVAR 67
19344: PUSH
19345: LD_INT 3
19347: GREATEREQUAL
19348: IFFALSE 19360
// SetAchievementEX ( ACH_AMER , 8 ) ;
19350: LD_STRING ACH_AMER
19352: PPUSH
19353: LD_INT 8
19355: PPUSH
19356: CALL_OW 564
// GiveMedals ( Main ) ;
19360: LD_STRING Main
19362: PPUSH
19363: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19367: LD_INT 22
19369: PUSH
19370: LD_INT 1
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 23
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 21
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: PPUSH
19402: CALL_OW 69
19406: PPUSH
19407: CALL_OW 43
// prefix := 08_ ;
19411: LD_ADDR_VAR 0 3
19415: PUSH
19416: LD_STRING 08_
19418: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19419: LD_EXP 14
19423: PPUSH
19424: LD_VAR 0 3
19428: PUSH
19429: LD_STRING JMM
19431: STR
19432: PPUSH
19433: CALL_OW 38
// if IsLive ( Brown ) then
19437: LD_EXP 15
19441: PPUSH
19442: CALL_OW 300
19446: IFFALSE 19466
// SaveCharacters ( Brown , prefix & Brown ) ;
19448: LD_EXP 15
19452: PPUSH
19453: LD_VAR 0 3
19457: PUSH
19458: LD_STRING Brown
19460: STR
19461: PPUSH
19462: CALL_OW 38
// if IsLive ( Donaldson ) then
19466: LD_EXP 16
19470: PPUSH
19471: CALL_OW 300
19475: IFFALSE 19495
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19477: LD_EXP 16
19481: PPUSH
19482: LD_VAR 0 3
19486: PUSH
19487: LD_STRING Donaldson
19489: STR
19490: PPUSH
19491: CALL_OW 38
// if IsLive ( Bobby ) then
19495: LD_EXP 17
19499: PPUSH
19500: CALL_OW 300
19504: IFFALSE 19524
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19506: LD_EXP 17
19510: PPUSH
19511: LD_VAR 0 3
19515: PUSH
19516: LD_STRING Bobby
19518: STR
19519: PPUSH
19520: CALL_OW 38
// if IsLive ( Cyrus ) then
19524: LD_EXP 18
19528: PPUSH
19529: CALL_OW 300
19533: IFFALSE 19553
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19535: LD_EXP 18
19539: PPUSH
19540: LD_VAR 0 3
19544: PUSH
19545: LD_STRING Cyrus
19547: STR
19548: PPUSH
19549: CALL_OW 38
// if IsLive ( Lisa ) then
19553: LD_EXP 19
19557: PPUSH
19558: CALL_OW 300
19562: IFFALSE 19582
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19564: LD_EXP 19
19568: PPUSH
19569: LD_VAR 0 3
19573: PUSH
19574: LD_STRING Lisa
19576: STR
19577: PPUSH
19578: CALL_OW 38
// if IsLive ( Frank ) then
19582: LD_EXP 20
19586: PPUSH
19587: CALL_OW 300
19591: IFFALSE 19611
// SaveCharacters ( Frank , prefix & Frank ) ;
19593: LD_EXP 20
19597: PPUSH
19598: LD_VAR 0 3
19602: PUSH
19603: LD_STRING Frank
19605: STR
19606: PPUSH
19607: CALL_OW 38
// if IsLive ( Gladstone ) then
19611: LD_EXP 21
19615: PPUSH
19616: CALL_OW 300
19620: IFFALSE 19640
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19622: LD_EXP 21
19626: PPUSH
19627: LD_VAR 0 3
19631: PUSH
19632: LD_STRING Gladstone
19634: STR
19635: PPUSH
19636: CALL_OW 38
// if IsLive ( Kikuchi ) then
19640: LD_EXP 22
19644: PPUSH
19645: CALL_OW 300
19649: IFFALSE 19669
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19651: LD_EXP 22
19655: PPUSH
19656: LD_VAR 0 3
19660: PUSH
19661: LD_STRING Kikuchi
19663: STR
19664: PPUSH
19665: CALL_OW 38
// if IsLive ( Denis ) then
19669: LD_EXP 26
19673: PPUSH
19674: CALL_OW 300
19678: IFFALSE 19698
// SaveCharacters ( Denis , prefix & Denis ) ;
19680: LD_EXP 26
19684: PPUSH
19685: LD_VAR 0 3
19689: PUSH
19690: LD_STRING Denis
19692: STR
19693: PPUSH
19694: CALL_OW 38
// if IsLive ( Joan ) then
19698: LD_EXP 27
19702: PPUSH
19703: CALL_OW 300
19707: IFFALSE 19729
// SaveCharacters ( Joan , prefix & Joan ) else
19709: LD_EXP 27
19713: PPUSH
19714: LD_VAR 0 3
19718: PUSH
19719: LD_STRING Joan
19721: STR
19722: PPUSH
19723: CALL_OW 38
19727: GO 19736
// DeleteCharacters ( Joan ) ;
19729: LD_STRING Joan
19731: PPUSH
19732: CALL_OW 40
// if IsLive ( Khatam ) then
19736: LD_EXP 23
19740: PPUSH
19741: CALL_OW 300
19745: IFFALSE 19765
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19747: LD_EXP 23
19751: PPUSH
19752: LD_VAR 0 3
19756: PUSH
19757: LD_STRING Khatam
19759: STR
19760: PPUSH
19761: CALL_OW 38
// if IsLive ( Houten ) then
19765: LD_EXP 25
19769: PPUSH
19770: CALL_OW 300
19774: IFFALSE 19801
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
19776: LD_STRING enableBioCharacter(BIO_HOUT)
19778: PPUSH
19779: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
19783: LD_EXP 25
19787: PPUSH
19788: LD_VAR 0 3
19792: PUSH
19793: LD_STRING Houten
19795: STR
19796: PPUSH
19797: CALL_OW 38
// end ; if IsLive ( Mike ) then
19801: LD_EXP 24
19805: PPUSH
19806: CALL_OW 300
19810: IFFALSE 19830
// SaveCharacters ( Mike , prefix & Mike ) ;
19812: LD_EXP 24
19816: PPUSH
19817: LD_VAR 0 3
19821: PUSH
19822: LD_STRING Mike
19824: STR
19825: PPUSH
19826: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19830: LD_INT 22
19832: PUSH
19833: LD_INT 1
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 21
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 23
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: PPUSH
19865: CALL_OW 69
19869: PUSH
19870: LD_EXP 14
19874: PUSH
19875: LD_EXP 15
19879: PUSH
19880: LD_EXP 16
19884: PUSH
19885: LD_EXP 17
19889: PUSH
19890: LD_EXP 18
19894: PUSH
19895: LD_EXP 19
19899: PUSH
19900: LD_EXP 20
19904: PUSH
19905: LD_EXP 21
19909: PUSH
19910: LD_EXP 22
19914: PUSH
19915: LD_EXP 26
19919: PUSH
19920: LD_EXP 27
19924: PUSH
19925: LD_EXP 25
19929: PUSH
19930: LD_EXP 23
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: DIFF
19950: PPUSH
19951: LD_STRING 08_other_survivors
19953: PPUSH
19954: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19958: LD_INT 15
19960: PPUSH
19961: CALL 7335 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19965: LD_EXP 10
19969: NOT
19970: PPUSH
19971: LD_STRING 08_SikorskiStatus
19973: PPUSH
19974: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
19978: LD_STRING enableBioCharacter(BIO_SIK)
19980: PPUSH
19981: CALL_OW 559
// YouWin ;
19985: CALL_OW 103
// end ; end_of_file
19989: PPOPN 3
19991: END
// export function SikorskiCounter ; begin
19992: LD_INT 0
19994: PPUSH
// repeat wait ( 0 0$1 ) ;
19995: LD_INT 35
19997: PPUSH
19998: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
20002: LD_ADDR_OWVAR 47
20006: PUSH
20007: LD_STRING #Am08-2
20009: PUSH
20010: LD_EXP 3
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
20019: LD_ADDR_EXP 3
20023: PUSH
20024: LD_EXP 3
20028: PUSH
20029: LD_INT 35
20031: MINUS
20032: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
20033: LD_EXP 3
20037: PUSH
20038: LD_INT 0
20040: EQUAL
20041: IFFALSE 19995
// display_strings := [ ] ;
20043: LD_ADDR_OWVAR 47
20047: PUSH
20048: EMPTY
20049: ST_TO_ADDR
// end ;
20050: LD_VAR 0 1
20054: RET
// export function SikorskiWaitCounter ; begin
20055: LD_INT 0
20057: PPUSH
// repeat wait ( 0 0$1 ) ;
20058: LD_INT 35
20060: PPUSH
20061: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
20065: LD_ADDR_OWVAR 47
20069: PUSH
20070: LD_STRING #Am08-1
20072: PUSH
20073: LD_EXP 4
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
20082: LD_ADDR_EXP 4
20086: PUSH
20087: LD_EXP 4
20091: PUSH
20092: LD_INT 35
20094: MINUS
20095: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
20096: LD_EXP 4
20100: PUSH
20101: LD_INT 0
20103: EQUAL
20104: IFFALSE 20058
// display_strings := [ ] ;
20106: LD_ADDR_OWVAR 47
20110: PUSH
20111: EMPTY
20112: ST_TO_ADDR
// end ; end_of_file
20113: LD_VAR 0 1
20117: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
20118: LD_EXP 3
20122: IFFALSE 20162
20124: GO 20126
20126: DISABLE
// begin enable ;
20127: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20128: LD_INT 14
20130: PPUSH
20131: CALL_OW 435
20135: PUSH
20136: LD_INT 10
20138: LESS
20139: IFFALSE 20162
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20141: LD_INT 1
20143: PPUSH
20144: LD_INT 5
20146: PPUSH
20147: CALL_OW 12
20151: PPUSH
20152: LD_INT 14
20154: PPUSH
20155: LD_INT 1
20157: PPUSH
20158: CALL_OW 55
// end ;
20162: END
// every 0 0$55 trigger sikorskiArriveCounter do
20163: LD_EXP 3
20167: IFFALSE 20207
20169: GO 20171
20171: DISABLE
// begin enable ;
20172: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20173: LD_INT 13
20175: PPUSH
20176: CALL_OW 435
20180: PUSH
20181: LD_INT 10
20183: LESS
20184: IFFALSE 20207
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20186: LD_INT 1
20188: PPUSH
20189: LD_INT 5
20191: PPUSH
20192: CALL_OW 12
20196: PPUSH
20197: LD_INT 13
20199: PPUSH
20200: LD_INT 1
20202: PPUSH
20203: CALL_OW 55
// end ; end_of_file
20207: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20208: LD_INT 0
20210: PPUSH
20211: PPUSH
// if not units then
20212: LD_VAR 0 1
20216: NOT
20217: IFFALSE 20221
// exit ;
20219: GO 20346
// result := false ;
20221: LD_ADDR_VAR 0 4
20225: PUSH
20226: LD_INT 0
20228: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20229: LD_ADDR_VAR 0 5
20233: PUSH
20234: LD_VAR 0 1
20238: PPUSH
20239: LD_INT 26
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PPUSH
20249: CALL_OW 72
20253: ST_TO_ADDR
// if tmp then
20254: LD_VAR 0 5
20258: IFFALSE 20284
// result := Say ( tmp [ 1 ] , menDialog ) ;
20260: LD_ADDR_VAR 0 4
20264: PUSH
20265: LD_VAR 0 5
20269: PUSH
20270: LD_INT 1
20272: ARRAY
20273: PPUSH
20274: LD_VAR 0 2
20278: PPUSH
20279: CALL_OW 88
20283: ST_TO_ADDR
// if not result then
20284: LD_VAR 0 4
20288: NOT
20289: IFFALSE 20346
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20291: LD_ADDR_VAR 0 5
20295: PUSH
20296: LD_VAR 0 1
20300: PPUSH
20301: LD_INT 26
20303: PUSH
20304: LD_INT 2
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PPUSH
20311: CALL_OW 72
20315: ST_TO_ADDR
// if tmp then
20316: LD_VAR 0 5
20320: IFFALSE 20346
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20322: LD_ADDR_VAR 0 4
20326: PUSH
20327: LD_VAR 0 5
20331: PUSH
20332: LD_INT 1
20334: ARRAY
20335: PPUSH
20336: LD_VAR 0 3
20340: PPUSH
20341: CALL_OW 88
20345: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20346: LD_VAR 0 4
20350: RET
// export globalGameSaveCounter ; every 0 0$1 do
20351: GO 20353
20353: DISABLE
// begin enable ;
20354: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20355: LD_STRING updateTimer(
20357: PUSH
20358: LD_OWVAR 1
20362: STR
20363: PUSH
20364: LD_STRING );
20366: STR
20367: PPUSH
20368: CALL_OW 559
// end ;
20372: END
// every 0 0$1 do
20373: GO 20375
20375: DISABLE
// begin globalGameSaveCounter := 0 ;
20376: LD_ADDR_EXP 37
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20384: LD_STRING setGameSaveCounter(0)
20386: PPUSH
20387: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20391: LD_STRING initStreamRollete();
20393: PPUSH
20394: CALL_OW 559
// InitStreamMode ;
20398: CALL 21724 0 0
// DefineStreamItems ( false ) ;
20402: LD_INT 0
20404: PPUSH
20405: CALL 22188 0 1
// end ;
20409: END
// export function SOS_MapStart ( ) ; begin
20410: LD_INT 0
20412: PPUSH
// if streamModeActive then
20413: LD_EXP 38
20417: IFFALSE 20426
// DefineStreamItems ( true ) ;
20419: LD_INT 1
20421: PPUSH
20422: CALL 22188 0 1
// UpdateLuaVariables ( ) ;
20426: CALL 20443 0 0
// UpdateFactoryWaypoints ( ) ;
20430: CALL 35057 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20434: CALL 35314 0 0
// end ;
20438: LD_VAR 0 1
20442: RET
// function UpdateLuaVariables ( ) ; begin
20443: LD_INT 0
20445: PPUSH
// if globalGameSaveCounter then
20446: LD_EXP 37
20450: IFFALSE 20484
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20452: LD_ADDR_EXP 37
20456: PUSH
20457: LD_EXP 37
20461: PPUSH
20462: CALL 80099 0 1
20466: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20467: LD_STRING setGameSaveCounter(
20469: PUSH
20470: LD_EXP 37
20474: STR
20475: PUSH
20476: LD_STRING )
20478: STR
20479: PPUSH
20480: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20484: LD_STRING setGameDifficulty(
20486: PUSH
20487: LD_OWVAR 67
20491: STR
20492: PUSH
20493: LD_STRING )
20495: STR
20496: PPUSH
20497: CALL_OW 559
// end ;
20501: LD_VAR 0 1
20505: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20506: LD_INT 0
20508: PPUSH
// if p2 = stream_mode then
20509: LD_VAR 0 2
20513: PUSH
20514: LD_INT 100
20516: EQUAL
20517: IFFALSE 21520
// begin if not StreamModeActive then
20519: LD_EXP 38
20523: NOT
20524: IFFALSE 20534
// StreamModeActive := true ;
20526: LD_ADDR_EXP 38
20530: PUSH
20531: LD_INT 1
20533: ST_TO_ADDR
// if p3 = 0 then
20534: LD_VAR 0 3
20538: PUSH
20539: LD_INT 0
20541: EQUAL
20542: IFFALSE 20548
// InitStreamMode ;
20544: CALL 21724 0 0
// if p3 = 1 then
20548: LD_VAR 0 3
20552: PUSH
20553: LD_INT 1
20555: EQUAL
20556: IFFALSE 20566
// sRocket := true ;
20558: LD_ADDR_EXP 43
20562: PUSH
20563: LD_INT 1
20565: ST_TO_ADDR
// if p3 = 2 then
20566: LD_VAR 0 3
20570: PUSH
20571: LD_INT 2
20573: EQUAL
20574: IFFALSE 20584
// sSpeed := true ;
20576: LD_ADDR_EXP 42
20580: PUSH
20581: LD_INT 1
20583: ST_TO_ADDR
// if p3 = 3 then
20584: LD_VAR 0 3
20588: PUSH
20589: LD_INT 3
20591: EQUAL
20592: IFFALSE 20602
// sEngine := true ;
20594: LD_ADDR_EXP 44
20598: PUSH
20599: LD_INT 1
20601: ST_TO_ADDR
// if p3 = 4 then
20602: LD_VAR 0 3
20606: PUSH
20607: LD_INT 4
20609: EQUAL
20610: IFFALSE 20620
// sSpec := true ;
20612: LD_ADDR_EXP 41
20616: PUSH
20617: LD_INT 1
20619: ST_TO_ADDR
// if p3 = 5 then
20620: LD_VAR 0 3
20624: PUSH
20625: LD_INT 5
20627: EQUAL
20628: IFFALSE 20638
// sLevel := true ;
20630: LD_ADDR_EXP 45
20634: PUSH
20635: LD_INT 1
20637: ST_TO_ADDR
// if p3 = 6 then
20638: LD_VAR 0 3
20642: PUSH
20643: LD_INT 6
20645: EQUAL
20646: IFFALSE 20656
// sArmoury := true ;
20648: LD_ADDR_EXP 46
20652: PUSH
20653: LD_INT 1
20655: ST_TO_ADDR
// if p3 = 7 then
20656: LD_VAR 0 3
20660: PUSH
20661: LD_INT 7
20663: EQUAL
20664: IFFALSE 20674
// sRadar := true ;
20666: LD_ADDR_EXP 47
20670: PUSH
20671: LD_INT 1
20673: ST_TO_ADDR
// if p3 = 8 then
20674: LD_VAR 0 3
20678: PUSH
20679: LD_INT 8
20681: EQUAL
20682: IFFALSE 20692
// sBunker := true ;
20684: LD_ADDR_EXP 48
20688: PUSH
20689: LD_INT 1
20691: ST_TO_ADDR
// if p3 = 9 then
20692: LD_VAR 0 3
20696: PUSH
20697: LD_INT 9
20699: EQUAL
20700: IFFALSE 20710
// sHack := true ;
20702: LD_ADDR_EXP 49
20706: PUSH
20707: LD_INT 1
20709: ST_TO_ADDR
// if p3 = 10 then
20710: LD_VAR 0 3
20714: PUSH
20715: LD_INT 10
20717: EQUAL
20718: IFFALSE 20728
// sFire := true ;
20720: LD_ADDR_EXP 50
20724: PUSH
20725: LD_INT 1
20727: ST_TO_ADDR
// if p3 = 11 then
20728: LD_VAR 0 3
20732: PUSH
20733: LD_INT 11
20735: EQUAL
20736: IFFALSE 20746
// sRefresh := true ;
20738: LD_ADDR_EXP 51
20742: PUSH
20743: LD_INT 1
20745: ST_TO_ADDR
// if p3 = 12 then
20746: LD_VAR 0 3
20750: PUSH
20751: LD_INT 12
20753: EQUAL
20754: IFFALSE 20764
// sExp := true ;
20756: LD_ADDR_EXP 52
20760: PUSH
20761: LD_INT 1
20763: ST_TO_ADDR
// if p3 = 13 then
20764: LD_VAR 0 3
20768: PUSH
20769: LD_INT 13
20771: EQUAL
20772: IFFALSE 20782
// sDepot := true ;
20774: LD_ADDR_EXP 53
20778: PUSH
20779: LD_INT 1
20781: ST_TO_ADDR
// if p3 = 14 then
20782: LD_VAR 0 3
20786: PUSH
20787: LD_INT 14
20789: EQUAL
20790: IFFALSE 20800
// sFlag := true ;
20792: LD_ADDR_EXP 54
20796: PUSH
20797: LD_INT 1
20799: ST_TO_ADDR
// if p3 = 15 then
20800: LD_VAR 0 3
20804: PUSH
20805: LD_INT 15
20807: EQUAL
20808: IFFALSE 20818
// sKamikadze := true ;
20810: LD_ADDR_EXP 62
20814: PUSH
20815: LD_INT 1
20817: ST_TO_ADDR
// if p3 = 16 then
20818: LD_VAR 0 3
20822: PUSH
20823: LD_INT 16
20825: EQUAL
20826: IFFALSE 20836
// sTroll := true ;
20828: LD_ADDR_EXP 63
20832: PUSH
20833: LD_INT 1
20835: ST_TO_ADDR
// if p3 = 17 then
20836: LD_VAR 0 3
20840: PUSH
20841: LD_INT 17
20843: EQUAL
20844: IFFALSE 20854
// sSlow := true ;
20846: LD_ADDR_EXP 64
20850: PUSH
20851: LD_INT 1
20853: ST_TO_ADDR
// if p3 = 18 then
20854: LD_VAR 0 3
20858: PUSH
20859: LD_INT 18
20861: EQUAL
20862: IFFALSE 20872
// sLack := true ;
20864: LD_ADDR_EXP 65
20868: PUSH
20869: LD_INT 1
20871: ST_TO_ADDR
// if p3 = 19 then
20872: LD_VAR 0 3
20876: PUSH
20877: LD_INT 19
20879: EQUAL
20880: IFFALSE 20890
// sTank := true ;
20882: LD_ADDR_EXP 67
20886: PUSH
20887: LD_INT 1
20889: ST_TO_ADDR
// if p3 = 20 then
20890: LD_VAR 0 3
20894: PUSH
20895: LD_INT 20
20897: EQUAL
20898: IFFALSE 20908
// sRemote := true ;
20900: LD_ADDR_EXP 68
20904: PUSH
20905: LD_INT 1
20907: ST_TO_ADDR
// if p3 = 21 then
20908: LD_VAR 0 3
20912: PUSH
20913: LD_INT 21
20915: EQUAL
20916: IFFALSE 20926
// sPowell := true ;
20918: LD_ADDR_EXP 69
20922: PUSH
20923: LD_INT 1
20925: ST_TO_ADDR
// if p3 = 22 then
20926: LD_VAR 0 3
20930: PUSH
20931: LD_INT 22
20933: EQUAL
20934: IFFALSE 20944
// sTeleport := true ;
20936: LD_ADDR_EXP 72
20940: PUSH
20941: LD_INT 1
20943: ST_TO_ADDR
// if p3 = 23 then
20944: LD_VAR 0 3
20948: PUSH
20949: LD_INT 23
20951: EQUAL
20952: IFFALSE 20962
// sOilTower := true ;
20954: LD_ADDR_EXP 74
20958: PUSH
20959: LD_INT 1
20961: ST_TO_ADDR
// if p3 = 24 then
20962: LD_VAR 0 3
20966: PUSH
20967: LD_INT 24
20969: EQUAL
20970: IFFALSE 20980
// sShovel := true ;
20972: LD_ADDR_EXP 75
20976: PUSH
20977: LD_INT 1
20979: ST_TO_ADDR
// if p3 = 25 then
20980: LD_VAR 0 3
20984: PUSH
20985: LD_INT 25
20987: EQUAL
20988: IFFALSE 20998
// sSheik := true ;
20990: LD_ADDR_EXP 76
20994: PUSH
20995: LD_INT 1
20997: ST_TO_ADDR
// if p3 = 26 then
20998: LD_VAR 0 3
21002: PUSH
21003: LD_INT 26
21005: EQUAL
21006: IFFALSE 21016
// sEarthquake := true ;
21008: LD_ADDR_EXP 78
21012: PUSH
21013: LD_INT 1
21015: ST_TO_ADDR
// if p3 = 27 then
21016: LD_VAR 0 3
21020: PUSH
21021: LD_INT 27
21023: EQUAL
21024: IFFALSE 21034
// sAI := true ;
21026: LD_ADDR_EXP 79
21030: PUSH
21031: LD_INT 1
21033: ST_TO_ADDR
// if p3 = 28 then
21034: LD_VAR 0 3
21038: PUSH
21039: LD_INT 28
21041: EQUAL
21042: IFFALSE 21052
// sCargo := true ;
21044: LD_ADDR_EXP 82
21048: PUSH
21049: LD_INT 1
21051: ST_TO_ADDR
// if p3 = 29 then
21052: LD_VAR 0 3
21056: PUSH
21057: LD_INT 29
21059: EQUAL
21060: IFFALSE 21070
// sDLaser := true ;
21062: LD_ADDR_EXP 83
21066: PUSH
21067: LD_INT 1
21069: ST_TO_ADDR
// if p3 = 30 then
21070: LD_VAR 0 3
21074: PUSH
21075: LD_INT 30
21077: EQUAL
21078: IFFALSE 21088
// sExchange := true ;
21080: LD_ADDR_EXP 84
21084: PUSH
21085: LD_INT 1
21087: ST_TO_ADDR
// if p3 = 31 then
21088: LD_VAR 0 3
21092: PUSH
21093: LD_INT 31
21095: EQUAL
21096: IFFALSE 21106
// sFac := true ;
21098: LD_ADDR_EXP 85
21102: PUSH
21103: LD_INT 1
21105: ST_TO_ADDR
// if p3 = 32 then
21106: LD_VAR 0 3
21110: PUSH
21111: LD_INT 32
21113: EQUAL
21114: IFFALSE 21124
// sPower := true ;
21116: LD_ADDR_EXP 86
21120: PUSH
21121: LD_INT 1
21123: ST_TO_ADDR
// if p3 = 33 then
21124: LD_VAR 0 3
21128: PUSH
21129: LD_INT 33
21131: EQUAL
21132: IFFALSE 21142
// sRandom := true ;
21134: LD_ADDR_EXP 87
21138: PUSH
21139: LD_INT 1
21141: ST_TO_ADDR
// if p3 = 34 then
21142: LD_VAR 0 3
21146: PUSH
21147: LD_INT 34
21149: EQUAL
21150: IFFALSE 21160
// sShield := true ;
21152: LD_ADDR_EXP 88
21156: PUSH
21157: LD_INT 1
21159: ST_TO_ADDR
// if p3 = 35 then
21160: LD_VAR 0 3
21164: PUSH
21165: LD_INT 35
21167: EQUAL
21168: IFFALSE 21178
// sTime := true ;
21170: LD_ADDR_EXP 89
21174: PUSH
21175: LD_INT 1
21177: ST_TO_ADDR
// if p3 = 36 then
21178: LD_VAR 0 3
21182: PUSH
21183: LD_INT 36
21185: EQUAL
21186: IFFALSE 21196
// sTools := true ;
21188: LD_ADDR_EXP 90
21192: PUSH
21193: LD_INT 1
21195: ST_TO_ADDR
// if p3 = 101 then
21196: LD_VAR 0 3
21200: PUSH
21201: LD_INT 101
21203: EQUAL
21204: IFFALSE 21214
// sSold := true ;
21206: LD_ADDR_EXP 55
21210: PUSH
21211: LD_INT 1
21213: ST_TO_ADDR
// if p3 = 102 then
21214: LD_VAR 0 3
21218: PUSH
21219: LD_INT 102
21221: EQUAL
21222: IFFALSE 21232
// sDiff := true ;
21224: LD_ADDR_EXP 56
21228: PUSH
21229: LD_INT 1
21231: ST_TO_ADDR
// if p3 = 103 then
21232: LD_VAR 0 3
21236: PUSH
21237: LD_INT 103
21239: EQUAL
21240: IFFALSE 21250
// sFog := true ;
21242: LD_ADDR_EXP 59
21246: PUSH
21247: LD_INT 1
21249: ST_TO_ADDR
// if p3 = 104 then
21250: LD_VAR 0 3
21254: PUSH
21255: LD_INT 104
21257: EQUAL
21258: IFFALSE 21268
// sReset := true ;
21260: LD_ADDR_EXP 60
21264: PUSH
21265: LD_INT 1
21267: ST_TO_ADDR
// if p3 = 105 then
21268: LD_VAR 0 3
21272: PUSH
21273: LD_INT 105
21275: EQUAL
21276: IFFALSE 21286
// sSun := true ;
21278: LD_ADDR_EXP 61
21282: PUSH
21283: LD_INT 1
21285: ST_TO_ADDR
// if p3 = 106 then
21286: LD_VAR 0 3
21290: PUSH
21291: LD_INT 106
21293: EQUAL
21294: IFFALSE 21304
// sTiger := true ;
21296: LD_ADDR_EXP 57
21300: PUSH
21301: LD_INT 1
21303: ST_TO_ADDR
// if p3 = 107 then
21304: LD_VAR 0 3
21308: PUSH
21309: LD_INT 107
21311: EQUAL
21312: IFFALSE 21322
// sBomb := true ;
21314: LD_ADDR_EXP 58
21318: PUSH
21319: LD_INT 1
21321: ST_TO_ADDR
// if p3 = 108 then
21322: LD_VAR 0 3
21326: PUSH
21327: LD_INT 108
21329: EQUAL
21330: IFFALSE 21340
// sWound := true ;
21332: LD_ADDR_EXP 66
21336: PUSH
21337: LD_INT 1
21339: ST_TO_ADDR
// if p3 = 109 then
21340: LD_VAR 0 3
21344: PUSH
21345: LD_INT 109
21347: EQUAL
21348: IFFALSE 21358
// sBetray := true ;
21350: LD_ADDR_EXP 70
21354: PUSH
21355: LD_INT 1
21357: ST_TO_ADDR
// if p3 = 110 then
21358: LD_VAR 0 3
21362: PUSH
21363: LD_INT 110
21365: EQUAL
21366: IFFALSE 21376
// sContamin := true ;
21368: LD_ADDR_EXP 71
21372: PUSH
21373: LD_INT 1
21375: ST_TO_ADDR
// if p3 = 111 then
21376: LD_VAR 0 3
21380: PUSH
21381: LD_INT 111
21383: EQUAL
21384: IFFALSE 21394
// sOil := true ;
21386: LD_ADDR_EXP 73
21390: PUSH
21391: LD_INT 1
21393: ST_TO_ADDR
// if p3 = 112 then
21394: LD_VAR 0 3
21398: PUSH
21399: LD_INT 112
21401: EQUAL
21402: IFFALSE 21412
// sStu := true ;
21404: LD_ADDR_EXP 77
21408: PUSH
21409: LD_INT 1
21411: ST_TO_ADDR
// if p3 = 113 then
21412: LD_VAR 0 3
21416: PUSH
21417: LD_INT 113
21419: EQUAL
21420: IFFALSE 21430
// sBazooka := true ;
21422: LD_ADDR_EXP 80
21426: PUSH
21427: LD_INT 1
21429: ST_TO_ADDR
// if p3 = 114 then
21430: LD_VAR 0 3
21434: PUSH
21435: LD_INT 114
21437: EQUAL
21438: IFFALSE 21448
// sMortar := true ;
21440: LD_ADDR_EXP 81
21444: PUSH
21445: LD_INT 1
21447: ST_TO_ADDR
// if p3 = 115 then
21448: LD_VAR 0 3
21452: PUSH
21453: LD_INT 115
21455: EQUAL
21456: IFFALSE 21466
// sRanger := true ;
21458: LD_ADDR_EXP 91
21462: PUSH
21463: LD_INT 1
21465: ST_TO_ADDR
// if p3 = 116 then
21466: LD_VAR 0 3
21470: PUSH
21471: LD_INT 116
21473: EQUAL
21474: IFFALSE 21484
// sComputer := true ;
21476: LD_ADDR_EXP 92
21480: PUSH
21481: LD_INT 1
21483: ST_TO_ADDR
// if p3 = 117 then
21484: LD_VAR 0 3
21488: PUSH
21489: LD_INT 117
21491: EQUAL
21492: IFFALSE 21502
// s30 := true ;
21494: LD_ADDR_EXP 93
21498: PUSH
21499: LD_INT 1
21501: ST_TO_ADDR
// if p3 = 118 then
21502: LD_VAR 0 3
21506: PUSH
21507: LD_INT 118
21509: EQUAL
21510: IFFALSE 21520
// s60 := true ;
21512: LD_ADDR_EXP 94
21516: PUSH
21517: LD_INT 1
21519: ST_TO_ADDR
// end ; if p2 = hack_mode then
21520: LD_VAR 0 2
21524: PUSH
21525: LD_INT 101
21527: EQUAL
21528: IFFALSE 21656
// begin case p3 of 1 :
21530: LD_VAR 0 3
21534: PUSH
21535: LD_INT 1
21537: DOUBLE
21538: EQUAL
21539: IFTRUE 21543
21541: GO 21550
21543: POP
// hHackUnlimitedResources ; 2 :
21544: CALL 33803 0 0
21548: GO 21656
21550: LD_INT 2
21552: DOUBLE
21553: EQUAL
21554: IFTRUE 21558
21556: GO 21565
21558: POP
// hHackSetLevel10 ; 3 :
21559: CALL 33936 0 0
21563: GO 21656
21565: LD_INT 3
21567: DOUBLE
21568: EQUAL
21569: IFTRUE 21573
21571: GO 21580
21573: POP
// hHackSetLevel10YourUnits ; 4 :
21574: CALL 34021 0 0
21578: GO 21656
21580: LD_INT 4
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21595
21588: POP
// hHackInvincible ; 5 :
21589: CALL 34469 0 0
21593: GO 21656
21595: LD_INT 5
21597: DOUBLE
21598: EQUAL
21599: IFTRUE 21603
21601: GO 21610
21603: POP
// hHackInvisible ; 6 :
21604: CALL 34580 0 0
21608: GO 21656
21610: LD_INT 6
21612: DOUBLE
21613: EQUAL
21614: IFTRUE 21618
21616: GO 21625
21618: POP
// hHackChangeYourSide ; 7 :
21619: CALL 34637 0 0
21623: GO 21656
21625: LD_INT 7
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21640
21633: POP
// hHackChangeUnitSide ; 8 :
21634: CALL 34679 0 0
21638: GO 21656
21640: LD_INT 8
21642: DOUBLE
21643: EQUAL
21644: IFTRUE 21648
21646: GO 21655
21648: POP
// hHackFog ; end ;
21649: CALL 34780 0 0
21653: GO 21656
21655: POP
// end ; if p2 = game_save_mode then
21656: LD_VAR 0 2
21660: PUSH
21661: LD_INT 102
21663: EQUAL
21664: IFFALSE 21719
// begin if p3 = 1 then
21666: LD_VAR 0 3
21670: PUSH
21671: LD_INT 1
21673: EQUAL
21674: IFFALSE 21686
// globalGameSaveCounter := p4 ;
21676: LD_ADDR_EXP 37
21680: PUSH
21681: LD_VAR 0 4
21685: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21686: LD_VAR 0 3
21690: PUSH
21691: LD_INT 2
21693: EQUAL
21694: PUSH
21695: LD_EXP 37
21699: AND
21700: IFFALSE 21719
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21702: LD_STRING setGameSaveCounter(
21704: PUSH
21705: LD_EXP 37
21709: STR
21710: PUSH
21711: LD_STRING )
21713: STR
21714: PPUSH
21715: CALL_OW 559
// end ; end ;
21719: LD_VAR 0 7
21723: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21724: LD_INT 0
21726: PPUSH
// streamModeActive := false ;
21727: LD_ADDR_EXP 38
21731: PUSH
21732: LD_INT 0
21734: ST_TO_ADDR
// normalCounter := 36 ;
21735: LD_ADDR_EXP 39
21739: PUSH
21740: LD_INT 36
21742: ST_TO_ADDR
// hardcoreCounter := 18 ;
21743: LD_ADDR_EXP 40
21747: PUSH
21748: LD_INT 18
21750: ST_TO_ADDR
// sRocket := false ;
21751: LD_ADDR_EXP 43
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
// sSpeed := false ;
21759: LD_ADDR_EXP 42
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// sEngine := false ;
21767: LD_ADDR_EXP 44
21771: PUSH
21772: LD_INT 0
21774: ST_TO_ADDR
// sSpec := false ;
21775: LD_ADDR_EXP 41
21779: PUSH
21780: LD_INT 0
21782: ST_TO_ADDR
// sLevel := false ;
21783: LD_ADDR_EXP 45
21787: PUSH
21788: LD_INT 0
21790: ST_TO_ADDR
// sArmoury := false ;
21791: LD_ADDR_EXP 46
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// sRadar := false ;
21799: LD_ADDR_EXP 47
21803: PUSH
21804: LD_INT 0
21806: ST_TO_ADDR
// sBunker := false ;
21807: LD_ADDR_EXP 48
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// sHack := false ;
21815: LD_ADDR_EXP 49
21819: PUSH
21820: LD_INT 0
21822: ST_TO_ADDR
// sFire := false ;
21823: LD_ADDR_EXP 50
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// sRefresh := false ;
21831: LD_ADDR_EXP 51
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// sExp := false ;
21839: LD_ADDR_EXP 52
21843: PUSH
21844: LD_INT 0
21846: ST_TO_ADDR
// sDepot := false ;
21847: LD_ADDR_EXP 53
21851: PUSH
21852: LD_INT 0
21854: ST_TO_ADDR
// sFlag := false ;
21855: LD_ADDR_EXP 54
21859: PUSH
21860: LD_INT 0
21862: ST_TO_ADDR
// sKamikadze := false ;
21863: LD_ADDR_EXP 62
21867: PUSH
21868: LD_INT 0
21870: ST_TO_ADDR
// sTroll := false ;
21871: LD_ADDR_EXP 63
21875: PUSH
21876: LD_INT 0
21878: ST_TO_ADDR
// sSlow := false ;
21879: LD_ADDR_EXP 64
21883: PUSH
21884: LD_INT 0
21886: ST_TO_ADDR
// sLack := false ;
21887: LD_ADDR_EXP 65
21891: PUSH
21892: LD_INT 0
21894: ST_TO_ADDR
// sTank := false ;
21895: LD_ADDR_EXP 67
21899: PUSH
21900: LD_INT 0
21902: ST_TO_ADDR
// sRemote := false ;
21903: LD_ADDR_EXP 68
21907: PUSH
21908: LD_INT 0
21910: ST_TO_ADDR
// sPowell := false ;
21911: LD_ADDR_EXP 69
21915: PUSH
21916: LD_INT 0
21918: ST_TO_ADDR
// sTeleport := false ;
21919: LD_ADDR_EXP 72
21923: PUSH
21924: LD_INT 0
21926: ST_TO_ADDR
// sOilTower := false ;
21927: LD_ADDR_EXP 74
21931: PUSH
21932: LD_INT 0
21934: ST_TO_ADDR
// sShovel := false ;
21935: LD_ADDR_EXP 75
21939: PUSH
21940: LD_INT 0
21942: ST_TO_ADDR
// sSheik := false ;
21943: LD_ADDR_EXP 76
21947: PUSH
21948: LD_INT 0
21950: ST_TO_ADDR
// sEarthquake := false ;
21951: LD_ADDR_EXP 78
21955: PUSH
21956: LD_INT 0
21958: ST_TO_ADDR
// sAI := false ;
21959: LD_ADDR_EXP 79
21963: PUSH
21964: LD_INT 0
21966: ST_TO_ADDR
// sCargo := false ;
21967: LD_ADDR_EXP 82
21971: PUSH
21972: LD_INT 0
21974: ST_TO_ADDR
// sDLaser := false ;
21975: LD_ADDR_EXP 83
21979: PUSH
21980: LD_INT 0
21982: ST_TO_ADDR
// sExchange := false ;
21983: LD_ADDR_EXP 84
21987: PUSH
21988: LD_INT 0
21990: ST_TO_ADDR
// sFac := false ;
21991: LD_ADDR_EXP 85
21995: PUSH
21996: LD_INT 0
21998: ST_TO_ADDR
// sPower := false ;
21999: LD_ADDR_EXP 86
22003: PUSH
22004: LD_INT 0
22006: ST_TO_ADDR
// sRandom := false ;
22007: LD_ADDR_EXP 87
22011: PUSH
22012: LD_INT 0
22014: ST_TO_ADDR
// sShield := false ;
22015: LD_ADDR_EXP 88
22019: PUSH
22020: LD_INT 0
22022: ST_TO_ADDR
// sTime := false ;
22023: LD_ADDR_EXP 89
22027: PUSH
22028: LD_INT 0
22030: ST_TO_ADDR
// sTools := false ;
22031: LD_ADDR_EXP 90
22035: PUSH
22036: LD_INT 0
22038: ST_TO_ADDR
// sSold := false ;
22039: LD_ADDR_EXP 55
22043: PUSH
22044: LD_INT 0
22046: ST_TO_ADDR
// sDiff := false ;
22047: LD_ADDR_EXP 56
22051: PUSH
22052: LD_INT 0
22054: ST_TO_ADDR
// sFog := false ;
22055: LD_ADDR_EXP 59
22059: PUSH
22060: LD_INT 0
22062: ST_TO_ADDR
// sReset := false ;
22063: LD_ADDR_EXP 60
22067: PUSH
22068: LD_INT 0
22070: ST_TO_ADDR
// sSun := false ;
22071: LD_ADDR_EXP 61
22075: PUSH
22076: LD_INT 0
22078: ST_TO_ADDR
// sTiger := false ;
22079: LD_ADDR_EXP 57
22083: PUSH
22084: LD_INT 0
22086: ST_TO_ADDR
// sBomb := false ;
22087: LD_ADDR_EXP 58
22091: PUSH
22092: LD_INT 0
22094: ST_TO_ADDR
// sWound := false ;
22095: LD_ADDR_EXP 66
22099: PUSH
22100: LD_INT 0
22102: ST_TO_ADDR
// sBetray := false ;
22103: LD_ADDR_EXP 70
22107: PUSH
22108: LD_INT 0
22110: ST_TO_ADDR
// sContamin := false ;
22111: LD_ADDR_EXP 71
22115: PUSH
22116: LD_INT 0
22118: ST_TO_ADDR
// sOil := false ;
22119: LD_ADDR_EXP 73
22123: PUSH
22124: LD_INT 0
22126: ST_TO_ADDR
// sStu := false ;
22127: LD_ADDR_EXP 77
22131: PUSH
22132: LD_INT 0
22134: ST_TO_ADDR
// sBazooka := false ;
22135: LD_ADDR_EXP 80
22139: PUSH
22140: LD_INT 0
22142: ST_TO_ADDR
// sMortar := false ;
22143: LD_ADDR_EXP 81
22147: PUSH
22148: LD_INT 0
22150: ST_TO_ADDR
// sRanger := false ;
22151: LD_ADDR_EXP 91
22155: PUSH
22156: LD_INT 0
22158: ST_TO_ADDR
// sComputer := false ;
22159: LD_ADDR_EXP 92
22163: PUSH
22164: LD_INT 0
22166: ST_TO_ADDR
// s30 := false ;
22167: LD_ADDR_EXP 93
22171: PUSH
22172: LD_INT 0
22174: ST_TO_ADDR
// s60 := false ;
22175: LD_ADDR_EXP 94
22179: PUSH
22180: LD_INT 0
22182: ST_TO_ADDR
// end ;
22183: LD_VAR 0 1
22187: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22188: LD_INT 0
22190: PPUSH
22191: PPUSH
22192: PPUSH
22193: PPUSH
22194: PPUSH
22195: PPUSH
22196: PPUSH
// result := [ ] ;
22197: LD_ADDR_VAR 0 2
22201: PUSH
22202: EMPTY
22203: ST_TO_ADDR
// if campaign_id = 1 then
22204: LD_OWVAR 69
22208: PUSH
22209: LD_INT 1
22211: EQUAL
22212: IFFALSE 25378
// begin case mission_number of 1 :
22214: LD_OWVAR 70
22218: PUSH
22219: LD_INT 1
22221: DOUBLE
22222: EQUAL
22223: IFTRUE 22227
22225: GO 22303
22227: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22228: LD_ADDR_VAR 0 2
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 4
22238: PUSH
22239: LD_INT 11
22241: PUSH
22242: LD_INT 12
22244: PUSH
22245: LD_INT 15
22247: PUSH
22248: LD_INT 16
22250: PUSH
22251: LD_INT 22
22253: PUSH
22254: LD_INT 23
22256: PUSH
22257: LD_INT 26
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 101
22273: PUSH
22274: LD_INT 102
22276: PUSH
22277: LD_INT 106
22279: PUSH
22280: LD_INT 116
22282: PUSH
22283: LD_INT 117
22285: PUSH
22286: LD_INT 118
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: ST_TO_ADDR
22301: GO 25376
22303: LD_INT 2
22305: DOUBLE
22306: EQUAL
22307: IFTRUE 22311
22309: GO 22395
22311: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22312: LD_ADDR_VAR 0 2
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: LD_INT 4
22322: PUSH
22323: LD_INT 11
22325: PUSH
22326: LD_INT 12
22328: PUSH
22329: LD_INT 15
22331: PUSH
22332: LD_INT 16
22334: PUSH
22335: LD_INT 22
22337: PUSH
22338: LD_INT 23
22340: PUSH
22341: LD_INT 26
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 101
22357: PUSH
22358: LD_INT 102
22360: PUSH
22361: LD_INT 105
22363: PUSH
22364: LD_INT 106
22366: PUSH
22367: LD_INT 108
22369: PUSH
22370: LD_INT 116
22372: PUSH
22373: LD_INT 117
22375: PUSH
22376: LD_INT 118
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: ST_TO_ADDR
22393: GO 25376
22395: LD_INT 3
22397: DOUBLE
22398: EQUAL
22399: IFTRUE 22403
22401: GO 22491
22403: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22404: LD_ADDR_VAR 0 2
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: LD_INT 4
22414: PUSH
22415: LD_INT 5
22417: PUSH
22418: LD_INT 11
22420: PUSH
22421: LD_INT 12
22423: PUSH
22424: LD_INT 15
22426: PUSH
22427: LD_INT 16
22429: PUSH
22430: LD_INT 22
22432: PUSH
22433: LD_INT 26
22435: PUSH
22436: LD_INT 36
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 101
22453: PUSH
22454: LD_INT 102
22456: PUSH
22457: LD_INT 105
22459: PUSH
22460: LD_INT 106
22462: PUSH
22463: LD_INT 108
22465: PUSH
22466: LD_INT 116
22468: PUSH
22469: LD_INT 117
22471: PUSH
22472: LD_INT 118
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: ST_TO_ADDR
22489: GO 25376
22491: LD_INT 4
22493: DOUBLE
22494: EQUAL
22495: IFTRUE 22499
22497: GO 22595
22499: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22500: LD_ADDR_VAR 0 2
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: LD_INT 4
22510: PUSH
22511: LD_INT 5
22513: PUSH
22514: LD_INT 8
22516: PUSH
22517: LD_INT 11
22519: PUSH
22520: LD_INT 12
22522: PUSH
22523: LD_INT 15
22525: PUSH
22526: LD_INT 16
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 23
22534: PUSH
22535: LD_INT 26
22537: PUSH
22538: LD_INT 36
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 101
22557: PUSH
22558: LD_INT 102
22560: PUSH
22561: LD_INT 105
22563: PUSH
22564: LD_INT 106
22566: PUSH
22567: LD_INT 108
22569: PUSH
22570: LD_INT 116
22572: PUSH
22573: LD_INT 117
22575: PUSH
22576: LD_INT 118
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: ST_TO_ADDR
22593: GO 25376
22595: LD_INT 5
22597: DOUBLE
22598: EQUAL
22599: IFTRUE 22603
22601: GO 22715
22603: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22604: LD_ADDR_VAR 0 2
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: LD_INT 4
22614: PUSH
22615: LD_INT 5
22617: PUSH
22618: LD_INT 6
22620: PUSH
22621: LD_INT 8
22623: PUSH
22624: LD_INT 11
22626: PUSH
22627: LD_INT 12
22629: PUSH
22630: LD_INT 15
22632: PUSH
22633: LD_INT 16
22635: PUSH
22636: LD_INT 22
22638: PUSH
22639: LD_INT 23
22641: PUSH
22642: LD_INT 25
22644: PUSH
22645: LD_INT 26
22647: PUSH
22648: LD_INT 36
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 101
22669: PUSH
22670: LD_INT 102
22672: PUSH
22673: LD_INT 105
22675: PUSH
22676: LD_INT 106
22678: PUSH
22679: LD_INT 108
22681: PUSH
22682: LD_INT 109
22684: PUSH
22685: LD_INT 112
22687: PUSH
22688: LD_INT 116
22690: PUSH
22691: LD_INT 117
22693: PUSH
22694: LD_INT 118
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: ST_TO_ADDR
22713: GO 25376
22715: LD_INT 6
22717: DOUBLE
22718: EQUAL
22719: IFTRUE 22723
22721: GO 22855
22723: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22724: LD_ADDR_VAR 0 2
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: LD_INT 4
22734: PUSH
22735: LD_INT 5
22737: PUSH
22738: LD_INT 6
22740: PUSH
22741: LD_INT 8
22743: PUSH
22744: LD_INT 11
22746: PUSH
22747: LD_INT 12
22749: PUSH
22750: LD_INT 15
22752: PUSH
22753: LD_INT 16
22755: PUSH
22756: LD_INT 20
22758: PUSH
22759: LD_INT 21
22761: PUSH
22762: LD_INT 22
22764: PUSH
22765: LD_INT 23
22767: PUSH
22768: LD_INT 25
22770: PUSH
22771: LD_INT 26
22773: PUSH
22774: LD_INT 30
22776: PUSH
22777: LD_INT 31
22779: PUSH
22780: LD_INT 32
22782: PUSH
22783: LD_INT 36
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 101
22809: PUSH
22810: LD_INT 102
22812: PUSH
22813: LD_INT 105
22815: PUSH
22816: LD_INT 106
22818: PUSH
22819: LD_INT 108
22821: PUSH
22822: LD_INT 109
22824: PUSH
22825: LD_INT 112
22827: PUSH
22828: LD_INT 116
22830: PUSH
22831: LD_INT 117
22833: PUSH
22834: LD_INT 118
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: ST_TO_ADDR
22853: GO 25376
22855: LD_INT 7
22857: DOUBLE
22858: EQUAL
22859: IFTRUE 22863
22861: GO 22975
22863: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22864: LD_ADDR_VAR 0 2
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: LD_INT 4
22874: PUSH
22875: LD_INT 5
22877: PUSH
22878: LD_INT 7
22880: PUSH
22881: LD_INT 11
22883: PUSH
22884: LD_INT 12
22886: PUSH
22887: LD_INT 15
22889: PUSH
22890: LD_INT 16
22892: PUSH
22893: LD_INT 20
22895: PUSH
22896: LD_INT 21
22898: PUSH
22899: LD_INT 22
22901: PUSH
22902: LD_INT 23
22904: PUSH
22905: LD_INT 25
22907: PUSH
22908: LD_INT 26
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 101
22929: PUSH
22930: LD_INT 102
22932: PUSH
22933: LD_INT 103
22935: PUSH
22936: LD_INT 105
22938: PUSH
22939: LD_INT 106
22941: PUSH
22942: LD_INT 108
22944: PUSH
22945: LD_INT 112
22947: PUSH
22948: LD_INT 116
22950: PUSH
22951: LD_INT 117
22953: PUSH
22954: LD_INT 118
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: ST_TO_ADDR
22973: GO 25376
22975: LD_INT 8
22977: DOUBLE
22978: EQUAL
22979: IFTRUE 22983
22981: GO 23123
22983: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22984: LD_ADDR_VAR 0 2
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: LD_INT 4
22994: PUSH
22995: LD_INT 5
22997: PUSH
22998: LD_INT 6
23000: PUSH
23001: LD_INT 7
23003: PUSH
23004: LD_INT 8
23006: PUSH
23007: LD_INT 11
23009: PUSH
23010: LD_INT 12
23012: PUSH
23013: LD_INT 15
23015: PUSH
23016: LD_INT 16
23018: PUSH
23019: LD_INT 20
23021: PUSH
23022: LD_INT 21
23024: PUSH
23025: LD_INT 22
23027: PUSH
23028: LD_INT 23
23030: PUSH
23031: LD_INT 25
23033: PUSH
23034: LD_INT 26
23036: PUSH
23037: LD_INT 30
23039: PUSH
23040: LD_INT 31
23042: PUSH
23043: LD_INT 32
23045: PUSH
23046: LD_INT 36
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 101
23073: PUSH
23074: LD_INT 102
23076: PUSH
23077: LD_INT 103
23079: PUSH
23080: LD_INT 105
23082: PUSH
23083: LD_INT 106
23085: PUSH
23086: LD_INT 108
23088: PUSH
23089: LD_INT 109
23091: PUSH
23092: LD_INT 112
23094: PUSH
23095: LD_INT 116
23097: PUSH
23098: LD_INT 117
23100: PUSH
23101: LD_INT 118
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: ST_TO_ADDR
23121: GO 25376
23123: LD_INT 9
23125: DOUBLE
23126: EQUAL
23127: IFTRUE 23131
23129: GO 23279
23131: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23132: LD_ADDR_VAR 0 2
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: LD_INT 4
23142: PUSH
23143: LD_INT 5
23145: PUSH
23146: LD_INT 6
23148: PUSH
23149: LD_INT 7
23151: PUSH
23152: LD_INT 8
23154: PUSH
23155: LD_INT 11
23157: PUSH
23158: LD_INT 12
23160: PUSH
23161: LD_INT 15
23163: PUSH
23164: LD_INT 16
23166: PUSH
23167: LD_INT 20
23169: PUSH
23170: LD_INT 21
23172: PUSH
23173: LD_INT 22
23175: PUSH
23176: LD_INT 23
23178: PUSH
23179: LD_INT 25
23181: PUSH
23182: LD_INT 26
23184: PUSH
23185: LD_INT 28
23187: PUSH
23188: LD_INT 30
23190: PUSH
23191: LD_INT 31
23193: PUSH
23194: LD_INT 32
23196: PUSH
23197: LD_INT 36
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 101
23225: PUSH
23226: LD_INT 102
23228: PUSH
23229: LD_INT 103
23231: PUSH
23232: LD_INT 105
23234: PUSH
23235: LD_INT 106
23237: PUSH
23238: LD_INT 108
23240: PUSH
23241: LD_INT 109
23243: PUSH
23244: LD_INT 112
23246: PUSH
23247: LD_INT 114
23249: PUSH
23250: LD_INT 116
23252: PUSH
23253: LD_INT 117
23255: PUSH
23256: LD_INT 118
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: ST_TO_ADDR
23277: GO 25376
23279: LD_INT 10
23281: DOUBLE
23282: EQUAL
23283: IFTRUE 23287
23285: GO 23483
23287: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23288: LD_ADDR_VAR 0 2
23292: PUSH
23293: LD_INT 2
23295: PUSH
23296: LD_INT 4
23298: PUSH
23299: LD_INT 5
23301: PUSH
23302: LD_INT 6
23304: PUSH
23305: LD_INT 7
23307: PUSH
23308: LD_INT 8
23310: PUSH
23311: LD_INT 9
23313: PUSH
23314: LD_INT 10
23316: PUSH
23317: LD_INT 11
23319: PUSH
23320: LD_INT 12
23322: PUSH
23323: LD_INT 13
23325: PUSH
23326: LD_INT 14
23328: PUSH
23329: LD_INT 15
23331: PUSH
23332: LD_INT 16
23334: PUSH
23335: LD_INT 17
23337: PUSH
23338: LD_INT 18
23340: PUSH
23341: LD_INT 19
23343: PUSH
23344: LD_INT 20
23346: PUSH
23347: LD_INT 21
23349: PUSH
23350: LD_INT 22
23352: PUSH
23353: LD_INT 23
23355: PUSH
23356: LD_INT 24
23358: PUSH
23359: LD_INT 25
23361: PUSH
23362: LD_INT 26
23364: PUSH
23365: LD_INT 28
23367: PUSH
23368: LD_INT 30
23370: PUSH
23371: LD_INT 31
23373: PUSH
23374: LD_INT 32
23376: PUSH
23377: LD_INT 36
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 101
23413: PUSH
23414: LD_INT 102
23416: PUSH
23417: LD_INT 103
23419: PUSH
23420: LD_INT 104
23422: PUSH
23423: LD_INT 105
23425: PUSH
23426: LD_INT 106
23428: PUSH
23429: LD_INT 107
23431: PUSH
23432: LD_INT 108
23434: PUSH
23435: LD_INT 109
23437: PUSH
23438: LD_INT 110
23440: PUSH
23441: LD_INT 111
23443: PUSH
23444: LD_INT 112
23446: PUSH
23447: LD_INT 114
23449: PUSH
23450: LD_INT 116
23452: PUSH
23453: LD_INT 117
23455: PUSH
23456: LD_INT 118
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: ST_TO_ADDR
23481: GO 25376
23483: LD_INT 11
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23695
23491: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23492: LD_ADDR_VAR 0 2
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: LD_INT 3
23502: PUSH
23503: LD_INT 4
23505: PUSH
23506: LD_INT 5
23508: PUSH
23509: LD_INT 6
23511: PUSH
23512: LD_INT 7
23514: PUSH
23515: LD_INT 8
23517: PUSH
23518: LD_INT 9
23520: PUSH
23521: LD_INT 10
23523: PUSH
23524: LD_INT 11
23526: PUSH
23527: LD_INT 12
23529: PUSH
23530: LD_INT 13
23532: PUSH
23533: LD_INT 14
23535: PUSH
23536: LD_INT 15
23538: PUSH
23539: LD_INT 16
23541: PUSH
23542: LD_INT 17
23544: PUSH
23545: LD_INT 18
23547: PUSH
23548: LD_INT 19
23550: PUSH
23551: LD_INT 20
23553: PUSH
23554: LD_INT 21
23556: PUSH
23557: LD_INT 22
23559: PUSH
23560: LD_INT 23
23562: PUSH
23563: LD_INT 24
23565: PUSH
23566: LD_INT 25
23568: PUSH
23569: LD_INT 26
23571: PUSH
23572: LD_INT 28
23574: PUSH
23575: LD_INT 30
23577: PUSH
23578: LD_INT 31
23580: PUSH
23581: LD_INT 32
23583: PUSH
23584: LD_INT 34
23586: PUSH
23587: LD_INT 36
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 101
23625: PUSH
23626: LD_INT 102
23628: PUSH
23629: LD_INT 103
23631: PUSH
23632: LD_INT 104
23634: PUSH
23635: LD_INT 105
23637: PUSH
23638: LD_INT 106
23640: PUSH
23641: LD_INT 107
23643: PUSH
23644: LD_INT 108
23646: PUSH
23647: LD_INT 109
23649: PUSH
23650: LD_INT 110
23652: PUSH
23653: LD_INT 111
23655: PUSH
23656: LD_INT 112
23658: PUSH
23659: LD_INT 114
23661: PUSH
23662: LD_INT 116
23664: PUSH
23665: LD_INT 117
23667: PUSH
23668: LD_INT 118
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: ST_TO_ADDR
23693: GO 25376
23695: LD_INT 12
23697: DOUBLE
23698: EQUAL
23699: IFTRUE 23703
23701: GO 23923
23703: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23704: LD_ADDR_VAR 0 2
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: LD_INT 3
23717: PUSH
23718: LD_INT 4
23720: PUSH
23721: LD_INT 5
23723: PUSH
23724: LD_INT 6
23726: PUSH
23727: LD_INT 7
23729: PUSH
23730: LD_INT 8
23732: PUSH
23733: LD_INT 9
23735: PUSH
23736: LD_INT 10
23738: PUSH
23739: LD_INT 11
23741: PUSH
23742: LD_INT 12
23744: PUSH
23745: LD_INT 13
23747: PUSH
23748: LD_INT 14
23750: PUSH
23751: LD_INT 15
23753: PUSH
23754: LD_INT 16
23756: PUSH
23757: LD_INT 17
23759: PUSH
23760: LD_INT 18
23762: PUSH
23763: LD_INT 19
23765: PUSH
23766: LD_INT 20
23768: PUSH
23769: LD_INT 21
23771: PUSH
23772: LD_INT 22
23774: PUSH
23775: LD_INT 23
23777: PUSH
23778: LD_INT 24
23780: PUSH
23781: LD_INT 25
23783: PUSH
23784: LD_INT 26
23786: PUSH
23787: LD_INT 27
23789: PUSH
23790: LD_INT 28
23792: PUSH
23793: LD_INT 30
23795: PUSH
23796: LD_INT 31
23798: PUSH
23799: LD_INT 32
23801: PUSH
23802: LD_INT 33
23804: PUSH
23805: LD_INT 34
23807: PUSH
23808: LD_INT 36
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 101
23849: PUSH
23850: LD_INT 102
23852: PUSH
23853: LD_INT 103
23855: PUSH
23856: LD_INT 104
23858: PUSH
23859: LD_INT 105
23861: PUSH
23862: LD_INT 106
23864: PUSH
23865: LD_INT 107
23867: PUSH
23868: LD_INT 108
23870: PUSH
23871: LD_INT 109
23873: PUSH
23874: LD_INT 110
23876: PUSH
23877: LD_INT 111
23879: PUSH
23880: LD_INT 112
23882: PUSH
23883: LD_INT 113
23885: PUSH
23886: LD_INT 114
23888: PUSH
23889: LD_INT 116
23891: PUSH
23892: LD_INT 117
23894: PUSH
23895: LD_INT 118
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: ST_TO_ADDR
23921: GO 25376
23923: LD_INT 13
23925: DOUBLE
23926: EQUAL
23927: IFTRUE 23931
23929: GO 24139
23931: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23932: LD_ADDR_VAR 0 2
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: LD_INT 2
23942: PUSH
23943: LD_INT 3
23945: PUSH
23946: LD_INT 4
23948: PUSH
23949: LD_INT 5
23951: PUSH
23952: LD_INT 8
23954: PUSH
23955: LD_INT 9
23957: PUSH
23958: LD_INT 10
23960: PUSH
23961: LD_INT 11
23963: PUSH
23964: LD_INT 12
23966: PUSH
23967: LD_INT 14
23969: PUSH
23970: LD_INT 15
23972: PUSH
23973: LD_INT 16
23975: PUSH
23976: LD_INT 17
23978: PUSH
23979: LD_INT 18
23981: PUSH
23982: LD_INT 19
23984: PUSH
23985: LD_INT 20
23987: PUSH
23988: LD_INT 21
23990: PUSH
23991: LD_INT 22
23993: PUSH
23994: LD_INT 23
23996: PUSH
23997: LD_INT 24
23999: PUSH
24000: LD_INT 25
24002: PUSH
24003: LD_INT 26
24005: PUSH
24006: LD_INT 27
24008: PUSH
24009: LD_INT 28
24011: PUSH
24012: LD_INT 30
24014: PUSH
24015: LD_INT 31
24017: PUSH
24018: LD_INT 32
24020: PUSH
24021: LD_INT 33
24023: PUSH
24024: LD_INT 34
24026: PUSH
24027: LD_INT 36
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 101
24065: PUSH
24066: LD_INT 102
24068: PUSH
24069: LD_INT 103
24071: PUSH
24072: LD_INT 104
24074: PUSH
24075: LD_INT 105
24077: PUSH
24078: LD_INT 106
24080: PUSH
24081: LD_INT 107
24083: PUSH
24084: LD_INT 108
24086: PUSH
24087: LD_INT 109
24089: PUSH
24090: LD_INT 110
24092: PUSH
24093: LD_INT 111
24095: PUSH
24096: LD_INT 112
24098: PUSH
24099: LD_INT 113
24101: PUSH
24102: LD_INT 114
24104: PUSH
24105: LD_INT 116
24107: PUSH
24108: LD_INT 117
24110: PUSH
24111: LD_INT 118
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: ST_TO_ADDR
24137: GO 25376
24139: LD_INT 14
24141: DOUBLE
24142: EQUAL
24143: IFTRUE 24147
24145: GO 24371
24147: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24148: LD_ADDR_VAR 0 2
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: LD_INT 2
24158: PUSH
24159: LD_INT 3
24161: PUSH
24162: LD_INT 4
24164: PUSH
24165: LD_INT 5
24167: PUSH
24168: LD_INT 6
24170: PUSH
24171: LD_INT 7
24173: PUSH
24174: LD_INT 8
24176: PUSH
24177: LD_INT 9
24179: PUSH
24180: LD_INT 10
24182: PUSH
24183: LD_INT 11
24185: PUSH
24186: LD_INT 12
24188: PUSH
24189: LD_INT 13
24191: PUSH
24192: LD_INT 14
24194: PUSH
24195: LD_INT 15
24197: PUSH
24198: LD_INT 16
24200: PUSH
24201: LD_INT 17
24203: PUSH
24204: LD_INT 18
24206: PUSH
24207: LD_INT 19
24209: PUSH
24210: LD_INT 20
24212: PUSH
24213: LD_INT 21
24215: PUSH
24216: LD_INT 22
24218: PUSH
24219: LD_INT 23
24221: PUSH
24222: LD_INT 24
24224: PUSH
24225: LD_INT 25
24227: PUSH
24228: LD_INT 26
24230: PUSH
24231: LD_INT 27
24233: PUSH
24234: LD_INT 28
24236: PUSH
24237: LD_INT 29
24239: PUSH
24240: LD_INT 30
24242: PUSH
24243: LD_INT 31
24245: PUSH
24246: LD_INT 32
24248: PUSH
24249: LD_INT 33
24251: PUSH
24252: LD_INT 34
24254: PUSH
24255: LD_INT 36
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 101
24297: PUSH
24298: LD_INT 102
24300: PUSH
24301: LD_INT 103
24303: PUSH
24304: LD_INT 104
24306: PUSH
24307: LD_INT 105
24309: PUSH
24310: LD_INT 106
24312: PUSH
24313: LD_INT 107
24315: PUSH
24316: LD_INT 108
24318: PUSH
24319: LD_INT 109
24321: PUSH
24322: LD_INT 110
24324: PUSH
24325: LD_INT 111
24327: PUSH
24328: LD_INT 112
24330: PUSH
24331: LD_INT 113
24333: PUSH
24334: LD_INT 114
24336: PUSH
24337: LD_INT 116
24339: PUSH
24340: LD_INT 117
24342: PUSH
24343: LD_INT 118
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: ST_TO_ADDR
24369: GO 25376
24371: LD_INT 15
24373: DOUBLE
24374: EQUAL
24375: IFTRUE 24379
24377: GO 24603
24379: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24380: LD_ADDR_VAR 0 2
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: LD_INT 3
24393: PUSH
24394: LD_INT 4
24396: PUSH
24397: LD_INT 5
24399: PUSH
24400: LD_INT 6
24402: PUSH
24403: LD_INT 7
24405: PUSH
24406: LD_INT 8
24408: PUSH
24409: LD_INT 9
24411: PUSH
24412: LD_INT 10
24414: PUSH
24415: LD_INT 11
24417: PUSH
24418: LD_INT 12
24420: PUSH
24421: LD_INT 13
24423: PUSH
24424: LD_INT 14
24426: PUSH
24427: LD_INT 15
24429: PUSH
24430: LD_INT 16
24432: PUSH
24433: LD_INT 17
24435: PUSH
24436: LD_INT 18
24438: PUSH
24439: LD_INT 19
24441: PUSH
24442: LD_INT 20
24444: PUSH
24445: LD_INT 21
24447: PUSH
24448: LD_INT 22
24450: PUSH
24451: LD_INT 23
24453: PUSH
24454: LD_INT 24
24456: PUSH
24457: LD_INT 25
24459: PUSH
24460: LD_INT 26
24462: PUSH
24463: LD_INT 27
24465: PUSH
24466: LD_INT 28
24468: PUSH
24469: LD_INT 29
24471: PUSH
24472: LD_INT 30
24474: PUSH
24475: LD_INT 31
24477: PUSH
24478: LD_INT 32
24480: PUSH
24481: LD_INT 33
24483: PUSH
24484: LD_INT 34
24486: PUSH
24487: LD_INT 36
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 101
24529: PUSH
24530: LD_INT 102
24532: PUSH
24533: LD_INT 103
24535: PUSH
24536: LD_INT 104
24538: PUSH
24539: LD_INT 105
24541: PUSH
24542: LD_INT 106
24544: PUSH
24545: LD_INT 107
24547: PUSH
24548: LD_INT 108
24550: PUSH
24551: LD_INT 109
24553: PUSH
24554: LD_INT 110
24556: PUSH
24557: LD_INT 111
24559: PUSH
24560: LD_INT 112
24562: PUSH
24563: LD_INT 113
24565: PUSH
24566: LD_INT 114
24568: PUSH
24569: LD_INT 116
24571: PUSH
24572: LD_INT 117
24574: PUSH
24575: LD_INT 118
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: ST_TO_ADDR
24601: GO 25376
24603: LD_INT 16
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24747
24611: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24612: LD_ADDR_VAR 0 2
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: LD_INT 4
24622: PUSH
24623: LD_INT 5
24625: PUSH
24626: LD_INT 7
24628: PUSH
24629: LD_INT 11
24631: PUSH
24632: LD_INT 12
24634: PUSH
24635: LD_INT 15
24637: PUSH
24638: LD_INT 16
24640: PUSH
24641: LD_INT 20
24643: PUSH
24644: LD_INT 21
24646: PUSH
24647: LD_INT 22
24649: PUSH
24650: LD_INT 23
24652: PUSH
24653: LD_INT 25
24655: PUSH
24656: LD_INT 26
24658: PUSH
24659: LD_INT 30
24661: PUSH
24662: LD_INT 31
24664: PUSH
24665: LD_INT 32
24667: PUSH
24668: LD_INT 33
24670: PUSH
24671: LD_INT 34
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 101
24697: PUSH
24698: LD_INT 102
24700: PUSH
24701: LD_INT 103
24703: PUSH
24704: LD_INT 106
24706: PUSH
24707: LD_INT 108
24709: PUSH
24710: LD_INT 112
24712: PUSH
24713: LD_INT 113
24715: PUSH
24716: LD_INT 114
24718: PUSH
24719: LD_INT 116
24721: PUSH
24722: LD_INT 117
24724: PUSH
24725: LD_INT 118
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: ST_TO_ADDR
24745: GO 25376
24747: LD_INT 17
24749: DOUBLE
24750: EQUAL
24751: IFTRUE 24755
24753: GO 24979
24755: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24756: LD_ADDR_VAR 0 2
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: LD_INT 2
24766: PUSH
24767: LD_INT 3
24769: PUSH
24770: LD_INT 4
24772: PUSH
24773: LD_INT 5
24775: PUSH
24776: LD_INT 6
24778: PUSH
24779: LD_INT 7
24781: PUSH
24782: LD_INT 8
24784: PUSH
24785: LD_INT 9
24787: PUSH
24788: LD_INT 10
24790: PUSH
24791: LD_INT 11
24793: PUSH
24794: LD_INT 12
24796: PUSH
24797: LD_INT 13
24799: PUSH
24800: LD_INT 14
24802: PUSH
24803: LD_INT 15
24805: PUSH
24806: LD_INT 16
24808: PUSH
24809: LD_INT 17
24811: PUSH
24812: LD_INT 18
24814: PUSH
24815: LD_INT 19
24817: PUSH
24818: LD_INT 20
24820: PUSH
24821: LD_INT 21
24823: PUSH
24824: LD_INT 22
24826: PUSH
24827: LD_INT 23
24829: PUSH
24830: LD_INT 24
24832: PUSH
24833: LD_INT 25
24835: PUSH
24836: LD_INT 26
24838: PUSH
24839: LD_INT 27
24841: PUSH
24842: LD_INT 28
24844: PUSH
24845: LD_INT 29
24847: PUSH
24848: LD_INT 30
24850: PUSH
24851: LD_INT 31
24853: PUSH
24854: LD_INT 32
24856: PUSH
24857: LD_INT 33
24859: PUSH
24860: LD_INT 34
24862: PUSH
24863: LD_INT 36
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 101
24905: PUSH
24906: LD_INT 102
24908: PUSH
24909: LD_INT 103
24911: PUSH
24912: LD_INT 104
24914: PUSH
24915: LD_INT 105
24917: PUSH
24918: LD_INT 106
24920: PUSH
24921: LD_INT 107
24923: PUSH
24924: LD_INT 108
24926: PUSH
24927: LD_INT 109
24929: PUSH
24930: LD_INT 110
24932: PUSH
24933: LD_INT 111
24935: PUSH
24936: LD_INT 112
24938: PUSH
24939: LD_INT 113
24941: PUSH
24942: LD_INT 114
24944: PUSH
24945: LD_INT 116
24947: PUSH
24948: LD_INT 117
24950: PUSH
24951: LD_INT 118
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: ST_TO_ADDR
24977: GO 25376
24979: LD_INT 18
24981: DOUBLE
24982: EQUAL
24983: IFTRUE 24987
24985: GO 25135
24987: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24988: LD_ADDR_VAR 0 2
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: LD_INT 4
24998: PUSH
24999: LD_INT 5
25001: PUSH
25002: LD_INT 7
25004: PUSH
25005: LD_INT 11
25007: PUSH
25008: LD_INT 12
25010: PUSH
25011: LD_INT 15
25013: PUSH
25014: LD_INT 16
25016: PUSH
25017: LD_INT 20
25019: PUSH
25020: LD_INT 21
25022: PUSH
25023: LD_INT 22
25025: PUSH
25026: LD_INT 23
25028: PUSH
25029: LD_INT 25
25031: PUSH
25032: LD_INT 26
25034: PUSH
25035: LD_INT 30
25037: PUSH
25038: LD_INT 31
25040: PUSH
25041: LD_INT 32
25043: PUSH
25044: LD_INT 33
25046: PUSH
25047: LD_INT 34
25049: PUSH
25050: LD_INT 35
25052: PUSH
25053: LD_INT 36
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 101
25081: PUSH
25082: LD_INT 102
25084: PUSH
25085: LD_INT 103
25087: PUSH
25088: LD_INT 106
25090: PUSH
25091: LD_INT 108
25093: PUSH
25094: LD_INT 112
25096: PUSH
25097: LD_INT 113
25099: PUSH
25100: LD_INT 114
25102: PUSH
25103: LD_INT 115
25105: PUSH
25106: LD_INT 116
25108: PUSH
25109: LD_INT 117
25111: PUSH
25112: LD_INT 118
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: ST_TO_ADDR
25133: GO 25376
25135: LD_INT 19
25137: DOUBLE
25138: EQUAL
25139: IFTRUE 25143
25141: GO 25375
25143: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25144: LD_ADDR_VAR 0 2
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: LD_INT 2
25154: PUSH
25155: LD_INT 3
25157: PUSH
25158: LD_INT 4
25160: PUSH
25161: LD_INT 5
25163: PUSH
25164: LD_INT 6
25166: PUSH
25167: LD_INT 7
25169: PUSH
25170: LD_INT 8
25172: PUSH
25173: LD_INT 9
25175: PUSH
25176: LD_INT 10
25178: PUSH
25179: LD_INT 11
25181: PUSH
25182: LD_INT 12
25184: PUSH
25185: LD_INT 13
25187: PUSH
25188: LD_INT 14
25190: PUSH
25191: LD_INT 15
25193: PUSH
25194: LD_INT 16
25196: PUSH
25197: LD_INT 17
25199: PUSH
25200: LD_INT 18
25202: PUSH
25203: LD_INT 19
25205: PUSH
25206: LD_INT 20
25208: PUSH
25209: LD_INT 21
25211: PUSH
25212: LD_INT 22
25214: PUSH
25215: LD_INT 23
25217: PUSH
25218: LD_INT 24
25220: PUSH
25221: LD_INT 25
25223: PUSH
25224: LD_INT 26
25226: PUSH
25227: LD_INT 27
25229: PUSH
25230: LD_INT 28
25232: PUSH
25233: LD_INT 29
25235: PUSH
25236: LD_INT 30
25238: PUSH
25239: LD_INT 31
25241: PUSH
25242: LD_INT 32
25244: PUSH
25245: LD_INT 33
25247: PUSH
25248: LD_INT 34
25250: PUSH
25251: LD_INT 35
25253: PUSH
25254: LD_INT 36
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 101
25297: PUSH
25298: LD_INT 102
25300: PUSH
25301: LD_INT 103
25303: PUSH
25304: LD_INT 104
25306: PUSH
25307: LD_INT 105
25309: PUSH
25310: LD_INT 106
25312: PUSH
25313: LD_INT 107
25315: PUSH
25316: LD_INT 108
25318: PUSH
25319: LD_INT 109
25321: PUSH
25322: LD_INT 110
25324: PUSH
25325: LD_INT 111
25327: PUSH
25328: LD_INT 112
25330: PUSH
25331: LD_INT 113
25333: PUSH
25334: LD_INT 114
25336: PUSH
25337: LD_INT 115
25339: PUSH
25340: LD_INT 116
25342: PUSH
25343: LD_INT 117
25345: PUSH
25346: LD_INT 118
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: ST_TO_ADDR
25373: GO 25376
25375: POP
// end else
25376: GO 25607
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25378: LD_ADDR_VAR 0 2
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: LD_INT 2
25388: PUSH
25389: LD_INT 3
25391: PUSH
25392: LD_INT 4
25394: PUSH
25395: LD_INT 5
25397: PUSH
25398: LD_INT 6
25400: PUSH
25401: LD_INT 7
25403: PUSH
25404: LD_INT 8
25406: PUSH
25407: LD_INT 9
25409: PUSH
25410: LD_INT 10
25412: PUSH
25413: LD_INT 11
25415: PUSH
25416: LD_INT 12
25418: PUSH
25419: LD_INT 13
25421: PUSH
25422: LD_INT 14
25424: PUSH
25425: LD_INT 15
25427: PUSH
25428: LD_INT 16
25430: PUSH
25431: LD_INT 17
25433: PUSH
25434: LD_INT 18
25436: PUSH
25437: LD_INT 19
25439: PUSH
25440: LD_INT 20
25442: PUSH
25443: LD_INT 21
25445: PUSH
25446: LD_INT 22
25448: PUSH
25449: LD_INT 23
25451: PUSH
25452: LD_INT 24
25454: PUSH
25455: LD_INT 25
25457: PUSH
25458: LD_INT 26
25460: PUSH
25461: LD_INT 27
25463: PUSH
25464: LD_INT 28
25466: PUSH
25467: LD_INT 29
25469: PUSH
25470: LD_INT 30
25472: PUSH
25473: LD_INT 31
25475: PUSH
25476: LD_INT 32
25478: PUSH
25479: LD_INT 33
25481: PUSH
25482: LD_INT 34
25484: PUSH
25485: LD_INT 35
25487: PUSH
25488: LD_INT 36
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 101
25531: PUSH
25532: LD_INT 102
25534: PUSH
25535: LD_INT 103
25537: PUSH
25538: LD_INT 104
25540: PUSH
25541: LD_INT 105
25543: PUSH
25544: LD_INT 106
25546: PUSH
25547: LD_INT 107
25549: PUSH
25550: LD_INT 108
25552: PUSH
25553: LD_INT 109
25555: PUSH
25556: LD_INT 110
25558: PUSH
25559: LD_INT 111
25561: PUSH
25562: LD_INT 112
25564: PUSH
25565: LD_INT 113
25567: PUSH
25568: LD_INT 114
25570: PUSH
25571: LD_INT 115
25573: PUSH
25574: LD_INT 116
25576: PUSH
25577: LD_INT 117
25579: PUSH
25580: LD_INT 118
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: ST_TO_ADDR
// if result then
25607: LD_VAR 0 2
25611: IFFALSE 26397
// begin normal :=  ;
25613: LD_ADDR_VAR 0 5
25617: PUSH
25618: LD_STRING 
25620: ST_TO_ADDR
// hardcore :=  ;
25621: LD_ADDR_VAR 0 6
25625: PUSH
25626: LD_STRING 
25628: ST_TO_ADDR
// active :=  ;
25629: LD_ADDR_VAR 0 7
25633: PUSH
25634: LD_STRING 
25636: ST_TO_ADDR
// for i = 1 to normalCounter do
25637: LD_ADDR_VAR 0 8
25641: PUSH
25642: DOUBLE
25643: LD_INT 1
25645: DEC
25646: ST_TO_ADDR
25647: LD_EXP 39
25651: PUSH
25652: FOR_TO
25653: IFFALSE 25754
// begin tmp := 0 ;
25655: LD_ADDR_VAR 0 3
25659: PUSH
25660: LD_STRING 0
25662: ST_TO_ADDR
// if result [ 1 ] then
25663: LD_VAR 0 2
25667: PUSH
25668: LD_INT 1
25670: ARRAY
25671: IFFALSE 25736
// if result [ 1 ] [ 1 ] = i then
25673: LD_VAR 0 2
25677: PUSH
25678: LD_INT 1
25680: ARRAY
25681: PUSH
25682: LD_INT 1
25684: ARRAY
25685: PUSH
25686: LD_VAR 0 8
25690: EQUAL
25691: IFFALSE 25736
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25693: LD_ADDR_VAR 0 2
25697: PUSH
25698: LD_VAR 0 2
25702: PPUSH
25703: LD_INT 1
25705: PPUSH
25706: LD_VAR 0 2
25710: PUSH
25711: LD_INT 1
25713: ARRAY
25714: PPUSH
25715: LD_INT 1
25717: PPUSH
25718: CALL_OW 3
25722: PPUSH
25723: CALL_OW 1
25727: ST_TO_ADDR
// tmp := 1 ;
25728: LD_ADDR_VAR 0 3
25732: PUSH
25733: LD_STRING 1
25735: ST_TO_ADDR
// end ; normal := normal & tmp ;
25736: LD_ADDR_VAR 0 5
25740: PUSH
25741: LD_VAR 0 5
25745: PUSH
25746: LD_VAR 0 3
25750: STR
25751: ST_TO_ADDR
// end ;
25752: GO 25652
25754: POP
25755: POP
// for i = 1 to hardcoreCounter do
25756: LD_ADDR_VAR 0 8
25760: PUSH
25761: DOUBLE
25762: LD_INT 1
25764: DEC
25765: ST_TO_ADDR
25766: LD_EXP 40
25770: PUSH
25771: FOR_TO
25772: IFFALSE 25877
// begin tmp := 0 ;
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: LD_STRING 0
25781: ST_TO_ADDR
// if result [ 2 ] then
25782: LD_VAR 0 2
25786: PUSH
25787: LD_INT 2
25789: ARRAY
25790: IFFALSE 25859
// if result [ 2 ] [ 1 ] = 100 + i then
25792: LD_VAR 0 2
25796: PUSH
25797: LD_INT 2
25799: ARRAY
25800: PUSH
25801: LD_INT 1
25803: ARRAY
25804: PUSH
25805: LD_INT 100
25807: PUSH
25808: LD_VAR 0 8
25812: PLUS
25813: EQUAL
25814: IFFALSE 25859
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25816: LD_ADDR_VAR 0 2
25820: PUSH
25821: LD_VAR 0 2
25825: PPUSH
25826: LD_INT 2
25828: PPUSH
25829: LD_VAR 0 2
25833: PUSH
25834: LD_INT 2
25836: ARRAY
25837: PPUSH
25838: LD_INT 1
25840: PPUSH
25841: CALL_OW 3
25845: PPUSH
25846: CALL_OW 1
25850: ST_TO_ADDR
// tmp := 1 ;
25851: LD_ADDR_VAR 0 3
25855: PUSH
25856: LD_STRING 1
25858: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25859: LD_ADDR_VAR 0 6
25863: PUSH
25864: LD_VAR 0 6
25868: PUSH
25869: LD_VAR 0 3
25873: STR
25874: ST_TO_ADDR
// end ;
25875: GO 25771
25877: POP
25878: POP
// if isGameLoad then
25879: LD_VAR 0 1
25883: IFFALSE 26358
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25885: LD_ADDR_VAR 0 4
25889: PUSH
25890: LD_EXP 43
25894: PUSH
25895: LD_EXP 42
25899: PUSH
25900: LD_EXP 44
25904: PUSH
25905: LD_EXP 41
25909: PUSH
25910: LD_EXP 45
25914: PUSH
25915: LD_EXP 46
25919: PUSH
25920: LD_EXP 47
25924: PUSH
25925: LD_EXP 48
25929: PUSH
25930: LD_EXP 49
25934: PUSH
25935: LD_EXP 50
25939: PUSH
25940: LD_EXP 51
25944: PUSH
25945: LD_EXP 52
25949: PUSH
25950: LD_EXP 53
25954: PUSH
25955: LD_EXP 54
25959: PUSH
25960: LD_EXP 62
25964: PUSH
25965: LD_EXP 63
25969: PUSH
25970: LD_EXP 64
25974: PUSH
25975: LD_EXP 65
25979: PUSH
25980: LD_EXP 67
25984: PUSH
25985: LD_EXP 68
25989: PUSH
25990: LD_EXP 69
25994: PUSH
25995: LD_EXP 72
25999: PUSH
26000: LD_EXP 74
26004: PUSH
26005: LD_EXP 75
26009: PUSH
26010: LD_EXP 76
26014: PUSH
26015: LD_EXP 78
26019: PUSH
26020: LD_EXP 79
26024: PUSH
26025: LD_EXP 82
26029: PUSH
26030: LD_EXP 83
26034: PUSH
26035: LD_EXP 84
26039: PUSH
26040: LD_EXP 85
26044: PUSH
26045: LD_EXP 86
26049: PUSH
26050: LD_EXP 87
26054: PUSH
26055: LD_EXP 88
26059: PUSH
26060: LD_EXP 89
26064: PUSH
26065: LD_EXP 90
26069: PUSH
26070: LD_EXP 55
26074: PUSH
26075: LD_EXP 56
26079: PUSH
26080: LD_EXP 59
26084: PUSH
26085: LD_EXP 60
26089: PUSH
26090: LD_EXP 61
26094: PUSH
26095: LD_EXP 57
26099: PUSH
26100: LD_EXP 58
26104: PUSH
26105: LD_EXP 66
26109: PUSH
26110: LD_EXP 70
26114: PUSH
26115: LD_EXP 71
26119: PUSH
26120: LD_EXP 73
26124: PUSH
26125: LD_EXP 77
26129: PUSH
26130: LD_EXP 80
26134: PUSH
26135: LD_EXP 81
26139: PUSH
26140: LD_EXP 91
26144: PUSH
26145: LD_EXP 92
26149: PUSH
26150: LD_EXP 93
26154: PUSH
26155: LD_EXP 94
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: ST_TO_ADDR
// tmp :=  ;
26216: LD_ADDR_VAR 0 3
26220: PUSH
26221: LD_STRING 
26223: ST_TO_ADDR
// for i = 1 to normalCounter do
26224: LD_ADDR_VAR 0 8
26228: PUSH
26229: DOUBLE
26230: LD_INT 1
26232: DEC
26233: ST_TO_ADDR
26234: LD_EXP 39
26238: PUSH
26239: FOR_TO
26240: IFFALSE 26276
// begin if flags [ i ] then
26242: LD_VAR 0 4
26246: PUSH
26247: LD_VAR 0 8
26251: ARRAY
26252: IFFALSE 26274
// tmp := tmp & i & ; ;
26254: LD_ADDR_VAR 0 3
26258: PUSH
26259: LD_VAR 0 3
26263: PUSH
26264: LD_VAR 0 8
26268: STR
26269: PUSH
26270: LD_STRING ;
26272: STR
26273: ST_TO_ADDR
// end ;
26274: GO 26239
26276: POP
26277: POP
// for i = 1 to hardcoreCounter do
26278: LD_ADDR_VAR 0 8
26282: PUSH
26283: DOUBLE
26284: LD_INT 1
26286: DEC
26287: ST_TO_ADDR
26288: LD_EXP 40
26292: PUSH
26293: FOR_TO
26294: IFFALSE 26340
// begin if flags [ normalCounter + i ] then
26296: LD_VAR 0 4
26300: PUSH
26301: LD_EXP 39
26305: PUSH
26306: LD_VAR 0 8
26310: PLUS
26311: ARRAY
26312: IFFALSE 26338
// tmp := tmp & ( 100 + i ) & ; ;
26314: LD_ADDR_VAR 0 3
26318: PUSH
26319: LD_VAR 0 3
26323: PUSH
26324: LD_INT 100
26326: PUSH
26327: LD_VAR 0 8
26331: PLUS
26332: STR
26333: PUSH
26334: LD_STRING ;
26336: STR
26337: ST_TO_ADDR
// end ;
26338: GO 26293
26340: POP
26341: POP
// if tmp then
26342: LD_VAR 0 3
26346: IFFALSE 26358
// active := tmp ;
26348: LD_ADDR_VAR 0 7
26352: PUSH
26353: LD_VAR 0 3
26357: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26358: LD_STRING getStreamItemsFromMission("
26360: PUSH
26361: LD_VAR 0 5
26365: STR
26366: PUSH
26367: LD_STRING ","
26369: STR
26370: PUSH
26371: LD_VAR 0 6
26375: STR
26376: PUSH
26377: LD_STRING ","
26379: STR
26380: PUSH
26381: LD_VAR 0 7
26385: STR
26386: PUSH
26387: LD_STRING ")
26389: STR
26390: PPUSH
26391: CALL_OW 559
// end else
26395: GO 26404
// ToLua ( getStreamItemsFromMission("","","") ) ;
26397: LD_STRING getStreamItemsFromMission("","","")
26399: PPUSH
26400: CALL_OW 559
// end ;
26404: LD_VAR 0 2
26408: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26409: LD_EXP 38
26413: PUSH
26414: LD_EXP 43
26418: AND
26419: IFFALSE 26543
26421: GO 26423
26423: DISABLE
26424: LD_INT 0
26426: PPUSH
26427: PPUSH
// begin enable ;
26428: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26429: LD_ADDR_VAR 0 2
26433: PUSH
26434: LD_INT 22
26436: PUSH
26437: LD_OWVAR 2
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 2
26448: PUSH
26449: LD_INT 34
26451: PUSH
26452: LD_INT 7
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 34
26461: PUSH
26462: LD_INT 45
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 34
26471: PUSH
26472: LD_INT 28
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 34
26481: PUSH
26482: LD_INT 47
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PPUSH
26500: CALL_OW 69
26504: ST_TO_ADDR
// if not tmp then
26505: LD_VAR 0 2
26509: NOT
26510: IFFALSE 26514
// exit ;
26512: GO 26543
// for i in tmp do
26514: LD_ADDR_VAR 0 1
26518: PUSH
26519: LD_VAR 0 2
26523: PUSH
26524: FOR_IN
26525: IFFALSE 26541
// begin SetLives ( i , 0 ) ;
26527: LD_VAR 0 1
26531: PPUSH
26532: LD_INT 0
26534: PPUSH
26535: CALL_OW 234
// end ;
26539: GO 26524
26541: POP
26542: POP
// end ;
26543: PPOPN 2
26545: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26546: LD_EXP 38
26550: PUSH
26551: LD_EXP 44
26555: AND
26556: IFFALSE 26640
26558: GO 26560
26560: DISABLE
26561: LD_INT 0
26563: PPUSH
26564: PPUSH
// begin enable ;
26565: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26566: LD_ADDR_VAR 0 2
26570: PUSH
26571: LD_INT 22
26573: PUSH
26574: LD_OWVAR 2
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 32
26585: PUSH
26586: LD_INT 3
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PPUSH
26597: CALL_OW 69
26601: ST_TO_ADDR
// if not tmp then
26602: LD_VAR 0 2
26606: NOT
26607: IFFALSE 26611
// exit ;
26609: GO 26640
// for i in tmp do
26611: LD_ADDR_VAR 0 1
26615: PUSH
26616: LD_VAR 0 2
26620: PUSH
26621: FOR_IN
26622: IFFALSE 26638
// begin SetLives ( i , 0 ) ;
26624: LD_VAR 0 1
26628: PPUSH
26629: LD_INT 0
26631: PPUSH
26632: CALL_OW 234
// end ;
26636: GO 26621
26638: POP
26639: POP
// end ;
26640: PPOPN 2
26642: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26643: LD_EXP 38
26647: PUSH
26648: LD_EXP 41
26652: AND
26653: IFFALSE 26746
26655: GO 26657
26657: DISABLE
26658: LD_INT 0
26660: PPUSH
// begin enable ;
26661: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26662: LD_ADDR_VAR 0 1
26666: PUSH
26667: LD_INT 22
26669: PUSH
26670: LD_OWVAR 2
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: LD_INT 25
26684: PUSH
26685: LD_INT 5
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 25
26694: PUSH
26695: LD_INT 9
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 25
26704: PUSH
26705: LD_INT 8
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PPUSH
26722: CALL_OW 69
26726: PUSH
26727: FOR_IN
26728: IFFALSE 26744
// begin SetClass ( i , 1 ) ;
26730: LD_VAR 0 1
26734: PPUSH
26735: LD_INT 1
26737: PPUSH
26738: CALL_OW 336
// end ;
26742: GO 26727
26744: POP
26745: POP
// end ;
26746: PPOPN 1
26748: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26749: LD_EXP 38
26753: PUSH
26754: LD_EXP 42
26758: AND
26759: PUSH
26760: LD_OWVAR 65
26764: PUSH
26765: LD_INT 7
26767: LESS
26768: AND
26769: IFFALSE 26783
26771: GO 26773
26773: DISABLE
// begin enable ;
26774: ENABLE
// game_speed := 7 ;
26775: LD_ADDR_OWVAR 65
26779: PUSH
26780: LD_INT 7
26782: ST_TO_ADDR
// end ;
26783: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26784: LD_EXP 38
26788: PUSH
26789: LD_EXP 45
26793: AND
26794: IFFALSE 26996
26796: GO 26798
26798: DISABLE
26799: LD_INT 0
26801: PPUSH
26802: PPUSH
26803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26804: LD_ADDR_VAR 0 3
26808: PUSH
26809: LD_INT 81
26811: PUSH
26812: LD_OWVAR 2
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 21
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PPUSH
26835: CALL_OW 69
26839: ST_TO_ADDR
// if not tmp then
26840: LD_VAR 0 3
26844: NOT
26845: IFFALSE 26849
// exit ;
26847: GO 26996
// if tmp > 5 then
26849: LD_VAR 0 3
26853: PUSH
26854: LD_INT 5
26856: GREATER
26857: IFFALSE 26869
// k := 5 else
26859: LD_ADDR_VAR 0 2
26863: PUSH
26864: LD_INT 5
26866: ST_TO_ADDR
26867: GO 26879
// k := tmp ;
26869: LD_ADDR_VAR 0 2
26873: PUSH
26874: LD_VAR 0 3
26878: ST_TO_ADDR
// for i := 1 to k do
26879: LD_ADDR_VAR 0 1
26883: PUSH
26884: DOUBLE
26885: LD_INT 1
26887: DEC
26888: ST_TO_ADDR
26889: LD_VAR 0 2
26893: PUSH
26894: FOR_TO
26895: IFFALSE 26994
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26897: LD_VAR 0 3
26901: PUSH
26902: LD_VAR 0 1
26906: ARRAY
26907: PPUSH
26908: LD_VAR 0 1
26912: PUSH
26913: LD_INT 4
26915: MOD
26916: PUSH
26917: LD_INT 1
26919: PLUS
26920: PPUSH
26921: CALL_OW 259
26925: PUSH
26926: LD_INT 10
26928: LESS
26929: IFFALSE 26992
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26931: LD_VAR 0 3
26935: PUSH
26936: LD_VAR 0 1
26940: ARRAY
26941: PPUSH
26942: LD_VAR 0 1
26946: PUSH
26947: LD_INT 4
26949: MOD
26950: PUSH
26951: LD_INT 1
26953: PLUS
26954: PPUSH
26955: LD_VAR 0 3
26959: PUSH
26960: LD_VAR 0 1
26964: ARRAY
26965: PPUSH
26966: LD_VAR 0 1
26970: PUSH
26971: LD_INT 4
26973: MOD
26974: PUSH
26975: LD_INT 1
26977: PLUS
26978: PPUSH
26979: CALL_OW 259
26983: PUSH
26984: LD_INT 1
26986: PLUS
26987: PPUSH
26988: CALL_OW 237
26992: GO 26894
26994: POP
26995: POP
// end ;
26996: PPOPN 3
26998: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26999: LD_EXP 38
27003: PUSH
27004: LD_EXP 46
27008: AND
27009: IFFALSE 27029
27011: GO 27013
27013: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27014: LD_INT 4
27016: PPUSH
27017: LD_OWVAR 2
27021: PPUSH
27022: LD_INT 0
27024: PPUSH
27025: CALL_OW 324
27029: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27030: LD_EXP 38
27034: PUSH
27035: LD_EXP 75
27039: AND
27040: IFFALSE 27060
27042: GO 27044
27044: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27045: LD_INT 19
27047: PPUSH
27048: LD_OWVAR 2
27052: PPUSH
27053: LD_INT 0
27055: PPUSH
27056: CALL_OW 324
27060: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27061: LD_EXP 38
27065: PUSH
27066: LD_EXP 47
27070: AND
27071: IFFALSE 27173
27073: GO 27075
27075: DISABLE
27076: LD_INT 0
27078: PPUSH
27079: PPUSH
// begin enable ;
27080: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27081: LD_ADDR_VAR 0 2
27085: PUSH
27086: LD_INT 22
27088: PUSH
27089: LD_OWVAR 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: LD_INT 34
27103: PUSH
27104: LD_INT 11
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 34
27113: PUSH
27114: LD_INT 30
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PPUSH
27130: CALL_OW 69
27134: ST_TO_ADDR
// if not tmp then
27135: LD_VAR 0 2
27139: NOT
27140: IFFALSE 27144
// exit ;
27142: GO 27173
// for i in tmp do
27144: LD_ADDR_VAR 0 1
27148: PUSH
27149: LD_VAR 0 2
27153: PUSH
27154: FOR_IN
27155: IFFALSE 27171
// begin SetLives ( i , 0 ) ;
27157: LD_VAR 0 1
27161: PPUSH
27162: LD_INT 0
27164: PPUSH
27165: CALL_OW 234
// end ;
27169: GO 27154
27171: POP
27172: POP
// end ;
27173: PPOPN 2
27175: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27176: LD_EXP 38
27180: PUSH
27181: LD_EXP 48
27185: AND
27186: IFFALSE 27206
27188: GO 27190
27190: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27191: LD_INT 32
27193: PPUSH
27194: LD_OWVAR 2
27198: PPUSH
27199: LD_INT 0
27201: PPUSH
27202: CALL_OW 324
27206: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27207: LD_EXP 38
27211: PUSH
27212: LD_EXP 49
27216: AND
27217: IFFALSE 27398
27219: GO 27221
27221: DISABLE
27222: LD_INT 0
27224: PPUSH
27225: PPUSH
27226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27227: LD_ADDR_VAR 0 2
27231: PUSH
27232: LD_INT 22
27234: PUSH
27235: LD_OWVAR 2
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 33
27246: PUSH
27247: LD_INT 3
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PPUSH
27258: CALL_OW 69
27262: ST_TO_ADDR
// if not tmp then
27263: LD_VAR 0 2
27267: NOT
27268: IFFALSE 27272
// exit ;
27270: GO 27398
// side := 0 ;
27272: LD_ADDR_VAR 0 3
27276: PUSH
27277: LD_INT 0
27279: ST_TO_ADDR
// for i := 1 to 8 do
27280: LD_ADDR_VAR 0 1
27284: PUSH
27285: DOUBLE
27286: LD_INT 1
27288: DEC
27289: ST_TO_ADDR
27290: LD_INT 8
27292: PUSH
27293: FOR_TO
27294: IFFALSE 27342
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27296: LD_OWVAR 2
27300: PUSH
27301: LD_VAR 0 1
27305: NONEQUAL
27306: PUSH
27307: LD_OWVAR 2
27311: PPUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL_OW 81
27321: PUSH
27322: LD_INT 2
27324: EQUAL
27325: AND
27326: IFFALSE 27340
// begin side := i ;
27328: LD_ADDR_VAR 0 3
27332: PUSH
27333: LD_VAR 0 1
27337: ST_TO_ADDR
// break ;
27338: GO 27342
// end ;
27340: GO 27293
27342: POP
27343: POP
// if not side then
27344: LD_VAR 0 3
27348: NOT
27349: IFFALSE 27353
// exit ;
27351: GO 27398
// for i := 1 to tmp do
27353: LD_ADDR_VAR 0 1
27357: PUSH
27358: DOUBLE
27359: LD_INT 1
27361: DEC
27362: ST_TO_ADDR
27363: LD_VAR 0 2
27367: PUSH
27368: FOR_TO
27369: IFFALSE 27396
// if Prob ( 60 ) then
27371: LD_INT 60
27373: PPUSH
27374: CALL_OW 13
27378: IFFALSE 27394
// SetSide ( i , side ) ;
27380: LD_VAR 0 1
27384: PPUSH
27385: LD_VAR 0 3
27389: PPUSH
27390: CALL_OW 235
27394: GO 27368
27396: POP
27397: POP
// end ;
27398: PPOPN 3
27400: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27401: LD_EXP 38
27405: PUSH
27406: LD_EXP 51
27410: AND
27411: IFFALSE 27530
27413: GO 27415
27415: DISABLE
27416: LD_INT 0
27418: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27419: LD_ADDR_VAR 0 1
27423: PUSH
27424: LD_INT 22
27426: PUSH
27427: LD_OWVAR 2
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 21
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 3
27448: PUSH
27449: LD_INT 23
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: LIST
27467: PPUSH
27468: CALL_OW 69
27472: PUSH
27473: FOR_IN
27474: IFFALSE 27528
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27476: LD_VAR 0 1
27480: PPUSH
27481: CALL_OW 257
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 2
27491: PUSH
27492: LD_INT 3
27494: PUSH
27495: LD_INT 4
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: IN
27504: IFFALSE 27526
// SetClass ( un , rand ( 1 , 4 ) ) ;
27506: LD_VAR 0 1
27510: PPUSH
27511: LD_INT 1
27513: PPUSH
27514: LD_INT 4
27516: PPUSH
27517: CALL_OW 12
27521: PPUSH
27522: CALL_OW 336
27526: GO 27473
27528: POP
27529: POP
// end ;
27530: PPOPN 1
27532: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27533: LD_EXP 38
27537: PUSH
27538: LD_EXP 50
27542: AND
27543: IFFALSE 27622
27545: GO 27547
27547: DISABLE
27548: LD_INT 0
27550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27551: LD_ADDR_VAR 0 1
27555: PUSH
27556: LD_INT 22
27558: PUSH
27559: LD_OWVAR 2
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 21
27570: PUSH
27571: LD_INT 3
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PPUSH
27582: CALL_OW 69
27586: ST_TO_ADDR
// if not tmp then
27587: LD_VAR 0 1
27591: NOT
27592: IFFALSE 27596
// exit ;
27594: GO 27622
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27596: LD_VAR 0 1
27600: PUSH
27601: LD_INT 1
27603: PPUSH
27604: LD_VAR 0 1
27608: PPUSH
27609: CALL_OW 12
27613: ARRAY
27614: PPUSH
27615: LD_INT 100
27617: PPUSH
27618: CALL_OW 234
// end ;
27622: PPOPN 1
27624: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27625: LD_EXP 38
27629: PUSH
27630: LD_EXP 52
27634: AND
27635: IFFALSE 27733
27637: GO 27639
27639: DISABLE
27640: LD_INT 0
27642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27643: LD_ADDR_VAR 0 1
27647: PUSH
27648: LD_INT 22
27650: PUSH
27651: LD_OWVAR 2
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 21
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PPUSH
27674: CALL_OW 69
27678: ST_TO_ADDR
// if not tmp then
27679: LD_VAR 0 1
27683: NOT
27684: IFFALSE 27688
// exit ;
27686: GO 27733
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27688: LD_VAR 0 1
27692: PUSH
27693: LD_INT 1
27695: PPUSH
27696: LD_VAR 0 1
27700: PPUSH
27701: CALL_OW 12
27705: ARRAY
27706: PPUSH
27707: LD_INT 1
27709: PPUSH
27710: LD_INT 4
27712: PPUSH
27713: CALL_OW 12
27717: PPUSH
27718: LD_INT 3000
27720: PPUSH
27721: LD_INT 9000
27723: PPUSH
27724: CALL_OW 12
27728: PPUSH
27729: CALL_OW 492
// end ;
27733: PPOPN 1
27735: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27736: LD_EXP 38
27740: PUSH
27741: LD_EXP 53
27745: AND
27746: IFFALSE 27766
27748: GO 27750
27750: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27751: LD_INT 1
27753: PPUSH
27754: LD_OWVAR 2
27758: PPUSH
27759: LD_INT 0
27761: PPUSH
27762: CALL_OW 324
27766: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27767: LD_EXP 38
27771: PUSH
27772: LD_EXP 54
27776: AND
27777: IFFALSE 27860
27779: GO 27781
27781: DISABLE
27782: LD_INT 0
27784: PPUSH
27785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27786: LD_ADDR_VAR 0 2
27790: PUSH
27791: LD_INT 22
27793: PUSH
27794: LD_OWVAR 2
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 21
27805: PUSH
27806: LD_INT 3
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PPUSH
27817: CALL_OW 69
27821: ST_TO_ADDR
// if not tmp then
27822: LD_VAR 0 2
27826: NOT
27827: IFFALSE 27831
// exit ;
27829: GO 27860
// for i in tmp do
27831: LD_ADDR_VAR 0 1
27835: PUSH
27836: LD_VAR 0 2
27840: PUSH
27841: FOR_IN
27842: IFFALSE 27858
// SetBLevel ( i , 10 ) ;
27844: LD_VAR 0 1
27848: PPUSH
27849: LD_INT 10
27851: PPUSH
27852: CALL_OW 241
27856: GO 27841
27858: POP
27859: POP
// end ;
27860: PPOPN 2
27862: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27863: LD_EXP 38
27867: PUSH
27868: LD_EXP 55
27872: AND
27873: IFFALSE 27984
27875: GO 27877
27877: DISABLE
27878: LD_INT 0
27880: PPUSH
27881: PPUSH
27882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_INT 22
27890: PUSH
27891: LD_OWVAR 2
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 25
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: ST_TO_ADDR
// if not tmp then
27919: LD_VAR 0 3
27923: NOT
27924: IFFALSE 27928
// exit ;
27926: GO 27984
// un := tmp [ rand ( 1 , tmp ) ] ;
27928: LD_ADDR_VAR 0 2
27932: PUSH
27933: LD_VAR 0 3
27937: PUSH
27938: LD_INT 1
27940: PPUSH
27941: LD_VAR 0 3
27945: PPUSH
27946: CALL_OW 12
27950: ARRAY
27951: ST_TO_ADDR
// if Crawls ( un ) then
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 318
27961: IFFALSE 27972
// ComWalk ( un ) ;
27963: LD_VAR 0 2
27967: PPUSH
27968: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_INT 5
27979: PPUSH
27980: CALL_OW 336
// end ;
27984: PPOPN 3
27986: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27987: LD_EXP 38
27991: PUSH
27992: LD_EXP 56
27996: AND
27997: PUSH
27998: LD_OWVAR 67
28002: PUSH
28003: LD_INT 4
28005: LESS
28006: AND
28007: IFFALSE 28026
28009: GO 28011
28011: DISABLE
// begin Difficulty := Difficulty + 1 ;
28012: LD_ADDR_OWVAR 67
28016: PUSH
28017: LD_OWVAR 67
28021: PUSH
28022: LD_INT 1
28024: PLUS
28025: ST_TO_ADDR
// end ;
28026: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28027: LD_EXP 38
28031: PUSH
28032: LD_EXP 57
28036: AND
28037: IFFALSE 28140
28039: GO 28041
28041: DISABLE
28042: LD_INT 0
28044: PPUSH
// begin for i := 1 to 5 do
28045: LD_ADDR_VAR 0 1
28049: PUSH
28050: DOUBLE
28051: LD_INT 1
28053: DEC
28054: ST_TO_ADDR
28055: LD_INT 5
28057: PUSH
28058: FOR_TO
28059: IFFALSE 28138
// begin uc_nation := nation_nature ;
28061: LD_ADDR_OWVAR 21
28065: PUSH
28066: LD_INT 0
28068: ST_TO_ADDR
// uc_side := 0 ;
28069: LD_ADDR_OWVAR 20
28073: PUSH
28074: LD_INT 0
28076: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28077: LD_ADDR_OWVAR 29
28081: PUSH
28082: LD_INT 12
28084: PUSH
28085: LD_INT 12
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: ST_TO_ADDR
// hc_agressivity := 20 ;
28092: LD_ADDR_OWVAR 35
28096: PUSH
28097: LD_INT 20
28099: ST_TO_ADDR
// hc_class := class_tiger ;
28100: LD_ADDR_OWVAR 28
28104: PUSH
28105: LD_INT 14
28107: ST_TO_ADDR
// hc_gallery :=  ;
28108: LD_ADDR_OWVAR 33
28112: PUSH
28113: LD_STRING 
28115: ST_TO_ADDR
// hc_name :=  ;
28116: LD_ADDR_OWVAR 26
28120: PUSH
28121: LD_STRING 
28123: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28124: CALL_OW 44
28128: PPUSH
28129: LD_INT 0
28131: PPUSH
28132: CALL_OW 51
// end ;
28136: GO 28058
28138: POP
28139: POP
// end ;
28140: PPOPN 1
28142: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28143: LD_EXP 38
28147: PUSH
28148: LD_EXP 58
28152: AND
28153: IFFALSE 28162
28155: GO 28157
28157: DISABLE
// StreamSibBomb ;
28158: CALL 28163 0 0
28162: END
// export function StreamSibBomb ; var i , x , y ; begin
28163: LD_INT 0
28165: PPUSH
28166: PPUSH
28167: PPUSH
28168: PPUSH
// result := false ;
28169: LD_ADDR_VAR 0 1
28173: PUSH
28174: LD_INT 0
28176: ST_TO_ADDR
// for i := 1 to 16 do
28177: LD_ADDR_VAR 0 2
28181: PUSH
28182: DOUBLE
28183: LD_INT 1
28185: DEC
28186: ST_TO_ADDR
28187: LD_INT 16
28189: PUSH
28190: FOR_TO
28191: IFFALSE 28390
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: LD_INT 10
28200: PUSH
28201: LD_INT 20
28203: PUSH
28204: LD_INT 30
28206: PUSH
28207: LD_INT 40
28209: PUSH
28210: LD_INT 50
28212: PUSH
28213: LD_INT 60
28215: PUSH
28216: LD_INT 70
28218: PUSH
28219: LD_INT 80
28221: PUSH
28222: LD_INT 90
28224: PUSH
28225: LD_INT 100
28227: PUSH
28228: LD_INT 110
28230: PUSH
28231: LD_INT 120
28233: PUSH
28234: LD_INT 130
28236: PUSH
28237: LD_INT 140
28239: PUSH
28240: LD_INT 150
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PPUSH
28263: LD_INT 15
28265: PPUSH
28266: CALL_OW 12
28270: ARRAY
28271: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28272: LD_ADDR_VAR 0 4
28276: PUSH
28277: LD_INT 10
28279: PUSH
28280: LD_INT 20
28282: PUSH
28283: LD_INT 30
28285: PUSH
28286: LD_INT 40
28288: PUSH
28289: LD_INT 50
28291: PUSH
28292: LD_INT 60
28294: PUSH
28295: LD_INT 70
28297: PUSH
28298: LD_INT 80
28300: PUSH
28301: LD_INT 90
28303: PUSH
28304: LD_INT 100
28306: PUSH
28307: LD_INT 110
28309: PUSH
28310: LD_INT 120
28312: PUSH
28313: LD_INT 130
28315: PUSH
28316: LD_INT 140
28318: PUSH
28319: LD_INT 150
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: PPUSH
28342: LD_INT 15
28344: PPUSH
28345: CALL_OW 12
28349: ARRAY
28350: ST_TO_ADDR
// if ValidHex ( x , y ) then
28351: LD_VAR 0 3
28355: PPUSH
28356: LD_VAR 0 4
28360: PPUSH
28361: CALL_OW 488
28365: IFFALSE 28388
// begin result := [ x , y ] ;
28367: LD_ADDR_VAR 0 1
28371: PUSH
28372: LD_VAR 0 3
28376: PUSH
28377: LD_VAR 0 4
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: ST_TO_ADDR
// break ;
28386: GO 28390
// end ; end ;
28388: GO 28190
28390: POP
28391: POP
// if result then
28392: LD_VAR 0 1
28396: IFFALSE 28456
// begin ToLua ( playSibBomb() ) ;
28398: LD_STRING playSibBomb()
28400: PPUSH
28401: CALL_OW 559
// wait ( 0 0$14 ) ;
28405: LD_INT 490
28407: PPUSH
28408: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28412: LD_VAR 0 1
28416: PUSH
28417: LD_INT 1
28419: ARRAY
28420: PPUSH
28421: LD_VAR 0 1
28425: PUSH
28426: LD_INT 2
28428: ARRAY
28429: PPUSH
28430: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28434: LD_VAR 0 1
28438: PUSH
28439: LD_INT 1
28441: ARRAY
28442: PPUSH
28443: LD_VAR 0 1
28447: PUSH
28448: LD_INT 2
28450: ARRAY
28451: PPUSH
28452: CALL_OW 429
// end ; end ;
28456: LD_VAR 0 1
28460: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28461: LD_EXP 38
28465: PUSH
28466: LD_EXP 60
28470: AND
28471: IFFALSE 28483
28473: GO 28475
28475: DISABLE
// YouLost (  ) ;
28476: LD_STRING 
28478: PPUSH
28479: CALL_OW 104
28483: END
// every 0 0$1 trigger StreamModeActive and sFog do
28484: LD_EXP 38
28488: PUSH
28489: LD_EXP 59
28493: AND
28494: IFFALSE 28508
28496: GO 28498
28498: DISABLE
// FogOff ( your_side ) ;
28499: LD_OWVAR 2
28503: PPUSH
28504: CALL_OW 344
28508: END
// every 0 0$1 trigger StreamModeActive and sSun do
28509: LD_EXP 38
28513: PUSH
28514: LD_EXP 61
28518: AND
28519: IFFALSE 28547
28521: GO 28523
28523: DISABLE
// begin solar_recharge_percent := 0 ;
28524: LD_ADDR_OWVAR 79
28528: PUSH
28529: LD_INT 0
28531: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28532: LD_INT 10500
28534: PPUSH
28535: CALL_OW 67
// solar_recharge_percent := 100 ;
28539: LD_ADDR_OWVAR 79
28543: PUSH
28544: LD_INT 100
28546: ST_TO_ADDR
// end ;
28547: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28548: LD_EXP 38
28552: PUSH
28553: LD_EXP 62
28557: AND
28558: IFFALSE 28797
28560: GO 28562
28562: DISABLE
28563: LD_INT 0
28565: PPUSH
28566: PPUSH
28567: PPUSH
// begin tmp := [ ] ;
28568: LD_ADDR_VAR 0 3
28572: PUSH
28573: EMPTY
28574: ST_TO_ADDR
// for i := 1 to 6 do
28575: LD_ADDR_VAR 0 1
28579: PUSH
28580: DOUBLE
28581: LD_INT 1
28583: DEC
28584: ST_TO_ADDR
28585: LD_INT 6
28587: PUSH
28588: FOR_TO
28589: IFFALSE 28694
// begin uc_nation := nation_nature ;
28591: LD_ADDR_OWVAR 21
28595: PUSH
28596: LD_INT 0
28598: ST_TO_ADDR
// uc_side := 0 ;
28599: LD_ADDR_OWVAR 20
28603: PUSH
28604: LD_INT 0
28606: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28607: LD_ADDR_OWVAR 29
28611: PUSH
28612: LD_INT 12
28614: PUSH
28615: LD_INT 12
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: ST_TO_ADDR
// hc_agressivity := 20 ;
28622: LD_ADDR_OWVAR 35
28626: PUSH
28627: LD_INT 20
28629: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28630: LD_ADDR_OWVAR 28
28634: PUSH
28635: LD_INT 17
28637: ST_TO_ADDR
// hc_gallery :=  ;
28638: LD_ADDR_OWVAR 33
28642: PUSH
28643: LD_STRING 
28645: ST_TO_ADDR
// hc_name :=  ;
28646: LD_ADDR_OWVAR 26
28650: PUSH
28651: LD_STRING 
28653: ST_TO_ADDR
// un := CreateHuman ;
28654: LD_ADDR_VAR 0 2
28658: PUSH
28659: CALL_OW 44
28663: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28664: LD_VAR 0 2
28668: PPUSH
28669: LD_INT 1
28671: PPUSH
28672: CALL_OW 51
// tmp := tmp ^ un ;
28676: LD_ADDR_VAR 0 3
28680: PUSH
28681: LD_VAR 0 3
28685: PUSH
28686: LD_VAR 0 2
28690: ADD
28691: ST_TO_ADDR
// end ;
28692: GO 28588
28694: POP
28695: POP
// repeat wait ( 0 0$1 ) ;
28696: LD_INT 35
28698: PPUSH
28699: CALL_OW 67
// for un in tmp do
28703: LD_ADDR_VAR 0 2
28707: PUSH
28708: LD_VAR 0 3
28712: PUSH
28713: FOR_IN
28714: IFFALSE 28788
// begin if IsDead ( un ) then
28716: LD_VAR 0 2
28720: PPUSH
28721: CALL_OW 301
28725: IFFALSE 28745
// begin tmp := tmp diff un ;
28727: LD_ADDR_VAR 0 3
28731: PUSH
28732: LD_VAR 0 3
28736: PUSH
28737: LD_VAR 0 2
28741: DIFF
28742: ST_TO_ADDR
// continue ;
28743: GO 28713
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28745: LD_VAR 0 2
28749: PPUSH
28750: LD_INT 3
28752: PUSH
28753: LD_INT 22
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PPUSH
28767: CALL_OW 69
28771: PPUSH
28772: LD_VAR 0 2
28776: PPUSH
28777: CALL_OW 74
28781: PPUSH
28782: CALL_OW 115
// end ;
28786: GO 28713
28788: POP
28789: POP
// until not tmp ;
28790: LD_VAR 0 3
28794: NOT
28795: IFFALSE 28696
// end ;
28797: PPOPN 3
28799: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28800: LD_EXP 38
28804: PUSH
28805: LD_EXP 63
28809: AND
28810: IFFALSE 28864
28812: GO 28814
28814: DISABLE
// begin ToLua ( displayTroll(); ) ;
28815: LD_STRING displayTroll();
28817: PPUSH
28818: CALL_OW 559
// wait ( 3 3$00 ) ;
28822: LD_INT 6300
28824: PPUSH
28825: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28829: LD_STRING hideTroll();
28831: PPUSH
28832: CALL_OW 559
// wait ( 1 1$00 ) ;
28836: LD_INT 2100
28838: PPUSH
28839: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28843: LD_STRING displayTroll();
28845: PPUSH
28846: CALL_OW 559
// wait ( 1 1$00 ) ;
28850: LD_INT 2100
28852: PPUSH
28853: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28857: LD_STRING hideTroll();
28859: PPUSH
28860: CALL_OW 559
// end ;
28864: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28865: LD_EXP 38
28869: PUSH
28870: LD_EXP 64
28874: AND
28875: IFFALSE 28938
28877: GO 28879
28879: DISABLE
28880: LD_INT 0
28882: PPUSH
// begin p := 0 ;
28883: LD_ADDR_VAR 0 1
28887: PUSH
28888: LD_INT 0
28890: ST_TO_ADDR
// repeat game_speed := 1 ;
28891: LD_ADDR_OWVAR 65
28895: PUSH
28896: LD_INT 1
28898: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28899: LD_INT 35
28901: PPUSH
28902: CALL_OW 67
// p := p + 1 ;
28906: LD_ADDR_VAR 0 1
28910: PUSH
28911: LD_VAR 0 1
28915: PUSH
28916: LD_INT 1
28918: PLUS
28919: ST_TO_ADDR
// until p >= 60 ;
28920: LD_VAR 0 1
28924: PUSH
28925: LD_INT 60
28927: GREATEREQUAL
28928: IFFALSE 28891
// game_speed := 4 ;
28930: LD_ADDR_OWVAR 65
28934: PUSH
28935: LD_INT 4
28937: ST_TO_ADDR
// end ;
28938: PPOPN 1
28940: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28941: LD_EXP 38
28945: PUSH
28946: LD_EXP 65
28950: AND
28951: IFFALSE 29097
28953: GO 28955
28955: DISABLE
28956: LD_INT 0
28958: PPUSH
28959: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28960: LD_ADDR_VAR 0 1
28964: PUSH
28965: LD_INT 22
28967: PUSH
28968: LD_OWVAR 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: LD_INT 30
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 30
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PPUSH
29009: CALL_OW 69
29013: ST_TO_ADDR
// if not depot then
29014: LD_VAR 0 1
29018: NOT
29019: IFFALSE 29023
// exit ;
29021: GO 29097
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29023: LD_ADDR_VAR 0 2
29027: PUSH
29028: LD_VAR 0 1
29032: PUSH
29033: LD_INT 1
29035: PPUSH
29036: LD_VAR 0 1
29040: PPUSH
29041: CALL_OW 12
29045: ARRAY
29046: PPUSH
29047: CALL_OW 274
29051: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29052: LD_VAR 0 2
29056: PPUSH
29057: LD_INT 1
29059: PPUSH
29060: LD_INT 0
29062: PPUSH
29063: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29067: LD_VAR 0 2
29071: PPUSH
29072: LD_INT 2
29074: PPUSH
29075: LD_INT 0
29077: PPUSH
29078: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29082: LD_VAR 0 2
29086: PPUSH
29087: LD_INT 3
29089: PPUSH
29090: LD_INT 0
29092: PPUSH
29093: CALL_OW 277
// end ;
29097: PPOPN 2
29099: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29100: LD_EXP 38
29104: PUSH
29105: LD_EXP 66
29109: AND
29110: IFFALSE 29207
29112: GO 29114
29114: DISABLE
29115: LD_INT 0
29117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29118: LD_ADDR_VAR 0 1
29122: PUSH
29123: LD_INT 22
29125: PUSH
29126: LD_OWVAR 2
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 21
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 3
29147: PUSH
29148: LD_INT 23
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: PPUSH
29167: CALL_OW 69
29171: ST_TO_ADDR
// if not tmp then
29172: LD_VAR 0 1
29176: NOT
29177: IFFALSE 29181
// exit ;
29179: GO 29207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29181: LD_VAR 0 1
29185: PUSH
29186: LD_INT 1
29188: PPUSH
29189: LD_VAR 0 1
29193: PPUSH
29194: CALL_OW 12
29198: ARRAY
29199: PPUSH
29200: LD_INT 200
29202: PPUSH
29203: CALL_OW 234
// end ;
29207: PPOPN 1
29209: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29210: LD_EXP 38
29214: PUSH
29215: LD_EXP 67
29219: AND
29220: IFFALSE 29299
29222: GO 29224
29224: DISABLE
29225: LD_INT 0
29227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29228: LD_ADDR_VAR 0 1
29232: PUSH
29233: LD_INT 22
29235: PUSH
29236: LD_OWVAR 2
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 21
29247: PUSH
29248: LD_INT 2
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PPUSH
29259: CALL_OW 69
29263: ST_TO_ADDR
// if not tmp then
29264: LD_VAR 0 1
29268: NOT
29269: IFFALSE 29273
// exit ;
29271: GO 29299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29273: LD_VAR 0 1
29277: PUSH
29278: LD_INT 1
29280: PPUSH
29281: LD_VAR 0 1
29285: PPUSH
29286: CALL_OW 12
29290: ARRAY
29291: PPUSH
29292: LD_INT 60
29294: PPUSH
29295: CALL_OW 234
// end ;
29299: PPOPN 1
29301: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29302: LD_EXP 38
29306: PUSH
29307: LD_EXP 68
29311: AND
29312: IFFALSE 29411
29314: GO 29316
29316: DISABLE
29317: LD_INT 0
29319: PPUSH
29320: PPUSH
// begin enable ;
29321: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29322: LD_ADDR_VAR 0 1
29326: PUSH
29327: LD_INT 22
29329: PUSH
29330: LD_OWVAR 2
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 61
29341: PUSH
29342: EMPTY
29343: LIST
29344: PUSH
29345: LD_INT 33
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: PPUSH
29360: CALL_OW 69
29364: ST_TO_ADDR
// if not tmp then
29365: LD_VAR 0 1
29369: NOT
29370: IFFALSE 29374
// exit ;
29372: GO 29411
// for i in tmp do
29374: LD_ADDR_VAR 0 2
29378: PUSH
29379: LD_VAR 0 1
29383: PUSH
29384: FOR_IN
29385: IFFALSE 29409
// if IsControledBy ( i ) then
29387: LD_VAR 0 2
29391: PPUSH
29392: CALL_OW 312
29396: IFFALSE 29407
// ComUnlink ( i ) ;
29398: LD_VAR 0 2
29402: PPUSH
29403: CALL_OW 136
29407: GO 29384
29409: POP
29410: POP
// end ;
29411: PPOPN 2
29413: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29414: LD_EXP 38
29418: PUSH
29419: LD_EXP 69
29423: AND
29424: IFFALSE 29564
29426: GO 29428
29428: DISABLE
29429: LD_INT 0
29431: PPUSH
29432: PPUSH
// begin ToLua ( displayPowell(); ) ;
29433: LD_STRING displayPowell();
29435: PPUSH
29436: CALL_OW 559
// uc_side := 0 ;
29440: LD_ADDR_OWVAR 20
29444: PUSH
29445: LD_INT 0
29447: ST_TO_ADDR
// uc_nation := 2 ;
29448: LD_ADDR_OWVAR 21
29452: PUSH
29453: LD_INT 2
29455: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29456: LD_ADDR_OWVAR 37
29460: PUSH
29461: LD_INT 14
29463: ST_TO_ADDR
// vc_engine := engine_siberite ;
29464: LD_ADDR_OWVAR 39
29468: PUSH
29469: LD_INT 3
29471: ST_TO_ADDR
// vc_control := control_apeman ;
29472: LD_ADDR_OWVAR 38
29476: PUSH
29477: LD_INT 5
29479: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29480: LD_ADDR_OWVAR 40
29484: PUSH
29485: LD_INT 29
29487: ST_TO_ADDR
// un := CreateVehicle ;
29488: LD_ADDR_VAR 0 2
29492: PUSH
29493: CALL_OW 45
29497: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29498: LD_VAR 0 2
29502: PPUSH
29503: LD_INT 1
29505: PPUSH
29506: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29510: LD_INT 35
29512: PPUSH
29513: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29517: LD_VAR 0 2
29521: PPUSH
29522: LD_INT 22
29524: PUSH
29525: LD_OWVAR 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PPUSH
29534: CALL_OW 69
29538: PPUSH
29539: LD_VAR 0 2
29543: PPUSH
29544: CALL_OW 74
29548: PPUSH
29549: CALL_OW 115
// until IsDead ( un ) ;
29553: LD_VAR 0 2
29557: PPUSH
29558: CALL_OW 301
29562: IFFALSE 29510
// end ;
29564: PPOPN 2
29566: END
// every 0 0$1 trigger StreamModeActive and sStu do
29567: LD_EXP 38
29571: PUSH
29572: LD_EXP 77
29576: AND
29577: IFFALSE 29593
29579: GO 29581
29581: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29582: LD_STRING displayStucuk();
29584: PPUSH
29585: CALL_OW 559
// ResetFog ;
29589: CALL_OW 335
// end ;
29593: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29594: LD_EXP 38
29598: PUSH
29599: LD_EXP 70
29603: AND
29604: IFFALSE 29745
29606: GO 29608
29608: DISABLE
29609: LD_INT 0
29611: PPUSH
29612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29613: LD_ADDR_VAR 0 2
29617: PUSH
29618: LD_INT 22
29620: PUSH
29621: LD_OWVAR 2
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 21
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PPUSH
29644: CALL_OW 69
29648: ST_TO_ADDR
// if not tmp then
29649: LD_VAR 0 2
29653: NOT
29654: IFFALSE 29658
// exit ;
29656: GO 29745
// un := tmp [ rand ( 1 , tmp ) ] ;
29658: LD_ADDR_VAR 0 1
29662: PUSH
29663: LD_VAR 0 2
29667: PUSH
29668: LD_INT 1
29670: PPUSH
29671: LD_VAR 0 2
29675: PPUSH
29676: CALL_OW 12
29680: ARRAY
29681: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29682: LD_VAR 0 1
29686: PPUSH
29687: LD_INT 0
29689: PPUSH
29690: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29694: LD_VAR 0 1
29698: PPUSH
29699: LD_OWVAR 3
29703: PUSH
29704: LD_VAR 0 1
29708: DIFF
29709: PPUSH
29710: LD_VAR 0 1
29714: PPUSH
29715: CALL_OW 74
29719: PPUSH
29720: CALL_OW 115
// wait ( 0 0$20 ) ;
29724: LD_INT 700
29726: PPUSH
29727: CALL_OW 67
// SetSide ( un , your_side ) ;
29731: LD_VAR 0 1
29735: PPUSH
29736: LD_OWVAR 2
29740: PPUSH
29741: CALL_OW 235
// end ;
29745: PPOPN 2
29747: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29748: LD_EXP 38
29752: PUSH
29753: LD_EXP 71
29757: AND
29758: IFFALSE 29864
29760: GO 29762
29762: DISABLE
29763: LD_INT 0
29765: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29766: LD_ADDR_VAR 0 1
29770: PUSH
29771: LD_INT 22
29773: PUSH
29774: LD_OWVAR 2
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: LD_INT 30
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 30
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PPUSH
29815: CALL_OW 69
29819: ST_TO_ADDR
// if not depot then
29820: LD_VAR 0 1
29824: NOT
29825: IFFALSE 29829
// exit ;
29827: GO 29864
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29829: LD_VAR 0 1
29833: PUSH
29834: LD_INT 1
29836: ARRAY
29837: PPUSH
29838: CALL_OW 250
29842: PPUSH
29843: LD_VAR 0 1
29847: PUSH
29848: LD_INT 1
29850: ARRAY
29851: PPUSH
29852: CALL_OW 251
29856: PPUSH
29857: LD_INT 70
29859: PPUSH
29860: CALL_OW 495
// end ;
29864: PPOPN 1
29866: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29867: LD_EXP 38
29871: PUSH
29872: LD_EXP 72
29876: AND
29877: IFFALSE 30088
29879: GO 29881
29881: DISABLE
29882: LD_INT 0
29884: PPUSH
29885: PPUSH
29886: PPUSH
29887: PPUSH
29888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29889: LD_ADDR_VAR 0 5
29893: PUSH
29894: LD_INT 22
29896: PUSH
29897: LD_OWVAR 2
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 21
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 69
29924: ST_TO_ADDR
// if not tmp then
29925: LD_VAR 0 5
29929: NOT
29930: IFFALSE 29934
// exit ;
29932: GO 30088
// for i in tmp do
29934: LD_ADDR_VAR 0 1
29938: PUSH
29939: LD_VAR 0 5
29943: PUSH
29944: FOR_IN
29945: IFFALSE 30086
// begin d := rand ( 0 , 5 ) ;
29947: LD_ADDR_VAR 0 4
29951: PUSH
29952: LD_INT 0
29954: PPUSH
29955: LD_INT 5
29957: PPUSH
29958: CALL_OW 12
29962: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29963: LD_ADDR_VAR 0 2
29967: PUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 250
29977: PPUSH
29978: LD_VAR 0 4
29982: PPUSH
29983: LD_INT 3
29985: PPUSH
29986: LD_INT 12
29988: PPUSH
29989: CALL_OW 12
29993: PPUSH
29994: CALL_OW 272
29998: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29999: LD_ADDR_VAR 0 3
30003: PUSH
30004: LD_VAR 0 1
30008: PPUSH
30009: CALL_OW 251
30013: PPUSH
30014: LD_VAR 0 4
30018: PPUSH
30019: LD_INT 3
30021: PPUSH
30022: LD_INT 12
30024: PPUSH
30025: CALL_OW 12
30029: PPUSH
30030: CALL_OW 273
30034: ST_TO_ADDR
// if ValidHex ( x , y ) then
30035: LD_VAR 0 2
30039: PPUSH
30040: LD_VAR 0 3
30044: PPUSH
30045: CALL_OW 488
30049: IFFALSE 30084
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30051: LD_VAR 0 1
30055: PPUSH
30056: LD_VAR 0 2
30060: PPUSH
30061: LD_VAR 0 3
30065: PPUSH
30066: LD_INT 3
30068: PPUSH
30069: LD_INT 6
30071: PPUSH
30072: CALL_OW 12
30076: PPUSH
30077: LD_INT 1
30079: PPUSH
30080: CALL_OW 483
// end ;
30084: GO 29944
30086: POP
30087: POP
// end ;
30088: PPOPN 5
30090: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30091: LD_EXP 38
30095: PUSH
30096: LD_EXP 73
30100: AND
30101: IFFALSE 30195
30103: GO 30105
30105: DISABLE
30106: LD_INT 0
30108: PPUSH
30109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30110: LD_ADDR_VAR 0 2
30114: PUSH
30115: LD_INT 22
30117: PUSH
30118: LD_OWVAR 2
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 32
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 21
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: PPUSH
30152: CALL_OW 69
30156: ST_TO_ADDR
// if not tmp then
30157: LD_VAR 0 2
30161: NOT
30162: IFFALSE 30166
// exit ;
30164: GO 30195
// for i in tmp do
30166: LD_ADDR_VAR 0 1
30170: PUSH
30171: LD_VAR 0 2
30175: PUSH
30176: FOR_IN
30177: IFFALSE 30193
// SetFuel ( i , 0 ) ;
30179: LD_VAR 0 1
30183: PPUSH
30184: LD_INT 0
30186: PPUSH
30187: CALL_OW 240
30191: GO 30176
30193: POP
30194: POP
// end ;
30195: PPOPN 2
30197: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30198: LD_EXP 38
30202: PUSH
30203: LD_EXP 74
30207: AND
30208: IFFALSE 30274
30210: GO 30212
30212: DISABLE
30213: LD_INT 0
30215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30216: LD_ADDR_VAR 0 1
30220: PUSH
30221: LD_INT 22
30223: PUSH
30224: LD_OWVAR 2
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 30
30235: PUSH
30236: LD_INT 29
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PPUSH
30247: CALL_OW 69
30251: ST_TO_ADDR
// if not tmp then
30252: LD_VAR 0 1
30256: NOT
30257: IFFALSE 30261
// exit ;
30259: GO 30274
// DestroyUnit ( tmp [ 1 ] ) ;
30261: LD_VAR 0 1
30265: PUSH
30266: LD_INT 1
30268: ARRAY
30269: PPUSH
30270: CALL_OW 65
// end ;
30274: PPOPN 1
30276: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30277: LD_EXP 38
30281: PUSH
30282: LD_EXP 76
30286: AND
30287: IFFALSE 30416
30289: GO 30291
30291: DISABLE
30292: LD_INT 0
30294: PPUSH
// begin uc_side := 0 ;
30295: LD_ADDR_OWVAR 20
30299: PUSH
30300: LD_INT 0
30302: ST_TO_ADDR
// uc_nation := nation_arabian ;
30303: LD_ADDR_OWVAR 21
30307: PUSH
30308: LD_INT 2
30310: ST_TO_ADDR
// hc_gallery :=  ;
30311: LD_ADDR_OWVAR 33
30315: PUSH
30316: LD_STRING 
30318: ST_TO_ADDR
// hc_name :=  ;
30319: LD_ADDR_OWVAR 26
30323: PUSH
30324: LD_STRING 
30326: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30327: LD_INT 1
30329: PPUSH
30330: LD_INT 11
30332: PPUSH
30333: LD_INT 10
30335: PPUSH
30336: CALL_OW 380
// un := CreateHuman ;
30340: LD_ADDR_VAR 0 1
30344: PUSH
30345: CALL_OW 44
30349: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30350: LD_VAR 0 1
30354: PPUSH
30355: LD_INT 1
30357: PPUSH
30358: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30362: LD_INT 35
30364: PPUSH
30365: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30369: LD_VAR 0 1
30373: PPUSH
30374: LD_INT 22
30376: PUSH
30377: LD_OWVAR 2
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PPUSH
30386: CALL_OW 69
30390: PPUSH
30391: LD_VAR 0 1
30395: PPUSH
30396: CALL_OW 74
30400: PPUSH
30401: CALL_OW 115
// until IsDead ( un ) ;
30405: LD_VAR 0 1
30409: PPUSH
30410: CALL_OW 301
30414: IFFALSE 30362
// end ;
30416: PPOPN 1
30418: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30419: LD_EXP 38
30423: PUSH
30424: LD_EXP 78
30428: AND
30429: IFFALSE 30441
30431: GO 30433
30433: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30434: LD_STRING earthquake(getX(game), 0, 32)
30436: PPUSH
30437: CALL_OW 559
30441: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30442: LD_EXP 38
30446: PUSH
30447: LD_EXP 79
30451: AND
30452: IFFALSE 30543
30454: GO 30456
30456: DISABLE
30457: LD_INT 0
30459: PPUSH
// begin enable ;
30460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30461: LD_ADDR_VAR 0 1
30465: PUSH
30466: LD_INT 22
30468: PUSH
30469: LD_OWVAR 2
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 21
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 33
30490: PUSH
30491: LD_INT 3
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: PPUSH
30503: CALL_OW 69
30507: ST_TO_ADDR
// if not tmp then
30508: LD_VAR 0 1
30512: NOT
30513: IFFALSE 30517
// exit ;
30515: GO 30543
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30517: LD_VAR 0 1
30521: PUSH
30522: LD_INT 1
30524: PPUSH
30525: LD_VAR 0 1
30529: PPUSH
30530: CALL_OW 12
30534: ARRAY
30535: PPUSH
30536: LD_INT 1
30538: PPUSH
30539: CALL_OW 234
// end ;
30543: PPOPN 1
30545: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30546: LD_EXP 38
30550: PUSH
30551: LD_EXP 80
30555: AND
30556: IFFALSE 30697
30558: GO 30560
30560: DISABLE
30561: LD_INT 0
30563: PPUSH
30564: PPUSH
30565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_INT 22
30573: PUSH
30574: LD_OWVAR 2
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 25
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PPUSH
30597: CALL_OW 69
30601: ST_TO_ADDR
// if not tmp then
30602: LD_VAR 0 3
30606: NOT
30607: IFFALSE 30611
// exit ;
30609: GO 30697
// un := tmp [ rand ( 1 , tmp ) ] ;
30611: LD_ADDR_VAR 0 2
30615: PUSH
30616: LD_VAR 0 3
30620: PUSH
30621: LD_INT 1
30623: PPUSH
30624: LD_VAR 0 3
30628: PPUSH
30629: CALL_OW 12
30633: ARRAY
30634: ST_TO_ADDR
// if Crawls ( un ) then
30635: LD_VAR 0 2
30639: PPUSH
30640: CALL_OW 318
30644: IFFALSE 30655
// ComWalk ( un ) ;
30646: LD_VAR 0 2
30650: PPUSH
30651: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30655: LD_VAR 0 2
30659: PPUSH
30660: LD_INT 9
30662: PPUSH
30663: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30667: LD_INT 28
30669: PPUSH
30670: LD_OWVAR 2
30674: PPUSH
30675: LD_INT 2
30677: PPUSH
30678: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30682: LD_INT 29
30684: PPUSH
30685: LD_OWVAR 2
30689: PPUSH
30690: LD_INT 2
30692: PPUSH
30693: CALL_OW 322
// end ;
30697: PPOPN 3
30699: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30700: LD_EXP 38
30704: PUSH
30705: LD_EXP 81
30709: AND
30710: IFFALSE 30821
30712: GO 30714
30714: DISABLE
30715: LD_INT 0
30717: PPUSH
30718: PPUSH
30719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30720: LD_ADDR_VAR 0 3
30724: PUSH
30725: LD_INT 22
30727: PUSH
30728: LD_OWVAR 2
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 25
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PPUSH
30751: CALL_OW 69
30755: ST_TO_ADDR
// if not tmp then
30756: LD_VAR 0 3
30760: NOT
30761: IFFALSE 30765
// exit ;
30763: GO 30821
// un := tmp [ rand ( 1 , tmp ) ] ;
30765: LD_ADDR_VAR 0 2
30769: PUSH
30770: LD_VAR 0 3
30774: PUSH
30775: LD_INT 1
30777: PPUSH
30778: LD_VAR 0 3
30782: PPUSH
30783: CALL_OW 12
30787: ARRAY
30788: ST_TO_ADDR
// if Crawls ( un ) then
30789: LD_VAR 0 2
30793: PPUSH
30794: CALL_OW 318
30798: IFFALSE 30809
// ComWalk ( un ) ;
30800: LD_VAR 0 2
30804: PPUSH
30805: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_INT 8
30816: PPUSH
30817: CALL_OW 336
// end ;
30821: PPOPN 3
30823: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30824: LD_EXP 38
30828: PUSH
30829: LD_EXP 82
30833: AND
30834: IFFALSE 30978
30836: GO 30838
30838: DISABLE
30839: LD_INT 0
30841: PPUSH
30842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30843: LD_ADDR_VAR 0 2
30847: PUSH
30848: LD_INT 22
30850: PUSH
30851: LD_OWVAR 2
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 21
30862: PUSH
30863: LD_INT 2
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 2
30872: PUSH
30873: LD_INT 34
30875: PUSH
30876: LD_INT 12
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 34
30885: PUSH
30886: LD_INT 51
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 34
30895: PUSH
30896: LD_INT 32
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: LIST
30913: PPUSH
30914: CALL_OW 69
30918: ST_TO_ADDR
// if not tmp then
30919: LD_VAR 0 2
30923: NOT
30924: IFFALSE 30928
// exit ;
30926: GO 30978
// for i in tmp do
30928: LD_ADDR_VAR 0 1
30932: PUSH
30933: LD_VAR 0 2
30937: PUSH
30938: FOR_IN
30939: IFFALSE 30976
// if GetCargo ( i , mat_artifact ) = 0 then
30941: LD_VAR 0 1
30945: PPUSH
30946: LD_INT 4
30948: PPUSH
30949: CALL_OW 289
30953: PUSH
30954: LD_INT 0
30956: EQUAL
30957: IFFALSE 30974
// SetCargo ( i , mat_siberit , 100 ) ;
30959: LD_VAR 0 1
30963: PPUSH
30964: LD_INT 3
30966: PPUSH
30967: LD_INT 100
30969: PPUSH
30970: CALL_OW 290
30974: GO 30938
30976: POP
30977: POP
// end ;
30978: PPOPN 2
30980: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30981: LD_EXP 38
30985: PUSH
30986: LD_EXP 83
30990: AND
30991: IFFALSE 31174
30993: GO 30995
30995: DISABLE
30996: LD_INT 0
30998: PPUSH
30999: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31000: LD_ADDR_VAR 0 2
31004: PUSH
31005: LD_INT 22
31007: PUSH
31008: LD_OWVAR 2
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PPUSH
31017: CALL_OW 69
31021: ST_TO_ADDR
// if not tmp then
31022: LD_VAR 0 2
31026: NOT
31027: IFFALSE 31031
// exit ;
31029: GO 31174
// for i := 1 to 2 do
31031: LD_ADDR_VAR 0 1
31035: PUSH
31036: DOUBLE
31037: LD_INT 1
31039: DEC
31040: ST_TO_ADDR
31041: LD_INT 2
31043: PUSH
31044: FOR_TO
31045: IFFALSE 31172
// begin uc_side := your_side ;
31047: LD_ADDR_OWVAR 20
31051: PUSH
31052: LD_OWVAR 2
31056: ST_TO_ADDR
// uc_nation := nation_american ;
31057: LD_ADDR_OWVAR 21
31061: PUSH
31062: LD_INT 1
31064: ST_TO_ADDR
// vc_chassis := us_morphling ;
31065: LD_ADDR_OWVAR 37
31069: PUSH
31070: LD_INT 5
31072: ST_TO_ADDR
// vc_engine := engine_siberite ;
31073: LD_ADDR_OWVAR 39
31077: PUSH
31078: LD_INT 3
31080: ST_TO_ADDR
// vc_control := control_computer ;
31081: LD_ADDR_OWVAR 38
31085: PUSH
31086: LD_INT 3
31088: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31089: LD_ADDR_OWVAR 40
31093: PUSH
31094: LD_INT 10
31096: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31097: LD_VAR 0 2
31101: PUSH
31102: LD_INT 1
31104: ARRAY
31105: PPUSH
31106: CALL_OW 310
31110: NOT
31111: IFFALSE 31158
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31113: CALL_OW 45
31117: PPUSH
31118: LD_VAR 0 2
31122: PUSH
31123: LD_INT 1
31125: ARRAY
31126: PPUSH
31127: CALL_OW 250
31131: PPUSH
31132: LD_VAR 0 2
31136: PUSH
31137: LD_INT 1
31139: ARRAY
31140: PPUSH
31141: CALL_OW 251
31145: PPUSH
31146: LD_INT 12
31148: PPUSH
31149: LD_INT 1
31151: PPUSH
31152: CALL_OW 50
31156: GO 31170
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31158: CALL_OW 45
31162: PPUSH
31163: LD_INT 1
31165: PPUSH
31166: CALL_OW 51
// end ;
31170: GO 31044
31172: POP
31173: POP
// end ;
31174: PPOPN 2
31176: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31177: LD_EXP 38
31181: PUSH
31182: LD_EXP 84
31186: AND
31187: IFFALSE 31409
31189: GO 31191
31191: DISABLE
31192: LD_INT 0
31194: PPUSH
31195: PPUSH
31196: PPUSH
31197: PPUSH
31198: PPUSH
31199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31200: LD_ADDR_VAR 0 6
31204: PUSH
31205: LD_INT 22
31207: PUSH
31208: LD_OWVAR 2
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 21
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: LD_INT 23
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: PPUSH
31249: CALL_OW 69
31253: ST_TO_ADDR
// if not tmp then
31254: LD_VAR 0 6
31258: NOT
31259: IFFALSE 31263
// exit ;
31261: GO 31409
// s1 := rand ( 1 , 4 ) ;
31263: LD_ADDR_VAR 0 2
31267: PUSH
31268: LD_INT 1
31270: PPUSH
31271: LD_INT 4
31273: PPUSH
31274: CALL_OW 12
31278: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31279: LD_ADDR_VAR 0 4
31283: PUSH
31284: LD_VAR 0 6
31288: PUSH
31289: LD_INT 1
31291: ARRAY
31292: PPUSH
31293: LD_VAR 0 2
31297: PPUSH
31298: CALL_OW 259
31302: ST_TO_ADDR
// if s1 = 1 then
31303: LD_VAR 0 2
31307: PUSH
31308: LD_INT 1
31310: EQUAL
31311: IFFALSE 31331
// s2 := rand ( 2 , 4 ) else
31313: LD_ADDR_VAR 0 3
31317: PUSH
31318: LD_INT 2
31320: PPUSH
31321: LD_INT 4
31323: PPUSH
31324: CALL_OW 12
31328: ST_TO_ADDR
31329: GO 31339
// s2 := 1 ;
31331: LD_ADDR_VAR 0 3
31335: PUSH
31336: LD_INT 1
31338: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31339: LD_ADDR_VAR 0 5
31343: PUSH
31344: LD_VAR 0 6
31348: PUSH
31349: LD_INT 1
31351: ARRAY
31352: PPUSH
31353: LD_VAR 0 3
31357: PPUSH
31358: CALL_OW 259
31362: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31363: LD_VAR 0 6
31367: PUSH
31368: LD_INT 1
31370: ARRAY
31371: PPUSH
31372: LD_VAR 0 2
31376: PPUSH
31377: LD_VAR 0 5
31381: PPUSH
31382: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31386: LD_VAR 0 6
31390: PUSH
31391: LD_INT 1
31393: ARRAY
31394: PPUSH
31395: LD_VAR 0 3
31399: PPUSH
31400: LD_VAR 0 4
31404: PPUSH
31405: CALL_OW 237
// end ;
31409: PPOPN 6
31411: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31412: LD_EXP 38
31416: PUSH
31417: LD_EXP 85
31421: AND
31422: IFFALSE 31501
31424: GO 31426
31426: DISABLE
31427: LD_INT 0
31429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31430: LD_ADDR_VAR 0 1
31434: PUSH
31435: LD_INT 22
31437: PUSH
31438: LD_OWVAR 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 30
31449: PUSH
31450: LD_INT 3
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PPUSH
31461: CALL_OW 69
31465: ST_TO_ADDR
// if not tmp then
31466: LD_VAR 0 1
31470: NOT
31471: IFFALSE 31475
// exit ;
31473: GO 31501
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31475: LD_VAR 0 1
31479: PUSH
31480: LD_INT 1
31482: PPUSH
31483: LD_VAR 0 1
31487: PPUSH
31488: CALL_OW 12
31492: ARRAY
31493: PPUSH
31494: LD_INT 1
31496: PPUSH
31497: CALL_OW 234
// end ;
31501: PPOPN 1
31503: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31504: LD_EXP 38
31508: PUSH
31509: LD_EXP 86
31513: AND
31514: IFFALSE 31626
31516: GO 31518
31518: DISABLE
31519: LD_INT 0
31521: PPUSH
31522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31523: LD_ADDR_VAR 0 2
31527: PUSH
31528: LD_INT 22
31530: PUSH
31531: LD_OWVAR 2
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 30
31545: PUSH
31546: LD_INT 27
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 30
31555: PUSH
31556: LD_INT 26
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 30
31565: PUSH
31566: LD_INT 28
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PPUSH
31583: CALL_OW 69
31587: ST_TO_ADDR
// if not tmp then
31588: LD_VAR 0 2
31592: NOT
31593: IFFALSE 31597
// exit ;
31595: GO 31626
// for i in tmp do
31597: LD_ADDR_VAR 0 1
31601: PUSH
31602: LD_VAR 0 2
31606: PUSH
31607: FOR_IN
31608: IFFALSE 31624
// SetLives ( i , 1 ) ;
31610: LD_VAR 0 1
31614: PPUSH
31615: LD_INT 1
31617: PPUSH
31618: CALL_OW 234
31622: GO 31607
31624: POP
31625: POP
// end ;
31626: PPOPN 2
31628: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31629: LD_EXP 38
31633: PUSH
31634: LD_EXP 87
31638: AND
31639: IFFALSE 31926
31641: GO 31643
31643: DISABLE
31644: LD_INT 0
31646: PPUSH
31647: PPUSH
31648: PPUSH
// begin i := rand ( 1 , 7 ) ;
31649: LD_ADDR_VAR 0 1
31653: PUSH
31654: LD_INT 1
31656: PPUSH
31657: LD_INT 7
31659: PPUSH
31660: CALL_OW 12
31664: ST_TO_ADDR
// case i of 1 :
31665: LD_VAR 0 1
31669: PUSH
31670: LD_INT 1
31672: DOUBLE
31673: EQUAL
31674: IFTRUE 31678
31676: GO 31688
31678: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31679: LD_STRING earthquake(getX(game), 0, 32)
31681: PPUSH
31682: CALL_OW 559
31686: GO 31926
31688: LD_INT 2
31690: DOUBLE
31691: EQUAL
31692: IFTRUE 31696
31694: GO 31710
31696: POP
// begin ToLua ( displayStucuk(); ) ;
31697: LD_STRING displayStucuk();
31699: PPUSH
31700: CALL_OW 559
// ResetFog ;
31704: CALL_OW 335
// end ; 3 :
31708: GO 31926
31710: LD_INT 3
31712: DOUBLE
31713: EQUAL
31714: IFTRUE 31718
31716: GO 31822
31718: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31719: LD_ADDR_VAR 0 2
31723: PUSH
31724: LD_INT 22
31726: PUSH
31727: LD_OWVAR 2
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 25
31738: PUSH
31739: LD_INT 1
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PPUSH
31750: CALL_OW 69
31754: ST_TO_ADDR
// if not tmp then
31755: LD_VAR 0 2
31759: NOT
31760: IFFALSE 31764
// exit ;
31762: GO 31926
// un := tmp [ rand ( 1 , tmp ) ] ;
31764: LD_ADDR_VAR 0 3
31768: PUSH
31769: LD_VAR 0 2
31773: PUSH
31774: LD_INT 1
31776: PPUSH
31777: LD_VAR 0 2
31781: PPUSH
31782: CALL_OW 12
31786: ARRAY
31787: ST_TO_ADDR
// if Crawls ( un ) then
31788: LD_VAR 0 3
31792: PPUSH
31793: CALL_OW 318
31797: IFFALSE 31808
// ComWalk ( un ) ;
31799: LD_VAR 0 3
31803: PPUSH
31804: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31808: LD_VAR 0 3
31812: PPUSH
31813: LD_INT 8
31815: PPUSH
31816: CALL_OW 336
// end ; 4 :
31820: GO 31926
31822: LD_INT 4
31824: DOUBLE
31825: EQUAL
31826: IFTRUE 31830
31828: GO 31904
31830: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31831: LD_ADDR_VAR 0 2
31835: PUSH
31836: LD_INT 22
31838: PUSH
31839: LD_OWVAR 2
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 30
31850: PUSH
31851: LD_INT 29
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PPUSH
31862: CALL_OW 69
31866: ST_TO_ADDR
// if not tmp then
31867: LD_VAR 0 2
31871: NOT
31872: IFFALSE 31876
// exit ;
31874: GO 31926
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31876: LD_VAR 0 2
31880: PUSH
31881: LD_INT 1
31883: ARRAY
31884: PPUSH
31885: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31889: LD_VAR 0 2
31893: PUSH
31894: LD_INT 1
31896: ARRAY
31897: PPUSH
31898: CALL_OW 65
// end ; 5 .. 7 :
31902: GO 31926
31904: LD_INT 5
31906: DOUBLE
31907: GREATEREQUAL
31908: IFFALSE 31916
31910: LD_INT 7
31912: DOUBLE
31913: LESSEQUAL
31914: IFTRUE 31918
31916: GO 31925
31918: POP
// StreamSibBomb ; end ;
31919: CALL 28163 0 0
31923: GO 31926
31925: POP
// end ;
31926: PPOPN 3
31928: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31929: LD_EXP 38
31933: PUSH
31934: LD_EXP 88
31938: AND
31939: IFFALSE 32095
31941: GO 31943
31943: DISABLE
31944: LD_INT 0
31946: PPUSH
31947: PPUSH
31948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31949: LD_ADDR_VAR 0 2
31953: PUSH
31954: LD_INT 81
31956: PUSH
31957: LD_OWVAR 2
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 2
31968: PUSH
31969: LD_INT 21
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 21
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: LIST
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PPUSH
31998: CALL_OW 69
32002: ST_TO_ADDR
// if not tmp then
32003: LD_VAR 0 2
32007: NOT
32008: IFFALSE 32012
// exit ;
32010: GO 32095
// p := 0 ;
32012: LD_ADDR_VAR 0 3
32016: PUSH
32017: LD_INT 0
32019: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32020: LD_INT 35
32022: PPUSH
32023: CALL_OW 67
// p := p + 1 ;
32027: LD_ADDR_VAR 0 3
32031: PUSH
32032: LD_VAR 0 3
32036: PUSH
32037: LD_INT 1
32039: PLUS
32040: ST_TO_ADDR
// for i in tmp do
32041: LD_ADDR_VAR 0 1
32045: PUSH
32046: LD_VAR 0 2
32050: PUSH
32051: FOR_IN
32052: IFFALSE 32083
// if GetLives ( i ) < 1000 then
32054: LD_VAR 0 1
32058: PPUSH
32059: CALL_OW 256
32063: PUSH
32064: LD_INT 1000
32066: LESS
32067: IFFALSE 32081
// SetLives ( i , 1000 ) ;
32069: LD_VAR 0 1
32073: PPUSH
32074: LD_INT 1000
32076: PPUSH
32077: CALL_OW 234
32081: GO 32051
32083: POP
32084: POP
// until p > 20 ;
32085: LD_VAR 0 3
32089: PUSH
32090: LD_INT 20
32092: GREATER
32093: IFFALSE 32020
// end ;
32095: PPOPN 3
32097: END
// every 0 0$1 trigger StreamModeActive and sTime do
32098: LD_EXP 38
32102: PUSH
32103: LD_EXP 89
32107: AND
32108: IFFALSE 32143
32110: GO 32112
32112: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32113: LD_INT 28
32115: PPUSH
32116: LD_OWVAR 2
32120: PPUSH
32121: LD_INT 2
32123: PPUSH
32124: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32128: LD_INT 30
32130: PPUSH
32131: LD_OWVAR 2
32135: PPUSH
32136: LD_INT 2
32138: PPUSH
32139: CALL_OW 322
// end ;
32143: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32144: LD_EXP 38
32148: PUSH
32149: LD_EXP 90
32153: AND
32154: IFFALSE 32275
32156: GO 32158
32158: DISABLE
32159: LD_INT 0
32161: PPUSH
32162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32163: LD_ADDR_VAR 0 2
32167: PUSH
32168: LD_INT 22
32170: PUSH
32171: LD_OWVAR 2
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 21
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: PUSH
32193: LD_INT 23
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: PPUSH
32212: CALL_OW 69
32216: ST_TO_ADDR
// if not tmp then
32217: LD_VAR 0 2
32221: NOT
32222: IFFALSE 32226
// exit ;
32224: GO 32275
// for i in tmp do
32226: LD_ADDR_VAR 0 1
32230: PUSH
32231: LD_VAR 0 2
32235: PUSH
32236: FOR_IN
32237: IFFALSE 32273
// begin if Crawls ( i ) then
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 318
32248: IFFALSE 32259
// ComWalk ( i ) ;
32250: LD_VAR 0 1
32254: PPUSH
32255: CALL_OW 138
// SetClass ( i , 2 ) ;
32259: LD_VAR 0 1
32263: PPUSH
32264: LD_INT 2
32266: PPUSH
32267: CALL_OW 336
// end ;
32271: GO 32236
32273: POP
32274: POP
// end ;
32275: PPOPN 2
32277: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32278: LD_EXP 38
32282: PUSH
32283: LD_EXP 91
32287: AND
32288: IFFALSE 32576
32290: GO 32292
32292: DISABLE
32293: LD_INT 0
32295: PPUSH
32296: PPUSH
32297: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32298: LD_OWVAR 2
32302: PPUSH
32303: LD_INT 9
32305: PPUSH
32306: LD_INT 1
32308: PPUSH
32309: LD_INT 1
32311: PPUSH
32312: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32316: LD_INT 9
32318: PPUSH
32319: LD_OWVAR 2
32323: PPUSH
32324: CALL_OW 343
// uc_side := 9 ;
32328: LD_ADDR_OWVAR 20
32332: PUSH
32333: LD_INT 9
32335: ST_TO_ADDR
// uc_nation := 2 ;
32336: LD_ADDR_OWVAR 21
32340: PUSH
32341: LD_INT 2
32343: ST_TO_ADDR
// hc_name := Dark Warrior ;
32344: LD_ADDR_OWVAR 26
32348: PUSH
32349: LD_STRING Dark Warrior
32351: ST_TO_ADDR
// hc_gallery :=  ;
32352: LD_ADDR_OWVAR 33
32356: PUSH
32357: LD_STRING 
32359: ST_TO_ADDR
// hc_noskilllimit := true ;
32360: LD_ADDR_OWVAR 76
32364: PUSH
32365: LD_INT 1
32367: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32368: LD_ADDR_OWVAR 31
32372: PUSH
32373: LD_INT 30
32375: PUSH
32376: LD_INT 30
32378: PUSH
32379: LD_INT 30
32381: PUSH
32382: LD_INT 30
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: ST_TO_ADDR
// un := CreateHuman ;
32391: LD_ADDR_VAR 0 3
32395: PUSH
32396: CALL_OW 44
32400: ST_TO_ADDR
// hc_noskilllimit := false ;
32401: LD_ADDR_OWVAR 76
32405: PUSH
32406: LD_INT 0
32408: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32409: LD_VAR 0 3
32413: PPUSH
32414: LD_INT 1
32416: PPUSH
32417: CALL_OW 51
// ToLua ( playRanger() ) ;
32421: LD_STRING playRanger()
32423: PPUSH
32424: CALL_OW 559
// p := 0 ;
32428: LD_ADDR_VAR 0 2
32432: PUSH
32433: LD_INT 0
32435: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32436: LD_INT 35
32438: PPUSH
32439: CALL_OW 67
// p := p + 1 ;
32443: LD_ADDR_VAR 0 2
32447: PUSH
32448: LD_VAR 0 2
32452: PUSH
32453: LD_INT 1
32455: PLUS
32456: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32457: LD_VAR 0 3
32461: PPUSH
32462: CALL_OW 256
32466: PUSH
32467: LD_INT 1000
32469: LESS
32470: IFFALSE 32484
// SetLives ( un , 1000 ) ;
32472: LD_VAR 0 3
32476: PPUSH
32477: LD_INT 1000
32479: PPUSH
32480: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32484: LD_VAR 0 3
32488: PPUSH
32489: LD_INT 81
32491: PUSH
32492: LD_OWVAR 2
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 91
32503: PUSH
32504: LD_VAR 0 3
32508: PUSH
32509: LD_INT 30
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PPUSH
32521: CALL_OW 69
32525: PPUSH
32526: LD_VAR 0 3
32530: PPUSH
32531: CALL_OW 74
32535: PPUSH
32536: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32540: LD_VAR 0 2
32544: PUSH
32545: LD_INT 80
32547: GREATER
32548: PUSH
32549: LD_VAR 0 3
32553: PPUSH
32554: CALL_OW 301
32558: OR
32559: IFFALSE 32436
// if un then
32561: LD_VAR 0 3
32565: IFFALSE 32576
// RemoveUnit ( un ) ;
32567: LD_VAR 0 3
32571: PPUSH
32572: CALL_OW 64
// end ;
32576: PPOPN 3
32578: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32579: LD_EXP 92
32583: IFFALSE 32699
32585: GO 32587
32587: DISABLE
32588: LD_INT 0
32590: PPUSH
32591: PPUSH
32592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32593: LD_ADDR_VAR 0 2
32597: PUSH
32598: LD_INT 81
32600: PUSH
32601: LD_OWVAR 2
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 21
32612: PUSH
32613: LD_INT 1
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PPUSH
32624: CALL_OW 69
32628: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32629: LD_STRING playComputer()
32631: PPUSH
32632: CALL_OW 559
// if not tmp then
32636: LD_VAR 0 2
32640: NOT
32641: IFFALSE 32645
// exit ;
32643: GO 32699
// for i in tmp do
32645: LD_ADDR_VAR 0 1
32649: PUSH
32650: LD_VAR 0 2
32654: PUSH
32655: FOR_IN
32656: IFFALSE 32697
// for j := 1 to 4 do
32658: LD_ADDR_VAR 0 3
32662: PUSH
32663: DOUBLE
32664: LD_INT 1
32666: DEC
32667: ST_TO_ADDR
32668: LD_INT 4
32670: PUSH
32671: FOR_TO
32672: IFFALSE 32693
// SetSkill ( i , j , 10 ) ;
32674: LD_VAR 0 1
32678: PPUSH
32679: LD_VAR 0 3
32683: PPUSH
32684: LD_INT 10
32686: PPUSH
32687: CALL_OW 237
32691: GO 32671
32693: POP
32694: POP
32695: GO 32655
32697: POP
32698: POP
// end ;
32699: PPOPN 3
32701: END
// every 0 0$1 trigger s30 do var i , tmp ;
32702: LD_EXP 93
32706: IFFALSE 32775
32708: GO 32710
32710: DISABLE
32711: LD_INT 0
32713: PPUSH
32714: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32715: LD_ADDR_VAR 0 2
32719: PUSH
32720: LD_INT 22
32722: PUSH
32723: LD_OWVAR 2
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PPUSH
32732: CALL_OW 69
32736: ST_TO_ADDR
// if not tmp then
32737: LD_VAR 0 2
32741: NOT
32742: IFFALSE 32746
// exit ;
32744: GO 32775
// for i in tmp do
32746: LD_ADDR_VAR 0 1
32750: PUSH
32751: LD_VAR 0 2
32755: PUSH
32756: FOR_IN
32757: IFFALSE 32773
// SetLives ( i , 300 ) ;
32759: LD_VAR 0 1
32763: PPUSH
32764: LD_INT 300
32766: PPUSH
32767: CALL_OW 234
32771: GO 32756
32773: POP
32774: POP
// end ;
32775: PPOPN 2
32777: END
// every 0 0$1 trigger s60 do var i , tmp ;
32778: LD_EXP 94
32782: IFFALSE 32851
32784: GO 32786
32786: DISABLE
32787: LD_INT 0
32789: PPUSH
32790: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32791: LD_ADDR_VAR 0 2
32795: PUSH
32796: LD_INT 22
32798: PUSH
32799: LD_OWVAR 2
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PPUSH
32808: CALL_OW 69
32812: ST_TO_ADDR
// if not tmp then
32813: LD_VAR 0 2
32817: NOT
32818: IFFALSE 32822
// exit ;
32820: GO 32851
// for i in tmp do
32822: LD_ADDR_VAR 0 1
32826: PUSH
32827: LD_VAR 0 2
32831: PUSH
32832: FOR_IN
32833: IFFALSE 32849
// SetLives ( i , 600 ) ;
32835: LD_VAR 0 1
32839: PPUSH
32840: LD_INT 600
32842: PPUSH
32843: CALL_OW 234
32847: GO 32832
32849: POP
32850: POP
// end ;
32851: PPOPN 2
32853: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32854: LD_INT 0
32856: PPUSH
// case cmd of 301 :
32857: LD_VAR 0 1
32861: PUSH
32862: LD_INT 301
32864: DOUBLE
32865: EQUAL
32866: IFTRUE 32870
32868: GO 32902
32870: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32871: LD_VAR 0 6
32875: PPUSH
32876: LD_VAR 0 7
32880: PPUSH
32881: LD_VAR 0 8
32885: PPUSH
32886: LD_VAR 0 4
32890: PPUSH
32891: LD_VAR 0 5
32895: PPUSH
32896: CALL 34111 0 5
32900: GO 33023
32902: LD_INT 302
32904: DOUBLE
32905: EQUAL
32906: IFTRUE 32910
32908: GO 32947
32910: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32911: LD_VAR 0 6
32915: PPUSH
32916: LD_VAR 0 7
32920: PPUSH
32921: LD_VAR 0 8
32925: PPUSH
32926: LD_VAR 0 9
32930: PPUSH
32931: LD_VAR 0 4
32935: PPUSH
32936: LD_VAR 0 5
32940: PPUSH
32941: CALL 34202 0 6
32945: GO 33023
32947: LD_INT 303
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32955
32953: GO 32992
32955: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32956: LD_VAR 0 6
32960: PPUSH
32961: LD_VAR 0 7
32965: PPUSH
32966: LD_VAR 0 8
32970: PPUSH
32971: LD_VAR 0 9
32975: PPUSH
32976: LD_VAR 0 4
32980: PPUSH
32981: LD_VAR 0 5
32985: PPUSH
32986: CALL 33028 0 6
32990: GO 33023
32992: LD_INT 304
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33022
33000: POP
// hHackTeleport ( unit , x , y ) ; end ;
33001: LD_VAR 0 2
33005: PPUSH
33006: LD_VAR 0 4
33010: PPUSH
33011: LD_VAR 0 5
33015: PPUSH
33016: CALL 34795 0 3
33020: GO 33023
33022: POP
// end ;
33023: LD_VAR 0 12
33027: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33028: LD_INT 0
33030: PPUSH
33031: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33032: LD_VAR 0 1
33036: PUSH
33037: LD_INT 1
33039: LESS
33040: PUSH
33041: LD_VAR 0 1
33045: PUSH
33046: LD_INT 3
33048: GREATER
33049: OR
33050: PUSH
33051: LD_VAR 0 5
33055: PPUSH
33056: LD_VAR 0 6
33060: PPUSH
33061: CALL_OW 428
33065: OR
33066: IFFALSE 33070
// exit ;
33068: GO 33798
// uc_side := your_side ;
33070: LD_ADDR_OWVAR 20
33074: PUSH
33075: LD_OWVAR 2
33079: ST_TO_ADDR
// uc_nation := nation ;
33080: LD_ADDR_OWVAR 21
33084: PUSH
33085: LD_VAR 0 1
33089: ST_TO_ADDR
// bc_level = 1 ;
33090: LD_ADDR_OWVAR 43
33094: PUSH
33095: LD_INT 1
33097: ST_TO_ADDR
// case btype of 1 :
33098: LD_VAR 0 2
33102: PUSH
33103: LD_INT 1
33105: DOUBLE
33106: EQUAL
33107: IFTRUE 33111
33109: GO 33122
33111: POP
// bc_type := b_depot ; 2 :
33112: LD_ADDR_OWVAR 42
33116: PUSH
33117: LD_INT 0
33119: ST_TO_ADDR
33120: GO 33742
33122: LD_INT 2
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33130
33128: GO 33141
33130: POP
// bc_type := b_warehouse ; 3 :
33131: LD_ADDR_OWVAR 42
33135: PUSH
33136: LD_INT 1
33138: ST_TO_ADDR
33139: GO 33742
33141: LD_INT 3
33143: DOUBLE
33144: EQUAL
33145: IFTRUE 33149
33147: GO 33160
33149: POP
// bc_type := b_lab ; 4 .. 9 :
33150: LD_ADDR_OWVAR 42
33154: PUSH
33155: LD_INT 6
33157: ST_TO_ADDR
33158: GO 33742
33160: LD_INT 4
33162: DOUBLE
33163: GREATEREQUAL
33164: IFFALSE 33172
33166: LD_INT 9
33168: DOUBLE
33169: LESSEQUAL
33170: IFTRUE 33174
33172: GO 33234
33174: POP
// begin bc_type := b_lab_half ;
33175: LD_ADDR_OWVAR 42
33179: PUSH
33180: LD_INT 7
33182: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33183: LD_ADDR_OWVAR 44
33187: PUSH
33188: LD_INT 10
33190: PUSH
33191: LD_INT 11
33193: PUSH
33194: LD_INT 12
33196: PUSH
33197: LD_INT 15
33199: PUSH
33200: LD_INT 14
33202: PUSH
33203: LD_INT 13
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: PUSH
33214: LD_VAR 0 2
33218: PUSH
33219: LD_INT 3
33221: MINUS
33222: ARRAY
33223: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33224: LD_ADDR_OWVAR 45
33228: PUSH
33229: LD_INT 9
33231: ST_TO_ADDR
// end ; 10 .. 13 :
33232: GO 33742
33234: LD_INT 10
33236: DOUBLE
33237: GREATEREQUAL
33238: IFFALSE 33246
33240: LD_INT 13
33242: DOUBLE
33243: LESSEQUAL
33244: IFTRUE 33248
33246: GO 33325
33248: POP
// begin bc_type := b_lab_full ;
33249: LD_ADDR_OWVAR 42
33253: PUSH
33254: LD_INT 8
33256: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33257: LD_ADDR_OWVAR 44
33261: PUSH
33262: LD_INT 10
33264: PUSH
33265: LD_INT 12
33267: PUSH
33268: LD_INT 14
33270: PUSH
33271: LD_INT 13
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: PUSH
33280: LD_VAR 0 2
33284: PUSH
33285: LD_INT 9
33287: MINUS
33288: ARRAY
33289: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33290: LD_ADDR_OWVAR 45
33294: PUSH
33295: LD_INT 11
33297: PUSH
33298: LD_INT 15
33300: PUSH
33301: LD_INT 12
33303: PUSH
33304: LD_INT 15
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: PUSH
33313: LD_VAR 0 2
33317: PUSH
33318: LD_INT 9
33320: MINUS
33321: ARRAY
33322: ST_TO_ADDR
// end ; 14 :
33323: GO 33742
33325: LD_INT 14
33327: DOUBLE
33328: EQUAL
33329: IFTRUE 33333
33331: GO 33344
33333: POP
// bc_type := b_workshop ; 15 :
33334: LD_ADDR_OWVAR 42
33338: PUSH
33339: LD_INT 2
33341: ST_TO_ADDR
33342: GO 33742
33344: LD_INT 15
33346: DOUBLE
33347: EQUAL
33348: IFTRUE 33352
33350: GO 33363
33352: POP
// bc_type := b_factory ; 16 :
33353: LD_ADDR_OWVAR 42
33357: PUSH
33358: LD_INT 3
33360: ST_TO_ADDR
33361: GO 33742
33363: LD_INT 16
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33371
33369: GO 33382
33371: POP
// bc_type := b_ext_gun ; 17 :
33372: LD_ADDR_OWVAR 42
33376: PUSH
33377: LD_INT 17
33379: ST_TO_ADDR
33380: GO 33742
33382: LD_INT 17
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33390
33388: GO 33418
33390: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33391: LD_ADDR_OWVAR 42
33395: PUSH
33396: LD_INT 19
33398: PUSH
33399: LD_INT 23
33401: PUSH
33402: LD_INT 19
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: PUSH
33410: LD_VAR 0 1
33414: ARRAY
33415: ST_TO_ADDR
33416: GO 33742
33418: LD_INT 18
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33437
33426: POP
// bc_type := b_ext_radar ; 19 :
33427: LD_ADDR_OWVAR 42
33431: PUSH
33432: LD_INT 20
33434: ST_TO_ADDR
33435: GO 33742
33437: LD_INT 19
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33456
33445: POP
// bc_type := b_ext_radio ; 20 :
33446: LD_ADDR_OWVAR 42
33450: PUSH
33451: LD_INT 22
33453: ST_TO_ADDR
33454: GO 33742
33456: LD_INT 20
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33464
33462: GO 33475
33464: POP
// bc_type := b_ext_siberium ; 21 :
33465: LD_ADDR_OWVAR 42
33469: PUSH
33470: LD_INT 21
33472: ST_TO_ADDR
33473: GO 33742
33475: LD_INT 21
33477: DOUBLE
33478: EQUAL
33479: IFTRUE 33483
33481: GO 33494
33483: POP
// bc_type := b_ext_computer ; 22 :
33484: LD_ADDR_OWVAR 42
33488: PUSH
33489: LD_INT 24
33491: ST_TO_ADDR
33492: GO 33742
33494: LD_INT 22
33496: DOUBLE
33497: EQUAL
33498: IFTRUE 33502
33500: GO 33513
33502: POP
// bc_type := b_ext_track ; 23 :
33503: LD_ADDR_OWVAR 42
33507: PUSH
33508: LD_INT 16
33510: ST_TO_ADDR
33511: GO 33742
33513: LD_INT 23
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33532
33521: POP
// bc_type := b_ext_laser ; 24 :
33522: LD_ADDR_OWVAR 42
33526: PUSH
33527: LD_INT 25
33529: ST_TO_ADDR
33530: GO 33742
33532: LD_INT 24
33534: DOUBLE
33535: EQUAL
33536: IFTRUE 33540
33538: GO 33551
33540: POP
// bc_type := b_control_tower ; 25 :
33541: LD_ADDR_OWVAR 42
33545: PUSH
33546: LD_INT 36
33548: ST_TO_ADDR
33549: GO 33742
33551: LD_INT 25
33553: DOUBLE
33554: EQUAL
33555: IFTRUE 33559
33557: GO 33570
33559: POP
// bc_type := b_breastwork ; 26 :
33560: LD_ADDR_OWVAR 42
33564: PUSH
33565: LD_INT 31
33567: ST_TO_ADDR
33568: GO 33742
33570: LD_INT 26
33572: DOUBLE
33573: EQUAL
33574: IFTRUE 33578
33576: GO 33589
33578: POP
// bc_type := b_bunker ; 27 :
33579: LD_ADDR_OWVAR 42
33583: PUSH
33584: LD_INT 32
33586: ST_TO_ADDR
33587: GO 33742
33589: LD_INT 27
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33597
33595: GO 33608
33597: POP
// bc_type := b_turret ; 28 :
33598: LD_ADDR_OWVAR 42
33602: PUSH
33603: LD_INT 33
33605: ST_TO_ADDR
33606: GO 33742
33608: LD_INT 28
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33627
33616: POP
// bc_type := b_armoury ; 29 :
33617: LD_ADDR_OWVAR 42
33621: PUSH
33622: LD_INT 4
33624: ST_TO_ADDR
33625: GO 33742
33627: LD_INT 29
33629: DOUBLE
33630: EQUAL
33631: IFTRUE 33635
33633: GO 33646
33635: POP
// bc_type := b_barracks ; 30 :
33636: LD_ADDR_OWVAR 42
33640: PUSH
33641: LD_INT 5
33643: ST_TO_ADDR
33644: GO 33742
33646: LD_INT 30
33648: DOUBLE
33649: EQUAL
33650: IFTRUE 33654
33652: GO 33665
33654: POP
// bc_type := b_solar_power ; 31 :
33655: LD_ADDR_OWVAR 42
33659: PUSH
33660: LD_INT 27
33662: ST_TO_ADDR
33663: GO 33742
33665: LD_INT 31
33667: DOUBLE
33668: EQUAL
33669: IFTRUE 33673
33671: GO 33684
33673: POP
// bc_type := b_oil_power ; 32 :
33674: LD_ADDR_OWVAR 42
33678: PUSH
33679: LD_INT 26
33681: ST_TO_ADDR
33682: GO 33742
33684: LD_INT 32
33686: DOUBLE
33687: EQUAL
33688: IFTRUE 33692
33690: GO 33703
33692: POP
// bc_type := b_siberite_power ; 33 :
33693: LD_ADDR_OWVAR 42
33697: PUSH
33698: LD_INT 28
33700: ST_TO_ADDR
33701: GO 33742
33703: LD_INT 33
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33711
33709: GO 33722
33711: POP
// bc_type := b_oil_mine ; 34 :
33712: LD_ADDR_OWVAR 42
33716: PUSH
33717: LD_INT 29
33719: ST_TO_ADDR
33720: GO 33742
33722: LD_INT 34
33724: DOUBLE
33725: EQUAL
33726: IFTRUE 33730
33728: GO 33741
33730: POP
// bc_type := b_siberite_mine ; end ;
33731: LD_ADDR_OWVAR 42
33735: PUSH
33736: LD_INT 30
33738: ST_TO_ADDR
33739: GO 33742
33741: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33742: LD_ADDR_VAR 0 8
33746: PUSH
33747: LD_VAR 0 5
33751: PPUSH
33752: LD_VAR 0 6
33756: PPUSH
33757: LD_VAR 0 3
33761: PPUSH
33762: CALL_OW 47
33766: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33767: LD_OWVAR 42
33771: PUSH
33772: LD_INT 32
33774: PUSH
33775: LD_INT 33
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: IN
33782: IFFALSE 33798
// PlaceWeaponTurret ( b , weapon ) ;
33784: LD_VAR 0 8
33788: PPUSH
33789: LD_VAR 0 4
33793: PPUSH
33794: CALL_OW 431
// end ;
33798: LD_VAR 0 7
33802: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33803: LD_INT 0
33805: PPUSH
33806: PPUSH
33807: PPUSH
33808: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33809: LD_ADDR_VAR 0 4
33813: PUSH
33814: LD_INT 22
33816: PUSH
33817: LD_OWVAR 2
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 30
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 30
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PPUSH
33858: CALL_OW 69
33862: ST_TO_ADDR
// if not tmp then
33863: LD_VAR 0 4
33867: NOT
33868: IFFALSE 33872
// exit ;
33870: GO 33931
// for i in tmp do
33872: LD_ADDR_VAR 0 2
33876: PUSH
33877: LD_VAR 0 4
33881: PUSH
33882: FOR_IN
33883: IFFALSE 33929
// for j = 1 to 3 do
33885: LD_ADDR_VAR 0 3
33889: PUSH
33890: DOUBLE
33891: LD_INT 1
33893: DEC
33894: ST_TO_ADDR
33895: LD_INT 3
33897: PUSH
33898: FOR_TO
33899: IFFALSE 33925
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33901: LD_VAR 0 2
33905: PPUSH
33906: CALL_OW 274
33910: PPUSH
33911: LD_VAR 0 3
33915: PPUSH
33916: LD_INT 99999
33918: PPUSH
33919: CALL_OW 277
33923: GO 33898
33925: POP
33926: POP
33927: GO 33882
33929: POP
33930: POP
// end ;
33931: LD_VAR 0 1
33935: RET
// export function hHackSetLevel10 ; var i , j ; begin
33936: LD_INT 0
33938: PPUSH
33939: PPUSH
33940: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33941: LD_ADDR_VAR 0 2
33945: PUSH
33946: LD_INT 21
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PPUSH
33956: CALL_OW 69
33960: PUSH
33961: FOR_IN
33962: IFFALSE 34014
// if IsSelected ( i ) then
33964: LD_VAR 0 2
33968: PPUSH
33969: CALL_OW 306
33973: IFFALSE 34012
// begin for j := 1 to 4 do
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: DOUBLE
33981: LD_INT 1
33983: DEC
33984: ST_TO_ADDR
33985: LD_INT 4
33987: PUSH
33988: FOR_TO
33989: IFFALSE 34010
// SetSkill ( i , j , 10 ) ;
33991: LD_VAR 0 2
33995: PPUSH
33996: LD_VAR 0 3
34000: PPUSH
34001: LD_INT 10
34003: PPUSH
34004: CALL_OW 237
34008: GO 33988
34010: POP
34011: POP
// end ;
34012: GO 33961
34014: POP
34015: POP
// end ;
34016: LD_VAR 0 1
34020: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34021: LD_INT 0
34023: PPUSH
34024: PPUSH
34025: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34026: LD_ADDR_VAR 0 2
34030: PUSH
34031: LD_INT 22
34033: PUSH
34034: LD_OWVAR 2
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 21
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PPUSH
34057: CALL_OW 69
34061: PUSH
34062: FOR_IN
34063: IFFALSE 34104
// begin for j := 1 to 4 do
34065: LD_ADDR_VAR 0 3
34069: PUSH
34070: DOUBLE
34071: LD_INT 1
34073: DEC
34074: ST_TO_ADDR
34075: LD_INT 4
34077: PUSH
34078: FOR_TO
34079: IFFALSE 34100
// SetSkill ( i , j , 10 ) ;
34081: LD_VAR 0 2
34085: PPUSH
34086: LD_VAR 0 3
34090: PPUSH
34091: LD_INT 10
34093: PPUSH
34094: CALL_OW 237
34098: GO 34078
34100: POP
34101: POP
// end ;
34102: GO 34062
34104: POP
34105: POP
// end ;
34106: LD_VAR 0 1
34110: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34111: LD_INT 0
34113: PPUSH
// uc_side := your_side ;
34114: LD_ADDR_OWVAR 20
34118: PUSH
34119: LD_OWVAR 2
34123: ST_TO_ADDR
// uc_nation := nation ;
34124: LD_ADDR_OWVAR 21
34128: PUSH
34129: LD_VAR 0 1
34133: ST_TO_ADDR
// InitHc ;
34134: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34138: LD_INT 0
34140: PPUSH
34141: LD_VAR 0 2
34145: PPUSH
34146: LD_VAR 0 3
34150: PPUSH
34151: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34155: LD_VAR 0 4
34159: PPUSH
34160: LD_VAR 0 5
34164: PPUSH
34165: CALL_OW 428
34169: PUSH
34170: LD_INT 0
34172: EQUAL
34173: IFFALSE 34197
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34175: CALL_OW 44
34179: PPUSH
34180: LD_VAR 0 4
34184: PPUSH
34185: LD_VAR 0 5
34189: PPUSH
34190: LD_INT 1
34192: PPUSH
34193: CALL_OW 48
// end ;
34197: LD_VAR 0 6
34201: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34202: LD_INT 0
34204: PPUSH
34205: PPUSH
// uc_side := your_side ;
34206: LD_ADDR_OWVAR 20
34210: PUSH
34211: LD_OWVAR 2
34215: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34216: LD_VAR 0 1
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: LD_INT 3
34229: PUSH
34230: LD_INT 4
34232: PUSH
34233: LD_INT 5
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: IN
34243: IFFALSE 34255
// uc_nation := nation_american else
34245: LD_ADDR_OWVAR 21
34249: PUSH
34250: LD_INT 1
34252: ST_TO_ADDR
34253: GO 34298
// if chassis in [ 11 , 12 , 13 , 14 ] then
34255: LD_VAR 0 1
34259: PUSH
34260: LD_INT 11
34262: PUSH
34263: LD_INT 12
34265: PUSH
34266: LD_INT 13
34268: PUSH
34269: LD_INT 14
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: IN
34278: IFFALSE 34290
// uc_nation := nation_arabian else
34280: LD_ADDR_OWVAR 21
34284: PUSH
34285: LD_INT 2
34287: ST_TO_ADDR
34288: GO 34298
// uc_nation := nation_russian ;
34290: LD_ADDR_OWVAR 21
34294: PUSH
34295: LD_INT 3
34297: ST_TO_ADDR
// vc_chassis := chassis ;
34298: LD_ADDR_OWVAR 37
34302: PUSH
34303: LD_VAR 0 1
34307: ST_TO_ADDR
// vc_engine := engine ;
34308: LD_ADDR_OWVAR 39
34312: PUSH
34313: LD_VAR 0 2
34317: ST_TO_ADDR
// vc_control := control ;
34318: LD_ADDR_OWVAR 38
34322: PUSH
34323: LD_VAR 0 3
34327: ST_TO_ADDR
// vc_weapon := weapon ;
34328: LD_ADDR_OWVAR 40
34332: PUSH
34333: LD_VAR 0 4
34337: ST_TO_ADDR
// un := CreateVehicle ;
34338: LD_ADDR_VAR 0 8
34342: PUSH
34343: CALL_OW 45
34347: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34348: LD_VAR 0 8
34352: PPUSH
34353: LD_INT 0
34355: PPUSH
34356: LD_INT 5
34358: PPUSH
34359: CALL_OW 12
34363: PPUSH
34364: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34368: LD_VAR 0 8
34372: PPUSH
34373: LD_VAR 0 5
34377: PPUSH
34378: LD_VAR 0 6
34382: PPUSH
34383: LD_INT 1
34385: PPUSH
34386: CALL_OW 48
// end ;
34390: LD_VAR 0 7
34394: RET
// export hInvincible ; every 1 do
34395: GO 34397
34397: DISABLE
// hInvincible := [ ] ;
34398: LD_ADDR_EXP 95
34402: PUSH
34403: EMPTY
34404: ST_TO_ADDR
34405: END
// every 10 do var i ;
34406: GO 34408
34408: DISABLE
34409: LD_INT 0
34411: PPUSH
// begin enable ;
34412: ENABLE
// if not hInvincible then
34413: LD_EXP 95
34417: NOT
34418: IFFALSE 34422
// exit ;
34420: GO 34466
// for i in hInvincible do
34422: LD_ADDR_VAR 0 1
34426: PUSH
34427: LD_EXP 95
34431: PUSH
34432: FOR_IN
34433: IFFALSE 34464
// if GetLives ( i ) < 1000 then
34435: LD_VAR 0 1
34439: PPUSH
34440: CALL_OW 256
34444: PUSH
34445: LD_INT 1000
34447: LESS
34448: IFFALSE 34462
// SetLives ( i , 1000 ) ;
34450: LD_VAR 0 1
34454: PPUSH
34455: LD_INT 1000
34457: PPUSH
34458: CALL_OW 234
34462: GO 34432
34464: POP
34465: POP
// end ;
34466: PPOPN 1
34468: END
// export function hHackInvincible ; var i ; begin
34469: LD_INT 0
34471: PPUSH
34472: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34473: LD_ADDR_VAR 0 2
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 21
34483: PUSH
34484: LD_INT 1
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 21
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: LIST
34505: PPUSH
34506: CALL_OW 69
34510: PUSH
34511: FOR_IN
34512: IFFALSE 34573
// if IsSelected ( i ) then
34514: LD_VAR 0 2
34518: PPUSH
34519: CALL_OW 306
34523: IFFALSE 34571
// begin if i in hInvincible then
34525: LD_VAR 0 2
34529: PUSH
34530: LD_EXP 95
34534: IN
34535: IFFALSE 34555
// hInvincible := hInvincible diff i else
34537: LD_ADDR_EXP 95
34541: PUSH
34542: LD_EXP 95
34546: PUSH
34547: LD_VAR 0 2
34551: DIFF
34552: ST_TO_ADDR
34553: GO 34571
// hInvincible := hInvincible union i ;
34555: LD_ADDR_EXP 95
34559: PUSH
34560: LD_EXP 95
34564: PUSH
34565: LD_VAR 0 2
34569: UNION
34570: ST_TO_ADDR
// end ;
34571: GO 34511
34573: POP
34574: POP
// end ;
34575: LD_VAR 0 1
34579: RET
// export function hHackInvisible ; var i , j ; begin
34580: LD_INT 0
34582: PPUSH
34583: PPUSH
34584: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34585: LD_ADDR_VAR 0 2
34589: PUSH
34590: LD_INT 21
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PPUSH
34600: CALL_OW 69
34604: PUSH
34605: FOR_IN
34606: IFFALSE 34630
// if IsSelected ( i ) then
34608: LD_VAR 0 2
34612: PPUSH
34613: CALL_OW 306
34617: IFFALSE 34628
// ComForceInvisible ( i ) ;
34619: LD_VAR 0 2
34623: PPUSH
34624: CALL_OW 496
34628: GO 34605
34630: POP
34631: POP
// end ;
34632: LD_VAR 0 1
34636: RET
// export function hHackChangeYourSide ; begin
34637: LD_INT 0
34639: PPUSH
// if your_side = 8 then
34640: LD_OWVAR 2
34644: PUSH
34645: LD_INT 8
34647: EQUAL
34648: IFFALSE 34660
// your_side := 0 else
34650: LD_ADDR_OWVAR 2
34654: PUSH
34655: LD_INT 0
34657: ST_TO_ADDR
34658: GO 34674
// your_side := your_side + 1 ;
34660: LD_ADDR_OWVAR 2
34664: PUSH
34665: LD_OWVAR 2
34669: PUSH
34670: LD_INT 1
34672: PLUS
34673: ST_TO_ADDR
// end ;
34674: LD_VAR 0 1
34678: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34679: LD_INT 0
34681: PPUSH
34682: PPUSH
34683: PPUSH
// for i in all_units do
34684: LD_ADDR_VAR 0 2
34688: PUSH
34689: LD_OWVAR 3
34693: PUSH
34694: FOR_IN
34695: IFFALSE 34773
// if IsSelected ( i ) then
34697: LD_VAR 0 2
34701: PPUSH
34702: CALL_OW 306
34706: IFFALSE 34771
// begin j := GetSide ( i ) ;
34708: LD_ADDR_VAR 0 3
34712: PUSH
34713: LD_VAR 0 2
34717: PPUSH
34718: CALL_OW 255
34722: ST_TO_ADDR
// if j = 8 then
34723: LD_VAR 0 3
34727: PUSH
34728: LD_INT 8
34730: EQUAL
34731: IFFALSE 34743
// j := 0 else
34733: LD_ADDR_VAR 0 3
34737: PUSH
34738: LD_INT 0
34740: ST_TO_ADDR
34741: GO 34757
// j := j + 1 ;
34743: LD_ADDR_VAR 0 3
34747: PUSH
34748: LD_VAR 0 3
34752: PUSH
34753: LD_INT 1
34755: PLUS
34756: ST_TO_ADDR
// SetSide ( i , j ) ;
34757: LD_VAR 0 2
34761: PPUSH
34762: LD_VAR 0 3
34766: PPUSH
34767: CALL_OW 235
// end ;
34771: GO 34694
34773: POP
34774: POP
// end ;
34775: LD_VAR 0 1
34779: RET
// export function hHackFog ; begin
34780: LD_INT 0
34782: PPUSH
// FogOff ( true ) ;
34783: LD_INT 1
34785: PPUSH
34786: CALL_OW 344
// end ;
34790: LD_VAR 0 1
34794: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34795: LD_INT 0
34797: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34798: LD_VAR 0 1
34802: PPUSH
34803: LD_VAR 0 2
34807: PPUSH
34808: LD_VAR 0 3
34812: PPUSH
34813: LD_INT 1
34815: PPUSH
34816: LD_INT 1
34818: PPUSH
34819: CALL_OW 483
// CenterOnXY ( x , y ) ;
34823: LD_VAR 0 2
34827: PPUSH
34828: LD_VAR 0 3
34832: PPUSH
34833: CALL_OW 84
// end ;
34837: LD_VAR 0 4
34841: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34842: LD_INT 0
34844: PPUSH
34845: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34846: LD_VAR 0 1
34850: NOT
34851: PUSH
34852: LD_VAR 0 2
34856: PPUSH
34857: LD_VAR 0 3
34861: PPUSH
34862: CALL_OW 488
34866: NOT
34867: OR
34868: PUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: CALL_OW 266
34878: PUSH
34879: LD_INT 3
34881: NONEQUAL
34882: PUSH
34883: LD_VAR 0 1
34887: PPUSH
34888: CALL_OW 247
34892: PUSH
34893: LD_INT 1
34895: EQUAL
34896: NOT
34897: AND
34898: OR
34899: IFFALSE 34903
// exit ;
34901: GO 35052
// if GetType ( factory ) = unit_human then
34903: LD_VAR 0 1
34907: PPUSH
34908: CALL_OW 247
34912: PUSH
34913: LD_INT 1
34915: EQUAL
34916: IFFALSE 34933
// factory := IsInUnit ( factory ) ;
34918: LD_ADDR_VAR 0 1
34922: PUSH
34923: LD_VAR 0 1
34927: PPUSH
34928: CALL_OW 310
34932: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34933: LD_VAR 0 1
34937: PPUSH
34938: CALL_OW 266
34942: PUSH
34943: LD_INT 3
34945: NONEQUAL
34946: IFFALSE 34950
// exit ;
34948: GO 35052
// if HexInfo ( x , y ) = factory then
34950: LD_VAR 0 2
34954: PPUSH
34955: LD_VAR 0 3
34959: PPUSH
34960: CALL_OW 428
34964: PUSH
34965: LD_VAR 0 1
34969: EQUAL
34970: IFFALSE 34997
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34972: LD_ADDR_EXP 96
34976: PUSH
34977: LD_EXP 96
34981: PPUSH
34982: LD_VAR 0 1
34986: PPUSH
34987: LD_INT 0
34989: PPUSH
34990: CALL_OW 1
34994: ST_TO_ADDR
34995: GO 35048
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34997: LD_ADDR_EXP 96
35001: PUSH
35002: LD_EXP 96
35006: PPUSH
35007: LD_VAR 0 1
35011: PPUSH
35012: LD_VAR 0 1
35016: PPUSH
35017: CALL_OW 255
35021: PUSH
35022: LD_VAR 0 1
35026: PUSH
35027: LD_VAR 0 2
35031: PUSH
35032: LD_VAR 0 3
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: PPUSH
35043: CALL_OW 1
35047: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35048: CALL 35057 0 0
// end ;
35052: LD_VAR 0 4
35056: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35057: LD_INT 0
35059: PPUSH
35060: PPUSH
35061: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35062: LD_STRING resetFactoryWaypoint();
35064: PPUSH
35065: CALL_OW 559
// if factoryWaypoints then
35069: LD_EXP 96
35073: IFFALSE 35199
// begin list := PrepareArray ( factoryWaypoints ) ;
35075: LD_ADDR_VAR 0 3
35079: PUSH
35080: LD_EXP 96
35084: PPUSH
35085: CALL 82496 0 1
35089: ST_TO_ADDR
// for i := 1 to list do
35090: LD_ADDR_VAR 0 2
35094: PUSH
35095: DOUBLE
35096: LD_INT 1
35098: DEC
35099: ST_TO_ADDR
35100: LD_VAR 0 3
35104: PUSH
35105: FOR_TO
35106: IFFALSE 35197
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35108: LD_STRING setFactoryWaypointXY(
35110: PUSH
35111: LD_VAR 0 3
35115: PUSH
35116: LD_VAR 0 2
35120: ARRAY
35121: PUSH
35122: LD_INT 1
35124: ARRAY
35125: STR
35126: PUSH
35127: LD_STRING ,
35129: STR
35130: PUSH
35131: LD_VAR 0 3
35135: PUSH
35136: LD_VAR 0 2
35140: ARRAY
35141: PUSH
35142: LD_INT 2
35144: ARRAY
35145: STR
35146: PUSH
35147: LD_STRING ,
35149: STR
35150: PUSH
35151: LD_VAR 0 3
35155: PUSH
35156: LD_VAR 0 2
35160: ARRAY
35161: PUSH
35162: LD_INT 3
35164: ARRAY
35165: STR
35166: PUSH
35167: LD_STRING ,
35169: STR
35170: PUSH
35171: LD_VAR 0 3
35175: PUSH
35176: LD_VAR 0 2
35180: ARRAY
35181: PUSH
35182: LD_INT 4
35184: ARRAY
35185: STR
35186: PUSH
35187: LD_STRING )
35189: STR
35190: PPUSH
35191: CALL_OW 559
35195: GO 35105
35197: POP
35198: POP
// end ; end ;
35199: LD_VAR 0 1
35203: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35204: LD_INT 0
35206: PPUSH
// if HexInfo ( x , y ) = warehouse then
35207: LD_VAR 0 2
35211: PPUSH
35212: LD_VAR 0 3
35216: PPUSH
35217: CALL_OW 428
35221: PUSH
35222: LD_VAR 0 1
35226: EQUAL
35227: IFFALSE 35254
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35229: LD_ADDR_EXP 97
35233: PUSH
35234: LD_EXP 97
35238: PPUSH
35239: LD_VAR 0 1
35243: PPUSH
35244: LD_INT 0
35246: PPUSH
35247: CALL_OW 1
35251: ST_TO_ADDR
35252: GO 35305
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35254: LD_ADDR_EXP 97
35258: PUSH
35259: LD_EXP 97
35263: PPUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: LD_VAR 0 1
35273: PPUSH
35274: CALL_OW 255
35278: PUSH
35279: LD_VAR 0 1
35283: PUSH
35284: LD_VAR 0 2
35288: PUSH
35289: LD_VAR 0 3
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: PPUSH
35300: CALL_OW 1
35304: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35305: CALL 35314 0 0
// end ;
35309: LD_VAR 0 4
35313: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35314: LD_INT 0
35316: PPUSH
35317: PPUSH
35318: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35319: LD_STRING resetWarehouseGatheringPoints();
35321: PPUSH
35322: CALL_OW 559
// if warehouseGatheringPoints then
35326: LD_EXP 97
35330: IFFALSE 35456
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_EXP 97
35341: PPUSH
35342: CALL 82496 0 1
35346: ST_TO_ADDR
// for i := 1 to list do
35347: LD_ADDR_VAR 0 2
35351: PUSH
35352: DOUBLE
35353: LD_INT 1
35355: DEC
35356: ST_TO_ADDR
35357: LD_VAR 0 3
35361: PUSH
35362: FOR_TO
35363: IFFALSE 35454
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35365: LD_STRING setWarehouseGatheringPointXY(
35367: PUSH
35368: LD_VAR 0 3
35372: PUSH
35373: LD_VAR 0 2
35377: ARRAY
35378: PUSH
35379: LD_INT 1
35381: ARRAY
35382: STR
35383: PUSH
35384: LD_STRING ,
35386: STR
35387: PUSH
35388: LD_VAR 0 3
35392: PUSH
35393: LD_VAR 0 2
35397: ARRAY
35398: PUSH
35399: LD_INT 2
35401: ARRAY
35402: STR
35403: PUSH
35404: LD_STRING ,
35406: STR
35407: PUSH
35408: LD_VAR 0 3
35412: PUSH
35413: LD_VAR 0 2
35417: ARRAY
35418: PUSH
35419: LD_INT 3
35421: ARRAY
35422: STR
35423: PUSH
35424: LD_STRING ,
35426: STR
35427: PUSH
35428: LD_VAR 0 3
35432: PUSH
35433: LD_VAR 0 2
35437: ARRAY
35438: PUSH
35439: LD_INT 4
35441: ARRAY
35442: STR
35443: PUSH
35444: LD_STRING )
35446: STR
35447: PPUSH
35448: CALL_OW 559
35452: GO 35362
35454: POP
35455: POP
// end ; end ;
35456: LD_VAR 0 1
35460: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35461: LD_EXP 97
35465: IFFALSE 36150
35467: GO 35469
35469: DISABLE
35470: LD_INT 0
35472: PPUSH
35473: PPUSH
35474: PPUSH
35475: PPUSH
35476: PPUSH
35477: PPUSH
35478: PPUSH
35479: PPUSH
35480: PPUSH
// begin enable ;
35481: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35482: LD_ADDR_VAR 0 3
35486: PUSH
35487: LD_EXP 97
35491: PPUSH
35492: CALL 82496 0 1
35496: ST_TO_ADDR
// if not list then
35497: LD_VAR 0 3
35501: NOT
35502: IFFALSE 35506
// exit ;
35504: GO 36150
// for i := 1 to list do
35506: LD_ADDR_VAR 0 1
35510: PUSH
35511: DOUBLE
35512: LD_INT 1
35514: DEC
35515: ST_TO_ADDR
35516: LD_VAR 0 3
35520: PUSH
35521: FOR_TO
35522: IFFALSE 36148
// begin depot := list [ i ] [ 2 ] ;
35524: LD_ADDR_VAR 0 8
35528: PUSH
35529: LD_VAR 0 3
35533: PUSH
35534: LD_VAR 0 1
35538: ARRAY
35539: PUSH
35540: LD_INT 2
35542: ARRAY
35543: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35544: LD_ADDR_VAR 0 5
35548: PUSH
35549: LD_VAR 0 3
35553: PUSH
35554: LD_VAR 0 1
35558: ARRAY
35559: PUSH
35560: LD_INT 1
35562: ARRAY
35563: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35564: LD_VAR 0 8
35568: PPUSH
35569: CALL_OW 301
35573: PUSH
35574: LD_VAR 0 5
35578: PUSH
35579: LD_VAR 0 8
35583: PPUSH
35584: CALL_OW 255
35588: NONEQUAL
35589: OR
35590: IFFALSE 35619
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35592: LD_ADDR_EXP 97
35596: PUSH
35597: LD_EXP 97
35601: PPUSH
35602: LD_VAR 0 8
35606: PPUSH
35607: LD_INT 0
35609: PPUSH
35610: CALL_OW 1
35614: ST_TO_ADDR
// exit ;
35615: POP
35616: POP
35617: GO 36150
// end ; x := list [ i ] [ 3 ] ;
35619: LD_ADDR_VAR 0 6
35623: PUSH
35624: LD_VAR 0 3
35628: PUSH
35629: LD_VAR 0 1
35633: ARRAY
35634: PUSH
35635: LD_INT 3
35637: ARRAY
35638: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35639: LD_ADDR_VAR 0 7
35643: PUSH
35644: LD_VAR 0 3
35648: PUSH
35649: LD_VAR 0 1
35653: ARRAY
35654: PUSH
35655: LD_INT 4
35657: ARRAY
35658: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35659: LD_ADDR_VAR 0 9
35663: PUSH
35664: LD_VAR 0 6
35668: PPUSH
35669: LD_VAR 0 7
35673: PPUSH
35674: LD_INT 16
35676: PPUSH
35677: CALL 81084 0 3
35681: ST_TO_ADDR
// if not cratesNearbyPoint then
35682: LD_VAR 0 9
35686: NOT
35687: IFFALSE 35693
// exit ;
35689: POP
35690: POP
35691: GO 36150
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35693: LD_ADDR_VAR 0 4
35697: PUSH
35698: LD_INT 22
35700: PUSH
35701: LD_VAR 0 5
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 3
35712: PUSH
35713: LD_INT 60
35715: PUSH
35716: EMPTY
35717: LIST
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 91
35725: PUSH
35726: LD_VAR 0 8
35730: PUSH
35731: LD_INT 6
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 2
35741: PUSH
35742: LD_INT 25
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 25
35754: PUSH
35755: LD_INT 16
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: PPUSH
35773: CALL_OW 69
35777: PUSH
35778: LD_VAR 0 8
35782: PPUSH
35783: CALL_OW 313
35787: PPUSH
35788: LD_INT 3
35790: PUSH
35791: LD_INT 60
35793: PUSH
35794: EMPTY
35795: LIST
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: LD_INT 25
35806: PUSH
35807: LD_INT 2
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 25
35816: PUSH
35817: LD_INT 16
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PPUSH
35833: CALL_OW 72
35837: UNION
35838: ST_TO_ADDR
// if tmp then
35839: LD_VAR 0 4
35843: IFFALSE 35923
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35845: LD_ADDR_VAR 0 4
35849: PUSH
35850: LD_VAR 0 4
35854: PPUSH
35855: LD_INT 3
35857: PPUSH
35858: CALL 79053 0 2
35862: ST_TO_ADDR
// for j in tmp do
35863: LD_ADDR_VAR 0 2
35867: PUSH
35868: LD_VAR 0 4
35872: PUSH
35873: FOR_IN
35874: IFFALSE 35917
// begin if IsInUnit ( j ) then
35876: LD_VAR 0 2
35880: PPUSH
35881: CALL_OW 310
35885: IFFALSE 35896
// ComExit ( j ) ;
35887: LD_VAR 0 2
35891: PPUSH
35892: CALL 79136 0 1
// AddComCollect ( j , x , y ) ;
35896: LD_VAR 0 2
35900: PPUSH
35901: LD_VAR 0 6
35905: PPUSH
35906: LD_VAR 0 7
35910: PPUSH
35911: CALL_OW 177
// end ;
35915: GO 35873
35917: POP
35918: POP
// exit ;
35919: POP
35920: POP
35921: GO 36150
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35923: LD_ADDR_VAR 0 4
35927: PUSH
35928: LD_INT 22
35930: PUSH
35931: LD_VAR 0 5
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 91
35942: PUSH
35943: LD_VAR 0 8
35947: PUSH
35948: LD_INT 8
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: LD_INT 34
35961: PUSH
35962: LD_INT 12
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 34
35971: PUSH
35972: LD_INT 51
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 34
35981: PUSH
35982: LD_INT 32
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 34
35991: PUSH
35992: LD_INT 89
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: LIST
36010: PPUSH
36011: CALL_OW 69
36015: ST_TO_ADDR
// if tmp then
36016: LD_VAR 0 4
36020: IFFALSE 36146
// begin for j in tmp do
36022: LD_ADDR_VAR 0 2
36026: PUSH
36027: LD_VAR 0 4
36031: PUSH
36032: FOR_IN
36033: IFFALSE 36144
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36035: LD_VAR 0 2
36039: PPUSH
36040: CALL_OW 262
36044: PUSH
36045: LD_INT 3
36047: EQUAL
36048: PUSH
36049: LD_VAR 0 2
36053: PPUSH
36054: CALL_OW 261
36058: PUSH
36059: LD_INT 20
36061: GREATER
36062: OR
36063: PUSH
36064: LD_VAR 0 2
36068: PPUSH
36069: CALL_OW 314
36073: NOT
36074: AND
36075: PUSH
36076: LD_VAR 0 2
36080: PPUSH
36081: CALL_OW 263
36085: PUSH
36086: LD_INT 1
36088: NONEQUAL
36089: PUSH
36090: LD_VAR 0 2
36094: PPUSH
36095: CALL_OW 311
36099: OR
36100: AND
36101: IFFALSE 36142
// begin ComCollect ( j , x , y ) ;
36103: LD_VAR 0 2
36107: PPUSH
36108: LD_VAR 0 6
36112: PPUSH
36113: LD_VAR 0 7
36117: PPUSH
36118: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36122: LD_VAR 0 2
36126: PPUSH
36127: LD_VAR 0 8
36131: PPUSH
36132: CALL_OW 172
// exit ;
36136: POP
36137: POP
36138: POP
36139: POP
36140: GO 36150
// end ;
36142: GO 36032
36144: POP
36145: POP
// end ; end ;
36146: GO 35521
36148: POP
36149: POP
// end ; end_of_file
36150: PPOPN 9
36152: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36153: LD_INT 0
36155: PPUSH
36156: PPUSH
36157: PPUSH
36158: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36159: LD_VAR 0 1
36163: PPUSH
36164: CALL_OW 264
36168: PUSH
36169: LD_INT 91
36171: EQUAL
36172: IFFALSE 36244
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36174: LD_INT 68
36176: PPUSH
36177: LD_VAR 0 1
36181: PPUSH
36182: CALL_OW 255
36186: PPUSH
36187: CALL_OW 321
36191: PUSH
36192: LD_INT 2
36194: EQUAL
36195: IFFALSE 36207
// eff := 70 else
36197: LD_ADDR_VAR 0 4
36201: PUSH
36202: LD_INT 70
36204: ST_TO_ADDR
36205: GO 36215
// eff := 30 ;
36207: LD_ADDR_VAR 0 4
36211: PUSH
36212: LD_INT 30
36214: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36215: LD_VAR 0 1
36219: PPUSH
36220: CALL_OW 250
36224: PPUSH
36225: LD_VAR 0 1
36229: PPUSH
36230: CALL_OW 251
36234: PPUSH
36235: LD_VAR 0 4
36239: PPUSH
36240: CALL_OW 495
// end ; end ;
36244: LD_VAR 0 2
36248: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36249: LD_INT 0
36251: PPUSH
// end ;
36252: LD_VAR 0 4
36256: RET
// export function SOS_Command ( cmd ) ; begin
36257: LD_INT 0
36259: PPUSH
// end ;
36260: LD_VAR 0 2
36264: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36265: LD_INT 0
36267: PPUSH
// end ;
36268: LD_VAR 0 6
36272: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36273: LD_INT 0
36275: PPUSH
36276: PPUSH
// if not vehicle or not factory then
36277: LD_VAR 0 1
36281: NOT
36282: PUSH
36283: LD_VAR 0 2
36287: NOT
36288: OR
36289: IFFALSE 36293
// exit ;
36291: GO 36524
// if factoryWaypoints >= factory then
36293: LD_EXP 96
36297: PUSH
36298: LD_VAR 0 2
36302: GREATEREQUAL
36303: IFFALSE 36524
// if factoryWaypoints [ factory ] then
36305: LD_EXP 96
36309: PUSH
36310: LD_VAR 0 2
36314: ARRAY
36315: IFFALSE 36524
// begin if GetControl ( vehicle ) = control_manual then
36317: LD_VAR 0 1
36321: PPUSH
36322: CALL_OW 263
36326: PUSH
36327: LD_INT 1
36329: EQUAL
36330: IFFALSE 36411
// begin driver := IsDrivenBy ( vehicle ) ;
36332: LD_ADDR_VAR 0 4
36336: PUSH
36337: LD_VAR 0 1
36341: PPUSH
36342: CALL_OW 311
36346: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36347: LD_VAR 0 4
36351: PPUSH
36352: LD_EXP 96
36356: PUSH
36357: LD_VAR 0 2
36361: ARRAY
36362: PUSH
36363: LD_INT 3
36365: ARRAY
36366: PPUSH
36367: LD_EXP 96
36371: PUSH
36372: LD_VAR 0 2
36376: ARRAY
36377: PUSH
36378: LD_INT 4
36380: ARRAY
36381: PPUSH
36382: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36386: LD_VAR 0 4
36390: PPUSH
36391: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36395: LD_VAR 0 4
36399: PPUSH
36400: LD_VAR 0 2
36404: PPUSH
36405: CALL_OW 180
// end else
36409: GO 36524
// if GetControl ( vehicle ) = control_remote then
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 263
36420: PUSH
36421: LD_INT 2
36423: EQUAL
36424: IFFALSE 36485
// begin wait ( 0 0$2 ) ;
36426: LD_INT 70
36428: PPUSH
36429: CALL_OW 67
// if Connect ( vehicle ) then
36433: LD_VAR 0 1
36437: PPUSH
36438: CALL 49355 0 1
36442: IFFALSE 36483
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36444: LD_VAR 0 1
36448: PPUSH
36449: LD_EXP 96
36453: PUSH
36454: LD_VAR 0 2
36458: ARRAY
36459: PUSH
36460: LD_INT 3
36462: ARRAY
36463: PPUSH
36464: LD_EXP 96
36468: PUSH
36469: LD_VAR 0 2
36473: ARRAY
36474: PUSH
36475: LD_INT 4
36477: ARRAY
36478: PPUSH
36479: CALL_OW 171
// end else
36483: GO 36524
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36485: LD_VAR 0 1
36489: PPUSH
36490: LD_EXP 96
36494: PUSH
36495: LD_VAR 0 2
36499: ARRAY
36500: PUSH
36501: LD_INT 3
36503: ARRAY
36504: PPUSH
36505: LD_EXP 96
36509: PUSH
36510: LD_VAR 0 2
36514: ARRAY
36515: PUSH
36516: LD_INT 4
36518: ARRAY
36519: PPUSH
36520: CALL_OW 171
// end ; end ;
36524: LD_VAR 0 3
36528: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36529: LD_INT 0
36531: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36532: LD_VAR 0 1
36536: PUSH
36537: LD_INT 250
36539: EQUAL
36540: PUSH
36541: LD_VAR 0 2
36545: PPUSH
36546: CALL_OW 264
36550: PUSH
36551: LD_INT 81
36553: EQUAL
36554: AND
36555: IFFALSE 36576
// MinerPlaceMine ( unit , x , y ) ;
36557: LD_VAR 0 2
36561: PPUSH
36562: LD_VAR 0 4
36566: PPUSH
36567: LD_VAR 0 5
36571: PPUSH
36572: CALL 39566 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36576: LD_VAR 0 1
36580: PUSH
36581: LD_INT 251
36583: EQUAL
36584: PUSH
36585: LD_VAR 0 2
36589: PPUSH
36590: CALL_OW 264
36594: PUSH
36595: LD_INT 81
36597: EQUAL
36598: AND
36599: IFFALSE 36620
// MinerDetonateMine ( unit , x , y ) ;
36601: LD_VAR 0 2
36605: PPUSH
36606: LD_VAR 0 4
36610: PPUSH
36611: LD_VAR 0 5
36615: PPUSH
36616: CALL 39841 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36620: LD_VAR 0 1
36624: PUSH
36625: LD_INT 252
36627: EQUAL
36628: PUSH
36629: LD_VAR 0 2
36633: PPUSH
36634: CALL_OW 264
36638: PUSH
36639: LD_INT 81
36641: EQUAL
36642: AND
36643: IFFALSE 36664
// MinerCreateMinefield ( unit , x , y ) ;
36645: LD_VAR 0 2
36649: PPUSH
36650: LD_VAR 0 4
36654: PPUSH
36655: LD_VAR 0 5
36659: PPUSH
36660: CALL 40258 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36664: LD_VAR 0 1
36668: PUSH
36669: LD_INT 253
36671: EQUAL
36672: PUSH
36673: LD_VAR 0 2
36677: PPUSH
36678: CALL_OW 257
36682: PUSH
36683: LD_INT 5
36685: EQUAL
36686: AND
36687: IFFALSE 36708
// ComBinocular ( unit , x , y ) ;
36689: LD_VAR 0 2
36693: PPUSH
36694: LD_VAR 0 4
36698: PPUSH
36699: LD_VAR 0 5
36703: PPUSH
36704: CALL 40627 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36708: LD_VAR 0 1
36712: PUSH
36713: LD_INT 254
36715: EQUAL
36716: PUSH
36717: LD_VAR 0 2
36721: PPUSH
36722: CALL_OW 264
36726: PUSH
36727: LD_INT 99
36729: EQUAL
36730: AND
36731: PUSH
36732: LD_VAR 0 3
36736: PPUSH
36737: CALL_OW 263
36741: PUSH
36742: LD_INT 3
36744: EQUAL
36745: AND
36746: IFFALSE 36762
// HackDestroyVehicle ( unit , selectedUnit ) ;
36748: LD_VAR 0 2
36752: PPUSH
36753: LD_VAR 0 3
36757: PPUSH
36758: CALL 38930 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36762: LD_VAR 0 1
36766: PUSH
36767: LD_INT 255
36769: EQUAL
36770: PUSH
36771: LD_VAR 0 2
36775: PPUSH
36776: CALL_OW 264
36780: PUSH
36781: LD_INT 14
36783: PUSH
36784: LD_INT 53
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: IN
36791: AND
36792: PUSH
36793: LD_VAR 0 4
36797: PPUSH
36798: LD_VAR 0 5
36802: PPUSH
36803: CALL_OW 488
36807: AND
36808: IFFALSE 36832
// CutTreeXYR ( unit , x , y , 12 ) ;
36810: LD_VAR 0 2
36814: PPUSH
36815: LD_VAR 0 4
36819: PPUSH
36820: LD_VAR 0 5
36824: PPUSH
36825: LD_INT 12
36827: PPUSH
36828: CALL 36927 0 4
// if cmd = 256 then
36832: LD_VAR 0 1
36836: PUSH
36837: LD_INT 256
36839: EQUAL
36840: IFFALSE 36861
// SetFactoryWaypoint ( unit , x , y ) ;
36842: LD_VAR 0 2
36846: PPUSH
36847: LD_VAR 0 4
36851: PPUSH
36852: LD_VAR 0 5
36856: PPUSH
36857: CALL 34842 0 3
// if cmd = 257 then
36861: LD_VAR 0 1
36865: PUSH
36866: LD_INT 257
36868: EQUAL
36869: IFFALSE 36890
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36871: LD_VAR 0 2
36875: PPUSH
36876: LD_VAR 0 4
36880: PPUSH
36881: LD_VAR 0 5
36885: PPUSH
36886: CALL 35204 0 3
// if cmd = 258 then
36890: LD_VAR 0 1
36894: PUSH
36895: LD_INT 258
36897: EQUAL
36898: IFFALSE 36922
// BurnTreeXYR ( unit , x , y , 8 ) ;
36900: LD_VAR 0 2
36904: PPUSH
36905: LD_VAR 0 4
36909: PPUSH
36910: LD_VAR 0 5
36914: PPUSH
36915: LD_INT 8
36917: PPUSH
36918: CALL 37321 0 4
// end ;
36922: LD_VAR 0 6
36926: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36927: LD_INT 0
36929: PPUSH
36930: PPUSH
36931: PPUSH
36932: PPUSH
36933: PPUSH
36934: PPUSH
36935: PPUSH
36936: PPUSH
36937: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36938: LD_VAR 0 1
36942: PPUSH
36943: CALL_OW 302
36947: NOT
36948: PUSH
36949: LD_VAR 0 2
36953: PPUSH
36954: LD_VAR 0 3
36958: PPUSH
36959: CALL_OW 488
36963: NOT
36964: OR
36965: PUSH
36966: LD_VAR 0 4
36970: NOT
36971: OR
36972: IFFALSE 36976
// exit ;
36974: GO 37316
// list := [ ] ;
36976: LD_ADDR_VAR 0 13
36980: PUSH
36981: EMPTY
36982: ST_TO_ADDR
// if x - r < 0 then
36983: LD_VAR 0 2
36987: PUSH
36988: LD_VAR 0 4
36992: MINUS
36993: PUSH
36994: LD_INT 0
36996: LESS
36997: IFFALSE 37009
// min_x := 0 else
36999: LD_ADDR_VAR 0 7
37003: PUSH
37004: LD_INT 0
37006: ST_TO_ADDR
37007: GO 37025
// min_x := x - r ;
37009: LD_ADDR_VAR 0 7
37013: PUSH
37014: LD_VAR 0 2
37018: PUSH
37019: LD_VAR 0 4
37023: MINUS
37024: ST_TO_ADDR
// if y - r < 0 then
37025: LD_VAR 0 3
37029: PUSH
37030: LD_VAR 0 4
37034: MINUS
37035: PUSH
37036: LD_INT 0
37038: LESS
37039: IFFALSE 37051
// min_y := 0 else
37041: LD_ADDR_VAR 0 8
37045: PUSH
37046: LD_INT 0
37048: ST_TO_ADDR
37049: GO 37067
// min_y := y - r ;
37051: LD_ADDR_VAR 0 8
37055: PUSH
37056: LD_VAR 0 3
37060: PUSH
37061: LD_VAR 0 4
37065: MINUS
37066: ST_TO_ADDR
// max_x := x + r ;
37067: LD_ADDR_VAR 0 9
37071: PUSH
37072: LD_VAR 0 2
37076: PUSH
37077: LD_VAR 0 4
37081: PLUS
37082: ST_TO_ADDR
// max_y := y + r ;
37083: LD_ADDR_VAR 0 10
37087: PUSH
37088: LD_VAR 0 3
37092: PUSH
37093: LD_VAR 0 4
37097: PLUS
37098: ST_TO_ADDR
// for _x = min_x to max_x do
37099: LD_ADDR_VAR 0 11
37103: PUSH
37104: DOUBLE
37105: LD_VAR 0 7
37109: DEC
37110: ST_TO_ADDR
37111: LD_VAR 0 9
37115: PUSH
37116: FOR_TO
37117: IFFALSE 37234
// for _y = min_y to max_y do
37119: LD_ADDR_VAR 0 12
37123: PUSH
37124: DOUBLE
37125: LD_VAR 0 8
37129: DEC
37130: ST_TO_ADDR
37131: LD_VAR 0 10
37135: PUSH
37136: FOR_TO
37137: IFFALSE 37230
// begin if not ValidHex ( _x , _y ) then
37139: LD_VAR 0 11
37143: PPUSH
37144: LD_VAR 0 12
37148: PPUSH
37149: CALL_OW 488
37153: NOT
37154: IFFALSE 37158
// continue ;
37156: GO 37136
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37158: LD_VAR 0 11
37162: PPUSH
37163: LD_VAR 0 12
37167: PPUSH
37168: CALL_OW 351
37172: PUSH
37173: LD_VAR 0 11
37177: PPUSH
37178: LD_VAR 0 12
37182: PPUSH
37183: CALL_OW 554
37187: AND
37188: IFFALSE 37228
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37190: LD_ADDR_VAR 0 13
37194: PUSH
37195: LD_VAR 0 13
37199: PPUSH
37200: LD_VAR 0 13
37204: PUSH
37205: LD_INT 1
37207: PLUS
37208: PPUSH
37209: LD_VAR 0 11
37213: PUSH
37214: LD_VAR 0 12
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PPUSH
37223: CALL_OW 2
37227: ST_TO_ADDR
// end ;
37228: GO 37136
37230: POP
37231: POP
37232: GO 37116
37234: POP
37235: POP
// if not list then
37236: LD_VAR 0 13
37240: NOT
37241: IFFALSE 37245
// exit ;
37243: GO 37316
// for i in list do
37245: LD_ADDR_VAR 0 6
37249: PUSH
37250: LD_VAR 0 13
37254: PUSH
37255: FOR_IN
37256: IFFALSE 37314
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37258: LD_VAR 0 1
37262: PPUSH
37263: LD_STRING M
37265: PUSH
37266: LD_VAR 0 6
37270: PUSH
37271: LD_INT 1
37273: ARRAY
37274: PUSH
37275: LD_VAR 0 6
37279: PUSH
37280: LD_INT 2
37282: ARRAY
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: PPUSH
37308: CALL_OW 447
37312: GO 37255
37314: POP
37315: POP
// end ;
37316: LD_VAR 0 5
37320: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37321: LD_INT 0
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
37329: PPUSH
37330: PPUSH
37331: PPUSH
37332: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL_OW 302
37342: NOT
37343: PUSH
37344: LD_VAR 0 2
37348: PPUSH
37349: LD_VAR 0 3
37353: PPUSH
37354: CALL_OW 488
37358: NOT
37359: OR
37360: PUSH
37361: LD_VAR 0 4
37365: NOT
37366: OR
37367: IFFALSE 37371
// exit ;
37369: GO 37884
// list := [ ] ;
37371: LD_ADDR_VAR 0 13
37375: PUSH
37376: EMPTY
37377: ST_TO_ADDR
// if x - r < 0 then
37378: LD_VAR 0 2
37382: PUSH
37383: LD_VAR 0 4
37387: MINUS
37388: PUSH
37389: LD_INT 0
37391: LESS
37392: IFFALSE 37404
// min_x := 0 else
37394: LD_ADDR_VAR 0 7
37398: PUSH
37399: LD_INT 0
37401: ST_TO_ADDR
37402: GO 37420
// min_x := x - r ;
37404: LD_ADDR_VAR 0 7
37408: PUSH
37409: LD_VAR 0 2
37413: PUSH
37414: LD_VAR 0 4
37418: MINUS
37419: ST_TO_ADDR
// if y - r < 0 then
37420: LD_VAR 0 3
37424: PUSH
37425: LD_VAR 0 4
37429: MINUS
37430: PUSH
37431: LD_INT 0
37433: LESS
37434: IFFALSE 37446
// min_y := 0 else
37436: LD_ADDR_VAR 0 8
37440: PUSH
37441: LD_INT 0
37443: ST_TO_ADDR
37444: GO 37462
// min_y := y - r ;
37446: LD_ADDR_VAR 0 8
37450: PUSH
37451: LD_VAR 0 3
37455: PUSH
37456: LD_VAR 0 4
37460: MINUS
37461: ST_TO_ADDR
// max_x := x + r ;
37462: LD_ADDR_VAR 0 9
37466: PUSH
37467: LD_VAR 0 2
37471: PUSH
37472: LD_VAR 0 4
37476: PLUS
37477: ST_TO_ADDR
// max_y := y + r ;
37478: LD_ADDR_VAR 0 10
37482: PUSH
37483: LD_VAR 0 3
37487: PUSH
37488: LD_VAR 0 4
37492: PLUS
37493: ST_TO_ADDR
// for _x = min_x to max_x do
37494: LD_ADDR_VAR 0 11
37498: PUSH
37499: DOUBLE
37500: LD_VAR 0 7
37504: DEC
37505: ST_TO_ADDR
37506: LD_VAR 0 9
37510: PUSH
37511: FOR_TO
37512: IFFALSE 37629
// for _y = min_y to max_y do
37514: LD_ADDR_VAR 0 12
37518: PUSH
37519: DOUBLE
37520: LD_VAR 0 8
37524: DEC
37525: ST_TO_ADDR
37526: LD_VAR 0 10
37530: PUSH
37531: FOR_TO
37532: IFFALSE 37625
// begin if not ValidHex ( _x , _y ) then
37534: LD_VAR 0 11
37538: PPUSH
37539: LD_VAR 0 12
37543: PPUSH
37544: CALL_OW 488
37548: NOT
37549: IFFALSE 37553
// continue ;
37551: GO 37531
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37553: LD_VAR 0 11
37557: PPUSH
37558: LD_VAR 0 12
37562: PPUSH
37563: CALL_OW 351
37567: PUSH
37568: LD_VAR 0 11
37572: PPUSH
37573: LD_VAR 0 12
37577: PPUSH
37578: CALL_OW 554
37582: AND
37583: IFFALSE 37623
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37585: LD_ADDR_VAR 0 13
37589: PUSH
37590: LD_VAR 0 13
37594: PPUSH
37595: LD_VAR 0 13
37599: PUSH
37600: LD_INT 1
37602: PLUS
37603: PPUSH
37604: LD_VAR 0 11
37608: PUSH
37609: LD_VAR 0 12
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PPUSH
37618: CALL_OW 2
37622: ST_TO_ADDR
// end ;
37623: GO 37531
37625: POP
37626: POP
37627: GO 37511
37629: POP
37630: POP
// if not list then
37631: LD_VAR 0 13
37635: NOT
37636: IFFALSE 37640
// exit ;
37638: GO 37884
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37640: LD_ADDR_VAR 0 13
37644: PUSH
37645: LD_VAR 0 1
37649: PPUSH
37650: LD_VAR 0 13
37654: PPUSH
37655: LD_INT 1
37657: PPUSH
37658: LD_INT 1
37660: PPUSH
37661: CALL 46497 0 4
37665: ST_TO_ADDR
// ComStop ( flame ) ;
37666: LD_VAR 0 1
37670: PPUSH
37671: CALL_OW 141
// for i in list do
37675: LD_ADDR_VAR 0 6
37679: PUSH
37680: LD_VAR 0 13
37684: PUSH
37685: FOR_IN
37686: IFFALSE 37717
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37688: LD_VAR 0 1
37692: PPUSH
37693: LD_VAR 0 6
37697: PUSH
37698: LD_INT 1
37700: ARRAY
37701: PPUSH
37702: LD_VAR 0 6
37706: PUSH
37707: LD_INT 2
37709: ARRAY
37710: PPUSH
37711: CALL_OW 176
37715: GO 37685
37717: POP
37718: POP
// repeat wait ( 0 0$1 ) ;
37719: LD_INT 35
37721: PPUSH
37722: CALL_OW 67
// task := GetTaskList ( flame ) ;
37726: LD_ADDR_VAR 0 14
37730: PUSH
37731: LD_VAR 0 1
37735: PPUSH
37736: CALL_OW 437
37740: ST_TO_ADDR
// if not task then
37741: LD_VAR 0 14
37745: NOT
37746: IFFALSE 37750
// exit ;
37748: GO 37884
// if task [ 1 ] [ 1 ] <> | then
37750: LD_VAR 0 14
37754: PUSH
37755: LD_INT 1
37757: ARRAY
37758: PUSH
37759: LD_INT 1
37761: ARRAY
37762: PUSH
37763: LD_STRING |
37765: NONEQUAL
37766: IFFALSE 37770
// exit ;
37768: GO 37884
// _x := task [ 1 ] [ 2 ] ;
37770: LD_ADDR_VAR 0 11
37774: PUSH
37775: LD_VAR 0 14
37779: PUSH
37780: LD_INT 1
37782: ARRAY
37783: PUSH
37784: LD_INT 2
37786: ARRAY
37787: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37788: LD_ADDR_VAR 0 12
37792: PUSH
37793: LD_VAR 0 14
37797: PUSH
37798: LD_INT 1
37800: ARRAY
37801: PUSH
37802: LD_INT 3
37804: ARRAY
37805: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37806: LD_VAR 0 11
37810: PPUSH
37811: LD_VAR 0 12
37815: PPUSH
37816: CALL_OW 351
37820: NOT
37821: PUSH
37822: LD_VAR 0 11
37826: PPUSH
37827: LD_VAR 0 12
37831: PPUSH
37832: CALL_OW 554
37836: NOT
37837: OR
37838: IFFALSE 37872
// begin task := Delete ( task , 1 ) ;
37840: LD_ADDR_VAR 0 14
37844: PUSH
37845: LD_VAR 0 14
37849: PPUSH
37850: LD_INT 1
37852: PPUSH
37853: CALL_OW 3
37857: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37858: LD_VAR 0 1
37862: PPUSH
37863: LD_VAR 0 14
37867: PPUSH
37868: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37872: LD_VAR 0 1
37876: PPUSH
37877: CALL_OW 314
37881: NOT
37882: IFFALSE 37719
// end ;
37884: LD_VAR 0 5
37888: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37889: LD_EXP 99
37893: NOT
37894: IFFALSE 37944
37896: GO 37898
37898: DISABLE
// begin initHack := true ;
37899: LD_ADDR_EXP 99
37903: PUSH
37904: LD_INT 1
37906: ST_TO_ADDR
// hackTanks := [ ] ;
37907: LD_ADDR_EXP 100
37911: PUSH
37912: EMPTY
37913: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37914: LD_ADDR_EXP 101
37918: PUSH
37919: EMPTY
37920: ST_TO_ADDR
// hackLimit := 3 ;
37921: LD_ADDR_EXP 102
37925: PUSH
37926: LD_INT 3
37928: ST_TO_ADDR
// hackDist := 12 ;
37929: LD_ADDR_EXP 103
37933: PUSH
37934: LD_INT 12
37936: ST_TO_ADDR
// hackCounter := [ ] ;
37937: LD_ADDR_EXP 104
37941: PUSH
37942: EMPTY
37943: ST_TO_ADDR
// end ;
37944: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37945: LD_EXP 99
37949: PUSH
37950: LD_INT 34
37952: PUSH
37953: LD_INT 99
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PPUSH
37960: CALL_OW 69
37964: AND
37965: IFFALSE 38218
37967: GO 37969
37969: DISABLE
37970: LD_INT 0
37972: PPUSH
37973: PPUSH
// begin enable ;
37974: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37975: LD_ADDR_VAR 0 1
37979: PUSH
37980: LD_INT 34
37982: PUSH
37983: LD_INT 99
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PPUSH
37990: CALL_OW 69
37994: PUSH
37995: FOR_IN
37996: IFFALSE 38216
// begin if not i in hackTanks then
37998: LD_VAR 0 1
38002: PUSH
38003: LD_EXP 100
38007: IN
38008: NOT
38009: IFFALSE 38092
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38011: LD_ADDR_EXP 100
38015: PUSH
38016: LD_EXP 100
38020: PPUSH
38021: LD_EXP 100
38025: PUSH
38026: LD_INT 1
38028: PLUS
38029: PPUSH
38030: LD_VAR 0 1
38034: PPUSH
38035: CALL_OW 1
38039: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38040: LD_ADDR_EXP 101
38044: PUSH
38045: LD_EXP 101
38049: PPUSH
38050: LD_EXP 101
38054: PUSH
38055: LD_INT 1
38057: PLUS
38058: PPUSH
38059: EMPTY
38060: PPUSH
38061: CALL_OW 1
38065: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38066: LD_ADDR_EXP 104
38070: PUSH
38071: LD_EXP 104
38075: PPUSH
38076: LD_EXP 104
38080: PUSH
38081: LD_INT 1
38083: PLUS
38084: PPUSH
38085: EMPTY
38086: PPUSH
38087: CALL_OW 1
38091: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38092: LD_VAR 0 1
38096: PPUSH
38097: CALL_OW 302
38101: NOT
38102: IFFALSE 38115
// begin HackUnlinkAll ( i ) ;
38104: LD_VAR 0 1
38108: PPUSH
38109: CALL 38221 0 1
// continue ;
38113: GO 37995
// end ; HackCheckCapturedStatus ( i ) ;
38115: LD_VAR 0 1
38119: PPUSH
38120: CALL 38664 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38124: LD_ADDR_VAR 0 2
38128: PUSH
38129: LD_INT 81
38131: PUSH
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL_OW 255
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 33
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 91
38158: PUSH
38159: LD_VAR 0 1
38163: PUSH
38164: LD_EXP 103
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 50
38176: PUSH
38177: EMPTY
38178: LIST
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: PPUSH
38186: CALL_OW 69
38190: ST_TO_ADDR
// if not tmp then
38191: LD_VAR 0 2
38195: NOT
38196: IFFALSE 38200
// continue ;
38198: GO 37995
// HackLink ( i , tmp ) ;
38200: LD_VAR 0 1
38204: PPUSH
38205: LD_VAR 0 2
38209: PPUSH
38210: CALL 38357 0 2
// end ;
38214: GO 37995
38216: POP
38217: POP
// end ;
38218: PPOPN 2
38220: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38221: LD_INT 0
38223: PPUSH
38224: PPUSH
38225: PPUSH
// if not hack in hackTanks then
38226: LD_VAR 0 1
38230: PUSH
38231: LD_EXP 100
38235: IN
38236: NOT
38237: IFFALSE 38241
// exit ;
38239: GO 38352
// index := GetElementIndex ( hackTanks , hack ) ;
38241: LD_ADDR_VAR 0 4
38245: PUSH
38246: LD_EXP 100
38250: PPUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: CALL 45794 0 2
38260: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38261: LD_EXP 101
38265: PUSH
38266: LD_VAR 0 4
38270: ARRAY
38271: IFFALSE 38352
// begin for i in hackTanksCaptured [ index ] do
38273: LD_ADDR_VAR 0 3
38277: PUSH
38278: LD_EXP 101
38282: PUSH
38283: LD_VAR 0 4
38287: ARRAY
38288: PUSH
38289: FOR_IN
38290: IFFALSE 38316
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38292: LD_VAR 0 3
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PPUSH
38301: LD_VAR 0 3
38305: PUSH
38306: LD_INT 2
38308: ARRAY
38309: PPUSH
38310: CALL_OW 235
38314: GO 38289
38316: POP
38317: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38318: LD_ADDR_EXP 101
38322: PUSH
38323: LD_EXP 101
38327: PPUSH
38328: LD_VAR 0 4
38332: PPUSH
38333: EMPTY
38334: PPUSH
38335: CALL_OW 1
38339: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38340: LD_VAR 0 1
38344: PPUSH
38345: LD_INT 0
38347: PPUSH
38348: CALL_OW 505
// end ; end ;
38352: LD_VAR 0 2
38356: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38357: LD_INT 0
38359: PPUSH
38360: PPUSH
38361: PPUSH
// if not hack in hackTanks or not vehicles then
38362: LD_VAR 0 1
38366: PUSH
38367: LD_EXP 100
38371: IN
38372: NOT
38373: PUSH
38374: LD_VAR 0 2
38378: NOT
38379: OR
38380: IFFALSE 38384
// exit ;
38382: GO 38659
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38384: LD_ADDR_VAR 0 2
38388: PUSH
38389: LD_VAR 0 1
38393: PPUSH
38394: LD_VAR 0 2
38398: PPUSH
38399: LD_INT 1
38401: PPUSH
38402: LD_INT 1
38404: PPUSH
38405: CALL 46444 0 4
38409: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38410: LD_ADDR_VAR 0 5
38414: PUSH
38415: LD_EXP 100
38419: PPUSH
38420: LD_VAR 0 1
38424: PPUSH
38425: CALL 45794 0 2
38429: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38430: LD_EXP 101
38434: PUSH
38435: LD_VAR 0 5
38439: ARRAY
38440: PUSH
38441: LD_EXP 102
38445: LESS
38446: IFFALSE 38635
// begin for i := 1 to vehicles do
38448: LD_ADDR_VAR 0 4
38452: PUSH
38453: DOUBLE
38454: LD_INT 1
38456: DEC
38457: ST_TO_ADDR
38458: LD_VAR 0 2
38462: PUSH
38463: FOR_TO
38464: IFFALSE 38633
// begin if hackTanksCaptured [ index ] = hackLimit then
38466: LD_EXP 101
38470: PUSH
38471: LD_VAR 0 5
38475: ARRAY
38476: PUSH
38477: LD_EXP 102
38481: EQUAL
38482: IFFALSE 38486
// break ;
38484: GO 38633
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38486: LD_ADDR_EXP 104
38490: PUSH
38491: LD_EXP 104
38495: PPUSH
38496: LD_VAR 0 5
38500: PPUSH
38501: LD_EXP 104
38505: PUSH
38506: LD_VAR 0 5
38510: ARRAY
38511: PUSH
38512: LD_INT 1
38514: PLUS
38515: PPUSH
38516: CALL_OW 1
38520: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38521: LD_ADDR_EXP 101
38525: PUSH
38526: LD_EXP 101
38530: PPUSH
38531: LD_VAR 0 5
38535: PUSH
38536: LD_EXP 101
38540: PUSH
38541: LD_VAR 0 5
38545: ARRAY
38546: PUSH
38547: LD_INT 1
38549: PLUS
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PPUSH
38555: LD_VAR 0 2
38559: PUSH
38560: LD_VAR 0 4
38564: ARRAY
38565: PUSH
38566: LD_VAR 0 2
38570: PUSH
38571: LD_VAR 0 4
38575: ARRAY
38576: PPUSH
38577: CALL_OW 255
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PPUSH
38586: CALL 46009 0 3
38590: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38591: LD_VAR 0 2
38595: PUSH
38596: LD_VAR 0 4
38600: ARRAY
38601: PPUSH
38602: LD_VAR 0 1
38606: PPUSH
38607: CALL_OW 255
38611: PPUSH
38612: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38616: LD_VAR 0 2
38620: PUSH
38621: LD_VAR 0 4
38625: ARRAY
38626: PPUSH
38627: CALL_OW 141
// end ;
38631: GO 38463
38633: POP
38634: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38635: LD_VAR 0 1
38639: PPUSH
38640: LD_EXP 101
38644: PUSH
38645: LD_VAR 0 5
38649: ARRAY
38650: PUSH
38651: LD_INT 0
38653: PLUS
38654: PPUSH
38655: CALL_OW 505
// end ;
38659: LD_VAR 0 3
38663: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38664: LD_INT 0
38666: PPUSH
38667: PPUSH
38668: PPUSH
38669: PPUSH
// if not hack in hackTanks then
38670: LD_VAR 0 1
38674: PUSH
38675: LD_EXP 100
38679: IN
38680: NOT
38681: IFFALSE 38685
// exit ;
38683: GO 38925
// index := GetElementIndex ( hackTanks , hack ) ;
38685: LD_ADDR_VAR 0 4
38689: PUSH
38690: LD_EXP 100
38694: PPUSH
38695: LD_VAR 0 1
38699: PPUSH
38700: CALL 45794 0 2
38704: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38705: LD_ADDR_VAR 0 3
38709: PUSH
38710: DOUBLE
38711: LD_EXP 101
38715: PUSH
38716: LD_VAR 0 4
38720: ARRAY
38721: INC
38722: ST_TO_ADDR
38723: LD_INT 1
38725: PUSH
38726: FOR_DOWNTO
38727: IFFALSE 38899
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38729: LD_ADDR_VAR 0 5
38733: PUSH
38734: LD_EXP 101
38738: PUSH
38739: LD_VAR 0 4
38743: ARRAY
38744: PUSH
38745: LD_VAR 0 3
38749: ARRAY
38750: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38751: LD_VAR 0 5
38755: PUSH
38756: LD_INT 1
38758: ARRAY
38759: PPUSH
38760: CALL_OW 302
38764: NOT
38765: PUSH
38766: LD_VAR 0 5
38770: PUSH
38771: LD_INT 1
38773: ARRAY
38774: PPUSH
38775: CALL_OW 255
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL_OW 255
38789: NONEQUAL
38790: OR
38791: IFFALSE 38897
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38793: LD_VAR 0 5
38797: PUSH
38798: LD_INT 1
38800: ARRAY
38801: PPUSH
38802: CALL_OW 305
38806: PUSH
38807: LD_VAR 0 5
38811: PUSH
38812: LD_INT 1
38814: ARRAY
38815: PPUSH
38816: CALL_OW 255
38820: PUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 255
38830: EQUAL
38831: AND
38832: IFFALSE 38856
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38834: LD_VAR 0 5
38838: PUSH
38839: LD_INT 1
38841: ARRAY
38842: PPUSH
38843: LD_VAR 0 5
38847: PUSH
38848: LD_INT 2
38850: ARRAY
38851: PPUSH
38852: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38856: LD_ADDR_EXP 101
38860: PUSH
38861: LD_EXP 101
38865: PPUSH
38866: LD_VAR 0 4
38870: PPUSH
38871: LD_EXP 101
38875: PUSH
38876: LD_VAR 0 4
38880: ARRAY
38881: PPUSH
38882: LD_VAR 0 3
38886: PPUSH
38887: CALL_OW 3
38891: PPUSH
38892: CALL_OW 1
38896: ST_TO_ADDR
// end ; end ;
38897: GO 38726
38899: POP
38900: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38901: LD_VAR 0 1
38905: PPUSH
38906: LD_EXP 101
38910: PUSH
38911: LD_VAR 0 4
38915: ARRAY
38916: PUSH
38917: LD_INT 0
38919: PLUS
38920: PPUSH
38921: CALL_OW 505
// end ;
38925: LD_VAR 0 2
38929: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38930: LD_INT 0
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
// if not hack in hackTanks then
38936: LD_VAR 0 1
38940: PUSH
38941: LD_EXP 100
38945: IN
38946: NOT
38947: IFFALSE 38951
// exit ;
38949: GO 39036
// index := GetElementIndex ( hackTanks , hack ) ;
38951: LD_ADDR_VAR 0 5
38955: PUSH
38956: LD_EXP 100
38960: PPUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL 45794 0 2
38970: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38971: LD_ADDR_VAR 0 4
38975: PUSH
38976: DOUBLE
38977: LD_INT 1
38979: DEC
38980: ST_TO_ADDR
38981: LD_EXP 101
38985: PUSH
38986: LD_VAR 0 5
38990: ARRAY
38991: PUSH
38992: FOR_TO
38993: IFFALSE 39034
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38995: LD_EXP 101
38999: PUSH
39000: LD_VAR 0 5
39004: ARRAY
39005: PUSH
39006: LD_VAR 0 4
39010: ARRAY
39011: PUSH
39012: LD_INT 1
39014: ARRAY
39015: PUSH
39016: LD_VAR 0 2
39020: EQUAL
39021: IFFALSE 39032
// KillUnit ( vehicle ) ;
39023: LD_VAR 0 2
39027: PPUSH
39028: CALL_OW 66
39032: GO 38992
39034: POP
39035: POP
// end ;
39036: LD_VAR 0 3
39040: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39041: LD_EXP 105
39045: NOT
39046: IFFALSE 39081
39048: GO 39050
39050: DISABLE
// begin initMiner := true ;
39051: LD_ADDR_EXP 105
39055: PUSH
39056: LD_INT 1
39058: ST_TO_ADDR
// minersList := [ ] ;
39059: LD_ADDR_EXP 106
39063: PUSH
39064: EMPTY
39065: ST_TO_ADDR
// minerMinesList := [ ] ;
39066: LD_ADDR_EXP 107
39070: PUSH
39071: EMPTY
39072: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39073: LD_ADDR_EXP 108
39077: PUSH
39078: LD_INT 5
39080: ST_TO_ADDR
// end ;
39081: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39082: LD_EXP 105
39086: PUSH
39087: LD_INT 34
39089: PUSH
39090: LD_INT 81
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PPUSH
39097: CALL_OW 69
39101: AND
39102: IFFALSE 39563
39104: GO 39106
39106: DISABLE
39107: LD_INT 0
39109: PPUSH
39110: PPUSH
39111: PPUSH
39112: PPUSH
// begin enable ;
39113: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39114: LD_ADDR_VAR 0 1
39118: PUSH
39119: LD_INT 34
39121: PUSH
39122: LD_INT 81
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PPUSH
39129: CALL_OW 69
39133: PUSH
39134: FOR_IN
39135: IFFALSE 39207
// begin if not i in minersList then
39137: LD_VAR 0 1
39141: PUSH
39142: LD_EXP 106
39146: IN
39147: NOT
39148: IFFALSE 39205
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39150: LD_ADDR_EXP 106
39154: PUSH
39155: LD_EXP 106
39159: PPUSH
39160: LD_EXP 106
39164: PUSH
39165: LD_INT 1
39167: PLUS
39168: PPUSH
39169: LD_VAR 0 1
39173: PPUSH
39174: CALL_OW 1
39178: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39179: LD_ADDR_EXP 107
39183: PUSH
39184: LD_EXP 107
39188: PPUSH
39189: LD_EXP 107
39193: PUSH
39194: LD_INT 1
39196: PLUS
39197: PPUSH
39198: EMPTY
39199: PPUSH
39200: CALL_OW 1
39204: ST_TO_ADDR
// end end ;
39205: GO 39134
39207: POP
39208: POP
// for i := minerMinesList downto 1 do
39209: LD_ADDR_VAR 0 1
39213: PUSH
39214: DOUBLE
39215: LD_EXP 107
39219: INC
39220: ST_TO_ADDR
39221: LD_INT 1
39223: PUSH
39224: FOR_DOWNTO
39225: IFFALSE 39561
// begin if IsLive ( minersList [ i ] ) then
39227: LD_EXP 106
39231: PUSH
39232: LD_VAR 0 1
39236: ARRAY
39237: PPUSH
39238: CALL_OW 300
39242: IFFALSE 39270
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39244: LD_EXP 106
39248: PUSH
39249: LD_VAR 0 1
39253: ARRAY
39254: PPUSH
39255: LD_EXP 107
39259: PUSH
39260: LD_VAR 0 1
39264: ARRAY
39265: PPUSH
39266: CALL_OW 505
// if not minerMinesList [ i ] then
39270: LD_EXP 107
39274: PUSH
39275: LD_VAR 0 1
39279: ARRAY
39280: NOT
39281: IFFALSE 39285
// continue ;
39283: GO 39224
// for j := minerMinesList [ i ] downto 1 do
39285: LD_ADDR_VAR 0 2
39289: PUSH
39290: DOUBLE
39291: LD_EXP 107
39295: PUSH
39296: LD_VAR 0 1
39300: ARRAY
39301: INC
39302: ST_TO_ADDR
39303: LD_INT 1
39305: PUSH
39306: FOR_DOWNTO
39307: IFFALSE 39557
// begin side := GetSide ( minersList [ i ] ) ;
39309: LD_ADDR_VAR 0 3
39313: PUSH
39314: LD_EXP 106
39318: PUSH
39319: LD_VAR 0 1
39323: ARRAY
39324: PPUSH
39325: CALL_OW 255
39329: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39330: LD_ADDR_VAR 0 4
39334: PUSH
39335: LD_EXP 107
39339: PUSH
39340: LD_VAR 0 1
39344: ARRAY
39345: PUSH
39346: LD_VAR 0 2
39350: ARRAY
39351: PUSH
39352: LD_INT 1
39354: ARRAY
39355: PPUSH
39356: LD_EXP 107
39360: PUSH
39361: LD_VAR 0 1
39365: ARRAY
39366: PUSH
39367: LD_VAR 0 2
39371: ARRAY
39372: PUSH
39373: LD_INT 2
39375: ARRAY
39376: PPUSH
39377: CALL_OW 428
39381: ST_TO_ADDR
// if not tmp then
39382: LD_VAR 0 4
39386: NOT
39387: IFFALSE 39391
// continue ;
39389: GO 39306
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39391: LD_VAR 0 4
39395: PUSH
39396: LD_INT 81
39398: PUSH
39399: LD_VAR 0 3
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PPUSH
39408: CALL_OW 69
39412: IN
39413: PUSH
39414: LD_EXP 107
39418: PUSH
39419: LD_VAR 0 1
39423: ARRAY
39424: PUSH
39425: LD_VAR 0 2
39429: ARRAY
39430: PUSH
39431: LD_INT 1
39433: ARRAY
39434: PPUSH
39435: LD_EXP 107
39439: PUSH
39440: LD_VAR 0 1
39444: ARRAY
39445: PUSH
39446: LD_VAR 0 2
39450: ARRAY
39451: PUSH
39452: LD_INT 2
39454: ARRAY
39455: PPUSH
39456: CALL_OW 458
39460: AND
39461: IFFALSE 39555
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39463: LD_EXP 107
39467: PUSH
39468: LD_VAR 0 1
39472: ARRAY
39473: PUSH
39474: LD_VAR 0 2
39478: ARRAY
39479: PUSH
39480: LD_INT 1
39482: ARRAY
39483: PPUSH
39484: LD_EXP 107
39488: PUSH
39489: LD_VAR 0 1
39493: ARRAY
39494: PUSH
39495: LD_VAR 0 2
39499: ARRAY
39500: PUSH
39501: LD_INT 2
39503: ARRAY
39504: PPUSH
39505: LD_VAR 0 3
39509: PPUSH
39510: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39514: LD_ADDR_EXP 107
39518: PUSH
39519: LD_EXP 107
39523: PPUSH
39524: LD_VAR 0 1
39528: PPUSH
39529: LD_EXP 107
39533: PUSH
39534: LD_VAR 0 1
39538: ARRAY
39539: PPUSH
39540: LD_VAR 0 2
39544: PPUSH
39545: CALL_OW 3
39549: PPUSH
39550: CALL_OW 1
39554: ST_TO_ADDR
// end ; end ;
39555: GO 39306
39557: POP
39558: POP
// end ;
39559: GO 39224
39561: POP
39562: POP
// end ;
39563: PPOPN 4
39565: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39566: LD_INT 0
39568: PPUSH
39569: PPUSH
// result := false ;
39570: LD_ADDR_VAR 0 4
39574: PUSH
39575: LD_INT 0
39577: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39578: LD_VAR 0 1
39582: PPUSH
39583: CALL_OW 264
39587: PUSH
39588: LD_INT 81
39590: EQUAL
39591: NOT
39592: IFFALSE 39596
// exit ;
39594: GO 39836
// index := GetElementIndex ( minersList , unit ) ;
39596: LD_ADDR_VAR 0 5
39600: PUSH
39601: LD_EXP 106
39605: PPUSH
39606: LD_VAR 0 1
39610: PPUSH
39611: CALL 45794 0 2
39615: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39616: LD_EXP 107
39620: PUSH
39621: LD_VAR 0 5
39625: ARRAY
39626: PUSH
39627: LD_EXP 108
39631: GREATEREQUAL
39632: IFFALSE 39636
// exit ;
39634: GO 39836
// ComMoveXY ( unit , x , y ) ;
39636: LD_VAR 0 1
39640: PPUSH
39641: LD_VAR 0 2
39645: PPUSH
39646: LD_VAR 0 3
39650: PPUSH
39651: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39655: LD_INT 35
39657: PPUSH
39658: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39662: LD_VAR 0 1
39666: PPUSH
39667: LD_VAR 0 2
39671: PPUSH
39672: LD_VAR 0 3
39676: PPUSH
39677: CALL 77535 0 3
39681: NOT
39682: PUSH
39683: LD_VAR 0 1
39687: PPUSH
39688: CALL_OW 314
39692: AND
39693: IFFALSE 39697
// exit ;
39695: GO 39836
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39697: LD_VAR 0 2
39701: PPUSH
39702: LD_VAR 0 3
39706: PPUSH
39707: CALL_OW 428
39711: PUSH
39712: LD_VAR 0 1
39716: EQUAL
39717: PUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 314
39727: NOT
39728: AND
39729: IFFALSE 39655
// PlaySoundXY ( x , y , PlantMine ) ;
39731: LD_VAR 0 2
39735: PPUSH
39736: LD_VAR 0 3
39740: PPUSH
39741: LD_STRING PlantMine
39743: PPUSH
39744: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39748: LD_VAR 0 2
39752: PPUSH
39753: LD_VAR 0 3
39757: PPUSH
39758: LD_VAR 0 1
39762: PPUSH
39763: CALL_OW 255
39767: PPUSH
39768: LD_INT 0
39770: PPUSH
39771: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39775: LD_ADDR_EXP 107
39779: PUSH
39780: LD_EXP 107
39784: PPUSH
39785: LD_VAR 0 5
39789: PUSH
39790: LD_EXP 107
39794: PUSH
39795: LD_VAR 0 5
39799: ARRAY
39800: PUSH
39801: LD_INT 1
39803: PLUS
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PPUSH
39809: LD_VAR 0 2
39813: PUSH
39814: LD_VAR 0 3
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PPUSH
39823: CALL 46009 0 3
39827: ST_TO_ADDR
// result := true ;
39828: LD_ADDR_VAR 0 4
39832: PUSH
39833: LD_INT 1
39835: ST_TO_ADDR
// end ;
39836: LD_VAR 0 4
39840: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39841: LD_INT 0
39843: PPUSH
39844: PPUSH
39845: PPUSH
// if not unit in minersList then
39846: LD_VAR 0 1
39850: PUSH
39851: LD_EXP 106
39855: IN
39856: NOT
39857: IFFALSE 39861
// exit ;
39859: GO 40253
// index := GetElementIndex ( minersList , unit ) ;
39861: LD_ADDR_VAR 0 6
39865: PUSH
39866: LD_EXP 106
39870: PPUSH
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL 45794 0 2
39880: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39881: LD_ADDR_VAR 0 5
39885: PUSH
39886: DOUBLE
39887: LD_EXP 107
39891: PUSH
39892: LD_VAR 0 6
39896: ARRAY
39897: INC
39898: ST_TO_ADDR
39899: LD_INT 1
39901: PUSH
39902: FOR_DOWNTO
39903: IFFALSE 40064
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39905: LD_EXP 107
39909: PUSH
39910: LD_VAR 0 6
39914: ARRAY
39915: PUSH
39916: LD_VAR 0 5
39920: ARRAY
39921: PUSH
39922: LD_INT 1
39924: ARRAY
39925: PUSH
39926: LD_VAR 0 2
39930: EQUAL
39931: PUSH
39932: LD_EXP 107
39936: PUSH
39937: LD_VAR 0 6
39941: ARRAY
39942: PUSH
39943: LD_VAR 0 5
39947: ARRAY
39948: PUSH
39949: LD_INT 2
39951: ARRAY
39952: PUSH
39953: LD_VAR 0 3
39957: EQUAL
39958: AND
39959: IFFALSE 40062
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39961: LD_EXP 107
39965: PUSH
39966: LD_VAR 0 6
39970: ARRAY
39971: PUSH
39972: LD_VAR 0 5
39976: ARRAY
39977: PUSH
39978: LD_INT 1
39980: ARRAY
39981: PPUSH
39982: LD_EXP 107
39986: PUSH
39987: LD_VAR 0 6
39991: ARRAY
39992: PUSH
39993: LD_VAR 0 5
39997: ARRAY
39998: PUSH
39999: LD_INT 2
40001: ARRAY
40002: PPUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: CALL_OW 255
40012: PPUSH
40013: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40017: LD_ADDR_EXP 107
40021: PUSH
40022: LD_EXP 107
40026: PPUSH
40027: LD_VAR 0 6
40031: PPUSH
40032: LD_EXP 107
40036: PUSH
40037: LD_VAR 0 6
40041: ARRAY
40042: PPUSH
40043: LD_VAR 0 5
40047: PPUSH
40048: CALL_OW 3
40052: PPUSH
40053: CALL_OW 1
40057: ST_TO_ADDR
// exit ;
40058: POP
40059: POP
40060: GO 40253
// end ; end ;
40062: GO 39902
40064: POP
40065: POP
// for i := minerMinesList [ index ] downto 1 do
40066: LD_ADDR_VAR 0 5
40070: PUSH
40071: DOUBLE
40072: LD_EXP 107
40076: PUSH
40077: LD_VAR 0 6
40081: ARRAY
40082: INC
40083: ST_TO_ADDR
40084: LD_INT 1
40086: PUSH
40087: FOR_DOWNTO
40088: IFFALSE 40251
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40090: LD_EXP 107
40094: PUSH
40095: LD_VAR 0 6
40099: ARRAY
40100: PUSH
40101: LD_VAR 0 5
40105: ARRAY
40106: PUSH
40107: LD_INT 1
40109: ARRAY
40110: PPUSH
40111: LD_EXP 107
40115: PUSH
40116: LD_VAR 0 6
40120: ARRAY
40121: PUSH
40122: LD_VAR 0 5
40126: ARRAY
40127: PUSH
40128: LD_INT 2
40130: ARRAY
40131: PPUSH
40132: LD_VAR 0 2
40136: PPUSH
40137: LD_VAR 0 3
40141: PPUSH
40142: CALL_OW 298
40146: PUSH
40147: LD_INT 6
40149: LESS
40150: IFFALSE 40249
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40152: LD_EXP 107
40156: PUSH
40157: LD_VAR 0 6
40161: ARRAY
40162: PUSH
40163: LD_VAR 0 5
40167: ARRAY
40168: PUSH
40169: LD_INT 1
40171: ARRAY
40172: PPUSH
40173: LD_EXP 107
40177: PUSH
40178: LD_VAR 0 6
40182: ARRAY
40183: PUSH
40184: LD_VAR 0 5
40188: ARRAY
40189: PUSH
40190: LD_INT 2
40192: ARRAY
40193: PPUSH
40194: LD_VAR 0 1
40198: PPUSH
40199: CALL_OW 255
40203: PPUSH
40204: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40208: LD_ADDR_EXP 107
40212: PUSH
40213: LD_EXP 107
40217: PPUSH
40218: LD_VAR 0 6
40222: PPUSH
40223: LD_EXP 107
40227: PUSH
40228: LD_VAR 0 6
40232: ARRAY
40233: PPUSH
40234: LD_VAR 0 5
40238: PPUSH
40239: CALL_OW 3
40243: PPUSH
40244: CALL_OW 1
40248: ST_TO_ADDR
// end ; end ;
40249: GO 40087
40251: POP
40252: POP
// end ;
40253: LD_VAR 0 4
40257: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40258: LD_INT 0
40260: PPUSH
40261: PPUSH
40262: PPUSH
40263: PPUSH
40264: PPUSH
40265: PPUSH
40266: PPUSH
40267: PPUSH
40268: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40269: LD_VAR 0 1
40273: PPUSH
40274: CALL_OW 264
40278: PUSH
40279: LD_INT 81
40281: EQUAL
40282: NOT
40283: PUSH
40284: LD_VAR 0 1
40288: PUSH
40289: LD_EXP 106
40293: IN
40294: NOT
40295: OR
40296: IFFALSE 40300
// exit ;
40298: GO 40622
// index := GetElementIndex ( minersList , unit ) ;
40300: LD_ADDR_VAR 0 6
40304: PUSH
40305: LD_EXP 106
40309: PPUSH
40310: LD_VAR 0 1
40314: PPUSH
40315: CALL 45794 0 2
40319: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40320: LD_ADDR_VAR 0 8
40324: PUSH
40325: LD_EXP 108
40329: PUSH
40330: LD_EXP 107
40334: PUSH
40335: LD_VAR 0 6
40339: ARRAY
40340: MINUS
40341: ST_TO_ADDR
// if not minesFreeAmount then
40342: LD_VAR 0 8
40346: NOT
40347: IFFALSE 40351
// exit ;
40349: GO 40622
// tmp := [ ] ;
40351: LD_ADDR_VAR 0 7
40355: PUSH
40356: EMPTY
40357: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40358: LD_ADDR_VAR 0 5
40362: PUSH
40363: DOUBLE
40364: LD_INT 1
40366: DEC
40367: ST_TO_ADDR
40368: LD_VAR 0 8
40372: PUSH
40373: FOR_TO
40374: IFFALSE 40569
// begin _d := rand ( 0 , 5 ) ;
40376: LD_ADDR_VAR 0 11
40380: PUSH
40381: LD_INT 0
40383: PPUSH
40384: LD_INT 5
40386: PPUSH
40387: CALL_OW 12
40391: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40392: LD_ADDR_VAR 0 12
40396: PUSH
40397: LD_INT 2
40399: PPUSH
40400: LD_INT 6
40402: PPUSH
40403: CALL_OW 12
40407: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40408: LD_ADDR_VAR 0 9
40412: PUSH
40413: LD_VAR 0 2
40417: PPUSH
40418: LD_VAR 0 11
40422: PPUSH
40423: LD_VAR 0 12
40427: PPUSH
40428: CALL_OW 272
40432: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40433: LD_ADDR_VAR 0 10
40437: PUSH
40438: LD_VAR 0 3
40442: PPUSH
40443: LD_VAR 0 11
40447: PPUSH
40448: LD_VAR 0 12
40452: PPUSH
40453: CALL_OW 273
40457: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40458: LD_VAR 0 9
40462: PPUSH
40463: LD_VAR 0 10
40467: PPUSH
40468: CALL_OW 488
40472: PUSH
40473: LD_VAR 0 9
40477: PUSH
40478: LD_VAR 0 10
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_VAR 0 7
40491: IN
40492: NOT
40493: AND
40494: PUSH
40495: LD_VAR 0 9
40499: PPUSH
40500: LD_VAR 0 10
40504: PPUSH
40505: CALL_OW 458
40509: NOT
40510: AND
40511: IFFALSE 40553
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40513: LD_ADDR_VAR 0 7
40517: PUSH
40518: LD_VAR 0 7
40522: PPUSH
40523: LD_VAR 0 7
40527: PUSH
40528: LD_INT 1
40530: PLUS
40531: PPUSH
40532: LD_VAR 0 9
40536: PUSH
40537: LD_VAR 0 10
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PPUSH
40546: CALL_OW 1
40550: ST_TO_ADDR
40551: GO 40567
// i := i - 1 ;
40553: LD_ADDR_VAR 0 5
40557: PUSH
40558: LD_VAR 0 5
40562: PUSH
40563: LD_INT 1
40565: MINUS
40566: ST_TO_ADDR
// end ;
40567: GO 40373
40569: POP
40570: POP
// for i in tmp do
40571: LD_ADDR_VAR 0 5
40575: PUSH
40576: LD_VAR 0 7
40580: PUSH
40581: FOR_IN
40582: IFFALSE 40620
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40584: LD_VAR 0 1
40588: PPUSH
40589: LD_VAR 0 5
40593: PUSH
40594: LD_INT 1
40596: ARRAY
40597: PPUSH
40598: LD_VAR 0 5
40602: PUSH
40603: LD_INT 2
40605: ARRAY
40606: PPUSH
40607: CALL 39566 0 3
40611: NOT
40612: IFFALSE 40618
// exit ;
40614: POP
40615: POP
40616: GO 40622
40618: GO 40581
40620: POP
40621: POP
// end ;
40622: LD_VAR 0 4
40626: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40627: LD_INT 0
40629: PPUSH
40630: PPUSH
40631: PPUSH
40632: PPUSH
40633: PPUSH
40634: PPUSH
40635: PPUSH
// if not GetClass ( unit ) = class_sniper then
40636: LD_VAR 0 1
40640: PPUSH
40641: CALL_OW 257
40645: PUSH
40646: LD_INT 5
40648: EQUAL
40649: NOT
40650: IFFALSE 40654
// exit ;
40652: GO 41042
// dist := 8 ;
40654: LD_ADDR_VAR 0 5
40658: PUSH
40659: LD_INT 8
40661: ST_TO_ADDR
// viewRange := 12 ;
40662: LD_ADDR_VAR 0 7
40666: PUSH
40667: LD_INT 12
40669: ST_TO_ADDR
// side := GetSide ( unit ) ;
40670: LD_ADDR_VAR 0 6
40674: PUSH
40675: LD_VAR 0 1
40679: PPUSH
40680: CALL_OW 255
40684: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40685: LD_INT 61
40687: PPUSH
40688: LD_VAR 0 6
40692: PPUSH
40693: CALL_OW 321
40697: PUSH
40698: LD_INT 2
40700: EQUAL
40701: IFFALSE 40711
// viewRange := 16 ;
40703: LD_ADDR_VAR 0 7
40707: PUSH
40708: LD_INT 16
40710: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40711: LD_VAR 0 1
40715: PPUSH
40716: LD_VAR 0 2
40720: PPUSH
40721: LD_VAR 0 3
40725: PPUSH
40726: CALL_OW 297
40730: PUSH
40731: LD_VAR 0 5
40735: GREATER
40736: IFFALSE 40815
// begin ComMoveXY ( unit , x , y ) ;
40738: LD_VAR 0 1
40742: PPUSH
40743: LD_VAR 0 2
40747: PPUSH
40748: LD_VAR 0 3
40752: PPUSH
40753: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40757: LD_INT 35
40759: PPUSH
40760: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40764: LD_VAR 0 1
40768: PPUSH
40769: LD_VAR 0 2
40773: PPUSH
40774: LD_VAR 0 3
40778: PPUSH
40779: CALL 77535 0 3
40783: NOT
40784: IFFALSE 40788
// exit ;
40786: GO 41042
// until GetDistUnitXY ( unit , x , y ) < dist ;
40788: LD_VAR 0 1
40792: PPUSH
40793: LD_VAR 0 2
40797: PPUSH
40798: LD_VAR 0 3
40802: PPUSH
40803: CALL_OW 297
40807: PUSH
40808: LD_VAR 0 5
40812: LESS
40813: IFFALSE 40757
// end ; ComTurnXY ( unit , x , y ) ;
40815: LD_VAR 0 1
40819: PPUSH
40820: LD_VAR 0 2
40824: PPUSH
40825: LD_VAR 0 3
40829: PPUSH
40830: CALL_OW 118
// wait ( 5 ) ;
40834: LD_INT 5
40836: PPUSH
40837: CALL_OW 67
// _d := GetDir ( unit ) ;
40841: LD_ADDR_VAR 0 10
40845: PUSH
40846: LD_VAR 0 1
40850: PPUSH
40851: CALL_OW 254
40855: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40856: LD_ADDR_VAR 0 8
40860: PUSH
40861: LD_VAR 0 1
40865: PPUSH
40866: CALL_OW 250
40870: PPUSH
40871: LD_VAR 0 10
40875: PPUSH
40876: LD_VAR 0 5
40880: PPUSH
40881: CALL_OW 272
40885: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40886: LD_ADDR_VAR 0 9
40890: PUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: CALL_OW 251
40900: PPUSH
40901: LD_VAR 0 10
40905: PPUSH
40906: LD_VAR 0 5
40910: PPUSH
40911: CALL_OW 273
40915: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40916: LD_VAR 0 8
40920: PPUSH
40921: LD_VAR 0 9
40925: PPUSH
40926: CALL_OW 488
40930: NOT
40931: IFFALSE 40935
// exit ;
40933: GO 41042
// ComAnimCustom ( unit , 1 ) ;
40935: LD_VAR 0 1
40939: PPUSH
40940: LD_INT 1
40942: PPUSH
40943: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40947: LD_VAR 0 8
40951: PPUSH
40952: LD_VAR 0 9
40956: PPUSH
40957: LD_VAR 0 6
40961: PPUSH
40962: LD_VAR 0 7
40966: PPUSH
40967: CALL_OW 330
// repeat wait ( 1 ) ;
40971: LD_INT 1
40973: PPUSH
40974: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40978: LD_VAR 0 1
40982: PPUSH
40983: CALL_OW 316
40987: PUSH
40988: LD_VAR 0 1
40992: PPUSH
40993: CALL_OW 314
40997: OR
40998: PUSH
40999: LD_VAR 0 1
41003: PPUSH
41004: CALL_OW 302
41008: NOT
41009: OR
41010: PUSH
41011: LD_VAR 0 1
41015: PPUSH
41016: CALL_OW 301
41020: OR
41021: IFFALSE 40971
// RemoveSeeing ( _x , _y , side ) ;
41023: LD_VAR 0 8
41027: PPUSH
41028: LD_VAR 0 9
41032: PPUSH
41033: LD_VAR 0 6
41037: PPUSH
41038: CALL_OW 331
// end ; end_of_file
41042: LD_VAR 0 4
41046: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41047: LD_INT 0
41049: PPUSH
41050: PPUSH
// if exist_mode then
41051: LD_VAR 0 2
41055: IFFALSE 41080
// unit := CreateCharacter ( prefix & ident ) else
41057: LD_ADDR_VAR 0 5
41061: PUSH
41062: LD_VAR 0 3
41066: PUSH
41067: LD_VAR 0 1
41071: STR
41072: PPUSH
41073: CALL_OW 34
41077: ST_TO_ADDR
41078: GO 41095
// unit := NewCharacter ( ident ) ;
41080: LD_ADDR_VAR 0 5
41084: PUSH
41085: LD_VAR 0 1
41089: PPUSH
41090: CALL_OW 25
41094: ST_TO_ADDR
// result := unit ;
41095: LD_ADDR_VAR 0 4
41099: PUSH
41100: LD_VAR 0 5
41104: ST_TO_ADDR
// end ;
41105: LD_VAR 0 4
41109: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41110: LD_INT 0
41112: PPUSH
41113: PPUSH
// if not side or not nation then
41114: LD_VAR 0 1
41118: NOT
41119: PUSH
41120: LD_VAR 0 2
41124: NOT
41125: OR
41126: IFFALSE 41130
// exit ;
41128: GO 41898
// case nation of nation_american :
41130: LD_VAR 0 2
41134: PUSH
41135: LD_INT 1
41137: DOUBLE
41138: EQUAL
41139: IFTRUE 41143
41141: GO 41357
41143: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41144: LD_ADDR_VAR 0 4
41148: PUSH
41149: LD_INT 35
41151: PUSH
41152: LD_INT 45
41154: PUSH
41155: LD_INT 46
41157: PUSH
41158: LD_INT 47
41160: PUSH
41161: LD_INT 82
41163: PUSH
41164: LD_INT 83
41166: PUSH
41167: LD_INT 84
41169: PUSH
41170: LD_INT 85
41172: PUSH
41173: LD_INT 86
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 6
41184: PUSH
41185: LD_INT 15
41187: PUSH
41188: LD_INT 16
41190: PUSH
41191: LD_INT 7
41193: PUSH
41194: LD_INT 12
41196: PUSH
41197: LD_INT 13
41199: PUSH
41200: LD_INT 10
41202: PUSH
41203: LD_INT 14
41205: PUSH
41206: LD_INT 20
41208: PUSH
41209: LD_INT 21
41211: PUSH
41212: LD_INT 22
41214: PUSH
41215: LD_INT 25
41217: PUSH
41218: LD_INT 32
41220: PUSH
41221: LD_INT 27
41223: PUSH
41224: LD_INT 36
41226: PUSH
41227: LD_INT 69
41229: PUSH
41230: LD_INT 39
41232: PUSH
41233: LD_INT 34
41235: PUSH
41236: LD_INT 40
41238: PUSH
41239: LD_INT 48
41241: PUSH
41242: LD_INT 49
41244: PUSH
41245: LD_INT 50
41247: PUSH
41248: LD_INT 51
41250: PUSH
41251: LD_INT 52
41253: PUSH
41254: LD_INT 53
41256: PUSH
41257: LD_INT 54
41259: PUSH
41260: LD_INT 55
41262: PUSH
41263: LD_INT 56
41265: PUSH
41266: LD_INT 57
41268: PUSH
41269: LD_INT 58
41271: PUSH
41272: LD_INT 59
41274: PUSH
41275: LD_INT 60
41277: PUSH
41278: LD_INT 61
41280: PUSH
41281: LD_INT 62
41283: PUSH
41284: LD_INT 80
41286: PUSH
41287: LD_INT 82
41289: PUSH
41290: LD_INT 83
41292: PUSH
41293: LD_INT 84
41295: PUSH
41296: LD_INT 85
41298: PUSH
41299: LD_INT 86
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: ST_TO_ADDR
41355: GO 41822
41357: LD_INT 2
41359: DOUBLE
41360: EQUAL
41361: IFTRUE 41365
41363: GO 41591
41365: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41366: LD_ADDR_VAR 0 4
41370: PUSH
41371: LD_INT 35
41373: PUSH
41374: LD_INT 45
41376: PUSH
41377: LD_INT 46
41379: PUSH
41380: LD_INT 47
41382: PUSH
41383: LD_INT 82
41385: PUSH
41386: LD_INT 83
41388: PUSH
41389: LD_INT 84
41391: PUSH
41392: LD_INT 85
41394: PUSH
41395: LD_INT 87
41397: PUSH
41398: LD_INT 70
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 11
41406: PUSH
41407: LD_INT 3
41409: PUSH
41410: LD_INT 4
41412: PUSH
41413: LD_INT 5
41415: PUSH
41416: LD_INT 6
41418: PUSH
41419: LD_INT 15
41421: PUSH
41422: LD_INT 18
41424: PUSH
41425: LD_INT 7
41427: PUSH
41428: LD_INT 17
41430: PUSH
41431: LD_INT 8
41433: PUSH
41434: LD_INT 20
41436: PUSH
41437: LD_INT 21
41439: PUSH
41440: LD_INT 22
41442: PUSH
41443: LD_INT 72
41445: PUSH
41446: LD_INT 26
41448: PUSH
41449: LD_INT 69
41451: PUSH
41452: LD_INT 39
41454: PUSH
41455: LD_INT 40
41457: PUSH
41458: LD_INT 41
41460: PUSH
41461: LD_INT 42
41463: PUSH
41464: LD_INT 43
41466: PUSH
41467: LD_INT 48
41469: PUSH
41470: LD_INT 49
41472: PUSH
41473: LD_INT 50
41475: PUSH
41476: LD_INT 51
41478: PUSH
41479: LD_INT 52
41481: PUSH
41482: LD_INT 53
41484: PUSH
41485: LD_INT 54
41487: PUSH
41488: LD_INT 55
41490: PUSH
41491: LD_INT 56
41493: PUSH
41494: LD_INT 60
41496: PUSH
41497: LD_INT 61
41499: PUSH
41500: LD_INT 62
41502: PUSH
41503: LD_INT 66
41505: PUSH
41506: LD_INT 67
41508: PUSH
41509: LD_INT 68
41511: PUSH
41512: LD_INT 81
41514: PUSH
41515: LD_INT 82
41517: PUSH
41518: LD_INT 83
41520: PUSH
41521: LD_INT 84
41523: PUSH
41524: LD_INT 85
41526: PUSH
41527: LD_INT 87
41529: PUSH
41530: LD_INT 88
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: ST_TO_ADDR
41589: GO 41822
41591: LD_INT 3
41593: DOUBLE
41594: EQUAL
41595: IFTRUE 41599
41597: GO 41821
41599: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41600: LD_ADDR_VAR 0 4
41604: PUSH
41605: LD_INT 46
41607: PUSH
41608: LD_INT 47
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: LD_INT 82
41619: PUSH
41620: LD_INT 83
41622: PUSH
41623: LD_INT 84
41625: PUSH
41626: LD_INT 85
41628: PUSH
41629: LD_INT 86
41631: PUSH
41632: LD_INT 11
41634: PUSH
41635: LD_INT 9
41637: PUSH
41638: LD_INT 20
41640: PUSH
41641: LD_INT 19
41643: PUSH
41644: LD_INT 21
41646: PUSH
41647: LD_INT 24
41649: PUSH
41650: LD_INT 22
41652: PUSH
41653: LD_INT 25
41655: PUSH
41656: LD_INT 28
41658: PUSH
41659: LD_INT 29
41661: PUSH
41662: LD_INT 30
41664: PUSH
41665: LD_INT 31
41667: PUSH
41668: LD_INT 37
41670: PUSH
41671: LD_INT 38
41673: PUSH
41674: LD_INT 32
41676: PUSH
41677: LD_INT 27
41679: PUSH
41680: LD_INT 33
41682: PUSH
41683: LD_INT 69
41685: PUSH
41686: LD_INT 39
41688: PUSH
41689: LD_INT 34
41691: PUSH
41692: LD_INT 40
41694: PUSH
41695: LD_INT 71
41697: PUSH
41698: LD_INT 23
41700: PUSH
41701: LD_INT 44
41703: PUSH
41704: LD_INT 48
41706: PUSH
41707: LD_INT 49
41709: PUSH
41710: LD_INT 50
41712: PUSH
41713: LD_INT 51
41715: PUSH
41716: LD_INT 52
41718: PUSH
41719: LD_INT 53
41721: PUSH
41722: LD_INT 54
41724: PUSH
41725: LD_INT 55
41727: PUSH
41728: LD_INT 56
41730: PUSH
41731: LD_INT 57
41733: PUSH
41734: LD_INT 58
41736: PUSH
41737: LD_INT 59
41739: PUSH
41740: LD_INT 63
41742: PUSH
41743: LD_INT 64
41745: PUSH
41746: LD_INT 65
41748: PUSH
41749: LD_INT 82
41751: PUSH
41752: LD_INT 83
41754: PUSH
41755: LD_INT 84
41757: PUSH
41758: LD_INT 85
41760: PUSH
41761: LD_INT 86
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: ST_TO_ADDR
41819: GO 41822
41821: POP
// if state > - 1 and state < 3 then
41822: LD_VAR 0 3
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: GREATER
41831: PUSH
41832: LD_VAR 0 3
41836: PUSH
41837: LD_INT 3
41839: LESS
41840: AND
41841: IFFALSE 41898
// for i in result do
41843: LD_ADDR_VAR 0 5
41847: PUSH
41848: LD_VAR 0 4
41852: PUSH
41853: FOR_IN
41854: IFFALSE 41896
// if GetTech ( i , side ) <> state then
41856: LD_VAR 0 5
41860: PPUSH
41861: LD_VAR 0 1
41865: PPUSH
41866: CALL_OW 321
41870: PUSH
41871: LD_VAR 0 3
41875: NONEQUAL
41876: IFFALSE 41894
// result := result diff i ;
41878: LD_ADDR_VAR 0 4
41882: PUSH
41883: LD_VAR 0 4
41887: PUSH
41888: LD_VAR 0 5
41892: DIFF
41893: ST_TO_ADDR
41894: GO 41853
41896: POP
41897: POP
// end ;
41898: LD_VAR 0 4
41902: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41903: LD_INT 0
41905: PPUSH
41906: PPUSH
41907: PPUSH
// result := true ;
41908: LD_ADDR_VAR 0 3
41912: PUSH
41913: LD_INT 1
41915: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41916: LD_ADDR_VAR 0 5
41920: PUSH
41921: LD_VAR 0 2
41925: PPUSH
41926: CALL_OW 480
41930: ST_TO_ADDR
// if not tmp then
41931: LD_VAR 0 5
41935: NOT
41936: IFFALSE 41940
// exit ;
41938: GO 41989
// for i in tmp do
41940: LD_ADDR_VAR 0 4
41944: PUSH
41945: LD_VAR 0 5
41949: PUSH
41950: FOR_IN
41951: IFFALSE 41987
// if GetTech ( i , side ) <> state_researched then
41953: LD_VAR 0 4
41957: PPUSH
41958: LD_VAR 0 1
41962: PPUSH
41963: CALL_OW 321
41967: PUSH
41968: LD_INT 2
41970: NONEQUAL
41971: IFFALSE 41985
// begin result := false ;
41973: LD_ADDR_VAR 0 3
41977: PUSH
41978: LD_INT 0
41980: ST_TO_ADDR
// exit ;
41981: POP
41982: POP
41983: GO 41989
// end ;
41985: GO 41950
41987: POP
41988: POP
// end ;
41989: LD_VAR 0 3
41993: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41994: LD_INT 0
41996: PPUSH
41997: PPUSH
41998: PPUSH
41999: PPUSH
42000: PPUSH
42001: PPUSH
42002: PPUSH
42003: PPUSH
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
42008: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42009: LD_VAR 0 1
42013: NOT
42014: PUSH
42015: LD_VAR 0 1
42019: PPUSH
42020: CALL_OW 257
42024: PUSH
42025: LD_INT 9
42027: NONEQUAL
42028: OR
42029: IFFALSE 42033
// exit ;
42031: GO 42606
// side := GetSide ( unit ) ;
42033: LD_ADDR_VAR 0 9
42037: PUSH
42038: LD_VAR 0 1
42042: PPUSH
42043: CALL_OW 255
42047: ST_TO_ADDR
// tech_space := tech_spacanom ;
42048: LD_ADDR_VAR 0 12
42052: PUSH
42053: LD_INT 29
42055: ST_TO_ADDR
// tech_time := tech_taurad ;
42056: LD_ADDR_VAR 0 13
42060: PUSH
42061: LD_INT 28
42063: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42064: LD_ADDR_VAR 0 11
42068: PUSH
42069: LD_VAR 0 1
42073: PPUSH
42074: CALL_OW 310
42078: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42079: LD_VAR 0 11
42083: PPUSH
42084: CALL_OW 247
42088: PUSH
42089: LD_INT 2
42091: EQUAL
42092: IFFALSE 42096
// exit ;
42094: GO 42606
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42096: LD_ADDR_VAR 0 8
42100: PUSH
42101: LD_INT 81
42103: PUSH
42104: LD_VAR 0 9
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: LD_INT 21
42118: PUSH
42119: LD_INT 3
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PPUSH
42134: CALL_OW 69
42138: ST_TO_ADDR
// if not tmp then
42139: LD_VAR 0 8
42143: NOT
42144: IFFALSE 42148
// exit ;
42146: GO 42606
// if in_unit then
42148: LD_VAR 0 11
42152: IFFALSE 42176
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42154: LD_ADDR_VAR 0 10
42158: PUSH
42159: LD_VAR 0 8
42163: PPUSH
42164: LD_VAR 0 11
42168: PPUSH
42169: CALL_OW 74
42173: ST_TO_ADDR
42174: GO 42196
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42176: LD_ADDR_VAR 0 10
42180: PUSH
42181: LD_VAR 0 8
42185: PPUSH
42186: LD_VAR 0 1
42190: PPUSH
42191: CALL_OW 74
42195: ST_TO_ADDR
// if not enemy then
42196: LD_VAR 0 10
42200: NOT
42201: IFFALSE 42205
// exit ;
42203: GO 42606
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42205: LD_VAR 0 11
42209: PUSH
42210: LD_VAR 0 11
42214: PPUSH
42215: LD_VAR 0 10
42219: PPUSH
42220: CALL_OW 296
42224: PUSH
42225: LD_INT 13
42227: GREATER
42228: AND
42229: PUSH
42230: LD_VAR 0 1
42234: PPUSH
42235: LD_VAR 0 10
42239: PPUSH
42240: CALL_OW 296
42244: PUSH
42245: LD_INT 12
42247: GREATER
42248: OR
42249: IFFALSE 42253
// exit ;
42251: GO 42606
// missile := [ 1 ] ;
42253: LD_ADDR_VAR 0 14
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: EMPTY
42262: LIST
42263: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42264: LD_VAR 0 9
42268: PPUSH
42269: LD_VAR 0 12
42273: PPUSH
42274: CALL_OW 325
42278: IFFALSE 42307
// missile := Replace ( missile , missile + 1 , 2 ) ;
42280: LD_ADDR_VAR 0 14
42284: PUSH
42285: LD_VAR 0 14
42289: PPUSH
42290: LD_VAR 0 14
42294: PUSH
42295: LD_INT 1
42297: PLUS
42298: PPUSH
42299: LD_INT 2
42301: PPUSH
42302: CALL_OW 1
42306: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42307: LD_VAR 0 9
42311: PPUSH
42312: LD_VAR 0 13
42316: PPUSH
42317: CALL_OW 325
42321: PUSH
42322: LD_VAR 0 10
42326: PPUSH
42327: CALL_OW 255
42331: PPUSH
42332: LD_VAR 0 13
42336: PPUSH
42337: CALL_OW 325
42341: NOT
42342: AND
42343: IFFALSE 42372
// missile := Replace ( missile , missile + 1 , 3 ) ;
42345: LD_ADDR_VAR 0 14
42349: PUSH
42350: LD_VAR 0 14
42354: PPUSH
42355: LD_VAR 0 14
42359: PUSH
42360: LD_INT 1
42362: PLUS
42363: PPUSH
42364: LD_INT 3
42366: PPUSH
42367: CALL_OW 1
42371: ST_TO_ADDR
// if missile < 2 then
42372: LD_VAR 0 14
42376: PUSH
42377: LD_INT 2
42379: LESS
42380: IFFALSE 42384
// exit ;
42382: GO 42606
// x := GetX ( enemy ) ;
42384: LD_ADDR_VAR 0 4
42388: PUSH
42389: LD_VAR 0 10
42393: PPUSH
42394: CALL_OW 250
42398: ST_TO_ADDR
// y := GetY ( enemy ) ;
42399: LD_ADDR_VAR 0 5
42403: PUSH
42404: LD_VAR 0 10
42408: PPUSH
42409: CALL_OW 251
42413: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42414: LD_ADDR_VAR 0 6
42418: PUSH
42419: LD_VAR 0 4
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PPUSH
42428: LD_INT 1
42430: PPUSH
42431: CALL_OW 12
42435: PLUS
42436: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42437: LD_ADDR_VAR 0 7
42441: PUSH
42442: LD_VAR 0 5
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PPUSH
42451: LD_INT 1
42453: PPUSH
42454: CALL_OW 12
42458: PLUS
42459: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42460: LD_VAR 0 6
42464: PPUSH
42465: LD_VAR 0 7
42469: PPUSH
42470: CALL_OW 488
42474: NOT
42475: IFFALSE 42497
// begin _x := x ;
42477: LD_ADDR_VAR 0 6
42481: PUSH
42482: LD_VAR 0 4
42486: ST_TO_ADDR
// _y := y ;
42487: LD_ADDR_VAR 0 7
42491: PUSH
42492: LD_VAR 0 5
42496: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42497: LD_ADDR_VAR 0 3
42501: PUSH
42502: LD_INT 1
42504: PPUSH
42505: LD_VAR 0 14
42509: PPUSH
42510: CALL_OW 12
42514: ST_TO_ADDR
// case i of 1 :
42515: LD_VAR 0 3
42519: PUSH
42520: LD_INT 1
42522: DOUBLE
42523: EQUAL
42524: IFTRUE 42528
42526: GO 42545
42528: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42529: LD_VAR 0 1
42533: PPUSH
42534: LD_VAR 0 10
42538: PPUSH
42539: CALL_OW 115
42543: GO 42606
42545: LD_INT 2
42547: DOUBLE
42548: EQUAL
42549: IFTRUE 42553
42551: GO 42575
42553: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42554: LD_VAR 0 1
42558: PPUSH
42559: LD_VAR 0 6
42563: PPUSH
42564: LD_VAR 0 7
42568: PPUSH
42569: CALL_OW 153
42573: GO 42606
42575: LD_INT 3
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42583
42581: GO 42605
42583: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42584: LD_VAR 0 1
42588: PPUSH
42589: LD_VAR 0 6
42593: PPUSH
42594: LD_VAR 0 7
42598: PPUSH
42599: CALL_OW 154
42603: GO 42606
42605: POP
// end ;
42606: LD_VAR 0 2
42610: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42611: LD_INT 0
42613: PPUSH
42614: PPUSH
42615: PPUSH
42616: PPUSH
42617: PPUSH
42618: PPUSH
// if not unit or not building then
42619: LD_VAR 0 1
42623: NOT
42624: PUSH
42625: LD_VAR 0 2
42629: NOT
42630: OR
42631: IFFALSE 42635
// exit ;
42633: GO 42793
// x := GetX ( building ) ;
42635: LD_ADDR_VAR 0 5
42639: PUSH
42640: LD_VAR 0 2
42644: PPUSH
42645: CALL_OW 250
42649: ST_TO_ADDR
// y := GetY ( building ) ;
42650: LD_ADDR_VAR 0 6
42654: PUSH
42655: LD_VAR 0 2
42659: PPUSH
42660: CALL_OW 251
42664: ST_TO_ADDR
// for i = 0 to 5 do
42665: LD_ADDR_VAR 0 4
42669: PUSH
42670: DOUBLE
42671: LD_INT 0
42673: DEC
42674: ST_TO_ADDR
42675: LD_INT 5
42677: PUSH
42678: FOR_TO
42679: IFFALSE 42791
// begin _x := ShiftX ( x , i , 3 ) ;
42681: LD_ADDR_VAR 0 7
42685: PUSH
42686: LD_VAR 0 5
42690: PPUSH
42691: LD_VAR 0 4
42695: PPUSH
42696: LD_INT 3
42698: PPUSH
42699: CALL_OW 272
42703: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42704: LD_ADDR_VAR 0 8
42708: PUSH
42709: LD_VAR 0 6
42713: PPUSH
42714: LD_VAR 0 4
42718: PPUSH
42719: LD_INT 3
42721: PPUSH
42722: CALL_OW 273
42726: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42727: LD_VAR 0 7
42731: PPUSH
42732: LD_VAR 0 8
42736: PPUSH
42737: CALL_OW 488
42741: NOT
42742: IFFALSE 42746
// continue ;
42744: GO 42678
// if HexInfo ( _x , _y ) = 0 then
42746: LD_VAR 0 7
42750: PPUSH
42751: LD_VAR 0 8
42755: PPUSH
42756: CALL_OW 428
42760: PUSH
42761: LD_INT 0
42763: EQUAL
42764: IFFALSE 42789
// begin ComMoveXY ( unit , _x , _y ) ;
42766: LD_VAR 0 1
42770: PPUSH
42771: LD_VAR 0 7
42775: PPUSH
42776: LD_VAR 0 8
42780: PPUSH
42781: CALL_OW 111
// exit ;
42785: POP
42786: POP
42787: GO 42793
// end ; end ;
42789: GO 42678
42791: POP
42792: POP
// end ;
42793: LD_VAR 0 3
42797: RET
// export function ScanBase ( side , base_area ) ; begin
42798: LD_INT 0
42800: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42801: LD_ADDR_VAR 0 3
42805: PUSH
42806: LD_VAR 0 2
42810: PPUSH
42811: LD_INT 81
42813: PUSH
42814: LD_VAR 0 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PPUSH
42823: CALL_OW 70
42827: ST_TO_ADDR
// end ;
42828: LD_VAR 0 3
42832: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42833: LD_INT 0
42835: PPUSH
42836: PPUSH
42837: PPUSH
42838: PPUSH
// result := false ;
42839: LD_ADDR_VAR 0 2
42843: PUSH
42844: LD_INT 0
42846: ST_TO_ADDR
// side := GetSide ( unit ) ;
42847: LD_ADDR_VAR 0 3
42851: PUSH
42852: LD_VAR 0 1
42856: PPUSH
42857: CALL_OW 255
42861: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42862: LD_ADDR_VAR 0 4
42866: PUSH
42867: LD_VAR 0 1
42871: PPUSH
42872: CALL_OW 248
42876: ST_TO_ADDR
// case nat of 1 :
42877: LD_VAR 0 4
42881: PUSH
42882: LD_INT 1
42884: DOUBLE
42885: EQUAL
42886: IFTRUE 42890
42888: GO 42901
42890: POP
// tech := tech_lassight ; 2 :
42891: LD_ADDR_VAR 0 5
42895: PUSH
42896: LD_INT 12
42898: ST_TO_ADDR
42899: GO 42940
42901: LD_INT 2
42903: DOUBLE
42904: EQUAL
42905: IFTRUE 42909
42907: GO 42920
42909: POP
// tech := tech_mortar ; 3 :
42910: LD_ADDR_VAR 0 5
42914: PUSH
42915: LD_INT 41
42917: ST_TO_ADDR
42918: GO 42940
42920: LD_INT 3
42922: DOUBLE
42923: EQUAL
42924: IFTRUE 42928
42926: GO 42939
42928: POP
// tech := tech_bazooka ; end ;
42929: LD_ADDR_VAR 0 5
42933: PUSH
42934: LD_INT 44
42936: ST_TO_ADDR
42937: GO 42940
42939: POP
// if Researched ( side , tech ) then
42940: LD_VAR 0 3
42944: PPUSH
42945: LD_VAR 0 5
42949: PPUSH
42950: CALL_OW 325
42954: IFFALSE 42981
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42956: LD_ADDR_VAR 0 2
42960: PUSH
42961: LD_INT 5
42963: PUSH
42964: LD_INT 8
42966: PUSH
42967: LD_INT 9
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: LIST
42974: PUSH
42975: LD_VAR 0 4
42979: ARRAY
42980: ST_TO_ADDR
// end ;
42981: LD_VAR 0 2
42985: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42986: LD_INT 0
42988: PPUSH
42989: PPUSH
42990: PPUSH
// if not mines then
42991: LD_VAR 0 2
42995: NOT
42996: IFFALSE 43000
// exit ;
42998: GO 43144
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43000: LD_ADDR_VAR 0 5
43004: PUSH
43005: LD_INT 81
43007: PUSH
43008: LD_VAR 0 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 3
43019: PUSH
43020: LD_INT 21
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PPUSH
43038: CALL_OW 69
43042: ST_TO_ADDR
// for i in mines do
43043: LD_ADDR_VAR 0 4
43047: PUSH
43048: LD_VAR 0 2
43052: PUSH
43053: FOR_IN
43054: IFFALSE 43142
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43056: LD_VAR 0 4
43060: PUSH
43061: LD_INT 1
43063: ARRAY
43064: PPUSH
43065: LD_VAR 0 4
43069: PUSH
43070: LD_INT 2
43072: ARRAY
43073: PPUSH
43074: CALL_OW 458
43078: NOT
43079: IFFALSE 43083
// continue ;
43081: GO 43053
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43083: LD_VAR 0 4
43087: PUSH
43088: LD_INT 1
43090: ARRAY
43091: PPUSH
43092: LD_VAR 0 4
43096: PUSH
43097: LD_INT 2
43099: ARRAY
43100: PPUSH
43101: CALL_OW 428
43105: PUSH
43106: LD_VAR 0 5
43110: IN
43111: IFFALSE 43140
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43113: LD_VAR 0 4
43117: PUSH
43118: LD_INT 1
43120: ARRAY
43121: PPUSH
43122: LD_VAR 0 4
43126: PUSH
43127: LD_INT 2
43129: ARRAY
43130: PPUSH
43131: LD_VAR 0 1
43135: PPUSH
43136: CALL_OW 456
// end ;
43140: GO 43053
43142: POP
43143: POP
// end ;
43144: LD_VAR 0 3
43148: RET
// export function Count ( array ) ; begin
43149: LD_INT 0
43151: PPUSH
// result := array + 0 ;
43152: LD_ADDR_VAR 0 2
43156: PUSH
43157: LD_VAR 0 1
43161: PUSH
43162: LD_INT 0
43164: PLUS
43165: ST_TO_ADDR
// end ;
43166: LD_VAR 0 2
43170: RET
// export function IsEmpty ( building ) ; begin
43171: LD_INT 0
43173: PPUSH
// if not building then
43174: LD_VAR 0 1
43178: NOT
43179: IFFALSE 43183
// exit ;
43181: GO 43226
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43183: LD_ADDR_VAR 0 2
43187: PUSH
43188: LD_VAR 0 1
43192: PUSH
43193: LD_INT 22
43195: PUSH
43196: LD_VAR 0 1
43200: PPUSH
43201: CALL_OW 255
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 58
43212: PUSH
43213: EMPTY
43214: LIST
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PPUSH
43220: CALL_OW 69
43224: IN
43225: ST_TO_ADDR
// end ;
43226: LD_VAR 0 2
43230: RET
// export function IsNotFull ( building ) ; var places ; begin
43231: LD_INT 0
43233: PPUSH
43234: PPUSH
// if not building then
43235: LD_VAR 0 1
43239: NOT
43240: IFFALSE 43244
// exit ;
43242: GO 43272
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43244: LD_ADDR_VAR 0 2
43248: PUSH
43249: LD_VAR 0 1
43253: PPUSH
43254: LD_INT 3
43256: PUSH
43257: LD_INT 62
43259: PUSH
43260: EMPTY
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PPUSH
43267: CALL_OW 72
43271: ST_TO_ADDR
// end ;
43272: LD_VAR 0 2
43276: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43277: LD_INT 0
43279: PPUSH
43280: PPUSH
43281: PPUSH
43282: PPUSH
// tmp := [ ] ;
43283: LD_ADDR_VAR 0 3
43287: PUSH
43288: EMPTY
43289: ST_TO_ADDR
// list := [ ] ;
43290: LD_ADDR_VAR 0 5
43294: PUSH
43295: EMPTY
43296: ST_TO_ADDR
// for i = 16 to 25 do
43297: LD_ADDR_VAR 0 4
43301: PUSH
43302: DOUBLE
43303: LD_INT 16
43305: DEC
43306: ST_TO_ADDR
43307: LD_INT 25
43309: PUSH
43310: FOR_TO
43311: IFFALSE 43384
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43313: LD_ADDR_VAR 0 3
43317: PUSH
43318: LD_VAR 0 3
43322: PUSH
43323: LD_INT 22
43325: PUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 255
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 91
43342: PUSH
43343: LD_VAR 0 1
43347: PUSH
43348: LD_INT 6
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 30
43358: PUSH
43359: LD_VAR 0 4
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: PUSH
43373: EMPTY
43374: LIST
43375: PPUSH
43376: CALL_OW 69
43380: ADD
43381: ST_TO_ADDR
43382: GO 43310
43384: POP
43385: POP
// for i = 1 to tmp do
43386: LD_ADDR_VAR 0 4
43390: PUSH
43391: DOUBLE
43392: LD_INT 1
43394: DEC
43395: ST_TO_ADDR
43396: LD_VAR 0 3
43400: PUSH
43401: FOR_TO
43402: IFFALSE 43490
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43404: LD_ADDR_VAR 0 5
43408: PUSH
43409: LD_VAR 0 5
43413: PUSH
43414: LD_VAR 0 3
43418: PUSH
43419: LD_VAR 0 4
43423: ARRAY
43424: PPUSH
43425: CALL_OW 266
43429: PUSH
43430: LD_VAR 0 3
43434: PUSH
43435: LD_VAR 0 4
43439: ARRAY
43440: PPUSH
43441: CALL_OW 250
43445: PUSH
43446: LD_VAR 0 3
43450: PUSH
43451: LD_VAR 0 4
43455: ARRAY
43456: PPUSH
43457: CALL_OW 251
43461: PUSH
43462: LD_VAR 0 3
43466: PUSH
43467: LD_VAR 0 4
43471: ARRAY
43472: PPUSH
43473: CALL_OW 254
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: PUSH
43484: EMPTY
43485: LIST
43486: ADD
43487: ST_TO_ADDR
43488: GO 43401
43490: POP
43491: POP
// result := list ;
43492: LD_ADDR_VAR 0 2
43496: PUSH
43497: LD_VAR 0 5
43501: ST_TO_ADDR
// end ;
43502: LD_VAR 0 2
43506: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43507: LD_INT 0
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
// if not factory then
43516: LD_VAR 0 1
43520: NOT
43521: IFFALSE 43525
// exit ;
43523: GO 44118
// if control = control_apeman then
43525: LD_VAR 0 4
43529: PUSH
43530: LD_INT 5
43532: EQUAL
43533: IFFALSE 43642
// begin tmp := UnitsInside ( factory ) ;
43535: LD_ADDR_VAR 0 8
43539: PUSH
43540: LD_VAR 0 1
43544: PPUSH
43545: CALL_OW 313
43549: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43550: LD_VAR 0 8
43554: PPUSH
43555: LD_INT 25
43557: PUSH
43558: LD_INT 12
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PPUSH
43565: CALL_OW 72
43569: NOT
43570: IFFALSE 43580
// control := control_manual ;
43572: LD_ADDR_VAR 0 4
43576: PUSH
43577: LD_INT 1
43579: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43580: LD_ADDR_VAR 0 8
43584: PUSH
43585: LD_VAR 0 1
43589: PPUSH
43590: CALL 43277 0 1
43594: ST_TO_ADDR
// if tmp then
43595: LD_VAR 0 8
43599: IFFALSE 43642
// begin for i in tmp do
43601: LD_ADDR_VAR 0 7
43605: PUSH
43606: LD_VAR 0 8
43610: PUSH
43611: FOR_IN
43612: IFFALSE 43640
// if i [ 1 ] = b_ext_radio then
43614: LD_VAR 0 7
43618: PUSH
43619: LD_INT 1
43621: ARRAY
43622: PUSH
43623: LD_INT 22
43625: EQUAL
43626: IFFALSE 43638
// begin control := control_remote ;
43628: LD_ADDR_VAR 0 4
43632: PUSH
43633: LD_INT 2
43635: ST_TO_ADDR
// break ;
43636: GO 43640
// end ;
43638: GO 43611
43640: POP
43641: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43642: LD_VAR 0 1
43646: PPUSH
43647: LD_VAR 0 2
43651: PPUSH
43652: LD_VAR 0 3
43656: PPUSH
43657: LD_VAR 0 4
43661: PPUSH
43662: LD_VAR 0 5
43666: PPUSH
43667: CALL_OW 448
43671: IFFALSE 43706
// begin result := [ chassis , engine , control , weapon ] ;
43673: LD_ADDR_VAR 0 6
43677: PUSH
43678: LD_VAR 0 2
43682: PUSH
43683: LD_VAR 0 3
43687: PUSH
43688: LD_VAR 0 4
43692: PUSH
43693: LD_VAR 0 5
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: ST_TO_ADDR
// exit ;
43704: GO 44118
// end ; _chassis := AvailableChassisList ( factory ) ;
43706: LD_ADDR_VAR 0 9
43710: PUSH
43711: LD_VAR 0 1
43715: PPUSH
43716: CALL_OW 475
43720: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43721: LD_ADDR_VAR 0 11
43725: PUSH
43726: LD_VAR 0 1
43730: PPUSH
43731: CALL_OW 476
43735: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43736: LD_ADDR_VAR 0 12
43740: PUSH
43741: LD_VAR 0 1
43745: PPUSH
43746: CALL_OW 477
43750: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43751: LD_ADDR_VAR 0 10
43755: PUSH
43756: LD_VAR 0 1
43760: PPUSH
43761: CALL_OW 478
43765: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43766: LD_VAR 0 9
43770: NOT
43771: PUSH
43772: LD_VAR 0 11
43776: NOT
43777: OR
43778: PUSH
43779: LD_VAR 0 12
43783: NOT
43784: OR
43785: PUSH
43786: LD_VAR 0 10
43790: NOT
43791: OR
43792: IFFALSE 43827
// begin result := [ chassis , engine , control , weapon ] ;
43794: LD_ADDR_VAR 0 6
43798: PUSH
43799: LD_VAR 0 2
43803: PUSH
43804: LD_VAR 0 3
43808: PUSH
43809: LD_VAR 0 4
43813: PUSH
43814: LD_VAR 0 5
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: ST_TO_ADDR
// exit ;
43825: GO 44118
// end ; if not chassis in _chassis then
43827: LD_VAR 0 2
43831: PUSH
43832: LD_VAR 0 9
43836: IN
43837: NOT
43838: IFFALSE 43864
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43840: LD_ADDR_VAR 0 2
43844: PUSH
43845: LD_VAR 0 9
43849: PUSH
43850: LD_INT 1
43852: PPUSH
43853: LD_VAR 0 9
43857: PPUSH
43858: CALL_OW 12
43862: ARRAY
43863: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43864: LD_VAR 0 2
43868: PPUSH
43869: LD_VAR 0 3
43873: PPUSH
43874: CALL 44123 0 2
43878: NOT
43879: IFFALSE 43938
// repeat engine := _engine [ 1 ] ;
43881: LD_ADDR_VAR 0 3
43885: PUSH
43886: LD_VAR 0 11
43890: PUSH
43891: LD_INT 1
43893: ARRAY
43894: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43895: LD_ADDR_VAR 0 11
43899: PUSH
43900: LD_VAR 0 11
43904: PPUSH
43905: LD_INT 1
43907: PPUSH
43908: CALL_OW 3
43912: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43913: LD_VAR 0 2
43917: PPUSH
43918: LD_VAR 0 3
43922: PPUSH
43923: CALL 44123 0 2
43927: PUSH
43928: LD_VAR 0 11
43932: PUSH
43933: EMPTY
43934: EQUAL
43935: OR
43936: IFFALSE 43881
// if not control in _control then
43938: LD_VAR 0 4
43942: PUSH
43943: LD_VAR 0 12
43947: IN
43948: NOT
43949: IFFALSE 43975
// control := _control [ rand ( 1 , _control ) ] ;
43951: LD_ADDR_VAR 0 4
43955: PUSH
43956: LD_VAR 0 12
43960: PUSH
43961: LD_INT 1
43963: PPUSH
43964: LD_VAR 0 12
43968: PPUSH
43969: CALL_OW 12
43973: ARRAY
43974: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43975: LD_VAR 0 2
43979: PPUSH
43980: LD_VAR 0 5
43984: PPUSH
43985: CALL 44343 0 2
43989: NOT
43990: IFFALSE 44049
// repeat weapon := _weapon [ 1 ] ;
43992: LD_ADDR_VAR 0 5
43996: PUSH
43997: LD_VAR 0 10
44001: PUSH
44002: LD_INT 1
44004: ARRAY
44005: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44006: LD_ADDR_VAR 0 10
44010: PUSH
44011: LD_VAR 0 10
44015: PPUSH
44016: LD_INT 1
44018: PPUSH
44019: CALL_OW 3
44023: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44024: LD_VAR 0 2
44028: PPUSH
44029: LD_VAR 0 5
44033: PPUSH
44034: CALL 44343 0 2
44038: PUSH
44039: LD_VAR 0 10
44043: PUSH
44044: EMPTY
44045: EQUAL
44046: OR
44047: IFFALSE 43992
// result := [ ] ;
44049: LD_ADDR_VAR 0 6
44053: PUSH
44054: EMPTY
44055: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44056: LD_VAR 0 1
44060: PPUSH
44061: LD_VAR 0 2
44065: PPUSH
44066: LD_VAR 0 3
44070: PPUSH
44071: LD_VAR 0 4
44075: PPUSH
44076: LD_VAR 0 5
44080: PPUSH
44081: CALL_OW 448
44085: IFFALSE 44118
// result := [ chassis , engine , control , weapon ] ;
44087: LD_ADDR_VAR 0 6
44091: PUSH
44092: LD_VAR 0 2
44096: PUSH
44097: LD_VAR 0 3
44101: PUSH
44102: LD_VAR 0 4
44106: PUSH
44107: LD_VAR 0 5
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: ST_TO_ADDR
// end ;
44118: LD_VAR 0 6
44122: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44123: LD_INT 0
44125: PPUSH
// if not chassis or not engine then
44126: LD_VAR 0 1
44130: NOT
44131: PUSH
44132: LD_VAR 0 2
44136: NOT
44137: OR
44138: IFFALSE 44142
// exit ;
44140: GO 44338
// case engine of engine_solar :
44142: LD_VAR 0 2
44146: PUSH
44147: LD_INT 2
44149: DOUBLE
44150: EQUAL
44151: IFTRUE 44155
44153: GO 44193
44155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44156: LD_ADDR_VAR 0 3
44160: PUSH
44161: LD_INT 11
44163: PUSH
44164: LD_INT 12
44166: PUSH
44167: LD_INT 13
44169: PUSH
44170: LD_INT 14
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: LD_INT 3
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: ST_TO_ADDR
44191: GO 44322
44193: LD_INT 1
44195: DOUBLE
44196: EQUAL
44197: IFTRUE 44201
44199: GO 44263
44201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44202: LD_ADDR_VAR 0 3
44206: PUSH
44207: LD_INT 11
44209: PUSH
44210: LD_INT 12
44212: PUSH
44213: LD_INT 13
44215: PUSH
44216: LD_INT 14
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: LD_INT 3
44227: PUSH
44228: LD_INT 4
44230: PUSH
44231: LD_INT 5
44233: PUSH
44234: LD_INT 21
44236: PUSH
44237: LD_INT 23
44239: PUSH
44240: LD_INT 22
44242: PUSH
44243: LD_INT 24
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: ST_TO_ADDR
44261: GO 44322
44263: LD_INT 3
44265: DOUBLE
44266: EQUAL
44267: IFTRUE 44271
44269: GO 44321
44271: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44272: LD_ADDR_VAR 0 3
44276: PUSH
44277: LD_INT 13
44279: PUSH
44280: LD_INT 14
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: LD_INT 3
44288: PUSH
44289: LD_INT 4
44291: PUSH
44292: LD_INT 5
44294: PUSH
44295: LD_INT 21
44297: PUSH
44298: LD_INT 22
44300: PUSH
44301: LD_INT 23
44303: PUSH
44304: LD_INT 24
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: ST_TO_ADDR
44319: GO 44322
44321: POP
// result := ( chassis in result ) ;
44322: LD_ADDR_VAR 0 3
44326: PUSH
44327: LD_VAR 0 1
44331: PUSH
44332: LD_VAR 0 3
44336: IN
44337: ST_TO_ADDR
// end ;
44338: LD_VAR 0 3
44342: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44343: LD_INT 0
44345: PPUSH
// if not chassis or not weapon then
44346: LD_VAR 0 1
44350: NOT
44351: PUSH
44352: LD_VAR 0 2
44356: NOT
44357: OR
44358: IFFALSE 44362
// exit ;
44360: GO 45422
// case weapon of us_machine_gun :
44362: LD_VAR 0 2
44366: PUSH
44367: LD_INT 2
44369: DOUBLE
44370: EQUAL
44371: IFTRUE 44375
44373: GO 44405
44375: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44376: LD_ADDR_VAR 0 3
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 3
44389: PUSH
44390: LD_INT 4
44392: PUSH
44393: LD_INT 5
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: ST_TO_ADDR
44403: GO 45406
44405: LD_INT 3
44407: DOUBLE
44408: EQUAL
44409: IFTRUE 44413
44411: GO 44443
44413: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44414: LD_ADDR_VAR 0 3
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: LD_INT 3
44427: PUSH
44428: LD_INT 4
44430: PUSH
44431: LD_INT 5
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: ST_TO_ADDR
44441: GO 45406
44443: LD_INT 11
44445: DOUBLE
44446: EQUAL
44447: IFTRUE 44451
44449: GO 44481
44451: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44452: LD_ADDR_VAR 0 3
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 3
44465: PUSH
44466: LD_INT 4
44468: PUSH
44469: LD_INT 5
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: ST_TO_ADDR
44479: GO 45406
44481: LD_INT 4
44483: DOUBLE
44484: EQUAL
44485: IFTRUE 44489
44487: GO 44515
44489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44490: LD_ADDR_VAR 0 3
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 3
44500: PUSH
44501: LD_INT 4
44503: PUSH
44504: LD_INT 5
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
44513: GO 45406
44515: LD_INT 5
44517: DOUBLE
44518: EQUAL
44519: IFTRUE 44523
44521: GO 44549
44523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44524: LD_ADDR_VAR 0 3
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: LD_INT 4
44537: PUSH
44538: LD_INT 5
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: ST_TO_ADDR
44547: GO 45406
44549: LD_INT 9
44551: DOUBLE
44552: EQUAL
44553: IFTRUE 44557
44555: GO 44583
44557: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44558: LD_ADDR_VAR 0 3
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 3
44568: PUSH
44569: LD_INT 4
44571: PUSH
44572: LD_INT 5
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: ST_TO_ADDR
44581: GO 45406
44583: LD_INT 7
44585: DOUBLE
44586: EQUAL
44587: IFTRUE 44591
44589: GO 44617
44591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44592: LD_ADDR_VAR 0 3
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: LD_INT 4
44605: PUSH
44606: LD_INT 5
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: ST_TO_ADDR
44615: GO 45406
44617: LD_INT 12
44619: DOUBLE
44620: EQUAL
44621: IFTRUE 44625
44623: GO 44651
44625: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44626: LD_ADDR_VAR 0 3
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 3
44636: PUSH
44637: LD_INT 4
44639: PUSH
44640: LD_INT 5
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: ST_TO_ADDR
44649: GO 45406
44651: LD_INT 13
44653: DOUBLE
44654: EQUAL
44655: IFTRUE 44659
44657: GO 44685
44659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44660: LD_ADDR_VAR 0 3
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 3
44670: PUSH
44671: LD_INT 4
44673: PUSH
44674: LD_INT 5
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: ST_TO_ADDR
44683: GO 45406
44685: LD_INT 14
44687: DOUBLE
44688: EQUAL
44689: IFTRUE 44693
44691: GO 44711
44693: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44694: LD_ADDR_VAR 0 3
44698: PUSH
44699: LD_INT 4
44701: PUSH
44702: LD_INT 5
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: ST_TO_ADDR
44709: GO 45406
44711: LD_INT 6
44713: DOUBLE
44714: EQUAL
44715: IFTRUE 44719
44717: GO 44737
44719: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44720: LD_ADDR_VAR 0 3
44724: PUSH
44725: LD_INT 4
44727: PUSH
44728: LD_INT 5
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: ST_TO_ADDR
44735: GO 45406
44737: LD_INT 10
44739: DOUBLE
44740: EQUAL
44741: IFTRUE 44745
44743: GO 44763
44745: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44746: LD_ADDR_VAR 0 3
44750: PUSH
44751: LD_INT 4
44753: PUSH
44754: LD_INT 5
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: ST_TO_ADDR
44761: GO 45406
44763: LD_INT 22
44765: DOUBLE
44766: EQUAL
44767: IFTRUE 44771
44769: GO 44797
44771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44772: LD_ADDR_VAR 0 3
44776: PUSH
44777: LD_INT 11
44779: PUSH
44780: LD_INT 12
44782: PUSH
44783: LD_INT 13
44785: PUSH
44786: LD_INT 14
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: ST_TO_ADDR
44795: GO 45406
44797: LD_INT 23
44799: DOUBLE
44800: EQUAL
44801: IFTRUE 44805
44803: GO 44831
44805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44806: LD_ADDR_VAR 0 3
44810: PUSH
44811: LD_INT 11
44813: PUSH
44814: LD_INT 12
44816: PUSH
44817: LD_INT 13
44819: PUSH
44820: LD_INT 14
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: ST_TO_ADDR
44829: GO 45406
44831: LD_INT 24
44833: DOUBLE
44834: EQUAL
44835: IFTRUE 44839
44837: GO 44865
44839: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44840: LD_ADDR_VAR 0 3
44844: PUSH
44845: LD_INT 11
44847: PUSH
44848: LD_INT 12
44850: PUSH
44851: LD_INT 13
44853: PUSH
44854: LD_INT 14
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: ST_TO_ADDR
44863: GO 45406
44865: LD_INT 30
44867: DOUBLE
44868: EQUAL
44869: IFTRUE 44873
44871: GO 44899
44873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44874: LD_ADDR_VAR 0 3
44878: PUSH
44879: LD_INT 11
44881: PUSH
44882: LD_INT 12
44884: PUSH
44885: LD_INT 13
44887: PUSH
44888: LD_INT 14
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: ST_TO_ADDR
44897: GO 45406
44899: LD_INT 25
44901: DOUBLE
44902: EQUAL
44903: IFTRUE 44907
44905: GO 44925
44907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44908: LD_ADDR_VAR 0 3
44912: PUSH
44913: LD_INT 13
44915: PUSH
44916: LD_INT 14
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: ST_TO_ADDR
44923: GO 45406
44925: LD_INT 27
44927: DOUBLE
44928: EQUAL
44929: IFTRUE 44933
44931: GO 44951
44933: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44934: LD_ADDR_VAR 0 3
44938: PUSH
44939: LD_INT 13
44941: PUSH
44942: LD_INT 14
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: ST_TO_ADDR
44949: GO 45406
44951: LD_INT 92
44953: DOUBLE
44954: EQUAL
44955: IFTRUE 44959
44957: GO 44985
44959: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44960: LD_ADDR_VAR 0 3
44964: PUSH
44965: LD_INT 11
44967: PUSH
44968: LD_INT 12
44970: PUSH
44971: LD_INT 13
44973: PUSH
44974: LD_INT 14
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: ST_TO_ADDR
44983: GO 45406
44985: LD_INT 28
44987: DOUBLE
44988: EQUAL
44989: IFTRUE 44993
44991: GO 45011
44993: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44994: LD_ADDR_VAR 0 3
44998: PUSH
44999: LD_INT 13
45001: PUSH
45002: LD_INT 14
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: ST_TO_ADDR
45009: GO 45406
45011: LD_INT 29
45013: DOUBLE
45014: EQUAL
45015: IFTRUE 45019
45017: GO 45037
45019: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45020: LD_ADDR_VAR 0 3
45024: PUSH
45025: LD_INT 13
45027: PUSH
45028: LD_INT 14
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: ST_TO_ADDR
45035: GO 45406
45037: LD_INT 31
45039: DOUBLE
45040: EQUAL
45041: IFTRUE 45045
45043: GO 45063
45045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45046: LD_ADDR_VAR 0 3
45050: PUSH
45051: LD_INT 13
45053: PUSH
45054: LD_INT 14
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: ST_TO_ADDR
45061: GO 45406
45063: LD_INT 26
45065: DOUBLE
45066: EQUAL
45067: IFTRUE 45071
45069: GO 45089
45071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45072: LD_ADDR_VAR 0 3
45076: PUSH
45077: LD_INT 13
45079: PUSH
45080: LD_INT 14
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: ST_TO_ADDR
45087: GO 45406
45089: LD_INT 42
45091: DOUBLE
45092: EQUAL
45093: IFTRUE 45097
45095: GO 45123
45097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45098: LD_ADDR_VAR 0 3
45102: PUSH
45103: LD_INT 21
45105: PUSH
45106: LD_INT 22
45108: PUSH
45109: LD_INT 23
45111: PUSH
45112: LD_INT 24
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: ST_TO_ADDR
45121: GO 45406
45123: LD_INT 43
45125: DOUBLE
45126: EQUAL
45127: IFTRUE 45131
45129: GO 45157
45131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45132: LD_ADDR_VAR 0 3
45136: PUSH
45137: LD_INT 21
45139: PUSH
45140: LD_INT 22
45142: PUSH
45143: LD_INT 23
45145: PUSH
45146: LD_INT 24
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: ST_TO_ADDR
45155: GO 45406
45157: LD_INT 44
45159: DOUBLE
45160: EQUAL
45161: IFTRUE 45165
45163: GO 45191
45165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45166: LD_ADDR_VAR 0 3
45170: PUSH
45171: LD_INT 21
45173: PUSH
45174: LD_INT 22
45176: PUSH
45177: LD_INT 23
45179: PUSH
45180: LD_INT 24
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: ST_TO_ADDR
45189: GO 45406
45191: LD_INT 45
45193: DOUBLE
45194: EQUAL
45195: IFTRUE 45199
45197: GO 45225
45199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45200: LD_ADDR_VAR 0 3
45204: PUSH
45205: LD_INT 21
45207: PUSH
45208: LD_INT 22
45210: PUSH
45211: LD_INT 23
45213: PUSH
45214: LD_INT 24
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: ST_TO_ADDR
45223: GO 45406
45225: LD_INT 49
45227: DOUBLE
45228: EQUAL
45229: IFTRUE 45233
45231: GO 45259
45233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45234: LD_ADDR_VAR 0 3
45238: PUSH
45239: LD_INT 21
45241: PUSH
45242: LD_INT 22
45244: PUSH
45245: LD_INT 23
45247: PUSH
45248: LD_INT 24
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: ST_TO_ADDR
45257: GO 45406
45259: LD_INT 51
45261: DOUBLE
45262: EQUAL
45263: IFTRUE 45267
45265: GO 45293
45267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45268: LD_ADDR_VAR 0 3
45272: PUSH
45273: LD_INT 21
45275: PUSH
45276: LD_INT 22
45278: PUSH
45279: LD_INT 23
45281: PUSH
45282: LD_INT 24
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: ST_TO_ADDR
45291: GO 45406
45293: LD_INT 52
45295: DOUBLE
45296: EQUAL
45297: IFTRUE 45301
45299: GO 45327
45301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45302: LD_ADDR_VAR 0 3
45306: PUSH
45307: LD_INT 21
45309: PUSH
45310: LD_INT 22
45312: PUSH
45313: LD_INT 23
45315: PUSH
45316: LD_INT 24
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: ST_TO_ADDR
45325: GO 45406
45327: LD_INT 53
45329: DOUBLE
45330: EQUAL
45331: IFTRUE 45335
45333: GO 45353
45335: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45336: LD_ADDR_VAR 0 3
45340: PUSH
45341: LD_INT 23
45343: PUSH
45344: LD_INT 24
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: ST_TO_ADDR
45351: GO 45406
45353: LD_INT 46
45355: DOUBLE
45356: EQUAL
45357: IFTRUE 45361
45359: GO 45379
45361: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45362: LD_ADDR_VAR 0 3
45366: PUSH
45367: LD_INT 23
45369: PUSH
45370: LD_INT 24
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: ST_TO_ADDR
45377: GO 45406
45379: LD_INT 47
45381: DOUBLE
45382: EQUAL
45383: IFTRUE 45387
45385: GO 45405
45387: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45388: LD_ADDR_VAR 0 3
45392: PUSH
45393: LD_INT 23
45395: PUSH
45396: LD_INT 24
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: ST_TO_ADDR
45403: GO 45406
45405: POP
// result := ( chassis in result ) ;
45406: LD_ADDR_VAR 0 3
45410: PUSH
45411: LD_VAR 0 1
45415: PUSH
45416: LD_VAR 0 3
45420: IN
45421: ST_TO_ADDR
// end ;
45422: LD_VAR 0 3
45426: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45427: LD_INT 0
45429: PPUSH
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
45434: PPUSH
45435: PPUSH
// result := array ;
45436: LD_ADDR_VAR 0 5
45440: PUSH
45441: LD_VAR 0 1
45445: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45446: LD_VAR 0 1
45450: NOT
45451: PUSH
45452: LD_VAR 0 2
45456: NOT
45457: OR
45458: PUSH
45459: LD_VAR 0 3
45463: NOT
45464: OR
45465: PUSH
45466: LD_VAR 0 2
45470: PUSH
45471: LD_VAR 0 1
45475: GREATER
45476: OR
45477: PUSH
45478: LD_VAR 0 3
45482: PUSH
45483: LD_VAR 0 1
45487: GREATER
45488: OR
45489: IFFALSE 45493
// exit ;
45491: GO 45789
// if direction then
45493: LD_VAR 0 4
45497: IFFALSE 45561
// begin d := 1 ;
45499: LD_ADDR_VAR 0 9
45503: PUSH
45504: LD_INT 1
45506: ST_TO_ADDR
// if i_from > i_to then
45507: LD_VAR 0 2
45511: PUSH
45512: LD_VAR 0 3
45516: GREATER
45517: IFFALSE 45543
// length := ( array - i_from ) + i_to else
45519: LD_ADDR_VAR 0 11
45523: PUSH
45524: LD_VAR 0 1
45528: PUSH
45529: LD_VAR 0 2
45533: MINUS
45534: PUSH
45535: LD_VAR 0 3
45539: PLUS
45540: ST_TO_ADDR
45541: GO 45559
// length := i_to - i_from ;
45543: LD_ADDR_VAR 0 11
45547: PUSH
45548: LD_VAR 0 3
45552: PUSH
45553: LD_VAR 0 2
45557: MINUS
45558: ST_TO_ADDR
// end else
45559: GO 45622
// begin d := - 1 ;
45561: LD_ADDR_VAR 0 9
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: ST_TO_ADDR
// if i_from > i_to then
45570: LD_VAR 0 2
45574: PUSH
45575: LD_VAR 0 3
45579: GREATER
45580: IFFALSE 45600
// length := i_from - i_to else
45582: LD_ADDR_VAR 0 11
45586: PUSH
45587: LD_VAR 0 2
45591: PUSH
45592: LD_VAR 0 3
45596: MINUS
45597: ST_TO_ADDR
45598: GO 45622
// length := ( array - i_to ) + i_from ;
45600: LD_ADDR_VAR 0 11
45604: PUSH
45605: LD_VAR 0 1
45609: PUSH
45610: LD_VAR 0 3
45614: MINUS
45615: PUSH
45616: LD_VAR 0 2
45620: PLUS
45621: ST_TO_ADDR
// end ; if not length then
45622: LD_VAR 0 11
45626: NOT
45627: IFFALSE 45631
// exit ;
45629: GO 45789
// tmp := array ;
45631: LD_ADDR_VAR 0 10
45635: PUSH
45636: LD_VAR 0 1
45640: ST_TO_ADDR
// for i = 1 to length do
45641: LD_ADDR_VAR 0 6
45645: PUSH
45646: DOUBLE
45647: LD_INT 1
45649: DEC
45650: ST_TO_ADDR
45651: LD_VAR 0 11
45655: PUSH
45656: FOR_TO
45657: IFFALSE 45777
// begin for j = 1 to array do
45659: LD_ADDR_VAR 0 7
45663: PUSH
45664: DOUBLE
45665: LD_INT 1
45667: DEC
45668: ST_TO_ADDR
45669: LD_VAR 0 1
45673: PUSH
45674: FOR_TO
45675: IFFALSE 45763
// begin k := j + d ;
45677: LD_ADDR_VAR 0 8
45681: PUSH
45682: LD_VAR 0 7
45686: PUSH
45687: LD_VAR 0 9
45691: PLUS
45692: ST_TO_ADDR
// if k > array then
45693: LD_VAR 0 8
45697: PUSH
45698: LD_VAR 0 1
45702: GREATER
45703: IFFALSE 45713
// k := 1 ;
45705: LD_ADDR_VAR 0 8
45709: PUSH
45710: LD_INT 1
45712: ST_TO_ADDR
// if not k then
45713: LD_VAR 0 8
45717: NOT
45718: IFFALSE 45730
// k := array ;
45720: LD_ADDR_VAR 0 8
45724: PUSH
45725: LD_VAR 0 1
45729: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45730: LD_ADDR_VAR 0 10
45734: PUSH
45735: LD_VAR 0 10
45739: PPUSH
45740: LD_VAR 0 8
45744: PPUSH
45745: LD_VAR 0 1
45749: PUSH
45750: LD_VAR 0 7
45754: ARRAY
45755: PPUSH
45756: CALL_OW 1
45760: ST_TO_ADDR
// end ;
45761: GO 45674
45763: POP
45764: POP
// array := tmp ;
45765: LD_ADDR_VAR 0 1
45769: PUSH
45770: LD_VAR 0 10
45774: ST_TO_ADDR
// end ;
45775: GO 45656
45777: POP
45778: POP
// result := array ;
45779: LD_ADDR_VAR 0 5
45783: PUSH
45784: LD_VAR 0 1
45788: ST_TO_ADDR
// end ;
45789: LD_VAR 0 5
45793: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45794: LD_INT 0
45796: PPUSH
45797: PPUSH
// result := 0 ;
45798: LD_ADDR_VAR 0 3
45802: PUSH
45803: LD_INT 0
45805: ST_TO_ADDR
// if not array or not value in array then
45806: LD_VAR 0 1
45810: NOT
45811: PUSH
45812: LD_VAR 0 2
45816: PUSH
45817: LD_VAR 0 1
45821: IN
45822: NOT
45823: OR
45824: IFFALSE 45828
// exit ;
45826: GO 45882
// for i = 1 to array do
45828: LD_ADDR_VAR 0 4
45832: PUSH
45833: DOUBLE
45834: LD_INT 1
45836: DEC
45837: ST_TO_ADDR
45838: LD_VAR 0 1
45842: PUSH
45843: FOR_TO
45844: IFFALSE 45880
// if value = array [ i ] then
45846: LD_VAR 0 2
45850: PUSH
45851: LD_VAR 0 1
45855: PUSH
45856: LD_VAR 0 4
45860: ARRAY
45861: EQUAL
45862: IFFALSE 45878
// begin result := i ;
45864: LD_ADDR_VAR 0 3
45868: PUSH
45869: LD_VAR 0 4
45873: ST_TO_ADDR
// exit ;
45874: POP
45875: POP
45876: GO 45882
// end ;
45878: GO 45843
45880: POP
45881: POP
// end ;
45882: LD_VAR 0 3
45886: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45887: LD_INT 0
45889: PPUSH
// vc_chassis := chassis ;
45890: LD_ADDR_OWVAR 37
45894: PUSH
45895: LD_VAR 0 1
45899: ST_TO_ADDR
// vc_engine := engine ;
45900: LD_ADDR_OWVAR 39
45904: PUSH
45905: LD_VAR 0 2
45909: ST_TO_ADDR
// vc_control := control ;
45910: LD_ADDR_OWVAR 38
45914: PUSH
45915: LD_VAR 0 3
45919: ST_TO_ADDR
// vc_weapon := weapon ;
45920: LD_ADDR_OWVAR 40
45924: PUSH
45925: LD_VAR 0 4
45929: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45930: LD_ADDR_OWVAR 41
45934: PUSH
45935: LD_VAR 0 5
45939: ST_TO_ADDR
// end ;
45940: LD_VAR 0 6
45944: RET
// export function WantPlant ( unit ) ; var task ; begin
45945: LD_INT 0
45947: PPUSH
45948: PPUSH
// result := false ;
45949: LD_ADDR_VAR 0 2
45953: PUSH
45954: LD_INT 0
45956: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45957: LD_ADDR_VAR 0 3
45961: PUSH
45962: LD_VAR 0 1
45966: PPUSH
45967: CALL_OW 437
45971: ST_TO_ADDR
// if task then
45972: LD_VAR 0 3
45976: IFFALSE 46004
// if task [ 1 ] [ 1 ] = p then
45978: LD_VAR 0 3
45982: PUSH
45983: LD_INT 1
45985: ARRAY
45986: PUSH
45987: LD_INT 1
45989: ARRAY
45990: PUSH
45991: LD_STRING p
45993: EQUAL
45994: IFFALSE 46004
// result := true ;
45996: LD_ADDR_VAR 0 2
46000: PUSH
46001: LD_INT 1
46003: ST_TO_ADDR
// end ;
46004: LD_VAR 0 2
46008: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46009: LD_INT 0
46011: PPUSH
46012: PPUSH
46013: PPUSH
46014: PPUSH
// if pos < 1 then
46015: LD_VAR 0 2
46019: PUSH
46020: LD_INT 1
46022: LESS
46023: IFFALSE 46027
// exit ;
46025: GO 46330
// if pos = 1 then
46027: LD_VAR 0 2
46031: PUSH
46032: LD_INT 1
46034: EQUAL
46035: IFFALSE 46068
// result := Replace ( arr , pos [ 1 ] , value ) else
46037: LD_ADDR_VAR 0 4
46041: PUSH
46042: LD_VAR 0 1
46046: PPUSH
46047: LD_VAR 0 2
46051: PUSH
46052: LD_INT 1
46054: ARRAY
46055: PPUSH
46056: LD_VAR 0 3
46060: PPUSH
46061: CALL_OW 1
46065: ST_TO_ADDR
46066: GO 46330
// begin tmp := arr ;
46068: LD_ADDR_VAR 0 6
46072: PUSH
46073: LD_VAR 0 1
46077: ST_TO_ADDR
// s_arr := [ tmp ] ;
46078: LD_ADDR_VAR 0 7
46082: PUSH
46083: LD_VAR 0 6
46087: PUSH
46088: EMPTY
46089: LIST
46090: ST_TO_ADDR
// for i = 1 to pos - 1 do
46091: LD_ADDR_VAR 0 5
46095: PUSH
46096: DOUBLE
46097: LD_INT 1
46099: DEC
46100: ST_TO_ADDR
46101: LD_VAR 0 2
46105: PUSH
46106: LD_INT 1
46108: MINUS
46109: PUSH
46110: FOR_TO
46111: IFFALSE 46156
// begin tmp := tmp [ pos [ i ] ] ;
46113: LD_ADDR_VAR 0 6
46117: PUSH
46118: LD_VAR 0 6
46122: PUSH
46123: LD_VAR 0 2
46127: PUSH
46128: LD_VAR 0 5
46132: ARRAY
46133: ARRAY
46134: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46135: LD_ADDR_VAR 0 7
46139: PUSH
46140: LD_VAR 0 7
46144: PUSH
46145: LD_VAR 0 6
46149: PUSH
46150: EMPTY
46151: LIST
46152: ADD
46153: ST_TO_ADDR
// end ;
46154: GO 46110
46156: POP
46157: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46158: LD_ADDR_VAR 0 6
46162: PUSH
46163: LD_VAR 0 6
46167: PPUSH
46168: LD_VAR 0 2
46172: PUSH
46173: LD_VAR 0 2
46177: ARRAY
46178: PPUSH
46179: LD_VAR 0 3
46183: PPUSH
46184: CALL_OW 1
46188: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46189: LD_ADDR_VAR 0 7
46193: PUSH
46194: LD_VAR 0 7
46198: PPUSH
46199: LD_VAR 0 7
46203: PPUSH
46204: LD_VAR 0 6
46208: PPUSH
46209: CALL_OW 1
46213: ST_TO_ADDR
// for i = s_arr downto 2 do
46214: LD_ADDR_VAR 0 5
46218: PUSH
46219: DOUBLE
46220: LD_VAR 0 7
46224: INC
46225: ST_TO_ADDR
46226: LD_INT 2
46228: PUSH
46229: FOR_DOWNTO
46230: IFFALSE 46314
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46232: LD_ADDR_VAR 0 6
46236: PUSH
46237: LD_VAR 0 7
46241: PUSH
46242: LD_VAR 0 5
46246: PUSH
46247: LD_INT 1
46249: MINUS
46250: ARRAY
46251: PPUSH
46252: LD_VAR 0 2
46256: PUSH
46257: LD_VAR 0 5
46261: PUSH
46262: LD_INT 1
46264: MINUS
46265: ARRAY
46266: PPUSH
46267: LD_VAR 0 7
46271: PUSH
46272: LD_VAR 0 5
46276: ARRAY
46277: PPUSH
46278: CALL_OW 1
46282: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46283: LD_ADDR_VAR 0 7
46287: PUSH
46288: LD_VAR 0 7
46292: PPUSH
46293: LD_VAR 0 5
46297: PUSH
46298: LD_INT 1
46300: MINUS
46301: PPUSH
46302: LD_VAR 0 6
46306: PPUSH
46307: CALL_OW 1
46311: ST_TO_ADDR
// end ;
46312: GO 46229
46314: POP
46315: POP
// result := s_arr [ 1 ] ;
46316: LD_ADDR_VAR 0 4
46320: PUSH
46321: LD_VAR 0 7
46325: PUSH
46326: LD_INT 1
46328: ARRAY
46329: ST_TO_ADDR
// end ; end ;
46330: LD_VAR 0 4
46334: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46335: LD_INT 0
46337: PPUSH
46338: PPUSH
// if not list then
46339: LD_VAR 0 1
46343: NOT
46344: IFFALSE 46348
// exit ;
46346: GO 46439
// i := list [ pos1 ] ;
46348: LD_ADDR_VAR 0 5
46352: PUSH
46353: LD_VAR 0 1
46357: PUSH
46358: LD_VAR 0 2
46362: ARRAY
46363: ST_TO_ADDR
// if not i then
46364: LD_VAR 0 5
46368: NOT
46369: IFFALSE 46373
// exit ;
46371: GO 46439
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46373: LD_ADDR_VAR 0 1
46377: PUSH
46378: LD_VAR 0 1
46382: PPUSH
46383: LD_VAR 0 2
46387: PPUSH
46388: LD_VAR 0 1
46392: PUSH
46393: LD_VAR 0 3
46397: ARRAY
46398: PPUSH
46399: CALL_OW 1
46403: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46404: LD_ADDR_VAR 0 1
46408: PUSH
46409: LD_VAR 0 1
46413: PPUSH
46414: LD_VAR 0 3
46418: PPUSH
46419: LD_VAR 0 5
46423: PPUSH
46424: CALL_OW 1
46428: ST_TO_ADDR
// result := list ;
46429: LD_ADDR_VAR 0 4
46433: PUSH
46434: LD_VAR 0 1
46438: ST_TO_ADDR
// end ;
46439: LD_VAR 0 4
46443: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46444: LD_INT 0
46446: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46447: LD_ADDR_VAR 0 5
46451: PUSH
46452: LD_VAR 0 1
46456: PPUSH
46457: CALL_OW 250
46461: PPUSH
46462: LD_VAR 0 1
46466: PPUSH
46467: CALL_OW 251
46471: PPUSH
46472: LD_VAR 0 2
46476: PPUSH
46477: LD_VAR 0 3
46481: PPUSH
46482: LD_VAR 0 4
46486: PPUSH
46487: CALL 46865 0 5
46491: ST_TO_ADDR
// end ;
46492: LD_VAR 0 5
46496: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46497: LD_INT 0
46499: PPUSH
46500: PPUSH
46501: PPUSH
46502: PPUSH
// if not list or not unit then
46503: LD_VAR 0 2
46507: NOT
46508: PUSH
46509: LD_VAR 0 1
46513: NOT
46514: OR
46515: IFFALSE 46519
// exit ;
46517: GO 46860
// result := [ ] ;
46519: LD_ADDR_VAR 0 5
46523: PUSH
46524: EMPTY
46525: ST_TO_ADDR
// for i in list do
46526: LD_ADDR_VAR 0 6
46530: PUSH
46531: LD_VAR 0 2
46535: PUSH
46536: FOR_IN
46537: IFFALSE 46755
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46539: LD_ADDR_VAR 0 8
46543: PUSH
46544: LD_VAR 0 1
46548: PPUSH
46549: LD_VAR 0 6
46553: PUSH
46554: LD_INT 1
46556: ARRAY
46557: PPUSH
46558: LD_VAR 0 6
46562: PUSH
46563: LD_INT 2
46565: ARRAY
46566: PPUSH
46567: CALL_OW 297
46571: ST_TO_ADDR
// if not Count ( result ) then
46572: LD_VAR 0 5
46576: PPUSH
46577: CALL 43149 0 1
46581: NOT
46582: IFFALSE 46615
// begin result := Join ( result , [ i , tmp ] ) ;
46584: LD_ADDR_VAR 0 5
46588: PUSH
46589: LD_VAR 0 5
46593: PPUSH
46594: LD_VAR 0 6
46598: PUSH
46599: LD_VAR 0 8
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PPUSH
46608: CALL 78738 0 2
46612: ST_TO_ADDR
// continue ;
46613: GO 46536
// end ; if result [ result ] [ 2 ] <= tmp then
46615: LD_VAR 0 5
46619: PUSH
46620: LD_VAR 0 5
46624: ARRAY
46625: PUSH
46626: LD_INT 2
46628: ARRAY
46629: PUSH
46630: LD_VAR 0 8
46634: LESSEQUAL
46635: IFFALSE 46668
// result := Join ( result , [ i , tmp ] ) else
46637: LD_ADDR_VAR 0 5
46641: PUSH
46642: LD_VAR 0 5
46646: PPUSH
46647: LD_VAR 0 6
46651: PUSH
46652: LD_VAR 0 8
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PPUSH
46661: CALL 78738 0 2
46665: ST_TO_ADDR
46666: GO 46753
// begin for j := 1 to Count ( result ) do
46668: LD_ADDR_VAR 0 7
46672: PUSH
46673: DOUBLE
46674: LD_INT 1
46676: DEC
46677: ST_TO_ADDR
46678: LD_VAR 0 5
46682: PPUSH
46683: CALL 43149 0 1
46687: PUSH
46688: FOR_TO
46689: IFFALSE 46751
// begin if tmp < result [ j ] [ 2 ] then
46691: LD_VAR 0 8
46695: PUSH
46696: LD_VAR 0 5
46700: PUSH
46701: LD_VAR 0 7
46705: ARRAY
46706: PUSH
46707: LD_INT 2
46709: ARRAY
46710: LESS
46711: IFFALSE 46749
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46713: LD_ADDR_VAR 0 5
46717: PUSH
46718: LD_VAR 0 5
46722: PPUSH
46723: LD_VAR 0 7
46727: PPUSH
46728: LD_VAR 0 6
46732: PUSH
46733: LD_VAR 0 8
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PPUSH
46742: CALL_OW 2
46746: ST_TO_ADDR
// break ;
46747: GO 46751
// end ; end ;
46749: GO 46688
46751: POP
46752: POP
// end ; end ;
46753: GO 46536
46755: POP
46756: POP
// if result and not asc then
46757: LD_VAR 0 5
46761: PUSH
46762: LD_VAR 0 3
46766: NOT
46767: AND
46768: IFFALSE 46785
// result := ReverseArray ( result ) ;
46770: LD_ADDR_VAR 0 5
46774: PUSH
46775: LD_VAR 0 5
46779: PPUSH
46780: CALL 74025 0 1
46784: ST_TO_ADDR
// tmp := [ ] ;
46785: LD_ADDR_VAR 0 8
46789: PUSH
46790: EMPTY
46791: ST_TO_ADDR
// if mode then
46792: LD_VAR 0 4
46796: IFFALSE 46860
// begin for i := 1 to result do
46798: LD_ADDR_VAR 0 6
46802: PUSH
46803: DOUBLE
46804: LD_INT 1
46806: DEC
46807: ST_TO_ADDR
46808: LD_VAR 0 5
46812: PUSH
46813: FOR_TO
46814: IFFALSE 46848
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46816: LD_ADDR_VAR 0 8
46820: PUSH
46821: LD_VAR 0 8
46825: PPUSH
46826: LD_VAR 0 5
46830: PUSH
46831: LD_VAR 0 6
46835: ARRAY
46836: PUSH
46837: LD_INT 1
46839: ARRAY
46840: PPUSH
46841: CALL 78738 0 2
46845: ST_TO_ADDR
46846: GO 46813
46848: POP
46849: POP
// result := tmp ;
46850: LD_ADDR_VAR 0 5
46854: PUSH
46855: LD_VAR 0 8
46859: ST_TO_ADDR
// end ; end ;
46860: LD_VAR 0 5
46864: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46865: LD_INT 0
46867: PPUSH
46868: PPUSH
46869: PPUSH
46870: PPUSH
// if not list then
46871: LD_VAR 0 3
46875: NOT
46876: IFFALSE 46880
// exit ;
46878: GO 47268
// result := [ ] ;
46880: LD_ADDR_VAR 0 6
46884: PUSH
46885: EMPTY
46886: ST_TO_ADDR
// for i in list do
46887: LD_ADDR_VAR 0 7
46891: PUSH
46892: LD_VAR 0 3
46896: PUSH
46897: FOR_IN
46898: IFFALSE 47100
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46900: LD_ADDR_VAR 0 9
46904: PUSH
46905: LD_VAR 0 7
46909: PPUSH
46910: LD_VAR 0 1
46914: PPUSH
46915: LD_VAR 0 2
46919: PPUSH
46920: CALL_OW 297
46924: ST_TO_ADDR
// if not result then
46925: LD_VAR 0 6
46929: NOT
46930: IFFALSE 46956
// result := [ [ i , tmp ] ] else
46932: LD_ADDR_VAR 0 6
46936: PUSH
46937: LD_VAR 0 7
46941: PUSH
46942: LD_VAR 0 9
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: EMPTY
46952: LIST
46953: ST_TO_ADDR
46954: GO 47098
// begin if result [ result ] [ 2 ] < tmp then
46956: LD_VAR 0 6
46960: PUSH
46961: LD_VAR 0 6
46965: ARRAY
46966: PUSH
46967: LD_INT 2
46969: ARRAY
46970: PUSH
46971: LD_VAR 0 9
46975: LESS
46976: IFFALSE 47018
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46978: LD_ADDR_VAR 0 6
46982: PUSH
46983: LD_VAR 0 6
46987: PPUSH
46988: LD_VAR 0 6
46992: PUSH
46993: LD_INT 1
46995: PLUS
46996: PPUSH
46997: LD_VAR 0 7
47001: PUSH
47002: LD_VAR 0 9
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PPUSH
47011: CALL_OW 2
47015: ST_TO_ADDR
47016: GO 47098
// for j = 1 to result do
47018: LD_ADDR_VAR 0 8
47022: PUSH
47023: DOUBLE
47024: LD_INT 1
47026: DEC
47027: ST_TO_ADDR
47028: LD_VAR 0 6
47032: PUSH
47033: FOR_TO
47034: IFFALSE 47096
// begin if tmp < result [ j ] [ 2 ] then
47036: LD_VAR 0 9
47040: PUSH
47041: LD_VAR 0 6
47045: PUSH
47046: LD_VAR 0 8
47050: ARRAY
47051: PUSH
47052: LD_INT 2
47054: ARRAY
47055: LESS
47056: IFFALSE 47094
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47058: LD_ADDR_VAR 0 6
47062: PUSH
47063: LD_VAR 0 6
47067: PPUSH
47068: LD_VAR 0 8
47072: PPUSH
47073: LD_VAR 0 7
47077: PUSH
47078: LD_VAR 0 9
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PPUSH
47087: CALL_OW 2
47091: ST_TO_ADDR
// break ;
47092: GO 47096
// end ; end ;
47094: GO 47033
47096: POP
47097: POP
// end ; end ;
47098: GO 46897
47100: POP
47101: POP
// if result and not asc then
47102: LD_VAR 0 6
47106: PUSH
47107: LD_VAR 0 4
47111: NOT
47112: AND
47113: IFFALSE 47188
// begin tmp := result ;
47115: LD_ADDR_VAR 0 9
47119: PUSH
47120: LD_VAR 0 6
47124: ST_TO_ADDR
// for i = tmp downto 1 do
47125: LD_ADDR_VAR 0 7
47129: PUSH
47130: DOUBLE
47131: LD_VAR 0 9
47135: INC
47136: ST_TO_ADDR
47137: LD_INT 1
47139: PUSH
47140: FOR_DOWNTO
47141: IFFALSE 47186
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47143: LD_ADDR_VAR 0 6
47147: PUSH
47148: LD_VAR 0 6
47152: PPUSH
47153: LD_VAR 0 9
47157: PUSH
47158: LD_VAR 0 7
47162: MINUS
47163: PUSH
47164: LD_INT 1
47166: PLUS
47167: PPUSH
47168: LD_VAR 0 9
47172: PUSH
47173: LD_VAR 0 7
47177: ARRAY
47178: PPUSH
47179: CALL_OW 1
47183: ST_TO_ADDR
47184: GO 47140
47186: POP
47187: POP
// end ; tmp := [ ] ;
47188: LD_ADDR_VAR 0 9
47192: PUSH
47193: EMPTY
47194: ST_TO_ADDR
// if mode then
47195: LD_VAR 0 5
47199: IFFALSE 47268
// begin for i = 1 to result do
47201: LD_ADDR_VAR 0 7
47205: PUSH
47206: DOUBLE
47207: LD_INT 1
47209: DEC
47210: ST_TO_ADDR
47211: LD_VAR 0 6
47215: PUSH
47216: FOR_TO
47217: IFFALSE 47256
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47219: LD_ADDR_VAR 0 9
47223: PUSH
47224: LD_VAR 0 9
47228: PPUSH
47229: LD_VAR 0 7
47233: PPUSH
47234: LD_VAR 0 6
47238: PUSH
47239: LD_VAR 0 7
47243: ARRAY
47244: PUSH
47245: LD_INT 1
47247: ARRAY
47248: PPUSH
47249: CALL_OW 1
47253: ST_TO_ADDR
47254: GO 47216
47256: POP
47257: POP
// result := tmp ;
47258: LD_ADDR_VAR 0 6
47262: PUSH
47263: LD_VAR 0 9
47267: ST_TO_ADDR
// end ; end ;
47268: LD_VAR 0 6
47272: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47273: LD_INT 0
47275: PPUSH
47276: PPUSH
47277: PPUSH
47278: PPUSH
47279: PPUSH
47280: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47281: LD_ADDR_VAR 0 5
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: ST_TO_ADDR
// if not x or not y then
47303: LD_VAR 0 2
47307: NOT
47308: PUSH
47309: LD_VAR 0 3
47313: NOT
47314: OR
47315: IFFALSE 47319
// exit ;
47317: GO 48969
// if not range then
47319: LD_VAR 0 4
47323: NOT
47324: IFFALSE 47334
// range := 10 ;
47326: LD_ADDR_VAR 0 4
47330: PUSH
47331: LD_INT 10
47333: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47334: LD_ADDR_VAR 0 8
47338: PUSH
47339: LD_INT 81
47341: PUSH
47342: LD_VAR 0 1
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 92
47353: PUSH
47354: LD_VAR 0 2
47358: PUSH
47359: LD_VAR 0 3
47363: PUSH
47364: LD_VAR 0 4
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 3
47377: PUSH
47378: LD_INT 21
47380: PUSH
47381: LD_INT 3
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: PPUSH
47397: CALL_OW 69
47401: ST_TO_ADDR
// if not tmp then
47402: LD_VAR 0 8
47406: NOT
47407: IFFALSE 47411
// exit ;
47409: GO 48969
// for i in tmp do
47411: LD_ADDR_VAR 0 6
47415: PUSH
47416: LD_VAR 0 8
47420: PUSH
47421: FOR_IN
47422: IFFALSE 48944
// begin points := [ 0 , 0 , 0 ] ;
47424: LD_ADDR_VAR 0 9
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: LIST
47442: ST_TO_ADDR
// bpoints := 1 ;
47443: LD_ADDR_VAR 0 10
47447: PUSH
47448: LD_INT 1
47450: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47451: LD_VAR 0 6
47455: PPUSH
47456: CALL_OW 247
47460: PUSH
47461: LD_INT 1
47463: DOUBLE
47464: EQUAL
47465: IFTRUE 47469
47467: GO 48047
47469: POP
// begin if GetClass ( i ) = 1 then
47470: LD_VAR 0 6
47474: PPUSH
47475: CALL_OW 257
47479: PUSH
47480: LD_INT 1
47482: EQUAL
47483: IFFALSE 47504
// points := [ 10 , 5 , 3 ] ;
47485: LD_ADDR_VAR 0 9
47489: PUSH
47490: LD_INT 10
47492: PUSH
47493: LD_INT 5
47495: PUSH
47496: LD_INT 3
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47504: LD_VAR 0 6
47508: PPUSH
47509: CALL_OW 257
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 3
47519: PUSH
47520: LD_INT 4
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: IN
47528: IFFALSE 47549
// points := [ 3 , 2 , 1 ] ;
47530: LD_ADDR_VAR 0 9
47534: PUSH
47535: LD_INT 3
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: LIST
47548: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47549: LD_VAR 0 6
47553: PPUSH
47554: CALL_OW 257
47558: PUSH
47559: LD_INT 5
47561: EQUAL
47562: IFFALSE 47583
// points := [ 130 , 5 , 2 ] ;
47564: LD_ADDR_VAR 0 9
47568: PUSH
47569: LD_INT 130
47571: PUSH
47572: LD_INT 5
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: LIST
47582: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47583: LD_VAR 0 6
47587: PPUSH
47588: CALL_OW 257
47592: PUSH
47593: LD_INT 8
47595: EQUAL
47596: IFFALSE 47617
// points := [ 35 , 35 , 30 ] ;
47598: LD_ADDR_VAR 0 9
47602: PUSH
47603: LD_INT 35
47605: PUSH
47606: LD_INT 35
47608: PUSH
47609: LD_INT 30
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: LIST
47616: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47617: LD_VAR 0 6
47621: PPUSH
47622: CALL_OW 257
47626: PUSH
47627: LD_INT 9
47629: EQUAL
47630: IFFALSE 47651
// points := [ 20 , 55 , 40 ] ;
47632: LD_ADDR_VAR 0 9
47636: PUSH
47637: LD_INT 20
47639: PUSH
47640: LD_INT 55
47642: PUSH
47643: LD_INT 40
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: LIST
47650: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47651: LD_VAR 0 6
47655: PPUSH
47656: CALL_OW 257
47660: PUSH
47661: LD_INT 12
47663: PUSH
47664: LD_INT 16
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: IN
47671: IFFALSE 47692
// points := [ 5 , 3 , 2 ] ;
47673: LD_ADDR_VAR 0 9
47677: PUSH
47678: LD_INT 5
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: LIST
47691: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47692: LD_VAR 0 6
47696: PPUSH
47697: CALL_OW 257
47701: PUSH
47702: LD_INT 17
47704: EQUAL
47705: IFFALSE 47726
// points := [ 100 , 50 , 75 ] ;
47707: LD_ADDR_VAR 0 9
47711: PUSH
47712: LD_INT 100
47714: PUSH
47715: LD_INT 50
47717: PUSH
47718: LD_INT 75
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: LIST
47725: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47726: LD_VAR 0 6
47730: PPUSH
47731: CALL_OW 257
47735: PUSH
47736: LD_INT 15
47738: EQUAL
47739: IFFALSE 47760
// points := [ 10 , 5 , 3 ] ;
47741: LD_ADDR_VAR 0 9
47745: PUSH
47746: LD_INT 10
47748: PUSH
47749: LD_INT 5
47751: PUSH
47752: LD_INT 3
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47760: LD_VAR 0 6
47764: PPUSH
47765: CALL_OW 257
47769: PUSH
47770: LD_INT 14
47772: EQUAL
47773: IFFALSE 47794
// points := [ 10 , 0 , 0 ] ;
47775: LD_ADDR_VAR 0 9
47779: PUSH
47780: LD_INT 10
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47794: LD_VAR 0 6
47798: PPUSH
47799: CALL_OW 257
47803: PUSH
47804: LD_INT 11
47806: EQUAL
47807: IFFALSE 47828
// points := [ 30 , 10 , 5 ] ;
47809: LD_ADDR_VAR 0 9
47813: PUSH
47814: LD_INT 30
47816: PUSH
47817: LD_INT 10
47819: PUSH
47820: LD_INT 5
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: LIST
47827: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47828: LD_VAR 0 1
47832: PPUSH
47833: LD_INT 5
47835: PPUSH
47836: CALL_OW 321
47840: PUSH
47841: LD_INT 2
47843: EQUAL
47844: IFFALSE 47861
// bpoints := bpoints * 1.8 ;
47846: LD_ADDR_VAR 0 10
47850: PUSH
47851: LD_VAR 0 10
47855: PUSH
47856: LD_REAL  1.80000000000000E+0000
47859: MUL
47860: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47861: LD_VAR 0 6
47865: PPUSH
47866: CALL_OW 257
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 3
47879: PUSH
47880: LD_INT 4
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: IN
47889: PUSH
47890: LD_VAR 0 1
47894: PPUSH
47895: LD_INT 51
47897: PPUSH
47898: CALL_OW 321
47902: PUSH
47903: LD_INT 2
47905: EQUAL
47906: AND
47907: IFFALSE 47924
// bpoints := bpoints * 1.2 ;
47909: LD_ADDR_VAR 0 10
47913: PUSH
47914: LD_VAR 0 10
47918: PUSH
47919: LD_REAL  1.20000000000000E+0000
47922: MUL
47923: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47924: LD_VAR 0 6
47928: PPUSH
47929: CALL_OW 257
47933: PUSH
47934: LD_INT 5
47936: PUSH
47937: LD_INT 7
47939: PUSH
47940: LD_INT 9
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: IN
47948: PUSH
47949: LD_VAR 0 1
47953: PPUSH
47954: LD_INT 52
47956: PPUSH
47957: CALL_OW 321
47961: PUSH
47962: LD_INT 2
47964: EQUAL
47965: AND
47966: IFFALSE 47983
// bpoints := bpoints * 1.5 ;
47968: LD_ADDR_VAR 0 10
47972: PUSH
47973: LD_VAR 0 10
47977: PUSH
47978: LD_REAL  1.50000000000000E+0000
47981: MUL
47982: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47983: LD_VAR 0 1
47987: PPUSH
47988: LD_INT 66
47990: PPUSH
47991: CALL_OW 321
47995: PUSH
47996: LD_INT 2
47998: EQUAL
47999: IFFALSE 48016
// bpoints := bpoints * 1.1 ;
48001: LD_ADDR_VAR 0 10
48005: PUSH
48006: LD_VAR 0 10
48010: PUSH
48011: LD_REAL  1.10000000000000E+0000
48014: MUL
48015: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48016: LD_ADDR_VAR 0 10
48020: PUSH
48021: LD_VAR 0 10
48025: PUSH
48026: LD_VAR 0 6
48030: PPUSH
48031: LD_INT 1
48033: PPUSH
48034: CALL_OW 259
48038: PUSH
48039: LD_REAL  1.15000000000000E+0000
48042: MUL
48043: MUL
48044: ST_TO_ADDR
// end ; unit_vehicle :
48045: GO 48873
48047: LD_INT 2
48049: DOUBLE
48050: EQUAL
48051: IFTRUE 48055
48053: GO 48861
48055: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48056: LD_VAR 0 6
48060: PPUSH
48061: CALL_OW 264
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 42
48071: PUSH
48072: LD_INT 24
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: IN
48080: IFFALSE 48101
// points := [ 25 , 5 , 3 ] ;
48082: LD_ADDR_VAR 0 9
48086: PUSH
48087: LD_INT 25
48089: PUSH
48090: LD_INT 5
48092: PUSH
48093: LD_INT 3
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48101: LD_VAR 0 6
48105: PPUSH
48106: CALL_OW 264
48110: PUSH
48111: LD_INT 4
48113: PUSH
48114: LD_INT 43
48116: PUSH
48117: LD_INT 25
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: IN
48125: IFFALSE 48146
// points := [ 40 , 15 , 5 ] ;
48127: LD_ADDR_VAR 0 9
48131: PUSH
48132: LD_INT 40
48134: PUSH
48135: LD_INT 15
48137: PUSH
48138: LD_INT 5
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: LIST
48145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48146: LD_VAR 0 6
48150: PPUSH
48151: CALL_OW 264
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: LD_INT 23
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: IN
48166: IFFALSE 48187
// points := [ 7 , 25 , 8 ] ;
48168: LD_ADDR_VAR 0 9
48172: PUSH
48173: LD_INT 7
48175: PUSH
48176: LD_INT 25
48178: PUSH
48179: LD_INT 8
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48187: LD_VAR 0 6
48191: PPUSH
48192: CALL_OW 264
48196: PUSH
48197: LD_INT 5
48199: PUSH
48200: LD_INT 27
48202: PUSH
48203: LD_INT 44
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: IN
48211: IFFALSE 48232
// points := [ 14 , 50 , 16 ] ;
48213: LD_ADDR_VAR 0 9
48217: PUSH
48218: LD_INT 14
48220: PUSH
48221: LD_INT 50
48223: PUSH
48224: LD_INT 16
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: LIST
48231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48232: LD_VAR 0 6
48236: PPUSH
48237: CALL_OW 264
48241: PUSH
48242: LD_INT 6
48244: PUSH
48245: LD_INT 46
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: IN
48252: IFFALSE 48273
// points := [ 32 , 120 , 70 ] ;
48254: LD_ADDR_VAR 0 9
48258: PUSH
48259: LD_INT 32
48261: PUSH
48262: LD_INT 120
48264: PUSH
48265: LD_INT 70
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48273: LD_VAR 0 6
48277: PPUSH
48278: CALL_OW 264
48282: PUSH
48283: LD_INT 7
48285: PUSH
48286: LD_INT 28
48288: PUSH
48289: LD_INT 45
48291: PUSH
48292: LD_INT 92
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: IN
48301: IFFALSE 48322
// points := [ 35 , 20 , 45 ] ;
48303: LD_ADDR_VAR 0 9
48307: PUSH
48308: LD_INT 35
48310: PUSH
48311: LD_INT 20
48313: PUSH
48314: LD_INT 45
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48322: LD_VAR 0 6
48326: PPUSH
48327: CALL_OW 264
48331: PUSH
48332: LD_INT 47
48334: PUSH
48335: EMPTY
48336: LIST
48337: IN
48338: IFFALSE 48359
// points := [ 67 , 45 , 75 ] ;
48340: LD_ADDR_VAR 0 9
48344: PUSH
48345: LD_INT 67
48347: PUSH
48348: LD_INT 45
48350: PUSH
48351: LD_INT 75
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48359: LD_VAR 0 6
48363: PPUSH
48364: CALL_OW 264
48368: PUSH
48369: LD_INT 26
48371: PUSH
48372: EMPTY
48373: LIST
48374: IN
48375: IFFALSE 48396
// points := [ 120 , 30 , 80 ] ;
48377: LD_ADDR_VAR 0 9
48381: PUSH
48382: LD_INT 120
48384: PUSH
48385: LD_INT 30
48387: PUSH
48388: LD_INT 80
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: LIST
48395: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48396: LD_VAR 0 6
48400: PPUSH
48401: CALL_OW 264
48405: PUSH
48406: LD_INT 22
48408: PUSH
48409: EMPTY
48410: LIST
48411: IN
48412: IFFALSE 48433
// points := [ 40 , 1 , 1 ] ;
48414: LD_ADDR_VAR 0 9
48418: PUSH
48419: LD_INT 40
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48433: LD_VAR 0 6
48437: PPUSH
48438: CALL_OW 264
48442: PUSH
48443: LD_INT 29
48445: PUSH
48446: EMPTY
48447: LIST
48448: IN
48449: IFFALSE 48470
// points := [ 70 , 200 , 400 ] ;
48451: LD_ADDR_VAR 0 9
48455: PUSH
48456: LD_INT 70
48458: PUSH
48459: LD_INT 200
48461: PUSH
48462: LD_INT 400
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48470: LD_VAR 0 6
48474: PPUSH
48475: CALL_OW 264
48479: PUSH
48480: LD_INT 14
48482: PUSH
48483: LD_INT 53
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: IN
48490: IFFALSE 48511
// points := [ 40 , 10 , 20 ] ;
48492: LD_ADDR_VAR 0 9
48496: PUSH
48497: LD_INT 40
48499: PUSH
48500: LD_INT 10
48502: PUSH
48503: LD_INT 20
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48511: LD_VAR 0 6
48515: PPUSH
48516: CALL_OW 264
48520: PUSH
48521: LD_INT 9
48523: PUSH
48524: EMPTY
48525: LIST
48526: IN
48527: IFFALSE 48548
// points := [ 5 , 70 , 20 ] ;
48529: LD_ADDR_VAR 0 9
48533: PUSH
48534: LD_INT 5
48536: PUSH
48537: LD_INT 70
48539: PUSH
48540: LD_INT 20
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48548: LD_VAR 0 6
48552: PPUSH
48553: CALL_OW 264
48557: PUSH
48558: LD_INT 10
48560: PUSH
48561: EMPTY
48562: LIST
48563: IN
48564: IFFALSE 48585
// points := [ 35 , 110 , 70 ] ;
48566: LD_ADDR_VAR 0 9
48570: PUSH
48571: LD_INT 35
48573: PUSH
48574: LD_INT 110
48576: PUSH
48577: LD_INT 70
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48585: LD_VAR 0 6
48589: PPUSH
48590: CALL_OW 265
48594: PUSH
48595: LD_INT 25
48597: EQUAL
48598: IFFALSE 48619
// points := [ 80 , 65 , 100 ] ;
48600: LD_ADDR_VAR 0 9
48604: PUSH
48605: LD_INT 80
48607: PUSH
48608: LD_INT 65
48610: PUSH
48611: LD_INT 100
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48619: LD_VAR 0 6
48623: PPUSH
48624: CALL_OW 263
48628: PUSH
48629: LD_INT 1
48631: EQUAL
48632: IFFALSE 48667
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48634: LD_ADDR_VAR 0 10
48638: PUSH
48639: LD_VAR 0 10
48643: PUSH
48644: LD_VAR 0 6
48648: PPUSH
48649: CALL_OW 311
48653: PPUSH
48654: LD_INT 3
48656: PPUSH
48657: CALL_OW 259
48661: PUSH
48662: LD_INT 4
48664: MUL
48665: MUL
48666: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48667: LD_VAR 0 6
48671: PPUSH
48672: CALL_OW 263
48676: PUSH
48677: LD_INT 2
48679: EQUAL
48680: IFFALSE 48731
// begin j := IsControledBy ( i ) ;
48682: LD_ADDR_VAR 0 7
48686: PUSH
48687: LD_VAR 0 6
48691: PPUSH
48692: CALL_OW 312
48696: ST_TO_ADDR
// if j then
48697: LD_VAR 0 7
48701: IFFALSE 48731
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48703: LD_ADDR_VAR 0 10
48707: PUSH
48708: LD_VAR 0 10
48712: PUSH
48713: LD_VAR 0 7
48717: PPUSH
48718: LD_INT 3
48720: PPUSH
48721: CALL_OW 259
48725: PUSH
48726: LD_INT 3
48728: MUL
48729: MUL
48730: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48731: LD_VAR 0 6
48735: PPUSH
48736: CALL_OW 264
48740: PUSH
48741: LD_INT 5
48743: PUSH
48744: LD_INT 6
48746: PUSH
48747: LD_INT 46
48749: PUSH
48750: LD_INT 44
48752: PUSH
48753: LD_INT 47
48755: PUSH
48756: LD_INT 45
48758: PUSH
48759: LD_INT 28
48761: PUSH
48762: LD_INT 7
48764: PUSH
48765: LD_INT 27
48767: PUSH
48768: LD_INT 29
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: IN
48783: PUSH
48784: LD_VAR 0 1
48788: PPUSH
48789: LD_INT 52
48791: PPUSH
48792: CALL_OW 321
48796: PUSH
48797: LD_INT 2
48799: EQUAL
48800: AND
48801: IFFALSE 48818
// bpoints := bpoints * 1.2 ;
48803: LD_ADDR_VAR 0 10
48807: PUSH
48808: LD_VAR 0 10
48812: PUSH
48813: LD_REAL  1.20000000000000E+0000
48816: MUL
48817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48818: LD_VAR 0 6
48822: PPUSH
48823: CALL_OW 264
48827: PUSH
48828: LD_INT 6
48830: PUSH
48831: LD_INT 46
48833: PUSH
48834: LD_INT 47
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: LIST
48841: IN
48842: IFFALSE 48859
// bpoints := bpoints * 1.2 ;
48844: LD_ADDR_VAR 0 10
48848: PUSH
48849: LD_VAR 0 10
48853: PUSH
48854: LD_REAL  1.20000000000000E+0000
48857: MUL
48858: ST_TO_ADDR
// end ; unit_building :
48859: GO 48873
48861: LD_INT 3
48863: DOUBLE
48864: EQUAL
48865: IFTRUE 48869
48867: GO 48872
48869: POP
// ; end ;
48870: GO 48873
48872: POP
// for j = 1 to 3 do
48873: LD_ADDR_VAR 0 7
48877: PUSH
48878: DOUBLE
48879: LD_INT 1
48881: DEC
48882: ST_TO_ADDR
48883: LD_INT 3
48885: PUSH
48886: FOR_TO
48887: IFFALSE 48940
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48889: LD_ADDR_VAR 0 5
48893: PUSH
48894: LD_VAR 0 5
48898: PPUSH
48899: LD_VAR 0 7
48903: PPUSH
48904: LD_VAR 0 5
48908: PUSH
48909: LD_VAR 0 7
48913: ARRAY
48914: PUSH
48915: LD_VAR 0 9
48919: PUSH
48920: LD_VAR 0 7
48924: ARRAY
48925: PUSH
48926: LD_VAR 0 10
48930: MUL
48931: PLUS
48932: PPUSH
48933: CALL_OW 1
48937: ST_TO_ADDR
48938: GO 48886
48940: POP
48941: POP
// end ;
48942: GO 47421
48944: POP
48945: POP
// result := Replace ( result , 4 , tmp ) ;
48946: LD_ADDR_VAR 0 5
48950: PUSH
48951: LD_VAR 0 5
48955: PPUSH
48956: LD_INT 4
48958: PPUSH
48959: LD_VAR 0 8
48963: PPUSH
48964: CALL_OW 1
48968: ST_TO_ADDR
// end ;
48969: LD_VAR 0 5
48973: RET
// export function DangerAtRange ( unit , range ) ; begin
48974: LD_INT 0
48976: PPUSH
// if not unit then
48977: LD_VAR 0 1
48981: NOT
48982: IFFALSE 48986
// exit ;
48984: GO 49031
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48986: LD_ADDR_VAR 0 3
48990: PUSH
48991: LD_VAR 0 1
48995: PPUSH
48996: CALL_OW 255
49000: PPUSH
49001: LD_VAR 0 1
49005: PPUSH
49006: CALL_OW 250
49010: PPUSH
49011: LD_VAR 0 1
49015: PPUSH
49016: CALL_OW 251
49020: PPUSH
49021: LD_VAR 0 2
49025: PPUSH
49026: CALL 47273 0 4
49030: ST_TO_ADDR
// end ;
49031: LD_VAR 0 3
49035: RET
// export function DangerInArea ( side , area ) ; begin
49036: LD_INT 0
49038: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49039: LD_ADDR_VAR 0 3
49043: PUSH
49044: LD_VAR 0 2
49048: PPUSH
49049: LD_INT 81
49051: PUSH
49052: LD_VAR 0 1
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PPUSH
49061: CALL_OW 70
49065: ST_TO_ADDR
// end ;
49066: LD_VAR 0 3
49070: RET
// export function IsExtension ( b ) ; begin
49071: LD_INT 0
49073: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49074: LD_ADDR_VAR 0 2
49078: PUSH
49079: LD_VAR 0 1
49083: PUSH
49084: LD_INT 23
49086: PUSH
49087: LD_INT 20
49089: PUSH
49090: LD_INT 22
49092: PUSH
49093: LD_INT 17
49095: PUSH
49096: LD_INT 24
49098: PUSH
49099: LD_INT 21
49101: PUSH
49102: LD_INT 19
49104: PUSH
49105: LD_INT 16
49107: PUSH
49108: LD_INT 25
49110: PUSH
49111: LD_INT 18
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: IN
49126: ST_TO_ADDR
// end ;
49127: LD_VAR 0 2
49131: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49132: LD_INT 0
49134: PPUSH
49135: PPUSH
49136: PPUSH
// result := [ ] ;
49137: LD_ADDR_VAR 0 4
49141: PUSH
49142: EMPTY
49143: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49144: LD_ADDR_VAR 0 5
49148: PUSH
49149: LD_VAR 0 2
49153: PPUSH
49154: LD_INT 21
49156: PUSH
49157: LD_INT 3
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PPUSH
49164: CALL_OW 70
49168: ST_TO_ADDR
// if not tmp then
49169: LD_VAR 0 5
49173: NOT
49174: IFFALSE 49178
// exit ;
49176: GO 49242
// if checkLink then
49178: LD_VAR 0 3
49182: IFFALSE 49232
// begin for i in tmp do
49184: LD_ADDR_VAR 0 6
49188: PUSH
49189: LD_VAR 0 5
49193: PUSH
49194: FOR_IN
49195: IFFALSE 49230
// if GetBase ( i ) <> base then
49197: LD_VAR 0 6
49201: PPUSH
49202: CALL_OW 274
49206: PUSH
49207: LD_VAR 0 1
49211: NONEQUAL
49212: IFFALSE 49228
// ComLinkToBase ( base , i ) ;
49214: LD_VAR 0 1
49218: PPUSH
49219: LD_VAR 0 6
49223: PPUSH
49224: CALL_OW 169
49228: GO 49194
49230: POP
49231: POP
// end ; result := tmp ;
49232: LD_ADDR_VAR 0 4
49236: PUSH
49237: LD_VAR 0 5
49241: ST_TO_ADDR
// end ;
49242: LD_VAR 0 4
49246: RET
// export function ComComplete ( units , b ) ; var i ; begin
49247: LD_INT 0
49249: PPUSH
49250: PPUSH
// if not units then
49251: LD_VAR 0 1
49255: NOT
49256: IFFALSE 49260
// exit ;
49258: GO 49350
// for i in units do
49260: LD_ADDR_VAR 0 4
49264: PUSH
49265: LD_VAR 0 1
49269: PUSH
49270: FOR_IN
49271: IFFALSE 49348
// if BuildingStatus ( b ) = bs_build then
49273: LD_VAR 0 2
49277: PPUSH
49278: CALL_OW 461
49282: PUSH
49283: LD_INT 1
49285: EQUAL
49286: IFFALSE 49346
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49288: LD_VAR 0 4
49292: PPUSH
49293: LD_STRING h
49295: PUSH
49296: LD_VAR 0 2
49300: PPUSH
49301: CALL_OW 250
49305: PUSH
49306: LD_VAR 0 2
49310: PPUSH
49311: CALL_OW 251
49315: PUSH
49316: LD_VAR 0 2
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: PUSH
49339: EMPTY
49340: LIST
49341: PPUSH
49342: CALL_OW 446
49346: GO 49270
49348: POP
49349: POP
// end ;
49350: LD_VAR 0 3
49354: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49355: LD_INT 0
49357: PPUSH
49358: PPUSH
49359: PPUSH
49360: PPUSH
49361: PPUSH
49362: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49363: LD_VAR 0 1
49367: NOT
49368: PUSH
49369: LD_VAR 0 1
49373: PPUSH
49374: CALL_OW 263
49378: PUSH
49379: LD_INT 2
49381: NONEQUAL
49382: OR
49383: IFFALSE 49387
// exit ;
49385: GO 49703
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49387: LD_ADDR_VAR 0 6
49391: PUSH
49392: LD_INT 22
49394: PUSH
49395: LD_VAR 0 1
49399: PPUSH
49400: CALL_OW 255
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: LD_INT 30
49414: PUSH
49415: LD_INT 36
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 34
49424: PUSH
49425: LD_INT 31
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: LIST
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PPUSH
49441: CALL_OW 69
49445: ST_TO_ADDR
// if not tmp then
49446: LD_VAR 0 6
49450: NOT
49451: IFFALSE 49455
// exit ;
49453: GO 49703
// result := [ ] ;
49455: LD_ADDR_VAR 0 2
49459: PUSH
49460: EMPTY
49461: ST_TO_ADDR
// for i in tmp do
49462: LD_ADDR_VAR 0 3
49466: PUSH
49467: LD_VAR 0 6
49471: PUSH
49472: FOR_IN
49473: IFFALSE 49544
// begin t := UnitsInside ( i ) ;
49475: LD_ADDR_VAR 0 4
49479: PUSH
49480: LD_VAR 0 3
49484: PPUSH
49485: CALL_OW 313
49489: ST_TO_ADDR
// if t then
49490: LD_VAR 0 4
49494: IFFALSE 49542
// for j in t do
49496: LD_ADDR_VAR 0 7
49500: PUSH
49501: LD_VAR 0 4
49505: PUSH
49506: FOR_IN
49507: IFFALSE 49540
// result := Replace ( result , result + 1 , j ) ;
49509: LD_ADDR_VAR 0 2
49513: PUSH
49514: LD_VAR 0 2
49518: PPUSH
49519: LD_VAR 0 2
49523: PUSH
49524: LD_INT 1
49526: PLUS
49527: PPUSH
49528: LD_VAR 0 7
49532: PPUSH
49533: CALL_OW 1
49537: ST_TO_ADDR
49538: GO 49506
49540: POP
49541: POP
// end ;
49542: GO 49472
49544: POP
49545: POP
// if not result then
49546: LD_VAR 0 2
49550: NOT
49551: IFFALSE 49555
// exit ;
49553: GO 49703
// mech := result [ 1 ] ;
49555: LD_ADDR_VAR 0 5
49559: PUSH
49560: LD_VAR 0 2
49564: PUSH
49565: LD_INT 1
49567: ARRAY
49568: ST_TO_ADDR
// if result > 1 then
49569: LD_VAR 0 2
49573: PUSH
49574: LD_INT 1
49576: GREATER
49577: IFFALSE 49689
// begin for i = 2 to result do
49579: LD_ADDR_VAR 0 3
49583: PUSH
49584: DOUBLE
49585: LD_INT 2
49587: DEC
49588: ST_TO_ADDR
49589: LD_VAR 0 2
49593: PUSH
49594: FOR_TO
49595: IFFALSE 49687
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49597: LD_ADDR_VAR 0 4
49601: PUSH
49602: LD_VAR 0 2
49606: PUSH
49607: LD_VAR 0 3
49611: ARRAY
49612: PPUSH
49613: LD_INT 3
49615: PPUSH
49616: CALL_OW 259
49620: PUSH
49621: LD_VAR 0 2
49625: PUSH
49626: LD_VAR 0 3
49630: ARRAY
49631: PPUSH
49632: CALL_OW 432
49636: MINUS
49637: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49638: LD_VAR 0 4
49642: PUSH
49643: LD_VAR 0 5
49647: PPUSH
49648: LD_INT 3
49650: PPUSH
49651: CALL_OW 259
49655: PUSH
49656: LD_VAR 0 5
49660: PPUSH
49661: CALL_OW 432
49665: MINUS
49666: GREATEREQUAL
49667: IFFALSE 49685
// mech := result [ i ] ;
49669: LD_ADDR_VAR 0 5
49673: PUSH
49674: LD_VAR 0 2
49678: PUSH
49679: LD_VAR 0 3
49683: ARRAY
49684: ST_TO_ADDR
// end ;
49685: GO 49594
49687: POP
49688: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49689: LD_VAR 0 1
49693: PPUSH
49694: LD_VAR 0 5
49698: PPUSH
49699: CALL_OW 135
// end ;
49703: LD_VAR 0 2
49707: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49708: LD_INT 0
49710: PPUSH
49711: PPUSH
49712: PPUSH
49713: PPUSH
49714: PPUSH
49715: PPUSH
49716: PPUSH
49717: PPUSH
49718: PPUSH
49719: PPUSH
49720: PPUSH
49721: PPUSH
49722: PPUSH
// result := [ ] ;
49723: LD_ADDR_VAR 0 7
49727: PUSH
49728: EMPTY
49729: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49730: LD_VAR 0 1
49734: PPUSH
49735: CALL_OW 266
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: IN
49750: NOT
49751: IFFALSE 49755
// exit ;
49753: GO 51389
// if name then
49755: LD_VAR 0 3
49759: IFFALSE 49775
// SetBName ( base_dep , name ) ;
49761: LD_VAR 0 1
49765: PPUSH
49766: LD_VAR 0 3
49770: PPUSH
49771: CALL_OW 500
// base := GetBase ( base_dep ) ;
49775: LD_ADDR_VAR 0 15
49779: PUSH
49780: LD_VAR 0 1
49784: PPUSH
49785: CALL_OW 274
49789: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49790: LD_ADDR_VAR 0 16
49794: PUSH
49795: LD_VAR 0 1
49799: PPUSH
49800: CALL_OW 255
49804: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49805: LD_ADDR_VAR 0 17
49809: PUSH
49810: LD_VAR 0 1
49814: PPUSH
49815: CALL_OW 248
49819: ST_TO_ADDR
// if sources then
49820: LD_VAR 0 5
49824: IFFALSE 49871
// for i = 1 to 3 do
49826: LD_ADDR_VAR 0 8
49830: PUSH
49831: DOUBLE
49832: LD_INT 1
49834: DEC
49835: ST_TO_ADDR
49836: LD_INT 3
49838: PUSH
49839: FOR_TO
49840: IFFALSE 49869
// AddResourceType ( base , i , sources [ i ] ) ;
49842: LD_VAR 0 15
49846: PPUSH
49847: LD_VAR 0 8
49851: PPUSH
49852: LD_VAR 0 5
49856: PUSH
49857: LD_VAR 0 8
49861: ARRAY
49862: PPUSH
49863: CALL_OW 276
49867: GO 49839
49869: POP
49870: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49871: LD_ADDR_VAR 0 18
49875: PUSH
49876: LD_VAR 0 15
49880: PPUSH
49881: LD_VAR 0 2
49885: PPUSH
49886: LD_INT 1
49888: PPUSH
49889: CALL 49132 0 3
49893: ST_TO_ADDR
// InitHc ;
49894: CALL_OW 19
// InitUc ;
49898: CALL_OW 18
// uc_side := side ;
49902: LD_ADDR_OWVAR 20
49906: PUSH
49907: LD_VAR 0 16
49911: ST_TO_ADDR
// uc_nation := nation ;
49912: LD_ADDR_OWVAR 21
49916: PUSH
49917: LD_VAR 0 17
49921: ST_TO_ADDR
// if buildings then
49922: LD_VAR 0 18
49926: IFFALSE 51248
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49928: LD_ADDR_VAR 0 19
49932: PUSH
49933: LD_VAR 0 18
49937: PPUSH
49938: LD_INT 2
49940: PUSH
49941: LD_INT 30
49943: PUSH
49944: LD_INT 29
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 30
49953: PUSH
49954: LD_INT 30
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: LIST
49965: PPUSH
49966: CALL_OW 72
49970: ST_TO_ADDR
// if tmp then
49971: LD_VAR 0 19
49975: IFFALSE 50023
// for i in tmp do
49977: LD_ADDR_VAR 0 8
49981: PUSH
49982: LD_VAR 0 19
49986: PUSH
49987: FOR_IN
49988: IFFALSE 50021
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49990: LD_VAR 0 8
49994: PPUSH
49995: CALL_OW 250
49999: PPUSH
50000: LD_VAR 0 8
50004: PPUSH
50005: CALL_OW 251
50009: PPUSH
50010: LD_VAR 0 16
50014: PPUSH
50015: CALL_OW 441
50019: GO 49987
50021: POP
50022: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50023: LD_VAR 0 18
50027: PPUSH
50028: LD_INT 2
50030: PUSH
50031: LD_INT 30
50033: PUSH
50034: LD_INT 32
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 30
50043: PUSH
50044: LD_INT 33
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: LIST
50055: PPUSH
50056: CALL_OW 72
50060: IFFALSE 50148
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50062: LD_ADDR_VAR 0 8
50066: PUSH
50067: LD_VAR 0 18
50071: PPUSH
50072: LD_INT 2
50074: PUSH
50075: LD_INT 30
50077: PUSH
50078: LD_INT 32
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 30
50087: PUSH
50088: LD_INT 33
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: LIST
50099: PPUSH
50100: CALL_OW 72
50104: PUSH
50105: FOR_IN
50106: IFFALSE 50146
// begin if not GetBWeapon ( i ) then
50108: LD_VAR 0 8
50112: PPUSH
50113: CALL_OW 269
50117: NOT
50118: IFFALSE 50144
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50120: LD_VAR 0 8
50124: PPUSH
50125: LD_VAR 0 8
50129: PPUSH
50130: LD_VAR 0 2
50134: PPUSH
50135: CALL 51394 0 2
50139: PPUSH
50140: CALL_OW 431
// end ;
50144: GO 50105
50146: POP
50147: POP
// end ; for i = 1 to personel do
50148: LD_ADDR_VAR 0 8
50152: PUSH
50153: DOUBLE
50154: LD_INT 1
50156: DEC
50157: ST_TO_ADDR
50158: LD_VAR 0 6
50162: PUSH
50163: FOR_TO
50164: IFFALSE 51228
// begin if i > 4 then
50166: LD_VAR 0 8
50170: PUSH
50171: LD_INT 4
50173: GREATER
50174: IFFALSE 50178
// break ;
50176: GO 51228
// case i of 1 :
50178: LD_VAR 0 8
50182: PUSH
50183: LD_INT 1
50185: DOUBLE
50186: EQUAL
50187: IFTRUE 50191
50189: GO 50271
50191: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50192: LD_ADDR_VAR 0 12
50196: PUSH
50197: LD_VAR 0 18
50201: PPUSH
50202: LD_INT 22
50204: PUSH
50205: LD_VAR 0 16
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 58
50216: PUSH
50217: EMPTY
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: LD_INT 30
50225: PUSH
50226: LD_INT 32
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 30
50235: PUSH
50236: LD_INT 4
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 30
50245: PUSH
50246: LD_INT 5
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: LIST
50263: PPUSH
50264: CALL_OW 72
50268: ST_TO_ADDR
50269: GO 50493
50271: LD_INT 2
50273: DOUBLE
50274: EQUAL
50275: IFTRUE 50279
50277: GO 50341
50279: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50280: LD_ADDR_VAR 0 12
50284: PUSH
50285: LD_VAR 0 18
50289: PPUSH
50290: LD_INT 22
50292: PUSH
50293: LD_VAR 0 16
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 30
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 30
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PPUSH
50334: CALL_OW 72
50338: ST_TO_ADDR
50339: GO 50493
50341: LD_INT 3
50343: DOUBLE
50344: EQUAL
50345: IFTRUE 50349
50347: GO 50411
50349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50350: LD_ADDR_VAR 0 12
50354: PUSH
50355: LD_VAR 0 18
50359: PPUSH
50360: LD_INT 22
50362: PUSH
50363: LD_VAR 0 16
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: LD_INT 30
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 30
50387: PUSH
50388: LD_INT 3
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PPUSH
50404: CALL_OW 72
50408: ST_TO_ADDR
50409: GO 50493
50411: LD_INT 4
50413: DOUBLE
50414: EQUAL
50415: IFTRUE 50419
50417: GO 50492
50419: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50420: LD_ADDR_VAR 0 12
50424: PUSH
50425: LD_VAR 0 18
50429: PPUSH
50430: LD_INT 22
50432: PUSH
50433: LD_VAR 0 16
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 30
50447: PUSH
50448: LD_INT 6
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 30
50457: PUSH
50458: LD_INT 7
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 30
50467: PUSH
50468: LD_INT 8
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PPUSH
50485: CALL_OW 72
50489: ST_TO_ADDR
50490: GO 50493
50492: POP
// if i = 1 then
50493: LD_VAR 0 8
50497: PUSH
50498: LD_INT 1
50500: EQUAL
50501: IFFALSE 50612
// begin tmp := [ ] ;
50503: LD_ADDR_VAR 0 19
50507: PUSH
50508: EMPTY
50509: ST_TO_ADDR
// for j in f do
50510: LD_ADDR_VAR 0 9
50514: PUSH
50515: LD_VAR 0 12
50519: PUSH
50520: FOR_IN
50521: IFFALSE 50594
// if GetBType ( j ) = b_bunker then
50523: LD_VAR 0 9
50527: PPUSH
50528: CALL_OW 266
50532: PUSH
50533: LD_INT 32
50535: EQUAL
50536: IFFALSE 50563
// tmp := Insert ( tmp , 1 , j ) else
50538: LD_ADDR_VAR 0 19
50542: PUSH
50543: LD_VAR 0 19
50547: PPUSH
50548: LD_INT 1
50550: PPUSH
50551: LD_VAR 0 9
50555: PPUSH
50556: CALL_OW 2
50560: ST_TO_ADDR
50561: GO 50592
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50563: LD_ADDR_VAR 0 19
50567: PUSH
50568: LD_VAR 0 19
50572: PPUSH
50573: LD_VAR 0 19
50577: PUSH
50578: LD_INT 1
50580: PLUS
50581: PPUSH
50582: LD_VAR 0 9
50586: PPUSH
50587: CALL_OW 2
50591: ST_TO_ADDR
50592: GO 50520
50594: POP
50595: POP
// if tmp then
50596: LD_VAR 0 19
50600: IFFALSE 50612
// f := tmp ;
50602: LD_ADDR_VAR 0 12
50606: PUSH
50607: LD_VAR 0 19
50611: ST_TO_ADDR
// end ; x := personel [ i ] ;
50612: LD_ADDR_VAR 0 13
50616: PUSH
50617: LD_VAR 0 6
50621: PUSH
50622: LD_VAR 0 8
50626: ARRAY
50627: ST_TO_ADDR
// if x = - 1 then
50628: LD_VAR 0 13
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: EQUAL
50637: IFFALSE 50846
// begin for j in f do
50639: LD_ADDR_VAR 0 9
50643: PUSH
50644: LD_VAR 0 12
50648: PUSH
50649: FOR_IN
50650: IFFALSE 50842
// repeat InitHc ;
50652: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50656: LD_VAR 0 9
50660: PPUSH
50661: CALL_OW 266
50665: PUSH
50666: LD_INT 5
50668: EQUAL
50669: IFFALSE 50739
// begin if UnitsInside ( j ) < 3 then
50671: LD_VAR 0 9
50675: PPUSH
50676: CALL_OW 313
50680: PUSH
50681: LD_INT 3
50683: LESS
50684: IFFALSE 50720
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50686: LD_INT 0
50688: PPUSH
50689: LD_INT 5
50691: PUSH
50692: LD_INT 8
50694: PUSH
50695: LD_INT 9
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: LIST
50702: PUSH
50703: LD_VAR 0 17
50707: ARRAY
50708: PPUSH
50709: LD_VAR 0 4
50713: PPUSH
50714: CALL_OW 380
50718: GO 50737
// PrepareHuman ( false , i , skill ) ;
50720: LD_INT 0
50722: PPUSH
50723: LD_VAR 0 8
50727: PPUSH
50728: LD_VAR 0 4
50732: PPUSH
50733: CALL_OW 380
// end else
50737: GO 50756
// PrepareHuman ( false , i , skill ) ;
50739: LD_INT 0
50741: PPUSH
50742: LD_VAR 0 8
50746: PPUSH
50747: LD_VAR 0 4
50751: PPUSH
50752: CALL_OW 380
// un := CreateHuman ;
50756: LD_ADDR_VAR 0 14
50760: PUSH
50761: CALL_OW 44
50765: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50766: LD_ADDR_VAR 0 7
50770: PUSH
50771: LD_VAR 0 7
50775: PPUSH
50776: LD_INT 1
50778: PPUSH
50779: LD_VAR 0 14
50783: PPUSH
50784: CALL_OW 2
50788: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50789: LD_VAR 0 14
50793: PPUSH
50794: LD_VAR 0 9
50798: PPUSH
50799: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50803: LD_VAR 0 9
50807: PPUSH
50808: CALL_OW 313
50812: PUSH
50813: LD_INT 6
50815: EQUAL
50816: PUSH
50817: LD_VAR 0 9
50821: PPUSH
50822: CALL_OW 266
50826: PUSH
50827: LD_INT 32
50829: PUSH
50830: LD_INT 31
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: IN
50837: OR
50838: IFFALSE 50652
50840: GO 50649
50842: POP
50843: POP
// end else
50844: GO 51226
// for j = 1 to x do
50846: LD_ADDR_VAR 0 9
50850: PUSH
50851: DOUBLE
50852: LD_INT 1
50854: DEC
50855: ST_TO_ADDR
50856: LD_VAR 0 13
50860: PUSH
50861: FOR_TO
50862: IFFALSE 51224
// begin InitHc ;
50864: CALL_OW 19
// if not f then
50868: LD_VAR 0 12
50872: NOT
50873: IFFALSE 50962
// begin PrepareHuman ( false , i , skill ) ;
50875: LD_INT 0
50877: PPUSH
50878: LD_VAR 0 8
50882: PPUSH
50883: LD_VAR 0 4
50887: PPUSH
50888: CALL_OW 380
// un := CreateHuman ;
50892: LD_ADDR_VAR 0 14
50896: PUSH
50897: CALL_OW 44
50901: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50902: LD_ADDR_VAR 0 7
50906: PUSH
50907: LD_VAR 0 7
50911: PPUSH
50912: LD_INT 1
50914: PPUSH
50915: LD_VAR 0 14
50919: PPUSH
50920: CALL_OW 2
50924: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50925: LD_VAR 0 14
50929: PPUSH
50930: LD_VAR 0 1
50934: PPUSH
50935: CALL_OW 250
50939: PPUSH
50940: LD_VAR 0 1
50944: PPUSH
50945: CALL_OW 251
50949: PPUSH
50950: LD_INT 10
50952: PPUSH
50953: LD_INT 0
50955: PPUSH
50956: CALL_OW 50
// continue ;
50960: GO 50861
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50962: LD_VAR 0 12
50966: PUSH
50967: LD_INT 1
50969: ARRAY
50970: PPUSH
50971: CALL_OW 313
50975: PUSH
50976: LD_VAR 0 12
50980: PUSH
50981: LD_INT 1
50983: ARRAY
50984: PPUSH
50985: CALL_OW 266
50989: PUSH
50990: LD_INT 32
50992: PUSH
50993: LD_INT 31
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: IN
51000: AND
51001: PUSH
51002: LD_VAR 0 12
51006: PUSH
51007: LD_INT 1
51009: ARRAY
51010: PPUSH
51011: CALL_OW 313
51015: PUSH
51016: LD_INT 6
51018: EQUAL
51019: OR
51020: IFFALSE 51040
// f := Delete ( f , 1 ) ;
51022: LD_ADDR_VAR 0 12
51026: PUSH
51027: LD_VAR 0 12
51031: PPUSH
51032: LD_INT 1
51034: PPUSH
51035: CALL_OW 3
51039: ST_TO_ADDR
// if not f then
51040: LD_VAR 0 12
51044: NOT
51045: IFFALSE 51063
// begin x := x + 2 ;
51047: LD_ADDR_VAR 0 13
51051: PUSH
51052: LD_VAR 0 13
51056: PUSH
51057: LD_INT 2
51059: PLUS
51060: ST_TO_ADDR
// continue ;
51061: GO 50861
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51063: LD_VAR 0 12
51067: PUSH
51068: LD_INT 1
51070: ARRAY
51071: PPUSH
51072: CALL_OW 266
51076: PUSH
51077: LD_INT 5
51079: EQUAL
51080: IFFALSE 51154
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51082: LD_VAR 0 12
51086: PUSH
51087: LD_INT 1
51089: ARRAY
51090: PPUSH
51091: CALL_OW 313
51095: PUSH
51096: LD_INT 3
51098: LESS
51099: IFFALSE 51135
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51101: LD_INT 0
51103: PPUSH
51104: LD_INT 5
51106: PUSH
51107: LD_INT 8
51109: PUSH
51110: LD_INT 9
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: LIST
51117: PUSH
51118: LD_VAR 0 17
51122: ARRAY
51123: PPUSH
51124: LD_VAR 0 4
51128: PPUSH
51129: CALL_OW 380
51133: GO 51152
// PrepareHuman ( false , i , skill ) ;
51135: LD_INT 0
51137: PPUSH
51138: LD_VAR 0 8
51142: PPUSH
51143: LD_VAR 0 4
51147: PPUSH
51148: CALL_OW 380
// end else
51152: GO 51171
// PrepareHuman ( false , i , skill ) ;
51154: LD_INT 0
51156: PPUSH
51157: LD_VAR 0 8
51161: PPUSH
51162: LD_VAR 0 4
51166: PPUSH
51167: CALL_OW 380
// un := CreateHuman ;
51171: LD_ADDR_VAR 0 14
51175: PUSH
51176: CALL_OW 44
51180: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51181: LD_ADDR_VAR 0 7
51185: PUSH
51186: LD_VAR 0 7
51190: PPUSH
51191: LD_INT 1
51193: PPUSH
51194: LD_VAR 0 14
51198: PPUSH
51199: CALL_OW 2
51203: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51204: LD_VAR 0 14
51208: PPUSH
51209: LD_VAR 0 12
51213: PUSH
51214: LD_INT 1
51216: ARRAY
51217: PPUSH
51218: CALL_OW 52
// end ;
51222: GO 50861
51224: POP
51225: POP
// end ;
51226: GO 50163
51228: POP
51229: POP
// result := result ^ buildings ;
51230: LD_ADDR_VAR 0 7
51234: PUSH
51235: LD_VAR 0 7
51239: PUSH
51240: LD_VAR 0 18
51244: ADD
51245: ST_TO_ADDR
// end else
51246: GO 51389
// begin for i = 1 to personel do
51248: LD_ADDR_VAR 0 8
51252: PUSH
51253: DOUBLE
51254: LD_INT 1
51256: DEC
51257: ST_TO_ADDR
51258: LD_VAR 0 6
51262: PUSH
51263: FOR_TO
51264: IFFALSE 51387
// begin if i > 4 then
51266: LD_VAR 0 8
51270: PUSH
51271: LD_INT 4
51273: GREATER
51274: IFFALSE 51278
// break ;
51276: GO 51387
// x := personel [ i ] ;
51278: LD_ADDR_VAR 0 13
51282: PUSH
51283: LD_VAR 0 6
51287: PUSH
51288: LD_VAR 0 8
51292: ARRAY
51293: ST_TO_ADDR
// if x = - 1 then
51294: LD_VAR 0 13
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: EQUAL
51303: IFFALSE 51307
// continue ;
51305: GO 51263
// PrepareHuman ( false , i , skill ) ;
51307: LD_INT 0
51309: PPUSH
51310: LD_VAR 0 8
51314: PPUSH
51315: LD_VAR 0 4
51319: PPUSH
51320: CALL_OW 380
// un := CreateHuman ;
51324: LD_ADDR_VAR 0 14
51328: PUSH
51329: CALL_OW 44
51333: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51334: LD_VAR 0 14
51338: PPUSH
51339: LD_VAR 0 1
51343: PPUSH
51344: CALL_OW 250
51348: PPUSH
51349: LD_VAR 0 1
51353: PPUSH
51354: CALL_OW 251
51358: PPUSH
51359: LD_INT 10
51361: PPUSH
51362: LD_INT 0
51364: PPUSH
51365: CALL_OW 50
// result := result ^ un ;
51369: LD_ADDR_VAR 0 7
51373: PUSH
51374: LD_VAR 0 7
51378: PUSH
51379: LD_VAR 0 14
51383: ADD
51384: ST_TO_ADDR
// end ;
51385: GO 51263
51387: POP
51388: POP
// end ; end ;
51389: LD_VAR 0 7
51393: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51394: LD_INT 0
51396: PPUSH
51397: PPUSH
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
51409: PPUSH
51410: PPUSH
51411: PPUSH
// result := false ;
51412: LD_ADDR_VAR 0 3
51416: PUSH
51417: LD_INT 0
51419: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51420: LD_VAR 0 1
51424: NOT
51425: PUSH
51426: LD_VAR 0 1
51430: PPUSH
51431: CALL_OW 266
51435: PUSH
51436: LD_INT 32
51438: PUSH
51439: LD_INT 33
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: IN
51446: NOT
51447: OR
51448: IFFALSE 51452
// exit ;
51450: GO 52561
// nat := GetNation ( tower ) ;
51452: LD_ADDR_VAR 0 12
51456: PUSH
51457: LD_VAR 0 1
51461: PPUSH
51462: CALL_OW 248
51466: ST_TO_ADDR
// side := GetSide ( tower ) ;
51467: LD_ADDR_VAR 0 16
51471: PUSH
51472: LD_VAR 0 1
51476: PPUSH
51477: CALL_OW 255
51481: ST_TO_ADDR
// x := GetX ( tower ) ;
51482: LD_ADDR_VAR 0 10
51486: PUSH
51487: LD_VAR 0 1
51491: PPUSH
51492: CALL_OW 250
51496: ST_TO_ADDR
// y := GetY ( tower ) ;
51497: LD_ADDR_VAR 0 11
51501: PUSH
51502: LD_VAR 0 1
51506: PPUSH
51507: CALL_OW 251
51511: ST_TO_ADDR
// if not x or not y then
51512: LD_VAR 0 10
51516: NOT
51517: PUSH
51518: LD_VAR 0 11
51522: NOT
51523: OR
51524: IFFALSE 51528
// exit ;
51526: GO 52561
// weapon := 0 ;
51528: LD_ADDR_VAR 0 18
51532: PUSH
51533: LD_INT 0
51535: ST_TO_ADDR
// fac_list := [ ] ;
51536: LD_ADDR_VAR 0 17
51540: PUSH
51541: EMPTY
51542: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51543: LD_ADDR_VAR 0 6
51547: PUSH
51548: LD_VAR 0 1
51552: PPUSH
51553: CALL_OW 274
51557: PPUSH
51558: LD_VAR 0 2
51562: PPUSH
51563: LD_INT 0
51565: PPUSH
51566: CALL 49132 0 3
51570: PPUSH
51571: LD_INT 30
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PPUSH
51581: CALL_OW 72
51585: ST_TO_ADDR
// if not factories then
51586: LD_VAR 0 6
51590: NOT
51591: IFFALSE 51595
// exit ;
51593: GO 52561
// for i in factories do
51595: LD_ADDR_VAR 0 8
51599: PUSH
51600: LD_VAR 0 6
51604: PUSH
51605: FOR_IN
51606: IFFALSE 51631
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51608: LD_ADDR_VAR 0 17
51612: PUSH
51613: LD_VAR 0 17
51617: PUSH
51618: LD_VAR 0 8
51622: PPUSH
51623: CALL_OW 478
51627: UNION
51628: ST_TO_ADDR
51629: GO 51605
51631: POP
51632: POP
// if not fac_list then
51633: LD_VAR 0 17
51637: NOT
51638: IFFALSE 51642
// exit ;
51640: GO 52561
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51642: LD_ADDR_VAR 0 5
51646: PUSH
51647: LD_INT 4
51649: PUSH
51650: LD_INT 5
51652: PUSH
51653: LD_INT 9
51655: PUSH
51656: LD_INT 10
51658: PUSH
51659: LD_INT 6
51661: PUSH
51662: LD_INT 7
51664: PUSH
51665: LD_INT 11
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 27
51679: PUSH
51680: LD_INT 28
51682: PUSH
51683: LD_INT 26
51685: PUSH
51686: LD_INT 30
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 43
51697: PUSH
51698: LD_INT 44
51700: PUSH
51701: LD_INT 46
51703: PUSH
51704: LD_INT 45
51706: PUSH
51707: LD_INT 47
51709: PUSH
51710: LD_INT 49
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: PUSH
51726: LD_VAR 0 12
51730: ARRAY
51731: ST_TO_ADDR
// list := list isect fac_list ;
51732: LD_ADDR_VAR 0 5
51736: PUSH
51737: LD_VAR 0 5
51741: PUSH
51742: LD_VAR 0 17
51746: ISECT
51747: ST_TO_ADDR
// if not list then
51748: LD_VAR 0 5
51752: NOT
51753: IFFALSE 51757
// exit ;
51755: GO 52561
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51757: LD_VAR 0 12
51761: PUSH
51762: LD_INT 3
51764: EQUAL
51765: PUSH
51766: LD_INT 49
51768: PUSH
51769: LD_VAR 0 5
51773: IN
51774: AND
51775: PUSH
51776: LD_INT 31
51778: PPUSH
51779: LD_VAR 0 16
51783: PPUSH
51784: CALL_OW 321
51788: PUSH
51789: LD_INT 2
51791: EQUAL
51792: AND
51793: IFFALSE 51853
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51795: LD_INT 22
51797: PUSH
51798: LD_VAR 0 16
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 35
51809: PUSH
51810: LD_INT 49
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 91
51819: PUSH
51820: LD_VAR 0 1
51824: PUSH
51825: LD_INT 10
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: PPUSH
51838: CALL_OW 69
51842: NOT
51843: IFFALSE 51853
// weapon := ru_time_lapser ;
51845: LD_ADDR_VAR 0 18
51849: PUSH
51850: LD_INT 49
51852: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51853: LD_VAR 0 12
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: IN
51868: PUSH
51869: LD_INT 11
51871: PUSH
51872: LD_VAR 0 5
51876: IN
51877: PUSH
51878: LD_INT 30
51880: PUSH
51881: LD_VAR 0 5
51885: IN
51886: OR
51887: AND
51888: PUSH
51889: LD_INT 6
51891: PPUSH
51892: LD_VAR 0 16
51896: PPUSH
51897: CALL_OW 321
51901: PUSH
51902: LD_INT 2
51904: EQUAL
51905: AND
51906: IFFALSE 52071
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51908: LD_INT 22
51910: PUSH
51911: LD_VAR 0 16
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: LD_INT 35
51925: PUSH
51926: LD_INT 11
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 35
51935: PUSH
51936: LD_INT 30
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 91
51950: PUSH
51951: LD_VAR 0 1
51955: PUSH
51956: LD_INT 18
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: PPUSH
51969: CALL_OW 69
51973: NOT
51974: PUSH
51975: LD_INT 22
51977: PUSH
51978: LD_VAR 0 16
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 30
51992: PUSH
51993: LD_INT 32
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 30
52002: PUSH
52003: LD_INT 33
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 91
52017: PUSH
52018: LD_VAR 0 1
52022: PUSH
52023: LD_INT 12
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: PUSH
52036: EMPTY
52037: LIST
52038: PPUSH
52039: CALL_OW 69
52043: PUSH
52044: LD_INT 2
52046: GREATER
52047: AND
52048: IFFALSE 52071
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52050: LD_ADDR_VAR 0 18
52054: PUSH
52055: LD_INT 11
52057: PUSH
52058: LD_INT 30
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_VAR 0 12
52069: ARRAY
52070: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52071: LD_VAR 0 18
52075: NOT
52076: PUSH
52077: LD_INT 40
52079: PPUSH
52080: LD_VAR 0 16
52084: PPUSH
52085: CALL_OW 321
52089: PUSH
52090: LD_INT 2
52092: EQUAL
52093: AND
52094: PUSH
52095: LD_INT 7
52097: PUSH
52098: LD_VAR 0 5
52102: IN
52103: PUSH
52104: LD_INT 28
52106: PUSH
52107: LD_VAR 0 5
52111: IN
52112: OR
52113: PUSH
52114: LD_INT 45
52116: PUSH
52117: LD_VAR 0 5
52121: IN
52122: OR
52123: AND
52124: IFFALSE 52378
// begin hex := GetHexInfo ( x , y ) ;
52126: LD_ADDR_VAR 0 4
52130: PUSH
52131: LD_VAR 0 10
52135: PPUSH
52136: LD_VAR 0 11
52140: PPUSH
52141: CALL_OW 546
52145: ST_TO_ADDR
// if hex [ 1 ] then
52146: LD_VAR 0 4
52150: PUSH
52151: LD_INT 1
52153: ARRAY
52154: IFFALSE 52158
// exit ;
52156: GO 52561
// height := hex [ 2 ] ;
52158: LD_ADDR_VAR 0 15
52162: PUSH
52163: LD_VAR 0 4
52167: PUSH
52168: LD_INT 2
52170: ARRAY
52171: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52172: LD_ADDR_VAR 0 14
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: LD_INT 5
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: ST_TO_ADDR
// for i in tmp do
52195: LD_ADDR_VAR 0 8
52199: PUSH
52200: LD_VAR 0 14
52204: PUSH
52205: FOR_IN
52206: IFFALSE 52376
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52208: LD_ADDR_VAR 0 9
52212: PUSH
52213: LD_VAR 0 10
52217: PPUSH
52218: LD_VAR 0 8
52222: PPUSH
52223: LD_INT 5
52225: PPUSH
52226: CALL_OW 272
52230: PUSH
52231: LD_VAR 0 11
52235: PPUSH
52236: LD_VAR 0 8
52240: PPUSH
52241: LD_INT 5
52243: PPUSH
52244: CALL_OW 273
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52253: LD_VAR 0 9
52257: PUSH
52258: LD_INT 1
52260: ARRAY
52261: PPUSH
52262: LD_VAR 0 9
52266: PUSH
52267: LD_INT 2
52269: ARRAY
52270: PPUSH
52271: CALL_OW 488
52275: IFFALSE 52374
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52277: LD_ADDR_VAR 0 4
52281: PUSH
52282: LD_VAR 0 9
52286: PUSH
52287: LD_INT 1
52289: ARRAY
52290: PPUSH
52291: LD_VAR 0 9
52295: PUSH
52296: LD_INT 2
52298: ARRAY
52299: PPUSH
52300: CALL_OW 546
52304: ST_TO_ADDR
// if hex [ 1 ] then
52305: LD_VAR 0 4
52309: PUSH
52310: LD_INT 1
52312: ARRAY
52313: IFFALSE 52317
// continue ;
52315: GO 52205
// h := hex [ 2 ] ;
52317: LD_ADDR_VAR 0 13
52321: PUSH
52322: LD_VAR 0 4
52326: PUSH
52327: LD_INT 2
52329: ARRAY
52330: ST_TO_ADDR
// if h + 7 < height then
52331: LD_VAR 0 13
52335: PUSH
52336: LD_INT 7
52338: PLUS
52339: PUSH
52340: LD_VAR 0 15
52344: LESS
52345: IFFALSE 52374
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52347: LD_ADDR_VAR 0 18
52351: PUSH
52352: LD_INT 7
52354: PUSH
52355: LD_INT 28
52357: PUSH
52358: LD_INT 45
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: LIST
52365: PUSH
52366: LD_VAR 0 12
52370: ARRAY
52371: ST_TO_ADDR
// break ;
52372: GO 52376
// end ; end ; end ;
52374: GO 52205
52376: POP
52377: POP
// end ; if not weapon then
52378: LD_VAR 0 18
52382: NOT
52383: IFFALSE 52443
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52385: LD_ADDR_VAR 0 5
52389: PUSH
52390: LD_VAR 0 5
52394: PUSH
52395: LD_INT 11
52397: PUSH
52398: LD_INT 30
52400: PUSH
52401: LD_INT 49
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: DIFF
52409: ST_TO_ADDR
// if not list then
52410: LD_VAR 0 5
52414: NOT
52415: IFFALSE 52419
// exit ;
52417: GO 52561
// weapon := list [ rand ( 1 , list ) ] ;
52419: LD_ADDR_VAR 0 18
52423: PUSH
52424: LD_VAR 0 5
52428: PUSH
52429: LD_INT 1
52431: PPUSH
52432: LD_VAR 0 5
52436: PPUSH
52437: CALL_OW 12
52441: ARRAY
52442: ST_TO_ADDR
// end ; if weapon then
52443: LD_VAR 0 18
52447: IFFALSE 52561
// begin tmp := CostOfWeapon ( weapon ) ;
52449: LD_ADDR_VAR 0 14
52453: PUSH
52454: LD_VAR 0 18
52458: PPUSH
52459: CALL_OW 451
52463: ST_TO_ADDR
// j := GetBase ( tower ) ;
52464: LD_ADDR_VAR 0 9
52468: PUSH
52469: LD_VAR 0 1
52473: PPUSH
52474: CALL_OW 274
52478: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52479: LD_VAR 0 9
52483: PPUSH
52484: LD_INT 1
52486: PPUSH
52487: CALL_OW 275
52491: PUSH
52492: LD_VAR 0 14
52496: PUSH
52497: LD_INT 1
52499: ARRAY
52500: GREATEREQUAL
52501: PUSH
52502: LD_VAR 0 9
52506: PPUSH
52507: LD_INT 2
52509: PPUSH
52510: CALL_OW 275
52514: PUSH
52515: LD_VAR 0 14
52519: PUSH
52520: LD_INT 2
52522: ARRAY
52523: GREATEREQUAL
52524: AND
52525: PUSH
52526: LD_VAR 0 9
52530: PPUSH
52531: LD_INT 3
52533: PPUSH
52534: CALL_OW 275
52538: PUSH
52539: LD_VAR 0 14
52543: PUSH
52544: LD_INT 3
52546: ARRAY
52547: GREATEREQUAL
52548: AND
52549: IFFALSE 52561
// result := weapon ;
52551: LD_ADDR_VAR 0 3
52555: PUSH
52556: LD_VAR 0 18
52560: ST_TO_ADDR
// end ; end ;
52561: LD_VAR 0 3
52565: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52566: LD_INT 0
52568: PPUSH
52569: PPUSH
// result := true ;
52570: LD_ADDR_VAR 0 3
52574: PUSH
52575: LD_INT 1
52577: ST_TO_ADDR
// if array1 = array2 then
52578: LD_VAR 0 1
52582: PUSH
52583: LD_VAR 0 2
52587: EQUAL
52588: IFFALSE 52648
// begin for i = 1 to array1 do
52590: LD_ADDR_VAR 0 4
52594: PUSH
52595: DOUBLE
52596: LD_INT 1
52598: DEC
52599: ST_TO_ADDR
52600: LD_VAR 0 1
52604: PUSH
52605: FOR_TO
52606: IFFALSE 52644
// if array1 [ i ] <> array2 [ i ] then
52608: LD_VAR 0 1
52612: PUSH
52613: LD_VAR 0 4
52617: ARRAY
52618: PUSH
52619: LD_VAR 0 2
52623: PUSH
52624: LD_VAR 0 4
52628: ARRAY
52629: NONEQUAL
52630: IFFALSE 52642
// begin result := false ;
52632: LD_ADDR_VAR 0 3
52636: PUSH
52637: LD_INT 0
52639: ST_TO_ADDR
// break ;
52640: GO 52644
// end ;
52642: GO 52605
52644: POP
52645: POP
// end else
52646: GO 52656
// result := false ;
52648: LD_ADDR_VAR 0 3
52652: PUSH
52653: LD_INT 0
52655: ST_TO_ADDR
// end ;
52656: LD_VAR 0 3
52660: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52661: LD_INT 0
52663: PPUSH
52664: PPUSH
// if not array1 or not array2 then
52665: LD_VAR 0 1
52669: NOT
52670: PUSH
52671: LD_VAR 0 2
52675: NOT
52676: OR
52677: IFFALSE 52681
// exit ;
52679: GO 52745
// result := true ;
52681: LD_ADDR_VAR 0 3
52685: PUSH
52686: LD_INT 1
52688: ST_TO_ADDR
// for i = 1 to array1 do
52689: LD_ADDR_VAR 0 4
52693: PUSH
52694: DOUBLE
52695: LD_INT 1
52697: DEC
52698: ST_TO_ADDR
52699: LD_VAR 0 1
52703: PUSH
52704: FOR_TO
52705: IFFALSE 52743
// if array1 [ i ] <> array2 [ i ] then
52707: LD_VAR 0 1
52711: PUSH
52712: LD_VAR 0 4
52716: ARRAY
52717: PUSH
52718: LD_VAR 0 2
52722: PUSH
52723: LD_VAR 0 4
52727: ARRAY
52728: NONEQUAL
52729: IFFALSE 52741
// begin result := false ;
52731: LD_ADDR_VAR 0 3
52735: PUSH
52736: LD_INT 0
52738: ST_TO_ADDR
// break ;
52739: GO 52743
// end ;
52741: GO 52704
52743: POP
52744: POP
// end ;
52745: LD_VAR 0 3
52749: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52750: LD_INT 0
52752: PPUSH
52753: PPUSH
52754: PPUSH
// pom := GetBase ( fac ) ;
52755: LD_ADDR_VAR 0 5
52759: PUSH
52760: LD_VAR 0 1
52764: PPUSH
52765: CALL_OW 274
52769: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52770: LD_ADDR_VAR 0 4
52774: PUSH
52775: LD_VAR 0 2
52779: PUSH
52780: LD_INT 1
52782: ARRAY
52783: PPUSH
52784: LD_VAR 0 2
52788: PUSH
52789: LD_INT 2
52791: ARRAY
52792: PPUSH
52793: LD_VAR 0 2
52797: PUSH
52798: LD_INT 3
52800: ARRAY
52801: PPUSH
52802: LD_VAR 0 2
52806: PUSH
52807: LD_INT 4
52809: ARRAY
52810: PPUSH
52811: CALL_OW 449
52815: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52816: LD_ADDR_VAR 0 3
52820: PUSH
52821: LD_VAR 0 5
52825: PPUSH
52826: LD_INT 1
52828: PPUSH
52829: CALL_OW 275
52833: PUSH
52834: LD_VAR 0 4
52838: PUSH
52839: LD_INT 1
52841: ARRAY
52842: GREATEREQUAL
52843: PUSH
52844: LD_VAR 0 5
52848: PPUSH
52849: LD_INT 2
52851: PPUSH
52852: CALL_OW 275
52856: PUSH
52857: LD_VAR 0 4
52861: PUSH
52862: LD_INT 2
52864: ARRAY
52865: GREATEREQUAL
52866: AND
52867: PUSH
52868: LD_VAR 0 5
52872: PPUSH
52873: LD_INT 3
52875: PPUSH
52876: CALL_OW 275
52880: PUSH
52881: LD_VAR 0 4
52885: PUSH
52886: LD_INT 3
52888: ARRAY
52889: GREATEREQUAL
52890: AND
52891: ST_TO_ADDR
// end ;
52892: LD_VAR 0 3
52896: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52897: LD_INT 0
52899: PPUSH
52900: PPUSH
52901: PPUSH
52902: PPUSH
// pom := GetBase ( building ) ;
52903: LD_ADDR_VAR 0 3
52907: PUSH
52908: LD_VAR 0 1
52912: PPUSH
52913: CALL_OW 274
52917: ST_TO_ADDR
// if not pom then
52918: LD_VAR 0 3
52922: NOT
52923: IFFALSE 52927
// exit ;
52925: GO 53097
// btype := GetBType ( building ) ;
52927: LD_ADDR_VAR 0 5
52931: PUSH
52932: LD_VAR 0 1
52936: PPUSH
52937: CALL_OW 266
52941: ST_TO_ADDR
// if btype = b_armoury then
52942: LD_VAR 0 5
52946: PUSH
52947: LD_INT 4
52949: EQUAL
52950: IFFALSE 52960
// btype := b_barracks ;
52952: LD_ADDR_VAR 0 5
52956: PUSH
52957: LD_INT 5
52959: ST_TO_ADDR
// if btype = b_depot then
52960: LD_VAR 0 5
52964: PUSH
52965: LD_INT 0
52967: EQUAL
52968: IFFALSE 52978
// btype := b_warehouse ;
52970: LD_ADDR_VAR 0 5
52974: PUSH
52975: LD_INT 1
52977: ST_TO_ADDR
// if btype = b_workshop then
52978: LD_VAR 0 5
52982: PUSH
52983: LD_INT 2
52985: EQUAL
52986: IFFALSE 52996
// btype := b_factory ;
52988: LD_ADDR_VAR 0 5
52992: PUSH
52993: LD_INT 3
52995: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52996: LD_ADDR_VAR 0 4
53000: PUSH
53001: LD_VAR 0 5
53005: PPUSH
53006: LD_VAR 0 1
53010: PPUSH
53011: CALL_OW 248
53015: PPUSH
53016: CALL_OW 450
53020: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53021: LD_ADDR_VAR 0 2
53025: PUSH
53026: LD_VAR 0 3
53030: PPUSH
53031: LD_INT 1
53033: PPUSH
53034: CALL_OW 275
53038: PUSH
53039: LD_VAR 0 4
53043: PUSH
53044: LD_INT 1
53046: ARRAY
53047: GREATEREQUAL
53048: PUSH
53049: LD_VAR 0 3
53053: PPUSH
53054: LD_INT 2
53056: PPUSH
53057: CALL_OW 275
53061: PUSH
53062: LD_VAR 0 4
53066: PUSH
53067: LD_INT 2
53069: ARRAY
53070: GREATEREQUAL
53071: AND
53072: PUSH
53073: LD_VAR 0 3
53077: PPUSH
53078: LD_INT 3
53080: PPUSH
53081: CALL_OW 275
53085: PUSH
53086: LD_VAR 0 4
53090: PUSH
53091: LD_INT 3
53093: ARRAY
53094: GREATEREQUAL
53095: AND
53096: ST_TO_ADDR
// end ;
53097: LD_VAR 0 2
53101: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53102: LD_INT 0
53104: PPUSH
53105: PPUSH
53106: PPUSH
// pom := GetBase ( building ) ;
53107: LD_ADDR_VAR 0 4
53111: PUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: CALL_OW 274
53121: ST_TO_ADDR
// if not pom then
53122: LD_VAR 0 4
53126: NOT
53127: IFFALSE 53131
// exit ;
53129: GO 53232
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53131: LD_ADDR_VAR 0 5
53135: PUSH
53136: LD_VAR 0 2
53140: PPUSH
53141: LD_VAR 0 1
53145: PPUSH
53146: CALL_OW 248
53150: PPUSH
53151: CALL_OW 450
53155: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53156: LD_ADDR_VAR 0 3
53160: PUSH
53161: LD_VAR 0 4
53165: PPUSH
53166: LD_INT 1
53168: PPUSH
53169: CALL_OW 275
53173: PUSH
53174: LD_VAR 0 5
53178: PUSH
53179: LD_INT 1
53181: ARRAY
53182: GREATEREQUAL
53183: PUSH
53184: LD_VAR 0 4
53188: PPUSH
53189: LD_INT 2
53191: PPUSH
53192: CALL_OW 275
53196: PUSH
53197: LD_VAR 0 5
53201: PUSH
53202: LD_INT 2
53204: ARRAY
53205: GREATEREQUAL
53206: AND
53207: PUSH
53208: LD_VAR 0 4
53212: PPUSH
53213: LD_INT 3
53215: PPUSH
53216: CALL_OW 275
53220: PUSH
53221: LD_VAR 0 5
53225: PUSH
53226: LD_INT 3
53228: ARRAY
53229: GREATEREQUAL
53230: AND
53231: ST_TO_ADDR
// end ;
53232: LD_VAR 0 3
53236: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53237: LD_INT 0
53239: PPUSH
53240: PPUSH
53241: PPUSH
53242: PPUSH
53243: PPUSH
53244: PPUSH
53245: PPUSH
53246: PPUSH
53247: PPUSH
53248: PPUSH
53249: PPUSH
// result := false ;
53250: LD_ADDR_VAR 0 8
53254: PUSH
53255: LD_INT 0
53257: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53258: LD_VAR 0 5
53262: NOT
53263: PUSH
53264: LD_VAR 0 1
53268: NOT
53269: OR
53270: PUSH
53271: LD_VAR 0 2
53275: NOT
53276: OR
53277: PUSH
53278: LD_VAR 0 3
53282: NOT
53283: OR
53284: IFFALSE 53288
// exit ;
53286: GO 54102
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53288: LD_ADDR_VAR 0 14
53292: PUSH
53293: LD_VAR 0 1
53297: PPUSH
53298: LD_VAR 0 2
53302: PPUSH
53303: LD_VAR 0 3
53307: PPUSH
53308: LD_VAR 0 4
53312: PPUSH
53313: LD_VAR 0 5
53317: PUSH
53318: LD_INT 1
53320: ARRAY
53321: PPUSH
53322: CALL_OW 248
53326: PPUSH
53327: LD_INT 0
53329: PPUSH
53330: CALL 55355 0 6
53334: ST_TO_ADDR
// if not hexes then
53335: LD_VAR 0 14
53339: NOT
53340: IFFALSE 53344
// exit ;
53342: GO 54102
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53344: LD_ADDR_VAR 0 17
53348: PUSH
53349: LD_VAR 0 5
53353: PPUSH
53354: LD_INT 22
53356: PUSH
53357: LD_VAR 0 13
53361: PPUSH
53362: CALL_OW 255
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: LD_INT 30
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 30
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PPUSH
53403: CALL_OW 72
53407: ST_TO_ADDR
// for i = 1 to hexes do
53408: LD_ADDR_VAR 0 9
53412: PUSH
53413: DOUBLE
53414: LD_INT 1
53416: DEC
53417: ST_TO_ADDR
53418: LD_VAR 0 14
53422: PUSH
53423: FOR_TO
53424: IFFALSE 54100
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53426: LD_ADDR_VAR 0 13
53430: PUSH
53431: LD_VAR 0 14
53435: PUSH
53436: LD_VAR 0 9
53440: ARRAY
53441: PUSH
53442: LD_INT 1
53444: ARRAY
53445: PPUSH
53446: LD_VAR 0 14
53450: PUSH
53451: LD_VAR 0 9
53455: ARRAY
53456: PUSH
53457: LD_INT 2
53459: ARRAY
53460: PPUSH
53461: CALL_OW 428
53465: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53466: LD_VAR 0 14
53470: PUSH
53471: LD_VAR 0 9
53475: ARRAY
53476: PUSH
53477: LD_INT 1
53479: ARRAY
53480: PPUSH
53481: LD_VAR 0 14
53485: PUSH
53486: LD_VAR 0 9
53490: ARRAY
53491: PUSH
53492: LD_INT 2
53494: ARRAY
53495: PPUSH
53496: CALL_OW 351
53500: PUSH
53501: LD_VAR 0 14
53505: PUSH
53506: LD_VAR 0 9
53510: ARRAY
53511: PUSH
53512: LD_INT 1
53514: ARRAY
53515: PPUSH
53516: LD_VAR 0 14
53520: PUSH
53521: LD_VAR 0 9
53525: ARRAY
53526: PUSH
53527: LD_INT 2
53529: ARRAY
53530: PPUSH
53531: CALL_OW 488
53535: NOT
53536: OR
53537: PUSH
53538: LD_VAR 0 13
53542: PPUSH
53543: CALL_OW 247
53547: PUSH
53548: LD_INT 3
53550: EQUAL
53551: OR
53552: IFFALSE 53558
// exit ;
53554: POP
53555: POP
53556: GO 54102
// if not tmp then
53558: LD_VAR 0 13
53562: NOT
53563: IFFALSE 53567
// continue ;
53565: GO 53423
// result := true ;
53567: LD_ADDR_VAR 0 8
53571: PUSH
53572: LD_INT 1
53574: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53575: LD_VAR 0 6
53579: PUSH
53580: LD_VAR 0 13
53584: PPUSH
53585: CALL_OW 247
53589: PUSH
53590: LD_INT 2
53592: EQUAL
53593: AND
53594: PUSH
53595: LD_VAR 0 13
53599: PPUSH
53600: CALL_OW 263
53604: PUSH
53605: LD_INT 1
53607: EQUAL
53608: AND
53609: IFFALSE 53773
// begin if IsDrivenBy ( tmp ) then
53611: LD_VAR 0 13
53615: PPUSH
53616: CALL_OW 311
53620: IFFALSE 53624
// continue ;
53622: GO 53423
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53624: LD_VAR 0 6
53628: PPUSH
53629: LD_INT 3
53631: PUSH
53632: LD_INT 60
53634: PUSH
53635: EMPTY
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: PUSH
53645: LD_INT 55
53647: PUSH
53648: EMPTY
53649: LIST
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PPUSH
53659: CALL_OW 72
53663: IFFALSE 53771
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53665: LD_ADDR_VAR 0 18
53669: PUSH
53670: LD_VAR 0 6
53674: PPUSH
53675: LD_INT 3
53677: PUSH
53678: LD_INT 60
53680: PUSH
53681: EMPTY
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 55
53693: PUSH
53694: EMPTY
53695: LIST
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PPUSH
53705: CALL_OW 72
53709: PUSH
53710: LD_INT 1
53712: ARRAY
53713: ST_TO_ADDR
// if IsInUnit ( driver ) then
53714: LD_VAR 0 18
53718: PPUSH
53719: CALL_OW 310
53723: IFFALSE 53734
// ComExit ( driver ) ;
53725: LD_VAR 0 18
53729: PPUSH
53730: CALL 79136 0 1
// AddComEnterUnit ( driver , tmp ) ;
53734: LD_VAR 0 18
53738: PPUSH
53739: LD_VAR 0 13
53743: PPUSH
53744: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53748: LD_VAR 0 18
53752: PPUSH
53753: LD_VAR 0 7
53757: PPUSH
53758: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53762: LD_VAR 0 18
53766: PPUSH
53767: CALL_OW 181
// end ; continue ;
53771: GO 53423
// end ; if not cleaners or not tmp in cleaners then
53773: LD_VAR 0 6
53777: NOT
53778: PUSH
53779: LD_VAR 0 13
53783: PUSH
53784: LD_VAR 0 6
53788: IN
53789: NOT
53790: OR
53791: IFFALSE 54098
// begin if dep then
53793: LD_VAR 0 17
53797: IFFALSE 53933
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53799: LD_ADDR_VAR 0 16
53803: PUSH
53804: LD_VAR 0 17
53808: PUSH
53809: LD_INT 1
53811: ARRAY
53812: PPUSH
53813: CALL_OW 250
53817: PPUSH
53818: LD_VAR 0 17
53822: PUSH
53823: LD_INT 1
53825: ARRAY
53826: PPUSH
53827: CALL_OW 254
53831: PPUSH
53832: LD_INT 5
53834: PPUSH
53835: CALL_OW 272
53839: PUSH
53840: LD_VAR 0 17
53844: PUSH
53845: LD_INT 1
53847: ARRAY
53848: PPUSH
53849: CALL_OW 251
53853: PPUSH
53854: LD_VAR 0 17
53858: PUSH
53859: LD_INT 1
53861: ARRAY
53862: PPUSH
53863: CALL_OW 254
53867: PPUSH
53868: LD_INT 5
53870: PPUSH
53871: CALL_OW 273
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53880: LD_VAR 0 16
53884: PUSH
53885: LD_INT 1
53887: ARRAY
53888: PPUSH
53889: LD_VAR 0 16
53893: PUSH
53894: LD_INT 2
53896: ARRAY
53897: PPUSH
53898: CALL_OW 488
53902: IFFALSE 53933
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53904: LD_VAR 0 13
53908: PPUSH
53909: LD_VAR 0 16
53913: PUSH
53914: LD_INT 1
53916: ARRAY
53917: PPUSH
53918: LD_VAR 0 16
53922: PUSH
53923: LD_INT 2
53925: ARRAY
53926: PPUSH
53927: CALL_OW 111
// continue ;
53931: GO 53423
// end ; end ; r := GetDir ( tmp ) ;
53933: LD_ADDR_VAR 0 15
53937: PUSH
53938: LD_VAR 0 13
53942: PPUSH
53943: CALL_OW 254
53947: ST_TO_ADDR
// if r = 5 then
53948: LD_VAR 0 15
53952: PUSH
53953: LD_INT 5
53955: EQUAL
53956: IFFALSE 53966
// r := 0 ;
53958: LD_ADDR_VAR 0 15
53962: PUSH
53963: LD_INT 0
53965: ST_TO_ADDR
// for j = r to 5 do
53966: LD_ADDR_VAR 0 10
53970: PUSH
53971: DOUBLE
53972: LD_VAR 0 15
53976: DEC
53977: ST_TO_ADDR
53978: LD_INT 5
53980: PUSH
53981: FOR_TO
53982: IFFALSE 54096
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53984: LD_ADDR_VAR 0 11
53988: PUSH
53989: LD_VAR 0 13
53993: PPUSH
53994: CALL_OW 250
53998: PPUSH
53999: LD_VAR 0 10
54003: PPUSH
54004: LD_INT 2
54006: PPUSH
54007: CALL_OW 272
54011: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54012: LD_ADDR_VAR 0 12
54016: PUSH
54017: LD_VAR 0 13
54021: PPUSH
54022: CALL_OW 251
54026: PPUSH
54027: LD_VAR 0 10
54031: PPUSH
54032: LD_INT 2
54034: PPUSH
54035: CALL_OW 273
54039: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54040: LD_VAR 0 11
54044: PPUSH
54045: LD_VAR 0 12
54049: PPUSH
54050: CALL_OW 488
54054: PUSH
54055: LD_VAR 0 11
54059: PPUSH
54060: LD_VAR 0 12
54064: PPUSH
54065: CALL_OW 428
54069: NOT
54070: AND
54071: IFFALSE 54094
// begin ComMoveXY ( tmp , _x , _y ) ;
54073: LD_VAR 0 13
54077: PPUSH
54078: LD_VAR 0 11
54082: PPUSH
54083: LD_VAR 0 12
54087: PPUSH
54088: CALL_OW 111
// break ;
54092: GO 54096
// end ; end ;
54094: GO 53981
54096: POP
54097: POP
// end ; end ;
54098: GO 53423
54100: POP
54101: POP
// end ;
54102: LD_VAR 0 8
54106: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54107: LD_INT 0
54109: PPUSH
// result := true ;
54110: LD_ADDR_VAR 0 3
54114: PUSH
54115: LD_INT 1
54117: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54118: LD_VAR 0 2
54122: PUSH
54123: LD_INT 24
54125: DOUBLE
54126: EQUAL
54127: IFTRUE 54137
54129: LD_INT 33
54131: DOUBLE
54132: EQUAL
54133: IFTRUE 54137
54135: GO 54162
54137: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54138: LD_ADDR_VAR 0 3
54142: PUSH
54143: LD_INT 32
54145: PPUSH
54146: LD_VAR 0 1
54150: PPUSH
54151: CALL_OW 321
54155: PUSH
54156: LD_INT 2
54158: EQUAL
54159: ST_TO_ADDR
54160: GO 54478
54162: LD_INT 20
54164: DOUBLE
54165: EQUAL
54166: IFTRUE 54170
54168: GO 54195
54170: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54171: LD_ADDR_VAR 0 3
54175: PUSH
54176: LD_INT 6
54178: PPUSH
54179: LD_VAR 0 1
54183: PPUSH
54184: CALL_OW 321
54188: PUSH
54189: LD_INT 2
54191: EQUAL
54192: ST_TO_ADDR
54193: GO 54478
54195: LD_INT 22
54197: DOUBLE
54198: EQUAL
54199: IFTRUE 54209
54201: LD_INT 36
54203: DOUBLE
54204: EQUAL
54205: IFTRUE 54209
54207: GO 54234
54209: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54210: LD_ADDR_VAR 0 3
54214: PUSH
54215: LD_INT 15
54217: PPUSH
54218: LD_VAR 0 1
54222: PPUSH
54223: CALL_OW 321
54227: PUSH
54228: LD_INT 2
54230: EQUAL
54231: ST_TO_ADDR
54232: GO 54478
54234: LD_INT 30
54236: DOUBLE
54237: EQUAL
54238: IFTRUE 54242
54240: GO 54267
54242: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54243: LD_ADDR_VAR 0 3
54247: PUSH
54248: LD_INT 20
54250: PPUSH
54251: LD_VAR 0 1
54255: PPUSH
54256: CALL_OW 321
54260: PUSH
54261: LD_INT 2
54263: EQUAL
54264: ST_TO_ADDR
54265: GO 54478
54267: LD_INT 28
54269: DOUBLE
54270: EQUAL
54271: IFTRUE 54281
54273: LD_INT 21
54275: DOUBLE
54276: EQUAL
54277: IFTRUE 54281
54279: GO 54306
54281: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54282: LD_ADDR_VAR 0 3
54286: PUSH
54287: LD_INT 21
54289: PPUSH
54290: LD_VAR 0 1
54294: PPUSH
54295: CALL_OW 321
54299: PUSH
54300: LD_INT 2
54302: EQUAL
54303: ST_TO_ADDR
54304: GO 54478
54306: LD_INT 16
54308: DOUBLE
54309: EQUAL
54310: IFTRUE 54314
54312: GO 54339
54314: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54315: LD_ADDR_VAR 0 3
54319: PUSH
54320: LD_INT 84
54322: PPUSH
54323: LD_VAR 0 1
54327: PPUSH
54328: CALL_OW 321
54332: PUSH
54333: LD_INT 2
54335: EQUAL
54336: ST_TO_ADDR
54337: GO 54478
54339: LD_INT 19
54341: DOUBLE
54342: EQUAL
54343: IFTRUE 54353
54345: LD_INT 23
54347: DOUBLE
54348: EQUAL
54349: IFTRUE 54353
54351: GO 54378
54353: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54354: LD_ADDR_VAR 0 3
54358: PUSH
54359: LD_INT 83
54361: PPUSH
54362: LD_VAR 0 1
54366: PPUSH
54367: CALL_OW 321
54371: PUSH
54372: LD_INT 2
54374: EQUAL
54375: ST_TO_ADDR
54376: GO 54478
54378: LD_INT 17
54380: DOUBLE
54381: EQUAL
54382: IFTRUE 54386
54384: GO 54411
54386: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54387: LD_ADDR_VAR 0 3
54391: PUSH
54392: LD_INT 39
54394: PPUSH
54395: LD_VAR 0 1
54399: PPUSH
54400: CALL_OW 321
54404: PUSH
54405: LD_INT 2
54407: EQUAL
54408: ST_TO_ADDR
54409: GO 54478
54411: LD_INT 18
54413: DOUBLE
54414: EQUAL
54415: IFTRUE 54419
54417: GO 54444
54419: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54420: LD_ADDR_VAR 0 3
54424: PUSH
54425: LD_INT 40
54427: PPUSH
54428: LD_VAR 0 1
54432: PPUSH
54433: CALL_OW 321
54437: PUSH
54438: LD_INT 2
54440: EQUAL
54441: ST_TO_ADDR
54442: GO 54478
54444: LD_INT 27
54446: DOUBLE
54447: EQUAL
54448: IFTRUE 54452
54450: GO 54477
54452: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54453: LD_ADDR_VAR 0 3
54457: PUSH
54458: LD_INT 35
54460: PPUSH
54461: LD_VAR 0 1
54465: PPUSH
54466: CALL_OW 321
54470: PUSH
54471: LD_INT 2
54473: EQUAL
54474: ST_TO_ADDR
54475: GO 54478
54477: POP
// end ;
54478: LD_VAR 0 3
54482: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54483: LD_INT 0
54485: PPUSH
54486: PPUSH
54487: PPUSH
54488: PPUSH
54489: PPUSH
54490: PPUSH
54491: PPUSH
54492: PPUSH
54493: PPUSH
54494: PPUSH
54495: PPUSH
// result := false ;
54496: LD_ADDR_VAR 0 6
54500: PUSH
54501: LD_INT 0
54503: ST_TO_ADDR
// if btype = b_depot then
54504: LD_VAR 0 2
54508: PUSH
54509: LD_INT 0
54511: EQUAL
54512: IFFALSE 54524
// begin result := true ;
54514: LD_ADDR_VAR 0 6
54518: PUSH
54519: LD_INT 1
54521: ST_TO_ADDR
// exit ;
54522: GO 55350
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54524: LD_VAR 0 1
54528: NOT
54529: PUSH
54530: LD_VAR 0 1
54534: PPUSH
54535: CALL_OW 266
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: IN
54550: NOT
54551: OR
54552: PUSH
54553: LD_VAR 0 2
54557: NOT
54558: OR
54559: PUSH
54560: LD_VAR 0 5
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: LD_INT 4
54579: PUSH
54580: LD_INT 5
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: IN
54591: NOT
54592: OR
54593: PUSH
54594: LD_VAR 0 3
54598: PPUSH
54599: LD_VAR 0 4
54603: PPUSH
54604: CALL_OW 488
54608: NOT
54609: OR
54610: IFFALSE 54614
// exit ;
54612: GO 55350
// side := GetSide ( depot ) ;
54614: LD_ADDR_VAR 0 9
54618: PUSH
54619: LD_VAR 0 1
54623: PPUSH
54624: CALL_OW 255
54628: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54629: LD_VAR 0 9
54633: PPUSH
54634: LD_VAR 0 2
54638: PPUSH
54639: CALL 54107 0 2
54643: NOT
54644: IFFALSE 54648
// exit ;
54646: GO 55350
// pom := GetBase ( depot ) ;
54648: LD_ADDR_VAR 0 10
54652: PUSH
54653: LD_VAR 0 1
54657: PPUSH
54658: CALL_OW 274
54662: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54663: LD_ADDR_VAR 0 11
54667: PUSH
54668: LD_VAR 0 2
54672: PPUSH
54673: LD_VAR 0 1
54677: PPUSH
54678: CALL_OW 248
54682: PPUSH
54683: CALL_OW 450
54687: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54688: LD_VAR 0 10
54692: PPUSH
54693: LD_INT 1
54695: PPUSH
54696: CALL_OW 275
54700: PUSH
54701: LD_VAR 0 11
54705: PUSH
54706: LD_INT 1
54708: ARRAY
54709: GREATEREQUAL
54710: PUSH
54711: LD_VAR 0 10
54715: PPUSH
54716: LD_INT 2
54718: PPUSH
54719: CALL_OW 275
54723: PUSH
54724: LD_VAR 0 11
54728: PUSH
54729: LD_INT 2
54731: ARRAY
54732: GREATEREQUAL
54733: AND
54734: PUSH
54735: LD_VAR 0 10
54739: PPUSH
54740: LD_INT 3
54742: PPUSH
54743: CALL_OW 275
54747: PUSH
54748: LD_VAR 0 11
54752: PUSH
54753: LD_INT 3
54755: ARRAY
54756: GREATEREQUAL
54757: AND
54758: NOT
54759: IFFALSE 54763
// exit ;
54761: GO 55350
// if GetBType ( depot ) = b_depot then
54763: LD_VAR 0 1
54767: PPUSH
54768: CALL_OW 266
54772: PUSH
54773: LD_INT 0
54775: EQUAL
54776: IFFALSE 54788
// dist := 28 else
54778: LD_ADDR_VAR 0 14
54782: PUSH
54783: LD_INT 28
54785: ST_TO_ADDR
54786: GO 54796
// dist := 36 ;
54788: LD_ADDR_VAR 0 14
54792: PUSH
54793: LD_INT 36
54795: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54796: LD_VAR 0 1
54800: PPUSH
54801: LD_VAR 0 3
54805: PPUSH
54806: LD_VAR 0 4
54810: PPUSH
54811: CALL_OW 297
54815: PUSH
54816: LD_VAR 0 14
54820: GREATER
54821: IFFALSE 54825
// exit ;
54823: GO 55350
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54825: LD_ADDR_VAR 0 12
54829: PUSH
54830: LD_VAR 0 2
54834: PPUSH
54835: LD_VAR 0 3
54839: PPUSH
54840: LD_VAR 0 4
54844: PPUSH
54845: LD_VAR 0 5
54849: PPUSH
54850: LD_VAR 0 1
54854: PPUSH
54855: CALL_OW 248
54859: PPUSH
54860: LD_INT 0
54862: PPUSH
54863: CALL 55355 0 6
54867: ST_TO_ADDR
// if not hexes then
54868: LD_VAR 0 12
54872: NOT
54873: IFFALSE 54877
// exit ;
54875: GO 55350
// hex := GetHexInfo ( x , y ) ;
54877: LD_ADDR_VAR 0 15
54881: PUSH
54882: LD_VAR 0 3
54886: PPUSH
54887: LD_VAR 0 4
54891: PPUSH
54892: CALL_OW 546
54896: ST_TO_ADDR
// if hex [ 1 ] then
54897: LD_VAR 0 15
54901: PUSH
54902: LD_INT 1
54904: ARRAY
54905: IFFALSE 54909
// exit ;
54907: GO 55350
// height := hex [ 2 ] ;
54909: LD_ADDR_VAR 0 13
54913: PUSH
54914: LD_VAR 0 15
54918: PUSH
54919: LD_INT 2
54921: ARRAY
54922: ST_TO_ADDR
// for i = 1 to hexes do
54923: LD_ADDR_VAR 0 7
54927: PUSH
54928: DOUBLE
54929: LD_INT 1
54931: DEC
54932: ST_TO_ADDR
54933: LD_VAR 0 12
54937: PUSH
54938: FOR_TO
54939: IFFALSE 55269
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54941: LD_VAR 0 12
54945: PUSH
54946: LD_VAR 0 7
54950: ARRAY
54951: PUSH
54952: LD_INT 1
54954: ARRAY
54955: PPUSH
54956: LD_VAR 0 12
54960: PUSH
54961: LD_VAR 0 7
54965: ARRAY
54966: PUSH
54967: LD_INT 2
54969: ARRAY
54970: PPUSH
54971: CALL_OW 488
54975: NOT
54976: PUSH
54977: LD_VAR 0 12
54981: PUSH
54982: LD_VAR 0 7
54986: ARRAY
54987: PUSH
54988: LD_INT 1
54990: ARRAY
54991: PPUSH
54992: LD_VAR 0 12
54996: PUSH
54997: LD_VAR 0 7
55001: ARRAY
55002: PUSH
55003: LD_INT 2
55005: ARRAY
55006: PPUSH
55007: CALL_OW 428
55011: PUSH
55012: LD_INT 0
55014: GREATER
55015: OR
55016: PUSH
55017: LD_VAR 0 12
55021: PUSH
55022: LD_VAR 0 7
55026: ARRAY
55027: PUSH
55028: LD_INT 1
55030: ARRAY
55031: PPUSH
55032: LD_VAR 0 12
55036: PUSH
55037: LD_VAR 0 7
55041: ARRAY
55042: PUSH
55043: LD_INT 2
55045: ARRAY
55046: PPUSH
55047: CALL_OW 351
55051: OR
55052: IFFALSE 55058
// exit ;
55054: POP
55055: POP
55056: GO 55350
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55058: LD_ADDR_VAR 0 8
55062: PUSH
55063: LD_VAR 0 12
55067: PUSH
55068: LD_VAR 0 7
55072: ARRAY
55073: PUSH
55074: LD_INT 1
55076: ARRAY
55077: PPUSH
55078: LD_VAR 0 12
55082: PUSH
55083: LD_VAR 0 7
55087: ARRAY
55088: PUSH
55089: LD_INT 2
55091: ARRAY
55092: PPUSH
55093: CALL_OW 546
55097: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55098: LD_VAR 0 8
55102: PUSH
55103: LD_INT 1
55105: ARRAY
55106: PUSH
55107: LD_VAR 0 8
55111: PUSH
55112: LD_INT 2
55114: ARRAY
55115: PUSH
55116: LD_VAR 0 13
55120: PUSH
55121: LD_INT 2
55123: PLUS
55124: GREATER
55125: OR
55126: PUSH
55127: LD_VAR 0 8
55131: PUSH
55132: LD_INT 2
55134: ARRAY
55135: PUSH
55136: LD_VAR 0 13
55140: PUSH
55141: LD_INT 2
55143: MINUS
55144: LESS
55145: OR
55146: PUSH
55147: LD_VAR 0 8
55151: PUSH
55152: LD_INT 3
55154: ARRAY
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 8
55161: PUSH
55162: LD_INT 9
55164: PUSH
55165: LD_INT 10
55167: PUSH
55168: LD_INT 11
55170: PUSH
55171: LD_INT 12
55173: PUSH
55174: LD_INT 13
55176: PUSH
55177: LD_INT 16
55179: PUSH
55180: LD_INT 17
55182: PUSH
55183: LD_INT 18
55185: PUSH
55186: LD_INT 19
55188: PUSH
55189: LD_INT 20
55191: PUSH
55192: LD_INT 21
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: IN
55210: NOT
55211: OR
55212: PUSH
55213: LD_VAR 0 8
55217: PUSH
55218: LD_INT 5
55220: ARRAY
55221: NOT
55222: OR
55223: PUSH
55224: LD_VAR 0 8
55228: PUSH
55229: LD_INT 6
55231: ARRAY
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: LD_INT 7
55241: PUSH
55242: LD_INT 9
55244: PUSH
55245: LD_INT 10
55247: PUSH
55248: LD_INT 11
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: IN
55259: NOT
55260: OR
55261: IFFALSE 55267
// exit ;
55263: POP
55264: POP
55265: GO 55350
// end ;
55267: GO 54938
55269: POP
55270: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55271: LD_VAR 0 9
55275: PPUSH
55276: LD_VAR 0 3
55280: PPUSH
55281: LD_VAR 0 4
55285: PPUSH
55286: LD_INT 20
55288: PPUSH
55289: CALL 47273 0 4
55293: PUSH
55294: LD_INT 4
55296: ARRAY
55297: IFFALSE 55301
// exit ;
55299: GO 55350
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55301: LD_VAR 0 2
55305: PUSH
55306: LD_INT 29
55308: PUSH
55309: LD_INT 30
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: IN
55316: PUSH
55317: LD_VAR 0 3
55321: PPUSH
55322: LD_VAR 0 4
55326: PPUSH
55327: LD_VAR 0 9
55331: PPUSH
55332: CALL_OW 440
55336: NOT
55337: AND
55338: IFFALSE 55342
// exit ;
55340: GO 55350
// result := true ;
55342: LD_ADDR_VAR 0 6
55346: PUSH
55347: LD_INT 1
55349: ST_TO_ADDR
// end ;
55350: LD_VAR 0 6
55354: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55355: LD_INT 0
55357: PPUSH
55358: PPUSH
55359: PPUSH
55360: PPUSH
55361: PPUSH
55362: PPUSH
55363: PPUSH
55364: PPUSH
55365: PPUSH
55366: PPUSH
55367: PPUSH
55368: PPUSH
55369: PPUSH
55370: PPUSH
55371: PPUSH
55372: PPUSH
55373: PPUSH
55374: PPUSH
55375: PPUSH
55376: PPUSH
55377: PPUSH
55378: PPUSH
55379: PPUSH
55380: PPUSH
55381: PPUSH
55382: PPUSH
55383: PPUSH
55384: PPUSH
55385: PPUSH
55386: PPUSH
55387: PPUSH
55388: PPUSH
55389: PPUSH
55390: PPUSH
55391: PPUSH
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
55396: PPUSH
55397: PPUSH
55398: PPUSH
55399: PPUSH
55400: PPUSH
55401: PPUSH
55402: PPUSH
55403: PPUSH
55404: PPUSH
55405: PPUSH
55406: PPUSH
55407: PPUSH
55408: PPUSH
55409: PPUSH
55410: PPUSH
55411: PPUSH
55412: PPUSH
55413: PPUSH
55414: PPUSH
// result = [ ] ;
55415: LD_ADDR_VAR 0 7
55419: PUSH
55420: EMPTY
55421: ST_TO_ADDR
// temp_list = [ ] ;
55422: LD_ADDR_VAR 0 9
55426: PUSH
55427: EMPTY
55428: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55429: LD_VAR 0 4
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: LD_INT 3
55445: PUSH
55446: LD_INT 4
55448: PUSH
55449: LD_INT 5
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: IN
55460: NOT
55461: PUSH
55462: LD_VAR 0 1
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: IN
55477: PUSH
55478: LD_VAR 0 5
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: IN
55497: NOT
55498: AND
55499: OR
55500: IFFALSE 55504
// exit ;
55502: GO 73895
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55504: LD_VAR 0 1
55508: PUSH
55509: LD_INT 6
55511: PUSH
55512: LD_INT 7
55514: PUSH
55515: LD_INT 8
55517: PUSH
55518: LD_INT 13
55520: PUSH
55521: LD_INT 12
55523: PUSH
55524: LD_INT 15
55526: PUSH
55527: LD_INT 11
55529: PUSH
55530: LD_INT 14
55532: PUSH
55533: LD_INT 10
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: IN
55547: IFFALSE 55557
// btype = b_lab ;
55549: LD_ADDR_VAR 0 1
55553: PUSH
55554: LD_INT 6
55556: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55557: LD_VAR 0 6
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: LIST
55575: IN
55576: NOT
55577: PUSH
55578: LD_VAR 0 1
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: LD_INT 6
55597: PUSH
55598: LD_INT 36
55600: PUSH
55601: LD_INT 4
55603: PUSH
55604: LD_INT 5
55606: PUSH
55607: LD_INT 31
55609: PUSH
55610: LD_INT 32
55612: PUSH
55613: LD_INT 33
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: IN
55629: NOT
55630: PUSH
55631: LD_VAR 0 6
55635: PUSH
55636: LD_INT 1
55638: EQUAL
55639: AND
55640: OR
55641: PUSH
55642: LD_VAR 0 1
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 3
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: IN
55657: NOT
55658: PUSH
55659: LD_VAR 0 6
55663: PUSH
55664: LD_INT 2
55666: EQUAL
55667: AND
55668: OR
55669: IFFALSE 55679
// mode = 0 ;
55671: LD_ADDR_VAR 0 6
55675: PUSH
55676: LD_INT 0
55678: ST_TO_ADDR
// case mode of 0 :
55679: LD_VAR 0 6
55683: PUSH
55684: LD_INT 0
55686: DOUBLE
55687: EQUAL
55688: IFTRUE 55692
55690: GO 67145
55692: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55693: LD_ADDR_VAR 0 11
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55886: LD_ADDR_VAR 0 12
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 3
56054: NEG
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56082: LD_ADDR_VAR 0 13
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: LD_INT 2
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 3
56241: NEG
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 3
56253: NEG
56254: PUSH
56255: LD_INT 3
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56281: LD_ADDR_VAR 0 14
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 2
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 3
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56477: LD_ADDR_VAR 0 15
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56670: LD_ADDR_VAR 0 16
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56863: LD_ADDR_VAR 0 17
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: LD_INT 2
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57093: LD_ADDR_VAR 0 18
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 2
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57323: LD_ADDR_VAR 0 19
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: LD_INT 2
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57553: LD_ADDR_VAR 0 20
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57783: LD_ADDR_VAR 0 21
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58013: LD_ADDR_VAR 0 22
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 2
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58243: LD_ADDR_VAR 0 23
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 2
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: NEG
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: LD_INT 2
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: LD_INT 3
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: LD_INT 3
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58523: LD_ADDR_VAR 0 24
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: LD_INT 2
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 3
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58799: LD_ADDR_VAR 0 25
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 3
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 3
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: LD_INT 3
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59073: LD_ADDR_VAR 0 26
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59349: LD_ADDR_VAR 0 27
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: NEG
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 2
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59629: LD_ADDR_VAR 0 28
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 3
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: NEG
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 3
59876: NEG
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59911: LD_ADDR_VAR 0 29
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: LD_INT 2
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: LD_INT 1
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: LD_INT 3
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 3
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 3
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60190: LD_ADDR_VAR 0 30
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 2
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 2
60356: NEG
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 3
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 2
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60468: LD_ADDR_VAR 0 31
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: LD_INT 3
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 3
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 3
60711: NEG
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60746: LD_ADDR_VAR 0 32
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: NEG
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: NEG
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61024: LD_ADDR_VAR 0 33
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 2
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: NEG
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 2
61214: NEG
61215: PUSH
61216: LD_INT 3
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 3
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 3
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61303: LD_ADDR_VAR 0 34
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: LD_INT 2
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 2
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: LD_INT 2
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 3
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: LD_INT 3
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61583: LD_ADDR_VAR 0 35
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61695: LD_ADDR_VAR 0 36
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: LD_INT 2
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61807: LD_ADDR_VAR 0 37
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61919: LD_ADDR_VAR 0 38
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62031: LD_ADDR_VAR 0 39
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62143: LD_ADDR_VAR 0 40
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: NEG
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62255: LD_ADDR_VAR 0 41
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 2
62445: NEG
62446: PUSH
62447: LD_INT 3
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 3
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 3
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 3
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: PUSH
62499: LD_INT 3
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 2
62518: NEG
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 3
62529: NEG
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 3
62540: NEG
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 3
62552: NEG
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: LD_INT 3
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62605: LD_ADDR_VAR 0 42
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: LD_INT 1
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 2
62730: PUSH
62731: LD_INT 2
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 1
62760: NEG
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 2
62771: NEG
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 2
62783: NEG
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: LD_INT 3
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: LD_INT 3
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: LD_INT 3
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: LD_INT 2
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: PUSH
62852: LD_INT 3
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 2
62861: PUSH
62862: LD_INT 3
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: LD_INT 3
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: LD_INT 2
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 3
62902: NEG
62903: PUSH
62904: LD_INT 2
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 3
62914: NEG
62915: PUSH
62916: LD_INT 3
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62955: LD_ADDR_VAR 0 43
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: LD_INT 2
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: LD_INT 2
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: LD_INT 2
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: NEG
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: LD_INT 3
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: LD_INT 3
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 2
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: LD_INT 1
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 3
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 3
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: LD_INT 3
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: LD_INT 3
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: NEG
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 3
63251: NEG
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 3
63262: NEG
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63303: LD_ADDR_VAR 0 44
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: LD_INT 2
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: NEG
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 2
63458: NEG
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 2
63469: NEG
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 2
63481: NEG
63482: PUSH
63483: LD_INT 2
63485: NEG
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 2
63493: NEG
63494: PUSH
63495: LD_INT 3
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 3
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 3
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 3
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 3
63546: PUSH
63547: LD_INT 3
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: LD_INT 3
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 3
63577: NEG
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 3
63588: NEG
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 3
63600: NEG
63601: PUSH
63602: LD_INT 2
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 3
63612: NEG
63613: PUSH
63614: LD_INT 3
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63653: LD_ADDR_VAR 0 45
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: LD_INT 2
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 2
63819: NEG
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 2
63831: NEG
63832: PUSH
63833: LD_INT 2
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: NEG
63844: PUSH
63845: LD_INT 3
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: LD_INT 3
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: LD_INT 3
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: LD_INT 2
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 3
63889: PUSH
63890: LD_INT 2
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 3
63899: PUSH
63900: LD_INT 3
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: LD_INT 3
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: LD_INT 3
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: LD_INT 3
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 3
63950: NEG
63951: PUSH
63952: LD_INT 2
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 3
63962: NEG
63963: PUSH
63964: LD_INT 3
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64003: LD_ADDR_VAR 0 46
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: LD_INT 1
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: LD_INT 2
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: LD_INT 2
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 2
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 2
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: LD_INT 2
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 1
64158: NEG
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 2
64180: NEG
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: LD_INT 3
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: LD_INT 3
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: LD_INT 2
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 2
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 3
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 3
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: LD_INT 3
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: LD_INT 3
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 1
64277: NEG
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 2
64288: NEG
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 3
64299: NEG
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 3
64310: NEG
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64351: LD_ADDR_VAR 0 47
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: PUSH
64380: LD_INT 0
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 0
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: LD_INT 2
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: LD_INT 2
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: LD_INT 2
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64502: LD_ADDR_VAR 0 48
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: LD_INT 1
64522: NEG
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: LD_INT 1
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 1
64560: NEG
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: LD_INT 2
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: LD_INT 2
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 2
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 2
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64649: LD_ADDR_VAR 0 49
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 1
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 1
64718: NEG
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 2
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 2
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 2
64761: PUSH
64762: LD_INT 2
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: LD_INT 2
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64793: LD_ADDR_VAR 0 50
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: NEG
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: LD_INT 1
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 2
64884: PUSH
64885: LD_INT 2
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 1
64894: PUSH
64895: LD_INT 2
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: LD_INT 2
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64937: LD_ADDR_VAR 0 51
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: LD_INT 2
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: LD_INT 2
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 2
65049: NEG
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 2
65060: NEG
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65084: LD_ADDR_VAR 0 52
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: LD_INT 2
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 2
65188: NEG
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 2
65199: NEG
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: NEG
65212: PUSH
65213: LD_INT 2
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65235: LD_ADDR_VAR 0 53
65239: PUSH
65240: LD_INT 0
65242: PUSH
65243: LD_INT 0
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 1
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 1
65293: NEG
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: LD_INT 2
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_INT 2
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 1
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 2
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 2
65370: PUSH
65371: LD_INT 2
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: LD_INT 2
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: LD_INT 2
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: NEG
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: NEG
65423: PUSH
65424: LD_INT 1
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: LD_INT 2
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65465: LD_ADDR_VAR 0 54
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: LD_INT 1
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: LD_INT 2
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 2
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 2
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 2
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: LD_INT 2
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 2
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: LD_INT 1
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 2
65641: NEG
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 2
65652: NEG
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 2
65664: NEG
65665: PUSH
65666: LD_INT 2
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65695: LD_ADDR_VAR 0 55
65699: PUSH
65700: LD_INT 0
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: LD_INT 1
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 1
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: LD_INT 1
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 1
65764: NEG
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: LD_INT 2
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: LD_INT 2
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 2
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 2
65830: PUSH
65831: LD_INT 2
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: LD_INT 2
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: LD_INT 2
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: NEG
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 2
65894: NEG
65895: PUSH
65896: LD_INT 2
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65925: LD_ADDR_VAR 0 56
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 1
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 1
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 1
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: LD_INT 1
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 1
65994: NEG
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: NEG
66007: PUSH
66008: LD_INT 2
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: LD_INT 2
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: LD_INT 1
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 2
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 2
66060: PUSH
66061: LD_INT 2
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 1
66070: PUSH
66071: LD_INT 2
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: LD_INT 1
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 2
66101: NEG
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 2
66112: NEG
66113: PUSH
66114: LD_INT 1
66116: NEG
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 2
66124: NEG
66125: PUSH
66126: LD_INT 2
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66155: LD_ADDR_VAR 0 57
66159: PUSH
66160: LD_INT 0
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 1
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: LD_INT 1
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: LD_INT 1
66228: NEG
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 1
66236: NEG
66237: PUSH
66238: LD_INT 2
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: LD_INT 2
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 2
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 2
66280: PUSH
66281: LD_INT 1
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 2
66290: PUSH
66291: LD_INT 2
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: LD_INT 2
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: LD_INT 1
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 2
66331: NEG
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 2
66342: NEG
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 2
66354: NEG
66355: PUSH
66356: LD_INT 2
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66385: LD_ADDR_VAR 0 58
66389: PUSH
66390: LD_INT 0
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: LD_INT 1
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 1
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 1
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: LD_INT 1
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 1
66443: NEG
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 1
66454: NEG
66455: PUSH
66456: LD_INT 1
66458: NEG
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: LD_INT 2
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: LD_INT 1
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 2
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: LD_INT 2
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 1
66530: PUSH
66531: LD_INT 2
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 2
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: LD_INT 1
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 2
66561: NEG
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 2
66572: NEG
66573: PUSH
66574: LD_INT 1
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 2
66584: NEG
66585: PUSH
66586: LD_INT 2
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66615: LD_ADDR_VAR 0 59
66619: PUSH
66620: LD_INT 0
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: LD_INT 1
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: LD_INT 1
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: LD_INT 1
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 1
66673: NEG
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 1
66684: NEG
66685: PUSH
66686: LD_INT 1
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66703: LD_ADDR_VAR 0 60
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: LD_INT 1
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 1
66761: NEG
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66791: LD_ADDR_VAR 0 61
66795: PUSH
66796: LD_INT 0
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: LD_INT 1
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 1
66849: NEG
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 1
66860: NEG
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66879: LD_ADDR_VAR 0 62
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 1
66937: NEG
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66967: LD_ADDR_VAR 0 63
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: LD_INT 1
66987: NEG
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: LD_INT 1
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: LD_INT 1
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67055: LD_ADDR_VAR 0 64
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 0
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: ST_TO_ADDR
// end ; 1 :
67143: GO 73040
67145: LD_INT 1
67147: DOUBLE
67148: EQUAL
67149: IFTRUE 67153
67151: GO 69776
67153: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67154: LD_ADDR_VAR 0 11
67158: PUSH
67159: LD_INT 1
67161: NEG
67162: PUSH
67163: LD_INT 3
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 0
67173: PUSH
67174: LD_INT 3
67176: NEG
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 1
67184: PUSH
67185: LD_INT 2
67187: NEG
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: LIST
67197: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67198: LD_ADDR_VAR 0 12
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 3
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: LIST
67238: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67239: LD_ADDR_VAR 0 13
67243: PUSH
67244: LD_INT 3
67246: PUSH
67247: LD_INT 2
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 3
67256: PUSH
67257: LD_INT 3
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: LD_INT 3
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67279: LD_ADDR_VAR 0 14
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: LD_INT 3
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 0
67296: PUSH
67297: LD_INT 3
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 1
67306: NEG
67307: PUSH
67308: LD_INT 2
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: LIST
67319: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67320: LD_ADDR_VAR 0 15
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 3
67338: NEG
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 3
67349: NEG
67350: PUSH
67351: LD_INT 1
67353: NEG
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: LIST
67363: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67364: LD_ADDR_VAR 0 16
67368: PUSH
67369: LD_INT 2
67371: NEG
67372: PUSH
67373: LD_INT 3
67375: NEG
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 3
67383: NEG
67384: PUSH
67385: LD_INT 2
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 3
67395: NEG
67396: PUSH
67397: LD_INT 3
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: LIST
67409: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67410: LD_ADDR_VAR 0 17
67414: PUSH
67415: LD_INT 1
67417: NEG
67418: PUSH
67419: LD_INT 3
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: LD_INT 3
67432: NEG
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: LD_INT 2
67443: NEG
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: LIST
67453: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67454: LD_ADDR_VAR 0 18
67458: PUSH
67459: LD_INT 2
67461: PUSH
67462: LD_INT 1
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 3
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 3
67482: PUSH
67483: LD_INT 1
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: LIST
67494: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67495: LD_ADDR_VAR 0 19
67499: PUSH
67500: LD_INT 3
67502: PUSH
67503: LD_INT 2
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 3
67512: PUSH
67513: LD_INT 3
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 2
67522: PUSH
67523: LD_INT 3
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67535: LD_ADDR_VAR 0 20
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: LD_INT 3
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 1
67562: NEG
67563: PUSH
67564: LD_INT 2
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: LIST
67575: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67576: LD_ADDR_VAR 0 21
67580: PUSH
67581: LD_INT 2
67583: NEG
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 3
67594: NEG
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 3
67605: NEG
67606: PUSH
67607: LD_INT 1
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: LIST
67619: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67620: LD_ADDR_VAR 0 22
67624: PUSH
67625: LD_INT 2
67627: NEG
67628: PUSH
67629: LD_INT 3
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: NEG
67640: PUSH
67641: LD_INT 2
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 3
67651: NEG
67652: PUSH
67653: LD_INT 3
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: LIST
67665: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67666: LD_ADDR_VAR 0 23
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: LD_INT 3
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: NEG
67685: PUSH
67686: LD_INT 4
67688: NEG
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: LD_INT 3
67699: NEG
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: LIST
67709: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67710: LD_ADDR_VAR 0 24
67714: PUSH
67715: LD_INT 3
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 3
67727: PUSH
67728: LD_INT 1
67730: NEG
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 4
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: LIST
67750: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67751: LD_ADDR_VAR 0 25
67755: PUSH
67756: LD_INT 3
67758: PUSH
67759: LD_INT 3
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 4
67768: PUSH
67769: LD_INT 3
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 3
67778: PUSH
67779: LD_INT 4
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: LIST
67790: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67791: LD_ADDR_VAR 0 26
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: LD_INT 3
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 1
67808: PUSH
67809: LD_INT 4
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 1
67818: NEG
67819: PUSH
67820: LD_INT 3
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: LIST
67831: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67832: LD_ADDR_VAR 0 27
67836: PUSH
67837: LD_INT 3
67839: NEG
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 3
67850: NEG
67851: PUSH
67852: LD_INT 1
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 4
67861: NEG
67862: PUSH
67863: LD_INT 1
67865: NEG
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: LIST
67875: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67876: LD_ADDR_VAR 0 28
67880: PUSH
67881: LD_INT 3
67883: NEG
67884: PUSH
67885: LD_INT 3
67887: NEG
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 3
67895: NEG
67896: PUSH
67897: LD_INT 4
67899: NEG
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 4
67907: NEG
67908: PUSH
67909: LD_INT 3
67911: NEG
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: LIST
67921: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67922: LD_ADDR_VAR 0 29
67926: PUSH
67927: LD_INT 1
67929: NEG
67930: PUSH
67931: LD_INT 3
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: LD_INT 3
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 1
67952: PUSH
67953: LD_INT 2
67955: NEG
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 1
67963: NEG
67964: PUSH
67965: LD_INT 4
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 0
67975: PUSH
67976: LD_INT 4
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 1
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 1
67997: NEG
67998: PUSH
67999: LD_INT 5
68001: NEG
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: LD_INT 5
68012: NEG
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 1
68020: PUSH
68021: LD_INT 4
68023: NEG
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: PUSH
68033: LD_INT 6
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: LD_INT 6
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: LD_INT 5
68057: NEG
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68077: LD_ADDR_VAR 0 30
68081: PUSH
68082: LD_INT 2
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 3
68095: PUSH
68096: LD_INT 0
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 3
68105: PUSH
68106: LD_INT 1
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 3
68115: PUSH
68116: LD_INT 1
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 4
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 4
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 4
68146: PUSH
68147: LD_INT 1
68149: NEG
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 5
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 5
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 5
68177: PUSH
68178: LD_INT 1
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 6
68188: PUSH
68189: LD_INT 0
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 6
68198: PUSH
68199: LD_INT 1
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68220: LD_ADDR_VAR 0 31
68224: PUSH
68225: LD_INT 3
68227: PUSH
68228: LD_INT 2
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 3
68237: PUSH
68238: LD_INT 3
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 2
68247: PUSH
68248: LD_INT 3
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 4
68257: PUSH
68258: LD_INT 3
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 4
68267: PUSH
68268: LD_INT 4
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: LD_INT 4
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 5
68287: PUSH
68288: LD_INT 4
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 5
68297: PUSH
68298: LD_INT 5
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 4
68307: PUSH
68308: LD_INT 5
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 6
68317: PUSH
68318: LD_INT 5
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 6
68327: PUSH
68328: LD_INT 6
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 5
68337: PUSH
68338: LD_INT 6
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68359: LD_ADDR_VAR 0 32
68363: PUSH
68364: LD_INT 1
68366: PUSH
68367: LD_INT 3
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 0
68376: PUSH
68377: LD_INT 3
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 1
68386: NEG
68387: PUSH
68388: LD_INT 2
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 1
68397: PUSH
68398: LD_INT 4
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: LD_INT 4
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 1
68417: NEG
68418: PUSH
68419: LD_INT 3
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: LD_INT 5
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: LD_INT 5
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 1
68448: NEG
68449: PUSH
68450: LD_INT 4
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 1
68459: PUSH
68460: LD_INT 6
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: LD_INT 6
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 1
68479: NEG
68480: PUSH
68481: LD_INT 5
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68502: LD_ADDR_VAR 0 33
68506: PUSH
68507: LD_INT 2
68509: NEG
68510: PUSH
68511: LD_INT 1
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 3
68520: NEG
68521: PUSH
68522: LD_INT 0
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 3
68531: NEG
68532: PUSH
68533: LD_INT 1
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 3
68543: NEG
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 4
68554: NEG
68555: PUSH
68556: LD_INT 0
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 4
68565: NEG
68566: PUSH
68567: LD_INT 1
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 4
68577: NEG
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 5
68588: NEG
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 5
68599: NEG
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 5
68611: NEG
68612: PUSH
68613: LD_INT 1
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 6
68622: NEG
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 6
68633: NEG
68634: PUSH
68635: LD_INT 1
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68657: LD_ADDR_VAR 0 34
68661: PUSH
68662: LD_INT 2
68664: NEG
68665: PUSH
68666: LD_INT 3
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 3
68676: NEG
68677: PUSH
68678: LD_INT 2
68680: NEG
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 3
68688: NEG
68689: PUSH
68690: LD_INT 3
68692: NEG
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 3
68700: NEG
68701: PUSH
68702: LD_INT 4
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 4
68712: NEG
68713: PUSH
68714: LD_INT 3
68716: NEG
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 4
68724: NEG
68725: PUSH
68726: LD_INT 4
68728: NEG
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 4
68736: NEG
68737: PUSH
68738: LD_INT 5
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 5
68748: NEG
68749: PUSH
68750: LD_INT 4
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 5
68760: NEG
68761: PUSH
68762: LD_INT 5
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 5
68772: NEG
68773: PUSH
68774: LD_INT 6
68776: NEG
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 6
68784: NEG
68785: PUSH
68786: LD_INT 5
68788: NEG
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 6
68796: NEG
68797: PUSH
68798: LD_INT 6
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68820: LD_ADDR_VAR 0 41
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: LD_INT 2
68830: NEG
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: LD_INT 3
68842: NEG
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: LD_INT 2
68853: NEG
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: LIST
68863: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68864: LD_ADDR_VAR 0 42
68868: PUSH
68869: LD_INT 2
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 2
68881: PUSH
68882: LD_INT 1
68884: NEG
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 3
68892: PUSH
68893: LD_INT 1
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: LIST
68904: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68905: LD_ADDR_VAR 0 43
68909: PUSH
68910: LD_INT 2
68912: PUSH
68913: LD_INT 2
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 3
68922: PUSH
68923: LD_INT 2
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 2
68932: PUSH
68933: LD_INT 3
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: LIST
68944: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68945: LD_ADDR_VAR 0 44
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: LD_INT 2
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 1
68962: PUSH
68963: LD_INT 3
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: PUSH
68974: LD_INT 2
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: LIST
68985: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68986: LD_ADDR_VAR 0 45
68990: PUSH
68991: LD_INT 2
68993: NEG
68994: PUSH
68995: LD_INT 0
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 2
69004: NEG
69005: PUSH
69006: LD_INT 1
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 3
69015: NEG
69016: PUSH
69017: LD_INT 1
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69030: LD_ADDR_VAR 0 46
69034: PUSH
69035: LD_INT 2
69037: NEG
69038: PUSH
69039: LD_INT 2
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 2
69049: NEG
69050: PUSH
69051: LD_INT 3
69053: NEG
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 3
69061: NEG
69062: PUSH
69063: LD_INT 2
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: LIST
69075: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69076: LD_ADDR_VAR 0 47
69080: PUSH
69081: LD_INT 2
69083: NEG
69084: PUSH
69085: LD_INT 3
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 1
69095: NEG
69096: PUSH
69097: LD_INT 3
69099: NEG
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69109: LD_ADDR_VAR 0 48
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: LD_INT 2
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 2
69127: PUSH
69128: LD_INT 1
69130: NEG
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69140: LD_ADDR_VAR 0 49
69144: PUSH
69145: LD_INT 3
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: LD_INT 2
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69169: LD_ADDR_VAR 0 50
69173: PUSH
69174: LD_INT 2
69176: PUSH
69177: LD_INT 3
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 1
69186: PUSH
69187: LD_INT 3
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69198: LD_ADDR_VAR 0 51
69202: PUSH
69203: LD_INT 1
69205: NEG
69206: PUSH
69207: LD_INT 2
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 2
69216: NEG
69217: PUSH
69218: LD_INT 1
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69229: LD_ADDR_VAR 0 52
69233: PUSH
69234: LD_INT 3
69236: NEG
69237: PUSH
69238: LD_INT 1
69240: NEG
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 3
69248: NEG
69249: PUSH
69250: LD_INT 2
69252: NEG
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69262: LD_ADDR_VAR 0 53
69266: PUSH
69267: LD_INT 1
69269: NEG
69270: PUSH
69271: LD_INT 3
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: LD_INT 3
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: LD_INT 2
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: LIST
69305: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69306: LD_ADDR_VAR 0 54
69310: PUSH
69311: LD_INT 2
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 3
69324: PUSH
69325: LD_INT 0
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 3
69334: PUSH
69335: LD_INT 1
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: LIST
69346: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69347: LD_ADDR_VAR 0 55
69351: PUSH
69352: LD_INT 3
69354: PUSH
69355: LD_INT 2
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 3
69364: PUSH
69365: LD_INT 3
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 2
69374: PUSH
69375: LD_INT 3
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: LIST
69386: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69387: LD_ADDR_VAR 0 56
69391: PUSH
69392: LD_INT 1
69394: PUSH
69395: LD_INT 3
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 0
69404: PUSH
69405: LD_INT 3
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 1
69414: NEG
69415: PUSH
69416: LD_INT 2
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: LIST
69427: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69428: LD_ADDR_VAR 0 57
69432: PUSH
69433: LD_INT 2
69435: NEG
69436: PUSH
69437: LD_INT 1
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 3
69446: NEG
69447: PUSH
69448: LD_INT 0
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 3
69457: NEG
69458: PUSH
69459: LD_INT 1
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69472: LD_ADDR_VAR 0 58
69476: PUSH
69477: LD_INT 2
69479: NEG
69480: PUSH
69481: LD_INT 3
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 3
69491: NEG
69492: PUSH
69493: LD_INT 2
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 3
69503: NEG
69504: PUSH
69505: LD_INT 3
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: LIST
69517: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69518: LD_ADDR_VAR 0 59
69522: PUSH
69523: LD_INT 1
69525: NEG
69526: PUSH
69527: LD_INT 2
69529: NEG
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: LD_INT 2
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: LD_INT 1
69551: NEG
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: LIST
69561: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69562: LD_ADDR_VAR 0 60
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: LD_INT 1
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 2
69580: PUSH
69581: LD_INT 0
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 2
69590: PUSH
69591: LD_INT 1
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: LIST
69602: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69603: LD_ADDR_VAR 0 61
69607: PUSH
69608: LD_INT 2
69610: PUSH
69611: LD_INT 1
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 2
69620: PUSH
69621: LD_INT 2
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 1
69630: PUSH
69631: LD_INT 2
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: LIST
69642: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69643: LD_ADDR_VAR 0 62
69647: PUSH
69648: LD_INT 1
69650: PUSH
69651: LD_INT 2
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: LD_INT 2
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 1
69670: NEG
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: LIST
69683: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69684: LD_ADDR_VAR 0 63
69688: PUSH
69689: LD_INT 1
69691: NEG
69692: PUSH
69693: LD_INT 1
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 2
69702: NEG
69703: PUSH
69704: LD_INT 0
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 2
69713: NEG
69714: PUSH
69715: LD_INT 1
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: LIST
69727: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69728: LD_ADDR_VAR 0 64
69732: PUSH
69733: LD_INT 1
69735: NEG
69736: PUSH
69737: LD_INT 2
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: LD_INT 1
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 2
69759: NEG
69760: PUSH
69761: LD_INT 2
69763: NEG
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: LIST
69773: ST_TO_ADDR
// end ; 2 :
69774: GO 73040
69776: LD_INT 2
69778: DOUBLE
69779: EQUAL
69780: IFTRUE 69784
69782: GO 73039
69784: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69785: LD_ADDR_VAR 0 29
69789: PUSH
69790: LD_INT 4
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 4
69802: PUSH
69803: LD_INT 1
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 5
69813: PUSH
69814: LD_INT 0
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 5
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 4
69833: PUSH
69834: LD_INT 1
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 3
69843: PUSH
69844: LD_INT 0
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 3
69853: PUSH
69854: LD_INT 1
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 3
69864: PUSH
69865: LD_INT 2
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 5
69875: PUSH
69876: LD_INT 2
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 3
69885: PUSH
69886: LD_INT 3
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 3
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 4
69905: PUSH
69906: LD_INT 3
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 4
69915: PUSH
69916: LD_INT 4
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 3
69925: PUSH
69926: LD_INT 4
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 2
69935: PUSH
69936: LD_INT 3
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 2
69945: PUSH
69946: LD_INT 2
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 4
69955: PUSH
69956: LD_INT 2
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 2
69965: PUSH
69966: LD_INT 4
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: LD_INT 4
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 0
69985: PUSH
69986: LD_INT 3
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 1
69995: PUSH
69996: LD_INT 4
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 1
70005: PUSH
70006: LD_INT 5
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: LD_INT 5
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 1
70025: NEG
70026: PUSH
70027: LD_INT 4
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 1
70036: NEG
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 2
70047: PUSH
70048: LD_INT 5
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 2
70057: NEG
70058: PUSH
70059: LD_INT 3
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 3
70068: NEG
70069: PUSH
70070: LD_INT 0
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 3
70079: NEG
70080: PUSH
70081: LD_INT 1
70083: NEG
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 2
70091: NEG
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 2
70102: NEG
70103: PUSH
70104: LD_INT 1
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 3
70113: NEG
70114: PUSH
70115: LD_INT 1
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 4
70124: NEG
70125: PUSH
70126: LD_INT 0
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 4
70135: NEG
70136: PUSH
70137: LD_INT 1
70139: NEG
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 4
70147: NEG
70148: PUSH
70149: LD_INT 2
70151: NEG
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 2
70159: NEG
70160: PUSH
70161: LD_INT 2
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 4
70170: NEG
70171: PUSH
70172: LD_INT 4
70174: NEG
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 4
70182: NEG
70183: PUSH
70184: LD_INT 5
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 3
70194: NEG
70195: PUSH
70196: LD_INT 4
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 3
70206: NEG
70207: PUSH
70208: LD_INT 3
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 4
70218: NEG
70219: PUSH
70220: LD_INT 3
70222: NEG
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 5
70230: NEG
70231: PUSH
70232: LD_INT 4
70234: NEG
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 5
70242: NEG
70243: PUSH
70244: LD_INT 5
70246: NEG
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 3
70254: NEG
70255: PUSH
70256: LD_INT 5
70258: NEG
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 5
70266: NEG
70267: PUSH
70268: LD_INT 3
70270: NEG
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70323: LD_ADDR_VAR 0 30
70327: PUSH
70328: LD_INT 4
70330: PUSH
70331: LD_INT 4
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 4
70340: PUSH
70341: LD_INT 3
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 5
70350: PUSH
70351: LD_INT 4
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 5
70360: PUSH
70361: LD_INT 5
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 4
70370: PUSH
70371: LD_INT 5
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 3
70380: PUSH
70381: LD_INT 4
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 3
70390: PUSH
70391: LD_INT 3
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 5
70400: PUSH
70401: LD_INT 3
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: LD_INT 5
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: LD_INT 3
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 0
70430: PUSH
70431: LD_INT 2
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 1
70440: PUSH
70441: LD_INT 3
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 1
70450: PUSH
70451: LD_INT 4
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 1
70470: NEG
70471: PUSH
70472: LD_INT 3
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 1
70481: NEG
70482: PUSH
70483: LD_INT 2
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 2
70492: PUSH
70493: LD_INT 4
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 2
70502: NEG
70503: PUSH
70504: LD_INT 2
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 4
70513: NEG
70514: PUSH
70515: LD_INT 0
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 4
70524: NEG
70525: PUSH
70526: LD_INT 1
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 3
70536: NEG
70537: PUSH
70538: LD_INT 0
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 3
70547: NEG
70548: PUSH
70549: LD_INT 1
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 4
70558: NEG
70559: PUSH
70560: LD_INT 1
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 5
70569: NEG
70570: PUSH
70571: LD_INT 0
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 5
70580: NEG
70581: PUSH
70582: LD_INT 1
70584: NEG
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 5
70592: NEG
70593: PUSH
70594: LD_INT 2
70596: NEG
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 3
70604: NEG
70605: PUSH
70606: LD_INT 2
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 3
70615: NEG
70616: PUSH
70617: LD_INT 3
70619: NEG
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 3
70627: NEG
70628: PUSH
70629: LD_INT 4
70631: NEG
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 2
70639: NEG
70640: PUSH
70641: LD_INT 3
70643: NEG
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 2
70651: NEG
70652: PUSH
70653: LD_INT 2
70655: NEG
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 3
70663: NEG
70664: PUSH
70665: LD_INT 2
70667: NEG
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 4
70675: NEG
70676: PUSH
70677: LD_INT 3
70679: NEG
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 4
70687: NEG
70688: PUSH
70689: LD_INT 4
70691: NEG
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 2
70699: NEG
70700: PUSH
70701: LD_INT 4
70703: NEG
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 4
70711: NEG
70712: PUSH
70713: LD_INT 2
70715: NEG
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 0
70723: PUSH
70724: LD_INT 4
70726: NEG
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: LD_INT 5
70737: NEG
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 1
70745: PUSH
70746: LD_INT 4
70748: NEG
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 1
70756: PUSH
70757: LD_INT 3
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 0
70767: PUSH
70768: LD_INT 3
70770: NEG
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 1
70778: NEG
70779: PUSH
70780: LD_INT 4
70782: NEG
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 1
70790: NEG
70791: PUSH
70792: LD_INT 5
70794: NEG
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 2
70802: PUSH
70803: LD_INT 3
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 2
70813: NEG
70814: PUSH
70815: LD_INT 5
70817: NEG
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70870: LD_ADDR_VAR 0 31
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: LD_INT 4
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 0
70887: PUSH
70888: LD_INT 3
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 1
70897: PUSH
70898: LD_INT 4
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 1
70907: PUSH
70908: LD_INT 5
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 0
70917: PUSH
70918: LD_INT 5
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 1
70927: NEG
70928: PUSH
70929: LD_INT 4
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 1
70938: NEG
70939: PUSH
70940: LD_INT 3
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 2
70949: PUSH
70950: LD_INT 5
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 2
70959: NEG
70960: PUSH
70961: LD_INT 3
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 3
70970: NEG
70971: PUSH
70972: LD_INT 0
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 3
70981: NEG
70982: PUSH
70983: LD_INT 1
70985: NEG
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 2
70993: NEG
70994: PUSH
70995: LD_INT 0
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 2
71004: NEG
71005: PUSH
71006: LD_INT 1
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 3
71015: NEG
71016: PUSH
71017: LD_INT 1
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 4
71026: NEG
71027: PUSH
71028: LD_INT 0
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 4
71037: NEG
71038: PUSH
71039: LD_INT 1
71041: NEG
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 4
71049: NEG
71050: PUSH
71051: LD_INT 2
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 2
71061: NEG
71062: PUSH
71063: LD_INT 2
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 4
71072: NEG
71073: PUSH
71074: LD_INT 4
71076: NEG
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 4
71084: NEG
71085: PUSH
71086: LD_INT 5
71088: NEG
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 3
71096: NEG
71097: PUSH
71098: LD_INT 4
71100: NEG
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 3
71108: NEG
71109: PUSH
71110: LD_INT 3
71112: NEG
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 4
71120: NEG
71121: PUSH
71122: LD_INT 3
71124: NEG
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: LD_INT 5
71132: NEG
71133: PUSH
71134: LD_INT 4
71136: NEG
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 5
71144: NEG
71145: PUSH
71146: LD_INT 5
71148: NEG
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 3
71156: NEG
71157: PUSH
71158: LD_INT 5
71160: NEG
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 5
71168: NEG
71169: PUSH
71170: LD_INT 3
71172: NEG
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 0
71180: PUSH
71181: LD_INT 3
71183: NEG
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 0
71191: PUSH
71192: LD_INT 4
71194: NEG
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 1
71202: PUSH
71203: LD_INT 3
71205: NEG
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 1
71213: PUSH
71214: LD_INT 2
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 0
71224: PUSH
71225: LD_INT 2
71227: NEG
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 1
71235: NEG
71236: PUSH
71237: LD_INT 3
71239: NEG
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 1
71247: NEG
71248: PUSH
71249: LD_INT 4
71251: NEG
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 2
71259: PUSH
71260: LD_INT 2
71262: NEG
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 2
71270: NEG
71271: PUSH
71272: LD_INT 4
71274: NEG
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 4
71282: PUSH
71283: LD_INT 0
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 4
71292: PUSH
71293: LD_INT 1
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 5
71303: PUSH
71304: LD_INT 0
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 5
71313: PUSH
71314: LD_INT 1
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 4
71323: PUSH
71324: LD_INT 1
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 3
71333: PUSH
71334: LD_INT 0
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 3
71343: PUSH
71344: LD_INT 1
71346: NEG
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 3
71354: PUSH
71355: LD_INT 2
71357: NEG
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 5
71365: PUSH
71366: LD_INT 2
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71420: LD_ADDR_VAR 0 32
71424: PUSH
71425: LD_INT 4
71427: NEG
71428: PUSH
71429: LD_INT 0
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 4
71438: NEG
71439: PUSH
71440: LD_INT 1
71442: NEG
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 3
71450: NEG
71451: PUSH
71452: LD_INT 0
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 3
71461: NEG
71462: PUSH
71463: LD_INT 1
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 4
71472: NEG
71473: PUSH
71474: LD_INT 1
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 5
71483: NEG
71484: PUSH
71485: LD_INT 0
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 5
71494: NEG
71495: PUSH
71496: LD_INT 1
71498: NEG
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 5
71506: NEG
71507: PUSH
71508: LD_INT 2
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 3
71518: NEG
71519: PUSH
71520: LD_INT 2
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 3
71529: NEG
71530: PUSH
71531: LD_INT 3
71533: NEG
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 3
71541: NEG
71542: PUSH
71543: LD_INT 4
71545: NEG
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 2
71553: NEG
71554: PUSH
71555: LD_INT 3
71557: NEG
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 2
71565: NEG
71566: PUSH
71567: LD_INT 2
71569: NEG
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 3
71577: NEG
71578: PUSH
71579: LD_INT 2
71581: NEG
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 4
71589: NEG
71590: PUSH
71591: LD_INT 3
71593: NEG
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 4
71601: NEG
71602: PUSH
71603: LD_INT 4
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 2
71613: NEG
71614: PUSH
71615: LD_INT 4
71617: NEG
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 4
71625: NEG
71626: PUSH
71627: LD_INT 2
71629: NEG
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 0
71637: PUSH
71638: LD_INT 4
71640: NEG
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 0
71648: PUSH
71649: LD_INT 5
71651: NEG
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 1
71659: PUSH
71660: LD_INT 4
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 1
71670: PUSH
71671: LD_INT 3
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 0
71681: PUSH
71682: LD_INT 3
71684: NEG
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 1
71692: NEG
71693: PUSH
71694: LD_INT 4
71696: NEG
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 1
71704: NEG
71705: PUSH
71706: LD_INT 5
71708: NEG
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_INT 2
71716: PUSH
71717: LD_INT 3
71719: NEG
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 2
71727: NEG
71728: PUSH
71729: LD_INT 5
71731: NEG
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 3
71739: PUSH
71740: LD_INT 0
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 3
71749: PUSH
71750: LD_INT 1
71752: NEG
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 4
71760: PUSH
71761: LD_INT 0
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 4
71770: PUSH
71771: LD_INT 1
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 3
71780: PUSH
71781: LD_INT 1
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 2
71790: PUSH
71791: LD_INT 0
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 2
71800: PUSH
71801: LD_INT 1
71803: NEG
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 2
71811: PUSH
71812: LD_INT 2
71814: NEG
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PUSH
71820: LD_INT 4
71822: PUSH
71823: LD_INT 2
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 4
71832: PUSH
71833: LD_INT 4
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 4
71842: PUSH
71843: LD_INT 3
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: PUSH
71850: LD_INT 5
71852: PUSH
71853: LD_INT 4
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 5
71862: PUSH
71863: LD_INT 5
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 4
71872: PUSH
71873: LD_INT 5
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 3
71882: PUSH
71883: LD_INT 4
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 3
71892: PUSH
71893: LD_INT 3
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 5
71902: PUSH
71903: LD_INT 3
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 3
71912: PUSH
71913: LD_INT 5
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71967: LD_ADDR_VAR 0 33
71971: PUSH
71972: LD_INT 4
71974: NEG
71975: PUSH
71976: LD_INT 4
71978: NEG
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: LD_INT 4
71986: NEG
71987: PUSH
71988: LD_INT 5
71990: NEG
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 3
71998: NEG
71999: PUSH
72000: LD_INT 4
72002: NEG
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 3
72010: NEG
72011: PUSH
72012: LD_INT 3
72014: NEG
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 4
72022: NEG
72023: PUSH
72024: LD_INT 3
72026: NEG
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 5
72034: NEG
72035: PUSH
72036: LD_INT 4
72038: NEG
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 5
72046: NEG
72047: PUSH
72048: LD_INT 5
72050: NEG
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 3
72058: NEG
72059: PUSH
72060: LD_INT 5
72062: NEG
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: LD_INT 5
72070: NEG
72071: PUSH
72072: LD_INT 3
72074: NEG
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 0
72082: PUSH
72083: LD_INT 3
72085: NEG
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 0
72093: PUSH
72094: LD_INT 4
72096: NEG
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 1
72104: PUSH
72105: LD_INT 3
72107: NEG
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 1
72115: PUSH
72116: LD_INT 2
72118: NEG
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: LD_INT 2
72129: NEG
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 1
72137: NEG
72138: PUSH
72139: LD_INT 3
72141: NEG
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: PUSH
72147: LD_INT 1
72149: NEG
72150: PUSH
72151: LD_INT 4
72153: NEG
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PUSH
72159: LD_INT 2
72161: PUSH
72162: LD_INT 2
72164: NEG
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 2
72172: NEG
72173: PUSH
72174: LD_INT 4
72176: NEG
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 4
72184: PUSH
72185: LD_INT 0
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 4
72194: PUSH
72195: LD_INT 1
72197: NEG
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 5
72205: PUSH
72206: LD_INT 0
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 5
72215: PUSH
72216: LD_INT 1
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: LD_INT 4
72225: PUSH
72226: LD_INT 1
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 3
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 3
72245: PUSH
72246: LD_INT 1
72248: NEG
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 3
72256: PUSH
72257: LD_INT 2
72259: NEG
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 5
72267: PUSH
72268: LD_INT 2
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 3
72277: PUSH
72278: LD_INT 3
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 3
72287: PUSH
72288: LD_INT 2
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 4
72297: PUSH
72298: LD_INT 3
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 4
72307: PUSH
72308: LD_INT 4
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 3
72317: PUSH
72318: LD_INT 4
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 2
72327: PUSH
72328: LD_INT 3
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 2
72337: PUSH
72338: LD_INT 2
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 4
72347: PUSH
72348: LD_INT 2
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 2
72357: PUSH
72358: LD_INT 4
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 0
72367: PUSH
72368: LD_INT 4
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: LD_INT 3
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 1
72387: PUSH
72388: LD_INT 4
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 1
72397: PUSH
72398: LD_INT 5
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 0
72407: PUSH
72408: LD_INT 5
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 1
72417: NEG
72418: PUSH
72419: LD_INT 4
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 1
72428: NEG
72429: PUSH
72430: LD_INT 3
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 2
72439: PUSH
72440: LD_INT 5
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 2
72449: NEG
72450: PUSH
72451: LD_INT 3
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72505: LD_ADDR_VAR 0 34
72509: PUSH
72510: LD_INT 0
72512: PUSH
72513: LD_INT 4
72515: NEG
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 0
72523: PUSH
72524: LD_INT 5
72526: NEG
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 1
72534: PUSH
72535: LD_INT 4
72537: NEG
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 1
72545: PUSH
72546: LD_INT 3
72548: NEG
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 0
72556: PUSH
72557: LD_INT 3
72559: NEG
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 1
72567: NEG
72568: PUSH
72569: LD_INT 4
72571: NEG
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 1
72579: NEG
72580: PUSH
72581: LD_INT 5
72583: NEG
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 2
72591: PUSH
72592: LD_INT 3
72594: NEG
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 2
72602: NEG
72603: PUSH
72604: LD_INT 5
72606: NEG
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 3
72614: PUSH
72615: LD_INT 0
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 3
72624: PUSH
72625: LD_INT 1
72627: NEG
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 4
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 4
72645: PUSH
72646: LD_INT 1
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 3
72655: PUSH
72656: LD_INT 1
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 2
72665: PUSH
72666: LD_INT 0
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 2
72675: PUSH
72676: LD_INT 1
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 2
72686: PUSH
72687: LD_INT 2
72689: NEG
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 4
72697: PUSH
72698: LD_INT 2
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 4
72707: PUSH
72708: LD_INT 4
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: PUSH
72715: LD_INT 4
72717: PUSH
72718: LD_INT 3
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 5
72727: PUSH
72728: LD_INT 4
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 5
72737: PUSH
72738: LD_INT 5
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 4
72747: PUSH
72748: LD_INT 5
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 3
72757: PUSH
72758: LD_INT 4
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 3
72767: PUSH
72768: LD_INT 3
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: LD_INT 5
72777: PUSH
72778: LD_INT 3
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: LD_INT 3
72787: PUSH
72788: LD_INT 5
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 0
72797: PUSH
72798: LD_INT 3
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PUSH
72805: LD_INT 0
72807: PUSH
72808: LD_INT 2
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: LD_INT 1
72817: PUSH
72818: LD_INT 3
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 1
72827: PUSH
72828: LD_INT 4
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 0
72837: PUSH
72838: LD_INT 4
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 1
72847: NEG
72848: PUSH
72849: LD_INT 3
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 1
72858: NEG
72859: PUSH
72860: LD_INT 2
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 2
72869: PUSH
72870: LD_INT 4
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 2
72879: NEG
72880: PUSH
72881: LD_INT 2
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_INT 4
72890: NEG
72891: PUSH
72892: LD_INT 0
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 4
72901: NEG
72902: PUSH
72903: LD_INT 1
72905: NEG
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 3
72913: NEG
72914: PUSH
72915: LD_INT 0
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 3
72924: NEG
72925: PUSH
72926: LD_INT 1
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: LD_INT 4
72935: NEG
72936: PUSH
72937: LD_INT 1
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: LD_INT 5
72946: NEG
72947: PUSH
72948: LD_INT 0
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 5
72957: NEG
72958: PUSH
72959: LD_INT 1
72961: NEG
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_INT 5
72969: NEG
72970: PUSH
72971: LD_INT 2
72973: NEG
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: LD_INT 3
72981: NEG
72982: PUSH
72983: LD_INT 2
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: ST_TO_ADDR
// end ; end ;
73037: GO 73040
73039: POP
// case btype of b_depot , b_warehouse :
73040: LD_VAR 0 1
73044: PUSH
73045: LD_INT 0
73047: DOUBLE
73048: EQUAL
73049: IFTRUE 73059
73051: LD_INT 1
73053: DOUBLE
73054: EQUAL
73055: IFTRUE 73059
73057: GO 73260
73059: POP
// case nation of nation_american :
73060: LD_VAR 0 5
73064: PUSH
73065: LD_INT 1
73067: DOUBLE
73068: EQUAL
73069: IFTRUE 73073
73071: GO 73129
73073: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73074: LD_ADDR_VAR 0 9
73078: PUSH
73079: LD_VAR 0 11
73083: PUSH
73084: LD_VAR 0 12
73088: PUSH
73089: LD_VAR 0 13
73093: PUSH
73094: LD_VAR 0 14
73098: PUSH
73099: LD_VAR 0 15
73103: PUSH
73104: LD_VAR 0 16
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: PUSH
73117: LD_VAR 0 4
73121: PUSH
73122: LD_INT 1
73124: PLUS
73125: ARRAY
73126: ST_TO_ADDR
73127: GO 73258
73129: LD_INT 2
73131: DOUBLE
73132: EQUAL
73133: IFTRUE 73137
73135: GO 73193
73137: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73138: LD_ADDR_VAR 0 9
73142: PUSH
73143: LD_VAR 0 17
73147: PUSH
73148: LD_VAR 0 18
73152: PUSH
73153: LD_VAR 0 19
73157: PUSH
73158: LD_VAR 0 20
73162: PUSH
73163: LD_VAR 0 21
73167: PUSH
73168: LD_VAR 0 22
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: PUSH
73181: LD_VAR 0 4
73185: PUSH
73186: LD_INT 1
73188: PLUS
73189: ARRAY
73190: ST_TO_ADDR
73191: GO 73258
73193: LD_INT 3
73195: DOUBLE
73196: EQUAL
73197: IFTRUE 73201
73199: GO 73257
73201: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73202: LD_ADDR_VAR 0 9
73206: PUSH
73207: LD_VAR 0 23
73211: PUSH
73212: LD_VAR 0 24
73216: PUSH
73217: LD_VAR 0 25
73221: PUSH
73222: LD_VAR 0 26
73226: PUSH
73227: LD_VAR 0 27
73231: PUSH
73232: LD_VAR 0 28
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: PUSH
73245: LD_VAR 0 4
73249: PUSH
73250: LD_INT 1
73252: PLUS
73253: ARRAY
73254: ST_TO_ADDR
73255: GO 73258
73257: POP
73258: GO 73813
73260: LD_INT 2
73262: DOUBLE
73263: EQUAL
73264: IFTRUE 73274
73266: LD_INT 3
73268: DOUBLE
73269: EQUAL
73270: IFTRUE 73274
73272: GO 73330
73274: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73275: LD_ADDR_VAR 0 9
73279: PUSH
73280: LD_VAR 0 29
73284: PUSH
73285: LD_VAR 0 30
73289: PUSH
73290: LD_VAR 0 31
73294: PUSH
73295: LD_VAR 0 32
73299: PUSH
73300: LD_VAR 0 33
73304: PUSH
73305: LD_VAR 0 34
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: PUSH
73318: LD_VAR 0 4
73322: PUSH
73323: LD_INT 1
73325: PLUS
73326: ARRAY
73327: ST_TO_ADDR
73328: GO 73813
73330: LD_INT 16
73332: DOUBLE
73333: EQUAL
73334: IFTRUE 73392
73336: LD_INT 17
73338: DOUBLE
73339: EQUAL
73340: IFTRUE 73392
73342: LD_INT 18
73344: DOUBLE
73345: EQUAL
73346: IFTRUE 73392
73348: LD_INT 19
73350: DOUBLE
73351: EQUAL
73352: IFTRUE 73392
73354: LD_INT 22
73356: DOUBLE
73357: EQUAL
73358: IFTRUE 73392
73360: LD_INT 20
73362: DOUBLE
73363: EQUAL
73364: IFTRUE 73392
73366: LD_INT 21
73368: DOUBLE
73369: EQUAL
73370: IFTRUE 73392
73372: LD_INT 23
73374: DOUBLE
73375: EQUAL
73376: IFTRUE 73392
73378: LD_INT 24
73380: DOUBLE
73381: EQUAL
73382: IFTRUE 73392
73384: LD_INT 25
73386: DOUBLE
73387: EQUAL
73388: IFTRUE 73392
73390: GO 73448
73392: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73393: LD_ADDR_VAR 0 9
73397: PUSH
73398: LD_VAR 0 35
73402: PUSH
73403: LD_VAR 0 36
73407: PUSH
73408: LD_VAR 0 37
73412: PUSH
73413: LD_VAR 0 38
73417: PUSH
73418: LD_VAR 0 39
73422: PUSH
73423: LD_VAR 0 40
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: LIST
73435: PUSH
73436: LD_VAR 0 4
73440: PUSH
73441: LD_INT 1
73443: PLUS
73444: ARRAY
73445: ST_TO_ADDR
73446: GO 73813
73448: LD_INT 6
73450: DOUBLE
73451: EQUAL
73452: IFTRUE 73504
73454: LD_INT 7
73456: DOUBLE
73457: EQUAL
73458: IFTRUE 73504
73460: LD_INT 8
73462: DOUBLE
73463: EQUAL
73464: IFTRUE 73504
73466: LD_INT 13
73468: DOUBLE
73469: EQUAL
73470: IFTRUE 73504
73472: LD_INT 12
73474: DOUBLE
73475: EQUAL
73476: IFTRUE 73504
73478: LD_INT 15
73480: DOUBLE
73481: EQUAL
73482: IFTRUE 73504
73484: LD_INT 11
73486: DOUBLE
73487: EQUAL
73488: IFTRUE 73504
73490: LD_INT 14
73492: DOUBLE
73493: EQUAL
73494: IFTRUE 73504
73496: LD_INT 10
73498: DOUBLE
73499: EQUAL
73500: IFTRUE 73504
73502: GO 73560
73504: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73505: LD_ADDR_VAR 0 9
73509: PUSH
73510: LD_VAR 0 41
73514: PUSH
73515: LD_VAR 0 42
73519: PUSH
73520: LD_VAR 0 43
73524: PUSH
73525: LD_VAR 0 44
73529: PUSH
73530: LD_VAR 0 45
73534: PUSH
73535: LD_VAR 0 46
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: PUSH
73548: LD_VAR 0 4
73552: PUSH
73553: LD_INT 1
73555: PLUS
73556: ARRAY
73557: ST_TO_ADDR
73558: GO 73813
73560: LD_INT 36
73562: DOUBLE
73563: EQUAL
73564: IFTRUE 73568
73566: GO 73624
73568: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73569: LD_ADDR_VAR 0 9
73573: PUSH
73574: LD_VAR 0 47
73578: PUSH
73579: LD_VAR 0 48
73583: PUSH
73584: LD_VAR 0 49
73588: PUSH
73589: LD_VAR 0 50
73593: PUSH
73594: LD_VAR 0 51
73598: PUSH
73599: LD_VAR 0 52
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: PUSH
73612: LD_VAR 0 4
73616: PUSH
73617: LD_INT 1
73619: PLUS
73620: ARRAY
73621: ST_TO_ADDR
73622: GO 73813
73624: LD_INT 4
73626: DOUBLE
73627: EQUAL
73628: IFTRUE 73650
73630: LD_INT 5
73632: DOUBLE
73633: EQUAL
73634: IFTRUE 73650
73636: LD_INT 34
73638: DOUBLE
73639: EQUAL
73640: IFTRUE 73650
73642: LD_INT 37
73644: DOUBLE
73645: EQUAL
73646: IFTRUE 73650
73648: GO 73706
73650: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73651: LD_ADDR_VAR 0 9
73655: PUSH
73656: LD_VAR 0 53
73660: PUSH
73661: LD_VAR 0 54
73665: PUSH
73666: LD_VAR 0 55
73670: PUSH
73671: LD_VAR 0 56
73675: PUSH
73676: LD_VAR 0 57
73680: PUSH
73681: LD_VAR 0 58
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: PUSH
73694: LD_VAR 0 4
73698: PUSH
73699: LD_INT 1
73701: PLUS
73702: ARRAY
73703: ST_TO_ADDR
73704: GO 73813
73706: LD_INT 31
73708: DOUBLE
73709: EQUAL
73710: IFTRUE 73756
73712: LD_INT 32
73714: DOUBLE
73715: EQUAL
73716: IFTRUE 73756
73718: LD_INT 33
73720: DOUBLE
73721: EQUAL
73722: IFTRUE 73756
73724: LD_INT 27
73726: DOUBLE
73727: EQUAL
73728: IFTRUE 73756
73730: LD_INT 26
73732: DOUBLE
73733: EQUAL
73734: IFTRUE 73756
73736: LD_INT 28
73738: DOUBLE
73739: EQUAL
73740: IFTRUE 73756
73742: LD_INT 29
73744: DOUBLE
73745: EQUAL
73746: IFTRUE 73756
73748: LD_INT 30
73750: DOUBLE
73751: EQUAL
73752: IFTRUE 73756
73754: GO 73812
73756: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73757: LD_ADDR_VAR 0 9
73761: PUSH
73762: LD_VAR 0 59
73766: PUSH
73767: LD_VAR 0 60
73771: PUSH
73772: LD_VAR 0 61
73776: PUSH
73777: LD_VAR 0 62
73781: PUSH
73782: LD_VAR 0 63
73786: PUSH
73787: LD_VAR 0 64
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: PUSH
73800: LD_VAR 0 4
73804: PUSH
73805: LD_INT 1
73807: PLUS
73808: ARRAY
73809: ST_TO_ADDR
73810: GO 73813
73812: POP
// temp_list2 = [ ] ;
73813: LD_ADDR_VAR 0 10
73817: PUSH
73818: EMPTY
73819: ST_TO_ADDR
// for i in temp_list do
73820: LD_ADDR_VAR 0 8
73824: PUSH
73825: LD_VAR 0 9
73829: PUSH
73830: FOR_IN
73831: IFFALSE 73883
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73833: LD_ADDR_VAR 0 10
73837: PUSH
73838: LD_VAR 0 10
73842: PUSH
73843: LD_VAR 0 8
73847: PUSH
73848: LD_INT 1
73850: ARRAY
73851: PUSH
73852: LD_VAR 0 2
73856: PLUS
73857: PUSH
73858: LD_VAR 0 8
73862: PUSH
73863: LD_INT 2
73865: ARRAY
73866: PUSH
73867: LD_VAR 0 3
73871: PLUS
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: EMPTY
73878: LIST
73879: ADD
73880: ST_TO_ADDR
73881: GO 73830
73883: POP
73884: POP
// result = temp_list2 ;
73885: LD_ADDR_VAR 0 7
73889: PUSH
73890: LD_VAR 0 10
73894: ST_TO_ADDR
// end ;
73895: LD_VAR 0 7
73899: RET
// export function EnemyInRange ( unit , dist ) ; begin
73900: LD_INT 0
73902: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73903: LD_ADDR_VAR 0 3
73907: PUSH
73908: LD_VAR 0 1
73912: PPUSH
73913: CALL_OW 255
73917: PPUSH
73918: LD_VAR 0 1
73922: PPUSH
73923: CALL_OW 250
73927: PPUSH
73928: LD_VAR 0 1
73932: PPUSH
73933: CALL_OW 251
73937: PPUSH
73938: LD_VAR 0 2
73942: PPUSH
73943: CALL 47273 0 4
73947: PUSH
73948: LD_INT 4
73950: ARRAY
73951: ST_TO_ADDR
// end ;
73952: LD_VAR 0 3
73956: RET
// export function PlayerSeeMe ( unit ) ; begin
73957: LD_INT 0
73959: PPUSH
// result := See ( your_side , unit ) ;
73960: LD_ADDR_VAR 0 2
73964: PUSH
73965: LD_OWVAR 2
73969: PPUSH
73970: LD_VAR 0 1
73974: PPUSH
73975: CALL_OW 292
73979: ST_TO_ADDR
// end ;
73980: LD_VAR 0 2
73984: RET
// export function ReverseDir ( unit ) ; begin
73985: LD_INT 0
73987: PPUSH
// if not unit then
73988: LD_VAR 0 1
73992: NOT
73993: IFFALSE 73997
// exit ;
73995: GO 74020
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73997: LD_ADDR_VAR 0 2
74001: PUSH
74002: LD_VAR 0 1
74006: PPUSH
74007: CALL_OW 254
74011: PUSH
74012: LD_INT 3
74014: PLUS
74015: PUSH
74016: LD_INT 6
74018: MOD
74019: ST_TO_ADDR
// end ;
74020: LD_VAR 0 2
74024: RET
// export function ReverseArray ( array ) ; var i ; begin
74025: LD_INT 0
74027: PPUSH
74028: PPUSH
// if not array then
74029: LD_VAR 0 1
74033: NOT
74034: IFFALSE 74038
// exit ;
74036: GO 74093
// result := [ ] ;
74038: LD_ADDR_VAR 0 2
74042: PUSH
74043: EMPTY
74044: ST_TO_ADDR
// for i := array downto 1 do
74045: LD_ADDR_VAR 0 3
74049: PUSH
74050: DOUBLE
74051: LD_VAR 0 1
74055: INC
74056: ST_TO_ADDR
74057: LD_INT 1
74059: PUSH
74060: FOR_DOWNTO
74061: IFFALSE 74091
// result := Join ( result , array [ i ] ) ;
74063: LD_ADDR_VAR 0 2
74067: PUSH
74068: LD_VAR 0 2
74072: PPUSH
74073: LD_VAR 0 1
74077: PUSH
74078: LD_VAR 0 3
74082: ARRAY
74083: PPUSH
74084: CALL 78738 0 2
74088: ST_TO_ADDR
74089: GO 74060
74091: POP
74092: POP
// end ;
74093: LD_VAR 0 2
74097: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74098: LD_INT 0
74100: PPUSH
74101: PPUSH
74102: PPUSH
74103: PPUSH
74104: PPUSH
74105: PPUSH
// if not unit or not hexes then
74106: LD_VAR 0 1
74110: NOT
74111: PUSH
74112: LD_VAR 0 2
74116: NOT
74117: OR
74118: IFFALSE 74122
// exit ;
74120: GO 74245
// dist := 9999 ;
74122: LD_ADDR_VAR 0 5
74126: PUSH
74127: LD_INT 9999
74129: ST_TO_ADDR
// for i = 1 to hexes do
74130: LD_ADDR_VAR 0 4
74134: PUSH
74135: DOUBLE
74136: LD_INT 1
74138: DEC
74139: ST_TO_ADDR
74140: LD_VAR 0 2
74144: PUSH
74145: FOR_TO
74146: IFFALSE 74233
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74148: LD_ADDR_VAR 0 6
74152: PUSH
74153: LD_VAR 0 1
74157: PPUSH
74158: LD_VAR 0 2
74162: PUSH
74163: LD_VAR 0 4
74167: ARRAY
74168: PUSH
74169: LD_INT 1
74171: ARRAY
74172: PPUSH
74173: LD_VAR 0 2
74177: PUSH
74178: LD_VAR 0 4
74182: ARRAY
74183: PUSH
74184: LD_INT 2
74186: ARRAY
74187: PPUSH
74188: CALL_OW 297
74192: ST_TO_ADDR
// if tdist < dist then
74193: LD_VAR 0 6
74197: PUSH
74198: LD_VAR 0 5
74202: LESS
74203: IFFALSE 74231
// begin hex := hexes [ i ] ;
74205: LD_ADDR_VAR 0 8
74209: PUSH
74210: LD_VAR 0 2
74214: PUSH
74215: LD_VAR 0 4
74219: ARRAY
74220: ST_TO_ADDR
// dist := tdist ;
74221: LD_ADDR_VAR 0 5
74225: PUSH
74226: LD_VAR 0 6
74230: ST_TO_ADDR
// end ; end ;
74231: GO 74145
74233: POP
74234: POP
// result := hex ;
74235: LD_ADDR_VAR 0 3
74239: PUSH
74240: LD_VAR 0 8
74244: ST_TO_ADDR
// end ;
74245: LD_VAR 0 3
74249: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74250: LD_INT 0
74252: PPUSH
74253: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74254: LD_VAR 0 1
74258: NOT
74259: PUSH
74260: LD_VAR 0 1
74264: PUSH
74265: LD_INT 21
74267: PUSH
74268: LD_INT 2
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: PUSH
74275: LD_INT 23
74277: PUSH
74278: LD_INT 2
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PPUSH
74289: CALL_OW 69
74293: IN
74294: NOT
74295: OR
74296: IFFALSE 74300
// exit ;
74298: GO 74347
// for i = 1 to 3 do
74300: LD_ADDR_VAR 0 3
74304: PUSH
74305: DOUBLE
74306: LD_INT 1
74308: DEC
74309: ST_TO_ADDR
74310: LD_INT 3
74312: PUSH
74313: FOR_TO
74314: IFFALSE 74345
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74316: LD_VAR 0 1
74320: PPUSH
74321: CALL_OW 250
74325: PPUSH
74326: LD_VAR 0 1
74330: PPUSH
74331: CALL_OW 251
74335: PPUSH
74336: LD_INT 1
74338: PPUSH
74339: CALL_OW 453
74343: GO 74313
74345: POP
74346: POP
// end ;
74347: LD_VAR 0 2
74351: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74352: LD_INT 0
74354: PPUSH
74355: PPUSH
74356: PPUSH
74357: PPUSH
74358: PPUSH
74359: PPUSH
// if not unit or not enemy_unit then
74360: LD_VAR 0 1
74364: NOT
74365: PUSH
74366: LD_VAR 0 2
74370: NOT
74371: OR
74372: IFFALSE 74376
// exit ;
74374: GO 74843
// if GetLives ( i ) < 250 then
74376: LD_VAR 0 4
74380: PPUSH
74381: CALL_OW 256
74385: PUSH
74386: LD_INT 250
74388: LESS
74389: IFFALSE 74402
// begin ComAutodestruct ( i ) ;
74391: LD_VAR 0 4
74395: PPUSH
74396: CALL 74250 0 1
// exit ;
74400: GO 74843
// end ; x := GetX ( enemy_unit ) ;
74402: LD_ADDR_VAR 0 7
74406: PUSH
74407: LD_VAR 0 2
74411: PPUSH
74412: CALL_OW 250
74416: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74417: LD_ADDR_VAR 0 8
74421: PUSH
74422: LD_VAR 0 2
74426: PPUSH
74427: CALL_OW 251
74431: ST_TO_ADDR
// if not x or not y then
74432: LD_VAR 0 7
74436: NOT
74437: PUSH
74438: LD_VAR 0 8
74442: NOT
74443: OR
74444: IFFALSE 74448
// exit ;
74446: GO 74843
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74448: LD_ADDR_VAR 0 6
74452: PUSH
74453: LD_VAR 0 7
74457: PPUSH
74458: LD_INT 0
74460: PPUSH
74461: LD_INT 4
74463: PPUSH
74464: CALL_OW 272
74468: PUSH
74469: LD_VAR 0 8
74473: PPUSH
74474: LD_INT 0
74476: PPUSH
74477: LD_INT 4
74479: PPUSH
74480: CALL_OW 273
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_VAR 0 7
74493: PPUSH
74494: LD_INT 1
74496: PPUSH
74497: LD_INT 4
74499: PPUSH
74500: CALL_OW 272
74504: PUSH
74505: LD_VAR 0 8
74509: PPUSH
74510: LD_INT 1
74512: PPUSH
74513: LD_INT 4
74515: PPUSH
74516: CALL_OW 273
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_VAR 0 7
74529: PPUSH
74530: LD_INT 2
74532: PPUSH
74533: LD_INT 4
74535: PPUSH
74536: CALL_OW 272
74540: PUSH
74541: LD_VAR 0 8
74545: PPUSH
74546: LD_INT 2
74548: PPUSH
74549: LD_INT 4
74551: PPUSH
74552: CALL_OW 273
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: PUSH
74561: LD_VAR 0 7
74565: PPUSH
74566: LD_INT 3
74568: PPUSH
74569: LD_INT 4
74571: PPUSH
74572: CALL_OW 272
74576: PUSH
74577: LD_VAR 0 8
74581: PPUSH
74582: LD_INT 3
74584: PPUSH
74585: LD_INT 4
74587: PPUSH
74588: CALL_OW 273
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_VAR 0 7
74601: PPUSH
74602: LD_INT 4
74604: PPUSH
74605: LD_INT 4
74607: PPUSH
74608: CALL_OW 272
74612: PUSH
74613: LD_VAR 0 8
74617: PPUSH
74618: LD_INT 4
74620: PPUSH
74621: LD_INT 4
74623: PPUSH
74624: CALL_OW 273
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: PUSH
74633: LD_VAR 0 7
74637: PPUSH
74638: LD_INT 5
74640: PPUSH
74641: LD_INT 4
74643: PPUSH
74644: CALL_OW 272
74648: PUSH
74649: LD_VAR 0 8
74653: PPUSH
74654: LD_INT 5
74656: PPUSH
74657: LD_INT 4
74659: PPUSH
74660: CALL_OW 273
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PUSH
74669: EMPTY
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: ST_TO_ADDR
// for i = tmp downto 1 do
74677: LD_ADDR_VAR 0 4
74681: PUSH
74682: DOUBLE
74683: LD_VAR 0 6
74687: INC
74688: ST_TO_ADDR
74689: LD_INT 1
74691: PUSH
74692: FOR_DOWNTO
74693: IFFALSE 74794
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74695: LD_VAR 0 6
74699: PUSH
74700: LD_VAR 0 4
74704: ARRAY
74705: PUSH
74706: LD_INT 1
74708: ARRAY
74709: PPUSH
74710: LD_VAR 0 6
74714: PUSH
74715: LD_VAR 0 4
74719: ARRAY
74720: PUSH
74721: LD_INT 2
74723: ARRAY
74724: PPUSH
74725: CALL_OW 488
74729: NOT
74730: PUSH
74731: LD_VAR 0 6
74735: PUSH
74736: LD_VAR 0 4
74740: ARRAY
74741: PUSH
74742: LD_INT 1
74744: ARRAY
74745: PPUSH
74746: LD_VAR 0 6
74750: PUSH
74751: LD_VAR 0 4
74755: ARRAY
74756: PUSH
74757: LD_INT 2
74759: ARRAY
74760: PPUSH
74761: CALL_OW 428
74765: PUSH
74766: LD_INT 0
74768: NONEQUAL
74769: OR
74770: IFFALSE 74792
// tmp := Delete ( tmp , i ) ;
74772: LD_ADDR_VAR 0 6
74776: PUSH
74777: LD_VAR 0 6
74781: PPUSH
74782: LD_VAR 0 4
74786: PPUSH
74787: CALL_OW 3
74791: ST_TO_ADDR
74792: GO 74692
74794: POP
74795: POP
// j := GetClosestHex ( unit , tmp ) ;
74796: LD_ADDR_VAR 0 5
74800: PUSH
74801: LD_VAR 0 1
74805: PPUSH
74806: LD_VAR 0 6
74810: PPUSH
74811: CALL 74098 0 2
74815: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74816: LD_VAR 0 1
74820: PPUSH
74821: LD_VAR 0 5
74825: PUSH
74826: LD_INT 1
74828: ARRAY
74829: PPUSH
74830: LD_VAR 0 5
74834: PUSH
74835: LD_INT 2
74837: ARRAY
74838: PPUSH
74839: CALL_OW 111
// end ;
74843: LD_VAR 0 3
74847: RET
// export function PrepareApemanSoldier ( ) ; begin
74848: LD_INT 0
74850: PPUSH
// uc_nation := 0 ;
74851: LD_ADDR_OWVAR 21
74855: PUSH
74856: LD_INT 0
74858: ST_TO_ADDR
// hc_sex := sex_male ;
74859: LD_ADDR_OWVAR 27
74863: PUSH
74864: LD_INT 1
74866: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74867: LD_ADDR_OWVAR 28
74871: PUSH
74872: LD_INT 15
74874: ST_TO_ADDR
// hc_gallery :=  ;
74875: LD_ADDR_OWVAR 33
74879: PUSH
74880: LD_STRING 
74882: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74883: LD_ADDR_OWVAR 31
74887: PUSH
74888: LD_INT 0
74890: PPUSH
74891: LD_INT 3
74893: PPUSH
74894: CALL_OW 12
74898: PUSH
74899: LD_INT 0
74901: PPUSH
74902: LD_INT 3
74904: PPUSH
74905: CALL_OW 12
74909: PUSH
74910: LD_INT 0
74912: PUSH
74913: LD_INT 0
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: ST_TO_ADDR
// end ;
74922: LD_VAR 0 1
74926: RET
// export function PrepareApemanEngineer ( ) ; begin
74927: LD_INT 0
74929: PPUSH
// uc_nation := 0 ;
74930: LD_ADDR_OWVAR 21
74934: PUSH
74935: LD_INT 0
74937: ST_TO_ADDR
// hc_sex := sex_male ;
74938: LD_ADDR_OWVAR 27
74942: PUSH
74943: LD_INT 1
74945: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74946: LD_ADDR_OWVAR 28
74950: PUSH
74951: LD_INT 16
74953: ST_TO_ADDR
// hc_gallery :=  ;
74954: LD_ADDR_OWVAR 33
74958: PUSH
74959: LD_STRING 
74961: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74962: LD_ADDR_OWVAR 31
74966: PUSH
74967: LD_INT 0
74969: PPUSH
74970: LD_INT 3
74972: PPUSH
74973: CALL_OW 12
74977: PUSH
74978: LD_INT 0
74980: PPUSH
74981: LD_INT 3
74983: PPUSH
74984: CALL_OW 12
74988: PUSH
74989: LD_INT 0
74991: PUSH
74992: LD_INT 0
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: ST_TO_ADDR
// end ;
75001: LD_VAR 0 1
75005: RET
// export function PrepareApeman ( agressivity ) ; begin
75006: LD_INT 0
75008: PPUSH
// uc_side := 0 ;
75009: LD_ADDR_OWVAR 20
75013: PUSH
75014: LD_INT 0
75016: ST_TO_ADDR
// uc_nation := 0 ;
75017: LD_ADDR_OWVAR 21
75021: PUSH
75022: LD_INT 0
75024: ST_TO_ADDR
// hc_sex := sex_male ;
75025: LD_ADDR_OWVAR 27
75029: PUSH
75030: LD_INT 1
75032: ST_TO_ADDR
// hc_class := class_apeman ;
75033: LD_ADDR_OWVAR 28
75037: PUSH
75038: LD_INT 12
75040: ST_TO_ADDR
// hc_gallery :=  ;
75041: LD_ADDR_OWVAR 33
75045: PUSH
75046: LD_STRING 
75048: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75049: LD_ADDR_OWVAR 35
75053: PUSH
75054: LD_VAR 0 1
75058: NEG
75059: PPUSH
75060: LD_VAR 0 1
75064: PPUSH
75065: CALL_OW 12
75069: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75070: LD_ADDR_OWVAR 31
75074: PUSH
75075: LD_INT 0
75077: PPUSH
75078: LD_INT 3
75080: PPUSH
75081: CALL_OW 12
75085: PUSH
75086: LD_INT 0
75088: PPUSH
75089: LD_INT 3
75091: PPUSH
75092: CALL_OW 12
75096: PUSH
75097: LD_INT 0
75099: PUSH
75100: LD_INT 0
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: LIST
75107: LIST
75108: ST_TO_ADDR
// end ;
75109: LD_VAR 0 2
75113: RET
// export function PrepareTiger ( agressivity ) ; begin
75114: LD_INT 0
75116: PPUSH
// uc_side := 0 ;
75117: LD_ADDR_OWVAR 20
75121: PUSH
75122: LD_INT 0
75124: ST_TO_ADDR
// uc_nation := 0 ;
75125: LD_ADDR_OWVAR 21
75129: PUSH
75130: LD_INT 0
75132: ST_TO_ADDR
// hc_class := class_tiger ;
75133: LD_ADDR_OWVAR 28
75137: PUSH
75138: LD_INT 14
75140: ST_TO_ADDR
// hc_gallery :=  ;
75141: LD_ADDR_OWVAR 33
75145: PUSH
75146: LD_STRING 
75148: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75149: LD_ADDR_OWVAR 35
75153: PUSH
75154: LD_VAR 0 1
75158: NEG
75159: PPUSH
75160: LD_VAR 0 1
75164: PPUSH
75165: CALL_OW 12
75169: ST_TO_ADDR
// end ;
75170: LD_VAR 0 2
75174: RET
// export function PrepareEnchidna ( ) ; begin
75175: LD_INT 0
75177: PPUSH
// uc_side := 0 ;
75178: LD_ADDR_OWVAR 20
75182: PUSH
75183: LD_INT 0
75185: ST_TO_ADDR
// uc_nation := 0 ;
75186: LD_ADDR_OWVAR 21
75190: PUSH
75191: LD_INT 0
75193: ST_TO_ADDR
// hc_class := class_baggie ;
75194: LD_ADDR_OWVAR 28
75198: PUSH
75199: LD_INT 13
75201: ST_TO_ADDR
// hc_gallery :=  ;
75202: LD_ADDR_OWVAR 33
75206: PUSH
75207: LD_STRING 
75209: ST_TO_ADDR
// end ;
75210: LD_VAR 0 1
75214: RET
// export function PrepareFrog ( ) ; begin
75215: LD_INT 0
75217: PPUSH
// uc_side := 0 ;
75218: LD_ADDR_OWVAR 20
75222: PUSH
75223: LD_INT 0
75225: ST_TO_ADDR
// uc_nation := 0 ;
75226: LD_ADDR_OWVAR 21
75230: PUSH
75231: LD_INT 0
75233: ST_TO_ADDR
// hc_class := class_frog ;
75234: LD_ADDR_OWVAR 28
75238: PUSH
75239: LD_INT 19
75241: ST_TO_ADDR
// hc_gallery :=  ;
75242: LD_ADDR_OWVAR 33
75246: PUSH
75247: LD_STRING 
75249: ST_TO_ADDR
// end ;
75250: LD_VAR 0 1
75254: RET
// export function PrepareFish ( ) ; begin
75255: LD_INT 0
75257: PPUSH
// uc_side := 0 ;
75258: LD_ADDR_OWVAR 20
75262: PUSH
75263: LD_INT 0
75265: ST_TO_ADDR
// uc_nation := 0 ;
75266: LD_ADDR_OWVAR 21
75270: PUSH
75271: LD_INT 0
75273: ST_TO_ADDR
// hc_class := class_fish ;
75274: LD_ADDR_OWVAR 28
75278: PUSH
75279: LD_INT 20
75281: ST_TO_ADDR
// hc_gallery :=  ;
75282: LD_ADDR_OWVAR 33
75286: PUSH
75287: LD_STRING 
75289: ST_TO_ADDR
// end ;
75290: LD_VAR 0 1
75294: RET
// export function PrepareBird ( ) ; begin
75295: LD_INT 0
75297: PPUSH
// uc_side := 0 ;
75298: LD_ADDR_OWVAR 20
75302: PUSH
75303: LD_INT 0
75305: ST_TO_ADDR
// uc_nation := 0 ;
75306: LD_ADDR_OWVAR 21
75310: PUSH
75311: LD_INT 0
75313: ST_TO_ADDR
// hc_class := class_phororhacos ;
75314: LD_ADDR_OWVAR 28
75318: PUSH
75319: LD_INT 18
75321: ST_TO_ADDR
// hc_gallery :=  ;
75322: LD_ADDR_OWVAR 33
75326: PUSH
75327: LD_STRING 
75329: ST_TO_ADDR
// end ;
75330: LD_VAR 0 1
75334: RET
// export function PrepareHorse ( ) ; begin
75335: LD_INT 0
75337: PPUSH
// uc_side := 0 ;
75338: LD_ADDR_OWVAR 20
75342: PUSH
75343: LD_INT 0
75345: ST_TO_ADDR
// uc_nation := 0 ;
75346: LD_ADDR_OWVAR 21
75350: PUSH
75351: LD_INT 0
75353: ST_TO_ADDR
// hc_class := class_horse ;
75354: LD_ADDR_OWVAR 28
75358: PUSH
75359: LD_INT 21
75361: ST_TO_ADDR
// hc_gallery :=  ;
75362: LD_ADDR_OWVAR 33
75366: PUSH
75367: LD_STRING 
75369: ST_TO_ADDR
// end ;
75370: LD_VAR 0 1
75374: RET
// export function PrepareMastodont ( ) ; begin
75375: LD_INT 0
75377: PPUSH
// uc_side := 0 ;
75378: LD_ADDR_OWVAR 20
75382: PUSH
75383: LD_INT 0
75385: ST_TO_ADDR
// uc_nation := 0 ;
75386: LD_ADDR_OWVAR 21
75390: PUSH
75391: LD_INT 0
75393: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75394: LD_ADDR_OWVAR 37
75398: PUSH
75399: LD_INT 31
75401: ST_TO_ADDR
// vc_control := control_rider ;
75402: LD_ADDR_OWVAR 38
75406: PUSH
75407: LD_INT 4
75409: ST_TO_ADDR
// end ;
75410: LD_VAR 0 1
75414: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75415: LD_INT 0
75417: PPUSH
75418: PPUSH
75419: PPUSH
// uc_side = 0 ;
75420: LD_ADDR_OWVAR 20
75424: PUSH
75425: LD_INT 0
75427: ST_TO_ADDR
// uc_nation = 0 ;
75428: LD_ADDR_OWVAR 21
75432: PUSH
75433: LD_INT 0
75435: ST_TO_ADDR
// InitHc_All ( ) ;
75436: CALL_OW 584
// InitVc ;
75440: CALL_OW 20
// if mastodonts then
75444: LD_VAR 0 6
75448: IFFALSE 75515
// for i = 1 to mastodonts do
75450: LD_ADDR_VAR 0 11
75454: PUSH
75455: DOUBLE
75456: LD_INT 1
75458: DEC
75459: ST_TO_ADDR
75460: LD_VAR 0 6
75464: PUSH
75465: FOR_TO
75466: IFFALSE 75513
// begin vc_chassis := 31 ;
75468: LD_ADDR_OWVAR 37
75472: PUSH
75473: LD_INT 31
75475: ST_TO_ADDR
// vc_control := control_rider ;
75476: LD_ADDR_OWVAR 38
75480: PUSH
75481: LD_INT 4
75483: ST_TO_ADDR
// animal := CreateVehicle ;
75484: LD_ADDR_VAR 0 12
75488: PUSH
75489: CALL_OW 45
75493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75494: LD_VAR 0 12
75498: PPUSH
75499: LD_VAR 0 8
75503: PPUSH
75504: LD_INT 0
75506: PPUSH
75507: CALL 77643 0 3
// end ;
75511: GO 75465
75513: POP
75514: POP
// if horses then
75515: LD_VAR 0 5
75519: IFFALSE 75586
// for i = 1 to horses do
75521: LD_ADDR_VAR 0 11
75525: PUSH
75526: DOUBLE
75527: LD_INT 1
75529: DEC
75530: ST_TO_ADDR
75531: LD_VAR 0 5
75535: PUSH
75536: FOR_TO
75537: IFFALSE 75584
// begin hc_class := 21 ;
75539: LD_ADDR_OWVAR 28
75543: PUSH
75544: LD_INT 21
75546: ST_TO_ADDR
// hc_gallery :=  ;
75547: LD_ADDR_OWVAR 33
75551: PUSH
75552: LD_STRING 
75554: ST_TO_ADDR
// animal := CreateHuman ;
75555: LD_ADDR_VAR 0 12
75559: PUSH
75560: CALL_OW 44
75564: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75565: LD_VAR 0 12
75569: PPUSH
75570: LD_VAR 0 8
75574: PPUSH
75575: LD_INT 0
75577: PPUSH
75578: CALL 77643 0 3
// end ;
75582: GO 75536
75584: POP
75585: POP
// if birds then
75586: LD_VAR 0 1
75590: IFFALSE 75657
// for i = 1 to birds do
75592: LD_ADDR_VAR 0 11
75596: PUSH
75597: DOUBLE
75598: LD_INT 1
75600: DEC
75601: ST_TO_ADDR
75602: LD_VAR 0 1
75606: PUSH
75607: FOR_TO
75608: IFFALSE 75655
// begin hc_class := 18 ;
75610: LD_ADDR_OWVAR 28
75614: PUSH
75615: LD_INT 18
75617: ST_TO_ADDR
// hc_gallery =  ;
75618: LD_ADDR_OWVAR 33
75622: PUSH
75623: LD_STRING 
75625: ST_TO_ADDR
// animal := CreateHuman ;
75626: LD_ADDR_VAR 0 12
75630: PUSH
75631: CALL_OW 44
75635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75636: LD_VAR 0 12
75640: PPUSH
75641: LD_VAR 0 8
75645: PPUSH
75646: LD_INT 0
75648: PPUSH
75649: CALL 77643 0 3
// end ;
75653: GO 75607
75655: POP
75656: POP
// if tigers then
75657: LD_VAR 0 2
75661: IFFALSE 75745
// for i = 1 to tigers do
75663: LD_ADDR_VAR 0 11
75667: PUSH
75668: DOUBLE
75669: LD_INT 1
75671: DEC
75672: ST_TO_ADDR
75673: LD_VAR 0 2
75677: PUSH
75678: FOR_TO
75679: IFFALSE 75743
// begin hc_class = class_tiger ;
75681: LD_ADDR_OWVAR 28
75685: PUSH
75686: LD_INT 14
75688: ST_TO_ADDR
// hc_gallery =  ;
75689: LD_ADDR_OWVAR 33
75693: PUSH
75694: LD_STRING 
75696: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75697: LD_ADDR_OWVAR 35
75701: PUSH
75702: LD_INT 7
75704: NEG
75705: PPUSH
75706: LD_INT 7
75708: PPUSH
75709: CALL_OW 12
75713: ST_TO_ADDR
// animal := CreateHuman ;
75714: LD_ADDR_VAR 0 12
75718: PUSH
75719: CALL_OW 44
75723: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75724: LD_VAR 0 12
75728: PPUSH
75729: LD_VAR 0 8
75733: PPUSH
75734: LD_INT 0
75736: PPUSH
75737: CALL 77643 0 3
// end ;
75741: GO 75678
75743: POP
75744: POP
// if apemans then
75745: LD_VAR 0 3
75749: IFFALSE 75872
// for i = 1 to apemans do
75751: LD_ADDR_VAR 0 11
75755: PUSH
75756: DOUBLE
75757: LD_INT 1
75759: DEC
75760: ST_TO_ADDR
75761: LD_VAR 0 3
75765: PUSH
75766: FOR_TO
75767: IFFALSE 75870
// begin hc_class = class_apeman ;
75769: LD_ADDR_OWVAR 28
75773: PUSH
75774: LD_INT 12
75776: ST_TO_ADDR
// hc_gallery =  ;
75777: LD_ADDR_OWVAR 33
75781: PUSH
75782: LD_STRING 
75784: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75785: LD_ADDR_OWVAR 35
75789: PUSH
75790: LD_INT 2
75792: NEG
75793: PPUSH
75794: LD_INT 2
75796: PPUSH
75797: CALL_OW 12
75801: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75802: LD_ADDR_OWVAR 31
75806: PUSH
75807: LD_INT 1
75809: PPUSH
75810: LD_INT 3
75812: PPUSH
75813: CALL_OW 12
75817: PUSH
75818: LD_INT 1
75820: PPUSH
75821: LD_INT 3
75823: PPUSH
75824: CALL_OW 12
75828: PUSH
75829: LD_INT 0
75831: PUSH
75832: LD_INT 0
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: ST_TO_ADDR
// animal := CreateHuman ;
75841: LD_ADDR_VAR 0 12
75845: PUSH
75846: CALL_OW 44
75850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75851: LD_VAR 0 12
75855: PPUSH
75856: LD_VAR 0 8
75860: PPUSH
75861: LD_INT 0
75863: PPUSH
75864: CALL 77643 0 3
// end ;
75868: GO 75766
75870: POP
75871: POP
// if enchidnas then
75872: LD_VAR 0 4
75876: IFFALSE 75943
// for i = 1 to enchidnas do
75878: LD_ADDR_VAR 0 11
75882: PUSH
75883: DOUBLE
75884: LD_INT 1
75886: DEC
75887: ST_TO_ADDR
75888: LD_VAR 0 4
75892: PUSH
75893: FOR_TO
75894: IFFALSE 75941
// begin hc_class = 13 ;
75896: LD_ADDR_OWVAR 28
75900: PUSH
75901: LD_INT 13
75903: ST_TO_ADDR
// hc_gallery =  ;
75904: LD_ADDR_OWVAR 33
75908: PUSH
75909: LD_STRING 
75911: ST_TO_ADDR
// animal := CreateHuman ;
75912: LD_ADDR_VAR 0 12
75916: PUSH
75917: CALL_OW 44
75921: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75922: LD_VAR 0 12
75926: PPUSH
75927: LD_VAR 0 8
75931: PPUSH
75932: LD_INT 0
75934: PPUSH
75935: CALL 77643 0 3
// end ;
75939: GO 75893
75941: POP
75942: POP
// if fishes then
75943: LD_VAR 0 7
75947: IFFALSE 76014
// for i = 1 to fishes do
75949: LD_ADDR_VAR 0 11
75953: PUSH
75954: DOUBLE
75955: LD_INT 1
75957: DEC
75958: ST_TO_ADDR
75959: LD_VAR 0 7
75963: PUSH
75964: FOR_TO
75965: IFFALSE 76012
// begin hc_class = 20 ;
75967: LD_ADDR_OWVAR 28
75971: PUSH
75972: LD_INT 20
75974: ST_TO_ADDR
// hc_gallery =  ;
75975: LD_ADDR_OWVAR 33
75979: PUSH
75980: LD_STRING 
75982: ST_TO_ADDR
// animal := CreateHuman ;
75983: LD_ADDR_VAR 0 12
75987: PUSH
75988: CALL_OW 44
75992: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75993: LD_VAR 0 12
75997: PPUSH
75998: LD_VAR 0 9
76002: PPUSH
76003: LD_INT 0
76005: PPUSH
76006: CALL 77643 0 3
// end ;
76010: GO 75964
76012: POP
76013: POP
// end ;
76014: LD_VAR 0 10
76018: RET
// export function WantHeal ( sci , unit ) ; begin
76019: LD_INT 0
76021: PPUSH
// if GetTaskList ( sci ) > 0 then
76022: LD_VAR 0 1
76026: PPUSH
76027: CALL_OW 437
76031: PUSH
76032: LD_INT 0
76034: GREATER
76035: IFFALSE 76105
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76037: LD_VAR 0 1
76041: PPUSH
76042: CALL_OW 437
76046: PUSH
76047: LD_INT 1
76049: ARRAY
76050: PUSH
76051: LD_INT 1
76053: ARRAY
76054: PUSH
76055: LD_STRING l
76057: EQUAL
76058: PUSH
76059: LD_VAR 0 1
76063: PPUSH
76064: CALL_OW 437
76068: PUSH
76069: LD_INT 1
76071: ARRAY
76072: PUSH
76073: LD_INT 4
76075: ARRAY
76076: PUSH
76077: LD_VAR 0 2
76081: EQUAL
76082: AND
76083: IFFALSE 76095
// result := true else
76085: LD_ADDR_VAR 0 3
76089: PUSH
76090: LD_INT 1
76092: ST_TO_ADDR
76093: GO 76103
// result := false ;
76095: LD_ADDR_VAR 0 3
76099: PUSH
76100: LD_INT 0
76102: ST_TO_ADDR
// end else
76103: GO 76113
// result := false ;
76105: LD_ADDR_VAR 0 3
76109: PUSH
76110: LD_INT 0
76112: ST_TO_ADDR
// end ;
76113: LD_VAR 0 3
76117: RET
// export function HealTarget ( sci ) ; begin
76118: LD_INT 0
76120: PPUSH
// if not sci then
76121: LD_VAR 0 1
76125: NOT
76126: IFFALSE 76130
// exit ;
76128: GO 76195
// result := 0 ;
76130: LD_ADDR_VAR 0 2
76134: PUSH
76135: LD_INT 0
76137: ST_TO_ADDR
// if GetTaskList ( sci ) then
76138: LD_VAR 0 1
76142: PPUSH
76143: CALL_OW 437
76147: IFFALSE 76195
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76149: LD_VAR 0 1
76153: PPUSH
76154: CALL_OW 437
76158: PUSH
76159: LD_INT 1
76161: ARRAY
76162: PUSH
76163: LD_INT 1
76165: ARRAY
76166: PUSH
76167: LD_STRING l
76169: EQUAL
76170: IFFALSE 76195
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76172: LD_ADDR_VAR 0 2
76176: PUSH
76177: LD_VAR 0 1
76181: PPUSH
76182: CALL_OW 437
76186: PUSH
76187: LD_INT 1
76189: ARRAY
76190: PUSH
76191: LD_INT 4
76193: ARRAY
76194: ST_TO_ADDR
// end ;
76195: LD_VAR 0 2
76199: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76200: LD_INT 0
76202: PPUSH
76203: PPUSH
76204: PPUSH
76205: PPUSH
// if not base_units then
76206: LD_VAR 0 1
76210: NOT
76211: IFFALSE 76215
// exit ;
76213: GO 76302
// result := false ;
76215: LD_ADDR_VAR 0 2
76219: PUSH
76220: LD_INT 0
76222: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76223: LD_ADDR_VAR 0 5
76227: PUSH
76228: LD_VAR 0 1
76232: PPUSH
76233: LD_INT 21
76235: PUSH
76236: LD_INT 3
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: PPUSH
76243: CALL_OW 72
76247: ST_TO_ADDR
// if not tmp then
76248: LD_VAR 0 5
76252: NOT
76253: IFFALSE 76257
// exit ;
76255: GO 76302
// for i in tmp do
76257: LD_ADDR_VAR 0 3
76261: PUSH
76262: LD_VAR 0 5
76266: PUSH
76267: FOR_IN
76268: IFFALSE 76300
// begin result := EnemyInRange ( i , 22 ) ;
76270: LD_ADDR_VAR 0 2
76274: PUSH
76275: LD_VAR 0 3
76279: PPUSH
76280: LD_INT 22
76282: PPUSH
76283: CALL 73900 0 2
76287: ST_TO_ADDR
// if result then
76288: LD_VAR 0 2
76292: IFFALSE 76298
// exit ;
76294: POP
76295: POP
76296: GO 76302
// end ;
76298: GO 76267
76300: POP
76301: POP
// end ;
76302: LD_VAR 0 2
76306: RET
// export function FilterByTag ( units , tag ) ; begin
76307: LD_INT 0
76309: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76310: LD_ADDR_VAR 0 3
76314: PUSH
76315: LD_VAR 0 1
76319: PPUSH
76320: LD_INT 120
76322: PUSH
76323: LD_VAR 0 2
76327: PUSH
76328: EMPTY
76329: LIST
76330: LIST
76331: PPUSH
76332: CALL_OW 72
76336: ST_TO_ADDR
// end ;
76337: LD_VAR 0 3
76341: RET
// export function IsDriver ( un ) ; begin
76342: LD_INT 0
76344: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76345: LD_ADDR_VAR 0 2
76349: PUSH
76350: LD_VAR 0 1
76354: PUSH
76355: LD_INT 55
76357: PUSH
76358: EMPTY
76359: LIST
76360: PPUSH
76361: CALL_OW 69
76365: IN
76366: ST_TO_ADDR
// end ;
76367: LD_VAR 0 2
76371: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76372: LD_INT 0
76374: PPUSH
76375: PPUSH
// list := [ ] ;
76376: LD_ADDR_VAR 0 5
76380: PUSH
76381: EMPTY
76382: ST_TO_ADDR
// case d of 0 :
76383: LD_VAR 0 3
76387: PUSH
76388: LD_INT 0
76390: DOUBLE
76391: EQUAL
76392: IFTRUE 76396
76394: GO 76529
76396: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76397: LD_ADDR_VAR 0 5
76401: PUSH
76402: LD_VAR 0 1
76406: PUSH
76407: LD_INT 4
76409: MINUS
76410: PUSH
76411: LD_VAR 0 2
76415: PUSH
76416: LD_INT 4
76418: MINUS
76419: PUSH
76420: LD_INT 2
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: LIST
76427: PUSH
76428: LD_VAR 0 1
76432: PUSH
76433: LD_INT 3
76435: MINUS
76436: PUSH
76437: LD_VAR 0 2
76441: PUSH
76442: LD_INT 1
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: LIST
76449: PUSH
76450: LD_VAR 0 1
76454: PUSH
76455: LD_INT 4
76457: PLUS
76458: PUSH
76459: LD_VAR 0 2
76463: PUSH
76464: LD_INT 4
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: LIST
76471: PUSH
76472: LD_VAR 0 1
76476: PUSH
76477: LD_INT 3
76479: PLUS
76480: PUSH
76481: LD_VAR 0 2
76485: PUSH
76486: LD_INT 3
76488: PLUS
76489: PUSH
76490: LD_INT 5
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: LIST
76497: PUSH
76498: LD_VAR 0 1
76502: PUSH
76503: LD_VAR 0 2
76507: PUSH
76508: LD_INT 4
76510: PLUS
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: PUSH
76520: EMPTY
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: ST_TO_ADDR
// end ; 1 :
76527: GO 77227
76529: LD_INT 1
76531: DOUBLE
76532: EQUAL
76533: IFTRUE 76537
76535: GO 76670
76537: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76538: LD_ADDR_VAR 0 5
76542: PUSH
76543: LD_VAR 0 1
76547: PUSH
76548: LD_VAR 0 2
76552: PUSH
76553: LD_INT 4
76555: MINUS
76556: PUSH
76557: LD_INT 3
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: LIST
76564: PUSH
76565: LD_VAR 0 1
76569: PUSH
76570: LD_INT 3
76572: MINUS
76573: PUSH
76574: LD_VAR 0 2
76578: PUSH
76579: LD_INT 3
76581: MINUS
76582: PUSH
76583: LD_INT 2
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: LIST
76590: PUSH
76591: LD_VAR 0 1
76595: PUSH
76596: LD_INT 4
76598: MINUS
76599: PUSH
76600: LD_VAR 0 2
76604: PUSH
76605: LD_INT 1
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: LIST
76612: PUSH
76613: LD_VAR 0 1
76617: PUSH
76618: LD_VAR 0 2
76622: PUSH
76623: LD_INT 3
76625: PLUS
76626: PUSH
76627: LD_INT 0
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: LIST
76634: PUSH
76635: LD_VAR 0 1
76639: PUSH
76640: LD_INT 4
76642: PLUS
76643: PUSH
76644: LD_VAR 0 2
76648: PUSH
76649: LD_INT 4
76651: PLUS
76652: PUSH
76653: LD_INT 5
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: LIST
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: ST_TO_ADDR
// end ; 2 :
76668: GO 77227
76670: LD_INT 2
76672: DOUBLE
76673: EQUAL
76674: IFTRUE 76678
76676: GO 76807
76678: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76679: LD_ADDR_VAR 0 5
76683: PUSH
76684: LD_VAR 0 1
76688: PUSH
76689: LD_VAR 0 2
76693: PUSH
76694: LD_INT 3
76696: MINUS
76697: PUSH
76698: LD_INT 3
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: LIST
76705: PUSH
76706: LD_VAR 0 1
76710: PUSH
76711: LD_INT 4
76713: PLUS
76714: PUSH
76715: LD_VAR 0 2
76719: PUSH
76720: LD_INT 4
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: LIST
76727: PUSH
76728: LD_VAR 0 1
76732: PUSH
76733: LD_VAR 0 2
76737: PUSH
76738: LD_INT 4
76740: PLUS
76741: PUSH
76742: LD_INT 0
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: LIST
76749: PUSH
76750: LD_VAR 0 1
76754: PUSH
76755: LD_INT 3
76757: MINUS
76758: PUSH
76759: LD_VAR 0 2
76763: PUSH
76764: LD_INT 1
76766: PUSH
76767: EMPTY
76768: LIST
76769: LIST
76770: LIST
76771: PUSH
76772: LD_VAR 0 1
76776: PUSH
76777: LD_INT 4
76779: MINUS
76780: PUSH
76781: LD_VAR 0 2
76785: PUSH
76786: LD_INT 4
76788: MINUS
76789: PUSH
76790: LD_INT 2
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: LIST
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: LIST
76802: LIST
76803: LIST
76804: ST_TO_ADDR
// end ; 3 :
76805: GO 77227
76807: LD_INT 3
76809: DOUBLE
76810: EQUAL
76811: IFTRUE 76815
76813: GO 76948
76815: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76816: LD_ADDR_VAR 0 5
76820: PUSH
76821: LD_VAR 0 1
76825: PUSH
76826: LD_INT 3
76828: PLUS
76829: PUSH
76830: LD_VAR 0 2
76834: PUSH
76835: LD_INT 4
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: LIST
76842: PUSH
76843: LD_VAR 0 1
76847: PUSH
76848: LD_INT 4
76850: PLUS
76851: PUSH
76852: LD_VAR 0 2
76856: PUSH
76857: LD_INT 4
76859: PLUS
76860: PUSH
76861: LD_INT 5
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: LIST
76868: PUSH
76869: LD_VAR 0 1
76873: PUSH
76874: LD_INT 4
76876: MINUS
76877: PUSH
76878: LD_VAR 0 2
76882: PUSH
76883: LD_INT 1
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: LIST
76890: PUSH
76891: LD_VAR 0 1
76895: PUSH
76896: LD_VAR 0 2
76900: PUSH
76901: LD_INT 4
76903: MINUS
76904: PUSH
76905: LD_INT 3
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: LIST
76912: PUSH
76913: LD_VAR 0 1
76917: PUSH
76918: LD_INT 3
76920: MINUS
76921: PUSH
76922: LD_VAR 0 2
76926: PUSH
76927: LD_INT 3
76929: MINUS
76930: PUSH
76931: LD_INT 2
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: LIST
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: ST_TO_ADDR
// end ; 4 :
76946: GO 77227
76948: LD_INT 4
76950: DOUBLE
76951: EQUAL
76952: IFTRUE 76956
76954: GO 77089
76956: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76957: LD_ADDR_VAR 0 5
76961: PUSH
76962: LD_VAR 0 1
76966: PUSH
76967: LD_VAR 0 2
76971: PUSH
76972: LD_INT 4
76974: PLUS
76975: PUSH
76976: LD_INT 0
76978: PUSH
76979: EMPTY
76980: LIST
76981: LIST
76982: LIST
76983: PUSH
76984: LD_VAR 0 1
76988: PUSH
76989: LD_INT 3
76991: PLUS
76992: PUSH
76993: LD_VAR 0 2
76997: PUSH
76998: LD_INT 3
77000: PLUS
77001: PUSH
77002: LD_INT 5
77004: PUSH
77005: EMPTY
77006: LIST
77007: LIST
77008: LIST
77009: PUSH
77010: LD_VAR 0 1
77014: PUSH
77015: LD_INT 4
77017: PLUS
77018: PUSH
77019: LD_VAR 0 2
77023: PUSH
77024: LD_INT 4
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: LIST
77031: PUSH
77032: LD_VAR 0 1
77036: PUSH
77037: LD_VAR 0 2
77041: PUSH
77042: LD_INT 3
77044: MINUS
77045: PUSH
77046: LD_INT 3
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: LIST
77053: PUSH
77054: LD_VAR 0 1
77058: PUSH
77059: LD_INT 4
77061: MINUS
77062: PUSH
77063: LD_VAR 0 2
77067: PUSH
77068: LD_INT 4
77070: MINUS
77071: PUSH
77072: LD_INT 2
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: LIST
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: LIST
77084: LIST
77085: LIST
77086: ST_TO_ADDR
// end ; 5 :
77087: GO 77227
77089: LD_INT 5
77091: DOUBLE
77092: EQUAL
77093: IFTRUE 77097
77095: GO 77226
77097: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77098: LD_ADDR_VAR 0 5
77102: PUSH
77103: LD_VAR 0 1
77107: PUSH
77108: LD_INT 4
77110: MINUS
77111: PUSH
77112: LD_VAR 0 2
77116: PUSH
77117: LD_INT 1
77119: PUSH
77120: EMPTY
77121: LIST
77122: LIST
77123: LIST
77124: PUSH
77125: LD_VAR 0 1
77129: PUSH
77130: LD_VAR 0 2
77134: PUSH
77135: LD_INT 4
77137: MINUS
77138: PUSH
77139: LD_INT 3
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: LIST
77146: PUSH
77147: LD_VAR 0 1
77151: PUSH
77152: LD_INT 4
77154: PLUS
77155: PUSH
77156: LD_VAR 0 2
77160: PUSH
77161: LD_INT 4
77163: PLUS
77164: PUSH
77165: LD_INT 5
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: LIST
77172: PUSH
77173: LD_VAR 0 1
77177: PUSH
77178: LD_INT 3
77180: PLUS
77181: PUSH
77182: LD_VAR 0 2
77186: PUSH
77187: LD_INT 4
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: LIST
77194: PUSH
77195: LD_VAR 0 1
77199: PUSH
77200: LD_VAR 0 2
77204: PUSH
77205: LD_INT 3
77207: PLUS
77208: PUSH
77209: LD_INT 0
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: LIST
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: ST_TO_ADDR
// end ; end ;
77224: GO 77227
77226: POP
// result := list ;
77227: LD_ADDR_VAR 0 4
77231: PUSH
77232: LD_VAR 0 5
77236: ST_TO_ADDR
// end ;
77237: LD_VAR 0 4
77241: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77242: LD_INT 0
77244: PPUSH
77245: PPUSH
77246: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77247: LD_VAR 0 1
77251: NOT
77252: PUSH
77253: LD_VAR 0 2
77257: PUSH
77258: LD_INT 1
77260: PUSH
77261: LD_INT 2
77263: PUSH
77264: LD_INT 3
77266: PUSH
77267: LD_INT 4
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: LIST
77274: LIST
77275: IN
77276: NOT
77277: OR
77278: IFFALSE 77282
// exit ;
77280: GO 77365
// tmp := [ ] ;
77282: LD_ADDR_VAR 0 5
77286: PUSH
77287: EMPTY
77288: ST_TO_ADDR
// for i in units do
77289: LD_ADDR_VAR 0 4
77293: PUSH
77294: LD_VAR 0 1
77298: PUSH
77299: FOR_IN
77300: IFFALSE 77334
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77302: LD_ADDR_VAR 0 5
77306: PUSH
77307: LD_VAR 0 5
77311: PPUSH
77312: LD_VAR 0 4
77316: PPUSH
77317: LD_VAR 0 2
77321: PPUSH
77322: CALL_OW 259
77326: PPUSH
77327: CALL 78738 0 2
77331: ST_TO_ADDR
77332: GO 77299
77334: POP
77335: POP
// if not tmp then
77336: LD_VAR 0 5
77340: NOT
77341: IFFALSE 77345
// exit ;
77343: GO 77365
// result := SortListByListDesc ( units , tmp ) ;
77345: LD_ADDR_VAR 0 3
77349: PUSH
77350: LD_VAR 0 1
77354: PPUSH
77355: LD_VAR 0 5
77359: PPUSH
77360: CALL_OW 77
77364: ST_TO_ADDR
// end ;
77365: LD_VAR 0 3
77369: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77370: LD_INT 0
77372: PPUSH
77373: PPUSH
77374: PPUSH
// result := false ;
77375: LD_ADDR_VAR 0 3
77379: PUSH
77380: LD_INT 0
77382: ST_TO_ADDR
// if not building then
77383: LD_VAR 0 2
77387: NOT
77388: IFFALSE 77392
// exit ;
77390: GO 77530
// x := GetX ( building ) ;
77392: LD_ADDR_VAR 0 4
77396: PUSH
77397: LD_VAR 0 2
77401: PPUSH
77402: CALL_OW 250
77406: ST_TO_ADDR
// y := GetY ( building ) ;
77407: LD_ADDR_VAR 0 5
77411: PUSH
77412: LD_VAR 0 2
77416: PPUSH
77417: CALL_OW 251
77421: ST_TO_ADDR
// if not x or not y then
77422: LD_VAR 0 4
77426: NOT
77427: PUSH
77428: LD_VAR 0 5
77432: NOT
77433: OR
77434: IFFALSE 77438
// exit ;
77436: GO 77530
// if GetTaskList ( unit ) then
77438: LD_VAR 0 1
77442: PPUSH
77443: CALL_OW 437
77447: IFFALSE 77530
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77449: LD_STRING e
77451: PUSH
77452: LD_VAR 0 1
77456: PPUSH
77457: CALL_OW 437
77461: PUSH
77462: LD_INT 1
77464: ARRAY
77465: PUSH
77466: LD_INT 1
77468: ARRAY
77469: EQUAL
77470: PUSH
77471: LD_VAR 0 4
77475: PUSH
77476: LD_VAR 0 1
77480: PPUSH
77481: CALL_OW 437
77485: PUSH
77486: LD_INT 1
77488: ARRAY
77489: PUSH
77490: LD_INT 2
77492: ARRAY
77493: EQUAL
77494: AND
77495: PUSH
77496: LD_VAR 0 5
77500: PUSH
77501: LD_VAR 0 1
77505: PPUSH
77506: CALL_OW 437
77510: PUSH
77511: LD_INT 1
77513: ARRAY
77514: PUSH
77515: LD_INT 3
77517: ARRAY
77518: EQUAL
77519: AND
77520: IFFALSE 77530
// result := true end ;
77522: LD_ADDR_VAR 0 3
77526: PUSH
77527: LD_INT 1
77529: ST_TO_ADDR
// end ;
77530: LD_VAR 0 3
77534: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77535: LD_INT 0
77537: PPUSH
// result := false ;
77538: LD_ADDR_VAR 0 4
77542: PUSH
77543: LD_INT 0
77545: ST_TO_ADDR
// if GetTaskList ( unit ) then
77546: LD_VAR 0 1
77550: PPUSH
77551: CALL_OW 437
77555: IFFALSE 77638
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77557: LD_STRING M
77559: PUSH
77560: LD_VAR 0 1
77564: PPUSH
77565: CALL_OW 437
77569: PUSH
77570: LD_INT 1
77572: ARRAY
77573: PUSH
77574: LD_INT 1
77576: ARRAY
77577: EQUAL
77578: PUSH
77579: LD_VAR 0 2
77583: PUSH
77584: LD_VAR 0 1
77588: PPUSH
77589: CALL_OW 437
77593: PUSH
77594: LD_INT 1
77596: ARRAY
77597: PUSH
77598: LD_INT 2
77600: ARRAY
77601: EQUAL
77602: AND
77603: PUSH
77604: LD_VAR 0 3
77608: PUSH
77609: LD_VAR 0 1
77613: PPUSH
77614: CALL_OW 437
77618: PUSH
77619: LD_INT 1
77621: ARRAY
77622: PUSH
77623: LD_INT 3
77625: ARRAY
77626: EQUAL
77627: AND
77628: IFFALSE 77638
// result := true ;
77630: LD_ADDR_VAR 0 4
77634: PUSH
77635: LD_INT 1
77637: ST_TO_ADDR
// end ; end ;
77638: LD_VAR 0 4
77642: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77643: LD_INT 0
77645: PPUSH
77646: PPUSH
77647: PPUSH
77648: PPUSH
// if not unit or not area then
77649: LD_VAR 0 1
77653: NOT
77654: PUSH
77655: LD_VAR 0 2
77659: NOT
77660: OR
77661: IFFALSE 77665
// exit ;
77663: GO 77841
// tmp := AreaToList ( area , i ) ;
77665: LD_ADDR_VAR 0 6
77669: PUSH
77670: LD_VAR 0 2
77674: PPUSH
77675: LD_VAR 0 5
77679: PPUSH
77680: CALL_OW 517
77684: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77685: LD_ADDR_VAR 0 5
77689: PUSH
77690: DOUBLE
77691: LD_INT 1
77693: DEC
77694: ST_TO_ADDR
77695: LD_VAR 0 6
77699: PUSH
77700: LD_INT 1
77702: ARRAY
77703: PUSH
77704: FOR_TO
77705: IFFALSE 77839
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77707: LD_ADDR_VAR 0 7
77711: PUSH
77712: LD_VAR 0 6
77716: PUSH
77717: LD_INT 1
77719: ARRAY
77720: PUSH
77721: LD_VAR 0 5
77725: ARRAY
77726: PUSH
77727: LD_VAR 0 6
77731: PUSH
77732: LD_INT 2
77734: ARRAY
77735: PUSH
77736: LD_VAR 0 5
77740: ARRAY
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77746: LD_INT 92
77748: PUSH
77749: LD_VAR 0 7
77753: PUSH
77754: LD_INT 1
77756: ARRAY
77757: PUSH
77758: LD_VAR 0 7
77762: PUSH
77763: LD_INT 2
77765: ARRAY
77766: PUSH
77767: LD_INT 2
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: LIST
77774: LIST
77775: PPUSH
77776: CALL_OW 69
77780: PUSH
77781: LD_INT 0
77783: EQUAL
77784: IFFALSE 77837
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77786: LD_VAR 0 1
77790: PPUSH
77791: LD_VAR 0 7
77795: PUSH
77796: LD_INT 1
77798: ARRAY
77799: PPUSH
77800: LD_VAR 0 7
77804: PUSH
77805: LD_INT 2
77807: ARRAY
77808: PPUSH
77809: LD_VAR 0 3
77813: PPUSH
77814: CALL_OW 48
// result := IsPlaced ( unit ) ;
77818: LD_ADDR_VAR 0 4
77822: PUSH
77823: LD_VAR 0 1
77827: PPUSH
77828: CALL_OW 305
77832: ST_TO_ADDR
// exit ;
77833: POP
77834: POP
77835: GO 77841
// end ; end ;
77837: GO 77704
77839: POP
77840: POP
// end ;
77841: LD_VAR 0 4
77845: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77846: LD_INT 0
77848: PPUSH
77849: PPUSH
77850: PPUSH
// if not side or side > 8 then
77851: LD_VAR 0 1
77855: NOT
77856: PUSH
77857: LD_VAR 0 1
77861: PUSH
77862: LD_INT 8
77864: GREATER
77865: OR
77866: IFFALSE 77870
// exit ;
77868: GO 78057
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77870: LD_ADDR_VAR 0 4
77874: PUSH
77875: LD_INT 22
77877: PUSH
77878: LD_VAR 0 1
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: PUSH
77887: LD_INT 21
77889: PUSH
77890: LD_INT 3
77892: PUSH
77893: EMPTY
77894: LIST
77895: LIST
77896: PUSH
77897: EMPTY
77898: LIST
77899: LIST
77900: PPUSH
77901: CALL_OW 69
77905: ST_TO_ADDR
// if not tmp then
77906: LD_VAR 0 4
77910: NOT
77911: IFFALSE 77915
// exit ;
77913: GO 78057
// enable_addtolog := true ;
77915: LD_ADDR_OWVAR 81
77919: PUSH
77920: LD_INT 1
77922: ST_TO_ADDR
// AddToLog ( [ ) ;
77923: LD_STRING [
77925: PPUSH
77926: CALL_OW 561
// for i in tmp do
77930: LD_ADDR_VAR 0 3
77934: PUSH
77935: LD_VAR 0 4
77939: PUSH
77940: FOR_IN
77941: IFFALSE 78048
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77943: LD_STRING [
77945: PUSH
77946: LD_VAR 0 3
77950: PPUSH
77951: CALL_OW 266
77955: STR
77956: PUSH
77957: LD_STRING , 
77959: STR
77960: PUSH
77961: LD_VAR 0 3
77965: PPUSH
77966: CALL_OW 250
77970: STR
77971: PUSH
77972: LD_STRING , 
77974: STR
77975: PUSH
77976: LD_VAR 0 3
77980: PPUSH
77981: CALL_OW 251
77985: STR
77986: PUSH
77987: LD_STRING , 
77989: STR
77990: PUSH
77991: LD_VAR 0 3
77995: PPUSH
77996: CALL_OW 254
78000: STR
78001: PUSH
78002: LD_STRING , 
78004: STR
78005: PUSH
78006: LD_VAR 0 3
78010: PPUSH
78011: LD_INT 1
78013: PPUSH
78014: CALL_OW 268
78018: STR
78019: PUSH
78020: LD_STRING , 
78022: STR
78023: PUSH
78024: LD_VAR 0 3
78028: PPUSH
78029: LD_INT 2
78031: PPUSH
78032: CALL_OW 268
78036: STR
78037: PUSH
78038: LD_STRING ],
78040: STR
78041: PPUSH
78042: CALL_OW 561
// end ;
78046: GO 77940
78048: POP
78049: POP
// AddToLog ( ]; ) ;
78050: LD_STRING ];
78052: PPUSH
78053: CALL_OW 561
// end ;
78057: LD_VAR 0 2
78061: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78062: LD_INT 0
78064: PPUSH
78065: PPUSH
78066: PPUSH
78067: PPUSH
78068: PPUSH
// if not area or not rate or not max then
78069: LD_VAR 0 1
78073: NOT
78074: PUSH
78075: LD_VAR 0 2
78079: NOT
78080: OR
78081: PUSH
78082: LD_VAR 0 4
78086: NOT
78087: OR
78088: IFFALSE 78092
// exit ;
78090: GO 78281
// while 1 do
78092: LD_INT 1
78094: IFFALSE 78281
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78096: LD_ADDR_VAR 0 9
78100: PUSH
78101: LD_VAR 0 1
78105: PPUSH
78106: LD_INT 1
78108: PPUSH
78109: CALL_OW 287
78113: PUSH
78114: LD_INT 10
78116: MUL
78117: ST_TO_ADDR
// r := rate / 10 ;
78118: LD_ADDR_VAR 0 7
78122: PUSH
78123: LD_VAR 0 2
78127: PUSH
78128: LD_INT 10
78130: DIVREAL
78131: ST_TO_ADDR
// time := 1 1$00 ;
78132: LD_ADDR_VAR 0 8
78136: PUSH
78137: LD_INT 2100
78139: ST_TO_ADDR
// if amount < min then
78140: LD_VAR 0 9
78144: PUSH
78145: LD_VAR 0 3
78149: LESS
78150: IFFALSE 78168
// r := r * 2 else
78152: LD_ADDR_VAR 0 7
78156: PUSH
78157: LD_VAR 0 7
78161: PUSH
78162: LD_INT 2
78164: MUL
78165: ST_TO_ADDR
78166: GO 78194
// if amount > max then
78168: LD_VAR 0 9
78172: PUSH
78173: LD_VAR 0 4
78177: GREATER
78178: IFFALSE 78194
// r := r / 2 ;
78180: LD_ADDR_VAR 0 7
78184: PUSH
78185: LD_VAR 0 7
78189: PUSH
78190: LD_INT 2
78192: DIVREAL
78193: ST_TO_ADDR
// time := time / r ;
78194: LD_ADDR_VAR 0 8
78198: PUSH
78199: LD_VAR 0 8
78203: PUSH
78204: LD_VAR 0 7
78208: DIVREAL
78209: ST_TO_ADDR
// if time < 0 then
78210: LD_VAR 0 8
78214: PUSH
78215: LD_INT 0
78217: LESS
78218: IFFALSE 78235
// time := time * - 1 ;
78220: LD_ADDR_VAR 0 8
78224: PUSH
78225: LD_VAR 0 8
78229: PUSH
78230: LD_INT 1
78232: NEG
78233: MUL
78234: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78235: LD_VAR 0 8
78239: PUSH
78240: LD_INT 35
78242: PPUSH
78243: LD_INT 875
78245: PPUSH
78246: CALL_OW 12
78250: PLUS
78251: PPUSH
78252: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78256: LD_INT 1
78258: PPUSH
78259: LD_INT 5
78261: PPUSH
78262: CALL_OW 12
78266: PPUSH
78267: LD_VAR 0 1
78271: PPUSH
78272: LD_INT 1
78274: PPUSH
78275: CALL_OW 55
// end ;
78279: GO 78092
// end ;
78281: LD_VAR 0 5
78285: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78286: LD_INT 0
78288: PPUSH
78289: PPUSH
78290: PPUSH
78291: PPUSH
78292: PPUSH
78293: PPUSH
78294: PPUSH
78295: PPUSH
// if not turrets or not factories then
78296: LD_VAR 0 1
78300: NOT
78301: PUSH
78302: LD_VAR 0 2
78306: NOT
78307: OR
78308: IFFALSE 78312
// exit ;
78310: GO 78619
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78312: LD_ADDR_VAR 0 10
78316: PUSH
78317: LD_INT 5
78319: PUSH
78320: LD_INT 6
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: PUSH
78327: LD_INT 2
78329: PUSH
78330: LD_INT 4
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: PUSH
78337: LD_INT 3
78339: PUSH
78340: LD_INT 5
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: LIST
78351: PUSH
78352: LD_INT 24
78354: PUSH
78355: LD_INT 25
78357: PUSH
78358: EMPTY
78359: LIST
78360: LIST
78361: PUSH
78362: LD_INT 23
78364: PUSH
78365: LD_INT 27
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: LD_INT 42
78378: PUSH
78379: LD_INT 43
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: PUSH
78386: LD_INT 44
78388: PUSH
78389: LD_INT 46
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: LD_INT 45
78398: PUSH
78399: LD_INT 47
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: LIST
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: LIST
78415: ST_TO_ADDR
// result := [ ] ;
78416: LD_ADDR_VAR 0 3
78420: PUSH
78421: EMPTY
78422: ST_TO_ADDR
// for i in turrets do
78423: LD_ADDR_VAR 0 4
78427: PUSH
78428: LD_VAR 0 1
78432: PUSH
78433: FOR_IN
78434: IFFALSE 78617
// begin nat := GetNation ( i ) ;
78436: LD_ADDR_VAR 0 7
78440: PUSH
78441: LD_VAR 0 4
78445: PPUSH
78446: CALL_OW 248
78450: ST_TO_ADDR
// weapon := 0 ;
78451: LD_ADDR_VAR 0 8
78455: PUSH
78456: LD_INT 0
78458: ST_TO_ADDR
// if not nat then
78459: LD_VAR 0 7
78463: NOT
78464: IFFALSE 78468
// continue ;
78466: GO 78433
// for j in list [ nat ] do
78468: LD_ADDR_VAR 0 5
78472: PUSH
78473: LD_VAR 0 10
78477: PUSH
78478: LD_VAR 0 7
78482: ARRAY
78483: PUSH
78484: FOR_IN
78485: IFFALSE 78526
// if GetBWeapon ( i ) = j [ 1 ] then
78487: LD_VAR 0 4
78491: PPUSH
78492: CALL_OW 269
78496: PUSH
78497: LD_VAR 0 5
78501: PUSH
78502: LD_INT 1
78504: ARRAY
78505: EQUAL
78506: IFFALSE 78524
// begin weapon := j [ 2 ] ;
78508: LD_ADDR_VAR 0 8
78512: PUSH
78513: LD_VAR 0 5
78517: PUSH
78518: LD_INT 2
78520: ARRAY
78521: ST_TO_ADDR
// break ;
78522: GO 78526
// end ;
78524: GO 78484
78526: POP
78527: POP
// if not weapon then
78528: LD_VAR 0 8
78532: NOT
78533: IFFALSE 78537
// continue ;
78535: GO 78433
// for k in factories do
78537: LD_ADDR_VAR 0 6
78541: PUSH
78542: LD_VAR 0 2
78546: PUSH
78547: FOR_IN
78548: IFFALSE 78613
// begin weapons := AvailableWeaponList ( k ) ;
78550: LD_ADDR_VAR 0 9
78554: PUSH
78555: LD_VAR 0 6
78559: PPUSH
78560: CALL_OW 478
78564: ST_TO_ADDR
// if not weapons then
78565: LD_VAR 0 9
78569: NOT
78570: IFFALSE 78574
// continue ;
78572: GO 78547
// if weapon in weapons then
78574: LD_VAR 0 8
78578: PUSH
78579: LD_VAR 0 9
78583: IN
78584: IFFALSE 78611
// begin result := [ i , weapon ] ;
78586: LD_ADDR_VAR 0 3
78590: PUSH
78591: LD_VAR 0 4
78595: PUSH
78596: LD_VAR 0 8
78600: PUSH
78601: EMPTY
78602: LIST
78603: LIST
78604: ST_TO_ADDR
// exit ;
78605: POP
78606: POP
78607: POP
78608: POP
78609: GO 78619
// end ; end ;
78611: GO 78547
78613: POP
78614: POP
// end ;
78615: GO 78433
78617: POP
78618: POP
// end ;
78619: LD_VAR 0 3
78623: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78624: LD_INT 0
78626: PPUSH
// if not side or side > 8 then
78627: LD_VAR 0 3
78631: NOT
78632: PUSH
78633: LD_VAR 0 3
78637: PUSH
78638: LD_INT 8
78640: GREATER
78641: OR
78642: IFFALSE 78646
// exit ;
78644: GO 78705
// if not range then
78646: LD_VAR 0 4
78650: NOT
78651: IFFALSE 78662
// range := - 12 ;
78653: LD_ADDR_VAR 0 4
78657: PUSH
78658: LD_INT 12
78660: NEG
78661: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78662: LD_VAR 0 1
78666: PPUSH
78667: LD_VAR 0 2
78671: PPUSH
78672: LD_VAR 0 3
78676: PPUSH
78677: LD_VAR 0 4
78681: PPUSH
78682: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78686: LD_VAR 0 1
78690: PPUSH
78691: LD_VAR 0 2
78695: PPUSH
78696: LD_VAR 0 3
78700: PPUSH
78701: CALL_OW 331
// end ;
78705: LD_VAR 0 5
78709: RET
// export function Video ( mode ) ; begin
78710: LD_INT 0
78712: PPUSH
// ingame_video = mode ;
78713: LD_ADDR_OWVAR 52
78717: PUSH
78718: LD_VAR 0 1
78722: ST_TO_ADDR
// interface_hidden = mode ;
78723: LD_ADDR_OWVAR 54
78727: PUSH
78728: LD_VAR 0 1
78732: ST_TO_ADDR
// end ;
78733: LD_VAR 0 2
78737: RET
// export function Join ( array , element ) ; begin
78738: LD_INT 0
78740: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78741: LD_ADDR_VAR 0 3
78745: PUSH
78746: LD_VAR 0 1
78750: PPUSH
78751: LD_VAR 0 1
78755: PUSH
78756: LD_INT 1
78758: PLUS
78759: PPUSH
78760: LD_VAR 0 2
78764: PPUSH
78765: CALL_OW 1
78769: ST_TO_ADDR
// end ;
78770: LD_VAR 0 3
78774: RET
// export function JoinUnion ( array , element ) ; begin
78775: LD_INT 0
78777: PPUSH
// result := array union element ;
78778: LD_ADDR_VAR 0 3
78782: PUSH
78783: LD_VAR 0 1
78787: PUSH
78788: LD_VAR 0 2
78792: UNION
78793: ST_TO_ADDR
// end ;
78794: LD_VAR 0 3
78798: RET
// export function GetBehemoths ( side ) ; begin
78799: LD_INT 0
78801: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78802: LD_ADDR_VAR 0 2
78806: PUSH
78807: LD_INT 22
78809: PUSH
78810: LD_VAR 0 1
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: LD_INT 31
78821: PUSH
78822: LD_INT 25
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: EMPTY
78830: LIST
78831: LIST
78832: PPUSH
78833: CALL_OW 69
78837: ST_TO_ADDR
// end ;
78838: LD_VAR 0 2
78842: RET
// export function Shuffle ( array ) ; var i , index ; begin
78843: LD_INT 0
78845: PPUSH
78846: PPUSH
78847: PPUSH
// result := [ ] ;
78848: LD_ADDR_VAR 0 2
78852: PUSH
78853: EMPTY
78854: ST_TO_ADDR
// if not array then
78855: LD_VAR 0 1
78859: NOT
78860: IFFALSE 78864
// exit ;
78862: GO 78963
// Randomize ;
78864: CALL_OW 10
// for i = array downto 1 do
78868: LD_ADDR_VAR 0 3
78872: PUSH
78873: DOUBLE
78874: LD_VAR 0 1
78878: INC
78879: ST_TO_ADDR
78880: LD_INT 1
78882: PUSH
78883: FOR_DOWNTO
78884: IFFALSE 78961
// begin index := rand ( 1 , array ) ;
78886: LD_ADDR_VAR 0 4
78890: PUSH
78891: LD_INT 1
78893: PPUSH
78894: LD_VAR 0 1
78898: PPUSH
78899: CALL_OW 12
78903: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78904: LD_ADDR_VAR 0 2
78908: PUSH
78909: LD_VAR 0 2
78913: PPUSH
78914: LD_VAR 0 2
78918: PUSH
78919: LD_INT 1
78921: PLUS
78922: PPUSH
78923: LD_VAR 0 1
78927: PUSH
78928: LD_VAR 0 4
78932: ARRAY
78933: PPUSH
78934: CALL_OW 2
78938: ST_TO_ADDR
// array := Delete ( array , index ) ;
78939: LD_ADDR_VAR 0 1
78943: PUSH
78944: LD_VAR 0 1
78948: PPUSH
78949: LD_VAR 0 4
78953: PPUSH
78954: CALL_OW 3
78958: ST_TO_ADDR
// end ;
78959: GO 78883
78961: POP
78962: POP
// end ;
78963: LD_VAR 0 2
78967: RET
// export function GetBaseMaterials ( base ) ; begin
78968: LD_INT 0
78970: PPUSH
// result := [ 0 , 0 , 0 ] ;
78971: LD_ADDR_VAR 0 2
78975: PUSH
78976: LD_INT 0
78978: PUSH
78979: LD_INT 0
78981: PUSH
78982: LD_INT 0
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: LIST
78989: ST_TO_ADDR
// if not base then
78990: LD_VAR 0 1
78994: NOT
78995: IFFALSE 78999
// exit ;
78997: GO 79048
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78999: LD_ADDR_VAR 0 2
79003: PUSH
79004: LD_VAR 0 1
79008: PPUSH
79009: LD_INT 1
79011: PPUSH
79012: CALL_OW 275
79016: PUSH
79017: LD_VAR 0 1
79021: PPUSH
79022: LD_INT 2
79024: PPUSH
79025: CALL_OW 275
79029: PUSH
79030: LD_VAR 0 1
79034: PPUSH
79035: LD_INT 3
79037: PPUSH
79038: CALL_OW 275
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: LIST
79047: ST_TO_ADDR
// end ;
79048: LD_VAR 0 2
79052: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79053: LD_INT 0
79055: PPUSH
79056: PPUSH
// result := array ;
79057: LD_ADDR_VAR 0 3
79061: PUSH
79062: LD_VAR 0 1
79066: ST_TO_ADDR
// if size >= result then
79067: LD_VAR 0 2
79071: PUSH
79072: LD_VAR 0 3
79076: GREATEREQUAL
79077: IFFALSE 79081
// exit ;
79079: GO 79131
// if size then
79081: LD_VAR 0 2
79085: IFFALSE 79131
// for i := array downto size do
79087: LD_ADDR_VAR 0 4
79091: PUSH
79092: DOUBLE
79093: LD_VAR 0 1
79097: INC
79098: ST_TO_ADDR
79099: LD_VAR 0 2
79103: PUSH
79104: FOR_DOWNTO
79105: IFFALSE 79129
// result := Delete ( result , result ) ;
79107: LD_ADDR_VAR 0 3
79111: PUSH
79112: LD_VAR 0 3
79116: PPUSH
79117: LD_VAR 0 3
79121: PPUSH
79122: CALL_OW 3
79126: ST_TO_ADDR
79127: GO 79104
79129: POP
79130: POP
// end ;
79131: LD_VAR 0 3
79135: RET
// export function ComExit ( unit ) ; var tmp ; begin
79136: LD_INT 0
79138: PPUSH
79139: PPUSH
// if not IsInUnit ( unit ) then
79140: LD_VAR 0 1
79144: PPUSH
79145: CALL_OW 310
79149: NOT
79150: IFFALSE 79154
// exit ;
79152: GO 79214
// tmp := IsInUnit ( unit ) ;
79154: LD_ADDR_VAR 0 3
79158: PUSH
79159: LD_VAR 0 1
79163: PPUSH
79164: CALL_OW 310
79168: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79169: LD_VAR 0 3
79173: PPUSH
79174: CALL_OW 247
79178: PUSH
79179: LD_INT 2
79181: EQUAL
79182: IFFALSE 79195
// ComExitVehicle ( unit ) else
79184: LD_VAR 0 1
79188: PPUSH
79189: CALL_OW 121
79193: GO 79204
// ComExitBuilding ( unit ) ;
79195: LD_VAR 0 1
79199: PPUSH
79200: CALL_OW 122
// result := tmp ;
79204: LD_ADDR_VAR 0 2
79208: PUSH
79209: LD_VAR 0 3
79213: ST_TO_ADDR
// end ;
79214: LD_VAR 0 2
79218: RET
// export function ComExitAll ( units ) ; var i ; begin
79219: LD_INT 0
79221: PPUSH
79222: PPUSH
// if not units then
79223: LD_VAR 0 1
79227: NOT
79228: IFFALSE 79232
// exit ;
79230: GO 79258
// for i in units do
79232: LD_ADDR_VAR 0 3
79236: PUSH
79237: LD_VAR 0 1
79241: PUSH
79242: FOR_IN
79243: IFFALSE 79256
// ComExit ( i ) ;
79245: LD_VAR 0 3
79249: PPUSH
79250: CALL 79136 0 1
79254: GO 79242
79256: POP
79257: POP
// end ;
79258: LD_VAR 0 2
79262: RET
// export function ResetHc ; begin
79263: LD_INT 0
79265: PPUSH
// InitHc ;
79266: CALL_OW 19
// hc_importance := 0 ;
79270: LD_ADDR_OWVAR 32
79274: PUSH
79275: LD_INT 0
79277: ST_TO_ADDR
// end ;
79278: LD_VAR 0 1
79282: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79283: LD_INT 0
79285: PPUSH
79286: PPUSH
79287: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79288: LD_ADDR_VAR 0 6
79292: PUSH
79293: LD_VAR 0 1
79297: PUSH
79298: LD_VAR 0 3
79302: PLUS
79303: PUSH
79304: LD_INT 2
79306: DIV
79307: ST_TO_ADDR
// if _x < 0 then
79308: LD_VAR 0 6
79312: PUSH
79313: LD_INT 0
79315: LESS
79316: IFFALSE 79333
// _x := _x * - 1 ;
79318: LD_ADDR_VAR 0 6
79322: PUSH
79323: LD_VAR 0 6
79327: PUSH
79328: LD_INT 1
79330: NEG
79331: MUL
79332: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79333: LD_ADDR_VAR 0 7
79337: PUSH
79338: LD_VAR 0 2
79342: PUSH
79343: LD_VAR 0 4
79347: PLUS
79348: PUSH
79349: LD_INT 2
79351: DIV
79352: ST_TO_ADDR
// if _y < 0 then
79353: LD_VAR 0 7
79357: PUSH
79358: LD_INT 0
79360: LESS
79361: IFFALSE 79378
// _y := _y * - 1 ;
79363: LD_ADDR_VAR 0 7
79367: PUSH
79368: LD_VAR 0 7
79372: PUSH
79373: LD_INT 1
79375: NEG
79376: MUL
79377: ST_TO_ADDR
// result := [ _x , _y ] ;
79378: LD_ADDR_VAR 0 5
79382: PUSH
79383: LD_VAR 0 6
79387: PUSH
79388: LD_VAR 0 7
79392: PUSH
79393: EMPTY
79394: LIST
79395: LIST
79396: ST_TO_ADDR
// end ;
79397: LD_VAR 0 5
79401: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79402: LD_INT 0
79404: PPUSH
79405: PPUSH
79406: PPUSH
79407: PPUSH
// task := GetTaskList ( unit ) ;
79408: LD_ADDR_VAR 0 7
79412: PUSH
79413: LD_VAR 0 1
79417: PPUSH
79418: CALL_OW 437
79422: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79423: LD_VAR 0 7
79427: NOT
79428: PUSH
79429: LD_VAR 0 1
79433: PPUSH
79434: LD_VAR 0 2
79438: PPUSH
79439: CALL_OW 308
79443: NOT
79444: AND
79445: IFFALSE 79449
// exit ;
79447: GO 79567
// if IsInArea ( unit , area ) then
79449: LD_VAR 0 1
79453: PPUSH
79454: LD_VAR 0 2
79458: PPUSH
79459: CALL_OW 308
79463: IFFALSE 79481
// begin ComMoveToArea ( unit , goAway ) ;
79465: LD_VAR 0 1
79469: PPUSH
79470: LD_VAR 0 3
79474: PPUSH
79475: CALL_OW 113
// exit ;
79479: GO 79567
// end ; if task [ 1 ] [ 1 ] <> M then
79481: LD_VAR 0 7
79485: PUSH
79486: LD_INT 1
79488: ARRAY
79489: PUSH
79490: LD_INT 1
79492: ARRAY
79493: PUSH
79494: LD_STRING M
79496: NONEQUAL
79497: IFFALSE 79501
// exit ;
79499: GO 79567
// x := task [ 1 ] [ 2 ] ;
79501: LD_ADDR_VAR 0 5
79505: PUSH
79506: LD_VAR 0 7
79510: PUSH
79511: LD_INT 1
79513: ARRAY
79514: PUSH
79515: LD_INT 2
79517: ARRAY
79518: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79519: LD_ADDR_VAR 0 6
79523: PUSH
79524: LD_VAR 0 7
79528: PUSH
79529: LD_INT 1
79531: ARRAY
79532: PUSH
79533: LD_INT 3
79535: ARRAY
79536: ST_TO_ADDR
// if InArea ( x , y , area ) then
79537: LD_VAR 0 5
79541: PPUSH
79542: LD_VAR 0 6
79546: PPUSH
79547: LD_VAR 0 2
79551: PPUSH
79552: CALL_OW 309
79556: IFFALSE 79567
// ComStop ( unit ) ;
79558: LD_VAR 0 1
79562: PPUSH
79563: CALL_OW 141
// end ;
79567: LD_VAR 0 4
79571: RET
// export function Abs ( value ) ; begin
79572: LD_INT 0
79574: PPUSH
// result := value ;
79575: LD_ADDR_VAR 0 2
79579: PUSH
79580: LD_VAR 0 1
79584: ST_TO_ADDR
// if value < 0 then
79585: LD_VAR 0 1
79589: PUSH
79590: LD_INT 0
79592: LESS
79593: IFFALSE 79610
// result := value * - 1 ;
79595: LD_ADDR_VAR 0 2
79599: PUSH
79600: LD_VAR 0 1
79604: PUSH
79605: LD_INT 1
79607: NEG
79608: MUL
79609: ST_TO_ADDR
// end ;
79610: LD_VAR 0 2
79614: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79615: LD_INT 0
79617: PPUSH
79618: PPUSH
79619: PPUSH
79620: PPUSH
79621: PPUSH
79622: PPUSH
79623: PPUSH
79624: PPUSH
// if not unit or not building then
79625: LD_VAR 0 1
79629: NOT
79630: PUSH
79631: LD_VAR 0 2
79635: NOT
79636: OR
79637: IFFALSE 79641
// exit ;
79639: GO 79867
// x := GetX ( building ) ;
79641: LD_ADDR_VAR 0 4
79645: PUSH
79646: LD_VAR 0 2
79650: PPUSH
79651: CALL_OW 250
79655: ST_TO_ADDR
// y := GetY ( building ) ;
79656: LD_ADDR_VAR 0 6
79660: PUSH
79661: LD_VAR 0 2
79665: PPUSH
79666: CALL_OW 251
79670: ST_TO_ADDR
// d := GetDir ( building ) ;
79671: LD_ADDR_VAR 0 8
79675: PUSH
79676: LD_VAR 0 2
79680: PPUSH
79681: CALL_OW 254
79685: ST_TO_ADDR
// r := 4 ;
79686: LD_ADDR_VAR 0 9
79690: PUSH
79691: LD_INT 4
79693: ST_TO_ADDR
// for i := 1 to 5 do
79694: LD_ADDR_VAR 0 10
79698: PUSH
79699: DOUBLE
79700: LD_INT 1
79702: DEC
79703: ST_TO_ADDR
79704: LD_INT 5
79706: PUSH
79707: FOR_TO
79708: IFFALSE 79865
// begin _x := ShiftX ( x , d , r + i ) ;
79710: LD_ADDR_VAR 0 5
79714: PUSH
79715: LD_VAR 0 4
79719: PPUSH
79720: LD_VAR 0 8
79724: PPUSH
79725: LD_VAR 0 9
79729: PUSH
79730: LD_VAR 0 10
79734: PLUS
79735: PPUSH
79736: CALL_OW 272
79740: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79741: LD_ADDR_VAR 0 7
79745: PUSH
79746: LD_VAR 0 6
79750: PPUSH
79751: LD_VAR 0 8
79755: PPUSH
79756: LD_VAR 0 9
79760: PUSH
79761: LD_VAR 0 10
79765: PLUS
79766: PPUSH
79767: CALL_OW 273
79771: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79772: LD_VAR 0 5
79776: PPUSH
79777: LD_VAR 0 7
79781: PPUSH
79782: CALL_OW 488
79786: PUSH
79787: LD_VAR 0 5
79791: PPUSH
79792: LD_VAR 0 7
79796: PPUSH
79797: CALL_OW 428
79801: PPUSH
79802: CALL_OW 247
79806: PUSH
79807: LD_INT 3
79809: PUSH
79810: LD_INT 2
79812: PUSH
79813: EMPTY
79814: LIST
79815: LIST
79816: IN
79817: NOT
79818: AND
79819: IFFALSE 79863
// begin ComMoveXY ( unit , _x , _y ) ;
79821: LD_VAR 0 1
79825: PPUSH
79826: LD_VAR 0 5
79830: PPUSH
79831: LD_VAR 0 7
79835: PPUSH
79836: CALL_OW 111
// result := [ _x , _y ] ;
79840: LD_ADDR_VAR 0 3
79844: PUSH
79845: LD_VAR 0 5
79849: PUSH
79850: LD_VAR 0 7
79854: PUSH
79855: EMPTY
79856: LIST
79857: LIST
79858: ST_TO_ADDR
// exit ;
79859: POP
79860: POP
79861: GO 79867
// end ; end ;
79863: GO 79707
79865: POP
79866: POP
// end ;
79867: LD_VAR 0 3
79871: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79872: LD_INT 0
79874: PPUSH
79875: PPUSH
79876: PPUSH
// result := 0 ;
79877: LD_ADDR_VAR 0 3
79881: PUSH
79882: LD_INT 0
79884: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79885: LD_VAR 0 1
79889: PUSH
79890: LD_INT 0
79892: LESS
79893: PUSH
79894: LD_VAR 0 1
79898: PUSH
79899: LD_INT 8
79901: GREATER
79902: OR
79903: PUSH
79904: LD_VAR 0 2
79908: PUSH
79909: LD_INT 0
79911: LESS
79912: OR
79913: PUSH
79914: LD_VAR 0 2
79918: PUSH
79919: LD_INT 8
79921: GREATER
79922: OR
79923: IFFALSE 79927
// exit ;
79925: GO 80002
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79927: LD_ADDR_VAR 0 4
79931: PUSH
79932: LD_INT 22
79934: PUSH
79935: LD_VAR 0 2
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: PPUSH
79944: CALL_OW 69
79948: PUSH
79949: FOR_IN
79950: IFFALSE 80000
// begin un := UnitShoot ( i ) ;
79952: LD_ADDR_VAR 0 5
79956: PUSH
79957: LD_VAR 0 4
79961: PPUSH
79962: CALL_OW 504
79966: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79967: LD_VAR 0 5
79971: PPUSH
79972: CALL_OW 255
79976: PUSH
79977: LD_VAR 0 1
79981: EQUAL
79982: IFFALSE 79998
// begin result := un ;
79984: LD_ADDR_VAR 0 3
79988: PUSH
79989: LD_VAR 0 5
79993: ST_TO_ADDR
// exit ;
79994: POP
79995: POP
79996: GO 80002
// end ; end ;
79998: GO 79949
80000: POP
80001: POP
// end ;
80002: LD_VAR 0 3
80006: RET
// export function GetCargoBay ( units ) ; begin
80007: LD_INT 0
80009: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80010: LD_ADDR_VAR 0 2
80014: PUSH
80015: LD_VAR 0 1
80019: PPUSH
80020: LD_INT 2
80022: PUSH
80023: LD_INT 34
80025: PUSH
80026: LD_INT 12
80028: PUSH
80029: EMPTY
80030: LIST
80031: LIST
80032: PUSH
80033: LD_INT 34
80035: PUSH
80036: LD_INT 51
80038: PUSH
80039: EMPTY
80040: LIST
80041: LIST
80042: PUSH
80043: LD_INT 34
80045: PUSH
80046: LD_INT 32
80048: PUSH
80049: EMPTY
80050: LIST
80051: LIST
80052: PUSH
80053: LD_INT 34
80055: PUSH
80056: LD_INT 89
80058: PUSH
80059: EMPTY
80060: LIST
80061: LIST
80062: PUSH
80063: EMPTY
80064: LIST
80065: LIST
80066: LIST
80067: LIST
80068: LIST
80069: PPUSH
80070: CALL_OW 72
80074: ST_TO_ADDR
// end ;
80075: LD_VAR 0 2
80079: RET
// export function Negate ( value ) ; begin
80080: LD_INT 0
80082: PPUSH
// result := not value ;
80083: LD_ADDR_VAR 0 2
80087: PUSH
80088: LD_VAR 0 1
80092: NOT
80093: ST_TO_ADDR
// end ;
80094: LD_VAR 0 2
80098: RET
// export function Inc ( value ) ; begin
80099: LD_INT 0
80101: PPUSH
// result := value + 1 ;
80102: LD_ADDR_VAR 0 2
80106: PUSH
80107: LD_VAR 0 1
80111: PUSH
80112: LD_INT 1
80114: PLUS
80115: ST_TO_ADDR
// end ;
80116: LD_VAR 0 2
80120: RET
// export function Dec ( value ) ; begin
80121: LD_INT 0
80123: PPUSH
// result := value - 1 ;
80124: LD_ADDR_VAR 0 2
80128: PUSH
80129: LD_VAR 0 1
80133: PUSH
80134: LD_INT 1
80136: MINUS
80137: ST_TO_ADDR
// end ;
80138: LD_VAR 0 2
80142: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80143: LD_INT 0
80145: PPUSH
80146: PPUSH
80147: PPUSH
80148: PPUSH
80149: PPUSH
80150: PPUSH
80151: PPUSH
80152: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80153: LD_VAR 0 1
80157: PPUSH
80158: LD_VAR 0 2
80162: PPUSH
80163: CALL_OW 488
80167: NOT
80168: PUSH
80169: LD_VAR 0 3
80173: PPUSH
80174: LD_VAR 0 4
80178: PPUSH
80179: CALL_OW 488
80183: NOT
80184: OR
80185: IFFALSE 80198
// begin result := - 1 ;
80187: LD_ADDR_VAR 0 5
80191: PUSH
80192: LD_INT 1
80194: NEG
80195: ST_TO_ADDR
// exit ;
80196: GO 80433
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80198: LD_ADDR_VAR 0 12
80202: PUSH
80203: LD_VAR 0 1
80207: PPUSH
80208: LD_VAR 0 2
80212: PPUSH
80213: LD_VAR 0 3
80217: PPUSH
80218: LD_VAR 0 4
80222: PPUSH
80223: CALL 79283 0 4
80227: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80228: LD_ADDR_VAR 0 11
80232: PUSH
80233: LD_VAR 0 1
80237: PPUSH
80238: LD_VAR 0 2
80242: PPUSH
80243: LD_VAR 0 12
80247: PUSH
80248: LD_INT 1
80250: ARRAY
80251: PPUSH
80252: LD_VAR 0 12
80256: PUSH
80257: LD_INT 2
80259: ARRAY
80260: PPUSH
80261: CALL_OW 298
80265: ST_TO_ADDR
// distance := 9999 ;
80266: LD_ADDR_VAR 0 10
80270: PUSH
80271: LD_INT 9999
80273: ST_TO_ADDR
// for i := 0 to 5 do
80274: LD_ADDR_VAR 0 6
80278: PUSH
80279: DOUBLE
80280: LD_INT 0
80282: DEC
80283: ST_TO_ADDR
80284: LD_INT 5
80286: PUSH
80287: FOR_TO
80288: IFFALSE 80431
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80290: LD_ADDR_VAR 0 7
80294: PUSH
80295: LD_VAR 0 1
80299: PPUSH
80300: LD_VAR 0 6
80304: PPUSH
80305: LD_VAR 0 11
80309: PPUSH
80310: CALL_OW 272
80314: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80315: LD_ADDR_VAR 0 8
80319: PUSH
80320: LD_VAR 0 2
80324: PPUSH
80325: LD_VAR 0 6
80329: PPUSH
80330: LD_VAR 0 11
80334: PPUSH
80335: CALL_OW 273
80339: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80340: LD_VAR 0 7
80344: PPUSH
80345: LD_VAR 0 8
80349: PPUSH
80350: CALL_OW 488
80354: NOT
80355: IFFALSE 80359
// continue ;
80357: GO 80287
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80359: LD_ADDR_VAR 0 9
80363: PUSH
80364: LD_VAR 0 12
80368: PUSH
80369: LD_INT 1
80371: ARRAY
80372: PPUSH
80373: LD_VAR 0 12
80377: PUSH
80378: LD_INT 2
80380: ARRAY
80381: PPUSH
80382: LD_VAR 0 7
80386: PPUSH
80387: LD_VAR 0 8
80391: PPUSH
80392: CALL_OW 298
80396: ST_TO_ADDR
// if tmp < distance then
80397: LD_VAR 0 9
80401: PUSH
80402: LD_VAR 0 10
80406: LESS
80407: IFFALSE 80429
// begin result := i ;
80409: LD_ADDR_VAR 0 5
80413: PUSH
80414: LD_VAR 0 6
80418: ST_TO_ADDR
// distance := tmp ;
80419: LD_ADDR_VAR 0 10
80423: PUSH
80424: LD_VAR 0 9
80428: ST_TO_ADDR
// end ; end ;
80429: GO 80287
80431: POP
80432: POP
// end ;
80433: LD_VAR 0 5
80437: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80438: LD_INT 0
80440: PPUSH
80441: PPUSH
// if not driver or not IsInUnit ( driver ) then
80442: LD_VAR 0 1
80446: NOT
80447: PUSH
80448: LD_VAR 0 1
80452: PPUSH
80453: CALL_OW 310
80457: NOT
80458: OR
80459: IFFALSE 80463
// exit ;
80461: GO 80553
// vehicle := IsInUnit ( driver ) ;
80463: LD_ADDR_VAR 0 3
80467: PUSH
80468: LD_VAR 0 1
80472: PPUSH
80473: CALL_OW 310
80477: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80478: LD_VAR 0 1
80482: PPUSH
80483: LD_STRING \
80485: PUSH
80486: LD_INT 0
80488: PUSH
80489: LD_INT 0
80491: PUSH
80492: LD_INT 0
80494: PUSH
80495: LD_INT 0
80497: PUSH
80498: LD_INT 0
80500: PUSH
80501: LD_INT 0
80503: PUSH
80504: EMPTY
80505: LIST
80506: LIST
80507: LIST
80508: LIST
80509: LIST
80510: LIST
80511: LIST
80512: PUSH
80513: LD_STRING E
80515: PUSH
80516: LD_INT 0
80518: PUSH
80519: LD_INT 0
80521: PUSH
80522: LD_VAR 0 3
80526: PUSH
80527: LD_INT 0
80529: PUSH
80530: LD_INT 0
80532: PUSH
80533: LD_INT 0
80535: PUSH
80536: EMPTY
80537: LIST
80538: LIST
80539: LIST
80540: LIST
80541: LIST
80542: LIST
80543: LIST
80544: PUSH
80545: EMPTY
80546: LIST
80547: LIST
80548: PPUSH
80549: CALL_OW 446
// end ;
80553: LD_VAR 0 2
80557: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80558: LD_INT 0
80560: PPUSH
80561: PPUSH
// if not driver or not IsInUnit ( driver ) then
80562: LD_VAR 0 1
80566: NOT
80567: PUSH
80568: LD_VAR 0 1
80572: PPUSH
80573: CALL_OW 310
80577: NOT
80578: OR
80579: IFFALSE 80583
// exit ;
80581: GO 80673
// vehicle := IsInUnit ( driver ) ;
80583: LD_ADDR_VAR 0 3
80587: PUSH
80588: LD_VAR 0 1
80592: PPUSH
80593: CALL_OW 310
80597: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80598: LD_VAR 0 1
80602: PPUSH
80603: LD_STRING \
80605: PUSH
80606: LD_INT 0
80608: PUSH
80609: LD_INT 0
80611: PUSH
80612: LD_INT 0
80614: PUSH
80615: LD_INT 0
80617: PUSH
80618: LD_INT 0
80620: PUSH
80621: LD_INT 0
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: LIST
80628: LIST
80629: LIST
80630: LIST
80631: LIST
80632: PUSH
80633: LD_STRING E
80635: PUSH
80636: LD_INT 0
80638: PUSH
80639: LD_INT 0
80641: PUSH
80642: LD_VAR 0 3
80646: PUSH
80647: LD_INT 0
80649: PUSH
80650: LD_INT 0
80652: PUSH
80653: LD_INT 0
80655: PUSH
80656: EMPTY
80657: LIST
80658: LIST
80659: LIST
80660: LIST
80661: LIST
80662: LIST
80663: LIST
80664: PUSH
80665: EMPTY
80666: LIST
80667: LIST
80668: PPUSH
80669: CALL_OW 447
// end ;
80673: LD_VAR 0 2
80677: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80678: LD_INT 0
80680: PPUSH
80681: PPUSH
80682: PPUSH
// tmp := [ ] ;
80683: LD_ADDR_VAR 0 5
80687: PUSH
80688: EMPTY
80689: ST_TO_ADDR
// for i in units do
80690: LD_ADDR_VAR 0 4
80694: PUSH
80695: LD_VAR 0 1
80699: PUSH
80700: FOR_IN
80701: IFFALSE 80739
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80703: LD_ADDR_VAR 0 5
80707: PUSH
80708: LD_VAR 0 5
80712: PPUSH
80713: LD_VAR 0 5
80717: PUSH
80718: LD_INT 1
80720: PLUS
80721: PPUSH
80722: LD_VAR 0 4
80726: PPUSH
80727: CALL_OW 256
80731: PPUSH
80732: CALL_OW 2
80736: ST_TO_ADDR
80737: GO 80700
80739: POP
80740: POP
// if not tmp then
80741: LD_VAR 0 5
80745: NOT
80746: IFFALSE 80750
// exit ;
80748: GO 80798
// if asc then
80750: LD_VAR 0 2
80754: IFFALSE 80778
// result := SortListByListAsc ( units , tmp ) else
80756: LD_ADDR_VAR 0 3
80760: PUSH
80761: LD_VAR 0 1
80765: PPUSH
80766: LD_VAR 0 5
80770: PPUSH
80771: CALL_OW 76
80775: ST_TO_ADDR
80776: GO 80798
// result := SortListByListDesc ( units , tmp ) ;
80778: LD_ADDR_VAR 0 3
80782: PUSH
80783: LD_VAR 0 1
80787: PPUSH
80788: LD_VAR 0 5
80792: PPUSH
80793: CALL_OW 77
80797: ST_TO_ADDR
// end ;
80798: LD_VAR 0 3
80802: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80803: LD_INT 0
80805: PPUSH
80806: PPUSH
// task := GetTaskList ( mech ) ;
80807: LD_ADDR_VAR 0 4
80811: PUSH
80812: LD_VAR 0 1
80816: PPUSH
80817: CALL_OW 437
80821: ST_TO_ADDR
// if not task then
80822: LD_VAR 0 4
80826: NOT
80827: IFFALSE 80831
// exit ;
80829: GO 80873
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80831: LD_ADDR_VAR 0 3
80835: PUSH
80836: LD_VAR 0 4
80840: PUSH
80841: LD_INT 1
80843: ARRAY
80844: PUSH
80845: LD_INT 1
80847: ARRAY
80848: PUSH
80849: LD_STRING r
80851: EQUAL
80852: PUSH
80853: LD_VAR 0 4
80857: PUSH
80858: LD_INT 1
80860: ARRAY
80861: PUSH
80862: LD_INT 4
80864: ARRAY
80865: PUSH
80866: LD_VAR 0 2
80870: EQUAL
80871: AND
80872: ST_TO_ADDR
// end ;
80873: LD_VAR 0 3
80877: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80878: LD_INT 0
80880: PPUSH
// SetDir ( unit , d ) ;
80881: LD_VAR 0 1
80885: PPUSH
80886: LD_VAR 0 4
80890: PPUSH
80891: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80895: LD_VAR 0 1
80899: PPUSH
80900: LD_VAR 0 2
80904: PPUSH
80905: LD_VAR 0 3
80909: PPUSH
80910: LD_VAR 0 5
80914: PPUSH
80915: CALL_OW 48
// end ;
80919: LD_VAR 0 6
80923: RET
// export function ToNaturalNumber ( number ) ; begin
80924: LD_INT 0
80926: PPUSH
// result := number div 1 ;
80927: LD_ADDR_VAR 0 2
80931: PUSH
80932: LD_VAR 0 1
80936: PUSH
80937: LD_INT 1
80939: DIV
80940: ST_TO_ADDR
// if number < 0 then
80941: LD_VAR 0 1
80945: PUSH
80946: LD_INT 0
80948: LESS
80949: IFFALSE 80959
// result := 0 ;
80951: LD_ADDR_VAR 0 2
80955: PUSH
80956: LD_INT 0
80958: ST_TO_ADDR
// end ;
80959: LD_VAR 0 2
80963: RET
// export function SortByClass ( units , class ) ; var un ; begin
80964: LD_INT 0
80966: PPUSH
80967: PPUSH
// if not units or not class then
80968: LD_VAR 0 1
80972: NOT
80973: PUSH
80974: LD_VAR 0 2
80978: NOT
80979: OR
80980: IFFALSE 80984
// exit ;
80982: GO 81079
// result := [ ] ;
80984: LD_ADDR_VAR 0 3
80988: PUSH
80989: EMPTY
80990: ST_TO_ADDR
// for un in units do
80991: LD_ADDR_VAR 0 4
80995: PUSH
80996: LD_VAR 0 1
81000: PUSH
81001: FOR_IN
81002: IFFALSE 81077
// if GetClass ( un ) = class then
81004: LD_VAR 0 4
81008: PPUSH
81009: CALL_OW 257
81013: PUSH
81014: LD_VAR 0 2
81018: EQUAL
81019: IFFALSE 81046
// result := Insert ( result , 1 , un ) else
81021: LD_ADDR_VAR 0 3
81025: PUSH
81026: LD_VAR 0 3
81030: PPUSH
81031: LD_INT 1
81033: PPUSH
81034: LD_VAR 0 4
81038: PPUSH
81039: CALL_OW 2
81043: ST_TO_ADDR
81044: GO 81075
// result := Replace ( result , result + 1 , un ) ;
81046: LD_ADDR_VAR 0 3
81050: PUSH
81051: LD_VAR 0 3
81055: PPUSH
81056: LD_VAR 0 3
81060: PUSH
81061: LD_INT 1
81063: PLUS
81064: PPUSH
81065: LD_VAR 0 4
81069: PPUSH
81070: CALL_OW 1
81074: ST_TO_ADDR
81075: GO 81001
81077: POP
81078: POP
// end ;
81079: LD_VAR 0 3
81083: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81084: LD_INT 0
81086: PPUSH
81087: PPUSH
81088: PPUSH
81089: PPUSH
81090: PPUSH
81091: PPUSH
81092: PPUSH
// result := [ ] ;
81093: LD_ADDR_VAR 0 4
81097: PUSH
81098: EMPTY
81099: ST_TO_ADDR
// if x - r < 0 then
81100: LD_VAR 0 1
81104: PUSH
81105: LD_VAR 0 3
81109: MINUS
81110: PUSH
81111: LD_INT 0
81113: LESS
81114: IFFALSE 81126
// min_x := 0 else
81116: LD_ADDR_VAR 0 8
81120: PUSH
81121: LD_INT 0
81123: ST_TO_ADDR
81124: GO 81142
// min_x := x - r ;
81126: LD_ADDR_VAR 0 8
81130: PUSH
81131: LD_VAR 0 1
81135: PUSH
81136: LD_VAR 0 3
81140: MINUS
81141: ST_TO_ADDR
// if y - r < 0 then
81142: LD_VAR 0 2
81146: PUSH
81147: LD_VAR 0 3
81151: MINUS
81152: PUSH
81153: LD_INT 0
81155: LESS
81156: IFFALSE 81168
// min_y := 0 else
81158: LD_ADDR_VAR 0 7
81162: PUSH
81163: LD_INT 0
81165: ST_TO_ADDR
81166: GO 81184
// min_y := y - r ;
81168: LD_ADDR_VAR 0 7
81172: PUSH
81173: LD_VAR 0 2
81177: PUSH
81178: LD_VAR 0 3
81182: MINUS
81183: ST_TO_ADDR
// max_x := x + r ;
81184: LD_ADDR_VAR 0 9
81188: PUSH
81189: LD_VAR 0 1
81193: PUSH
81194: LD_VAR 0 3
81198: PLUS
81199: ST_TO_ADDR
// max_y := y + r ;
81200: LD_ADDR_VAR 0 10
81204: PUSH
81205: LD_VAR 0 2
81209: PUSH
81210: LD_VAR 0 3
81214: PLUS
81215: ST_TO_ADDR
// for _x = min_x to max_x do
81216: LD_ADDR_VAR 0 5
81220: PUSH
81221: DOUBLE
81222: LD_VAR 0 8
81226: DEC
81227: ST_TO_ADDR
81228: LD_VAR 0 9
81232: PUSH
81233: FOR_TO
81234: IFFALSE 81335
// for _y = min_y to max_y do
81236: LD_ADDR_VAR 0 6
81240: PUSH
81241: DOUBLE
81242: LD_VAR 0 7
81246: DEC
81247: ST_TO_ADDR
81248: LD_VAR 0 10
81252: PUSH
81253: FOR_TO
81254: IFFALSE 81331
// begin if not ValidHex ( _x , _y ) then
81256: LD_VAR 0 5
81260: PPUSH
81261: LD_VAR 0 6
81265: PPUSH
81266: CALL_OW 488
81270: NOT
81271: IFFALSE 81275
// continue ;
81273: GO 81253
// if GetResourceTypeXY ( _x , _y ) then
81275: LD_VAR 0 5
81279: PPUSH
81280: LD_VAR 0 6
81284: PPUSH
81285: CALL_OW 283
81289: IFFALSE 81329
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81291: LD_ADDR_VAR 0 4
81295: PUSH
81296: LD_VAR 0 4
81300: PPUSH
81301: LD_VAR 0 4
81305: PUSH
81306: LD_INT 1
81308: PLUS
81309: PPUSH
81310: LD_VAR 0 5
81314: PUSH
81315: LD_VAR 0 6
81319: PUSH
81320: EMPTY
81321: LIST
81322: LIST
81323: PPUSH
81324: CALL_OW 1
81328: ST_TO_ADDR
// end ;
81329: GO 81253
81331: POP
81332: POP
81333: GO 81233
81335: POP
81336: POP
// end ;
81337: LD_VAR 0 4
81341: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81342: LD_INT 0
81344: PPUSH
81345: PPUSH
81346: PPUSH
81347: PPUSH
81348: PPUSH
81349: PPUSH
81350: PPUSH
81351: PPUSH
// if not units then
81352: LD_VAR 0 1
81356: NOT
81357: IFFALSE 81361
// exit ;
81359: GO 81885
// result := UnitFilter ( units , [ f_ok ] ) ;
81361: LD_ADDR_VAR 0 3
81365: PUSH
81366: LD_VAR 0 1
81370: PPUSH
81371: LD_INT 50
81373: PUSH
81374: EMPTY
81375: LIST
81376: PPUSH
81377: CALL_OW 72
81381: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81382: LD_ADDR_VAR 0 8
81386: PUSH
81387: LD_VAR 0 1
81391: PUSH
81392: LD_INT 1
81394: ARRAY
81395: PPUSH
81396: CALL_OW 255
81400: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81401: LD_ADDR_VAR 0 10
81405: PUSH
81406: LD_INT 29
81408: PUSH
81409: LD_INT 91
81411: PUSH
81412: LD_INT 49
81414: PUSH
81415: EMPTY
81416: LIST
81417: LIST
81418: LIST
81419: ST_TO_ADDR
// if not result then
81420: LD_VAR 0 3
81424: NOT
81425: IFFALSE 81429
// exit ;
81427: GO 81885
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81429: LD_ADDR_VAR 0 5
81433: PUSH
81434: LD_INT 81
81436: PUSH
81437: LD_VAR 0 8
81441: PUSH
81442: EMPTY
81443: LIST
81444: LIST
81445: PPUSH
81446: CALL_OW 69
81450: ST_TO_ADDR
// for i in result do
81451: LD_ADDR_VAR 0 4
81455: PUSH
81456: LD_VAR 0 3
81460: PUSH
81461: FOR_IN
81462: IFFALSE 81883
// begin tag := GetTag ( i ) + 1 ;
81464: LD_ADDR_VAR 0 9
81468: PUSH
81469: LD_VAR 0 4
81473: PPUSH
81474: CALL_OW 110
81478: PUSH
81479: LD_INT 1
81481: PLUS
81482: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81483: LD_ADDR_VAR 0 7
81487: PUSH
81488: LD_VAR 0 4
81492: PPUSH
81493: CALL_OW 250
81497: PPUSH
81498: LD_VAR 0 4
81502: PPUSH
81503: CALL_OW 251
81507: PPUSH
81508: LD_INT 6
81510: PPUSH
81511: CALL 81084 0 3
81515: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81516: LD_VAR 0 4
81520: PPUSH
81521: CALL_OW 247
81525: PUSH
81526: LD_INT 2
81528: EQUAL
81529: PUSH
81530: LD_VAR 0 7
81534: AND
81535: PUSH
81536: LD_VAR 0 4
81540: PPUSH
81541: CALL_OW 264
81545: PUSH
81546: LD_VAR 0 10
81550: IN
81551: NOT
81552: AND
81553: IFFALSE 81592
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81555: LD_VAR 0 4
81559: PPUSH
81560: LD_VAR 0 7
81564: PUSH
81565: LD_INT 1
81567: ARRAY
81568: PUSH
81569: LD_INT 1
81571: ARRAY
81572: PPUSH
81573: LD_VAR 0 7
81577: PUSH
81578: LD_INT 1
81580: ARRAY
81581: PUSH
81582: LD_INT 2
81584: ARRAY
81585: PPUSH
81586: CALL_OW 116
81590: GO 81881
// if path > tag then
81592: LD_VAR 0 2
81596: PUSH
81597: LD_VAR 0 9
81601: GREATER
81602: IFFALSE 81810
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81604: LD_ADDR_VAR 0 6
81608: PUSH
81609: LD_VAR 0 5
81613: PPUSH
81614: LD_INT 91
81616: PUSH
81617: LD_VAR 0 4
81621: PUSH
81622: LD_INT 8
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: LIST
81629: PPUSH
81630: CALL_OW 72
81634: ST_TO_ADDR
// if nearEnemy then
81635: LD_VAR 0 6
81639: IFFALSE 81708
// begin if GetWeapon ( i ) = ru_time_lapser then
81641: LD_VAR 0 4
81645: PPUSH
81646: CALL_OW 264
81650: PUSH
81651: LD_INT 49
81653: EQUAL
81654: IFFALSE 81682
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81656: LD_VAR 0 4
81660: PPUSH
81661: LD_VAR 0 6
81665: PPUSH
81666: LD_VAR 0 4
81670: PPUSH
81671: CALL_OW 74
81675: PPUSH
81676: CALL_OW 112
81680: GO 81706
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81682: LD_VAR 0 4
81686: PPUSH
81687: LD_VAR 0 6
81691: PPUSH
81692: LD_VAR 0 4
81696: PPUSH
81697: CALL_OW 74
81701: PPUSH
81702: CALL 82810 0 2
// end else
81706: GO 81808
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81708: LD_VAR 0 4
81712: PPUSH
81713: LD_VAR 0 2
81717: PUSH
81718: LD_VAR 0 9
81722: ARRAY
81723: PUSH
81724: LD_INT 1
81726: ARRAY
81727: PPUSH
81728: LD_VAR 0 2
81732: PUSH
81733: LD_VAR 0 9
81737: ARRAY
81738: PUSH
81739: LD_INT 2
81741: ARRAY
81742: PPUSH
81743: CALL_OW 297
81747: PUSH
81748: LD_INT 6
81750: GREATER
81751: IFFALSE 81794
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81753: LD_VAR 0 4
81757: PPUSH
81758: LD_VAR 0 2
81762: PUSH
81763: LD_VAR 0 9
81767: ARRAY
81768: PUSH
81769: LD_INT 1
81771: ARRAY
81772: PPUSH
81773: LD_VAR 0 2
81777: PUSH
81778: LD_VAR 0 9
81782: ARRAY
81783: PUSH
81784: LD_INT 2
81786: ARRAY
81787: PPUSH
81788: CALL_OW 114
81792: GO 81808
// SetTag ( i , tag ) ;
81794: LD_VAR 0 4
81798: PPUSH
81799: LD_VAR 0 9
81803: PPUSH
81804: CALL_OW 109
// end else
81808: GO 81881
// if enemy then
81810: LD_VAR 0 5
81814: IFFALSE 81881
// begin if GetWeapon ( i ) = ru_time_lapser then
81816: LD_VAR 0 4
81820: PPUSH
81821: CALL_OW 264
81825: PUSH
81826: LD_INT 49
81828: EQUAL
81829: IFFALSE 81857
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81831: LD_VAR 0 4
81835: PPUSH
81836: LD_VAR 0 5
81840: PPUSH
81841: LD_VAR 0 4
81845: PPUSH
81846: CALL_OW 74
81850: PPUSH
81851: CALL_OW 112
81855: GO 81881
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81857: LD_VAR 0 4
81861: PPUSH
81862: LD_VAR 0 5
81866: PPUSH
81867: LD_VAR 0 4
81871: PPUSH
81872: CALL_OW 74
81876: PPUSH
81877: CALL 82810 0 2
// end ; end ;
81881: GO 81461
81883: POP
81884: POP
// end ;
81885: LD_VAR 0 3
81889: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81890: LD_INT 0
81892: PPUSH
81893: PPUSH
81894: PPUSH
// if not unit or IsInUnit ( unit ) then
81895: LD_VAR 0 1
81899: NOT
81900: PUSH
81901: LD_VAR 0 1
81905: PPUSH
81906: CALL_OW 310
81910: OR
81911: IFFALSE 81915
// exit ;
81913: GO 82006
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81915: LD_ADDR_VAR 0 4
81919: PUSH
81920: LD_VAR 0 1
81924: PPUSH
81925: CALL_OW 250
81929: PPUSH
81930: LD_VAR 0 2
81934: PPUSH
81935: LD_INT 1
81937: PPUSH
81938: CALL_OW 272
81942: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81943: LD_ADDR_VAR 0 5
81947: PUSH
81948: LD_VAR 0 1
81952: PPUSH
81953: CALL_OW 251
81957: PPUSH
81958: LD_VAR 0 2
81962: PPUSH
81963: LD_INT 1
81965: PPUSH
81966: CALL_OW 273
81970: ST_TO_ADDR
// if ValidHex ( x , y ) then
81971: LD_VAR 0 4
81975: PPUSH
81976: LD_VAR 0 5
81980: PPUSH
81981: CALL_OW 488
81985: IFFALSE 82006
// ComTurnXY ( unit , x , y ) ;
81987: LD_VAR 0 1
81991: PPUSH
81992: LD_VAR 0 4
81996: PPUSH
81997: LD_VAR 0 5
82001: PPUSH
82002: CALL_OW 118
// end ;
82006: LD_VAR 0 3
82010: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82011: LD_INT 0
82013: PPUSH
82014: PPUSH
// result := false ;
82015: LD_ADDR_VAR 0 3
82019: PUSH
82020: LD_INT 0
82022: ST_TO_ADDR
// if not units then
82023: LD_VAR 0 2
82027: NOT
82028: IFFALSE 82032
// exit ;
82030: GO 82077
// for i in units do
82032: LD_ADDR_VAR 0 4
82036: PUSH
82037: LD_VAR 0 2
82041: PUSH
82042: FOR_IN
82043: IFFALSE 82075
// if See ( side , i ) then
82045: LD_VAR 0 1
82049: PPUSH
82050: LD_VAR 0 4
82054: PPUSH
82055: CALL_OW 292
82059: IFFALSE 82073
// begin result := true ;
82061: LD_ADDR_VAR 0 3
82065: PUSH
82066: LD_INT 1
82068: ST_TO_ADDR
// exit ;
82069: POP
82070: POP
82071: GO 82077
// end ;
82073: GO 82042
82075: POP
82076: POP
// end ;
82077: LD_VAR 0 3
82081: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82082: LD_INT 0
82084: PPUSH
82085: PPUSH
82086: PPUSH
82087: PPUSH
// if not unit or not points then
82088: LD_VAR 0 1
82092: NOT
82093: PUSH
82094: LD_VAR 0 2
82098: NOT
82099: OR
82100: IFFALSE 82104
// exit ;
82102: GO 82194
// dist := 99999 ;
82104: LD_ADDR_VAR 0 5
82108: PUSH
82109: LD_INT 99999
82111: ST_TO_ADDR
// for i in points do
82112: LD_ADDR_VAR 0 4
82116: PUSH
82117: LD_VAR 0 2
82121: PUSH
82122: FOR_IN
82123: IFFALSE 82192
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82125: LD_ADDR_VAR 0 6
82129: PUSH
82130: LD_VAR 0 1
82134: PPUSH
82135: LD_VAR 0 4
82139: PUSH
82140: LD_INT 1
82142: ARRAY
82143: PPUSH
82144: LD_VAR 0 4
82148: PUSH
82149: LD_INT 2
82151: ARRAY
82152: PPUSH
82153: CALL_OW 297
82157: ST_TO_ADDR
// if tmpDist < dist then
82158: LD_VAR 0 6
82162: PUSH
82163: LD_VAR 0 5
82167: LESS
82168: IFFALSE 82190
// begin result := i ;
82170: LD_ADDR_VAR 0 3
82174: PUSH
82175: LD_VAR 0 4
82179: ST_TO_ADDR
// dist := tmpDist ;
82180: LD_ADDR_VAR 0 5
82184: PUSH
82185: LD_VAR 0 6
82189: ST_TO_ADDR
// end ; end ;
82190: GO 82122
82192: POP
82193: POP
// end ;
82194: LD_VAR 0 3
82198: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82199: LD_INT 0
82201: PPUSH
// uc_side := side ;
82202: LD_ADDR_OWVAR 20
82206: PUSH
82207: LD_VAR 0 1
82211: ST_TO_ADDR
// uc_nation := 3 ;
82212: LD_ADDR_OWVAR 21
82216: PUSH
82217: LD_INT 3
82219: ST_TO_ADDR
// vc_chassis := 25 ;
82220: LD_ADDR_OWVAR 37
82224: PUSH
82225: LD_INT 25
82227: ST_TO_ADDR
// vc_engine := engine_siberite ;
82228: LD_ADDR_OWVAR 39
82232: PUSH
82233: LD_INT 3
82235: ST_TO_ADDR
// vc_control := control_computer ;
82236: LD_ADDR_OWVAR 38
82240: PUSH
82241: LD_INT 3
82243: ST_TO_ADDR
// vc_weapon := 59 ;
82244: LD_ADDR_OWVAR 40
82248: PUSH
82249: LD_INT 59
82251: ST_TO_ADDR
// result := CreateVehicle ;
82252: LD_ADDR_VAR 0 5
82256: PUSH
82257: CALL_OW 45
82261: ST_TO_ADDR
// SetDir ( result , d ) ;
82262: LD_VAR 0 5
82266: PPUSH
82267: LD_VAR 0 4
82271: PPUSH
82272: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82276: LD_VAR 0 5
82280: PPUSH
82281: LD_VAR 0 2
82285: PPUSH
82286: LD_VAR 0 3
82290: PPUSH
82291: LD_INT 0
82293: PPUSH
82294: CALL_OW 48
// end ;
82298: LD_VAR 0 5
82302: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82303: LD_INT 0
82305: PPUSH
82306: PPUSH
82307: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82308: LD_ADDR_VAR 0 2
82312: PUSH
82313: LD_INT 0
82315: PUSH
82316: LD_INT 0
82318: PUSH
82319: LD_INT 0
82321: PUSH
82322: LD_INT 0
82324: PUSH
82325: EMPTY
82326: LIST
82327: LIST
82328: LIST
82329: LIST
82330: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82331: LD_VAR 0 1
82335: NOT
82336: PUSH
82337: LD_VAR 0 1
82341: PPUSH
82342: CALL_OW 264
82346: PUSH
82347: LD_INT 12
82349: PUSH
82350: LD_INT 51
82352: PUSH
82353: LD_INT 32
82355: PUSH
82356: LD_INT 89
82358: PUSH
82359: EMPTY
82360: LIST
82361: LIST
82362: LIST
82363: LIST
82364: IN
82365: NOT
82366: OR
82367: IFFALSE 82371
// exit ;
82369: GO 82469
// for i := 1 to 3 do
82371: LD_ADDR_VAR 0 3
82375: PUSH
82376: DOUBLE
82377: LD_INT 1
82379: DEC
82380: ST_TO_ADDR
82381: LD_INT 3
82383: PUSH
82384: FOR_TO
82385: IFFALSE 82467
// begin tmp := GetCargo ( cargo , i ) ;
82387: LD_ADDR_VAR 0 4
82391: PUSH
82392: LD_VAR 0 1
82396: PPUSH
82397: LD_VAR 0 3
82401: PPUSH
82402: CALL_OW 289
82406: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82407: LD_ADDR_VAR 0 2
82411: PUSH
82412: LD_VAR 0 2
82416: PPUSH
82417: LD_VAR 0 3
82421: PPUSH
82422: LD_VAR 0 4
82426: PPUSH
82427: CALL_OW 1
82431: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82432: LD_ADDR_VAR 0 2
82436: PUSH
82437: LD_VAR 0 2
82441: PPUSH
82442: LD_INT 4
82444: PPUSH
82445: LD_VAR 0 2
82449: PUSH
82450: LD_INT 4
82452: ARRAY
82453: PUSH
82454: LD_VAR 0 4
82458: PLUS
82459: PPUSH
82460: CALL_OW 1
82464: ST_TO_ADDR
// end ;
82465: GO 82384
82467: POP
82468: POP
// end ;
82469: LD_VAR 0 2
82473: RET
// export function Length ( array ) ; begin
82474: LD_INT 0
82476: PPUSH
// result := array + 0 ;
82477: LD_ADDR_VAR 0 2
82481: PUSH
82482: LD_VAR 0 1
82486: PUSH
82487: LD_INT 0
82489: PLUS
82490: ST_TO_ADDR
// end ;
82491: LD_VAR 0 2
82495: RET
// export function PrepareArray ( array ) ; begin
82496: LD_INT 0
82498: PPUSH
// result := array diff 0 ;
82499: LD_ADDR_VAR 0 2
82503: PUSH
82504: LD_VAR 0 1
82508: PUSH
82509: LD_INT 0
82511: DIFF
82512: ST_TO_ADDR
// if not result [ 1 ] then
82513: LD_VAR 0 2
82517: PUSH
82518: LD_INT 1
82520: ARRAY
82521: NOT
82522: IFFALSE 82542
// result := Delete ( result , 1 ) ;
82524: LD_ADDR_VAR 0 2
82528: PUSH
82529: LD_VAR 0 2
82533: PPUSH
82534: LD_INT 1
82536: PPUSH
82537: CALL_OW 3
82541: ST_TO_ADDR
// end ;
82542: LD_VAR 0 2
82546: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82547: LD_INT 0
82549: PPUSH
82550: PPUSH
82551: PPUSH
82552: PPUSH
// sibRocketRange := 25 ;
82553: LD_ADDR_VAR 0 6
82557: PUSH
82558: LD_INT 25
82560: ST_TO_ADDR
// result := false ;
82561: LD_ADDR_VAR 0 4
82565: PUSH
82566: LD_INT 0
82568: ST_TO_ADDR
// for i := 0 to 5 do
82569: LD_ADDR_VAR 0 5
82573: PUSH
82574: DOUBLE
82575: LD_INT 0
82577: DEC
82578: ST_TO_ADDR
82579: LD_INT 5
82581: PUSH
82582: FOR_TO
82583: IFFALSE 82650
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82585: LD_VAR 0 1
82589: PPUSH
82590: LD_VAR 0 5
82594: PPUSH
82595: LD_VAR 0 6
82599: PPUSH
82600: CALL_OW 272
82604: PPUSH
82605: LD_VAR 0 2
82609: PPUSH
82610: LD_VAR 0 5
82614: PPUSH
82615: LD_VAR 0 6
82619: PPUSH
82620: CALL_OW 273
82624: PPUSH
82625: LD_VAR 0 3
82629: PPUSH
82630: CALL_OW 309
82634: IFFALSE 82648
// begin result := true ;
82636: LD_ADDR_VAR 0 4
82640: PUSH
82641: LD_INT 1
82643: ST_TO_ADDR
// exit ;
82644: POP
82645: POP
82646: GO 82652
// end ;
82648: GO 82582
82650: POP
82651: POP
// end ;
82652: LD_VAR 0 4
82656: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82657: LD_INT 0
82659: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82660: LD_VAR 0 1
82664: PPUSH
82665: LD_VAR 0 2
82669: PPUSH
82670: LD_INT 0
82672: PPUSH
82673: LD_INT 0
82675: PPUSH
82676: LD_INT 1
82678: PPUSH
82679: LD_INT 0
82681: PPUSH
82682: CALL_OW 587
// end ;
82686: LD_VAR 0 3
82690: RET
// export function CenterOnNow ( unit ) ; begin
82691: LD_INT 0
82693: PPUSH
// result := IsInUnit ( unit ) ;
82694: LD_ADDR_VAR 0 2
82698: PUSH
82699: LD_VAR 0 1
82703: PPUSH
82704: CALL_OW 310
82708: ST_TO_ADDR
// if not result then
82709: LD_VAR 0 2
82713: NOT
82714: IFFALSE 82726
// result := unit ;
82716: LD_ADDR_VAR 0 2
82720: PUSH
82721: LD_VAR 0 1
82725: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82726: LD_VAR 0 1
82730: PPUSH
82731: CALL_OW 87
// end ;
82735: LD_VAR 0 2
82739: RET
// export function ComMoveHex ( unit , hex ) ; begin
82740: LD_INT 0
82742: PPUSH
// if not hex then
82743: LD_VAR 0 2
82747: NOT
82748: IFFALSE 82752
// exit ;
82750: GO 82805
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82752: LD_VAR 0 2
82756: PUSH
82757: LD_INT 1
82759: ARRAY
82760: PPUSH
82761: LD_VAR 0 2
82765: PUSH
82766: LD_INT 2
82768: ARRAY
82769: PPUSH
82770: CALL_OW 428
82774: IFFALSE 82778
// exit ;
82776: GO 82805
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82778: LD_VAR 0 1
82782: PPUSH
82783: LD_VAR 0 2
82787: PUSH
82788: LD_INT 1
82790: ARRAY
82791: PPUSH
82792: LD_VAR 0 2
82796: PUSH
82797: LD_INT 2
82799: ARRAY
82800: PPUSH
82801: CALL_OW 111
// end ;
82805: LD_VAR 0 3
82809: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82810: LD_INT 0
82812: PPUSH
82813: PPUSH
82814: PPUSH
// if not unit or not enemy then
82815: LD_VAR 0 1
82819: NOT
82820: PUSH
82821: LD_VAR 0 2
82825: NOT
82826: OR
82827: IFFALSE 82831
// exit ;
82829: GO 82955
// x := GetX ( enemy ) ;
82831: LD_ADDR_VAR 0 4
82835: PUSH
82836: LD_VAR 0 2
82840: PPUSH
82841: CALL_OW 250
82845: ST_TO_ADDR
// y := GetY ( enemy ) ;
82846: LD_ADDR_VAR 0 5
82850: PUSH
82851: LD_VAR 0 2
82855: PPUSH
82856: CALL_OW 251
82860: ST_TO_ADDR
// if ValidHex ( x , y ) then
82861: LD_VAR 0 4
82865: PPUSH
82866: LD_VAR 0 5
82870: PPUSH
82871: CALL_OW 488
82875: IFFALSE 82955
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
82877: LD_VAR 0 2
82881: PPUSH
82882: CALL_OW 247
82886: PUSH
82887: LD_INT 3
82889: PUSH
82890: LD_INT 2
82892: PUSH
82893: EMPTY
82894: LIST
82895: LIST
82896: IN
82897: PUSH
82898: LD_VAR 0 1
82902: PPUSH
82903: CALL_OW 255
82907: PPUSH
82908: LD_VAR 0 2
82912: PPUSH
82913: CALL_OW 292
82917: AND
82918: IFFALSE 82936
// ComAttackUnit ( unit , enemy ) else
82920: LD_VAR 0 1
82924: PPUSH
82925: LD_VAR 0 2
82929: PPUSH
82930: CALL_OW 115
82934: GO 82955
// ComAgressiveMove ( unit , x , y ) ;
82936: LD_VAR 0 1
82940: PPUSH
82941: LD_VAR 0 4
82945: PPUSH
82946: LD_VAR 0 5
82950: PPUSH
82951: CALL_OW 114
// end ;
82955: LD_VAR 0 3
82959: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82960: LD_INT 0
82962: PPUSH
82963: PPUSH
82964: PPUSH
// list := AreaToList ( area , 0 ) ;
82965: LD_ADDR_VAR 0 5
82969: PUSH
82970: LD_VAR 0 1
82974: PPUSH
82975: LD_INT 0
82977: PPUSH
82978: CALL_OW 517
82982: ST_TO_ADDR
// if not list then
82983: LD_VAR 0 5
82987: NOT
82988: IFFALSE 82992
// exit ;
82990: GO 83122
// if all then
82992: LD_VAR 0 2
82996: IFFALSE 83084
// begin for i := 1 to list [ 1 ] do
82998: LD_ADDR_VAR 0 4
83002: PUSH
83003: DOUBLE
83004: LD_INT 1
83006: DEC
83007: ST_TO_ADDR
83008: LD_VAR 0 5
83012: PUSH
83013: LD_INT 1
83015: ARRAY
83016: PUSH
83017: FOR_TO
83018: IFFALSE 83080
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83020: LD_ADDR_VAR 0 3
83024: PUSH
83025: LD_VAR 0 3
83029: PPUSH
83030: LD_VAR 0 3
83034: PUSH
83035: LD_INT 1
83037: PLUS
83038: PPUSH
83039: LD_VAR 0 5
83043: PUSH
83044: LD_INT 1
83046: ARRAY
83047: PUSH
83048: LD_VAR 0 4
83052: ARRAY
83053: PUSH
83054: LD_VAR 0 5
83058: PUSH
83059: LD_INT 2
83061: ARRAY
83062: PUSH
83063: LD_VAR 0 4
83067: ARRAY
83068: PUSH
83069: EMPTY
83070: LIST
83071: LIST
83072: PPUSH
83073: CALL_OW 1
83077: ST_TO_ADDR
83078: GO 83017
83080: POP
83081: POP
// exit ;
83082: GO 83122
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83084: LD_ADDR_VAR 0 3
83088: PUSH
83089: LD_VAR 0 5
83093: PUSH
83094: LD_INT 1
83096: ARRAY
83097: PUSH
83098: LD_INT 1
83100: ARRAY
83101: PUSH
83102: LD_VAR 0 5
83106: PUSH
83107: LD_INT 2
83109: ARRAY
83110: PUSH
83111: LD_INT 1
83113: ARRAY
83114: PUSH
83115: EMPTY
83116: LIST
83117: LIST
83118: PUSH
83119: EMPTY
83120: LIST
83121: ST_TO_ADDR
// end ;
83122: LD_VAR 0 3
83126: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83127: LD_INT 0
83129: PPUSH
83130: PPUSH
// list := AreaToList ( area , 0 ) ;
83131: LD_ADDR_VAR 0 4
83135: PUSH
83136: LD_VAR 0 1
83140: PPUSH
83141: LD_INT 0
83143: PPUSH
83144: CALL_OW 517
83148: ST_TO_ADDR
// if not list then
83149: LD_VAR 0 4
83153: NOT
83154: IFFALSE 83158
// exit ;
83156: GO 83199
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83158: LD_ADDR_VAR 0 3
83162: PUSH
83163: LD_VAR 0 4
83167: PUSH
83168: LD_INT 1
83170: ARRAY
83171: PUSH
83172: LD_INT 1
83174: ARRAY
83175: PUSH
83176: LD_VAR 0 4
83180: PUSH
83181: LD_INT 2
83183: ARRAY
83184: PUSH
83185: LD_INT 1
83187: ARRAY
83188: PUSH
83189: LD_VAR 0 2
83193: PUSH
83194: EMPTY
83195: LIST
83196: LIST
83197: LIST
83198: ST_TO_ADDR
// end ;
83199: LD_VAR 0 3
83203: RET
// export function First ( array ) ; begin
83204: LD_INT 0
83206: PPUSH
// if not array then
83207: LD_VAR 0 1
83211: NOT
83212: IFFALSE 83216
// exit ;
83214: GO 83230
// result := array [ 1 ] ;
83216: LD_ADDR_VAR 0 2
83220: PUSH
83221: LD_VAR 0 1
83225: PUSH
83226: LD_INT 1
83228: ARRAY
83229: ST_TO_ADDR
// end ;
83230: LD_VAR 0 2
83234: RET
// export function Last ( array ) ; begin
83235: LD_INT 0
83237: PPUSH
// if not array then
83238: LD_VAR 0 1
83242: NOT
83243: IFFALSE 83247
// exit ;
83245: GO 83263
// result := array [ array ] ;
83247: LD_ADDR_VAR 0 2
83251: PUSH
83252: LD_VAR 0 1
83256: PUSH
83257: LD_VAR 0 1
83261: ARRAY
83262: ST_TO_ADDR
// end ;
83263: LD_VAR 0 2
83267: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83268: LD_INT 0
83270: PPUSH
83271: PPUSH
// result := [ ] ;
83272: LD_ADDR_VAR 0 5
83276: PUSH
83277: EMPTY
83278: ST_TO_ADDR
// if not array then
83279: LD_VAR 0 1
83283: NOT
83284: IFFALSE 83288
// exit ;
83286: GO 83400
// for i := 1 to array do
83288: LD_ADDR_VAR 0 6
83292: PUSH
83293: DOUBLE
83294: LD_INT 1
83296: DEC
83297: ST_TO_ADDR
83298: LD_VAR 0 1
83302: PUSH
83303: FOR_TO
83304: IFFALSE 83398
// if array [ i ] [ index ] = value then
83306: LD_VAR 0 1
83310: PUSH
83311: LD_VAR 0 6
83315: ARRAY
83316: PUSH
83317: LD_VAR 0 2
83321: ARRAY
83322: PUSH
83323: LD_VAR 0 3
83327: EQUAL
83328: IFFALSE 83396
// begin if indexColumn then
83330: LD_VAR 0 4
83334: IFFALSE 83370
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83336: LD_ADDR_VAR 0 5
83340: PUSH
83341: LD_VAR 0 5
83345: PPUSH
83346: LD_VAR 0 1
83350: PUSH
83351: LD_VAR 0 6
83355: ARRAY
83356: PUSH
83357: LD_VAR 0 4
83361: ARRAY
83362: PPUSH
83363: CALL 78738 0 2
83367: ST_TO_ADDR
83368: GO 83396
// result := Join ( result , array [ i ] ) ;
83370: LD_ADDR_VAR 0 5
83374: PUSH
83375: LD_VAR 0 5
83379: PPUSH
83380: LD_VAR 0 1
83384: PUSH
83385: LD_VAR 0 6
83389: ARRAY
83390: PPUSH
83391: CALL 78738 0 2
83395: ST_TO_ADDR
// end ;
83396: GO 83303
83398: POP
83399: POP
// end ;
83400: LD_VAR 0 5
83404: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83405: LD_INT 0
83407: PPUSH
83408: PPUSH
83409: PPUSH
// if btype = b_depot then
83410: LD_VAR 0 2
83414: PUSH
83415: LD_INT 0
83417: EQUAL
83418: IFFALSE 83430
// begin result := true ;
83420: LD_ADDR_VAR 0 3
83424: PUSH
83425: LD_INT 1
83427: ST_TO_ADDR
// exit ;
83428: GO 83546
// end ; pom := GetBase ( depot ) ;
83430: LD_ADDR_VAR 0 4
83434: PUSH
83435: LD_VAR 0 1
83439: PPUSH
83440: CALL_OW 274
83444: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83445: LD_ADDR_VAR 0 5
83449: PUSH
83450: LD_VAR 0 2
83454: PPUSH
83455: LD_VAR 0 1
83459: PPUSH
83460: CALL_OW 248
83464: PPUSH
83465: CALL_OW 450
83469: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83470: LD_ADDR_VAR 0 3
83474: PUSH
83475: LD_VAR 0 4
83479: PPUSH
83480: LD_INT 1
83482: PPUSH
83483: CALL_OW 275
83487: PUSH
83488: LD_VAR 0 5
83492: PUSH
83493: LD_INT 1
83495: ARRAY
83496: GREATEREQUAL
83497: PUSH
83498: LD_VAR 0 4
83502: PPUSH
83503: LD_INT 2
83505: PPUSH
83506: CALL_OW 275
83510: PUSH
83511: LD_VAR 0 5
83515: PUSH
83516: LD_INT 2
83518: ARRAY
83519: GREATEREQUAL
83520: AND
83521: PUSH
83522: LD_VAR 0 4
83526: PPUSH
83527: LD_INT 3
83529: PPUSH
83530: CALL_OW 275
83534: PUSH
83535: LD_VAR 0 5
83539: PUSH
83540: LD_INT 3
83542: ARRAY
83543: GREATEREQUAL
83544: AND
83545: ST_TO_ADDR
// end ;
83546: LD_VAR 0 3
83550: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83551: LD_INT 0
83553: PPUSH
// if not vehicles or not parkingPoint then
83554: LD_VAR 0 1
83558: NOT
83559: PUSH
83560: LD_VAR 0 2
83564: NOT
83565: OR
83566: IFFALSE 83570
// exit ;
83568: GO 83668
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83570: LD_ADDR_VAR 0 1
83574: PUSH
83575: LD_VAR 0 1
83579: PPUSH
83580: LD_INT 50
83582: PUSH
83583: EMPTY
83584: LIST
83585: PUSH
83586: LD_INT 3
83588: PUSH
83589: LD_INT 92
83591: PUSH
83592: LD_VAR 0 2
83596: PUSH
83597: LD_INT 1
83599: ARRAY
83600: PUSH
83601: LD_VAR 0 2
83605: PUSH
83606: LD_INT 2
83608: ARRAY
83609: PUSH
83610: LD_INT 8
83612: PUSH
83613: EMPTY
83614: LIST
83615: LIST
83616: LIST
83617: LIST
83618: PUSH
83619: EMPTY
83620: LIST
83621: LIST
83622: PUSH
83623: EMPTY
83624: LIST
83625: LIST
83626: PPUSH
83627: CALL_OW 72
83631: ST_TO_ADDR
// if not vehicles then
83632: LD_VAR 0 1
83636: NOT
83637: IFFALSE 83641
// exit ;
83639: GO 83668
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83641: LD_VAR 0 1
83645: PPUSH
83646: LD_VAR 0 2
83650: PUSH
83651: LD_INT 1
83653: ARRAY
83654: PPUSH
83655: LD_VAR 0 2
83659: PUSH
83660: LD_INT 2
83662: ARRAY
83663: PPUSH
83664: CALL_OW 111
// end ; end_of_file
83668: LD_VAR 0 3
83672: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83673: LD_VAR 0 1
83677: PUSH
83678: LD_INT 200
83680: DOUBLE
83681: GREATEREQUAL
83682: IFFALSE 83690
83684: LD_INT 299
83686: DOUBLE
83687: LESSEQUAL
83688: IFTRUE 83692
83690: GO 83724
83692: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83693: LD_VAR 0 1
83697: PPUSH
83698: LD_VAR 0 2
83702: PPUSH
83703: LD_VAR 0 3
83707: PPUSH
83708: LD_VAR 0 4
83712: PPUSH
83713: LD_VAR 0 5
83717: PPUSH
83718: CALL 36529 0 5
83722: GO 83801
83724: LD_INT 300
83726: DOUBLE
83727: GREATEREQUAL
83728: IFFALSE 83736
83730: LD_INT 399
83732: DOUBLE
83733: LESSEQUAL
83734: IFTRUE 83738
83736: GO 83800
83738: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83739: LD_VAR 0 1
83743: PPUSH
83744: LD_VAR 0 2
83748: PPUSH
83749: LD_VAR 0 3
83753: PPUSH
83754: LD_VAR 0 4
83758: PPUSH
83759: LD_VAR 0 5
83763: PPUSH
83764: LD_VAR 0 6
83768: PPUSH
83769: LD_VAR 0 7
83773: PPUSH
83774: LD_VAR 0 8
83778: PPUSH
83779: LD_VAR 0 9
83783: PPUSH
83784: LD_VAR 0 10
83788: PPUSH
83789: LD_VAR 0 11
83793: PPUSH
83794: CALL 32854 0 11
83798: GO 83801
83800: POP
// end ;
83801: PPOPN 11
83803: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83804: LD_VAR 0 1
83808: PPUSH
83809: LD_VAR 0 2
83813: PPUSH
83814: LD_VAR 0 3
83818: PPUSH
83819: LD_VAR 0 4
83823: PPUSH
83824: LD_VAR 0 5
83828: PPUSH
83829: CALL 36265 0 5
// end ; end_of_file
83833: PPOPN 5
83835: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83836: LD_VAR 0 1
83840: PPUSH
83841: LD_VAR 0 2
83845: PPUSH
83846: LD_VAR 0 3
83850: PPUSH
83851: LD_VAR 0 4
83855: PPUSH
83856: LD_VAR 0 5
83860: PPUSH
83861: LD_VAR 0 6
83865: PPUSH
83866: CALL 20506 0 6
// end ;
83870: PPOPN 6
83872: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83873: LD_INT 0
83875: PPUSH
// begin if not units then
83876: LD_VAR 0 1
83880: NOT
83881: IFFALSE 83885
// exit ;
83883: GO 83885
// end ;
83885: PPOPN 7
83887: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83888: CALL 20410 0 0
// end ;
83892: PPOPN 1
83894: END
