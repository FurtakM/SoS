// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 217 0 0
// PrepareRussian ;
  23: CALL 8297 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 70861 0 9
// Action ;
  79: CALL 13808 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 9
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 5
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 6
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 7
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 8
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// end ;
 167: LD_VAR 0 1
 171: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 172: LD_INT 22
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 34
 184: PUSH
 185: LD_INT 6
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 69
 200: PUSH
 201: LD_INT 6
 203: GREATEREQUAL
 204: IFFALSE 216
 206: GO 208
 208: DISABLE
// SetAchievement ( ACH_ARMOR ) ; end_of_file
 209: LD_STRING ACH_ARMOR
 211: PPUSH
 212: CALL_OW 543
 216: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 217: LD_INT 0
 219: PPUSH
 220: PPUSH
 221: PPUSH
 222: PPUSH
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 1 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// uc_nation := 1 ;
 243: LD_ADDR_OWVAR 21
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// PrepareGammaBase ;
 251: CALL 2412 0 0
// x := 52 ;
 255: LD_ADDR_VAR 0 13
 259: PUSH
 260: LD_INT 52
 262: ST_TO_ADDR
// y := 16 ;
 263: LD_ADDR_VAR 0 14
 267: PUSH
 268: LD_INT 16
 270: ST_TO_ADDR
// case gammaCommander of 1 :
 271: LD_EXP 9
 275: PUSH
 276: LD_INT 1
 278: DOUBLE
 279: EQUAL
 280: IFTRUE 284
 282: GO 369
 284: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 285: LD_ADDR_EXP 12
 289: PUSH
 290: LD_STRING Donaldson
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_STRING 04_
 298: PPUSH
 299: CALL 37498 0 3
 303: ST_TO_ADDR
// if HexInfo ( x , y ) then
 304: LD_VAR 0 13
 308: PPUSH
 309: LD_VAR 0 14
 313: PPUSH
 314: CALL_OW 428
 318: IFFALSE 336
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 320: LD_EXP 12
 324: PPUSH
 325: LD_EXP 26
 329: PPUSH
 330: CALL_OW 52
 334: GO 358
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 336: LD_EXP 12
 340: PPUSH
 341: LD_VAR 0 13
 345: PPUSH
 346: LD_VAR 0 14
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 48
// ComHold ( Donaldson ) ;
 358: LD_EXP 12
 362: PPUSH
 363: CALL_OW 140
// end ; 2 :
 367: GO 556
 369: LD_INT 2
 371: DOUBLE
 372: EQUAL
 373: IFTRUE 377
 375: GO 462
 377: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 378: LD_ADDR_EXP 11
 382: PUSH
 383: LD_STRING Brown
 385: PPUSH
 386: LD_INT 1
 388: PPUSH
 389: LD_STRING 04_
 391: PPUSH
 392: CALL 37498 0 3
 396: ST_TO_ADDR
// if HexInfo ( x , y ) then
 397: LD_VAR 0 13
 401: PPUSH
 402: LD_VAR 0 14
 406: PPUSH
 407: CALL_OW 428
 411: IFFALSE 429
// PlaceHumanInUnit ( Brown , amDepot ) else
 413: LD_EXP 11
 417: PPUSH
 418: LD_EXP 26
 422: PPUSH
 423: CALL_OW 52
 427: GO 451
// PlaceUnitXY ( Brown , x , y , false ) ;
 429: LD_EXP 11
 433: PPUSH
 434: LD_VAR 0 13
 438: PPUSH
 439: LD_VAR 0 14
 443: PPUSH
 444: LD_INT 0
 446: PPUSH
 447: CALL_OW 48
// ComHold ( Brown ) ;
 451: LD_EXP 11
 455: PPUSH
 456: CALL_OW 140
// end ; 3 :
 460: GO 556
 462: LD_INT 3
 464: DOUBLE
 465: EQUAL
 466: IFTRUE 470
 468: GO 555
 470: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 471: LD_ADDR_EXP 20
 475: PUSH
 476: LD_STRING VanHouten
 478: PPUSH
 479: LD_INT 0
 481: PPUSH
 482: LD_STRING 
 484: PPUSH
 485: CALL 37498 0 3
 489: ST_TO_ADDR
// if HexInfo ( x , y ) then
 490: LD_VAR 0 13
 494: PPUSH
 495: LD_VAR 0 14
 499: PPUSH
 500: CALL_OW 428
 504: IFFALSE 522
// PlaceHumanInUnit ( Houten , amDepot ) else
 506: LD_EXP 20
 510: PPUSH
 511: LD_EXP 26
 515: PPUSH
 516: CALL_OW 52
 520: GO 544
// PlaceUnitXY ( Houten , x , y , false ) ;
 522: LD_EXP 20
 526: PPUSH
 527: LD_VAR 0 13
 531: PPUSH
 532: LD_VAR 0 14
 536: PPUSH
 537: LD_INT 0
 539: PPUSH
 540: CALL_OW 48
// ComHold ( Houten ) ;
 544: LD_EXP 20
 548: PPUSH
 549: CALL_OW 140
// end ; end ;
 553: GO 556
 555: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 556: LD_ADDR_EXP 24
 560: PUSH
 561: LD_STRING Harisson
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: LD_STRING 
 569: PPUSH
 570: CALL 37498 0 3
 574: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 575: LD_ADDR_EXP 25
 579: PUSH
 580: LD_STRING Powell
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: LD_STRING 
 588: PPUSH
 589: CALL 37498 0 3
 593: ST_TO_ADDR
// tmp := [ ] ;
 594: LD_ADDR_VAR 0 4
 598: PUSH
 599: EMPTY
 600: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 601: LD_STRING 04_Lisa
 603: PUSH
 604: EMPTY
 605: LIST
 606: PPUSH
 607: CALL_OW 28
 611: PUSH
 612: LD_STRING LisaInDelta
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 30
 622: NOT
 623: AND
 624: PUSH
 625: LD_STRING 07_Lisa
 627: PUSH
 628: EMPTY
 629: LIST
 630: PPUSH
 631: CALL_OW 28
 635: NOT
 636: AND
 637: IFFALSE 680
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 639: LD_ADDR_EXP 15
 643: PUSH
 644: LD_STRING Lisa
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: LD_STRING 04_
 652: PPUSH
 653: CALL 37498 0 3
 657: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 658: LD_ADDR_VAR 0 5
 662: PUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: LD_EXP 15
 672: PPUSH
 673: CALL 74179 0 2
 677: ST_TO_ADDR
// end else
 678: GO 739
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 680: LD_EXP 15
 684: NOT
 685: PUSH
 686: LD_STRING LisaIn07
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 30
 696: NOT
 697: AND
 698: IFFALSE 739
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 700: LD_ADDR_EXP 15
 704: PUSH
 705: LD_STRING Lisa
 707: PPUSH
 708: LD_INT 1
 710: PPUSH
 711: LD_STRING 07_
 713: PPUSH
 714: CALL 37498 0 3
 718: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 719: LD_ADDR_VAR 0 5
 723: PUSH
 724: LD_VAR 0 5
 728: PPUSH
 729: LD_EXP 15
 733: PPUSH
 734: CALL 74179 0 2
 738: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 739: LD_STRING 04_Bobby
 741: PUSH
 742: EMPTY
 743: LIST
 744: PPUSH
 745: CALL_OW 28
 749: PUSH
 750: LD_STRING BobbyInDelta
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: CALL_OW 30
 760: NOT
 761: AND
 762: PUSH
 763: LD_STRING 07_Bobby
 765: PUSH
 766: EMPTY
 767: LIST
 768: PPUSH
 769: CALL_OW 28
 773: NOT
 774: AND
 775: IFFALSE 818
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING Bobby
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: LD_STRING 04_
 790: PPUSH
 791: CALL 37498 0 3
 795: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 796: LD_ADDR_VAR 0 5
 800: PUSH
 801: LD_VAR 0 5
 805: PPUSH
 806: LD_EXP 13
 810: PPUSH
 811: CALL 74179 0 2
 815: ST_TO_ADDR
// end else
 816: GO 877
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 818: LD_EXP 13
 822: NOT
 823: PUSH
 824: LD_STRING BobbyIn07
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 30
 834: NOT
 835: AND
 836: IFFALSE 877
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 838: LD_ADDR_EXP 13
 842: PUSH
 843: LD_STRING Bobby
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_STRING 07_
 851: PPUSH
 852: CALL 37498 0 3
 856: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 5
 866: PPUSH
 867: LD_EXP 13
 871: PPUSH
 872: CALL 74179 0 2
 876: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 877: LD_STRING 04_Cyrus
 879: PUSH
 880: EMPTY
 881: LIST
 882: PPUSH
 883: CALL_OW 28
 887: PUSH
 888: LD_STRING CyrusInDelta
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 30
 898: NOT
 899: AND
 900: PUSH
 901: LD_STRING 07_Cyrus
 903: PUSH
 904: EMPTY
 905: LIST
 906: PPUSH
 907: CALL_OW 28
 911: NOT
 912: AND
 913: IFFALSE 956
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 915: LD_ADDR_EXP 14
 919: PUSH
 920: LD_STRING Cyrus
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: LD_STRING 04_
 928: PPUSH
 929: CALL 37498 0 3
 933: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 934: LD_ADDR_VAR 0 5
 938: PUSH
 939: LD_VAR 0 5
 943: PPUSH
 944: LD_EXP 14
 948: PPUSH
 949: CALL 74179 0 2
 953: ST_TO_ADDR
// end else
 954: GO 1015
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
 956: LD_EXP 14
 960: NOT
 961: PUSH
 962: LD_STRING CyrusIn07
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 30
 972: NOT
 973: AND
 974: IFFALSE 1015
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 976: LD_ADDR_EXP 14
 980: PUSH
 981: LD_STRING Cyrus
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_STRING 07_
 989: PPUSH
 990: CALL 37498 0 3
 994: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 995: LD_ADDR_VAR 0 5
 999: PUSH
1000: LD_VAR 0 5
1004: PPUSH
1005: LD_EXP 14
1009: PPUSH
1010: CALL 74179 0 2
1014: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1015: LD_STRING 04_Brown
1017: PUSH
1018: EMPTY
1019: LIST
1020: PPUSH
1021: CALL_OW 28
1025: PUSH
1026: LD_STRING BrownInDelta
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 30
1036: NOT
1037: AND
1038: PUSH
1039: LD_STRING 07_Brown
1041: PUSH
1042: EMPTY
1043: LIST
1044: PPUSH
1045: CALL_OW 28
1049: NOT
1050: AND
1051: PUSH
1052: LD_EXP 9
1056: PUSH
1057: LD_INT 2
1059: NONEQUAL
1060: AND
1061: IFFALSE 1104
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1063: LD_ADDR_EXP 11
1067: PUSH
1068: LD_STRING Brown
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_STRING 04_
1076: PPUSH
1077: CALL 37498 0 3
1081: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: LD_EXP 11
1096: PPUSH
1097: CALL 74179 0 2
1101: ST_TO_ADDR
// end else
1102: GO 1173
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1104: LD_EXP 11
1108: NOT
1109: PUSH
1110: LD_STRING BrownIn07
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: CALL_OW 30
1120: NOT
1121: AND
1122: PUSH
1123: LD_EXP 9
1127: PUSH
1128: LD_INT 2
1130: NONEQUAL
1131: AND
1132: IFFALSE 1173
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1134: LD_ADDR_EXP 11
1138: PUSH
1139: LD_STRING Brown
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_STRING 07_
1147: PPUSH
1148: CALL 37498 0 3
1152: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1153: LD_ADDR_VAR 0 5
1157: PUSH
1158: LD_VAR 0 5
1162: PPUSH
1163: LD_EXP 11
1167: PPUSH
1168: CALL 74179 0 2
1172: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1173: LD_STRING 04_Donaldson
1175: PUSH
1176: EMPTY
1177: LIST
1178: PPUSH
1179: CALL_OW 28
1183: PUSH
1184: LD_STRING DonaldsonInDelta
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 30
1194: NOT
1195: AND
1196: PUSH
1197: LD_STRING 07_Donaldson
1199: PUSH
1200: EMPTY
1201: LIST
1202: PPUSH
1203: CALL_OW 28
1207: NOT
1208: AND
1209: PUSH
1210: LD_EXP 9
1214: PUSH
1215: LD_INT 1
1217: NONEQUAL
1218: AND
1219: IFFALSE 1262
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1221: LD_ADDR_EXP 12
1225: PUSH
1226: LD_STRING Donaldson
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_STRING 04_
1234: PPUSH
1235: CALL 37498 0 3
1239: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1240: LD_ADDR_VAR 0 5
1244: PUSH
1245: LD_VAR 0 5
1249: PPUSH
1250: LD_EXP 12
1254: PPUSH
1255: CALL 74179 0 2
1259: ST_TO_ADDR
// end else
1260: GO 1331
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1262: LD_EXP 12
1266: NOT
1267: PUSH
1268: LD_STRING DonaldsonIn07
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 30
1278: NOT
1279: AND
1280: PUSH
1281: LD_EXP 9
1285: PUSH
1286: LD_INT 1
1288: NONEQUAL
1289: AND
1290: IFFALSE 1331
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1292: LD_ADDR_EXP 12
1296: PUSH
1297: LD_STRING Donaldson
1299: PPUSH
1300: LD_INT 1
1302: PPUSH
1303: LD_STRING 07_
1305: PPUSH
1306: CALL 37498 0 3
1310: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1311: LD_ADDR_VAR 0 5
1315: PUSH
1316: LD_VAR 0 5
1320: PPUSH
1321: LD_EXP 12
1325: PPUSH
1326: CALL 74179 0 2
1330: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1331: LD_STRING KhatamIn07
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 30
1341: NOT
1342: IFFALSE 1383
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1344: LD_ADDR_EXP 19
1348: PUSH
1349: LD_STRING Khatam
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_STRING 07_
1357: PPUSH
1358: CALL 37498 0 3
1362: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 5
1372: PPUSH
1373: LD_EXP 19
1377: PPUSH
1378: CALL 74179 0 2
1382: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1383: LD_ADDR_VAR 0 6
1387: PUSH
1388: LD_STRING 07_othersGamma
1390: PPUSH
1391: CALL_OW 31
1395: ST_TO_ADDR
// tmp := 5 - others ;
1396: LD_ADDR_VAR 0 4
1400: PUSH
1401: LD_INT 5
1403: PUSH
1404: LD_VAR 0 6
1408: MINUS
1409: ST_TO_ADDR
// if tmp then
1410: LD_VAR 0 4
1414: IFFALSE 1471
// for i := tmp downto 1 do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: DOUBLE
1422: LD_VAR 0 4
1426: INC
1427: ST_TO_ADDR
1428: LD_INT 1
1430: PUSH
1431: FOR_DOWNTO
1432: IFFALSE 1469
// begin PrepareHuman ( false , 1 , 5 ) ;
1434: LD_INT 0
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: LD_INT 5
1442: PPUSH
1443: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1447: LD_ADDR_VAR 0 6
1451: PUSH
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL_OW 44
1461: PPUSH
1462: CALL 74179 0 2
1466: ST_TO_ADDR
// end ;
1467: GO 1431
1469: POP
1470: POP
// for i in others do
1471: LD_ADDR_VAR 0 2
1475: PUSH
1476: LD_VAR 0 6
1480: PUSH
1481: FOR_IN
1482: IFFALSE 1498
// SetTag ( i , 106 ) ;
1484: LD_VAR 0 2
1488: PPUSH
1489: LD_INT 106
1491: PPUSH
1492: CALL_OW 109
1496: GO 1481
1498: POP
1499: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1500: LD_ADDR_VAR 0 8
1504: PUSH
1505: LD_INT 22
1507: PUSH
1508: LD_INT 1
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 30
1517: PUSH
1518: LD_INT 31
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PPUSH
1529: CALL_OW 69
1533: ST_TO_ADDR
// for i in bun do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: LD_VAR 0 8
1543: PUSH
1544: FOR_IN
1545: IFFALSE 1677
// begin x := GetX ( i ) ;
1547: LD_ADDR_VAR 0 13
1551: PUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 250
1561: ST_TO_ADDR
// y := GetY ( i ) ;
1562: LD_ADDR_VAR 0 14
1566: PUSH
1567: LD_VAR 0 2
1571: PPUSH
1572: CALL_OW 251
1576: ST_TO_ADDR
// d := GetDir ( i ) ;
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 2
1586: PPUSH
1587: CALL_OW 254
1591: ST_TO_ADDR
// RemoveUnit ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 64
// bc_type := b_bunker ;
1601: LD_ADDR_OWVAR 42
1605: PUSH
1606: LD_INT 32
1608: ST_TO_ADDR
// bc_level := 6 ;
1609: LD_ADDR_OWVAR 43
1613: PUSH
1614: LD_INT 6
1616: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1617: LD_ADDR_VAR 0 16
1621: PUSH
1622: LD_VAR 0 13
1626: PPUSH
1627: LD_VAR 0 14
1631: PPUSH
1632: LD_VAR 0 15
1636: PPUSH
1637: CALL_OW 47
1641: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1642: LD_VAR 0 16
1646: PPUSH
1647: LD_INT 5
1649: PUSH
1650: LD_INT 4
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_VAR 0 2
1661: PUSH
1662: LD_INT 2
1664: MOD
1665: PUSH
1666: LD_INT 1
1668: PLUS
1669: ARRAY
1670: PPUSH
1671: CALL_OW 431
// end ;
1675: GO 1544
1677: POP
1678: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1679: LD_ADDR_VAR 0 7
1683: PUSH
1684: LD_INT 22
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 30
1696: PUSH
1697: LD_INT 5
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PPUSH
1708: CALL_OW 69
1712: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1713: LD_ADDR_VAR 0 9
1717: PUSH
1718: LD_INT 22
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 2
1730: PUSH
1731: LD_INT 30
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 30
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_INT 30
1753: PUSH
1754: LD_INT 8
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PPUSH
1771: CALL_OW 69
1775: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1776: LD_ADDR_VAR 0 10
1780: PUSH
1781: LD_INT 22
1783: PUSH
1784: LD_INT 1
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 30
1793: PUSH
1794: LD_INT 3
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 69
1809: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1810: LD_ADDR_VAR 0 11
1814: PUSH
1815: LD_INT 22
1817: PUSH
1818: LD_INT 1
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 30
1827: PUSH
1828: LD_INT 36
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL_OW 69
1843: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1844: LD_ADDR_VAR 0 8
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 30
1864: PUSH
1865: LD_INT 31
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 32
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// for i in others union tmp2 do
1896: LD_ADDR_VAR 0 2
1900: PUSH
1901: LD_VAR 0 6
1905: PUSH
1906: LD_VAR 0 5
1910: UNION
1911: PUSH
1912: FOR_IN
1913: IFFALSE 2405
// begin placed := false ;
1915: LD_ADDR_VAR 0 12
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1923: LD_VAR 0 2
1927: PPUSH
1928: CALL_OW 257
1932: PUSH
1933: LD_INT 1
1935: EQUAL
1936: IFFALSE 2061
// begin if UnitFilter ( bun , [ f_empty ] ) then
1938: LD_VAR 0 8
1942: PPUSH
1943: LD_INT 58
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 72
1953: IFFALSE 1992
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1955: LD_VAR 0 2
1959: PPUSH
1960: LD_VAR 0 8
1964: PPUSH
1965: LD_INT 58
1967: PUSH
1968: EMPTY
1969: LIST
1970: PPUSH
1971: CALL_OW 72
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: CALL_OW 52
// placed := true ;
1984: LD_ADDR_VAR 0 12
1988: PUSH
1989: LD_INT 1
1991: ST_TO_ADDR
// end ; if arm and not placed then
1992: LD_VAR 0 7
1996: PUSH
1997: LD_VAR 0 12
2001: NOT
2002: AND
2003: IFFALSE 2061
// begin for j in arm do
2005: LD_ADDR_VAR 0 3
2009: PUSH
2010: LD_VAR 0 7
2014: PUSH
2015: FOR_IN
2016: IFFALSE 2059
// if UnitsInside ( j ) < 6 then
2018: LD_VAR 0 3
2022: PPUSH
2023: CALL_OW 313
2027: PUSH
2028: LD_INT 6
2030: LESS
2031: IFFALSE 2057
// begin PlaceHumanInUnit ( i , j ) ;
2033: LD_VAR 0 2
2037: PPUSH
2038: LD_VAR 0 3
2042: PPUSH
2043: CALL_OW 52
// placed := true ;
2047: LD_ADDR_VAR 0 12
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// break ;
2055: GO 2059
// end ;
2057: GO 2015
2059: POP
2060: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2061: LD_VAR 0 2
2065: PPUSH
2066: CALL_OW 257
2070: PUSH
2071: LD_INT 2
2073: EQUAL
2074: IFFALSE 2107
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2076: LD_VAR 0 2
2080: PPUSH
2081: LD_INT 52
2083: PPUSH
2084: LD_INT 20
2086: PPUSH
2087: LD_INT 6
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 50
// placed := true ;
2097: LD_ADDR_VAR 0 12
2101: PUSH
2102: LD_INT 1
2104: ST_TO_ADDR
// continue ;
2105: GO 1912
// end ; if GetClass ( i ) = class_mechanic then
2107: LD_VAR 0 2
2111: PPUSH
2112: CALL_OW 257
2116: PUSH
2117: LD_INT 3
2119: EQUAL
2120: IFFALSE 2224
// begin if fac then
2122: LD_VAR 0 10
2126: IFFALSE 2224
// begin if ct then
2128: LD_VAR 0 11
2132: IFFALSE 2160
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_VAR 0 11
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: CALL_OW 52
// placed := true ;
2152: LD_ADDR_VAR 0 12
2156: PUSH
2157: LD_INT 1
2159: ST_TO_ADDR
// end ; if placed then
2160: LD_VAR 0 12
2164: IFFALSE 2168
// continue ;
2166: GO 1912
// for j in fac do
2168: LD_ADDR_VAR 0 3
2172: PUSH
2173: LD_VAR 0 10
2177: PUSH
2178: FOR_IN
2179: IFFALSE 2222
// if UnitsInside ( j ) < 6 then
2181: LD_VAR 0 3
2185: PPUSH
2186: CALL_OW 313
2190: PUSH
2191: LD_INT 6
2193: LESS
2194: IFFALSE 2220
// begin PlaceHumanInUnit ( i , j ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_VAR 0 3
2205: PPUSH
2206: CALL_OW 52
// placed := true ;
2210: LD_ADDR_VAR 0 12
2214: PUSH
2215: LD_INT 1
2217: ST_TO_ADDR
// break ;
2218: GO 2222
// end ;
2220: GO 2178
2222: POP
2223: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2224: LD_VAR 0 2
2228: PPUSH
2229: CALL_OW 257
2233: PUSH
2234: LD_INT 4
2236: EQUAL
2237: IFFALSE 2332
// begin if lab then
2239: LD_VAR 0 9
2243: IFFALSE 2301
// begin for j in lab do
2245: LD_ADDR_VAR 0 3
2249: PUSH
2250: LD_VAR 0 9
2254: PUSH
2255: FOR_IN
2256: IFFALSE 2299
// if UnitsInside ( j ) < 6 then
2258: LD_VAR 0 3
2262: PPUSH
2263: CALL_OW 313
2267: PUSH
2268: LD_INT 6
2270: LESS
2271: IFFALSE 2297
// begin PlaceHumanInUnit ( i , j ) ;
2273: LD_VAR 0 2
2277: PPUSH
2278: LD_VAR 0 3
2282: PPUSH
2283: CALL_OW 52
// placed := true ;
2287: LD_ADDR_VAR 0 12
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// break ;
2295: GO 2299
// end ;
2297: GO 2255
2299: POP
2300: POP
// end ; if not placed then
2301: LD_VAR 0 12
2305: NOT
2306: IFFALSE 2332
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2308: LD_VAR 0 2
2312: PPUSH
2313: LD_INT 3
2315: PPUSH
2316: LD_INT 0
2318: PPUSH
2319: CALL_OW 49
// ComHold ( i ) ;
2323: LD_VAR 0 2
2327: PPUSH
2328: CALL_OW 140
// end ; end ; if ct then
2332: LD_VAR 0 11
2336: IFFALSE 2403
// if UnitsInside ( ct [ 1 ] ) then
2338: LD_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ARRAY
2346: PPUSH
2347: CALL_OW 313
2351: IFFALSE 2403
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2353: LD_ADDR_VAR 0 2
2357: PUSH
2358: LD_INT 22
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PUSH
2368: LD_INT 33
2370: PUSH
2371: LD_INT 2
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PPUSH
2382: CALL_OW 69
2386: PUSH
2387: FOR_IN
2388: IFFALSE 2401
// Connect ( i ) ;
2390: LD_VAR 0 2
2394: PPUSH
2395: CALL 45455 0 1
2399: GO 2387
2401: POP
2402: POP
// end ; end ;
2403: GO 1912
2405: POP
2406: POP
// end ;
2407: LD_VAR 0 1
2411: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2412: LD_INT 0
2414: PPUSH
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2420: LD_INT 71
2422: PPUSH
2423: LD_INT 5
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: LD_STRING GammaBase
2440: PPUSH
2441: EMPTY
2442: PPUSH
2443: CALL_OW 30
2447: ST_TO_ADDR
// if not blist then
2448: LD_VAR 0 2
2452: NOT
2453: IFFALSE 2493
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: PUSH
2463: LD_INT 52
2465: PUSH
2466: LD_INT 12
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: LD_INT 3
2474: PUSH
2475: LD_INT 0
2477: PUSH
2478: LD_INT 0
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: PUSH
2490: EMPTY
2491: LIST
2492: ST_TO_ADDR
// uc_side := 1 ;
2493: LD_ADDR_OWVAR 20
2497: PUSH
2498: LD_INT 1
2500: ST_TO_ADDR
// uc_nation := 1 ;
2501: LD_ADDR_OWVAR 21
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// bc_kind1 := - 1 ;
2509: LD_ADDR_OWVAR 44
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: ST_TO_ADDR
// bc_kind2 := - 1 ;
2518: LD_ADDR_OWVAR 45
2522: PUSH
2523: LD_INT 1
2525: NEG
2526: ST_TO_ADDR
// for i in blist do
2527: LD_ADDR_VAR 0 3
2531: PUSH
2532: LD_VAR 0 2
2536: PUSH
2537: FOR_IN
2538: IFFALSE 2814
// begin bc_type := i [ 1 ] ;
2540: LD_ADDR_OWVAR 42
2544: PUSH
2545: LD_VAR 0 3
2549: PUSH
2550: LD_INT 1
2552: ARRAY
2553: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2554: LD_ADDR_OWVAR 43
2558: PUSH
2559: LD_VAR 0 3
2563: PUSH
2564: LD_INT 5
2566: ARRAY
2567: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2568: LD_OWVAR 42
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: LD_INT 7
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: IN
2583: IFFALSE 2649
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2585: LD_STRING 06_remoteVehs_1
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 30
2595: NOT
2596: IFFALSE 2624
// begin bc_type := b_lab_full ;
2598: LD_ADDR_OWVAR 42
2602: PUSH
2603: LD_INT 8
2605: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2606: LD_ADDR_OWVAR 44
2610: PUSH
2611: LD_INT 10
2613: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2614: LD_ADDR_OWVAR 45
2618: PUSH
2619: LD_INT 15
2621: ST_TO_ADDR
// end else
2622: GO 2649
// begin bc_type := b_lab_half ;
2624: LD_ADDR_OWVAR 42
2628: PUSH
2629: LD_INT 7
2631: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2632: LD_ADDR_OWVAR 44
2636: PUSH
2637: LD_INT 10
2639: ST_TO_ADDR
// bc_kind2 := - 1 ;
2640: LD_ADDR_OWVAR 45
2644: PUSH
2645: LD_INT 1
2647: NEG
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 26
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2537
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2537
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 26
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 26
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 26
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 26
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 26
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 71818 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 26
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 50587 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 26
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 50587 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 26
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 50587 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 26
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 50587 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 9
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 9
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 21
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 37498 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 21
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 22
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 37498 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 22
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4148: LD_STRING GladstoneIn07
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: CALL_OW 30
4158: NOT
4159: IFFALSE 4239
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4161: LD_ADDR_EXP 17
4165: PUSH
4166: LD_STRING Gladstone
4168: PPUSH
4169: LD_EXP 1
4173: NOT
4174: PPUSH
4175: LD_STRING 06c_
4177: PPUSH
4178: CALL 37498 0 3
4182: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4183: LD_EXP 17
4187: NOT
4188: PUSH
4189: LD_STRING GladstoneStayInDelta
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 30
4199: AND
4200: IFFALSE 4224
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4202: LD_ADDR_EXP 17
4206: PUSH
4207: LD_STRING Gladstone
4209: PPUSH
4210: LD_EXP 1
4214: NOT
4215: PPUSH
4216: LD_STRING 05_
4218: PPUSH
4219: CALL 37498 0 3
4223: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4224: LD_EXP 17
4228: PPUSH
4229: LD_INT 4
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4239: LD_STRING LisaStayInDelta
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 30
4249: IFFALSE 4285
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4251: LD_ADDR_EXP 15
4255: PUSH
4256: LD_STRING Lisa
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: LD_STRING 05_
4264: PPUSH
4265: CALL 37498 0 3
4269: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4270: LD_EXP 15
4274: PPUSH
4275: LD_INT 4
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4285: LD_STRING BobbyStayInDelta
4287: PPUSH
4288: LD_INT 0
4290: PPUSH
4291: CALL_OW 30
4295: IFFALSE 4331
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4297: LD_ADDR_EXP 13
4301: PUSH
4302: LD_STRING Bobby
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_STRING 05_
4310: PPUSH
4311: CALL 37498 0 3
4315: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4316: LD_EXP 13
4320: PPUSH
4321: LD_INT 4
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4331: LD_STRING CyrusStayInDelta
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 30
4341: IFFALSE 4377
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4343: LD_ADDR_EXP 14
4347: PUSH
4348: LD_STRING Cyrus
4350: PPUSH
4351: LD_INT 1
4353: PPUSH
4354: LD_STRING 05_
4356: PPUSH
4357: CALL 37498 0 3
4361: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4362: LD_EXP 14
4366: PPUSH
4367: LD_INT 4
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4377: LD_STRING BrownStayInDelta
4379: PPUSH
4380: LD_INT 0
4382: PPUSH
4383: CALL_OW 30
4387: IFFALSE 4423
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4389: LD_ADDR_EXP 11
4393: PUSH
4394: LD_STRING Brown
4396: PPUSH
4397: LD_INT 1
4399: PPUSH
4400: LD_STRING 05_
4402: PPUSH
4403: CALL 37498 0 3
4407: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4408: LD_EXP 11
4412: PPUSH
4413: LD_INT 4
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4423: LD_STRING DonaldsonStayInDelta
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 30
4433: IFFALSE 4469
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4435: LD_ADDR_EXP 12
4439: PUSH
4440: LD_STRING Donaldson
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_STRING 05_
4448: PPUSH
4449: CALL 37498 0 3
4453: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4454: LD_EXP 12
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4469: LD_ADDR_VAR 0 4
4473: PUSH
4474: LD_STRING OthersStayInDelta
4476: PPUSH
4477: CALL_OW 31
4481: ST_TO_ADDR
// if others > 2 then
4482: LD_VAR 0 4
4486: PUSH
4487: LD_INT 2
4489: GREATER
4490: IFFALSE 4553
// begin for j := 1 to 2 do
4492: LD_ADDR_VAR 0 3
4496: PUSH
4497: DOUBLE
4498: LD_INT 1
4500: DEC
4501: ST_TO_ADDR
4502: LD_INT 2
4504: PUSH
4505: FOR_TO
4506: IFFALSE 4549
// begin SetTag ( others [ j ] , 107 ) ;
4508: LD_VAR 0 4
4512: PUSH
4513: LD_VAR 0 3
4517: ARRAY
4518: PPUSH
4519: LD_INT 107
4521: PPUSH
4522: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4526: LD_VAR 0 4
4530: PUSH
4531: LD_VAR 0 3
4535: ARRAY
4536: PPUSH
4537: LD_INT 4
4539: PPUSH
4540: LD_INT 0
4542: PPUSH
4543: CALL_OW 49
// end ;
4547: GO 4505
4549: POP
4550: POP
// end else
4551: GO 4614
// begin for j := 1 to others do
4553: LD_ADDR_VAR 0 3
4557: PUSH
4558: DOUBLE
4559: LD_INT 1
4561: DEC
4562: ST_TO_ADDR
4563: LD_VAR 0 4
4567: PUSH
4568: FOR_TO
4569: IFFALSE 4612
// begin SetTag ( others [ i ] , 107 ) ;
4571: LD_VAR 0 4
4575: PUSH
4576: LD_VAR 0 2
4580: ARRAY
4581: PPUSH
4582: LD_INT 107
4584: PPUSH
4585: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4589: LD_VAR 0 4
4593: PUSH
4594: LD_VAR 0 3
4598: ARRAY
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: LD_INT 0
4605: PPUSH
4606: CALL_OW 49
// end ;
4610: GO 4568
4612: POP
4613: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4614: LD_ADDR_VAR 0 4
4618: PUSH
4619: LD_STRING 06_other_apemans
4621: PPUSH
4622: CALL_OW 31
4626: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4627: LD_VAR 0 4
4631: PUSH
4632: LD_INT 3
4634: PUSH
4635: LD_INT 2
4637: PUSH
4638: LD_INT 2
4640: PUSH
4641: LD_INT 1
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: PUSH
4650: LD_OWVAR 67
4654: ARRAY
4655: GREATEREQUAL
4656: IFFALSE 4689
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: LD_INT 3
4665: PUSH
4666: LD_INT 2
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 1
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: PUSH
4681: LD_OWVAR 67
4685: ARRAY
4686: ST_TO_ADDR
4687: GO 4699
// j := others ;
4689: LD_ADDR_VAR 0 3
4693: PUSH
4694: LD_VAR 0 4
4698: ST_TO_ADDR
// for i := 1 to j do
4699: LD_ADDR_VAR 0 2
4703: PUSH
4704: DOUBLE
4705: LD_INT 1
4707: DEC
4708: ST_TO_ADDR
4709: LD_VAR 0 3
4713: PUSH
4714: FOR_TO
4715: IFFALSE 4740
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4717: LD_VAR 0 4
4721: PUSH
4722: LD_VAR 0 2
4726: ARRAY
4727: PPUSH
4728: LD_INT 4
4730: PPUSH
4731: LD_INT 0
4733: PPUSH
4734: CALL_OW 49
4738: GO 4714
4740: POP
4741: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4742: LD_INT 4
4744: PPUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 1
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 21
4757: PUSH
4758: LD_INT 1
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PPUSH
4769: CALL_OW 70
4773: PPUSH
4774: LD_INT 53
4776: PPUSH
4777: LD_INT 19
4779: PPUSH
4780: CALL_OW 111
// end ;
4784: LD_VAR 0 1
4788: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4789: LD_INT 0
4791: PPUSH
4792: PPUSH
4793: PPUSH
4794: PPUSH
4795: PPUSH
4796: PPUSH
4797: PPUSH
4798: PPUSH
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
4805: PPUSH
// prefix := 07c_ ;
4806: LD_ADDR_VAR 0 11
4810: PUSH
4811: LD_STRING 07c_
4813: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4814: LD_ADDR_VAR 0 9
4818: PUSH
4819: LD_STRING 07_vehicles
4821: PPUSH
4822: EMPTY
4823: PPUSH
4824: CALL_OW 30
4828: ST_TO_ADDR
// if not vehicles and debug then
4829: LD_VAR 0 9
4833: NOT
4834: PUSH
4835: LD_EXP 1
4839: AND
4840: IFFALSE 4865
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4842: LD_ADDR_VAR 0 9
4846: PUSH
4847: LD_INT 2
4849: PUSH
4850: LD_INT 1
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: LD_INT 4
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: ST_TO_ADDR
// if not vehicles then
4865: LD_VAR 0 9
4869: NOT
4870: IFFALSE 4927
// begin area := westGammaSupportArea ;
4872: LD_ADDR_VAR 0 12
4876: PUSH
4877: LD_INT 16
4879: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4880: LD_ADDR_VAR 0 15
4884: PUSH
4885: LD_INT 37
4887: PUSH
4888: LD_INT 70
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4895: LD_ADDR_VAR 0 14
4899: PUSH
4900: LD_INT 43
4902: PUSH
4903: LD_INT 67
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: ST_TO_ADDR
// dir := 1 ;
4910: LD_ADDR_VAR 0 13
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4918: LD_INT 4200
4920: PPUSH
4921: CALL_OW 67
// end else
4925: GO 4973
// begin area := southGammaSupportArea ;
4927: LD_ADDR_VAR 0 12
4931: PUSH
4932: LD_INT 5
4934: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4935: LD_ADDR_VAR 0 15
4939: PUSH
4940: LD_INT 87
4942: PUSH
4943: LD_INT 147
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4950: LD_ADDR_VAR 0 14
4954: PUSH
4955: LD_INT 74
4957: PUSH
4958: LD_INT 129
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: ST_TO_ADDR
// dir := 0 ;
4965: LD_ADDR_VAR 0 13
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// end ; squad := [ ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: EMPTY
4979: ST_TO_ADDR
// tmp := [ ] ;
4980: LD_ADDR_VAR 0 7
4984: PUSH
4985: EMPTY
4986: ST_TO_ADDR
// tmpVehs := [ ] ;
4987: LD_ADDR_VAR 0 8
4991: PUSH
4992: EMPTY
4993: ST_TO_ADDR
// uc_side := 1 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// if vehicles then
5010: LD_VAR 0 9
5014: IFFALSE 5170
// begin k := 1 ;
5016: LD_ADDR_VAR 0 3
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: DOUBLE
5030: LD_INT 1
5032: DEC
5033: ST_TO_ADDR
5034: LD_VAR 0 9
5038: PUSH
5039: LD_INT 4
5041: DIV
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5168
// begin vc_chassis := vehicles [ k ] ;
5046: LD_ADDR_OWVAR 37
5050: PUSH
5051: LD_VAR 0 9
5055: PUSH
5056: LD_VAR 0 3
5060: ARRAY
5061: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
5062: LD_ADDR_OWVAR 39
5066: PUSH
5067: LD_VAR 0 9
5071: PUSH
5072: LD_VAR 0 3
5076: PUSH
5077: LD_INT 1
5079: PLUS
5080: ARRAY
5081: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
5082: LD_ADDR_OWVAR 38
5086: PUSH
5087: LD_VAR 0 9
5091: PUSH
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 2
5099: PLUS
5100: ARRAY
5101: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
5102: LD_ADDR_OWVAR 40
5106: PUSH
5107: LD_VAR 0 9
5111: PUSH
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 3
5119: PLUS
5120: ARRAY
5121: ST_TO_ADDR
// k := k + 4 ;
5122: LD_ADDR_VAR 0 3
5126: PUSH
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 4
5134: PLUS
5135: ST_TO_ADDR
// veh := CreateVehicle ;
5136: LD_ADDR_VAR 0 10
5140: PUSH
5141: CALL_OW 45
5145: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5146: LD_ADDR_VAR 0 8
5150: PUSH
5151: LD_VAR 0 8
5155: PPUSH
5156: LD_VAR 0 10
5160: PPUSH
5161: CALL 74179 0 2
5165: ST_TO_ADDR
// end ;
5166: GO 5043
5168: POP
5169: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5170: LD_ADDR_EXP 10
5174: PUSH
5175: LD_STRING JMM
5177: PPUSH
5178: LD_EXP 1
5182: NOT
5183: PPUSH
5184: LD_VAR 0 11
5188: PPUSH
5189: CALL 37498 0 3
5193: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5194: LD_EXP 9
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: IN
5209: PUSH
5210: LD_EXP 11
5214: NOT
5215: AND
5216: IFFALSE 5277
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5218: LD_ADDR_EXP 11
5222: PUSH
5223: LD_STRING Brown
5225: PPUSH
5226: LD_EXP 1
5230: NOT
5231: PPUSH
5232: LD_VAR 0 11
5236: PPUSH
5237: CALL 37498 0 3
5241: ST_TO_ADDR
// if Brown then
5242: LD_EXP 11
5246: IFFALSE 5277
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5248: LD_ADDR_VAR 0 7
5252: PUSH
5253: LD_VAR 0 7
5257: PPUSH
5258: LD_VAR 0 7
5262: PUSH
5263: LD_INT 1
5265: PLUS
5266: PPUSH
5267: LD_EXP 11
5271: PPUSH
5272: CALL_OW 1
5276: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5277: LD_EXP 9
5281: PUSH
5282: LD_INT 2
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: IN
5292: PUSH
5293: LD_EXP 12
5297: NOT
5298: AND
5299: IFFALSE 5360
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5301: LD_ADDR_EXP 12
5305: PUSH
5306: LD_STRING Donaldson
5308: PPUSH
5309: LD_EXP 1
5313: NOT
5314: PPUSH
5315: LD_VAR 0 11
5319: PPUSH
5320: CALL 37498 0 3
5324: ST_TO_ADDR
// if Donaldson then
5325: LD_EXP 12
5329: IFFALSE 5360
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5331: LD_ADDR_VAR 0 7
5335: PUSH
5336: LD_VAR 0 7
5340: PPUSH
5341: LD_VAR 0 7
5345: PUSH
5346: LD_INT 1
5348: PLUS
5349: PPUSH
5350: LD_EXP 12
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// end ; if not Bobby then
5360: LD_EXP 13
5364: NOT
5365: IFFALSE 5423
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5367: LD_ADDR_EXP 13
5371: PUSH
5372: LD_STRING Bobby
5374: PPUSH
5375: LD_INT 1
5377: PPUSH
5378: LD_VAR 0 11
5382: PPUSH
5383: CALL 37498 0 3
5387: ST_TO_ADDR
// if Bobby then
5388: LD_EXP 13
5392: IFFALSE 5423
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5394: LD_ADDR_VAR 0 7
5398: PUSH
5399: LD_VAR 0 7
5403: PPUSH
5404: LD_VAR 0 7
5408: PUSH
5409: LD_INT 1
5411: PLUS
5412: PPUSH
5413: LD_EXP 13
5417: PPUSH
5418: CALL_OW 1
5422: ST_TO_ADDR
// end ; if not Cyrus then
5423: LD_EXP 14
5427: NOT
5428: IFFALSE 5486
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5430: LD_ADDR_EXP 14
5434: PUSH
5435: LD_STRING Cyrus
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_VAR 0 11
5445: PPUSH
5446: CALL 37498 0 3
5450: ST_TO_ADDR
// if Cyrus then
5451: LD_EXP 14
5455: IFFALSE 5486
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5457: LD_ADDR_VAR 0 7
5461: PUSH
5462: LD_VAR 0 7
5466: PPUSH
5467: LD_VAR 0 7
5471: PUSH
5472: LD_INT 1
5474: PLUS
5475: PPUSH
5476: LD_EXP 14
5480: PPUSH
5481: CALL_OW 1
5485: ST_TO_ADDR
// end ; if not Lisa then
5486: LD_EXP 15
5490: NOT
5491: IFFALSE 5552
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5493: LD_ADDR_EXP 15
5497: PUSH
5498: LD_STRING Lisa
5500: PPUSH
5501: LD_EXP 1
5505: NOT
5506: PPUSH
5507: LD_VAR 0 11
5511: PPUSH
5512: CALL 37498 0 3
5516: ST_TO_ADDR
// if Lisa then
5517: LD_EXP 15
5521: IFFALSE 5552
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5523: LD_ADDR_VAR 0 7
5527: PUSH
5528: LD_VAR 0 7
5532: PPUSH
5533: LD_VAR 0 7
5537: PUSH
5538: LD_INT 1
5540: PLUS
5541: PPUSH
5542: LD_EXP 15
5546: PPUSH
5547: CALL_OW 1
5551: ST_TO_ADDR
// end ; if not Frank then
5552: LD_EXP 16
5556: NOT
5557: IFFALSE 5618
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5559: LD_ADDR_EXP 16
5563: PUSH
5564: LD_STRING Frank
5566: PPUSH
5567: LD_EXP 1
5571: NOT
5572: PPUSH
5573: LD_VAR 0 11
5577: PPUSH
5578: CALL 37498 0 3
5582: ST_TO_ADDR
// if Frank then
5583: LD_EXP 16
5587: IFFALSE 5618
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5589: LD_ADDR_VAR 0 7
5593: PUSH
5594: LD_VAR 0 7
5598: PPUSH
5599: LD_VAR 0 7
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: PPUSH
5608: LD_EXP 16
5612: PPUSH
5613: CALL_OW 1
5617: ST_TO_ADDR
// end ; if not Kikuchi then
5618: LD_EXP 18
5622: NOT
5623: IFFALSE 5681
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5625: LD_ADDR_EXP 18
5629: PUSH
5630: LD_STRING Kikuchi
5632: PPUSH
5633: LD_INT 1
5635: PPUSH
5636: LD_VAR 0 11
5640: PPUSH
5641: CALL 37498 0 3
5645: ST_TO_ADDR
// if Kikuchi then
5646: LD_EXP 18
5650: IFFALSE 5681
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5652: LD_ADDR_VAR 0 7
5656: PUSH
5657: LD_VAR 0 7
5661: PPUSH
5662: LD_VAR 0 7
5666: PUSH
5667: LD_INT 1
5669: PLUS
5670: PPUSH
5671: LD_EXP 18
5675: PPUSH
5676: CALL_OW 1
5680: ST_TO_ADDR
// end ; if not Gladstone then
5681: LD_EXP 17
5685: NOT
5686: IFFALSE 5747
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5688: LD_ADDR_EXP 17
5692: PUSH
5693: LD_STRING Gladstone
5695: PPUSH
5696: LD_EXP 1
5700: NOT
5701: PPUSH
5702: LD_VAR 0 11
5706: PPUSH
5707: CALL 37498 0 3
5711: ST_TO_ADDR
// if Gladstone then
5712: LD_EXP 17
5716: IFFALSE 5747
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5718: LD_ADDR_VAR 0 7
5722: PUSH
5723: LD_VAR 0 7
5727: PPUSH
5728: LD_VAR 0 7
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: PPUSH
5737: LD_EXP 17
5741: PPUSH
5742: CALL_OW 1
5746: ST_TO_ADDR
// end ; if not Khatam then
5747: LD_EXP 19
5751: NOT
5752: IFFALSE 5810
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5754: LD_ADDR_EXP 19
5758: PUSH
5759: LD_STRING Khatam
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: LD_VAR 0 11
5769: PPUSH
5770: CALL 37498 0 3
5774: ST_TO_ADDR
// if Khatam then
5775: LD_EXP 19
5779: IFFALSE 5810
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5781: LD_ADDR_VAR 0 7
5785: PUSH
5786: LD_VAR 0 7
5790: PPUSH
5791: LD_VAR 0 7
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_EXP 19
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5810: LD_ADDR_VAR 0 5
5814: PUSH
5815: LD_STRING 07c_others
5817: PPUSH
5818: CALL_OW 31
5822: ST_TO_ADDR
// squad := others ;
5823: LD_ADDR_VAR 0 6
5827: PUSH
5828: LD_VAR 0 5
5832: ST_TO_ADDR
// if others then
5833: LD_VAR 0 5
5837: IFFALSE 5937
// for i in others do
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: LD_VAR 0 5
5848: PUSH
5849: FOR_IN
5850: IFFALSE 5935
// begin SetTag ( i , 108 ) ;
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_INT 108
5859: PPUSH
5860: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5864: LD_VAR 0 2
5868: PPUSH
5869: CALL_OW 257
5873: PUSH
5874: LD_INT 3
5876: EQUAL
5877: IFFALSE 5904
// tmp := Insert ( tmp , 1 , i ) else
5879: LD_ADDR_VAR 0 7
5883: PUSH
5884: LD_VAR 0 7
5888: PPUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_VAR 0 2
5896: PPUSH
5897: CALL_OW 2
5901: ST_TO_ADDR
5902: GO 5933
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5904: LD_ADDR_VAR 0 7
5908: PUSH
5909: LD_VAR 0 7
5913: PPUSH
5914: LD_VAR 0 7
5918: PUSH
5919: LD_INT 1
5921: PLUS
5922: PPUSH
5923: LD_VAR 0 2
5927: PPUSH
5928: CALL_OW 1
5932: ST_TO_ADDR
// end ;
5933: GO 5849
5935: POP
5936: POP
// if tmp then
5937: LD_VAR 0 7
5941: IFFALSE 6141
// begin for i in tmp do
5943: LD_ADDR_VAR 0 2
5947: PUSH
5948: LD_VAR 0 7
5952: PUSH
5953: FOR_IN
5954: IFFALSE 6139
// begin SetDir ( i , dir ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_VAR 0 13
5965: PPUSH
5966: CALL_OW 233
// if tmpVehs then
5970: LD_VAR 0 8
5974: IFFALSE 6064
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5976: LD_VAR 0 8
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5992: LD_VAR 0 8
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PPUSH
6001: LD_VAR 0 15
6005: PUSH
6006: LD_INT 1
6008: ARRAY
6009: PPUSH
6010: LD_VAR 0 15
6014: PUSH
6015: LD_INT 2
6017: ARRAY
6018: PPUSH
6019: LD_INT 0
6021: PPUSH
6022: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 8
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6044: LD_ADDR_VAR 0 8
6048: PUSH
6049: LD_VAR 0 8
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: CALL_OW 3
6061: ST_TO_ADDR
// end else
6062: GO 6081
// PlaceUnitArea ( i , area , false ) ;
6064: LD_VAR 0 2
6068: PPUSH
6069: LD_VAR 0 12
6073: PPUSH
6074: LD_INT 0
6076: PPUSH
6077: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6081: LD_VAR 0 2
6085: PPUSH
6086: LD_VAR 0 14
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_VAR 0 14
6099: PUSH
6100: LD_INT 2
6102: ARRAY
6103: PPUSH
6104: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6115: LD_VAR 0 12
6119: PPUSH
6120: LD_INT 22
6122: PUSH
6123: LD_INT 1
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 70
6134: NOT
6135: IFFALSE 6108
// end ;
6137: GO 5953
6139: POP
6140: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6141: LD_EXP 10
6145: PPUSH
6146: LD_VAR 0 15
6150: PUSH
6151: LD_INT 1
6153: ARRAY
6154: PPUSH
6155: LD_VAR 0 15
6159: PUSH
6160: LD_INT 2
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6171: LD_EXP 10
6175: PPUSH
6176: LD_VAR 0 14
6180: PUSH
6181: LD_INT 1
6183: ARRAY
6184: PPUSH
6185: LD_VAR 0 14
6189: PUSH
6190: LD_INT 2
6192: ARRAY
6193: PPUSH
6194: CALL_OW 111
// jmmArrival := true ;
6198: LD_ADDR_EXP 7
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// end ;
6206: LD_VAR 0 1
6210: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6211: LD_INT 0
6213: PPUSH
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6218: LD_ADDR_VAR 0 5
6222: PUSH
6223: LD_INT 6
6225: PPUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 21
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 70
6247: ST_TO_ADDR
// if tmp then
6248: LD_VAR 0 5
6252: IFFALSE 6276
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 33
6261: PPUSH
6262: LD_INT 39
6264: PPUSH
6265: CALL_OW 111
// wait ( 0 0$3 ) ;
6269: LD_INT 105
6271: PPUSH
6272: CALL_OW 67
// end ; uc_side := 4 ;
6276: LD_ADDR_OWVAR 20
6280: PUSH
6281: LD_INT 4
6283: ST_TO_ADDR
// uc_nation := 1 ;
6284: LD_ADDR_OWVAR 21
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6292: LD_ADDR_EXP 23
6296: PUSH
6297: LD_STRING Sikorski
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_STRING 
6305: PPUSH
6306: CALL 37498 0 3
6310: ST_TO_ADDR
// vc_engine := engine_combustion ;
6311: LD_ADDR_OWVAR 39
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// vc_control = control_manual ;
6319: LD_ADDR_OWVAR 38
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// vc_weapon = [ us_heavy_gun , us_double_gun , us_double_gun , us_double_gun ] [ Difficulty ] ;
6327: LD_ADDR_OWVAR 40
6331: PUSH
6332: LD_INT 6
6334: PUSH
6335: LD_INT 5
6337: PUSH
6338: LD_INT 5
6340: PUSH
6341: LD_INT 5
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_OWVAR 67
6354: ARRAY
6355: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
6356: LD_ADDR_OWVAR 37
6360: PUSH
6361: LD_INT 4
6363: ST_TO_ADDR
// veh := CreateVehicle ;
6364: LD_ADDR_VAR 0 4
6368: PUSH
6369: CALL_OW 45
6373: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6374: LD_VAR 0 4
6378: PPUSH
6379: LD_INT 3
6381: PPUSH
6382: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6386: LD_VAR 0 4
6390: PPUSH
6391: LD_INT 4
6393: NEG
6394: PPUSH
6395: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6399: LD_VAR 0 4
6403: PPUSH
6404: LD_INT 70
6406: PPUSH
6407: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6411: LD_VAR 0 4
6415: PPUSH
6416: LD_INT 6
6418: PPUSH
6419: LD_INT 0
6421: PPUSH
6422: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6426: LD_EXP 23
6430: PPUSH
6431: LD_VAR 0 4
6435: PPUSH
6436: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6440: LD_EXP 23
6444: PPUSH
6445: LD_INT 37
6447: PPUSH
6448: LD_INT 30
6450: PPUSH
6451: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6455: LD_INT 10
6457: PPUSH
6458: CALL_OW 67
// InitHc_All ( ) ;
6462: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: DOUBLE
6472: LD_INT 1
6474: DEC
6475: ST_TO_ADDR
6476: LD_INT 3
6478: PUSH
6479: LD_INT 2
6481: PUSH
6482: LD_INT 2
6484: PUSH
6485: LD_INT 2
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: PUSH
6494: LD_OWVAR 67
6498: ARRAY
6499: PUSH
6500: FOR_TO
6501: IFFALSE 6613
// begin uc_side = 4 ;
6503: LD_ADDR_OWVAR 20
6507: PUSH
6508: LD_INT 4
6510: ST_TO_ADDR
// uc_nation = 1 ;
6511: LD_ADDR_OWVAR 21
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6519: LD_INT 0
6521: PPUSH
6522: LD_INT 1
6524: PPUSH
6525: LD_INT 4
6527: PPUSH
6528: LD_INT 7
6530: PPUSH
6531: CALL_OW 12
6535: PPUSH
6536: CALL_OW 380
// un := CreateHuman ;
6540: LD_ADDR_VAR 0 3
6544: PUSH
6545: CALL_OW 44
6549: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_INT 3
6557: PPUSH
6558: CALL_OW 233
// SetTag ( un , 101 ) ;
6562: LD_VAR 0 3
6566: PPUSH
6567: LD_INT 101
6569: PPUSH
6570: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6574: LD_VAR 0 3
6578: PPUSH
6579: LD_INT 6
6581: PPUSH
6582: LD_INT 0
6584: PPUSH
6585: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6589: LD_VAR 0 3
6593: PPUSH
6594: LD_INT 25
6596: PPUSH
6597: LD_INT 27
6599: PPUSH
6600: CALL_OW 111
// wait ( 0 0$1 ) ;
6604: LD_INT 35
6606: PPUSH
6607: CALL_OW 67
// end ;
6611: GO 6500
6613: POP
6614: POP
// for i := 1 to 2 do
6615: LD_ADDR_VAR 0 2
6619: PUSH
6620: DOUBLE
6621: LD_INT 1
6623: DEC
6624: ST_TO_ADDR
6625: LD_INT 2
6627: PUSH
6628: FOR_TO
6629: IFFALSE 6741
// begin uc_side = 4 ;
6631: LD_ADDR_OWVAR 20
6635: PUSH
6636: LD_INT 4
6638: ST_TO_ADDR
// uc_nation = 1 ;
6639: LD_ADDR_OWVAR 21
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6647: LD_INT 0
6649: PPUSH
6650: LD_INT 4
6652: PPUSH
6653: LD_INT 3
6655: PPUSH
6656: LD_INT 5
6658: PPUSH
6659: CALL_OW 12
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6678: LD_VAR 0 3
6682: PPUSH
6683: LD_INT 3
6685: PPUSH
6686: CALL_OW 233
// SetTag ( un , 101 ) ;
6690: LD_VAR 0 3
6694: PPUSH
6695: LD_INT 101
6697: PPUSH
6698: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6702: LD_VAR 0 3
6706: PPUSH
6707: LD_INT 6
6709: PPUSH
6710: LD_INT 0
6712: PPUSH
6713: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6717: LD_VAR 0 3
6721: PPUSH
6722: LD_INT 25
6724: PPUSH
6725: LD_INT 27
6727: PPUSH
6728: CALL_OW 111
// wait ( 0 0$1 ) ;
6732: LD_INT 35
6734: PPUSH
6735: CALL_OW 67
// end ;
6739: GO 6628
6741: POP
6742: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: DOUBLE
6749: LD_INT 1
6751: DEC
6752: ST_TO_ADDR
6753: LD_INT 5
6755: PUSH
6756: LD_INT 4
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 3
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_OWVAR 67
6775: ARRAY
6776: PUSH
6777: FOR_TO
6778: IFFALSE 7020
// begin uc_side := 4 ;
6780: LD_ADDR_OWVAR 20
6784: PUSH
6785: LD_INT 4
6787: ST_TO_ADDR
// uc_nation := 1 ;
6788: LD_ADDR_OWVAR 21
6792: PUSH
6793: LD_INT 1
6795: ST_TO_ADDR
// vc_engine := engine_combustion ;
6796: LD_ADDR_OWVAR 39
6800: PUSH
6801: LD_INT 1
6803: ST_TO_ADDR
// vc_control := control_manual ;
6804: LD_ADDR_OWVAR 38
6808: PUSH
6809: LD_INT 1
6811: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6812: LD_ADDR_OWVAR 40
6816: PUSH
6817: LD_INT 5
6819: PUSH
6820: LD_INT 7
6822: PUSH
6823: LD_INT 5
6825: PUSH
6826: LD_INT 4
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_VAR 0 2
6839: PUSH
6840: LD_INT 4
6842: MOD
6843: PUSH
6844: LD_INT 1
6846: PLUS
6847: ARRAY
6848: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6849: LD_ADDR_OWVAR 37
6853: PUSH
6854: LD_INT 3
6856: PUSH
6857: LD_INT 3
6859: PUSH
6860: LD_INT 4
6862: PUSH
6863: LD_INT 4
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: PUSH
6872: LD_VAR 0 2
6876: PUSH
6877: LD_INT 4
6879: MOD
6880: PUSH
6881: LD_INT 1
6883: PLUS
6884: ARRAY
6885: ST_TO_ADDR
// veh := CreateVehicle ;
6886: LD_ADDR_VAR 0 4
6890: PUSH
6891: CALL_OW 45
6895: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6896: LD_VAR 0 4
6900: PPUSH
6901: LD_INT 3
6903: PPUSH
6904: CALL_OW 233
// SetTag ( veh , 0 ) ;
6908: LD_VAR 0 4
6912: PPUSH
6913: LD_INT 0
6915: PPUSH
6916: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6920: LD_VAR 0 4
6924: PPUSH
6925: LD_INT 70
6927: PPUSH
6928: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_INT 6
6939: PPUSH
6940: LD_INT 0
6942: PPUSH
6943: CALL_OW 49
// InitHc ;
6947: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6951: LD_INT 0
6953: PPUSH
6954: LD_INT 3
6956: PPUSH
6957: LD_INT 4
6959: PPUSH
6960: LD_INT 7
6962: PPUSH
6963: CALL_OW 12
6967: PPUSH
6968: CALL_OW 380
// un := CreateHuman ;
6972: LD_ADDR_VAR 0 3
6976: PUSH
6977: CALL_OW 44
6981: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6982: LD_VAR 0 3
6986: PPUSH
6987: LD_VAR 0 4
6991: PPUSH
6992: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6996: LD_VAR 0 3
7000: PPUSH
7001: LD_INT 30
7003: PPUSH
7004: LD_INT 22
7006: PPUSH
7007: CALL_OW 111
// wait ( 0 0$3 ) ;
7011: LD_INT 105
7013: PPUSH
7014: CALL_OW 67
// end ;
7018: GO 6777
7020: POP
7021: POP
// wait ( 0 0$10 ) ;
7022: LD_INT 350
7024: PPUSH
7025: CALL_OW 67
// end ;
7029: LD_VAR 0 1
7033: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7034: LD_INT 0
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
// gammaBase := [ ] ;
7040: LD_ADDR_VAR 0 4
7044: PUSH
7045: EMPTY
7046: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7047: LD_ADDR_VAR 0 5
7051: PUSH
7052: LD_VAR 0 1
7056: PPUSH
7057: LD_INT 22
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 21
7069: PUSH
7070: LD_INT 3
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 50
7079: PUSH
7080: EMPTY
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: PPUSH
7088: CALL_OW 70
7092: ST_TO_ADDR
// for i in buildings do
7093: LD_ADDR_VAR 0 3
7097: PUSH
7098: LD_VAR 0 5
7102: PUSH
7103: FOR_IN
7104: IFFALSE 7541
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7106: LD_VAR 0 3
7110: PPUSH
7111: CALL_OW 266
7115: PUSH
7116: LD_INT 6
7118: PUSH
7119: LD_INT 7
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: IN
7130: IFFALSE 7244
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7132: LD_ADDR_VAR 0 4
7136: PUSH
7137: LD_VAR 0 4
7141: PUSH
7142: LD_VAR 0 3
7146: PPUSH
7147: CALL_OW 266
7151: PUSH
7152: LD_VAR 0 3
7156: PPUSH
7157: CALL_OW 250
7161: PUSH
7162: LD_VAR 0 3
7166: PPUSH
7167: CALL_OW 251
7171: PUSH
7172: LD_VAR 0 3
7176: PPUSH
7177: CALL_OW 254
7181: PUSH
7182: LD_VAR 0 3
7186: PPUSH
7187: CALL_OW 267
7191: PUSH
7192: LD_VAR 0 3
7196: PPUSH
7197: CALL_OW 248
7201: PUSH
7202: LD_VAR 0 3
7206: PPUSH
7207: LD_INT 1
7209: PPUSH
7210: CALL_OW 268
7214: PUSH
7215: LD_VAR 0 3
7219: PPUSH
7220: LD_INT 2
7222: PPUSH
7223: CALL_OW 268
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: PUSH
7238: EMPTY
7239: LIST
7240: ADD
7241: ST_TO_ADDR
7242: GO 7539
// if GetBType ( i ) = b_bunker then
7244: LD_VAR 0 3
7248: PPUSH
7249: CALL_OW 266
7253: PUSH
7254: LD_INT 32
7256: EQUAL
7257: IFFALSE 7354
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7259: LD_ADDR_VAR 0 4
7263: PUSH
7264: LD_VAR 0 4
7268: PUSH
7269: LD_VAR 0 3
7273: PPUSH
7274: CALL_OW 266
7278: PUSH
7279: LD_VAR 0 3
7283: PPUSH
7284: CALL_OW 250
7288: PUSH
7289: LD_VAR 0 3
7293: PPUSH
7294: CALL_OW 251
7298: PUSH
7299: LD_VAR 0 3
7303: PPUSH
7304: CALL_OW 254
7308: PUSH
7309: LD_VAR 0 3
7313: PPUSH
7314: CALL_OW 267
7318: PUSH
7319: LD_VAR 0 3
7323: PPUSH
7324: CALL_OW 248
7328: PUSH
7329: LD_VAR 0 3
7333: PPUSH
7334: CALL_OW 269
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: ADD
7351: ST_TO_ADDR
7352: GO 7539
// if GetBType ( i ) = b_factory then
7354: LD_VAR 0 3
7358: PPUSH
7359: CALL_OW 266
7363: PUSH
7364: LD_INT 3
7366: EQUAL
7367: IFFALSE 7457
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7369: LD_ADDR_VAR 0 4
7373: PUSH
7374: LD_VAR 0 4
7378: PPUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: CALL_OW 266
7391: PUSH
7392: LD_VAR 0 3
7396: PPUSH
7397: CALL_OW 250
7401: PUSH
7402: LD_VAR 0 3
7406: PPUSH
7407: CALL_OW 251
7411: PUSH
7412: LD_VAR 0 3
7416: PPUSH
7417: CALL_OW 254
7421: PUSH
7422: LD_VAR 0 3
7426: PPUSH
7427: CALL_OW 267
7431: PUSH
7432: LD_VAR 0 3
7436: PPUSH
7437: CALL_OW 248
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 2
7454: ST_TO_ADDR
7455: GO 7539
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7457: LD_ADDR_VAR 0 4
7461: PUSH
7462: LD_VAR 0 4
7466: PUSH
7467: LD_VAR 0 3
7471: PPUSH
7472: CALL_OW 266
7476: PUSH
7477: LD_VAR 0 3
7481: PPUSH
7482: CALL_OW 250
7486: PUSH
7487: LD_VAR 0 3
7491: PPUSH
7492: CALL_OW 251
7496: PUSH
7497: LD_VAR 0 3
7501: PPUSH
7502: CALL_OW 254
7506: PUSH
7507: LD_VAR 0 3
7511: PPUSH
7512: CALL_OW 267
7516: PUSH
7517: LD_VAR 0 3
7521: PPUSH
7522: CALL_OW 248
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: ADD
7538: ST_TO_ADDR
// end ;
7539: GO 7103
7541: POP
7542: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7543: LD_VAR 0 4
7547: PPUSH
7548: LD_STRING 08_GammaBase
7550: PPUSH
7551: CALL_OW 39
// end ;
7555: LD_VAR 0 2
7559: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7560: LD_INT 0
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7569: LD_ADDR_VAR 0 3
7573: PUSH
7574: LD_INT 22
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PPUSH
7584: CALL_OW 69
7588: ST_TO_ADDR
// ComAgressiveMove ( tmp , 55 , 62 ) ;
7589: LD_VAR 0 3
7593: PPUSH
7594: LD_INT 55
7596: PPUSH
7597: LD_INT 62
7599: PPUSH
7600: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
7604: LD_VAR 0 3
7608: PPUSH
7609: LD_INT 175
7611: PPUSH
7612: CALL_OW 202
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
7616: LD_VAR 0 3
7620: PPUSH
7621: LD_INT 120
7623: PUSH
7624: LD_INT 101
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 72
7635: PPUSH
7636: LD_INT 58
7638: PPUSH
7639: LD_INT 96
7641: PPUSH
7642: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
7646: LD_VAR 0 3
7650: PPUSH
7651: LD_INT 120
7653: PUSH
7654: LD_INT 101
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: PPUSH
7666: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
7670: LD_VAR 0 3
7674: PPUSH
7675: LD_INT 120
7677: PUSH
7678: LD_INT 101
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 25
7687: PUSH
7688: LD_INT 4
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PPUSH
7699: CALL_OW 72
7703: PPUSH
7704: LD_INT 52
7706: PPUSH
7707: LD_INT 93
7709: PPUSH
7710: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
7714: LD_VAR 0 3
7718: PPUSH
7719: LD_INT 120
7721: PUSH
7722: LD_INT 101
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 25
7731: PUSH
7732: LD_INT 4
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 72
7747: PPUSH
7748: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
7752: LD_ADDR_VAR 0 7
7756: PUSH
7757: LD_VAR 0 3
7761: PPUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 72
7776: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
7777: LD_ADDR_VAR 0 4
7781: PUSH
7782: LD_INT 81
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 69
7796: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
7797: LD_ADDR_VAR 0 5
7801: PUSH
7802: LD_INT 57
7804: PUSH
7805: LD_INT 66
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 62
7814: PUSH
7815: LD_INT 58
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7826: LD_INT 35
7828: PPUSH
7829: CALL_OW 67
// for i in filter do
7833: LD_ADDR_VAR 0 2
7837: PUSH
7838: LD_VAR 0 7
7842: PUSH
7843: FOR_IN
7844: IFFALSE 8283
// begin if IsDead ( i ) then
7846: LD_VAR 0 2
7850: PPUSH
7851: CALL_OW 301
7855: IFFALSE 7875
// begin filter := filter diff i ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_VAR 0 7
7866: PUSH
7867: LD_VAR 0 2
7871: DIFF
7872: ST_TO_ADDR
// continue ;
7873: GO 7843
// end ; tmp := IsDrivenBy ( i ) ;
7875: LD_ADDR_VAR 0 3
7879: PUSH
7880: LD_VAR 0 2
7884: PPUSH
7885: CALL_OW 311
7889: ST_TO_ADDR
// if not tmp then
7890: LD_VAR 0 3
7894: NOT
7895: IFFALSE 7899
// continue ;
7897: GO 7843
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
7899: LD_VAR 0 2
7903: PPUSH
7904: CALL_OW 261
7908: PUSH
7909: LD_INT 30
7911: GREATER
7912: PUSH
7913: LD_VAR 0 2
7917: PPUSH
7918: CALL_OW 110
7922: PUSH
7923: LD_INT 2
7925: EQUAL
7926: AND
7927: IFFALSE 7943
// SetTag ( i , 0 ) else
7929: LD_VAR 0 2
7933: PPUSH
7934: LD_INT 0
7936: PPUSH
7937: CALL_OW 109
7941: GO 7987
// if GetTag ( i ) = 2 then
7943: LD_VAR 0 2
7947: PPUSH
7948: CALL_OW 110
7952: PUSH
7953: LD_INT 2
7955: EQUAL
7956: IFFALSE 7987
// begin ComMoveXY ( i , 52 , 50 ) ;
7958: LD_VAR 0 2
7962: PPUSH
7963: LD_INT 52
7965: PPUSH
7966: LD_INT 50
7968: PPUSH
7969: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
7973: LD_VAR 0 2
7977: PPUSH
7978: LD_EXP 26
7982: PPUSH
7983: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
7987: LD_VAR 0 2
7991: PPUSH
7992: CALL_OW 256
7996: PUSH
7997: LD_INT 600
7999: GREATEREQUAL
8000: PUSH
8001: LD_VAR 0 2
8005: PPUSH
8006: CALL_OW 110
8010: NOT
8011: AND
8012: IFFALSE 8038
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8014: LD_VAR 0 2
8018: PPUSH
8019: LD_VAR 0 4
8023: PPUSH
8024: LD_VAR 0 2
8028: PPUSH
8029: CALL_OW 74
8033: PPUSH
8034: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8038: LD_VAR 0 2
8042: PPUSH
8043: CALL_OW 256
8047: PUSH
8048: LD_INT 600
8050: LESS
8051: PUSH
8052: LD_VAR 0 2
8056: PPUSH
8057: CALL_OW 110
8061: NOT
8062: AND
8063: IFFALSE 8139
// begin SetTag ( i , 1 ) ;
8065: LD_VAR 0 2
8069: PPUSH
8070: LD_INT 1
8072: PPUSH
8073: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8077: LD_ADDR_VAR 0 6
8081: PUSH
8082: LD_VAR 0 2
8086: PPUSH
8087: LD_VAR 0 5
8091: PPUSH
8092: CALL 77502 0 2
8096: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8097: LD_VAR 0 2
8101: PPUSH
8102: LD_VAR 0 6
8106: PUSH
8107: LD_INT 1
8109: ARRAY
8110: PPUSH
8111: LD_VAR 0 6
8115: PUSH
8116: LD_INT 2
8118: ARRAY
8119: PPUSH
8120: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: LD_INT 40
8131: PPUSH
8132: LD_INT 49
8134: PPUSH
8135: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8139: LD_VAR 0 2
8143: PPUSH
8144: CALL_OW 110
8148: PUSH
8149: LD_INT 1
8151: EQUAL
8152: PUSH
8153: LD_VAR 0 2
8157: PPUSH
8158: LD_INT 40
8160: PPUSH
8161: LD_INT 49
8163: PPUSH
8164: CALL_OW 297
8168: PUSH
8169: LD_INT 9
8171: LESS
8172: AND
8173: PUSH
8174: LD_VAR 0 3
8178: AND
8179: IFFALSE 8281
// begin ComExitVehicle ( tmp ) ;
8181: LD_VAR 0 3
8185: PPUSH
8186: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8190: LD_VAR 0 3
8194: PPUSH
8195: LD_VAR 0 2
8199: PPUSH
8200: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8204: LD_INT 35
8206: PPUSH
8207: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8211: LD_VAR 0 2
8215: PPUSH
8216: CALL_OW 256
8220: PUSH
8221: LD_INT 1000
8223: EQUAL
8224: IFFALSE 8204
// ComEnterUnit ( tmp , i ) ;
8226: LD_VAR 0 3
8230: PPUSH
8231: LD_VAR 0 2
8235: PPUSH
8236: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8240: LD_VAR 0 2
8244: PPUSH
8245: CALL_OW 261
8249: PUSH
8250: LD_INT 40
8252: LESSEQUAL
8253: IFFALSE 8269
// SetTag ( i , 2 ) else
8255: LD_VAR 0 2
8259: PPUSH
8260: LD_INT 2
8262: PPUSH
8263: CALL_OW 109
8267: GO 8281
// SetTag ( i , 0 ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_INT 0
8276: PPUSH
8277: CALL_OW 109
// end ; end ;
8281: GO 7843
8283: POP
8284: POP
// until not filter ;
8285: LD_VAR 0 7
8289: NOT
8290: IFFALSE 7826
// end ; end_of_file
8292: LD_VAR 0 1
8296: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8297: LD_INT 0
8299: PPUSH
8300: PPUSH
8301: PPUSH
8302: PPUSH
8303: PPUSH
// uc_side := 3 ;
8304: LD_ADDR_OWVAR 20
8308: PUSH
8309: LD_INT 3
8311: ST_TO_ADDR
// uc_nation := 3 ;
8312: LD_ADDR_OWVAR 21
8316: PUSH
8317: LD_INT 3
8319: ST_TO_ADDR
// ruMechCounter := [ 8 , 12 , 16 , 20 ] [ Difficulty ] ;
8320: LD_ADDR_EXP 28
8324: PUSH
8325: LD_INT 8
8327: PUSH
8328: LD_INT 12
8330: PUSH
8331: LD_INT 16
8333: PUSH
8334: LD_INT 20
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: LD_OWVAR 67
8347: ARRAY
8348: ST_TO_ADDR
// ruMobile := [ ] ;
8349: LD_ADDR_EXP 29
8353: PUSH
8354: EMPTY
8355: ST_TO_ADDR
// ruBuildList := [ ] ;
8356: LD_ADDR_EXP 30
8360: PUSH
8361: EMPTY
8362: ST_TO_ADDR
// russianAttackers := [ ] ;
8363: LD_ADDR_EXP 31
8367: PUSH
8368: EMPTY
8369: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8370: LD_ADDR_VAR 0 5
8374: PUSH
8375: LD_INT 43
8377: PUSH
8378: LD_INT 44
8380: PUSH
8381: LD_INT 46
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: ST_TO_ADDR
// if Difficulty > 2 then
8389: LD_OWVAR 67
8393: PUSH
8394: LD_INT 2
8396: GREATER
8397: IFFALSE 8420
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8399: LD_ADDR_VAR 0 5
8403: PUSH
8404: LD_VAR 0 5
8408: PUSH
8409: LD_INT 45
8411: PUSH
8412: LD_INT 46
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: ADD
8419: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8420: LD_ADDR_EXP 27
8424: PUSH
8425: LD_STRING Borodin
8427: PPUSH
8428: CALL_OW 25
8432: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8433: LD_EXP 27
8437: PPUSH
8438: LD_INT 28
8440: PPUSH
8441: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8445: LD_INT 28
8447: PPUSH
8448: CALL_OW 274
8452: PPUSH
8453: LD_INT 1
8455: PPUSH
8456: LD_INT 3000
8458: PUSH
8459: LD_INT 4000
8461: PUSH
8462: LD_INT 5000
8464: PUSH
8465: LD_INT 6000
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: PUSH
8474: LD_OWVAR 67
8478: ARRAY
8479: PPUSH
8480: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8484: LD_INT 28
8486: PPUSH
8487: CALL_OW 274
8491: PPUSH
8492: LD_INT 2
8494: PPUSH
8495: LD_INT 1000
8497: PPUSH
8498: CALL_OW 277
// if Difficulty > 2 then
8502: LD_OWVAR 67
8506: PUSH
8507: LD_INT 2
8509: GREATER
8510: IFFALSE 8628
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8512: LD_ADDR_VAR 0 4
8516: PUSH
8517: LD_INT 99
8519: PUSH
8520: LD_INT 130
8522: PUSH
8523: LD_INT 2
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 121
8533: PUSH
8534: LD_INT 127
8536: PUSH
8537: LD_INT 4
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: LIST
8544: PUSH
8545: LD_INT 117
8547: PUSH
8548: LD_INT 121
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: ST_TO_ADDR
// for i in tmp do
8564: LD_ADDR_VAR 0 2
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: FOR_IN
8575: IFFALSE 8626
// begin bc_type := b_turret ;
8577: LD_ADDR_OWVAR 42
8581: PUSH
8582: LD_INT 33
8584: ST_TO_ADDR
// bc_level := 6 ;
8585: LD_ADDR_OWVAR 43
8589: PUSH
8590: LD_INT 6
8592: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
8593: LD_VAR 0 2
8597: PUSH
8598: LD_INT 1
8600: ARRAY
8601: PPUSH
8602: LD_VAR 0 2
8606: PUSH
8607: LD_INT 2
8609: ARRAY
8610: PPUSH
8611: LD_VAR 0 2
8615: PUSH
8616: LD_INT 3
8618: ARRAY
8619: PPUSH
8620: CALL_OW 47
// end ;
8624: GO 8574
8626: POP
8627: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
8628: LD_ADDR_VAR 0 2
8632: PUSH
8633: LD_INT 22
8635: PUSH
8636: LD_INT 3
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: LD_INT 21
8645: PUSH
8646: LD_INT 3
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 69
8661: PUSH
8662: FOR_IN
8663: IFFALSE 8679
// SetBLevel ( i , 6 ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: LD_INT 6
8672: PPUSH
8673: CALL_OW 241
8677: GO 8662
8679: POP
8680: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8681: LD_ADDR_VAR 0 4
8685: PUSH
8686: LD_INT 22
8688: PUSH
8689: LD_INT 3
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 2
8698: PUSH
8699: LD_INT 30
8701: PUSH
8702: LD_INT 32
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 30
8711: PUSH
8712: LD_INT 33
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: ST_TO_ADDR
// for i in tmp do
8733: LD_ADDR_VAR 0 2
8737: PUSH
8738: LD_VAR 0 4
8742: PUSH
8743: FOR_IN
8744: IFFALSE 8776
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
8746: LD_VAR 0 2
8750: PPUSH
8751: LD_VAR 0 5
8755: PUSH
8756: LD_INT 1
8758: PPUSH
8759: LD_VAR 0 5
8763: PPUSH
8764: CALL_OW 12
8768: ARRAY
8769: PPUSH
8770: CALL_OW 431
8774: GO 8743
8776: POP
8777: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
8778: LD_ADDR_VAR 0 2
8782: PUSH
8783: LD_INT 22
8785: PUSH
8786: LD_INT 3
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 30
8795: PUSH
8796: LD_INT 32
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PPUSH
8807: CALL_OW 69
8811: PUSH
8812: FOR_IN
8813: IFFALSE 8862
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8815: LD_INT 0
8817: PPUSH
8818: LD_INT 5
8820: PUSH
8821: LD_INT 6
8823: PUSH
8824: LD_INT 7
8826: PUSH
8827: LD_INT 8
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: LD_OWVAR 67
8840: ARRAY
8841: PPUSH
8842: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8846: CALL_OW 44
8850: PPUSH
8851: LD_VAR 0 2
8855: PPUSH
8856: CALL_OW 52
// end ;
8860: GO 8812
8862: POP
8863: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
8864: LD_ADDR_VAR 0 2
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 3
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_INT 5
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: FOR_IN
8899: IFFALSE 8989
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
8901: LD_ADDR_VAR 0 3
8905: PUSH
8906: DOUBLE
8907: LD_INT 1
8909: DEC
8910: ST_TO_ADDR
8911: LD_INT 2
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: LD_INT 3
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: PUSH
8929: LD_OWVAR 67
8933: ARRAY
8934: PUSH
8935: FOR_TO
8936: IFFALSE 8985
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8938: LD_INT 0
8940: PPUSH
8941: LD_INT 5
8943: PUSH
8944: LD_INT 6
8946: PUSH
8947: LD_INT 7
8949: PUSH
8950: LD_INT 8
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: PUSH
8959: LD_OWVAR 67
8963: ARRAY
8964: PPUSH
8965: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8969: CALL_OW 44
8973: PPUSH
8974: LD_VAR 0 2
8978: PPUSH
8979: CALL_OW 52
// end ;
8983: GO 8935
8985: POP
8986: POP
// end ;
8987: GO 8898
8989: POP
8990: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
8991: LD_ADDR_VAR 0 2
8995: PUSH
8996: DOUBLE
8997: LD_INT 1
8999: DEC
9000: ST_TO_ADDR
9001: LD_INT 3
9003: PUSH
9004: LD_INT 4
9006: PUSH
9007: LD_INT 5
9009: PUSH
9010: LD_INT 5
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: PUSH
9019: LD_OWVAR 67
9023: ARRAY
9024: PUSH
9025: FOR_TO
9026: IFFALSE 9073
// begin PrepareEngineer ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9028: LD_INT 0
9030: PPUSH
9031: LD_INT 5
9033: PUSH
9034: LD_INT 6
9036: PUSH
9037: LD_INT 7
9039: PUSH
9040: LD_INT 8
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: PUSH
9049: LD_OWVAR 67
9053: ARRAY
9054: PPUSH
9055: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9059: CALL_OW 44
9063: PPUSH
9064: LD_INT 28
9066: PPUSH
9067: CALL_OW 52
// end ;
9071: GO 9025
9073: POP
9074: POP
// for i := 1 to 2 do
9075: LD_ADDR_VAR 0 2
9079: PUSH
9080: DOUBLE
9081: LD_INT 1
9083: DEC
9084: ST_TO_ADDR
9085: LD_INT 2
9087: PUSH
9088: FOR_TO
9089: IFFALSE 9123
// begin PrepareScientist ( false , 6 ) ;
9091: LD_INT 0
9093: PPUSH
9094: LD_INT 6
9096: PPUSH
9097: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9101: CALL_OW 44
9105: PPUSH
9106: LD_INT 81
9108: PPUSH
9109: LD_INT 93
9111: PPUSH
9112: CALL_OW 428
9116: PPUSH
9117: CALL_OW 52
// end ;
9121: GO 9088
9123: POP
9124: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9125: LD_INT 22
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: LD_INT 51
9136: PPUSH
9137: LD_INT 100
9139: PPUSH
9140: CALL 42362 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9144: CALL_OW 45
9148: PPUSH
9149: LD_INT 91
9151: PPUSH
9152: LD_INT 94
9154: PPUSH
9155: LD_INT 3
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 50
// for i := 1 to 2 do
9165: LD_ADDR_VAR 0 2
9169: PUSH
9170: DOUBLE
9171: LD_INT 1
9173: DEC
9174: ST_TO_ADDR
9175: LD_INT 2
9177: PUSH
9178: FOR_TO
9179: IFFALSE 9223
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9181: LD_INT 22
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: LD_INT 3
9189: PPUSH
9190: LD_INT 52
9192: PPUSH
9193: LD_INT 100
9195: PPUSH
9196: CALL 42362 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9200: CALL_OW 45
9204: PPUSH
9205: LD_INT 91
9207: PPUSH
9208: LD_INT 94
9210: PPUSH
9211: LD_INT 4
9213: PPUSH
9214: LD_INT 0
9216: PPUSH
9217: CALL_OW 50
// end ;
9221: GO 9178
9223: POP
9224: POP
// end ;
9225: LD_VAR 0 1
9229: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9230: LD_INT 0
9232: PPUSH
9233: PPUSH
9234: PPUSH
9235: PPUSH
9236: PPUSH
// uc_side := 3 ;
9237: LD_ADDR_OWVAR 20
9241: PUSH
9242: LD_INT 3
9244: ST_TO_ADDR
// uc_nation := 3 ;
9245: LD_ADDR_OWVAR 21
9249: PUSH
9250: LD_INT 3
9252: ST_TO_ADDR
// for i := 1 to 4 do
9253: LD_ADDR_VAR 0 2
9257: PUSH
9258: DOUBLE
9259: LD_INT 1
9261: DEC
9262: ST_TO_ADDR
9263: LD_INT 4
9265: PUSH
9266: FOR_TO
9267: IFFALSE 9394
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9269: LD_INT 22
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: LD_INT 1
9277: PPUSH
9278: LD_INT 42
9280: PUSH
9281: LD_INT 43
9283: PUSH
9284: LD_INT 44
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 1
9294: PPUSH
9295: LD_INT 3
9297: PPUSH
9298: CALL_OW 12
9302: ARRAY
9303: PPUSH
9304: LD_INT 40
9306: PPUSH
9307: CALL 42362 0 5
// veh := CreateVehicle ;
9311: LD_ADDR_VAR 0 4
9315: PUSH
9316: CALL_OW 45
9320: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9321: LD_VAR 0 4
9325: PPUSH
9326: LD_INT 5
9328: PPUSH
9329: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9333: LD_VAR 0 4
9337: PPUSH
9338: LD_INT 7
9340: PPUSH
9341: LD_INT 0
9343: PPUSH
9344: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9348: LD_INT 0
9350: PPUSH
9351: LD_INT 5
9353: PPUSH
9354: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9358: CALL_OW 44
9362: PPUSH
9363: LD_VAR 0 4
9367: PPUSH
9368: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9372: LD_ADDR_VAR 0 5
9376: PUSH
9377: LD_VAR 0 5
9381: PPUSH
9382: LD_VAR 0 4
9386: PPUSH
9387: CALL 74179 0 2
9391: ST_TO_ADDR
// end ;
9392: GO 9266
9394: POP
9395: POP
// for i := 1 to 3 do
9396: LD_ADDR_VAR 0 2
9400: PUSH
9401: DOUBLE
9402: LD_INT 1
9404: DEC
9405: ST_TO_ADDR
9406: LD_INT 3
9408: PUSH
9409: FOR_TO
9410: IFFALSE 9537
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9412: LD_INT 22
9414: PPUSH
9415: LD_INT 1
9417: PPUSH
9418: LD_INT 1
9420: PPUSH
9421: LD_INT 42
9423: PUSH
9424: LD_INT 43
9426: PUSH
9427: LD_INT 44
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 1
9437: PPUSH
9438: LD_INT 3
9440: PPUSH
9441: CALL_OW 12
9445: ARRAY
9446: PPUSH
9447: LD_INT 40
9449: PPUSH
9450: CALL 42362 0 5
// veh := CreateVehicle ;
9454: LD_ADDR_VAR 0 4
9458: PUSH
9459: CALL_OW 45
9463: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9464: LD_VAR 0 4
9468: PPUSH
9469: LD_INT 5
9471: PPUSH
9472: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9476: LD_VAR 0 4
9480: PPUSH
9481: LD_INT 8
9483: PPUSH
9484: LD_INT 0
9486: PPUSH
9487: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9491: LD_INT 0
9493: PPUSH
9494: LD_INT 5
9496: PPUSH
9497: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9501: CALL_OW 44
9505: PPUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9515: LD_ADDR_VAR 0 5
9519: PUSH
9520: LD_VAR 0 5
9524: PPUSH
9525: LD_VAR 0 4
9529: PPUSH
9530: CALL 74179 0 2
9534: ST_TO_ADDR
// end ;
9535: GO 9409
9537: POP
9538: POP
// for i := 1 to 2 do
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_INT 2
9551: PUSH
9552: FOR_TO
9553: IFFALSE 9612
// begin PrepareSoldier ( false , 5 ) ;
9555: LD_INT 0
9557: PPUSH
9558: LD_INT 5
9560: PPUSH
9561: CALL_OW 381
// un := CreateHuman ;
9565: LD_ADDR_VAR 0 3
9569: PUSH
9570: CALL_OW 44
9574: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
9575: LD_VAR 0 3
9579: PPUSH
9580: LD_INT 8
9582: PPUSH
9583: LD_INT 0
9585: PPUSH
9586: CALL_OW 49
// tmp := Join ( tmp , un ) ;
9590: LD_ADDR_VAR 0 5
9594: PUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: LD_VAR 0 3
9604: PPUSH
9605: CALL 74179 0 2
9609: ST_TO_ADDR
// end ;
9610: GO 9552
9612: POP
9613: POP
// for i in tmp do
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: LD_VAR 0 5
9623: PUSH
9624: FOR_IN
9625: IFFALSE 9644
// ComAgressiveMove ( i , 51 , 16 ) ;
9627: LD_VAR 0 2
9631: PPUSH
9632: LD_INT 51
9634: PPUSH
9635: LD_INT 16
9637: PPUSH
9638: CALL_OW 114
9642: GO 9624
9644: POP
9645: POP
// end ;
9646: LD_VAR 0 1
9650: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
9651: LD_EXP 29
9655: IFFALSE 10230
9657: GO 9659
9659: DISABLE
9660: LD_INT 0
9662: PPUSH
9663: PPUSH
9664: PPUSH
// begin enable ;
9665: ENABLE
// if not ruMobile then
9666: LD_EXP 29
9670: NOT
9671: IFFALSE 9675
// exit ;
9673: GO 10230
// for i in ruMobile do
9675: LD_ADDR_VAR 0 1
9679: PUSH
9680: LD_EXP 29
9684: PUSH
9685: FOR_IN
9686: IFFALSE 10228
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
9688: LD_VAR 0 1
9692: PPUSH
9693: CALL_OW 302
9697: NOT
9698: PUSH
9699: LD_VAR 0 1
9703: PPUSH
9704: CALL_OW 255
9708: PUSH
9709: LD_INT 3
9711: NONEQUAL
9712: OR
9713: IFFALSE 9733
// begin ruMobile := ruMobile diff i ;
9715: LD_ADDR_EXP 29
9719: PUSH
9720: LD_EXP 29
9724: PUSH
9725: LD_VAR 0 1
9729: DIFF
9730: ST_TO_ADDR
// continue ;
9731: GO 9685
// end ; if GetTag ( i ) = 300 then
9733: LD_VAR 0 1
9737: PPUSH
9738: CALL_OW 110
9742: PUSH
9743: LD_INT 300
9745: EQUAL
9746: IFFALSE 9861
// begin if GetFuel ( i ) < 50 then
9748: LD_VAR 0 1
9752: PPUSH
9753: CALL_OW 261
9757: PUSH
9758: LD_INT 50
9760: LESS
9761: IFFALSE 9820
// begin ComMoveXY ( i , 93 , 100 ) ;
9763: LD_VAR 0 1
9767: PPUSH
9768: LD_INT 93
9770: PPUSH
9771: LD_INT 100
9773: PPUSH
9774: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9778: LD_INT 35
9780: PPUSH
9781: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
9785: LD_VAR 0 1
9789: PPUSH
9790: LD_INT 93
9792: PPUSH
9793: LD_INT 100
9795: PPUSH
9796: CALL_OW 297
9800: PUSH
9801: LD_INT 4
9803: LESS
9804: IFFALSE 9778
// SetFuel ( i , 100 ) ;
9806: LD_VAR 0 1
9810: PPUSH
9811: LD_INT 100
9813: PPUSH
9814: CALL_OW 240
// end else
9818: GO 9861
// if not IsInArea ( i , ruParkingArea ) then
9820: LD_VAR 0 1
9824: PPUSH
9825: LD_INT 10
9827: PPUSH
9828: CALL_OW 308
9832: NOT
9833: IFFALSE 9849
// ComMoveToArea ( i , ruParkingArea ) else
9835: LD_VAR 0 1
9839: PPUSH
9840: LD_INT 10
9842: PPUSH
9843: CALL_OW 113
9847: GO 9861
// SetTag ( i , 301 ) ;
9849: LD_VAR 0 1
9853: PPUSH
9854: LD_INT 301
9856: PPUSH
9857: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
9861: LD_VAR 0 1
9865: PPUSH
9866: CALL_OW 110
9870: PUSH
9871: LD_INT 301
9873: EQUAL
9874: IFFALSE 10004
// begin if GetLives ( i ) < 1000 then
9876: LD_VAR 0 1
9880: PPUSH
9881: CALL_OW 256
9885: PUSH
9886: LD_INT 1000
9888: LESS
9889: IFFALSE 9981
// begin if not IsDrivenBy ( i ) then
9891: LD_VAR 0 1
9895: PPUSH
9896: CALL_OW 311
9900: NOT
9901: IFFALSE 9905
// continue ;
9903: GO 9685
// mech := IsDrivenBy ( i ) ;
9905: LD_ADDR_VAR 0 2
9909: PUSH
9910: LD_VAR 0 1
9914: PPUSH
9915: CALL_OW 311
9919: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9920: LD_VAR 0 2
9924: PPUSH
9925: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9929: LD_VAR 0 2
9933: PPUSH
9934: LD_VAR 0 1
9938: PPUSH
9939: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9943: LD_INT 35
9945: PPUSH
9946: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9950: LD_VAR 0 1
9954: PPUSH
9955: CALL_OW 256
9959: PUSH
9960: LD_INT 1000
9962: EQUAL
9963: IFFALSE 9943
// ComEnterUnit ( mech , i ) ;
9965: LD_VAR 0 2
9969: PPUSH
9970: LD_VAR 0 1
9974: PPUSH
9975: CALL_OW 120
// end else
9979: GO 10004
// if IsDrivenBy ( i ) then
9981: LD_VAR 0 1
9985: PPUSH
9986: CALL_OW 311
9990: IFFALSE 10004
// SetTag ( i , 0 ) ;
9992: LD_VAR 0 1
9996: PPUSH
9997: LD_INT 0
9999: PPUSH
10000: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10004: LD_VAR 0 1
10008: PPUSH
10009: CALL_OW 110
10013: PUSH
10014: LD_INT 300
10016: LESS
10017: IFFALSE 10226
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10019: LD_ADDR_VAR 0 3
10023: PUSH
10024: LD_INT 11
10026: PPUSH
10027: LD_INT 81
10029: PUSH
10030: LD_INT 3
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 70
10041: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 256
10051: PUSH
10052: LD_INT 650
10054: LESS
10055: IFFALSE 10080
// begin ComStop ( i ) ;
10057: LD_VAR 0 1
10061: PPUSH
10062: CALL_OW 141
// SetTag ( i , 300 ) ;
10066: LD_VAR 0 1
10070: PPUSH
10071: LD_INT 300
10073: PPUSH
10074: CALL_OW 109
// continue ;
10078: GO 9685
// end ; if enemy then
10080: LD_VAR 0 3
10084: IFFALSE 10124
// begin if not HasTask ( i ) then
10086: LD_VAR 0 1
10090: PPUSH
10091: CALL_OW 314
10095: NOT
10096: IFFALSE 10122
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10098: LD_VAR 0 1
10102: PPUSH
10103: LD_VAR 0 3
10107: PPUSH
10108: LD_VAR 0 1
10112: PPUSH
10113: CALL_OW 74
10117: PPUSH
10118: CALL_OW 115
// end else
10122: GO 10226
// if ruMobile > 2 then
10124: LD_EXP 29
10128: PUSH
10129: LD_INT 2
10131: GREATER
10132: IFFALSE 10226
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10134: LD_ADDR_VAR 0 3
10138: PUSH
10139: LD_INT 81
10141: PUSH
10142: LD_INT 3
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PPUSH
10149: CALL_OW 69
10153: ST_TO_ADDR
// if enemy then
10154: LD_VAR 0 3
10158: IFFALSE 10226
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_INT 116
10167: PUSH
10168: LD_INT 95
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: LD_INT 84
10177: PUSH
10178: LD_INT 68
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: LD_INT 58
10187: PUSH
10188: LD_INT 53
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 44
10197: PUSH
10198: LD_INT 35
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: LD_INT 45
10207: PUSH
10208: LD_INT 23
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PPUSH
10222: CALL 76775 0 2
// end ; end ; end ;
10226: GO 9685
10228: POP
10229: POP
// end ;
10230: PPOPN 3
10232: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10233: LD_INT 3
10235: PUSH
10236: LD_INT 22
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: LD_INT 32
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PPUSH
10264: CALL_OW 69
10268: IFFALSE 10352
10270: GO 10272
10272: DISABLE
10273: LD_INT 0
10275: PPUSH
// begin enable ;
10276: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10277: LD_ADDR_VAR 0 1
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: LD_INT 22
10287: PUSH
10288: LD_INT 1
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 32
10301: PUSH
10302: LD_INT 1
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 69
10317: PUSH
10318: FOR_IN
10319: IFFALSE 10350
// if GetFuel ( i ) < 3 then
10321: LD_VAR 0 1
10325: PPUSH
10326: CALL_OW 261
10330: PUSH
10331: LD_INT 3
10333: LESS
10334: IFFALSE 10348
// SetFuel ( i , 3 ) ;
10336: LD_VAR 0 1
10340: PPUSH
10341: LD_INT 3
10343: PPUSH
10344: CALL_OW 240
10348: GO 10318
10350: POP
10351: POP
// end ;
10352: PPOPN 1
10354: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10355: LD_INT 29
10357: PPUSH
10358: CALL_OW 302
10362: PUSH
10363: LD_INT 29
10365: PPUSH
10366: CALL_OW 461
10370: PUSH
10371: LD_INT 2
10373: EQUAL
10374: AND
10375: IFFALSE 10608
10377: GO 10379
10379: DISABLE
10380: LD_INT 0
10382: PPUSH
10383: PPUSH
// begin enable ;
10384: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10385: LD_ADDR_VAR 0 1
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 22
10395: PUSH
10396: LD_INT 23
10398: PUSH
10399: LD_INT 24
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: PUSH
10408: LD_INT 1
10410: PPUSH
10411: LD_INT 4
10413: PPUSH
10414: CALL_OW 12
10418: ARRAY
10419: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10420: LD_ADDR_VAR 0 2
10424: PUSH
10425: LD_INT 42
10427: PUSH
10428: LD_INT 44
10430: PUSH
10431: LD_INT 43
10433: PUSH
10434: LD_INT 46
10436: PUSH
10437: LD_INT 45
10439: PUSH
10440: LD_INT 46
10442: PUSH
10443: LD_INT 45
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: PUSH
10455: LD_OWVAR 67
10459: PUSH
10460: LD_INT 0
10462: PPUSH
10463: LD_INT 3
10465: PPUSH
10466: CALL_OW 12
10470: PLUS
10471: ARRAY
10472: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10473: LD_VAR 0 1
10477: PUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 22
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: IN
10488: PUSH
10489: LD_VAR 0 2
10493: PUSH
10494: LD_INT 46
10496: EQUAL
10497: AND
10498: IFFALSE 10527
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10500: LD_ADDR_VAR 0 2
10504: PUSH
10505: LD_INT 44
10507: PUSH
10508: LD_INT 45
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 1
10517: PPUSH
10518: LD_INT 2
10520: PPUSH
10521: CALL_OW 12
10525: ARRAY
10526: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
10527: LD_OWVAR 1
10531: PUSH
10532: LD_INT 31500
10534: PUSH
10535: LD_INT 27300
10537: PUSH
10538: LD_INT 23100
10540: PUSH
10541: LD_INT 21000
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: PUSH
10550: LD_OWVAR 67
10554: ARRAY
10555: LESS
10556: IFFALSE 10585
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
10558: LD_ADDR_VAR 0 2
10562: PUSH
10563: LD_INT 44
10565: PUSH
10566: LD_INT 43
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 1
10575: PPUSH
10576: LD_INT 2
10578: PPUSH
10579: CALL_OW 12
10583: ARRAY
10584: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
10585: LD_INT 29
10587: PPUSH
10588: LD_VAR 0 1
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: LD_INT 1
10598: PPUSH
10599: LD_VAR 0 2
10603: PPUSH
10604: CALL_OW 185
// end ;
10608: PPOPN 2
10610: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
10611: LD_INT 28
10613: PPUSH
10614: CALL_OW 302
10618: IFFALSE 11457
10620: GO 10622
10622: DISABLE
10623: LD_INT 0
10625: PPUSH
10626: PPUSH
10627: PPUSH
10628: PPUSH
10629: PPUSH
10630: PPUSH
10631: PPUSH
10632: PPUSH
// begin enable ;
10633: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
10634: LD_ADDR_VAR 0 3
10638: PUSH
10639: LD_INT 12
10641: PPUSH
10642: LD_INT 3
10644: PUSH
10645: LD_INT 24
10647: PUSH
10648: LD_INT 1000
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 21
10661: PUSH
10662: LD_INT 3
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 70
10677: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10678: LD_ADDR_VAR 0 4
10682: PUSH
10683: LD_INT 22
10685: PUSH
10686: LD_INT 3
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 25
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PPUSH
10707: CALL_OW 69
10711: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
10712: LD_ADDR_VAR 0 5
10716: PUSH
10717: LD_INT 22
10719: PUSH
10720: LD_INT 3
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 34
10729: PUSH
10730: LD_INT 52
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
10746: LD_ADDR_VAR 0 7
10750: PUSH
10751: LD_INT 22
10753: PUSH
10754: LD_INT 3
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 4
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: CALL_OW 69
10779: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
10780: LD_ADDR_VAR 0 8
10784: PUSH
10785: LD_INT 81
10787: PPUSH
10788: LD_INT 93
10790: PPUSH
10791: CALL_OW 428
10795: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
10796: LD_VAR 0 7
10800: PUSH
10801: LD_VAR 0 4
10805: PPUSH
10806: LD_INT 120
10808: PUSH
10809: LD_INT 2
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PPUSH
10816: CALL_OW 72
10820: AND
10821: IFFALSE 10834
// ComExitAll ( sci ) else
10823: LD_VAR 0 7
10827: PPUSH
10828: CALL 74650 0 1
10832: GO 10907
// if sci then
10834: LD_VAR 0 7
10838: IFFALSE 10907
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
10840: LD_VAR 0 7
10844: PPUSH
10845: LD_INT 3
10847: PUSH
10848: LD_INT 54
10850: PUSH
10851: EMPTY
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PPUSH
10858: CALL_OW 72
10862: PUSH
10863: LD_VAR 0 8
10867: PPUSH
10868: CALL_OW 302
10872: AND
10873: IFFALSE 10907
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
10875: LD_VAR 0 7
10879: PPUSH
10880: LD_INT 3
10882: PUSH
10883: LD_INT 54
10885: PUSH
10886: EMPTY
10887: LIST
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PPUSH
10893: CALL_OW 72
10897: PPUSH
10898: LD_VAR 0 8
10902: PPUSH
10903: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
10907: LD_VAR 0 5
10911: PPUSH
10912: LD_INT 50
10914: PUSH
10915: EMPTY
10916: LIST
10917: PPUSH
10918: CALL_OW 72
10922: PUSH
10923: LD_VAR 0 3
10927: AND
10928: IFFALSE 10959
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
10930: LD_VAR 0 5
10934: PPUSH
10935: LD_INT 50
10937: PUSH
10938: EMPTY
10939: LIST
10940: PPUSH
10941: CALL_OW 72
10945: PPUSH
10946: LD_VAR 0 3
10950: PUSH
10951: LD_INT 1
10953: ARRAY
10954: PPUSH
10955: CALL_OW 130
// if eng then
10959: LD_VAR 0 4
10963: IFFALSE 11457
// begin for i in eng do
10965: LD_ADDR_VAR 0 1
10969: PUSH
10970: LD_VAR 0 4
10974: PUSH
10975: FOR_IN
10976: IFFALSE 11455
// begin tag := GetTag ( i ) ;
10978: LD_ADDR_VAR 0 6
10982: PUSH
10983: LD_VAR 0 1
10987: PPUSH
10988: CALL_OW 110
10992: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
10993: LD_VAR 0 3
10997: NOT
10998: PUSH
10999: LD_EXP 30
11003: NOT
11004: AND
11005: PUSH
11006: LD_VAR 0 6
11010: PUSH
11011: LD_INT 1
11013: EQUAL
11014: AND
11015: IFFALSE 11041
// begin SetTag ( i , 0 ) ;
11017: LD_VAR 0 1
11021: PPUSH
11022: LD_INT 0
11024: PPUSH
11025: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
11029: LD_VAR 0 1
11033: PPUSH
11034: LD_INT 28
11036: PPUSH
11037: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
11041: LD_VAR 0 3
11045: PUSH
11046: LD_EXP 30
11050: OR
11051: PUSH
11052: LD_VAR 0 6
11056: PUSH
11057: LD_INT 0
11059: EQUAL
11060: AND
11061: IFFALSE 11075
// SetTag ( i , 1 ) ;
11063: LD_VAR 0 1
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
11075: LD_VAR 0 1
11079: PPUSH
11080: CALL_OW 310
11084: PUSH
11085: LD_VAR 0 6
11089: PUSH
11090: LD_INT 1
11092: EQUAL
11093: AND
11094: IFFALSE 11105
// ComExit ( i ) ;
11096: LD_VAR 0 1
11100: PPUSH
11101: CALL 74567 0 1
// if GetLives ( i ) < 500 and tag = 1 then
11105: LD_VAR 0 1
11109: PPUSH
11110: CALL_OW 256
11114: PUSH
11115: LD_INT 500
11117: LESS
11118: PUSH
11119: LD_VAR 0 6
11123: PUSH
11124: LD_INT 1
11126: EQUAL
11127: AND
11128: IFFALSE 11142
// SetTag ( i , 2 ) ;
11130: LD_VAR 0 1
11134: PPUSH
11135: LD_INT 2
11137: PPUSH
11138: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
11142: LD_VAR 0 1
11146: PPUSH
11147: CALL_OW 256
11151: PUSH
11152: LD_INT 1000
11154: EQUAL
11155: PUSH
11156: LD_VAR 0 6
11160: PUSH
11161: LD_INT 2
11163: EQUAL
11164: AND
11165: IFFALSE 11179
// SetTag ( i , 1 ) ;
11167: LD_VAR 0 1
11171: PPUSH
11172: LD_INT 1
11174: PPUSH
11175: CALL_OW 109
// if tag = 2 then
11179: LD_VAR 0 6
11183: PUSH
11184: LD_INT 2
11186: EQUAL
11187: IFFALSE 11234
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11189: LD_VAR 0 1
11193: PPUSH
11194: LD_INT 84
11196: PPUSH
11197: LD_INT 93
11199: PPUSH
11200: CALL_OW 297
11204: PUSH
11205: LD_INT 6
11207: GREATER
11208: IFFALSE 11234
// begin ComMoveXY ( i , 84 , 93 ) ;
11210: LD_VAR 0 1
11214: PPUSH
11215: LD_INT 84
11217: PPUSH
11218: LD_INT 93
11220: PPUSH
11221: CALL_OW 111
// AddComHold ( i ) ;
11225: LD_VAR 0 1
11229: PPUSH
11230: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
11234: LD_VAR 0 1
11238: PPUSH
11239: LD_INT 11
11241: PPUSH
11242: CALL_OW 308
11246: IFFALSE 11260
// ComMoveToArea ( i , ruBaseArea ) ;
11248: LD_VAR 0 1
11252: PPUSH
11253: LD_INT 12
11255: PPUSH
11256: CALL_OW 113
// if tag = 1 then
11260: LD_VAR 0 6
11264: PUSH
11265: LD_INT 1
11267: EQUAL
11268: IFFALSE 11453
// begin if b then
11270: LD_VAR 0 3
11274: IFFALSE 11302
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
11276: LD_VAR 0 1
11280: PPUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: LD_VAR 0 1
11290: PPUSH
11291: CALL_OW 74
11295: PPUSH
11296: CALL_OW 130
11300: GO 11453
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11302: LD_EXP 30
11306: PUSH
11307: LD_INT 11
11309: PPUSH
11310: LD_INT 81
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 70
11324: PUSH
11325: LD_INT 0
11327: EQUAL
11328: AND
11329: PUSH
11330: LD_INT 28
11332: PPUSH
11333: LD_EXP 30
11337: PUSH
11338: LD_INT 1
11340: ARRAY
11341: PUSH
11342: LD_INT 1
11344: ARRAY
11345: PPUSH
11346: LD_EXP 30
11350: PUSH
11351: LD_INT 1
11353: ARRAY
11354: PUSH
11355: LD_INT 2
11357: ARRAY
11358: PPUSH
11359: LD_EXP 30
11363: PUSH
11364: LD_INT 1
11366: ARRAY
11367: PUSH
11368: LD_INT 3
11370: ARRAY
11371: PPUSH
11372: LD_EXP 30
11376: PUSH
11377: LD_INT 1
11379: ARRAY
11380: PUSH
11381: LD_INT 4
11383: ARRAY
11384: PPUSH
11385: CALL 50587 0 5
11389: AND
11390: IFFALSE 11453
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11392: LD_VAR 0 1
11396: PPUSH
11397: LD_EXP 30
11401: PUSH
11402: LD_INT 1
11404: ARRAY
11405: PUSH
11406: LD_INT 1
11408: ARRAY
11409: PPUSH
11410: LD_EXP 30
11414: PUSH
11415: LD_INT 1
11417: ARRAY
11418: PUSH
11419: LD_INT 2
11421: ARRAY
11422: PPUSH
11423: LD_EXP 30
11427: PUSH
11428: LD_INT 1
11430: ARRAY
11431: PUSH
11432: LD_INT 3
11434: ARRAY
11435: PPUSH
11436: LD_EXP 30
11440: PUSH
11441: LD_INT 1
11443: ARRAY
11444: PUSH
11445: LD_INT 4
11447: ARRAY
11448: PPUSH
11449: CALL_OW 145
// end ; end ;
11453: GO 10975
11455: POP
11456: POP
// end ; end ;
11457: PPOPN 8
11459: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
11460: LD_INT 0
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
11468: LD_ADDR_VAR 0 3
11472: PUSH
11473: DOUBLE
11474: LD_INT 1
11476: DEC
11477: ST_TO_ADDR
11478: LD_INT 3
11480: PUSH
11481: LD_INT 4
11483: PUSH
11484: LD_INT 5
11486: PUSH
11487: LD_INT 6
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: PUSH
11496: LD_OWVAR 67
11500: ARRAY
11501: PUSH
11502: LD_VAR 0 1
11506: PLUS
11507: PUSH
11508: FOR_TO
11509: IFFALSE 11826
// begin uc_side := 6 ;
11511: LD_ADDR_OWVAR 20
11515: PUSH
11516: LD_INT 6
11518: ST_TO_ADDR
// uc_nation := 3 ;
11519: LD_ADDR_OWVAR 21
11523: PUSH
11524: LD_INT 3
11526: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11527: LD_ADDR_VAR 0 6
11531: PUSH
11532: LD_INT 21
11534: PUSH
11535: LD_INT 22
11537: PUSH
11538: LD_INT 23
11540: PUSH
11541: LD_INT 24
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 1
11552: PPUSH
11553: LD_INT 4
11555: PPUSH
11556: CALL_OW 12
11560: ARRAY
11561: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11562: LD_ADDR_VAR 0 7
11566: PUSH
11567: LD_INT 42
11569: PUSH
11570: LD_INT 44
11572: PUSH
11573: LD_INT 43
11575: PUSH
11576: LD_INT 46
11578: PUSH
11579: LD_INT 45
11581: PUSH
11582: LD_INT 46
11584: PUSH
11585: LD_INT 45
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_OWVAR 67
11601: PUSH
11602: LD_INT 0
11604: PPUSH
11605: LD_INT 3
11607: PPUSH
11608: CALL_OW 12
11612: PLUS
11613: ARRAY
11614: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11615: LD_VAR 0 6
11619: PUSH
11620: LD_INT 21
11622: PUSH
11623: LD_INT 22
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: IN
11630: PUSH
11631: LD_VAR 0 7
11635: PUSH
11636: LD_INT 46
11638: EQUAL
11639: AND
11640: IFFALSE 11669
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11642: LD_ADDR_VAR 0 7
11646: PUSH
11647: LD_INT 44
11649: PUSH
11650: LD_INT 45
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 1
11659: PPUSH
11660: LD_INT 2
11662: PPUSH
11663: CALL_OW 12
11667: ARRAY
11668: ST_TO_ADDR
// if tick < [ 17 17$00 , 15 15$00 , 13 13$00 , 11 11$00 ] [ Difficulty ] then
11669: LD_OWVAR 1
11673: PUSH
11674: LD_INT 35700
11676: PUSH
11677: LD_INT 31500
11679: PUSH
11680: LD_INT 27300
11682: PUSH
11683: LD_INT 23100
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: LD_OWVAR 67
11696: ARRAY
11697: LESS
11698: IFFALSE 11731
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
11700: LD_ADDR_VAR 0 7
11704: PUSH
11705: LD_INT 44
11707: PUSH
11708: LD_INT 43
11710: PUSH
11711: LD_INT 42
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 1
11721: PPUSH
11722: LD_INT 3
11724: PPUSH
11725: CALL_OW 12
11729: ARRAY
11730: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
11731: LD_VAR 0 6
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: LD_INT 3
11741: PPUSH
11742: LD_VAR 0 7
11746: PPUSH
11747: LD_INT 90
11749: PPUSH
11750: CALL 42362 0 5
// un := CreateVehicle ;
11754: LD_ADDR_VAR 0 4
11758: PUSH
11759: CALL_OW 45
11763: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
11764: LD_VAR 0 4
11768: PPUSH
11769: LD_INT 140
11771: PPUSH
11772: LD_INT 146
11774: PPUSH
11775: LD_INT 0
11777: PPUSH
11778: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
11782: LD_VAR 0 4
11786: PPUSH
11787: LD_INT 131
11789: PPUSH
11790: LD_INT 128
11792: PPUSH
11793: CALL_OW 111
// wait ( 0 0$3 ) ;
11797: LD_INT 105
11799: PPUSH
11800: CALL_OW 67
// tmp := Join ( tmp , un ) ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_VAR 0 5
11813: PPUSH
11814: LD_VAR 0 4
11818: PPUSH
11819: CALL 74179 0 2
11823: ST_TO_ADDR
// end ;
11824: GO 11508
11826: POP
11827: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
11828: LD_ADDR_EXP 31
11832: PUSH
11833: LD_EXP 31
11837: PPUSH
11838: LD_VAR 0 5
11842: PPUSH
11843: CALL 74216 0 2
11847: ST_TO_ADDR
// end ;
11848: LD_VAR 0 2
11852: RET
// every 0 0$3 trigger russianAttackers do
11853: LD_EXP 31
11857: IFFALSE 11940
11859: GO 11861
11861: DISABLE
// begin enable ;
11862: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
11863: LD_EXP 31
11867: PPUSH
11868: LD_INT 126
11870: PUSH
11871: LD_INT 108
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 107
11880: PUSH
11881: LD_INT 85
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 82
11890: PUSH
11891: LD_INT 62
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 73
11900: PUSH
11901: LD_INT 46
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 62
11910: PUSH
11911: LD_INT 31
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 52
11920: PUSH
11921: LD_INT 17
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: PPUSH
11936: CALL 76775 0 2
// end ; end_of_file
11940: END
// on SailEvent ( event ) do begin if event = 1 then
11941: LD_VAR 0 1
11945: PUSH
11946: LD_INT 1
11948: EQUAL
11949: IFFALSE 11964
// PrepareRussianAttack ( Difficulty + 3 ) ;
11951: LD_OWVAR 67
11955: PUSH
11956: LD_INT 3
11958: PLUS
11959: PPUSH
11960: CALL 11460 0 1
// end ;
11964: PPOPN 1
11966: END
// on UnitDestroyed ( un ) do var tmp , chassis , weapon , btype ;
11967: LD_INT 0
11969: PPUSH
11970: PPUSH
11971: PPUSH
11972: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL 32858 0 1
// if un = JMM then
11982: LD_VAR 0 1
11986: PUSH
11987: LD_EXP 10
11991: EQUAL
11992: IFFALSE 12001
// YouLost ( JMM ) ;
11994: LD_STRING JMM
11996: PPUSH
11997: CALL_OW 104
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12001: LD_VAR 0 1
12005: PPUSH
12006: CALL_OW 255
12010: PUSH
12011: LD_INT 1
12013: EQUAL
12014: PUSH
12015: LD_VAR 0 1
12019: PPUSH
12020: CALL_OW 266
12024: PUSH
12025: LD_INT 0
12027: PUSH
12028: LD_INT 1
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: IN
12035: AND
12036: IFFALSE 12045
// YouLost ( Destroyed ) ;
12038: LD_STRING Destroyed
12040: PPUSH
12041: CALL_OW 104
// if un in ruMobile then
12045: LD_VAR 0 1
12049: PUSH
12050: LD_EXP 29
12054: IN
12055: IFFALSE 12073
// ruMobile := ruMobile diff un ;
12057: LD_ADDR_EXP 29
12061: PUSH
12062: LD_EXP 29
12066: PUSH
12067: LD_VAR 0 1
12071: DIFF
12072: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 255
12082: PUSH
12083: LD_INT 3
12085: EQUAL
12086: IFFALSE 12664
// begin if GetType ( un ) = unit_building then
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 247
12097: PUSH
12098: LD_INT 3
12100: EQUAL
12101: IFFALSE 12237
// begin btype := GetBType ( un ) ;
12103: LD_ADDR_VAR 0 5
12107: PUSH
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 266
12117: ST_TO_ADDR
// if btype = b_warehouse then
12118: LD_VAR 0 5
12122: PUSH
12123: LD_INT 1
12125: EQUAL
12126: IFFALSE 12136
// btype := b_depot ;
12128: LD_ADDR_VAR 0 5
12132: PUSH
12133: LD_INT 0
12135: ST_TO_ADDR
// if btype = b_barracks then
12136: LD_VAR 0 5
12140: PUSH
12141: LD_INT 5
12143: EQUAL
12144: IFFALSE 12154
// btype := b_armoury ;
12146: LD_ADDR_VAR 0 5
12150: PUSH
12151: LD_INT 4
12153: ST_TO_ADDR
// if btype = b_lab_full then
12154: LD_VAR 0 5
12158: PUSH
12159: LD_INT 8
12161: EQUAL
12162: IFFALSE 12172
// btype := b_lab ;
12164: LD_ADDR_VAR 0 5
12168: PUSH
12169: LD_INT 6
12171: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12172: LD_ADDR_EXP 30
12176: PUSH
12177: LD_EXP 30
12181: PPUSH
12182: LD_EXP 30
12186: PUSH
12187: LD_INT 1
12189: PLUS
12190: PPUSH
12191: LD_VAR 0 5
12195: PUSH
12196: LD_VAR 0 1
12200: PPUSH
12201: CALL_OW 250
12205: PUSH
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 251
12215: PUSH
12216: LD_VAR 0 1
12220: PPUSH
12221: CALL_OW 254
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 1
12236: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12237: LD_VAR 0 1
12241: PPUSH
12242: CALL_OW 247
12246: PUSH
12247: LD_INT 2
12249: EQUAL
12250: IFFALSE 12525
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
12252: LD_VAR 0 1
12256: PPUSH
12257: CALL_OW 264
12261: PUSH
12262: LD_INT 52
12264: PUSH
12265: LD_INT 51
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: IN
12272: IFFALSE 12302
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
12274: LD_INT 29
12276: PPUSH
12277: LD_INT 22
12279: PPUSH
12280: LD_INT 1
12282: PPUSH
12283: LD_INT 3
12285: PPUSH
12286: LD_VAR 0 1
12290: PPUSH
12291: CALL_OW 264
12295: PPUSH
12296: CALL_OW 185
// end else
12300: GO 12525
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12302: LD_ADDR_VAR 0 3
12306: PUSH
12307: LD_INT 21
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_INT 23
12315: PUSH
12316: LD_INT 24
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: PUSH
12325: LD_INT 1
12327: PPUSH
12328: LD_INT 4
12330: PPUSH
12331: CALL_OW 12
12335: ARRAY
12336: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12337: LD_ADDR_VAR 0 4
12341: PUSH
12342: LD_INT 42
12344: PUSH
12345: LD_INT 44
12347: PUSH
12348: LD_INT 43
12350: PUSH
12351: LD_INT 46
12353: PUSH
12354: LD_INT 45
12356: PUSH
12357: LD_INT 46
12359: PUSH
12360: LD_INT 45
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: LD_OWVAR 67
12376: PUSH
12377: LD_INT 0
12379: PPUSH
12380: LD_INT 3
12382: PPUSH
12383: CALL_OW 12
12387: PLUS
12388: ARRAY
12389: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12390: LD_VAR 0 3
12394: PUSH
12395: LD_INT 21
12397: PUSH
12398: LD_INT 22
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: IN
12405: PUSH
12406: LD_VAR 0 4
12410: PUSH
12411: LD_INT 46
12413: EQUAL
12414: AND
12415: IFFALSE 12444
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12417: LD_ADDR_VAR 0 4
12421: PUSH
12422: LD_INT 44
12424: PUSH
12425: LD_INT 45
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 1
12434: PPUSH
12435: LD_INT 2
12437: PPUSH
12438: CALL_OW 12
12442: ARRAY
12443: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
12444: LD_OWVAR 1
12448: PUSH
12449: LD_INT 31500
12451: PUSH
12452: LD_INT 27300
12454: PUSH
12455: LD_INT 23100
12457: PUSH
12458: LD_INT 21000
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: PUSH
12467: LD_OWVAR 67
12471: ARRAY
12472: LESS
12473: IFFALSE 12502
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
12475: LD_ADDR_VAR 0 4
12479: PUSH
12480: LD_INT 44
12482: PUSH
12483: LD_INT 43
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 1
12492: PPUSH
12493: LD_INT 2
12495: PPUSH
12496: CALL_OW 12
12500: ARRAY
12501: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
12502: LD_INT 29
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_VAR 0 4
12520: PPUSH
12521: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
12525: LD_VAR 0 1
12529: PPUSH
12530: CALL_OW 257
12534: PUSH
12535: LD_INT 3
12537: EQUAL
12538: IFFALSE 12664
// begin if ruMechCounter = 0 or not IsOk ( ruFac ) then
12540: LD_EXP 28
12544: PUSH
12545: LD_INT 0
12547: EQUAL
12548: PUSH
12549: LD_INT 29
12551: PPUSH
12552: CALL_OW 302
12556: NOT
12557: OR
12558: IFFALSE 12562
// exit ;
12560: GO 12664
// ruMechCounter := Dec ( ruMechCounter ) ;
12562: LD_ADDR_EXP 28
12566: PUSH
12567: LD_EXP 28
12571: PPUSH
12572: CALL 75554 0 1
12576: ST_TO_ADDR
// uc_side := 3 ;
12577: LD_ADDR_OWVAR 20
12581: PUSH
12582: LD_INT 3
12584: ST_TO_ADDR
// uc_nation := 3 ;
12585: LD_ADDR_OWVAR 21
12589: PUSH
12590: LD_INT 3
12592: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
12593: LD_INT 0
12595: PPUSH
12596: LD_INT 5
12598: PUSH
12599: LD_INT 6
12601: PUSH
12602: LD_INT 7
12604: PUSH
12605: LD_INT 8
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: PUSH
12614: LD_OWVAR 67
12618: ARRAY
12619: PPUSH
12620: CALL_OW 383
// tmp := CreateHuman ;
12624: LD_ADDR_VAR 0 2
12628: PUSH
12629: CALL_OW 44
12633: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
12634: LD_VAR 0 2
12638: PPUSH
12639: LD_INT 145
12641: PPUSH
12642: LD_INT 133
12644: PPUSH
12645: LD_INT 0
12647: PPUSH
12648: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
12652: LD_VAR 0 2
12656: PPUSH
12657: LD_INT 29
12659: PPUSH
12660: CALL_OW 120
// end ; end ; end ;
12664: PPOPN 5
12666: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
12667: LD_VAR 0 1
12671: PPUSH
12672: CALL_OW 255
12676: PUSH
12677: LD_INT 4
12679: EQUAL
12680: IFFALSE 12697
// ComMoveXY ( driver , 40 , 47 ) ;
12682: LD_VAR 0 1
12686: PPUSH
12687: LD_INT 40
12689: PPUSH
12690: LD_INT 47
12692: PPUSH
12693: CALL_OW 111
// if GetSide ( driver ) = 3 then
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL_OW 255
12706: PUSH
12707: LD_INT 3
12709: EQUAL
12710: IFFALSE 12934
// begin ComMoveXY ( driver , 90 , 97 ) ;
12712: LD_VAR 0 1
12716: PPUSH
12717: LD_INT 90
12719: PPUSH
12720: LD_INT 97
12722: PPUSH
12723: CALL_OW 111
// if IsOk ( ruFac ) then
12727: LD_INT 29
12729: PPUSH
12730: CALL_OW 302
12734: IFFALSE 12858
// begin repeat wait ( 0 0$1 ) ;
12736: LD_INT 35
12738: PPUSH
12739: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
12743: LD_INT 29
12745: PPUSH
12746: CALL_OW 313
12750: PUSH
12751: LD_INT 6
12753: LESS
12754: PUSH
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL_OW 301
12764: OR
12765: IFFALSE 12736
// if IsDead ( driver ) then
12767: LD_VAR 0 1
12771: PPUSH
12772: CALL_OW 301
12776: IFFALSE 12780
// exit ;
12778: GO 12934
// repeat wait ( 0 0$10 ) ;
12780: LD_INT 350
12782: PPUSH
12783: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
12787: LD_VAR 0 1
12791: PPUSH
12792: CALL_OW 314
12796: NOT
12797: PUSH
12798: LD_INT 29
12800: PPUSH
12801: CALL_OW 313
12805: PUSH
12806: LD_INT 6
12808: LESS
12809: AND
12810: IFFALSE 12824
// ComEnterUnit ( driver , ruFac ) ;
12812: LD_VAR 0 1
12816: PPUSH
12817: LD_INT 29
12819: PPUSH
12820: CALL_OW 120
// until not IsOk ( ruFac ) or IsDead ( driver ) or IsInUnit ( driver ) ;
12824: LD_INT 29
12826: PPUSH
12827: CALL_OW 302
12831: NOT
12832: PUSH
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 301
12842: OR
12843: PUSH
12844: LD_VAR 0 1
12848: PPUSH
12849: CALL_OW 310
12853: OR
12854: IFFALSE 12780
// end else
12856: GO 12934
// begin ComMoveXY ( driver , 142 , 148 ) ;
12858: LD_VAR 0 1
12862: PPUSH
12863: LD_INT 142
12865: PPUSH
12866: LD_INT 148
12868: PPUSH
12869: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12873: LD_INT 35
12875: PPUSH
12876: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 301
12889: PUSH
12890: LD_VAR 0 1
12894: PPUSH
12895: LD_INT 142
12897: PPUSH
12898: LD_INT 148
12900: PPUSH
12901: CALL_OW 307
12905: OR
12906: IFFALSE 12873
// if IsAt ( driver , 142 , 148 ) then
12908: LD_VAR 0 1
12912: PPUSH
12913: LD_INT 142
12915: PPUSH
12916: LD_INT 148
12918: PPUSH
12919: CALL_OW 307
12923: IFFALSE 12934
// RemoveUnit ( driver ) ;
12925: LD_VAR 0 1
12929: PPUSH
12930: CALL_OW 64
// end ; end ; end ;
12934: PPOPN 4
12936: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
12937: LD_VAR 0 2
12941: PPUSH
12942: CALL_OW 257
12946: PUSH
12947: LD_INT 3
12949: EQUAL
12950: PUSH
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 255
12960: PUSH
12961: LD_INT 3
12963: EQUAL
12964: AND
12965: PUSH
12966: LD_VAR 0 1
12970: PUSH
12971: LD_INT 29
12973: EQUAL
12974: AND
12975: IFFALSE 12989
// SetLives ( un , 1000 ) ;
12977: LD_VAR 0 2
12981: PPUSH
12982: LD_INT 1000
12984: PPUSH
12985: CALL_OW 234
// end ;
12989: PPOPN 2
12991: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
12992: LD_INT 0
12994: PPUSH
12995: PPUSH
// begin if GetSide ( b ) = 3 then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 255
13005: PUSH
13006: LD_INT 3
13008: EQUAL
13009: IFFALSE 13240
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13011: LD_VAR 0 1
13015: PPUSH
13016: CALL_OW 266
13020: PUSH
13021: LD_INT 32
13023: PUSH
13024: LD_INT 5
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: IN
13031: IFFALSE 13240
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13033: LD_ADDR_VAR 0 4
13037: PUSH
13038: LD_INT 22
13040: PUSH
13041: LD_INT 3
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 50
13050: PUSH
13051: EMPTY
13052: LIST
13053: PUSH
13054: LD_INT 30
13056: PUSH
13057: LD_INT 32
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 58
13066: PUSH
13067: EMPTY
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: PPUSH
13076: CALL_OW 69
13080: ST_TO_ADDR
// if tmp then
13081: LD_VAR 0 4
13085: IFFALSE 13107
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13087: LD_VAR 0 2
13091: PPUSH
13092: LD_VAR 0 4
13096: PUSH
13097: LD_INT 1
13099: ARRAY
13100: PPUSH
13101: CALL_OW 120
// exit ;
13105: GO 13240
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13107: LD_ADDR_VAR 0 4
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 50
13124: PUSH
13125: EMPTY
13126: LIST
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: LD_INT 30
13133: PUSH
13134: LD_INT 4
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 30
13143: PUSH
13144: LD_INT 5
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: PPUSH
13161: CALL_OW 69
13165: ST_TO_ADDR
// if not tmp then
13166: LD_VAR 0 4
13170: NOT
13171: IFFALSE 13190
// begin ComMoveXY ( un , 92 , 99 ) ;
13173: LD_VAR 0 2
13177: PPUSH
13178: LD_INT 92
13180: PPUSH
13181: LD_INT 99
13183: PPUSH
13184: CALL_OW 111
// exit ;
13188: GO 13240
// end ; for i in tmp do
13190: LD_ADDR_VAR 0 3
13194: PUSH
13195: LD_VAR 0 4
13199: PUSH
13200: FOR_IN
13201: IFFALSE 13238
// if UnitsInside ( i ) < 6 then
13203: LD_VAR 0 3
13207: PPUSH
13208: CALL_OW 313
13212: PUSH
13213: LD_INT 6
13215: LESS
13216: IFFALSE 13236
// begin ComEnterUnit ( un , i ) ;
13218: LD_VAR 0 2
13222: PPUSH
13223: LD_VAR 0 3
13227: PPUSH
13228: CALL_OW 120
// exit ;
13232: POP
13233: POP
13234: GO 13240
// end ;
13236: GO 13200
13238: POP
13239: POP
// end ; end ; end ;
13240: PPOPN 4
13242: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
13243: LD_VAR 0 1
13247: PPUSH
13248: CALL_OW 255
13252: PUSH
13253: LD_INT 3
13255: PUSH
13256: LD_INT 6
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: IN
13263: PUSH
13264: LD_VAR 0 1
13268: PPUSH
13269: CALL_OW 263
13273: PUSH
13274: LD_INT 3
13276: EQUAL
13277: AND
13278: PUSH
13279: LD_EXP 6
13283: NOT
13284: AND
13285: IFFALSE 13304
// begin seenComputer := true ;
13287: LD_ADDR_EXP 6
13291: PUSH
13292: LD_INT 1
13294: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
13295: LD_VAR 0 1
13299: PPUSH
13300: CALL 16220 0 1
// end ; end ;
13304: PPOPN 1
13306: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
13307: LD_INT 0
13309: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
13310: LD_VAR 0 1
13314: PPUSH
13315: LD_VAR 0 2
13319: PPUSH
13320: CALL 32980 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
13324: LD_VAR 0 1
13328: PPUSH
13329: CALL_OW 255
13333: PUSH
13334: LD_INT 3
13336: EQUAL
13337: PUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL_OW 263
13347: PUSH
13348: LD_INT 1
13350: EQUAL
13351: AND
13352: PUSH
13353: LD_VAR 0 1
13357: PPUSH
13358: CALL_OW 264
13362: PUSH
13363: LD_INT 42
13365: PUSH
13366: LD_INT 43
13368: PUSH
13369: LD_INT 44
13371: PUSH
13372: LD_INT 46
13374: PUSH
13375: LD_INT 45
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: IN
13385: AND
13386: IFFALSE 13416
// begin SetTag ( vehicle , 300 ) ;
13388: LD_VAR 0 1
13392: PPUSH
13393: LD_INT 300
13395: PPUSH
13396: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
13400: LD_ADDR_EXP 29
13404: PUSH
13405: LD_EXP 29
13409: PUSH
13410: LD_VAR 0 1
13414: UNION
13415: ST_TO_ADDR
// end ; end ;
13416: PPOPN 3
13418: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
13419: LD_INT 0
13421: PPUSH
// begin if InArea ( x , y , ruCrates ) then
13422: LD_VAR 0 2
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 13
13434: PPUSH
13435: CALL_OW 309
13439: IFFALSE 13570
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
13441: LD_ADDR_VAR 0 6
13445: PUSH
13446: LD_INT 22
13448: PUSH
13449: LD_INT 3
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 50
13458: PUSH
13459: EMPTY
13460: LIST
13461: PUSH
13462: LD_INT 34
13464: PUSH
13465: LD_INT 51
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PPUSH
13477: CALL_OW 69
13481: ST_TO_ADDR
// if not cargo then
13482: LD_VAR 0 6
13486: NOT
13487: IFFALSE 13491
// exit ;
13489: GO 13570
// wait ( 0 0$5 ) ;
13491: LD_INT 175
13493: PPUSH
13494: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
13498: LD_VAR 0 6
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: PPUSH
13507: LD_INT 28
13509: PPUSH
13510: CALL_OW 296
13514: PUSH
13515: LD_INT 6
13517: LESS
13518: PUSH
13519: LD_VAR 0 6
13523: PUSH
13524: LD_INT 1
13526: ARRAY
13527: PPUSH
13528: CALL_OW 261
13532: PUSH
13533: LD_INT 50
13535: LESS
13536: AND
13537: IFFALSE 13551
// ComMoveUnit ( cargo , ruDep ) ;
13539: LD_VAR 0 6
13543: PPUSH
13544: LD_INT 28
13546: PPUSH
13547: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
13551: LD_VAR 0 6
13555: PPUSH
13556: LD_VAR 0 2
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: CALL_OW 177
// end ; end ;
13570: PPOPN 6
13572: END
// on BuildingComplete ( b ) do var i , tmp ;
13573: LD_INT 0
13575: PPUSH
13576: PPUSH
// begin if GetSide ( b ) = 3 then
13577: LD_VAR 0 1
13581: PPUSH
13582: CALL_OW 255
13586: PUSH
13587: LD_INT 3
13589: EQUAL
13590: IFFALSE 13805
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
13592: LD_ADDR_EXP 30
13596: PUSH
13597: LD_EXP 30
13601: PPUSH
13602: LD_INT 1
13604: PPUSH
13605: CALL_OW 3
13609: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
13610: LD_VAR 0 1
13614: PPUSH
13615: CALL_OW 266
13619: PUSH
13620: LD_INT 32
13622: PUSH
13623: LD_INT 33
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: IN
13630: IFFALSE 13805
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
13632: LD_VAR 0 1
13636: PPUSH
13637: LD_INT 46
13639: PUSH
13640: LD_INT 45
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 1
13649: PPUSH
13650: LD_INT 2
13652: PPUSH
13653: CALL_OW 12
13657: ARRAY
13658: PPUSH
13659: CALL_OW 208
// if GetBType ( b ) = b_bunker then
13663: LD_VAR 0 1
13667: PPUSH
13668: CALL_OW 266
13672: PUSH
13673: LD_INT 32
13675: EQUAL
13676: IFFALSE 13805
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
13678: LD_ADDR_VAR 0 3
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_INT 3
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 25
13695: PUSH
13696: LD_INT 1
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 120
13705: PUSH
13706: LD_INT 0
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 69
13722: ST_TO_ADDR
// if tmp then
13723: LD_VAR 0 3
13727: IFFALSE 13805
// for i in tmp do
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: LD_VAR 0 3
13738: PUSH
13739: FOR_IN
13740: IFFALSE 13803
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
13742: LD_VAR 0 2
13746: PPUSH
13747: CALL_OW 310
13751: NOT
13752: PUSH
13753: LD_VAR 0 2
13757: PPUSH
13758: CALL_OW 310
13762: PPUSH
13763: CALL_OW 266
13767: PUSH
13768: LD_INT 32
13770: NONEQUAL
13771: OR
13772: IFFALSE 13801
// begin ComExit ( i ) ;
13774: LD_VAR 0 2
13778: PPUSH
13779: CALL 74567 0 1
// AddComEnterUnit ( i , b ) ;
13783: LD_VAR 0 2
13787: PPUSH
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 180
// exit ;
13797: POP
13798: POP
13799: GO 13805
// end ;
13801: GO 13739
13803: POP
13804: POP
// end ; end ; end ; end ; end_of_file
13805: PPOPN 3
13807: END
// export function Action ; var i , tmp , un , inUnit ; begin
13808: LD_INT 0
13810: PPUSH
13811: PPUSH
13812: PPUSH
13813: PPUSH
13814: PPUSH
// Video ( true ) ;
13815: LD_INT 1
13817: PPUSH
13818: CALL 74151 0 1
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
13822: LD_INT 50
13824: PPUSH
13825: LD_INT 12
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: LD_INT 56
13833: NEG
13834: PPUSH
13835: CALL 74065 0 4
// CenterOnXY ( 50 , 12 ) ;
13839: LD_INT 50
13841: PPUSH
13842: LD_INT 12
13844: PPUSH
13845: CALL_OW 84
// wait ( 0 0$3 ) ;
13849: LD_INT 105
13851: PPUSH
13852: CALL_OW 67
// PrepareStartRussianAttack ;
13856: CALL 9230 0 0
// CenterOnXY ( 66 , 47 ) ;
13860: LD_INT 66
13862: PPUSH
13863: LD_INT 47
13865: PPUSH
13866: CALL_OW 84
// wait ( 0 0$5 ) ;
13870: LD_INT 175
13872: PPUSH
13873: CALL_OW 67
// case gammaCommander of 1 :
13877: LD_EXP 9
13881: PUSH
13882: LD_INT 1
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13905
13890: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
13891: LD_EXP 12
13895: PPUSH
13896: LD_STRING D1-Don-1
13898: PPUSH
13899: CALL_OW 88
13903: GO 13952
13905: LD_INT 2
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13913
13911: GO 13928
13913: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
13914: LD_EXP 11
13918: PPUSH
13919: LD_STRING D1-Brown-1
13921: PPUSH
13922: CALL_OW 88
13926: GO 13952
13928: LD_INT 3
13930: DOUBLE
13931: EQUAL
13932: IFTRUE 13936
13934: GO 13951
13936: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
13937: LD_EXP 20
13941: PPUSH
13942: LD_STRING D1-VanH-1
13944: PPUSH
13945: CALL_OW 88
13949: GO 13952
13951: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
13952: LD_ADDR_VAR 0 3
13956: PUSH
13957: LD_INT 22
13959: PUSH
13960: LD_INT 1
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 33
13969: PUSH
13970: LD_INT 2
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 61
13979: PUSH
13980: EMPTY
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: LIST
13987: PPUSH
13988: CALL_OW 69
13992: ST_TO_ADDR
// if tmp then
13993: LD_VAR 0 3
13997: IFFALSE 14014
// ComAgressiveMove ( tmp , 74 , 44 ) ;
13999: LD_VAR 0 3
14003: PPUSH
14004: LD_INT 74
14006: PPUSH
14007: LD_INT 44
14009: PPUSH
14010: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14014: LD_ADDR_VAR 0 3
14018: PUSH
14019: LD_INT 22
14021: PUSH
14022: LD_INT 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 25
14031: PUSH
14032: LD_INT 1
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PPUSH
14043: CALL_OW 69
14047: PUSH
14048: LD_EXP 12
14052: PUSH
14053: LD_EXP 11
14057: PUSH
14058: LD_EXP 20
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: DIFF
14068: ST_TO_ADDR
// if tmp then
14069: LD_VAR 0 3
14073: IFFALSE 14151
// for i in tmp do
14075: LD_ADDR_VAR 0 2
14079: PUSH
14080: LD_VAR 0 3
14084: PUSH
14085: FOR_IN
14086: IFFALSE 14149
// begin inUnit := IsInUnit ( i ) ;
14088: LD_ADDR_VAR 0 5
14092: PUSH
14093: LD_VAR 0 2
14097: PPUSH
14098: CALL_OW 310
14102: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14103: LD_VAR 0 5
14107: PUSH
14108: LD_VAR 0 5
14112: PPUSH
14113: CALL_OW 266
14117: PUSH
14118: LD_INT 32
14120: PUSH
14121: LD_INT 31
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: IN
14128: AND
14129: IFFALSE 14147
// tmp := tmp diff i ;
14131: LD_ADDR_VAR 0 3
14135: PUSH
14136: LD_VAR 0 3
14140: PUSH
14141: LD_VAR 0 2
14145: DIFF
14146: ST_TO_ADDR
// end ;
14147: GO 14085
14149: POP
14150: POP
// if tmp then
14151: LD_VAR 0 3
14155: IFFALSE 14245
// begin ComExitAll ( tmp ) ;
14157: LD_VAR 0 3
14161: PPUSH
14162: CALL 74650 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
14166: LD_VAR 0 3
14170: PPUSH
14171: LD_INT 74
14173: PPUSH
14174: LD_INT 44
14176: PPUSH
14177: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 22
14188: PUSH
14189: LD_INT 1
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 25
14198: PUSH
14199: LD_INT 4
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PPUSH
14210: CALL_OW 69
14214: ST_TO_ADDR
// if tmp then
14215: LD_VAR 0 3
14219: IFFALSE 14245
// begin ComExitAll ( tmp ) ;
14221: LD_VAR 0 3
14225: PPUSH
14226: CALL 74650 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
14230: LD_VAR 0 3
14234: PPUSH
14235: LD_INT 66
14237: PPUSH
14238: LD_INT 28
14240: PPUSH
14241: CALL_OW 171
// end ; end ; game_speed := 4 ;
14245: LD_ADDR_OWVAR 65
14249: PUSH
14250: LD_INT 4
14252: ST_TO_ADDR
// wait ( 0 0$2 ) ;
14253: LD_INT 70
14255: PPUSH
14256: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
14260: LD_EXP 24
14264: PPUSH
14265: LD_STRING D1-Har-1
14267: PPUSH
14268: CALL_OW 94
// case gammaCommander of 1 :
14272: LD_EXP 9
14276: PUSH
14277: LD_INT 1
14279: DOUBLE
14280: EQUAL
14281: IFTRUE 14285
14283: GO 14300
14285: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
14286: LD_EXP 12
14290: PPUSH
14291: LD_STRING D1-Don-2
14293: PPUSH
14294: CALL_OW 88
14298: GO 14347
14300: LD_INT 2
14302: DOUBLE
14303: EQUAL
14304: IFTRUE 14308
14306: GO 14323
14308: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
14309: LD_EXP 11
14313: PPUSH
14314: LD_STRING D1-Brown-2
14316: PPUSH
14317: CALL_OW 88
14321: GO 14347
14323: LD_INT 3
14325: DOUBLE
14326: EQUAL
14327: IFTRUE 14331
14329: GO 14346
14331: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
14332: LD_EXP 20
14336: PPUSH
14337: LD_STRING D1-VanH-2
14339: PPUSH
14340: CALL_OW 88
14344: GO 14347
14346: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
14347: LD_EXP 24
14351: PPUSH
14352: LD_STRING D1-Har-2
14354: PPUSH
14355: CALL_OW 94
// Video ( false ) ;
14359: LD_INT 0
14361: PPUSH
14362: CALL 74151 0 1
// ChangeMissionObjectives ( M1 ) ;
14366: LD_STRING M1
14368: PPUSH
14369: CALL_OW 337
// SaveForQuickRestart ;
14373: CALL_OW 22
// wait ( 2 2$30 ) ;
14377: LD_INT 5250
14379: PPUSH
14380: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
14384: LD_INT 1
14386: PPUSH
14387: CALL 11460 0 1
// wait ( 4 4$30 ) ;
14391: LD_INT 9450
14393: PPUSH
14394: CALL_OW 67
// if Difficulty > 2 then
14398: LD_OWVAR 67
14402: PUSH
14403: LD_INT 2
14405: GREATER
14406: IFFALSE 14415
// PrepareRussianAttack ( 2 ) ;
14408: LD_INT 2
14410: PPUSH
14411: CALL 11460 0 1
// if Difficulty > 3 then
14415: LD_OWVAR 67
14419: PUSH
14420: LD_INT 3
14422: GREATER
14423: IFFALSE 14582
// begin for i := 1 to 4 do
14425: LD_ADDR_VAR 0 2
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_INT 4
14437: PUSH
14438: FOR_TO
14439: IFFALSE 14524
// begin uc_side := 6 ;
14441: LD_ADDR_OWVAR 20
14445: PUSH
14446: LD_INT 6
14448: ST_TO_ADDR
// uc_nation := 3 ;
14449: LD_ADDR_OWVAR 21
14453: PUSH
14454: LD_INT 3
14456: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
14457: LD_INT 0
14459: PPUSH
14460: LD_INT 6
14462: PPUSH
14463: CALL_OW 381
// un := CreateHuman ;
14467: LD_ADDR_VAR 0 4
14471: PUSH
14472: CALL_OW 44
14476: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14477: LD_VAR 0 4
14481: PPUSH
14482: LD_INT 122
14484: PPUSH
14485: LD_INT 89
14487: PPUSH
14488: LD_INT 3
14490: PPUSH
14491: LD_INT 0
14493: PPUSH
14494: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
14498: LD_VAR 0 4
14502: PPUSH
14503: LD_INT 88
14505: PPUSH
14506: LD_INT 42
14508: PPUSH
14509: CALL_OW 114
// AddComHold ( un ) ;
14513: LD_VAR 0 4
14517: PPUSH
14518: CALL_OW 200
// end ;
14522: GO 14438
14524: POP
14525: POP
// PrepareScientist ( false , 6 ) ;
14526: LD_INT 0
14528: PPUSH
14529: LD_INT 6
14531: PPUSH
14532: CALL_OW 384
// un := CreateHuman ;
14536: LD_ADDR_VAR 0 4
14540: PUSH
14541: CALL_OW 44
14545: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14546: LD_VAR 0 4
14550: PPUSH
14551: LD_INT 122
14553: PPUSH
14554: LD_INT 89
14556: PPUSH
14557: LD_INT 3
14559: PPUSH
14560: LD_INT 0
14562: PPUSH
14563: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
14567: LD_VAR 0 4
14571: PPUSH
14572: LD_INT 91
14574: PPUSH
14575: LD_INT 48
14577: PPUSH
14578: CALL_OW 111
// end ; end ;
14582: LD_VAR 0 1
14586: RET
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 3 ] ] ) = 0 and tick > 5 5$00 do var dialog , p ;
14587: LD_INT 22
14589: PUSH
14590: LD_INT 1
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 101
14599: PUSH
14600: LD_INT 3
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PPUSH
14611: CALL_OW 69
14615: PUSH
14616: LD_INT 0
14618: EQUAL
14619: PUSH
14620: LD_OWVAR 1
14624: PUSH
14625: LD_INT 10500
14627: GREATER
14628: AND
14629: IFFALSE 16217
14631: GO 14633
14633: DISABLE
14634: LD_INT 0
14636: PPUSH
14637: PPUSH
// begin PrepareSupportFromDelta ;
14638: CALL 4052 0 0
// deltaSupport := true ;
14642: LD_ADDR_EXP 5
14646: PUSH
14647: LD_INT 1
14649: ST_TO_ADDR
// dialog := false ;
14650: LD_ADDR_VAR 0 1
14654: PUSH
14655: LD_INT 0
14657: ST_TO_ADDR
// if IsOk ( Gladstone ) then
14658: LD_EXP 17
14662: PPUSH
14663: CALL_OW 302
14667: IFFALSE 14689
// dialog := Say ( Gladstone , D2-Glad-1 ) else
14669: LD_ADDR_VAR 0 1
14673: PUSH
14674: LD_EXP 17
14678: PPUSH
14679: LD_STRING D2-Glad-1
14681: PPUSH
14682: CALL_OW 88
14686: ST_TO_ADDR
14687: GO 14771
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
14689: LD_ADDR_VAR 0 1
14693: PUSH
14694: LD_INT 22
14696: PUSH
14697: LD_INT 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 120
14706: PUSH
14707: LD_INT 107
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 21
14716: PUSH
14717: LD_INT 1
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 23
14726: PUSH
14727: LD_INT 1
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: PPUSH
14740: CALL_OW 69
14744: PUSH
14745: LD_EXP 22
14749: PUSH
14750: LD_EXP 21
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: DIFF
14759: PPUSH
14760: LD_STRING D2-Sol1-1
14762: PPUSH
14763: LD_STRING D2-FSol1-1
14765: PPUSH
14766: CALL 18205 0 3
14770: ST_TO_ADDR
// if dialog then
14771: LD_VAR 0 1
14775: IFFALSE 14876
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
14777: LD_EXP 12
14781: PPUSH
14782: CALL_OW 302
14786: PUSH
14787: LD_EXP 9
14791: PUSH
14792: LD_INT 1
14794: EQUAL
14795: AND
14796: IFFALSE 14810
// Say ( Donaldson , D2-Don-1 ) ;
14798: LD_EXP 12
14802: PPUSH
14803: LD_STRING D2-Don-1
14805: PPUSH
14806: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14810: LD_EXP 11
14814: PPUSH
14815: CALL_OW 302
14819: PUSH
14820: LD_EXP 9
14824: PUSH
14825: LD_INT 2
14827: EQUAL
14828: AND
14829: IFFALSE 14843
// Say ( Brown , D2-Brown-1 ) ;
14831: LD_EXP 11
14835: PPUSH
14836: LD_STRING D2-Brown-1
14838: PPUSH
14839: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14843: LD_EXP 20
14847: PPUSH
14848: CALL_OW 302
14852: PUSH
14853: LD_EXP 9
14857: PUSH
14858: LD_INT 3
14860: EQUAL
14861: AND
14862: IFFALSE 14876
// Say ( Houten , D2-VanH-1 ) ;
14864: LD_EXP 20
14868: PPUSH
14869: LD_STRING D2-VanH-1
14871: PPUSH
14872: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
14876: LD_INT 3
14878: PPUSH
14879: CALL 11460 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
14883: LD_STRING 07_time
14885: PPUSH
14886: LD_INT 18900
14888: PPUSH
14889: CALL_OW 30
14893: PUSH
14894: LD_INT 3
14896: DIV
14897: PPUSH
14898: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
14902: LD_INT 34
14904: PPUSH
14905: LD_INT 1
14907: PPUSH
14908: CALL_OW 321
14912: PUSH
14913: LD_INT 2
14915: EQUAL
14916: IFFALSE 14925
// SetAchievement ( ACH_HEAVYGUN ) ;
14918: LD_STRING ACH_HEAVYGUN
14920: PPUSH
14921: CALL_OW 543
// PrepareMacmillanSquad ;
14925: CALL 4789 0 0
// CenterNowOnUnits ( JMM ) ;
14929: LD_EXP 10
14933: PPUSH
14934: CALL_OW 87
// wait ( 0 0$10 ) ;
14938: LD_INT 350
14940: PPUSH
14941: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
14945: LD_INT 1
14947: PPUSH
14948: CALL_OW 427
// p := 0 ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_INT 0
14959: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14960: LD_INT 35
14962: PPUSH
14963: CALL_OW 67
// p := Inc ( p ) ;
14967: LD_ADDR_VAR 0 2
14971: PUSH
14972: LD_VAR 0 2
14976: PPUSH
14977: CALL 75532 0 1
14981: ST_TO_ADDR
// if p > 100 then
14982: LD_VAR 0 2
14986: PUSH
14987: LD_INT 100
14989: GREATER
14990: IFFALSE 14994
// exit ;
14992: GO 16217
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
14994: LD_EXP 10
14998: PPUSH
14999: LD_INT 15
15001: PPUSH
15002: CALL_OW 308
15006: PUSH
15007: LD_EXP 10
15011: PPUSH
15012: CALL_OW 310
15016: PPUSH
15017: LD_INT 15
15019: PPUSH
15020: CALL_OW 308
15024: OR
15025: PUSH
15026: LD_EXP 10
15030: PPUSH
15031: LD_EXP 22
15035: PPUSH
15036: CALL_OW 296
15040: PUSH
15041: LD_INT 10
15043: LESS
15044: OR
15045: PUSH
15046: LD_INT 22
15048: PUSH
15049: LD_INT 1
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: LD_INT 120
15061: PUSH
15062: LD_INT 106
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 120
15071: PUSH
15072: LD_INT 107
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 91
15086: PUSH
15087: LD_EXP 10
15091: PUSH
15092: LD_INT 12
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: LIST
15104: PPUSH
15105: CALL_OW 69
15109: OR
15110: IFFALSE 14960
// DialogueOn ;
15112: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
15116: LD_EXP 10
15120: PPUSH
15121: LD_STRING D3-JMM-1
15123: PPUSH
15124: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15128: LD_EXP 12
15132: PPUSH
15133: CALL_OW 302
15137: PUSH
15138: LD_EXP 9
15142: PUSH
15143: LD_INT 1
15145: EQUAL
15146: AND
15147: IFFALSE 15163
// Say ( Donaldson , D3-Don-1 ) else
15149: LD_EXP 12
15153: PPUSH
15154: LD_STRING D3-Don-1
15156: PPUSH
15157: CALL_OW 88
15161: GO 15259
// begin if gammaCommander = 1 then
15163: LD_EXP 9
15167: PUSH
15168: LD_INT 1
15170: EQUAL
15171: IFFALSE 15259
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
15173: LD_INT 22
15175: PUSH
15176: LD_INT 1
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 21
15185: PUSH
15186: LD_INT 1
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: LD_INT 23
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 120
15205: PUSH
15206: LD_INT 106
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 26
15215: PUSH
15216: LD_INT 1
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: PPUSH
15230: CALL_OW 69
15234: PPUSH
15235: LD_STRING D3-Sol1-1
15237: PPUSH
15238: LD_STRING 
15240: PPUSH
15241: CALL 18205 0 3
15245: IFFALSE 15259
// Say ( JMM , D3-JMM-2 ) ;
15247: LD_EXP 10
15251: PPUSH
15252: LD_STRING D3-JMM-2
15254: PPUSH
15255: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15259: LD_EXP 11
15263: PPUSH
15264: CALL_OW 302
15268: PUSH
15269: LD_EXP 9
15273: PUSH
15274: LD_INT 2
15276: EQUAL
15277: AND
15278: IFFALSE 15294
// Say ( Brown , D3-Brown-1 ) else
15280: LD_EXP 11
15284: PPUSH
15285: LD_STRING D3-Brown-1
15287: PPUSH
15288: CALL_OW 88
15292: GO 15390
// begin if gammaCommander = 2 then
15294: LD_EXP 9
15298: PUSH
15299: LD_INT 2
15301: EQUAL
15302: IFFALSE 15390
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
15304: LD_INT 22
15306: PUSH
15307: LD_INT 1
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 21
15316: PUSH
15317: LD_INT 1
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 23
15326: PUSH
15327: LD_INT 1
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 120
15336: PUSH
15337: LD_INT 106
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 26
15346: PUSH
15347: LD_INT 1
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: PPUSH
15361: CALL_OW 69
15365: PPUSH
15366: LD_STRING D3-Sol1-1a
15368: PPUSH
15369: LD_STRING 
15371: PPUSH
15372: CALL 18205 0 3
15376: IFFALSE 15390
// Say ( JMM , D3-JMM-2 ) ;
15378: LD_EXP 10
15382: PPUSH
15383: LD_STRING D3-JMM-2
15385: PPUSH
15386: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15390: LD_EXP 20
15394: PPUSH
15395: CALL_OW 302
15399: PUSH
15400: LD_EXP 9
15404: PUSH
15405: LD_INT 3
15407: EQUAL
15408: AND
15409: IFFALSE 15425
// Say ( Houten , D3-VanH-1 ) else
15411: LD_EXP 20
15415: PPUSH
15416: LD_STRING D3-VanH-1
15418: PPUSH
15419: CALL_OW 88
15423: GO 15521
// begin if gammaCommander = 3 then
15425: LD_EXP 9
15429: PUSH
15430: LD_INT 3
15432: EQUAL
15433: IFFALSE 15521
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
15435: LD_INT 22
15437: PUSH
15438: LD_INT 1
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 21
15447: PUSH
15448: LD_INT 1
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 23
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 120
15467: PUSH
15468: LD_INT 106
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 26
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: PPUSH
15492: CALL_OW 69
15496: PPUSH
15497: LD_STRING D3-Sol1-1b
15499: PPUSH
15500: LD_STRING 
15502: PPUSH
15503: CALL 18205 0 3
15507: IFFALSE 15521
// Say ( JMM , D3-JMM-2 ) ;
15509: LD_EXP 10
15513: PPUSH
15514: LD_STRING D3-JMM-2
15516: PPUSH
15517: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15521: LD_EXP 22
15525: PPUSH
15526: CALL_OW 302
15530: IFFALSE 15558
// begin Say ( Joan , D3a-Joan-1 ) ;
15532: LD_EXP 22
15536: PPUSH
15537: LD_STRING D3a-Joan-1
15539: PPUSH
15540: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15544: LD_EXP 10
15548: PPUSH
15549: LD_STRING D3a-JMM-1
15551: PPUSH
15552: CALL_OW 88
// end else
15556: GO 15992
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15558: LD_STRING 06_JoanStatus_1
15560: PPUSH
15561: LD_INT 0
15563: PPUSH
15564: CALL_OW 30
15568: PUSH
15569: LD_INT 1
15571: EQUAL
15572: IFFALSE 15992
// begin Say ( JMM , D3b-JMM-1 ) ;
15574: LD_EXP 10
15578: PPUSH
15579: LD_STRING D3b-JMM-1
15581: PPUSH
15582: CALL_OW 88
// dialog := false ;
15586: LD_ADDR_VAR 0 1
15590: PUSH
15591: LD_INT 0
15593: ST_TO_ADDR
// if gammaCommander = 1 then
15594: LD_EXP 9
15598: PUSH
15599: LD_INT 1
15601: EQUAL
15602: IFFALSE 15713
// if IsOK ( Donaldson ) then
15604: LD_EXP 12
15608: PPUSH
15609: CALL_OW 302
15613: IFFALSE 15635
// dialog := Say ( Donaldson , D3b-Don-1 ) else
15615: LD_ADDR_VAR 0 1
15619: PUSH
15620: LD_EXP 12
15624: PPUSH
15625: LD_STRING D3b-Don-1
15627: PPUSH
15628: CALL_OW 88
15632: ST_TO_ADDR
15633: GO 15713
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15635: LD_ADDR_VAR 0 1
15639: PUSH
15640: LD_INT 22
15642: PUSH
15643: LD_INT 1
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 21
15652: PUSH
15653: LD_INT 1
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 23
15662: PUSH
15663: LD_INT 1
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 120
15672: PUSH
15673: LD_INT 106
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 26
15682: PUSH
15683: LD_INT 1
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: PPUSH
15702: LD_STRING D3b-Sol1-1
15704: PPUSH
15705: LD_STRING 
15707: PPUSH
15708: CALL 18205 0 3
15712: ST_TO_ADDR
// if gammaCommander = 2 then
15713: LD_EXP 9
15717: PUSH
15718: LD_INT 2
15720: EQUAL
15721: IFFALSE 15832
// if IsOk ( Brown ) then
15723: LD_EXP 11
15727: PPUSH
15728: CALL_OW 302
15732: IFFALSE 15754
// dialog := Say ( Brown , D3b-Brown-1 ) else
15734: LD_ADDR_VAR 0 1
15738: PUSH
15739: LD_EXP 11
15743: PPUSH
15744: LD_STRING D3b-Brown-1
15746: PPUSH
15747: CALL_OW 88
15751: ST_TO_ADDR
15752: GO 15832
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15754: LD_ADDR_VAR 0 1
15758: PUSH
15759: LD_INT 22
15761: PUSH
15762: LD_INT 1
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 21
15771: PUSH
15772: LD_INT 1
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 23
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 120
15791: PUSH
15792: LD_INT 106
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 26
15801: PUSH
15802: LD_INT 1
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: PPUSH
15816: CALL_OW 69
15820: PPUSH
15821: LD_STRING D3b-Sol1-1
15823: PPUSH
15824: LD_STRING 
15826: PPUSH
15827: CALL 18205 0 3
15831: ST_TO_ADDR
// if gammaCommander = 3 then
15832: LD_EXP 9
15836: PUSH
15837: LD_INT 3
15839: EQUAL
15840: IFFALSE 15951
// if IsOk ( Houten ) then
15842: LD_EXP 20
15846: PPUSH
15847: CALL_OW 302
15851: IFFALSE 15873
// dialog := Say ( Houten , D3b-VanH-1 ) else
15853: LD_ADDR_VAR 0 1
15857: PUSH
15858: LD_EXP 20
15862: PPUSH
15863: LD_STRING D3b-VanH-1
15865: PPUSH
15866: CALL_OW 88
15870: ST_TO_ADDR
15871: GO 15951
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15873: LD_ADDR_VAR 0 1
15877: PUSH
15878: LD_INT 22
15880: PUSH
15881: LD_INT 1
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 21
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 23
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 120
15910: PUSH
15911: LD_INT 106
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 26
15920: PUSH
15921: LD_INT 1
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: PPUSH
15935: CALL_OW 69
15939: PPUSH
15940: LD_STRING D3b-Sol1-1
15942: PPUSH
15943: LD_STRING 
15945: PPUSH
15946: CALL 18205 0 3
15950: ST_TO_ADDR
// if dialog then
15951: LD_VAR 0 1
15955: IFFALSE 15992
// begin Say ( JMM , D3b-JMM-2 ) ;
15957: LD_EXP 10
15961: PPUSH
15962: LD_STRING D3b-JMM-2
15964: PPUSH
15965: CALL_OW 88
// if IsOK ( Lisa ) then
15969: LD_EXP 15
15973: PPUSH
15974: CALL_OW 302
15978: IFFALSE 15992
// Say ( Lisa , D3b-Lisa-2 ) ;
15980: LD_EXP 15
15984: PPUSH
15985: LD_STRING D3b-Lisa-2
15987: PPUSH
15988: CALL_OW 88
// end ; end ; end ; if not seenComputer then
15992: LD_EXP 6
15996: NOT
15997: IFFALSE 16005
// begin DialogueOff ;
15999: CALL_OW 7
// exit ;
16003: GO 16217
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16005: LD_INT 22
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 21
16017: PUSH
16018: LD_INT 1
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 23
16027: PUSH
16028: LD_INT 1
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 2
16037: PUSH
16038: LD_INT 120
16040: PUSH
16041: LD_INT 106
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 120
16050: PUSH
16051: LD_INT 107
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 26
16065: PUSH
16066: LD_INT 1
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: PPUSH
16080: CALL_OW 69
16084: PPUSH
16085: LD_STRING DCa-Sol1-1
16087: PPUSH
16088: LD_STRING 
16090: PPUSH
16091: CALL 18205 0 3
16095: IFFALSE 16109
// Say ( JMM , DCb-JMM-1 ) ;
16097: LD_EXP 10
16101: PPUSH
16102: LD_STRING DCb-JMM-1
16104: PPUSH
16105: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
16109: LD_INT 22
16111: PUSH
16112: LD_INT 1
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 21
16121: PUSH
16122: LD_INT 1
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 23
16131: PUSH
16132: LD_INT 1
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 2
16141: PUSH
16142: LD_INT 120
16144: PUSH
16145: LD_INT 106
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 120
16154: PUSH
16155: LD_INT 107
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 26
16169: PUSH
16170: LD_INT 1
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: PPUSH
16184: CALL_OW 69
16188: PPUSH
16189: LD_STRING DCb-Sol1-1
16191: PPUSH
16192: LD_STRING 
16194: PPUSH
16195: CALL 18205 0 3
16199: IFFALSE 16213
// Say ( JMM , DCb-JMM-2 ) ;
16201: LD_EXP 10
16205: PPUSH
16206: LD_STRING DCb-JMM-2
16208: PPUSH
16209: CALL_OW 88
// DialogueOff ;
16213: CALL_OW 7
// end ;
16217: PPOPN 2
16219: END
// export function DialogSeenComputer ( un ) ; begin
16220: LD_INT 0
16222: PPUSH
// if jmmArrival then
16223: LD_EXP 7
16227: IFFALSE 16231
// exit ;
16229: GO 16297
// CenterOnUnits ( un ) ;
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
16240: LD_INT 22
16242: PUSH
16243: LD_INT 1
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 2
16252: PUSH
16253: LD_INT 120
16255: PUSH
16256: LD_INT 106
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 120
16265: PUSH
16266: LD_INT 107
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: LIST
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PPUSH
16282: CALL_OW 69
16286: PPUSH
16287: LD_STRING DC-Sol1-1
16289: PPUSH
16290: LD_STRING DC-FSol1-1
16292: PPUSH
16293: CALL 18205 0 3
// end ;
16297: LD_VAR 0 2
16301: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
16302: LD_EXP 7
16306: PUSH
16307: LD_OWVAR 1
16311: PUSH
16312: LD_INT 48300
16314: GREATEREQUAL
16315: AND
16316: PUSH
16317: LD_EXP 10
16321: PPUSH
16322: CALL_OW 302
16326: AND
16327: IFFALSE 16677
16329: GO 16331
16331: DISABLE
// begin wait ( 2 2$00 ) ;
16332: LD_INT 4200
16334: PPUSH
16335: CALL_OW 67
// DialogueOn ;
16339: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16343: LD_EXP 25
16347: PPUSH
16348: LD_STRING D4-Pow-1
16350: PPUSH
16351: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16355: LD_EXP 10
16359: PPUSH
16360: LD_STRING D4-JMM-1
16362: PPUSH
16363: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16367: LD_EXP 25
16371: PPUSH
16372: LD_STRING D4-Pow-2
16374: PPUSH
16375: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16379: LD_EXP 10
16383: PPUSH
16384: LD_STRING D4-JMM-2
16386: PPUSH
16387: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16391: LD_EXP 25
16395: PPUSH
16396: LD_STRING D4-Pow-3
16398: PPUSH
16399: CALL_OW 94
// DialogueOff ;
16403: CALL_OW 7
// wait ( 1 1$00 ) ;
16407: LD_INT 2100
16409: PPUSH
16410: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16414: LD_INT 1
16416: PPUSH
16417: CALL_OW 427
// wait ( 7 7$30 ) ;
16421: LD_INT 15750
16423: PPUSH
16424: CALL_OW 67
// DialogueOn ;
16428: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16432: LD_EXP 25
16436: PPUSH
16437: LD_STRING D4a-Pow-1
16439: PPUSH
16440: CALL_OW 94
// DialogueOff ;
16444: CALL_OW 7
// SikorskiCounter ;
16448: CALL 17989 0 0
// PrepareSikorsky ;
16452: CALL 6211 0 0
// CenterNowOnUnits ( Sikorski ) ;
16456: LD_EXP 23
16460: PPUSH
16461: CALL_OW 87
// DialogueOn ;
16465: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16469: LD_EXP 23
16473: PPUSH
16474: LD_STRING D5-Sik-1
16476: PPUSH
16477: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16481: LD_EXP 10
16485: PPUSH
16486: LD_STRING D5-JMM-1a
16488: PPUSH
16489: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16493: LD_EXP 23
16497: PPUSH
16498: LD_STRING D5-Sik-2
16500: PPUSH
16501: CALL_OW 88
// case Query ( QSikorski ) of 1 :
16505: LD_STRING QSikorski
16507: PPUSH
16508: CALL_OW 97
16512: PUSH
16513: LD_INT 1
16515: DOUBLE
16516: EQUAL
16517: IFTRUE 16521
16519: GO 16544
16521: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16522: LD_EXP 23
16526: PPUSH
16527: LD_STRING D5a-Sik-1
16529: PPUSH
16530: CALL_OW 88
// sikorskiWait := 1 1$00 ;
16534: LD_ADDR_EXP 4
16538: PUSH
16539: LD_INT 2100
16541: ST_TO_ADDR
// end ; 2 :
16542: GO 16631
16544: LD_INT 2
16546: DOUBLE
16547: EQUAL
16548: IFTRUE 16552
16550: GO 16575
16552: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16553: LD_EXP 23
16557: PPUSH
16558: LD_STRING D5b-Sik-1
16560: PPUSH
16561: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16565: LD_ADDR_EXP 4
16569: PUSH
16570: LD_INT 10500
16572: ST_TO_ADDR
// end ; 3 :
16573: GO 16631
16575: LD_INT 3
16577: DOUBLE
16578: EQUAL
16579: IFTRUE 16583
16581: GO 16630
16583: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16584: LD_EXP 23
16588: PPUSH
16589: LD_STRING D5c-Sik-1
16591: PPUSH
16592: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16596: LD_EXP 10
16600: PPUSH
16601: LD_STRING D5c-JMM-1
16603: PPUSH
16604: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16608: LD_EXP 23
16612: PPUSH
16613: LD_STRING D5c-Sik-2
16615: PPUSH
16616: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16620: LD_ADDR_EXP 4
16624: PUSH
16625: LD_INT 10500
16627: ST_TO_ADDR
// end ; end ;
16628: GO 16631
16630: POP
// DialogueOff ;
16631: CALL_OW 7
// SikorskiWaitCounter ;
16635: CALL 18052 0 0
// DialogueOn ;
16639: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16643: LD_EXP 23
16647: PPUSH
16648: LD_STRING D6-Sik-1
16650: PPUSH
16651: CALL_OW 88
// DialogueOff ;
16655: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
16659: LD_STRING M2
16661: PPUSH
16662: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
16666: LD_INT 1
16668: PPUSH
16669: CALL_OW 427
// SikorskiAttack ;
16673: CALL 7560 0 0
// end ;
16677: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
16678: LD_INT 11
16680: PPUSH
16681: LD_INT 22
16683: PUSH
16684: LD_INT 4
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PPUSH
16691: CALL_OW 70
16695: PUSH
16696: LD_INT 2
16698: GREATER
16699: IFFALSE 16892
16701: GO 16703
16703: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16704: LD_EXP 23
16708: PPUSH
16709: LD_STRING D7-Sik-1
16711: PPUSH
16712: CALL_OW 88
// wait ( 0 0$10 ) ;
16716: LD_INT 350
16718: PPUSH
16719: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
16723: LD_EXP 10
16727: PPUSH
16728: LD_INT 11
16730: PPUSH
16731: CALL_OW 308
16735: PUSH
16736: LD_EXP 10
16740: PPUSH
16741: CALL_OW 310
16745: PPUSH
16746: LD_INT 11
16748: PPUSH
16749: CALL_OW 308
16753: OR
16754: IFFALSE 16778
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16756: LD_EXP 23
16760: PPUSH
16761: LD_STRING D7a-Sik-1
16763: PPUSH
16764: CALL_OW 88
// sikorskiStatus := 1 ;
16768: LD_ADDR_EXP 8
16772: PUSH
16773: LD_INT 1
16775: ST_TO_ADDR
// end else
16776: GO 16798
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16778: LD_EXP 23
16782: PPUSH
16783: LD_STRING D7b-Sik-1
16785: PPUSH
16786: CALL_OW 88
// sikorskiStatus := 0 ;
16790: LD_ADDR_EXP 8
16794: PUSH
16795: LD_INT 0
16797: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
16798: LD_INT 1575
16800: PPUSH
16801: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
16805: LD_EXP 10
16809: PPUSH
16810: LD_INT 11
16812: PPUSH
16813: CALL_OW 308
16817: PUSH
16818: LD_EXP 10
16822: PPUSH
16823: CALL_OW 310
16827: PPUSH
16828: LD_INT 11
16830: PPUSH
16831: CALL_OW 308
16835: OR
16836: PUSH
16837: LD_EXP 10
16841: PPUSH
16842: CALL_OW 302
16846: NOT
16847: OR
16848: IFFALSE 16872
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16850: LD_EXP 23
16854: PPUSH
16855: LD_STRING D7a-Sik-1
16857: PPUSH
16858: CALL_OW 88
// sikorskiStatus := 1 ;
16862: LD_ADDR_EXP 8
16866: PUSH
16867: LD_INT 1
16869: ST_TO_ADDR
// end else
16870: GO 16892
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16872: LD_EXP 23
16876: PPUSH
16877: LD_STRING D7b-Sik-1
16879: PPUSH
16880: CALL_OW 88
// sikorskiStatus := 0 ;
16884: LD_ADDR_EXP 8
16888: PUSH
16889: LD_INT 0
16891: ST_TO_ADDR
// end ; end ;
16892: END
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
16893: LD_EXP 7
16897: PUSH
16898: LD_INT 28
16900: PPUSH
16901: CALL_OW 301
16905: AND
16906: PUSH
16907: LD_EXP 27
16911: PPUSH
16912: CALL_OW 301
16916: AND
16917: PUSH
16918: LD_INT 22
16920: PUSH
16921: LD_INT 3
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 30
16930: PUSH
16931: LD_INT 5
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PPUSH
16942: CALL_OW 69
16946: PUSH
16947: LD_INT 0
16949: EQUAL
16950: AND
16951: IFFALSE 17986
16953: GO 16955
16955: DISABLE
16956: LD_INT 0
16958: PPUSH
16959: PPUSH
16960: PPUSH
// begin Video ( true ) ;
16961: LD_INT 1
16963: PPUSH
16964: CALL 74151 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
16968: LD_INT 104
16970: PPUSH
16971: LD_INT 108
16973: PPUSH
16974: LD_INT 1
16976: PPUSH
16977: LD_INT 36
16979: NEG
16980: PPUSH
16981: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
16985: LD_INT 104
16987: PPUSH
16988: LD_INT 108
16990: PPUSH
16991: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
16995: LD_ADDR_VAR 0 2
16999: PUSH
17000: LD_INT 22
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 21
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 3
17022: PUSH
17023: LD_INT 24
17025: PUSH
17026: LD_INT 249
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: PPUSH
17042: CALL_OW 69
17046: ST_TO_ADDR
// if tmp then
17047: LD_VAR 0 2
17051: IFFALSE 17082
// for i in tmp do
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: LD_VAR 0 2
17062: PUSH
17063: FOR_IN
17064: IFFALSE 17080
// SetLives ( i , 249 ) ;
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_INT 249
17073: PPUSH
17074: CALL_OW 234
17078: GO 17063
17080: POP
17081: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17082: LD_ADDR_VAR 0 1
17086: PUSH
17087: LD_INT 22
17089: PUSH
17090: LD_INT 3
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 21
17099: PUSH
17100: LD_INT 1
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PPUSH
17111: CALL_OW 69
17115: PUSH
17116: FOR_IN
17117: IFFALSE 17160
// begin ComExit ( i ) ;
17119: LD_VAR 0 1
17123: PPUSH
17124: CALL 74567 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
17128: LD_VAR 0 1
17132: PPUSH
17133: LD_INT 131
17135: PPUSH
17136: LD_INT 127
17138: PPUSH
17139: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
17143: LD_VAR 0 1
17147: PPUSH
17148: LD_INT 141
17150: PPUSH
17151: LD_INT 147
17153: PPUSH
17154: CALL_OW 171
// end ;
17158: GO 17116
17160: POP
17161: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
17162: LD_INT 81
17164: PUSH
17165: LD_INT 3
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 3
17174: PUSH
17175: LD_INT 21
17177: PUSH
17178: LD_INT 3
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PPUSH
17193: CALL_OW 69
17197: PPUSH
17198: LD_INT 131
17200: PPUSH
17201: LD_INT 127
17203: PPUSH
17204: CALL_OW 174
// wait ( 0 0$08 ) ;
17208: LD_INT 280
17210: PPUSH
17211: CALL_OW 67
// DialogueOn ;
17215: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
17219: LD_EXP 8
17223: PUSH
17224: LD_INT 1
17226: EQUAL
17227: PUSH
17228: LD_EXP 23
17232: PPUSH
17233: CALL_OW 302
17237: AND
17238: IFFALSE 17252
// Say ( Sikorski , D9-Sik-1 ) ;
17240: LD_EXP 23
17244: PPUSH
17245: LD_STRING D9-Sik-1
17247: PPUSH
17248: CALL_OW 88
// if sikorskiArriveCounter = 0 and IsDead ( Sikorski ) then
17252: LD_EXP 3
17256: PUSH
17257: LD_INT 0
17259: EQUAL
17260: PUSH
17261: LD_EXP 23
17265: PPUSH
17266: CALL_OW 301
17270: AND
17271: IFFALSE 17292
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
17273: LD_EXP 25
17277: PPUSH
17278: LD_STRING D8b-Pow-1
17280: PPUSH
17281: CALL_OW 94
// YouLost ( Dismissed ) ;
17285: LD_STRING Dismissed
17287: PPUSH
17288: CALL_OW 104
// end ; if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
17292: LD_INT 22
17294: PUSH
17295: LD_INT 4
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PPUSH
17302: CALL_OW 69
17306: PUSH
17307: LD_INT 0
17309: EQUAL
17310: PUSH
17311: LD_EXP 3
17315: AND
17316: IFFALSE 17325
// SetAchievement ( ACH_BLITZKRIEG ) ;
17318: LD_STRING ACH_BLITZKRIEG
17320: PPUSH
17321: CALL_OW 543
// if tick <= 25 25$08 then
17325: LD_OWVAR 1
17329: PUSH
17330: LD_INT 52780
17332: LESSEQUAL
17333: IFFALSE 17349
// begin wait ( 3 ) ;
17335: LD_INT 3
17337: PPUSH
17338: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
17342: LD_STRING ACH_ASPEED_8
17344: PPUSH
17345: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
17349: LD_STRING med1
17351: PPUSH
17352: LD_INT 1
17354: PPUSH
17355: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
17359: LD_STRING med2
17361: PPUSH
17362: LD_INT 1
17364: PPUSH
17365: CALL_OW 101
// if sikorskiStatus = 1 then
17369: LD_EXP 8
17373: PUSH
17374: LD_INT 1
17376: EQUAL
17377: IFFALSE 17391
// AddMedal ( perfect , 1 ) else
17379: LD_STRING perfect
17381: PPUSH
17382: LD_INT 1
17384: PPUSH
17385: CALL_OW 101
17389: GO 17402
// AddMedal ( perfect , - 1 ) ;
17391: LD_STRING perfect
17393: PPUSH
17394: LD_INT 1
17396: NEG
17397: PPUSH
17398: CALL_OW 101
// if Difficulty >= 3 then
17402: LD_OWVAR 67
17406: PUSH
17407: LD_INT 3
17409: GREATEREQUAL
17410: IFFALSE 17422
// SetAchievementEX ( ACH_AMER , 8 ) ;
17412: LD_STRING ACH_AMER
17414: PPUSH
17415: LD_INT 8
17417: PPUSH
17418: CALL_OW 564
// GiveMedals ( Main ) ;
17422: LD_STRING Main
17424: PPUSH
17425: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
17429: LD_INT 22
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 23
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 21
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: PPUSH
17464: CALL_OW 69
17468: PPUSH
17469: CALL_OW 43
// prefix := 08_ ;
17473: LD_ADDR_VAR 0 3
17477: PUSH
17478: LD_STRING 08_
17480: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
17481: LD_EXP 10
17485: PPUSH
17486: LD_VAR 0 3
17490: PUSH
17491: LD_STRING JMM
17493: STR
17494: PPUSH
17495: CALL_OW 38
// if IsLive ( Brown ) then
17499: LD_EXP 11
17503: PPUSH
17504: CALL_OW 300
17508: IFFALSE 17528
// SaveCharacters ( Brown , prefix & Brown ) ;
17510: LD_EXP 11
17514: PPUSH
17515: LD_VAR 0 3
17519: PUSH
17520: LD_STRING Brown
17522: STR
17523: PPUSH
17524: CALL_OW 38
// if IsLive ( Donaldson ) then
17528: LD_EXP 12
17532: PPUSH
17533: CALL_OW 300
17537: IFFALSE 17557
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
17539: LD_EXP 12
17543: PPUSH
17544: LD_VAR 0 3
17548: PUSH
17549: LD_STRING Donaldson
17551: STR
17552: PPUSH
17553: CALL_OW 38
// if IsLive ( Bobby ) then
17557: LD_EXP 13
17561: PPUSH
17562: CALL_OW 300
17566: IFFALSE 17586
// SaveCharacters ( Bobby , prefix & Bobby ) ;
17568: LD_EXP 13
17572: PPUSH
17573: LD_VAR 0 3
17577: PUSH
17578: LD_STRING Bobby
17580: STR
17581: PPUSH
17582: CALL_OW 38
// if IsLive ( Cyrus ) then
17586: LD_EXP 14
17590: PPUSH
17591: CALL_OW 300
17595: IFFALSE 17615
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
17597: LD_EXP 14
17601: PPUSH
17602: LD_VAR 0 3
17606: PUSH
17607: LD_STRING Cyrus
17609: STR
17610: PPUSH
17611: CALL_OW 38
// if IsLive ( Lisa ) then
17615: LD_EXP 15
17619: PPUSH
17620: CALL_OW 300
17624: IFFALSE 17644
// SaveCharacters ( Lisa , prefix & Lisa ) ;
17626: LD_EXP 15
17630: PPUSH
17631: LD_VAR 0 3
17635: PUSH
17636: LD_STRING Lisa
17638: STR
17639: PPUSH
17640: CALL_OW 38
// if IsLive ( Frank ) then
17644: LD_EXP 16
17648: PPUSH
17649: CALL_OW 300
17653: IFFALSE 17673
// SaveCharacters ( Frank , prefix & Frank ) ;
17655: LD_EXP 16
17659: PPUSH
17660: LD_VAR 0 3
17664: PUSH
17665: LD_STRING Frank
17667: STR
17668: PPUSH
17669: CALL_OW 38
// if IsLive ( Gladstone ) then
17673: LD_EXP 17
17677: PPUSH
17678: CALL_OW 300
17682: IFFALSE 17702
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
17684: LD_EXP 17
17688: PPUSH
17689: LD_VAR 0 3
17693: PUSH
17694: LD_STRING Gladstone
17696: STR
17697: PPUSH
17698: CALL_OW 38
// if IsLive ( Kikuchi ) then
17702: LD_EXP 18
17706: PPUSH
17707: CALL_OW 300
17711: IFFALSE 17731
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
17713: LD_EXP 18
17717: PPUSH
17718: LD_VAR 0 3
17722: PUSH
17723: LD_STRING Kikuchi
17725: STR
17726: PPUSH
17727: CALL_OW 38
// if IsLive ( Denis ) then
17731: LD_EXP 21
17735: PPUSH
17736: CALL_OW 300
17740: IFFALSE 17760
// SaveCharacters ( Denis , prefix & Denis ) ;
17742: LD_EXP 21
17746: PPUSH
17747: LD_VAR 0 3
17751: PUSH
17752: LD_STRING Denis
17754: STR
17755: PPUSH
17756: CALL_OW 38
// if IsLive ( Joan ) then
17760: LD_EXP 22
17764: PPUSH
17765: CALL_OW 300
17769: IFFALSE 17789
// SaveCharacters ( Joan , prefix & Joan ) ;
17771: LD_EXP 22
17775: PPUSH
17776: LD_VAR 0 3
17780: PUSH
17781: LD_STRING Joan
17783: STR
17784: PPUSH
17785: CALL_OW 38
// if IsLive ( Khatam ) then
17789: LD_EXP 19
17793: PPUSH
17794: CALL_OW 300
17798: IFFALSE 17818
// SaveCharacters ( Khatam , prefix & Khatam ) ;
17800: LD_EXP 19
17804: PPUSH
17805: LD_VAR 0 3
17809: PUSH
17810: LD_STRING Khatam
17812: STR
17813: PPUSH
17814: CALL_OW 38
// if IsLive ( Houten ) then
17818: LD_EXP 20
17822: PPUSH
17823: CALL_OW 300
17827: IFFALSE 17847
// SaveCharacters ( Houten , prefix & Houten ) ;
17829: LD_EXP 20
17833: PPUSH
17834: LD_VAR 0 3
17838: PUSH
17839: LD_STRING Houten
17841: STR
17842: PPUSH
17843: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
17847: LD_INT 22
17849: PUSH
17850: LD_INT 1
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 21
17859: PUSH
17860: LD_INT 1
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 23
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: PPUSH
17882: CALL_OW 69
17886: PUSH
17887: LD_EXP 10
17891: PUSH
17892: LD_EXP 11
17896: PUSH
17897: LD_EXP 12
17901: PUSH
17902: LD_EXP 13
17906: PUSH
17907: LD_EXP 14
17911: PUSH
17912: LD_EXP 15
17916: PUSH
17917: LD_EXP 16
17921: PUSH
17922: LD_EXP 17
17926: PUSH
17927: LD_EXP 18
17931: PUSH
17932: LD_EXP 21
17936: PUSH
17937: LD_EXP 22
17941: PUSH
17942: LD_EXP 20
17946: PUSH
17947: LD_EXP 19
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: DIFF
17967: PPUSH
17968: LD_STRING 08_other_survivors
17970: PPUSH
17971: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
17975: LD_INT 15
17977: PPUSH
17978: CALL 7034 0 1
// YouWin ;
17982: CALL_OW 103
// end ; end_of_file
17986: PPOPN 3
17988: END
// export function SikorskiCounter ; begin
17989: LD_INT 0
17991: PPUSH
// repeat wait ( 0 0$1 ) ;
17992: LD_INT 35
17994: PPUSH
17995: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
17999: LD_ADDR_OWVAR 47
18003: PUSH
18004: LD_STRING #Am08-2
18006: PUSH
18007: LD_EXP 3
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
18016: LD_ADDR_EXP 3
18020: PUSH
18021: LD_EXP 3
18025: PUSH
18026: LD_INT 35
18028: MINUS
18029: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
18030: LD_EXP 3
18034: PUSH
18035: LD_INT 0
18037: EQUAL
18038: IFFALSE 17992
// display_strings := [ ] ;
18040: LD_ADDR_OWVAR 47
18044: PUSH
18045: EMPTY
18046: ST_TO_ADDR
// end ;
18047: LD_VAR 0 1
18051: RET
// export function SikorskiWaitCounter ; begin
18052: LD_INT 0
18054: PPUSH
// repeat wait ( 0 0$1 ) ;
18055: LD_INT 35
18057: PPUSH
18058: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
18062: LD_ADDR_OWVAR 47
18066: PUSH
18067: LD_STRING #Am08-1
18069: PUSH
18070: LD_EXP 4
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
18079: LD_ADDR_EXP 4
18083: PUSH
18084: LD_EXP 4
18088: PUSH
18089: LD_INT 35
18091: MINUS
18092: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
18093: LD_EXP 4
18097: PUSH
18098: LD_INT 0
18100: EQUAL
18101: IFFALSE 18055
// display_strings := [ ] ;
18103: LD_ADDR_OWVAR 47
18107: PUSH
18108: EMPTY
18109: ST_TO_ADDR
// end ; end_of_file
18110: LD_VAR 0 1
18114: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
18115: LD_EXP 3
18119: IFFALSE 18159
18121: GO 18123
18123: DISABLE
// begin enable ;
18124: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
18125: LD_INT 14
18127: PPUSH
18128: CALL_OW 435
18132: PUSH
18133: LD_INT 10
18135: LESS
18136: IFFALSE 18159
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
18138: LD_INT 1
18140: PPUSH
18141: LD_INT 5
18143: PPUSH
18144: CALL_OW 12
18148: PPUSH
18149: LD_INT 14
18151: PPUSH
18152: LD_INT 1
18154: PPUSH
18155: CALL_OW 55
// end ;
18159: END
// every 0 0$55 trigger sikorskiArriveCounter do
18160: LD_EXP 3
18164: IFFALSE 18204
18166: GO 18168
18168: DISABLE
// begin enable ;
18169: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
18170: LD_INT 13
18172: PPUSH
18173: CALL_OW 435
18177: PUSH
18178: LD_INT 10
18180: LESS
18181: IFFALSE 18204
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
18183: LD_INT 1
18185: PPUSH
18186: LD_INT 5
18188: PPUSH
18189: CALL_OW 12
18193: PPUSH
18194: LD_INT 13
18196: PPUSH
18197: LD_INT 1
18199: PPUSH
18200: CALL_OW 55
// end ; end_of_file
18204: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
18205: LD_INT 0
18207: PPUSH
18208: PPUSH
// if not units then
18209: LD_VAR 0 1
18213: NOT
18214: IFFALSE 18218
// exit ;
18216: GO 18343
// result := false ;
18218: LD_ADDR_VAR 0 4
18222: PUSH
18223: LD_INT 0
18225: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
18226: LD_ADDR_VAR 0 5
18230: PUSH
18231: LD_VAR 0 1
18235: PPUSH
18236: LD_INT 26
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PPUSH
18246: CALL_OW 72
18250: ST_TO_ADDR
// if tmp then
18251: LD_VAR 0 5
18255: IFFALSE 18281
// result := Say ( tmp [ 1 ] , menDialog ) ;
18257: LD_ADDR_VAR 0 4
18261: PUSH
18262: LD_VAR 0 5
18266: PUSH
18267: LD_INT 1
18269: ARRAY
18270: PPUSH
18271: LD_VAR 0 2
18275: PPUSH
18276: CALL_OW 88
18280: ST_TO_ADDR
// if not result then
18281: LD_VAR 0 4
18285: NOT
18286: IFFALSE 18343
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
18288: LD_ADDR_VAR 0 5
18292: PUSH
18293: LD_VAR 0 1
18297: PPUSH
18298: LD_INT 26
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PPUSH
18308: CALL_OW 72
18312: ST_TO_ADDR
// if tmp then
18313: LD_VAR 0 5
18317: IFFALSE 18343
// result := Say ( tmp [ 1 ] , womenDialog ) ;
18319: LD_ADDR_VAR 0 4
18323: PUSH
18324: LD_VAR 0 5
18328: PUSH
18329: LD_INT 1
18331: ARRAY
18332: PPUSH
18333: LD_VAR 0 3
18337: PPUSH
18338: CALL_OW 88
18342: ST_TO_ADDR
// end ; end ; end_of_file
18343: LD_VAR 0 4
18347: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18348: LD_INT 0
18350: PPUSH
// ar_miner := 81 ;
18351: LD_ADDR_EXP 39
18355: PUSH
18356: LD_INT 81
18358: ST_TO_ADDR
// ar_crane := 88 ;
18359: LD_ADDR_EXP 38
18363: PUSH
18364: LD_INT 88
18366: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18367: LD_ADDR_EXP 33
18371: PUSH
18372: LD_INT 89
18374: ST_TO_ADDR
// us_hack := 99 ;
18375: LD_ADDR_EXP 34
18379: PUSH
18380: LD_INT 99
18382: ST_TO_ADDR
// us_artillery := 97 ;
18383: LD_ADDR_EXP 35
18387: PUSH
18388: LD_INT 97
18390: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18391: LD_ADDR_EXP 36
18395: PUSH
18396: LD_INT 91
18398: ST_TO_ADDR
// ar_mortar := 92 ;
18399: LD_ADDR_EXP 37
18403: PUSH
18404: LD_INT 92
18406: ST_TO_ADDR
// ru_flamethrower := 93 ;
18407: LD_ADDR_EXP 40
18411: PUSH
18412: LD_INT 93
18414: ST_TO_ADDR
// ru_radar := 98 ;
18415: LD_ADDR_EXP 32
18419: PUSH
18420: LD_INT 98
18422: ST_TO_ADDR
// tech_Artillery := 80 ;
18423: LD_ADDR_EXP 41
18427: PUSH
18428: LD_INT 80
18430: ST_TO_ADDR
// tech_RadMat := 81 ;
18431: LD_ADDR_EXP 42
18435: PUSH
18436: LD_INT 81
18438: ST_TO_ADDR
// tech_BasicTools := 82 ;
18439: LD_ADDR_EXP 43
18443: PUSH
18444: LD_INT 82
18446: ST_TO_ADDR
// tech_Cargo := 83 ;
18447: LD_ADDR_EXP 44
18451: PUSH
18452: LD_INT 83
18454: ST_TO_ADDR
// tech_Track := 84 ;
18455: LD_ADDR_EXP 45
18459: PUSH
18460: LD_INT 84
18462: ST_TO_ADDR
// tech_Crane := 85 ;
18463: LD_ADDR_EXP 46
18467: PUSH
18468: LD_INT 85
18470: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18471: LD_ADDR_EXP 47
18475: PUSH
18476: LD_INT 86
18478: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18479: LD_ADDR_EXP 48
18483: PUSH
18484: LD_INT 87
18486: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18487: LD_ADDR_EXP 49
18491: PUSH
18492: LD_INT 88
18494: ST_TO_ADDR
// class_mastodont := 31 ;
18495: LD_ADDR_EXP 50
18499: PUSH
18500: LD_INT 31
18502: ST_TO_ADDR
// class_horse := 21 ;
18503: LD_ADDR_EXP 51
18507: PUSH
18508: LD_INT 21
18510: ST_TO_ADDR
// end ;
18511: LD_VAR 0 1
18515: RET
// every 1 do
18516: GO 18518
18518: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18519: CALL 18348 0 0
18523: END
// every 0 0$1 do
18524: GO 18526
18526: DISABLE
// begin enable ;
18527: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18528: LD_STRING updateTimer(
18530: PUSH
18531: LD_OWVAR 1
18535: STR
18536: PUSH
18537: LD_STRING );
18539: STR
18540: PPUSH
18541: CALL_OW 559
// end ;
18545: END
// export function SOS_MapStart ( ) ; begin
18546: LD_INT 0
18548: PPUSH
// if streamModeActive then
18549: LD_EXP 52
18553: IFFALSE 18562
// DefineStreamItems ( true ) ;
18555: LD_INT 1
18557: PPUSH
18558: CALL 20212 0 1
// UpdateFactoryWaypoints ( ) ;
18562: CALL 33796 0 0
// end ;
18566: LD_VAR 0 1
18570: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18571: LD_INT 0
18573: PPUSH
// if p2 = 100 then
18574: LD_VAR 0 2
18578: PUSH
18579: LD_INT 100
18581: EQUAL
18582: IFFALSE 19585
// begin if not StreamModeActive then
18584: LD_EXP 52
18588: NOT
18589: IFFALSE 18599
// StreamModeActive := true ;
18591: LD_ADDR_EXP 52
18595: PUSH
18596: LD_INT 1
18598: ST_TO_ADDR
// if p3 = 0 then
18599: LD_VAR 0 3
18603: PUSH
18604: LD_INT 0
18606: EQUAL
18607: IFFALSE 18613
// InitStreamMode ;
18609: CALL 19748 0 0
// if p3 = 1 then
18613: LD_VAR 0 3
18617: PUSH
18618: LD_INT 1
18620: EQUAL
18621: IFFALSE 18631
// sRocket := true ;
18623: LD_ADDR_EXP 57
18627: PUSH
18628: LD_INT 1
18630: ST_TO_ADDR
// if p3 = 2 then
18631: LD_VAR 0 3
18635: PUSH
18636: LD_INT 2
18638: EQUAL
18639: IFFALSE 18649
// sSpeed := true ;
18641: LD_ADDR_EXP 56
18645: PUSH
18646: LD_INT 1
18648: ST_TO_ADDR
// if p3 = 3 then
18649: LD_VAR 0 3
18653: PUSH
18654: LD_INT 3
18656: EQUAL
18657: IFFALSE 18667
// sEngine := true ;
18659: LD_ADDR_EXP 58
18663: PUSH
18664: LD_INT 1
18666: ST_TO_ADDR
// if p3 = 4 then
18667: LD_VAR 0 3
18671: PUSH
18672: LD_INT 4
18674: EQUAL
18675: IFFALSE 18685
// sSpec := true ;
18677: LD_ADDR_EXP 55
18681: PUSH
18682: LD_INT 1
18684: ST_TO_ADDR
// if p3 = 5 then
18685: LD_VAR 0 3
18689: PUSH
18690: LD_INT 5
18692: EQUAL
18693: IFFALSE 18703
// sLevel := true ;
18695: LD_ADDR_EXP 59
18699: PUSH
18700: LD_INT 1
18702: ST_TO_ADDR
// if p3 = 6 then
18703: LD_VAR 0 3
18707: PUSH
18708: LD_INT 6
18710: EQUAL
18711: IFFALSE 18721
// sArmoury := true ;
18713: LD_ADDR_EXP 60
18717: PUSH
18718: LD_INT 1
18720: ST_TO_ADDR
// if p3 = 7 then
18721: LD_VAR 0 3
18725: PUSH
18726: LD_INT 7
18728: EQUAL
18729: IFFALSE 18739
// sRadar := true ;
18731: LD_ADDR_EXP 61
18735: PUSH
18736: LD_INT 1
18738: ST_TO_ADDR
// if p3 = 8 then
18739: LD_VAR 0 3
18743: PUSH
18744: LD_INT 8
18746: EQUAL
18747: IFFALSE 18757
// sBunker := true ;
18749: LD_ADDR_EXP 62
18753: PUSH
18754: LD_INT 1
18756: ST_TO_ADDR
// if p3 = 9 then
18757: LD_VAR 0 3
18761: PUSH
18762: LD_INT 9
18764: EQUAL
18765: IFFALSE 18775
// sHack := true ;
18767: LD_ADDR_EXP 63
18771: PUSH
18772: LD_INT 1
18774: ST_TO_ADDR
// if p3 = 10 then
18775: LD_VAR 0 3
18779: PUSH
18780: LD_INT 10
18782: EQUAL
18783: IFFALSE 18793
// sFire := true ;
18785: LD_ADDR_EXP 64
18789: PUSH
18790: LD_INT 1
18792: ST_TO_ADDR
// if p3 = 11 then
18793: LD_VAR 0 3
18797: PUSH
18798: LD_INT 11
18800: EQUAL
18801: IFFALSE 18811
// sRefresh := true ;
18803: LD_ADDR_EXP 65
18807: PUSH
18808: LD_INT 1
18810: ST_TO_ADDR
// if p3 = 12 then
18811: LD_VAR 0 3
18815: PUSH
18816: LD_INT 12
18818: EQUAL
18819: IFFALSE 18829
// sExp := true ;
18821: LD_ADDR_EXP 66
18825: PUSH
18826: LD_INT 1
18828: ST_TO_ADDR
// if p3 = 13 then
18829: LD_VAR 0 3
18833: PUSH
18834: LD_INT 13
18836: EQUAL
18837: IFFALSE 18847
// sDepot := true ;
18839: LD_ADDR_EXP 67
18843: PUSH
18844: LD_INT 1
18846: ST_TO_ADDR
// if p3 = 14 then
18847: LD_VAR 0 3
18851: PUSH
18852: LD_INT 14
18854: EQUAL
18855: IFFALSE 18865
// sFlag := true ;
18857: LD_ADDR_EXP 68
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
// if p3 = 15 then
18865: LD_VAR 0 3
18869: PUSH
18870: LD_INT 15
18872: EQUAL
18873: IFFALSE 18883
// sKamikadze := true ;
18875: LD_ADDR_EXP 76
18879: PUSH
18880: LD_INT 1
18882: ST_TO_ADDR
// if p3 = 16 then
18883: LD_VAR 0 3
18887: PUSH
18888: LD_INT 16
18890: EQUAL
18891: IFFALSE 18901
// sTroll := true ;
18893: LD_ADDR_EXP 77
18897: PUSH
18898: LD_INT 1
18900: ST_TO_ADDR
// if p3 = 17 then
18901: LD_VAR 0 3
18905: PUSH
18906: LD_INT 17
18908: EQUAL
18909: IFFALSE 18919
// sSlow := true ;
18911: LD_ADDR_EXP 78
18915: PUSH
18916: LD_INT 1
18918: ST_TO_ADDR
// if p3 = 18 then
18919: LD_VAR 0 3
18923: PUSH
18924: LD_INT 18
18926: EQUAL
18927: IFFALSE 18937
// sLack := true ;
18929: LD_ADDR_EXP 79
18933: PUSH
18934: LD_INT 1
18936: ST_TO_ADDR
// if p3 = 19 then
18937: LD_VAR 0 3
18941: PUSH
18942: LD_INT 19
18944: EQUAL
18945: IFFALSE 18955
// sTank := true ;
18947: LD_ADDR_EXP 81
18951: PUSH
18952: LD_INT 1
18954: ST_TO_ADDR
// if p3 = 20 then
18955: LD_VAR 0 3
18959: PUSH
18960: LD_INT 20
18962: EQUAL
18963: IFFALSE 18973
// sRemote := true ;
18965: LD_ADDR_EXP 82
18969: PUSH
18970: LD_INT 1
18972: ST_TO_ADDR
// if p3 = 21 then
18973: LD_VAR 0 3
18977: PUSH
18978: LD_INT 21
18980: EQUAL
18981: IFFALSE 18991
// sPowell := true ;
18983: LD_ADDR_EXP 83
18987: PUSH
18988: LD_INT 1
18990: ST_TO_ADDR
// if p3 = 22 then
18991: LD_VAR 0 3
18995: PUSH
18996: LD_INT 22
18998: EQUAL
18999: IFFALSE 19009
// sTeleport := true ;
19001: LD_ADDR_EXP 86
19005: PUSH
19006: LD_INT 1
19008: ST_TO_ADDR
// if p3 = 23 then
19009: LD_VAR 0 3
19013: PUSH
19014: LD_INT 23
19016: EQUAL
19017: IFFALSE 19027
// sOilTower := true ;
19019: LD_ADDR_EXP 88
19023: PUSH
19024: LD_INT 1
19026: ST_TO_ADDR
// if p3 = 24 then
19027: LD_VAR 0 3
19031: PUSH
19032: LD_INT 24
19034: EQUAL
19035: IFFALSE 19045
// sShovel := true ;
19037: LD_ADDR_EXP 89
19041: PUSH
19042: LD_INT 1
19044: ST_TO_ADDR
// if p3 = 25 then
19045: LD_VAR 0 3
19049: PUSH
19050: LD_INT 25
19052: EQUAL
19053: IFFALSE 19063
// sSheik := true ;
19055: LD_ADDR_EXP 90
19059: PUSH
19060: LD_INT 1
19062: ST_TO_ADDR
// if p3 = 26 then
19063: LD_VAR 0 3
19067: PUSH
19068: LD_INT 26
19070: EQUAL
19071: IFFALSE 19081
// sEarthquake := true ;
19073: LD_ADDR_EXP 92
19077: PUSH
19078: LD_INT 1
19080: ST_TO_ADDR
// if p3 = 27 then
19081: LD_VAR 0 3
19085: PUSH
19086: LD_INT 27
19088: EQUAL
19089: IFFALSE 19099
// sAI := true ;
19091: LD_ADDR_EXP 93
19095: PUSH
19096: LD_INT 1
19098: ST_TO_ADDR
// if p3 = 28 then
19099: LD_VAR 0 3
19103: PUSH
19104: LD_INT 28
19106: EQUAL
19107: IFFALSE 19117
// sCargo := true ;
19109: LD_ADDR_EXP 96
19113: PUSH
19114: LD_INT 1
19116: ST_TO_ADDR
// if p3 = 29 then
19117: LD_VAR 0 3
19121: PUSH
19122: LD_INT 29
19124: EQUAL
19125: IFFALSE 19135
// sDLaser := true ;
19127: LD_ADDR_EXP 97
19131: PUSH
19132: LD_INT 1
19134: ST_TO_ADDR
// if p3 = 30 then
19135: LD_VAR 0 3
19139: PUSH
19140: LD_INT 30
19142: EQUAL
19143: IFFALSE 19153
// sExchange := true ;
19145: LD_ADDR_EXP 98
19149: PUSH
19150: LD_INT 1
19152: ST_TO_ADDR
// if p3 = 31 then
19153: LD_VAR 0 3
19157: PUSH
19158: LD_INT 31
19160: EQUAL
19161: IFFALSE 19171
// sFac := true ;
19163: LD_ADDR_EXP 99
19167: PUSH
19168: LD_INT 1
19170: ST_TO_ADDR
// if p3 = 32 then
19171: LD_VAR 0 3
19175: PUSH
19176: LD_INT 32
19178: EQUAL
19179: IFFALSE 19189
// sPower := true ;
19181: LD_ADDR_EXP 100
19185: PUSH
19186: LD_INT 1
19188: ST_TO_ADDR
// if p3 = 33 then
19189: LD_VAR 0 3
19193: PUSH
19194: LD_INT 33
19196: EQUAL
19197: IFFALSE 19207
// sRandom := true ;
19199: LD_ADDR_EXP 101
19203: PUSH
19204: LD_INT 1
19206: ST_TO_ADDR
// if p3 = 34 then
19207: LD_VAR 0 3
19211: PUSH
19212: LD_INT 34
19214: EQUAL
19215: IFFALSE 19225
// sShield := true ;
19217: LD_ADDR_EXP 102
19221: PUSH
19222: LD_INT 1
19224: ST_TO_ADDR
// if p3 = 35 then
19225: LD_VAR 0 3
19229: PUSH
19230: LD_INT 35
19232: EQUAL
19233: IFFALSE 19243
// sTime := true ;
19235: LD_ADDR_EXP 103
19239: PUSH
19240: LD_INT 1
19242: ST_TO_ADDR
// if p3 = 36 then
19243: LD_VAR 0 3
19247: PUSH
19248: LD_INT 36
19250: EQUAL
19251: IFFALSE 19261
// sTools := true ;
19253: LD_ADDR_EXP 104
19257: PUSH
19258: LD_INT 1
19260: ST_TO_ADDR
// if p3 = 101 then
19261: LD_VAR 0 3
19265: PUSH
19266: LD_INT 101
19268: EQUAL
19269: IFFALSE 19279
// sSold := true ;
19271: LD_ADDR_EXP 69
19275: PUSH
19276: LD_INT 1
19278: ST_TO_ADDR
// if p3 = 102 then
19279: LD_VAR 0 3
19283: PUSH
19284: LD_INT 102
19286: EQUAL
19287: IFFALSE 19297
// sDiff := true ;
19289: LD_ADDR_EXP 70
19293: PUSH
19294: LD_INT 1
19296: ST_TO_ADDR
// if p3 = 103 then
19297: LD_VAR 0 3
19301: PUSH
19302: LD_INT 103
19304: EQUAL
19305: IFFALSE 19315
// sFog := true ;
19307: LD_ADDR_EXP 73
19311: PUSH
19312: LD_INT 1
19314: ST_TO_ADDR
// if p3 = 104 then
19315: LD_VAR 0 3
19319: PUSH
19320: LD_INT 104
19322: EQUAL
19323: IFFALSE 19333
// sReset := true ;
19325: LD_ADDR_EXP 74
19329: PUSH
19330: LD_INT 1
19332: ST_TO_ADDR
// if p3 = 105 then
19333: LD_VAR 0 3
19337: PUSH
19338: LD_INT 105
19340: EQUAL
19341: IFFALSE 19351
// sSun := true ;
19343: LD_ADDR_EXP 75
19347: PUSH
19348: LD_INT 1
19350: ST_TO_ADDR
// if p3 = 106 then
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 106
19358: EQUAL
19359: IFFALSE 19369
// sTiger := true ;
19361: LD_ADDR_EXP 71
19365: PUSH
19366: LD_INT 1
19368: ST_TO_ADDR
// if p3 = 107 then
19369: LD_VAR 0 3
19373: PUSH
19374: LD_INT 107
19376: EQUAL
19377: IFFALSE 19387
// sBomb := true ;
19379: LD_ADDR_EXP 72
19383: PUSH
19384: LD_INT 1
19386: ST_TO_ADDR
// if p3 = 108 then
19387: LD_VAR 0 3
19391: PUSH
19392: LD_INT 108
19394: EQUAL
19395: IFFALSE 19405
// sWound := true ;
19397: LD_ADDR_EXP 80
19401: PUSH
19402: LD_INT 1
19404: ST_TO_ADDR
// if p3 = 109 then
19405: LD_VAR 0 3
19409: PUSH
19410: LD_INT 109
19412: EQUAL
19413: IFFALSE 19423
// sBetray := true ;
19415: LD_ADDR_EXP 84
19419: PUSH
19420: LD_INT 1
19422: ST_TO_ADDR
// if p3 = 110 then
19423: LD_VAR 0 3
19427: PUSH
19428: LD_INT 110
19430: EQUAL
19431: IFFALSE 19441
// sContamin := true ;
19433: LD_ADDR_EXP 85
19437: PUSH
19438: LD_INT 1
19440: ST_TO_ADDR
// if p3 = 111 then
19441: LD_VAR 0 3
19445: PUSH
19446: LD_INT 111
19448: EQUAL
19449: IFFALSE 19459
// sOil := true ;
19451: LD_ADDR_EXP 87
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// if p3 = 112 then
19459: LD_VAR 0 3
19463: PUSH
19464: LD_INT 112
19466: EQUAL
19467: IFFALSE 19477
// sStu := true ;
19469: LD_ADDR_EXP 91
19473: PUSH
19474: LD_INT 1
19476: ST_TO_ADDR
// if p3 = 113 then
19477: LD_VAR 0 3
19481: PUSH
19482: LD_INT 113
19484: EQUAL
19485: IFFALSE 19495
// sBazooka := true ;
19487: LD_ADDR_EXP 94
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
// if p3 = 114 then
19495: LD_VAR 0 3
19499: PUSH
19500: LD_INT 114
19502: EQUAL
19503: IFFALSE 19513
// sMortar := true ;
19505: LD_ADDR_EXP 95
19509: PUSH
19510: LD_INT 1
19512: ST_TO_ADDR
// if p3 = 115 then
19513: LD_VAR 0 3
19517: PUSH
19518: LD_INT 115
19520: EQUAL
19521: IFFALSE 19531
// sRanger := true ;
19523: LD_ADDR_EXP 105
19527: PUSH
19528: LD_INT 1
19530: ST_TO_ADDR
// if p3 = 116 then
19531: LD_VAR 0 3
19535: PUSH
19536: LD_INT 116
19538: EQUAL
19539: IFFALSE 19549
// sComputer := true ;
19541: LD_ADDR_EXP 106
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// if p3 = 117 then
19549: LD_VAR 0 3
19553: PUSH
19554: LD_INT 117
19556: EQUAL
19557: IFFALSE 19567
// s30 := true ;
19559: LD_ADDR_EXP 107
19563: PUSH
19564: LD_INT 1
19566: ST_TO_ADDR
// if p3 = 118 then
19567: LD_VAR 0 3
19571: PUSH
19572: LD_INT 118
19574: EQUAL
19575: IFFALSE 19585
// s60 := true ;
19577: LD_ADDR_EXP 108
19581: PUSH
19582: LD_INT 1
19584: ST_TO_ADDR
// end ; if p2 = 101 then
19585: LD_VAR 0 2
19589: PUSH
19590: LD_INT 101
19592: EQUAL
19593: IFFALSE 19721
// begin case p3 of 1 :
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 1
19602: DOUBLE
19603: EQUAL
19604: IFTRUE 19608
19606: GO 19615
19608: POP
// hHackUnlimitedResources ; 2 :
19609: CALL 31819 0 0
19613: GO 19721
19615: LD_INT 2
19617: DOUBLE
19618: EQUAL
19619: IFTRUE 19623
19621: GO 19630
19623: POP
// hHackSetLevel10 ; 3 :
19624: CALL 31952 0 0
19628: GO 19721
19630: LD_INT 3
19632: DOUBLE
19633: EQUAL
19634: IFTRUE 19638
19636: GO 19645
19638: POP
// hHackSetLevel10YourUnits ; 4 :
19639: CALL 32037 0 0
19643: GO 19721
19645: LD_INT 4
19647: DOUBLE
19648: EQUAL
19649: IFTRUE 19653
19651: GO 19660
19653: POP
// hHackInvincible ; 5 :
19654: CALL 32485 0 0
19658: GO 19721
19660: LD_INT 5
19662: DOUBLE
19663: EQUAL
19664: IFTRUE 19668
19666: GO 19675
19668: POP
// hHackInvisible ; 6 :
19669: CALL 32596 0 0
19673: GO 19721
19675: LD_INT 6
19677: DOUBLE
19678: EQUAL
19679: IFTRUE 19683
19681: GO 19690
19683: POP
// hHackChangeYourSide ; 7 :
19684: CALL 32653 0 0
19688: GO 19721
19690: LD_INT 7
19692: DOUBLE
19693: EQUAL
19694: IFTRUE 19698
19696: GO 19705
19698: POP
// hHackChangeUnitSide ; 8 :
19699: CALL 32695 0 0
19703: GO 19721
19705: LD_INT 8
19707: DOUBLE
19708: EQUAL
19709: IFTRUE 19713
19711: GO 19720
19713: POP
// hHackFog ; end ;
19714: CALL 32796 0 0
19718: GO 19721
19720: POP
// end ; end ;
19721: LD_VAR 0 7
19725: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19726: GO 19728
19728: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19729: LD_STRING initStreamRollete();
19731: PPUSH
19732: CALL_OW 559
// InitStreamMode ;
19736: CALL 19748 0 0
// DefineStreamItems ( false ) ;
19740: LD_INT 0
19742: PPUSH
19743: CALL 20212 0 1
// end ;
19747: END
// function InitStreamMode ; begin
19748: LD_INT 0
19750: PPUSH
// streamModeActive := false ;
19751: LD_ADDR_EXP 52
19755: PUSH
19756: LD_INT 0
19758: ST_TO_ADDR
// normalCounter := 36 ;
19759: LD_ADDR_EXP 53
19763: PUSH
19764: LD_INT 36
19766: ST_TO_ADDR
// hardcoreCounter := 18 ;
19767: LD_ADDR_EXP 54
19771: PUSH
19772: LD_INT 18
19774: ST_TO_ADDR
// sRocket := false ;
19775: LD_ADDR_EXP 57
19779: PUSH
19780: LD_INT 0
19782: ST_TO_ADDR
// sSpeed := false ;
19783: LD_ADDR_EXP 56
19787: PUSH
19788: LD_INT 0
19790: ST_TO_ADDR
// sEngine := false ;
19791: LD_ADDR_EXP 58
19795: PUSH
19796: LD_INT 0
19798: ST_TO_ADDR
// sSpec := false ;
19799: LD_ADDR_EXP 55
19803: PUSH
19804: LD_INT 0
19806: ST_TO_ADDR
// sLevel := false ;
19807: LD_ADDR_EXP 59
19811: PUSH
19812: LD_INT 0
19814: ST_TO_ADDR
// sArmoury := false ;
19815: LD_ADDR_EXP 60
19819: PUSH
19820: LD_INT 0
19822: ST_TO_ADDR
// sRadar := false ;
19823: LD_ADDR_EXP 61
19827: PUSH
19828: LD_INT 0
19830: ST_TO_ADDR
// sBunker := false ;
19831: LD_ADDR_EXP 62
19835: PUSH
19836: LD_INT 0
19838: ST_TO_ADDR
// sHack := false ;
19839: LD_ADDR_EXP 63
19843: PUSH
19844: LD_INT 0
19846: ST_TO_ADDR
// sFire := false ;
19847: LD_ADDR_EXP 64
19851: PUSH
19852: LD_INT 0
19854: ST_TO_ADDR
// sRefresh := false ;
19855: LD_ADDR_EXP 65
19859: PUSH
19860: LD_INT 0
19862: ST_TO_ADDR
// sExp := false ;
19863: LD_ADDR_EXP 66
19867: PUSH
19868: LD_INT 0
19870: ST_TO_ADDR
// sDepot := false ;
19871: LD_ADDR_EXP 67
19875: PUSH
19876: LD_INT 0
19878: ST_TO_ADDR
// sFlag := false ;
19879: LD_ADDR_EXP 68
19883: PUSH
19884: LD_INT 0
19886: ST_TO_ADDR
// sKamikadze := false ;
19887: LD_ADDR_EXP 76
19891: PUSH
19892: LD_INT 0
19894: ST_TO_ADDR
// sTroll := false ;
19895: LD_ADDR_EXP 77
19899: PUSH
19900: LD_INT 0
19902: ST_TO_ADDR
// sSlow := false ;
19903: LD_ADDR_EXP 78
19907: PUSH
19908: LD_INT 0
19910: ST_TO_ADDR
// sLack := false ;
19911: LD_ADDR_EXP 79
19915: PUSH
19916: LD_INT 0
19918: ST_TO_ADDR
// sTank := false ;
19919: LD_ADDR_EXP 81
19923: PUSH
19924: LD_INT 0
19926: ST_TO_ADDR
// sRemote := false ;
19927: LD_ADDR_EXP 82
19931: PUSH
19932: LD_INT 0
19934: ST_TO_ADDR
// sPowell := false ;
19935: LD_ADDR_EXP 83
19939: PUSH
19940: LD_INT 0
19942: ST_TO_ADDR
// sTeleport := false ;
19943: LD_ADDR_EXP 86
19947: PUSH
19948: LD_INT 0
19950: ST_TO_ADDR
// sOilTower := false ;
19951: LD_ADDR_EXP 88
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// sShovel := false ;
19959: LD_ADDR_EXP 89
19963: PUSH
19964: LD_INT 0
19966: ST_TO_ADDR
// sSheik := false ;
19967: LD_ADDR_EXP 90
19971: PUSH
19972: LD_INT 0
19974: ST_TO_ADDR
// sEarthquake := false ;
19975: LD_ADDR_EXP 92
19979: PUSH
19980: LD_INT 0
19982: ST_TO_ADDR
// sAI := false ;
19983: LD_ADDR_EXP 93
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
// sCargo := false ;
19991: LD_ADDR_EXP 96
19995: PUSH
19996: LD_INT 0
19998: ST_TO_ADDR
// sDLaser := false ;
19999: LD_ADDR_EXP 97
20003: PUSH
20004: LD_INT 0
20006: ST_TO_ADDR
// sExchange := false ;
20007: LD_ADDR_EXP 98
20011: PUSH
20012: LD_INT 0
20014: ST_TO_ADDR
// sFac := false ;
20015: LD_ADDR_EXP 99
20019: PUSH
20020: LD_INT 0
20022: ST_TO_ADDR
// sPower := false ;
20023: LD_ADDR_EXP 100
20027: PUSH
20028: LD_INT 0
20030: ST_TO_ADDR
// sRandom := false ;
20031: LD_ADDR_EXP 101
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
// sShield := false ;
20039: LD_ADDR_EXP 102
20043: PUSH
20044: LD_INT 0
20046: ST_TO_ADDR
// sTime := false ;
20047: LD_ADDR_EXP 103
20051: PUSH
20052: LD_INT 0
20054: ST_TO_ADDR
// sTools := false ;
20055: LD_ADDR_EXP 104
20059: PUSH
20060: LD_INT 0
20062: ST_TO_ADDR
// sSold := false ;
20063: LD_ADDR_EXP 69
20067: PUSH
20068: LD_INT 0
20070: ST_TO_ADDR
// sDiff := false ;
20071: LD_ADDR_EXP 70
20075: PUSH
20076: LD_INT 0
20078: ST_TO_ADDR
// sFog := false ;
20079: LD_ADDR_EXP 73
20083: PUSH
20084: LD_INT 0
20086: ST_TO_ADDR
// sReset := false ;
20087: LD_ADDR_EXP 74
20091: PUSH
20092: LD_INT 0
20094: ST_TO_ADDR
// sSun := false ;
20095: LD_ADDR_EXP 75
20099: PUSH
20100: LD_INT 0
20102: ST_TO_ADDR
// sTiger := false ;
20103: LD_ADDR_EXP 71
20107: PUSH
20108: LD_INT 0
20110: ST_TO_ADDR
// sBomb := false ;
20111: LD_ADDR_EXP 72
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// sWound := false ;
20119: LD_ADDR_EXP 80
20123: PUSH
20124: LD_INT 0
20126: ST_TO_ADDR
// sBetray := false ;
20127: LD_ADDR_EXP 84
20131: PUSH
20132: LD_INT 0
20134: ST_TO_ADDR
// sContamin := false ;
20135: LD_ADDR_EXP 85
20139: PUSH
20140: LD_INT 0
20142: ST_TO_ADDR
// sOil := false ;
20143: LD_ADDR_EXP 87
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// sStu := false ;
20151: LD_ADDR_EXP 91
20155: PUSH
20156: LD_INT 0
20158: ST_TO_ADDR
// sBazooka := false ;
20159: LD_ADDR_EXP 94
20163: PUSH
20164: LD_INT 0
20166: ST_TO_ADDR
// sMortar := false ;
20167: LD_ADDR_EXP 95
20171: PUSH
20172: LD_INT 0
20174: ST_TO_ADDR
// sRanger := false ;
20175: LD_ADDR_EXP 105
20179: PUSH
20180: LD_INT 0
20182: ST_TO_ADDR
// sComputer := false ;
20183: LD_ADDR_EXP 106
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
// s30 := false ;
20191: LD_ADDR_EXP 107
20195: PUSH
20196: LD_INT 0
20198: ST_TO_ADDR
// s60 := false ;
20199: LD_ADDR_EXP 108
20203: PUSH
20204: LD_INT 0
20206: ST_TO_ADDR
// end ;
20207: LD_VAR 0 1
20211: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20212: LD_INT 0
20214: PPUSH
20215: PPUSH
20216: PPUSH
20217: PPUSH
20218: PPUSH
20219: PPUSH
20220: PPUSH
// result := [ ] ;
20221: LD_ADDR_VAR 0 2
20225: PUSH
20226: EMPTY
20227: ST_TO_ADDR
// if campaign_id = 1 then
20228: LD_OWVAR 69
20232: PUSH
20233: LD_INT 1
20235: EQUAL
20236: IFFALSE 23402
// begin case mission_number of 1 :
20238: LD_OWVAR 70
20242: PUSH
20243: LD_INT 1
20245: DOUBLE
20246: EQUAL
20247: IFTRUE 20251
20249: GO 20327
20251: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20252: LD_ADDR_VAR 0 2
20256: PUSH
20257: LD_INT 2
20259: PUSH
20260: LD_INT 4
20262: PUSH
20263: LD_INT 11
20265: PUSH
20266: LD_INT 12
20268: PUSH
20269: LD_INT 15
20271: PUSH
20272: LD_INT 16
20274: PUSH
20275: LD_INT 22
20277: PUSH
20278: LD_INT 23
20280: PUSH
20281: LD_INT 26
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 101
20297: PUSH
20298: LD_INT 102
20300: PUSH
20301: LD_INT 106
20303: PUSH
20304: LD_INT 116
20306: PUSH
20307: LD_INT 117
20309: PUSH
20310: LD_INT 118
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: ST_TO_ADDR
20325: GO 23400
20327: LD_INT 2
20329: DOUBLE
20330: EQUAL
20331: IFTRUE 20335
20333: GO 20419
20335: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20336: LD_ADDR_VAR 0 2
20340: PUSH
20341: LD_INT 2
20343: PUSH
20344: LD_INT 4
20346: PUSH
20347: LD_INT 11
20349: PUSH
20350: LD_INT 12
20352: PUSH
20353: LD_INT 15
20355: PUSH
20356: LD_INT 16
20358: PUSH
20359: LD_INT 22
20361: PUSH
20362: LD_INT 23
20364: PUSH
20365: LD_INT 26
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 101
20381: PUSH
20382: LD_INT 102
20384: PUSH
20385: LD_INT 105
20387: PUSH
20388: LD_INT 106
20390: PUSH
20391: LD_INT 108
20393: PUSH
20394: LD_INT 116
20396: PUSH
20397: LD_INT 117
20399: PUSH
20400: LD_INT 118
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: ST_TO_ADDR
20417: GO 23400
20419: LD_INT 3
20421: DOUBLE
20422: EQUAL
20423: IFTRUE 20427
20425: GO 20515
20427: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20428: LD_ADDR_VAR 0 2
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 4
20438: PUSH
20439: LD_INT 5
20441: PUSH
20442: LD_INT 11
20444: PUSH
20445: LD_INT 12
20447: PUSH
20448: LD_INT 15
20450: PUSH
20451: LD_INT 16
20453: PUSH
20454: LD_INT 22
20456: PUSH
20457: LD_INT 26
20459: PUSH
20460: LD_INT 36
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 101
20477: PUSH
20478: LD_INT 102
20480: PUSH
20481: LD_INT 105
20483: PUSH
20484: LD_INT 106
20486: PUSH
20487: LD_INT 108
20489: PUSH
20490: LD_INT 116
20492: PUSH
20493: LD_INT 117
20495: PUSH
20496: LD_INT 118
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: ST_TO_ADDR
20513: GO 23400
20515: LD_INT 4
20517: DOUBLE
20518: EQUAL
20519: IFTRUE 20523
20521: GO 20619
20523: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20524: LD_ADDR_VAR 0 2
20528: PUSH
20529: LD_INT 2
20531: PUSH
20532: LD_INT 4
20534: PUSH
20535: LD_INT 5
20537: PUSH
20538: LD_INT 8
20540: PUSH
20541: LD_INT 11
20543: PUSH
20544: LD_INT 12
20546: PUSH
20547: LD_INT 15
20549: PUSH
20550: LD_INT 16
20552: PUSH
20553: LD_INT 22
20555: PUSH
20556: LD_INT 23
20558: PUSH
20559: LD_INT 26
20561: PUSH
20562: LD_INT 36
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 101
20581: PUSH
20582: LD_INT 102
20584: PUSH
20585: LD_INT 105
20587: PUSH
20588: LD_INT 106
20590: PUSH
20591: LD_INT 108
20593: PUSH
20594: LD_INT 116
20596: PUSH
20597: LD_INT 117
20599: PUSH
20600: LD_INT 118
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: ST_TO_ADDR
20617: GO 23400
20619: LD_INT 5
20621: DOUBLE
20622: EQUAL
20623: IFTRUE 20627
20625: GO 20739
20627: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20628: LD_ADDR_VAR 0 2
20632: PUSH
20633: LD_INT 2
20635: PUSH
20636: LD_INT 4
20638: PUSH
20639: LD_INT 5
20641: PUSH
20642: LD_INT 6
20644: PUSH
20645: LD_INT 8
20647: PUSH
20648: LD_INT 11
20650: PUSH
20651: LD_INT 12
20653: PUSH
20654: LD_INT 15
20656: PUSH
20657: LD_INT 16
20659: PUSH
20660: LD_INT 22
20662: PUSH
20663: LD_INT 23
20665: PUSH
20666: LD_INT 25
20668: PUSH
20669: LD_INT 26
20671: PUSH
20672: LD_INT 36
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 101
20693: PUSH
20694: LD_INT 102
20696: PUSH
20697: LD_INT 105
20699: PUSH
20700: LD_INT 106
20702: PUSH
20703: LD_INT 108
20705: PUSH
20706: LD_INT 109
20708: PUSH
20709: LD_INT 112
20711: PUSH
20712: LD_INT 116
20714: PUSH
20715: LD_INT 117
20717: PUSH
20718: LD_INT 118
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: ST_TO_ADDR
20737: GO 23400
20739: LD_INT 6
20741: DOUBLE
20742: EQUAL
20743: IFTRUE 20747
20745: GO 20879
20747: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20748: LD_ADDR_VAR 0 2
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: LD_INT 4
20758: PUSH
20759: LD_INT 5
20761: PUSH
20762: LD_INT 6
20764: PUSH
20765: LD_INT 8
20767: PUSH
20768: LD_INT 11
20770: PUSH
20771: LD_INT 12
20773: PUSH
20774: LD_INT 15
20776: PUSH
20777: LD_INT 16
20779: PUSH
20780: LD_INT 20
20782: PUSH
20783: LD_INT 21
20785: PUSH
20786: LD_INT 22
20788: PUSH
20789: LD_INT 23
20791: PUSH
20792: LD_INT 25
20794: PUSH
20795: LD_INT 26
20797: PUSH
20798: LD_INT 30
20800: PUSH
20801: LD_INT 31
20803: PUSH
20804: LD_INT 32
20806: PUSH
20807: LD_INT 36
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 101
20833: PUSH
20834: LD_INT 102
20836: PUSH
20837: LD_INT 105
20839: PUSH
20840: LD_INT 106
20842: PUSH
20843: LD_INT 108
20845: PUSH
20846: LD_INT 109
20848: PUSH
20849: LD_INT 112
20851: PUSH
20852: LD_INT 116
20854: PUSH
20855: LD_INT 117
20857: PUSH
20858: LD_INT 118
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: ST_TO_ADDR
20877: GO 23400
20879: LD_INT 7
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20999
20887: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20888: LD_ADDR_VAR 0 2
20892: PUSH
20893: LD_INT 2
20895: PUSH
20896: LD_INT 4
20898: PUSH
20899: LD_INT 5
20901: PUSH
20902: LD_INT 7
20904: PUSH
20905: LD_INT 11
20907: PUSH
20908: LD_INT 12
20910: PUSH
20911: LD_INT 15
20913: PUSH
20914: LD_INT 16
20916: PUSH
20917: LD_INT 20
20919: PUSH
20920: LD_INT 21
20922: PUSH
20923: LD_INT 22
20925: PUSH
20926: LD_INT 23
20928: PUSH
20929: LD_INT 25
20931: PUSH
20932: LD_INT 26
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 101
20953: PUSH
20954: LD_INT 102
20956: PUSH
20957: LD_INT 103
20959: PUSH
20960: LD_INT 105
20962: PUSH
20963: LD_INT 106
20965: PUSH
20966: LD_INT 108
20968: PUSH
20969: LD_INT 112
20971: PUSH
20972: LD_INT 116
20974: PUSH
20975: LD_INT 117
20977: PUSH
20978: LD_INT 118
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: ST_TO_ADDR
20997: GO 23400
20999: LD_INT 8
21001: DOUBLE
21002: EQUAL
21003: IFTRUE 21007
21005: GO 21147
21007: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21008: LD_ADDR_VAR 0 2
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 4
21018: PUSH
21019: LD_INT 5
21021: PUSH
21022: LD_INT 6
21024: PUSH
21025: LD_INT 7
21027: PUSH
21028: LD_INT 8
21030: PUSH
21031: LD_INT 11
21033: PUSH
21034: LD_INT 12
21036: PUSH
21037: LD_INT 15
21039: PUSH
21040: LD_INT 16
21042: PUSH
21043: LD_INT 20
21045: PUSH
21046: LD_INT 21
21048: PUSH
21049: LD_INT 22
21051: PUSH
21052: LD_INT 23
21054: PUSH
21055: LD_INT 25
21057: PUSH
21058: LD_INT 26
21060: PUSH
21061: LD_INT 30
21063: PUSH
21064: LD_INT 31
21066: PUSH
21067: LD_INT 32
21069: PUSH
21070: LD_INT 36
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 101
21097: PUSH
21098: LD_INT 102
21100: PUSH
21101: LD_INT 103
21103: PUSH
21104: LD_INT 105
21106: PUSH
21107: LD_INT 106
21109: PUSH
21110: LD_INT 108
21112: PUSH
21113: LD_INT 109
21115: PUSH
21116: LD_INT 112
21118: PUSH
21119: LD_INT 116
21121: PUSH
21122: LD_INT 117
21124: PUSH
21125: LD_INT 118
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: ST_TO_ADDR
21145: GO 23400
21147: LD_INT 9
21149: DOUBLE
21150: EQUAL
21151: IFTRUE 21155
21153: GO 21303
21155: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21156: LD_ADDR_VAR 0 2
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: LD_INT 4
21166: PUSH
21167: LD_INT 5
21169: PUSH
21170: LD_INT 6
21172: PUSH
21173: LD_INT 7
21175: PUSH
21176: LD_INT 8
21178: PUSH
21179: LD_INT 11
21181: PUSH
21182: LD_INT 12
21184: PUSH
21185: LD_INT 15
21187: PUSH
21188: LD_INT 16
21190: PUSH
21191: LD_INT 20
21193: PUSH
21194: LD_INT 21
21196: PUSH
21197: LD_INT 22
21199: PUSH
21200: LD_INT 23
21202: PUSH
21203: LD_INT 25
21205: PUSH
21206: LD_INT 26
21208: PUSH
21209: LD_INT 28
21211: PUSH
21212: LD_INT 30
21214: PUSH
21215: LD_INT 31
21217: PUSH
21218: LD_INT 32
21220: PUSH
21221: LD_INT 36
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 101
21249: PUSH
21250: LD_INT 102
21252: PUSH
21253: LD_INT 103
21255: PUSH
21256: LD_INT 105
21258: PUSH
21259: LD_INT 106
21261: PUSH
21262: LD_INT 108
21264: PUSH
21265: LD_INT 109
21267: PUSH
21268: LD_INT 112
21270: PUSH
21271: LD_INT 114
21273: PUSH
21274: LD_INT 116
21276: PUSH
21277: LD_INT 117
21279: PUSH
21280: LD_INT 118
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: ST_TO_ADDR
21301: GO 23400
21303: LD_INT 10
21305: DOUBLE
21306: EQUAL
21307: IFTRUE 21311
21309: GO 21507
21311: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21312: LD_ADDR_VAR 0 2
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 4
21322: PUSH
21323: LD_INT 5
21325: PUSH
21326: LD_INT 6
21328: PUSH
21329: LD_INT 7
21331: PUSH
21332: LD_INT 8
21334: PUSH
21335: LD_INT 9
21337: PUSH
21338: LD_INT 10
21340: PUSH
21341: LD_INT 11
21343: PUSH
21344: LD_INT 12
21346: PUSH
21347: LD_INT 13
21349: PUSH
21350: LD_INT 14
21352: PUSH
21353: LD_INT 15
21355: PUSH
21356: LD_INT 16
21358: PUSH
21359: LD_INT 17
21361: PUSH
21362: LD_INT 18
21364: PUSH
21365: LD_INT 19
21367: PUSH
21368: LD_INT 20
21370: PUSH
21371: LD_INT 21
21373: PUSH
21374: LD_INT 22
21376: PUSH
21377: LD_INT 23
21379: PUSH
21380: LD_INT 24
21382: PUSH
21383: LD_INT 25
21385: PUSH
21386: LD_INT 26
21388: PUSH
21389: LD_INT 28
21391: PUSH
21392: LD_INT 30
21394: PUSH
21395: LD_INT 31
21397: PUSH
21398: LD_INT 32
21400: PUSH
21401: LD_INT 36
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 101
21437: PUSH
21438: LD_INT 102
21440: PUSH
21441: LD_INT 103
21443: PUSH
21444: LD_INT 104
21446: PUSH
21447: LD_INT 105
21449: PUSH
21450: LD_INT 106
21452: PUSH
21453: LD_INT 107
21455: PUSH
21456: LD_INT 108
21458: PUSH
21459: LD_INT 109
21461: PUSH
21462: LD_INT 110
21464: PUSH
21465: LD_INT 111
21467: PUSH
21468: LD_INT 112
21470: PUSH
21471: LD_INT 114
21473: PUSH
21474: LD_INT 116
21476: PUSH
21477: LD_INT 117
21479: PUSH
21480: LD_INT 118
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: ST_TO_ADDR
21505: GO 23400
21507: LD_INT 11
21509: DOUBLE
21510: EQUAL
21511: IFTRUE 21515
21513: GO 21719
21515: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21516: LD_ADDR_VAR 0 2
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: LD_INT 3
21526: PUSH
21527: LD_INT 4
21529: PUSH
21530: LD_INT 5
21532: PUSH
21533: LD_INT 6
21535: PUSH
21536: LD_INT 7
21538: PUSH
21539: LD_INT 8
21541: PUSH
21542: LD_INT 9
21544: PUSH
21545: LD_INT 10
21547: PUSH
21548: LD_INT 11
21550: PUSH
21551: LD_INT 12
21553: PUSH
21554: LD_INT 13
21556: PUSH
21557: LD_INT 14
21559: PUSH
21560: LD_INT 15
21562: PUSH
21563: LD_INT 16
21565: PUSH
21566: LD_INT 17
21568: PUSH
21569: LD_INT 18
21571: PUSH
21572: LD_INT 19
21574: PUSH
21575: LD_INT 20
21577: PUSH
21578: LD_INT 21
21580: PUSH
21581: LD_INT 22
21583: PUSH
21584: LD_INT 23
21586: PUSH
21587: LD_INT 24
21589: PUSH
21590: LD_INT 25
21592: PUSH
21593: LD_INT 26
21595: PUSH
21596: LD_INT 28
21598: PUSH
21599: LD_INT 30
21601: PUSH
21602: LD_INT 31
21604: PUSH
21605: LD_INT 32
21607: PUSH
21608: LD_INT 34
21610: PUSH
21611: LD_INT 36
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 101
21649: PUSH
21650: LD_INT 102
21652: PUSH
21653: LD_INT 103
21655: PUSH
21656: LD_INT 104
21658: PUSH
21659: LD_INT 105
21661: PUSH
21662: LD_INT 106
21664: PUSH
21665: LD_INT 107
21667: PUSH
21668: LD_INT 108
21670: PUSH
21671: LD_INT 109
21673: PUSH
21674: LD_INT 110
21676: PUSH
21677: LD_INT 111
21679: PUSH
21680: LD_INT 112
21682: PUSH
21683: LD_INT 114
21685: PUSH
21686: LD_INT 116
21688: PUSH
21689: LD_INT 117
21691: PUSH
21692: LD_INT 118
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: ST_TO_ADDR
21717: GO 23400
21719: LD_INT 12
21721: DOUBLE
21722: EQUAL
21723: IFTRUE 21727
21725: GO 21947
21727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21728: LD_ADDR_VAR 0 2
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 3
21741: PUSH
21742: LD_INT 4
21744: PUSH
21745: LD_INT 5
21747: PUSH
21748: LD_INT 6
21750: PUSH
21751: LD_INT 7
21753: PUSH
21754: LD_INT 8
21756: PUSH
21757: LD_INT 9
21759: PUSH
21760: LD_INT 10
21762: PUSH
21763: LD_INT 11
21765: PUSH
21766: LD_INT 12
21768: PUSH
21769: LD_INT 13
21771: PUSH
21772: LD_INT 14
21774: PUSH
21775: LD_INT 15
21777: PUSH
21778: LD_INT 16
21780: PUSH
21781: LD_INT 17
21783: PUSH
21784: LD_INT 18
21786: PUSH
21787: LD_INT 19
21789: PUSH
21790: LD_INT 20
21792: PUSH
21793: LD_INT 21
21795: PUSH
21796: LD_INT 22
21798: PUSH
21799: LD_INT 23
21801: PUSH
21802: LD_INT 24
21804: PUSH
21805: LD_INT 25
21807: PUSH
21808: LD_INT 26
21810: PUSH
21811: LD_INT 27
21813: PUSH
21814: LD_INT 28
21816: PUSH
21817: LD_INT 30
21819: PUSH
21820: LD_INT 31
21822: PUSH
21823: LD_INT 32
21825: PUSH
21826: LD_INT 33
21828: PUSH
21829: LD_INT 34
21831: PUSH
21832: LD_INT 36
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 101
21873: PUSH
21874: LD_INT 102
21876: PUSH
21877: LD_INT 103
21879: PUSH
21880: LD_INT 104
21882: PUSH
21883: LD_INT 105
21885: PUSH
21886: LD_INT 106
21888: PUSH
21889: LD_INT 107
21891: PUSH
21892: LD_INT 108
21894: PUSH
21895: LD_INT 109
21897: PUSH
21898: LD_INT 110
21900: PUSH
21901: LD_INT 111
21903: PUSH
21904: LD_INT 112
21906: PUSH
21907: LD_INT 113
21909: PUSH
21910: LD_INT 114
21912: PUSH
21913: LD_INT 116
21915: PUSH
21916: LD_INT 117
21918: PUSH
21919: LD_INT 118
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: ST_TO_ADDR
21945: GO 23400
21947: LD_INT 13
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 22163
21955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21956: LD_ADDR_VAR 0 2
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: LD_INT 2
21966: PUSH
21967: LD_INT 3
21969: PUSH
21970: LD_INT 4
21972: PUSH
21973: LD_INT 5
21975: PUSH
21976: LD_INT 8
21978: PUSH
21979: LD_INT 9
21981: PUSH
21982: LD_INT 10
21984: PUSH
21985: LD_INT 11
21987: PUSH
21988: LD_INT 12
21990: PUSH
21991: LD_INT 14
21993: PUSH
21994: LD_INT 15
21996: PUSH
21997: LD_INT 16
21999: PUSH
22000: LD_INT 17
22002: PUSH
22003: LD_INT 18
22005: PUSH
22006: LD_INT 19
22008: PUSH
22009: LD_INT 20
22011: PUSH
22012: LD_INT 21
22014: PUSH
22015: LD_INT 22
22017: PUSH
22018: LD_INT 23
22020: PUSH
22021: LD_INT 24
22023: PUSH
22024: LD_INT 25
22026: PUSH
22027: LD_INT 26
22029: PUSH
22030: LD_INT 27
22032: PUSH
22033: LD_INT 28
22035: PUSH
22036: LD_INT 30
22038: PUSH
22039: LD_INT 31
22041: PUSH
22042: LD_INT 32
22044: PUSH
22045: LD_INT 33
22047: PUSH
22048: LD_INT 34
22050: PUSH
22051: LD_INT 36
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 101
22089: PUSH
22090: LD_INT 102
22092: PUSH
22093: LD_INT 103
22095: PUSH
22096: LD_INT 104
22098: PUSH
22099: LD_INT 105
22101: PUSH
22102: LD_INT 106
22104: PUSH
22105: LD_INT 107
22107: PUSH
22108: LD_INT 108
22110: PUSH
22111: LD_INT 109
22113: PUSH
22114: LD_INT 110
22116: PUSH
22117: LD_INT 111
22119: PUSH
22120: LD_INT 112
22122: PUSH
22123: LD_INT 113
22125: PUSH
22126: LD_INT 114
22128: PUSH
22129: LD_INT 116
22131: PUSH
22132: LD_INT 117
22134: PUSH
22135: LD_INT 118
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: ST_TO_ADDR
22161: GO 23400
22163: LD_INT 14
22165: DOUBLE
22166: EQUAL
22167: IFTRUE 22171
22169: GO 22395
22171: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22172: LD_ADDR_VAR 0 2
22176: PUSH
22177: LD_INT 1
22179: PUSH
22180: LD_INT 2
22182: PUSH
22183: LD_INT 3
22185: PUSH
22186: LD_INT 4
22188: PUSH
22189: LD_INT 5
22191: PUSH
22192: LD_INT 6
22194: PUSH
22195: LD_INT 7
22197: PUSH
22198: LD_INT 8
22200: PUSH
22201: LD_INT 9
22203: PUSH
22204: LD_INT 10
22206: PUSH
22207: LD_INT 11
22209: PUSH
22210: LD_INT 12
22212: PUSH
22213: LD_INT 13
22215: PUSH
22216: LD_INT 14
22218: PUSH
22219: LD_INT 15
22221: PUSH
22222: LD_INT 16
22224: PUSH
22225: LD_INT 17
22227: PUSH
22228: LD_INT 18
22230: PUSH
22231: LD_INT 19
22233: PUSH
22234: LD_INT 20
22236: PUSH
22237: LD_INT 21
22239: PUSH
22240: LD_INT 22
22242: PUSH
22243: LD_INT 23
22245: PUSH
22246: LD_INT 24
22248: PUSH
22249: LD_INT 25
22251: PUSH
22252: LD_INT 26
22254: PUSH
22255: LD_INT 27
22257: PUSH
22258: LD_INT 28
22260: PUSH
22261: LD_INT 29
22263: PUSH
22264: LD_INT 30
22266: PUSH
22267: LD_INT 31
22269: PUSH
22270: LD_INT 32
22272: PUSH
22273: LD_INT 33
22275: PUSH
22276: LD_INT 34
22278: PUSH
22279: LD_INT 36
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 101
22321: PUSH
22322: LD_INT 102
22324: PUSH
22325: LD_INT 103
22327: PUSH
22328: LD_INT 104
22330: PUSH
22331: LD_INT 105
22333: PUSH
22334: LD_INT 106
22336: PUSH
22337: LD_INT 107
22339: PUSH
22340: LD_INT 108
22342: PUSH
22343: LD_INT 109
22345: PUSH
22346: LD_INT 110
22348: PUSH
22349: LD_INT 111
22351: PUSH
22352: LD_INT 112
22354: PUSH
22355: LD_INT 113
22357: PUSH
22358: LD_INT 114
22360: PUSH
22361: LD_INT 116
22363: PUSH
22364: LD_INT 117
22366: PUSH
22367: LD_INT 118
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: ST_TO_ADDR
22393: GO 23400
22395: LD_INT 15
22397: DOUBLE
22398: EQUAL
22399: IFTRUE 22403
22401: GO 22627
22403: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22404: LD_ADDR_VAR 0 2
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: LD_INT 4
22420: PUSH
22421: LD_INT 5
22423: PUSH
22424: LD_INT 6
22426: PUSH
22427: LD_INT 7
22429: PUSH
22430: LD_INT 8
22432: PUSH
22433: LD_INT 9
22435: PUSH
22436: LD_INT 10
22438: PUSH
22439: LD_INT 11
22441: PUSH
22442: LD_INT 12
22444: PUSH
22445: LD_INT 13
22447: PUSH
22448: LD_INT 14
22450: PUSH
22451: LD_INT 15
22453: PUSH
22454: LD_INT 16
22456: PUSH
22457: LD_INT 17
22459: PUSH
22460: LD_INT 18
22462: PUSH
22463: LD_INT 19
22465: PUSH
22466: LD_INT 20
22468: PUSH
22469: LD_INT 21
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_INT 23
22477: PUSH
22478: LD_INT 24
22480: PUSH
22481: LD_INT 25
22483: PUSH
22484: LD_INT 26
22486: PUSH
22487: LD_INT 27
22489: PUSH
22490: LD_INT 28
22492: PUSH
22493: LD_INT 29
22495: PUSH
22496: LD_INT 30
22498: PUSH
22499: LD_INT 31
22501: PUSH
22502: LD_INT 32
22504: PUSH
22505: LD_INT 33
22507: PUSH
22508: LD_INT 34
22510: PUSH
22511: LD_INT 36
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 101
22553: PUSH
22554: LD_INT 102
22556: PUSH
22557: LD_INT 103
22559: PUSH
22560: LD_INT 104
22562: PUSH
22563: LD_INT 105
22565: PUSH
22566: LD_INT 106
22568: PUSH
22569: LD_INT 107
22571: PUSH
22572: LD_INT 108
22574: PUSH
22575: LD_INT 109
22577: PUSH
22578: LD_INT 110
22580: PUSH
22581: LD_INT 111
22583: PUSH
22584: LD_INT 112
22586: PUSH
22587: LD_INT 113
22589: PUSH
22590: LD_INT 114
22592: PUSH
22593: LD_INT 116
22595: PUSH
22596: LD_INT 117
22598: PUSH
22599: LD_INT 118
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: ST_TO_ADDR
22625: GO 23400
22627: LD_INT 16
22629: DOUBLE
22630: EQUAL
22631: IFTRUE 22635
22633: GO 22771
22635: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22636: LD_ADDR_VAR 0 2
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 4
22646: PUSH
22647: LD_INT 5
22649: PUSH
22650: LD_INT 7
22652: PUSH
22653: LD_INT 11
22655: PUSH
22656: LD_INT 12
22658: PUSH
22659: LD_INT 15
22661: PUSH
22662: LD_INT 16
22664: PUSH
22665: LD_INT 20
22667: PUSH
22668: LD_INT 21
22670: PUSH
22671: LD_INT 22
22673: PUSH
22674: LD_INT 23
22676: PUSH
22677: LD_INT 25
22679: PUSH
22680: LD_INT 26
22682: PUSH
22683: LD_INT 30
22685: PUSH
22686: LD_INT 31
22688: PUSH
22689: LD_INT 32
22691: PUSH
22692: LD_INT 33
22694: PUSH
22695: LD_INT 34
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 101
22721: PUSH
22722: LD_INT 102
22724: PUSH
22725: LD_INT 103
22727: PUSH
22728: LD_INT 106
22730: PUSH
22731: LD_INT 108
22733: PUSH
22734: LD_INT 112
22736: PUSH
22737: LD_INT 113
22739: PUSH
22740: LD_INT 114
22742: PUSH
22743: LD_INT 116
22745: PUSH
22746: LD_INT 117
22748: PUSH
22749: LD_INT 118
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: ST_TO_ADDR
22769: GO 23400
22771: LD_INT 17
22773: DOUBLE
22774: EQUAL
22775: IFTRUE 22779
22777: GO 23003
22779: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22780: LD_ADDR_VAR 0 2
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: LD_INT 2
22790: PUSH
22791: LD_INT 3
22793: PUSH
22794: LD_INT 4
22796: PUSH
22797: LD_INT 5
22799: PUSH
22800: LD_INT 6
22802: PUSH
22803: LD_INT 7
22805: PUSH
22806: LD_INT 8
22808: PUSH
22809: LD_INT 9
22811: PUSH
22812: LD_INT 10
22814: PUSH
22815: LD_INT 11
22817: PUSH
22818: LD_INT 12
22820: PUSH
22821: LD_INT 13
22823: PUSH
22824: LD_INT 14
22826: PUSH
22827: LD_INT 15
22829: PUSH
22830: LD_INT 16
22832: PUSH
22833: LD_INT 17
22835: PUSH
22836: LD_INT 18
22838: PUSH
22839: LD_INT 19
22841: PUSH
22842: LD_INT 20
22844: PUSH
22845: LD_INT 21
22847: PUSH
22848: LD_INT 22
22850: PUSH
22851: LD_INT 23
22853: PUSH
22854: LD_INT 24
22856: PUSH
22857: LD_INT 25
22859: PUSH
22860: LD_INT 26
22862: PUSH
22863: LD_INT 27
22865: PUSH
22866: LD_INT 28
22868: PUSH
22869: LD_INT 29
22871: PUSH
22872: LD_INT 30
22874: PUSH
22875: LD_INT 31
22877: PUSH
22878: LD_INT 32
22880: PUSH
22881: LD_INT 33
22883: PUSH
22884: LD_INT 34
22886: PUSH
22887: LD_INT 36
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 101
22929: PUSH
22930: LD_INT 102
22932: PUSH
22933: LD_INT 103
22935: PUSH
22936: LD_INT 104
22938: PUSH
22939: LD_INT 105
22941: PUSH
22942: LD_INT 106
22944: PUSH
22945: LD_INT 107
22947: PUSH
22948: LD_INT 108
22950: PUSH
22951: LD_INT 109
22953: PUSH
22954: LD_INT 110
22956: PUSH
22957: LD_INT 111
22959: PUSH
22960: LD_INT 112
22962: PUSH
22963: LD_INT 113
22965: PUSH
22966: LD_INT 114
22968: PUSH
22969: LD_INT 116
22971: PUSH
22972: LD_INT 117
22974: PUSH
22975: LD_INT 118
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: ST_TO_ADDR
23001: GO 23400
23003: LD_INT 18
23005: DOUBLE
23006: EQUAL
23007: IFTRUE 23011
23009: GO 23159
23011: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23012: LD_ADDR_VAR 0 2
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: LD_INT 4
23022: PUSH
23023: LD_INT 5
23025: PUSH
23026: LD_INT 7
23028: PUSH
23029: LD_INT 11
23031: PUSH
23032: LD_INT 12
23034: PUSH
23035: LD_INT 15
23037: PUSH
23038: LD_INT 16
23040: PUSH
23041: LD_INT 20
23043: PUSH
23044: LD_INT 21
23046: PUSH
23047: LD_INT 22
23049: PUSH
23050: LD_INT 23
23052: PUSH
23053: LD_INT 25
23055: PUSH
23056: LD_INT 26
23058: PUSH
23059: LD_INT 30
23061: PUSH
23062: LD_INT 31
23064: PUSH
23065: LD_INT 32
23067: PUSH
23068: LD_INT 33
23070: PUSH
23071: LD_INT 34
23073: PUSH
23074: LD_INT 35
23076: PUSH
23077: LD_INT 36
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 101
23105: PUSH
23106: LD_INT 102
23108: PUSH
23109: LD_INT 103
23111: PUSH
23112: LD_INT 106
23114: PUSH
23115: LD_INT 108
23117: PUSH
23118: LD_INT 112
23120: PUSH
23121: LD_INT 113
23123: PUSH
23124: LD_INT 114
23126: PUSH
23127: LD_INT 115
23129: PUSH
23130: LD_INT 116
23132: PUSH
23133: LD_INT 117
23135: PUSH
23136: LD_INT 118
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: ST_TO_ADDR
23157: GO 23400
23159: LD_INT 19
23161: DOUBLE
23162: EQUAL
23163: IFTRUE 23167
23165: GO 23399
23167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23168: LD_ADDR_VAR 0 2
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: LD_INT 2
23178: PUSH
23179: LD_INT 3
23181: PUSH
23182: LD_INT 4
23184: PUSH
23185: LD_INT 5
23187: PUSH
23188: LD_INT 6
23190: PUSH
23191: LD_INT 7
23193: PUSH
23194: LD_INT 8
23196: PUSH
23197: LD_INT 9
23199: PUSH
23200: LD_INT 10
23202: PUSH
23203: LD_INT 11
23205: PUSH
23206: LD_INT 12
23208: PUSH
23209: LD_INT 13
23211: PUSH
23212: LD_INT 14
23214: PUSH
23215: LD_INT 15
23217: PUSH
23218: LD_INT 16
23220: PUSH
23221: LD_INT 17
23223: PUSH
23224: LD_INT 18
23226: PUSH
23227: LD_INT 19
23229: PUSH
23230: LD_INT 20
23232: PUSH
23233: LD_INT 21
23235: PUSH
23236: LD_INT 22
23238: PUSH
23239: LD_INT 23
23241: PUSH
23242: LD_INT 24
23244: PUSH
23245: LD_INT 25
23247: PUSH
23248: LD_INT 26
23250: PUSH
23251: LD_INT 27
23253: PUSH
23254: LD_INT 28
23256: PUSH
23257: LD_INT 29
23259: PUSH
23260: LD_INT 30
23262: PUSH
23263: LD_INT 31
23265: PUSH
23266: LD_INT 32
23268: PUSH
23269: LD_INT 33
23271: PUSH
23272: LD_INT 34
23274: PUSH
23275: LD_INT 35
23277: PUSH
23278: LD_INT 36
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 101
23321: PUSH
23322: LD_INT 102
23324: PUSH
23325: LD_INT 103
23327: PUSH
23328: LD_INT 104
23330: PUSH
23331: LD_INT 105
23333: PUSH
23334: LD_INT 106
23336: PUSH
23337: LD_INT 107
23339: PUSH
23340: LD_INT 108
23342: PUSH
23343: LD_INT 109
23345: PUSH
23346: LD_INT 110
23348: PUSH
23349: LD_INT 111
23351: PUSH
23352: LD_INT 112
23354: PUSH
23355: LD_INT 113
23357: PUSH
23358: LD_INT 114
23360: PUSH
23361: LD_INT 115
23363: PUSH
23364: LD_INT 116
23366: PUSH
23367: LD_INT 117
23369: PUSH
23370: LD_INT 118
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: ST_TO_ADDR
23397: GO 23400
23399: POP
// end else
23400: GO 23631
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23402: LD_ADDR_VAR 0 2
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: LD_INT 3
23415: PUSH
23416: LD_INT 4
23418: PUSH
23419: LD_INT 5
23421: PUSH
23422: LD_INT 6
23424: PUSH
23425: LD_INT 7
23427: PUSH
23428: LD_INT 8
23430: PUSH
23431: LD_INT 9
23433: PUSH
23434: LD_INT 10
23436: PUSH
23437: LD_INT 11
23439: PUSH
23440: LD_INT 12
23442: PUSH
23443: LD_INT 13
23445: PUSH
23446: LD_INT 14
23448: PUSH
23449: LD_INT 15
23451: PUSH
23452: LD_INT 16
23454: PUSH
23455: LD_INT 17
23457: PUSH
23458: LD_INT 18
23460: PUSH
23461: LD_INT 19
23463: PUSH
23464: LD_INT 20
23466: PUSH
23467: LD_INT 21
23469: PUSH
23470: LD_INT 22
23472: PUSH
23473: LD_INT 23
23475: PUSH
23476: LD_INT 24
23478: PUSH
23479: LD_INT 25
23481: PUSH
23482: LD_INT 26
23484: PUSH
23485: LD_INT 27
23487: PUSH
23488: LD_INT 28
23490: PUSH
23491: LD_INT 29
23493: PUSH
23494: LD_INT 30
23496: PUSH
23497: LD_INT 31
23499: PUSH
23500: LD_INT 32
23502: PUSH
23503: LD_INT 33
23505: PUSH
23506: LD_INT 34
23508: PUSH
23509: LD_INT 35
23511: PUSH
23512: LD_INT 36
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 101
23555: PUSH
23556: LD_INT 102
23558: PUSH
23559: LD_INT 103
23561: PUSH
23562: LD_INT 104
23564: PUSH
23565: LD_INT 105
23567: PUSH
23568: LD_INT 106
23570: PUSH
23571: LD_INT 107
23573: PUSH
23574: LD_INT 108
23576: PUSH
23577: LD_INT 109
23579: PUSH
23580: LD_INT 110
23582: PUSH
23583: LD_INT 111
23585: PUSH
23586: LD_INT 112
23588: PUSH
23589: LD_INT 113
23591: PUSH
23592: LD_INT 114
23594: PUSH
23595: LD_INT 115
23597: PUSH
23598: LD_INT 116
23600: PUSH
23601: LD_INT 117
23603: PUSH
23604: LD_INT 118
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: ST_TO_ADDR
// if result then
23631: LD_VAR 0 2
23635: IFFALSE 24421
// begin normal :=  ;
23637: LD_ADDR_VAR 0 5
23641: PUSH
23642: LD_STRING 
23644: ST_TO_ADDR
// hardcore :=  ;
23645: LD_ADDR_VAR 0 6
23649: PUSH
23650: LD_STRING 
23652: ST_TO_ADDR
// active :=  ;
23653: LD_ADDR_VAR 0 7
23657: PUSH
23658: LD_STRING 
23660: ST_TO_ADDR
// for i = 1 to normalCounter do
23661: LD_ADDR_VAR 0 8
23665: PUSH
23666: DOUBLE
23667: LD_INT 1
23669: DEC
23670: ST_TO_ADDR
23671: LD_EXP 53
23675: PUSH
23676: FOR_TO
23677: IFFALSE 23778
// begin tmp := 0 ;
23679: LD_ADDR_VAR 0 3
23683: PUSH
23684: LD_STRING 0
23686: ST_TO_ADDR
// if result [ 1 ] then
23687: LD_VAR 0 2
23691: PUSH
23692: LD_INT 1
23694: ARRAY
23695: IFFALSE 23760
// if result [ 1 ] [ 1 ] = i then
23697: LD_VAR 0 2
23701: PUSH
23702: LD_INT 1
23704: ARRAY
23705: PUSH
23706: LD_INT 1
23708: ARRAY
23709: PUSH
23710: LD_VAR 0 8
23714: EQUAL
23715: IFFALSE 23760
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23717: LD_ADDR_VAR 0 2
23721: PUSH
23722: LD_VAR 0 2
23726: PPUSH
23727: LD_INT 1
23729: PPUSH
23730: LD_VAR 0 2
23734: PUSH
23735: LD_INT 1
23737: ARRAY
23738: PPUSH
23739: LD_INT 1
23741: PPUSH
23742: CALL_OW 3
23746: PPUSH
23747: CALL_OW 1
23751: ST_TO_ADDR
// tmp := 1 ;
23752: LD_ADDR_VAR 0 3
23756: PUSH
23757: LD_STRING 1
23759: ST_TO_ADDR
// end ; normal := normal & tmp ;
23760: LD_ADDR_VAR 0 5
23764: PUSH
23765: LD_VAR 0 5
23769: PUSH
23770: LD_VAR 0 3
23774: STR
23775: ST_TO_ADDR
// end ;
23776: GO 23676
23778: POP
23779: POP
// for i = 1 to hardcoreCounter do
23780: LD_ADDR_VAR 0 8
23784: PUSH
23785: DOUBLE
23786: LD_INT 1
23788: DEC
23789: ST_TO_ADDR
23790: LD_EXP 54
23794: PUSH
23795: FOR_TO
23796: IFFALSE 23901
// begin tmp := 0 ;
23798: LD_ADDR_VAR 0 3
23802: PUSH
23803: LD_STRING 0
23805: ST_TO_ADDR
// if result [ 2 ] then
23806: LD_VAR 0 2
23810: PUSH
23811: LD_INT 2
23813: ARRAY
23814: IFFALSE 23883
// if result [ 2 ] [ 1 ] = 100 + i then
23816: LD_VAR 0 2
23820: PUSH
23821: LD_INT 2
23823: ARRAY
23824: PUSH
23825: LD_INT 1
23827: ARRAY
23828: PUSH
23829: LD_INT 100
23831: PUSH
23832: LD_VAR 0 8
23836: PLUS
23837: EQUAL
23838: IFFALSE 23883
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23840: LD_ADDR_VAR 0 2
23844: PUSH
23845: LD_VAR 0 2
23849: PPUSH
23850: LD_INT 2
23852: PPUSH
23853: LD_VAR 0 2
23857: PUSH
23858: LD_INT 2
23860: ARRAY
23861: PPUSH
23862: LD_INT 1
23864: PPUSH
23865: CALL_OW 3
23869: PPUSH
23870: CALL_OW 1
23874: ST_TO_ADDR
// tmp := 1 ;
23875: LD_ADDR_VAR 0 3
23879: PUSH
23880: LD_STRING 1
23882: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23883: LD_ADDR_VAR 0 6
23887: PUSH
23888: LD_VAR 0 6
23892: PUSH
23893: LD_VAR 0 3
23897: STR
23898: ST_TO_ADDR
// end ;
23899: GO 23795
23901: POP
23902: POP
// if isGameLoad then
23903: LD_VAR 0 1
23907: IFFALSE 24382
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23909: LD_ADDR_VAR 0 4
23913: PUSH
23914: LD_EXP 57
23918: PUSH
23919: LD_EXP 56
23923: PUSH
23924: LD_EXP 58
23928: PUSH
23929: LD_EXP 55
23933: PUSH
23934: LD_EXP 59
23938: PUSH
23939: LD_EXP 60
23943: PUSH
23944: LD_EXP 61
23948: PUSH
23949: LD_EXP 62
23953: PUSH
23954: LD_EXP 63
23958: PUSH
23959: LD_EXP 64
23963: PUSH
23964: LD_EXP 65
23968: PUSH
23969: LD_EXP 66
23973: PUSH
23974: LD_EXP 67
23978: PUSH
23979: LD_EXP 68
23983: PUSH
23984: LD_EXP 76
23988: PUSH
23989: LD_EXP 77
23993: PUSH
23994: LD_EXP 78
23998: PUSH
23999: LD_EXP 79
24003: PUSH
24004: LD_EXP 81
24008: PUSH
24009: LD_EXP 82
24013: PUSH
24014: LD_EXP 83
24018: PUSH
24019: LD_EXP 86
24023: PUSH
24024: LD_EXP 88
24028: PUSH
24029: LD_EXP 89
24033: PUSH
24034: LD_EXP 90
24038: PUSH
24039: LD_EXP 92
24043: PUSH
24044: LD_EXP 93
24048: PUSH
24049: LD_EXP 96
24053: PUSH
24054: LD_EXP 97
24058: PUSH
24059: LD_EXP 98
24063: PUSH
24064: LD_EXP 99
24068: PUSH
24069: LD_EXP 100
24073: PUSH
24074: LD_EXP 101
24078: PUSH
24079: LD_EXP 102
24083: PUSH
24084: LD_EXP 103
24088: PUSH
24089: LD_EXP 104
24093: PUSH
24094: LD_EXP 69
24098: PUSH
24099: LD_EXP 70
24103: PUSH
24104: LD_EXP 73
24108: PUSH
24109: LD_EXP 74
24113: PUSH
24114: LD_EXP 75
24118: PUSH
24119: LD_EXP 71
24123: PUSH
24124: LD_EXP 72
24128: PUSH
24129: LD_EXP 80
24133: PUSH
24134: LD_EXP 84
24138: PUSH
24139: LD_EXP 85
24143: PUSH
24144: LD_EXP 87
24148: PUSH
24149: LD_EXP 91
24153: PUSH
24154: LD_EXP 94
24158: PUSH
24159: LD_EXP 95
24163: PUSH
24164: LD_EXP 105
24168: PUSH
24169: LD_EXP 106
24173: PUSH
24174: LD_EXP 107
24178: PUSH
24179: LD_EXP 108
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: ST_TO_ADDR
// tmp :=  ;
24240: LD_ADDR_VAR 0 3
24244: PUSH
24245: LD_STRING 
24247: ST_TO_ADDR
// for i = 1 to normalCounter do
24248: LD_ADDR_VAR 0 8
24252: PUSH
24253: DOUBLE
24254: LD_INT 1
24256: DEC
24257: ST_TO_ADDR
24258: LD_EXP 53
24262: PUSH
24263: FOR_TO
24264: IFFALSE 24300
// begin if flags [ i ] then
24266: LD_VAR 0 4
24270: PUSH
24271: LD_VAR 0 8
24275: ARRAY
24276: IFFALSE 24298
// tmp := tmp & i & ; ;
24278: LD_ADDR_VAR 0 3
24282: PUSH
24283: LD_VAR 0 3
24287: PUSH
24288: LD_VAR 0 8
24292: STR
24293: PUSH
24294: LD_STRING ;
24296: STR
24297: ST_TO_ADDR
// end ;
24298: GO 24263
24300: POP
24301: POP
// for i = 1 to hardcoreCounter do
24302: LD_ADDR_VAR 0 8
24306: PUSH
24307: DOUBLE
24308: LD_INT 1
24310: DEC
24311: ST_TO_ADDR
24312: LD_EXP 54
24316: PUSH
24317: FOR_TO
24318: IFFALSE 24364
// begin if flags [ normalCounter + i ] then
24320: LD_VAR 0 4
24324: PUSH
24325: LD_EXP 53
24329: PUSH
24330: LD_VAR 0 8
24334: PLUS
24335: ARRAY
24336: IFFALSE 24362
// tmp := tmp & ( 100 + i ) & ; ;
24338: LD_ADDR_VAR 0 3
24342: PUSH
24343: LD_VAR 0 3
24347: PUSH
24348: LD_INT 100
24350: PUSH
24351: LD_VAR 0 8
24355: PLUS
24356: STR
24357: PUSH
24358: LD_STRING ;
24360: STR
24361: ST_TO_ADDR
// end ;
24362: GO 24317
24364: POP
24365: POP
// if tmp then
24366: LD_VAR 0 3
24370: IFFALSE 24382
// active := tmp ;
24372: LD_ADDR_VAR 0 7
24376: PUSH
24377: LD_VAR 0 3
24381: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24382: LD_STRING getStreamItemsFromMission("
24384: PUSH
24385: LD_VAR 0 5
24389: STR
24390: PUSH
24391: LD_STRING ","
24393: STR
24394: PUSH
24395: LD_VAR 0 6
24399: STR
24400: PUSH
24401: LD_STRING ","
24403: STR
24404: PUSH
24405: LD_VAR 0 7
24409: STR
24410: PUSH
24411: LD_STRING ")
24413: STR
24414: PPUSH
24415: CALL_OW 559
// end else
24419: GO 24428
// ToLua ( getStreamItemsFromMission("","","") ) ;
24421: LD_STRING getStreamItemsFromMission("","","")
24423: PPUSH
24424: CALL_OW 559
// end ;
24428: LD_VAR 0 2
24432: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24433: LD_EXP 52
24437: PUSH
24438: LD_EXP 57
24442: AND
24443: IFFALSE 24567
24445: GO 24447
24447: DISABLE
24448: LD_INT 0
24450: PPUSH
24451: PPUSH
// begin enable ;
24452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24453: LD_ADDR_VAR 0 2
24457: PUSH
24458: LD_INT 22
24460: PUSH
24461: LD_OWVAR 2
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 2
24472: PUSH
24473: LD_INT 34
24475: PUSH
24476: LD_INT 7
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 34
24485: PUSH
24486: LD_INT 45
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 34
24495: PUSH
24496: LD_INT 28
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 34
24505: PUSH
24506: LD_INT 47
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PPUSH
24524: CALL_OW 69
24528: ST_TO_ADDR
// if not tmp then
24529: LD_VAR 0 2
24533: NOT
24534: IFFALSE 24538
// exit ;
24536: GO 24567
// for i in tmp do
24538: LD_ADDR_VAR 0 1
24542: PUSH
24543: LD_VAR 0 2
24547: PUSH
24548: FOR_IN
24549: IFFALSE 24565
// begin SetLives ( i , 0 ) ;
24551: LD_VAR 0 1
24555: PPUSH
24556: LD_INT 0
24558: PPUSH
24559: CALL_OW 234
// end ;
24563: GO 24548
24565: POP
24566: POP
// end ;
24567: PPOPN 2
24569: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24570: LD_EXP 52
24574: PUSH
24575: LD_EXP 58
24579: AND
24580: IFFALSE 24664
24582: GO 24584
24584: DISABLE
24585: LD_INT 0
24587: PPUSH
24588: PPUSH
// begin enable ;
24589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24590: LD_ADDR_VAR 0 2
24594: PUSH
24595: LD_INT 22
24597: PUSH
24598: LD_OWVAR 2
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 32
24609: PUSH
24610: LD_INT 3
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PPUSH
24621: CALL_OW 69
24625: ST_TO_ADDR
// if not tmp then
24626: LD_VAR 0 2
24630: NOT
24631: IFFALSE 24635
// exit ;
24633: GO 24664
// for i in tmp do
24635: LD_ADDR_VAR 0 1
24639: PUSH
24640: LD_VAR 0 2
24644: PUSH
24645: FOR_IN
24646: IFFALSE 24662
// begin SetLives ( i , 0 ) ;
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_INT 0
24655: PPUSH
24656: CALL_OW 234
// end ;
24660: GO 24645
24662: POP
24663: POP
// end ;
24664: PPOPN 2
24666: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24667: LD_EXP 52
24671: PUSH
24672: LD_EXP 55
24676: AND
24677: IFFALSE 24770
24679: GO 24681
24681: DISABLE
24682: LD_INT 0
24684: PPUSH
// begin enable ;
24685: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24686: LD_ADDR_VAR 0 1
24690: PUSH
24691: LD_INT 22
24693: PUSH
24694: LD_OWVAR 2
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 2
24705: PUSH
24706: LD_INT 25
24708: PUSH
24709: LD_INT 5
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 25
24718: PUSH
24719: LD_INT 9
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 25
24728: PUSH
24729: LD_INT 8
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PPUSH
24746: CALL_OW 69
24750: PUSH
24751: FOR_IN
24752: IFFALSE 24768
// begin SetClass ( i , 1 ) ;
24754: LD_VAR 0 1
24758: PPUSH
24759: LD_INT 1
24761: PPUSH
24762: CALL_OW 336
// end ;
24766: GO 24751
24768: POP
24769: POP
// end ;
24770: PPOPN 1
24772: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24773: LD_EXP 52
24777: PUSH
24778: LD_EXP 56
24782: AND
24783: PUSH
24784: LD_OWVAR 65
24788: PUSH
24789: LD_INT 7
24791: LESS
24792: AND
24793: IFFALSE 24807
24795: GO 24797
24797: DISABLE
// begin enable ;
24798: ENABLE
// game_speed := 7 ;
24799: LD_ADDR_OWVAR 65
24803: PUSH
24804: LD_INT 7
24806: ST_TO_ADDR
// end ;
24807: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24808: LD_EXP 52
24812: PUSH
24813: LD_EXP 59
24817: AND
24818: IFFALSE 25020
24820: GO 24822
24822: DISABLE
24823: LD_INT 0
24825: PPUSH
24826: PPUSH
24827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24828: LD_ADDR_VAR 0 3
24832: PUSH
24833: LD_INT 81
24835: PUSH
24836: LD_OWVAR 2
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 21
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PPUSH
24859: CALL_OW 69
24863: ST_TO_ADDR
// if not tmp then
24864: LD_VAR 0 3
24868: NOT
24869: IFFALSE 24873
// exit ;
24871: GO 25020
// if tmp > 5 then
24873: LD_VAR 0 3
24877: PUSH
24878: LD_INT 5
24880: GREATER
24881: IFFALSE 24893
// k := 5 else
24883: LD_ADDR_VAR 0 2
24887: PUSH
24888: LD_INT 5
24890: ST_TO_ADDR
24891: GO 24903
// k := tmp ;
24893: LD_ADDR_VAR 0 2
24897: PUSH
24898: LD_VAR 0 3
24902: ST_TO_ADDR
// for i := 1 to k do
24903: LD_ADDR_VAR 0 1
24907: PUSH
24908: DOUBLE
24909: LD_INT 1
24911: DEC
24912: ST_TO_ADDR
24913: LD_VAR 0 2
24917: PUSH
24918: FOR_TO
24919: IFFALSE 25018
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24921: LD_VAR 0 3
24925: PUSH
24926: LD_VAR 0 1
24930: ARRAY
24931: PPUSH
24932: LD_VAR 0 1
24936: PUSH
24937: LD_INT 4
24939: MOD
24940: PUSH
24941: LD_INT 1
24943: PLUS
24944: PPUSH
24945: CALL_OW 259
24949: PUSH
24950: LD_INT 10
24952: LESS
24953: IFFALSE 25016
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24955: LD_VAR 0 3
24959: PUSH
24960: LD_VAR 0 1
24964: ARRAY
24965: PPUSH
24966: LD_VAR 0 1
24970: PUSH
24971: LD_INT 4
24973: MOD
24974: PUSH
24975: LD_INT 1
24977: PLUS
24978: PPUSH
24979: LD_VAR 0 3
24983: PUSH
24984: LD_VAR 0 1
24988: ARRAY
24989: PPUSH
24990: LD_VAR 0 1
24994: PUSH
24995: LD_INT 4
24997: MOD
24998: PUSH
24999: LD_INT 1
25001: PLUS
25002: PPUSH
25003: CALL_OW 259
25007: PUSH
25008: LD_INT 1
25010: PLUS
25011: PPUSH
25012: CALL_OW 237
25016: GO 24918
25018: POP
25019: POP
// end ;
25020: PPOPN 3
25022: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25023: LD_EXP 52
25027: PUSH
25028: LD_EXP 60
25032: AND
25033: IFFALSE 25053
25035: GO 25037
25037: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25038: LD_INT 4
25040: PPUSH
25041: LD_OWVAR 2
25045: PPUSH
25046: LD_INT 0
25048: PPUSH
25049: CALL_OW 324
25053: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25054: LD_EXP 52
25058: PUSH
25059: LD_EXP 89
25063: AND
25064: IFFALSE 25084
25066: GO 25068
25068: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25069: LD_INT 19
25071: PPUSH
25072: LD_OWVAR 2
25076: PPUSH
25077: LD_INT 0
25079: PPUSH
25080: CALL_OW 324
25084: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25085: LD_EXP 52
25089: PUSH
25090: LD_EXP 61
25094: AND
25095: IFFALSE 25197
25097: GO 25099
25099: DISABLE
25100: LD_INT 0
25102: PPUSH
25103: PPUSH
// begin enable ;
25104: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25105: LD_ADDR_VAR 0 2
25109: PUSH
25110: LD_INT 22
25112: PUSH
25113: LD_OWVAR 2
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: LD_INT 34
25127: PUSH
25128: LD_INT 11
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 34
25137: PUSH
25138: LD_INT 30
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: LIST
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PPUSH
25154: CALL_OW 69
25158: ST_TO_ADDR
// if not tmp then
25159: LD_VAR 0 2
25163: NOT
25164: IFFALSE 25168
// exit ;
25166: GO 25197
// for i in tmp do
25168: LD_ADDR_VAR 0 1
25172: PUSH
25173: LD_VAR 0 2
25177: PUSH
25178: FOR_IN
25179: IFFALSE 25195
// begin SetLives ( i , 0 ) ;
25181: LD_VAR 0 1
25185: PPUSH
25186: LD_INT 0
25188: PPUSH
25189: CALL_OW 234
// end ;
25193: GO 25178
25195: POP
25196: POP
// end ;
25197: PPOPN 2
25199: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25200: LD_EXP 52
25204: PUSH
25205: LD_EXP 62
25209: AND
25210: IFFALSE 25230
25212: GO 25214
25214: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25215: LD_INT 32
25217: PPUSH
25218: LD_OWVAR 2
25222: PPUSH
25223: LD_INT 0
25225: PPUSH
25226: CALL_OW 324
25230: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25231: LD_EXP 52
25235: PUSH
25236: LD_EXP 63
25240: AND
25241: IFFALSE 25422
25243: GO 25245
25245: DISABLE
25246: LD_INT 0
25248: PPUSH
25249: PPUSH
25250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25251: LD_ADDR_VAR 0 2
25255: PUSH
25256: LD_INT 22
25258: PUSH
25259: LD_OWVAR 2
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 33
25270: PUSH
25271: LD_INT 3
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PPUSH
25282: CALL_OW 69
25286: ST_TO_ADDR
// if not tmp then
25287: LD_VAR 0 2
25291: NOT
25292: IFFALSE 25296
// exit ;
25294: GO 25422
// side := 0 ;
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_INT 0
25303: ST_TO_ADDR
// for i := 1 to 8 do
25304: LD_ADDR_VAR 0 1
25308: PUSH
25309: DOUBLE
25310: LD_INT 1
25312: DEC
25313: ST_TO_ADDR
25314: LD_INT 8
25316: PUSH
25317: FOR_TO
25318: IFFALSE 25366
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25320: LD_OWVAR 2
25324: PUSH
25325: LD_VAR 0 1
25329: NONEQUAL
25330: PUSH
25331: LD_OWVAR 2
25335: PPUSH
25336: LD_VAR 0 1
25340: PPUSH
25341: CALL_OW 81
25345: PUSH
25346: LD_INT 2
25348: EQUAL
25349: AND
25350: IFFALSE 25364
// begin side := i ;
25352: LD_ADDR_VAR 0 3
25356: PUSH
25357: LD_VAR 0 1
25361: ST_TO_ADDR
// break ;
25362: GO 25366
// end ;
25364: GO 25317
25366: POP
25367: POP
// if not side then
25368: LD_VAR 0 3
25372: NOT
25373: IFFALSE 25377
// exit ;
25375: GO 25422
// for i := 1 to tmp do
25377: LD_ADDR_VAR 0 1
25381: PUSH
25382: DOUBLE
25383: LD_INT 1
25385: DEC
25386: ST_TO_ADDR
25387: LD_VAR 0 2
25391: PUSH
25392: FOR_TO
25393: IFFALSE 25420
// if Prob ( 60 ) then
25395: LD_INT 60
25397: PPUSH
25398: CALL_OW 13
25402: IFFALSE 25418
// SetSide ( i , side ) ;
25404: LD_VAR 0 1
25408: PPUSH
25409: LD_VAR 0 3
25413: PPUSH
25414: CALL_OW 235
25418: GO 25392
25420: POP
25421: POP
// end ;
25422: PPOPN 3
25424: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25425: LD_EXP 52
25429: PUSH
25430: LD_EXP 65
25434: AND
25435: IFFALSE 25554
25437: GO 25439
25439: DISABLE
25440: LD_INT 0
25442: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25443: LD_ADDR_VAR 0 1
25447: PUSH
25448: LD_INT 22
25450: PUSH
25451: LD_OWVAR 2
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 21
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 3
25472: PUSH
25473: LD_INT 23
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: LIST
25491: PPUSH
25492: CALL_OW 69
25496: PUSH
25497: FOR_IN
25498: IFFALSE 25552
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25500: LD_VAR 0 1
25504: PPUSH
25505: CALL_OW 257
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: LD_INT 3
25518: PUSH
25519: LD_INT 4
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: IN
25528: IFFALSE 25550
// SetClass ( un , rand ( 1 , 4 ) ) ;
25530: LD_VAR 0 1
25534: PPUSH
25535: LD_INT 1
25537: PPUSH
25538: LD_INT 4
25540: PPUSH
25541: CALL_OW 12
25545: PPUSH
25546: CALL_OW 336
25550: GO 25497
25552: POP
25553: POP
// end ;
25554: PPOPN 1
25556: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25557: LD_EXP 52
25561: PUSH
25562: LD_EXP 64
25566: AND
25567: IFFALSE 25646
25569: GO 25571
25571: DISABLE
25572: LD_INT 0
25574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25575: LD_ADDR_VAR 0 1
25579: PUSH
25580: LD_INT 22
25582: PUSH
25583: LD_OWVAR 2
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 21
25594: PUSH
25595: LD_INT 3
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PPUSH
25606: CALL_OW 69
25610: ST_TO_ADDR
// if not tmp then
25611: LD_VAR 0 1
25615: NOT
25616: IFFALSE 25620
// exit ;
25618: GO 25646
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25620: LD_VAR 0 1
25624: PUSH
25625: LD_INT 1
25627: PPUSH
25628: LD_VAR 0 1
25632: PPUSH
25633: CALL_OW 12
25637: ARRAY
25638: PPUSH
25639: LD_INT 100
25641: PPUSH
25642: CALL_OW 234
// end ;
25646: PPOPN 1
25648: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25649: LD_EXP 52
25653: PUSH
25654: LD_EXP 66
25658: AND
25659: IFFALSE 25757
25661: GO 25663
25663: DISABLE
25664: LD_INT 0
25666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25667: LD_ADDR_VAR 0 1
25671: PUSH
25672: LD_INT 22
25674: PUSH
25675: LD_OWVAR 2
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 21
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PPUSH
25698: CALL_OW 69
25702: ST_TO_ADDR
// if not tmp then
25703: LD_VAR 0 1
25707: NOT
25708: IFFALSE 25712
// exit ;
25710: GO 25757
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25712: LD_VAR 0 1
25716: PUSH
25717: LD_INT 1
25719: PPUSH
25720: LD_VAR 0 1
25724: PPUSH
25725: CALL_OW 12
25729: ARRAY
25730: PPUSH
25731: LD_INT 1
25733: PPUSH
25734: LD_INT 4
25736: PPUSH
25737: CALL_OW 12
25741: PPUSH
25742: LD_INT 3000
25744: PPUSH
25745: LD_INT 9000
25747: PPUSH
25748: CALL_OW 12
25752: PPUSH
25753: CALL_OW 492
// end ;
25757: PPOPN 1
25759: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25760: LD_EXP 52
25764: PUSH
25765: LD_EXP 67
25769: AND
25770: IFFALSE 25790
25772: GO 25774
25774: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25775: LD_INT 1
25777: PPUSH
25778: LD_OWVAR 2
25782: PPUSH
25783: LD_INT 0
25785: PPUSH
25786: CALL_OW 324
25790: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25791: LD_EXP 52
25795: PUSH
25796: LD_EXP 68
25800: AND
25801: IFFALSE 25884
25803: GO 25805
25805: DISABLE
25806: LD_INT 0
25808: PPUSH
25809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25810: LD_ADDR_VAR 0 2
25814: PUSH
25815: LD_INT 22
25817: PUSH
25818: LD_OWVAR 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 21
25829: PUSH
25830: LD_INT 3
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PPUSH
25841: CALL_OW 69
25845: ST_TO_ADDR
// if not tmp then
25846: LD_VAR 0 2
25850: NOT
25851: IFFALSE 25855
// exit ;
25853: GO 25884
// for i in tmp do
25855: LD_ADDR_VAR 0 1
25859: PUSH
25860: LD_VAR 0 2
25864: PUSH
25865: FOR_IN
25866: IFFALSE 25882
// SetBLevel ( i , 10 ) ;
25868: LD_VAR 0 1
25872: PPUSH
25873: LD_INT 10
25875: PPUSH
25876: CALL_OW 241
25880: GO 25865
25882: POP
25883: POP
// end ;
25884: PPOPN 2
25886: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25887: LD_EXP 52
25891: PUSH
25892: LD_EXP 69
25896: AND
25897: IFFALSE 26008
25899: GO 25901
25901: DISABLE
25902: LD_INT 0
25904: PPUSH
25905: PPUSH
25906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25907: LD_ADDR_VAR 0 3
25911: PUSH
25912: LD_INT 22
25914: PUSH
25915: LD_OWVAR 2
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 25
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PPUSH
25938: CALL_OW 69
25942: ST_TO_ADDR
// if not tmp then
25943: LD_VAR 0 3
25947: NOT
25948: IFFALSE 25952
// exit ;
25950: GO 26008
// un := tmp [ rand ( 1 , tmp ) ] ;
25952: LD_ADDR_VAR 0 2
25956: PUSH
25957: LD_VAR 0 3
25961: PUSH
25962: LD_INT 1
25964: PPUSH
25965: LD_VAR 0 3
25969: PPUSH
25970: CALL_OW 12
25974: ARRAY
25975: ST_TO_ADDR
// if Crawls ( un ) then
25976: LD_VAR 0 2
25980: PPUSH
25981: CALL_OW 318
25985: IFFALSE 25996
// ComWalk ( un ) ;
25987: LD_VAR 0 2
25991: PPUSH
25992: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25996: LD_VAR 0 2
26000: PPUSH
26001: LD_INT 5
26003: PPUSH
26004: CALL_OW 336
// end ;
26008: PPOPN 3
26010: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26011: LD_EXP 52
26015: PUSH
26016: LD_EXP 70
26020: AND
26021: PUSH
26022: LD_OWVAR 67
26026: PUSH
26027: LD_INT 4
26029: LESS
26030: AND
26031: IFFALSE 26050
26033: GO 26035
26035: DISABLE
// begin Difficulty := Difficulty + 1 ;
26036: LD_ADDR_OWVAR 67
26040: PUSH
26041: LD_OWVAR 67
26045: PUSH
26046: LD_INT 1
26048: PLUS
26049: ST_TO_ADDR
// end ;
26050: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26051: LD_EXP 52
26055: PUSH
26056: LD_EXP 71
26060: AND
26061: IFFALSE 26164
26063: GO 26065
26065: DISABLE
26066: LD_INT 0
26068: PPUSH
// begin for i := 1 to 5 do
26069: LD_ADDR_VAR 0 1
26073: PUSH
26074: DOUBLE
26075: LD_INT 1
26077: DEC
26078: ST_TO_ADDR
26079: LD_INT 5
26081: PUSH
26082: FOR_TO
26083: IFFALSE 26162
// begin uc_nation := nation_nature ;
26085: LD_ADDR_OWVAR 21
26089: PUSH
26090: LD_INT 0
26092: ST_TO_ADDR
// uc_side := 0 ;
26093: LD_ADDR_OWVAR 20
26097: PUSH
26098: LD_INT 0
26100: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26101: LD_ADDR_OWVAR 29
26105: PUSH
26106: LD_INT 12
26108: PUSH
26109: LD_INT 12
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: ST_TO_ADDR
// hc_agressivity := 20 ;
26116: LD_ADDR_OWVAR 35
26120: PUSH
26121: LD_INT 20
26123: ST_TO_ADDR
// hc_class := class_tiger ;
26124: LD_ADDR_OWVAR 28
26128: PUSH
26129: LD_INT 14
26131: ST_TO_ADDR
// hc_gallery :=  ;
26132: LD_ADDR_OWVAR 33
26136: PUSH
26137: LD_STRING 
26139: ST_TO_ADDR
// hc_name :=  ;
26140: LD_ADDR_OWVAR 26
26144: PUSH
26145: LD_STRING 
26147: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26148: CALL_OW 44
26152: PPUSH
26153: LD_INT 0
26155: PPUSH
26156: CALL_OW 51
// end ;
26160: GO 26082
26162: POP
26163: POP
// end ;
26164: PPOPN 1
26166: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26167: LD_EXP 52
26171: PUSH
26172: LD_EXP 72
26176: AND
26177: IFFALSE 26186
26179: GO 26181
26181: DISABLE
// StreamSibBomb ;
26182: CALL 26187 0 0
26186: END
// export function StreamSibBomb ; var i , x , y ; begin
26187: LD_INT 0
26189: PPUSH
26190: PPUSH
26191: PPUSH
26192: PPUSH
// result := false ;
26193: LD_ADDR_VAR 0 1
26197: PUSH
26198: LD_INT 0
26200: ST_TO_ADDR
// for i := 1 to 16 do
26201: LD_ADDR_VAR 0 2
26205: PUSH
26206: DOUBLE
26207: LD_INT 1
26209: DEC
26210: ST_TO_ADDR
26211: LD_INT 16
26213: PUSH
26214: FOR_TO
26215: IFFALSE 26414
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26217: LD_ADDR_VAR 0 3
26221: PUSH
26222: LD_INT 10
26224: PUSH
26225: LD_INT 20
26227: PUSH
26228: LD_INT 30
26230: PUSH
26231: LD_INT 40
26233: PUSH
26234: LD_INT 50
26236: PUSH
26237: LD_INT 60
26239: PUSH
26240: LD_INT 70
26242: PUSH
26243: LD_INT 80
26245: PUSH
26246: LD_INT 90
26248: PUSH
26249: LD_INT 100
26251: PUSH
26252: LD_INT 110
26254: PUSH
26255: LD_INT 120
26257: PUSH
26258: LD_INT 130
26260: PUSH
26261: LD_INT 140
26263: PUSH
26264: LD_INT 150
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: PPUSH
26287: LD_INT 15
26289: PPUSH
26290: CALL_OW 12
26294: ARRAY
26295: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26296: LD_ADDR_VAR 0 4
26300: PUSH
26301: LD_INT 10
26303: PUSH
26304: LD_INT 20
26306: PUSH
26307: LD_INT 30
26309: PUSH
26310: LD_INT 40
26312: PUSH
26313: LD_INT 50
26315: PUSH
26316: LD_INT 60
26318: PUSH
26319: LD_INT 70
26321: PUSH
26322: LD_INT 80
26324: PUSH
26325: LD_INT 90
26327: PUSH
26328: LD_INT 100
26330: PUSH
26331: LD_INT 110
26333: PUSH
26334: LD_INT 120
26336: PUSH
26337: LD_INT 130
26339: PUSH
26340: LD_INT 140
26342: PUSH
26343: LD_INT 150
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: PPUSH
26366: LD_INT 15
26368: PPUSH
26369: CALL_OW 12
26373: ARRAY
26374: ST_TO_ADDR
// if ValidHex ( x , y ) then
26375: LD_VAR 0 3
26379: PPUSH
26380: LD_VAR 0 4
26384: PPUSH
26385: CALL_OW 488
26389: IFFALSE 26412
// begin result := [ x , y ] ;
26391: LD_ADDR_VAR 0 1
26395: PUSH
26396: LD_VAR 0 3
26400: PUSH
26401: LD_VAR 0 4
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// break ;
26410: GO 26414
// end ; end ;
26412: GO 26214
26414: POP
26415: POP
// if result then
26416: LD_VAR 0 1
26420: IFFALSE 26480
// begin ToLua ( playSibBomb() ) ;
26422: LD_STRING playSibBomb()
26424: PPUSH
26425: CALL_OW 559
// wait ( 0 0$14 ) ;
26429: LD_INT 490
26431: PPUSH
26432: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26436: LD_VAR 0 1
26440: PUSH
26441: LD_INT 1
26443: ARRAY
26444: PPUSH
26445: LD_VAR 0 1
26449: PUSH
26450: LD_INT 2
26452: ARRAY
26453: PPUSH
26454: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26458: LD_VAR 0 1
26462: PUSH
26463: LD_INT 1
26465: ARRAY
26466: PPUSH
26467: LD_VAR 0 1
26471: PUSH
26472: LD_INT 2
26474: ARRAY
26475: PPUSH
26476: CALL_OW 429
// end ; end ;
26480: LD_VAR 0 1
26484: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26485: LD_EXP 52
26489: PUSH
26490: LD_EXP 74
26494: AND
26495: IFFALSE 26507
26497: GO 26499
26499: DISABLE
// YouLost (  ) ;
26500: LD_STRING 
26502: PPUSH
26503: CALL_OW 104
26507: END
// every 0 0$1 trigger StreamModeActive and sFog do
26508: LD_EXP 52
26512: PUSH
26513: LD_EXP 73
26517: AND
26518: IFFALSE 26532
26520: GO 26522
26522: DISABLE
// FogOff ( your_side ) ;
26523: LD_OWVAR 2
26527: PPUSH
26528: CALL_OW 344
26532: END
// every 0 0$1 trigger StreamModeActive and sSun do
26533: LD_EXP 52
26537: PUSH
26538: LD_EXP 75
26542: AND
26543: IFFALSE 26571
26545: GO 26547
26547: DISABLE
// begin solar_recharge_percent := 0 ;
26548: LD_ADDR_OWVAR 79
26552: PUSH
26553: LD_INT 0
26555: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26556: LD_INT 10500
26558: PPUSH
26559: CALL_OW 67
// solar_recharge_percent := 100 ;
26563: LD_ADDR_OWVAR 79
26567: PUSH
26568: LD_INT 100
26570: ST_TO_ADDR
// end ;
26571: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26572: LD_EXP 52
26576: PUSH
26577: LD_EXP 76
26581: AND
26582: IFFALSE 26821
26584: GO 26586
26586: DISABLE
26587: LD_INT 0
26589: PPUSH
26590: PPUSH
26591: PPUSH
// begin tmp := [ ] ;
26592: LD_ADDR_VAR 0 3
26596: PUSH
26597: EMPTY
26598: ST_TO_ADDR
// for i := 1 to 6 do
26599: LD_ADDR_VAR 0 1
26603: PUSH
26604: DOUBLE
26605: LD_INT 1
26607: DEC
26608: ST_TO_ADDR
26609: LD_INT 6
26611: PUSH
26612: FOR_TO
26613: IFFALSE 26718
// begin uc_nation := nation_nature ;
26615: LD_ADDR_OWVAR 21
26619: PUSH
26620: LD_INT 0
26622: ST_TO_ADDR
// uc_side := 0 ;
26623: LD_ADDR_OWVAR 20
26627: PUSH
26628: LD_INT 0
26630: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26631: LD_ADDR_OWVAR 29
26635: PUSH
26636: LD_INT 12
26638: PUSH
26639: LD_INT 12
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: ST_TO_ADDR
// hc_agressivity := 20 ;
26646: LD_ADDR_OWVAR 35
26650: PUSH
26651: LD_INT 20
26653: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26654: LD_ADDR_OWVAR 28
26658: PUSH
26659: LD_INT 17
26661: ST_TO_ADDR
// hc_gallery :=  ;
26662: LD_ADDR_OWVAR 33
26666: PUSH
26667: LD_STRING 
26669: ST_TO_ADDR
// hc_name :=  ;
26670: LD_ADDR_OWVAR 26
26674: PUSH
26675: LD_STRING 
26677: ST_TO_ADDR
// un := CreateHuman ;
26678: LD_ADDR_VAR 0 2
26682: PUSH
26683: CALL_OW 44
26687: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26688: LD_VAR 0 2
26692: PPUSH
26693: LD_INT 1
26695: PPUSH
26696: CALL_OW 51
// tmp := tmp ^ un ;
26700: LD_ADDR_VAR 0 3
26704: PUSH
26705: LD_VAR 0 3
26709: PUSH
26710: LD_VAR 0 2
26714: ADD
26715: ST_TO_ADDR
// end ;
26716: GO 26612
26718: POP
26719: POP
// repeat wait ( 0 0$1 ) ;
26720: LD_INT 35
26722: PPUSH
26723: CALL_OW 67
// for un in tmp do
26727: LD_ADDR_VAR 0 2
26731: PUSH
26732: LD_VAR 0 3
26736: PUSH
26737: FOR_IN
26738: IFFALSE 26812
// begin if IsDead ( un ) then
26740: LD_VAR 0 2
26744: PPUSH
26745: CALL_OW 301
26749: IFFALSE 26769
// begin tmp := tmp diff un ;
26751: LD_ADDR_VAR 0 3
26755: PUSH
26756: LD_VAR 0 3
26760: PUSH
26761: LD_VAR 0 2
26765: DIFF
26766: ST_TO_ADDR
// continue ;
26767: GO 26737
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26769: LD_VAR 0 2
26773: PPUSH
26774: LD_INT 3
26776: PUSH
26777: LD_INT 22
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PPUSH
26791: CALL_OW 69
26795: PPUSH
26796: LD_VAR 0 2
26800: PPUSH
26801: CALL_OW 74
26805: PPUSH
26806: CALL_OW 115
// end ;
26810: GO 26737
26812: POP
26813: POP
// until not tmp ;
26814: LD_VAR 0 3
26818: NOT
26819: IFFALSE 26720
// end ;
26821: PPOPN 3
26823: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26824: LD_EXP 52
26828: PUSH
26829: LD_EXP 77
26833: AND
26834: IFFALSE 26888
26836: GO 26838
26838: DISABLE
// begin ToLua ( displayTroll(); ) ;
26839: LD_STRING displayTroll();
26841: PPUSH
26842: CALL_OW 559
// wait ( 3 3$00 ) ;
26846: LD_INT 6300
26848: PPUSH
26849: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26853: LD_STRING hideTroll();
26855: PPUSH
26856: CALL_OW 559
// wait ( 1 1$00 ) ;
26860: LD_INT 2100
26862: PPUSH
26863: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26867: LD_STRING displayTroll();
26869: PPUSH
26870: CALL_OW 559
// wait ( 1 1$00 ) ;
26874: LD_INT 2100
26876: PPUSH
26877: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26881: LD_STRING hideTroll();
26883: PPUSH
26884: CALL_OW 559
// end ;
26888: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26889: LD_EXP 52
26893: PUSH
26894: LD_EXP 78
26898: AND
26899: IFFALSE 26962
26901: GO 26903
26903: DISABLE
26904: LD_INT 0
26906: PPUSH
// begin p := 0 ;
26907: LD_ADDR_VAR 0 1
26911: PUSH
26912: LD_INT 0
26914: ST_TO_ADDR
// repeat game_speed := 1 ;
26915: LD_ADDR_OWVAR 65
26919: PUSH
26920: LD_INT 1
26922: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26923: LD_INT 35
26925: PPUSH
26926: CALL_OW 67
// p := p + 1 ;
26930: LD_ADDR_VAR 0 1
26934: PUSH
26935: LD_VAR 0 1
26939: PUSH
26940: LD_INT 1
26942: PLUS
26943: ST_TO_ADDR
// until p >= 60 ;
26944: LD_VAR 0 1
26948: PUSH
26949: LD_INT 60
26951: GREATEREQUAL
26952: IFFALSE 26915
// game_speed := 4 ;
26954: LD_ADDR_OWVAR 65
26958: PUSH
26959: LD_INT 4
26961: ST_TO_ADDR
// end ;
26962: PPOPN 1
26964: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26965: LD_EXP 52
26969: PUSH
26970: LD_EXP 79
26974: AND
26975: IFFALSE 27121
26977: GO 26979
26979: DISABLE
26980: LD_INT 0
26982: PPUSH
26983: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26984: LD_ADDR_VAR 0 1
26988: PUSH
26989: LD_INT 22
26991: PUSH
26992: LD_OWVAR 2
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: LD_INT 30
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 30
27016: PUSH
27017: LD_INT 1
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PPUSH
27033: CALL_OW 69
27037: ST_TO_ADDR
// if not depot then
27038: LD_VAR 0 1
27042: NOT
27043: IFFALSE 27047
// exit ;
27045: GO 27121
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27047: LD_ADDR_VAR 0 2
27051: PUSH
27052: LD_VAR 0 1
27056: PUSH
27057: LD_INT 1
27059: PPUSH
27060: LD_VAR 0 1
27064: PPUSH
27065: CALL_OW 12
27069: ARRAY
27070: PPUSH
27071: CALL_OW 274
27075: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27076: LD_VAR 0 2
27080: PPUSH
27081: LD_INT 1
27083: PPUSH
27084: LD_INT 0
27086: PPUSH
27087: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27091: LD_VAR 0 2
27095: PPUSH
27096: LD_INT 2
27098: PPUSH
27099: LD_INT 0
27101: PPUSH
27102: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27106: LD_VAR 0 2
27110: PPUSH
27111: LD_INT 3
27113: PPUSH
27114: LD_INT 0
27116: PPUSH
27117: CALL_OW 277
// end ;
27121: PPOPN 2
27123: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27124: LD_EXP 52
27128: PUSH
27129: LD_EXP 80
27133: AND
27134: IFFALSE 27231
27136: GO 27138
27138: DISABLE
27139: LD_INT 0
27141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27142: LD_ADDR_VAR 0 1
27146: PUSH
27147: LD_INT 22
27149: PUSH
27150: LD_OWVAR 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 21
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 3
27171: PUSH
27172: LD_INT 23
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: PPUSH
27191: CALL_OW 69
27195: ST_TO_ADDR
// if not tmp then
27196: LD_VAR 0 1
27200: NOT
27201: IFFALSE 27205
// exit ;
27203: GO 27231
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27205: LD_VAR 0 1
27209: PUSH
27210: LD_INT 1
27212: PPUSH
27213: LD_VAR 0 1
27217: PPUSH
27218: CALL_OW 12
27222: ARRAY
27223: PPUSH
27224: LD_INT 200
27226: PPUSH
27227: CALL_OW 234
// end ;
27231: PPOPN 1
27233: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27234: LD_EXP 52
27238: PUSH
27239: LD_EXP 81
27243: AND
27244: IFFALSE 27323
27246: GO 27248
27248: DISABLE
27249: LD_INT 0
27251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27252: LD_ADDR_VAR 0 1
27256: PUSH
27257: LD_INT 22
27259: PUSH
27260: LD_OWVAR 2
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 21
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 69
27287: ST_TO_ADDR
// if not tmp then
27288: LD_VAR 0 1
27292: NOT
27293: IFFALSE 27297
// exit ;
27295: GO 27323
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27297: LD_VAR 0 1
27301: PUSH
27302: LD_INT 1
27304: PPUSH
27305: LD_VAR 0 1
27309: PPUSH
27310: CALL_OW 12
27314: ARRAY
27315: PPUSH
27316: LD_INT 60
27318: PPUSH
27319: CALL_OW 234
// end ;
27323: PPOPN 1
27325: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27326: LD_EXP 52
27330: PUSH
27331: LD_EXP 82
27335: AND
27336: IFFALSE 27435
27338: GO 27340
27340: DISABLE
27341: LD_INT 0
27343: PPUSH
27344: PPUSH
// begin enable ;
27345: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27346: LD_ADDR_VAR 0 1
27350: PUSH
27351: LD_INT 22
27353: PUSH
27354: LD_OWVAR 2
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 61
27365: PUSH
27366: EMPTY
27367: LIST
27368: PUSH
27369: LD_INT 33
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: PPUSH
27384: CALL_OW 69
27388: ST_TO_ADDR
// if not tmp then
27389: LD_VAR 0 1
27393: NOT
27394: IFFALSE 27398
// exit ;
27396: GO 27435
// for i in tmp do
27398: LD_ADDR_VAR 0 2
27402: PUSH
27403: LD_VAR 0 1
27407: PUSH
27408: FOR_IN
27409: IFFALSE 27433
// if IsControledBy ( i ) then
27411: LD_VAR 0 2
27415: PPUSH
27416: CALL_OW 312
27420: IFFALSE 27431
// ComUnlink ( i ) ;
27422: LD_VAR 0 2
27426: PPUSH
27427: CALL_OW 136
27431: GO 27408
27433: POP
27434: POP
// end ;
27435: PPOPN 2
27437: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27438: LD_EXP 52
27442: PUSH
27443: LD_EXP 83
27447: AND
27448: IFFALSE 27588
27450: GO 27452
27452: DISABLE
27453: LD_INT 0
27455: PPUSH
27456: PPUSH
// begin ToLua ( displayPowell(); ) ;
27457: LD_STRING displayPowell();
27459: PPUSH
27460: CALL_OW 559
// uc_side := 0 ;
27464: LD_ADDR_OWVAR 20
27468: PUSH
27469: LD_INT 0
27471: ST_TO_ADDR
// uc_nation := 2 ;
27472: LD_ADDR_OWVAR 21
27476: PUSH
27477: LD_INT 2
27479: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27480: LD_ADDR_OWVAR 37
27484: PUSH
27485: LD_INT 14
27487: ST_TO_ADDR
// vc_engine := engine_siberite ;
27488: LD_ADDR_OWVAR 39
27492: PUSH
27493: LD_INT 3
27495: ST_TO_ADDR
// vc_control := control_apeman ;
27496: LD_ADDR_OWVAR 38
27500: PUSH
27501: LD_INT 5
27503: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27504: LD_ADDR_OWVAR 40
27508: PUSH
27509: LD_INT 29
27511: ST_TO_ADDR
// un := CreateVehicle ;
27512: LD_ADDR_VAR 0 2
27516: PUSH
27517: CALL_OW 45
27521: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27522: LD_VAR 0 2
27526: PPUSH
27527: LD_INT 1
27529: PPUSH
27530: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27534: LD_INT 35
27536: PPUSH
27537: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27541: LD_VAR 0 2
27545: PPUSH
27546: LD_INT 22
27548: PUSH
27549: LD_OWVAR 2
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PPUSH
27558: CALL_OW 69
27562: PPUSH
27563: LD_VAR 0 2
27567: PPUSH
27568: CALL_OW 74
27572: PPUSH
27573: CALL_OW 115
// until IsDead ( un ) ;
27577: LD_VAR 0 2
27581: PPUSH
27582: CALL_OW 301
27586: IFFALSE 27534
// end ;
27588: PPOPN 2
27590: END
// every 0 0$1 trigger StreamModeActive and sStu do
27591: LD_EXP 52
27595: PUSH
27596: LD_EXP 91
27600: AND
27601: IFFALSE 27617
27603: GO 27605
27605: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27606: LD_STRING displayStucuk();
27608: PPUSH
27609: CALL_OW 559
// ResetFog ;
27613: CALL_OW 335
// end ;
27617: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27618: LD_EXP 52
27622: PUSH
27623: LD_EXP 84
27627: AND
27628: IFFALSE 27769
27630: GO 27632
27632: DISABLE
27633: LD_INT 0
27635: PPUSH
27636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27637: LD_ADDR_VAR 0 2
27641: PUSH
27642: LD_INT 22
27644: PUSH
27645: LD_OWVAR 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 21
27656: PUSH
27657: LD_INT 1
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PPUSH
27668: CALL_OW 69
27672: ST_TO_ADDR
// if not tmp then
27673: LD_VAR 0 2
27677: NOT
27678: IFFALSE 27682
// exit ;
27680: GO 27769
// un := tmp [ rand ( 1 , tmp ) ] ;
27682: LD_ADDR_VAR 0 1
27686: PUSH
27687: LD_VAR 0 2
27691: PUSH
27692: LD_INT 1
27694: PPUSH
27695: LD_VAR 0 2
27699: PPUSH
27700: CALL_OW 12
27704: ARRAY
27705: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27706: LD_VAR 0 1
27710: PPUSH
27711: LD_INT 0
27713: PPUSH
27714: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27718: LD_VAR 0 1
27722: PPUSH
27723: LD_OWVAR 3
27727: PUSH
27728: LD_VAR 0 1
27732: DIFF
27733: PPUSH
27734: LD_VAR 0 1
27738: PPUSH
27739: CALL_OW 74
27743: PPUSH
27744: CALL_OW 115
// wait ( 0 0$20 ) ;
27748: LD_INT 700
27750: PPUSH
27751: CALL_OW 67
// SetSide ( un , your_side ) ;
27755: LD_VAR 0 1
27759: PPUSH
27760: LD_OWVAR 2
27764: PPUSH
27765: CALL_OW 235
// end ;
27769: PPOPN 2
27771: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27772: LD_EXP 52
27776: PUSH
27777: LD_EXP 85
27781: AND
27782: IFFALSE 27888
27784: GO 27786
27786: DISABLE
27787: LD_INT 0
27789: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27790: LD_ADDR_VAR 0 1
27794: PUSH
27795: LD_INT 22
27797: PUSH
27798: LD_OWVAR 2
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: LD_INT 30
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 30
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: LIST
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PPUSH
27839: CALL_OW 69
27843: ST_TO_ADDR
// if not depot then
27844: LD_VAR 0 1
27848: NOT
27849: IFFALSE 27853
// exit ;
27851: GO 27888
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27853: LD_VAR 0 1
27857: PUSH
27858: LD_INT 1
27860: ARRAY
27861: PPUSH
27862: CALL_OW 250
27866: PPUSH
27867: LD_VAR 0 1
27871: PUSH
27872: LD_INT 1
27874: ARRAY
27875: PPUSH
27876: CALL_OW 251
27880: PPUSH
27881: LD_INT 70
27883: PPUSH
27884: CALL_OW 495
// end ;
27888: PPOPN 1
27890: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27891: LD_EXP 52
27895: PUSH
27896: LD_EXP 86
27900: AND
27901: IFFALSE 28112
27903: GO 27905
27905: DISABLE
27906: LD_INT 0
27908: PPUSH
27909: PPUSH
27910: PPUSH
27911: PPUSH
27912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27913: LD_ADDR_VAR 0 5
27917: PUSH
27918: LD_INT 22
27920: PUSH
27921: LD_OWVAR 2
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 21
27932: PUSH
27933: LD_INT 1
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PPUSH
27944: CALL_OW 69
27948: ST_TO_ADDR
// if not tmp then
27949: LD_VAR 0 5
27953: NOT
27954: IFFALSE 27958
// exit ;
27956: GO 28112
// for i in tmp do
27958: LD_ADDR_VAR 0 1
27962: PUSH
27963: LD_VAR 0 5
27967: PUSH
27968: FOR_IN
27969: IFFALSE 28110
// begin d := rand ( 0 , 5 ) ;
27971: LD_ADDR_VAR 0 4
27975: PUSH
27976: LD_INT 0
27978: PPUSH
27979: LD_INT 5
27981: PPUSH
27982: CALL_OW 12
27986: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27987: LD_ADDR_VAR 0 2
27991: PUSH
27992: LD_VAR 0 1
27996: PPUSH
27997: CALL_OW 250
28001: PPUSH
28002: LD_VAR 0 4
28006: PPUSH
28007: LD_INT 3
28009: PPUSH
28010: LD_INT 12
28012: PPUSH
28013: CALL_OW 12
28017: PPUSH
28018: CALL_OW 272
28022: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28023: LD_ADDR_VAR 0 3
28027: PUSH
28028: LD_VAR 0 1
28032: PPUSH
28033: CALL_OW 251
28037: PPUSH
28038: LD_VAR 0 4
28042: PPUSH
28043: LD_INT 3
28045: PPUSH
28046: LD_INT 12
28048: PPUSH
28049: CALL_OW 12
28053: PPUSH
28054: CALL_OW 273
28058: ST_TO_ADDR
// if ValidHex ( x , y ) then
28059: LD_VAR 0 2
28063: PPUSH
28064: LD_VAR 0 3
28068: PPUSH
28069: CALL_OW 488
28073: IFFALSE 28108
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28075: LD_VAR 0 1
28079: PPUSH
28080: LD_VAR 0 2
28084: PPUSH
28085: LD_VAR 0 3
28089: PPUSH
28090: LD_INT 3
28092: PPUSH
28093: LD_INT 6
28095: PPUSH
28096: CALL_OW 12
28100: PPUSH
28101: LD_INT 1
28103: PPUSH
28104: CALL_OW 483
// end ;
28108: GO 27968
28110: POP
28111: POP
// end ;
28112: PPOPN 5
28114: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28115: LD_EXP 52
28119: PUSH
28120: LD_EXP 87
28124: AND
28125: IFFALSE 28219
28127: GO 28129
28129: DISABLE
28130: LD_INT 0
28132: PPUSH
28133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28134: LD_ADDR_VAR 0 2
28138: PUSH
28139: LD_INT 22
28141: PUSH
28142: LD_OWVAR 2
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 32
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 21
28163: PUSH
28164: LD_INT 2
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: LIST
28175: PPUSH
28176: CALL_OW 69
28180: ST_TO_ADDR
// if not tmp then
28181: LD_VAR 0 2
28185: NOT
28186: IFFALSE 28190
// exit ;
28188: GO 28219
// for i in tmp do
28190: LD_ADDR_VAR 0 1
28194: PUSH
28195: LD_VAR 0 2
28199: PUSH
28200: FOR_IN
28201: IFFALSE 28217
// SetFuel ( i , 0 ) ;
28203: LD_VAR 0 1
28207: PPUSH
28208: LD_INT 0
28210: PPUSH
28211: CALL_OW 240
28215: GO 28200
28217: POP
28218: POP
// end ;
28219: PPOPN 2
28221: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28222: LD_EXP 52
28226: PUSH
28227: LD_EXP 88
28231: AND
28232: IFFALSE 28298
28234: GO 28236
28236: DISABLE
28237: LD_INT 0
28239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28240: LD_ADDR_VAR 0 1
28244: PUSH
28245: LD_INT 22
28247: PUSH
28248: LD_OWVAR 2
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 30
28259: PUSH
28260: LD_INT 29
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PPUSH
28271: CALL_OW 69
28275: ST_TO_ADDR
// if not tmp then
28276: LD_VAR 0 1
28280: NOT
28281: IFFALSE 28285
// exit ;
28283: GO 28298
// DestroyUnit ( tmp [ 1 ] ) ;
28285: LD_VAR 0 1
28289: PUSH
28290: LD_INT 1
28292: ARRAY
28293: PPUSH
28294: CALL_OW 65
// end ;
28298: PPOPN 1
28300: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28301: LD_EXP 52
28305: PUSH
28306: LD_EXP 90
28310: AND
28311: IFFALSE 28440
28313: GO 28315
28315: DISABLE
28316: LD_INT 0
28318: PPUSH
// begin uc_side := 0 ;
28319: LD_ADDR_OWVAR 20
28323: PUSH
28324: LD_INT 0
28326: ST_TO_ADDR
// uc_nation := nation_arabian ;
28327: LD_ADDR_OWVAR 21
28331: PUSH
28332: LD_INT 2
28334: ST_TO_ADDR
// hc_gallery :=  ;
28335: LD_ADDR_OWVAR 33
28339: PUSH
28340: LD_STRING 
28342: ST_TO_ADDR
// hc_name :=  ;
28343: LD_ADDR_OWVAR 26
28347: PUSH
28348: LD_STRING 
28350: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28351: LD_INT 1
28353: PPUSH
28354: LD_INT 11
28356: PPUSH
28357: LD_INT 10
28359: PPUSH
28360: CALL_OW 380
// un := CreateHuman ;
28364: LD_ADDR_VAR 0 1
28368: PUSH
28369: CALL_OW 44
28373: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28374: LD_VAR 0 1
28378: PPUSH
28379: LD_INT 1
28381: PPUSH
28382: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28386: LD_INT 35
28388: PPUSH
28389: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28393: LD_VAR 0 1
28397: PPUSH
28398: LD_INT 22
28400: PUSH
28401: LD_OWVAR 2
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PPUSH
28410: CALL_OW 69
28414: PPUSH
28415: LD_VAR 0 1
28419: PPUSH
28420: CALL_OW 74
28424: PPUSH
28425: CALL_OW 115
// until IsDead ( un ) ;
28429: LD_VAR 0 1
28433: PPUSH
28434: CALL_OW 301
28438: IFFALSE 28386
// end ;
28440: PPOPN 1
28442: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28443: LD_EXP 52
28447: PUSH
28448: LD_EXP 92
28452: AND
28453: IFFALSE 28465
28455: GO 28457
28457: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28458: LD_STRING earthquake(getX(game), 0, 32)
28460: PPUSH
28461: CALL_OW 559
28465: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28466: LD_EXP 52
28470: PUSH
28471: LD_EXP 93
28475: AND
28476: IFFALSE 28567
28478: GO 28480
28480: DISABLE
28481: LD_INT 0
28483: PPUSH
// begin enable ;
28484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28485: LD_ADDR_VAR 0 1
28489: PUSH
28490: LD_INT 22
28492: PUSH
28493: LD_OWVAR 2
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 21
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 33
28514: PUSH
28515: LD_INT 3
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: LIST
28526: PPUSH
28527: CALL_OW 69
28531: ST_TO_ADDR
// if not tmp then
28532: LD_VAR 0 1
28536: NOT
28537: IFFALSE 28541
// exit ;
28539: GO 28567
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28541: LD_VAR 0 1
28545: PUSH
28546: LD_INT 1
28548: PPUSH
28549: LD_VAR 0 1
28553: PPUSH
28554: CALL_OW 12
28558: ARRAY
28559: PPUSH
28560: LD_INT 1
28562: PPUSH
28563: CALL_OW 234
// end ;
28567: PPOPN 1
28569: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28570: LD_EXP 52
28574: PUSH
28575: LD_EXP 94
28579: AND
28580: IFFALSE 28721
28582: GO 28584
28584: DISABLE
28585: LD_INT 0
28587: PPUSH
28588: PPUSH
28589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28590: LD_ADDR_VAR 0 3
28594: PUSH
28595: LD_INT 22
28597: PUSH
28598: LD_OWVAR 2
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 25
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PPUSH
28621: CALL_OW 69
28625: ST_TO_ADDR
// if not tmp then
28626: LD_VAR 0 3
28630: NOT
28631: IFFALSE 28635
// exit ;
28633: GO 28721
// un := tmp [ rand ( 1 , tmp ) ] ;
28635: LD_ADDR_VAR 0 2
28639: PUSH
28640: LD_VAR 0 3
28644: PUSH
28645: LD_INT 1
28647: PPUSH
28648: LD_VAR 0 3
28652: PPUSH
28653: CALL_OW 12
28657: ARRAY
28658: ST_TO_ADDR
// if Crawls ( un ) then
28659: LD_VAR 0 2
28663: PPUSH
28664: CALL_OW 318
28668: IFFALSE 28679
// ComWalk ( un ) ;
28670: LD_VAR 0 2
28674: PPUSH
28675: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28679: LD_VAR 0 2
28683: PPUSH
28684: LD_INT 9
28686: PPUSH
28687: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28691: LD_INT 28
28693: PPUSH
28694: LD_OWVAR 2
28698: PPUSH
28699: LD_INT 2
28701: PPUSH
28702: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28706: LD_INT 29
28708: PPUSH
28709: LD_OWVAR 2
28713: PPUSH
28714: LD_INT 2
28716: PPUSH
28717: CALL_OW 322
// end ;
28721: PPOPN 3
28723: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28724: LD_EXP 52
28728: PUSH
28729: LD_EXP 95
28733: AND
28734: IFFALSE 28845
28736: GO 28738
28738: DISABLE
28739: LD_INT 0
28741: PPUSH
28742: PPUSH
28743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28744: LD_ADDR_VAR 0 3
28748: PUSH
28749: LD_INT 22
28751: PUSH
28752: LD_OWVAR 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 25
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PPUSH
28775: CALL_OW 69
28779: ST_TO_ADDR
// if not tmp then
28780: LD_VAR 0 3
28784: NOT
28785: IFFALSE 28789
// exit ;
28787: GO 28845
// un := tmp [ rand ( 1 , tmp ) ] ;
28789: LD_ADDR_VAR 0 2
28793: PUSH
28794: LD_VAR 0 3
28798: PUSH
28799: LD_INT 1
28801: PPUSH
28802: LD_VAR 0 3
28806: PPUSH
28807: CALL_OW 12
28811: ARRAY
28812: ST_TO_ADDR
// if Crawls ( un ) then
28813: LD_VAR 0 2
28817: PPUSH
28818: CALL_OW 318
28822: IFFALSE 28833
// ComWalk ( un ) ;
28824: LD_VAR 0 2
28828: PPUSH
28829: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28833: LD_VAR 0 2
28837: PPUSH
28838: LD_INT 8
28840: PPUSH
28841: CALL_OW 336
// end ;
28845: PPOPN 3
28847: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28848: LD_EXP 52
28852: PUSH
28853: LD_EXP 96
28857: AND
28858: IFFALSE 29002
28860: GO 28862
28862: DISABLE
28863: LD_INT 0
28865: PPUSH
28866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28867: LD_ADDR_VAR 0 2
28871: PUSH
28872: LD_INT 22
28874: PUSH
28875: LD_OWVAR 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 21
28886: PUSH
28887: LD_INT 2
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: LD_INT 34
28899: PUSH
28900: LD_INT 12
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 34
28909: PUSH
28910: LD_INT 51
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 34
28919: PUSH
28920: LD_INT 32
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: PPUSH
28938: CALL_OW 69
28942: ST_TO_ADDR
// if not tmp then
28943: LD_VAR 0 2
28947: NOT
28948: IFFALSE 28952
// exit ;
28950: GO 29002
// for i in tmp do
28952: LD_ADDR_VAR 0 1
28956: PUSH
28957: LD_VAR 0 2
28961: PUSH
28962: FOR_IN
28963: IFFALSE 29000
// if GetCargo ( i , mat_artifact ) = 0 then
28965: LD_VAR 0 1
28969: PPUSH
28970: LD_INT 4
28972: PPUSH
28973: CALL_OW 289
28977: PUSH
28978: LD_INT 0
28980: EQUAL
28981: IFFALSE 28998
// SetCargo ( i , mat_siberit , 100 ) ;
28983: LD_VAR 0 1
28987: PPUSH
28988: LD_INT 3
28990: PPUSH
28991: LD_INT 100
28993: PPUSH
28994: CALL_OW 290
28998: GO 28962
29000: POP
29001: POP
// end ;
29002: PPOPN 2
29004: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29005: LD_EXP 52
29009: PUSH
29010: LD_EXP 97
29014: AND
29015: IFFALSE 29198
29017: GO 29019
29019: DISABLE
29020: LD_INT 0
29022: PPUSH
29023: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29024: LD_ADDR_VAR 0 2
29028: PUSH
29029: LD_INT 22
29031: PUSH
29032: LD_OWVAR 2
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PPUSH
29041: CALL_OW 69
29045: ST_TO_ADDR
// if not tmp then
29046: LD_VAR 0 2
29050: NOT
29051: IFFALSE 29055
// exit ;
29053: GO 29198
// for i := 1 to 2 do
29055: LD_ADDR_VAR 0 1
29059: PUSH
29060: DOUBLE
29061: LD_INT 1
29063: DEC
29064: ST_TO_ADDR
29065: LD_INT 2
29067: PUSH
29068: FOR_TO
29069: IFFALSE 29196
// begin uc_side := your_side ;
29071: LD_ADDR_OWVAR 20
29075: PUSH
29076: LD_OWVAR 2
29080: ST_TO_ADDR
// uc_nation := nation_american ;
29081: LD_ADDR_OWVAR 21
29085: PUSH
29086: LD_INT 1
29088: ST_TO_ADDR
// vc_chassis := us_morphling ;
29089: LD_ADDR_OWVAR 37
29093: PUSH
29094: LD_INT 5
29096: ST_TO_ADDR
// vc_engine := engine_siberite ;
29097: LD_ADDR_OWVAR 39
29101: PUSH
29102: LD_INT 3
29104: ST_TO_ADDR
// vc_control := control_computer ;
29105: LD_ADDR_OWVAR 38
29109: PUSH
29110: LD_INT 3
29112: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29113: LD_ADDR_OWVAR 40
29117: PUSH
29118: LD_INT 10
29120: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29121: LD_VAR 0 2
29125: PUSH
29126: LD_INT 1
29128: ARRAY
29129: PPUSH
29130: CALL_OW 310
29134: NOT
29135: IFFALSE 29182
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29137: CALL_OW 45
29141: PPUSH
29142: LD_VAR 0 2
29146: PUSH
29147: LD_INT 1
29149: ARRAY
29150: PPUSH
29151: CALL_OW 250
29155: PPUSH
29156: LD_VAR 0 2
29160: PUSH
29161: LD_INT 1
29163: ARRAY
29164: PPUSH
29165: CALL_OW 251
29169: PPUSH
29170: LD_INT 12
29172: PPUSH
29173: LD_INT 1
29175: PPUSH
29176: CALL_OW 50
29180: GO 29194
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29182: CALL_OW 45
29186: PPUSH
29187: LD_INT 1
29189: PPUSH
29190: CALL_OW 51
// end ;
29194: GO 29068
29196: POP
29197: POP
// end ;
29198: PPOPN 2
29200: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29201: LD_EXP 52
29205: PUSH
29206: LD_EXP 98
29210: AND
29211: IFFALSE 29433
29213: GO 29215
29215: DISABLE
29216: LD_INT 0
29218: PPUSH
29219: PPUSH
29220: PPUSH
29221: PPUSH
29222: PPUSH
29223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29224: LD_ADDR_VAR 0 6
29228: PUSH
29229: LD_INT 22
29231: PUSH
29232: LD_OWVAR 2
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 21
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 3
29253: PUSH
29254: LD_INT 23
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: PPUSH
29273: CALL_OW 69
29277: ST_TO_ADDR
// if not tmp then
29278: LD_VAR 0 6
29282: NOT
29283: IFFALSE 29287
// exit ;
29285: GO 29433
// s1 := rand ( 1 , 4 ) ;
29287: LD_ADDR_VAR 0 2
29291: PUSH
29292: LD_INT 1
29294: PPUSH
29295: LD_INT 4
29297: PPUSH
29298: CALL_OW 12
29302: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29303: LD_ADDR_VAR 0 4
29307: PUSH
29308: LD_VAR 0 6
29312: PUSH
29313: LD_INT 1
29315: ARRAY
29316: PPUSH
29317: LD_VAR 0 2
29321: PPUSH
29322: CALL_OW 259
29326: ST_TO_ADDR
// if s1 = 1 then
29327: LD_VAR 0 2
29331: PUSH
29332: LD_INT 1
29334: EQUAL
29335: IFFALSE 29355
// s2 := rand ( 2 , 4 ) else
29337: LD_ADDR_VAR 0 3
29341: PUSH
29342: LD_INT 2
29344: PPUSH
29345: LD_INT 4
29347: PPUSH
29348: CALL_OW 12
29352: ST_TO_ADDR
29353: GO 29363
// s2 := 1 ;
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_INT 1
29362: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29363: LD_ADDR_VAR 0 5
29367: PUSH
29368: LD_VAR 0 6
29372: PUSH
29373: LD_INT 1
29375: ARRAY
29376: PPUSH
29377: LD_VAR 0 3
29381: PPUSH
29382: CALL_OW 259
29386: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29387: LD_VAR 0 6
29391: PUSH
29392: LD_INT 1
29394: ARRAY
29395: PPUSH
29396: LD_VAR 0 2
29400: PPUSH
29401: LD_VAR 0 5
29405: PPUSH
29406: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29410: LD_VAR 0 6
29414: PUSH
29415: LD_INT 1
29417: ARRAY
29418: PPUSH
29419: LD_VAR 0 3
29423: PPUSH
29424: LD_VAR 0 4
29428: PPUSH
29429: CALL_OW 237
// end ;
29433: PPOPN 6
29435: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29436: LD_EXP 52
29440: PUSH
29441: LD_EXP 99
29445: AND
29446: IFFALSE 29525
29448: GO 29450
29450: DISABLE
29451: LD_INT 0
29453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29454: LD_ADDR_VAR 0 1
29458: PUSH
29459: LD_INT 22
29461: PUSH
29462: LD_OWVAR 2
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 30
29473: PUSH
29474: LD_INT 3
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PPUSH
29485: CALL_OW 69
29489: ST_TO_ADDR
// if not tmp then
29490: LD_VAR 0 1
29494: NOT
29495: IFFALSE 29499
// exit ;
29497: GO 29525
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29499: LD_VAR 0 1
29503: PUSH
29504: LD_INT 1
29506: PPUSH
29507: LD_VAR 0 1
29511: PPUSH
29512: CALL_OW 12
29516: ARRAY
29517: PPUSH
29518: LD_INT 1
29520: PPUSH
29521: CALL_OW 234
// end ;
29525: PPOPN 1
29527: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29528: LD_EXP 52
29532: PUSH
29533: LD_EXP 100
29537: AND
29538: IFFALSE 29650
29540: GO 29542
29542: DISABLE
29543: LD_INT 0
29545: PPUSH
29546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29547: LD_ADDR_VAR 0 2
29551: PUSH
29552: LD_INT 22
29554: PUSH
29555: LD_OWVAR 2
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 2
29566: PUSH
29567: LD_INT 30
29569: PUSH
29570: LD_INT 27
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 30
29579: PUSH
29580: LD_INT 26
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 30
29589: PUSH
29590: LD_INT 28
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PPUSH
29607: CALL_OW 69
29611: ST_TO_ADDR
// if not tmp then
29612: LD_VAR 0 2
29616: NOT
29617: IFFALSE 29621
// exit ;
29619: GO 29650
// for i in tmp do
29621: LD_ADDR_VAR 0 1
29625: PUSH
29626: LD_VAR 0 2
29630: PUSH
29631: FOR_IN
29632: IFFALSE 29648
// SetLives ( i , 1 ) ;
29634: LD_VAR 0 1
29638: PPUSH
29639: LD_INT 1
29641: PPUSH
29642: CALL_OW 234
29646: GO 29631
29648: POP
29649: POP
// end ;
29650: PPOPN 2
29652: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29653: LD_EXP 52
29657: PUSH
29658: LD_EXP 101
29662: AND
29663: IFFALSE 29950
29665: GO 29667
29667: DISABLE
29668: LD_INT 0
29670: PPUSH
29671: PPUSH
29672: PPUSH
// begin i := rand ( 1 , 7 ) ;
29673: LD_ADDR_VAR 0 1
29677: PUSH
29678: LD_INT 1
29680: PPUSH
29681: LD_INT 7
29683: PPUSH
29684: CALL_OW 12
29688: ST_TO_ADDR
// case i of 1 :
29689: LD_VAR 0 1
29693: PUSH
29694: LD_INT 1
29696: DOUBLE
29697: EQUAL
29698: IFTRUE 29702
29700: GO 29712
29702: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29703: LD_STRING earthquake(getX(game), 0, 32)
29705: PPUSH
29706: CALL_OW 559
29710: GO 29950
29712: LD_INT 2
29714: DOUBLE
29715: EQUAL
29716: IFTRUE 29720
29718: GO 29734
29720: POP
// begin ToLua ( displayStucuk(); ) ;
29721: LD_STRING displayStucuk();
29723: PPUSH
29724: CALL_OW 559
// ResetFog ;
29728: CALL_OW 335
// end ; 3 :
29732: GO 29950
29734: LD_INT 3
29736: DOUBLE
29737: EQUAL
29738: IFTRUE 29742
29740: GO 29846
29742: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29743: LD_ADDR_VAR 0 2
29747: PUSH
29748: LD_INT 22
29750: PUSH
29751: LD_OWVAR 2
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 25
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PPUSH
29774: CALL_OW 69
29778: ST_TO_ADDR
// if not tmp then
29779: LD_VAR 0 2
29783: NOT
29784: IFFALSE 29788
// exit ;
29786: GO 29950
// un := tmp [ rand ( 1 , tmp ) ] ;
29788: LD_ADDR_VAR 0 3
29792: PUSH
29793: LD_VAR 0 2
29797: PUSH
29798: LD_INT 1
29800: PPUSH
29801: LD_VAR 0 2
29805: PPUSH
29806: CALL_OW 12
29810: ARRAY
29811: ST_TO_ADDR
// if Crawls ( un ) then
29812: LD_VAR 0 3
29816: PPUSH
29817: CALL_OW 318
29821: IFFALSE 29832
// ComWalk ( un ) ;
29823: LD_VAR 0 3
29827: PPUSH
29828: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29832: LD_VAR 0 3
29836: PPUSH
29837: LD_INT 8
29839: PPUSH
29840: CALL_OW 336
// end ; 4 :
29844: GO 29950
29846: LD_INT 4
29848: DOUBLE
29849: EQUAL
29850: IFTRUE 29854
29852: GO 29928
29854: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29855: LD_ADDR_VAR 0 2
29859: PUSH
29860: LD_INT 22
29862: PUSH
29863: LD_OWVAR 2
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 30
29874: PUSH
29875: LD_INT 29
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PPUSH
29886: CALL_OW 69
29890: ST_TO_ADDR
// if not tmp then
29891: LD_VAR 0 2
29895: NOT
29896: IFFALSE 29900
// exit ;
29898: GO 29950
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29900: LD_VAR 0 2
29904: PUSH
29905: LD_INT 1
29907: ARRAY
29908: PPUSH
29909: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29913: LD_VAR 0 2
29917: PUSH
29918: LD_INT 1
29920: ARRAY
29921: PPUSH
29922: CALL_OW 65
// end ; 5 .. 7 :
29926: GO 29950
29928: LD_INT 5
29930: DOUBLE
29931: GREATEREQUAL
29932: IFFALSE 29940
29934: LD_INT 7
29936: DOUBLE
29937: LESSEQUAL
29938: IFTRUE 29942
29940: GO 29949
29942: POP
// StreamSibBomb ; end ;
29943: CALL 26187 0 0
29947: GO 29950
29949: POP
// end ;
29950: PPOPN 3
29952: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29953: LD_EXP 52
29957: PUSH
29958: LD_EXP 102
29962: AND
29963: IFFALSE 30119
29965: GO 29967
29967: DISABLE
29968: LD_INT 0
29970: PPUSH
29971: PPUSH
29972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29973: LD_ADDR_VAR 0 2
29977: PUSH
29978: LD_INT 81
29980: PUSH
29981: LD_OWVAR 2
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 2
29992: PUSH
29993: LD_INT 21
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 21
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PPUSH
30022: CALL_OW 69
30026: ST_TO_ADDR
// if not tmp then
30027: LD_VAR 0 2
30031: NOT
30032: IFFALSE 30036
// exit ;
30034: GO 30119
// p := 0 ;
30036: LD_ADDR_VAR 0 3
30040: PUSH
30041: LD_INT 0
30043: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30044: LD_INT 35
30046: PPUSH
30047: CALL_OW 67
// p := p + 1 ;
30051: LD_ADDR_VAR 0 3
30055: PUSH
30056: LD_VAR 0 3
30060: PUSH
30061: LD_INT 1
30063: PLUS
30064: ST_TO_ADDR
// for i in tmp do
30065: LD_ADDR_VAR 0 1
30069: PUSH
30070: LD_VAR 0 2
30074: PUSH
30075: FOR_IN
30076: IFFALSE 30107
// if GetLives ( i ) < 1000 then
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL_OW 256
30087: PUSH
30088: LD_INT 1000
30090: LESS
30091: IFFALSE 30105
// SetLives ( i , 1000 ) ;
30093: LD_VAR 0 1
30097: PPUSH
30098: LD_INT 1000
30100: PPUSH
30101: CALL_OW 234
30105: GO 30075
30107: POP
30108: POP
// until p > 20 ;
30109: LD_VAR 0 3
30113: PUSH
30114: LD_INT 20
30116: GREATER
30117: IFFALSE 30044
// end ;
30119: PPOPN 3
30121: END
// every 0 0$1 trigger StreamModeActive and sTime do
30122: LD_EXP 52
30126: PUSH
30127: LD_EXP 103
30131: AND
30132: IFFALSE 30167
30134: GO 30136
30136: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30137: LD_INT 28
30139: PPUSH
30140: LD_OWVAR 2
30144: PPUSH
30145: LD_INT 2
30147: PPUSH
30148: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30152: LD_INT 30
30154: PPUSH
30155: LD_OWVAR 2
30159: PPUSH
30160: LD_INT 2
30162: PPUSH
30163: CALL_OW 322
// end ;
30167: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30168: LD_EXP 52
30172: PUSH
30173: LD_EXP 104
30177: AND
30178: IFFALSE 30299
30180: GO 30182
30182: DISABLE
30183: LD_INT 0
30185: PPUSH
30186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30187: LD_ADDR_VAR 0 2
30191: PUSH
30192: LD_INT 22
30194: PUSH
30195: LD_OWVAR 2
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 21
30206: PUSH
30207: LD_INT 1
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 3
30216: PUSH
30217: LD_INT 23
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: PPUSH
30236: CALL_OW 69
30240: ST_TO_ADDR
// if not tmp then
30241: LD_VAR 0 2
30245: NOT
30246: IFFALSE 30250
// exit ;
30248: GO 30299
// for i in tmp do
30250: LD_ADDR_VAR 0 1
30254: PUSH
30255: LD_VAR 0 2
30259: PUSH
30260: FOR_IN
30261: IFFALSE 30297
// begin if Crawls ( i ) then
30263: LD_VAR 0 1
30267: PPUSH
30268: CALL_OW 318
30272: IFFALSE 30283
// ComWalk ( i ) ;
30274: LD_VAR 0 1
30278: PPUSH
30279: CALL_OW 138
// SetClass ( i , 2 ) ;
30283: LD_VAR 0 1
30287: PPUSH
30288: LD_INT 2
30290: PPUSH
30291: CALL_OW 336
// end ;
30295: GO 30260
30297: POP
30298: POP
// end ;
30299: PPOPN 2
30301: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30302: LD_EXP 52
30306: PUSH
30307: LD_EXP 105
30311: AND
30312: IFFALSE 30600
30314: GO 30316
30316: DISABLE
30317: LD_INT 0
30319: PPUSH
30320: PPUSH
30321: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30322: LD_OWVAR 2
30326: PPUSH
30327: LD_INT 9
30329: PPUSH
30330: LD_INT 1
30332: PPUSH
30333: LD_INT 1
30335: PPUSH
30336: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30340: LD_INT 9
30342: PPUSH
30343: LD_OWVAR 2
30347: PPUSH
30348: CALL_OW 343
// uc_side := 9 ;
30352: LD_ADDR_OWVAR 20
30356: PUSH
30357: LD_INT 9
30359: ST_TO_ADDR
// uc_nation := 2 ;
30360: LD_ADDR_OWVAR 21
30364: PUSH
30365: LD_INT 2
30367: ST_TO_ADDR
// hc_name := Dark Warrior ;
30368: LD_ADDR_OWVAR 26
30372: PUSH
30373: LD_STRING Dark Warrior
30375: ST_TO_ADDR
// hc_gallery :=  ;
30376: LD_ADDR_OWVAR 33
30380: PUSH
30381: LD_STRING 
30383: ST_TO_ADDR
// hc_noskilllimit := true ;
30384: LD_ADDR_OWVAR 76
30388: PUSH
30389: LD_INT 1
30391: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30392: LD_ADDR_OWVAR 31
30396: PUSH
30397: LD_INT 30
30399: PUSH
30400: LD_INT 30
30402: PUSH
30403: LD_INT 30
30405: PUSH
30406: LD_INT 30
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: ST_TO_ADDR
// un := CreateHuman ;
30415: LD_ADDR_VAR 0 3
30419: PUSH
30420: CALL_OW 44
30424: ST_TO_ADDR
// hc_noskilllimit := false ;
30425: LD_ADDR_OWVAR 76
30429: PUSH
30430: LD_INT 0
30432: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30433: LD_VAR 0 3
30437: PPUSH
30438: LD_INT 1
30440: PPUSH
30441: CALL_OW 51
// ToLua ( playRanger() ) ;
30445: LD_STRING playRanger()
30447: PPUSH
30448: CALL_OW 559
// p := 0 ;
30452: LD_ADDR_VAR 0 2
30456: PUSH
30457: LD_INT 0
30459: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30460: LD_INT 35
30462: PPUSH
30463: CALL_OW 67
// p := p + 1 ;
30467: LD_ADDR_VAR 0 2
30471: PUSH
30472: LD_VAR 0 2
30476: PUSH
30477: LD_INT 1
30479: PLUS
30480: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30481: LD_VAR 0 3
30485: PPUSH
30486: CALL_OW 256
30490: PUSH
30491: LD_INT 1000
30493: LESS
30494: IFFALSE 30508
// SetLives ( un , 1000 ) ;
30496: LD_VAR 0 3
30500: PPUSH
30501: LD_INT 1000
30503: PPUSH
30504: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30508: LD_VAR 0 3
30512: PPUSH
30513: LD_INT 81
30515: PUSH
30516: LD_OWVAR 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 91
30527: PUSH
30528: LD_VAR 0 3
30532: PUSH
30533: LD_INT 30
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PPUSH
30545: CALL_OW 69
30549: PPUSH
30550: LD_VAR 0 3
30554: PPUSH
30555: CALL_OW 74
30559: PPUSH
30560: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30564: LD_VAR 0 2
30568: PUSH
30569: LD_INT 80
30571: GREATER
30572: PUSH
30573: LD_VAR 0 3
30577: PPUSH
30578: CALL_OW 301
30582: OR
30583: IFFALSE 30460
// if un then
30585: LD_VAR 0 3
30589: IFFALSE 30600
// RemoveUnit ( un ) ;
30591: LD_VAR 0 3
30595: PPUSH
30596: CALL_OW 64
// end ;
30600: PPOPN 3
30602: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30603: LD_EXP 106
30607: IFFALSE 30723
30609: GO 30611
30611: DISABLE
30612: LD_INT 0
30614: PPUSH
30615: PPUSH
30616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30617: LD_ADDR_VAR 0 2
30621: PUSH
30622: LD_INT 81
30624: PUSH
30625: LD_OWVAR 2
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 21
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PPUSH
30648: CALL_OW 69
30652: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30653: LD_STRING playComputer()
30655: PPUSH
30656: CALL_OW 559
// if not tmp then
30660: LD_VAR 0 2
30664: NOT
30665: IFFALSE 30669
// exit ;
30667: GO 30723
// for i in tmp do
30669: LD_ADDR_VAR 0 1
30673: PUSH
30674: LD_VAR 0 2
30678: PUSH
30679: FOR_IN
30680: IFFALSE 30721
// for j := 1 to 4 do
30682: LD_ADDR_VAR 0 3
30686: PUSH
30687: DOUBLE
30688: LD_INT 1
30690: DEC
30691: ST_TO_ADDR
30692: LD_INT 4
30694: PUSH
30695: FOR_TO
30696: IFFALSE 30717
// SetSkill ( i , j , 10 ) ;
30698: LD_VAR 0 1
30702: PPUSH
30703: LD_VAR 0 3
30707: PPUSH
30708: LD_INT 10
30710: PPUSH
30711: CALL_OW 237
30715: GO 30695
30717: POP
30718: POP
30719: GO 30679
30721: POP
30722: POP
// end ;
30723: PPOPN 3
30725: END
// every 0 0$1 trigger s30 do var i , tmp ;
30726: LD_EXP 107
30730: IFFALSE 30799
30732: GO 30734
30734: DISABLE
30735: LD_INT 0
30737: PPUSH
30738: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30739: LD_ADDR_VAR 0 2
30743: PUSH
30744: LD_INT 22
30746: PUSH
30747: LD_OWVAR 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PPUSH
30756: CALL_OW 69
30760: ST_TO_ADDR
// if not tmp then
30761: LD_VAR 0 2
30765: NOT
30766: IFFALSE 30770
// exit ;
30768: GO 30799
// for i in tmp do
30770: LD_ADDR_VAR 0 1
30774: PUSH
30775: LD_VAR 0 2
30779: PUSH
30780: FOR_IN
30781: IFFALSE 30797
// SetLives ( i , 300 ) ;
30783: LD_VAR 0 1
30787: PPUSH
30788: LD_INT 300
30790: PPUSH
30791: CALL_OW 234
30795: GO 30780
30797: POP
30798: POP
// end ;
30799: PPOPN 2
30801: END
// every 0 0$1 trigger s60 do var i , tmp ;
30802: LD_EXP 108
30806: IFFALSE 30875
30808: GO 30810
30810: DISABLE
30811: LD_INT 0
30813: PPUSH
30814: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30815: LD_ADDR_VAR 0 2
30819: PUSH
30820: LD_INT 22
30822: PUSH
30823: LD_OWVAR 2
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PPUSH
30832: CALL_OW 69
30836: ST_TO_ADDR
// if not tmp then
30837: LD_VAR 0 2
30841: NOT
30842: IFFALSE 30846
// exit ;
30844: GO 30875
// for i in tmp do
30846: LD_ADDR_VAR 0 1
30850: PUSH
30851: LD_VAR 0 2
30855: PUSH
30856: FOR_IN
30857: IFFALSE 30873
// SetLives ( i , 600 ) ;
30859: LD_VAR 0 1
30863: PPUSH
30864: LD_INT 600
30866: PPUSH
30867: CALL_OW 234
30871: GO 30856
30873: POP
30874: POP
// end ;
30875: PPOPN 2
30877: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30878: LD_INT 0
30880: PPUSH
// case cmd of 301 :
30881: LD_VAR 0 1
30885: PUSH
30886: LD_INT 301
30888: DOUBLE
30889: EQUAL
30890: IFTRUE 30894
30892: GO 30926
30894: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30895: LD_VAR 0 6
30899: PPUSH
30900: LD_VAR 0 7
30904: PPUSH
30905: LD_VAR 0 8
30909: PPUSH
30910: LD_VAR 0 4
30914: PPUSH
30915: LD_VAR 0 5
30919: PPUSH
30920: CALL 32127 0 5
30924: GO 31047
30926: LD_INT 302
30928: DOUBLE
30929: EQUAL
30930: IFTRUE 30934
30932: GO 30971
30934: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30935: LD_VAR 0 6
30939: PPUSH
30940: LD_VAR 0 7
30944: PPUSH
30945: LD_VAR 0 8
30949: PPUSH
30950: LD_VAR 0 9
30954: PPUSH
30955: LD_VAR 0 4
30959: PPUSH
30960: LD_VAR 0 5
30964: PPUSH
30965: CALL 32218 0 6
30969: GO 31047
30971: LD_INT 303
30973: DOUBLE
30974: EQUAL
30975: IFTRUE 30979
30977: GO 31016
30979: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30980: LD_VAR 0 6
30984: PPUSH
30985: LD_VAR 0 7
30989: PPUSH
30990: LD_VAR 0 8
30994: PPUSH
30995: LD_VAR 0 9
30999: PPUSH
31000: LD_VAR 0 4
31004: PPUSH
31005: LD_VAR 0 5
31009: PPUSH
31010: CALL 31052 0 6
31014: GO 31047
31016: LD_INT 304
31018: DOUBLE
31019: EQUAL
31020: IFTRUE 31024
31022: GO 31046
31024: POP
// hHackTeleport ( unit , x , y ) ; end ;
31025: LD_VAR 0 2
31029: PPUSH
31030: LD_VAR 0 4
31034: PPUSH
31035: LD_VAR 0 5
31039: PPUSH
31040: CALL 32811 0 3
31044: GO 31047
31046: POP
// end ;
31047: LD_VAR 0 12
31051: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31052: LD_INT 0
31054: PPUSH
31055: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31056: LD_VAR 0 1
31060: PUSH
31061: LD_INT 1
31063: LESS
31064: PUSH
31065: LD_VAR 0 1
31069: PUSH
31070: LD_INT 3
31072: GREATER
31073: OR
31074: PUSH
31075: LD_VAR 0 5
31079: PPUSH
31080: LD_VAR 0 6
31084: PPUSH
31085: CALL_OW 428
31089: OR
31090: IFFALSE 31094
// exit ;
31092: GO 31814
// uc_side := your_side ;
31094: LD_ADDR_OWVAR 20
31098: PUSH
31099: LD_OWVAR 2
31103: ST_TO_ADDR
// uc_nation := nation ;
31104: LD_ADDR_OWVAR 21
31108: PUSH
31109: LD_VAR 0 1
31113: ST_TO_ADDR
// bc_level = 1 ;
31114: LD_ADDR_OWVAR 43
31118: PUSH
31119: LD_INT 1
31121: ST_TO_ADDR
// case btype of 1 :
31122: LD_VAR 0 2
31126: PUSH
31127: LD_INT 1
31129: DOUBLE
31130: EQUAL
31131: IFTRUE 31135
31133: GO 31146
31135: POP
// bc_type := b_depot ; 2 :
31136: LD_ADDR_OWVAR 42
31140: PUSH
31141: LD_INT 0
31143: ST_TO_ADDR
31144: GO 31758
31146: LD_INT 2
31148: DOUBLE
31149: EQUAL
31150: IFTRUE 31154
31152: GO 31165
31154: POP
// bc_type := b_warehouse ; 3 :
31155: LD_ADDR_OWVAR 42
31159: PUSH
31160: LD_INT 1
31162: ST_TO_ADDR
31163: GO 31758
31165: LD_INT 3
31167: DOUBLE
31168: EQUAL
31169: IFTRUE 31173
31171: GO 31184
31173: POP
// bc_type := b_lab ; 4 .. 9 :
31174: LD_ADDR_OWVAR 42
31178: PUSH
31179: LD_INT 6
31181: ST_TO_ADDR
31182: GO 31758
31184: LD_INT 4
31186: DOUBLE
31187: GREATEREQUAL
31188: IFFALSE 31196
31190: LD_INT 9
31192: DOUBLE
31193: LESSEQUAL
31194: IFTRUE 31198
31196: GO 31250
31198: POP
// begin bc_type := b_lab_half ;
31199: LD_ADDR_OWVAR 42
31203: PUSH
31204: LD_INT 7
31206: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31207: LD_ADDR_OWVAR 44
31211: PUSH
31212: LD_INT 10
31214: PUSH
31215: LD_INT 11
31217: PUSH
31218: LD_INT 12
31220: PUSH
31221: LD_INT 15
31223: PUSH
31224: LD_INT 14
31226: PUSH
31227: LD_INT 13
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: PUSH
31238: LD_VAR 0 2
31242: PUSH
31243: LD_INT 3
31245: MINUS
31246: ARRAY
31247: ST_TO_ADDR
// end ; 10 .. 13 :
31248: GO 31758
31250: LD_INT 10
31252: DOUBLE
31253: GREATEREQUAL
31254: IFFALSE 31262
31256: LD_INT 13
31258: DOUBLE
31259: LESSEQUAL
31260: IFTRUE 31264
31262: GO 31341
31264: POP
// begin bc_type := b_lab_full ;
31265: LD_ADDR_OWVAR 42
31269: PUSH
31270: LD_INT 8
31272: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31273: LD_ADDR_OWVAR 44
31277: PUSH
31278: LD_INT 10
31280: PUSH
31281: LD_INT 12
31283: PUSH
31284: LD_INT 14
31286: PUSH
31287: LD_INT 13
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: PUSH
31296: LD_VAR 0 2
31300: PUSH
31301: LD_INT 9
31303: MINUS
31304: ARRAY
31305: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31306: LD_ADDR_OWVAR 45
31310: PUSH
31311: LD_INT 11
31313: PUSH
31314: LD_INT 15
31316: PUSH
31317: LD_INT 12
31319: PUSH
31320: LD_INT 15
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: PUSH
31329: LD_VAR 0 2
31333: PUSH
31334: LD_INT 9
31336: MINUS
31337: ARRAY
31338: ST_TO_ADDR
// end ; 14 :
31339: GO 31758
31341: LD_INT 14
31343: DOUBLE
31344: EQUAL
31345: IFTRUE 31349
31347: GO 31360
31349: POP
// bc_type := b_workshop ; 15 :
31350: LD_ADDR_OWVAR 42
31354: PUSH
31355: LD_INT 2
31357: ST_TO_ADDR
31358: GO 31758
31360: LD_INT 15
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31379
31368: POP
// bc_type := b_factory ; 16 :
31369: LD_ADDR_OWVAR 42
31373: PUSH
31374: LD_INT 3
31376: ST_TO_ADDR
31377: GO 31758
31379: LD_INT 16
31381: DOUBLE
31382: EQUAL
31383: IFTRUE 31387
31385: GO 31398
31387: POP
// bc_type := b_ext_gun ; 17 :
31388: LD_ADDR_OWVAR 42
31392: PUSH
31393: LD_INT 17
31395: ST_TO_ADDR
31396: GO 31758
31398: LD_INT 17
31400: DOUBLE
31401: EQUAL
31402: IFTRUE 31406
31404: GO 31434
31406: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31407: LD_ADDR_OWVAR 42
31411: PUSH
31412: LD_INT 19
31414: PUSH
31415: LD_INT 23
31417: PUSH
31418: LD_INT 19
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: PUSH
31426: LD_VAR 0 1
31430: ARRAY
31431: ST_TO_ADDR
31432: GO 31758
31434: LD_INT 18
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31453
31442: POP
// bc_type := b_ext_radar ; 19 :
31443: LD_ADDR_OWVAR 42
31447: PUSH
31448: LD_INT 20
31450: ST_TO_ADDR
31451: GO 31758
31453: LD_INT 19
31455: DOUBLE
31456: EQUAL
31457: IFTRUE 31461
31459: GO 31472
31461: POP
// bc_type := b_ext_radio ; 20 :
31462: LD_ADDR_OWVAR 42
31466: PUSH
31467: LD_INT 22
31469: ST_TO_ADDR
31470: GO 31758
31472: LD_INT 20
31474: DOUBLE
31475: EQUAL
31476: IFTRUE 31480
31478: GO 31491
31480: POP
// bc_type := b_ext_siberium ; 21 :
31481: LD_ADDR_OWVAR 42
31485: PUSH
31486: LD_INT 21
31488: ST_TO_ADDR
31489: GO 31758
31491: LD_INT 21
31493: DOUBLE
31494: EQUAL
31495: IFTRUE 31499
31497: GO 31510
31499: POP
// bc_type := b_ext_computer ; 22 :
31500: LD_ADDR_OWVAR 42
31504: PUSH
31505: LD_INT 24
31507: ST_TO_ADDR
31508: GO 31758
31510: LD_INT 22
31512: DOUBLE
31513: EQUAL
31514: IFTRUE 31518
31516: GO 31529
31518: POP
// bc_type := b_ext_track ; 23 :
31519: LD_ADDR_OWVAR 42
31523: PUSH
31524: LD_INT 16
31526: ST_TO_ADDR
31527: GO 31758
31529: LD_INT 23
31531: DOUBLE
31532: EQUAL
31533: IFTRUE 31537
31535: GO 31548
31537: POP
// bc_type := b_ext_laser ; 24 :
31538: LD_ADDR_OWVAR 42
31542: PUSH
31543: LD_INT 25
31545: ST_TO_ADDR
31546: GO 31758
31548: LD_INT 24
31550: DOUBLE
31551: EQUAL
31552: IFTRUE 31556
31554: GO 31567
31556: POP
// bc_type := b_control_tower ; 25 :
31557: LD_ADDR_OWVAR 42
31561: PUSH
31562: LD_INT 36
31564: ST_TO_ADDR
31565: GO 31758
31567: LD_INT 25
31569: DOUBLE
31570: EQUAL
31571: IFTRUE 31575
31573: GO 31586
31575: POP
// bc_type := b_breastwork ; 26 :
31576: LD_ADDR_OWVAR 42
31580: PUSH
31581: LD_INT 31
31583: ST_TO_ADDR
31584: GO 31758
31586: LD_INT 26
31588: DOUBLE
31589: EQUAL
31590: IFTRUE 31594
31592: GO 31605
31594: POP
// bc_type := b_bunker ; 27 :
31595: LD_ADDR_OWVAR 42
31599: PUSH
31600: LD_INT 32
31602: ST_TO_ADDR
31603: GO 31758
31605: LD_INT 27
31607: DOUBLE
31608: EQUAL
31609: IFTRUE 31613
31611: GO 31624
31613: POP
// bc_type := b_turret ; 28 :
31614: LD_ADDR_OWVAR 42
31618: PUSH
31619: LD_INT 33
31621: ST_TO_ADDR
31622: GO 31758
31624: LD_INT 28
31626: DOUBLE
31627: EQUAL
31628: IFTRUE 31632
31630: GO 31643
31632: POP
// bc_type := b_armoury ; 29 :
31633: LD_ADDR_OWVAR 42
31637: PUSH
31638: LD_INT 4
31640: ST_TO_ADDR
31641: GO 31758
31643: LD_INT 29
31645: DOUBLE
31646: EQUAL
31647: IFTRUE 31651
31649: GO 31662
31651: POP
// bc_type := b_barracks ; 30 :
31652: LD_ADDR_OWVAR 42
31656: PUSH
31657: LD_INT 5
31659: ST_TO_ADDR
31660: GO 31758
31662: LD_INT 30
31664: DOUBLE
31665: EQUAL
31666: IFTRUE 31670
31668: GO 31681
31670: POP
// bc_type := b_solar_power ; 31 :
31671: LD_ADDR_OWVAR 42
31675: PUSH
31676: LD_INT 27
31678: ST_TO_ADDR
31679: GO 31758
31681: LD_INT 31
31683: DOUBLE
31684: EQUAL
31685: IFTRUE 31689
31687: GO 31700
31689: POP
// bc_type := b_oil_power ; 32 :
31690: LD_ADDR_OWVAR 42
31694: PUSH
31695: LD_INT 26
31697: ST_TO_ADDR
31698: GO 31758
31700: LD_INT 32
31702: DOUBLE
31703: EQUAL
31704: IFTRUE 31708
31706: GO 31719
31708: POP
// bc_type := b_siberite_power ; 33 :
31709: LD_ADDR_OWVAR 42
31713: PUSH
31714: LD_INT 28
31716: ST_TO_ADDR
31717: GO 31758
31719: LD_INT 33
31721: DOUBLE
31722: EQUAL
31723: IFTRUE 31727
31725: GO 31738
31727: POP
// bc_type := b_oil_mine ; 34 :
31728: LD_ADDR_OWVAR 42
31732: PUSH
31733: LD_INT 29
31735: ST_TO_ADDR
31736: GO 31758
31738: LD_INT 34
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31757
31746: POP
// bc_type := b_siberite_mine ; end ;
31747: LD_ADDR_OWVAR 42
31751: PUSH
31752: LD_INT 30
31754: ST_TO_ADDR
31755: GO 31758
31757: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31758: LD_ADDR_VAR 0 8
31762: PUSH
31763: LD_VAR 0 5
31767: PPUSH
31768: LD_VAR 0 6
31772: PPUSH
31773: LD_VAR 0 3
31777: PPUSH
31778: CALL_OW 47
31782: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31783: LD_OWVAR 42
31787: PUSH
31788: LD_INT 32
31790: PUSH
31791: LD_INT 33
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: IN
31798: IFFALSE 31814
// PlaceWeaponTurret ( b , weapon ) ;
31800: LD_VAR 0 8
31804: PPUSH
31805: LD_VAR 0 4
31809: PPUSH
31810: CALL_OW 431
// end ;
31814: LD_VAR 0 7
31818: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31819: LD_INT 0
31821: PPUSH
31822: PPUSH
31823: PPUSH
31824: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31825: LD_ADDR_VAR 0 4
31829: PUSH
31830: LD_INT 22
31832: PUSH
31833: LD_OWVAR 2
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: LD_INT 30
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 30
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: LIST
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PPUSH
31874: CALL_OW 69
31878: ST_TO_ADDR
// if not tmp then
31879: LD_VAR 0 4
31883: NOT
31884: IFFALSE 31888
// exit ;
31886: GO 31947
// for i in tmp do
31888: LD_ADDR_VAR 0 2
31892: PUSH
31893: LD_VAR 0 4
31897: PUSH
31898: FOR_IN
31899: IFFALSE 31945
// for j = 1 to 3 do
31901: LD_ADDR_VAR 0 3
31905: PUSH
31906: DOUBLE
31907: LD_INT 1
31909: DEC
31910: ST_TO_ADDR
31911: LD_INT 3
31913: PUSH
31914: FOR_TO
31915: IFFALSE 31941
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31917: LD_VAR 0 2
31921: PPUSH
31922: CALL_OW 274
31926: PPUSH
31927: LD_VAR 0 3
31931: PPUSH
31932: LD_INT 99999
31934: PPUSH
31935: CALL_OW 277
31939: GO 31914
31941: POP
31942: POP
31943: GO 31898
31945: POP
31946: POP
// end ;
31947: LD_VAR 0 1
31951: RET
// export function hHackSetLevel10 ; var i , j ; begin
31952: LD_INT 0
31954: PPUSH
31955: PPUSH
31956: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31957: LD_ADDR_VAR 0 2
31961: PUSH
31962: LD_INT 21
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PPUSH
31972: CALL_OW 69
31976: PUSH
31977: FOR_IN
31978: IFFALSE 32030
// if IsSelected ( i ) then
31980: LD_VAR 0 2
31984: PPUSH
31985: CALL_OW 306
31989: IFFALSE 32028
// begin for j := 1 to 4 do
31991: LD_ADDR_VAR 0 3
31995: PUSH
31996: DOUBLE
31997: LD_INT 1
31999: DEC
32000: ST_TO_ADDR
32001: LD_INT 4
32003: PUSH
32004: FOR_TO
32005: IFFALSE 32026
// SetSkill ( i , j , 10 ) ;
32007: LD_VAR 0 2
32011: PPUSH
32012: LD_VAR 0 3
32016: PPUSH
32017: LD_INT 10
32019: PPUSH
32020: CALL_OW 237
32024: GO 32004
32026: POP
32027: POP
// end ;
32028: GO 31977
32030: POP
32031: POP
// end ;
32032: LD_VAR 0 1
32036: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32037: LD_INT 0
32039: PPUSH
32040: PPUSH
32041: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32042: LD_ADDR_VAR 0 2
32046: PUSH
32047: LD_INT 22
32049: PUSH
32050: LD_OWVAR 2
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 21
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PPUSH
32073: CALL_OW 69
32077: PUSH
32078: FOR_IN
32079: IFFALSE 32120
// begin for j := 1 to 4 do
32081: LD_ADDR_VAR 0 3
32085: PUSH
32086: DOUBLE
32087: LD_INT 1
32089: DEC
32090: ST_TO_ADDR
32091: LD_INT 4
32093: PUSH
32094: FOR_TO
32095: IFFALSE 32116
// SetSkill ( i , j , 10 ) ;
32097: LD_VAR 0 2
32101: PPUSH
32102: LD_VAR 0 3
32106: PPUSH
32107: LD_INT 10
32109: PPUSH
32110: CALL_OW 237
32114: GO 32094
32116: POP
32117: POP
// end ;
32118: GO 32078
32120: POP
32121: POP
// end ;
32122: LD_VAR 0 1
32126: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32127: LD_INT 0
32129: PPUSH
// uc_side := your_side ;
32130: LD_ADDR_OWVAR 20
32134: PUSH
32135: LD_OWVAR 2
32139: ST_TO_ADDR
// uc_nation := nation ;
32140: LD_ADDR_OWVAR 21
32144: PUSH
32145: LD_VAR 0 1
32149: ST_TO_ADDR
// InitHc ;
32150: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32154: LD_INT 0
32156: PPUSH
32157: LD_VAR 0 2
32161: PPUSH
32162: LD_VAR 0 3
32166: PPUSH
32167: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32171: LD_VAR 0 4
32175: PPUSH
32176: LD_VAR 0 5
32180: PPUSH
32181: CALL_OW 428
32185: PUSH
32186: LD_INT 0
32188: EQUAL
32189: IFFALSE 32213
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32191: CALL_OW 44
32195: PPUSH
32196: LD_VAR 0 4
32200: PPUSH
32201: LD_VAR 0 5
32205: PPUSH
32206: LD_INT 1
32208: PPUSH
32209: CALL_OW 48
// end ;
32213: LD_VAR 0 6
32217: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32218: LD_INT 0
32220: PPUSH
32221: PPUSH
// uc_side := your_side ;
32222: LD_ADDR_OWVAR 20
32226: PUSH
32227: LD_OWVAR 2
32231: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32232: LD_VAR 0 1
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: LD_INT 4
32248: PUSH
32249: LD_INT 5
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: IN
32259: IFFALSE 32271
// uc_nation := nation_american else
32261: LD_ADDR_OWVAR 21
32265: PUSH
32266: LD_INT 1
32268: ST_TO_ADDR
32269: GO 32314
// if chassis in [ 11 , 12 , 13 , 14 ] then
32271: LD_VAR 0 1
32275: PUSH
32276: LD_INT 11
32278: PUSH
32279: LD_INT 12
32281: PUSH
32282: LD_INT 13
32284: PUSH
32285: LD_INT 14
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: IN
32294: IFFALSE 32306
// uc_nation := nation_arabian else
32296: LD_ADDR_OWVAR 21
32300: PUSH
32301: LD_INT 2
32303: ST_TO_ADDR
32304: GO 32314
// uc_nation := nation_russian ;
32306: LD_ADDR_OWVAR 21
32310: PUSH
32311: LD_INT 3
32313: ST_TO_ADDR
// vc_chassis := chassis ;
32314: LD_ADDR_OWVAR 37
32318: PUSH
32319: LD_VAR 0 1
32323: ST_TO_ADDR
// vc_engine := engine ;
32324: LD_ADDR_OWVAR 39
32328: PUSH
32329: LD_VAR 0 2
32333: ST_TO_ADDR
// vc_control := control ;
32334: LD_ADDR_OWVAR 38
32338: PUSH
32339: LD_VAR 0 3
32343: ST_TO_ADDR
// vc_weapon := weapon ;
32344: LD_ADDR_OWVAR 40
32348: PUSH
32349: LD_VAR 0 4
32353: ST_TO_ADDR
// un := CreateVehicle ;
32354: LD_ADDR_VAR 0 8
32358: PUSH
32359: CALL_OW 45
32363: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32364: LD_VAR 0 8
32368: PPUSH
32369: LD_INT 0
32371: PPUSH
32372: LD_INT 5
32374: PPUSH
32375: CALL_OW 12
32379: PPUSH
32380: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32384: LD_VAR 0 8
32388: PPUSH
32389: LD_VAR 0 5
32393: PPUSH
32394: LD_VAR 0 6
32398: PPUSH
32399: LD_INT 1
32401: PPUSH
32402: CALL_OW 48
// end ;
32406: LD_VAR 0 7
32410: RET
// export hInvincible ; every 1 do
32411: GO 32413
32413: DISABLE
// hInvincible := [ ] ;
32414: LD_ADDR_EXP 109
32418: PUSH
32419: EMPTY
32420: ST_TO_ADDR
32421: END
// every 10 do var i ;
32422: GO 32424
32424: DISABLE
32425: LD_INT 0
32427: PPUSH
// begin enable ;
32428: ENABLE
// if not hInvincible then
32429: LD_EXP 109
32433: NOT
32434: IFFALSE 32438
// exit ;
32436: GO 32482
// for i in hInvincible do
32438: LD_ADDR_VAR 0 1
32442: PUSH
32443: LD_EXP 109
32447: PUSH
32448: FOR_IN
32449: IFFALSE 32480
// if GetLives ( i ) < 1000 then
32451: LD_VAR 0 1
32455: PPUSH
32456: CALL_OW 256
32460: PUSH
32461: LD_INT 1000
32463: LESS
32464: IFFALSE 32478
// SetLives ( i , 1000 ) ;
32466: LD_VAR 0 1
32470: PPUSH
32471: LD_INT 1000
32473: PPUSH
32474: CALL_OW 234
32478: GO 32448
32480: POP
32481: POP
// end ;
32482: PPOPN 1
32484: END
// export function hHackInvincible ; var i ; begin
32485: LD_INT 0
32487: PPUSH
32488: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32489: LD_ADDR_VAR 0 2
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: LD_INT 21
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 21
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: LIST
32521: PPUSH
32522: CALL_OW 69
32526: PUSH
32527: FOR_IN
32528: IFFALSE 32589
// if IsSelected ( i ) then
32530: LD_VAR 0 2
32534: PPUSH
32535: CALL_OW 306
32539: IFFALSE 32587
// begin if i in hInvincible then
32541: LD_VAR 0 2
32545: PUSH
32546: LD_EXP 109
32550: IN
32551: IFFALSE 32571
// hInvincible := hInvincible diff i else
32553: LD_ADDR_EXP 109
32557: PUSH
32558: LD_EXP 109
32562: PUSH
32563: LD_VAR 0 2
32567: DIFF
32568: ST_TO_ADDR
32569: GO 32587
// hInvincible := hInvincible union i ;
32571: LD_ADDR_EXP 109
32575: PUSH
32576: LD_EXP 109
32580: PUSH
32581: LD_VAR 0 2
32585: UNION
32586: ST_TO_ADDR
// end ;
32587: GO 32527
32589: POP
32590: POP
// end ;
32591: LD_VAR 0 1
32595: RET
// export function hHackInvisible ; var i , j ; begin
32596: LD_INT 0
32598: PPUSH
32599: PPUSH
32600: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32601: LD_ADDR_VAR 0 2
32605: PUSH
32606: LD_INT 21
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PPUSH
32616: CALL_OW 69
32620: PUSH
32621: FOR_IN
32622: IFFALSE 32646
// if IsSelected ( i ) then
32624: LD_VAR 0 2
32628: PPUSH
32629: CALL_OW 306
32633: IFFALSE 32644
// ComForceInvisible ( i ) ;
32635: LD_VAR 0 2
32639: PPUSH
32640: CALL_OW 496
32644: GO 32621
32646: POP
32647: POP
// end ;
32648: LD_VAR 0 1
32652: RET
// export function hHackChangeYourSide ; begin
32653: LD_INT 0
32655: PPUSH
// if your_side = 8 then
32656: LD_OWVAR 2
32660: PUSH
32661: LD_INT 8
32663: EQUAL
32664: IFFALSE 32676
// your_side := 0 else
32666: LD_ADDR_OWVAR 2
32670: PUSH
32671: LD_INT 0
32673: ST_TO_ADDR
32674: GO 32690
// your_side := your_side + 1 ;
32676: LD_ADDR_OWVAR 2
32680: PUSH
32681: LD_OWVAR 2
32685: PUSH
32686: LD_INT 1
32688: PLUS
32689: ST_TO_ADDR
// end ;
32690: LD_VAR 0 1
32694: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32695: LD_INT 0
32697: PPUSH
32698: PPUSH
32699: PPUSH
// for i in all_units do
32700: LD_ADDR_VAR 0 2
32704: PUSH
32705: LD_OWVAR 3
32709: PUSH
32710: FOR_IN
32711: IFFALSE 32789
// if IsSelected ( i ) then
32713: LD_VAR 0 2
32717: PPUSH
32718: CALL_OW 306
32722: IFFALSE 32787
// begin j := GetSide ( i ) ;
32724: LD_ADDR_VAR 0 3
32728: PUSH
32729: LD_VAR 0 2
32733: PPUSH
32734: CALL_OW 255
32738: ST_TO_ADDR
// if j = 8 then
32739: LD_VAR 0 3
32743: PUSH
32744: LD_INT 8
32746: EQUAL
32747: IFFALSE 32759
// j := 0 else
32749: LD_ADDR_VAR 0 3
32753: PUSH
32754: LD_INT 0
32756: ST_TO_ADDR
32757: GO 32773
// j := j + 1 ;
32759: LD_ADDR_VAR 0 3
32763: PUSH
32764: LD_VAR 0 3
32768: PUSH
32769: LD_INT 1
32771: PLUS
32772: ST_TO_ADDR
// SetSide ( i , j ) ;
32773: LD_VAR 0 2
32777: PPUSH
32778: LD_VAR 0 3
32782: PPUSH
32783: CALL_OW 235
// end ;
32787: GO 32710
32789: POP
32790: POP
// end ;
32791: LD_VAR 0 1
32795: RET
// export function hHackFog ; begin
32796: LD_INT 0
32798: PPUSH
// FogOff ( true ) ;
32799: LD_INT 1
32801: PPUSH
32802: CALL_OW 344
// end ;
32806: LD_VAR 0 1
32810: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32811: LD_INT 0
32813: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32814: LD_VAR 0 1
32818: PPUSH
32819: LD_VAR 0 2
32823: PPUSH
32824: LD_VAR 0 3
32828: PPUSH
32829: LD_INT 1
32831: PPUSH
32832: LD_INT 1
32834: PPUSH
32835: CALL_OW 483
// CenterOnXY ( x , y ) ;
32839: LD_VAR 0 2
32843: PPUSH
32844: LD_VAR 0 3
32848: PPUSH
32849: CALL_OW 84
// end ; end_of_file
32853: LD_VAR 0 4
32857: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32858: LD_INT 0
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32864: LD_VAR 0 1
32868: PPUSH
32869: CALL_OW 264
32873: PUSH
32874: LD_EXP 36
32878: EQUAL
32879: IFFALSE 32951
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32881: LD_INT 68
32883: PPUSH
32884: LD_VAR 0 1
32888: PPUSH
32889: CALL_OW 255
32893: PPUSH
32894: CALL_OW 321
32898: PUSH
32899: LD_INT 2
32901: EQUAL
32902: IFFALSE 32914
// eff := 70 else
32904: LD_ADDR_VAR 0 4
32908: PUSH
32909: LD_INT 70
32911: ST_TO_ADDR
32912: GO 32922
// eff := 30 ;
32914: LD_ADDR_VAR 0 4
32918: PUSH
32919: LD_INT 30
32921: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32922: LD_VAR 0 1
32926: PPUSH
32927: CALL_OW 250
32931: PPUSH
32932: LD_VAR 0 1
32936: PPUSH
32937: CALL_OW 251
32941: PPUSH
32942: LD_VAR 0 4
32946: PPUSH
32947: CALL_OW 495
// end ; end ;
32951: LD_VAR 0 2
32955: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32956: LD_INT 0
32958: PPUSH
// end ;
32959: LD_VAR 0 4
32963: RET
// export function SOS_Command ( cmd ) ; begin
32964: LD_INT 0
32966: PPUSH
// end ;
32967: LD_VAR 0 2
32971: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32972: LD_INT 0
32974: PPUSH
// end ;
32975: LD_VAR 0 6
32979: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32980: LD_INT 0
32982: PPUSH
32983: PPUSH
// if not vehicle or not factory then
32984: LD_VAR 0 1
32988: NOT
32989: PUSH
32990: LD_VAR 0 2
32994: NOT
32995: OR
32996: IFFALSE 33000
// exit ;
32998: GO 33231
// if factoryWaypoints >= factory then
33000: LD_EXP 110
33004: PUSH
33005: LD_VAR 0 2
33009: GREATEREQUAL
33010: IFFALSE 33231
// if factoryWaypoints [ factory ] then
33012: LD_EXP 110
33016: PUSH
33017: LD_VAR 0 2
33021: ARRAY
33022: IFFALSE 33231
// begin if GetControl ( vehicle ) = control_manual then
33024: LD_VAR 0 1
33028: PPUSH
33029: CALL_OW 263
33033: PUSH
33034: LD_INT 1
33036: EQUAL
33037: IFFALSE 33118
// begin driver := IsDrivenBy ( vehicle ) ;
33039: LD_ADDR_VAR 0 4
33043: PUSH
33044: LD_VAR 0 1
33048: PPUSH
33049: CALL_OW 311
33053: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33054: LD_VAR 0 4
33058: PPUSH
33059: LD_EXP 110
33063: PUSH
33064: LD_VAR 0 2
33068: ARRAY
33069: PUSH
33070: LD_INT 3
33072: ARRAY
33073: PPUSH
33074: LD_EXP 110
33078: PUSH
33079: LD_VAR 0 2
33083: ARRAY
33084: PUSH
33085: LD_INT 4
33087: ARRAY
33088: PPUSH
33089: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33093: LD_VAR 0 4
33097: PPUSH
33098: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33102: LD_VAR 0 4
33106: PPUSH
33107: LD_VAR 0 2
33111: PPUSH
33112: CALL_OW 180
// end else
33116: GO 33231
// if GetControl ( vehicle ) = control_remote then
33118: LD_VAR 0 1
33122: PPUSH
33123: CALL_OW 263
33127: PUSH
33128: LD_INT 2
33130: EQUAL
33131: IFFALSE 33192
// begin wait ( 0 0$2 ) ;
33133: LD_INT 70
33135: PPUSH
33136: CALL_OW 67
// if Connect ( vehicle ) then
33140: LD_VAR 0 1
33144: PPUSH
33145: CALL 45455 0 1
33149: IFFALSE 33190
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33151: LD_VAR 0 1
33155: PPUSH
33156: LD_EXP 110
33160: PUSH
33161: LD_VAR 0 2
33165: ARRAY
33166: PUSH
33167: LD_INT 3
33169: ARRAY
33170: PPUSH
33171: LD_EXP 110
33175: PUSH
33176: LD_VAR 0 2
33180: ARRAY
33181: PUSH
33182: LD_INT 4
33184: ARRAY
33185: PPUSH
33186: CALL_OW 171
// end else
33190: GO 33231
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33192: LD_VAR 0 1
33196: PPUSH
33197: LD_EXP 110
33201: PUSH
33202: LD_VAR 0 2
33206: ARRAY
33207: PUSH
33208: LD_INT 3
33210: ARRAY
33211: PPUSH
33212: LD_EXP 110
33216: PUSH
33217: LD_VAR 0 2
33221: ARRAY
33222: PUSH
33223: LD_INT 4
33225: ARRAY
33226: PPUSH
33227: CALL_OW 171
// end ; end ;
33231: LD_VAR 0 3
33235: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33236: LD_INT 0
33238: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33239: LD_VAR 0 1
33243: PUSH
33244: LD_INT 250
33246: EQUAL
33247: PUSH
33248: LD_VAR 0 2
33252: PPUSH
33253: CALL_OW 264
33257: PUSH
33258: LD_EXP 39
33262: EQUAL
33263: AND
33264: IFFALSE 33285
// MinerPlaceMine ( unit , x , y ) ;
33266: LD_VAR 0 2
33270: PPUSH
33271: LD_VAR 0 4
33275: PPUSH
33276: LD_VAR 0 5
33280: PPUSH
33281: CALL 36013 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33285: LD_VAR 0 1
33289: PUSH
33290: LD_INT 251
33292: EQUAL
33293: PUSH
33294: LD_VAR 0 2
33298: PPUSH
33299: CALL_OW 264
33303: PUSH
33304: LD_EXP 39
33308: EQUAL
33309: AND
33310: IFFALSE 33331
// MinerDetonateMine ( unit , x , y ) ;
33312: LD_VAR 0 2
33316: PPUSH
33317: LD_VAR 0 4
33321: PPUSH
33322: LD_VAR 0 5
33326: PPUSH
33327: CALL 36290 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33331: LD_VAR 0 1
33335: PUSH
33336: LD_INT 252
33338: EQUAL
33339: PUSH
33340: LD_VAR 0 2
33344: PPUSH
33345: CALL_OW 264
33349: PUSH
33350: LD_EXP 39
33354: EQUAL
33355: AND
33356: IFFALSE 33377
// MinerCreateMinefield ( unit , x , y ) ;
33358: LD_VAR 0 2
33362: PPUSH
33363: LD_VAR 0 4
33367: PPUSH
33368: LD_VAR 0 5
33372: PPUSH
33373: CALL 36707 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33377: LD_VAR 0 1
33381: PUSH
33382: LD_INT 253
33384: EQUAL
33385: PUSH
33386: LD_VAR 0 2
33390: PPUSH
33391: CALL_OW 257
33395: PUSH
33396: LD_INT 5
33398: EQUAL
33399: AND
33400: IFFALSE 33421
// ComBinocular ( unit , x , y ) ;
33402: LD_VAR 0 2
33406: PPUSH
33407: LD_VAR 0 4
33411: PPUSH
33412: LD_VAR 0 5
33416: PPUSH
33417: CALL 37078 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33421: LD_VAR 0 1
33425: PUSH
33426: LD_INT 254
33428: EQUAL
33429: PUSH
33430: LD_VAR 0 2
33434: PPUSH
33435: CALL_OW 264
33439: PUSH
33440: LD_EXP 34
33444: EQUAL
33445: AND
33446: PUSH
33447: LD_VAR 0 3
33451: PPUSH
33452: CALL_OW 263
33456: PUSH
33457: LD_INT 3
33459: EQUAL
33460: AND
33461: IFFALSE 33477
// HackDestroyVehicle ( unit , selectedUnit ) ;
33463: LD_VAR 0 2
33467: PPUSH
33468: LD_VAR 0 3
33472: PPUSH
33473: CALL 35373 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33477: LD_VAR 0 1
33481: PUSH
33482: LD_INT 255
33484: EQUAL
33485: PUSH
33486: LD_VAR 0 2
33490: PPUSH
33491: CALL_OW 264
33495: PUSH
33496: LD_INT 14
33498: PUSH
33499: LD_INT 53
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: IN
33506: AND
33507: PUSH
33508: LD_VAR 0 4
33512: PPUSH
33513: LD_VAR 0 5
33517: PPUSH
33518: CALL_OW 488
33522: AND
33523: IFFALSE 33547
// CutTreeXYR ( unit , x , y , 12 ) ;
33525: LD_VAR 0 2
33529: PPUSH
33530: LD_VAR 0 4
33534: PPUSH
33535: LD_VAR 0 5
33539: PPUSH
33540: LD_INT 12
33542: PPUSH
33543: CALL 33939 0 4
// if cmd = 256 then
33547: LD_VAR 0 1
33551: PUSH
33552: LD_INT 256
33554: EQUAL
33555: IFFALSE 33576
// SetFactoryWaypoint ( unit , x , y ) ;
33557: LD_VAR 0 2
33561: PPUSH
33562: LD_VAR 0 4
33566: PPUSH
33567: LD_VAR 0 5
33571: PPUSH
33572: CALL 33581 0 3
// end ;
33576: LD_VAR 0 6
33580: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33581: LD_INT 0
33583: PPUSH
33584: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33585: LD_VAR 0 1
33589: NOT
33590: PUSH
33591: LD_VAR 0 2
33595: PPUSH
33596: LD_VAR 0 3
33600: PPUSH
33601: CALL_OW 488
33605: NOT
33606: OR
33607: PUSH
33608: LD_VAR 0 1
33612: PPUSH
33613: CALL_OW 266
33617: PUSH
33618: LD_INT 3
33620: NONEQUAL
33621: PUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL_OW 247
33631: PUSH
33632: LD_INT 1
33634: EQUAL
33635: NOT
33636: AND
33637: OR
33638: IFFALSE 33642
// exit ;
33640: GO 33791
// if GetType ( factory ) = unit_human then
33642: LD_VAR 0 1
33646: PPUSH
33647: CALL_OW 247
33651: PUSH
33652: LD_INT 1
33654: EQUAL
33655: IFFALSE 33672
// factory := IsInUnit ( factory ) ;
33657: LD_ADDR_VAR 0 1
33661: PUSH
33662: LD_VAR 0 1
33666: PPUSH
33667: CALL_OW 310
33671: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33672: LD_VAR 0 1
33676: PPUSH
33677: CALL_OW 266
33681: PUSH
33682: LD_INT 3
33684: NONEQUAL
33685: IFFALSE 33689
// exit ;
33687: GO 33791
// if HexInfo ( x , y ) = factory then
33689: LD_VAR 0 2
33693: PPUSH
33694: LD_VAR 0 3
33698: PPUSH
33699: CALL_OW 428
33703: PUSH
33704: LD_VAR 0 1
33708: EQUAL
33709: IFFALSE 33736
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33711: LD_ADDR_EXP 110
33715: PUSH
33716: LD_EXP 110
33720: PPUSH
33721: LD_VAR 0 1
33725: PPUSH
33726: LD_INT 0
33728: PPUSH
33729: CALL_OW 1
33733: ST_TO_ADDR
33734: GO 33787
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33736: LD_ADDR_EXP 110
33740: PUSH
33741: LD_EXP 110
33745: PPUSH
33746: LD_VAR 0 1
33750: PPUSH
33751: LD_VAR 0 1
33755: PPUSH
33756: CALL_OW 255
33760: PUSH
33761: LD_VAR 0 1
33765: PUSH
33766: LD_VAR 0 2
33770: PUSH
33771: LD_VAR 0 3
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: PPUSH
33782: CALL_OW 1
33786: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33787: CALL 33796 0 0
// end ;
33791: LD_VAR 0 4
33795: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
33796: LD_INT 0
33798: PPUSH
33799: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33800: LD_STRING resetFactoryWaypoint();
33802: PPUSH
33803: CALL_OW 559
// if factoryWaypoints then
33807: LD_EXP 110
33811: IFFALSE 33934
// begin for i := 1 to factoryWaypoints do
33813: LD_ADDR_VAR 0 2
33817: PUSH
33818: DOUBLE
33819: LD_INT 1
33821: DEC
33822: ST_TO_ADDR
33823: LD_EXP 110
33827: PUSH
33828: FOR_TO
33829: IFFALSE 33932
// if factoryWaypoints [ i ] then
33831: LD_EXP 110
33835: PUSH
33836: LD_VAR 0 2
33840: ARRAY
33841: IFFALSE 33930
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
33843: LD_STRING setFactoryWaypointXY(
33845: PUSH
33846: LD_EXP 110
33850: PUSH
33851: LD_VAR 0 2
33855: ARRAY
33856: PUSH
33857: LD_INT 1
33859: ARRAY
33860: STR
33861: PUSH
33862: LD_STRING ,
33864: STR
33865: PUSH
33866: LD_EXP 110
33870: PUSH
33871: LD_VAR 0 2
33875: ARRAY
33876: PUSH
33877: LD_INT 2
33879: ARRAY
33880: STR
33881: PUSH
33882: LD_STRING ,
33884: STR
33885: PUSH
33886: LD_EXP 110
33890: PUSH
33891: LD_VAR 0 2
33895: ARRAY
33896: PUSH
33897: LD_INT 3
33899: ARRAY
33900: STR
33901: PUSH
33902: LD_STRING ,
33904: STR
33905: PUSH
33906: LD_EXP 110
33910: PUSH
33911: LD_VAR 0 2
33915: ARRAY
33916: PUSH
33917: LD_INT 4
33919: ARRAY
33920: STR
33921: PUSH
33922: LD_STRING )
33924: STR
33925: PPUSH
33926: CALL_OW 559
33930: GO 33828
33932: POP
33933: POP
// end ; end ;
33934: LD_VAR 0 1
33938: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33939: LD_INT 0
33941: PPUSH
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
33946: PPUSH
33947: PPUSH
33948: PPUSH
33949: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33950: LD_VAR 0 1
33954: NOT
33955: PUSH
33956: LD_VAR 0 2
33960: PPUSH
33961: LD_VAR 0 3
33965: PPUSH
33966: CALL_OW 488
33970: NOT
33971: OR
33972: PUSH
33973: LD_VAR 0 4
33977: NOT
33978: OR
33979: IFFALSE 33983
// exit ;
33981: GO 34323
// list := [ ] ;
33983: LD_ADDR_VAR 0 13
33987: PUSH
33988: EMPTY
33989: ST_TO_ADDR
// if x - r < 0 then
33990: LD_VAR 0 2
33994: PUSH
33995: LD_VAR 0 4
33999: MINUS
34000: PUSH
34001: LD_INT 0
34003: LESS
34004: IFFALSE 34016
// min_x := 0 else
34006: LD_ADDR_VAR 0 7
34010: PUSH
34011: LD_INT 0
34013: ST_TO_ADDR
34014: GO 34032
// min_x := x - r ;
34016: LD_ADDR_VAR 0 7
34020: PUSH
34021: LD_VAR 0 2
34025: PUSH
34026: LD_VAR 0 4
34030: MINUS
34031: ST_TO_ADDR
// if y - r < 0 then
34032: LD_VAR 0 3
34036: PUSH
34037: LD_VAR 0 4
34041: MINUS
34042: PUSH
34043: LD_INT 0
34045: LESS
34046: IFFALSE 34058
// min_y := 0 else
34048: LD_ADDR_VAR 0 8
34052: PUSH
34053: LD_INT 0
34055: ST_TO_ADDR
34056: GO 34074
// min_y := y - r ;
34058: LD_ADDR_VAR 0 8
34062: PUSH
34063: LD_VAR 0 3
34067: PUSH
34068: LD_VAR 0 4
34072: MINUS
34073: ST_TO_ADDR
// max_x := x + r ;
34074: LD_ADDR_VAR 0 9
34078: PUSH
34079: LD_VAR 0 2
34083: PUSH
34084: LD_VAR 0 4
34088: PLUS
34089: ST_TO_ADDR
// max_y := y + r ;
34090: LD_ADDR_VAR 0 10
34094: PUSH
34095: LD_VAR 0 3
34099: PUSH
34100: LD_VAR 0 4
34104: PLUS
34105: ST_TO_ADDR
// for _x = min_x to max_x do
34106: LD_ADDR_VAR 0 11
34110: PUSH
34111: DOUBLE
34112: LD_VAR 0 7
34116: DEC
34117: ST_TO_ADDR
34118: LD_VAR 0 9
34122: PUSH
34123: FOR_TO
34124: IFFALSE 34241
// for _y = min_y to max_y do
34126: LD_ADDR_VAR 0 12
34130: PUSH
34131: DOUBLE
34132: LD_VAR 0 8
34136: DEC
34137: ST_TO_ADDR
34138: LD_VAR 0 10
34142: PUSH
34143: FOR_TO
34144: IFFALSE 34237
// begin if not ValidHex ( _x , _y ) then
34146: LD_VAR 0 11
34150: PPUSH
34151: LD_VAR 0 12
34155: PPUSH
34156: CALL_OW 488
34160: NOT
34161: IFFALSE 34165
// continue ;
34163: GO 34143
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34165: LD_VAR 0 11
34169: PPUSH
34170: LD_VAR 0 12
34174: PPUSH
34175: CALL_OW 351
34179: PUSH
34180: LD_VAR 0 11
34184: PPUSH
34185: LD_VAR 0 12
34189: PPUSH
34190: CALL_OW 554
34194: AND
34195: IFFALSE 34235
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34197: LD_ADDR_VAR 0 13
34201: PUSH
34202: LD_VAR 0 13
34206: PPUSH
34207: LD_VAR 0 13
34211: PUSH
34212: LD_INT 1
34214: PLUS
34215: PPUSH
34216: LD_VAR 0 11
34220: PUSH
34221: LD_VAR 0 12
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PPUSH
34230: CALL_OW 2
34234: ST_TO_ADDR
// end ;
34235: GO 34143
34237: POP
34238: POP
34239: GO 34123
34241: POP
34242: POP
// if not list then
34243: LD_VAR 0 13
34247: NOT
34248: IFFALSE 34252
// exit ;
34250: GO 34323
// for i in list do
34252: LD_ADDR_VAR 0 6
34256: PUSH
34257: LD_VAR 0 13
34261: PUSH
34262: FOR_IN
34263: IFFALSE 34321
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34265: LD_VAR 0 1
34269: PPUSH
34270: LD_STRING M
34272: PUSH
34273: LD_VAR 0 6
34277: PUSH
34278: LD_INT 1
34280: ARRAY
34281: PUSH
34282: LD_VAR 0 6
34286: PUSH
34287: LD_INT 2
34289: ARRAY
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: PUSH
34312: EMPTY
34313: LIST
34314: PPUSH
34315: CALL_OW 447
34319: GO 34262
34321: POP
34322: POP
// end ;
34323: LD_VAR 0 5
34327: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34328: LD_EXP 111
34332: NOT
34333: IFFALSE 34383
34335: GO 34337
34337: DISABLE
// begin initHack := true ;
34338: LD_ADDR_EXP 111
34342: PUSH
34343: LD_INT 1
34345: ST_TO_ADDR
// hackTanks := [ ] ;
34346: LD_ADDR_EXP 112
34350: PUSH
34351: EMPTY
34352: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34353: LD_ADDR_EXP 113
34357: PUSH
34358: EMPTY
34359: ST_TO_ADDR
// hackLimit := 3 ;
34360: LD_ADDR_EXP 114
34364: PUSH
34365: LD_INT 3
34367: ST_TO_ADDR
// hackDist := 12 ;
34368: LD_ADDR_EXP 115
34372: PUSH
34373: LD_INT 12
34375: ST_TO_ADDR
// hackCounter := [ ] ;
34376: LD_ADDR_EXP 116
34380: PUSH
34381: EMPTY
34382: ST_TO_ADDR
// end ;
34383: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34384: LD_EXP 111
34388: PUSH
34389: LD_INT 34
34391: PUSH
34392: LD_EXP 34
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PPUSH
34401: CALL_OW 69
34405: AND
34406: IFFALSE 34661
34408: GO 34410
34410: DISABLE
34411: LD_INT 0
34413: PPUSH
34414: PPUSH
// begin enable ;
34415: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34416: LD_ADDR_VAR 0 1
34420: PUSH
34421: LD_INT 34
34423: PUSH
34424: LD_EXP 34
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PPUSH
34433: CALL_OW 69
34437: PUSH
34438: FOR_IN
34439: IFFALSE 34659
// begin if not i in hackTanks then
34441: LD_VAR 0 1
34445: PUSH
34446: LD_EXP 112
34450: IN
34451: NOT
34452: IFFALSE 34535
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34454: LD_ADDR_EXP 112
34458: PUSH
34459: LD_EXP 112
34463: PPUSH
34464: LD_EXP 112
34468: PUSH
34469: LD_INT 1
34471: PLUS
34472: PPUSH
34473: LD_VAR 0 1
34477: PPUSH
34478: CALL_OW 1
34482: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34483: LD_ADDR_EXP 113
34487: PUSH
34488: LD_EXP 113
34492: PPUSH
34493: LD_EXP 113
34497: PUSH
34498: LD_INT 1
34500: PLUS
34501: PPUSH
34502: EMPTY
34503: PPUSH
34504: CALL_OW 1
34508: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34509: LD_ADDR_EXP 116
34513: PUSH
34514: LD_EXP 116
34518: PPUSH
34519: LD_EXP 116
34523: PUSH
34524: LD_INT 1
34526: PLUS
34527: PPUSH
34528: EMPTY
34529: PPUSH
34530: CALL_OW 1
34534: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34535: LD_VAR 0 1
34539: PPUSH
34540: CALL_OW 302
34544: NOT
34545: IFFALSE 34558
// begin HackUnlinkAll ( i ) ;
34547: LD_VAR 0 1
34551: PPUSH
34552: CALL 34664 0 1
// continue ;
34556: GO 34438
// end ; HackCheckCapturedStatus ( i ) ;
34558: LD_VAR 0 1
34562: PPUSH
34563: CALL 35107 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34567: LD_ADDR_VAR 0 2
34571: PUSH
34572: LD_INT 81
34574: PUSH
34575: LD_VAR 0 1
34579: PPUSH
34580: CALL_OW 255
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 33
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 91
34601: PUSH
34602: LD_VAR 0 1
34606: PUSH
34607: LD_EXP 115
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 50
34619: PUSH
34620: EMPTY
34621: LIST
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: PPUSH
34629: CALL_OW 69
34633: ST_TO_ADDR
// if not tmp then
34634: LD_VAR 0 2
34638: NOT
34639: IFFALSE 34643
// continue ;
34641: GO 34438
// HackLink ( i , tmp ) ;
34643: LD_VAR 0 1
34647: PPUSH
34648: LD_VAR 0 2
34652: PPUSH
34653: CALL 34800 0 2
// end ;
34657: GO 34438
34659: POP
34660: POP
// end ;
34661: PPOPN 2
34663: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34664: LD_INT 0
34666: PPUSH
34667: PPUSH
34668: PPUSH
// if not hack in hackTanks then
34669: LD_VAR 0 1
34673: PUSH
34674: LD_EXP 112
34678: IN
34679: NOT
34680: IFFALSE 34684
// exit ;
34682: GO 34795
// index := GetElementIndex ( hackTanks , hack ) ;
34684: LD_ADDR_VAR 0 4
34688: PUSH
34689: LD_EXP 112
34693: PPUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: CALL 42269 0 2
34703: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34704: LD_EXP 113
34708: PUSH
34709: LD_VAR 0 4
34713: ARRAY
34714: IFFALSE 34795
// begin for i in hackTanksCaptured [ index ] do
34716: LD_ADDR_VAR 0 3
34720: PUSH
34721: LD_EXP 113
34725: PUSH
34726: LD_VAR 0 4
34730: ARRAY
34731: PUSH
34732: FOR_IN
34733: IFFALSE 34759
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34735: LD_VAR 0 3
34739: PUSH
34740: LD_INT 1
34742: ARRAY
34743: PPUSH
34744: LD_VAR 0 3
34748: PUSH
34749: LD_INT 2
34751: ARRAY
34752: PPUSH
34753: CALL_OW 235
34757: GO 34732
34759: POP
34760: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34761: LD_ADDR_EXP 113
34765: PUSH
34766: LD_EXP 113
34770: PPUSH
34771: LD_VAR 0 4
34775: PPUSH
34776: EMPTY
34777: PPUSH
34778: CALL_OW 1
34782: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34783: LD_VAR 0 1
34787: PPUSH
34788: LD_INT 0
34790: PPUSH
34791: CALL_OW 505
// end ; end ;
34795: LD_VAR 0 2
34799: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34800: LD_INT 0
34802: PPUSH
34803: PPUSH
34804: PPUSH
// if not hack in hackTanks or not vehicles then
34805: LD_VAR 0 1
34809: PUSH
34810: LD_EXP 112
34814: IN
34815: NOT
34816: PUSH
34817: LD_VAR 0 2
34821: NOT
34822: OR
34823: IFFALSE 34827
// exit ;
34825: GO 35102
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34827: LD_ADDR_VAR 0 2
34831: PUSH
34832: LD_VAR 0 1
34836: PPUSH
34837: LD_VAR 0 2
34841: PPUSH
34842: LD_INT 1
34844: PPUSH
34845: LD_INT 1
34847: PPUSH
34848: CALL 42919 0 4
34852: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34853: LD_ADDR_VAR 0 5
34857: PUSH
34858: LD_EXP 112
34862: PPUSH
34863: LD_VAR 0 1
34867: PPUSH
34868: CALL 42269 0 2
34872: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34873: LD_EXP 113
34877: PUSH
34878: LD_VAR 0 5
34882: ARRAY
34883: PUSH
34884: LD_EXP 114
34888: LESS
34889: IFFALSE 35078
// begin for i := 1 to vehicles do
34891: LD_ADDR_VAR 0 4
34895: PUSH
34896: DOUBLE
34897: LD_INT 1
34899: DEC
34900: ST_TO_ADDR
34901: LD_VAR 0 2
34905: PUSH
34906: FOR_TO
34907: IFFALSE 35076
// begin if hackTanksCaptured [ index ] = hackLimit then
34909: LD_EXP 113
34913: PUSH
34914: LD_VAR 0 5
34918: ARRAY
34919: PUSH
34920: LD_EXP 114
34924: EQUAL
34925: IFFALSE 34929
// break ;
34927: GO 35076
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34929: LD_ADDR_EXP 116
34933: PUSH
34934: LD_EXP 116
34938: PPUSH
34939: LD_VAR 0 5
34943: PPUSH
34944: LD_EXP 116
34948: PUSH
34949: LD_VAR 0 5
34953: ARRAY
34954: PUSH
34955: LD_INT 1
34957: PLUS
34958: PPUSH
34959: CALL_OW 1
34963: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34964: LD_ADDR_EXP 113
34968: PUSH
34969: LD_EXP 113
34973: PPUSH
34974: LD_VAR 0 5
34978: PUSH
34979: LD_EXP 113
34983: PUSH
34984: LD_VAR 0 5
34988: ARRAY
34989: PUSH
34990: LD_INT 1
34992: PLUS
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PPUSH
34998: LD_VAR 0 2
35002: PUSH
35003: LD_VAR 0 4
35007: ARRAY
35008: PUSH
35009: LD_VAR 0 2
35013: PUSH
35014: LD_VAR 0 4
35018: ARRAY
35019: PPUSH
35020: CALL_OW 255
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PPUSH
35029: CALL 42484 0 3
35033: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35034: LD_VAR 0 2
35038: PUSH
35039: LD_VAR 0 4
35043: ARRAY
35044: PPUSH
35045: LD_VAR 0 1
35049: PPUSH
35050: CALL_OW 255
35054: PPUSH
35055: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35059: LD_VAR 0 2
35063: PUSH
35064: LD_VAR 0 4
35068: ARRAY
35069: PPUSH
35070: CALL_OW 141
// end ;
35074: GO 34906
35076: POP
35077: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35078: LD_VAR 0 1
35082: PPUSH
35083: LD_EXP 113
35087: PUSH
35088: LD_VAR 0 5
35092: ARRAY
35093: PUSH
35094: LD_INT 0
35096: PLUS
35097: PPUSH
35098: CALL_OW 505
// end ;
35102: LD_VAR 0 3
35106: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35107: LD_INT 0
35109: PPUSH
35110: PPUSH
35111: PPUSH
35112: PPUSH
// if not hack in hackTanks then
35113: LD_VAR 0 1
35117: PUSH
35118: LD_EXP 112
35122: IN
35123: NOT
35124: IFFALSE 35128
// exit ;
35126: GO 35368
// index := GetElementIndex ( hackTanks , hack ) ;
35128: LD_ADDR_VAR 0 4
35132: PUSH
35133: LD_EXP 112
35137: PPUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: CALL 42269 0 2
35147: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: DOUBLE
35154: LD_EXP 113
35158: PUSH
35159: LD_VAR 0 4
35163: ARRAY
35164: INC
35165: ST_TO_ADDR
35166: LD_INT 1
35168: PUSH
35169: FOR_DOWNTO
35170: IFFALSE 35342
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35172: LD_ADDR_VAR 0 5
35176: PUSH
35177: LD_EXP 113
35181: PUSH
35182: LD_VAR 0 4
35186: ARRAY
35187: PUSH
35188: LD_VAR 0 3
35192: ARRAY
35193: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35194: LD_VAR 0 5
35198: PUSH
35199: LD_INT 1
35201: ARRAY
35202: PPUSH
35203: CALL_OW 302
35207: NOT
35208: PUSH
35209: LD_VAR 0 5
35213: PUSH
35214: LD_INT 1
35216: ARRAY
35217: PPUSH
35218: CALL_OW 255
35222: PUSH
35223: LD_VAR 0 1
35227: PPUSH
35228: CALL_OW 255
35232: NONEQUAL
35233: OR
35234: IFFALSE 35340
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35236: LD_VAR 0 5
35240: PUSH
35241: LD_INT 1
35243: ARRAY
35244: PPUSH
35245: CALL_OW 305
35249: PUSH
35250: LD_VAR 0 5
35254: PUSH
35255: LD_INT 1
35257: ARRAY
35258: PPUSH
35259: CALL_OW 255
35263: PUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: CALL_OW 255
35273: EQUAL
35274: AND
35275: IFFALSE 35299
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35277: LD_VAR 0 5
35281: PUSH
35282: LD_INT 1
35284: ARRAY
35285: PPUSH
35286: LD_VAR 0 5
35290: PUSH
35291: LD_INT 2
35293: ARRAY
35294: PPUSH
35295: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35299: LD_ADDR_EXP 113
35303: PUSH
35304: LD_EXP 113
35308: PPUSH
35309: LD_VAR 0 4
35313: PPUSH
35314: LD_EXP 113
35318: PUSH
35319: LD_VAR 0 4
35323: ARRAY
35324: PPUSH
35325: LD_VAR 0 3
35329: PPUSH
35330: CALL_OW 3
35334: PPUSH
35335: CALL_OW 1
35339: ST_TO_ADDR
// end ; end ;
35340: GO 35169
35342: POP
35343: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35344: LD_VAR 0 1
35348: PPUSH
35349: LD_EXP 113
35353: PUSH
35354: LD_VAR 0 4
35358: ARRAY
35359: PUSH
35360: LD_INT 0
35362: PLUS
35363: PPUSH
35364: CALL_OW 505
// end ;
35368: LD_VAR 0 2
35372: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35373: LD_INT 0
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
// if not hack in hackTanks then
35379: LD_VAR 0 1
35383: PUSH
35384: LD_EXP 112
35388: IN
35389: NOT
35390: IFFALSE 35394
// exit ;
35392: GO 35479
// index := GetElementIndex ( hackTanks , hack ) ;
35394: LD_ADDR_VAR 0 5
35398: PUSH
35399: LD_EXP 112
35403: PPUSH
35404: LD_VAR 0 1
35408: PPUSH
35409: CALL 42269 0 2
35413: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35414: LD_ADDR_VAR 0 4
35418: PUSH
35419: DOUBLE
35420: LD_INT 1
35422: DEC
35423: ST_TO_ADDR
35424: LD_EXP 113
35428: PUSH
35429: LD_VAR 0 5
35433: ARRAY
35434: PUSH
35435: FOR_TO
35436: IFFALSE 35477
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35438: LD_EXP 113
35442: PUSH
35443: LD_VAR 0 5
35447: ARRAY
35448: PUSH
35449: LD_VAR 0 4
35453: ARRAY
35454: PUSH
35455: LD_INT 1
35457: ARRAY
35458: PUSH
35459: LD_VAR 0 2
35463: EQUAL
35464: IFFALSE 35475
// KillUnit ( vehicle ) ;
35466: LD_VAR 0 2
35470: PPUSH
35471: CALL_OW 66
35475: GO 35435
35477: POP
35478: POP
// end ;
35479: LD_VAR 0 3
35483: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35484: LD_EXP 117
35488: NOT
35489: IFFALSE 35524
35491: GO 35493
35493: DISABLE
// begin initMiner := true ;
35494: LD_ADDR_EXP 117
35498: PUSH
35499: LD_INT 1
35501: ST_TO_ADDR
// minersList := [ ] ;
35502: LD_ADDR_EXP 118
35506: PUSH
35507: EMPTY
35508: ST_TO_ADDR
// minerMinesList := [ ] ;
35509: LD_ADDR_EXP 119
35513: PUSH
35514: EMPTY
35515: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35516: LD_ADDR_EXP 120
35520: PUSH
35521: LD_INT 5
35523: ST_TO_ADDR
// end ;
35524: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35525: LD_EXP 117
35529: PUSH
35530: LD_INT 34
35532: PUSH
35533: LD_EXP 39
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PPUSH
35542: CALL_OW 69
35546: AND
35547: IFFALSE 36010
35549: GO 35551
35551: DISABLE
35552: LD_INT 0
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
// begin enable ;
35558: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35559: LD_ADDR_VAR 0 1
35563: PUSH
35564: LD_INT 34
35566: PUSH
35567: LD_EXP 39
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PPUSH
35576: CALL_OW 69
35580: PUSH
35581: FOR_IN
35582: IFFALSE 35654
// begin if not i in minersList then
35584: LD_VAR 0 1
35588: PUSH
35589: LD_EXP 118
35593: IN
35594: NOT
35595: IFFALSE 35652
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35597: LD_ADDR_EXP 118
35601: PUSH
35602: LD_EXP 118
35606: PPUSH
35607: LD_EXP 118
35611: PUSH
35612: LD_INT 1
35614: PLUS
35615: PPUSH
35616: LD_VAR 0 1
35620: PPUSH
35621: CALL_OW 1
35625: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35626: LD_ADDR_EXP 119
35630: PUSH
35631: LD_EXP 119
35635: PPUSH
35636: LD_EXP 119
35640: PUSH
35641: LD_INT 1
35643: PLUS
35644: PPUSH
35645: EMPTY
35646: PPUSH
35647: CALL_OW 1
35651: ST_TO_ADDR
// end end ;
35652: GO 35581
35654: POP
35655: POP
// for i := minerMinesList downto 1 do
35656: LD_ADDR_VAR 0 1
35660: PUSH
35661: DOUBLE
35662: LD_EXP 119
35666: INC
35667: ST_TO_ADDR
35668: LD_INT 1
35670: PUSH
35671: FOR_DOWNTO
35672: IFFALSE 36008
// begin if IsLive ( minersList [ i ] ) then
35674: LD_EXP 118
35678: PUSH
35679: LD_VAR 0 1
35683: ARRAY
35684: PPUSH
35685: CALL_OW 300
35689: IFFALSE 35717
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35691: LD_EXP 118
35695: PUSH
35696: LD_VAR 0 1
35700: ARRAY
35701: PPUSH
35702: LD_EXP 119
35706: PUSH
35707: LD_VAR 0 1
35711: ARRAY
35712: PPUSH
35713: CALL_OW 505
// if not minerMinesList [ i ] then
35717: LD_EXP 119
35721: PUSH
35722: LD_VAR 0 1
35726: ARRAY
35727: NOT
35728: IFFALSE 35732
// continue ;
35730: GO 35671
// for j := minerMinesList [ i ] downto 1 do
35732: LD_ADDR_VAR 0 2
35736: PUSH
35737: DOUBLE
35738: LD_EXP 119
35742: PUSH
35743: LD_VAR 0 1
35747: ARRAY
35748: INC
35749: ST_TO_ADDR
35750: LD_INT 1
35752: PUSH
35753: FOR_DOWNTO
35754: IFFALSE 36004
// begin side := GetSide ( minersList [ i ] ) ;
35756: LD_ADDR_VAR 0 3
35760: PUSH
35761: LD_EXP 118
35765: PUSH
35766: LD_VAR 0 1
35770: ARRAY
35771: PPUSH
35772: CALL_OW 255
35776: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35777: LD_ADDR_VAR 0 4
35781: PUSH
35782: LD_EXP 119
35786: PUSH
35787: LD_VAR 0 1
35791: ARRAY
35792: PUSH
35793: LD_VAR 0 2
35797: ARRAY
35798: PUSH
35799: LD_INT 1
35801: ARRAY
35802: PPUSH
35803: LD_EXP 119
35807: PUSH
35808: LD_VAR 0 1
35812: ARRAY
35813: PUSH
35814: LD_VAR 0 2
35818: ARRAY
35819: PUSH
35820: LD_INT 2
35822: ARRAY
35823: PPUSH
35824: CALL_OW 428
35828: ST_TO_ADDR
// if not tmp then
35829: LD_VAR 0 4
35833: NOT
35834: IFFALSE 35838
// continue ;
35836: GO 35753
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35838: LD_VAR 0 4
35842: PUSH
35843: LD_INT 81
35845: PUSH
35846: LD_VAR 0 3
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PPUSH
35855: CALL_OW 69
35859: IN
35860: PUSH
35861: LD_EXP 119
35865: PUSH
35866: LD_VAR 0 1
35870: ARRAY
35871: PUSH
35872: LD_VAR 0 2
35876: ARRAY
35877: PUSH
35878: LD_INT 1
35880: ARRAY
35881: PPUSH
35882: LD_EXP 119
35886: PUSH
35887: LD_VAR 0 1
35891: ARRAY
35892: PUSH
35893: LD_VAR 0 2
35897: ARRAY
35898: PUSH
35899: LD_INT 2
35901: ARRAY
35902: PPUSH
35903: CALL_OW 458
35907: AND
35908: IFFALSE 36002
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35910: LD_EXP 119
35914: PUSH
35915: LD_VAR 0 1
35919: ARRAY
35920: PUSH
35921: LD_VAR 0 2
35925: ARRAY
35926: PUSH
35927: LD_INT 1
35929: ARRAY
35930: PPUSH
35931: LD_EXP 119
35935: PUSH
35936: LD_VAR 0 1
35940: ARRAY
35941: PUSH
35942: LD_VAR 0 2
35946: ARRAY
35947: PUSH
35948: LD_INT 2
35950: ARRAY
35951: PPUSH
35952: LD_VAR 0 3
35956: PPUSH
35957: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35961: LD_ADDR_EXP 119
35965: PUSH
35966: LD_EXP 119
35970: PPUSH
35971: LD_VAR 0 1
35975: PPUSH
35976: LD_EXP 119
35980: PUSH
35981: LD_VAR 0 1
35985: ARRAY
35986: PPUSH
35987: LD_VAR 0 2
35991: PPUSH
35992: CALL_OW 3
35996: PPUSH
35997: CALL_OW 1
36001: ST_TO_ADDR
// end ; end ;
36002: GO 35753
36004: POP
36005: POP
// end ;
36006: GO 35671
36008: POP
36009: POP
// end ;
36010: PPOPN 4
36012: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36013: LD_INT 0
36015: PPUSH
36016: PPUSH
// result := false ;
36017: LD_ADDR_VAR 0 4
36021: PUSH
36022: LD_INT 0
36024: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36025: LD_VAR 0 1
36029: PPUSH
36030: CALL_OW 264
36034: PUSH
36035: LD_EXP 39
36039: EQUAL
36040: NOT
36041: IFFALSE 36045
// exit ;
36043: GO 36285
// index := GetElementIndex ( minersList , unit ) ;
36045: LD_ADDR_VAR 0 5
36049: PUSH
36050: LD_EXP 118
36054: PPUSH
36055: LD_VAR 0 1
36059: PPUSH
36060: CALL 42269 0 2
36064: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36065: LD_EXP 119
36069: PUSH
36070: LD_VAR 0 5
36074: ARRAY
36075: PUSH
36076: LD_EXP 120
36080: GREATEREQUAL
36081: IFFALSE 36085
// exit ;
36083: GO 36285
// ComMoveXY ( unit , x , y ) ;
36085: LD_VAR 0 1
36089: PPUSH
36090: LD_VAR 0 2
36094: PPUSH
36095: LD_VAR 0 3
36099: PPUSH
36100: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36104: LD_INT 35
36106: PPUSH
36107: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36111: LD_VAR 0 1
36115: PPUSH
36116: LD_VAR 0 2
36120: PPUSH
36121: LD_VAR 0 3
36125: PPUSH
36126: CALL 72988 0 3
36130: NOT
36131: PUSH
36132: LD_VAR 0 1
36136: PPUSH
36137: CALL_OW 314
36141: AND
36142: IFFALSE 36146
// exit ;
36144: GO 36285
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36146: LD_VAR 0 2
36150: PPUSH
36151: LD_VAR 0 3
36155: PPUSH
36156: CALL_OW 428
36160: PUSH
36161: LD_VAR 0 1
36165: EQUAL
36166: PUSH
36167: LD_VAR 0 1
36171: PPUSH
36172: CALL_OW 314
36176: NOT
36177: AND
36178: IFFALSE 36104
// PlaySoundXY ( x , y , PlantMine ) ;
36180: LD_VAR 0 2
36184: PPUSH
36185: LD_VAR 0 3
36189: PPUSH
36190: LD_STRING PlantMine
36192: PPUSH
36193: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36197: LD_VAR 0 2
36201: PPUSH
36202: LD_VAR 0 3
36206: PPUSH
36207: LD_VAR 0 1
36211: PPUSH
36212: CALL_OW 255
36216: PPUSH
36217: LD_INT 0
36219: PPUSH
36220: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36224: LD_ADDR_EXP 119
36228: PUSH
36229: LD_EXP 119
36233: PPUSH
36234: LD_VAR 0 5
36238: PUSH
36239: LD_EXP 119
36243: PUSH
36244: LD_VAR 0 5
36248: ARRAY
36249: PUSH
36250: LD_INT 1
36252: PLUS
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PPUSH
36258: LD_VAR 0 2
36262: PUSH
36263: LD_VAR 0 3
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PPUSH
36272: CALL 42484 0 3
36276: ST_TO_ADDR
// result := true ;
36277: LD_ADDR_VAR 0 4
36281: PUSH
36282: LD_INT 1
36284: ST_TO_ADDR
// end ;
36285: LD_VAR 0 4
36289: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36290: LD_INT 0
36292: PPUSH
36293: PPUSH
36294: PPUSH
// if not unit in minersList then
36295: LD_VAR 0 1
36299: PUSH
36300: LD_EXP 118
36304: IN
36305: NOT
36306: IFFALSE 36310
// exit ;
36308: GO 36702
// index := GetElementIndex ( minersList , unit ) ;
36310: LD_ADDR_VAR 0 6
36314: PUSH
36315: LD_EXP 118
36319: PPUSH
36320: LD_VAR 0 1
36324: PPUSH
36325: CALL 42269 0 2
36329: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36330: LD_ADDR_VAR 0 5
36334: PUSH
36335: DOUBLE
36336: LD_EXP 119
36340: PUSH
36341: LD_VAR 0 6
36345: ARRAY
36346: INC
36347: ST_TO_ADDR
36348: LD_INT 1
36350: PUSH
36351: FOR_DOWNTO
36352: IFFALSE 36513
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36354: LD_EXP 119
36358: PUSH
36359: LD_VAR 0 6
36363: ARRAY
36364: PUSH
36365: LD_VAR 0 5
36369: ARRAY
36370: PUSH
36371: LD_INT 1
36373: ARRAY
36374: PUSH
36375: LD_VAR 0 2
36379: EQUAL
36380: PUSH
36381: LD_EXP 119
36385: PUSH
36386: LD_VAR 0 6
36390: ARRAY
36391: PUSH
36392: LD_VAR 0 5
36396: ARRAY
36397: PUSH
36398: LD_INT 2
36400: ARRAY
36401: PUSH
36402: LD_VAR 0 3
36406: EQUAL
36407: AND
36408: IFFALSE 36511
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36410: LD_EXP 119
36414: PUSH
36415: LD_VAR 0 6
36419: ARRAY
36420: PUSH
36421: LD_VAR 0 5
36425: ARRAY
36426: PUSH
36427: LD_INT 1
36429: ARRAY
36430: PPUSH
36431: LD_EXP 119
36435: PUSH
36436: LD_VAR 0 6
36440: ARRAY
36441: PUSH
36442: LD_VAR 0 5
36446: ARRAY
36447: PUSH
36448: LD_INT 2
36450: ARRAY
36451: PPUSH
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 255
36461: PPUSH
36462: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36466: LD_ADDR_EXP 119
36470: PUSH
36471: LD_EXP 119
36475: PPUSH
36476: LD_VAR 0 6
36480: PPUSH
36481: LD_EXP 119
36485: PUSH
36486: LD_VAR 0 6
36490: ARRAY
36491: PPUSH
36492: LD_VAR 0 5
36496: PPUSH
36497: CALL_OW 3
36501: PPUSH
36502: CALL_OW 1
36506: ST_TO_ADDR
// exit ;
36507: POP
36508: POP
36509: GO 36702
// end ; end ;
36511: GO 36351
36513: POP
36514: POP
// for i := minerMinesList [ index ] downto 1 do
36515: LD_ADDR_VAR 0 5
36519: PUSH
36520: DOUBLE
36521: LD_EXP 119
36525: PUSH
36526: LD_VAR 0 6
36530: ARRAY
36531: INC
36532: ST_TO_ADDR
36533: LD_INT 1
36535: PUSH
36536: FOR_DOWNTO
36537: IFFALSE 36700
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36539: LD_EXP 119
36543: PUSH
36544: LD_VAR 0 6
36548: ARRAY
36549: PUSH
36550: LD_VAR 0 5
36554: ARRAY
36555: PUSH
36556: LD_INT 1
36558: ARRAY
36559: PPUSH
36560: LD_EXP 119
36564: PUSH
36565: LD_VAR 0 6
36569: ARRAY
36570: PUSH
36571: LD_VAR 0 5
36575: ARRAY
36576: PUSH
36577: LD_INT 2
36579: ARRAY
36580: PPUSH
36581: LD_VAR 0 2
36585: PPUSH
36586: LD_VAR 0 3
36590: PPUSH
36591: CALL_OW 298
36595: PUSH
36596: LD_INT 6
36598: LESS
36599: IFFALSE 36698
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36601: LD_EXP 119
36605: PUSH
36606: LD_VAR 0 6
36610: ARRAY
36611: PUSH
36612: LD_VAR 0 5
36616: ARRAY
36617: PUSH
36618: LD_INT 1
36620: ARRAY
36621: PPUSH
36622: LD_EXP 119
36626: PUSH
36627: LD_VAR 0 6
36631: ARRAY
36632: PUSH
36633: LD_VAR 0 5
36637: ARRAY
36638: PUSH
36639: LD_INT 2
36641: ARRAY
36642: PPUSH
36643: LD_VAR 0 1
36647: PPUSH
36648: CALL_OW 255
36652: PPUSH
36653: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36657: LD_ADDR_EXP 119
36661: PUSH
36662: LD_EXP 119
36666: PPUSH
36667: LD_VAR 0 6
36671: PPUSH
36672: LD_EXP 119
36676: PUSH
36677: LD_VAR 0 6
36681: ARRAY
36682: PPUSH
36683: LD_VAR 0 5
36687: PPUSH
36688: CALL_OW 3
36692: PPUSH
36693: CALL_OW 1
36697: ST_TO_ADDR
// end ; end ;
36698: GO 36536
36700: POP
36701: POP
// end ;
36702: LD_VAR 0 4
36706: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36707: LD_INT 0
36709: PPUSH
36710: PPUSH
36711: PPUSH
36712: PPUSH
36713: PPUSH
36714: PPUSH
36715: PPUSH
36716: PPUSH
36717: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36718: LD_VAR 0 1
36722: PPUSH
36723: CALL_OW 264
36727: PUSH
36728: LD_EXP 39
36732: EQUAL
36733: NOT
36734: PUSH
36735: LD_VAR 0 1
36739: PUSH
36740: LD_EXP 118
36744: IN
36745: NOT
36746: OR
36747: IFFALSE 36751
// exit ;
36749: GO 37073
// index := GetElementIndex ( minersList , unit ) ;
36751: LD_ADDR_VAR 0 6
36755: PUSH
36756: LD_EXP 118
36760: PPUSH
36761: LD_VAR 0 1
36765: PPUSH
36766: CALL 42269 0 2
36770: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36771: LD_ADDR_VAR 0 8
36775: PUSH
36776: LD_EXP 120
36780: PUSH
36781: LD_EXP 119
36785: PUSH
36786: LD_VAR 0 6
36790: ARRAY
36791: MINUS
36792: ST_TO_ADDR
// if not minesFreeAmount then
36793: LD_VAR 0 8
36797: NOT
36798: IFFALSE 36802
// exit ;
36800: GO 37073
// tmp := [ ] ;
36802: LD_ADDR_VAR 0 7
36806: PUSH
36807: EMPTY
36808: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36809: LD_ADDR_VAR 0 5
36813: PUSH
36814: DOUBLE
36815: LD_INT 1
36817: DEC
36818: ST_TO_ADDR
36819: LD_VAR 0 8
36823: PUSH
36824: FOR_TO
36825: IFFALSE 37020
// begin _d := rand ( 0 , 5 ) ;
36827: LD_ADDR_VAR 0 11
36831: PUSH
36832: LD_INT 0
36834: PPUSH
36835: LD_INT 5
36837: PPUSH
36838: CALL_OW 12
36842: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36843: LD_ADDR_VAR 0 12
36847: PUSH
36848: LD_INT 2
36850: PPUSH
36851: LD_INT 6
36853: PPUSH
36854: CALL_OW 12
36858: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36859: LD_ADDR_VAR 0 9
36863: PUSH
36864: LD_VAR 0 2
36868: PPUSH
36869: LD_VAR 0 11
36873: PPUSH
36874: LD_VAR 0 12
36878: PPUSH
36879: CALL_OW 272
36883: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36884: LD_ADDR_VAR 0 10
36888: PUSH
36889: LD_VAR 0 3
36893: PPUSH
36894: LD_VAR 0 11
36898: PPUSH
36899: LD_VAR 0 12
36903: PPUSH
36904: CALL_OW 273
36908: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36909: LD_VAR 0 9
36913: PPUSH
36914: LD_VAR 0 10
36918: PPUSH
36919: CALL_OW 488
36923: PUSH
36924: LD_VAR 0 9
36928: PUSH
36929: LD_VAR 0 10
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_VAR 0 7
36942: IN
36943: NOT
36944: AND
36945: PUSH
36946: LD_VAR 0 9
36950: PPUSH
36951: LD_VAR 0 10
36955: PPUSH
36956: CALL_OW 458
36960: NOT
36961: AND
36962: IFFALSE 37004
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36964: LD_ADDR_VAR 0 7
36968: PUSH
36969: LD_VAR 0 7
36973: PPUSH
36974: LD_VAR 0 7
36978: PUSH
36979: LD_INT 1
36981: PLUS
36982: PPUSH
36983: LD_VAR 0 9
36987: PUSH
36988: LD_VAR 0 10
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PPUSH
36997: CALL_OW 1
37001: ST_TO_ADDR
37002: GO 37018
// i := i - 1 ;
37004: LD_ADDR_VAR 0 5
37008: PUSH
37009: LD_VAR 0 5
37013: PUSH
37014: LD_INT 1
37016: MINUS
37017: ST_TO_ADDR
// end ;
37018: GO 36824
37020: POP
37021: POP
// for i in tmp do
37022: LD_ADDR_VAR 0 5
37026: PUSH
37027: LD_VAR 0 7
37031: PUSH
37032: FOR_IN
37033: IFFALSE 37071
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37035: LD_VAR 0 1
37039: PPUSH
37040: LD_VAR 0 5
37044: PUSH
37045: LD_INT 1
37047: ARRAY
37048: PPUSH
37049: LD_VAR 0 5
37053: PUSH
37054: LD_INT 2
37056: ARRAY
37057: PPUSH
37058: CALL 36013 0 3
37062: NOT
37063: IFFALSE 37069
// exit ;
37065: POP
37066: POP
37067: GO 37073
37069: GO 37032
37071: POP
37072: POP
// end ;
37073: LD_VAR 0 4
37077: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37078: LD_INT 0
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
37085: PPUSH
37086: PPUSH
// if not GetClass ( unit ) = class_sniper then
37087: LD_VAR 0 1
37091: PPUSH
37092: CALL_OW 257
37096: PUSH
37097: LD_INT 5
37099: EQUAL
37100: NOT
37101: IFFALSE 37105
// exit ;
37103: GO 37493
// dist := 8 ;
37105: LD_ADDR_VAR 0 5
37109: PUSH
37110: LD_INT 8
37112: ST_TO_ADDR
// viewRange := 12 ;
37113: LD_ADDR_VAR 0 7
37117: PUSH
37118: LD_INT 12
37120: ST_TO_ADDR
// side := GetSide ( unit ) ;
37121: LD_ADDR_VAR 0 6
37125: PUSH
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 255
37135: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37136: LD_INT 61
37138: PPUSH
37139: LD_VAR 0 6
37143: PPUSH
37144: CALL_OW 321
37148: PUSH
37149: LD_INT 2
37151: EQUAL
37152: IFFALSE 37162
// viewRange := 16 ;
37154: LD_ADDR_VAR 0 7
37158: PUSH
37159: LD_INT 16
37161: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37162: LD_VAR 0 1
37166: PPUSH
37167: LD_VAR 0 2
37171: PPUSH
37172: LD_VAR 0 3
37176: PPUSH
37177: CALL_OW 297
37181: PUSH
37182: LD_VAR 0 5
37186: GREATER
37187: IFFALSE 37266
// begin ComMoveXY ( unit , x , y ) ;
37189: LD_VAR 0 1
37193: PPUSH
37194: LD_VAR 0 2
37198: PPUSH
37199: LD_VAR 0 3
37203: PPUSH
37204: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37208: LD_INT 35
37210: PPUSH
37211: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37215: LD_VAR 0 1
37219: PPUSH
37220: LD_VAR 0 2
37224: PPUSH
37225: LD_VAR 0 3
37229: PPUSH
37230: CALL 72988 0 3
37234: NOT
37235: IFFALSE 37239
// exit ;
37237: GO 37493
// until GetDistUnitXY ( unit , x , y ) < dist ;
37239: LD_VAR 0 1
37243: PPUSH
37244: LD_VAR 0 2
37248: PPUSH
37249: LD_VAR 0 3
37253: PPUSH
37254: CALL_OW 297
37258: PUSH
37259: LD_VAR 0 5
37263: LESS
37264: IFFALSE 37208
// end ; ComTurnXY ( unit , x , y ) ;
37266: LD_VAR 0 1
37270: PPUSH
37271: LD_VAR 0 2
37275: PPUSH
37276: LD_VAR 0 3
37280: PPUSH
37281: CALL_OW 118
// wait ( 5 ) ;
37285: LD_INT 5
37287: PPUSH
37288: CALL_OW 67
// _d := GetDir ( unit ) ;
37292: LD_ADDR_VAR 0 10
37296: PUSH
37297: LD_VAR 0 1
37301: PPUSH
37302: CALL_OW 254
37306: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37307: LD_ADDR_VAR 0 8
37311: PUSH
37312: LD_VAR 0 1
37316: PPUSH
37317: CALL_OW 250
37321: PPUSH
37322: LD_VAR 0 10
37326: PPUSH
37327: LD_VAR 0 5
37331: PPUSH
37332: CALL_OW 272
37336: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37337: LD_ADDR_VAR 0 9
37341: PUSH
37342: LD_VAR 0 1
37346: PPUSH
37347: CALL_OW 251
37351: PPUSH
37352: LD_VAR 0 10
37356: PPUSH
37357: LD_VAR 0 5
37361: PPUSH
37362: CALL_OW 273
37366: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37367: LD_VAR 0 8
37371: PPUSH
37372: LD_VAR 0 9
37376: PPUSH
37377: CALL_OW 488
37381: NOT
37382: IFFALSE 37386
// exit ;
37384: GO 37493
// ComAnimCustom ( unit , 1 ) ;
37386: LD_VAR 0 1
37390: PPUSH
37391: LD_INT 1
37393: PPUSH
37394: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37398: LD_VAR 0 8
37402: PPUSH
37403: LD_VAR 0 9
37407: PPUSH
37408: LD_VAR 0 6
37412: PPUSH
37413: LD_VAR 0 7
37417: PPUSH
37418: CALL_OW 330
// repeat wait ( 1 ) ;
37422: LD_INT 1
37424: PPUSH
37425: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37429: LD_VAR 0 1
37433: PPUSH
37434: CALL_OW 316
37438: PUSH
37439: LD_VAR 0 1
37443: PPUSH
37444: CALL_OW 314
37448: OR
37449: PUSH
37450: LD_VAR 0 1
37454: PPUSH
37455: CALL_OW 302
37459: NOT
37460: OR
37461: PUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 301
37471: OR
37472: IFFALSE 37422
// RemoveSeeing ( _x , _y , side ) ;
37474: LD_VAR 0 8
37478: PPUSH
37479: LD_VAR 0 9
37483: PPUSH
37484: LD_VAR 0 6
37488: PPUSH
37489: CALL_OW 331
// end ; end_of_file
37493: LD_VAR 0 4
37497: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37498: LD_INT 0
37500: PPUSH
37501: PPUSH
// if exist_mode then
37502: LD_VAR 0 2
37506: IFFALSE 37531
// unit := CreateCharacter ( prefix & ident ) else
37508: LD_ADDR_VAR 0 5
37512: PUSH
37513: LD_VAR 0 3
37517: PUSH
37518: LD_VAR 0 1
37522: STR
37523: PPUSH
37524: CALL_OW 34
37528: ST_TO_ADDR
37529: GO 37546
// unit := NewCharacter ( ident ) ;
37531: LD_ADDR_VAR 0 5
37535: PUSH
37536: LD_VAR 0 1
37540: PPUSH
37541: CALL_OW 25
37545: ST_TO_ADDR
// result := unit ;
37546: LD_ADDR_VAR 0 4
37550: PUSH
37551: LD_VAR 0 5
37555: ST_TO_ADDR
// end ;
37556: LD_VAR 0 4
37560: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37561: LD_INT 0
37563: PPUSH
37564: PPUSH
// if not side or not nation then
37565: LD_VAR 0 1
37569: NOT
37570: PUSH
37571: LD_VAR 0 2
37575: NOT
37576: OR
37577: IFFALSE 37581
// exit ;
37579: GO 38349
// case nation of nation_american :
37581: LD_VAR 0 2
37585: PUSH
37586: LD_INT 1
37588: DOUBLE
37589: EQUAL
37590: IFTRUE 37594
37592: GO 37808
37594: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37595: LD_ADDR_VAR 0 4
37599: PUSH
37600: LD_INT 35
37602: PUSH
37603: LD_INT 45
37605: PUSH
37606: LD_INT 46
37608: PUSH
37609: LD_INT 47
37611: PUSH
37612: LD_INT 82
37614: PUSH
37615: LD_INT 83
37617: PUSH
37618: LD_INT 84
37620: PUSH
37621: LD_INT 85
37623: PUSH
37624: LD_INT 86
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: LD_INT 6
37635: PUSH
37636: LD_INT 15
37638: PUSH
37639: LD_INT 16
37641: PUSH
37642: LD_INT 7
37644: PUSH
37645: LD_INT 12
37647: PUSH
37648: LD_INT 13
37650: PUSH
37651: LD_INT 10
37653: PUSH
37654: LD_INT 14
37656: PUSH
37657: LD_INT 20
37659: PUSH
37660: LD_INT 21
37662: PUSH
37663: LD_INT 22
37665: PUSH
37666: LD_INT 25
37668: PUSH
37669: LD_INT 32
37671: PUSH
37672: LD_INT 27
37674: PUSH
37675: LD_INT 36
37677: PUSH
37678: LD_INT 69
37680: PUSH
37681: LD_INT 39
37683: PUSH
37684: LD_INT 34
37686: PUSH
37687: LD_INT 40
37689: PUSH
37690: LD_INT 48
37692: PUSH
37693: LD_INT 49
37695: PUSH
37696: LD_INT 50
37698: PUSH
37699: LD_INT 51
37701: PUSH
37702: LD_INT 52
37704: PUSH
37705: LD_INT 53
37707: PUSH
37708: LD_INT 54
37710: PUSH
37711: LD_INT 55
37713: PUSH
37714: LD_INT 56
37716: PUSH
37717: LD_INT 57
37719: PUSH
37720: LD_INT 58
37722: PUSH
37723: LD_INT 59
37725: PUSH
37726: LD_INT 60
37728: PUSH
37729: LD_INT 61
37731: PUSH
37732: LD_INT 62
37734: PUSH
37735: LD_INT 80
37737: PUSH
37738: LD_INT 82
37740: PUSH
37741: LD_INT 83
37743: PUSH
37744: LD_INT 84
37746: PUSH
37747: LD_INT 85
37749: PUSH
37750: LD_INT 86
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: ST_TO_ADDR
37806: GO 38273
37808: LD_INT 2
37810: DOUBLE
37811: EQUAL
37812: IFTRUE 37816
37814: GO 38042
37816: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37817: LD_ADDR_VAR 0 4
37821: PUSH
37822: LD_INT 35
37824: PUSH
37825: LD_INT 45
37827: PUSH
37828: LD_INT 46
37830: PUSH
37831: LD_INT 47
37833: PUSH
37834: LD_INT 82
37836: PUSH
37837: LD_INT 83
37839: PUSH
37840: LD_INT 84
37842: PUSH
37843: LD_INT 85
37845: PUSH
37846: LD_INT 87
37848: PUSH
37849: LD_INT 70
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 11
37857: PUSH
37858: LD_INT 3
37860: PUSH
37861: LD_INT 4
37863: PUSH
37864: LD_INT 5
37866: PUSH
37867: LD_INT 6
37869: PUSH
37870: LD_INT 15
37872: PUSH
37873: LD_INT 18
37875: PUSH
37876: LD_INT 7
37878: PUSH
37879: LD_INT 17
37881: PUSH
37882: LD_INT 8
37884: PUSH
37885: LD_INT 20
37887: PUSH
37888: LD_INT 21
37890: PUSH
37891: LD_INT 22
37893: PUSH
37894: LD_INT 72
37896: PUSH
37897: LD_INT 26
37899: PUSH
37900: LD_INT 69
37902: PUSH
37903: LD_INT 39
37905: PUSH
37906: LD_INT 40
37908: PUSH
37909: LD_INT 41
37911: PUSH
37912: LD_INT 42
37914: PUSH
37915: LD_INT 43
37917: PUSH
37918: LD_INT 48
37920: PUSH
37921: LD_INT 49
37923: PUSH
37924: LD_INT 50
37926: PUSH
37927: LD_INT 51
37929: PUSH
37930: LD_INT 52
37932: PUSH
37933: LD_INT 53
37935: PUSH
37936: LD_INT 54
37938: PUSH
37939: LD_INT 55
37941: PUSH
37942: LD_INT 56
37944: PUSH
37945: LD_INT 60
37947: PUSH
37948: LD_INT 61
37950: PUSH
37951: LD_INT 62
37953: PUSH
37954: LD_INT 66
37956: PUSH
37957: LD_INT 67
37959: PUSH
37960: LD_INT 68
37962: PUSH
37963: LD_INT 81
37965: PUSH
37966: LD_INT 82
37968: PUSH
37969: LD_INT 83
37971: PUSH
37972: LD_INT 84
37974: PUSH
37975: LD_INT 85
37977: PUSH
37978: LD_INT 87
37980: PUSH
37981: LD_INT 88
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: ST_TO_ADDR
38040: GO 38273
38042: LD_INT 3
38044: DOUBLE
38045: EQUAL
38046: IFTRUE 38050
38048: GO 38272
38050: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38051: LD_ADDR_VAR 0 4
38055: PUSH
38056: LD_INT 46
38058: PUSH
38059: LD_INT 47
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 82
38070: PUSH
38071: LD_INT 83
38073: PUSH
38074: LD_INT 84
38076: PUSH
38077: LD_INT 85
38079: PUSH
38080: LD_INT 86
38082: PUSH
38083: LD_INT 11
38085: PUSH
38086: LD_INT 9
38088: PUSH
38089: LD_INT 20
38091: PUSH
38092: LD_INT 19
38094: PUSH
38095: LD_INT 21
38097: PUSH
38098: LD_INT 24
38100: PUSH
38101: LD_INT 22
38103: PUSH
38104: LD_INT 25
38106: PUSH
38107: LD_INT 28
38109: PUSH
38110: LD_INT 29
38112: PUSH
38113: LD_INT 30
38115: PUSH
38116: LD_INT 31
38118: PUSH
38119: LD_INT 37
38121: PUSH
38122: LD_INT 38
38124: PUSH
38125: LD_INT 32
38127: PUSH
38128: LD_INT 27
38130: PUSH
38131: LD_INT 33
38133: PUSH
38134: LD_INT 69
38136: PUSH
38137: LD_INT 39
38139: PUSH
38140: LD_INT 34
38142: PUSH
38143: LD_INT 40
38145: PUSH
38146: LD_INT 71
38148: PUSH
38149: LD_INT 23
38151: PUSH
38152: LD_INT 44
38154: PUSH
38155: LD_INT 48
38157: PUSH
38158: LD_INT 49
38160: PUSH
38161: LD_INT 50
38163: PUSH
38164: LD_INT 51
38166: PUSH
38167: LD_INT 52
38169: PUSH
38170: LD_INT 53
38172: PUSH
38173: LD_INT 54
38175: PUSH
38176: LD_INT 55
38178: PUSH
38179: LD_INT 56
38181: PUSH
38182: LD_INT 57
38184: PUSH
38185: LD_INT 58
38187: PUSH
38188: LD_INT 59
38190: PUSH
38191: LD_INT 63
38193: PUSH
38194: LD_INT 64
38196: PUSH
38197: LD_INT 65
38199: PUSH
38200: LD_INT 82
38202: PUSH
38203: LD_INT 83
38205: PUSH
38206: LD_INT 84
38208: PUSH
38209: LD_INT 85
38211: PUSH
38212: LD_INT 86
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
38270: GO 38273
38272: POP
// if state > - 1 and state < 3 then
38273: LD_VAR 0 3
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: GREATER
38282: PUSH
38283: LD_VAR 0 3
38287: PUSH
38288: LD_INT 3
38290: LESS
38291: AND
38292: IFFALSE 38349
// for i in result do
38294: LD_ADDR_VAR 0 5
38298: PUSH
38299: LD_VAR 0 4
38303: PUSH
38304: FOR_IN
38305: IFFALSE 38347
// if GetTech ( i , side ) <> state then
38307: LD_VAR 0 5
38311: PPUSH
38312: LD_VAR 0 1
38316: PPUSH
38317: CALL_OW 321
38321: PUSH
38322: LD_VAR 0 3
38326: NONEQUAL
38327: IFFALSE 38345
// result := result diff i ;
38329: LD_ADDR_VAR 0 4
38333: PUSH
38334: LD_VAR 0 4
38338: PUSH
38339: LD_VAR 0 5
38343: DIFF
38344: ST_TO_ADDR
38345: GO 38304
38347: POP
38348: POP
// end ;
38349: LD_VAR 0 4
38353: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38354: LD_INT 0
38356: PPUSH
38357: PPUSH
38358: PPUSH
// result := true ;
38359: LD_ADDR_VAR 0 3
38363: PUSH
38364: LD_INT 1
38366: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38367: LD_ADDR_VAR 0 5
38371: PUSH
38372: LD_VAR 0 2
38376: PPUSH
38377: CALL_OW 480
38381: ST_TO_ADDR
// if not tmp then
38382: LD_VAR 0 5
38386: NOT
38387: IFFALSE 38391
// exit ;
38389: GO 38440
// for i in tmp do
38391: LD_ADDR_VAR 0 4
38395: PUSH
38396: LD_VAR 0 5
38400: PUSH
38401: FOR_IN
38402: IFFALSE 38438
// if GetTech ( i , side ) <> state_researched then
38404: LD_VAR 0 4
38408: PPUSH
38409: LD_VAR 0 1
38413: PPUSH
38414: CALL_OW 321
38418: PUSH
38419: LD_INT 2
38421: NONEQUAL
38422: IFFALSE 38436
// begin result := false ;
38424: LD_ADDR_VAR 0 3
38428: PUSH
38429: LD_INT 0
38431: ST_TO_ADDR
// exit ;
38432: POP
38433: POP
38434: GO 38440
// end ;
38436: GO 38401
38438: POP
38439: POP
// end ;
38440: LD_VAR 0 3
38444: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38445: LD_INT 0
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38460: LD_VAR 0 1
38464: NOT
38465: PUSH
38466: LD_VAR 0 1
38470: PPUSH
38471: CALL_OW 257
38475: PUSH
38476: LD_INT 9
38478: NONEQUAL
38479: OR
38480: IFFALSE 38484
// exit ;
38482: GO 39057
// side := GetSide ( unit ) ;
38484: LD_ADDR_VAR 0 9
38488: PUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL_OW 255
38498: ST_TO_ADDR
// tech_space := tech_spacanom ;
38499: LD_ADDR_VAR 0 12
38503: PUSH
38504: LD_INT 29
38506: ST_TO_ADDR
// tech_time := tech_taurad ;
38507: LD_ADDR_VAR 0 13
38511: PUSH
38512: LD_INT 28
38514: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38515: LD_ADDR_VAR 0 11
38519: PUSH
38520: LD_VAR 0 1
38524: PPUSH
38525: CALL_OW 310
38529: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38530: LD_VAR 0 11
38534: PPUSH
38535: CALL_OW 247
38539: PUSH
38540: LD_INT 2
38542: EQUAL
38543: IFFALSE 38547
// exit ;
38545: GO 39057
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38547: LD_ADDR_VAR 0 8
38551: PUSH
38552: LD_INT 81
38554: PUSH
38555: LD_VAR 0 9
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 3
38566: PUSH
38567: LD_INT 21
38569: PUSH
38570: LD_INT 3
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PPUSH
38585: CALL_OW 69
38589: ST_TO_ADDR
// if not tmp then
38590: LD_VAR 0 8
38594: NOT
38595: IFFALSE 38599
// exit ;
38597: GO 39057
// if in_unit then
38599: LD_VAR 0 11
38603: IFFALSE 38627
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38605: LD_ADDR_VAR 0 10
38609: PUSH
38610: LD_VAR 0 8
38614: PPUSH
38615: LD_VAR 0 11
38619: PPUSH
38620: CALL_OW 74
38624: ST_TO_ADDR
38625: GO 38647
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38627: LD_ADDR_VAR 0 10
38631: PUSH
38632: LD_VAR 0 8
38636: PPUSH
38637: LD_VAR 0 1
38641: PPUSH
38642: CALL_OW 74
38646: ST_TO_ADDR
// if not enemy then
38647: LD_VAR 0 10
38651: NOT
38652: IFFALSE 38656
// exit ;
38654: GO 39057
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38656: LD_VAR 0 11
38660: PUSH
38661: LD_VAR 0 11
38665: PPUSH
38666: LD_VAR 0 10
38670: PPUSH
38671: CALL_OW 296
38675: PUSH
38676: LD_INT 13
38678: GREATER
38679: AND
38680: PUSH
38681: LD_VAR 0 1
38685: PPUSH
38686: LD_VAR 0 10
38690: PPUSH
38691: CALL_OW 296
38695: PUSH
38696: LD_INT 12
38698: GREATER
38699: OR
38700: IFFALSE 38704
// exit ;
38702: GO 39057
// missile := [ 1 ] ;
38704: LD_ADDR_VAR 0 14
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38715: LD_VAR 0 9
38719: PPUSH
38720: LD_VAR 0 12
38724: PPUSH
38725: CALL_OW 325
38729: IFFALSE 38758
// missile := Replace ( missile , missile + 1 , 2 ) ;
38731: LD_ADDR_VAR 0 14
38735: PUSH
38736: LD_VAR 0 14
38740: PPUSH
38741: LD_VAR 0 14
38745: PUSH
38746: LD_INT 1
38748: PLUS
38749: PPUSH
38750: LD_INT 2
38752: PPUSH
38753: CALL_OW 1
38757: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38758: LD_VAR 0 9
38762: PPUSH
38763: LD_VAR 0 13
38767: PPUSH
38768: CALL_OW 325
38772: PUSH
38773: LD_VAR 0 10
38777: PPUSH
38778: CALL_OW 255
38782: PPUSH
38783: LD_VAR 0 13
38787: PPUSH
38788: CALL_OW 325
38792: NOT
38793: AND
38794: IFFALSE 38823
// missile := Replace ( missile , missile + 1 , 3 ) ;
38796: LD_ADDR_VAR 0 14
38800: PUSH
38801: LD_VAR 0 14
38805: PPUSH
38806: LD_VAR 0 14
38810: PUSH
38811: LD_INT 1
38813: PLUS
38814: PPUSH
38815: LD_INT 3
38817: PPUSH
38818: CALL_OW 1
38822: ST_TO_ADDR
// if missile < 2 then
38823: LD_VAR 0 14
38827: PUSH
38828: LD_INT 2
38830: LESS
38831: IFFALSE 38835
// exit ;
38833: GO 39057
// x := GetX ( enemy ) ;
38835: LD_ADDR_VAR 0 4
38839: PUSH
38840: LD_VAR 0 10
38844: PPUSH
38845: CALL_OW 250
38849: ST_TO_ADDR
// y := GetY ( enemy ) ;
38850: LD_ADDR_VAR 0 5
38854: PUSH
38855: LD_VAR 0 10
38859: PPUSH
38860: CALL_OW 251
38864: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38865: LD_ADDR_VAR 0 6
38869: PUSH
38870: LD_VAR 0 4
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PPUSH
38879: LD_INT 1
38881: PPUSH
38882: CALL_OW 12
38886: PLUS
38887: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38888: LD_ADDR_VAR 0 7
38892: PUSH
38893: LD_VAR 0 5
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PPUSH
38902: LD_INT 1
38904: PPUSH
38905: CALL_OW 12
38909: PLUS
38910: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38911: LD_VAR 0 6
38915: PPUSH
38916: LD_VAR 0 7
38920: PPUSH
38921: CALL_OW 488
38925: NOT
38926: IFFALSE 38948
// begin _x := x ;
38928: LD_ADDR_VAR 0 6
38932: PUSH
38933: LD_VAR 0 4
38937: ST_TO_ADDR
// _y := y ;
38938: LD_ADDR_VAR 0 7
38942: PUSH
38943: LD_VAR 0 5
38947: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38948: LD_ADDR_VAR 0 3
38952: PUSH
38953: LD_INT 1
38955: PPUSH
38956: LD_VAR 0 14
38960: PPUSH
38961: CALL_OW 12
38965: ST_TO_ADDR
// case i of 1 :
38966: LD_VAR 0 3
38970: PUSH
38971: LD_INT 1
38973: DOUBLE
38974: EQUAL
38975: IFTRUE 38979
38977: GO 38996
38979: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38980: LD_VAR 0 1
38984: PPUSH
38985: LD_VAR 0 10
38989: PPUSH
38990: CALL_OW 115
38994: GO 39057
38996: LD_INT 2
38998: DOUBLE
38999: EQUAL
39000: IFTRUE 39004
39002: GO 39026
39004: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39005: LD_VAR 0 1
39009: PPUSH
39010: LD_VAR 0 6
39014: PPUSH
39015: LD_VAR 0 7
39019: PPUSH
39020: CALL_OW 153
39024: GO 39057
39026: LD_INT 3
39028: DOUBLE
39029: EQUAL
39030: IFTRUE 39034
39032: GO 39056
39034: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39035: LD_VAR 0 1
39039: PPUSH
39040: LD_VAR 0 6
39044: PPUSH
39045: LD_VAR 0 7
39049: PPUSH
39050: CALL_OW 154
39054: GO 39057
39056: POP
// end ;
39057: LD_VAR 0 2
39061: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39062: LD_INT 0
39064: PPUSH
39065: PPUSH
39066: PPUSH
39067: PPUSH
39068: PPUSH
39069: PPUSH
// if not unit or not building then
39070: LD_VAR 0 1
39074: NOT
39075: PUSH
39076: LD_VAR 0 2
39080: NOT
39081: OR
39082: IFFALSE 39086
// exit ;
39084: GO 39244
// x := GetX ( building ) ;
39086: LD_ADDR_VAR 0 5
39090: PUSH
39091: LD_VAR 0 2
39095: PPUSH
39096: CALL_OW 250
39100: ST_TO_ADDR
// y := GetY ( building ) ;
39101: LD_ADDR_VAR 0 6
39105: PUSH
39106: LD_VAR 0 2
39110: PPUSH
39111: CALL_OW 251
39115: ST_TO_ADDR
// for i = 0 to 5 do
39116: LD_ADDR_VAR 0 4
39120: PUSH
39121: DOUBLE
39122: LD_INT 0
39124: DEC
39125: ST_TO_ADDR
39126: LD_INT 5
39128: PUSH
39129: FOR_TO
39130: IFFALSE 39242
// begin _x := ShiftX ( x , i , 3 ) ;
39132: LD_ADDR_VAR 0 7
39136: PUSH
39137: LD_VAR 0 5
39141: PPUSH
39142: LD_VAR 0 4
39146: PPUSH
39147: LD_INT 3
39149: PPUSH
39150: CALL_OW 272
39154: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39155: LD_ADDR_VAR 0 8
39159: PUSH
39160: LD_VAR 0 6
39164: PPUSH
39165: LD_VAR 0 4
39169: PPUSH
39170: LD_INT 3
39172: PPUSH
39173: CALL_OW 273
39177: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39178: LD_VAR 0 7
39182: PPUSH
39183: LD_VAR 0 8
39187: PPUSH
39188: CALL_OW 488
39192: NOT
39193: IFFALSE 39197
// continue ;
39195: GO 39129
// if HexInfo ( _x , _y ) = 0 then
39197: LD_VAR 0 7
39201: PPUSH
39202: LD_VAR 0 8
39206: PPUSH
39207: CALL_OW 428
39211: PUSH
39212: LD_INT 0
39214: EQUAL
39215: IFFALSE 39240
// begin ComMoveXY ( unit , _x , _y ) ;
39217: LD_VAR 0 1
39221: PPUSH
39222: LD_VAR 0 7
39226: PPUSH
39227: LD_VAR 0 8
39231: PPUSH
39232: CALL_OW 111
// exit ;
39236: POP
39237: POP
39238: GO 39244
// end ; end ;
39240: GO 39129
39242: POP
39243: POP
// end ;
39244: LD_VAR 0 3
39248: RET
// export function ScanBase ( side , base_area ) ; begin
39249: LD_INT 0
39251: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39252: LD_ADDR_VAR 0 3
39256: PUSH
39257: LD_VAR 0 2
39261: PPUSH
39262: LD_INT 81
39264: PUSH
39265: LD_VAR 0 1
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PPUSH
39274: CALL_OW 70
39278: ST_TO_ADDR
// end ;
39279: LD_VAR 0 3
39283: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39284: LD_INT 0
39286: PPUSH
39287: PPUSH
39288: PPUSH
39289: PPUSH
// result := false ;
39290: LD_ADDR_VAR 0 2
39294: PUSH
39295: LD_INT 0
39297: ST_TO_ADDR
// side := GetSide ( unit ) ;
39298: LD_ADDR_VAR 0 3
39302: PUSH
39303: LD_VAR 0 1
39307: PPUSH
39308: CALL_OW 255
39312: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39313: LD_ADDR_VAR 0 4
39317: PUSH
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 248
39327: ST_TO_ADDR
// case nat of 1 :
39328: LD_VAR 0 4
39332: PUSH
39333: LD_INT 1
39335: DOUBLE
39336: EQUAL
39337: IFTRUE 39341
39339: GO 39352
39341: POP
// tech := tech_lassight ; 2 :
39342: LD_ADDR_VAR 0 5
39346: PUSH
39347: LD_INT 12
39349: ST_TO_ADDR
39350: GO 39391
39352: LD_INT 2
39354: DOUBLE
39355: EQUAL
39356: IFTRUE 39360
39358: GO 39371
39360: POP
// tech := tech_mortar ; 3 :
39361: LD_ADDR_VAR 0 5
39365: PUSH
39366: LD_INT 41
39368: ST_TO_ADDR
39369: GO 39391
39371: LD_INT 3
39373: DOUBLE
39374: EQUAL
39375: IFTRUE 39379
39377: GO 39390
39379: POP
// tech := tech_bazooka ; end ;
39380: LD_ADDR_VAR 0 5
39384: PUSH
39385: LD_INT 44
39387: ST_TO_ADDR
39388: GO 39391
39390: POP
// if Researched ( side , tech ) then
39391: LD_VAR 0 3
39395: PPUSH
39396: LD_VAR 0 5
39400: PPUSH
39401: CALL_OW 325
39405: IFFALSE 39432
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39407: LD_ADDR_VAR 0 2
39411: PUSH
39412: LD_INT 5
39414: PUSH
39415: LD_INT 8
39417: PUSH
39418: LD_INT 9
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: PUSH
39426: LD_VAR 0 4
39430: ARRAY
39431: ST_TO_ADDR
// end ;
39432: LD_VAR 0 2
39436: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39437: LD_INT 0
39439: PPUSH
39440: PPUSH
39441: PPUSH
// if not mines then
39442: LD_VAR 0 2
39446: NOT
39447: IFFALSE 39451
// exit ;
39449: GO 39595
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39451: LD_ADDR_VAR 0 5
39455: PUSH
39456: LD_INT 81
39458: PUSH
39459: LD_VAR 0 1
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 21
39473: PUSH
39474: LD_INT 3
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PPUSH
39489: CALL_OW 69
39493: ST_TO_ADDR
// for i in mines do
39494: LD_ADDR_VAR 0 4
39498: PUSH
39499: LD_VAR 0 2
39503: PUSH
39504: FOR_IN
39505: IFFALSE 39593
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39507: LD_VAR 0 4
39511: PUSH
39512: LD_INT 1
39514: ARRAY
39515: PPUSH
39516: LD_VAR 0 4
39520: PUSH
39521: LD_INT 2
39523: ARRAY
39524: PPUSH
39525: CALL_OW 458
39529: NOT
39530: IFFALSE 39534
// continue ;
39532: GO 39504
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39534: LD_VAR 0 4
39538: PUSH
39539: LD_INT 1
39541: ARRAY
39542: PPUSH
39543: LD_VAR 0 4
39547: PUSH
39548: LD_INT 2
39550: ARRAY
39551: PPUSH
39552: CALL_OW 428
39556: PUSH
39557: LD_VAR 0 5
39561: IN
39562: IFFALSE 39591
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39564: LD_VAR 0 4
39568: PUSH
39569: LD_INT 1
39571: ARRAY
39572: PPUSH
39573: LD_VAR 0 4
39577: PUSH
39578: LD_INT 2
39580: ARRAY
39581: PPUSH
39582: LD_VAR 0 1
39586: PPUSH
39587: CALL_OW 456
// end ;
39591: GO 39504
39593: POP
39594: POP
// end ;
39595: LD_VAR 0 3
39599: RET
// export function Count ( array ) ; var i ; begin
39600: LD_INT 0
39602: PPUSH
39603: PPUSH
// result := 0 ;
39604: LD_ADDR_VAR 0 2
39608: PUSH
39609: LD_INT 0
39611: ST_TO_ADDR
// for i in array do
39612: LD_ADDR_VAR 0 3
39616: PUSH
39617: LD_VAR 0 1
39621: PUSH
39622: FOR_IN
39623: IFFALSE 39647
// if i then
39625: LD_VAR 0 3
39629: IFFALSE 39645
// result := result + 1 ;
39631: LD_ADDR_VAR 0 2
39635: PUSH
39636: LD_VAR 0 2
39640: PUSH
39641: LD_INT 1
39643: PLUS
39644: ST_TO_ADDR
39645: GO 39622
39647: POP
39648: POP
// end ;
39649: LD_VAR 0 2
39653: RET
// export function IsEmpty ( building ) ; begin
39654: LD_INT 0
39656: PPUSH
// if not building then
39657: LD_VAR 0 1
39661: NOT
39662: IFFALSE 39666
// exit ;
39664: GO 39709
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39666: LD_ADDR_VAR 0 2
39670: PUSH
39671: LD_VAR 0 1
39675: PUSH
39676: LD_INT 22
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 255
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 58
39695: PUSH
39696: EMPTY
39697: LIST
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PPUSH
39703: CALL_OW 69
39707: IN
39708: ST_TO_ADDR
// end ;
39709: LD_VAR 0 2
39713: RET
// export function IsNotFull ( building ) ; begin
39714: LD_INT 0
39716: PPUSH
// if not building then
39717: LD_VAR 0 1
39721: NOT
39722: IFFALSE 39726
// exit ;
39724: GO 39745
// result := UnitsInside ( building ) < 6 ;
39726: LD_ADDR_VAR 0 2
39730: PUSH
39731: LD_VAR 0 1
39735: PPUSH
39736: CALL_OW 313
39740: PUSH
39741: LD_INT 6
39743: LESS
39744: ST_TO_ADDR
// end ;
39745: LD_VAR 0 2
39749: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39750: LD_INT 0
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
// tmp := [ ] ;
39756: LD_ADDR_VAR 0 3
39760: PUSH
39761: EMPTY
39762: ST_TO_ADDR
// list := [ ] ;
39763: LD_ADDR_VAR 0 5
39767: PUSH
39768: EMPTY
39769: ST_TO_ADDR
// for i = 16 to 25 do
39770: LD_ADDR_VAR 0 4
39774: PUSH
39775: DOUBLE
39776: LD_INT 16
39778: DEC
39779: ST_TO_ADDR
39780: LD_INT 25
39782: PUSH
39783: FOR_TO
39784: IFFALSE 39857
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39786: LD_ADDR_VAR 0 3
39790: PUSH
39791: LD_VAR 0 3
39795: PUSH
39796: LD_INT 22
39798: PUSH
39799: LD_VAR 0 1
39803: PPUSH
39804: CALL_OW 255
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 91
39815: PUSH
39816: LD_VAR 0 1
39820: PUSH
39821: LD_INT 6
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 30
39831: PUSH
39832: LD_VAR 0 4
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: PUSH
39846: EMPTY
39847: LIST
39848: PPUSH
39849: CALL_OW 69
39853: ADD
39854: ST_TO_ADDR
39855: GO 39783
39857: POP
39858: POP
// for i = 1 to tmp do
39859: LD_ADDR_VAR 0 4
39863: PUSH
39864: DOUBLE
39865: LD_INT 1
39867: DEC
39868: ST_TO_ADDR
39869: LD_VAR 0 3
39873: PUSH
39874: FOR_TO
39875: IFFALSE 39963
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39877: LD_ADDR_VAR 0 5
39881: PUSH
39882: LD_VAR 0 5
39886: PUSH
39887: LD_VAR 0 3
39891: PUSH
39892: LD_VAR 0 4
39896: ARRAY
39897: PPUSH
39898: CALL_OW 266
39902: PUSH
39903: LD_VAR 0 3
39907: PUSH
39908: LD_VAR 0 4
39912: ARRAY
39913: PPUSH
39914: CALL_OW 250
39918: PUSH
39919: LD_VAR 0 3
39923: PUSH
39924: LD_VAR 0 4
39928: ARRAY
39929: PPUSH
39930: CALL_OW 251
39934: PUSH
39935: LD_VAR 0 3
39939: PUSH
39940: LD_VAR 0 4
39944: ARRAY
39945: PPUSH
39946: CALL_OW 254
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: PUSH
39957: EMPTY
39958: LIST
39959: ADD
39960: ST_TO_ADDR
39961: GO 39874
39963: POP
39964: POP
// result := list ;
39965: LD_ADDR_VAR 0 2
39969: PUSH
39970: LD_VAR 0 5
39974: ST_TO_ADDR
// end ;
39975: LD_VAR 0 2
39979: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39980: LD_INT 0
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
// if not factory then
39989: LD_VAR 0 1
39993: NOT
39994: IFFALSE 39998
// exit ;
39996: GO 40591
// if control = control_apeman then
39998: LD_VAR 0 4
40002: PUSH
40003: LD_INT 5
40005: EQUAL
40006: IFFALSE 40115
// begin tmp := UnitsInside ( factory ) ;
40008: LD_ADDR_VAR 0 8
40012: PUSH
40013: LD_VAR 0 1
40017: PPUSH
40018: CALL_OW 313
40022: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40023: LD_VAR 0 8
40027: PPUSH
40028: LD_INT 25
40030: PUSH
40031: LD_INT 12
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PPUSH
40038: CALL_OW 72
40042: NOT
40043: IFFALSE 40053
// control := control_manual ;
40045: LD_ADDR_VAR 0 4
40049: PUSH
40050: LD_INT 1
40052: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40053: LD_ADDR_VAR 0 8
40057: PUSH
40058: LD_VAR 0 1
40062: PPUSH
40063: CALL 39750 0 1
40067: ST_TO_ADDR
// if tmp then
40068: LD_VAR 0 8
40072: IFFALSE 40115
// begin for i in tmp do
40074: LD_ADDR_VAR 0 7
40078: PUSH
40079: LD_VAR 0 8
40083: PUSH
40084: FOR_IN
40085: IFFALSE 40113
// if i [ 1 ] = b_ext_radio then
40087: LD_VAR 0 7
40091: PUSH
40092: LD_INT 1
40094: ARRAY
40095: PUSH
40096: LD_INT 22
40098: EQUAL
40099: IFFALSE 40111
// begin control := control_remote ;
40101: LD_ADDR_VAR 0 4
40105: PUSH
40106: LD_INT 2
40108: ST_TO_ADDR
// break ;
40109: GO 40113
// end ;
40111: GO 40084
40113: POP
40114: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40115: LD_VAR 0 1
40119: PPUSH
40120: LD_VAR 0 2
40124: PPUSH
40125: LD_VAR 0 3
40129: PPUSH
40130: LD_VAR 0 4
40134: PPUSH
40135: LD_VAR 0 5
40139: PPUSH
40140: CALL_OW 448
40144: IFFALSE 40179
// begin result := [ chassis , engine , control , weapon ] ;
40146: LD_ADDR_VAR 0 6
40150: PUSH
40151: LD_VAR 0 2
40155: PUSH
40156: LD_VAR 0 3
40160: PUSH
40161: LD_VAR 0 4
40165: PUSH
40166: LD_VAR 0 5
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: ST_TO_ADDR
// exit ;
40177: GO 40591
// end ; _chassis := AvailableChassisList ( factory ) ;
40179: LD_ADDR_VAR 0 9
40183: PUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: CALL_OW 475
40193: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40194: LD_ADDR_VAR 0 11
40198: PUSH
40199: LD_VAR 0 1
40203: PPUSH
40204: CALL_OW 476
40208: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40209: LD_ADDR_VAR 0 12
40213: PUSH
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL_OW 477
40223: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40224: LD_ADDR_VAR 0 10
40228: PUSH
40229: LD_VAR 0 1
40233: PPUSH
40234: CALL_OW 478
40238: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40239: LD_VAR 0 9
40243: NOT
40244: PUSH
40245: LD_VAR 0 11
40249: NOT
40250: OR
40251: PUSH
40252: LD_VAR 0 12
40256: NOT
40257: OR
40258: PUSH
40259: LD_VAR 0 10
40263: NOT
40264: OR
40265: IFFALSE 40300
// begin result := [ chassis , engine , control , weapon ] ;
40267: LD_ADDR_VAR 0 6
40271: PUSH
40272: LD_VAR 0 2
40276: PUSH
40277: LD_VAR 0 3
40281: PUSH
40282: LD_VAR 0 4
40286: PUSH
40287: LD_VAR 0 5
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
// exit ;
40298: GO 40591
// end ; if not chassis in _chassis then
40300: LD_VAR 0 2
40304: PUSH
40305: LD_VAR 0 9
40309: IN
40310: NOT
40311: IFFALSE 40337
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40313: LD_ADDR_VAR 0 2
40317: PUSH
40318: LD_VAR 0 9
40322: PUSH
40323: LD_INT 1
40325: PPUSH
40326: LD_VAR 0 9
40330: PPUSH
40331: CALL_OW 12
40335: ARRAY
40336: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40337: LD_VAR 0 2
40341: PPUSH
40342: LD_VAR 0 3
40346: PPUSH
40347: CALL 40596 0 2
40351: NOT
40352: IFFALSE 40411
// repeat engine := _engine [ 1 ] ;
40354: LD_ADDR_VAR 0 3
40358: PUSH
40359: LD_VAR 0 11
40363: PUSH
40364: LD_INT 1
40366: ARRAY
40367: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40368: LD_ADDR_VAR 0 11
40372: PUSH
40373: LD_VAR 0 11
40377: PPUSH
40378: LD_INT 1
40380: PPUSH
40381: CALL_OW 3
40385: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40386: LD_VAR 0 2
40390: PPUSH
40391: LD_VAR 0 3
40395: PPUSH
40396: CALL 40596 0 2
40400: PUSH
40401: LD_VAR 0 11
40405: PUSH
40406: EMPTY
40407: EQUAL
40408: OR
40409: IFFALSE 40354
// if not control in _control then
40411: LD_VAR 0 4
40415: PUSH
40416: LD_VAR 0 12
40420: IN
40421: NOT
40422: IFFALSE 40448
// control := _control [ rand ( 1 , _control ) ] ;
40424: LD_ADDR_VAR 0 4
40428: PUSH
40429: LD_VAR 0 12
40433: PUSH
40434: LD_INT 1
40436: PPUSH
40437: LD_VAR 0 12
40441: PPUSH
40442: CALL_OW 12
40446: ARRAY
40447: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40448: LD_VAR 0 2
40452: PPUSH
40453: LD_VAR 0 5
40457: PPUSH
40458: CALL 40816 0 2
40462: NOT
40463: IFFALSE 40522
// repeat weapon := _weapon [ 1 ] ;
40465: LD_ADDR_VAR 0 5
40469: PUSH
40470: LD_VAR 0 10
40474: PUSH
40475: LD_INT 1
40477: ARRAY
40478: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40479: LD_ADDR_VAR 0 10
40483: PUSH
40484: LD_VAR 0 10
40488: PPUSH
40489: LD_INT 1
40491: PPUSH
40492: CALL_OW 3
40496: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40497: LD_VAR 0 2
40501: PPUSH
40502: LD_VAR 0 5
40506: PPUSH
40507: CALL 40816 0 2
40511: PUSH
40512: LD_VAR 0 10
40516: PUSH
40517: EMPTY
40518: EQUAL
40519: OR
40520: IFFALSE 40465
// result := [ ] ;
40522: LD_ADDR_VAR 0 6
40526: PUSH
40527: EMPTY
40528: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40529: LD_VAR 0 1
40533: PPUSH
40534: LD_VAR 0 2
40538: PPUSH
40539: LD_VAR 0 3
40543: PPUSH
40544: LD_VAR 0 4
40548: PPUSH
40549: LD_VAR 0 5
40553: PPUSH
40554: CALL_OW 448
40558: IFFALSE 40591
// result := [ chassis , engine , control , weapon ] ;
40560: LD_ADDR_VAR 0 6
40564: PUSH
40565: LD_VAR 0 2
40569: PUSH
40570: LD_VAR 0 3
40574: PUSH
40575: LD_VAR 0 4
40579: PUSH
40580: LD_VAR 0 5
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: ST_TO_ADDR
// end ;
40591: LD_VAR 0 6
40595: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40596: LD_INT 0
40598: PPUSH
// if not chassis or not engine then
40599: LD_VAR 0 1
40603: NOT
40604: PUSH
40605: LD_VAR 0 2
40609: NOT
40610: OR
40611: IFFALSE 40615
// exit ;
40613: GO 40811
// case engine of engine_solar :
40615: LD_VAR 0 2
40619: PUSH
40620: LD_INT 2
40622: DOUBLE
40623: EQUAL
40624: IFTRUE 40628
40626: GO 40666
40628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40629: LD_ADDR_VAR 0 3
40633: PUSH
40634: LD_INT 11
40636: PUSH
40637: LD_INT 12
40639: PUSH
40640: LD_INT 13
40642: PUSH
40643: LD_INT 14
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: LD_INT 3
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: ST_TO_ADDR
40664: GO 40795
40666: LD_INT 1
40668: DOUBLE
40669: EQUAL
40670: IFTRUE 40674
40672: GO 40736
40674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40675: LD_ADDR_VAR 0 3
40679: PUSH
40680: LD_INT 11
40682: PUSH
40683: LD_INT 12
40685: PUSH
40686: LD_INT 13
40688: PUSH
40689: LD_INT 14
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: LD_INT 3
40700: PUSH
40701: LD_INT 4
40703: PUSH
40704: LD_INT 5
40706: PUSH
40707: LD_INT 21
40709: PUSH
40710: LD_INT 23
40712: PUSH
40713: LD_INT 22
40715: PUSH
40716: LD_INT 24
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: ST_TO_ADDR
40734: GO 40795
40736: LD_INT 3
40738: DOUBLE
40739: EQUAL
40740: IFTRUE 40744
40742: GO 40794
40744: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40745: LD_ADDR_VAR 0 3
40749: PUSH
40750: LD_INT 13
40752: PUSH
40753: LD_INT 14
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: LD_INT 3
40761: PUSH
40762: LD_INT 4
40764: PUSH
40765: LD_INT 5
40767: PUSH
40768: LD_INT 21
40770: PUSH
40771: LD_INT 22
40773: PUSH
40774: LD_INT 23
40776: PUSH
40777: LD_INT 24
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: ST_TO_ADDR
40792: GO 40795
40794: POP
// result := ( chassis in result ) ;
40795: LD_ADDR_VAR 0 3
40799: PUSH
40800: LD_VAR 0 1
40804: PUSH
40805: LD_VAR 0 3
40809: IN
40810: ST_TO_ADDR
// end ;
40811: LD_VAR 0 3
40815: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40816: LD_INT 0
40818: PPUSH
// if not chassis or not weapon then
40819: LD_VAR 0 1
40823: NOT
40824: PUSH
40825: LD_VAR 0 2
40829: NOT
40830: OR
40831: IFFALSE 40835
// exit ;
40833: GO 41897
// case weapon of us_machine_gun :
40835: LD_VAR 0 2
40839: PUSH
40840: LD_INT 2
40842: DOUBLE
40843: EQUAL
40844: IFTRUE 40848
40846: GO 40878
40848: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40849: LD_ADDR_VAR 0 3
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: LD_INT 3
40862: PUSH
40863: LD_INT 4
40865: PUSH
40866: LD_INT 5
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: ST_TO_ADDR
40876: GO 41881
40878: LD_INT 3
40880: DOUBLE
40881: EQUAL
40882: IFTRUE 40886
40884: GO 40916
40886: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40887: LD_ADDR_VAR 0 3
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: LD_INT 2
40897: PUSH
40898: LD_INT 3
40900: PUSH
40901: LD_INT 4
40903: PUSH
40904: LD_INT 5
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: ST_TO_ADDR
40914: GO 41881
40916: LD_INT 11
40918: DOUBLE
40919: EQUAL
40920: IFTRUE 40924
40922: GO 40954
40924: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40925: LD_ADDR_VAR 0 3
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: LD_INT 4
40941: PUSH
40942: LD_INT 5
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: ST_TO_ADDR
40952: GO 41881
40954: LD_INT 4
40956: DOUBLE
40957: EQUAL
40958: IFTRUE 40962
40960: GO 40988
40962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40963: LD_ADDR_VAR 0 3
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: LD_INT 3
40973: PUSH
40974: LD_INT 4
40976: PUSH
40977: LD_INT 5
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: ST_TO_ADDR
40986: GO 41881
40988: LD_INT 5
40990: DOUBLE
40991: EQUAL
40992: IFTRUE 40996
40994: GO 41022
40996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40997: LD_ADDR_VAR 0 3
41001: PUSH
41002: LD_INT 2
41004: PUSH
41005: LD_INT 3
41007: PUSH
41008: LD_INT 4
41010: PUSH
41011: LD_INT 5
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: ST_TO_ADDR
41020: GO 41881
41022: LD_INT 9
41024: DOUBLE
41025: EQUAL
41026: IFTRUE 41030
41028: GO 41056
41030: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41031: LD_ADDR_VAR 0 3
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 3
41041: PUSH
41042: LD_INT 4
41044: PUSH
41045: LD_INT 5
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: ST_TO_ADDR
41054: GO 41881
41056: LD_INT 7
41058: DOUBLE
41059: EQUAL
41060: IFTRUE 41064
41062: GO 41090
41064: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41065: LD_ADDR_VAR 0 3
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: LD_INT 3
41075: PUSH
41076: LD_INT 4
41078: PUSH
41079: LD_INT 5
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: ST_TO_ADDR
41088: GO 41881
41090: LD_INT 12
41092: DOUBLE
41093: EQUAL
41094: IFTRUE 41098
41096: GO 41124
41098: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41099: LD_ADDR_VAR 0 3
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: LD_INT 3
41109: PUSH
41110: LD_INT 4
41112: PUSH
41113: LD_INT 5
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: ST_TO_ADDR
41122: GO 41881
41124: LD_INT 13
41126: DOUBLE
41127: EQUAL
41128: IFTRUE 41132
41130: GO 41158
41132: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41133: LD_ADDR_VAR 0 3
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: LD_INT 3
41143: PUSH
41144: LD_INT 4
41146: PUSH
41147: LD_INT 5
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: ST_TO_ADDR
41156: GO 41881
41158: LD_INT 14
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 41184
41166: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_INT 4
41174: PUSH
41175: LD_INT 5
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: ST_TO_ADDR
41182: GO 41881
41184: LD_INT 6
41186: DOUBLE
41187: EQUAL
41188: IFTRUE 41192
41190: GO 41210
41192: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41193: LD_ADDR_VAR 0 3
41197: PUSH
41198: LD_INT 4
41200: PUSH
41201: LD_INT 5
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: ST_TO_ADDR
41208: GO 41881
41210: LD_INT 10
41212: DOUBLE
41213: EQUAL
41214: IFTRUE 41218
41216: GO 41236
41218: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41219: LD_ADDR_VAR 0 3
41223: PUSH
41224: LD_INT 4
41226: PUSH
41227: LD_INT 5
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: ST_TO_ADDR
41234: GO 41881
41236: LD_INT 22
41238: DOUBLE
41239: EQUAL
41240: IFTRUE 41244
41242: GO 41270
41244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41245: LD_ADDR_VAR 0 3
41249: PUSH
41250: LD_INT 11
41252: PUSH
41253: LD_INT 12
41255: PUSH
41256: LD_INT 13
41258: PUSH
41259: LD_INT 14
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: ST_TO_ADDR
41268: GO 41881
41270: LD_INT 23
41272: DOUBLE
41273: EQUAL
41274: IFTRUE 41278
41276: GO 41304
41278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41279: LD_ADDR_VAR 0 3
41283: PUSH
41284: LD_INT 11
41286: PUSH
41287: LD_INT 12
41289: PUSH
41290: LD_INT 13
41292: PUSH
41293: LD_INT 14
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: ST_TO_ADDR
41302: GO 41881
41304: LD_INT 24
41306: DOUBLE
41307: EQUAL
41308: IFTRUE 41312
41310: GO 41338
41312: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41313: LD_ADDR_VAR 0 3
41317: PUSH
41318: LD_INT 11
41320: PUSH
41321: LD_INT 12
41323: PUSH
41324: LD_INT 13
41326: PUSH
41327: LD_INT 14
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: ST_TO_ADDR
41336: GO 41881
41338: LD_INT 30
41340: DOUBLE
41341: EQUAL
41342: IFTRUE 41346
41344: GO 41372
41346: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41347: LD_ADDR_VAR 0 3
41351: PUSH
41352: LD_INT 11
41354: PUSH
41355: LD_INT 12
41357: PUSH
41358: LD_INT 13
41360: PUSH
41361: LD_INT 14
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: ST_TO_ADDR
41370: GO 41881
41372: LD_INT 25
41374: DOUBLE
41375: EQUAL
41376: IFTRUE 41380
41378: GO 41398
41380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41381: LD_ADDR_VAR 0 3
41385: PUSH
41386: LD_INT 13
41388: PUSH
41389: LD_INT 14
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: ST_TO_ADDR
41396: GO 41881
41398: LD_INT 27
41400: DOUBLE
41401: EQUAL
41402: IFTRUE 41406
41404: GO 41424
41406: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41407: LD_ADDR_VAR 0 3
41411: PUSH
41412: LD_INT 13
41414: PUSH
41415: LD_INT 14
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: ST_TO_ADDR
41422: GO 41881
41424: LD_EXP 37
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41434
41432: GO 41460
41434: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41435: LD_ADDR_VAR 0 3
41439: PUSH
41440: LD_INT 11
41442: PUSH
41443: LD_INT 12
41445: PUSH
41446: LD_INT 13
41448: PUSH
41449: LD_INT 14
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: ST_TO_ADDR
41458: GO 41881
41460: LD_INT 28
41462: DOUBLE
41463: EQUAL
41464: IFTRUE 41468
41466: GO 41486
41468: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41469: LD_ADDR_VAR 0 3
41473: PUSH
41474: LD_INT 13
41476: PUSH
41477: LD_INT 14
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: ST_TO_ADDR
41484: GO 41881
41486: LD_INT 29
41488: DOUBLE
41489: EQUAL
41490: IFTRUE 41494
41492: GO 41512
41494: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41495: LD_ADDR_VAR 0 3
41499: PUSH
41500: LD_INT 13
41502: PUSH
41503: LD_INT 14
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: ST_TO_ADDR
41510: GO 41881
41512: LD_INT 31
41514: DOUBLE
41515: EQUAL
41516: IFTRUE 41520
41518: GO 41538
41520: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41521: LD_ADDR_VAR 0 3
41525: PUSH
41526: LD_INT 13
41528: PUSH
41529: LD_INT 14
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: ST_TO_ADDR
41536: GO 41881
41538: LD_INT 26
41540: DOUBLE
41541: EQUAL
41542: IFTRUE 41546
41544: GO 41564
41546: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41547: LD_ADDR_VAR 0 3
41551: PUSH
41552: LD_INT 13
41554: PUSH
41555: LD_INT 14
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: ST_TO_ADDR
41562: GO 41881
41564: LD_INT 42
41566: DOUBLE
41567: EQUAL
41568: IFTRUE 41572
41570: GO 41598
41572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41573: LD_ADDR_VAR 0 3
41577: PUSH
41578: LD_INT 21
41580: PUSH
41581: LD_INT 22
41583: PUSH
41584: LD_INT 23
41586: PUSH
41587: LD_INT 24
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: ST_TO_ADDR
41596: GO 41881
41598: LD_INT 43
41600: DOUBLE
41601: EQUAL
41602: IFTRUE 41606
41604: GO 41632
41606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41607: LD_ADDR_VAR 0 3
41611: PUSH
41612: LD_INT 21
41614: PUSH
41615: LD_INT 22
41617: PUSH
41618: LD_INT 23
41620: PUSH
41621: LD_INT 24
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: ST_TO_ADDR
41630: GO 41881
41632: LD_INT 44
41634: DOUBLE
41635: EQUAL
41636: IFTRUE 41640
41638: GO 41666
41640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41641: LD_ADDR_VAR 0 3
41645: PUSH
41646: LD_INT 21
41648: PUSH
41649: LD_INT 22
41651: PUSH
41652: LD_INT 23
41654: PUSH
41655: LD_INT 24
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: ST_TO_ADDR
41664: GO 41881
41666: LD_INT 45
41668: DOUBLE
41669: EQUAL
41670: IFTRUE 41674
41672: GO 41700
41674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41675: LD_ADDR_VAR 0 3
41679: PUSH
41680: LD_INT 21
41682: PUSH
41683: LD_INT 22
41685: PUSH
41686: LD_INT 23
41688: PUSH
41689: LD_INT 24
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: ST_TO_ADDR
41698: GO 41881
41700: LD_INT 49
41702: DOUBLE
41703: EQUAL
41704: IFTRUE 41708
41706: GO 41734
41708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41709: LD_ADDR_VAR 0 3
41713: PUSH
41714: LD_INT 21
41716: PUSH
41717: LD_INT 22
41719: PUSH
41720: LD_INT 23
41722: PUSH
41723: LD_INT 24
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: ST_TO_ADDR
41732: GO 41881
41734: LD_INT 51
41736: DOUBLE
41737: EQUAL
41738: IFTRUE 41742
41740: GO 41768
41742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41743: LD_ADDR_VAR 0 3
41747: PUSH
41748: LD_INT 21
41750: PUSH
41751: LD_INT 22
41753: PUSH
41754: LD_INT 23
41756: PUSH
41757: LD_INT 24
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: ST_TO_ADDR
41766: GO 41881
41768: LD_INT 52
41770: DOUBLE
41771: EQUAL
41772: IFTRUE 41776
41774: GO 41802
41776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41777: LD_ADDR_VAR 0 3
41781: PUSH
41782: LD_INT 21
41784: PUSH
41785: LD_INT 22
41787: PUSH
41788: LD_INT 23
41790: PUSH
41791: LD_INT 24
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: ST_TO_ADDR
41800: GO 41881
41802: LD_INT 53
41804: DOUBLE
41805: EQUAL
41806: IFTRUE 41810
41808: GO 41828
41810: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41811: LD_ADDR_VAR 0 3
41815: PUSH
41816: LD_INT 23
41818: PUSH
41819: LD_INT 24
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: ST_TO_ADDR
41826: GO 41881
41828: LD_INT 46
41830: DOUBLE
41831: EQUAL
41832: IFTRUE 41836
41834: GO 41854
41836: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41837: LD_ADDR_VAR 0 3
41841: PUSH
41842: LD_INT 23
41844: PUSH
41845: LD_INT 24
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: ST_TO_ADDR
41852: GO 41881
41854: LD_INT 47
41856: DOUBLE
41857: EQUAL
41858: IFTRUE 41862
41860: GO 41880
41862: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41863: LD_ADDR_VAR 0 3
41867: PUSH
41868: LD_INT 23
41870: PUSH
41871: LD_INT 24
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: ST_TO_ADDR
41878: GO 41881
41880: POP
// result := ( chassis in result ) ;
41881: LD_ADDR_VAR 0 3
41885: PUSH
41886: LD_VAR 0 1
41890: PUSH
41891: LD_VAR 0 3
41895: IN
41896: ST_TO_ADDR
// end ;
41897: LD_VAR 0 3
41901: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41902: LD_INT 0
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
// result := array ;
41911: LD_ADDR_VAR 0 5
41915: PUSH
41916: LD_VAR 0 1
41920: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41921: LD_VAR 0 1
41925: NOT
41926: PUSH
41927: LD_VAR 0 2
41931: NOT
41932: OR
41933: PUSH
41934: LD_VAR 0 3
41938: NOT
41939: OR
41940: PUSH
41941: LD_VAR 0 2
41945: PUSH
41946: LD_VAR 0 1
41950: GREATER
41951: OR
41952: PUSH
41953: LD_VAR 0 3
41957: PUSH
41958: LD_VAR 0 1
41962: GREATER
41963: OR
41964: IFFALSE 41968
// exit ;
41966: GO 42264
// if direction then
41968: LD_VAR 0 4
41972: IFFALSE 42036
// begin d := 1 ;
41974: LD_ADDR_VAR 0 9
41978: PUSH
41979: LD_INT 1
41981: ST_TO_ADDR
// if i_from > i_to then
41982: LD_VAR 0 2
41986: PUSH
41987: LD_VAR 0 3
41991: GREATER
41992: IFFALSE 42018
// length := ( array - i_from ) + i_to else
41994: LD_ADDR_VAR 0 11
41998: PUSH
41999: LD_VAR 0 1
42003: PUSH
42004: LD_VAR 0 2
42008: MINUS
42009: PUSH
42010: LD_VAR 0 3
42014: PLUS
42015: ST_TO_ADDR
42016: GO 42034
// length := i_to - i_from ;
42018: LD_ADDR_VAR 0 11
42022: PUSH
42023: LD_VAR 0 3
42027: PUSH
42028: LD_VAR 0 2
42032: MINUS
42033: ST_TO_ADDR
// end else
42034: GO 42097
// begin d := - 1 ;
42036: LD_ADDR_VAR 0 9
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: ST_TO_ADDR
// if i_from > i_to then
42045: LD_VAR 0 2
42049: PUSH
42050: LD_VAR 0 3
42054: GREATER
42055: IFFALSE 42075
// length := i_from - i_to else
42057: LD_ADDR_VAR 0 11
42061: PUSH
42062: LD_VAR 0 2
42066: PUSH
42067: LD_VAR 0 3
42071: MINUS
42072: ST_TO_ADDR
42073: GO 42097
// length := ( array - i_to ) + i_from ;
42075: LD_ADDR_VAR 0 11
42079: PUSH
42080: LD_VAR 0 1
42084: PUSH
42085: LD_VAR 0 3
42089: MINUS
42090: PUSH
42091: LD_VAR 0 2
42095: PLUS
42096: ST_TO_ADDR
// end ; if not length then
42097: LD_VAR 0 11
42101: NOT
42102: IFFALSE 42106
// exit ;
42104: GO 42264
// tmp := array ;
42106: LD_ADDR_VAR 0 10
42110: PUSH
42111: LD_VAR 0 1
42115: ST_TO_ADDR
// for i = 1 to length do
42116: LD_ADDR_VAR 0 6
42120: PUSH
42121: DOUBLE
42122: LD_INT 1
42124: DEC
42125: ST_TO_ADDR
42126: LD_VAR 0 11
42130: PUSH
42131: FOR_TO
42132: IFFALSE 42252
// begin for j = 1 to array do
42134: LD_ADDR_VAR 0 7
42138: PUSH
42139: DOUBLE
42140: LD_INT 1
42142: DEC
42143: ST_TO_ADDR
42144: LD_VAR 0 1
42148: PUSH
42149: FOR_TO
42150: IFFALSE 42238
// begin k := j + d ;
42152: LD_ADDR_VAR 0 8
42156: PUSH
42157: LD_VAR 0 7
42161: PUSH
42162: LD_VAR 0 9
42166: PLUS
42167: ST_TO_ADDR
// if k > array then
42168: LD_VAR 0 8
42172: PUSH
42173: LD_VAR 0 1
42177: GREATER
42178: IFFALSE 42188
// k := 1 ;
42180: LD_ADDR_VAR 0 8
42184: PUSH
42185: LD_INT 1
42187: ST_TO_ADDR
// if not k then
42188: LD_VAR 0 8
42192: NOT
42193: IFFALSE 42205
// k := array ;
42195: LD_ADDR_VAR 0 8
42199: PUSH
42200: LD_VAR 0 1
42204: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42205: LD_ADDR_VAR 0 10
42209: PUSH
42210: LD_VAR 0 10
42214: PPUSH
42215: LD_VAR 0 8
42219: PPUSH
42220: LD_VAR 0 1
42224: PUSH
42225: LD_VAR 0 7
42229: ARRAY
42230: PPUSH
42231: CALL_OW 1
42235: ST_TO_ADDR
// end ;
42236: GO 42149
42238: POP
42239: POP
// array := tmp ;
42240: LD_ADDR_VAR 0 1
42244: PUSH
42245: LD_VAR 0 10
42249: ST_TO_ADDR
// end ;
42250: GO 42131
42252: POP
42253: POP
// result := array ;
42254: LD_ADDR_VAR 0 5
42258: PUSH
42259: LD_VAR 0 1
42263: ST_TO_ADDR
// end ;
42264: LD_VAR 0 5
42268: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42269: LD_INT 0
42271: PPUSH
42272: PPUSH
// result := 0 ;
42273: LD_ADDR_VAR 0 3
42277: PUSH
42278: LD_INT 0
42280: ST_TO_ADDR
// if not array or not value in array then
42281: LD_VAR 0 1
42285: NOT
42286: PUSH
42287: LD_VAR 0 2
42291: PUSH
42292: LD_VAR 0 1
42296: IN
42297: NOT
42298: OR
42299: IFFALSE 42303
// exit ;
42301: GO 42357
// for i = 1 to array do
42303: LD_ADDR_VAR 0 4
42307: PUSH
42308: DOUBLE
42309: LD_INT 1
42311: DEC
42312: ST_TO_ADDR
42313: LD_VAR 0 1
42317: PUSH
42318: FOR_TO
42319: IFFALSE 42355
// if value = array [ i ] then
42321: LD_VAR 0 2
42325: PUSH
42326: LD_VAR 0 1
42330: PUSH
42331: LD_VAR 0 4
42335: ARRAY
42336: EQUAL
42337: IFFALSE 42353
// begin result := i ;
42339: LD_ADDR_VAR 0 3
42343: PUSH
42344: LD_VAR 0 4
42348: ST_TO_ADDR
// exit ;
42349: POP
42350: POP
42351: GO 42357
// end ;
42353: GO 42318
42355: POP
42356: POP
// end ;
42357: LD_VAR 0 3
42361: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42362: LD_INT 0
42364: PPUSH
// vc_chassis := chassis ;
42365: LD_ADDR_OWVAR 37
42369: PUSH
42370: LD_VAR 0 1
42374: ST_TO_ADDR
// vc_engine := engine ;
42375: LD_ADDR_OWVAR 39
42379: PUSH
42380: LD_VAR 0 2
42384: ST_TO_ADDR
// vc_control := control ;
42385: LD_ADDR_OWVAR 38
42389: PUSH
42390: LD_VAR 0 3
42394: ST_TO_ADDR
// vc_weapon := weapon ;
42395: LD_ADDR_OWVAR 40
42399: PUSH
42400: LD_VAR 0 4
42404: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42405: LD_ADDR_OWVAR 41
42409: PUSH
42410: LD_VAR 0 5
42414: ST_TO_ADDR
// end ;
42415: LD_VAR 0 6
42419: RET
// export function WantPlant ( unit ) ; var task ; begin
42420: LD_INT 0
42422: PPUSH
42423: PPUSH
// result := false ;
42424: LD_ADDR_VAR 0 2
42428: PUSH
42429: LD_INT 0
42431: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42432: LD_ADDR_VAR 0 3
42436: PUSH
42437: LD_VAR 0 1
42441: PPUSH
42442: CALL_OW 437
42446: ST_TO_ADDR
// if task then
42447: LD_VAR 0 3
42451: IFFALSE 42479
// if task [ 1 ] [ 1 ] = p then
42453: LD_VAR 0 3
42457: PUSH
42458: LD_INT 1
42460: ARRAY
42461: PUSH
42462: LD_INT 1
42464: ARRAY
42465: PUSH
42466: LD_STRING p
42468: EQUAL
42469: IFFALSE 42479
// result := true ;
42471: LD_ADDR_VAR 0 2
42475: PUSH
42476: LD_INT 1
42478: ST_TO_ADDR
// end ;
42479: LD_VAR 0 2
42483: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42484: LD_INT 0
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
// if pos < 1 then
42490: LD_VAR 0 2
42494: PUSH
42495: LD_INT 1
42497: LESS
42498: IFFALSE 42502
// exit ;
42500: GO 42805
// if pos = 1 then
42502: LD_VAR 0 2
42506: PUSH
42507: LD_INT 1
42509: EQUAL
42510: IFFALSE 42543
// result := Replace ( arr , pos [ 1 ] , value ) else
42512: LD_ADDR_VAR 0 4
42516: PUSH
42517: LD_VAR 0 1
42521: PPUSH
42522: LD_VAR 0 2
42526: PUSH
42527: LD_INT 1
42529: ARRAY
42530: PPUSH
42531: LD_VAR 0 3
42535: PPUSH
42536: CALL_OW 1
42540: ST_TO_ADDR
42541: GO 42805
// begin tmp := arr ;
42543: LD_ADDR_VAR 0 6
42547: PUSH
42548: LD_VAR 0 1
42552: ST_TO_ADDR
// s_arr := [ tmp ] ;
42553: LD_ADDR_VAR 0 7
42557: PUSH
42558: LD_VAR 0 6
42562: PUSH
42563: EMPTY
42564: LIST
42565: ST_TO_ADDR
// for i = 1 to pos - 1 do
42566: LD_ADDR_VAR 0 5
42570: PUSH
42571: DOUBLE
42572: LD_INT 1
42574: DEC
42575: ST_TO_ADDR
42576: LD_VAR 0 2
42580: PUSH
42581: LD_INT 1
42583: MINUS
42584: PUSH
42585: FOR_TO
42586: IFFALSE 42631
// begin tmp := tmp [ pos [ i ] ] ;
42588: LD_ADDR_VAR 0 6
42592: PUSH
42593: LD_VAR 0 6
42597: PUSH
42598: LD_VAR 0 2
42602: PUSH
42603: LD_VAR 0 5
42607: ARRAY
42608: ARRAY
42609: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42610: LD_ADDR_VAR 0 7
42614: PUSH
42615: LD_VAR 0 7
42619: PUSH
42620: LD_VAR 0 6
42624: PUSH
42625: EMPTY
42626: LIST
42627: ADD
42628: ST_TO_ADDR
// end ;
42629: GO 42585
42631: POP
42632: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42633: LD_ADDR_VAR 0 6
42637: PUSH
42638: LD_VAR 0 6
42642: PPUSH
42643: LD_VAR 0 2
42647: PUSH
42648: LD_VAR 0 2
42652: ARRAY
42653: PPUSH
42654: LD_VAR 0 3
42658: PPUSH
42659: CALL_OW 1
42663: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42664: LD_ADDR_VAR 0 7
42668: PUSH
42669: LD_VAR 0 7
42673: PPUSH
42674: LD_VAR 0 7
42678: PPUSH
42679: LD_VAR 0 6
42683: PPUSH
42684: CALL_OW 1
42688: ST_TO_ADDR
// for i = s_arr downto 2 do
42689: LD_ADDR_VAR 0 5
42693: PUSH
42694: DOUBLE
42695: LD_VAR 0 7
42699: INC
42700: ST_TO_ADDR
42701: LD_INT 2
42703: PUSH
42704: FOR_DOWNTO
42705: IFFALSE 42789
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42707: LD_ADDR_VAR 0 6
42711: PUSH
42712: LD_VAR 0 7
42716: PUSH
42717: LD_VAR 0 5
42721: PUSH
42722: LD_INT 1
42724: MINUS
42725: ARRAY
42726: PPUSH
42727: LD_VAR 0 2
42731: PUSH
42732: LD_VAR 0 5
42736: PUSH
42737: LD_INT 1
42739: MINUS
42740: ARRAY
42741: PPUSH
42742: LD_VAR 0 7
42746: PUSH
42747: LD_VAR 0 5
42751: ARRAY
42752: PPUSH
42753: CALL_OW 1
42757: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42758: LD_ADDR_VAR 0 7
42762: PUSH
42763: LD_VAR 0 7
42767: PPUSH
42768: LD_VAR 0 5
42772: PUSH
42773: LD_INT 1
42775: MINUS
42776: PPUSH
42777: LD_VAR 0 6
42781: PPUSH
42782: CALL_OW 1
42786: ST_TO_ADDR
// end ;
42787: GO 42704
42789: POP
42790: POP
// result := s_arr [ 1 ] ;
42791: LD_ADDR_VAR 0 4
42795: PUSH
42796: LD_VAR 0 7
42800: PUSH
42801: LD_INT 1
42803: ARRAY
42804: ST_TO_ADDR
// end ; end ;
42805: LD_VAR 0 4
42809: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42810: LD_INT 0
42812: PPUSH
42813: PPUSH
// if not list then
42814: LD_VAR 0 1
42818: NOT
42819: IFFALSE 42823
// exit ;
42821: GO 42914
// i := list [ pos1 ] ;
42823: LD_ADDR_VAR 0 5
42827: PUSH
42828: LD_VAR 0 1
42832: PUSH
42833: LD_VAR 0 2
42837: ARRAY
42838: ST_TO_ADDR
// if not i then
42839: LD_VAR 0 5
42843: NOT
42844: IFFALSE 42848
// exit ;
42846: GO 42914
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42848: LD_ADDR_VAR 0 1
42852: PUSH
42853: LD_VAR 0 1
42857: PPUSH
42858: LD_VAR 0 2
42862: PPUSH
42863: LD_VAR 0 1
42867: PUSH
42868: LD_VAR 0 3
42872: ARRAY
42873: PPUSH
42874: CALL_OW 1
42878: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42879: LD_ADDR_VAR 0 1
42883: PUSH
42884: LD_VAR 0 1
42888: PPUSH
42889: LD_VAR 0 3
42893: PPUSH
42894: LD_VAR 0 5
42898: PPUSH
42899: CALL_OW 1
42903: ST_TO_ADDR
// result := list ;
42904: LD_ADDR_VAR 0 4
42908: PUSH
42909: LD_VAR 0 1
42913: ST_TO_ADDR
// end ;
42914: LD_VAR 0 4
42918: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42919: LD_INT 0
42921: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42922: LD_ADDR_VAR 0 5
42926: PUSH
42927: LD_VAR 0 1
42931: PPUSH
42932: CALL_OW 250
42936: PPUSH
42937: LD_VAR 0 1
42941: PPUSH
42942: CALL_OW 251
42946: PPUSH
42947: LD_VAR 0 2
42951: PPUSH
42952: LD_VAR 0 3
42956: PPUSH
42957: LD_VAR 0 4
42961: PPUSH
42962: CALL 42972 0 5
42966: ST_TO_ADDR
// end ;
42967: LD_VAR 0 5
42971: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42972: LD_INT 0
42974: PPUSH
42975: PPUSH
42976: PPUSH
42977: PPUSH
// if not list then
42978: LD_VAR 0 3
42982: NOT
42983: IFFALSE 42987
// exit ;
42985: GO 43375
// result := [ ] ;
42987: LD_ADDR_VAR 0 6
42991: PUSH
42992: EMPTY
42993: ST_TO_ADDR
// for i in list do
42994: LD_ADDR_VAR 0 7
42998: PUSH
42999: LD_VAR 0 3
43003: PUSH
43004: FOR_IN
43005: IFFALSE 43207
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43007: LD_ADDR_VAR 0 9
43011: PUSH
43012: LD_VAR 0 7
43016: PPUSH
43017: LD_VAR 0 1
43021: PPUSH
43022: LD_VAR 0 2
43026: PPUSH
43027: CALL_OW 297
43031: ST_TO_ADDR
// if not result then
43032: LD_VAR 0 6
43036: NOT
43037: IFFALSE 43063
// result := [ [ i , tmp ] ] else
43039: LD_ADDR_VAR 0 6
43043: PUSH
43044: LD_VAR 0 7
43048: PUSH
43049: LD_VAR 0 9
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: EMPTY
43059: LIST
43060: ST_TO_ADDR
43061: GO 43205
// begin if result [ result ] [ 2 ] < tmp then
43063: LD_VAR 0 6
43067: PUSH
43068: LD_VAR 0 6
43072: ARRAY
43073: PUSH
43074: LD_INT 2
43076: ARRAY
43077: PUSH
43078: LD_VAR 0 9
43082: LESS
43083: IFFALSE 43125
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43085: LD_ADDR_VAR 0 6
43089: PUSH
43090: LD_VAR 0 6
43094: PPUSH
43095: LD_VAR 0 6
43099: PUSH
43100: LD_INT 1
43102: PLUS
43103: PPUSH
43104: LD_VAR 0 7
43108: PUSH
43109: LD_VAR 0 9
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PPUSH
43118: CALL_OW 2
43122: ST_TO_ADDR
43123: GO 43205
// for j = 1 to result do
43125: LD_ADDR_VAR 0 8
43129: PUSH
43130: DOUBLE
43131: LD_INT 1
43133: DEC
43134: ST_TO_ADDR
43135: LD_VAR 0 6
43139: PUSH
43140: FOR_TO
43141: IFFALSE 43203
// begin if tmp < result [ j ] [ 2 ] then
43143: LD_VAR 0 9
43147: PUSH
43148: LD_VAR 0 6
43152: PUSH
43153: LD_VAR 0 8
43157: ARRAY
43158: PUSH
43159: LD_INT 2
43161: ARRAY
43162: LESS
43163: IFFALSE 43201
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43165: LD_ADDR_VAR 0 6
43169: PUSH
43170: LD_VAR 0 6
43174: PPUSH
43175: LD_VAR 0 8
43179: PPUSH
43180: LD_VAR 0 7
43184: PUSH
43185: LD_VAR 0 9
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PPUSH
43194: CALL_OW 2
43198: ST_TO_ADDR
// break ;
43199: GO 43203
// end ; end ;
43201: GO 43140
43203: POP
43204: POP
// end ; end ;
43205: GO 43004
43207: POP
43208: POP
// if result and not asc then
43209: LD_VAR 0 6
43213: PUSH
43214: LD_VAR 0 4
43218: NOT
43219: AND
43220: IFFALSE 43295
// begin tmp := result ;
43222: LD_ADDR_VAR 0 9
43226: PUSH
43227: LD_VAR 0 6
43231: ST_TO_ADDR
// for i = tmp downto 1 do
43232: LD_ADDR_VAR 0 7
43236: PUSH
43237: DOUBLE
43238: LD_VAR 0 9
43242: INC
43243: ST_TO_ADDR
43244: LD_INT 1
43246: PUSH
43247: FOR_DOWNTO
43248: IFFALSE 43293
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43250: LD_ADDR_VAR 0 6
43254: PUSH
43255: LD_VAR 0 6
43259: PPUSH
43260: LD_VAR 0 9
43264: PUSH
43265: LD_VAR 0 7
43269: MINUS
43270: PUSH
43271: LD_INT 1
43273: PLUS
43274: PPUSH
43275: LD_VAR 0 9
43279: PUSH
43280: LD_VAR 0 7
43284: ARRAY
43285: PPUSH
43286: CALL_OW 1
43290: ST_TO_ADDR
43291: GO 43247
43293: POP
43294: POP
// end ; tmp := [ ] ;
43295: LD_ADDR_VAR 0 9
43299: PUSH
43300: EMPTY
43301: ST_TO_ADDR
// if mode then
43302: LD_VAR 0 5
43306: IFFALSE 43375
// begin for i = 1 to result do
43308: LD_ADDR_VAR 0 7
43312: PUSH
43313: DOUBLE
43314: LD_INT 1
43316: DEC
43317: ST_TO_ADDR
43318: LD_VAR 0 6
43322: PUSH
43323: FOR_TO
43324: IFFALSE 43363
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43326: LD_ADDR_VAR 0 9
43330: PUSH
43331: LD_VAR 0 9
43335: PPUSH
43336: LD_VAR 0 7
43340: PPUSH
43341: LD_VAR 0 6
43345: PUSH
43346: LD_VAR 0 7
43350: ARRAY
43351: PUSH
43352: LD_INT 1
43354: ARRAY
43355: PPUSH
43356: CALL_OW 1
43360: ST_TO_ADDR
43361: GO 43323
43363: POP
43364: POP
// result := tmp ;
43365: LD_ADDR_VAR 0 6
43369: PUSH
43370: LD_VAR 0 9
43374: ST_TO_ADDR
// end ; end ;
43375: LD_VAR 0 6
43379: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43380: LD_INT 0
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
43387: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43388: LD_ADDR_VAR 0 5
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: EMPTY
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// if not x or not y then
43410: LD_VAR 0 2
43414: NOT
43415: PUSH
43416: LD_VAR 0 3
43420: NOT
43421: OR
43422: IFFALSE 43426
// exit ;
43424: GO 45078
// if not range then
43426: LD_VAR 0 4
43430: NOT
43431: IFFALSE 43441
// range := 10 ;
43433: LD_ADDR_VAR 0 4
43437: PUSH
43438: LD_INT 10
43440: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43441: LD_ADDR_VAR 0 8
43445: PUSH
43446: LD_INT 81
43448: PUSH
43449: LD_VAR 0 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 92
43460: PUSH
43461: LD_VAR 0 2
43465: PUSH
43466: LD_VAR 0 3
43470: PUSH
43471: LD_VAR 0 4
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 3
43484: PUSH
43485: LD_INT 21
43487: PUSH
43488: LD_INT 3
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: PPUSH
43504: CALL_OW 69
43508: ST_TO_ADDR
// if not tmp then
43509: LD_VAR 0 8
43513: NOT
43514: IFFALSE 43518
// exit ;
43516: GO 45078
// for i in tmp do
43518: LD_ADDR_VAR 0 6
43522: PUSH
43523: LD_VAR 0 8
43527: PUSH
43528: FOR_IN
43529: IFFALSE 45053
// begin points := [ 0 , 0 , 0 ] ;
43531: LD_ADDR_VAR 0 9
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: LIST
43549: ST_TO_ADDR
// bpoints := 1 ;
43550: LD_ADDR_VAR 0 10
43554: PUSH
43555: LD_INT 1
43557: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43558: LD_VAR 0 6
43562: PPUSH
43563: CALL_OW 247
43567: PUSH
43568: LD_INT 1
43570: DOUBLE
43571: EQUAL
43572: IFTRUE 43576
43574: GO 44154
43576: POP
// begin if GetClass ( i ) = 1 then
43577: LD_VAR 0 6
43581: PPUSH
43582: CALL_OW 257
43586: PUSH
43587: LD_INT 1
43589: EQUAL
43590: IFFALSE 43611
// points := [ 10 , 5 , 3 ] ;
43592: LD_ADDR_VAR 0 9
43596: PUSH
43597: LD_INT 10
43599: PUSH
43600: LD_INT 5
43602: PUSH
43603: LD_INT 3
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43611: LD_VAR 0 6
43615: PPUSH
43616: CALL_OW 257
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 3
43626: PUSH
43627: LD_INT 4
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: IN
43635: IFFALSE 43656
// points := [ 3 , 2 , 1 ] ;
43637: LD_ADDR_VAR 0 9
43641: PUSH
43642: LD_INT 3
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43656: LD_VAR 0 6
43660: PPUSH
43661: CALL_OW 257
43665: PUSH
43666: LD_INT 5
43668: EQUAL
43669: IFFALSE 43690
// points := [ 130 , 5 , 2 ] ;
43671: LD_ADDR_VAR 0 9
43675: PUSH
43676: LD_INT 130
43678: PUSH
43679: LD_INT 5
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43690: LD_VAR 0 6
43694: PPUSH
43695: CALL_OW 257
43699: PUSH
43700: LD_INT 8
43702: EQUAL
43703: IFFALSE 43724
// points := [ 35 , 35 , 30 ] ;
43705: LD_ADDR_VAR 0 9
43709: PUSH
43710: LD_INT 35
43712: PUSH
43713: LD_INT 35
43715: PUSH
43716: LD_INT 30
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: LIST
43723: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43724: LD_VAR 0 6
43728: PPUSH
43729: CALL_OW 257
43733: PUSH
43734: LD_INT 9
43736: EQUAL
43737: IFFALSE 43758
// points := [ 20 , 55 , 40 ] ;
43739: LD_ADDR_VAR 0 9
43743: PUSH
43744: LD_INT 20
43746: PUSH
43747: LD_INT 55
43749: PUSH
43750: LD_INT 40
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43758: LD_VAR 0 6
43762: PPUSH
43763: CALL_OW 257
43767: PUSH
43768: LD_INT 12
43770: PUSH
43771: LD_INT 16
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: IN
43778: IFFALSE 43799
// points := [ 5 , 3 , 2 ] ;
43780: LD_ADDR_VAR 0 9
43784: PUSH
43785: LD_INT 5
43787: PUSH
43788: LD_INT 3
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43799: LD_VAR 0 6
43803: PPUSH
43804: CALL_OW 257
43808: PUSH
43809: LD_INT 17
43811: EQUAL
43812: IFFALSE 43833
// points := [ 100 , 50 , 75 ] ;
43814: LD_ADDR_VAR 0 9
43818: PUSH
43819: LD_INT 100
43821: PUSH
43822: LD_INT 50
43824: PUSH
43825: LD_INT 75
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43833: LD_VAR 0 6
43837: PPUSH
43838: CALL_OW 257
43842: PUSH
43843: LD_INT 15
43845: EQUAL
43846: IFFALSE 43867
// points := [ 10 , 5 , 3 ] ;
43848: LD_ADDR_VAR 0 9
43852: PUSH
43853: LD_INT 10
43855: PUSH
43856: LD_INT 5
43858: PUSH
43859: LD_INT 3
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43867: LD_VAR 0 6
43871: PPUSH
43872: CALL_OW 257
43876: PUSH
43877: LD_INT 14
43879: EQUAL
43880: IFFALSE 43901
// points := [ 10 , 0 , 0 ] ;
43882: LD_ADDR_VAR 0 9
43886: PUSH
43887: LD_INT 10
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43901: LD_VAR 0 6
43905: PPUSH
43906: CALL_OW 257
43910: PUSH
43911: LD_INT 11
43913: EQUAL
43914: IFFALSE 43935
// points := [ 30 , 10 , 5 ] ;
43916: LD_ADDR_VAR 0 9
43920: PUSH
43921: LD_INT 30
43923: PUSH
43924: LD_INT 10
43926: PUSH
43927: LD_INT 5
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43935: LD_VAR 0 1
43939: PPUSH
43940: LD_INT 5
43942: PPUSH
43943: CALL_OW 321
43947: PUSH
43948: LD_INT 2
43950: EQUAL
43951: IFFALSE 43968
// bpoints := bpoints * 1.8 ;
43953: LD_ADDR_VAR 0 10
43957: PUSH
43958: LD_VAR 0 10
43962: PUSH
43963: LD_REAL  1.80000000000000E+0000
43966: MUL
43967: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43968: LD_VAR 0 6
43972: PPUSH
43973: CALL_OW 257
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: LD_INT 3
43986: PUSH
43987: LD_INT 4
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: IN
43996: PUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: LD_INT 51
44004: PPUSH
44005: CALL_OW 321
44009: PUSH
44010: LD_INT 2
44012: EQUAL
44013: AND
44014: IFFALSE 44031
// bpoints := bpoints * 1.2 ;
44016: LD_ADDR_VAR 0 10
44020: PUSH
44021: LD_VAR 0 10
44025: PUSH
44026: LD_REAL  1.20000000000000E+0000
44029: MUL
44030: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44031: LD_VAR 0 6
44035: PPUSH
44036: CALL_OW 257
44040: PUSH
44041: LD_INT 5
44043: PUSH
44044: LD_INT 7
44046: PUSH
44047: LD_INT 9
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: LIST
44054: IN
44055: PUSH
44056: LD_VAR 0 1
44060: PPUSH
44061: LD_INT 52
44063: PPUSH
44064: CALL_OW 321
44068: PUSH
44069: LD_INT 2
44071: EQUAL
44072: AND
44073: IFFALSE 44090
// bpoints := bpoints * 1.5 ;
44075: LD_ADDR_VAR 0 10
44079: PUSH
44080: LD_VAR 0 10
44084: PUSH
44085: LD_REAL  1.50000000000000E+0000
44088: MUL
44089: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44090: LD_VAR 0 1
44094: PPUSH
44095: LD_INT 66
44097: PPUSH
44098: CALL_OW 321
44102: PUSH
44103: LD_INT 2
44105: EQUAL
44106: IFFALSE 44123
// bpoints := bpoints * 1.1 ;
44108: LD_ADDR_VAR 0 10
44112: PUSH
44113: LD_VAR 0 10
44117: PUSH
44118: LD_REAL  1.10000000000000E+0000
44121: MUL
44122: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44123: LD_ADDR_VAR 0 10
44127: PUSH
44128: LD_VAR 0 10
44132: PUSH
44133: LD_VAR 0 6
44137: PPUSH
44138: LD_INT 1
44140: PPUSH
44141: CALL_OW 259
44145: PUSH
44146: LD_REAL  1.15000000000000E+0000
44149: MUL
44150: MUL
44151: ST_TO_ADDR
// end ; unit_vehicle :
44152: GO 44982
44154: LD_INT 2
44156: DOUBLE
44157: EQUAL
44158: IFTRUE 44162
44160: GO 44970
44162: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44163: LD_VAR 0 6
44167: PPUSH
44168: CALL_OW 264
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: LD_INT 42
44178: PUSH
44179: LD_INT 24
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: IN
44187: IFFALSE 44208
// points := [ 25 , 5 , 3 ] ;
44189: LD_ADDR_VAR 0 9
44193: PUSH
44194: LD_INT 25
44196: PUSH
44197: LD_INT 5
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: LIST
44207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44208: LD_VAR 0 6
44212: PPUSH
44213: CALL_OW 264
44217: PUSH
44218: LD_INT 4
44220: PUSH
44221: LD_INT 43
44223: PUSH
44224: LD_INT 25
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: IN
44232: IFFALSE 44253
// points := [ 40 , 15 , 5 ] ;
44234: LD_ADDR_VAR 0 9
44238: PUSH
44239: LD_INT 40
44241: PUSH
44242: LD_INT 15
44244: PUSH
44245: LD_INT 5
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44253: LD_VAR 0 6
44257: PPUSH
44258: CALL_OW 264
44262: PUSH
44263: LD_INT 3
44265: PUSH
44266: LD_INT 23
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: IN
44273: IFFALSE 44294
// points := [ 7 , 25 , 8 ] ;
44275: LD_ADDR_VAR 0 9
44279: PUSH
44280: LD_INT 7
44282: PUSH
44283: LD_INT 25
44285: PUSH
44286: LD_INT 8
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: LIST
44293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44294: LD_VAR 0 6
44298: PPUSH
44299: CALL_OW 264
44303: PUSH
44304: LD_INT 5
44306: PUSH
44307: LD_INT 27
44309: PUSH
44310: LD_INT 44
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: IN
44318: IFFALSE 44339
// points := [ 14 , 50 , 16 ] ;
44320: LD_ADDR_VAR 0 9
44324: PUSH
44325: LD_INT 14
44327: PUSH
44328: LD_INT 50
44330: PUSH
44331: LD_INT 16
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: LIST
44338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44339: LD_VAR 0 6
44343: PPUSH
44344: CALL_OW 264
44348: PUSH
44349: LD_INT 6
44351: PUSH
44352: LD_INT 46
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: IN
44359: IFFALSE 44380
// points := [ 32 , 120 , 70 ] ;
44361: LD_ADDR_VAR 0 9
44365: PUSH
44366: LD_INT 32
44368: PUSH
44369: LD_INT 120
44371: PUSH
44372: LD_INT 70
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44380: LD_VAR 0 6
44384: PPUSH
44385: CALL_OW 264
44389: PUSH
44390: LD_INT 7
44392: PUSH
44393: LD_INT 28
44395: PUSH
44396: LD_INT 45
44398: PUSH
44399: LD_EXP 37
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: IN
44410: IFFALSE 44431
// points := [ 35 , 20 , 45 ] ;
44412: LD_ADDR_VAR 0 9
44416: PUSH
44417: LD_INT 35
44419: PUSH
44420: LD_INT 20
44422: PUSH
44423: LD_INT 45
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: LIST
44430: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44431: LD_VAR 0 6
44435: PPUSH
44436: CALL_OW 264
44440: PUSH
44441: LD_INT 47
44443: PUSH
44444: EMPTY
44445: LIST
44446: IN
44447: IFFALSE 44468
// points := [ 67 , 45 , 75 ] ;
44449: LD_ADDR_VAR 0 9
44453: PUSH
44454: LD_INT 67
44456: PUSH
44457: LD_INT 45
44459: PUSH
44460: LD_INT 75
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44468: LD_VAR 0 6
44472: PPUSH
44473: CALL_OW 264
44477: PUSH
44478: LD_INT 26
44480: PUSH
44481: EMPTY
44482: LIST
44483: IN
44484: IFFALSE 44505
// points := [ 120 , 30 , 80 ] ;
44486: LD_ADDR_VAR 0 9
44490: PUSH
44491: LD_INT 120
44493: PUSH
44494: LD_INT 30
44496: PUSH
44497: LD_INT 80
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: LIST
44504: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44505: LD_VAR 0 6
44509: PPUSH
44510: CALL_OW 264
44514: PUSH
44515: LD_INT 22
44517: PUSH
44518: EMPTY
44519: LIST
44520: IN
44521: IFFALSE 44542
// points := [ 40 , 1 , 1 ] ;
44523: LD_ADDR_VAR 0 9
44527: PUSH
44528: LD_INT 40
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44542: LD_VAR 0 6
44546: PPUSH
44547: CALL_OW 264
44551: PUSH
44552: LD_INT 29
44554: PUSH
44555: EMPTY
44556: LIST
44557: IN
44558: IFFALSE 44579
// points := [ 70 , 200 , 400 ] ;
44560: LD_ADDR_VAR 0 9
44564: PUSH
44565: LD_INT 70
44567: PUSH
44568: LD_INT 200
44570: PUSH
44571: LD_INT 400
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: LIST
44578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44579: LD_VAR 0 6
44583: PPUSH
44584: CALL_OW 264
44588: PUSH
44589: LD_INT 14
44591: PUSH
44592: LD_INT 53
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: IN
44599: IFFALSE 44620
// points := [ 40 , 10 , 20 ] ;
44601: LD_ADDR_VAR 0 9
44605: PUSH
44606: LD_INT 40
44608: PUSH
44609: LD_INT 10
44611: PUSH
44612: LD_INT 20
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44620: LD_VAR 0 6
44624: PPUSH
44625: CALL_OW 264
44629: PUSH
44630: LD_INT 9
44632: PUSH
44633: EMPTY
44634: LIST
44635: IN
44636: IFFALSE 44657
// points := [ 5 , 70 , 20 ] ;
44638: LD_ADDR_VAR 0 9
44642: PUSH
44643: LD_INT 5
44645: PUSH
44646: LD_INT 70
44648: PUSH
44649: LD_INT 20
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: LIST
44656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44657: LD_VAR 0 6
44661: PPUSH
44662: CALL_OW 264
44666: PUSH
44667: LD_INT 10
44669: PUSH
44670: EMPTY
44671: LIST
44672: IN
44673: IFFALSE 44694
// points := [ 35 , 110 , 70 ] ;
44675: LD_ADDR_VAR 0 9
44679: PUSH
44680: LD_INT 35
44682: PUSH
44683: LD_INT 110
44685: PUSH
44686: LD_INT 70
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44694: LD_VAR 0 6
44698: PPUSH
44699: CALL_OW 265
44703: PUSH
44704: LD_INT 25
44706: EQUAL
44707: IFFALSE 44728
// points := [ 80 , 65 , 100 ] ;
44709: LD_ADDR_VAR 0 9
44713: PUSH
44714: LD_INT 80
44716: PUSH
44717: LD_INT 65
44719: PUSH
44720: LD_INT 100
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44728: LD_VAR 0 6
44732: PPUSH
44733: CALL_OW 263
44737: PUSH
44738: LD_INT 1
44740: EQUAL
44741: IFFALSE 44776
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44743: LD_ADDR_VAR 0 10
44747: PUSH
44748: LD_VAR 0 10
44752: PUSH
44753: LD_VAR 0 6
44757: PPUSH
44758: CALL_OW 311
44762: PPUSH
44763: LD_INT 3
44765: PPUSH
44766: CALL_OW 259
44770: PUSH
44771: LD_INT 4
44773: MUL
44774: MUL
44775: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44776: LD_VAR 0 6
44780: PPUSH
44781: CALL_OW 263
44785: PUSH
44786: LD_INT 2
44788: EQUAL
44789: IFFALSE 44840
// begin j := IsControledBy ( i ) ;
44791: LD_ADDR_VAR 0 7
44795: PUSH
44796: LD_VAR 0 6
44800: PPUSH
44801: CALL_OW 312
44805: ST_TO_ADDR
// if j then
44806: LD_VAR 0 7
44810: IFFALSE 44840
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44812: LD_ADDR_VAR 0 10
44816: PUSH
44817: LD_VAR 0 10
44821: PUSH
44822: LD_VAR 0 7
44826: PPUSH
44827: LD_INT 3
44829: PPUSH
44830: CALL_OW 259
44834: PUSH
44835: LD_INT 3
44837: MUL
44838: MUL
44839: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44840: LD_VAR 0 6
44844: PPUSH
44845: CALL_OW 264
44849: PUSH
44850: LD_INT 5
44852: PUSH
44853: LD_INT 6
44855: PUSH
44856: LD_INT 46
44858: PUSH
44859: LD_INT 44
44861: PUSH
44862: LD_INT 47
44864: PUSH
44865: LD_INT 45
44867: PUSH
44868: LD_INT 28
44870: PUSH
44871: LD_INT 7
44873: PUSH
44874: LD_INT 27
44876: PUSH
44877: LD_INT 29
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: IN
44892: PUSH
44893: LD_VAR 0 1
44897: PPUSH
44898: LD_INT 52
44900: PPUSH
44901: CALL_OW 321
44905: PUSH
44906: LD_INT 2
44908: EQUAL
44909: AND
44910: IFFALSE 44927
// bpoints := bpoints * 1.2 ;
44912: LD_ADDR_VAR 0 10
44916: PUSH
44917: LD_VAR 0 10
44921: PUSH
44922: LD_REAL  1.20000000000000E+0000
44925: MUL
44926: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44927: LD_VAR 0 6
44931: PPUSH
44932: CALL_OW 264
44936: PUSH
44937: LD_INT 6
44939: PUSH
44940: LD_INT 46
44942: PUSH
44943: LD_INT 47
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: IN
44951: IFFALSE 44968
// bpoints := bpoints * 1.2 ;
44953: LD_ADDR_VAR 0 10
44957: PUSH
44958: LD_VAR 0 10
44962: PUSH
44963: LD_REAL  1.20000000000000E+0000
44966: MUL
44967: ST_TO_ADDR
// end ; unit_building :
44968: GO 44982
44970: LD_INT 3
44972: DOUBLE
44973: EQUAL
44974: IFTRUE 44978
44976: GO 44981
44978: POP
// ; end ;
44979: GO 44982
44981: POP
// for j = 1 to 3 do
44982: LD_ADDR_VAR 0 7
44986: PUSH
44987: DOUBLE
44988: LD_INT 1
44990: DEC
44991: ST_TO_ADDR
44992: LD_INT 3
44994: PUSH
44995: FOR_TO
44996: IFFALSE 45049
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44998: LD_ADDR_VAR 0 5
45002: PUSH
45003: LD_VAR 0 5
45007: PPUSH
45008: LD_VAR 0 7
45012: PPUSH
45013: LD_VAR 0 5
45017: PUSH
45018: LD_VAR 0 7
45022: ARRAY
45023: PUSH
45024: LD_VAR 0 9
45028: PUSH
45029: LD_VAR 0 7
45033: ARRAY
45034: PUSH
45035: LD_VAR 0 10
45039: MUL
45040: PLUS
45041: PPUSH
45042: CALL_OW 1
45046: ST_TO_ADDR
45047: GO 44995
45049: POP
45050: POP
// end ;
45051: GO 43528
45053: POP
45054: POP
// result := Replace ( result , 4 , tmp ) ;
45055: LD_ADDR_VAR 0 5
45059: PUSH
45060: LD_VAR 0 5
45064: PPUSH
45065: LD_INT 4
45067: PPUSH
45068: LD_VAR 0 8
45072: PPUSH
45073: CALL_OW 1
45077: ST_TO_ADDR
// end ;
45078: LD_VAR 0 5
45082: RET
// export function DangerAtRange ( unit , range ) ; begin
45083: LD_INT 0
45085: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45086: LD_ADDR_VAR 0 3
45090: PUSH
45091: LD_VAR 0 1
45095: PPUSH
45096: CALL_OW 255
45100: PPUSH
45101: LD_VAR 0 1
45105: PPUSH
45106: CALL_OW 250
45110: PPUSH
45111: LD_VAR 0 1
45115: PPUSH
45116: CALL_OW 251
45120: PPUSH
45121: LD_VAR 0 2
45125: PPUSH
45126: CALL 43380 0 4
45130: ST_TO_ADDR
// end ;
45131: LD_VAR 0 3
45135: RET
// export function DangerInArea ( side , area ) ; begin
45136: LD_INT 0
45138: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45139: LD_ADDR_VAR 0 3
45143: PUSH
45144: LD_VAR 0 2
45148: PPUSH
45149: LD_INT 81
45151: PUSH
45152: LD_VAR 0 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PPUSH
45161: CALL_OW 70
45165: ST_TO_ADDR
// end ;
45166: LD_VAR 0 3
45170: RET
// export function IsExtension ( b ) ; begin
45171: LD_INT 0
45173: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45174: LD_ADDR_VAR 0 2
45178: PUSH
45179: LD_VAR 0 1
45183: PUSH
45184: LD_INT 23
45186: PUSH
45187: LD_INT 20
45189: PUSH
45190: LD_INT 22
45192: PUSH
45193: LD_INT 17
45195: PUSH
45196: LD_INT 24
45198: PUSH
45199: LD_INT 21
45201: PUSH
45202: LD_INT 19
45204: PUSH
45205: LD_INT 16
45207: PUSH
45208: LD_INT 25
45210: PUSH
45211: LD_INT 18
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: IN
45226: ST_TO_ADDR
// end ;
45227: LD_VAR 0 2
45231: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45232: LD_INT 0
45234: PPUSH
45235: PPUSH
45236: PPUSH
// result := [ ] ;
45237: LD_ADDR_VAR 0 4
45241: PUSH
45242: EMPTY
45243: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45244: LD_ADDR_VAR 0 5
45248: PUSH
45249: LD_VAR 0 2
45253: PPUSH
45254: LD_INT 21
45256: PUSH
45257: LD_INT 3
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PPUSH
45264: CALL_OW 70
45268: ST_TO_ADDR
// if not tmp then
45269: LD_VAR 0 5
45273: NOT
45274: IFFALSE 45278
// exit ;
45276: GO 45342
// if checkLink then
45278: LD_VAR 0 3
45282: IFFALSE 45332
// begin for i in tmp do
45284: LD_ADDR_VAR 0 6
45288: PUSH
45289: LD_VAR 0 5
45293: PUSH
45294: FOR_IN
45295: IFFALSE 45330
// if GetBase ( i ) <> base then
45297: LD_VAR 0 6
45301: PPUSH
45302: CALL_OW 274
45306: PUSH
45307: LD_VAR 0 1
45311: NONEQUAL
45312: IFFALSE 45328
// ComLinkToBase ( base , i ) ;
45314: LD_VAR 0 1
45318: PPUSH
45319: LD_VAR 0 6
45323: PPUSH
45324: CALL_OW 169
45328: GO 45294
45330: POP
45331: POP
// end ; result := tmp ;
45332: LD_ADDR_VAR 0 4
45336: PUSH
45337: LD_VAR 0 5
45341: ST_TO_ADDR
// end ;
45342: LD_VAR 0 4
45346: RET
// export function ComComplete ( units , b ) ; var i ; begin
45347: LD_INT 0
45349: PPUSH
45350: PPUSH
// if not units then
45351: LD_VAR 0 1
45355: NOT
45356: IFFALSE 45360
// exit ;
45358: GO 45450
// for i in units do
45360: LD_ADDR_VAR 0 4
45364: PUSH
45365: LD_VAR 0 1
45369: PUSH
45370: FOR_IN
45371: IFFALSE 45448
// if BuildingStatus ( b ) = bs_build then
45373: LD_VAR 0 2
45377: PPUSH
45378: CALL_OW 461
45382: PUSH
45383: LD_INT 1
45385: EQUAL
45386: IFFALSE 45446
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45388: LD_VAR 0 4
45392: PPUSH
45393: LD_STRING h
45395: PUSH
45396: LD_VAR 0 2
45400: PPUSH
45401: CALL_OW 250
45405: PUSH
45406: LD_VAR 0 2
45410: PPUSH
45411: CALL_OW 251
45415: PUSH
45416: LD_VAR 0 2
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: PUSH
45439: EMPTY
45440: LIST
45441: PPUSH
45442: CALL_OW 446
45446: GO 45370
45448: POP
45449: POP
// end ;
45450: LD_VAR 0 3
45454: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45455: LD_INT 0
45457: PPUSH
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45463: LD_VAR 0 1
45467: NOT
45468: PUSH
45469: LD_VAR 0 1
45473: PPUSH
45474: CALL_OW 263
45478: PUSH
45479: LD_INT 2
45481: NONEQUAL
45482: OR
45483: IFFALSE 45487
// exit ;
45485: GO 45803
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45487: LD_ADDR_VAR 0 6
45491: PUSH
45492: LD_INT 22
45494: PUSH
45495: LD_VAR 0 1
45499: PPUSH
45500: CALL_OW 255
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 30
45514: PUSH
45515: LD_INT 36
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 34
45524: PUSH
45525: LD_INT 31
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: LIST
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PPUSH
45541: CALL_OW 69
45545: ST_TO_ADDR
// if not tmp then
45546: LD_VAR 0 6
45550: NOT
45551: IFFALSE 45555
// exit ;
45553: GO 45803
// result := [ ] ;
45555: LD_ADDR_VAR 0 2
45559: PUSH
45560: EMPTY
45561: ST_TO_ADDR
// for i in tmp do
45562: LD_ADDR_VAR 0 3
45566: PUSH
45567: LD_VAR 0 6
45571: PUSH
45572: FOR_IN
45573: IFFALSE 45644
// begin t := UnitsInside ( i ) ;
45575: LD_ADDR_VAR 0 4
45579: PUSH
45580: LD_VAR 0 3
45584: PPUSH
45585: CALL_OW 313
45589: ST_TO_ADDR
// if t then
45590: LD_VAR 0 4
45594: IFFALSE 45642
// for j in t do
45596: LD_ADDR_VAR 0 7
45600: PUSH
45601: LD_VAR 0 4
45605: PUSH
45606: FOR_IN
45607: IFFALSE 45640
// result := Replace ( result , result + 1 , j ) ;
45609: LD_ADDR_VAR 0 2
45613: PUSH
45614: LD_VAR 0 2
45618: PPUSH
45619: LD_VAR 0 2
45623: PUSH
45624: LD_INT 1
45626: PLUS
45627: PPUSH
45628: LD_VAR 0 7
45632: PPUSH
45633: CALL_OW 1
45637: ST_TO_ADDR
45638: GO 45606
45640: POP
45641: POP
// end ;
45642: GO 45572
45644: POP
45645: POP
// if not result then
45646: LD_VAR 0 2
45650: NOT
45651: IFFALSE 45655
// exit ;
45653: GO 45803
// mech := result [ 1 ] ;
45655: LD_ADDR_VAR 0 5
45659: PUSH
45660: LD_VAR 0 2
45664: PUSH
45665: LD_INT 1
45667: ARRAY
45668: ST_TO_ADDR
// if result > 1 then
45669: LD_VAR 0 2
45673: PUSH
45674: LD_INT 1
45676: GREATER
45677: IFFALSE 45789
// begin for i = 2 to result do
45679: LD_ADDR_VAR 0 3
45683: PUSH
45684: DOUBLE
45685: LD_INT 2
45687: DEC
45688: ST_TO_ADDR
45689: LD_VAR 0 2
45693: PUSH
45694: FOR_TO
45695: IFFALSE 45787
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45697: LD_ADDR_VAR 0 4
45701: PUSH
45702: LD_VAR 0 2
45706: PUSH
45707: LD_VAR 0 3
45711: ARRAY
45712: PPUSH
45713: LD_INT 3
45715: PPUSH
45716: CALL_OW 259
45720: PUSH
45721: LD_VAR 0 2
45725: PUSH
45726: LD_VAR 0 3
45730: ARRAY
45731: PPUSH
45732: CALL_OW 432
45736: MINUS
45737: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45738: LD_VAR 0 4
45742: PUSH
45743: LD_VAR 0 5
45747: PPUSH
45748: LD_INT 3
45750: PPUSH
45751: CALL_OW 259
45755: PUSH
45756: LD_VAR 0 5
45760: PPUSH
45761: CALL_OW 432
45765: MINUS
45766: GREATEREQUAL
45767: IFFALSE 45785
// mech := result [ i ] ;
45769: LD_ADDR_VAR 0 5
45773: PUSH
45774: LD_VAR 0 2
45778: PUSH
45779: LD_VAR 0 3
45783: ARRAY
45784: ST_TO_ADDR
// end ;
45785: GO 45694
45787: POP
45788: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45789: LD_VAR 0 1
45793: PPUSH
45794: LD_VAR 0 5
45798: PPUSH
45799: CALL_OW 135
// end ;
45803: LD_VAR 0 2
45807: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45808: LD_INT 0
45810: PPUSH
45811: PPUSH
45812: PPUSH
45813: PPUSH
45814: PPUSH
45815: PPUSH
45816: PPUSH
45817: PPUSH
45818: PPUSH
45819: PPUSH
45820: PPUSH
45821: PPUSH
45822: PPUSH
// result := [ ] ;
45823: LD_ADDR_VAR 0 7
45827: PUSH
45828: EMPTY
45829: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45830: LD_VAR 0 1
45834: PPUSH
45835: CALL_OW 266
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: IN
45850: NOT
45851: IFFALSE 45855
// exit ;
45853: GO 47489
// if name then
45855: LD_VAR 0 3
45859: IFFALSE 45875
// SetBName ( base_dep , name ) ;
45861: LD_VAR 0 1
45865: PPUSH
45866: LD_VAR 0 3
45870: PPUSH
45871: CALL_OW 500
// base := GetBase ( base_dep ) ;
45875: LD_ADDR_VAR 0 15
45879: PUSH
45880: LD_VAR 0 1
45884: PPUSH
45885: CALL_OW 274
45889: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45890: LD_ADDR_VAR 0 16
45894: PUSH
45895: LD_VAR 0 1
45899: PPUSH
45900: CALL_OW 255
45904: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45905: LD_ADDR_VAR 0 17
45909: PUSH
45910: LD_VAR 0 1
45914: PPUSH
45915: CALL_OW 248
45919: ST_TO_ADDR
// if sources then
45920: LD_VAR 0 5
45924: IFFALSE 45971
// for i = 1 to 3 do
45926: LD_ADDR_VAR 0 8
45930: PUSH
45931: DOUBLE
45932: LD_INT 1
45934: DEC
45935: ST_TO_ADDR
45936: LD_INT 3
45938: PUSH
45939: FOR_TO
45940: IFFALSE 45969
// AddResourceType ( base , i , sources [ i ] ) ;
45942: LD_VAR 0 15
45946: PPUSH
45947: LD_VAR 0 8
45951: PPUSH
45952: LD_VAR 0 5
45956: PUSH
45957: LD_VAR 0 8
45961: ARRAY
45962: PPUSH
45963: CALL_OW 276
45967: GO 45939
45969: POP
45970: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45971: LD_ADDR_VAR 0 18
45975: PUSH
45976: LD_VAR 0 15
45980: PPUSH
45981: LD_VAR 0 2
45985: PPUSH
45986: LD_INT 1
45988: PPUSH
45989: CALL 45232 0 3
45993: ST_TO_ADDR
// InitHc ;
45994: CALL_OW 19
// InitUc ;
45998: CALL_OW 18
// uc_side := side ;
46002: LD_ADDR_OWVAR 20
46006: PUSH
46007: LD_VAR 0 16
46011: ST_TO_ADDR
// uc_nation := nation ;
46012: LD_ADDR_OWVAR 21
46016: PUSH
46017: LD_VAR 0 17
46021: ST_TO_ADDR
// if buildings then
46022: LD_VAR 0 18
46026: IFFALSE 47348
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46028: LD_ADDR_VAR 0 19
46032: PUSH
46033: LD_VAR 0 18
46037: PPUSH
46038: LD_INT 2
46040: PUSH
46041: LD_INT 30
46043: PUSH
46044: LD_INT 29
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 30
46053: PUSH
46054: LD_INT 30
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: LIST
46065: PPUSH
46066: CALL_OW 72
46070: ST_TO_ADDR
// if tmp then
46071: LD_VAR 0 19
46075: IFFALSE 46123
// for i in tmp do
46077: LD_ADDR_VAR 0 8
46081: PUSH
46082: LD_VAR 0 19
46086: PUSH
46087: FOR_IN
46088: IFFALSE 46121
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46090: LD_VAR 0 8
46094: PPUSH
46095: CALL_OW 250
46099: PPUSH
46100: LD_VAR 0 8
46104: PPUSH
46105: CALL_OW 251
46109: PPUSH
46110: LD_VAR 0 16
46114: PPUSH
46115: CALL_OW 441
46119: GO 46087
46121: POP
46122: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46123: LD_VAR 0 18
46127: PPUSH
46128: LD_INT 2
46130: PUSH
46131: LD_INT 30
46133: PUSH
46134: LD_INT 32
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 30
46143: PUSH
46144: LD_INT 33
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: PPUSH
46156: CALL_OW 72
46160: IFFALSE 46248
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46162: LD_ADDR_VAR 0 8
46166: PUSH
46167: LD_VAR 0 18
46171: PPUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 30
46177: PUSH
46178: LD_INT 32
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 30
46187: PUSH
46188: LD_INT 33
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: PPUSH
46200: CALL_OW 72
46204: PUSH
46205: FOR_IN
46206: IFFALSE 46246
// begin if not GetBWeapon ( i ) then
46208: LD_VAR 0 8
46212: PPUSH
46213: CALL_OW 269
46217: NOT
46218: IFFALSE 46244
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46220: LD_VAR 0 8
46224: PPUSH
46225: LD_VAR 0 8
46229: PPUSH
46230: LD_VAR 0 2
46234: PPUSH
46235: CALL 47494 0 2
46239: PPUSH
46240: CALL_OW 431
// end ;
46244: GO 46205
46246: POP
46247: POP
// end ; for i = 1 to personel do
46248: LD_ADDR_VAR 0 8
46252: PUSH
46253: DOUBLE
46254: LD_INT 1
46256: DEC
46257: ST_TO_ADDR
46258: LD_VAR 0 6
46262: PUSH
46263: FOR_TO
46264: IFFALSE 47328
// begin if i > 4 then
46266: LD_VAR 0 8
46270: PUSH
46271: LD_INT 4
46273: GREATER
46274: IFFALSE 46278
// break ;
46276: GO 47328
// case i of 1 :
46278: LD_VAR 0 8
46282: PUSH
46283: LD_INT 1
46285: DOUBLE
46286: EQUAL
46287: IFTRUE 46291
46289: GO 46371
46291: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46292: LD_ADDR_VAR 0 12
46296: PUSH
46297: LD_VAR 0 18
46301: PPUSH
46302: LD_INT 22
46304: PUSH
46305: LD_VAR 0 16
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 58
46316: PUSH
46317: EMPTY
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 30
46325: PUSH
46326: LD_INT 32
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 30
46335: PUSH
46336: LD_INT 4
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 30
46345: PUSH
46346: LD_INT 5
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: LIST
46363: PPUSH
46364: CALL_OW 72
46368: ST_TO_ADDR
46369: GO 46593
46371: LD_INT 2
46373: DOUBLE
46374: EQUAL
46375: IFTRUE 46379
46377: GO 46441
46379: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46380: LD_ADDR_VAR 0 12
46384: PUSH
46385: LD_VAR 0 18
46389: PPUSH
46390: LD_INT 22
46392: PUSH
46393: LD_VAR 0 16
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: LD_INT 30
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 30
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: LIST
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PPUSH
46434: CALL_OW 72
46438: ST_TO_ADDR
46439: GO 46593
46441: LD_INT 3
46443: DOUBLE
46444: EQUAL
46445: IFTRUE 46449
46447: GO 46511
46449: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46450: LD_ADDR_VAR 0 12
46454: PUSH
46455: LD_VAR 0 18
46459: PPUSH
46460: LD_INT 22
46462: PUSH
46463: LD_VAR 0 16
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 30
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 30
46487: PUSH
46488: LD_INT 3
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: LIST
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PPUSH
46504: CALL_OW 72
46508: ST_TO_ADDR
46509: GO 46593
46511: LD_INT 4
46513: DOUBLE
46514: EQUAL
46515: IFTRUE 46519
46517: GO 46592
46519: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46520: LD_ADDR_VAR 0 12
46524: PUSH
46525: LD_VAR 0 18
46529: PPUSH
46530: LD_INT 22
46532: PUSH
46533: LD_VAR 0 16
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 30
46547: PUSH
46548: LD_INT 6
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 30
46557: PUSH
46558: LD_INT 7
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 30
46567: PUSH
46568: LD_INT 8
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PPUSH
46585: CALL_OW 72
46589: ST_TO_ADDR
46590: GO 46593
46592: POP
// if i = 1 then
46593: LD_VAR 0 8
46597: PUSH
46598: LD_INT 1
46600: EQUAL
46601: IFFALSE 46712
// begin tmp := [ ] ;
46603: LD_ADDR_VAR 0 19
46607: PUSH
46608: EMPTY
46609: ST_TO_ADDR
// for j in f do
46610: LD_ADDR_VAR 0 9
46614: PUSH
46615: LD_VAR 0 12
46619: PUSH
46620: FOR_IN
46621: IFFALSE 46694
// if GetBType ( j ) = b_bunker then
46623: LD_VAR 0 9
46627: PPUSH
46628: CALL_OW 266
46632: PUSH
46633: LD_INT 32
46635: EQUAL
46636: IFFALSE 46663
// tmp := Insert ( tmp , 1 , j ) else
46638: LD_ADDR_VAR 0 19
46642: PUSH
46643: LD_VAR 0 19
46647: PPUSH
46648: LD_INT 1
46650: PPUSH
46651: LD_VAR 0 9
46655: PPUSH
46656: CALL_OW 2
46660: ST_TO_ADDR
46661: GO 46692
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46663: LD_ADDR_VAR 0 19
46667: PUSH
46668: LD_VAR 0 19
46672: PPUSH
46673: LD_VAR 0 19
46677: PUSH
46678: LD_INT 1
46680: PLUS
46681: PPUSH
46682: LD_VAR 0 9
46686: PPUSH
46687: CALL_OW 2
46691: ST_TO_ADDR
46692: GO 46620
46694: POP
46695: POP
// if tmp then
46696: LD_VAR 0 19
46700: IFFALSE 46712
// f := tmp ;
46702: LD_ADDR_VAR 0 12
46706: PUSH
46707: LD_VAR 0 19
46711: ST_TO_ADDR
// end ; x := personel [ i ] ;
46712: LD_ADDR_VAR 0 13
46716: PUSH
46717: LD_VAR 0 6
46721: PUSH
46722: LD_VAR 0 8
46726: ARRAY
46727: ST_TO_ADDR
// if x = - 1 then
46728: LD_VAR 0 13
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: EQUAL
46737: IFFALSE 46946
// begin for j in f do
46739: LD_ADDR_VAR 0 9
46743: PUSH
46744: LD_VAR 0 12
46748: PUSH
46749: FOR_IN
46750: IFFALSE 46942
// repeat InitHc ;
46752: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46756: LD_VAR 0 9
46760: PPUSH
46761: CALL_OW 266
46765: PUSH
46766: LD_INT 5
46768: EQUAL
46769: IFFALSE 46839
// begin if UnitsInside ( j ) < 3 then
46771: LD_VAR 0 9
46775: PPUSH
46776: CALL_OW 313
46780: PUSH
46781: LD_INT 3
46783: LESS
46784: IFFALSE 46820
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46786: LD_INT 0
46788: PPUSH
46789: LD_INT 5
46791: PUSH
46792: LD_INT 8
46794: PUSH
46795: LD_INT 9
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: PUSH
46803: LD_VAR 0 17
46807: ARRAY
46808: PPUSH
46809: LD_VAR 0 4
46813: PPUSH
46814: CALL_OW 380
46818: GO 46837
// PrepareHuman ( false , i , skill ) ;
46820: LD_INT 0
46822: PPUSH
46823: LD_VAR 0 8
46827: PPUSH
46828: LD_VAR 0 4
46832: PPUSH
46833: CALL_OW 380
// end else
46837: GO 46856
// PrepareHuman ( false , i , skill ) ;
46839: LD_INT 0
46841: PPUSH
46842: LD_VAR 0 8
46846: PPUSH
46847: LD_VAR 0 4
46851: PPUSH
46852: CALL_OW 380
// un := CreateHuman ;
46856: LD_ADDR_VAR 0 14
46860: PUSH
46861: CALL_OW 44
46865: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46866: LD_ADDR_VAR 0 7
46870: PUSH
46871: LD_VAR 0 7
46875: PPUSH
46876: LD_INT 1
46878: PPUSH
46879: LD_VAR 0 14
46883: PPUSH
46884: CALL_OW 2
46888: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46889: LD_VAR 0 14
46893: PPUSH
46894: LD_VAR 0 9
46898: PPUSH
46899: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46903: LD_VAR 0 9
46907: PPUSH
46908: CALL_OW 313
46912: PUSH
46913: LD_INT 6
46915: EQUAL
46916: PUSH
46917: LD_VAR 0 9
46921: PPUSH
46922: CALL_OW 266
46926: PUSH
46927: LD_INT 32
46929: PUSH
46930: LD_INT 31
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: IN
46937: OR
46938: IFFALSE 46752
46940: GO 46749
46942: POP
46943: POP
// end else
46944: GO 47326
// for j = 1 to x do
46946: LD_ADDR_VAR 0 9
46950: PUSH
46951: DOUBLE
46952: LD_INT 1
46954: DEC
46955: ST_TO_ADDR
46956: LD_VAR 0 13
46960: PUSH
46961: FOR_TO
46962: IFFALSE 47324
// begin InitHc ;
46964: CALL_OW 19
// if not f then
46968: LD_VAR 0 12
46972: NOT
46973: IFFALSE 47062
// begin PrepareHuman ( false , i , skill ) ;
46975: LD_INT 0
46977: PPUSH
46978: LD_VAR 0 8
46982: PPUSH
46983: LD_VAR 0 4
46987: PPUSH
46988: CALL_OW 380
// un := CreateHuman ;
46992: LD_ADDR_VAR 0 14
46996: PUSH
46997: CALL_OW 44
47001: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47002: LD_ADDR_VAR 0 7
47006: PUSH
47007: LD_VAR 0 7
47011: PPUSH
47012: LD_INT 1
47014: PPUSH
47015: LD_VAR 0 14
47019: PPUSH
47020: CALL_OW 2
47024: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47025: LD_VAR 0 14
47029: PPUSH
47030: LD_VAR 0 1
47034: PPUSH
47035: CALL_OW 250
47039: PPUSH
47040: LD_VAR 0 1
47044: PPUSH
47045: CALL_OW 251
47049: PPUSH
47050: LD_INT 10
47052: PPUSH
47053: LD_INT 0
47055: PPUSH
47056: CALL_OW 50
// continue ;
47060: GO 46961
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47062: LD_VAR 0 12
47066: PUSH
47067: LD_INT 1
47069: ARRAY
47070: PPUSH
47071: CALL_OW 313
47075: PUSH
47076: LD_VAR 0 12
47080: PUSH
47081: LD_INT 1
47083: ARRAY
47084: PPUSH
47085: CALL_OW 266
47089: PUSH
47090: LD_INT 32
47092: PUSH
47093: LD_INT 31
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: IN
47100: AND
47101: PUSH
47102: LD_VAR 0 12
47106: PUSH
47107: LD_INT 1
47109: ARRAY
47110: PPUSH
47111: CALL_OW 313
47115: PUSH
47116: LD_INT 6
47118: EQUAL
47119: OR
47120: IFFALSE 47140
// f := Delete ( f , 1 ) ;
47122: LD_ADDR_VAR 0 12
47126: PUSH
47127: LD_VAR 0 12
47131: PPUSH
47132: LD_INT 1
47134: PPUSH
47135: CALL_OW 3
47139: ST_TO_ADDR
// if not f then
47140: LD_VAR 0 12
47144: NOT
47145: IFFALSE 47163
// begin x := x + 2 ;
47147: LD_ADDR_VAR 0 13
47151: PUSH
47152: LD_VAR 0 13
47156: PUSH
47157: LD_INT 2
47159: PLUS
47160: ST_TO_ADDR
// continue ;
47161: GO 46961
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47163: LD_VAR 0 12
47167: PUSH
47168: LD_INT 1
47170: ARRAY
47171: PPUSH
47172: CALL_OW 266
47176: PUSH
47177: LD_INT 5
47179: EQUAL
47180: IFFALSE 47254
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47182: LD_VAR 0 12
47186: PUSH
47187: LD_INT 1
47189: ARRAY
47190: PPUSH
47191: CALL_OW 313
47195: PUSH
47196: LD_INT 3
47198: LESS
47199: IFFALSE 47235
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47201: LD_INT 0
47203: PPUSH
47204: LD_INT 5
47206: PUSH
47207: LD_INT 8
47209: PUSH
47210: LD_INT 9
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: PUSH
47218: LD_VAR 0 17
47222: ARRAY
47223: PPUSH
47224: LD_VAR 0 4
47228: PPUSH
47229: CALL_OW 380
47233: GO 47252
// PrepareHuman ( false , i , skill ) ;
47235: LD_INT 0
47237: PPUSH
47238: LD_VAR 0 8
47242: PPUSH
47243: LD_VAR 0 4
47247: PPUSH
47248: CALL_OW 380
// end else
47252: GO 47271
// PrepareHuman ( false , i , skill ) ;
47254: LD_INT 0
47256: PPUSH
47257: LD_VAR 0 8
47261: PPUSH
47262: LD_VAR 0 4
47266: PPUSH
47267: CALL_OW 380
// un := CreateHuman ;
47271: LD_ADDR_VAR 0 14
47275: PUSH
47276: CALL_OW 44
47280: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47281: LD_ADDR_VAR 0 7
47285: PUSH
47286: LD_VAR 0 7
47290: PPUSH
47291: LD_INT 1
47293: PPUSH
47294: LD_VAR 0 14
47298: PPUSH
47299: CALL_OW 2
47303: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47304: LD_VAR 0 14
47308: PPUSH
47309: LD_VAR 0 12
47313: PUSH
47314: LD_INT 1
47316: ARRAY
47317: PPUSH
47318: CALL_OW 52
// end ;
47322: GO 46961
47324: POP
47325: POP
// end ;
47326: GO 46263
47328: POP
47329: POP
// result := result ^ buildings ;
47330: LD_ADDR_VAR 0 7
47334: PUSH
47335: LD_VAR 0 7
47339: PUSH
47340: LD_VAR 0 18
47344: ADD
47345: ST_TO_ADDR
// end else
47346: GO 47489
// begin for i = 1 to personel do
47348: LD_ADDR_VAR 0 8
47352: PUSH
47353: DOUBLE
47354: LD_INT 1
47356: DEC
47357: ST_TO_ADDR
47358: LD_VAR 0 6
47362: PUSH
47363: FOR_TO
47364: IFFALSE 47487
// begin if i > 4 then
47366: LD_VAR 0 8
47370: PUSH
47371: LD_INT 4
47373: GREATER
47374: IFFALSE 47378
// break ;
47376: GO 47487
// x := personel [ i ] ;
47378: LD_ADDR_VAR 0 13
47382: PUSH
47383: LD_VAR 0 6
47387: PUSH
47388: LD_VAR 0 8
47392: ARRAY
47393: ST_TO_ADDR
// if x = - 1 then
47394: LD_VAR 0 13
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: EQUAL
47403: IFFALSE 47407
// continue ;
47405: GO 47363
// PrepareHuman ( false , i , skill ) ;
47407: LD_INT 0
47409: PPUSH
47410: LD_VAR 0 8
47414: PPUSH
47415: LD_VAR 0 4
47419: PPUSH
47420: CALL_OW 380
// un := CreateHuman ;
47424: LD_ADDR_VAR 0 14
47428: PUSH
47429: CALL_OW 44
47433: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47434: LD_VAR 0 14
47438: PPUSH
47439: LD_VAR 0 1
47443: PPUSH
47444: CALL_OW 250
47448: PPUSH
47449: LD_VAR 0 1
47453: PPUSH
47454: CALL_OW 251
47458: PPUSH
47459: LD_INT 10
47461: PPUSH
47462: LD_INT 0
47464: PPUSH
47465: CALL_OW 50
// result := result ^ un ;
47469: LD_ADDR_VAR 0 7
47473: PUSH
47474: LD_VAR 0 7
47478: PUSH
47479: LD_VAR 0 14
47483: ADD
47484: ST_TO_ADDR
// end ;
47485: GO 47363
47487: POP
47488: POP
// end ; end ;
47489: LD_VAR 0 7
47493: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47494: LD_INT 0
47496: PPUSH
47497: PPUSH
47498: PPUSH
47499: PPUSH
47500: PPUSH
47501: PPUSH
47502: PPUSH
47503: PPUSH
47504: PPUSH
47505: PPUSH
47506: PPUSH
47507: PPUSH
47508: PPUSH
47509: PPUSH
47510: PPUSH
47511: PPUSH
// result := false ;
47512: LD_ADDR_VAR 0 3
47516: PUSH
47517: LD_INT 0
47519: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47520: LD_VAR 0 1
47524: NOT
47525: PUSH
47526: LD_VAR 0 1
47530: PPUSH
47531: CALL_OW 266
47535: PUSH
47536: LD_INT 32
47538: PUSH
47539: LD_INT 33
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: IN
47546: NOT
47547: OR
47548: IFFALSE 47552
// exit ;
47550: GO 48661
// nat := GetNation ( tower ) ;
47552: LD_ADDR_VAR 0 12
47556: PUSH
47557: LD_VAR 0 1
47561: PPUSH
47562: CALL_OW 248
47566: ST_TO_ADDR
// side := GetSide ( tower ) ;
47567: LD_ADDR_VAR 0 16
47571: PUSH
47572: LD_VAR 0 1
47576: PPUSH
47577: CALL_OW 255
47581: ST_TO_ADDR
// x := GetX ( tower ) ;
47582: LD_ADDR_VAR 0 10
47586: PUSH
47587: LD_VAR 0 1
47591: PPUSH
47592: CALL_OW 250
47596: ST_TO_ADDR
// y := GetY ( tower ) ;
47597: LD_ADDR_VAR 0 11
47601: PUSH
47602: LD_VAR 0 1
47606: PPUSH
47607: CALL_OW 251
47611: ST_TO_ADDR
// if not x or not y then
47612: LD_VAR 0 10
47616: NOT
47617: PUSH
47618: LD_VAR 0 11
47622: NOT
47623: OR
47624: IFFALSE 47628
// exit ;
47626: GO 48661
// weapon := 0 ;
47628: LD_ADDR_VAR 0 18
47632: PUSH
47633: LD_INT 0
47635: ST_TO_ADDR
// fac_list := [ ] ;
47636: LD_ADDR_VAR 0 17
47640: PUSH
47641: EMPTY
47642: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47643: LD_ADDR_VAR 0 6
47647: PUSH
47648: LD_VAR 0 1
47652: PPUSH
47653: CALL_OW 274
47657: PPUSH
47658: LD_VAR 0 2
47662: PPUSH
47663: LD_INT 0
47665: PPUSH
47666: CALL 45232 0 3
47670: PPUSH
47671: LD_INT 30
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PPUSH
47681: CALL_OW 72
47685: ST_TO_ADDR
// if not factories then
47686: LD_VAR 0 6
47690: NOT
47691: IFFALSE 47695
// exit ;
47693: GO 48661
// for i in factories do
47695: LD_ADDR_VAR 0 8
47699: PUSH
47700: LD_VAR 0 6
47704: PUSH
47705: FOR_IN
47706: IFFALSE 47731
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47708: LD_ADDR_VAR 0 17
47712: PUSH
47713: LD_VAR 0 17
47717: PUSH
47718: LD_VAR 0 8
47722: PPUSH
47723: CALL_OW 478
47727: UNION
47728: ST_TO_ADDR
47729: GO 47705
47731: POP
47732: POP
// if not fac_list then
47733: LD_VAR 0 17
47737: NOT
47738: IFFALSE 47742
// exit ;
47740: GO 48661
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47742: LD_ADDR_VAR 0 5
47746: PUSH
47747: LD_INT 4
47749: PUSH
47750: LD_INT 5
47752: PUSH
47753: LD_INT 9
47755: PUSH
47756: LD_INT 10
47758: PUSH
47759: LD_INT 6
47761: PUSH
47762: LD_INT 7
47764: PUSH
47765: LD_INT 11
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 27
47779: PUSH
47780: LD_INT 28
47782: PUSH
47783: LD_INT 26
47785: PUSH
47786: LD_INT 30
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 43
47797: PUSH
47798: LD_INT 44
47800: PUSH
47801: LD_INT 46
47803: PUSH
47804: LD_INT 45
47806: PUSH
47807: LD_INT 47
47809: PUSH
47810: LD_INT 49
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: PUSH
47826: LD_VAR 0 12
47830: ARRAY
47831: ST_TO_ADDR
// list := list isect fac_list ;
47832: LD_ADDR_VAR 0 5
47836: PUSH
47837: LD_VAR 0 5
47841: PUSH
47842: LD_VAR 0 17
47846: ISECT
47847: ST_TO_ADDR
// if not list then
47848: LD_VAR 0 5
47852: NOT
47853: IFFALSE 47857
// exit ;
47855: GO 48661
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47857: LD_VAR 0 12
47861: PUSH
47862: LD_INT 3
47864: EQUAL
47865: PUSH
47866: LD_INT 49
47868: PUSH
47869: LD_VAR 0 5
47873: IN
47874: AND
47875: PUSH
47876: LD_INT 31
47878: PPUSH
47879: LD_VAR 0 16
47883: PPUSH
47884: CALL_OW 321
47888: PUSH
47889: LD_INT 2
47891: EQUAL
47892: AND
47893: IFFALSE 47953
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47895: LD_INT 22
47897: PUSH
47898: LD_VAR 0 16
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 35
47909: PUSH
47910: LD_INT 49
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 91
47919: PUSH
47920: LD_VAR 0 1
47924: PUSH
47925: LD_INT 10
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: LIST
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: PPUSH
47938: CALL_OW 69
47942: NOT
47943: IFFALSE 47953
// weapon := ru_time_lapser ;
47945: LD_ADDR_VAR 0 18
47949: PUSH
47950: LD_INT 49
47952: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47953: LD_VAR 0 12
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: IN
47968: PUSH
47969: LD_INT 11
47971: PUSH
47972: LD_VAR 0 5
47976: IN
47977: PUSH
47978: LD_INT 30
47980: PUSH
47981: LD_VAR 0 5
47985: IN
47986: OR
47987: AND
47988: PUSH
47989: LD_INT 6
47991: PPUSH
47992: LD_VAR 0 16
47996: PPUSH
47997: CALL_OW 321
48001: PUSH
48002: LD_INT 2
48004: EQUAL
48005: AND
48006: IFFALSE 48171
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48008: LD_INT 22
48010: PUSH
48011: LD_VAR 0 16
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 35
48025: PUSH
48026: LD_INT 11
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 35
48035: PUSH
48036: LD_INT 30
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 91
48050: PUSH
48051: LD_VAR 0 1
48055: PUSH
48056: LD_INT 18
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: PPUSH
48069: CALL_OW 69
48073: NOT
48074: PUSH
48075: LD_INT 22
48077: PUSH
48078: LD_VAR 0 16
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 30
48092: PUSH
48093: LD_INT 32
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 30
48102: PUSH
48103: LD_INT 33
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 91
48117: PUSH
48118: LD_VAR 0 1
48122: PUSH
48123: LD_INT 12
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: PPUSH
48139: CALL_OW 69
48143: PUSH
48144: LD_INT 2
48146: GREATER
48147: AND
48148: IFFALSE 48171
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48150: LD_ADDR_VAR 0 18
48154: PUSH
48155: LD_INT 11
48157: PUSH
48158: LD_INT 30
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_VAR 0 12
48169: ARRAY
48170: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48171: LD_VAR 0 18
48175: NOT
48176: PUSH
48177: LD_INT 40
48179: PPUSH
48180: LD_VAR 0 16
48184: PPUSH
48185: CALL_OW 321
48189: PUSH
48190: LD_INT 2
48192: EQUAL
48193: AND
48194: PUSH
48195: LD_INT 7
48197: PUSH
48198: LD_VAR 0 5
48202: IN
48203: PUSH
48204: LD_INT 28
48206: PUSH
48207: LD_VAR 0 5
48211: IN
48212: OR
48213: PUSH
48214: LD_INT 45
48216: PUSH
48217: LD_VAR 0 5
48221: IN
48222: OR
48223: AND
48224: IFFALSE 48478
// begin hex := GetHexInfo ( x , y ) ;
48226: LD_ADDR_VAR 0 4
48230: PUSH
48231: LD_VAR 0 10
48235: PPUSH
48236: LD_VAR 0 11
48240: PPUSH
48241: CALL_OW 546
48245: ST_TO_ADDR
// if hex [ 1 ] then
48246: LD_VAR 0 4
48250: PUSH
48251: LD_INT 1
48253: ARRAY
48254: IFFALSE 48258
// exit ;
48256: GO 48661
// height := hex [ 2 ] ;
48258: LD_ADDR_VAR 0 15
48262: PUSH
48263: LD_VAR 0 4
48267: PUSH
48268: LD_INT 2
48270: ARRAY
48271: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48272: LD_ADDR_VAR 0 14
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: LD_INT 5
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: ST_TO_ADDR
// for i in tmp do
48295: LD_ADDR_VAR 0 8
48299: PUSH
48300: LD_VAR 0 14
48304: PUSH
48305: FOR_IN
48306: IFFALSE 48476
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48308: LD_ADDR_VAR 0 9
48312: PUSH
48313: LD_VAR 0 10
48317: PPUSH
48318: LD_VAR 0 8
48322: PPUSH
48323: LD_INT 5
48325: PPUSH
48326: CALL_OW 272
48330: PUSH
48331: LD_VAR 0 11
48335: PPUSH
48336: LD_VAR 0 8
48340: PPUSH
48341: LD_INT 5
48343: PPUSH
48344: CALL_OW 273
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48353: LD_VAR 0 9
48357: PUSH
48358: LD_INT 1
48360: ARRAY
48361: PPUSH
48362: LD_VAR 0 9
48366: PUSH
48367: LD_INT 2
48369: ARRAY
48370: PPUSH
48371: CALL_OW 488
48375: IFFALSE 48474
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48377: LD_ADDR_VAR 0 4
48381: PUSH
48382: LD_VAR 0 9
48386: PUSH
48387: LD_INT 1
48389: ARRAY
48390: PPUSH
48391: LD_VAR 0 9
48395: PUSH
48396: LD_INT 2
48398: ARRAY
48399: PPUSH
48400: CALL_OW 546
48404: ST_TO_ADDR
// if hex [ 1 ] then
48405: LD_VAR 0 4
48409: PUSH
48410: LD_INT 1
48412: ARRAY
48413: IFFALSE 48417
// continue ;
48415: GO 48305
// h := hex [ 2 ] ;
48417: LD_ADDR_VAR 0 13
48421: PUSH
48422: LD_VAR 0 4
48426: PUSH
48427: LD_INT 2
48429: ARRAY
48430: ST_TO_ADDR
// if h + 7 < height then
48431: LD_VAR 0 13
48435: PUSH
48436: LD_INT 7
48438: PLUS
48439: PUSH
48440: LD_VAR 0 15
48444: LESS
48445: IFFALSE 48474
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48447: LD_ADDR_VAR 0 18
48451: PUSH
48452: LD_INT 7
48454: PUSH
48455: LD_INT 28
48457: PUSH
48458: LD_INT 45
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: PUSH
48466: LD_VAR 0 12
48470: ARRAY
48471: ST_TO_ADDR
// break ;
48472: GO 48476
// end ; end ; end ;
48474: GO 48305
48476: POP
48477: POP
// end ; if not weapon then
48478: LD_VAR 0 18
48482: NOT
48483: IFFALSE 48543
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48485: LD_ADDR_VAR 0 5
48489: PUSH
48490: LD_VAR 0 5
48494: PUSH
48495: LD_INT 11
48497: PUSH
48498: LD_INT 30
48500: PUSH
48501: LD_INT 49
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: LIST
48508: DIFF
48509: ST_TO_ADDR
// if not list then
48510: LD_VAR 0 5
48514: NOT
48515: IFFALSE 48519
// exit ;
48517: GO 48661
// weapon := list [ rand ( 1 , list ) ] ;
48519: LD_ADDR_VAR 0 18
48523: PUSH
48524: LD_VAR 0 5
48528: PUSH
48529: LD_INT 1
48531: PPUSH
48532: LD_VAR 0 5
48536: PPUSH
48537: CALL_OW 12
48541: ARRAY
48542: ST_TO_ADDR
// end ; if weapon then
48543: LD_VAR 0 18
48547: IFFALSE 48661
// begin tmp := CostOfWeapon ( weapon ) ;
48549: LD_ADDR_VAR 0 14
48553: PUSH
48554: LD_VAR 0 18
48558: PPUSH
48559: CALL_OW 451
48563: ST_TO_ADDR
// j := GetBase ( tower ) ;
48564: LD_ADDR_VAR 0 9
48568: PUSH
48569: LD_VAR 0 1
48573: PPUSH
48574: CALL_OW 274
48578: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48579: LD_VAR 0 9
48583: PPUSH
48584: LD_INT 1
48586: PPUSH
48587: CALL_OW 275
48591: PUSH
48592: LD_VAR 0 14
48596: PUSH
48597: LD_INT 1
48599: ARRAY
48600: GREATEREQUAL
48601: PUSH
48602: LD_VAR 0 9
48606: PPUSH
48607: LD_INT 2
48609: PPUSH
48610: CALL_OW 275
48614: PUSH
48615: LD_VAR 0 14
48619: PUSH
48620: LD_INT 2
48622: ARRAY
48623: GREATEREQUAL
48624: AND
48625: PUSH
48626: LD_VAR 0 9
48630: PPUSH
48631: LD_INT 3
48633: PPUSH
48634: CALL_OW 275
48638: PUSH
48639: LD_VAR 0 14
48643: PUSH
48644: LD_INT 3
48646: ARRAY
48647: GREATEREQUAL
48648: AND
48649: IFFALSE 48661
// result := weapon ;
48651: LD_ADDR_VAR 0 3
48655: PUSH
48656: LD_VAR 0 18
48660: ST_TO_ADDR
// end ; end ;
48661: LD_VAR 0 3
48665: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48666: LD_INT 0
48668: PPUSH
48669: PPUSH
// result := true ;
48670: LD_ADDR_VAR 0 3
48674: PUSH
48675: LD_INT 1
48677: ST_TO_ADDR
// if array1 = array2 then
48678: LD_VAR 0 1
48682: PUSH
48683: LD_VAR 0 2
48687: EQUAL
48688: IFFALSE 48748
// begin for i = 1 to array1 do
48690: LD_ADDR_VAR 0 4
48694: PUSH
48695: DOUBLE
48696: LD_INT 1
48698: DEC
48699: ST_TO_ADDR
48700: LD_VAR 0 1
48704: PUSH
48705: FOR_TO
48706: IFFALSE 48744
// if array1 [ i ] <> array2 [ i ] then
48708: LD_VAR 0 1
48712: PUSH
48713: LD_VAR 0 4
48717: ARRAY
48718: PUSH
48719: LD_VAR 0 2
48723: PUSH
48724: LD_VAR 0 4
48728: ARRAY
48729: NONEQUAL
48730: IFFALSE 48742
// begin result := false ;
48732: LD_ADDR_VAR 0 3
48736: PUSH
48737: LD_INT 0
48739: ST_TO_ADDR
// break ;
48740: GO 48744
// end ;
48742: GO 48705
48744: POP
48745: POP
// end else
48746: GO 48756
// result := false ;
48748: LD_ADDR_VAR 0 3
48752: PUSH
48753: LD_INT 0
48755: ST_TO_ADDR
// end ;
48756: LD_VAR 0 3
48760: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48761: LD_INT 0
48763: PPUSH
48764: PPUSH
// if not array1 or not array2 then
48765: LD_VAR 0 1
48769: NOT
48770: PUSH
48771: LD_VAR 0 2
48775: NOT
48776: OR
48777: IFFALSE 48781
// exit ;
48779: GO 48845
// result := true ;
48781: LD_ADDR_VAR 0 3
48785: PUSH
48786: LD_INT 1
48788: ST_TO_ADDR
// for i = 1 to array1 do
48789: LD_ADDR_VAR 0 4
48793: PUSH
48794: DOUBLE
48795: LD_INT 1
48797: DEC
48798: ST_TO_ADDR
48799: LD_VAR 0 1
48803: PUSH
48804: FOR_TO
48805: IFFALSE 48843
// if array1 [ i ] <> array2 [ i ] then
48807: LD_VAR 0 1
48811: PUSH
48812: LD_VAR 0 4
48816: ARRAY
48817: PUSH
48818: LD_VAR 0 2
48822: PUSH
48823: LD_VAR 0 4
48827: ARRAY
48828: NONEQUAL
48829: IFFALSE 48841
// begin result := false ;
48831: LD_ADDR_VAR 0 3
48835: PUSH
48836: LD_INT 0
48838: ST_TO_ADDR
// break ;
48839: GO 48843
// end ;
48841: GO 48804
48843: POP
48844: POP
// end ;
48845: LD_VAR 0 3
48849: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48850: LD_INT 0
48852: PPUSH
48853: PPUSH
48854: PPUSH
// pom := GetBase ( fac ) ;
48855: LD_ADDR_VAR 0 5
48859: PUSH
48860: LD_VAR 0 1
48864: PPUSH
48865: CALL_OW 274
48869: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48870: LD_ADDR_VAR 0 4
48874: PUSH
48875: LD_VAR 0 2
48879: PUSH
48880: LD_INT 1
48882: ARRAY
48883: PPUSH
48884: LD_VAR 0 2
48888: PUSH
48889: LD_INT 2
48891: ARRAY
48892: PPUSH
48893: LD_VAR 0 2
48897: PUSH
48898: LD_INT 3
48900: ARRAY
48901: PPUSH
48902: LD_VAR 0 2
48906: PUSH
48907: LD_INT 4
48909: ARRAY
48910: PPUSH
48911: CALL_OW 449
48915: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48916: LD_ADDR_VAR 0 3
48920: PUSH
48921: LD_VAR 0 5
48925: PPUSH
48926: LD_INT 1
48928: PPUSH
48929: CALL_OW 275
48933: PUSH
48934: LD_VAR 0 4
48938: PUSH
48939: LD_INT 1
48941: ARRAY
48942: GREATEREQUAL
48943: PUSH
48944: LD_VAR 0 5
48948: PPUSH
48949: LD_INT 2
48951: PPUSH
48952: CALL_OW 275
48956: PUSH
48957: LD_VAR 0 4
48961: PUSH
48962: LD_INT 2
48964: ARRAY
48965: GREATEREQUAL
48966: AND
48967: PUSH
48968: LD_VAR 0 5
48972: PPUSH
48973: LD_INT 3
48975: PPUSH
48976: CALL_OW 275
48980: PUSH
48981: LD_VAR 0 4
48985: PUSH
48986: LD_INT 3
48988: ARRAY
48989: GREATEREQUAL
48990: AND
48991: ST_TO_ADDR
// end ;
48992: LD_VAR 0 3
48996: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48997: LD_INT 0
48999: PPUSH
49000: PPUSH
49001: PPUSH
49002: PPUSH
// pom := GetBase ( building ) ;
49003: LD_ADDR_VAR 0 3
49007: PUSH
49008: LD_VAR 0 1
49012: PPUSH
49013: CALL_OW 274
49017: ST_TO_ADDR
// if not pom then
49018: LD_VAR 0 3
49022: NOT
49023: IFFALSE 49027
// exit ;
49025: GO 49197
// btype := GetBType ( building ) ;
49027: LD_ADDR_VAR 0 5
49031: PUSH
49032: LD_VAR 0 1
49036: PPUSH
49037: CALL_OW 266
49041: ST_TO_ADDR
// if btype = b_armoury then
49042: LD_VAR 0 5
49046: PUSH
49047: LD_INT 4
49049: EQUAL
49050: IFFALSE 49060
// btype := b_barracks ;
49052: LD_ADDR_VAR 0 5
49056: PUSH
49057: LD_INT 5
49059: ST_TO_ADDR
// if btype = b_depot then
49060: LD_VAR 0 5
49064: PUSH
49065: LD_INT 0
49067: EQUAL
49068: IFFALSE 49078
// btype := b_warehouse ;
49070: LD_ADDR_VAR 0 5
49074: PUSH
49075: LD_INT 1
49077: ST_TO_ADDR
// if btype = b_workshop then
49078: LD_VAR 0 5
49082: PUSH
49083: LD_INT 2
49085: EQUAL
49086: IFFALSE 49096
// btype := b_factory ;
49088: LD_ADDR_VAR 0 5
49092: PUSH
49093: LD_INT 3
49095: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49096: LD_ADDR_VAR 0 4
49100: PUSH
49101: LD_VAR 0 5
49105: PPUSH
49106: LD_VAR 0 1
49110: PPUSH
49111: CALL_OW 248
49115: PPUSH
49116: CALL_OW 450
49120: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49121: LD_ADDR_VAR 0 2
49125: PUSH
49126: LD_VAR 0 3
49130: PPUSH
49131: LD_INT 1
49133: PPUSH
49134: CALL_OW 275
49138: PUSH
49139: LD_VAR 0 4
49143: PUSH
49144: LD_INT 1
49146: ARRAY
49147: GREATEREQUAL
49148: PUSH
49149: LD_VAR 0 3
49153: PPUSH
49154: LD_INT 2
49156: PPUSH
49157: CALL_OW 275
49161: PUSH
49162: LD_VAR 0 4
49166: PUSH
49167: LD_INT 2
49169: ARRAY
49170: GREATEREQUAL
49171: AND
49172: PUSH
49173: LD_VAR 0 3
49177: PPUSH
49178: LD_INT 3
49180: PPUSH
49181: CALL_OW 275
49185: PUSH
49186: LD_VAR 0 4
49190: PUSH
49191: LD_INT 3
49193: ARRAY
49194: GREATEREQUAL
49195: AND
49196: ST_TO_ADDR
// end ;
49197: LD_VAR 0 2
49201: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49202: LD_INT 0
49204: PPUSH
49205: PPUSH
49206: PPUSH
// pom := GetBase ( building ) ;
49207: LD_ADDR_VAR 0 4
49211: PUSH
49212: LD_VAR 0 1
49216: PPUSH
49217: CALL_OW 274
49221: ST_TO_ADDR
// if not pom then
49222: LD_VAR 0 4
49226: NOT
49227: IFFALSE 49231
// exit ;
49229: GO 49332
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49231: LD_ADDR_VAR 0 5
49235: PUSH
49236: LD_VAR 0 2
49240: PPUSH
49241: LD_VAR 0 1
49245: PPUSH
49246: CALL_OW 248
49250: PPUSH
49251: CALL_OW 450
49255: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49256: LD_ADDR_VAR 0 3
49260: PUSH
49261: LD_VAR 0 4
49265: PPUSH
49266: LD_INT 1
49268: PPUSH
49269: CALL_OW 275
49273: PUSH
49274: LD_VAR 0 5
49278: PUSH
49279: LD_INT 1
49281: ARRAY
49282: GREATEREQUAL
49283: PUSH
49284: LD_VAR 0 4
49288: PPUSH
49289: LD_INT 2
49291: PPUSH
49292: CALL_OW 275
49296: PUSH
49297: LD_VAR 0 5
49301: PUSH
49302: LD_INT 2
49304: ARRAY
49305: GREATEREQUAL
49306: AND
49307: PUSH
49308: LD_VAR 0 4
49312: PPUSH
49313: LD_INT 3
49315: PPUSH
49316: CALL_OW 275
49320: PUSH
49321: LD_VAR 0 5
49325: PUSH
49326: LD_INT 3
49328: ARRAY
49329: GREATEREQUAL
49330: AND
49331: ST_TO_ADDR
// end ;
49332: LD_VAR 0 3
49336: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49337: LD_INT 0
49339: PPUSH
49340: PPUSH
49341: PPUSH
49342: PPUSH
49343: PPUSH
49344: PPUSH
49345: PPUSH
49346: PPUSH
49347: PPUSH
49348: PPUSH
49349: PPUSH
// result := false ;
49350: LD_ADDR_VAR 0 8
49354: PUSH
49355: LD_INT 0
49357: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49358: LD_VAR 0 5
49362: NOT
49363: PUSH
49364: LD_VAR 0 1
49368: NOT
49369: OR
49370: PUSH
49371: LD_VAR 0 2
49375: NOT
49376: OR
49377: PUSH
49378: LD_VAR 0 3
49382: NOT
49383: OR
49384: IFFALSE 49388
// exit ;
49386: GO 50202
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49388: LD_ADDR_VAR 0 14
49392: PUSH
49393: LD_VAR 0 1
49397: PPUSH
49398: LD_VAR 0 2
49402: PPUSH
49403: LD_VAR 0 3
49407: PPUSH
49408: LD_VAR 0 4
49412: PPUSH
49413: LD_VAR 0 5
49417: PUSH
49418: LD_INT 1
49420: ARRAY
49421: PPUSH
49422: CALL_OW 248
49426: PPUSH
49427: LD_INT 0
49429: PPUSH
49430: CALL 51439 0 6
49434: ST_TO_ADDR
// if not hexes then
49435: LD_VAR 0 14
49439: NOT
49440: IFFALSE 49444
// exit ;
49442: GO 50202
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49444: LD_ADDR_VAR 0 17
49448: PUSH
49449: LD_VAR 0 5
49453: PPUSH
49454: LD_INT 22
49456: PUSH
49457: LD_VAR 0 13
49461: PPUSH
49462: CALL_OW 255
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 30
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 30
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PPUSH
49503: CALL_OW 72
49507: ST_TO_ADDR
// for i = 1 to hexes do
49508: LD_ADDR_VAR 0 9
49512: PUSH
49513: DOUBLE
49514: LD_INT 1
49516: DEC
49517: ST_TO_ADDR
49518: LD_VAR 0 14
49522: PUSH
49523: FOR_TO
49524: IFFALSE 50200
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49526: LD_ADDR_VAR 0 13
49530: PUSH
49531: LD_VAR 0 14
49535: PUSH
49536: LD_VAR 0 9
49540: ARRAY
49541: PUSH
49542: LD_INT 1
49544: ARRAY
49545: PPUSH
49546: LD_VAR 0 14
49550: PUSH
49551: LD_VAR 0 9
49555: ARRAY
49556: PUSH
49557: LD_INT 2
49559: ARRAY
49560: PPUSH
49561: CALL_OW 428
49565: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49566: LD_VAR 0 14
49570: PUSH
49571: LD_VAR 0 9
49575: ARRAY
49576: PUSH
49577: LD_INT 1
49579: ARRAY
49580: PPUSH
49581: LD_VAR 0 14
49585: PUSH
49586: LD_VAR 0 9
49590: ARRAY
49591: PUSH
49592: LD_INT 2
49594: ARRAY
49595: PPUSH
49596: CALL_OW 351
49600: PUSH
49601: LD_VAR 0 14
49605: PUSH
49606: LD_VAR 0 9
49610: ARRAY
49611: PUSH
49612: LD_INT 1
49614: ARRAY
49615: PPUSH
49616: LD_VAR 0 14
49620: PUSH
49621: LD_VAR 0 9
49625: ARRAY
49626: PUSH
49627: LD_INT 2
49629: ARRAY
49630: PPUSH
49631: CALL_OW 488
49635: NOT
49636: OR
49637: PUSH
49638: LD_VAR 0 13
49642: PPUSH
49643: CALL_OW 247
49647: PUSH
49648: LD_INT 3
49650: EQUAL
49651: OR
49652: IFFALSE 49658
// exit ;
49654: POP
49655: POP
49656: GO 50202
// if not tmp then
49658: LD_VAR 0 13
49662: NOT
49663: IFFALSE 49667
// continue ;
49665: GO 49523
// result := true ;
49667: LD_ADDR_VAR 0 8
49671: PUSH
49672: LD_INT 1
49674: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49675: LD_VAR 0 6
49679: PUSH
49680: LD_VAR 0 13
49684: PPUSH
49685: CALL_OW 247
49689: PUSH
49690: LD_INT 2
49692: EQUAL
49693: AND
49694: PUSH
49695: LD_VAR 0 13
49699: PPUSH
49700: CALL_OW 263
49704: PUSH
49705: LD_INT 1
49707: EQUAL
49708: AND
49709: IFFALSE 49873
// begin if IsDrivenBy ( tmp ) then
49711: LD_VAR 0 13
49715: PPUSH
49716: CALL_OW 311
49720: IFFALSE 49724
// continue ;
49722: GO 49523
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49724: LD_VAR 0 6
49728: PPUSH
49729: LD_INT 3
49731: PUSH
49732: LD_INT 60
49734: PUSH
49735: EMPTY
49736: LIST
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 3
49744: PUSH
49745: LD_INT 55
49747: PUSH
49748: EMPTY
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PPUSH
49759: CALL_OW 72
49763: IFFALSE 49871
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49765: LD_ADDR_VAR 0 18
49769: PUSH
49770: LD_VAR 0 6
49774: PPUSH
49775: LD_INT 3
49777: PUSH
49778: LD_INT 60
49780: PUSH
49781: EMPTY
49782: LIST
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 3
49790: PUSH
49791: LD_INT 55
49793: PUSH
49794: EMPTY
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PPUSH
49805: CALL_OW 72
49809: PUSH
49810: LD_INT 1
49812: ARRAY
49813: ST_TO_ADDR
// if IsInUnit ( driver ) then
49814: LD_VAR 0 18
49818: PPUSH
49819: CALL_OW 310
49823: IFFALSE 49834
// ComExit ( driver ) ;
49825: LD_VAR 0 18
49829: PPUSH
49830: CALL 74567 0 1
// AddComEnterUnit ( driver , tmp ) ;
49834: LD_VAR 0 18
49838: PPUSH
49839: LD_VAR 0 13
49843: PPUSH
49844: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49848: LD_VAR 0 18
49852: PPUSH
49853: LD_VAR 0 7
49857: PPUSH
49858: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49862: LD_VAR 0 18
49866: PPUSH
49867: CALL_OW 181
// end ; continue ;
49871: GO 49523
// end ; if not cleaners or not tmp in cleaners then
49873: LD_VAR 0 6
49877: NOT
49878: PUSH
49879: LD_VAR 0 13
49883: PUSH
49884: LD_VAR 0 6
49888: IN
49889: NOT
49890: OR
49891: IFFALSE 50198
// begin if dep then
49893: LD_VAR 0 17
49897: IFFALSE 50033
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49899: LD_ADDR_VAR 0 16
49903: PUSH
49904: LD_VAR 0 17
49908: PUSH
49909: LD_INT 1
49911: ARRAY
49912: PPUSH
49913: CALL_OW 250
49917: PPUSH
49918: LD_VAR 0 17
49922: PUSH
49923: LD_INT 1
49925: ARRAY
49926: PPUSH
49927: CALL_OW 254
49931: PPUSH
49932: LD_INT 5
49934: PPUSH
49935: CALL_OW 272
49939: PUSH
49940: LD_VAR 0 17
49944: PUSH
49945: LD_INT 1
49947: ARRAY
49948: PPUSH
49949: CALL_OW 251
49953: PPUSH
49954: LD_VAR 0 17
49958: PUSH
49959: LD_INT 1
49961: ARRAY
49962: PPUSH
49963: CALL_OW 254
49967: PPUSH
49968: LD_INT 5
49970: PPUSH
49971: CALL_OW 273
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49980: LD_VAR 0 16
49984: PUSH
49985: LD_INT 1
49987: ARRAY
49988: PPUSH
49989: LD_VAR 0 16
49993: PUSH
49994: LD_INT 2
49996: ARRAY
49997: PPUSH
49998: CALL_OW 488
50002: IFFALSE 50033
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50004: LD_VAR 0 13
50008: PPUSH
50009: LD_VAR 0 16
50013: PUSH
50014: LD_INT 1
50016: ARRAY
50017: PPUSH
50018: LD_VAR 0 16
50022: PUSH
50023: LD_INT 2
50025: ARRAY
50026: PPUSH
50027: CALL_OW 111
// continue ;
50031: GO 49523
// end ; end ; r := GetDir ( tmp ) ;
50033: LD_ADDR_VAR 0 15
50037: PUSH
50038: LD_VAR 0 13
50042: PPUSH
50043: CALL_OW 254
50047: ST_TO_ADDR
// if r = 5 then
50048: LD_VAR 0 15
50052: PUSH
50053: LD_INT 5
50055: EQUAL
50056: IFFALSE 50066
// r := 0 ;
50058: LD_ADDR_VAR 0 15
50062: PUSH
50063: LD_INT 0
50065: ST_TO_ADDR
// for j = r to 5 do
50066: LD_ADDR_VAR 0 10
50070: PUSH
50071: DOUBLE
50072: LD_VAR 0 15
50076: DEC
50077: ST_TO_ADDR
50078: LD_INT 5
50080: PUSH
50081: FOR_TO
50082: IFFALSE 50196
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50084: LD_ADDR_VAR 0 11
50088: PUSH
50089: LD_VAR 0 13
50093: PPUSH
50094: CALL_OW 250
50098: PPUSH
50099: LD_VAR 0 10
50103: PPUSH
50104: LD_INT 2
50106: PPUSH
50107: CALL_OW 272
50111: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50112: LD_ADDR_VAR 0 12
50116: PUSH
50117: LD_VAR 0 13
50121: PPUSH
50122: CALL_OW 251
50126: PPUSH
50127: LD_VAR 0 10
50131: PPUSH
50132: LD_INT 2
50134: PPUSH
50135: CALL_OW 273
50139: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50140: LD_VAR 0 11
50144: PPUSH
50145: LD_VAR 0 12
50149: PPUSH
50150: CALL_OW 488
50154: PUSH
50155: LD_VAR 0 11
50159: PPUSH
50160: LD_VAR 0 12
50164: PPUSH
50165: CALL_OW 428
50169: NOT
50170: AND
50171: IFFALSE 50194
// begin ComMoveXY ( tmp , _x , _y ) ;
50173: LD_VAR 0 13
50177: PPUSH
50178: LD_VAR 0 11
50182: PPUSH
50183: LD_VAR 0 12
50187: PPUSH
50188: CALL_OW 111
// break ;
50192: GO 50196
// end ; end ;
50194: GO 50081
50196: POP
50197: POP
// end ; end ;
50198: GO 49523
50200: POP
50201: POP
// end ;
50202: LD_VAR 0 8
50206: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50207: LD_INT 0
50209: PPUSH
// result := true ;
50210: LD_ADDR_VAR 0 3
50214: PUSH
50215: LD_INT 1
50217: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50218: LD_VAR 0 2
50222: PUSH
50223: LD_INT 24
50225: DOUBLE
50226: EQUAL
50227: IFTRUE 50237
50229: LD_INT 33
50231: DOUBLE
50232: EQUAL
50233: IFTRUE 50237
50235: GO 50262
50237: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50238: LD_ADDR_VAR 0 3
50242: PUSH
50243: LD_INT 32
50245: PPUSH
50246: LD_VAR 0 1
50250: PPUSH
50251: CALL_OW 321
50255: PUSH
50256: LD_INT 2
50258: EQUAL
50259: ST_TO_ADDR
50260: GO 50582
50262: LD_INT 20
50264: DOUBLE
50265: EQUAL
50266: IFTRUE 50270
50268: GO 50295
50270: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50271: LD_ADDR_VAR 0 3
50275: PUSH
50276: LD_INT 6
50278: PPUSH
50279: LD_VAR 0 1
50283: PPUSH
50284: CALL_OW 321
50288: PUSH
50289: LD_INT 2
50291: EQUAL
50292: ST_TO_ADDR
50293: GO 50582
50295: LD_INT 22
50297: DOUBLE
50298: EQUAL
50299: IFTRUE 50309
50301: LD_INT 36
50303: DOUBLE
50304: EQUAL
50305: IFTRUE 50309
50307: GO 50334
50309: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50310: LD_ADDR_VAR 0 3
50314: PUSH
50315: LD_INT 15
50317: PPUSH
50318: LD_VAR 0 1
50322: PPUSH
50323: CALL_OW 321
50327: PUSH
50328: LD_INT 2
50330: EQUAL
50331: ST_TO_ADDR
50332: GO 50582
50334: LD_INT 30
50336: DOUBLE
50337: EQUAL
50338: IFTRUE 50342
50340: GO 50367
50342: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50343: LD_ADDR_VAR 0 3
50347: PUSH
50348: LD_INT 20
50350: PPUSH
50351: LD_VAR 0 1
50355: PPUSH
50356: CALL_OW 321
50360: PUSH
50361: LD_INT 2
50363: EQUAL
50364: ST_TO_ADDR
50365: GO 50582
50367: LD_INT 28
50369: DOUBLE
50370: EQUAL
50371: IFTRUE 50381
50373: LD_INT 21
50375: DOUBLE
50376: EQUAL
50377: IFTRUE 50381
50379: GO 50406
50381: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50382: LD_ADDR_VAR 0 3
50386: PUSH
50387: LD_INT 21
50389: PPUSH
50390: LD_VAR 0 1
50394: PPUSH
50395: CALL_OW 321
50399: PUSH
50400: LD_INT 2
50402: EQUAL
50403: ST_TO_ADDR
50404: GO 50582
50406: LD_INT 16
50408: DOUBLE
50409: EQUAL
50410: IFTRUE 50414
50412: GO 50441
50414: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50415: LD_ADDR_VAR 0 3
50419: PUSH
50420: LD_EXP 45
50424: PPUSH
50425: LD_VAR 0 1
50429: PPUSH
50430: CALL_OW 321
50434: PUSH
50435: LD_INT 2
50437: EQUAL
50438: ST_TO_ADDR
50439: GO 50582
50441: LD_INT 19
50443: DOUBLE
50444: EQUAL
50445: IFTRUE 50455
50447: LD_INT 23
50449: DOUBLE
50450: EQUAL
50451: IFTRUE 50455
50453: GO 50482
50455: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50456: LD_ADDR_VAR 0 3
50460: PUSH
50461: LD_EXP 44
50465: PPUSH
50466: LD_VAR 0 1
50470: PPUSH
50471: CALL_OW 321
50475: PUSH
50476: LD_INT 2
50478: EQUAL
50479: ST_TO_ADDR
50480: GO 50582
50482: LD_INT 17
50484: DOUBLE
50485: EQUAL
50486: IFTRUE 50490
50488: GO 50515
50490: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50491: LD_ADDR_VAR 0 3
50495: PUSH
50496: LD_INT 39
50498: PPUSH
50499: LD_VAR 0 1
50503: PPUSH
50504: CALL_OW 321
50508: PUSH
50509: LD_INT 2
50511: EQUAL
50512: ST_TO_ADDR
50513: GO 50582
50515: LD_INT 18
50517: DOUBLE
50518: EQUAL
50519: IFTRUE 50523
50521: GO 50548
50523: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50524: LD_ADDR_VAR 0 3
50528: PUSH
50529: LD_INT 40
50531: PPUSH
50532: LD_VAR 0 1
50536: PPUSH
50537: CALL_OW 321
50541: PUSH
50542: LD_INT 2
50544: EQUAL
50545: ST_TO_ADDR
50546: GO 50582
50548: LD_INT 27
50550: DOUBLE
50551: EQUAL
50552: IFTRUE 50556
50554: GO 50581
50556: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50557: LD_ADDR_VAR 0 3
50561: PUSH
50562: LD_INT 35
50564: PPUSH
50565: LD_VAR 0 1
50569: PPUSH
50570: CALL_OW 321
50574: PUSH
50575: LD_INT 2
50577: EQUAL
50578: ST_TO_ADDR
50579: GO 50582
50581: POP
// end ;
50582: LD_VAR 0 3
50586: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50587: LD_INT 0
50589: PPUSH
50590: PPUSH
50591: PPUSH
50592: PPUSH
50593: PPUSH
50594: PPUSH
50595: PPUSH
50596: PPUSH
50597: PPUSH
50598: PPUSH
50599: PPUSH
// result := false ;
50600: LD_ADDR_VAR 0 6
50604: PUSH
50605: LD_INT 0
50607: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50608: LD_VAR 0 1
50612: NOT
50613: PUSH
50614: LD_VAR 0 1
50618: PPUSH
50619: CALL_OW 266
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: IN
50634: NOT
50635: OR
50636: PUSH
50637: LD_VAR 0 2
50641: NOT
50642: OR
50643: PUSH
50644: LD_VAR 0 5
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 3
50660: PUSH
50661: LD_INT 4
50663: PUSH
50664: LD_INT 5
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: IN
50675: NOT
50676: OR
50677: PUSH
50678: LD_VAR 0 3
50682: PPUSH
50683: LD_VAR 0 4
50687: PPUSH
50688: CALL_OW 488
50692: NOT
50693: OR
50694: IFFALSE 50698
// exit ;
50696: GO 51434
// side := GetSide ( depot ) ;
50698: LD_ADDR_VAR 0 9
50702: PUSH
50703: LD_VAR 0 1
50707: PPUSH
50708: CALL_OW 255
50712: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50713: LD_VAR 0 9
50717: PPUSH
50718: LD_VAR 0 2
50722: PPUSH
50723: CALL 50207 0 2
50727: NOT
50728: IFFALSE 50732
// exit ;
50730: GO 51434
// pom := GetBase ( depot ) ;
50732: LD_ADDR_VAR 0 10
50736: PUSH
50737: LD_VAR 0 1
50741: PPUSH
50742: CALL_OW 274
50746: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50747: LD_ADDR_VAR 0 11
50751: PUSH
50752: LD_VAR 0 2
50756: PPUSH
50757: LD_VAR 0 1
50761: PPUSH
50762: CALL_OW 248
50766: PPUSH
50767: CALL_OW 450
50771: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50772: LD_VAR 0 10
50776: PPUSH
50777: LD_INT 1
50779: PPUSH
50780: CALL_OW 275
50784: PUSH
50785: LD_VAR 0 11
50789: PUSH
50790: LD_INT 1
50792: ARRAY
50793: GREATEREQUAL
50794: PUSH
50795: LD_VAR 0 10
50799: PPUSH
50800: LD_INT 2
50802: PPUSH
50803: CALL_OW 275
50807: PUSH
50808: LD_VAR 0 11
50812: PUSH
50813: LD_INT 2
50815: ARRAY
50816: GREATEREQUAL
50817: AND
50818: PUSH
50819: LD_VAR 0 10
50823: PPUSH
50824: LD_INT 3
50826: PPUSH
50827: CALL_OW 275
50831: PUSH
50832: LD_VAR 0 11
50836: PUSH
50837: LD_INT 3
50839: ARRAY
50840: GREATEREQUAL
50841: AND
50842: NOT
50843: IFFALSE 50847
// exit ;
50845: GO 51434
// if GetBType ( depot ) = b_depot then
50847: LD_VAR 0 1
50851: PPUSH
50852: CALL_OW 266
50856: PUSH
50857: LD_INT 0
50859: EQUAL
50860: IFFALSE 50872
// dist := 28 else
50862: LD_ADDR_VAR 0 14
50866: PUSH
50867: LD_INT 28
50869: ST_TO_ADDR
50870: GO 50880
// dist := 36 ;
50872: LD_ADDR_VAR 0 14
50876: PUSH
50877: LD_INT 36
50879: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50880: LD_VAR 0 1
50884: PPUSH
50885: LD_VAR 0 3
50889: PPUSH
50890: LD_VAR 0 4
50894: PPUSH
50895: CALL_OW 297
50899: PUSH
50900: LD_VAR 0 14
50904: GREATER
50905: IFFALSE 50909
// exit ;
50907: GO 51434
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50909: LD_ADDR_VAR 0 12
50913: PUSH
50914: LD_VAR 0 2
50918: PPUSH
50919: LD_VAR 0 3
50923: PPUSH
50924: LD_VAR 0 4
50928: PPUSH
50929: LD_VAR 0 5
50933: PPUSH
50934: LD_VAR 0 1
50938: PPUSH
50939: CALL_OW 248
50943: PPUSH
50944: LD_INT 0
50946: PPUSH
50947: CALL 51439 0 6
50951: ST_TO_ADDR
// if not hexes then
50952: LD_VAR 0 12
50956: NOT
50957: IFFALSE 50961
// exit ;
50959: GO 51434
// hex := GetHexInfo ( x , y ) ;
50961: LD_ADDR_VAR 0 15
50965: PUSH
50966: LD_VAR 0 3
50970: PPUSH
50971: LD_VAR 0 4
50975: PPUSH
50976: CALL_OW 546
50980: ST_TO_ADDR
// if hex [ 1 ] then
50981: LD_VAR 0 15
50985: PUSH
50986: LD_INT 1
50988: ARRAY
50989: IFFALSE 50993
// exit ;
50991: GO 51434
// height := hex [ 2 ] ;
50993: LD_ADDR_VAR 0 13
50997: PUSH
50998: LD_VAR 0 15
51002: PUSH
51003: LD_INT 2
51005: ARRAY
51006: ST_TO_ADDR
// for i = 1 to hexes do
51007: LD_ADDR_VAR 0 7
51011: PUSH
51012: DOUBLE
51013: LD_INT 1
51015: DEC
51016: ST_TO_ADDR
51017: LD_VAR 0 12
51021: PUSH
51022: FOR_TO
51023: IFFALSE 51353
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51025: LD_VAR 0 12
51029: PUSH
51030: LD_VAR 0 7
51034: ARRAY
51035: PUSH
51036: LD_INT 1
51038: ARRAY
51039: PPUSH
51040: LD_VAR 0 12
51044: PUSH
51045: LD_VAR 0 7
51049: ARRAY
51050: PUSH
51051: LD_INT 2
51053: ARRAY
51054: PPUSH
51055: CALL_OW 488
51059: NOT
51060: PUSH
51061: LD_VAR 0 12
51065: PUSH
51066: LD_VAR 0 7
51070: ARRAY
51071: PUSH
51072: LD_INT 1
51074: ARRAY
51075: PPUSH
51076: LD_VAR 0 12
51080: PUSH
51081: LD_VAR 0 7
51085: ARRAY
51086: PUSH
51087: LD_INT 2
51089: ARRAY
51090: PPUSH
51091: CALL_OW 428
51095: PUSH
51096: LD_INT 0
51098: GREATER
51099: OR
51100: PUSH
51101: LD_VAR 0 12
51105: PUSH
51106: LD_VAR 0 7
51110: ARRAY
51111: PUSH
51112: LD_INT 1
51114: ARRAY
51115: PPUSH
51116: LD_VAR 0 12
51120: PUSH
51121: LD_VAR 0 7
51125: ARRAY
51126: PUSH
51127: LD_INT 2
51129: ARRAY
51130: PPUSH
51131: CALL_OW 351
51135: OR
51136: IFFALSE 51142
// exit ;
51138: POP
51139: POP
51140: GO 51434
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51142: LD_ADDR_VAR 0 8
51146: PUSH
51147: LD_VAR 0 12
51151: PUSH
51152: LD_VAR 0 7
51156: ARRAY
51157: PUSH
51158: LD_INT 1
51160: ARRAY
51161: PPUSH
51162: LD_VAR 0 12
51166: PUSH
51167: LD_VAR 0 7
51171: ARRAY
51172: PUSH
51173: LD_INT 2
51175: ARRAY
51176: PPUSH
51177: CALL_OW 546
51181: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51182: LD_VAR 0 8
51186: PUSH
51187: LD_INT 1
51189: ARRAY
51190: PUSH
51191: LD_VAR 0 8
51195: PUSH
51196: LD_INT 2
51198: ARRAY
51199: PUSH
51200: LD_VAR 0 13
51204: PUSH
51205: LD_INT 2
51207: PLUS
51208: GREATER
51209: OR
51210: PUSH
51211: LD_VAR 0 8
51215: PUSH
51216: LD_INT 2
51218: ARRAY
51219: PUSH
51220: LD_VAR 0 13
51224: PUSH
51225: LD_INT 2
51227: MINUS
51228: LESS
51229: OR
51230: PUSH
51231: LD_VAR 0 8
51235: PUSH
51236: LD_INT 3
51238: ARRAY
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 8
51245: PUSH
51246: LD_INT 9
51248: PUSH
51249: LD_INT 10
51251: PUSH
51252: LD_INT 11
51254: PUSH
51255: LD_INT 12
51257: PUSH
51258: LD_INT 13
51260: PUSH
51261: LD_INT 16
51263: PUSH
51264: LD_INT 17
51266: PUSH
51267: LD_INT 18
51269: PUSH
51270: LD_INT 19
51272: PUSH
51273: LD_INT 20
51275: PUSH
51276: LD_INT 21
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: IN
51294: NOT
51295: OR
51296: PUSH
51297: LD_VAR 0 8
51301: PUSH
51302: LD_INT 5
51304: ARRAY
51305: NOT
51306: OR
51307: PUSH
51308: LD_VAR 0 8
51312: PUSH
51313: LD_INT 6
51315: ARRAY
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 7
51325: PUSH
51326: LD_INT 9
51328: PUSH
51329: LD_INT 10
51331: PUSH
51332: LD_INT 11
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: IN
51343: NOT
51344: OR
51345: IFFALSE 51351
// exit ;
51347: POP
51348: POP
51349: GO 51434
// end ;
51351: GO 51022
51353: POP
51354: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51355: LD_VAR 0 9
51359: PPUSH
51360: LD_VAR 0 3
51364: PPUSH
51365: LD_VAR 0 4
51369: PPUSH
51370: LD_INT 20
51372: PPUSH
51373: CALL 43380 0 4
51377: PUSH
51378: LD_INT 4
51380: ARRAY
51381: IFFALSE 51385
// exit ;
51383: GO 51434
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51385: LD_VAR 0 2
51389: PUSH
51390: LD_INT 29
51392: PUSH
51393: LD_INT 30
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: IN
51400: PUSH
51401: LD_VAR 0 3
51405: PPUSH
51406: LD_VAR 0 4
51410: PPUSH
51411: LD_VAR 0 9
51415: PPUSH
51416: CALL_OW 440
51420: NOT
51421: AND
51422: IFFALSE 51426
// exit ;
51424: GO 51434
// result := true ;
51426: LD_ADDR_VAR 0 6
51430: PUSH
51431: LD_INT 1
51433: ST_TO_ADDR
// end ;
51434: LD_VAR 0 6
51438: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51439: LD_INT 0
51441: PPUSH
51442: PPUSH
51443: PPUSH
51444: PPUSH
51445: PPUSH
51446: PPUSH
51447: PPUSH
51448: PPUSH
51449: PPUSH
51450: PPUSH
51451: PPUSH
51452: PPUSH
51453: PPUSH
51454: PPUSH
51455: PPUSH
51456: PPUSH
51457: PPUSH
51458: PPUSH
51459: PPUSH
51460: PPUSH
51461: PPUSH
51462: PPUSH
51463: PPUSH
51464: PPUSH
51465: PPUSH
51466: PPUSH
51467: PPUSH
51468: PPUSH
51469: PPUSH
51470: PPUSH
51471: PPUSH
51472: PPUSH
51473: PPUSH
51474: PPUSH
51475: PPUSH
51476: PPUSH
51477: PPUSH
51478: PPUSH
51479: PPUSH
51480: PPUSH
51481: PPUSH
51482: PPUSH
51483: PPUSH
51484: PPUSH
51485: PPUSH
51486: PPUSH
51487: PPUSH
51488: PPUSH
51489: PPUSH
51490: PPUSH
51491: PPUSH
51492: PPUSH
51493: PPUSH
51494: PPUSH
51495: PPUSH
51496: PPUSH
51497: PPUSH
51498: PPUSH
// result = [ ] ;
51499: LD_ADDR_VAR 0 7
51503: PUSH
51504: EMPTY
51505: ST_TO_ADDR
// temp_list = [ ] ;
51506: LD_ADDR_VAR 0 9
51510: PUSH
51511: EMPTY
51512: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51513: LD_VAR 0 4
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: LD_INT 3
51529: PUSH
51530: LD_INT 4
51532: PUSH
51533: LD_INT 5
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: IN
51544: NOT
51545: PUSH
51546: LD_VAR 0 1
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: IN
51561: PUSH
51562: LD_VAR 0 5
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: LD_INT 3
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: IN
51581: NOT
51582: AND
51583: OR
51584: IFFALSE 51588
// exit ;
51586: GO 69979
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51588: LD_VAR 0 1
51592: PUSH
51593: LD_INT 6
51595: PUSH
51596: LD_INT 7
51598: PUSH
51599: LD_INT 8
51601: PUSH
51602: LD_INT 13
51604: PUSH
51605: LD_INT 12
51607: PUSH
51608: LD_INT 15
51610: PUSH
51611: LD_INT 11
51613: PUSH
51614: LD_INT 14
51616: PUSH
51617: LD_INT 10
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: IN
51631: IFFALSE 51641
// btype = b_lab ;
51633: LD_ADDR_VAR 0 1
51637: PUSH
51638: LD_INT 6
51640: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51641: LD_VAR 0 6
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: IN
51660: NOT
51661: PUSH
51662: LD_VAR 0 1
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: LD_INT 6
51681: PUSH
51682: LD_INT 36
51684: PUSH
51685: LD_INT 4
51687: PUSH
51688: LD_INT 5
51690: PUSH
51691: LD_INT 31
51693: PUSH
51694: LD_INT 32
51696: PUSH
51697: LD_INT 33
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: IN
51713: NOT
51714: PUSH
51715: LD_VAR 0 6
51719: PUSH
51720: LD_INT 1
51722: EQUAL
51723: AND
51724: OR
51725: PUSH
51726: LD_VAR 0 1
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: IN
51741: NOT
51742: PUSH
51743: LD_VAR 0 6
51747: PUSH
51748: LD_INT 2
51750: EQUAL
51751: AND
51752: OR
51753: IFFALSE 51763
// mode = 0 ;
51755: LD_ADDR_VAR 0 6
51759: PUSH
51760: LD_INT 0
51762: ST_TO_ADDR
// case mode of 0 :
51763: LD_VAR 0 6
51767: PUSH
51768: LD_INT 0
51770: DOUBLE
51771: EQUAL
51772: IFTRUE 51776
51774: GO 63229
51776: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51777: LD_ADDR_VAR 0 11
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 3
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 3
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51970: LD_ADDR_VAR 0 12
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 3
52127: NEG
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 3
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52166: LD_ADDR_VAR 0 13
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52365: LD_ADDR_VAR 0 14
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 3
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52561: LD_ADDR_VAR 0 15
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52754: LD_ADDR_VAR 0 16
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 2
52877: NEG
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 3
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 3
52911: PUSH
52912: LD_INT 3
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52947: LD_ADDR_VAR 0 17
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53177: LD_ADDR_VAR 0 18
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: LD_INT 2
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53407: LD_ADDR_VAR 0 19
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: NEG
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53637: LD_ADDR_VAR 0 20
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53867: LD_ADDR_VAR 0 21
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54097: LD_ADDR_VAR 0 22
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 2
54296: NEG
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54327: LD_ADDR_VAR 0 23
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: LD_INT 3
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54607: LD_ADDR_VAR 0 24
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 3
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54883: LD_ADDR_VAR 0 25
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 3
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 3
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 3
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 3
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55157: LD_ADDR_VAR 0 26
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 3
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55433: LD_ADDR_VAR 0 27
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 3
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 3
55678: NEG
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55713: LD_ADDR_VAR 0 28
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: LD_INT 3
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 3
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: NEG
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55995: LD_ADDR_VAR 0 29
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: LD_INT 3
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56274: LD_ADDR_VAR 0 30
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: LD_INT 2
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 3
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56552: LD_ADDR_VAR 0 31
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: LD_INT 3
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 3
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56830: LD_ADDR_VAR 0 32
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 3
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 3
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57108: LD_ADDR_VAR 0 33
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: LD_INT 3
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57387: LD_ADDR_VAR 0 34
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 3
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 2
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57667: LD_ADDR_VAR 0 35
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57779: LD_ADDR_VAR 0 36
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57891: LD_ADDR_VAR 0 37
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58003: LD_ADDR_VAR 0 38
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58115: LD_ADDR_VAR 0 39
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58227: LD_ADDR_VAR 0 40
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58339: LD_ADDR_VAR 0 41
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: NEG
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 2
58602: NEG
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 3
58613: NEG
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 3
58624: NEG
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 3
58636: NEG
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: LD_INT 3
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58689: LD_ADDR_VAR 0 42
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: LD_INT 3
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 3
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 3
58986: NEG
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 3
58998: NEG
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59039: LD_ADDR_VAR 0 43
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 2
59205: NEG
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 2
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: LD_INT 3
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: LD_INT 3
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 3
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 3
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: NEG
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 3
59346: NEG
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59387: LD_ADDR_VAR 0 44
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 3
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 2
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 3
59661: NEG
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 3
59672: NEG
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: NEG
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: NEG
59697: PUSH
59698: LD_INT 3
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59737: LD_ADDR_VAR 0 45
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 2
59927: NEG
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: LD_INT 2
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: LD_INT 3
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 3
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 3
60034: NEG
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 3
60046: NEG
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60087: LD_ADDR_VAR 0 46
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: LD_INT 3
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 3
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: LD_INT 3
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: LD_INT 3
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60435: LD_ADDR_VAR 0 47
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: NEG
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60586: LD_ADDR_VAR 0 48
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: LD_INT 2
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 2
60711: PUSH
60712: LD_INT 1
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60733: LD_ADDR_VAR 0 49
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 2
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60877: LD_ADDR_VAR 0 50
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61021: LD_ADDR_VAR 0 51
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61168: LD_ADDR_VAR 0 52
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 2
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61319: LD_ADDR_VAR 0 53
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 2
61518: NEG
61519: PUSH
61520: LD_INT 2
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61549: LD_ADDR_VAR 0 54
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 2
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 2
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: LD_INT 2
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 2
61748: NEG
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61779: LD_ADDR_VAR 0 55
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 2
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 2
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: NEG
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: NEG
61979: PUSH
61980: LD_INT 2
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62009: LD_ADDR_VAR 0 56
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: LD_INT 2
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: LD_INT 2
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 2
62208: NEG
62209: PUSH
62210: LD_INT 2
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62239: LD_ADDR_VAR 0 57
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 2
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: PUSH
62375: LD_INT 2
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 2
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62469: LD_ADDR_VAR 0 58
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: LD_INT 2
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 2
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62699: LD_ADDR_VAR 0 59
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62787: LD_ADDR_VAR 0 60
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62875: LD_ADDR_VAR 0 61
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: NEG
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62963: LD_ADDR_VAR 0 62
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63051: LD_ADDR_VAR 0 63
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: LD_INT 1
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63139: LD_ADDR_VAR 0 64
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: ST_TO_ADDR
// end ; 1 :
63227: GO 69124
63229: LD_INT 1
63231: DOUBLE
63232: EQUAL
63233: IFTRUE 63237
63235: GO 65860
63237: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63238: LD_ADDR_VAR 0 11
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: LD_INT 3
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: LD_INT 3
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: LD_INT 2
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: LIST
63281: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63282: LD_ADDR_VAR 0 12
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 3
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 3
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63323: LD_ADDR_VAR 0 13
63327: PUSH
63328: LD_INT 3
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 3
63340: PUSH
63341: LD_INT 3
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 2
63350: PUSH
63351: LD_INT 3
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: LIST
63362: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63363: LD_ADDR_VAR 0 14
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: LD_INT 3
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: LD_INT 2
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: LIST
63403: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63404: LD_ADDR_VAR 0 15
63408: PUSH
63409: LD_INT 2
63411: NEG
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 3
63422: NEG
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 3
63433: NEG
63434: PUSH
63435: LD_INT 1
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63448: LD_ADDR_VAR 0 16
63452: PUSH
63453: LD_INT 2
63455: NEG
63456: PUSH
63457: LD_INT 3
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 3
63467: NEG
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 3
63479: NEG
63480: PUSH
63481: LD_INT 3
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: LIST
63493: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63494: LD_ADDR_VAR 0 17
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 3
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 3
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 2
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: LIST
63537: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63538: LD_ADDR_VAR 0 18
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 3
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: LIST
63578: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63579: LD_ADDR_VAR 0 19
63583: PUSH
63584: LD_INT 3
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: LD_INT 3
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: LD_INT 3
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: LIST
63618: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63619: LD_ADDR_VAR 0 20
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 3
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 3
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: LIST
63659: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63660: LD_ADDR_VAR 0 21
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 3
63678: NEG
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 3
63689: NEG
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: LIST
63703: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63704: LD_ADDR_VAR 0 22
63708: PUSH
63709: LD_INT 2
63711: NEG
63712: PUSH
63713: LD_INT 3
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 3
63723: NEG
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 3
63735: NEG
63736: PUSH
63737: LD_INT 3
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: LIST
63749: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63750: LD_ADDR_VAR 0 23
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: LD_INT 3
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: LD_INT 4
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 3
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63794: LD_ADDR_VAR 0 24
63798: PUSH
63799: LD_INT 3
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 3
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 4
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: LIST
63834: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63835: LD_ADDR_VAR 0 25
63839: PUSH
63840: LD_INT 3
63842: PUSH
63843: LD_INT 3
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 4
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: LD_INT 4
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: LIST
63874: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63875: LD_ADDR_VAR 0 26
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 4
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: NEG
63903: PUSH
63904: LD_INT 3
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: LIST
63915: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63916: LD_ADDR_VAR 0 27
63920: PUSH
63921: LD_INT 3
63923: NEG
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 3
63934: NEG
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 4
63945: NEG
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: LIST
63959: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63960: LD_ADDR_VAR 0 28
63964: PUSH
63965: LD_INT 3
63967: NEG
63968: PUSH
63969: LD_INT 3
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 3
63979: NEG
63980: PUSH
63981: LD_INT 4
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 4
63991: NEG
63992: PUSH
63993: LD_INT 3
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64006: LD_ADDR_VAR 0 29
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: LD_INT 3
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: LD_INT 3
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: LD_INT 2
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: LD_INT 4
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 4
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: LD_INT 3
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 5
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: LD_INT 5
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: LD_INT 4
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: LD_INT 6
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: LD_INT 6
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: LD_INT 5
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64161: LD_ADDR_VAR 0 30
64165: PUSH
64166: LD_INT 2
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 3
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 3
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 3
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 4
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 4
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 4
64230: PUSH
64231: LD_INT 1
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 5
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 5
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 5
64261: PUSH
64262: LD_INT 1
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 6
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 6
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64304: LD_ADDR_VAR 0 31
64308: PUSH
64309: LD_INT 3
64311: PUSH
64312: LD_INT 2
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 3
64321: PUSH
64322: LD_INT 3
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: LD_INT 3
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 4
64341: PUSH
64342: LD_INT 3
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 4
64351: PUSH
64352: LD_INT 4
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 3
64361: PUSH
64362: LD_INT 4
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 5
64371: PUSH
64372: LD_INT 4
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 5
64381: PUSH
64382: LD_INT 5
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 4
64391: PUSH
64392: LD_INT 5
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 6
64401: PUSH
64402: LD_INT 5
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 6
64411: PUSH
64412: LD_INT 6
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 5
64421: PUSH
64422: LD_INT 6
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64443: LD_ADDR_VAR 0 32
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 3
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 3
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 2
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: PUSH
64482: LD_INT 4
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 4
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 3
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: LD_INT 5
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: LD_INT 5
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: LD_INT 4
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: LD_INT 6
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: LD_INT 6
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: LD_INT 5
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64586: LD_ADDR_VAR 0 33
64590: PUSH
64591: LD_INT 2
64593: NEG
64594: PUSH
64595: LD_INT 1
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 3
64604: NEG
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 3
64615: NEG
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 3
64627: NEG
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 4
64638: NEG
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 4
64649: NEG
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 4
64661: NEG
64662: PUSH
64663: LD_INT 1
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 5
64672: NEG
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 5
64683: NEG
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 5
64695: NEG
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 6
64706: NEG
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 6
64717: NEG
64718: PUSH
64719: LD_INT 1
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64741: LD_ADDR_VAR 0 34
64745: PUSH
64746: LD_INT 2
64748: NEG
64749: PUSH
64750: LD_INT 3
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 3
64760: NEG
64761: PUSH
64762: LD_INT 2
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 3
64772: NEG
64773: PUSH
64774: LD_INT 3
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: LD_INT 4
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 4
64796: NEG
64797: PUSH
64798: LD_INT 3
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 4
64808: NEG
64809: PUSH
64810: LD_INT 4
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 4
64820: NEG
64821: PUSH
64822: LD_INT 5
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 5
64832: NEG
64833: PUSH
64834: LD_INT 4
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 5
64844: NEG
64845: PUSH
64846: LD_INT 5
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 5
64856: NEG
64857: PUSH
64858: LD_INT 6
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 6
64868: NEG
64869: PUSH
64870: LD_INT 5
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 6
64880: NEG
64881: PUSH
64882: LD_INT 6
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64904: LD_ADDR_VAR 0 41
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: LD_INT 2
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: LD_INT 3
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 1
64934: PUSH
64935: LD_INT 2
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64948: LD_ADDR_VAR 0 42
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 2
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 3
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64989: LD_ADDR_VAR 0 43
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 3
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: LD_INT 3
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: LIST
65028: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65029: LD_ADDR_VAR 0 44
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: LD_INT 2
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: PUSH
65047: LD_INT 3
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: LD_INT 2
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: LIST
65069: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65070: LD_ADDR_VAR 0 45
65074: PUSH
65075: LD_INT 2
65077: NEG
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 2
65088: NEG
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 3
65099: NEG
65100: PUSH
65101: LD_INT 1
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: LIST
65113: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65114: LD_ADDR_VAR 0 46
65118: PUSH
65119: LD_INT 2
65121: NEG
65122: PUSH
65123: LD_INT 2
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PUSH
65135: LD_INT 3
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: LD_INT 2
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: LIST
65159: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65160: LD_ADDR_VAR 0 47
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: LD_INT 3
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: NEG
65180: PUSH
65181: LD_INT 3
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65193: LD_ADDR_VAR 0 48
65197: PUSH
65198: LD_INT 1
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65224: LD_ADDR_VAR 0 49
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: LD_INT 1
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 3
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65253: LD_ADDR_VAR 0 50
65257: PUSH
65258: LD_INT 2
65260: PUSH
65261: LD_INT 3
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: LD_INT 3
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65282: LD_ADDR_VAR 0 51
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: LD_INT 2
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65313: LD_ADDR_VAR 0 52
65317: PUSH
65318: LD_INT 3
65320: NEG
65321: PUSH
65322: LD_INT 1
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 3
65332: NEG
65333: PUSH
65334: LD_INT 2
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65346: LD_ADDR_VAR 0 53
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: LD_INT 3
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: LD_INT 3
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: LD_INT 2
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: LIST
65389: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65390: LD_ADDR_VAR 0 54
65394: PUSH
65395: LD_INT 2
65397: PUSH
65398: LD_INT 1
65400: NEG
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 3
65408: PUSH
65409: LD_INT 0
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 3
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: LIST
65430: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65431: LD_ADDR_VAR 0 55
65435: PUSH
65436: LD_INT 3
65438: PUSH
65439: LD_INT 2
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 3
65448: PUSH
65449: LD_INT 3
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 2
65458: PUSH
65459: LD_INT 3
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65471: LD_ADDR_VAR 0 56
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: LD_INT 3
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: LD_INT 3
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: LD_INT 2
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65512: LD_ADDR_VAR 0 57
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 3
65530: NEG
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 3
65541: NEG
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: LIST
65555: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65556: LD_ADDR_VAR 0 58
65560: PUSH
65561: LD_INT 2
65563: NEG
65564: PUSH
65565: LD_INT 3
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 3
65575: NEG
65576: PUSH
65577: LD_INT 2
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: LD_INT 3
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: LIST
65601: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65602: LD_ADDR_VAR 0 59
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: LD_INT 2
65613: NEG
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: LD_INT 2
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65646: LD_ADDR_VAR 0 60
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 2
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 2
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65687: LD_ADDR_VAR 0 61
65691: PUSH
65692: LD_INT 2
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 2
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 1
65714: PUSH
65715: LD_INT 2
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65727: LD_ADDR_VAR 0 62
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: LD_INT 2
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 0
65744: PUSH
65745: LD_INT 2
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: LIST
65767: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65768: LD_ADDR_VAR 0 63
65772: PUSH
65773: LD_INT 1
65775: NEG
65776: PUSH
65777: LD_INT 1
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 2
65786: NEG
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 2
65797: NEG
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: LIST
65811: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65812: LD_ADDR_VAR 0 64
65816: PUSH
65817: LD_INT 1
65819: NEG
65820: PUSH
65821: LD_INT 2
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 2
65831: NEG
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 2
65843: NEG
65844: PUSH
65845: LD_INT 2
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: LIST
65857: ST_TO_ADDR
// end ; 2 :
65858: GO 69124
65860: LD_INT 2
65862: DOUBLE
65863: EQUAL
65864: IFTRUE 65868
65866: GO 69123
65868: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65869: LD_ADDR_VAR 0 29
65873: PUSH
65874: LD_INT 4
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 4
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 5
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 5
65907: PUSH
65908: LD_INT 1
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 4
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 3
65937: PUSH
65938: LD_INT 1
65940: NEG
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 3
65948: PUSH
65949: LD_INT 2
65951: NEG
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 5
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: LD_INT 3
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 3
65979: PUSH
65980: LD_INT 2
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 4
65989: PUSH
65990: LD_INT 3
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 4
65999: PUSH
66000: LD_INT 4
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 3
66009: PUSH
66010: LD_INT 4
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: PUSH
66020: LD_INT 3
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 4
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 2
66049: PUSH
66050: LD_INT 4
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: LD_INT 4
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: LD_INT 3
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: LD_INT 4
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: PUSH
66090: LD_INT 5
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: LD_INT 5
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: LD_INT 4
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 1
66120: NEG
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 2
66131: PUSH
66132: LD_INT 5
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 2
66141: NEG
66142: PUSH
66143: LD_INT 3
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 3
66152: NEG
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 3
66163: NEG
66164: PUSH
66165: LD_INT 1
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 2
66175: NEG
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: LD_INT 1
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 3
66197: NEG
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 4
66208: NEG
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 4
66219: NEG
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 4
66231: NEG
66232: PUSH
66233: LD_INT 2
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 2
66243: NEG
66244: PUSH
66245: LD_INT 2
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 4
66254: NEG
66255: PUSH
66256: LD_INT 4
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 4
66266: NEG
66267: PUSH
66268: LD_INT 5
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 3
66278: NEG
66279: PUSH
66280: LD_INT 4
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 3
66290: NEG
66291: PUSH
66292: LD_INT 3
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 4
66302: NEG
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 5
66314: NEG
66315: PUSH
66316: LD_INT 4
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 5
66326: NEG
66327: PUSH
66328: LD_INT 5
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 3
66338: NEG
66339: PUSH
66340: LD_INT 5
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 5
66350: NEG
66351: PUSH
66352: LD_INT 3
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66407: LD_ADDR_VAR 0 30
66411: PUSH
66412: LD_INT 4
66414: PUSH
66415: LD_INT 4
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 4
66424: PUSH
66425: LD_INT 3
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 5
66434: PUSH
66435: LD_INT 4
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 5
66444: PUSH
66445: LD_INT 5
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 4
66454: PUSH
66455: LD_INT 5
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 3
66464: PUSH
66465: LD_INT 4
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 3
66474: PUSH
66475: LD_INT 3
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 5
66484: PUSH
66485: LD_INT 3
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: LD_INT 5
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 3
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 0
66514: PUSH
66515: LD_INT 2
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 1
66524: PUSH
66525: LD_INT 3
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 1
66534: PUSH
66535: LD_INT 4
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: LD_INT 4
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: LD_INT 3
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: NEG
66566: PUSH
66567: LD_INT 2
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 2
66576: PUSH
66577: LD_INT 4
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 2
66586: NEG
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 4
66597: NEG
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 4
66608: NEG
66609: PUSH
66610: LD_INT 1
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 3
66620: NEG
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 3
66631: NEG
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 4
66642: NEG
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 5
66653: NEG
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 5
66664: NEG
66665: PUSH
66666: LD_INT 1
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 5
66676: NEG
66677: PUSH
66678: LD_INT 2
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 3
66688: NEG
66689: PUSH
66690: LD_INT 2
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 3
66699: NEG
66700: PUSH
66701: LD_INT 3
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 3
66711: NEG
66712: PUSH
66713: LD_INT 4
66715: NEG
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 2
66723: NEG
66724: PUSH
66725: LD_INT 3
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 2
66735: NEG
66736: PUSH
66737: LD_INT 2
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 3
66747: NEG
66748: PUSH
66749: LD_INT 2
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 4
66759: NEG
66760: PUSH
66761: LD_INT 3
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 4
66771: NEG
66772: PUSH
66773: LD_INT 4
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 2
66783: NEG
66784: PUSH
66785: LD_INT 4
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 4
66795: NEG
66796: PUSH
66797: LD_INT 2
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: LD_INT 4
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: LD_INT 5
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: LD_INT 4
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 1
66840: PUSH
66841: LD_INT 3
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: LD_INT 3
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 1
66862: NEG
66863: PUSH
66864: LD_INT 4
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: LD_INT 5
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 2
66886: PUSH
66887: LD_INT 3
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 2
66897: NEG
66898: PUSH
66899: LD_INT 5
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66954: LD_ADDR_VAR 0 31
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: LD_INT 4
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 1
66991: PUSH
66992: LD_INT 5
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: LD_INT 5
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: NEG
67012: PUSH
67013: LD_INT 4
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: LD_INT 3
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 2
67033: PUSH
67034: LD_INT 5
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 2
67043: NEG
67044: PUSH
67045: LD_INT 3
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 3
67065: NEG
67066: PUSH
67067: LD_INT 1
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 2
67077: NEG
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: LD_INT 1
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 3
67099: NEG
67100: PUSH
67101: LD_INT 1
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 4
67110: NEG
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 4
67121: NEG
67122: PUSH
67123: LD_INT 1
67125: NEG
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 4
67133: NEG
67134: PUSH
67135: LD_INT 2
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 2
67145: NEG
67146: PUSH
67147: LD_INT 2
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 4
67156: NEG
67157: PUSH
67158: LD_INT 4
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 4
67168: NEG
67169: PUSH
67170: LD_INT 5
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 3
67180: NEG
67181: PUSH
67182: LD_INT 4
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 3
67192: NEG
67193: PUSH
67194: LD_INT 3
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 4
67204: NEG
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 5
67216: NEG
67217: PUSH
67218: LD_INT 4
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 5
67228: NEG
67229: PUSH
67230: LD_INT 5
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 3
67240: NEG
67241: PUSH
67242: LD_INT 5
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 5
67252: NEG
67253: PUSH
67254: LD_INT 3
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: LD_INT 3
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: LD_INT 4
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 1
67297: PUSH
67298: LD_INT 2
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: LD_INT 2
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 1
67319: NEG
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: PUSH
67333: LD_INT 4
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: LD_INT 2
67346: NEG
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 2
67354: NEG
67355: PUSH
67356: LD_INT 4
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 4
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 4
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 5
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 5
67397: PUSH
67398: LD_INT 1
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 4
67407: PUSH
67408: LD_INT 1
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 3
67417: PUSH
67418: LD_INT 0
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 3
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 3
67438: PUSH
67439: LD_INT 2
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 5
67449: PUSH
67450: LD_INT 2
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67504: LD_ADDR_VAR 0 32
67508: PUSH
67509: LD_INT 4
67511: NEG
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 4
67522: NEG
67523: PUSH
67524: LD_INT 1
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 3
67534: NEG
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 3
67545: NEG
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 4
67556: NEG
67557: PUSH
67558: LD_INT 1
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 5
67567: NEG
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 5
67578: NEG
67579: PUSH
67580: LD_INT 1
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 5
67590: NEG
67591: PUSH
67592: LD_INT 2
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 3
67602: NEG
67603: PUSH
67604: LD_INT 2
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 3
67613: NEG
67614: PUSH
67615: LD_INT 3
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 3
67625: NEG
67626: PUSH
67627: LD_INT 4
67629: NEG
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 2
67637: NEG
67638: PUSH
67639: LD_INT 3
67641: NEG
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: LD_INT 2
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 3
67661: NEG
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 4
67673: NEG
67674: PUSH
67675: LD_INT 3
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 4
67685: NEG
67686: PUSH
67687: LD_INT 4
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 2
67697: NEG
67698: PUSH
67699: LD_INT 4
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 4
67709: NEG
67710: PUSH
67711: LD_INT 2
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: LD_INT 4
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 0
67732: PUSH
67733: LD_INT 5
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: PUSH
67744: LD_INT 4
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 1
67754: PUSH
67755: LD_INT 3
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 0
67765: PUSH
67766: LD_INT 3
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 1
67776: NEG
67777: PUSH
67778: LD_INT 4
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: LD_INT 5
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 2
67800: PUSH
67801: LD_INT 3
67803: NEG
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 2
67811: NEG
67812: PUSH
67813: LD_INT 5
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 3
67823: PUSH
67824: LD_INT 0
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 3
67833: PUSH
67834: LD_INT 1
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 4
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 4
67854: PUSH
67855: LD_INT 1
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: LD_INT 1
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: LD_INT 0
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 2
67884: PUSH
67885: LD_INT 1
67887: NEG
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: LD_INT 2
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 4
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 4
67916: PUSH
67917: LD_INT 4
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 4
67926: PUSH
67927: LD_INT 3
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 5
67936: PUSH
67937: LD_INT 4
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 5
67946: PUSH
67947: LD_INT 5
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 4
67956: PUSH
67957: LD_INT 5
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 3
67966: PUSH
67967: LD_INT 4
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 3
67976: PUSH
67977: LD_INT 3
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 5
67986: PUSH
67987: LD_INT 3
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 3
67996: PUSH
67997: LD_INT 5
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68051: LD_ADDR_VAR 0 33
68055: PUSH
68056: LD_INT 4
68058: NEG
68059: PUSH
68060: LD_INT 4
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 4
68070: NEG
68071: PUSH
68072: LD_INT 5
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 3
68082: NEG
68083: PUSH
68084: LD_INT 4
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 3
68094: NEG
68095: PUSH
68096: LD_INT 3
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 4
68106: NEG
68107: PUSH
68108: LD_INT 3
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 5
68118: NEG
68119: PUSH
68120: LD_INT 4
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 5
68130: NEG
68131: PUSH
68132: LD_INT 5
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 3
68142: NEG
68143: PUSH
68144: LD_INT 5
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 5
68154: NEG
68155: PUSH
68156: LD_INT 3
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 0
68166: PUSH
68167: LD_INT 3
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: LD_INT 4
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 1
68188: PUSH
68189: LD_INT 3
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: PUSH
68200: LD_INT 2
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 0
68210: PUSH
68211: LD_INT 2
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: NEG
68222: PUSH
68223: LD_INT 3
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: NEG
68234: PUSH
68235: LD_INT 4
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: LD_INT 2
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 2
68256: NEG
68257: PUSH
68258: LD_INT 4
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 4
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 4
68278: PUSH
68279: LD_INT 1
68281: NEG
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 5
68289: PUSH
68290: LD_INT 0
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 5
68299: PUSH
68300: LD_INT 1
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 4
68309: PUSH
68310: LD_INT 1
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 3
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 3
68329: PUSH
68330: LD_INT 1
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 3
68340: PUSH
68341: LD_INT 2
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 5
68351: PUSH
68352: LD_INT 2
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 3
68361: PUSH
68362: LD_INT 3
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 3
68371: PUSH
68372: LD_INT 2
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 4
68381: PUSH
68382: LD_INT 3
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 4
68391: PUSH
68392: LD_INT 4
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 3
68401: PUSH
68402: LD_INT 4
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 2
68411: PUSH
68412: LD_INT 3
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 2
68421: PUSH
68422: LD_INT 2
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 4
68431: PUSH
68432: LD_INT 2
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 2
68441: PUSH
68442: LD_INT 4
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: LD_INT 4
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 0
68461: PUSH
68462: LD_INT 3
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 1
68471: PUSH
68472: LD_INT 4
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: PUSH
68482: LD_INT 5
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 0
68491: PUSH
68492: LD_INT 5
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 1
68501: NEG
68502: PUSH
68503: LD_INT 4
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 1
68512: NEG
68513: PUSH
68514: LD_INT 3
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 2
68523: PUSH
68524: LD_INT 5
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 2
68533: NEG
68534: PUSH
68535: LD_INT 3
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68589: LD_ADDR_VAR 0 34
68593: PUSH
68594: LD_INT 0
68596: PUSH
68597: LD_INT 4
68599: NEG
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 0
68607: PUSH
68608: LD_INT 5
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 1
68618: PUSH
68619: LD_INT 4
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 1
68629: PUSH
68630: LD_INT 3
68632: NEG
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: LD_INT 3
68643: NEG
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 1
68651: NEG
68652: PUSH
68653: LD_INT 4
68655: NEG
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 1
68663: NEG
68664: PUSH
68665: LD_INT 5
68667: NEG
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 2
68675: PUSH
68676: LD_INT 3
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 2
68686: NEG
68687: PUSH
68688: LD_INT 5
68690: NEG
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 3
68698: PUSH
68699: LD_INT 0
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 3
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 4
68719: PUSH
68720: LD_INT 0
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 4
68729: PUSH
68730: LD_INT 1
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 3
68739: PUSH
68740: LD_INT 1
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 2
68749: PUSH
68750: LD_INT 0
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 2
68759: PUSH
68760: LD_INT 1
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 2
68770: PUSH
68771: LD_INT 2
68773: NEG
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 4
68781: PUSH
68782: LD_INT 2
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 4
68791: PUSH
68792: LD_INT 4
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 4
68801: PUSH
68802: LD_INT 3
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 5
68811: PUSH
68812: LD_INT 4
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 5
68821: PUSH
68822: LD_INT 5
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 4
68831: PUSH
68832: LD_INT 5
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 3
68841: PUSH
68842: LD_INT 4
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 3
68851: PUSH
68852: LD_INT 3
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 5
68861: PUSH
68862: LD_INT 3
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 3
68871: PUSH
68872: LD_INT 5
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 0
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 1
68901: PUSH
68902: LD_INT 3
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 1
68911: PUSH
68912: LD_INT 4
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 0
68921: PUSH
68922: LD_INT 4
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 1
68931: NEG
68932: PUSH
68933: LD_INT 3
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: NEG
68943: PUSH
68944: LD_INT 2
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 2
68953: PUSH
68954: LD_INT 4
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 2
68963: NEG
68964: PUSH
68965: LD_INT 2
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 4
68974: NEG
68975: PUSH
68976: LD_INT 0
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 4
68985: NEG
68986: PUSH
68987: LD_INT 1
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 3
68997: NEG
68998: PUSH
68999: LD_INT 0
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 3
69008: NEG
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 4
69019: NEG
69020: PUSH
69021: LD_INT 1
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 5
69030: NEG
69031: PUSH
69032: LD_INT 0
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 5
69041: NEG
69042: PUSH
69043: LD_INT 1
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 5
69053: NEG
69054: PUSH
69055: LD_INT 2
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 3
69065: NEG
69066: PUSH
69067: LD_INT 2
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: ST_TO_ADDR
// end ; end ;
69121: GO 69124
69123: POP
// case btype of b_depot , b_warehouse :
69124: LD_VAR 0 1
69128: PUSH
69129: LD_INT 0
69131: DOUBLE
69132: EQUAL
69133: IFTRUE 69143
69135: LD_INT 1
69137: DOUBLE
69138: EQUAL
69139: IFTRUE 69143
69141: GO 69344
69143: POP
// case nation of nation_american :
69144: LD_VAR 0 5
69148: PUSH
69149: LD_INT 1
69151: DOUBLE
69152: EQUAL
69153: IFTRUE 69157
69155: GO 69213
69157: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69158: LD_ADDR_VAR 0 9
69162: PUSH
69163: LD_VAR 0 11
69167: PUSH
69168: LD_VAR 0 12
69172: PUSH
69173: LD_VAR 0 13
69177: PUSH
69178: LD_VAR 0 14
69182: PUSH
69183: LD_VAR 0 15
69187: PUSH
69188: LD_VAR 0 16
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: PUSH
69201: LD_VAR 0 4
69205: PUSH
69206: LD_INT 1
69208: PLUS
69209: ARRAY
69210: ST_TO_ADDR
69211: GO 69342
69213: LD_INT 2
69215: DOUBLE
69216: EQUAL
69217: IFTRUE 69221
69219: GO 69277
69221: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69222: LD_ADDR_VAR 0 9
69226: PUSH
69227: LD_VAR 0 17
69231: PUSH
69232: LD_VAR 0 18
69236: PUSH
69237: LD_VAR 0 19
69241: PUSH
69242: LD_VAR 0 20
69246: PUSH
69247: LD_VAR 0 21
69251: PUSH
69252: LD_VAR 0 22
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: PUSH
69265: LD_VAR 0 4
69269: PUSH
69270: LD_INT 1
69272: PLUS
69273: ARRAY
69274: ST_TO_ADDR
69275: GO 69342
69277: LD_INT 3
69279: DOUBLE
69280: EQUAL
69281: IFTRUE 69285
69283: GO 69341
69285: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69286: LD_ADDR_VAR 0 9
69290: PUSH
69291: LD_VAR 0 23
69295: PUSH
69296: LD_VAR 0 24
69300: PUSH
69301: LD_VAR 0 25
69305: PUSH
69306: LD_VAR 0 26
69310: PUSH
69311: LD_VAR 0 27
69315: PUSH
69316: LD_VAR 0 28
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: PUSH
69329: LD_VAR 0 4
69333: PUSH
69334: LD_INT 1
69336: PLUS
69337: ARRAY
69338: ST_TO_ADDR
69339: GO 69342
69341: POP
69342: GO 69897
69344: LD_INT 2
69346: DOUBLE
69347: EQUAL
69348: IFTRUE 69358
69350: LD_INT 3
69352: DOUBLE
69353: EQUAL
69354: IFTRUE 69358
69356: GO 69414
69358: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69359: LD_ADDR_VAR 0 9
69363: PUSH
69364: LD_VAR 0 29
69368: PUSH
69369: LD_VAR 0 30
69373: PUSH
69374: LD_VAR 0 31
69378: PUSH
69379: LD_VAR 0 32
69383: PUSH
69384: LD_VAR 0 33
69388: PUSH
69389: LD_VAR 0 34
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: PUSH
69402: LD_VAR 0 4
69406: PUSH
69407: LD_INT 1
69409: PLUS
69410: ARRAY
69411: ST_TO_ADDR
69412: GO 69897
69414: LD_INT 16
69416: DOUBLE
69417: EQUAL
69418: IFTRUE 69476
69420: LD_INT 17
69422: DOUBLE
69423: EQUAL
69424: IFTRUE 69476
69426: LD_INT 18
69428: DOUBLE
69429: EQUAL
69430: IFTRUE 69476
69432: LD_INT 19
69434: DOUBLE
69435: EQUAL
69436: IFTRUE 69476
69438: LD_INT 22
69440: DOUBLE
69441: EQUAL
69442: IFTRUE 69476
69444: LD_INT 20
69446: DOUBLE
69447: EQUAL
69448: IFTRUE 69476
69450: LD_INT 21
69452: DOUBLE
69453: EQUAL
69454: IFTRUE 69476
69456: LD_INT 23
69458: DOUBLE
69459: EQUAL
69460: IFTRUE 69476
69462: LD_INT 24
69464: DOUBLE
69465: EQUAL
69466: IFTRUE 69476
69468: LD_INT 25
69470: DOUBLE
69471: EQUAL
69472: IFTRUE 69476
69474: GO 69532
69476: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69477: LD_ADDR_VAR 0 9
69481: PUSH
69482: LD_VAR 0 35
69486: PUSH
69487: LD_VAR 0 36
69491: PUSH
69492: LD_VAR 0 37
69496: PUSH
69497: LD_VAR 0 38
69501: PUSH
69502: LD_VAR 0 39
69506: PUSH
69507: LD_VAR 0 40
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: PUSH
69520: LD_VAR 0 4
69524: PUSH
69525: LD_INT 1
69527: PLUS
69528: ARRAY
69529: ST_TO_ADDR
69530: GO 69897
69532: LD_INT 6
69534: DOUBLE
69535: EQUAL
69536: IFTRUE 69588
69538: LD_INT 7
69540: DOUBLE
69541: EQUAL
69542: IFTRUE 69588
69544: LD_INT 8
69546: DOUBLE
69547: EQUAL
69548: IFTRUE 69588
69550: LD_INT 13
69552: DOUBLE
69553: EQUAL
69554: IFTRUE 69588
69556: LD_INT 12
69558: DOUBLE
69559: EQUAL
69560: IFTRUE 69588
69562: LD_INT 15
69564: DOUBLE
69565: EQUAL
69566: IFTRUE 69588
69568: LD_INT 11
69570: DOUBLE
69571: EQUAL
69572: IFTRUE 69588
69574: LD_INT 14
69576: DOUBLE
69577: EQUAL
69578: IFTRUE 69588
69580: LD_INT 10
69582: DOUBLE
69583: EQUAL
69584: IFTRUE 69588
69586: GO 69644
69588: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69589: LD_ADDR_VAR 0 9
69593: PUSH
69594: LD_VAR 0 41
69598: PUSH
69599: LD_VAR 0 42
69603: PUSH
69604: LD_VAR 0 43
69608: PUSH
69609: LD_VAR 0 44
69613: PUSH
69614: LD_VAR 0 45
69618: PUSH
69619: LD_VAR 0 46
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: PUSH
69632: LD_VAR 0 4
69636: PUSH
69637: LD_INT 1
69639: PLUS
69640: ARRAY
69641: ST_TO_ADDR
69642: GO 69897
69644: LD_INT 36
69646: DOUBLE
69647: EQUAL
69648: IFTRUE 69652
69650: GO 69708
69652: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69653: LD_ADDR_VAR 0 9
69657: PUSH
69658: LD_VAR 0 47
69662: PUSH
69663: LD_VAR 0 48
69667: PUSH
69668: LD_VAR 0 49
69672: PUSH
69673: LD_VAR 0 50
69677: PUSH
69678: LD_VAR 0 51
69682: PUSH
69683: LD_VAR 0 52
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: PUSH
69696: LD_VAR 0 4
69700: PUSH
69701: LD_INT 1
69703: PLUS
69704: ARRAY
69705: ST_TO_ADDR
69706: GO 69897
69708: LD_INT 4
69710: DOUBLE
69711: EQUAL
69712: IFTRUE 69734
69714: LD_INT 5
69716: DOUBLE
69717: EQUAL
69718: IFTRUE 69734
69720: LD_INT 34
69722: DOUBLE
69723: EQUAL
69724: IFTRUE 69734
69726: LD_INT 37
69728: DOUBLE
69729: EQUAL
69730: IFTRUE 69734
69732: GO 69790
69734: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69735: LD_ADDR_VAR 0 9
69739: PUSH
69740: LD_VAR 0 53
69744: PUSH
69745: LD_VAR 0 54
69749: PUSH
69750: LD_VAR 0 55
69754: PUSH
69755: LD_VAR 0 56
69759: PUSH
69760: LD_VAR 0 57
69764: PUSH
69765: LD_VAR 0 58
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: PUSH
69778: LD_VAR 0 4
69782: PUSH
69783: LD_INT 1
69785: PLUS
69786: ARRAY
69787: ST_TO_ADDR
69788: GO 69897
69790: LD_INT 31
69792: DOUBLE
69793: EQUAL
69794: IFTRUE 69840
69796: LD_INT 32
69798: DOUBLE
69799: EQUAL
69800: IFTRUE 69840
69802: LD_INT 33
69804: DOUBLE
69805: EQUAL
69806: IFTRUE 69840
69808: LD_INT 27
69810: DOUBLE
69811: EQUAL
69812: IFTRUE 69840
69814: LD_INT 26
69816: DOUBLE
69817: EQUAL
69818: IFTRUE 69840
69820: LD_INT 28
69822: DOUBLE
69823: EQUAL
69824: IFTRUE 69840
69826: LD_INT 29
69828: DOUBLE
69829: EQUAL
69830: IFTRUE 69840
69832: LD_INT 30
69834: DOUBLE
69835: EQUAL
69836: IFTRUE 69840
69838: GO 69896
69840: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69841: LD_ADDR_VAR 0 9
69845: PUSH
69846: LD_VAR 0 59
69850: PUSH
69851: LD_VAR 0 60
69855: PUSH
69856: LD_VAR 0 61
69860: PUSH
69861: LD_VAR 0 62
69865: PUSH
69866: LD_VAR 0 63
69870: PUSH
69871: LD_VAR 0 64
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: PUSH
69884: LD_VAR 0 4
69888: PUSH
69889: LD_INT 1
69891: PLUS
69892: ARRAY
69893: ST_TO_ADDR
69894: GO 69897
69896: POP
// temp_list2 = [ ] ;
69897: LD_ADDR_VAR 0 10
69901: PUSH
69902: EMPTY
69903: ST_TO_ADDR
// for i in temp_list do
69904: LD_ADDR_VAR 0 8
69908: PUSH
69909: LD_VAR 0 9
69913: PUSH
69914: FOR_IN
69915: IFFALSE 69967
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69917: LD_ADDR_VAR 0 10
69921: PUSH
69922: LD_VAR 0 10
69926: PUSH
69927: LD_VAR 0 8
69931: PUSH
69932: LD_INT 1
69934: ARRAY
69935: PUSH
69936: LD_VAR 0 2
69940: PLUS
69941: PUSH
69942: LD_VAR 0 8
69946: PUSH
69947: LD_INT 2
69949: ARRAY
69950: PUSH
69951: LD_VAR 0 3
69955: PLUS
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: EMPTY
69962: LIST
69963: ADD
69964: ST_TO_ADDR
69965: GO 69914
69967: POP
69968: POP
// result = temp_list2 ;
69969: LD_ADDR_VAR 0 7
69973: PUSH
69974: LD_VAR 0 10
69978: ST_TO_ADDR
// end ;
69979: LD_VAR 0 7
69983: RET
// export function EnemyInRange ( unit , dist ) ; begin
69984: LD_INT 0
69986: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69987: LD_ADDR_VAR 0 3
69991: PUSH
69992: LD_VAR 0 1
69996: PPUSH
69997: CALL_OW 255
70001: PPUSH
70002: LD_VAR 0 1
70006: PPUSH
70007: CALL_OW 250
70011: PPUSH
70012: LD_VAR 0 1
70016: PPUSH
70017: CALL_OW 251
70021: PPUSH
70022: LD_VAR 0 2
70026: PPUSH
70027: CALL 43380 0 4
70031: PUSH
70032: LD_INT 4
70034: ARRAY
70035: ST_TO_ADDR
// end ;
70036: LD_VAR 0 3
70040: RET
// export function PlayerSeeMe ( unit ) ; begin
70041: LD_INT 0
70043: PPUSH
// result := See ( your_side , unit ) ;
70044: LD_ADDR_VAR 0 2
70048: PUSH
70049: LD_OWVAR 2
70053: PPUSH
70054: LD_VAR 0 1
70058: PPUSH
70059: CALL_OW 292
70063: ST_TO_ADDR
// end ;
70064: LD_VAR 0 2
70068: RET
// export function ReverseDir ( unit ) ; begin
70069: LD_INT 0
70071: PPUSH
// if not unit then
70072: LD_VAR 0 1
70076: NOT
70077: IFFALSE 70081
// exit ;
70079: GO 70104
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70081: LD_ADDR_VAR 0 2
70085: PUSH
70086: LD_VAR 0 1
70090: PPUSH
70091: CALL_OW 254
70095: PUSH
70096: LD_INT 3
70098: PLUS
70099: PUSH
70100: LD_INT 6
70102: MOD
70103: ST_TO_ADDR
// end ;
70104: LD_VAR 0 2
70108: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70109: LD_INT 0
70111: PPUSH
70112: PPUSH
70113: PPUSH
70114: PPUSH
70115: PPUSH
// if not hexes then
70116: LD_VAR 0 2
70120: NOT
70121: IFFALSE 70125
// exit ;
70123: GO 70273
// dist := 9999 ;
70125: LD_ADDR_VAR 0 5
70129: PUSH
70130: LD_INT 9999
70132: ST_TO_ADDR
// for i = 1 to hexes do
70133: LD_ADDR_VAR 0 4
70137: PUSH
70138: DOUBLE
70139: LD_INT 1
70141: DEC
70142: ST_TO_ADDR
70143: LD_VAR 0 2
70147: PUSH
70148: FOR_TO
70149: IFFALSE 70261
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70151: LD_VAR 0 1
70155: PPUSH
70156: LD_VAR 0 2
70160: PUSH
70161: LD_VAR 0 4
70165: ARRAY
70166: PUSH
70167: LD_INT 1
70169: ARRAY
70170: PPUSH
70171: LD_VAR 0 2
70175: PUSH
70176: LD_VAR 0 4
70180: ARRAY
70181: PUSH
70182: LD_INT 2
70184: ARRAY
70185: PPUSH
70186: CALL_OW 297
70190: PUSH
70191: LD_VAR 0 5
70195: LESS
70196: IFFALSE 70259
// begin hex := hexes [ i ] ;
70198: LD_ADDR_VAR 0 7
70202: PUSH
70203: LD_VAR 0 2
70207: PUSH
70208: LD_VAR 0 4
70212: ARRAY
70213: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70214: LD_ADDR_VAR 0 5
70218: PUSH
70219: LD_VAR 0 1
70223: PPUSH
70224: LD_VAR 0 2
70228: PUSH
70229: LD_VAR 0 4
70233: ARRAY
70234: PUSH
70235: LD_INT 1
70237: ARRAY
70238: PPUSH
70239: LD_VAR 0 2
70243: PUSH
70244: LD_VAR 0 4
70248: ARRAY
70249: PUSH
70250: LD_INT 2
70252: ARRAY
70253: PPUSH
70254: CALL_OW 297
70258: ST_TO_ADDR
// end ; end ;
70259: GO 70148
70261: POP
70262: POP
// result := hex ;
70263: LD_ADDR_VAR 0 3
70267: PUSH
70268: LD_VAR 0 7
70272: ST_TO_ADDR
// end ;
70273: LD_VAR 0 3
70277: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70278: LD_INT 0
70280: PPUSH
70281: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70282: LD_VAR 0 1
70286: NOT
70287: PUSH
70288: LD_VAR 0 1
70292: PUSH
70293: LD_INT 21
70295: PUSH
70296: LD_INT 2
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 23
70305: PUSH
70306: LD_INT 2
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PPUSH
70317: CALL_OW 69
70321: IN
70322: NOT
70323: OR
70324: IFFALSE 70328
// exit ;
70326: GO 70375
// for i = 1 to 3 do
70328: LD_ADDR_VAR 0 3
70332: PUSH
70333: DOUBLE
70334: LD_INT 1
70336: DEC
70337: ST_TO_ADDR
70338: LD_INT 3
70340: PUSH
70341: FOR_TO
70342: IFFALSE 70373
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70344: LD_VAR 0 1
70348: PPUSH
70349: CALL_OW 250
70353: PPUSH
70354: LD_VAR 0 1
70358: PPUSH
70359: CALL_OW 251
70363: PPUSH
70364: LD_INT 1
70366: PPUSH
70367: CALL_OW 453
70371: GO 70341
70373: POP
70374: POP
// end ;
70375: LD_VAR 0 2
70379: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70380: LD_INT 0
70382: PPUSH
70383: PPUSH
70384: PPUSH
70385: PPUSH
70386: PPUSH
70387: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70388: LD_VAR 0 1
70392: NOT
70393: PUSH
70394: LD_VAR 0 2
70398: NOT
70399: OR
70400: PUSH
70401: LD_VAR 0 1
70405: PPUSH
70406: CALL_OW 314
70410: OR
70411: IFFALSE 70415
// exit ;
70413: GO 70856
// x := GetX ( enemy_unit ) ;
70415: LD_ADDR_VAR 0 7
70419: PUSH
70420: LD_VAR 0 2
70424: PPUSH
70425: CALL_OW 250
70429: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70430: LD_ADDR_VAR 0 8
70434: PUSH
70435: LD_VAR 0 2
70439: PPUSH
70440: CALL_OW 251
70444: ST_TO_ADDR
// if not x or not y then
70445: LD_VAR 0 7
70449: NOT
70450: PUSH
70451: LD_VAR 0 8
70455: NOT
70456: OR
70457: IFFALSE 70461
// exit ;
70459: GO 70856
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70461: LD_ADDR_VAR 0 6
70465: PUSH
70466: LD_VAR 0 7
70470: PPUSH
70471: LD_INT 0
70473: PPUSH
70474: LD_INT 4
70476: PPUSH
70477: CALL_OW 272
70481: PUSH
70482: LD_VAR 0 8
70486: PPUSH
70487: LD_INT 0
70489: PPUSH
70490: LD_INT 4
70492: PPUSH
70493: CALL_OW 273
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_VAR 0 7
70506: PPUSH
70507: LD_INT 1
70509: PPUSH
70510: LD_INT 4
70512: PPUSH
70513: CALL_OW 272
70517: PUSH
70518: LD_VAR 0 8
70522: PPUSH
70523: LD_INT 1
70525: PPUSH
70526: LD_INT 4
70528: PPUSH
70529: CALL_OW 273
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_VAR 0 7
70542: PPUSH
70543: LD_INT 2
70545: PPUSH
70546: LD_INT 4
70548: PPUSH
70549: CALL_OW 272
70553: PUSH
70554: LD_VAR 0 8
70558: PPUSH
70559: LD_INT 2
70561: PPUSH
70562: LD_INT 4
70564: PPUSH
70565: CALL_OW 273
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_VAR 0 7
70578: PPUSH
70579: LD_INT 3
70581: PPUSH
70582: LD_INT 4
70584: PPUSH
70585: CALL_OW 272
70589: PUSH
70590: LD_VAR 0 8
70594: PPUSH
70595: LD_INT 3
70597: PPUSH
70598: LD_INT 4
70600: PPUSH
70601: CALL_OW 273
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_VAR 0 7
70614: PPUSH
70615: LD_INT 4
70617: PPUSH
70618: LD_INT 4
70620: PPUSH
70621: CALL_OW 272
70625: PUSH
70626: LD_VAR 0 8
70630: PPUSH
70631: LD_INT 4
70633: PPUSH
70634: LD_INT 4
70636: PPUSH
70637: CALL_OW 273
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_VAR 0 7
70650: PPUSH
70651: LD_INT 5
70653: PPUSH
70654: LD_INT 4
70656: PPUSH
70657: CALL_OW 272
70661: PUSH
70662: LD_VAR 0 8
70666: PPUSH
70667: LD_INT 5
70669: PPUSH
70670: LD_INT 4
70672: PPUSH
70673: CALL_OW 273
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: ST_TO_ADDR
// for i = tmp downto 1 do
70690: LD_ADDR_VAR 0 4
70694: PUSH
70695: DOUBLE
70696: LD_VAR 0 6
70700: INC
70701: ST_TO_ADDR
70702: LD_INT 1
70704: PUSH
70705: FOR_DOWNTO
70706: IFFALSE 70807
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70708: LD_VAR 0 6
70712: PUSH
70713: LD_VAR 0 4
70717: ARRAY
70718: PUSH
70719: LD_INT 1
70721: ARRAY
70722: PPUSH
70723: LD_VAR 0 6
70727: PUSH
70728: LD_VAR 0 4
70732: ARRAY
70733: PUSH
70734: LD_INT 2
70736: ARRAY
70737: PPUSH
70738: CALL_OW 488
70742: NOT
70743: PUSH
70744: LD_VAR 0 6
70748: PUSH
70749: LD_VAR 0 4
70753: ARRAY
70754: PUSH
70755: LD_INT 1
70757: ARRAY
70758: PPUSH
70759: LD_VAR 0 6
70763: PUSH
70764: LD_VAR 0 4
70768: ARRAY
70769: PUSH
70770: LD_INT 2
70772: ARRAY
70773: PPUSH
70774: CALL_OW 428
70778: PUSH
70779: LD_INT 0
70781: NONEQUAL
70782: OR
70783: IFFALSE 70805
// tmp := Delete ( tmp , i ) ;
70785: LD_ADDR_VAR 0 6
70789: PUSH
70790: LD_VAR 0 6
70794: PPUSH
70795: LD_VAR 0 4
70799: PPUSH
70800: CALL_OW 3
70804: ST_TO_ADDR
70805: GO 70705
70807: POP
70808: POP
// j := GetClosestHex ( unit , tmp ) ;
70809: LD_ADDR_VAR 0 5
70813: PUSH
70814: LD_VAR 0 1
70818: PPUSH
70819: LD_VAR 0 6
70823: PPUSH
70824: CALL 70109 0 2
70828: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70829: LD_VAR 0 1
70833: PPUSH
70834: LD_VAR 0 5
70838: PUSH
70839: LD_INT 1
70841: ARRAY
70842: PPUSH
70843: LD_VAR 0 5
70847: PUSH
70848: LD_INT 2
70850: ARRAY
70851: PPUSH
70852: CALL_OW 111
// end ;
70856: LD_VAR 0 3
70860: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70861: LD_INT 0
70863: PPUSH
70864: PPUSH
70865: PPUSH
// uc_side = 0 ;
70866: LD_ADDR_OWVAR 20
70870: PUSH
70871: LD_INT 0
70873: ST_TO_ADDR
// uc_nation = 0 ;
70874: LD_ADDR_OWVAR 21
70878: PUSH
70879: LD_INT 0
70881: ST_TO_ADDR
// InitHc_All ( ) ;
70882: CALL_OW 584
// InitVc ;
70886: CALL_OW 20
// if mastodonts then
70890: LD_VAR 0 6
70894: IFFALSE 70961
// for i = 1 to mastodonts do
70896: LD_ADDR_VAR 0 11
70900: PUSH
70901: DOUBLE
70902: LD_INT 1
70904: DEC
70905: ST_TO_ADDR
70906: LD_VAR 0 6
70910: PUSH
70911: FOR_TO
70912: IFFALSE 70959
// begin vc_chassis := 31 ;
70914: LD_ADDR_OWVAR 37
70918: PUSH
70919: LD_INT 31
70921: ST_TO_ADDR
// vc_control := control_rider ;
70922: LD_ADDR_OWVAR 38
70926: PUSH
70927: LD_INT 4
70929: ST_TO_ADDR
// animal := CreateVehicle ;
70930: LD_ADDR_VAR 0 12
70934: PUSH
70935: CALL_OW 45
70939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70940: LD_VAR 0 12
70944: PPUSH
70945: LD_VAR 0 8
70949: PPUSH
70950: LD_INT 0
70952: PPUSH
70953: CALL 73096 0 3
// end ;
70957: GO 70911
70959: POP
70960: POP
// if horses then
70961: LD_VAR 0 5
70965: IFFALSE 71032
// for i = 1 to horses do
70967: LD_ADDR_VAR 0 11
70971: PUSH
70972: DOUBLE
70973: LD_INT 1
70975: DEC
70976: ST_TO_ADDR
70977: LD_VAR 0 5
70981: PUSH
70982: FOR_TO
70983: IFFALSE 71030
// begin hc_class := 21 ;
70985: LD_ADDR_OWVAR 28
70989: PUSH
70990: LD_INT 21
70992: ST_TO_ADDR
// hc_gallery :=  ;
70993: LD_ADDR_OWVAR 33
70997: PUSH
70998: LD_STRING 
71000: ST_TO_ADDR
// animal := CreateHuman ;
71001: LD_ADDR_VAR 0 12
71005: PUSH
71006: CALL_OW 44
71010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71011: LD_VAR 0 12
71015: PPUSH
71016: LD_VAR 0 8
71020: PPUSH
71021: LD_INT 0
71023: PPUSH
71024: CALL 73096 0 3
// end ;
71028: GO 70982
71030: POP
71031: POP
// if birds then
71032: LD_VAR 0 1
71036: IFFALSE 71103
// for i = 1 to birds do
71038: LD_ADDR_VAR 0 11
71042: PUSH
71043: DOUBLE
71044: LD_INT 1
71046: DEC
71047: ST_TO_ADDR
71048: LD_VAR 0 1
71052: PUSH
71053: FOR_TO
71054: IFFALSE 71101
// begin hc_class = 18 ;
71056: LD_ADDR_OWVAR 28
71060: PUSH
71061: LD_INT 18
71063: ST_TO_ADDR
// hc_gallery =  ;
71064: LD_ADDR_OWVAR 33
71068: PUSH
71069: LD_STRING 
71071: ST_TO_ADDR
// animal := CreateHuman ;
71072: LD_ADDR_VAR 0 12
71076: PUSH
71077: CALL_OW 44
71081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71082: LD_VAR 0 12
71086: PPUSH
71087: LD_VAR 0 8
71091: PPUSH
71092: LD_INT 0
71094: PPUSH
71095: CALL 73096 0 3
// end ;
71099: GO 71053
71101: POP
71102: POP
// if tigers then
71103: LD_VAR 0 2
71107: IFFALSE 71191
// for i = 1 to tigers do
71109: LD_ADDR_VAR 0 11
71113: PUSH
71114: DOUBLE
71115: LD_INT 1
71117: DEC
71118: ST_TO_ADDR
71119: LD_VAR 0 2
71123: PUSH
71124: FOR_TO
71125: IFFALSE 71189
// begin hc_class = class_tiger ;
71127: LD_ADDR_OWVAR 28
71131: PUSH
71132: LD_INT 14
71134: ST_TO_ADDR
// hc_gallery =  ;
71135: LD_ADDR_OWVAR 33
71139: PUSH
71140: LD_STRING 
71142: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71143: LD_ADDR_OWVAR 35
71147: PUSH
71148: LD_INT 7
71150: NEG
71151: PPUSH
71152: LD_INT 7
71154: PPUSH
71155: CALL_OW 12
71159: ST_TO_ADDR
// animal := CreateHuman ;
71160: LD_ADDR_VAR 0 12
71164: PUSH
71165: CALL_OW 44
71169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71170: LD_VAR 0 12
71174: PPUSH
71175: LD_VAR 0 8
71179: PPUSH
71180: LD_INT 0
71182: PPUSH
71183: CALL 73096 0 3
// end ;
71187: GO 71124
71189: POP
71190: POP
// if apemans then
71191: LD_VAR 0 3
71195: IFFALSE 71318
// for i = 1 to apemans do
71197: LD_ADDR_VAR 0 11
71201: PUSH
71202: DOUBLE
71203: LD_INT 1
71205: DEC
71206: ST_TO_ADDR
71207: LD_VAR 0 3
71211: PUSH
71212: FOR_TO
71213: IFFALSE 71316
// begin hc_class = class_apeman ;
71215: LD_ADDR_OWVAR 28
71219: PUSH
71220: LD_INT 12
71222: ST_TO_ADDR
// hc_gallery =  ;
71223: LD_ADDR_OWVAR 33
71227: PUSH
71228: LD_STRING 
71230: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71231: LD_ADDR_OWVAR 35
71235: PUSH
71236: LD_INT 2
71238: NEG
71239: PPUSH
71240: LD_INT 2
71242: PPUSH
71243: CALL_OW 12
71247: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71248: LD_ADDR_OWVAR 31
71252: PUSH
71253: LD_INT 1
71255: PPUSH
71256: LD_INT 3
71258: PPUSH
71259: CALL_OW 12
71263: PUSH
71264: LD_INT 1
71266: PPUSH
71267: LD_INT 3
71269: PPUSH
71270: CALL_OW 12
71274: PUSH
71275: LD_INT 0
71277: PUSH
71278: LD_INT 0
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: ST_TO_ADDR
// animal := CreateHuman ;
71287: LD_ADDR_VAR 0 12
71291: PUSH
71292: CALL_OW 44
71296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71297: LD_VAR 0 12
71301: PPUSH
71302: LD_VAR 0 8
71306: PPUSH
71307: LD_INT 0
71309: PPUSH
71310: CALL 73096 0 3
// end ;
71314: GO 71212
71316: POP
71317: POP
// if enchidnas then
71318: LD_VAR 0 4
71322: IFFALSE 71389
// for i = 1 to enchidnas do
71324: LD_ADDR_VAR 0 11
71328: PUSH
71329: DOUBLE
71330: LD_INT 1
71332: DEC
71333: ST_TO_ADDR
71334: LD_VAR 0 4
71338: PUSH
71339: FOR_TO
71340: IFFALSE 71387
// begin hc_class = 13 ;
71342: LD_ADDR_OWVAR 28
71346: PUSH
71347: LD_INT 13
71349: ST_TO_ADDR
// hc_gallery =  ;
71350: LD_ADDR_OWVAR 33
71354: PUSH
71355: LD_STRING 
71357: ST_TO_ADDR
// animal := CreateHuman ;
71358: LD_ADDR_VAR 0 12
71362: PUSH
71363: CALL_OW 44
71367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71368: LD_VAR 0 12
71372: PPUSH
71373: LD_VAR 0 8
71377: PPUSH
71378: LD_INT 0
71380: PPUSH
71381: CALL 73096 0 3
// end ;
71385: GO 71339
71387: POP
71388: POP
// if fishes then
71389: LD_VAR 0 7
71393: IFFALSE 71460
// for i = 1 to fishes do
71395: LD_ADDR_VAR 0 11
71399: PUSH
71400: DOUBLE
71401: LD_INT 1
71403: DEC
71404: ST_TO_ADDR
71405: LD_VAR 0 7
71409: PUSH
71410: FOR_TO
71411: IFFALSE 71458
// begin hc_class = 20 ;
71413: LD_ADDR_OWVAR 28
71417: PUSH
71418: LD_INT 20
71420: ST_TO_ADDR
// hc_gallery =  ;
71421: LD_ADDR_OWVAR 33
71425: PUSH
71426: LD_STRING 
71428: ST_TO_ADDR
// animal := CreateHuman ;
71429: LD_ADDR_VAR 0 12
71433: PUSH
71434: CALL_OW 44
71438: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71439: LD_VAR 0 12
71443: PPUSH
71444: LD_VAR 0 9
71448: PPUSH
71449: LD_INT 0
71451: PPUSH
71452: CALL 73096 0 3
// end ;
71456: GO 71410
71458: POP
71459: POP
// end ;
71460: LD_VAR 0 10
71464: RET
// export function WantHeal ( sci , unit ) ; begin
71465: LD_INT 0
71467: PPUSH
// if GetTaskList ( sci ) > 0 then
71468: LD_VAR 0 1
71472: PPUSH
71473: CALL_OW 437
71477: PUSH
71478: LD_INT 0
71480: GREATER
71481: IFFALSE 71551
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71483: LD_VAR 0 1
71487: PPUSH
71488: CALL_OW 437
71492: PUSH
71493: LD_INT 1
71495: ARRAY
71496: PUSH
71497: LD_INT 1
71499: ARRAY
71500: PUSH
71501: LD_STRING l
71503: EQUAL
71504: PUSH
71505: LD_VAR 0 1
71509: PPUSH
71510: CALL_OW 437
71514: PUSH
71515: LD_INT 1
71517: ARRAY
71518: PUSH
71519: LD_INT 4
71521: ARRAY
71522: PUSH
71523: LD_VAR 0 2
71527: EQUAL
71528: AND
71529: IFFALSE 71541
// result := true else
71531: LD_ADDR_VAR 0 3
71535: PUSH
71536: LD_INT 1
71538: ST_TO_ADDR
71539: GO 71549
// result := false ;
71541: LD_ADDR_VAR 0 3
71545: PUSH
71546: LD_INT 0
71548: ST_TO_ADDR
// end else
71549: GO 71559
// result := false ;
71551: LD_ADDR_VAR 0 3
71555: PUSH
71556: LD_INT 0
71558: ST_TO_ADDR
// end ;
71559: LD_VAR 0 3
71563: RET
// export function HealTarget ( sci ) ; begin
71564: LD_INT 0
71566: PPUSH
// if not sci then
71567: LD_VAR 0 1
71571: NOT
71572: IFFALSE 71576
// exit ;
71574: GO 71641
// result := 0 ;
71576: LD_ADDR_VAR 0 2
71580: PUSH
71581: LD_INT 0
71583: ST_TO_ADDR
// if GetTaskList ( sci ) then
71584: LD_VAR 0 1
71588: PPUSH
71589: CALL_OW 437
71593: IFFALSE 71641
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71595: LD_VAR 0 1
71599: PPUSH
71600: CALL_OW 437
71604: PUSH
71605: LD_INT 1
71607: ARRAY
71608: PUSH
71609: LD_INT 1
71611: ARRAY
71612: PUSH
71613: LD_STRING l
71615: EQUAL
71616: IFFALSE 71641
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71618: LD_ADDR_VAR 0 2
71622: PUSH
71623: LD_VAR 0 1
71627: PPUSH
71628: CALL_OW 437
71632: PUSH
71633: LD_INT 1
71635: ARRAY
71636: PUSH
71637: LD_INT 4
71639: ARRAY
71640: ST_TO_ADDR
// end ;
71641: LD_VAR 0 2
71645: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71646: LD_INT 0
71648: PPUSH
71649: PPUSH
71650: PPUSH
71651: PPUSH
// if not base_units then
71652: LD_VAR 0 1
71656: NOT
71657: IFFALSE 71661
// exit ;
71659: GO 71748
// result := false ;
71661: LD_ADDR_VAR 0 2
71665: PUSH
71666: LD_INT 0
71668: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71669: LD_ADDR_VAR 0 5
71673: PUSH
71674: LD_VAR 0 1
71678: PPUSH
71679: LD_INT 21
71681: PUSH
71682: LD_INT 3
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PPUSH
71689: CALL_OW 72
71693: ST_TO_ADDR
// if not tmp then
71694: LD_VAR 0 5
71698: NOT
71699: IFFALSE 71703
// exit ;
71701: GO 71748
// for i in tmp do
71703: LD_ADDR_VAR 0 3
71707: PUSH
71708: LD_VAR 0 5
71712: PUSH
71713: FOR_IN
71714: IFFALSE 71746
// begin result := EnemyInRange ( i , 22 ) ;
71716: LD_ADDR_VAR 0 2
71720: PUSH
71721: LD_VAR 0 3
71725: PPUSH
71726: LD_INT 22
71728: PPUSH
71729: CALL 69984 0 2
71733: ST_TO_ADDR
// if result then
71734: LD_VAR 0 2
71738: IFFALSE 71744
// exit ;
71740: POP
71741: POP
71742: GO 71748
// end ;
71744: GO 71713
71746: POP
71747: POP
// end ;
71748: LD_VAR 0 2
71752: RET
// export function FilterByTag ( units , tag ) ; begin
71753: LD_INT 0
71755: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71756: LD_ADDR_VAR 0 3
71760: PUSH
71761: LD_VAR 0 1
71765: PPUSH
71766: LD_INT 120
71768: PUSH
71769: LD_VAR 0 2
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PPUSH
71778: CALL_OW 72
71782: ST_TO_ADDR
// end ;
71783: LD_VAR 0 3
71787: RET
// export function IsDriver ( un ) ; begin
71788: LD_INT 0
71790: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71791: LD_ADDR_VAR 0 2
71795: PUSH
71796: LD_VAR 0 1
71800: PUSH
71801: LD_INT 55
71803: PUSH
71804: EMPTY
71805: LIST
71806: PPUSH
71807: CALL_OW 69
71811: IN
71812: ST_TO_ADDR
// end ;
71813: LD_VAR 0 2
71817: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71818: LD_INT 0
71820: PPUSH
71821: PPUSH
// list := [ ] ;
71822: LD_ADDR_VAR 0 5
71826: PUSH
71827: EMPTY
71828: ST_TO_ADDR
// case d of 0 :
71829: LD_VAR 0 3
71833: PUSH
71834: LD_INT 0
71836: DOUBLE
71837: EQUAL
71838: IFTRUE 71842
71840: GO 71975
71842: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71843: LD_ADDR_VAR 0 5
71847: PUSH
71848: LD_VAR 0 1
71852: PUSH
71853: LD_INT 4
71855: MINUS
71856: PUSH
71857: LD_VAR 0 2
71861: PUSH
71862: LD_INT 4
71864: MINUS
71865: PUSH
71866: LD_INT 2
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: LIST
71873: PUSH
71874: LD_VAR 0 1
71878: PUSH
71879: LD_INT 3
71881: MINUS
71882: PUSH
71883: LD_VAR 0 2
71887: PUSH
71888: LD_INT 1
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: LIST
71895: PUSH
71896: LD_VAR 0 1
71900: PUSH
71901: LD_INT 4
71903: PLUS
71904: PUSH
71905: LD_VAR 0 2
71909: PUSH
71910: LD_INT 4
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: LIST
71917: PUSH
71918: LD_VAR 0 1
71922: PUSH
71923: LD_INT 3
71925: PLUS
71926: PUSH
71927: LD_VAR 0 2
71931: PUSH
71932: LD_INT 3
71934: PLUS
71935: PUSH
71936: LD_INT 5
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: LIST
71943: PUSH
71944: LD_VAR 0 1
71948: PUSH
71949: LD_VAR 0 2
71953: PUSH
71954: LD_INT 4
71956: PLUS
71957: PUSH
71958: LD_INT 0
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: LIST
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: ST_TO_ADDR
// end ; 1 :
71973: GO 72673
71975: LD_INT 1
71977: DOUBLE
71978: EQUAL
71979: IFTRUE 71983
71981: GO 72116
71983: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71984: LD_ADDR_VAR 0 5
71988: PUSH
71989: LD_VAR 0 1
71993: PUSH
71994: LD_VAR 0 2
71998: PUSH
71999: LD_INT 4
72001: MINUS
72002: PUSH
72003: LD_INT 3
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: LIST
72010: PUSH
72011: LD_VAR 0 1
72015: PUSH
72016: LD_INT 3
72018: MINUS
72019: PUSH
72020: LD_VAR 0 2
72024: PUSH
72025: LD_INT 3
72027: MINUS
72028: PUSH
72029: LD_INT 2
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: LIST
72036: PUSH
72037: LD_VAR 0 1
72041: PUSH
72042: LD_INT 4
72044: MINUS
72045: PUSH
72046: LD_VAR 0 2
72050: PUSH
72051: LD_INT 1
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: LIST
72058: PUSH
72059: LD_VAR 0 1
72063: PUSH
72064: LD_VAR 0 2
72068: PUSH
72069: LD_INT 3
72071: PLUS
72072: PUSH
72073: LD_INT 0
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: LIST
72080: PUSH
72081: LD_VAR 0 1
72085: PUSH
72086: LD_INT 4
72088: PLUS
72089: PUSH
72090: LD_VAR 0 2
72094: PUSH
72095: LD_INT 4
72097: PLUS
72098: PUSH
72099: LD_INT 5
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: LIST
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: ST_TO_ADDR
// end ; 2 :
72114: GO 72673
72116: LD_INT 2
72118: DOUBLE
72119: EQUAL
72120: IFTRUE 72124
72122: GO 72253
72124: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72125: LD_ADDR_VAR 0 5
72129: PUSH
72130: LD_VAR 0 1
72134: PUSH
72135: LD_VAR 0 2
72139: PUSH
72140: LD_INT 3
72142: MINUS
72143: PUSH
72144: LD_INT 3
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: LIST
72151: PUSH
72152: LD_VAR 0 1
72156: PUSH
72157: LD_INT 4
72159: PLUS
72160: PUSH
72161: LD_VAR 0 2
72165: PUSH
72166: LD_INT 4
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: LIST
72173: PUSH
72174: LD_VAR 0 1
72178: PUSH
72179: LD_VAR 0 2
72183: PUSH
72184: LD_INT 4
72186: PLUS
72187: PUSH
72188: LD_INT 0
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: LIST
72195: PUSH
72196: LD_VAR 0 1
72200: PUSH
72201: LD_INT 3
72203: MINUS
72204: PUSH
72205: LD_VAR 0 2
72209: PUSH
72210: LD_INT 1
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: LIST
72217: PUSH
72218: LD_VAR 0 1
72222: PUSH
72223: LD_INT 4
72225: MINUS
72226: PUSH
72227: LD_VAR 0 2
72231: PUSH
72232: LD_INT 4
72234: MINUS
72235: PUSH
72236: LD_INT 2
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: ST_TO_ADDR
// end ; 3 :
72251: GO 72673
72253: LD_INT 3
72255: DOUBLE
72256: EQUAL
72257: IFTRUE 72261
72259: GO 72394
72261: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72262: LD_ADDR_VAR 0 5
72266: PUSH
72267: LD_VAR 0 1
72271: PUSH
72272: LD_INT 3
72274: PLUS
72275: PUSH
72276: LD_VAR 0 2
72280: PUSH
72281: LD_INT 4
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: LIST
72288: PUSH
72289: LD_VAR 0 1
72293: PUSH
72294: LD_INT 4
72296: PLUS
72297: PUSH
72298: LD_VAR 0 2
72302: PUSH
72303: LD_INT 4
72305: PLUS
72306: PUSH
72307: LD_INT 5
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: LIST
72314: PUSH
72315: LD_VAR 0 1
72319: PUSH
72320: LD_INT 4
72322: MINUS
72323: PUSH
72324: LD_VAR 0 2
72328: PUSH
72329: LD_INT 1
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: LIST
72336: PUSH
72337: LD_VAR 0 1
72341: PUSH
72342: LD_VAR 0 2
72346: PUSH
72347: LD_INT 4
72349: MINUS
72350: PUSH
72351: LD_INT 3
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: LIST
72358: PUSH
72359: LD_VAR 0 1
72363: PUSH
72364: LD_INT 3
72366: MINUS
72367: PUSH
72368: LD_VAR 0 2
72372: PUSH
72373: LD_INT 3
72375: MINUS
72376: PUSH
72377: LD_INT 2
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: LIST
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: ST_TO_ADDR
// end ; 4 :
72392: GO 72673
72394: LD_INT 4
72396: DOUBLE
72397: EQUAL
72398: IFTRUE 72402
72400: GO 72535
72402: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72403: LD_ADDR_VAR 0 5
72407: PUSH
72408: LD_VAR 0 1
72412: PUSH
72413: LD_VAR 0 2
72417: PUSH
72418: LD_INT 4
72420: PLUS
72421: PUSH
72422: LD_INT 0
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: LIST
72429: PUSH
72430: LD_VAR 0 1
72434: PUSH
72435: LD_INT 3
72437: PLUS
72438: PUSH
72439: LD_VAR 0 2
72443: PUSH
72444: LD_INT 3
72446: PLUS
72447: PUSH
72448: LD_INT 5
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: LIST
72455: PUSH
72456: LD_VAR 0 1
72460: PUSH
72461: LD_INT 4
72463: PLUS
72464: PUSH
72465: LD_VAR 0 2
72469: PUSH
72470: LD_INT 4
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: LIST
72477: PUSH
72478: LD_VAR 0 1
72482: PUSH
72483: LD_VAR 0 2
72487: PUSH
72488: LD_INT 3
72490: MINUS
72491: PUSH
72492: LD_INT 3
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: LIST
72499: PUSH
72500: LD_VAR 0 1
72504: PUSH
72505: LD_INT 4
72507: MINUS
72508: PUSH
72509: LD_VAR 0 2
72513: PUSH
72514: LD_INT 4
72516: MINUS
72517: PUSH
72518: LD_INT 2
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: LIST
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: ST_TO_ADDR
// end ; 5 :
72533: GO 72673
72535: LD_INT 5
72537: DOUBLE
72538: EQUAL
72539: IFTRUE 72543
72541: GO 72672
72543: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72544: LD_ADDR_VAR 0 5
72548: PUSH
72549: LD_VAR 0 1
72553: PUSH
72554: LD_INT 4
72556: MINUS
72557: PUSH
72558: LD_VAR 0 2
72562: PUSH
72563: LD_INT 1
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: LIST
72570: PUSH
72571: LD_VAR 0 1
72575: PUSH
72576: LD_VAR 0 2
72580: PUSH
72581: LD_INT 4
72583: MINUS
72584: PUSH
72585: LD_INT 3
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: LIST
72592: PUSH
72593: LD_VAR 0 1
72597: PUSH
72598: LD_INT 4
72600: PLUS
72601: PUSH
72602: LD_VAR 0 2
72606: PUSH
72607: LD_INT 4
72609: PLUS
72610: PUSH
72611: LD_INT 5
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: LIST
72618: PUSH
72619: LD_VAR 0 1
72623: PUSH
72624: LD_INT 3
72626: PLUS
72627: PUSH
72628: LD_VAR 0 2
72632: PUSH
72633: LD_INT 4
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: LIST
72640: PUSH
72641: LD_VAR 0 1
72645: PUSH
72646: LD_VAR 0 2
72650: PUSH
72651: LD_INT 3
72653: PLUS
72654: PUSH
72655: LD_INT 0
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: LIST
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: ST_TO_ADDR
// end ; end ;
72670: GO 72673
72672: POP
// result := list ;
72673: LD_ADDR_VAR 0 4
72677: PUSH
72678: LD_VAR 0 5
72682: ST_TO_ADDR
// end ;
72683: LD_VAR 0 4
72687: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72688: LD_INT 0
72690: PPUSH
72691: PPUSH
72692: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72693: LD_VAR 0 1
72697: NOT
72698: PUSH
72699: LD_VAR 0 2
72703: PUSH
72704: LD_INT 1
72706: PUSH
72707: LD_INT 2
72709: PUSH
72710: LD_INT 3
72712: PUSH
72713: LD_INT 4
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: IN
72722: NOT
72723: OR
72724: IFFALSE 72728
// exit ;
72726: GO 72820
// tmp := [ ] ;
72728: LD_ADDR_VAR 0 5
72732: PUSH
72733: EMPTY
72734: ST_TO_ADDR
// for i in units do
72735: LD_ADDR_VAR 0 4
72739: PUSH
72740: LD_VAR 0 1
72744: PUSH
72745: FOR_IN
72746: IFFALSE 72789
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72748: LD_ADDR_VAR 0 5
72752: PUSH
72753: LD_VAR 0 5
72757: PPUSH
72758: LD_VAR 0 5
72762: PUSH
72763: LD_INT 1
72765: PLUS
72766: PPUSH
72767: LD_VAR 0 4
72771: PPUSH
72772: LD_VAR 0 2
72776: PPUSH
72777: CALL_OW 259
72781: PPUSH
72782: CALL_OW 2
72786: ST_TO_ADDR
72787: GO 72745
72789: POP
72790: POP
// if not tmp then
72791: LD_VAR 0 5
72795: NOT
72796: IFFALSE 72800
// exit ;
72798: GO 72820
// result := SortListByListDesc ( units , tmp ) ;
72800: LD_ADDR_VAR 0 3
72804: PUSH
72805: LD_VAR 0 1
72809: PPUSH
72810: LD_VAR 0 5
72814: PPUSH
72815: CALL_OW 77
72819: ST_TO_ADDR
// end ;
72820: LD_VAR 0 3
72824: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72825: LD_INT 0
72827: PPUSH
72828: PPUSH
72829: PPUSH
// result := false ;
72830: LD_ADDR_VAR 0 3
72834: PUSH
72835: LD_INT 0
72837: ST_TO_ADDR
// x := GetX ( building ) ;
72838: LD_ADDR_VAR 0 4
72842: PUSH
72843: LD_VAR 0 2
72847: PPUSH
72848: CALL_OW 250
72852: ST_TO_ADDR
// y := GetY ( building ) ;
72853: LD_ADDR_VAR 0 5
72857: PUSH
72858: LD_VAR 0 2
72862: PPUSH
72863: CALL_OW 251
72867: ST_TO_ADDR
// if not building or not x or not y then
72868: LD_VAR 0 2
72872: NOT
72873: PUSH
72874: LD_VAR 0 4
72878: NOT
72879: OR
72880: PUSH
72881: LD_VAR 0 5
72885: NOT
72886: OR
72887: IFFALSE 72891
// exit ;
72889: GO 72983
// if GetTaskList ( unit ) then
72891: LD_VAR 0 1
72895: PPUSH
72896: CALL_OW 437
72900: IFFALSE 72983
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72902: LD_STRING e
72904: PUSH
72905: LD_VAR 0 1
72909: PPUSH
72910: CALL_OW 437
72914: PUSH
72915: LD_INT 1
72917: ARRAY
72918: PUSH
72919: LD_INT 1
72921: ARRAY
72922: EQUAL
72923: PUSH
72924: LD_VAR 0 4
72928: PUSH
72929: LD_VAR 0 1
72933: PPUSH
72934: CALL_OW 437
72938: PUSH
72939: LD_INT 1
72941: ARRAY
72942: PUSH
72943: LD_INT 2
72945: ARRAY
72946: EQUAL
72947: AND
72948: PUSH
72949: LD_VAR 0 5
72953: PUSH
72954: LD_VAR 0 1
72958: PPUSH
72959: CALL_OW 437
72963: PUSH
72964: LD_INT 1
72966: ARRAY
72967: PUSH
72968: LD_INT 3
72970: ARRAY
72971: EQUAL
72972: AND
72973: IFFALSE 72983
// result := true end ;
72975: LD_ADDR_VAR 0 3
72979: PUSH
72980: LD_INT 1
72982: ST_TO_ADDR
// end ;
72983: LD_VAR 0 3
72987: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72988: LD_INT 0
72990: PPUSH
// result := false ;
72991: LD_ADDR_VAR 0 4
72995: PUSH
72996: LD_INT 0
72998: ST_TO_ADDR
// if GetTaskList ( unit ) then
72999: LD_VAR 0 1
73003: PPUSH
73004: CALL_OW 437
73008: IFFALSE 73091
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73010: LD_STRING M
73012: PUSH
73013: LD_VAR 0 1
73017: PPUSH
73018: CALL_OW 437
73022: PUSH
73023: LD_INT 1
73025: ARRAY
73026: PUSH
73027: LD_INT 1
73029: ARRAY
73030: EQUAL
73031: PUSH
73032: LD_VAR 0 2
73036: PUSH
73037: LD_VAR 0 1
73041: PPUSH
73042: CALL_OW 437
73046: PUSH
73047: LD_INT 1
73049: ARRAY
73050: PUSH
73051: LD_INT 2
73053: ARRAY
73054: EQUAL
73055: AND
73056: PUSH
73057: LD_VAR 0 3
73061: PUSH
73062: LD_VAR 0 1
73066: PPUSH
73067: CALL_OW 437
73071: PUSH
73072: LD_INT 1
73074: ARRAY
73075: PUSH
73076: LD_INT 3
73078: ARRAY
73079: EQUAL
73080: AND
73081: IFFALSE 73091
// result := true ;
73083: LD_ADDR_VAR 0 4
73087: PUSH
73088: LD_INT 1
73090: ST_TO_ADDR
// end ; end ;
73091: LD_VAR 0 4
73095: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73096: LD_INT 0
73098: PPUSH
73099: PPUSH
73100: PPUSH
73101: PPUSH
// if not unit or not area then
73102: LD_VAR 0 1
73106: NOT
73107: PUSH
73108: LD_VAR 0 2
73112: NOT
73113: OR
73114: IFFALSE 73118
// exit ;
73116: GO 73282
// tmp := AreaToList ( area , i ) ;
73118: LD_ADDR_VAR 0 6
73122: PUSH
73123: LD_VAR 0 2
73127: PPUSH
73128: LD_VAR 0 5
73132: PPUSH
73133: CALL_OW 517
73137: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73138: LD_ADDR_VAR 0 5
73142: PUSH
73143: DOUBLE
73144: LD_INT 1
73146: DEC
73147: ST_TO_ADDR
73148: LD_VAR 0 6
73152: PUSH
73153: LD_INT 1
73155: ARRAY
73156: PUSH
73157: FOR_TO
73158: IFFALSE 73280
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73160: LD_ADDR_VAR 0 7
73164: PUSH
73165: LD_VAR 0 6
73169: PUSH
73170: LD_INT 1
73172: ARRAY
73173: PUSH
73174: LD_VAR 0 5
73178: ARRAY
73179: PUSH
73180: LD_VAR 0 6
73184: PUSH
73185: LD_INT 2
73187: ARRAY
73188: PUSH
73189: LD_VAR 0 5
73193: ARRAY
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73199: LD_VAR 0 7
73203: PUSH
73204: LD_INT 1
73206: ARRAY
73207: PPUSH
73208: LD_VAR 0 7
73212: PUSH
73213: LD_INT 2
73215: ARRAY
73216: PPUSH
73217: CALL_OW 428
73221: PUSH
73222: LD_INT 0
73224: EQUAL
73225: IFFALSE 73278
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73227: LD_VAR 0 1
73231: PPUSH
73232: LD_VAR 0 7
73236: PUSH
73237: LD_INT 1
73239: ARRAY
73240: PPUSH
73241: LD_VAR 0 7
73245: PUSH
73246: LD_INT 2
73248: ARRAY
73249: PPUSH
73250: LD_VAR 0 3
73254: PPUSH
73255: CALL_OW 48
// result := IsPlaced ( unit ) ;
73259: LD_ADDR_VAR 0 4
73263: PUSH
73264: LD_VAR 0 1
73268: PPUSH
73269: CALL_OW 305
73273: ST_TO_ADDR
// exit ;
73274: POP
73275: POP
73276: GO 73282
// end ; end ;
73278: GO 73157
73280: POP
73281: POP
// end ;
73282: LD_VAR 0 4
73286: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73287: LD_INT 0
73289: PPUSH
73290: PPUSH
73291: PPUSH
// if not side or side > 8 then
73292: LD_VAR 0 1
73296: NOT
73297: PUSH
73298: LD_VAR 0 1
73302: PUSH
73303: LD_INT 8
73305: GREATER
73306: OR
73307: IFFALSE 73311
// exit ;
73309: GO 73498
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73311: LD_ADDR_VAR 0 4
73315: PUSH
73316: LD_INT 22
73318: PUSH
73319: LD_VAR 0 1
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 21
73330: PUSH
73331: LD_INT 3
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PPUSH
73342: CALL_OW 69
73346: ST_TO_ADDR
// if not tmp then
73347: LD_VAR 0 4
73351: NOT
73352: IFFALSE 73356
// exit ;
73354: GO 73498
// enable_addtolog := true ;
73356: LD_ADDR_OWVAR 81
73360: PUSH
73361: LD_INT 1
73363: ST_TO_ADDR
// AddToLog ( [ ) ;
73364: LD_STRING [
73366: PPUSH
73367: CALL_OW 561
// for i in tmp do
73371: LD_ADDR_VAR 0 3
73375: PUSH
73376: LD_VAR 0 4
73380: PUSH
73381: FOR_IN
73382: IFFALSE 73489
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73384: LD_STRING [
73386: PUSH
73387: LD_VAR 0 3
73391: PPUSH
73392: CALL_OW 266
73396: STR
73397: PUSH
73398: LD_STRING , 
73400: STR
73401: PUSH
73402: LD_VAR 0 3
73406: PPUSH
73407: CALL_OW 250
73411: STR
73412: PUSH
73413: LD_STRING , 
73415: STR
73416: PUSH
73417: LD_VAR 0 3
73421: PPUSH
73422: CALL_OW 251
73426: STR
73427: PUSH
73428: LD_STRING , 
73430: STR
73431: PUSH
73432: LD_VAR 0 3
73436: PPUSH
73437: CALL_OW 254
73441: STR
73442: PUSH
73443: LD_STRING , 
73445: STR
73446: PUSH
73447: LD_VAR 0 3
73451: PPUSH
73452: LD_INT 1
73454: PPUSH
73455: CALL_OW 268
73459: STR
73460: PUSH
73461: LD_STRING , 
73463: STR
73464: PUSH
73465: LD_VAR 0 3
73469: PPUSH
73470: LD_INT 2
73472: PPUSH
73473: CALL_OW 268
73477: STR
73478: PUSH
73479: LD_STRING ],
73481: STR
73482: PPUSH
73483: CALL_OW 561
// end ;
73487: GO 73381
73489: POP
73490: POP
// AddToLog ( ]; ) ;
73491: LD_STRING ];
73493: PPUSH
73494: CALL_OW 561
// end ;
73498: LD_VAR 0 2
73502: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73503: LD_INT 0
73505: PPUSH
73506: PPUSH
73507: PPUSH
73508: PPUSH
73509: PPUSH
// if not area or not rate or not max then
73510: LD_VAR 0 1
73514: NOT
73515: PUSH
73516: LD_VAR 0 2
73520: NOT
73521: OR
73522: PUSH
73523: LD_VAR 0 4
73527: NOT
73528: OR
73529: IFFALSE 73533
// exit ;
73531: GO 73722
// while 1 do
73533: LD_INT 1
73535: IFFALSE 73722
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73537: LD_ADDR_VAR 0 9
73541: PUSH
73542: LD_VAR 0 1
73546: PPUSH
73547: LD_INT 1
73549: PPUSH
73550: CALL_OW 287
73554: PUSH
73555: LD_INT 10
73557: MUL
73558: ST_TO_ADDR
// r := rate / 10 ;
73559: LD_ADDR_VAR 0 7
73563: PUSH
73564: LD_VAR 0 2
73568: PUSH
73569: LD_INT 10
73571: DIVREAL
73572: ST_TO_ADDR
// time := 1 1$00 ;
73573: LD_ADDR_VAR 0 8
73577: PUSH
73578: LD_INT 2100
73580: ST_TO_ADDR
// if amount < min then
73581: LD_VAR 0 9
73585: PUSH
73586: LD_VAR 0 3
73590: LESS
73591: IFFALSE 73609
// r := r * 2 else
73593: LD_ADDR_VAR 0 7
73597: PUSH
73598: LD_VAR 0 7
73602: PUSH
73603: LD_INT 2
73605: MUL
73606: ST_TO_ADDR
73607: GO 73635
// if amount > max then
73609: LD_VAR 0 9
73613: PUSH
73614: LD_VAR 0 4
73618: GREATER
73619: IFFALSE 73635
// r := r / 2 ;
73621: LD_ADDR_VAR 0 7
73625: PUSH
73626: LD_VAR 0 7
73630: PUSH
73631: LD_INT 2
73633: DIVREAL
73634: ST_TO_ADDR
// time := time / r ;
73635: LD_ADDR_VAR 0 8
73639: PUSH
73640: LD_VAR 0 8
73644: PUSH
73645: LD_VAR 0 7
73649: DIVREAL
73650: ST_TO_ADDR
// if time < 0 then
73651: LD_VAR 0 8
73655: PUSH
73656: LD_INT 0
73658: LESS
73659: IFFALSE 73676
// time := time * - 1 ;
73661: LD_ADDR_VAR 0 8
73665: PUSH
73666: LD_VAR 0 8
73670: PUSH
73671: LD_INT 1
73673: NEG
73674: MUL
73675: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73676: LD_VAR 0 8
73680: PUSH
73681: LD_INT 35
73683: PPUSH
73684: LD_INT 875
73686: PPUSH
73687: CALL_OW 12
73691: PLUS
73692: PPUSH
73693: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73697: LD_INT 1
73699: PPUSH
73700: LD_INT 5
73702: PPUSH
73703: CALL_OW 12
73707: PPUSH
73708: LD_VAR 0 1
73712: PPUSH
73713: LD_INT 1
73715: PPUSH
73716: CALL_OW 55
// end ;
73720: GO 73533
// end ;
73722: LD_VAR 0 5
73726: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73727: LD_INT 0
73729: PPUSH
73730: PPUSH
73731: PPUSH
73732: PPUSH
73733: PPUSH
73734: PPUSH
73735: PPUSH
73736: PPUSH
// if not turrets or not factories then
73737: LD_VAR 0 1
73741: NOT
73742: PUSH
73743: LD_VAR 0 2
73747: NOT
73748: OR
73749: IFFALSE 73753
// exit ;
73751: GO 74060
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73753: LD_ADDR_VAR 0 10
73757: PUSH
73758: LD_INT 5
73760: PUSH
73761: LD_INT 6
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 2
73770: PUSH
73771: LD_INT 4
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 3
73780: PUSH
73781: LD_INT 5
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: PUSH
73793: LD_INT 24
73795: PUSH
73796: LD_INT 25
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 23
73805: PUSH
73806: LD_INT 27
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 42
73819: PUSH
73820: LD_INT 43
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 44
73829: PUSH
73830: LD_INT 46
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 45
73839: PUSH
73840: LD_INT 47
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: LIST
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: LIST
73856: ST_TO_ADDR
// result := [ ] ;
73857: LD_ADDR_VAR 0 3
73861: PUSH
73862: EMPTY
73863: ST_TO_ADDR
// for i in turrets do
73864: LD_ADDR_VAR 0 4
73868: PUSH
73869: LD_VAR 0 1
73873: PUSH
73874: FOR_IN
73875: IFFALSE 74058
// begin nat := GetNation ( i ) ;
73877: LD_ADDR_VAR 0 7
73881: PUSH
73882: LD_VAR 0 4
73886: PPUSH
73887: CALL_OW 248
73891: ST_TO_ADDR
// weapon := 0 ;
73892: LD_ADDR_VAR 0 8
73896: PUSH
73897: LD_INT 0
73899: ST_TO_ADDR
// if not nat then
73900: LD_VAR 0 7
73904: NOT
73905: IFFALSE 73909
// continue ;
73907: GO 73874
// for j in list [ nat ] do
73909: LD_ADDR_VAR 0 5
73913: PUSH
73914: LD_VAR 0 10
73918: PUSH
73919: LD_VAR 0 7
73923: ARRAY
73924: PUSH
73925: FOR_IN
73926: IFFALSE 73967
// if GetBWeapon ( i ) = j [ 1 ] then
73928: LD_VAR 0 4
73932: PPUSH
73933: CALL_OW 269
73937: PUSH
73938: LD_VAR 0 5
73942: PUSH
73943: LD_INT 1
73945: ARRAY
73946: EQUAL
73947: IFFALSE 73965
// begin weapon := j [ 2 ] ;
73949: LD_ADDR_VAR 0 8
73953: PUSH
73954: LD_VAR 0 5
73958: PUSH
73959: LD_INT 2
73961: ARRAY
73962: ST_TO_ADDR
// break ;
73963: GO 73967
// end ;
73965: GO 73925
73967: POP
73968: POP
// if not weapon then
73969: LD_VAR 0 8
73973: NOT
73974: IFFALSE 73978
// continue ;
73976: GO 73874
// for k in factories do
73978: LD_ADDR_VAR 0 6
73982: PUSH
73983: LD_VAR 0 2
73987: PUSH
73988: FOR_IN
73989: IFFALSE 74054
// begin weapons := AvailableWeaponList ( k ) ;
73991: LD_ADDR_VAR 0 9
73995: PUSH
73996: LD_VAR 0 6
74000: PPUSH
74001: CALL_OW 478
74005: ST_TO_ADDR
// if not weapons then
74006: LD_VAR 0 9
74010: NOT
74011: IFFALSE 74015
// continue ;
74013: GO 73988
// if weapon in weapons then
74015: LD_VAR 0 8
74019: PUSH
74020: LD_VAR 0 9
74024: IN
74025: IFFALSE 74052
// begin result := [ i , weapon ] ;
74027: LD_ADDR_VAR 0 3
74031: PUSH
74032: LD_VAR 0 4
74036: PUSH
74037: LD_VAR 0 8
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: ST_TO_ADDR
// exit ;
74046: POP
74047: POP
74048: POP
74049: POP
74050: GO 74060
// end ; end ;
74052: GO 73988
74054: POP
74055: POP
// end ;
74056: GO 73874
74058: POP
74059: POP
// end ;
74060: LD_VAR 0 3
74064: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74065: LD_INT 0
74067: PPUSH
// if not side or side > 8 then
74068: LD_VAR 0 3
74072: NOT
74073: PUSH
74074: LD_VAR 0 3
74078: PUSH
74079: LD_INT 8
74081: GREATER
74082: OR
74083: IFFALSE 74087
// exit ;
74085: GO 74146
// if not range then
74087: LD_VAR 0 4
74091: NOT
74092: IFFALSE 74103
// range := - 12 ;
74094: LD_ADDR_VAR 0 4
74098: PUSH
74099: LD_INT 12
74101: NEG
74102: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74103: LD_VAR 0 1
74107: PPUSH
74108: LD_VAR 0 2
74112: PPUSH
74113: LD_VAR 0 3
74117: PPUSH
74118: LD_VAR 0 4
74122: PPUSH
74123: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74127: LD_VAR 0 1
74131: PPUSH
74132: LD_VAR 0 2
74136: PPUSH
74137: LD_VAR 0 3
74141: PPUSH
74142: CALL_OW 331
// end ;
74146: LD_VAR 0 5
74150: RET
// export function Video ( mode ) ; begin
74151: LD_INT 0
74153: PPUSH
// ingame_video = mode ;
74154: LD_ADDR_OWVAR 52
74158: PUSH
74159: LD_VAR 0 1
74163: ST_TO_ADDR
// interface_hidden = mode ;
74164: LD_ADDR_OWVAR 54
74168: PUSH
74169: LD_VAR 0 1
74173: ST_TO_ADDR
// end ;
74174: LD_VAR 0 2
74178: RET
// export function Join ( array , element ) ; begin
74179: LD_INT 0
74181: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74182: LD_ADDR_VAR 0 3
74186: PUSH
74187: LD_VAR 0 1
74191: PPUSH
74192: LD_VAR 0 1
74196: PUSH
74197: LD_INT 1
74199: PLUS
74200: PPUSH
74201: LD_VAR 0 2
74205: PPUSH
74206: CALL_OW 1
74210: ST_TO_ADDR
// end ;
74211: LD_VAR 0 3
74215: RET
// export function JoinUnion ( array , element ) ; begin
74216: LD_INT 0
74218: PPUSH
// result := array union element ;
74219: LD_ADDR_VAR 0 3
74223: PUSH
74224: LD_VAR 0 1
74228: PUSH
74229: LD_VAR 0 2
74233: UNION
74234: ST_TO_ADDR
// end ;
74235: LD_VAR 0 3
74239: RET
// export function GetBehemoths ( side ) ; begin
74240: LD_INT 0
74242: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74243: LD_ADDR_VAR 0 2
74247: PUSH
74248: LD_INT 22
74250: PUSH
74251: LD_VAR 0 1
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: PUSH
74260: LD_INT 31
74262: PUSH
74263: LD_INT 25
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: PPUSH
74274: CALL_OW 69
74278: ST_TO_ADDR
// end ;
74279: LD_VAR 0 2
74283: RET
// export function Shuffle ( array ) ; var i , index ; begin
74284: LD_INT 0
74286: PPUSH
74287: PPUSH
74288: PPUSH
// result := [ ] ;
74289: LD_ADDR_VAR 0 2
74293: PUSH
74294: EMPTY
74295: ST_TO_ADDR
// if not array then
74296: LD_VAR 0 1
74300: NOT
74301: IFFALSE 74305
// exit ;
74303: GO 74404
// Randomize ;
74305: CALL_OW 10
// for i = array downto 1 do
74309: LD_ADDR_VAR 0 3
74313: PUSH
74314: DOUBLE
74315: LD_VAR 0 1
74319: INC
74320: ST_TO_ADDR
74321: LD_INT 1
74323: PUSH
74324: FOR_DOWNTO
74325: IFFALSE 74402
// begin index := rand ( 1 , array ) ;
74327: LD_ADDR_VAR 0 4
74331: PUSH
74332: LD_INT 1
74334: PPUSH
74335: LD_VAR 0 1
74339: PPUSH
74340: CALL_OW 12
74344: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74345: LD_ADDR_VAR 0 2
74349: PUSH
74350: LD_VAR 0 2
74354: PPUSH
74355: LD_VAR 0 2
74359: PUSH
74360: LD_INT 1
74362: PLUS
74363: PPUSH
74364: LD_VAR 0 1
74368: PUSH
74369: LD_VAR 0 4
74373: ARRAY
74374: PPUSH
74375: CALL_OW 2
74379: ST_TO_ADDR
// array := Delete ( array , index ) ;
74380: LD_ADDR_VAR 0 1
74384: PUSH
74385: LD_VAR 0 1
74389: PPUSH
74390: LD_VAR 0 4
74394: PPUSH
74395: CALL_OW 3
74399: ST_TO_ADDR
// end ;
74400: GO 74324
74402: POP
74403: POP
// end ;
74404: LD_VAR 0 2
74408: RET
// export function GetBaseMaterials ( base ) ; begin
74409: LD_INT 0
74411: PPUSH
// result := [ 0 , 0 , 0 ] ;
74412: LD_ADDR_VAR 0 2
74416: PUSH
74417: LD_INT 0
74419: PUSH
74420: LD_INT 0
74422: PUSH
74423: LD_INT 0
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: LIST
74430: ST_TO_ADDR
// if not base then
74431: LD_VAR 0 1
74435: NOT
74436: IFFALSE 74440
// exit ;
74438: GO 74489
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74440: LD_ADDR_VAR 0 2
74444: PUSH
74445: LD_VAR 0 1
74449: PPUSH
74450: LD_INT 1
74452: PPUSH
74453: CALL_OW 275
74457: PUSH
74458: LD_VAR 0 1
74462: PPUSH
74463: LD_INT 2
74465: PPUSH
74466: CALL_OW 275
74470: PUSH
74471: LD_VAR 0 1
74475: PPUSH
74476: LD_INT 3
74478: PPUSH
74479: CALL_OW 275
74483: PUSH
74484: EMPTY
74485: LIST
74486: LIST
74487: LIST
74488: ST_TO_ADDR
// end ;
74489: LD_VAR 0 2
74493: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74494: LD_INT 0
74496: PPUSH
74497: PPUSH
// result := array ;
74498: LD_ADDR_VAR 0 3
74502: PUSH
74503: LD_VAR 0 1
74507: ST_TO_ADDR
// if size > 0 then
74508: LD_VAR 0 2
74512: PUSH
74513: LD_INT 0
74515: GREATER
74516: IFFALSE 74562
// for i := array downto size do
74518: LD_ADDR_VAR 0 4
74522: PUSH
74523: DOUBLE
74524: LD_VAR 0 1
74528: INC
74529: ST_TO_ADDR
74530: LD_VAR 0 2
74534: PUSH
74535: FOR_DOWNTO
74536: IFFALSE 74560
// result := Delete ( result , result ) ;
74538: LD_ADDR_VAR 0 3
74542: PUSH
74543: LD_VAR 0 3
74547: PPUSH
74548: LD_VAR 0 3
74552: PPUSH
74553: CALL_OW 3
74557: ST_TO_ADDR
74558: GO 74535
74560: POP
74561: POP
// end ;
74562: LD_VAR 0 3
74566: RET
// export function ComExit ( unit ) ; var tmp ; begin
74567: LD_INT 0
74569: PPUSH
74570: PPUSH
// if not IsInUnit ( unit ) then
74571: LD_VAR 0 1
74575: PPUSH
74576: CALL_OW 310
74580: NOT
74581: IFFALSE 74585
// exit ;
74583: GO 74645
// tmp := IsInUnit ( unit ) ;
74585: LD_ADDR_VAR 0 3
74589: PUSH
74590: LD_VAR 0 1
74594: PPUSH
74595: CALL_OW 310
74599: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74600: LD_VAR 0 3
74604: PPUSH
74605: CALL_OW 247
74609: PUSH
74610: LD_INT 2
74612: EQUAL
74613: IFFALSE 74626
// ComExitVehicle ( unit ) else
74615: LD_VAR 0 1
74619: PPUSH
74620: CALL_OW 121
74624: GO 74635
// ComExitBuilding ( unit ) ;
74626: LD_VAR 0 1
74630: PPUSH
74631: CALL_OW 122
// result := tmp ;
74635: LD_ADDR_VAR 0 2
74639: PUSH
74640: LD_VAR 0 3
74644: ST_TO_ADDR
// end ;
74645: LD_VAR 0 2
74649: RET
// export function ComExitAll ( units ) ; var i ; begin
74650: LD_INT 0
74652: PPUSH
74653: PPUSH
// if not units then
74654: LD_VAR 0 1
74658: NOT
74659: IFFALSE 74663
// exit ;
74661: GO 74689
// for i in units do
74663: LD_ADDR_VAR 0 3
74667: PUSH
74668: LD_VAR 0 1
74672: PUSH
74673: FOR_IN
74674: IFFALSE 74687
// ComExit ( i ) ;
74676: LD_VAR 0 3
74680: PPUSH
74681: CALL 74567 0 1
74685: GO 74673
74687: POP
74688: POP
// end ;
74689: LD_VAR 0 2
74693: RET
// export function ResetHc ; begin
74694: LD_INT 0
74696: PPUSH
// InitHc ;
74697: CALL_OW 19
// hc_importance := 0 ;
74701: LD_ADDR_OWVAR 32
74705: PUSH
74706: LD_INT 0
74708: ST_TO_ADDR
// end ;
74709: LD_VAR 0 1
74713: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74714: LD_INT 0
74716: PPUSH
74717: PPUSH
74718: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74719: LD_ADDR_VAR 0 6
74723: PUSH
74724: LD_VAR 0 1
74728: PUSH
74729: LD_VAR 0 3
74733: PLUS
74734: PUSH
74735: LD_INT 2
74737: DIV
74738: ST_TO_ADDR
// if _x < 0 then
74739: LD_VAR 0 6
74743: PUSH
74744: LD_INT 0
74746: LESS
74747: IFFALSE 74764
// _x := _x * - 1 ;
74749: LD_ADDR_VAR 0 6
74753: PUSH
74754: LD_VAR 0 6
74758: PUSH
74759: LD_INT 1
74761: NEG
74762: MUL
74763: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74764: LD_ADDR_VAR 0 7
74768: PUSH
74769: LD_VAR 0 2
74773: PUSH
74774: LD_VAR 0 4
74778: PLUS
74779: PUSH
74780: LD_INT 2
74782: DIV
74783: ST_TO_ADDR
// if _y < 0 then
74784: LD_VAR 0 7
74788: PUSH
74789: LD_INT 0
74791: LESS
74792: IFFALSE 74809
// _y := _y * - 1 ;
74794: LD_ADDR_VAR 0 7
74798: PUSH
74799: LD_VAR 0 7
74803: PUSH
74804: LD_INT 1
74806: NEG
74807: MUL
74808: ST_TO_ADDR
// result := [ _x , _y ] ;
74809: LD_ADDR_VAR 0 5
74813: PUSH
74814: LD_VAR 0 6
74818: PUSH
74819: LD_VAR 0 7
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: ST_TO_ADDR
// end ;
74828: LD_VAR 0 5
74832: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74833: LD_INT 0
74835: PPUSH
74836: PPUSH
74837: PPUSH
74838: PPUSH
// task := GetTaskList ( unit ) ;
74839: LD_ADDR_VAR 0 7
74843: PUSH
74844: LD_VAR 0 1
74848: PPUSH
74849: CALL_OW 437
74853: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74854: LD_VAR 0 7
74858: NOT
74859: PUSH
74860: LD_VAR 0 1
74864: PPUSH
74865: LD_VAR 0 2
74869: PPUSH
74870: CALL_OW 308
74874: NOT
74875: AND
74876: IFFALSE 74880
// exit ;
74878: GO 74998
// if IsInArea ( unit , area ) then
74880: LD_VAR 0 1
74884: PPUSH
74885: LD_VAR 0 2
74889: PPUSH
74890: CALL_OW 308
74894: IFFALSE 74912
// begin ComMoveToArea ( unit , goAway ) ;
74896: LD_VAR 0 1
74900: PPUSH
74901: LD_VAR 0 3
74905: PPUSH
74906: CALL_OW 113
// exit ;
74910: GO 74998
// end ; if task [ 1 ] [ 1 ] <> M then
74912: LD_VAR 0 7
74916: PUSH
74917: LD_INT 1
74919: ARRAY
74920: PUSH
74921: LD_INT 1
74923: ARRAY
74924: PUSH
74925: LD_STRING M
74927: NONEQUAL
74928: IFFALSE 74932
// exit ;
74930: GO 74998
// x := task [ 1 ] [ 2 ] ;
74932: LD_ADDR_VAR 0 5
74936: PUSH
74937: LD_VAR 0 7
74941: PUSH
74942: LD_INT 1
74944: ARRAY
74945: PUSH
74946: LD_INT 2
74948: ARRAY
74949: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74950: LD_ADDR_VAR 0 6
74954: PUSH
74955: LD_VAR 0 7
74959: PUSH
74960: LD_INT 1
74962: ARRAY
74963: PUSH
74964: LD_INT 3
74966: ARRAY
74967: ST_TO_ADDR
// if InArea ( x , y , area ) then
74968: LD_VAR 0 5
74972: PPUSH
74973: LD_VAR 0 6
74977: PPUSH
74978: LD_VAR 0 2
74982: PPUSH
74983: CALL_OW 309
74987: IFFALSE 74998
// ComStop ( unit ) ;
74989: LD_VAR 0 1
74993: PPUSH
74994: CALL_OW 141
// end ;
74998: LD_VAR 0 4
75002: RET
// export function Abs ( value ) ; begin
75003: LD_INT 0
75005: PPUSH
// result := value ;
75006: LD_ADDR_VAR 0 2
75010: PUSH
75011: LD_VAR 0 1
75015: ST_TO_ADDR
// if value < 0 then
75016: LD_VAR 0 1
75020: PUSH
75021: LD_INT 0
75023: LESS
75024: IFFALSE 75041
// result := value * - 1 ;
75026: LD_ADDR_VAR 0 2
75030: PUSH
75031: LD_VAR 0 1
75035: PUSH
75036: LD_INT 1
75038: NEG
75039: MUL
75040: ST_TO_ADDR
// end ;
75041: LD_VAR 0 2
75045: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75046: LD_INT 0
75048: PPUSH
75049: PPUSH
75050: PPUSH
75051: PPUSH
75052: PPUSH
75053: PPUSH
75054: PPUSH
75055: PPUSH
// if not unit or not building then
75056: LD_VAR 0 1
75060: NOT
75061: PUSH
75062: LD_VAR 0 2
75066: NOT
75067: OR
75068: IFFALSE 75072
// exit ;
75070: GO 75298
// x := GetX ( building ) ;
75072: LD_ADDR_VAR 0 4
75076: PUSH
75077: LD_VAR 0 2
75081: PPUSH
75082: CALL_OW 250
75086: ST_TO_ADDR
// y := GetY ( building ) ;
75087: LD_ADDR_VAR 0 6
75091: PUSH
75092: LD_VAR 0 2
75096: PPUSH
75097: CALL_OW 251
75101: ST_TO_ADDR
// d := GetDir ( building ) ;
75102: LD_ADDR_VAR 0 8
75106: PUSH
75107: LD_VAR 0 2
75111: PPUSH
75112: CALL_OW 254
75116: ST_TO_ADDR
// r := 4 ;
75117: LD_ADDR_VAR 0 9
75121: PUSH
75122: LD_INT 4
75124: ST_TO_ADDR
// for i := 1 to 5 do
75125: LD_ADDR_VAR 0 10
75129: PUSH
75130: DOUBLE
75131: LD_INT 1
75133: DEC
75134: ST_TO_ADDR
75135: LD_INT 5
75137: PUSH
75138: FOR_TO
75139: IFFALSE 75296
// begin _x := ShiftX ( x , d , r + i ) ;
75141: LD_ADDR_VAR 0 5
75145: PUSH
75146: LD_VAR 0 4
75150: PPUSH
75151: LD_VAR 0 8
75155: PPUSH
75156: LD_VAR 0 9
75160: PUSH
75161: LD_VAR 0 10
75165: PLUS
75166: PPUSH
75167: CALL_OW 272
75171: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75172: LD_ADDR_VAR 0 7
75176: PUSH
75177: LD_VAR 0 6
75181: PPUSH
75182: LD_VAR 0 8
75186: PPUSH
75187: LD_VAR 0 9
75191: PUSH
75192: LD_VAR 0 10
75196: PLUS
75197: PPUSH
75198: CALL_OW 273
75202: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75203: LD_VAR 0 5
75207: PPUSH
75208: LD_VAR 0 7
75212: PPUSH
75213: CALL_OW 488
75217: PUSH
75218: LD_VAR 0 5
75222: PPUSH
75223: LD_VAR 0 7
75227: PPUSH
75228: CALL_OW 428
75232: PPUSH
75233: CALL_OW 247
75237: PUSH
75238: LD_INT 3
75240: PUSH
75241: LD_INT 2
75243: PUSH
75244: EMPTY
75245: LIST
75246: LIST
75247: IN
75248: NOT
75249: AND
75250: IFFALSE 75294
// begin ComMoveXY ( unit , _x , _y ) ;
75252: LD_VAR 0 1
75256: PPUSH
75257: LD_VAR 0 5
75261: PPUSH
75262: LD_VAR 0 7
75266: PPUSH
75267: CALL_OW 111
// result := [ _x , _y ] ;
75271: LD_ADDR_VAR 0 3
75275: PUSH
75276: LD_VAR 0 5
75280: PUSH
75281: LD_VAR 0 7
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: ST_TO_ADDR
// exit ;
75290: POP
75291: POP
75292: GO 75298
// end ; end ;
75294: GO 75138
75296: POP
75297: POP
// end ;
75298: LD_VAR 0 3
75302: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75303: LD_INT 0
75305: PPUSH
75306: PPUSH
75307: PPUSH
// result := 0 ;
75308: LD_ADDR_VAR 0 3
75312: PUSH
75313: LD_INT 0
75315: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75316: LD_VAR 0 1
75320: PUSH
75321: LD_INT 0
75323: LESS
75324: PUSH
75325: LD_VAR 0 1
75329: PUSH
75330: LD_INT 8
75332: GREATER
75333: OR
75334: PUSH
75335: LD_VAR 0 2
75339: PUSH
75340: LD_INT 0
75342: LESS
75343: OR
75344: PUSH
75345: LD_VAR 0 2
75349: PUSH
75350: LD_INT 8
75352: GREATER
75353: OR
75354: IFFALSE 75358
// exit ;
75356: GO 75433
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75358: LD_ADDR_VAR 0 4
75362: PUSH
75363: LD_INT 22
75365: PUSH
75366: LD_VAR 0 2
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: PPUSH
75375: CALL_OW 69
75379: PUSH
75380: FOR_IN
75381: IFFALSE 75431
// begin un := UnitShoot ( i ) ;
75383: LD_ADDR_VAR 0 5
75387: PUSH
75388: LD_VAR 0 4
75392: PPUSH
75393: CALL_OW 504
75397: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75398: LD_VAR 0 5
75402: PPUSH
75403: CALL_OW 255
75407: PUSH
75408: LD_VAR 0 1
75412: EQUAL
75413: IFFALSE 75429
// begin result := un ;
75415: LD_ADDR_VAR 0 3
75419: PUSH
75420: LD_VAR 0 5
75424: ST_TO_ADDR
// exit ;
75425: POP
75426: POP
75427: GO 75433
// end ; end ;
75429: GO 75380
75431: POP
75432: POP
// end ;
75433: LD_VAR 0 3
75437: RET
// export function GetCargoBay ( units ) ; begin
75438: LD_INT 0
75440: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75441: LD_ADDR_VAR 0 2
75445: PUSH
75446: LD_VAR 0 1
75450: PPUSH
75451: LD_INT 2
75453: PUSH
75454: LD_INT 34
75456: PUSH
75457: LD_INT 12
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: PUSH
75464: LD_INT 34
75466: PUSH
75467: LD_INT 51
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 34
75476: PUSH
75477: LD_INT 32
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: PUSH
75484: LD_INT 34
75486: PUSH
75487: LD_EXP 33
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: PUSH
75496: EMPTY
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: PPUSH
75503: CALL_OW 72
75507: ST_TO_ADDR
// end ;
75508: LD_VAR 0 2
75512: RET
// export function Negate ( value ) ; begin
75513: LD_INT 0
75515: PPUSH
// result := not value ;
75516: LD_ADDR_VAR 0 2
75520: PUSH
75521: LD_VAR 0 1
75525: NOT
75526: ST_TO_ADDR
// end ;
75527: LD_VAR 0 2
75531: RET
// export function Inc ( value ) ; begin
75532: LD_INT 0
75534: PPUSH
// result := value + 1 ;
75535: LD_ADDR_VAR 0 2
75539: PUSH
75540: LD_VAR 0 1
75544: PUSH
75545: LD_INT 1
75547: PLUS
75548: ST_TO_ADDR
// end ;
75549: LD_VAR 0 2
75553: RET
// export function Dec ( value ) ; begin
75554: LD_INT 0
75556: PPUSH
// result := value - 1 ;
75557: LD_ADDR_VAR 0 2
75561: PUSH
75562: LD_VAR 0 1
75566: PUSH
75567: LD_INT 1
75569: MINUS
75570: ST_TO_ADDR
// end ;
75571: LD_VAR 0 2
75575: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75576: LD_INT 0
75578: PPUSH
75579: PPUSH
75580: PPUSH
75581: PPUSH
75582: PPUSH
75583: PPUSH
75584: PPUSH
75585: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75586: LD_VAR 0 1
75590: PPUSH
75591: LD_VAR 0 2
75595: PPUSH
75596: CALL_OW 488
75600: NOT
75601: PUSH
75602: LD_VAR 0 3
75606: PPUSH
75607: LD_VAR 0 4
75611: PPUSH
75612: CALL_OW 488
75616: NOT
75617: OR
75618: IFFALSE 75631
// begin result := - 1 ;
75620: LD_ADDR_VAR 0 5
75624: PUSH
75625: LD_INT 1
75627: NEG
75628: ST_TO_ADDR
// exit ;
75629: GO 75866
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75631: LD_ADDR_VAR 0 12
75635: PUSH
75636: LD_VAR 0 1
75640: PPUSH
75641: LD_VAR 0 2
75645: PPUSH
75646: LD_VAR 0 3
75650: PPUSH
75651: LD_VAR 0 4
75655: PPUSH
75656: CALL 74714 0 4
75660: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75661: LD_ADDR_VAR 0 11
75665: PUSH
75666: LD_VAR 0 1
75670: PPUSH
75671: LD_VAR 0 2
75675: PPUSH
75676: LD_VAR 0 12
75680: PUSH
75681: LD_INT 1
75683: ARRAY
75684: PPUSH
75685: LD_VAR 0 12
75689: PUSH
75690: LD_INT 2
75692: ARRAY
75693: PPUSH
75694: CALL_OW 298
75698: ST_TO_ADDR
// distance := 9999 ;
75699: LD_ADDR_VAR 0 10
75703: PUSH
75704: LD_INT 9999
75706: ST_TO_ADDR
// for i := 0 to 5 do
75707: LD_ADDR_VAR 0 6
75711: PUSH
75712: DOUBLE
75713: LD_INT 0
75715: DEC
75716: ST_TO_ADDR
75717: LD_INT 5
75719: PUSH
75720: FOR_TO
75721: IFFALSE 75864
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75723: LD_ADDR_VAR 0 7
75727: PUSH
75728: LD_VAR 0 1
75732: PPUSH
75733: LD_VAR 0 6
75737: PPUSH
75738: LD_VAR 0 11
75742: PPUSH
75743: CALL_OW 272
75747: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75748: LD_ADDR_VAR 0 8
75752: PUSH
75753: LD_VAR 0 2
75757: PPUSH
75758: LD_VAR 0 6
75762: PPUSH
75763: LD_VAR 0 11
75767: PPUSH
75768: CALL_OW 273
75772: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75773: LD_VAR 0 7
75777: PPUSH
75778: LD_VAR 0 8
75782: PPUSH
75783: CALL_OW 488
75787: NOT
75788: IFFALSE 75792
// continue ;
75790: GO 75720
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75792: LD_ADDR_VAR 0 9
75796: PUSH
75797: LD_VAR 0 12
75801: PUSH
75802: LD_INT 1
75804: ARRAY
75805: PPUSH
75806: LD_VAR 0 12
75810: PUSH
75811: LD_INT 2
75813: ARRAY
75814: PPUSH
75815: LD_VAR 0 7
75819: PPUSH
75820: LD_VAR 0 8
75824: PPUSH
75825: CALL_OW 298
75829: ST_TO_ADDR
// if tmp < distance then
75830: LD_VAR 0 9
75834: PUSH
75835: LD_VAR 0 10
75839: LESS
75840: IFFALSE 75862
// begin result := i ;
75842: LD_ADDR_VAR 0 5
75846: PUSH
75847: LD_VAR 0 6
75851: ST_TO_ADDR
// distance := tmp ;
75852: LD_ADDR_VAR 0 10
75856: PUSH
75857: LD_VAR 0 9
75861: ST_TO_ADDR
// end ; end ;
75862: GO 75720
75864: POP
75865: POP
// end ;
75866: LD_VAR 0 5
75870: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75871: LD_INT 0
75873: PPUSH
75874: PPUSH
// if not driver or not IsInUnit ( driver ) then
75875: LD_VAR 0 1
75879: NOT
75880: PUSH
75881: LD_VAR 0 1
75885: PPUSH
75886: CALL_OW 310
75890: NOT
75891: OR
75892: IFFALSE 75896
// exit ;
75894: GO 75986
// vehicle := IsInUnit ( driver ) ;
75896: LD_ADDR_VAR 0 3
75900: PUSH
75901: LD_VAR 0 1
75905: PPUSH
75906: CALL_OW 310
75910: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75911: LD_VAR 0 1
75915: PPUSH
75916: LD_STRING \
75918: PUSH
75919: LD_INT 0
75921: PUSH
75922: LD_INT 0
75924: PUSH
75925: LD_INT 0
75927: PUSH
75928: LD_INT 0
75930: PUSH
75931: LD_INT 0
75933: PUSH
75934: LD_INT 0
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: LIST
75941: LIST
75942: LIST
75943: LIST
75944: LIST
75945: PUSH
75946: LD_STRING E
75948: PUSH
75949: LD_INT 0
75951: PUSH
75952: LD_INT 0
75954: PUSH
75955: LD_VAR 0 3
75959: PUSH
75960: LD_INT 0
75962: PUSH
75963: LD_INT 0
75965: PUSH
75966: LD_INT 0
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: PPUSH
75982: CALL_OW 446
// end ;
75986: LD_VAR 0 2
75990: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75991: LD_INT 0
75993: PPUSH
75994: PPUSH
// if not driver or not IsInUnit ( driver ) then
75995: LD_VAR 0 1
75999: NOT
76000: PUSH
76001: LD_VAR 0 1
76005: PPUSH
76006: CALL_OW 310
76010: NOT
76011: OR
76012: IFFALSE 76016
// exit ;
76014: GO 76106
// vehicle := IsInUnit ( driver ) ;
76016: LD_ADDR_VAR 0 3
76020: PUSH
76021: LD_VAR 0 1
76025: PPUSH
76026: CALL_OW 310
76030: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76031: LD_VAR 0 1
76035: PPUSH
76036: LD_STRING \
76038: PUSH
76039: LD_INT 0
76041: PUSH
76042: LD_INT 0
76044: PUSH
76045: LD_INT 0
76047: PUSH
76048: LD_INT 0
76050: PUSH
76051: LD_INT 0
76053: PUSH
76054: LD_INT 0
76056: PUSH
76057: EMPTY
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: PUSH
76066: LD_STRING E
76068: PUSH
76069: LD_INT 0
76071: PUSH
76072: LD_INT 0
76074: PUSH
76075: LD_VAR 0 3
76079: PUSH
76080: LD_INT 0
76082: PUSH
76083: LD_INT 0
76085: PUSH
76086: LD_INT 0
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: PPUSH
76102: CALL_OW 447
// end ;
76106: LD_VAR 0 2
76110: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76111: LD_INT 0
76113: PPUSH
76114: PPUSH
76115: PPUSH
// tmp := [ ] ;
76116: LD_ADDR_VAR 0 5
76120: PUSH
76121: EMPTY
76122: ST_TO_ADDR
// for i in units do
76123: LD_ADDR_VAR 0 4
76127: PUSH
76128: LD_VAR 0 1
76132: PUSH
76133: FOR_IN
76134: IFFALSE 76172
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76136: LD_ADDR_VAR 0 5
76140: PUSH
76141: LD_VAR 0 5
76145: PPUSH
76146: LD_VAR 0 5
76150: PUSH
76151: LD_INT 1
76153: PLUS
76154: PPUSH
76155: LD_VAR 0 4
76159: PPUSH
76160: CALL_OW 256
76164: PPUSH
76165: CALL_OW 2
76169: ST_TO_ADDR
76170: GO 76133
76172: POP
76173: POP
// if not tmp then
76174: LD_VAR 0 5
76178: NOT
76179: IFFALSE 76183
// exit ;
76181: GO 76231
// if asc then
76183: LD_VAR 0 2
76187: IFFALSE 76211
// result := SortListByListAsc ( units , tmp ) else
76189: LD_ADDR_VAR 0 3
76193: PUSH
76194: LD_VAR 0 1
76198: PPUSH
76199: LD_VAR 0 5
76203: PPUSH
76204: CALL_OW 76
76208: ST_TO_ADDR
76209: GO 76231
// result := SortListByListDesc ( units , tmp ) ;
76211: LD_ADDR_VAR 0 3
76215: PUSH
76216: LD_VAR 0 1
76220: PPUSH
76221: LD_VAR 0 5
76225: PPUSH
76226: CALL_OW 77
76230: ST_TO_ADDR
// end ;
76231: LD_VAR 0 3
76235: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76236: LD_INT 0
76238: PPUSH
76239: PPUSH
// task := GetTaskList ( mech ) ;
76240: LD_ADDR_VAR 0 4
76244: PUSH
76245: LD_VAR 0 1
76249: PPUSH
76250: CALL_OW 437
76254: ST_TO_ADDR
// if not task then
76255: LD_VAR 0 4
76259: NOT
76260: IFFALSE 76264
// exit ;
76262: GO 76306
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76264: LD_ADDR_VAR 0 3
76268: PUSH
76269: LD_VAR 0 4
76273: PUSH
76274: LD_INT 1
76276: ARRAY
76277: PUSH
76278: LD_INT 1
76280: ARRAY
76281: PUSH
76282: LD_STRING r
76284: EQUAL
76285: PUSH
76286: LD_VAR 0 4
76290: PUSH
76291: LD_INT 1
76293: ARRAY
76294: PUSH
76295: LD_INT 4
76297: ARRAY
76298: PUSH
76299: LD_VAR 0 2
76303: EQUAL
76304: AND
76305: ST_TO_ADDR
// end ;
76306: LD_VAR 0 3
76310: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76311: LD_INT 0
76313: PPUSH
// SetDir ( unit , d ) ;
76314: LD_VAR 0 1
76318: PPUSH
76319: LD_VAR 0 4
76323: PPUSH
76324: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76328: LD_VAR 0 1
76332: PPUSH
76333: LD_VAR 0 2
76337: PPUSH
76338: LD_VAR 0 3
76342: PPUSH
76343: LD_VAR 0 5
76347: PPUSH
76348: CALL_OW 48
// end ;
76352: LD_VAR 0 6
76356: RET
// export function ToNaturalNumber ( number ) ; begin
76357: LD_INT 0
76359: PPUSH
// result := number div 1 ;
76360: LD_ADDR_VAR 0 2
76364: PUSH
76365: LD_VAR 0 1
76369: PUSH
76370: LD_INT 1
76372: DIV
76373: ST_TO_ADDR
// if number < 0 then
76374: LD_VAR 0 1
76378: PUSH
76379: LD_INT 0
76381: LESS
76382: IFFALSE 76392
// result := 0 ;
76384: LD_ADDR_VAR 0 2
76388: PUSH
76389: LD_INT 0
76391: ST_TO_ADDR
// end ;
76392: LD_VAR 0 2
76396: RET
// export function SortByClass ( units , class ) ; var un ; begin
76397: LD_INT 0
76399: PPUSH
76400: PPUSH
// if not units or not class then
76401: LD_VAR 0 1
76405: NOT
76406: PUSH
76407: LD_VAR 0 2
76411: NOT
76412: OR
76413: IFFALSE 76417
// exit ;
76415: GO 76512
// result := [ ] ;
76417: LD_ADDR_VAR 0 3
76421: PUSH
76422: EMPTY
76423: ST_TO_ADDR
// for un in units do
76424: LD_ADDR_VAR 0 4
76428: PUSH
76429: LD_VAR 0 1
76433: PUSH
76434: FOR_IN
76435: IFFALSE 76510
// if GetClass ( un ) = class then
76437: LD_VAR 0 4
76441: PPUSH
76442: CALL_OW 257
76446: PUSH
76447: LD_VAR 0 2
76451: EQUAL
76452: IFFALSE 76479
// result := Insert ( result , 1 , un ) else
76454: LD_ADDR_VAR 0 3
76458: PUSH
76459: LD_VAR 0 3
76463: PPUSH
76464: LD_INT 1
76466: PPUSH
76467: LD_VAR 0 4
76471: PPUSH
76472: CALL_OW 2
76476: ST_TO_ADDR
76477: GO 76508
// result := Replace ( result , result + 1 , un ) ;
76479: LD_ADDR_VAR 0 3
76483: PUSH
76484: LD_VAR 0 3
76488: PPUSH
76489: LD_VAR 0 3
76493: PUSH
76494: LD_INT 1
76496: PLUS
76497: PPUSH
76498: LD_VAR 0 4
76502: PPUSH
76503: CALL_OW 1
76507: ST_TO_ADDR
76508: GO 76434
76510: POP
76511: POP
// end ;
76512: LD_VAR 0 3
76516: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76517: LD_INT 0
76519: PPUSH
76520: PPUSH
76521: PPUSH
76522: PPUSH
76523: PPUSH
76524: PPUSH
76525: PPUSH
// result := [ ] ;
76526: LD_ADDR_VAR 0 4
76530: PUSH
76531: EMPTY
76532: ST_TO_ADDR
// if x - r < 0 then
76533: LD_VAR 0 1
76537: PUSH
76538: LD_VAR 0 3
76542: MINUS
76543: PUSH
76544: LD_INT 0
76546: LESS
76547: IFFALSE 76559
// min_x := 0 else
76549: LD_ADDR_VAR 0 8
76553: PUSH
76554: LD_INT 0
76556: ST_TO_ADDR
76557: GO 76575
// min_x := x - r ;
76559: LD_ADDR_VAR 0 8
76563: PUSH
76564: LD_VAR 0 1
76568: PUSH
76569: LD_VAR 0 3
76573: MINUS
76574: ST_TO_ADDR
// if y - r < 0 then
76575: LD_VAR 0 2
76579: PUSH
76580: LD_VAR 0 3
76584: MINUS
76585: PUSH
76586: LD_INT 0
76588: LESS
76589: IFFALSE 76601
// min_y := 0 else
76591: LD_ADDR_VAR 0 7
76595: PUSH
76596: LD_INT 0
76598: ST_TO_ADDR
76599: GO 76617
// min_y := y - r ;
76601: LD_ADDR_VAR 0 7
76605: PUSH
76606: LD_VAR 0 2
76610: PUSH
76611: LD_VAR 0 3
76615: MINUS
76616: ST_TO_ADDR
// max_x := x + r ;
76617: LD_ADDR_VAR 0 9
76621: PUSH
76622: LD_VAR 0 1
76626: PUSH
76627: LD_VAR 0 3
76631: PLUS
76632: ST_TO_ADDR
// max_y := y + r ;
76633: LD_ADDR_VAR 0 10
76637: PUSH
76638: LD_VAR 0 2
76642: PUSH
76643: LD_VAR 0 3
76647: PLUS
76648: ST_TO_ADDR
// for _x = min_x to max_x do
76649: LD_ADDR_VAR 0 5
76653: PUSH
76654: DOUBLE
76655: LD_VAR 0 8
76659: DEC
76660: ST_TO_ADDR
76661: LD_VAR 0 9
76665: PUSH
76666: FOR_TO
76667: IFFALSE 76768
// for _y = min_y to max_y do
76669: LD_ADDR_VAR 0 6
76673: PUSH
76674: DOUBLE
76675: LD_VAR 0 7
76679: DEC
76680: ST_TO_ADDR
76681: LD_VAR 0 10
76685: PUSH
76686: FOR_TO
76687: IFFALSE 76764
// begin if not ValidHex ( _x , _y ) then
76689: LD_VAR 0 5
76693: PPUSH
76694: LD_VAR 0 6
76698: PPUSH
76699: CALL_OW 488
76703: NOT
76704: IFFALSE 76708
// continue ;
76706: GO 76686
// if GetResourceTypeXY ( _x , _y ) then
76708: LD_VAR 0 5
76712: PPUSH
76713: LD_VAR 0 6
76717: PPUSH
76718: CALL_OW 283
76722: IFFALSE 76762
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76724: LD_ADDR_VAR 0 4
76728: PUSH
76729: LD_VAR 0 4
76733: PPUSH
76734: LD_VAR 0 4
76738: PUSH
76739: LD_INT 1
76741: PLUS
76742: PPUSH
76743: LD_VAR 0 5
76747: PUSH
76748: LD_VAR 0 6
76752: PUSH
76753: EMPTY
76754: LIST
76755: LIST
76756: PPUSH
76757: CALL_OW 1
76761: ST_TO_ADDR
// end ;
76762: GO 76686
76764: POP
76765: POP
76766: GO 76666
76768: POP
76769: POP
// end ;
76770: LD_VAR 0 4
76774: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76775: LD_INT 0
76777: PPUSH
76778: PPUSH
76779: PPUSH
76780: PPUSH
76781: PPUSH
76782: PPUSH
76783: PPUSH
76784: PPUSH
// if not units then
76785: LD_VAR 0 1
76789: NOT
76790: IFFALSE 76794
// exit ;
76792: GO 77305
// result := UnitFilter ( units , [ f_ok ] ) ;
76794: LD_ADDR_VAR 0 3
76798: PUSH
76799: LD_VAR 0 1
76803: PPUSH
76804: LD_INT 50
76806: PUSH
76807: EMPTY
76808: LIST
76809: PPUSH
76810: CALL_OW 72
76814: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76815: LD_ADDR_VAR 0 8
76819: PUSH
76820: LD_VAR 0 1
76824: PUSH
76825: LD_INT 1
76827: ARRAY
76828: PPUSH
76829: CALL_OW 255
76833: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76834: LD_ADDR_VAR 0 10
76838: PUSH
76839: LD_INT 29
76841: PUSH
76842: LD_EXP 36
76846: PUSH
76847: LD_INT 49
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: LIST
76854: ST_TO_ADDR
// if not result then
76855: LD_VAR 0 3
76859: NOT
76860: IFFALSE 76864
// exit ;
76862: GO 77305
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76864: LD_ADDR_VAR 0 5
76868: PUSH
76869: LD_INT 81
76871: PUSH
76872: LD_VAR 0 8
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: PPUSH
76881: CALL_OW 69
76885: ST_TO_ADDR
// for i in result do
76886: LD_ADDR_VAR 0 4
76890: PUSH
76891: LD_VAR 0 3
76895: PUSH
76896: FOR_IN
76897: IFFALSE 77303
// begin tag := GetTag ( i ) + 1 ;
76899: LD_ADDR_VAR 0 9
76903: PUSH
76904: LD_VAR 0 4
76908: PPUSH
76909: CALL_OW 110
76913: PUSH
76914: LD_INT 1
76916: PLUS
76917: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76918: LD_ADDR_VAR 0 7
76922: PUSH
76923: LD_VAR 0 4
76927: PPUSH
76928: CALL_OW 250
76932: PPUSH
76933: LD_VAR 0 4
76937: PPUSH
76938: CALL_OW 251
76942: PPUSH
76943: LD_INT 6
76945: PPUSH
76946: CALL 76517 0 3
76950: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76951: LD_VAR 0 7
76955: PUSH
76956: LD_VAR 0 4
76960: PPUSH
76961: CALL_OW 264
76965: PUSH
76966: LD_VAR 0 10
76970: IN
76971: NOT
76972: AND
76973: IFFALSE 77012
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76975: LD_VAR 0 4
76979: PPUSH
76980: LD_VAR 0 7
76984: PUSH
76985: LD_INT 1
76987: ARRAY
76988: PUSH
76989: LD_INT 1
76991: ARRAY
76992: PPUSH
76993: LD_VAR 0 7
76997: PUSH
76998: LD_INT 1
77000: ARRAY
77001: PUSH
77002: LD_INT 2
77004: ARRAY
77005: PPUSH
77006: CALL_OW 116
77010: GO 77301
// if path > tag then
77012: LD_VAR 0 2
77016: PUSH
77017: LD_VAR 0 9
77021: GREATER
77022: IFFALSE 77230
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77024: LD_ADDR_VAR 0 6
77028: PUSH
77029: LD_VAR 0 5
77033: PPUSH
77034: LD_INT 91
77036: PUSH
77037: LD_VAR 0 4
77041: PUSH
77042: LD_INT 12
77044: PUSH
77045: EMPTY
77046: LIST
77047: LIST
77048: LIST
77049: PPUSH
77050: CALL_OW 72
77054: ST_TO_ADDR
// if nearEnemy then
77055: LD_VAR 0 6
77059: IFFALSE 77128
// begin if GetWeapon ( i ) = ru_time_lapser then
77061: LD_VAR 0 4
77065: PPUSH
77066: CALL_OW 264
77070: PUSH
77071: LD_INT 49
77073: EQUAL
77074: IFFALSE 77102
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77076: LD_VAR 0 4
77080: PPUSH
77081: LD_VAR 0 6
77085: PPUSH
77086: LD_VAR 0 4
77090: PPUSH
77091: CALL_OW 74
77095: PPUSH
77096: CALL_OW 112
77100: GO 77126
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77102: LD_VAR 0 4
77106: PPUSH
77107: LD_VAR 0 6
77111: PPUSH
77112: LD_VAR 0 4
77116: PPUSH
77117: CALL_OW 74
77121: PPUSH
77122: CALL_OW 115
// end else
77126: GO 77228
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77128: LD_VAR 0 4
77132: PPUSH
77133: LD_VAR 0 2
77137: PUSH
77138: LD_VAR 0 9
77142: ARRAY
77143: PUSH
77144: LD_INT 1
77146: ARRAY
77147: PPUSH
77148: LD_VAR 0 2
77152: PUSH
77153: LD_VAR 0 9
77157: ARRAY
77158: PUSH
77159: LD_INT 2
77161: ARRAY
77162: PPUSH
77163: CALL_OW 297
77167: PUSH
77168: LD_INT 6
77170: GREATER
77171: IFFALSE 77214
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77173: LD_VAR 0 4
77177: PPUSH
77178: LD_VAR 0 2
77182: PUSH
77183: LD_VAR 0 9
77187: ARRAY
77188: PUSH
77189: LD_INT 1
77191: ARRAY
77192: PPUSH
77193: LD_VAR 0 2
77197: PUSH
77198: LD_VAR 0 9
77202: ARRAY
77203: PUSH
77204: LD_INT 2
77206: ARRAY
77207: PPUSH
77208: CALL_OW 114
77212: GO 77228
// SetTag ( i , tag ) ;
77214: LD_VAR 0 4
77218: PPUSH
77219: LD_VAR 0 9
77223: PPUSH
77224: CALL_OW 109
// end else
77228: GO 77301
// if enemy then
77230: LD_VAR 0 5
77234: IFFALSE 77301
// begin if GetWeapon ( i ) = ru_time_lapser then
77236: LD_VAR 0 4
77240: PPUSH
77241: CALL_OW 264
77245: PUSH
77246: LD_INT 49
77248: EQUAL
77249: IFFALSE 77277
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77251: LD_VAR 0 4
77255: PPUSH
77256: LD_VAR 0 5
77260: PPUSH
77261: LD_VAR 0 4
77265: PPUSH
77266: CALL_OW 74
77270: PPUSH
77271: CALL_OW 112
77275: GO 77301
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77277: LD_VAR 0 4
77281: PPUSH
77282: LD_VAR 0 5
77286: PPUSH
77287: LD_VAR 0 4
77291: PPUSH
77292: CALL_OW 74
77296: PPUSH
77297: CALL_OW 115
// end ; end ;
77301: GO 76896
77303: POP
77304: POP
// end ;
77305: LD_VAR 0 3
77309: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77310: LD_INT 0
77312: PPUSH
77313: PPUSH
77314: PPUSH
// if not unit or IsInUnit ( unit ) then
77315: LD_VAR 0 1
77319: NOT
77320: PUSH
77321: LD_VAR 0 1
77325: PPUSH
77326: CALL_OW 310
77330: OR
77331: IFFALSE 77335
// exit ;
77333: GO 77426
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77335: LD_ADDR_VAR 0 4
77339: PUSH
77340: LD_VAR 0 1
77344: PPUSH
77345: CALL_OW 250
77349: PPUSH
77350: LD_VAR 0 2
77354: PPUSH
77355: LD_INT 1
77357: PPUSH
77358: CALL_OW 272
77362: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77363: LD_ADDR_VAR 0 5
77367: PUSH
77368: LD_VAR 0 1
77372: PPUSH
77373: CALL_OW 251
77377: PPUSH
77378: LD_VAR 0 2
77382: PPUSH
77383: LD_INT 1
77385: PPUSH
77386: CALL_OW 273
77390: ST_TO_ADDR
// if ValidHex ( x , y ) then
77391: LD_VAR 0 4
77395: PPUSH
77396: LD_VAR 0 5
77400: PPUSH
77401: CALL_OW 488
77405: IFFALSE 77426
// ComTurnXY ( unit , x , y ) ;
77407: LD_VAR 0 1
77411: PPUSH
77412: LD_VAR 0 4
77416: PPUSH
77417: LD_VAR 0 5
77421: PPUSH
77422: CALL_OW 118
// end ;
77426: LD_VAR 0 3
77430: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77431: LD_INT 0
77433: PPUSH
77434: PPUSH
// result := false ;
77435: LD_ADDR_VAR 0 3
77439: PUSH
77440: LD_INT 0
77442: ST_TO_ADDR
// if not units then
77443: LD_VAR 0 2
77447: NOT
77448: IFFALSE 77452
// exit ;
77450: GO 77497
// for i in units do
77452: LD_ADDR_VAR 0 4
77456: PUSH
77457: LD_VAR 0 2
77461: PUSH
77462: FOR_IN
77463: IFFALSE 77495
// if See ( side , i ) then
77465: LD_VAR 0 1
77469: PPUSH
77470: LD_VAR 0 4
77474: PPUSH
77475: CALL_OW 292
77479: IFFALSE 77493
// begin result := true ;
77481: LD_ADDR_VAR 0 3
77485: PUSH
77486: LD_INT 1
77488: ST_TO_ADDR
// exit ;
77489: POP
77490: POP
77491: GO 77497
// end ;
77493: GO 77462
77495: POP
77496: POP
// end ;
77497: LD_VAR 0 3
77501: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77502: LD_INT 0
77504: PPUSH
77505: PPUSH
77506: PPUSH
77507: PPUSH
// if not unit or not points then
77508: LD_VAR 0 1
77512: NOT
77513: PUSH
77514: LD_VAR 0 2
77518: NOT
77519: OR
77520: IFFALSE 77524
// exit ;
77522: GO 77614
// dist := 99999 ;
77524: LD_ADDR_VAR 0 5
77528: PUSH
77529: LD_INT 99999
77531: ST_TO_ADDR
// for i in points do
77532: LD_ADDR_VAR 0 4
77536: PUSH
77537: LD_VAR 0 2
77541: PUSH
77542: FOR_IN
77543: IFFALSE 77612
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77545: LD_ADDR_VAR 0 6
77549: PUSH
77550: LD_VAR 0 1
77554: PPUSH
77555: LD_VAR 0 4
77559: PUSH
77560: LD_INT 1
77562: ARRAY
77563: PPUSH
77564: LD_VAR 0 4
77568: PUSH
77569: LD_INT 2
77571: ARRAY
77572: PPUSH
77573: CALL_OW 297
77577: ST_TO_ADDR
// if tmpDist < dist then
77578: LD_VAR 0 6
77582: PUSH
77583: LD_VAR 0 5
77587: LESS
77588: IFFALSE 77610
// begin result := i ;
77590: LD_ADDR_VAR 0 3
77594: PUSH
77595: LD_VAR 0 4
77599: ST_TO_ADDR
// dist := tmpDist ;
77600: LD_ADDR_VAR 0 5
77604: PUSH
77605: LD_VAR 0 6
77609: ST_TO_ADDR
// end ; end ;
77610: GO 77542
77612: POP
77613: POP
// end ;
77614: LD_VAR 0 3
77618: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77619: LD_INT 0
77621: PPUSH
// uc_side := side ;
77622: LD_ADDR_OWVAR 20
77626: PUSH
77627: LD_VAR 0 1
77631: ST_TO_ADDR
// uc_nation := 3 ;
77632: LD_ADDR_OWVAR 21
77636: PUSH
77637: LD_INT 3
77639: ST_TO_ADDR
// vc_chassis := 25 ;
77640: LD_ADDR_OWVAR 37
77644: PUSH
77645: LD_INT 25
77647: ST_TO_ADDR
// vc_engine := engine_siberite ;
77648: LD_ADDR_OWVAR 39
77652: PUSH
77653: LD_INT 3
77655: ST_TO_ADDR
// vc_control := control_computer ;
77656: LD_ADDR_OWVAR 38
77660: PUSH
77661: LD_INT 3
77663: ST_TO_ADDR
// vc_weapon := 59 ;
77664: LD_ADDR_OWVAR 40
77668: PUSH
77669: LD_INT 59
77671: ST_TO_ADDR
// result := CreateVehicle ;
77672: LD_ADDR_VAR 0 5
77676: PUSH
77677: CALL_OW 45
77681: ST_TO_ADDR
// SetDir ( result , d ) ;
77682: LD_VAR 0 5
77686: PPUSH
77687: LD_VAR 0 4
77691: PPUSH
77692: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77696: LD_VAR 0 5
77700: PPUSH
77701: LD_VAR 0 2
77705: PPUSH
77706: LD_VAR 0 3
77710: PPUSH
77711: LD_INT 0
77713: PPUSH
77714: CALL_OW 48
// end ;
77718: LD_VAR 0 5
77722: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77723: LD_INT 0
77725: PPUSH
77726: PPUSH
77727: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77728: LD_ADDR_VAR 0 2
77732: PUSH
77733: LD_INT 0
77735: PUSH
77736: LD_INT 0
77738: PUSH
77739: LD_INT 0
77741: PUSH
77742: LD_INT 0
77744: PUSH
77745: EMPTY
77746: LIST
77747: LIST
77748: LIST
77749: LIST
77750: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77751: LD_VAR 0 1
77755: NOT
77756: PUSH
77757: LD_VAR 0 1
77761: PPUSH
77762: CALL_OW 264
77766: PUSH
77767: LD_INT 12
77769: PUSH
77770: LD_INT 51
77772: PUSH
77773: LD_INT 32
77775: PUSH
77776: LD_EXP 33
77780: PUSH
77781: EMPTY
77782: LIST
77783: LIST
77784: LIST
77785: LIST
77786: IN
77787: NOT
77788: OR
77789: IFFALSE 77793
// exit ;
77791: GO 77891
// for i := 1 to 3 do
77793: LD_ADDR_VAR 0 3
77797: PUSH
77798: DOUBLE
77799: LD_INT 1
77801: DEC
77802: ST_TO_ADDR
77803: LD_INT 3
77805: PUSH
77806: FOR_TO
77807: IFFALSE 77889
// begin tmp := GetCargo ( cargo , i ) ;
77809: LD_ADDR_VAR 0 4
77813: PUSH
77814: LD_VAR 0 1
77818: PPUSH
77819: LD_VAR 0 3
77823: PPUSH
77824: CALL_OW 289
77828: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77829: LD_ADDR_VAR 0 2
77833: PUSH
77834: LD_VAR 0 2
77838: PPUSH
77839: LD_VAR 0 3
77843: PPUSH
77844: LD_VAR 0 4
77848: PPUSH
77849: CALL_OW 1
77853: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77854: LD_ADDR_VAR 0 2
77858: PUSH
77859: LD_VAR 0 2
77863: PPUSH
77864: LD_INT 4
77866: PPUSH
77867: LD_VAR 0 2
77871: PUSH
77872: LD_INT 4
77874: ARRAY
77875: PUSH
77876: LD_VAR 0 4
77880: PLUS
77881: PPUSH
77882: CALL_OW 1
77886: ST_TO_ADDR
// end ;
77887: GO 77806
77889: POP
77890: POP
// end ;
77891: LD_VAR 0 2
77895: RET
// export function Length ( array ) ; begin
77896: LD_INT 0
77898: PPUSH
// result := array + 0 ;
77899: LD_ADDR_VAR 0 2
77903: PUSH
77904: LD_VAR 0 1
77908: PUSH
77909: LD_INT 0
77911: PLUS
77912: ST_TO_ADDR
// end ; end_of_file
77913: LD_VAR 0 2
77917: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77918: LD_VAR 0 1
77922: PUSH
77923: LD_INT 200
77925: DOUBLE
77926: GREATEREQUAL
77927: IFFALSE 77935
77929: LD_INT 299
77931: DOUBLE
77932: LESSEQUAL
77933: IFTRUE 77937
77935: GO 77969
77937: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77938: LD_VAR 0 1
77942: PPUSH
77943: LD_VAR 0 2
77947: PPUSH
77948: LD_VAR 0 3
77952: PPUSH
77953: LD_VAR 0 4
77957: PPUSH
77958: LD_VAR 0 5
77962: PPUSH
77963: CALL 33236 0 5
77967: GO 78046
77969: LD_INT 300
77971: DOUBLE
77972: GREATEREQUAL
77973: IFFALSE 77981
77975: LD_INT 399
77977: DOUBLE
77978: LESSEQUAL
77979: IFTRUE 77983
77981: GO 78045
77983: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77984: LD_VAR 0 1
77988: PPUSH
77989: LD_VAR 0 2
77993: PPUSH
77994: LD_VAR 0 3
77998: PPUSH
77999: LD_VAR 0 4
78003: PPUSH
78004: LD_VAR 0 5
78008: PPUSH
78009: LD_VAR 0 6
78013: PPUSH
78014: LD_VAR 0 7
78018: PPUSH
78019: LD_VAR 0 8
78023: PPUSH
78024: LD_VAR 0 9
78028: PPUSH
78029: LD_VAR 0 10
78033: PPUSH
78034: LD_VAR 0 11
78038: PPUSH
78039: CALL 30878 0 11
78043: GO 78046
78045: POP
// end ;
78046: PPOPN 11
78048: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78049: LD_VAR 0 1
78053: PPUSH
78054: LD_VAR 0 2
78058: PPUSH
78059: LD_VAR 0 3
78063: PPUSH
78064: LD_VAR 0 4
78068: PPUSH
78069: LD_VAR 0 5
78073: PPUSH
78074: CALL 32972 0 5
// end ; end_of_file
78078: PPOPN 5
78080: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78081: LD_VAR 0 1
78085: PPUSH
78086: LD_VAR 0 2
78090: PPUSH
78091: LD_VAR 0 3
78095: PPUSH
78096: LD_VAR 0 4
78100: PPUSH
78101: LD_VAR 0 5
78105: PPUSH
78106: LD_VAR 0 6
78110: PPUSH
78111: CALL 18571 0 6
// end ;
78115: PPOPN 6
78117: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78118: LD_INT 0
78120: PPUSH
// begin if not units then
78121: LD_VAR 0 1
78125: NOT
78126: IFFALSE 78130
// exit ;
78128: GO 78218
// if p1 = 1 then
78130: LD_VAR 0 2
78134: PUSH
78135: LD_INT 1
78137: EQUAL
78138: IFFALSE 78218
// begin if p2 = 1 then
78140: LD_VAR 0 3
78144: PUSH
78145: LD_INT 1
78147: EQUAL
78148: IFFALSE 78179
// begin for i in units do
78150: LD_ADDR_VAR 0 7
78154: PUSH
78155: LD_VAR 0 1
78159: PUSH
78160: FOR_IN
78161: IFFALSE 78177
// begin SetUnitAttackType ( i , 3 ) ;
78163: LD_VAR 0 7
78167: PPUSH
78168: LD_INT 3
78170: PPUSH
78171: CALL_OW 603
// end ;
78175: GO 78160
78177: POP
78178: POP
// end ; if p2 = 2 then
78179: LD_VAR 0 3
78183: PUSH
78184: LD_INT 2
78186: EQUAL
78187: IFFALSE 78218
// begin for i in units do
78189: LD_ADDR_VAR 0 7
78193: PUSH
78194: LD_VAR 0 1
78198: PUSH
78199: FOR_IN
78200: IFFALSE 78216
// begin SetUnitAttackType ( i , 1 ) ;
78202: LD_VAR 0 7
78206: PPUSH
78207: LD_INT 1
78209: PPUSH
78210: CALL_OW 603
// end ;
78214: GO 78199
78216: POP
78217: POP
// end ; end ; end ;
78218: PPOPN 7
78220: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78221: CALL 18546 0 0
// end ;
78225: PPOPN 1
78227: END
